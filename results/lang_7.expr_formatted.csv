BinaryMutation.java,mutate,original,null,0,MathIllegalArgumentException,$ instanceof BinaryChromosome
FixedElapsedTime.java,FixedElapsedTime,maxTime,long,0,NumberIsTooSmallException,$ < 0
FixedElapsedTime.java,isSatisfied,endTime,long,0,DEF,$ < 0
RandomKey.java,decodeGeneric,representation,List<Double>,0,DimensionMismatchException,$.size() != l
RandomKey.java,decodeGeneric,sortedRepr,List<Double>,0,DimensionMismatchException,$.size() != l
RandomKey.java,isSame,another,null,0,RET,$ instanceof RandomKey<?>
RandomKey.java,checkValidity,val,double,0,InvalidRepresentationException,$ < 0
RandomKey.java,checkValidity,val,double,0,InvalidRepresentationException,$ > 1
RandomKey.java,inducedPermutation,index,int,0,MathIllegalArgumentException,$ == -1
GeneticAlgorithm.java,GeneticAlgorithm,crossoverRate,double,0,OutOfRangeException,$ < 0
GeneticAlgorithm.java,GeneticAlgorithm,crossoverRate,double,0,OutOfRangeException,$ > 1
GeneticAlgorithm.java,GeneticAlgorithm,mutationRate,double,0,OutOfRangeException,$ < 0
GeneticAlgorithm.java,GeneticAlgorithm,mutationRate,double,0,OutOfRangeException,$ > 1
OrderedCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
OrderedCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
Chromosome.java,searchForFitnessUpdate,sameChromosome,Chromosome,0,DEF,$ != null
ElitisticListPopulation.java,setElitismRate,elitismRate,double,0,OutOfRangeException,$ < 0
ElitisticListPopulation.java,setElitismRate,elitismRate,double,0,OutOfRangeException,$ > 1
NPointCrossover.java,NPointCrossover,crossoverPoints,int,0,NotStrictlyPositiveException,$ <= 0
NPointCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
NPointCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
NPointCrossover.java,mate,crossoverPoints,int,0,NumberIsTooLargeException,$ >= length
CycleCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
CycleCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
CycleCrossover.java,mate,cycle,int,0,DEF,$++ % 2 != 0
CycleCrossover.java,mate,idx,int,0,DEF,$ >= length
BinaryChromosome.java,checkValidity,i,int,0,InvalidRepresentationException,$ < 0
BinaryChromosome.java,checkValidity,i,int,0,InvalidRepresentationException,$ >1
BinaryChromosome.java,isSame,another,null,0,RET,$ instanceof BinaryChromosome
OnePointCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
OnePointCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
RandomKeyMutation.java,mutate,original,null,0,MathIllegalArgumentException,$ instanceof RandomKey<?>
UniformCrossover.java,UniformCrossover,ratio,double,0,OutOfRangeException,$ < 0.0d
UniformCrossover.java,UniformCrossover,ratio,double,0,OutOfRangeException,$ > 1.0d
UniformCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
UniformCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
UniformCrossover.java,mate,random,RandomGenerator,1,DEF,$.nextDouble() < ratio
ListPopulation.java,ListPopulation,chromosomes,List<Chromosome>,0,NullArgumentException,$ == null
ListPopulation.java,ListPopulation,populationLimit,int,0,NotPositiveException,$ <= 0
ListPopulation.java,ListPopulation,chromosomes,List<Chromosome>,0,NumberIsTooLargeException,$.size() > populationLimit
ListPopulation.java,setChromosomes,chromosomes,List<Chromosome>,0,NullArgumentException,$ == null
ListPopulation.java,setChromosomes,chromosomes,List<Chromosome>,0,NumberIsTooLargeException,$.size() > populationLimit
ListPopulation.java,addChromosomes,chromosomeColl,Collection<Chromosome>,0,NumberIsTooLargeException,chromosomes.size() + $.size() > populationLimit
ListPopulation.java,addChromosomes,chromosomes,List<Chromosome>,0,NumberIsTooLargeException,$.size() + chromosomeColl.size() > populationLimit
ListPopulation.java,addChromosome,chromosomes,List<Chromosome>,0,NumberIsTooLargeException,$.size() >= populationLimit
ListPopulation.java,getFittestChromosome,bestChromosome,Chromosome,0,DEF,chromosome.compareTo($) > 0
ListPopulation.java,getFittestChromosome,chromosome,Chromosome,0,DEF,$.compareTo(bestChromosome) > 0
ListPopulation.java,setPopulationLimit,populationLimit,int,0,NotPositiveException,$ <= 0
FixedGenerationCount.java,FixedGenerationCount,maxGenerations,int,0,NumberIsTooSmallException,$ <= 0
SmallPrimes.java,boundedTrialDivision,n,int,0,DEF,$ != 1
SmallPrimes.java,millerRabinPrimeTest,n,int,0,DEF,$ >= 2047
SmallPrimes.java,millerRabinPrimeTest,n,int,0,DEF,$ >= 1373653
SmallPrimes.java,millerRabinPrimeTest,n,int,0,DEF,$ >= 25326001
SmallPrimes.java,millerRabinPrimeTest,y,int,0,RET,$ != nMinus1
SmallPrimes.java,millerRabinPrimeTest,nMinus1,int,0,RET,$ != y
PollardRho.java,gcdPositive,a,int,1,RET,$ == 0
PollardRho.java,gcdPositive,b,int,0,RET,$ == 0
Primes.java,isPrime,n,int,0,RET,$ < 2
Primes.java,nextPrime,n,int,0,MathIllegalArgumentException,$ < 0
Primes.java,nextPrime,n,int,0,RET,$ == 2
Primes.java,nextPrime,n,int,0,RET,$ == 1
Primes.java,primeFactors,n,int,0,MathIllegalArgumentException,$ < 2
ConjugateGradient.java,solveInPlace,m,RealLinearOperator,1,DEF,$ == null
ConjugateGradient.java,solveInPlace,rnorm,double,0,RET,$ <= rmax
ConjugateGradient.java,solveInPlace,m,RealLinearOperator,0,DEF,$ != null
ConjugateGradient.java,solveInPlace,rhoNext,double,0,DEF,$ <= 0.
ConjugateGradient.java,solveInPlace,manager,IterationManager,1,DEF,$.getIterations() == 2
ConjugateGradient.java,solveInPlace,pq,double,0,DEF,$ <= 0.
ConjugateGradient.java,solveInPlace,rnorm,double,0,RET,$ <= rmax
JacobiPreconditioner.java,create,a,RealLinearOperator,0,NonSquareOperatorException,$.getRowDimension() != n
JacobiPreconditioner.java,create,a,null,1,DEF,$ instanceof AbstractRealMatrix
RealVectorFormat.java,format,i,int,0,DEF,$ > 0
RealVectorFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
RealVectorFormat.java,parse,component,Number,1,DEF,$ != null
Array2DRowRealMatrix.java,Array2DRowRealMatrix,d,double[][],0,NullArgumentException,$ == null
Array2DRowRealMatrix.java,Array2DRowRealMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,Array2DRowRealMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,Array2DRowRealMatrix,r,int,0,DimensionMismatchException,d[$].length != nCols
Array2DRowRealMatrix.java,Array2DRowRealMatrix,d,double[][],0,DimensionMismatchException,$[r].length != nCols
Array2DRowRealMatrix.java,setSubMatrix,data,double[][],1,DimensionMismatchException,$ == null
Array2DRowRealMatrix.java,setSubMatrix,row,int,0,MathIllegalStateException,$ > 0
Array2DRowRealMatrix.java,setSubMatrix,column,int,0,MathIllegalStateException,$ > 0
Array2DRowRealMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,setSubMatrix,i,int,0,DimensionMismatchException,subMatrix[$].length != nCols
Array2DRowRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DimensionMismatchException,$[i].length != nCols
Array2DRowRealMatrix.java,operate,v,double[],0,DimensionMismatchException,$.length != nCols
Array2DRowRealMatrix.java,preMultiply,v,double[],0,DimensionMismatchException,$.length != nRows
AbstractRealMatrix.java,AbstractRealMatrix,rowDimension,int,0,NotStrictlyPositiveException,$ < 1
AbstractRealMatrix.java,AbstractRealMatrix,columnDimension,int,0,NotStrictlyPositiveException,$ < 1
AbstractRealMatrix.java,power,p,int,0,NotPositiveException,$ < 0
AbstractRealMatrix.java,power,p,int,0,RET,$ == 0
AbstractRealMatrix.java,power,p,int,0,RET,$ == 1
AbstractRealMatrix.java,power,i,int,0,DEF,binaryRepresentation[$] == '1'
AbstractRealMatrix.java,power,binaryRepresentation,char[],0,DEF,$[i] == '1'
AbstractRealMatrix.java,power,maxI,int,0,DEF,$ == -1
AbstractRealMatrix.java,visit,row,int,0,DEF,$ == endRow
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$.length < rowsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$[0].length < columnsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$[i].length < columnsCount
AbstractRealMatrix.java,copySubMatrix,i,int,0,MatrixDimensionMismatchException,destination[$].length < columnsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$.length < selectedRows.length
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$[0].length < nCols
AbstractRealMatrix.java,copySubMatrix,destinationI,double[],0,MatrixDimensionMismatchException,$.length < nCols
AbstractRealMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
AbstractRealMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
AbstractRealMatrix.java,setSubMatrix,r,int,0,DimensionMismatchException,subMatrix[$].length != nCols
AbstractRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DimensionMismatchException,$[r].length != nCols
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
AbstractRealMatrix.java,setRowVector,vector,RealVector,0,MatrixDimensionMismatchException,$.getDimension() != nCols
AbstractRealMatrix.java,setColumnVector,vector,RealVector,0,MatrixDimensionMismatchException,$.getDimension() != nRows
AbstractRealMatrix.java,setRow,array,double[],0,MatrixDimensionMismatchException,$.length != nCols
AbstractRealMatrix.java,setColumn,array,double[],0,MatrixDimensionMismatchException,$.length != nRows
AbstractRealMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractRealMatrix.java,operate,v,double[],0,DimensionMismatchException,$.length != nCols
AbstractRealMatrix.java,operate,v,RealVector,0,DimensionMismatchException,$.getDimension() != nCols
AbstractRealMatrix.java,preMultiply,v,double[],0,DimensionMismatchException,$.length != nRows
AbstractRealMatrix.java,preMultiply,v,RealVector,0,DimensionMismatchException,$.getDimension() != nRows
AbstractRealMatrix.java,equals,object,Object,0,RET,$ instanceof RealMatrix == false
AbstractRealMatrix.java,equals,object,null,0,RET,$ instanceof RealMatrix
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getColumnDimension() != nCols
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getRowDimension() != nRows
SymmLQ.java,checkSymmetry,s,double,0,DEF,FastMath.abs($ - t) > epsa
SymmLQ.java,checkSymmetry,t,double,0,DEF,FastMath.abs(s - $) > epsa
SymmLQ.java,refineSolution,lqnorm,double,1,DEF,$ < cgnorm
SymmLQ.java,update,m,RealLinearOperator,0,DEF,$ != null
SymmLQ.java,update,beta,double,0,DEF,$ < 0.
SymmLQ.java,updateNorms,lqnorm,double,1,DEF,$ <= cgnorm
SymmLQ.java,updateNorms,acond,double,0,IllConditionedOperatorException,$ * MACH_PREC >= 0.1
SymmLQ.java,updateNorms,MACH_PREC,double,0,IllConditionedOperatorException,acond * $ >= 0.1
SymmLQ.java,updateNorms,beta1,double,0,SingularOperatorException,$ <= epsx
BlockRealMatrix.java,toBlocksLayout,length,int,0,DimensionMismatchException,$ != columns
BlockRealMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,setSubMatrix,refLength,int,0,NoDataException,$ == 0
BlockRealMatrix.java,setSubMatrix,subRow,double[],0,DimensionMismatchException,$.length != refLength
BlockRealMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
BlockRealMatrix.java,setRowMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
BlockRealMatrix.java,setRowMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
BlockRealMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
BlockRealMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
BlockRealMatrix.java,setColumnMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
BlockRealMatrix.java,setColumnMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
BlockRealMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
BlockRealMatrix.java,setRow,array,double[],0,MatrixDimensionMismatchException,$.length != nCols
BlockRealMatrix.java,setColumn,array,double[],0,MatrixDimensionMismatchException,$.length != nRows
BlockRealMatrix.java,operate,v,double[],0,DimensionMismatchException,$.length != columns
BlockRealMatrix.java,preMultiply,v,double[],0,DimensionMismatchException,$.length != rows
MatrixUtils.java,createRealMatrix,data,double[][],0,NullArgumentException,$ == null
MatrixUtils.java,createRealMatrix,data,double[][],0,NullArgumentException,$[0] == null
MatrixUtils.java,createFieldMatrix,data,T[][],0,NullArgumentException,$ == null
MatrixUtils.java,createFieldMatrix,data,T[][],0,NullArgumentException,$[0] == null
MatrixUtils.java,createRealVector,data,double[],0,NullArgumentException,$ == null
MatrixUtils.java,createFieldVector,data,T[],0,NullArgumentException,$ == null
MatrixUtils.java,createFieldVector,data,T[],0,ZeroException,$.length == 0
MatrixUtils.java,createRowRealMatrix,rowData,double[],0,NullArgumentException,$ == null
MatrixUtils.java,createRowFieldMatrix,rowData,T[],0,NullArgumentException,$ == null
MatrixUtils.java,createRowFieldMatrix,nCols,int,0,NoDataException,$ == 0
MatrixUtils.java,createColumnRealMatrix,columnData,double[],0,NullArgumentException,$ == null
MatrixUtils.java,createColumnFieldMatrix,columnData,T[],0,NullArgumentException,$ == null
MatrixUtils.java,createColumnFieldMatrix,nRows,int,0,NoDataException,$ == 0
MatrixUtils.java,checkRowIndex,row,int,0,OutOfRangeException,$ < 0
MatrixUtils.java,checkColumnIndex,column,int,0,OutOfRangeException,$ < 0
MatrixUtils.java,checkSubMatrixIndex,endRow,int,0,NumberIsTooSmallException,$ < startRow
MatrixUtils.java,checkSubMatrixIndex,endColumn,int,0,NumberIsTooSmallException,$ < startColumn
MatrixUtils.java,checkSubMatrixIndex,selectedRows,int[],0,NullArgumentException,$ == null
MatrixUtils.java,checkSubMatrixIndex,selectedColumns,int[],0,NullArgumentException,$ == null
MatrixUtils.java,checkSubMatrixIndex,selectedRows,int[],0,NoDataException,$.length == 0
MatrixUtils.java,checkSubMatrixIndex,selectedColumns,int[],0,NoDataException,$.length == 0
MatrixUtils.java,solveLowerTriangularSystem,rm,RealMatrix,0,DimensionMismatchException,$ == null
MatrixUtils.java,solveLowerTriangularSystem,b,RealVector,0,DimensionMismatchException,$ == null
MatrixUtils.java,solveLowerTriangularSystem,diag,double,0,MathArithmeticException,FastMath.abs($) < Precision.SAFE_MIN
MatrixUtils.java,solveUpperTriangularSystem,rm,RealMatrix,0,DimensionMismatchException,$ == null
MatrixUtils.java,solveUpperTriangularSystem,b,RealVector,0,DimensionMismatchException,$ == null
MatrixUtils.java,solveUpperTriangularSystem,diag,double,0,MathArithmeticException,FastMath.abs($) < Precision.SAFE_MIN
MatrixUtils.java,blockInverse,m,RealMatrix,0,NonSquareMatrixException,$.getColumnDimension() != n
SchurTransformer.java,getP,cachedP,RealMatrix,0,DEF,$ == null
SchurTransformer.java,getPT,cachedPt,RealMatrix,0,DEF,$ == null
SchurTransformer.java,getT,cachedT,RealMatrix,0,DEF,$ == null
SchurTransformer.java,transform,il,int,1,DEF,$ == iu
SchurTransformer.java,transform,q,double,0,DEF,$ >= 0
SchurTransformer.java,transform,p,double,1,DEF,$ >= 0
SchurTransformer.java,transform,iteration,int,0,MaxCountExceededException,++$ > MAX_ITERATIONS
SchurTransformer.java,findSmallSubDiagonalElement,s,double,0,DEF,$ == 0.0
SchurTransformer.java,computeShift,l,int,0,DEF,$ < idx
SchurTransformer.java,computeShift,iteration,int,0,DEF,$ == 10
SchurTransformer.java,computeShift,iteration,int,0,DEF,$ == 30
SchurTransformer.java,computeShift,s,double,0,DEF,$ > 0.0
SchurTransformer.java,computeShift,shift,ShiftInfo,0,DEF,$.y < shift.x
SchurTransformer.java,initQRStep,im,int,0,DEF,$ == il
SchurTransformer.java,performDoubleQRStep,k,int,0,DEF,$ != im
SchurTransformer.java,performDoubleQRStep,shift,ShiftInfo,0,DEF,$.x == 0.0
SchurTransformer.java,performDoubleQRStep,p,double,0,DEF,$ < 0.0
SchurTransformer.java,performDoubleQRStep,s,double,0,DEF,$ != 0.0
SchurTransformer.java,performDoubleQRStep,k,int,1,DEF,$ != im
SchurTransformer.java,performDoubleQRStep,il,int,0,DEF,$ != im
RealVector.java,checkVectorDimensions,d,int,0,DimensionMismatchException,$ != n
RealVector.java,checkIndex,index,int,0,OutOfRangeException,$ < 0
RealVector.java,checkIndices,start,int,0,OutOfRangeException,$ < 0
RealVector.java,checkIndices,start,int,0,OutOfRangeException,$ >= dim
RealVector.java,checkIndices,end,int,0,OutOfRangeException,$ < 0
RealVector.java,checkIndices,end,int,0,OutOfRangeException,$ >= dim
RealVector.java,checkIndices,end,int,0,NumberIsTooSmallException,$ < start
RealVector.java,mapAddToSelf,d,double,0,RET,$ != 0
RealVector.java,cosine,norm,double,0,MathArithmeticException,$ == 0
RealVector.java,cosine,vNorm,double,0,MathArithmeticException,$ == 0
RealVector.java,getMinIndex,entry,Entry,0,DEF,$.getValue() <= minValue
RealVector.java,getMaxIndex,entry,Entry,0,DEF,$.getValue() >= maxValue
RealVector.java,outerProduct,v,null,1,DEF,$ instanceof SparseRealVector
RealVector.java,projection,norm2,double,0,MathArithmeticException,$ == 0.0
RealVector.java,unitVector,norm,double,0,MathArithmeticException,$ == 0
RealVector.java,unitize,norm,double,0,MathArithmeticException,$ == 0
RealVector.java,next,i,int,1,RET,$ < dim
RealVector.java,SparseEntryIterator,next,Entry,0,DEF,$.getValue() == 0
RealVector.java,advance,e,Entry,0,RET,$ == null
RealVector.java,advance,e,Entry,0,DEF,$.getIndex() >= dim
RealVector.java,next,index,int,0,NoSuchElementException,$ < 0
TriDiagonalTransformer.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,cachedQt,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,hK,double[],0,DEF,$[k] != 0.0
TriDiagonalTransformer.java,getQT,k,int,0,DEF,hK[$] != 0.0
TriDiagonalTransformer.java,getT,cachedT,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getT,i,int,0,DEF,$ > 0
TriDiagonalTransformer.java,transform,a,double,0,DEF,$ != 0.0
DefaultIterativeLinearSolverEvent.java,getResidual,r,RealVector,0,RET,$ != null
DiagonalMatrix.java,createMatrix,rowDimension,int,0,DimensionMismatchException,$ != columnDimension
DiagonalMatrix.java,multiply,m,null,1,RET,$ instanceof DiagonalMatrix
DiagonalMatrix.java,setEntry,row,int,1,DEF,$ == column
DiagonalMatrix.java,addToEntry,row,int,1,DEF,$ == column
DiagonalMatrix.java,multiplyEntry,row,int,0,DEF,$ == column
HessenbergTransformer.java,getP,cachedP,RealMatrix,0,DEF,$ == null
HessenbergTransformer.java,getP,householderVectors,double[][],0,DEF,$[m][m - 1] != 0.0
HessenbergTransformer.java,getP,m,int,0,DEF,householderVectors[$][$ - 1] != 0.0
HessenbergTransformer.java,getPT,cachedPt,RealMatrix,0,DEF,$ == null
HessenbergTransformer.java,getH,cachedH,RealMatrix,0,DEF,$ == null
HessenbergTransformer.java,getH,i,int,0,DEF,$ > 0
RRQRDecomposition.java,performHouseholderReflection,l2NormSquared,double,0,DEF,$ > l2NormSquaredMax
RRQRDecomposition.java,performHouseholderReflection,l2NormSquaredMaxIndex,int,0,DEF,$ != minor
RRQRDecomposition.java,getP,cachedP,RealMatrix,0,DEF,$ == null
RRQRDecomposition.java,getRank,thisNorm,double,0,DEF,$ == 0
RRQRDecomposition.java,getRank,lastNorm,double,0,DEF,(thisNorm / $) * rNorm < dropThreshold
RRQRDecomposition.java,getRank,rNorm,double,0,DEF,(thisNorm / lastNorm) * $ < dropThreshold
RRQRDecomposition.java,getRank,thisNorm,double,0,DEF,($ / lastNorm) * rNorm < dropThreshold
QRDecomposition.java,performHouseholderReflection,a,double,0,DEF,$ != 0.0
QRDecomposition.java,getR,cachedR,RealMatrix,0,DEF,$ == null
QRDecomposition.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
QRDecomposition.java,getQT,cachedQT,RealMatrix,0,DEF,$ == null
QRDecomposition.java,getQT,minor,int,0,DEF,qrtMinor[$] != 0.0
QRDecomposition.java,getQT,qrtMinor,double[],0,DEF,$[minor] != 0.0
QRDecomposition.java,getH,cachedH,RealMatrix,0,DEF,$ == null
QRDecomposition.java,isNonSingular,diag,double,0,RET,FastMath.abs($) <= threshold
QRDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
QRDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
OpenMapRealMatrix.java,OpenMapRealMatrix,lCol,long,0,NumberIsTooLargeException,lRow * $ >= Integer.MAX_VALUE
OpenMapRealMatrix.java,OpenMapRealMatrix,lRow,long,0,NumberIsTooLargeException,$ * lCol >= Integer.MAX_VALUE
OpenMapRealMatrix.java,multiply,outValue,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,setEntry,value,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,addToEntry,value,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,multiplyEntry,value,double,1,DEF,$ == 0.0
SparseFieldVector.java,append,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,getSubVector,n,int,0,NotPositiveException,$ < 0
SparseFieldVector.java,getSubVector,key,int,0,DEF,$ >= index
SparseFieldVector.java,getSubVector,key,int,0,DEF,$ < end
SparseFieldVector.java,outerProduct,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,subtract,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,checkIndex,index,int,0,OutOfRangeException,$ < 0
SparseFieldVector.java,add,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,equals,obj,null,0,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,equals,field,Field<T>,1,RET,$ == null
SparseFieldVector.java,equals,other,SparseFieldVector<T>,0,RET,$.field != null
SparseFieldVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
AbstractFieldMatrix.java,AbstractFieldMatrix,rowDimension,int,0,NotStrictlyPositiveException,$ <= 0
AbstractFieldMatrix.java,AbstractFieldMatrix,columnDimension,int,0,NotStrictlyPositiveException,$ <= 0
AbstractFieldMatrix.java,extractField,d,T[][],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,extractField,d,T[][],0,NoDataException,$.length == 0
AbstractFieldMatrix.java,extractField,d,T[][],0,NoDataException,$[0].length == 0
AbstractFieldMatrix.java,extractField,d,T[],0,NoDataException,$.length == 0
AbstractFieldMatrix.java,power,p,int,0,NotPositiveException,$ < 0
AbstractFieldMatrix.java,power,p,int,0,RET,$ == 0
AbstractFieldMatrix.java,power,p,int,0,RET,$ == 1
AbstractFieldMatrix.java,power,i,int,0,DEF,binaryRepresentation[$] == '1'
AbstractFieldMatrix.java,power,binaryRepresentation,char[],0,DEF,$[i] == '1'
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$.length < rowsCount
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$[0].length < columnsCount
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$.length < selectedRows.length
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$[0].length < selectedColumns.length
AbstractFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
AbstractFieldMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
AbstractFieldMatrix.java,setSubMatrix,r,int,0,DimensionMismatchException,subMatrix[$].length != nCols
AbstractFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,DimensionMismatchException,$[r].length != nCols
AbstractFieldMatrix.java,setRowMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
AbstractFieldMatrix.java,setRowMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
AbstractFieldMatrix.java,setColumnMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
AbstractFieldMatrix.java,setColumnMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
AbstractFieldMatrix.java,setRowVector,vector,FieldVector<T>,0,MatrixDimensionMismatchException,$.getDimension() != nCols
AbstractFieldMatrix.java,setColumnVector,vector,FieldVector<T>,0,MatrixDimensionMismatchException,$.getDimension() != nRows
AbstractFieldMatrix.java,setRow,array,T[],0,MatrixDimensionMismatchException,$.length != nCols
AbstractFieldMatrix.java,setColumn,array,T[],0,MatrixDimensionMismatchException,$.length != nRows
AbstractFieldMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractFieldMatrix.java,operate,v,T[],0,DimensionMismatchException,$.length != nCols
AbstractFieldMatrix.java,operate,v,FieldVector<T>,0,DimensionMismatchException,$.getDimension() != nCols
AbstractFieldMatrix.java,preMultiply,v,T[],0,DimensionMismatchException,$.length != nRows
AbstractFieldMatrix.java,preMultiply,v,FieldVector<T>,0,DimensionMismatchException,$.getDimension() != nRows
AbstractFieldMatrix.java,toString,i,int,0,DEF,$ > 0
AbstractFieldMatrix.java,toString,j,int,0,DEF,$ > 0
AbstractFieldMatrix.java,equals,object,Object,0,RET,$ instanceof FieldMatrix<?> == false
AbstractFieldMatrix.java,equals,object,null,0,RET,$ instanceof FieldMatrix<?>
AbstractFieldMatrix.java,equals,m,FieldMatrix<>,0,RET,$.getColumnDimension() != nCols
AbstractFieldMatrix.java,equals,m,FieldMatrix<>,0,RET,$.getRowDimension() != nRows
AbstractFieldMatrix.java,checkRowIndex,row,int,0,OutOfRangeException,$ < 0
AbstractFieldMatrix.java,checkColumnIndex,column,int,0,OutOfRangeException,$ < 0
AbstractFieldMatrix.java,checkSubMatrixIndex,endRow,int,0,NumberIsTooSmallException,$ < startRow
AbstractFieldMatrix.java,checkSubMatrixIndex,endColumn,int,0,NumberIsTooSmallException,$ < startColumn
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedColumns,int[],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,NoDataException,$.length == 0
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedColumns,int[],0,NoDataException,$.length == 0
LUDecomposition.java,LUDecomposition,sum,double,0,DEF,FastMath.abs($) > largest
LUDecomposition.java,LUDecomposition,col,int,0,RET,FastMath.abs(lu[max][$]) < singularityThreshold
LUDecomposition.java,LUDecomposition,max,int,0,RET,FastMath.abs(lu[$][col]) < singularityThreshold
LUDecomposition.java,LUDecomposition,lu,double[][],0,RET,FastMath.abs($[max][col]) < singularityThreshold
LUDecomposition.java,LUDecomposition,max,int,0,DEF,$ != col
LUDecomposition.java,getL,cachedL,RealMatrix,0,DEF,$ == null
LUDecomposition.java,getU,cachedU,RealMatrix,0,DEF,$ == null
LUDecomposition.java,getP,cachedP,RealMatrix,0,DEF,$ == null
LUDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
LUDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
EigenDecomposition.java,getV,cachedV,RealMatrix,0,DEF,$ == null
EigenDecomposition.java,getD,cachedD,RealMatrix,0,DEF,$ == null
EigenDecomposition.java,getD,imagEigenvalues,double[],1,DEF,Precision.compareTo($[i], 0.0, EPSILON) > 0
EigenDecomposition.java,getD,i,int,1,DEF,Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) > 0
EigenDecomposition.java,getD,EPSILON,double,1,DEF,Precision.compareTo(imagEigenvalues[i], 0.0, $) > 0
EigenDecomposition.java,getD,imagEigenvalues,double[],0,DEF,Precision.compareTo($[i], 0.0, EPSILON) < 0
EigenDecomposition.java,getD,i,int,0,DEF,Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0
EigenDecomposition.java,getD,EPSILON,double,0,DEF,Precision.compareTo(imagEigenvalues[i], 0.0, $) < 0
EigenDecomposition.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
EigenDecomposition.java,getSquareRoot,eigen,double,0,MathUnsupportedOperationException,$ <= 0
EigenDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
EigenDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
EigenDecomposition.java,isNonSingular,realEigenvalues,double[],0,RET,$[i] == 0
EigenDecomposition.java,isNonSingular,i,int,0,RET,realEigenvalues[$] == 0
EigenDecomposition.java,isNonSingular,imagEigenvalues,double[],0,RET,$[i] == 0
EigenDecomposition.java,isNonSingular,i,int,0,RET,imagEigenvalues[$] == 0
EigenDecomposition.java,findEigenVectors,realEigenvalues,double[],0,DEF,FastMath.abs($[i]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,e,double[],0,DEF,FastMath.abs($[i]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,FastMath.abs(e[$]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,maxAbsoluteValue,double,0,DEF,$ != 0
EigenDecomposition.java,findEigenVectors,e,double[],0,DEF,FastMath.abs($[m]) + delta == delta
EigenDecomposition.java,findEigenVectors,delta,double,0,DEF,FastMath.abs(e[m]) + $ == delta
EigenDecomposition.java,findEigenVectors,m,int,0,DEF,FastMath.abs(e[$]) + delta == delta
EigenDecomposition.java,findEigenVectors,m,int,0,MaxCountExceededException,$ != j
EigenDecomposition.java,findEigenVectors,its,int,0,MaxCountExceededException,$ == maxIter
EigenDecomposition.java,findEigenVectors,q,double,1,DEF,$ < 0.0
EigenDecomposition.java,findEigenVectors,e,double[],0,DEF,$[i + 1] == 0.0
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,e[$ + 1] == 0.0
EigenDecomposition.java,findEigenVectors,t,double,0,DEF,$ == 0.0
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,$ >= j
EigenDecomposition.java,findEigenVectors,realEigenvalues,double[],0,DEF,$[j] > p
EigenDecomposition.java,findEigenVectors,j,int,0,DEF,realEigenvalues[$] > p
EigenDecomposition.java,findEigenVectors,k,int,0,DEF,$ != i
EigenDecomposition.java,findEigenVectors,realEigenvalues,double[],0,DEF,FastMath.abs($[i]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,maxAbsoluteValue,double,0,DEF,$ != 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,imagEigenvalues,double[],1,DEF,Precision.compareTo($[i], 0.0, EPSILON) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,i,int,1,DEF,Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,EPSILON,double,1,DEF,Precision.compareTo(imagEigenvalues[i], 0.0, $) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,w,double,1,DEF,$ != 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,t,double,0,DEF,(Precision.EPSILON * $) * $ > 1
EigenDecomposition.java,findEigenVectorsFromSchur,q,double,0,DEF,$ < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,imagEigenvalues,double[],1,DEF,Precision.compareTo($[i], 0.0, EPSILON) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,i,int,1,DEF,Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,EPSILON,double,1,DEF,Precision.compareTo(imagEigenvalues[i], 0.0, $) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,t,double,0,DEF,(Precision.EPSILON * $) * $ > 1
EigenDecomposition.java,findEigenVectorsFromSchur,i,int,0,DEF,$ < 0
BlockFieldMatrix.java,toBlocksLayout,length,int,0,DimensionMismatchException,$ != columns
BlockFieldMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,setSubMatrix,refLength,int,0,NoDataException,$ == 0
BlockFieldMatrix.java,setSubMatrix,subRow,T[],0,DimensionMismatchException,$.length != refLength
BlockFieldMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
BlockFieldMatrix.java,setRowMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
BlockFieldMatrix.java,setRowMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
BlockFieldMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
BlockFieldMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
BlockFieldMatrix.java,setColumnMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
BlockFieldMatrix.java,setColumnMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
BlockFieldMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
BlockFieldMatrix.java,setRow,array,T[],0,MatrixDimensionMismatchException,$.length != nCols
BlockFieldMatrix.java,setColumn,array,T[],0,MatrixDimensionMismatchException,$.length != nRows
BlockFieldMatrix.java,operate,v,T[],0,DimensionMismatchException,$.length != columns
BlockFieldMatrix.java,preMultiply,v,T[],0,DimensionMismatchException,$.length != rows
PreconditionedIterativeLinearSolver.java,checkParameters,m,RealLinearOperator,0,DimensionMismatchException,$ != null
CholeskyDecomposition.java,CholeskyDecomposition,lJI,double,0,NonSymmetricMatrixException,FastMath.abs(lIJ - $) > maxDelta
CholeskyDecomposition.java,CholeskyDecomposition,lIJ,double,0,NonSymmetricMatrixException,FastMath.abs($ - lJI) > maxDelta
CholeskyDecomposition.java,CholeskyDecomposition,ltI,double[],0,NonPositiveDefiniteMatrixException,$[i] <= absolutePositivityThreshold
CholeskyDecomposition.java,CholeskyDecomposition,i,int,0,NonPositiveDefiniteMatrixException,ltI[$] <= absolutePositivityThreshold
CholeskyDecomposition.java,getL,cachedL,RealMatrix,0,DEF,$ == null
CholeskyDecomposition.java,getLT,cachedLT,RealMatrix,0,DEF,$ == null
CholeskyDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
CholeskyDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,r,int,0,DimensionMismatchException,d[$].length != nCols
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,d,T[][],0,DimensionMismatchException,$[r].length != nCols
Array2DRowFieldMatrix.java,setSubMatrix,data,T[][],1,DimensionMismatchException,$ == null
Array2DRowFieldMatrix.java,setSubMatrix,row,int,0,MathIllegalStateException,$ > 0
Array2DRowFieldMatrix.java,setSubMatrix,column,int,0,MathIllegalStateException,$ > 0
Array2DRowFieldMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,setSubMatrix,i,int,0,DimensionMismatchException,subMatrix[$].length != nCols
Array2DRowFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,DimensionMismatchException,$[i].length != nCols
Array2DRowFieldMatrix.java,operate,v,T[],0,DimensionMismatchException,$.length != nCols
Array2DRowFieldMatrix.java,preMultiply,v,T[],0,DimensionMismatchException,$.length != nRows
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nct
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,singularValues[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,A,double[][],0,DEF,$[k][k] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,A[$][$] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nct
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,singularValues[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nct
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nrt
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k + 1] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$ + 1] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ + 1 < m
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,nct,int,0,DEF,$ < n
SingularValueDecomposition.java,SingularValueDecomposition,m,int,0,DEF,$ < p
SingularValueDecomposition.java,SingularValueDecomposition,nrt,int,0,DEF,$ + 1 < p
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],1,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,1,DEF,singularValues[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nrt
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,FastMath.abs($[k]) > threshold
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,FastMath.abs(e[$]) > threshold
SingularValueDecomposition.java,SingularValueDecomposition,ks,int,0,DEF,$ == k
SingularValueDecomposition.java,SingularValueDecomposition,ks,int,1,DEF,$ == k
SingularValueDecomposition.java,SingularValueDecomposition,j,int,0,DEF,$ != k
SingularValueDecomposition.java,SingularValueDecomposition,b,double,0,DEF,$ != 0
SingularValueDecomposition.java,SingularValueDecomposition,c,double,0,DEF,$ != 0
SingularValueDecomposition.java,SingularValueDecomposition,b,double,0,DEF,$ < 0
SingularValueDecomposition.java,SingularValueDecomposition,j,int,0,DEF,$ != k
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],0,DEF,$[k] <= 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,singularValues[$] <= 0
SingularValueDecomposition.java,getUT,cachedUt,RealMatrix,0,DEF,$ == null
SingularValueDecomposition.java,getS,cachedS,RealMatrix,0,DEF,$ == null
SingularValueDecomposition.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
SingularValueDecomposition.java,getCovariance,dimension,int,0,NumberIsTooLargeException,$ == 0
SingularValueDecomposition.java,getRank,singularValues,double[],0,DEF,$[i] > tol
SingularValueDecomposition.java,getRank,i,int,0,DEF,singularValues[$] > tol
SingularValueDecomposition.java,Solver,singularValues,double[],1,DEF,$[i] > tol
SingularValueDecomposition.java,Solver,i,int,1,DEF,singularValues[$] > tol
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,ZeroException,$.length == 0
ArrayFieldVector.java,ArrayFieldVector,v1,T[],0,ZeroException,$.length + v2.length == 0
ArrayFieldVector.java,ArrayFieldVector,v2,T[],0,ZeroException,v1.length + $.length == 0
ArrayFieldVector.java,ArrayFieldVector,v1,T[],0,ZeroException,$.length + v2.length == 0
ArrayFieldVector.java,ArrayFieldVector,v2,T[],0,ZeroException,v1.length + $.length == 0
ArrayFieldVector.java,getSubVector,n,int,0,NotPositiveException,$ < 0
ArrayFieldVector.java,checkVectorDimensions,data,T[],0,DimensionMismatchException,$.length != n
ArrayFieldVector.java,equals,other,Object,0,RET,$ == null
ArrayFieldVector.java,checkIndex,index,int,0,OutOfRangeException,$ < 0
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,swapR,int,0,DEF,$ != r
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,c,double[][],1,NonPositiveDefiniteMatrixException,$[ir][ir] <= small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,ir,int,1,NonPositiveDefiniteMatrixException,c[$][$] <= small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,r,int,0,NonPositiveDefiniteMatrixException,$ == 0
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,c,double[][],0,NonPositiveDefiniteMatrixException,$[index[i]][index[i]] < -small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,index,int[],0,NonPositiveDefiniteMatrixException,c[$[i]][$[i]] < -small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,i,int,0,NonPositiveDefiniteMatrixException,c[index[$]][index[$]] < -small
ArrayRealVector.java,ArrayRealVector,d,double[],0,NullArgumentException,$ == null
ArrayRealVector.java,ArrayRealVector,d,double[],0,NullArgumentException,$ == null
ArrayRealVector.java,ArrayRealVector,d,Double[],0,NullArgumentException,$ == null
ArrayRealVector.java,ArrayRealVector,v,RealVector,0,NullArgumentException,$ == null
ArrayRealVector.java,add,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,subtract,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,ebeMultiply,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,ebeDivide,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,dotProduct,v,null,0,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getDistance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getL1Distance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getLInfDistance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,outerProduct,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getSubVector,n,int,0,NotPositiveException,$ < 0
ArrayRealVector.java,setSubVector,v,null,1,DEF,$ instanceof ArrayRealVector
ArrayRealVector.java,checkVectorDimensions,data,double[],0,DimensionMismatchException,$.length != n
ArrayRealVector.java,equals,other,null,0,RET,$ instanceof RealVector
ArrayRealVector.java,combineToSelf,y,null,1,DEF,$ instanceof ArrayRealVector
RealMatrixFormat.java,format,j,int,0,DEF,$ > 0
RealMatrixFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
RealMatrixFormat.java,parse,trimmedRowSuffix,String,1,RET,$.length() != 0
RealMatrixFormat.java,parse,trimmedRowPrefix,String,0,RET,$.length() != 0
RealMatrixFormat.java,parse,component,Number,1,DEF,$ != null
BiDiagonalTransformer.java,BiDiagonalTransformer,m,int,1,DEF,$ >= n
BiDiagonalTransformer.java,getU,cachedU,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getU,hK,double[],0,DEF,$[k - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,k,int,0,DEF,hK[$ - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,hK[k - $] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getB,cachedB,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getB,m,int,1,DEF,$ < n
BiDiagonalTransformer.java,getB,i,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getV,cachedV,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getV,hK,double[],0,DEF,$[k] != 0.0
BiDiagonalTransformer.java,getV,k,int,0,DEF,hK[$] != 0.0
BiDiagonalTransformer.java,getV,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,b,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,b,double,0,DEF,$ != 0.0
FieldLUDecomposition.java,FieldLUDecomposition,nonZero,int,0,RET,$ >= m
FieldLUDecomposition.java,FieldLUDecomposition,nonZero,int,0,DEF,$ != col
FieldLUDecomposition.java,getL,cachedL,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecomposition.java,getU,cachedU,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecomposition.java,getP,cachedP,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecomposition.java,solve,b,FieldVector<T>,0,DimensionMismatchException,$.getDimension() != m
FieldLUDecomposition.java,solve,length,int,0,DimensionMismatchException,$ != m
FieldLUDecomposition.java,solve,b,FieldMatrix<T>,0,DimensionMismatchException,$.getRowDimension() != m
OpenMapRealVector.java,add,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,append,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getSubVector,n,int,0,NotPositiveException,$ < 0
OpenMapRealVector.java,getSubVector,key,int,0,DEF,$ >= index
OpenMapRealVector.java,getSubVector,key,int,0,DEF,$ < end
OpenMapRealVector.java,getDistance,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getL1Distance,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getLInfDistance,delta,double,0,DEF,$ > max
OpenMapRealVector.java,getLInfDistance,iter,Iterator,0,DEF,$.value() > max
OpenMapRealVector.java,getLInfDistance,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,subtract,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,equals,obj,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
DfpDec.java,round,msb,int,0,RET,$ == 0
DfpDec.java,round,lsbthreshold,int,0,RET,$ <= 1
DfpDec.java,round,lsbthreshold,int,1,DEF,$ == 1
DfpDec.java,round,rh,int,0,DEF,$ != 0
DfpDec.java,round,exp,int,0,RET,$ < MIN_EXP
DfpDec.java,round,exp,int,0,RET,$ > MAX_EXP
DfpDec.java,round,n,int,0,RET,$ != 0
DfpDec.java,round,discarded,int,0,RET,$ != 0
DfpDec.java,nextAfter,result,Dfp,0,DEF,$.classify() == INFINITE
Dfp.java,Dfp,x,long,0,DEF,$ == Long.MIN_VALUE
Dfp.java,Dfp,x,long,1,DEF,$ < 0
Dfp.java,Dfp,mant,int[],0,DEF,$[i] != 0
Dfp.java,Dfp,i,int,0,DEF,mant[$] != 0
Dfp.java,Dfp,exponent,int,0,RET,$ == -1023
Dfp.java,Dfp,x,double,0,RET,$ == 0
Dfp.java,Dfp,bits,long,0,DEF,($ & 0x8000000000000000L) != 0
Dfp.java,Dfp,exponent,int,0,RET,$ == 1024
Dfp.java,Dfp,x,double,1,DEF,$ != x
Dfp.java,Dfp,x,double,1,DEF,$ < 0
Dfp.java,Dfp,bits,long,0,DEF,($ & 0x8000000000000000L) != 0
Dfp.java,Dfp,p,int,0,DEF,$ == -1
Dfp.java,Dfp,p,int,1,DEF,$ != -1
Dfp.java,Dfp,fpexp,String,0,DEF,$.charAt(i) == '-'
Dfp.java,Dfp,i,int,0,DEF,fpexp.charAt($) == '-'
Dfp.java,Dfp,fpexp,String,0,DEF,$.charAt(i) >= '0'
Dfp.java,Dfp,i,int,0,DEF,fpexp.charAt($) >= '0'
Dfp.java,Dfp,fpexp,String,0,DEF,$.charAt(i) <= '9'
Dfp.java,Dfp,i,int,0,DEF,fpexp.charAt($) <= '9'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.indexOf(-") != -1"
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) >= '1'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) >= '1'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) <= '9'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) <= '9'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) == '0'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) == '0'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) == '.'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) == '.'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) == '.'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) == '.'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) < '0'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) < '0'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) > '9'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) > '9'
Dfp.java,Dfp,q,int,0,DEF,$ != offset
Dfp.java,Dfp,q,int,0,DEF,$ == offset
Dfp.java,Dfp,striped,char[],1,DEF,$[q] == '0'
Dfp.java,Dfp,q,int,1,DEF,striped[$] == '0'
Dfp.java,Dfp,significantDigits,int,0,DEF,$ == 0
Dfp.java,Dfp,p,int,0,DEF,striped[$] != '0'
Dfp.java,Dfp,striped,char[],0,DEF,$[p] != '0'
Dfp.java,Dfp,q,int,0,DEF,$ < striped.length
Dfp.java,align,adiff,int,0,DEF,$ < 0
Dfp.java,align,diff,int,0,RET,$ == 0
Dfp.java,align,diff,int,1,DEF,$ < 0
Dfp.java,align,lostdigit,int,0,DEF,$ != 0
Dfp.java,equals,other,null,0,RET,$ instanceof Dfp
Dfp.java,compare,a,Dfp,0,RET,$.mant[$.mant.length - 1] == 0
Dfp.java,compare,b,Dfp,0,RET,$.mant[$.mant.length - 1] == 0
Dfp.java,compare,a,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,a,Dfp,0,RET,$.sign != b.sign
Dfp.java,compare,a,Dfp,1,RET,$.sign == -1
Dfp.java,compare,a,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,a,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,a,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,b,Dfp,0,RET,$.mant[$.mant.length-1] != 0
Dfp.java,compare,a,Dfp,0,RET,$.mant[b.mant.length-1] != 0
Dfp.java,compare,b,Dfp,0,RET,a.mant[$.mant.length-1] != 0
Dfp.java,compare,a,Dfp,0,RET,$.exp < b.exp
Dfp.java,compare,a,Dfp,0,RET,$.exp > b.exp
Dfp.java,remainder,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,remainder,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,trunc,nans,byte,0,RET,$ == INFINITE
Dfp.java,trunc,mant,int[],0,RET,$[$.length-1] == 0
Dfp.java,trunc,exp,int,0,RET,$ < 0
Dfp.java,trunc,exp,int,0,RET,$ >= mant.length
Dfp.java,trunc,result,Dfp,0,DEF,$.sign == -1
Dfp.java,trunc,result,Dfp,0,DEF,$.sign == 1
Dfp.java,trunc,result,Dfp,0,DEF,$.exp > 0
Dfp.java,trunc,result,Dfp,0,DEF,($.mant[mant.length-$.exp]&1) != 0
Dfp.java,trunc,mant,int[],0,DEF,(result.mant[$.length-result.exp]&1) != 0
Dfp.java,intValue,rounded,Dfp,0,DEF,$.sign == -1
Dfp.java,intLog10,mant,int[],0,RET,$[$.length-1] > 1000
Dfp.java,intLog10,mant,int[],0,RET,$[$.length-1] > 100
Dfp.java,intLog10,mant,int[],0,RET,$[$.length-1] > 10
Dfp.java,power10,e,int,1,DEF,$ >= 0
Dfp.java,add,nans,byte,0,RET,$ != FINITE
Dfp.java,add,x,Dfp,0,RET,$.nans != FINITE
Dfp.java,add,nans,byte,0,RET,$ == INFINITE
Dfp.java,add,x,Dfp,0,RET,$.nans == FINITE
Dfp.java,add,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,add,nans,byte,0,RET,$ == FINITE
Dfp.java,add,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,add,nans,byte,0,RET,$ == INFINITE
Dfp.java,add,sign,byte,0,RET,$ == x.sign
Dfp.java,add,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,add,nans,byte,0,RET,$ == INFINITE
Dfp.java,add,sign,byte,0,RET,$ != x.sign
Dfp.java,add,a,Dfp,0,DEF,compare($, b) > 0
Dfp.java,add,b,Dfp,0,DEF,compare(a, $) > 0
Dfp.java,add,b,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,add,mant,int[],0,DEF,b.mant[$.length-1] == 0
Dfp.java,add,a,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,add,mant,int[],0,DEF,a.mant[$.length-1] == 0
Dfp.java,add,a,Dfp,1,DEF,$.exp < b.exp
Dfp.java,add,asign,byte,0,DEF,$ != bsign
Dfp.java,add,asign,byte,1,DEF,$ == rsign
Dfp.java,add,rh,int,0,DEF,$ != 0
Dfp.java,add,asign,byte,0,DEF,$ == bsign
Dfp.java,add,excp,int,0,DEF,$ != 0
Dfp.java,add,result,Dfp,0,DEF,$.mant[mant.length-1] != 0
Dfp.java,add,mant,int[],0,DEF,result.mant[$.length-1] != 0
Dfp.java,add,i,int,0,DEF,$ == 0
Dfp.java,add,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,add,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,add,asign,byte,0,DEF,$ != bsign
Dfp.java,add,excp,int,0,DEF,$ != 0
Dfp.java,round,rh,int,0,DEF,$ != 0
Dfp.java,round,exp,int,0,RET,$ < MIN_EXP
Dfp.java,round,exp,int,0,RET,$ > MAX_EXP
Dfp.java,round,n,int,0,RET,$ != 0
Dfp.java,multiply,nans,byte,0,RET,$ != FINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans != FINITE
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans == FINITE
Dfp.java,multiply,x,Dfp,0,RET,$.mant[mant.length-1] != 0
Dfp.java,multiply,mant,int[],0,RET,x.mant[$.length-1] != 0
Dfp.java,multiply,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,multiply,nans,byte,0,RET,$ == FINITE
Dfp.java,multiply,mant,int[],0,RET,$[$.length-1] != 0
Dfp.java,multiply,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,multiply,nans,byte,0,RET,$ == FINITE
Dfp.java,multiply,mant,int[],0,RET,$[$.length-1] == 0
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans == FINITE
Dfp.java,multiply,x,Dfp,0,RET,$.mant[mant.length-1] == 0
Dfp.java,multiply,mant,int[],0,RET,x.mant[$.length-1] == 0
Dfp.java,multiply,product,int[],0,DEF,$[i] != 0
Dfp.java,multiply,i,int,0,DEF,product[$] != 0
Dfp.java,multiply,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,multiply,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,multiply,excp,int,0,DEF,$ != 0
Dfp.java,multiply,x,int,1,RET,$ >= 0
Dfp.java,multiply,x,int,1,RET,$ < RADIX
Dfp.java,multiplyFast,nans,byte,0,RET,$ != FINITE
Dfp.java,multiplyFast,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiplyFast,x,int,0,RET,$ != 0
Dfp.java,multiplyFast,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiplyFast,x,int,0,RET,$ == 0
Dfp.java,multiplyFast,x,int,0,RET,$ < 0
Dfp.java,multiplyFast,x,int,0,RET,$ >= RADIX
Dfp.java,multiplyFast,rh,int,0,DEF,$ != 0
Dfp.java,multiplyFast,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,multiplyFast,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,multiplyFast,excp,int,0,DEF,$ != 0
Dfp.java,divide,nans,byte,0,RET,$ != FINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans != FINITE
Dfp.java,divide,nans,byte,0,RET,$ == INFINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans == FINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans == INFINITE
Dfp.java,divide,nans,byte,0,RET,$ == FINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans == INFINITE
Dfp.java,divide,nans,byte,0,RET,$ == INFINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.mant[mant.length-1] == 0
Dfp.java,divide,mant,int[],0,RET,divisor.mant[$.length-1] == 0
Dfp.java,divide,rh,int,0,DEF,$ == 0
Dfp.java,divide,minadj,int,0,DEF,$ >= 2
Dfp.java,divide,mant,int[],0,DEF,remainder[$.length] != 0
Dfp.java,divide,remainder,int[],0,DEF,$[mant.length] != 0
Dfp.java,divide,trialgood,boolean,0,DEF,$ == false
Dfp.java,divide,trial,int,0,DEF,$ != 0
Dfp.java,divide,nsqd,int,0,DEF,$ != 0
Dfp.java,divide,field,DfpField,0,DEF,$.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN
Dfp.java,divide,nsqd,int,0,DEF,$ == mant.length
Dfp.java,divide,nsqd,int,0,DEF,$ > mant.length
Dfp.java,divide,quotient,int[],0,DEF,$[i] != 0
Dfp.java,divide,i,int,0,DEF,quotient[$] != 0
Dfp.java,divide,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,divide,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,divide,excp,int,0,DEF,$ != 0
Dfp.java,divide,nans,byte,0,RET,$ != FINITE
Dfp.java,divide,nans,byte,0,RET,$ == INFINITE
Dfp.java,divide,divisor,int,0,RET,$ == 0
Dfp.java,divide,divisor,int,0,RET,$ < 0
Dfp.java,divide,divisor,int,0,RET,$ >= RADIX
Dfp.java,divide,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,divide,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,divide,excp,int,0,DEF,$ != 0
Dfp.java,sqrt,nans,byte,0,RET,$ == FINITE
Dfp.java,sqrt,mant,int[],0,RET,$[$.length-1] == 0
Dfp.java,sqrt,nans,byte,0,RET,$ != FINITE
Dfp.java,sqrt,nans,byte,0,RET,$ == INFINITE
Dfp.java,sqrt,sign,byte,0,RET,$ == 1
Dfp.java,sqrt,nans,byte,0,RET,$ == QNAN
Dfp.java,sqrt,nans,byte,0,RET,$ == SNAN
Dfp.java,sqrt,sign,byte,0,RET,$ == -1
Dfp.java,sqrt,x,Dfp,0,DEF,$.exp < -1
Dfp.java,sqrt,x,Dfp,0,DEF,$.exp > 1
Dfp.java,sqrt,dx,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,sqrt,mant,int[],0,DEF,dx.mant[$.length-1] == 0
Dfp.java,toString,nans,byte,0,RET,$ != FINITE
Dfp.java,toString,nans,byte,1,RET,$ == INFINITE
Dfp.java,toString,exp,int,0,RET,$ > mant.length
Dfp.java,toString,exp,int,0,RET,$ < -1
Dfp.java,dfp2sci,p,int,0,DEF,rawdigits[$] != '0'
Dfp.java,dfp2sci,rawdigits,char[],0,DEF,$[p] != '0'
Dfp.java,dfp2sci,sign,byte,0,DEF,$ == -1
Dfp.java,dfp2sci,p,int,1,DEF,$ != rawdigits.length
Dfp.java,dfp2sci,e,int,0,DEF,$ < 0
Dfp.java,dfp2sci,e,int,0,DEF,$ < 0
Dfp.java,dfp2string,e,int,0,DEF,$ <= 0
Dfp.java,dfp2string,e,int,0,DEF,--$ == 0
Dfp.java,dfp2string,q,int,0,DEF,buffer[$] == '.'
Dfp.java,dfp2string,buffer,char[],0,DEF,$[q] == '.'
Dfp.java,dfp2string,sign,byte,0,DEF,$ < 0
Dfp.java,dotrap,nans,byte,0,DEF,$ == FINITE
Dfp.java,dotrap,mant,int[],0,DEF,$[$.length-1] != 0
Dfp.java,dotrap,nans,byte,0,DEF,$ == FINITE
Dfp.java,dotrap,mant,int[],0,DEF,$[$.length-1] == 0
Dfp.java,dotrap,nans,byte,0,DEF,$ == INFINITE
Dfp.java,dotrap,nans,byte,0,DEF,$ == QNAN
Dfp.java,dotrap,nans,byte,0,DEF,$ == INFINITE
Dfp.java,dotrap,nans,byte,0,DEF,$ == SNAN
Dfp.java,dotrap,result,Dfp,1,DEF,($.exp+mant.length) < MIN_EXP
Dfp.java,dotrap,mant,int[],1,DEF,(result.exp+$.length) < MIN_EXP
Dfp.java,nextAfter,x,Dfp,0,RET,compare(this, $) == 0
Dfp.java,nextAfter,result,Dfp,0,DEF,$.classify() == INFINITE
Dfp.java,toDouble,cmp0,int,1,RET,$ == 0
Dfp.java,toDouble,cmp0,int,0,DEF,$ < 0
Dfp.java,toDouble,exponent,int,0,DEF,$ < 0
Dfp.java,toDouble,exponent,int,0,DEF,$ > -1023
Dfp.java,toDouble,exponent,int,0,RET,$ < -1074
Dfp.java,toDouble,exponent,int,0,RET,$ > 1023
Dfp.java,toDouble,mantissa,long,0,DEF,$ == 4503599627370496L
Dfp.java,toDouble,exponent,int,0,DEF,$ <= -1023
Dfp.java,copySign,sign,byte,0,RET,$ >= 0
Dfp.java,copySign,s,Dfp,0,RET,$.sign >= 0
Dfp.java,copySign,sign,byte,0,RET,$ < 0
Dfp.java,copySign,s,Dfp,0,RET,$.sign < 0
Dfp.java,copySign,sign,byte,0,RET,$ >= 0
Dfp.java,copySign,sb,long,0,RET,$ >= 0
Dfp.java,copySign,sign,byte,0,RET,$ < 0
Dfp.java,copySign,sb,long,0,RET,$ < 0
Dfp.java,atan2,x,Dfp,1,RET,$.sign >= 0
Dfp.java,linearCombination,a,Dfp[],0,DimensionMismatchException,$.length != b.length
Dfp.java,linearCombination,a,double[],0,DimensionMismatchException,$.length != b.length
DfpMath.java,split,buf,char[],0,DEF,$[i] >= '1'
DfpMath.java,split,i,int,0,DEF,buf[$] >= '1'
DfpMath.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpMath.java,split,i,int,0,DEF,buf[$] <= '9'
DfpMath.java,split,buf,char[],0,DEF,$[i] == '.'
DfpMath.java,split,i,int,0,DEF,buf[$] == '.'
DfpMath.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpMath.java,split,i,int,0,DEF,buf[$] >= '0'
DfpMath.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpMath.java,split,i,int,0,DEF,buf[$] <= '9'
DfpMath.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpMath.java,split,i,int,0,DEF,buf[$] >= '0'
DfpMath.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpMath.java,split,i,int,0,DEF,buf[$] <= '9'
DfpMath.java,split,i,int,0,DEF,$ < sp
DfpMath.java,splitMult,result,Dfp[],0,RET,$[0].classify() == Dfp.INFINITE
DfpMath.java,splitPow,a,int,0,RET,$ == 0
DfpMath.java,splitPow,a,int,0,DEF,$ < 0
DfpMath.java,splitPow,trial,int,0,DEF,$ > a
DfpMath.java,pow,a,int,0,RET,$ == 0
DfpMath.java,pow,a,int,0,DEF,$ < 0
DfpMath.java,exp,ia,int,0,RET,$ > 2147483646
DfpMath.java,exp,ia,int,0,RET,$ < -2147483646
DfpMath.java,log,a,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,1,RET,$.classify() == Dfp.FINITE
DfpMath.java,pow,y,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,x,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,1,RET,$.classify() == Dfp.FINITE
BracketingNthOrderBrentSolverDFP.java,BracketingNthOrderBrentSolverDFP,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolverDFP.java,solve,agingA,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolverDFP.java,solve,agingB,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolverDFP.java,solve,nbPoints,int,1,DEF,$ > 2
BracketingNthOrderBrentSolverDFP.java,solve,start,int,1,DEF,end - $ != nbPoints
BracketingNthOrderBrentSolverDFP.java,solve,end,int,1,DEF,$ - start != nbPoints
BracketingNthOrderBrentSolverDFP.java,solve,nbPoints,int,0,DEF,$ == x.length
DfpField.java,split,buf,char[],0,DEF,$[i] >= '1'
DfpField.java,split,i,int,0,DEF,buf[$] >= '1'
DfpField.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpField.java,split,i,int,0,DEF,buf[$] <= '9'
DfpField.java,split,buf,char[],0,DEF,$[i] == '.'
DfpField.java,split,i,int,0,DEF,buf[$] == '.'
DfpField.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpField.java,split,i,int,0,DEF,buf[$] >= '0'
DfpField.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpField.java,split,i,int,0,DEF,buf[$] <= '9'
DfpField.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpField.java,split,i,int,0,DEF,buf[$] >= '0'
DfpField.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpField.java,split,i,int,0,DEF,buf[$] <= '9'
DfpField.java,split,i,int,0,DEF,$ < sp
DfpField.java,computeStringConstants,sqr2String,String,0,DEF,$ == null
SimplexSolver.java,getPivotColumn,entry,double,0,DEF,$ < minValue
SimplexSolver.java,getPivotRow,entry,double,0,DEF,Precision.compareTo($, 0d, maxUlps) > 0
SimplexSolver.java,getPivotRow,maxUlps,int,0,DEF,Precision.compareTo(entry, 0d, $) > 0
SimplexSolver.java,getPivotRow,cmp,int,1,DEF,$ == 0
SimplexSolver.java,getPivotRow,cmp,int,0,DEF,$ < 0
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,1,RET,$.size() == 0
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,0,RET,$.size() > 1
SimplexSolver.java,getPivotRow,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() > 0
SimplexSolver.java,getPivotRow,basicRow,Integer,0,DEF,$ != null
SimplexSolver.java,getPivotRow,i,int,0,DEF,$ < minIndex
SimplexSolver.java,doIteration,pivotRow,Integer,0,UnboundedSolutionException,$ == null
SimplexSolver.java,doIteration,i,int,0,DEF,$ != pivotRow
SimplexSolver.java,solvePhase1,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() == 0
SimplexTableau.java,createTableau,constraint,LinearConstraint,1,DEF,$.getRelationship() == Relationship.LEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.EQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,normalize,constraint,LinearConstraint,0,RET,$.getValue() < 0
SimplexTableau.java,getConstraintTypeCounts,constraint,LinearConstraint,0,DEF,$.getRelationship() == relationship
SimplexTableau.java,getBasicRow,row,Integer,1,DEF,$ == null
SimplexTableau.java,dropPhase1Objective,epsilon,double,0,DEF,Precision.compareTo(entry, 0d, $) > 0
SimplexTableau.java,dropPhase1Objective,entry,double,0,DEF,Precision.compareTo($, 0d, epsilon) > 0
SimplexTableau.java,dropPhase1Objective,col,int,0,DEF,getBasicRow($) == null
SimplexTableau.java,isOptimal,epsilon,double,0,RET,Precision.compareTo(entry, 0d, $) < 0
SimplexTableau.java,isOptimal,entry,double,0,RET,Precision.compareTo($, 0d, epsilon) < 0
SimplexTableau.java,getSolution,colIndex,int,0,DEF,$ < 0
SimplexTableau.java,getSolution,basicRow,Integer,1,DEF,$ != null
SimplexTableau.java,getSolution,basicRow,Integer,1,DEF,$ == 0
SimplexTableau.java,subtractRow,result,double,0,DEF,FastMath.abs($) < CUTOFF_THRESHOLD
SimplexTableau.java,equals,other,null,0,RET,$ instanceof SimplexTableau
AbstractLinearOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxCountExceededException,++$ > maxIterations
LinearObjectiveFunction.java,equals,other,null,0,RET,$ instanceof LinearObjectiveFunction
LinearConstraint.java,equals,other,null,0,RET,$ instanceof LinearConstraint
SimpleValueChecker.java,SimpleValueChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimpleValueChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimpleValueChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
BrentOptimizer.java,BrentOptimizer,rel,double,0,NumberIsTooSmallException,$ < MIN_RELATIVE_TOLERANCE
BrentOptimizer.java,BrentOptimizer,abs,double,0,NotStrictlyPositiveException,$ <= 0
BrentOptimizer.java,doOptimize,lo,double,1,DEF,$ < hi
BrentOptimizer.java,doOptimize,e,double,1,DEF,FastMath.abs($) > tol1
BrentOptimizer.java,doOptimize,q,double,1,DEF,$ > 0
BrentOptimizer.java,doOptimize,a,double,0,DEF,u - $ < tol2
BrentOptimizer.java,doOptimize,u,double,0,DEF,$ - a < tol2
BrentOptimizer.java,doOptimize,b,double,0,DEF,$ - u < tol2
BrentOptimizer.java,doOptimize,u,double,0,DEF,b - $ < tol2
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ <= m
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ < m
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ < m
BrentOptimizer.java,doOptimize,d,double,1,DEF,FastMath.abs($) < tol1
BrentOptimizer.java,doOptimize,d,double,1,DEF,$ >= 0
BrentOptimizer.java,doOptimize,checker,ConvergenceChecker<UnivariatePointValuePair>,0,RET,$ != null
BrentOptimizer.java,doOptimize,fu,double,1,DEF,$ <= fx
BrentOptimizer.java,doOptimize,u,double,1,DEF,$ < x
BrentOptimizer.java,doOptimize,u,double,1,DEF,$ < x
BrentOptimizer.java,doOptimize,fu,double,1,DEF,$ <= fw
BrentOptimizer.java,doOptimize,fu,double,0,DEF,$ <= fv
BrentOptimizer.java,best,a,UnivariatePointValuePair,0,RET,$ == null
BrentOptimizer.java,best,b,UnivariatePointValuePair,0,RET,$ == null
SimpleUnivariateValueChecker.java,SimpleUnivariateValueChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimpleUnivariateValueChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimpleUnivariateValueChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
BaseAbstractUnivariateOptimizer.java,optimize,f,UnivariateFunction,0,NullArgumentException,$ == null
BaseAbstractUnivariateOptimizer.java,optimize,goalType,GoalType,0,NullArgumentException,$ == null
UnivariateMultiStartOptimizer.java,UnivariateMultiStartOptimizer,optimizer,BaseUnivariateOptimizer<FUNC>,0,NullArgumentException,$ == null
UnivariateMultiStartOptimizer.java,UnivariateMultiStartOptimizer,generator,RandomGenerator,0,NullArgumentException,$ == null
UnivariateMultiStartOptimizer.java,UnivariateMultiStartOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
UnivariateMultiStartOptimizer.java,getOptima,optima,UnivariatePointValuePair[],0,MathIllegalStateException,$ == null
UnivariateMultiStartOptimizer.java,optimize,optima,UnivariatePointValuePair[],0,DEF,$[0] == null
UnivariateMultiStartOptimizer.java,compare,o1,UnivariatePointValuePair,1,RET,$ == null
UnivariateMultiStartOptimizer.java,compare,o2,UnivariatePointValuePair,0,RET,$ == null
BracketFinder.java,BracketFinder,growLimit,double,0,NotStrictlyPositiveException,$ <= 0
BracketFinder.java,BracketFinder,maxEvaluations,int,0,NotStrictlyPositiveException,$ <= 0
BracketFinder.java,search,fA,double,0,DEF,$ < fB
BracketFinder.java,search,fA,double,0,DEF,$ > fB
BracketFinder.java,search,w,double,1,DEF,($ - xC) * (xB - $) > 0
BracketFinder.java,search,xB,double,1,DEF,(w - xC) * ($ - w) > 0
BracketFinder.java,search,xC,double,1,DEF,(w - $) * (xB - w) > 0
BracketFinder.java,search,fW,double,1,DEF,$ < fC
BracketFinder.java,search,fW,double,1,DEF,$ > fC
BracketFinder.java,search,fW,double,0,DEF,$ > fB
BracketFinder.java,search,fW,double,0,DEF,$ < fB
BracketFinder.java,search,w,double,1,DEF,($ - wLim) * (wLim - xC) >= 0
BracketFinder.java,search,xC,double,1,DEF,(w - wLim) * (wLim - $) >= 0
BracketFinder.java,search,wLim,double,1,DEF,(w - $) * ($ - xC) >= 0
BracketFinder.java,search,w,double,1,DEF,($ - wLim) * (xC - $) > 0
BracketFinder.java,search,xC,double,1,DEF,(w - wLim) * ($ - w) > 0
BracketFinder.java,search,wLim,double,1,DEF,(w - $) * (xC - w) > 0
BracketFinder.java,search,fW,double,0,DEF,$ < fC
BracketFinder.java,search,fW,double,0,DEF,$ > fC
BracketFinder.java,search,lo,double,0,DEF,$ > hi
SimpleVectorValueChecker.java,SimpleVectorValueChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimpleVectorValueChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimpleVectorValueChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
HarmonicFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NumberIsTooSmallException,$.length < 4
HarmonicFitter.java,sortObservations,i,int,0,DEF,$-- != 0
HarmonicFitter.java,guessAOmega,c1,double,1,ZeroException,$ / c2 < 0
HarmonicFitter.java,guessAOmega,c2,double,1,ZeroException,c1 / $ < 0
HarmonicFitter.java,guessAOmega,c3,double,1,ZeroException,c2 / $ < 0
HarmonicFitter.java,guessAOmega,c2,double,1,ZeroException,$ / c3 < 0
HarmonicFitter.java,guessAOmega,xRange,double,0,ZeroException,$ == 0
HarmonicFitter.java,guessAOmega,y,double,0,DEF,$ < yMin
HarmonicFitter.java,guessAOmega,y,double,0,DEF,$ > yMax
HarmonicFitter.java,guessAOmega,c2,double,0,MathIllegalStateException,$ == 0
GaussianFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NullArgumentException,$ == null
GaussianFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NumberIsTooSmallException,$.length < 3
GaussianFitter.java,compare,p1,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p2,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p1,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p2,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,interpolateXAtY,idxStep,int,0,ZeroException,$ == 0
GaussianFitter.java,interpolateXAtY,p1,WeightedObservedPoint,0,RET,$.getY() == y
GaussianFitter.java,interpolateXAtY,p2,WeightedObservedPoint,0,RET,$.getY() == y
GaussianFitter.java,getInterpolationPointsForY,idxStep,int,0,ZeroException,$ == 0
GaussianFitter.java,getInterpolationPointsForY,idxStep,int,1,RET,$ < 0
CurveFitter.java,fit,optimizer,MultivariateDifferentiableVectorOptimizer,1,DEF,$ == null
SimplePointChecker.java,SimplePointChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimplePointChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimplePointChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
LeastSquaresConverter.java,LeastSquaresConverter,observations,double[],0,DimensionMismatchException,$.length != weights.length
LeastSquaresConverter.java,value,residuals,double[],0,DimensionMismatchException,$.length != observations.length
LeastSquaresConverter.java,value,weights,double[],1,DEF,$ != null
LeastSquaresConverter.java,value,scale,RealMatrix,1,DEF,$ != null
BaseMultivariateVectorMultiStartOptimizer.java,BaseMultivariateVectorMultiStartOptimizer,optimizer,BaseMultivariateVectorOptimizer<FUNC>,0,NullArgumentException,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,BaseMultivariateVectorMultiStartOptimizer,generator,RandomVectorGenerator,0,NullArgumentException,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,BaseMultivariateVectorMultiStartOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
BaseMultivariateVectorMultiStartOptimizer.java,getOptima,optima,PointVectorValuePair[],0,MathIllegalStateException,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,optimize,optima,PointVectorValuePair[],0,DEF,$[0] == null
BaseMultivariateVectorMultiStartOptimizer.java,compare,o1,PointVectorValuePair,1,RET,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,compare,o2,PointVectorValuePair,0,RET,$ == null
BOBYQAOptimizer.java,bobyqa,lowerDifference,ArrayRealVector,1,DEF,$.getEntry(j) >= -initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,lowerDifference.getEntry($) >= -initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,lowerDifference,ArrayRealVector,1,DEF,$.getEntry(j) >= ZERO
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,lowerDifference.getEntry($) >= ZERO
BOBYQAOptimizer.java,bobyqa,upperDifference,ArrayRealVector,0,DEF,$.getEntry(j) <= initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,j,int,0,DEF,upperDifference.getEntry($) <= initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,upperDifference,ArrayRealVector,1,DEF,$.getEntry(j) <= ZERO
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,upperDifference.getEntry($) <= ZERO
BOBYQAOptimizer.java,bobyqb,trustRegionCenterInterpolationPointIndex,int,0,DEF,$ != kbase
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,bobyqb,crvmin,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,bdtest,double,0,DEF,$ < bdtol
BOBYQAOptimizer.java,bobyqb,bdtest,double,0,DEF,$ < bdtol
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,ntrits,int,1,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,denom,double,0,DEF,$ < cauchy
BOBYQAOptimizer.java,bobyqb,cauchy,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,k,int,0,DEF,$ == trustRegionCenterInterpolationPointIndex
BOBYQAOptimizer.java,bobyqb,temp,double,0,DEF,$ * den > scaden
BOBYQAOptimizer.java,bobyqb,den,double,0,DEF,temp * $ > scaden
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ == j
BOBYQAOptimizer.java,bobyqb,dnorm,double,0,DEF,$ > rho
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,MathIllegalStateException,$ > 0
BOBYQAOptimizer.java,bobyqb,vquad,double,0,MathIllegalStateException,$ >= ZERO
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= ONE_OVER_TEN
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= .7
BOBYQAOptimizer.java,bobyqb,f,double,0,DEF,$ < fopt
BOBYQAOptimizer.java,bobyqb,temp,double,0,DEF,$ * den > scaden
BOBYQAOptimizer.java,bobyqb,den,double,0,DEF,temp * $ > scaden
BOBYQAOptimizer.java,bobyqb,f,double,0,DEF,$ < fopt
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ > 0
BOBYQAOptimizer.java,bobyqb,itest,int,0,DEF,$ >= 3
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < n
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < npt
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < nh
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,sum,double,0,DEF,$ > distsq
BOBYQAOptimizer.java,bobyqb,knew,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,ratio,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,dnorm,double,0,DEF,Math.max(delta, $) > rho
BOBYQAOptimizer.java,bobyqb,delta,double,0,DEF,Math.max($, dnorm) > rho
BOBYQAOptimizer.java,bobyqb,rho,double,0,DEF,$ > stoppingTrustRegionRadius
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= SIXTEEN
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= TWO_HUNDRED_FIFTY
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,fAtInterpolationPoints,ArrayRealVector,0,DEF,$.getEntry(trustRegionCenterInterpolationPointIndex) <= fsave
BOBYQAOptimizer.java,bobyqb,trustRegionCenterInterpolationPointIndex,int,0,DEF,fAtInterpolationPoints.getEntry($) <= fsave
BOBYQAOptimizer.java,altmov,k,int,0,DEF,$ == trustRegionCenterInterpolationPointIndex
BOBYQAOptimizer.java,altmov,tmp,double,1,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,tmp,double,0,DEF,$ < ZERO
BOBYQAOptimizer.java,altmov,k,int,1,DEF,$ == knew
BOBYQAOptimizer.java,altmov,d4,double,0,DEF,d3 * $ < ZERO
BOBYQAOptimizer.java,altmov,d3,double,0,DEF,$ * d4 < ZERO
BOBYQAOptimizer.java,altmov,subd,double,0,DEF,$ > HALF
BOBYQAOptimizer.java,altmov,vlag,double,0,DEF,Math.abs($) < ONE_OVER_FOUR
BOBYQAOptimizer.java,altmov,predsq,double,0,DEF,$ > presav
BOBYQAOptimizer.java,altmov,ibdsav,int,0,DEF,$ < 0
BOBYQAOptimizer.java,altmov,ibdsav,int,0,DEF,$ > 0
BOBYQAOptimizer.java,altmov,glagValue,double,0,DEF,Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), $) > ZERO
BOBYQAOptimizer.java,altmov,i,int,0,DEF,Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,lowerDifference,ArrayRealVector,0,DEF,Math.min(trustRegionCenterOffset.getEntry(i) - $.getEntry(i), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,trustRegionCenterOffset,ArrayRealVector,0,DEF,Math.min($.getEntry(i) - lowerDifference.getEntry(i), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,glagValue,double,0,DEF,Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), $) < ZERO
BOBYQAOptimizer.java,altmov,upperDifference,ArrayRealVector,0,DEF,Math.max(trustRegionCenterOffset.getEntry(i) - $.getEntry(i), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,i,int,0,DEF,Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,trustRegionCenterOffset,ArrayRealVector,0,DEF,Math.max($.getEntry(i) - upperDifference.getEntry(i), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,ggfree,double,0,RET,$ == ZERO
BOBYQAOptimizer.java,altmov,tmp1,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,0,DEF,$.getEntry(i) == bigstp
BOBYQAOptimizer.java,altmov,i,int,0,DEF,work1.getEntry($) == bigstp
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,1,DEF,$.getEntry(i) == bigstp
BOBYQAOptimizer.java,altmov,i,int,1,DEF,work1.getEntry($) == bigstp
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,altmov,i,int,1,DEF,work1.getEntry($) == ZERO
BOBYQAOptimizer.java,altmov,glagValue,double,1,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,iflag,int,0,DEF,$ == 1
BOBYQAOptimizer.java,altmov,curv,double,1,DEF,$ > -gw
BOBYQAOptimizer.java,altmov,iflag,int,1,DEF,$ == 0
BOBYQAOptimizer.java,altmov,csave,double,0,DEF,$ > cauchy
BOBYQAOptimizer.java,prelim,nfm,int,1,DEF,$ >= 1
BOBYQAOptimizer.java,prelim,nfm,int,1,DEF,$ <= n
BOBYQAOptimizer.java,prelim,upperDifference,ArrayRealVector,0,DEF,$.getEntry(nfmm) == ZERO
BOBYQAOptimizer.java,prelim,nfmm,int,0,DEF,upperDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,nfm,int,0,DEF,$ > n
BOBYQAOptimizer.java,prelim,lowerDifference,ArrayRealVector,0,DEF,$.getEntry(nfxm) == ZERO
BOBYQAOptimizer.java,prelim,nfxm,int,0,DEF,lowerDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,upperDifference,ArrayRealVector,0,DEF,$.getEntry(nfxm) == ZERO
BOBYQAOptimizer.java,prelim,nfxm,int,0,DEF,upperDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,ipt,int,0,DEF,$ > n
BOBYQAOptimizer.java,prelim,numEval,int,1,DEF,$ == 1
BOBYQAOptimizer.java,prelim,numEval,int,1,DEF,$ >= 2
BOBYQAOptimizer.java,prelim,stepb,double,0,DEF,stepa * $ < ZERO
BOBYQAOptimizer.java,prelim,stepa,double,0,DEF,$ * stepb < ZERO
BOBYQAOptimizer.java,prelim,trustRegionCenterInterpolationPointIndex,int,0,DEF,$ == nfm
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,gradientAtTrustRegionCenter.getEntry($) >= ZERO
BOBYQAOptimizer.java,trsbox,gradientAtTrustRegionCenter,ArrayRealVector,0,DEF,$.getEntry(i) >= ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,gradientAtTrustRegionCenter.getEntry($) <= ZERO
BOBYQAOptimizer.java,trsbox,gradientAtTrustRegionCenter,ArrayRealVector,0,DEF,$.getEntry(i) <= ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,beta,double,1,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,stepsq,double,0,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,beta,double,0,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,resid,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,ds,double,1,DEF,$ < ZERO
BOBYQAOptimizer.java,trsbox,shs,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,0,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,s.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,1,DEF,$.getEntry(i) > ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,s.getEntry($) > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ < stplen
BOBYQAOptimizer.java,trsbox,stplen,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ == -1
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,crvmin,double,0,DEF,$ == MINUS_ONE
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,0,DEF,$.getEntry(iact) < ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,s.getEntry($) < ZERO
BOBYQAOptimizer.java,trsbox,delsq,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,stplen,double,0,DEF,$ < blen
BOBYQAOptimizer.java,trsbox,iterc,int,0,DEF,$ == itermax
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,tempa,double,1,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,tempb,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,angbd * $ > tempa
BOBYQAOptimizer.java,trsbox,angbd,double,0,DEF,$ * temp > tempa
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,angbd * $ > tempb
BOBYQAOptimizer.java,trsbox,angbd,double,0,DEF,$ * temp > tempb
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,rednew,double,1,DEF,$ > redmax
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ < 0
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ < iu
BOBYQAOptimizer.java,trsbox,sdec,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ == iu
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == MINUS_ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == MINUS_ONE
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,trsbox,k,int,0,DEF,modelSecondDerivativesParameters.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,modelSecondDerivativesParameters,ArrayRealVector,0,DEF,$.getEntry(k) != ZERO
BOBYQAOptimizer.java,trsbox,crvmin,double,0,DEF,$ != ZERO
BOBYQAOptimizer.java,trsbox,iterc,int,0,DEF,$ > itcsav
BOBYQAOptimizer.java,update,d1,double,0,DEF,Math.abs($) > ztest
BOBYQAOptimizer.java,update,i,int,0,DEF,$ >= npt
BOBYQAOptimizer.java,setup,dimension,int,0,NumberIsTooSmallException,$ < MINIMUM_PROBLEM_DIMENSION
BOBYQAOptimizer.java,setup,minDiff,double,0,DEF,$ < requiredMinDiff
MultivariateFunctionPenaltyAdapter.java,MultivariateFunctionPenaltyAdapter,lower,double[],0,DimensionMismatchException,$.length != upper.length
MultivariateFunctionPenaltyAdapter.java,MultivariateFunctionPenaltyAdapter,lower,double[],0,DimensionMismatchException,$.length != scale.length
PowellOptimizer.java,PowellOptimizer,rel,double,0,NumberIsTooSmallException,$ < MIN_RELATIVE_TOLERANCE
PowellOptimizer.java,PowellOptimizer,abs,double,0,NotStrictlyPositiveException,$ <= 0
PowellOptimizer.java,doOptimize,fX2,double,0,DEF,($ - fVal) > delta
PowellOptimizer.java,doOptimize,fVal,double,0,DEF,(fX2 - $) > delta
PowellOptimizer.java,doOptimize,checker,ConvergenceChecker<PointValuePair>,0,DEF,$ != null
PowellOptimizer.java,doOptimize,goal,GoalType,1,RET,$ == GoalType.MINIMIZE
PowellOptimizer.java,doOptimize,fX,double,0,DEF,$ > fX2
PowellOptimizer.java,doOptimize,t,double,0,DEF,$ < 0.0
MultivariateFunctionMappingAdapter.java,MultivariateFunctionMappingAdapter,lower,double[],0,DimensionMismatchException,$.length != upper.length
MultiDirectionalSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(reflected, best) < 0
MultiDirectionalSimplex.java,iterate,reflected,PointValuePair,0,RET,comparator.compare($, best) < 0
MultiDirectionalSimplex.java,iterate,best,PointValuePair,0,RET,comparator.compare(reflected, $) < 0
MultiDirectionalSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,DEF,$.compare(reflected, expanded) <= 0
MultiDirectionalSimplex.java,iterate,expanded,PointValuePair,0,DEF,comparator.compare(reflected, $) <= 0
MultiDirectionalSimplex.java,iterate,reflected,PointValuePair,0,DEF,comparator.compare($, expanded) <= 0
AbstractSimplex.java,AbstractSimplex,steps,double[],0,NullArgumentException,$ == null
AbstractSimplex.java,AbstractSimplex,steps,double[],0,ZeroException,$.length == 0
AbstractSimplex.java,AbstractSimplex,j,int,0,ZeroException,steps[$] == 0
AbstractSimplex.java,AbstractSimplex,steps,double[],0,ZeroException,$[j] == 0
AbstractSimplex.java,AbstractSimplex,referenceSimplex,double[][],0,NotStrictlyPositiveException,$.length <= 0
AbstractSimplex.java,AbstractSimplex,refI,double[],0,DimensionMismatchException,$.length != dimension
AbstractSimplex.java,AbstractSimplex,i,int,0,DEF,$ > 0
AbstractSimplex.java,build,dimension,int,0,DimensionMismatchException,$ != startPoint.length
AbstractSimplex.java,replaceWorstPoint,comparator,Comparator<PointValuePair>,0,DEF,$.compare(simplex[i], pointValuePair) > 0
AbstractSimplex.java,replaceWorstPoint,pointValuePair,PointValuePair,0,DEF,comparator.compare(simplex[i], $) > 0
AbstractSimplex.java,replaceWorstPoint,simplex,PointValuePair[],0,DEF,comparator.compare($[i], pointValuePair) > 0
AbstractSimplex.java,replaceWorstPoint,i,int,0,DEF,comparator.compare(simplex[$], pointValuePair) > 0
AbstractSimplex.java,getPoint,index,int,0,OutOfRangeException,$ < 0
AbstractSimplex.java,getPoint,index,int,0,OutOfRangeException,$ >= simplex.length
AbstractSimplex.java,setPoint,index,int,0,OutOfRangeException,$ < 0
AbstractSimplex.java,setPoint,index,int,0,OutOfRangeException,$ >= simplex.length
AbstractSimplex.java,setPoints,points,PointValuePair[],0,DimensionMismatchException,$.length != simplex.length
BaseAbstractMultivariateVectorOptimizer.java,optimizeInternal,f,FUNC,0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimizeInternal,t,double[],0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimizeInternal,w,double[],0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimizeInternal,startPoint,double[],0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimizeInternal,t,double[],0,DimensionMismatchException,$.length != w.length
BaseAbstractMultivariateVectorOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof Target
BaseAbstractMultivariateVectorOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof Weight
BaseAbstractMultivariateVectorOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof InitialGuess
BaseAbstractMultivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof InitialGuess
BaseAbstractMultivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof SimpleBounds
BaseAbstractMultivariateOptimizer.java,checkParameters,start,double[],0,NumberIsTooLargeException,$ != null
BaseAbstractMultivariateOptimizer.java,checkParameters,lowerBound,double[],0,NumberIsTooSmallException,$ != null
BaseAbstractMultivariateOptimizer.java,checkParameters,lowerBound,double[],0,DimensionMismatchException,$.length != dim
BaseAbstractMultivariateOptimizer.java,checkParameters,v,double,0,NumberIsTooSmallException,$ < lo
BaseAbstractMultivariateOptimizer.java,checkParameters,upperBound,double[],0,NumberIsTooLargeException,$ != null
BaseAbstractMultivariateOptimizer.java,checkParameters,upperBound,double[],0,DimensionMismatchException,$.length != dim
BaseAbstractMultivariateOptimizer.java,checkParameters,v,double,0,NumberIsTooLargeException,$ > hi
BaseAbstractMultivariateOptimizer.java,checkParameters,lowerBound,double[],0,DEF,$ == null
BaseAbstractMultivariateOptimizer.java,checkParameters,upperBound,double[],0,DEF,$ == null
CMAESOptimizer.java,Sigma,s,double[],0,NotPositiveException,$[i] < 0
CMAESOptimizer.java,Sigma,i,int,0,NotPositiveException,s[$] < 0
CMAESOptimizer.java,PopulationSize,size,int,0,NotStrictlyPositiveException,$ <= 0
CMAESOptimizer.java,doOptimize,diagonalOnly,int,1,DEF,$ <= 0
CMAESOptimizer.java,doOptimize,i,int,0,DEF,$ >= checkFeasableCount
CMAESOptimizer.java,doOptimize,diagonalOnly,int,1,DEF,$ <= 0
CMAESOptimizer.java,doOptimize,bestValue,double,0,DEF,$ > bestFitness
CMAESOptimizer.java,doOptimize,lastResult,PointValuePair,0,DEF,$ != null
CMAESOptimizer.java,doOptimize,stopFitness,double,0,DEF,$ != 0
CMAESOptimizer.java,doOptimize,sigma,double,0,DEF,$ * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX
CMAESOptimizer.java,doOptimize,sqrtDiagC,double[],0,DEF,sigma * Math.max(Math.abs(pcCol[i]), $[i]) > stopTolX
CMAESOptimizer.java,doOptimize,pcCol,double[],0,DEF,sigma * Math.max(Math.abs($[i]), sqrtDiagC[i]) > stopTolX
CMAESOptimizer.java,doOptimize,i,int,0,DEF,sigma * Math.max(Math.abs(pcCol[$]), sqrtDiagC[$]) > stopTolX
CMAESOptimizer.java,doOptimize,sigma,double,0,DEF,$ * sqrtDiagC[i] > stopTolUpX
CMAESOptimizer.java,doOptimize,sqrtDiagC,double[],0,DEF,sigma * $[i] > stopTolUpX
CMAESOptimizer.java,doOptimize,i,int,0,DEF,sigma * sqrtDiagC[$] > stopTolUpX
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > 2
CMAESOptimizer.java,doOptimize,worstFitness,double,0,DEF,Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,bestFitness,double,0,DEF,Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > fitnessHistory.length
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,historyWorst-$ < stopTolHistFun
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,$-historyBest < stopTolHistFun
CMAESOptimizer.java,doOptimize,diagD,RealMatrix,0,DEF,max($)/min($) > 1e7
CMAESOptimizer.java,doOptimize,lastResult,PointValuePair,0,DEF,$ != null
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > 2
CMAESOptimizer.java,doOptimize,bestFitness,double,0,DEF,Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
CMAESOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof Sigma
CMAESOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof PopulationSize
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,OutOfRangeException,$ != null
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,DimensionMismatchException,$.length != init.length
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,NotPositiveException,$[i] < 0
CMAESOptimizer.java,checkParameters,i,int,0,NotPositiveException,inputSigma[$] < 0
CMAESOptimizer.java,initializeCMA,lambda,int,0,DEF,$ <= 0
CMAESOptimizer.java,updateCovarianceDiagonalOnly,diagonalOnly,int,0,DEF,$ > 1
CMAESOptimizer.java,updateCovarianceDiagonalOnly,iterations,int,0,DEF,$ > diagonalOnly
CMAESOptimizer.java,updateCovariance,ccovmu,double,0,DEF,ccov1 + $ > 0
CMAESOptimizer.java,updateCovariance,ccov1,double,0,DEF,$ + ccovmu > 0
CMAESOptimizer.java,updateCovariance,negccov,double,0,DEF,$ > negcovMax
CMAESOptimizer.java,updateBD,negccov,double,0,DEF,ccov1 + ccovmu + $ > 0
CMAESOptimizer.java,updateBD,ccovmu,double,0,DEF,ccov1 + $ + negccov > 0
CMAESOptimizer.java,updateBD,ccov1,double,0,DEF,$ + ccovmu + negccov > 0
CMAESOptimizer.java,updateBD,negccov,double,0,DEF,(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,ccovmu,double,0,DEF,(iterations % 1. / (ccov1 + $ + negccov) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,ccov1,double,0,DEF,(iterations % 1. / ($ + ccovmu + negccov) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,dimension,int,0,DEF,(iterations % 1. / (ccov1 + ccovmu + negccov) / $ / 10.) < 1
CMAESOptimizer.java,updateBD,iterations,int,0,DEF,($ % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,diagD,RealMatrix,0,DEF,min($) <= 0
CMAESOptimizer.java,updateBD,i,int,0,DEF,diagD.getEntry($, 0) < 0
CMAESOptimizer.java,updateBD,diagD,RealMatrix,0,DEF,$.getEntry(i, 0) < 0
CMAESOptimizer.java,equals,other,null,0,RET,$ instanceof DoubleIndex
CMAESOptimizer.java,diag,m,RealMatrix,1,RET,$.getColumnDimension() == 1
CMAESOptimizer.java,eye,r,int,0,DEF,$ < m
CMAESOptimizer.java,max,max,double,0,DEF,$ < e
CMAESOptimizer.java,min,min,double,0,DEF,$ > e
SimplexOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof AbstractSimplex
SimplexOptimizer.java,doOptimize,simplex,AbstractSimplex,0,NullArgumentException,$ == null
SimplexOptimizer.java,doOptimize,iteration,int,0,RET,$ > 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(best, reflected) <= 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare(best, $) <= 0
NelderMeadSimplex.java,iterate,best,PointValuePair,1,DEF,comparator.compare($, reflected) <= 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(reflected, secondBest) < 0
NelderMeadSimplex.java,iterate,secondBest,PointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare($, secondBest) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(reflected, best) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare($, best) < 0
NelderMeadSimplex.java,iterate,best,PointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(expanded, reflected) < 0
NelderMeadSimplex.java,iterate,expanded,PointValuePair,1,DEF,comparator.compare($, reflected) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare(expanded, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,RET,$.compare(reflected, worst) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,RET,comparator.compare($, worst) < 0
NelderMeadSimplex.java,iterate,worst,PointValuePair,1,RET,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(outContracted, reflected) <= 0
NelderMeadSimplex.java,iterate,outContracted,PointValuePair,0,RET,comparator.compare($, reflected) <= 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,0,RET,comparator.compare(outContracted, $) <= 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(inContracted, worst) < 0
NelderMeadSimplex.java,iterate,worst,PointValuePair,0,RET,comparator.compare(inContracted, $) < 0
NelderMeadSimplex.java,iterate,inContracted,PointValuePair,0,RET,comparator.compare($, worst) < 0
NonLinearConjugateGradientOptimizer.java,setInitialStep,initialStep,double,1,DEF,$ <= 0
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,previous,PointValuePair,0,RET,$ != null
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,updateFormula,ConjugateGradientFormula,1,DEF,$ == ConjugateGradientFormula.FLETCHER_REEVES
NonLinearConjugateGradientOptimizer.java,doOptimize,iter,int,1,DEF,$ % n == 0
NonLinearConjugateGradientOptimizer.java,doOptimize,n,int,1,DEF,iter % $ == 0
NonLinearConjugateGradientOptimizer.java,doOptimize,beta,double,1,DEF,$ < 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yA,double,0,RET,$ * yB <= 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yB,double,0,RET,yA * $ <= 0
LevenbergMarquardtOptimizer.java,doOptimize,dk,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,currentCost,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,s,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtOptimizer.java,doOptimize,currentCost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtOptimizer.java,doOptimize,currentCost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtOptimizer.java,doOptimize,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtOptimizer.java,doOptimize,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,RET,$ >= 1.0e-4
LevenbergMarquardtOptimizer.java,doOptimize,checker,ConvergenceChecker<PointVectorValuePair>,0,RET,$ != null
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,0,RET,FastMath.abs($) <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,1,ConvergenceException,FastMath.abs($) <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,1,ConvergenceException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,ConvergenceException,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,ConvergenceException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtOptimizer.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtOptimizer.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtOptimizer.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtOptimizer.java,qrDecomposition,ak2,double,0,RET,$ <= qrRankingThreshold
AbstractLeastSquaresOptimizer.java,computeWeightedJacobian,dsValue,DerivativeStructure[],0,DimensionMismatchException,$.length != nR
AbstractLeastSquaresOptimizer.java,guessParametersErrors,rows,int,0,NumberIsTooSmallException,$ <= cols
AbstractLeastSquaresOptimizer.java,computeResiduals,objectiveValue,double[],0,DimensionMismatchException,$.length != target.length
AbstractLeastSquaresOptimizer.java,squareRoot,m,null,1,RET,$ instanceof DiagonalMatrix
GaussNewtonOptimizer.java,doOptimize,checker,ConvergenceChecker<PointVectorValuePair>,0,NullArgumentException,$ == null
GaussNewtonOptimizer.java,doOptimize,previous,PointVectorValuePair,0,RET,$ != null
BaseMultivariateMultiStartOptimizer.java,BaseMultivariateMultiStartOptimizer,optimizer,BaseMultivariateOptimizer<FUNC>,0,NullArgumentException,$ == null
BaseMultivariateMultiStartOptimizer.java,BaseMultivariateMultiStartOptimizer,generator,RandomVectorGenerator,0,NullArgumentException,$ == null
BaseMultivariateMultiStartOptimizer.java,BaseMultivariateMultiStartOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
BaseMultivariateMultiStartOptimizer.java,getOptima,optima,PointValuePair[],0,MathIllegalStateException,$ == null
BaseMultivariateMultiStartOptimizer.java,optimize,optima,PointValuePair[],0,DEF,$[0] == null
BaseMultivariateMultiStartOptimizer.java,compare,o1,PointValuePair,1,RET,$ == null
BaseMultivariateMultiStartOptimizer.java,compare,o2,PointValuePair,0,RET,$ == null
Beta.java,regularizedBeta,x,double,1,DEF,$ < 0
Beta.java,regularizedBeta,x,double,1,DEF,$ > 1
Beta.java,regularizedBeta,a,double,1,DEF,$ <= 0.0
Beta.java,regularizedBeta,b,double,1,DEF,$ <= 0.0
Beta.java,getB,n,int,1,DEF,$ % 2 == 0
Beta.java,logGammaSum,a,double,0,OutOfRangeException,$ < 1.0
Beta.java,logGammaSum,a,double,0,OutOfRangeException,$ > 2.0
Beta.java,logGammaSum,b,double,0,OutOfRangeException,$ < 1.0
Beta.java,logGammaSum,b,double,0,OutOfRangeException,$ > 2.0
Beta.java,logGammaSum,x,double,1,RET,$ <= 0.5
Beta.java,logGammaSum,x,double,1,RET,$ <= 1.5
Beta.java,logGammaMinusLogGammaSum,a,double,0,NumberIsTooSmallException,$ < 0.0
Beta.java,logGammaMinusLogGammaSum,b,double,0,NumberIsTooSmallException,$ < 10.0
Beta.java,logGammaMinusLogGammaSum,a,double,1,DEF,$ <= b
Beta.java,deltaMinusDeltaSum,a,double,0,OutOfRangeException,$ < 0
Beta.java,deltaMinusDeltaSum,a,double,0,OutOfRangeException,$ > b
Beta.java,deltaMinusDeltaSum,b,double,0,NumberIsTooSmallException,$ < 10
Beta.java,sumDeltaMinusDeltaSum,p,double,0,NumberIsTooSmallException,$ < 10.0
Beta.java,sumDeltaMinusDeltaSum,q,double,0,NumberIsTooSmallException,$ < 10.0
Beta.java,logBeta,p,double,0,RET,$ <= 0.0
Beta.java,logBeta,q,double,0,RET,$ <= 0.0
Beta.java,logBeta,a,double,1,RET,$ >= 10.0
Beta.java,logBeta,u,double,1,RET,$ <= v
Beta.java,logBeta,a,double,1,RET,$ > 2.0
Beta.java,logBeta,b,double,1,RET,$ > 1000.0
Beta.java,logBeta,b,double,1,RET,$ < 10.0
Beta.java,logBeta,a,double,1,RET,$ >= 1.0
Beta.java,logBeta,b,double,1,RET,$ > 2.0
Beta.java,logBeta,b,double,1,RET,$ < 10.0
Beta.java,logBeta,b,double,1,RET,$ >= 10.0
Gamma.java,logGamma,x,double,1,DEF,$ <= 0.0
Gamma.java,logGamma,x,double,1,RET,$ < 0.5
Gamma.java,logGamma,x,double,1,RET,$ <= 2.5
Gamma.java,logGamma,x,double,1,RET,$ <= 8.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaP,n,double,1,MaxCountExceededException,$ >= maxIterations
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ == 0.0
Gamma.java,digamma,x,double,0,RET,$ > 0
Gamma.java,digamma,x,double,0,RET,$ <= S_LIMIT
Gamma.java,digamma,x,double,0,RET,$ >= C_LIMIT
Gamma.java,trigamma,x,double,0,RET,$ > 0
Gamma.java,trigamma,x,double,0,RET,$ <= S_LIMIT
Gamma.java,trigamma,x,double,0,RET,$ >= C_LIMIT
Gamma.java,invGamma1pm1,x,double,0,NumberIsTooSmallException,$ < -0.5
Gamma.java,invGamma1pm1,x,double,0,NumberIsTooLargeException,$ > 1.5
Gamma.java,invGamma1pm1,t,double,1,DEF,$ < 0.0
Gamma.java,invGamma1pm1,x,double,1,DEF,$ > 0.5
Gamma.java,invGamma1pm1,x,double,1,DEF,$ > 0.5
Gamma.java,logGamma1p,x,double,0,NumberIsTooSmallException,$ < -0.5
Gamma.java,logGamma1p,x,double,0,NumberIsTooLargeException,$ > 1.5
Gamma.java,gamma,x,double,0,RET,$ <= 0.0
Gamma.java,gamma,absX,double,1,DEF,$ <= 20.0
Gamma.java,gamma,x,double,1,DEF,$ >= 1.0
Gamma.java,gamma,x,double,1,DEF,$ > 0.0
Erf.java,erf,x,double,0,RET,FastMath.abs($) > 40
Erf.java,erfc,x,double,0,RET,FastMath.abs($) > 40
Erf.java,erf,x1,double,0,RET,$ > x2
Erf.java,erfInv,w,double,1,DEF,$ < 6.25
Erf.java,erfInv,w,double,1,DEF,$ < 16.0
VectorFormat.java,format,i,int,0,DEF,$ > 0
VectorFormat.java,parseCoordinates,i,int,0,RET,$ > 0
VectorFormat.java,parseCoordinates,c,Number,0,RET,$ == null
Segment.java,distance,r,double,1,RET,$ < 0
Segment.java,distance,r,double,1,RET,$ > 1
Line.java,reset,d,double,1,DEF,$ == 0.0
Line.java,revertSelf,angle,double,1,DEF,$ < FastMath.PI
Line.java,intersection,d,double,0,RET,FastMath.abs($) < 1.0e-10
Line.java,LineTransform,c11,double,0,MathIllegalArgumentException,FastMath.abs($) < 1.0e-20
SubLine.java,intersection,v2D,Vector2D,0,RET,$ == null
SubLine.java,side,crossing,Vector2D,0,RET,$ == null
SubLine.java,split,crossing,Vector2D,0,RET,$ == null
PolygonsSet.java,verticesToTree,n,int,0,RET,$ == 0
PolygonsSet.java,verticesToTree,line,Line,0,DEF,$ == null
PolygonsSet.java,verticesToTree,vertex,Vertex,0,DEF,$ != start
PolygonsSet.java,verticesToTree,vertex,Vertex,0,DEF,$ != end
PolygonsSet.java,verticesToTree,vertex,Vertex,0,DEF,FastMath.abs(line.getOffset($.getLocation())) <= hyperplaneThickness
PolygonsSet.java,verticesToTree,line,Line,0,DEF,FastMath.abs($.getOffset(vertex.getLocation())) <= hyperplaneThickness
PolygonsSet.java,insertEdges,inserted,Edge,1,DEF,$.getNode() == null
PolygonsSet.java,insertEdges,inserted,Edge,0,RET,$ == null
PolygonsSet.java,insertEdges,parent,BSPTree<Euclidean2D>,1,DEF,$ == null
PolygonsSet.java,insertEdges,edge,Edge,0,DEF,$ != inserted
PolygonsSet.java,insertEdges,endSide,Side,1,DEF,$ == Side.MINUS
PolygonsSet.java,insertEdges,endSide,Side,1,DEF,$ == Side.PLUS
PolygonsSet.java,insertEdges,endSide,Side,1,DEF,$ == Side.PLUS
PolygonsSet.java,insertEdges,endSide,Side,0,DEF,$ == Side.MINUS
PolygonsSet.java,sharedLineWith,line1,Line,0,RET,$ == line2
PolygonsSet.java,computeGeometricalProperties,v,Vector2D[][],1,DEF,$.length == 0
PolygonsSet.java,computeGeometricalProperties,tree,BSPTree<Euclidean2D>,1,DEF,$.getCut() == null
PolygonsSet.java,computeGeometricalProperties,v,Vector2D[][],1,DEF,$[0][0] == null
PolygonsSet.java,computeGeometricalProperties,sum,double,1,DEF,$ < 0
PolygonsSet.java,getVertices,vertices,Vector2D[][],0,DEF,$ == null
PolygonsSet.java,getVertices,loop,List<ComparableSegment>,0,DEF,$ != null
PolygonsSet.java,getVertices,loop,List<ComparableSegment>,1,DEF,$.size() < 2
PolygonsSet.java,getVertices,loop,List<ComparableSegment>,1,DEF,$.get(0).getStart() == null
PolygonsSet.java,getVertices,j,int,0,DEF,$ == 0
PolygonsSet.java,followLoop,distance,double,0,DEF,$ < selectedDistance
PolygonsSet.java,followLoop,selectedDistance,double,0,RET,$ > 1.0e-10
PolygonsSet.java,followLoop,loop,ArrayList<ComparableSegment>,0,RET,$.size() == 2
PolygonsSet.java,followLoop,end,Vector2D,0,MathInternalError,$ == null
PolygonsSet.java,equals,other,null,1,RET,$ instanceof ComparableSegment
PolygonsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean2D>,0,DEF,$.getPlusOutside() != null
PolygonsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean2D>,0,DEF,$.getPlusInside() != null
Vector2D.java,Vector2D,v,double[],0,DimensionMismatchException,$.length != 2
Vector2D.java,normalize,s,double,0,MathArithmeticException,$ == 0
Vector2D.java,equals,other,null,0,RET,$ instanceof Vector2D
Vector2DFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
Vector2DFormat.java,parse,coordinates,double[],0,RET,$ == null
NestedLoops.java,NestedLoops,loop,Vector2D[],0,MathIllegalArgumentException,$[0] == null
Vector1DFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
Vector1DFormat.java,parse,coordinates,double[],0,RET,$ == null
Vector1D.java,normalize,s,double,0,MathArithmeticException,$ == 0
Vector1D.java,equals,other,null,0,RET,$ instanceof Vector1D
IntervalsSet.java,buildTree,lower,double,0,RET,$ < 0
IntervalsSet.java,buildTree,upper,double,0,RET,$ > 0
IntervalsSet.java,buildTree,upper,double,0,RET,$ > 0
IntervalsSet.java,computeGeometricalProperties,size,double,1,DEF,$ >= Precision.SAFE_MIN
IntervalsSet.java,recurseList,node,BSPTree<Euclidean1D>,1,DEF,$.getCut() == null
IntervalsSet.java,recurseList,loc,Vector1D,0,DEF,checkPoint(low, $) == Location.INSIDE
IntervalsSet.java,recurseList,low,BSPTree<Euclidean1D>,0,DEF,checkPoint($, loc) == Location.INSIDE
IntervalsSet.java,recurseList,loc,Vector1D,0,DEF,checkPoint(high, $) == Location.INSIDE
IntervalsSet.java,recurseList,high,BSPTree<Euclidean1D>,0,DEF,checkPoint($, loc) == Location.INSIDE
SubPlane.java,side,inter,Line,0,RET,$ == null
SubPlane.java,side,otherPlane,Plane,0,DEF,crossP.dotProduct($.getNormal()) < 0
SubPlane.java,side,crossP,Vector3D,0,DEF,$.dotProduct(otherPlane.getNormal()) < 0
SubPlane.java,split,inter,Line,0,RET,$ == null
SubPlane.java,split,otherPlane,Plane,0,DEF,crossP.dotProduct($.getNormal()) < 0
SubPlane.java,split,crossP,Vector3D,0,DEF,$.dotProduct(otherPlane.getNormal()) < 0
SphericalCoordinates.java,computeJacobian,jacobian,double[][],0,DEF,$ == null
SphericalCoordinates.java,computeHessians,rHessian,double[][],0,DEF,$ == null
Line.java,reset,norm2,double,0,MathIllegalArgumentException,$ == 0.0
Line.java,distance,n,double,0,RET,$ < Precision.SAFE_MIN
Line.java,closestPoint,n,double,0,RET,$ < Precision.EPSILON
Vector3DFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
Vector3DFormat.java,parse,coordinates,double[],0,RET,$ == null
SubLine.java,intersection,v1D,Vector3D,0,RET,$ == null
Vector3D.java,Vector3D,v,double[],0,DimensionMismatchException,$.length != 3
Vector3D.java,normalize,s,double,0,MathArithmeticException,$ == 0
Vector3D.java,orthogonal,threshold,double,0,MathArithmeticException,$ == 0
Vector3D.java,orthogonal,x,double,1,RET,FastMath.abs($) <= threshold
Vector3D.java,orthogonal,y,double,0,RET,FastMath.abs($) <= threshold
Vector3D.java,angle,normProduct,double,0,MathArithmeticException,$ == 0
Vector3D.java,angle,dot,double,0,RET,$ < -threshold
Vector3D.java,angle,dot,double,0,RET,$ > threshold
Vector3D.java,angle,dot,double,0,RET,$ >= 0
Vector3D.java,equals,other,null,0,RET,$ instanceof Vector3D
OutlineExtractor.java,getOutline,end,int,0,DEF,$ != rawLoop.length
OutlineExtractor.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusOutside() != null
OutlineExtractor.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusInside() != null
OutlineExtractor.java,addContribution,scal,double,0,DEF,FastMath.abs($) > 1.0e-3
OutlineExtractor.java,addContribution,scal,double,0,DEF,$ < 0
OutlineExtractor.java,addContribution,loop,Vector2D[],1,DEF,$[0] == null
OutlineExtractor.java,addContribution,previous,int,0,DEF,$ != 1
PolyhedronsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusOutside() != null
PolyhedronsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusInside() != null
PolyhedronsSet.java,recurseFirstIntersection,cut,SubHyperplane<Euclidean3D>,0,RET,$ == null
PolyhedronsSet.java,recurseFirstIntersection,offset,double,1,DEF,$ < 0
PolyhedronsSet.java,recurseFirstIntersection,facet,SubHyperplane<Euclidean3D>,0,RET,$ != null
PolyhedronsSet.java,recurseFirstIntersection,crossed,SubHyperplane<Euclidean3D>,0,RET,$ != null
PolyhedronsSet.java,recurseFirstIntersection,hit3D,Vector3D,0,RET,$ != null
PolyhedronsSet.java,recurseFirstIntersection,facet,SubHyperplane<Euclidean3D>,0,RET,$ != null
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,$.getPlusOutside() != null
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,((SubPlane) $.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
PolyhedronsSet.java,boundaryFacet,point2D,Vector2D,0,RET,((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint($) == Location.INSIDE
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,$.getPlusInside() != null
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,((SubPlane) $.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
PolyhedronsSet.java,boundaryFacet,point2D,Vector2D,0,RET,((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint($) == Location.INSIDE
PolyhedronsSet.java,apply,original,Hyperplane<Euclidean3D>,0,DEF,$ != cachedOriginal
PolyhedronsSet.java,apply,original,Hyperplane<Euclidean3D>,0,DEF,$ != cachedOriginal
Plane.java,setNormal,norm,double,0,MathArithmeticException,$ < 1.0e-10
Plane.java,intersection,dot,double,0,RET,FastMath.abs($) < 1.0e-10
Plane.java,intersection,direction,Vector3D,0,RET,$.getNorm() < 1.0e-10
Plane.java,intersection,determinant,double,0,RET,FastMath.abs($) < 1.0e-10
FieldRotation.java,FieldRotation,norm,T,0,MathIllegalArgumentException,$.getReal() == 0
FieldRotation.java,FieldRotation,m,T[][],0,NotARotationMatrixException,$.length != 3
FieldRotation.java,FieldRotation,m,T[][],0,NotARotationMatrixException,$[0].length != 3
FieldRotation.java,FieldRotation,m,T[][],0,NotARotationMatrixException,$[1].length != 3
FieldRotation.java,FieldRotation,m,T[][],0,NotARotationMatrixException,$[2].length != 3
FieldRotation.java,FieldRotation,det,T,0,NotARotationMatrixException,$.getReal() < 0.0
FieldRotation.java,FieldRotation,normProduct,T,0,MathArithmeticException,$.getReal() == 0
FieldRotation.java,mat2quat,s,T,1,DEF,$.getReal() > -0.19
FieldRotation.java,mat2quat,s,T,1,DEF,$.getReal() > -0.19
FieldRotation.java,mat2quat,s,T,1,DEF,$.getReal() > -0.19
FieldRotation.java,getAxis,squaredSine,T,1,RET,$.getReal() == 0
FieldRotation.java,getAxis,q0,T,0,RET,$.getReal() < 0
FieldRotation.java,getAngle,q0,T,1,RET,$.getReal() < -0.1
FieldRotation.java,getAngle,q0,T,1,RET,$.getReal() > 0.1
FieldRotation.java,getAngle,q0,T,0,RET,$.getReal() < 0
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYZ
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZY
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXZ
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZX
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXY
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZYX
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYX
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZX
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXY
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZY
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXZ
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() > 0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() > 0.9999999999
FieldRotation.java,orthogonalizeMatrix,fn1,double,0,RET,FastMath.abs($ - fn) <= threshold
FieldRotation.java,orthogonalizeMatrix,fn,double,0,RET,FastMath.abs(fn1 - $) <= threshold
FieldVector3D.java,FieldVector3D,v,T[],0,DimensionMismatchException,$.length != 3
FieldVector3D.java,normalize,s,T,0,MathArithmeticException,$.getReal() == 0
FieldVector3D.java,orthogonal,threshold,double,0,MathArithmeticException,$ == 0
FieldVector3D.java,orthogonal,x,T,1,RET,FastMath.abs($.getReal()) <= threshold
FieldVector3D.java,orthogonal,y,T,1,RET,FastMath.abs($.getReal()) <= threshold
FieldVector3D.java,angle,normProduct,T,0,MathArithmeticException,$.getReal() == 0
FieldVector3D.java,angle,dot,T,0,RET,$.getReal() < -threshold
FieldVector3D.java,angle,dot,T,0,RET,$.getReal() > threshold
FieldVector3D.java,angle,dot,T,0,RET,$.getReal() >= 0
FieldVector3D.java,angle,normProduct,T,0,MathArithmeticException,$.getReal() == 0
FieldVector3D.java,angle,dot,T,0,RET,$.getReal() < -threshold
FieldVector3D.java,angle,dot,T,0,RET,$.getReal() > threshold
FieldVector3D.java,angle,dot,T,0,RET,$.getReal() >= 0
FieldVector3D.java,equals,other,null,0,RET,$ instanceof FieldVector3D
Rotation.java,Rotation,norm,double,0,MathIllegalArgumentException,$ == 0
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$.length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[0].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[1].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[2].length != 3
Rotation.java,Rotation,det,double,0,NotARotationMatrixException,$ < 0.0
Rotation.java,Rotation,normProduct,double,0,MathArithmeticException,$ == 0
Rotation.java,mat2quat,s,double,1,DEF,$ > -0.19
Rotation.java,mat2quat,s,double,1,DEF,$ > -0.19
Rotation.java,mat2quat,s,double,1,DEF,$ > -0.19
Rotation.java,getAxis,squaredSine,double,1,RET,$ == 0
Rotation.java,getAxis,q0,double,0,RET,$ < 0
Rotation.java,getAngle,q0,double,1,RET,$ < -0.1
Rotation.java,getAngle,q0,double,1,RET,$ > 0.1
Rotation.java,getAngle,q0,double,0,RET,$ < 0
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,orthogonalizeMatrix,fn1,double,0,RET,FastMath.abs($ - fn) <= threshold
Rotation.java,orthogonalizeMatrix,fn,double,0,RET,FastMath.abs(fn1 - $) <= threshold
RegionFactory.java,buildConvex,hyperplanes,Hyperplane<S>[],0,RET,$ == null
RegionFactory.java,buildConvex,hyperplanes,Hyperplane<S>[],0,RET,$.length == 0
RegionFactory.java,recurseComplement,node,BSPTree<S>,0,RET,$.getCut() == null
RegionFactory.java,recurseComplement,attribute,BoundaryAttribute<S>,0,DEF,$ != null
BSPTree.java,insertCut,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,insertCut,chopped,SubHyperplane<S>,0,RET,$ == null
BSPTree.java,copySelf,cut,SubHyperplane<S>,0,RET,$ == null
BSPTree.java,visit,cut,SubHyperplane<S>,1,DEF,$ == null
BSPTree.java,fitToCell,tree,BSPTree<S>,1,DEF,$ == tree.parent.plus
BSPTree.java,getCell,cut,SubHyperplane<S>,0,RET,$ == null
BSPTree.java,getCell,offset,double,1,RET,FastMath.abs($) < 1.0e-10
BSPTree.java,getCell,offset,double,1,RET,$ <= 0
BSPTree.java,condense,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,condense,plus,BSPTree<S>,0,DEF,$.cut == null
BSPTree.java,condense,minus,BSPTree<S>,0,DEF,$.cut == null
BSPTree.java,condense,plus,BSPTree<S>,0,DEF,$.attribute == null
BSPTree.java,condense,minus,BSPTree<S>,0,DEF,$.attribute == null
BSPTree.java,condense,plus,BSPTree<S>,0,DEF,$.attribute != null
BSPTree.java,merge,cut,SubHyperplane<S>,1,RET,$ == null
BSPTree.java,merge,tree,BSPTree<S>,1,RET,$.cut == null
BSPTree.java,merge,parentTree,BSPTree<S>,0,DEF,$ != null
BSPTree.java,merge,merged,BSPTree<S>,0,DEF,$.cut != null
BSPTree.java,split,cut,SubHyperplane<S>,0,RET,$ == null
BSPTree.java,split,cut,SubHyperplane<S>,1,DEF,$.side(sHyperplane) == Side.PLUS
BSPTree.java,split,sHyperplane,Hyperplane<S>,1,DEF,cut.side($) == Side.PLUS
BSPTree.java,split,cut,SubHyperplane<S>,1,DEF,$.side(sHyperplane) == Side.PLUS
BSPTree.java,split,sHyperplane,Hyperplane<S>,1,DEF,cut.side($) == Side.PLUS
BSPTree.java,insertInTree,parentTree,BSPTree<S>,0,DEF,$ != null
BSPTree.java,insertInTree,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,insertInTree,tree,BSPTree<S>,1,DEF,$ == tree.parent.plus
BSPTree.java,chopOffMinus,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,chopOffPlus,cut,SubHyperplane<S>,0,DEF,$ != null
AbstractRegion.java,AbstractRegion,boundary,Collection<SubHyperplane<S>>,1,DEF,$.size() == 0
AbstractRegion.java,AbstractRegion,hyperplanes,Hyperplane<S>[],1,DEF,$ == null
AbstractRegion.java,AbstractRegion,hyperplanes,Hyperplane<S>[],1,DEF,$.length == 0
AbstractRegion.java,isEmpty,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,checkPoint,cell,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,getTree,tree,BSPTree<S>,0,DEF,$.getCut() != null
AbstractRegion.java,getTree,tree,BSPTree<S>,0,DEF,$.getAttribute() == null
AbstractRegion.java,visitInternalNode,plusChar,SubHyperplane<S>[],0,DEF,$[0] != null
AbstractRegion.java,visitInternalNode,minusChar,SubHyperplane<S>[],0,DEF,$[1] != null
AbstractRegion.java,visitInternalNode,plusChar,SubHyperplane<S>[],0,DEF,$[1] != null
AbstractRegion.java,visitInternalNode,minusChar,SubHyperplane<S>[],0,DEF,$[0] != null
AbstractRegion.java,characterize,node,BSPTree<S>,1,DEF,$.getCut() == null
AbstractRegion.java,characterize,characterization,SubHyperplane<S>[],1,DEF,$[1] == null
AbstractRegion.java,characterize,characterization,SubHyperplane<S>[],1,DEF,$[0] == null
AbstractRegion.java,getSize,barycenter,Vector<S>,0,DEF,$ == null
AbstractRegion.java,getBarycenter,barycenter,Vector<S>,0,DEF,$ == null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,recurseSides,node,BSPTree<S>,1,DEF,$.getCut().side(sub.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,sub,SubHyperplane<S>,1,DEF,node.getCut().side($.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,node,BSPTree<S>,1,DEF,$.getCut().side(sub.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,sub,SubHyperplane<S>,1,DEF,node.getCut().side($.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getPlus().getCut() != null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getMinus().getCut() != null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getPlus().getCut() != null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getMinus().getCut() != null
AbstractRegion.java,recurseIntersection,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,recurseIntersection,plus,SubHyperplane<S>,1,RET,$ == null
AbstractRegion.java,recurseIntersection,minus,SubHyperplane<S>,1,RET,$ == null
AbstractRegion.java,recurseTransform,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,recurseTransform,attribute,BoundaryAttribute<S>,0,DEF,$ != null
OrderedTuple.java,OrderedTuple,components,double[],1,DEF,$[i] < 0
OrderedTuple.java,OrderedTuple,i,int,1,DEF,components[$] < 0
OrderedTuple.java,OrderedTuple,m,long,0,DEF,$ != 0
OrderedTuple.java,OrderedTuple,lsb,int,1,DEF,$ <= msb
OrderedTuple.java,encode,encoding,long[],0,RET,$ != null
OrderedTuple.java,encode,encoding,long[],0,RET,$.length == 1
OrderedTuple.java,encode,encoding,long[],0,RET,$[0] == 0x0L
OrderedTuple.java,encode,vIndex,int,0,DEF,getBit($, k) != 0
OrderedTuple.java,encode,k,int,0,DEF,getBit(vIndex, $) != 0
OrderedTuple.java,encode,shift,int,0,DEF,$-- == 0
OrderedTuple.java,compareTo,components,double[],0,RET,$.length == ot.components.length
OrderedTuple.java,compareTo,offset,int,1,DEF,$ < ot.offset
OrderedTuple.java,compareTo,offset,int,0,DEF,$ > ot.offset
OrderedTuple.java,compareTo,encoding,long[],1,RET,$.length < ot.encoding.length
OrderedTuple.java,compareTo,encoding,long[],1,RET,$.length > ot.encoding.length
OrderedTuple.java,equals,other,null,1,RET,$ instanceof OrderedTuple
OrderedTuple.java,computeMSB,ll,long,0,DEF,($ & mask) != ll
OrderedTuple.java,computeMSB,mask,long,0,DEF,(ll & $) != ll
OrderedTuple.java,computeLSB,ll,long,0,DEF,($ & mask) == ll
OrderedTuple.java,computeLSB,mask,long,0,DEF,(ll & $) == ll
OrderedTuple.java,getBit,k,int,1,RET,$ < e
OrderedTuple.java,getBit,k,int,1,RET,$ > offset
OrderedTuple.java,getBit,k,int,1,RET,$ == offset
AVLTree.java,insert,element,T,0,DEF,$ != null
AVLTree.java,insert,top,Node,1,DEF,$ == null
AVLTree.java,delete,element,T,0,RET,$ != null
AVLTree.java,delete,node,Node,1,RET,$.element == element
AVLTree.java,delete,node,Node,0,RET,$.element.compareTo(element) > 0
AVLTree.java,delete,element,T,0,RET,node.element.compareTo($) > 0
AVLTree.java,getNotSmaller,reference,T,1,RET,node.element.compareTo($) < 0
AVLTree.java,getNotSmaller,node,Node,1,RET,$.element.compareTo(reference) < 0
AVLTree.java,getNotSmaller,node,Node,0,RET,$.right == null
AVLTree.java,getNotSmaller,node,Node,0,RET,$.left == null
AVLTree.java,getNotLarger,reference,T,1,RET,node.element.compareTo($) > 0
AVLTree.java,getNotLarger,node,Node,1,RET,$.element.compareTo(reference) > 0
AVLTree.java,getNotLarger,node,Node,0,RET,$.left == null
AVLTree.java,getNotLarger,node,Node,0,RET,$.right == null
AVLTree.java,getPrevious,left,Node,0,RET,$ != null
AVLTree.java,getPrevious,node,Node,0,RET,$ != null
AVLTree.java,getPrevious,node,Node,0,RET,$ != node.parent.left
AVLTree.java,getNext,right,Node,0,RET,$ != null
AVLTree.java,getNext,node,Node,0,RET,$ != null
AVLTree.java,getNext,node,Node,0,RET,$ != node.parent.right
AVLTree.java,insert,newElement,T,0,RET,$.compareTo(this.element) < 0
AVLTree.java,insert,left,Node,0,RET,$ == null
AVLTree.java,insert,right,Node,0,RET,$ == null
AVLTree.java,delete,parent,Node,1,DEF,$ == null
AVLTree.java,delete,left,Node,1,DEF,$ == null
AVLTree.java,delete,right,Node,1,DEF,$ == null
AVLTree.java,delete,left,Node,1,DEF,$ == null
AVLTree.java,delete,right,Node,1,DEF,$ == null
AVLTree.java,delete,child,Node,0,DEF,$ != null
AVLTree.java,delete,node,Node,0,RET,$.parent == null
AVLTree.java,rebalanceLeftGrown,left,Node,1,DEF,$.skew == Skew.LEFT_HIGH
AVLTree.java,rebalanceRightGrown,right,Node,1,DEF,$.skew == Skew.RIGHT_HIGH
AVLTree.java,rebalanceLeftShrunk,right,Node,1,RET,$.skew == Skew.RIGHT_HIGH
AVLTree.java,rebalanceLeftShrunk,right,Node,1,RET,$.skew == Skew.BALANCED
AVLTree.java,rebalanceRightShrunk,left,Node,1,RET,$.skew == Skew.LEFT_HIGH
AVLTree.java,rebalanceRightShrunk,left,Node,1,RET,$.skew == Skew.BALANCED
AVLTree.java,rotateCW,left,Node,0,DEF,$ != null
AVLTree.java,rotateCW,right,Node,0,DEF,$.right != null
AVLTree.java,rotateCCW,right,Node,0,DEF,$ != null
AVLTree.java,rotateCCW,left,Node,0,DEF,$.left != null
AbstractSubHyperplane.java,recurseTransform,node,BSPTree<T>,0,RET,$.getCut() == null
AbstractSubHyperplane.java,recurseTransform,attribute,BoundaryAttribute<T>,0,DEF,$ != null
BoundarySizeVisitor.java,visitInternalNode,attribute,BoundaryAttribute<S>,0,DEF,$.getPlusOutside() != null
BoundarySizeVisitor.java,visitInternalNode,attribute,BoundaryAttribute<S>,0,DEF,$.getPlusInside() != null
AbstractWell.java,setSeed,seed,int[],0,RET,$ == null
AbstractWell.java,setSeed,seed,int[],0,DEF,$.length < v.length
SobolSequenceGenerator.java,SobolSequenceGenerator,dimension,int,0,OutOfRangeException,$ < 1
SobolSequenceGenerator.java,SobolSequenceGenerator,dimension,int,0,OutOfRangeException,$ > MAX_DIMENSION
SobolSequenceGenerator.java,SobolSequenceGenerator,is,InputStream,0,MathInternalError,$ == null
SobolSequenceGenerator.java,SobolSequenceGenerator,dimension,int,0,NotStrictlyPositiveException,$ < 1
SobolSequenceGenerator.java,SobolSequenceGenerator,lastDimension,int,0,OutOfRangeException,$ < dimension
SobolSequenceGenerator.java,initFromStream,dim,int,0,DEF,$ >= 2
SobolSequenceGenerator.java,initFromStream,dim,int,0,DEF,$ <= dimension
SobolSequenceGenerator.java,initFromStream,dim,int,0,RET,$ > dimension
SobolSequenceGenerator.java,nextVector,count,int,0,RET,$ == 0
SobolSequenceGenerator.java,skipTo,index,int,1,DEF,$ == 0
SobolSequenceGenerator.java,skipTo,shift,long,0,DEF,$ == 0
HaltonSequenceGenerator.java,HaltonSequenceGenerator,dimension,int,0,OutOfRangeException,$ < 1
HaltonSequenceGenerator.java,HaltonSequenceGenerator,dimension,int,0,OutOfRangeException,$ > bases.length
HaltonSequenceGenerator.java,HaltonSequenceGenerator,weights,int[],0,DimensionMismatchException,$ != null
HaltonSequenceGenerator.java,HaltonSequenceGenerator,weights,int[],0,DimensionMismatchException,$.length != bases.length
ValueServer.java,resetReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,closeReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,MathIllegalStateException,$ == null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,MathIllegalStateException,$.getBinStats().size() == 0
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,$ == null
ValueServer.java,getNextReplay,str,String,0,MathIllegalStateException,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,MathIllegalStateException,(str = $.readLine()) == null
ValueServer.java,getNextReplay,str,String,0,MathIllegalStateException,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,MathIllegalStateException,(str = $.readLine()) == null
ISAACRandom.java,setSeed,seed,int[],0,RET,$ == null
ISAACRandom.java,setSeed,seedLen,int,0,DEF,$ < rslLen
ISAACRandom.java,next,count,int,0,DEF,$ < 0
BitsStreamGenerator.java,nextInt,n,int,0,RET,$ > 0
BitsStreamGenerator.java,nextInt,n,int,0,RET,($ & -$) == n
BitsStreamGenerator.java,nextLong,n,long,0,RET,$ > 0
UncorrelatedRandomVectorGenerator.java,UncorrelatedRandomVectorGenerator,mean,double[],0,DimensionMismatchException,$.length != standardDeviation.length
RandomDataGenerator.java,nextHexString,len,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataGenerator.java,nextHexString,hex,String,0,DEF,$.length() == 1
RandomDataGenerator.java,nextInt,lower,int,0,NumberIsTooLargeException,$ >= upper
RandomDataGenerator.java,nextInt,max,int,1,RET,$ <= 0
RandomDataGenerator.java,nextInt,r,int,0,RET,$ >= lower
RandomDataGenerator.java,nextInt,r,int,0,RET,$ <= upper
RandomDataGenerator.java,nextLong,lower,long,0,NumberIsTooLargeException,$ >= upper
RandomDataGenerator.java,nextLong,max,long,1,RET,$ <= 0
RandomDataGenerator.java,nextLong,r,long,0,RET,$ >= lower
RandomDataGenerator.java,nextLong,r,long,0,RET,$ <= upper
RandomDataGenerator.java,nextLong,max,long,1,RET,$ < Integer.MAX_VALUE
RandomDataGenerator.java,nextLong,n,long,0,RET,$ > 0
RandomDataGenerator.java,nextSecureHexString,len,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataGenerator.java,nextSecureHexString,hex,String,0,DEF,$.length() == 1
RandomDataGenerator.java,nextSecureInt,lower,int,0,NumberIsTooLargeException,$ >= upper
RandomDataGenerator.java,nextSecureInt,max,int,1,RET,$ <= 0
RandomDataGenerator.java,nextSecureInt,r,int,0,RET,$ >= lower
RandomDataGenerator.java,nextSecureInt,r,int,0,RET,$ <= upper
RandomDataGenerator.java,nextSecureLong,lower,long,0,NumberIsTooLargeException,$ >= upper
RandomDataGenerator.java,nextSecureLong,max,long,1,RET,$ <= 0
RandomDataGenerator.java,nextSecureLong,r,long,0,RET,$ >= lower
RandomDataGenerator.java,nextSecureLong,r,long,0,RET,$ <= upper
RandomDataGenerator.java,nextSecureLong,max,long,1,RET,$ < Integer.MAX_VALUE
RandomDataGenerator.java,nextLong,n,long,0,RET,$ > 0
RandomDataGenerator.java,nextGaussian,sigma,double,0,NotStrictlyPositiveException,$ <= 0
RandomDataGenerator.java,nextUniform,lower,double,0,NumberIsTooLargeException,$ >= upper
RandomDataGenerator.java,nextPermutation,k,int,0,NumberIsTooLargeException,$ > n
RandomDataGenerator.java,nextPermutation,k,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataGenerator.java,nextSample,k,int,0,NumberIsTooLargeException,$ > len
RandomDataGenerator.java,nextSample,k,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataGenerator.java,getRandomGenerator,rand,RandomGenerator,0,DEF,$ == null
RandomDataGenerator.java,getSecRan,secRand,SecureRandom,0,DEF,$ == null
RandomDataGenerator.java,shuffle,i,int,1,DEF,$ == 0
StableRandomGenerator.java,StableRandomGenerator,generator,RandomGenerator,0,NullArgumentException,$ == null
StableRandomGenerator.java,StableRandomGenerator,alpha,double,0,OutOfRangeException,$ > 0d
StableRandomGenerator.java,StableRandomGenerator,alpha,double,0,OutOfRangeException,$ <= 2d
StableRandomGenerator.java,StableRandomGenerator,beta,double,0,OutOfRangeException,$ >= -1d
StableRandomGenerator.java,StableRandomGenerator,beta,double,0,OutOfRangeException,$ <= 1d
StableRandomGenerator.java,StableRandomGenerator,alpha,double,1,DEF,$ < 2d
StableRandomGenerator.java,StableRandomGenerator,beta,double,1,DEF,$ != 0d
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,0,RET,$ == 2d
StableRandomGenerator.java,nextNormalizedDouble,beta,double,1,DEF,$ == 0d
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,1,DEF,$ == 1d
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,1,DEF,FastMath.abs($ - 1d) > 1e-8
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,0,DEF,$ != 1d
MersenneTwister.java,setSeed,seed,int[],0,RET,$ == null
MersenneTwister.java,setSeed,i,int,0,DEF,$ >= N
MersenneTwister.java,setSeed,j,int,0,DEF,$ >= seed.length
MersenneTwister.java,setSeed,i,int,0,DEF,$ >= N
MersenneTwister.java,next,mti,int,0,DEF,$ >= N
CorrelatedRandomVectorGenerator.java,CorrelatedRandomVectorGenerator,mean,double[],0,DimensionMismatchException,$.length != order
EmpiricalDistribution.java,load,sampleStats,SummaryStatistics,0,ZeroException,$.getN() == 0
EmpiricalDistribution.java,getNextValue,stats,SummaryStatistics,0,RET,$.getN() > 0
EmpiricalDistribution.java,getNextValue,stats,SummaryStatistics,1,RET,$.getStandardDeviation() > 0
EmpiricalDistribution.java,density,x,double,0,RET,$ < min
EmpiricalDistribution.java,density,x,double,0,RET,$ > max
EmpiricalDistribution.java,cumulativeProbability,x,double,1,RET,$ < min
EmpiricalDistribution.java,cumulativeProbability,x,double,0,RET,$ >= max
EmpiricalDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0.0
EmpiricalDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1.0
EmpiricalDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 0.0
EmpiricalDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 1.0
EmpiricalDistribution.java,inverseCumulativeProbability,pCrit,double,0,RET,$ <= 0
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
AbstractRandomGenerator.java,nextBytes,i,int,0,DEF,$ > 0
AbstractRandomGenerator.java,nextBytes,bytesOut,int,0,RET,$ == bytes.length
AbstractRandomGenerator.java,nextInt,n,int,0,NotStrictlyPositiveException,$ <= 0
AbstractRandomGenerator.java,nextGaussian,s,double,0,DEF,$ != 0
Sigmoid.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Sigmoid.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 2
Sigmoid.java,value,k,int,1,DEF,$ > 1
Sinc.java,value,scaledX,double,1,RET,FastMath.abs($) <= SHORTCUT
Sinc.java,value,scaledX,double,1,DEF,FastMath.abs($) <= SHORTCUT
Sinc.java,value,i,int,1,DEF,($ & 0x1) == 0
Sinc.java,value,n,int,1,DEF,($ & 0x1) == 0
Gaussian.java,Gaussian,sigma,double,0,NotStrictlyPositiveException,$ <= 0
Gaussian.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Gaussian.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 3
Gaussian.java,validateParameters,param,double[],0,NotStrictlyPositiveException,$[2] <= 0
Gaussian.java,value,coeff,double,1,DEF,$ <= Precision.SAFE_MIN
Gaussian.java,value,k,int,1,DEF,$ > 2
Gaussian.java,value,k,int,0,DEF,$ == 2
Gaussian.java,value,n,int,0,DEF,($ & 0x1) == 1
HarmonicOscillator.java,validateParameters,param,double[],0,NullArgumentException,$ == null
HarmonicOscillator.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 3
HarmonicOscillator.java,value,f,double[],0,DEF,$.length > 1
Logit.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Logit.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 2
Logit.java,value,x,double,0,OutOfRangeException,$ < lo
Logit.java,value,x,double,0,OutOfRangeException,$ > hi
Logit.java,value,x,double,0,OutOfRangeException,$ < lo
Logit.java,value,x,double,0,OutOfRangeException,$ > hi
Logit.java,value,f,double[],0,DEF,$.length > 1
StepFunction.java,StepFunction,x,double[],0,NullArgumentException,$ == null
StepFunction.java,StepFunction,y,double[],0,NullArgumentException,$ == null
StepFunction.java,StepFunction,x,double[],0,NoDataException,$.length == 0
StepFunction.java,StepFunction,y,double[],0,NoDataException,$.length == 0
StepFunction.java,StepFunction,y,double[],0,DimensionMismatchException,$.length != x.length
StepFunction.java,value,index,int,1,DEF,$ < -1
StepFunction.java,value,index,int,1,DEF,$ >= 0
Logistic.java,Logistic,n,double,0,NotStrictlyPositiveException,$ <= 0
Logistic.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Logistic.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 6
Logistic.java,validateParameters,param,double[],0,NotStrictlyPositiveException,$[5] <= 0
BaseSecantSolver.java,doSolve,f0,double,0,RET,$ == 0.0
BaseSecantSolver.java,doSolve,f1,double,0,RET,$ == 0.0
BaseSecantSolver.java,doSolve,fx,double,0,RET,$ == 0.0
BaseSecantSolver.java,doSolve,fx,double,1,DEF,f1 * $ < 0
BaseSecantSolver.java,doSolve,f1,double,1,DEF,$ * fx < 0
BaseSecantSolver.java,doSolve,x,double,0,ConvergenceException,$ == x1
BaseSecantSolver.java,doSolve,f1,double,0,MathInternalError:RET,FastMath.abs($) <= ftol
BaseSecantSolver.java,doSolve,f1,double,0,RET,$ <= 0
BaseSecantSolver.java,doSolve,f1,double,0,RET,$ >= 0
UnivariateSolverUtils.java,solve,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,solve,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,forceSide,allowedSolution,AllowedSolution,0,RET,$ == AllowedSolution.ANY_SIDE
UnivariateSolverUtils.java,forceSide,fLo,double,0,RET,$ >= 0
UnivariateSolverUtils.java,forceSide,fHi,double,0,RET,$ <= 0
UnivariateSolverUtils.java,forceSide,fLo,double,0,RET,$ <= 0
UnivariateSolverUtils.java,forceSide,fHi,double,0,RET,$ >= 0
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ < fHi
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ >= 0
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ > fHi
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ <= 0
UnivariateSolverUtils.java,bracket,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,bracket,maximumIterations,int,0,NotStrictlyPositiveException,$ <= 0
UnivariateSolverUtils.java,bracket,fa,double,0,NoBracketingException,$ * fb > 0.0
UnivariateSolverUtils.java,bracket,fb,double,0,NoBracketingException,fa * $ > 0.0
UnivariateSolverUtils.java,isBracketing,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,verifyInterval,lower,double,0,NumberIsTooLargeException,$ >= upper
UnivariateSolverUtils.java,verifyBracketing,function,UnivariateFunction,0,NullArgumentException,$ == null
BisectionSolver.java,doSolve,fm,double,1,DEF,$ * fmin > 0
BisectionSolver.java,doSolve,fmin,double,1,DEF,fm * $ > 0
BisectionSolver.java,doSolve,min,double,0,RET,FastMath.abs(max - $) <= absoluteAccuracy
BisectionSolver.java,doSolve,max,double,0,RET,FastMath.abs($ - min) <= absoluteAccuracy
SecantSolver.java,doSolve,f0,double,0,RET,$ == 0.0
SecantSolver.java,doSolve,f1,double,0,RET,$ == 0.0
SecantSolver.java,doSolve,fx,double,0,RET,$ == 0.0
SecantSolver.java,doSolve,f1,double,0,RET,FastMath.abs($) <= ftol
LaguerreSolver.java,doSolve,yInitial,double,0,RET,FastMath.abs($) <= functionValueAccuracy
LaguerreSolver.java,doSolve,yMin,double,0,RET,FastMath.abs($) <= functionValueAccuracy
LaguerreSolver.java,doSolve,yMin,double,0,RET,yInitial * $ < 0
LaguerreSolver.java,doSolve,yInitial,double,0,RET,$ * yMin < 0
LaguerreSolver.java,doSolve,yMax,double,0,RET,FastMath.abs($) <= functionValueAccuracy
LaguerreSolver.java,doSolve,yInitial,double,0,RET,$ * yMax < 0
LaguerreSolver.java,doSolve,yMax,double,0,RET,yInitial * $ < 0
LaguerreSolver.java,solveAll,coefficients,Complex[],0,NullArgumentException,$ == null
LaguerreSolver.java,solveAll,n,int,0,NoDataException,$ == 0
LaguerreSolver.java,solve,coefficients,Complex[],0,NullArgumentException,$ == null
LaguerreSolver.java,solve,n,int,0,NoDataException,$ == 0
LaguerreSolver.java,solve,oldz,Complex,0,RET,(z.subtract($)).abs() <= tolerance
LaguerreSolver.java,solve,z,Complex,0,RET,($.subtract(oldz)).abs() <= tolerance
LaguerreSolver.java,solve,pv,Complex,0,RET,$.abs() <= functionValueAccuracy
NewtonSolver.java,doSolve,x0,double,0,RET,FastMath.abs(x1 - $) <= absoluteAccuracy
NewtonSolver.java,doSolve,x1,double,0,RET,FastMath.abs($ - x0) <= absoluteAccuracy
BracketingNthOrderBrentSolver.java,BracketingNthOrderBrentSolver,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolver.java,BracketingNthOrderBrentSolver,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolver.java,BracketingNthOrderBrentSolver,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolver.java,doSolve,y,double[],1,DEF,$[0] * $[1] < 0
BracketingNthOrderBrentSolver.java,doSolve,y,double[],1,DEF,$[1] * $[2] < 0
BracketingNthOrderBrentSolver.java,doSolve,xA,double,0,MathInternalError:RET,(xB - $) <= xTol
BracketingNthOrderBrentSolver.java,doSolve,xB,double,0,MathInternalError:RET,($ - xA) <= xTol
BracketingNthOrderBrentSolver.java,doSolve,agingA,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolver.java,doSolve,agingB,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolver.java,doSolve,nextX,double,0,DEF,$ > xA
BracketingNthOrderBrentSolver.java,doSolve,nextX,double,0,DEF,$ < xB
BracketingNthOrderBrentSolver.java,doSolve,nbPoints,int,1,DEF,$ > 2
BracketingNthOrderBrentSolver.java,doSolve,start,int,1,DEF,end - $ != nbPoints
BracketingNthOrderBrentSolver.java,doSolve,end,int,1,DEF,$ - start != nbPoints
BracketingNthOrderBrentSolver.java,doSolve,nbPoints,int,0,DEF,$ == x.length
BracketingNthOrderBrentSolver.java,doSolve,yA,double,1,DEF,nextY * $ <= 0
BracketingNthOrderBrentSolver.java,doSolve,nextY,double,1,DEF,$ * yA <= 0
MullerSolver2.java,doSolve,y0,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver2.java,doSolve,y1,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver2.java,doSolve,y0,double,0,NoBracketingException,$ * y1 > 0
MullerSolver2.java,doSolve,y1,double,0,NoBracketingException,y0 * $ > 0
MullerSolver2.java,doSolve,delta,double,1,DEF,$ >= 0.0
MullerSolver2.java,doSolve,denominator,double,1,DEF,$ != 0
MullerSolver2.java,doSolve,oldx,double,0,RET,FastMath.abs(x - $) <= tolerance
MullerSolver2.java,doSolve,x,double,0,RET,FastMath.abs($ - oldx) <= tolerance
MullerSolver2.java,doSolve,y,double,0,RET,FastMath.abs($) <= functionValueAccuracy
NewtonRaphsonSolver.java,doSolve,x0,double,0,RET,FastMath.abs(x1 - $) <= absoluteAccuracy
NewtonRaphsonSolver.java,doSolve,x1,double,0,RET,FastMath.abs($ - x0) <= absoluteAccuracy
MullerSolver.java,doSolve,fMin,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver.java,doSolve,fMax,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver.java,doSolve,fInitial,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver.java,solve,oldx,double,0,RET,FastMath.abs(x - $) <= tolerance
MullerSolver.java,solve,x,double,0,RET,FastMath.abs($ - oldx) <= tolerance
MullerSolver.java,solve,y,double,0,RET,FastMath.abs($) <= functionValueAccuracy
MullerSolver.java,solve,ym,double,1,DEF,FastMath.signum(y0) + FastMath.signum($) == 0.0
MullerSolver.java,solve,y0,double,1,DEF,FastMath.signum($) + FastMath.signum(ym) == 0.0
BrentSolver.java,doSolve,yInitial,double,0,RET,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,doSolve,yMin,double,0,RET,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,doSolve,yMin,double,0,RET,yInitial * $ < 0
BrentSolver.java,doSolve,yInitial,double,0,RET,$ * yMin < 0
BrentSolver.java,doSolve,yMax,double,0,RET,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,doSolve,yInitial,double,0,RET,$ * yMax < 0
BrentSolver.java,doSolve,yMax,double,0,RET,yInitial * $ < 0
BrentSolver.java,brent,m,double,0,RET,FastMath.abs($) <= tol
BrentSolver.java,brent,e,double,1,DEF,FastMath.abs($) < tol
BrentSolver.java,brent,a,double,1,DEF,$ == c
BrentSolver.java,brent,p,double,1,DEF,$ > 0
BrentSolver.java,brent,d,double,1,DEF,FastMath.abs($) > tol
BrentSolver.java,brent,m,double,1,DEF,$ > 0
BrentSolver.java,brent,fb,double,0,DEF,$ > 0
BrentSolver.java,brent,fc,double,0,DEF,$ > 0
BrentSolver.java,brent,fb,double,0,DEF,$ <= 0
BrentSolver.java,brent,fc,double,0,DEF,$ <= 0
RiddersSolver.java,doSolve,y1,double,0,RET,$ == 0
RiddersSolver.java,doSolve,y2,double,0,RET,$ == 0
RiddersSolver.java,doSolve,y3,double,0,RET,FastMath.abs($) <= functionValueAccuracy
RiddersSolver.java,doSolve,oldx,double,0,RET,FastMath.abs(x - $) <= tolerance
RiddersSolver.java,doSolve,x,double,0,RET,FastMath.abs($ - oldx) <= tolerance
RiddersSolver.java,doSolve,y,double,0,RET,FastMath.abs($) <= functionValueAccuracy
RiddersSolver.java,doSolve,correction,double,1,DEF,$ > 0.0
RiddersSolver.java,doSolve,y1,double,1,DEF,FastMath.signum($) + FastMath.signum(y) == 0.0
RiddersSolver.java,doSolve,y,double,1,DEF,FastMath.signum(y1) + FastMath.signum($) == 0.0
RiddersSolver.java,doSolve,y2,double,1,DEF,FastMath.signum($) + FastMath.signum(y) == 0.0
RiddersSolver.java,doSolve,y,double,1,DEF,FastMath.signum(y2) + FastMath.signum($) == 0.0
FunctionUtils.java,value,i,int,0,DEF,$ != j
FunctionUtils.java,sample,n,int,0,NotStrictlyPositiveException,$ <= 0
FunctionUtils.java,sample,min,double,0,NumberIsTooLargeException,$ >= max
FunctionUtils.java,value,i,int,1,DEF,$ == k
FunctionUtils.java,value,order,int,0,NumberIsTooLargeException,$ > 1
FunctionUtils.java,value,t,DerivativeStructure[],0,DimensionMismatchException,$[i].getFreeParameters() != parameters
FunctionUtils.java,value,i,int,0,DimensionMismatchException,t[$].getFreeParameters() != parameters
FunctionUtils.java,value,t,DerivativeStructure[],0,DimensionMismatchException,$[i].getOrder() != order
FunctionUtils.java,value,i,int,0,DimensionMismatchException,t[$].getOrder() != order
FunctionUtils.java,value,order,int,0,NumberIsTooLargeException,$ > 1
FunctionUtils.java,value,t,DerivativeStructure[],0,DimensionMismatchException,$[i].getFreeParameters() != parameters
FunctionUtils.java,value,i,int,0,DimensionMismatchException,t[$].getFreeParameters() != parameters
FunctionUtils.java,value,t,DerivativeStructure[],0,DimensionMismatchException,$[i].getOrder() != order
FunctionUtils.java,value,i,int,0,DimensionMismatchException,t[$].getOrder() != order
PolynomialFunctionLagrangeForm.java,evaluateInternal,dist,double,0,DEF,$ < min_dist
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != j
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,DimensionMismatchException,$.length != y.length
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,NumberIsTooSmallException,$.length < 2
PolynomialFunctionNewtonForm.java,verifyInputArray,a,double[],0,NoDataException,$.length == 0
PolynomialFunctionNewtonForm.java,verifyInputArray,c,double[],0,NoDataException,$.length == 0
PolynomialsUtils.java,equals,key,Object,0,RET,$ == null
PolynomialsUtils.java,equals,key,null,0,RET,$ instanceof JacobiKey
PolynomialsUtils.java,buildPolynomial,degree,int,0,DEF,$ > maxDegree
PolynomialFunction.java,PolynomialFunction,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,evaluate,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,value,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,subtract,coefficients,double[],1,DEF,$.length < p.coefficients.length
PolynomialFunction.java,differentiate,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,differentiate,n,int,0,RET,$ == 1
PolynomialFunction.java,toString,coefficients,double[],1,RET,$[0] == 0.0
PolynomialFunction.java,toString,coefficients,double[],0,RET,$.length == 1
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] != 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] != 0
PolynomialFunction.java,toString,s,StringBuilder,1,DEF,$.length() > 0
PolynomialFunction.java,toString,coefficients,double[],1,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,1,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,absAi,double,0,DEF,($ - 1) != 0
PolynomialFunction.java,toString,i,int,0,DEF,$ > 1
PolynomialFunction.java,equals,obj,null,0,RET,$ instanceof PolynomialFunction
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,NullArgumentException,$ == null
PolynomialSplineFunction.java,PolynomialSplineFunction,polynomials,PolynomialFunction[],0,NullArgumentException,$ == null
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,NumberIsTooSmallException,$.length < 2
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,DimensionMismatchException,$.length - 1 != polynomials.length
PolynomialSplineFunction.java,value,i,int,0,DEF,$ < 0
PolynomialSplineFunction.java,value,i,int,0,DEF,$ >= polynomials.length
PolynomialSplineFunction.java,value,i,int,0,DEF,$ < 0
PolynomialSplineFunction.java,value,i,int,0,DEF,$ >= polynomials.length
UnivariatePeriodicInterpolator.java,interpolate,xval,double[],0,NumberIsTooSmallException,$.length < extend
LoessInterpolator.java,LoessInterpolator,bandwidth,double,0,OutOfRangeException,$ < 0
LoessInterpolator.java,LoessInterpolator,bandwidth,double,0,OutOfRangeException,$ > 1
LoessInterpolator.java,LoessInterpolator,robustnessIters,int,0,NotPositiveException,$ < 0
LoessInterpolator.java,smooth,xval,double[],0,DimensionMismatchException,$.length != yval.length
LoessInterpolator.java,smooth,n,int,0,NoDataException,$ == 0
LoessInterpolator.java,smooth,n,int,0,RET,$ == 1
LoessInterpolator.java,smooth,n,int,0,RET,$ == 2
LoessInterpolator.java,smooth,bandwidthInPoints,int,0,NumberIsTooSmallException,$ < 2
LoessInterpolator.java,smooth,i,int,0,DEF,$ > 0
LoessInterpolator.java,smooth,meanXSquared,double,1,DEF,FastMath.sqrt(FastMath.abs($ - meanX * meanX)) < accuracy
LoessInterpolator.java,smooth,meanX,double,1,DEF,FastMath.sqrt(FastMath.abs(meanXSquared - $ * $)) < accuracy
LoessInterpolator.java,smooth,iter,int,0,DEF,$ == robustnessIters
LoessInterpolator.java,smooth,medianResidual,double,0,DEF,FastMath.abs($) < accuracy
LoessInterpolator.java,smooth,arg,double,1,DEF,$ >= 1
LoessInterpolator.java,smooth,xval,double[],0,DimensionMismatchException,$.length != yval.length
LoessInterpolator.java,updateBandwidthInterval,nextRight,int,0,DEF,$ < xval.length
LoessInterpolator.java,tricube,absX,double,0,RET,$ >= 1.0
HermiteInterpolator.java,addSamplePoint,i,int,0,DEF,$ > 1
TricubicSplineInterpolator.java,interpolate,xval,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,yval,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,zval,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,fval,double[][][],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,xval,double[],0,DimensionMismatchException,$.length != fval.length
TricubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$].length != yLen
TricubicSplineInterpolator.java,interpolate,fval,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$][j].length != zLen
TricubicSplineInterpolator.java,interpolate,j,int,0,DimensionMismatchException,fval[i][$].length != zLen
TricubicSplineInterpolator.java,interpolate,fval,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
FieldHermiteInterpolator.java,addSamplePoint,i,int,0,DEF,$ > 1
FieldHermiteInterpolator.java,derivatives,j,int,0,DEF,$ > 0
LinearInterpolator.java,interpolate,x,double[],0,DimensionMismatchException,$.length != y.length
LinearInterpolator.java,interpolate,x,double[],0,NumberIsTooSmallException,$.length < 2
BicubicSplineInterpolator.java,interpolate,xval,double[],0,NoDataException,$.length == 0
BicubicSplineInterpolator.java,interpolate,yval,double[],0,NoDataException,$.length == 0
BicubicSplineInterpolator.java,interpolate,fval,double[][],0,NoDataException,$.length == 0
BicubicSplineInterpolator.java,interpolate,xval,double[],0,DimensionMismatchException,$.length != fval.length
BicubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$].length != yLen
BicubicSplineInterpolator.java,interpolate,fval,double[][],0,DimensionMismatchException,$[i].length != yLen
SplineInterpolator.java,interpolate,x,double[],0,DimensionMismatchException,$.length != y.length
SplineInterpolator.java,interpolate,x,double[],0,NumberIsTooSmallException,$.length < 3
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,NoDataException,$ == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,yLen,int,0,NoDataException,$ == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,f,double[][],0,NoDataException,$.length == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,f,double[][],0,NoDataException,$[0].length == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != f.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdX.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdY.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdXdY.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,f,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,f[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,dFdX,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdX[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,dFdY,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdY[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdY[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,d2FdXdY,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,partialDerivative,partialDerivatives,BivariateFunction[][][],0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,searchIndex,r,int,0,OutOfRangeException,$ == -1
BicubicSplineInterpolatingFunction.java,searchIndex,r,int,0,RET,$ < 0
BicubicSplineInterpolatingFunction.java,searchIndex,r,int,0,RET,$ == last
BicubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ < 0
BicubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ > 1
BicubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ < 0
BicubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ > 1
BicubicSplineInterpolatingFunction.java,partialDerivativeX,partialDerivativeX,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeY,partialDerivativeY,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeXX,partialDerivativeXX,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeYY,partialDerivativeYY,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeXY,partialDerivativeXY,BivariateFunction,0,DEF,$ == null
MicrosphereInterpolator.java,MicrosphereInterpolator,exponent,int,0,NotPositiveException,$ < 0
MicrosphereInterpolator.java,MicrosphereInterpolator,elements,int,0,NotStrictlyPositiveException,$ <= 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,NoDataException,$ == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,yLen,int,0,NoDataException,$ == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,z,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,NoDataException,$.length == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,NoDataException,$[0].length == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != f.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdX.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdY.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdXdY.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdXdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdYdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d3FdXdYdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,f[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdX,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdX[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdY,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdY[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdY[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdY,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdYdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdYdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d3FdXdYdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d3FdXdYdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,f[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,f[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdX,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdX[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,dFdX[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdY,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdY[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,dFdY[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,dFdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdY[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d2FdXdY[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdY,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d2FdXdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdYdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdYdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d2FdYdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d3FdXdYdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d3FdXdYdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d3FdXdYdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,value,i,int,0,OutOfRangeException,$ == -1
TricubicSplineInterpolatingFunction.java,value,j,int,0,OutOfRangeException,$ == -1
TricubicSplineInterpolatingFunction.java,value,k,int,0,OutOfRangeException,$ == -1
TricubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ < 0
TricubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ > 1
TricubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ < 0
TricubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ > 1
TricubicSplineInterpolatingFunction.java,value,z,double,0,OutOfRangeException,$ < 0
TricubicSplineInterpolatingFunction.java,value,z,double,0,OutOfRangeException,$ > 1
SmoothingPolynomialBicubicSplineInterpolator.java,SmoothingPolynomialBicubicSplineInterpolator,xDegree,int,0,NotPositiveException,$ < 0
SmoothingPolynomialBicubicSplineInterpolator.java,SmoothingPolynomialBicubicSplineInterpolator,yDegree,int,0,NotPositiveException,$ < 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,xval,double[],0,NoDataException,$.length == 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,yval,double[],0,NoDataException,$.length == 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,fval,double[][],0,NoDataException,$.length == 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,xval,double[],0,DimensionMismatchException,$.length != fval.length
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$].length != yLen
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,fval,double[][],0,DimensionMismatchException,$[i].length != yLen
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,NullArgumentException,$ == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,yval,double[],0,NullArgumentException,$ == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,NoDataException,$.length == 0
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,DimensionMismatchException,$.length != yval.length
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,NullArgumentException,$[0] == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xvalI,double[],0,NullArgumentException,$ == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xvalI,double[],0,DimensionMismatchException,$.length != dimension
MicrosphereInterpolatingFunction.java,value,sd,Entry<RealVector,Double>,0,DEF,$ != null
LegendreGaussIntegrator.java,doIntegrate,delta,double,0,RET,$ <= limit
BaseAbstractUnivariateIntegrator.java,BaseAbstractUnivariateIntegrator,minimalIterationCount,int,0,NotStrictlyPositiveException,$ <= 0
BaseAbstractUnivariateIntegrator.java,BaseAbstractUnivariateIntegrator,maximalIterationCount,int,0,NumberIsTooSmallException,$ <= minimalIterationCount
TrapezoidIntegrator.java,TrapezoidIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > TRAPEZOID_MAX_ITERATIONS_COUNT
TrapezoidIntegrator.java,TrapezoidIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > TRAPEZOID_MAX_ITERATIONS_COUNT
TrapezoidIntegrator.java,stage,n,int,1,RET,$ == 0
TrapezoidIntegrator.java,doIntegrate,delta,double,0,RET,$ <= rLimit
MidPointIntegrator.java,MidPointIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > MIDPOINT_MAX_ITERATIONS_COUNT
MidPointIntegrator.java,MidPointIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > MIDPOINT_MAX_ITERATIONS_COUNT
MidPointIntegrator.java,doIntegrate,delta,double,0,RET,$ <= rLimit
LegendreHighPrecisionRuleFactory.java,computeRule,numberOfPoints,int,0,RET,$ == 1
LegendreHighPrecisionRuleFactory.java,computeRule,pa,BigDecimal,1,DEF,$.signum() * pc.signum() <= 0
LegendreHighPrecisionRuleFactory.java,computeRule,pc,BigDecimal,1,DEF,pa.signum() * $.signum() <= 0
LegendreHighPrecisionRuleFactory.java,computeRule,numberOfPoints,int,0,DEF,$ % 2 != 0
SymmetricGaussIntegrator.java,integrate,ruleLength,int,0,RET,$ == 1
SymmetricGaussIntegrator.java,integrate,ruleLength,int,0,DEF,$ % 2 == 1
GaussIntegrator.java,GaussIntegrator,points,double[],0,DimensionMismatchException,$.length != weights.length
HermiteRuleFactory.java,computeRule,numberOfPoints,int,0,RET,$ == 1
HermiteRuleFactory.java,computeRule,ha,double,1,DEF,$ * hc < 0
HermiteRuleFactory.java,computeRule,hc,double,1,DEF,ha * $ < 0
HermiteRuleFactory.java,computeRule,numberOfPoints,int,0,DEF,$ % 2 != 0
BaseRuleFactory.java,getRule,numberOfPoints,int,0,NotStrictlyPositiveException,$ <= 0
BaseRuleFactory.java,getRule,cached,Pair<double[],double[]>,0,DEF,$ == null
BaseRuleFactory.java,getRuleInternal,rule,Pair<T[],T[]>,0,RET,$ == null
LegendreRuleFactory.java,computeRule,numberOfPoints,int,0,RET,$ == 1
LegendreRuleFactory.java,computeRule,pa,double,1,DEF,$ * pc <= 0
LegendreRuleFactory.java,computeRule,pc,double,1,DEF,pa * $ <= 0
LegendreRuleFactory.java,computeRule,numberOfPoints,int,0,DEF,$ % 2 != 0
SimpsonIntegrator.java,SimpsonIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > SIMPSON_MAX_ITERATIONS_COUNT
SimpsonIntegrator.java,SimpsonIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > SIMPSON_MAX_ITERATIONS_COUNT
SimpsonIntegrator.java,doIntegrate,delta,double,0,RET,$ <= rLimit
RombergIntegrator.java,RombergIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > ROMBERG_MAX_ITERATIONS_COUNT
RombergIntegrator.java,RombergIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > ROMBERG_MAX_ITERATIONS_COUNT
RombergIntegrator.java,doIntegrate,delta,double,0,RET,$ <= rLimit
IterativeLegendreGaussIntegrator.java,IterativeLegendreGaussIntegrator,n,int,0,NotStrictlyPositiveException,$ <= 0
IterativeLegendreGaussIntegrator.java,doIntegrate,delta,double,0,RET,$ <= limit
DerivativeStructure.java,DerivativeStructure,index,int,0,NumberIsTooLargeException,$ >= parameters
DerivativeStructure.java,DerivativeStructure,order,int,0,DEF,$ > 0
DerivativeStructure.java,DerivativeStructure,derivatives,double[],0,DimensionMismatchException,$.length != data.length
DerivativeStructure.java,abs,data,double[],1,RET,Double.doubleToLongBits($[0]) < 0
DerivativeStructure.java,copySign,m,long,0,RET,$ >= 0
DerivativeStructure.java,copySign,s,long,0,RET,$ >= 0
DerivativeStructure.java,copySign,m,long,0,RET,$ < 0
DerivativeStructure.java,copySign,s,long,0,RET,$ < 0
DerivativeStructure.java,copySign,m,long,0,RET,$ >= 0
DerivativeStructure.java,copySign,s,long,0,RET,$ >= 0
DerivativeStructure.java,copySign,m,long,0,RET,$ < 0
DerivativeStructure.java,copySign,s,long,0,RET,$ < 0
DerivativeStructure.java,equals,other,null,0,RET,$ instanceof DerivativeStructure
DSCompiler.java,getCompiler,cache,DSCompiler[][],0,RET,$ != null
DSCompiler.java,getCompiler,cache,DSCompiler[][],0,RET,$.length > parameters
DSCompiler.java,getCompiler,cache,DSCompiler[][],0,RET,$[parameters].length > order
DSCompiler.java,getCompiler,parameters,int,0,RET,cache[$].length > order
DSCompiler.java,getCompiler,cache,DSCompiler[][],0,RET,$[parameters][order] != null
DSCompiler.java,getCompiler,parameters,int,0,RET,cache[$][order] != null
DSCompiler.java,getCompiler,order,int,0,RET,cache[parameters][$] != null
DSCompiler.java,getCompiler,cache,DSCompiler[][],0,DEF,$ != null
DSCompiler.java,getCompiler,p,int,0,DEF,newCache[$][o] == null
DSCompiler.java,getCompiler,newCache,DSCompiler[][],0,DEF,$[p][o] == null
DSCompiler.java,getCompiler,o,int,0,DEF,newCache[p][$] == null
DSCompiler.java,compileSizes,parameters,int,1,DEF,$ == 0
DSCompiler.java,compileDerivativesIndirection,parameters,int,0,RET,$ == 0
DSCompiler.java,compileDerivativesIndirection,order,int,0,RET,$ == 0
DSCompiler.java,compileLowerIndirection,parameters,int,0,RET,$ == 0
DSCompiler.java,compileLowerIndirection,order,int,0,RET,$ <= 1
DSCompiler.java,compileMultiplicationIndirection,parameters,int,0,RET,$ == 0
DSCompiler.java,compileMultiplicationIndirection,order,int,0,RET,$ == 0
DSCompiler.java,compileMultiplicationIndirection,termJ,int[],0,DEF,$[0] > 0
DSCompiler.java,compileCompositionIndirection,parameters,int,0,RET,$ == 0
DSCompiler.java,compileCompositionIndirection,order,int,0,RET,$ == 0
DSCompiler.java,compileCompositionIndirection,j,int,0,DEF,$ == l
DSCompiler.java,compileCompositionIndirection,termJ,int[],0,DEF,$[0] > 0
DSCompiler.java,getPartialDerivativeIndex,ordersSum,int,0,NumberIsTooLargeException,$ > order
DSCompiler.java,pow,n,int,0,RET,$ == 0
DSCompiler.java,pow,n,int,1,DEF,$ > 0
DSCompiler.java,rootN,n,int,1,DEF,$ == 2
DSCompiler.java,rootN,n,int,1,DEF,$ == 3
DSCompiler.java,log,order,int,0,DEF,$ > 0
DSCompiler.java,log1p,order,int,0,DEF,$ > 0
DSCompiler.java,log10,order,int,0,DEF,$ > 0
DSCompiler.java,cos,order,int,0,DEF,$ > 0
DSCompiler.java,sin,order,int,0,DEF,$ > 0
DSCompiler.java,tan,order,int,0,DEF,$ > 0
DSCompiler.java,tan,k,int,1,DEF,$ > 2
DSCompiler.java,tan,k,int,0,DEF,$ == 2
DSCompiler.java,tan,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,acos,order,int,0,DEF,$ > 0
DSCompiler.java,acos,k,int,1,DEF,$ > 2
DSCompiler.java,acos,k,int,0,DEF,$ == 2
DSCompiler.java,acos,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,asin,order,int,0,DEF,$ > 0
DSCompiler.java,asin,k,int,1,DEF,$ > 2
DSCompiler.java,asin,k,int,0,DEF,$ == 2
DSCompiler.java,asin,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,atan,order,int,0,DEF,$ > 0
DSCompiler.java,atan,k,int,1,DEF,$ > 2
DSCompiler.java,atan,k,int,0,DEF,$ == 2
DSCompiler.java,atan,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,atan2,xOffset,int,1,DEF,x[$] >= 0
DSCompiler.java,atan2,x,double[],1,DEF,$[xOffset] >= 0
DSCompiler.java,cosh,order,int,0,DEF,$ > 0
DSCompiler.java,sinh,order,int,0,DEF,$ > 0
DSCompiler.java,tanh,order,int,0,DEF,$ > 0
DSCompiler.java,tanh,k,int,1,DEF,$ > 2
DSCompiler.java,tanh,k,int,0,DEF,$ == 2
DSCompiler.java,tanh,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,acosh,order,int,0,DEF,$ > 0
DSCompiler.java,acosh,k,int,1,DEF,$ > 2
DSCompiler.java,acosh,k,int,0,DEF,$ == 2
DSCompiler.java,acosh,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,asinh,order,int,0,DEF,$ > 0
DSCompiler.java,asinh,k,int,1,DEF,$ > 2
DSCompiler.java,asinh,k,int,0,DEF,$ == 2
DSCompiler.java,asinh,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,atanh,order,int,0,DEF,$ > 0
DSCompiler.java,atanh,k,int,1,DEF,$ > 2
DSCompiler.java,atanh,k,int,0,DEF,$ == 2
DSCompiler.java,atanh,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,taylor,orders,int[],0,MathInternalError,$[k] > 0
DSCompiler.java,taylor,k,int,0,MathInternalError,orders[$] > 0
DSCompiler.java,checkCompatibility,parameters,int,0,DimensionMismatchException,$ != compiler.parameters
DSCompiler.java,checkCompatibility,order,int,0,DimensionMismatchException,$ != compiler.order
FiniteDifferencesDifferentiator.java,FiniteDifferencesDifferentiator,nbPoints,int,0,NumberIsTooSmallException,$ <= 1
FiniteDifferencesDifferentiator.java,FiniteDifferencesDifferentiator,stepSize,double,0,NotPositiveException,$ <= 0
FiniteDifferencesDifferentiator.java,evaluate,i,int,1,DEF,$ == 0
FiniteDifferencesDifferentiator.java,value,t,DerivativeStructure,0,NumberIsTooLargeException,$.getOrder() >= nbPoints
FiniteDifferencesDifferentiator.java,value,t,DerivativeStructure,0,NumberIsTooLargeException,$.getOrder() >= nbPoints
FiniteDifferencesDifferentiator.java,value,i,int,0,DEF,$ == 0
FiniteDifferencesDifferentiator.java,value,t,DerivativeStructure,0,NumberIsTooLargeException,$.getOrder() >= nbPoints
FiniteDifferencesDifferentiator.java,value,i,int,0,DEF,$ == 0
HarmonicFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NumberIsTooSmallException,$.length < 4
HarmonicFitter.java,sortObservations,i,int,0,DEF,$-- != 0
HarmonicFitter.java,guessAOmega,c1,double,1,ZeroException,$ / c2 < 0
HarmonicFitter.java,guessAOmega,c2,double,1,ZeroException,c1 / $ < 0
HarmonicFitter.java,guessAOmega,c3,double,1,ZeroException,c2 / $ < 0
HarmonicFitter.java,guessAOmega,c2,double,1,ZeroException,$ / c3 < 0
HarmonicFitter.java,guessAOmega,xRange,double,0,ZeroException,$ == 0
HarmonicFitter.java,guessAOmega,y,double,0,DEF,$ < yMin
HarmonicFitter.java,guessAOmega,y,double,0,DEF,$ > yMax
HarmonicFitter.java,guessAOmega,c2,double,0,MathIllegalStateException,$ == 0
GaussianFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NullArgumentException,$ == null
GaussianFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NumberIsTooSmallException,$.length < 3
GaussianFitter.java,compare,p1,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p2,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p1,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p2,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,interpolateXAtY,idxStep,int,0,ZeroException,$ == 0
GaussianFitter.java,interpolateXAtY,p1,WeightedObservedPoint,0,RET,$.getY() == y
GaussianFitter.java,interpolateXAtY,p2,WeightedObservedPoint,0,RET,$.getY() == y
GaussianFitter.java,getInterpolationPointsForY,idxStep,int,0,ZeroException,$ == 0
GaussianFitter.java,getInterpolationPointsForY,idxStep,int,1,RET,$ < 0
ComplexFormat.java,ComplexFormat,format,NumberFormat,0,NullArgumentException,$ == null
ComplexFormat.java,ComplexFormat,imaginaryFormat,NumberFormat,0,NullArgumentException,$ == null
ComplexFormat.java,ComplexFormat,realFormat,NumberFormat,0,NullArgumentException,$ == null
ComplexFormat.java,ComplexFormat,imaginaryCharacter,String,0,NullArgumentException,$ == null
ComplexFormat.java,ComplexFormat,imaginaryCharacter,String,0,NoDataException,$.length() == 0
ComplexFormat.java,ComplexFormat,imaginaryFormat,NumberFormat,0,NullArgumentException,$ == null
ComplexFormat.java,ComplexFormat,realFormat,NumberFormat,0,NullArgumentException,$ == null
ComplexFormat.java,format,im,double,1,DEF,$ < 0.0
ComplexFormat.java,format,im,double,0,DEF,$ > 0.0
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Complex
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Number
ComplexFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
ComplexFormat.java,parse,re,Number,0,RET,$ == null
ComplexFormat.java,parse,im,Number,0,RET,$ == null
Quaternion.java,Quaternion,v,double[],0,DimensionMismatchException,$.length != 3
Quaternion.java,normalize,norm,double,0,ZeroException,$ < Precision.SAFE_MIN
Quaternion.java,equals,other,null,0,RET,$ instanceof Quaternion
Quaternion.java,getInverse,squareNorm,double,0,ZeroException,$ < Precision.SAFE_MIN
RootsOfUnity.java,isCounterClockWise,omegaCount,int,0,MathIllegalStateException,$ == 0
RootsOfUnity.java,computeRoots,n,int,0,ZeroException,$ == 0
RootsOfUnity.java,computeRoots,absN,int,0,RET,$ == omegaCount
RootsOfUnity.java,getReal,omegaCount,int,0,MathIllegalStateException,$ == 0
RootsOfUnity.java,getReal,k,int,0,OutOfRangeException,$ < 0
RootsOfUnity.java,getReal,k,int,0,OutOfRangeException,$ >= omegaCount
RootsOfUnity.java,getImaginary,omegaCount,int,0,MathIllegalStateException,$ == 0
RootsOfUnity.java,getImaginary,k,int,0,OutOfRangeException,$ < 0
RootsOfUnity.java,getImaginary,k,int,0,OutOfRangeException,$ >= omegaCount
Complex.java,abs,imaginary,double,0,RET,$ == 0.0
Complex.java,abs,real,double,0,RET,$ == 0.0
Complex.java,divide,c,double,0,RET,$ == 0.0
Complex.java,divide,d,double,0,RET,$ == 0.0
Complex.java,divide,divisor,double,0,RET,$ == 0d
Complex.java,reciprocal,real,double,0,RET,$ == 0.0
Complex.java,reciprocal,imaginary,double,0,RET,$ == 0.0
Complex.java,equals,other,null,0,RET,$ instanceof Complex
Complex.java,sqrt,real,double,0,RET,$ == 0.0
Complex.java,sqrt,imaginary,double,0,RET,$ == 0.0
Complex.java,sqrt,real,double,1,RET,$ >= 0.0
Complex.java,tan,imaginary,double,0,RET,$ > 20.0
Complex.java,tan,imaginary,double,0,RET,$ < -20.0
Complex.java,tanh,real,double,0,RET,$ > 20.0
Complex.java,tanh,real,double,0,RET,$ < -20.0
Complex.java,nthRoot,n,int,0,NotPositiveException,$ <= 0
ComplexUtils.java,polar2Complex,r,double,0,MathIllegalArgumentException,$ < 0
DescriptiveStatistics.java,DescriptiveStatistics,initialDoubleArray,double[],0,DEF,$ != null
DescriptiveStatistics.java,addValue,windowSize,int,1,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,MathIllegalArgumentException,$ < 1
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,MathIllegalArgumentException,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,getPercentile,percentileImpl,null,1,DEF,$ instanceof Percentile
AbstractStorelessUnivariateStatistic.java,evaluate,values,double[],0,NullArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,incrementAll,values,double[],0,NullArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,equals,object,Object,0,RET,$ instanceof AbstractStorelessUnivariateStatistic == false
AbstractStorelessUnivariateStatistic.java,equals,object,null,0,RET,$ instanceof AbstractStorelessUnivariateStatistic
StatisticalSummaryValues.java,equals,object,Object,0,RET,$ instanceof StatisticalSummaryValues == false
StatisticalSummaryValues.java,equals,object,null,0,RET,$ instanceof StatisticalSummaryValues
FirstMoment.java,increment,n,long,0,DEF,$ == 0
GeometricMean.java,getResult,sumOfLogs,StorelessUnivariateStatistic,1,RET,$.getN() > 0
ThirdMoment.java,increment,n,long,0,DEF,$ < 1
Kurtosis.java,getResult,moment,FourthMoment,0,DEF,$.getN() > 3
Kurtosis.java,getResult,moment,FirstMoment,1,DEF,$.n <= 3
Kurtosis.java,getResult,variance,double,1,DEF,$ < 10E-20
Kurtosis.java,evaluate,length,int,0,DEF,$ > 3
Skewness.java,getResult,moment,FirstMoment,0,RET,$.n < 3
Skewness.java,getResult,variance,double,1,RET,$ < 10E-20
Skewness.java,evaluate,length,int,0,DEF,$ > 2
FourthMoment.java,increment,n,long,0,DEF,$ < 1
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 0
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 1
Variance.java,evaluate,values,double[],0,NullArgumentException,$ == null
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
VectorialCovariance.java,increment,v,double[],0,DimensionMismatchException,$.length != sums.length
VectorialCovariance.java,getResult,n,long,0,DEF,$ > 1
VectorialCovariance.java,equals,obj,null,0,RET,$ instanceof VectorialCovariance
VectorialCovariance.java,equals,isBiasCorrected,boolean,0,RET,$ != other.isBiasCorrected
VectorialCovariance.java,equals,n,long,0,RET,$ != other.n
SecondMoment.java,increment,n,long,0,DEF,$ < 1
VectorialMean.java,increment,v,double[],0,DimensionMismatchException,$.length != means.length
VectorialMean.java,equals,obj,null,0,RET,$ instanceof VectorialMean
SemiVariance.java,evaluate,values,double[],1,RET,$.length == 0
SemiVariance.java,evaluate,values,double[],1,RET,$.length == 1
SemiVariance.java,evaluate,values,double[],0,DEF,($[i] > cutoff) == booleanDirection
SemiVariance.java,evaluate,i,int,0,DEF,(values[$] > cutoff) == booleanDirection
SemiVariance.java,evaluate,cutoff,double,0,DEF,(values[i] > $) == booleanDirection
SemiVariance.java,evaluate,values,double[],0,DEF,$[i] > cutoff
SemiVariance.java,evaluate,i,int,0,DEF,values[$] > cutoff
Percentile.java,setData,values,double[],1,DEF,$ == null
Percentile.java,setData,values,double[],1,DEF,$ == null
Percentile.java,evaluate,p,double,0,OutOfRangeException,$ > 100
Percentile.java,evaluate,p,double,0,OutOfRangeException,$ <= 0
Percentile.java,evaluate,length,int,0,RET,$ == 0
Percentile.java,evaluate,length,int,0,RET,$ == 1
Percentile.java,evaluate,pos,double,0,RET,$ < 1
Percentile.java,evaluate,pos,double,0,RET,$ >= n
Percentile.java,select,node,int,1,DEF,$ < pivotsHeap.length
Percentile.java,select,node,int,1,DEF,pivotsHeap[$] >= 0
Percentile.java,select,pivotsHeap,int[],1,DEF,$[node] >= 0
Percentile.java,select,node,int,0,DEF,$ < pivotsHeap.length
Percentile.java,select,k,int,1,RET,$ == pivot
Percentile.java,select,k,int,1,DEF,$ < pivot
Percentile.java,medianOf3,wBegin,double,1,RET,$ < wMiddle
Percentile.java,medianOf3,wMiddle,double,1,RET,$ < wEnd
Percentile.java,medianOf3,wBegin,double,1,RET,$ < wEnd
Percentile.java,partition,i,int,0,DEF,$ < j
Percentile.java,partition,i,int,0,DEF,$ >= end
Percentile.java,partition,work,double[],0,DEF,$[i] > value
Percentile.java,partition,i,int,0,DEF,work[$] > value
Percentile.java,setQuantile,p,double,0,OutOfRangeException,$ <= 0
Percentile.java,setQuantile,p,double,0,OutOfRangeException,$ > 100
Percentile.java,copy,source,Percentile,0,DEF,$.cachedPivots != null
Max.java,increment,d,double,0,DEF,$ > value
Min.java,increment,d,double,0,DEF,$ < value
AbstractUnivariateStatistic.java,setData,values,double[],0,NullArgumentException,$ == null
AbstractUnivariateStatistic.java,setData,begin,int,0,NotPositiveException,$ < 0
AbstractUnivariateStatistic.java,setData,length,int,0,NotPositiveException,$ < 0
AbstractUnivariateStatistic.java,setData,length,int,0,NumberIsTooLargeException,begin + $ > values.length
AbstractUnivariateStatistic.java,setData,begin,int,0,NumberIsTooLargeException,$ + length > values.length
AbstractUnivariateStatistic.java,test,values,double[],0,NullArgumentException,$ == null
AbstractUnivariateStatistic.java,test,begin,int,0,NotPositiveException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,NotPositiveException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,NumberIsTooLargeException,begin + $ > values.length
AbstractUnivariateStatistic.java,test,begin,int,0,NumberIsTooLargeException,$ + length > values.length
AbstractUnivariateStatistic.java,test,length,int,0,RET,$ == 0
AbstractUnivariateStatistic.java,test,weights,double[],0,NullArgumentException,$ == null
AbstractUnivariateStatistic.java,test,values,double[],0,NullArgumentException,$ == null
AbstractUnivariateStatistic.java,test,weights,double[],0,DimensionMismatchException,$.length != values.length
AbstractUnivariateStatistic.java,test,i,int,0,MathIllegalArgumentException,weights[$] < 0
AbstractUnivariateStatistic.java,test,weights,double[],0,MathIllegalArgumentException,$[i] < 0
AbstractUnivariateStatistic.java,test,i,int,0,DEF,weights[$] > 0.0
AbstractUnivariateStatistic.java,test,weights,double[],0,DEF,$[i] > 0.0
MultivariateSummaryStatistics.java,append,i,int,0,DEF,$ > 0
MultivariateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof MultivariateSummaryStatistics == false
MultivariateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof MultivariateSummaryStatistics
MultivariateSummaryStatistics.java,checkEmpty,n,long,0,MathIllegalStateException,$ > 0
MultivariateSummaryStatistics.java,checkDimension,dimension,int,0,DimensionMismatchException,$ != k
AggregateSummaryStatistics.java,aggregate,statistics,Collection<SummaryStatistics>,0,RET,$ == null
AggregateSummaryStatistics.java,aggregate,current,SummaryStatistics,0,DEF,$.getMin() < min
AggregateSummaryStatistics.java,aggregate,current,SummaryStatistics,0,DEF,$.getMax() > max
AggregateSummaryStatistics.java,aggregate,n,long,1,DEF,$ == 0
AggregateSummaryStatistics.java,aggregate,n,long,1,DEF,$ == 1
AggregateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof AggregatingSummaryStatistics == false
AggregateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof AggregatingSummaryStatistics
SummaryStatistics.java,addValue,meanImpl,StorelessUnivariateStatistic,0,DEF,$ != mean
SummaryStatistics.java,addValue,varianceImpl,StorelessUnivariateStatistic,0,DEF,$ != variance
SummaryStatistics.java,addValue,geoMeanImpl,StorelessUnivariateStatistic,0,DEF,$ != geoMean
SummaryStatistics.java,clear,meanImpl,StorelessUnivariateStatistic,0,DEF,$ != mean
SummaryStatistics.java,clear,varianceImpl,StorelessUnivariateStatistic,0,DEF,$ != variance
SummaryStatistics.java,equals,object,Object,0,RET,$ instanceof SummaryStatistics == false
SummaryStatistics.java,equals,object,null,0,RET,$ instanceof SummaryStatistics
SummaryStatistics.java,checkEmpty,n,long,0,MathIllegalStateException,$ > 0
SummaryStatistics.java,copy,source.meanImpl,null,1,DEF,$ instanceof Mean
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.geoMean == source.geoMeanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.max == source.maxImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.mean == source.meanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.min == source.minImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sum == source.sumImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.variance == source.varianceImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumLog == source.sumLogImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumsq == source.sumsqImpl
GTest.java,g,expected,double[],0,DimensionMismatchException,$.length < 2
GTest.java,g,expected,double[],0,DimensionMismatchException,$.length != observed.length
GTest.java,g,sumObserved,double,0,DEF,Math.abs(sumExpected - $) > 10E-6
GTest.java,g,sumExpected,double,0,DEF,Math.abs($ - sumObserved) > 10E-6
GTest.java,gTest,alpha,double,0,OutOfRangeException,$ <= 0
GTest.java,gTest,alpha,double,0,OutOfRangeException,$ > 0.5
GTest.java,entropy,i,int,0,DEF,k[$][j] != 0
GTest.java,entropy,j,int,0,DEF,k[i][$] != 0
GTest.java,entropy,k,long[][],0,DEF,$[i][j] != 0
GTest.java,entropy,i,int,0,DEF,k[$] != 0
GTest.java,entropy,k,long[],0,DEF,$[i] != 0
GTest.java,gDataSetsComparison,observed1,long[],0,DimensionMismatchException,$.length < 2
GTest.java,gDataSetsComparison,observed1,long[],0,DimensionMismatchException,$.length != observed2.length
GTest.java,gDataSetsComparison,i,int,1,ZeroException,observed1[$] == 0
GTest.java,gDataSetsComparison,observed1,long[],1,ZeroException,$[i] == 0
GTest.java,gDataSetsComparison,observed2,long[],1,ZeroException,$[i] == 0
GTest.java,gDataSetsComparison,i,int,1,ZeroException,observed2[$] == 0
GTest.java,gDataSetsComparison,countSum1,long,0,ZeroException,$ == 0
GTest.java,gDataSetsComparison,countSum2,long,0,ZeroException,$ == 0
GTest.java,gTestDataSetsComparison,alpha,double,0,OutOfRangeException,$ <= 0
GTest.java,gTestDataSetsComparison,alpha,double,0,OutOfRangeException,$ > 0.5
MannWhitneyUTest.java,ensureDataConformance,x,double[],0,NullArgumentException,$ == null
MannWhitneyUTest.java,ensureDataConformance,y,double[],0,NullArgumentException,$ == null
MannWhitneyUTest.java,ensureDataConformance,x,double[],0,NoDataException,$.length == 0
MannWhitneyUTest.java,ensureDataConformance,y,double[],0,NoDataException,$.length == 0
ChiSquareTest.java,chiSquare,expected,double[],0,DimensionMismatchException,$.length < 2
ChiSquareTest.java,chiSquare,expected,double[],0,DimensionMismatchException,$.length != observed.length
ChiSquareTest.java,chiSquare,sumObserved,double,0,DEF,FastMath.abs(sumExpected - $) > 10E-6
ChiSquareTest.java,chiSquare,sumExpected,double,0,DEF,FastMath.abs($ - sumObserved) > 10E-6
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ <= 0
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ > 0.5
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ <= 0
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ > 0.5
ChiSquareTest.java,chiSquareDataSetsComparison,observed1,long[],0,DimensionMismatchException,$.length < 2
ChiSquareTest.java,chiSquareDataSetsComparison,observed1,long[],0,DimensionMismatchException,$.length != observed2.length
ChiSquareTest.java,chiSquareDataSetsComparison,countSum1,long,0,ZeroException,$ == 0
ChiSquareTest.java,chiSquareDataSetsComparison,countSum2,long,0,ZeroException,$ == 0
ChiSquareTest.java,chiSquareDataSetsComparison,i,int,1,ZeroException,observed1[$] == 0
ChiSquareTest.java,chiSquareDataSetsComparison,observed1,long[],1,ZeroException,$[i] == 0
ChiSquareTest.java,chiSquareDataSetsComparison,observed2,long[],1,ZeroException,$[i] == 0
ChiSquareTest.java,chiSquareDataSetsComparison,i,int,1,ZeroException,observed2[$] == 0
ChiSquareTest.java,chiSquareTestDataSetsComparison,alpha,double,0,OutOfRangeException,$ <= 0
ChiSquareTest.java,chiSquareTestDataSetsComparison,alpha,double,0,OutOfRangeException,$ > 0.5
ChiSquareTest.java,checkArray,in,long[][],0,DimensionMismatchException,$.length < 2
ChiSquareTest.java,checkArray,in,long[][],0,DimensionMismatchException,$[0].length < 2
TTest.java,checkSignificanceLevel,alpha,double,0,OutOfRangeException,$ <= 0
TTest.java,checkSignificanceLevel,alpha,double,0,OutOfRangeException,$ > 0.5
TTest.java,checkSampleData,data,double[],0,NullArgumentException,$ == null
TTest.java,checkSampleData,data,double[],0,NumberIsTooSmallException,$.length < 2
TTest.java,checkSampleData,stat,StatisticalSummary,0,NullArgumentException,$ == null
TTest.java,checkSampleData,stat,StatisticalSummary,0,NumberIsTooSmallException,$.getN() < 2
OneWayAnova.java,anovaTest,alpha,double,0,OutOfRangeException,$ <= 0
OneWayAnova.java,anovaTest,alpha,double,0,OutOfRangeException,$ > 0.5
OneWayAnova.java,anovaStats,categoryData,Collection<SummaryStatistics>,0,DimensionMismatchException,$.size() < 2
OneWayAnova.java,anovaStats,array,SummaryStatistics,0,DimensionMismatchException,$.getN() <= 1
WilcoxonSignedRankTest.java,ensureDataConformance,x,double[],0,NullArgumentException,$ == null
WilcoxonSignedRankTest.java,ensureDataConformance,y,double[],0,NullArgumentException,$ == null
WilcoxonSignedRankTest.java,ensureDataConformance,x,double[],0,NoDataException,$.length == 0
WilcoxonSignedRankTest.java,ensureDataConformance,y,double[],0,NoDataException,$.length == 0
WilcoxonSignedRankTest.java,ensureDataConformance,y,double[],0,DimensionMismatchException,$.length != x.length
WilcoxonSignedRankTest.java,calculateAbsoluteDifferences,z,double[],0,NullArgumentException,$ == null
WilcoxonSignedRankTest.java,calculateAbsoluteDifferences,z,double[],0,NoDataException,$.length == 0
WilcoxonSignedRankTest.java,wilcoxonSignedRank,i,int,0,DEF,z[$] > 0
WilcoxonSignedRankTest.java,wilcoxonSignedRank,z,double[],0,DEF,$[i] > 0
WilcoxonSignedRankTest.java,calculateExactPValue,i,int,0,DEF,(($ >> j) & 1) == 1
WilcoxonSignedRankTest.java,calculateExactPValue,j,int,0,DEF,((i >> $) & 1) == 1
WilcoxonSignedRankTest.java,calculateExactPValue,rankSum,int,0,DEF,$ >= Wmax
WilcoxonSignedRankTest.java,wilcoxonSignedRankTest,N,int,0,NumberIsTooLargeException,$ > 30
NaturalRanking.java,rank,nanPositions,List<Integer>,0,NotANumberException,$.size() > 0
NaturalRanking.java,rank,ranks,IntDoublePair[],1,DEF,Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
NaturalRanking.java,rank,i,int,1,DEF,Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
NaturalRanking.java,rank,tiesTrace,List<Integer>,0,DEF,$.size() > 1
NaturalRanking.java,rank,tiesTrace,List<Integer>,0,DEF,$.size() > 1
NaturalRanking.java,rank,nanStrategy,NaNStrategy,0,DEF,$ == NaNStrategy.FIXED
NaturalRanking.java,restoreNaNs,nanPositions,List<Integer>,0,RET,$.size() == 0
StatUtils.java,sumDifference,n,int,0,DimensionMismatchException,$ != sample2.length
StatUtils.java,sumDifference,n,int,0,NoDataException,$ <= 0
StatUtils.java,varianceDifference,n,int,0,DimensionMismatchException,$ != sample2.length
StatUtils.java,varianceDifference,n,int,0,NumberIsTooSmallException,$ < 2
KMeansPlusPlusClusterer.java,cluster,varianceSum,double,0,DEF,$ <= bestVarianceSum
KMeansPlusPlusClusterer.java,cluster,points,Collection<T>,0,NumberIsTooSmallException,$.size() < k
KMeansPlusPlusClusterer.java,cluster,changes,int,0,RET,$ == 0
KMeansPlusPlusClusterer.java,chooseInitialCenters,i,int,0,DEF,$ != firstPointIndex
KMeansPlusPlusClusterer.java,chooseInitialCenters,sum,double,0,DEF,$ >= r
KMeansPlusPlusClusterer.java,chooseInitialCenters,nextPointIndex,int,0,DEF,$ == -1
KMeansPlusPlusClusterer.java,chooseInitialCenters,nextPointIndex,int,1,DEF,$ >= 0
KMeansPlusPlusClusterer.java,chooseInitialCenters,resultSet,List<Cluster<T>>,0,DEF,$.size() < k
KMeansPlusPlusClusterer.java,getPointFromLargestVarianceCluster,variance,double,0,DEF,$ > maxVariance
KMeansPlusPlusClusterer.java,getPointFromLargestVarianceCluster,selected,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getPointFromLargestNumberCluster,number,int,0,DEF,$ > maxNumber
KMeansPlusPlusClusterer.java,getPointFromLargestNumberCluster,selected,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getFarthestPoint,distance,double,0,DEF,$ > maxDistance
KMeansPlusPlusClusterer.java,getFarthestPoint,selectedCluster,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getNearestCluster,distance,double,0,DEF,$ < minDistance
EuclideanIntegerPoint.java,equals,other,null,0,RET,$ instanceof EuclideanIntegerPoint
DBSCANClusterer.java,DBSCANClusterer,eps,double,0,NotPositiveException,$ < 0.0d
DBSCANClusterer.java,DBSCANClusterer,minPts,int,0,NotPositiveException,$ < 0
DBSCANClusterer.java,cluster,visited,Map<Clusterable<T>,PointStatus>,0,DEF,$.get(point) != null
DBSCANClusterer.java,cluster,point,T,0,DEF,visited.get($) != null
DBSCANClusterer.java,cluster,neighbors,List<T>,1,DEF,$.size() >= minPts
DBSCANClusterer.java,expandCluster,pStatus,PointStatus,0,DEF,$ == null
DBSCANClusterer.java,expandCluster,currentNeighbors,List<T>,0,DEF,$.size() >= minPts
DBSCANClusterer.java,expandCluster,pStatus,PointStatus,0,DEF,$ != PointStatus.PART_OF_CLUSTER
DBSCANClusterer.java,getNeighbors,point,T,0,DEF,$ != neighbor
DBSCANClusterer.java,getNeighbors,neighbor,T,0,DEF,$.distanceFrom(point) <= eps
DBSCANClusterer.java,getNeighbors,point,T,0,DEF,neighbor.distanceFrom($) <= eps
EuclideanDoublePoint.java,equals,other,null,0,RET,$ instanceof EuclideanDoublePoint
PearsonsCorrelation.java,PearsonsCorrelation,covarianceMatrix,RealMatrix,0,NullArgumentException,$ == null
PearsonsCorrelation.java,getCorrelationPValues,i,int,1,DEF,$ == j
PearsonsCorrelation.java,correlation,xArray,double[],1,DimensionMismatchException,$.length != yArray.length
PearsonsCorrelation.java,correlation,xArray,double[],1,MathIllegalArgumentException,$.length < 2
PearsonsCorrelation.java,checkSufficientData,nRows,int,0,MathIllegalArgumentException,$ < 2
PearsonsCorrelation.java,checkSufficientData,nCols,int,0,MathIllegalArgumentException,$ < 2
StorelessBivariateCovariance.java,getResult,n,double,0,NumberIsTooSmallException,$ < 2
SpearmansCorrelation.java,correlation,xArray,double[],1,DimensionMismatchException,$.length != yArray.length
SpearmansCorrelation.java,correlation,xArray,double[],1,MathIllegalArgumentException,$.length < 2
SpearmansCorrelation.java,correlation,rankingAlgorithm,null,0,DEF,$ instanceof NaturalRanking
SpearmansCorrelation.java,rankTransform,rankingAlgorithm,null,0,DEF,$ instanceof NaturalRanking
SpearmansCorrelation.java,rankTransform,rankingAlgorithm,RankingAlgorithm,0,DEF,((NaturalRanking) $).getNanStrategy() == NaNStrategy.REMOVED
SpearmansCorrelation.java,rankTransform,transformed,RealMatrix,0,DEF,$ == null
Covariance.java,covariance,length,int,1,MathIllegalArgumentException,$ != yArray.length
Covariance.java,covariance,length,int,1,MathIllegalArgumentException,$ < 2
Covariance.java,checkSufficientData,nRows,int,0,MathIllegalArgumentException,$ < 2
Covariance.java,checkSufficientData,nCols,int,0,MathIllegalArgumentException,$ < 1
StorelessCovariance.java,increment,length,int,0,DimensionMismatchException,$ != dimension
StorelessCovariance.java,append,sc,StorelessCovariance,0,DimensionMismatchException,$.dimension != dimension
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ == j
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ < p
MillerUpdatingRegression.java,MillerUpdatingRegression,numberOfVariables,int,0,ModelSpecificationException,$ < 1
MillerUpdatingRegression.java,MillerUpdatingRegression,errorTolerance,double,1,DEF,$ > 0
MillerUpdatingRegression.java,addObservation,x,double[],0,ModelSpecificationException,$.length != nvars
MillerUpdatingRegression.java,addObservation,x,double[],0,ModelSpecificationException,$.length + 1 != nvars
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$ == null
MillerUpdatingRegression.java,addObservations,y,double[],0,ModelSpecificationException,$ == null
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$.length != y.length
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$.length == 0
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$[0].length + 1 > x.length
MillerUpdatingRegression.java,include,w,double,0,RET,$ == 0.0
MillerUpdatingRegression.java,include,xi,double,0,DEF,$ == 0.0
MillerUpdatingRegression.java,include,di,double,1,DEF,$ != 0.0
MillerUpdatingRegression.java,include,tmp,double,0,DEF,FastMath.abs($) > Precision.EPSILON
MillerUpdatingRegression.java,include,di,double,1,DEF,$ != 0.0
MillerUpdatingRegression.java,include,di,double,1,DEF,$ != 0.0
MillerUpdatingRegression.java,smartAdd,_a,double,1,RET,$ > _b
MillerUpdatingRegression.java,smartAdd,_b,double,0,RET,$ > eps
MillerUpdatingRegression.java,smartAdd,_a,double,0,RET,$ > eps
MillerUpdatingRegression.java,regcf,nreq,int,0,ModelSpecificationException,$ < 1
MillerUpdatingRegression.java,singcheck,r,double[],0,DEF,Math.abs($[pos]) * work_sing[row] < temp
MillerUpdatingRegression.java,singcheck,work_sing,double[],0,DEF,Math.abs(r[pos]) * $[row] < temp
MillerUpdatingRegression.java,singcheck,pos,int,0,DEF,Math.abs(r[$]) * work_sing[row] < temp
MillerUpdatingRegression.java,singcheck,row,int,0,DEF,Math.abs(r[pos]) * work_sing[$] < temp
MillerUpdatingRegression.java,singcheck,col,int,0,DEF,work_sing[$] < temp
MillerUpdatingRegression.java,singcheck,work_sing,double[],0,DEF,$[col] < temp
MillerUpdatingRegression.java,cov,row,int,1,DEF,$ == col
MillerUpdatingRegression.java,getPartialCorrelations,in,int,0,RET,$ < -1
MillerUpdatingRegression.java,getPartialCorrelations,in,int,0,RET,$ >= nvars
MillerUpdatingRegression.java,getPartialCorrelations,d,double[],0,DEF,$[in] > 0.0
MillerUpdatingRegression.java,getPartialCorrelations,in,int,0,DEF,d[$] > 0.0
MillerUpdatingRegression.java,getPartialCorrelations,sumxx,double,1,DEF,$ > 0.0
MillerUpdatingRegression.java,getPartialCorrelations,sumyy,double,0,DEF,$ > 0.0
MillerUpdatingRegression.java,vmove,from,int,0,RET,$ == to
MillerUpdatingRegression.java,vmove,from,int,1,DEF,$ < to
MillerUpdatingRegression.java,vmove,m,int,0,DEF,$ > 0
MillerUpdatingRegression.java,reorderRegressors,list,int[],0,RET,$.length < 1
MillerUpdatingRegression.java,reorderRegressors,i,int,0,RET,$ > next
MillerUpdatingRegression.java,getDiagonalOfHatMatrix,row_data,double[],0,RET,$.length > nvars
MillerUpdatingRegression.java,regress,i,int,0,DEF,this.vorder[$] != i
MillerUpdatingRegression.java,regress,j,int,0,DEF,this.vorder[$] == i
MillerUpdatingRegression.java,regress,_i,int,1,DEF,$ > _j
MillerUpdatingRegression.java,regress,i,int,0,DEF,$ > 0
MillerUpdatingRegression.java,regress,iExclude,int,1,DEF,$ > 0
MillerUpdatingRegression.java,regress,variablesToInclude,int[],0,DEF,$[i] > -1
MillerUpdatingRegression.java,regress,i,int,0,DEF,variablesToInclude[$] > -1
MillerUpdatingRegression.java,regress,_i,int,1,DEF,$ > _j
AbstractMultipleLinearRegression.java,newSampleData,data,double[],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,newSampleData,nobs,int,0,NumberIsTooSmallException,$ <= nvars
AbstractMultipleLinearRegression.java,newYSampleData,y,double[],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,newYSampleData,y,double[],0,NoDataException,$.length == 0
AbstractMultipleLinearRegression.java,newXSampleData,x,double[][],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,newXSampleData,x,double[][],0,NoDataException,$.length == 0
AbstractMultipleLinearRegression.java,newXSampleData,x,double[][],0,DimensionMismatchException,$[i].length != nVars
AbstractMultipleLinearRegression.java,newXSampleData,i,int,0,DimensionMismatchException,x[$].length != nVars
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,y,double[],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,DimensionMismatchException,$.length != y.length
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,NoDataException,$.length == 0
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,MathIllegalArgumentException,$[0].length + 1 > x.length
AbstractMultipleLinearRegression.java,validateCovarianceData,x,double[][],0,DimensionMismatchException,$.length != covariance.length
AbstractMultipleLinearRegression.java,validateCovarianceData,covariance,double[][],0,NonSquareMatrixException,$.length > 0
SimpleRegression.java,addData,n,long,1,DEF,$ == 0
SimpleRegression.java,append,n,long,1,DEF,$ == 0
SimpleRegression.java,removeData,n,long,0,DEF,$ > 0
SimpleRegression.java,addData,data,double[][],0,ModelSpecificationException,$[i].length < 2
SimpleRegression.java,addData,i,int,0,ModelSpecificationException,data[$].length < 2
SimpleRegression.java,addObservation,x,double[],0,ModelSpecificationException,$ == null
SimpleRegression.java,addObservation,x,double[],0,ModelSpecificationException,$.length == 0
SimpleRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$ == null
SimpleRegression.java,addObservations,y,double[],0,ModelSpecificationException,$ == null
SimpleRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$.length != y.length
SimpleRegression.java,addObservations,x,double[][],0,DEF,$[i] == null
SimpleRegression.java,addObservations,i,int,0,DEF,x[$] == null
SimpleRegression.java,addObservations,x,double[][],0,DEF,$[i].length == 0
SimpleRegression.java,addObservations,i,int,0,DEF,x[$].length == 0
SimpleRegression.java,getSlope,n,long,0,RET,$ < 2
SimpleRegression.java,getTotalSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getXSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getMeanSquareError,n,long,0,RET,$ < 3
SimpleRegression.java,getR,b1,double,0,DEF,$ < 0
SimpleRegression.java,getSlopeConfidenceInterval,n,long,0,RET,$ < 3
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,OutOfRangeException,$ >= 1
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,OutOfRangeException,$ <= 0
SimpleRegression.java,getSignificance,n,long,0,RET,$ < 3
SimpleRegression.java,regress,n,long,0,NoDataException,$ < 3
SimpleRegression.java,regress,sumXX,double,1,RET,FastMath.abs( $ ) > Precision.SAFE_MIN
SimpleRegression.java,regress,n,long,0,NoDataException,$ < 2
SimpleRegression.java,regress,variablesToInclude,int[],0,MathIllegalArgumentException,$ == null
SimpleRegression.java,regress,variablesToInclude,int[],0,MathIllegalArgumentException,$.length == 0
SimpleRegression.java,regress,variablesToInclude,int[],0,ModelSpecificationException,$.length > 2
SimpleRegression.java,regress,variablesToInclude,int[],0,ModelSpecificationException,$.length > 1
SimpleRegression.java,regress,variablesToInclude,int[],1,OutOfRangeException:RET,$.length == 2
SimpleRegression.java,regress,variablesToInclude,int[],1,ModelSpecificationException,$[0] == 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 0
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[1] != 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 0
SimpleRegression.java,regress,variablesToInclude,int[],1,RET,$[0] == 0
SimpleRegression.java,regress,variablesToInclude,int[],0,RET,$[0] == 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 0
GLSMultipleLinearRegression.java,getOmegaInverse,OmegaInverse,RealMatrix,0,DEF,$ == null
RegressionResults.java,RegressionResults,rank,int,0,DEF,$ > 0
RegressionResults.java,getParameterEstimate,parameters,double[],0,RET,$ == null
RegressionResults.java,getParameterEstimate,index,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getStdErrorOfEstimate,parameters,double[],0,RET,$ == null
RegressionResults.java,getStdErrorOfEstimate,index,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getStdErrorOfEstimate,var,double,0,RET,$ > Double.MIN_VALUE
RegressionResults.java,getStdErrorOfEstimates,parameters,double[],0,RET,$ == null
RegressionResults.java,getStdErrorOfEstimates,var,double,0,DEF,$ > Double.MIN_VALUE
RegressionResults.java,getCovarianceOfParameters,parameters,double[],0,RET,$ == null
RegressionResults.java,getCovarianceOfParameters,i,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getCovarianceOfParameters,j,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getVcvElement,i,int,1,RET,$ == j
RegressionResults.java,getVcvElement,i,int,1,RET,$ > j
Frequency.java,incrementValue,v,null,0,DEF,$ instanceof Integer
Frequency.java,incrementValue,count,Long,1,DEF,$ == null
Frequency.java,getCount,v,null,0,RET,$ instanceof Integer
Frequency.java,getCount,count,Long,0,DEF,$ != null
Frequency.java,getPct,sumFreq,long,0,RET,$ == 0
Frequency.java,getCumFreq,v,null,0,RET,$ instanceof Integer
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,DEF,$ == null
Frequency.java,getCumFreq,value,Long,0,DEF,$ != null
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,RET,$.compare(v, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,v,Comparable<>,0,RET,c.compare($, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,freqTable,TreeMap<Comparable<?>,Long>,0,RET,c.compare(v, $.firstKey()) < 0
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,RET,$.compare(v, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,v,Comparable<>,0,RET,c.compare($, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,freqTable,TreeMap<Comparable<?>,Long>,0,RET,c.compare(v, $.lastKey()) >= 0
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,1,DEF,$.compare(v, nextValue) > 0
Frequency.java,getCumFreq,v,Comparable<>,1,DEF,c.compare($, nextValue) > 0
Frequency.java,getCumFreq,nextValue,Comparable<>,1,DEF,c.compare(v, $) > 0
Frequency.java,getCumPct,sumFreq,long,0,RET,$ == 0
Frequency.java,equals,obj,null,0,RET,$ instanceof Frequency
Frequency.java,equals,freqTable,TreeMap<Comparable<?>,Long>,1,RET,$ == null
Frequency.java,equals,other,Frequency,0,RET,$.freqTable != null
KalmanFilter.java,KalmanFilter,processModel,ProcessModel,1,DEF,$.getControlMatrix() == null
KalmanFilter.java,KalmanFilter,processModel,ProcessModel,1,DEF,$.getInitialStateEstimate() == null
KalmanFilter.java,KalmanFilter,processModel,ProcessModel,1,DEF,$.getInitialErrorCovariance() == null
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$ != null
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() > 0
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() > 0
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
KalmanFilter.java,KalmanFilter,measNoise,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
KalmanFilter.java,predict,u,RealVector,0,DimensionMismatchException,$ != null
KalmanFilter.java,predict,u,RealVector,0,DEF,$ != null
TriangularDistribution.java,TriangularDistribution,a,double,0,NumberIsTooLargeException,$ >= b
TriangularDistribution.java,TriangularDistribution,c,double,0,NumberIsTooSmallException,$ < a
TriangularDistribution.java,TriangularDistribution,c,double,0,NumberIsTooLargeException,$ > b
TriangularDistribution.java,density,x,double,0,RET,$ < a
TriangularDistribution.java,density,a,double,0,RET,$ <= x
TriangularDistribution.java,density,x,double,0,RET,$ < c
TriangularDistribution.java,density,x,double,0,RET,$ == c
TriangularDistribution.java,density,c,double,0,RET,$ < x
TriangularDistribution.java,density,x,double,0,RET,$ <= b
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ < a
TriangularDistribution.java,cumulativeProbability,a,double,0,RET,$ <= x
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ < c
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ == c
TriangularDistribution.java,cumulativeProbability,c,double,0,RET,$ < x
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ <= b
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
EnumeratedDistribution.java,EnumeratedDistribution,p,double,0,NotPositiveException,$ < 0
EnumeratedDistribution.java,probability,x,T,0,DEF,$ == null
EnumeratedDistribution.java,probability,i,int,0,DEF,singletons.get($) == null
EnumeratedDistribution.java,probability,singletons,List<T>,0,DEF,$.get(i) == null
EnumeratedDistribution.java,probability,x,T,0,DEF,$ != null
EnumeratedDistribution.java,sample,randomValue,double,0,RET,$ < sum
EnumeratedDistribution.java,sample,sampleSize,int,0,NotStrictlyPositiveException,$ <= 0
EnumeratedDistribution.java,sample,sampleSize,int,0,NotStrictlyPositiveException,$ <= 0
EnumeratedDistribution.java,sample,array,T[],0,NullArgumentException,$ == null
EnumeratedDistribution.java,sample,array,T[],1,DEF,$.length < sampleSize
ZipfDistribution.java,ZipfDistribution,numberOfElements,int,0,NotStrictlyPositiveException,$ <= 0
ZipfDistribution.java,ZipfDistribution,exponent,double,0,NotStrictlyPositiveException,$ <= 0
ZipfDistribution.java,probability,x,int,0,RET,$ <= 0
ZipfDistribution.java,probability,x,int,0,RET,$ > numberOfElements
ZipfDistribution.java,cumulativeProbability,x,int,1,RET,$ <= 0
ZipfDistribution.java,cumulativeProbability,x,int,0,RET,$ >= numberOfElements
GeometricDistribution.java,GeometricDistribution,p,double,0,OutOfRangeException,$ <= 0
GeometricDistribution.java,GeometricDistribution,p,double,0,OutOfRangeException,$ > 1
GeometricDistribution.java,probability,x,int,1,DEF,$ < 0
GeometricDistribution.java,cumulativeProbability,x,int,1,DEF,$ < 0
HypergeometricDistribution.java,HypergeometricDistribution,populationSize,int,0,NotStrictlyPositiveException,$ <= 0
HypergeometricDistribution.java,HypergeometricDistribution,numberOfSuccesses,int,0,NotPositiveException,$ < 0
HypergeometricDistribution.java,HypergeometricDistribution,sampleSize,int,0,NotPositiveException,$ < 0
HypergeometricDistribution.java,HypergeometricDistribution,numberOfSuccesses,int,0,NumberIsTooLargeException,$ > populationSize
HypergeometricDistribution.java,HypergeometricDistribution,sampleSize,int,0,NumberIsTooLargeException,$ > populationSize
MultivariateNormalDistribution.java,MultivariateNormalDistribution,covariances,double[][],0,DimensionMismatchException,$.length != dim
MultivariateNormalDistribution.java,MultivariateNormalDistribution,i,int,0,NonPositiveDefiniteMatrixException,covMatEigenvalues[$] < 0
MultivariateNormalDistribution.java,MultivariateNormalDistribution,covMatEigenvalues,double[],0,NonPositiveDefiniteMatrixException,$[i] < 0
MultivariateNormalDistribution.java,density,vals,double[],0,DimensionMismatchException,$.length != dim
WeibullDistribution.java,WeibullDistribution,alpha,double,0,NotStrictlyPositiveException,$ <= 0
WeibullDistribution.java,WeibullDistribution,beta,double,0,NotStrictlyPositiveException,$ <= 0
WeibullDistribution.java,density,x,double,0,RET,$ < 0
WeibullDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ < 0.0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ > 1.0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
EnumeratedIntegerDistribution.java,EnumeratedIntegerDistribution,singletons,int[],0,DimensionMismatchException,$.length != probabilities.length
EnumeratedIntegerDistribution.java,cumulativeProbability,sample,Pair<Integer,Double>,0,DEF,$.getKey() <= x
EnumeratedIntegerDistribution.java,getSupportLowerBound,sample,Pair<Integer,Double>,0,DEF,$.getKey() < min
EnumeratedIntegerDistribution.java,getSupportLowerBound,sample,Pair<Integer,Double>,0,DEF,$.getValue() > 0
EnumeratedIntegerDistribution.java,getSupportUpperBound,sample,Pair<Integer,Double>,0,DEF,$.getKey() > max
EnumeratedIntegerDistribution.java,getSupportUpperBound,sample,Pair<Integer,Double>,0,DEF,$.getValue() > 0
NormalDistribution.java,NormalDistribution,sd,double,0,NotStrictlyPositiveException,$ <= 0
NormalDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0.0
NormalDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1.0
NormalDistribution.java,probability,x0,double,0,NumberIsTooLargeException,$ > x1
CauchyDistribution.java,CauchyDistribution,scale,double,0,NotStrictlyPositiveException,$ <= 0
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ < 0
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ > 1
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
TDistribution.java,TDistribution,degreesOfFreedom,double,0,NotStrictlyPositiveException,$ <= 0
TDistribution.java,cumulativeProbability,x,double,1,DEF,$ == 0
TDistribution.java,cumulativeProbability,x,double,1,DEF,$ < 0.0
TDistribution.java,getNumericalMean,df,double,0,RET,$ > 1
TDistribution.java,getNumericalVariance,df,double,0,RET,$ > 2
TDistribution.java,getNumericalVariance,df,double,0,RET,$ > 1
TDistribution.java,getNumericalVariance,df,double,0,RET,$ <= 2
LogNormalDistribution.java,LogNormalDistribution,shape,double,0,NotStrictlyPositiveException,$ <= 0
LogNormalDistribution.java,density,x,double,0,RET,$ <= 0
LogNormalDistribution.java,cumulativeProbability,x,double,0,RET,$ <= 0
LogNormalDistribution.java,probability,x0,double,0,NumberIsTooLargeException,$ > x1
LogNormalDistribution.java,probability,x0,double,0,RET,$ <= 0
LogNormalDistribution.java,probability,x1,double,0,RET,$ <= 0
PoissonDistribution.java,PoissonDistribution,p,double,0,NotStrictlyPositiveException,$ <= 0
PoissonDistribution.java,probability,x,int,1,DEF,$ < 0
PoissonDistribution.java,probability,x,int,1,DEF,$ == Integer.MAX_VALUE
PoissonDistribution.java,probability,x,int,1,DEF,$ == 0
PoissonDistribution.java,cumulativeProbability,x,int,0,RET,$ < 0
PoissonDistribution.java,cumulativeProbability,x,int,0,RET,$ == Integer.MAX_VALUE
PoissonDistribution.java,nextPoisson,meanPoisson,double,1,RET,$ < pivot
PoissonDistribution.java,nextPoisson,r,double,1,DEF,$ >= p
PoissonDistribution.java,nextPoisson,u,double,1,DEF,$ <= p1
PoissonDistribution.java,nextPoisson,x,double,0,DEF,$ > delta
PoissonDistribution.java,nextPoisson,x,double,0,DEF,$ < -lambda
PoissonDistribution.java,nextPoisson,v,double,0,DEF,$ < -t
PoissonDistribution.java,nextPoisson,a,int,0,DEF,$ == 0
PoissonDistribution.java,nextPoisson,v,double,0,DEF,$ < qa
PoissonDistribution.java,nextPoisson,v,double,0,DEF,$ > qr
BetaDistribution.java,density,x,double,1,RET,$ < 0
BetaDistribution.java,density,x,double,1,RET,$ > 1
BetaDistribution.java,density,x,double,1,NumberIsTooSmallException:RET,$ == 0
BetaDistribution.java,density,alpha,double,0,NumberIsTooSmallException,$ < 1
BetaDistribution.java,density,x,double,1,NumberIsTooSmallException:RET,$ == 1
BetaDistribution.java,density,beta,double,0,NumberIsTooSmallException,$ < 1
BetaDistribution.java,cumulativeProbability,x,double,1,RET,$ <= 0
BetaDistribution.java,cumulativeProbability,x,double,1,RET,$ >= 1
MultivariateNormalMixtureExpectationMaximization.java,MultivariateNormalMixtureExpectationMaximization,data,double[][],0,NotStrictlyPositiveException,$.length < 1
MultivariateNormalMixtureExpectationMaximization.java,MultivariateNormalMixtureExpectationMaximization,data,double[][],0,NumberIsTooSmallException,$[i].length < 2
MultivariateNormalMixtureExpectationMaximization.java,MultivariateNormalMixtureExpectationMaximization,i,int,0,NumberIsTooSmallException,data[$].length < 2
MultivariateNormalMixtureExpectationMaximization.java,fit,maxIterations,int,0,NotStrictlyPositiveException,$ < 1
MultivariateNormalMixtureExpectationMaximization.java,fit,threshold,double,0,NotStrictlyPositiveException,$ < Double.MIN_VALUE
MultivariateNormalMixtureExpectationMaximization.java,fit,numMeanColumns,int,0,DimensionMismatchException,$ != numCols
MultivariateNormalMixtureExpectationMaximization.java,fit,previousLogLikelihood,double,0,ConvergenceException,Math.abs($ - logLikelihood) > threshold
MultivariateNormalMixtureExpectationMaximization.java,fit,logLikelihood,double,0,ConvergenceException,Math.abs(previousLogLikelihood - $) > threshold
MultivariateNormalMixtureExpectationMaximization.java,estimate,data,double[][],0,NotStrictlyPositiveException,$.length < 2
MultivariateNormalMixtureExpectationMaximization.java,estimate,numComponents,int,0,NumberIsTooSmallException,$ < 2
MultivariateNormalMixtureExpectationMaximization.java,estimate,numComponents,int,0,NumberIsTooLargeException,$ > data.length
MultivariateNormalMixtureExpectationMaximization.java,equals,other,null,0,RET,$ instanceof DataRow
UniformIntegerDistribution.java,UniformIntegerDistribution,lower,int,0,NumberIsTooLargeException,$ >= upper
UniformIntegerDistribution.java,probability,x,int,0,RET,$ < lower
UniformIntegerDistribution.java,probability,x,int,0,RET,$ > upper
UniformIntegerDistribution.java,cumulativeProbability,x,int,0,RET,$ < lower
UniformIntegerDistribution.java,cumulativeProbability,x,int,0,RET,$ > upper
KolmogorovSmirnovDistribution.java,KolmogorovSmirnovDistribution,n,int,0,NotStrictlyPositiveException,$ <= 0
KolmogorovSmirnovDistribution.java,cdf,d,double,1,RET,$ <= ninvhalf
KolmogorovSmirnovDistribution.java,cdf,ninvhalf,double,1,RET,$ < d
KolmogorovSmirnovDistribution.java,cdf,d,double,1,RET,$ <= ninv
KolmogorovSmirnovDistribution.java,cdf,ninv,double,1,RET,1 - $ <= d
KolmogorovSmirnovDistribution.java,cdf,d,double,1,RET,$ < 1
KolmogorovSmirnovDistribution.java,createH,hDouble,double,0,NumberIsTooLargeException,$ >= 1
KolmogorovSmirnovDistribution.java,createH,i,int,1,DEF,$ - j + 1 < 0
KolmogorovSmirnovDistribution.java,createH,j,int,1,DEF,i - $ + 1 < 0
KolmogorovSmirnovDistribution.java,createH,h,BigFraction,0,DEF,$.compareTo(BigFraction.ONE_HALF) == 1
KolmogorovSmirnovDistribution.java,createH,i,int,0,DEF,$ - j + 1 > 0
KolmogorovSmirnovDistribution.java,createH,j,int,0,DEF,i - $ + 1 > 0
AbstractMultivariateRealDistribution.java,sample,sampleSize,int,0,NotStrictlyPositiveException,$ <= 0
AbstractRealDistribution.java,probability,x0,double,0,NumberIsTooLargeException,$ > x1
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0.0
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1.0
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 0.0
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 1.0
AbstractRealDistribution.java,inverseCumulativeProbability,lowerBound,double,0,DEF,$ == Double.NEGATIVE_INFINITY
AbstractRealDistribution.java,inverseCumulativeProbability,upperBound,double,0,DEF,$ == Double.POSITIVE_INFINITY
AbstractRealDistribution.java,inverseCumulativeProbability,dx,double,0,RET,cumulativeProbability(x - $) == px
AbstractRealDistribution.java,inverseCumulativeProbability,x,double,0,RET,cumulativeProbability($ - dx) == px
AbstractRealDistribution.java,inverseCumulativeProbability,midPoint,double,1,DEF,cumulativeProbability($) < px
AbstractRealDistribution.java,sample,sampleSize,int,0,NotStrictlyPositiveException,$ <= 0
GammaDistribution.java,GammaDistribution,shape,double,0,NotStrictlyPositiveException,$ <= 0
GammaDistribution.java,GammaDistribution,scale,double,0,NotStrictlyPositiveException,$ <= 0
GammaDistribution.java,density,x,double,0,RET,$ < 0
GammaDistribution.java,density,y,double,0,RET,$ <= minY
GammaDistribution.java,density,y,double,0,RET,FastMath.log($) >= maxLogY
GammaDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0
GammaDistribution.java,sample,shape,double,0,RET,$ < 1
GammaDistribution.java,sample,p,double,1,RET,$ <= 1
GammaDistribution.java,sample,v,double,0,DEF,$ <= 0
PascalDistribution.java,PascalDistribution,r,int,0,NotStrictlyPositiveException,$ <= 0
PascalDistribution.java,PascalDistribution,p,double,0,OutOfRangeException,$ < 0
PascalDistribution.java,PascalDistribution,p,double,0,OutOfRangeException,$ > 1
PascalDistribution.java,probability,x,int,1,DEF,$ < 0
PascalDistribution.java,cumulativeProbability,x,int,1,DEF,$ < 0
UniformRealDistribution.java,UniformRealDistribution,lower,double,0,NumberIsTooLargeException,$ >= upper
UniformRealDistribution.java,density,x,double,0,RET,$ < lower
UniformRealDistribution.java,density,x,double,0,RET,$ > upper
UniformRealDistribution.java,cumulativeProbability,x,double,0,RET,$ <= lower
UniformRealDistribution.java,cumulativeProbability,x,double,0,RET,$ >= upper
UniformRealDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0.0
UniformRealDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1.0
FDistribution.java,FDistribution,numeratorDegreesOfFreedom,double,0,NotStrictlyPositiveException,$ <= 0
FDistribution.java,FDistribution,denominatorDegreesOfFreedom,double,0,NotStrictlyPositiveException,$ <= 0
FDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0
FDistribution.java,getNumericalMean,denominatorDF,double,0,RET,$ > 2
FDistribution.java,calculateNumericalVariance,denominatorDF,double,0,RET,$ > 4
MixtureMultivariateRealDistribution.java,MixtureMultivariateRealDistribution,comp,Pair<Double,T>,0,DimensionMismatchException,$.getSecond().getDimension() != dim
MixtureMultivariateRealDistribution.java,MixtureMultivariateRealDistribution,comp,Pair<Double,T>,0,NotPositiveException,$.getFirst() < 0
MixtureMultivariateRealDistribution.java,sample,randomValue,double,0,DEF,$ <= sum
MixtureMultivariateRealDistribution.java,sample,vals,double[],0,DEF,$ == null
ParetoDistribution.java,ParetoDistribution,scale,double,0,NotStrictlyPositiveException,$ <= 0
ParetoDistribution.java,ParetoDistribution,shape,double,0,NotStrictlyPositiveException,$ <= 0
ParetoDistribution.java,density,x,double,0,RET,$ < scale
ParetoDistribution.java,cumulativeProbability,x,double,0,RET,$ <= scale
ParetoDistribution.java,getNumericalMean,shape,double,0,RET,$ <= 1
ParetoDistribution.java,getNumericalVariance,shape,double,0,RET,$ <= 2
EnumeratedRealDistribution.java,EnumeratedRealDistribution,singletons,double[],0,DimensionMismatchException,$.length != probabilities.length
EnumeratedRealDistribution.java,cumulativeProbability,sample,Pair<Double,Double>,0,DEF,$.getKey() <= x
EnumeratedRealDistribution.java,getSupportLowerBound,sample,Pair<Double,Double>,0,DEF,$.getKey() < min
EnumeratedRealDistribution.java,getSupportLowerBound,sample,Pair<Double,Double>,0,DEF,$.getValue() > 0
EnumeratedRealDistribution.java,getSupportUpperBound,sample,Pair<Double,Double>,0,DEF,$.getKey() > max
EnumeratedRealDistribution.java,getSupportUpperBound,sample,Pair<Double,Double>,0,DEF,$.getValue() > 0
ExponentialDistribution.java,ExponentialDistribution,mean,double,0,NotStrictlyPositiveException,$ <= 0
ExponentialDistribution.java,density,x,double,0,RET,$ < 0
ExponentialDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
ExponentialDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ < 0.0
ExponentialDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ > 1.0
ExponentialDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1.0
ExponentialDistribution.java,sample,u2,double,0,DEF,$ < umin
AbstractIntegerDistribution.java,cumulativeProbability,x1,int,0,NumberIsTooLargeException,$ < x0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 0.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,lower,int,1,RET,$ == Integer.MIN_VALUE
AbstractIntegerDistribution.java,inverseCumulativeProbability,lower,int,0,RET,checkedCumulativeProbability($) >= p
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 1.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,tmp,double,0,DEF,$ > lower
AbstractIntegerDistribution.java,inverseCumulativeProbability,tmp,double,0,DEF,$ < upper
AbstractIntegerDistribution.java,solveInverseCumulativeProbability,xm,int,0,DEF,$ < lower
AbstractIntegerDistribution.java,solveInverseCumulativeProbability,xm,int,0,DEF,$ > upper
AbstractIntegerDistribution.java,solveInverseCumulativeProbability,pm,double,1,DEF,$ >= p
AbstractIntegerDistribution.java,sample,sampleSize,int,0,NotStrictlyPositiveException,$ <= 0
BinomialDistribution.java,BinomialDistribution,trials,int,0,NotPositiveException,$ < 0
BinomialDistribution.java,BinomialDistribution,p,double,0,OutOfRangeException,$ < 0
BinomialDistribution.java,BinomialDistribution,p,double,0,OutOfRangeException,$ > 1
BinomialDistribution.java,probability,x,int,1,DEF,$ < 0
BinomialDistribution.java,probability,x,int,1,DEF,$ > numberOfTrials
BinomialDistribution.java,cumulativeProbability,x,int,1,DEF,$ < 0
BinomialDistribution.java,cumulativeProbability,x,int,1,DEF,$ >= numberOfTrials
SaddlePointExpansion.java,getStirlingError,z,double,1,DEF,$ < 15.0
SaddlePointExpansion.java,getStirlingError,z2,double,1,DEF,FastMath.floor($) == z2
SaddlePointExpansion.java,logBinomialProbability,x,int,1,DEF,$ == 0
SaddlePointExpansion.java,logBinomialProbability,p,double,1,DEF,$ < 0.1
SaddlePointExpansion.java,logBinomialProbability,x,int,1,DEF,$ == n
SaddlePointExpansion.java,logBinomialProbability,q,double,1,DEF,$ < 0.1
LevyDistribution.java,density,x,double,0,RET,$ < mu
LevyDistribution.java,cumulativeProbability,x,double,0,RET,$ < mu
LevyDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0.0
LevyDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1.0
FastFourierTransformer.java,bitReversalShuffle2,i,int,0,DEF,$ < j
FastFourierTransformer.java,normalizeTransformedData,type,TransformType,0,DEF,$ == TransformType.INVERSE
FastFourierTransformer.java,transformInPlace,dataRI,double[][],0,DimensionMismatchException,$.length != 2
FastFourierTransformer.java,transformInPlace,dataR,double[],0,DimensionMismatchException,$.length != dataI.length
FastFourierTransformer.java,transformInPlace,n,int,1,RET,$ == 1
FastFourierTransformer.java,transformInPlace,n,int,0,RET,$ == 2
FastFourierTransformer.java,transformInPlace,type,TransformType,1,DEF,$ == TransformType.INVERSE
FastFourierTransformer.java,transformInPlace,type,TransformType,0,DEF,$ == TransformType.INVERSE
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == dimensionSize.length
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == d
FastFourierTransformer.java,get,vector,int[],0,DimensionMismatchException:RET,$ == null
FastFourierTransformer.java,get,dimensionSize,int[],0,DimensionMismatchException,$.length > 0
FastFourierTransformer.java,get,vector,int[],0,DimensionMismatchException,$.length != dimensionSize.length
FastFourierTransformer.java,set,vector,int[],0,DimensionMismatchException:RET,$ == null
FastFourierTransformer.java,set,dimensionSize,int[],0,DimensionMismatchException,$.length > 0
FastFourierTransformer.java,set,vector,int[],0,DimensionMismatchException,$.length != dimensionSize.length
FastHadamardTransformer.java,transform,type,TransformType,0,RET,$ == TransformType.FORWARD
FastCosineTransformer.java,transform,type,TransformType,0,RET,$ == TransformType.FORWARD
FastCosineTransformer.java,transform,normalization,DctNormalization,0,RET,$ == DctNormalization.ORTHOGONAL_DCT_I
FastCosineTransformer.java,transform,normalization,DctNormalization,1,DEF,$ == DctNormalization.ORTHOGONAL_DCT_I
FastCosineTransformer.java,fct,n,int,0,RET,$ == 1
FastSineTransformer.java,transform,normalization,DstNormalization,0,RET,$ == DstNormalization.ORTHOGONAL_DST_I
FastSineTransformer.java,transform,type,TransformType,0,RET,$ == TransformType.FORWARD
FastSineTransformer.java,fst,f,double[],0,MathIllegalArgumentException,$[0] != 0.0
FastSineTransformer.java,fst,n,int,0,RET,$ == 1
TransformUtils.java,createComplexArray,dataRI,double[][],0,DimensionMismatchException,$.length != 2
TransformUtils.java,createComplexArray,dataR,double[],0,DimensionMismatchException,$.length != dataI.length
TransformUtils.java,exactLog2,index,int,0,MathIllegalArgumentException,$ < 0
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,source.substring($, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,endIndex,int,0,DEF,source.substring(startIndex, $).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,source,String,0,DEF,$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,sb,StringBuilder,0,DEF,source.substring(startIndex, endIndex).compareTo($.toString()) == 0
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,$ == endIndex
CompositeFormat.java,parseNumber,number,Number,0,DEF,$ != null
CompositeFormat.java,parseFixedstring,startIndex,int,0,RET,source.substring($, endIndex).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,endIndex,int,0,RET,source.substring(startIndex, $).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,expected,String,0,RET,source.substring(startIndex, endIndex).compareTo($) != 0
CompositeFormat.java,parseFixedstring,source,String,0,RET,$.substring(startIndex, endIndex).compareTo(expected) != 0
BigReal.java,equals,other,null,0,RET,$ instanceof BigReal
ResizableDoubleArray.java,ResizableDoubleArray,initialCapacity,int,0,NotStrictlyPositiveException,$ <= 0
ResizableDoubleArray.java,ResizableDoubleArray,data,double[],0,DEF,$ != null
ResizableDoubleArray.java,addElementRolling,startIndex,int,0,DEF,($ + (numElements + 1)) > internalArray.length
ResizableDoubleArray.java,addElementRolling,numElements,int,0,DEF,(startIndex + ($ + 1)) > internalArray.length
ResizableDoubleArray.java,substituteMostRecentElement,numElements,int,0,MathIllegalStateException,$ < 1
ResizableDoubleArray.java,checkContractExpand,contraction,double,0,DEF,$ < expansion
ResizableDoubleArray.java,checkContractExpand,contraction,double,0,DEF,$ <= 1
ResizableDoubleArray.java,checkContractExpand,expansion,double,0,DEF,$ <= 1
ResizableDoubleArray.java,discardExtremeElements,i,int,1,MathIllegalArgumentException,$ > numElements
ResizableDoubleArray.java,discardExtremeElements,i,int,1,MathIllegalArgumentException,$ < 0
ResizableDoubleArray.java,expand,expansionMode,ExpansionMode,1,DEF,$ == ExpansionMode.MULTIPLICATIVE
ResizableDoubleArray.java,getElement,index,int,1,ArrayIndexOutOfBoundsException,$ >= numElements
ResizableDoubleArray.java,getElement,index,int,1,RET,$ >= 0
ResizableDoubleArray.java,setElement,index,int,0,ArrayIndexOutOfBoundsException,$ < 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ + 1 > numElements
ResizableDoubleArray.java,setElement,startIndex,int,0,DEF,($ + index) >= internalArray.length
ResizableDoubleArray.java,setElement,index,int,0,DEF,(startIndex + $) >= internalArray.length
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,MathIllegalArgumentException,$ != MULTIPLICATIVE_MODE
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,MathIllegalArgumentException,$ != ADDITIVE_MODE
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,1,DEF,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,DEF,$ == ADDITIVE_MODE
ResizableDoubleArray.java,setNumElements,i,int,0,MathIllegalArgumentException,$ < 0
ResizableDoubleArray.java,setNumElements,newSize,int,0,DEF,$ > internalArray.length
ResizableDoubleArray.java,shouldContract,expansionMode,ExpansionMode,1,RET,$ == ExpansionMode.MULTIPLICATIVE
ResizableDoubleArray.java,equals,object,Object,0,RET,$ instanceof ResizableDoubleArray == false
ResizableDoubleArray.java,equals,object,null,0,RET,$ instanceof ResizableDoubleArray
OpenIntToFieldHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToFieldHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToFieldHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToFieldHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToFieldHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToFieldHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToFieldHashMap.java,key,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToFieldHashMap.java,key,current,int,0,NoSuchElementException,$ < 0
OpenIntToFieldHashMap.java,value,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToFieldHashMap.java,value,current,int,0,NoSuchElementException,$ < 0
OpenIntToFieldHashMap.java,advance,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToFieldHashMap.java,advance,current,int,0,NoSuchElementException,$ < 0
FastMathCalc.java,buildSinCosTables,i,int,1,DEF,($ & 1) == 0
FastMathCalc.java,slowCos,i,int,0,DEF,($ & 1) != 0
FastMathCalc.java,slowCos,i,int,0,DEF,($ & 2) != 0
FastMathCalc.java,slowCos,result,double[],0,DEF,$ != null
FastMathCalc.java,slowSin,i,int,0,DEF,($ & 1) == 0
FastMathCalc.java,slowSin,i,int,0,DEF,($ & 2) != 0
FastMathCalc.java,slowSin,result,double[],0,DEF,$ != null
FastMathCalc.java,slowexp,result,double[],0,DEF,$ != null
FastMathCalc.java,split,d,double,1,DEF,$ < 8e298
FastMathCalc.java,split,d,double,1,DEF,$ > -8e298
FastMathCalc.java,resplit,c,double,1,DEF,$ < 8e298
FastMathCalc.java,resplit,c,double,1,DEF,$ > -8e298
FastMathCalc.java,splitReciprocal,in,double[],0,DEF,$[0] == 0.0
FastMathCalc.java,expint,p,int,0,DEF,($ & 1) != 0
FastMathCalc.java,expint,result,double[],0,DEF,$ != null
FastMathCalc.java,format,d,double,1,RET,$ != d
FastMathCalc.java,checkLen,expectedLen,int,0,DimensionMismatchException,$ != actual
Precision.java,compareTo,x,double,0,RET,$ < y
Precision.java,compareTo,x,double,0,RET,$ < y
Precision.java,equals,xInt,int,0,DEF,$ < 0
Precision.java,equals,yInt,int,0,DEF,$ < 0
Precision.java,equals,xInt,long,0,DEF,$ < 0
Precision.java,equals,yInt,long,0,DEF,$ < 0
Precision.java,roundUnscaled,sign,double,1,DEF,$ == -1
Precision.java,roundUnscaled,sign,double,1,DEF,$ == -1
Precision.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
Precision.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
Precision.java,roundUnscaled,fraction,double,1,DEF,$ < 0.5
Precision.java,roundUnscaled,fraction,double,1,DEF,$ >= 0.5
ContinuedFraction.java,evaluate,deltaN,double,0,DEF,FastMath.abs($ - 1.0) < epsilon
ContinuedFraction.java,evaluate,n,int,0,MaxCountExceededException,$ >= maxIterations
MathUtils.java,copySign,magnitude,byte,1,RET,$ >= 0
MathUtils.java,copySign,sign,byte,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,byte,1,RET,$ < 0
MathUtils.java,copySign,sign,byte,1,RET,$ < 0
MathUtils.java,copySign,sign,byte,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,byte,1,MathArithmeticException,$ == Byte.MIN_VALUE
MathUtils.java,copySign,magnitude,short,1,RET,$ >= 0
MathUtils.java,copySign,sign,short,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,short,1,RET,$ < 0
MathUtils.java,copySign,sign,short,1,RET,$ < 0
MathUtils.java,copySign,sign,short,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,short,1,MathArithmeticException,$ == Short.MIN_VALUE
MathUtils.java,copySign,magnitude,int,1,RET,$ >= 0
MathUtils.java,copySign,sign,int,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,int,1,RET,$ < 0
MathUtils.java,copySign,sign,int,1,RET,$ < 0
MathUtils.java,copySign,sign,int,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,int,1,MathArithmeticException,$ == Integer.MIN_VALUE
MathUtils.java,copySign,magnitude,long,1,RET,$ >= 0
MathUtils.java,copySign,sign,long,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,long,1,RET,$ < 0
MathUtils.java,copySign,sign,long,1,RET,$ < 0
MathUtils.java,copySign,sign,long,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,long,1,MathArithmeticException,$ == Long.MIN_VALUE
MathUtils.java,checkNotNull,o,Object,0,NullArgumentException,$ == null
MathUtils.java,checkNotNull,o,Object,0,NullArgumentException,$ == null
MathArrays.java,ebeAdd,a,double[],0,DimensionMismatchException,$.length != b.length
MathArrays.java,ebeSubtract,a,double[],0,DimensionMismatchException,$.length != b.length
MathArrays.java,ebeMultiply,a,double[],0,DimensionMismatchException,$.length != b.length
MathArrays.java,ebeDivide,a,double[],0,DimensionMismatchException,$.length != b.length
MathArrays.java,isMonotonic,comp,int,0,RET,$ >= 0
MathArrays.java,isMonotonic,comp,int,0,RET,$ > 0
MathArrays.java,isMonotonic,comp,int,0,RET,$ >= 0
MathArrays.java,isMonotonic,comp,int,0,RET,$ > 0
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] <= previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] <= previous
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] < previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] < previous
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] >= previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] >= previous
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] > previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] > previous
MathArrays.java,checkOrder,index,int,0,RET,$ == max
MathArrays.java,checkPositive,in,double[],0,NotStrictlyPositiveException,$[i] <= 0
MathArrays.java,checkPositive,i,int,0,NotStrictlyPositiveException,in[$] <= 0
MathArrays.java,checkNonNegative,in,long[],0,NotPositiveException,$[i] < 0
MathArrays.java,checkNonNegative,i,int,0,NotPositiveException,in[$] < 0
MathArrays.java,checkNonNegative,in,long[][],0,NotPositiveException,$[i][j] < 0
MathArrays.java,checkNonNegative,i,int,0,NotPositiveException,in[$][j] < 0
MathArrays.java,checkNonNegative,j,int,0,NotPositiveException,in[i][$] < 0
MathArrays.java,safeNorm,xabs,double,1,DEF,$ < rdwarf
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > agiant
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > rdwarf
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > x1max
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > x3max
MathArrays.java,safeNorm,xabs,double,0,DEF,$ != 0
MathArrays.java,safeNorm,s1,double,1,DEF,$ != 0
MathArrays.java,safeNorm,s2,double,1,DEF,$ == 0
MathArrays.java,safeNorm,s2,double,1,DEF,$ >= x3max
MathArrays.java,sortInPlace,x,double[],0,NullArgumentException,$ == null
MathArrays.java,sortInPlace,y,double[],0,NullArgumentException,$ == null
MathArrays.java,sortInPlace,y,double[],0,DimensionMismatchException,$.length != len
MathArrays.java,linearCombination,len,int,0,DimensionMismatchException,$ != b.length
MathArrays.java,equals,x,float[],0,RET,$ == null
MathArrays.java,equals,y,float[],0,RET,$ == null
MathArrays.java,equals,x,float[],0,RET,$.length != y.length
MathArrays.java,equalsIncludingNaN,x,float[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,y,float[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,x,float[],0,RET,$.length != y.length
MathArrays.java,equals,x,double[],0,RET,$ == null
MathArrays.java,equals,y,double[],0,RET,$ == null
MathArrays.java,equals,x,double[],0,RET,$.length != y.length
MathArrays.java,equalsIncludingNaN,x,double[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,y,double[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,x,double[],0,RET,$.length != y.length
MathArrays.java,normalizeArray,sum,double,0,MathArithmeticException,$ == 0
MathArrays.java,buildArray,columns,int,1,DEF,$ < 0
MathArrays.java,convolve,xLen,int,0,NoDataException,$ == 0
MathArrays.java,convolve,hLen,int,0,NoDataException,$ == 0
DefaultTransformer.java,transform,o,Object,0,NullArgumentException,$ == null
DefaultTransformer.java,transform,o,null,0,RET,$ instanceof Number
MultidimensionalCounter.java,MultidimensionalCounter,tS,int,0,NotStrictlyPositiveException,$ <= 0
MultidimensionalCounter.java,getCounts,index,int,0,OutOfRangeException,$ < 0
MultidimensionalCounter.java,getCounts,index,int,0,OutOfRangeException,$ >= totalSize
MultidimensionalCounter.java,getCount,c,int[],0,DimensionMismatchException,$.length != dimension
MultidimensionalCounter.java,getCount,index,int,0,OutOfRangeException,$ < 0
Decimal64.java,equals,obj,null,0,RET,$ instanceof Decimal64
Decimal64.java,rootN,value,double,1,RET,$ < 0
Decimal64.java,linearCombination,a,Decimal64[],0,DimensionMismatchException,$.length != b.length
Decimal64.java,linearCombination,a,double[],0,DimensionMismatchException,$.length != b.length
Incrementor.java,Incrementor,cb,MaxCountExceededCallback,0,NullArgumentException,$ == null
Incrementor.java,incrementCount,count,int,0,DEF,++$ > maximalCount
FastMath.java,doubleHighPart,d,double,0,RET,$ > -Precision.SAFE_MIN
FastMath.java,doubleHighPart,d,double,0,RET,$ < Precision.SAFE_MIN
FastMath.java,cosh,x,double,0,RET,$ != x
FastMath.java,cosh,x,double,1,RET,$ > 20
FastMath.java,cosh,x,double,1,RET,$ >= LOG_MAX_VALUE
FastMath.java,cosh,x,double,0,RET,$ < -20
FastMath.java,cosh,x,double,1,RET,$ <= -LOG_MAX_VALUE
FastMath.java,cosh,x,double,0,DEF,$ < 0.0
FastMath.java,sinh,x,double,0,RET,$ != x
FastMath.java,sinh,x,double,1,RET,$ > 20
FastMath.java,sinh,x,double,1,RET,$ >= LOG_MAX_VALUE
FastMath.java,sinh,x,double,0,RET,$ < -20
FastMath.java,sinh,x,double,1,RET,$ <= -LOG_MAX_VALUE
FastMath.java,sinh,x,double,0,RET,$ == 0
FastMath.java,sinh,x,double,0,DEF,$ < 0.0
FastMath.java,sinh,x,double,1,DEF,$ > 0.25
FastMath.java,tanh,x,double,0,RET,$ != x
FastMath.java,tanh,x,double,0,RET,$ > 20.0
FastMath.java,tanh,x,double,0,RET,$ < -20
FastMath.java,tanh,x,double,0,RET,$ == 0
FastMath.java,tanh,x,double,0,DEF,$ < 0.0
FastMath.java,tanh,x,double,1,DEF,$ >= 0.5
FastMath.java,asinh,a,double,0,DEF,$ < 0
FastMath.java,asinh,a,double,1,DEF,$ > 0.167
FastMath.java,asinh,a,double,1,DEF,$ > 0.097
FastMath.java,asinh,a,double,1,DEF,$ > 0.036
FastMath.java,asinh,a,double,1,DEF,$ > 0.0036
FastMath.java,atanh,a,double,0,DEF,$ < 0
FastMath.java,atanh,a,double,1,DEF,$ > 0.15
FastMath.java,atanh,a,double,1,DEF,$ > 0.087
FastMath.java,atanh,a,double,1,DEF,$ > 0.031
FastMath.java,atanh,a,double,1,DEF,$ > 0.003
FastMath.java,exp,x,double,1,RET,$ < 0.0
FastMath.java,exp,intVal,int,0,RET,$ > 746
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,intVal,int,0,RET,$ > 709
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,intVal,int,0,RET,$ == 709
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,intVal,int,0,RET,$ > 709
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,extra,double,1,DEF,$ != 0.0
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,expm1,x,double,0,RET,$ != x
FastMath.java,expm1,x,double,0,RET,$ == 0.0
FastMath.java,expm1,x,double,0,RET,$ <= -1.0
FastMath.java,expm1,x,double,0,RET,$ >= 1.0
FastMath.java,expm1,x,double,1,RET,$ > 0.0
FastMath.java,expm1,x,double,0,DEF,$ < 0.0
FastMath.java,expm1,hiPrecOut,double[],0,DEF,$ != null
FastMath.java,log,x,double,0,RET,$==0
FastMath.java,log,bits,long,0,RET,($ & 0x8000000000000000L) != 0
FastMath.java,log,x,double,0,RET,$ != x
FastMath.java,log,x,double,0,RET,$ != 0.0
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log,bits,long,0,RET,($ & 0x7ff0000000000000L) == 0
FastMath.java,log,x,double,0,RET,$ == 0
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log,exp,int,0,RET,$ == -1
FastMath.java,log,exp,int,0,RET,$ == 0
FastMath.java,log,x,double,0,RET,$ < 1.01
FastMath.java,log,x,double,0,RET,$ > 0.99
FastMath.java,log,hiPrec,double[],0,RET,$ == null
FastMath.java,log,hiPrec,double[],1,DEF,$ != null
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log1p,x,double,0,RET,$ == -1
FastMath.java,log1p,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,log1p,x,double,1,RET,$ > 1e-6
FastMath.java,log1p,x,double,1,RET,$ < -1e-6
FastMath.java,pow,y,double,0,RET,$ == 0.0
FastMath.java,pow,x,double,0,RET,$ != x
FastMath.java,pow,x,double,0,RET,$ == 0
FastMath.java,pow,bits,long,0,RET,($ & 0x8000000000000000L) != 0
FastMath.java,pow,y,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ > 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ > 0
FastMath.java,pow,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,pow,y,double,0,RET,$ != y
FastMath.java,pow,y,double,1,RET,$ < 0.0
FastMath.java,pow,y,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,pow,x,double,0,RET,$ * $ == 1.0
FastMath.java,pow,x,double,1,RET,$ * $ > 1.0
FastMath.java,pow,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,pow,y,double,0,RET,$ != y
FastMath.java,pow,y,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ > 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,pow,x,double,0,RET,$ * $ == 1.0
FastMath.java,pow,x,double,1,RET,$ * $ < 1.0
FastMath.java,pow,x,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ >= TWO_POWER_53
FastMath.java,pow,y,double,0,RET,$ <= -TWO_POWER_53
FastMath.java,pow,y,double,1,RET,$ == (long) y
FastMath.java,pow,y,double,1,DEF,$ < 8e298
FastMath.java,pow,y,double,1,DEF,$ > -8e298
FastMath.java,pow,e,int,1,RET,$ == 0
FastMath.java,pow,e,int,0,DEF,$ < 0
FastMath.java,pow,e,int,0,DEF,($ & 0x1) != 0
FastMath.java,sinQ,xb,double,0,DEF,$ != 0.0
FastMath.java,tanQ,xb,double,0,DEF,$ != 0.0
FastMath.java,reducePayneHanek,shift,int,1,DEF,$ != 0
FastMath.java,sin,x,double,0,DEF,$ < 0
FastMath.java,sin,xa,double,0,RET,$ == 0.0
FastMath.java,sin,bits,long,0,RET,$ < 0
FastMath.java,sin,xa,double,0,RET,$ != xa
FastMath.java,sin,xa,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,sin,xa,double,1,DEF,$ > 3294198.0
FastMath.java,sin,xa,double,0,DEF,$ > 1.5707963267948966
FastMath.java,cos,x,double,0,DEF,$ < 0
FastMath.java,cos,xa,double,0,RET,$ != xa
FastMath.java,cos,xa,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,cos,xa,double,1,DEF,$ > 3294198.0
FastMath.java,cos,xa,double,0,DEF,$ > 1.5707963267948966
FastMath.java,tan,x,double,0,DEF,$ < 0
FastMath.java,tan,xa,double,0,RET,$ == 0.0
FastMath.java,tan,bits,long,0,RET,$ < 0
FastMath.java,tan,xa,double,0,RET,$ != xa
FastMath.java,tan,xa,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,tan,xa,double,1,DEF,$ > 3294198.0
FastMath.java,tan,xa,double,0,DEF,$ > 1.5707963267948966
FastMath.java,tan,xa,double,0,DEF,$ > 1.5
FastMath.java,tan,quadrant,int,1,DEF,($ & 1) == 0
FastMath.java,atan,xa,double,0,RET,$ == 0.0
FastMath.java,atan,xa,double,0,DEF,$ < 0
FastMath.java,atan,xa,double,0,RET,$ > 1.633123935319537E16
FastMath.java,atan,xa,double,1,DEF,$ < 1
FastMath.java,atan,idx,int,1,DEF,$ == 0
FastMath.java,atan2,x,double,0,RET,$ != x
FastMath.java,atan2,y,double,0,RET,$ != y
FastMath.java,atan2,y,double,0,RET,$ == 0
FastMath.java,atan2,invx,double,0,RET,$ == 0
FastMath.java,atan2,x,double,1,RET,$ > 0
FastMath.java,atan2,x,double,1,RET,$ < 0
FastMath.java,atan2,invx,double,1,RET,$ < 0
FastMath.java,atan2,y,double,1,RET,$ < 0
FastMath.java,atan2,invy,double,1,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,y,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,y,double,0,RET,$ > 0
FastMath.java,atan2,y,double,0,RET,1 / $ > 0
FastMath.java,atan2,y,double,0,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,1 / $ < 0
FastMath.java,atan2,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,y,double,0,RET,$ > 0.0
FastMath.java,atan2,y,double,0,RET,1 / $ > 0.0
FastMath.java,atan2,y,double,0,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,1 / $ < 0
FastMath.java,atan2,x,double,0,RET,$ == 0
FastMath.java,atan2,y,double,0,RET,$ > 0
FastMath.java,atan2,y,double,0,RET,1 / $ > 0
FastMath.java,atan2,y,double,0,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,1 / $ < 0
FastMath.java,atan2,ra,double,0,DEF,$ == 0
FastMath.java,asin,x,double,0,RET,$ != x
FastMath.java,asin,x,double,0,RET,$ > 1.0
FastMath.java,asin,x,double,0,RET,$ < -1.0
FastMath.java,asin,x,double,0,RET,$ == 1.0
FastMath.java,asin,x,double,0,RET,$ == -1.0
FastMath.java,asin,x,double,0,RET,$ == 0.0
FastMath.java,acos,x,double,0,RET,$ != x
FastMath.java,acos,x,double,0,RET,$ > 1.0
FastMath.java,acos,x,double,0,RET,$ < -1.0
FastMath.java,acos,x,double,0,RET,$ == -1.0
FastMath.java,acos,x,double,0,RET,$ == 1.0
FastMath.java,acos,x,double,0,RET,$ == 0
FastMath.java,cbrt,exponent,int,0,RET,$ == -1023
FastMath.java,cbrt,x,double,0,RET,$ == 0
FastMath.java,cbrt,exponent,int,0,RET,$ == 1024
FastMath.java,toRadians,x,double,0,RET,$ == 0.0
FastMath.java,toRadians,result,double,0,DEF,$ == 0
FastMath.java,toDegrees,x,double,0,RET,$ == 0.0
FastMath.java,scalb,n,int,0,RET,$ > -1023
FastMath.java,scalb,n,int,0,RET,$ < 1024
FastMath.java,scalb,d,double,0,RET,$ == 0
FastMath.java,scalb,n,int,0,RET,$ < -2098
FastMath.java,scalb,n,int,0,RET,$ > 2097
FastMath.java,scalb,n,int,1,RET,$ < 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > -53
FastMath.java,scalb,mostSignificantLostBit,long,0,DEF,$ != 0
FastMath.java,scalb,exponent,int,1,RET,$ == 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 2047
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 2047
FastMath.java,scalb,n,int,0,RET,$ > -127
FastMath.java,scalb,n,int,0,RET,$ < 128
FastMath.java,scalb,f,float,0,RET,$ == 0f
FastMath.java,scalb,n,int,0,RET,$ < -277
FastMath.java,scalb,n,int,0,RET,$ > 276
FastMath.java,scalb,n,int,1,RET,$ < 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > -24
FastMath.java,scalb,mostSignificantLostBit,int,0,DEF,$ != 0
FastMath.java,scalb,exponent,int,1,RET,$ == 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 255
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 255
FastMath.java,nextAfter,d,double,1,RET,$ == direction
FastMath.java,nextAfter,d,double,0,RET,$ == 0
FastMath.java,nextAfter,direction,double,1,RET,$ < d
FastMath.java,nextAfter,sign,long,1,RET,$ == 0L
FastMath.java,nextAfter,f,float,1,RET,$ == direction
FastMath.java,nextAfter,f,float,0,RET,$ == 0f
FastMath.java,nextAfter,direction,double,1,RET,$ < f
FastMath.java,nextAfter,sign,int,1,RET,$ == 0
FastMath.java,floor,x,double,0,RET,$ != x
FastMath.java,floor,x,double,0,RET,$ >= TWO_POWER_52
FastMath.java,floor,x,double,0,RET,$ <= -TWO_POWER_52
FastMath.java,floor,x,double,0,DEF,$ < 0
FastMath.java,floor,y,long,0,DEF,$ != x
FastMath.java,floor,y,long,0,RET,$ == 0
FastMath.java,ceil,x,double,0,RET,$ != x
FastMath.java,ceil,y,double,0,RET,$ == x
FastMath.java,ceil,y,double,0,RET,$ == 0
FastMath.java,rint,d,double,0,RET,$ > 0.5
FastMath.java,rint,y,double,0,RET,$ == -1.0
FastMath.java,rint,d,double,0,RET,$ < 0.5
FastMath.java,min,a,float,0,RET,$ > b
FastMath.java,min,a,float,0,RET,$ < b
FastMath.java,min,a,float,0,RET,$ != b
FastMath.java,min,bits,int,0,RET,$ == 0x80000000
FastMath.java,min,a,double,0,RET,$ > b
FastMath.java,min,a,double,0,RET,$ < b
FastMath.java,min,a,double,0,RET,$ != b
FastMath.java,min,bits,long,0,RET,$ == 0x8000000000000000L
FastMath.java,max,a,float,0,RET,$ > b
FastMath.java,max,a,float,0,RET,$ < b
FastMath.java,max,a,float,0,RET,$ != b
FastMath.java,max,bits,int,0,RET,$ == 0x80000000
FastMath.java,max,a,double,0,RET,$ > b
FastMath.java,max,a,double,0,RET,$ < b
FastMath.java,max,a,double,0,RET,$ != b
FastMath.java,max,bits,long,0,RET,$ == 0x8000000000000000L
FastMath.java,copySign,s,long,0,RET,(m^$) >= 0
FastMath.java,copySign,m,long,0,RET,($^s) >= 0
FastMath.java,copySign,s,int,0,RET,(m^$) >= 0
FastMath.java,copySign,m,int,0,RET,($^s) >= 0
FastMath.java,null,i,int,0,DEF,$ != 0
FastMath.java,CodyWaite,remA,double,0,DEF,$ > 0
TransformerMap.java,transform,o,null,1,DEF,$ instanceof Number
TransformerMap.java,transform,o,null,1,DEF,$ instanceof String
TransformerMap.java,transform,trans,NumberTransformer,0,DEF,$ != null
TransformerMap.java,equals,other,null,0,RET,$ instanceof TransformerMap
Pair.java,equals,o,null,1,RET,$ instanceof Pair
OpenIntToDoubleHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToDoubleHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToDoubleHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToDoubleHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToDoubleHashMap.java,key,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToDoubleHashMap.java,key,current,int,0,NoSuchElementException,$ < 0
OpenIntToDoubleHashMap.java,value,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToDoubleHashMap.java,value,current,int,0,NoSuchElementException,$ < 0
OpenIntToDoubleHashMap.java,advance,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToDoubleHashMap.java,advance,current,int,0,NoSuchElementException,$ < 0
ArithmeticUtils.java,addAndCheck,s,long,0,MathArithmeticException,$ < Integer.MIN_VALUE
ArithmeticUtils.java,addAndCheck,s,long,0,MathArithmeticException,$ > Integer.MAX_VALUE
ArithmeticUtils.java,binomialCoefficient,n,int,0,RET,$ == k
ArithmeticUtils.java,binomialCoefficient,k,int,0,RET,$ == 0
ArithmeticUtils.java,binomialCoefficient,k,int,0,RET,$ == 1
ArithmeticUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 61
ArithmeticUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 66
ArithmeticUtils.java,binomialCoefficientDouble,n,int,0,RET,$ == k
ArithmeticUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 0
ArithmeticUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 1
ArithmeticUtils.java,binomialCoefficientDouble,n,int,0,RET,$ < 67
ArithmeticUtils.java,binomialCoefficientLog,n,int,0,RET,$ == k
ArithmeticUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 0
ArithmeticUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 1
ArithmeticUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 67
ArithmeticUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 1030
ArithmeticUtils.java,factorial,n,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,factorial,n,int,0,MathArithmeticException,$ > 20
ArithmeticUtils.java,factorialDouble,n,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,factorialDouble,n,int,0,RET,$ < 21
ArithmeticUtils.java,factorialLog,n,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,factorialLog,n,int,0,RET,$ < 21
ArithmeticUtils.java,gcd,a,int,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,b,int,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,a,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
ArithmeticUtils.java,gcd,b,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
ArithmeticUtils.java,gcd,a,int,0,DEF,$ < 0
ArithmeticUtils.java,gcd,b,int,0,DEF,$ < 0
ArithmeticUtils.java,gcd,al,long,0,MathArithmeticException,$ == bl
ArithmeticUtils.java,gcd,al,long,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,bl,long,0,MathArithmeticException,$ > Integer.MAX_VALUE
ArithmeticUtils.java,gcdPositive,a,int,1,RET,$ == 0
ArithmeticUtils.java,gcdPositive,b,int,0,RET,$ == 0
ArithmeticUtils.java,gcd,u,long,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,v,long,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,u,long,0,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,gcd,v,long,0,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,gcd,u,long,0,DEF,$ > 0
ArithmeticUtils.java,gcd,v,long,0,DEF,$ > 0
ArithmeticUtils.java,gcd,k,int,0,MathArithmeticException,$ == 63
ArithmeticUtils.java,gcd,t,long,1,DEF,$ > 0
ArithmeticUtils.java,lcm,a,int,0,RET,$ == 0
ArithmeticUtils.java,lcm,b,int,0,RET,$ == 0
ArithmeticUtils.java,lcm,lcm,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
ArithmeticUtils.java,lcm,a,long,0,RET,$ == 0
ArithmeticUtils.java,lcm,b,long,0,RET,$ == 0
ArithmeticUtils.java,lcm,lcm,long,0,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,mulAndCheck,m,long,0,MathArithmeticException,$ < Integer.MIN_VALUE
ArithmeticUtils.java,mulAndCheck,m,long,0,MathArithmeticException,$ > Integer.MAX_VALUE
ArithmeticUtils.java,mulAndCheck,a,long,1,DEF,$ > b
ArithmeticUtils.java,mulAndCheck,a,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,mulAndCheck,b,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,mulAndCheck,b,long,1,MathArithmeticException,$ > 0
ArithmeticUtils.java,mulAndCheck,b,long,1,DEF,Long.MIN_VALUE / $ <= a
ArithmeticUtils.java,mulAndCheck,a,long,1,MathArithmeticException,$ > 0
ArithmeticUtils.java,subAndCheck,s,long,0,MathArithmeticException,$ < Integer.MIN_VALUE
ArithmeticUtils.java,subAndCheck,s,long,0,MathArithmeticException,$ > Integer.MAX_VALUE
ArithmeticUtils.java,subAndCheck,b,long,1,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,subAndCheck,a,long,1,DEF,$ < 0
ArithmeticUtils.java,pow,e,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,long,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,long,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,BigInteger,0,NotPositiveException,$.compareTo(BigInteger.ZERO) < 0
ArithmeticUtils.java,stirlingS2,k,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,stirlingS2,k,int,0,NumberIsTooLargeException,$ > n
ArithmeticUtils.java,stirlingS2,stirlingS2,long[][],0,DEF,$ == null
ArithmeticUtils.java,stirlingS2,n,int,1,RET,$ < stirlingS2.length
ArithmeticUtils.java,stirlingS2,k,int,1,RET,$ == 0
ArithmeticUtils.java,stirlingS2,k,int,1,RET,$ == 1
ArithmeticUtils.java,stirlingS2,k,int,1,RET,$ == n
ArithmeticUtils.java,stirlingS2,k,int,1,RET,$ == 2
ArithmeticUtils.java,stirlingS2,sum,long,0,MathArithmeticException,$ < 0
ArithmeticUtils.java,addAndCheck,a,long,1,DEF,$ > b
ArithmeticUtils.java,addAndCheck,a,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,addAndCheck,b,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,addAndCheck,b,long,1,DEF,Long.MIN_VALUE - $ <= a
ArithmeticUtils.java,checkBinomial,n,int,0,NumberIsTooLargeException,$ < k
ArithmeticUtils.java,checkBinomial,n,int,0,NotPositiveException,$ < 0
BigFraction.java,BigFraction,gcd,BigInteger,0,DEF,BigInteger.ONE.compareTo($) < 0
BigFraction.java,BigFraction,den,BigInteger,0,DEF,BigInteger.ZERO.compareTo($) > 0
BigFraction.java,BigFraction,exponent,long,0,DEF,$ != 0
BigFraction.java,BigFraction,sign,long,0,DEF,$ != 0
BigFraction.java,BigFraction,k,int,1,DEF,$ < 0
BigFraction.java,BigFraction,a0,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,value,double,0,RET,FastMath.abs(a0 - $) < epsilon
BigFraction.java,BigFraction,a0,long,0,RET,FastMath.abs($ - value) < epsilon
BigFraction.java,BigFraction,p2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,q2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,n,int,1,DEF,$ < maxIterations
BigFraction.java,BigFraction,convergent,double,1,DEF,FastMath.abs($ - value) > epsilon
BigFraction.java,BigFraction,value,double,1,DEF,FastMath.abs(convergent - $) > epsilon
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,BigFraction,n,int,0,FractionConversionException,$ >= maxIterations
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,getReducedFraction,numerator,int,0,RET,$ == 0
BigFraction.java,add,fraction,BigFraction,0,NullArgumentException,$ == null
BigFraction.java,divide,bg,BigInteger,0,NullArgumentException,$ == null
BigFraction.java,divide,fraction,BigFraction,0,NullArgumentException,$ == null
BigFraction.java,equals,other,null,0,DEF,$ instanceof BigFraction
BigFraction.java,multiply,bg,BigInteger,0,NullArgumentException,$ == null
BigFraction.java,multiply,fraction,BigFraction,0,NullArgumentException,$ == null
BigFraction.java,pow,exponent,int,0,RET,$ < 0
BigFraction.java,pow,exponent,long,0,RET,$ < 0
BigFraction.java,pow,exponent,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
BigFraction.java,subtract,bg,BigInteger,0,NullArgumentException,$ == null
BigFraction.java,subtract,fraction,BigFraction,0,NullArgumentException,$ == null
Fraction.java,Fraction,a0,long,0,FractionConversionException,FastMath.abs($) > overflow
Fraction.java,Fraction,value,double,0,RET,FastMath.abs(a0 - $) < epsilon
Fraction.java,Fraction,a0,long,0,RET,FastMath.abs($ - value) < epsilon
Fraction.java,Fraction,p2,long,0,FractionConversionException,FastMath.abs($) > overflow
Fraction.java,Fraction,q2,long,0,FractionConversionException,FastMath.abs($) > overflow
Fraction.java,Fraction,n,int,1,DEF,$ < maxIterations
Fraction.java,Fraction,convergent,double,1,DEF,FastMath.abs($ - value) > epsilon
Fraction.java,Fraction,value,double,1,DEF,FastMath.abs(convergent - $) > epsilon
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,n,int,0,FractionConversionException,$ >= maxIterations
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,den,int,0,MathArithmeticException,$ == 0
Fraction.java,Fraction,den,int,0,MathArithmeticException,$ < 0
Fraction.java,Fraction,num,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
Fraction.java,Fraction,den,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
Fraction.java,Fraction,d,int,0,DEF,$ > 1
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,abs,numerator,int,1,DEF,$ >= 0
Fraction.java,equals,other,null,0,RET,$ instanceof Fraction
Fraction.java,negate,numerator,int,0,MathArithmeticException,$==Integer.MIN_VALUE
Fraction.java,addSub,fraction,Fraction,0,NullArgumentException,$ == null
Fraction.java,addSub,numerator,int,0,RET,$ == 0
Fraction.java,addSub,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,addSub,d1,int,0,RET,$==1
Fraction.java,addSub,w,BigInteger,0,MathArithmeticException,$.bitLength() > 31
Fraction.java,multiply,fraction,Fraction,0,NullArgumentException,$ == null
Fraction.java,multiply,numerator,int,0,RET,$ == 0
Fraction.java,multiply,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,divide,fraction,Fraction,0,NullArgumentException,$ == null
Fraction.java,divide,fraction,Fraction,0,MathArithmeticException,$.numerator == 0
Fraction.java,getReducedFraction,denominator,int,0,MathArithmeticException,$ == 0
Fraction.java,getReducedFraction,numerator,int,0,RET,$==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,numerator,int,0,DEF,($&1)==0
Fraction.java,getReducedFraction,denominator,int,0,MathArithmeticException,$ < 0
Fraction.java,getReducedFraction,numerator,int,0,MathArithmeticException,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,denominator,int,0,MathArithmeticException,$==Integer.MIN_VALUE
Fraction.java,toString,denominator,int,1,DEF,$ == 1
Fraction.java,toString,numerator,int,1,DEF,$ == 0
AbstractFormat.java,setDenominatorFormat,format,NumberFormat,0,NullArgumentException,$ == null
AbstractFormat.java,setNumeratorFormat,format,NumberFormat,0,NullArgumentException,$ == null
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
ProperBigFractionFormat.java,format,num,BigInteger,0,DEF,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,ret,BigFraction,0,RET,$ != null
ProperBigFractionFormat.java,parse,whole,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,setWholeFormat,format,NumberFormat,0,NullArgumentException,$ == null
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Fraction
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
FractionFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
FractionFormat.java,parse,num,Number,0,RET,$ == null
FractionFormat.java,parse,den,Number,0,RET,$ == null
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigFraction
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigInteger
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
BigFractionFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
BigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
BigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperFractionFormat.java,format,whole,int,0,DEF,$ != 0
ProperFractionFormat.java,parse,ret,Fraction,0,RET,$ != null
ProperFractionFormat.java,parse,whole,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,parse,den,Number,0,RET,$ == null
ProperFractionFormat.java,parse,den,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,setWholeFormat,format,NumberFormat,0,NullArgumentException,$ == null
KMeansPlusPlusClusterer.java,cluster,points,Collection<T>,0,NumberIsTooSmallException,$.size() < k
KMeansPlusPlusClusterer.java,cluster,changes,int,0,RET,$ == 0
KMeansPlusPlusClusterer.java,chooseInitialCenters,i,int,0,DEF,$ != firstPointIndex
KMeansPlusPlusClusterer.java,chooseInitialCenters,sum,double,0,DEF,$ >= r
KMeansPlusPlusClusterer.java,chooseInitialCenters,nextPointIndex,int,0,DEF,$ == -1
KMeansPlusPlusClusterer.java,chooseInitialCenters,nextPointIndex,int,1,DEF,$ >= 0
KMeansPlusPlusClusterer.java,chooseInitialCenters,resultSet,List<CentroidCluster<T>>,0,DEF,$.size() < k
KMeansPlusPlusClusterer.java,getPointFromLargestVarianceCluster,variance,double,0,DEF,$ > maxVariance
KMeansPlusPlusClusterer.java,getPointFromLargestVarianceCluster,selected,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getPointFromLargestNumberCluster,number,int,0,DEF,$ > maxNumber
KMeansPlusPlusClusterer.java,getPointFromLargestNumberCluster,selected,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getFarthestPoint,distance,double,0,DEF,$ > maxDistance
KMeansPlusPlusClusterer.java,getFarthestPoint,selectedCluster,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getNearestCluster,distance,double,0,DEF,$ < minDistance
FuzzyKMeansClusterer.java,FuzzyKMeansClusterer,fuzziness,double,0,NumberIsTooSmallException,$ <= 1.0d
FuzzyKMeansClusterer.java,getMembershipMatrix,membershipMatrix,double[][],0,MathIllegalStateException,$ == null
FuzzyKMeansClusterer.java,getObjectiveFunctionValue,points,List<T>,0,MathIllegalStateException,$ == null
FuzzyKMeansClusterer.java,getObjectiveFunctionValue,clusters,List<CentroidCluster<T>>,0,MathIllegalStateException,$ == null
FuzzyKMeansClusterer.java,cluster,size,int,0,NumberIsTooSmallException,$ < k
FuzzyKMeansClusterer.java,cluster,size,int,0,RET,$ == 0
FuzzyKMeansClusterer.java,updateMembershipMatrix,membershipMatrix,double[][],0,DEF,$[i][j] > maxMembership
FuzzyKMeansClusterer.java,updateMembershipMatrix,i,int,0,DEF,membershipMatrix[$][j] > maxMembership
FuzzyKMeansClusterer.java,updateMembershipMatrix,j,int,0,DEF,membershipMatrix[i][$] > maxMembership
DBSCANClusterer.java,DBSCANClusterer,eps,double,0,NotPositiveException,$ < 0.0d
DBSCANClusterer.java,DBSCANClusterer,minPts,int,0,NotPositiveException,$ < 0
DBSCANClusterer.java,cluster,visited,Map<Clusterable,PointStatus>,0,DEF,$.get(point) != null
DBSCANClusterer.java,cluster,point,T,0,DEF,visited.get($) != null
DBSCANClusterer.java,cluster,neighbors,List<T>,1,DEF,$.size() >= minPts
DBSCANClusterer.java,expandCluster,pStatus,PointStatus,0,DEF,$ == null
DBSCANClusterer.java,expandCluster,currentNeighbors,List<T>,0,DEF,$.size() >= minPts
DBSCANClusterer.java,expandCluster,pStatus,PointStatus,0,DEF,$ != PointStatus.PART_OF_CLUSTER
DBSCANClusterer.java,getNeighbors,point,T,0,DEF,$ != neighbor
DBSCANClusterer.java,getNeighbors,neighbor,T,0,DEF,distance($, point) <= eps
DBSCANClusterer.java,getNeighbors,point,T,0,DEF,distance(neighbor, $) <= eps
DoublePoint.java,equals,other,null,0,RET,$ instanceof DoublePoint
MultiKMeansPlusPlusClusterer.java,cluster,varianceSum,double,0,DEF,$ <= bestVarianceSum
AbstractIntegrator.java,sanityChecks,dt,double,0,NumberIsTooSmallException,$ <= threshold
ContinuousOutputModel.java,append,model,ContinuousOutputModel,0,RET,$.steps.size() == 0
ContinuousOutputModel.java,append,steps,List<StepInterpolator>,1,DEF,$.size() == 0
ContinuousOutputModel.java,handleStep,steps,List<StepInterpolator>,0,DEF,$.size() == 0
ContinuousOutputModel.java,setInterpolatedTime,sMin,StepInterpolator,0,RET,locatePoint(time, $) <= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMin) <= 0
ContinuousOutputModel.java,setInterpolatedTime,sMax,StepInterpolator,0,RET,locatePoint(time, $) >= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMax) >= 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ < 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ > 0
ContinuousOutputModel.java,setInterpolatedTime,tMin,double,1,DEF,FastMath.abs(tMed - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,FastMath.abs($ - tMin) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMax,double,1,DEF,FastMath.abs($ - tMed) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,FastMath.abs(tMax - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,index,int,1,DEF,$ < low
ContinuousOutputModel.java,setInterpolatedTime,index,int,0,DEF,$ > high
AdamsBashforthIntegrator.java,integrate,error,double,0,DEF,$ >= 1.0
GillStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
GillStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
EulerStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
EulerStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
DormandPrince54StepInterpolator.java,DormandPrince54StepInterpolator,interpolator,DormandPrince54StepInterpolator,1,DEF,$.v1 == null
DormandPrince54StepInterpolator.java,computeInterpolatedStateAndDerivatives,v1,double[],0,DEF,$ == null
DormandPrince54StepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
DormandPrince54StepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
GraggBulirschStoerIntegrator.java,setStabilityCheck,stepsizeReductionFactor,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStabilityCheck,stepsizeReductionFactor,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control3,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control3,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control4,double,1,DEF,$ < 1.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control4,double,1,DEF,$ > 999.9
GraggBulirschStoerIntegrator.java,setOrderControl,maximalOrder,int,0,DEF,$ <= 6
GraggBulirschStoerIntegrator.java,setOrderControl,maximalOrder,int,0,DEF,$ % 2 != 0
GraggBulirschStoerIntegrator.java,setOrderControl,control1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,control1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setOrderControl,control2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,control2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$ == null
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$.length != size
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudifControlParameter,int,1,DEF,$ <= 0
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudifControlParameter,int,1,DEF,$ >= 7
GraggBulirschStoerIntegrator.java,rescale,vecAbsoluteTolerance,double[],1,DEF,$ == null
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,DEF,2 * $ == n
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,RET,$ <= maxChecks
GraggBulirschStoerIntegrator.java,tryStep,k,int,0,RET,$ < maxIter
GraggBulirschStoerIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize > t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ > t
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize < t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ < t
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 0
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > 1.0e15
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > maxError
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ > 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,mu,int,0,DEF,$ >= 0
GraggBulirschStoerIntegrator.java,integrate,interpError,double,0,DEF,$ > 10.0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 1
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ <= targetIter
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 2
GraggBulirschStoerIntegrator.java,integrate,optimalIter,int,1,DEF,$ <= k
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ < targetIter
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ < minStep
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,DimensionMismatchException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,DimensionMismatchException,$.length != mainSetDimension
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,DimensionMismatchException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,DimensionMismatchException,$.length != mainSetDimension
AdaptiveStepsizeIntegrator.java,initializeStep,initialStep,double,0,RET,$ > 0
AdaptiveStepsizeIntegrator.java,filterStep,h,double,0,NumberIsTooSmallException,FastMath.abs($) < minStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,0,DEF,$ < -maxStep
EmbeddedRungeKuttaIntegrator.java,integrate,vecAbsoluteTolerance,double[],1,DEF,$ == null
EmbeddedRungeKuttaIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize >= t
EmbeddedRungeKuttaIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ >= t
EmbeddedRungeKuttaIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize <= t
EmbeddedRungeKuttaIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ <= t
EmbeddedRungeKuttaIntegrator.java,integrate,error,double,0,DEF,$ >= 1.0
MidpointStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
MidpointStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
ClassicalRungeKuttaStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
ClassicalRungeKuttaStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
AdamsNordsieckTransformer.java,getInstance,t,AdamsNordsieckTransformer,0,DEF,$ == null
AdamsMoultonIntegrator.java,integrate,error,double,0,DEF,$ >= 1.0
AdamsMoultonIntegrator.java,visit,row,int,1,DEF,($ & 0x1) == 0
AdamsMoultonIntegrator.java,end,i,int,0,DEF,$ < mainSetDimension
DormandPrince853StepInterpolator.java,DormandPrince853StepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState == null
DormandPrince853StepInterpolator.java,computeInterpolatedStateAndDerivatives,v,double[][],0,DEF,$ == null
DormandPrince853StepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
DormandPrince853StepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
DormandPrince853StepInterpolator.java,doFinalize,currentState,double[],0,RET,$ == null
HighamHall54StepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
HighamHall54StepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
DormandPrince853Integrator.java,estimateError,den,double,0,DEF,$ <= 0.0
ThreeEighthesStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
ThreeEighthesStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
RungeKuttaStepInterpolator.java,RungeKuttaStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
RungeKuttaStepInterpolator.java,readExternal,n,int,1,DEF,$ < 0
RungeKuttaStepInterpolator.java,readExternal,currentState,double[],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,GraggBulirschStoerStepInterpolator,interpolator,GraggBulirschStoerStepInterpolator,1,DEF,$.polynomials == null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ < 0
GraggBulirschStoerStepInterpolator.java,resetTables,polynomials,double[][],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ <= 4
GraggBulirschStoerStepInterpolator.java,computeCoefficients,polynomials,double[][],0,DEF,$ == null
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,RET,$ < 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 1
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 2
GraggBulirschStoerStepInterpolator.java,estimateError,currentDegree,int,0,DEF,$ >= 5
GraggBulirschStoerStepInterpolator.java,computeInterpolatedStateAndDerivatives,currentDegree,int,0,DEF,$ > 3
GraggBulirschStoerStepInterpolator.java,computeInterpolatedStateAndDerivatives,h,double,0,DEF,$ == 0
StepNormalizer.java,handleStep,lastState,double[],0,DEF,$ == null
StepNormalizer.java,handleStep,mode,StepNormalizerMode,0,DEF,$ == StepNormalizerMode.MULTIPLES
StepNormalizer.java,doNormalizedStep,firstTime,double,0,RET,$ == lastTime
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.scaled != null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.nordsieck != null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.stateVariation != null
NordsieckStepInterpolator.java,writeExternal,scaled,double[],1,DEF,$ == null
NordsieckStepInterpolator.java,writeExternal,nordsieck,Array2DRowRealMatrix,1,DEF,$ == null
AbstractStepInterpolator.java,AbstractStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState == null
AbstractStepInterpolator.java,allocateInterpolatedArrays,dimension,int,1,DEF,$ < 0
AbstractStepInterpolator.java,allocateInterpolatedArrays,secondaryMappers,EquationsMapper[],1,DEF,$ == null
AbstractStepInterpolator.java,writeBaseExternal,currentState,double[],1,DEF,$ == null
AbstractStepInterpolator.java,writeBaseExternal,currentState,double[],0,DEF,$ != null
AbstractStepInterpolator.java,readBaseExternal,dimension,int,1,DEF,$ < 0
ExpandableStatefulODE.java,setSecondaryState,secondaryState,double[],0,DimensionMismatchException,$.length != localArray.length
EventState.java,reinitializeBegin,g0,double,0,DEF,$ == 0
EventState.java,evaluateStep,dt,double,0,RET,FastMath.abs($) < convergence
EventState.java,evaluateStep,gb,double,1,RET,$ >= 0
EventState.java,evaluateStep,solver,null,1,DEF,$ instanceof BracketedUnivariateSolver<?>
EventState.java,evaluateStep,root,double,1,DEF,FastMath.abs($ - ta) <= convergence
EventState.java,evaluateStep,ta,double,1,DEF,FastMath.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,1,DEF,FastMath.abs($ - previousEventTime) <= convergence
EventState.java,evaluateStep,previousEventTime,double,1,DEF,FastMath.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,1,RET,FastMath.abs(previousEventTime - $) > convergence
EventState.java,evaluateStep,previousEventTime,double,1,RET,FastMath.abs($ - root) > convergence
EventState.java,stepAccepted,t,double,1,DEF,FastMath.abs(pendingEventTime - $) <= convergence
EventState.java,stepAccepted,pendingEventTime,double,1,DEF,FastMath.abs($ - t) <= convergence
EventState.java,reset,t,double,0,RET,FastMath.abs(pendingEventTime - $) <= convergence
EventState.java,reset,pendingEventTime,double,0,RET,FastMath.abs($ - t) <= convergence
EventFilter.java,g,extremeT,double,1,RET,$ < t
EventFilter.java,g,next,Transformer,0,DEF,$ != previous
EventFilter.java,g,i,int,0,RET,updates[$] <= t
EventFilter.java,g,updates,double[],0,RET,$[i] <= t
EventFilter.java,g,t,double,1,RET,$ < extremeT
EventFilter.java,g,next,Transformer,0,DEF,$ != previous
MultistepIntegrator.java,MultistepIntegrator,nSteps,int,0,NumberIsTooSmallException,$ < 2
MultistepIntegrator.java,start,starter,null,1,DEF,$ instanceof AbstractIntegrator
MultistepIntegrator.java,handleStep,count,int,0,DEF,$ == 0
JacobianMatrices.java,JacobianMatrices,parameters,String[],1,DEF,$ == null
JacobianMatrices.java,registerVariationalEquations,expandable,ExpandableStatefulODE,0,MismatchedEquations,$.getPrimary() != ode
JacobianMatrices.java,setInitialMainStateJacobian,efode,ExpandableStatefulODE,0,DEF,$ != null
JacobianMatrices.java,setInitialParameterJacobian,efode,ExpandableStatefulODE,0,DEF,$ != null
JacobianMatrices.java,checkDimension,arrayDimension,int,0,DimensionMismatchException,$ != expected
JacobianMatrices.java,computeDerivatives,paramDim,int,0,DEF,$ != 0
JacobianMatrices.java,computeDerivatives,paramDim,int,0,DEF,$ != 0
EquationsMapper.java,extractEquationData,equationData,double[],0,DimensionMismatchException,$.length != dimension
EquationsMapper.java,insertEquationData,equationData,double[],0,DimensionMismatchException,$.length != dimension
ArgUtils.java,flatten,array,Object[],0,DEF,$ != null
ArgUtils.java,flatten,o,null,1,DEF,$ instanceof Object[]
ExceptionContext.java,buildMessage,count,int,0,DEF,++$ < len
ExceptionContext.java,serializeContext,value,null,1,DEF,$ instanceof Serializable
BaseMultiStartMultivariateOptimizer.java,BaseMultiStartMultivariateOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
BaseMultiStartMultivariateOptimizer.java,doOptimize,maxEvalIndex,int,0,MathIllegalStateException,$ == -1
BaseMultiStartMultivariateOptimizer.java,doOptimize,initialGuessIndex,int,0,MathIllegalStateException,$ == -1
BaseMultiStartMultivariateOptimizer.java,doOptimize,i,int,1,DEF,$ == 0
BaseMultiStartMultivariateOptimizer.java,doOptimize,min,double[],0,DEF,$ != null
BaseMultiStartMultivariateOptimizer.java,doOptimize,max,double[],0,DEF,$ != null
BaseMultiStartMultivariateOptimizer.java,doOptimize,optima,PAIR[],0,DEF,$.length == 0
SimplexSolver.java,getPivotColumn,entry,double,0,DEF,$ < minValue
SimplexSolver.java,getPivotRow,entry,double,0,DEF,Precision.compareTo($, 0d, maxUlps) > 0
SimplexSolver.java,getPivotRow,maxUlps,int,0,DEF,Precision.compareTo(entry, 0d, $) > 0
SimplexSolver.java,getPivotRow,cmp,int,1,DEF,$ == 0
SimplexSolver.java,getPivotRow,cmp,int,0,DEF,$ < 0
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,1,RET,$.size() == 0
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,0,RET,$.size() > 1
SimplexSolver.java,getPivotRow,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() > 0
SimplexSolver.java,getPivotRow,basicRow,Integer,0,DEF,$ != null
SimplexSolver.java,getPivotRow,i,int,0,DEF,$ < minIndex
SimplexSolver.java,doIteration,pivotRow,Integer,0,UnboundedSolutionException,$ == null
SimplexSolver.java,doIteration,i,int,0,DEF,$ != pivotRow
SimplexSolver.java,solvePhase1,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() == 0
SimplexTableau.java,createTableau,constraint,LinearConstraint,1,DEF,$.getRelationship() == Relationship.LEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.EQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,normalize,constraint,LinearConstraint,0,RET,$.getValue() < 0
SimplexTableau.java,getConstraintTypeCounts,constraint,LinearConstraint,0,DEF,$.getRelationship() == relationship
SimplexTableau.java,getBasicRow,row,Integer,1,DEF,$ == null
SimplexTableau.java,dropPhase1Objective,epsilon,double,0,DEF,Precision.compareTo(entry, 0d, $) > 0
SimplexTableau.java,dropPhase1Objective,entry,double,0,DEF,Precision.compareTo($, 0d, epsilon) > 0
SimplexTableau.java,dropPhase1Objective,col,int,0,DEF,getBasicRow($) == null
SimplexTableau.java,isOptimal,epsilon,double,0,RET,Precision.compareTo(entry, 0d, $) < 0
SimplexTableau.java,isOptimal,entry,double,0,RET,Precision.compareTo($, 0d, epsilon) < 0
SimplexTableau.java,getSolution,colIndex,int,0,DEF,$ < 0
SimplexTableau.java,getSolution,basicRow,Integer,1,DEF,$ != null
SimplexTableau.java,getSolution,basicRow,Integer,1,DEF,$ == 0
SimplexTableau.java,subtractRow,result,double,0,DEF,FastMath.abs($) < cutOff
SimplexTableau.java,equals,other,null,0,RET,$ instanceof SimplexTableau
LinearObjectiveFunction.java,equals,other,null,0,RET,$ instanceof LinearObjectiveFunction
LinearConstraint.java,equals,other,null,0,RET,$ instanceof LinearConstraint
LinearOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof LinearObjectiveFunction
LinearOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof LinearConstraintSet
LinearOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof NonNegativeConstraint
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,previous,PointValuePair,0,RET,$ != null
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,n,int,1,DEF,getIterations() % $ == 0
NonLinearConjugateGradientOptimizer.java,doOptimize,beta,double,1,DEF,$ < 0
NonLinearConjugateGradientOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof BracketingStep
NonLinearConjugateGradientOptimizer.java,findUpperBound,yA,double,0,RET,$ * yB <= 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yB,double,0,RET,yA * $ <= 0
MultivariateFunctionPenaltyAdapter.java,MultivariateFunctionPenaltyAdapter,lower,double[],0,DimensionMismatchException,$.length != upper.length
MultivariateFunctionPenaltyAdapter.java,MultivariateFunctionPenaltyAdapter,lower,double[],0,DimensionMismatchException,$.length != scale.length
MultivariateFunctionMappingAdapter.java,MultivariateFunctionMappingAdapter,lower,double[],0,DimensionMismatchException,$.length != upper.length
BOBYQAOptimizer.java,bobyqa,lowerDifference,ArrayRealVector,1,DEF,$.getEntry(j) >= -initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,lowerDifference.getEntry($) >= -initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,lowerDifference,ArrayRealVector,1,DEF,$.getEntry(j) >= ZERO
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,lowerDifference.getEntry($) >= ZERO
BOBYQAOptimizer.java,bobyqa,upperDifference,ArrayRealVector,0,DEF,$.getEntry(j) <= initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,j,int,0,DEF,upperDifference.getEntry($) <= initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,upperDifference,ArrayRealVector,1,DEF,$.getEntry(j) <= ZERO
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,upperDifference.getEntry($) <= ZERO
BOBYQAOptimizer.java,bobyqb,trustRegionCenterInterpolationPointIndex,int,0,DEF,$ != kbase
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,bobyqb,crvmin,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,bdtest,double,0,DEF,$ < bdtol
BOBYQAOptimizer.java,bobyqb,bdtest,double,0,DEF,$ < bdtol
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,ntrits,int,1,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,denom,double,0,DEF,$ < cauchy
BOBYQAOptimizer.java,bobyqb,cauchy,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,k,int,0,DEF,$ == trustRegionCenterInterpolationPointIndex
BOBYQAOptimizer.java,bobyqb,temp,double,0,DEF,$ * den > scaden
BOBYQAOptimizer.java,bobyqb,den,double,0,DEF,temp * $ > scaden
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ == j
BOBYQAOptimizer.java,bobyqb,dnorm,double,0,DEF,$ > rho
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,MathIllegalStateException,$ > 0
BOBYQAOptimizer.java,bobyqb,vquad,double,0,MathIllegalStateException,$ >= ZERO
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= ONE_OVER_TEN
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= .7
BOBYQAOptimizer.java,bobyqb,f,double,0,DEF,$ < fopt
BOBYQAOptimizer.java,bobyqb,temp,double,0,DEF,$ * den > scaden
BOBYQAOptimizer.java,bobyqb,den,double,0,DEF,temp * $ > scaden
BOBYQAOptimizer.java,bobyqb,f,double,0,DEF,$ < fopt
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ > 0
BOBYQAOptimizer.java,bobyqb,itest,int,0,DEF,$ >= 3
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < n
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < npt
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < nh
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,sum,double,0,DEF,$ > distsq
BOBYQAOptimizer.java,bobyqb,knew,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,ratio,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,dnorm,double,0,DEF,Math.max(delta, $) > rho
BOBYQAOptimizer.java,bobyqb,delta,double,0,DEF,Math.max($, dnorm) > rho
BOBYQAOptimizer.java,bobyqb,rho,double,0,DEF,$ > stoppingTrustRegionRadius
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= SIXTEEN
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= TWO_HUNDRED_FIFTY
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,fAtInterpolationPoints,ArrayRealVector,0,DEF,$.getEntry(trustRegionCenterInterpolationPointIndex) <= fsave
BOBYQAOptimizer.java,bobyqb,trustRegionCenterInterpolationPointIndex,int,0,DEF,fAtInterpolationPoints.getEntry($) <= fsave
BOBYQAOptimizer.java,altmov,k,int,0,DEF,$ == trustRegionCenterInterpolationPointIndex
BOBYQAOptimizer.java,altmov,tmp,double,1,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,tmp,double,0,DEF,$ < ZERO
BOBYQAOptimizer.java,altmov,k,int,1,DEF,$ == knew
BOBYQAOptimizer.java,altmov,d4,double,0,DEF,d3 * $ < ZERO
BOBYQAOptimizer.java,altmov,d3,double,0,DEF,$ * d4 < ZERO
BOBYQAOptimizer.java,altmov,subd,double,0,DEF,$ > HALF
BOBYQAOptimizer.java,altmov,vlag,double,0,DEF,Math.abs($) < ONE_OVER_FOUR
BOBYQAOptimizer.java,altmov,predsq,double,0,DEF,$ > presav
BOBYQAOptimizer.java,altmov,ibdsav,int,0,DEF,$ < 0
BOBYQAOptimizer.java,altmov,ibdsav,int,0,DEF,$ > 0
BOBYQAOptimizer.java,altmov,glagValue,double,0,DEF,Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), $) > ZERO
BOBYQAOptimizer.java,altmov,i,int,0,DEF,Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,lowerDifference,ArrayRealVector,0,DEF,Math.min(trustRegionCenterOffset.getEntry(i) - $.getEntry(i), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,trustRegionCenterOffset,ArrayRealVector,0,DEF,Math.min($.getEntry(i) - lowerDifference.getEntry(i), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,glagValue,double,0,DEF,Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), $) < ZERO
BOBYQAOptimizer.java,altmov,upperDifference,ArrayRealVector,0,DEF,Math.max(trustRegionCenterOffset.getEntry(i) - $.getEntry(i), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,i,int,0,DEF,Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,trustRegionCenterOffset,ArrayRealVector,0,DEF,Math.max($.getEntry(i) - upperDifference.getEntry(i), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,ggfree,double,0,RET,$ == ZERO
BOBYQAOptimizer.java,altmov,tmp1,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,0,DEF,$.getEntry(i) == bigstp
BOBYQAOptimizer.java,altmov,i,int,0,DEF,work1.getEntry($) == bigstp
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,1,DEF,$.getEntry(i) == bigstp
BOBYQAOptimizer.java,altmov,i,int,1,DEF,work1.getEntry($) == bigstp
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,altmov,i,int,1,DEF,work1.getEntry($) == ZERO
BOBYQAOptimizer.java,altmov,glagValue,double,1,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,iflag,int,0,DEF,$ == 1
BOBYQAOptimizer.java,altmov,curv,double,1,DEF,$ > -gw
BOBYQAOptimizer.java,altmov,iflag,int,1,DEF,$ == 0
BOBYQAOptimizer.java,altmov,csave,double,0,DEF,$ > cauchy
BOBYQAOptimizer.java,prelim,nfm,int,1,DEF,$ >= 1
BOBYQAOptimizer.java,prelim,nfm,int,1,DEF,$ <= n
BOBYQAOptimizer.java,prelim,upperDifference,ArrayRealVector,0,DEF,$.getEntry(nfmm) == ZERO
BOBYQAOptimizer.java,prelim,nfmm,int,0,DEF,upperDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,nfm,int,0,DEF,$ > n
BOBYQAOptimizer.java,prelim,lowerDifference,ArrayRealVector,0,DEF,$.getEntry(nfxm) == ZERO
BOBYQAOptimizer.java,prelim,nfxm,int,0,DEF,lowerDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,upperDifference,ArrayRealVector,0,DEF,$.getEntry(nfxm) == ZERO
BOBYQAOptimizer.java,prelim,nfxm,int,0,DEF,upperDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,ipt,int,0,DEF,$ > n
BOBYQAOptimizer.java,prelim,numEval,int,1,DEF,$ == 1
BOBYQAOptimizer.java,prelim,numEval,int,1,DEF,$ >= 2
BOBYQAOptimizer.java,prelim,stepb,double,0,DEF,stepa * $ < ZERO
BOBYQAOptimizer.java,prelim,stepa,double,0,DEF,$ * stepb < ZERO
BOBYQAOptimizer.java,prelim,trustRegionCenterInterpolationPointIndex,int,0,DEF,$ == nfm
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,gradientAtTrustRegionCenter.getEntry($) >= ZERO
BOBYQAOptimizer.java,trsbox,gradientAtTrustRegionCenter,ArrayRealVector,0,DEF,$.getEntry(i) >= ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,gradientAtTrustRegionCenter.getEntry($) <= ZERO
BOBYQAOptimizer.java,trsbox,gradientAtTrustRegionCenter,ArrayRealVector,0,DEF,$.getEntry(i) <= ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,beta,double,1,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,stepsq,double,0,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,beta,double,0,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,resid,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,ds,double,1,DEF,$ < ZERO
BOBYQAOptimizer.java,trsbox,shs,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,0,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,s.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,1,DEF,$.getEntry(i) > ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,s.getEntry($) > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ < stplen
BOBYQAOptimizer.java,trsbox,stplen,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ == -1
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,crvmin,double,0,DEF,$ == MINUS_ONE
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,0,DEF,$.getEntry(iact) < ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,s.getEntry($) < ZERO
BOBYQAOptimizer.java,trsbox,delsq,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,stplen,double,0,DEF,$ < blen
BOBYQAOptimizer.java,trsbox,iterc,int,0,DEF,$ == itermax
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,tempa,double,1,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,tempb,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,angbd * $ > tempa
BOBYQAOptimizer.java,trsbox,angbd,double,0,DEF,$ * temp > tempa
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,angbd * $ > tempb
BOBYQAOptimizer.java,trsbox,angbd,double,0,DEF,$ * temp > tempb
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,rednew,double,1,DEF,$ > redmax
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ < 0
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ < iu
BOBYQAOptimizer.java,trsbox,sdec,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ == iu
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == MINUS_ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == MINUS_ONE
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,trsbox,k,int,0,DEF,modelSecondDerivativesParameters.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,modelSecondDerivativesParameters,ArrayRealVector,0,DEF,$.getEntry(k) != ZERO
BOBYQAOptimizer.java,trsbox,crvmin,double,0,DEF,$ != ZERO
BOBYQAOptimizer.java,trsbox,iterc,int,0,DEF,$ > itcsav
BOBYQAOptimizer.java,update,d1,double,0,DEF,Math.abs($) > ztest
BOBYQAOptimizer.java,update,i,int,0,DEF,$ >= npt
BOBYQAOptimizer.java,setup,dimension,int,0,NumberIsTooSmallException,$ < MINIMUM_PROBLEM_DIMENSION
BOBYQAOptimizer.java,setup,minDiff,double,0,DEF,$ < requiredMinDiff
PowellOptimizer.java,PowellOptimizer,rel,double,0,NumberIsTooSmallException,$ < MIN_RELATIVE_TOLERANCE
PowellOptimizer.java,PowellOptimizer,abs,double,0,NotStrictlyPositiveException,$ <= 0
PowellOptimizer.java,doOptimize,fX2,double,0,DEF,($ - fVal) > delta
PowellOptimizer.java,doOptimize,fVal,double,0,DEF,(fX2 - $) > delta
PowellOptimizer.java,doOptimize,checker,ConvergenceChecker<PointValuePair>,0,DEF,$ != null
PowellOptimizer.java,doOptimize,goal,GoalType,1,RET,$ == GoalType.MINIMIZE
PowellOptimizer.java,doOptimize,fX,double,0,DEF,$ > fX2
PowellOptimizer.java,doOptimize,t,double,0,DEF,$ < 0.0
MultiDirectionalSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(reflected, best) < 0
MultiDirectionalSimplex.java,iterate,reflected,PointValuePair,0,RET,comparator.compare($, best) < 0
MultiDirectionalSimplex.java,iterate,best,PointValuePair,0,RET,comparator.compare(reflected, $) < 0
MultiDirectionalSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,DEF,$.compare(reflected, expanded) <= 0
MultiDirectionalSimplex.java,iterate,expanded,PointValuePair,0,DEF,comparator.compare(reflected, $) <= 0
MultiDirectionalSimplex.java,iterate,reflected,PointValuePair,0,DEF,comparator.compare($, expanded) <= 0
AbstractSimplex.java,AbstractSimplex,steps,double[],0,NullArgumentException,$ == null
AbstractSimplex.java,AbstractSimplex,steps,double[],0,ZeroException,$.length == 0
AbstractSimplex.java,AbstractSimplex,j,int,0,ZeroException,steps[$] == 0
AbstractSimplex.java,AbstractSimplex,steps,double[],0,ZeroException,$[j] == 0
AbstractSimplex.java,AbstractSimplex,referenceSimplex,double[][],0,NotStrictlyPositiveException,$.length <= 0
AbstractSimplex.java,AbstractSimplex,refI,double[],0,DimensionMismatchException,$.length != dimension
AbstractSimplex.java,AbstractSimplex,i,int,0,DEF,$ > 0
AbstractSimplex.java,build,dimension,int,0,DimensionMismatchException,$ != startPoint.length
AbstractSimplex.java,replaceWorstPoint,comparator,Comparator<PointValuePair>,0,DEF,$.compare(simplex[i], pointValuePair) > 0
AbstractSimplex.java,replaceWorstPoint,pointValuePair,PointValuePair,0,DEF,comparator.compare(simplex[i], $) > 0
AbstractSimplex.java,replaceWorstPoint,simplex,PointValuePair[],0,DEF,comparator.compare($[i], pointValuePair) > 0
AbstractSimplex.java,replaceWorstPoint,i,int,0,DEF,comparator.compare(simplex[$], pointValuePair) > 0
AbstractSimplex.java,getPoint,index,int,0,OutOfRangeException,$ < 0
AbstractSimplex.java,getPoint,index,int,0,OutOfRangeException,$ >= simplex.length
AbstractSimplex.java,setPoint,index,int,0,OutOfRangeException,$ < 0
AbstractSimplex.java,setPoint,index,int,0,OutOfRangeException,$ >= simplex.length
AbstractSimplex.java,setPoints,points,PointValuePair[],0,DimensionMismatchException,$.length != simplex.length
CMAESOptimizer.java,Sigma,s,double[],0,NotPositiveException,$[i] < 0
CMAESOptimizer.java,Sigma,i,int,0,NotPositiveException,s[$] < 0
CMAESOptimizer.java,PopulationSize,size,int,0,NotStrictlyPositiveException,$ <= 0
CMAESOptimizer.java,doOptimize,diagonalOnly,int,1,DEF,$ <= 0
CMAESOptimizer.java,doOptimize,i,int,0,DEF,$ >= checkFeasableCount
CMAESOptimizer.java,doOptimize,diagonalOnly,int,1,DEF,$ <= 0
CMAESOptimizer.java,doOptimize,bestValue,double,0,DEF,$ > bestFitness
CMAESOptimizer.java,doOptimize,lastResult,PointValuePair,0,DEF,$ != null
CMAESOptimizer.java,doOptimize,stopFitness,double,0,DEF,$ != 0
CMAESOptimizer.java,doOptimize,sigma,double,0,DEF,$ * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX
CMAESOptimizer.java,doOptimize,sqrtDiagC,double[],0,DEF,sigma * Math.max(Math.abs(pcCol[i]), $[i]) > stopTolX
CMAESOptimizer.java,doOptimize,pcCol,double[],0,DEF,sigma * Math.max(Math.abs($[i]), sqrtDiagC[i]) > stopTolX
CMAESOptimizer.java,doOptimize,i,int,0,DEF,sigma * Math.max(Math.abs(pcCol[$]), sqrtDiagC[$]) > stopTolX
CMAESOptimizer.java,doOptimize,sigma,double,0,DEF,$ * sqrtDiagC[i] > stopTolUpX
CMAESOptimizer.java,doOptimize,sqrtDiagC,double[],0,DEF,sigma * $[i] > stopTolUpX
CMAESOptimizer.java,doOptimize,i,int,0,DEF,sigma * sqrtDiagC[$] > stopTolUpX
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > 2
CMAESOptimizer.java,doOptimize,worstFitness,double,0,DEF,Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,bestFitness,double,0,DEF,Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > fitnessHistory.length
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,historyWorst - $ < stopTolHistFun
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,$ - historyBest < stopTolHistFun
CMAESOptimizer.java,doOptimize,diagD,RealMatrix,0,DEF,max($) / min($) > 1e7
CMAESOptimizer.java,doOptimize,lastResult,PointValuePair,0,DEF,$ != null
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > 2
CMAESOptimizer.java,doOptimize,bestFitness,double,0,DEF,Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
CMAESOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof Sigma
CMAESOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof PopulationSize
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,OutOfRangeException,$ != null
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,DimensionMismatchException,$.length != init.length
CMAESOptimizer.java,initializeCMA,lambda,int,0,NotStrictlyPositiveException,$ <= 0
CMAESOptimizer.java,updateCovarianceDiagonalOnly,diagonalOnly,int,0,DEF,$ > 1
CMAESOptimizer.java,updateCovarianceDiagonalOnly,iterations,int,0,DEF,$ > diagonalOnly
CMAESOptimizer.java,updateCovariance,ccovmu,double,0,DEF,ccov1 + $ > 0
CMAESOptimizer.java,updateCovariance,ccov1,double,0,DEF,$ + ccovmu > 0
CMAESOptimizer.java,updateCovariance,negccov,double,0,DEF,$ > negcovMax
CMAESOptimizer.java,updateBD,negccov,double,0,DEF,ccov1 + ccovmu + $ > 0
CMAESOptimizer.java,updateBD,ccovmu,double,0,DEF,ccov1 + $ + negccov > 0
CMAESOptimizer.java,updateBD,ccov1,double,0,DEF,$ + ccovmu + negccov > 0
CMAESOptimizer.java,updateBD,negccov,double,0,DEF,(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,ccovmu,double,0,DEF,(iterations % 1. / (ccov1 + $ + negccov) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,ccov1,double,0,DEF,(iterations % 1. / ($ + ccovmu + negccov) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,dimension,int,0,DEF,(iterations % 1. / (ccov1 + ccovmu + negccov) / $ / 10.) < 1
CMAESOptimizer.java,updateBD,iterations,int,0,DEF,($ % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,diagD,RealMatrix,0,DEF,min($) <= 0
CMAESOptimizer.java,updateBD,i,int,0,DEF,diagD.getEntry($, 0) < 0
CMAESOptimizer.java,updateBD,diagD,RealMatrix,0,DEF,$.getEntry(i, 0) < 0
CMAESOptimizer.java,equals,other,null,0,RET,$ instanceof DoubleIndex
CMAESOptimizer.java,diag,m,RealMatrix,1,RET,$.getColumnDimension() == 1
CMAESOptimizer.java,eye,r,int,0,DEF,$ < m
CMAESOptimizer.java,max,max,double,0,DEF,$ < e
CMAESOptimizer.java,min,min,double,0,DEF,$ > e
SimplexOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof AbstractSimplex
SimplexOptimizer.java,checkParameters,simplex,AbstractSimplex,0,NullArgumentException,$ == null
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(best, reflected) <= 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare(best, $) <= 0
NelderMeadSimplex.java,iterate,best,PointValuePair,1,DEF,comparator.compare($, reflected) <= 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(reflected, secondBest) < 0
NelderMeadSimplex.java,iterate,secondBest,PointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare($, secondBest) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(reflected, best) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare($, best) < 0
NelderMeadSimplex.java,iterate,best,PointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(expanded, reflected) < 0
NelderMeadSimplex.java,iterate,expanded,PointValuePair,1,DEF,comparator.compare($, reflected) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare(expanded, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,RET,$.compare(reflected, worst) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,RET,comparator.compare($, worst) < 0
NelderMeadSimplex.java,iterate,worst,PointValuePair,1,RET,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(outContracted, reflected) <= 0
NelderMeadSimplex.java,iterate,outContracted,PointValuePair,0,RET,comparator.compare($, reflected) <= 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,0,RET,comparator.compare(outContracted, $) <= 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(inContracted, worst) < 0
NelderMeadSimplex.java,iterate,worst,PointValuePair,0,RET,comparator.compare(inContracted, $) < 0
NelderMeadSimplex.java,iterate,inContracted,PointValuePair,0,RET,comparator.compare($, worst) < 0
MultiStartMultivariateOptimizer.java,compare,o1,PointValuePair,1,RET,$ == null
MultiStartMultivariateOptimizer.java,compare,o2,PointValuePair,0,RET,$ == null
LeastSquaresConverter.java,LeastSquaresConverter,observations,double[],0,DimensionMismatchException,$.length != weights.length
LeastSquaresConverter.java,value,residuals,double[],0,DimensionMismatchException,$.length != observations.length
LeastSquaresConverter.java,value,weights,double[],1,DEF,$ != null
LeastSquaresConverter.java,value,scale,RealMatrix,1,DEF,$ != null
MultivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof GoalType
MultivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof ObjectiveFunction
GradientMultivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof ObjectiveFunctionGradient
MultiStartMultivariateVectorOptimizer.java,compare,o1,PointVectorValuePair,1,RET,$ == null
MultiStartMultivariateVectorOptimizer.java,compare,o2,PointVectorValuePair,0,RET,$ == null
MultivariateVectorOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof ModelFunction
MultivariateVectorOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof Target
MultivariateVectorOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof Weight
JacobianMultivariateVectorOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof ModelFunctionJacobian
LevenbergMarquardtOptimizer.java,doOptimize,dk,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,currentCost,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,s,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtOptimizer.java,doOptimize,currentCost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtOptimizer.java,doOptimize,currentCost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtOptimizer.java,doOptimize,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtOptimizer.java,doOptimize,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,RET,$ >= 1.0e-4
LevenbergMarquardtOptimizer.java,doOptimize,checker,ConvergenceChecker<PointVectorValuePair>,0,RET,$ != null
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,0,RET,FastMath.abs($) <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,1,ConvergenceException,FastMath.abs($) <= TWO_EPS
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,1,ConvergenceException,$ <= TWO_EPS
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,ConvergenceException,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,ConvergenceException,$ <= TWO_EPS
LevenbergMarquardtOptimizer.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtOptimizer.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtOptimizer.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtOptimizer.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtOptimizer.java,qrDecomposition,ak2,double,0,RET,$ <= qrRankingThreshold
AbstractLeastSquaresOptimizer.java,computeResiduals,objectiveValue,double[],0,DimensionMismatchException,$.length != target.length
AbstractLeastSquaresOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof Weight
AbstractLeastSquaresOptimizer.java,squareRoot,m,null,1,RET,$ instanceof DiagonalMatrix
GaussNewtonOptimizer.java,doOptimize,checker,ConvergenceChecker<PointVectorValuePair>,0,NullArgumentException,$ == null
GaussNewtonOptimizer.java,doOptimize,previous,PointVectorValuePair,0,RET,$ != null
SimpleValueChecker.java,SimpleValueChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimpleValueChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimpleValueChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
SearchInterval.java,SearchInterval,lo,double,0,NumberIsTooLargeException,$ >= hi
SearchInterval.java,SearchInterval,init,double,0,OutOfRangeException,$ < lo
SearchInterval.java,SearchInterval,init,double,0,OutOfRangeException,$ > hi
BrentOptimizer.java,BrentOptimizer,rel,double,0,NumberIsTooSmallException,$ < MIN_RELATIVE_TOLERANCE
BrentOptimizer.java,BrentOptimizer,abs,double,0,NotStrictlyPositiveException,$ <= 0
BrentOptimizer.java,doOptimize,lo,double,1,DEF,$ < hi
BrentOptimizer.java,doOptimize,e,double,1,DEF,FastMath.abs($) > tol1
BrentOptimizer.java,doOptimize,q,double,1,DEF,$ > 0
BrentOptimizer.java,doOptimize,a,double,0,DEF,u - $ < tol2
BrentOptimizer.java,doOptimize,u,double,0,DEF,$ - a < tol2
BrentOptimizer.java,doOptimize,b,double,0,DEF,$ - u < tol2
BrentOptimizer.java,doOptimize,u,double,0,DEF,b - $ < tol2
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ <= m
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ < m
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ < m
BrentOptimizer.java,doOptimize,d,double,1,DEF,FastMath.abs($) < tol1
BrentOptimizer.java,doOptimize,d,double,1,DEF,$ >= 0
BrentOptimizer.java,doOptimize,checker,ConvergenceChecker<UnivariatePointValuePair>,0,RET,$ != null
BrentOptimizer.java,doOptimize,fu,double,1,DEF,$ <= fx
BrentOptimizer.java,doOptimize,u,double,1,DEF,$ < x
BrentOptimizer.java,doOptimize,u,double,1,DEF,$ < x
BrentOptimizer.java,doOptimize,fu,double,1,DEF,$ <= fw
BrentOptimizer.java,doOptimize,fu,double,0,DEF,$ <= fv
BrentOptimizer.java,best,a,UnivariatePointValuePair,0,RET,$ == null
BrentOptimizer.java,best,b,UnivariatePointValuePair,0,RET,$ == null
SimpleUnivariateValueChecker.java,SimpleUnivariateValueChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimpleUnivariateValueChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimpleUnivariateValueChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
MultiStartUnivariateOptimizer.java,MultiStartUnivariateOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
MultiStartUnivariateOptimizer.java,getOptima,optima,UnivariatePointValuePair[],0,MathIllegalStateException,$ == null
MultiStartUnivariateOptimizer.java,doOptimize,maxEvalIndex,int,0,MathIllegalStateException,$ == -1
MultiStartUnivariateOptimizer.java,doOptimize,searchIntervalIndex,int,0,MathIllegalStateException,$ == -1
MultiStartUnivariateOptimizer.java,doOptimize,optima,UnivariatePointValuePair[],0,DEF,$[0] == null
MultiStartUnivariateOptimizer.java,compare,o1,UnivariatePointValuePair,1,RET,$ == null
MultiStartUnivariateOptimizer.java,compare,o2,UnivariatePointValuePair,0,RET,$ == null
UnivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof SearchInterval
UnivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof UnivariateObjectiveFunction
UnivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof GoalType
BracketFinder.java,BracketFinder,growLimit,double,0,NotStrictlyPositiveException,$ <= 0
BracketFinder.java,BracketFinder,maxEvaluations,int,0,NotStrictlyPositiveException,$ <= 0
BracketFinder.java,search,fA,double,0,DEF,$ < fB
BracketFinder.java,search,fA,double,0,DEF,$ > fB
BracketFinder.java,search,w,double,1,DEF,($ - xC) * (xB - $) > 0
BracketFinder.java,search,xB,double,1,DEF,(w - xC) * ($ - w) > 0
BracketFinder.java,search,xC,double,1,DEF,(w - $) * (xB - w) > 0
BracketFinder.java,search,fW,double,1,DEF,$ < fC
BracketFinder.java,search,fW,double,1,DEF,$ > fC
BracketFinder.java,search,fW,double,0,DEF,$ > fB
BracketFinder.java,search,fW,double,0,DEF,$ < fB
BracketFinder.java,search,w,double,1,DEF,($ - wLim) * (wLim - xC) >= 0
BracketFinder.java,search,xC,double,1,DEF,(w - wLim) * (wLim - $) >= 0
BracketFinder.java,search,wLim,double,1,DEF,(w - $) * ($ - xC) >= 0
BracketFinder.java,search,w,double,1,DEF,($ - wLim) * (xC - $) > 0
BracketFinder.java,search,xC,double,1,DEF,(w - wLim) * ($ - w) > 0
BracketFinder.java,search,wLim,double,1,DEF,(w - $) * (xC - w) > 0
BracketFinder.java,search,fW,double,0,DEF,$ < fC
BracketFinder.java,search,fW,double,0,DEF,$ > fC
BracketFinder.java,search,lo,double,0,DEF,$ > hi
SimpleVectorValueChecker.java,SimpleVectorValueChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimpleVectorValueChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimpleVectorValueChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
MaxEval.java,MaxEval,max,int,0,NotStrictlyPositiveException,$ <= 0
BaseOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof MaxEval
BaseOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof MaxIter
MaxIter.java,MaxIter,max,int,0,NotStrictlyPositiveException,$ <= 0
SimplePointChecker.java,SimplePointChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimplePointChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimplePointChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
BaseMultivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof InitialGuess
BaseMultivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof SimpleBounds
BaseMultivariateOptimizer.java,checkParameters,start,double[],0,NumberIsTooLargeException,$ != null
BaseMultivariateOptimizer.java,checkParameters,lowerBound,double[],0,NumberIsTooSmallException,$ != null
BaseMultivariateOptimizer.java,checkParameters,lowerBound,double[],0,DimensionMismatchException,$.length != dim
BaseMultivariateOptimizer.java,checkParameters,v,double,0,NumberIsTooSmallException,$ < lo
BaseMultivariateOptimizer.java,checkParameters,upperBound,double[],0,NumberIsTooLargeException,$ != null
BaseMultivariateOptimizer.java,checkParameters,upperBound,double[],0,DimensionMismatchException,$.length != dim
BaseMultivariateOptimizer.java,checkParameters,v,double,0,NumberIsTooLargeException,$ > hi
BinaryMutation.java,mutate,original,null,0,MathIllegalArgumentException,$ instanceof BinaryChromosome
FixedElapsedTime.java,FixedElapsedTime,maxTime,long,0,NumberIsTooSmallException,$ < 0
FixedElapsedTime.java,isSatisfied,endTime,long,0,DEF,$ < 0
RandomKey.java,decodeGeneric,representation,List<Double>,0,DimensionMismatchException,$.size() != l
RandomKey.java,decodeGeneric,sortedRepr,List<Double>,0,DimensionMismatchException,$.size() != l
RandomKey.java,isSame,another,null,0,RET,$ instanceof RandomKey<?>
RandomKey.java,checkValidity,val,double,0,InvalidRepresentationException,$ < 0
RandomKey.java,checkValidity,val,double,0,InvalidRepresentationException,$ > 1
RandomKey.java,inducedPermutation,index,int,0,MathIllegalArgumentException,$ == -1
GeneticAlgorithm.java,GeneticAlgorithm,crossoverRate,double,0,OutOfRangeException,$ < 0
GeneticAlgorithm.java,GeneticAlgorithm,crossoverRate,double,0,OutOfRangeException,$ > 1
GeneticAlgorithm.java,GeneticAlgorithm,mutationRate,double,0,OutOfRangeException,$ < 0
GeneticAlgorithm.java,GeneticAlgorithm,mutationRate,double,0,OutOfRangeException,$ > 1
OrderedCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
OrderedCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
Chromosome.java,searchForFitnessUpdate,sameChromosome,Chromosome,0,DEF,$ != null
ElitisticListPopulation.java,setElitismRate,elitismRate,double,0,OutOfRangeException,$ < 0
ElitisticListPopulation.java,setElitismRate,elitismRate,double,0,OutOfRangeException,$ > 1
NPointCrossover.java,NPointCrossover,crossoverPoints,int,0,NotStrictlyPositiveException,$ <= 0
NPointCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
NPointCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
NPointCrossover.java,mate,crossoverPoints,int,0,NumberIsTooLargeException,$ >= length
CycleCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
CycleCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
CycleCrossover.java,mate,cycle,int,0,DEF,$++ % 2 != 0
CycleCrossover.java,mate,idx,int,0,DEF,$ >= length
BinaryChromosome.java,checkValidity,i,int,0,InvalidRepresentationException,$ < 0
BinaryChromosome.java,checkValidity,i,int,0,InvalidRepresentationException,$ >1
BinaryChromosome.java,isSame,another,null,0,RET,$ instanceof BinaryChromosome
OnePointCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
OnePointCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
RandomKeyMutation.java,mutate,original,null,0,MathIllegalArgumentException,$ instanceof RandomKey<?>
UniformCrossover.java,UniformCrossover,ratio,double,0,OutOfRangeException,$ < 0.0d
UniformCrossover.java,UniformCrossover,ratio,double,0,OutOfRangeException,$ > 1.0d
UniformCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
UniformCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
UniformCrossover.java,mate,random,RandomGenerator,1,DEF,$.nextDouble() < ratio
ListPopulation.java,ListPopulation,chromosomes,List<Chromosome>,0,NullArgumentException,$ == null
ListPopulation.java,ListPopulation,populationLimit,int,0,NotPositiveException,$ <= 0
ListPopulation.java,ListPopulation,chromosomes,List<Chromosome>,0,NumberIsTooLargeException,$.size() > populationLimit
ListPopulation.java,setChromosomes,chromosomes,List<Chromosome>,0,NullArgumentException,$ == null
ListPopulation.java,setChromosomes,chromosomes,List<Chromosome>,0,NumberIsTooLargeException,$.size() > populationLimit
ListPopulation.java,addChromosomes,chromosomeColl,Collection<Chromosome>,0,NumberIsTooLargeException,chromosomes.size() + $.size() > populationLimit
ListPopulation.java,addChromosomes,chromosomes,List<Chromosome>,0,NumberIsTooLargeException,$.size() + chromosomeColl.size() > populationLimit
ListPopulation.java,addChromosome,chromosomes,List<Chromosome>,0,NumberIsTooLargeException,$.size() >= populationLimit
ListPopulation.java,getFittestChromosome,bestChromosome,Chromosome,0,DEF,chromosome.compareTo($) > 0
ListPopulation.java,getFittestChromosome,chromosome,Chromosome,0,DEF,$.compareTo(bestChromosome) > 0
ListPopulation.java,setPopulationLimit,populationLimit,int,0,NotPositiveException,$ <= 0
FixedGenerationCount.java,FixedGenerationCount,maxGenerations,int,0,NumberIsTooSmallException,$ <= 0
SmallPrimes.java,boundedTrialDivision,n,int,0,DEF,$ != 1
SmallPrimes.java,millerRabinPrimeTest,n,int,0,DEF,$ >= 2047
SmallPrimes.java,millerRabinPrimeTest,n,int,0,DEF,$ >= 1373653
SmallPrimes.java,millerRabinPrimeTest,n,int,0,DEF,$ >= 25326001
SmallPrimes.java,millerRabinPrimeTest,y,int,0,RET,$ != nMinus1
SmallPrimes.java,millerRabinPrimeTest,nMinus1,int,0,RET,$ != y
PollardRho.java,gcdPositive,a,int,1,RET,$ == 0
PollardRho.java,gcdPositive,b,int,0,RET,$ == 0
Primes.java,isPrime,n,int,0,RET,$ < 2
Primes.java,nextPrime,n,int,0,MathIllegalArgumentException,$ < 0
Primes.java,nextPrime,n,int,0,RET,$ == 2
Primes.java,nextPrime,n,int,0,RET,$ == 1
Primes.java,primeFactors,n,int,0,MathIllegalArgumentException,$ < 2
ConjugateGradient.java,solveInPlace,m,RealLinearOperator,1,DEF,$ == null
ConjugateGradient.java,solveInPlace,rnorm,double,0,RET,$ <= rmax
ConjugateGradient.java,solveInPlace,m,RealLinearOperator,0,DEF,$ != null
ConjugateGradient.java,solveInPlace,rhoNext,double,0,DEF,$ <= 0.
ConjugateGradient.java,solveInPlace,manager,IterationManager,1,DEF,$.getIterations() == 2
ConjugateGradient.java,solveInPlace,pq,double,0,DEF,$ <= 0.
ConjugateGradient.java,solveInPlace,rnorm,double,0,RET,$ <= rmax
JacobiPreconditioner.java,create,a,RealLinearOperator,0,NonSquareOperatorException,$.getRowDimension() != n
JacobiPreconditioner.java,create,a,null,1,DEF,$ instanceof AbstractRealMatrix
RealVectorFormat.java,format,i,int,0,DEF,$ > 0
RealVectorFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
RealVectorFormat.java,parse,component,Number,1,DEF,$ != null
Array2DRowRealMatrix.java,Array2DRowRealMatrix,d,double[][],0,NullArgumentException,$ == null
Array2DRowRealMatrix.java,Array2DRowRealMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,Array2DRowRealMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,Array2DRowRealMatrix,r,int,0,DimensionMismatchException,d[$].length != nCols
Array2DRowRealMatrix.java,Array2DRowRealMatrix,d,double[][],0,DimensionMismatchException,$[r].length != nCols
Array2DRowRealMatrix.java,setSubMatrix,data,double[][],1,DimensionMismatchException,$ == null
Array2DRowRealMatrix.java,setSubMatrix,row,int,0,MathIllegalStateException,$ > 0
Array2DRowRealMatrix.java,setSubMatrix,column,int,0,MathIllegalStateException,$ > 0
Array2DRowRealMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,setSubMatrix,i,int,0,DimensionMismatchException,subMatrix[$].length != nCols
Array2DRowRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DimensionMismatchException,$[i].length != nCols
Array2DRowRealMatrix.java,operate,v,double[],0,DimensionMismatchException,$.length != nCols
Array2DRowRealMatrix.java,preMultiply,v,double[],0,DimensionMismatchException,$.length != nRows
AbstractRealMatrix.java,AbstractRealMatrix,rowDimension,int,0,NotStrictlyPositiveException,$ < 1
AbstractRealMatrix.java,AbstractRealMatrix,columnDimension,int,0,NotStrictlyPositiveException,$ < 1
AbstractRealMatrix.java,power,p,int,0,NotPositiveException,$ < 0
AbstractRealMatrix.java,power,p,int,0,RET,$ == 0
AbstractRealMatrix.java,power,p,int,0,RET,$ == 1
AbstractRealMatrix.java,power,i,int,0,DEF,binaryRepresentation[$] == '1'
AbstractRealMatrix.java,power,binaryRepresentation,char[],0,DEF,$[i] == '1'
AbstractRealMatrix.java,power,maxI,int,0,DEF,$ == -1
AbstractRealMatrix.java,visit,row,int,0,DEF,$ == endRow
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$.length < rowsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$[0].length < columnsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$[i].length < columnsCount
AbstractRealMatrix.java,copySubMatrix,i,int,0,MatrixDimensionMismatchException,destination[$].length < columnsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$.length < selectedRows.length
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$[0].length < nCols
AbstractRealMatrix.java,copySubMatrix,destinationI,double[],0,MatrixDimensionMismatchException,$.length < nCols
AbstractRealMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
AbstractRealMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
AbstractRealMatrix.java,setSubMatrix,r,int,0,DimensionMismatchException,subMatrix[$].length != nCols
AbstractRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DimensionMismatchException,$[r].length != nCols
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
AbstractRealMatrix.java,setRowVector,vector,RealVector,0,MatrixDimensionMismatchException,$.getDimension() != nCols
AbstractRealMatrix.java,setColumnVector,vector,RealVector,0,MatrixDimensionMismatchException,$.getDimension() != nRows
AbstractRealMatrix.java,setRow,array,double[],0,MatrixDimensionMismatchException,$.length != nCols
AbstractRealMatrix.java,setColumn,array,double[],0,MatrixDimensionMismatchException,$.length != nRows
AbstractRealMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractRealMatrix.java,operate,v,double[],0,DimensionMismatchException,$.length != nCols
AbstractRealMatrix.java,operate,v,RealVector,0,DimensionMismatchException,$.getDimension() != nCols
AbstractRealMatrix.java,preMultiply,v,double[],0,DimensionMismatchException,$.length != nRows
AbstractRealMatrix.java,preMultiply,v,RealVector,0,DimensionMismatchException,$.getDimension() != nRows
AbstractRealMatrix.java,equals,object,Object,0,RET,$ instanceof RealMatrix == false
AbstractRealMatrix.java,equals,object,null,0,RET,$ instanceof RealMatrix
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getColumnDimension() != nCols
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getRowDimension() != nRows
SymmLQ.java,checkSymmetry,s,double,0,DEF,FastMath.abs($ - t) > epsa
SymmLQ.java,checkSymmetry,t,double,0,DEF,FastMath.abs(s - $) > epsa
SymmLQ.java,refineSolution,lqnorm,double,1,DEF,$ < cgnorm
SymmLQ.java,update,m,RealLinearOperator,0,DEF,$ != null
SymmLQ.java,update,beta,double,0,DEF,$ < 0.
SymmLQ.java,updateNorms,lqnorm,double,1,DEF,$ <= cgnorm
SymmLQ.java,updateNorms,acond,double,0,IllConditionedOperatorException,$ * MACH_PREC >= 0.1
SymmLQ.java,updateNorms,MACH_PREC,double,0,IllConditionedOperatorException,acond * $ >= 0.1
SymmLQ.java,updateNorms,beta1,double,0,SingularOperatorException,$ <= epsx
BlockRealMatrix.java,toBlocksLayout,length,int,0,DimensionMismatchException,$ != columns
BlockRealMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,setSubMatrix,refLength,int,0,NoDataException,$ == 0
BlockRealMatrix.java,setSubMatrix,subRow,double[],0,DimensionMismatchException,$.length != refLength
BlockRealMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
BlockRealMatrix.java,setRowMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
BlockRealMatrix.java,setRowMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
BlockRealMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
BlockRealMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
BlockRealMatrix.java,setColumnMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
BlockRealMatrix.java,setColumnMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
BlockRealMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
BlockRealMatrix.java,setRow,array,double[],0,MatrixDimensionMismatchException,$.length != nCols
BlockRealMatrix.java,setColumn,array,double[],0,MatrixDimensionMismatchException,$.length != nRows
BlockRealMatrix.java,operate,v,double[],0,DimensionMismatchException,$.length != columns
BlockRealMatrix.java,preMultiply,v,double[],0,DimensionMismatchException,$.length != rows
MatrixUtils.java,createRealMatrix,data,double[][],0,NullArgumentException,$ == null
MatrixUtils.java,createRealMatrix,data,double[][],0,NullArgumentException,$[0] == null
MatrixUtils.java,createFieldMatrix,data,T[][],0,NullArgumentException,$ == null
MatrixUtils.java,createFieldMatrix,data,T[][],0,NullArgumentException,$[0] == null
MatrixUtils.java,createRealVector,data,double[],0,NullArgumentException,$ == null
MatrixUtils.java,createFieldVector,data,T[],0,NullArgumentException,$ == null
MatrixUtils.java,createFieldVector,data,T[],0,ZeroException,$.length == 0
MatrixUtils.java,createRowRealMatrix,rowData,double[],0,NullArgumentException,$ == null
MatrixUtils.java,createRowFieldMatrix,rowData,T[],0,NullArgumentException,$ == null
MatrixUtils.java,createRowFieldMatrix,nCols,int,0,NoDataException,$ == 0
MatrixUtils.java,createColumnRealMatrix,columnData,double[],0,NullArgumentException,$ == null
MatrixUtils.java,createColumnFieldMatrix,columnData,T[],0,NullArgumentException,$ == null
MatrixUtils.java,createColumnFieldMatrix,nRows,int,0,NoDataException,$ == 0
MatrixUtils.java,checkRowIndex,row,int,0,OutOfRangeException,$ < 0
MatrixUtils.java,checkColumnIndex,column,int,0,OutOfRangeException,$ < 0
MatrixUtils.java,checkSubMatrixIndex,endRow,int,0,NumberIsTooSmallException,$ < startRow
MatrixUtils.java,checkSubMatrixIndex,endColumn,int,0,NumberIsTooSmallException,$ < startColumn
MatrixUtils.java,checkSubMatrixIndex,selectedRows,int[],0,NullArgumentException,$ == null
MatrixUtils.java,checkSubMatrixIndex,selectedColumns,int[],0,NullArgumentException,$ == null
MatrixUtils.java,checkSubMatrixIndex,selectedRows,int[],0,NoDataException,$.length == 0
MatrixUtils.java,checkSubMatrixIndex,selectedColumns,int[],0,NoDataException,$.length == 0
MatrixUtils.java,solveLowerTriangularSystem,rm,RealMatrix,0,DimensionMismatchException,$ == null
MatrixUtils.java,solveLowerTriangularSystem,b,RealVector,0,DimensionMismatchException,$ == null
MatrixUtils.java,solveLowerTriangularSystem,diag,double,0,MathArithmeticException,FastMath.abs($) < Precision.SAFE_MIN
MatrixUtils.java,solveUpperTriangularSystem,rm,RealMatrix,0,DimensionMismatchException,$ == null
MatrixUtils.java,solveUpperTriangularSystem,b,RealVector,0,DimensionMismatchException,$ == null
MatrixUtils.java,solveUpperTriangularSystem,diag,double,0,MathArithmeticException,FastMath.abs($) < Precision.SAFE_MIN
MatrixUtils.java,blockInverse,m,RealMatrix,0,NonSquareMatrixException,$.getColumnDimension() != n
SchurTransformer.java,getP,cachedP,RealMatrix,0,DEF,$ == null
SchurTransformer.java,getPT,cachedPt,RealMatrix,0,DEF,$ == null
SchurTransformer.java,getT,cachedT,RealMatrix,0,DEF,$ == null
SchurTransformer.java,transform,il,int,1,DEF,$ == iu
SchurTransformer.java,transform,q,double,0,DEF,$ >= 0
SchurTransformer.java,transform,p,double,1,DEF,$ >= 0
SchurTransformer.java,transform,iteration,int,0,MaxCountExceededException,++$ > MAX_ITERATIONS
SchurTransformer.java,findSmallSubDiagonalElement,s,double,0,DEF,$ == 0.0
SchurTransformer.java,computeShift,l,int,0,DEF,$ < idx
SchurTransformer.java,computeShift,iteration,int,0,DEF,$ == 10
SchurTransformer.java,computeShift,iteration,int,0,DEF,$ == 30
SchurTransformer.java,computeShift,s,double,0,DEF,$ > 0.0
SchurTransformer.java,computeShift,shift,ShiftInfo,0,DEF,$.y < shift.x
SchurTransformer.java,initQRStep,im,int,0,DEF,$ == il
SchurTransformer.java,performDoubleQRStep,k,int,0,DEF,$ != im
SchurTransformer.java,performDoubleQRStep,shift,ShiftInfo,0,DEF,$.x == 0.0
SchurTransformer.java,performDoubleQRStep,p,double,0,DEF,$ < 0.0
SchurTransformer.java,performDoubleQRStep,s,double,0,DEF,$ != 0.0
SchurTransformer.java,performDoubleQRStep,k,int,1,DEF,$ != im
SchurTransformer.java,performDoubleQRStep,il,int,0,DEF,$ != im
RealVector.java,checkVectorDimensions,d,int,0,DimensionMismatchException,$ != n
RealVector.java,checkIndex,index,int,0,OutOfRangeException,$ < 0
RealVector.java,checkIndices,start,int,0,OutOfRangeException,$ < 0
RealVector.java,checkIndices,start,int,0,OutOfRangeException,$ >= dim
RealVector.java,checkIndices,end,int,0,OutOfRangeException,$ < 0
RealVector.java,checkIndices,end,int,0,OutOfRangeException,$ >= dim
RealVector.java,checkIndices,end,int,0,NumberIsTooSmallException,$ < start
RealVector.java,mapAddToSelf,d,double,0,RET,$ != 0
RealVector.java,cosine,norm,double,0,MathArithmeticException,$ == 0
RealVector.java,cosine,vNorm,double,0,MathArithmeticException,$ == 0
RealVector.java,getMinIndex,entry,Entry,0,DEF,$.getValue() <= minValue
RealVector.java,getMaxIndex,entry,Entry,0,DEF,$.getValue() >= maxValue
RealVector.java,outerProduct,v,null,1,DEF,$ instanceof SparseRealVector
RealVector.java,projection,norm2,double,0,MathArithmeticException,$ == 0.0
RealVector.java,unitVector,norm,double,0,MathArithmeticException,$ == 0
RealVector.java,unitize,norm,double,0,MathArithmeticException,$ == 0
RealVector.java,next,i,int,1,RET,$ < dim
RealVector.java,SparseEntryIterator,next,Entry,0,DEF,$.getValue() == 0
RealVector.java,advance,e,Entry,0,RET,$ == null
RealVector.java,advance,e,Entry,0,DEF,$.getIndex() >= dim
RealVector.java,next,index,int,0,NoSuchElementException,$ < 0
TriDiagonalTransformer.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,cachedQt,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,hK,double[],0,DEF,$[k] != 0.0
TriDiagonalTransformer.java,getQT,k,int,0,DEF,hK[$] != 0.0
TriDiagonalTransformer.java,getT,cachedT,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getT,i,int,0,DEF,$ > 0
TriDiagonalTransformer.java,transform,a,double,0,DEF,$ != 0.0
DefaultIterativeLinearSolverEvent.java,getResidual,r,RealVector,0,RET,$ != null
DiagonalMatrix.java,createMatrix,rowDimension,int,0,DimensionMismatchException,$ != columnDimension
DiagonalMatrix.java,multiply,m,null,1,RET,$ instanceof DiagonalMatrix
DiagonalMatrix.java,setEntry,row,int,1,DEF,$ == column
DiagonalMatrix.java,addToEntry,row,int,1,DEF,$ == column
DiagonalMatrix.java,multiplyEntry,row,int,0,DEF,$ == column
HessenbergTransformer.java,getP,cachedP,RealMatrix,0,DEF,$ == null
HessenbergTransformer.java,getP,householderVectors,double[][],0,DEF,$[m][m - 1] != 0.0
HessenbergTransformer.java,getP,m,int,0,DEF,householderVectors[$][$ - 1] != 0.0
HessenbergTransformer.java,getPT,cachedPt,RealMatrix,0,DEF,$ == null
HessenbergTransformer.java,getH,cachedH,RealMatrix,0,DEF,$ == null
HessenbergTransformer.java,getH,i,int,0,DEF,$ > 0
RRQRDecomposition.java,performHouseholderReflection,l2NormSquared,double,0,DEF,$ > l2NormSquaredMax
RRQRDecomposition.java,performHouseholderReflection,l2NormSquaredMaxIndex,int,0,DEF,$ != minor
RRQRDecomposition.java,getP,cachedP,RealMatrix,0,DEF,$ == null
RRQRDecomposition.java,getRank,thisNorm,double,0,DEF,$ == 0
RRQRDecomposition.java,getRank,lastNorm,double,0,DEF,(thisNorm / $) * rNorm < dropThreshold
RRQRDecomposition.java,getRank,rNorm,double,0,DEF,(thisNorm / lastNorm) * $ < dropThreshold
RRQRDecomposition.java,getRank,thisNorm,double,0,DEF,($ / lastNorm) * rNorm < dropThreshold
QRDecomposition.java,performHouseholderReflection,a,double,0,DEF,$ != 0.0
QRDecomposition.java,getR,cachedR,RealMatrix,0,DEF,$ == null
QRDecomposition.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
QRDecomposition.java,getQT,cachedQT,RealMatrix,0,DEF,$ == null
QRDecomposition.java,getQT,minor,int,0,DEF,qrtMinor[$] != 0.0
QRDecomposition.java,getQT,qrtMinor,double[],0,DEF,$[minor] != 0.0
QRDecomposition.java,getH,cachedH,RealMatrix,0,DEF,$ == null
QRDecomposition.java,isNonSingular,diag,double,0,RET,FastMath.abs($) <= threshold
QRDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
QRDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
OpenMapRealMatrix.java,OpenMapRealMatrix,lCol,long,0,NumberIsTooLargeException,lRow * $ >= Integer.MAX_VALUE
OpenMapRealMatrix.java,OpenMapRealMatrix,lRow,long,0,NumberIsTooLargeException,$ * lCol >= Integer.MAX_VALUE
OpenMapRealMatrix.java,multiply,outValue,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,setEntry,value,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,addToEntry,value,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,multiplyEntry,value,double,1,DEF,$ == 0.0
SparseFieldVector.java,append,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,getSubVector,n,int,0,NotPositiveException,$ < 0
SparseFieldVector.java,getSubVector,key,int,0,DEF,$ >= index
SparseFieldVector.java,getSubVector,key,int,0,DEF,$ < end
SparseFieldVector.java,outerProduct,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,subtract,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,checkIndex,index,int,0,OutOfRangeException,$ < 0
SparseFieldVector.java,add,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,equals,obj,null,0,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,equals,field,Field<T>,1,RET,$ == null
SparseFieldVector.java,equals,other,SparseFieldVector<T>,0,RET,$.field != null
SparseFieldVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
AbstractFieldMatrix.java,AbstractFieldMatrix,rowDimension,int,0,NotStrictlyPositiveException,$ <= 0
AbstractFieldMatrix.java,AbstractFieldMatrix,columnDimension,int,0,NotStrictlyPositiveException,$ <= 0
AbstractFieldMatrix.java,extractField,d,T[][],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,extractField,d,T[][],0,NoDataException,$.length == 0
AbstractFieldMatrix.java,extractField,d,T[][],0,NoDataException,$[0].length == 0
AbstractFieldMatrix.java,extractField,d,T[],0,NoDataException,$.length == 0
AbstractFieldMatrix.java,power,p,int,0,NotPositiveException,$ < 0
AbstractFieldMatrix.java,power,p,int,0,RET,$ == 0
AbstractFieldMatrix.java,power,p,int,0,RET,$ == 1
AbstractFieldMatrix.java,power,i,int,0,DEF,binaryRepresentation[$] == '1'
AbstractFieldMatrix.java,power,binaryRepresentation,char[],0,DEF,$[i] == '1'
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$.length < rowsCount
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$[0].length < columnsCount
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$.length < selectedRows.length
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$[0].length < selectedColumns.length
AbstractFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
AbstractFieldMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
AbstractFieldMatrix.java,setSubMatrix,r,int,0,DimensionMismatchException,subMatrix[$].length != nCols
AbstractFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,DimensionMismatchException,$[r].length != nCols
AbstractFieldMatrix.java,setRowMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
AbstractFieldMatrix.java,setRowMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
AbstractFieldMatrix.java,setColumnMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
AbstractFieldMatrix.java,setColumnMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
AbstractFieldMatrix.java,setRowVector,vector,FieldVector<T>,0,MatrixDimensionMismatchException,$.getDimension() != nCols
AbstractFieldMatrix.java,setColumnVector,vector,FieldVector<T>,0,MatrixDimensionMismatchException,$.getDimension() != nRows
AbstractFieldMatrix.java,setRow,array,T[],0,MatrixDimensionMismatchException,$.length != nCols
AbstractFieldMatrix.java,setColumn,array,T[],0,MatrixDimensionMismatchException,$.length != nRows
AbstractFieldMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractFieldMatrix.java,operate,v,T[],0,DimensionMismatchException,$.length != nCols
AbstractFieldMatrix.java,operate,v,FieldVector<T>,0,DimensionMismatchException,$.getDimension() != nCols
AbstractFieldMatrix.java,preMultiply,v,T[],0,DimensionMismatchException,$.length != nRows
AbstractFieldMatrix.java,preMultiply,v,FieldVector<T>,0,DimensionMismatchException,$.getDimension() != nRows
AbstractFieldMatrix.java,toString,i,int,0,DEF,$ > 0
AbstractFieldMatrix.java,toString,j,int,0,DEF,$ > 0
AbstractFieldMatrix.java,equals,object,Object,0,RET,$ instanceof FieldMatrix<?> == false
AbstractFieldMatrix.java,equals,object,null,0,RET,$ instanceof FieldMatrix<?>
AbstractFieldMatrix.java,equals,m,FieldMatrix<>,0,RET,$.getColumnDimension() != nCols
AbstractFieldMatrix.java,equals,m,FieldMatrix<>,0,RET,$.getRowDimension() != nRows
AbstractFieldMatrix.java,checkRowIndex,row,int,0,OutOfRangeException,$ < 0
AbstractFieldMatrix.java,checkColumnIndex,column,int,0,OutOfRangeException,$ < 0
AbstractFieldMatrix.java,checkSubMatrixIndex,endRow,int,0,NumberIsTooSmallException,$ < startRow
AbstractFieldMatrix.java,checkSubMatrixIndex,endColumn,int,0,NumberIsTooSmallException,$ < startColumn
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedColumns,int[],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,NoDataException,$.length == 0
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedColumns,int[],0,NoDataException,$.length == 0
LUDecomposition.java,LUDecomposition,sum,double,0,DEF,FastMath.abs($) > largest
LUDecomposition.java,LUDecomposition,col,int,0,RET,FastMath.abs(lu[max][$]) < singularityThreshold
LUDecomposition.java,LUDecomposition,max,int,0,RET,FastMath.abs(lu[$][col]) < singularityThreshold
LUDecomposition.java,LUDecomposition,lu,double[][],0,RET,FastMath.abs($[max][col]) < singularityThreshold
LUDecomposition.java,LUDecomposition,max,int,0,DEF,$ != col
LUDecomposition.java,getL,cachedL,RealMatrix,0,DEF,$ == null
LUDecomposition.java,getU,cachedU,RealMatrix,0,DEF,$ == null
LUDecomposition.java,getP,cachedP,RealMatrix,0,DEF,$ == null
LUDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
LUDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
EigenDecomposition.java,getV,cachedV,RealMatrix,0,DEF,$ == null
EigenDecomposition.java,getD,cachedD,RealMatrix,0,DEF,$ == null
EigenDecomposition.java,getD,imagEigenvalues,double[],1,DEF,Precision.compareTo($[i], 0.0, EPSILON) > 0
EigenDecomposition.java,getD,i,int,1,DEF,Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) > 0
EigenDecomposition.java,getD,EPSILON,double,1,DEF,Precision.compareTo(imagEigenvalues[i], 0.0, $) > 0
EigenDecomposition.java,getD,imagEigenvalues,double[],0,DEF,Precision.compareTo($[i], 0.0, EPSILON) < 0
EigenDecomposition.java,getD,i,int,0,DEF,Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0
EigenDecomposition.java,getD,EPSILON,double,0,DEF,Precision.compareTo(imagEigenvalues[i], 0.0, $) < 0
EigenDecomposition.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
EigenDecomposition.java,getSquareRoot,eigen,double,0,MathUnsupportedOperationException,$ <= 0
EigenDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
EigenDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
EigenDecomposition.java,isNonSingular,realEigenvalues,double[],0,RET,$[i] == 0
EigenDecomposition.java,isNonSingular,i,int,0,RET,realEigenvalues[$] == 0
EigenDecomposition.java,isNonSingular,imagEigenvalues,double[],0,RET,$[i] == 0
EigenDecomposition.java,isNonSingular,i,int,0,RET,imagEigenvalues[$] == 0
EigenDecomposition.java,findEigenVectors,realEigenvalues,double[],0,DEF,FastMath.abs($[i]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,e,double[],0,DEF,FastMath.abs($[i]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,FastMath.abs(e[$]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,maxAbsoluteValue,double,0,DEF,$ != 0
EigenDecomposition.java,findEigenVectors,e,double[],0,DEF,FastMath.abs($[m]) + delta == delta
EigenDecomposition.java,findEigenVectors,delta,double,0,DEF,FastMath.abs(e[m]) + $ == delta
EigenDecomposition.java,findEigenVectors,m,int,0,DEF,FastMath.abs(e[$]) + delta == delta
EigenDecomposition.java,findEigenVectors,m,int,0,MaxCountExceededException,$ != j
EigenDecomposition.java,findEigenVectors,its,int,0,MaxCountExceededException,$ == maxIter
EigenDecomposition.java,findEigenVectors,q,double,1,DEF,$ < 0.0
EigenDecomposition.java,findEigenVectors,e,double[],0,DEF,$[i + 1] == 0.0
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,e[$ + 1] == 0.0
EigenDecomposition.java,findEigenVectors,t,double,0,DEF,$ == 0.0
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,$ >= j
EigenDecomposition.java,findEigenVectors,realEigenvalues,double[],0,DEF,$[j] > p
EigenDecomposition.java,findEigenVectors,j,int,0,DEF,realEigenvalues[$] > p
EigenDecomposition.java,findEigenVectors,k,int,0,DEF,$ != i
EigenDecomposition.java,findEigenVectors,realEigenvalues,double[],0,DEF,FastMath.abs($[i]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,maxAbsoluteValue,double,0,DEF,$ != 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,imagEigenvalues,double[],1,DEF,Precision.compareTo($[i], 0.0, EPSILON) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,i,int,1,DEF,Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,EPSILON,double,1,DEF,Precision.compareTo(imagEigenvalues[i], 0.0, $) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,w,double,1,DEF,$ != 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,t,double,0,DEF,(Precision.EPSILON * $) * $ > 1
EigenDecomposition.java,findEigenVectorsFromSchur,q,double,0,DEF,$ < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,imagEigenvalues,double[],1,DEF,Precision.compareTo($[i], 0.0, EPSILON) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,i,int,1,DEF,Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,EPSILON,double,1,DEF,Precision.compareTo(imagEigenvalues[i], 0.0, $) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,t,double,0,DEF,(Precision.EPSILON * $) * $ > 1
EigenDecomposition.java,findEigenVectorsFromSchur,i,int,0,DEF,$ < 0
BlockFieldMatrix.java,toBlocksLayout,length,int,0,DimensionMismatchException,$ != columns
BlockFieldMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,setSubMatrix,refLength,int,0,NoDataException,$ == 0
BlockFieldMatrix.java,setSubMatrix,subRow,T[],0,DimensionMismatchException,$.length != refLength
BlockFieldMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
BlockFieldMatrix.java,setRowMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
BlockFieldMatrix.java,setRowMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
BlockFieldMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
BlockFieldMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
BlockFieldMatrix.java,setColumnMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
BlockFieldMatrix.java,setColumnMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
BlockFieldMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
BlockFieldMatrix.java,setRow,array,T[],0,MatrixDimensionMismatchException,$.length != nCols
BlockFieldMatrix.java,setColumn,array,T[],0,MatrixDimensionMismatchException,$.length != nRows
BlockFieldMatrix.java,operate,v,T[],0,DimensionMismatchException,$.length != columns
BlockFieldMatrix.java,preMultiply,v,T[],0,DimensionMismatchException,$.length != rows
PreconditionedIterativeLinearSolver.java,checkParameters,m,RealLinearOperator,0,DimensionMismatchException,$ != null
CholeskyDecomposition.java,CholeskyDecomposition,lJI,double,0,NonSymmetricMatrixException,FastMath.abs(lIJ - $) > maxDelta
CholeskyDecomposition.java,CholeskyDecomposition,lIJ,double,0,NonSymmetricMatrixException,FastMath.abs($ - lJI) > maxDelta
CholeskyDecomposition.java,CholeskyDecomposition,ltI,double[],0,NonPositiveDefiniteMatrixException,$[i] <= absolutePositivityThreshold
CholeskyDecomposition.java,CholeskyDecomposition,i,int,0,NonPositiveDefiniteMatrixException,ltI[$] <= absolutePositivityThreshold
CholeskyDecomposition.java,getL,cachedL,RealMatrix,0,DEF,$ == null
CholeskyDecomposition.java,getLT,cachedLT,RealMatrix,0,DEF,$ == null
CholeskyDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
CholeskyDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,r,int,0,DimensionMismatchException,d[$].length != nCols
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,d,T[][],0,DimensionMismatchException,$[r].length != nCols
Array2DRowFieldMatrix.java,setSubMatrix,data,T[][],1,DimensionMismatchException,$ == null
Array2DRowFieldMatrix.java,setSubMatrix,row,int,0,MathIllegalStateException,$ > 0
Array2DRowFieldMatrix.java,setSubMatrix,column,int,0,MathIllegalStateException,$ > 0
Array2DRowFieldMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,setSubMatrix,i,int,0,DimensionMismatchException,subMatrix[$].length != nCols
Array2DRowFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,DimensionMismatchException,$[i].length != nCols
Array2DRowFieldMatrix.java,operate,v,T[],0,DimensionMismatchException,$.length != nCols
Array2DRowFieldMatrix.java,preMultiply,v,T[],0,DimensionMismatchException,$.length != nRows
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nct
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,singularValues[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,A,double[][],0,DEF,$[k][k] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,A[$][$] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nct
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,singularValues[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nct
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nrt
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k + 1] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$ + 1] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ + 1 < m
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,nct,int,0,DEF,$ < n
SingularValueDecomposition.java,SingularValueDecomposition,m,int,0,DEF,$ < p
SingularValueDecomposition.java,SingularValueDecomposition,nrt,int,0,DEF,$ + 1 < p
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],1,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,1,DEF,singularValues[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nrt
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,FastMath.abs($[k]) > threshold
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,FastMath.abs(e[$]) > threshold
SingularValueDecomposition.java,SingularValueDecomposition,ks,int,0,DEF,$ == k
SingularValueDecomposition.java,SingularValueDecomposition,ks,int,1,DEF,$ == k
SingularValueDecomposition.java,SingularValueDecomposition,j,int,0,DEF,$ != k
SingularValueDecomposition.java,SingularValueDecomposition,b,double,0,DEF,$ != 0
SingularValueDecomposition.java,SingularValueDecomposition,c,double,0,DEF,$ != 0
SingularValueDecomposition.java,SingularValueDecomposition,b,double,0,DEF,$ < 0
SingularValueDecomposition.java,SingularValueDecomposition,j,int,0,DEF,$ != k
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],0,DEF,$[k] <= 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,singularValues[$] <= 0
SingularValueDecomposition.java,getUT,cachedUt,RealMatrix,0,DEF,$ == null
SingularValueDecomposition.java,getS,cachedS,RealMatrix,0,DEF,$ == null
SingularValueDecomposition.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
SingularValueDecomposition.java,getCovariance,dimension,int,0,NumberIsTooLargeException,$ == 0
SingularValueDecomposition.java,getRank,singularValues,double[],0,DEF,$[i] > tol
SingularValueDecomposition.java,getRank,i,int,0,DEF,singularValues[$] > tol
SingularValueDecomposition.java,Solver,singularValues,double[],1,DEF,$[i] > tol
SingularValueDecomposition.java,Solver,i,int,1,DEF,singularValues[$] > tol
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,ZeroException,$.length == 0
ArrayFieldVector.java,ArrayFieldVector,v1,T[],0,ZeroException,$.length + v2.length == 0
ArrayFieldVector.java,ArrayFieldVector,v2,T[],0,ZeroException,v1.length + $.length == 0
ArrayFieldVector.java,ArrayFieldVector,v1,T[],0,ZeroException,$.length + v2.length == 0
ArrayFieldVector.java,ArrayFieldVector,v2,T[],0,ZeroException,v1.length + $.length == 0
ArrayFieldVector.java,getSubVector,n,int,0,NotPositiveException,$ < 0
ArrayFieldVector.java,checkVectorDimensions,data,T[],0,DimensionMismatchException,$.length != n
ArrayFieldVector.java,equals,other,Object,0,RET,$ == null
ArrayFieldVector.java,checkIndex,index,int,0,OutOfRangeException,$ < 0
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,swapR,int,0,DEF,$ != r
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,c,double[][],1,NonPositiveDefiniteMatrixException,$[ir][ir] <= small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,ir,int,1,NonPositiveDefiniteMatrixException,c[$][$] <= small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,r,int,0,NonPositiveDefiniteMatrixException,$ == 0
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,c,double[][],0,NonPositiveDefiniteMatrixException,$[index[i]][index[i]] < -small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,index,int[],0,NonPositiveDefiniteMatrixException,c[$[i]][$[i]] < -small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,i,int,0,NonPositiveDefiniteMatrixException,c[index[$]][index[$]] < -small
ArrayRealVector.java,ArrayRealVector,d,double[],0,NullArgumentException,$ == null
ArrayRealVector.java,ArrayRealVector,d,double[],0,NullArgumentException,$ == null
ArrayRealVector.java,ArrayRealVector,d,Double[],0,NullArgumentException,$ == null
ArrayRealVector.java,ArrayRealVector,v,RealVector,0,NullArgumentException,$ == null
ArrayRealVector.java,add,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,subtract,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,ebeMultiply,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,ebeDivide,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,dotProduct,v,null,0,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getDistance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getL1Distance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getLInfDistance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,outerProduct,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getSubVector,n,int,0,NotPositiveException,$ < 0
ArrayRealVector.java,setSubVector,v,null,1,DEF,$ instanceof ArrayRealVector
ArrayRealVector.java,checkVectorDimensions,data,double[],0,DimensionMismatchException,$.length != n
ArrayRealVector.java,equals,other,null,0,RET,$ instanceof RealVector
ArrayRealVector.java,combineToSelf,y,null,1,DEF,$ instanceof ArrayRealVector
RealMatrixFormat.java,format,j,int,0,DEF,$ > 0
RealMatrixFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
RealMatrixFormat.java,parse,trimmedRowSuffix,String,1,RET,$.length() != 0
RealMatrixFormat.java,parse,trimmedRowPrefix,String,0,RET,$.length() != 0
RealMatrixFormat.java,parse,component,Number,1,DEF,$ != null
BiDiagonalTransformer.java,BiDiagonalTransformer,m,int,1,DEF,$ >= n
BiDiagonalTransformer.java,getU,cachedU,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getU,hK,double[],0,DEF,$[k - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,k,int,0,DEF,hK[$ - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,hK[k - $] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getB,cachedB,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getB,m,int,1,DEF,$ < n
BiDiagonalTransformer.java,getB,i,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getV,cachedV,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getV,hK,double[],0,DEF,$[k] != 0.0
BiDiagonalTransformer.java,getV,k,int,0,DEF,hK[$] != 0.0
BiDiagonalTransformer.java,getV,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,b,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,b,double,0,DEF,$ != 0.0
FieldLUDecomposition.java,FieldLUDecomposition,nonZero,int,0,RET,$ >= m
FieldLUDecomposition.java,FieldLUDecomposition,nonZero,int,0,DEF,$ != col
FieldLUDecomposition.java,getL,cachedL,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecomposition.java,getU,cachedU,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecomposition.java,getP,cachedP,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecomposition.java,solve,b,FieldVector<T>,0,DimensionMismatchException,$.getDimension() != m
FieldLUDecomposition.java,solve,length,int,0,DimensionMismatchException,$ != m
FieldLUDecomposition.java,solve,b,FieldMatrix<T>,0,DimensionMismatchException,$.getRowDimension() != m
OpenMapRealVector.java,add,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,append,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getSubVector,n,int,0,NotPositiveException,$ < 0
OpenMapRealVector.java,getSubVector,key,int,0,DEF,$ >= index
OpenMapRealVector.java,getSubVector,key,int,0,DEF,$ < end
OpenMapRealVector.java,getDistance,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getL1Distance,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getLInfDistance,delta,double,0,DEF,$ > max
OpenMapRealVector.java,getLInfDistance,iter,Iterator,0,DEF,$.value() > max
OpenMapRealVector.java,getLInfDistance,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,subtract,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,equals,obj,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
DfpDec.java,round,msb,int,0,RET,$ == 0
DfpDec.java,round,lsbthreshold,int,0,RET,$ <= 1
DfpDec.java,round,lsbthreshold,int,1,DEF,$ == 1
DfpDec.java,round,rh,int,0,DEF,$ != 0
DfpDec.java,round,exp,int,0,RET,$ < MIN_EXP
DfpDec.java,round,exp,int,0,RET,$ > MAX_EXP
DfpDec.java,round,n,int,0,RET,$ != 0
DfpDec.java,round,discarded,int,0,RET,$ != 0
DfpDec.java,nextAfter,result,Dfp,0,DEF,$.classify() == INFINITE
Dfp.java,Dfp,x,long,0,DEF,$ == Long.MIN_VALUE
Dfp.java,Dfp,x,long,1,DEF,$ < 0
Dfp.java,Dfp,mant,int[],0,DEF,$[i] != 0
Dfp.java,Dfp,i,int,0,DEF,mant[$] != 0
Dfp.java,Dfp,exponent,int,0,RET,$ == -1023
Dfp.java,Dfp,x,double,0,RET,$ == 0
Dfp.java,Dfp,bits,long,0,DEF,($ & 0x8000000000000000L) != 0
Dfp.java,Dfp,exponent,int,0,RET,$ == 1024
Dfp.java,Dfp,x,double,1,DEF,$ != x
Dfp.java,Dfp,x,double,1,DEF,$ < 0
Dfp.java,Dfp,bits,long,0,DEF,($ & 0x8000000000000000L) != 0
Dfp.java,Dfp,p,int,0,DEF,$ == -1
Dfp.java,Dfp,p,int,1,DEF,$ != -1
Dfp.java,Dfp,fpexp,String,0,DEF,$.charAt(i) == '-'
Dfp.java,Dfp,i,int,0,DEF,fpexp.charAt($) == '-'
Dfp.java,Dfp,fpexp,String,0,DEF,$.charAt(i) >= '0'
Dfp.java,Dfp,i,int,0,DEF,fpexp.charAt($) >= '0'
Dfp.java,Dfp,fpexp,String,0,DEF,$.charAt(i) <= '9'
Dfp.java,Dfp,i,int,0,DEF,fpexp.charAt($) <= '9'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.indexOf(-") != -1"
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) >= '1'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) >= '1'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) <= '9'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) <= '9'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) == '0'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) == '0'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) == '.'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) == '.'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) == '.'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) == '.'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) < '0'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) < '0'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) > '9'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) > '9'
Dfp.java,Dfp,q,int,0,DEF,$ != offset
Dfp.java,Dfp,q,int,0,DEF,$ == offset
Dfp.java,Dfp,striped,char[],1,DEF,$[q] == '0'
Dfp.java,Dfp,q,int,1,DEF,striped[$] == '0'
Dfp.java,Dfp,significantDigits,int,0,DEF,$ == 0
Dfp.java,Dfp,p,int,0,DEF,striped[$] != '0'
Dfp.java,Dfp,striped,char[],0,DEF,$[p] != '0'
Dfp.java,Dfp,q,int,0,DEF,$ < striped.length
Dfp.java,align,adiff,int,0,DEF,$ < 0
Dfp.java,align,diff,int,0,RET,$ == 0
Dfp.java,align,diff,int,1,DEF,$ < 0
Dfp.java,align,lostdigit,int,0,DEF,$ != 0
Dfp.java,equals,other,null,0,RET,$ instanceof Dfp
Dfp.java,compare,a,Dfp,0,RET,$.mant[$.mant.length - 1] == 0
Dfp.java,compare,b,Dfp,0,RET,$.mant[$.mant.length - 1] == 0
Dfp.java,compare,a,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,a,Dfp,0,RET,$.sign != b.sign
Dfp.java,compare,a,Dfp,1,RET,$.sign == -1
Dfp.java,compare,a,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,a,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,a,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,b,Dfp,0,RET,$.mant[$.mant.length-1] != 0
Dfp.java,compare,a,Dfp,0,RET,$.mant[b.mant.length-1] != 0
Dfp.java,compare,b,Dfp,0,RET,a.mant[$.mant.length-1] != 0
Dfp.java,compare,a,Dfp,0,RET,$.exp < b.exp
Dfp.java,compare,a,Dfp,0,RET,$.exp > b.exp
Dfp.java,remainder,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,remainder,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,trunc,nans,byte,0,RET,$ == INFINITE
Dfp.java,trunc,mant,int[],0,RET,$[$.length-1] == 0
Dfp.java,trunc,exp,int,0,RET,$ < 0
Dfp.java,trunc,exp,int,0,RET,$ >= mant.length
Dfp.java,trunc,result,Dfp,0,DEF,$.sign == -1
Dfp.java,trunc,result,Dfp,0,DEF,$.sign == 1
Dfp.java,trunc,result,Dfp,0,DEF,$.exp > 0
Dfp.java,trunc,result,Dfp,0,DEF,($.mant[mant.length-$.exp]&1) != 0
Dfp.java,trunc,mant,int[],0,DEF,(result.mant[$.length-result.exp]&1) != 0
Dfp.java,intValue,rounded,Dfp,0,DEF,$.sign == -1
Dfp.java,intLog10,mant,int[],0,RET,$[$.length-1] > 1000
Dfp.java,intLog10,mant,int[],0,RET,$[$.length-1] > 100
Dfp.java,intLog10,mant,int[],0,RET,$[$.length-1] > 10
Dfp.java,power10,e,int,1,DEF,$ >= 0
Dfp.java,add,nans,byte,0,RET,$ != FINITE
Dfp.java,add,x,Dfp,0,RET,$.nans != FINITE
Dfp.java,add,nans,byte,0,RET,$ == INFINITE
Dfp.java,add,x,Dfp,0,RET,$.nans == FINITE
Dfp.java,add,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,add,nans,byte,0,RET,$ == FINITE
Dfp.java,add,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,add,nans,byte,0,RET,$ == INFINITE
Dfp.java,add,sign,byte,0,RET,$ == x.sign
Dfp.java,add,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,add,nans,byte,0,RET,$ == INFINITE
Dfp.java,add,sign,byte,0,RET,$ != x.sign
Dfp.java,add,a,Dfp,0,DEF,compare($, b) > 0
Dfp.java,add,b,Dfp,0,DEF,compare(a, $) > 0
Dfp.java,add,b,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,add,mant,int[],0,DEF,b.mant[$.length-1] == 0
Dfp.java,add,a,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,add,mant,int[],0,DEF,a.mant[$.length-1] == 0
Dfp.java,add,a,Dfp,1,DEF,$.exp < b.exp
Dfp.java,add,asign,byte,0,DEF,$ != bsign
Dfp.java,add,asign,byte,1,DEF,$ == rsign
Dfp.java,add,rh,int,0,DEF,$ != 0
Dfp.java,add,asign,byte,0,DEF,$ == bsign
Dfp.java,add,excp,int,0,DEF,$ != 0
Dfp.java,add,result,Dfp,0,DEF,$.mant[mant.length-1] != 0
Dfp.java,add,mant,int[],0,DEF,result.mant[$.length-1] != 0
Dfp.java,add,i,int,0,DEF,$ == 0
Dfp.java,add,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,add,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,add,asign,byte,0,DEF,$ != bsign
Dfp.java,add,excp,int,0,DEF,$ != 0
Dfp.java,round,rh,int,0,DEF,$ != 0
Dfp.java,round,exp,int,0,RET,$ < MIN_EXP
Dfp.java,round,exp,int,0,RET,$ > MAX_EXP
Dfp.java,round,n,int,0,RET,$ != 0
Dfp.java,multiply,nans,byte,0,RET,$ != FINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans != FINITE
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans == FINITE
Dfp.java,multiply,x,Dfp,0,RET,$.mant[mant.length-1] != 0
Dfp.java,multiply,mant,int[],0,RET,x.mant[$.length-1] != 0
Dfp.java,multiply,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,multiply,nans,byte,0,RET,$ == FINITE
Dfp.java,multiply,mant,int[],0,RET,$[$.length-1] != 0
Dfp.java,multiply,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,multiply,nans,byte,0,RET,$ == FINITE
Dfp.java,multiply,mant,int[],0,RET,$[$.length-1] == 0
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans == FINITE
Dfp.java,multiply,x,Dfp,0,RET,$.mant[mant.length-1] == 0
Dfp.java,multiply,mant,int[],0,RET,x.mant[$.length-1] == 0
Dfp.java,multiply,product,int[],0,DEF,$[i] != 0
Dfp.java,multiply,i,int,0,DEF,product[$] != 0
Dfp.java,multiply,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,multiply,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,multiply,excp,int,0,DEF,$ != 0
Dfp.java,multiply,x,int,1,RET,$ >= 0
Dfp.java,multiply,x,int,1,RET,$ < RADIX
Dfp.java,multiplyFast,nans,byte,0,RET,$ != FINITE
Dfp.java,multiplyFast,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiplyFast,x,int,0,RET,$ != 0
Dfp.java,multiplyFast,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiplyFast,x,int,0,RET,$ == 0
Dfp.java,multiplyFast,x,int,0,RET,$ < 0
Dfp.java,multiplyFast,x,int,0,RET,$ >= RADIX
Dfp.java,multiplyFast,rh,int,0,DEF,$ != 0
Dfp.java,multiplyFast,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,multiplyFast,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,multiplyFast,excp,int,0,DEF,$ != 0
Dfp.java,divide,nans,byte,0,RET,$ != FINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans != FINITE
Dfp.java,divide,nans,byte,0,RET,$ == INFINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans == FINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans == INFINITE
Dfp.java,divide,nans,byte,0,RET,$ == FINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans == INFINITE
Dfp.java,divide,nans,byte,0,RET,$ == INFINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.mant[mant.length-1] == 0
Dfp.java,divide,mant,int[],0,RET,divisor.mant[$.length-1] == 0
Dfp.java,divide,rh,int,0,DEF,$ == 0
Dfp.java,divide,minadj,int,0,DEF,$ >= 2
Dfp.java,divide,mant,int[],0,DEF,remainder[$.length] != 0
Dfp.java,divide,remainder,int[],0,DEF,$[mant.length] != 0
Dfp.java,divide,trialgood,boolean,0,DEF,$ == false
Dfp.java,divide,trial,int,0,DEF,$ != 0
Dfp.java,divide,nsqd,int,0,DEF,$ != 0
Dfp.java,divide,field,DfpField,0,DEF,$.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN
Dfp.java,divide,nsqd,int,0,DEF,$ == mant.length
Dfp.java,divide,nsqd,int,0,DEF,$ > mant.length
Dfp.java,divide,quotient,int[],0,DEF,$[i] != 0
Dfp.java,divide,i,int,0,DEF,quotient[$] != 0
Dfp.java,divide,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,divide,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,divide,excp,int,0,DEF,$ != 0
Dfp.java,divide,nans,byte,0,RET,$ != FINITE
Dfp.java,divide,nans,byte,0,RET,$ == INFINITE
Dfp.java,divide,divisor,int,0,RET,$ == 0
Dfp.java,divide,divisor,int,0,RET,$ < 0
Dfp.java,divide,divisor,int,0,RET,$ >= RADIX
Dfp.java,divide,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,divide,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,divide,excp,int,0,DEF,$ != 0
Dfp.java,sqrt,nans,byte,0,RET,$ == FINITE
Dfp.java,sqrt,mant,int[],0,RET,$[$.length-1] == 0
Dfp.java,sqrt,nans,byte,0,RET,$ != FINITE
Dfp.java,sqrt,nans,byte,0,RET,$ == INFINITE
Dfp.java,sqrt,sign,byte,0,RET,$ == 1
Dfp.java,sqrt,nans,byte,0,RET,$ == QNAN
Dfp.java,sqrt,nans,byte,0,RET,$ == SNAN
Dfp.java,sqrt,sign,byte,0,RET,$ == -1
Dfp.java,sqrt,x,Dfp,0,DEF,$.exp < -1
Dfp.java,sqrt,x,Dfp,0,DEF,$.exp > 1
Dfp.java,sqrt,dx,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,sqrt,mant,int[],0,DEF,dx.mant[$.length-1] == 0
Dfp.java,toString,nans,byte,0,RET,$ != FINITE
Dfp.java,toString,nans,byte,1,RET,$ == INFINITE
Dfp.java,toString,exp,int,0,RET,$ > mant.length
Dfp.java,toString,exp,int,0,RET,$ < -1
Dfp.java,dfp2sci,p,int,0,DEF,rawdigits[$] != '0'
Dfp.java,dfp2sci,rawdigits,char[],0,DEF,$[p] != '0'
Dfp.java,dfp2sci,sign,byte,0,DEF,$ == -1
Dfp.java,dfp2sci,p,int,1,DEF,$ != rawdigits.length
Dfp.java,dfp2sci,e,int,0,DEF,$ < 0
Dfp.java,dfp2sci,e,int,0,DEF,$ < 0
Dfp.java,dfp2string,e,int,0,DEF,$ <= 0
Dfp.java,dfp2string,e,int,0,DEF,--$ == 0
Dfp.java,dfp2string,q,int,0,DEF,buffer[$] == '.'
Dfp.java,dfp2string,buffer,char[],0,DEF,$[q] == '.'
Dfp.java,dfp2string,sign,byte,0,DEF,$ < 0
Dfp.java,dotrap,nans,byte,0,DEF,$ == FINITE
Dfp.java,dotrap,mant,int[],0,DEF,$[$.length-1] != 0
Dfp.java,dotrap,nans,byte,0,DEF,$ == FINITE
Dfp.java,dotrap,mant,int[],0,DEF,$[$.length-1] == 0
Dfp.java,dotrap,nans,byte,0,DEF,$ == INFINITE
Dfp.java,dotrap,nans,byte,0,DEF,$ == QNAN
Dfp.java,dotrap,nans,byte,0,DEF,$ == INFINITE
Dfp.java,dotrap,nans,byte,0,DEF,$ == SNAN
Dfp.java,dotrap,result,Dfp,1,DEF,($.exp+mant.length) < MIN_EXP
Dfp.java,dotrap,mant,int[],1,DEF,(result.exp+$.length) < MIN_EXP
Dfp.java,nextAfter,x,Dfp,0,RET,compare(this, $) == 0
Dfp.java,nextAfter,result,Dfp,0,DEF,$.classify() == INFINITE
Dfp.java,toDouble,cmp0,int,1,RET,$ == 0
Dfp.java,toDouble,cmp0,int,0,DEF,$ < 0
Dfp.java,toDouble,exponent,int,0,DEF,$ < 0
Dfp.java,toDouble,exponent,int,0,DEF,$ > -1023
Dfp.java,toDouble,exponent,int,0,RET,$ < -1074
Dfp.java,toDouble,exponent,int,0,RET,$ > 1023
Dfp.java,toDouble,mantissa,long,0,DEF,$ == 4503599627370496L
Dfp.java,toDouble,exponent,int,0,DEF,$ <= -1023
Dfp.java,copySign,sign,byte,0,RET,$ >= 0
Dfp.java,copySign,s,Dfp,0,RET,$.sign >= 0
Dfp.java,copySign,sign,byte,0,RET,$ < 0
Dfp.java,copySign,s,Dfp,0,RET,$.sign < 0
Dfp.java,copySign,sign,byte,0,RET,$ >= 0
Dfp.java,copySign,sb,long,0,RET,$ >= 0
Dfp.java,copySign,sign,byte,0,RET,$ < 0
Dfp.java,copySign,sb,long,0,RET,$ < 0
Dfp.java,atan2,x,Dfp,1,RET,$.sign >= 0
Dfp.java,linearCombination,a,Dfp[],0,DimensionMismatchException,$.length != b.length
Dfp.java,linearCombination,a,double[],0,DimensionMismatchException,$.length != b.length
DfpMath.java,split,buf,char[],0,DEF,$[i] >= '1'
DfpMath.java,split,i,int,0,DEF,buf[$] >= '1'
DfpMath.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpMath.java,split,i,int,0,DEF,buf[$] <= '9'
DfpMath.java,split,buf,char[],0,DEF,$[i] == '.'
DfpMath.java,split,i,int,0,DEF,buf[$] == '.'
DfpMath.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpMath.java,split,i,int,0,DEF,buf[$] >= '0'
DfpMath.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpMath.java,split,i,int,0,DEF,buf[$] <= '9'
DfpMath.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpMath.java,split,i,int,0,DEF,buf[$] >= '0'
DfpMath.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpMath.java,split,i,int,0,DEF,buf[$] <= '9'
DfpMath.java,split,i,int,0,DEF,$ < sp
DfpMath.java,splitMult,result,Dfp[],0,RET,$[0].classify() == Dfp.INFINITE
DfpMath.java,splitPow,a,int,0,RET,$ == 0
DfpMath.java,splitPow,a,int,0,DEF,$ < 0
DfpMath.java,splitPow,trial,int,0,DEF,$ > a
DfpMath.java,pow,a,int,0,RET,$ == 0
DfpMath.java,pow,a,int,0,DEF,$ < 0
DfpMath.java,exp,ia,int,0,RET,$ > 2147483646
DfpMath.java,exp,ia,int,0,RET,$ < -2147483646
DfpMath.java,log,a,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,1,RET,$.classify() == Dfp.FINITE
DfpMath.java,pow,y,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,x,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,1,RET,$.classify() == Dfp.FINITE
BracketingNthOrderBrentSolverDFP.java,BracketingNthOrderBrentSolverDFP,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolverDFP.java,solve,agingA,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolverDFP.java,solve,agingB,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolverDFP.java,solve,nbPoints,int,1,DEF,$ > 2
BracketingNthOrderBrentSolverDFP.java,solve,start,int,1,DEF,end - $ != nbPoints
BracketingNthOrderBrentSolverDFP.java,solve,end,int,1,DEF,$ - start != nbPoints
BracketingNthOrderBrentSolverDFP.java,solve,nbPoints,int,0,DEF,$ == x.length
DfpField.java,split,buf,char[],0,DEF,$[i] >= '1'
DfpField.java,split,i,int,0,DEF,buf[$] >= '1'
DfpField.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpField.java,split,i,int,0,DEF,buf[$] <= '9'
DfpField.java,split,buf,char[],0,DEF,$[i] == '.'
DfpField.java,split,i,int,0,DEF,buf[$] == '.'
DfpField.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpField.java,split,i,int,0,DEF,buf[$] >= '0'
DfpField.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpField.java,split,i,int,0,DEF,buf[$] <= '9'
DfpField.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpField.java,split,i,int,0,DEF,buf[$] >= '0'
DfpField.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpField.java,split,i,int,0,DEF,buf[$] <= '9'
DfpField.java,split,i,int,0,DEF,$ < sp
DfpField.java,computeStringConstants,sqr2String,String,0,DEF,$ == null
SimplexSolver.java,getPivotColumn,entry,double,0,DEF,$ < minValue
SimplexSolver.java,getPivotRow,entry,double,0,DEF,Precision.compareTo($, 0d, maxUlps) > 0
SimplexSolver.java,getPivotRow,maxUlps,int,0,DEF,Precision.compareTo(entry, 0d, $) > 0
SimplexSolver.java,getPivotRow,cmp,int,1,DEF,$ == 0
SimplexSolver.java,getPivotRow,cmp,int,0,DEF,$ < 0
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,1,RET,$.size() == 0
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,0,RET,$.size() > 1
SimplexSolver.java,getPivotRow,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() > 0
SimplexSolver.java,getPivotRow,basicRow,Integer,0,DEF,$ != null
SimplexSolver.java,getPivotRow,i,int,0,DEF,$ < minIndex
SimplexSolver.java,doIteration,pivotRow,Integer,0,UnboundedSolutionException,$ == null
SimplexSolver.java,doIteration,i,int,0,DEF,$ != pivotRow
SimplexSolver.java,solvePhase1,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() == 0
SimplexTableau.java,createTableau,constraint,LinearConstraint,1,DEF,$.getRelationship() == Relationship.LEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.EQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,normalize,constraint,LinearConstraint,0,RET,$.getValue() < 0
SimplexTableau.java,getConstraintTypeCounts,constraint,LinearConstraint,0,DEF,$.getRelationship() == relationship
SimplexTableau.java,getBasicRow,row,Integer,1,DEF,$ == null
SimplexTableau.java,dropPhase1Objective,epsilon,double,0,DEF,Precision.compareTo(entry, 0d, $) > 0
SimplexTableau.java,dropPhase1Objective,entry,double,0,DEF,Precision.compareTo($, 0d, epsilon) > 0
SimplexTableau.java,dropPhase1Objective,col,int,0,DEF,getBasicRow($) == null
SimplexTableau.java,isOptimal,epsilon,double,0,RET,Precision.compareTo(entry, 0d, $) < 0
SimplexTableau.java,isOptimal,entry,double,0,RET,Precision.compareTo($, 0d, epsilon) < 0
SimplexTableau.java,getSolution,colIndex,int,0,DEF,$ < 0
SimplexTableau.java,getSolution,basicRow,Integer,1,DEF,$ != null
SimplexTableau.java,getSolution,basicRow,Integer,1,DEF,$ == 0
SimplexTableau.java,subtractRow,result,double,0,DEF,FastMath.abs($) < CUTOFF_THRESHOLD
SimplexTableau.java,equals,other,null,0,RET,$ instanceof SimplexTableau
AbstractLinearOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxCountExceededException,++$ > maxIterations
LinearObjectiveFunction.java,equals,other,null,0,RET,$ instanceof LinearObjectiveFunction
LinearConstraint.java,equals,other,null,0,RET,$ instanceof LinearConstraint
SimpleValueChecker.java,SimpleValueChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimpleValueChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimpleValueChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
BrentOptimizer.java,BrentOptimizer,rel,double,0,NumberIsTooSmallException,$ < MIN_RELATIVE_TOLERANCE
BrentOptimizer.java,BrentOptimizer,abs,double,0,NotStrictlyPositiveException,$ <= 0
BrentOptimizer.java,doOptimize,lo,double,1,DEF,$ < hi
BrentOptimizer.java,doOptimize,e,double,1,DEF,FastMath.abs($) > tol1
BrentOptimizer.java,doOptimize,q,double,1,DEF,$ > 0
BrentOptimizer.java,doOptimize,a,double,0,DEF,u - $ < tol2
BrentOptimizer.java,doOptimize,u,double,0,DEF,$ - a < tol2
BrentOptimizer.java,doOptimize,b,double,0,DEF,$ - u < tol2
BrentOptimizer.java,doOptimize,u,double,0,DEF,b - $ < tol2
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ <= m
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ < m
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ < m
BrentOptimizer.java,doOptimize,d,double,1,DEF,FastMath.abs($) < tol1
BrentOptimizer.java,doOptimize,d,double,1,DEF,$ >= 0
BrentOptimizer.java,doOptimize,checker,ConvergenceChecker<UnivariatePointValuePair>,0,RET,$ != null
BrentOptimizer.java,doOptimize,fu,double,1,DEF,$ <= fx
BrentOptimizer.java,doOptimize,u,double,1,DEF,$ < x
BrentOptimizer.java,doOptimize,u,double,1,DEF,$ < x
BrentOptimizer.java,doOptimize,fu,double,1,DEF,$ <= fw
BrentOptimizer.java,doOptimize,fu,double,0,DEF,$ <= fv
BrentOptimizer.java,best,a,UnivariatePointValuePair,0,RET,$ == null
BrentOptimizer.java,best,b,UnivariatePointValuePair,0,RET,$ == null
SimpleUnivariateValueChecker.java,SimpleUnivariateValueChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimpleUnivariateValueChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimpleUnivariateValueChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
BaseAbstractUnivariateOptimizer.java,optimize,f,UnivariateFunction,0,NullArgumentException,$ == null
BaseAbstractUnivariateOptimizer.java,optimize,goalType,GoalType,0,NullArgumentException,$ == null
UnivariateMultiStartOptimizer.java,UnivariateMultiStartOptimizer,optimizer,BaseUnivariateOptimizer<FUNC>,0,NullArgumentException,$ == null
UnivariateMultiStartOptimizer.java,UnivariateMultiStartOptimizer,generator,RandomGenerator,0,NullArgumentException,$ == null
UnivariateMultiStartOptimizer.java,UnivariateMultiStartOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
UnivariateMultiStartOptimizer.java,getOptima,optima,UnivariatePointValuePair[],0,MathIllegalStateException,$ == null
UnivariateMultiStartOptimizer.java,optimize,optima,UnivariatePointValuePair[],0,DEF,$[0] == null
UnivariateMultiStartOptimizer.java,compare,o1,UnivariatePointValuePair,1,RET,$ == null
UnivariateMultiStartOptimizer.java,compare,o2,UnivariatePointValuePair,0,RET,$ == null
BracketFinder.java,BracketFinder,growLimit,double,0,NotStrictlyPositiveException,$ <= 0
BracketFinder.java,BracketFinder,maxEvaluations,int,0,NotStrictlyPositiveException,$ <= 0
BracketFinder.java,search,fA,double,0,DEF,$ < fB
BracketFinder.java,search,fA,double,0,DEF,$ > fB
BracketFinder.java,search,w,double,1,DEF,($ - xC) * (xB - $) > 0
BracketFinder.java,search,xB,double,1,DEF,(w - xC) * ($ - w) > 0
BracketFinder.java,search,xC,double,1,DEF,(w - $) * (xB - w) > 0
BracketFinder.java,search,fW,double,1,DEF,$ < fC
BracketFinder.java,search,fW,double,1,DEF,$ > fC
BracketFinder.java,search,fW,double,0,DEF,$ > fB
BracketFinder.java,search,fW,double,0,DEF,$ < fB
BracketFinder.java,search,w,double,1,DEF,($ - wLim) * (wLim - xC) >= 0
BracketFinder.java,search,xC,double,1,DEF,(w - wLim) * (wLim - $) >= 0
BracketFinder.java,search,wLim,double,1,DEF,(w - $) * ($ - xC) >= 0
BracketFinder.java,search,w,double,1,DEF,($ - wLim) * (xC - $) > 0
BracketFinder.java,search,xC,double,1,DEF,(w - wLim) * ($ - w) > 0
BracketFinder.java,search,wLim,double,1,DEF,(w - $) * (xC - w) > 0
BracketFinder.java,search,fW,double,0,DEF,$ < fC
BracketFinder.java,search,fW,double,0,DEF,$ > fC
BracketFinder.java,search,lo,double,0,DEF,$ > hi
SimpleVectorValueChecker.java,SimpleVectorValueChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimpleVectorValueChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimpleVectorValueChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
HarmonicFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NumberIsTooSmallException,$.length < 4
HarmonicFitter.java,sortObservations,i,int,0,DEF,$-- != 0
HarmonicFitter.java,guessAOmega,c1,double,1,ZeroException,$ / c2 < 0
HarmonicFitter.java,guessAOmega,c2,double,1,ZeroException,c1 / $ < 0
HarmonicFitter.java,guessAOmega,c3,double,1,ZeroException,c2 / $ < 0
HarmonicFitter.java,guessAOmega,c2,double,1,ZeroException,$ / c3 < 0
HarmonicFitter.java,guessAOmega,xRange,double,0,ZeroException,$ == 0
HarmonicFitter.java,guessAOmega,y,double,0,DEF,$ < yMin
HarmonicFitter.java,guessAOmega,y,double,0,DEF,$ > yMax
HarmonicFitter.java,guessAOmega,c2,double,0,MathIllegalStateException,$ == 0
GaussianFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NullArgumentException,$ == null
GaussianFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NumberIsTooSmallException,$.length < 3
GaussianFitter.java,compare,p1,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p2,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p1,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p2,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,interpolateXAtY,idxStep,int,0,ZeroException,$ == 0
GaussianFitter.java,interpolateXAtY,p1,WeightedObservedPoint,0,RET,$.getY() == y
GaussianFitter.java,interpolateXAtY,p2,WeightedObservedPoint,0,RET,$.getY() == y
GaussianFitter.java,getInterpolationPointsForY,idxStep,int,0,ZeroException,$ == 0
GaussianFitter.java,getInterpolationPointsForY,idxStep,int,1,RET,$ < 0
CurveFitter.java,fit,optimizer,MultivariateDifferentiableVectorOptimizer,1,DEF,$ == null
SimplePointChecker.java,SimplePointChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimplePointChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimplePointChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
LeastSquaresConverter.java,LeastSquaresConverter,observations,double[],0,DimensionMismatchException,$.length != weights.length
LeastSquaresConverter.java,value,residuals,double[],0,DimensionMismatchException,$.length != observations.length
LeastSquaresConverter.java,value,weights,double[],1,DEF,$ != null
LeastSquaresConverter.java,value,scale,RealMatrix,1,DEF,$ != null
BaseMultivariateVectorMultiStartOptimizer.java,BaseMultivariateVectorMultiStartOptimizer,optimizer,BaseMultivariateVectorOptimizer<FUNC>,0,NullArgumentException,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,BaseMultivariateVectorMultiStartOptimizer,generator,RandomVectorGenerator,0,NullArgumentException,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,BaseMultivariateVectorMultiStartOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
BaseMultivariateVectorMultiStartOptimizer.java,getOptima,optima,PointVectorValuePair[],0,MathIllegalStateException,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,optimize,optima,PointVectorValuePair[],0,DEF,$[0] == null
BaseMultivariateVectorMultiStartOptimizer.java,compare,o1,PointVectorValuePair,1,RET,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,compare,o2,PointVectorValuePair,0,RET,$ == null
BOBYQAOptimizer.java,bobyqa,lowerDifference,ArrayRealVector,1,DEF,$.getEntry(j) >= -initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,lowerDifference.getEntry($) >= -initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,lowerDifference,ArrayRealVector,1,DEF,$.getEntry(j) >= ZERO
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,lowerDifference.getEntry($) >= ZERO
BOBYQAOptimizer.java,bobyqa,upperDifference,ArrayRealVector,0,DEF,$.getEntry(j) <= initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,j,int,0,DEF,upperDifference.getEntry($) <= initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,upperDifference,ArrayRealVector,1,DEF,$.getEntry(j) <= ZERO
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,upperDifference.getEntry($) <= ZERO
BOBYQAOptimizer.java,bobyqb,trustRegionCenterInterpolationPointIndex,int,0,DEF,$ != kbase
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,bobyqb,crvmin,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,bdtest,double,0,DEF,$ < bdtol
BOBYQAOptimizer.java,bobyqb,bdtest,double,0,DEF,$ < bdtol
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,ntrits,int,1,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,denom,double,0,DEF,$ < cauchy
BOBYQAOptimizer.java,bobyqb,cauchy,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,k,int,0,DEF,$ == trustRegionCenterInterpolationPointIndex
BOBYQAOptimizer.java,bobyqb,temp,double,0,DEF,$ * den > scaden
BOBYQAOptimizer.java,bobyqb,den,double,0,DEF,temp * $ > scaden
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ == j
BOBYQAOptimizer.java,bobyqb,dnorm,double,0,DEF,$ > rho
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,MathIllegalStateException,$ > 0
BOBYQAOptimizer.java,bobyqb,vquad,double,0,MathIllegalStateException,$ >= ZERO
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= ONE_OVER_TEN
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= .7
BOBYQAOptimizer.java,bobyqb,f,double,0,DEF,$ < fopt
BOBYQAOptimizer.java,bobyqb,temp,double,0,DEF,$ * den > scaden
BOBYQAOptimizer.java,bobyqb,den,double,0,DEF,temp * $ > scaden
BOBYQAOptimizer.java,bobyqb,f,double,0,DEF,$ < fopt
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ > 0
BOBYQAOptimizer.java,bobyqb,itest,int,0,DEF,$ >= 3
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < n
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < npt
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < nh
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,sum,double,0,DEF,$ > distsq
BOBYQAOptimizer.java,bobyqb,knew,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,ratio,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,dnorm,double,0,DEF,Math.max(delta, $) > rho
BOBYQAOptimizer.java,bobyqb,delta,double,0,DEF,Math.max($, dnorm) > rho
BOBYQAOptimizer.java,bobyqb,rho,double,0,DEF,$ > stoppingTrustRegionRadius
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= SIXTEEN
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= TWO_HUNDRED_FIFTY
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,fAtInterpolationPoints,ArrayRealVector,0,DEF,$.getEntry(trustRegionCenterInterpolationPointIndex) <= fsave
BOBYQAOptimizer.java,bobyqb,trustRegionCenterInterpolationPointIndex,int,0,DEF,fAtInterpolationPoints.getEntry($) <= fsave
BOBYQAOptimizer.java,altmov,k,int,0,DEF,$ == trustRegionCenterInterpolationPointIndex
BOBYQAOptimizer.java,altmov,tmp,double,1,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,tmp,double,0,DEF,$ < ZERO
BOBYQAOptimizer.java,altmov,k,int,1,DEF,$ == knew
BOBYQAOptimizer.java,altmov,d4,double,0,DEF,d3 * $ < ZERO
BOBYQAOptimizer.java,altmov,d3,double,0,DEF,$ * d4 < ZERO
BOBYQAOptimizer.java,altmov,subd,double,0,DEF,$ > HALF
BOBYQAOptimizer.java,altmov,vlag,double,0,DEF,Math.abs($) < ONE_OVER_FOUR
BOBYQAOptimizer.java,altmov,predsq,double,0,DEF,$ > presav
BOBYQAOptimizer.java,altmov,ibdsav,int,0,DEF,$ < 0
BOBYQAOptimizer.java,altmov,ibdsav,int,0,DEF,$ > 0
BOBYQAOptimizer.java,altmov,glagValue,double,0,DEF,Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), $) > ZERO
BOBYQAOptimizer.java,altmov,i,int,0,DEF,Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,lowerDifference,ArrayRealVector,0,DEF,Math.min(trustRegionCenterOffset.getEntry(i) - $.getEntry(i), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,trustRegionCenterOffset,ArrayRealVector,0,DEF,Math.min($.getEntry(i) - lowerDifference.getEntry(i), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,glagValue,double,0,DEF,Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), $) < ZERO
BOBYQAOptimizer.java,altmov,upperDifference,ArrayRealVector,0,DEF,Math.max(trustRegionCenterOffset.getEntry(i) - $.getEntry(i), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,i,int,0,DEF,Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,trustRegionCenterOffset,ArrayRealVector,0,DEF,Math.max($.getEntry(i) - upperDifference.getEntry(i), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,ggfree,double,0,RET,$ == ZERO
BOBYQAOptimizer.java,altmov,tmp1,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,0,DEF,$.getEntry(i) == bigstp
BOBYQAOptimizer.java,altmov,i,int,0,DEF,work1.getEntry($) == bigstp
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,1,DEF,$.getEntry(i) == bigstp
BOBYQAOptimizer.java,altmov,i,int,1,DEF,work1.getEntry($) == bigstp
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,altmov,i,int,1,DEF,work1.getEntry($) == ZERO
BOBYQAOptimizer.java,altmov,glagValue,double,1,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,iflag,int,0,DEF,$ == 1
BOBYQAOptimizer.java,altmov,curv,double,1,DEF,$ > -gw
BOBYQAOptimizer.java,altmov,iflag,int,1,DEF,$ == 0
BOBYQAOptimizer.java,altmov,csave,double,0,DEF,$ > cauchy
BOBYQAOptimizer.java,prelim,nfm,int,1,DEF,$ >= 1
BOBYQAOptimizer.java,prelim,nfm,int,1,DEF,$ <= n
BOBYQAOptimizer.java,prelim,upperDifference,ArrayRealVector,0,DEF,$.getEntry(nfmm) == ZERO
BOBYQAOptimizer.java,prelim,nfmm,int,0,DEF,upperDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,nfm,int,0,DEF,$ > n
BOBYQAOptimizer.java,prelim,lowerDifference,ArrayRealVector,0,DEF,$.getEntry(nfxm) == ZERO
BOBYQAOptimizer.java,prelim,nfxm,int,0,DEF,lowerDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,upperDifference,ArrayRealVector,0,DEF,$.getEntry(nfxm) == ZERO
BOBYQAOptimizer.java,prelim,nfxm,int,0,DEF,upperDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,ipt,int,0,DEF,$ > n
BOBYQAOptimizer.java,prelim,numEval,int,1,DEF,$ == 1
BOBYQAOptimizer.java,prelim,numEval,int,1,DEF,$ >= 2
BOBYQAOptimizer.java,prelim,stepb,double,0,DEF,stepa * $ < ZERO
BOBYQAOptimizer.java,prelim,stepa,double,0,DEF,$ * stepb < ZERO
BOBYQAOptimizer.java,prelim,trustRegionCenterInterpolationPointIndex,int,0,DEF,$ == nfm
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,gradientAtTrustRegionCenter.getEntry($) >= ZERO
BOBYQAOptimizer.java,trsbox,gradientAtTrustRegionCenter,ArrayRealVector,0,DEF,$.getEntry(i) >= ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,gradientAtTrustRegionCenter.getEntry($) <= ZERO
BOBYQAOptimizer.java,trsbox,gradientAtTrustRegionCenter,ArrayRealVector,0,DEF,$.getEntry(i) <= ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,beta,double,1,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,stepsq,double,0,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,beta,double,0,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,resid,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,ds,double,1,DEF,$ < ZERO
BOBYQAOptimizer.java,trsbox,shs,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,0,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,s.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,1,DEF,$.getEntry(i) > ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,s.getEntry($) > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ < stplen
BOBYQAOptimizer.java,trsbox,stplen,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ == -1
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,crvmin,double,0,DEF,$ == MINUS_ONE
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,0,DEF,$.getEntry(iact) < ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,s.getEntry($) < ZERO
BOBYQAOptimizer.java,trsbox,delsq,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,stplen,double,0,DEF,$ < blen
BOBYQAOptimizer.java,trsbox,iterc,int,0,DEF,$ == itermax
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,tempa,double,1,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,tempb,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,angbd * $ > tempa
BOBYQAOptimizer.java,trsbox,angbd,double,0,DEF,$ * temp > tempa
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,angbd * $ > tempb
BOBYQAOptimizer.java,trsbox,angbd,double,0,DEF,$ * temp > tempb
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,rednew,double,1,DEF,$ > redmax
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ < 0
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ < iu
BOBYQAOptimizer.java,trsbox,sdec,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ == iu
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == MINUS_ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == MINUS_ONE
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,trsbox,k,int,0,DEF,modelSecondDerivativesParameters.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,modelSecondDerivativesParameters,ArrayRealVector,0,DEF,$.getEntry(k) != ZERO
BOBYQAOptimizer.java,trsbox,crvmin,double,0,DEF,$ != ZERO
BOBYQAOptimizer.java,trsbox,iterc,int,0,DEF,$ > itcsav
BOBYQAOptimizer.java,update,d1,double,0,DEF,Math.abs($) > ztest
BOBYQAOptimizer.java,update,i,int,0,DEF,$ >= npt
BOBYQAOptimizer.java,setup,dimension,int,0,NumberIsTooSmallException,$ < MINIMUM_PROBLEM_DIMENSION
BOBYQAOptimizer.java,setup,minDiff,double,0,DEF,$ < requiredMinDiff
MultivariateFunctionPenaltyAdapter.java,MultivariateFunctionPenaltyAdapter,lower,double[],0,DimensionMismatchException,$.length != upper.length
MultivariateFunctionPenaltyAdapter.java,MultivariateFunctionPenaltyAdapter,lower,double[],0,DimensionMismatchException,$.length != scale.length
PowellOptimizer.java,PowellOptimizer,rel,double,0,NumberIsTooSmallException,$ < MIN_RELATIVE_TOLERANCE
PowellOptimizer.java,PowellOptimizer,abs,double,0,NotStrictlyPositiveException,$ <= 0
PowellOptimizer.java,doOptimize,fX2,double,0,DEF,($ - fVal) > delta
PowellOptimizer.java,doOptimize,fVal,double,0,DEF,(fX2 - $) > delta
PowellOptimizer.java,doOptimize,checker,ConvergenceChecker<PointValuePair>,0,DEF,$ != null
PowellOptimizer.java,doOptimize,goal,GoalType,1,RET,$ == GoalType.MINIMIZE
PowellOptimizer.java,doOptimize,fX,double,0,DEF,$ > fX2
PowellOptimizer.java,doOptimize,t,double,0,DEF,$ < 0.0
MultivariateFunctionMappingAdapter.java,MultivariateFunctionMappingAdapter,lower,double[],0,DimensionMismatchException,$.length != upper.length
MultiDirectionalSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(reflected, best) < 0
MultiDirectionalSimplex.java,iterate,reflected,PointValuePair,0,RET,comparator.compare($, best) < 0
MultiDirectionalSimplex.java,iterate,best,PointValuePair,0,RET,comparator.compare(reflected, $) < 0
MultiDirectionalSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,DEF,$.compare(reflected, expanded) <= 0
MultiDirectionalSimplex.java,iterate,expanded,PointValuePair,0,DEF,comparator.compare(reflected, $) <= 0
MultiDirectionalSimplex.java,iterate,reflected,PointValuePair,0,DEF,comparator.compare($, expanded) <= 0
AbstractSimplex.java,AbstractSimplex,steps,double[],0,NullArgumentException,$ == null
AbstractSimplex.java,AbstractSimplex,steps,double[],0,ZeroException,$.length == 0
AbstractSimplex.java,AbstractSimplex,j,int,0,ZeroException,steps[$] == 0
AbstractSimplex.java,AbstractSimplex,steps,double[],0,ZeroException,$[j] == 0
AbstractSimplex.java,AbstractSimplex,referenceSimplex,double[][],0,NotStrictlyPositiveException,$.length <= 0
AbstractSimplex.java,AbstractSimplex,refI,double[],0,DimensionMismatchException,$.length != dimension
AbstractSimplex.java,AbstractSimplex,i,int,0,DEF,$ > 0
AbstractSimplex.java,build,dimension,int,0,DimensionMismatchException,$ != startPoint.length
AbstractSimplex.java,replaceWorstPoint,comparator,Comparator<PointValuePair>,0,DEF,$.compare(simplex[i], pointValuePair) > 0
AbstractSimplex.java,replaceWorstPoint,pointValuePair,PointValuePair,0,DEF,comparator.compare(simplex[i], $) > 0
AbstractSimplex.java,replaceWorstPoint,simplex,PointValuePair[],0,DEF,comparator.compare($[i], pointValuePair) > 0
AbstractSimplex.java,replaceWorstPoint,i,int,0,DEF,comparator.compare(simplex[$], pointValuePair) > 0
AbstractSimplex.java,getPoint,index,int,0,OutOfRangeException,$ < 0
AbstractSimplex.java,getPoint,index,int,0,OutOfRangeException,$ >= simplex.length
AbstractSimplex.java,setPoint,index,int,0,OutOfRangeException,$ < 0
AbstractSimplex.java,setPoint,index,int,0,OutOfRangeException,$ >= simplex.length
AbstractSimplex.java,setPoints,points,PointValuePair[],0,DimensionMismatchException,$.length != simplex.length
BaseAbstractMultivariateVectorOptimizer.java,optimizeInternal,f,FUNC,0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimizeInternal,t,double[],0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimizeInternal,w,double[],0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimizeInternal,startPoint,double[],0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimizeInternal,t,double[],0,DimensionMismatchException,$.length != w.length
BaseAbstractMultivariateVectorOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof Target
BaseAbstractMultivariateVectorOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof Weight
BaseAbstractMultivariateVectorOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof InitialGuess
BaseAbstractMultivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof InitialGuess
BaseAbstractMultivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof SimpleBounds
BaseAbstractMultivariateOptimizer.java,checkParameters,start,double[],0,NumberIsTooLargeException,$ != null
BaseAbstractMultivariateOptimizer.java,checkParameters,lowerBound,double[],0,NumberIsTooSmallException,$ != null
BaseAbstractMultivariateOptimizer.java,checkParameters,lowerBound,double[],0,DimensionMismatchException,$.length != dim
BaseAbstractMultivariateOptimizer.java,checkParameters,v,double,0,NumberIsTooSmallException,$ < lo
BaseAbstractMultivariateOptimizer.java,checkParameters,upperBound,double[],0,NumberIsTooLargeException,$ != null
BaseAbstractMultivariateOptimizer.java,checkParameters,upperBound,double[],0,DimensionMismatchException,$.length != dim
BaseAbstractMultivariateOptimizer.java,checkParameters,v,double,0,NumberIsTooLargeException,$ > hi
BaseAbstractMultivariateOptimizer.java,checkParameters,lowerBound,double[],0,DEF,$ == null
BaseAbstractMultivariateOptimizer.java,checkParameters,upperBound,double[],0,DEF,$ == null
CMAESOptimizer.java,Sigma,s,double[],0,NotPositiveException,$[i] < 0
CMAESOptimizer.java,Sigma,i,int,0,NotPositiveException,s[$] < 0
CMAESOptimizer.java,PopulationSize,size,int,0,NotStrictlyPositiveException,$ <= 0
CMAESOptimizer.java,doOptimize,diagonalOnly,int,1,DEF,$ <= 0
CMAESOptimizer.java,doOptimize,i,int,0,DEF,$ >= checkFeasableCount
CMAESOptimizer.java,doOptimize,diagonalOnly,int,1,DEF,$ <= 0
CMAESOptimizer.java,doOptimize,bestValue,double,0,DEF,$ > bestFitness
CMAESOptimizer.java,doOptimize,lastResult,PointValuePair,0,DEF,$ != null
CMAESOptimizer.java,doOptimize,stopFitness,double,0,DEF,$ != 0
CMAESOptimizer.java,doOptimize,sigma,double,0,DEF,$ * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX
CMAESOptimizer.java,doOptimize,sqrtDiagC,double[],0,DEF,sigma * Math.max(Math.abs(pcCol[i]), $[i]) > stopTolX
CMAESOptimizer.java,doOptimize,pcCol,double[],0,DEF,sigma * Math.max(Math.abs($[i]), sqrtDiagC[i]) > stopTolX
CMAESOptimizer.java,doOptimize,i,int,0,DEF,sigma * Math.max(Math.abs(pcCol[$]), sqrtDiagC[$]) > stopTolX
CMAESOptimizer.java,doOptimize,sigma,double,0,DEF,$ * sqrtDiagC[i] > stopTolUpX
CMAESOptimizer.java,doOptimize,sqrtDiagC,double[],0,DEF,sigma * $[i] > stopTolUpX
CMAESOptimizer.java,doOptimize,i,int,0,DEF,sigma * sqrtDiagC[$] > stopTolUpX
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > 2
CMAESOptimizer.java,doOptimize,worstFitness,double,0,DEF,Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,bestFitness,double,0,DEF,Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > fitnessHistory.length
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,historyWorst-$ < stopTolHistFun
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,$-historyBest < stopTolHistFun
CMAESOptimizer.java,doOptimize,diagD,RealMatrix,0,DEF,max($)/min($) > 1e7
CMAESOptimizer.java,doOptimize,lastResult,PointValuePair,0,DEF,$ != null
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > 2
CMAESOptimizer.java,doOptimize,bestFitness,double,0,DEF,Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
CMAESOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof Sigma
CMAESOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof PopulationSize
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,OutOfRangeException,$ != null
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,DimensionMismatchException,$.length != init.length
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,NotPositiveException,$[i] < 0
CMAESOptimizer.java,checkParameters,i,int,0,NotPositiveException,inputSigma[$] < 0
CMAESOptimizer.java,initializeCMA,lambda,int,0,DEF,$ <= 0
CMAESOptimizer.java,updateCovarianceDiagonalOnly,diagonalOnly,int,0,DEF,$ > 1
CMAESOptimizer.java,updateCovarianceDiagonalOnly,iterations,int,0,DEF,$ > diagonalOnly
CMAESOptimizer.java,updateCovariance,ccovmu,double,0,DEF,ccov1 + $ > 0
CMAESOptimizer.java,updateCovariance,ccov1,double,0,DEF,$ + ccovmu > 0
CMAESOptimizer.java,updateCovariance,negccov,double,0,DEF,$ > negcovMax
CMAESOptimizer.java,updateBD,negccov,double,0,DEF,ccov1 + ccovmu + $ > 0
CMAESOptimizer.java,updateBD,ccovmu,double,0,DEF,ccov1 + $ + negccov > 0
CMAESOptimizer.java,updateBD,ccov1,double,0,DEF,$ + ccovmu + negccov > 0
CMAESOptimizer.java,updateBD,negccov,double,0,DEF,(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,ccovmu,double,0,DEF,(iterations % 1. / (ccov1 + $ + negccov) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,ccov1,double,0,DEF,(iterations % 1. / ($ + ccovmu + negccov) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,dimension,int,0,DEF,(iterations % 1. / (ccov1 + ccovmu + negccov) / $ / 10.) < 1
CMAESOptimizer.java,updateBD,iterations,int,0,DEF,($ % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,diagD,RealMatrix,0,DEF,min($) <= 0
CMAESOptimizer.java,updateBD,i,int,0,DEF,diagD.getEntry($, 0) < 0
CMAESOptimizer.java,updateBD,diagD,RealMatrix,0,DEF,$.getEntry(i, 0) < 0
CMAESOptimizer.java,equals,other,null,0,RET,$ instanceof DoubleIndex
CMAESOptimizer.java,diag,m,RealMatrix,1,RET,$.getColumnDimension() == 1
CMAESOptimizer.java,eye,r,int,0,DEF,$ < m
CMAESOptimizer.java,max,max,double,0,DEF,$ < e
CMAESOptimizer.java,min,min,double,0,DEF,$ > e
SimplexOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof AbstractSimplex
SimplexOptimizer.java,doOptimize,simplex,AbstractSimplex,0,NullArgumentException,$ == null
SimplexOptimizer.java,doOptimize,iteration,int,0,RET,$ > 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(best, reflected) <= 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare(best, $) <= 0
NelderMeadSimplex.java,iterate,best,PointValuePair,1,DEF,comparator.compare($, reflected) <= 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(reflected, secondBest) < 0
NelderMeadSimplex.java,iterate,secondBest,PointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare($, secondBest) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(reflected, best) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare($, best) < 0
NelderMeadSimplex.java,iterate,best,PointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(expanded, reflected) < 0
NelderMeadSimplex.java,iterate,expanded,PointValuePair,1,DEF,comparator.compare($, reflected) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare(expanded, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,RET,$.compare(reflected, worst) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,RET,comparator.compare($, worst) < 0
NelderMeadSimplex.java,iterate,worst,PointValuePair,1,RET,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(outContracted, reflected) <= 0
NelderMeadSimplex.java,iterate,outContracted,PointValuePair,0,RET,comparator.compare($, reflected) <= 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,0,RET,comparator.compare(outContracted, $) <= 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(inContracted, worst) < 0
NelderMeadSimplex.java,iterate,worst,PointValuePair,0,RET,comparator.compare(inContracted, $) < 0
NelderMeadSimplex.java,iterate,inContracted,PointValuePair,0,RET,comparator.compare($, worst) < 0
NonLinearConjugateGradientOptimizer.java,setInitialStep,initialStep,double,1,DEF,$ <= 0
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,previous,PointValuePair,0,RET,$ != null
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,updateFormula,ConjugateGradientFormula,1,DEF,$ == ConjugateGradientFormula.FLETCHER_REEVES
NonLinearConjugateGradientOptimizer.java,doOptimize,iter,int,1,DEF,$ % n == 0
NonLinearConjugateGradientOptimizer.java,doOptimize,n,int,1,DEF,iter % $ == 0
NonLinearConjugateGradientOptimizer.java,doOptimize,beta,double,1,DEF,$ < 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yA,double,0,RET,$ * yB <= 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yB,double,0,RET,yA * $ <= 0
LevenbergMarquardtOptimizer.java,doOptimize,dk,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,currentCost,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,s,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtOptimizer.java,doOptimize,currentCost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtOptimizer.java,doOptimize,currentCost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtOptimizer.java,doOptimize,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtOptimizer.java,doOptimize,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,RET,$ >= 1.0e-4
LevenbergMarquardtOptimizer.java,doOptimize,checker,ConvergenceChecker<PointVectorValuePair>,0,RET,$ != null
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,0,RET,FastMath.abs($) <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,1,ConvergenceException,FastMath.abs($) <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,1,ConvergenceException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,ConvergenceException,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,ConvergenceException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtOptimizer.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtOptimizer.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtOptimizer.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtOptimizer.java,qrDecomposition,ak2,double,0,RET,$ <= qrRankingThreshold
AbstractLeastSquaresOptimizer.java,computeWeightedJacobian,dsValue,DerivativeStructure[],0,DimensionMismatchException,$.length != nR
AbstractLeastSquaresOptimizer.java,guessParametersErrors,rows,int,0,NumberIsTooSmallException,$ <= cols
AbstractLeastSquaresOptimizer.java,computeResiduals,objectiveValue,double[],0,DimensionMismatchException,$.length != target.length
AbstractLeastSquaresOptimizer.java,squareRoot,m,null,1,RET,$ instanceof DiagonalMatrix
GaussNewtonOptimizer.java,doOptimize,checker,ConvergenceChecker<PointVectorValuePair>,0,NullArgumentException,$ == null
GaussNewtonOptimizer.java,doOptimize,previous,PointVectorValuePair,0,RET,$ != null
BaseMultivariateMultiStartOptimizer.java,BaseMultivariateMultiStartOptimizer,optimizer,BaseMultivariateOptimizer<FUNC>,0,NullArgumentException,$ == null
BaseMultivariateMultiStartOptimizer.java,BaseMultivariateMultiStartOptimizer,generator,RandomVectorGenerator,0,NullArgumentException,$ == null
BaseMultivariateMultiStartOptimizer.java,BaseMultivariateMultiStartOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
BaseMultivariateMultiStartOptimizer.java,getOptima,optima,PointValuePair[],0,MathIllegalStateException,$ == null
BaseMultivariateMultiStartOptimizer.java,optimize,optima,PointValuePair[],0,DEF,$[0] == null
BaseMultivariateMultiStartOptimizer.java,compare,o1,PointValuePair,1,RET,$ == null
BaseMultivariateMultiStartOptimizer.java,compare,o2,PointValuePair,0,RET,$ == null
Beta.java,regularizedBeta,x,double,1,DEF,$ < 0
Beta.java,regularizedBeta,x,double,1,DEF,$ > 1
Beta.java,regularizedBeta,a,double,1,DEF,$ <= 0.0
Beta.java,regularizedBeta,b,double,1,DEF,$ <= 0.0
Beta.java,getB,n,int,1,DEF,$ % 2 == 0
Beta.java,logGammaSum,a,double,0,OutOfRangeException,$ < 1.0
Beta.java,logGammaSum,a,double,0,OutOfRangeException,$ > 2.0
Beta.java,logGammaSum,b,double,0,OutOfRangeException,$ < 1.0
Beta.java,logGammaSum,b,double,0,OutOfRangeException,$ > 2.0
Beta.java,logGammaSum,x,double,1,RET,$ <= 0.5
Beta.java,logGammaSum,x,double,1,RET,$ <= 1.5
Beta.java,logGammaMinusLogGammaSum,a,double,0,NumberIsTooSmallException,$ < 0.0
Beta.java,logGammaMinusLogGammaSum,b,double,0,NumberIsTooSmallException,$ < 10.0
Beta.java,logGammaMinusLogGammaSum,a,double,1,DEF,$ <= b
Beta.java,deltaMinusDeltaSum,a,double,0,OutOfRangeException,$ < 0
Beta.java,deltaMinusDeltaSum,a,double,0,OutOfRangeException,$ > b
Beta.java,deltaMinusDeltaSum,b,double,0,NumberIsTooSmallException,$ < 10
Beta.java,sumDeltaMinusDeltaSum,p,double,0,NumberIsTooSmallException,$ < 10.0
Beta.java,sumDeltaMinusDeltaSum,q,double,0,NumberIsTooSmallException,$ < 10.0
Beta.java,logBeta,p,double,0,RET,$ <= 0.0
Beta.java,logBeta,q,double,0,RET,$ <= 0.0
Beta.java,logBeta,a,double,1,RET,$ >= 10.0
Beta.java,logBeta,u,double,1,RET,$ <= v
Beta.java,logBeta,a,double,1,RET,$ > 2.0
Beta.java,logBeta,b,double,1,RET,$ > 1000.0
Beta.java,logBeta,b,double,1,RET,$ < 10.0
Beta.java,logBeta,a,double,1,RET,$ >= 1.0
Beta.java,logBeta,b,double,1,RET,$ > 2.0
Beta.java,logBeta,b,double,1,RET,$ < 10.0
Beta.java,logBeta,b,double,1,RET,$ >= 10.0
Gamma.java,logGamma,x,double,1,DEF,$ <= 0.0
Gamma.java,logGamma,x,double,1,RET,$ < 0.5
Gamma.java,logGamma,x,double,1,RET,$ <= 2.5
Gamma.java,logGamma,x,double,1,RET,$ <= 8.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaP,n,double,1,MaxCountExceededException,$ >= maxIterations
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ == 0.0
Gamma.java,digamma,x,double,0,RET,$ > 0
Gamma.java,digamma,x,double,0,RET,$ <= S_LIMIT
Gamma.java,digamma,x,double,0,RET,$ >= C_LIMIT
Gamma.java,trigamma,x,double,0,RET,$ > 0
Gamma.java,trigamma,x,double,0,RET,$ <= S_LIMIT
Gamma.java,trigamma,x,double,0,RET,$ >= C_LIMIT
Gamma.java,invGamma1pm1,x,double,0,NumberIsTooSmallException,$ < -0.5
Gamma.java,invGamma1pm1,x,double,0,NumberIsTooLargeException,$ > 1.5
Gamma.java,invGamma1pm1,t,double,1,DEF,$ < 0.0
Gamma.java,invGamma1pm1,x,double,1,DEF,$ > 0.5
Gamma.java,invGamma1pm1,x,double,1,DEF,$ > 0.5
Gamma.java,logGamma1p,x,double,0,NumberIsTooSmallException,$ < -0.5
Gamma.java,logGamma1p,x,double,0,NumberIsTooLargeException,$ > 1.5
Gamma.java,gamma,x,double,0,RET,$ <= 0.0
Gamma.java,gamma,absX,double,1,DEF,$ <= 20.0
Gamma.java,gamma,x,double,1,DEF,$ >= 1.0
Gamma.java,gamma,x,double,1,DEF,$ > 0.0
Erf.java,erf,x,double,0,RET,FastMath.abs($) > 40
Erf.java,erfc,x,double,0,RET,FastMath.abs($) > 40
Erf.java,erf,x1,double,0,RET,$ > x2
Erf.java,erfInv,w,double,1,DEF,$ < 6.25
Erf.java,erfInv,w,double,1,DEF,$ < 16.0
VectorFormat.java,format,i,int,0,DEF,$ > 0
VectorFormat.java,parseCoordinates,i,int,0,RET,$ > 0
VectorFormat.java,parseCoordinates,c,Number,0,RET,$ == null
Segment.java,distance,r,double,1,RET,$ < 0
Segment.java,distance,r,double,1,RET,$ > 1
Line.java,reset,d,double,1,DEF,$ == 0.0
Line.java,revertSelf,angle,double,1,DEF,$ < FastMath.PI
Line.java,intersection,d,double,0,RET,FastMath.abs($) < 1.0e-10
Line.java,LineTransform,c11,double,0,MathIllegalArgumentException,FastMath.abs($) < 1.0e-20
SubLine.java,side,crossing,Vector2D,0,RET,$ == null
SubLine.java,split,crossing,Vector2D,0,RET,$ == null
PolygonsSet.java,verticesToTree,n,int,0,RET,$ == 0
PolygonsSet.java,verticesToTree,line,Line,0,DEF,$ == null
PolygonsSet.java,verticesToTree,vertex,Vertex,0,DEF,$ != start
PolygonsSet.java,verticesToTree,vertex,Vertex,0,DEF,$ != end
PolygonsSet.java,verticesToTree,vertex,Vertex,0,DEF,FastMath.abs(line.getOffset($.getLocation())) <= hyperplaneThickness
PolygonsSet.java,verticesToTree,line,Line,0,DEF,FastMath.abs($.getOffset(vertex.getLocation())) <= hyperplaneThickness
PolygonsSet.java,insertEdges,inserted,Edge,1,DEF,$.getNode() == null
PolygonsSet.java,insertEdges,inserted,Edge,0,RET,$ == null
PolygonsSet.java,insertEdges,parent,BSPTree<Euclidean2D>,1,DEF,$ == null
PolygonsSet.java,insertEdges,edge,Edge,0,DEF,$ != inserted
PolygonsSet.java,insertEdges,endSide,Side,1,DEF,$ == Side.MINUS
PolygonsSet.java,insertEdges,endSide,Side,1,DEF,$ == Side.PLUS
PolygonsSet.java,insertEdges,endSide,Side,1,DEF,$ == Side.PLUS
PolygonsSet.java,insertEdges,endSide,Side,0,DEF,$ == Side.MINUS
PolygonsSet.java,sharedLineWith,line1,Line,0,RET,$ == line2
PolygonsSet.java,computeGeometricalProperties,v,Vector2D[][],1,DEF,$.length == 0
PolygonsSet.java,computeGeometricalProperties,tree,BSPTree<Euclidean2D>,1,DEF,$.getCut() == null
PolygonsSet.java,computeGeometricalProperties,v,Vector2D[][],1,DEF,$[0][0] == null
PolygonsSet.java,computeGeometricalProperties,sum,double,1,DEF,$ < 0
PolygonsSet.java,getVertices,vertices,Vector2D[][],0,DEF,$ == null
PolygonsSet.java,getVertices,loop,List<ComparableSegment>,0,DEF,$ != null
PolygonsSet.java,getVertices,loop,List<ComparableSegment>,1,DEF,$.size() < 2
PolygonsSet.java,getVertices,loop,List<ComparableSegment>,1,DEF,$.get(0).getStart() == null
PolygonsSet.java,getVertices,j,int,0,DEF,$ == 0
PolygonsSet.java,followLoop,distance,double,0,DEF,$ < selectedDistance
PolygonsSet.java,followLoop,selectedDistance,double,0,RET,$ > 1.0e-10
PolygonsSet.java,followLoop,loop,ArrayList<ComparableSegment>,0,RET,$.size() == 2
PolygonsSet.java,followLoop,end,Vector2D,0,MathInternalError,$ == null
PolygonsSet.java,equals,other,null,1,RET,$ instanceof ComparableSegment
PolygonsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean2D>,0,DEF,$.getPlusOutside() != null
PolygonsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean2D>,0,DEF,$.getPlusInside() != null
Vector2D.java,Vector2D,v,double[],0,DimensionMismatchException,$.length != 2
Vector2D.java,normalize,s,double,0,MathArithmeticException,$ == 0
Vector2D.java,equals,other,null,0,RET,$ instanceof Vector2D
Vector2DFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
Vector2DFormat.java,parse,coordinates,double[],0,RET,$ == null
NestedLoops.java,NestedLoops,loop,Vector2D[],0,MathIllegalArgumentException,$[0] == null
Vector1DFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
Vector1DFormat.java,parse,coordinates,double[],0,RET,$ == null
Vector1D.java,normalize,s,double,0,MathArithmeticException,$ == 0
Vector1D.java,equals,other,null,0,RET,$ instanceof Vector1D
IntervalsSet.java,buildTree,lower,double,0,RET,$ < 0
IntervalsSet.java,buildTree,upper,double,0,RET,$ > 0
IntervalsSet.java,buildTree,upper,double,0,RET,$ > 0
IntervalsSet.java,computeGeometricalProperties,size,double,1,DEF,$ >= Precision.SAFE_MIN
IntervalsSet.java,recurseList,node,BSPTree<Euclidean1D>,1,DEF,$.getCut() == null
IntervalsSet.java,recurseList,loc,Vector1D,0,DEF,checkPoint(low, $) == Location.INSIDE
IntervalsSet.java,recurseList,low,BSPTree<Euclidean1D>,0,DEF,checkPoint($, loc) == Location.INSIDE
IntervalsSet.java,recurseList,loc,Vector1D,0,DEF,checkPoint(high, $) == Location.INSIDE
IntervalsSet.java,recurseList,high,BSPTree<Euclidean1D>,0,DEF,checkPoint($, loc) == Location.INSIDE
SubPlane.java,side,inter,Line,0,RET,$ == null
SubPlane.java,side,otherPlane,Plane,0,DEF,crossP.dotProduct($.getNormal()) < 0
SubPlane.java,side,crossP,Vector3D,0,DEF,$.dotProduct(otherPlane.getNormal()) < 0
SubPlane.java,split,inter,Line,0,RET,$ == null
SubPlane.java,split,otherPlane,Plane,0,DEF,crossP.dotProduct($.getNormal()) < 0
SubPlane.java,split,crossP,Vector3D,0,DEF,$.dotProduct(otherPlane.getNormal()) < 0
SphericalCoordinates.java,computeJacobian,jacobian,double[][],0,DEF,$ == null
SphericalCoordinates.java,computeHessians,rHessian,double[][],0,DEF,$ == null
Line.java,reset,norm2,double,0,MathIllegalArgumentException,$ == 0.0
Line.java,distance,n,double,0,RET,$ < Precision.SAFE_MIN
Line.java,closestPoint,n,double,0,RET,$ < Precision.EPSILON
Vector3DFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
Vector3DFormat.java,parse,coordinates,double[],0,RET,$ == null
Vector3D.java,Vector3D,v,double[],0,DimensionMismatchException,$.length != 3
Vector3D.java,normalize,s,double,0,MathArithmeticException,$ == 0
Vector3D.java,orthogonal,threshold,double,0,MathArithmeticException,$ == 0
Vector3D.java,orthogonal,x,double,1,RET,FastMath.abs($) <= threshold
Vector3D.java,orthogonal,y,double,0,RET,FastMath.abs($) <= threshold
Vector3D.java,angle,normProduct,double,0,MathArithmeticException,$ == 0
Vector3D.java,angle,dot,double,0,RET,$ < -threshold
Vector3D.java,angle,dot,double,0,RET,$ > threshold
Vector3D.java,angle,dot,double,0,RET,$ >= 0
Vector3D.java,equals,other,null,0,RET,$ instanceof Vector3D
OutlineExtractor.java,getOutline,end,int,0,DEF,$ != rawLoop.length
OutlineExtractor.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusOutside() != null
OutlineExtractor.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusInside() != null
OutlineExtractor.java,addContribution,scal,double,0,DEF,FastMath.abs($) > 1.0e-3
OutlineExtractor.java,addContribution,scal,double,0,DEF,$ < 0
OutlineExtractor.java,addContribution,loop,Vector2D[],1,DEF,$[0] == null
OutlineExtractor.java,addContribution,previous,int,0,DEF,$ != 1
PolyhedronsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusOutside() != null
PolyhedronsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusInside() != null
PolyhedronsSet.java,recurseFirstIntersection,cut,SubHyperplane<Euclidean3D>,0,RET,$ == null
PolyhedronsSet.java,recurseFirstIntersection,offset,double,1,DEF,$ < 0
PolyhedronsSet.java,recurseFirstIntersection,facet,SubHyperplane<Euclidean3D>,0,RET,$ != null
PolyhedronsSet.java,recurseFirstIntersection,crossed,SubHyperplane<Euclidean3D>,0,RET,$ != null
PolyhedronsSet.java,recurseFirstIntersection,hit3D,Vector3D,0,RET,$ != null
PolyhedronsSet.java,recurseFirstIntersection,facet,SubHyperplane<Euclidean3D>,0,RET,$ != null
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,$.getPlusOutside() != null
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,((SubPlane) $.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
PolyhedronsSet.java,boundaryFacet,point2D,Vector2D,0,RET,((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint($) == Location.INSIDE
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,$.getPlusInside() != null
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,((SubPlane) $.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
PolyhedronsSet.java,boundaryFacet,point2D,Vector2D,0,RET,((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint($) == Location.INSIDE
PolyhedronsSet.java,apply,original,Hyperplane<Euclidean3D>,0,DEF,$ != cachedOriginal
PolyhedronsSet.java,apply,original,Hyperplane<Euclidean3D>,0,DEF,$ != cachedOriginal
Plane.java,setNormal,norm,double,0,MathArithmeticException,$ < 1.0e-10
Plane.java,intersection,dot,double,0,RET,FastMath.abs($) < 1.0e-10
Plane.java,intersection,direction,Vector3D,0,RET,$.getNorm() < 1.0e-10
Plane.java,intersection,determinant,double,0,RET,FastMath.abs($) < 1.0e-10
FieldRotation.java,FieldRotation,norm,T,0,MathIllegalArgumentException,$.getReal() == 0
FieldRotation.java,FieldRotation,m,T[][],0,NotARotationMatrixException,$.length != 3
FieldRotation.java,FieldRotation,m,T[][],0,NotARotationMatrixException,$[0].length != 3
FieldRotation.java,FieldRotation,m,T[][],0,NotARotationMatrixException,$[1].length != 3
FieldRotation.java,FieldRotation,m,T[][],0,NotARotationMatrixException,$[2].length != 3
FieldRotation.java,FieldRotation,det,T,0,NotARotationMatrixException,$.getReal() < 0.0
FieldRotation.java,FieldRotation,normProduct,T,0,MathArithmeticException,$.getReal() == 0
FieldRotation.java,mat2quat,s,T,1,DEF,$.getReal() > -0.19
FieldRotation.java,mat2quat,s,T,1,DEF,$.getReal() > -0.19
FieldRotation.java,mat2quat,s,T,1,DEF,$.getReal() > -0.19
FieldRotation.java,getAxis,squaredSine,T,1,RET,$.getReal() == 0
FieldRotation.java,getAxis,q0,T,0,RET,$.getReal() < 0
FieldRotation.java,getAngle,q0,T,1,RET,$.getReal() < -0.1
FieldRotation.java,getAngle,q0,T,1,RET,$.getReal() > 0.1
FieldRotation.java,getAngle,q0,T,0,RET,$.getReal() < 0
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYZ
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZY
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXZ
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZX
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXY
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZYX
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYX
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZX
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXY
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZY
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXZ
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() > 0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() > 0.9999999999
FieldRotation.java,orthogonalizeMatrix,fn1,double,0,RET,FastMath.abs($ - fn) <= threshold
FieldRotation.java,orthogonalizeMatrix,fn,double,0,RET,FastMath.abs(fn1 - $) <= threshold
FieldVector3D.java,FieldVector3D,v,T[],0,DimensionMismatchException,$.length != 3
FieldVector3D.java,normalize,s,T,0,MathArithmeticException,$.getReal() == 0
FieldVector3D.java,orthogonal,threshold,double,0,MathArithmeticException,$ == 0
FieldVector3D.java,orthogonal,x,T,1,RET,FastMath.abs($.getReal()) <= threshold
FieldVector3D.java,orthogonal,y,T,1,RET,FastMath.abs($.getReal()) <= threshold
FieldVector3D.java,angle,normProduct,T,0,MathArithmeticException,$.getReal() == 0
FieldVector3D.java,angle,dot,T,0,RET,$.getReal() < -threshold
FieldVector3D.java,angle,dot,T,0,RET,$.getReal() > threshold
FieldVector3D.java,angle,dot,T,0,RET,$.getReal() >= 0
FieldVector3D.java,angle,normProduct,T,0,MathArithmeticException,$.getReal() == 0
FieldVector3D.java,angle,dot,T,0,RET,$.getReal() < -threshold
FieldVector3D.java,angle,dot,T,0,RET,$.getReal() > threshold
FieldVector3D.java,angle,dot,T,0,RET,$.getReal() >= 0
FieldVector3D.java,equals,other,null,0,RET,$ instanceof FieldVector3D
Rotation.java,Rotation,norm,double,0,MathIllegalArgumentException,$ == 0
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$.length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[0].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[1].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[2].length != 3
Rotation.java,Rotation,det,double,0,NotARotationMatrixException,$ < 0.0
Rotation.java,Rotation,normProduct,double,0,MathArithmeticException,$ == 0
Rotation.java,mat2quat,s,double,1,DEF,$ > -0.19
Rotation.java,mat2quat,s,double,1,DEF,$ > -0.19
Rotation.java,mat2quat,s,double,1,DEF,$ > -0.19
Rotation.java,getAxis,squaredSine,double,1,RET,$ == 0
Rotation.java,getAxis,q0,double,0,RET,$ < 0
Rotation.java,getAngle,q0,double,1,RET,$ < -0.1
Rotation.java,getAngle,q0,double,1,RET,$ > 0.1
Rotation.java,getAngle,q0,double,0,RET,$ < 0
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,orthogonalizeMatrix,fn1,double,0,RET,FastMath.abs($ - fn) <= threshold
Rotation.java,orthogonalizeMatrix,fn,double,0,RET,FastMath.abs(fn1 - $) <= threshold
RegionFactory.java,buildConvex,hyperplanes,Hyperplane<S>[],0,RET,$ == null
RegionFactory.java,buildConvex,hyperplanes,Hyperplane<S>[],0,RET,$.length == 0
RegionFactory.java,recurseComplement,node,BSPTree<S>,0,RET,$.getCut() == null
RegionFactory.java,recurseComplement,attribute,BoundaryAttribute<S>,0,DEF,$ != null
BSPTree.java,insertCut,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,insertCut,chopped,SubHyperplane<S>,0,RET,$ == null
BSPTree.java,copySelf,cut,SubHyperplane<S>,0,RET,$ == null
BSPTree.java,visit,cut,SubHyperplane<S>,1,DEF,$ == null
BSPTree.java,fitToCell,tree,BSPTree<S>,1,DEF,$ == tree.parent.plus
BSPTree.java,getCell,cut,SubHyperplane<S>,0,RET,$ == null
BSPTree.java,getCell,offset,double,1,RET,FastMath.abs($) < 1.0e-10
BSPTree.java,getCell,offset,double,1,RET,$ <= 0
BSPTree.java,condense,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,condense,plus,BSPTree<S>,0,DEF,$.cut == null
BSPTree.java,condense,minus,BSPTree<S>,0,DEF,$.cut == null
BSPTree.java,condense,plus,BSPTree<S>,0,DEF,$.attribute == null
BSPTree.java,condense,minus,BSPTree<S>,0,DEF,$.attribute == null
BSPTree.java,condense,plus,BSPTree<S>,0,DEF,$.attribute != null
BSPTree.java,merge,cut,SubHyperplane<S>,1,RET,$ == null
BSPTree.java,merge,tree,BSPTree<S>,1,RET,$.cut == null
BSPTree.java,merge,parentTree,BSPTree<S>,0,DEF,$ != null
BSPTree.java,merge,merged,BSPTree<S>,0,DEF,$.cut != null
BSPTree.java,split,cut,SubHyperplane<S>,0,RET,$ == null
BSPTree.java,split,cut,SubHyperplane<S>,1,DEF,$.side(sHyperplane) == Side.PLUS
BSPTree.java,split,sHyperplane,Hyperplane<S>,1,DEF,cut.side($) == Side.PLUS
BSPTree.java,split,cut,SubHyperplane<S>,1,DEF,$.side(sHyperplane) == Side.PLUS
BSPTree.java,split,sHyperplane,Hyperplane<S>,1,DEF,cut.side($) == Side.PLUS
BSPTree.java,insertInTree,parentTree,BSPTree<S>,0,DEF,$ != null
BSPTree.java,insertInTree,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,insertInTree,tree,BSPTree<S>,1,DEF,$ == tree.parent.plus
BSPTree.java,chopOffMinus,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,chopOffPlus,cut,SubHyperplane<S>,0,DEF,$ != null
AbstractRegion.java,AbstractRegion,boundary,Collection<SubHyperplane<S>>,1,DEF,$.size() == 0
AbstractRegion.java,AbstractRegion,hyperplanes,Hyperplane<S>[],1,DEF,$ == null
AbstractRegion.java,AbstractRegion,hyperplanes,Hyperplane<S>[],1,DEF,$.length == 0
AbstractRegion.java,isEmpty,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,checkPoint,cell,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,getTree,tree,BSPTree<S>,0,DEF,$.getCut() != null
AbstractRegion.java,getTree,tree,BSPTree<S>,0,DEF,$.getAttribute() == null
AbstractRegion.java,visitInternalNode,plusChar,SubHyperplane<S>[],0,DEF,$[0] != null
AbstractRegion.java,visitInternalNode,minusChar,SubHyperplane<S>[],0,DEF,$[1] != null
AbstractRegion.java,visitInternalNode,plusChar,SubHyperplane<S>[],0,DEF,$[1] != null
AbstractRegion.java,visitInternalNode,minusChar,SubHyperplane<S>[],0,DEF,$[0] != null
AbstractRegion.java,characterize,node,BSPTree<S>,1,DEF,$.getCut() == null
AbstractRegion.java,characterize,characterization,SubHyperplane<S>[],1,DEF,$[1] == null
AbstractRegion.java,characterize,characterization,SubHyperplane<S>[],1,DEF,$[0] == null
AbstractRegion.java,getSize,barycenter,Vector<S>,0,DEF,$ == null
AbstractRegion.java,getBarycenter,barycenter,Vector<S>,0,DEF,$ == null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,recurseSides,node,BSPTree<S>,1,DEF,$.getCut().side(sub.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,sub,SubHyperplane<S>,1,DEF,node.getCut().side($.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,node,BSPTree<S>,1,DEF,$.getCut().side(sub.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,sub,SubHyperplane<S>,1,DEF,node.getCut().side($.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getPlus().getCut() != null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getMinus().getCut() != null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getPlus().getCut() != null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getMinus().getCut() != null
AbstractRegion.java,recurseIntersection,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,recurseIntersection,plus,SubHyperplane<S>,1,RET,$ == null
AbstractRegion.java,recurseIntersection,minus,SubHyperplane<S>,1,RET,$ == null
AbstractRegion.java,recurseTransform,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,recurseTransform,attribute,BoundaryAttribute<S>,0,DEF,$ != null
OrderedTuple.java,OrderedTuple,components,double[],1,DEF,$[i] < 0
OrderedTuple.java,OrderedTuple,i,int,1,DEF,components[$] < 0
OrderedTuple.java,OrderedTuple,m,long,0,DEF,$ != 0
OrderedTuple.java,OrderedTuple,lsb,int,1,DEF,$ <= msb
OrderedTuple.java,encode,encoding,long[],0,RET,$ != null
OrderedTuple.java,encode,encoding,long[],0,RET,$.length == 1
OrderedTuple.java,encode,encoding,long[],0,RET,$[0] == 0x0L
OrderedTuple.java,encode,vIndex,int,0,DEF,getBit($, k) != 0
OrderedTuple.java,encode,k,int,0,DEF,getBit(vIndex, $) != 0
OrderedTuple.java,encode,shift,int,0,DEF,$-- == 0
OrderedTuple.java,compareTo,components,double[],0,RET,$.length == ot.components.length
OrderedTuple.java,compareTo,offset,int,1,DEF,$ < ot.offset
OrderedTuple.java,compareTo,offset,int,0,DEF,$ > ot.offset
OrderedTuple.java,compareTo,encoding,long[],1,RET,$.length < ot.encoding.length
OrderedTuple.java,compareTo,encoding,long[],1,RET,$.length > ot.encoding.length
OrderedTuple.java,equals,other,null,1,RET,$ instanceof OrderedTuple
OrderedTuple.java,computeMSB,ll,long,0,DEF,($ & mask) != ll
OrderedTuple.java,computeMSB,mask,long,0,DEF,(ll & $) != ll
OrderedTuple.java,computeLSB,ll,long,0,DEF,($ & mask) == ll
OrderedTuple.java,computeLSB,mask,long,0,DEF,(ll & $) == ll
OrderedTuple.java,getBit,k,int,1,RET,$ < e
OrderedTuple.java,getBit,k,int,1,RET,$ > offset
OrderedTuple.java,getBit,k,int,1,RET,$ == offset
AVLTree.java,insert,element,T,0,DEF,$ != null
AVLTree.java,insert,top,Node,1,DEF,$ == null
AVLTree.java,delete,element,T,0,RET,$ != null
AVLTree.java,delete,node,Node,1,RET,$.element == element
AVLTree.java,delete,node,Node,0,RET,$.element.compareTo(element) > 0
AVLTree.java,delete,element,T,0,RET,node.element.compareTo($) > 0
AVLTree.java,getNotSmaller,reference,T,1,RET,node.element.compareTo($) < 0
AVLTree.java,getNotSmaller,node,Node,1,RET,$.element.compareTo(reference) < 0
AVLTree.java,getNotSmaller,node,Node,0,RET,$.right == null
AVLTree.java,getNotSmaller,node,Node,0,RET,$.left == null
AVLTree.java,getNotLarger,reference,T,1,RET,node.element.compareTo($) > 0
AVLTree.java,getNotLarger,node,Node,1,RET,$.element.compareTo(reference) > 0
AVLTree.java,getNotLarger,node,Node,0,RET,$.left == null
AVLTree.java,getNotLarger,node,Node,0,RET,$.right == null
AVLTree.java,getPrevious,left,Node,0,RET,$ != null
AVLTree.java,getPrevious,node,Node,0,RET,$ != null
AVLTree.java,getPrevious,node,Node,0,RET,$ != node.parent.left
AVLTree.java,getNext,right,Node,0,RET,$ != null
AVLTree.java,getNext,node,Node,0,RET,$ != null
AVLTree.java,getNext,node,Node,0,RET,$ != node.parent.right
AVLTree.java,insert,newElement,T,0,RET,$.compareTo(this.element) < 0
AVLTree.java,insert,left,Node,0,RET,$ == null
AVLTree.java,insert,right,Node,0,RET,$ == null
AVLTree.java,delete,parent,Node,1,DEF,$ == null
AVLTree.java,delete,left,Node,1,DEF,$ == null
AVLTree.java,delete,right,Node,1,DEF,$ == null
AVLTree.java,delete,left,Node,1,DEF,$ == null
AVLTree.java,delete,right,Node,1,DEF,$ == null
AVLTree.java,delete,child,Node,0,DEF,$ != null
AVLTree.java,delete,node,Node,0,RET,$.parent == null
AVLTree.java,rebalanceLeftGrown,left,Node,1,DEF,$.skew == Skew.LEFT_HIGH
AVLTree.java,rebalanceRightGrown,right,Node,1,DEF,$.skew == Skew.RIGHT_HIGH
AVLTree.java,rebalanceLeftShrunk,right,Node,1,RET,$.skew == Skew.RIGHT_HIGH
AVLTree.java,rebalanceLeftShrunk,right,Node,1,RET,$.skew == Skew.BALANCED
AVLTree.java,rebalanceRightShrunk,left,Node,1,RET,$.skew == Skew.LEFT_HIGH
AVLTree.java,rebalanceRightShrunk,left,Node,1,RET,$.skew == Skew.BALANCED
AVLTree.java,rotateCW,left,Node,0,DEF,$ != null
AVLTree.java,rotateCW,right,Node,0,DEF,$.right != null
AVLTree.java,rotateCCW,right,Node,0,DEF,$ != null
AVLTree.java,rotateCCW,left,Node,0,DEF,$.left != null
AbstractSubHyperplane.java,recurseTransform,node,BSPTree<T>,0,RET,$.getCut() == null
AbstractSubHyperplane.java,recurseTransform,attribute,BoundaryAttribute<T>,0,DEF,$ != null
BoundarySizeVisitor.java,visitInternalNode,attribute,BoundaryAttribute<S>,0,DEF,$.getPlusOutside() != null
BoundarySizeVisitor.java,visitInternalNode,attribute,BoundaryAttribute<S>,0,DEF,$.getPlusInside() != null
AbstractWell.java,setSeed,seed,int[],0,RET,$ == null
AbstractWell.java,setSeed,seed,int[],0,DEF,$.length < v.length
SobolSequenceGenerator.java,SobolSequenceGenerator,dimension,int,0,OutOfRangeException,$ < 1
SobolSequenceGenerator.java,SobolSequenceGenerator,dimension,int,0,OutOfRangeException,$ > MAX_DIMENSION
SobolSequenceGenerator.java,SobolSequenceGenerator,is,InputStream,0,MathInternalError,$ == null
SobolSequenceGenerator.java,SobolSequenceGenerator,dimension,int,0,NotStrictlyPositiveException,$ < 1
SobolSequenceGenerator.java,SobolSequenceGenerator,lastDimension,int,0,OutOfRangeException,$ < dimension
SobolSequenceGenerator.java,initFromStream,dim,int,0,DEF,$ >= 2
SobolSequenceGenerator.java,initFromStream,dim,int,0,DEF,$ <= dimension
SobolSequenceGenerator.java,initFromStream,dim,int,0,RET,$ > dimension
SobolSequenceGenerator.java,nextVector,count,int,0,RET,$ == 0
SobolSequenceGenerator.java,skipTo,index,int,1,DEF,$ == 0
SobolSequenceGenerator.java,skipTo,shift,long,0,DEF,$ == 0
HaltonSequenceGenerator.java,HaltonSequenceGenerator,dimension,int,0,OutOfRangeException,$ < 1
HaltonSequenceGenerator.java,HaltonSequenceGenerator,dimension,int,0,OutOfRangeException,$ > bases.length
HaltonSequenceGenerator.java,HaltonSequenceGenerator,weights,int[],0,DimensionMismatchException,$ != null
HaltonSequenceGenerator.java,HaltonSequenceGenerator,weights,int[],0,DimensionMismatchException,$.length != bases.length
ValueServer.java,resetReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,closeReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,MathIllegalStateException,$ == null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,MathIllegalStateException,$.getBinStats().size() == 0
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,$ == null
ValueServer.java,getNextReplay,str,String,0,MathIllegalStateException,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,MathIllegalStateException,(str = $.readLine()) == null
ValueServer.java,getNextReplay,str,String,0,MathIllegalStateException,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,MathIllegalStateException,(str = $.readLine()) == null
ISAACRandom.java,setSeed,seed,int[],0,RET,$ == null
ISAACRandom.java,setSeed,seedLen,int,0,DEF,$ < rslLen
ISAACRandom.java,next,count,int,0,DEF,$ < 0
BitsStreamGenerator.java,nextInt,n,int,0,RET,$ > 0
BitsStreamGenerator.java,nextInt,n,int,0,RET,($ & -$) == n
BitsStreamGenerator.java,nextLong,n,long,0,RET,$ > 0
UncorrelatedRandomVectorGenerator.java,UncorrelatedRandomVectorGenerator,mean,double[],0,DimensionMismatchException,$.length != standardDeviation.length
RandomDataGenerator.java,nextHexString,len,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataGenerator.java,nextHexString,hex,String,0,DEF,$.length() == 1
RandomDataGenerator.java,nextInt,lower,int,0,NumberIsTooLargeException,$ >= upper
RandomDataGenerator.java,nextInt,max,int,1,RET,$ <= 0
RandomDataGenerator.java,nextInt,r,int,0,RET,$ >= lower
RandomDataGenerator.java,nextInt,r,int,0,RET,$ <= upper
RandomDataGenerator.java,nextLong,lower,long,0,NumberIsTooLargeException,$ >= upper
RandomDataGenerator.java,nextLong,max,long,1,RET,$ <= 0
RandomDataGenerator.java,nextLong,r,long,0,RET,$ >= lower
RandomDataGenerator.java,nextLong,r,long,0,RET,$ <= upper
RandomDataGenerator.java,nextLong,max,long,1,RET,$ < Integer.MAX_VALUE
RandomDataGenerator.java,nextLong,n,long,0,RET,$ > 0
RandomDataGenerator.java,nextSecureHexString,len,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataGenerator.java,nextSecureHexString,hex,String,0,DEF,$.length() == 1
RandomDataGenerator.java,nextSecureInt,lower,int,0,NumberIsTooLargeException,$ >= upper
RandomDataGenerator.java,nextSecureInt,max,int,1,RET,$ <= 0
RandomDataGenerator.java,nextSecureInt,r,int,0,RET,$ >= lower
RandomDataGenerator.java,nextSecureInt,r,int,0,RET,$ <= upper
RandomDataGenerator.java,nextSecureLong,lower,long,0,NumberIsTooLargeException,$ >= upper
RandomDataGenerator.java,nextSecureLong,max,long,1,RET,$ <= 0
RandomDataGenerator.java,nextSecureLong,r,long,0,RET,$ >= lower
RandomDataGenerator.java,nextSecureLong,r,long,0,RET,$ <= upper
RandomDataGenerator.java,nextSecureLong,max,long,1,RET,$ < Integer.MAX_VALUE
RandomDataGenerator.java,nextLong,n,long,0,RET,$ > 0
RandomDataGenerator.java,nextGaussian,sigma,double,0,NotStrictlyPositiveException,$ <= 0
RandomDataGenerator.java,nextUniform,lower,double,0,NumberIsTooLargeException,$ >= upper
RandomDataGenerator.java,nextPermutation,k,int,0,NumberIsTooLargeException,$ > n
RandomDataGenerator.java,nextPermutation,k,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataGenerator.java,nextSample,k,int,0,NumberIsTooLargeException,$ > len
RandomDataGenerator.java,nextSample,k,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataGenerator.java,getRandomGenerator,rand,RandomGenerator,0,DEF,$ == null
RandomDataGenerator.java,getSecRan,secRand,SecureRandom,0,DEF,$ == null
RandomDataGenerator.java,shuffle,i,int,1,DEF,$ == 0
StableRandomGenerator.java,StableRandomGenerator,generator,RandomGenerator,0,NullArgumentException,$ == null
StableRandomGenerator.java,StableRandomGenerator,alpha,double,0,OutOfRangeException,$ > 0d
StableRandomGenerator.java,StableRandomGenerator,alpha,double,0,OutOfRangeException,$ <= 2d
StableRandomGenerator.java,StableRandomGenerator,beta,double,0,OutOfRangeException,$ >= -1d
StableRandomGenerator.java,StableRandomGenerator,beta,double,0,OutOfRangeException,$ <= 1d
StableRandomGenerator.java,StableRandomGenerator,alpha,double,1,DEF,$ < 2d
StableRandomGenerator.java,StableRandomGenerator,beta,double,1,DEF,$ != 0d
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,0,RET,$ == 2d
StableRandomGenerator.java,nextNormalizedDouble,beta,double,1,DEF,$ == 0d
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,1,DEF,$ == 1d
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,1,DEF,FastMath.abs($ - 1d) > 1e-8
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,0,DEF,$ != 1d
MersenneTwister.java,setSeed,seed,int[],0,RET,$ == null
MersenneTwister.java,setSeed,i,int,0,DEF,$ >= N
MersenneTwister.java,setSeed,j,int,0,DEF,$ >= seed.length
MersenneTwister.java,setSeed,i,int,0,DEF,$ >= N
MersenneTwister.java,next,mti,int,0,DEF,$ >= N
CorrelatedRandomVectorGenerator.java,CorrelatedRandomVectorGenerator,mean,double[],0,DimensionMismatchException,$.length != order
EmpiricalDistribution.java,load,sampleStats,SummaryStatistics,0,ZeroException,$.getN() == 0
EmpiricalDistribution.java,getNextValue,stats,SummaryStatistics,0,RET,$.getN() > 0
EmpiricalDistribution.java,getNextValue,stats,SummaryStatistics,1,RET,$.getStandardDeviation() > 0
EmpiricalDistribution.java,density,x,double,0,RET,$ < min
EmpiricalDistribution.java,density,x,double,0,RET,$ > max
EmpiricalDistribution.java,cumulativeProbability,x,double,1,RET,$ < min
EmpiricalDistribution.java,cumulativeProbability,x,double,0,RET,$ >= max
EmpiricalDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0.0
EmpiricalDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1.0
EmpiricalDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 0.0
EmpiricalDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 1.0
EmpiricalDistribution.java,inverseCumulativeProbability,pCrit,double,0,RET,$ <= 0
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
AbstractRandomGenerator.java,nextBytes,i,int,0,DEF,$ > 0
AbstractRandomGenerator.java,nextBytes,bytesOut,int,0,RET,$ == bytes.length
AbstractRandomGenerator.java,nextInt,n,int,0,NotStrictlyPositiveException,$ <= 0
AbstractRandomGenerator.java,nextGaussian,s,double,0,DEF,$ != 0
Sigmoid.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Sigmoid.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 2
Sigmoid.java,value,k,int,1,DEF,$ > 1
Sinc.java,value,scaledX,double,1,RET,FastMath.abs($) <= SHORTCUT
Sinc.java,value,scaledX,double,1,DEF,FastMath.abs($) <= SHORTCUT
Sinc.java,value,i,int,1,DEF,($ & 0x1) == 0
Sinc.java,value,n,int,1,DEF,($ & 0x1) == 0
Gaussian.java,Gaussian,sigma,double,0,NotStrictlyPositiveException,$ <= 0
Gaussian.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Gaussian.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 3
Gaussian.java,validateParameters,param,double[],0,NotStrictlyPositiveException,$[2] <= 0
Gaussian.java,value,coeff,double,1,DEF,$ <= Precision.SAFE_MIN
Gaussian.java,value,k,int,1,DEF,$ > 2
Gaussian.java,value,k,int,0,DEF,$ == 2
Gaussian.java,value,n,int,0,DEF,($ & 0x1) == 1
HarmonicOscillator.java,validateParameters,param,double[],0,NullArgumentException,$ == null
HarmonicOscillator.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 3
HarmonicOscillator.java,value,f,double[],0,DEF,$.length > 1
Logit.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Logit.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 2
Logit.java,value,x,double,0,OutOfRangeException,$ < lo
Logit.java,value,x,double,0,OutOfRangeException,$ > hi
Logit.java,value,x,double,0,OutOfRangeException,$ < lo
Logit.java,value,x,double,0,OutOfRangeException,$ > hi
Logit.java,value,f,double[],0,DEF,$.length > 1
StepFunction.java,StepFunction,x,double[],0,NullArgumentException,$ == null
StepFunction.java,StepFunction,y,double[],0,NullArgumentException,$ == null
StepFunction.java,StepFunction,x,double[],0,NoDataException,$.length == 0
StepFunction.java,StepFunction,y,double[],0,NoDataException,$.length == 0
StepFunction.java,StepFunction,y,double[],0,DimensionMismatchException,$.length != x.length
StepFunction.java,value,index,int,1,DEF,$ < -1
StepFunction.java,value,index,int,1,DEF,$ >= 0
Logistic.java,Logistic,n,double,0,NotStrictlyPositiveException,$ <= 0
Logistic.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Logistic.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 6
Logistic.java,validateParameters,param,double[],0,NotStrictlyPositiveException,$[5] <= 0
BaseSecantSolver.java,doSolve,f0,double,0,RET,$ == 0.0
BaseSecantSolver.java,doSolve,f1,double,0,RET,$ == 0.0
BaseSecantSolver.java,doSolve,fx,double,0,RET,$ == 0.0
BaseSecantSolver.java,doSolve,fx,double,1,DEF,f1 * $ < 0
BaseSecantSolver.java,doSolve,f1,double,1,DEF,$ * fx < 0
BaseSecantSolver.java,doSolve,x,double,0,ConvergenceException,$ == x1
BaseSecantSolver.java,doSolve,f1,double,0,MathInternalError:RET,FastMath.abs($) <= ftol
BaseSecantSolver.java,doSolve,f1,double,0,RET,$ <= 0
BaseSecantSolver.java,doSolve,f1,double,0,RET,$ >= 0
UnivariateSolverUtils.java,solve,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,solve,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,forceSide,allowedSolution,AllowedSolution,0,RET,$ == AllowedSolution.ANY_SIDE
UnivariateSolverUtils.java,forceSide,fLo,double,0,RET,$ >= 0
UnivariateSolverUtils.java,forceSide,fHi,double,0,RET,$ <= 0
UnivariateSolverUtils.java,forceSide,fLo,double,0,RET,$ <= 0
UnivariateSolverUtils.java,forceSide,fHi,double,0,RET,$ >= 0
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ < fHi
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ >= 0
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ > fHi
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ <= 0
UnivariateSolverUtils.java,bracket,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,bracket,maximumIterations,int,0,NotStrictlyPositiveException,$ <= 0
UnivariateSolverUtils.java,bracket,fa,double,0,NoBracketingException,$ * fb > 0.0
UnivariateSolverUtils.java,bracket,fb,double,0,NoBracketingException,fa * $ > 0.0
UnivariateSolverUtils.java,isBracketing,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,verifyInterval,lower,double,0,NumberIsTooLargeException,$ >= upper
UnivariateSolverUtils.java,verifyBracketing,function,UnivariateFunction,0,NullArgumentException,$ == null
BisectionSolver.java,doSolve,fm,double,1,DEF,$ * fmin > 0
BisectionSolver.java,doSolve,fmin,double,1,DEF,fm * $ > 0
BisectionSolver.java,doSolve,min,double,0,RET,FastMath.abs(max - $) <= absoluteAccuracy
BisectionSolver.java,doSolve,max,double,0,RET,FastMath.abs($ - min) <= absoluteAccuracy
SecantSolver.java,doSolve,f0,double,0,RET,$ == 0.0
SecantSolver.java,doSolve,f1,double,0,RET,$ == 0.0
SecantSolver.java,doSolve,fx,double,0,RET,$ == 0.0
SecantSolver.java,doSolve,f1,double,0,RET,FastMath.abs($) <= ftol
LaguerreSolver.java,doSolve,yInitial,double,0,RET,FastMath.abs($) <= functionValueAccuracy
LaguerreSolver.java,doSolve,yMin,double,0,RET,FastMath.abs($) <= functionValueAccuracy
LaguerreSolver.java,doSolve,yMin,double,0,RET,yInitial * $ < 0
LaguerreSolver.java,doSolve,yInitial,double,0,RET,$ * yMin < 0
LaguerreSolver.java,doSolve,yMax,double,0,RET,FastMath.abs($) <= functionValueAccuracy
LaguerreSolver.java,doSolve,yInitial,double,0,RET,$ * yMax < 0
LaguerreSolver.java,doSolve,yMax,double,0,RET,yInitial * $ < 0
LaguerreSolver.java,solveAll,coefficients,Complex[],0,NullArgumentException,$ == null
LaguerreSolver.java,solveAll,n,int,0,NoDataException,$ == 0
LaguerreSolver.java,solve,coefficients,Complex[],0,NullArgumentException,$ == null
LaguerreSolver.java,solve,n,int,0,NoDataException,$ == 0
LaguerreSolver.java,solve,oldz,Complex,0,RET,(z.subtract($)).abs() <= tolerance
LaguerreSolver.java,solve,z,Complex,0,RET,($.subtract(oldz)).abs() <= tolerance
LaguerreSolver.java,solve,pv,Complex,0,RET,$.abs() <= functionValueAccuracy
NewtonSolver.java,doSolve,x0,double,0,RET,FastMath.abs(x1 - $) <= absoluteAccuracy
NewtonSolver.java,doSolve,x1,double,0,RET,FastMath.abs($ - x0) <= absoluteAccuracy
BracketingNthOrderBrentSolver.java,BracketingNthOrderBrentSolver,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolver.java,BracketingNthOrderBrentSolver,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolver.java,BracketingNthOrderBrentSolver,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolver.java,doSolve,y,double[],1,DEF,$[0] * $[1] < 0
BracketingNthOrderBrentSolver.java,doSolve,y,double[],1,DEF,$[1] * $[2] < 0
BracketingNthOrderBrentSolver.java,doSolve,xA,double,0,MathInternalError:RET,(xB - $) <= xTol
BracketingNthOrderBrentSolver.java,doSolve,xB,double,0,MathInternalError:RET,($ - xA) <= xTol
BracketingNthOrderBrentSolver.java,doSolve,agingA,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolver.java,doSolve,agingB,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolver.java,doSolve,nextX,double,0,DEF,$ > xA
BracketingNthOrderBrentSolver.java,doSolve,nextX,double,0,DEF,$ < xB
BracketingNthOrderBrentSolver.java,doSolve,nbPoints,int,1,DEF,$ > 2
BracketingNthOrderBrentSolver.java,doSolve,start,int,1,DEF,end - $ != nbPoints
BracketingNthOrderBrentSolver.java,doSolve,end,int,1,DEF,$ - start != nbPoints
BracketingNthOrderBrentSolver.java,doSolve,nbPoints,int,0,DEF,$ == x.length
BracketingNthOrderBrentSolver.java,doSolve,yA,double,1,DEF,nextY * $ <= 0
BracketingNthOrderBrentSolver.java,doSolve,nextY,double,1,DEF,$ * yA <= 0
MullerSolver2.java,doSolve,y0,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver2.java,doSolve,y1,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver2.java,doSolve,y0,double,0,NoBracketingException,$ * y1 > 0
MullerSolver2.java,doSolve,y1,double,0,NoBracketingException,y0 * $ > 0
MullerSolver2.java,doSolve,delta,double,1,DEF,$ >= 0.0
MullerSolver2.java,doSolve,denominator,double,1,DEF,$ != 0
MullerSolver2.java,doSolve,oldx,double,0,RET,FastMath.abs(x - $) <= tolerance
MullerSolver2.java,doSolve,x,double,0,RET,FastMath.abs($ - oldx) <= tolerance
MullerSolver2.java,doSolve,y,double,0,RET,FastMath.abs($) <= functionValueAccuracy
NewtonRaphsonSolver.java,doSolve,x0,double,0,RET,FastMath.abs(x1 - $) <= absoluteAccuracy
NewtonRaphsonSolver.java,doSolve,x1,double,0,RET,FastMath.abs($ - x0) <= absoluteAccuracy
MullerSolver.java,doSolve,fMin,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver.java,doSolve,fMax,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver.java,doSolve,fInitial,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver.java,solve,oldx,double,0,RET,FastMath.abs(x - $) <= tolerance
MullerSolver.java,solve,x,double,0,RET,FastMath.abs($ - oldx) <= tolerance
MullerSolver.java,solve,y,double,0,RET,FastMath.abs($) <= functionValueAccuracy
MullerSolver.java,solve,ym,double,1,DEF,FastMath.signum(y0) + FastMath.signum($) == 0.0
MullerSolver.java,solve,y0,double,1,DEF,FastMath.signum($) + FastMath.signum(ym) == 0.0
BrentSolver.java,doSolve,yInitial,double,0,RET,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,doSolve,yMin,double,0,RET,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,doSolve,yMin,double,0,RET,yInitial * $ < 0
BrentSolver.java,doSolve,yInitial,double,0,RET,$ * yMin < 0
BrentSolver.java,doSolve,yMax,double,0,RET,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,doSolve,yInitial,double,0,RET,$ * yMax < 0
BrentSolver.java,doSolve,yMax,double,0,RET,yInitial * $ < 0
BrentSolver.java,brent,m,double,0,RET,FastMath.abs($) <= tol
BrentSolver.java,brent,e,double,1,DEF,FastMath.abs($) < tol
BrentSolver.java,brent,a,double,1,DEF,$ == c
BrentSolver.java,brent,p,double,1,DEF,$ > 0
BrentSolver.java,brent,d,double,1,DEF,FastMath.abs($) > tol
BrentSolver.java,brent,m,double,1,DEF,$ > 0
BrentSolver.java,brent,fb,double,0,DEF,$ > 0
BrentSolver.java,brent,fc,double,0,DEF,$ > 0
BrentSolver.java,brent,fb,double,0,DEF,$ <= 0
BrentSolver.java,brent,fc,double,0,DEF,$ <= 0
RiddersSolver.java,doSolve,y1,double,0,RET,$ == 0
RiddersSolver.java,doSolve,y2,double,0,RET,$ == 0
RiddersSolver.java,doSolve,y3,double,0,RET,FastMath.abs($) <= functionValueAccuracy
RiddersSolver.java,doSolve,oldx,double,0,RET,FastMath.abs(x - $) <= tolerance
RiddersSolver.java,doSolve,x,double,0,RET,FastMath.abs($ - oldx) <= tolerance
RiddersSolver.java,doSolve,y,double,0,RET,FastMath.abs($) <= functionValueAccuracy
RiddersSolver.java,doSolve,correction,double,1,DEF,$ > 0.0
RiddersSolver.java,doSolve,y1,double,1,DEF,FastMath.signum($) + FastMath.signum(y) == 0.0
RiddersSolver.java,doSolve,y,double,1,DEF,FastMath.signum(y1) + FastMath.signum($) == 0.0
RiddersSolver.java,doSolve,y2,double,1,DEF,FastMath.signum($) + FastMath.signum(y) == 0.0
RiddersSolver.java,doSolve,y,double,1,DEF,FastMath.signum(y2) + FastMath.signum($) == 0.0
FunctionUtils.java,value,i,int,0,DEF,$ != j
FunctionUtils.java,sample,n,int,0,NotStrictlyPositiveException,$ <= 0
FunctionUtils.java,sample,min,double,0,NumberIsTooLargeException,$ >= max
FunctionUtils.java,value,i,int,1,DEF,$ == k
FunctionUtils.java,value,order,int,0,NumberIsTooLargeException,$ > 1
FunctionUtils.java,value,t,DerivativeStructure[],0,DimensionMismatchException,$[i].getFreeParameters() != parameters
FunctionUtils.java,value,i,int,0,DimensionMismatchException,t[$].getFreeParameters() != parameters
FunctionUtils.java,value,t,DerivativeStructure[],0,DimensionMismatchException,$[i].getOrder() != order
FunctionUtils.java,value,i,int,0,DimensionMismatchException,t[$].getOrder() != order
FunctionUtils.java,value,order,int,0,NumberIsTooLargeException,$ > 1
FunctionUtils.java,value,t,DerivativeStructure[],0,DimensionMismatchException,$[i].getFreeParameters() != parameters
FunctionUtils.java,value,i,int,0,DimensionMismatchException,t[$].getFreeParameters() != parameters
FunctionUtils.java,value,t,DerivativeStructure[],0,DimensionMismatchException,$[i].getOrder() != order
FunctionUtils.java,value,i,int,0,DimensionMismatchException,t[$].getOrder() != order
PolynomialFunctionLagrangeForm.java,evaluateInternal,dist,double,0,DEF,$ < min_dist
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != j
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,DimensionMismatchException,$.length != y.length
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,NumberIsTooSmallException,$.length < 2
PolynomialFunctionNewtonForm.java,verifyInputArray,a,double[],0,NoDataException,$.length == 0
PolynomialFunctionNewtonForm.java,verifyInputArray,c,double[],0,NoDataException,$.length == 0
PolynomialsUtils.java,equals,key,Object,0,RET,$ == null
PolynomialsUtils.java,equals,key,null,0,RET,$ instanceof JacobiKey
PolynomialsUtils.java,buildPolynomial,degree,int,0,DEF,$ > maxDegree
PolynomialFunction.java,PolynomialFunction,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,evaluate,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,value,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,subtract,coefficients,double[],1,DEF,$.length < p.coefficients.length
PolynomialFunction.java,differentiate,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,differentiate,n,int,0,RET,$ == 1
PolynomialFunction.java,toString,coefficients,double[],1,RET,$[0] == 0.0
PolynomialFunction.java,toString,coefficients,double[],0,RET,$.length == 1
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] != 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] != 0
PolynomialFunction.java,toString,s,StringBuilder,1,DEF,$.length() > 0
PolynomialFunction.java,toString,coefficients,double[],1,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,1,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,absAi,double,0,DEF,($ - 1) != 0
PolynomialFunction.java,toString,i,int,0,DEF,$ > 1
PolynomialFunction.java,equals,obj,null,0,RET,$ instanceof PolynomialFunction
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,NullArgumentException,$ == null
PolynomialSplineFunction.java,PolynomialSplineFunction,polynomials,PolynomialFunction[],0,NullArgumentException,$ == null
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,NumberIsTooSmallException,$.length < 2
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,DimensionMismatchException,$.length - 1 != polynomials.length
PolynomialSplineFunction.java,value,i,int,0,DEF,$ < 0
PolynomialSplineFunction.java,value,i,int,0,DEF,$ >= polynomials.length
PolynomialSplineFunction.java,value,i,int,0,DEF,$ < 0
PolynomialSplineFunction.java,value,i,int,0,DEF,$ >= polynomials.length
UnivariatePeriodicInterpolator.java,interpolate,xval,double[],0,NumberIsTooSmallException,$.length < extend
LoessInterpolator.java,LoessInterpolator,bandwidth,double,0,OutOfRangeException,$ < 0
LoessInterpolator.java,LoessInterpolator,bandwidth,double,0,OutOfRangeException,$ > 1
LoessInterpolator.java,LoessInterpolator,robustnessIters,int,0,NotPositiveException,$ < 0
LoessInterpolator.java,smooth,xval,double[],0,DimensionMismatchException,$.length != yval.length
LoessInterpolator.java,smooth,n,int,0,NoDataException,$ == 0
LoessInterpolator.java,smooth,n,int,0,RET,$ == 1
LoessInterpolator.java,smooth,n,int,0,RET,$ == 2
LoessInterpolator.java,smooth,bandwidthInPoints,int,0,NumberIsTooSmallException,$ < 2
LoessInterpolator.java,smooth,i,int,0,DEF,$ > 0
LoessInterpolator.java,smooth,meanXSquared,double,1,DEF,FastMath.sqrt(FastMath.abs($ - meanX * meanX)) < accuracy
LoessInterpolator.java,smooth,meanX,double,1,DEF,FastMath.sqrt(FastMath.abs(meanXSquared - $ * $)) < accuracy
LoessInterpolator.java,smooth,iter,int,0,DEF,$ == robustnessIters
LoessInterpolator.java,smooth,medianResidual,double,0,DEF,FastMath.abs($) < accuracy
LoessInterpolator.java,smooth,arg,double,1,DEF,$ >= 1
LoessInterpolator.java,smooth,xval,double[],0,DimensionMismatchException,$.length != yval.length
LoessInterpolator.java,updateBandwidthInterval,nextRight,int,0,DEF,$ < xval.length
LoessInterpolator.java,tricube,absX,double,0,RET,$ >= 1.0
HermiteInterpolator.java,addSamplePoint,i,int,0,DEF,$ > 1
TricubicSplineInterpolator.java,interpolate,xval,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,yval,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,zval,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,fval,double[][][],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,xval,double[],0,DimensionMismatchException,$.length != fval.length
TricubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$].length != yLen
TricubicSplineInterpolator.java,interpolate,fval,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$][j].length != zLen
TricubicSplineInterpolator.java,interpolate,j,int,0,DimensionMismatchException,fval[i][$].length != zLen
TricubicSplineInterpolator.java,interpolate,fval,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
FieldHermiteInterpolator.java,addSamplePoint,i,int,0,DEF,$ > 1
FieldHermiteInterpolator.java,derivatives,j,int,0,DEF,$ > 0
LinearInterpolator.java,interpolate,x,double[],0,DimensionMismatchException,$.length != y.length
LinearInterpolator.java,interpolate,x,double[],0,NumberIsTooSmallException,$.length < 2
BicubicSplineInterpolator.java,interpolate,xval,double[],0,NoDataException,$.length == 0
BicubicSplineInterpolator.java,interpolate,yval,double[],0,NoDataException,$.length == 0
BicubicSplineInterpolator.java,interpolate,fval,double[][],0,NoDataException,$.length == 0
BicubicSplineInterpolator.java,interpolate,xval,double[],0,DimensionMismatchException,$.length != fval.length
BicubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$].length != yLen
BicubicSplineInterpolator.java,interpolate,fval,double[][],0,DimensionMismatchException,$[i].length != yLen
SplineInterpolator.java,interpolate,x,double[],0,DimensionMismatchException,$.length != y.length
SplineInterpolator.java,interpolate,x,double[],0,NumberIsTooSmallException,$.length < 3
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,NoDataException,$ == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,yLen,int,0,NoDataException,$ == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,f,double[][],0,NoDataException,$.length == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,f,double[][],0,NoDataException,$[0].length == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != f.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdX.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdY.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdXdY.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,f,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,f[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,dFdX,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdX[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,dFdY,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdY[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdY[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,d2FdXdY,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,partialDerivative,partialDerivatives,BivariateFunction[][][],0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,searchIndex,r,int,0,OutOfRangeException,$ == -1
BicubicSplineInterpolatingFunction.java,searchIndex,r,int,0,RET,$ < 0
BicubicSplineInterpolatingFunction.java,searchIndex,r,int,0,RET,$ == last
BicubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ < 0
BicubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ > 1
BicubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ < 0
BicubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ > 1
BicubicSplineInterpolatingFunction.java,partialDerivativeX,partialDerivativeX,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeY,partialDerivativeY,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeXX,partialDerivativeXX,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeYY,partialDerivativeYY,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeXY,partialDerivativeXY,BivariateFunction,0,DEF,$ == null
MicrosphereInterpolator.java,MicrosphereInterpolator,exponent,int,0,NotPositiveException,$ < 0
MicrosphereInterpolator.java,MicrosphereInterpolator,elements,int,0,NotStrictlyPositiveException,$ <= 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,NoDataException,$ == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,yLen,int,0,NoDataException,$ == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,z,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,NoDataException,$.length == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,NoDataException,$[0].length == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != f.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdX.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdY.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdXdY.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdXdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdYdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d3FdXdYdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,f[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdX,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdX[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdY,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdY[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdY[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdY,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdYdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdYdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d3FdXdYdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d3FdXdYdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,f[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,f[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdX,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdX[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,dFdX[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdY,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdY[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,dFdY[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,dFdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdY[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d2FdXdY[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdY,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d2FdXdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdYdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdYdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d2FdYdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d3FdXdYdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d3FdXdYdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d3FdXdYdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,value,i,int,0,OutOfRangeException,$ == -1
TricubicSplineInterpolatingFunction.java,value,j,int,0,OutOfRangeException,$ == -1
TricubicSplineInterpolatingFunction.java,value,k,int,0,OutOfRangeException,$ == -1
TricubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ < 0
TricubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ > 1
TricubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ < 0
TricubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ > 1
TricubicSplineInterpolatingFunction.java,value,z,double,0,OutOfRangeException,$ < 0
TricubicSplineInterpolatingFunction.java,value,z,double,0,OutOfRangeException,$ > 1
SmoothingPolynomialBicubicSplineInterpolator.java,SmoothingPolynomialBicubicSplineInterpolator,xDegree,int,0,NotPositiveException,$ < 0
SmoothingPolynomialBicubicSplineInterpolator.java,SmoothingPolynomialBicubicSplineInterpolator,yDegree,int,0,NotPositiveException,$ < 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,xval,double[],0,NoDataException,$.length == 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,yval,double[],0,NoDataException,$.length == 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,fval,double[][],0,NoDataException,$.length == 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,xval,double[],0,DimensionMismatchException,$.length != fval.length
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$].length != yLen
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,fval,double[][],0,DimensionMismatchException,$[i].length != yLen
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,NullArgumentException,$ == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,yval,double[],0,NullArgumentException,$ == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,NoDataException,$.length == 0
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,DimensionMismatchException,$.length != yval.length
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,NullArgumentException,$[0] == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xvalI,double[],0,NullArgumentException,$ == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xvalI,double[],0,DimensionMismatchException,$.length != dimension
MicrosphereInterpolatingFunction.java,value,sd,Entry<RealVector,Double>,0,DEF,$ != null
LegendreGaussIntegrator.java,doIntegrate,delta,double,0,RET,$ <= limit
BaseAbstractUnivariateIntegrator.java,BaseAbstractUnivariateIntegrator,minimalIterationCount,int,0,NotStrictlyPositiveException,$ <= 0
BaseAbstractUnivariateIntegrator.java,BaseAbstractUnivariateIntegrator,maximalIterationCount,int,0,NumberIsTooSmallException,$ <= minimalIterationCount
TrapezoidIntegrator.java,TrapezoidIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > TRAPEZOID_MAX_ITERATIONS_COUNT
TrapezoidIntegrator.java,TrapezoidIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > TRAPEZOID_MAX_ITERATIONS_COUNT
TrapezoidIntegrator.java,stage,n,int,1,RET,$ == 0
TrapezoidIntegrator.java,doIntegrate,delta,double,0,RET,$ <= rLimit
LegendreHighPrecisionRuleFactory.java,computeRule,numberOfPoints,int,0,RET,$ == 1
LegendreHighPrecisionRuleFactory.java,computeRule,pa,BigDecimal,1,DEF,$.signum() * pc.signum() <= 0
LegendreHighPrecisionRuleFactory.java,computeRule,pc,BigDecimal,1,DEF,pa.signum() * $.signum() <= 0
LegendreHighPrecisionRuleFactory.java,computeRule,numberOfPoints,int,0,DEF,$ % 2 != 0
GaussIntegrator.java,GaussIntegrator,points,double[],0,DimensionMismatchException,$.length != weights.length
BaseRuleFactory.java,getRule,numberOfPoints,int,0,NotStrictlyPositiveException,$ <= 0
BaseRuleFactory.java,getRule,cached,Pair<double[],double[]>,0,DEF,$ == null
BaseRuleFactory.java,getRuleInternal,rule,Pair<T[],T[]>,0,RET,$ == null
LegendreRuleFactory.java,computeRule,numberOfPoints,int,0,RET,$ == 1
LegendreRuleFactory.java,computeRule,pa,double,1,DEF,$ * pc <= 0
LegendreRuleFactory.java,computeRule,pc,double,1,DEF,pa * $ <= 0
LegendreRuleFactory.java,computeRule,numberOfPoints,int,0,DEF,$ % 2 != 0
SimpsonIntegrator.java,SimpsonIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > SIMPSON_MAX_ITERATIONS_COUNT
SimpsonIntegrator.java,SimpsonIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > SIMPSON_MAX_ITERATIONS_COUNT
SimpsonIntegrator.java,doIntegrate,delta,double,0,RET,$ <= rLimit
RombergIntegrator.java,RombergIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > ROMBERG_MAX_ITERATIONS_COUNT
RombergIntegrator.java,RombergIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > ROMBERG_MAX_ITERATIONS_COUNT
RombergIntegrator.java,doIntegrate,delta,double,0,RET,$ <= rLimit
IterativeLegendreGaussIntegrator.java,IterativeLegendreGaussIntegrator,n,int,0,NotStrictlyPositiveException,$ <= 0
IterativeLegendreGaussIntegrator.java,doIntegrate,delta,double,0,RET,$ <= limit
DerivativeStructure.java,DerivativeStructure,index,int,0,NumberIsTooLargeException,$ >= parameters
DerivativeStructure.java,DerivativeStructure,order,int,0,DEF,$ > 0
DerivativeStructure.java,DerivativeStructure,derivatives,double[],0,DimensionMismatchException,$.length != data.length
DerivativeStructure.java,abs,data,double[],1,RET,Double.doubleToLongBits($[0]) < 0
DerivativeStructure.java,copySign,m,long,0,RET,$ >= 0
DerivativeStructure.java,copySign,s,long,0,RET,$ >= 0
DerivativeStructure.java,copySign,m,long,0,RET,$ < 0
DerivativeStructure.java,copySign,s,long,0,RET,$ < 0
DerivativeStructure.java,copySign,m,long,0,RET,$ >= 0
DerivativeStructure.java,copySign,s,long,0,RET,$ >= 0
DerivativeStructure.java,copySign,m,long,0,RET,$ < 0
DerivativeStructure.java,copySign,s,long,0,RET,$ < 0
DerivativeStructure.java,equals,other,null,0,RET,$ instanceof DerivativeStructure
DSCompiler.java,getCompiler,cache,DSCompiler[][],0,RET,$ != null
DSCompiler.java,getCompiler,cache,DSCompiler[][],0,RET,$.length > parameters
DSCompiler.java,getCompiler,cache,DSCompiler[][],0,RET,$[parameters].length > order
DSCompiler.java,getCompiler,parameters,int,0,RET,cache[$].length > order
DSCompiler.java,getCompiler,cache,DSCompiler[][],0,RET,$[parameters][order] != null
DSCompiler.java,getCompiler,parameters,int,0,RET,cache[$][order] != null
DSCompiler.java,getCompiler,order,int,0,RET,cache[parameters][$] != null
DSCompiler.java,getCompiler,cache,DSCompiler[][],0,DEF,$ != null
DSCompiler.java,getCompiler,p,int,0,DEF,newCache[$][o] == null
DSCompiler.java,getCompiler,newCache,DSCompiler[][],0,DEF,$[p][o] == null
DSCompiler.java,getCompiler,o,int,0,DEF,newCache[p][$] == null
DSCompiler.java,compileSizes,parameters,int,1,DEF,$ == 0
DSCompiler.java,compileDerivativesIndirection,parameters,int,0,RET,$ == 0
DSCompiler.java,compileDerivativesIndirection,order,int,0,RET,$ == 0
DSCompiler.java,compileLowerIndirection,parameters,int,0,RET,$ == 0
DSCompiler.java,compileLowerIndirection,order,int,0,RET,$ <= 1
DSCompiler.java,compileMultiplicationIndirection,parameters,int,0,RET,$ == 0
DSCompiler.java,compileMultiplicationIndirection,order,int,0,RET,$ == 0
DSCompiler.java,compileMultiplicationIndirection,termJ,int[],0,DEF,$[0] > 0
DSCompiler.java,compileCompositionIndirection,parameters,int,0,RET,$ == 0
DSCompiler.java,compileCompositionIndirection,order,int,0,RET,$ == 0
DSCompiler.java,compileCompositionIndirection,j,int,0,DEF,$ == l
DSCompiler.java,compileCompositionIndirection,termJ,int[],0,DEF,$[0] > 0
DSCompiler.java,getPartialDerivativeIndex,ordersSum,int,0,NumberIsTooLargeException,$ > order
DSCompiler.java,pow,n,int,0,RET,$ == 0
DSCompiler.java,pow,n,int,1,DEF,$ > 0
DSCompiler.java,rootN,n,int,1,DEF,$ == 2
DSCompiler.java,rootN,n,int,1,DEF,$ == 3
DSCompiler.java,log,order,int,0,DEF,$ > 0
DSCompiler.java,log1p,order,int,0,DEF,$ > 0
DSCompiler.java,log10,order,int,0,DEF,$ > 0
DSCompiler.java,cos,order,int,0,DEF,$ > 0
DSCompiler.java,sin,order,int,0,DEF,$ > 0
DSCompiler.java,tan,order,int,0,DEF,$ > 0
DSCompiler.java,tan,k,int,1,DEF,$ > 2
DSCompiler.java,tan,k,int,0,DEF,$ == 2
DSCompiler.java,tan,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,acos,order,int,0,DEF,$ > 0
DSCompiler.java,acos,k,int,1,DEF,$ > 2
DSCompiler.java,acos,k,int,0,DEF,$ == 2
DSCompiler.java,acos,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,asin,order,int,0,DEF,$ > 0
DSCompiler.java,asin,k,int,1,DEF,$ > 2
DSCompiler.java,asin,k,int,0,DEF,$ == 2
DSCompiler.java,asin,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,atan,order,int,0,DEF,$ > 0
DSCompiler.java,atan,k,int,1,DEF,$ > 2
DSCompiler.java,atan,k,int,0,DEF,$ == 2
DSCompiler.java,atan,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,atan2,xOffset,int,1,DEF,x[$] >= 0
DSCompiler.java,atan2,x,double[],1,DEF,$[xOffset] >= 0
DSCompiler.java,cosh,order,int,0,DEF,$ > 0
DSCompiler.java,sinh,order,int,0,DEF,$ > 0
DSCompiler.java,tanh,order,int,0,DEF,$ > 0
DSCompiler.java,tanh,k,int,1,DEF,$ > 2
DSCompiler.java,tanh,k,int,0,DEF,$ == 2
DSCompiler.java,tanh,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,acosh,order,int,0,DEF,$ > 0
DSCompiler.java,acosh,k,int,1,DEF,$ > 2
DSCompiler.java,acosh,k,int,0,DEF,$ == 2
DSCompiler.java,acosh,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,asinh,order,int,0,DEF,$ > 0
DSCompiler.java,asinh,k,int,1,DEF,$ > 2
DSCompiler.java,asinh,k,int,0,DEF,$ == 2
DSCompiler.java,asinh,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,atanh,order,int,0,DEF,$ > 0
DSCompiler.java,atanh,k,int,1,DEF,$ > 2
DSCompiler.java,atanh,k,int,0,DEF,$ == 2
DSCompiler.java,atanh,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,taylor,orders,int[],0,MathInternalError,$[k] > 0
DSCompiler.java,taylor,k,int,0,MathInternalError,orders[$] > 0
DSCompiler.java,checkCompatibility,parameters,int,0,DimensionMismatchException,$ != compiler.parameters
DSCompiler.java,checkCompatibility,order,int,0,DimensionMismatchException,$ != compiler.order
FiniteDifferencesDifferentiator.java,FiniteDifferencesDifferentiator,nbPoints,int,0,NumberIsTooSmallException,$ <= 1
FiniteDifferencesDifferentiator.java,FiniteDifferencesDifferentiator,stepSize,double,0,NotPositiveException,$ <= 0
FiniteDifferencesDifferentiator.java,evaluate,i,int,1,DEF,$ == 0
FiniteDifferencesDifferentiator.java,value,t,DerivativeStructure,0,NumberIsTooLargeException,$.getOrder() >= nbPoints
FiniteDifferencesDifferentiator.java,value,t,DerivativeStructure,0,NumberIsTooLargeException,$.getOrder() >= nbPoints
FiniteDifferencesDifferentiator.java,value,i,int,0,DEF,$ == 0
FiniteDifferencesDifferentiator.java,value,t,DerivativeStructure,0,NumberIsTooLargeException,$.getOrder() >= nbPoints
FiniteDifferencesDifferentiator.java,value,i,int,0,DEF,$ == 0
HarmonicFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NumberIsTooSmallException,$.length < 4
HarmonicFitter.java,sortObservations,i,int,0,DEF,$-- != 0
HarmonicFitter.java,guessAOmega,c1,double,1,ZeroException,$ / c2 < 0
HarmonicFitter.java,guessAOmega,c2,double,1,ZeroException,c1 / $ < 0
HarmonicFitter.java,guessAOmega,c3,double,1,ZeroException,c2 / $ < 0
HarmonicFitter.java,guessAOmega,c2,double,1,ZeroException,$ / c3 < 0
HarmonicFitter.java,guessAOmega,xRange,double,0,ZeroException,$ == 0
HarmonicFitter.java,guessAOmega,y,double,0,DEF,$ < yMin
HarmonicFitter.java,guessAOmega,y,double,0,DEF,$ > yMax
HarmonicFitter.java,guessAOmega,c2,double,0,MathIllegalStateException,$ == 0
GaussianFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NullArgumentException,$ == null
GaussianFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NumberIsTooSmallException,$.length < 3
GaussianFitter.java,compare,p1,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p2,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p1,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p2,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,interpolateXAtY,idxStep,int,0,ZeroException,$ == 0
GaussianFitter.java,interpolateXAtY,p1,WeightedObservedPoint,0,RET,$.getY() == y
GaussianFitter.java,interpolateXAtY,p2,WeightedObservedPoint,0,RET,$.getY() == y
GaussianFitter.java,getInterpolationPointsForY,idxStep,int,0,ZeroException,$ == 0
GaussianFitter.java,getInterpolationPointsForY,idxStep,int,1,RET,$ < 0
ComplexFormat.java,ComplexFormat,format,NumberFormat,0,NullArgumentException,$ == null
ComplexFormat.java,ComplexFormat,imaginaryFormat,NumberFormat,0,NullArgumentException,$ == null
ComplexFormat.java,ComplexFormat,realFormat,NumberFormat,0,NullArgumentException,$ == null
ComplexFormat.java,ComplexFormat,imaginaryCharacter,String,0,NullArgumentException,$ == null
ComplexFormat.java,ComplexFormat,imaginaryCharacter,String,0,NoDataException,$.length() == 0
ComplexFormat.java,ComplexFormat,imaginaryFormat,NumberFormat,0,NullArgumentException,$ == null
ComplexFormat.java,ComplexFormat,realFormat,NumberFormat,0,NullArgumentException,$ == null
ComplexFormat.java,format,im,double,1,DEF,$ < 0.0
ComplexFormat.java,format,im,double,0,DEF,$ > 0.0
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Complex
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Number
ComplexFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
ComplexFormat.java,parse,re,Number,0,RET,$ == null
ComplexFormat.java,parse,im,Number,0,RET,$ == null
Quaternion.java,Quaternion,v,double[],0,DimensionMismatchException,$.length != 3
Quaternion.java,normalize,norm,double,0,ZeroException,$ < Precision.SAFE_MIN
Quaternion.java,equals,other,null,0,RET,$ instanceof Quaternion
Quaternion.java,getInverse,squareNorm,double,0,ZeroException,$ < Precision.SAFE_MIN
RootsOfUnity.java,isCounterClockWise,omegaCount,int,0,MathIllegalStateException,$ == 0
RootsOfUnity.java,computeRoots,n,int,0,ZeroException,$ == 0
RootsOfUnity.java,computeRoots,absN,int,0,RET,$ == omegaCount
RootsOfUnity.java,getReal,omegaCount,int,0,MathIllegalStateException,$ == 0
RootsOfUnity.java,getReal,k,int,0,OutOfRangeException,$ < 0
RootsOfUnity.java,getReal,k,int,0,OutOfRangeException,$ >= omegaCount
RootsOfUnity.java,getImaginary,omegaCount,int,0,MathIllegalStateException,$ == 0
RootsOfUnity.java,getImaginary,k,int,0,OutOfRangeException,$ < 0
RootsOfUnity.java,getImaginary,k,int,0,OutOfRangeException,$ >= omegaCount
Complex.java,abs,imaginary,double,0,RET,$ == 0.0
Complex.java,abs,real,double,0,RET,$ == 0.0
Complex.java,divide,c,double,0,RET,$ == 0.0
Complex.java,divide,d,double,0,RET,$ == 0.0
Complex.java,divide,divisor,double,0,RET,$ == 0d
Complex.java,reciprocal,real,double,0,RET,$ == 0.0
Complex.java,reciprocal,imaginary,double,0,RET,$ == 0.0
Complex.java,equals,other,null,0,RET,$ instanceof Complex
Complex.java,sqrt,real,double,0,RET,$ == 0.0
Complex.java,sqrt,imaginary,double,0,RET,$ == 0.0
Complex.java,sqrt,real,double,1,RET,$ >= 0.0
Complex.java,tan,imaginary,double,0,RET,$ > 20.0
Complex.java,tan,imaginary,double,0,RET,$ < -20.0
Complex.java,tanh,real,double,0,RET,$ > 20.0
Complex.java,tanh,real,double,0,RET,$ < -20.0
Complex.java,nthRoot,n,int,0,NotPositiveException,$ <= 0
ComplexUtils.java,polar2Complex,r,double,0,MathIllegalArgumentException,$ < 0
DescriptiveStatistics.java,DescriptiveStatistics,initialDoubleArray,double[],0,DEF,$ != null
DescriptiveStatistics.java,addValue,windowSize,int,1,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,MathIllegalArgumentException,$ < 1
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,MathIllegalArgumentException,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,getPercentile,percentileImpl,null,1,DEF,$ instanceof Percentile
AbstractStorelessUnivariateStatistic.java,evaluate,values,double[],0,NullArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,incrementAll,values,double[],0,NullArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,equals,object,Object,0,RET,$ instanceof AbstractStorelessUnivariateStatistic == false
AbstractStorelessUnivariateStatistic.java,equals,object,null,0,RET,$ instanceof AbstractStorelessUnivariateStatistic
StatisticalSummaryValues.java,equals,object,Object,0,RET,$ instanceof StatisticalSummaryValues == false
StatisticalSummaryValues.java,equals,object,null,0,RET,$ instanceof StatisticalSummaryValues
FirstMoment.java,increment,n,long,0,DEF,$ == 0
GeometricMean.java,getResult,sumOfLogs,StorelessUnivariateStatistic,1,RET,$.getN() > 0
ThirdMoment.java,increment,n,long,0,DEF,$ < 1
Kurtosis.java,getResult,moment,FourthMoment,0,DEF,$.getN() > 3
Kurtosis.java,getResult,moment,FirstMoment,1,DEF,$.n <= 3
Kurtosis.java,getResult,variance,double,1,DEF,$ < 10E-20
Kurtosis.java,evaluate,length,int,0,DEF,$ > 3
Skewness.java,getResult,moment,FirstMoment,0,RET,$.n < 3
Skewness.java,getResult,variance,double,1,RET,$ < 10E-20
Skewness.java,evaluate,length,int,0,DEF,$ > 2
FourthMoment.java,increment,n,long,0,DEF,$ < 1
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 0
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 1
Variance.java,evaluate,values,double[],0,NullArgumentException,$ == null
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
VectorialCovariance.java,increment,v,double[],0,DimensionMismatchException,$.length != sums.length
VectorialCovariance.java,getResult,n,long,0,DEF,$ > 1
VectorialCovariance.java,equals,obj,null,0,RET,$ instanceof VectorialCovariance
VectorialCovariance.java,equals,isBiasCorrected,boolean,0,RET,$ != other.isBiasCorrected
VectorialCovariance.java,equals,n,long,0,RET,$ != other.n
SecondMoment.java,increment,n,long,0,DEF,$ < 1
VectorialMean.java,increment,v,double[],0,DimensionMismatchException,$.length != means.length
VectorialMean.java,equals,obj,null,0,RET,$ instanceof VectorialMean
SemiVariance.java,evaluate,values,double[],1,RET,$.length == 0
SemiVariance.java,evaluate,values,double[],1,RET,$.length == 1
SemiVariance.java,evaluate,values,double[],0,DEF,($[i] > cutoff) == booleanDirection
SemiVariance.java,evaluate,i,int,0,DEF,(values[$] > cutoff) == booleanDirection
SemiVariance.java,evaluate,cutoff,double,0,DEF,(values[i] > $) == booleanDirection
SemiVariance.java,evaluate,values,double[],0,DEF,$[i] > cutoff
SemiVariance.java,evaluate,i,int,0,DEF,values[$] > cutoff
Percentile.java,setData,values,double[],1,DEF,$ == null
Percentile.java,setData,values,double[],1,DEF,$ == null
Percentile.java,evaluate,p,double,0,OutOfRangeException,$ > 100
Percentile.java,evaluate,p,double,0,OutOfRangeException,$ <= 0
Percentile.java,evaluate,length,int,0,RET,$ == 0
Percentile.java,evaluate,length,int,0,RET,$ == 1
Percentile.java,evaluate,pos,double,0,RET,$ < 1
Percentile.java,evaluate,pos,double,0,RET,$ >= n
Percentile.java,select,node,int,1,DEF,$ < pivotsHeap.length
Percentile.java,select,node,int,1,DEF,pivotsHeap[$] >= 0
Percentile.java,select,pivotsHeap,int[],1,DEF,$[node] >= 0
Percentile.java,select,node,int,0,DEF,$ < pivotsHeap.length
Percentile.java,select,k,int,1,RET,$ == pivot
Percentile.java,select,k,int,1,DEF,$ < pivot
Percentile.java,medianOf3,wBegin,double,1,RET,$ < wMiddle
Percentile.java,medianOf3,wMiddle,double,1,RET,$ < wEnd
Percentile.java,medianOf3,wBegin,double,1,RET,$ < wEnd
Percentile.java,partition,i,int,0,DEF,$ < j
Percentile.java,partition,i,int,0,DEF,$ >= end
Percentile.java,partition,work,double[],0,DEF,$[i] > value
Percentile.java,partition,i,int,0,DEF,work[$] > value
Percentile.java,setQuantile,p,double,0,OutOfRangeException,$ <= 0
Percentile.java,setQuantile,p,double,0,OutOfRangeException,$ > 100
Percentile.java,copy,source,Percentile,0,DEF,$.cachedPivots != null
Max.java,increment,d,double,0,DEF,$ > value
Min.java,increment,d,double,0,DEF,$ < value
AbstractUnivariateStatistic.java,setData,values,double[],0,NullArgumentException,$ == null
AbstractUnivariateStatistic.java,setData,begin,int,0,NotPositiveException,$ < 0
AbstractUnivariateStatistic.java,setData,length,int,0,NotPositiveException,$ < 0
AbstractUnivariateStatistic.java,setData,length,int,0,NumberIsTooLargeException,begin + $ > values.length
AbstractUnivariateStatistic.java,setData,begin,int,0,NumberIsTooLargeException,$ + length > values.length
AbstractUnivariateStatistic.java,test,values,double[],0,NullArgumentException,$ == null
AbstractUnivariateStatistic.java,test,begin,int,0,NotPositiveException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,NotPositiveException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,NumberIsTooLargeException,begin + $ > values.length
AbstractUnivariateStatistic.java,test,begin,int,0,NumberIsTooLargeException,$ + length > values.length
AbstractUnivariateStatistic.java,test,length,int,0,RET,$ == 0
AbstractUnivariateStatistic.java,test,weights,double[],0,NullArgumentException,$ == null
AbstractUnivariateStatistic.java,test,values,double[],0,NullArgumentException,$ == null
AbstractUnivariateStatistic.java,test,weights,double[],0,DimensionMismatchException,$.length != values.length
AbstractUnivariateStatistic.java,test,i,int,0,MathIllegalArgumentException,weights[$] < 0
AbstractUnivariateStatistic.java,test,weights,double[],0,MathIllegalArgumentException,$[i] < 0
AbstractUnivariateStatistic.java,test,i,int,0,DEF,weights[$] > 0.0
AbstractUnivariateStatistic.java,test,weights,double[],0,DEF,$[i] > 0.0
MultivariateSummaryStatistics.java,append,i,int,0,DEF,$ > 0
MultivariateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof MultivariateSummaryStatistics == false
MultivariateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof MultivariateSummaryStatistics
MultivariateSummaryStatistics.java,checkEmpty,n,long,0,MathIllegalStateException,$ > 0
MultivariateSummaryStatistics.java,checkDimension,dimension,int,0,DimensionMismatchException,$ != k
AggregateSummaryStatistics.java,aggregate,statistics,Collection<SummaryStatistics>,0,RET,$ == null
AggregateSummaryStatistics.java,aggregate,current,SummaryStatistics,0,DEF,$.getMin() < min
AggregateSummaryStatistics.java,aggregate,current,SummaryStatistics,0,DEF,$.getMax() > max
AggregateSummaryStatistics.java,aggregate,n,long,1,DEF,$ == 0
AggregateSummaryStatistics.java,aggregate,n,long,1,DEF,$ == 1
AggregateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof AggregatingSummaryStatistics == false
AggregateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof AggregatingSummaryStatistics
SummaryStatistics.java,addValue,meanImpl,StorelessUnivariateStatistic,0,DEF,$ != mean
SummaryStatistics.java,addValue,varianceImpl,StorelessUnivariateStatistic,0,DEF,$ != variance
SummaryStatistics.java,addValue,geoMeanImpl,StorelessUnivariateStatistic,0,DEF,$ != geoMean
SummaryStatistics.java,clear,meanImpl,StorelessUnivariateStatistic,0,DEF,$ != mean
SummaryStatistics.java,clear,varianceImpl,StorelessUnivariateStatistic,0,DEF,$ != variance
SummaryStatistics.java,equals,object,Object,0,RET,$ instanceof SummaryStatistics == false
SummaryStatistics.java,equals,object,null,0,RET,$ instanceof SummaryStatistics
SummaryStatistics.java,checkEmpty,n,long,0,MathIllegalStateException,$ > 0
SummaryStatistics.java,copy,source.meanImpl,null,1,DEF,$ instanceof Mean
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.geoMean == source.geoMeanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.max == source.maxImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.mean == source.meanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.min == source.minImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sum == source.sumImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.variance == source.varianceImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumLog == source.sumLogImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumsq == source.sumsqImpl
GTest.java,g,expected,double[],0,DimensionMismatchException,$.length < 2
GTest.java,g,expected,double[],0,DimensionMismatchException,$.length != observed.length
GTest.java,g,sumObserved,double,0,DEF,Math.abs(sumExpected - $) > 10E-6
GTest.java,g,sumExpected,double,0,DEF,Math.abs($ - sumObserved) > 10E-6
GTest.java,gTest,alpha,double,0,OutOfRangeException,$ <= 0
GTest.java,gTest,alpha,double,0,OutOfRangeException,$ > 0.5
GTest.java,entropy,i,int,0,DEF,k[$][j] != 0
GTest.java,entropy,j,int,0,DEF,k[i][$] != 0
GTest.java,entropy,k,long[][],0,DEF,$[i][j] != 0
GTest.java,entropy,i,int,0,DEF,k[$] != 0
GTest.java,entropy,k,long[],0,DEF,$[i] != 0
GTest.java,gDataSetsComparison,observed1,long[],0,DimensionMismatchException,$.length < 2
GTest.java,gDataSetsComparison,observed1,long[],0,DimensionMismatchException,$.length != observed2.length
GTest.java,gDataSetsComparison,i,int,1,ZeroException,observed1[$] == 0
GTest.java,gDataSetsComparison,observed1,long[],1,ZeroException,$[i] == 0
GTest.java,gDataSetsComparison,observed2,long[],1,ZeroException,$[i] == 0
GTest.java,gDataSetsComparison,i,int,1,ZeroException,observed2[$] == 0
GTest.java,gDataSetsComparison,countSum1,long,0,ZeroException,$ == 0
GTest.java,gDataSetsComparison,countSum2,long,0,ZeroException,$ == 0
GTest.java,gTestDataSetsComparison,alpha,double,0,OutOfRangeException,$ <= 0
GTest.java,gTestDataSetsComparison,alpha,double,0,OutOfRangeException,$ > 0.5
MannWhitneyUTest.java,ensureDataConformance,x,double[],0,NullArgumentException,$ == null
MannWhitneyUTest.java,ensureDataConformance,y,double[],0,NullArgumentException,$ == null
MannWhitneyUTest.java,ensureDataConformance,x,double[],0,NoDataException,$.length == 0
MannWhitneyUTest.java,ensureDataConformance,y,double[],0,NoDataException,$.length == 0
ChiSquareTest.java,chiSquare,expected,double[],0,DimensionMismatchException,$.length < 2
ChiSquareTest.java,chiSquare,expected,double[],0,DimensionMismatchException,$.length != observed.length
ChiSquareTest.java,chiSquare,sumObserved,double,0,DEF,FastMath.abs(sumExpected - $) > 10E-6
ChiSquareTest.java,chiSquare,sumExpected,double,0,DEF,FastMath.abs($ - sumObserved) > 10E-6
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ <= 0
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ > 0.5
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ <= 0
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ > 0.5
ChiSquareTest.java,chiSquareDataSetsComparison,observed1,long[],0,DimensionMismatchException,$.length < 2
ChiSquareTest.java,chiSquareDataSetsComparison,observed1,long[],0,DimensionMismatchException,$.length != observed2.length
ChiSquareTest.java,chiSquareDataSetsComparison,countSum1,long,0,ZeroException,$ == 0
ChiSquareTest.java,chiSquareDataSetsComparison,countSum2,long,0,ZeroException,$ == 0
ChiSquareTest.java,chiSquareDataSetsComparison,i,int,1,ZeroException,observed1[$] == 0
ChiSquareTest.java,chiSquareDataSetsComparison,observed1,long[],1,ZeroException,$[i] == 0
ChiSquareTest.java,chiSquareDataSetsComparison,observed2,long[],1,ZeroException,$[i] == 0
ChiSquareTest.java,chiSquareDataSetsComparison,i,int,1,ZeroException,observed2[$] == 0
ChiSquareTest.java,chiSquareTestDataSetsComparison,alpha,double,0,OutOfRangeException,$ <= 0
ChiSquareTest.java,chiSquareTestDataSetsComparison,alpha,double,0,OutOfRangeException,$ > 0.5
ChiSquareTest.java,checkArray,in,long[][],0,DimensionMismatchException,$.length < 2
ChiSquareTest.java,checkArray,in,long[][],0,DimensionMismatchException,$[0].length < 2
TTest.java,checkSignificanceLevel,alpha,double,0,OutOfRangeException,$ <= 0
TTest.java,checkSignificanceLevel,alpha,double,0,OutOfRangeException,$ > 0.5
TTest.java,checkSampleData,data,double[],0,NullArgumentException,$ == null
TTest.java,checkSampleData,data,double[],0,NumberIsTooSmallException,$.length < 2
TTest.java,checkSampleData,stat,StatisticalSummary,0,NullArgumentException,$ == null
TTest.java,checkSampleData,stat,StatisticalSummary,0,NumberIsTooSmallException,$.getN() < 2
OneWayAnova.java,anovaTest,alpha,double,0,OutOfRangeException,$ <= 0
OneWayAnova.java,anovaTest,alpha,double,0,OutOfRangeException,$ > 0.5
OneWayAnova.java,anovaStats,categoryData,Collection<SummaryStatistics>,0,DimensionMismatchException,$.size() < 2
OneWayAnova.java,anovaStats,array,SummaryStatistics,0,DimensionMismatchException,$.getN() <= 1
WilcoxonSignedRankTest.java,ensureDataConformance,x,double[],0,NullArgumentException,$ == null
WilcoxonSignedRankTest.java,ensureDataConformance,y,double[],0,NullArgumentException,$ == null
WilcoxonSignedRankTest.java,ensureDataConformance,x,double[],0,NoDataException,$.length == 0
WilcoxonSignedRankTest.java,ensureDataConformance,y,double[],0,NoDataException,$.length == 0
WilcoxonSignedRankTest.java,ensureDataConformance,y,double[],0,DimensionMismatchException,$.length != x.length
WilcoxonSignedRankTest.java,calculateAbsoluteDifferences,z,double[],0,NullArgumentException,$ == null
WilcoxonSignedRankTest.java,calculateAbsoluteDifferences,z,double[],0,NoDataException,$.length == 0
WilcoxonSignedRankTest.java,wilcoxonSignedRank,i,int,0,DEF,z[$] > 0
WilcoxonSignedRankTest.java,wilcoxonSignedRank,z,double[],0,DEF,$[i] > 0
WilcoxonSignedRankTest.java,calculateExactPValue,i,int,0,DEF,(($ >> j) & 1) == 1
WilcoxonSignedRankTest.java,calculateExactPValue,j,int,0,DEF,((i >> $) & 1) == 1
WilcoxonSignedRankTest.java,calculateExactPValue,rankSum,int,0,DEF,$ >= Wmax
WilcoxonSignedRankTest.java,wilcoxonSignedRankTest,N,int,0,NumberIsTooLargeException,$ > 30
NaturalRanking.java,rank,nanPositions,List<Integer>,0,NotANumberException,$.size() > 0
NaturalRanking.java,rank,ranks,IntDoublePair[],1,DEF,Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
NaturalRanking.java,rank,i,int,1,DEF,Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
NaturalRanking.java,rank,tiesTrace,List<Integer>,0,DEF,$.size() > 1
NaturalRanking.java,rank,tiesTrace,List<Integer>,0,DEF,$.size() > 1
NaturalRanking.java,rank,nanStrategy,NaNStrategy,0,DEF,$ == NaNStrategy.FIXED
NaturalRanking.java,restoreNaNs,nanPositions,List<Integer>,0,RET,$.size() == 0
StatUtils.java,sumDifference,n,int,0,DimensionMismatchException,$ != sample2.length
StatUtils.java,sumDifference,n,int,0,NoDataException,$ <= 0
StatUtils.java,varianceDifference,n,int,0,DimensionMismatchException,$ != sample2.length
StatUtils.java,varianceDifference,n,int,0,NumberIsTooSmallException,$ < 2
KMeansPlusPlusClusterer.java,cluster,varianceSum,double,0,DEF,$ <= bestVarianceSum
KMeansPlusPlusClusterer.java,cluster,points,Collection<T>,0,NumberIsTooSmallException,$.size() < k
KMeansPlusPlusClusterer.java,cluster,changes,int,0,RET,$ == 0
KMeansPlusPlusClusterer.java,chooseInitialCenters,i,int,0,DEF,$ != firstPointIndex
KMeansPlusPlusClusterer.java,chooseInitialCenters,sum,double,0,DEF,$ >= r
KMeansPlusPlusClusterer.java,chooseInitialCenters,nextPointIndex,int,0,DEF,$ == -1
KMeansPlusPlusClusterer.java,chooseInitialCenters,nextPointIndex,int,1,DEF,$ >= 0
KMeansPlusPlusClusterer.java,chooseInitialCenters,resultSet,List<Cluster<T>>,0,DEF,$.size() < k
KMeansPlusPlusClusterer.java,getPointFromLargestVarianceCluster,variance,double,0,DEF,$ > maxVariance
KMeansPlusPlusClusterer.java,getPointFromLargestVarianceCluster,selected,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getPointFromLargestNumberCluster,number,int,0,DEF,$ > maxNumber
KMeansPlusPlusClusterer.java,getPointFromLargestNumberCluster,selected,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getFarthestPoint,distance,double,0,DEF,$ > maxDistance
KMeansPlusPlusClusterer.java,getFarthestPoint,selectedCluster,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getNearestCluster,distance,double,0,DEF,$ < minDistance
EuclideanIntegerPoint.java,equals,other,null,0,RET,$ instanceof EuclideanIntegerPoint
DBSCANClusterer.java,DBSCANClusterer,eps,double,0,NotPositiveException,$ < 0.0d
DBSCANClusterer.java,DBSCANClusterer,minPts,int,0,NotPositiveException,$ < 0
DBSCANClusterer.java,cluster,visited,Map<Clusterable<T>,PointStatus>,0,DEF,$.get(point) != null
DBSCANClusterer.java,cluster,point,T,0,DEF,visited.get($) != null
DBSCANClusterer.java,cluster,neighbors,List<T>,1,DEF,$.size() >= minPts
DBSCANClusterer.java,expandCluster,pStatus,PointStatus,0,DEF,$ == null
DBSCANClusterer.java,expandCluster,currentNeighbors,List<T>,0,DEF,$.size() >= minPts
DBSCANClusterer.java,expandCluster,pStatus,PointStatus,0,DEF,$ != PointStatus.PART_OF_CLUSTER
DBSCANClusterer.java,getNeighbors,point,T,0,DEF,$ != neighbor
DBSCANClusterer.java,getNeighbors,neighbor,T,0,DEF,$.distanceFrom(point) <= eps
DBSCANClusterer.java,getNeighbors,point,T,0,DEF,neighbor.distanceFrom($) <= eps
EuclideanDoublePoint.java,equals,other,null,0,RET,$ instanceof EuclideanDoublePoint
PearsonsCorrelation.java,PearsonsCorrelation,covarianceMatrix,RealMatrix,0,NullArgumentException,$ == null
PearsonsCorrelation.java,getCorrelationPValues,i,int,1,DEF,$ == j
PearsonsCorrelation.java,correlation,xArray,double[],1,DimensionMismatchException,$.length != yArray.length
PearsonsCorrelation.java,correlation,xArray,double[],1,MathIllegalArgumentException,$.length < 2
PearsonsCorrelation.java,checkSufficientData,nRows,int,0,MathIllegalArgumentException,$ < 2
PearsonsCorrelation.java,checkSufficientData,nCols,int,0,MathIllegalArgumentException,$ < 2
StorelessBivariateCovariance.java,getResult,n,double,0,NumberIsTooSmallException,$ < 2
SpearmansCorrelation.java,correlation,xArray,double[],1,DimensionMismatchException,$.length != yArray.length
SpearmansCorrelation.java,correlation,xArray,double[],1,MathIllegalArgumentException,$.length < 2
SpearmansCorrelation.java,correlation,rankingAlgorithm,null,0,DEF,$ instanceof NaturalRanking
SpearmansCorrelation.java,rankTransform,rankingAlgorithm,null,0,DEF,$ instanceof NaturalRanking
SpearmansCorrelation.java,rankTransform,rankingAlgorithm,RankingAlgorithm,0,DEF,((NaturalRanking) $).getNanStrategy() == NaNStrategy.REMOVED
SpearmansCorrelation.java,rankTransform,transformed,RealMatrix,0,DEF,$ == null
Covariance.java,covariance,length,int,1,MathIllegalArgumentException,$ != yArray.length
Covariance.java,covariance,length,int,1,MathIllegalArgumentException,$ < 2
Covariance.java,checkSufficientData,nRows,int,0,MathIllegalArgumentException,$ < 2
Covariance.java,checkSufficientData,nCols,int,0,MathIllegalArgumentException,$ < 1
StorelessCovariance.java,increment,length,int,0,DimensionMismatchException,$ != dimension
StorelessCovariance.java,append,sc,StorelessCovariance,0,DimensionMismatchException,$.dimension != dimension
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ == j
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ < p
MillerUpdatingRegression.java,MillerUpdatingRegression,numberOfVariables,int,0,ModelSpecificationException,$ < 1
MillerUpdatingRegression.java,MillerUpdatingRegression,errorTolerance,double,1,DEF,$ > 0
MillerUpdatingRegression.java,addObservation,x,double[],0,ModelSpecificationException,$.length != nvars
MillerUpdatingRegression.java,addObservation,x,double[],0,ModelSpecificationException,$.length + 1 != nvars
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$ == null
MillerUpdatingRegression.java,addObservations,y,double[],0,ModelSpecificationException,$ == null
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$.length != y.length
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$.length == 0
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$[0].length + 1 > x.length
MillerUpdatingRegression.java,include,w,double,0,RET,$ == 0.0
MillerUpdatingRegression.java,include,xi,double,0,DEF,$ == 0.0
MillerUpdatingRegression.java,include,di,double,1,DEF,$ != 0.0
MillerUpdatingRegression.java,include,tmp,double,0,DEF,FastMath.abs($) > Precision.EPSILON
MillerUpdatingRegression.java,include,di,double,1,DEF,$ != 0.0
MillerUpdatingRegression.java,include,di,double,1,DEF,$ != 0.0
MillerUpdatingRegression.java,smartAdd,_a,double,1,RET,$ > _b
MillerUpdatingRegression.java,smartAdd,_b,double,0,RET,$ > eps
MillerUpdatingRegression.java,smartAdd,_a,double,0,RET,$ > eps
MillerUpdatingRegression.java,regcf,nreq,int,0,ModelSpecificationException,$ < 1
MillerUpdatingRegression.java,singcheck,r,double[],0,DEF,Math.abs($[pos]) * work_sing[row] < temp
MillerUpdatingRegression.java,singcheck,work_sing,double[],0,DEF,Math.abs(r[pos]) * $[row] < temp
MillerUpdatingRegression.java,singcheck,pos,int,0,DEF,Math.abs(r[$]) * work_sing[row] < temp
MillerUpdatingRegression.java,singcheck,row,int,0,DEF,Math.abs(r[pos]) * work_sing[$] < temp
MillerUpdatingRegression.java,singcheck,col,int,0,DEF,work_sing[$] < temp
MillerUpdatingRegression.java,singcheck,work_sing,double[],0,DEF,$[col] < temp
MillerUpdatingRegression.java,cov,row,int,1,DEF,$ == col
MillerUpdatingRegression.java,getPartialCorrelations,in,int,0,RET,$ < -1
MillerUpdatingRegression.java,getPartialCorrelations,in,int,0,RET,$ >= nvars
MillerUpdatingRegression.java,getPartialCorrelations,d,double[],0,DEF,$[in] > 0.0
MillerUpdatingRegression.java,getPartialCorrelations,in,int,0,DEF,d[$] > 0.0
MillerUpdatingRegression.java,getPartialCorrelations,sumxx,double,1,DEF,$ > 0.0
MillerUpdatingRegression.java,getPartialCorrelations,sumyy,double,0,DEF,$ > 0.0
MillerUpdatingRegression.java,vmove,from,int,0,RET,$ == to
MillerUpdatingRegression.java,vmove,from,int,1,DEF,$ < to
MillerUpdatingRegression.java,vmove,m,int,0,DEF,$ > 0
MillerUpdatingRegression.java,reorderRegressors,list,int[],0,RET,$.length < 1
MillerUpdatingRegression.java,reorderRegressors,i,int,0,RET,$ > next
MillerUpdatingRegression.java,getDiagonalOfHatMatrix,row_data,double[],0,RET,$.length > nvars
MillerUpdatingRegression.java,regress,i,int,0,DEF,this.vorder[$] != i
MillerUpdatingRegression.java,regress,j,int,0,DEF,this.vorder[$] == i
MillerUpdatingRegression.java,regress,_i,int,1,DEF,$ > _j
MillerUpdatingRegression.java,regress,i,int,0,DEF,$ > 0
MillerUpdatingRegression.java,regress,iExclude,int,1,DEF,$ > 0
MillerUpdatingRegression.java,regress,variablesToInclude,int[],0,DEF,$[i] > -1
MillerUpdatingRegression.java,regress,i,int,0,DEF,variablesToInclude[$] > -1
MillerUpdatingRegression.java,regress,_i,int,1,DEF,$ > _j
AbstractMultipleLinearRegression.java,newSampleData,data,double[],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,newSampleData,nobs,int,0,NumberIsTooSmallException,$ <= nvars
AbstractMultipleLinearRegression.java,newYSampleData,y,double[],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,newYSampleData,y,double[],0,NoDataException,$.length == 0
AbstractMultipleLinearRegression.java,newXSampleData,x,double[][],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,newXSampleData,x,double[][],0,NoDataException,$.length == 0
AbstractMultipleLinearRegression.java,newXSampleData,x,double[][],0,DimensionMismatchException,$[i].length != nVars
AbstractMultipleLinearRegression.java,newXSampleData,i,int,0,DimensionMismatchException,x[$].length != nVars
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,y,double[],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,DimensionMismatchException,$.length != y.length
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,NoDataException,$.length == 0
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,MathIllegalArgumentException,$[0].length + 1 > x.length
AbstractMultipleLinearRegression.java,validateCovarianceData,x,double[][],0,DimensionMismatchException,$.length != covariance.length
AbstractMultipleLinearRegression.java,validateCovarianceData,covariance,double[][],0,NonSquareMatrixException,$.length > 0
SimpleRegression.java,addData,n,long,1,DEF,$ == 0
SimpleRegression.java,append,n,long,1,DEF,$ == 0
SimpleRegression.java,removeData,n,long,0,DEF,$ > 0
SimpleRegression.java,addData,data,double[][],0,ModelSpecificationException,$[i].length < 2
SimpleRegression.java,addData,i,int,0,ModelSpecificationException,data[$].length < 2
SimpleRegression.java,addObservation,x,double[],0,ModelSpecificationException,$ == null
SimpleRegression.java,addObservation,x,double[],0,ModelSpecificationException,$.length == 0
SimpleRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$ == null
SimpleRegression.java,addObservations,y,double[],0,ModelSpecificationException,$ == null
SimpleRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$.length != y.length
SimpleRegression.java,addObservations,x,double[][],0,DEF,$[i] == null
SimpleRegression.java,addObservations,i,int,0,DEF,x[$] == null
SimpleRegression.java,addObservations,x,double[][],0,DEF,$[i].length == 0
SimpleRegression.java,addObservations,i,int,0,DEF,x[$].length == 0
SimpleRegression.java,getSlope,n,long,0,RET,$ < 2
SimpleRegression.java,getTotalSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getXSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getMeanSquareError,n,long,0,RET,$ < 3
SimpleRegression.java,getR,b1,double,0,DEF,$ < 0
SimpleRegression.java,getSlopeConfidenceInterval,n,long,0,RET,$ < 3
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,OutOfRangeException,$ >= 1
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,OutOfRangeException,$ <= 0
SimpleRegression.java,getSignificance,n,long,0,RET,$ < 3
SimpleRegression.java,regress,n,long,0,NoDataException,$ < 3
SimpleRegression.java,regress,sumXX,double,1,RET,FastMath.abs( $ ) > Precision.SAFE_MIN
SimpleRegression.java,regress,n,long,0,NoDataException,$ < 2
SimpleRegression.java,regress,variablesToInclude,int[],0,MathIllegalArgumentException,$ == null
SimpleRegression.java,regress,variablesToInclude,int[],0,MathIllegalArgumentException,$.length == 0
SimpleRegression.java,regress,variablesToInclude,int[],0,ModelSpecificationException,$.length > 2
SimpleRegression.java,regress,variablesToInclude,int[],0,ModelSpecificationException,$.length > 1
SimpleRegression.java,regress,variablesToInclude,int[],1,OutOfRangeException:RET,$.length == 2
SimpleRegression.java,regress,variablesToInclude,int[],1,ModelSpecificationException,$[0] == 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 0
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[1] != 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 0
SimpleRegression.java,regress,variablesToInclude,int[],1,RET,$[0] == 0
SimpleRegression.java,regress,variablesToInclude,int[],0,RET,$[0] == 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 0
GLSMultipleLinearRegression.java,getOmegaInverse,OmegaInverse,RealMatrix,0,DEF,$ == null
RegressionResults.java,RegressionResults,rank,int,0,DEF,$ > 0
RegressionResults.java,getParameterEstimate,parameters,double[],0,RET,$ == null
RegressionResults.java,getParameterEstimate,index,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getStdErrorOfEstimate,parameters,double[],0,RET,$ == null
RegressionResults.java,getStdErrorOfEstimate,index,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getStdErrorOfEstimate,var,double,0,RET,$ > Double.MIN_VALUE
RegressionResults.java,getStdErrorOfEstimates,parameters,double[],0,RET,$ == null
RegressionResults.java,getStdErrorOfEstimates,var,double,0,DEF,$ > Double.MIN_VALUE
RegressionResults.java,getCovarianceOfParameters,parameters,double[],0,RET,$ == null
RegressionResults.java,getCovarianceOfParameters,i,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getCovarianceOfParameters,j,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getVcvElement,i,int,1,RET,$ == j
RegressionResults.java,getVcvElement,i,int,1,RET,$ > j
Frequency.java,incrementValue,v,null,0,DEF,$ instanceof Integer
Frequency.java,incrementValue,count,Long,1,DEF,$ == null
Frequency.java,getCount,v,null,0,RET,$ instanceof Integer
Frequency.java,getCount,count,Long,0,DEF,$ != null
Frequency.java,getPct,sumFreq,long,0,RET,$ == 0
Frequency.java,getCumFreq,v,null,0,RET,$ instanceof Integer
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,DEF,$ == null
Frequency.java,getCumFreq,value,Long,0,DEF,$ != null
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,RET,$.compare(v, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,v,Comparable<>,0,RET,c.compare($, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,freqTable,TreeMap<Comparable<?>,Long>,0,RET,c.compare(v, $.firstKey()) < 0
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,RET,$.compare(v, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,v,Comparable<>,0,RET,c.compare($, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,freqTable,TreeMap<Comparable<?>,Long>,0,RET,c.compare(v, $.lastKey()) >= 0
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,1,DEF,$.compare(v, nextValue) > 0
Frequency.java,getCumFreq,v,Comparable<>,1,DEF,c.compare($, nextValue) > 0
Frequency.java,getCumFreq,nextValue,Comparable<>,1,DEF,c.compare(v, $) > 0
Frequency.java,getCumPct,sumFreq,long,0,RET,$ == 0
Frequency.java,equals,obj,null,0,RET,$ instanceof Frequency
Frequency.java,equals,freqTable,TreeMap<Comparable<?>,Long>,1,RET,$ == null
Frequency.java,equals,other,Frequency,0,RET,$.freqTable != null
KalmanFilter.java,KalmanFilter,processModel,ProcessModel,1,DEF,$.getControlMatrix() == null
KalmanFilter.java,KalmanFilter,processModel,ProcessModel,1,DEF,$.getInitialStateEstimate() == null
KalmanFilter.java,KalmanFilter,processModel,ProcessModel,1,DEF,$.getInitialErrorCovariance() == null
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$ != null
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() > 0
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() > 0
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
KalmanFilter.java,KalmanFilter,measNoise,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
KalmanFilter.java,predict,u,RealVector,0,DimensionMismatchException,$ != null
KalmanFilter.java,predict,u,RealVector,0,DEF,$ != null
TriangularDistribution.java,TriangularDistribution,a,double,0,NumberIsTooLargeException,$ >= b
TriangularDistribution.java,TriangularDistribution,c,double,0,NumberIsTooSmallException,$ < a
TriangularDistribution.java,TriangularDistribution,c,double,0,NumberIsTooLargeException,$ > b
TriangularDistribution.java,density,x,double,0,RET,$ < a
TriangularDistribution.java,density,a,double,0,RET,$ <= x
TriangularDistribution.java,density,x,double,0,RET,$ < c
TriangularDistribution.java,density,x,double,0,RET,$ == c
TriangularDistribution.java,density,c,double,0,RET,$ < x
TriangularDistribution.java,density,x,double,0,RET,$ <= b
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ < a
TriangularDistribution.java,cumulativeProbability,a,double,0,RET,$ <= x
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ < c
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ == c
TriangularDistribution.java,cumulativeProbability,c,double,0,RET,$ < x
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ <= b
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
EnumeratedDistribution.java,EnumeratedDistribution,p,double,0,NotPositiveException,$ < 0
EnumeratedDistribution.java,probability,x,T,0,DEF,$ == null
EnumeratedDistribution.java,probability,i,int,0,DEF,singletons.get($) == null
EnumeratedDistribution.java,probability,singletons,List<T>,0,DEF,$.get(i) == null
EnumeratedDistribution.java,probability,x,T,0,DEF,$ != null
EnumeratedDistribution.java,sample,randomValue,double,0,RET,$ < sum
EnumeratedDistribution.java,sample,sampleSize,int,0,NotStrictlyPositiveException,$ <= 0
EnumeratedDistribution.java,sample,sampleSize,int,0,NotStrictlyPositiveException,$ <= 0
EnumeratedDistribution.java,sample,array,T[],0,NullArgumentException,$ == null
EnumeratedDistribution.java,sample,array,T[],1,DEF,$.length < sampleSize
ZipfDistribution.java,ZipfDistribution,numberOfElements,int,0,NotStrictlyPositiveException,$ <= 0
ZipfDistribution.java,ZipfDistribution,exponent,double,0,NotStrictlyPositiveException,$ <= 0
ZipfDistribution.java,probability,x,int,0,RET,$ <= 0
ZipfDistribution.java,probability,x,int,0,RET,$ > numberOfElements
ZipfDistribution.java,cumulativeProbability,x,int,1,RET,$ <= 0
ZipfDistribution.java,cumulativeProbability,x,int,0,RET,$ >= numberOfElements
GeometricDistribution.java,GeometricDistribution,p,double,0,OutOfRangeException,$ <= 0
GeometricDistribution.java,GeometricDistribution,p,double,0,OutOfRangeException,$ > 1
GeometricDistribution.java,probability,x,int,1,DEF,$ < 0
GeometricDistribution.java,cumulativeProbability,x,int,1,DEF,$ < 0
HypergeometricDistribution.java,HypergeometricDistribution,populationSize,int,0,NotStrictlyPositiveException,$ <= 0
HypergeometricDistribution.java,HypergeometricDistribution,numberOfSuccesses,int,0,NotPositiveException,$ < 0
HypergeometricDistribution.java,HypergeometricDistribution,sampleSize,int,0,NotPositiveException,$ < 0
HypergeometricDistribution.java,HypergeometricDistribution,numberOfSuccesses,int,0,NumberIsTooLargeException,$ > populationSize
HypergeometricDistribution.java,HypergeometricDistribution,sampleSize,int,0,NumberIsTooLargeException,$ > populationSize
MultivariateNormalDistribution.java,MultivariateNormalDistribution,covariances,double[][],0,DimensionMismatchException,$.length != dim
MultivariateNormalDistribution.java,MultivariateNormalDistribution,i,int,0,NonPositiveDefiniteMatrixException,covMatEigenvalues[$] < 0
MultivariateNormalDistribution.java,MultivariateNormalDistribution,covMatEigenvalues,double[],0,NonPositiveDefiniteMatrixException,$[i] < 0
MultivariateNormalDistribution.java,density,vals,double[],0,DimensionMismatchException,$.length != dim
WeibullDistribution.java,WeibullDistribution,alpha,double,0,NotStrictlyPositiveException,$ <= 0
WeibullDistribution.java,WeibullDistribution,beta,double,0,NotStrictlyPositiveException,$ <= 0
WeibullDistribution.java,density,x,double,0,RET,$ < 0
WeibullDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ < 0.0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ > 1.0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
EnumeratedIntegerDistribution.java,EnumeratedIntegerDistribution,singletons,int[],0,DimensionMismatchException,$.length != probabilities.length
EnumeratedIntegerDistribution.java,cumulativeProbability,sample,Pair<Integer,Double>,0,DEF,$.getKey() <= x
EnumeratedIntegerDistribution.java,getSupportLowerBound,sample,Pair<Integer,Double>,0,DEF,$.getKey() < min
EnumeratedIntegerDistribution.java,getSupportLowerBound,sample,Pair<Integer,Double>,0,DEF,$.getValue() > 0
EnumeratedIntegerDistribution.java,getSupportUpperBound,sample,Pair<Integer,Double>,0,DEF,$.getKey() > max
EnumeratedIntegerDistribution.java,getSupportUpperBound,sample,Pair<Integer,Double>,0,DEF,$.getValue() > 0
NormalDistribution.java,NormalDistribution,sd,double,0,NotStrictlyPositiveException,$ <= 0
NormalDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0.0
NormalDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1.0
NormalDistribution.java,probability,x0,double,0,NumberIsTooLargeException,$ > x1
CauchyDistribution.java,CauchyDistribution,scale,double,0,NotStrictlyPositiveException,$ <= 0
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ < 0
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ > 1
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
TDistribution.java,TDistribution,degreesOfFreedom,double,0,NotStrictlyPositiveException,$ <= 0
TDistribution.java,cumulativeProbability,x,double,1,DEF,$ == 0
TDistribution.java,cumulativeProbability,x,double,1,DEF,$ < 0.0
TDistribution.java,getNumericalMean,df,double,0,RET,$ > 1
TDistribution.java,getNumericalVariance,df,double,0,RET,$ > 2
TDistribution.java,getNumericalVariance,df,double,0,RET,$ > 1
TDistribution.java,getNumericalVariance,df,double,0,RET,$ <= 2
LogNormalDistribution.java,LogNormalDistribution,shape,double,0,NotStrictlyPositiveException,$ <= 0
LogNormalDistribution.java,density,x,double,0,RET,$ <= 0
LogNormalDistribution.java,cumulativeProbability,x,double,0,RET,$ <= 0
LogNormalDistribution.java,probability,x0,double,0,NumberIsTooLargeException,$ > x1
LogNormalDistribution.java,probability,x0,double,0,RET,$ <= 0
LogNormalDistribution.java,probability,x1,double,0,RET,$ <= 0
PoissonDistribution.java,PoissonDistribution,p,double,0,NotStrictlyPositiveException,$ <= 0
PoissonDistribution.java,probability,x,int,1,DEF,$ < 0
PoissonDistribution.java,probability,x,int,1,DEF,$ == Integer.MAX_VALUE
PoissonDistribution.java,probability,x,int,1,DEF,$ == 0
PoissonDistribution.java,cumulativeProbability,x,int,0,RET,$ < 0
PoissonDistribution.java,cumulativeProbability,x,int,0,RET,$ == Integer.MAX_VALUE
PoissonDistribution.java,nextPoisson,meanPoisson,double,1,RET,$ < pivot
PoissonDistribution.java,nextPoisson,r,double,1,DEF,$ >= p
PoissonDistribution.java,nextPoisson,u,double,1,DEF,$ <= p1
PoissonDistribution.java,nextPoisson,x,double,0,DEF,$ > delta
PoissonDistribution.java,nextPoisson,x,double,0,DEF,$ < -lambda
PoissonDistribution.java,nextPoisson,v,double,0,DEF,$ < -t
PoissonDistribution.java,nextPoisson,a,int,0,DEF,$ == 0
PoissonDistribution.java,nextPoisson,v,double,0,DEF,$ < qa
PoissonDistribution.java,nextPoisson,v,double,0,DEF,$ > qr
BetaDistribution.java,density,x,double,1,RET,$ < 0
BetaDistribution.java,density,x,double,1,RET,$ > 1
BetaDistribution.java,density,x,double,1,NumberIsTooSmallException:RET,$ == 0
BetaDistribution.java,density,alpha,double,0,NumberIsTooSmallException,$ < 1
BetaDistribution.java,density,x,double,1,NumberIsTooSmallException:RET,$ == 1
BetaDistribution.java,density,beta,double,0,NumberIsTooSmallException,$ < 1
BetaDistribution.java,cumulativeProbability,x,double,1,RET,$ <= 0
BetaDistribution.java,cumulativeProbability,x,double,1,RET,$ >= 1
MultivariateNormalMixtureExpectationMaximization.java,MultivariateNormalMixtureExpectationMaximization,data,double[][],0,NotStrictlyPositiveException,$.length < 1
MultivariateNormalMixtureExpectationMaximization.java,MultivariateNormalMixtureExpectationMaximization,data,double[][],0,NumberIsTooSmallException,$[i].length < 2
MultivariateNormalMixtureExpectationMaximization.java,MultivariateNormalMixtureExpectationMaximization,i,int,0,NumberIsTooSmallException,data[$].length < 2
MultivariateNormalMixtureExpectationMaximization.java,fit,maxIterations,int,0,NotStrictlyPositiveException,$ < 1
MultivariateNormalMixtureExpectationMaximization.java,fit,threshold,double,0,NotStrictlyPositiveException,$ < Double.MIN_VALUE
MultivariateNormalMixtureExpectationMaximization.java,fit,numMeanColumns,int,0,DimensionMismatchException,$ != numCols
MultivariateNormalMixtureExpectationMaximization.java,fit,previousLogLikelihood,double,0,ConvergenceException,Math.abs($ - logLikelihood) > threshold
MultivariateNormalMixtureExpectationMaximization.java,fit,logLikelihood,double,0,ConvergenceException,Math.abs(previousLogLikelihood - $) > threshold
MultivariateNormalMixtureExpectationMaximization.java,estimate,data,double[][],0,NotStrictlyPositiveException,$.length < 2
MultivariateNormalMixtureExpectationMaximization.java,estimate,numComponents,int,0,NumberIsTooSmallException,$ < 2
MultivariateNormalMixtureExpectationMaximization.java,estimate,numComponents,int,0,NumberIsTooLargeException,$ > data.length
MultivariateNormalMixtureExpectationMaximization.java,equals,other,null,0,RET,$ instanceof DataRow
UniformIntegerDistribution.java,UniformIntegerDistribution,lower,int,0,NumberIsTooLargeException,$ >= upper
UniformIntegerDistribution.java,probability,x,int,0,RET,$ < lower
UniformIntegerDistribution.java,probability,x,int,0,RET,$ > upper
UniformIntegerDistribution.java,cumulativeProbability,x,int,0,RET,$ < lower
UniformIntegerDistribution.java,cumulativeProbability,x,int,0,RET,$ > upper
KolmogorovSmirnovDistribution.java,KolmogorovSmirnovDistribution,n,int,0,NotStrictlyPositiveException,$ <= 0
KolmogorovSmirnovDistribution.java,cdf,d,double,1,RET,$ <= ninvhalf
KolmogorovSmirnovDistribution.java,cdf,ninvhalf,double,1,RET,$ < d
KolmogorovSmirnovDistribution.java,cdf,d,double,1,RET,$ <= ninv
KolmogorovSmirnovDistribution.java,cdf,ninv,double,1,RET,1 - $ <= d
KolmogorovSmirnovDistribution.java,cdf,d,double,1,RET,$ < 1
KolmogorovSmirnovDistribution.java,createH,hDouble,double,0,NumberIsTooLargeException,$ >= 1
KolmogorovSmirnovDistribution.java,createH,i,int,1,DEF,$ - j + 1 < 0
KolmogorovSmirnovDistribution.java,createH,j,int,1,DEF,i - $ + 1 < 0
KolmogorovSmirnovDistribution.java,createH,h,BigFraction,0,DEF,$.compareTo(BigFraction.ONE_HALF) == 1
KolmogorovSmirnovDistribution.java,createH,i,int,0,DEF,$ - j + 1 > 0
KolmogorovSmirnovDistribution.java,createH,j,int,0,DEF,i - $ + 1 > 0
AbstractMultivariateRealDistribution.java,sample,sampleSize,int,0,NotStrictlyPositiveException,$ <= 0
AbstractRealDistribution.java,probability,x0,double,0,NumberIsTooLargeException,$ > x1
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0.0
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1.0
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 0.0
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 1.0
AbstractRealDistribution.java,inverseCumulativeProbability,lowerBound,double,0,DEF,$ == Double.NEGATIVE_INFINITY
AbstractRealDistribution.java,inverseCumulativeProbability,upperBound,double,0,DEF,$ == Double.POSITIVE_INFINITY
AbstractRealDistribution.java,inverseCumulativeProbability,dx,double,0,RET,cumulativeProbability(x - $) == px
AbstractRealDistribution.java,inverseCumulativeProbability,x,double,0,RET,cumulativeProbability($ - dx) == px
AbstractRealDistribution.java,inverseCumulativeProbability,midPoint,double,1,DEF,cumulativeProbability($) < px
AbstractRealDistribution.java,sample,sampleSize,int,0,NotStrictlyPositiveException,$ <= 0
GammaDistribution.java,GammaDistribution,shape,double,0,NotStrictlyPositiveException,$ <= 0
GammaDistribution.java,GammaDistribution,scale,double,0,NotStrictlyPositiveException,$ <= 0
GammaDistribution.java,density,x,double,0,RET,$ < 0
GammaDistribution.java,density,y,double,0,RET,$ <= minY
GammaDistribution.java,density,y,double,0,RET,FastMath.log($) >= maxLogY
GammaDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0
GammaDistribution.java,sample,shape,double,0,RET,$ < 1
GammaDistribution.java,sample,p,double,1,RET,$ <= 1
GammaDistribution.java,sample,v,double,0,DEF,$ <= 0
PascalDistribution.java,PascalDistribution,r,int,0,NotStrictlyPositiveException,$ <= 0
PascalDistribution.java,PascalDistribution,p,double,0,OutOfRangeException,$ < 0
PascalDistribution.java,PascalDistribution,p,double,0,OutOfRangeException,$ > 1
PascalDistribution.java,probability,x,int,1,DEF,$ < 0
PascalDistribution.java,cumulativeProbability,x,int,1,DEF,$ < 0
UniformRealDistribution.java,UniformRealDistribution,lower,double,0,NumberIsTooLargeException,$ >= upper
UniformRealDistribution.java,density,x,double,0,RET,$ < lower
UniformRealDistribution.java,density,x,double,0,RET,$ > upper
UniformRealDistribution.java,cumulativeProbability,x,double,0,RET,$ <= lower
UniformRealDistribution.java,cumulativeProbability,x,double,0,RET,$ >= upper
UniformRealDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0.0
UniformRealDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1.0
FDistribution.java,FDistribution,numeratorDegreesOfFreedom,double,0,NotStrictlyPositiveException,$ <= 0
FDistribution.java,FDistribution,denominatorDegreesOfFreedom,double,0,NotStrictlyPositiveException,$ <= 0
FDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0
FDistribution.java,getNumericalMean,denominatorDF,double,0,RET,$ > 2
FDistribution.java,calculateNumericalVariance,denominatorDF,double,0,RET,$ > 4
MixtureMultivariateRealDistribution.java,MixtureMultivariateRealDistribution,comp,Pair<Double,T>,0,DimensionMismatchException,$.getSecond().getDimension() != dim
MixtureMultivariateRealDistribution.java,MixtureMultivariateRealDistribution,comp,Pair<Double,T>,0,NotPositiveException,$.getFirst() < 0
MixtureMultivariateRealDistribution.java,sample,randomValue,double,0,DEF,$ <= sum
MixtureMultivariateRealDistribution.java,sample,vals,double[],0,DEF,$ == null
ParetoDistribution.java,ParetoDistribution,scale,double,0,NotStrictlyPositiveException,$ <= 0
ParetoDistribution.java,ParetoDistribution,shape,double,0,NotStrictlyPositiveException,$ <= 0
ParetoDistribution.java,density,x,double,0,RET,$ < scale
ParetoDistribution.java,cumulativeProbability,x,double,0,RET,$ <= scale
ParetoDistribution.java,getNumericalMean,shape,double,0,RET,$ <= 1
ParetoDistribution.java,getNumericalVariance,shape,double,0,RET,$ <= 2
EnumeratedRealDistribution.java,EnumeratedRealDistribution,singletons,double[],0,DimensionMismatchException,$.length != probabilities.length
EnumeratedRealDistribution.java,cumulativeProbability,sample,Pair<Double,Double>,0,DEF,$.getKey() <= x
EnumeratedRealDistribution.java,getSupportLowerBound,sample,Pair<Double,Double>,0,DEF,$.getKey() < min
EnumeratedRealDistribution.java,getSupportLowerBound,sample,Pair<Double,Double>,0,DEF,$.getValue() > 0
EnumeratedRealDistribution.java,getSupportUpperBound,sample,Pair<Double,Double>,0,DEF,$.getKey() > max
EnumeratedRealDistribution.java,getSupportUpperBound,sample,Pair<Double,Double>,0,DEF,$.getValue() > 0
ExponentialDistribution.java,ExponentialDistribution,mean,double,0,NotStrictlyPositiveException,$ <= 0
ExponentialDistribution.java,density,x,double,0,RET,$ < 0
ExponentialDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
ExponentialDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ < 0.0
ExponentialDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ > 1.0
ExponentialDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1.0
ExponentialDistribution.java,sample,u2,double,0,DEF,$ < umin
AbstractIntegerDistribution.java,cumulativeProbability,x1,int,0,NumberIsTooLargeException,$ < x0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 0.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,lower,int,1,RET,$ == Integer.MIN_VALUE
AbstractIntegerDistribution.java,inverseCumulativeProbability,lower,int,0,RET,checkedCumulativeProbability($) >= p
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 1.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,tmp,double,0,DEF,$ > lower
AbstractIntegerDistribution.java,inverseCumulativeProbability,tmp,double,0,DEF,$ < upper
AbstractIntegerDistribution.java,solveInverseCumulativeProbability,xm,int,0,DEF,$ < lower
AbstractIntegerDistribution.java,solveInverseCumulativeProbability,xm,int,0,DEF,$ > upper
AbstractIntegerDistribution.java,solveInverseCumulativeProbability,pm,double,1,DEF,$ >= p
AbstractIntegerDistribution.java,sample,sampleSize,int,0,NotStrictlyPositiveException,$ <= 0
BinomialDistribution.java,BinomialDistribution,trials,int,0,NotPositiveException,$ < 0
BinomialDistribution.java,BinomialDistribution,p,double,0,OutOfRangeException,$ < 0
BinomialDistribution.java,BinomialDistribution,p,double,0,OutOfRangeException,$ > 1
BinomialDistribution.java,probability,x,int,1,DEF,$ < 0
BinomialDistribution.java,probability,x,int,1,DEF,$ > numberOfTrials
BinomialDistribution.java,cumulativeProbability,x,int,1,DEF,$ < 0
BinomialDistribution.java,cumulativeProbability,x,int,1,DEF,$ >= numberOfTrials
SaddlePointExpansion.java,getStirlingError,z,double,1,DEF,$ < 15.0
SaddlePointExpansion.java,getStirlingError,z2,double,1,DEF,FastMath.floor($) == z2
SaddlePointExpansion.java,logBinomialProbability,x,int,1,DEF,$ == 0
SaddlePointExpansion.java,logBinomialProbability,p,double,1,DEF,$ < 0.1
SaddlePointExpansion.java,logBinomialProbability,x,int,1,DEF,$ == n
SaddlePointExpansion.java,logBinomialProbability,q,double,1,DEF,$ < 0.1
LevyDistribution.java,density,x,double,0,RET,$ < mu
LevyDistribution.java,cumulativeProbability,x,double,0,RET,$ < mu
LevyDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0.0
LevyDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1.0
FastFourierTransformer.java,bitReversalShuffle2,i,int,0,DEF,$ < j
FastFourierTransformer.java,normalizeTransformedData,type,TransformType,0,DEF,$ == TransformType.INVERSE
FastFourierTransformer.java,transformInPlace,dataRI,double[][],0,DimensionMismatchException,$.length != 2
FastFourierTransformer.java,transformInPlace,dataR,double[],0,DimensionMismatchException,$.length != dataI.length
FastFourierTransformer.java,transformInPlace,n,int,1,RET,$ == 1
FastFourierTransformer.java,transformInPlace,n,int,0,RET,$ == 2
FastFourierTransformer.java,transformInPlace,type,TransformType,1,DEF,$ == TransformType.INVERSE
FastFourierTransformer.java,transformInPlace,type,TransformType,0,DEF,$ == TransformType.INVERSE
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == dimensionSize.length
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == d
FastFourierTransformer.java,get,vector,int[],0,DimensionMismatchException:RET,$ == null
FastFourierTransformer.java,get,dimensionSize,int[],0,DimensionMismatchException,$.length > 0
FastFourierTransformer.java,get,vector,int[],0,DimensionMismatchException,$.length != dimensionSize.length
FastFourierTransformer.java,set,vector,int[],0,DimensionMismatchException:RET,$ == null
FastFourierTransformer.java,set,dimensionSize,int[],0,DimensionMismatchException,$.length > 0
FastFourierTransformer.java,set,vector,int[],0,DimensionMismatchException,$.length != dimensionSize.length
FastHadamardTransformer.java,transform,type,TransformType,0,RET,$ == TransformType.FORWARD
FastCosineTransformer.java,transform,type,TransformType,0,RET,$ == TransformType.FORWARD
FastCosineTransformer.java,transform,normalization,DctNormalization,0,RET,$ == DctNormalization.ORTHOGONAL_DCT_I
FastCosineTransformer.java,transform,normalization,DctNormalization,1,DEF,$ == DctNormalization.ORTHOGONAL_DCT_I
FastCosineTransformer.java,fct,n,int,0,RET,$ == 1
FastSineTransformer.java,transform,normalization,DstNormalization,0,RET,$ == DstNormalization.ORTHOGONAL_DST_I
FastSineTransformer.java,transform,type,TransformType,0,RET,$ == TransformType.FORWARD
FastSineTransformer.java,fst,f,double[],0,MathIllegalArgumentException,$[0] != 0.0
FastSineTransformer.java,fst,n,int,0,RET,$ == 1
TransformUtils.java,createComplexArray,dataRI,double[][],0,DimensionMismatchException,$.length != 2
TransformUtils.java,createComplexArray,dataR,double[],0,DimensionMismatchException,$.length != dataI.length
TransformUtils.java,exactLog2,index,int,0,MathIllegalArgumentException,$ < 0
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,source.substring($, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,endIndex,int,0,DEF,source.substring(startIndex, $).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,source,String,0,DEF,$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,sb,StringBuilder,0,DEF,source.substring(startIndex, endIndex).compareTo($.toString()) == 0
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,$ == endIndex
CompositeFormat.java,parseNumber,number,Number,0,DEF,$ != null
CompositeFormat.java,parseFixedstring,startIndex,int,0,RET,source.substring($, endIndex).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,endIndex,int,0,RET,source.substring(startIndex, $).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,expected,String,0,RET,source.substring(startIndex, endIndex).compareTo($) != 0
CompositeFormat.java,parseFixedstring,source,String,0,RET,$.substring(startIndex, endIndex).compareTo(expected) != 0
BigReal.java,equals,other,null,0,RET,$ instanceof BigReal
ResizableDoubleArray.java,ResizableDoubleArray,initialCapacity,int,0,NotStrictlyPositiveException,$ <= 0
ResizableDoubleArray.java,ResizableDoubleArray,data,double[],0,DEF,$ != null
ResizableDoubleArray.java,addElementRolling,startIndex,int,0,DEF,($ + (numElements + 1)) > internalArray.length
ResizableDoubleArray.java,addElementRolling,numElements,int,0,DEF,(startIndex + ($ + 1)) > internalArray.length
ResizableDoubleArray.java,substituteMostRecentElement,numElements,int,0,MathIllegalStateException,$ < 1
ResizableDoubleArray.java,checkContractExpand,contraction,double,0,DEF,$ < expansion
ResizableDoubleArray.java,checkContractExpand,contraction,double,0,DEF,$ <= 1
ResizableDoubleArray.java,checkContractExpand,expansion,double,0,DEF,$ <= 1
ResizableDoubleArray.java,discardExtremeElements,i,int,1,MathIllegalArgumentException,$ > numElements
ResizableDoubleArray.java,discardExtremeElements,i,int,1,MathIllegalArgumentException,$ < 0
ResizableDoubleArray.java,expand,expansionMode,ExpansionMode,1,DEF,$ == ExpansionMode.MULTIPLICATIVE
ResizableDoubleArray.java,getElement,index,int,1,ArrayIndexOutOfBoundsException,$ >= numElements
ResizableDoubleArray.java,getElement,index,int,1,RET,$ >= 0
ResizableDoubleArray.java,setElement,index,int,0,ArrayIndexOutOfBoundsException,$ < 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ + 1 > numElements
ResizableDoubleArray.java,setElement,startIndex,int,0,DEF,($ + index) >= internalArray.length
ResizableDoubleArray.java,setElement,index,int,0,DEF,(startIndex + $) >= internalArray.length
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,MathIllegalArgumentException,$ != MULTIPLICATIVE_MODE
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,MathIllegalArgumentException,$ != ADDITIVE_MODE
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,1,DEF,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,DEF,$ == ADDITIVE_MODE
ResizableDoubleArray.java,setNumElements,i,int,0,MathIllegalArgumentException,$ < 0
ResizableDoubleArray.java,setNumElements,newSize,int,0,DEF,$ > internalArray.length
ResizableDoubleArray.java,shouldContract,expansionMode,ExpansionMode,1,RET,$ == ExpansionMode.MULTIPLICATIVE
ResizableDoubleArray.java,equals,object,Object,0,RET,$ instanceof ResizableDoubleArray == false
ResizableDoubleArray.java,equals,object,null,0,RET,$ instanceof ResizableDoubleArray
OpenIntToFieldHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToFieldHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToFieldHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToFieldHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToFieldHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToFieldHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToFieldHashMap.java,key,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToFieldHashMap.java,key,current,int,0,NoSuchElementException,$ < 0
OpenIntToFieldHashMap.java,value,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToFieldHashMap.java,value,current,int,0,NoSuchElementException,$ < 0
OpenIntToFieldHashMap.java,advance,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToFieldHashMap.java,advance,current,int,0,NoSuchElementException,$ < 0
FastMathCalc.java,buildSinCosTables,i,int,1,DEF,($ & 1) == 0
FastMathCalc.java,slowCos,i,int,0,DEF,($ & 1) != 0
FastMathCalc.java,slowCos,i,int,0,DEF,($ & 2) != 0
FastMathCalc.java,slowCos,result,double[],0,DEF,$ != null
FastMathCalc.java,slowSin,i,int,0,DEF,($ & 1) == 0
FastMathCalc.java,slowSin,i,int,0,DEF,($ & 2) != 0
FastMathCalc.java,slowSin,result,double[],0,DEF,$ != null
FastMathCalc.java,slowexp,result,double[],0,DEF,$ != null
FastMathCalc.java,split,d,double,1,DEF,$ < 8e298
FastMathCalc.java,split,d,double,1,DEF,$ > -8e298
FastMathCalc.java,resplit,c,double,1,DEF,$ < 8e298
FastMathCalc.java,resplit,c,double,1,DEF,$ > -8e298
FastMathCalc.java,splitReciprocal,in,double[],0,DEF,$[0] == 0.0
FastMathCalc.java,expint,p,int,0,DEF,($ & 1) != 0
FastMathCalc.java,expint,result,double[],0,DEF,$ != null
FastMathCalc.java,format,d,double,1,RET,$ != d
FastMathCalc.java,checkLen,expectedLen,int,0,DimensionMismatchException,$ != actual
Precision.java,compareTo,x,double,0,RET,$ < y
Precision.java,compareTo,x,double,0,RET,$ < y
Precision.java,equals,xInt,int,0,DEF,$ < 0
Precision.java,equals,yInt,int,0,DEF,$ < 0
Precision.java,equals,xInt,long,0,DEF,$ < 0
Precision.java,equals,yInt,long,0,DEF,$ < 0
Precision.java,roundUnscaled,sign,double,1,DEF,$ == -1
Precision.java,roundUnscaled,sign,double,1,DEF,$ == -1
Precision.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
Precision.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
Precision.java,roundUnscaled,fraction,double,1,DEF,$ < 0.5
Precision.java,roundUnscaled,fraction,double,1,DEF,$ >= 0.5
ContinuedFraction.java,evaluate,deltaN,double,0,DEF,FastMath.abs($ - 1.0) < epsilon
ContinuedFraction.java,evaluate,n,int,0,MaxCountExceededException,$ >= maxIterations
MathUtils.java,copySign,magnitude,byte,1,RET,$ >= 0
MathUtils.java,copySign,sign,byte,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,byte,1,RET,$ < 0
MathUtils.java,copySign,sign,byte,1,RET,$ < 0
MathUtils.java,copySign,sign,byte,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,byte,1,MathArithmeticException,$ == Byte.MIN_VALUE
MathUtils.java,copySign,magnitude,short,1,RET,$ >= 0
MathUtils.java,copySign,sign,short,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,short,1,RET,$ < 0
MathUtils.java,copySign,sign,short,1,RET,$ < 0
MathUtils.java,copySign,sign,short,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,short,1,MathArithmeticException,$ == Short.MIN_VALUE
MathUtils.java,copySign,magnitude,int,1,RET,$ >= 0
MathUtils.java,copySign,sign,int,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,int,1,RET,$ < 0
MathUtils.java,copySign,sign,int,1,RET,$ < 0
MathUtils.java,copySign,sign,int,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,int,1,MathArithmeticException,$ == Integer.MIN_VALUE
MathUtils.java,copySign,magnitude,long,1,RET,$ >= 0
MathUtils.java,copySign,sign,long,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,long,1,RET,$ < 0
MathUtils.java,copySign,sign,long,1,RET,$ < 0
MathUtils.java,copySign,sign,long,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,long,1,MathArithmeticException,$ == Long.MIN_VALUE
MathUtils.java,checkNotNull,o,Object,0,NullArgumentException,$ == null
MathUtils.java,checkNotNull,o,Object,0,NullArgumentException,$ == null
MathArrays.java,ebeAdd,a,double[],0,DimensionMismatchException,$.length != b.length
MathArrays.java,ebeSubtract,a,double[],0,DimensionMismatchException,$.length != b.length
MathArrays.java,ebeMultiply,a,double[],0,DimensionMismatchException,$.length != b.length
MathArrays.java,ebeDivide,a,double[],0,DimensionMismatchException,$.length != b.length
MathArrays.java,isMonotonic,comp,int,0,RET,$ >= 0
MathArrays.java,isMonotonic,comp,int,0,RET,$ > 0
MathArrays.java,isMonotonic,comp,int,0,RET,$ >= 0
MathArrays.java,isMonotonic,comp,int,0,RET,$ > 0
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] <= previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] <= previous
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] < previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] < previous
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] >= previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] >= previous
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] > previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] > previous
MathArrays.java,checkOrder,index,int,0,RET,$ == max
MathArrays.java,checkPositive,in,double[],0,NotStrictlyPositiveException,$[i] <= 0
MathArrays.java,checkPositive,i,int,0,NotStrictlyPositiveException,in[$] <= 0
MathArrays.java,checkNonNegative,in,long[],0,NotPositiveException,$[i] < 0
MathArrays.java,checkNonNegative,i,int,0,NotPositiveException,in[$] < 0
MathArrays.java,checkNonNegative,in,long[][],0,NotPositiveException,$[i][j] < 0
MathArrays.java,checkNonNegative,i,int,0,NotPositiveException,in[$][j] < 0
MathArrays.java,checkNonNegative,j,int,0,NotPositiveException,in[i][$] < 0
MathArrays.java,safeNorm,xabs,double,1,DEF,$ < rdwarf
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > agiant
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > rdwarf
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > x1max
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > x3max
MathArrays.java,safeNorm,xabs,double,0,DEF,$ != 0
MathArrays.java,safeNorm,s1,double,1,DEF,$ != 0
MathArrays.java,safeNorm,s2,double,1,DEF,$ == 0
MathArrays.java,safeNorm,s2,double,1,DEF,$ >= x3max
MathArrays.java,sortInPlace,x,double[],0,NullArgumentException,$ == null
MathArrays.java,sortInPlace,y,double[],0,NullArgumentException,$ == null
MathArrays.java,sortInPlace,y,double[],0,DimensionMismatchException,$.length != len
MathArrays.java,linearCombination,len,int,0,DimensionMismatchException,$ != b.length
MathArrays.java,equals,x,float[],0,RET,$ == null
MathArrays.java,equals,y,float[],0,RET,$ == null
MathArrays.java,equals,x,float[],0,RET,$.length != y.length
MathArrays.java,equalsIncludingNaN,x,float[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,y,float[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,x,float[],0,RET,$.length != y.length
MathArrays.java,equals,x,double[],0,RET,$ == null
MathArrays.java,equals,y,double[],0,RET,$ == null
MathArrays.java,equals,x,double[],0,RET,$.length != y.length
MathArrays.java,equalsIncludingNaN,x,double[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,y,double[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,x,double[],0,RET,$.length != y.length
MathArrays.java,normalizeArray,sum,double,0,MathArithmeticException,$ == 0
MathArrays.java,buildArray,columns,int,1,DEF,$ < 0
MathArrays.java,convolve,N,int,0,NoDataException,$ == 0
MathArrays.java,convolve,M,int,0,NoDataException,$ == 0
MathArrays.java,convolve,j,int,0,DEF,$ > -1
MathArrays.java,convolve,j,int,0,DEF,$ < N
DefaultTransformer.java,transform,o,Object,0,NullArgumentException,$ == null
DefaultTransformer.java,transform,o,null,0,RET,$ instanceof Number
MultidimensionalCounter.java,MultidimensionalCounter,tS,int,0,NotStrictlyPositiveException,$ <= 0
MultidimensionalCounter.java,getCounts,index,int,0,OutOfRangeException,$ < 0
MultidimensionalCounter.java,getCounts,index,int,0,OutOfRangeException,$ >= totalSize
MultidimensionalCounter.java,getCount,c,int[],0,DimensionMismatchException,$.length != dimension
MultidimensionalCounter.java,getCount,index,int,0,OutOfRangeException,$ < 0
Decimal64.java,equals,obj,null,0,RET,$ instanceof Decimal64
Decimal64.java,rootN,value,double,1,RET,$ < 0
Decimal64.java,linearCombination,a,Decimal64[],0,DimensionMismatchException,$.length != b.length
Decimal64.java,linearCombination,a,double[],0,DimensionMismatchException,$.length != b.length
Incrementor.java,Incrementor,cb,MaxCountExceededCallback,0,NullArgumentException,$ == null
Incrementor.java,incrementCount,count,int,0,DEF,++$ > maximalCount
FastMath.java,doubleHighPart,d,double,0,RET,$ > -Precision.SAFE_MIN
FastMath.java,doubleHighPart,d,double,0,RET,$ < Precision.SAFE_MIN
FastMath.java,cosh,x,double,0,RET,$ != x
FastMath.java,cosh,x,double,1,RET,$ > 20
FastMath.java,cosh,x,double,1,RET,$ >= LOG_MAX_VALUE
FastMath.java,cosh,x,double,0,RET,$ < -20
FastMath.java,cosh,x,double,1,RET,$ <= -LOG_MAX_VALUE
FastMath.java,cosh,x,double,0,DEF,$ < 0.0
FastMath.java,sinh,x,double,0,RET,$ != x
FastMath.java,sinh,x,double,1,RET,$ > 20
FastMath.java,sinh,x,double,1,RET,$ >= LOG_MAX_VALUE
FastMath.java,sinh,x,double,0,RET,$ < -20
FastMath.java,sinh,x,double,1,RET,$ <= -LOG_MAX_VALUE
FastMath.java,sinh,x,double,0,RET,$ == 0
FastMath.java,sinh,x,double,0,DEF,$ < 0.0
FastMath.java,sinh,x,double,1,DEF,$ > 0.25
FastMath.java,tanh,x,double,0,RET,$ != x
FastMath.java,tanh,x,double,0,RET,$ > 20.0
FastMath.java,tanh,x,double,0,RET,$ < -20
FastMath.java,tanh,x,double,0,RET,$ == 0
FastMath.java,tanh,x,double,0,DEF,$ < 0.0
FastMath.java,tanh,x,double,1,DEF,$ >= 0.5
FastMath.java,asinh,a,double,0,DEF,$ < 0
FastMath.java,asinh,a,double,1,DEF,$ > 0.167
FastMath.java,asinh,a,double,1,DEF,$ > 0.097
FastMath.java,asinh,a,double,1,DEF,$ > 0.036
FastMath.java,asinh,a,double,1,DEF,$ > 0.0036
FastMath.java,atanh,a,double,0,DEF,$ < 0
FastMath.java,atanh,a,double,1,DEF,$ > 0.15
FastMath.java,atanh,a,double,1,DEF,$ > 0.087
FastMath.java,atanh,a,double,1,DEF,$ > 0.031
FastMath.java,atanh,a,double,1,DEF,$ > 0.003
FastMath.java,exp,x,double,1,RET,$ < 0.0
FastMath.java,exp,intVal,int,0,RET,$ > 746
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,intVal,int,0,RET,$ > 709
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,intVal,int,0,RET,$ == 709
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,intVal,int,0,RET,$ > 709
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,extra,double,1,DEF,$ != 0.0
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,expm1,x,double,0,RET,$ != x
FastMath.java,expm1,x,double,0,RET,$ == 0.0
FastMath.java,expm1,x,double,0,RET,$ <= -1.0
FastMath.java,expm1,x,double,0,RET,$ >= 1.0
FastMath.java,expm1,x,double,1,RET,$ > 0.0
FastMath.java,expm1,x,double,0,DEF,$ < 0.0
FastMath.java,expm1,hiPrecOut,double[],0,DEF,$ != null
FastMath.java,log,x,double,0,RET,$==0
FastMath.java,log,bits,long,0,RET,($ & 0x8000000000000000L) != 0
FastMath.java,log,x,double,0,RET,$ != x
FastMath.java,log,x,double,0,RET,$ != 0.0
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log,bits,long,0,RET,($ & 0x7ff0000000000000L) == 0
FastMath.java,log,x,double,0,RET,$ == 0
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log,exp,int,0,RET,$ == -1
FastMath.java,log,exp,int,0,RET,$ == 0
FastMath.java,log,x,double,0,RET,$ < 1.01
FastMath.java,log,x,double,0,RET,$ > 0.99
FastMath.java,log,hiPrec,double[],0,RET,$ == null
FastMath.java,log,hiPrec,double[],1,DEF,$ != null
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log1p,x,double,0,RET,$ == -1
FastMath.java,log1p,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,log1p,x,double,1,RET,$ > 1e-6
FastMath.java,log1p,x,double,1,RET,$ < -1e-6
FastMath.java,pow,y,double,0,RET,$ == 0.0
FastMath.java,pow,x,double,0,RET,$ != x
FastMath.java,pow,x,double,0,RET,$ == 0
FastMath.java,pow,bits,long,0,RET,($ & 0x8000000000000000L) != 0
FastMath.java,pow,y,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ > 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ > 0
FastMath.java,pow,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,pow,y,double,0,RET,$ != y
FastMath.java,pow,y,double,1,RET,$ < 0.0
FastMath.java,pow,y,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,pow,x,double,0,RET,$ * $ == 1.0
FastMath.java,pow,x,double,1,RET,$ * $ > 1.0
FastMath.java,pow,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,pow,y,double,0,RET,$ != y
FastMath.java,pow,y,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ > 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,pow,x,double,0,RET,$ * $ == 1.0
FastMath.java,pow,x,double,1,RET,$ * $ < 1.0
FastMath.java,pow,x,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ >= TWO_POWER_53
FastMath.java,pow,y,double,0,RET,$ <= -TWO_POWER_53
FastMath.java,pow,y,double,1,RET,$ == (long) y
FastMath.java,pow,y,double,1,DEF,$ < 8e298
FastMath.java,pow,y,double,1,DEF,$ > -8e298
FastMath.java,pow,e,int,1,RET,$ == 0
FastMath.java,pow,e,int,0,DEF,$ < 0
FastMath.java,pow,e,int,0,DEF,($ & 0x1) != 0
FastMath.java,sinQ,xb,double,0,DEF,$ != 0.0
FastMath.java,tanQ,xb,double,0,DEF,$ != 0.0
FastMath.java,reducePayneHanek,shift,int,1,DEF,$ != 0
FastMath.java,sin,x,double,0,DEF,$ < 0
FastMath.java,sin,xa,double,0,RET,$ == 0.0
FastMath.java,sin,bits,long,0,RET,$ < 0
FastMath.java,sin,xa,double,0,RET,$ != xa
FastMath.java,sin,xa,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,sin,xa,double,1,DEF,$ > 3294198.0
FastMath.java,sin,xa,double,0,DEF,$ > 1.5707963267948966
FastMath.java,cos,x,double,0,DEF,$ < 0
FastMath.java,cos,xa,double,0,RET,$ != xa
FastMath.java,cos,xa,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,cos,xa,double,1,DEF,$ > 3294198.0
FastMath.java,cos,xa,double,0,DEF,$ > 1.5707963267948966
FastMath.java,tan,x,double,0,DEF,$ < 0
FastMath.java,tan,xa,double,0,RET,$ == 0.0
FastMath.java,tan,bits,long,0,RET,$ < 0
FastMath.java,tan,xa,double,0,RET,$ != xa
FastMath.java,tan,xa,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,tan,xa,double,1,DEF,$ > 3294198.0
FastMath.java,tan,xa,double,0,DEF,$ > 1.5707963267948966
FastMath.java,tan,xa,double,0,DEF,$ > 1.5
FastMath.java,tan,quadrant,int,1,DEF,($ & 1) == 0
FastMath.java,atan,xa,double,0,RET,$ == 0.0
FastMath.java,atan,xa,double,0,DEF,$ < 0
FastMath.java,atan,xa,double,0,RET,$ > 1.633123935319537E16
FastMath.java,atan,xa,double,1,DEF,$ < 1
FastMath.java,atan,idx,int,1,DEF,$ == 0
FastMath.java,atan2,x,double,0,RET,$ != x
FastMath.java,atan2,y,double,0,RET,$ != y
FastMath.java,atan2,y,double,0,RET,$ == 0
FastMath.java,atan2,invx,double,0,RET,$ == 0
FastMath.java,atan2,x,double,1,RET,$ > 0
FastMath.java,atan2,x,double,1,RET,$ < 0
FastMath.java,atan2,invx,double,1,RET,$ < 0
FastMath.java,atan2,y,double,1,RET,$ < 0
FastMath.java,atan2,invy,double,1,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,y,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,y,double,0,RET,$ > 0
FastMath.java,atan2,y,double,0,RET,1 / $ > 0
FastMath.java,atan2,y,double,0,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,1 / $ < 0
FastMath.java,atan2,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,y,double,0,RET,$ > 0.0
FastMath.java,atan2,y,double,0,RET,1 / $ > 0.0
FastMath.java,atan2,y,double,0,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,1 / $ < 0
FastMath.java,atan2,x,double,0,RET,$ == 0
FastMath.java,atan2,y,double,0,RET,$ > 0
FastMath.java,atan2,y,double,0,RET,1 / $ > 0
FastMath.java,atan2,y,double,0,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,1 / $ < 0
FastMath.java,atan2,ra,double,0,DEF,$ == 0
FastMath.java,asin,x,double,0,RET,$ != x
FastMath.java,asin,x,double,0,RET,$ > 1.0
FastMath.java,asin,x,double,0,RET,$ < -1.0
FastMath.java,asin,x,double,0,RET,$ == 1.0
FastMath.java,asin,x,double,0,RET,$ == -1.0
FastMath.java,asin,x,double,0,RET,$ == 0.0
FastMath.java,acos,x,double,0,RET,$ != x
FastMath.java,acos,x,double,0,RET,$ > 1.0
FastMath.java,acos,x,double,0,RET,$ < -1.0
FastMath.java,acos,x,double,0,RET,$ == -1.0
FastMath.java,acos,x,double,0,RET,$ == 1.0
FastMath.java,acos,x,double,0,RET,$ == 0
FastMath.java,cbrt,exponent,int,0,RET,$ == -1023
FastMath.java,cbrt,x,double,0,RET,$ == 0
FastMath.java,cbrt,exponent,int,0,RET,$ == 1024
FastMath.java,toRadians,x,double,0,RET,$ == 0.0
FastMath.java,toRadians,result,double,0,DEF,$ == 0
FastMath.java,toDegrees,x,double,0,RET,$ == 0.0
FastMath.java,scalb,n,int,0,RET,$ > -1023
FastMath.java,scalb,n,int,0,RET,$ < 1024
FastMath.java,scalb,d,double,0,RET,$ == 0
FastMath.java,scalb,n,int,0,RET,$ < -2098
FastMath.java,scalb,n,int,0,RET,$ > 2097
FastMath.java,scalb,n,int,1,RET,$ < 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > -53
FastMath.java,scalb,mostSignificantLostBit,long,0,DEF,$ != 0
FastMath.java,scalb,exponent,int,1,RET,$ == 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 2047
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 2047
FastMath.java,scalb,n,int,0,RET,$ > -127
FastMath.java,scalb,n,int,0,RET,$ < 128
FastMath.java,scalb,f,float,0,RET,$ == 0f
FastMath.java,scalb,n,int,0,RET,$ < -277
FastMath.java,scalb,n,int,0,RET,$ > 276
FastMath.java,scalb,n,int,1,RET,$ < 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > -24
FastMath.java,scalb,mostSignificantLostBit,int,0,DEF,$ != 0
FastMath.java,scalb,exponent,int,1,RET,$ == 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 255
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 255
FastMath.java,nextAfter,d,double,1,RET,$ == direction
FastMath.java,nextAfter,d,double,0,RET,$ == 0
FastMath.java,nextAfter,direction,double,1,RET,$ < d
FastMath.java,nextAfter,sign,long,1,RET,$ == 0L
FastMath.java,nextAfter,f,float,1,RET,$ == direction
FastMath.java,nextAfter,f,float,0,RET,$ == 0f
FastMath.java,nextAfter,direction,double,1,RET,$ < f
FastMath.java,nextAfter,sign,int,1,RET,$ == 0
FastMath.java,floor,x,double,0,RET,$ != x
FastMath.java,floor,x,double,0,RET,$ >= TWO_POWER_52
FastMath.java,floor,x,double,0,RET,$ <= -TWO_POWER_52
FastMath.java,floor,x,double,0,DEF,$ < 0
FastMath.java,floor,y,long,0,DEF,$ != x
FastMath.java,floor,y,long,0,RET,$ == 0
FastMath.java,ceil,x,double,0,RET,$ != x
FastMath.java,ceil,y,double,0,RET,$ == x
FastMath.java,ceil,y,double,0,RET,$ == 0
FastMath.java,rint,d,double,0,RET,$ > 0.5
FastMath.java,rint,y,double,0,RET,$ == -1.0
FastMath.java,rint,d,double,0,RET,$ < 0.5
FastMath.java,min,a,float,0,RET,$ > b
FastMath.java,min,a,float,0,RET,$ < b
FastMath.java,min,a,float,0,RET,$ != b
FastMath.java,min,bits,int,0,RET,$ == 0x80000000
FastMath.java,min,a,double,0,RET,$ > b
FastMath.java,min,a,double,0,RET,$ < b
FastMath.java,min,a,double,0,RET,$ != b
FastMath.java,min,bits,long,0,RET,$ == 0x8000000000000000L
FastMath.java,max,a,float,0,RET,$ > b
FastMath.java,max,a,float,0,RET,$ < b
FastMath.java,max,a,float,0,RET,$ != b
FastMath.java,max,bits,int,0,RET,$ == 0x80000000
FastMath.java,max,a,double,0,RET,$ > b
FastMath.java,max,a,double,0,RET,$ < b
FastMath.java,max,a,double,0,RET,$ != b
FastMath.java,max,bits,long,0,RET,$ == 0x8000000000000000L
FastMath.java,copySign,s,long,0,RET,(m^$) >= 0
FastMath.java,copySign,m,long,0,RET,($^s) >= 0
FastMath.java,copySign,s,int,0,RET,(m^$) >= 0
FastMath.java,copySign,m,int,0,RET,($^s) >= 0
FastMath.java,null,i,int,0,DEF,$ != 0
FastMath.java,CodyWaite,remA,double,0,DEF,$ > 0
TransformerMap.java,transform,o,null,1,DEF,$ instanceof Number
TransformerMap.java,transform,o,null,1,DEF,$ instanceof String
TransformerMap.java,transform,trans,NumberTransformer,0,DEF,$ != null
TransformerMap.java,equals,other,null,0,RET,$ instanceof TransformerMap
Pair.java,equals,o,null,1,RET,$ instanceof Pair
OpenIntToDoubleHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToDoubleHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToDoubleHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToDoubleHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToDoubleHashMap.java,key,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToDoubleHashMap.java,key,current,int,0,NoSuchElementException,$ < 0
OpenIntToDoubleHashMap.java,value,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToDoubleHashMap.java,value,current,int,0,NoSuchElementException,$ < 0
OpenIntToDoubleHashMap.java,advance,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToDoubleHashMap.java,advance,current,int,0,NoSuchElementException,$ < 0
ArithmeticUtils.java,addAndCheck,s,long,0,MathArithmeticException,$ < Integer.MIN_VALUE
ArithmeticUtils.java,addAndCheck,s,long,0,MathArithmeticException,$ > Integer.MAX_VALUE
ArithmeticUtils.java,binomialCoefficient,n,int,0,RET,$ == k
ArithmeticUtils.java,binomialCoefficient,k,int,0,RET,$ == 0
ArithmeticUtils.java,binomialCoefficient,k,int,0,RET,$ == 1
ArithmeticUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 61
ArithmeticUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 66
ArithmeticUtils.java,binomialCoefficientDouble,n,int,0,RET,$ == k
ArithmeticUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 0
ArithmeticUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 1
ArithmeticUtils.java,binomialCoefficientDouble,n,int,0,RET,$ < 67
ArithmeticUtils.java,binomialCoefficientLog,n,int,0,RET,$ == k
ArithmeticUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 0
ArithmeticUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 1
ArithmeticUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 67
ArithmeticUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 1030
ArithmeticUtils.java,factorial,n,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,factorial,n,int,0,MathArithmeticException,$ > 20
ArithmeticUtils.java,factorialDouble,n,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,factorialDouble,n,int,0,RET,$ < 21
ArithmeticUtils.java,factorialLog,n,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,factorialLog,n,int,0,RET,$ < 21
ArithmeticUtils.java,gcd,a,int,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,b,int,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,a,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
ArithmeticUtils.java,gcd,b,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
ArithmeticUtils.java,gcd,a,int,0,DEF,$ < 0
ArithmeticUtils.java,gcd,b,int,0,DEF,$ < 0
ArithmeticUtils.java,gcd,al,long,0,MathArithmeticException,$ == bl
ArithmeticUtils.java,gcd,al,long,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,bl,long,0,MathArithmeticException,$ > Integer.MAX_VALUE
ArithmeticUtils.java,gcdPositive,a,int,1,RET,$ == 0
ArithmeticUtils.java,gcdPositive,b,int,0,RET,$ == 0
ArithmeticUtils.java,gcd,u,long,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,v,long,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,u,long,0,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,gcd,v,long,0,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,gcd,u,long,0,DEF,$ > 0
ArithmeticUtils.java,gcd,v,long,0,DEF,$ > 0
ArithmeticUtils.java,gcd,k,int,0,MathArithmeticException,$ == 63
ArithmeticUtils.java,gcd,t,long,1,DEF,$ > 0
ArithmeticUtils.java,lcm,a,int,0,RET,$ == 0
ArithmeticUtils.java,lcm,b,int,0,RET,$ == 0
ArithmeticUtils.java,lcm,lcm,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
ArithmeticUtils.java,lcm,a,long,0,RET,$ == 0
ArithmeticUtils.java,lcm,b,long,0,RET,$ == 0
ArithmeticUtils.java,lcm,lcm,long,0,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,mulAndCheck,m,long,0,MathArithmeticException,$ < Integer.MIN_VALUE
ArithmeticUtils.java,mulAndCheck,m,long,0,MathArithmeticException,$ > Integer.MAX_VALUE
ArithmeticUtils.java,mulAndCheck,a,long,1,DEF,$ > b
ArithmeticUtils.java,mulAndCheck,a,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,mulAndCheck,b,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,mulAndCheck,b,long,1,MathArithmeticException,$ > 0
ArithmeticUtils.java,mulAndCheck,b,long,1,DEF,Long.MIN_VALUE / $ <= a
ArithmeticUtils.java,mulAndCheck,a,long,1,MathArithmeticException,$ > 0
ArithmeticUtils.java,subAndCheck,s,long,0,MathArithmeticException,$ < Integer.MIN_VALUE
ArithmeticUtils.java,subAndCheck,s,long,0,MathArithmeticException,$ > Integer.MAX_VALUE
ArithmeticUtils.java,subAndCheck,b,long,1,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,subAndCheck,a,long,1,DEF,$ < 0
ArithmeticUtils.java,pow,e,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,long,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,long,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,BigInteger,0,NotPositiveException,$.compareTo(BigInteger.ZERO) < 0
ArithmeticUtils.java,stirlingS2,k,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,stirlingS2,k,int,0,NumberIsTooLargeException,$ > n
ArithmeticUtils.java,stirlingS2,stirlingS2,long[][],0,DEF,$ == null
ArithmeticUtils.java,stirlingS2,n,int,1,RET,$ < stirlingS2.length
ArithmeticUtils.java,stirlingS2,k,int,1,RET,$ == 0
ArithmeticUtils.java,stirlingS2,k,int,1,RET,$ == 1
ArithmeticUtils.java,stirlingS2,k,int,1,RET,$ == n
ArithmeticUtils.java,stirlingS2,k,int,1,RET,$ == 2
ArithmeticUtils.java,stirlingS2,sum,long,0,MathArithmeticException,$ < 0
ArithmeticUtils.java,addAndCheck,a,long,1,DEF,$ > b
ArithmeticUtils.java,addAndCheck,a,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,addAndCheck,b,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,addAndCheck,b,long,1,DEF,Long.MIN_VALUE - $ <= a
ArithmeticUtils.java,checkBinomial,n,int,0,NumberIsTooLargeException,$ < k
ArithmeticUtils.java,checkBinomial,n,int,0,NotPositiveException,$ < 0
BigFraction.java,BigFraction,gcd,BigInteger,0,DEF,BigInteger.ONE.compareTo($) < 0
BigFraction.java,BigFraction,den,BigInteger,0,DEF,BigInteger.ZERO.compareTo($) > 0
BigFraction.java,BigFraction,exponent,long,0,DEF,$ != 0
BigFraction.java,BigFraction,sign,long,0,DEF,$ != 0
BigFraction.java,BigFraction,k,int,1,DEF,$ < 0
BigFraction.java,BigFraction,a0,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,value,double,0,RET,FastMath.abs(a0 - $) < epsilon
BigFraction.java,BigFraction,a0,long,0,RET,FastMath.abs($ - value) < epsilon
BigFraction.java,BigFraction,p2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,q2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,n,int,1,DEF,$ < maxIterations
BigFraction.java,BigFraction,convergent,double,1,DEF,FastMath.abs($ - value) > epsilon
BigFraction.java,BigFraction,value,double,1,DEF,FastMath.abs(convergent - $) > epsilon
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,BigFraction,n,int,0,FractionConversionException,$ >= maxIterations
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,getReducedFraction,numerator,int,0,RET,$ == 0
BigFraction.java,add,fraction,BigFraction,0,NullArgumentException,$ == null
BigFraction.java,divide,bg,BigInteger,0,NullArgumentException,$ == null
BigFraction.java,divide,fraction,BigFraction,0,NullArgumentException,$ == null
BigFraction.java,equals,other,null,0,DEF,$ instanceof BigFraction
BigFraction.java,multiply,bg,BigInteger,0,NullArgumentException,$ == null
BigFraction.java,multiply,fraction,BigFraction,0,NullArgumentException,$ == null
BigFraction.java,pow,exponent,int,0,RET,$ < 0
BigFraction.java,pow,exponent,long,0,RET,$ < 0
BigFraction.java,pow,exponent,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
BigFraction.java,subtract,bg,BigInteger,0,NullArgumentException,$ == null
BigFraction.java,subtract,fraction,BigFraction,0,NullArgumentException,$ == null
Fraction.java,Fraction,a0,long,0,FractionConversionException,FastMath.abs($) > overflow
Fraction.java,Fraction,value,double,0,RET,FastMath.abs(a0 - $) < epsilon
Fraction.java,Fraction,a0,long,0,RET,FastMath.abs($ - value) < epsilon
Fraction.java,Fraction,p2,long,0,FractionConversionException,FastMath.abs($) > overflow
Fraction.java,Fraction,q2,long,0,FractionConversionException,FastMath.abs($) > overflow
Fraction.java,Fraction,n,int,1,DEF,$ < maxIterations
Fraction.java,Fraction,convergent,double,1,DEF,FastMath.abs($ - value) > epsilon
Fraction.java,Fraction,value,double,1,DEF,FastMath.abs(convergent - $) > epsilon
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,n,int,0,FractionConversionException,$ >= maxIterations
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,den,int,0,MathArithmeticException,$ == 0
Fraction.java,Fraction,den,int,0,MathArithmeticException,$ < 0
Fraction.java,Fraction,num,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
Fraction.java,Fraction,den,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
Fraction.java,Fraction,d,int,0,DEF,$ > 1
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,abs,numerator,int,1,DEF,$ >= 0
Fraction.java,equals,other,null,0,RET,$ instanceof Fraction
Fraction.java,negate,numerator,int,0,MathArithmeticException,$==Integer.MIN_VALUE
Fraction.java,addSub,fraction,Fraction,0,NullArgumentException,$ == null
Fraction.java,addSub,numerator,int,0,RET,$ == 0
Fraction.java,addSub,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,addSub,d1,int,0,RET,$==1
Fraction.java,addSub,w,BigInteger,0,MathArithmeticException,$.bitLength() > 31
Fraction.java,multiply,fraction,Fraction,0,NullArgumentException,$ == null
Fraction.java,multiply,numerator,int,0,RET,$ == 0
Fraction.java,multiply,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,divide,fraction,Fraction,0,NullArgumentException,$ == null
Fraction.java,divide,fraction,Fraction,0,MathArithmeticException,$.numerator == 0
Fraction.java,getReducedFraction,denominator,int,0,MathArithmeticException,$ == 0
Fraction.java,getReducedFraction,numerator,int,0,RET,$==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,numerator,int,0,DEF,($&1)==0
Fraction.java,getReducedFraction,denominator,int,0,MathArithmeticException,$ < 0
Fraction.java,getReducedFraction,numerator,int,0,MathArithmeticException,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,denominator,int,0,MathArithmeticException,$==Integer.MIN_VALUE
Fraction.java,toString,denominator,int,1,DEF,$ == 1
Fraction.java,toString,numerator,int,1,DEF,$ == 0
AbstractFormat.java,setDenominatorFormat,format,NumberFormat,0,NullArgumentException,$ == null
AbstractFormat.java,setNumeratorFormat,format,NumberFormat,0,NullArgumentException,$ == null
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
ProperBigFractionFormat.java,format,num,BigInteger,0,DEF,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,ret,BigFraction,0,RET,$ != null
ProperBigFractionFormat.java,parse,whole,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,setWholeFormat,format,NumberFormat,0,NullArgumentException,$ == null
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Fraction
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
FractionFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
FractionFormat.java,parse,num,Number,0,RET,$ == null
FractionFormat.java,parse,den,Number,0,RET,$ == null
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigFraction
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigInteger
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
BigFractionFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
BigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
BigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperFractionFormat.java,format,whole,int,0,DEF,$ != 0
ProperFractionFormat.java,parse,ret,Fraction,0,RET,$ != null
ProperFractionFormat.java,parse,whole,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,parse,den,Number,0,RET,$ == null
ProperFractionFormat.java,parse,den,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,setWholeFormat,format,NumberFormat,0,NullArgumentException,$ == null
KMeansPlusPlusClusterer.java,cluster,points,Collection<T>,0,NumberIsTooSmallException,$.size() < k
KMeansPlusPlusClusterer.java,cluster,changes,int,0,RET,$ == 0
KMeansPlusPlusClusterer.java,chooseInitialCenters,i,int,0,DEF,$ != firstPointIndex
KMeansPlusPlusClusterer.java,chooseInitialCenters,sum,double,0,DEF,$ >= r
KMeansPlusPlusClusterer.java,chooseInitialCenters,nextPointIndex,int,0,DEF,$ == -1
KMeansPlusPlusClusterer.java,chooseInitialCenters,nextPointIndex,int,1,DEF,$ >= 0
KMeansPlusPlusClusterer.java,chooseInitialCenters,resultSet,List<CentroidCluster<T>>,0,DEF,$.size() < k
KMeansPlusPlusClusterer.java,getPointFromLargestVarianceCluster,variance,double,0,DEF,$ > maxVariance
KMeansPlusPlusClusterer.java,getPointFromLargestVarianceCluster,selected,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getPointFromLargestNumberCluster,number,int,0,DEF,$ > maxNumber
KMeansPlusPlusClusterer.java,getPointFromLargestNumberCluster,selected,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getFarthestPoint,distance,double,0,DEF,$ > maxDistance
KMeansPlusPlusClusterer.java,getFarthestPoint,selectedCluster,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getNearestCluster,distance,double,0,DEF,$ < minDistance
FuzzyKMeansClusterer.java,FuzzyKMeansClusterer,fuzziness,double,0,NumberIsTooSmallException,$ <= 1.0d
FuzzyKMeansClusterer.java,getMembershipMatrix,membershipMatrix,double[][],0,MathIllegalStateException,$ == null
FuzzyKMeansClusterer.java,getObjectiveFunctionValue,points,List<T>,0,MathIllegalStateException,$ == null
FuzzyKMeansClusterer.java,getObjectiveFunctionValue,clusters,List<CentroidCluster<T>>,0,MathIllegalStateException,$ == null
FuzzyKMeansClusterer.java,cluster,size,int,0,NumberIsTooSmallException,$ < k
FuzzyKMeansClusterer.java,cluster,size,int,0,RET,$ == 0
FuzzyKMeansClusterer.java,updateMembershipMatrix,membershipMatrix,double[][],0,DEF,$[i][j] > maxMembership
FuzzyKMeansClusterer.java,updateMembershipMatrix,i,int,0,DEF,membershipMatrix[$][j] > maxMembership
FuzzyKMeansClusterer.java,updateMembershipMatrix,j,int,0,DEF,membershipMatrix[i][$] > maxMembership
DBSCANClusterer.java,DBSCANClusterer,eps,double,0,NotPositiveException,$ < 0.0d
DBSCANClusterer.java,DBSCANClusterer,minPts,int,0,NotPositiveException,$ < 0
DBSCANClusterer.java,cluster,visited,Map<Clusterable,PointStatus>,0,DEF,$.get(point) != null
DBSCANClusterer.java,cluster,point,T,0,DEF,visited.get($) != null
DBSCANClusterer.java,cluster,neighbors,List<T>,1,DEF,$.size() >= minPts
DBSCANClusterer.java,expandCluster,pStatus,PointStatus,0,DEF,$ == null
DBSCANClusterer.java,expandCluster,currentNeighbors,List<T>,0,DEF,$.size() >= minPts
DBSCANClusterer.java,expandCluster,pStatus,PointStatus,0,DEF,$ != PointStatus.PART_OF_CLUSTER
DBSCANClusterer.java,getNeighbors,point,T,0,DEF,$ != neighbor
DBSCANClusterer.java,getNeighbors,neighbor,T,0,DEF,distance($, point) <= eps
DBSCANClusterer.java,getNeighbors,point,T,0,DEF,distance(neighbor, $) <= eps
DoublePoint.java,equals,other,null,0,RET,$ instanceof DoublePoint
MultiKMeansPlusPlusClusterer.java,cluster,varianceSum,double,0,DEF,$ <= bestVarianceSum
AbstractIntegrator.java,sanityChecks,dt,double,0,NumberIsTooSmallException,$ <= threshold
ContinuousOutputModel.java,append,model,ContinuousOutputModel,0,RET,$.steps.size() == 0
ContinuousOutputModel.java,append,steps,List<StepInterpolator>,1,DEF,$.size() == 0
ContinuousOutputModel.java,handleStep,steps,List<StepInterpolator>,0,DEF,$.size() == 0
ContinuousOutputModel.java,setInterpolatedTime,sMin,StepInterpolator,0,RET,locatePoint(time, $) <= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMin) <= 0
ContinuousOutputModel.java,setInterpolatedTime,sMax,StepInterpolator,0,RET,locatePoint(time, $) >= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMax) >= 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ < 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ > 0
ContinuousOutputModel.java,setInterpolatedTime,tMin,double,1,DEF,FastMath.abs(tMed - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,FastMath.abs($ - tMin) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMax,double,1,DEF,FastMath.abs($ - tMed) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,FastMath.abs(tMax - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,index,int,1,DEF,$ < low
ContinuousOutputModel.java,setInterpolatedTime,index,int,0,DEF,$ > high
AdamsBashforthIntegrator.java,integrate,error,double,0,DEF,$ >= 1.0
GillStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
GillStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
EulerStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
EulerStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
DormandPrince54StepInterpolator.java,DormandPrince54StepInterpolator,interpolator,DormandPrince54StepInterpolator,1,DEF,$.v1 == null
DormandPrince54StepInterpolator.java,computeInterpolatedStateAndDerivatives,v1,double[],0,DEF,$ == null
DormandPrince54StepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
DormandPrince54StepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
GraggBulirschStoerIntegrator.java,setStabilityCheck,stepsizeReductionFactor,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStabilityCheck,stepsizeReductionFactor,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control3,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control3,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control4,double,1,DEF,$ < 1.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control4,double,1,DEF,$ > 999.9
GraggBulirschStoerIntegrator.java,setOrderControl,maximalOrder,int,0,DEF,$ <= 6
GraggBulirschStoerIntegrator.java,setOrderControl,maximalOrder,int,0,DEF,$ % 2 != 0
GraggBulirschStoerIntegrator.java,setOrderControl,control1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,control1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setOrderControl,control2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,control2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$ == null
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$.length != size
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudifControlParameter,int,1,DEF,$ <= 0
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudifControlParameter,int,1,DEF,$ >= 7
GraggBulirschStoerIntegrator.java,rescale,vecAbsoluteTolerance,double[],1,DEF,$ == null
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,DEF,2 * $ == n
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,RET,$ <= maxChecks
GraggBulirschStoerIntegrator.java,tryStep,k,int,0,RET,$ < maxIter
GraggBulirschStoerIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize > t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ > t
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize < t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ < t
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 0
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > 1.0e15
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > maxError
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ > 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,mu,int,0,DEF,$ >= 0
GraggBulirschStoerIntegrator.java,integrate,interpError,double,0,DEF,$ > 10.0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 1
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ <= targetIter
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 2
GraggBulirschStoerIntegrator.java,integrate,optimalIter,int,1,DEF,$ <= k
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ < targetIter
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ < minStep
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,DimensionMismatchException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,DimensionMismatchException,$.length != mainSetDimension
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,DimensionMismatchException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,DimensionMismatchException,$.length != mainSetDimension
AdaptiveStepsizeIntegrator.java,initializeStep,initialStep,double,0,RET,$ > 0
AdaptiveStepsizeIntegrator.java,filterStep,h,double,0,NumberIsTooSmallException,FastMath.abs($) < minStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,0,DEF,$ < -maxStep
EmbeddedRungeKuttaIntegrator.java,integrate,vecAbsoluteTolerance,double[],1,DEF,$ == null
EmbeddedRungeKuttaIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize >= t
EmbeddedRungeKuttaIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ >= t
EmbeddedRungeKuttaIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize <= t
EmbeddedRungeKuttaIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ <= t
EmbeddedRungeKuttaIntegrator.java,integrate,error,double,0,DEF,$ >= 1.0
MidpointStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
MidpointStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
ClassicalRungeKuttaStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
ClassicalRungeKuttaStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
AdamsNordsieckTransformer.java,getInstance,t,AdamsNordsieckTransformer,0,DEF,$ == null
AdamsMoultonIntegrator.java,integrate,error,double,0,DEF,$ >= 1.0
AdamsMoultonIntegrator.java,visit,row,int,1,DEF,($ & 0x1) == 0
AdamsMoultonIntegrator.java,end,i,int,0,DEF,$ < mainSetDimension
DormandPrince853StepInterpolator.java,DormandPrince853StepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState == null
DormandPrince853StepInterpolator.java,computeInterpolatedStateAndDerivatives,v,double[][],0,DEF,$ == null
DormandPrince853StepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
DormandPrince853StepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
DormandPrince853StepInterpolator.java,doFinalize,currentState,double[],0,RET,$ == null
HighamHall54StepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
HighamHall54StepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
DormandPrince853Integrator.java,estimateError,den,double,0,DEF,$ <= 0.0
ThreeEighthesStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
ThreeEighthesStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
RungeKuttaStepInterpolator.java,RungeKuttaStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
RungeKuttaStepInterpolator.java,readExternal,n,int,1,DEF,$ < 0
RungeKuttaStepInterpolator.java,readExternal,currentState,double[],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,GraggBulirschStoerStepInterpolator,interpolator,GraggBulirschStoerStepInterpolator,1,DEF,$.polynomials == null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ < 0
GraggBulirschStoerStepInterpolator.java,resetTables,polynomials,double[][],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ <= 4
GraggBulirschStoerStepInterpolator.java,computeCoefficients,polynomials,double[][],0,DEF,$ == null
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,RET,$ < 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 1
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 2
GraggBulirschStoerStepInterpolator.java,estimateError,currentDegree,int,0,DEF,$ >= 5
GraggBulirschStoerStepInterpolator.java,computeInterpolatedStateAndDerivatives,currentDegree,int,0,DEF,$ > 3
GraggBulirschStoerStepInterpolator.java,computeInterpolatedStateAndDerivatives,h,double,0,DEF,$ == 0
StepNormalizer.java,handleStep,lastState,double[],0,DEF,$ == null
StepNormalizer.java,handleStep,mode,StepNormalizerMode,0,DEF,$ == StepNormalizerMode.MULTIPLES
StepNormalizer.java,doNormalizedStep,firstTime,double,0,RET,$ == lastTime
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.scaled != null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.nordsieck != null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.stateVariation != null
NordsieckStepInterpolator.java,writeExternal,scaled,double[],1,DEF,$ == null
NordsieckStepInterpolator.java,writeExternal,nordsieck,Array2DRowRealMatrix,1,DEF,$ == null
AbstractStepInterpolator.java,AbstractStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState == null
AbstractStepInterpolator.java,allocateInterpolatedArrays,dimension,int,1,DEF,$ < 0
AbstractStepInterpolator.java,allocateInterpolatedArrays,secondaryMappers,EquationsMapper[],1,DEF,$ == null
AbstractStepInterpolator.java,writeBaseExternal,currentState,double[],1,DEF,$ == null
AbstractStepInterpolator.java,writeBaseExternal,currentState,double[],0,DEF,$ != null
AbstractStepInterpolator.java,readBaseExternal,dimension,int,1,DEF,$ < 0
ExpandableStatefulODE.java,setSecondaryState,secondaryState,double[],0,DimensionMismatchException,$.length != localArray.length
EventState.java,reinitializeBegin,g0,double,0,DEF,$ == 0
EventState.java,evaluateStep,dt,double,0,RET,FastMath.abs($) < convergence
EventState.java,evaluateStep,gb,double,1,RET,$ >= 0
EventState.java,evaluateStep,solver,null,1,DEF,$ instanceof BracketedUnivariateSolver<?>
EventState.java,evaluateStep,root,double,1,DEF,FastMath.abs($ - ta) <= convergence
EventState.java,evaluateStep,ta,double,1,DEF,FastMath.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,1,DEF,FastMath.abs($ - previousEventTime) <= convergence
EventState.java,evaluateStep,previousEventTime,double,1,DEF,FastMath.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,1,RET,FastMath.abs(previousEventTime - $) > convergence
EventState.java,evaluateStep,previousEventTime,double,1,RET,FastMath.abs($ - root) > convergence
EventState.java,stepAccepted,t,double,1,DEF,FastMath.abs(pendingEventTime - $) <= convergence
EventState.java,stepAccepted,pendingEventTime,double,1,DEF,FastMath.abs($ - t) <= convergence
EventState.java,reset,t,double,0,RET,FastMath.abs(pendingEventTime - $) <= convergence
EventState.java,reset,pendingEventTime,double,0,RET,FastMath.abs($ - t) <= convergence
EventFilter.java,g,extremeT,double,1,RET,$ < t
EventFilter.java,g,next,Transformer,0,DEF,$ != previous
EventFilter.java,g,i,int,0,RET,updates[$] <= t
EventFilter.java,g,updates,double[],0,RET,$[i] <= t
EventFilter.java,g,t,double,1,RET,$ < extremeT
EventFilter.java,g,next,Transformer,0,DEF,$ != previous
MultistepIntegrator.java,MultistepIntegrator,nSteps,int,0,NumberIsTooSmallException,$ < 2
MultistepIntegrator.java,start,starter,null,1,DEF,$ instanceof AbstractIntegrator
MultistepIntegrator.java,handleStep,count,int,0,DEF,$ == 0
JacobianMatrices.java,JacobianMatrices,parameters,String[],1,DEF,$ == null
JacobianMatrices.java,registerVariationalEquations,expandable,ExpandableStatefulODE,0,MismatchedEquations,$.getPrimary() != ode
JacobianMatrices.java,setInitialMainStateJacobian,efode,ExpandableStatefulODE,0,DEF,$ != null
JacobianMatrices.java,setInitialParameterJacobian,efode,ExpandableStatefulODE,0,DEF,$ != null
JacobianMatrices.java,checkDimension,arrayDimension,int,0,DimensionMismatchException,$ != expected
JacobianMatrices.java,computeDerivatives,paramDim,int,0,DEF,$ != 0
JacobianMatrices.java,computeDerivatives,paramDim,int,0,DEF,$ != 0
EquationsMapper.java,extractEquationData,equationData,double[],0,DimensionMismatchException,$.length != dimension
EquationsMapper.java,insertEquationData,equationData,double[],0,DimensionMismatchException,$.length != dimension
ArgUtils.java,flatten,array,Object[],0,DEF,$ != null
ArgUtils.java,flatten,o,null,1,DEF,$ instanceof Object[]
ExceptionContext.java,buildMessage,count,int,0,DEF,++$ < len
ExceptionContext.java,serializeContext,value,null,1,DEF,$ instanceof Serializable
BaseMultiStartMultivariateOptimizer.java,BaseMultiStartMultivariateOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
BaseMultiStartMultivariateOptimizer.java,doOptimize,maxEvalIndex,int,0,MathIllegalStateException,$ == -1
BaseMultiStartMultivariateOptimizer.java,doOptimize,initialGuessIndex,int,0,MathIllegalStateException,$ == -1
BaseMultiStartMultivariateOptimizer.java,doOptimize,i,int,1,DEF,$ == 0
BaseMultiStartMultivariateOptimizer.java,doOptimize,min,double[],0,DEF,$ != null
BaseMultiStartMultivariateOptimizer.java,doOptimize,max,double[],0,DEF,$ != null
BaseMultiStartMultivariateOptimizer.java,doOptimize,optima,PAIR[],0,DEF,$.length == 0
SimplexSolver.java,getPivotColumn,entry,double,0,DEF,$ < minValue
SimplexSolver.java,getPivotRow,entry,double,0,DEF,Precision.compareTo($, 0d, maxUlps) > 0
SimplexSolver.java,getPivotRow,maxUlps,int,0,DEF,Precision.compareTo(entry, 0d, $) > 0
SimplexSolver.java,getPivotRow,cmp,int,1,DEF,$ == 0
SimplexSolver.java,getPivotRow,cmp,int,0,DEF,$ < 0
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,1,RET,$.size() == 0
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,0,RET,$.size() > 1
SimplexSolver.java,getPivotRow,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() > 0
SimplexSolver.java,getPivotRow,basicRow,Integer,0,DEF,$ != null
SimplexSolver.java,getPivotRow,i,int,0,DEF,$ < minIndex
SimplexSolver.java,doIteration,pivotRow,Integer,0,UnboundedSolutionException,$ == null
SimplexSolver.java,doIteration,i,int,0,DEF,$ != pivotRow
SimplexSolver.java,solvePhase1,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() == 0
SimplexTableau.java,createTableau,constraint,LinearConstraint,1,DEF,$.getRelationship() == Relationship.LEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.EQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,normalize,constraint,LinearConstraint,0,RET,$.getValue() < 0
SimplexTableau.java,getConstraintTypeCounts,constraint,LinearConstraint,0,DEF,$.getRelationship() == relationship
SimplexTableau.java,getBasicRow,row,Integer,1,DEF,$ == null
SimplexTableau.java,dropPhase1Objective,epsilon,double,0,DEF,Precision.compareTo(entry, 0d, $) > 0
SimplexTableau.java,dropPhase1Objective,entry,double,0,DEF,Precision.compareTo($, 0d, epsilon) > 0
SimplexTableau.java,dropPhase1Objective,col,int,0,DEF,getBasicRow($) == null
SimplexTableau.java,isOptimal,epsilon,double,0,RET,Precision.compareTo(entry, 0d, $) < 0
SimplexTableau.java,isOptimal,entry,double,0,RET,Precision.compareTo($, 0d, epsilon) < 0
SimplexTableau.java,getSolution,colIndex,int,0,DEF,$ < 0
SimplexTableau.java,getSolution,basicRow,Integer,1,DEF,$ != null
SimplexTableau.java,getSolution,basicRow,Integer,1,DEF,$ == 0
SimplexTableau.java,subtractRow,result,double,0,DEF,FastMath.abs($) < cutOff
SimplexTableau.java,equals,other,null,0,RET,$ instanceof SimplexTableau
LinearObjectiveFunction.java,equals,other,null,0,RET,$ instanceof LinearObjectiveFunction
LinearConstraint.java,equals,other,null,0,RET,$ instanceof LinearConstraint
LinearOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof LinearObjectiveFunction
LinearOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof LinearConstraintSet
LinearOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof NonNegativeConstraint
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,previous,PointValuePair,0,RET,$ != null
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,n,int,1,DEF,getIterations() % $ == 0
NonLinearConjugateGradientOptimizer.java,doOptimize,beta,double,1,DEF,$ < 0
NonLinearConjugateGradientOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof BracketingStep
NonLinearConjugateGradientOptimizer.java,findUpperBound,yA,double,0,RET,$ * yB <= 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yB,double,0,RET,yA * $ <= 0
MultivariateFunctionPenaltyAdapter.java,MultivariateFunctionPenaltyAdapter,lower,double[],0,DimensionMismatchException,$.length != upper.length
MultivariateFunctionPenaltyAdapter.java,MultivariateFunctionPenaltyAdapter,lower,double[],0,DimensionMismatchException,$.length != scale.length
MultivariateFunctionMappingAdapter.java,MultivariateFunctionMappingAdapter,lower,double[],0,DimensionMismatchException,$.length != upper.length
BOBYQAOptimizer.java,bobyqa,lowerDifference,ArrayRealVector,1,DEF,$.getEntry(j) >= -initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,lowerDifference.getEntry($) >= -initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,lowerDifference,ArrayRealVector,1,DEF,$.getEntry(j) >= ZERO
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,lowerDifference.getEntry($) >= ZERO
BOBYQAOptimizer.java,bobyqa,upperDifference,ArrayRealVector,0,DEF,$.getEntry(j) <= initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,j,int,0,DEF,upperDifference.getEntry($) <= initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,upperDifference,ArrayRealVector,1,DEF,$.getEntry(j) <= ZERO
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,upperDifference.getEntry($) <= ZERO
BOBYQAOptimizer.java,bobyqb,trustRegionCenterInterpolationPointIndex,int,0,DEF,$ != kbase
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,bobyqb,crvmin,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,bdtest,double,0,DEF,$ < bdtol
BOBYQAOptimizer.java,bobyqb,bdtest,double,0,DEF,$ < bdtol
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,ntrits,int,1,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,denom,double,0,DEF,$ < cauchy
BOBYQAOptimizer.java,bobyqb,cauchy,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,k,int,0,DEF,$ == trustRegionCenterInterpolationPointIndex
BOBYQAOptimizer.java,bobyqb,temp,double,0,DEF,$ * den > scaden
BOBYQAOptimizer.java,bobyqb,den,double,0,DEF,temp * $ > scaden
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ == j
BOBYQAOptimizer.java,bobyqb,dnorm,double,0,DEF,$ > rho
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,MathIllegalStateException,$ > 0
BOBYQAOptimizer.java,bobyqb,vquad,double,0,MathIllegalStateException,$ >= ZERO
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= ONE_OVER_TEN
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= .7
BOBYQAOptimizer.java,bobyqb,f,double,0,DEF,$ < fopt
BOBYQAOptimizer.java,bobyqb,temp,double,0,DEF,$ * den > scaden
BOBYQAOptimizer.java,bobyqb,den,double,0,DEF,temp * $ > scaden
BOBYQAOptimizer.java,bobyqb,f,double,0,DEF,$ < fopt
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ > 0
BOBYQAOptimizer.java,bobyqb,itest,int,0,DEF,$ >= 3
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < n
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < npt
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < nh
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,sum,double,0,DEF,$ > distsq
BOBYQAOptimizer.java,bobyqb,knew,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,ratio,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,dnorm,double,0,DEF,Math.max(delta, $) > rho
BOBYQAOptimizer.java,bobyqb,delta,double,0,DEF,Math.max($, dnorm) > rho
BOBYQAOptimizer.java,bobyqb,rho,double,0,DEF,$ > stoppingTrustRegionRadius
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= SIXTEEN
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= TWO_HUNDRED_FIFTY
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,fAtInterpolationPoints,ArrayRealVector,0,DEF,$.getEntry(trustRegionCenterInterpolationPointIndex) <= fsave
BOBYQAOptimizer.java,bobyqb,trustRegionCenterInterpolationPointIndex,int,0,DEF,fAtInterpolationPoints.getEntry($) <= fsave
BOBYQAOptimizer.java,altmov,k,int,0,DEF,$ == trustRegionCenterInterpolationPointIndex
BOBYQAOptimizer.java,altmov,tmp,double,1,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,tmp,double,0,DEF,$ < ZERO
BOBYQAOptimizer.java,altmov,k,int,1,DEF,$ == knew
BOBYQAOptimizer.java,altmov,d4,double,0,DEF,d3 * $ < ZERO
BOBYQAOptimizer.java,altmov,d3,double,0,DEF,$ * d4 < ZERO
BOBYQAOptimizer.java,altmov,subd,double,0,DEF,$ > HALF
BOBYQAOptimizer.java,altmov,vlag,double,0,DEF,Math.abs($) < ONE_OVER_FOUR
BOBYQAOptimizer.java,altmov,predsq,double,0,DEF,$ > presav
BOBYQAOptimizer.java,altmov,ibdsav,int,0,DEF,$ < 0
BOBYQAOptimizer.java,altmov,ibdsav,int,0,DEF,$ > 0
BOBYQAOptimizer.java,altmov,glagValue,double,0,DEF,Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), $) > ZERO
BOBYQAOptimizer.java,altmov,i,int,0,DEF,Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,lowerDifference,ArrayRealVector,0,DEF,Math.min(trustRegionCenterOffset.getEntry(i) - $.getEntry(i), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,trustRegionCenterOffset,ArrayRealVector,0,DEF,Math.min($.getEntry(i) - lowerDifference.getEntry(i), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,glagValue,double,0,DEF,Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), $) < ZERO
BOBYQAOptimizer.java,altmov,upperDifference,ArrayRealVector,0,DEF,Math.max(trustRegionCenterOffset.getEntry(i) - $.getEntry(i), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,i,int,0,DEF,Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,trustRegionCenterOffset,ArrayRealVector,0,DEF,Math.max($.getEntry(i) - upperDifference.getEntry(i), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,ggfree,double,0,RET,$ == ZERO
BOBYQAOptimizer.java,altmov,tmp1,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,0,DEF,$.getEntry(i) == bigstp
BOBYQAOptimizer.java,altmov,i,int,0,DEF,work1.getEntry($) == bigstp
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,1,DEF,$.getEntry(i) == bigstp
BOBYQAOptimizer.java,altmov,i,int,1,DEF,work1.getEntry($) == bigstp
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,altmov,i,int,1,DEF,work1.getEntry($) == ZERO
BOBYQAOptimizer.java,altmov,glagValue,double,1,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,iflag,int,0,DEF,$ == 1
BOBYQAOptimizer.java,altmov,curv,double,1,DEF,$ > -gw
BOBYQAOptimizer.java,altmov,iflag,int,1,DEF,$ == 0
BOBYQAOptimizer.java,altmov,csave,double,0,DEF,$ > cauchy
BOBYQAOptimizer.java,prelim,nfm,int,1,DEF,$ >= 1
BOBYQAOptimizer.java,prelim,nfm,int,1,DEF,$ <= n
BOBYQAOptimizer.java,prelim,upperDifference,ArrayRealVector,0,DEF,$.getEntry(nfmm) == ZERO
BOBYQAOptimizer.java,prelim,nfmm,int,0,DEF,upperDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,nfm,int,0,DEF,$ > n
BOBYQAOptimizer.java,prelim,lowerDifference,ArrayRealVector,0,DEF,$.getEntry(nfxm) == ZERO
BOBYQAOptimizer.java,prelim,nfxm,int,0,DEF,lowerDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,upperDifference,ArrayRealVector,0,DEF,$.getEntry(nfxm) == ZERO
BOBYQAOptimizer.java,prelim,nfxm,int,0,DEF,upperDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,ipt,int,0,DEF,$ > n
BOBYQAOptimizer.java,prelim,numEval,int,1,DEF,$ == 1
BOBYQAOptimizer.java,prelim,numEval,int,1,DEF,$ >= 2
BOBYQAOptimizer.java,prelim,stepb,double,0,DEF,stepa * $ < ZERO
BOBYQAOptimizer.java,prelim,stepa,double,0,DEF,$ * stepb < ZERO
BOBYQAOptimizer.java,prelim,trustRegionCenterInterpolationPointIndex,int,0,DEF,$ == nfm
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,gradientAtTrustRegionCenter.getEntry($) >= ZERO
BOBYQAOptimizer.java,trsbox,gradientAtTrustRegionCenter,ArrayRealVector,0,DEF,$.getEntry(i) >= ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,gradientAtTrustRegionCenter.getEntry($) <= ZERO
BOBYQAOptimizer.java,trsbox,gradientAtTrustRegionCenter,ArrayRealVector,0,DEF,$.getEntry(i) <= ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,beta,double,1,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,stepsq,double,0,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,beta,double,0,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,resid,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,ds,double,1,DEF,$ < ZERO
BOBYQAOptimizer.java,trsbox,shs,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,0,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,s.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,1,DEF,$.getEntry(i) > ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,s.getEntry($) > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ < stplen
BOBYQAOptimizer.java,trsbox,stplen,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ == -1
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,crvmin,double,0,DEF,$ == MINUS_ONE
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,0,DEF,$.getEntry(iact) < ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,s.getEntry($) < ZERO
BOBYQAOptimizer.java,trsbox,delsq,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,stplen,double,0,DEF,$ < blen
BOBYQAOptimizer.java,trsbox,iterc,int,0,DEF,$ == itermax
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,tempa,double,1,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,tempb,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,angbd * $ > tempa
BOBYQAOptimizer.java,trsbox,angbd,double,0,DEF,$ * temp > tempa
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,angbd * $ > tempb
BOBYQAOptimizer.java,trsbox,angbd,double,0,DEF,$ * temp > tempb
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,rednew,double,1,DEF,$ > redmax
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ < 0
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ < iu
BOBYQAOptimizer.java,trsbox,sdec,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ == iu
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == MINUS_ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == MINUS_ONE
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,trsbox,k,int,0,DEF,modelSecondDerivativesParameters.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,modelSecondDerivativesParameters,ArrayRealVector,0,DEF,$.getEntry(k) != ZERO
BOBYQAOptimizer.java,trsbox,crvmin,double,0,DEF,$ != ZERO
BOBYQAOptimizer.java,trsbox,iterc,int,0,DEF,$ > itcsav
BOBYQAOptimizer.java,update,d1,double,0,DEF,Math.abs($) > ztest
BOBYQAOptimizer.java,update,i,int,0,DEF,$ >= npt
BOBYQAOptimizer.java,setup,dimension,int,0,NumberIsTooSmallException,$ < MINIMUM_PROBLEM_DIMENSION
BOBYQAOptimizer.java,setup,minDiff,double,0,DEF,$ < requiredMinDiff
PowellOptimizer.java,PowellOptimizer,rel,double,0,NumberIsTooSmallException,$ < MIN_RELATIVE_TOLERANCE
PowellOptimizer.java,PowellOptimizer,abs,double,0,NotStrictlyPositiveException,$ <= 0
PowellOptimizer.java,doOptimize,fX2,double,0,DEF,($ - fVal) > delta
PowellOptimizer.java,doOptimize,fVal,double,0,DEF,(fX2 - $) > delta
PowellOptimizer.java,doOptimize,checker,ConvergenceChecker<PointValuePair>,0,DEF,$ != null
PowellOptimizer.java,doOptimize,goal,GoalType,1,RET,$ == GoalType.MINIMIZE
PowellOptimizer.java,doOptimize,fX,double,0,DEF,$ > fX2
PowellOptimizer.java,doOptimize,t,double,0,DEF,$ < 0.0
MultiDirectionalSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(reflected, best) < 0
MultiDirectionalSimplex.java,iterate,reflected,PointValuePair,0,RET,comparator.compare($, best) < 0
MultiDirectionalSimplex.java,iterate,best,PointValuePair,0,RET,comparator.compare(reflected, $) < 0
MultiDirectionalSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,DEF,$.compare(reflected, expanded) <= 0
MultiDirectionalSimplex.java,iterate,expanded,PointValuePair,0,DEF,comparator.compare(reflected, $) <= 0
MultiDirectionalSimplex.java,iterate,reflected,PointValuePair,0,DEF,comparator.compare($, expanded) <= 0
AbstractSimplex.java,AbstractSimplex,steps,double[],0,NullArgumentException,$ == null
AbstractSimplex.java,AbstractSimplex,steps,double[],0,ZeroException,$.length == 0
AbstractSimplex.java,AbstractSimplex,j,int,0,ZeroException,steps[$] == 0
AbstractSimplex.java,AbstractSimplex,steps,double[],0,ZeroException,$[j] == 0
AbstractSimplex.java,AbstractSimplex,referenceSimplex,double[][],0,NotStrictlyPositiveException,$.length <= 0
AbstractSimplex.java,AbstractSimplex,refI,double[],0,DimensionMismatchException,$.length != dimension
AbstractSimplex.java,AbstractSimplex,i,int,0,DEF,$ > 0
AbstractSimplex.java,build,dimension,int,0,DimensionMismatchException,$ != startPoint.length
AbstractSimplex.java,replaceWorstPoint,comparator,Comparator<PointValuePair>,0,DEF,$.compare(simplex[i], pointValuePair) > 0
AbstractSimplex.java,replaceWorstPoint,pointValuePair,PointValuePair,0,DEF,comparator.compare(simplex[i], $) > 0
AbstractSimplex.java,replaceWorstPoint,simplex,PointValuePair[],0,DEF,comparator.compare($[i], pointValuePair) > 0
AbstractSimplex.java,replaceWorstPoint,i,int,0,DEF,comparator.compare(simplex[$], pointValuePair) > 0
AbstractSimplex.java,getPoint,index,int,0,OutOfRangeException,$ < 0
AbstractSimplex.java,getPoint,index,int,0,OutOfRangeException,$ >= simplex.length
AbstractSimplex.java,setPoint,index,int,0,OutOfRangeException,$ < 0
AbstractSimplex.java,setPoint,index,int,0,OutOfRangeException,$ >= simplex.length
AbstractSimplex.java,setPoints,points,PointValuePair[],0,DimensionMismatchException,$.length != simplex.length
CMAESOptimizer.java,Sigma,s,double[],0,NotPositiveException,$[i] < 0
CMAESOptimizer.java,Sigma,i,int,0,NotPositiveException,s[$] < 0
CMAESOptimizer.java,PopulationSize,size,int,0,NotStrictlyPositiveException,$ <= 0
CMAESOptimizer.java,doOptimize,diagonalOnly,int,1,DEF,$ <= 0
CMAESOptimizer.java,doOptimize,i,int,0,DEF,$ >= checkFeasableCount
CMAESOptimizer.java,doOptimize,diagonalOnly,int,1,DEF,$ <= 0
CMAESOptimizer.java,doOptimize,bestValue,double,0,DEF,$ > bestFitness
CMAESOptimizer.java,doOptimize,lastResult,PointValuePair,0,DEF,$ != null
CMAESOptimizer.java,doOptimize,stopFitness,double,0,DEF,$ != 0
CMAESOptimizer.java,doOptimize,sigma,double,0,DEF,$ * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX
CMAESOptimizer.java,doOptimize,sqrtDiagC,double[],0,DEF,sigma * Math.max(Math.abs(pcCol[i]), $[i]) > stopTolX
CMAESOptimizer.java,doOptimize,pcCol,double[],0,DEF,sigma * Math.max(Math.abs($[i]), sqrtDiagC[i]) > stopTolX
CMAESOptimizer.java,doOptimize,i,int,0,DEF,sigma * Math.max(Math.abs(pcCol[$]), sqrtDiagC[$]) > stopTolX
CMAESOptimizer.java,doOptimize,sigma,double,0,DEF,$ * sqrtDiagC[i] > stopTolUpX
CMAESOptimizer.java,doOptimize,sqrtDiagC,double[],0,DEF,sigma * $[i] > stopTolUpX
CMAESOptimizer.java,doOptimize,i,int,0,DEF,sigma * sqrtDiagC[$] > stopTolUpX
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > 2
CMAESOptimizer.java,doOptimize,worstFitness,double,0,DEF,Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,bestFitness,double,0,DEF,Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > fitnessHistory.length
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,historyWorst - $ < stopTolHistFun
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,$ - historyBest < stopTolHistFun
CMAESOptimizer.java,doOptimize,diagD,RealMatrix,0,DEF,max($) / min($) > 1e7
CMAESOptimizer.java,doOptimize,lastResult,PointValuePair,0,DEF,$ != null
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > 2
CMAESOptimizer.java,doOptimize,bestFitness,double,0,DEF,Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
CMAESOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof Sigma
CMAESOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof PopulationSize
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,OutOfRangeException,$ != null
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,DimensionMismatchException,$.length != init.length
CMAESOptimizer.java,initializeCMA,lambda,int,0,NotStrictlyPositiveException,$ <= 0
CMAESOptimizer.java,updateCovarianceDiagonalOnly,diagonalOnly,int,0,DEF,$ > 1
CMAESOptimizer.java,updateCovarianceDiagonalOnly,iterations,int,0,DEF,$ > diagonalOnly
CMAESOptimizer.java,updateCovariance,ccovmu,double,0,DEF,ccov1 + $ > 0
CMAESOptimizer.java,updateCovariance,ccov1,double,0,DEF,$ + ccovmu > 0
CMAESOptimizer.java,updateCovariance,negccov,double,0,DEF,$ > negcovMax
CMAESOptimizer.java,updateBD,negccov,double,0,DEF,ccov1 + ccovmu + $ > 0
CMAESOptimizer.java,updateBD,ccovmu,double,0,DEF,ccov1 + $ + negccov > 0
CMAESOptimizer.java,updateBD,ccov1,double,0,DEF,$ + ccovmu + negccov > 0
CMAESOptimizer.java,updateBD,negccov,double,0,DEF,(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,ccovmu,double,0,DEF,(iterations % 1. / (ccov1 + $ + negccov) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,ccov1,double,0,DEF,(iterations % 1. / ($ + ccovmu + negccov) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,dimension,int,0,DEF,(iterations % 1. / (ccov1 + ccovmu + negccov) / $ / 10.) < 1
CMAESOptimizer.java,updateBD,iterations,int,0,DEF,($ % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,diagD,RealMatrix,0,DEF,min($) <= 0
CMAESOptimizer.java,updateBD,i,int,0,DEF,diagD.getEntry($, 0) < 0
CMAESOptimizer.java,updateBD,diagD,RealMatrix,0,DEF,$.getEntry(i, 0) < 0
CMAESOptimizer.java,equals,other,null,0,RET,$ instanceof DoubleIndex
CMAESOptimizer.java,diag,m,RealMatrix,1,RET,$.getColumnDimension() == 1
CMAESOptimizer.java,eye,r,int,0,DEF,$ < m
CMAESOptimizer.java,max,max,double,0,DEF,$ < e
CMAESOptimizer.java,min,min,double,0,DEF,$ > e
SimplexOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof AbstractSimplex
SimplexOptimizer.java,checkParameters,simplex,AbstractSimplex,0,NullArgumentException,$ == null
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(best, reflected) <= 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare(best, $) <= 0
NelderMeadSimplex.java,iterate,best,PointValuePair,1,DEF,comparator.compare($, reflected) <= 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(reflected, secondBest) < 0
NelderMeadSimplex.java,iterate,secondBest,PointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare($, secondBest) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(reflected, best) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare($, best) < 0
NelderMeadSimplex.java,iterate,best,PointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(expanded, reflected) < 0
NelderMeadSimplex.java,iterate,expanded,PointValuePair,1,DEF,comparator.compare($, reflected) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare(expanded, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,RET,$.compare(reflected, worst) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,RET,comparator.compare($, worst) < 0
NelderMeadSimplex.java,iterate,worst,PointValuePair,1,RET,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(outContracted, reflected) <= 0
NelderMeadSimplex.java,iterate,outContracted,PointValuePair,0,RET,comparator.compare($, reflected) <= 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,0,RET,comparator.compare(outContracted, $) <= 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(inContracted, worst) < 0
NelderMeadSimplex.java,iterate,worst,PointValuePair,0,RET,comparator.compare(inContracted, $) < 0
NelderMeadSimplex.java,iterate,inContracted,PointValuePair,0,RET,comparator.compare($, worst) < 0
MultiStartMultivariateOptimizer.java,compare,o1,PointValuePair,1,RET,$ == null
MultiStartMultivariateOptimizer.java,compare,o2,PointValuePair,0,RET,$ == null
LeastSquaresConverter.java,LeastSquaresConverter,observations,double[],0,DimensionMismatchException,$.length != weights.length
LeastSquaresConverter.java,value,residuals,double[],0,DimensionMismatchException,$.length != observations.length
LeastSquaresConverter.java,value,weights,double[],1,DEF,$ != null
LeastSquaresConverter.java,value,scale,RealMatrix,1,DEF,$ != null
MultivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof GoalType
MultivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof ObjectiveFunction
GradientMultivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof ObjectiveFunctionGradient
MultiStartMultivariateVectorOptimizer.java,compare,o1,PointVectorValuePair,1,RET,$ == null
MultiStartMultivariateVectorOptimizer.java,compare,o2,PointVectorValuePair,0,RET,$ == null
MultivariateVectorOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof ModelFunction
MultivariateVectorOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof Target
MultivariateVectorOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof Weight
JacobianMultivariateVectorOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof ModelFunctionJacobian
LevenbergMarquardtOptimizer.java,doOptimize,dk,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,currentCost,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,s,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtOptimizer.java,doOptimize,currentCost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtOptimizer.java,doOptimize,currentCost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtOptimizer.java,doOptimize,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtOptimizer.java,doOptimize,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,RET,$ >= 1.0e-4
LevenbergMarquardtOptimizer.java,doOptimize,checker,ConvergenceChecker<PointVectorValuePair>,0,RET,$ != null
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,0,RET,FastMath.abs($) <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,1,ConvergenceException,FastMath.abs($) <= TWO_EPS
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,1,ConvergenceException,$ <= TWO_EPS
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,ConvergenceException,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,ConvergenceException,$ <= TWO_EPS
LevenbergMarquardtOptimizer.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtOptimizer.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtOptimizer.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtOptimizer.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtOptimizer.java,qrDecomposition,ak2,double,0,RET,$ <= qrRankingThreshold
AbstractLeastSquaresOptimizer.java,computeResiduals,objectiveValue,double[],0,DimensionMismatchException,$.length != target.length
AbstractLeastSquaresOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof Weight
AbstractLeastSquaresOptimizer.java,squareRoot,m,null,1,RET,$ instanceof DiagonalMatrix
GaussNewtonOptimizer.java,doOptimize,checker,ConvergenceChecker<PointVectorValuePair>,0,NullArgumentException,$ == null
GaussNewtonOptimizer.java,doOptimize,previous,PointVectorValuePair,0,RET,$ != null
SimpleValueChecker.java,SimpleValueChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimpleValueChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimpleValueChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
SearchInterval.java,SearchInterval,lo,double,0,NumberIsTooLargeException,$ >= hi
SearchInterval.java,SearchInterval,init,double,0,OutOfRangeException,$ < lo
SearchInterval.java,SearchInterval,init,double,0,OutOfRangeException,$ > hi
BrentOptimizer.java,BrentOptimizer,rel,double,0,NumberIsTooSmallException,$ < MIN_RELATIVE_TOLERANCE
BrentOptimizer.java,BrentOptimizer,abs,double,0,NotStrictlyPositiveException,$ <= 0
BrentOptimizer.java,doOptimize,lo,double,1,DEF,$ < hi
BrentOptimizer.java,doOptimize,e,double,1,DEF,FastMath.abs($) > tol1
BrentOptimizer.java,doOptimize,q,double,1,DEF,$ > 0
BrentOptimizer.java,doOptimize,a,double,0,DEF,u - $ < tol2
BrentOptimizer.java,doOptimize,u,double,0,DEF,$ - a < tol2
BrentOptimizer.java,doOptimize,b,double,0,DEF,$ - u < tol2
BrentOptimizer.java,doOptimize,u,double,0,DEF,b - $ < tol2
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ <= m
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ < m
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ < m
BrentOptimizer.java,doOptimize,d,double,1,DEF,FastMath.abs($) < tol1
BrentOptimizer.java,doOptimize,d,double,1,DEF,$ >= 0
BrentOptimizer.java,doOptimize,checker,ConvergenceChecker<UnivariatePointValuePair>,0,RET,$ != null
BrentOptimizer.java,doOptimize,fu,double,1,DEF,$ <= fx
BrentOptimizer.java,doOptimize,u,double,1,DEF,$ < x
BrentOptimizer.java,doOptimize,u,double,1,DEF,$ < x
BrentOptimizer.java,doOptimize,fu,double,1,DEF,$ <= fw
BrentOptimizer.java,doOptimize,fu,double,0,DEF,$ <= fv
BrentOptimizer.java,best,a,UnivariatePointValuePair,0,RET,$ == null
BrentOptimizer.java,best,b,UnivariatePointValuePair,0,RET,$ == null
SimpleUnivariateValueChecker.java,SimpleUnivariateValueChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimpleUnivariateValueChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimpleUnivariateValueChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
MultiStartUnivariateOptimizer.java,MultiStartUnivariateOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
MultiStartUnivariateOptimizer.java,getOptima,optima,UnivariatePointValuePair[],0,MathIllegalStateException,$ == null
MultiStartUnivariateOptimizer.java,doOptimize,maxEvalIndex,int,0,MathIllegalStateException,$ == -1
MultiStartUnivariateOptimizer.java,doOptimize,searchIntervalIndex,int,0,MathIllegalStateException,$ == -1
MultiStartUnivariateOptimizer.java,doOptimize,optima,UnivariatePointValuePair[],0,DEF,$[0] == null
MultiStartUnivariateOptimizer.java,compare,o1,UnivariatePointValuePair,1,RET,$ == null
MultiStartUnivariateOptimizer.java,compare,o2,UnivariatePointValuePair,0,RET,$ == null
UnivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof SearchInterval
UnivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof UnivariateObjectiveFunction
UnivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof GoalType
BracketFinder.java,BracketFinder,growLimit,double,0,NotStrictlyPositiveException,$ <= 0
BracketFinder.java,BracketFinder,maxEvaluations,int,0,NotStrictlyPositiveException,$ <= 0
BracketFinder.java,search,fA,double,0,DEF,$ < fB
BracketFinder.java,search,fA,double,0,DEF,$ > fB
BracketFinder.java,search,w,double,1,DEF,($ - xC) * (xB - $) > 0
BracketFinder.java,search,xB,double,1,DEF,(w - xC) * ($ - w) > 0
BracketFinder.java,search,xC,double,1,DEF,(w - $) * (xB - w) > 0
BracketFinder.java,search,fW,double,1,DEF,$ < fC
BracketFinder.java,search,fW,double,1,DEF,$ > fC
BracketFinder.java,search,fW,double,0,DEF,$ > fB
BracketFinder.java,search,fW,double,0,DEF,$ < fB
BracketFinder.java,search,w,double,1,DEF,($ - wLim) * (wLim - xC) >= 0
BracketFinder.java,search,xC,double,1,DEF,(w - wLim) * (wLim - $) >= 0
BracketFinder.java,search,wLim,double,1,DEF,(w - $) * ($ - xC) >= 0
BracketFinder.java,search,w,double,1,DEF,($ - wLim) * (xC - $) > 0
BracketFinder.java,search,xC,double,1,DEF,(w - wLim) * ($ - w) > 0
BracketFinder.java,search,wLim,double,1,DEF,(w - $) * (xC - w) > 0
BracketFinder.java,search,fW,double,0,DEF,$ < fC
BracketFinder.java,search,fW,double,0,DEF,$ > fC
BracketFinder.java,search,lo,double,0,DEF,$ > hi
SimpleVectorValueChecker.java,SimpleVectorValueChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimpleVectorValueChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimpleVectorValueChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
MaxEval.java,MaxEval,max,int,0,NotStrictlyPositiveException,$ <= 0
BaseOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof MaxEval
BaseOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof MaxIter
MaxIter.java,MaxIter,max,int,0,NotStrictlyPositiveException,$ <= 0
SimplePointChecker.java,SimplePointChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimplePointChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimplePointChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
BaseMultivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof InitialGuess
BaseMultivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof SimpleBounds
BaseMultivariateOptimizer.java,checkParameters,start,double[],0,NumberIsTooLargeException,$ != null
BaseMultivariateOptimizer.java,checkParameters,lowerBound,double[],0,NumberIsTooSmallException,$ != null
BaseMultivariateOptimizer.java,checkParameters,lowerBound,double[],0,DimensionMismatchException,$.length != dim
BaseMultivariateOptimizer.java,checkParameters,v,double,0,NumberIsTooSmallException,$ < lo
BaseMultivariateOptimizer.java,checkParameters,upperBound,double[],0,NumberIsTooLargeException,$ != null
BaseMultivariateOptimizer.java,checkParameters,upperBound,double[],0,DimensionMismatchException,$.length != dim
BaseMultivariateOptimizer.java,checkParameters,v,double,0,NumberIsTooLargeException,$ > hi
BinaryMutation.java,mutate,original,null,0,MathIllegalArgumentException,$ instanceof BinaryChromosome
FixedElapsedTime.java,FixedElapsedTime,maxTime,long,0,NumberIsTooSmallException,$ < 0
FixedElapsedTime.java,isSatisfied,endTime,long,0,DEF,$ < 0
RandomKey.java,decodeGeneric,representation,List<Double>,0,DimensionMismatchException,$.size() != l
RandomKey.java,decodeGeneric,sortedRepr,List<Double>,0,DimensionMismatchException,$.size() != l
RandomKey.java,isSame,another,null,0,RET,$ instanceof RandomKey<?>
RandomKey.java,checkValidity,val,double,0,InvalidRepresentationException,$ < 0
RandomKey.java,checkValidity,val,double,0,InvalidRepresentationException,$ > 1
RandomKey.java,inducedPermutation,index,int,0,MathIllegalArgumentException,$ == -1
GeneticAlgorithm.java,GeneticAlgorithm,crossoverRate,double,0,OutOfRangeException,$ < 0
GeneticAlgorithm.java,GeneticAlgorithm,crossoverRate,double,0,OutOfRangeException,$ > 1
GeneticAlgorithm.java,GeneticAlgorithm,mutationRate,double,0,OutOfRangeException,$ < 0
GeneticAlgorithm.java,GeneticAlgorithm,mutationRate,double,0,OutOfRangeException,$ > 1
OrderedCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
OrderedCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
Chromosome.java,searchForFitnessUpdate,sameChromosome,Chromosome,0,DEF,$ != null
ElitisticListPopulation.java,setElitismRate,elitismRate,double,0,OutOfRangeException,$ < 0
ElitisticListPopulation.java,setElitismRate,elitismRate,double,0,OutOfRangeException,$ > 1
NPointCrossover.java,NPointCrossover,crossoverPoints,int,0,NotStrictlyPositiveException,$ <= 0
NPointCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
NPointCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
NPointCrossover.java,mate,crossoverPoints,int,0,NumberIsTooLargeException,$ >= length
CycleCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
CycleCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
CycleCrossover.java,mate,cycle,int,0,DEF,$++ % 2 != 0
CycleCrossover.java,mate,idx,int,0,DEF,$ >= length
BinaryChromosome.java,checkValidity,i,int,0,InvalidRepresentationException,$ < 0
BinaryChromosome.java,checkValidity,i,int,0,InvalidRepresentationException,$ >1
BinaryChromosome.java,isSame,another,null,0,RET,$ instanceof BinaryChromosome
OnePointCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
OnePointCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
RandomKeyMutation.java,mutate,original,null,0,MathIllegalArgumentException,$ instanceof RandomKey<?>
UniformCrossover.java,UniformCrossover,ratio,double,0,OutOfRangeException,$ < 0.0d
UniformCrossover.java,UniformCrossover,ratio,double,0,OutOfRangeException,$ > 1.0d
UniformCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
UniformCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
UniformCrossover.java,mate,random,RandomGenerator,1,DEF,$.nextDouble() < ratio
ListPopulation.java,ListPopulation,chromosomes,List<Chromosome>,0,NullArgumentException,$ == null
ListPopulation.java,ListPopulation,populationLimit,int,0,NotPositiveException,$ <= 0
ListPopulation.java,ListPopulation,chromosomes,List<Chromosome>,0,NumberIsTooLargeException,$.size() > populationLimit
ListPopulation.java,setChromosomes,chromosomes,List<Chromosome>,0,NullArgumentException,$ == null
ListPopulation.java,setChromosomes,chromosomes,List<Chromosome>,0,NumberIsTooLargeException,$.size() > populationLimit
ListPopulation.java,addChromosomes,chromosomeColl,Collection<Chromosome>,0,NumberIsTooLargeException,chromosomes.size() + $.size() > populationLimit
ListPopulation.java,addChromosomes,chromosomes,List<Chromosome>,0,NumberIsTooLargeException,$.size() + chromosomeColl.size() > populationLimit
ListPopulation.java,addChromosome,chromosomes,List<Chromosome>,0,NumberIsTooLargeException,$.size() >= populationLimit
ListPopulation.java,getFittestChromosome,bestChromosome,Chromosome,0,DEF,chromosome.compareTo($) > 0
ListPopulation.java,getFittestChromosome,chromosome,Chromosome,0,DEF,$.compareTo(bestChromosome) > 0
ListPopulation.java,setPopulationLimit,populationLimit,int,0,NotPositiveException,$ <= 0
FixedGenerationCount.java,FixedGenerationCount,maxGenerations,int,0,NumberIsTooSmallException,$ <= 0
SmallPrimes.java,boundedTrialDivision,n,int,0,DEF,$ != 1
SmallPrimes.java,millerRabinPrimeTest,n,int,0,DEF,$ >= 2047
SmallPrimes.java,millerRabinPrimeTest,n,int,0,DEF,$ >= 1373653
SmallPrimes.java,millerRabinPrimeTest,n,int,0,DEF,$ >= 25326001
SmallPrimes.java,millerRabinPrimeTest,y,int,0,RET,$ != nMinus1
SmallPrimes.java,millerRabinPrimeTest,nMinus1,int,0,RET,$ != y
PollardRho.java,gcdPositive,a,int,1,RET,$ == 0
PollardRho.java,gcdPositive,b,int,0,RET,$ == 0
Primes.java,isPrime,n,int,0,RET,$ < 2
Primes.java,nextPrime,n,int,0,MathIllegalArgumentException,$ < 0
Primes.java,nextPrime,n,int,0,RET,$ == 2
Primes.java,nextPrime,n,int,0,RET,$ == 1
Primes.java,primeFactors,n,int,0,MathIllegalArgumentException,$ < 2
ConjugateGradient.java,solveInPlace,m,RealLinearOperator,1,DEF,$ == null
ConjugateGradient.java,solveInPlace,rnorm,double,0,RET,$ <= rmax
ConjugateGradient.java,solveInPlace,m,RealLinearOperator,0,DEF,$ != null
ConjugateGradient.java,solveInPlace,rhoNext,double,0,DEF,$ <= 0.
ConjugateGradient.java,solveInPlace,manager,IterationManager,1,DEF,$.getIterations() == 2
ConjugateGradient.java,solveInPlace,pq,double,0,DEF,$ <= 0.
ConjugateGradient.java,solveInPlace,rnorm,double,0,RET,$ <= rmax
JacobiPreconditioner.java,create,a,RealLinearOperator,0,NonSquareOperatorException,$.getRowDimension() != n
JacobiPreconditioner.java,create,a,null,1,DEF,$ instanceof AbstractRealMatrix
RealVectorFormat.java,format,i,int,0,DEF,$ > 0
RealVectorFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
RealVectorFormat.java,parse,component,Number,1,DEF,$ != null
Array2DRowRealMatrix.java,Array2DRowRealMatrix,d,double[][],0,NullArgumentException,$ == null
Array2DRowRealMatrix.java,Array2DRowRealMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,Array2DRowRealMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,Array2DRowRealMatrix,r,int,0,DimensionMismatchException,d[$].length != nCols
Array2DRowRealMatrix.java,Array2DRowRealMatrix,d,double[][],0,DimensionMismatchException,$[r].length != nCols
Array2DRowRealMatrix.java,setSubMatrix,data,double[][],1,DimensionMismatchException,$ == null
Array2DRowRealMatrix.java,setSubMatrix,row,int,0,MathIllegalStateException,$ > 0
Array2DRowRealMatrix.java,setSubMatrix,column,int,0,MathIllegalStateException,$ > 0
Array2DRowRealMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,setSubMatrix,i,int,0,DimensionMismatchException,subMatrix[$].length != nCols
Array2DRowRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DimensionMismatchException,$[i].length != nCols
Array2DRowRealMatrix.java,operate,v,double[],0,DimensionMismatchException,$.length != nCols
Array2DRowRealMatrix.java,preMultiply,v,double[],0,DimensionMismatchException,$.length != nRows
AbstractRealMatrix.java,AbstractRealMatrix,rowDimension,int,0,NotStrictlyPositiveException,$ < 1
AbstractRealMatrix.java,AbstractRealMatrix,columnDimension,int,0,NotStrictlyPositiveException,$ < 1
AbstractRealMatrix.java,power,p,int,0,NotPositiveException,$ < 0
AbstractRealMatrix.java,power,p,int,0,RET,$ == 0
AbstractRealMatrix.java,power,p,int,0,RET,$ == 1
AbstractRealMatrix.java,power,i,int,0,DEF,binaryRepresentation[$] == '1'
AbstractRealMatrix.java,power,binaryRepresentation,char[],0,DEF,$[i] == '1'
AbstractRealMatrix.java,power,maxI,int,0,DEF,$ == -1
AbstractRealMatrix.java,visit,row,int,0,DEF,$ == endRow
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$.length < rowsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$[0].length < columnsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$[i].length < columnsCount
AbstractRealMatrix.java,copySubMatrix,i,int,0,MatrixDimensionMismatchException,destination[$].length < columnsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$.length < selectedRows.length
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$[0].length < nCols
AbstractRealMatrix.java,copySubMatrix,destinationI,double[],0,MatrixDimensionMismatchException,$.length < nCols
AbstractRealMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
AbstractRealMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
AbstractRealMatrix.java,setSubMatrix,r,int,0,DimensionMismatchException,subMatrix[$].length != nCols
AbstractRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DimensionMismatchException,$[r].length != nCols
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
AbstractRealMatrix.java,setRowVector,vector,RealVector,0,MatrixDimensionMismatchException,$.getDimension() != nCols
AbstractRealMatrix.java,setColumnVector,vector,RealVector,0,MatrixDimensionMismatchException,$.getDimension() != nRows
AbstractRealMatrix.java,setRow,array,double[],0,MatrixDimensionMismatchException,$.length != nCols
AbstractRealMatrix.java,setColumn,array,double[],0,MatrixDimensionMismatchException,$.length != nRows
AbstractRealMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractRealMatrix.java,operate,v,double[],0,DimensionMismatchException,$.length != nCols
AbstractRealMatrix.java,operate,v,RealVector,0,DimensionMismatchException,$.getDimension() != nCols
AbstractRealMatrix.java,preMultiply,v,double[],0,DimensionMismatchException,$.length != nRows
AbstractRealMatrix.java,preMultiply,v,RealVector,0,DimensionMismatchException,$.getDimension() != nRows
AbstractRealMatrix.java,equals,object,Object,0,RET,$ instanceof RealMatrix == false
AbstractRealMatrix.java,equals,object,null,0,RET,$ instanceof RealMatrix
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getColumnDimension() != nCols
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getRowDimension() != nRows
SymmLQ.java,checkSymmetry,s,double,0,DEF,FastMath.abs($ - t) > epsa
SymmLQ.java,checkSymmetry,t,double,0,DEF,FastMath.abs(s - $) > epsa
SymmLQ.java,refineSolution,lqnorm,double,1,DEF,$ < cgnorm
SymmLQ.java,update,m,RealLinearOperator,0,DEF,$ != null
SymmLQ.java,update,beta,double,0,DEF,$ < 0.
SymmLQ.java,updateNorms,lqnorm,double,1,DEF,$ <= cgnorm
SymmLQ.java,updateNorms,acond,double,0,IllConditionedOperatorException,$ * MACH_PREC >= 0.1
SymmLQ.java,updateNorms,MACH_PREC,double,0,IllConditionedOperatorException,acond * $ >= 0.1
SymmLQ.java,updateNorms,beta1,double,0,SingularOperatorException,$ <= epsx
BlockRealMatrix.java,toBlocksLayout,length,int,0,DimensionMismatchException,$ != columns
BlockRealMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,setSubMatrix,refLength,int,0,NoDataException,$ == 0
BlockRealMatrix.java,setSubMatrix,subRow,double[],0,DimensionMismatchException,$.length != refLength
BlockRealMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
BlockRealMatrix.java,setRowMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
BlockRealMatrix.java,setRowMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
BlockRealMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
BlockRealMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
BlockRealMatrix.java,setColumnMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
BlockRealMatrix.java,setColumnMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
BlockRealMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
BlockRealMatrix.java,setRow,array,double[],0,MatrixDimensionMismatchException,$.length != nCols
BlockRealMatrix.java,setColumn,array,double[],0,MatrixDimensionMismatchException,$.length != nRows
BlockRealMatrix.java,operate,v,double[],0,DimensionMismatchException,$.length != columns
BlockRealMatrix.java,preMultiply,v,double[],0,DimensionMismatchException,$.length != rows
MatrixUtils.java,createRealMatrix,data,double[][],0,NullArgumentException,$ == null
MatrixUtils.java,createRealMatrix,data,double[][],0,NullArgumentException,$[0] == null
MatrixUtils.java,createFieldMatrix,data,T[][],0,NullArgumentException,$ == null
MatrixUtils.java,createFieldMatrix,data,T[][],0,NullArgumentException,$[0] == null
MatrixUtils.java,createRealVector,data,double[],0,NullArgumentException,$ == null
MatrixUtils.java,createFieldVector,data,T[],0,NullArgumentException,$ == null
MatrixUtils.java,createFieldVector,data,T[],0,ZeroException,$.length == 0
MatrixUtils.java,createRowRealMatrix,rowData,double[],0,NullArgumentException,$ == null
MatrixUtils.java,createRowFieldMatrix,rowData,T[],0,NullArgumentException,$ == null
MatrixUtils.java,createRowFieldMatrix,nCols,int,0,NoDataException,$ == 0
MatrixUtils.java,createColumnRealMatrix,columnData,double[],0,NullArgumentException,$ == null
MatrixUtils.java,createColumnFieldMatrix,columnData,T[],0,NullArgumentException,$ == null
MatrixUtils.java,createColumnFieldMatrix,nRows,int,0,NoDataException,$ == 0
MatrixUtils.java,checkRowIndex,row,int,0,OutOfRangeException,$ < 0
MatrixUtils.java,checkColumnIndex,column,int,0,OutOfRangeException,$ < 0
MatrixUtils.java,checkSubMatrixIndex,endRow,int,0,NumberIsTooSmallException,$ < startRow
MatrixUtils.java,checkSubMatrixIndex,endColumn,int,0,NumberIsTooSmallException,$ < startColumn
MatrixUtils.java,checkSubMatrixIndex,selectedRows,int[],0,NullArgumentException,$ == null
MatrixUtils.java,checkSubMatrixIndex,selectedColumns,int[],0,NullArgumentException,$ == null
MatrixUtils.java,checkSubMatrixIndex,selectedRows,int[],0,NoDataException,$.length == 0
MatrixUtils.java,checkSubMatrixIndex,selectedColumns,int[],0,NoDataException,$.length == 0
MatrixUtils.java,solveLowerTriangularSystem,rm,RealMatrix,0,DimensionMismatchException,$ == null
MatrixUtils.java,solveLowerTriangularSystem,b,RealVector,0,DimensionMismatchException,$ == null
MatrixUtils.java,solveLowerTriangularSystem,diag,double,0,MathArithmeticException,FastMath.abs($) < Precision.SAFE_MIN
MatrixUtils.java,solveUpperTriangularSystem,rm,RealMatrix,0,DimensionMismatchException,$ == null
MatrixUtils.java,solveUpperTriangularSystem,b,RealVector,0,DimensionMismatchException,$ == null
MatrixUtils.java,solveUpperTriangularSystem,diag,double,0,MathArithmeticException,FastMath.abs($) < Precision.SAFE_MIN
MatrixUtils.java,blockInverse,m,RealMatrix,0,NonSquareMatrixException,$.getColumnDimension() != n
SchurTransformer.java,getP,cachedP,RealMatrix,0,DEF,$ == null
SchurTransformer.java,getPT,cachedPt,RealMatrix,0,DEF,$ == null
SchurTransformer.java,getT,cachedT,RealMatrix,0,DEF,$ == null
SchurTransformer.java,transform,il,int,1,DEF,$ == iu
SchurTransformer.java,transform,q,double,0,DEF,$ >= 0
SchurTransformer.java,transform,p,double,1,DEF,$ >= 0
SchurTransformer.java,transform,iteration,int,0,MaxCountExceededException,++$ > MAX_ITERATIONS
SchurTransformer.java,findSmallSubDiagonalElement,s,double,0,DEF,$ == 0.0
SchurTransformer.java,computeShift,l,int,0,DEF,$ < idx
SchurTransformer.java,computeShift,iteration,int,0,DEF,$ == 10
SchurTransformer.java,computeShift,iteration,int,0,DEF,$ == 30
SchurTransformer.java,computeShift,s,double,0,DEF,$ > 0.0
SchurTransformer.java,computeShift,shift,ShiftInfo,0,DEF,$.y < shift.x
SchurTransformer.java,initQRStep,im,int,0,DEF,$ == il
SchurTransformer.java,performDoubleQRStep,k,int,0,DEF,$ != im
SchurTransformer.java,performDoubleQRStep,shift,ShiftInfo,0,DEF,$.x == 0.0
SchurTransformer.java,performDoubleQRStep,p,double,0,DEF,$ < 0.0
SchurTransformer.java,performDoubleQRStep,s,double,0,DEF,$ != 0.0
SchurTransformer.java,performDoubleQRStep,k,int,1,DEF,$ != im
SchurTransformer.java,performDoubleQRStep,il,int,0,DEF,$ != im
RealVector.java,checkVectorDimensions,d,int,0,DimensionMismatchException,$ != n
RealVector.java,checkIndex,index,int,0,OutOfRangeException,$ < 0
RealVector.java,checkIndices,start,int,0,OutOfRangeException,$ < 0
RealVector.java,checkIndices,start,int,0,OutOfRangeException,$ >= dim
RealVector.java,checkIndices,end,int,0,OutOfRangeException,$ < 0
RealVector.java,checkIndices,end,int,0,OutOfRangeException,$ >= dim
RealVector.java,checkIndices,end,int,0,NumberIsTooSmallException,$ < start
RealVector.java,mapAddToSelf,d,double,0,RET,$ != 0
RealVector.java,cosine,norm,double,0,MathArithmeticException,$ == 0
RealVector.java,cosine,vNorm,double,0,MathArithmeticException,$ == 0
RealVector.java,getMinIndex,entry,Entry,0,DEF,$.getValue() <= minValue
RealVector.java,getMaxIndex,entry,Entry,0,DEF,$.getValue() >= maxValue
RealVector.java,outerProduct,v,null,1,DEF,$ instanceof SparseRealVector
RealVector.java,projection,norm2,double,0,MathArithmeticException,$ == 0.0
RealVector.java,unitVector,norm,double,0,MathArithmeticException,$ == 0
RealVector.java,unitize,norm,double,0,MathArithmeticException,$ == 0
RealVector.java,next,i,int,1,RET,$ < dim
RealVector.java,SparseEntryIterator,next,Entry,0,DEF,$.getValue() == 0
RealVector.java,advance,e,Entry,0,RET,$ == null
RealVector.java,advance,e,Entry,0,DEF,$.getIndex() >= dim
RealVector.java,next,index,int,0,NoSuchElementException,$ < 0
TriDiagonalTransformer.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,cachedQt,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,hK,double[],0,DEF,$[k] != 0.0
TriDiagonalTransformer.java,getQT,k,int,0,DEF,hK[$] != 0.0
TriDiagonalTransformer.java,getT,cachedT,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getT,i,int,0,DEF,$ > 0
TriDiagonalTransformer.java,transform,a,double,0,DEF,$ != 0.0
DefaultIterativeLinearSolverEvent.java,getResidual,r,RealVector,0,RET,$ != null
DiagonalMatrix.java,createMatrix,rowDimension,int,0,DimensionMismatchException,$ != columnDimension
DiagonalMatrix.java,multiply,m,null,1,RET,$ instanceof DiagonalMatrix
DiagonalMatrix.java,setEntry,row,int,1,DEF,$ == column
DiagonalMatrix.java,addToEntry,row,int,1,DEF,$ == column
DiagonalMatrix.java,multiplyEntry,row,int,0,DEF,$ == column
HessenbergTransformer.java,getP,cachedP,RealMatrix,0,DEF,$ == null
HessenbergTransformer.java,getP,householderVectors,double[][],0,DEF,$[m][m - 1] != 0.0
HessenbergTransformer.java,getP,m,int,0,DEF,householderVectors[$][$ - 1] != 0.0
HessenbergTransformer.java,getPT,cachedPt,RealMatrix,0,DEF,$ == null
HessenbergTransformer.java,getH,cachedH,RealMatrix,0,DEF,$ == null
HessenbergTransformer.java,getH,i,int,0,DEF,$ > 0
RRQRDecomposition.java,performHouseholderReflection,l2NormSquared,double,0,DEF,$ > l2NormSquaredMax
RRQRDecomposition.java,performHouseholderReflection,l2NormSquaredMaxIndex,int,0,DEF,$ != minor
RRQRDecomposition.java,getP,cachedP,RealMatrix,0,DEF,$ == null
RRQRDecomposition.java,getRank,thisNorm,double,0,DEF,$ == 0
RRQRDecomposition.java,getRank,lastNorm,double,0,DEF,(thisNorm / $) * rNorm < dropThreshold
RRQRDecomposition.java,getRank,rNorm,double,0,DEF,(thisNorm / lastNorm) * $ < dropThreshold
RRQRDecomposition.java,getRank,thisNorm,double,0,DEF,($ / lastNorm) * rNorm < dropThreshold
QRDecomposition.java,performHouseholderReflection,a,double,0,DEF,$ != 0.0
QRDecomposition.java,getR,cachedR,RealMatrix,0,DEF,$ == null
QRDecomposition.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
QRDecomposition.java,getQT,cachedQT,RealMatrix,0,DEF,$ == null
QRDecomposition.java,getQT,minor,int,0,DEF,qrtMinor[$] != 0.0
QRDecomposition.java,getQT,qrtMinor,double[],0,DEF,$[minor] != 0.0
QRDecomposition.java,getH,cachedH,RealMatrix,0,DEF,$ == null
QRDecomposition.java,isNonSingular,diag,double,0,RET,FastMath.abs($) <= threshold
QRDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
QRDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
OpenMapRealMatrix.java,OpenMapRealMatrix,lCol,long,0,NumberIsTooLargeException,lRow * $ >= Integer.MAX_VALUE
OpenMapRealMatrix.java,OpenMapRealMatrix,lRow,long,0,NumberIsTooLargeException,$ * lCol >= Integer.MAX_VALUE
OpenMapRealMatrix.java,multiply,outValue,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,setEntry,value,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,addToEntry,value,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,multiplyEntry,value,double,1,DEF,$ == 0.0
SparseFieldVector.java,append,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,getSubVector,n,int,0,NotPositiveException,$ < 0
SparseFieldVector.java,getSubVector,key,int,0,DEF,$ >= index
SparseFieldVector.java,getSubVector,key,int,0,DEF,$ < end
SparseFieldVector.java,outerProduct,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,subtract,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,checkIndex,index,int,0,OutOfRangeException,$ < 0
SparseFieldVector.java,add,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,equals,obj,null,0,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,equals,field,Field<T>,1,RET,$ == null
SparseFieldVector.java,equals,other,SparseFieldVector<T>,0,RET,$.field != null
SparseFieldVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
AbstractFieldMatrix.java,AbstractFieldMatrix,rowDimension,int,0,NotStrictlyPositiveException,$ <= 0
AbstractFieldMatrix.java,AbstractFieldMatrix,columnDimension,int,0,NotStrictlyPositiveException,$ <= 0
AbstractFieldMatrix.java,extractField,d,T[][],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,extractField,d,T[][],0,NoDataException,$.length == 0
AbstractFieldMatrix.java,extractField,d,T[][],0,NoDataException,$[0].length == 0
AbstractFieldMatrix.java,extractField,d,T[],0,NoDataException,$.length == 0
AbstractFieldMatrix.java,power,p,int,0,NotPositiveException,$ < 0
AbstractFieldMatrix.java,power,p,int,0,RET,$ == 0
AbstractFieldMatrix.java,power,p,int,0,RET,$ == 1
AbstractFieldMatrix.java,power,i,int,0,DEF,binaryRepresentation[$] == '1'
AbstractFieldMatrix.java,power,binaryRepresentation,char[],0,DEF,$[i] == '1'
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$.length < rowsCount
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$[0].length < columnsCount
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$.length < selectedRows.length
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$[0].length < selectedColumns.length
AbstractFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
AbstractFieldMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
AbstractFieldMatrix.java,setSubMatrix,r,int,0,DimensionMismatchException,subMatrix[$].length != nCols
AbstractFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,DimensionMismatchException,$[r].length != nCols
AbstractFieldMatrix.java,setRowMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
AbstractFieldMatrix.java,setRowMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
AbstractFieldMatrix.java,setColumnMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
AbstractFieldMatrix.java,setColumnMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
AbstractFieldMatrix.java,setRowVector,vector,FieldVector<T>,0,MatrixDimensionMismatchException,$.getDimension() != nCols
AbstractFieldMatrix.java,setColumnVector,vector,FieldVector<T>,0,MatrixDimensionMismatchException,$.getDimension() != nRows
AbstractFieldMatrix.java,setRow,array,T[],0,MatrixDimensionMismatchException,$.length != nCols
AbstractFieldMatrix.java,setColumn,array,T[],0,MatrixDimensionMismatchException,$.length != nRows
AbstractFieldMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractFieldMatrix.java,operate,v,T[],0,DimensionMismatchException,$.length != nCols
AbstractFieldMatrix.java,operate,v,FieldVector<T>,0,DimensionMismatchException,$.getDimension() != nCols
AbstractFieldMatrix.java,preMultiply,v,T[],0,DimensionMismatchException,$.length != nRows
AbstractFieldMatrix.java,preMultiply,v,FieldVector<T>,0,DimensionMismatchException,$.getDimension() != nRows
AbstractFieldMatrix.java,toString,i,int,0,DEF,$ > 0
AbstractFieldMatrix.java,toString,j,int,0,DEF,$ > 0
AbstractFieldMatrix.java,equals,object,Object,0,RET,$ instanceof FieldMatrix<?> == false
AbstractFieldMatrix.java,equals,object,null,0,RET,$ instanceof FieldMatrix<?>
AbstractFieldMatrix.java,equals,m,FieldMatrix<>,0,RET,$.getColumnDimension() != nCols
AbstractFieldMatrix.java,equals,m,FieldMatrix<>,0,RET,$.getRowDimension() != nRows
AbstractFieldMatrix.java,checkRowIndex,row,int,0,OutOfRangeException,$ < 0
AbstractFieldMatrix.java,checkColumnIndex,column,int,0,OutOfRangeException,$ < 0
AbstractFieldMatrix.java,checkSubMatrixIndex,endRow,int,0,NumberIsTooSmallException,$ < startRow
AbstractFieldMatrix.java,checkSubMatrixIndex,endColumn,int,0,NumberIsTooSmallException,$ < startColumn
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedColumns,int[],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,NoDataException,$.length == 0
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedColumns,int[],0,NoDataException,$.length == 0
LUDecomposition.java,LUDecomposition,sum,double,0,DEF,FastMath.abs($) > largest
LUDecomposition.java,LUDecomposition,col,int,0,RET,FastMath.abs(lu[max][$]) < singularityThreshold
LUDecomposition.java,LUDecomposition,max,int,0,RET,FastMath.abs(lu[$][col]) < singularityThreshold
LUDecomposition.java,LUDecomposition,lu,double[][],0,RET,FastMath.abs($[max][col]) < singularityThreshold
LUDecomposition.java,LUDecomposition,max,int,0,DEF,$ != col
LUDecomposition.java,getL,cachedL,RealMatrix,0,DEF,$ == null
LUDecomposition.java,getU,cachedU,RealMatrix,0,DEF,$ == null
LUDecomposition.java,getP,cachedP,RealMatrix,0,DEF,$ == null
LUDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
LUDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
EigenDecomposition.java,getV,cachedV,RealMatrix,0,DEF,$ == null
EigenDecomposition.java,getD,cachedD,RealMatrix,0,DEF,$ == null
EigenDecomposition.java,getD,imagEigenvalues,double[],1,DEF,Precision.compareTo($[i], 0.0, EPSILON) > 0
EigenDecomposition.java,getD,i,int,1,DEF,Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) > 0
EigenDecomposition.java,getD,EPSILON,double,1,DEF,Precision.compareTo(imagEigenvalues[i], 0.0, $) > 0
EigenDecomposition.java,getD,imagEigenvalues,double[],0,DEF,Precision.compareTo($[i], 0.0, EPSILON) < 0
EigenDecomposition.java,getD,i,int,0,DEF,Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0
EigenDecomposition.java,getD,EPSILON,double,0,DEF,Precision.compareTo(imagEigenvalues[i], 0.0, $) < 0
EigenDecomposition.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
EigenDecomposition.java,getSquareRoot,eigen,double,0,MathUnsupportedOperationException,$ <= 0
EigenDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
EigenDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
EigenDecomposition.java,isNonSingular,realEigenvalues,double[],0,RET,$[i] == 0
EigenDecomposition.java,isNonSingular,i,int,0,RET,realEigenvalues[$] == 0
EigenDecomposition.java,isNonSingular,imagEigenvalues,double[],0,RET,$[i] == 0
EigenDecomposition.java,isNonSingular,i,int,0,RET,imagEigenvalues[$] == 0
EigenDecomposition.java,findEigenVectors,realEigenvalues,double[],0,DEF,FastMath.abs($[i]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,e,double[],0,DEF,FastMath.abs($[i]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,FastMath.abs(e[$]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,maxAbsoluteValue,double,0,DEF,$ != 0
EigenDecomposition.java,findEigenVectors,e,double[],0,DEF,FastMath.abs($[m]) + delta == delta
EigenDecomposition.java,findEigenVectors,delta,double,0,DEF,FastMath.abs(e[m]) + $ == delta
EigenDecomposition.java,findEigenVectors,m,int,0,DEF,FastMath.abs(e[$]) + delta == delta
EigenDecomposition.java,findEigenVectors,m,int,0,MaxCountExceededException,$ != j
EigenDecomposition.java,findEigenVectors,its,int,0,MaxCountExceededException,$ == maxIter
EigenDecomposition.java,findEigenVectors,q,double,1,DEF,$ < 0.0
EigenDecomposition.java,findEigenVectors,e,double[],0,DEF,$[i + 1] == 0.0
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,e[$ + 1] == 0.0
EigenDecomposition.java,findEigenVectors,t,double,0,DEF,$ == 0.0
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,$ >= j
EigenDecomposition.java,findEigenVectors,realEigenvalues,double[],0,DEF,$[j] > p
EigenDecomposition.java,findEigenVectors,j,int,0,DEF,realEigenvalues[$] > p
EigenDecomposition.java,findEigenVectors,k,int,0,DEF,$ != i
EigenDecomposition.java,findEigenVectors,realEigenvalues,double[],0,DEF,FastMath.abs($[i]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,maxAbsoluteValue,double,0,DEF,$ != 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,imagEigenvalues,double[],1,DEF,Precision.compareTo($[i], 0.0, EPSILON) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,i,int,1,DEF,Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,EPSILON,double,1,DEF,Precision.compareTo(imagEigenvalues[i], 0.0, $) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,w,double,1,DEF,$ != 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,t,double,0,DEF,(Precision.EPSILON * $) * $ > 1
EigenDecomposition.java,findEigenVectorsFromSchur,q,double,0,DEF,$ < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,imagEigenvalues,double[],1,DEF,Precision.compareTo($[i], 0.0, EPSILON) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,i,int,1,DEF,Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,EPSILON,double,1,DEF,Precision.compareTo(imagEigenvalues[i], 0.0, $) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,t,double,0,DEF,(Precision.EPSILON * $) * $ > 1
EigenDecomposition.java,findEigenVectorsFromSchur,i,int,0,DEF,$ < 0
BlockFieldMatrix.java,toBlocksLayout,length,int,0,DimensionMismatchException,$ != columns
BlockFieldMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,setSubMatrix,refLength,int,0,NoDataException,$ == 0
BlockFieldMatrix.java,setSubMatrix,subRow,T[],0,DimensionMismatchException,$.length != refLength
BlockFieldMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
BlockFieldMatrix.java,setRowMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
BlockFieldMatrix.java,setRowMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
BlockFieldMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
BlockFieldMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
BlockFieldMatrix.java,setColumnMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
BlockFieldMatrix.java,setColumnMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
BlockFieldMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
BlockFieldMatrix.java,setRow,array,T[],0,MatrixDimensionMismatchException,$.length != nCols
BlockFieldMatrix.java,setColumn,array,T[],0,MatrixDimensionMismatchException,$.length != nRows
BlockFieldMatrix.java,operate,v,T[],0,DimensionMismatchException,$.length != columns
BlockFieldMatrix.java,preMultiply,v,T[],0,DimensionMismatchException,$.length != rows
PreconditionedIterativeLinearSolver.java,checkParameters,m,RealLinearOperator,0,DimensionMismatchException,$ != null
CholeskyDecomposition.java,CholeskyDecomposition,lJI,double,0,NonSymmetricMatrixException,FastMath.abs(lIJ - $) > maxDelta
CholeskyDecomposition.java,CholeskyDecomposition,lIJ,double,0,NonSymmetricMatrixException,FastMath.abs($ - lJI) > maxDelta
CholeskyDecomposition.java,CholeskyDecomposition,ltI,double[],0,NonPositiveDefiniteMatrixException,$[i] <= absolutePositivityThreshold
CholeskyDecomposition.java,CholeskyDecomposition,i,int,0,NonPositiveDefiniteMatrixException,ltI[$] <= absolutePositivityThreshold
CholeskyDecomposition.java,getL,cachedL,RealMatrix,0,DEF,$ == null
CholeskyDecomposition.java,getLT,cachedLT,RealMatrix,0,DEF,$ == null
CholeskyDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
CholeskyDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,r,int,0,DimensionMismatchException,d[$].length != nCols
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,d,T[][],0,DimensionMismatchException,$[r].length != nCols
Array2DRowFieldMatrix.java,setSubMatrix,data,T[][],1,DimensionMismatchException,$ == null
Array2DRowFieldMatrix.java,setSubMatrix,row,int,0,MathIllegalStateException,$ > 0
Array2DRowFieldMatrix.java,setSubMatrix,column,int,0,MathIllegalStateException,$ > 0
Array2DRowFieldMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,setSubMatrix,i,int,0,DimensionMismatchException,subMatrix[$].length != nCols
Array2DRowFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,DimensionMismatchException,$[i].length != nCols
Array2DRowFieldMatrix.java,operate,v,T[],0,DimensionMismatchException,$.length != nCols
Array2DRowFieldMatrix.java,preMultiply,v,T[],0,DimensionMismatchException,$.length != nRows
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nct
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,singularValues[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,A,double[][],0,DEF,$[k][k] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,A[$][$] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nct
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,singularValues[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nct
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nrt
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k + 1] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$ + 1] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ + 1 < m
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,nct,int,0,DEF,$ < n
SingularValueDecomposition.java,SingularValueDecomposition,m,int,0,DEF,$ < p
SingularValueDecomposition.java,SingularValueDecomposition,nrt,int,0,DEF,$ + 1 < p
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],1,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,1,DEF,singularValues[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nrt
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,FastMath.abs($[k]) > threshold
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,FastMath.abs(e[$]) > threshold
SingularValueDecomposition.java,SingularValueDecomposition,ks,int,0,DEF,$ == k
SingularValueDecomposition.java,SingularValueDecomposition,ks,int,1,DEF,$ == k
SingularValueDecomposition.java,SingularValueDecomposition,j,int,0,DEF,$ != k
SingularValueDecomposition.java,SingularValueDecomposition,b,double,0,DEF,$ != 0
SingularValueDecomposition.java,SingularValueDecomposition,c,double,0,DEF,$ != 0
SingularValueDecomposition.java,SingularValueDecomposition,b,double,0,DEF,$ < 0
SingularValueDecomposition.java,SingularValueDecomposition,j,int,0,DEF,$ != k
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],0,DEF,$[k] <= 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,singularValues[$] <= 0
SingularValueDecomposition.java,getUT,cachedUt,RealMatrix,0,DEF,$ == null
SingularValueDecomposition.java,getS,cachedS,RealMatrix,0,DEF,$ == null
SingularValueDecomposition.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
SingularValueDecomposition.java,getCovariance,dimension,int,0,NumberIsTooLargeException,$ == 0
SingularValueDecomposition.java,getRank,singularValues,double[],0,DEF,$[i] > tol
SingularValueDecomposition.java,getRank,i,int,0,DEF,singularValues[$] > tol
SingularValueDecomposition.java,Solver,singularValues,double[],1,DEF,$[i] > tol
SingularValueDecomposition.java,Solver,i,int,1,DEF,singularValues[$] > tol
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,ZeroException,$.length == 0
ArrayFieldVector.java,ArrayFieldVector,v1,T[],0,ZeroException,$.length + v2.length == 0
ArrayFieldVector.java,ArrayFieldVector,v2,T[],0,ZeroException,v1.length + $.length == 0
ArrayFieldVector.java,ArrayFieldVector,v1,T[],0,ZeroException,$.length + v2.length == 0
ArrayFieldVector.java,ArrayFieldVector,v2,T[],0,ZeroException,v1.length + $.length == 0
ArrayFieldVector.java,getSubVector,n,int,0,NotPositiveException,$ < 0
ArrayFieldVector.java,checkVectorDimensions,data,T[],0,DimensionMismatchException,$.length != n
ArrayFieldVector.java,equals,other,Object,0,RET,$ == null
ArrayFieldVector.java,checkIndex,index,int,0,OutOfRangeException,$ < 0
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,swapR,int,0,DEF,$ != r
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,c,double[][],1,NonPositiveDefiniteMatrixException,$[ir][ir] <= small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,ir,int,1,NonPositiveDefiniteMatrixException,c[$][$] <= small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,r,int,0,NonPositiveDefiniteMatrixException,$ == 0
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,c,double[][],0,NonPositiveDefiniteMatrixException,$[index[i]][index[i]] < -small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,index,int[],0,NonPositiveDefiniteMatrixException,c[$[i]][$[i]] < -small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,i,int,0,NonPositiveDefiniteMatrixException,c[index[$]][index[$]] < -small
ArrayRealVector.java,ArrayRealVector,d,double[],0,NullArgumentException,$ == null
ArrayRealVector.java,ArrayRealVector,d,double[],0,NullArgumentException,$ == null
ArrayRealVector.java,ArrayRealVector,d,Double[],0,NullArgumentException,$ == null
ArrayRealVector.java,ArrayRealVector,v,RealVector,0,NullArgumentException,$ == null
ArrayRealVector.java,add,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,subtract,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,ebeMultiply,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,ebeDivide,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,dotProduct,v,null,0,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getDistance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getL1Distance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getLInfDistance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,outerProduct,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getSubVector,n,int,0,NotPositiveException,$ < 0
ArrayRealVector.java,setSubVector,v,null,1,DEF,$ instanceof ArrayRealVector
ArrayRealVector.java,checkVectorDimensions,data,double[],0,DimensionMismatchException,$.length != n
ArrayRealVector.java,equals,other,null,0,RET,$ instanceof RealVector
ArrayRealVector.java,combineToSelf,y,null,1,DEF,$ instanceof ArrayRealVector
RealMatrixFormat.java,format,j,int,0,DEF,$ > 0
RealMatrixFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
RealMatrixFormat.java,parse,trimmedRowSuffix,String,1,RET,$.length() != 0
RealMatrixFormat.java,parse,trimmedRowPrefix,String,0,RET,$.length() != 0
RealMatrixFormat.java,parse,component,Number,1,DEF,$ != null
BiDiagonalTransformer.java,BiDiagonalTransformer,m,int,1,DEF,$ >= n
BiDiagonalTransformer.java,getU,cachedU,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getU,hK,double[],0,DEF,$[k - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,k,int,0,DEF,hK[$ - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,hK[k - $] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getB,cachedB,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getB,m,int,1,DEF,$ < n
BiDiagonalTransformer.java,getB,i,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getV,cachedV,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getV,hK,double[],0,DEF,$[k] != 0.0
BiDiagonalTransformer.java,getV,k,int,0,DEF,hK[$] != 0.0
BiDiagonalTransformer.java,getV,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,b,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,b,double,0,DEF,$ != 0.0
FieldLUDecomposition.java,FieldLUDecomposition,nonZero,int,0,RET,$ >= m
FieldLUDecomposition.java,FieldLUDecomposition,nonZero,int,0,DEF,$ != col
FieldLUDecomposition.java,getL,cachedL,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecomposition.java,getU,cachedU,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecomposition.java,getP,cachedP,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecomposition.java,solve,b,FieldVector<T>,0,DimensionMismatchException,$.getDimension() != m
FieldLUDecomposition.java,solve,length,int,0,DimensionMismatchException,$ != m
FieldLUDecomposition.java,solve,b,FieldMatrix<T>,0,DimensionMismatchException,$.getRowDimension() != m
OpenMapRealVector.java,add,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,append,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getSubVector,n,int,0,NotPositiveException,$ < 0
OpenMapRealVector.java,getSubVector,key,int,0,DEF,$ >= index
OpenMapRealVector.java,getSubVector,key,int,0,DEF,$ < end
OpenMapRealVector.java,getDistance,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getL1Distance,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getLInfDistance,delta,double,0,DEF,$ > max
OpenMapRealVector.java,getLInfDistance,iter,Iterator,0,DEF,$.value() > max
OpenMapRealVector.java,getLInfDistance,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,subtract,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,equals,obj,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
DfpDec.java,round,msb,int,0,RET,$ == 0
DfpDec.java,round,lsbthreshold,int,0,RET,$ <= 1
DfpDec.java,round,lsbthreshold,int,1,DEF,$ == 1
DfpDec.java,round,rh,int,0,DEF,$ != 0
DfpDec.java,round,exp,int,0,RET,$ < MIN_EXP
DfpDec.java,round,exp,int,0,RET,$ > MAX_EXP
DfpDec.java,round,n,int,0,RET,$ != 0
DfpDec.java,round,discarded,int,0,RET,$ != 0
DfpDec.java,nextAfter,result,Dfp,0,DEF,$.classify() == INFINITE
Dfp.java,Dfp,x,long,0,DEF,$ == Long.MIN_VALUE
Dfp.java,Dfp,x,long,1,DEF,$ < 0
Dfp.java,Dfp,mant,int[],0,DEF,$[i] != 0
Dfp.java,Dfp,i,int,0,DEF,mant[$] != 0
Dfp.java,Dfp,exponent,int,0,RET,$ == -1023
Dfp.java,Dfp,x,double,0,RET,$ == 0
Dfp.java,Dfp,bits,long,0,DEF,($ & 0x8000000000000000L) != 0
Dfp.java,Dfp,exponent,int,0,RET,$ == 1024
Dfp.java,Dfp,x,double,1,DEF,$ != x
Dfp.java,Dfp,x,double,1,DEF,$ < 0
Dfp.java,Dfp,bits,long,0,DEF,($ & 0x8000000000000000L) != 0
Dfp.java,Dfp,p,int,0,DEF,$ == -1
Dfp.java,Dfp,p,int,1,DEF,$ != -1
Dfp.java,Dfp,fpexp,String,0,DEF,$.charAt(i) == '-'
Dfp.java,Dfp,i,int,0,DEF,fpexp.charAt($) == '-'
Dfp.java,Dfp,fpexp,String,0,DEF,$.charAt(i) >= '0'
Dfp.java,Dfp,i,int,0,DEF,fpexp.charAt($) >= '0'
Dfp.java,Dfp,fpexp,String,0,DEF,$.charAt(i) <= '9'
Dfp.java,Dfp,i,int,0,DEF,fpexp.charAt($) <= '9'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.indexOf(-") != -1"
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) >= '1'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) >= '1'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) <= '9'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) <= '9'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) == '0'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) == '0'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) == '.'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) == '.'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) == '.'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) == '.'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) < '0'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) < '0'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) > '9'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) > '9'
Dfp.java,Dfp,q,int,0,DEF,$ != offset
Dfp.java,Dfp,q,int,0,DEF,$ == offset
Dfp.java,Dfp,striped,char[],1,DEF,$[q] == '0'
Dfp.java,Dfp,q,int,1,DEF,striped[$] == '0'
Dfp.java,Dfp,significantDigits,int,0,DEF,$ == 0
Dfp.java,Dfp,p,int,0,DEF,striped[$] != '0'
Dfp.java,Dfp,striped,char[],0,DEF,$[p] != '0'
Dfp.java,Dfp,q,int,0,DEF,$ < striped.length
Dfp.java,align,adiff,int,0,DEF,$ < 0
Dfp.java,align,diff,int,0,RET,$ == 0
Dfp.java,align,diff,int,1,DEF,$ < 0
Dfp.java,align,lostdigit,int,0,DEF,$ != 0
Dfp.java,equals,other,null,0,RET,$ instanceof Dfp
Dfp.java,compare,a,Dfp,0,RET,$.mant[$.mant.length - 1] == 0
Dfp.java,compare,b,Dfp,0,RET,$.mant[$.mant.length - 1] == 0
Dfp.java,compare,a,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,a,Dfp,0,RET,$.sign != b.sign
Dfp.java,compare,a,Dfp,1,RET,$.sign == -1
Dfp.java,compare,a,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,a,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,a,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,b,Dfp,0,RET,$.mant[$.mant.length-1] != 0
Dfp.java,compare,a,Dfp,0,RET,$.mant[b.mant.length-1] != 0
Dfp.java,compare,b,Dfp,0,RET,a.mant[$.mant.length-1] != 0
Dfp.java,compare,a,Dfp,0,RET,$.exp < b.exp
Dfp.java,compare,a,Dfp,0,RET,$.exp > b.exp
Dfp.java,remainder,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,remainder,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,trunc,nans,byte,0,RET,$ == INFINITE
Dfp.java,trunc,mant,int[],0,RET,$[$.length-1] == 0
Dfp.java,trunc,exp,int,0,RET,$ < 0
Dfp.java,trunc,exp,int,0,RET,$ >= mant.length
Dfp.java,trunc,result,Dfp,0,DEF,$.sign == -1
Dfp.java,trunc,result,Dfp,0,DEF,$.sign == 1
Dfp.java,trunc,result,Dfp,0,DEF,$.exp > 0
Dfp.java,trunc,result,Dfp,0,DEF,($.mant[mant.length-$.exp]&1) != 0
Dfp.java,trunc,mant,int[],0,DEF,(result.mant[$.length-result.exp]&1) != 0
Dfp.java,intValue,rounded,Dfp,0,DEF,$.sign == -1
Dfp.java,intLog10,mant,int[],0,RET,$[$.length-1] > 1000
Dfp.java,intLog10,mant,int[],0,RET,$[$.length-1] > 100
Dfp.java,intLog10,mant,int[],0,RET,$[$.length-1] > 10
Dfp.java,power10,e,int,1,DEF,$ >= 0
Dfp.java,add,nans,byte,0,RET,$ != FINITE
Dfp.java,add,x,Dfp,0,RET,$.nans != FINITE
Dfp.java,add,nans,byte,0,RET,$ == INFINITE
Dfp.java,add,x,Dfp,0,RET,$.nans == FINITE
Dfp.java,add,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,add,nans,byte,0,RET,$ == FINITE
Dfp.java,add,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,add,nans,byte,0,RET,$ == INFINITE
Dfp.java,add,sign,byte,0,RET,$ == x.sign
Dfp.java,add,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,add,nans,byte,0,RET,$ == INFINITE
Dfp.java,add,sign,byte,0,RET,$ != x.sign
Dfp.java,add,a,Dfp,0,DEF,compare($, b) > 0
Dfp.java,add,b,Dfp,0,DEF,compare(a, $) > 0
Dfp.java,add,b,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,add,mant,int[],0,DEF,b.mant[$.length-1] == 0
Dfp.java,add,a,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,add,mant,int[],0,DEF,a.mant[$.length-1] == 0
Dfp.java,add,a,Dfp,1,DEF,$.exp < b.exp
Dfp.java,add,asign,byte,0,DEF,$ != bsign
Dfp.java,add,asign,byte,1,DEF,$ == rsign
Dfp.java,add,rh,int,0,DEF,$ != 0
Dfp.java,add,asign,byte,0,DEF,$ == bsign
Dfp.java,add,excp,int,0,DEF,$ != 0
Dfp.java,add,result,Dfp,0,DEF,$.mant[mant.length-1] != 0
Dfp.java,add,mant,int[],0,DEF,result.mant[$.length-1] != 0
Dfp.java,add,i,int,0,DEF,$ == 0
Dfp.java,add,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,add,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,add,asign,byte,0,DEF,$ != bsign
Dfp.java,add,excp,int,0,DEF,$ != 0
Dfp.java,round,rh,int,0,DEF,$ != 0
Dfp.java,round,exp,int,0,RET,$ < MIN_EXP
Dfp.java,round,exp,int,0,RET,$ > MAX_EXP
Dfp.java,round,n,int,0,RET,$ != 0
Dfp.java,multiply,nans,byte,0,RET,$ != FINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans != FINITE
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans == FINITE
Dfp.java,multiply,x,Dfp,0,RET,$.mant[mant.length-1] != 0
Dfp.java,multiply,mant,int[],0,RET,x.mant[$.length-1] != 0
Dfp.java,multiply,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,multiply,nans,byte,0,RET,$ == FINITE
Dfp.java,multiply,mant,int[],0,RET,$[$.length-1] != 0
Dfp.java,multiply,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,multiply,nans,byte,0,RET,$ == FINITE
Dfp.java,multiply,mant,int[],0,RET,$[$.length-1] == 0
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans == FINITE
Dfp.java,multiply,x,Dfp,0,RET,$.mant[mant.length-1] == 0
Dfp.java,multiply,mant,int[],0,RET,x.mant[$.length-1] == 0
Dfp.java,multiply,product,int[],0,DEF,$[i] != 0
Dfp.java,multiply,i,int,0,DEF,product[$] != 0
Dfp.java,multiply,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,multiply,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,multiply,excp,int,0,DEF,$ != 0
Dfp.java,multiply,x,int,1,RET,$ >= 0
Dfp.java,multiply,x,int,1,RET,$ < RADIX
Dfp.java,multiplyFast,nans,byte,0,RET,$ != FINITE
Dfp.java,multiplyFast,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiplyFast,x,int,0,RET,$ != 0
Dfp.java,multiplyFast,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiplyFast,x,int,0,RET,$ == 0
Dfp.java,multiplyFast,x,int,0,RET,$ < 0
Dfp.java,multiplyFast,x,int,0,RET,$ >= RADIX
Dfp.java,multiplyFast,rh,int,0,DEF,$ != 0
Dfp.java,multiplyFast,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,multiplyFast,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,multiplyFast,excp,int,0,DEF,$ != 0
Dfp.java,divide,nans,byte,0,RET,$ != FINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans != FINITE
Dfp.java,divide,nans,byte,0,RET,$ == INFINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans == FINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans == INFINITE
Dfp.java,divide,nans,byte,0,RET,$ == FINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans == INFINITE
Dfp.java,divide,nans,byte,0,RET,$ == INFINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.mant[mant.length-1] == 0
Dfp.java,divide,mant,int[],0,RET,divisor.mant[$.length-1] == 0
Dfp.java,divide,rh,int,0,DEF,$ == 0
Dfp.java,divide,minadj,int,0,DEF,$ >= 2
Dfp.java,divide,mant,int[],0,DEF,remainder[$.length] != 0
Dfp.java,divide,remainder,int[],0,DEF,$[mant.length] != 0
Dfp.java,divide,trialgood,boolean,0,DEF,$ == false
Dfp.java,divide,trial,int,0,DEF,$ != 0
Dfp.java,divide,nsqd,int,0,DEF,$ != 0
Dfp.java,divide,field,DfpField,0,DEF,$.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN
Dfp.java,divide,nsqd,int,0,DEF,$ == mant.length
Dfp.java,divide,nsqd,int,0,DEF,$ > mant.length
Dfp.java,divide,quotient,int[],0,DEF,$[i] != 0
Dfp.java,divide,i,int,0,DEF,quotient[$] != 0
Dfp.java,divide,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,divide,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,divide,excp,int,0,DEF,$ != 0
Dfp.java,divide,nans,byte,0,RET,$ != FINITE
Dfp.java,divide,nans,byte,0,RET,$ == INFINITE
Dfp.java,divide,divisor,int,0,RET,$ == 0
Dfp.java,divide,divisor,int,0,RET,$ < 0
Dfp.java,divide,divisor,int,0,RET,$ >= RADIX
Dfp.java,divide,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,divide,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,divide,excp,int,0,DEF,$ != 0
Dfp.java,sqrt,nans,byte,0,RET,$ == FINITE
Dfp.java,sqrt,mant,int[],0,RET,$[$.length-1] == 0
Dfp.java,sqrt,nans,byte,0,RET,$ != FINITE
Dfp.java,sqrt,nans,byte,0,RET,$ == INFINITE
Dfp.java,sqrt,sign,byte,0,RET,$ == 1
Dfp.java,sqrt,nans,byte,0,RET,$ == QNAN
Dfp.java,sqrt,nans,byte,0,RET,$ == SNAN
Dfp.java,sqrt,sign,byte,0,RET,$ == -1
Dfp.java,sqrt,x,Dfp,0,DEF,$.exp < -1
Dfp.java,sqrt,x,Dfp,0,DEF,$.exp > 1
Dfp.java,sqrt,dx,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,sqrt,mant,int[],0,DEF,dx.mant[$.length-1] == 0
Dfp.java,toString,nans,byte,0,RET,$ != FINITE
Dfp.java,toString,nans,byte,1,RET,$ == INFINITE
Dfp.java,toString,exp,int,0,RET,$ > mant.length
Dfp.java,toString,exp,int,0,RET,$ < -1
Dfp.java,dfp2sci,p,int,0,DEF,rawdigits[$] != '0'
Dfp.java,dfp2sci,rawdigits,char[],0,DEF,$[p] != '0'
Dfp.java,dfp2sci,sign,byte,0,DEF,$ == -1
Dfp.java,dfp2sci,p,int,1,DEF,$ != rawdigits.length
Dfp.java,dfp2sci,e,int,0,DEF,$ < 0
Dfp.java,dfp2sci,e,int,0,DEF,$ < 0
Dfp.java,dfp2string,e,int,0,DEF,$ <= 0
Dfp.java,dfp2string,e,int,0,DEF,--$ == 0
Dfp.java,dfp2string,q,int,0,DEF,buffer[$] == '.'
Dfp.java,dfp2string,buffer,char[],0,DEF,$[q] == '.'
Dfp.java,dfp2string,sign,byte,0,DEF,$ < 0
Dfp.java,dotrap,nans,byte,0,DEF,$ == FINITE
Dfp.java,dotrap,mant,int[],0,DEF,$[$.length-1] != 0
Dfp.java,dotrap,nans,byte,0,DEF,$ == FINITE
Dfp.java,dotrap,mant,int[],0,DEF,$[$.length-1] == 0
Dfp.java,dotrap,nans,byte,0,DEF,$ == INFINITE
Dfp.java,dotrap,nans,byte,0,DEF,$ == QNAN
Dfp.java,dotrap,nans,byte,0,DEF,$ == INFINITE
Dfp.java,dotrap,nans,byte,0,DEF,$ == SNAN
Dfp.java,dotrap,result,Dfp,1,DEF,($.exp+mant.length) < MIN_EXP
Dfp.java,dotrap,mant,int[],1,DEF,(result.exp+$.length) < MIN_EXP
Dfp.java,nextAfter,x,Dfp,0,RET,compare(this, $) == 0
Dfp.java,nextAfter,result,Dfp,0,DEF,$.classify() == INFINITE
Dfp.java,toDouble,cmp0,int,1,RET,$ == 0
Dfp.java,toDouble,cmp0,int,0,DEF,$ < 0
Dfp.java,toDouble,exponent,int,0,DEF,$ < 0
Dfp.java,toDouble,exponent,int,0,DEF,$ > -1023
Dfp.java,toDouble,exponent,int,0,RET,$ < -1074
Dfp.java,toDouble,exponent,int,0,RET,$ > 1023
Dfp.java,toDouble,mantissa,long,0,DEF,$ == 4503599627370496L
Dfp.java,toDouble,exponent,int,0,DEF,$ <= -1023
Dfp.java,copySign,sign,byte,0,RET,$ >= 0
Dfp.java,copySign,s,Dfp,0,RET,$.sign >= 0
Dfp.java,copySign,sign,byte,0,RET,$ < 0
Dfp.java,copySign,s,Dfp,0,RET,$.sign < 0
Dfp.java,copySign,sign,byte,0,RET,$ >= 0
Dfp.java,copySign,sb,long,0,RET,$ >= 0
Dfp.java,copySign,sign,byte,0,RET,$ < 0
Dfp.java,copySign,sb,long,0,RET,$ < 0
Dfp.java,atan2,x,Dfp,1,RET,$.sign >= 0
Dfp.java,linearCombination,a,Dfp[],0,DimensionMismatchException,$.length != b.length
Dfp.java,linearCombination,a,double[],0,DimensionMismatchException,$.length != b.length
DfpMath.java,split,buf,char[],0,DEF,$[i] >= '1'
DfpMath.java,split,i,int,0,DEF,buf[$] >= '1'
DfpMath.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpMath.java,split,i,int,0,DEF,buf[$] <= '9'
DfpMath.java,split,buf,char[],0,DEF,$[i] == '.'
DfpMath.java,split,i,int,0,DEF,buf[$] == '.'
DfpMath.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpMath.java,split,i,int,0,DEF,buf[$] >= '0'
DfpMath.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpMath.java,split,i,int,0,DEF,buf[$] <= '9'
DfpMath.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpMath.java,split,i,int,0,DEF,buf[$] >= '0'
DfpMath.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpMath.java,split,i,int,0,DEF,buf[$] <= '9'
DfpMath.java,split,i,int,0,DEF,$ < sp
DfpMath.java,splitMult,result,Dfp[],0,RET,$[0].classify() == Dfp.INFINITE
DfpMath.java,splitPow,a,int,0,RET,$ == 0
DfpMath.java,splitPow,a,int,0,DEF,$ < 0
DfpMath.java,splitPow,trial,int,0,DEF,$ > a
DfpMath.java,pow,a,int,0,RET,$ == 0
DfpMath.java,pow,a,int,0,DEF,$ < 0
DfpMath.java,exp,ia,int,0,RET,$ > 2147483646
DfpMath.java,exp,ia,int,0,RET,$ < -2147483646
DfpMath.java,log,a,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,1,RET,$.classify() == Dfp.FINITE
DfpMath.java,pow,y,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,x,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,1,RET,$.classify() == Dfp.FINITE
BracketingNthOrderBrentSolverDFP.java,BracketingNthOrderBrentSolverDFP,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolverDFP.java,solve,agingA,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolverDFP.java,solve,agingB,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolverDFP.java,solve,nbPoints,int,1,DEF,$ > 2
BracketingNthOrderBrentSolverDFP.java,solve,start,int,1,DEF,end - $ != nbPoints
BracketingNthOrderBrentSolverDFP.java,solve,end,int,1,DEF,$ - start != nbPoints
BracketingNthOrderBrentSolverDFP.java,solve,nbPoints,int,0,DEF,$ == x.length
DfpField.java,split,buf,char[],0,DEF,$[i] >= '1'
DfpField.java,split,i,int,0,DEF,buf[$] >= '1'
DfpField.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpField.java,split,i,int,0,DEF,buf[$] <= '9'
DfpField.java,split,buf,char[],0,DEF,$[i] == '.'
DfpField.java,split,i,int,0,DEF,buf[$] == '.'
DfpField.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpField.java,split,i,int,0,DEF,buf[$] >= '0'
DfpField.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpField.java,split,i,int,0,DEF,buf[$] <= '9'
DfpField.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpField.java,split,i,int,0,DEF,buf[$] >= '0'
DfpField.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpField.java,split,i,int,0,DEF,buf[$] <= '9'
DfpField.java,split,i,int,0,DEF,$ < sp
DfpField.java,computeStringConstants,sqr2String,String,0,DEF,$ == null
SimplexSolver.java,getPivotColumn,entry,double,0,DEF,$ < minValue
SimplexSolver.java,getPivotRow,entry,double,0,DEF,Precision.compareTo($, 0d, maxUlps) > 0
SimplexSolver.java,getPivotRow,maxUlps,int,0,DEF,Precision.compareTo(entry, 0d, $) > 0
SimplexSolver.java,getPivotRow,cmp,int,1,DEF,$ == 0
SimplexSolver.java,getPivotRow,cmp,int,0,DEF,$ < 0
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,1,RET,$.size() == 0
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,0,RET,$.size() > 1
SimplexSolver.java,getPivotRow,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() > 0
SimplexSolver.java,getPivotRow,basicRow,Integer,0,DEF,$ != null
SimplexSolver.java,getPivotRow,i,int,0,DEF,$ < minIndex
SimplexSolver.java,doIteration,pivotRow,Integer,0,UnboundedSolutionException,$ == null
SimplexSolver.java,doIteration,i,int,0,DEF,$ != pivotRow
SimplexSolver.java,solvePhase1,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() == 0
SimplexTableau.java,createTableau,constraint,LinearConstraint,1,DEF,$.getRelationship() == Relationship.LEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.EQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,normalize,constraint,LinearConstraint,0,RET,$.getValue() < 0
SimplexTableau.java,getConstraintTypeCounts,constraint,LinearConstraint,0,DEF,$.getRelationship() == relationship
SimplexTableau.java,getBasicRow,row,Integer,1,DEF,$ == null
SimplexTableau.java,dropPhase1Objective,epsilon,double,0,DEF,Precision.compareTo(entry, 0d, $) > 0
SimplexTableau.java,dropPhase1Objective,entry,double,0,DEF,Precision.compareTo($, 0d, epsilon) > 0
SimplexTableau.java,dropPhase1Objective,col,int,0,DEF,getBasicRow($) == null
SimplexTableau.java,isOptimal,epsilon,double,0,RET,Precision.compareTo(entry, 0d, $) < 0
SimplexTableau.java,isOptimal,entry,double,0,RET,Precision.compareTo($, 0d, epsilon) < 0
SimplexTableau.java,getSolution,colIndex,int,0,DEF,$ < 0
SimplexTableau.java,getSolution,basicRow,Integer,1,DEF,$ != null
SimplexTableau.java,getSolution,basicRow,Integer,1,DEF,$ == 0
SimplexTableau.java,subtractRow,result,double,0,DEF,FastMath.abs($) < CUTOFF_THRESHOLD
SimplexTableau.java,equals,other,null,0,RET,$ instanceof SimplexTableau
AbstractLinearOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxCountExceededException,++$ > maxIterations
LinearObjectiveFunction.java,equals,other,null,0,RET,$ instanceof LinearObjectiveFunction
LinearConstraint.java,equals,other,null,0,RET,$ instanceof LinearConstraint
SimpleValueChecker.java,SimpleValueChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimpleValueChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimpleValueChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
BrentOptimizer.java,BrentOptimizer,rel,double,0,NumberIsTooSmallException,$ < MIN_RELATIVE_TOLERANCE
BrentOptimizer.java,BrentOptimizer,abs,double,0,NotStrictlyPositiveException,$ <= 0
BrentOptimizer.java,doOptimize,lo,double,1,DEF,$ < hi
BrentOptimizer.java,doOptimize,e,double,1,DEF,FastMath.abs($) > tol1
BrentOptimizer.java,doOptimize,q,double,1,DEF,$ > 0
BrentOptimizer.java,doOptimize,a,double,0,DEF,u - $ < tol2
BrentOptimizer.java,doOptimize,u,double,0,DEF,$ - a < tol2
BrentOptimizer.java,doOptimize,b,double,0,DEF,$ - u < tol2
BrentOptimizer.java,doOptimize,u,double,0,DEF,b - $ < tol2
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ <= m
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ < m
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ < m
BrentOptimizer.java,doOptimize,d,double,1,DEF,FastMath.abs($) < tol1
BrentOptimizer.java,doOptimize,d,double,1,DEF,$ >= 0
BrentOptimizer.java,doOptimize,checker,ConvergenceChecker<UnivariatePointValuePair>,0,RET,$ != null
BrentOptimizer.java,doOptimize,fu,double,1,DEF,$ <= fx
BrentOptimizer.java,doOptimize,u,double,1,DEF,$ < x
BrentOptimizer.java,doOptimize,u,double,1,DEF,$ < x
BrentOptimizer.java,doOptimize,fu,double,1,DEF,$ <= fw
BrentOptimizer.java,doOptimize,fu,double,0,DEF,$ <= fv
BrentOptimizer.java,best,a,UnivariatePointValuePair,0,RET,$ == null
BrentOptimizer.java,best,b,UnivariatePointValuePair,0,RET,$ == null
SimpleUnivariateValueChecker.java,SimpleUnivariateValueChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimpleUnivariateValueChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimpleUnivariateValueChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
BaseAbstractUnivariateOptimizer.java,optimize,f,UnivariateFunction,0,NullArgumentException,$ == null
BaseAbstractUnivariateOptimizer.java,optimize,goalType,GoalType,0,NullArgumentException,$ == null
UnivariateMultiStartOptimizer.java,UnivariateMultiStartOptimizer,optimizer,BaseUnivariateOptimizer<FUNC>,0,NullArgumentException,$ == null
UnivariateMultiStartOptimizer.java,UnivariateMultiStartOptimizer,generator,RandomGenerator,0,NullArgumentException,$ == null
UnivariateMultiStartOptimizer.java,UnivariateMultiStartOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
UnivariateMultiStartOptimizer.java,getOptima,optima,UnivariatePointValuePair[],0,MathIllegalStateException,$ == null
UnivariateMultiStartOptimizer.java,optimize,optima,UnivariatePointValuePair[],0,DEF,$[0] == null
UnivariateMultiStartOptimizer.java,compare,o1,UnivariatePointValuePair,1,RET,$ == null
UnivariateMultiStartOptimizer.java,compare,o2,UnivariatePointValuePair,0,RET,$ == null
BracketFinder.java,BracketFinder,growLimit,double,0,NotStrictlyPositiveException,$ <= 0
BracketFinder.java,BracketFinder,maxEvaluations,int,0,NotStrictlyPositiveException,$ <= 0
BracketFinder.java,search,fA,double,0,DEF,$ < fB
BracketFinder.java,search,fA,double,0,DEF,$ > fB
BracketFinder.java,search,w,double,1,DEF,($ - xC) * (xB - $) > 0
BracketFinder.java,search,xB,double,1,DEF,(w - xC) * ($ - w) > 0
BracketFinder.java,search,xC,double,1,DEF,(w - $) * (xB - w) > 0
BracketFinder.java,search,fW,double,1,DEF,$ < fC
BracketFinder.java,search,fW,double,1,DEF,$ > fC
BracketFinder.java,search,fW,double,0,DEF,$ > fB
BracketFinder.java,search,fW,double,0,DEF,$ < fB
BracketFinder.java,search,w,double,1,DEF,($ - wLim) * (wLim - xC) >= 0
BracketFinder.java,search,xC,double,1,DEF,(w - wLim) * (wLim - $) >= 0
BracketFinder.java,search,wLim,double,1,DEF,(w - $) * ($ - xC) >= 0
BracketFinder.java,search,w,double,1,DEF,($ - wLim) * (xC - $) > 0
BracketFinder.java,search,xC,double,1,DEF,(w - wLim) * ($ - w) > 0
BracketFinder.java,search,wLim,double,1,DEF,(w - $) * (xC - w) > 0
BracketFinder.java,search,fW,double,0,DEF,$ < fC
BracketFinder.java,search,fW,double,0,DEF,$ > fC
BracketFinder.java,search,lo,double,0,DEF,$ > hi
SimpleVectorValueChecker.java,SimpleVectorValueChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimpleVectorValueChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimpleVectorValueChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
HarmonicFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NumberIsTooSmallException,$.length < 4
HarmonicFitter.java,sortObservations,i,int,0,DEF,$-- != 0
HarmonicFitter.java,guessAOmega,c1,double,1,ZeroException,$ / c2 < 0
HarmonicFitter.java,guessAOmega,c2,double,1,ZeroException,c1 / $ < 0
HarmonicFitter.java,guessAOmega,c3,double,1,ZeroException,c2 / $ < 0
HarmonicFitter.java,guessAOmega,c2,double,1,ZeroException,$ / c3 < 0
HarmonicFitter.java,guessAOmega,xRange,double,0,ZeroException,$ == 0
HarmonicFitter.java,guessAOmega,y,double,0,DEF,$ < yMin
HarmonicFitter.java,guessAOmega,y,double,0,DEF,$ > yMax
HarmonicFitter.java,guessAOmega,c2,double,0,MathIllegalStateException,$ == 0
GaussianFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NullArgumentException,$ == null
GaussianFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NumberIsTooSmallException,$.length < 3
GaussianFitter.java,compare,p1,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p2,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p1,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p2,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,interpolateXAtY,idxStep,int,0,ZeroException,$ == 0
GaussianFitter.java,interpolateXAtY,p1,WeightedObservedPoint,0,RET,$.getY() == y
GaussianFitter.java,interpolateXAtY,p2,WeightedObservedPoint,0,RET,$.getY() == y
GaussianFitter.java,getInterpolationPointsForY,idxStep,int,0,ZeroException,$ == 0
GaussianFitter.java,getInterpolationPointsForY,idxStep,int,1,RET,$ < 0
CurveFitter.java,fit,optimizer,MultivariateDifferentiableVectorOptimizer,1,DEF,$ == null
SimplePointChecker.java,SimplePointChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimplePointChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimplePointChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
LeastSquaresConverter.java,LeastSquaresConverter,observations,double[],0,DimensionMismatchException,$.length != weights.length
LeastSquaresConverter.java,value,residuals,double[],0,DimensionMismatchException,$.length != observations.length
LeastSquaresConverter.java,value,weights,double[],1,DEF,$ != null
LeastSquaresConverter.java,value,scale,RealMatrix,1,DEF,$ != null
BaseMultivariateVectorMultiStartOptimizer.java,BaseMultivariateVectorMultiStartOptimizer,optimizer,BaseMultivariateVectorOptimizer<FUNC>,0,NullArgumentException,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,BaseMultivariateVectorMultiStartOptimizer,generator,RandomVectorGenerator,0,NullArgumentException,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,BaseMultivariateVectorMultiStartOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
BaseMultivariateVectorMultiStartOptimizer.java,getOptima,optima,PointVectorValuePair[],0,MathIllegalStateException,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,optimize,optima,PointVectorValuePair[],0,DEF,$[0] == null
BaseMultivariateVectorMultiStartOptimizer.java,compare,o1,PointVectorValuePair,1,RET,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,compare,o2,PointVectorValuePair,0,RET,$ == null
BOBYQAOptimizer.java,bobyqa,lowerDifference,ArrayRealVector,1,DEF,$.getEntry(j) >= -initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,lowerDifference.getEntry($) >= -initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,lowerDifference,ArrayRealVector,1,DEF,$.getEntry(j) >= ZERO
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,lowerDifference.getEntry($) >= ZERO
BOBYQAOptimizer.java,bobyqa,upperDifference,ArrayRealVector,0,DEF,$.getEntry(j) <= initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,j,int,0,DEF,upperDifference.getEntry($) <= initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,upperDifference,ArrayRealVector,1,DEF,$.getEntry(j) <= ZERO
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,upperDifference.getEntry($) <= ZERO
BOBYQAOptimizer.java,bobyqb,trustRegionCenterInterpolationPointIndex,int,0,DEF,$ != kbase
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,bobyqb,crvmin,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,bdtest,double,0,DEF,$ < bdtol
BOBYQAOptimizer.java,bobyqb,bdtest,double,0,DEF,$ < bdtol
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,ntrits,int,1,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,denom,double,0,DEF,$ < cauchy
BOBYQAOptimizer.java,bobyqb,cauchy,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,k,int,0,DEF,$ == trustRegionCenterInterpolationPointIndex
BOBYQAOptimizer.java,bobyqb,temp,double,0,DEF,$ * den > scaden
BOBYQAOptimizer.java,bobyqb,den,double,0,DEF,temp * $ > scaden
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ == j
BOBYQAOptimizer.java,bobyqb,dnorm,double,0,DEF,$ > rho
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,MathIllegalStateException,$ > 0
BOBYQAOptimizer.java,bobyqb,vquad,double,0,MathIllegalStateException,$ >= ZERO
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= ONE_OVER_TEN
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= .7
BOBYQAOptimizer.java,bobyqb,f,double,0,DEF,$ < fopt
BOBYQAOptimizer.java,bobyqb,temp,double,0,DEF,$ * den > scaden
BOBYQAOptimizer.java,bobyqb,den,double,0,DEF,temp * $ > scaden
BOBYQAOptimizer.java,bobyqb,f,double,0,DEF,$ < fopt
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ > 0
BOBYQAOptimizer.java,bobyqb,itest,int,0,DEF,$ >= 3
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < n
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < npt
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < nh
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,sum,double,0,DEF,$ > distsq
BOBYQAOptimizer.java,bobyqb,knew,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,ratio,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,dnorm,double,0,DEF,Math.max(delta, $) > rho
BOBYQAOptimizer.java,bobyqb,delta,double,0,DEF,Math.max($, dnorm) > rho
BOBYQAOptimizer.java,bobyqb,rho,double,0,DEF,$ > stoppingTrustRegionRadius
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= SIXTEEN
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= TWO_HUNDRED_FIFTY
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,fAtInterpolationPoints,ArrayRealVector,0,DEF,$.getEntry(trustRegionCenterInterpolationPointIndex) <= fsave
BOBYQAOptimizer.java,bobyqb,trustRegionCenterInterpolationPointIndex,int,0,DEF,fAtInterpolationPoints.getEntry($) <= fsave
BOBYQAOptimizer.java,altmov,k,int,0,DEF,$ == trustRegionCenterInterpolationPointIndex
BOBYQAOptimizer.java,altmov,tmp,double,1,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,tmp,double,0,DEF,$ < ZERO
BOBYQAOptimizer.java,altmov,k,int,1,DEF,$ == knew
BOBYQAOptimizer.java,altmov,d4,double,0,DEF,d3 * $ < ZERO
BOBYQAOptimizer.java,altmov,d3,double,0,DEF,$ * d4 < ZERO
BOBYQAOptimizer.java,altmov,subd,double,0,DEF,$ > HALF
BOBYQAOptimizer.java,altmov,vlag,double,0,DEF,Math.abs($) < ONE_OVER_FOUR
BOBYQAOptimizer.java,altmov,predsq,double,0,DEF,$ > presav
BOBYQAOptimizer.java,altmov,ibdsav,int,0,DEF,$ < 0
BOBYQAOptimizer.java,altmov,ibdsav,int,0,DEF,$ > 0
BOBYQAOptimizer.java,altmov,glagValue,double,0,DEF,Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), $) > ZERO
BOBYQAOptimizer.java,altmov,i,int,0,DEF,Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,lowerDifference,ArrayRealVector,0,DEF,Math.min(trustRegionCenterOffset.getEntry(i) - $.getEntry(i), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,trustRegionCenterOffset,ArrayRealVector,0,DEF,Math.min($.getEntry(i) - lowerDifference.getEntry(i), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,glagValue,double,0,DEF,Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), $) < ZERO
BOBYQAOptimizer.java,altmov,upperDifference,ArrayRealVector,0,DEF,Math.max(trustRegionCenterOffset.getEntry(i) - $.getEntry(i), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,i,int,0,DEF,Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,trustRegionCenterOffset,ArrayRealVector,0,DEF,Math.max($.getEntry(i) - upperDifference.getEntry(i), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,ggfree,double,0,RET,$ == ZERO
BOBYQAOptimizer.java,altmov,tmp1,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,0,DEF,$.getEntry(i) == bigstp
BOBYQAOptimizer.java,altmov,i,int,0,DEF,work1.getEntry($) == bigstp
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,1,DEF,$.getEntry(i) == bigstp
BOBYQAOptimizer.java,altmov,i,int,1,DEF,work1.getEntry($) == bigstp
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,altmov,i,int,1,DEF,work1.getEntry($) == ZERO
BOBYQAOptimizer.java,altmov,glagValue,double,1,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,iflag,int,0,DEF,$ == 1
BOBYQAOptimizer.java,altmov,curv,double,1,DEF,$ > -gw
BOBYQAOptimizer.java,altmov,iflag,int,1,DEF,$ == 0
BOBYQAOptimizer.java,altmov,csave,double,0,DEF,$ > cauchy
BOBYQAOptimizer.java,prelim,nfm,int,1,DEF,$ >= 1
BOBYQAOptimizer.java,prelim,nfm,int,1,DEF,$ <= n
BOBYQAOptimizer.java,prelim,upperDifference,ArrayRealVector,0,DEF,$.getEntry(nfmm) == ZERO
BOBYQAOptimizer.java,prelim,nfmm,int,0,DEF,upperDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,nfm,int,0,DEF,$ > n
BOBYQAOptimizer.java,prelim,lowerDifference,ArrayRealVector,0,DEF,$.getEntry(nfxm) == ZERO
BOBYQAOptimizer.java,prelim,nfxm,int,0,DEF,lowerDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,upperDifference,ArrayRealVector,0,DEF,$.getEntry(nfxm) == ZERO
BOBYQAOptimizer.java,prelim,nfxm,int,0,DEF,upperDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,ipt,int,0,DEF,$ > n
BOBYQAOptimizer.java,prelim,numEval,int,1,DEF,$ == 1
BOBYQAOptimizer.java,prelim,numEval,int,1,DEF,$ >= 2
BOBYQAOptimizer.java,prelim,stepb,double,0,DEF,stepa * $ < ZERO
BOBYQAOptimizer.java,prelim,stepa,double,0,DEF,$ * stepb < ZERO
BOBYQAOptimizer.java,prelim,trustRegionCenterInterpolationPointIndex,int,0,DEF,$ == nfm
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,gradientAtTrustRegionCenter.getEntry($) >= ZERO
BOBYQAOptimizer.java,trsbox,gradientAtTrustRegionCenter,ArrayRealVector,0,DEF,$.getEntry(i) >= ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,gradientAtTrustRegionCenter.getEntry($) <= ZERO
BOBYQAOptimizer.java,trsbox,gradientAtTrustRegionCenter,ArrayRealVector,0,DEF,$.getEntry(i) <= ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,beta,double,1,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,stepsq,double,0,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,beta,double,0,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,resid,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,ds,double,1,DEF,$ < ZERO
BOBYQAOptimizer.java,trsbox,shs,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,0,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,s.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,1,DEF,$.getEntry(i) > ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,s.getEntry($) > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ < stplen
BOBYQAOptimizer.java,trsbox,stplen,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ == -1
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,crvmin,double,0,DEF,$ == MINUS_ONE
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,0,DEF,$.getEntry(iact) < ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,s.getEntry($) < ZERO
BOBYQAOptimizer.java,trsbox,delsq,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,stplen,double,0,DEF,$ < blen
BOBYQAOptimizer.java,trsbox,iterc,int,0,DEF,$ == itermax
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,tempa,double,1,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,tempb,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,angbd * $ > tempa
BOBYQAOptimizer.java,trsbox,angbd,double,0,DEF,$ * temp > tempa
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,angbd * $ > tempb
BOBYQAOptimizer.java,trsbox,angbd,double,0,DEF,$ * temp > tempb
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,rednew,double,1,DEF,$ > redmax
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ < 0
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ < iu
BOBYQAOptimizer.java,trsbox,sdec,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ == iu
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == MINUS_ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == MINUS_ONE
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,trsbox,k,int,0,DEF,modelSecondDerivativesParameters.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,modelSecondDerivativesParameters,ArrayRealVector,0,DEF,$.getEntry(k) != ZERO
BOBYQAOptimizer.java,trsbox,crvmin,double,0,DEF,$ != ZERO
BOBYQAOptimizer.java,trsbox,iterc,int,0,DEF,$ > itcsav
BOBYQAOptimizer.java,update,d1,double,0,DEF,Math.abs($) > ztest
BOBYQAOptimizer.java,update,i,int,0,DEF,$ >= npt
BOBYQAOptimizer.java,setup,dimension,int,0,NumberIsTooSmallException,$ < MINIMUM_PROBLEM_DIMENSION
BOBYQAOptimizer.java,setup,minDiff,double,0,DEF,$ < requiredMinDiff
MultivariateFunctionPenaltyAdapter.java,MultivariateFunctionPenaltyAdapter,lower,double[],0,DimensionMismatchException,$.length != upper.length
MultivariateFunctionPenaltyAdapter.java,MultivariateFunctionPenaltyAdapter,lower,double[],0,DimensionMismatchException,$.length != scale.length
PowellOptimizer.java,PowellOptimizer,rel,double,0,NumberIsTooSmallException,$ < MIN_RELATIVE_TOLERANCE
PowellOptimizer.java,PowellOptimizer,abs,double,0,NotStrictlyPositiveException,$ <= 0
PowellOptimizer.java,doOptimize,fX2,double,0,DEF,($ - fVal) > delta
PowellOptimizer.java,doOptimize,fVal,double,0,DEF,(fX2 - $) > delta
PowellOptimizer.java,doOptimize,checker,ConvergenceChecker<PointValuePair>,0,DEF,$ != null
PowellOptimizer.java,doOptimize,goal,GoalType,1,RET,$ == GoalType.MINIMIZE
PowellOptimizer.java,doOptimize,fX,double,0,DEF,$ > fX2
PowellOptimizer.java,doOptimize,t,double,0,DEF,$ < 0.0
MultivariateFunctionMappingAdapter.java,MultivariateFunctionMappingAdapter,lower,double[],0,DimensionMismatchException,$.length != upper.length
MultiDirectionalSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(reflected, best) < 0
MultiDirectionalSimplex.java,iterate,reflected,PointValuePair,0,RET,comparator.compare($, best) < 0
MultiDirectionalSimplex.java,iterate,best,PointValuePair,0,RET,comparator.compare(reflected, $) < 0
MultiDirectionalSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,DEF,$.compare(reflected, expanded) <= 0
MultiDirectionalSimplex.java,iterate,expanded,PointValuePair,0,DEF,comparator.compare(reflected, $) <= 0
MultiDirectionalSimplex.java,iterate,reflected,PointValuePair,0,DEF,comparator.compare($, expanded) <= 0
AbstractSimplex.java,AbstractSimplex,steps,double[],0,NullArgumentException,$ == null
AbstractSimplex.java,AbstractSimplex,steps,double[],0,ZeroException,$.length == 0
AbstractSimplex.java,AbstractSimplex,j,int,0,ZeroException,steps[$] == 0
AbstractSimplex.java,AbstractSimplex,steps,double[],0,ZeroException,$[j] == 0
AbstractSimplex.java,AbstractSimplex,referenceSimplex,double[][],0,NotStrictlyPositiveException,$.length <= 0
AbstractSimplex.java,AbstractSimplex,refI,double[],0,DimensionMismatchException,$.length != dimension
AbstractSimplex.java,AbstractSimplex,i,int,0,DEF,$ > 0
AbstractSimplex.java,build,dimension,int,0,DimensionMismatchException,$ != startPoint.length
AbstractSimplex.java,replaceWorstPoint,comparator,Comparator<PointValuePair>,0,DEF,$.compare(simplex[i], pointValuePair) > 0
AbstractSimplex.java,replaceWorstPoint,pointValuePair,PointValuePair,0,DEF,comparator.compare(simplex[i], $) > 0
AbstractSimplex.java,replaceWorstPoint,simplex,PointValuePair[],0,DEF,comparator.compare($[i], pointValuePair) > 0
AbstractSimplex.java,replaceWorstPoint,i,int,0,DEF,comparator.compare(simplex[$], pointValuePair) > 0
AbstractSimplex.java,getPoint,index,int,0,OutOfRangeException,$ < 0
AbstractSimplex.java,getPoint,index,int,0,OutOfRangeException,$ >= simplex.length
AbstractSimplex.java,setPoint,index,int,0,OutOfRangeException,$ < 0
AbstractSimplex.java,setPoint,index,int,0,OutOfRangeException,$ >= simplex.length
AbstractSimplex.java,setPoints,points,PointValuePair[],0,DimensionMismatchException,$.length != simplex.length
BaseAbstractMultivariateVectorOptimizer.java,optimizeInternal,f,FUNC,0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimizeInternal,t,double[],0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimizeInternal,w,double[],0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimizeInternal,startPoint,double[],0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimizeInternal,t,double[],0,DimensionMismatchException,$.length != w.length
BaseAbstractMultivariateVectorOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof Target
BaseAbstractMultivariateVectorOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof Weight
BaseAbstractMultivariateVectorOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof InitialGuess
BaseAbstractMultivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof InitialGuess
BaseAbstractMultivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof SimpleBounds
BaseAbstractMultivariateOptimizer.java,checkParameters,start,double[],0,NumberIsTooLargeException,$ != null
BaseAbstractMultivariateOptimizer.java,checkParameters,lowerBound,double[],0,NumberIsTooSmallException,$ != null
BaseAbstractMultivariateOptimizer.java,checkParameters,lowerBound,double[],0,DimensionMismatchException,$.length != dim
BaseAbstractMultivariateOptimizer.java,checkParameters,v,double,0,NumberIsTooSmallException,$ < lo
BaseAbstractMultivariateOptimizer.java,checkParameters,upperBound,double[],0,NumberIsTooLargeException,$ != null
BaseAbstractMultivariateOptimizer.java,checkParameters,upperBound,double[],0,DimensionMismatchException,$.length != dim
BaseAbstractMultivariateOptimizer.java,checkParameters,v,double,0,NumberIsTooLargeException,$ > hi
BaseAbstractMultivariateOptimizer.java,checkParameters,lowerBound,double[],0,DEF,$ == null
BaseAbstractMultivariateOptimizer.java,checkParameters,upperBound,double[],0,DEF,$ == null
CMAESOptimizer.java,Sigma,s,double[],0,NotPositiveException,$[i] < 0
CMAESOptimizer.java,Sigma,i,int,0,NotPositiveException,s[$] < 0
CMAESOptimizer.java,PopulationSize,size,int,0,NotStrictlyPositiveException,$ <= 0
CMAESOptimizer.java,doOptimize,diagonalOnly,int,1,DEF,$ <= 0
CMAESOptimizer.java,doOptimize,i,int,0,DEF,$ >= checkFeasableCount
CMAESOptimizer.java,doOptimize,diagonalOnly,int,1,DEF,$ <= 0
CMAESOptimizer.java,doOptimize,bestValue,double,0,DEF,$ > bestFitness
CMAESOptimizer.java,doOptimize,lastResult,PointValuePair,0,DEF,$ != null
CMAESOptimizer.java,doOptimize,stopFitness,double,0,DEF,$ != 0
CMAESOptimizer.java,doOptimize,sigma,double,0,DEF,$ * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX
CMAESOptimizer.java,doOptimize,sqrtDiagC,double[],0,DEF,sigma * Math.max(Math.abs(pcCol[i]), $[i]) > stopTolX
CMAESOptimizer.java,doOptimize,pcCol,double[],0,DEF,sigma * Math.max(Math.abs($[i]), sqrtDiagC[i]) > stopTolX
CMAESOptimizer.java,doOptimize,i,int,0,DEF,sigma * Math.max(Math.abs(pcCol[$]), sqrtDiagC[$]) > stopTolX
CMAESOptimizer.java,doOptimize,sigma,double,0,DEF,$ * sqrtDiagC[i] > stopTolUpX
CMAESOptimizer.java,doOptimize,sqrtDiagC,double[],0,DEF,sigma * $[i] > stopTolUpX
CMAESOptimizer.java,doOptimize,i,int,0,DEF,sigma * sqrtDiagC[$] > stopTolUpX
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > 2
CMAESOptimizer.java,doOptimize,worstFitness,double,0,DEF,Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,bestFitness,double,0,DEF,Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > fitnessHistory.length
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,historyWorst-$ < stopTolHistFun
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,$-historyBest < stopTolHistFun
CMAESOptimizer.java,doOptimize,diagD,RealMatrix,0,DEF,max($)/min($) > 1e7
CMAESOptimizer.java,doOptimize,lastResult,PointValuePair,0,DEF,$ != null
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > 2
CMAESOptimizer.java,doOptimize,bestFitness,double,0,DEF,Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
CMAESOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof Sigma
CMAESOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof PopulationSize
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,OutOfRangeException,$ != null
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,DimensionMismatchException,$.length != init.length
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,NotPositiveException,$[i] < 0
CMAESOptimizer.java,checkParameters,i,int,0,NotPositiveException,inputSigma[$] < 0
CMAESOptimizer.java,initializeCMA,lambda,int,0,DEF,$ <= 0
CMAESOptimizer.java,updateCovarianceDiagonalOnly,diagonalOnly,int,0,DEF,$ > 1
CMAESOptimizer.java,updateCovarianceDiagonalOnly,iterations,int,0,DEF,$ > diagonalOnly
CMAESOptimizer.java,updateCovariance,ccovmu,double,0,DEF,ccov1 + $ > 0
CMAESOptimizer.java,updateCovariance,ccov1,double,0,DEF,$ + ccovmu > 0
CMAESOptimizer.java,updateCovariance,negccov,double,0,DEF,$ > negcovMax
CMAESOptimizer.java,updateBD,negccov,double,0,DEF,ccov1 + ccovmu + $ > 0
CMAESOptimizer.java,updateBD,ccovmu,double,0,DEF,ccov1 + $ + negccov > 0
CMAESOptimizer.java,updateBD,ccov1,double,0,DEF,$ + ccovmu + negccov > 0
CMAESOptimizer.java,updateBD,negccov,double,0,DEF,(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,ccovmu,double,0,DEF,(iterations % 1. / (ccov1 + $ + negccov) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,ccov1,double,0,DEF,(iterations % 1. / ($ + ccovmu + negccov) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,dimension,int,0,DEF,(iterations % 1. / (ccov1 + ccovmu + negccov) / $ / 10.) < 1
CMAESOptimizer.java,updateBD,iterations,int,0,DEF,($ % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,diagD,RealMatrix,0,DEF,min($) <= 0
CMAESOptimizer.java,updateBD,i,int,0,DEF,diagD.getEntry($, 0) < 0
CMAESOptimizer.java,updateBD,diagD,RealMatrix,0,DEF,$.getEntry(i, 0) < 0
CMAESOptimizer.java,equals,other,null,0,RET,$ instanceof DoubleIndex
CMAESOptimizer.java,diag,m,RealMatrix,1,RET,$.getColumnDimension() == 1
CMAESOptimizer.java,eye,r,int,0,DEF,$ < m
CMAESOptimizer.java,max,max,double,0,DEF,$ < e
CMAESOptimizer.java,min,min,double,0,DEF,$ > e
SimplexOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof AbstractSimplex
SimplexOptimizer.java,doOptimize,simplex,AbstractSimplex,0,NullArgumentException,$ == null
SimplexOptimizer.java,doOptimize,iteration,int,0,RET,$ > 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(best, reflected) <= 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare(best, $) <= 0
NelderMeadSimplex.java,iterate,best,PointValuePair,1,DEF,comparator.compare($, reflected) <= 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(reflected, secondBest) < 0
NelderMeadSimplex.java,iterate,secondBest,PointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare($, secondBest) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(reflected, best) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare($, best) < 0
NelderMeadSimplex.java,iterate,best,PointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(expanded, reflected) < 0
NelderMeadSimplex.java,iterate,expanded,PointValuePair,1,DEF,comparator.compare($, reflected) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare(expanded, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,RET,$.compare(reflected, worst) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,RET,comparator.compare($, worst) < 0
NelderMeadSimplex.java,iterate,worst,PointValuePair,1,RET,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(outContracted, reflected) <= 0
NelderMeadSimplex.java,iterate,outContracted,PointValuePair,0,RET,comparator.compare($, reflected) <= 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,0,RET,comparator.compare(outContracted, $) <= 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(inContracted, worst) < 0
NelderMeadSimplex.java,iterate,worst,PointValuePair,0,RET,comparator.compare(inContracted, $) < 0
NelderMeadSimplex.java,iterate,inContracted,PointValuePair,0,RET,comparator.compare($, worst) < 0
NonLinearConjugateGradientOptimizer.java,setInitialStep,initialStep,double,1,DEF,$ <= 0
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,previous,PointValuePair,0,RET,$ != null
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,updateFormula,ConjugateGradientFormula,1,DEF,$ == ConjugateGradientFormula.FLETCHER_REEVES
NonLinearConjugateGradientOptimizer.java,doOptimize,iter,int,1,DEF,$ % n == 0
NonLinearConjugateGradientOptimizer.java,doOptimize,n,int,1,DEF,iter % $ == 0
NonLinearConjugateGradientOptimizer.java,doOptimize,beta,double,1,DEF,$ < 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yA,double,0,RET,$ * yB <= 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yB,double,0,RET,yA * $ <= 0
LevenbergMarquardtOptimizer.java,doOptimize,dk,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,currentCost,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,s,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtOptimizer.java,doOptimize,currentCost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtOptimizer.java,doOptimize,currentCost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtOptimizer.java,doOptimize,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtOptimizer.java,doOptimize,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,RET,$ >= 1.0e-4
LevenbergMarquardtOptimizer.java,doOptimize,checker,ConvergenceChecker<PointVectorValuePair>,0,RET,$ != null
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,0,RET,FastMath.abs($) <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,1,ConvergenceException,FastMath.abs($) <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,1,ConvergenceException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,ConvergenceException,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,ConvergenceException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtOptimizer.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtOptimizer.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtOptimizer.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtOptimizer.java,qrDecomposition,ak2,double,0,RET,$ <= qrRankingThreshold
AbstractLeastSquaresOptimizer.java,computeWeightedJacobian,dsValue,DerivativeStructure[],0,DimensionMismatchException,$.length != nR
AbstractLeastSquaresOptimizer.java,guessParametersErrors,rows,int,0,NumberIsTooSmallException,$ <= cols
AbstractLeastSquaresOptimizer.java,computeResiduals,objectiveValue,double[],0,DimensionMismatchException,$.length != target.length
AbstractLeastSquaresOptimizer.java,squareRoot,m,null,1,RET,$ instanceof DiagonalMatrix
GaussNewtonOptimizer.java,doOptimize,checker,ConvergenceChecker<PointVectorValuePair>,0,NullArgumentException,$ == null
GaussNewtonOptimizer.java,doOptimize,previous,PointVectorValuePair,0,RET,$ != null
BaseMultivariateMultiStartOptimizer.java,BaseMultivariateMultiStartOptimizer,optimizer,BaseMultivariateOptimizer<FUNC>,0,NullArgumentException,$ == null
BaseMultivariateMultiStartOptimizer.java,BaseMultivariateMultiStartOptimizer,generator,RandomVectorGenerator,0,NullArgumentException,$ == null
BaseMultivariateMultiStartOptimizer.java,BaseMultivariateMultiStartOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
BaseMultivariateMultiStartOptimizer.java,getOptima,optima,PointValuePair[],0,MathIllegalStateException,$ == null
BaseMultivariateMultiStartOptimizer.java,optimize,optima,PointValuePair[],0,DEF,$[0] == null
BaseMultivariateMultiStartOptimizer.java,compare,o1,PointValuePair,1,RET,$ == null
BaseMultivariateMultiStartOptimizer.java,compare,o2,PointValuePair,0,RET,$ == null
Beta.java,regularizedBeta,x,double,1,DEF,$ < 0
Beta.java,regularizedBeta,x,double,1,DEF,$ > 1
Beta.java,regularizedBeta,a,double,1,DEF,$ <= 0.0
Beta.java,regularizedBeta,b,double,1,DEF,$ <= 0.0
Beta.java,getB,n,int,1,DEF,$ % 2 == 0
Beta.java,logGammaSum,a,double,0,OutOfRangeException,$ < 1.0
Beta.java,logGammaSum,a,double,0,OutOfRangeException,$ > 2.0
Beta.java,logGammaSum,b,double,0,OutOfRangeException,$ < 1.0
Beta.java,logGammaSum,b,double,0,OutOfRangeException,$ > 2.0
Beta.java,logGammaSum,x,double,1,RET,$ <= 0.5
Beta.java,logGammaSum,x,double,1,RET,$ <= 1.5
Beta.java,logGammaMinusLogGammaSum,a,double,0,NumberIsTooSmallException,$ < 0.0
Beta.java,logGammaMinusLogGammaSum,b,double,0,NumberIsTooSmallException,$ < 10.0
Beta.java,logGammaMinusLogGammaSum,a,double,1,DEF,$ <= b
Beta.java,deltaMinusDeltaSum,a,double,0,OutOfRangeException,$ < 0
Beta.java,deltaMinusDeltaSum,a,double,0,OutOfRangeException,$ > b
Beta.java,deltaMinusDeltaSum,b,double,0,NumberIsTooSmallException,$ < 10
Beta.java,sumDeltaMinusDeltaSum,p,double,0,NumberIsTooSmallException,$ < 10.0
Beta.java,sumDeltaMinusDeltaSum,q,double,0,NumberIsTooSmallException,$ < 10.0
Beta.java,logBeta,p,double,0,RET,$ <= 0.0
Beta.java,logBeta,q,double,0,RET,$ <= 0.0
Beta.java,logBeta,a,double,1,RET,$ >= 10.0
Beta.java,logBeta,u,double,1,RET,$ <= v
Beta.java,logBeta,a,double,1,RET,$ > 2.0
Beta.java,logBeta,b,double,1,RET,$ > 1000.0
Beta.java,logBeta,b,double,1,RET,$ < 10.0
Beta.java,logBeta,a,double,1,RET,$ >= 1.0
Beta.java,logBeta,b,double,1,RET,$ > 2.0
Beta.java,logBeta,b,double,1,RET,$ < 10.0
Beta.java,logBeta,b,double,1,RET,$ >= 10.0
Gamma.java,logGamma,x,double,1,DEF,$ <= 0.0
Gamma.java,logGamma,x,double,1,RET,$ < 0.5
Gamma.java,logGamma,x,double,1,RET,$ <= 2.5
Gamma.java,logGamma,x,double,1,RET,$ <= 8.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaP,n,double,1,MaxCountExceededException,$ >= maxIterations
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ == 0.0
Gamma.java,digamma,x,double,0,RET,$ > 0
Gamma.java,digamma,x,double,0,RET,$ <= S_LIMIT
Gamma.java,digamma,x,double,0,RET,$ >= C_LIMIT
Gamma.java,trigamma,x,double,0,RET,$ > 0
Gamma.java,trigamma,x,double,0,RET,$ <= S_LIMIT
Gamma.java,trigamma,x,double,0,RET,$ >= C_LIMIT
Gamma.java,invGamma1pm1,x,double,0,NumberIsTooSmallException,$ < -0.5
Gamma.java,invGamma1pm1,x,double,0,NumberIsTooLargeException,$ > 1.5
Gamma.java,invGamma1pm1,t,double,1,DEF,$ < 0.0
Gamma.java,invGamma1pm1,x,double,1,DEF,$ > 0.5
Gamma.java,invGamma1pm1,x,double,1,DEF,$ > 0.5
Gamma.java,logGamma1p,x,double,0,NumberIsTooSmallException,$ < -0.5
Gamma.java,logGamma1p,x,double,0,NumberIsTooLargeException,$ > 1.5
Gamma.java,gamma,x,double,0,RET,$ <= 0.0
Gamma.java,gamma,absX,double,1,DEF,$ <= 20.0
Gamma.java,gamma,x,double,1,DEF,$ >= 1.0
Gamma.java,gamma,x,double,1,DEF,$ > 0.0
Erf.java,erf,x,double,0,RET,FastMath.abs($) > 40
Erf.java,erfc,x,double,0,RET,FastMath.abs($) > 40
Erf.java,erf,x1,double,0,RET,$ > x2
Erf.java,erfInv,w,double,1,DEF,$ < 6.25
Erf.java,erfInv,w,double,1,DEF,$ < 16.0
VectorFormat.java,format,i,int,0,DEF,$ > 0
VectorFormat.java,parseCoordinates,i,int,0,RET,$ > 0
VectorFormat.java,parseCoordinates,c,Number,0,RET,$ == null
Segment.java,distance,r,double,1,RET,$ < 0
Segment.java,distance,r,double,1,RET,$ > 1
Line.java,reset,d,double,1,DEF,$ == 0.0
Line.java,revertSelf,angle,double,1,DEF,$ < FastMath.PI
Line.java,intersection,d,double,0,RET,FastMath.abs($) < 1.0e-10
Line.java,LineTransform,c11,double,0,MathIllegalArgumentException,FastMath.abs($) < 1.0e-20
SubLine.java,side,crossing,Vector2D,0,RET,$ == null
SubLine.java,split,crossing,Vector2D,0,RET,$ == null
PolygonsSet.java,verticesToTree,n,int,0,RET,$ == 0
PolygonsSet.java,verticesToTree,line,Line,0,DEF,$ == null
PolygonsSet.java,verticesToTree,vertex,Vertex,0,DEF,$ != start
PolygonsSet.java,verticesToTree,vertex,Vertex,0,DEF,$ != end
PolygonsSet.java,verticesToTree,vertex,Vertex,0,DEF,FastMath.abs(line.getOffset($.getLocation())) <= hyperplaneThickness
PolygonsSet.java,verticesToTree,line,Line,0,DEF,FastMath.abs($.getOffset(vertex.getLocation())) <= hyperplaneThickness
PolygonsSet.java,insertEdges,inserted,Edge,1,DEF,$.getNode() == null
PolygonsSet.java,insertEdges,inserted,Edge,0,RET,$ == null
PolygonsSet.java,insertEdges,parent,BSPTree<Euclidean2D>,1,DEF,$ == null
PolygonsSet.java,insertEdges,edge,Edge,0,DEF,$ != inserted
PolygonsSet.java,insertEdges,endSide,Side,1,DEF,$ == Side.MINUS
PolygonsSet.java,insertEdges,endSide,Side,1,DEF,$ == Side.PLUS
PolygonsSet.java,insertEdges,endSide,Side,1,DEF,$ == Side.PLUS
PolygonsSet.java,insertEdges,endSide,Side,0,DEF,$ == Side.MINUS
PolygonsSet.java,sharedLineWith,line1,Line,0,RET,$ == line2
PolygonsSet.java,computeGeometricalProperties,v,Vector2D[][],1,DEF,$.length == 0
PolygonsSet.java,computeGeometricalProperties,tree,BSPTree<Euclidean2D>,1,DEF,$.getCut() == null
PolygonsSet.java,computeGeometricalProperties,v,Vector2D[][],1,DEF,$[0][0] == null
PolygonsSet.java,computeGeometricalProperties,sum,double,1,DEF,$ < 0
PolygonsSet.java,getVertices,vertices,Vector2D[][],0,DEF,$ == null
PolygonsSet.java,getVertices,loop,List<ComparableSegment>,0,DEF,$ != null
PolygonsSet.java,getVertices,loop,List<ComparableSegment>,1,DEF,$.size() < 2
PolygonsSet.java,getVertices,loop,List<ComparableSegment>,1,DEF,$.get(0).getStart() == null
PolygonsSet.java,getVertices,j,int,0,DEF,$ == 0
PolygonsSet.java,followLoop,distance,double,0,DEF,$ < selectedDistance
PolygonsSet.java,followLoop,selectedDistance,double,0,RET,$ > 1.0e-10
PolygonsSet.java,followLoop,loop,ArrayList<ComparableSegment>,0,RET,$.size() == 2
PolygonsSet.java,followLoop,end,Vector2D,0,MathInternalError,$ == null
PolygonsSet.java,equals,other,null,1,RET,$ instanceof ComparableSegment
PolygonsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean2D>,0,DEF,$.getPlusOutside() != null
PolygonsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean2D>,0,DEF,$.getPlusInside() != null
Vector2D.java,Vector2D,v,double[],0,DimensionMismatchException,$.length != 2
Vector2D.java,normalize,s,double,0,MathArithmeticException,$ == 0
Vector2D.java,equals,other,null,0,RET,$ instanceof Vector2D
Vector2DFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
Vector2DFormat.java,parse,coordinates,double[],0,RET,$ == null
NestedLoops.java,NestedLoops,loop,Vector2D[],0,MathIllegalArgumentException,$[0] == null
Vector1DFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
Vector1DFormat.java,parse,coordinates,double[],0,RET,$ == null
Vector1D.java,normalize,s,double,0,MathArithmeticException,$ == 0
Vector1D.java,equals,other,null,0,RET,$ instanceof Vector1D
IntervalsSet.java,buildTree,lower,double,0,RET,$ < 0
IntervalsSet.java,buildTree,upper,double,0,RET,$ > 0
IntervalsSet.java,buildTree,upper,double,0,RET,$ > 0
IntervalsSet.java,computeGeometricalProperties,size,double,1,DEF,$ >= Precision.SAFE_MIN
IntervalsSet.java,recurseList,node,BSPTree<Euclidean1D>,1,DEF,$.getCut() == null
IntervalsSet.java,recurseList,loc,Vector1D,0,DEF,checkPoint(low, $) == Location.INSIDE
IntervalsSet.java,recurseList,low,BSPTree<Euclidean1D>,0,DEF,checkPoint($, loc) == Location.INSIDE
IntervalsSet.java,recurseList,loc,Vector1D,0,DEF,checkPoint(high, $) == Location.INSIDE
IntervalsSet.java,recurseList,high,BSPTree<Euclidean1D>,0,DEF,checkPoint($, loc) == Location.INSIDE
SubPlane.java,side,inter,Line,0,RET,$ == null
SubPlane.java,side,otherPlane,Plane,0,DEF,crossP.dotProduct($.getNormal()) < 0
SubPlane.java,side,crossP,Vector3D,0,DEF,$.dotProduct(otherPlane.getNormal()) < 0
SubPlane.java,split,inter,Line,0,RET,$ == null
SubPlane.java,split,otherPlane,Plane,0,DEF,crossP.dotProduct($.getNormal()) < 0
SubPlane.java,split,crossP,Vector3D,0,DEF,$.dotProduct(otherPlane.getNormal()) < 0
SphericalCoordinates.java,computeJacobian,jacobian,double[][],0,DEF,$ == null
SphericalCoordinates.java,computeHessians,rHessian,double[][],0,DEF,$ == null
Line.java,reset,norm2,double,0,MathIllegalArgumentException,$ == 0.0
Line.java,distance,n,double,0,RET,$ < Precision.SAFE_MIN
Line.java,closestPoint,n,double,0,RET,$ < Precision.EPSILON
Vector3DFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
Vector3DFormat.java,parse,coordinates,double[],0,RET,$ == null
Vector3D.java,Vector3D,v,double[],0,DimensionMismatchException,$.length != 3
Vector3D.java,normalize,s,double,0,MathArithmeticException,$ == 0
Vector3D.java,orthogonal,threshold,double,0,MathArithmeticException,$ == 0
Vector3D.java,orthogonal,x,double,1,RET,FastMath.abs($) <= threshold
Vector3D.java,orthogonal,y,double,0,RET,FastMath.abs($) <= threshold
Vector3D.java,angle,normProduct,double,0,MathArithmeticException,$ == 0
Vector3D.java,angle,dot,double,0,RET,$ < -threshold
Vector3D.java,angle,dot,double,0,RET,$ > threshold
Vector3D.java,angle,dot,double,0,RET,$ >= 0
Vector3D.java,equals,other,null,0,RET,$ instanceof Vector3D
OutlineExtractor.java,getOutline,end,int,0,DEF,$ != rawLoop.length
OutlineExtractor.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusOutside() != null
OutlineExtractor.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusInside() != null
OutlineExtractor.java,addContribution,scal,double,0,DEF,FastMath.abs($) > 1.0e-3
OutlineExtractor.java,addContribution,scal,double,0,DEF,$ < 0
OutlineExtractor.java,addContribution,loop,Vector2D[],1,DEF,$[0] == null
OutlineExtractor.java,addContribution,previous,int,0,DEF,$ != 1
PolyhedronsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusOutside() != null
PolyhedronsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusInside() != null
PolyhedronsSet.java,recurseFirstIntersection,cut,SubHyperplane<Euclidean3D>,0,RET,$ == null
PolyhedronsSet.java,recurseFirstIntersection,offset,double,1,DEF,$ < 0
PolyhedronsSet.java,recurseFirstIntersection,facet,SubHyperplane<Euclidean3D>,0,RET,$ != null
PolyhedronsSet.java,recurseFirstIntersection,crossed,SubHyperplane<Euclidean3D>,0,RET,$ != null
PolyhedronsSet.java,recurseFirstIntersection,hit3D,Vector3D,0,RET,$ != null
PolyhedronsSet.java,recurseFirstIntersection,facet,SubHyperplane<Euclidean3D>,0,RET,$ != null
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,$.getPlusOutside() != null
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,((SubPlane) $.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
PolyhedronsSet.java,boundaryFacet,point2D,Vector2D,0,RET,((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint($) == Location.INSIDE
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,$.getPlusInside() != null
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,((SubPlane) $.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
PolyhedronsSet.java,boundaryFacet,point2D,Vector2D,0,RET,((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint($) == Location.INSIDE
PolyhedronsSet.java,apply,original,Hyperplane<Euclidean3D>,0,DEF,$ != cachedOriginal
PolyhedronsSet.java,apply,original,Hyperplane<Euclidean3D>,0,DEF,$ != cachedOriginal
Plane.java,setNormal,norm,double,0,MathArithmeticException,$ < 1.0e-10
Plane.java,intersection,dot,double,0,RET,FastMath.abs($) < 1.0e-10
Plane.java,intersection,direction,Vector3D,0,RET,$.getNorm() < 1.0e-10
Plane.java,intersection,determinant,double,0,RET,FastMath.abs($) < 1.0e-10
FieldRotation.java,FieldRotation,norm,T,0,MathIllegalArgumentException,$.getReal() == 0
FieldRotation.java,FieldRotation,m,T[][],0,NotARotationMatrixException,$.length != 3
FieldRotation.java,FieldRotation,m,T[][],0,NotARotationMatrixException,$[0].length != 3
FieldRotation.java,FieldRotation,m,T[][],0,NotARotationMatrixException,$[1].length != 3
FieldRotation.java,FieldRotation,m,T[][],0,NotARotationMatrixException,$[2].length != 3
FieldRotation.java,FieldRotation,det,T,0,NotARotationMatrixException,$.getReal() < 0.0
FieldRotation.java,FieldRotation,normProduct,T,0,MathArithmeticException,$.getReal() == 0
FieldRotation.java,mat2quat,s,T,1,DEF,$.getReal() > -0.19
FieldRotation.java,mat2quat,s,T,1,DEF,$.getReal() > -0.19
FieldRotation.java,mat2quat,s,T,1,DEF,$.getReal() > -0.19
FieldRotation.java,getAxis,squaredSine,T,1,RET,$.getReal() == 0
FieldRotation.java,getAxis,q0,T,0,RET,$.getReal() < 0
FieldRotation.java,getAngle,q0,T,1,RET,$.getReal() < -0.1
FieldRotation.java,getAngle,q0,T,1,RET,$.getReal() > 0.1
FieldRotation.java,getAngle,q0,T,0,RET,$.getReal() < 0
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYZ
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZY
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXZ
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZX
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXY
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZYX
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYX
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZX
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getX().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXY
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZY
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getY().getReal() > 0.9999999999
FieldRotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXZ
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() > 0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() < -0.9999999999
FieldRotation.java,getAngles,v2,FieldVector3D<T>,0,CardanEulerSingularityException,$.getZ().getReal() > 0.9999999999
FieldRotation.java,orthogonalizeMatrix,fn1,double,0,RET,FastMath.abs($ - fn) <= threshold
FieldRotation.java,orthogonalizeMatrix,fn,double,0,RET,FastMath.abs(fn1 - $) <= threshold
FieldVector3D.java,FieldVector3D,v,T[],0,DimensionMismatchException,$.length != 3
FieldVector3D.java,normalize,s,T,0,MathArithmeticException,$.getReal() == 0
FieldVector3D.java,orthogonal,threshold,double,0,MathArithmeticException,$ == 0
FieldVector3D.java,orthogonal,x,T,1,RET,FastMath.abs($.getReal()) <= threshold
FieldVector3D.java,orthogonal,y,T,1,RET,FastMath.abs($.getReal()) <= threshold
FieldVector3D.java,angle,normProduct,T,0,MathArithmeticException,$.getReal() == 0
FieldVector3D.java,angle,dot,T,0,RET,$.getReal() < -threshold
FieldVector3D.java,angle,dot,T,0,RET,$.getReal() > threshold
FieldVector3D.java,angle,dot,T,0,RET,$.getReal() >= 0
FieldVector3D.java,angle,normProduct,T,0,MathArithmeticException,$.getReal() == 0
FieldVector3D.java,angle,dot,T,0,RET,$.getReal() < -threshold
FieldVector3D.java,angle,dot,T,0,RET,$.getReal() > threshold
FieldVector3D.java,angle,dot,T,0,RET,$.getReal() >= 0
FieldVector3D.java,equals,other,null,0,RET,$ instanceof FieldVector3D
Rotation.java,Rotation,norm,double,0,MathIllegalArgumentException,$ == 0
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$.length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[0].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[1].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[2].length != 3
Rotation.java,Rotation,det,double,0,NotARotationMatrixException,$ < 0.0
Rotation.java,Rotation,normProduct,double,0,MathArithmeticException,$ == 0
Rotation.java,mat2quat,s,double,1,DEF,$ > -0.19
Rotation.java,mat2quat,s,double,1,DEF,$ > -0.19
Rotation.java,mat2quat,s,double,1,DEF,$ > -0.19
Rotation.java,getAxis,squaredSine,double,1,RET,$ == 0
Rotation.java,getAxis,q0,double,0,RET,$ < 0
Rotation.java,getAngle,q0,double,1,RET,$ < -0.1
Rotation.java,getAngle,q0,double,1,RET,$ > 0.1
Rotation.java,getAngle,q0,double,0,RET,$ < 0
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,orthogonalizeMatrix,fn1,double,0,RET,FastMath.abs($ - fn) <= threshold
Rotation.java,orthogonalizeMatrix,fn,double,0,RET,FastMath.abs(fn1 - $) <= threshold
RegionFactory.java,buildConvex,hyperplanes,Hyperplane<S>[],0,RET,$ == null
RegionFactory.java,buildConvex,hyperplanes,Hyperplane<S>[],0,RET,$.length == 0
RegionFactory.java,recurseComplement,node,BSPTree<S>,0,RET,$.getCut() == null
RegionFactory.java,recurseComplement,attribute,BoundaryAttribute<S>,0,DEF,$ != null
BSPTree.java,insertCut,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,insertCut,chopped,SubHyperplane<S>,0,RET,$ == null
BSPTree.java,copySelf,cut,SubHyperplane<S>,0,RET,$ == null
BSPTree.java,visit,cut,SubHyperplane<S>,1,DEF,$ == null
BSPTree.java,fitToCell,tree,BSPTree<S>,1,DEF,$ == tree.parent.plus
BSPTree.java,getCell,cut,SubHyperplane<S>,0,RET,$ == null
BSPTree.java,getCell,offset,double,1,RET,FastMath.abs($) < 1.0e-10
BSPTree.java,getCell,offset,double,1,RET,$ <= 0
BSPTree.java,condense,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,condense,plus,BSPTree<S>,0,DEF,$.cut == null
BSPTree.java,condense,minus,BSPTree<S>,0,DEF,$.cut == null
BSPTree.java,condense,plus,BSPTree<S>,0,DEF,$.attribute == null
BSPTree.java,condense,minus,BSPTree<S>,0,DEF,$.attribute == null
BSPTree.java,condense,plus,BSPTree<S>,0,DEF,$.attribute != null
BSPTree.java,merge,cut,SubHyperplane<S>,1,RET,$ == null
BSPTree.java,merge,tree,BSPTree<S>,1,RET,$.cut == null
BSPTree.java,merge,parentTree,BSPTree<S>,0,DEF,$ != null
BSPTree.java,merge,merged,BSPTree<S>,0,DEF,$.cut != null
BSPTree.java,split,cut,SubHyperplane<S>,0,RET,$ == null
BSPTree.java,split,cut,SubHyperplane<S>,1,DEF,$.side(sHyperplane) == Side.PLUS
BSPTree.java,split,sHyperplane,Hyperplane<S>,1,DEF,cut.side($) == Side.PLUS
BSPTree.java,split,cut,SubHyperplane<S>,1,DEF,$.side(sHyperplane) == Side.PLUS
BSPTree.java,split,sHyperplane,Hyperplane<S>,1,DEF,cut.side($) == Side.PLUS
BSPTree.java,insertInTree,parentTree,BSPTree<S>,0,DEF,$ != null
BSPTree.java,insertInTree,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,insertInTree,tree,BSPTree<S>,1,DEF,$ == tree.parent.plus
BSPTree.java,chopOffMinus,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,chopOffPlus,cut,SubHyperplane<S>,0,DEF,$ != null
AbstractRegion.java,AbstractRegion,boundary,Collection<SubHyperplane<S>>,1,DEF,$.size() == 0
AbstractRegion.java,AbstractRegion,hyperplanes,Hyperplane<S>[],1,DEF,$ == null
AbstractRegion.java,AbstractRegion,hyperplanes,Hyperplane<S>[],1,DEF,$.length == 0
AbstractRegion.java,isEmpty,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,checkPoint,cell,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,getTree,tree,BSPTree<S>,0,DEF,$.getCut() != null
AbstractRegion.java,getTree,tree,BSPTree<S>,0,DEF,$.getAttribute() == null
AbstractRegion.java,visitInternalNode,plusChar,SubHyperplane<S>[],0,DEF,$[0] != null
AbstractRegion.java,visitInternalNode,minusChar,SubHyperplane<S>[],0,DEF,$[1] != null
AbstractRegion.java,visitInternalNode,plusChar,SubHyperplane<S>[],0,DEF,$[1] != null
AbstractRegion.java,visitInternalNode,minusChar,SubHyperplane<S>[],0,DEF,$[0] != null
AbstractRegion.java,characterize,node,BSPTree<S>,1,DEF,$.getCut() == null
AbstractRegion.java,characterize,characterization,SubHyperplane<S>[],1,DEF,$[1] == null
AbstractRegion.java,characterize,characterization,SubHyperplane<S>[],1,DEF,$[0] == null
AbstractRegion.java,getSize,barycenter,Vector<S>,0,DEF,$ == null
AbstractRegion.java,getBarycenter,barycenter,Vector<S>,0,DEF,$ == null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,recurseSides,node,BSPTree<S>,1,DEF,$.getCut().side(sub.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,sub,SubHyperplane<S>,1,DEF,node.getCut().side($.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,node,BSPTree<S>,1,DEF,$.getCut().side(sub.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,sub,SubHyperplane<S>,1,DEF,node.getCut().side($.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getPlus().getCut() != null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getMinus().getCut() != null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getPlus().getCut() != null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getMinus().getCut() != null
AbstractRegion.java,recurseIntersection,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,recurseIntersection,plus,SubHyperplane<S>,1,RET,$ == null
AbstractRegion.java,recurseIntersection,minus,SubHyperplane<S>,1,RET,$ == null
AbstractRegion.java,recurseTransform,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,recurseTransform,attribute,BoundaryAttribute<S>,0,DEF,$ != null
OrderedTuple.java,OrderedTuple,components,double[],1,DEF,$[i] < 0
OrderedTuple.java,OrderedTuple,i,int,1,DEF,components[$] < 0
OrderedTuple.java,OrderedTuple,m,long,0,DEF,$ != 0
OrderedTuple.java,OrderedTuple,lsb,int,1,DEF,$ <= msb
OrderedTuple.java,encode,encoding,long[],0,RET,$ != null
OrderedTuple.java,encode,encoding,long[],0,RET,$.length == 1
OrderedTuple.java,encode,encoding,long[],0,RET,$[0] == 0x0L
OrderedTuple.java,encode,vIndex,int,0,DEF,getBit($, k) != 0
OrderedTuple.java,encode,k,int,0,DEF,getBit(vIndex, $) != 0
OrderedTuple.java,encode,shift,int,0,DEF,$-- == 0
OrderedTuple.java,compareTo,components,double[],0,RET,$.length == ot.components.length
OrderedTuple.java,compareTo,offset,int,1,DEF,$ < ot.offset
OrderedTuple.java,compareTo,offset,int,0,DEF,$ > ot.offset
OrderedTuple.java,compareTo,encoding,long[],1,RET,$.length < ot.encoding.length
OrderedTuple.java,compareTo,encoding,long[],1,RET,$.length > ot.encoding.length
OrderedTuple.java,equals,other,null,1,RET,$ instanceof OrderedTuple
OrderedTuple.java,computeMSB,ll,long,0,DEF,($ & mask) != ll
OrderedTuple.java,computeMSB,mask,long,0,DEF,(ll & $) != ll
OrderedTuple.java,computeLSB,ll,long,0,DEF,($ & mask) == ll
OrderedTuple.java,computeLSB,mask,long,0,DEF,(ll & $) == ll
OrderedTuple.java,getBit,k,int,1,RET,$ < e
OrderedTuple.java,getBit,k,int,1,RET,$ > offset
OrderedTuple.java,getBit,k,int,1,RET,$ == offset
AVLTree.java,insert,element,T,0,DEF,$ != null
AVLTree.java,insert,top,Node,1,DEF,$ == null
AVLTree.java,delete,element,T,0,RET,$ != null
AVLTree.java,delete,node,Node,1,RET,$.element == element
AVLTree.java,delete,node,Node,0,RET,$.element.compareTo(element) > 0
AVLTree.java,delete,element,T,0,RET,node.element.compareTo($) > 0
AVLTree.java,getNotSmaller,reference,T,1,RET,node.element.compareTo($) < 0
AVLTree.java,getNotSmaller,node,Node,1,RET,$.element.compareTo(reference) < 0
AVLTree.java,getNotSmaller,node,Node,0,RET,$.right == null
AVLTree.java,getNotSmaller,node,Node,0,RET,$.left == null
AVLTree.java,getNotLarger,reference,T,1,RET,node.element.compareTo($) > 0
AVLTree.java,getNotLarger,node,Node,1,RET,$.element.compareTo(reference) > 0
AVLTree.java,getNotLarger,node,Node,0,RET,$.left == null
AVLTree.java,getNotLarger,node,Node,0,RET,$.right == null
AVLTree.java,getPrevious,left,Node,0,RET,$ != null
AVLTree.java,getPrevious,node,Node,0,RET,$ != null
AVLTree.java,getPrevious,node,Node,0,RET,$ != node.parent.left
AVLTree.java,getNext,right,Node,0,RET,$ != null
AVLTree.java,getNext,node,Node,0,RET,$ != null
AVLTree.java,getNext,node,Node,0,RET,$ != node.parent.right
AVLTree.java,insert,newElement,T,0,RET,$.compareTo(this.element) < 0
AVLTree.java,insert,left,Node,0,RET,$ == null
AVLTree.java,insert,right,Node,0,RET,$ == null
AVLTree.java,delete,parent,Node,1,DEF,$ == null
AVLTree.java,delete,left,Node,1,DEF,$ == null
AVLTree.java,delete,right,Node,1,DEF,$ == null
AVLTree.java,delete,left,Node,1,DEF,$ == null
AVLTree.java,delete,right,Node,1,DEF,$ == null
AVLTree.java,delete,child,Node,0,DEF,$ != null
AVLTree.java,delete,node,Node,0,RET,$.parent == null
AVLTree.java,rebalanceLeftGrown,left,Node,1,DEF,$.skew == Skew.LEFT_HIGH
AVLTree.java,rebalanceRightGrown,right,Node,1,DEF,$.skew == Skew.RIGHT_HIGH
AVLTree.java,rebalanceLeftShrunk,right,Node,1,RET,$.skew == Skew.RIGHT_HIGH
AVLTree.java,rebalanceLeftShrunk,right,Node,1,RET,$.skew == Skew.BALANCED
AVLTree.java,rebalanceRightShrunk,left,Node,1,RET,$.skew == Skew.LEFT_HIGH
AVLTree.java,rebalanceRightShrunk,left,Node,1,RET,$.skew == Skew.BALANCED
AVLTree.java,rotateCW,left,Node,0,DEF,$ != null
AVLTree.java,rotateCW,right,Node,0,DEF,$.right != null
AVLTree.java,rotateCCW,right,Node,0,DEF,$ != null
AVLTree.java,rotateCCW,left,Node,0,DEF,$.left != null
AbstractSubHyperplane.java,recurseTransform,node,BSPTree<T>,0,RET,$.getCut() == null
AbstractSubHyperplane.java,recurseTransform,attribute,BoundaryAttribute<T>,0,DEF,$ != null
BoundarySizeVisitor.java,visitInternalNode,attribute,BoundaryAttribute<S>,0,DEF,$.getPlusOutside() != null
BoundarySizeVisitor.java,visitInternalNode,attribute,BoundaryAttribute<S>,0,DEF,$.getPlusInside() != null
AbstractWell.java,setSeed,seed,int[],0,RET,$ == null
AbstractWell.java,setSeed,seed,int[],0,DEF,$.length < v.length
ValueServer.java,resetReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,closeReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,MathIllegalStateException,$ == null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,MathIllegalStateException,$.getBinStats().size() == 0
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,$ == null
ValueServer.java,getNextReplay,str,String,0,MathIllegalStateException,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,MathIllegalStateException,(str = $.readLine()) == null
ValueServer.java,getNextReplay,str,String,0,MathIllegalStateException,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,MathIllegalStateException,(str = $.readLine()) == null
ISAACRandom.java,setSeed,seed,int[],0,RET,$ == null
ISAACRandom.java,setSeed,seedLen,int,0,DEF,$ < rslLen
ISAACRandom.java,next,count,int,0,DEF,$ < 0
BitsStreamGenerator.java,nextInt,n,int,0,RET,$ > 0
BitsStreamGenerator.java,nextInt,n,int,0,RET,($ & -$) == n
BitsStreamGenerator.java,nextLong,n,long,0,RET,$ > 0
UncorrelatedRandomVectorGenerator.java,UncorrelatedRandomVectorGenerator,mean,double[],0,DimensionMismatchException,$.length != standardDeviation.length
RandomDataGenerator.java,nextHexString,len,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataGenerator.java,nextHexString,hex,String,0,DEF,$.length() == 1
RandomDataGenerator.java,nextInt,lower,int,0,NumberIsTooLargeException,$ >= upper
RandomDataGenerator.java,nextInt,max,int,1,RET,$ <= 0
RandomDataGenerator.java,nextInt,r,int,0,RET,$ >= lower
RandomDataGenerator.java,nextInt,r,int,0,RET,$ <= upper
RandomDataGenerator.java,nextLong,lower,long,0,NumberIsTooLargeException,$ >= upper
RandomDataGenerator.java,nextLong,max,long,1,RET,$ <= 0
RandomDataGenerator.java,nextLong,r,long,0,RET,$ >= lower
RandomDataGenerator.java,nextLong,r,long,0,RET,$ <= upper
RandomDataGenerator.java,nextLong,max,long,1,RET,$ < Integer.MAX_VALUE
RandomDataGenerator.java,nextLong,n,long,0,RET,$ > 0
RandomDataGenerator.java,nextSecureHexString,len,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataGenerator.java,nextSecureHexString,hex,String,0,DEF,$.length() == 1
RandomDataGenerator.java,nextSecureInt,lower,int,0,NumberIsTooLargeException,$ >= upper
RandomDataGenerator.java,nextSecureInt,max,int,1,RET,$ <= 0
RandomDataGenerator.java,nextSecureInt,r,int,0,RET,$ >= lower
RandomDataGenerator.java,nextSecureInt,r,int,0,RET,$ <= upper
RandomDataGenerator.java,nextSecureLong,lower,long,0,NumberIsTooLargeException,$ >= upper
RandomDataGenerator.java,nextSecureLong,max,long,1,RET,$ <= 0
RandomDataGenerator.java,nextSecureLong,r,long,0,RET,$ >= lower
RandomDataGenerator.java,nextSecureLong,r,long,0,RET,$ <= upper
RandomDataGenerator.java,nextSecureLong,max,long,1,RET,$ < Integer.MAX_VALUE
RandomDataGenerator.java,nextLong,n,long,0,RET,$ > 0
RandomDataGenerator.java,nextGaussian,sigma,double,0,NotStrictlyPositiveException,$ <= 0
RandomDataGenerator.java,nextUniform,lower,double,0,NumberIsTooLargeException,$ >= upper
RandomDataGenerator.java,nextPermutation,k,int,0,NumberIsTooLargeException,$ > n
RandomDataGenerator.java,nextPermutation,k,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataGenerator.java,nextSample,k,int,0,NumberIsTooLargeException,$ > len
RandomDataGenerator.java,nextSample,k,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataGenerator.java,getRandomGenerator,rand,RandomGenerator,0,DEF,$ == null
RandomDataGenerator.java,getSecRan,secRand,SecureRandom,0,DEF,$ == null
RandomDataGenerator.java,shuffle,i,int,1,DEF,$ == 0
StableRandomGenerator.java,StableRandomGenerator,generator,RandomGenerator,0,NullArgumentException,$ == null
StableRandomGenerator.java,StableRandomGenerator,alpha,double,0,OutOfRangeException,$ > 0d
StableRandomGenerator.java,StableRandomGenerator,alpha,double,0,OutOfRangeException,$ <= 2d
StableRandomGenerator.java,StableRandomGenerator,beta,double,0,OutOfRangeException,$ >= -1d
StableRandomGenerator.java,StableRandomGenerator,beta,double,0,OutOfRangeException,$ <= 1d
StableRandomGenerator.java,StableRandomGenerator,alpha,double,1,DEF,$ < 2d
StableRandomGenerator.java,StableRandomGenerator,beta,double,1,DEF,$ != 0d
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,0,RET,$ == 2d
StableRandomGenerator.java,nextNormalizedDouble,beta,double,1,DEF,$ == 0d
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,1,DEF,$ == 1d
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,1,DEF,FastMath.abs($ - 1d) > 1e-8
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,0,DEF,$ != 1d
MersenneTwister.java,setSeed,seed,int[],0,RET,$ == null
MersenneTwister.java,setSeed,i,int,0,DEF,$ >= N
MersenneTwister.java,setSeed,j,int,0,DEF,$ >= seed.length
MersenneTwister.java,setSeed,i,int,0,DEF,$ >= N
MersenneTwister.java,next,mti,int,0,DEF,$ >= N
CorrelatedRandomVectorGenerator.java,CorrelatedRandomVectorGenerator,mean,double[],0,DimensionMismatchException,$.length != order
EmpiricalDistribution.java,load,sampleStats,SummaryStatistics,0,ZeroException,$.getN() == 0
EmpiricalDistribution.java,getNextValue,stats,SummaryStatistics,0,RET,$.getN() > 0
EmpiricalDistribution.java,getNextValue,stats,SummaryStatistics,1,RET,$.getStandardDeviation() > 0
EmpiricalDistribution.java,density,x,double,0,RET,$ < min
EmpiricalDistribution.java,density,x,double,0,RET,$ > max
EmpiricalDistribution.java,cumulativeProbability,x,double,1,RET,$ < min
EmpiricalDistribution.java,cumulativeProbability,x,double,0,RET,$ >= max
EmpiricalDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0.0
EmpiricalDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1.0
EmpiricalDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 0.0
EmpiricalDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 1.0
EmpiricalDistribution.java,inverseCumulativeProbability,pCrit,double,0,RET,$ <= 0
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
AbstractRandomGenerator.java,nextBytes,i,int,0,DEF,$ > 0
AbstractRandomGenerator.java,nextBytes,bytesOut,int,0,RET,$ == bytes.length
AbstractRandomGenerator.java,nextInt,n,int,0,NotStrictlyPositiveException,$ <= 0
AbstractRandomGenerator.java,nextGaussian,s,double,0,DEF,$ != 0
Sigmoid.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Sigmoid.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 2
Sigmoid.java,value,k,int,1,DEF,$ > 1
Sinc.java,value,scaledX,double,1,RET,FastMath.abs($) <= SHORTCUT
Sinc.java,value,scaledX,double,1,DEF,FastMath.abs($) <= SHORTCUT
Sinc.java,value,i,int,1,DEF,($ & 0x1) == 0
Sinc.java,value,n,int,1,DEF,($ & 0x1) == 0
Gaussian.java,Gaussian,sigma,double,0,NotStrictlyPositiveException,$ <= 0
Gaussian.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Gaussian.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 3
Gaussian.java,validateParameters,param,double[],0,NotStrictlyPositiveException,$[2] <= 0
Gaussian.java,value,coeff,double,1,DEF,$ <= Precision.SAFE_MIN
Gaussian.java,value,k,int,1,DEF,$ > 2
Gaussian.java,value,k,int,0,DEF,$ == 2
Gaussian.java,value,n,int,0,DEF,($ & 0x1) == 1
HarmonicOscillator.java,validateParameters,param,double[],0,NullArgumentException,$ == null
HarmonicOscillator.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 3
HarmonicOscillator.java,value,f,double[],0,DEF,$.length > 1
Logit.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Logit.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 2
Logit.java,value,x,double,0,OutOfRangeException,$ < lo
Logit.java,value,x,double,0,OutOfRangeException,$ > hi
Logit.java,value,x,double,0,OutOfRangeException,$ < lo
Logit.java,value,x,double,0,OutOfRangeException,$ > hi
Logit.java,value,f,double[],0,DEF,$.length > 1
StepFunction.java,StepFunction,x,double[],0,NullArgumentException,$ == null
StepFunction.java,StepFunction,y,double[],0,NullArgumentException,$ == null
StepFunction.java,StepFunction,x,double[],0,NoDataException,$.length == 0
StepFunction.java,StepFunction,y,double[],0,NoDataException,$.length == 0
StepFunction.java,StepFunction,y,double[],0,DimensionMismatchException,$.length != x.length
StepFunction.java,value,index,int,1,DEF,$ < -1
StepFunction.java,value,index,int,1,DEF,$ >= 0
Logistic.java,Logistic,n,double,0,NotStrictlyPositiveException,$ <= 0
Logistic.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Logistic.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 6
Logistic.java,validateParameters,param,double[],0,NotStrictlyPositiveException,$[5] <= 0
BaseSecantSolver.java,doSolve,f0,double,0,RET,$ == 0.0
BaseSecantSolver.java,doSolve,f1,double,0,RET,$ == 0.0
BaseSecantSolver.java,doSolve,fx,double,0,RET,$ == 0.0
BaseSecantSolver.java,doSolve,fx,double,1,DEF,f1 * $ < 0
BaseSecantSolver.java,doSolve,f1,double,1,DEF,$ * fx < 0
BaseSecantSolver.java,doSolve,x,double,0,ConvergenceException,$ == x1
BaseSecantSolver.java,doSolve,f1,double,0,MathInternalError:RET,FastMath.abs($) <= ftol
BaseSecantSolver.java,doSolve,f1,double,0,RET,$ <= 0
BaseSecantSolver.java,doSolve,f1,double,0,RET,$ >= 0
UnivariateSolverUtils.java,solve,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,solve,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,forceSide,allowedSolution,AllowedSolution,0,RET,$ == AllowedSolution.ANY_SIDE
UnivariateSolverUtils.java,forceSide,fLo,double,0,RET,$ >= 0
UnivariateSolverUtils.java,forceSide,fHi,double,0,RET,$ <= 0
UnivariateSolverUtils.java,forceSide,fLo,double,0,RET,$ <= 0
UnivariateSolverUtils.java,forceSide,fHi,double,0,RET,$ >= 0
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ < fHi
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ >= 0
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ > fHi
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ <= 0
UnivariateSolverUtils.java,bracket,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,bracket,maximumIterations,int,0,NotStrictlyPositiveException,$ <= 0
UnivariateSolverUtils.java,bracket,fa,double,0,NoBracketingException,$ * fb > 0.0
UnivariateSolverUtils.java,bracket,fb,double,0,NoBracketingException,fa * $ > 0.0
UnivariateSolverUtils.java,isBracketing,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,verifyInterval,lower,double,0,NumberIsTooLargeException,$ >= upper
UnivariateSolverUtils.java,verifyBracketing,function,UnivariateFunction,0,NullArgumentException,$ == null
BisectionSolver.java,doSolve,fm,double,1,DEF,$ * fmin > 0
BisectionSolver.java,doSolve,fmin,double,1,DEF,fm * $ > 0
BisectionSolver.java,doSolve,min,double,0,RET,FastMath.abs(max - $) <= absoluteAccuracy
BisectionSolver.java,doSolve,max,double,0,RET,FastMath.abs($ - min) <= absoluteAccuracy
SecantSolver.java,doSolve,f0,double,0,RET,$ == 0.0
SecantSolver.java,doSolve,f1,double,0,RET,$ == 0.0
SecantSolver.java,doSolve,fx,double,0,RET,$ == 0.0
SecantSolver.java,doSolve,f1,double,0,RET,FastMath.abs($) <= ftol
LaguerreSolver.java,doSolve,yInitial,double,0,RET,FastMath.abs($) <= functionValueAccuracy
LaguerreSolver.java,doSolve,yMin,double,0,RET,FastMath.abs($) <= functionValueAccuracy
LaguerreSolver.java,doSolve,yMin,double,0,RET,yInitial * $ < 0
LaguerreSolver.java,doSolve,yInitial,double,0,RET,$ * yMin < 0
LaguerreSolver.java,doSolve,yMax,double,0,RET,FastMath.abs($) <= functionValueAccuracy
LaguerreSolver.java,doSolve,yInitial,double,0,RET,$ * yMax < 0
LaguerreSolver.java,doSolve,yMax,double,0,RET,yInitial * $ < 0
LaguerreSolver.java,solveAll,coefficients,Complex[],0,NullArgumentException,$ == null
LaguerreSolver.java,solveAll,n,int,0,NoDataException,$ == 0
LaguerreSolver.java,solve,coefficients,Complex[],0,NullArgumentException,$ == null
LaguerreSolver.java,solve,n,int,0,NoDataException,$ == 0
LaguerreSolver.java,solve,oldz,Complex,0,RET,(z.subtract($)).abs() <= tolerance
LaguerreSolver.java,solve,z,Complex,0,RET,($.subtract(oldz)).abs() <= tolerance
LaguerreSolver.java,solve,pv,Complex,0,RET,$.abs() <= functionValueAccuracy
NewtonSolver.java,doSolve,x0,double,0,RET,FastMath.abs(x1 - $) <= absoluteAccuracy
NewtonSolver.java,doSolve,x1,double,0,RET,FastMath.abs($ - x0) <= absoluteAccuracy
BracketingNthOrderBrentSolver.java,BracketingNthOrderBrentSolver,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolver.java,BracketingNthOrderBrentSolver,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolver.java,BracketingNthOrderBrentSolver,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolver.java,doSolve,y,double[],1,DEF,$[0] * $[1] < 0
BracketingNthOrderBrentSolver.java,doSolve,y,double[],1,DEF,$[1] * $[2] < 0
BracketingNthOrderBrentSolver.java,doSolve,xA,double,0,MathInternalError:RET,(xB - $) <= xTol
BracketingNthOrderBrentSolver.java,doSolve,xB,double,0,MathInternalError:RET,($ - xA) <= xTol
BracketingNthOrderBrentSolver.java,doSolve,agingA,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolver.java,doSolve,agingB,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolver.java,doSolve,nextX,double,0,DEF,$ > xA
BracketingNthOrderBrentSolver.java,doSolve,nextX,double,0,DEF,$ < xB
BracketingNthOrderBrentSolver.java,doSolve,nbPoints,int,1,DEF,$ > 2
BracketingNthOrderBrentSolver.java,doSolve,start,int,1,DEF,end - $ != nbPoints
BracketingNthOrderBrentSolver.java,doSolve,end,int,1,DEF,$ - start != nbPoints
BracketingNthOrderBrentSolver.java,doSolve,nbPoints,int,0,DEF,$ == x.length
BracketingNthOrderBrentSolver.java,doSolve,yA,double,1,DEF,nextY * $ <= 0
BracketingNthOrderBrentSolver.java,doSolve,nextY,double,1,DEF,$ * yA <= 0
MullerSolver2.java,doSolve,y0,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver2.java,doSolve,y1,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver2.java,doSolve,y0,double,0,NoBracketingException,$ * y1 > 0
MullerSolver2.java,doSolve,y1,double,0,NoBracketingException,y0 * $ > 0
MullerSolver2.java,doSolve,delta,double,1,DEF,$ >= 0.0
MullerSolver2.java,doSolve,denominator,double,1,DEF,$ != 0
MullerSolver2.java,doSolve,oldx,double,0,RET,FastMath.abs(x - $) <= tolerance
MullerSolver2.java,doSolve,x,double,0,RET,FastMath.abs($ - oldx) <= tolerance
MullerSolver2.java,doSolve,y,double,0,RET,FastMath.abs($) <= functionValueAccuracy
NewtonRaphsonSolver.java,doSolve,x0,double,0,RET,FastMath.abs(x1 - $) <= absoluteAccuracy
NewtonRaphsonSolver.java,doSolve,x1,double,0,RET,FastMath.abs($ - x0) <= absoluteAccuracy
MullerSolver.java,doSolve,fMin,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver.java,doSolve,fMax,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver.java,doSolve,fInitial,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver.java,solve,oldx,double,0,RET,FastMath.abs(x - $) <= tolerance
MullerSolver.java,solve,x,double,0,RET,FastMath.abs($ - oldx) <= tolerance
MullerSolver.java,solve,y,double,0,RET,FastMath.abs($) <= functionValueAccuracy
MullerSolver.java,solve,ym,double,1,DEF,FastMath.signum(y0) + FastMath.signum($) == 0.0
MullerSolver.java,solve,y0,double,1,DEF,FastMath.signum($) + FastMath.signum(ym) == 0.0
BrentSolver.java,doSolve,yInitial,double,0,RET,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,doSolve,yMin,double,0,RET,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,doSolve,yMin,double,0,RET,yInitial * $ < 0
BrentSolver.java,doSolve,yInitial,double,0,RET,$ * yMin < 0
BrentSolver.java,doSolve,yMax,double,0,RET,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,doSolve,yInitial,double,0,RET,$ * yMax < 0
BrentSolver.java,doSolve,yMax,double,0,RET,yInitial * $ < 0
BrentSolver.java,brent,m,double,0,RET,FastMath.abs($) <= tol
BrentSolver.java,brent,e,double,1,DEF,FastMath.abs($) < tol
BrentSolver.java,brent,a,double,1,DEF,$ == c
BrentSolver.java,brent,p,double,1,DEF,$ > 0
BrentSolver.java,brent,d,double,1,DEF,FastMath.abs($) > tol
BrentSolver.java,brent,m,double,1,DEF,$ > 0
BrentSolver.java,brent,fb,double,0,DEF,$ > 0
BrentSolver.java,brent,fc,double,0,DEF,$ > 0
BrentSolver.java,brent,fb,double,0,DEF,$ <= 0
BrentSolver.java,brent,fc,double,0,DEF,$ <= 0
RiddersSolver.java,doSolve,y1,double,0,RET,$ == 0
RiddersSolver.java,doSolve,y2,double,0,RET,$ == 0
RiddersSolver.java,doSolve,y3,double,0,RET,FastMath.abs($) <= functionValueAccuracy
RiddersSolver.java,doSolve,oldx,double,0,RET,FastMath.abs(x - $) <= tolerance
RiddersSolver.java,doSolve,x,double,0,RET,FastMath.abs($ - oldx) <= tolerance
RiddersSolver.java,doSolve,y,double,0,RET,FastMath.abs($) <= functionValueAccuracy
RiddersSolver.java,doSolve,correction,double,1,DEF,$ > 0.0
RiddersSolver.java,doSolve,y1,double,1,DEF,FastMath.signum($) + FastMath.signum(y) == 0.0
RiddersSolver.java,doSolve,y,double,1,DEF,FastMath.signum(y1) + FastMath.signum($) == 0.0
RiddersSolver.java,doSolve,y2,double,1,DEF,FastMath.signum($) + FastMath.signum(y) == 0.0
RiddersSolver.java,doSolve,y,double,1,DEF,FastMath.signum(y2) + FastMath.signum($) == 0.0
FunctionUtils.java,value,i,int,0,DEF,$ != j
FunctionUtils.java,sample,n,int,0,NotStrictlyPositiveException,$ <= 0
FunctionUtils.java,sample,min,double,0,NumberIsTooLargeException,$ >= max
FunctionUtils.java,value,i,int,1,DEF,$ == k
FunctionUtils.java,value,order,int,0,NumberIsTooLargeException,$ > 1
FunctionUtils.java,value,t,DerivativeStructure[],0,DimensionMismatchException,$[i].getFreeParameters() != parameters
FunctionUtils.java,value,i,int,0,DimensionMismatchException,t[$].getFreeParameters() != parameters
FunctionUtils.java,value,t,DerivativeStructure[],0,DimensionMismatchException,$[i].getOrder() != order
FunctionUtils.java,value,i,int,0,DimensionMismatchException,t[$].getOrder() != order
FunctionUtils.java,value,order,int,0,NumberIsTooLargeException,$ > 1
FunctionUtils.java,value,t,DerivativeStructure[],0,DimensionMismatchException,$[i].getFreeParameters() != parameters
FunctionUtils.java,value,i,int,0,DimensionMismatchException,t[$].getFreeParameters() != parameters
FunctionUtils.java,value,t,DerivativeStructure[],0,DimensionMismatchException,$[i].getOrder() != order
FunctionUtils.java,value,i,int,0,DimensionMismatchException,t[$].getOrder() != order
PolynomialFunctionLagrangeForm.java,evaluateInternal,dist,double,0,DEF,$ < min_dist
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != j
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,DimensionMismatchException,$.length != y.length
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,NumberIsTooSmallException,$.length < 2
PolynomialFunctionNewtonForm.java,verifyInputArray,a,double[],0,NoDataException,$.length == 0
PolynomialFunctionNewtonForm.java,verifyInputArray,c,double[],0,NoDataException,$.length == 0
PolynomialsUtils.java,equals,key,Object,0,RET,$ == null
PolynomialsUtils.java,equals,key,null,0,RET,$ instanceof JacobiKey
PolynomialsUtils.java,buildPolynomial,degree,int,0,DEF,$ > maxDegree
PolynomialFunction.java,PolynomialFunction,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,evaluate,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,value,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,subtract,coefficients,double[],1,DEF,$.length < p.coefficients.length
PolynomialFunction.java,differentiate,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,differentiate,n,int,0,RET,$ == 1
PolynomialFunction.java,toString,coefficients,double[],1,RET,$[0] == 0.0
PolynomialFunction.java,toString,coefficients,double[],0,RET,$.length == 1
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] != 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] != 0
PolynomialFunction.java,toString,s,StringBuilder,1,DEF,$.length() > 0
PolynomialFunction.java,toString,coefficients,double[],1,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,1,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,absAi,double,0,DEF,($ - 1) != 0
PolynomialFunction.java,toString,i,int,0,DEF,$ > 1
PolynomialFunction.java,equals,obj,null,0,RET,$ instanceof PolynomialFunction
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,NullArgumentException,$ == null
PolynomialSplineFunction.java,PolynomialSplineFunction,polynomials,PolynomialFunction[],0,NullArgumentException,$ == null
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,NumberIsTooSmallException,$.length < 2
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,DimensionMismatchException,$.length - 1 != polynomials.length
PolynomialSplineFunction.java,value,i,int,0,DEF,$ < 0
PolynomialSplineFunction.java,value,i,int,0,DEF,$ >= polynomials.length
PolynomialSplineFunction.java,value,i,int,0,DEF,$ < 0
PolynomialSplineFunction.java,value,i,int,0,DEF,$ >= polynomials.length
UnivariatePeriodicInterpolator.java,interpolate,xval,double[],0,NumberIsTooSmallException,$.length < extend
LoessInterpolator.java,LoessInterpolator,bandwidth,double,0,OutOfRangeException,$ < 0
LoessInterpolator.java,LoessInterpolator,bandwidth,double,0,OutOfRangeException,$ > 1
LoessInterpolator.java,LoessInterpolator,robustnessIters,int,0,NotPositiveException,$ < 0
LoessInterpolator.java,smooth,xval,double[],0,DimensionMismatchException,$.length != yval.length
LoessInterpolator.java,smooth,n,int,0,NoDataException,$ == 0
LoessInterpolator.java,smooth,n,int,0,RET,$ == 1
LoessInterpolator.java,smooth,n,int,0,RET,$ == 2
LoessInterpolator.java,smooth,bandwidthInPoints,int,0,NumberIsTooSmallException,$ < 2
LoessInterpolator.java,smooth,i,int,0,DEF,$ > 0
LoessInterpolator.java,smooth,meanXSquared,double,1,DEF,FastMath.sqrt(FastMath.abs($ - meanX * meanX)) < accuracy
LoessInterpolator.java,smooth,meanX,double,1,DEF,FastMath.sqrt(FastMath.abs(meanXSquared - $ * $)) < accuracy
LoessInterpolator.java,smooth,iter,int,0,DEF,$ == robustnessIters
LoessInterpolator.java,smooth,medianResidual,double,0,DEF,FastMath.abs($) < accuracy
LoessInterpolator.java,smooth,arg,double,1,DEF,$ >= 1
LoessInterpolator.java,smooth,xval,double[],0,DimensionMismatchException,$.length != yval.length
LoessInterpolator.java,updateBandwidthInterval,nextRight,int,0,DEF,$ < xval.length
LoessInterpolator.java,tricube,absX,double,0,RET,$ >= 1.0
HermiteInterpolator.java,addSamplePoint,i,int,0,DEF,$ > 1
TricubicSplineInterpolator.java,interpolate,xval,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,yval,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,zval,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,fval,double[][][],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,xval,double[],0,DimensionMismatchException,$.length != fval.length
TricubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$].length != yLen
TricubicSplineInterpolator.java,interpolate,fval,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$][j].length != zLen
TricubicSplineInterpolator.java,interpolate,j,int,0,DimensionMismatchException,fval[i][$].length != zLen
TricubicSplineInterpolator.java,interpolate,fval,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
FieldHermiteInterpolator.java,addSamplePoint,i,int,0,DEF,$ > 1
FieldHermiteInterpolator.java,derivatives,j,int,0,DEF,$ > 0
LinearInterpolator.java,interpolate,x,double[],0,DimensionMismatchException,$.length != y.length
LinearInterpolator.java,interpolate,x,double[],0,NumberIsTooSmallException,$.length < 2
BicubicSplineInterpolator.java,interpolate,xval,double[],0,NoDataException,$.length == 0
BicubicSplineInterpolator.java,interpolate,yval,double[],0,NoDataException,$.length == 0
BicubicSplineInterpolator.java,interpolate,fval,double[][],0,NoDataException,$.length == 0
BicubicSplineInterpolator.java,interpolate,xval,double[],0,DimensionMismatchException,$.length != fval.length
BicubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$].length != yLen
BicubicSplineInterpolator.java,interpolate,fval,double[][],0,DimensionMismatchException,$[i].length != yLen
SplineInterpolator.java,interpolate,x,double[],0,DimensionMismatchException,$.length != y.length
SplineInterpolator.java,interpolate,x,double[],0,NumberIsTooSmallException,$.length < 3
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,NoDataException,$ == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,yLen,int,0,NoDataException,$ == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,f,double[][],0,NoDataException,$.length == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,f,double[][],0,NoDataException,$[0].length == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != f.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdX.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdY.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdXdY.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,f,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,f[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,dFdX,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdX[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,dFdY,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdY[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdY[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,d2FdXdY,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,value,i,int,0,OutOfRangeException,$ == -1
BicubicSplineInterpolatingFunction.java,value,j,int,0,OutOfRangeException,$ == -1
BicubicSplineInterpolatingFunction.java,partialDerivative,partialDerivatives,BivariateFunction[][][],0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivative,i,int,0,OutOfRangeException,$ == -1
BicubicSplineInterpolatingFunction.java,partialDerivative,j,int,0,OutOfRangeException,$ == -1
BicubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ < 0
BicubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ > 1
BicubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ < 0
BicubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ > 1
BicubicSplineInterpolatingFunction.java,partialDerivativeX,partialDerivativeX,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeY,partialDerivativeY,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeXX,partialDerivativeXX,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeYY,partialDerivativeYY,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeXY,partialDerivativeXY,BivariateFunction,0,DEF,$ == null
MicrosphereInterpolator.java,MicrosphereInterpolator,exponent,int,0,NotPositiveException,$ < 0
MicrosphereInterpolator.java,MicrosphereInterpolator,elements,int,0,NotStrictlyPositiveException,$ <= 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,NoDataException,$ == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,yLen,int,0,NoDataException,$ == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,z,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,NoDataException,$.length == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,NoDataException,$[0].length == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != f.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdX.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdY.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdXdY.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdXdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdYdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d3FdXdYdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,f[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdX,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdX[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdY,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdY[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdY[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdY,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdYdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdYdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d3FdXdYdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d3FdXdYdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,f[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,f[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdX,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdX[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,dFdX[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdY,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdY[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,dFdY[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,dFdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdY[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d2FdXdY[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdY,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d2FdXdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdYdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdYdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d2FdYdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d3FdXdYdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d3FdXdYdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d3FdXdYdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,value,i,int,0,OutOfRangeException,$ == -1
TricubicSplineInterpolatingFunction.java,value,j,int,0,OutOfRangeException,$ == -1
TricubicSplineInterpolatingFunction.java,value,k,int,0,OutOfRangeException,$ == -1
TricubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ < 0
TricubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ > 1
TricubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ < 0
TricubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ > 1
TricubicSplineInterpolatingFunction.java,value,z,double,0,OutOfRangeException,$ < 0
TricubicSplineInterpolatingFunction.java,value,z,double,0,OutOfRangeException,$ > 1
SmoothingPolynomialBicubicSplineInterpolator.java,SmoothingPolynomialBicubicSplineInterpolator,xDegree,int,0,NotPositiveException,$ < 0
SmoothingPolynomialBicubicSplineInterpolator.java,SmoothingPolynomialBicubicSplineInterpolator,yDegree,int,0,NotPositiveException,$ < 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,xval,double[],0,NoDataException,$.length == 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,yval,double[],0,NoDataException,$.length == 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,fval,double[][],0,NoDataException,$.length == 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,xval,double[],0,DimensionMismatchException,$.length != fval.length
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$].length != yLen
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,fval,double[][],0,DimensionMismatchException,$[i].length != yLen
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,NullArgumentException,$ == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,yval,double[],0,NullArgumentException,$ == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,NoDataException,$.length == 0
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,DimensionMismatchException,$.length != yval.length
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,NullArgumentException,$[0] == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xvalI,double[],0,NullArgumentException,$ == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xvalI,double[],0,DimensionMismatchException,$.length != dimension
MicrosphereInterpolatingFunction.java,value,sd,Entry<RealVector,Double>,0,DEF,$ != null
LegendreGaussIntegrator.java,doIntegrate,delta,double,0,RET,$ <= limit
BaseAbstractUnivariateIntegrator.java,BaseAbstractUnivariateIntegrator,minimalIterationCount,int,0,NotStrictlyPositiveException,$ <= 0
BaseAbstractUnivariateIntegrator.java,BaseAbstractUnivariateIntegrator,maximalIterationCount,int,0,NumberIsTooSmallException,$ <= minimalIterationCount
TrapezoidIntegrator.java,TrapezoidIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > TRAPEZOID_MAX_ITERATIONS_COUNT
TrapezoidIntegrator.java,TrapezoidIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > TRAPEZOID_MAX_ITERATIONS_COUNT
TrapezoidIntegrator.java,stage,n,int,1,RET,$ == 0
TrapezoidIntegrator.java,doIntegrate,delta,double,0,RET,$ <= rLimit
LegendreHighPrecisionRuleFactory.java,computeRule,numberOfPoints,int,0,RET,$ == 1
LegendreHighPrecisionRuleFactory.java,computeRule,pa,BigDecimal,1,DEF,$.signum() * pc.signum() <= 0
LegendreHighPrecisionRuleFactory.java,computeRule,pc,BigDecimal,1,DEF,pa.signum() * $.signum() <= 0
LegendreHighPrecisionRuleFactory.java,computeRule,numberOfPoints,int,0,DEF,$ % 2 != 0
GaussIntegrator.java,GaussIntegrator,points,double[],0,DimensionMismatchException,$.length != weights.length
BaseRuleFactory.java,getRule,numberOfPoints,int,0,NotStrictlyPositiveException,$ <= 0
BaseRuleFactory.java,getRule,cached,Pair<double[],double[]>,0,DEF,$ == null
BaseRuleFactory.java,getRuleInternal,rule,Pair<T[],T[]>,0,RET,$ == null
LegendreRuleFactory.java,computeRule,numberOfPoints,int,0,RET,$ == 1
LegendreRuleFactory.java,computeRule,pa,double,1,DEF,$ * pc <= 0
LegendreRuleFactory.java,computeRule,pc,double,1,DEF,pa * $ <= 0
LegendreRuleFactory.java,computeRule,numberOfPoints,int,0,DEF,$ % 2 != 0
SimpsonIntegrator.java,SimpsonIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > SIMPSON_MAX_ITERATIONS_COUNT
SimpsonIntegrator.java,SimpsonIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > SIMPSON_MAX_ITERATIONS_COUNT
SimpsonIntegrator.java,doIntegrate,delta,double,0,RET,$ <= rLimit
RombergIntegrator.java,RombergIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > ROMBERG_MAX_ITERATIONS_COUNT
RombergIntegrator.java,RombergIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > ROMBERG_MAX_ITERATIONS_COUNT
RombergIntegrator.java,doIntegrate,delta,double,0,RET,$ <= rLimit
IterativeLegendreGaussIntegrator.java,IterativeLegendreGaussIntegrator,n,int,0,NotStrictlyPositiveException,$ <= 0
IterativeLegendreGaussIntegrator.java,doIntegrate,delta,double,0,RET,$ <= limit
DerivativeStructure.java,DerivativeStructure,index,int,0,NumberIsTooLargeException,$ >= parameters
DerivativeStructure.java,DerivativeStructure,order,int,0,DEF,$ > 0
DerivativeStructure.java,DerivativeStructure,derivatives,double[],0,DimensionMismatchException,$.length != data.length
DerivativeStructure.java,abs,data,double[],1,RET,Double.doubleToLongBits($[0]) < 0
DerivativeStructure.java,copySign,m,long,0,RET,$ >= 0
DerivativeStructure.java,copySign,s,long,0,RET,$ >= 0
DerivativeStructure.java,copySign,m,long,0,RET,$ < 0
DerivativeStructure.java,copySign,s,long,0,RET,$ < 0
DerivativeStructure.java,copySign,m,long,0,RET,$ >= 0
DerivativeStructure.java,copySign,s,long,0,RET,$ >= 0
DerivativeStructure.java,copySign,m,long,0,RET,$ < 0
DerivativeStructure.java,copySign,s,long,0,RET,$ < 0
DerivativeStructure.java,equals,other,null,0,RET,$ instanceof DerivativeStructure
DSCompiler.java,getCompiler,cache,DSCompiler[][],0,RET,$ != null
DSCompiler.java,getCompiler,cache,DSCompiler[][],0,RET,$.length > parameters
DSCompiler.java,getCompiler,cache,DSCompiler[][],0,RET,$[parameters].length > order
DSCompiler.java,getCompiler,parameters,int,0,RET,cache[$].length > order
DSCompiler.java,getCompiler,cache,DSCompiler[][],0,RET,$[parameters][order] != null
DSCompiler.java,getCompiler,parameters,int,0,RET,cache[$][order] != null
DSCompiler.java,getCompiler,order,int,0,RET,cache[parameters][$] != null
DSCompiler.java,getCompiler,cache,DSCompiler[][],0,DEF,$ != null
DSCompiler.java,getCompiler,p,int,0,DEF,newCache[$][o] == null
DSCompiler.java,getCompiler,newCache,DSCompiler[][],0,DEF,$[p][o] == null
DSCompiler.java,getCompiler,o,int,0,DEF,newCache[p][$] == null
DSCompiler.java,compileSizes,parameters,int,1,DEF,$ == 0
DSCompiler.java,compileDerivativesIndirection,parameters,int,0,RET,$ == 0
DSCompiler.java,compileDerivativesIndirection,order,int,0,RET,$ == 0
DSCompiler.java,compileLowerIndirection,parameters,int,0,RET,$ == 0
DSCompiler.java,compileLowerIndirection,order,int,0,RET,$ <= 1
DSCompiler.java,compileMultiplicationIndirection,parameters,int,0,RET,$ == 0
DSCompiler.java,compileMultiplicationIndirection,order,int,0,RET,$ == 0
DSCompiler.java,compileMultiplicationIndirection,termJ,int[],0,DEF,$[0] > 0
DSCompiler.java,compileCompositionIndirection,parameters,int,0,RET,$ == 0
DSCompiler.java,compileCompositionIndirection,order,int,0,RET,$ == 0
DSCompiler.java,compileCompositionIndirection,j,int,0,DEF,$ == l
DSCompiler.java,compileCompositionIndirection,termJ,int[],0,DEF,$[0] > 0
DSCompiler.java,getPartialDerivativeIndex,ordersSum,int,0,NumberIsTooLargeException,$ > order
DSCompiler.java,pow,n,int,0,RET,$ == 0
DSCompiler.java,pow,n,int,1,DEF,$ > 0
DSCompiler.java,rootN,n,int,1,DEF,$ == 2
DSCompiler.java,rootN,n,int,1,DEF,$ == 3
DSCompiler.java,log,order,int,0,DEF,$ > 0
DSCompiler.java,log1p,order,int,0,DEF,$ > 0
DSCompiler.java,log10,order,int,0,DEF,$ > 0
DSCompiler.java,cos,order,int,0,DEF,$ > 0
DSCompiler.java,sin,order,int,0,DEF,$ > 0
DSCompiler.java,tan,order,int,0,DEF,$ > 0
DSCompiler.java,tan,k,int,1,DEF,$ > 2
DSCompiler.java,tan,k,int,0,DEF,$ == 2
DSCompiler.java,tan,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,acos,order,int,0,DEF,$ > 0
DSCompiler.java,acos,k,int,1,DEF,$ > 2
DSCompiler.java,acos,k,int,0,DEF,$ == 2
DSCompiler.java,acos,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,asin,order,int,0,DEF,$ > 0
DSCompiler.java,asin,k,int,1,DEF,$ > 2
DSCompiler.java,asin,k,int,0,DEF,$ == 2
DSCompiler.java,asin,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,atan,order,int,0,DEF,$ > 0
DSCompiler.java,atan,k,int,1,DEF,$ > 2
DSCompiler.java,atan,k,int,0,DEF,$ == 2
DSCompiler.java,atan,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,atan2,xOffset,int,1,DEF,x[$] >= 0
DSCompiler.java,atan2,x,double[],1,DEF,$[xOffset] >= 0
DSCompiler.java,cosh,order,int,0,DEF,$ > 0
DSCompiler.java,sinh,order,int,0,DEF,$ > 0
DSCompiler.java,tanh,order,int,0,DEF,$ > 0
DSCompiler.java,tanh,k,int,1,DEF,$ > 2
DSCompiler.java,tanh,k,int,0,DEF,$ == 2
DSCompiler.java,tanh,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,acosh,order,int,0,DEF,$ > 0
DSCompiler.java,acosh,k,int,1,DEF,$ > 2
DSCompiler.java,acosh,k,int,0,DEF,$ == 2
DSCompiler.java,acosh,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,asinh,order,int,0,DEF,$ > 0
DSCompiler.java,asinh,k,int,1,DEF,$ > 2
DSCompiler.java,asinh,k,int,0,DEF,$ == 2
DSCompiler.java,asinh,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,atanh,order,int,0,DEF,$ > 0
DSCompiler.java,atanh,k,int,1,DEF,$ > 2
DSCompiler.java,atanh,k,int,0,DEF,$ == 2
DSCompiler.java,atanh,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,taylor,orders,int[],0,MathInternalError,$[k] > 0
DSCompiler.java,taylor,k,int,0,MathInternalError,orders[$] > 0
DSCompiler.java,checkCompatibility,parameters,int,0,DimensionMismatchException,$ != compiler.parameters
DSCompiler.java,checkCompatibility,order,int,0,DimensionMismatchException,$ != compiler.order
FiniteDifferencesDifferentiator.java,FiniteDifferencesDifferentiator,nbPoints,int,0,NumberIsTooSmallException,$ <= 1
FiniteDifferencesDifferentiator.java,FiniteDifferencesDifferentiator,stepSize,double,0,NotPositiveException,$ <= 0
FiniteDifferencesDifferentiator.java,evaluate,i,int,1,DEF,$ == 0
FiniteDifferencesDifferentiator.java,value,t,DerivativeStructure,0,NumberIsTooLargeException,$.getOrder() >= nbPoints
FiniteDifferencesDifferentiator.java,value,t,DerivativeStructure,0,NumberIsTooLargeException,$.getOrder() >= nbPoints
FiniteDifferencesDifferentiator.java,value,i,int,0,DEF,$ == 0
FiniteDifferencesDifferentiator.java,value,t,DerivativeStructure,0,NumberIsTooLargeException,$.getOrder() >= nbPoints
FiniteDifferencesDifferentiator.java,value,i,int,0,DEF,$ == 0
HarmonicFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NumberIsTooSmallException,$.length < 4
HarmonicFitter.java,sortObservations,i,int,0,DEF,$-- != 0
HarmonicFitter.java,guessAOmega,c1,double,1,ZeroException,$ / c2 < 0
HarmonicFitter.java,guessAOmega,c2,double,1,ZeroException,c1 / $ < 0
HarmonicFitter.java,guessAOmega,c3,double,1,ZeroException,c2 / $ < 0
HarmonicFitter.java,guessAOmega,c2,double,1,ZeroException,$ / c3 < 0
HarmonicFitter.java,guessAOmega,xRange,double,0,ZeroException,$ == 0
HarmonicFitter.java,guessAOmega,y,double,0,DEF,$ < yMin
HarmonicFitter.java,guessAOmega,y,double,0,DEF,$ > yMax
HarmonicFitter.java,guessAOmega,c2,double,0,MathIllegalStateException,$ == 0
GaussianFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NullArgumentException,$ == null
GaussianFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NumberIsTooSmallException,$.length < 3
GaussianFitter.java,compare,p1,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p2,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p1,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p2,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,interpolateXAtY,idxStep,int,0,ZeroException,$ == 0
GaussianFitter.java,interpolateXAtY,p1,WeightedObservedPoint,0,RET,$.getY() == y
GaussianFitter.java,interpolateXAtY,p2,WeightedObservedPoint,0,RET,$.getY() == y
GaussianFitter.java,getInterpolationPointsForY,idxStep,int,0,ZeroException,$ == 0
GaussianFitter.java,getInterpolationPointsForY,idxStep,int,1,RET,$ < 0
ComplexFormat.java,ComplexFormat,format,NumberFormat,0,NullArgumentException,$ == null
ComplexFormat.java,ComplexFormat,imaginaryFormat,NumberFormat,0,NullArgumentException,$ == null
ComplexFormat.java,ComplexFormat,realFormat,NumberFormat,0,NullArgumentException,$ == null
ComplexFormat.java,ComplexFormat,imaginaryCharacter,String,0,NullArgumentException,$ == null
ComplexFormat.java,ComplexFormat,imaginaryCharacter,String,0,NoDataException,$.length() == 0
ComplexFormat.java,ComplexFormat,imaginaryFormat,NumberFormat,0,NullArgumentException,$ == null
ComplexFormat.java,ComplexFormat,realFormat,NumberFormat,0,NullArgumentException,$ == null
ComplexFormat.java,format,im,double,1,DEF,$ < 0.0
ComplexFormat.java,format,im,double,0,DEF,$ > 0.0
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Complex
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Number
ComplexFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
ComplexFormat.java,parse,re,Number,0,RET,$ == null
ComplexFormat.java,parse,im,Number,0,RET,$ == null
Quaternion.java,Quaternion,v,double[],0,DimensionMismatchException,$.length != 3
Quaternion.java,normalize,norm,double,0,ZeroException,$ < Precision.SAFE_MIN
Quaternion.java,equals,other,null,0,RET,$ instanceof Quaternion
Quaternion.java,getInverse,squareNorm,double,0,ZeroException,$ < Precision.SAFE_MIN
RootsOfUnity.java,isCounterClockWise,omegaCount,int,0,MathIllegalStateException,$ == 0
RootsOfUnity.java,computeRoots,n,int,0,ZeroException,$ == 0
RootsOfUnity.java,computeRoots,absN,int,0,RET,$ == omegaCount
RootsOfUnity.java,getReal,omegaCount,int,0,MathIllegalStateException,$ == 0
RootsOfUnity.java,getReal,k,int,0,OutOfRangeException,$ < 0
RootsOfUnity.java,getReal,k,int,0,OutOfRangeException,$ >= omegaCount
RootsOfUnity.java,getImaginary,omegaCount,int,0,MathIllegalStateException,$ == 0
RootsOfUnity.java,getImaginary,k,int,0,OutOfRangeException,$ < 0
RootsOfUnity.java,getImaginary,k,int,0,OutOfRangeException,$ >= omegaCount
Complex.java,abs,imaginary,double,0,RET,$ == 0.0
Complex.java,abs,real,double,0,RET,$ == 0.0
Complex.java,divide,c,double,0,RET,$ == 0.0
Complex.java,divide,d,double,0,RET,$ == 0.0
Complex.java,divide,divisor,double,0,RET,$ == 0d
Complex.java,reciprocal,real,double,0,RET,$ == 0.0
Complex.java,reciprocal,imaginary,double,0,RET,$ == 0.0
Complex.java,equals,other,null,0,RET,$ instanceof Complex
Complex.java,sqrt,real,double,0,RET,$ == 0.0
Complex.java,sqrt,imaginary,double,0,RET,$ == 0.0
Complex.java,sqrt,real,double,1,RET,$ >= 0.0
Complex.java,tan,imaginary,double,0,RET,$ > 20.0
Complex.java,tan,imaginary,double,0,RET,$ < -20.0
Complex.java,tanh,real,double,0,RET,$ > 20.0
Complex.java,tanh,real,double,0,RET,$ < -20.0
Complex.java,nthRoot,n,int,0,NotPositiveException,$ <= 0
ComplexUtils.java,polar2Complex,r,double,0,MathIllegalArgumentException,$ < 0
DescriptiveStatistics.java,DescriptiveStatistics,initialDoubleArray,double[],0,DEF,$ != null
DescriptiveStatistics.java,addValue,windowSize,int,1,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,MathIllegalArgumentException,$ < 1
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,MathIllegalArgumentException,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,getPercentile,percentileImpl,null,1,DEF,$ instanceof Percentile
AbstractStorelessUnivariateStatistic.java,evaluate,values,double[],0,NullArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,incrementAll,values,double[],0,NullArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,equals,object,Object,0,RET,$ instanceof AbstractStorelessUnivariateStatistic == false
AbstractStorelessUnivariateStatistic.java,equals,object,null,0,RET,$ instanceof AbstractStorelessUnivariateStatistic
StatisticalSummaryValues.java,equals,object,Object,0,RET,$ instanceof StatisticalSummaryValues == false
StatisticalSummaryValues.java,equals,object,null,0,RET,$ instanceof StatisticalSummaryValues
FirstMoment.java,increment,n,long,0,DEF,$ == 0
GeometricMean.java,getResult,sumOfLogs,StorelessUnivariateStatistic,1,RET,$.getN() > 0
ThirdMoment.java,increment,n,long,0,DEF,$ < 1
Kurtosis.java,getResult,moment,FourthMoment,0,DEF,$.getN() > 3
Kurtosis.java,getResult,moment,FirstMoment,1,DEF,$.n <= 3
Kurtosis.java,getResult,variance,double,1,DEF,$ < 10E-20
Kurtosis.java,evaluate,length,int,0,DEF,$ > 3
Skewness.java,getResult,moment,FirstMoment,0,RET,$.n < 3
Skewness.java,getResult,variance,double,1,RET,$ < 10E-20
Skewness.java,evaluate,length,int,0,DEF,$ > 2
FourthMoment.java,increment,n,long,0,DEF,$ < 1
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 0
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 1
Variance.java,evaluate,values,double[],0,NullArgumentException,$ == null
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
VectorialCovariance.java,increment,v,double[],0,DimensionMismatchException,$.length != sums.length
VectorialCovariance.java,getResult,n,long,0,DEF,$ > 1
VectorialCovariance.java,equals,obj,null,0,RET,$ instanceof VectorialCovariance
VectorialCovariance.java,equals,isBiasCorrected,boolean,0,RET,$ != other.isBiasCorrected
VectorialCovariance.java,equals,n,long,0,RET,$ != other.n
SecondMoment.java,increment,n,long,0,DEF,$ < 1
VectorialMean.java,increment,v,double[],0,DimensionMismatchException,$.length != means.length
VectorialMean.java,equals,obj,null,0,RET,$ instanceof VectorialMean
SemiVariance.java,evaluate,values,double[],1,RET,$.length == 0
SemiVariance.java,evaluate,values,double[],1,RET,$.length == 1
SemiVariance.java,evaluate,values,double[],0,DEF,($[i] > cutoff) == booleanDirection
SemiVariance.java,evaluate,i,int,0,DEF,(values[$] > cutoff) == booleanDirection
SemiVariance.java,evaluate,cutoff,double,0,DEF,(values[i] > $) == booleanDirection
SemiVariance.java,evaluate,values,double[],0,DEF,$[i] > cutoff
SemiVariance.java,evaluate,i,int,0,DEF,values[$] > cutoff
Percentile.java,setData,values,double[],1,DEF,$ == null
Percentile.java,setData,values,double[],1,DEF,$ == null
Percentile.java,evaluate,p,double,0,OutOfRangeException,$ > 100
Percentile.java,evaluate,p,double,0,OutOfRangeException,$ <= 0
Percentile.java,evaluate,length,int,0,RET,$ == 0
Percentile.java,evaluate,length,int,0,RET,$ == 1
Percentile.java,evaluate,pos,double,0,RET,$ < 1
Percentile.java,evaluate,pos,double,0,RET,$ >= n
Percentile.java,select,node,int,1,DEF,$ < pivotsHeap.length
Percentile.java,select,node,int,1,DEF,pivotsHeap[$] >= 0
Percentile.java,select,pivotsHeap,int[],1,DEF,$[node] >= 0
Percentile.java,select,node,int,0,DEF,$ < pivotsHeap.length
Percentile.java,select,k,int,1,RET,$ == pivot
Percentile.java,select,k,int,1,DEF,$ < pivot
Percentile.java,medianOf3,wBegin,double,1,RET,$ < wMiddle
Percentile.java,medianOf3,wMiddle,double,1,RET,$ < wEnd
Percentile.java,medianOf3,wBegin,double,1,RET,$ < wEnd
Percentile.java,partition,i,int,0,DEF,$ < j
Percentile.java,partition,i,int,0,DEF,$ >= end
Percentile.java,partition,work,double[],0,DEF,$[i] > value
Percentile.java,partition,i,int,0,DEF,work[$] > value
Percentile.java,setQuantile,p,double,0,OutOfRangeException,$ <= 0
Percentile.java,setQuantile,p,double,0,OutOfRangeException,$ > 100
Percentile.java,copy,source,Percentile,0,DEF,$.cachedPivots != null
Max.java,increment,d,double,0,DEF,$ > value
Min.java,increment,d,double,0,DEF,$ < value
AbstractUnivariateStatistic.java,setData,values,double[],0,NullArgumentException,$ == null
AbstractUnivariateStatistic.java,setData,begin,int,0,NotPositiveException,$ < 0
AbstractUnivariateStatistic.java,setData,length,int,0,NotPositiveException,$ < 0
AbstractUnivariateStatistic.java,setData,length,int,0,NumberIsTooLargeException,begin + $ > values.length
AbstractUnivariateStatistic.java,setData,begin,int,0,NumberIsTooLargeException,$ + length > values.length
AbstractUnivariateStatistic.java,test,values,double[],0,NullArgumentException,$ == null
AbstractUnivariateStatistic.java,test,begin,int,0,NotPositiveException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,NotPositiveException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,NumberIsTooLargeException,begin + $ > values.length
AbstractUnivariateStatistic.java,test,begin,int,0,NumberIsTooLargeException,$ + length > values.length
AbstractUnivariateStatistic.java,test,length,int,0,RET,$ == 0
AbstractUnivariateStatistic.java,test,weights,double[],0,NullArgumentException,$ == null
AbstractUnivariateStatistic.java,test,values,double[],0,NullArgumentException,$ == null
AbstractUnivariateStatistic.java,test,weights,double[],0,DimensionMismatchException,$.length != values.length
AbstractUnivariateStatistic.java,test,i,int,0,MathIllegalArgumentException,weights[$] < 0
AbstractUnivariateStatistic.java,test,weights,double[],0,MathIllegalArgumentException,$[i] < 0
AbstractUnivariateStatistic.java,test,i,int,0,DEF,weights[$] > 0.0
AbstractUnivariateStatistic.java,test,weights,double[],0,DEF,$[i] > 0.0
MultivariateSummaryStatistics.java,append,i,int,0,DEF,$ > 0
MultivariateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof MultivariateSummaryStatistics == false
MultivariateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof MultivariateSummaryStatistics
MultivariateSummaryStatistics.java,checkEmpty,n,long,0,MathIllegalStateException,$ > 0
MultivariateSummaryStatistics.java,checkDimension,dimension,int,0,DimensionMismatchException,$ != k
AggregateSummaryStatistics.java,aggregate,statistics,Collection<SummaryStatistics>,0,RET,$ == null
AggregateSummaryStatistics.java,aggregate,current,SummaryStatistics,0,DEF,$.getMin() < min
AggregateSummaryStatistics.java,aggregate,current,SummaryStatistics,0,DEF,$.getMax() > max
AggregateSummaryStatistics.java,aggregate,n,long,1,DEF,$ == 0
AggregateSummaryStatistics.java,aggregate,n,long,1,DEF,$ == 1
AggregateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof AggregatingSummaryStatistics == false
AggregateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof AggregatingSummaryStatistics
SummaryStatistics.java,addValue,meanImpl,StorelessUnivariateStatistic,0,DEF,$ != mean
SummaryStatistics.java,addValue,varianceImpl,StorelessUnivariateStatistic,0,DEF,$ != variance
SummaryStatistics.java,addValue,geoMeanImpl,StorelessUnivariateStatistic,0,DEF,$ != geoMean
SummaryStatistics.java,clear,meanImpl,StorelessUnivariateStatistic,0,DEF,$ != mean
SummaryStatistics.java,clear,varianceImpl,StorelessUnivariateStatistic,0,DEF,$ != variance
SummaryStatistics.java,equals,object,Object,0,RET,$ instanceof SummaryStatistics == false
SummaryStatistics.java,equals,object,null,0,RET,$ instanceof SummaryStatistics
SummaryStatistics.java,checkEmpty,n,long,0,MathIllegalStateException,$ > 0
SummaryStatistics.java,copy,source.meanImpl,null,1,DEF,$ instanceof Mean
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.geoMean == source.geoMeanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.max == source.maxImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.mean == source.meanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.min == source.minImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sum == source.sumImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.variance == source.varianceImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumLog == source.sumLogImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumsq == source.sumsqImpl
GTest.java,g,expected,double[],0,DimensionMismatchException,$.length < 2
GTest.java,g,expected,double[],0,DimensionMismatchException,$.length != observed.length
GTest.java,g,sumObserved,double,0,DEF,Math.abs(sumExpected - $) > 10E-6
GTest.java,g,sumExpected,double,0,DEF,Math.abs($ - sumObserved) > 10E-6
GTest.java,gTest,alpha,double,0,OutOfRangeException,$ <= 0
GTest.java,gTest,alpha,double,0,OutOfRangeException,$ > 0.5
GTest.java,entropy,i,int,0,DEF,k[$][j] != 0
GTest.java,entropy,j,int,0,DEF,k[i][$] != 0
GTest.java,entropy,k,long[][],0,DEF,$[i][j] != 0
GTest.java,entropy,i,int,0,DEF,k[$] != 0
GTest.java,entropy,k,long[],0,DEF,$[i] != 0
GTest.java,gDataSetsComparison,observed1,long[],0,DimensionMismatchException,$.length < 2
GTest.java,gDataSetsComparison,observed1,long[],0,DimensionMismatchException,$.length != observed2.length
GTest.java,gDataSetsComparison,i,int,1,ZeroException,observed1[$] == 0
GTest.java,gDataSetsComparison,observed1,long[],1,ZeroException,$[i] == 0
GTest.java,gDataSetsComparison,observed2,long[],1,ZeroException,$[i] == 0
GTest.java,gDataSetsComparison,i,int,1,ZeroException,observed2[$] == 0
GTest.java,gDataSetsComparison,countSum1,long,0,ZeroException,$ == 0
GTest.java,gDataSetsComparison,countSum2,long,0,ZeroException,$ == 0
GTest.java,gTestDataSetsComparison,alpha,double,0,OutOfRangeException,$ <= 0
GTest.java,gTestDataSetsComparison,alpha,double,0,OutOfRangeException,$ > 0.5
MannWhitneyUTest.java,ensureDataConformance,x,double[],0,NullArgumentException,$ == null
MannWhitneyUTest.java,ensureDataConformance,y,double[],0,NullArgumentException,$ == null
MannWhitneyUTest.java,ensureDataConformance,x,double[],0,NoDataException,$.length == 0
MannWhitneyUTest.java,ensureDataConformance,y,double[],0,NoDataException,$.length == 0
ChiSquareTest.java,chiSquare,expected,double[],0,DimensionMismatchException,$.length < 2
ChiSquareTest.java,chiSquare,expected,double[],0,DimensionMismatchException,$.length != observed.length
ChiSquareTest.java,chiSquare,sumObserved,double,0,DEF,FastMath.abs(sumExpected - $) > 10E-6
ChiSquareTest.java,chiSquare,sumExpected,double,0,DEF,FastMath.abs($ - sumObserved) > 10E-6
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ <= 0
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ > 0.5
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ <= 0
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ > 0.5
ChiSquareTest.java,chiSquareDataSetsComparison,observed1,long[],0,DimensionMismatchException,$.length < 2
ChiSquareTest.java,chiSquareDataSetsComparison,observed1,long[],0,DimensionMismatchException,$.length != observed2.length
ChiSquareTest.java,chiSquareDataSetsComparison,countSum1,long,0,ZeroException,$ == 0
ChiSquareTest.java,chiSquareDataSetsComparison,countSum2,long,0,ZeroException,$ == 0
ChiSquareTest.java,chiSquareDataSetsComparison,i,int,1,ZeroException,observed1[$] == 0
ChiSquareTest.java,chiSquareDataSetsComparison,observed1,long[],1,ZeroException,$[i] == 0
ChiSquareTest.java,chiSquareDataSetsComparison,observed2,long[],1,ZeroException,$[i] == 0
ChiSquareTest.java,chiSquareDataSetsComparison,i,int,1,ZeroException,observed2[$] == 0
ChiSquareTest.java,chiSquareTestDataSetsComparison,alpha,double,0,OutOfRangeException,$ <= 0
ChiSquareTest.java,chiSquareTestDataSetsComparison,alpha,double,0,OutOfRangeException,$ > 0.5
ChiSquareTest.java,checkArray,in,long[][],0,DimensionMismatchException,$.length < 2
ChiSquareTest.java,checkArray,in,long[][],0,DimensionMismatchException,$[0].length < 2
TTest.java,checkSignificanceLevel,alpha,double,0,OutOfRangeException,$ <= 0
TTest.java,checkSignificanceLevel,alpha,double,0,OutOfRangeException,$ > 0.5
TTest.java,checkSampleData,data,double[],0,NullArgumentException,$ == null
TTest.java,checkSampleData,data,double[],0,NumberIsTooSmallException,$.length < 2
TTest.java,checkSampleData,stat,StatisticalSummary,0,NullArgumentException,$ == null
TTest.java,checkSampleData,stat,StatisticalSummary,0,NumberIsTooSmallException,$.getN() < 2
OneWayAnova.java,anovaTest,alpha,double,0,OutOfRangeException,$ <= 0
OneWayAnova.java,anovaTest,alpha,double,0,OutOfRangeException,$ > 0.5
OneWayAnova.java,anovaStats,categoryData,Collection<SummaryStatistics>,0,DimensionMismatchException,$.size() < 2
OneWayAnova.java,anovaStats,array,SummaryStatistics,0,DimensionMismatchException,$.getN() <= 1
WilcoxonSignedRankTest.java,ensureDataConformance,x,double[],0,NullArgumentException,$ == null
WilcoxonSignedRankTest.java,ensureDataConformance,y,double[],0,NullArgumentException,$ == null
WilcoxonSignedRankTest.java,ensureDataConformance,x,double[],0,NoDataException,$.length == 0
WilcoxonSignedRankTest.java,ensureDataConformance,y,double[],0,NoDataException,$.length == 0
WilcoxonSignedRankTest.java,ensureDataConformance,y,double[],0,DimensionMismatchException,$.length != x.length
WilcoxonSignedRankTest.java,calculateAbsoluteDifferences,z,double[],0,NullArgumentException,$ == null
WilcoxonSignedRankTest.java,calculateAbsoluteDifferences,z,double[],0,NoDataException,$.length == 0
WilcoxonSignedRankTest.java,wilcoxonSignedRank,i,int,0,DEF,z[$] > 0
WilcoxonSignedRankTest.java,wilcoxonSignedRank,z,double[],0,DEF,$[i] > 0
WilcoxonSignedRankTest.java,calculateExactPValue,i,int,0,DEF,(($ >> j) & 1) == 1
WilcoxonSignedRankTest.java,calculateExactPValue,j,int,0,DEF,((i >> $) & 1) == 1
WilcoxonSignedRankTest.java,calculateExactPValue,rankSum,int,0,DEF,$ >= Wmax
WilcoxonSignedRankTest.java,wilcoxonSignedRankTest,N,int,0,NumberIsTooLargeException,$ > 30
NaturalRanking.java,rank,nanPositions,List<Integer>,0,NotANumberException,$.size() > 0
NaturalRanking.java,rank,ranks,IntDoublePair[],1,DEF,Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
NaturalRanking.java,rank,i,int,1,DEF,Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
NaturalRanking.java,rank,tiesTrace,List<Integer>,0,DEF,$.size() > 1
NaturalRanking.java,rank,tiesTrace,List<Integer>,0,DEF,$.size() > 1
NaturalRanking.java,rank,nanStrategy,NaNStrategy,0,DEF,$ == NaNStrategy.FIXED
NaturalRanking.java,restoreNaNs,nanPositions,List<Integer>,0,RET,$.size() == 0
StatUtils.java,sumDifference,n,int,0,DimensionMismatchException,$ != sample2.length
StatUtils.java,sumDifference,n,int,0,NoDataException,$ <= 0
StatUtils.java,varianceDifference,n,int,0,DimensionMismatchException,$ != sample2.length
StatUtils.java,varianceDifference,n,int,0,NumberIsTooSmallException,$ < 2
KMeansPlusPlusClusterer.java,cluster,varianceSum,double,0,DEF,$ <= bestVarianceSum
KMeansPlusPlusClusterer.java,cluster,points,Collection<T>,0,NumberIsTooSmallException,$.size() < k
KMeansPlusPlusClusterer.java,cluster,changes,int,0,RET,$ == 0
KMeansPlusPlusClusterer.java,chooseInitialCenters,i,int,0,DEF,$ != firstPointIndex
KMeansPlusPlusClusterer.java,chooseInitialCenters,sum,double,0,DEF,$ >= r
KMeansPlusPlusClusterer.java,chooseInitialCenters,nextPointIndex,int,0,DEF,$ == -1
KMeansPlusPlusClusterer.java,chooseInitialCenters,nextPointIndex,int,1,DEF,$ >= 0
KMeansPlusPlusClusterer.java,chooseInitialCenters,resultSet,List<Cluster<T>>,0,DEF,$.size() < k
KMeansPlusPlusClusterer.java,getPointFromLargestVarianceCluster,variance,double,0,DEF,$ > maxVariance
KMeansPlusPlusClusterer.java,getPointFromLargestVarianceCluster,selected,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getPointFromLargestNumberCluster,number,int,0,DEF,$ > maxNumber
KMeansPlusPlusClusterer.java,getPointFromLargestNumberCluster,selected,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getFarthestPoint,distance,double,0,DEF,$ > maxDistance
KMeansPlusPlusClusterer.java,getFarthestPoint,selectedCluster,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getNearestCluster,distance,double,0,DEF,$ < minDistance
EuclideanIntegerPoint.java,equals,other,null,0,RET,$ instanceof EuclideanIntegerPoint
DBSCANClusterer.java,DBSCANClusterer,eps,double,0,NotPositiveException,$ < 0.0d
DBSCANClusterer.java,DBSCANClusterer,minPts,int,0,NotPositiveException,$ < 0
DBSCANClusterer.java,cluster,visited,Map<Clusterable<T>,PointStatus>,0,DEF,$.get(point) != null
DBSCANClusterer.java,cluster,point,T,0,DEF,visited.get($) != null
DBSCANClusterer.java,cluster,neighbors,List<T>,1,DEF,$.size() >= minPts
DBSCANClusterer.java,expandCluster,pStatus,PointStatus,0,DEF,$ == null
DBSCANClusterer.java,expandCluster,currentNeighbors,List<T>,0,DEF,$.size() >= minPts
DBSCANClusterer.java,expandCluster,pStatus,PointStatus,0,DEF,$ != PointStatus.PART_OF_CLUSTER
DBSCANClusterer.java,getNeighbors,point,T,0,DEF,$ != neighbor
DBSCANClusterer.java,getNeighbors,neighbor,T,0,DEF,$.distanceFrom(point) <= eps
DBSCANClusterer.java,getNeighbors,point,T,0,DEF,neighbor.distanceFrom($) <= eps
EuclideanDoublePoint.java,equals,other,null,0,RET,$ instanceof EuclideanDoublePoint
PearsonsCorrelation.java,PearsonsCorrelation,covarianceMatrix,RealMatrix,0,NullArgumentException,$ == null
PearsonsCorrelation.java,getCorrelationPValues,i,int,1,DEF,$ == j
PearsonsCorrelation.java,correlation,xArray,double[],1,DimensionMismatchException,$.length != yArray.length
PearsonsCorrelation.java,correlation,xArray,double[],1,MathIllegalArgumentException,$.length < 2
PearsonsCorrelation.java,checkSufficientData,nRows,int,0,MathIllegalArgumentException,$ < 2
PearsonsCorrelation.java,checkSufficientData,nCols,int,0,MathIllegalArgumentException,$ < 2
StorelessBivariateCovariance.java,getResult,n,double,0,NumberIsTooSmallException,$ < 2
SpearmansCorrelation.java,correlation,xArray,double[],1,DimensionMismatchException,$.length != yArray.length
SpearmansCorrelation.java,correlation,xArray,double[],1,MathIllegalArgumentException,$.length < 2
Covariance.java,covariance,length,int,1,MathIllegalArgumentException,$ != yArray.length
Covariance.java,covariance,length,int,1,MathIllegalArgumentException,$ < 2
Covariance.java,checkSufficientData,nRows,int,0,MathIllegalArgumentException,$ < 2
Covariance.java,checkSufficientData,nCols,int,0,MathIllegalArgumentException,$ < 1
StorelessCovariance.java,increment,length,int,0,DimensionMismatchException,$ != dimension
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ == j
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ < p
MillerUpdatingRegression.java,MillerUpdatingRegression,numberOfVariables,int,0,ModelSpecificationException,$ < 1
MillerUpdatingRegression.java,MillerUpdatingRegression,errorTolerance,double,1,DEF,$ > 0
MillerUpdatingRegression.java,addObservation,x,double[],0,ModelSpecificationException,$.length != nvars
MillerUpdatingRegression.java,addObservation,x,double[],0,ModelSpecificationException,$.length + 1 != nvars
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$ == null
MillerUpdatingRegression.java,addObservations,y,double[],0,ModelSpecificationException,$ == null
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$.length != y.length
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$.length == 0
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$[0].length + 1 > x.length
MillerUpdatingRegression.java,include,w,double,0,RET,$ == 0.0
MillerUpdatingRegression.java,include,xi,double,0,DEF,$ == 0.0
MillerUpdatingRegression.java,include,di,double,1,DEF,$ != 0.0
MillerUpdatingRegression.java,include,tmp,double,0,DEF,FastMath.abs($) > Precision.EPSILON
MillerUpdatingRegression.java,include,di,double,1,DEF,$ != 0.0
MillerUpdatingRegression.java,include,di,double,1,DEF,$ != 0.0
MillerUpdatingRegression.java,smartAdd,_a,double,1,RET,$ > _b
MillerUpdatingRegression.java,smartAdd,_b,double,0,RET,$ > eps
MillerUpdatingRegression.java,smartAdd,_a,double,0,RET,$ > eps
MillerUpdatingRegression.java,regcf,nreq,int,0,ModelSpecificationException,$ < 1
MillerUpdatingRegression.java,singcheck,r,double[],0,DEF,Math.abs($[pos]) * work_sing[row] < temp
MillerUpdatingRegression.java,singcheck,work_sing,double[],0,DEF,Math.abs(r[pos]) * $[row] < temp
MillerUpdatingRegression.java,singcheck,pos,int,0,DEF,Math.abs(r[$]) * work_sing[row] < temp
MillerUpdatingRegression.java,singcheck,row,int,0,DEF,Math.abs(r[pos]) * work_sing[$] < temp
MillerUpdatingRegression.java,singcheck,col,int,0,DEF,work_sing[$] < temp
MillerUpdatingRegression.java,singcheck,work_sing,double[],0,DEF,$[col] < temp
MillerUpdatingRegression.java,cov,row,int,1,DEF,$ == col
MillerUpdatingRegression.java,getPartialCorrelations,in,int,0,RET,$ < -1
MillerUpdatingRegression.java,getPartialCorrelations,in,int,0,RET,$ >= nvars
MillerUpdatingRegression.java,getPartialCorrelations,d,double[],0,DEF,$[in] > 0.0
MillerUpdatingRegression.java,getPartialCorrelations,in,int,0,DEF,d[$] > 0.0
MillerUpdatingRegression.java,getPartialCorrelations,sumxx,double,1,DEF,$ > 0.0
MillerUpdatingRegression.java,getPartialCorrelations,sumyy,double,0,DEF,$ > 0.0
MillerUpdatingRegression.java,vmove,from,int,0,RET,$ == to
MillerUpdatingRegression.java,vmove,from,int,1,DEF,$ < to
MillerUpdatingRegression.java,vmove,m,int,0,DEF,$ > 0
MillerUpdatingRegression.java,reorderRegressors,list,int[],0,RET,$.length < 1
MillerUpdatingRegression.java,reorderRegressors,i,int,0,RET,$ > next
MillerUpdatingRegression.java,getDiagonalOfHatMatrix,row_data,double[],0,RET,$.length > nvars
MillerUpdatingRegression.java,regress,i,int,0,DEF,this.vorder[$] != i
MillerUpdatingRegression.java,regress,j,int,0,DEF,this.vorder[$] == i
MillerUpdatingRegression.java,regress,_i,int,1,DEF,$ > _j
MillerUpdatingRegression.java,regress,i,int,0,DEF,$ > 0
MillerUpdatingRegression.java,regress,iExclude,int,1,DEF,$ > 0
MillerUpdatingRegression.java,regress,variablesToInclude,int[],0,DEF,$[i] > -1
MillerUpdatingRegression.java,regress,i,int,0,DEF,variablesToInclude[$] > -1
MillerUpdatingRegression.java,regress,_i,int,1,DEF,$ > _j
AbstractMultipleLinearRegression.java,newSampleData,data,double[],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,newSampleData,nobs,int,0,NumberIsTooSmallException,$ <= nvars
AbstractMultipleLinearRegression.java,newYSampleData,y,double[],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,newYSampleData,y,double[],0,NoDataException,$.length == 0
AbstractMultipleLinearRegression.java,newXSampleData,x,double[][],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,newXSampleData,x,double[][],0,NoDataException,$.length == 0
AbstractMultipleLinearRegression.java,newXSampleData,x,double[][],0,DimensionMismatchException,$[i].length != nVars
AbstractMultipleLinearRegression.java,newXSampleData,i,int,0,DimensionMismatchException,x[$].length != nVars
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,y,double[],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,DimensionMismatchException,$.length != y.length
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,NoDataException,$.length == 0
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,MathIllegalArgumentException,$[0].length + 1 > x.length
AbstractMultipleLinearRegression.java,validateCovarianceData,x,double[][],0,DimensionMismatchException,$.length != covariance.length
AbstractMultipleLinearRegression.java,validateCovarianceData,covariance,double[][],0,NonSquareMatrixException,$.length > 0
SimpleRegression.java,addData,n,long,1,DEF,$ == 0
SimpleRegression.java,removeData,n,long,0,DEF,$ > 0
SimpleRegression.java,addData,data,double[][],0,ModelSpecificationException,$[i].length < 2
SimpleRegression.java,addData,i,int,0,ModelSpecificationException,data[$].length < 2
SimpleRegression.java,addObservation,x,double[],0,ModelSpecificationException,$ == null
SimpleRegression.java,addObservation,x,double[],0,ModelSpecificationException,$.length == 0
SimpleRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$ == null
SimpleRegression.java,addObservations,y,double[],0,ModelSpecificationException,$ == null
SimpleRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$.length != y.length
SimpleRegression.java,addObservations,x,double[][],0,DEF,$[i] == null
SimpleRegression.java,addObservations,i,int,0,DEF,x[$] == null
SimpleRegression.java,addObservations,x,double[][],0,DEF,$[i].length == 0
SimpleRegression.java,addObservations,i,int,0,DEF,x[$].length == 0
SimpleRegression.java,getSlope,n,long,0,RET,$ < 2
SimpleRegression.java,getTotalSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getXSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getMeanSquareError,n,long,0,RET,$ < 3
SimpleRegression.java,getR,b1,double,0,DEF,$ < 0
SimpleRegression.java,getSlopeConfidenceInterval,n,long,0,RET,$ < 3
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,OutOfRangeException,$ >= 1
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,OutOfRangeException,$ <= 0
SimpleRegression.java,getSignificance,n,long,0,RET,$ < 3
SimpleRegression.java,regress,n,long,0,NoDataException,$ < 3
SimpleRegression.java,regress,sumXX,double,1,RET,FastMath.abs( $ ) > Precision.SAFE_MIN
SimpleRegression.java,regress,n,long,0,NoDataException,$ < 2
SimpleRegression.java,regress,variablesToInclude,int[],0,MathIllegalArgumentException,$ == null
SimpleRegression.java,regress,variablesToInclude,int[],0,MathIllegalArgumentException,$.length == 0
SimpleRegression.java,regress,variablesToInclude,int[],0,ModelSpecificationException,$.length > 2
SimpleRegression.java,regress,variablesToInclude,int[],0,ModelSpecificationException,$.length > 1
SimpleRegression.java,regress,variablesToInclude,int[],1,OutOfRangeException:RET,$.length == 2
SimpleRegression.java,regress,variablesToInclude,int[],1,ModelSpecificationException,$[0] == 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 0
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[1] != 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 0
SimpleRegression.java,regress,variablesToInclude,int[],1,RET,$[0] == 0
SimpleRegression.java,regress,variablesToInclude,int[],0,RET,$[0] == 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 0
GLSMultipleLinearRegression.java,getOmegaInverse,OmegaInverse,RealMatrix,0,DEF,$ == null
RegressionResults.java,RegressionResults,rank,int,0,DEF,$ > 0
RegressionResults.java,getParameterEstimate,parameters,double[],0,RET,$ == null
RegressionResults.java,getParameterEstimate,index,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getStdErrorOfEstimate,parameters,double[],0,RET,$ == null
RegressionResults.java,getStdErrorOfEstimate,index,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getStdErrorOfEstimate,var,double,0,RET,$ > Double.MIN_VALUE
RegressionResults.java,getStdErrorOfEstimates,parameters,double[],0,RET,$ == null
RegressionResults.java,getStdErrorOfEstimates,var,double,0,DEF,$ > Double.MIN_VALUE
RegressionResults.java,getCovarianceOfParameters,parameters,double[],0,RET,$ == null
RegressionResults.java,getCovarianceOfParameters,i,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getCovarianceOfParameters,j,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getVcvElement,i,int,1,RET,$ == j
RegressionResults.java,getVcvElement,i,int,1,RET,$ > j
Frequency.java,incrementValue,v,null,0,DEF,$ instanceof Integer
Frequency.java,incrementValue,count,Long,1,DEF,$ == null
Frequency.java,getCount,v,null,0,RET,$ instanceof Integer
Frequency.java,getCount,count,Long,0,DEF,$ != null
Frequency.java,getPct,sumFreq,long,0,RET,$ == 0
Frequency.java,getCumFreq,v,null,0,RET,$ instanceof Integer
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,DEF,$ == null
Frequency.java,getCumFreq,value,Long,0,DEF,$ != null
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,RET,$.compare(v, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,v,Comparable<>,0,RET,c.compare($, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,freqTable,TreeMap<Comparable<?>,Long>,0,RET,c.compare(v, $.firstKey()) < 0
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,RET,$.compare(v, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,v,Comparable<>,0,RET,c.compare($, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,freqTable,TreeMap<Comparable<?>,Long>,0,RET,c.compare(v, $.lastKey()) >= 0
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,1,DEF,$.compare(v, nextValue) > 0
Frequency.java,getCumFreq,v,Comparable<>,1,DEF,c.compare($, nextValue) > 0
Frequency.java,getCumFreq,nextValue,Comparable<>,1,DEF,c.compare(v, $) > 0
Frequency.java,getCumPct,sumFreq,long,0,RET,$ == 0
Frequency.java,equals,obj,null,0,RET,$ instanceof Frequency
Frequency.java,equals,freqTable,TreeMap<Comparable<?>,Long>,1,RET,$ == null
Frequency.java,equals,other,Frequency,0,RET,$.freqTable != null
KalmanFilter.java,KalmanFilter,processModel,ProcessModel,1,DEF,$.getControlMatrix() == null
KalmanFilter.java,KalmanFilter,processModel,ProcessModel,1,DEF,$.getInitialStateEstimate() == null
KalmanFilter.java,KalmanFilter,processModel,ProcessModel,1,DEF,$.getInitialErrorCovariance() == null
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$ != null
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() > 0
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() > 0
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
KalmanFilter.java,KalmanFilter,measNoise,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
KalmanFilter.java,predict,u,RealVector,0,DimensionMismatchException,$ != null
KalmanFilter.java,predict,u,RealVector,0,DEF,$ != null
TriangularDistribution.java,TriangularDistribution,a,double,0,NumberIsTooLargeException,$ >= b
TriangularDistribution.java,TriangularDistribution,c,double,0,NumberIsTooSmallException,$ < a
TriangularDistribution.java,TriangularDistribution,c,double,0,NumberIsTooLargeException,$ > b
TriangularDistribution.java,density,x,double,0,RET,$ < a
TriangularDistribution.java,density,a,double,0,RET,$ <= x
TriangularDistribution.java,density,x,double,0,RET,$ < c
TriangularDistribution.java,density,x,double,0,RET,$ == c
TriangularDistribution.java,density,c,double,0,RET,$ < x
TriangularDistribution.java,density,x,double,0,RET,$ <= b
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ < a
TriangularDistribution.java,cumulativeProbability,a,double,0,RET,$ <= x
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ < c
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ == c
TriangularDistribution.java,cumulativeProbability,c,double,0,RET,$ < x
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ <= b
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
EnumeratedDistribution.java,EnumeratedDistribution,p,double,0,NotPositiveException,$ < 0
EnumeratedDistribution.java,probability,x,T,0,DEF,$ == null
EnumeratedDistribution.java,probability,i,int,0,DEF,singletons.get($) == null
EnumeratedDistribution.java,probability,singletons,List<T>,0,DEF,$.get(i) == null
EnumeratedDistribution.java,probability,x,T,0,DEF,$ != null
EnumeratedDistribution.java,sample,randomValue,double,0,RET,$ < sum
EnumeratedDistribution.java,sample,sampleSize,int,0,NotStrictlyPositiveException,$ <= 0
EnumeratedDistribution.java,sample,sampleSize,int,0,NotStrictlyPositiveException,$ <= 0
EnumeratedDistribution.java,sample,array,T[],0,NullArgumentException,$ == null
EnumeratedDistribution.java,sample,array,T[],1,DEF,$.length < sampleSize
ZipfDistribution.java,ZipfDistribution,numberOfElements,int,0,NotStrictlyPositiveException,$ <= 0
ZipfDistribution.java,ZipfDistribution,exponent,double,0,NotStrictlyPositiveException,$ <= 0
ZipfDistribution.java,probability,x,int,0,RET,$ <= 0
ZipfDistribution.java,probability,x,int,0,RET,$ > numberOfElements
ZipfDistribution.java,cumulativeProbability,x,int,1,RET,$ <= 0
ZipfDistribution.java,cumulativeProbability,x,int,0,RET,$ >= numberOfElements
HypergeometricDistribution.java,HypergeometricDistribution,populationSize,int,0,NotStrictlyPositiveException,$ <= 0
HypergeometricDistribution.java,HypergeometricDistribution,numberOfSuccesses,int,0,NotPositiveException,$ < 0
HypergeometricDistribution.java,HypergeometricDistribution,sampleSize,int,0,NotPositiveException,$ < 0
HypergeometricDistribution.java,HypergeometricDistribution,numberOfSuccesses,int,0,NumberIsTooLargeException,$ > populationSize
HypergeometricDistribution.java,HypergeometricDistribution,sampleSize,int,0,NumberIsTooLargeException,$ > populationSize
MultivariateNormalDistribution.java,MultivariateNormalDistribution,covariances,double[][],0,DimensionMismatchException,$.length != dim
MultivariateNormalDistribution.java,MultivariateNormalDistribution,i,int,0,NonPositiveDefiniteMatrixException,covMatEigenvalues[$] < 0
MultivariateNormalDistribution.java,MultivariateNormalDistribution,covMatEigenvalues,double[],0,NonPositiveDefiniteMatrixException,$[i] < 0
MultivariateNormalDistribution.java,density,vals,double[],0,DimensionMismatchException,$.length != dim
WeibullDistribution.java,WeibullDistribution,alpha,double,0,NotStrictlyPositiveException,$ <= 0
WeibullDistribution.java,WeibullDistribution,beta,double,0,NotStrictlyPositiveException,$ <= 0
WeibullDistribution.java,density,x,double,0,RET,$ < 0
WeibullDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ < 0.0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ > 1.0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
EnumeratedIntegerDistribution.java,EnumeratedIntegerDistribution,singletons,int[],0,DimensionMismatchException,$.length != probabilities.length
EnumeratedIntegerDistribution.java,cumulativeProbability,sample,Pair<Integer,Double>,0,DEF,$.getKey() <= x
EnumeratedIntegerDistribution.java,getSupportLowerBound,sample,Pair<Integer,Double>,0,DEF,$.getKey() < min
EnumeratedIntegerDistribution.java,getSupportLowerBound,sample,Pair<Integer,Double>,0,DEF,$.getValue() > 0
EnumeratedIntegerDistribution.java,getSupportUpperBound,sample,Pair<Integer,Double>,0,DEF,$.getKey() > max
EnumeratedIntegerDistribution.java,getSupportUpperBound,sample,Pair<Integer,Double>,0,DEF,$.getValue() > 0
NormalDistribution.java,NormalDistribution,sd,double,0,NotStrictlyPositiveException,$ <= 0
NormalDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0.0
NormalDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1.0
NormalDistribution.java,probability,x0,double,0,NumberIsTooLargeException,$ > x1
CauchyDistribution.java,CauchyDistribution,scale,double,0,NotStrictlyPositiveException,$ <= 0
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ < 0
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ > 1
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
TDistribution.java,TDistribution,degreesOfFreedom,double,0,NotStrictlyPositiveException,$ <= 0
TDistribution.java,cumulativeProbability,x,double,1,DEF,$ == 0
TDistribution.java,cumulativeProbability,x,double,1,DEF,$ < 0.0
TDistribution.java,getNumericalMean,df,double,0,RET,$ > 1
TDistribution.java,getNumericalVariance,df,double,0,RET,$ > 2
TDistribution.java,getNumericalVariance,df,double,0,RET,$ > 1
TDistribution.java,getNumericalVariance,df,double,0,RET,$ <= 2
LogNormalDistribution.java,LogNormalDistribution,shape,double,0,NotStrictlyPositiveException,$ <= 0
LogNormalDistribution.java,density,x,double,0,RET,$ <= 0
LogNormalDistribution.java,cumulativeProbability,x,double,0,RET,$ <= 0
LogNormalDistribution.java,probability,x0,double,0,NumberIsTooLargeException,$ > x1
LogNormalDistribution.java,probability,x0,double,0,RET,$ <= 0
LogNormalDistribution.java,probability,x1,double,0,RET,$ <= 0
PoissonDistribution.java,PoissonDistribution,p,double,0,NotStrictlyPositiveException,$ <= 0
PoissonDistribution.java,probability,x,int,1,DEF,$ < 0
PoissonDistribution.java,probability,x,int,1,DEF,$ == Integer.MAX_VALUE
PoissonDistribution.java,probability,x,int,1,DEF,$ == 0
PoissonDistribution.java,cumulativeProbability,x,int,0,RET,$ < 0
PoissonDistribution.java,cumulativeProbability,x,int,0,RET,$ == Integer.MAX_VALUE
PoissonDistribution.java,nextPoisson,meanPoisson,double,1,RET,$ < pivot
PoissonDistribution.java,nextPoisson,r,double,1,DEF,$ >= p
PoissonDistribution.java,nextPoisson,u,double,1,DEF,$ <= p1
PoissonDistribution.java,nextPoisson,x,double,0,DEF,$ > delta
PoissonDistribution.java,nextPoisson,x,double,0,DEF,$ < -lambda
PoissonDistribution.java,nextPoisson,v,double,0,DEF,$ < -t
PoissonDistribution.java,nextPoisson,a,int,0,DEF,$ == 0
PoissonDistribution.java,nextPoisson,v,double,0,DEF,$ < qa
PoissonDistribution.java,nextPoisson,v,double,0,DEF,$ > qr
BetaDistribution.java,density,x,double,1,RET,$ < 0
BetaDistribution.java,density,x,double,1,RET,$ > 1
BetaDistribution.java,density,x,double,1,NumberIsTooSmallException:RET,$ == 0
BetaDistribution.java,density,alpha,double,0,NumberIsTooSmallException,$ < 1
BetaDistribution.java,density,x,double,1,NumberIsTooSmallException:RET,$ == 1
BetaDistribution.java,density,beta,double,0,NumberIsTooSmallException,$ < 1
BetaDistribution.java,cumulativeProbability,x,double,1,RET,$ <= 0
BetaDistribution.java,cumulativeProbability,x,double,1,RET,$ >= 1
MultivariateNormalMixtureExpectationMaximization.java,MultivariateNormalMixtureExpectationMaximization,data,double[][],0,NotStrictlyPositiveException,$.length < 1
MultivariateNormalMixtureExpectationMaximization.java,MultivariateNormalMixtureExpectationMaximization,data,double[][],0,NumberIsTooSmallException,$[i].length < 2
MultivariateNormalMixtureExpectationMaximization.java,MultivariateNormalMixtureExpectationMaximization,i,int,0,NumberIsTooSmallException,data[$].length < 2
MultivariateNormalMixtureExpectationMaximization.java,fit,maxIterations,int,0,NotStrictlyPositiveException,$ < 1
MultivariateNormalMixtureExpectationMaximization.java,fit,threshold,double,0,NotStrictlyPositiveException,$ < Double.MIN_VALUE
MultivariateNormalMixtureExpectationMaximization.java,fit,numMeanColumns,int,0,DimensionMismatchException,$ != numCols
MultivariateNormalMixtureExpectationMaximization.java,fit,previousLogLikelihood,double,0,ConvergenceException,Math.abs($ - logLikelihood) > threshold
MultivariateNormalMixtureExpectationMaximization.java,fit,logLikelihood,double,0,ConvergenceException,Math.abs(previousLogLikelihood - $) > threshold
MultivariateNormalMixtureExpectationMaximization.java,estimate,data,double[][],0,NotStrictlyPositiveException,$.length < 2
MultivariateNormalMixtureExpectationMaximization.java,estimate,numComponents,int,0,NumberIsTooSmallException,$ < 2
MultivariateNormalMixtureExpectationMaximization.java,estimate,numComponents,int,0,NumberIsTooLargeException,$ > data.length
UniformIntegerDistribution.java,UniformIntegerDistribution,lower,int,0,NumberIsTooLargeException,$ >= upper
UniformIntegerDistribution.java,probability,x,int,0,RET,$ < lower
UniformIntegerDistribution.java,probability,x,int,0,RET,$ > upper
UniformIntegerDistribution.java,cumulativeProbability,x,int,0,RET,$ < lower
UniformIntegerDistribution.java,cumulativeProbability,x,int,0,RET,$ > upper
KolmogorovSmirnovDistribution.java,KolmogorovSmirnovDistribution,n,int,0,NotStrictlyPositiveException,$ <= 0
KolmogorovSmirnovDistribution.java,cdf,d,double,1,RET,$ <= ninvhalf
KolmogorovSmirnovDistribution.java,cdf,ninvhalf,double,1,RET,$ < d
KolmogorovSmirnovDistribution.java,cdf,d,double,1,RET,$ <= ninv
KolmogorovSmirnovDistribution.java,cdf,ninv,double,1,RET,1 - $ <= d
KolmogorovSmirnovDistribution.java,cdf,d,double,1,RET,$ < 1
KolmogorovSmirnovDistribution.java,createH,hDouble,double,0,NumberIsTooLargeException,$ >= 1
KolmogorovSmirnovDistribution.java,createH,i,int,1,DEF,$ - j + 1 < 0
KolmogorovSmirnovDistribution.java,createH,j,int,1,DEF,i - $ + 1 < 0
KolmogorovSmirnovDistribution.java,createH,h,BigFraction,0,DEF,$.compareTo(BigFraction.ONE_HALF) == 1
KolmogorovSmirnovDistribution.java,createH,i,int,0,DEF,$ - j + 1 > 0
KolmogorovSmirnovDistribution.java,createH,j,int,0,DEF,i - $ + 1 > 0
AbstractMultivariateRealDistribution.java,sample,sampleSize,int,0,NotStrictlyPositiveException,$ <= 0
AbstractRealDistribution.java,probability,x0,double,0,NumberIsTooLargeException,$ > x1
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0.0
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1.0
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 0.0
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 1.0
AbstractRealDistribution.java,inverseCumulativeProbability,lowerBound,double,0,DEF,$ == Double.NEGATIVE_INFINITY
AbstractRealDistribution.java,inverseCumulativeProbability,upperBound,double,0,DEF,$ == Double.POSITIVE_INFINITY
AbstractRealDistribution.java,inverseCumulativeProbability,dx,double,0,RET,cumulativeProbability(x - $) == px
AbstractRealDistribution.java,inverseCumulativeProbability,x,double,0,RET,cumulativeProbability($ - dx) == px
AbstractRealDistribution.java,inverseCumulativeProbability,midPoint,double,1,DEF,cumulativeProbability($) < px
AbstractRealDistribution.java,sample,sampleSize,int,0,NotStrictlyPositiveException,$ <= 0
GammaDistribution.java,GammaDistribution,shape,double,0,NotStrictlyPositiveException,$ <= 0
GammaDistribution.java,GammaDistribution,scale,double,0,NotStrictlyPositiveException,$ <= 0
GammaDistribution.java,density,x,double,0,RET,$ < 0
GammaDistribution.java,density,y,double,0,RET,$ <= minY
GammaDistribution.java,density,y,double,0,RET,FastMath.log($) >= maxLogY
GammaDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0
GammaDistribution.java,sample,shape,double,0,RET,$ < 1
GammaDistribution.java,sample,p,double,1,RET,$ <= 1
GammaDistribution.java,sample,v,double,0,DEF,$ <= 0
PascalDistribution.java,PascalDistribution,r,int,0,NotStrictlyPositiveException,$ <= 0
PascalDistribution.java,PascalDistribution,p,double,0,OutOfRangeException,$ < 0
PascalDistribution.java,PascalDistribution,p,double,0,OutOfRangeException,$ > 1
PascalDistribution.java,probability,x,int,1,DEF,$ < 0
PascalDistribution.java,cumulativeProbability,x,int,1,DEF,$ < 0
UniformRealDistribution.java,UniformRealDistribution,lower,double,0,NumberIsTooLargeException,$ >= upper
UniformRealDistribution.java,density,x,double,0,RET,$ < lower
UniformRealDistribution.java,density,x,double,0,RET,$ > upper
UniformRealDistribution.java,cumulativeProbability,x,double,0,RET,$ <= lower
UniformRealDistribution.java,cumulativeProbability,x,double,0,RET,$ >= upper
FDistribution.java,FDistribution,numeratorDegreesOfFreedom,double,0,NotStrictlyPositiveException,$ <= 0
FDistribution.java,FDistribution,denominatorDegreesOfFreedom,double,0,NotStrictlyPositiveException,$ <= 0
FDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0
FDistribution.java,getNumericalMean,denominatorDF,double,0,RET,$ > 2
FDistribution.java,calculateNumericalVariance,denominatorDF,double,0,RET,$ > 4
MixtureMultivariateRealDistribution.java,MixtureMultivariateRealDistribution,comp,Pair<Double,T>,0,DimensionMismatchException,$.getSecond().getDimension() != dim
MixtureMultivariateRealDistribution.java,MixtureMultivariateRealDistribution,comp,Pair<Double,T>,0,NotPositiveException,$.getFirst() < 0
MixtureMultivariateRealDistribution.java,sample,randomValue,double,0,DEF,$ <= sum
MixtureMultivariateRealDistribution.java,sample,vals,double[],0,DEF,$ == null
EnumeratedRealDistribution.java,EnumeratedRealDistribution,singletons,double[],0,DimensionMismatchException,$.length != probabilities.length
EnumeratedRealDistribution.java,cumulativeProbability,sample,Pair<Double,Double>,0,DEF,$.getKey() <= x
EnumeratedRealDistribution.java,getSupportLowerBound,sample,Pair<Double,Double>,0,DEF,$.getKey() < min
EnumeratedRealDistribution.java,getSupportLowerBound,sample,Pair<Double,Double>,0,DEF,$.getValue() > 0
EnumeratedRealDistribution.java,getSupportUpperBound,sample,Pair<Double,Double>,0,DEF,$.getKey() > max
EnumeratedRealDistribution.java,getSupportUpperBound,sample,Pair<Double,Double>,0,DEF,$.getValue() > 0
ExponentialDistribution.java,ExponentialDistribution,mean,double,0,NotStrictlyPositiveException,$ <= 0
ExponentialDistribution.java,density,x,double,0,RET,$ < 0
ExponentialDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
ExponentialDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ < 0.0
ExponentialDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ > 1.0
ExponentialDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1.0
ExponentialDistribution.java,sample,u2,double,0,DEF,$ < umin
AbstractIntegerDistribution.java,cumulativeProbability,x1,int,0,NumberIsTooLargeException,$ < x0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 0.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,lower,int,1,RET,$ == Integer.MIN_VALUE
AbstractIntegerDistribution.java,inverseCumulativeProbability,lower,int,0,RET,checkedCumulativeProbability($) >= p
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 1.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,tmp,double,0,DEF,$ > lower
AbstractIntegerDistribution.java,inverseCumulativeProbability,tmp,double,0,DEF,$ < upper
AbstractIntegerDistribution.java,solveInverseCumulativeProbability,xm,int,0,DEF,$ < lower
AbstractIntegerDistribution.java,solveInverseCumulativeProbability,xm,int,0,DEF,$ > upper
AbstractIntegerDistribution.java,solveInverseCumulativeProbability,pm,double,1,DEF,$ >= p
AbstractIntegerDistribution.java,sample,sampleSize,int,0,NotStrictlyPositiveException,$ <= 0
BinomialDistribution.java,BinomialDistribution,trials,int,0,NotPositiveException,$ < 0
BinomialDistribution.java,BinomialDistribution,p,double,0,OutOfRangeException,$ < 0
BinomialDistribution.java,BinomialDistribution,p,double,0,OutOfRangeException,$ > 1
BinomialDistribution.java,probability,x,int,1,DEF,$ < 0
BinomialDistribution.java,probability,x,int,1,DEF,$ > numberOfTrials
BinomialDistribution.java,cumulativeProbability,x,int,1,DEF,$ < 0
BinomialDistribution.java,cumulativeProbability,x,int,1,DEF,$ >= numberOfTrials
SaddlePointExpansion.java,getStirlingError,z,double,1,DEF,$ < 15.0
SaddlePointExpansion.java,getStirlingError,z2,double,1,DEF,FastMath.floor($) == z2
SaddlePointExpansion.java,logBinomialProbability,x,int,1,DEF,$ == 0
SaddlePointExpansion.java,logBinomialProbability,p,double,1,DEF,$ < 0.1
SaddlePointExpansion.java,logBinomialProbability,x,int,1,DEF,$ == n
SaddlePointExpansion.java,logBinomialProbability,q,double,1,DEF,$ < 0.1
LevyDistribution.java,density,x,double,0,RET,$ < mu
LevyDistribution.java,cumulativeProbability,x,double,0,RET,$ < mu
LevyDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0.0
LevyDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1.0
FastFourierTransformer.java,bitReversalShuffle2,i,int,0,DEF,$ < j
FastFourierTransformer.java,normalizeTransformedData,type,TransformType,0,DEF,$ == TransformType.INVERSE
FastFourierTransformer.java,transformInPlace,dataRI,double[][],0,DimensionMismatchException,$.length != 2
FastFourierTransformer.java,transformInPlace,dataR,double[],0,DimensionMismatchException,$.length != dataI.length
FastFourierTransformer.java,transformInPlace,n,int,1,RET,$ == 1
FastFourierTransformer.java,transformInPlace,n,int,0,RET,$ == 2
FastFourierTransformer.java,transformInPlace,type,TransformType,1,DEF,$ == TransformType.INVERSE
FastFourierTransformer.java,transformInPlace,type,TransformType,0,DEF,$ == TransformType.INVERSE
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == dimensionSize.length
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == d
FastFourierTransformer.java,get,vector,int[],0,DimensionMismatchException:RET,$ == null
FastFourierTransformer.java,get,dimensionSize,int[],0,DimensionMismatchException,$.length > 0
FastFourierTransformer.java,get,vector,int[],0,DimensionMismatchException,$.length != dimensionSize.length
FastFourierTransformer.java,set,vector,int[],0,DimensionMismatchException:RET,$ == null
FastFourierTransformer.java,set,dimensionSize,int[],0,DimensionMismatchException,$.length > 0
FastFourierTransformer.java,set,vector,int[],0,DimensionMismatchException,$.length != dimensionSize.length
FastHadamardTransformer.java,transform,type,TransformType,0,RET,$ == TransformType.FORWARD
FastCosineTransformer.java,transform,type,TransformType,0,RET,$ == TransformType.FORWARD
FastCosineTransformer.java,transform,normalization,DctNormalization,0,RET,$ == DctNormalization.ORTHOGONAL_DCT_I
FastCosineTransformer.java,transform,normalization,DctNormalization,1,DEF,$ == DctNormalization.ORTHOGONAL_DCT_I
FastCosineTransformer.java,fct,n,int,0,RET,$ == 1
FastSineTransformer.java,transform,normalization,DstNormalization,0,RET,$ == DstNormalization.ORTHOGONAL_DST_I
FastSineTransformer.java,transform,type,TransformType,0,RET,$ == TransformType.FORWARD
FastSineTransformer.java,fst,f,double[],0,MathIllegalArgumentException,$[0] != 0.0
FastSineTransformer.java,fst,n,int,0,RET,$ == 1
TransformUtils.java,createComplexArray,dataRI,double[][],0,DimensionMismatchException,$.length != 2
TransformUtils.java,createComplexArray,dataR,double[],0,DimensionMismatchException,$.length != dataI.length
TransformUtils.java,exactLog2,index,int,0,MathIllegalArgumentException,$ < 0
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,source.substring($, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,endIndex,int,0,DEF,source.substring(startIndex, $).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,source,String,0,DEF,$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,sb,StringBuilder,0,DEF,source.substring(startIndex, endIndex).compareTo($.toString()) == 0
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,$ == endIndex
CompositeFormat.java,parseNumber,number,Number,0,DEF,$ != null
CompositeFormat.java,parseFixedstring,startIndex,int,0,RET,source.substring($, endIndex).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,endIndex,int,0,RET,source.substring(startIndex, $).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,expected,String,0,RET,source.substring(startIndex, endIndex).compareTo($) != 0
CompositeFormat.java,parseFixedstring,source,String,0,RET,$.substring(startIndex, endIndex).compareTo(expected) != 0
BigReal.java,equals,other,null,0,RET,$ instanceof BigReal
ResizableDoubleArray.java,ResizableDoubleArray,initialCapacity,int,0,NotStrictlyPositiveException,$ <= 0
ResizableDoubleArray.java,ResizableDoubleArray,data,double[],0,DEF,$ != null
ResizableDoubleArray.java,addElementRolling,startIndex,int,0,DEF,($ + (numElements + 1)) > internalArray.length
ResizableDoubleArray.java,addElementRolling,numElements,int,0,DEF,(startIndex + ($ + 1)) > internalArray.length
ResizableDoubleArray.java,substituteMostRecentElement,numElements,int,0,MathIllegalStateException,$ < 1
ResizableDoubleArray.java,checkContractExpand,contraction,double,0,DEF,$ < expansion
ResizableDoubleArray.java,checkContractExpand,contraction,double,0,DEF,$ <= 1
ResizableDoubleArray.java,checkContractExpand,expansion,double,0,DEF,$ <= 1
ResizableDoubleArray.java,discardExtremeElements,i,int,1,MathIllegalArgumentException,$ > numElements
ResizableDoubleArray.java,discardExtremeElements,i,int,1,MathIllegalArgumentException,$ < 0
ResizableDoubleArray.java,expand,expansionMode,ExpansionMode,1,DEF,$ == ExpansionMode.MULTIPLICATIVE
ResizableDoubleArray.java,getElement,index,int,1,ArrayIndexOutOfBoundsException,$ >= numElements
ResizableDoubleArray.java,getElement,index,int,1,RET,$ >= 0
ResizableDoubleArray.java,setElement,index,int,0,ArrayIndexOutOfBoundsException,$ < 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ + 1 > numElements
ResizableDoubleArray.java,setElement,startIndex,int,0,DEF,($ + index) >= internalArray.length
ResizableDoubleArray.java,setElement,index,int,0,DEF,(startIndex + $) >= internalArray.length
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,MathIllegalArgumentException,$ != MULTIPLICATIVE_MODE
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,MathIllegalArgumentException,$ != ADDITIVE_MODE
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,1,DEF,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,DEF,$ == ADDITIVE_MODE
ResizableDoubleArray.java,setNumElements,i,int,0,MathIllegalArgumentException,$ < 0
ResizableDoubleArray.java,setNumElements,newSize,int,0,DEF,$ > internalArray.length
ResizableDoubleArray.java,shouldContract,expansionMode,ExpansionMode,1,RET,$ == ExpansionMode.MULTIPLICATIVE
ResizableDoubleArray.java,equals,object,Object,0,RET,$ instanceof ResizableDoubleArray == false
ResizableDoubleArray.java,equals,object,null,0,RET,$ instanceof ResizableDoubleArray
OpenIntToFieldHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToFieldHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToFieldHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToFieldHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToFieldHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToFieldHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToFieldHashMap.java,key,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToFieldHashMap.java,key,current,int,0,NoSuchElementException,$ < 0
OpenIntToFieldHashMap.java,value,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToFieldHashMap.java,value,current,int,0,NoSuchElementException,$ < 0
OpenIntToFieldHashMap.java,advance,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToFieldHashMap.java,advance,current,int,0,NoSuchElementException,$ < 0
FastMathCalc.java,buildSinCosTables,i,int,1,DEF,($ & 1) == 0
FastMathCalc.java,slowCos,i,int,0,DEF,($ & 1) != 0
FastMathCalc.java,slowCos,i,int,0,DEF,($ & 2) != 0
FastMathCalc.java,slowCos,result,double[],0,DEF,$ != null
FastMathCalc.java,slowSin,i,int,0,DEF,($ & 1) == 0
FastMathCalc.java,slowSin,i,int,0,DEF,($ & 2) != 0
FastMathCalc.java,slowSin,result,double[],0,DEF,$ != null
FastMathCalc.java,slowexp,result,double[],0,DEF,$ != null
FastMathCalc.java,split,d,double,1,DEF,$ < 8e298
FastMathCalc.java,split,d,double,1,DEF,$ > -8e298
FastMathCalc.java,resplit,c,double,1,DEF,$ < 8e298
FastMathCalc.java,resplit,c,double,1,DEF,$ > -8e298
FastMathCalc.java,splitReciprocal,in,double[],0,DEF,$[0] == 0.0
FastMathCalc.java,expint,p,int,0,DEF,($ & 1) != 0
FastMathCalc.java,expint,result,double[],0,DEF,$ != null
FastMathCalc.java,format,d,double,1,RET,$ != d
FastMathCalc.java,checkLen,expectedLen,int,0,DimensionMismatchException,$ != actual
Precision.java,compareTo,x,double,0,RET,$ < y
Precision.java,compareTo,x,double,0,RET,$ < y
Precision.java,equals,xInt,int,0,DEF,$ < 0
Precision.java,equals,yInt,int,0,DEF,$ < 0
Precision.java,equals,xInt,long,0,DEF,$ < 0
Precision.java,equals,yInt,long,0,DEF,$ < 0
Precision.java,roundUnscaled,sign,double,1,DEF,$ == -1
Precision.java,roundUnscaled,sign,double,1,DEF,$ == -1
Precision.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
Precision.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
Precision.java,roundUnscaled,fraction,double,1,DEF,$ < 0.5
Precision.java,roundUnscaled,fraction,double,1,DEF,$ >= 0.5
ContinuedFraction.java,evaluate,deltaN,double,0,DEF,FastMath.abs($ - 1.0) < epsilon
ContinuedFraction.java,evaluate,n,int,0,MaxCountExceededException,$ >= maxIterations
MathUtils.java,copySign,magnitude,byte,1,RET,$ >= 0
MathUtils.java,copySign,sign,byte,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,byte,1,RET,$ < 0
MathUtils.java,copySign,sign,byte,1,RET,$ < 0
MathUtils.java,copySign,sign,byte,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,byte,1,MathArithmeticException,$ == Byte.MIN_VALUE
MathUtils.java,copySign,magnitude,short,1,RET,$ >= 0
MathUtils.java,copySign,sign,short,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,short,1,RET,$ < 0
MathUtils.java,copySign,sign,short,1,RET,$ < 0
MathUtils.java,copySign,sign,short,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,short,1,MathArithmeticException,$ == Short.MIN_VALUE
MathUtils.java,copySign,magnitude,int,1,RET,$ >= 0
MathUtils.java,copySign,sign,int,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,int,1,RET,$ < 0
MathUtils.java,copySign,sign,int,1,RET,$ < 0
MathUtils.java,copySign,sign,int,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,int,1,MathArithmeticException,$ == Integer.MIN_VALUE
MathUtils.java,copySign,magnitude,long,1,RET,$ >= 0
MathUtils.java,copySign,sign,long,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,long,1,RET,$ < 0
MathUtils.java,copySign,sign,long,1,RET,$ < 0
MathUtils.java,copySign,sign,long,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,long,1,MathArithmeticException,$ == Long.MIN_VALUE
MathUtils.java,checkNotNull,o,Object,0,NullArgumentException,$ == null
MathUtils.java,checkNotNull,o,Object,0,NullArgumentException,$ == null
MathArrays.java,ebeAdd,a,double[],0,DimensionMismatchException,$.length != b.length
MathArrays.java,ebeSubtract,a,double[],0,DimensionMismatchException,$.length != b.length
MathArrays.java,ebeMultiply,a,double[],0,DimensionMismatchException,$.length != b.length
MathArrays.java,ebeDivide,a,double[],0,DimensionMismatchException,$.length != b.length
MathArrays.java,isMonotonic,comp,int,0,RET,$ >= 0
MathArrays.java,isMonotonic,comp,int,0,RET,$ > 0
MathArrays.java,isMonotonic,comp,int,0,RET,$ >= 0
MathArrays.java,isMonotonic,comp,int,0,RET,$ > 0
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] <= previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] <= previous
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] < previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] < previous
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] >= previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] >= previous
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] > previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] > previous
MathArrays.java,checkOrder,index,int,0,RET,$ == max
MathArrays.java,checkPositive,in,double[],0,NotStrictlyPositiveException,$[i] <= 0
MathArrays.java,checkPositive,i,int,0,NotStrictlyPositiveException,in[$] <= 0
MathArrays.java,checkNonNegative,in,long[],0,NotPositiveException,$[i] < 0
MathArrays.java,checkNonNegative,i,int,0,NotPositiveException,in[$] < 0
MathArrays.java,checkNonNegative,in,long[][],0,NotPositiveException,$[i][j] < 0
MathArrays.java,checkNonNegative,i,int,0,NotPositiveException,in[$][j] < 0
MathArrays.java,checkNonNegative,j,int,0,NotPositiveException,in[i][$] < 0
MathArrays.java,safeNorm,xabs,double,1,DEF,$ < rdwarf
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > agiant
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > rdwarf
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > x1max
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > x3max
MathArrays.java,safeNorm,xabs,double,0,DEF,$ != 0
MathArrays.java,safeNorm,s1,double,1,DEF,$ != 0
MathArrays.java,safeNorm,s2,double,1,DEF,$ == 0
MathArrays.java,safeNorm,s2,double,1,DEF,$ >= x3max
MathArrays.java,sortInPlace,x,double[],0,NullArgumentException,$ == null
MathArrays.java,sortInPlace,y,double[],0,NullArgumentException,$ == null
MathArrays.java,sortInPlace,y,double[],0,DimensionMismatchException,$.length != len
MathArrays.java,linearCombination,len,int,0,DimensionMismatchException,$ != b.length
MathArrays.java,equals,x,float[],0,RET,$ == null
MathArrays.java,equals,y,float[],0,RET,$ == null
MathArrays.java,equals,x,float[],0,RET,$.length != y.length
MathArrays.java,equalsIncludingNaN,x,float[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,y,float[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,x,float[],0,RET,$.length != y.length
MathArrays.java,equals,x,double[],0,RET,$ == null
MathArrays.java,equals,y,double[],0,RET,$ == null
MathArrays.java,equals,x,double[],0,RET,$.length != y.length
MathArrays.java,equalsIncludingNaN,x,double[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,y,double[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,x,double[],0,RET,$.length != y.length
MathArrays.java,normalizeArray,sum,double,0,MathArithmeticException,$ == 0
MathArrays.java,buildArray,columns,int,1,DEF,$ < 0
DefaultTransformer.java,transform,o,Object,0,NullArgumentException,$ == null
DefaultTransformer.java,transform,o,null,0,RET,$ instanceof Number
MultidimensionalCounter.java,MultidimensionalCounter,tS,int,0,NotStrictlyPositiveException,$ <= 0
MultidimensionalCounter.java,getCounts,index,int,0,OutOfRangeException,$ < 0
MultidimensionalCounter.java,getCounts,index,int,0,OutOfRangeException,$ >= totalSize
MultidimensionalCounter.java,getCount,c,int[],0,DimensionMismatchException,$.length != dimension
MultidimensionalCounter.java,getCount,index,int,0,OutOfRangeException,$ < 0
Decimal64.java,equals,obj,null,0,RET,$ instanceof Decimal64
Decimal64.java,rootN,value,double,1,RET,$ < 0
Decimal64.java,linearCombination,a,Decimal64[],0,DimensionMismatchException,$.length != b.length
Decimal64.java,linearCombination,a,double[],0,DimensionMismatchException,$.length != b.length
Incrementor.java,Incrementor,cb,MaxCountExceededCallback,0,NullArgumentException,$ == null
Incrementor.java,incrementCount,count,int,0,DEF,++$ > maximalCount
FastMath.java,doubleHighPart,d,double,0,RET,$ > -Precision.SAFE_MIN
FastMath.java,doubleHighPart,d,double,0,RET,$ < Precision.SAFE_MIN
FastMath.java,cosh,x,double,0,RET,$ != x
FastMath.java,cosh,x,double,1,RET,$ > 20
FastMath.java,cosh,x,double,1,RET,$ >= LOG_MAX_VALUE
FastMath.java,cosh,x,double,0,RET,$ < -20
FastMath.java,cosh,x,double,1,RET,$ <= -LOG_MAX_VALUE
FastMath.java,cosh,x,double,0,DEF,$ < 0.0
FastMath.java,sinh,x,double,0,RET,$ != x
FastMath.java,sinh,x,double,1,RET,$ > 20
FastMath.java,sinh,x,double,1,RET,$ >= LOG_MAX_VALUE
FastMath.java,sinh,x,double,0,RET,$ < -20
FastMath.java,sinh,x,double,1,RET,$ <= -LOG_MAX_VALUE
FastMath.java,sinh,x,double,0,RET,$ == 0
FastMath.java,sinh,x,double,0,DEF,$ < 0.0
FastMath.java,sinh,x,double,1,DEF,$ > 0.25
FastMath.java,tanh,x,double,0,RET,$ != x
FastMath.java,tanh,x,double,0,RET,$ > 20.0
FastMath.java,tanh,x,double,0,RET,$ < -20
FastMath.java,tanh,x,double,0,RET,$ == 0
FastMath.java,tanh,x,double,0,DEF,$ < 0.0
FastMath.java,tanh,x,double,1,DEF,$ >= 0.5
FastMath.java,asinh,a,double,0,DEF,$ < 0
FastMath.java,asinh,a,double,1,DEF,$ > 0.167
FastMath.java,asinh,a,double,1,DEF,$ > 0.097
FastMath.java,asinh,a,double,1,DEF,$ > 0.036
FastMath.java,asinh,a,double,1,DEF,$ > 0.0036
FastMath.java,atanh,a,double,0,DEF,$ < 0
FastMath.java,atanh,a,double,1,DEF,$ > 0.15
FastMath.java,atanh,a,double,1,DEF,$ > 0.087
FastMath.java,atanh,a,double,1,DEF,$ > 0.031
FastMath.java,atanh,a,double,1,DEF,$ > 0.003
FastMath.java,exp,x,double,1,RET,$ < 0.0
FastMath.java,exp,intVal,int,0,RET,$ > 746
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,intVal,int,0,RET,$ > 709
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,intVal,int,0,RET,$ == 709
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,intVal,int,0,RET,$ > 709
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,extra,double,1,DEF,$ != 0.0
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,expm1,x,double,0,RET,$ != x
FastMath.java,expm1,x,double,0,RET,$ == 0.0
FastMath.java,expm1,x,double,0,RET,$ <= -1.0
FastMath.java,expm1,x,double,0,RET,$ >= 1.0
FastMath.java,expm1,x,double,1,RET,$ > 0.0
FastMath.java,expm1,x,double,0,DEF,$ < 0.0
FastMath.java,expm1,hiPrecOut,double[],0,DEF,$ != null
FastMath.java,log,x,double,0,RET,$==0
FastMath.java,log,bits,long,0,RET,($ & 0x8000000000000000L) != 0
FastMath.java,log,x,double,0,RET,$ != x
FastMath.java,log,x,double,0,RET,$ != 0.0
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log,bits,long,0,RET,($ & 0x7ff0000000000000L) == 0
FastMath.java,log,x,double,0,RET,$ == 0
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log,exp,int,0,RET,$ == -1
FastMath.java,log,exp,int,0,RET,$ == 0
FastMath.java,log,x,double,0,RET,$ < 1.01
FastMath.java,log,x,double,0,RET,$ > 0.99
FastMath.java,log,hiPrec,double[],0,RET,$ == null
FastMath.java,log,hiPrec,double[],1,DEF,$ != null
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log1p,x,double,0,RET,$ == -1
FastMath.java,log1p,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,log1p,x,double,1,RET,$ > 1e-6
FastMath.java,log1p,x,double,1,RET,$ < -1e-6
FastMath.java,pow,y,double,0,RET,$ == 0.0
FastMath.java,pow,x,double,0,RET,$ != x
FastMath.java,pow,x,double,0,RET,$ == 0
FastMath.java,pow,bits,long,0,RET,($ & 0x8000000000000000L) != 0
FastMath.java,pow,y,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ > 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ > 0
FastMath.java,pow,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,pow,y,double,0,RET,$ != y
FastMath.java,pow,y,double,1,RET,$ < 0.0
FastMath.java,pow,y,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,pow,x,double,0,RET,$ * $ == 1.0
FastMath.java,pow,x,double,1,RET,$ * $ > 1.0
FastMath.java,pow,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,pow,y,double,0,RET,$ != y
FastMath.java,pow,y,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ > 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,pow,x,double,0,RET,$ * $ == 1.0
FastMath.java,pow,x,double,1,RET,$ * $ < 1.0
FastMath.java,pow,x,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ >= TWO_POWER_53
FastMath.java,pow,y,double,0,RET,$ <= -TWO_POWER_53
FastMath.java,pow,y,double,1,RET,$ == (long) y
FastMath.java,pow,y,double,1,DEF,$ < 8e298
FastMath.java,pow,y,double,1,DEF,$ > -8e298
FastMath.java,pow,e,int,1,RET,$ == 0
FastMath.java,pow,e,int,0,DEF,$ < 0
FastMath.java,pow,e,int,0,DEF,($ & 0x1) != 0
FastMath.java,sinQ,xb,double,0,DEF,$ != 0.0
FastMath.java,tanQ,xb,double,0,DEF,$ != 0.0
FastMath.java,reducePayneHanek,shift,int,1,DEF,$ != 0
FastMath.java,sin,x,double,0,DEF,$ < 0
FastMath.java,sin,xa,double,0,RET,$ == 0.0
FastMath.java,sin,bits,long,0,RET,$ < 0
FastMath.java,sin,xa,double,0,RET,$ != xa
FastMath.java,sin,xa,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,sin,xa,double,1,DEF,$ > 3294198.0
FastMath.java,sin,xa,double,0,DEF,$ > 1.5707963267948966
FastMath.java,cos,x,double,0,DEF,$ < 0
FastMath.java,cos,xa,double,0,RET,$ != xa
FastMath.java,cos,xa,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,cos,xa,double,1,DEF,$ > 3294198.0
FastMath.java,cos,xa,double,0,DEF,$ > 1.5707963267948966
FastMath.java,tan,x,double,0,DEF,$ < 0
FastMath.java,tan,xa,double,0,RET,$ == 0.0
FastMath.java,tan,bits,long,0,RET,$ < 0
FastMath.java,tan,xa,double,0,RET,$ != xa
FastMath.java,tan,xa,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,tan,xa,double,1,DEF,$ > 3294198.0
FastMath.java,tan,xa,double,0,DEF,$ > 1.5707963267948966
FastMath.java,tan,xa,double,0,DEF,$ > 1.5
FastMath.java,tan,quadrant,int,1,DEF,($ & 1) == 0
FastMath.java,atan,xa,double,0,RET,$ == 0.0
FastMath.java,atan,xa,double,0,DEF,$ < 0
FastMath.java,atan,xa,double,0,RET,$ > 1.633123935319537E16
FastMath.java,atan,xa,double,1,DEF,$ < 1
FastMath.java,atan,idx,int,1,DEF,$ == 0
FastMath.java,atan2,x,double,0,RET,$ != x
FastMath.java,atan2,y,double,0,RET,$ != y
FastMath.java,atan2,y,double,0,RET,$ == 0
FastMath.java,atan2,invx,double,0,RET,$ == 0
FastMath.java,atan2,x,double,1,RET,$ > 0
FastMath.java,atan2,x,double,1,RET,$ < 0
FastMath.java,atan2,invx,double,1,RET,$ < 0
FastMath.java,atan2,y,double,1,RET,$ < 0
FastMath.java,atan2,invy,double,1,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,y,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,y,double,0,RET,$ > 0
FastMath.java,atan2,y,double,0,RET,1 / $ > 0
FastMath.java,atan2,y,double,0,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,1 / $ < 0
FastMath.java,atan2,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,y,double,0,RET,$ > 0.0
FastMath.java,atan2,y,double,0,RET,1 / $ > 0.0
FastMath.java,atan2,y,double,0,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,1 / $ < 0
FastMath.java,atan2,x,double,0,RET,$ == 0
FastMath.java,atan2,y,double,0,RET,$ > 0
FastMath.java,atan2,y,double,0,RET,1 / $ > 0
FastMath.java,atan2,y,double,0,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,1 / $ < 0
FastMath.java,atan2,ra,double,0,DEF,$ == 0
FastMath.java,asin,x,double,0,RET,$ != x
FastMath.java,asin,x,double,0,RET,$ > 1.0
FastMath.java,asin,x,double,0,RET,$ < -1.0
FastMath.java,asin,x,double,0,RET,$ == 1.0
FastMath.java,asin,x,double,0,RET,$ == -1.0
FastMath.java,asin,x,double,0,RET,$ == 0.0
FastMath.java,acos,x,double,0,RET,$ != x
FastMath.java,acos,x,double,0,RET,$ > 1.0
FastMath.java,acos,x,double,0,RET,$ < -1.0
FastMath.java,acos,x,double,0,RET,$ == -1.0
FastMath.java,acos,x,double,0,RET,$ == 1.0
FastMath.java,acos,x,double,0,RET,$ == 0
FastMath.java,cbrt,exponent,int,0,RET,$ == -1023
FastMath.java,cbrt,x,double,0,RET,$ == 0
FastMath.java,cbrt,exponent,int,0,RET,$ == 1024
FastMath.java,toRadians,x,double,0,RET,$ == 0.0
FastMath.java,toRadians,result,double,0,DEF,$ == 0
FastMath.java,toDegrees,x,double,0,RET,$ == 0.0
FastMath.java,scalb,n,int,0,RET,$ > -1023
FastMath.java,scalb,n,int,0,RET,$ < 1024
FastMath.java,scalb,d,double,0,RET,$ == 0
FastMath.java,scalb,n,int,0,RET,$ < -2098
FastMath.java,scalb,n,int,0,RET,$ > 2097
FastMath.java,scalb,n,int,1,RET,$ < 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > -53
FastMath.java,scalb,mostSignificantLostBit,long,0,DEF,$ != 0
FastMath.java,scalb,exponent,int,1,RET,$ == 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 2047
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 2047
FastMath.java,scalb,n,int,0,RET,$ > -127
FastMath.java,scalb,n,int,0,RET,$ < 128
FastMath.java,scalb,f,float,0,RET,$ == 0f
FastMath.java,scalb,n,int,0,RET,$ < -277
FastMath.java,scalb,n,int,0,RET,$ > 276
FastMath.java,scalb,n,int,1,RET,$ < 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > -24
FastMath.java,scalb,mostSignificantLostBit,int,0,DEF,$ != 0
FastMath.java,scalb,exponent,int,1,RET,$ == 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 255
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 255
FastMath.java,nextAfter,d,double,1,RET,$ == direction
FastMath.java,nextAfter,d,double,0,RET,$ == 0
FastMath.java,nextAfter,direction,double,1,RET,$ < d
FastMath.java,nextAfter,sign,long,1,RET,$ == 0L
FastMath.java,nextAfter,f,float,1,RET,$ == direction
FastMath.java,nextAfter,f,float,0,RET,$ == 0f
FastMath.java,nextAfter,direction,double,1,RET,$ < f
FastMath.java,nextAfter,sign,int,1,RET,$ == 0
FastMath.java,floor,x,double,0,RET,$ != x
FastMath.java,floor,x,double,0,RET,$ >= TWO_POWER_52
FastMath.java,floor,x,double,0,RET,$ <= -TWO_POWER_52
FastMath.java,floor,x,double,0,DEF,$ < 0
FastMath.java,floor,y,long,0,DEF,$ != x
FastMath.java,floor,y,long,0,RET,$ == 0
FastMath.java,ceil,x,double,0,RET,$ != x
FastMath.java,ceil,y,double,0,RET,$ == x
FastMath.java,ceil,y,double,0,RET,$ == 0
FastMath.java,rint,d,double,0,RET,$ > 0.5
FastMath.java,rint,y,double,0,RET,$ == -1.0
FastMath.java,rint,d,double,0,RET,$ < 0.5
FastMath.java,min,a,float,0,RET,$ > b
FastMath.java,min,a,float,0,RET,$ < b
FastMath.java,min,a,float,0,RET,$ != b
FastMath.java,min,bits,int,0,RET,$ == 0x80000000
FastMath.java,min,a,double,0,RET,$ > b
FastMath.java,min,a,double,0,RET,$ < b
FastMath.java,min,a,double,0,RET,$ != b
FastMath.java,min,bits,long,0,RET,$ == 0x8000000000000000L
FastMath.java,max,a,float,0,RET,$ > b
FastMath.java,max,a,float,0,RET,$ < b
FastMath.java,max,a,float,0,RET,$ != b
FastMath.java,max,bits,int,0,RET,$ == 0x80000000
FastMath.java,max,a,double,0,RET,$ > b
FastMath.java,max,a,double,0,RET,$ < b
FastMath.java,max,a,double,0,RET,$ != b
FastMath.java,max,bits,long,0,RET,$ == 0x8000000000000000L
FastMath.java,copySign,s,long,0,RET,(m^$) >= 0
FastMath.java,copySign,m,long,0,RET,($^s) >= 0
FastMath.java,copySign,s,int,0,RET,(m^$) >= 0
FastMath.java,copySign,m,int,0,RET,($^s) >= 0
FastMath.java,null,i,int,0,DEF,$ != 0
FastMath.java,CodyWaite,remA,double,0,DEF,$ > 0
TransformerMap.java,transform,o,null,1,DEF,$ instanceof Number
TransformerMap.java,transform,o,null,1,DEF,$ instanceof String
TransformerMap.java,transform,trans,NumberTransformer,0,DEF,$ != null
TransformerMap.java,equals,other,null,0,RET,$ instanceof TransformerMap
Pair.java,equals,o,null,1,RET,$ instanceof Pair
OpenIntToDoubleHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToDoubleHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToDoubleHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToDoubleHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToDoubleHashMap.java,key,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToDoubleHashMap.java,key,current,int,0,NoSuchElementException,$ < 0
OpenIntToDoubleHashMap.java,value,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToDoubleHashMap.java,value,current,int,0,NoSuchElementException,$ < 0
OpenIntToDoubleHashMap.java,advance,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToDoubleHashMap.java,advance,current,int,0,NoSuchElementException,$ < 0
ArithmeticUtils.java,addAndCheck,s,long,0,MathArithmeticException,$ < Integer.MIN_VALUE
ArithmeticUtils.java,addAndCheck,s,long,0,MathArithmeticException,$ > Integer.MAX_VALUE
ArithmeticUtils.java,binomialCoefficient,n,int,0,RET,$ == k
ArithmeticUtils.java,binomialCoefficient,k,int,0,RET,$ == 0
ArithmeticUtils.java,binomialCoefficient,k,int,0,RET,$ == 1
ArithmeticUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 61
ArithmeticUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 66
ArithmeticUtils.java,binomialCoefficientDouble,n,int,0,RET,$ == k
ArithmeticUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 0
ArithmeticUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 1
ArithmeticUtils.java,binomialCoefficientDouble,n,int,0,RET,$ < 67
ArithmeticUtils.java,binomialCoefficientLog,n,int,0,RET,$ == k
ArithmeticUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 0
ArithmeticUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 1
ArithmeticUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 67
ArithmeticUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 1030
ArithmeticUtils.java,factorial,n,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,factorial,n,int,0,MathArithmeticException,$ > 20
ArithmeticUtils.java,factorialDouble,n,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,factorialDouble,n,int,0,RET,$ < 21
ArithmeticUtils.java,factorialLog,n,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,factorialLog,n,int,0,RET,$ < 21
ArithmeticUtils.java,gcd,a,int,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,b,int,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,a,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
ArithmeticUtils.java,gcd,b,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
ArithmeticUtils.java,gcd,a,int,0,DEF,$ < 0
ArithmeticUtils.java,gcd,b,int,0,DEF,$ < 0
ArithmeticUtils.java,gcd,al,long,0,MathArithmeticException,$ == bl
ArithmeticUtils.java,gcd,al,long,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,bl,long,0,MathArithmeticException,$ > Integer.MAX_VALUE
ArithmeticUtils.java,gcdPositive,a,int,1,RET,$ == 0
ArithmeticUtils.java,gcdPositive,b,int,0,RET,$ == 0
ArithmeticUtils.java,gcd,u,long,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,v,long,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,u,long,0,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,gcd,v,long,0,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,gcd,u,long,0,DEF,$ > 0
ArithmeticUtils.java,gcd,v,long,0,DEF,$ > 0
ArithmeticUtils.java,gcd,k,int,0,MathArithmeticException,$ == 63
ArithmeticUtils.java,gcd,t,long,1,DEF,$ > 0
ArithmeticUtils.java,lcm,a,int,0,RET,$ == 0
ArithmeticUtils.java,lcm,b,int,0,RET,$ == 0
ArithmeticUtils.java,lcm,lcm,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
ArithmeticUtils.java,lcm,a,long,0,RET,$ == 0
ArithmeticUtils.java,lcm,b,long,0,RET,$ == 0
ArithmeticUtils.java,lcm,lcm,long,0,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,mulAndCheck,m,long,0,MathArithmeticException,$ < Integer.MIN_VALUE
ArithmeticUtils.java,mulAndCheck,m,long,0,MathArithmeticException,$ > Integer.MAX_VALUE
ArithmeticUtils.java,mulAndCheck,a,long,1,DEF,$ > b
ArithmeticUtils.java,mulAndCheck,a,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,mulAndCheck,b,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,mulAndCheck,b,long,1,MathArithmeticException,$ > 0
ArithmeticUtils.java,mulAndCheck,b,long,1,DEF,Long.MIN_VALUE / $ <= a
ArithmeticUtils.java,mulAndCheck,a,long,1,MathArithmeticException,$ > 0
ArithmeticUtils.java,subAndCheck,s,long,0,MathArithmeticException,$ < Integer.MIN_VALUE
ArithmeticUtils.java,subAndCheck,s,long,0,MathArithmeticException,$ > Integer.MAX_VALUE
ArithmeticUtils.java,subAndCheck,b,long,1,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,subAndCheck,a,long,1,DEF,$ < 0
ArithmeticUtils.java,pow,e,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,long,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,long,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,BigInteger,0,NotPositiveException,$.compareTo(BigInteger.ZERO) < 0
ArithmeticUtils.java,stirlingS2,k,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,stirlingS2,k,int,0,NumberIsTooLargeException,$ > n
ArithmeticUtils.java,stirlingS2,stirlingS2,long[][],0,DEF,$ == null
ArithmeticUtils.java,stirlingS2,n,int,1,RET,$ < stirlingS2.length
ArithmeticUtils.java,stirlingS2,k,int,1,RET,$ == 0
ArithmeticUtils.java,stirlingS2,k,int,1,RET,$ == 1
ArithmeticUtils.java,stirlingS2,k,int,1,RET,$ == n
ArithmeticUtils.java,stirlingS2,k,int,1,RET,$ == 2
ArithmeticUtils.java,stirlingS2,sum,long,0,MathArithmeticException,$ < 0
ArithmeticUtils.java,addAndCheck,a,long,1,DEF,$ > b
ArithmeticUtils.java,addAndCheck,a,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,addAndCheck,b,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,addAndCheck,b,long,1,DEF,Long.MIN_VALUE - $ <= a
ArithmeticUtils.java,checkBinomial,n,int,0,NumberIsTooLargeException,$ < k
ArithmeticUtils.java,checkBinomial,n,int,0,NotPositiveException,$ < 0
BigFraction.java,BigFraction,gcd,BigInteger,0,DEF,BigInteger.ONE.compareTo($) < 0
BigFraction.java,BigFraction,den,BigInteger,0,DEF,BigInteger.ZERO.compareTo($) > 0
BigFraction.java,BigFraction,exponent,long,0,DEF,$ != 0
BigFraction.java,BigFraction,sign,long,0,DEF,$ != 0
BigFraction.java,BigFraction,k,int,1,DEF,$ < 0
BigFraction.java,BigFraction,a0,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,value,double,0,RET,FastMath.abs(a0 - $) < epsilon
BigFraction.java,BigFraction,a0,long,0,RET,FastMath.abs($ - value) < epsilon
BigFraction.java,BigFraction,p2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,q2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,n,int,1,DEF,$ < maxIterations
BigFraction.java,BigFraction,convergent,double,1,DEF,FastMath.abs($ - value) > epsilon
BigFraction.java,BigFraction,value,double,1,DEF,FastMath.abs(convergent - $) > epsilon
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,BigFraction,n,int,0,FractionConversionException,$ >= maxIterations
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,getReducedFraction,numerator,int,0,RET,$ == 0
BigFraction.java,add,fraction,BigFraction,0,NullArgumentException,$ == null
BigFraction.java,divide,bg,BigInteger,0,NullArgumentException,$ == null
BigFraction.java,divide,fraction,BigFraction,0,NullArgumentException,$ == null
BigFraction.java,equals,other,null,0,DEF,$ instanceof BigFraction
BigFraction.java,multiply,bg,BigInteger,0,NullArgumentException,$ == null
BigFraction.java,multiply,fraction,BigFraction,0,NullArgumentException,$ == null
BigFraction.java,pow,exponent,int,0,RET,$ < 0
BigFraction.java,pow,exponent,long,0,RET,$ < 0
BigFraction.java,pow,exponent,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
BigFraction.java,subtract,bg,BigInteger,0,NullArgumentException,$ == null
BigFraction.java,subtract,fraction,BigFraction,0,NullArgumentException,$ == null
Fraction.java,Fraction,a0,long,0,FractionConversionException,FastMath.abs($) > overflow
Fraction.java,Fraction,value,double,0,RET,FastMath.abs(a0 - $) < epsilon
Fraction.java,Fraction,a0,long,0,RET,FastMath.abs($ - value) < epsilon
Fraction.java,Fraction,p2,long,0,FractionConversionException,FastMath.abs($) > overflow
Fraction.java,Fraction,q2,long,0,FractionConversionException,FastMath.abs($) > overflow
Fraction.java,Fraction,n,int,1,DEF,$ < maxIterations
Fraction.java,Fraction,convergent,double,1,DEF,FastMath.abs($ - value) > epsilon
Fraction.java,Fraction,value,double,1,DEF,FastMath.abs(convergent - $) > epsilon
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,n,int,0,FractionConversionException,$ >= maxIterations
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,den,int,0,MathArithmeticException,$ == 0
Fraction.java,Fraction,den,int,0,MathArithmeticException,$ < 0
Fraction.java,Fraction,num,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
Fraction.java,Fraction,den,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
Fraction.java,Fraction,d,int,0,DEF,$ > 1
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,abs,numerator,int,1,DEF,$ >= 0
Fraction.java,equals,other,null,0,RET,$ instanceof Fraction
Fraction.java,negate,numerator,int,0,MathArithmeticException,$==Integer.MIN_VALUE
Fraction.java,addSub,fraction,Fraction,0,NullArgumentException,$ == null
Fraction.java,addSub,numerator,int,0,RET,$ == 0
Fraction.java,addSub,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,addSub,d1,int,0,RET,$==1
Fraction.java,addSub,w,BigInteger,0,MathArithmeticException,$.bitLength() > 31
Fraction.java,multiply,fraction,Fraction,0,NullArgumentException,$ == null
Fraction.java,multiply,numerator,int,0,RET,$ == 0
Fraction.java,multiply,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,divide,fraction,Fraction,0,NullArgumentException,$ == null
Fraction.java,divide,fraction,Fraction,0,MathArithmeticException,$.numerator == 0
Fraction.java,getReducedFraction,denominator,int,0,MathArithmeticException,$ == 0
Fraction.java,getReducedFraction,numerator,int,0,RET,$==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,numerator,int,0,DEF,($&1)==0
Fraction.java,getReducedFraction,denominator,int,0,MathArithmeticException,$ < 0
Fraction.java,getReducedFraction,numerator,int,0,MathArithmeticException,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,denominator,int,0,MathArithmeticException,$==Integer.MIN_VALUE
Fraction.java,toString,denominator,int,1,DEF,$ == 1
Fraction.java,toString,numerator,int,1,DEF,$ == 0
AbstractFormat.java,setDenominatorFormat,format,NumberFormat,0,NullArgumentException,$ == null
AbstractFormat.java,setNumeratorFormat,format,NumberFormat,0,NullArgumentException,$ == null
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
ProperBigFractionFormat.java,format,num,BigInteger,0,DEF,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,ret,BigFraction,0,RET,$ != null
ProperBigFractionFormat.java,parse,whole,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,setWholeFormat,format,NumberFormat,0,NullArgumentException,$ == null
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Fraction
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
FractionFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
FractionFormat.java,parse,num,Number,0,RET,$ == null
FractionFormat.java,parse,den,Number,0,RET,$ == null
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigFraction
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigInteger
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
BigFractionFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
BigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
BigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperFractionFormat.java,format,whole,int,0,DEF,$ != 0
ProperFractionFormat.java,parse,ret,Fraction,0,RET,$ != null
ProperFractionFormat.java,parse,whole,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,parse,den,Number,0,RET,$ == null
ProperFractionFormat.java,parse,den,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,setWholeFormat,format,NumberFormat,0,NullArgumentException,$ == null
AbstractIntegrator.java,sanityChecks,dt,double,0,NumberIsTooSmallException,$ <= threshold
ContinuousOutputModel.java,append,model,ContinuousOutputModel,0,RET,$.steps.size() == 0
ContinuousOutputModel.java,append,steps,List<StepInterpolator>,1,DEF,$.size() == 0
ContinuousOutputModel.java,handleStep,steps,List<StepInterpolator>,0,DEF,$.size() == 0
ContinuousOutputModel.java,setInterpolatedTime,sMin,StepInterpolator,0,RET,locatePoint(time, $) <= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMin) <= 0
ContinuousOutputModel.java,setInterpolatedTime,sMax,StepInterpolator,0,RET,locatePoint(time, $) >= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMax) >= 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ < 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ > 0
ContinuousOutputModel.java,setInterpolatedTime,tMin,double,1,DEF,FastMath.abs(tMed - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,FastMath.abs($ - tMin) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMax,double,1,DEF,FastMath.abs($ - tMed) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,FastMath.abs(tMax - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,index,int,1,DEF,$ < low
ContinuousOutputModel.java,setInterpolatedTime,index,int,0,DEF,$ > high
AdamsBashforthIntegrator.java,integrate,error,double,0,DEF,$ >= 1.0
GillStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
GillStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
EulerStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
EulerStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
DormandPrince54StepInterpolator.java,DormandPrince54StepInterpolator,interpolator,DormandPrince54StepInterpolator,1,DEF,$.v1 == null
DormandPrince54StepInterpolator.java,computeInterpolatedStateAndDerivatives,v1,double[],0,DEF,$ == null
DormandPrince54StepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
DormandPrince54StepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
GraggBulirschStoerIntegrator.java,setStabilityCheck,stepsizeReductionFactor,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStabilityCheck,stepsizeReductionFactor,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control3,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control3,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control4,double,1,DEF,$ < 1.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control4,double,1,DEF,$ > 999.9
GraggBulirschStoerIntegrator.java,setOrderControl,maximalOrder,int,0,DEF,$ <= 6
GraggBulirschStoerIntegrator.java,setOrderControl,maximalOrder,int,0,DEF,$ % 2 != 0
GraggBulirschStoerIntegrator.java,setOrderControl,control1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,control1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setOrderControl,control2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,control2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$ == null
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$.length != size
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudifControlParameter,int,1,DEF,$ <= 0
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudifControlParameter,int,1,DEF,$ >= 7
GraggBulirschStoerIntegrator.java,rescale,vecAbsoluteTolerance,double[],1,DEF,$ == null
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,DEF,2 * $ == n
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,RET,$ <= maxChecks
GraggBulirschStoerIntegrator.java,tryStep,k,int,0,RET,$ < maxIter
GraggBulirschStoerIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize > t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ > t
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize < t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ < t
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 0
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > 1.0e15
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > maxError
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ > 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,mu,int,0,DEF,$ >= 0
GraggBulirschStoerIntegrator.java,integrate,interpError,double,0,DEF,$ > 10.0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 1
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ <= targetIter
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 2
GraggBulirschStoerIntegrator.java,integrate,optimalIter,int,1,DEF,$ <= k
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ < targetIter
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ < minStep
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,DimensionMismatchException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,DimensionMismatchException,$.length != mainSetDimension
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,DimensionMismatchException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,DimensionMismatchException,$.length != mainSetDimension
AdaptiveStepsizeIntegrator.java,initializeStep,initialStep,double,0,RET,$ > 0
AdaptiveStepsizeIntegrator.java,filterStep,h,double,0,NumberIsTooSmallException,FastMath.abs($) < minStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,0,DEF,$ < -maxStep
EmbeddedRungeKuttaIntegrator.java,integrate,vecAbsoluteTolerance,double[],1,DEF,$ == null
EmbeddedRungeKuttaIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize >= t
EmbeddedRungeKuttaIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ >= t
EmbeddedRungeKuttaIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize <= t
EmbeddedRungeKuttaIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ <= t
EmbeddedRungeKuttaIntegrator.java,integrate,error,double,0,DEF,$ >= 1.0
MidpointStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
MidpointStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
ClassicalRungeKuttaStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
ClassicalRungeKuttaStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
AdamsNordsieckTransformer.java,getInstance,t,AdamsNordsieckTransformer,0,DEF,$ == null
AdamsMoultonIntegrator.java,integrate,error,double,0,DEF,$ >= 1.0
AdamsMoultonIntegrator.java,visit,row,int,1,DEF,($ & 0x1) == 0
AdamsMoultonIntegrator.java,end,i,int,0,DEF,$ < mainSetDimension
DormandPrince853StepInterpolator.java,DormandPrince853StepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState == null
DormandPrince853StepInterpolator.java,computeInterpolatedStateAndDerivatives,v,double[][],0,DEF,$ == null
DormandPrince853StepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
DormandPrince853StepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
DormandPrince853StepInterpolator.java,doFinalize,currentState,double[],0,RET,$ == null
HighamHall54StepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
HighamHall54StepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
DormandPrince853Integrator.java,estimateError,den,double,0,DEF,$ <= 0.0
ThreeEighthesStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
ThreeEighthesStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
RungeKuttaStepInterpolator.java,RungeKuttaStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
RungeKuttaStepInterpolator.java,readExternal,n,int,1,DEF,$ < 0
RungeKuttaStepInterpolator.java,readExternal,currentState,double[],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,GraggBulirschStoerStepInterpolator,interpolator,GraggBulirschStoerStepInterpolator,1,DEF,$.polynomials == null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ < 0
GraggBulirschStoerStepInterpolator.java,resetTables,polynomials,double[][],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ <= 4
GraggBulirschStoerStepInterpolator.java,computeCoefficients,polynomials,double[][],0,DEF,$ == null
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,RET,$ < 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 1
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 2
GraggBulirschStoerStepInterpolator.java,estimateError,currentDegree,int,0,DEF,$ >= 5
GraggBulirschStoerStepInterpolator.java,computeInterpolatedStateAndDerivatives,currentDegree,int,0,DEF,$ > 3
GraggBulirschStoerStepInterpolator.java,computeInterpolatedStateAndDerivatives,h,double,0,DEF,$ == 0
StepNormalizer.java,handleStep,lastState,double[],0,DEF,$ == null
StepNormalizer.java,handleStep,mode,StepNormalizerMode,0,DEF,$ == StepNormalizerMode.MULTIPLES
StepNormalizer.java,doNormalizedStep,firstTime,double,0,RET,$ == lastTime
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.scaled != null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.nordsieck != null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.stateVariation != null
NordsieckStepInterpolator.java,writeExternal,scaled,double[],1,DEF,$ == null
NordsieckStepInterpolator.java,writeExternal,nordsieck,Array2DRowRealMatrix,1,DEF,$ == null
AbstractStepInterpolator.java,AbstractStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState == null
AbstractStepInterpolator.java,allocateInterpolatedArrays,dimension,int,1,DEF,$ < 0
AbstractStepInterpolator.java,allocateInterpolatedArrays,secondaryMappers,EquationsMapper[],1,DEF,$ == null
AbstractStepInterpolator.java,writeBaseExternal,currentState,double[],1,DEF,$ == null
AbstractStepInterpolator.java,writeBaseExternal,currentState,double[],0,DEF,$ != null
AbstractStepInterpolator.java,readBaseExternal,dimension,int,1,DEF,$ < 0
ExpandableStatefulODE.java,setSecondaryState,secondaryState,double[],0,DimensionMismatchException,$.length != localArray.length
EventState.java,reinitializeBegin,g0,double,0,DEF,$ == 0
EventState.java,evaluateStep,dt,double,0,RET,FastMath.abs($) < convergence
EventState.java,evaluateStep,gb,double,1,RET,$ >= 0
EventState.java,evaluateStep,solver,null,1,DEF,$ instanceof BracketedUnivariateSolver<?>
EventState.java,evaluateStep,root,double,1,DEF,FastMath.abs($ - ta) <= convergence
EventState.java,evaluateStep,ta,double,1,DEF,FastMath.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,1,DEF,FastMath.abs($ - previousEventTime) <= convergence
EventState.java,evaluateStep,previousEventTime,double,1,DEF,FastMath.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,1,RET,FastMath.abs(previousEventTime - $) > convergence
EventState.java,evaluateStep,previousEventTime,double,1,RET,FastMath.abs($ - root) > convergence
EventState.java,stepAccepted,t,double,1,DEF,FastMath.abs(pendingEventTime - $) <= convergence
EventState.java,stepAccepted,pendingEventTime,double,1,DEF,FastMath.abs($ - t) <= convergence
EventState.java,reset,t,double,0,RET,FastMath.abs(pendingEventTime - $) <= convergence
EventState.java,reset,pendingEventTime,double,0,RET,FastMath.abs($ - t) <= convergence
EventFilter.java,g,extremeT,double,1,RET,$ < t
EventFilter.java,g,next,Transformer,0,DEF,$ != previous
EventFilter.java,g,i,int,0,RET,updates[$] <= t
EventFilter.java,g,updates,double[],0,RET,$[i] <= t
EventFilter.java,g,t,double,1,RET,$ < extremeT
EventFilter.java,g,next,Transformer,0,DEF,$ != previous
MultistepIntegrator.java,MultistepIntegrator,nSteps,int,0,NumberIsTooSmallException,$ < 2
MultistepIntegrator.java,handleStep,count,int,0,DEF,$ == 0
JacobianMatrices.java,JacobianMatrices,parameters,String[],1,DEF,$ == null
JacobianMatrices.java,registerVariationalEquations,expandable,ExpandableStatefulODE,0,MismatchedEquations,$.getPrimary() != ode
JacobianMatrices.java,setInitialMainStateJacobian,efode,ExpandableStatefulODE,0,DEF,$ != null
JacobianMatrices.java,setInitialParameterJacobian,efode,ExpandableStatefulODE,0,DEF,$ != null
JacobianMatrices.java,checkDimension,arrayDimension,int,0,DimensionMismatchException,$ != expected
JacobianMatrices.java,computeDerivatives,paramDim,int,0,DEF,$ != 0
JacobianMatrices.java,computeDerivatives,paramDim,int,0,DEF,$ != 0
EquationsMapper.java,extractEquationData,equationData,double[],0,DimensionMismatchException,$.length != dimension
EquationsMapper.java,insertEquationData,equationData,double[],0,DimensionMismatchException,$.length != dimension
ArgUtils.java,flatten,array,Object[],0,DEF,$ != null
ArgUtils.java,flatten,o,null,1,DEF,$ instanceof Object[]
ExceptionContext.java,buildMessage,count,int,0,DEF,++$ < len
ExceptionContext.java,serializeContext,value,null,1,DEF,$ instanceof Serializable
BaseMultiStartMultivariateOptimizer.java,BaseMultiStartMultivariateOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
BaseMultiStartMultivariateOptimizer.java,doOptimize,maxEvalIndex,int,0,MathIllegalStateException,$ == -1
BaseMultiStartMultivariateOptimizer.java,doOptimize,initialGuessIndex,int,0,MathIllegalStateException,$ == -1
BaseMultiStartMultivariateOptimizer.java,doOptimize,i,int,1,DEF,$ == 0
BaseMultiStartMultivariateOptimizer.java,doOptimize,min,double[],0,DEF,$ != null
BaseMultiStartMultivariateOptimizer.java,doOptimize,max,double[],0,DEF,$ != null
BaseMultiStartMultivariateOptimizer.java,doOptimize,optima,PAIR[],0,DEF,$.length == 0
SimplexSolver.java,getPivotColumn,entry,double,0,DEF,$ < minValue
SimplexSolver.java,getPivotRow,entry,double,0,DEF,Precision.compareTo($, 0d, maxUlps) > 0
SimplexSolver.java,getPivotRow,maxUlps,int,0,DEF,Precision.compareTo(entry, 0d, $) > 0
SimplexSolver.java,getPivotRow,cmp,int,1,DEF,$ == 0
SimplexSolver.java,getPivotRow,cmp,int,0,DEF,$ < 0
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,1,RET,$.size() == 0
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,0,RET,$.size() > 1
SimplexSolver.java,getPivotRow,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() > 0
SimplexSolver.java,getPivotRow,basicRow,Integer,0,DEF,$ != null
SimplexSolver.java,getPivotRow,i,int,0,DEF,$ < minIndex
SimplexSolver.java,doIteration,pivotRow,Integer,0,UnboundedSolutionException,$ == null
SimplexSolver.java,doIteration,i,int,0,DEF,$ != pivotRow
SimplexSolver.java,solvePhase1,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() == 0
SimplexTableau.java,createTableau,constraint,LinearConstraint,1,DEF,$.getRelationship() == Relationship.LEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.EQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,normalize,constraint,LinearConstraint,0,RET,$.getValue() < 0
SimplexTableau.java,getConstraintTypeCounts,constraint,LinearConstraint,0,DEF,$.getRelationship() == relationship
SimplexTableau.java,getBasicRow,row,Integer,1,DEF,$ == null
SimplexTableau.java,dropPhase1Objective,epsilon,double,0,DEF,Precision.compareTo(entry, 0d, $) > 0
SimplexTableau.java,dropPhase1Objective,entry,double,0,DEF,Precision.compareTo($, 0d, epsilon) > 0
SimplexTableau.java,dropPhase1Objective,col,int,0,DEF,getBasicRow($) == null
SimplexTableau.java,isOptimal,epsilon,double,0,RET,Precision.compareTo(entry, 0d, $) < 0
SimplexTableau.java,isOptimal,entry,double,0,RET,Precision.compareTo($, 0d, epsilon) < 0
SimplexTableau.java,getSolution,colIndex,int,0,DEF,$ < 0
SimplexTableau.java,getSolution,basicRow,Integer,1,DEF,$ != null
SimplexTableau.java,getSolution,basicRow,Integer,1,DEF,$ == 0
SimplexTableau.java,subtractRow,result,double,0,DEF,FastMath.abs($) < cutOff
SimplexTableau.java,equals,other,null,0,RET,$ instanceof SimplexTableau
LinearObjectiveFunction.java,equals,other,null,0,RET,$ instanceof LinearObjectiveFunction
LinearConstraint.java,equals,other,null,0,RET,$ instanceof LinearConstraint
LinearOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof LinearObjectiveFunction
LinearOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof LinearConstraintSet
LinearOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof NonNegativeConstraint
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,previous,PointValuePair,0,RET,$ != null
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,n,int,1,DEF,getIterations() % $ == 0
NonLinearConjugateGradientOptimizer.java,doOptimize,beta,double,1,DEF,$ < 0
NonLinearConjugateGradientOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof BracketingStep
NonLinearConjugateGradientOptimizer.java,findUpperBound,yA,double,0,RET,$ * yB <= 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yB,double,0,RET,yA * $ <= 0
MultivariateFunctionPenaltyAdapter.java,MultivariateFunctionPenaltyAdapter,lower,double[],0,DimensionMismatchException,$.length != upper.length
MultivariateFunctionPenaltyAdapter.java,MultivariateFunctionPenaltyAdapter,lower,double[],0,DimensionMismatchException,$.length != scale.length
MultivariateFunctionMappingAdapter.java,MultivariateFunctionMappingAdapter,lower,double[],0,DimensionMismatchException,$.length != upper.length
BOBYQAOptimizer.java,bobyqa,lowerDifference,ArrayRealVector,1,DEF,$.getEntry(j) >= -initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,lowerDifference.getEntry($) >= -initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,lowerDifference,ArrayRealVector,1,DEF,$.getEntry(j) >= ZERO
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,lowerDifference.getEntry($) >= ZERO
BOBYQAOptimizer.java,bobyqa,upperDifference,ArrayRealVector,0,DEF,$.getEntry(j) <= initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,j,int,0,DEF,upperDifference.getEntry($) <= initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,upperDifference,ArrayRealVector,1,DEF,$.getEntry(j) <= ZERO
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,upperDifference.getEntry($) <= ZERO
BOBYQAOptimizer.java,bobyqb,trustRegionCenterInterpolationPointIndex,int,0,DEF,$ != kbase
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,bobyqb,crvmin,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,bdtest,double,0,DEF,$ < bdtol
BOBYQAOptimizer.java,bobyqb,bdtest,double,0,DEF,$ < bdtol
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,ntrits,int,1,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,denom,double,0,DEF,$ < cauchy
BOBYQAOptimizer.java,bobyqb,cauchy,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,k,int,0,DEF,$ == trustRegionCenterInterpolationPointIndex
BOBYQAOptimizer.java,bobyqb,temp,double,0,DEF,$ * den > scaden
BOBYQAOptimizer.java,bobyqb,den,double,0,DEF,temp * $ > scaden
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ == j
BOBYQAOptimizer.java,bobyqb,dnorm,double,0,DEF,$ > rho
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,MathIllegalStateException,$ > 0
BOBYQAOptimizer.java,bobyqb,vquad,double,0,MathIllegalStateException,$ >= ZERO
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= ONE_OVER_TEN
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= .7
BOBYQAOptimizer.java,bobyqb,f,double,0,DEF,$ < fopt
BOBYQAOptimizer.java,bobyqb,temp,double,0,DEF,$ * den > scaden
BOBYQAOptimizer.java,bobyqb,den,double,0,DEF,temp * $ > scaden
BOBYQAOptimizer.java,bobyqb,f,double,0,DEF,$ < fopt
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ > 0
BOBYQAOptimizer.java,bobyqb,itest,int,0,DEF,$ >= 3
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < n
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < npt
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < nh
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,sum,double,0,DEF,$ > distsq
BOBYQAOptimizer.java,bobyqb,knew,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,ratio,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,dnorm,double,0,DEF,Math.max(delta, $) > rho
BOBYQAOptimizer.java,bobyqb,delta,double,0,DEF,Math.max($, dnorm) > rho
BOBYQAOptimizer.java,bobyqb,rho,double,0,DEF,$ > stoppingTrustRegionRadius
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= SIXTEEN
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= TWO_HUNDRED_FIFTY
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,fAtInterpolationPoints,ArrayRealVector,0,DEF,$.getEntry(trustRegionCenterInterpolationPointIndex) <= fsave
BOBYQAOptimizer.java,bobyqb,trustRegionCenterInterpolationPointIndex,int,0,DEF,fAtInterpolationPoints.getEntry($) <= fsave
BOBYQAOptimizer.java,altmov,k,int,0,DEF,$ == trustRegionCenterInterpolationPointIndex
BOBYQAOptimizer.java,altmov,tmp,double,1,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,tmp,double,0,DEF,$ < ZERO
BOBYQAOptimizer.java,altmov,k,int,1,DEF,$ == knew
BOBYQAOptimizer.java,altmov,d4,double,0,DEF,d3 * $ < ZERO
BOBYQAOptimizer.java,altmov,d3,double,0,DEF,$ * d4 < ZERO
BOBYQAOptimizer.java,altmov,subd,double,0,DEF,$ > HALF
BOBYQAOptimizer.java,altmov,vlag,double,0,DEF,Math.abs($) < ONE_OVER_FOUR
BOBYQAOptimizer.java,altmov,predsq,double,0,DEF,$ > presav
BOBYQAOptimizer.java,altmov,ibdsav,int,0,DEF,$ < 0
BOBYQAOptimizer.java,altmov,ibdsav,int,0,DEF,$ > 0
BOBYQAOptimizer.java,altmov,glagValue,double,0,DEF,Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), $) > ZERO
BOBYQAOptimizer.java,altmov,i,int,0,DEF,Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,lowerDifference,ArrayRealVector,0,DEF,Math.min(trustRegionCenterOffset.getEntry(i) - $.getEntry(i), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,trustRegionCenterOffset,ArrayRealVector,0,DEF,Math.min($.getEntry(i) - lowerDifference.getEntry(i), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,glagValue,double,0,DEF,Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), $) < ZERO
BOBYQAOptimizer.java,altmov,upperDifference,ArrayRealVector,0,DEF,Math.max(trustRegionCenterOffset.getEntry(i) - $.getEntry(i), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,i,int,0,DEF,Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,trustRegionCenterOffset,ArrayRealVector,0,DEF,Math.max($.getEntry(i) - upperDifference.getEntry(i), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,ggfree,double,0,RET,$ == ZERO
BOBYQAOptimizer.java,altmov,tmp1,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,0,DEF,$.getEntry(i) == bigstp
BOBYQAOptimizer.java,altmov,i,int,0,DEF,work1.getEntry($) == bigstp
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,1,DEF,$.getEntry(i) == bigstp
BOBYQAOptimizer.java,altmov,i,int,1,DEF,work1.getEntry($) == bigstp
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,altmov,i,int,1,DEF,work1.getEntry($) == ZERO
BOBYQAOptimizer.java,altmov,glagValue,double,1,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,iflag,int,0,DEF,$ == 1
BOBYQAOptimizer.java,altmov,curv,double,1,DEF,$ > -gw
BOBYQAOptimizer.java,altmov,iflag,int,1,DEF,$ == 0
BOBYQAOptimizer.java,altmov,csave,double,0,DEF,$ > cauchy
BOBYQAOptimizer.java,prelim,nfm,int,1,DEF,$ >= 1
BOBYQAOptimizer.java,prelim,nfm,int,1,DEF,$ <= n
BOBYQAOptimizer.java,prelim,upperDifference,ArrayRealVector,0,DEF,$.getEntry(nfmm) == ZERO
BOBYQAOptimizer.java,prelim,nfmm,int,0,DEF,upperDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,nfm,int,0,DEF,$ > n
BOBYQAOptimizer.java,prelim,lowerDifference,ArrayRealVector,0,DEF,$.getEntry(nfxm) == ZERO
BOBYQAOptimizer.java,prelim,nfxm,int,0,DEF,lowerDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,upperDifference,ArrayRealVector,0,DEF,$.getEntry(nfxm) == ZERO
BOBYQAOptimizer.java,prelim,nfxm,int,0,DEF,upperDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,ipt,int,0,DEF,$ > n
BOBYQAOptimizer.java,prelim,numEval,int,1,DEF,$ == 1
BOBYQAOptimizer.java,prelim,numEval,int,1,DEF,$ >= 2
BOBYQAOptimizer.java,prelim,stepb,double,0,DEF,stepa * $ < ZERO
BOBYQAOptimizer.java,prelim,stepa,double,0,DEF,$ * stepb < ZERO
BOBYQAOptimizer.java,prelim,trustRegionCenterInterpolationPointIndex,int,0,DEF,$ == nfm
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,gradientAtTrustRegionCenter.getEntry($) >= ZERO
BOBYQAOptimizer.java,trsbox,gradientAtTrustRegionCenter,ArrayRealVector,0,DEF,$.getEntry(i) >= ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,gradientAtTrustRegionCenter.getEntry($) <= ZERO
BOBYQAOptimizer.java,trsbox,gradientAtTrustRegionCenter,ArrayRealVector,0,DEF,$.getEntry(i) <= ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,beta,double,1,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,stepsq,double,0,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,beta,double,0,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,resid,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,ds,double,1,DEF,$ < ZERO
BOBYQAOptimizer.java,trsbox,shs,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,0,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,s.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,1,DEF,$.getEntry(i) > ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,s.getEntry($) > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ < stplen
BOBYQAOptimizer.java,trsbox,stplen,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ == -1
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,crvmin,double,0,DEF,$ == MINUS_ONE
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,0,DEF,$.getEntry(iact) < ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,s.getEntry($) < ZERO
BOBYQAOptimizer.java,trsbox,delsq,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,stplen,double,0,DEF,$ < blen
BOBYQAOptimizer.java,trsbox,iterc,int,0,DEF,$ == itermax
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,tempa,double,1,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,tempb,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,angbd * $ > tempa
BOBYQAOptimizer.java,trsbox,angbd,double,0,DEF,$ * temp > tempa
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,angbd * $ > tempb
BOBYQAOptimizer.java,trsbox,angbd,double,0,DEF,$ * temp > tempb
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,rednew,double,1,DEF,$ > redmax
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ < 0
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ < iu
BOBYQAOptimizer.java,trsbox,sdec,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ == iu
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == MINUS_ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == MINUS_ONE
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,trsbox,k,int,0,DEF,modelSecondDerivativesParameters.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,modelSecondDerivativesParameters,ArrayRealVector,0,DEF,$.getEntry(k) != ZERO
BOBYQAOptimizer.java,trsbox,crvmin,double,0,DEF,$ != ZERO
BOBYQAOptimizer.java,trsbox,iterc,int,0,DEF,$ > itcsav
BOBYQAOptimizer.java,update,d1,double,0,DEF,Math.abs($) > ztest
BOBYQAOptimizer.java,update,i,int,0,DEF,$ >= npt
BOBYQAOptimizer.java,setup,dimension,int,0,NumberIsTooSmallException,$ < MINIMUM_PROBLEM_DIMENSION
BOBYQAOptimizer.java,setup,minDiff,double,0,DEF,$ < requiredMinDiff
PowellOptimizer.java,PowellOptimizer,rel,double,0,NumberIsTooSmallException,$ < MIN_RELATIVE_TOLERANCE
PowellOptimizer.java,PowellOptimizer,abs,double,0,NotStrictlyPositiveException,$ <= 0
PowellOptimizer.java,doOptimize,fX2,double,0,DEF,($ - fVal) > delta
PowellOptimizer.java,doOptimize,fVal,double,0,DEF,(fX2 - $) > delta
PowellOptimizer.java,doOptimize,checker,ConvergenceChecker<PointValuePair>,0,DEF,$ != null
PowellOptimizer.java,doOptimize,goal,GoalType,1,RET,$ == GoalType.MINIMIZE
PowellOptimizer.java,doOptimize,fX,double,0,DEF,$ > fX2
PowellOptimizer.java,doOptimize,t,double,0,DEF,$ < 0.0
MultiDirectionalSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(reflected, best) < 0
MultiDirectionalSimplex.java,iterate,reflected,PointValuePair,0,RET,comparator.compare($, best) < 0
MultiDirectionalSimplex.java,iterate,best,PointValuePair,0,RET,comparator.compare(reflected, $) < 0
MultiDirectionalSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,DEF,$.compare(reflected, expanded) <= 0
MultiDirectionalSimplex.java,iterate,expanded,PointValuePair,0,DEF,comparator.compare(reflected, $) <= 0
MultiDirectionalSimplex.java,iterate,reflected,PointValuePair,0,DEF,comparator.compare($, expanded) <= 0
AbstractSimplex.java,AbstractSimplex,steps,double[],0,NullArgumentException,$ == null
AbstractSimplex.java,AbstractSimplex,steps,double[],0,ZeroException,$.length == 0
AbstractSimplex.java,AbstractSimplex,j,int,0,ZeroException,steps[$] == 0
AbstractSimplex.java,AbstractSimplex,steps,double[],0,ZeroException,$[j] == 0
AbstractSimplex.java,AbstractSimplex,referenceSimplex,double[][],0,NotStrictlyPositiveException,$.length <= 0
AbstractSimplex.java,AbstractSimplex,refI,double[],0,DimensionMismatchException,$.length != dimension
AbstractSimplex.java,AbstractSimplex,i,int,0,DEF,$ > 0
AbstractSimplex.java,build,dimension,int,0,DimensionMismatchException,$ != startPoint.length
AbstractSimplex.java,replaceWorstPoint,comparator,Comparator<PointValuePair>,0,DEF,$.compare(simplex[i], pointValuePair) > 0
AbstractSimplex.java,replaceWorstPoint,pointValuePair,PointValuePair,0,DEF,comparator.compare(simplex[i], $) > 0
AbstractSimplex.java,replaceWorstPoint,simplex,PointValuePair[],0,DEF,comparator.compare($[i], pointValuePair) > 0
AbstractSimplex.java,replaceWorstPoint,i,int,0,DEF,comparator.compare(simplex[$], pointValuePair) > 0
AbstractSimplex.java,getPoint,index,int,0,OutOfRangeException,$ < 0
AbstractSimplex.java,getPoint,index,int,0,OutOfRangeException,$ >= simplex.length
AbstractSimplex.java,setPoint,index,int,0,OutOfRangeException,$ < 0
AbstractSimplex.java,setPoint,index,int,0,OutOfRangeException,$ >= simplex.length
AbstractSimplex.java,setPoints,points,PointValuePair[],0,DimensionMismatchException,$.length != simplex.length
CMAESOptimizer.java,Sigma,s,double[],0,NotPositiveException,$[i] < 0
CMAESOptimizer.java,Sigma,i,int,0,NotPositiveException,s[$] < 0
CMAESOptimizer.java,PopulationSize,size,int,0,NotStrictlyPositiveException,$ <= 0
CMAESOptimizer.java,doOptimize,diagonalOnly,int,1,DEF,$ <= 0
CMAESOptimizer.java,doOptimize,i,int,0,DEF,$ >= checkFeasableCount
CMAESOptimizer.java,doOptimize,diagonalOnly,int,1,DEF,$ <= 0
CMAESOptimizer.java,doOptimize,bestValue,double,0,DEF,$ > bestFitness
CMAESOptimizer.java,doOptimize,lastResult,PointValuePair,0,DEF,$ != null
CMAESOptimizer.java,doOptimize,stopFitness,double,0,DEF,$ != 0
CMAESOptimizer.java,doOptimize,sigma,double,0,DEF,$ * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX
CMAESOptimizer.java,doOptimize,sqrtDiagC,double[],0,DEF,sigma * Math.max(Math.abs(pcCol[i]), $[i]) > stopTolX
CMAESOptimizer.java,doOptimize,pcCol,double[],0,DEF,sigma * Math.max(Math.abs($[i]), sqrtDiagC[i]) > stopTolX
CMAESOptimizer.java,doOptimize,i,int,0,DEF,sigma * Math.max(Math.abs(pcCol[$]), sqrtDiagC[$]) > stopTolX
CMAESOptimizer.java,doOptimize,sigma,double,0,DEF,$ * sqrtDiagC[i] > stopTolUpX
CMAESOptimizer.java,doOptimize,sqrtDiagC,double[],0,DEF,sigma * $[i] > stopTolUpX
CMAESOptimizer.java,doOptimize,i,int,0,DEF,sigma * sqrtDiagC[$] > stopTolUpX
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > 2
CMAESOptimizer.java,doOptimize,worstFitness,double,0,DEF,Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,bestFitness,double,0,DEF,Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > fitnessHistory.length
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,historyWorst - $ < stopTolHistFun
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,$ - historyBest < stopTolHistFun
CMAESOptimizer.java,doOptimize,diagD,RealMatrix,0,DEF,max($) / min($) > 1e7
CMAESOptimizer.java,doOptimize,lastResult,PointValuePair,0,DEF,$ != null
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > 2
CMAESOptimizer.java,doOptimize,bestFitness,double,0,DEF,Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
CMAESOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof Sigma
CMAESOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof PopulationSize
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,OutOfRangeException,$ != null
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,DimensionMismatchException,$.length != init.length
CMAESOptimizer.java,initializeCMA,lambda,int,0,NotStrictlyPositiveException,$ <= 0
CMAESOptimizer.java,updateCovarianceDiagonalOnly,diagonalOnly,int,0,DEF,$ > 1
CMAESOptimizer.java,updateCovarianceDiagonalOnly,iterations,int,0,DEF,$ > diagonalOnly
CMAESOptimizer.java,updateCovariance,ccovmu,double,0,DEF,ccov1 + $ > 0
CMAESOptimizer.java,updateCovariance,ccov1,double,0,DEF,$ + ccovmu > 0
CMAESOptimizer.java,updateCovariance,negccov,double,0,DEF,$ > negcovMax
CMAESOptimizer.java,updateBD,negccov,double,0,DEF,ccov1 + ccovmu + $ > 0
CMAESOptimizer.java,updateBD,ccovmu,double,0,DEF,ccov1 + $ + negccov > 0
CMAESOptimizer.java,updateBD,ccov1,double,0,DEF,$ + ccovmu + negccov > 0
CMAESOptimizer.java,updateBD,negccov,double,0,DEF,(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,ccovmu,double,0,DEF,(iterations % 1. / (ccov1 + $ + negccov) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,ccov1,double,0,DEF,(iterations % 1. / ($ + ccovmu + negccov) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,dimension,int,0,DEF,(iterations % 1. / (ccov1 + ccovmu + negccov) / $ / 10.) < 1
CMAESOptimizer.java,updateBD,iterations,int,0,DEF,($ % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1
CMAESOptimizer.java,updateBD,diagD,RealMatrix,0,DEF,min($) <= 0
CMAESOptimizer.java,updateBD,i,int,0,DEF,diagD.getEntry($, 0) < 0
CMAESOptimizer.java,updateBD,diagD,RealMatrix,0,DEF,$.getEntry(i, 0) < 0
CMAESOptimizer.java,equals,other,null,0,RET,$ instanceof DoubleIndex
CMAESOptimizer.java,diag,m,RealMatrix,1,RET,$.getColumnDimension() == 1
CMAESOptimizer.java,eye,r,int,0,DEF,$ < m
CMAESOptimizer.java,max,max,double,0,DEF,$ < e
CMAESOptimizer.java,min,min,double,0,DEF,$ > e
SimplexOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof AbstractSimplex
SimplexOptimizer.java,checkParameters,simplex,AbstractSimplex,0,NullArgumentException,$ == null
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(best, reflected) <= 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare(best, $) <= 0
NelderMeadSimplex.java,iterate,best,PointValuePair,1,DEF,comparator.compare($, reflected) <= 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(reflected, secondBest) < 0
NelderMeadSimplex.java,iterate,secondBest,PointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare($, secondBest) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(reflected, best) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare($, best) < 0
NelderMeadSimplex.java,iterate,best,PointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(expanded, reflected) < 0
NelderMeadSimplex.java,iterate,expanded,PointValuePair,1,DEF,comparator.compare($, reflected) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare(expanded, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,RET,$.compare(reflected, worst) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,RET,comparator.compare($, worst) < 0
NelderMeadSimplex.java,iterate,worst,PointValuePair,1,RET,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(outContracted, reflected) <= 0
NelderMeadSimplex.java,iterate,outContracted,PointValuePair,0,RET,comparator.compare($, reflected) <= 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,0,RET,comparator.compare(outContracted, $) <= 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(inContracted, worst) < 0
NelderMeadSimplex.java,iterate,worst,PointValuePair,0,RET,comparator.compare(inContracted, $) < 0
NelderMeadSimplex.java,iterate,inContracted,PointValuePair,0,RET,comparator.compare($, worst) < 0
MultiStartMultivariateOptimizer.java,compare,o1,PointValuePair,1,RET,$ == null
MultiStartMultivariateOptimizer.java,compare,o2,PointValuePair,0,RET,$ == null
LeastSquaresConverter.java,LeastSquaresConverter,observations,double[],0,DimensionMismatchException,$.length != weights.length
LeastSquaresConverter.java,value,residuals,double[],0,DimensionMismatchException,$.length != observations.length
LeastSquaresConverter.java,value,weights,double[],1,DEF,$ != null
LeastSquaresConverter.java,value,scale,RealMatrix,1,DEF,$ != null
MultivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof GoalType
MultivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof ObjectiveFunction
GradientMultivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof ObjectiveFunctionGradient
MultiStartMultivariateVectorOptimizer.java,compare,o1,PointVectorValuePair,1,RET,$ == null
MultiStartMultivariateVectorOptimizer.java,compare,o2,PointVectorValuePair,0,RET,$ == null
MultivariateVectorOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof ModelFunction
MultivariateVectorOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof Target
MultivariateVectorOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof Weight
JacobianMultivariateVectorOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof ModelFunctionJacobian
LevenbergMarquardtOptimizer.java,doOptimize,dk,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,currentCost,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,s,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtOptimizer.java,doOptimize,currentCost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtOptimizer.java,doOptimize,currentCost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtOptimizer.java,doOptimize,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtOptimizer.java,doOptimize,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,RET,$ >= 1.0e-4
LevenbergMarquardtOptimizer.java,doOptimize,checker,ConvergenceChecker<PointVectorValuePair>,0,RET,$ != null
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,0,RET,FastMath.abs($) <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,1,ConvergenceException,FastMath.abs($) <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,1,ConvergenceException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,ConvergenceException,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,ConvergenceException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtOptimizer.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtOptimizer.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtOptimizer.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtOptimizer.java,qrDecomposition,ak2,double,0,RET,$ <= qrRankingThreshold
AbstractLeastSquaresOptimizer.java,computeResiduals,objectiveValue,double[],0,DimensionMismatchException,$.length != target.length
AbstractLeastSquaresOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof Weight
AbstractLeastSquaresOptimizer.java,squareRoot,m,null,1,RET,$ instanceof DiagonalMatrix
GaussNewtonOptimizer.java,doOptimize,checker,ConvergenceChecker<PointVectorValuePair>,0,NullArgumentException,$ == null
GaussNewtonOptimizer.java,doOptimize,previous,PointVectorValuePair,0,RET,$ != null
SimpleValueChecker.java,SimpleValueChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimpleValueChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimpleValueChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
SearchInterval.java,SearchInterval,lo,double,0,NumberIsTooLargeException,$ >= hi
SearchInterval.java,SearchInterval,init,double,0,OutOfRangeException,$ < lo
SearchInterval.java,SearchInterval,init,double,0,OutOfRangeException,$ > hi
BrentOptimizer.java,BrentOptimizer,rel,double,0,NumberIsTooSmallException,$ < MIN_RELATIVE_TOLERANCE
BrentOptimizer.java,BrentOptimizer,abs,double,0,NotStrictlyPositiveException,$ <= 0
BrentOptimizer.java,doOptimize,lo,double,1,DEF,$ < hi
BrentOptimizer.java,doOptimize,e,double,1,DEF,FastMath.abs($) > tol1
BrentOptimizer.java,doOptimize,q,double,1,DEF,$ > 0
BrentOptimizer.java,doOptimize,a,double,0,DEF,u - $ < tol2
BrentOptimizer.java,doOptimize,u,double,0,DEF,$ - a < tol2
BrentOptimizer.java,doOptimize,b,double,0,DEF,$ - u < tol2
BrentOptimizer.java,doOptimize,u,double,0,DEF,b - $ < tol2
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ <= m
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ < m
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ < m
BrentOptimizer.java,doOptimize,d,double,1,DEF,FastMath.abs($) < tol1
BrentOptimizer.java,doOptimize,d,double,1,DEF,$ >= 0
BrentOptimizer.java,doOptimize,checker,ConvergenceChecker<UnivariatePointValuePair>,0,RET,$ != null
BrentOptimizer.java,doOptimize,fu,double,1,DEF,$ <= fx
BrentOptimizer.java,doOptimize,u,double,1,DEF,$ < x
BrentOptimizer.java,doOptimize,u,double,1,DEF,$ < x
BrentOptimizer.java,doOptimize,fu,double,1,DEF,$ <= fw
BrentOptimizer.java,doOptimize,fu,double,0,DEF,$ <= fv
BrentOptimizer.java,best,a,UnivariatePointValuePair,0,RET,$ == null
BrentOptimizer.java,best,b,UnivariatePointValuePair,0,RET,$ == null
SimpleUnivariateValueChecker.java,SimpleUnivariateValueChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimpleUnivariateValueChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimpleUnivariateValueChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
MultiStartUnivariateOptimizer.java,MultiStartUnivariateOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
MultiStartUnivariateOptimizer.java,getOptima,optima,UnivariatePointValuePair[],0,MathIllegalStateException,$ == null
MultiStartUnivariateOptimizer.java,doOptimize,maxEvalIndex,int,0,MathIllegalStateException,$ == -1
MultiStartUnivariateOptimizer.java,doOptimize,searchIntervalIndex,int,0,MathIllegalStateException,$ == -1
MultiStartUnivariateOptimizer.java,doOptimize,optima,UnivariatePointValuePair[],0,DEF,$[0] == null
MultiStartUnivariateOptimizer.java,compare,o1,UnivariatePointValuePair,1,RET,$ == null
MultiStartUnivariateOptimizer.java,compare,o2,UnivariatePointValuePair,0,RET,$ == null
UnivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof SearchInterval
UnivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof UnivariateObjectiveFunction
UnivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof GoalType
BracketFinder.java,BracketFinder,growLimit,double,0,NotStrictlyPositiveException,$ <= 0
BracketFinder.java,BracketFinder,maxEvaluations,int,0,NotStrictlyPositiveException,$ <= 0
BracketFinder.java,search,fA,double,0,DEF,$ < fB
BracketFinder.java,search,fA,double,0,DEF,$ > fB
BracketFinder.java,search,w,double,1,DEF,($ - xC) * (xB - $) > 0
BracketFinder.java,search,xB,double,1,DEF,(w - xC) * ($ - w) > 0
BracketFinder.java,search,xC,double,1,DEF,(w - $) * (xB - w) > 0
BracketFinder.java,search,fW,double,1,DEF,$ < fC
BracketFinder.java,search,fW,double,1,DEF,$ > fC
BracketFinder.java,search,fW,double,0,DEF,$ > fB
BracketFinder.java,search,fW,double,0,DEF,$ < fB
BracketFinder.java,search,w,double,1,DEF,($ - wLim) * (wLim - xC) >= 0
BracketFinder.java,search,xC,double,1,DEF,(w - wLim) * (wLim - $) >= 0
BracketFinder.java,search,wLim,double,1,DEF,(w - $) * ($ - xC) >= 0
BracketFinder.java,search,w,double,1,DEF,($ - wLim) * (xC - $) > 0
BracketFinder.java,search,xC,double,1,DEF,(w - wLim) * ($ - w) > 0
BracketFinder.java,search,wLim,double,1,DEF,(w - $) * (xC - w) > 0
BracketFinder.java,search,fW,double,0,DEF,$ < fC
BracketFinder.java,search,fW,double,0,DEF,$ > fC
BracketFinder.java,search,lo,double,0,DEF,$ > hi
SimpleVectorValueChecker.java,SimpleVectorValueChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimpleVectorValueChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimpleVectorValueChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
MaxEval.java,MaxEval,max,int,0,NotStrictlyPositiveException,$ <= 0
BaseOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof MaxEval
BaseOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof MaxIter
MaxIter.java,MaxIter,max,int,0,NotStrictlyPositiveException,$ <= 0
SimplePointChecker.java,SimplePointChecker,maxIter,int,0,NotStrictlyPositiveException,$ <= 0
SimplePointChecker.java,converged,maxIterationCount,int,0,RET,$ != ITERATION_CHECK_DISABLED
SimplePointChecker.java,converged,iteration,int,0,RET,$ >= maxIterationCount
BaseMultivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof InitialGuess
BaseMultivariateOptimizer.java,parseOptimizationData,data,null,0,DEF,$ instanceof SimpleBounds
BaseMultivariateOptimizer.java,checkParameters,start,double[],0,NumberIsTooLargeException,$ != null
BaseMultivariateOptimizer.java,checkParameters,lowerBound,double[],0,NumberIsTooSmallException,$ != null
BaseMultivariateOptimizer.java,checkParameters,lowerBound,double[],0,DimensionMismatchException,$.length != dim
BaseMultivariateOptimizer.java,checkParameters,v,double,0,NumberIsTooSmallException,$ < lo
BaseMultivariateOptimizer.java,checkParameters,upperBound,double[],0,NumberIsTooLargeException,$ != null
BaseMultivariateOptimizer.java,checkParameters,upperBound,double[],0,DimensionMismatchException,$.length != dim
BaseMultivariateOptimizer.java,checkParameters,v,double,0,NumberIsTooLargeException,$ > hi
BinaryMutation.java,mutate,original,null,0,MathIllegalArgumentException,$ instanceof BinaryChromosome
FixedElapsedTime.java,FixedElapsedTime,maxTime,long,0,NumberIsTooSmallException,$ < 0
FixedElapsedTime.java,isSatisfied,endTime,long,0,DEF,$ < 0
RandomKey.java,decodeGeneric,representation,List<Double>,0,DimensionMismatchException,$.size() != l
RandomKey.java,decodeGeneric,sortedRepr,List<Double>,0,DimensionMismatchException,$.size() != l
RandomKey.java,isSame,another,null,0,RET,$ instanceof RandomKey<?>
RandomKey.java,checkValidity,val,double,0,InvalidRepresentationException,$ < 0
RandomKey.java,checkValidity,val,double,0,InvalidRepresentationException,$ > 1
RandomKey.java,inducedPermutation,index,int,0,MathIllegalArgumentException,$ == -1
GeneticAlgorithm.java,GeneticAlgorithm,crossoverRate,double,0,OutOfRangeException,$ < 0
GeneticAlgorithm.java,GeneticAlgorithm,crossoverRate,double,0,OutOfRangeException,$ > 1
GeneticAlgorithm.java,GeneticAlgorithm,mutationRate,double,0,OutOfRangeException,$ < 0
GeneticAlgorithm.java,GeneticAlgorithm,mutationRate,double,0,OutOfRangeException,$ > 1
OrderedCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
OrderedCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
Chromosome.java,searchForFitnessUpdate,sameChromosome,Chromosome,0,DEF,$ != null
ElitisticListPopulation.java,setElitismRate,elitismRate,double,0,OutOfRangeException,$ < 0
ElitisticListPopulation.java,setElitismRate,elitismRate,double,0,OutOfRangeException,$ > 1
NPointCrossover.java,NPointCrossover,crossoverPoints,int,0,NotStrictlyPositiveException,$ <= 0
NPointCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
NPointCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
NPointCrossover.java,mate,crossoverPoints,int,0,NumberIsTooLargeException,$ >= length
CycleCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
CycleCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
CycleCrossover.java,mate,cycle,int,0,DEF,$++ % 2 != 0
CycleCrossover.java,mate,idx,int,0,DEF,$ >= length
BinaryChromosome.java,checkValidity,i,int,0,InvalidRepresentationException,$ < 0
BinaryChromosome.java,checkValidity,i,int,0,InvalidRepresentationException,$ >1
BinaryChromosome.java,isSame,another,null,0,RET,$ instanceof BinaryChromosome
OnePointCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
OnePointCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
RandomKeyMutation.java,mutate,original,null,0,MathIllegalArgumentException,$ instanceof RandomKey<?>
UniformCrossover.java,UniformCrossover,ratio,double,0,OutOfRangeException,$ < 0.0d
UniformCrossover.java,UniformCrossover,ratio,double,0,OutOfRangeException,$ > 1.0d
UniformCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
UniformCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
UniformCrossover.java,mate,random,RandomGenerator,1,DEF,$.nextDouble() < ratio
ListPopulation.java,ListPopulation,chromosomes,List<Chromosome>,0,NullArgumentException,$ == null
ListPopulation.java,ListPopulation,populationLimit,int,0,NotPositiveException,$ <= 0
ListPopulation.java,ListPopulation,chromosomes,List<Chromosome>,0,NumberIsTooLargeException,$.size() > populationLimit
ListPopulation.java,setChromosomes,chromosomes,List<Chromosome>,0,NullArgumentException,$ == null
ListPopulation.java,setChromosomes,chromosomes,List<Chromosome>,0,NumberIsTooLargeException,$.size() > populationLimit
ListPopulation.java,addChromosomes,chromosomeColl,Collection<Chromosome>,0,NumberIsTooLargeException,chromosomes.size() + $.size() > populationLimit
ListPopulation.java,addChromosomes,chromosomes,List<Chromosome>,0,NumberIsTooLargeException,$.size() + chromosomeColl.size() > populationLimit
ListPopulation.java,addChromosome,chromosomes,List<Chromosome>,0,NumberIsTooLargeException,$.size() >= populationLimit
ListPopulation.java,getFittestChromosome,bestChromosome,Chromosome,0,DEF,chromosome.compareTo($) > 0
ListPopulation.java,getFittestChromosome,chromosome,Chromosome,0,DEF,$.compareTo(bestChromosome) > 0
ListPopulation.java,setPopulationLimit,populationLimit,int,0,NotPositiveException,$ <= 0
FixedGenerationCount.java,FixedGenerationCount,maxGenerations,int,0,NumberIsTooSmallException,$ <= 0
ConjugateGradient.java,solveInPlace,m,RealLinearOperator,1,DEF,$ == null
ConjugateGradient.java,solveInPlace,rnorm,double,0,RET,$ <= rmax
ConjugateGradient.java,solveInPlace,m,RealLinearOperator,0,DEF,$ != null
ConjugateGradient.java,solveInPlace,rhoNext,double,0,DEF,$ <= 0.
ConjugateGradient.java,solveInPlace,manager,IterationManager,1,DEF,$.getIterations() == 2
ConjugateGradient.java,solveInPlace,pq,double,0,DEF,$ <= 0.
ConjugateGradient.java,solveInPlace,rnorm,double,0,RET,$ <= rmax
JacobiPreconditioner.java,create,a,RealLinearOperator,0,NonSquareOperatorException,$.getRowDimension() != n
JacobiPreconditioner.java,create,a,null,1,DEF,$ instanceof AbstractRealMatrix
RealVectorFormat.java,format,i,int,0,DEF,$ > 0
RealVectorFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
RealVectorFormat.java,parse,component,Number,1,DEF,$ != null
Array2DRowRealMatrix.java,Array2DRowRealMatrix,d,double[][],0,NullArgumentException,$ == null
Array2DRowRealMatrix.java,Array2DRowRealMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,Array2DRowRealMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,Array2DRowRealMatrix,r,int,0,DimensionMismatchException,d[$].length != nCols
Array2DRowRealMatrix.java,Array2DRowRealMatrix,d,double[][],0,DimensionMismatchException,$[r].length != nCols
Array2DRowRealMatrix.java,setSubMatrix,data,double[][],1,DimensionMismatchException,$ == null
Array2DRowRealMatrix.java,setSubMatrix,row,int,0,MathIllegalStateException,$ > 0
Array2DRowRealMatrix.java,setSubMatrix,column,int,0,MathIllegalStateException,$ > 0
Array2DRowRealMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,setSubMatrix,i,int,0,DimensionMismatchException,subMatrix[$].length != nCols
Array2DRowRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DimensionMismatchException,$[i].length != nCols
Array2DRowRealMatrix.java,operate,v,double[],0,DimensionMismatchException,$.length != nCols
Array2DRowRealMatrix.java,preMultiply,v,double[],0,DimensionMismatchException,$.length != nRows
AbstractRealMatrix.java,AbstractRealMatrix,rowDimension,int,0,NotStrictlyPositiveException,$ < 1
AbstractRealMatrix.java,AbstractRealMatrix,columnDimension,int,0,NotStrictlyPositiveException,$ < 1
AbstractRealMatrix.java,power,p,int,0,IllegalArgumentException,$ < 0
AbstractRealMatrix.java,power,p,int,0,RET,$ == 0
AbstractRealMatrix.java,power,p,int,0,RET,$ == 1
AbstractRealMatrix.java,power,i,int,0,DEF,binaryRepresentation[$] == '1'
AbstractRealMatrix.java,power,binaryRepresentation,char[],0,DEF,$[i] == '1'
AbstractRealMatrix.java,power,maxI,int,0,DEF,$ == -1
AbstractRealMatrix.java,visit,row,int,0,DEF,$ == endRow
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$.length < rowsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$[0].length < columnsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$.length < selectedRows.length
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$[0].length < selectedColumns.length
AbstractRealMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
AbstractRealMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
AbstractRealMatrix.java,setSubMatrix,r,int,0,DimensionMismatchException,subMatrix[$].length != nCols
AbstractRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DimensionMismatchException,$[r].length != nCols
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
AbstractRealMatrix.java,setRowVector,vector,RealVector,0,MatrixDimensionMismatchException,$.getDimension() != nCols
AbstractRealMatrix.java,setColumnVector,vector,RealVector,0,MatrixDimensionMismatchException,$.getDimension() != nRows
AbstractRealMatrix.java,setRow,array,double[],0,MatrixDimensionMismatchException,$.length != nCols
AbstractRealMatrix.java,setColumn,array,double[],0,MatrixDimensionMismatchException,$.length != nRows
AbstractRealMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractRealMatrix.java,operate,v,double[],0,DimensionMismatchException,$.length != nCols
AbstractRealMatrix.java,operate,v,RealVector,0,DimensionMismatchException,$.getDimension() != nCols
AbstractRealMatrix.java,preMultiply,v,double[],0,DimensionMismatchException,$.length != nRows
AbstractRealMatrix.java,preMultiply,v,RealVector,0,DimensionMismatchException,$.getDimension() != nRows
AbstractRealMatrix.java,equals,object,Object,0,RET,$ instanceof RealMatrix == false
AbstractRealMatrix.java,equals,object,null,0,RET,$ instanceof RealMatrix
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getColumnDimension() != nCols
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getRowDimension() != nRows
SymmLQ.java,checkSymmetry,s,double,0,DEF,FastMath.abs($ - t) > epsa
SymmLQ.java,checkSymmetry,t,double,0,DEF,FastMath.abs(s - $) > epsa
SymmLQ.java,refineSolution,lqnorm,double,1,DEF,$ < cgnorm
SymmLQ.java,update,m,RealLinearOperator,0,DEF,$ != null
SymmLQ.java,update,beta,double,0,DEF,$ < 0.
SymmLQ.java,updateNorms,lqnorm,double,1,DEF,$ <= cgnorm
SymmLQ.java,updateNorms,acond,double,0,IllConditionedOperatorException,$ * MACH_PREC >= 0.1
SymmLQ.java,updateNorms,MACH_PREC,double,0,IllConditionedOperatorException,acond * $ >= 0.1
SymmLQ.java,updateNorms,beta1,double,0,SingularOperatorException,$ <= epsx
BlockRealMatrix.java,toBlocksLayout,length,int,0,DimensionMismatchException,$ != columns
BlockRealMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,setSubMatrix,refLength,int,0,NoDataException,$ == 0
BlockRealMatrix.java,setSubMatrix,subRow,double[],0,DimensionMismatchException,$.length != refLength
BlockRealMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
BlockRealMatrix.java,setRowMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
BlockRealMatrix.java,setRowMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
BlockRealMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
BlockRealMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
BlockRealMatrix.java,setColumnMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
BlockRealMatrix.java,setColumnMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
BlockRealMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
BlockRealMatrix.java,setRow,array,double[],0,MatrixDimensionMismatchException,$.length != nCols
BlockRealMatrix.java,setColumn,array,double[],0,MatrixDimensionMismatchException,$.length != nRows
BlockRealMatrix.java,operate,v,double[],0,DimensionMismatchException,$.length != columns
BlockRealMatrix.java,preMultiply,v,double[],0,DimensionMismatchException,$.length != rows
MatrixUtils.java,createRealMatrix,data,double[][],0,NullArgumentException,$ == null
MatrixUtils.java,createRealMatrix,data,double[][],0,NullArgumentException,$[0] == null
MatrixUtils.java,createFieldMatrix,data,T[][],0,NullArgumentException,$ == null
MatrixUtils.java,createFieldMatrix,data,T[][],0,NullArgumentException,$[0] == null
MatrixUtils.java,createRealVector,data,double[],0,NullArgumentException,$ == null
MatrixUtils.java,createFieldVector,data,T[],0,NullArgumentException,$ == null
MatrixUtils.java,createFieldVector,data,T[],0,ZeroException,$.length == 0
MatrixUtils.java,createRowRealMatrix,rowData,double[],0,NullArgumentException,$ == null
MatrixUtils.java,createRowFieldMatrix,rowData,T[],0,NullArgumentException,$ == null
MatrixUtils.java,createRowFieldMatrix,nCols,int,0,NoDataException,$ == 0
MatrixUtils.java,createColumnRealMatrix,columnData,double[],0,NullArgumentException,$ == null
MatrixUtils.java,createColumnFieldMatrix,columnData,T[],0,NullArgumentException,$ == null
MatrixUtils.java,createColumnFieldMatrix,nRows,int,0,NoDataException,$ == 0
MatrixUtils.java,checkRowIndex,row,int,0,OutOfRangeException,$ < 0
MatrixUtils.java,checkColumnIndex,column,int,0,OutOfRangeException,$ < 0
MatrixUtils.java,checkSubMatrixIndex,endRow,int,0,NumberIsTooSmallException,$ < startRow
MatrixUtils.java,checkSubMatrixIndex,endColumn,int,0,NumberIsTooSmallException,$ < startColumn
MatrixUtils.java,checkSubMatrixIndex,selectedRows,int[],0,NullArgumentException,$ == null
MatrixUtils.java,checkSubMatrixIndex,selectedColumns,int[],0,NullArgumentException,$ == null
MatrixUtils.java,checkSubMatrixIndex,selectedRows,int[],0,NoDataException,$.length == 0
MatrixUtils.java,checkSubMatrixIndex,selectedColumns,int[],0,NoDataException,$.length == 0
MatrixUtils.java,solveLowerTriangularSystem,rm,RealMatrix,0,MathIllegalArgumentException,$ == null
MatrixUtils.java,solveLowerTriangularSystem,b,RealVector,0,MathIllegalArgumentException,$ == null
MatrixUtils.java,solveLowerTriangularSystem,diag,double,0,MathArithmeticException,FastMath.abs($) < Precision.SAFE_MIN
MatrixUtils.java,solveUpperTriangularSystem,rm,RealMatrix,0,MathIllegalArgumentException,$ == null
MatrixUtils.java,solveUpperTriangularSystem,b,RealVector,0,MathIllegalArgumentException,$ == null
MatrixUtils.java,solveUpperTriangularSystem,diag,double,0,MathArithmeticException,FastMath.abs($) < Precision.SAFE_MIN
SchurTransformer.java,getP,cachedP,RealMatrix,0,DEF,$ == null
SchurTransformer.java,getPT,cachedPt,RealMatrix,0,DEF,$ == null
SchurTransformer.java,getT,cachedT,RealMatrix,0,DEF,$ == null
SchurTransformer.java,transform,l,int,1,DEF,$ == idx
SchurTransformer.java,transform,q,double,0,DEF,$ >= 0
SchurTransformer.java,transform,p,double,1,DEF,$ >= 0
SchurTransformer.java,transform,iteration,int,0,MaxCountExceededException,++$ > MAX_ITERATIONS
SchurTransformer.java,transform,m,int,0,DEF,$ == l
SchurTransformer.java,computeShift,l,int,0,DEF,$ < idx
SchurTransformer.java,computeShift,iteration,int,0,DEF,$ == 10
SchurTransformer.java,computeShift,iteration,int,0,DEF,$ == 30
SchurTransformer.java,computeShift,epsilon,double,0,DEF,Precision.compareTo(s, 0.0d, $) > 0
SchurTransformer.java,computeShift,s,double,0,DEF,Precision.compareTo($, 0.0d, epsilon) > 0
SchurTransformer.java,computeShift,shift,ShiftInfo,0,DEF,$.y < shift.x
SchurTransformer.java,performDoubleQRStep,k,int,0,DEF,$ != m
SchurTransformer.java,performDoubleQRStep,p,double,0,DEF,$ < 0.0
SchurTransformer.java,performDoubleQRStep,k,int,1,DEF,$ != m
SchurTransformer.java,performDoubleQRStep,l,int,0,DEF,$ != m
RealVector.java,checkVectorDimensions,d,int,0,DimensionMismatchException,$ != n
RealVector.java,checkIndex,index,int,0,OutOfRangeException,$ < 0
RealVector.java,checkIndices,start,int,0,OutOfRangeException,$ < 0
RealVector.java,checkIndices,start,int,0,OutOfRangeException,$ >= dim
RealVector.java,checkIndices,end,int,0,OutOfRangeException,$ < 0
RealVector.java,checkIndices,end,int,0,OutOfRangeException,$ >= dim
RealVector.java,checkIndices,end,int,0,NumberIsTooSmallException,$ < start
RealVector.java,mapAddToSelf,d,double,0,RET,$ != 0
RealVector.java,cosine,norm,double,0,MathArithmeticException,$ == 0
RealVector.java,cosine,vNorm,double,0,MathArithmeticException,$ == 0
RealVector.java,getMinIndex,entry,Entry,0,DEF,$.getValue() <= minValue
RealVector.java,getMaxIndex,entry,Entry,0,DEF,$.getValue() >= maxValue
RealVector.java,outerProduct,v,null,1,DEF,$ instanceof SparseRealVector
RealVector.java,projection,norm2,double,0,MathArithmeticException,$ == 0.0
RealVector.java,unitVector,norm,double,0,MathArithmeticException,$ == 0
RealVector.java,unitize,norm,double,0,MathArithmeticException,$ == 0
RealVector.java,next,i,int,1,RET,$ < dim
RealVector.java,SparseEntryIterator,next,Entry,0,DEF,$.getValue() == 0
RealVector.java,advance,e,Entry,0,RET,$ == null
RealVector.java,advance,e,Entry,0,DEF,$.getIndex() >= dim
RealVector.java,next,index,int,0,NoSuchElementException,$ < 0
TriDiagonalTransformer.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,cachedQt,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,hK,double[],0,DEF,$[k] != 0.0
TriDiagonalTransformer.java,getQT,k,int,0,DEF,hK[$] != 0.0
TriDiagonalTransformer.java,getT,cachedT,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getT,i,int,0,DEF,$ > 0
TriDiagonalTransformer.java,transform,a,double,0,DEF,$ != 0.0
DefaultIterativeLinearSolverEvent.java,getResidual,r,RealVector,0,RET,$ != null
HessenbergTransformer.java,getP,cachedP,RealMatrix,0,DEF,$ == null
HessenbergTransformer.java,getP,householderVectors,double[][],0,DEF,$[m][m - 1] != 0.0
HessenbergTransformer.java,getP,m,int,0,DEF,householderVectors[$][$ - 1] != 0.0
HessenbergTransformer.java,getPT,cachedPt,RealMatrix,0,DEF,$ == null
HessenbergTransformer.java,getH,cachedH,RealMatrix,0,DEF,$ == null
HessenbergTransformer.java,getH,i,int,0,DEF,$ > 0
QRDecomposition.java,QRDecomposition,a,double,0,DEF,$ != 0.0
QRDecomposition.java,getR,cachedR,RealMatrix,0,DEF,$ == null
QRDecomposition.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
QRDecomposition.java,getQT,cachedQT,RealMatrix,0,DEF,$ == null
QRDecomposition.java,getQT,minor,int,0,DEF,qrtMinor[$] != 0.0
QRDecomposition.java,getQT,qrtMinor,double[],0,DEF,$[minor] != 0.0
QRDecomposition.java,getH,cachedH,RealMatrix,0,DEF,$ == null
QRDecomposition.java,isNonSingular,diag,double,0,RET,FastMath.abs($) <= threshold
QRDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
QRDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
OpenMapRealMatrix.java,OpenMapRealMatrix,lCol,long,0,NumberIsTooLargeException,lRow * $ >= Integer.MAX_VALUE
OpenMapRealMatrix.java,OpenMapRealMatrix,lRow,long,0,NumberIsTooLargeException,$ * lCol >= Integer.MAX_VALUE
OpenMapRealMatrix.java,multiply,outValue,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,setEntry,value,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,addToEntry,value,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,multiplyEntry,value,double,1,DEF,$ == 0.0
SparseFieldVector.java,append,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,getSubVector,key,int,0,DEF,$ >= index
SparseFieldVector.java,getSubVector,key,int,0,DEF,$ < end
SparseFieldVector.java,outerProduct,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,subtract,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,checkIndex,index,int,0,OutOfRangeException,$ < 0
SparseFieldVector.java,add,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,equals,obj,null,0,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,equals,field,Field<T>,1,RET,$ == null
SparseFieldVector.java,equals,other,SparseFieldVector<T>,0,RET,$.field != null
SparseFieldVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
AbstractFieldMatrix.java,AbstractFieldMatrix,rowDimension,int,0,NotStrictlyPositiveException,$ <= 0
AbstractFieldMatrix.java,AbstractFieldMatrix,columnDimension,int,0,NotStrictlyPositiveException,$ <= 0
AbstractFieldMatrix.java,extractField,d,T[][],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,extractField,d,T[][],0,NoDataException,$.length == 0
AbstractFieldMatrix.java,extractField,d,T[][],0,NoDataException,$[0].length == 0
AbstractFieldMatrix.java,extractField,d,T[],0,NoDataException,$.length == 0
AbstractFieldMatrix.java,buildArray,columns,int,0,RET,$ < 0
AbstractFieldMatrix.java,power,p,int,0,IllegalArgumentException,$ < 0
AbstractFieldMatrix.java,power,p,int,0,RET,$ == 0
AbstractFieldMatrix.java,power,p,int,0,RET,$ == 1
AbstractFieldMatrix.java,power,i,int,0,DEF,binaryRepresentation[$] == '1'
AbstractFieldMatrix.java,power,binaryRepresentation,char[],0,DEF,$[i] == '1'
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$.length < rowsCount
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$[0].length < columnsCount
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$.length < selectedRows.length
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$[0].length < selectedColumns.length
AbstractFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
AbstractFieldMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
AbstractFieldMatrix.java,setSubMatrix,r,int,0,DimensionMismatchException,subMatrix[$].length != nCols
AbstractFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,DimensionMismatchException,$[r].length != nCols
AbstractFieldMatrix.java,setRowMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
AbstractFieldMatrix.java,setRowMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
AbstractFieldMatrix.java,setColumnMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
AbstractFieldMatrix.java,setColumnMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
AbstractFieldMatrix.java,setRowVector,vector,FieldVector<T>,0,MatrixDimensionMismatchException,$.getDimension() != nCols
AbstractFieldMatrix.java,setColumnVector,vector,FieldVector<T>,0,MatrixDimensionMismatchException,$.getDimension() != nRows
AbstractFieldMatrix.java,setRow,array,T[],0,MatrixDimensionMismatchException,$.length != nCols
AbstractFieldMatrix.java,setColumn,array,T[],0,MatrixDimensionMismatchException,$.length != nRows
AbstractFieldMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractFieldMatrix.java,operate,v,T[],0,DimensionMismatchException,$.length != nCols
AbstractFieldMatrix.java,operate,v,FieldVector<T>,0,DimensionMismatchException,$.getDimension() != nCols
AbstractFieldMatrix.java,preMultiply,v,T[],0,DimensionMismatchException,$.length != nRows
AbstractFieldMatrix.java,preMultiply,v,FieldVector<T>,0,DimensionMismatchException,$.getDimension() != nRows
AbstractFieldMatrix.java,toString,i,int,0,DEF,$ > 0
AbstractFieldMatrix.java,toString,j,int,0,DEF,$ > 0
AbstractFieldMatrix.java,equals,object,Object,0,RET,$ instanceof FieldMatrix<?> == false
AbstractFieldMatrix.java,equals,object,null,0,RET,$ instanceof FieldMatrix<?>
AbstractFieldMatrix.java,equals,m,FieldMatrix<>,0,RET,$.getColumnDimension() != nCols
AbstractFieldMatrix.java,equals,m,FieldMatrix<>,0,RET,$.getRowDimension() != nRows
AbstractFieldMatrix.java,checkRowIndex,row,int,0,OutOfRangeException,$ < 0
AbstractFieldMatrix.java,checkColumnIndex,column,int,0,OutOfRangeException,$ < 0
AbstractFieldMatrix.java,checkSubMatrixIndex,endRow,int,0,NumberIsTooSmallException,$ < startRow
AbstractFieldMatrix.java,checkSubMatrixIndex,endColumn,int,0,NumberIsTooSmallException,$ < startColumn
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedColumns,int[],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,NoDataException,$.length == 0
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedColumns,int[],0,NoDataException,$.length == 0
LUDecomposition.java,LUDecomposition,sum,double,0,DEF,FastMath.abs($) > largest
LUDecomposition.java,LUDecomposition,col,int,0,RET,FastMath.abs(lu[max][$]) < singularityThreshold
LUDecomposition.java,LUDecomposition,max,int,0,RET,FastMath.abs(lu[$][col]) < singularityThreshold
LUDecomposition.java,LUDecomposition,lu,double[][],0,RET,FastMath.abs($[max][col]) < singularityThreshold
LUDecomposition.java,LUDecomposition,max,int,0,DEF,$ != col
LUDecomposition.java,getL,cachedL,RealMatrix,0,DEF,$ == null
LUDecomposition.java,getU,cachedU,RealMatrix,0,DEF,$ == null
LUDecomposition.java,getP,cachedP,RealMatrix,0,DEF,$ == null
LUDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
LUDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
EigenDecomposition.java,getV,cachedV,RealMatrix,0,DEF,$ == null
EigenDecomposition.java,getD,cachedD,RealMatrix,0,DEF,$ == null
EigenDecomposition.java,getD,imagEigenvalues,double[],1,DEF,Precision.compareTo($[i], 0.0, EPSILON) > 0
EigenDecomposition.java,getD,i,int,1,DEF,Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) > 0
EigenDecomposition.java,getD,EPSILON,double,1,DEF,Precision.compareTo(imagEigenvalues[i], 0.0, $) > 0
EigenDecomposition.java,getD,imagEigenvalues,double[],0,DEF,Precision.compareTo($[i], 0.0, EPSILON) < 0
EigenDecomposition.java,getD,i,int,0,DEF,Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0
EigenDecomposition.java,getD,EPSILON,double,0,DEF,Precision.compareTo(imagEigenvalues[i], 0.0, $) < 0
EigenDecomposition.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
EigenDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
EigenDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
EigenDecomposition.java,isNonSingular,realEigenvalues,double[],0,RET,$[i] == 0
EigenDecomposition.java,isNonSingular,i,int,0,RET,realEigenvalues[$] == 0
EigenDecomposition.java,isNonSingular,imagEigenvalues,double[],0,RET,$[i] == 0
EigenDecomposition.java,isNonSingular,i,int,0,RET,imagEigenvalues[$] == 0
EigenDecomposition.java,findEigenVectors,realEigenvalues,double[],0,DEF,FastMath.abs($[i]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,e,double[],0,DEF,FastMath.abs($[i]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,FastMath.abs(e[$]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,maxAbsoluteValue,double,0,DEF,$ != 0
EigenDecomposition.java,findEigenVectors,e,double[],0,DEF,FastMath.abs($[m]) + delta == delta
EigenDecomposition.java,findEigenVectors,delta,double,0,DEF,FastMath.abs(e[m]) + $ == delta
EigenDecomposition.java,findEigenVectors,m,int,0,DEF,FastMath.abs(e[$]) + delta == delta
EigenDecomposition.java,findEigenVectors,m,int,0,MaxCountExceededException,$ != j
EigenDecomposition.java,findEigenVectors,its,int,0,MaxCountExceededException,$ == maxIter
EigenDecomposition.java,findEigenVectors,q,double,1,DEF,$ < 0.0
EigenDecomposition.java,findEigenVectors,e,double[],0,DEF,$[i + 1] == 0.0
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,e[$ + 1] == 0.0
EigenDecomposition.java,findEigenVectors,t,double,0,DEF,$ == 0.0
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,$ >= j
EigenDecomposition.java,findEigenVectors,realEigenvalues,double[],0,DEF,$[j] > p
EigenDecomposition.java,findEigenVectors,j,int,0,DEF,realEigenvalues[$] > p
EigenDecomposition.java,findEigenVectors,k,int,0,DEF,$ != i
EigenDecomposition.java,findEigenVectors,realEigenvalues,double[],0,DEF,FastMath.abs($[i]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,maxAbsoluteValue,double,0,DEF,$ != 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,imagEigenvalues,double[],1,DEF,Precision.compareTo($[i], 0.0, EPSILON) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,i,int,1,DEF,Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,EPSILON,double,1,DEF,Precision.compareTo(imagEigenvalues[i], 0.0, $) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,w,double,1,DEF,$ != 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,t,double,0,DEF,(Precision.EPSILON * $) * $ > 1
EigenDecomposition.java,findEigenVectorsFromSchur,q,double,0,DEF,$ < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,imagEigenvalues,double[],1,DEF,Precision.compareTo($[i], 0.0, EPSILON) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,i,int,1,DEF,Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,EPSILON,double,1,DEF,Precision.compareTo(imagEigenvalues[i], 0.0, $) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,t,double,0,DEF,(Precision.EPSILON * $) * $ > 1
EigenDecomposition.java,findEigenVectorsFromSchur,i,int,0,DEF,$ < 0
BlockFieldMatrix.java,toBlocksLayout,length,int,0,DimensionMismatchException,$ != columns
BlockFieldMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,setSubMatrix,refLength,int,0,NoDataException,$ == 0
BlockFieldMatrix.java,setSubMatrix,subRow,T[],0,DimensionMismatchException,$.length != refLength
BlockFieldMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
BlockFieldMatrix.java,setRowMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
BlockFieldMatrix.java,setRowMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
BlockFieldMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
BlockFieldMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
BlockFieldMatrix.java,setColumnMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
BlockFieldMatrix.java,setColumnMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
BlockFieldMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
BlockFieldMatrix.java,setRow,array,T[],0,MatrixDimensionMismatchException,$.length != nCols
BlockFieldMatrix.java,setColumn,array,T[],0,MatrixDimensionMismatchException,$.length != nRows
BlockFieldMatrix.java,operate,v,T[],0,DimensionMismatchException,$.length != columns
BlockFieldMatrix.java,preMultiply,v,T[],0,DimensionMismatchException,$.length != rows
PreconditionedIterativeLinearSolver.java,checkParameters,m,RealLinearOperator,0,DimensionMismatchException,$ != null
CholeskyDecomposition.java,CholeskyDecomposition,lJI,double,0,NonSymmetricMatrixException,FastMath.abs(lIJ - $) > maxDelta
CholeskyDecomposition.java,CholeskyDecomposition,lIJ,double,0,NonSymmetricMatrixException,FastMath.abs($ - lJI) > maxDelta
CholeskyDecomposition.java,CholeskyDecomposition,ltI,double[],0,NonPositiveDefiniteMatrixException,$[i] <= absolutePositivityThreshold
CholeskyDecomposition.java,CholeskyDecomposition,i,int,0,NonPositiveDefiniteMatrixException,ltI[$] <= absolutePositivityThreshold
CholeskyDecomposition.java,getL,cachedL,RealMatrix,0,DEF,$ == null
CholeskyDecomposition.java,getLT,cachedLT,RealMatrix,0,DEF,$ == null
CholeskyDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
CholeskyDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,r,int,0,DimensionMismatchException,d[$].length != nCols
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,d,T[][],0,DimensionMismatchException,$[r].length != nCols
Array2DRowFieldMatrix.java,setSubMatrix,data,T[][],1,DimensionMismatchException,$ == null
Array2DRowFieldMatrix.java,setSubMatrix,row,int,0,MathIllegalStateException,$ > 0
Array2DRowFieldMatrix.java,setSubMatrix,column,int,0,MathIllegalStateException,$ > 0
Array2DRowFieldMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,setSubMatrix,i,int,0,DimensionMismatchException,subMatrix[$].length != nCols
Array2DRowFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,DimensionMismatchException,$[i].length != nCols
Array2DRowFieldMatrix.java,operate,v,T[],0,DimensionMismatchException,$.length != nCols
Array2DRowFieldMatrix.java,preMultiply,v,T[],0,DimensionMismatchException,$.length != nRows
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nct
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,singularValues[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,A,double[][],0,DEF,$[k][k] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,A[$][$] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nct
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,singularValues[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nct
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nrt
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k + 1] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$ + 1] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ + 1 < m
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,nct,int,0,DEF,$ < n
SingularValueDecomposition.java,SingularValueDecomposition,m,int,0,DEF,$ < p
SingularValueDecomposition.java,SingularValueDecomposition,nrt,int,0,DEF,$ + 1 < p
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],1,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,1,DEF,singularValues[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nrt
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,FastMath.abs($[k]) <= threshold
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,FastMath.abs(e[$]) <= threshold
SingularValueDecomposition.java,SingularValueDecomposition,ks,int,0,DEF,$ == k
SingularValueDecomposition.java,SingularValueDecomposition,ks,int,1,DEF,$ == k
SingularValueDecomposition.java,SingularValueDecomposition,j,int,0,DEF,$ != k
SingularValueDecomposition.java,SingularValueDecomposition,b,double,0,DEF,$ != 0
SingularValueDecomposition.java,SingularValueDecomposition,c,double,0,DEF,$ != 0
SingularValueDecomposition.java,SingularValueDecomposition,b,double,0,DEF,$ < 0
SingularValueDecomposition.java,SingularValueDecomposition,j,int,0,DEF,$ != k
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],0,DEF,$[k] <= 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,singularValues[$] <= 0
SingularValueDecomposition.java,getUT,cachedUt,RealMatrix,0,DEF,$ == null
SingularValueDecomposition.java,getS,cachedS,RealMatrix,0,DEF,$ == null
SingularValueDecomposition.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
SingularValueDecomposition.java,getCovariance,dimension,int,0,NumberIsTooLargeException,$ == 0
SingularValueDecomposition.java,getRank,singularValues,double[],0,DEF,$[i] > tol
SingularValueDecomposition.java,getRank,i,int,0,DEF,singularValues[$] > tol
SingularValueDecomposition.java,Solver,singularValues,double[],1,DEF,$[i] > tol
SingularValueDecomposition.java,Solver,i,int,1,DEF,singularValues[$] > tol
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,ZeroException,$.length == 0
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v,FieldVector<T>,0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v,ArrayFieldVector<T>,0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v,ArrayFieldVector<T>,0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v1,ArrayFieldVector<T>,0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v2,ArrayFieldVector<T>,0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v1,ArrayFieldVector<T>,0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v2,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v1,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v2,ArrayFieldVector<T>,0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v1,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v2,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v1,T[],0,ZeroException,$.length + v2.length == 0
ArrayFieldVector.java,ArrayFieldVector,v2,T[],0,ZeroException,v1.length + $.length == 0
ArrayFieldVector.java,ArrayFieldVector,v1,T[],0,ZeroException,$.length + v2.length == 0
ArrayFieldVector.java,ArrayFieldVector,v2,T[],0,ZeroException,v1.length + $.length == 0
ArrayFieldVector.java,checkVectorDimensions,data,T[],0,DimensionMismatchException,$.length != n
ArrayFieldVector.java,equals,other,Object,0,RET,$ == null
ArrayFieldVector.java,checkIndex,index,int,0,OutOfRangeException,$ < 0
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,r,int,0,DEF,swap[$] != r
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,swap,int[],0,DEF,$[r] != r
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,c,double[][],1,NonPositiveDefiniteMatrixException,$[ir][ir] < small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,ir,int,1,NonPositiveDefiniteMatrixException,c[$][$] < small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,r,int,0,NonPositiveDefiniteMatrixException,$ == 0
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,c,double[][],0,NonPositiveDefiniteMatrixException,$[index[i]][index[i]] < -small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,index,int[],0,NonPositiveDefiniteMatrixException,c[$[i]][$[i]] < -small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,i,int,0,NonPositiveDefiniteMatrixException,c[index[$]][index[$]] < -small
ArrayRealVector.java,ArrayRealVector,d,double[],0,NullArgumentException,$ == null
ArrayRealVector.java,ArrayRealVector,d,double[],0,NullArgumentException,$ == null
ArrayRealVector.java,ArrayRealVector,d,Double[],0,NullArgumentException,$ == null
ArrayRealVector.java,ArrayRealVector,v,RealVector,0,NullArgumentException,$ == null
ArrayRealVector.java,add,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,subtract,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,ebeMultiply,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,ebeDivide,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,dotProduct,v,null,0,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getDistance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getL1Distance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getLInfDistance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,outerProduct,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getSubVector,n,int,0,NotPositiveException,$ < 0
ArrayRealVector.java,setSubVector,v,null,1,DEF,$ instanceof ArrayRealVector
ArrayRealVector.java,checkVectorDimensions,data,double[],0,DimensionMismatchException,$.length != n
ArrayRealVector.java,equals,other,null,0,RET,$ instanceof RealVector
ArrayRealVector.java,combineToSelf,y,null,1,DEF,$ instanceof ArrayRealVector
RealMatrixFormat.java,format,j,int,0,DEF,$ > 0
RealMatrixFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
RealMatrixFormat.java,parse,trimmedRowSuffix,String,1,RET,$.length() != 0
RealMatrixFormat.java,parse,trimmedRowPrefix,String,0,RET,$.length() != 0
RealMatrixFormat.java,parse,component,Number,1,DEF,$ != null
BiDiagonalTransformer.java,BiDiagonalTransformer,m,int,1,DEF,$ >= n
BiDiagonalTransformer.java,getU,cachedU,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getU,hK,double[],0,DEF,$[k - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,k,int,0,DEF,hK[$ - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,hK[k - $] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getB,cachedB,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getB,m,int,1,DEF,$ < n
BiDiagonalTransformer.java,getB,i,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getV,cachedV,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getV,hK,double[],0,DEF,$[k] != 0.0
BiDiagonalTransformer.java,getV,k,int,0,DEF,hK[$] != 0.0
BiDiagonalTransformer.java,getV,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,b,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,b,double,0,DEF,$ != 0.0
FieldLUDecomposition.java,FieldLUDecomposition,nonZero,int,0,RET,$ >= m
FieldLUDecomposition.java,FieldLUDecomposition,nonZero,int,0,DEF,$ != col
FieldLUDecomposition.java,getL,cachedL,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecomposition.java,getU,cachedU,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecomposition.java,getP,cachedP,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecomposition.java,solve,b,FieldVector<T>,0,DimensionMismatchException,$.getDimension() != m
FieldLUDecomposition.java,solve,length,int,0,DimensionMismatchException,$ != m
FieldLUDecomposition.java,solve,b,FieldMatrix<T>,0,DimensionMismatchException,$.getRowDimension() != m
OpenMapRealVector.java,add,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,append,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getSubVector,n,int,0,NotPositiveException,$ < 0
OpenMapRealVector.java,getSubVector,key,int,0,DEF,$ >= index
OpenMapRealVector.java,getSubVector,key,int,0,DEF,$ < end
OpenMapRealVector.java,getDistance,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getL1Distance,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getLInfDistance,delta,double,0,DEF,$ > max
OpenMapRealVector.java,getLInfDistance,iter,Iterator,0,DEF,$.value() > max
OpenMapRealVector.java,getLInfDistance,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,subtract,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,equals,obj,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
DfpDec.java,round,msb,int,0,RET,$ == 0
DfpDec.java,round,lsbthreshold,int,0,RET,$ <= 1
DfpDec.java,round,lsbthreshold,int,1,DEF,$ == 1
DfpDec.java,round,rh,int,0,DEF,$ != 0
DfpDec.java,round,exp,int,0,RET,$ < MIN_EXP
DfpDec.java,round,exp,int,0,RET,$ > MAX_EXP
DfpDec.java,round,n,int,0,RET,$ != 0
DfpDec.java,round,discarded,int,0,RET,$ != 0
DfpDec.java,nextAfter,result,Dfp,0,DEF,$.classify() == INFINITE
Dfp.java,Dfp,x,long,0,DEF,$ == Long.MIN_VALUE
Dfp.java,Dfp,x,long,1,DEF,$ < 0
Dfp.java,Dfp,mant,int[],0,DEF,$[i] != 0
Dfp.java,Dfp,i,int,0,DEF,mant[$] != 0
Dfp.java,Dfp,exponent,int,0,RET,$ == -1023
Dfp.java,Dfp,x,double,0,RET,$ == 0
Dfp.java,Dfp,bits,long,0,DEF,($ & 0x8000000000000000L) != 0
Dfp.java,Dfp,exponent,int,0,RET,$ == 1024
Dfp.java,Dfp,x,double,1,DEF,$ != x
Dfp.java,Dfp,x,double,1,DEF,$ < 0
Dfp.java,Dfp,bits,long,0,DEF,($ & 0x8000000000000000L) != 0
Dfp.java,Dfp,p,int,0,DEF,$ == -1
Dfp.java,Dfp,p,int,1,DEF,$ != -1
Dfp.java,Dfp,fpexp,String,0,DEF,$.charAt(i) == '-'
Dfp.java,Dfp,i,int,0,DEF,fpexp.charAt($) == '-'
Dfp.java,Dfp,fpexp,String,0,DEF,$.charAt(i) >= '0'
Dfp.java,Dfp,i,int,0,DEF,fpexp.charAt($) >= '0'
Dfp.java,Dfp,fpexp,String,0,DEF,$.charAt(i) <= '9'
Dfp.java,Dfp,i,int,0,DEF,fpexp.charAt($) <= '9'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.indexOf(-") != -1"
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) >= '1'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) >= '1'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) <= '9'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) <= '9'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) == '0'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) == '0'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) == '.'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) == '.'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) == '.'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) == '.'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) < '0'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) < '0'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) > '9'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) > '9'
Dfp.java,Dfp,q,int,0,DEF,$ != offset
Dfp.java,Dfp,q,int,0,DEF,$ == offset
Dfp.java,Dfp,striped,char[],1,DEF,$[q] == '0'
Dfp.java,Dfp,q,int,1,DEF,striped[$] == '0'
Dfp.java,Dfp,significantDigits,int,0,DEF,$ == 0
Dfp.java,Dfp,p,int,0,DEF,striped[$] != '0'
Dfp.java,Dfp,striped,char[],0,DEF,$[p] != '0'
Dfp.java,Dfp,q,int,0,DEF,$ < striped.length
Dfp.java,align,adiff,int,0,DEF,$ < 0
Dfp.java,align,diff,int,0,RET,$ == 0
Dfp.java,align,diff,int,1,DEF,$ < 0
Dfp.java,align,lostdigit,int,0,DEF,$ != 0
Dfp.java,equals,other,null,0,RET,$ instanceof Dfp
Dfp.java,compare,a,Dfp,0,RET,$.mant[$.mant.length - 1] == 0
Dfp.java,compare,b,Dfp,0,RET,$.mant[$.mant.length - 1] == 0
Dfp.java,compare,a,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,a,Dfp,0,RET,$.sign != b.sign
Dfp.java,compare,a,Dfp,1,RET,$.sign == -1
Dfp.java,compare,a,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,a,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,a,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,b,Dfp,0,RET,$.mant[$.mant.length-1] != 0
Dfp.java,compare,a,Dfp,0,RET,$.mant[b.mant.length-1] != 0
Dfp.java,compare,b,Dfp,0,RET,a.mant[$.mant.length-1] != 0
Dfp.java,compare,a,Dfp,0,RET,$.exp < b.exp
Dfp.java,compare,a,Dfp,0,RET,$.exp > b.exp
Dfp.java,remainder,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,remainder,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,trunc,nans,byte,0,RET,$ == INFINITE
Dfp.java,trunc,mant,int[],0,RET,$[$.length-1] == 0
Dfp.java,trunc,exp,int,0,RET,$ < 0
Dfp.java,trunc,exp,int,0,RET,$ >= mant.length
Dfp.java,trunc,result,Dfp,0,DEF,$.sign == -1
Dfp.java,trunc,result,Dfp,0,DEF,$.sign == 1
Dfp.java,trunc,result,Dfp,0,DEF,$.exp > 0
Dfp.java,trunc,result,Dfp,0,DEF,($.mant[mant.length-$.exp]&1) != 0
Dfp.java,trunc,mant,int[],0,DEF,(result.mant[$.length-result.exp]&1) != 0
Dfp.java,intValue,rounded,Dfp,0,DEF,$.sign == -1
Dfp.java,log10,mant,int[],0,RET,$[$.length-1] > 1000
Dfp.java,log10,mant,int[],0,RET,$[$.length-1] > 100
Dfp.java,log10,mant,int[],0,RET,$[$.length-1] > 10
Dfp.java,power10,e,int,1,DEF,$ >= 0
Dfp.java,add,nans,byte,0,RET,$ != FINITE
Dfp.java,add,x,Dfp,0,RET,$.nans != FINITE
Dfp.java,add,nans,byte,0,RET,$ == INFINITE
Dfp.java,add,x,Dfp,0,RET,$.nans == FINITE
Dfp.java,add,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,add,nans,byte,0,RET,$ == FINITE
Dfp.java,add,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,add,nans,byte,0,RET,$ == INFINITE
Dfp.java,add,sign,byte,0,RET,$ == x.sign
Dfp.java,add,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,add,nans,byte,0,RET,$ == INFINITE
Dfp.java,add,sign,byte,0,RET,$ != x.sign
Dfp.java,add,a,Dfp,0,DEF,compare($, b) > 0
Dfp.java,add,b,Dfp,0,DEF,compare(a, $) > 0
Dfp.java,add,b,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,add,mant,int[],0,DEF,b.mant[$.length-1] == 0
Dfp.java,add,a,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,add,mant,int[],0,DEF,a.mant[$.length-1] == 0
Dfp.java,add,a,Dfp,1,DEF,$.exp < b.exp
Dfp.java,add,asign,byte,0,DEF,$ != bsign
Dfp.java,add,asign,byte,1,DEF,$ == rsign
Dfp.java,add,rh,int,0,DEF,$ != 0
Dfp.java,add,asign,byte,0,DEF,$ == bsign
Dfp.java,add,excp,int,0,DEF,$ != 0
Dfp.java,add,result,Dfp,0,DEF,$.mant[mant.length-1] != 0
Dfp.java,add,mant,int[],0,DEF,result.mant[$.length-1] != 0
Dfp.java,add,i,int,0,DEF,$ == 0
Dfp.java,add,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,add,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,add,asign,byte,0,DEF,$ != bsign
Dfp.java,add,excp,int,0,DEF,$ != 0
Dfp.java,round,rh,int,0,DEF,$ != 0
Dfp.java,round,exp,int,0,RET,$ < MIN_EXP
Dfp.java,round,exp,int,0,RET,$ > MAX_EXP
Dfp.java,round,n,int,0,RET,$ != 0
Dfp.java,multiply,nans,byte,0,RET,$ != FINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans != FINITE
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans == FINITE
Dfp.java,multiply,x,Dfp,0,RET,$.mant[mant.length-1] != 0
Dfp.java,multiply,mant,int[],0,RET,x.mant[$.length-1] != 0
Dfp.java,multiply,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,multiply,nans,byte,0,RET,$ == FINITE
Dfp.java,multiply,mant,int[],0,RET,$[$.length-1] != 0
Dfp.java,multiply,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,multiply,nans,byte,0,RET,$ == FINITE
Dfp.java,multiply,mant,int[],0,RET,$[$.length-1] == 0
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans == FINITE
Dfp.java,multiply,x,Dfp,0,RET,$.mant[mant.length-1] == 0
Dfp.java,multiply,mant,int[],0,RET,x.mant[$.length-1] == 0
Dfp.java,multiply,product,int[],0,DEF,$[i] != 0
Dfp.java,multiply,i,int,0,DEF,product[$] != 0
Dfp.java,multiply,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,multiply,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,multiply,excp,int,0,DEF,$ != 0
Dfp.java,multiply,nans,byte,0,RET,$ != FINITE
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,int,0,RET,$ != 0
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,int,0,RET,$ == 0
Dfp.java,multiply,x,int,0,RET,$ < 0
Dfp.java,multiply,x,int,0,RET,$ >= RADIX
Dfp.java,multiply,rh,int,0,DEF,$ != 0
Dfp.java,multiply,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,multiply,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,multiply,excp,int,0,DEF,$ != 0
Dfp.java,divide,nans,byte,0,RET,$ != FINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans != FINITE
Dfp.java,divide,nans,byte,0,RET,$ == INFINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans == FINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans == INFINITE
Dfp.java,divide,nans,byte,0,RET,$ == FINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans == INFINITE
Dfp.java,divide,nans,byte,0,RET,$ == INFINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.mant[mant.length-1] == 0
Dfp.java,divide,mant,int[],0,RET,divisor.mant[$.length-1] == 0
Dfp.java,divide,rh,int,0,DEF,$ == 0
Dfp.java,divide,minadj,int,0,DEF,$ >= 2
Dfp.java,divide,mant,int[],0,DEF,remainder[$.length] != 0
Dfp.java,divide,remainder,int[],0,DEF,$[mant.length] != 0
Dfp.java,divide,trialgood,boolean,0,DEF,$ == false
Dfp.java,divide,trial,int,0,DEF,$ != 0
Dfp.java,divide,nsqd,int,0,DEF,$ != 0
Dfp.java,divide,field,DfpField,0,DEF,$.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN
Dfp.java,divide,nsqd,int,0,DEF,$ == mant.length
Dfp.java,divide,nsqd,int,0,DEF,$ > mant.length
Dfp.java,divide,quotient,int[],0,DEF,$[i] != 0
Dfp.java,divide,i,int,0,DEF,quotient[$] != 0
Dfp.java,divide,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,divide,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,divide,excp,int,0,DEF,$ != 0
Dfp.java,divide,nans,byte,0,RET,$ != FINITE
Dfp.java,divide,nans,byte,0,RET,$ == INFINITE
Dfp.java,divide,divisor,int,0,RET,$ == 0
Dfp.java,divide,divisor,int,0,RET,$ < 0
Dfp.java,divide,divisor,int,0,RET,$ >= RADIX
Dfp.java,divide,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,divide,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,divide,excp,int,0,DEF,$ != 0
Dfp.java,sqrt,nans,byte,0,RET,$ == FINITE
Dfp.java,sqrt,mant,int[],0,RET,$[$.length-1] == 0
Dfp.java,sqrt,nans,byte,0,RET,$ != FINITE
Dfp.java,sqrt,nans,byte,0,RET,$ == INFINITE
Dfp.java,sqrt,sign,byte,0,RET,$ == 1
Dfp.java,sqrt,nans,byte,0,RET,$ == QNAN
Dfp.java,sqrt,nans,byte,0,RET,$ == SNAN
Dfp.java,sqrt,sign,byte,0,RET,$ == -1
Dfp.java,sqrt,x,Dfp,0,DEF,$.exp < -1
Dfp.java,sqrt,x,Dfp,0,DEF,$.exp > 1
Dfp.java,sqrt,dx,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,sqrt,mant,int[],0,DEF,dx.mant[$.length-1] == 0
Dfp.java,toString,nans,byte,0,RET,$ != FINITE
Dfp.java,toString,nans,byte,1,RET,$ == INFINITE
Dfp.java,toString,exp,int,0,RET,$ > mant.length
Dfp.java,toString,exp,int,0,RET,$ < -1
Dfp.java,dfp2sci,p,int,0,DEF,rawdigits[$] != '0'
Dfp.java,dfp2sci,rawdigits,char[],0,DEF,$[p] != '0'
Dfp.java,dfp2sci,sign,byte,0,DEF,$ == -1
Dfp.java,dfp2sci,p,int,1,DEF,$ != rawdigits.length
Dfp.java,dfp2sci,e,int,0,DEF,$ < 0
Dfp.java,dfp2sci,e,int,0,DEF,$ < 0
Dfp.java,dfp2string,e,int,0,DEF,$ <= 0
Dfp.java,dfp2string,e,int,0,DEF,--$ == 0
Dfp.java,dfp2string,q,int,0,DEF,buffer[$] == '.'
Dfp.java,dfp2string,buffer,char[],0,DEF,$[q] == '.'
Dfp.java,dfp2string,sign,byte,0,DEF,$ < 0
Dfp.java,dotrap,nans,byte,0,DEF,$ == FINITE
Dfp.java,dotrap,mant,int[],0,DEF,$[$.length-1] != 0
Dfp.java,dotrap,nans,byte,0,DEF,$ == FINITE
Dfp.java,dotrap,mant,int[],0,DEF,$[$.length-1] == 0
Dfp.java,dotrap,nans,byte,0,DEF,$ == INFINITE
Dfp.java,dotrap,nans,byte,0,DEF,$ == QNAN
Dfp.java,dotrap,nans,byte,0,DEF,$ == INFINITE
Dfp.java,dotrap,nans,byte,0,DEF,$ == SNAN
Dfp.java,dotrap,result,Dfp,1,DEF,($.exp+mant.length) < MIN_EXP
Dfp.java,dotrap,mant,int[],1,DEF,(result.exp+$.length) < MIN_EXP
Dfp.java,nextAfter,x,Dfp,0,RET,compare(this, $) == 0
Dfp.java,nextAfter,result,Dfp,0,DEF,$.classify() == INFINITE
Dfp.java,toDouble,cmp0,int,1,RET,$ == 0
Dfp.java,toDouble,cmp0,int,0,DEF,$ < 0
Dfp.java,toDouble,exponent,int,0,DEF,$ < 0
Dfp.java,toDouble,exponent,int,0,DEF,$ > -1023
Dfp.java,toDouble,exponent,int,0,RET,$ < -1074
Dfp.java,toDouble,exponent,int,0,RET,$ > 1023
Dfp.java,toDouble,mantissa,long,0,DEF,$ == 4503599627370496L
Dfp.java,toDouble,exponent,int,0,DEF,$ <= -1023
DfpMath.java,split,buf,char[],0,DEF,$[i] >= '1'
DfpMath.java,split,i,int,0,DEF,buf[$] >= '1'
DfpMath.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpMath.java,split,i,int,0,DEF,buf[$] <= '9'
DfpMath.java,split,buf,char[],0,DEF,$[i] == '.'
DfpMath.java,split,i,int,0,DEF,buf[$] == '.'
DfpMath.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpMath.java,split,i,int,0,DEF,buf[$] >= '0'
DfpMath.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpMath.java,split,i,int,0,DEF,buf[$] <= '9'
DfpMath.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpMath.java,split,i,int,0,DEF,buf[$] >= '0'
DfpMath.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpMath.java,split,i,int,0,DEF,buf[$] <= '9'
DfpMath.java,split,i,int,0,DEF,$ < sp
DfpMath.java,splitMult,result,Dfp[],0,RET,$[0].classify() == Dfp.INFINITE
DfpMath.java,splitPow,a,int,0,RET,$ == 0
DfpMath.java,splitPow,a,int,0,DEF,$ < 0
DfpMath.java,splitPow,trial,int,0,DEF,$ > a
DfpMath.java,pow,a,int,0,RET,$ == 0
DfpMath.java,pow,a,int,0,DEF,$ < 0
DfpMath.java,exp,ia,int,0,RET,$ > 2147483646
DfpMath.java,exp,ia,int,0,RET,$ < -2147483646
DfpMath.java,log,a,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,1,RET,$.classify() == Dfp.FINITE
DfpMath.java,pow,y,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,x,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,1,RET,$.classify() == Dfp.FINITE
BracketingNthOrderBrentSolverDFP.java,BracketingNthOrderBrentSolverDFP,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolverDFP.java,solve,agingA,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolverDFP.java,solve,agingB,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolverDFP.java,solve,nbPoints,int,1,DEF,$ > 2
BracketingNthOrderBrentSolverDFP.java,solve,start,int,1,DEF,end - $ != nbPoints
BracketingNthOrderBrentSolverDFP.java,solve,end,int,1,DEF,$ - start != nbPoints
BracketingNthOrderBrentSolverDFP.java,solve,nbPoints,int,0,DEF,$ == x.length
DfpField.java,split,buf,char[],0,DEF,$[i] >= '1'
DfpField.java,split,i,int,0,DEF,buf[$] >= '1'
DfpField.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpField.java,split,i,int,0,DEF,buf[$] <= '9'
DfpField.java,split,buf,char[],0,DEF,$[i] == '.'
DfpField.java,split,i,int,0,DEF,buf[$] == '.'
DfpField.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpField.java,split,i,int,0,DEF,buf[$] >= '0'
DfpField.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpField.java,split,i,int,0,DEF,buf[$] <= '9'
DfpField.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpField.java,split,i,int,0,DEF,buf[$] >= '0'
DfpField.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpField.java,split,i,int,0,DEF,buf[$] <= '9'
DfpField.java,split,i,int,0,DEF,$ < sp
DfpField.java,computeStringConstants,sqr2String,String,0,DEF,$ == null
SimplexSolver.java,getPivotColumn,entry,double,0,DEF,$ < minValue
SimplexSolver.java,getPivotRow,entry,double,0,DEF,Precision.compareTo($, 0d, maxUlps) > 0
SimplexSolver.java,getPivotRow,maxUlps,int,0,DEF,Precision.compareTo(entry, 0d, $) > 0
SimplexSolver.java,getPivotRow,cmp,int,1,DEF,$ == 0
SimplexSolver.java,getPivotRow,cmp,int,0,DEF,$ < 0
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,1,RET,$.size() == 0
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,0,RET,$.size() > 1
SimplexSolver.java,getPivotRow,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() > 0
SimplexSolver.java,getPivotRow,basicRow,Integer,0,DEF,$ != null
SimplexSolver.java,getPivotRow,i,int,0,DEF,$ < minIndex
SimplexSolver.java,doIteration,pivotRow,Integer,0,UnboundedSolutionException,$ == null
SimplexSolver.java,doIteration,i,int,0,DEF,$ != pivotRow
SimplexSolver.java,solvePhase1,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() == 0
SimplexTableau.java,createTableau,constraint,LinearConstraint,1,DEF,$.getRelationship() == Relationship.LEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.EQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,normalize,constraint,LinearConstraint,0,RET,$.getValue() < 0
SimplexTableau.java,getConstraintTypeCounts,constraint,LinearConstraint,0,DEF,$.getRelationship() == relationship
SimplexTableau.java,getBasicRow,row,Integer,1,DEF,$ == null
SimplexTableau.java,dropPhase1Objective,epsilon,double,0,DEF,Precision.compareTo(entry, 0d, $) > 0
SimplexTableau.java,dropPhase1Objective,entry,double,0,DEF,Precision.compareTo($, 0d, epsilon) > 0
SimplexTableau.java,dropPhase1Objective,col,int,0,DEF,getBasicRow($) == null
SimplexTableau.java,isOptimal,epsilon,double,0,RET,Precision.compareTo(entry, 0d, $) < 0
SimplexTableau.java,isOptimal,entry,double,0,RET,Precision.compareTo($, 0d, epsilon) < 0
SimplexTableau.java,getSolution,colIndex,int,0,DEF,$ < 0
SimplexTableau.java,getSolution,basicRow,Integer,1,DEF,$ != null
SimplexTableau.java,getSolution,basicRow,Integer,1,DEF,$ == 0
SimplexTableau.java,subtractRow,result,double,0,DEF,FastMath.abs($) < CUTOFF_THRESHOLD
SimplexTableau.java,equals,other,null,0,RET,$ instanceof SimplexTableau
AbstractLinearOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxCountExceededException,++$ > maxIterations
LinearObjectiveFunction.java,equals,other,null,0,RET,$ instanceof LinearObjectiveFunction
LinearConstraint.java,equals,other,null,0,RET,$ instanceof LinearConstraint
BrentOptimizer.java,BrentOptimizer,rel,double,0,NumberIsTooSmallException,$ < MIN_RELATIVE_TOLERANCE
BrentOptimizer.java,BrentOptimizer,abs,double,0,NotStrictlyPositiveException,$ <= 0
BrentOptimizer.java,doOptimize,lo,double,1,DEF,$ < hi
BrentOptimizer.java,doOptimize,e,double,1,DEF,FastMath.abs($) > tol1
BrentOptimizer.java,doOptimize,q,double,1,DEF,$ > 0
BrentOptimizer.java,doOptimize,a,double,0,DEF,u - $ < tol2
BrentOptimizer.java,doOptimize,u,double,0,DEF,$ - a < tol2
BrentOptimizer.java,doOptimize,b,double,0,DEF,$ - u < tol2
BrentOptimizer.java,doOptimize,u,double,0,DEF,b - $ < tol2
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ <= m
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ < m
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ < m
BrentOptimizer.java,doOptimize,d,double,1,DEF,FastMath.abs($) < tol1
BrentOptimizer.java,doOptimize,d,double,1,DEF,$ >= 0
BrentOptimizer.java,doOptimize,checker,ConvergenceChecker<UnivariatePointValuePair>,0,RET,$ != null
BrentOptimizer.java,doOptimize,fu,double,1,DEF,$ <= fx
BrentOptimizer.java,doOptimize,u,double,1,DEF,$ < x
BrentOptimizer.java,doOptimize,u,double,1,DEF,$ < x
BrentOptimizer.java,doOptimize,fu,double,1,DEF,$ <= fw
BrentOptimizer.java,doOptimize,fu,double,0,DEF,$ <= fv
BaseAbstractUnivariateOptimizer.java,optimize,f,UnivariateFunction,0,NullArgumentException,$ == null
BaseAbstractUnivariateOptimizer.java,optimize,goalType,GoalType,0,NullArgumentException,$ == null
UnivariateMultiStartOptimizer.java,UnivariateMultiStartOptimizer,optimizer,BaseUnivariateOptimizer<FUNC>,0,NullArgumentException,$ == null
UnivariateMultiStartOptimizer.java,UnivariateMultiStartOptimizer,generator,RandomGenerator,0,NullArgumentException,$ == null
UnivariateMultiStartOptimizer.java,UnivariateMultiStartOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
UnivariateMultiStartOptimizer.java,getOptima,optima,UnivariatePointValuePair[],0,MathIllegalStateException,$ == null
UnivariateMultiStartOptimizer.java,optimize,optima,UnivariatePointValuePair[],0,DEF,$[0] == null
UnivariateMultiStartOptimizer.java,compare,o1,UnivariatePointValuePair,1,RET,$ == null
UnivariateMultiStartOptimizer.java,compare,o2,UnivariatePointValuePair,0,RET,$ == null
BracketFinder.java,BracketFinder,growLimit,double,0,NotStrictlyPositiveException,$ <= 0
BracketFinder.java,BracketFinder,maxEvaluations,int,0,NotStrictlyPositiveException,$ <= 0
BracketFinder.java,search,fA,double,0,DEF,$ < fB
BracketFinder.java,search,fA,double,0,DEF,$ > fB
BracketFinder.java,search,w,double,1,DEF,($ - xC) * (xB - $) > 0
BracketFinder.java,search,xB,double,1,DEF,(w - xC) * ($ - w) > 0
BracketFinder.java,search,xC,double,1,DEF,(w - $) * (xB - w) > 0
BracketFinder.java,search,fW,double,1,DEF,$ < fC
BracketFinder.java,search,fW,double,1,DEF,$ > fC
BracketFinder.java,search,fW,double,0,DEF,$ > fB
BracketFinder.java,search,fW,double,0,DEF,$ < fB
BracketFinder.java,search,w,double,1,DEF,($ - wLim) * (wLim - xC) >= 0
BracketFinder.java,search,xC,double,1,DEF,(w - wLim) * (wLim - $) >= 0
BracketFinder.java,search,wLim,double,1,DEF,(w - $) * ($ - xC) >= 0
BracketFinder.java,search,w,double,1,DEF,($ - wLim) * (xC - $) > 0
BracketFinder.java,search,xC,double,1,DEF,(w - wLim) * ($ - w) > 0
BracketFinder.java,search,wLim,double,1,DEF,(w - $) * (xC - w) > 0
BracketFinder.java,search,fW,double,0,DEF,$ < fC
BracketFinder.java,search,fW,double,0,DEF,$ > fC
BracketFinder.java,search,lo,double,0,DEF,$ > hi
HarmonicFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NumberIsTooSmallException,$.length < 4
HarmonicFitter.java,sortObservations,i,int,0,DEF,$-- != 0
HarmonicFitter.java,guessAOmega,c1,double,1,ZeroException,$ / c2 < 0
HarmonicFitter.java,guessAOmega,c2,double,1,ZeroException,c1 / $ < 0
HarmonicFitter.java,guessAOmega,c3,double,1,ZeroException,c2 / $ < 0
HarmonicFitter.java,guessAOmega,c2,double,1,ZeroException,$ / c3 < 0
HarmonicFitter.java,guessAOmega,xRange,double,0,ZeroException,$ == 0
HarmonicFitter.java,guessAOmega,y,double,0,DEF,$ < yMin
HarmonicFitter.java,guessAOmega,y,double,0,DEF,$ > yMax
GaussianFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NullArgumentException,$ == null
GaussianFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NumberIsTooSmallException,$.length < 3
GaussianFitter.java,guess,parameters,double[],0,DEF,$ == null
GaussianFitter.java,interpolateXAtY,idxStep,int,0,ZeroException,$ == 0
GaussianFitter.java,interpolateXAtY,pointA,WeightedObservedPoint,0,RET,$.getY() == y
GaussianFitter.java,interpolateXAtY,pointB,WeightedObservedPoint,0,RET,$.getY() == y
GaussianFitter.java,getInterpolationPointsForY,idxStep,int,0,ZeroException,$ == 0
GaussianFitter.java,compare,p1,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p2,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p1,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p2,WeightedObservedPoint,0,RET,$ == null
LeastSquaresConverter.java,LeastSquaresConverter,observations,double[],0,DimensionMismatchException,$.length != weights.length
LeastSquaresConverter.java,value,residuals,double[],0,DimensionMismatchException,$.length != observations.length
LeastSquaresConverter.java,value,weights,double[],1,DEF,$ != null
LeastSquaresConverter.java,value,scale,RealMatrix,1,DEF,$ != null
BaseMultivariateVectorMultiStartOptimizer.java,BaseMultivariateVectorMultiStartOptimizer,optimizer,BaseMultivariateVectorOptimizer<FUNC>,0,NullArgumentException,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,BaseMultivariateVectorMultiStartOptimizer,generator,RandomVectorGenerator,0,NullArgumentException,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,BaseMultivariateVectorMultiStartOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
BaseMultivariateVectorMultiStartOptimizer.java,getOptima,optima,PointVectorValuePair[],0,MathIllegalStateException,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,optimize,optima,PointVectorValuePair[],0,DEF,$[0] == null
BaseMultivariateVectorMultiStartOptimizer.java,compare,o1,PointVectorValuePair,1,RET,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,compare,o2,PointVectorValuePair,0,RET,$ == null
BOBYQAOptimizer.java,bobyqa,lowerDifference,ArrayRealVector,1,DEF,$.getEntry(j) >= -initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,lowerDifference.getEntry($) >= -initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,lowerDifference,ArrayRealVector,1,DEF,$.getEntry(j) >= ZERO
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,lowerDifference.getEntry($) >= ZERO
BOBYQAOptimizer.java,bobyqa,upperDifference,ArrayRealVector,0,DEF,$.getEntry(j) <= initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,j,int,0,DEF,upperDifference.getEntry($) <= initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,upperDifference,ArrayRealVector,1,DEF,$.getEntry(j) <= ZERO
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,upperDifference.getEntry($) <= ZERO
BOBYQAOptimizer.java,bobyqb,trustRegionCenterInterpolationPointIndex,int,0,DEF,$ != kbase
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,bobyqb,crvmin,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,bdtest,double,0,DEF,$ < bdtol
BOBYQAOptimizer.java,bobyqb,bdtest,double,0,DEF,$ < bdtol
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,ntrits,int,1,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,denom,double,0,DEF,$ < cauchy
BOBYQAOptimizer.java,bobyqb,cauchy,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,k,int,0,DEF,$ == trustRegionCenterInterpolationPointIndex
BOBYQAOptimizer.java,bobyqb,temp,double,0,DEF,$ * den > scaden
BOBYQAOptimizer.java,bobyqb,den,double,0,DEF,temp * $ > scaden
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ == j
BOBYQAOptimizer.java,bobyqb,dnorm,double,0,DEF,$ > rho
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,MathIllegalStateException,$ > 0
BOBYQAOptimizer.java,bobyqb,vquad,double,0,MathIllegalStateException,$ >= ZERO
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= ONE_OVER_TEN
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= .7
BOBYQAOptimizer.java,bobyqb,f,double,0,DEF,$ < fopt
BOBYQAOptimizer.java,bobyqb,temp,double,0,DEF,$ * den > scaden
BOBYQAOptimizer.java,bobyqb,den,double,0,DEF,temp * $ > scaden
BOBYQAOptimizer.java,bobyqb,f,double,0,DEF,$ < fopt
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ > 0
BOBYQAOptimizer.java,bobyqb,itest,int,0,DEF,$ >= 3
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < n
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < npt
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < nh
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,sum,double,0,DEF,$ > distsq
BOBYQAOptimizer.java,bobyqb,knew,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,ratio,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,dnorm,double,0,DEF,Math.max(delta, $) > rho
BOBYQAOptimizer.java,bobyqb,delta,double,0,DEF,Math.max($, dnorm) > rho
BOBYQAOptimizer.java,bobyqb,rho,double,0,DEF,$ > stoppingTrustRegionRadius
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= SIXTEEN
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= TWO_HUNDRED_FIFTY
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,fAtInterpolationPoints,ArrayRealVector,0,DEF,$.getEntry(trustRegionCenterInterpolationPointIndex) <= fsave
BOBYQAOptimizer.java,bobyqb,trustRegionCenterInterpolationPointIndex,int,0,DEF,fAtInterpolationPoints.getEntry($) <= fsave
BOBYQAOptimizer.java,altmov,k,int,0,DEF,$ == trustRegionCenterInterpolationPointIndex
BOBYQAOptimizer.java,altmov,tmp,double,1,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,tmp,double,0,DEF,$ < ZERO
BOBYQAOptimizer.java,altmov,k,int,1,DEF,$ == knew
BOBYQAOptimizer.java,altmov,d4,double,0,DEF,d3 * $ < ZERO
BOBYQAOptimizer.java,altmov,d3,double,0,DEF,$ * d4 < ZERO
BOBYQAOptimizer.java,altmov,subd,double,0,DEF,$ > HALF
BOBYQAOptimizer.java,altmov,vlag,double,0,DEF,Math.abs($) < ONE_OVER_FOUR
BOBYQAOptimizer.java,altmov,predsq,double,0,DEF,$ > presav
BOBYQAOptimizer.java,altmov,ibdsav,int,0,DEF,$ < 0
BOBYQAOptimizer.java,altmov,ibdsav,int,0,DEF,$ > 0
BOBYQAOptimizer.java,altmov,glagValue,double,0,DEF,Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), $) > ZERO
BOBYQAOptimizer.java,altmov,i,int,0,DEF,Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,lowerDifference,ArrayRealVector,0,DEF,Math.min(trustRegionCenterOffset.getEntry(i) - $.getEntry(i), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,trustRegionCenterOffset,ArrayRealVector,0,DEF,Math.min($.getEntry(i) - lowerDifference.getEntry(i), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,glagValue,double,0,DEF,Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), $) < ZERO
BOBYQAOptimizer.java,altmov,upperDifference,ArrayRealVector,0,DEF,Math.max(trustRegionCenterOffset.getEntry(i) - $.getEntry(i), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,i,int,0,DEF,Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,trustRegionCenterOffset,ArrayRealVector,0,DEF,Math.max($.getEntry(i) - upperDifference.getEntry(i), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,ggfree,double,0,RET,$ == ZERO
BOBYQAOptimizer.java,altmov,tmp1,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,0,DEF,$.getEntry(i) == bigstp
BOBYQAOptimizer.java,altmov,i,int,0,DEF,work1.getEntry($) == bigstp
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,1,DEF,$.getEntry(i) == bigstp
BOBYQAOptimizer.java,altmov,i,int,1,DEF,work1.getEntry($) == bigstp
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,altmov,i,int,1,DEF,work1.getEntry($) == ZERO
BOBYQAOptimizer.java,altmov,glagValue,double,1,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,iflag,int,0,DEF,$ == 1
BOBYQAOptimizer.java,altmov,curv,double,1,DEF,$ > -gw
BOBYQAOptimizer.java,altmov,iflag,int,1,DEF,$ == 0
BOBYQAOptimizer.java,altmov,csave,double,0,DEF,$ > cauchy
BOBYQAOptimizer.java,prelim,nfm,int,1,DEF,$ >= 1
BOBYQAOptimizer.java,prelim,nfm,int,1,DEF,$ <= n
BOBYQAOptimizer.java,prelim,upperDifference,ArrayRealVector,0,DEF,$.getEntry(nfmm) == ZERO
BOBYQAOptimizer.java,prelim,nfmm,int,0,DEF,upperDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,nfm,int,0,DEF,$ > n
BOBYQAOptimizer.java,prelim,lowerDifference,ArrayRealVector,0,DEF,$.getEntry(nfxm) == ZERO
BOBYQAOptimizer.java,prelim,nfxm,int,0,DEF,lowerDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,upperDifference,ArrayRealVector,0,DEF,$.getEntry(nfxm) == ZERO
BOBYQAOptimizer.java,prelim,nfxm,int,0,DEF,upperDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,ipt,int,0,DEF,$ > n
BOBYQAOptimizer.java,prelim,numEval,int,1,DEF,$ == 1
BOBYQAOptimizer.java,prelim,numEval,int,1,DEF,$ >= 2
BOBYQAOptimizer.java,prelim,stepb,double,0,DEF,stepa * $ < ZERO
BOBYQAOptimizer.java,prelim,stepa,double,0,DEF,$ * stepb < ZERO
BOBYQAOptimizer.java,prelim,trustRegionCenterInterpolationPointIndex,int,0,DEF,$ == nfm
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,gradientAtTrustRegionCenter.getEntry($) >= ZERO
BOBYQAOptimizer.java,trsbox,gradientAtTrustRegionCenter,ArrayRealVector,0,DEF,$.getEntry(i) >= ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,gradientAtTrustRegionCenter.getEntry($) <= ZERO
BOBYQAOptimizer.java,trsbox,gradientAtTrustRegionCenter,ArrayRealVector,0,DEF,$.getEntry(i) <= ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,beta,double,1,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,stepsq,double,0,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,beta,double,0,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,resid,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,ds,double,1,DEF,$ < ZERO
BOBYQAOptimizer.java,trsbox,shs,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,0,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,s.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,1,DEF,$.getEntry(i) > ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,s.getEntry($) > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ < stplen
BOBYQAOptimizer.java,trsbox,stplen,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ == -1
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,crvmin,double,0,DEF,$ == MINUS_ONE
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,0,DEF,$.getEntry(iact) < ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,s.getEntry($) < ZERO
BOBYQAOptimizer.java,trsbox,delsq,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,stplen,double,0,DEF,$ < blen
BOBYQAOptimizer.java,trsbox,iterc,int,0,DEF,$ == itermax
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,tempa,double,1,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,tempb,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,angbd * $ > tempa
BOBYQAOptimizer.java,trsbox,angbd,double,0,DEF,$ * temp > tempa
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,angbd * $ > tempb
BOBYQAOptimizer.java,trsbox,angbd,double,0,DEF,$ * temp > tempb
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,rednew,double,1,DEF,$ > redmax
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ < 0
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ < iu
BOBYQAOptimizer.java,trsbox,sdec,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ == iu
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == MINUS_ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == MINUS_ONE
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,trsbox,k,int,0,DEF,modelSecondDerivativesParameters.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,modelSecondDerivativesParameters,ArrayRealVector,0,DEF,$.getEntry(k) != ZERO
BOBYQAOptimizer.java,trsbox,crvmin,double,0,DEF,$ != ZERO
BOBYQAOptimizer.java,trsbox,iterc,int,0,DEF,$ > itcsav
BOBYQAOptimizer.java,update,d1,double,0,DEF,Math.abs($) > ztest
BOBYQAOptimizer.java,update,i,int,0,DEF,$ >= npt
BOBYQAOptimizer.java,setup,dimension,int,0,NumberIsTooSmallException,$ < MINIMUM_PROBLEM_DIMENSION
BOBYQAOptimizer.java,setup,minDiff,double,0,DEF,$ < requiredMinDiff
MultivariateFunctionPenaltyAdapter.java,MultivariateFunctionPenaltyAdapter,lower,double[],0,DimensionMismatchException,$.length != upper.length
MultivariateFunctionPenaltyAdapter.java,MultivariateFunctionPenaltyAdapter,lower,double[],0,DimensionMismatchException,$.length != scale.length
PowellOptimizer.java,PowellOptimizer,rel,double,0,NumberIsTooSmallException,$ < MIN_RELATIVE_TOLERANCE
PowellOptimizer.java,PowellOptimizer,abs,double,0,NotStrictlyPositiveException,$ <= 0
PowellOptimizer.java,doOptimize,fX2,double,0,DEF,($ - fVal) > delta
PowellOptimizer.java,doOptimize,fVal,double,0,DEF,(fX2 - $) > delta
PowellOptimizer.java,doOptimize,checker,ConvergenceChecker<PointValuePair>,0,DEF,$ != null
PowellOptimizer.java,doOptimize,goal,GoalType,1,RET,$ == GoalType.MINIMIZE
PowellOptimizer.java,doOptimize,fX,double,0,DEF,$ > fX2
PowellOptimizer.java,doOptimize,t,double,0,DEF,$ < 0.0
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,lower,double[],0,NumberIsTooSmallException,$ != null
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,lower,double[],0,DimensionMismatchException,$.length != dim
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,v,double,0,NumberIsTooSmallException,$ < lo
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,upper,double[],0,NumberIsTooLargeException,$ != null
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,upper,double[],0,DimensionMismatchException,$.length != dim
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,v,double,0,NumberIsTooLargeException,$ > hi
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,lower,double[],1,DEF,$ == null
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,upper,double[],1,DEF,$ == null
MultivariateFunctionMappingAdapter.java,MultivariateFunctionMappingAdapter,lower,double[],0,DimensionMismatchException,$.length != upper.length
MultiDirectionalSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(reflected, best) < 0
MultiDirectionalSimplex.java,iterate,reflected,PointValuePair,0,RET,comparator.compare($, best) < 0
MultiDirectionalSimplex.java,iterate,best,PointValuePair,0,RET,comparator.compare(reflected, $) < 0
MultiDirectionalSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,DEF,$.compare(reflected, expanded) <= 0
MultiDirectionalSimplex.java,iterate,expanded,PointValuePair,0,DEF,comparator.compare(reflected, $) <= 0
MultiDirectionalSimplex.java,iterate,reflected,PointValuePair,0,DEF,comparator.compare($, expanded) <= 0
AbstractSimplex.java,AbstractSimplex,steps,double[],0,NullArgumentException,$ == null
AbstractSimplex.java,AbstractSimplex,steps,double[],0,ZeroException,$.length == 0
AbstractSimplex.java,AbstractSimplex,j,int,0,ZeroException,steps[$] == 0
AbstractSimplex.java,AbstractSimplex,steps,double[],0,ZeroException,$[j] == 0
AbstractSimplex.java,AbstractSimplex,referenceSimplex,double[][],0,NotStrictlyPositiveException,$.length <= 0
AbstractSimplex.java,AbstractSimplex,refI,double[],0,DimensionMismatchException,$.length != dimension
AbstractSimplex.java,AbstractSimplex,i,int,0,DEF,$ > 0
AbstractSimplex.java,build,dimension,int,0,DimensionMismatchException,$ != startPoint.length
AbstractSimplex.java,replaceWorstPoint,comparator,Comparator<PointValuePair>,0,DEF,$.compare(simplex[i], pointValuePair) > 0
AbstractSimplex.java,replaceWorstPoint,pointValuePair,PointValuePair,0,DEF,comparator.compare(simplex[i], $) > 0
AbstractSimplex.java,replaceWorstPoint,simplex,PointValuePair[],0,DEF,comparator.compare($[i], pointValuePair) > 0
AbstractSimplex.java,replaceWorstPoint,i,int,0,DEF,comparator.compare(simplex[$], pointValuePair) > 0
AbstractSimplex.java,getPoint,index,int,0,OutOfRangeException,$ < 0
AbstractSimplex.java,getPoint,index,int,0,OutOfRangeException,$ >= simplex.length
AbstractSimplex.java,setPoint,index,int,0,OutOfRangeException,$ < 0
AbstractSimplex.java,setPoint,index,int,0,OutOfRangeException,$ >= simplex.length
AbstractSimplex.java,setPoints,points,PointValuePair[],0,DimensionMismatchException,$.length != simplex.length
BaseAbstractMultivariateVectorOptimizer.java,optimize,f,FUNC,0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimize,t,double[],0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimize,w,double[],0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimize,startPoint,double[],0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimize,t,double[],0,DimensionMismatchException,$.length != w.length
BaseAbstractMultivariateOptimizer.java,optimize,f,FUNC,0,NullArgumentException,$ == null
BaseAbstractMultivariateOptimizer.java,optimize,goalType,GoalType,0,NullArgumentException,$ == null
BaseAbstractMultivariateOptimizer.java,optimize,startPoint,double[],0,NullArgumentException,$ == null
CMAESOptimizer.java,doOptimize,diagonalOnly,int,1,DEF,$ <= 0
CMAESOptimizer.java,doOptimize,i,int,0,DEF,$ >= checkFeasableCount
CMAESOptimizer.java,doOptimize,diagonalOnly,int,1,DEF,$ <= 0
CMAESOptimizer.java,doOptimize,bestValue,double,0,DEF,$ > bestFitness
CMAESOptimizer.java,doOptimize,lastResult,PointValuePair,0,DEF,$ != null
CMAESOptimizer.java,doOptimize,stopFitness,double,0,DEF,$ != 0
CMAESOptimizer.java,doOptimize,sigma,double,0,DEF,$*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > stopTolX
CMAESOptimizer.java,doOptimize,sqrtDiagC,double[],0,DEF,sigma*(Math.max(Math.abs(pcCol[i]), $[i])) > stopTolX
CMAESOptimizer.java,doOptimize,pcCol,double[],0,DEF,sigma*(Math.max(Math.abs($[i]), sqrtDiagC[i])) > stopTolX
CMAESOptimizer.java,doOptimize,i,int,0,DEF,sigma*(Math.max(Math.abs(pcCol[$]), sqrtDiagC[$])) > stopTolX
CMAESOptimizer.java,doOptimize,sigma,double,0,DEF,$*sqrtDiagC[i] > stopTolUpX
CMAESOptimizer.java,doOptimize,sqrtDiagC,double[],0,DEF,sigma*$[i] > stopTolUpX
CMAESOptimizer.java,doOptimize,i,int,0,DEF,sigma*sqrtDiagC[$] > stopTolUpX
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > 2
CMAESOptimizer.java,doOptimize,worstFitness,double,0,DEF,Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,bestFitness,double,0,DEF,Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > fitnessHistory.length
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,historyWorst-$ < stopTolHistFun
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,$-historyBest < stopTolHistFun
CMAESOptimizer.java,doOptimize,diagD,RealMatrix,0,DEF,max($)/min($) > 1e7
CMAESOptimizer.java,doOptimize,lastResult,PointValuePair,0,DEF,$ != null
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > 2
CMAESOptimizer.java,doOptimize,bestFitness,double,0,DEF,Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,OutOfRangeException,$ != null
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,DimensionMismatchException,$.length != init.length
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,NotPositiveException,$[i] < 0
CMAESOptimizer.java,checkParameters,i,int,0,NotPositiveException,inputSigma[$] < 0
CMAESOptimizer.java,checkParameters,boundaries,double[][],0,OutOfRangeException,$ != null
CMAESOptimizer.java,initializeCMA,lambda,int,0,DEF,$ <= 0
CMAESOptimizer.java,updateCovarianceDiagonalOnly,diagonalOnly,int,0,DEF,$ > 1
CMAESOptimizer.java,updateCovarianceDiagonalOnly,iterations,int,0,DEF,$ > diagonalOnly
CMAESOptimizer.java,updateCovariance,ccovmu,double,0,DEF,ccov1 + $ > 0
CMAESOptimizer.java,updateCovariance,ccov1,double,0,DEF,$ + ccovmu > 0
CMAESOptimizer.java,updateCovariance,negccov,double,0,DEF,$ > negcovMax
CMAESOptimizer.java,updateBD,negccov,double,0,DEF,ccov1 + ccovmu + $ > 0
CMAESOptimizer.java,updateBD,ccovmu,double,0,DEF,ccov1 + $ + negccov > 0
CMAESOptimizer.java,updateBD,ccov1,double,0,DEF,$ + ccovmu + negccov > 0
CMAESOptimizer.java,updateBD,negccov,double,0,DEF,(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1.
CMAESOptimizer.java,updateBD,ccovmu,double,0,DEF,(iterations % 1. / (ccov1 + $ + negccov) / dimension / 10.) < 1.
CMAESOptimizer.java,updateBD,ccov1,double,0,DEF,(iterations % 1. / ($ + ccovmu + negccov) / dimension / 10.) < 1.
CMAESOptimizer.java,updateBD,dimension,int,0,DEF,(iterations % 1. / (ccov1 + ccovmu + negccov) / $ / 10.) < 1.
CMAESOptimizer.java,updateBD,iterations,int,0,DEF,($ % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1.
CMAESOptimizer.java,updateBD,diagD,RealMatrix,0,DEF,min($) <= 0
CMAESOptimizer.java,updateBD,i,int,0,DEF,diagD.getEntry($, 0) < 0
CMAESOptimizer.java,updateBD,diagD,RealMatrix,0,DEF,$.getEntry(i, 0) < 0
CMAESOptimizer.java,equals,other,null,0,RET,$ instanceof DoubleIndex
CMAESOptimizer.java,encode,boundaries,double[][],0,RET,$ == null
CMAESOptimizer.java,decode,boundaries,double[][],0,RET,$ == null
CMAESOptimizer.java,value,boundaries,double[][],1,DEF,$ != null
CMAESOptimizer.java,isFeasible,boundaries,double[][],0,RET,$ == null
CMAESOptimizer.java,isFeasible,x,double[],0,RET,$[i] < 0
CMAESOptimizer.java,isFeasible,i,int,0,RET,x[$] < 0
CMAESOptimizer.java,isFeasible,x,double[],0,RET,$[i] > 1.0
CMAESOptimizer.java,isFeasible,i,int,0,RET,x[$] > 1.0
CMAESOptimizer.java,repair,x,double[],1,DEF,$[i] < 0
CMAESOptimizer.java,repair,i,int,1,DEF,x[$] < 0
CMAESOptimizer.java,repair,x,double[],1,DEF,$[i] > 1.0
CMAESOptimizer.java,repair,i,int,1,DEF,x[$] > 1.0
CMAESOptimizer.java,diag,m,RealMatrix,1,RET,$.getColumnDimension() == 1
CMAESOptimizer.java,eye,r,int,0,DEF,$ < m
CMAESOptimizer.java,max,max,double,0,DEF,$ < e
CMAESOptimizer.java,min,min,double,0,DEF,$ > e
SimplexOptimizer.java,doOptimize,simplex,AbstractSimplex,0,NullArgumentException,$ == null
SimplexOptimizer.java,doOptimize,iteration,int,0,RET,$ > 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(best, reflected) <= 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare(best, $) <= 0
NelderMeadSimplex.java,iterate,best,PointValuePair,1,DEF,comparator.compare($, reflected) <= 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(reflected, secondBest) < 0
NelderMeadSimplex.java,iterate,secondBest,PointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare($, secondBest) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(reflected, best) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare($, best) < 0
NelderMeadSimplex.java,iterate,best,PointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(expanded, reflected) < 0
NelderMeadSimplex.java,iterate,expanded,PointValuePair,1,DEF,comparator.compare($, reflected) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare(expanded, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,RET,$.compare(reflected, worst) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,RET,comparator.compare($, worst) < 0
NelderMeadSimplex.java,iterate,worst,PointValuePair,1,RET,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(outContracted, reflected) <= 0
NelderMeadSimplex.java,iterate,outContracted,PointValuePair,0,RET,comparator.compare($, reflected) <= 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,0,RET,comparator.compare(outContracted, $) <= 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(inContracted, worst) < 0
NelderMeadSimplex.java,iterate,worst,PointValuePair,0,RET,comparator.compare(inContracted, $) < 0
NelderMeadSimplex.java,iterate,inContracted,PointValuePair,0,RET,comparator.compare($, worst) < 0
NonLinearConjugateGradientOptimizer.java,setInitialStep,initialStep,double,1,DEF,$ <= 0
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,previous,PointValuePair,0,RET,$ != null
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,updateFormula,ConjugateGradientFormula,1,DEF,$ == ConjugateGradientFormula.FLETCHER_REEVES
NonLinearConjugateGradientOptimizer.java,doOptimize,iter,int,1,DEF,$ % n == 0
NonLinearConjugateGradientOptimizer.java,doOptimize,n,int,1,DEF,iter % $ == 0
NonLinearConjugateGradientOptimizer.java,doOptimize,beta,double,1,DEF,$ < 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yA,double,0,RET,$ * yB <= 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yB,double,0,RET,yA * $ <= 0
LevenbergMarquardtOptimizer.java,doOptimize,dk,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,s,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtOptimizer.java,doOptimize,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtOptimizer.java,doOptimize,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,RET,$ >= 1.0e-4
LevenbergMarquardtOptimizer.java,doOptimize,checker,ConvergenceChecker<PointVectorValuePair>,0,RET,$ != null
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,0,RET,FastMath.abs($) <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,1,ConvergenceException,FastMath.abs($) <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,1,ConvergenceException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,ConvergenceException,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,ConvergenceException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtOptimizer.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtOptimizer.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtOptimizer.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtOptimizer.java,qrDecomposition,ak2,double,0,RET,$ <= qrRankingThreshold
AbstractLeastSquaresOptimizer.java,updateJacobian,weightedResidualJacobian,double[][],0,DimensionMismatchException,$.length != rows
AbstractLeastSquaresOptimizer.java,updateResidualsAndCost,objective,double[],0,DimensionMismatchException,$.length != rows
AbstractLeastSquaresOptimizer.java,guessParametersErrors,rows,int,0,NumberIsTooSmallException,$ <= cols
GaussNewtonOptimizer.java,doOptimize,checker,ConvergenceChecker<PointVectorValuePair>,0,DEF,$ != null
GaussNewtonOptimizer.java,doOptimize,previous,PointVectorValuePair,0,DEF,$ != null
BaseMultivariateMultiStartOptimizer.java,BaseMultivariateMultiStartOptimizer,optimizer,BaseMultivariateOptimizer<FUNC>,0,NullArgumentException,$ == null
BaseMultivariateMultiStartOptimizer.java,BaseMultivariateMultiStartOptimizer,generator,RandomVectorGenerator,0,NullArgumentException,$ == null
BaseMultivariateMultiStartOptimizer.java,BaseMultivariateMultiStartOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
BaseMultivariateMultiStartOptimizer.java,getOptima,optima,PointValuePair[],0,MathIllegalStateException,$ == null
BaseMultivariateMultiStartOptimizer.java,optimize,optima,PointValuePair[],0,DEF,$[0] == null
BaseMultivariateMultiStartOptimizer.java,compare,o1,PointValuePair,1,RET,$ == null
BaseMultivariateMultiStartOptimizer.java,compare,o2,PointValuePair,0,RET,$ == null
Beta.java,regularizedBeta,x,double,1,DEF,$ < 0
Beta.java,regularizedBeta,x,double,1,DEF,$ > 1
Beta.java,regularizedBeta,a,double,1,DEF,$ <= 0.0
Beta.java,regularizedBeta,b,double,1,DEF,$ <= 0.0
Beta.java,getB,n,int,1,DEF,$ % 2 == 0
Beta.java,logBeta,a,double,1,DEF,$ <= 0.0
Beta.java,logBeta,b,double,1,DEF,$ <= 0.0
Gamma.java,logGamma,x,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaP,n,double,1,MaxCountExceededException,$ >= maxIterations
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ == 0.0
Gamma.java,digamma,x,double,0,RET,$ > 0
Gamma.java,digamma,x,double,0,RET,$ <= S_LIMIT
Gamma.java,digamma,x,double,0,RET,$ >= C_LIMIT
Gamma.java,trigamma,x,double,0,RET,$ > 0
Gamma.java,trigamma,x,double,0,RET,$ <= S_LIMIT
Gamma.java,trigamma,x,double,0,RET,$ >= C_LIMIT
Erf.java,erf,x,double,0,RET,FastMath.abs($) > 40
Erf.java,erfc,x,double,0,RET,FastMath.abs($) > 40
Erf.java,erf,x1,double,0,RET,$ > x2
VectorFormat.java,format,i,int,0,DEF,$ > 0
VectorFormat.java,parseCoordinates,i,int,0,RET,$ > 0
VectorFormat.java,parseCoordinates,c,Number,0,RET,$ == null
Line.java,reset,d,double,1,DEF,$ == 0.0
Line.java,revertSelf,angle,double,1,DEF,$ < FastMath.PI
Line.java,intersection,d,double,0,RET,FastMath.abs($) < 1.0e-10
Line.java,LineTransform,c11,double,0,MathIllegalArgumentException,FastMath.abs($) < 1.0e-20
SubLine.java,side,crossing,Vector2D,0,RET,$ == null
SubLine.java,split,crossing,Vector2D,0,RET,$ == null
PolygonsSet.java,computeGeometricalProperties,v,Vector2D[][],1,DEF,$.length == 0
PolygonsSet.java,computeGeometricalProperties,tree,BSPTree<Euclidean2D>,1,DEF,$.getCut() == null
PolygonsSet.java,computeGeometricalProperties,v,Vector2D[][],1,DEF,$[0][0] == null
PolygonsSet.java,computeGeometricalProperties,sum,double,1,DEF,$ < 0
PolygonsSet.java,getVertices,vertices,Vector2D[][],0,DEF,$ == null
PolygonsSet.java,getVertices,loop,List<ComparableSegment>,0,DEF,$ != null
PolygonsSet.java,getVertices,loop,List<ComparableSegment>,1,DEF,$.size() < 2
PolygonsSet.java,getVertices,loop,List<ComparableSegment>,1,DEF,$.get(0).getStart() == null
PolygonsSet.java,getVertices,j,int,0,DEF,$ == 0
PolygonsSet.java,followLoop,distance,double,0,DEF,$ < selectedDistance
PolygonsSet.java,followLoop,selectedDistance,double,0,RET,$ > 1.0e-10
PolygonsSet.java,followLoop,loop,ArrayList<ComparableSegment>,0,RET,$.size() == 2
PolygonsSet.java,followLoop,end,Vector2D,0,MathInternalError,$ == null
PolygonsSet.java,equals,other,null,1,RET,$ instanceof ComparableSegment
PolygonsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean2D>,0,DEF,$.getPlusOutside() != null
PolygonsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean2D>,0,DEF,$.getPlusInside() != null
Vector2D.java,Vector2D,v,double[],0,DimensionMismatchException,$.length != 2
Vector2D.java,normalize,s,double,0,MathArithmeticException,$ == 0
Vector2D.java,equals,other,null,0,RET,$ instanceof Vector2D
Vector2DFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
Vector2DFormat.java,parse,coordinates,double[],0,RET,$ == null
NestedLoops.java,NestedLoops,loop,Vector2D[],0,MathIllegalArgumentException,$[0] == null
Vector1DFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
Vector1DFormat.java,parse,coordinates,double[],0,RET,$ == null
Vector1D.java,normalize,s,double,0,MathArithmeticException,$ == 0
Vector1D.java,equals,other,null,0,RET,$ instanceof Vector1D
IntervalsSet.java,buildTree,lower,double,0,RET,$ < 0
IntervalsSet.java,buildTree,upper,double,0,RET,$ > 0
IntervalsSet.java,buildTree,upper,double,0,RET,$ > 0
IntervalsSet.java,computeGeometricalProperties,size,double,1,DEF,$ >= Precision.SAFE_MIN
IntervalsSet.java,recurseList,node,BSPTree<Euclidean1D>,1,DEF,$.getCut() == null
IntervalsSet.java,recurseList,loc,Vector1D,0,DEF,checkPoint(low, $) == Location.INSIDE
IntervalsSet.java,recurseList,low,BSPTree<Euclidean1D>,0,DEF,checkPoint($, loc) == Location.INSIDE
IntervalsSet.java,recurseList,loc,Vector1D,0,DEF,checkPoint(high, $) == Location.INSIDE
IntervalsSet.java,recurseList,high,BSPTree<Euclidean1D>,0,DEF,checkPoint($, loc) == Location.INSIDE
SubPlane.java,side,inter,Line,0,RET,$ == null
SubPlane.java,side,otherPlane,Plane,0,DEF,crossP.dotProduct($.getNormal()) < 0
SubPlane.java,side,crossP,Vector3D,0,DEF,$.dotProduct(otherPlane.getNormal()) < 0
SubPlane.java,split,inter,Line,0,RET,$ == null
SubPlane.java,split,otherPlane,Plane,0,DEF,crossP.dotProduct($.getNormal()) < 0
SubPlane.java,split,crossP,Vector3D,0,DEF,$.dotProduct(otherPlane.getNormal()) < 0
Line.java,reset,norm2,double,0,MathIllegalArgumentException,$ == 0.0
Line.java,distance,n,double,0,RET,$ < Precision.SAFE_MIN
Line.java,closestPoint,n,double,0,RET,$ < Precision.EPSILON
Vector3DFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
Vector3DFormat.java,parse,coordinates,double[],0,RET,$ == null
Vector3D.java,Vector3D,v,double[],0,DimensionMismatchException,$.length != 3
Vector3D.java,normalize,s,double,0,MathArithmeticException,$ == 0
Vector3D.java,orthogonal,threshold,double,0,MathArithmeticException,$ == 0
Vector3D.java,orthogonal,x,double,1,RET,$ >= -threshold
Vector3D.java,orthogonal,x,double,1,RET,$ <= threshold
Vector3D.java,orthogonal,y,double,0,RET,$ >= -threshold
Vector3D.java,orthogonal,y,double,0,RET,$ <= threshold
Vector3D.java,angle,normProduct,double,0,MathArithmeticException,$ == 0
Vector3D.java,angle,dot,double,0,RET,$ < -threshold
Vector3D.java,angle,dot,double,0,RET,$ > threshold
Vector3D.java,angle,dot,double,0,RET,$ >= 0
Vector3D.java,equals,other,null,0,RET,$ instanceof Vector3D
OutlineExtractor.java,getOutline,end,int,0,DEF,$ != rawLoop.length
OutlineExtractor.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusOutside() != null
OutlineExtractor.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusInside() != null
OutlineExtractor.java,addContribution,scal,double,0,DEF,FastMath.abs($) > 1.0e-3
OutlineExtractor.java,addContribution,scal,double,0,DEF,$ < 0
OutlineExtractor.java,addContribution,loop,Vector2D[],1,DEF,$[0] == null
OutlineExtractor.java,addContribution,previous,int,0,DEF,$ != 1
PolyhedronsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusOutside() != null
PolyhedronsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusInside() != null
PolyhedronsSet.java,recurseFirstIntersection,cut,SubHyperplane<Euclidean3D>,0,RET,$ == null
PolyhedronsSet.java,recurseFirstIntersection,offset,double,1,DEF,$ < 0
PolyhedronsSet.java,recurseFirstIntersection,facet,SubHyperplane<Euclidean3D>,0,RET,$ != null
PolyhedronsSet.java,recurseFirstIntersection,crossed,SubHyperplane<Euclidean3D>,0,RET,$ != null
PolyhedronsSet.java,recurseFirstIntersection,hit3D,Vector3D,0,RET,$ != null
PolyhedronsSet.java,recurseFirstIntersection,facet,SubHyperplane<Euclidean3D>,0,RET,$ != null
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,$.getPlusOutside() != null
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,((SubPlane) $.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
PolyhedronsSet.java,boundaryFacet,point2D,Vector2D,0,RET,((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint($) == Location.INSIDE
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,$.getPlusInside() != null
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,((SubPlane) $.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
PolyhedronsSet.java,boundaryFacet,point2D,Vector2D,0,RET,((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint($) == Location.INSIDE
PolyhedronsSet.java,apply,original,Hyperplane<Euclidean3D>,0,DEF,$ != cachedOriginal
PolyhedronsSet.java,apply,original,Hyperplane<Euclidean3D>,0,DEF,$ != cachedOriginal
Plane.java,setNormal,norm,double,0,MathArithmeticException,$ < 1.0e-10
Plane.java,intersection,dot,double,0,RET,FastMath.abs($) < 1.0e-10
Plane.java,intersection,direction,Vector3D,0,RET,$.getNorm() < 1.0e-10
Plane.java,intersection,determinant,double,0,RET,FastMath.abs($) < 1.0e-10
Rotation.java,Rotation,norm,double,0,MathIllegalArgumentException,$ == 0
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$.length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[0].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[1].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[2].length != 3
Rotation.java,Rotation,det,double,0,NotARotationMatrixException,$ < 0.0
Rotation.java,Rotation,normProduct,double,0,MathIllegalArgumentException,$ == 0
Rotation.java,mat2quat,s,double,1,DEF,$ > -0.19
Rotation.java,mat2quat,s,double,1,DEF,$ > -0.19
Rotation.java,mat2quat,s,double,1,DEF,$ > -0.19
Rotation.java,getAxis,squaredSine,double,1,RET,$ == 0
Rotation.java,getAxis,q0,double,0,RET,$ < 0
Rotation.java,getAngle,q0,double,1,RET,$ < -0.1
Rotation.java,getAngle,q0,double,1,RET,$ > 0.1
Rotation.java,getAngle,q0,double,0,RET,$ < 0
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,orthogonalizeMatrix,fn1,double,0,RET,FastMath.abs($ - fn) <= threshold
Rotation.java,orthogonalizeMatrix,fn,double,0,RET,FastMath.abs(fn1 - $) <= threshold
RegionFactory.java,buildConvex,hyperplanes,Hyperplane<S>[],0,RET,$ == null
RegionFactory.java,buildConvex,hyperplanes,Hyperplane<S>[],0,RET,$.length == 0
RegionFactory.java,recurseComplement,node,BSPTree<S>,0,RET,$.getCut() == null
RegionFactory.java,recurseComplement,attribute,BoundaryAttribute<S>,0,DEF,$ != null
BSPTree.java,insertCut,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,copySelf,cut,SubHyperplane<S>,0,RET,$ == null
BSPTree.java,visit,cut,SubHyperplane<S>,1,DEF,$ == null
BSPTree.java,fitToCell,tree,BSPTree<S>,1,DEF,$ == tree.parent.plus
BSPTree.java,getCell,cut,SubHyperplane<S>,0,RET,$ == null
BSPTree.java,getCell,offset,double,1,RET,FastMath.abs($) < 1.0e-10
BSPTree.java,getCell,offset,double,1,RET,$ <= 0
BSPTree.java,condense,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,condense,plus,BSPTree<S>,0,DEF,$.cut == null
BSPTree.java,condense,minus,BSPTree<S>,0,DEF,$.cut == null
BSPTree.java,condense,plus,BSPTree<S>,0,DEF,$.attribute == null
BSPTree.java,condense,minus,BSPTree<S>,0,DEF,$.attribute == null
BSPTree.java,condense,plus,BSPTree<S>,0,DEF,$.attribute != null
BSPTree.java,merge,cut,SubHyperplane<S>,1,RET,$ == null
BSPTree.java,merge,tree,BSPTree<S>,1,RET,$.cut == null
BSPTree.java,merge,parentTree,BSPTree<S>,0,DEF,$ != null
BSPTree.java,merge,merged,BSPTree<S>,0,DEF,$.cut != null
BSPTree.java,split,cut,SubHyperplane<S>,0,RET,$ == null
BSPTree.java,split,cut,SubHyperplane<S>,1,DEF,$.side(sHyperplane) == Side.PLUS
BSPTree.java,split,sHyperplane,Hyperplane<S>,1,DEF,cut.side($) == Side.PLUS
BSPTree.java,split,cut,SubHyperplane<S>,1,DEF,$.side(sHyperplane) == Side.PLUS
BSPTree.java,split,sHyperplane,Hyperplane<S>,1,DEF,cut.side($) == Side.PLUS
BSPTree.java,insertInTree,parentTree,BSPTree<S>,0,DEF,$ != null
BSPTree.java,insertInTree,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,insertInTree,tree,BSPTree<S>,1,DEF,$ == tree.parent.plus
BSPTree.java,chopOffMinus,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,chopOffPlus,cut,SubHyperplane<S>,0,DEF,$ != null
AbstractRegion.java,AbstractRegion,boundary,Collection<SubHyperplane<S>>,1,DEF,$.size() == 0
AbstractRegion.java,AbstractRegion,hyperplanes,Hyperplane<S>[],1,DEF,$ == null
AbstractRegion.java,AbstractRegion,hyperplanes,Hyperplane<S>[],1,DEF,$.length == 0
AbstractRegion.java,isEmpty,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,checkPoint,cell,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,getTree,tree,BSPTree<S>,0,DEF,$.getCut() != null
AbstractRegion.java,getTree,tree,BSPTree<S>,0,DEF,$.getAttribute() == null
AbstractRegion.java,visitInternalNode,plusChar,SubHyperplane<S>[],0,DEF,$[0] != null
AbstractRegion.java,visitInternalNode,minusChar,SubHyperplane<S>[],0,DEF,$[1] != null
AbstractRegion.java,visitInternalNode,plusChar,SubHyperplane<S>[],0,DEF,$[1] != null
AbstractRegion.java,visitInternalNode,minusChar,SubHyperplane<S>[],0,DEF,$[0] != null
AbstractRegion.java,characterize,node,BSPTree<S>,1,DEF,$.getCut() == null
AbstractRegion.java,characterize,characterization,SubHyperplane<S>[],1,DEF,$[1] == null
AbstractRegion.java,characterize,characterization,SubHyperplane<S>[],1,DEF,$[0] == null
AbstractRegion.java,getSize,barycenter,Vector<S>,0,DEF,$ == null
AbstractRegion.java,getBarycenter,barycenter,Vector<S>,0,DEF,$ == null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,recurseSides,node,BSPTree<S>,1,DEF,$.getCut().side(sub.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,sub,SubHyperplane<S>,1,DEF,node.getCut().side($.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,node,BSPTree<S>,1,DEF,$.getCut().side(sub.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,sub,SubHyperplane<S>,1,DEF,node.getCut().side($.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getPlus().getCut() != null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getMinus().getCut() != null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getPlus().getCut() != null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getMinus().getCut() != null
AbstractRegion.java,recurseIntersection,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,recurseIntersection,plus,SubHyperplane<S>,1,RET,$ == null
AbstractRegion.java,recurseIntersection,minus,SubHyperplane<S>,1,RET,$ == null
AbstractRegion.java,recurseTransform,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,recurseTransform,attribute,BoundaryAttribute<S>,0,DEF,$ != null
OrderedTuple.java,OrderedTuple,components,double[],1,DEF,$[i] < 0
OrderedTuple.java,OrderedTuple,i,int,1,DEF,components[$] < 0
OrderedTuple.java,OrderedTuple,m,long,0,DEF,$ != 0
OrderedTuple.java,OrderedTuple,lsb,int,1,DEF,$ <= msb
OrderedTuple.java,encode,encoding,long[],0,RET,$ != null
OrderedTuple.java,encode,encoding,long[],0,RET,$.length == 1
OrderedTuple.java,encode,encoding,long[],0,RET,$[0] == 0x0L
OrderedTuple.java,encode,vIndex,int,0,DEF,getBit($, k) != 0
OrderedTuple.java,encode,k,int,0,DEF,getBit(vIndex, $) != 0
OrderedTuple.java,encode,shift,int,0,DEF,$-- == 0
OrderedTuple.java,compareTo,components,double[],0,RET,$.length == ot.components.length
OrderedTuple.java,compareTo,offset,int,1,DEF,$ < ot.offset
OrderedTuple.java,compareTo,offset,int,0,DEF,$ > ot.offset
OrderedTuple.java,compareTo,encoding,long[],1,RET,$.length < ot.encoding.length
OrderedTuple.java,compareTo,encoding,long[],1,RET,$.length > ot.encoding.length
OrderedTuple.java,equals,other,null,1,RET,$ instanceof OrderedTuple
OrderedTuple.java,computeMSB,ll,long,0,DEF,($ & mask) != ll
OrderedTuple.java,computeMSB,mask,long,0,DEF,(ll & $) != ll
OrderedTuple.java,computeLSB,ll,long,0,DEF,($ & mask) == ll
OrderedTuple.java,computeLSB,mask,long,0,DEF,(ll & $) == ll
OrderedTuple.java,getBit,k,int,1,RET,$ < e
OrderedTuple.java,getBit,k,int,1,RET,$ > offset
OrderedTuple.java,getBit,k,int,1,RET,$ == offset
AVLTree.java,insert,element,T,0,DEF,$ != null
AVLTree.java,insert,top,Node,1,DEF,$ == null
AVLTree.java,delete,element,T,0,RET,$ != null
AVLTree.java,delete,node,Node,1,RET,$.element == element
AVLTree.java,delete,node,Node,0,RET,$.element.compareTo(element) > 0
AVLTree.java,delete,element,T,0,RET,node.element.compareTo($) > 0
AVLTree.java,getNotSmaller,reference,T,1,RET,node.element.compareTo($) < 0
AVLTree.java,getNotSmaller,node,Node,1,RET,$.element.compareTo(reference) < 0
AVLTree.java,getNotSmaller,node,Node,0,RET,$.right == null
AVLTree.java,getNotSmaller,node,Node,0,RET,$.left == null
AVLTree.java,getNotLarger,reference,T,1,RET,node.element.compareTo($) > 0
AVLTree.java,getNotLarger,node,Node,1,RET,$.element.compareTo(reference) > 0
AVLTree.java,getNotLarger,node,Node,0,RET,$.left == null
AVLTree.java,getNotLarger,node,Node,0,RET,$.right == null
AVLTree.java,getPrevious,left,Node,0,RET,$ != null
AVLTree.java,getPrevious,node,Node,0,RET,$ != null
AVLTree.java,getPrevious,node,Node,0,RET,$ != node.parent.left
AVLTree.java,getNext,right,Node,0,RET,$ != null
AVLTree.java,getNext,node,Node,0,RET,$ != null
AVLTree.java,getNext,node,Node,0,RET,$ != node.parent.right
AVLTree.java,insert,newElement,T,0,RET,$.compareTo(this.element) < 0
AVLTree.java,insert,left,Node,0,RET,$ == null
AVLTree.java,insert,right,Node,0,RET,$ == null
AVLTree.java,delete,parent,Node,1,DEF,$ == null
AVLTree.java,delete,left,Node,1,DEF,$ == null
AVLTree.java,delete,right,Node,1,DEF,$ == null
AVLTree.java,delete,left,Node,1,DEF,$ == null
AVLTree.java,delete,right,Node,1,DEF,$ == null
AVLTree.java,delete,child,Node,0,DEF,$ != null
AVLTree.java,delete,node,Node,0,RET,$.parent == null
AVLTree.java,rebalanceLeftGrown,left,Node,1,DEF,$.skew == Skew.LEFT_HIGH
AVLTree.java,rebalanceRightGrown,right,Node,1,DEF,$.skew == Skew.RIGHT_HIGH
AVLTree.java,rebalanceLeftShrunk,right,Node,1,RET,$.skew == Skew.RIGHT_HIGH
AVLTree.java,rebalanceLeftShrunk,right,Node,1,RET,$.skew == Skew.BALANCED
AVLTree.java,rebalanceRightShrunk,left,Node,1,RET,$.skew == Skew.LEFT_HIGH
AVLTree.java,rebalanceRightShrunk,left,Node,1,RET,$.skew == Skew.BALANCED
AVLTree.java,rotateCW,left,Node,0,DEF,$ != null
AVLTree.java,rotateCW,right,Node,0,DEF,$.right != null
AVLTree.java,rotateCCW,right,Node,0,DEF,$ != null
AVLTree.java,rotateCCW,left,Node,0,DEF,$.left != null
AbstractSubHyperplane.java,recurseTransform,node,BSPTree<T>,0,RET,$.getCut() == null
AbstractSubHyperplane.java,recurseTransform,attribute,BoundaryAttribute<T>,0,DEF,$ != null
BoundarySizeVisitor.java,visitInternalNode,attribute,BoundaryAttribute<S>,0,DEF,$.getPlusOutside() != null
BoundarySizeVisitor.java,visitInternalNode,attribute,BoundaryAttribute<S>,0,DEF,$.getPlusInside() != null
AbstractWell.java,setSeed,seed,int[],0,RET,$ == null
AbstractWell.java,setSeed,seed,int[],0,DEF,$.length < v.length
ValueServer.java,resetReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,closeReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,MathIllegalStateException,$ == null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,MathIllegalStateException,$.getBinStats().size() == 0
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,$ == null
ValueServer.java,getNextReplay,str,String,0,MathIllegalStateException,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,MathIllegalStateException,(str = $.readLine()) == null
ValueServer.java,getNextReplay,str,String,0,MathIllegalStateException,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,MathIllegalStateException,(str = $.readLine()) == null
ISAACRandom.java,setSeed,seed,int[],0,RET,$ == null
ISAACRandom.java,setSeed,seedLen,int,0,DEF,$ < rslLen
ISAACRandom.java,next,count,int,0,DEF,$ < 0
BitsStreamGenerator.java,nextInt,n,int,0,RET,$ > 0
BitsStreamGenerator.java,nextInt,n,int,0,RET,($ & -$) == n
UncorrelatedRandomVectorGenerator.java,UncorrelatedRandomVectorGenerator,mean,double[],0,DimensionMismatchException,$.length != standardDeviation.length
StableRandomGenerator.java,StableRandomGenerator,generator,RandomGenerator,0,NullArgumentException,$ == null
StableRandomGenerator.java,StableRandomGenerator,alpha,double,0,OutOfRangeException,$ > 0d
StableRandomGenerator.java,StableRandomGenerator,alpha,double,0,OutOfRangeException,$ <= 2d
StableRandomGenerator.java,StableRandomGenerator,beta,double,0,OutOfRangeException,$ >= -1d
StableRandomGenerator.java,StableRandomGenerator,beta,double,0,OutOfRangeException,$ <= 1d
StableRandomGenerator.java,StableRandomGenerator,alpha,double,1,DEF,$ < 2d
StableRandomGenerator.java,StableRandomGenerator,beta,double,1,DEF,$ != 0d
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,0,RET,$ == 2d
StableRandomGenerator.java,nextNormalizedDouble,beta,double,1,DEF,$ == 0d
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,1,DEF,$ == 1d
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,1,DEF,FastMath.abs($ - 1d) > 1e-8
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,0,DEF,$ != 1d
RandomDataImpl.java,nextHexString,len,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataImpl.java,nextHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextInt,lower,int,0,NumberIsTooLargeException,$ >= upper
RandomDataImpl.java,nextLong,lower,long,0,NumberIsTooLargeException,$ >= upper
RandomDataImpl.java,nextSecureHexString,len,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataImpl.java,nextSecureHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextSecureInt,lower,int,0,NumberIsTooLargeException,$ >= upper
RandomDataImpl.java,nextSecureLong,lower,long,0,NumberIsTooLargeException,$ >= upper
RandomDataImpl.java,nextPoisson,mean,double,0,NotStrictlyPositiveException,$ <= 0
RandomDataImpl.java,nextPoisson,mean,double,1,RET,$ < pivot
RandomDataImpl.java,nextPoisson,r,double,1,DEF,$ >= p
RandomDataImpl.java,nextPoisson,u,double,1,DEF,$ <= p1
RandomDataImpl.java,nextPoisson,x,double,0,DEF,$ > delta
RandomDataImpl.java,nextPoisson,x,double,0,DEF,$ < -lambda
RandomDataImpl.java,nextPoisson,v,double,0,DEF,$ < -t
RandomDataImpl.java,nextPoisson,a,int,0,DEF,$ == 0
RandomDataImpl.java,nextPoisson,v,double,0,DEF,$ < qa
RandomDataImpl.java,nextPoisson,v,double,0,DEF,$ > qr
RandomDataImpl.java,nextGaussian,sigma,double,0,NotStrictlyPositiveException,$ <= 0
RandomDataImpl.java,nextExponential,mean,double,0,NotStrictlyPositiveException,$ <= 0.0
RandomDataImpl.java,nextExponential,u2,double,0,DEF,$ < umin
RandomDataImpl.java,nextUniform,lower,double,0,NumberIsTooLargeException,$ >= upper
RandomDataImpl.java,nextGamma,shape,double,0,RET,$ < 1
RandomDataImpl.java,nextGamma,p,double,1,RET,$ <= 1
RandomDataImpl.java,nextGamma,v,double,0,DEF,$ <= 0
RandomDataImpl.java,getRan,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,getSecRan,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,nextPermutation,k,int,0,NumberIsTooLargeException,$ > n
RandomDataImpl.java,nextPermutation,k,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataImpl.java,nextSample,k,int,0,NumberIsTooLargeException,$ > len
RandomDataImpl.java,nextSample,k,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataImpl.java,shuffle,i,int,1,DEF,$ == 0
MersenneTwister.java,setSeed,seed,int[],0,RET,$ == null
MersenneTwister.java,setSeed,i,int,0,DEF,$ >= N
MersenneTwister.java,setSeed,j,int,0,DEF,$ >= seed.length
MersenneTwister.java,setSeed,i,int,0,DEF,$ >= N
MersenneTwister.java,next,mti,int,0,DEF,$ >= N
CorrelatedRandomVectorGenerator.java,CorrelatedRandomVectorGenerator,mean,double[],0,DimensionMismatchException,$.length != order
EmpiricalDistribution.java,load,sampleStats,SummaryStatistics,0,ZeroException,$.getN() == 0
EmpiricalDistribution.java,getAdapter,in,null,1,RET,$ instanceof BufferedReader
EmpiricalDistribution.java,getAdapter,in,null,1,RET,$ instanceof double[]
EmpiricalDistribution.java,getNextValue,stats,SummaryStatistics,0,RET,$.getN() > 0
EmpiricalDistribution.java,getNextValue,stats,SummaryStatistics,1,RET,$.getStandardDeviation() > 0
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
AbstractRandomGenerator.java,nextBytes,i,int,0,DEF,$ > 0
AbstractRandomGenerator.java,nextBytes,bytesOut,int,0,RET,$ == bytes.length
AbstractRandomGenerator.java,nextInt,n,int,0,NotStrictlyPositiveException,$ <= 0
AbstractRandomGenerator.java,nextGaussian,s,double,0,DEF,$ != 0
Sigmoid.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Sigmoid.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 2
Gaussian.java,Gaussian,sigma,double,0,NotStrictlyPositiveException,$ <= 0
Gaussian.java,value,g,double,1,RET,$ == 0
Gaussian.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Gaussian.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 3
Gaussian.java,validateParameters,param,double[],0,NotStrictlyPositiveException,$[2] <= 0
HarmonicOscillator.java,validateParameters,param,double[],0,NullArgumentException,$ == null
HarmonicOscillator.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 3
Logit.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Logit.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 2
Logit.java,value,x,double,0,OutOfRangeException,$ < lo
Logit.java,value,x,double,0,OutOfRangeException,$ > hi
StepFunction.java,StepFunction,x,double[],0,NullArgumentException,$ == null
StepFunction.java,StepFunction,y,double[],0,NullArgumentException,$ == null
StepFunction.java,StepFunction,x,double[],0,NoDataException,$.length == 0
StepFunction.java,StepFunction,y,double[],0,NoDataException,$.length == 0
StepFunction.java,StepFunction,y,double[],0,DimensionMismatchException,$.length != x.length
StepFunction.java,value,index,int,1,DEF,$ < -1
StepFunction.java,value,index,int,1,DEF,$ >= 0
Logistic.java,Logistic,n,double,0,NotStrictlyPositiveException,$ <= 0
Logistic.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Logistic.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 6
Logistic.java,validateParameters,param,double[],0,NotStrictlyPositiveException,$[5] <= 0
BaseSecantSolver.java,doSolve,f0,double,0,RET,$ == 0.0
BaseSecantSolver.java,doSolve,f1,double,0,RET,$ == 0.0
BaseSecantSolver.java,doSolve,fx,double,0,RET,$ == 0.0
BaseSecantSolver.java,doSolve,fx,double,1,DEF,f1 * $ < 0
BaseSecantSolver.java,doSolve,f1,double,1,DEF,$ * fx < 0
BaseSecantSolver.java,doSolve,x,double,0,ConvergenceException,$ == x1
BaseSecantSolver.java,doSolve,f1,double,0,MathInternalError:RET,FastMath.abs($) <= ftol
BaseSecantSolver.java,doSolve,f1,double,0,RET,$ <= 0
BaseSecantSolver.java,doSolve,f1,double,0,RET,$ >= 0
UnivariateSolverUtils.java,solve,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,solve,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,forceSide,allowedSolution,AllowedSolution,0,RET,$ == AllowedSolution.ANY_SIDE
UnivariateSolverUtils.java,forceSide,fLo,double,0,RET,$ >= 0
UnivariateSolverUtils.java,forceSide,fHi,double,0,RET,$ <= 0
UnivariateSolverUtils.java,forceSide,fLo,double,0,RET,$ <= 0
UnivariateSolverUtils.java,forceSide,fHi,double,0,RET,$ >= 0
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ < fHi
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ >= 0
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ > fHi
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ <= 0
UnivariateSolverUtils.java,bracket,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,bracket,maximumIterations,int,0,NotStrictlyPositiveException,$ <= 0
UnivariateSolverUtils.java,bracket,fa,double,0,NoBracketingException,$ * fb > 0.0
UnivariateSolverUtils.java,bracket,fb,double,0,NoBracketingException,fa * $ > 0.0
UnivariateSolverUtils.java,isBracketing,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,verifyInterval,lower,double,0,NumberIsTooLargeException,$ >= upper
UnivariateSolverUtils.java,verifyBracketing,function,UnivariateFunction,0,NullArgumentException,$ == null
BisectionSolver.java,doSolve,fm,double,1,DEF,$ * fmin > 0
BisectionSolver.java,doSolve,fmin,double,1,DEF,fm * $ > 0
BisectionSolver.java,doSolve,min,double,0,RET,FastMath.abs(max - $) <= absoluteAccuracy
BisectionSolver.java,doSolve,max,double,0,RET,FastMath.abs($ - min) <= absoluteAccuracy
SecantSolver.java,doSolve,f0,double,0,RET,$ == 0.0
SecantSolver.java,doSolve,f1,double,0,RET,$ == 0.0
SecantSolver.java,doSolve,fx,double,0,RET,$ == 0.0
SecantSolver.java,doSolve,f1,double,0,RET,FastMath.abs($) <= ftol
LaguerreSolver.java,doSolve,yInitial,double,0,RET,FastMath.abs($) <= functionValueAccuracy
LaguerreSolver.java,doSolve,yMin,double,0,RET,FastMath.abs($) <= functionValueAccuracy
LaguerreSolver.java,doSolve,yMin,double,0,RET,yInitial * $ < 0
LaguerreSolver.java,doSolve,yInitial,double,0,RET,$ * yMin < 0
LaguerreSolver.java,doSolve,yMax,double,0,RET,FastMath.abs($) <= functionValueAccuracy
LaguerreSolver.java,doSolve,yInitial,double,0,RET,$ * yMax < 0
LaguerreSolver.java,doSolve,yMax,double,0,RET,yInitial * $ < 0
LaguerreSolver.java,solveAll,coefficients,Complex[],0,NullArgumentException,$ == null
LaguerreSolver.java,solveAll,n,int,0,NoDataException,$ == 0
LaguerreSolver.java,solve,coefficients,Complex[],0,NullArgumentException,$ == null
LaguerreSolver.java,solve,n,int,0,NoDataException,$ == 0
LaguerreSolver.java,solve,oldz,Complex,0,RET,(z.subtract($)).abs() <= tolerance
LaguerreSolver.java,solve,z,Complex,0,RET,($.subtract(oldz)).abs() <= tolerance
LaguerreSolver.java,solve,pv,Complex,0,RET,$.abs() <= functionValueAccuracy
NewtonSolver.java,doSolve,x0,double,0,RET,FastMath.abs(x1 - $) <= absoluteAccuracy
NewtonSolver.java,doSolve,x1,double,0,RET,FastMath.abs($ - x0) <= absoluteAccuracy
BracketingNthOrderBrentSolver.java,BracketingNthOrderBrentSolver,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolver.java,BracketingNthOrderBrentSolver,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolver.java,BracketingNthOrderBrentSolver,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolver.java,doSolve,y,double[],1,DEF,$[0] * $[1] < 0
BracketingNthOrderBrentSolver.java,doSolve,y,double[],1,DEF,$[1] * $[2] < 0
BracketingNthOrderBrentSolver.java,doSolve,xA,double,0,MathInternalError:RET,(xB - $) <= xTol
BracketingNthOrderBrentSolver.java,doSolve,xB,double,0,MathInternalError:RET,($ - xA) <= xTol
BracketingNthOrderBrentSolver.java,doSolve,agingA,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolver.java,doSolve,agingB,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolver.java,doSolve,nextX,double,0,DEF,$ > xA
BracketingNthOrderBrentSolver.java,doSolve,nextX,double,0,DEF,$ < xB
BracketingNthOrderBrentSolver.java,doSolve,nbPoints,int,1,DEF,$ > 2
BracketingNthOrderBrentSolver.java,doSolve,start,int,1,DEF,end - $ != nbPoints
BracketingNthOrderBrentSolver.java,doSolve,end,int,1,DEF,$ - start != nbPoints
BracketingNthOrderBrentSolver.java,doSolve,nbPoints,int,0,DEF,$ == x.length
BracketingNthOrderBrentSolver.java,doSolve,yA,double,1,DEF,nextY * $ <= 0
BracketingNthOrderBrentSolver.java,doSolve,nextY,double,1,DEF,$ * yA <= 0
MullerSolver2.java,doSolve,y0,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver2.java,doSolve,y1,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver2.java,doSolve,y0,double,0,NoBracketingException,$ * y1 > 0
MullerSolver2.java,doSolve,y1,double,0,NoBracketingException,y0 * $ > 0
MullerSolver2.java,doSolve,delta,double,1,DEF,$ >= 0.0
MullerSolver2.java,doSolve,denominator,double,1,DEF,$ != 0
MullerSolver2.java,doSolve,oldx,double,0,RET,FastMath.abs(x - $) <= tolerance
MullerSolver2.java,doSolve,x,double,0,RET,FastMath.abs($ - oldx) <= tolerance
MullerSolver2.java,doSolve,y,double,0,RET,FastMath.abs($) <= functionValueAccuracy
MullerSolver.java,doSolve,fMin,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver.java,doSolve,fMax,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver.java,doSolve,fInitial,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver.java,solve,oldx,double,0,RET,FastMath.abs(x - $) <= tolerance
MullerSolver.java,solve,x,double,0,RET,FastMath.abs($ - oldx) <= tolerance
MullerSolver.java,solve,y,double,0,RET,FastMath.abs($) <= functionValueAccuracy
MullerSolver.java,solve,ym,double,1,DEF,FastMath.signum(y0) + FastMath.signum($) == 0.0
MullerSolver.java,solve,y0,double,1,DEF,FastMath.signum($) + FastMath.signum(ym) == 0.0
BrentSolver.java,doSolve,yInitial,double,0,RET,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,doSolve,yMin,double,0,RET,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,doSolve,yMin,double,0,RET,yInitial * $ < 0
BrentSolver.java,doSolve,yInitial,double,0,RET,$ * yMin < 0
BrentSolver.java,doSolve,yMax,double,0,RET,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,doSolve,yInitial,double,0,RET,$ * yMax < 0
BrentSolver.java,doSolve,yMax,double,0,RET,yInitial * $ < 0
BrentSolver.java,brent,m,double,0,RET,FastMath.abs($) <= tol
BrentSolver.java,brent,e,double,1,DEF,FastMath.abs($) < tol
BrentSolver.java,brent,a,double,1,DEF,$ == c
BrentSolver.java,brent,p,double,1,DEF,$ > 0
BrentSolver.java,brent,d,double,1,DEF,FastMath.abs($) > tol
BrentSolver.java,brent,m,double,1,DEF,$ > 0
BrentSolver.java,brent,fb,double,0,DEF,$ > 0
BrentSolver.java,brent,fc,double,0,DEF,$ > 0
BrentSolver.java,brent,fb,double,0,DEF,$ <= 0
BrentSolver.java,brent,fc,double,0,DEF,$ <= 0
RiddersSolver.java,doSolve,y1,double,0,RET,$ == 0
RiddersSolver.java,doSolve,y2,double,0,RET,$ == 0
RiddersSolver.java,doSolve,y3,double,0,RET,FastMath.abs($) <= functionValueAccuracy
RiddersSolver.java,doSolve,oldx,double,0,RET,FastMath.abs(x - $) <= tolerance
RiddersSolver.java,doSolve,x,double,0,RET,FastMath.abs($ - oldx) <= tolerance
RiddersSolver.java,doSolve,y,double,0,RET,FastMath.abs($) <= functionValueAccuracy
RiddersSolver.java,doSolve,correction,double,1,DEF,$ > 0.0
RiddersSolver.java,doSolve,y1,double,1,DEF,FastMath.signum($) + FastMath.signum(y) == 0.0
RiddersSolver.java,doSolve,y,double,1,DEF,FastMath.signum(y1) + FastMath.signum($) == 0.0
RiddersSolver.java,doSolve,y2,double,1,DEF,FastMath.signum($) + FastMath.signum(y) == 0.0
RiddersSolver.java,doSolve,y,double,1,DEF,FastMath.signum(y2) + FastMath.signum($) == 0.0
FunctionUtils.java,value,i,int,0,DEF,$ != j
FunctionUtils.java,sample,n,int,0,NotStrictlyPositiveException,$ <= 0
FunctionUtils.java,sample,min,double,0,NumberIsTooLargeException,$ >= max
PolynomialFunctionLagrangeForm.java,evaluateInternal,dist,double,0,DEF,$ < min_dist
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != j
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,DimensionMismatchException,$.length != y.length
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,NumberIsTooSmallException,$.length < 2
PolynomialFunctionNewtonForm.java,verifyInputArray,a,double[],0,NoDataException,$.length == 0
PolynomialFunctionNewtonForm.java,verifyInputArray,c,double[],0,NoDataException,$.length == 0
PolynomialsUtils.java,equals,key,Object,0,RET,$ == null
PolynomialsUtils.java,equals,key,null,0,RET,$ instanceof JacobiKey
PolynomialsUtils.java,buildPolynomial,degree,int,0,DEF,$ > maxDegree
PolynomialFunction.java,PolynomialFunction,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,evaluate,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,subtract,coefficients,double[],1,DEF,$.length < p.coefficients.length
PolynomialFunction.java,differentiate,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,differentiate,n,int,0,RET,$ == 1
PolynomialFunction.java,toString,coefficients,double[],1,RET,$[0] == 0.0
PolynomialFunction.java,toString,coefficients,double[],0,RET,$.length == 1
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] != 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] != 0
PolynomialFunction.java,toString,s,StringBuilder,1,DEF,$.length() > 0
PolynomialFunction.java,toString,coefficients,double[],1,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,1,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,absAi,double,0,DEF,($ - 1) != 0
PolynomialFunction.java,toString,i,int,0,DEF,$ > 1
PolynomialFunction.java,equals,obj,null,0,RET,$ instanceof PolynomialFunction
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,NullArgumentException,$ == null
PolynomialSplineFunction.java,PolynomialSplineFunction,polynomials,PolynomialFunction[],0,NullArgumentException,$ == null
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,NumberIsTooSmallException,$.length < 2
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,DimensionMismatchException,$.length - 1 != polynomials.length
PolynomialSplineFunction.java,value,i,int,0,DEF,$ < 0
PolynomialSplineFunction.java,value,i,int,0,DEF,$ >= polynomials.length
UnivariatePeriodicInterpolator.java,interpolate,xval,double[],0,NumberIsTooSmallException,$.length < extend
LoessInterpolator.java,LoessInterpolator,bandwidth,double,0,OutOfRangeException,$ < 0
LoessInterpolator.java,LoessInterpolator,bandwidth,double,0,OutOfRangeException,$ > 1
LoessInterpolator.java,LoessInterpolator,robustnessIters,int,0,NotPositiveException,$ < 0
LoessInterpolator.java,smooth,xval,double[],0,DimensionMismatchException,$.length != yval.length
LoessInterpolator.java,smooth,n,int,0,NoDataException,$ == 0
LoessInterpolator.java,smooth,n,int,0,RET,$ == 1
LoessInterpolator.java,smooth,n,int,0,RET,$ == 2
LoessInterpolator.java,smooth,bandwidthInPoints,int,0,NumberIsTooSmallException,$ < 2
LoessInterpolator.java,smooth,i,int,0,DEF,$ > 0
LoessInterpolator.java,smooth,meanXSquared,double,1,DEF,FastMath.sqrt(FastMath.abs($ - meanX * meanX)) < accuracy
LoessInterpolator.java,smooth,meanX,double,1,DEF,FastMath.sqrt(FastMath.abs(meanXSquared - $ * $)) < accuracy
LoessInterpolator.java,smooth,iter,int,0,DEF,$ == robustnessIters
LoessInterpolator.java,smooth,medianResidual,double,0,DEF,FastMath.abs($) < accuracy
LoessInterpolator.java,smooth,arg,double,1,DEF,$ >= 1
LoessInterpolator.java,smooth,xval,double[],0,DimensionMismatchException,$.length != yval.length
LoessInterpolator.java,updateBandwidthInterval,nextRight,int,0,DEF,$ < xval.length
LoessInterpolator.java,tricube,absX,double,0,RET,$ >= 1.0
HermiteInterpolator.java,addSamplePoint,i,int,0,DEF,$ > 1
TricubicSplineInterpolator.java,interpolate,xval,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,yval,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,zval,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,fval,double[][][],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,xval,double[],0,DimensionMismatchException,$.length != fval.length
TricubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$].length != yLen
TricubicSplineInterpolator.java,interpolate,fval,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$][j].length != zLen
TricubicSplineInterpolator.java,interpolate,j,int,0,DimensionMismatchException,fval[i][$].length != zLen
TricubicSplineInterpolator.java,interpolate,fval,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
LinearInterpolator.java,interpolate,x,double[],0,DimensionMismatchException,$.length != y.length
LinearInterpolator.java,interpolate,x,double[],0,NumberIsTooSmallException,$.length < 2
BicubicSplineInterpolator.java,interpolate,xval,double[],0,NoDataException,$.length == 0
BicubicSplineInterpolator.java,interpolate,yval,double[],0,NoDataException,$.length == 0
BicubicSplineInterpolator.java,interpolate,fval,double[][],0,NoDataException,$.length == 0
BicubicSplineInterpolator.java,interpolate,xval,double[],0,DimensionMismatchException,$.length != fval.length
BicubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$].length != yLen
BicubicSplineInterpolator.java,interpolate,fval,double[][],0,DimensionMismatchException,$[i].length != yLen
SplineInterpolator.java,interpolate,x,double[],0,DimensionMismatchException,$.length != y.length
SplineInterpolator.java,interpolate,x,double[],0,NumberIsTooSmallException,$.length < 3
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,NoDataException,$ == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,yLen,int,0,NoDataException,$ == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,f,double[][],0,NoDataException,$.length == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,f,double[][],0,NoDataException,$[0].length == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != f.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdX.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdY.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdXdY.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,f,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,f[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,dFdX,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdX[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,dFdY,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdY[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdY[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,d2FdXdY,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,value,i,int,0,OutOfRangeException,$ == -1
BicubicSplineInterpolatingFunction.java,value,j,int,0,OutOfRangeException,$ == -1
BicubicSplineInterpolatingFunction.java,partialDerivative,partialDerivatives,BivariateFunction[][][],0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivative,i,int,0,OutOfRangeException,$ == -1
BicubicSplineInterpolatingFunction.java,partialDerivative,j,int,0,OutOfRangeException,$ == -1
BicubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ < 0
BicubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ > 1
BicubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ < 0
BicubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ > 1
BicubicSplineInterpolatingFunction.java,partialDerivativeX,partialDerivativeX,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeY,partialDerivativeY,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeXX,partialDerivativeXX,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeYY,partialDerivativeYY,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeXY,partialDerivativeXY,BivariateFunction,0,DEF,$ == null
MicrosphereInterpolator.java,MicrosphereInterpolator,exponent,int,0,NotPositiveException,$ < 0
MicrosphereInterpolator.java,MicrosphereInterpolator,elements,int,0,NotStrictlyPositiveException,$ <= 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,NoDataException,$ == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,yLen,int,0,NoDataException,$ == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,z,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,NoDataException,$.length == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,NoDataException,$[0].length == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != f.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdX.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdY.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdXdY.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdXdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdYdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d3FdXdYdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,f[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdX,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdX[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdY,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdY[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdY[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdY,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdYdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdYdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d3FdXdYdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d3FdXdYdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,f[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,f[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdX,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdX[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,dFdX[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdY,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdY[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,dFdY[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,dFdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdY[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d2FdXdY[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdY,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d2FdXdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdYdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdYdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d2FdYdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d3FdXdYdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d3FdXdYdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d3FdXdYdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,value,i,int,0,OutOfRangeException,$ == -1
TricubicSplineInterpolatingFunction.java,value,j,int,0,OutOfRangeException,$ == -1
TricubicSplineInterpolatingFunction.java,value,k,int,0,OutOfRangeException,$ == -1
TricubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ < 0
TricubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ > 1
TricubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ < 0
TricubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ > 1
TricubicSplineInterpolatingFunction.java,value,z,double,0,OutOfRangeException,$ < 0
TricubicSplineInterpolatingFunction.java,value,z,double,0,OutOfRangeException,$ > 1
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,xval,double[],0,NoDataException,$.length == 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,yval,double[],0,NoDataException,$.length == 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,fval,double[][],0,NoDataException,$.length == 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,xval,double[],0,DimensionMismatchException,$.length != fval.length
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$].length != yLen
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,fval,double[][],0,DimensionMismatchException,$[i].length != yLen
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,NullArgumentException,$ == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,yval,double[],0,NullArgumentException,$ == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,NoDataException,$.length == 0
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,DimensionMismatchException,$.length != yval.length
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,NullArgumentException,$[0] == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xvalI,double[],0,NullArgumentException,$ == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xvalI,double[],0,DimensionMismatchException,$.length != dimension
MicrosphereInterpolatingFunction.java,value,sd,Entry<RealVector,Double>,0,DEF,$ != null
LegendreGaussIntegrator.java,doIntegrate,delta,double,0,RET,$ <= limit
BaseAbstractUnivariateIntegrator.java,BaseAbstractUnivariateIntegrator,minimalIterationCount,int,0,NotStrictlyPositiveException,$ <= 0
BaseAbstractUnivariateIntegrator.java,BaseAbstractUnivariateIntegrator,maximalIterationCount,int,0,NumberIsTooSmallException,$ <= minimalIterationCount
TrapezoidIntegrator.java,TrapezoidIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > TRAPEZOID_MAX_ITERATIONS_COUNT
TrapezoidIntegrator.java,TrapezoidIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > TRAPEZOID_MAX_ITERATIONS_COUNT
TrapezoidIntegrator.java,stage,n,int,1,RET,$ == 0
TrapezoidIntegrator.java,doIntegrate,delta,double,0,RET,$ <= rLimit
LegendreHighPrecisionRuleFactory.java,computeRule,numberOfPoints,int,0,RET,$ == 1
LegendreHighPrecisionRuleFactory.java,computeRule,pa,BigDecimal,1,DEF,$.signum() * pc.signum() <= 0
LegendreHighPrecisionRuleFactory.java,computeRule,pc,BigDecimal,1,DEF,pa.signum() * $.signum() <= 0
LegendreHighPrecisionRuleFactory.java,computeRule,numberOfPoints,int,0,DEF,$ % 2 == 1
GaussIntegrator.java,GaussIntegrator,points,double[],0,DimensionMismatchException,$.length != weights.length
BaseRuleFactory.java,getRule,cached,Pair<double[],double[]>,0,DEF,$ == null
BaseRuleFactory.java,getRuleInternal,rule,Pair<T[],T[]>,0,RET,$ == null
LegendreRuleFactory.java,computeRule,numberOfPoints,int,0,RET,$ == 1
LegendreRuleFactory.java,computeRule,pa,double,1,DEF,$ * pc <= 0
LegendreRuleFactory.java,computeRule,pc,double,1,DEF,pa * $ <= 0
LegendreRuleFactory.java,computeRule,numberOfPoints,int,0,DEF,$ % 2 == 1
SimpsonIntegrator.java,SimpsonIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > SIMPSON_MAX_ITERATIONS_COUNT
SimpsonIntegrator.java,SimpsonIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > SIMPSON_MAX_ITERATIONS_COUNT
SimpsonIntegrator.java,doIntegrate,delta,double,0,RET,$ <= rLimit
RombergIntegrator.java,RombergIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > ROMBERG_MAX_ITERATIONS_COUNT
RombergIntegrator.java,RombergIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > ROMBERG_MAX_ITERATIONS_COUNT
RombergIntegrator.java,doIntegrate,delta,double,0,RET,$ <= rLimit
IterativeLegendreGaussIntegrator.java,doIntegrate,delta,double,0,RET,$ <= limit
DerivativeStructure.java,DerivativeStructure,index,int,0,NumberIsTooLargeException,$ >= variables
DerivativeStructure.java,DerivativeStructure,order,int,0,DEF,$ > 0
DerivativeStructure.java,abs,data,double[],1,RET,Double.doubleToLongBits($[0]) < 0
DerivativeStructure.java,copySign,m,long,0,RET,$ >= 0
DerivativeStructure.java,copySign,s,long,0,RET,$ >= 0
DerivativeStructure.java,copySign,m,long,0,RET,$ < 0
DerivativeStructure.java,copySign,s,long,0,RET,$ < 0
DSCompiler.java,getCompiler,cache,DSCompiler[][],0,RET,$ != null
DSCompiler.java,getCompiler,cache,DSCompiler[][],0,RET,$.length > parameters
DSCompiler.java,getCompiler,cache,DSCompiler[][],0,RET,$[parameters].length > order
DSCompiler.java,getCompiler,parameters,int,0,RET,cache[$].length > order
DSCompiler.java,getCompiler,cache,DSCompiler[][],0,DEF,$ != null
DSCompiler.java,getCompiler,p,int,0,DEF,newCache[$][o] == null
DSCompiler.java,getCompiler,newCache,DSCompiler[][],0,DEF,$[p][o] == null
DSCompiler.java,getCompiler,o,int,0,DEF,newCache[p][$] == null
DSCompiler.java,compileSizes,parameters,int,1,DEF,$ == 0
DSCompiler.java,compileDerivativesIndirection,parameters,int,0,RET,$ == 0
DSCompiler.java,compileDerivativesIndirection,order,int,0,RET,$ == 0
DSCompiler.java,compileLowerIndirection,parameters,int,0,RET,$ == 0
DSCompiler.java,compileLowerIndirection,order,int,0,RET,$ <= 1
DSCompiler.java,compileMultiplicationIndirection,parameters,int,0,RET,$ == 0
DSCompiler.java,compileMultiplicationIndirection,order,int,0,RET,$ == 0
DSCompiler.java,compileMultiplicationIndirection,termJ,int[],0,DEF,$[0] > 0
DSCompiler.java,compileCompositionIndirection,parameters,int,0,RET,$ == 0
DSCompiler.java,compileCompositionIndirection,order,int,0,RET,$ == 0
DSCompiler.java,compileCompositionIndirection,j,int,0,DEF,$ == l
DSCompiler.java,compileCompositionIndirection,termJ,int[],0,DEF,$[0] > 0
DSCompiler.java,getPartialDerivativeIndex,ordersSum,int,0,NumberIsTooLargeException,$ > order
DSCompiler.java,pow,n,int,0,RET,$ == 0
DSCompiler.java,pow,n,int,1,DEF,$ > 0
DSCompiler.java,rootN,n,int,1,DEF,$ == 2
DSCompiler.java,rootN,n,int,1,DEF,$ == 3
DSCompiler.java,log,order,int,0,DEF,$ > 0
DSCompiler.java,log1p,order,int,0,DEF,$ > 0
DSCompiler.java,cos,order,int,0,DEF,$ > 0
DSCompiler.java,sin,order,int,0,DEF,$ > 0
DSCompiler.java,tan,order,int,0,DEF,$ > 0
DSCompiler.java,tan,k,int,1,DEF,$ > 2
DSCompiler.java,tan,k,int,0,DEF,$ == 2
DSCompiler.java,tan,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,acos,order,int,0,DEF,$ > 0
DSCompiler.java,acos,k,int,1,DEF,$ > 2
DSCompiler.java,acos,k,int,0,DEF,$ == 2
DSCompiler.java,acos,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,asin,order,int,0,DEF,$ > 0
DSCompiler.java,asin,k,int,1,DEF,$ > 2
DSCompiler.java,asin,k,int,0,DEF,$ == 2
DSCompiler.java,asin,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,atan,order,int,0,DEF,$ > 0
DSCompiler.java,atan,k,int,1,DEF,$ > 2
DSCompiler.java,atan,k,int,0,DEF,$ == 2
DSCompiler.java,atan,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,atan2,xOffset,int,1,DEF,x[$] >= 0
DSCompiler.java,atan2,x,double[],1,DEF,$[xOffset] >= 0
DSCompiler.java,cosh,order,int,0,DEF,$ > 0
DSCompiler.java,sinh,order,int,0,DEF,$ > 0
DSCompiler.java,tanh,order,int,0,DEF,$ > 0
DSCompiler.java,tanh,k,int,1,DEF,$ > 2
DSCompiler.java,tanh,k,int,0,DEF,$ == 2
DSCompiler.java,tanh,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,acosh,order,int,0,DEF,$ > 0
DSCompiler.java,acosh,k,int,1,DEF,$ > 2
DSCompiler.java,acosh,k,int,0,DEF,$ == 2
DSCompiler.java,acosh,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,asinh,order,int,0,DEF,$ > 0
DSCompiler.java,asinh,k,int,1,DEF,$ > 2
DSCompiler.java,asinh,k,int,0,DEF,$ == 2
DSCompiler.java,asinh,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,atanh,order,int,0,DEF,$ > 0
DSCompiler.java,atanh,k,int,1,DEF,$ > 2
DSCompiler.java,atanh,k,int,0,DEF,$ == 2
DSCompiler.java,atanh,n,int,0,DEF,($ & 0x1) == 0
DSCompiler.java,taylor,orders,int[],0,DEF,$[k] > 0
DSCompiler.java,taylor,k,int,0,DEF,orders[$] > 0
DSCompiler.java,checkCompatibility,parameters,int,0,DimensionMismatchException,$ != compiler.parameters
DSCompiler.java,checkCompatibility,order,int,0,DimensionMismatchException,$ != compiler.order
ComplexFormat.java,ComplexFormat,imaginaryCharacter,String,0,NullArgumentException,$ == null
ComplexFormat.java,ComplexFormat,imaginaryCharacter,String,0,NoDataException,$.length() == 0
ComplexFormat.java,ComplexFormat,imaginaryFormat,NumberFormat,0,NullArgumentException,$ == null
ComplexFormat.java,ComplexFormat,realFormat,NumberFormat,0,NullArgumentException,$ == null
ComplexFormat.java,format,im,double,1,DEF,$ < 0.0
ComplexFormat.java,format,im,double,0,DEF,$ > 0.0
ComplexFormat.java,formatImaginary,absIm,double,0,MathInternalError,$ < 0
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Complex
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Number
ComplexFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
ComplexFormat.java,parse,re,Number,0,RET,$ == null
ComplexFormat.java,parse,im,Number,0,RET,$ == null
RootsOfUnity.java,isCounterClockWise,omegaCount,int,0,MathIllegalStateException,$ == 0
RootsOfUnity.java,computeRoots,n,int,0,ZeroException,$ == 0
RootsOfUnity.java,computeRoots,absN,int,0,RET,$ == omegaCount
RootsOfUnity.java,getReal,omegaCount,int,0,MathIllegalStateException,$ == 0
RootsOfUnity.java,getReal,k,int,0,OutOfRangeException,$ < 0
RootsOfUnity.java,getReal,k,int,0,OutOfRangeException,$ >= omegaCount
RootsOfUnity.java,getImaginary,omegaCount,int,0,MathIllegalStateException,$ == 0
RootsOfUnity.java,getImaginary,k,int,0,OutOfRangeException,$ < 0
RootsOfUnity.java,getImaginary,k,int,0,OutOfRangeException,$ >= omegaCount
Complex.java,abs,imaginary,double,0,RET,$ == 0.0
Complex.java,abs,real,double,0,RET,$ == 0.0
Complex.java,divide,c,double,0,RET,$ == 0.0
Complex.java,divide,d,double,0,RET,$ == 0.0
Complex.java,divide,divisor,double,0,RET,$ == 0d
Complex.java,reciprocal,real,double,0,RET,$ == 0.0
Complex.java,reciprocal,imaginary,double,0,RET,$ == 0.0
Complex.java,equals,other,null,0,RET,$ instanceof Complex
Complex.java,sqrt,real,double,0,RET,$ == 0.0
Complex.java,sqrt,imaginary,double,0,RET,$ == 0.0
Complex.java,sqrt,real,double,1,RET,$ >= 0.0
Complex.java,tan,imaginary,double,0,RET,$ > 20.0
Complex.java,tan,imaginary,double,0,RET,$ < -20.0
Complex.java,tanh,real,double,0,RET,$ > 20.0
Complex.java,tanh,real,double,0,RET,$ < -20.0
Complex.java,nthRoot,n,int,0,NotPositiveException,$ <= 0
ComplexUtils.java,polar2Complex,r,double,0,MathIllegalArgumentException,$ < 0
DescriptiveStatistics.java,DescriptiveStatistics,initialDoubleArray,double[],0,DEF,$ != null
DescriptiveStatistics.java,addValue,windowSize,int,1,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,MathIllegalArgumentException,$ < 1
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,MathIllegalArgumentException,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,getPercentile,percentileImpl,null,1,DEF,$ instanceof Percentile
AbstractStorelessUnivariateStatistic.java,evaluate,values,double[],0,NullArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,incrementAll,values,double[],0,NullArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,equals,object,Object,0,RET,$ instanceof AbstractStorelessUnivariateStatistic == false
AbstractStorelessUnivariateStatistic.java,equals,object,null,0,RET,$ instanceof AbstractStorelessUnivariateStatistic
StatisticalSummaryValues.java,equals,object,Object,0,RET,$ instanceof StatisticalSummaryValues == false
StatisticalSummaryValues.java,equals,object,null,0,RET,$ instanceof StatisticalSummaryValues
FirstMoment.java,increment,n,long,0,DEF,$ == 0
GeometricMean.java,getResult,sumOfLogs,StorelessUnivariateStatistic,1,RET,$.getN() > 0
ThirdMoment.java,increment,n,long,0,DEF,$ < 1
Kurtosis.java,getResult,moment,FourthMoment,0,DEF,$.getN() > 3
Kurtosis.java,getResult,moment,FirstMoment,1,DEF,$.n <= 3
Kurtosis.java,getResult,variance,double,1,DEF,$ < 10E-20
Kurtosis.java,evaluate,length,int,0,DEF,$ > 3
Skewness.java,getResult,moment,FirstMoment,0,RET,$.n < 3
Skewness.java,getResult,variance,double,1,RET,$ < 10E-20
Skewness.java,evaluate,length,int,0,DEF,$ > 2
FourthMoment.java,increment,n,long,0,DEF,$ < 1
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 0
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 1
Variance.java,evaluate,values,double[],0,NullArgumentException,$ == null
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
VectorialCovariance.java,increment,v,double[],0,DimensionMismatchException,$.length != sums.length
VectorialCovariance.java,getResult,n,long,0,DEF,$ > 1
VectorialCovariance.java,equals,obj,null,0,RET,$ instanceof VectorialCovariance
VectorialCovariance.java,equals,isBiasCorrected,boolean,0,RET,$ != other.isBiasCorrected
VectorialCovariance.java,equals,n,long,0,RET,$ != other.n
SecondMoment.java,increment,n,long,0,DEF,$ < 1
VectorialMean.java,increment,v,double[],0,DimensionMismatchException,$.length != means.length
VectorialMean.java,equals,obj,null,0,RET,$ instanceof VectorialMean
SemiVariance.java,evaluate,values,double[],0,NullArgumentException,$ == null
SemiVariance.java,evaluate,values,double[],1,RET,$.length == 0
SemiVariance.java,evaluate,values,double[],1,RET,$.length == 1
SemiVariance.java,evaluate,values,double[],0,DEF,($[i] > cutoff) == booleanDirection
SemiVariance.java,evaluate,i,int,0,DEF,(values[$] > cutoff) == booleanDirection
SemiVariance.java,evaluate,cutoff,double,0,DEF,(values[i] > $) == booleanDirection
SemiVariance.java,evaluate,values,double[],0,DEF,$[i] > cutoff
SemiVariance.java,evaluate,i,int,0,DEF,values[$] > cutoff
Percentile.java,setData,values,double[],1,DEF,$ == null
Percentile.java,setData,values,double[],1,DEF,$ == null
Percentile.java,evaluate,p,double,0,OutOfRangeException,$ > 100
Percentile.java,evaluate,p,double,0,OutOfRangeException,$ <= 0
Percentile.java,evaluate,length,int,0,RET,$ == 0
Percentile.java,evaluate,length,int,0,RET,$ == 1
Percentile.java,evaluate,pos,double,0,RET,$ < 1
Percentile.java,evaluate,pos,double,0,RET,$ >= n
Percentile.java,select,node,int,1,DEF,$ < pivotsHeap.length
Percentile.java,select,node,int,1,DEF,pivotsHeap[$] >= 0
Percentile.java,select,pivotsHeap,int[],1,DEF,$[node] >= 0
Percentile.java,select,node,int,0,DEF,$ < pivotsHeap.length
Percentile.java,select,k,int,1,RET,$ == pivot
Percentile.java,select,k,int,1,DEF,$ < pivot
Percentile.java,medianOf3,wBegin,double,1,RET,$ < wMiddle
Percentile.java,medianOf3,wMiddle,double,1,RET,$ < wEnd
Percentile.java,medianOf3,wBegin,double,1,RET,$ < wEnd
Percentile.java,partition,i,int,0,DEF,$ < j
Percentile.java,partition,i,int,0,DEF,$ >= end
Percentile.java,partition,work,double[],0,DEF,$[i] > value
Percentile.java,partition,i,int,0,DEF,work[$] > value
Percentile.java,setQuantile,p,double,0,OutOfRangeException,$ <= 0
Percentile.java,setQuantile,p,double,0,OutOfRangeException,$ > 100
Percentile.java,copy,source,Percentile,0,DEF,$.cachedPivots != null
Max.java,increment,d,double,0,DEF,$ > value
Min.java,increment,d,double,0,DEF,$ < value
AbstractUnivariateStatistic.java,test,values,double[],0,NullArgumentException,$ == null
AbstractUnivariateStatistic.java,test,begin,int,0,NotPositiveException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,NotPositiveException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,NumberIsTooLargeException,begin + $ > values.length
AbstractUnivariateStatistic.java,test,begin,int,0,NumberIsTooLargeException,$ + length > values.length
AbstractUnivariateStatistic.java,test,length,int,0,RET,$ == 0
AbstractUnivariateStatistic.java,test,weights,double[],0,NullArgumentException,$ == null
AbstractUnivariateStatistic.java,test,weights,double[],0,DimensionMismatchException,$.length != values.length
AbstractUnivariateStatistic.java,test,i,int,0,MathIllegalArgumentException,weights[$] < 0
AbstractUnivariateStatistic.java,test,weights,double[],0,MathIllegalArgumentException,$[i] < 0
AbstractUnivariateStatistic.java,test,i,int,0,DEF,weights[$] > 0.0
AbstractUnivariateStatistic.java,test,weights,double[],0,DEF,$[i] > 0.0
MultivariateSummaryStatistics.java,append,i,int,0,DEF,$ > 0
MultivariateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof MultivariateSummaryStatistics == false
MultivariateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof MultivariateSummaryStatistics
MultivariateSummaryStatistics.java,checkEmpty,n,long,0,MathIllegalStateException,$ > 0
MultivariateSummaryStatistics.java,checkDimension,dimension,int,0,DimensionMismatchException,$ != k
AggregateSummaryStatistics.java,aggregate,statistics,Collection<SummaryStatistics>,0,RET,$ == null
AggregateSummaryStatistics.java,aggregate,current,SummaryStatistics,0,DEF,$.getMin() < min
AggregateSummaryStatistics.java,aggregate,current,SummaryStatistics,0,DEF,$.getMax() > max
AggregateSummaryStatistics.java,aggregate,n,long,1,DEF,$ == 0
AggregateSummaryStatistics.java,aggregate,n,long,1,DEF,$ == 1
AggregateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof AggregatingSummaryStatistics == false
AggregateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof AggregatingSummaryStatistics
SummaryStatistics.java,addValue,meanImpl,StorelessUnivariateStatistic,0,DEF,$ != mean
SummaryStatistics.java,addValue,varianceImpl,StorelessUnivariateStatistic,0,DEF,$ != variance
SummaryStatistics.java,addValue,geoMeanImpl,StorelessUnivariateStatistic,0,DEF,$ != geoMean
SummaryStatistics.java,clear,meanImpl,StorelessUnivariateStatistic,0,DEF,$ != mean
SummaryStatistics.java,clear,varianceImpl,StorelessUnivariateStatistic,0,DEF,$ != variance
SummaryStatistics.java,equals,object,Object,0,RET,$ instanceof SummaryStatistics == false
SummaryStatistics.java,equals,object,null,0,RET,$ instanceof SummaryStatistics
SummaryStatistics.java,checkEmpty,n,long,0,MathIllegalStateException,$ > 0
SummaryStatistics.java,copy,source.meanImpl,null,1,DEF,$ instanceof Mean
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.geoMean == source.geoMeanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.max == source.maxImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.mean == source.meanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.min == source.minImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sum == source.sumImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.variance == source.varianceImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumLog == source.sumLogImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumsq == source.sumsqImpl
MannWhitneyUTest.java,ensureDataConformance,x,double[],0,NullArgumentException,$ == null
MannWhitneyUTest.java,ensureDataConformance,y,double[],0,NullArgumentException,$ == null
MannWhitneyUTest.java,ensureDataConformance,x,double[],0,NoDataException,$.length == 0
MannWhitneyUTest.java,ensureDataConformance,y,double[],0,NoDataException,$.length == 0
ChiSquareTest.java,chiSquare,expected,double[],0,DimensionMismatchException,$.length < 2
ChiSquareTest.java,chiSquare,expected,double[],0,DimensionMismatchException,$.length != observed.length
ChiSquareTest.java,chiSquare,sumObserved,double,0,DEF,FastMath.abs(sumExpected - $) > 10E-6
ChiSquareTest.java,chiSquare,sumExpected,double,0,DEF,FastMath.abs($ - sumObserved) > 10E-6
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ <= 0
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ > 0.5
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ <= 0
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ > 0.5
ChiSquareTest.java,chiSquareDataSetsComparison,observed1,long[],0,DimensionMismatchException,$.length < 2
ChiSquareTest.java,chiSquareDataSetsComparison,observed1,long[],0,DimensionMismatchException,$.length != observed2.length
ChiSquareTest.java,chiSquareDataSetsComparison,countSum1,long,0,ZeroException,$ == 0
ChiSquareTest.java,chiSquareDataSetsComparison,countSum2,long,0,ZeroException,$ == 0
ChiSquareTest.java,chiSquareDataSetsComparison,i,int,1,ZeroException,observed1[$] == 0
ChiSquareTest.java,chiSquareDataSetsComparison,observed1,long[],1,ZeroException,$[i] == 0
ChiSquareTest.java,chiSquareDataSetsComparison,observed2,long[],1,ZeroException,$[i] == 0
ChiSquareTest.java,chiSquareDataSetsComparison,i,int,1,ZeroException,observed2[$] == 0
ChiSquareTest.java,chiSquareTestDataSetsComparison,alpha,double,0,OutOfRangeException,$ <= 0
ChiSquareTest.java,chiSquareTestDataSetsComparison,alpha,double,0,OutOfRangeException,$ > 0.5
ChiSquareTest.java,checkArray,in,long[][],0,DimensionMismatchException,$.length < 2
ChiSquareTest.java,checkArray,in,long[][],0,DimensionMismatchException,$[0].length < 2
ChiSquareTest.java,checkPositive,in,double[],0,NotStrictlyPositiveException,$[i] <= 0
ChiSquareTest.java,checkPositive,i,int,0,NotStrictlyPositiveException,in[$] <= 0
ChiSquareTest.java,checkNonNegative,in,long[],0,NotPositiveException,$[i] < 0
ChiSquareTest.java,checkNonNegative,i,int,0,NotPositiveException,in[$] < 0
ChiSquareTest.java,checkNonNegative,in,long[][],0,NotPositiveException,$[i][j] < 0
ChiSquareTest.java,checkNonNegative,i,int,0,NotPositiveException,in[$][j] < 0
ChiSquareTest.java,checkNonNegative,j,int,0,NotPositiveException,in[i][$] < 0
TTest.java,checkSignificanceLevel,alpha,double,0,OutOfRangeException,$ <= 0
TTest.java,checkSignificanceLevel,alpha,double,0,OutOfRangeException,$ > 0.5
TTest.java,checkSampleData,data,double[],0,NullArgumentException,$ == null
TTest.java,checkSampleData,data,double[],0,NumberIsTooSmallException,$.length < 2
TTest.java,checkSampleData,stat,StatisticalSummary,0,NullArgumentException,$ == null
TTest.java,checkSampleData,stat,StatisticalSummary,0,NumberIsTooSmallException,$.getN() < 2
OneWayAnova.java,anovaTest,alpha,double,0,OutOfRangeException,$ <= 0
OneWayAnova.java,anovaTest,alpha,double,0,OutOfRangeException,$ > 0.5
OneWayAnova.java,anovaStats,categoryData,Collection<double[]>,0,NullArgumentException,$ == null
OneWayAnova.java,anovaStats,categoryData,Collection<double[]>,0,DimensionMismatchException,$.size() < 2
OneWayAnova.java,anovaStats,array,double[],0,DimensionMismatchException,$.length <= 1
WilcoxonSignedRankTest.java,ensureDataConformance,x,double[],0,NullArgumentException,$ == null
WilcoxonSignedRankTest.java,ensureDataConformance,y,double[],0,NullArgumentException,$ == null
WilcoxonSignedRankTest.java,ensureDataConformance,x,double[],0,NoDataException,$.length == 0
WilcoxonSignedRankTest.java,ensureDataConformance,y,double[],0,NoDataException,$.length == 0
WilcoxonSignedRankTest.java,ensureDataConformance,y,double[],0,DimensionMismatchException,$.length != x.length
WilcoxonSignedRankTest.java,calculateAbsoluteDifferences,z,double[],0,NullArgumentException,$ == null
WilcoxonSignedRankTest.java,calculateAbsoluteDifferences,z,double[],0,NoDataException,$.length == 0
WilcoxonSignedRankTest.java,wilcoxonSignedRank,i,int,0,DEF,z[$] > 0
WilcoxonSignedRankTest.java,wilcoxonSignedRank,z,double[],0,DEF,$[i] > 0
WilcoxonSignedRankTest.java,calculateExactPValue,i,int,0,DEF,(($ >> j) & 1) == 1
WilcoxonSignedRankTest.java,calculateExactPValue,j,int,0,DEF,((i >> $) & 1) == 1
WilcoxonSignedRankTest.java,calculateExactPValue,rankSum,int,0,DEF,$ >= Wmax
WilcoxonSignedRankTest.java,wilcoxonSignedRankTest,N,int,0,NumberIsTooLargeException,$ > 30
NaturalRanking.java,rank,ranks,IntDoublePair[],1,DEF,Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
NaturalRanking.java,rank,i,int,1,DEF,Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
NaturalRanking.java,rank,tiesTrace,List<Integer>,0,DEF,$.size() > 1
NaturalRanking.java,rank,tiesTrace,List<Integer>,0,DEF,$.size() > 1
NaturalRanking.java,rank,nanStrategy,NaNStrategy,0,DEF,$ == NaNStrategy.FIXED
NaturalRanking.java,restoreNaNs,nanPositions,List<Integer>,0,RET,$.size() == 0
StatUtils.java,sumDifference,n,int,0,DimensionMismatchException,$ != sample2.length
StatUtils.java,sumDifference,n,int,0,NoDataException,$ <= 0
StatUtils.java,varianceDifference,n,int,0,DimensionMismatchException,$ != sample2.length
StatUtils.java,varianceDifference,n,int,0,NumberIsTooSmallException,$ < 2
KMeansPlusPlusClusterer.java,cluster,varianceSum,double,0,DEF,$ <= bestVarianceSum
KMeansPlusPlusClusterer.java,cluster,points,Collection<T>,0,NumberIsTooSmallException,$.size() < k
KMeansPlusPlusClusterer.java,cluster,changes,int,0,RET,$ == 0
KMeansPlusPlusClusterer.java,chooseInitialCenters,i,int,0,DEF,$ != firstPointIndex
KMeansPlusPlusClusterer.java,chooseInitialCenters,sum,double,0,DEF,$ >= r
KMeansPlusPlusClusterer.java,chooseInitialCenters,nextPointIndex,int,0,DEF,$ == -1
KMeansPlusPlusClusterer.java,chooseInitialCenters,nextPointIndex,int,1,DEF,$ >= 0
KMeansPlusPlusClusterer.java,chooseInitialCenters,resultSet,List<Cluster<T>>,0,DEF,$.size() < k
KMeansPlusPlusClusterer.java,getPointFromLargestVarianceCluster,variance,double,0,DEF,$ > maxVariance
KMeansPlusPlusClusterer.java,getPointFromLargestVarianceCluster,selected,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getPointFromLargestNumberCluster,number,int,0,DEF,$ > maxNumber
KMeansPlusPlusClusterer.java,getPointFromLargestNumberCluster,selected,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getFarthestPoint,distance,double,0,DEF,$ > maxDistance
KMeansPlusPlusClusterer.java,getFarthestPoint,selectedCluster,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getNearestCluster,distance,double,0,DEF,$ < minDistance
EuclideanIntegerPoint.java,equals,other,null,0,RET,$ instanceof EuclideanIntegerPoint
EuclideanIntegerPoint.java,equals,point,int[],0,RET,$.length != otherPoint.length
PearsonsCorrelation.java,PearsonsCorrelation,covarianceMatrix,RealMatrix,0,NullArgumentException,$ == null
PearsonsCorrelation.java,getCorrelationPValues,i,int,1,DEF,$ == j
PearsonsCorrelation.java,correlation,xArray,double[],1,DimensionMismatchException,$.length != yArray.length
PearsonsCorrelation.java,correlation,xArray,double[],1,MathIllegalArgumentException,$.length < 2
PearsonsCorrelation.java,checkSufficientData,nRows,int,0,MathIllegalArgumentException,$ < 2
PearsonsCorrelation.java,checkSufficientData,nCols,int,0,MathIllegalArgumentException,$ < 2
StorelessBivariateCovariance.java,getResult,n,double,0,NumberIsTooSmallException,$ < 2
SpearmansCorrelation.java,correlation,xArray,double[],1,DimensionMismatchException,$.length != yArray.length
SpearmansCorrelation.java,correlation,xArray,double[],1,MathIllegalArgumentException,$.length < 2
Covariance.java,covariance,length,int,1,MathIllegalArgumentException,$ != yArray.length
Covariance.java,covariance,length,int,1,MathIllegalArgumentException,$ < 2
Covariance.java,checkSufficientData,nRows,int,0,MathIllegalArgumentException,$ < 2
Covariance.java,checkSufficientData,nCols,int,0,MathIllegalArgumentException,$ < 2
StorelessCovariance.java,increment,length,int,0,DimensionMismatchException,$ != dimension
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ == j
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ < p
MillerUpdatingRegression.java,MillerUpdatingRegression,numberOfVariables,int,0,ModelSpecificationException,$ < 1
MillerUpdatingRegression.java,MillerUpdatingRegression,errorTolerance,double,1,DEF,$ > 0
MillerUpdatingRegression.java,addObservation,x,double[],0,ModelSpecificationException,$.length != nvars
MillerUpdatingRegression.java,addObservation,x,double[],0,ModelSpecificationException,$.length + 1 != nvars
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$ == null
MillerUpdatingRegression.java,addObservations,y,double[],0,ModelSpecificationException,$ == null
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$.length != y.length
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$.length == 0
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$[0].length + 1 > x.length
MillerUpdatingRegression.java,include,w,double,0,RET,$ == 0.0
MillerUpdatingRegression.java,include,xi,double,0,DEF,$ == 0.0
MillerUpdatingRegression.java,include,di,double,1,DEF,$ != 0.0
MillerUpdatingRegression.java,include,tmp,double,0,DEF,FastMath.abs($) > Precision.EPSILON
MillerUpdatingRegression.java,include,di,double,1,DEF,$ != 0.0
MillerUpdatingRegression.java,include,di,double,1,DEF,$ != 0.0
MillerUpdatingRegression.java,smartAdd,_a,double,1,RET,$ > _b
MillerUpdatingRegression.java,smartAdd,_b,double,0,RET,$ > eps
MillerUpdatingRegression.java,smartAdd,_a,double,0,RET,$ > eps
MillerUpdatingRegression.java,regcf,nreq,int,0,ModelSpecificationException,$ < 1
MillerUpdatingRegression.java,singcheck,r,double[],0,DEF,Math.abs($[pos]) * work_sing[row] < temp
MillerUpdatingRegression.java,singcheck,work_sing,double[],0,DEF,Math.abs(r[pos]) * $[row] < temp
MillerUpdatingRegression.java,singcheck,pos,int,0,DEF,Math.abs(r[$]) * work_sing[row] < temp
MillerUpdatingRegression.java,singcheck,row,int,0,DEF,Math.abs(r[pos]) * work_sing[$] < temp
MillerUpdatingRegression.java,singcheck,col,int,0,DEF,work_sing[$] < temp
MillerUpdatingRegression.java,singcheck,work_sing,double[],0,DEF,$[col] < temp
MillerUpdatingRegression.java,cov,row,int,1,DEF,$ == col
MillerUpdatingRegression.java,getPartialCorrelations,in,int,0,RET,$ < -1
MillerUpdatingRegression.java,getPartialCorrelations,in,int,0,RET,$ >= nvars
MillerUpdatingRegression.java,getPartialCorrelations,d,double[],0,DEF,$[in] > 0.0
MillerUpdatingRegression.java,getPartialCorrelations,in,int,0,DEF,d[$] > 0.0
MillerUpdatingRegression.java,getPartialCorrelations,sumxx,double,1,DEF,$ > 0.0
MillerUpdatingRegression.java,getPartialCorrelations,sumyy,double,0,DEF,$ > 0.0
MillerUpdatingRegression.java,vmove,from,int,0,RET,$ == to
MillerUpdatingRegression.java,vmove,from,int,1,DEF,$ < to
MillerUpdatingRegression.java,vmove,m,int,0,DEF,$ > 0
MillerUpdatingRegression.java,reorderRegressors,list,int[],0,RET,$.length < 1
MillerUpdatingRegression.java,reorderRegressors,i,int,0,RET,$ > next
MillerUpdatingRegression.java,getDiagonalOfHatMatrix,row_data,double[],0,RET,$.length > nvars
MillerUpdatingRegression.java,regress,i,int,0,DEF,this.vorder[$] != i
MillerUpdatingRegression.java,regress,j,int,0,DEF,this.vorder[$] == i
MillerUpdatingRegression.java,regress,_i,int,1,DEF,$ > _j
MillerUpdatingRegression.java,regress,i,int,0,DEF,$ > 0
MillerUpdatingRegression.java,regress,iExclude,int,1,DEF,$ > 0
MillerUpdatingRegression.java,regress,variablesToInclude,int[],0,DEF,$[i] > -1
MillerUpdatingRegression.java,regress,i,int,0,DEF,variablesToInclude[$] > -1
MillerUpdatingRegression.java,regress,_i,int,1,DEF,$ > _j
AbstractMultipleLinearRegression.java,newSampleData,data,double[],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,newSampleData,nobs,int,0,NumberIsTooSmallException,$ <= nvars
AbstractMultipleLinearRegression.java,newYSampleData,y,double[],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,newYSampleData,y,double[],0,NoDataException,$.length == 0
AbstractMultipleLinearRegression.java,newXSampleData,x,double[][],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,newXSampleData,x,double[][],0,NoDataException,$.length == 0
AbstractMultipleLinearRegression.java,newXSampleData,x,double[][],0,DimensionMismatchException,$[i].length != nVars
AbstractMultipleLinearRegression.java,newXSampleData,i,int,0,DimensionMismatchException,x[$].length != nVars
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,y,double[],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,DimensionMismatchException,$.length != y.length
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,NoDataException,$.length == 0
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,MathIllegalArgumentException,$[0].length + 1 > x.length
AbstractMultipleLinearRegression.java,validateCovarianceData,x,double[][],0,DimensionMismatchException,$.length != covariance.length
AbstractMultipleLinearRegression.java,validateCovarianceData,covariance,double[][],0,NonSquareMatrixException,$.length > 0
SimpleRegression.java,addData,n,long,1,DEF,$ == 0
SimpleRegression.java,removeData,n,long,0,DEF,$ > 0
SimpleRegression.java,addData,data,double[][],0,ModelSpecificationException,$[i].length < 2
SimpleRegression.java,addData,i,int,0,ModelSpecificationException,data[$].length < 2
SimpleRegression.java,addObservation,x,double[],0,ModelSpecificationException,$ == null
SimpleRegression.java,addObservation,x,double[],0,ModelSpecificationException,$.length == 0
SimpleRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$ == null
SimpleRegression.java,addObservations,y,double[],0,ModelSpecificationException,$ == null
SimpleRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$.length != y.length
SimpleRegression.java,addObservations,x,double[][],0,DEF,$[i] == null
SimpleRegression.java,addObservations,i,int,0,DEF,x[$] == null
SimpleRegression.java,addObservations,x,double[][],0,DEF,$[i].length == 0
SimpleRegression.java,addObservations,i,int,0,DEF,x[$].length == 0
SimpleRegression.java,getSlope,n,long,0,RET,$ < 2
SimpleRegression.java,getTotalSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getXSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getMeanSquareError,n,long,0,RET,$ < 3
SimpleRegression.java,getR,b1,double,0,DEF,$ < 0
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,OutOfRangeException,$ >= 1
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,OutOfRangeException,$ <= 0
SimpleRegression.java,regress,n,long,0,NoDataException,$ < 3
SimpleRegression.java,regress,sumXX,double,1,RET,FastMath.abs( $ ) > Precision.SAFE_MIN
SimpleRegression.java,regress,n,long,0,NoDataException,$ < 2
SimpleRegression.java,regress,variablesToInclude,int[],0,MathIllegalArgumentException,$ == null
SimpleRegression.java,regress,variablesToInclude,int[],0,MathIllegalArgumentException,$.length == 0
SimpleRegression.java,regress,variablesToInclude,int[],0,ModelSpecificationException,$.length > 2
SimpleRegression.java,regress,variablesToInclude,int[],0,ModelSpecificationException,$.length > 1
SimpleRegression.java,regress,variablesToInclude,int[],1,OutOfRangeException:RET,$.length == 2
SimpleRegression.java,regress,variablesToInclude,int[],1,ModelSpecificationException,$[0] == 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 0
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[1] != 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 0
SimpleRegression.java,regress,variablesToInclude,int[],1,RET,$[0] == 0
SimpleRegression.java,regress,variablesToInclude,int[],0,RET,$[0] == 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 0
GLSMultipleLinearRegression.java,getOmegaInverse,OmegaInverse,RealMatrix,0,DEF,$ == null
RegressionResults.java,RegressionResults,rank,int,0,DEF,$ > 0
RegressionResults.java,getParameterEstimate,parameters,double[],0,RET,$ == null
RegressionResults.java,getParameterEstimate,index,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getStdErrorOfEstimate,parameters,double[],0,RET,$ == null
RegressionResults.java,getStdErrorOfEstimate,index,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getStdErrorOfEstimate,var,double,0,RET,$ > Double.MIN_VALUE
RegressionResults.java,getStdErrorOfEstimates,parameters,double[],0,RET,$ == null
RegressionResults.java,getStdErrorOfEstimates,var,double,0,DEF,$ > Double.MIN_VALUE
RegressionResults.java,getCovarianceOfParameters,parameters,double[],0,RET,$ == null
RegressionResults.java,getCovarianceOfParameters,i,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getCovarianceOfParameters,j,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getVcvElement,i,int,1,RET,$ == j
RegressionResults.java,getVcvElement,i,int,1,RET,$ > j
Frequency.java,addValue,v,null,0,DEF,$ instanceof Integer
Frequency.java,addValue,count,Long,1,DEF,$ == null
Frequency.java,getCount,v,null,0,RET,$ instanceof Integer
Frequency.java,getCount,count,Long,0,DEF,$ != null
Frequency.java,getPct,sumFreq,long,0,RET,$ == 0
Frequency.java,getCumFreq,v,null,0,RET,$ instanceof Integer
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,DEF,$ == null
Frequency.java,getCumFreq,value,Long,0,DEF,$ != null
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,RET,$.compare(v, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,v,Comparable<>,0,RET,c.compare($, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,freqTable,TreeMap<Comparable<?>,Long>,0,RET,c.compare(v, $.firstKey()) < 0
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,RET,$.compare(v, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,v,Comparable<>,0,RET,c.compare($, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,freqTable,TreeMap<Comparable<?>,Long>,0,RET,c.compare(v, $.lastKey()) >= 0
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,1,DEF,$.compare(v, nextValue) > 0
Frequency.java,getCumFreq,v,Comparable<>,1,DEF,c.compare($, nextValue) > 0
Frequency.java,getCumFreq,nextValue,Comparable<>,1,DEF,c.compare(v, $) > 0
Frequency.java,getCumPct,sumFreq,long,0,RET,$ == 0
Frequency.java,equals,obj,null,0,RET,$ instanceof Frequency
Frequency.java,equals,freqTable,TreeMap<Comparable<?>,Long>,1,RET,$ == null
Frequency.java,equals,other,Frequency,0,RET,$.freqTable != null
KalmanFilter.java,KalmanFilter,processModel,ProcessModel,1,DEF,$.getControlMatrix() == null
KalmanFilter.java,KalmanFilter,processModel,ProcessModel,1,DEF,$.getInitialStateEstimate() == null
KalmanFilter.java,KalmanFilter,processModel,ProcessModel,1,DEF,$.getInitialErrorCovariance() == null
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$ != null
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() > 0
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() > 0
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
KalmanFilter.java,KalmanFilter,measNoise,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
KalmanFilter.java,predict,u,RealVector,0,DimensionMismatchException,$ != null
KalmanFilter.java,predict,u,RealVector,0,DEF,$ != null
TriangularDistribution.java,TriangularDistribution,a,double,0,NumberIsTooLargeException,$ >= b
TriangularDistribution.java,TriangularDistribution,c,double,0,NumberIsTooSmallException,$ < a
TriangularDistribution.java,TriangularDistribution,c,double,0,NumberIsTooLargeException,$ > b
TriangularDistribution.java,density,x,double,0,RET,$ < a
TriangularDistribution.java,density,a,double,0,RET,$ <= x
TriangularDistribution.java,density,x,double,0,RET,$ < c
TriangularDistribution.java,density,x,double,0,RET,$ == c
TriangularDistribution.java,density,c,double,0,RET,$ < x
TriangularDistribution.java,density,x,double,0,RET,$ <= b
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ < a
TriangularDistribution.java,cumulativeProbability,a,double,0,RET,$ <= x
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ < c
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ == c
TriangularDistribution.java,cumulativeProbability,c,double,0,RET,$ < x
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ <= b
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
ZipfDistribution.java,ZipfDistribution,numberOfElements,int,0,NotStrictlyPositiveException,$ <= 0
ZipfDistribution.java,ZipfDistribution,exponent,double,0,NotStrictlyPositiveException,$ <= 0
ZipfDistribution.java,probability,x,int,0,RET,$ <= 0
ZipfDistribution.java,probability,x,int,0,RET,$ > numberOfElements
ZipfDistribution.java,cumulativeProbability,x,int,1,RET,$ <= 0
ZipfDistribution.java,cumulativeProbability,x,int,0,RET,$ >= numberOfElements
HypergeometricDistribution.java,HypergeometricDistribution,populationSize,int,0,NotStrictlyPositiveException,$ <= 0
HypergeometricDistribution.java,HypergeometricDistribution,numberOfSuccesses,int,0,NotPositiveException,$ < 0
HypergeometricDistribution.java,HypergeometricDistribution,sampleSize,int,0,NotPositiveException,$ < 0
HypergeometricDistribution.java,HypergeometricDistribution,numberOfSuccesses,int,0,NumberIsTooLargeException,$ > populationSize
HypergeometricDistribution.java,HypergeometricDistribution,sampleSize,int,0,NumberIsTooLargeException,$ > populationSize
MultivariateNormalDistribution.java,MultivariateNormalDistribution,covariances,double[][],0,DimensionMismatchException,$.length != dim
MultivariateNormalDistribution.java,MultivariateNormalDistribution,i,int,0,NonPositiveDefiniteMatrixException,covMatEigenvalues[$] < 0
MultivariateNormalDistribution.java,MultivariateNormalDistribution,covMatEigenvalues,double[],0,NonPositiveDefiniteMatrixException,$[i] < 0
MultivariateNormalDistribution.java,density,vals,double[],0,DimensionMismatchException,$.length != dim
WeibullDistribution.java,WeibullDistribution,alpha,double,0,NotStrictlyPositiveException,$ <= 0
WeibullDistribution.java,WeibullDistribution,beta,double,0,NotStrictlyPositiveException,$ <= 0
WeibullDistribution.java,density,x,double,0,RET,$ < 0
WeibullDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ < 0.0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ > 1.0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
NormalDistribution.java,NormalDistribution,sd,double,0,NotStrictlyPositiveException,$ <= 0
NormalDistribution.java,probability,x0,double,0,NumberIsTooLargeException,$ > x1
CauchyDistribution.java,CauchyDistribution,scale,double,0,NotStrictlyPositiveException,$ <= 0
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ < 0
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ > 1
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
TDistribution.java,TDistribution,degreesOfFreedom,double,0,NotStrictlyPositiveException,$ <= 0
TDistribution.java,cumulativeProbability,x,double,1,DEF,$ == 0
TDistribution.java,cumulativeProbability,x,double,1,DEF,$ < 0.0
TDistribution.java,getNumericalMean,df,double,0,RET,$ > 1
TDistribution.java,getNumericalVariance,df,double,0,RET,$ > 2
TDistribution.java,getNumericalVariance,df,double,0,RET,$ > 1
TDistribution.java,getNumericalVariance,df,double,0,RET,$ <= 2
LogNormalDistribution.java,LogNormalDistribution,shape,double,0,NotStrictlyPositiveException,$ <= 0
LogNormalDistribution.java,density,x,double,0,RET,$ <= 0
LogNormalDistribution.java,cumulativeProbability,x,double,0,RET,$ <= 0
LogNormalDistribution.java,probability,x0,double,0,NumberIsTooLargeException,$ > x1
LogNormalDistribution.java,probability,x0,double,0,RET,$ <= 0
LogNormalDistribution.java,probability,x1,double,0,RET,$ <= 0
PoissonDistribution.java,PoissonDistribution,p,double,0,NotStrictlyPositiveException,$ <= 0
PoissonDistribution.java,probability,x,int,1,DEF,$ < 0
PoissonDistribution.java,probability,x,int,1,DEF,$ == Integer.MAX_VALUE
PoissonDistribution.java,probability,x,int,1,DEF,$ == 0
PoissonDistribution.java,cumulativeProbability,x,int,0,RET,$ < 0
PoissonDistribution.java,cumulativeProbability,x,int,0,RET,$ == Integer.MAX_VALUE
PoissonDistribution.java,nextPoisson,meanPoisson,double,1,RET,$ < pivot
PoissonDistribution.java,nextPoisson,r,double,1,DEF,$ >= p
PoissonDistribution.java,nextPoisson,u,double,1,DEF,$ <= p1
PoissonDistribution.java,nextPoisson,x,double,0,DEF,$ > delta
PoissonDistribution.java,nextPoisson,x,double,0,DEF,$ < -lambda
PoissonDistribution.java,nextPoisson,v,double,0,DEF,$ < -t
PoissonDistribution.java,nextPoisson,a,int,0,DEF,$ == 0
PoissonDistribution.java,nextPoisson,v,double,0,DEF,$ < qa
PoissonDistribution.java,nextPoisson,v,double,0,DEF,$ > qr
BetaDistribution.java,density,x,double,1,RET,$ < 0
BetaDistribution.java,density,x,double,1,RET,$ > 1
BetaDistribution.java,density,x,double,1,NumberIsTooSmallException:RET,$ == 0
BetaDistribution.java,density,alpha,double,0,NumberIsTooSmallException,$ < 1
BetaDistribution.java,density,x,double,1,NumberIsTooSmallException:RET,$ == 1
BetaDistribution.java,density,beta,double,0,NumberIsTooSmallException,$ < 1
BetaDistribution.java,cumulativeProbability,x,double,1,RET,$ <= 0
BetaDistribution.java,cumulativeProbability,x,double,1,RET,$ >= 1
UniformIntegerDistribution.java,UniformIntegerDistribution,lower,int,0,NumberIsTooLargeException,$ >= upper
UniformIntegerDistribution.java,probability,x,int,0,RET,$ < lower
UniformIntegerDistribution.java,probability,x,int,0,RET,$ > upper
UniformIntegerDistribution.java,cumulativeProbability,x,int,0,RET,$ < lower
UniformIntegerDistribution.java,cumulativeProbability,x,int,0,RET,$ > upper
KolmogorovSmirnovDistribution.java,KolmogorovSmirnovDistribution,n,int,0,NotStrictlyPositiveException,$ <= 0
KolmogorovSmirnovDistribution.java,cdf,d,double,1,RET,$ <= ninvhalf
KolmogorovSmirnovDistribution.java,cdf,ninvhalf,double,1,RET,$ < d
KolmogorovSmirnovDistribution.java,cdf,d,double,1,RET,$ <= ninv
KolmogorovSmirnovDistribution.java,cdf,ninv,double,1,RET,1 - $ <= d
KolmogorovSmirnovDistribution.java,cdf,d,double,1,RET,$ < 1
KolmogorovSmirnovDistribution.java,createH,hDouble,double,0,NumberIsTooLargeException,$ >= 1
KolmogorovSmirnovDistribution.java,createH,i,int,1,DEF,$ - j + 1 < 0
KolmogorovSmirnovDistribution.java,createH,j,int,1,DEF,i - $ + 1 < 0
KolmogorovSmirnovDistribution.java,createH,h,BigFraction,0,DEF,$.compareTo(BigFraction.ONE_HALF) == 1
KolmogorovSmirnovDistribution.java,createH,i,int,0,DEF,$ - j + 1 > 0
KolmogorovSmirnovDistribution.java,createH,j,int,0,DEF,i - $ + 1 > 0
AbstractMultivariateRealDistribution.java,sample,sampleSize,int,0,NotStrictlyPositiveException,$ <= 0
AbstractRealDistribution.java,probability,x0,double,0,NumberIsTooLargeException,$ > x1
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0.0
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1.0
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 0.0
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 1.0
AbstractRealDistribution.java,inverseCumulativeProbability,lowerBound,double,0,DEF,$ == Double.NEGATIVE_INFINITY
AbstractRealDistribution.java,inverseCumulativeProbability,upperBound,double,0,DEF,$ == Double.POSITIVE_INFINITY
AbstractRealDistribution.java,inverseCumulativeProbability,dx,double,0,RET,cumulativeProbability(x - $) == px
AbstractRealDistribution.java,inverseCumulativeProbability,x,double,0,RET,cumulativeProbability($ - dx) == px
AbstractRealDistribution.java,inverseCumulativeProbability,midPoint,double,1,DEF,cumulativeProbability($) < px
AbstractRealDistribution.java,sample,sampleSize,int,0,NotStrictlyPositiveException,$ <= 0
GammaDistribution.java,GammaDistribution,shape,double,0,NotStrictlyPositiveException,$ <= 0
GammaDistribution.java,GammaDistribution,scale,double,0,NotStrictlyPositiveException,$ <= 0
GammaDistribution.java,density,x,double,0,RET,$ < 0
GammaDistribution.java,density,y,double,0,RET,$ <= minY
GammaDistribution.java,density,y,double,0,RET,FastMath.log($) >= maxLogY
GammaDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0
GammaDistribution.java,sample,shape,double,0,RET,$ < 1
GammaDistribution.java,sample,p,double,1,RET,$ <= 1
GammaDistribution.java,sample,v,double,0,DEF,$ <= 0
PascalDistribution.java,PascalDistribution,r,int,0,NotStrictlyPositiveException,$ <= 0
PascalDistribution.java,PascalDistribution,p,double,0,OutOfRangeException,$ < 0
PascalDistribution.java,PascalDistribution,p,double,0,OutOfRangeException,$ > 1
PascalDistribution.java,probability,x,int,1,DEF,$ < 0
PascalDistribution.java,cumulativeProbability,x,int,1,DEF,$ < 0
UniformRealDistribution.java,UniformRealDistribution,lower,double,0,NumberIsTooLargeException,$ >= upper
UniformRealDistribution.java,density,x,double,0,RET,$ < lower
UniformRealDistribution.java,density,x,double,0,RET,$ > upper
UniformRealDistribution.java,cumulativeProbability,x,double,0,RET,$ <= lower
UniformRealDistribution.java,cumulativeProbability,x,double,0,RET,$ >= upper
FDistribution.java,FDistribution,numeratorDegreesOfFreedom,double,0,NotStrictlyPositiveException,$ <= 0
FDistribution.java,FDistribution,denominatorDegreesOfFreedom,double,0,NotStrictlyPositiveException,$ <= 0
FDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0
FDistribution.java,getNumericalMean,denominatorDF,double,0,RET,$ > 2
FDistribution.java,calculateNumericalVariance,denominatorDF,double,0,RET,$ > 4
ExponentialDistribution.java,ExponentialDistribution,mean,double,0,NotStrictlyPositiveException,$ <= 0
ExponentialDistribution.java,density,x,double,0,RET,$ < 0
ExponentialDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
ExponentialDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ < 0.0
ExponentialDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ > 1.0
ExponentialDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1.0
ExponentialDistribution.java,sample,u2,double,0,DEF,$ < umin
AbstractIntegerDistribution.java,cumulativeProbability,x1,int,0,NumberIsTooLargeException,$ < x0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 0.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,lower,int,1,RET,$ == Integer.MIN_VALUE
AbstractIntegerDistribution.java,inverseCumulativeProbability,lower,int,0,RET,checkedCumulativeProbability($) >= p
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 1.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,tmp,double,0,DEF,$ > lower
AbstractIntegerDistribution.java,inverseCumulativeProbability,tmp,double,0,DEF,$ < upper
AbstractIntegerDistribution.java,solveInverseCumulativeProbability,xm,int,0,DEF,$ < lower
AbstractIntegerDistribution.java,solveInverseCumulativeProbability,xm,int,0,DEF,$ > upper
AbstractIntegerDistribution.java,solveInverseCumulativeProbability,pm,double,1,DEF,$ >= p
AbstractIntegerDistribution.java,sample,sampleSize,int,0,NotStrictlyPositiveException,$ <= 0
BinomialDistribution.java,BinomialDistribution,trials,int,0,NotPositiveException,$ < 0
BinomialDistribution.java,BinomialDistribution,p,double,0,OutOfRangeException,$ < 0
BinomialDistribution.java,BinomialDistribution,p,double,0,OutOfRangeException,$ > 1
BinomialDistribution.java,probability,x,int,1,DEF,$ < 0
BinomialDistribution.java,probability,x,int,1,DEF,$ > numberOfTrials
BinomialDistribution.java,cumulativeProbability,x,int,1,DEF,$ < 0
BinomialDistribution.java,cumulativeProbability,x,int,1,DEF,$ >= numberOfTrials
SaddlePointExpansion.java,getStirlingError,z,double,1,DEF,$ < 15.0
SaddlePointExpansion.java,getStirlingError,z2,double,1,DEF,FastMath.floor($) == z2
SaddlePointExpansion.java,logBinomialProbability,x,int,1,DEF,$ == 0
SaddlePointExpansion.java,logBinomialProbability,p,double,1,DEF,$ < 0.1
SaddlePointExpansion.java,logBinomialProbability,x,int,1,DEF,$ == n
SaddlePointExpansion.java,logBinomialProbability,q,double,1,DEF,$ < 0.1
FastFourierTransformer.java,bitReversalShuffle2,i,int,0,DEF,$ < j
FastFourierTransformer.java,normalizeTransformedData,type,TransformType,0,DEF,$ == TransformType.INVERSE
FastFourierTransformer.java,transformInPlace,dataRI,double[][],0,DimensionMismatchException,$.length != 2
FastFourierTransformer.java,transformInPlace,dataR,double[],0,DimensionMismatchException,$.length != dataI.length
FastFourierTransformer.java,transformInPlace,n,int,1,RET,$ == 1
FastFourierTransformer.java,transformInPlace,n,int,0,RET,$ == 2
FastFourierTransformer.java,transformInPlace,type,TransformType,1,DEF,$ == TransformType.INVERSE
FastFourierTransformer.java,transformInPlace,type,TransformType,0,DEF,$ == TransformType.INVERSE
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == dimensionSize.length
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == d
FastFourierTransformer.java,get,vector,int[],0,DimensionMismatchException:RET,$ == null
FastFourierTransformer.java,get,dimensionSize,int[],0,DimensionMismatchException,$.length > 0
FastFourierTransformer.java,get,vector,int[],0,DimensionMismatchException,$.length != dimensionSize.length
FastFourierTransformer.java,set,vector,int[],0,DimensionMismatchException:RET,$ == null
FastFourierTransformer.java,set,dimensionSize,int[],0,DimensionMismatchException,$.length > 0
FastFourierTransformer.java,set,vector,int[],0,DimensionMismatchException,$.length != dimensionSize.length
FastHadamardTransformer.java,transform,type,TransformType,0,RET,$ == TransformType.FORWARD
FastCosineTransformer.java,transform,type,TransformType,0,RET,$ == TransformType.FORWARD
FastCosineTransformer.java,transform,normalization,DctNormalization,0,RET,$ == DctNormalization.ORTHOGONAL_DCT_I
FastCosineTransformer.java,transform,normalization,DctNormalization,1,DEF,$ == DctNormalization.ORTHOGONAL_DCT_I
FastCosineTransformer.java,fct,n,int,0,RET,$ == 1
FastSineTransformer.java,transform,normalization,DstNormalization,0,RET,$ == DstNormalization.ORTHOGONAL_DST_I
FastSineTransformer.java,transform,type,TransformType,0,RET,$ == TransformType.FORWARD
FastSineTransformer.java,fst,f,double[],0,MathIllegalArgumentException,$[0] != 0.0
FastSineTransformer.java,fst,n,int,0,RET,$ == 1
TransformUtils.java,createComplexArray,dataRI,double[][],0,DimensionMismatchException,$.length != 2
TransformUtils.java,createComplexArray,dataR,double[],0,DimensionMismatchException,$.length != dataI.length
TransformUtils.java,exactLog2,index,int,0,MathIllegalArgumentException,$ < 0
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,source.substring($, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,endIndex,int,0,DEF,source.substring(startIndex, $).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,source,String,0,DEF,$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,sb,StringBuilder,0,DEF,source.substring(startIndex, endIndex).compareTo($.toString()) == 0
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,$ == endIndex
CompositeFormat.java,parseNumber,number,Number,0,DEF,$ != null
CompositeFormat.java,parseFixedstring,startIndex,int,0,RET,source.substring($, endIndex).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,endIndex,int,0,RET,source.substring(startIndex, $).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,expected,String,0,RET,source.substring(startIndex, endIndex).compareTo($) != 0
CompositeFormat.java,parseFixedstring,source,String,0,RET,$.substring(startIndex, endIndex).compareTo(expected) != 0
BigReal.java,equals,other,null,0,RET,$ instanceof BigReal
ResizableDoubleArray.java,ResizableDoubleArray,initialArray,double[],1,DEF,$ == null
ResizableDoubleArray.java,addElement,startIndex,int,0,DEF,($ + numElements) > internalArray.length
ResizableDoubleArray.java,addElement,numElements,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,addElementRolling,startIndex,int,0,DEF,($ + (numElements + 1)) > internalArray.length
ResizableDoubleArray.java,addElementRolling,numElements,int,0,DEF,(startIndex + ($ + 1)) > internalArray.length
ResizableDoubleArray.java,substituteMostRecentElement,numElements,int,0,MathIllegalStateException,$ < 1
ResizableDoubleArray.java,checkContractExpand,contraction,float,0,MathIllegalArgumentException,$ < expansion
ResizableDoubleArray.java,checkContractExpand,contraction,float,0,MathIllegalArgumentException,$ <= 1.0
ResizableDoubleArray.java,checkContractExpand,expansion,float,0,MathIllegalArgumentException,$ <= 1.0
ResizableDoubleArray.java,discardExtremeElements,i,int,1,MathIllegalArgumentException,$ > numElements
ResizableDoubleArray.java,discardExtremeElements,i,int,1,MathIllegalArgumentException,$ < 0
ResizableDoubleArray.java,expand,expansionMode,int,1,DEF,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,getElement,index,int,1,ArrayIndexOutOfBoundsException,$ >= numElements
ResizableDoubleArray.java,getElement,index,int,1,RET,$ >= 0
ResizableDoubleArray.java,setElement,index,int,0,ArrayIndexOutOfBoundsException,$ < 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ + 1 > numElements
ResizableDoubleArray.java,setElement,startIndex,int,0,DEF,($ + index) >= internalArray.length
ResizableDoubleArray.java,setElement,index,int,0,DEF,(startIndex + $) >= internalArray.length
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,MathIllegalArgumentException,$ != MULTIPLICATIVE_MODE
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,MathIllegalArgumentException,$ != ADDITIVE_MODE
ResizableDoubleArray.java,setInitialCapacity,initialCapacity,int,1,DEF,$ > 0
ResizableDoubleArray.java,setNumElements,i,int,0,MathIllegalArgumentException,$ < 0
ResizableDoubleArray.java,setNumElements,startIndex,int,0,DEF,($ + i) > internalArray.length
ResizableDoubleArray.java,setNumElements,i,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,shouldContract,expansionMode,int,1,RET,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,equals,object,Object,0,RET,$ instanceof ResizableDoubleArray == false
ResizableDoubleArray.java,equals,object,null,0,RET,$ instanceof ResizableDoubleArray
OpenIntToFieldHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToFieldHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToFieldHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToFieldHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToFieldHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToFieldHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToFieldHashMap.java,key,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToFieldHashMap.java,key,current,int,0,NoSuchElementException,$ < 0
OpenIntToFieldHashMap.java,value,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToFieldHashMap.java,value,current,int,0,NoSuchElementException,$ < 0
OpenIntToFieldHashMap.java,advance,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToFieldHashMap.java,advance,current,int,0,NoSuchElementException,$ < 0
FastMathCalc.java,buildSinCosTables,i,int,1,DEF,($ & 1) == 0
FastMathCalc.java,slowCos,i,int,0,DEF,($ & 1) != 0
FastMathCalc.java,slowCos,i,int,0,DEF,($ & 2) != 0
FastMathCalc.java,slowCos,result,double[],0,DEF,$ != null
FastMathCalc.java,slowSin,i,int,0,DEF,($ & 1) == 0
FastMathCalc.java,slowSin,i,int,0,DEF,($ & 2) != 0
FastMathCalc.java,slowSin,result,double[],0,DEF,$ != null
FastMathCalc.java,slowexp,result,double[],0,DEF,$ != null
FastMathCalc.java,split,d,double,1,DEF,$ < 8e298
FastMathCalc.java,split,d,double,1,DEF,$ > -8e298
FastMathCalc.java,resplit,c,double,1,DEF,$ < 8e298
FastMathCalc.java,resplit,c,double,1,DEF,$ > -8e298
FastMathCalc.java,splitReciprocal,in,double[],0,DEF,$[0] == 0.0
FastMathCalc.java,expint,p,int,0,DEF,($ & 1) != 0
FastMathCalc.java,expint,result,double[],0,DEF,$ != null
FastMathCalc.java,format,d,double,1,RET,$ != d
FastMathCalc.java,checkLen,expectedLen,int,0,DimensionMismatchException,$ != actual
Precision.java,compareTo,x,double,0,RET,$ < y
Precision.java,compareTo,x,double,0,RET,$ < y
Precision.java,equals,xInt,int,0,DEF,$ < 0
Precision.java,equals,yInt,int,0,DEF,$ < 0
Precision.java,equals,xInt,long,0,DEF,$ < 0
Precision.java,equals,yInt,long,0,DEF,$ < 0
Precision.java,roundUnscaled,sign,double,1,DEF,$ == -1
Precision.java,roundUnscaled,sign,double,1,DEF,$ == -1
Precision.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
Precision.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
Precision.java,roundUnscaled,fraction,double,1,DEF,$ < 0.5
Precision.java,roundUnscaled,fraction,double,1,DEF,$ >= 0.5
ContinuedFraction.java,evaluate,deltaN,double,0,DEF,FastMath.abs($ - 1.0) < epsilon
ContinuedFraction.java,evaluate,n,int,0,MaxCountExceededException,$ >= maxIterations
MathUtils.java,copySign,magnitude,byte,1,RET,$ >= 0
MathUtils.java,copySign,sign,byte,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,byte,1,RET,$ < 0
MathUtils.java,copySign,sign,byte,1,RET,$ < 0
MathUtils.java,copySign,sign,byte,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,byte,1,MathArithmeticException,$ == Byte.MIN_VALUE
MathUtils.java,copySign,magnitude,short,1,RET,$ >= 0
MathUtils.java,copySign,sign,short,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,short,1,RET,$ < 0
MathUtils.java,copySign,sign,short,1,RET,$ < 0
MathUtils.java,copySign,sign,short,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,short,1,MathArithmeticException,$ == Short.MIN_VALUE
MathUtils.java,copySign,magnitude,int,1,RET,$ >= 0
MathUtils.java,copySign,sign,int,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,int,1,RET,$ < 0
MathUtils.java,copySign,sign,int,1,RET,$ < 0
MathUtils.java,copySign,sign,int,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,int,1,MathArithmeticException,$ == Integer.MIN_VALUE
MathUtils.java,copySign,magnitude,long,1,RET,$ >= 0
MathUtils.java,copySign,sign,long,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,long,1,RET,$ < 0
MathUtils.java,copySign,sign,long,1,RET,$ < 0
MathUtils.java,copySign,sign,long,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,long,1,MathArithmeticException,$ == Long.MIN_VALUE
MathUtils.java,checkNotNull,o,Object,0,NullArgumentException,$ == null
MathUtils.java,checkNotNull,o,Object,0,NullArgumentException,$ == null
MathArrays.java,isMonotonic,comp,int,0,RET,$ >= 0
MathArrays.java,isMonotonic,comp,int,0,RET,$ > 0
MathArrays.java,isMonotonic,comp,int,0,RET,$ >= 0
MathArrays.java,isMonotonic,comp,int,0,RET,$ > 0
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] <= previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] <= previous
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] < previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] < previous
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] >= previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] >= previous
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] > previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] > previous
MathArrays.java,checkOrder,index,int,0,RET,$ == max
MathArrays.java,safeNorm,xabs,double,1,DEF,$ < rdwarf
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > agiant
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > rdwarf
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > x1max
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > x3max
MathArrays.java,safeNorm,xabs,double,0,DEF,$ != 0
MathArrays.java,safeNorm,s1,double,1,DEF,$ != 0
MathArrays.java,safeNorm,s2,double,1,DEF,$ == 0
MathArrays.java,safeNorm,s2,double,1,DEF,$ >= x3max
MathArrays.java,sortInPlace,x,double[],0,NullArgumentException,$ == null
MathArrays.java,sortInPlace,y,double[],0,NullArgumentException,$ == null
MathArrays.java,sortInPlace,y,double[],0,DimensionMismatchException,$.length != len
MathArrays.java,linearCombination,len,int,0,DimensionMismatchException,$ != b.length
MathArrays.java,equals,x,float[],0,RET,$ == null
MathArrays.java,equals,y,float[],0,RET,$ == null
MathArrays.java,equals,x,float[],0,RET,$.length != y.length
MathArrays.java,equalsIncludingNaN,x,float[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,y,float[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,x,float[],0,RET,$.length != y.length
MathArrays.java,equals,x,double[],0,RET,$ == null
MathArrays.java,equals,y,double[],0,RET,$ == null
MathArrays.java,equals,x,double[],0,RET,$.length != y.length
MathArrays.java,equalsIncludingNaN,x,double[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,y,double[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,x,double[],0,RET,$.length != y.length
MathArrays.java,normalizeArray,sum,double,0,MathArithmeticException,$ == 0
DefaultTransformer.java,transform,o,Object,0,NullArgumentException,$ == null
DefaultTransformer.java,transform,o,null,0,RET,$ instanceof Number
MultidimensionalCounter.java,MultidimensionalCounter,tS,int,0,NotStrictlyPositiveException,$ <= 0
MultidimensionalCounter.java,getCounts,index,int,0,OutOfRangeException,$ < 0
MultidimensionalCounter.java,getCounts,index,int,0,OutOfRangeException,$ >= totalSize
MultidimensionalCounter.java,getCount,c,int[],0,DimensionMismatchException,$.length != dimension
MultidimensionalCounter.java,getCount,index,int,0,OutOfRangeException,$ < 0
Decimal64.java,equals,obj,null,0,RET,$ instanceof Decimal64
Incrementor.java,Incrementor,cb,MaxCountExceededCallback,0,NullArgumentException,$ == null
Incrementor.java,incrementCount,count,int,0,DEF,++$ > maximalCount
FastMath.java,doubleHighPart,d,double,0,RET,$ > -Precision.SAFE_MIN
FastMath.java,doubleHighPart,d,double,0,RET,$ < Precision.SAFE_MIN
FastMath.java,cosh,x,double,0,RET,$ != x
FastMath.java,cosh,x,double,0,RET,$ > 20.0
FastMath.java,cosh,x,double,0,RET,$ < -20
FastMath.java,cosh,x,double,0,DEF,$ < 0.0
FastMath.java,sinh,x,double,0,RET,$ != x
FastMath.java,sinh,x,double,0,RET,$ > 20.0
FastMath.java,sinh,x,double,0,RET,$ < -20
FastMath.java,sinh,x,double,0,RET,$ == 0
FastMath.java,sinh,x,double,0,DEF,$ < 0.0
FastMath.java,sinh,x,double,1,DEF,$ > 0.25
FastMath.java,tanh,x,double,0,RET,$ != x
FastMath.java,tanh,x,double,0,RET,$ > 20.0
FastMath.java,tanh,x,double,0,RET,$ < -20
FastMath.java,tanh,x,double,0,RET,$ == 0
FastMath.java,tanh,x,double,0,DEF,$ < 0.0
FastMath.java,tanh,x,double,1,DEF,$ >= 0.5
FastMath.java,asinh,a,double,0,DEF,$ < 0
FastMath.java,asinh,a,double,1,DEF,$ > 0.167
FastMath.java,asinh,a,double,1,DEF,$ > 0.097
FastMath.java,asinh,a,double,1,DEF,$ > 0.036
FastMath.java,asinh,a,double,1,DEF,$ > 0.0036
FastMath.java,atanh,a,double,0,DEF,$ < 0
FastMath.java,atanh,a,double,1,DEF,$ > 0.15
FastMath.java,atanh,a,double,1,DEF,$ > 0.087
FastMath.java,atanh,a,double,1,DEF,$ > 0.031
FastMath.java,atanh,a,double,1,DEF,$ > 0.003
FastMath.java,exp,x,double,1,RET,$ < 0.0
FastMath.java,exp,intVal,int,0,RET,$ > 746
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,intVal,int,0,RET,$ > 709
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,intVal,int,0,RET,$ == 709
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,intVal,int,0,RET,$ > 709
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,extra,double,1,DEF,$ != 0.0
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,expm1,x,double,0,RET,$ != x
FastMath.java,expm1,x,double,0,RET,$ == 0.0
FastMath.java,expm1,x,double,0,RET,$ <= -1.0
FastMath.java,expm1,x,double,0,RET,$ >= 1.0
FastMath.java,expm1,x,double,1,RET,$ > 0.0
FastMath.java,expm1,x,double,0,DEF,$ < 0.0
FastMath.java,expm1,hiPrecOut,double[],0,DEF,$ != null
FastMath.java,log,x,double,0,RET,$==0
FastMath.java,log,bits,long,0,RET,($ & 0x8000000000000000L) != 0
FastMath.java,log,x,double,0,RET,$ != x
FastMath.java,log,x,double,0,RET,$ != 0.0
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log,bits,long,0,RET,($ & 0x7ff0000000000000L) == 0
FastMath.java,log,x,double,0,RET,$ == 0
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log,exp,int,0,RET,$ == -1
FastMath.java,log,exp,int,0,RET,$ == 0
FastMath.java,log,x,double,0,RET,$ < 1.01
FastMath.java,log,x,double,0,RET,$ > 0.99
FastMath.java,log,hiPrec,double[],0,RET,$ == null
FastMath.java,log,hiPrec,double[],1,DEF,$ != null
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log1p,x,double,0,RET,$ == -1
FastMath.java,log1p,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,log1p,x,double,1,RET,$ > 1e-6
FastMath.java,log1p,x,double,1,RET,$ < -1e-6
FastMath.java,pow,y,double,0,RET,$ == 0.0
FastMath.java,pow,x,double,0,RET,$ != x
FastMath.java,pow,x,double,0,RET,$ == 0
FastMath.java,pow,bits,long,0,RET,($ & 0x8000000000000000L) != 0
FastMath.java,pow,y,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ > 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ > 0
FastMath.java,pow,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,pow,y,double,0,RET,$ != y
FastMath.java,pow,y,double,1,RET,$ < 0.0
FastMath.java,pow,y,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,pow,x,double,0,RET,$ * $ == 1.0
FastMath.java,pow,x,double,1,RET,$ * $ > 1.0
FastMath.java,pow,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,pow,y,double,0,RET,$ != y
FastMath.java,pow,y,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ > 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,pow,x,double,0,RET,$ * $ == 1.0
FastMath.java,pow,x,double,1,RET,$ * $ < 1.0
FastMath.java,pow,x,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ >= TWO_POWER_52
FastMath.java,pow,y,double,0,RET,$ <= -TWO_POWER_52
FastMath.java,pow,y,double,1,RET,$ == (long) y
FastMath.java,pow,y,double,1,DEF,$ < 8e298
FastMath.java,pow,y,double,1,DEF,$ > -8e298
FastMath.java,pow,e,int,1,RET,$ == 0
FastMath.java,pow,e,int,0,DEF,$ < 0
FastMath.java,pow,e,int,0,DEF,($ & 0x1) != 0
FastMath.java,sinQ,xb,double,0,DEF,$ != 0.0
FastMath.java,tanQ,xb,double,0,DEF,$ != 0.0
FastMath.java,reducePayneHanek,shift,int,1,DEF,$ != 0
FastMath.java,sin,x,double,0,DEF,$ < 0
FastMath.java,sin,xa,double,0,RET,$ == 0.0
FastMath.java,sin,bits,long,0,RET,$ < 0
FastMath.java,sin,xa,double,0,RET,$ != xa
FastMath.java,sin,xa,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,sin,xa,double,1,DEF,$ > 3294198.0
FastMath.java,sin,xa,double,0,DEF,$ > 1.5707963267948966
FastMath.java,cos,x,double,0,DEF,$ < 0
FastMath.java,cos,xa,double,0,RET,$ != xa
FastMath.java,cos,xa,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,cos,xa,double,1,DEF,$ > 3294198.0
FastMath.java,cos,xa,double,0,DEF,$ > 1.5707963267948966
FastMath.java,tan,x,double,0,DEF,$ < 0
FastMath.java,tan,xa,double,0,RET,$ == 0.0
FastMath.java,tan,bits,long,0,RET,$ < 0
FastMath.java,tan,xa,double,0,RET,$ != xa
FastMath.java,tan,xa,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,tan,xa,double,1,DEF,$ > 3294198.0
FastMath.java,tan,xa,double,0,DEF,$ > 1.5707963267948966
FastMath.java,tan,xa,double,0,DEF,$ > 1.5
FastMath.java,tan,quadrant,int,1,DEF,($ & 1) == 0
FastMath.java,atan,xa,double,0,RET,$ == 0.0
FastMath.java,atan,xa,double,0,DEF,$ < 0
FastMath.java,atan,xa,double,0,RET,$ > 1.633123935319537E16
FastMath.java,atan,xa,double,1,DEF,$ < 1
FastMath.java,atan,idx,int,1,DEF,$ == 0
FastMath.java,atan2,x,double,0,RET,$ != x
FastMath.java,atan2,y,double,0,RET,$ != y
FastMath.java,atan2,y,double,0,RET,$ == 0
FastMath.java,atan2,invx,double,0,RET,$ == 0
FastMath.java,atan2,x,double,1,RET,$ > 0
FastMath.java,atan2,x,double,1,RET,$ < 0
FastMath.java,atan2,invx,double,1,RET,$ < 0
FastMath.java,atan2,y,double,1,RET,$ < 0
FastMath.java,atan2,invy,double,1,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,y,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,y,double,0,RET,$ > 0
FastMath.java,atan2,y,double,0,RET,1 / $ > 0
FastMath.java,atan2,y,double,0,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,1 / $ < 0
FastMath.java,atan2,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,y,double,0,RET,$ > 0.0
FastMath.java,atan2,y,double,0,RET,1 / $ > 0.0
FastMath.java,atan2,y,double,0,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,1 / $ < 0
FastMath.java,atan2,x,double,0,RET,$ == 0
FastMath.java,atan2,y,double,0,RET,$ > 0
FastMath.java,atan2,y,double,0,RET,1 / $ > 0
FastMath.java,atan2,y,double,0,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,1 / $ < 0
FastMath.java,atan2,ra,double,0,DEF,$ == 0
FastMath.java,asin,x,double,0,RET,$ != x
FastMath.java,asin,x,double,0,RET,$ > 1.0
FastMath.java,asin,x,double,0,RET,$ < -1.0
FastMath.java,asin,x,double,0,RET,$ == 1.0
FastMath.java,asin,x,double,0,RET,$ == -1.0
FastMath.java,asin,x,double,0,RET,$ == 0.0
FastMath.java,acos,x,double,0,RET,$ != x
FastMath.java,acos,x,double,0,RET,$ > 1.0
FastMath.java,acos,x,double,0,RET,$ < -1.0
FastMath.java,acos,x,double,0,RET,$ == -1.0
FastMath.java,acos,x,double,0,RET,$ == 1.0
FastMath.java,acos,x,double,0,RET,$ == 0
FastMath.java,cbrt,exponent,int,0,RET,$ == -1023
FastMath.java,cbrt,x,double,0,RET,$ == 0
FastMath.java,cbrt,exponent,int,0,RET,$ == 1024
FastMath.java,toRadians,x,double,0,RET,$ == 0.0
FastMath.java,toRadians,result,double,0,DEF,$ == 0
FastMath.java,toDegrees,x,double,0,RET,$ == 0.0
FastMath.java,scalb,n,int,0,RET,$ > -1023
FastMath.java,scalb,n,int,0,RET,$ < 1024
FastMath.java,scalb,d,double,0,RET,$ == 0
FastMath.java,scalb,n,int,0,RET,$ < -2098
FastMath.java,scalb,n,int,0,RET,$ > 2097
FastMath.java,scalb,n,int,1,RET,$ < 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > -53
FastMath.java,scalb,mostSignificantLostBit,long,0,DEF,$ != 0
FastMath.java,scalb,exponent,int,1,RET,$ == 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 2047
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 2047
FastMath.java,scalb,n,int,0,RET,$ > -127
FastMath.java,scalb,n,int,0,RET,$ < 128
FastMath.java,scalb,f,float,0,RET,$ == 0f
FastMath.java,scalb,n,int,0,RET,$ < -277
FastMath.java,scalb,n,int,0,RET,$ > 276
FastMath.java,scalb,n,int,1,RET,$ < 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > -24
FastMath.java,scalb,mostSignificantLostBit,int,0,DEF,$ != 0
FastMath.java,scalb,exponent,int,1,RET,$ == 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 255
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 255
FastMath.java,nextAfter,d,double,1,RET,$ == direction
FastMath.java,nextAfter,d,double,0,RET,$ == 0
FastMath.java,nextAfter,direction,double,1,RET,$ < d
FastMath.java,nextAfter,sign,long,1,RET,$ == 0L
FastMath.java,nextAfter,f,float,1,RET,$ == direction
FastMath.java,nextAfter,f,float,0,RET,$ == 0f
FastMath.java,nextAfter,direction,double,1,RET,$ < f
FastMath.java,nextAfter,sign,int,1,RET,$ == 0
FastMath.java,floor,x,double,0,RET,$ != x
FastMath.java,floor,x,double,0,RET,$ >= TWO_POWER_52
FastMath.java,floor,x,double,0,RET,$ <= -TWO_POWER_52
FastMath.java,floor,x,double,0,DEF,$ < 0
FastMath.java,floor,y,long,0,DEF,$ != x
FastMath.java,floor,y,long,0,RET,$ == 0
FastMath.java,ceil,x,double,0,RET,$ != x
FastMath.java,ceil,y,double,0,RET,$ == x
FastMath.java,ceil,y,double,0,RET,$ == 0
FastMath.java,rint,d,double,0,RET,$ > 0.5
FastMath.java,rint,y,double,0,RET,$ == -1.0
FastMath.java,rint,d,double,0,RET,$ < 0.5
FastMath.java,min,a,float,0,RET,$ > b
FastMath.java,min,a,float,0,RET,$ < b
FastMath.java,min,a,float,0,RET,$ != b
FastMath.java,min,bits,int,0,RET,$ == 0x80000000
FastMath.java,min,a,double,0,RET,$ > b
FastMath.java,min,a,double,0,RET,$ < b
FastMath.java,min,a,double,0,RET,$ != b
FastMath.java,min,bits,long,0,RET,$ == 0x8000000000000000L
FastMath.java,max,a,float,0,RET,$ > b
FastMath.java,max,a,float,0,RET,$ < b
FastMath.java,max,a,float,0,RET,$ != b
FastMath.java,max,bits,int,0,RET,$ == 0x80000000
FastMath.java,max,a,double,0,RET,$ > b
FastMath.java,max,a,double,0,RET,$ < b
FastMath.java,max,a,double,0,RET,$ != b
FastMath.java,max,bits,long,0,RET,$ == 0x8000000000000000L
FastMath.java,copySign,m,long,0,RET,$ >= 0
FastMath.java,copySign,s,long,0,RET,$ >= 0
FastMath.java,copySign,m,long,0,RET,$ < 0
FastMath.java,copySign,s,long,0,RET,$ < 0
FastMath.java,copySign,m,int,0,RET,$ >= 0
FastMath.java,copySign,s,int,0,RET,$ >= 0
FastMath.java,copySign,m,int,0,RET,$ < 0
FastMath.java,copySign,s,int,0,RET,$ < 0
FastMath.java,null,i,int,0,DEF,$ != 0
FastMath.java,CodyWaite,remA,double,0,DEF,$ > 0
TransformerMap.java,transform,o,null,1,DEF,$ instanceof Number
TransformerMap.java,transform,o,null,1,DEF,$ instanceof String
TransformerMap.java,transform,trans,NumberTransformer,0,DEF,$ != null
TransformerMap.java,equals,other,null,0,RET,$ instanceof TransformerMap
Pair.java,equals,o,null,1,RET,$ instanceof Pair
OpenIntToDoubleHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToDoubleHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToDoubleHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToDoubleHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToDoubleHashMap.java,key,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToDoubleHashMap.java,key,current,int,0,NoSuchElementException,$ < 0
OpenIntToDoubleHashMap.java,value,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToDoubleHashMap.java,value,current,int,0,NoSuchElementException,$ < 0
OpenIntToDoubleHashMap.java,advance,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToDoubleHashMap.java,advance,current,int,0,NoSuchElementException,$ < 0
ArithmeticUtils.java,addAndCheck,s,long,0,MathArithmeticException,$ < Integer.MIN_VALUE
ArithmeticUtils.java,addAndCheck,s,long,0,MathArithmeticException,$ > Integer.MAX_VALUE
ArithmeticUtils.java,binomialCoefficient,n,int,0,RET,$ == k
ArithmeticUtils.java,binomialCoefficient,k,int,0,RET,$ == 0
ArithmeticUtils.java,binomialCoefficient,k,int,0,RET,$ == 1
ArithmeticUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 61
ArithmeticUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 66
ArithmeticUtils.java,binomialCoefficientDouble,n,int,0,RET,$ == k
ArithmeticUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 0
ArithmeticUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 1
ArithmeticUtils.java,binomialCoefficientDouble,n,int,0,RET,$ < 67
ArithmeticUtils.java,binomialCoefficientLog,n,int,0,RET,$ == k
ArithmeticUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 0
ArithmeticUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 1
ArithmeticUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 67
ArithmeticUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 1030
ArithmeticUtils.java,factorial,n,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,factorial,n,int,0,MathArithmeticException,$ > 20
ArithmeticUtils.java,factorialDouble,n,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,factorialDouble,n,int,0,RET,$ < 21
ArithmeticUtils.java,factorialLog,n,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,factorialLog,n,int,0,RET,$ < 21
ArithmeticUtils.java,gcd,u,int,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,v,int,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,u,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
ArithmeticUtils.java,gcd,v,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
ArithmeticUtils.java,gcd,u,int,0,DEF,$ > 0
ArithmeticUtils.java,gcd,v,int,0,DEF,$ > 0
ArithmeticUtils.java,gcd,k,int,0,MathArithmeticException,$ == 31
ArithmeticUtils.java,gcd,t,int,1,DEF,$ > 0
ArithmeticUtils.java,gcd,u,long,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,v,long,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,u,long,0,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,gcd,v,long,0,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,gcd,u,long,0,DEF,$ > 0
ArithmeticUtils.java,gcd,v,long,0,DEF,$ > 0
ArithmeticUtils.java,gcd,k,int,0,MathArithmeticException,$ == 63
ArithmeticUtils.java,gcd,t,long,1,DEF,$ > 0
ArithmeticUtils.java,lcm,a,int,0,RET,$ == 0
ArithmeticUtils.java,lcm,b,int,0,RET,$ == 0
ArithmeticUtils.java,lcm,lcm,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
ArithmeticUtils.java,lcm,a,long,0,RET,$ == 0
ArithmeticUtils.java,lcm,b,long,0,RET,$ == 0
ArithmeticUtils.java,lcm,lcm,long,0,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,mulAndCheck,m,long,0,MathArithmeticException,$ < Integer.MIN_VALUE
ArithmeticUtils.java,mulAndCheck,m,long,0,MathArithmeticException,$ > Integer.MAX_VALUE
ArithmeticUtils.java,mulAndCheck,a,long,1,DEF,$ > b
ArithmeticUtils.java,mulAndCheck,a,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,mulAndCheck,b,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,mulAndCheck,b,long,1,MathArithmeticException,$ > 0
ArithmeticUtils.java,mulAndCheck,b,long,1,DEF,Long.MIN_VALUE / $ <= a
ArithmeticUtils.java,mulAndCheck,a,long,1,MathArithmeticException,$ > 0
ArithmeticUtils.java,subAndCheck,s,long,0,MathArithmeticException,$ < Integer.MIN_VALUE
ArithmeticUtils.java,subAndCheck,s,long,0,MathArithmeticException,$ > Integer.MAX_VALUE
ArithmeticUtils.java,subAndCheck,b,long,1,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,subAndCheck,a,long,1,DEF,$ < 0
ArithmeticUtils.java,pow,e,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,long,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,long,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,BigInteger,0,NotPositiveException,$.compareTo(BigInteger.ZERO) < 0
ArithmeticUtils.java,stirlingS2,k,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,stirlingS2,k,int,0,NumberIsTooLargeException,$ > n
ArithmeticUtils.java,stirlingS2,stirlingS2,long[][],0,DEF,$ == null
ArithmeticUtils.java,stirlingS2,n,int,1,RET,$ < stirlingS2.length
ArithmeticUtils.java,stirlingS2,k,int,1,RET,$ == 0
ArithmeticUtils.java,stirlingS2,k,int,1,RET,$ == 1
ArithmeticUtils.java,stirlingS2,k,int,1,RET,$ == n
ArithmeticUtils.java,stirlingS2,k,int,1,RET,$ == 2
ArithmeticUtils.java,stirlingS2,sum,long,0,MathArithmeticException,$ < 0
ArithmeticUtils.java,addAndCheck,a,long,1,DEF,$ > b
ArithmeticUtils.java,addAndCheck,a,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,addAndCheck,b,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,addAndCheck,b,long,1,DEF,Long.MIN_VALUE - $ <= a
ArithmeticUtils.java,checkBinomial,n,int,0,NumberIsTooLargeException,$ < k
ArithmeticUtils.java,checkBinomial,n,int,0,NotPositiveException,$ < 0
BigFraction.java,BigFraction,gcd,BigInteger,0,DEF,BigInteger.ONE.compareTo($) < 0
BigFraction.java,BigFraction,den,BigInteger,0,DEF,BigInteger.ZERO.compareTo($) > 0
BigFraction.java,BigFraction,exponent,long,0,DEF,$ != 0
BigFraction.java,BigFraction,sign,long,0,DEF,$ != 0
BigFraction.java,BigFraction,k,int,1,DEF,$ < 0
BigFraction.java,BigFraction,a0,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,value,double,0,RET,FastMath.abs(a0 - $) < epsilon
BigFraction.java,BigFraction,a0,long,0,RET,FastMath.abs($ - value) < epsilon
BigFraction.java,BigFraction,p2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,q2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,n,int,1,DEF,$ < maxIterations
BigFraction.java,BigFraction,convergent,double,1,DEF,FastMath.abs($ - value) > epsilon
BigFraction.java,BigFraction,value,double,1,DEF,FastMath.abs(convergent - $) > epsilon
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,BigFraction,n,int,0,FractionConversionException,$ >= maxIterations
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,getReducedFraction,numerator,int,0,RET,$ == 0
BigFraction.java,add,fraction,BigFraction,0,NullArgumentException,$ == null
BigFraction.java,divide,bg,BigInteger,0,NullArgumentException,$ == null
BigFraction.java,divide,fraction,BigFraction,0,NullArgumentException,$ == null
BigFraction.java,equals,other,null,0,DEF,$ instanceof BigFraction
BigFraction.java,multiply,bg,BigInteger,0,NullArgumentException,$ == null
BigFraction.java,multiply,fraction,BigFraction,0,NullArgumentException,$ == null
BigFraction.java,pow,exponent,int,0,RET,$ < 0
BigFraction.java,pow,exponent,long,0,RET,$ < 0
BigFraction.java,pow,exponent,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
BigFraction.java,subtract,bg,BigInteger,0,NullArgumentException,$ == null
BigFraction.java,subtract,fraction,BigFraction,0,NullArgumentException,$ == null
Fraction.java,Fraction,a0,long,0,FractionConversionException,FastMath.abs($) > overflow
Fraction.java,Fraction,value,double,0,RET,FastMath.abs(a0 - $) < epsilon
Fraction.java,Fraction,a0,long,0,RET,FastMath.abs($ - value) < epsilon
Fraction.java,Fraction,p2,long,0,FractionConversionException,FastMath.abs($) > overflow
Fraction.java,Fraction,q2,long,0,FractionConversionException,FastMath.abs($) > overflow
Fraction.java,Fraction,n,int,1,DEF,$ < maxIterations
Fraction.java,Fraction,convergent,double,1,DEF,FastMath.abs($ - value) > epsilon
Fraction.java,Fraction,value,double,1,DEF,FastMath.abs(convergent - $) > epsilon
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,n,int,0,FractionConversionException,$ >= maxIterations
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,den,int,0,MathArithmeticException,$ == 0
Fraction.java,Fraction,den,int,0,MathArithmeticException,$ < 0
Fraction.java,Fraction,num,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
Fraction.java,Fraction,den,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
Fraction.java,Fraction,d,int,0,DEF,$ > 1
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,abs,numerator,int,1,DEF,$ >= 0
Fraction.java,equals,other,null,0,RET,$ instanceof Fraction
Fraction.java,negate,numerator,int,0,MathArithmeticException,$==Integer.MIN_VALUE
Fraction.java,addSub,fraction,Fraction,0,NullArgumentException,$ == null
Fraction.java,addSub,numerator,int,0,RET,$ == 0
Fraction.java,addSub,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,addSub,d1,int,0,RET,$==1
Fraction.java,addSub,w,BigInteger,0,MathArithmeticException,$.bitLength() > 31
Fraction.java,multiply,fraction,Fraction,0,NullArgumentException,$ == null
Fraction.java,multiply,numerator,int,0,RET,$ == 0
Fraction.java,multiply,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,divide,fraction,Fraction,0,NullArgumentException,$ == null
Fraction.java,divide,fraction,Fraction,0,MathArithmeticException,$.numerator == 0
Fraction.java,getReducedFraction,denominator,int,0,MathArithmeticException,$ == 0
Fraction.java,getReducedFraction,numerator,int,0,RET,$==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,numerator,int,0,DEF,($&1)==0
Fraction.java,getReducedFraction,denominator,int,0,MathArithmeticException,$ < 0
Fraction.java,getReducedFraction,numerator,int,0,MathArithmeticException,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,denominator,int,0,MathArithmeticException,$==Integer.MIN_VALUE
Fraction.java,toString,denominator,int,1,DEF,$ == 1
Fraction.java,toString,numerator,int,1,DEF,$ == 0
AbstractFormat.java,setDenominatorFormat,format,NumberFormat,0,NullArgumentException,$ == null
AbstractFormat.java,setNumeratorFormat,format,NumberFormat,0,NullArgumentException,$ == null
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
ProperBigFractionFormat.java,format,num,BigInteger,0,DEF,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,ret,BigFraction,0,RET,$ != null
ProperBigFractionFormat.java,parse,whole,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,setWholeFormat,format,NumberFormat,0,NullArgumentException,$ == null
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Fraction
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
FractionFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
FractionFormat.java,parse,num,Number,0,RET,$ == null
FractionFormat.java,parse,den,Number,0,RET,$ == null
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigFraction
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigInteger
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
BigFractionFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
BigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
BigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperFractionFormat.java,format,whole,int,0,DEF,$ != 0
ProperFractionFormat.java,parse,ret,Fraction,0,RET,$ != null
ProperFractionFormat.java,parse,whole,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,parse,den,Number,0,RET,$ == null
ProperFractionFormat.java,parse,den,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,setWholeFormat,format,NumberFormat,0,NullArgumentException,$ == null
AbstractIntegrator.java,sanityChecks,dt,double,0,NumberIsTooSmallException,$ <= threshold
ContinuousOutputModel.java,append,model,ContinuousOutputModel,0,RET,$.steps.size() == 0
ContinuousOutputModel.java,append,steps,List<StepInterpolator>,1,DEF,$.size() == 0
ContinuousOutputModel.java,handleStep,steps,List<StepInterpolator>,0,DEF,$.size() == 0
ContinuousOutputModel.java,setInterpolatedTime,sMin,StepInterpolator,0,RET,locatePoint(time, $) <= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMin) <= 0
ContinuousOutputModel.java,setInterpolatedTime,sMax,StepInterpolator,0,RET,locatePoint(time, $) >= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMax) >= 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ < 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ > 0
ContinuousOutputModel.java,setInterpolatedTime,tMin,double,1,DEF,FastMath.abs(tMed - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,FastMath.abs($ - tMin) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMax,double,1,DEF,FastMath.abs($ - tMed) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,FastMath.abs(tMax - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,index,int,1,DEF,$ < low
ContinuousOutputModel.java,setInterpolatedTime,index,int,0,DEF,$ > high
AdamsBashforthIntegrator.java,integrate,error,double,0,DEF,$ >= 1.0
GillStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
GillStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
EulerStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
EulerStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
DormandPrince54StepInterpolator.java,DormandPrince54StepInterpolator,interpolator,DormandPrince54StepInterpolator,1,DEF,$.v1 == null
DormandPrince54StepInterpolator.java,computeInterpolatedStateAndDerivatives,v1,double[],0,DEF,$ == null
DormandPrince54StepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
DormandPrince54StepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
GraggBulirschStoerIntegrator.java,setStabilityCheck,stepsizeReductionFactor,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStabilityCheck,stepsizeReductionFactor,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control3,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control3,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control4,double,1,DEF,$ < 1.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control4,double,1,DEF,$ > 999.9
GraggBulirschStoerIntegrator.java,setOrderControl,maximalOrder,int,0,DEF,$ <= 6
GraggBulirschStoerIntegrator.java,setOrderControl,maximalOrder,int,0,DEF,$ % 2 != 0
GraggBulirschStoerIntegrator.java,setOrderControl,control1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,control1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setOrderControl,control2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,control2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$ == null
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$.length != size
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudifControlParameter,int,1,DEF,$ <= 0
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudifControlParameter,int,1,DEF,$ >= 7
GraggBulirschStoerIntegrator.java,rescale,vecAbsoluteTolerance,double[],1,DEF,$ == null
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,DEF,2 * $ == n
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,RET,$ <= maxChecks
GraggBulirschStoerIntegrator.java,tryStep,k,int,0,RET,$ < maxIter
GraggBulirschStoerIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize > t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ > t
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize < t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ < t
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 0
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > 1.0e15
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > maxError
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ > 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,mu,int,0,DEF,$ >= 0
GraggBulirschStoerIntegrator.java,integrate,interpError,double,0,DEF,$ > 10.0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 1
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ <= targetIter
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 2
GraggBulirschStoerIntegrator.java,integrate,optimalIter,int,1,DEF,$ <= k
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ < targetIter
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ < minStep
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,DimensionMismatchException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,DimensionMismatchException,$.length != mainSetDimension
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,DimensionMismatchException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,DimensionMismatchException,$.length != mainSetDimension
AdaptiveStepsizeIntegrator.java,initializeStep,initialStep,double,0,RET,$ > 0
AdaptiveStepsizeIntegrator.java,filterStep,h,double,0,NumberIsTooSmallException,FastMath.abs($) < minStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,0,DEF,$ < -maxStep
EmbeddedRungeKuttaIntegrator.java,integrate,vecAbsoluteTolerance,double[],1,DEF,$ == null
EmbeddedRungeKuttaIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize >= t
EmbeddedRungeKuttaIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ >= t
EmbeddedRungeKuttaIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize <= t
EmbeddedRungeKuttaIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ <= t
EmbeddedRungeKuttaIntegrator.java,integrate,error,double,0,DEF,$ >= 1.0
MidpointStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
MidpointStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
ClassicalRungeKuttaStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
ClassicalRungeKuttaStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
AdamsNordsieckTransformer.java,getInstance,t,AdamsNordsieckTransformer,0,DEF,$ == null
AdamsMoultonIntegrator.java,integrate,error,double,0,DEF,$ >= 1.0
AdamsMoultonIntegrator.java,visit,row,int,1,DEF,($ & 0x1) == 0
AdamsMoultonIntegrator.java,end,i,int,0,DEF,$ < mainSetDimension
DormandPrince853StepInterpolator.java,DormandPrince853StepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState == null
DormandPrince853StepInterpolator.java,computeInterpolatedStateAndDerivatives,v,double[][],0,DEF,$ == null
DormandPrince853StepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
DormandPrince853StepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
DormandPrince853StepInterpolator.java,doFinalize,currentState,double[],0,RET,$ == null
HighamHall54StepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
HighamHall54StepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
DormandPrince853Integrator.java,estimateError,den,double,0,DEF,$ <= 0.0
ThreeEighthesStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
ThreeEighthesStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
RungeKuttaStepInterpolator.java,RungeKuttaStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
RungeKuttaStepInterpolator.java,readExternal,n,int,1,DEF,$ < 0
RungeKuttaStepInterpolator.java,readExternal,currentState,double[],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,GraggBulirschStoerStepInterpolator,interpolator,GraggBulirschStoerStepInterpolator,1,DEF,$.polynomials == null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ < 0
GraggBulirschStoerStepInterpolator.java,resetTables,polynomials,double[][],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ <= 4
GraggBulirschStoerStepInterpolator.java,computeCoefficients,polynomials,double[][],0,DEF,$ == null
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,RET,$ < 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 1
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 2
GraggBulirschStoerStepInterpolator.java,estimateError,currentDegree,int,0,DEF,$ >= 5
GraggBulirschStoerStepInterpolator.java,computeInterpolatedStateAndDerivatives,currentDegree,int,0,DEF,$ > 3
GraggBulirschStoerStepInterpolator.java,computeInterpolatedStateAndDerivatives,h,double,0,DEF,$ == 0
StepNormalizer.java,handleStep,lastState,double[],0,DEF,$ == null
StepNormalizer.java,handleStep,mode,StepNormalizerMode,0,DEF,$ == StepNormalizerMode.MULTIPLES
StepNormalizer.java,doNormalizedStep,firstTime,double,0,RET,$ == lastTime
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.scaled != null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.nordsieck != null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.stateVariation != null
NordsieckStepInterpolator.java,writeExternal,scaled,double[],1,DEF,$ == null
NordsieckStepInterpolator.java,writeExternal,nordsieck,Array2DRowRealMatrix,1,DEF,$ == null
AbstractStepInterpolator.java,AbstractStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState == null
AbstractStepInterpolator.java,allocateInterpolatedArrays,dimension,int,1,DEF,$ < 0
AbstractStepInterpolator.java,allocateInterpolatedArrays,secondaryMappers,EquationsMapper[],1,DEF,$ == null
AbstractStepInterpolator.java,writeBaseExternal,currentState,double[],1,DEF,$ == null
AbstractStepInterpolator.java,writeBaseExternal,currentState,double[],0,DEF,$ != null
AbstractStepInterpolator.java,readBaseExternal,dimension,int,1,DEF,$ < 0
ExpandableStatefulODE.java,setSecondaryState,secondaryState,double[],0,DimensionMismatchException,$.length != localArray.length
EventState.java,reinitializeBegin,g0,double,0,DEF,$ == 0
EventState.java,evaluateStep,dt,double,0,RET,FastMath.abs($) < convergence
EventState.java,evaluateStep,gb,double,1,RET,$ >= 0
EventState.java,evaluateStep,solver,null,1,DEF,$ instanceof BracketedUnivariateSolver<?>
EventState.java,evaluateStep,root,double,1,DEF,FastMath.abs($ - ta) <= convergence
EventState.java,evaluateStep,ta,double,1,DEF,FastMath.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,1,DEF,FastMath.abs($ - previousEventTime) <= convergence
EventState.java,evaluateStep,previousEventTime,double,1,DEF,FastMath.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,1,RET,FastMath.abs(previousEventTime - $) > convergence
EventState.java,evaluateStep,previousEventTime,double,1,RET,FastMath.abs($ - root) > convergence
EventState.java,stepAccepted,t,double,1,DEF,FastMath.abs(pendingEventTime - $) <= convergence
EventState.java,stepAccepted,pendingEventTime,double,1,DEF,FastMath.abs($ - t) <= convergence
EventState.java,reset,t,double,0,RET,FastMath.abs(pendingEventTime - $) <= convergence
EventState.java,reset,pendingEventTime,double,0,RET,FastMath.abs($ - t) <= convergence
MultistepIntegrator.java,MultistepIntegrator,nSteps,int,0,MathIllegalArgumentException,$ <= 1
MultistepIntegrator.java,handleStep,count,int,0,DEF,$ == 0
JacobianMatrices.java,JacobianMatrices,parameters,String[],1,DEF,$ == null
JacobianMatrices.java,registerVariationalEquations,expandable,ExpandableStatefulODE,0,MathIllegalArgumentException,$.getPrimary() != ode
JacobianMatrices.java,setInitialMainStateJacobian,efode,ExpandableStatefulODE,0,DEF,$ != null
JacobianMatrices.java,setInitialParameterJacobian,efode,ExpandableStatefulODE,0,DEF,$ != null
JacobianMatrices.java,checkDimension,arrayDimension,int,0,DimensionMismatchException,$ != expected
JacobianMatrices.java,computeDerivatives,paramDim,int,0,DEF,$ != 0
JacobianMatrices.java,computeDerivatives,paramDim,int,0,MathIllegalArgumentException,$ != 0
EquationsMapper.java,extractEquationData,equationData,double[],0,DimensionMismatchException,$.length != dimension
EquationsMapper.java,insertEquationData,equationData,double[],0,DimensionMismatchException,$.length != dimension
ArgUtils.java,flatten,array,Object[],0,DEF,$ != null
ArgUtils.java,flatten,o,null,1,DEF,$ instanceof Object[]
ExceptionContext.java,buildMessage,count,int,0,DEF,++$ < len
ExceptionContext.java,serializeContext,value,null,1,DEF,$ instanceof Serializable
BinaryMutation.java,mutate,original,null,0,MathIllegalArgumentException,$ instanceof BinaryChromosome
FixedElapsedTime.java,FixedElapsedTime,maxTime,long,0,NumberIsTooSmallException,$ < 0
FixedElapsedTime.java,isSatisfied,endTime,long,0,DEF,$ < 0
RandomKey.java,decodeGeneric,representation,List<Double>,0,DimensionMismatchException,$.size() != l
RandomKey.java,decodeGeneric,sortedRepr,List<Double>,0,DimensionMismatchException,$.size() != l
RandomKey.java,isSame,another,null,0,RET,$ instanceof RandomKey<?>
RandomKey.java,checkValidity,val,double,0,InvalidRepresentationException,$ < 0
RandomKey.java,checkValidity,val,double,0,InvalidRepresentationException,$ > 1
RandomKey.java,inducedPermutation,index,int,0,MathIllegalArgumentException,$ == -1
GeneticAlgorithm.java,GeneticAlgorithm,crossoverRate,double,0,OutOfRangeException,$ < 0
GeneticAlgorithm.java,GeneticAlgorithm,crossoverRate,double,0,OutOfRangeException,$ > 1
GeneticAlgorithm.java,GeneticAlgorithm,mutationRate,double,0,OutOfRangeException,$ < 0
GeneticAlgorithm.java,GeneticAlgorithm,mutationRate,double,0,OutOfRangeException,$ > 1
Chromosome.java,searchForFitnessUpdate,sameChromosome,Chromosome,0,DEF,$ != null
ElitisticListPopulation.java,setElitismRate,elitismRate,double,0,OutOfRangeException,$ < 0
ElitisticListPopulation.java,setElitismRate,elitismRate,double,0,OutOfRangeException,$ > 1
NPointCrossover.java,NPointCrossover,crossoverPoints,int,0,NotStrictlyPositiveException,$ <= 0
NPointCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
NPointCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
NPointCrossover.java,mate,crossoverPoints,int,0,NumberIsTooLargeException,$ >= length
BinaryChromosome.java,checkValidity,i,int,0,InvalidRepresentationException,$ < 0
BinaryChromosome.java,checkValidity,i,int,0,InvalidRepresentationException,$ >1
BinaryChromosome.java,isSame,another,null,0,RET,$ instanceof BinaryChromosome
OnePointCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
OnePointCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
RandomKeyMutation.java,mutate,original,null,0,MathIllegalArgumentException,$ instanceof RandomKey<?>
UniformCrossover.java,UniformCrossover,ratio,double,0,OutOfRangeException,$ < 0.0d
UniformCrossover.java,UniformCrossover,ratio,double,0,OutOfRangeException,$ > 1.0d
UniformCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
UniformCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
UniformCrossover.java,mate,random,RandomGenerator,1,DEF,$.nextDouble() < ratio
ListPopulation.java,ListPopulation,chromosomes,List<Chromosome>,0,NullArgumentException,$ == null
ListPopulation.java,ListPopulation,populationLimit,int,0,NotPositiveException,$ <= 0
ListPopulation.java,ListPopulation,chromosomes,List<Chromosome>,0,NumberIsTooLargeException,$.size() > populationLimit
ListPopulation.java,setChromosomes,chromosomes,List<Chromosome>,0,NullArgumentException,$ == null
ListPopulation.java,setChromosomes,chromosomes,List<Chromosome>,0,NumberIsTooLargeException,$.size() > populationLimit
ListPopulation.java,addChromosomes,chromosomeColl,Collection<Chromosome>,0,NumberIsTooLargeException,chromosomes.size() + $.size() > populationLimit
ListPopulation.java,addChromosomes,chromosomes,List<Chromosome>,0,NumberIsTooLargeException,$.size() + chromosomeColl.size() > populationLimit
ListPopulation.java,addChromosome,chromosomes,List<Chromosome>,0,NumberIsTooLargeException,$.size() >= populationLimit
ListPopulation.java,getFittestChromosome,bestChromosome,Chromosome,0,DEF,chromosome.compareTo($) > 0
ListPopulation.java,getFittestChromosome,chromosome,Chromosome,0,DEF,$.compareTo(bestChromosome) > 0
ListPopulation.java,setPopulationLimit,populationLimit,int,0,NotPositiveException,$ <= 0
FixedGenerationCount.java,FixedGenerationCount,maxGenerations,int,0,NumberIsTooSmallException,$ <= 0
ConjugateGradient.java,solveInPlace,m,RealLinearOperator,1,DEF,$ == null
ConjugateGradient.java,solveInPlace,rnorm,double,0,RET,$ <= rmax
ConjugateGradient.java,solveInPlace,m,RealLinearOperator,0,DEF,$ != null
ConjugateGradient.java,solveInPlace,rhoNext,double,0,DEF,$ <= 0.
ConjugateGradient.java,solveInPlace,manager,IterationManager,1,DEF,$.getIterations() == 2
ConjugateGradient.java,solveInPlace,pq,double,0,DEF,$ <= 0.
ConjugateGradient.java,solveInPlace,rnorm,double,0,RET,$ <= rmax
JacobiPreconditioner.java,create,a,RealLinearOperator,0,NonSquareOperatorException,$.getRowDimension() != n
JacobiPreconditioner.java,create,a,null,1,DEF,$ instanceof AbstractRealMatrix
RealVectorFormat.java,format,i,int,0,DEF,$ > 0
RealVectorFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
RealVectorFormat.java,parse,component,Number,1,DEF,$ != null
Array2DRowRealMatrix.java,Array2DRowRealMatrix,d,double[][],0,NullArgumentException,$ == null
Array2DRowRealMatrix.java,Array2DRowRealMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,Array2DRowRealMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,Array2DRowRealMatrix,r,int,0,DimensionMismatchException,d[$].length != nCols
Array2DRowRealMatrix.java,Array2DRowRealMatrix,d,double[][],0,DimensionMismatchException,$[r].length != nCols
Array2DRowRealMatrix.java,setSubMatrix,data,double[][],1,DimensionMismatchException,$ == null
Array2DRowRealMatrix.java,setSubMatrix,row,int,0,MathIllegalStateException,$ > 0
Array2DRowRealMatrix.java,setSubMatrix,column,int,0,MathIllegalStateException,$ > 0
Array2DRowRealMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,setSubMatrix,i,int,0,DimensionMismatchException,subMatrix[$].length != nCols
Array2DRowRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DimensionMismatchException,$[i].length != nCols
Array2DRowRealMatrix.java,operate,v,double[],0,DimensionMismatchException,$.length != nCols
Array2DRowRealMatrix.java,preMultiply,v,double[],0,DimensionMismatchException,$.length != nRows
AbstractRealMatrix.java,AbstractRealMatrix,rowDimension,int,0,NotStrictlyPositiveException,$ < 1
AbstractRealMatrix.java,AbstractRealMatrix,columnDimension,int,0,NotStrictlyPositiveException,$ < 1
AbstractRealMatrix.java,power,p,int,0,IllegalArgumentException,$ < 0
AbstractRealMatrix.java,power,p,int,0,RET,$ == 0
AbstractRealMatrix.java,power,p,int,0,RET,$ == 1
AbstractRealMatrix.java,power,i,int,0,DEF,binaryRepresentation[$] == '1'
AbstractRealMatrix.java,power,binaryRepresentation,char[],0,DEF,$[i] == '1'
AbstractRealMatrix.java,power,maxI,int,0,DEF,$ == -1
AbstractRealMatrix.java,visit,row,int,0,DEF,$ == endRow
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$.length < rowsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$[0].length < columnsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$.length < selectedRows.length
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$[0].length < selectedColumns.length
AbstractRealMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
AbstractRealMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
AbstractRealMatrix.java,setSubMatrix,r,int,0,DimensionMismatchException,subMatrix[$].length != nCols
AbstractRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DimensionMismatchException,$[r].length != nCols
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
AbstractRealMatrix.java,setRowVector,vector,RealVector,0,MatrixDimensionMismatchException,$.getDimension() != nCols
AbstractRealMatrix.java,setColumnVector,vector,RealVector,0,MatrixDimensionMismatchException,$.getDimension() != nRows
AbstractRealMatrix.java,setRow,array,double[],0,MatrixDimensionMismatchException,$.length != nCols
AbstractRealMatrix.java,setColumn,array,double[],0,MatrixDimensionMismatchException,$.length != nRows
AbstractRealMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractRealMatrix.java,operate,v,double[],0,DimensionMismatchException,$.length != nCols
AbstractRealMatrix.java,operate,v,RealVector,0,DimensionMismatchException,$.getDimension() != nCols
AbstractRealMatrix.java,preMultiply,v,double[],0,DimensionMismatchException,$.length != nRows
AbstractRealMatrix.java,preMultiply,v,RealVector,0,DimensionMismatchException,$.getDimension() != nRows
AbstractRealMatrix.java,equals,object,Object,0,RET,$ instanceof RealMatrix == false
AbstractRealMatrix.java,equals,object,null,0,RET,$ instanceof RealMatrix
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getColumnDimension() != nCols
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getRowDimension() != nRows
SymmLQ.java,checkSymmetry,s,double,0,DEF,FastMath.abs($ - t) > epsa
SymmLQ.java,checkSymmetry,t,double,0,DEF,FastMath.abs(s - $) > epsa
SymmLQ.java,refineSolution,lqnorm,double,1,DEF,$ < cgnorm
SymmLQ.java,update,m,RealLinearOperator,0,DEF,$ != null
SymmLQ.java,update,beta,double,0,DEF,$ < 0.
SymmLQ.java,updateNorms,lqnorm,double,1,DEF,$ <= cgnorm
SymmLQ.java,updateNorms,acond,double,0,IllConditionedOperatorException,$ * MACH_PREC >= 0.1
SymmLQ.java,updateNorms,MACH_PREC,double,0,IllConditionedOperatorException,acond * $ >= 0.1
SymmLQ.java,updateNorms,beta1,double,0,SingularOperatorException,$ <= epsx
BlockRealMatrix.java,toBlocksLayout,length,int,0,DimensionMismatchException,$ != columns
BlockRealMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,setSubMatrix,refLength,int,0,NoDataException,$ == 0
BlockRealMatrix.java,setSubMatrix,subRow,double[],0,DimensionMismatchException,$.length != refLength
BlockRealMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
BlockRealMatrix.java,setRowMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
BlockRealMatrix.java,setRowMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
BlockRealMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
BlockRealMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
BlockRealMatrix.java,setColumnMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
BlockRealMatrix.java,setColumnMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
BlockRealMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
BlockRealMatrix.java,setRow,array,double[],0,MatrixDimensionMismatchException,$.length != nCols
BlockRealMatrix.java,setColumn,array,double[],0,MatrixDimensionMismatchException,$.length != nRows
BlockRealMatrix.java,operate,v,double[],0,DimensionMismatchException,$.length != columns
BlockRealMatrix.java,preMultiply,v,double[],0,DimensionMismatchException,$.length != rows
MatrixUtils.java,createRealMatrix,data,double[][],0,NullArgumentException,$ == null
MatrixUtils.java,createRealMatrix,data,double[][],0,NullArgumentException,$[0] == null
MatrixUtils.java,createFieldMatrix,data,T[][],0,NullArgumentException,$ == null
MatrixUtils.java,createFieldMatrix,data,T[][],0,NullArgumentException,$[0] == null
MatrixUtils.java,createRealVector,data,double[],0,NullArgumentException,$ == null
MatrixUtils.java,createFieldVector,data,T[],0,NullArgumentException,$ == null
MatrixUtils.java,createFieldVector,data,T[],0,ZeroException,$.length == 0
MatrixUtils.java,createRowRealMatrix,rowData,double[],0,NullArgumentException,$ == null
MatrixUtils.java,createRowFieldMatrix,rowData,T[],0,NullArgumentException,$ == null
MatrixUtils.java,createRowFieldMatrix,nCols,int,0,NoDataException,$ == 0
MatrixUtils.java,createColumnRealMatrix,columnData,double[],0,NullArgumentException,$ == null
MatrixUtils.java,createColumnFieldMatrix,columnData,T[],0,NullArgumentException,$ == null
MatrixUtils.java,createColumnFieldMatrix,nRows,int,0,NoDataException,$ == 0
MatrixUtils.java,checkRowIndex,row,int,0,OutOfRangeException,$ < 0
MatrixUtils.java,checkColumnIndex,column,int,0,OutOfRangeException,$ < 0
MatrixUtils.java,checkSubMatrixIndex,endRow,int,0,NumberIsTooSmallException,$ < startRow
MatrixUtils.java,checkSubMatrixIndex,endColumn,int,0,NumberIsTooSmallException,$ < startColumn
MatrixUtils.java,checkSubMatrixIndex,selectedRows,int[],0,NullArgumentException,$ == null
MatrixUtils.java,checkSubMatrixIndex,selectedColumns,int[],0,NullArgumentException,$ == null
MatrixUtils.java,checkSubMatrixIndex,selectedRows,int[],0,NoDataException,$.length == 0
MatrixUtils.java,checkSubMatrixIndex,selectedColumns,int[],0,NoDataException,$.length == 0
MatrixUtils.java,solveLowerTriangularSystem,rm,RealMatrix,0,MathIllegalArgumentException,$ == null
MatrixUtils.java,solveLowerTriangularSystem,b,RealVector,0,MathIllegalArgumentException,$ == null
MatrixUtils.java,solveLowerTriangularSystem,diag,double,0,MathArithmeticException,FastMath.abs($) < Precision.SAFE_MIN
MatrixUtils.java,solveUpperTriangularSystem,rm,RealMatrix,0,MathIllegalArgumentException,$ == null
MatrixUtils.java,solveUpperTriangularSystem,b,RealVector,0,MathIllegalArgumentException,$ == null
MatrixUtils.java,solveUpperTriangularSystem,diag,double,0,MathArithmeticException,FastMath.abs($) < Precision.SAFE_MIN
SchurTransformer.java,getP,cachedP,RealMatrix,0,DEF,$ == null
SchurTransformer.java,getPT,cachedPt,RealMatrix,0,DEF,$ == null
SchurTransformer.java,getT,cachedT,RealMatrix,0,DEF,$ == null
SchurTransformer.java,transform,l,int,1,DEF,$ == idx
SchurTransformer.java,transform,q,double,0,DEF,$ >= 0
SchurTransformer.java,transform,p,double,1,DEF,$ >= 0
SchurTransformer.java,transform,iteration,int,0,MaxCountExceededException,++$ > maxIterations
SchurTransformer.java,transform,m,int,0,DEF,$ == l
SchurTransformer.java,computeShift,l,int,0,DEF,$ < idx
SchurTransformer.java,computeShift,iteration,int,0,DEF,$ == 10
SchurTransformer.java,computeShift,iteration,int,0,DEF,$ == 30
SchurTransformer.java,computeShift,epsilon,double,0,DEF,Precision.compareTo(s, 0.0d, $) > 0
SchurTransformer.java,computeShift,s,double,0,DEF,Precision.compareTo($, 0.0d, epsilon) > 0
SchurTransformer.java,computeShift,shift,ShiftInfo,0,DEF,$.y < shift.x
SchurTransformer.java,performDoubleQRStep,k,int,0,DEF,$ != m
SchurTransformer.java,performDoubleQRStep,p,double,0,DEF,Precision.compareTo($, 0.0, epsilon) < 0
SchurTransformer.java,performDoubleQRStep,epsilon,double,0,DEF,Precision.compareTo(p, 0.0, $) < 0
SchurTransformer.java,performDoubleQRStep,k,int,1,DEF,$ != m
SchurTransformer.java,performDoubleQRStep,l,int,0,DEF,$ != m
RealVector.java,checkVectorDimensions,d,int,0,DimensionMismatchException,$ != n
RealVector.java,checkIndex,index,int,0,OutOfRangeException,$ < 0
RealVector.java,checkIndices,start,int,0,OutOfRangeException,$ < 0
RealVector.java,checkIndices,start,int,0,OutOfRangeException,$ >= dim
RealVector.java,checkIndices,end,int,0,OutOfRangeException,$ < 0
RealVector.java,checkIndices,end,int,0,OutOfRangeException,$ >= dim
RealVector.java,checkIndices,end,int,0,NumberIsTooSmallException,$ < start
RealVector.java,mapAddToSelf,d,double,0,RET,$ != 0
RealVector.java,cosine,norm,double,0,MathArithmeticException,$ == 0
RealVector.java,cosine,vNorm,double,0,MathArithmeticException,$ == 0
RealVector.java,getMinIndex,entry,Entry,0,DEF,$.getValue() <= minValue
RealVector.java,getMaxIndex,entry,Entry,0,DEF,$.getValue() >= maxValue
RealVector.java,outerProduct,v,null,1,DEF,$ instanceof SparseRealVector
RealVector.java,projection,norm2,double,0,MathArithmeticException,$ == 0.0
RealVector.java,unitVector,norm,double,0,MathArithmeticException,$ == 0
RealVector.java,unitize,norm,double,0,MathArithmeticException,$ == 0
RealVector.java,next,i,int,1,RET,$ < dim
RealVector.java,SparseEntryIterator,next,Entry,0,DEF,$.getValue() == 0
RealVector.java,advance,e,Entry,0,RET,$ == null
RealVector.java,advance,e,Entry,0,DEF,$.getIndex() >= dim
RealVector.java,next,index,int,0,NoSuchElementException,$ < 0
TriDiagonalTransformer.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,cachedQt,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,hK,double[],0,DEF,$[k] != 0.0
TriDiagonalTransformer.java,getQT,k,int,0,DEF,hK[$] != 0.0
TriDiagonalTransformer.java,getT,cachedT,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getT,i,int,0,DEF,$ > 0
TriDiagonalTransformer.java,transform,a,double,0,DEF,$ != 0.0
DefaultIterativeLinearSolverEvent.java,getResidual,r,RealVector,0,RET,$ != null
HessenbergTransformer.java,getP,cachedP,RealMatrix,0,DEF,$ == null
HessenbergTransformer.java,getP,householderVectors,double[][],0,DEF,$[m][m - 1] != 0.0
HessenbergTransformer.java,getP,m,int,0,DEF,householderVectors[$][$ - 1] != 0.0
HessenbergTransformer.java,getPT,cachedPt,RealMatrix,0,DEF,$ == null
HessenbergTransformer.java,getH,cachedH,RealMatrix,0,DEF,$ == null
HessenbergTransformer.java,getH,i,int,0,DEF,$ > 0
QRDecomposition.java,QRDecomposition,a,double,0,DEF,$ != 0.0
QRDecomposition.java,getR,cachedR,RealMatrix,0,DEF,$ == null
QRDecomposition.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
QRDecomposition.java,getQT,cachedQT,RealMatrix,0,DEF,$ == null
QRDecomposition.java,getQT,minor,int,0,DEF,qrtMinor[$] != 0.0
QRDecomposition.java,getQT,qrtMinor,double[],0,DEF,$[minor] != 0.0
QRDecomposition.java,getH,cachedH,RealMatrix,0,DEF,$ == null
QRDecomposition.java,isNonSingular,diag,double,0,RET,FastMath.abs($) <= threshold
QRDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
QRDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
OpenMapRealMatrix.java,OpenMapRealMatrix,lCol,long,0,NumberIsTooLargeException,lRow * $ >= Integer.MAX_VALUE
OpenMapRealMatrix.java,OpenMapRealMatrix,lRow,long,0,NumberIsTooLargeException,$ * lCol >= Integer.MAX_VALUE
OpenMapRealMatrix.java,multiply,outValue,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,setEntry,value,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,addToEntry,value,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,multiplyEntry,value,double,1,DEF,$ == 0.0
SparseFieldVector.java,append,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,getSubVector,key,int,0,DEF,$ >= index
SparseFieldVector.java,getSubVector,key,int,0,DEF,$ < end
SparseFieldVector.java,outerProduct,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,subtract,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,checkIndex,index,int,0,OutOfRangeException,$ < 0
SparseFieldVector.java,add,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,equals,obj,null,0,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,equals,field,Field<T>,1,RET,$ == null
SparseFieldVector.java,equals,other,SparseFieldVector<T>,0,RET,$.field != null
SparseFieldVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
AbstractFieldMatrix.java,AbstractFieldMatrix,rowDimension,int,0,NotStrictlyPositiveException,$ <= 0
AbstractFieldMatrix.java,AbstractFieldMatrix,columnDimension,int,0,NotStrictlyPositiveException,$ <= 0
AbstractFieldMatrix.java,extractField,d,T[][],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,extractField,d,T[][],0,NoDataException,$.length == 0
AbstractFieldMatrix.java,extractField,d,T[][],0,NoDataException,$[0].length == 0
AbstractFieldMatrix.java,extractField,d,T[],0,NoDataException,$.length == 0
AbstractFieldMatrix.java,buildArray,columns,int,0,RET,$ < 0
AbstractFieldMatrix.java,power,p,int,0,IllegalArgumentException,$ < 0
AbstractFieldMatrix.java,power,p,int,0,RET,$ == 0
AbstractFieldMatrix.java,power,p,int,0,RET,$ == 1
AbstractFieldMatrix.java,power,i,int,0,DEF,binaryRepresentation[$] == '1'
AbstractFieldMatrix.java,power,binaryRepresentation,char[],0,DEF,$[i] == '1'
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$.length < rowsCount
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$[0].length < columnsCount
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$.length < selectedRows.length
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$[0].length < selectedColumns.length
AbstractFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
AbstractFieldMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
AbstractFieldMatrix.java,setSubMatrix,r,int,0,DimensionMismatchException,subMatrix[$].length != nCols
AbstractFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,DimensionMismatchException,$[r].length != nCols
AbstractFieldMatrix.java,setRowMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
AbstractFieldMatrix.java,setRowMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
AbstractFieldMatrix.java,setColumnMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
AbstractFieldMatrix.java,setColumnMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
AbstractFieldMatrix.java,setRowVector,vector,FieldVector<T>,0,MatrixDimensionMismatchException,$.getDimension() != nCols
AbstractFieldMatrix.java,setColumnVector,vector,FieldVector<T>,0,MatrixDimensionMismatchException,$.getDimension() != nRows
AbstractFieldMatrix.java,setRow,array,T[],0,MatrixDimensionMismatchException,$.length != nCols
AbstractFieldMatrix.java,setColumn,array,T[],0,MatrixDimensionMismatchException,$.length != nRows
AbstractFieldMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractFieldMatrix.java,operate,v,T[],0,DimensionMismatchException,$.length != nCols
AbstractFieldMatrix.java,operate,v,FieldVector<T>,0,DimensionMismatchException,$.getDimension() != nCols
AbstractFieldMatrix.java,preMultiply,v,T[],0,DimensionMismatchException,$.length != nRows
AbstractFieldMatrix.java,preMultiply,v,FieldVector<T>,0,DimensionMismatchException,$.getDimension() != nRows
AbstractFieldMatrix.java,toString,i,int,0,DEF,$ > 0
AbstractFieldMatrix.java,toString,j,int,0,DEF,$ > 0
AbstractFieldMatrix.java,equals,object,Object,0,RET,$ instanceof FieldMatrix<?> == false
AbstractFieldMatrix.java,equals,object,null,0,RET,$ instanceof FieldMatrix<?>
AbstractFieldMatrix.java,equals,m,FieldMatrix<>,0,RET,$.getColumnDimension() != nCols
AbstractFieldMatrix.java,equals,m,FieldMatrix<>,0,RET,$.getRowDimension() != nRows
AbstractFieldMatrix.java,checkRowIndex,row,int,0,OutOfRangeException,$ < 0
AbstractFieldMatrix.java,checkColumnIndex,column,int,0,OutOfRangeException,$ < 0
AbstractFieldMatrix.java,checkSubMatrixIndex,endRow,int,0,NumberIsTooSmallException,$ < startRow
AbstractFieldMatrix.java,checkSubMatrixIndex,endColumn,int,0,NumberIsTooSmallException,$ < startColumn
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedColumns,int[],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,NoDataException,$.length == 0
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedColumns,int[],0,NoDataException,$.length == 0
LUDecomposition.java,LUDecomposition,sum,double,0,DEF,FastMath.abs($) > largest
LUDecomposition.java,LUDecomposition,col,int,0,RET,FastMath.abs(lu[max][$]) < singularityThreshold
LUDecomposition.java,LUDecomposition,max,int,0,RET,FastMath.abs(lu[$][col]) < singularityThreshold
LUDecomposition.java,LUDecomposition,lu,double[][],0,RET,FastMath.abs($[max][col]) < singularityThreshold
LUDecomposition.java,LUDecomposition,max,int,0,DEF,$ != col
LUDecomposition.java,getL,cachedL,RealMatrix,0,DEF,$ == null
LUDecomposition.java,getU,cachedU,RealMatrix,0,DEF,$ == null
LUDecomposition.java,getP,cachedP,RealMatrix,0,DEF,$ == null
LUDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
LUDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
EigenDecomposition.java,getV,cachedV,RealMatrix,0,DEF,$ == null
EigenDecomposition.java,getD,cachedD,RealMatrix,0,DEF,$ == null
EigenDecomposition.java,getD,epsilon,double,1,DEF,Precision.compareTo(imagEigenvalues[i], 0.0, $) > 0
EigenDecomposition.java,getD,imagEigenvalues,double[],1,DEF,Precision.compareTo($[i], 0.0, epsilon) > 0
EigenDecomposition.java,getD,i,int,1,DEF,Precision.compareTo(imagEigenvalues[$], 0.0, epsilon) > 0
EigenDecomposition.java,getD,epsilon,double,0,DEF,Precision.compareTo(imagEigenvalues[i], 0.0, $) < 0
EigenDecomposition.java,getD,imagEigenvalues,double[],0,DEF,Precision.compareTo($[i], 0.0, epsilon) < 0
EigenDecomposition.java,getD,i,int,0,DEF,Precision.compareTo(imagEigenvalues[$], 0.0, epsilon) < 0
EigenDecomposition.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
EigenDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
EigenDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
EigenDecomposition.java,isNonSingular,realEigenvalues,double[],0,RET,$[i] == 0
EigenDecomposition.java,isNonSingular,i,int,0,RET,realEigenvalues[$] == 0
EigenDecomposition.java,isNonSingular,imagEigenvalues,double[],0,RET,$[i] == 0
EigenDecomposition.java,isNonSingular,i,int,0,RET,imagEigenvalues[$] == 0
EigenDecomposition.java,findEigenVectors,realEigenvalues,double[],0,DEF,FastMath.abs($[i]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,e,double[],0,DEF,FastMath.abs($[i]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,FastMath.abs(e[$]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,maxAbsoluteValue,double,0,DEF,$ != 0
EigenDecomposition.java,findEigenVectors,e,double[],0,DEF,FastMath.abs($[m]) + delta == delta
EigenDecomposition.java,findEigenVectors,delta,double,0,DEF,FastMath.abs(e[m]) + $ == delta
EigenDecomposition.java,findEigenVectors,m,int,0,DEF,FastMath.abs(e[$]) + delta == delta
EigenDecomposition.java,findEigenVectors,m,int,0,MaxCountExceededException,$ != j
EigenDecomposition.java,findEigenVectors,its,int,0,MaxCountExceededException,$ == maxIter
EigenDecomposition.java,findEigenVectors,q,double,1,DEF,$ < 0.0
EigenDecomposition.java,findEigenVectors,e,double[],0,DEF,$[i + 1] == 0.0
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,e[$ + 1] == 0.0
EigenDecomposition.java,findEigenVectors,t,double,0,DEF,$ == 0.0
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,$ >= j
EigenDecomposition.java,findEigenVectors,realEigenvalues,double[],0,DEF,$[j] > p
EigenDecomposition.java,findEigenVectors,j,int,0,DEF,realEigenvalues[$] > p
EigenDecomposition.java,findEigenVectors,k,int,0,DEF,$ != i
EigenDecomposition.java,findEigenVectors,realEigenvalues,double[],0,DEF,FastMath.abs($[i]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,maxAbsoluteValue,double,0,DEF,$ != 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,epsilon,double,1,DEF,Precision.compareTo(imagEigenvalues[i], 0.0, $) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,imagEigenvalues,double[],1,DEF,Precision.compareTo($[i], 0.0, epsilon) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,i,int,1,DEF,Precision.compareTo(imagEigenvalues[$], 0.0, epsilon) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,w,double,1,DEF,$ != 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,t,double,0,DEF,(Precision.EPSILON * $) * $ > 1
EigenDecomposition.java,findEigenVectorsFromSchur,q,double,0,DEF,$ < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,epsilon,double,1,DEF,Precision.compareTo(imagEigenvalues[i], 0.0, $) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,imagEigenvalues,double[],1,DEF,Precision.compareTo($[i], 0.0, epsilon) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,i,int,1,DEF,Precision.compareTo(imagEigenvalues[$], 0.0, epsilon) < 0.0
EigenDecomposition.java,findEigenVectorsFromSchur,t,double,0,DEF,(Precision.EPSILON * $) * $ > 1
EigenDecomposition.java,findEigenVectorsFromSchur,i,int,0,DEF,$ < 0
BlockFieldMatrix.java,toBlocksLayout,length,int,0,DimensionMismatchException,$ != columns
BlockFieldMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,setSubMatrix,refLength,int,0,NoDataException,$ == 0
BlockFieldMatrix.java,setSubMatrix,subRow,T[],0,DimensionMismatchException,$.length != refLength
BlockFieldMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
BlockFieldMatrix.java,setRowMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
BlockFieldMatrix.java,setRowMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
BlockFieldMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
BlockFieldMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
BlockFieldMatrix.java,setColumnMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
BlockFieldMatrix.java,setColumnMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
BlockFieldMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
BlockFieldMatrix.java,setRow,array,T[],0,MatrixDimensionMismatchException,$.length != nCols
BlockFieldMatrix.java,setColumn,array,T[],0,MatrixDimensionMismatchException,$.length != nRows
BlockFieldMatrix.java,operate,v,T[],0,DimensionMismatchException,$.length != columns
BlockFieldMatrix.java,preMultiply,v,T[],0,DimensionMismatchException,$.length != rows
PreconditionedIterativeLinearSolver.java,checkParameters,m,RealLinearOperator,0,DimensionMismatchException,$ != null
CholeskyDecomposition.java,CholeskyDecomposition,lJI,double,0,NonSymmetricMatrixException,FastMath.abs(lIJ - $) > maxDelta
CholeskyDecomposition.java,CholeskyDecomposition,lIJ,double,0,NonSymmetricMatrixException,FastMath.abs($ - lJI) > maxDelta
CholeskyDecomposition.java,CholeskyDecomposition,ltI,double[],0,NonPositiveDefiniteMatrixException,$[i] <= absolutePositivityThreshold
CholeskyDecomposition.java,CholeskyDecomposition,i,int,0,NonPositiveDefiniteMatrixException,ltI[$] <= absolutePositivityThreshold
CholeskyDecomposition.java,getL,cachedL,RealMatrix,0,DEF,$ == null
CholeskyDecomposition.java,getLT,cachedLT,RealMatrix,0,DEF,$ == null
CholeskyDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
CholeskyDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,r,int,0,DimensionMismatchException,d[$].length != nCols
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,d,T[][],0,DimensionMismatchException,$[r].length != nCols
Array2DRowFieldMatrix.java,setSubMatrix,data,T[][],1,DimensionMismatchException,$ == null
Array2DRowFieldMatrix.java,setSubMatrix,row,int,0,MathIllegalStateException,$ > 0
Array2DRowFieldMatrix.java,setSubMatrix,column,int,0,MathIllegalStateException,$ > 0
Array2DRowFieldMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,setSubMatrix,i,int,0,DimensionMismatchException,subMatrix[$].length != nCols
Array2DRowFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,DimensionMismatchException,$[i].length != nCols
Array2DRowFieldMatrix.java,operate,v,T[],0,DimensionMismatchException,$.length != nCols
Array2DRowFieldMatrix.java,preMultiply,v,T[],0,DimensionMismatchException,$.length != nRows
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nct
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,singularValues[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,A,double[][],0,DEF,$[k][k] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,A[$][$] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nct
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,singularValues[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nct
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nrt
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k + 1] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$ + 1] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ + 1 < m
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,nct,int,0,DEF,$ < n
SingularValueDecomposition.java,SingularValueDecomposition,m,int,0,DEF,$ < p
SingularValueDecomposition.java,SingularValueDecomposition,nrt,int,0,DEF,$ + 1 < p
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],1,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,1,DEF,singularValues[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nrt
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,FastMath.abs($[k]) <= threshold
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,FastMath.abs(e[$]) <= threshold
SingularValueDecomposition.java,SingularValueDecomposition,ks,int,0,DEF,$ == k
SingularValueDecomposition.java,SingularValueDecomposition,ks,int,1,DEF,$ == k
SingularValueDecomposition.java,SingularValueDecomposition,j,int,0,DEF,$ != k
SingularValueDecomposition.java,SingularValueDecomposition,b,double,0,DEF,$ != 0
SingularValueDecomposition.java,SingularValueDecomposition,c,double,0,DEF,$ != 0
SingularValueDecomposition.java,SingularValueDecomposition,b,double,0,DEF,$ < 0
SingularValueDecomposition.java,SingularValueDecomposition,j,int,0,DEF,$ != k
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],0,DEF,$[k] <= 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,singularValues[$] <= 0
SingularValueDecomposition.java,getUT,cachedUt,RealMatrix,0,DEF,$ == null
SingularValueDecomposition.java,getS,cachedS,RealMatrix,0,DEF,$ == null
SingularValueDecomposition.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
SingularValueDecomposition.java,getCovariance,dimension,int,0,NumberIsTooLargeException,$ == 0
SingularValueDecomposition.java,getRank,singularValues,double[],0,DEF,$[i] > tol
SingularValueDecomposition.java,getRank,i,int,0,DEF,singularValues[$] > tol
SingularValueDecomposition.java,Solver,singularValues,double[],1,DEF,$[i] > tol
SingularValueDecomposition.java,Solver,i,int,1,DEF,singularValues[$] > tol
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,ZeroException,$.length == 0
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v,FieldVector<T>,0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v,ArrayFieldVector<T>,0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v,ArrayFieldVector<T>,0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v1,ArrayFieldVector<T>,0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v2,ArrayFieldVector<T>,0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v1,ArrayFieldVector<T>,0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v2,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v1,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v2,ArrayFieldVector<T>,0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v1,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v2,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v1,T[],0,ZeroException,$.length + v2.length == 0
ArrayFieldVector.java,ArrayFieldVector,v2,T[],0,ZeroException,v1.length + $.length == 0
ArrayFieldVector.java,ArrayFieldVector,v1,T[],0,ZeroException,$.length + v2.length == 0
ArrayFieldVector.java,ArrayFieldVector,v2,T[],0,ZeroException,v1.length + $.length == 0
ArrayFieldVector.java,checkVectorDimensions,data,T[],0,DimensionMismatchException,$.length != n
ArrayFieldVector.java,equals,other,Object,0,RET,$ == null
ArrayFieldVector.java,checkIndex,index,int,0,OutOfRangeException,$ < 0
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,r,int,0,DEF,swap[$] != r
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,swap,int[],0,DEF,$[r] != r
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,c,double[][],1,NonPositiveDefiniteMatrixException,$[ir][ir] < small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,ir,int,1,NonPositiveDefiniteMatrixException,c[$][$] < small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,r,int,0,NonPositiveDefiniteMatrixException,$ == 0
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,c,double[][],0,NonPositiveDefiniteMatrixException,$[index[i]][index[i]] < -small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,index,int[],0,NonPositiveDefiniteMatrixException,c[$[i]][$[i]] < -small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,i,int,0,NonPositiveDefiniteMatrixException,c[index[$]][index[$]] < -small
ArrayRealVector.java,ArrayRealVector,d,double[],0,NullArgumentException,$ == null
ArrayRealVector.java,ArrayRealVector,d,double[],0,NullArgumentException,$ == null
ArrayRealVector.java,ArrayRealVector,d,Double[],0,NullArgumentException,$ == null
ArrayRealVector.java,ArrayRealVector,v,RealVector,0,NullArgumentException,$ == null
ArrayRealVector.java,add,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,subtract,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,ebeMultiply,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,ebeDivide,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,dotProduct,v,null,0,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getDistance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getL1Distance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getLInfDistance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,outerProduct,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getSubVector,n,int,0,NotPositiveException,$ < 0
ArrayRealVector.java,setSubVector,v,null,1,DEF,$ instanceof ArrayRealVector
ArrayRealVector.java,checkVectorDimensions,data,double[],0,DimensionMismatchException,$.length != n
ArrayRealVector.java,equals,other,null,0,RET,$ instanceof RealVector
ArrayRealVector.java,combineToSelf,y,null,1,DEF,$ instanceof ArrayRealVector
RealMatrixFormat.java,format,j,int,0,DEF,$ > 0
RealMatrixFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
RealMatrixFormat.java,parse,trimmedRowSuffix,String,1,RET,$.length() != 0
RealMatrixFormat.java,parse,trimmedRowPrefix,String,0,RET,$.length() != 0
RealMatrixFormat.java,parse,component,Number,1,DEF,$ != null
BiDiagonalTransformer.java,BiDiagonalTransformer,m,int,1,DEF,$ >= n
BiDiagonalTransformer.java,getU,cachedU,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getU,hK,double[],0,DEF,$[k - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,k,int,0,DEF,hK[$ - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,hK[k - $] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getB,cachedB,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getB,m,int,1,DEF,$ < n
BiDiagonalTransformer.java,getB,i,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getV,cachedV,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getV,hK,double[],0,DEF,$[k] != 0.0
BiDiagonalTransformer.java,getV,k,int,0,DEF,hK[$] != 0.0
BiDiagonalTransformer.java,getV,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,b,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,b,double,0,DEF,$ != 0.0
FieldLUDecomposition.java,FieldLUDecomposition,nonZero,int,0,RET,$ >= m
FieldLUDecomposition.java,FieldLUDecomposition,nonZero,int,0,DEF,$ != col
FieldLUDecomposition.java,getL,cachedL,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecomposition.java,getU,cachedU,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecomposition.java,getP,cachedP,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecomposition.java,solve,b,FieldVector<T>,0,DimensionMismatchException,$.getDimension() != m
FieldLUDecomposition.java,solve,length,int,0,DimensionMismatchException,$ != m
FieldLUDecomposition.java,solve,b,FieldMatrix<T>,0,DimensionMismatchException,$.getRowDimension() != m
OpenMapRealVector.java,add,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,append,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getSubVector,n,int,0,NotPositiveException,$ < 0
OpenMapRealVector.java,getSubVector,key,int,0,DEF,$ >= index
OpenMapRealVector.java,getSubVector,key,int,0,DEF,$ < end
OpenMapRealVector.java,getDistance,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getL1Distance,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getLInfDistance,delta,double,0,DEF,$ > max
OpenMapRealVector.java,getLInfDistance,iter,Iterator,0,DEF,$.value() > max
OpenMapRealVector.java,getLInfDistance,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,subtract,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,equals,obj,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
DfpDec.java,round,msb,int,0,RET,$ == 0
DfpDec.java,round,lsbthreshold,int,0,RET,$ <= 1
DfpDec.java,round,lsbthreshold,int,1,DEF,$ == 1
DfpDec.java,round,rh,int,0,DEF,$ != 0
DfpDec.java,round,exp,int,0,RET,$ < MIN_EXP
DfpDec.java,round,exp,int,0,RET,$ > MAX_EXP
DfpDec.java,round,n,int,0,RET,$ != 0
DfpDec.java,round,discarded,int,0,RET,$ != 0
DfpDec.java,nextAfter,result,Dfp,0,DEF,$.classify() == INFINITE
Dfp.java,Dfp,x,long,0,DEF,$ == Long.MIN_VALUE
Dfp.java,Dfp,x,long,1,DEF,$ < 0
Dfp.java,Dfp,mant,int[],0,DEF,$[i] != 0
Dfp.java,Dfp,i,int,0,DEF,mant[$] != 0
Dfp.java,Dfp,exponent,int,0,RET,$ == -1023
Dfp.java,Dfp,x,double,0,RET,$ == 0
Dfp.java,Dfp,bits,long,0,DEF,($ & 0x8000000000000000L) != 0
Dfp.java,Dfp,exponent,int,0,RET,$ == 1024
Dfp.java,Dfp,x,double,1,DEF,$ != x
Dfp.java,Dfp,x,double,1,DEF,$ < 0
Dfp.java,Dfp,bits,long,0,DEF,($ & 0x8000000000000000L) != 0
Dfp.java,Dfp,p,int,0,DEF,$ == -1
Dfp.java,Dfp,p,int,1,DEF,$ != -1
Dfp.java,Dfp,fpexp,String,0,DEF,$.charAt(i) == '-'
Dfp.java,Dfp,i,int,0,DEF,fpexp.charAt($) == '-'
Dfp.java,Dfp,fpexp,String,0,DEF,$.charAt(i) >= '0'
Dfp.java,Dfp,i,int,0,DEF,fpexp.charAt($) >= '0'
Dfp.java,Dfp,fpexp,String,0,DEF,$.charAt(i) <= '9'
Dfp.java,Dfp,i,int,0,DEF,fpexp.charAt($) <= '9'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.indexOf(-") != -1"
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) >= '1'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) >= '1'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) <= '9'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) <= '9'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) == '0'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) == '0'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) == '.'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) == '.'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) == '.'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) == '.'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) < '0'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) < '0'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) > '9'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) > '9'
Dfp.java,Dfp,q,int,0,DEF,$ != offset
Dfp.java,Dfp,q,int,0,DEF,$ == offset
Dfp.java,Dfp,striped,char[],1,DEF,$[q] == '0'
Dfp.java,Dfp,q,int,1,DEF,striped[$] == '0'
Dfp.java,Dfp,significantDigits,int,0,DEF,$ == 0
Dfp.java,Dfp,p,int,0,DEF,striped[$] != '0'
Dfp.java,Dfp,striped,char[],0,DEF,$[p] != '0'
Dfp.java,Dfp,q,int,0,DEF,$ < striped.length
Dfp.java,align,adiff,int,0,DEF,$ < 0
Dfp.java,align,diff,int,0,RET,$ == 0
Dfp.java,align,diff,int,1,DEF,$ < 0
Dfp.java,align,lostdigit,int,0,DEF,$ != 0
Dfp.java,equals,other,null,0,RET,$ instanceof Dfp
Dfp.java,compare,a,Dfp,0,RET,$.mant[$.mant.length - 1] == 0
Dfp.java,compare,b,Dfp,0,RET,$.mant[$.mant.length - 1] == 0
Dfp.java,compare,a,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,a,Dfp,0,RET,$.sign != b.sign
Dfp.java,compare,a,Dfp,1,RET,$.sign == -1
Dfp.java,compare,a,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,a,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,a,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,b,Dfp,0,RET,$.mant[$.mant.length-1] != 0
Dfp.java,compare,a,Dfp,0,RET,$.mant[b.mant.length-1] != 0
Dfp.java,compare,b,Dfp,0,RET,a.mant[$.mant.length-1] != 0
Dfp.java,compare,a,Dfp,0,RET,$.exp < b.exp
Dfp.java,compare,a,Dfp,0,RET,$.exp > b.exp
Dfp.java,remainder,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,remainder,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,trunc,nans,byte,0,RET,$ == INFINITE
Dfp.java,trunc,mant,int[],0,RET,$[$.length-1] == 0
Dfp.java,trunc,exp,int,0,RET,$ < 0
Dfp.java,trunc,exp,int,0,RET,$ >= mant.length
Dfp.java,trunc,result,Dfp,0,DEF,$.sign == -1
Dfp.java,trunc,result,Dfp,0,DEF,$.sign == 1
Dfp.java,trunc,result,Dfp,0,DEF,$.exp > 0
Dfp.java,trunc,result,Dfp,0,DEF,($.mant[mant.length-$.exp]&1) != 0
Dfp.java,trunc,mant,int[],0,DEF,(result.mant[$.length-result.exp]&1) != 0
Dfp.java,intValue,rounded,Dfp,0,DEF,$.sign == -1
Dfp.java,log10,mant,int[],0,RET,$[$.length-1] > 1000
Dfp.java,log10,mant,int[],0,RET,$[$.length-1] > 100
Dfp.java,log10,mant,int[],0,RET,$[$.length-1] > 10
Dfp.java,power10,e,int,1,DEF,$ >= 0
Dfp.java,add,nans,byte,0,RET,$ != FINITE
Dfp.java,add,x,Dfp,0,RET,$.nans != FINITE
Dfp.java,add,nans,byte,0,RET,$ == INFINITE
Dfp.java,add,x,Dfp,0,RET,$.nans == FINITE
Dfp.java,add,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,add,nans,byte,0,RET,$ == FINITE
Dfp.java,add,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,add,nans,byte,0,RET,$ == INFINITE
Dfp.java,add,sign,byte,0,RET,$ == x.sign
Dfp.java,add,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,add,nans,byte,0,RET,$ == INFINITE
Dfp.java,add,sign,byte,0,RET,$ != x.sign
Dfp.java,add,a,Dfp,0,DEF,compare($, b) > 0
Dfp.java,add,b,Dfp,0,DEF,compare(a, $) > 0
Dfp.java,add,b,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,add,mant,int[],0,DEF,b.mant[$.length-1] == 0
Dfp.java,add,a,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,add,mant,int[],0,DEF,a.mant[$.length-1] == 0
Dfp.java,add,a,Dfp,1,DEF,$.exp < b.exp
Dfp.java,add,asign,byte,0,DEF,$ != bsign
Dfp.java,add,asign,byte,1,DEF,$ == rsign
Dfp.java,add,rh,int,0,DEF,$ != 0
Dfp.java,add,asign,byte,0,DEF,$ == bsign
Dfp.java,add,excp,int,0,DEF,$ != 0
Dfp.java,add,result,Dfp,0,DEF,$.mant[mant.length-1] != 0
Dfp.java,add,mant,int[],0,DEF,result.mant[$.length-1] != 0
Dfp.java,add,i,int,0,DEF,$ == 0
Dfp.java,add,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,add,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,add,asign,byte,0,DEF,$ != bsign
Dfp.java,add,excp,int,0,DEF,$ != 0
Dfp.java,round,rh,int,0,DEF,$ != 0
Dfp.java,round,exp,int,0,RET,$ < MIN_EXP
Dfp.java,round,exp,int,0,RET,$ > MAX_EXP
Dfp.java,round,n,int,0,RET,$ != 0
Dfp.java,multiply,nans,byte,0,RET,$ != FINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans != FINITE
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans == FINITE
Dfp.java,multiply,x,Dfp,0,RET,$.mant[mant.length-1] != 0
Dfp.java,multiply,mant,int[],0,RET,x.mant[$.length-1] != 0
Dfp.java,multiply,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,multiply,nans,byte,0,RET,$ == FINITE
Dfp.java,multiply,mant,int[],0,RET,$[$.length-1] != 0
Dfp.java,multiply,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,multiply,nans,byte,0,RET,$ == FINITE
Dfp.java,multiply,mant,int[],0,RET,$[$.length-1] == 0
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans == FINITE
Dfp.java,multiply,x,Dfp,0,RET,$.mant[mant.length-1] == 0
Dfp.java,multiply,mant,int[],0,RET,x.mant[$.length-1] == 0
Dfp.java,multiply,product,int[],0,DEF,$[i] != 0
Dfp.java,multiply,i,int,0,DEF,product[$] != 0
Dfp.java,multiply,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,multiply,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,multiply,excp,int,0,DEF,$ != 0
Dfp.java,multiply,nans,byte,0,RET,$ != FINITE
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,int,0,RET,$ != 0
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,int,0,RET,$ == 0
Dfp.java,multiply,x,int,0,RET,$ < 0
Dfp.java,multiply,x,int,0,RET,$ >= RADIX
Dfp.java,multiply,rh,int,0,DEF,$ != 0
Dfp.java,multiply,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,multiply,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,multiply,excp,int,0,DEF,$ != 0
Dfp.java,divide,nans,byte,0,RET,$ != FINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans != FINITE
Dfp.java,divide,nans,byte,0,RET,$ == INFINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans == FINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans == INFINITE
Dfp.java,divide,nans,byte,0,RET,$ == FINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans == INFINITE
Dfp.java,divide,nans,byte,0,RET,$ == INFINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.mant[mant.length-1] == 0
Dfp.java,divide,mant,int[],0,RET,divisor.mant[$.length-1] == 0
Dfp.java,divide,rh,int,0,DEF,$ == 0
Dfp.java,divide,minadj,int,0,DEF,$ >= 2
Dfp.java,divide,mant,int[],0,DEF,remainder[$.length] != 0
Dfp.java,divide,remainder,int[],0,DEF,$[mant.length] != 0
Dfp.java,divide,trialgood,boolean,0,DEF,$ == false
Dfp.java,divide,trial,int,0,DEF,$ != 0
Dfp.java,divide,nsqd,int,0,DEF,$ != 0
Dfp.java,divide,field,DfpField,0,DEF,$.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN
Dfp.java,divide,nsqd,int,0,DEF,$ == mant.length
Dfp.java,divide,nsqd,int,0,DEF,$ > mant.length
Dfp.java,divide,quotient,int[],0,DEF,$[i] != 0
Dfp.java,divide,i,int,0,DEF,quotient[$] != 0
Dfp.java,divide,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,divide,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,divide,excp,int,0,DEF,$ != 0
Dfp.java,divide,nans,byte,0,RET,$ != FINITE
Dfp.java,divide,nans,byte,0,RET,$ == INFINITE
Dfp.java,divide,divisor,int,0,RET,$ == 0
Dfp.java,divide,divisor,int,0,RET,$ < 0
Dfp.java,divide,divisor,int,0,RET,$ >= RADIX
Dfp.java,divide,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,divide,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,divide,excp,int,0,DEF,$ != 0
Dfp.java,sqrt,nans,byte,0,RET,$ == FINITE
Dfp.java,sqrt,mant,int[],0,RET,$[$.length-1] == 0
Dfp.java,sqrt,nans,byte,0,RET,$ != FINITE
Dfp.java,sqrt,nans,byte,0,RET,$ == INFINITE
Dfp.java,sqrt,sign,byte,0,RET,$ == 1
Dfp.java,sqrt,nans,byte,0,RET,$ == QNAN
Dfp.java,sqrt,nans,byte,0,RET,$ == SNAN
Dfp.java,sqrt,sign,byte,0,RET,$ == -1
Dfp.java,sqrt,x,Dfp,0,DEF,$.exp < -1
Dfp.java,sqrt,x,Dfp,0,DEF,$.exp > 1
Dfp.java,sqrt,dx,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,sqrt,mant,int[],0,DEF,dx.mant[$.length-1] == 0
Dfp.java,toString,nans,byte,0,RET,$ != FINITE
Dfp.java,toString,nans,byte,1,RET,$ == INFINITE
Dfp.java,toString,exp,int,0,RET,$ > mant.length
Dfp.java,toString,exp,int,0,RET,$ < -1
Dfp.java,dfp2sci,p,int,0,DEF,rawdigits[$] != '0'
Dfp.java,dfp2sci,rawdigits,char[],0,DEF,$[p] != '0'
Dfp.java,dfp2sci,sign,byte,0,DEF,$ == -1
Dfp.java,dfp2sci,p,int,1,DEF,$ != rawdigits.length
Dfp.java,dfp2sci,e,int,0,DEF,$ < 0
Dfp.java,dfp2sci,e,int,0,DEF,$ < 0
Dfp.java,dfp2string,e,int,0,DEF,$ <= 0
Dfp.java,dfp2string,e,int,0,DEF,--$ == 0
Dfp.java,dfp2string,q,int,0,DEF,buffer[$] == '.'
Dfp.java,dfp2string,buffer,char[],0,DEF,$[q] == '.'
Dfp.java,dfp2string,sign,byte,0,DEF,$ < 0
Dfp.java,dotrap,nans,byte,0,DEF,$ == FINITE
Dfp.java,dotrap,mant,int[],0,DEF,$[$.length-1] != 0
Dfp.java,dotrap,nans,byte,0,DEF,$ == FINITE
Dfp.java,dotrap,mant,int[],0,DEF,$[$.length-1] == 0
Dfp.java,dotrap,nans,byte,0,DEF,$ == INFINITE
Dfp.java,dotrap,nans,byte,0,DEF,$ == QNAN
Dfp.java,dotrap,nans,byte,0,DEF,$ == INFINITE
Dfp.java,dotrap,nans,byte,0,DEF,$ == SNAN
Dfp.java,dotrap,result,Dfp,1,DEF,($.exp+mant.length) < MIN_EXP
Dfp.java,dotrap,mant,int[],1,DEF,(result.exp+$.length) < MIN_EXP
Dfp.java,nextAfter,x,Dfp,0,RET,compare(this, $) == 0
Dfp.java,nextAfter,result,Dfp,0,DEF,$.classify() == INFINITE
Dfp.java,toDouble,cmp0,int,1,RET,$ == 0
Dfp.java,toDouble,cmp0,int,0,DEF,$ < 0
Dfp.java,toDouble,exponent,int,0,DEF,$ < 0
Dfp.java,toDouble,exponent,int,0,DEF,$ > -1023
Dfp.java,toDouble,exponent,int,0,RET,$ < -1074
Dfp.java,toDouble,exponent,int,0,RET,$ > 1023
Dfp.java,toDouble,mantissa,long,0,DEF,$ == 4503599627370496L
Dfp.java,toDouble,exponent,int,0,DEF,$ <= -1023
DfpMath.java,split,buf,char[],0,DEF,$[i] >= '1'
DfpMath.java,split,i,int,0,DEF,buf[$] >= '1'
DfpMath.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpMath.java,split,i,int,0,DEF,buf[$] <= '9'
DfpMath.java,split,buf,char[],0,DEF,$[i] == '.'
DfpMath.java,split,i,int,0,DEF,buf[$] == '.'
DfpMath.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpMath.java,split,i,int,0,DEF,buf[$] >= '0'
DfpMath.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpMath.java,split,i,int,0,DEF,buf[$] <= '9'
DfpMath.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpMath.java,split,i,int,0,DEF,buf[$] >= '0'
DfpMath.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpMath.java,split,i,int,0,DEF,buf[$] <= '9'
DfpMath.java,split,i,int,0,DEF,$ < sp
DfpMath.java,splitMult,result,Dfp[],0,RET,$[0].classify() == Dfp.INFINITE
DfpMath.java,splitPow,a,int,0,RET,$ == 0
DfpMath.java,splitPow,a,int,0,DEF,$ < 0
DfpMath.java,splitPow,trial,int,0,DEF,$ > a
DfpMath.java,pow,a,int,0,RET,$ == 0
DfpMath.java,pow,a,int,0,DEF,$ < 0
DfpMath.java,exp,ia,int,0,RET,$ > 2147483646
DfpMath.java,exp,ia,int,0,RET,$ < -2147483646
DfpMath.java,log,a,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,1,RET,$.classify() == Dfp.FINITE
DfpMath.java,pow,y,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,x,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,1,RET,$.classify() == Dfp.FINITE
BracketingNthOrderBrentSolverDFP.java,BracketingNthOrderBrentSolverDFP,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolverDFP.java,solve,agingA,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolverDFP.java,solve,agingB,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolverDFP.java,solve,nbPoints,int,1,DEF,$ > 2
BracketingNthOrderBrentSolverDFP.java,solve,start,int,1,DEF,end - $ != nbPoints
BracketingNthOrderBrentSolverDFP.java,solve,end,int,1,DEF,$ - start != nbPoints
BracketingNthOrderBrentSolverDFP.java,solve,nbPoints,int,0,DEF,$ == x.length
DfpField.java,split,buf,char[],0,DEF,$[i] >= '1'
DfpField.java,split,i,int,0,DEF,buf[$] >= '1'
DfpField.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpField.java,split,i,int,0,DEF,buf[$] <= '9'
DfpField.java,split,buf,char[],0,DEF,$[i] == '.'
DfpField.java,split,i,int,0,DEF,buf[$] == '.'
DfpField.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpField.java,split,i,int,0,DEF,buf[$] >= '0'
DfpField.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpField.java,split,i,int,0,DEF,buf[$] <= '9'
DfpField.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpField.java,split,i,int,0,DEF,buf[$] >= '0'
DfpField.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpField.java,split,i,int,0,DEF,buf[$] <= '9'
DfpField.java,split,i,int,0,DEF,$ < sp
DfpField.java,computeStringConstants,sqr2String,String,0,DEF,$ == null
SimplexSolver.java,getPivotColumn,entry,double,0,DEF,$ < minValue
SimplexSolver.java,getPivotRow,entry,double,0,DEF,Precision.compareTo($, 0d, maxUlps) > 0
SimplexSolver.java,getPivotRow,maxUlps,int,0,DEF,Precision.compareTo(entry, 0d, $) > 0
SimplexSolver.java,getPivotRow,cmp,int,1,DEF,$ == 0
SimplexSolver.java,getPivotRow,cmp,int,0,DEF,$ < 0
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,1,RET,$.size() == 0
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,0,RET,$.size() > 1
SimplexSolver.java,getPivotRow,i,int,0,DEF,$ < minIndex
SimplexSolver.java,doIteration,pivotRow,Integer,0,UnboundedSolutionException,$ == null
SimplexSolver.java,doIteration,i,int,0,DEF,$ != pivotRow
SimplexSolver.java,solvePhase1,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() == 0
SimplexTableau.java,createTableau,constraint,LinearConstraint,1,DEF,$.getRelationship() == Relationship.LEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.EQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,normalize,constraint,LinearConstraint,0,RET,$.getValue() < 0
SimplexTableau.java,getConstraintTypeCounts,constraint,LinearConstraint,0,DEF,$.getRelationship() == relationship
SimplexTableau.java,getBasicRow,row,Integer,1,DEF,$ == null
SimplexTableau.java,dropPhase1Objective,epsilon,double,0,DEF,Precision.compareTo(entry, 0d, $) > 0
SimplexTableau.java,dropPhase1Objective,entry,double,0,DEF,Precision.compareTo($, 0d, epsilon) > 0
SimplexTableau.java,dropPhase1Objective,col,int,0,DEF,getBasicRow($) == null
SimplexTableau.java,isOptimal,epsilon,double,0,RET,Precision.compareTo(entry, 0d, $) < 0
SimplexTableau.java,isOptimal,entry,double,0,RET,Precision.compareTo($, 0d, epsilon) < 0
SimplexTableau.java,getSolution,colIndex,int,0,DEF,$ < 0
SimplexTableau.java,getSolution,basicRow,Integer,1,DEF,$ != null
SimplexTableau.java,getSolution,basicRow,Integer,1,DEF,$ == 0
SimplexTableau.java,subtractRow,result,double,0,DEF,FastMath.abs($) < CUTOFF_THRESHOLD
SimplexTableau.java,equals,other,null,0,RET,$ instanceof SimplexTableau
AbstractLinearOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxCountExceededException,++$ > maxIterations
LinearObjectiveFunction.java,equals,other,null,0,RET,$ instanceof LinearObjectiveFunction
LinearConstraint.java,equals,other,null,0,RET,$ instanceof LinearConstraint
BrentOptimizer.java,BrentOptimizer,rel,double,0,NumberIsTooSmallException,$ < MIN_RELATIVE_TOLERANCE
BrentOptimizer.java,BrentOptimizer,abs,double,0,NotStrictlyPositiveException,$ <= 0
BrentOptimizer.java,doOptimize,lo,double,1,DEF,$ < hi
BrentOptimizer.java,doOptimize,e,double,1,DEF,FastMath.abs($) > tol1
BrentOptimizer.java,doOptimize,q,double,1,DEF,$ > 0
BrentOptimizer.java,doOptimize,a,double,0,DEF,u - $ < tol2
BrentOptimizer.java,doOptimize,u,double,0,DEF,$ - a < tol2
BrentOptimizer.java,doOptimize,b,double,0,DEF,$ - u < tol2
BrentOptimizer.java,doOptimize,u,double,0,DEF,b - $ < tol2
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ <= m
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ < m
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ < m
BrentOptimizer.java,doOptimize,d,double,1,DEF,FastMath.abs($) < tol1
BrentOptimizer.java,doOptimize,d,double,1,DEF,$ >= 0
BrentOptimizer.java,doOptimize,checker,ConvergenceChecker<UnivariatePointValuePair>,0,RET,$ != null
BrentOptimizer.java,doOptimize,fu,double,1,DEF,$ <= fx
BrentOptimizer.java,doOptimize,u,double,1,DEF,$ < x
BrentOptimizer.java,doOptimize,u,double,1,DEF,$ < x
BrentOptimizer.java,doOptimize,fu,double,1,DEF,$ <= fw
BrentOptimizer.java,doOptimize,fu,double,0,DEF,$ <= fv
BaseAbstractUnivariateOptimizer.java,optimize,f,UnivariateFunction,0,NullArgumentException,$ == null
BaseAbstractUnivariateOptimizer.java,optimize,goalType,GoalType,0,NullArgumentException,$ == null
UnivariateMultiStartOptimizer.java,UnivariateMultiStartOptimizer,optimizer,BaseUnivariateOptimizer<FUNC>,0,NullArgumentException,$ == null
UnivariateMultiStartOptimizer.java,UnivariateMultiStartOptimizer,generator,RandomGenerator,0,NullArgumentException,$ == null
UnivariateMultiStartOptimizer.java,UnivariateMultiStartOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
UnivariateMultiStartOptimizer.java,getOptima,optima,UnivariatePointValuePair[],0,MathIllegalStateException,$ == null
UnivariateMultiStartOptimizer.java,optimize,optima,UnivariatePointValuePair[],0,DEF,$[0] == null
UnivariateMultiStartOptimizer.java,compare,o1,UnivariatePointValuePair,1,RET,$ == null
UnivariateMultiStartOptimizer.java,compare,o2,UnivariatePointValuePair,0,RET,$ == null
BracketFinder.java,BracketFinder,growLimit,double,0,NotStrictlyPositiveException,$ <= 0
BracketFinder.java,BracketFinder,maxEvaluations,int,0,NotStrictlyPositiveException,$ <= 0
BracketFinder.java,search,fA,double,0,DEF,$ < fB
BracketFinder.java,search,fA,double,0,DEF,$ > fB
BracketFinder.java,search,w,double,1,DEF,($ - xC) * (xB - $) > 0
BracketFinder.java,search,xB,double,1,DEF,(w - xC) * ($ - w) > 0
BracketFinder.java,search,xC,double,1,DEF,(w - $) * (xB - w) > 0
BracketFinder.java,search,fW,double,1,DEF,$ < fC
BracketFinder.java,search,fW,double,1,DEF,$ > fC
BracketFinder.java,search,fW,double,0,DEF,$ > fB
BracketFinder.java,search,fW,double,0,DEF,$ < fB
BracketFinder.java,search,w,double,1,DEF,($ - wLim) * (wLim - xC) >= 0
BracketFinder.java,search,xC,double,1,DEF,(w - wLim) * (wLim - $) >= 0
BracketFinder.java,search,wLim,double,1,DEF,(w - $) * ($ - xC) >= 0
BracketFinder.java,search,w,double,1,DEF,($ - wLim) * (xC - $) > 0
BracketFinder.java,search,xC,double,1,DEF,(w - wLim) * ($ - w) > 0
BracketFinder.java,search,wLim,double,1,DEF,(w - $) * (xC - w) > 0
BracketFinder.java,search,fW,double,0,DEF,$ < fC
BracketFinder.java,search,fW,double,0,DEF,$ > fC
BracketFinder.java,search,lo,double,0,DEF,$ > hi
HarmonicFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NumberIsTooSmallException,$.length < 4
HarmonicFitter.java,sortObservations,i,int,0,DEF,$-- != 0
HarmonicFitter.java,guessAOmega,c1,double,1,ZeroException,$ / c2 < 0
HarmonicFitter.java,guessAOmega,c2,double,1,ZeroException,c1 / $ < 0
HarmonicFitter.java,guessAOmega,c3,double,1,ZeroException,c2 / $ < 0
HarmonicFitter.java,guessAOmega,c2,double,1,ZeroException,$ / c3 < 0
HarmonicFitter.java,guessAOmega,xRange,double,0,ZeroException,$ == 0
HarmonicFitter.java,guessAOmega,y,double,0,DEF,$ < yMin
HarmonicFitter.java,guessAOmega,y,double,0,DEF,$ > yMax
GaussianFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NullArgumentException,$ == null
GaussianFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NumberIsTooSmallException,$.length < 3
GaussianFitter.java,guess,parameters,double[],0,DEF,$ == null
GaussianFitter.java,interpolateXAtY,idxStep,int,0,ZeroException,$ == 0
GaussianFitter.java,interpolateXAtY,pointA,WeightedObservedPoint,0,RET,$.getY() == y
GaussianFitter.java,interpolateXAtY,pointB,WeightedObservedPoint,0,RET,$.getY() == y
GaussianFitter.java,getInterpolationPointsForY,idxStep,int,0,ZeroException,$ == 0
GaussianFitter.java,compare,p1,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p2,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p1,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p2,WeightedObservedPoint,0,RET,$ == null
LeastSquaresConverter.java,LeastSquaresConverter,observations,double[],0,DimensionMismatchException,$.length != weights.length
LeastSquaresConverter.java,value,residuals,double[],0,DimensionMismatchException,$.length != observations.length
LeastSquaresConverter.java,value,weights,double[],1,DEF,$ != null
LeastSquaresConverter.java,value,scale,RealMatrix,1,DEF,$ != null
BaseMultivariateVectorMultiStartOptimizer.java,BaseMultivariateVectorMultiStartOptimizer,optimizer,BaseMultivariateVectorOptimizer<FUNC>,0,NullArgumentException,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,BaseMultivariateVectorMultiStartOptimizer,generator,RandomVectorGenerator,0,NullArgumentException,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,BaseMultivariateVectorMultiStartOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
BaseMultivariateVectorMultiStartOptimizer.java,getOptima,optima,PointVectorValuePair[],0,MathIllegalStateException,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,optimize,optima,PointVectorValuePair[],0,DEF,$[0] == null
BaseMultivariateVectorMultiStartOptimizer.java,compare,o1,PointVectorValuePair,1,RET,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,compare,o2,PointVectorValuePair,0,RET,$ == null
BOBYQAOptimizer.java,bobyqa,lowerDifference,ArrayRealVector,1,DEF,$.getEntry(j) >= -initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,lowerDifference.getEntry($) >= -initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,lowerDifference,ArrayRealVector,1,DEF,$.getEntry(j) >= ZERO
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,lowerDifference.getEntry($) >= ZERO
BOBYQAOptimizer.java,bobyqa,upperDifference,ArrayRealVector,0,DEF,$.getEntry(j) <= initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,j,int,0,DEF,upperDifference.getEntry($) <= initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,upperDifference,ArrayRealVector,1,DEF,$.getEntry(j) <= ZERO
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,upperDifference.getEntry($) <= ZERO
BOBYQAOptimizer.java,bobyqb,trustRegionCenterInterpolationPointIndex,int,0,DEF,$ != kbase
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,bobyqb,crvmin,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,bdtest,double,0,DEF,$ < bdtol
BOBYQAOptimizer.java,bobyqb,bdtest,double,0,DEF,$ < bdtol
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,ntrits,int,1,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,denom,double,0,DEF,$ < cauchy
BOBYQAOptimizer.java,bobyqb,cauchy,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,k,int,0,DEF,$ == trustRegionCenterInterpolationPointIndex
BOBYQAOptimizer.java,bobyqb,temp,double,0,DEF,$ * den > scaden
BOBYQAOptimizer.java,bobyqb,den,double,0,DEF,temp * $ > scaden
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ == j
BOBYQAOptimizer.java,bobyqb,dnorm,double,0,DEF,$ > rho
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,MathIllegalStateException,$ > 0
BOBYQAOptimizer.java,bobyqb,vquad,double,0,MathIllegalStateException,$ >= ZERO
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= ONE_OVER_TEN
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= .7
BOBYQAOptimizer.java,bobyqb,f,double,0,DEF,$ < fopt
BOBYQAOptimizer.java,bobyqb,temp,double,0,DEF,$ * den > scaden
BOBYQAOptimizer.java,bobyqb,den,double,0,DEF,temp * $ > scaden
BOBYQAOptimizer.java,bobyqb,f,double,0,DEF,$ < fopt
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ > 0
BOBYQAOptimizer.java,bobyqb,itest,int,0,DEF,$ >= 3
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < n
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < npt
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < nh
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,sum,double,0,DEF,$ > distsq
BOBYQAOptimizer.java,bobyqb,knew,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,ratio,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,dnorm,double,0,DEF,Math.max(delta, $) > rho
BOBYQAOptimizer.java,bobyqb,delta,double,0,DEF,Math.max($, dnorm) > rho
BOBYQAOptimizer.java,bobyqb,rho,double,0,DEF,$ > stoppingTrustRegionRadius
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= SIXTEEN
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= TWO_HUNDRED_FIFTY
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,fAtInterpolationPoints,ArrayRealVector,0,DEF,$.getEntry(trustRegionCenterInterpolationPointIndex) <= fsave
BOBYQAOptimizer.java,bobyqb,trustRegionCenterInterpolationPointIndex,int,0,DEF,fAtInterpolationPoints.getEntry($) <= fsave
BOBYQAOptimizer.java,altmov,k,int,0,DEF,$ == trustRegionCenterInterpolationPointIndex
BOBYQAOptimizer.java,altmov,tmp,double,1,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,tmp,double,0,DEF,$ < ZERO
BOBYQAOptimizer.java,altmov,k,int,1,DEF,$ == knew
BOBYQAOptimizer.java,altmov,d4,double,0,DEF,d3 * $ < ZERO
BOBYQAOptimizer.java,altmov,d3,double,0,DEF,$ * d4 < ZERO
BOBYQAOptimizer.java,altmov,subd,double,0,DEF,$ > HALF
BOBYQAOptimizer.java,altmov,vlag,double,0,DEF,Math.abs($) < ONE_OVER_FOUR
BOBYQAOptimizer.java,altmov,predsq,double,0,DEF,$ > presav
BOBYQAOptimizer.java,altmov,ibdsav,int,0,DEF,$ < 0
BOBYQAOptimizer.java,altmov,ibdsav,int,0,DEF,$ > 0
BOBYQAOptimizer.java,altmov,glagValue,double,0,DEF,Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), $) > ZERO
BOBYQAOptimizer.java,altmov,i,int,0,DEF,Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,lowerDifference,ArrayRealVector,0,DEF,Math.min(trustRegionCenterOffset.getEntry(i) - $.getEntry(i), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,trustRegionCenterOffset,ArrayRealVector,0,DEF,Math.min($.getEntry(i) - lowerDifference.getEntry(i), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,glagValue,double,0,DEF,Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), $) < ZERO
BOBYQAOptimizer.java,altmov,upperDifference,ArrayRealVector,0,DEF,Math.max(trustRegionCenterOffset.getEntry(i) - $.getEntry(i), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,i,int,0,DEF,Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,trustRegionCenterOffset,ArrayRealVector,0,DEF,Math.max($.getEntry(i) - upperDifference.getEntry(i), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,ggfree,double,0,RET,$ == ZERO
BOBYQAOptimizer.java,altmov,tmp1,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,0,DEF,$.getEntry(i) == bigstp
BOBYQAOptimizer.java,altmov,i,int,0,DEF,work1.getEntry($) == bigstp
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,1,DEF,$.getEntry(i) == bigstp
BOBYQAOptimizer.java,altmov,i,int,1,DEF,work1.getEntry($) == bigstp
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,altmov,i,int,1,DEF,work1.getEntry($) == ZERO
BOBYQAOptimizer.java,altmov,glagValue,double,1,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,iflag,int,0,DEF,$ == 1
BOBYQAOptimizer.java,altmov,curv,double,1,DEF,$ > -gw
BOBYQAOptimizer.java,altmov,iflag,int,1,DEF,$ == 0
BOBYQAOptimizer.java,altmov,csave,double,0,DEF,$ > cauchy
BOBYQAOptimizer.java,prelim,nfm,int,1,DEF,$ >= 1
BOBYQAOptimizer.java,prelim,nfm,int,1,DEF,$ <= n
BOBYQAOptimizer.java,prelim,upperDifference,ArrayRealVector,0,DEF,$.getEntry(nfmm) == ZERO
BOBYQAOptimizer.java,prelim,nfmm,int,0,DEF,upperDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,nfm,int,0,DEF,$ > n
BOBYQAOptimizer.java,prelim,lowerDifference,ArrayRealVector,0,DEF,$.getEntry(nfxm) == ZERO
BOBYQAOptimizer.java,prelim,nfxm,int,0,DEF,lowerDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,upperDifference,ArrayRealVector,0,DEF,$.getEntry(nfxm) == ZERO
BOBYQAOptimizer.java,prelim,nfxm,int,0,DEF,upperDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,ipt,int,0,DEF,$ > n
BOBYQAOptimizer.java,prelim,numEval,int,1,DEF,$ == 1
BOBYQAOptimizer.java,prelim,numEval,int,1,DEF,$ >= 2
BOBYQAOptimizer.java,prelim,stepb,double,0,DEF,stepa * $ < ZERO
BOBYQAOptimizer.java,prelim,stepa,double,0,DEF,$ * stepb < ZERO
BOBYQAOptimizer.java,prelim,trustRegionCenterInterpolationPointIndex,int,0,DEF,$ == nfm
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,gradientAtTrustRegionCenter.getEntry($) >= ZERO
BOBYQAOptimizer.java,trsbox,gradientAtTrustRegionCenter,ArrayRealVector,0,DEF,$.getEntry(i) >= ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,gradientAtTrustRegionCenter.getEntry($) <= ZERO
BOBYQAOptimizer.java,trsbox,gradientAtTrustRegionCenter,ArrayRealVector,0,DEF,$.getEntry(i) <= ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,beta,double,1,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,stepsq,double,0,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,beta,double,0,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,resid,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,ds,double,1,DEF,$ < ZERO
BOBYQAOptimizer.java,trsbox,shs,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,0,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,s.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,1,DEF,$.getEntry(i) > ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,s.getEntry($) > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ < stplen
BOBYQAOptimizer.java,trsbox,stplen,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ == -1
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,crvmin,double,0,DEF,$ == MINUS_ONE
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,0,DEF,$.getEntry(iact) < ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,s.getEntry($) < ZERO
BOBYQAOptimizer.java,trsbox,delsq,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,stplen,double,0,DEF,$ < blen
BOBYQAOptimizer.java,trsbox,iterc,int,0,DEF,$ == itermax
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,tempa,double,1,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,tempb,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,angbd * $ > tempa
BOBYQAOptimizer.java,trsbox,angbd,double,0,DEF,$ * temp > tempa
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,angbd * $ > tempb
BOBYQAOptimizer.java,trsbox,angbd,double,0,DEF,$ * temp > tempb
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,rednew,double,1,DEF,$ > redmax
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ < 0
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ < iu
BOBYQAOptimizer.java,trsbox,sdec,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ == iu
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == MINUS_ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == MINUS_ONE
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,trsbox,k,int,0,DEF,modelSecondDerivativesParameters.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,modelSecondDerivativesParameters,ArrayRealVector,0,DEF,$.getEntry(k) != ZERO
BOBYQAOptimizer.java,trsbox,crvmin,double,0,DEF,$ != ZERO
BOBYQAOptimizer.java,trsbox,iterc,int,0,DEF,$ > itcsav
BOBYQAOptimizer.java,update,d1,double,0,DEF,Math.abs($) > ztest
BOBYQAOptimizer.java,update,i,int,0,DEF,$ >= npt
BOBYQAOptimizer.java,setup,dimension,int,0,NumberIsTooSmallException,$ < MINIMUM_PROBLEM_DIMENSION
BOBYQAOptimizer.java,setup,minDiff,double,0,DEF,$ < requiredMinDiff
MultivariateFunctionPenaltyAdapter.java,MultivariateFunctionPenaltyAdapter,lower,double[],0,DimensionMismatchException,$.length != upper.length
MultivariateFunctionPenaltyAdapter.java,MultivariateFunctionPenaltyAdapter,lower,double[],0,DimensionMismatchException,$.length != scale.length
PowellOptimizer.java,PowellOptimizer,rel,double,0,NumberIsTooSmallException,$ < MIN_RELATIVE_TOLERANCE
PowellOptimizer.java,PowellOptimizer,abs,double,0,NotStrictlyPositiveException,$ <= 0
PowellOptimizer.java,doOptimize,fX2,double,0,DEF,($ - fVal) > delta
PowellOptimizer.java,doOptimize,fVal,double,0,DEF,(fX2 - $) > delta
PowellOptimizer.java,doOptimize,checker,ConvergenceChecker<PointValuePair>,0,DEF,$ != null
PowellOptimizer.java,doOptimize,goal,GoalType,1,RET,$ == GoalType.MINIMIZE
PowellOptimizer.java,doOptimize,fX,double,0,DEF,$ > fX2
PowellOptimizer.java,doOptimize,t,double,0,DEF,$ < 0.0
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,lower,double[],0,NumberIsTooSmallException,$ != null
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,lower,double[],0,DimensionMismatchException,$.length != dim
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,v,double,0,NumberIsTooSmallException,$ < lo
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,upper,double[],0,NumberIsTooLargeException,$ != null
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,upper,double[],0,DimensionMismatchException,$.length != dim
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,v,double,0,NumberIsTooLargeException,$ > hi
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,lower,double[],1,DEF,$ == null
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,upper,double[],1,DEF,$ == null
MultivariateFunctionMappingAdapter.java,MultivariateFunctionMappingAdapter,lower,double[],0,DimensionMismatchException,$.length != upper.length
MultiDirectionalSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(reflected, best) < 0
MultiDirectionalSimplex.java,iterate,reflected,PointValuePair,0,RET,comparator.compare($, best) < 0
MultiDirectionalSimplex.java,iterate,best,PointValuePair,0,RET,comparator.compare(reflected, $) < 0
MultiDirectionalSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,DEF,$.compare(reflected, expanded) <= 0
MultiDirectionalSimplex.java,iterate,expanded,PointValuePair,0,DEF,comparator.compare(reflected, $) <= 0
MultiDirectionalSimplex.java,iterate,reflected,PointValuePair,0,DEF,comparator.compare($, expanded) <= 0
AbstractSimplex.java,AbstractSimplex,steps,double[],0,NullArgumentException,$ == null
AbstractSimplex.java,AbstractSimplex,steps,double[],0,ZeroException,$.length == 0
AbstractSimplex.java,AbstractSimplex,j,int,0,ZeroException,steps[$] == 0
AbstractSimplex.java,AbstractSimplex,steps,double[],0,ZeroException,$[j] == 0
AbstractSimplex.java,AbstractSimplex,referenceSimplex,double[][],0,NotStrictlyPositiveException,$.length <= 0
AbstractSimplex.java,AbstractSimplex,refI,double[],0,DimensionMismatchException,$.length != dimension
AbstractSimplex.java,AbstractSimplex,i,int,0,DEF,$ > 0
AbstractSimplex.java,build,dimension,int,0,DimensionMismatchException,$ != startPoint.length
AbstractSimplex.java,replaceWorstPoint,comparator,Comparator<PointValuePair>,0,DEF,$.compare(simplex[i], pointValuePair) > 0
AbstractSimplex.java,replaceWorstPoint,pointValuePair,PointValuePair,0,DEF,comparator.compare(simplex[i], $) > 0
AbstractSimplex.java,replaceWorstPoint,simplex,PointValuePair[],0,DEF,comparator.compare($[i], pointValuePair) > 0
AbstractSimplex.java,replaceWorstPoint,i,int,0,DEF,comparator.compare(simplex[$], pointValuePair) > 0
AbstractSimplex.java,getPoint,index,int,0,OutOfRangeException,$ < 0
AbstractSimplex.java,getPoint,index,int,0,OutOfRangeException,$ >= simplex.length
AbstractSimplex.java,setPoint,index,int,0,OutOfRangeException,$ < 0
AbstractSimplex.java,setPoint,index,int,0,OutOfRangeException,$ >= simplex.length
AbstractSimplex.java,setPoints,points,PointValuePair[],0,DimensionMismatchException,$.length != simplex.length
BaseAbstractMultivariateVectorOptimizer.java,optimize,f,FUNC,0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimize,t,double[],0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimize,w,double[],0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimize,startPoint,double[],0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimize,t,double[],0,DimensionMismatchException,$.length != w.length
BaseAbstractMultivariateOptimizer.java,optimize,f,FUNC,0,NullArgumentException,$ == null
BaseAbstractMultivariateOptimizer.java,optimize,goalType,GoalType,0,NullArgumentException,$ == null
BaseAbstractMultivariateOptimizer.java,optimize,startPoint,double[],0,NullArgumentException,$ == null
CMAESOptimizer.java,doOptimize,diagonalOnly,int,1,DEF,$ <= 0
CMAESOptimizer.java,doOptimize,i,int,0,DEF,$ >= checkFeasableCount
CMAESOptimizer.java,doOptimize,diagonalOnly,int,1,DEF,$ <= 0
CMAESOptimizer.java,doOptimize,bestValue,double,0,DEF,$ > bestFitness
CMAESOptimizer.java,doOptimize,lastResult,PointValuePair,0,DEF,$ != null
CMAESOptimizer.java,doOptimize,stopFitness,double,0,DEF,$ != 0
CMAESOptimizer.java,doOptimize,sigma,double,0,DEF,$*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > stopTolX
CMAESOptimizer.java,doOptimize,sqrtDiagC,double[],0,DEF,sigma*(Math.max(Math.abs(pcCol[i]), $[i])) > stopTolX
CMAESOptimizer.java,doOptimize,pcCol,double[],0,DEF,sigma*(Math.max(Math.abs($[i]), sqrtDiagC[i])) > stopTolX
CMAESOptimizer.java,doOptimize,i,int,0,DEF,sigma*(Math.max(Math.abs(pcCol[$]), sqrtDiagC[$])) > stopTolX
CMAESOptimizer.java,doOptimize,sigma,double,0,DEF,$*sqrtDiagC[i] > stopTolUpX
CMAESOptimizer.java,doOptimize,sqrtDiagC,double[],0,DEF,sigma*$[i] > stopTolUpX
CMAESOptimizer.java,doOptimize,i,int,0,DEF,sigma*sqrtDiagC[$] > stopTolUpX
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > 2
CMAESOptimizer.java,doOptimize,worstFitness,double,0,DEF,Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,bestFitness,double,0,DEF,Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > fitnessHistory.length
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,historyWorst-$ < stopTolHistFun
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,$-historyBest < stopTolHistFun
CMAESOptimizer.java,doOptimize,diagD,RealMatrix,0,DEF,max($)/min($) > 1e7
CMAESOptimizer.java,doOptimize,lastResult,PointValuePair,0,DEF,$ != null
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > 2
CMAESOptimizer.java,doOptimize,bestFitness,double,0,DEF,Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,OutOfRangeException,$ != null
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,DimensionMismatchException,$.length != init.length
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,NotPositiveException,$[i] < 0
CMAESOptimizer.java,checkParameters,i,int,0,NotPositiveException,inputSigma[$] < 0
CMAESOptimizer.java,checkParameters,boundaries,double[][],0,OutOfRangeException,$ != null
CMAESOptimizer.java,initializeCMA,lambda,int,0,DEF,$ <= 0
CMAESOptimizer.java,updateCovarianceDiagonalOnly,diagonalOnly,int,0,DEF,$ > 1
CMAESOptimizer.java,updateCovarianceDiagonalOnly,iterations,int,0,DEF,$ > diagonalOnly
CMAESOptimizer.java,updateCovariance,ccovmu,double,0,DEF,ccov1 + $ > 0
CMAESOptimizer.java,updateCovariance,ccov1,double,0,DEF,$ + ccovmu > 0
CMAESOptimizer.java,updateCovariance,negccov,double,0,DEF,$ > negcovMax
CMAESOptimizer.java,updateBD,negccov,double,0,DEF,ccov1 + ccovmu + $ > 0
CMAESOptimizer.java,updateBD,ccovmu,double,0,DEF,ccov1 + $ + negccov > 0
CMAESOptimizer.java,updateBD,ccov1,double,0,DEF,$ + ccovmu + negccov > 0
CMAESOptimizer.java,updateBD,negccov,double,0,DEF,(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1.
CMAESOptimizer.java,updateBD,ccovmu,double,0,DEF,(iterations % 1. / (ccov1 + $ + negccov) / dimension / 10.) < 1.
CMAESOptimizer.java,updateBD,ccov1,double,0,DEF,(iterations % 1. / ($ + ccovmu + negccov) / dimension / 10.) < 1.
CMAESOptimizer.java,updateBD,dimension,int,0,DEF,(iterations % 1. / (ccov1 + ccovmu + negccov) / $ / 10.) < 1.
CMAESOptimizer.java,updateBD,iterations,int,0,DEF,($ % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1.
CMAESOptimizer.java,updateBD,diagD,RealMatrix,0,DEF,min($) <= 0
CMAESOptimizer.java,updateBD,i,int,0,DEF,diagD.getEntry($, 0) < 0
CMAESOptimizer.java,updateBD,diagD,RealMatrix,0,DEF,$.getEntry(i, 0) < 0
CMAESOptimizer.java,equals,other,null,0,RET,$ instanceof DoubleIndex
CMAESOptimizer.java,encode,boundaries,double[][],0,RET,$ == null
CMAESOptimizer.java,decode,boundaries,double[][],0,RET,$ == null
CMAESOptimizer.java,value,boundaries,double[][],1,DEF,$ != null
CMAESOptimizer.java,isFeasible,boundaries,double[][],0,RET,$ == null
CMAESOptimizer.java,isFeasible,x,double[],0,RET,$[i] < 0
CMAESOptimizer.java,isFeasible,i,int,0,RET,x[$] < 0
CMAESOptimizer.java,isFeasible,x,double[],0,RET,$[i] > 1.0
CMAESOptimizer.java,isFeasible,i,int,0,RET,x[$] > 1.0
CMAESOptimizer.java,repair,x,double[],1,DEF,$[i] < 0
CMAESOptimizer.java,repair,i,int,1,DEF,x[$] < 0
CMAESOptimizer.java,repair,x,double[],1,DEF,$[i] > 1.0
CMAESOptimizer.java,repair,i,int,1,DEF,x[$] > 1.0
CMAESOptimizer.java,diag,m,RealMatrix,1,RET,$.getColumnDimension() == 1
CMAESOptimizer.java,eye,r,int,0,DEF,$ < m
CMAESOptimizer.java,max,max,double,0,DEF,$ < e
CMAESOptimizer.java,min,min,double,0,DEF,$ > e
SimplexOptimizer.java,doOptimize,simplex,AbstractSimplex,0,NullArgumentException,$ == null
SimplexOptimizer.java,doOptimize,iteration,int,0,RET,$ > 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(best, reflected) <= 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare(best, $) <= 0
NelderMeadSimplex.java,iterate,best,PointValuePair,1,DEF,comparator.compare($, reflected) <= 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(reflected, secondBest) < 0
NelderMeadSimplex.java,iterate,secondBest,PointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare($, secondBest) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(reflected, best) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare($, best) < 0
NelderMeadSimplex.java,iterate,best,PointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(expanded, reflected) < 0
NelderMeadSimplex.java,iterate,expanded,PointValuePair,1,DEF,comparator.compare($, reflected) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare(expanded, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,RET,$.compare(reflected, worst) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,RET,comparator.compare($, worst) < 0
NelderMeadSimplex.java,iterate,worst,PointValuePair,1,RET,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(outContracted, reflected) <= 0
NelderMeadSimplex.java,iterate,outContracted,PointValuePair,0,RET,comparator.compare($, reflected) <= 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,0,RET,comparator.compare(outContracted, $) <= 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(inContracted, worst) < 0
NelderMeadSimplex.java,iterate,worst,PointValuePair,0,RET,comparator.compare(inContracted, $) < 0
NelderMeadSimplex.java,iterate,inContracted,PointValuePair,0,RET,comparator.compare($, worst) < 0
NonLinearConjugateGradientOptimizer.java,setInitialStep,initialStep,double,1,DEF,$ <= 0
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,previous,PointValuePair,0,RET,$ != null
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,updateFormula,ConjugateGradientFormula,1,DEF,$ == ConjugateGradientFormula.FLETCHER_REEVES
NonLinearConjugateGradientOptimizer.java,doOptimize,iter,int,1,DEF,$ % n == 0
NonLinearConjugateGradientOptimizer.java,doOptimize,n,int,1,DEF,iter % $ == 0
NonLinearConjugateGradientOptimizer.java,doOptimize,beta,double,1,DEF,$ < 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yA,double,0,RET,$ * yB <= 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yB,double,0,RET,yA * $ <= 0
LevenbergMarquardtOptimizer.java,doOptimize,dk,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,s,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtOptimizer.java,doOptimize,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtOptimizer.java,doOptimize,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,RET,$ >= 1.0e-4
LevenbergMarquardtOptimizer.java,doOptimize,checker,ConvergenceChecker<PointVectorValuePair>,0,RET,$ != null
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,0,RET,FastMath.abs($) <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,1,ConvergenceException,FastMath.abs($) <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,1,ConvergenceException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,ConvergenceException,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,ConvergenceException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtOptimizer.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtOptimizer.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtOptimizer.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtOptimizer.java,qrDecomposition,ak2,double,0,RET,$ <= qrRankingThreshold
AbstractLeastSquaresOptimizer.java,updateJacobian,weightedResidualJacobian,double[][],0,DimensionMismatchException,$.length != rows
AbstractLeastSquaresOptimizer.java,updateResidualsAndCost,objective,double[],0,DimensionMismatchException,$.length != rows
AbstractLeastSquaresOptimizer.java,guessParametersErrors,rows,int,0,NumberIsTooSmallException,$ <= cols
GaussNewtonOptimizer.java,doOptimize,checker,ConvergenceChecker<PointVectorValuePair>,0,DEF,$ != null
GaussNewtonOptimizer.java,doOptimize,previous,PointVectorValuePair,0,DEF,$ != null
BaseMultivariateMultiStartOptimizer.java,BaseMultivariateMultiStartOptimizer,optimizer,BaseMultivariateOptimizer<FUNC>,0,NullArgumentException,$ == null
BaseMultivariateMultiStartOptimizer.java,BaseMultivariateMultiStartOptimizer,generator,RandomVectorGenerator,0,NullArgumentException,$ == null
BaseMultivariateMultiStartOptimizer.java,BaseMultivariateMultiStartOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
BaseMultivariateMultiStartOptimizer.java,getOptima,optima,PointValuePair[],0,MathIllegalStateException,$ == null
BaseMultivariateMultiStartOptimizer.java,optimize,optima,PointValuePair[],0,DEF,$[0] == null
BaseMultivariateMultiStartOptimizer.java,compare,o1,PointValuePair,1,RET,$ == null
BaseMultivariateMultiStartOptimizer.java,compare,o2,PointValuePair,0,RET,$ == null
Beta.java,regularizedBeta,x,double,1,DEF,$ < 0
Beta.java,regularizedBeta,x,double,1,DEF,$ > 1
Beta.java,regularizedBeta,a,double,1,DEF,$ <= 0.0
Beta.java,regularizedBeta,b,double,1,DEF,$ <= 0.0
Beta.java,getB,n,int,1,DEF,$ % 2 == 0
Beta.java,logBeta,a,double,1,DEF,$ <= 0.0
Beta.java,logBeta,b,double,1,DEF,$ <= 0.0
Gamma.java,logGamma,x,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaP,n,double,1,MaxCountExceededException,$ >= maxIterations
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ == 0.0
Gamma.java,digamma,x,double,0,RET,$ > 0
Gamma.java,digamma,x,double,0,RET,$ <= S_LIMIT
Gamma.java,digamma,x,double,0,RET,$ >= C_LIMIT
Gamma.java,trigamma,x,double,0,RET,$ > 0
Gamma.java,trigamma,x,double,0,RET,$ <= S_LIMIT
Gamma.java,trigamma,x,double,0,RET,$ >= C_LIMIT
Erf.java,erf,x,double,0,RET,FastMath.abs($) > 40
Erf.java,erfc,x,double,0,RET,FastMath.abs($) > 40
Erf.java,erf,x1,double,0,RET,$ > x2
VectorFormat.java,format,i,int,0,DEF,$ > 0
VectorFormat.java,parseCoordinates,i,int,0,RET,$ > 0
VectorFormat.java,parseCoordinates,c,Number,0,RET,$ == null
Line.java,reset,d,double,1,DEF,$ == 0.0
Line.java,revertSelf,angle,double,1,DEF,$ < FastMath.PI
Line.java,intersection,d,double,0,RET,FastMath.abs($) < 1.0e-10
Line.java,LineTransform,c11,double,0,MathIllegalArgumentException,FastMath.abs($) < 1.0e-20
SubLine.java,side,crossing,Vector2D,0,RET,$ == null
SubLine.java,split,crossing,Vector2D,0,RET,$ == null
PolygonsSet.java,computeGeometricalProperties,v,Vector2D[][],1,DEF,$.length == 0
PolygonsSet.java,computeGeometricalProperties,tree,BSPTree<Euclidean2D>,1,DEF,$.getCut() == null
PolygonsSet.java,computeGeometricalProperties,v,Vector2D[][],1,DEF,$[0][0] == null
PolygonsSet.java,computeGeometricalProperties,sum,double,1,DEF,$ < 0
PolygonsSet.java,getVertices,vertices,Vector2D[][],0,DEF,$ == null
PolygonsSet.java,getVertices,loop,List<ComparableSegment>,0,DEF,$ != null
PolygonsSet.java,getVertices,loop,List<ComparableSegment>,1,DEF,$.size() < 2
PolygonsSet.java,getVertices,loop,List<ComparableSegment>,1,DEF,$.get(0).getStart() == null
PolygonsSet.java,getVertices,j,int,0,DEF,$ == 0
PolygonsSet.java,followLoop,distance,double,0,DEF,$ < selectedDistance
PolygonsSet.java,followLoop,selectedDistance,double,0,RET,$ > 1.0e-10
PolygonsSet.java,followLoop,loop,ArrayList<ComparableSegment>,0,RET,$.size() == 2
PolygonsSet.java,followLoop,end,Vector2D,0,MathInternalError,$ == null
PolygonsSet.java,equals,other,null,1,RET,$ instanceof ComparableSegment
PolygonsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean2D>,0,DEF,$.getPlusOutside() != null
PolygonsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean2D>,0,DEF,$.getPlusInside() != null
Vector2D.java,Vector2D,v,double[],0,DimensionMismatchException,$.length != 2
Vector2D.java,normalize,s,double,0,MathArithmeticException,$ == 0
Vector2D.java,equals,other,null,0,RET,$ instanceof Vector2D
Vector2DFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
Vector2DFormat.java,parse,coordinates,double[],0,RET,$ == null
NestedLoops.java,NestedLoops,loop,Vector2D[],0,MathIllegalArgumentException,$[0] == null
Vector1DFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
Vector1DFormat.java,parse,coordinates,double[],0,RET,$ == null
Vector1D.java,normalize,s,double,0,MathArithmeticException,$ == 0
Vector1D.java,equals,other,null,0,RET,$ instanceof Vector1D
IntervalsSet.java,buildTree,lower,double,0,RET,$ < 0
IntervalsSet.java,buildTree,upper,double,0,RET,$ > 0
IntervalsSet.java,buildTree,upper,double,0,RET,$ > 0
IntervalsSet.java,computeGeometricalProperties,size,double,1,DEF,$ >= Precision.SAFE_MIN
IntervalsSet.java,recurseList,node,BSPTree<Euclidean1D>,1,DEF,$.getCut() == null
IntervalsSet.java,recurseList,loc,Vector1D,0,DEF,checkPoint(low, $) == Location.INSIDE
IntervalsSet.java,recurseList,low,BSPTree<Euclidean1D>,0,DEF,checkPoint($, loc) == Location.INSIDE
IntervalsSet.java,recurseList,loc,Vector1D,0,DEF,checkPoint(high, $) == Location.INSIDE
IntervalsSet.java,recurseList,high,BSPTree<Euclidean1D>,0,DEF,checkPoint($, loc) == Location.INSIDE
SubPlane.java,side,inter,Line,0,RET,$ == null
SubPlane.java,side,otherPlane,Plane,0,DEF,crossP.dotProduct($.getNormal()) < 0
SubPlane.java,side,crossP,Vector3D,0,DEF,$.dotProduct(otherPlane.getNormal()) < 0
SubPlane.java,split,inter,Line,0,RET,$ == null
SubPlane.java,split,otherPlane,Plane,0,DEF,crossP.dotProduct($.getNormal()) < 0
SubPlane.java,split,crossP,Vector3D,0,DEF,$.dotProduct(otherPlane.getNormal()) < 0
Line.java,reset,norm2,double,0,MathIllegalArgumentException,$ == 0.0
Line.java,distance,n,double,0,RET,$ < Precision.SAFE_MIN
Line.java,closestPoint,n,double,0,RET,$ < Precision.EPSILON
Vector3DFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
Vector3DFormat.java,parse,coordinates,double[],0,RET,$ == null
Vector3D.java,Vector3D,v,double[],0,DimensionMismatchException,$.length != 3
Vector3D.java,normalize,s,double,0,MathArithmeticException,$ == 0
Vector3D.java,orthogonal,threshold,double,0,MathArithmeticException,$ == 0
Vector3D.java,orthogonal,x,double,1,RET,$ >= -threshold
Vector3D.java,orthogonal,x,double,1,RET,$ <= threshold
Vector3D.java,orthogonal,y,double,0,RET,$ >= -threshold
Vector3D.java,orthogonal,y,double,0,RET,$ <= threshold
Vector3D.java,angle,normProduct,double,0,MathArithmeticException,$ == 0
Vector3D.java,angle,dot,double,0,RET,$ < -threshold
Vector3D.java,angle,dot,double,0,RET,$ > threshold
Vector3D.java,angle,dot,double,0,RET,$ >= 0
Vector3D.java,equals,other,null,0,RET,$ instanceof Vector3D
OutlineExtractor.java,getOutline,end,int,0,DEF,$ != rawLoop.length
OutlineExtractor.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusOutside() != null
OutlineExtractor.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusInside() != null
OutlineExtractor.java,addContribution,scal,double,0,DEF,FastMath.abs($) > 1.0e-3
OutlineExtractor.java,addContribution,scal,double,0,DEF,$ < 0
OutlineExtractor.java,addContribution,loop,Vector2D[],1,DEF,$[0] == null
OutlineExtractor.java,addContribution,previous,int,0,DEF,$ != 1
PolyhedronsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusOutside() != null
PolyhedronsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusInside() != null
PolyhedronsSet.java,recurseFirstIntersection,cut,SubHyperplane<Euclidean3D>,0,RET,$ == null
PolyhedronsSet.java,recurseFirstIntersection,offset,double,1,DEF,$ < 0
PolyhedronsSet.java,recurseFirstIntersection,facet,SubHyperplane<Euclidean3D>,0,RET,$ != null
PolyhedronsSet.java,recurseFirstIntersection,crossed,SubHyperplane<Euclidean3D>,0,RET,$ != null
PolyhedronsSet.java,recurseFirstIntersection,hit3D,Vector3D,0,RET,$ != null
PolyhedronsSet.java,recurseFirstIntersection,facet,SubHyperplane<Euclidean3D>,0,RET,$ != null
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,$.getPlusOutside() != null
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,((SubPlane) $.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
PolyhedronsSet.java,boundaryFacet,point2D,Vector2D,0,RET,((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint($) == Location.INSIDE
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,$.getPlusInside() != null
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,((SubPlane) $.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
PolyhedronsSet.java,boundaryFacet,point2D,Vector2D,0,RET,((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint($) == Location.INSIDE
PolyhedronsSet.java,apply,original,Hyperplane<Euclidean3D>,0,DEF,$ != cachedOriginal
PolyhedronsSet.java,apply,original,Hyperplane<Euclidean3D>,0,DEF,$ != cachedOriginal
Plane.java,setNormal,norm,double,0,MathArithmeticException,$ < 1.0e-10
Plane.java,intersection,dot,double,0,RET,FastMath.abs($) < 1.0e-10
Plane.java,intersection,direction,Vector3D,0,RET,$.getNorm() < 1.0e-10
Plane.java,intersection,determinant,double,0,RET,FastMath.abs($) < 1.0e-10
Rotation.java,Rotation,norm,double,0,MathIllegalArgumentException,$ == 0
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$.length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[0].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[1].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[2].length != 3
Rotation.java,Rotation,det,double,0,NotARotationMatrixException,$ < 0.0
Rotation.java,Rotation,normProduct,double,0,MathIllegalArgumentException,$ == 0
Rotation.java,mat2quat,s,double,1,DEF,$ > -0.19
Rotation.java,mat2quat,s,double,1,DEF,$ > -0.19
Rotation.java,mat2quat,s,double,1,DEF,$ > -0.19
Rotation.java,getAxis,squaredSine,double,1,RET,$ == 0
Rotation.java,getAxis,q0,double,0,RET,$ < 0
Rotation.java,getAngle,q0,double,1,RET,$ < -0.1
Rotation.java,getAngle,q0,double,1,RET,$ > 0.1
Rotation.java,getAngle,q0,double,0,RET,$ < 0
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,orthogonalizeMatrix,fn1,double,0,RET,FastMath.abs($ - fn) <= threshold
Rotation.java,orthogonalizeMatrix,fn,double,0,RET,FastMath.abs(fn1 - $) <= threshold
RegionFactory.java,buildConvex,hyperplanes,Hyperplane<S>[],0,RET,$ == null
RegionFactory.java,buildConvex,hyperplanes,Hyperplane<S>[],0,RET,$.length == 0
RegionFactory.java,recurseComplement,node,BSPTree<S>,0,RET,$.getCut() == null
RegionFactory.java,recurseComplement,attribute,BoundaryAttribute<S>,0,DEF,$ != null
BSPTree.java,insertCut,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,copySelf,cut,SubHyperplane<S>,0,RET,$ == null
BSPTree.java,visit,cut,SubHyperplane<S>,1,DEF,$ == null
BSPTree.java,fitToCell,tree,BSPTree<S>,1,DEF,$ == tree.parent.plus
BSPTree.java,getCell,cut,SubHyperplane<S>,0,RET,$ == null
BSPTree.java,getCell,offset,double,1,RET,FastMath.abs($) < 1.0e-10
BSPTree.java,getCell,offset,double,1,RET,$ <= 0
BSPTree.java,condense,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,condense,plus,BSPTree<S>,0,DEF,$.cut == null
BSPTree.java,condense,minus,BSPTree<S>,0,DEF,$.cut == null
BSPTree.java,condense,plus,BSPTree<S>,0,DEF,$.attribute == null
BSPTree.java,condense,minus,BSPTree<S>,0,DEF,$.attribute == null
BSPTree.java,condense,plus,BSPTree<S>,0,DEF,$.attribute != null
BSPTree.java,merge,cut,SubHyperplane<S>,1,RET,$ == null
BSPTree.java,merge,tree,BSPTree<S>,1,RET,$.cut == null
BSPTree.java,merge,parentTree,BSPTree<S>,0,DEF,$ != null
BSPTree.java,merge,merged,BSPTree<S>,0,DEF,$.cut != null
BSPTree.java,split,cut,SubHyperplane<S>,0,RET,$ == null
BSPTree.java,split,cut,SubHyperplane<S>,1,DEF,$.side(sHyperplane) == Side.PLUS
BSPTree.java,split,sHyperplane,Hyperplane<S>,1,DEF,cut.side($) == Side.PLUS
BSPTree.java,split,cut,SubHyperplane<S>,1,DEF,$.side(sHyperplane) == Side.PLUS
BSPTree.java,split,sHyperplane,Hyperplane<S>,1,DEF,cut.side($) == Side.PLUS
BSPTree.java,insertInTree,parentTree,BSPTree<S>,0,DEF,$ != null
BSPTree.java,insertInTree,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,insertInTree,tree,BSPTree<S>,1,DEF,$ == tree.parent.plus
BSPTree.java,chopOffMinus,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,chopOffPlus,cut,SubHyperplane<S>,0,DEF,$ != null
AbstractRegion.java,AbstractRegion,boundary,Collection<SubHyperplane<S>>,1,DEF,$.size() == 0
AbstractRegion.java,AbstractRegion,hyperplanes,Hyperplane<S>[],1,DEF,$ == null
AbstractRegion.java,AbstractRegion,hyperplanes,Hyperplane<S>[],1,DEF,$.length == 0
AbstractRegion.java,isEmpty,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,checkPoint,cell,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,getTree,tree,BSPTree<S>,0,DEF,$.getCut() != null
AbstractRegion.java,getTree,tree,BSPTree<S>,0,DEF,$.getAttribute() == null
AbstractRegion.java,visitInternalNode,plusChar,SubHyperplane<S>[],0,DEF,$[0] != null
AbstractRegion.java,visitInternalNode,minusChar,SubHyperplane<S>[],0,DEF,$[1] != null
AbstractRegion.java,visitInternalNode,plusChar,SubHyperplane<S>[],0,DEF,$[1] != null
AbstractRegion.java,visitInternalNode,minusChar,SubHyperplane<S>[],0,DEF,$[0] != null
AbstractRegion.java,characterize,node,BSPTree<S>,1,DEF,$.getCut() == null
AbstractRegion.java,characterize,characterization,SubHyperplane<S>[],1,DEF,$[1] == null
AbstractRegion.java,characterize,characterization,SubHyperplane<S>[],1,DEF,$[0] == null
AbstractRegion.java,getSize,barycenter,Vector<S>,0,DEF,$ == null
AbstractRegion.java,getBarycenter,barycenter,Vector<S>,0,DEF,$ == null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,recurseSides,node,BSPTree<S>,1,DEF,$.getCut().side(sub.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,sub,SubHyperplane<S>,1,DEF,node.getCut().side($.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,node,BSPTree<S>,1,DEF,$.getCut().side(sub.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,sub,SubHyperplane<S>,1,DEF,node.getCut().side($.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getPlus().getCut() != null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getMinus().getCut() != null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getPlus().getCut() != null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getMinus().getCut() != null
AbstractRegion.java,recurseIntersection,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,recurseIntersection,plus,SubHyperplane<S>,1,RET,$ == null
AbstractRegion.java,recurseIntersection,minus,SubHyperplane<S>,1,RET,$ == null
AbstractRegion.java,recurseTransform,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,recurseTransform,attribute,BoundaryAttribute<S>,0,DEF,$ != null
OrderedTuple.java,OrderedTuple,components,double[],1,DEF,$[i] < 0
OrderedTuple.java,OrderedTuple,i,int,1,DEF,components[$] < 0
OrderedTuple.java,OrderedTuple,m,long,0,DEF,$ != 0
OrderedTuple.java,OrderedTuple,lsb,int,1,DEF,$ <= msb
OrderedTuple.java,encode,encoding,long[],0,RET,$ != null
OrderedTuple.java,encode,encoding,long[],0,RET,$.length == 1
OrderedTuple.java,encode,encoding,long[],0,RET,$[0] == 0x0L
OrderedTuple.java,encode,vIndex,int,0,DEF,getBit($, k) != 0
OrderedTuple.java,encode,k,int,0,DEF,getBit(vIndex, $) != 0
OrderedTuple.java,encode,shift,int,0,DEF,$-- == 0
OrderedTuple.java,compareTo,components,double[],0,RET,$.length == ot.components.length
OrderedTuple.java,compareTo,offset,int,1,DEF,$ < ot.offset
OrderedTuple.java,compareTo,offset,int,0,DEF,$ > ot.offset
OrderedTuple.java,compareTo,encoding,long[],1,RET,$.length < ot.encoding.length
OrderedTuple.java,compareTo,encoding,long[],1,RET,$.length > ot.encoding.length
OrderedTuple.java,equals,other,null,1,RET,$ instanceof OrderedTuple
OrderedTuple.java,computeMSB,ll,long,0,DEF,($ & mask) != ll
OrderedTuple.java,computeMSB,mask,long,0,DEF,(ll & $) != ll
OrderedTuple.java,computeLSB,ll,long,0,DEF,($ & mask) == ll
OrderedTuple.java,computeLSB,mask,long,0,DEF,(ll & $) == ll
OrderedTuple.java,getBit,k,int,1,RET,$ < e
OrderedTuple.java,getBit,k,int,1,RET,$ > offset
OrderedTuple.java,getBit,k,int,1,RET,$ == offset
AVLTree.java,insert,element,T,0,DEF,$ != null
AVLTree.java,insert,top,Node,1,DEF,$ == null
AVLTree.java,delete,element,T,0,RET,$ != null
AVLTree.java,delete,node,Node,1,RET,$.element == element
AVLTree.java,delete,node,Node,0,RET,$.element.compareTo(element) > 0
AVLTree.java,delete,element,T,0,RET,node.element.compareTo($) > 0
AVLTree.java,getNotSmaller,reference,T,1,RET,node.element.compareTo($) < 0
AVLTree.java,getNotSmaller,node,Node,1,RET,$.element.compareTo(reference) < 0
AVLTree.java,getNotSmaller,node,Node,0,RET,$.right == null
AVLTree.java,getNotSmaller,node,Node,0,RET,$.left == null
AVLTree.java,getNotLarger,reference,T,1,RET,node.element.compareTo($) > 0
AVLTree.java,getNotLarger,node,Node,1,RET,$.element.compareTo(reference) > 0
AVLTree.java,getNotLarger,node,Node,0,RET,$.left == null
AVLTree.java,getNotLarger,node,Node,0,RET,$.right == null
AVLTree.java,getPrevious,left,Node,0,RET,$ != null
AVLTree.java,getPrevious,node,Node,0,RET,$ != null
AVLTree.java,getPrevious,node,Node,0,RET,$ != node.parent.left
AVLTree.java,getNext,right,Node,0,RET,$ != null
AVLTree.java,getNext,node,Node,0,RET,$ != null
AVLTree.java,getNext,node,Node,0,RET,$ != node.parent.right
AVLTree.java,insert,newElement,T,0,RET,$.compareTo(this.element) < 0
AVLTree.java,insert,left,Node,0,RET,$ == null
AVLTree.java,insert,right,Node,0,RET,$ == null
AVLTree.java,delete,parent,Node,1,DEF,$ == null
AVLTree.java,delete,left,Node,1,DEF,$ == null
AVLTree.java,delete,right,Node,1,DEF,$ == null
AVLTree.java,delete,left,Node,1,DEF,$ == null
AVLTree.java,delete,right,Node,1,DEF,$ == null
AVLTree.java,delete,child,Node,0,DEF,$ != null
AVLTree.java,delete,node,Node,0,RET,$.parent == null
AVLTree.java,rebalanceLeftGrown,left,Node,1,DEF,$.skew == Skew.LEFT_HIGH
AVLTree.java,rebalanceRightGrown,right,Node,1,DEF,$.skew == Skew.RIGHT_HIGH
AVLTree.java,rebalanceLeftShrunk,right,Node,1,RET,$.skew == Skew.RIGHT_HIGH
AVLTree.java,rebalanceLeftShrunk,right,Node,1,RET,$.skew == Skew.BALANCED
AVLTree.java,rebalanceRightShrunk,left,Node,1,RET,$.skew == Skew.LEFT_HIGH
AVLTree.java,rebalanceRightShrunk,left,Node,1,RET,$.skew == Skew.BALANCED
AVLTree.java,rotateCW,left,Node,0,DEF,$ != null
AVLTree.java,rotateCW,right,Node,0,DEF,$.right != null
AVLTree.java,rotateCCW,right,Node,0,DEF,$ != null
AVLTree.java,rotateCCW,left,Node,0,DEF,$.left != null
AbstractSubHyperplane.java,recurseTransform,node,BSPTree<T>,0,RET,$.getCut() == null
AbstractSubHyperplane.java,recurseTransform,attribute,BoundaryAttribute<T>,0,DEF,$ != null
BoundarySizeVisitor.java,visitInternalNode,attribute,BoundaryAttribute<S>,0,DEF,$.getPlusOutside() != null
BoundarySizeVisitor.java,visitInternalNode,attribute,BoundaryAttribute<S>,0,DEF,$.getPlusInside() != null
AbstractWell.java,setSeed,seed,int[],0,RET,$ == null
AbstractWell.java,setSeed,seed,int[],0,DEF,$.length < v.length
ValueServer.java,resetReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,closeReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,MathIllegalStateException,$ == null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,MathIllegalStateException,$.getBinStats().size() == 0
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,$ == null
ValueServer.java,getNextReplay,str,String,0,MathIllegalStateException,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,MathIllegalStateException,(str = $.readLine()) == null
ValueServer.java,getNextReplay,str,String,0,MathIllegalStateException,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,MathIllegalStateException,(str = $.readLine()) == null
ISAACRandom.java,setSeed,seed,int[],0,RET,$ == null
ISAACRandom.java,setSeed,seedLen,int,0,DEF,$ < rslLen
ISAACRandom.java,next,count,int,0,DEF,$ < 0
BitsStreamGenerator.java,nextInt,n,int,0,RET,$ > 0
BitsStreamGenerator.java,nextInt,n,int,0,RET,($ & -$) == n
UncorrelatedRandomVectorGenerator.java,UncorrelatedRandomVectorGenerator,mean,double[],0,DimensionMismatchException,$.length != standardDeviation.length
StableRandomGenerator.java,StableRandomGenerator,generator,RandomGenerator,0,NullArgumentException,$ == null
StableRandomGenerator.java,StableRandomGenerator,alpha,double,0,OutOfRangeException,$ > 0d
StableRandomGenerator.java,StableRandomGenerator,alpha,double,0,OutOfRangeException,$ <= 2d
StableRandomGenerator.java,StableRandomGenerator,beta,double,0,OutOfRangeException,$ >= -1d
StableRandomGenerator.java,StableRandomGenerator,beta,double,0,OutOfRangeException,$ <= 1d
StableRandomGenerator.java,StableRandomGenerator,alpha,double,1,DEF,$ < 2d
StableRandomGenerator.java,StableRandomGenerator,beta,double,1,DEF,$ != 0d
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,0,RET,$ == 2d
StableRandomGenerator.java,nextNormalizedDouble,beta,double,1,DEF,$ == 0d
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,1,DEF,$ == 1d
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,1,DEF,FastMath.abs($ - 1d) > 1e-8
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,0,DEF,$ != 1d
RandomDataImpl.java,nextHexString,len,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataImpl.java,nextHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextInt,lower,int,0,NumberIsTooLargeException,$ >= upper
RandomDataImpl.java,nextLong,lower,long,0,NumberIsTooLargeException,$ >= upper
RandomDataImpl.java,nextSecureHexString,len,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataImpl.java,nextSecureHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextSecureInt,lower,int,0,NumberIsTooLargeException,$ >= upper
RandomDataImpl.java,nextSecureLong,lower,long,0,NumberIsTooLargeException,$ >= upper
RandomDataImpl.java,nextPoisson,mean,double,0,NotStrictlyPositiveException,$ <= 0
RandomDataImpl.java,nextPoisson,mean,double,1,RET,$ < pivot
RandomDataImpl.java,nextPoisson,r,double,1,DEF,$ >= p
RandomDataImpl.java,nextPoisson,u,double,1,DEF,$ <= p1
RandomDataImpl.java,nextPoisson,x,double,0,DEF,$ > delta
RandomDataImpl.java,nextPoisson,x,double,0,DEF,$ < -lambda
RandomDataImpl.java,nextPoisson,v,double,0,DEF,$ < -t
RandomDataImpl.java,nextPoisson,a,int,0,DEF,$ == 0
RandomDataImpl.java,nextPoisson,v,double,0,DEF,$ < qa
RandomDataImpl.java,nextPoisson,v,double,0,DEF,$ > qr
RandomDataImpl.java,nextGaussian,sigma,double,0,NotStrictlyPositiveException,$ <= 0
RandomDataImpl.java,nextExponential,mean,double,0,NotStrictlyPositiveException,$ <= 0.0
RandomDataImpl.java,nextExponential,u2,double,0,DEF,$ < umin
RandomDataImpl.java,nextUniform,lower,double,0,NumberIsTooLargeException,$ >= upper
RandomDataImpl.java,nextGamma,shape,double,0,RET,$ < 1
RandomDataImpl.java,nextGamma,p,double,1,RET,$ <= 1
RandomDataImpl.java,nextGamma,v,double,0,DEF,$ <= 0
RandomDataImpl.java,getRan,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,getSecRan,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,nextPermutation,k,int,0,NumberIsTooLargeException,$ > n
RandomDataImpl.java,nextPermutation,k,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataImpl.java,nextSample,k,int,0,NumberIsTooLargeException,$ > len
RandomDataImpl.java,nextSample,k,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataImpl.java,shuffle,i,int,1,DEF,$ == 0
MersenneTwister.java,setSeed,seed,int[],0,RET,$ == null
MersenneTwister.java,setSeed,i,int,0,DEF,$ >= N
MersenneTwister.java,setSeed,j,int,0,DEF,$ >= seed.length
MersenneTwister.java,setSeed,i,int,0,DEF,$ >= N
MersenneTwister.java,next,mti,int,0,DEF,$ >= N
CorrelatedRandomVectorGenerator.java,CorrelatedRandomVectorGenerator,mean,double[],0,DimensionMismatchException,$.length != order
EmpiricalDistribution.java,load,sampleStats,SummaryStatistics,0,ZeroException,$.getN() == 0
EmpiricalDistribution.java,getAdapter,in,null,1,RET,$ instanceof BufferedReader
EmpiricalDistribution.java,getAdapter,in,null,1,RET,$ instanceof double[]
EmpiricalDistribution.java,getNextValue,stats,SummaryStatistics,0,RET,$.getN() > 0
EmpiricalDistribution.java,getNextValue,stats,SummaryStatistics,1,RET,$.getStandardDeviation() > 0
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
AbstractRandomGenerator.java,nextBytes,i,int,0,DEF,$ > 0
AbstractRandomGenerator.java,nextBytes,bytesOut,int,0,RET,$ == bytes.length
AbstractRandomGenerator.java,nextInt,n,int,0,NotStrictlyPositiveException,$ <= 0
AbstractRandomGenerator.java,nextGaussian,s,double,0,DEF,$ != 0
Sigmoid.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Sigmoid.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 2
Gaussian.java,Gaussian,sigma,double,0,NotStrictlyPositiveException,$ <= 0
Gaussian.java,value,g,double,1,RET,$ == 0
Gaussian.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Gaussian.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 3
Gaussian.java,validateParameters,param,double[],0,NotStrictlyPositiveException,$[2] <= 0
HarmonicOscillator.java,validateParameters,param,double[],0,NullArgumentException,$ == null
HarmonicOscillator.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 3
Logit.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Logit.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 2
Logit.java,value,x,double,0,OutOfRangeException,$ < lo
Logit.java,value,x,double,0,OutOfRangeException,$ > hi
StepFunction.java,StepFunction,x,double[],0,NullArgumentException,$ == null
StepFunction.java,StepFunction,y,double[],0,NullArgumentException,$ == null
StepFunction.java,StepFunction,x,double[],0,NoDataException,$.length == 0
StepFunction.java,StepFunction,y,double[],0,NoDataException,$.length == 0
StepFunction.java,StepFunction,y,double[],0,DimensionMismatchException,$.length != x.length
StepFunction.java,value,index,int,1,DEF,$ < -1
StepFunction.java,value,index,int,1,DEF,$ >= 0
Logistic.java,Logistic,n,double,0,NotStrictlyPositiveException,$ <= 0
Logistic.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Logistic.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 6
Logistic.java,validateParameters,param,double[],0,NotStrictlyPositiveException,$[5] <= 0
BaseSecantSolver.java,doSolve,f0,double,0,RET,$ == 0.0
BaseSecantSolver.java,doSolve,f1,double,0,RET,$ == 0.0
BaseSecantSolver.java,doSolve,fx,double,0,RET,$ == 0.0
BaseSecantSolver.java,doSolve,fx,double,1,DEF,f1 * $ < 0
BaseSecantSolver.java,doSolve,f1,double,1,DEF,$ * fx < 0
BaseSecantSolver.java,doSolve,x,double,0,ConvergenceException,$ == x1
BaseSecantSolver.java,doSolve,f1,double,0,MathInternalError:RET,FastMath.abs($) <= ftol
BaseSecantSolver.java,doSolve,f1,double,0,RET,$ <= 0
BaseSecantSolver.java,doSolve,f1,double,0,RET,$ >= 0
UnivariateSolverUtils.java,solve,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,solve,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,forceSide,allowedSolution,AllowedSolution,0,RET,$ == AllowedSolution.ANY_SIDE
UnivariateSolverUtils.java,forceSide,fLo,double,0,RET,$ >= 0
UnivariateSolverUtils.java,forceSide,fHi,double,0,RET,$ <= 0
UnivariateSolverUtils.java,forceSide,fLo,double,0,RET,$ <= 0
UnivariateSolverUtils.java,forceSide,fHi,double,0,RET,$ >= 0
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ < fHi
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ >= 0
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ > fHi
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ <= 0
UnivariateSolverUtils.java,bracket,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,bracket,maximumIterations,int,0,NotStrictlyPositiveException,$ <= 0
UnivariateSolverUtils.java,bracket,fa,double,0,NoBracketingException,$ * fb > 0.0
UnivariateSolverUtils.java,bracket,fb,double,0,NoBracketingException,fa * $ > 0.0
UnivariateSolverUtils.java,isBracketing,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,verifyInterval,lower,double,0,NumberIsTooLargeException,$ >= upper
UnivariateSolverUtils.java,verifyBracketing,function,UnivariateFunction,0,NullArgumentException,$ == null
BisectionSolver.java,doSolve,fm,double,1,DEF,$ * fmin > 0
BisectionSolver.java,doSolve,fmin,double,1,DEF,fm * $ > 0
BisectionSolver.java,doSolve,min,double,0,RET,FastMath.abs(max - $) <= absoluteAccuracy
BisectionSolver.java,doSolve,max,double,0,RET,FastMath.abs($ - min) <= absoluteAccuracy
SecantSolver.java,doSolve,f0,double,0,RET,$ == 0.0
SecantSolver.java,doSolve,f1,double,0,RET,$ == 0.0
SecantSolver.java,doSolve,fx,double,0,RET,$ == 0.0
SecantSolver.java,doSolve,f1,double,0,RET,FastMath.abs($) <= ftol
LaguerreSolver.java,doSolve,yInitial,double,0,RET,FastMath.abs($) <= functionValueAccuracy
LaguerreSolver.java,doSolve,yMin,double,0,RET,FastMath.abs($) <= functionValueAccuracy
LaguerreSolver.java,doSolve,yMin,double,0,RET,yInitial * $ < 0
LaguerreSolver.java,doSolve,yInitial,double,0,RET,$ * yMin < 0
LaguerreSolver.java,doSolve,yMax,double,0,RET,FastMath.abs($) <= functionValueAccuracy
LaguerreSolver.java,doSolve,yInitial,double,0,RET,$ * yMax < 0
LaguerreSolver.java,doSolve,yMax,double,0,RET,yInitial * $ < 0
LaguerreSolver.java,solveAll,coefficients,Complex[],0,NullArgumentException,$ == null
LaguerreSolver.java,solveAll,n,int,0,NoDataException,$ == 0
LaguerreSolver.java,solve,coefficients,Complex[],0,NullArgumentException,$ == null
LaguerreSolver.java,solve,n,int,0,NoDataException,$ == 0
LaguerreSolver.java,solve,oldz,Complex,0,RET,(z.subtract($)).abs() <= tolerance
LaguerreSolver.java,solve,z,Complex,0,RET,($.subtract(oldz)).abs() <= tolerance
LaguerreSolver.java,solve,pv,Complex,0,RET,$.abs() <= functionValueAccuracy
NewtonSolver.java,doSolve,x0,double,0,RET,FastMath.abs(x1 - $) <= absoluteAccuracy
NewtonSolver.java,doSolve,x1,double,0,RET,FastMath.abs($ - x0) <= absoluteAccuracy
BracketingNthOrderBrentSolver.java,BracketingNthOrderBrentSolver,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolver.java,BracketingNthOrderBrentSolver,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolver.java,BracketingNthOrderBrentSolver,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolver.java,doSolve,y,double[],1,DEF,$[0] * $[1] < 0
BracketingNthOrderBrentSolver.java,doSolve,y,double[],1,DEF,$[1] * $[2] < 0
BracketingNthOrderBrentSolver.java,doSolve,xA,double,0,MathInternalError:RET,(xB - $) <= xTol
BracketingNthOrderBrentSolver.java,doSolve,xB,double,0,MathInternalError:RET,($ - xA) <= xTol
BracketingNthOrderBrentSolver.java,doSolve,agingA,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolver.java,doSolve,agingB,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolver.java,doSolve,nextX,double,0,DEF,$ > xA
BracketingNthOrderBrentSolver.java,doSolve,nextX,double,0,DEF,$ < xB
BracketingNthOrderBrentSolver.java,doSolve,nbPoints,int,1,DEF,$ > 2
BracketingNthOrderBrentSolver.java,doSolve,start,int,1,DEF,end - $ != nbPoints
BracketingNthOrderBrentSolver.java,doSolve,end,int,1,DEF,$ - start != nbPoints
BracketingNthOrderBrentSolver.java,doSolve,nbPoints,int,0,DEF,$ == x.length
BracketingNthOrderBrentSolver.java,doSolve,yA,double,1,DEF,nextY * $ <= 0
BracketingNthOrderBrentSolver.java,doSolve,nextY,double,1,DEF,$ * yA <= 0
MullerSolver2.java,doSolve,y0,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver2.java,doSolve,y1,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver2.java,doSolve,y0,double,0,NoBracketingException,$ * y1 > 0
MullerSolver2.java,doSolve,y1,double,0,NoBracketingException,y0 * $ > 0
MullerSolver2.java,doSolve,delta,double,1,DEF,$ >= 0.0
MullerSolver2.java,doSolve,denominator,double,1,DEF,$ != 0
MullerSolver2.java,doSolve,oldx,double,0,RET,FastMath.abs(x - $) <= tolerance
MullerSolver2.java,doSolve,x,double,0,RET,FastMath.abs($ - oldx) <= tolerance
MullerSolver2.java,doSolve,y,double,0,RET,FastMath.abs($) <= functionValueAccuracy
MullerSolver.java,doSolve,fMin,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver.java,doSolve,fMax,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver.java,doSolve,fInitial,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver.java,solve,oldx,double,0,RET,FastMath.abs(x - $) <= tolerance
MullerSolver.java,solve,x,double,0,RET,FastMath.abs($ - oldx) <= tolerance
MullerSolver.java,solve,y,double,0,RET,FastMath.abs($) <= functionValueAccuracy
MullerSolver.java,solve,ym,double,1,DEF,FastMath.signum(y0) + FastMath.signum($) == 0.0
MullerSolver.java,solve,y0,double,1,DEF,FastMath.signum($) + FastMath.signum(ym) == 0.0
BrentSolver.java,doSolve,yInitial,double,0,RET,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,doSolve,yMin,double,0,RET,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,doSolve,yMin,double,0,RET,yInitial * $ < 0
BrentSolver.java,doSolve,yInitial,double,0,RET,$ * yMin < 0
BrentSolver.java,doSolve,yMax,double,0,RET,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,doSolve,yInitial,double,0,RET,$ * yMax < 0
BrentSolver.java,doSolve,yMax,double,0,RET,yInitial * $ < 0
BrentSolver.java,brent,m,double,0,RET,FastMath.abs($) <= tol
BrentSolver.java,brent,e,double,1,DEF,FastMath.abs($) < tol
BrentSolver.java,brent,a,double,1,DEF,$ == c
BrentSolver.java,brent,p,double,1,DEF,$ > 0
BrentSolver.java,brent,d,double,1,DEF,FastMath.abs($) > tol
BrentSolver.java,brent,m,double,1,DEF,$ > 0
BrentSolver.java,brent,fb,double,0,DEF,$ > 0
BrentSolver.java,brent,fc,double,0,DEF,$ > 0
BrentSolver.java,brent,fb,double,0,DEF,$ <= 0
BrentSolver.java,brent,fc,double,0,DEF,$ <= 0
RiddersSolver.java,doSolve,y1,double,0,RET,$ == 0
RiddersSolver.java,doSolve,y2,double,0,RET,$ == 0
RiddersSolver.java,doSolve,y3,double,0,RET,FastMath.abs($) <= functionValueAccuracy
RiddersSolver.java,doSolve,oldx,double,0,RET,FastMath.abs(x - $) <= tolerance
RiddersSolver.java,doSolve,x,double,0,RET,FastMath.abs($ - oldx) <= tolerance
RiddersSolver.java,doSolve,y,double,0,RET,FastMath.abs($) <= functionValueAccuracy
RiddersSolver.java,doSolve,correction,double,1,DEF,$ > 0.0
RiddersSolver.java,doSolve,y1,double,1,DEF,FastMath.signum($) + FastMath.signum(y) == 0.0
RiddersSolver.java,doSolve,y,double,1,DEF,FastMath.signum(y1) + FastMath.signum($) == 0.0
RiddersSolver.java,doSolve,y2,double,1,DEF,FastMath.signum($) + FastMath.signum(y) == 0.0
RiddersSolver.java,doSolve,y,double,1,DEF,FastMath.signum(y2) + FastMath.signum($) == 0.0
FunctionUtils.java,value,i,int,0,DEF,$ != j
FunctionUtils.java,sample,n,int,0,NotStrictlyPositiveException,$ <= 0
FunctionUtils.java,sample,min,double,0,NumberIsTooLargeException,$ >= max
PolynomialFunctionLagrangeForm.java,evaluateInternal,dist,double,0,DEF,$ < min_dist
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != j
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,DimensionMismatchException,$.length != y.length
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,NumberIsTooSmallException,$.length < 2
PolynomialFunctionNewtonForm.java,verifyInputArray,a,double[],0,NoDataException,$.length == 0
PolynomialFunctionNewtonForm.java,verifyInputArray,c,double[],0,NoDataException,$.length == 0
PolynomialsUtils.java,equals,key,Object,0,RET,$ == null
PolynomialsUtils.java,equals,key,null,0,RET,$ instanceof JacobiKey
PolynomialsUtils.java,buildPolynomial,degree,int,0,DEF,$ > maxDegree
PolynomialFunction.java,PolynomialFunction,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,evaluate,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,subtract,coefficients,double[],1,DEF,$.length < p.coefficients.length
PolynomialFunction.java,differentiate,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,differentiate,n,int,0,RET,$ == 1
PolynomialFunction.java,toString,coefficients,double[],1,RET,$[0] == 0.0
PolynomialFunction.java,toString,coefficients,double[],0,RET,$.length == 1
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] != 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] != 0
PolynomialFunction.java,toString,s,StringBuilder,1,DEF,$.length() > 0
PolynomialFunction.java,toString,coefficients,double[],1,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,1,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,absAi,double,0,DEF,($ - 1) != 0
PolynomialFunction.java,toString,i,int,0,DEF,$ > 1
PolynomialFunction.java,equals,obj,null,0,RET,$ instanceof PolynomialFunction
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,NullArgumentException,$ == null
PolynomialSplineFunction.java,PolynomialSplineFunction,polynomials,PolynomialFunction[],0,NullArgumentException,$ == null
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,NumberIsTooSmallException,$.length < 2
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,DimensionMismatchException,$.length - 1 != polynomials.length
PolynomialSplineFunction.java,value,i,int,0,DEF,$ < 0
PolynomialSplineFunction.java,value,i,int,0,DEF,$ >= polynomials.length
UnivariatePeriodicInterpolator.java,interpolate,xval,double[],0,NumberIsTooSmallException,$.length < extend
LoessInterpolator.java,LoessInterpolator,bandwidth,double,0,OutOfRangeException,$ < 0
LoessInterpolator.java,LoessInterpolator,bandwidth,double,0,OutOfRangeException,$ > 1
LoessInterpolator.java,LoessInterpolator,robustnessIters,int,0,NotPositiveException,$ < 0
LoessInterpolator.java,smooth,xval,double[],0,DimensionMismatchException,$.length != yval.length
LoessInterpolator.java,smooth,n,int,0,NoDataException,$ == 0
LoessInterpolator.java,smooth,n,int,0,RET,$ == 1
LoessInterpolator.java,smooth,n,int,0,RET,$ == 2
LoessInterpolator.java,smooth,bandwidthInPoints,int,0,NumberIsTooSmallException,$ < 2
LoessInterpolator.java,smooth,i,int,0,DEF,$ > 0
LoessInterpolator.java,smooth,meanXSquared,double,1,DEF,FastMath.sqrt(FastMath.abs($ - meanX * meanX)) < accuracy
LoessInterpolator.java,smooth,meanX,double,1,DEF,FastMath.sqrt(FastMath.abs(meanXSquared - $ * $)) < accuracy
LoessInterpolator.java,smooth,iter,int,0,DEF,$ == robustnessIters
LoessInterpolator.java,smooth,medianResidual,double,0,DEF,FastMath.abs($) < accuracy
LoessInterpolator.java,smooth,arg,double,1,DEF,$ >= 1
LoessInterpolator.java,smooth,xval,double[],0,DimensionMismatchException,$.length != yval.length
LoessInterpolator.java,updateBandwidthInterval,nextRight,int,0,DEF,$ < xval.length
LoessInterpolator.java,tricube,absX,double,0,RET,$ >= 1.0
HermiteInterpolator.java,addSamplePoint,i,int,0,DEF,$ > 1
TricubicSplineInterpolator.java,interpolate,xval,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,yval,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,zval,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,fval,double[][][],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,xval,double[],0,DimensionMismatchException,$.length != fval.length
TricubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$].length != yLen
TricubicSplineInterpolator.java,interpolate,fval,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$][j].length != zLen
TricubicSplineInterpolator.java,interpolate,j,int,0,DimensionMismatchException,fval[i][$].length != zLen
TricubicSplineInterpolator.java,interpolate,fval,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
LinearInterpolator.java,interpolate,x,double[],0,DimensionMismatchException,$.length != y.length
LinearInterpolator.java,interpolate,x,double[],0,NumberIsTooSmallException,$.length < 2
BicubicSplineInterpolator.java,interpolate,xval,double[],0,NoDataException,$.length == 0
BicubicSplineInterpolator.java,interpolate,yval,double[],0,NoDataException,$.length == 0
BicubicSplineInterpolator.java,interpolate,fval,double[][],0,NoDataException,$.length == 0
BicubicSplineInterpolator.java,interpolate,xval,double[],0,DimensionMismatchException,$.length != fval.length
BicubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$].length != yLen
BicubicSplineInterpolator.java,interpolate,fval,double[][],0,DimensionMismatchException,$[i].length != yLen
SplineInterpolator.java,interpolate,x,double[],0,DimensionMismatchException,$.length != y.length
SplineInterpolator.java,interpolate,x,double[],0,NumberIsTooSmallException,$.length < 3
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,NoDataException,$ == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,yLen,int,0,NoDataException,$ == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,f,double[][],0,NoDataException,$.length == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,f,double[][],0,NoDataException,$[0].length == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != f.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdX.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdY.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdXdY.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,f,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,f[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,dFdX,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdX[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,dFdY,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdY[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdY[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,d2FdXdY,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,value,i,int,0,OutOfRangeException,$ == -1
BicubicSplineInterpolatingFunction.java,value,j,int,0,OutOfRangeException,$ == -1
BicubicSplineInterpolatingFunction.java,partialDerivative,partialDerivatives,BivariateFunction[][][],0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivative,i,int,0,OutOfRangeException,$ == -1
BicubicSplineInterpolatingFunction.java,partialDerivative,j,int,0,OutOfRangeException,$ == -1
BicubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ < 0
BicubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ > 1
BicubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ < 0
BicubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ > 1
BicubicSplineInterpolatingFunction.java,partialDerivativeX,partialDerivativeX,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeY,partialDerivativeY,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeXX,partialDerivativeXX,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeYY,partialDerivativeYY,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeXY,partialDerivativeXY,BivariateFunction,0,DEF,$ == null
MicrosphereInterpolator.java,MicrosphereInterpolator,exponent,int,0,NotPositiveException,$ < 0
MicrosphereInterpolator.java,MicrosphereInterpolator,elements,int,0,NotStrictlyPositiveException,$ <= 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,NoDataException,$ == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,yLen,int,0,NoDataException,$ == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,z,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,NoDataException,$.length == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,NoDataException,$[0].length == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != f.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdX.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdY.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdXdY.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdXdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdYdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d3FdXdYdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,f[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdX,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdX[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdY,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdY[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdY[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdY,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdYdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdYdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d3FdXdYdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d3FdXdYdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,f[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,f[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdX,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdX[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,dFdX[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdY,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdY[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,dFdY[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,dFdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdY[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d2FdXdY[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdY,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d2FdXdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdYdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdYdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d2FdYdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d3FdXdYdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d3FdXdYdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d3FdXdYdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,value,i,int,0,OutOfRangeException,$ == -1
TricubicSplineInterpolatingFunction.java,value,j,int,0,OutOfRangeException,$ == -1
TricubicSplineInterpolatingFunction.java,value,k,int,0,OutOfRangeException,$ == -1
TricubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ < 0
TricubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ > 1
TricubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ < 0
TricubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ > 1
TricubicSplineInterpolatingFunction.java,value,z,double,0,OutOfRangeException,$ < 0
TricubicSplineInterpolatingFunction.java,value,z,double,0,OutOfRangeException,$ > 1
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,xval,double[],0,NoDataException,$.length == 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,yval,double[],0,NoDataException,$.length == 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,fval,double[][],0,NoDataException,$.length == 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,xval,double[],0,DimensionMismatchException,$.length != fval.length
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$].length != yLen
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,fval,double[][],0,DimensionMismatchException,$[i].length != yLen
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,NullArgumentException,$ == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,yval,double[],0,NullArgumentException,$ == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,NoDataException,$.length == 0
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,DimensionMismatchException,$.length != yval.length
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,NullArgumentException,$[0] == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xvalI,double[],0,NullArgumentException,$ == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xvalI,double[],0,DimensionMismatchException,$.length != dimension
MicrosphereInterpolatingFunction.java,value,sd,Entry<RealVector,Double>,0,DEF,$ != null
LegendreGaussIntegrator.java,doIntegrate,delta,double,0,RET,$ <= limit
BaseAbstractUnivariateIntegrator.java,BaseAbstractUnivariateIntegrator,minimalIterationCount,int,0,NotStrictlyPositiveException,$ <= 0
BaseAbstractUnivariateIntegrator.java,BaseAbstractUnivariateIntegrator,maximalIterationCount,int,0,NumberIsTooSmallException,$ <= minimalIterationCount
TrapezoidIntegrator.java,TrapezoidIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > TRAPEZOID_MAX_ITERATIONS_COUNT
TrapezoidIntegrator.java,TrapezoidIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > TRAPEZOID_MAX_ITERATIONS_COUNT
TrapezoidIntegrator.java,stage,n,int,1,RET,$ == 0
TrapezoidIntegrator.java,doIntegrate,delta,double,0,RET,$ <= rLimit
LegendreHighPrecisionRuleFactory.java,computeRule,numberOfPoints,int,0,RET,$ == 1
LegendreHighPrecisionRuleFactory.java,computeRule,pa,BigDecimal,1,DEF,$.signum() * pc.signum() <= 0
LegendreHighPrecisionRuleFactory.java,computeRule,pc,BigDecimal,1,DEF,pa.signum() * $.signum() <= 0
LegendreHighPrecisionRuleFactory.java,computeRule,numberOfPoints,int,0,DEF,$ % 2 == 1
GaussIntegrator.java,GaussIntegrator,points,double[],0,DimensionMismatchException,$.length != weights.length
BaseRuleFactory.java,getRule,cached,Pair<double[],double[]>,0,DEF,$ == null
BaseRuleFactory.java,getRuleInternal,rule,Pair<T[],T[]>,0,RET,$ == null
LegendreRuleFactory.java,computeRule,numberOfPoints,int,0,RET,$ == 1
LegendreRuleFactory.java,computeRule,pa,double,1,DEF,$ * pc <= 0
LegendreRuleFactory.java,computeRule,pc,double,1,DEF,pa * $ <= 0
LegendreRuleFactory.java,computeRule,numberOfPoints,int,0,DEF,$ % 2 == 1
SimpsonIntegrator.java,SimpsonIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > SIMPSON_MAX_ITERATIONS_COUNT
SimpsonIntegrator.java,SimpsonIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > SIMPSON_MAX_ITERATIONS_COUNT
SimpsonIntegrator.java,doIntegrate,delta,double,0,RET,$ <= rLimit
RombergIntegrator.java,RombergIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > ROMBERG_MAX_ITERATIONS_COUNT
RombergIntegrator.java,RombergIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > ROMBERG_MAX_ITERATIONS_COUNT
RombergIntegrator.java,doIntegrate,delta,double,0,RET,$ <= rLimit
IterativeLegendreGaussIntegrator.java,doIntegrate,delta,double,0,RET,$ <= limit
ComplexFormat.java,ComplexFormat,imaginaryCharacter,String,0,NullArgumentException,$ == null
ComplexFormat.java,ComplexFormat,imaginaryCharacter,String,0,NoDataException,$.length() == 0
ComplexFormat.java,ComplexFormat,imaginaryFormat,NumberFormat,0,NullArgumentException,$ == null
ComplexFormat.java,ComplexFormat,realFormat,NumberFormat,0,NullArgumentException,$ == null
ComplexFormat.java,format,im,double,1,DEF,$ < 0.0
ComplexFormat.java,format,im,double,0,DEF,$ > 0.0
ComplexFormat.java,formatImaginary,absIm,double,0,MathInternalError,$ < 0
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Complex
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Number
ComplexFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
ComplexFormat.java,parse,re,Number,0,RET,$ == null
ComplexFormat.java,parse,im,Number,0,RET,$ == null
RootsOfUnity.java,isCounterClockWise,omegaCount,int,0,MathIllegalStateException,$ == 0
RootsOfUnity.java,computeRoots,n,int,0,ZeroException,$ == 0
RootsOfUnity.java,computeRoots,absN,int,0,RET,$ == omegaCount
RootsOfUnity.java,getReal,omegaCount,int,0,MathIllegalStateException,$ == 0
RootsOfUnity.java,getReal,k,int,0,OutOfRangeException,$ < 0
RootsOfUnity.java,getReal,k,int,0,OutOfRangeException,$ >= omegaCount
RootsOfUnity.java,getImaginary,omegaCount,int,0,MathIllegalStateException,$ == 0
RootsOfUnity.java,getImaginary,k,int,0,OutOfRangeException,$ < 0
RootsOfUnity.java,getImaginary,k,int,0,OutOfRangeException,$ >= omegaCount
Complex.java,abs,imaginary,double,0,RET,$ == 0.0
Complex.java,abs,real,double,0,RET,$ == 0.0
Complex.java,divide,c,double,0,RET,$ == 0.0
Complex.java,divide,d,double,0,RET,$ == 0.0
Complex.java,divide,divisor,double,0,RET,$ == 0d
Complex.java,reciprocal,real,double,0,RET,$ == 0.0
Complex.java,reciprocal,imaginary,double,0,RET,$ == 0.0
Complex.java,equals,other,null,0,RET,$ instanceof Complex
Complex.java,sqrt,real,double,0,RET,$ == 0.0
Complex.java,sqrt,imaginary,double,0,RET,$ == 0.0
Complex.java,sqrt,real,double,1,RET,$ >= 0.0
Complex.java,tan,imaginary,double,0,RET,$ > 20.0
Complex.java,tan,imaginary,double,0,RET,$ < -20.0
Complex.java,tanh,real,double,0,RET,$ > 20.0
Complex.java,tanh,real,double,0,RET,$ < -20.0
Complex.java,nthRoot,n,int,0,NotPositiveException,$ <= 0
ComplexUtils.java,polar2Complex,r,double,0,MathIllegalArgumentException,$ < 0
DescriptiveStatistics.java,DescriptiveStatistics,initialDoubleArray,double[],0,DEF,$ != null
DescriptiveStatistics.java,addValue,windowSize,int,1,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,MathIllegalArgumentException,$ < 1
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,MathIllegalArgumentException,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,getPercentile,percentileImpl,null,1,DEF,$ instanceof Percentile
AbstractStorelessUnivariateStatistic.java,evaluate,values,double[],0,NullArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,incrementAll,values,double[],0,NullArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,equals,object,Object,0,RET,$ instanceof AbstractStorelessUnivariateStatistic == false
AbstractStorelessUnivariateStatistic.java,equals,object,null,0,RET,$ instanceof AbstractStorelessUnivariateStatistic
StatisticalSummaryValues.java,equals,object,Object,0,RET,$ instanceof StatisticalSummaryValues == false
StatisticalSummaryValues.java,equals,object,null,0,RET,$ instanceof StatisticalSummaryValues
FirstMoment.java,increment,n,long,0,DEF,$ == 0
GeometricMean.java,getResult,sumOfLogs,StorelessUnivariateStatistic,1,RET,$.getN() > 0
ThirdMoment.java,increment,n,long,0,DEF,$ < 1
Kurtosis.java,getResult,moment,FourthMoment,0,DEF,$.getN() > 3
Kurtosis.java,getResult,moment,FirstMoment,1,DEF,$.n <= 3
Kurtosis.java,getResult,variance,double,1,DEF,$ < 10E-20
Kurtosis.java,evaluate,length,int,0,DEF,$ > 3
Skewness.java,getResult,moment,FirstMoment,0,RET,$.n < 3
Skewness.java,getResult,variance,double,1,RET,$ < 10E-20
Skewness.java,evaluate,length,int,0,DEF,$ > 2
FourthMoment.java,increment,n,long,0,DEF,$ < 1
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 0
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 1
Variance.java,evaluate,values,double[],0,NullArgumentException,$ == null
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
VectorialCovariance.java,increment,v,double[],0,DimensionMismatchException,$.length != sums.length
VectorialCovariance.java,getResult,n,long,0,DEF,$ > 1
VectorialCovariance.java,equals,obj,null,0,RET,$ instanceof VectorialCovariance
VectorialCovariance.java,equals,isBiasCorrected,boolean,0,RET,$ != other.isBiasCorrected
VectorialCovariance.java,equals,n,long,0,RET,$ != other.n
SecondMoment.java,increment,n,long,0,DEF,$ < 1
VectorialMean.java,increment,v,double[],0,DimensionMismatchException,$.length != means.length
VectorialMean.java,equals,obj,null,0,RET,$ instanceof VectorialMean
SemiVariance.java,evaluate,values,double[],0,NullArgumentException,$ == null
SemiVariance.java,evaluate,values,double[],1,RET,$.length == 0
SemiVariance.java,evaluate,values,double[],1,RET,$.length == 1
SemiVariance.java,evaluate,values,double[],0,DEF,($[i] > cutoff) == booleanDirection
SemiVariance.java,evaluate,i,int,0,DEF,(values[$] > cutoff) == booleanDirection
SemiVariance.java,evaluate,cutoff,double,0,DEF,(values[i] > $) == booleanDirection
SemiVariance.java,evaluate,values,double[],0,DEF,$[i] > cutoff
SemiVariance.java,evaluate,i,int,0,DEF,values[$] > cutoff
Percentile.java,setData,values,double[],1,DEF,$ == null
Percentile.java,setData,values,double[],1,DEF,$ == null
Percentile.java,evaluate,p,double,0,OutOfRangeException,$ > 100
Percentile.java,evaluate,p,double,0,OutOfRangeException,$ <= 0
Percentile.java,evaluate,length,int,0,RET,$ == 0
Percentile.java,evaluate,length,int,0,RET,$ == 1
Percentile.java,evaluate,pos,double,0,RET,$ < 1
Percentile.java,evaluate,pos,double,0,RET,$ >= n
Percentile.java,select,node,int,1,DEF,$ < pivotsHeap.length
Percentile.java,select,node,int,1,DEF,pivotsHeap[$] >= 0
Percentile.java,select,pivotsHeap,int[],1,DEF,$[node] >= 0
Percentile.java,select,node,int,0,DEF,$ < pivotsHeap.length
Percentile.java,select,k,int,1,RET,$ == pivot
Percentile.java,select,k,int,1,DEF,$ < pivot
Percentile.java,medianOf3,wBegin,double,1,RET,$ < wMiddle
Percentile.java,medianOf3,wMiddle,double,1,RET,$ < wEnd
Percentile.java,medianOf3,wBegin,double,1,RET,$ < wEnd
Percentile.java,partition,i,int,0,DEF,$ < j
Percentile.java,partition,i,int,0,DEF,$ >= end
Percentile.java,partition,work,double[],0,DEF,$[i] > value
Percentile.java,partition,i,int,0,DEF,work[$] > value
Percentile.java,setQuantile,p,double,0,OutOfRangeException,$ <= 0
Percentile.java,setQuantile,p,double,0,OutOfRangeException,$ > 100
Percentile.java,copy,source,Percentile,0,DEF,$.cachedPivots != null
Max.java,increment,d,double,0,DEF,$ > value
Min.java,increment,d,double,0,DEF,$ < value
AbstractUnivariateStatistic.java,test,values,double[],0,NullArgumentException,$ == null
AbstractUnivariateStatistic.java,test,begin,int,0,NotPositiveException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,NotPositiveException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,NumberIsTooLargeException,begin + $ > values.length
AbstractUnivariateStatistic.java,test,begin,int,0,NumberIsTooLargeException,$ + length > values.length
AbstractUnivariateStatistic.java,test,length,int,0,RET,$ == 0
AbstractUnivariateStatistic.java,test,weights,double[],0,NullArgumentException,$ == null
AbstractUnivariateStatistic.java,test,weights,double[],0,DimensionMismatchException,$.length != values.length
AbstractUnivariateStatistic.java,test,i,int,0,MathIllegalArgumentException,weights[$] < 0
AbstractUnivariateStatistic.java,test,weights,double[],0,MathIllegalArgumentException,$[i] < 0
AbstractUnivariateStatistic.java,test,i,int,0,DEF,weights[$] > 0.0
AbstractUnivariateStatistic.java,test,weights,double[],0,DEF,$[i] > 0.0
MultivariateSummaryStatistics.java,append,i,int,0,DEF,$ > 0
MultivariateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof MultivariateSummaryStatistics == false
MultivariateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof MultivariateSummaryStatistics
MultivariateSummaryStatistics.java,checkEmpty,n,long,0,MathIllegalStateException,$ > 0
MultivariateSummaryStatistics.java,checkDimension,dimension,int,0,DimensionMismatchException,$ != k
AggregateSummaryStatistics.java,aggregate,statistics,Collection<SummaryStatistics>,0,RET,$ == null
AggregateSummaryStatistics.java,aggregate,current,SummaryStatistics,0,DEF,$.getMin() < min
AggregateSummaryStatistics.java,aggregate,current,SummaryStatistics,0,DEF,$.getMax() > max
AggregateSummaryStatistics.java,aggregate,n,long,1,DEF,$ == 0
AggregateSummaryStatistics.java,aggregate,n,long,1,DEF,$ == 1
AggregateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof AggregatingSummaryStatistics == false
AggregateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof AggregatingSummaryStatistics
SummaryStatistics.java,addValue,meanImpl,StorelessUnivariateStatistic,0,DEF,$ != mean
SummaryStatistics.java,addValue,varianceImpl,StorelessUnivariateStatistic,0,DEF,$ != variance
SummaryStatistics.java,addValue,geoMeanImpl,StorelessUnivariateStatistic,0,DEF,$ != geoMean
SummaryStatistics.java,clear,meanImpl,StorelessUnivariateStatistic,0,DEF,$ != mean
SummaryStatistics.java,clear,varianceImpl,StorelessUnivariateStatistic,0,DEF,$ != variance
SummaryStatistics.java,equals,object,Object,0,RET,$ instanceof SummaryStatistics == false
SummaryStatistics.java,equals,object,null,0,RET,$ instanceof SummaryStatistics
SummaryStatistics.java,checkEmpty,n,long,0,MathIllegalStateException,$ > 0
SummaryStatistics.java,copy,source.meanImpl,null,1,DEF,$ instanceof Mean
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.geoMean == source.geoMeanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.max == source.maxImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.mean == source.meanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.min == source.minImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sum == source.sumImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.variance == source.varianceImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumLog == source.sumLogImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumsq == source.sumsqImpl
MannWhitneyUTest.java,ensureDataConformance,x,double[],0,NullArgumentException,$ == null
MannWhitneyUTest.java,ensureDataConformance,y,double[],0,NullArgumentException,$ == null
MannWhitneyUTest.java,ensureDataConformance,x,double[],0,NoDataException,$.length == 0
MannWhitneyUTest.java,ensureDataConformance,y,double[],0,NoDataException,$.length == 0
ChiSquareTest.java,chiSquare,expected,double[],0,DimensionMismatchException,$.length < 2
ChiSquareTest.java,chiSquare,expected,double[],0,DimensionMismatchException,$.length != observed.length
ChiSquareTest.java,chiSquare,sumObserved,double,0,DEF,FastMath.abs(sumExpected - $) > 10E-6
ChiSquareTest.java,chiSquare,sumExpected,double,0,DEF,FastMath.abs($ - sumObserved) > 10E-6
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ <= 0
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ > 0.5
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ <= 0
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ > 0.5
ChiSquareTest.java,chiSquareDataSetsComparison,observed1,long[],0,DimensionMismatchException,$.length < 2
ChiSquareTest.java,chiSquareDataSetsComparison,observed1,long[],0,DimensionMismatchException,$.length != observed2.length
ChiSquareTest.java,chiSquareDataSetsComparison,countSum1,long,0,ZeroException,$ == 0
ChiSquareTest.java,chiSquareDataSetsComparison,countSum2,long,0,ZeroException,$ == 0
ChiSquareTest.java,chiSquareDataSetsComparison,i,int,1,ZeroException,observed1[$] == 0
ChiSquareTest.java,chiSquareDataSetsComparison,observed1,long[],1,ZeroException,$[i] == 0
ChiSquareTest.java,chiSquareDataSetsComparison,observed2,long[],1,ZeroException,$[i] == 0
ChiSquareTest.java,chiSquareDataSetsComparison,i,int,1,ZeroException,observed2[$] == 0
ChiSquareTest.java,chiSquareTestDataSetsComparison,alpha,double,0,OutOfRangeException,$ <= 0
ChiSquareTest.java,chiSquareTestDataSetsComparison,alpha,double,0,OutOfRangeException,$ > 0.5
ChiSquareTest.java,checkArray,in,long[][],0,DimensionMismatchException,$.length < 2
ChiSquareTest.java,checkArray,in,long[][],0,DimensionMismatchException,$[0].length < 2
ChiSquareTest.java,checkPositive,in,double[],0,NotStrictlyPositiveException,$[i] <= 0
ChiSquareTest.java,checkPositive,i,int,0,NotStrictlyPositiveException,in[$] <= 0
ChiSquareTest.java,checkNonNegative,in,long[],0,NotPositiveException,$[i] < 0
ChiSquareTest.java,checkNonNegative,i,int,0,NotPositiveException,in[$] < 0
ChiSquareTest.java,checkNonNegative,in,long[][],0,NotPositiveException,$[i][j] < 0
ChiSquareTest.java,checkNonNegative,i,int,0,NotPositiveException,in[$][j] < 0
ChiSquareTest.java,checkNonNegative,j,int,0,NotPositiveException,in[i][$] < 0
TTest.java,checkSignificanceLevel,alpha,double,0,OutOfRangeException,$ <= 0
TTest.java,checkSignificanceLevel,alpha,double,0,OutOfRangeException,$ > 0.5
TTest.java,checkSampleData,data,double[],0,NullArgumentException,$ == null
TTest.java,checkSampleData,data,double[],0,NumberIsTooSmallException,$.length < 2
TTest.java,checkSampleData,stat,StatisticalSummary,0,NullArgumentException,$ == null
TTest.java,checkSampleData,stat,StatisticalSummary,0,NumberIsTooSmallException,$.getN() < 2
OneWayAnova.java,anovaTest,alpha,double,0,OutOfRangeException,$ <= 0
OneWayAnova.java,anovaTest,alpha,double,0,OutOfRangeException,$ > 0.5
OneWayAnova.java,anovaStats,categoryData,Collection<double[]>,0,NullArgumentException,$ == null
OneWayAnova.java,anovaStats,categoryData,Collection<double[]>,0,DimensionMismatchException,$.size() < 2
OneWayAnova.java,anovaStats,array,double[],0,DimensionMismatchException,$.length <= 1
WilcoxonSignedRankTest.java,ensureDataConformance,x,double[],0,NullArgumentException,$ == null
WilcoxonSignedRankTest.java,ensureDataConformance,y,double[],0,NullArgumentException,$ == null
WilcoxonSignedRankTest.java,ensureDataConformance,x,double[],0,NoDataException,$.length == 0
WilcoxonSignedRankTest.java,ensureDataConformance,y,double[],0,NoDataException,$.length == 0
WilcoxonSignedRankTest.java,ensureDataConformance,y,double[],0,DimensionMismatchException,$.length != x.length
WilcoxonSignedRankTest.java,calculateAbsoluteDifferences,z,double[],0,NullArgumentException,$ == null
WilcoxonSignedRankTest.java,calculateAbsoluteDifferences,z,double[],0,NoDataException,$.length == 0
WilcoxonSignedRankTest.java,wilcoxonSignedRank,i,int,0,DEF,z[$] > 0
WilcoxonSignedRankTest.java,wilcoxonSignedRank,z,double[],0,DEF,$[i] > 0
WilcoxonSignedRankTest.java,calculateExactPValue,i,int,0,DEF,(($ >> j) & 1) == 1
WilcoxonSignedRankTest.java,calculateExactPValue,j,int,0,DEF,((i >> $) & 1) == 1
WilcoxonSignedRankTest.java,calculateExactPValue,rankSum,int,0,DEF,$ >= Wmax
WilcoxonSignedRankTest.java,wilcoxonSignedRankTest,N,int,0,NumberIsTooLargeException,$ > 30
NaturalRanking.java,rank,ranks,IntDoublePair[],1,DEF,Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
NaturalRanking.java,rank,i,int,1,DEF,Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
NaturalRanking.java,rank,tiesTrace,List<Integer>,0,DEF,$.size() > 1
NaturalRanking.java,rank,tiesTrace,List<Integer>,0,DEF,$.size() > 1
NaturalRanking.java,rank,nanStrategy,NaNStrategy,0,DEF,$ == NaNStrategy.FIXED
NaturalRanking.java,restoreNaNs,nanPositions,List<Integer>,0,RET,$.size() == 0
StatUtils.java,sumDifference,n,int,0,DimensionMismatchException,$ != sample2.length
StatUtils.java,sumDifference,n,int,0,NoDataException,$ <= 0
StatUtils.java,varianceDifference,n,int,0,DimensionMismatchException,$ != sample2.length
StatUtils.java,varianceDifference,n,int,0,NumberIsTooSmallException,$ < 2
KMeansPlusPlusClusterer.java,cluster,varianceSum,double,0,DEF,$ <= bestVarianceSum
KMeansPlusPlusClusterer.java,cluster,points,Collection<T>,0,NumberIsTooSmallException,$.size() < k
KMeansPlusPlusClusterer.java,cluster,changes,int,0,RET,$ == 0
KMeansPlusPlusClusterer.java,chooseInitialCenters,i,int,0,DEF,$ != firstPointIndex
KMeansPlusPlusClusterer.java,chooseInitialCenters,sum,double,0,DEF,$ >= r
KMeansPlusPlusClusterer.java,chooseInitialCenters,nextPointIndex,int,0,DEF,$ == -1
KMeansPlusPlusClusterer.java,chooseInitialCenters,nextPointIndex,int,1,DEF,$ >= 0
KMeansPlusPlusClusterer.java,chooseInitialCenters,resultSet,List<Cluster<T>>,0,DEF,$.size() < k
KMeansPlusPlusClusterer.java,getPointFromLargestVarianceCluster,variance,double,0,DEF,$ > maxVariance
KMeansPlusPlusClusterer.java,getPointFromLargestVarianceCluster,selected,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getPointFromLargestNumberCluster,number,int,0,DEF,$ > maxNumber
KMeansPlusPlusClusterer.java,getPointFromLargestNumberCluster,selected,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getFarthestPoint,distance,double,0,DEF,$ > maxDistance
KMeansPlusPlusClusterer.java,getFarthestPoint,selectedCluster,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getNearestCluster,distance,double,0,DEF,$ < minDistance
EuclideanIntegerPoint.java,equals,other,null,0,RET,$ instanceof EuclideanIntegerPoint
EuclideanIntegerPoint.java,equals,point,int[],0,RET,$.length != otherPoint.length
PearsonsCorrelation.java,PearsonsCorrelation,covarianceMatrix,RealMatrix,0,NullArgumentException,$ == null
PearsonsCorrelation.java,getCorrelationPValues,i,int,1,DEF,$ == j
PearsonsCorrelation.java,correlation,xArray,double[],1,DimensionMismatchException,$.length != yArray.length
PearsonsCorrelation.java,correlation,xArray,double[],1,MathIllegalArgumentException,$.length < 2
PearsonsCorrelation.java,checkSufficientData,nRows,int,0,MathIllegalArgumentException,$ < 2
PearsonsCorrelation.java,checkSufficientData,nCols,int,0,MathIllegalArgumentException,$ < 2
StorelessBivariateCovariance.java,getResult,n,double,0,NumberIsTooSmallException,$ < 2
SpearmansCorrelation.java,correlation,xArray,double[],1,DimensionMismatchException,$.length != yArray.length
SpearmansCorrelation.java,correlation,xArray,double[],1,MathIllegalArgumentException,$.length < 2
Covariance.java,covariance,length,int,1,MathIllegalArgumentException,$ != yArray.length
Covariance.java,covariance,length,int,1,MathIllegalArgumentException,$ < 2
Covariance.java,checkSufficientData,nRows,int,0,MathIllegalArgumentException,$ < 2
Covariance.java,checkSufficientData,nCols,int,0,MathIllegalArgumentException,$ < 2
StorelessCovariance.java,increment,length,int,0,DimensionMismatchException,$ != dimension
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ == j
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ < p
MillerUpdatingRegression.java,MillerUpdatingRegression,numberOfVariables,int,0,ModelSpecificationException,$ < 1
MillerUpdatingRegression.java,MillerUpdatingRegression,errorTolerance,double,1,DEF,$ > 0
MillerUpdatingRegression.java,addObservation,x,double[],0,ModelSpecificationException,$.length != nvars
MillerUpdatingRegression.java,addObservation,x,double[],0,ModelSpecificationException,$.length + 1 != nvars
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$ == null
MillerUpdatingRegression.java,addObservations,y,double[],0,ModelSpecificationException,$ == null
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$.length != y.length
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$.length == 0
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$[0].length + 1 > x.length
MillerUpdatingRegression.java,include,w,double,0,RET,$ == 0.0
MillerUpdatingRegression.java,include,xi,double,0,DEF,$ == 0.0
MillerUpdatingRegression.java,include,di,double,1,DEF,$ != 0.0
MillerUpdatingRegression.java,include,tmp,double,0,DEF,FastMath.abs($) > Precision.EPSILON
MillerUpdatingRegression.java,include,di,double,1,DEF,$ != 0.0
MillerUpdatingRegression.java,include,di,double,1,DEF,$ != 0.0
MillerUpdatingRegression.java,smartAdd,_a,double,1,RET,$ > _b
MillerUpdatingRegression.java,smartAdd,_b,double,0,RET,$ > eps
MillerUpdatingRegression.java,smartAdd,_a,double,0,RET,$ > eps
MillerUpdatingRegression.java,regcf,nreq,int,0,ModelSpecificationException,$ < 1
MillerUpdatingRegression.java,singcheck,r,double[],0,DEF,Math.abs($[pos]) * work_sing[row] < temp
MillerUpdatingRegression.java,singcheck,work_sing,double[],0,DEF,Math.abs(r[pos]) * $[row] < temp
MillerUpdatingRegression.java,singcheck,pos,int,0,DEF,Math.abs(r[$]) * work_sing[row] < temp
MillerUpdatingRegression.java,singcheck,row,int,0,DEF,Math.abs(r[pos]) * work_sing[$] < temp
MillerUpdatingRegression.java,singcheck,col,int,0,DEF,work_sing[$] < temp
MillerUpdatingRegression.java,singcheck,work_sing,double[],0,DEF,$[col] < temp
MillerUpdatingRegression.java,cov,row,int,1,DEF,$ == col
MillerUpdatingRegression.java,getPartialCorrelations,in,int,0,RET,$ < -1
MillerUpdatingRegression.java,getPartialCorrelations,in,int,0,RET,$ >= nvars
MillerUpdatingRegression.java,getPartialCorrelations,d,double[],0,DEF,$[in] > 0.0
MillerUpdatingRegression.java,getPartialCorrelations,in,int,0,DEF,d[$] > 0.0
MillerUpdatingRegression.java,getPartialCorrelations,sumxx,double,1,DEF,$ > 0.0
MillerUpdatingRegression.java,getPartialCorrelations,sumyy,double,0,DEF,$ > 0.0
MillerUpdatingRegression.java,vmove,from,int,0,RET,$ == to
MillerUpdatingRegression.java,vmove,from,int,1,DEF,$ < to
MillerUpdatingRegression.java,vmove,m,int,0,DEF,$ > 0
MillerUpdatingRegression.java,reorderRegressors,list,int[],0,RET,$.length < 1
MillerUpdatingRegression.java,reorderRegressors,i,int,0,RET,$ > next
MillerUpdatingRegression.java,getDiagonalOfHatMatrix,row_data,double[],0,RET,$.length > nvars
MillerUpdatingRegression.java,regress,i,int,0,DEF,this.vorder[$] != i
MillerUpdatingRegression.java,regress,j,int,0,DEF,this.vorder[$] == i
MillerUpdatingRegression.java,regress,_i,int,1,DEF,$ > _j
MillerUpdatingRegression.java,regress,i,int,0,DEF,$ > 0
MillerUpdatingRegression.java,regress,iExclude,int,1,DEF,$ > 0
MillerUpdatingRegression.java,regress,variablesToInclude,int[],0,DEF,$[i] > -1
MillerUpdatingRegression.java,regress,i,int,0,DEF,variablesToInclude[$] > -1
MillerUpdatingRegression.java,regress,_i,int,1,DEF,$ > _j
AbstractMultipleLinearRegression.java,newSampleData,data,double[],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,newSampleData,nobs,int,0,NumberIsTooSmallException,$ <= nvars
AbstractMultipleLinearRegression.java,newYSampleData,y,double[],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,newYSampleData,y,double[],0,NoDataException,$.length == 0
AbstractMultipleLinearRegression.java,newXSampleData,x,double[][],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,newXSampleData,x,double[][],0,NoDataException,$.length == 0
AbstractMultipleLinearRegression.java,newXSampleData,x,double[][],0,DimensionMismatchException,$[i].length != nVars
AbstractMultipleLinearRegression.java,newXSampleData,i,int,0,DimensionMismatchException,x[$].length != nVars
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,y,double[],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,DimensionMismatchException,$.length != y.length
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,NoDataException,$.length == 0
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,MathIllegalArgumentException,$[0].length + 1 > x.length
AbstractMultipleLinearRegression.java,validateCovarianceData,x,double[][],0,DimensionMismatchException,$.length != covariance.length
AbstractMultipleLinearRegression.java,validateCovarianceData,covariance,double[][],0,NonSquareMatrixException,$.length > 0
SimpleRegression.java,addData,n,long,1,DEF,$ == 0
SimpleRegression.java,removeData,n,long,0,DEF,$ > 0
SimpleRegression.java,addData,data,double[][],0,ModelSpecificationException,$[i].length < 2
SimpleRegression.java,addData,i,int,0,ModelSpecificationException,data[$].length < 2
SimpleRegression.java,addObservation,x,double[],0,ModelSpecificationException,$ == null
SimpleRegression.java,addObservation,x,double[],0,ModelSpecificationException,$.length == 0
SimpleRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$ == null
SimpleRegression.java,addObservations,y,double[],0,ModelSpecificationException,$ == null
SimpleRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$.length != y.length
SimpleRegression.java,addObservations,x,double[][],0,DEF,$[i] == null
SimpleRegression.java,addObservations,i,int,0,DEF,x[$] == null
SimpleRegression.java,addObservations,x,double[][],0,DEF,$[i].length == 0
SimpleRegression.java,addObservations,i,int,0,DEF,x[$].length == 0
SimpleRegression.java,getSlope,n,long,0,RET,$ < 2
SimpleRegression.java,getTotalSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getXSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getMeanSquareError,n,long,0,RET,$ < 3
SimpleRegression.java,getR,b1,double,0,DEF,$ < 0
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,OutOfRangeException,$ >= 1
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,OutOfRangeException,$ <= 0
SimpleRegression.java,regress,n,long,0,NoDataException,$ < 3
SimpleRegression.java,regress,sumXX,double,1,RET,FastMath.abs( $ ) > Precision.SAFE_MIN
SimpleRegression.java,regress,n,long,0,NoDataException,$ < 2
SimpleRegression.java,regress,variablesToInclude,int[],0,MathIllegalArgumentException,$ == null
SimpleRegression.java,regress,variablesToInclude,int[],0,MathIllegalArgumentException,$.length == 0
SimpleRegression.java,regress,variablesToInclude,int[],0,ModelSpecificationException,$.length > 2
SimpleRegression.java,regress,variablesToInclude,int[],0,ModelSpecificationException,$.length > 1
SimpleRegression.java,regress,variablesToInclude,int[],1,OutOfRangeException:RET,$.length == 2
SimpleRegression.java,regress,variablesToInclude,int[],1,ModelSpecificationException,$[0] == 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 0
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[1] != 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 0
SimpleRegression.java,regress,variablesToInclude,int[],1,RET,$[0] == 0
SimpleRegression.java,regress,variablesToInclude,int[],0,RET,$[0] == 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 0
GLSMultipleLinearRegression.java,getOmegaInverse,OmegaInverse,RealMatrix,0,DEF,$ == null
RegressionResults.java,RegressionResults,rank,int,0,DEF,$ > 0
RegressionResults.java,getParameterEstimate,parameters,double[],0,RET,$ == null
RegressionResults.java,getParameterEstimate,index,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getStdErrorOfEstimate,parameters,double[],0,RET,$ == null
RegressionResults.java,getStdErrorOfEstimate,index,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getStdErrorOfEstimate,var,double,0,RET,$ > Double.MIN_VALUE
RegressionResults.java,getStdErrorOfEstimates,parameters,double[],0,RET,$ == null
RegressionResults.java,getStdErrorOfEstimates,var,double,0,DEF,$ > Double.MIN_VALUE
RegressionResults.java,getCovarianceOfParameters,parameters,double[],0,RET,$ == null
RegressionResults.java,getCovarianceOfParameters,i,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getCovarianceOfParameters,j,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getVcvElement,i,int,1,RET,$ == j
RegressionResults.java,getVcvElement,i,int,1,RET,$ > j
Frequency.java,addValue,v,null,0,DEF,$ instanceof Integer
Frequency.java,addValue,count,Long,1,DEF,$ == null
Frequency.java,getCount,v,null,0,RET,$ instanceof Integer
Frequency.java,getCount,count,Long,0,DEF,$ != null
Frequency.java,getPct,sumFreq,long,0,RET,$ == 0
Frequency.java,getCumFreq,v,null,0,RET,$ instanceof Integer
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,DEF,$ == null
Frequency.java,getCumFreq,value,Long,0,DEF,$ != null
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,RET,$.compare(v, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,v,Comparable<>,0,RET,c.compare($, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,freqTable,TreeMap<Comparable<?>,Long>,0,RET,c.compare(v, $.firstKey()) < 0
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,RET,$.compare(v, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,v,Comparable<>,0,RET,c.compare($, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,freqTable,TreeMap<Comparable<?>,Long>,0,RET,c.compare(v, $.lastKey()) >= 0
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,1,DEF,$.compare(v, nextValue) > 0
Frequency.java,getCumFreq,v,Comparable<>,1,DEF,c.compare($, nextValue) > 0
Frequency.java,getCumFreq,nextValue,Comparable<>,1,DEF,c.compare(v, $) > 0
Frequency.java,getCumPct,sumFreq,long,0,RET,$ == 0
Frequency.java,equals,obj,null,0,RET,$ instanceof Frequency
Frequency.java,equals,freqTable,TreeMap<Comparable<?>,Long>,1,RET,$ == null
Frequency.java,equals,other,Frequency,0,RET,$.freqTable != null
KalmanFilter.java,KalmanFilter,processModel,ProcessModel,1,DEF,$.getControlMatrix() == null
KalmanFilter.java,KalmanFilter,processModel,ProcessModel,1,DEF,$.getInitialStateEstimate() == null
KalmanFilter.java,KalmanFilter,processModel,ProcessModel,1,DEF,$.getInitialErrorCovariance() == null
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$ != null
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() > 0
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() > 0
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
KalmanFilter.java,KalmanFilter,measNoise,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
KalmanFilter.java,predict,u,RealVector,0,DimensionMismatchException,$ != null
KalmanFilter.java,predict,u,RealVector,0,DEF,$ != null
TriangularDistribution.java,TriangularDistribution,a,double,0,NumberIsTooLargeException,$ >= b
TriangularDistribution.java,TriangularDistribution,c,double,0,NumberIsTooSmallException,$ < a
TriangularDistribution.java,TriangularDistribution,c,double,0,NumberIsTooLargeException,$ > b
TriangularDistribution.java,density,x,double,0,RET,$ < a
TriangularDistribution.java,density,a,double,0,RET,$ <= x
TriangularDistribution.java,density,x,double,0,RET,$ < c
TriangularDistribution.java,density,x,double,0,RET,$ == c
TriangularDistribution.java,density,c,double,0,RET,$ < x
TriangularDistribution.java,density,x,double,0,RET,$ <= b
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ < a
TriangularDistribution.java,cumulativeProbability,a,double,0,RET,$ <= x
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ < c
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ == c
TriangularDistribution.java,cumulativeProbability,c,double,0,RET,$ < x
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ <= b
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
ZipfDistribution.java,ZipfDistribution,numberOfElements,int,0,NotStrictlyPositiveException,$ <= 0
ZipfDistribution.java,ZipfDistribution,exponent,double,0,NotStrictlyPositiveException,$ <= 0
ZipfDistribution.java,probability,x,int,0,RET,$ <= 0
ZipfDistribution.java,probability,x,int,0,RET,$ > numberOfElements
ZipfDistribution.java,cumulativeProbability,x,int,1,RET,$ <= 0
ZipfDistribution.java,cumulativeProbability,x,int,0,RET,$ >= numberOfElements
HypergeometricDistribution.java,HypergeometricDistribution,populationSize,int,0,NotStrictlyPositiveException,$ <= 0
HypergeometricDistribution.java,HypergeometricDistribution,numberOfSuccesses,int,0,NotPositiveException,$ < 0
HypergeometricDistribution.java,HypergeometricDistribution,sampleSize,int,0,NotPositiveException,$ < 0
HypergeometricDistribution.java,HypergeometricDistribution,numberOfSuccesses,int,0,NumberIsTooLargeException,$ > populationSize
HypergeometricDistribution.java,HypergeometricDistribution,sampleSize,int,0,NumberIsTooLargeException,$ > populationSize
WeibullDistribution.java,WeibullDistribution,alpha,double,0,NotStrictlyPositiveException,$ <= 0
WeibullDistribution.java,WeibullDistribution,beta,double,0,NotStrictlyPositiveException,$ <= 0
WeibullDistribution.java,density,x,double,0,RET,$ < 0
WeibullDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ < 0.0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ > 1.0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
NormalDistribution.java,NormalDistribution,sd,double,0,NotStrictlyPositiveException,$ <= 0
NormalDistribution.java,cumulativeProbability,x0,double,0,NumberIsTooLargeException,$ > x1
CauchyDistribution.java,CauchyDistribution,scale,double,0,NotStrictlyPositiveException,$ <= 0
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ < 0
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ > 1
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
TDistribution.java,TDistribution,degreesOfFreedom,double,0,NotStrictlyPositiveException,$ <= 0
TDistribution.java,cumulativeProbability,x,double,1,DEF,$ == 0
TDistribution.java,cumulativeProbability,x,double,1,DEF,$ < 0.0
TDistribution.java,getNumericalMean,df,double,0,RET,$ > 1
TDistribution.java,getNumericalVariance,df,double,0,RET,$ > 2
TDistribution.java,getNumericalVariance,df,double,0,RET,$ > 1
TDistribution.java,getNumericalVariance,df,double,0,RET,$ <= 2
LogNormalDistribution.java,LogNormalDistribution,shape,double,0,NotStrictlyPositiveException,$ <= 0
LogNormalDistribution.java,density,x,double,0,RET,$ <= 0
LogNormalDistribution.java,cumulativeProbability,x,double,0,RET,$ <= 0
LogNormalDistribution.java,cumulativeProbability,x0,double,0,NumberIsTooLargeException,$ > x1
LogNormalDistribution.java,cumulativeProbability,x0,double,0,RET,$ <= 0
LogNormalDistribution.java,cumulativeProbability,x1,double,0,RET,$ <= 0
PoissonDistribution.java,PoissonDistribution,p,double,0,NotStrictlyPositiveException,$ <= 0
PoissonDistribution.java,probability,x,int,1,DEF,$ < 0
PoissonDistribution.java,probability,x,int,1,DEF,$ == Integer.MAX_VALUE
PoissonDistribution.java,probability,x,int,1,DEF,$ == 0
PoissonDistribution.java,cumulativeProbability,x,int,0,RET,$ < 0
PoissonDistribution.java,cumulativeProbability,x,int,0,RET,$ == Integer.MAX_VALUE
PoissonDistribution.java,nextPoisson,meanPoisson,double,1,RET,$ < pivot
PoissonDistribution.java,nextPoisson,r,double,1,DEF,$ >= p
PoissonDistribution.java,nextPoisson,u,double,1,DEF,$ <= p1
PoissonDistribution.java,nextPoisson,x,double,0,DEF,$ > delta
PoissonDistribution.java,nextPoisson,x,double,0,DEF,$ < -lambda
PoissonDistribution.java,nextPoisson,v,double,0,DEF,$ < -t
PoissonDistribution.java,nextPoisson,a,int,0,DEF,$ == 0
PoissonDistribution.java,nextPoisson,v,double,0,DEF,$ < qa
PoissonDistribution.java,nextPoisson,v,double,0,DEF,$ > qr
BetaDistribution.java,density,x,double,1,RET,$ < 0
BetaDistribution.java,density,x,double,1,RET,$ > 1
BetaDistribution.java,density,x,double,1,NumberIsTooSmallException:RET,$ == 0
BetaDistribution.java,density,alpha,double,0,NumberIsTooSmallException,$ < 1
BetaDistribution.java,density,x,double,1,NumberIsTooSmallException:RET,$ == 1
BetaDistribution.java,density,beta,double,0,NumberIsTooSmallException,$ < 1
BetaDistribution.java,cumulativeProbability,x,double,1,RET,$ <= 0
BetaDistribution.java,cumulativeProbability,x,double,1,RET,$ >= 1
UniformIntegerDistribution.java,UniformIntegerDistribution,lower,int,0,NumberIsTooLargeException,$ >= upper
UniformIntegerDistribution.java,probability,x,int,0,RET,$ < lower
UniformIntegerDistribution.java,probability,x,int,0,RET,$ > upper
UniformIntegerDistribution.java,cumulativeProbability,x,int,0,RET,$ < lower
UniformIntegerDistribution.java,cumulativeProbability,x,int,0,RET,$ > upper
KolmogorovSmirnovDistribution.java,KolmogorovSmirnovDistribution,n,int,0,NotStrictlyPositiveException,$ <= 0
KolmogorovSmirnovDistribution.java,cdf,d,double,1,RET,$ <= ninvhalf
KolmogorovSmirnovDistribution.java,cdf,ninvhalf,double,1,RET,$ < d
KolmogorovSmirnovDistribution.java,cdf,d,double,1,RET,$ <= ninv
KolmogorovSmirnovDistribution.java,cdf,ninv,double,1,RET,1 - $ <= d
KolmogorovSmirnovDistribution.java,cdf,d,double,1,RET,$ < 1
KolmogorovSmirnovDistribution.java,createH,hDouble,double,0,NumberIsTooLargeException,$ >= 1
KolmogorovSmirnovDistribution.java,createH,i,int,1,DEF,$ - j + 1 < 0
KolmogorovSmirnovDistribution.java,createH,j,int,1,DEF,i - $ + 1 < 0
KolmogorovSmirnovDistribution.java,createH,h,BigFraction,0,DEF,$.compareTo(BigFraction.ONE_HALF) == 1
KolmogorovSmirnovDistribution.java,createH,i,int,0,DEF,$ - j + 1 > 0
KolmogorovSmirnovDistribution.java,createH,j,int,0,DEF,i - $ + 1 > 0
AbstractRealDistribution.java,cumulativeProbability,x0,double,0,NumberIsTooLargeException,$ > x1
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0.0
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1.0
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 0.0
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 1.0
AbstractRealDistribution.java,inverseCumulativeProbability,lowerBound,double,0,DEF,$ == Double.NEGATIVE_INFINITY
AbstractRealDistribution.java,inverseCumulativeProbability,upperBound,double,0,DEF,$ == Double.POSITIVE_INFINITY
AbstractRealDistribution.java,inverseCumulativeProbability,dx,double,0,RET,cumulativeProbability(x - $) == px
AbstractRealDistribution.java,inverseCumulativeProbability,x,double,0,RET,cumulativeProbability($ - dx) == px
AbstractRealDistribution.java,inverseCumulativeProbability,midPoint,double,1,DEF,cumulativeProbability($) < px
AbstractRealDistribution.java,sample,sampleSize,int,0,NotStrictlyPositiveException,$ <= 0
GammaDistribution.java,GammaDistribution,shape,double,0,NotStrictlyPositiveException,$ <= 0
GammaDistribution.java,GammaDistribution,scale,double,0,NotStrictlyPositiveException,$ <= 0
GammaDistribution.java,density,x,double,0,RET,$ < 0
GammaDistribution.java,density,y,double,0,RET,$ <= minY
GammaDistribution.java,density,y,double,0,RET,FastMath.log($) >= maxLogY
GammaDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0
GammaDistribution.java,sample,shape,double,0,RET,$ < 1
GammaDistribution.java,sample,p,double,1,RET,$ <= 1
GammaDistribution.java,sample,v,double,0,DEF,$ <= 0
PascalDistribution.java,PascalDistribution,r,int,0,NotStrictlyPositiveException,$ <= 0
PascalDistribution.java,PascalDistribution,p,double,0,OutOfRangeException,$ < 0
PascalDistribution.java,PascalDistribution,p,double,0,OutOfRangeException,$ > 1
PascalDistribution.java,probability,x,int,1,DEF,$ < 0
PascalDistribution.java,cumulativeProbability,x,int,1,DEF,$ < 0
UniformRealDistribution.java,UniformRealDistribution,lower,double,0,NumberIsTooLargeException,$ >= upper
UniformRealDistribution.java,density,x,double,0,RET,$ < lower
UniformRealDistribution.java,density,x,double,0,RET,$ > upper
UniformRealDistribution.java,cumulativeProbability,x,double,0,RET,$ <= lower
UniformRealDistribution.java,cumulativeProbability,x,double,0,RET,$ >= upper
FDistribution.java,FDistribution,numeratorDegreesOfFreedom,double,0,NotStrictlyPositiveException,$ <= 0
FDistribution.java,FDistribution,denominatorDegreesOfFreedom,double,0,NotStrictlyPositiveException,$ <= 0
FDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0
FDistribution.java,getNumericalMean,denominatorDF,double,0,RET,$ > 2
FDistribution.java,calculateNumericalVariance,denominatorDF,double,0,RET,$ > 4
ExponentialDistribution.java,ExponentialDistribution,mean,double,0,NotStrictlyPositiveException,$ <= 0
ExponentialDistribution.java,density,x,double,0,RET,$ < 0
ExponentialDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
ExponentialDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ < 0.0
ExponentialDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ > 1.0
ExponentialDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1.0
ExponentialDistribution.java,sample,u2,double,0,DEF,$ < umin
AbstractIntegerDistribution.java,cumulativeProbability,x1,int,0,NumberIsTooLargeException,$ < x0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 0.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,lower,int,1,RET,$ == Integer.MIN_VALUE
AbstractIntegerDistribution.java,inverseCumulativeProbability,lower,int,0,RET,checkedCumulativeProbability($) >= p
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 1.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,tmp,double,0,DEF,$ > lower
AbstractIntegerDistribution.java,inverseCumulativeProbability,tmp,double,0,DEF,$ < upper
AbstractIntegerDistribution.java,solveInverseCumulativeProbability,xm,int,0,DEF,$ < lower
AbstractIntegerDistribution.java,solveInverseCumulativeProbability,xm,int,0,DEF,$ > upper
AbstractIntegerDistribution.java,solveInverseCumulativeProbability,pm,double,1,DEF,$ >= p
AbstractIntegerDistribution.java,sample,sampleSize,int,0,NotStrictlyPositiveException,$ <= 0
BinomialDistribution.java,BinomialDistribution,trials,int,0,NotPositiveException,$ < 0
BinomialDistribution.java,BinomialDistribution,p,double,0,OutOfRangeException,$ < 0
BinomialDistribution.java,BinomialDistribution,p,double,0,OutOfRangeException,$ > 1
BinomialDistribution.java,probability,x,int,1,DEF,$ < 0
BinomialDistribution.java,probability,x,int,1,DEF,$ > numberOfTrials
BinomialDistribution.java,cumulativeProbability,x,int,1,DEF,$ < 0
BinomialDistribution.java,cumulativeProbability,x,int,1,DEF,$ >= numberOfTrials
SaddlePointExpansion.java,getStirlingError,z,double,1,DEF,$ < 15.0
SaddlePointExpansion.java,getStirlingError,z2,double,1,DEF,FastMath.floor($) == z2
SaddlePointExpansion.java,logBinomialProbability,x,int,1,DEF,$ == 0
SaddlePointExpansion.java,logBinomialProbability,p,double,1,DEF,$ < 0.1
SaddlePointExpansion.java,logBinomialProbability,x,int,1,DEF,$ == n
SaddlePointExpansion.java,logBinomialProbability,q,double,1,DEF,$ < 0.1
FastFourierTransformer.java,bitReversalShuffle2,i,int,0,DEF,$ < j
FastFourierTransformer.java,normalizeTransformedData,type,TransformType,0,DEF,$ == TransformType.INVERSE
FastFourierTransformer.java,transformInPlace,dataRI,double[][],0,DimensionMismatchException,$.length != 2
FastFourierTransformer.java,transformInPlace,dataR,double[],0,DimensionMismatchException,$.length != dataI.length
FastFourierTransformer.java,transformInPlace,n,int,1,RET,$ == 1
FastFourierTransformer.java,transformInPlace,n,int,0,RET,$ == 2
FastFourierTransformer.java,transformInPlace,type,TransformType,1,DEF,$ == TransformType.INVERSE
FastFourierTransformer.java,transformInPlace,type,TransformType,0,DEF,$ == TransformType.INVERSE
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == dimensionSize.length
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == d
FastFourierTransformer.java,get,vector,int[],0,DimensionMismatchException:RET,$ == null
FastFourierTransformer.java,get,dimensionSize,int[],0,DimensionMismatchException,$.length > 0
FastFourierTransformer.java,get,vector,int[],0,DimensionMismatchException,$.length != dimensionSize.length
FastFourierTransformer.java,set,vector,int[],0,DimensionMismatchException:RET,$ == null
FastFourierTransformer.java,set,dimensionSize,int[],0,DimensionMismatchException,$.length > 0
FastFourierTransformer.java,set,vector,int[],0,DimensionMismatchException,$.length != dimensionSize.length
FastHadamardTransformer.java,transform,type,TransformType,0,RET,$ == TransformType.FORWARD
FastCosineTransformer.java,transform,type,TransformType,0,RET,$ == TransformType.FORWARD
FastCosineTransformer.java,transform,normalization,DctNormalization,0,RET,$ == DctNormalization.ORTHOGONAL_DCT_I
FastCosineTransformer.java,transform,normalization,DctNormalization,1,DEF,$ == DctNormalization.ORTHOGONAL_DCT_I
FastCosineTransformer.java,fct,n,int,0,RET,$ == 1
FastSineTransformer.java,transform,normalization,DstNormalization,0,RET,$ == DstNormalization.ORTHOGONAL_DST_I
FastSineTransformer.java,transform,type,TransformType,0,RET,$ == TransformType.FORWARD
FastSineTransformer.java,fst,f,double[],0,MathIllegalArgumentException,$[0] != 0.0
FastSineTransformer.java,fst,n,int,0,RET,$ == 1
TransformUtils.java,createComplexArray,dataRI,double[][],0,DimensionMismatchException,$.length != 2
TransformUtils.java,createComplexArray,dataR,double[],0,DimensionMismatchException,$.length != dataI.length
TransformUtils.java,exactLog2,index,int,0,MathIllegalArgumentException,$ < 0
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,source.substring($, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,endIndex,int,0,DEF,source.substring(startIndex, $).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,source,String,0,DEF,$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,sb,StringBuilder,0,DEF,source.substring(startIndex, endIndex).compareTo($.toString()) == 0
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,$ == endIndex
CompositeFormat.java,parseNumber,number,Number,0,DEF,$ != null
CompositeFormat.java,parseFixedstring,startIndex,int,0,RET,source.substring($, endIndex).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,endIndex,int,0,RET,source.substring(startIndex, $).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,expected,String,0,RET,source.substring(startIndex, endIndex).compareTo($) != 0
CompositeFormat.java,parseFixedstring,source,String,0,RET,$.substring(startIndex, endIndex).compareTo(expected) != 0
BigReal.java,equals,other,null,0,RET,$ instanceof BigReal
ResizableDoubleArray.java,ResizableDoubleArray,initialArray,double[],1,DEF,$ == null
ResizableDoubleArray.java,addElement,startIndex,int,0,DEF,($ + numElements) > internalArray.length
ResizableDoubleArray.java,addElement,numElements,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,addElementRolling,startIndex,int,0,DEF,($ + (numElements + 1)) > internalArray.length
ResizableDoubleArray.java,addElementRolling,numElements,int,0,DEF,(startIndex + ($ + 1)) > internalArray.length
ResizableDoubleArray.java,substituteMostRecentElement,numElements,int,0,MathIllegalStateException,$ < 1
ResizableDoubleArray.java,checkContractExpand,contraction,float,0,MathIllegalArgumentException,$ < expansion
ResizableDoubleArray.java,checkContractExpand,contraction,float,0,MathIllegalArgumentException,$ <= 1.0
ResizableDoubleArray.java,checkContractExpand,expansion,float,0,MathIllegalArgumentException,$ <= 1.0
ResizableDoubleArray.java,discardExtremeElements,i,int,1,MathIllegalArgumentException,$ > numElements
ResizableDoubleArray.java,discardExtremeElements,i,int,1,MathIllegalArgumentException,$ < 0
ResizableDoubleArray.java,expand,expansionMode,int,1,DEF,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,getElement,index,int,1,ArrayIndexOutOfBoundsException,$ >= numElements
ResizableDoubleArray.java,getElement,index,int,1,RET,$ >= 0
ResizableDoubleArray.java,setElement,index,int,0,ArrayIndexOutOfBoundsException,$ < 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ + 1 > numElements
ResizableDoubleArray.java,setElement,startIndex,int,0,DEF,($ + index) >= internalArray.length
ResizableDoubleArray.java,setElement,index,int,0,DEF,(startIndex + $) >= internalArray.length
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,MathIllegalArgumentException,$ != MULTIPLICATIVE_MODE
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,MathIllegalArgumentException,$ != ADDITIVE_MODE
ResizableDoubleArray.java,setInitialCapacity,initialCapacity,int,1,DEF,$ > 0
ResizableDoubleArray.java,setNumElements,i,int,0,MathIllegalArgumentException,$ < 0
ResizableDoubleArray.java,setNumElements,startIndex,int,0,DEF,($ + i) > internalArray.length
ResizableDoubleArray.java,setNumElements,i,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,shouldContract,expansionMode,int,1,RET,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,equals,object,Object,0,RET,$ instanceof ResizableDoubleArray == false
ResizableDoubleArray.java,equals,object,null,0,RET,$ instanceof ResizableDoubleArray
OpenIntToFieldHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToFieldHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToFieldHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToFieldHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToFieldHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToFieldHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToFieldHashMap.java,key,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToFieldHashMap.java,key,current,int,0,NoSuchElementException,$ < 0
OpenIntToFieldHashMap.java,value,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToFieldHashMap.java,value,current,int,0,NoSuchElementException,$ < 0
OpenIntToFieldHashMap.java,advance,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToFieldHashMap.java,advance,current,int,0,NoSuchElementException,$ < 0
FastMathCalc.java,buildSinCosTables,i,int,1,DEF,($ & 1) == 0
FastMathCalc.java,slowCos,i,int,0,DEF,($ & 1) != 0
FastMathCalc.java,slowCos,i,int,0,DEF,($ & 2) != 0
FastMathCalc.java,slowCos,result,double[],0,DEF,$ != null
FastMathCalc.java,slowSin,i,int,0,DEF,($ & 1) == 0
FastMathCalc.java,slowSin,i,int,0,DEF,($ & 2) != 0
FastMathCalc.java,slowSin,result,double[],0,DEF,$ != null
FastMathCalc.java,slowexp,result,double[],0,DEF,$ != null
FastMathCalc.java,split,d,double,1,DEF,$ < 8e298
FastMathCalc.java,split,d,double,1,DEF,$ > -8e298
FastMathCalc.java,resplit,c,double,1,DEF,$ < 8e298
FastMathCalc.java,resplit,c,double,1,DEF,$ > -8e298
FastMathCalc.java,splitReciprocal,in,double[],0,DEF,$[0] == 0.0
FastMathCalc.java,expint,p,int,0,DEF,($ & 1) != 0
FastMathCalc.java,expint,result,double[],0,DEF,$ != null
FastMathCalc.java,format,d,double,1,RET,$ != d
FastMathCalc.java,checkLen,expectedLen,int,0,DimensionMismatchException,$ != actual
Precision.java,compareTo,x,double,0,RET,$ < y
Precision.java,compareTo,x,double,0,RET,$ < y
Precision.java,equals,xInt,int,0,DEF,$ < 0
Precision.java,equals,yInt,int,0,DEF,$ < 0
Precision.java,equals,xInt,long,0,DEF,$ < 0
Precision.java,equals,yInt,long,0,DEF,$ < 0
Precision.java,roundUnscaled,sign,double,1,DEF,$ == -1
Precision.java,roundUnscaled,sign,double,1,DEF,$ == -1
Precision.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
Precision.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
Precision.java,roundUnscaled,fraction,double,1,DEF,$ < 0.5
Precision.java,roundUnscaled,fraction,double,1,DEF,$ >= 0.5
ContinuedFraction.java,evaluate,deltaN,double,0,DEF,FastMath.abs($ - 1.0) < epsilon
ContinuedFraction.java,evaluate,n,int,0,MaxCountExceededException,$ >= maxIterations
MathUtils.java,copySign,magnitude,byte,1,RET,$ >= 0
MathUtils.java,copySign,sign,byte,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,byte,1,RET,$ < 0
MathUtils.java,copySign,sign,byte,1,RET,$ < 0
MathUtils.java,copySign,sign,byte,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,byte,1,MathArithmeticException,$ == Byte.MIN_VALUE
MathUtils.java,copySign,magnitude,short,1,RET,$ >= 0
MathUtils.java,copySign,sign,short,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,short,1,RET,$ < 0
MathUtils.java,copySign,sign,short,1,RET,$ < 0
MathUtils.java,copySign,sign,short,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,short,1,MathArithmeticException,$ == Short.MIN_VALUE
MathUtils.java,copySign,magnitude,int,1,RET,$ >= 0
MathUtils.java,copySign,sign,int,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,int,1,RET,$ < 0
MathUtils.java,copySign,sign,int,1,RET,$ < 0
MathUtils.java,copySign,sign,int,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,int,1,MathArithmeticException,$ == Integer.MIN_VALUE
MathUtils.java,copySign,magnitude,long,1,RET,$ >= 0
MathUtils.java,copySign,sign,long,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,long,1,RET,$ < 0
MathUtils.java,copySign,sign,long,1,RET,$ < 0
MathUtils.java,copySign,sign,long,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,long,1,MathArithmeticException,$ == Long.MIN_VALUE
MathUtils.java,checkNotNull,o,Object,0,NullArgumentException,$ == null
MathUtils.java,checkNotNull,o,Object,0,NullArgumentException,$ == null
MathArrays.java,isMonotonic,comp,int,0,RET,$ >= 0
MathArrays.java,isMonotonic,comp,int,0,RET,$ > 0
MathArrays.java,isMonotonic,comp,int,0,RET,$ >= 0
MathArrays.java,isMonotonic,comp,int,0,RET,$ > 0
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] <= previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] <= previous
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] < previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] < previous
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] >= previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] >= previous
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] > previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] > previous
MathArrays.java,checkOrder,index,int,0,RET,$ == max
MathArrays.java,safeNorm,xabs,double,1,DEF,$ < rdwarf
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > agiant
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > rdwarf
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > x1max
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > x3max
MathArrays.java,safeNorm,xabs,double,0,DEF,$ != 0
MathArrays.java,safeNorm,s1,double,1,DEF,$ != 0
MathArrays.java,safeNorm,s2,double,1,DEF,$ == 0
MathArrays.java,safeNorm,s2,double,1,DEF,$ >= x3max
MathArrays.java,sortInPlace,x,double[],0,NullArgumentException,$ == null
MathArrays.java,sortInPlace,y,double[],0,NullArgumentException,$ == null
MathArrays.java,sortInPlace,y,double[],0,DimensionMismatchException,$.length != len
MathArrays.java,linearCombination,len,int,0,DimensionMismatchException,$ != b.length
MathArrays.java,equals,x,float[],0,RET,$ == null
MathArrays.java,equals,y,float[],0,RET,$ == null
MathArrays.java,equals,x,float[],0,RET,$.length != y.length
MathArrays.java,equalsIncludingNaN,x,float[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,y,float[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,x,float[],0,RET,$.length != y.length
MathArrays.java,equals,x,double[],0,RET,$ == null
MathArrays.java,equals,y,double[],0,RET,$ == null
MathArrays.java,equals,x,double[],0,RET,$.length != y.length
MathArrays.java,equalsIncludingNaN,x,double[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,y,double[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,x,double[],0,RET,$.length != y.length
MathArrays.java,normalizeArray,sum,double,0,MathArithmeticException,$ == 0
DefaultTransformer.java,transform,o,Object,0,NullArgumentException,$ == null
DefaultTransformer.java,transform,o,null,0,RET,$ instanceof Number
MultidimensionalCounter.java,MultidimensionalCounter,tS,int,0,NotStrictlyPositiveException,$ <= 0
MultidimensionalCounter.java,getCounts,index,int,0,OutOfRangeException,$ < 0
MultidimensionalCounter.java,getCounts,index,int,0,OutOfRangeException,$ >= totalSize
MultidimensionalCounter.java,getCount,c,int[],0,DimensionMismatchException,$.length != dimension
MultidimensionalCounter.java,getCount,index,int,0,OutOfRangeException,$ < 0
Decimal64.java,equals,obj,null,0,RET,$ instanceof Decimal64
Incrementor.java,Incrementor,cb,MaxCountExceededCallback,0,NullArgumentException,$ == null
Incrementor.java,incrementCount,count,int,0,DEF,++$ > maximalCount
FastMath.java,doubleHighPart,d,double,0,RET,$ > -Precision.SAFE_MIN
FastMath.java,doubleHighPart,d,double,0,RET,$ < Precision.SAFE_MIN
FastMath.java,cosh,x,double,0,RET,$ != x
FastMath.java,cosh,x,double,0,RET,$ > 20.0
FastMath.java,cosh,x,double,0,RET,$ < -20
FastMath.java,cosh,x,double,0,DEF,$ < 0.0
FastMath.java,sinh,x,double,0,RET,$ != x
FastMath.java,sinh,x,double,0,RET,$ > 20.0
FastMath.java,sinh,x,double,0,RET,$ < -20
FastMath.java,sinh,x,double,0,RET,$ == 0
FastMath.java,sinh,x,double,0,DEF,$ < 0.0
FastMath.java,sinh,x,double,1,DEF,$ > 0.25
FastMath.java,tanh,x,double,0,RET,$ != x
FastMath.java,tanh,x,double,0,RET,$ > 20.0
FastMath.java,tanh,x,double,0,RET,$ < -20
FastMath.java,tanh,x,double,0,RET,$ == 0
FastMath.java,tanh,x,double,0,DEF,$ < 0.0
FastMath.java,tanh,x,double,1,DEF,$ >= 0.5
FastMath.java,asinh,a,double,0,DEF,$ < 0
FastMath.java,asinh,a,double,1,DEF,$ > 0.167
FastMath.java,asinh,a,double,1,DEF,$ > 0.097
FastMath.java,asinh,a,double,1,DEF,$ > 0.036
FastMath.java,asinh,a,double,1,DEF,$ > 0.0036
FastMath.java,atanh,a,double,0,DEF,$ < 0
FastMath.java,atanh,a,double,1,DEF,$ > 0.15
FastMath.java,atanh,a,double,1,DEF,$ > 0.087
FastMath.java,atanh,a,double,1,DEF,$ > 0.031
FastMath.java,atanh,a,double,1,DEF,$ > 0.003
FastMath.java,exp,x,double,1,RET,$ < 0.0
FastMath.java,exp,intVal,int,0,RET,$ > 746
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,intVal,int,0,RET,$ > 709
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,intVal,int,0,RET,$ == 709
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,intVal,int,0,RET,$ > 709
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,extra,double,1,DEF,$ != 0.0
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,expm1,x,double,0,RET,$ != x
FastMath.java,expm1,x,double,0,RET,$ == 0.0
FastMath.java,expm1,x,double,0,RET,$ <= -1.0
FastMath.java,expm1,x,double,0,RET,$ >= 1.0
FastMath.java,expm1,x,double,1,RET,$ > 0.0
FastMath.java,expm1,x,double,0,DEF,$ < 0.0
FastMath.java,expm1,hiPrecOut,double[],0,DEF,$ != null
FastMath.java,log,x,double,0,RET,$==0
FastMath.java,log,bits,long,0,RET,($ & 0x8000000000000000L) != 0
FastMath.java,log,x,double,0,RET,$ != x
FastMath.java,log,x,double,0,RET,$ != 0.0
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log,bits,long,0,RET,($ & 0x7ff0000000000000L) == 0
FastMath.java,log,x,double,0,RET,$ == 0
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log,exp,int,0,RET,$ == -1
FastMath.java,log,exp,int,0,RET,$ == 0
FastMath.java,log,x,double,0,RET,$ < 1.01
FastMath.java,log,x,double,0,RET,$ > 0.99
FastMath.java,log,hiPrec,double[],0,RET,$ == null
FastMath.java,log,hiPrec,double[],1,DEF,$ != null
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log1p,x,double,0,RET,$ == -1
FastMath.java,log1p,x,double,0,RET,$ > 0
FastMath.java,log1p,x,double,0,RET,1/$ == 0
FastMath.java,log1p,x,double,0,RET,$>1e-6
FastMath.java,log1p,x,double,0,RET,$<-1e-6
FastMath.java,pow,y,double,0,RET,$ == 0.0
FastMath.java,pow,x,double,0,RET,$ != x
FastMath.java,pow,x,double,0,RET,$ == 0
FastMath.java,pow,bits,long,0,RET,($ & 0x8000000000000000L) != 0
FastMath.java,pow,y,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ > 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ > 0
FastMath.java,pow,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,pow,y,double,0,RET,$ != y
FastMath.java,pow,y,double,1,RET,$ < 0.0
FastMath.java,pow,y,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,pow,x,double,0,RET,$ * $ == 1.0
FastMath.java,pow,x,double,1,RET,$ * $ > 1.0
FastMath.java,pow,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,pow,y,double,0,RET,$ != y
FastMath.java,pow,y,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ > 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,pow,x,double,0,RET,$ * $ == 1.0
FastMath.java,pow,x,double,1,RET,$ * $ < 1.0
FastMath.java,pow,x,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ >= TWO_POWER_52
FastMath.java,pow,y,double,0,RET,$ <= -TWO_POWER_52
FastMath.java,pow,y,double,1,RET,$ == (long) y
FastMath.java,pow,y,double,1,DEF,$ < 8e298
FastMath.java,pow,y,double,1,DEF,$ > -8e298
FastMath.java,sinQ,xb,double,0,DEF,$ != 0.0
FastMath.java,tanQ,xb,double,0,DEF,$ != 0.0
FastMath.java,reducePayneHanek,shift,int,1,DEF,$ != 0
FastMath.java,sin,x,double,0,DEF,$ < 0
FastMath.java,sin,xa,double,0,RET,$ == 0.0
FastMath.java,sin,bits,long,0,RET,$ < 0
FastMath.java,sin,xa,double,0,RET,$ != xa
FastMath.java,sin,xa,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,sin,xa,double,1,DEF,$ > 3294198.0
FastMath.java,sin,xa,double,0,DEF,$ > 1.5707963267948966
FastMath.java,cos,x,double,0,DEF,$ < 0
FastMath.java,cos,xa,double,0,RET,$ != xa
FastMath.java,cos,xa,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,cos,xa,double,1,DEF,$ > 3294198.0
FastMath.java,cos,xa,double,0,DEF,$ > 1.5707963267948966
FastMath.java,tan,x,double,0,DEF,$ < 0
FastMath.java,tan,xa,double,0,RET,$ == 0.0
FastMath.java,tan,bits,long,0,RET,$ < 0
FastMath.java,tan,xa,double,0,RET,$ != xa
FastMath.java,tan,xa,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,tan,xa,double,1,DEF,$ > 3294198.0
FastMath.java,tan,xa,double,0,DEF,$ > 1.5707963267948966
FastMath.java,tan,xa,double,0,DEF,$ > 1.5
FastMath.java,tan,quadrant,int,1,DEF,($ & 1) == 0
FastMath.java,atan,xa,double,0,RET,$ == 0.0
FastMath.java,atan,xa,double,0,DEF,$ < 0
FastMath.java,atan,xa,double,0,RET,$ > 1.633123935319537E16
FastMath.java,atan,xa,double,1,DEF,$ < 1
FastMath.java,atan,idx,int,1,DEF,$ == 0
FastMath.java,atan2,x,double,0,RET,$ != x
FastMath.java,atan2,y,double,0,RET,$ != y
FastMath.java,atan2,y,double,0,RET,$ == 0
FastMath.java,atan2,invx,double,0,RET,$ == 0
FastMath.java,atan2,x,double,1,RET,$ > 0
FastMath.java,atan2,x,double,1,RET,$ < 0
FastMath.java,atan2,invx,double,1,RET,$ < 0
FastMath.java,atan2,y,double,1,RET,$ < 0
FastMath.java,atan2,invy,double,1,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,y,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,y,double,0,RET,$ > 0
FastMath.java,atan2,y,double,0,RET,1 / $ > 0
FastMath.java,atan2,y,double,0,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,1 / $ < 0
FastMath.java,atan2,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,y,double,0,RET,$ > 0.0
FastMath.java,atan2,y,double,0,RET,1 / $ > 0.0
FastMath.java,atan2,y,double,0,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,1 / $ < 0
FastMath.java,atan2,x,double,0,RET,$ == 0
FastMath.java,atan2,y,double,0,RET,$ > 0
FastMath.java,atan2,y,double,0,RET,1 / $ > 0
FastMath.java,atan2,y,double,0,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,1 / $ < 0
FastMath.java,atan2,ra,double,0,DEF,$ == 0
FastMath.java,asin,x,double,0,RET,$ != x
FastMath.java,asin,x,double,0,RET,$ > 1.0
FastMath.java,asin,x,double,0,RET,$ < -1.0
FastMath.java,asin,x,double,0,RET,$ == 1.0
FastMath.java,asin,x,double,0,RET,$ == -1.0
FastMath.java,asin,x,double,0,RET,$ == 0.0
FastMath.java,acos,x,double,0,RET,$ != x
FastMath.java,acos,x,double,0,RET,$ > 1.0
FastMath.java,acos,x,double,0,RET,$ < -1.0
FastMath.java,acos,x,double,0,RET,$ == -1.0
FastMath.java,acos,x,double,0,RET,$ == 1.0
FastMath.java,acos,x,double,0,RET,$ == 0
FastMath.java,cbrt,exponent,int,0,RET,$ == -1023
FastMath.java,cbrt,x,double,0,RET,$ == 0
FastMath.java,cbrt,exponent,int,0,RET,$ == 1024
FastMath.java,toRadians,x,double,0,RET,$ == 0.0
FastMath.java,toRadians,result,double,0,DEF,$ == 0
FastMath.java,toDegrees,x,double,0,RET,$ == 0.0
FastMath.java,scalb,n,int,0,RET,$ > -1023
FastMath.java,scalb,n,int,0,RET,$ < 1024
FastMath.java,scalb,d,double,0,RET,$ == 0
FastMath.java,scalb,n,int,0,RET,$ < -2098
FastMath.java,scalb,n,int,0,RET,$ > 2097
FastMath.java,scalb,n,int,1,RET,$ < 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > -53
FastMath.java,scalb,mostSignificantLostBit,long,0,DEF,$ != 0
FastMath.java,scalb,exponent,int,1,RET,$ == 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 2047
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 2047
FastMath.java,scalb,n,int,0,RET,$ > -127
FastMath.java,scalb,n,int,0,RET,$ < 128
FastMath.java,scalb,f,float,0,RET,$ == 0f
FastMath.java,scalb,n,int,0,RET,$ < -277
FastMath.java,scalb,n,int,0,RET,$ > 276
FastMath.java,scalb,n,int,1,RET,$ < 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > -24
FastMath.java,scalb,mostSignificantLostBit,int,0,DEF,$ != 0
FastMath.java,scalb,exponent,int,1,RET,$ == 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 255
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 255
FastMath.java,nextAfter,d,double,1,RET,$ == direction
FastMath.java,nextAfter,d,double,0,RET,$ == 0
FastMath.java,nextAfter,direction,double,1,RET,$ < d
FastMath.java,nextAfter,sign,long,1,RET,$ == 0L
FastMath.java,nextAfter,f,float,1,RET,$ == direction
FastMath.java,nextAfter,f,float,0,RET,$ == 0f
FastMath.java,nextAfter,direction,double,1,RET,$ < f
FastMath.java,nextAfter,sign,int,1,RET,$ == 0
FastMath.java,floor,x,double,0,RET,$ != x
FastMath.java,floor,x,double,0,RET,$ >= TWO_POWER_52
FastMath.java,floor,x,double,0,RET,$ <= -TWO_POWER_52
FastMath.java,floor,x,double,0,DEF,$ < 0
FastMath.java,floor,y,long,0,DEF,$ != x
FastMath.java,floor,y,long,0,RET,$ == 0
FastMath.java,ceil,x,double,0,RET,$ != x
FastMath.java,ceil,y,double,0,RET,$ == x
FastMath.java,ceil,y,double,0,RET,$ == 0
FastMath.java,rint,d,double,0,RET,$ > 0.5
FastMath.java,rint,y,double,0,RET,$ == -1.0
FastMath.java,rint,d,double,0,RET,$ < 0.5
FastMath.java,min,a,float,0,RET,$ > b
FastMath.java,min,a,float,0,RET,$ < b
FastMath.java,min,a,float,0,RET,$ != b
FastMath.java,min,bits,int,0,RET,$ == 0x80000000
FastMath.java,min,a,double,0,RET,$ > b
FastMath.java,min,a,double,0,RET,$ < b
FastMath.java,min,a,double,0,RET,$ != b
FastMath.java,min,bits,long,0,RET,$ == 0x8000000000000000L
FastMath.java,max,a,float,0,RET,$ > b
FastMath.java,max,a,float,0,RET,$ < b
FastMath.java,max,a,float,0,RET,$ != b
FastMath.java,max,bits,int,0,RET,$ == 0x80000000
FastMath.java,max,a,double,0,RET,$ > b
FastMath.java,max,a,double,0,RET,$ < b
FastMath.java,max,a,double,0,RET,$ != b
FastMath.java,max,bits,long,0,RET,$ == 0x8000000000000000L
FastMath.java,copySign,m,long,0,RET,$ >= 0
FastMath.java,copySign,s,long,0,RET,$ >= 0
FastMath.java,copySign,m,long,0,RET,$ < 0
FastMath.java,copySign,s,long,0,RET,$ < 0
FastMath.java,copySign,m,int,0,RET,$ >= 0
FastMath.java,copySign,s,int,0,RET,$ >= 0
FastMath.java,copySign,m,int,0,RET,$ < 0
FastMath.java,copySign,s,int,0,RET,$ < 0
FastMath.java,null,i,int,0,DEF,$ != 0
FastMath.java,CodyWaite,remA,double,0,DEF,$ > 0
TransformerMap.java,transform,o,null,1,DEF,$ instanceof Number
TransformerMap.java,transform,o,null,1,DEF,$ instanceof String
TransformerMap.java,transform,trans,NumberTransformer,0,DEF,$ != null
TransformerMap.java,equals,other,null,0,RET,$ instanceof TransformerMap
Pair.java,equals,o,null,1,RET,$ instanceof Pair
OpenIntToDoubleHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToDoubleHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToDoubleHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToDoubleHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToDoubleHashMap.java,key,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToDoubleHashMap.java,key,current,int,0,NoSuchElementException,$ < 0
OpenIntToDoubleHashMap.java,value,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToDoubleHashMap.java,value,current,int,0,NoSuchElementException,$ < 0
OpenIntToDoubleHashMap.java,advance,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToDoubleHashMap.java,advance,current,int,0,NoSuchElementException,$ < 0
ArithmeticUtils.java,addAndCheck,s,long,0,MathArithmeticException,$ < Integer.MIN_VALUE
ArithmeticUtils.java,addAndCheck,s,long,0,MathArithmeticException,$ > Integer.MAX_VALUE
ArithmeticUtils.java,binomialCoefficient,n,int,0,RET,$ == k
ArithmeticUtils.java,binomialCoefficient,k,int,0,RET,$ == 0
ArithmeticUtils.java,binomialCoefficient,k,int,0,RET,$ == 1
ArithmeticUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 61
ArithmeticUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 66
ArithmeticUtils.java,binomialCoefficientDouble,n,int,0,RET,$ == k
ArithmeticUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 0
ArithmeticUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 1
ArithmeticUtils.java,binomialCoefficientDouble,n,int,0,RET,$ < 67
ArithmeticUtils.java,binomialCoefficientLog,n,int,0,RET,$ == k
ArithmeticUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 0
ArithmeticUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 1
ArithmeticUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 67
ArithmeticUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 1030
ArithmeticUtils.java,factorial,n,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,factorial,n,int,0,MathArithmeticException,$ > 20
ArithmeticUtils.java,factorialDouble,n,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,factorialDouble,n,int,0,RET,$ < 21
ArithmeticUtils.java,factorialLog,n,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,factorialLog,n,int,0,RET,$ < 21
ArithmeticUtils.java,gcd,u,int,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,v,int,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,u,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
ArithmeticUtils.java,gcd,v,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
ArithmeticUtils.java,gcd,u,int,0,DEF,$ > 0
ArithmeticUtils.java,gcd,v,int,0,DEF,$ > 0
ArithmeticUtils.java,gcd,k,int,0,MathArithmeticException,$ == 31
ArithmeticUtils.java,gcd,t,int,1,DEF,$ > 0
ArithmeticUtils.java,gcd,u,long,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,v,long,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,u,long,0,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,gcd,v,long,0,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,gcd,u,long,0,DEF,$ > 0
ArithmeticUtils.java,gcd,v,long,0,DEF,$ > 0
ArithmeticUtils.java,gcd,k,int,0,MathArithmeticException,$ == 63
ArithmeticUtils.java,gcd,t,long,1,DEF,$ > 0
ArithmeticUtils.java,lcm,a,int,0,RET,$ == 0
ArithmeticUtils.java,lcm,b,int,0,RET,$ == 0
ArithmeticUtils.java,lcm,lcm,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
ArithmeticUtils.java,lcm,a,long,0,RET,$ == 0
ArithmeticUtils.java,lcm,b,long,0,RET,$ == 0
ArithmeticUtils.java,lcm,lcm,long,0,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,mulAndCheck,m,long,0,MathArithmeticException,$ < Integer.MIN_VALUE
ArithmeticUtils.java,mulAndCheck,m,long,0,MathArithmeticException,$ > Integer.MAX_VALUE
ArithmeticUtils.java,mulAndCheck,a,long,1,DEF,$ > b
ArithmeticUtils.java,mulAndCheck,a,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,mulAndCheck,b,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,mulAndCheck,b,long,1,MathArithmeticException,$ > 0
ArithmeticUtils.java,mulAndCheck,b,long,1,DEF,Long.MIN_VALUE / $ <= a
ArithmeticUtils.java,mulAndCheck,a,long,1,MathArithmeticException,$ > 0
ArithmeticUtils.java,subAndCheck,s,long,0,MathArithmeticException,$ < Integer.MIN_VALUE
ArithmeticUtils.java,subAndCheck,s,long,0,MathArithmeticException,$ > Integer.MAX_VALUE
ArithmeticUtils.java,subAndCheck,b,long,1,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,subAndCheck,a,long,1,DEF,$ < 0
ArithmeticUtils.java,pow,e,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,long,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,long,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,BigInteger,0,NotPositiveException,$.compareTo(BigInteger.ZERO) < 0
ArithmeticUtils.java,addAndCheck,a,long,1,DEF,$ > b
ArithmeticUtils.java,addAndCheck,a,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,addAndCheck,b,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,addAndCheck,b,long,1,DEF,Long.MIN_VALUE - $ <= a
ArithmeticUtils.java,checkBinomial,n,int,0,NumberIsTooLargeException,$ < k
ArithmeticUtils.java,checkBinomial,n,int,0,NotPositiveException,$ < 0
BigFraction.java,BigFraction,gcd,BigInteger,0,DEF,BigInteger.ONE.compareTo($) < 0
BigFraction.java,BigFraction,den,BigInteger,0,DEF,BigInteger.ZERO.compareTo($) > 0
BigFraction.java,BigFraction,exponent,long,0,DEF,$ != 0
BigFraction.java,BigFraction,sign,long,0,DEF,$ != 0
BigFraction.java,BigFraction,k,int,1,DEF,$ < 0
BigFraction.java,BigFraction,a0,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,value,double,0,RET,FastMath.abs(a0 - $) < epsilon
BigFraction.java,BigFraction,a0,long,0,RET,FastMath.abs($ - value) < epsilon
BigFraction.java,BigFraction,p2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,q2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,n,int,1,DEF,$ < maxIterations
BigFraction.java,BigFraction,convergent,double,1,DEF,FastMath.abs($ - value) > epsilon
BigFraction.java,BigFraction,value,double,1,DEF,FastMath.abs(convergent - $) > epsilon
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,BigFraction,n,int,0,FractionConversionException,$ >= maxIterations
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,getReducedFraction,numerator,int,0,RET,$ == 0
BigFraction.java,add,fraction,BigFraction,0,NullArgumentException,$ == null
BigFraction.java,divide,bg,BigInteger,0,NullArgumentException,$ == null
BigFraction.java,divide,fraction,BigFraction,0,NullArgumentException,$ == null
BigFraction.java,equals,other,null,0,DEF,$ instanceof BigFraction
BigFraction.java,multiply,bg,BigInteger,0,NullArgumentException,$ == null
BigFraction.java,multiply,fraction,BigFraction,0,NullArgumentException,$ == null
BigFraction.java,pow,exponent,int,0,RET,$ < 0
BigFraction.java,pow,exponent,long,0,RET,$ < 0
BigFraction.java,pow,exponent,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
BigFraction.java,subtract,bg,BigInteger,0,NullArgumentException,$ == null
BigFraction.java,subtract,fraction,BigFraction,0,NullArgumentException,$ == null
Fraction.java,Fraction,a0,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,value,double,0,RET,FastMath.abs(a0 - $) < epsilon
Fraction.java,Fraction,a0,long,0,RET,FastMath.abs($ - value) < epsilon
Fraction.java,Fraction,p2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,q2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,n,int,1,DEF,$ < maxIterations
Fraction.java,Fraction,convergent,double,1,DEF,FastMath.abs($ - value) > epsilon
Fraction.java,Fraction,value,double,1,DEF,FastMath.abs(convergent - $) > epsilon
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,n,int,0,FractionConversionException,$ >= maxIterations
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,den,int,0,MathArithmeticException,$ == 0
Fraction.java,Fraction,den,int,0,MathArithmeticException,$ < 0
Fraction.java,Fraction,num,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
Fraction.java,Fraction,den,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
Fraction.java,Fraction,d,int,0,DEF,$ > 1
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,abs,numerator,int,1,DEF,$ >= 0
Fraction.java,equals,other,null,0,RET,$ instanceof Fraction
Fraction.java,negate,numerator,int,0,MathArithmeticException,$==Integer.MIN_VALUE
Fraction.java,addSub,fraction,Fraction,0,NullArgumentException,$ == null
Fraction.java,addSub,numerator,int,0,RET,$ == 0
Fraction.java,addSub,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,addSub,d1,int,0,RET,$==1
Fraction.java,addSub,w,BigInteger,0,MathArithmeticException,$.bitLength() > 31
Fraction.java,multiply,fraction,Fraction,0,NullArgumentException,$ == null
Fraction.java,multiply,numerator,int,0,RET,$ == 0
Fraction.java,multiply,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,divide,fraction,Fraction,0,NullArgumentException,$ == null
Fraction.java,divide,fraction,Fraction,0,MathArithmeticException,$.numerator == 0
Fraction.java,getReducedFraction,denominator,int,0,MathArithmeticException,$ == 0
Fraction.java,getReducedFraction,numerator,int,0,RET,$==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,numerator,int,0,DEF,($&1)==0
Fraction.java,getReducedFraction,denominator,int,0,MathArithmeticException,$ < 0
Fraction.java,getReducedFraction,numerator,int,0,MathArithmeticException,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,denominator,int,0,MathArithmeticException,$==Integer.MIN_VALUE
Fraction.java,toString,denominator,int,1,DEF,$ == 1
Fraction.java,toString,numerator,int,1,DEF,$ == 0
AbstractFormat.java,setDenominatorFormat,format,NumberFormat,0,NullArgumentException,$ == null
AbstractFormat.java,setNumeratorFormat,format,NumberFormat,0,NullArgumentException,$ == null
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
ProperBigFractionFormat.java,format,num,BigInteger,0,DEF,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,ret,BigFraction,0,RET,$ != null
ProperBigFractionFormat.java,parse,whole,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,setWholeFormat,format,NumberFormat,0,NullArgumentException,$ == null
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Fraction
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
FractionFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
FractionFormat.java,parse,num,Number,0,RET,$ == null
FractionFormat.java,parse,den,Number,0,RET,$ == null
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigFraction
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigInteger
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
BigFractionFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
BigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
BigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperFractionFormat.java,format,whole,int,0,DEF,$ != 0
ProperFractionFormat.java,parse,ret,Fraction,0,RET,$ != null
ProperFractionFormat.java,parse,whole,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,parse,den,Number,0,RET,$ == null
ProperFractionFormat.java,parse,den,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,setWholeFormat,format,NumberFormat,0,NullArgumentException,$ == null
AbstractIntegrator.java,sanityChecks,dt,double,0,NumberIsTooSmallException,$ <= threshold
ContinuousOutputModel.java,append,model,ContinuousOutputModel,0,RET,$.steps.size() == 0
ContinuousOutputModel.java,append,steps,List<StepInterpolator>,1,DEF,$.size() == 0
ContinuousOutputModel.java,handleStep,steps,List<StepInterpolator>,0,DEF,$.size() == 0
ContinuousOutputModel.java,setInterpolatedTime,sMin,StepInterpolator,0,RET,locatePoint(time, $) <= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMin) <= 0
ContinuousOutputModel.java,setInterpolatedTime,sMax,StepInterpolator,0,RET,locatePoint(time, $) >= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMax) >= 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ < 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ > 0
ContinuousOutputModel.java,setInterpolatedTime,tMin,double,1,DEF,FastMath.abs(tMed - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,FastMath.abs($ - tMin) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMax,double,1,DEF,FastMath.abs($ - tMed) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,FastMath.abs(tMax - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,index,int,1,DEF,$ < low
ContinuousOutputModel.java,setInterpolatedTime,index,int,0,DEF,$ > high
AdamsBashforthIntegrator.java,integrate,error,double,0,DEF,$ >= 1.0
GillStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
GillStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
EulerStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
EulerStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
DormandPrince54StepInterpolator.java,DormandPrince54StepInterpolator,interpolator,DormandPrince54StepInterpolator,1,DEF,$.v1 == null
DormandPrince54StepInterpolator.java,computeInterpolatedStateAndDerivatives,v1,double[],0,DEF,$ == null
DormandPrince54StepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
DormandPrince54StepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
GraggBulirschStoerIntegrator.java,setStabilityCheck,stepsizeReductionFactor,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStabilityCheck,stepsizeReductionFactor,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control3,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control3,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control4,double,1,DEF,$ < 1.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control4,double,1,DEF,$ > 999.9
GraggBulirschStoerIntegrator.java,setOrderControl,maximalOrder,int,0,DEF,$ <= 6
GraggBulirschStoerIntegrator.java,setOrderControl,maximalOrder,int,0,DEF,$ % 2 != 0
GraggBulirschStoerIntegrator.java,setOrderControl,control1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,control1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setOrderControl,control2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,control2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$ == null
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$.length != size
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudifControlParameter,int,1,DEF,$ <= 0
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudifControlParameter,int,1,DEF,$ >= 7
GraggBulirschStoerIntegrator.java,rescale,vecAbsoluteTolerance,double[],1,DEF,$ == null
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,DEF,2 * $ == n
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,RET,$ <= maxChecks
GraggBulirschStoerIntegrator.java,tryStep,k,int,0,RET,$ < maxIter
GraggBulirschStoerIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize > t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ > t
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize < t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ < t
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 0
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > 1.0e15
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > maxError
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ > 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,mu,int,0,DEF,$ >= 0
GraggBulirschStoerIntegrator.java,integrate,interpError,double,0,DEF,$ > 10.0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 1
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ <= targetIter
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 2
GraggBulirschStoerIntegrator.java,integrate,optimalIter,int,1,DEF,$ <= k
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ < targetIter
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ < minStep
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,DimensionMismatchException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,DimensionMismatchException,$.length != mainSetDimension
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,DimensionMismatchException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,DimensionMismatchException,$.length != mainSetDimension
AdaptiveStepsizeIntegrator.java,initializeStep,initialStep,double,0,RET,$ > 0
AdaptiveStepsizeIntegrator.java,filterStep,h,double,0,NumberIsTooSmallException,FastMath.abs($) < minStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,0,DEF,$ < -maxStep
EmbeddedRungeKuttaIntegrator.java,integrate,vecAbsoluteTolerance,double[],1,DEF,$ == null
EmbeddedRungeKuttaIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize >= t
EmbeddedRungeKuttaIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ >= t
EmbeddedRungeKuttaIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize <= t
EmbeddedRungeKuttaIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ <= t
EmbeddedRungeKuttaIntegrator.java,integrate,error,double,0,DEF,$ >= 1.0
MidpointStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
MidpointStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
ClassicalRungeKuttaStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
ClassicalRungeKuttaStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
AdamsNordsieckTransformer.java,getInstance,t,AdamsNordsieckTransformer,0,DEF,$ == null
AdamsMoultonIntegrator.java,integrate,error,double,0,DEF,$ >= 1.0
AdamsMoultonIntegrator.java,visit,row,int,1,DEF,($ & 0x1) == 0
AdamsMoultonIntegrator.java,end,i,int,0,DEF,$ < mainSetDimension
DormandPrince853StepInterpolator.java,DormandPrince853StepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState == null
DormandPrince853StepInterpolator.java,computeInterpolatedStateAndDerivatives,v,double[][],0,DEF,$ == null
DormandPrince853StepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
DormandPrince853StepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
DormandPrince853StepInterpolator.java,doFinalize,currentState,double[],0,RET,$ == null
HighamHall54StepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
HighamHall54StepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
DormandPrince853Integrator.java,estimateError,den,double,0,DEF,$ <= 0.0
ThreeEighthesStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
ThreeEighthesStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
RungeKuttaStepInterpolator.java,RungeKuttaStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
RungeKuttaStepInterpolator.java,readExternal,n,int,1,DEF,$ < 0
RungeKuttaStepInterpolator.java,readExternal,currentState,double[],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,GraggBulirschStoerStepInterpolator,interpolator,GraggBulirschStoerStepInterpolator,1,DEF,$.polynomials == null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ < 0
GraggBulirschStoerStepInterpolator.java,resetTables,polynomials,double[][],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ <= 4
GraggBulirschStoerStepInterpolator.java,computeCoefficients,polynomials,double[][],0,DEF,$ == null
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,RET,$ < 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 1
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 2
GraggBulirschStoerStepInterpolator.java,estimateError,currentDegree,int,0,DEF,$ >= 5
GraggBulirschStoerStepInterpolator.java,computeInterpolatedStateAndDerivatives,currentDegree,int,0,DEF,$ > 3
GraggBulirschStoerStepInterpolator.java,computeInterpolatedStateAndDerivatives,h,double,0,DEF,$ == 0
StepNormalizer.java,handleStep,lastState,double[],0,DEF,$ == null
StepNormalizer.java,handleStep,mode,StepNormalizerMode,0,DEF,$ == StepNormalizerMode.MULTIPLES
StepNormalizer.java,doNormalizedStep,firstTime,double,0,RET,$ == lastTime
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.scaled != null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.nordsieck != null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.stateVariation != null
NordsieckStepInterpolator.java,writeExternal,scaled,double[],1,DEF,$ == null
NordsieckStepInterpolator.java,writeExternal,nordsieck,Array2DRowRealMatrix,1,DEF,$ == null
AbstractStepInterpolator.java,AbstractStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState == null
AbstractStepInterpolator.java,allocateInterpolatedArrays,dimension,int,1,DEF,$ < 0
AbstractStepInterpolator.java,allocateInterpolatedArrays,secondaryMappers,EquationsMapper[],1,DEF,$ == null
AbstractStepInterpolator.java,writeBaseExternal,currentState,double[],1,DEF,$ == null
AbstractStepInterpolator.java,writeBaseExternal,currentState,double[],0,DEF,$ != null
AbstractStepInterpolator.java,readBaseExternal,dimension,int,1,DEF,$ < 0
ExpandableStatefulODE.java,setSecondaryState,secondaryState,double[],0,DimensionMismatchException,$.length != localArray.length
EventState.java,reinitializeBegin,g0,double,0,DEF,$ == 0
EventState.java,evaluateStep,dt,double,0,RET,FastMath.abs($) < convergence
EventState.java,evaluateStep,gb,double,1,RET,$ >= 0
EventState.java,evaluateStep,solver,null,1,DEF,$ instanceof BracketedUnivariateSolver<?>
EventState.java,evaluateStep,root,double,1,DEF,FastMath.abs($ - ta) <= convergence
EventState.java,evaluateStep,ta,double,1,DEF,FastMath.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,1,DEF,FastMath.abs($ - previousEventTime) <= convergence
EventState.java,evaluateStep,previousEventTime,double,1,DEF,FastMath.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,1,RET,FastMath.abs(previousEventTime - $) > convergence
EventState.java,evaluateStep,previousEventTime,double,1,RET,FastMath.abs($ - root) > convergence
EventState.java,stepAccepted,t,double,1,DEF,FastMath.abs(pendingEventTime - $) <= convergence
EventState.java,stepAccepted,pendingEventTime,double,1,DEF,FastMath.abs($ - t) <= convergence
EventState.java,reset,t,double,0,RET,FastMath.abs(pendingEventTime - $) <= convergence
EventState.java,reset,pendingEventTime,double,0,RET,FastMath.abs($ - t) <= convergence
MultistepIntegrator.java,MultistepIntegrator,nSteps,int,0,MathIllegalArgumentException,$ <= 1
MultistepIntegrator.java,handleStep,count,int,0,DEF,$ == 0
JacobianMatrices.java,JacobianMatrices,parameters,String[],1,DEF,$ == null
JacobianMatrices.java,registerVariationalEquations,expandable,ExpandableStatefulODE,0,MathIllegalArgumentException,$.getPrimary() != ode
JacobianMatrices.java,setInitialMainStateJacobian,efode,ExpandableStatefulODE,0,DEF,$ != null
JacobianMatrices.java,setInitialParameterJacobian,efode,ExpandableStatefulODE,0,DEF,$ != null
JacobianMatrices.java,checkDimension,arrayDimension,int,0,DimensionMismatchException,$ != expected
JacobianMatrices.java,computeDerivatives,paramDim,int,0,DEF,$ != 0
JacobianMatrices.java,computeDerivatives,paramDim,int,0,MathIllegalArgumentException,$ != 0
EquationsMapper.java,extractEquationData,equationData,double[],0,DimensionMismatchException,$.length != dimension
EquationsMapper.java,insertEquationData,equationData,double[],0,DimensionMismatchException,$.length != dimension
ArgUtils.java,flatten,array,Object[],0,DEF,$ != null
ArgUtils.java,flatten,o,null,1,DEF,$ instanceof Object[]
ExceptionContext.java,buildMessage,count,int,0,DEF,++$ < len
ExceptionContext.java,serializeContext,value,null,1,DEF,$ instanceof Serializable
BinaryMutation.java,mutate,original,null,0,MathIllegalArgumentException,$ instanceof BinaryChromosome
FixedElapsedTime.java,FixedElapsedTime,maxTime,long,0,NumberIsTooSmallException,$ < 0
FixedElapsedTime.java,isSatisfied,endTime,long,0,DEF,$ < 0
RandomKey.java,decodeGeneric,representation,List<Double>,0,DimensionMismatchException,$.size() != l
RandomKey.java,decodeGeneric,sortedRepr,List<Double>,0,DimensionMismatchException,$.size() != l
RandomKey.java,isSame,another,null,0,RET,$ instanceof RandomKey<?>
RandomKey.java,checkValidity,val,double,0,InvalidRepresentationException,$ < 0
RandomKey.java,checkValidity,val,double,0,InvalidRepresentationException,$ > 1
RandomKey.java,inducedPermutation,index,int,0,MathIllegalArgumentException,$ == -1
GeneticAlgorithm.java,GeneticAlgorithm,crossoverRate,double,0,OutOfRangeException,$ < 0
GeneticAlgorithm.java,GeneticAlgorithm,crossoverRate,double,0,OutOfRangeException,$ > 1
GeneticAlgorithm.java,GeneticAlgorithm,mutationRate,double,0,OutOfRangeException,$ < 0
GeneticAlgorithm.java,GeneticAlgorithm,mutationRate,double,0,OutOfRangeException,$ > 1
Chromosome.java,searchForFitnessUpdate,sameChromosome,Chromosome,0,DEF,$ != null
ElitisticListPopulation.java,setElitismRate,elitismRate,double,0,OutOfRangeException,$ < 0
ElitisticListPopulation.java,setElitismRate,elitismRate,double,0,OutOfRangeException,$ > 1
BinaryChromosome.java,checkValidity,i,int,0,InvalidRepresentationException,$ < 0
BinaryChromosome.java,checkValidity,i,int,0,InvalidRepresentationException,$ >1
BinaryChromosome.java,isSame,another,null,0,RET,$ instanceof BinaryChromosome
OnePointCrossover.java,crossover,first,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
OnePointCrossover.java,crossover,second,null,0,MathIllegalArgumentException,$ instanceof AbstractListChromosome<?>
RandomKeyMutation.java,mutate,original,null,0,MathIllegalArgumentException,$ instanceof RandomKey<?>
ListPopulation.java,ListPopulation,chromosomes,List<Chromosome>,0,NumberIsTooLargeException,$.size() > populationLimit
ListPopulation.java,ListPopulation,populationLimit,int,0,NotPositiveException,$ <= 0
ListPopulation.java,ListPopulation,populationLimit,int,0,NotPositiveException,$ <= 0
ListPopulation.java,getFittestChromosome,bestChromosome,Chromosome,0,DEF,chromosome.compareTo($) > 0
ListPopulation.java,getFittestChromosome,chromosome,Chromosome,0,DEF,$.compareTo(bestChromosome) > 0
FixedGenerationCount.java,FixedGenerationCount,maxGenerations,int,0,NumberIsTooSmallException,$ <= 0
ConjugateGradient.java,solveInPlace,m,RealLinearOperator,1,DEF,$ == null
ConjugateGradient.java,solveInPlace,rnorm,double,0,RET,$ <= rmax
ConjugateGradient.java,solveInPlace,m,RealLinearOperator,0,DEF,$ != null
ConjugateGradient.java,solveInPlace,rhoNext,double,0,DEF,$ <= 0.
ConjugateGradient.java,solveInPlace,manager,IterationManager,1,DEF,$.getIterations() == 2
ConjugateGradient.java,solveInPlace,pq,double,0,DEF,$ <= 0.
ConjugateGradient.java,solveInPlace,rnorm,double,0,RET,$ <= rmax
JacobiPreconditioner.java,create,a,RealLinearOperator,0,NonSquareOperatorException,$.getRowDimension() != n
JacobiPreconditioner.java,create,a,null,1,DEF,$ instanceof AbstractRealMatrix
RealVectorFormat.java,format,i,int,0,DEF,$ > 0
RealVectorFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
RealVectorFormat.java,parse,component,Number,1,DEF,$ != null
Array2DRowRealMatrix.java,Array2DRowRealMatrix,d,double[][],0,NullArgumentException,$ == null
Array2DRowRealMatrix.java,Array2DRowRealMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,Array2DRowRealMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,Array2DRowRealMatrix,r,int,0,DimensionMismatchException,d[$].length != nCols
Array2DRowRealMatrix.java,Array2DRowRealMatrix,d,double[][],0,DimensionMismatchException,$[r].length != nCols
Array2DRowRealMatrix.java,setSubMatrix,data,double[][],1,DimensionMismatchException,$ == null
Array2DRowRealMatrix.java,setSubMatrix,row,int,0,MathIllegalStateException,$ > 0
Array2DRowRealMatrix.java,setSubMatrix,column,int,0,MathIllegalStateException,$ > 0
Array2DRowRealMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowRealMatrix.java,setSubMatrix,i,int,0,DimensionMismatchException,subMatrix[$].length != nCols
Array2DRowRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DimensionMismatchException,$[i].length != nCols
Array2DRowRealMatrix.java,operate,v,double[],0,DimensionMismatchException,$.length != nCols
Array2DRowRealMatrix.java,preMultiply,v,double[],0,DimensionMismatchException,$.length != nRows
AbstractRealMatrix.java,AbstractRealMatrix,rowDimension,int,0,NotStrictlyPositiveException,$ < 1
AbstractRealMatrix.java,AbstractRealMatrix,columnDimension,int,0,NotStrictlyPositiveException,$ < 1
AbstractRealMatrix.java,power,p,int,0,IllegalArgumentException,$ < 0
AbstractRealMatrix.java,power,p,int,0,RET,$ == 0
AbstractRealMatrix.java,power,p,int,0,RET,$ == 1
AbstractRealMatrix.java,power,i,int,0,DEF,binaryRepresentation[$] == '1'
AbstractRealMatrix.java,power,binaryRepresentation,char[],0,DEF,$[i] == '1'
AbstractRealMatrix.java,power,maxI,int,0,DEF,$ == -1
AbstractRealMatrix.java,visit,row,int,0,DEF,$ == endRow
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$.length < rowsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$[0].length < columnsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$.length < selectedRows.length
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$[0].length < selectedColumns.length
AbstractRealMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
AbstractRealMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
AbstractRealMatrix.java,setSubMatrix,r,int,0,DimensionMismatchException,subMatrix[$].length != nCols
AbstractRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DimensionMismatchException,$[r].length != nCols
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
AbstractRealMatrix.java,setRowVector,vector,RealVector,0,MatrixDimensionMismatchException,$.getDimension() != nCols
AbstractRealMatrix.java,setColumnVector,vector,RealVector,0,MatrixDimensionMismatchException,$.getDimension() != nRows
AbstractRealMatrix.java,setRow,array,double[],0,MatrixDimensionMismatchException,$.length != nCols
AbstractRealMatrix.java,setColumn,array,double[],0,MatrixDimensionMismatchException,$.length != nRows
AbstractRealMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractRealMatrix.java,operate,v,double[],0,DimensionMismatchException,$.length != nCols
AbstractRealMatrix.java,operate,v,RealVector,0,DimensionMismatchException,$.getDimension() != nCols
AbstractRealMatrix.java,preMultiply,v,double[],0,DimensionMismatchException,$.length != nRows
AbstractRealMatrix.java,preMultiply,v,RealVector,0,DimensionMismatchException,$.getDimension() != nRows
AbstractRealMatrix.java,toString,i,int,0,DEF,$ > 0
AbstractRealMatrix.java,toString,j,int,0,DEF,$ > 0
AbstractRealMatrix.java,equals,object,Object,0,RET,$ instanceof RealMatrix == false
AbstractRealMatrix.java,equals,object,null,0,RET,$ instanceof RealMatrix
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getColumnDimension() != nCols
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getRowDimension() != nRows
SymmLQ.java,checkSymmetry,s,double,0,DEF,FastMath.abs($ - t) > epsa
SymmLQ.java,checkSymmetry,t,double,0,DEF,FastMath.abs(s - $) > epsa
SymmLQ.java,refineSolution,lqnorm,double,1,DEF,$ < cgnorm
SymmLQ.java,update,m,RealLinearOperator,0,DEF,$ != null
SymmLQ.java,update,beta,double,0,DEF,$ < 0.
SymmLQ.java,updateNorms,lqnorm,double,1,DEF,$ <= cgnorm
SymmLQ.java,updateNorms,acond,double,0,IllConditionedOperatorException,$ * MACH_PREC >= 0.1
SymmLQ.java,updateNorms,MACH_PREC,double,0,IllConditionedOperatorException,acond * $ >= 0.1
SymmLQ.java,updateNorms,beta1,double,0,SingularOperatorException,$ <= epsx
BlockRealMatrix.java,toBlocksLayout,length,int,0,DimensionMismatchException,$ != columns
BlockRealMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,setSubMatrix,refLength,int,0,NoDataException,$ == 0
BlockRealMatrix.java,setSubMatrix,subRow,double[],0,DimensionMismatchException,$.length != refLength
BlockRealMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
BlockRealMatrix.java,setRowMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
BlockRealMatrix.java,setRowMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
BlockRealMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
BlockRealMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
BlockRealMatrix.java,setColumnMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
BlockRealMatrix.java,setColumnMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
BlockRealMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
BlockRealMatrix.java,setRow,array,double[],0,MatrixDimensionMismatchException,$.length != nCols
BlockRealMatrix.java,setColumn,array,double[],0,MatrixDimensionMismatchException,$.length != nRows
BlockRealMatrix.java,operate,v,double[],0,DimensionMismatchException,$.length != columns
BlockRealMatrix.java,preMultiply,v,double[],0,DimensionMismatchException,$.length != rows
MatrixUtils.java,createRealMatrix,data,double[][],0,NullArgumentException,$ == null
MatrixUtils.java,createRealMatrix,data,double[][],0,NullArgumentException,$[0] == null
MatrixUtils.java,createFieldMatrix,data,T[][],0,NullArgumentException,$ == null
MatrixUtils.java,createFieldMatrix,data,T[][],0,NullArgumentException,$[0] == null
MatrixUtils.java,createRealVector,data,double[],0,NullArgumentException,$ == null
MatrixUtils.java,createFieldVector,data,T[],0,NullArgumentException,$ == null
MatrixUtils.java,createFieldVector,data,T[],0,ZeroException,$.length == 0
MatrixUtils.java,createRowRealMatrix,rowData,double[],0,NullArgumentException,$ == null
MatrixUtils.java,createRowFieldMatrix,rowData,T[],0,NullArgumentException,$ == null
MatrixUtils.java,createRowFieldMatrix,nCols,int,0,NoDataException,$ == 0
MatrixUtils.java,createColumnRealMatrix,columnData,double[],0,NullArgumentException,$ == null
MatrixUtils.java,createColumnFieldMatrix,columnData,T[],0,NullArgumentException,$ == null
MatrixUtils.java,createColumnFieldMatrix,nRows,int,0,NoDataException,$ == 0
MatrixUtils.java,checkRowIndex,row,int,0,OutOfRangeException,$ < 0
MatrixUtils.java,checkColumnIndex,column,int,0,OutOfRangeException,$ < 0
MatrixUtils.java,checkSubMatrixIndex,endRow,int,0,NumberIsTooSmallException,$ < startRow
MatrixUtils.java,checkSubMatrixIndex,endColumn,int,0,NumberIsTooSmallException,$ < startColumn
MatrixUtils.java,checkSubMatrixIndex,selectedRows,int[],0,NullArgumentException,$ == null
MatrixUtils.java,checkSubMatrixIndex,selectedColumns,int[],0,NullArgumentException,$ == null
MatrixUtils.java,checkSubMatrixIndex,selectedRows,int[],0,NoDataException,$.length == 0
MatrixUtils.java,checkSubMatrixIndex,selectedColumns,int[],0,NoDataException,$.length == 0
MatrixUtils.java,solveLowerTriangularSystem,rm,RealMatrix,0,MathIllegalArgumentException,$ == null
MatrixUtils.java,solveLowerTriangularSystem,b,RealVector,0,MathIllegalArgumentException,$ == null
MatrixUtils.java,solveLowerTriangularSystem,diag,double,0,MathArithmeticException,FastMath.abs($) < Precision.SAFE_MIN
MatrixUtils.java,solveUpperTriangularSystem,rm,RealMatrix,0,MathIllegalArgumentException,$ == null
MatrixUtils.java,solveUpperTriangularSystem,b,RealVector,0,MathIllegalArgumentException,$ == null
MatrixUtils.java,solveUpperTriangularSystem,diag,double,0,MathArithmeticException,FastMath.abs($) < Precision.SAFE_MIN
RealVector.java,checkVectorDimensions,d,int,0,DimensionMismatchException,$ != n
RealVector.java,checkIndex,index,int,0,OutOfRangeException,$ < 0
RealVector.java,mapAddToSelf,d,double,0,RET,$ != 0
RealVector.java,cosine,norm,double,0,MathArithmeticException,$ == 0
RealVector.java,cosine,vNorm,double,0,MathArithmeticException,$ == 0
RealVector.java,getMinIndex,entry,Entry,0,DEF,$.getValue() <= minValue
RealVector.java,getMaxIndex,entry,Entry,0,DEF,$.getValue() >= maxValue
RealVector.java,outerProduct,v,null,1,DEF,$ instanceof SparseRealVector
RealVector.java,SparseEntryIterator,next,Entry,0,DEF,$.getValue() == 0
RealVector.java,advance,e,Entry,0,RET,$ == null
RealVector.java,advance,e,Entry,0,DEF,$.getIndex() >= dim
RealVector.java,next,index,int,0,NoSuchElementException,$ < 0
TriDiagonalTransformer.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,cachedQt,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,hK,double[],0,DEF,$[k] != 0.0
TriDiagonalTransformer.java,getQT,k,int,0,DEF,hK[$] != 0.0
TriDiagonalTransformer.java,getT,cachedT,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getT,i,int,0,DEF,$ > 0
TriDiagonalTransformer.java,transform,a,double,0,DEF,$ != 0.0
DefaultIterativeLinearSolverEvent.java,getResidual,r,RealVector,0,RET,$ != null
QRDecomposition.java,QRDecomposition,a,double,0,DEF,$ != 0.0
QRDecomposition.java,getR,cachedR,RealMatrix,0,DEF,$ == null
QRDecomposition.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
QRDecomposition.java,getQT,cachedQT,RealMatrix,0,DEF,$ == null
QRDecomposition.java,getQT,minor,int,0,DEF,qrtMinor[$] != 0.0
QRDecomposition.java,getQT,qrtMinor,double[],0,DEF,$[minor] != 0.0
QRDecomposition.java,getH,cachedH,RealMatrix,0,DEF,$ == null
QRDecomposition.java,isNonSingular,diag,double,0,RET,FastMath.abs($) <= threshold
QRDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
QRDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
OpenMapRealMatrix.java,OpenMapRealMatrix,lCol,long,0,NumberIsTooLargeException,lRow * $ >= Integer.MAX_VALUE
OpenMapRealMatrix.java,OpenMapRealMatrix,lRow,long,0,NumberIsTooLargeException,$ * lCol >= Integer.MAX_VALUE
OpenMapRealMatrix.java,multiply,outValue,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,setEntry,value,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,addToEntry,value,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,multiplyEntry,value,double,1,DEF,$ == 0.0
SparseFieldVector.java,append,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,getSubVector,key,int,0,DEF,$ >= index
SparseFieldVector.java,getSubVector,key,int,0,DEF,$ < end
SparseFieldVector.java,outerProduct,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,subtract,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,checkIndex,index,int,0,OutOfRangeException,$ < 0
SparseFieldVector.java,add,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,equals,obj,null,0,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,equals,field,Field<T>,1,RET,$ == null
SparseFieldVector.java,equals,other,SparseFieldVector<T>,0,RET,$.field != null
SparseFieldVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
AbstractFieldMatrix.java,AbstractFieldMatrix,rowDimension,int,0,NotStrictlyPositiveException,$ <= 0
AbstractFieldMatrix.java,AbstractFieldMatrix,columnDimension,int,0,NotStrictlyPositiveException,$ <= 0
AbstractFieldMatrix.java,extractField,d,T[][],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,extractField,d,T[][],0,NoDataException,$.length == 0
AbstractFieldMatrix.java,extractField,d,T[][],0,NoDataException,$[0].length == 0
AbstractFieldMatrix.java,extractField,d,T[],0,NoDataException,$.length == 0
AbstractFieldMatrix.java,buildArray,columns,int,0,RET,$ < 0
AbstractFieldMatrix.java,power,p,int,0,IllegalArgumentException,$ < 0
AbstractFieldMatrix.java,power,p,int,0,RET,$ == 0
AbstractFieldMatrix.java,power,p,int,0,RET,$ == 1
AbstractFieldMatrix.java,power,i,int,0,DEF,binaryRepresentation[$] == '1'
AbstractFieldMatrix.java,power,binaryRepresentation,char[],0,DEF,$[i] == '1'
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$.length < rowsCount
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$[0].length < columnsCount
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$.length < selectedRows.length
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,MatrixDimensionMismatchException,$[0].length < selectedColumns.length
AbstractFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
AbstractFieldMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
AbstractFieldMatrix.java,setSubMatrix,r,int,0,DimensionMismatchException,subMatrix[$].length != nCols
AbstractFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,DimensionMismatchException,$[r].length != nCols
AbstractFieldMatrix.java,setRowMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
AbstractFieldMatrix.java,setRowMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
AbstractFieldMatrix.java,setColumnMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
AbstractFieldMatrix.java,setColumnMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
AbstractFieldMatrix.java,setRowVector,vector,FieldVector<T>,0,MatrixDimensionMismatchException,$.getDimension() != nCols
AbstractFieldMatrix.java,setColumnVector,vector,FieldVector<T>,0,MatrixDimensionMismatchException,$.getDimension() != nRows
AbstractFieldMatrix.java,setRow,array,T[],0,MatrixDimensionMismatchException,$.length != nCols
AbstractFieldMatrix.java,setColumn,array,T[],0,MatrixDimensionMismatchException,$.length != nRows
AbstractFieldMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractFieldMatrix.java,operate,v,T[],0,DimensionMismatchException,$.length != nCols
AbstractFieldMatrix.java,operate,v,FieldVector<T>,0,DimensionMismatchException,$.getDimension() != nCols
AbstractFieldMatrix.java,preMultiply,v,T[],0,DimensionMismatchException,$.length != nRows
AbstractFieldMatrix.java,preMultiply,v,FieldVector<T>,0,DimensionMismatchException,$.getDimension() != nRows
AbstractFieldMatrix.java,toString,i,int,0,DEF,$ > 0
AbstractFieldMatrix.java,toString,j,int,0,DEF,$ > 0
AbstractFieldMatrix.java,equals,object,Object,0,RET,$ instanceof FieldMatrix<?> == false
AbstractFieldMatrix.java,equals,object,null,0,RET,$ instanceof FieldMatrix<?>
AbstractFieldMatrix.java,equals,m,FieldMatrix<>,0,RET,$.getColumnDimension() != nCols
AbstractFieldMatrix.java,equals,m,FieldMatrix<>,0,RET,$.getRowDimension() != nRows
AbstractFieldMatrix.java,checkRowIndex,row,int,0,OutOfRangeException,$ < 0
AbstractFieldMatrix.java,checkColumnIndex,column,int,0,OutOfRangeException,$ < 0
AbstractFieldMatrix.java,checkSubMatrixIndex,endRow,int,0,NumberIsTooSmallException,$ < startRow
AbstractFieldMatrix.java,checkSubMatrixIndex,endColumn,int,0,NumberIsTooSmallException,$ < startColumn
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedColumns,int[],0,NullArgumentException,$ == null
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,NoDataException,$.length == 0
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedColumns,int[],0,NoDataException,$.length == 0
LUDecomposition.java,LUDecomposition,sum,double,0,DEF,FastMath.abs($) > largest
LUDecomposition.java,LUDecomposition,col,int,0,RET,FastMath.abs(lu[max][$]) < singularityThreshold
LUDecomposition.java,LUDecomposition,max,int,0,RET,FastMath.abs(lu[$][col]) < singularityThreshold
LUDecomposition.java,LUDecomposition,lu,double[][],0,RET,FastMath.abs($[max][col]) < singularityThreshold
LUDecomposition.java,LUDecomposition,max,int,0,DEF,$ != col
LUDecomposition.java,getL,cachedL,RealMatrix,0,DEF,$ == null
LUDecomposition.java,getU,cachedU,RealMatrix,0,DEF,$ == null
LUDecomposition.java,getP,cachedP,RealMatrix,0,DEF,$ == null
LUDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
LUDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
EigenDecomposition.java,getV,cachedV,RealMatrix,0,DEF,$ == null
EigenDecomposition.java,getD,cachedD,RealMatrix,0,DEF,$ == null
EigenDecomposition.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
EigenDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
EigenDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
EigenDecomposition.java,isNonSingular,realEigenvalues,double[],0,RET,$[i] == 0
EigenDecomposition.java,isNonSingular,i,int,0,RET,realEigenvalues[$] == 0
EigenDecomposition.java,isNonSingular,imagEigenvalues,double[],0,RET,$[i] == 0
EigenDecomposition.java,isNonSingular,i,int,0,RET,imagEigenvalues[$] == 0
EigenDecomposition.java,findEigenVectors,realEigenvalues,double[],0,DEF,FastMath.abs($[i]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,e,double[],0,DEF,FastMath.abs($[i]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,FastMath.abs(e[$]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,maxAbsoluteValue,double,0,DEF,$ != 0
EigenDecomposition.java,findEigenVectors,e,double[],0,DEF,FastMath.abs($[m]) + delta == delta
EigenDecomposition.java,findEigenVectors,delta,double,0,DEF,FastMath.abs(e[m]) + $ == delta
EigenDecomposition.java,findEigenVectors,m,int,0,DEF,FastMath.abs(e[$]) + delta == delta
EigenDecomposition.java,findEigenVectors,m,int,0,MaxCountExceededException,$ != j
EigenDecomposition.java,findEigenVectors,its,int,0,MaxCountExceededException,$ == maxIter
EigenDecomposition.java,findEigenVectors,q,double,1,DEF,$ < 0.0
EigenDecomposition.java,findEigenVectors,e,double[],0,DEF,$[i + 1] == 0.0
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,e[$ + 1] == 0.0
EigenDecomposition.java,findEigenVectors,t,double,0,DEF,$ == 0.0
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,$ >= j
EigenDecomposition.java,findEigenVectors,realEigenvalues,double[],0,DEF,$[j] > p
EigenDecomposition.java,findEigenVectors,j,int,0,DEF,realEigenvalues[$] > p
EigenDecomposition.java,findEigenVectors,k,int,0,DEF,$ != i
EigenDecomposition.java,findEigenVectors,realEigenvalues,double[],0,DEF,FastMath.abs($[i]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,i,int,0,DEF,FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
EigenDecomposition.java,findEigenVectors,maxAbsoluteValue,double,0,DEF,$!=0.0
BlockFieldMatrix.java,toBlocksLayout,length,int,0,DimensionMismatchException,$ != columns
BlockFieldMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,setSubMatrix,refLength,int,0,NoDataException,$ == 0
BlockFieldMatrix.java,setSubMatrix,subRow,T[],0,DimensionMismatchException,$.length != refLength
BlockFieldMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
BlockFieldMatrix.java,setRowMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
BlockFieldMatrix.java,setRowMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
BlockFieldMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
BlockFieldMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
BlockFieldMatrix.java,setColumnMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
BlockFieldMatrix.java,setColumnMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
BlockFieldMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
BlockFieldMatrix.java,setRow,array,T[],0,MatrixDimensionMismatchException,$.length != nCols
BlockFieldMatrix.java,setColumn,array,T[],0,MatrixDimensionMismatchException,$.length != nRows
BlockFieldMatrix.java,operate,v,T[],0,DimensionMismatchException,$.length != columns
BlockFieldMatrix.java,preMultiply,v,T[],0,DimensionMismatchException,$.length != rows
PreconditionedIterativeLinearSolver.java,checkParameters,m,RealLinearOperator,0,DimensionMismatchException,$ != null
CholeskyDecomposition.java,CholeskyDecomposition,lJI,double,0,NonSymmetricMatrixException,FastMath.abs(lIJ - $) > maxDelta
CholeskyDecomposition.java,CholeskyDecomposition,lIJ,double,0,NonSymmetricMatrixException,FastMath.abs($ - lJI) > maxDelta
CholeskyDecomposition.java,CholeskyDecomposition,ltI,double[],0,NonPositiveDefiniteMatrixException,$[i] <= absolutePositivityThreshold
CholeskyDecomposition.java,CholeskyDecomposition,i,int,0,NonPositiveDefiniteMatrixException,ltI[$] <= absolutePositivityThreshold
CholeskyDecomposition.java,getL,cachedL,RealMatrix,0,DEF,$ == null
CholeskyDecomposition.java,getLT,cachedLT,RealMatrix,0,DEF,$ == null
CholeskyDecomposition.java,solve,b,RealVector,0,DimensionMismatchException,$.getDimension() != m
CholeskyDecomposition.java,solve,b,RealMatrix,0,DimensionMismatchException,$.getRowDimension() != m
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,r,int,0,DimensionMismatchException,d[$].length != nCols
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,d,T[][],0,DimensionMismatchException,$[r].length != nCols
Array2DRowFieldMatrix.java,setSubMatrix,data,T[][],1,DimensionMismatchException,$ == null
Array2DRowFieldMatrix.java,setSubMatrix,row,int,0,MathIllegalStateException,$ > 0
Array2DRowFieldMatrix.java,setSubMatrix,column,int,0,MathIllegalStateException,$ > 0
Array2DRowFieldMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
Array2DRowFieldMatrix.java,setSubMatrix,i,int,0,DimensionMismatchException,subMatrix[$].length != nCols
Array2DRowFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,DimensionMismatchException,$[i].length != nCols
Array2DRowFieldMatrix.java,operate,v,T[],0,DimensionMismatchException,$.length != nCols
Array2DRowFieldMatrix.java,preMultiply,v,T[],0,DimensionMismatchException,$.length != nRows
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nct
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,singularValues[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,A,double[][],0,DEF,$[k][k] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,A[$][$] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nct
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,singularValues[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nct
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nrt
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k + 1] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$ + 1] < 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ + 1 < m
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,nct,int,0,DEF,$ < n
SingularValueDecomposition.java,SingularValueDecomposition,m,int,0,DEF,$ < p
SingularValueDecomposition.java,SingularValueDecomposition,nrt,int,0,DEF,$ + 1 < p
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],1,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,1,DEF,singularValues[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,$ < nrt
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,$[k] != 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,e[$] != 0
SingularValueDecomposition.java,SingularValueDecomposition,e,double[],0,DEF,FastMath.abs($[k]) <= threshold
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,FastMath.abs(e[$]) <= threshold
SingularValueDecomposition.java,SingularValueDecomposition,ks,int,0,DEF,$ == k
SingularValueDecomposition.java,SingularValueDecomposition,ks,int,1,DEF,$ == k
SingularValueDecomposition.java,SingularValueDecomposition,j,int,0,DEF,$ != k
SingularValueDecomposition.java,SingularValueDecomposition,b,double,0,DEF,$ != 0
SingularValueDecomposition.java,SingularValueDecomposition,c,double,0,DEF,$ != 0
SingularValueDecomposition.java,SingularValueDecomposition,b,double,0,DEF,$ < 0
SingularValueDecomposition.java,SingularValueDecomposition,j,int,0,DEF,$ != k
SingularValueDecomposition.java,SingularValueDecomposition,singularValues,double[],0,DEF,$[k] <= 0
SingularValueDecomposition.java,SingularValueDecomposition,k,int,0,DEF,singularValues[$] <= 0
SingularValueDecomposition.java,getUT,cachedUt,RealMatrix,0,DEF,$ == null
SingularValueDecomposition.java,getS,cachedS,RealMatrix,0,DEF,$ == null
SingularValueDecomposition.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
SingularValueDecomposition.java,getCovariance,dimension,int,0,NumberIsTooLargeException,$ == 0
SingularValueDecomposition.java,getRank,singularValues,double[],0,DEF,$[i] > tol
SingularValueDecomposition.java,getRank,i,int,0,DEF,singularValues[$] > tol
SingularValueDecomposition.java,Solver,singularValues,double[],1,DEF,$[i] > tol
SingularValueDecomposition.java,Solver,i,int,1,DEF,singularValues[$] > tol
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,ZeroException,$.length == 0
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,d,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v,FieldVector<T>,0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v,ArrayFieldVector<T>,0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v,ArrayFieldVector<T>,0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v1,ArrayFieldVector<T>,0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v2,ArrayFieldVector<T>,0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v1,ArrayFieldVector<T>,0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v2,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v1,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v2,ArrayFieldVector<T>,0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v1,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v2,T[],0,NullArgumentException,$ == null
ArrayFieldVector.java,ArrayFieldVector,v1,T[],0,ZeroException,$.length + v2.length == 0
ArrayFieldVector.java,ArrayFieldVector,v2,T[],0,ZeroException,v1.length + $.length == 0
ArrayFieldVector.java,ArrayFieldVector,v1,T[],0,ZeroException,$.length + v2.length == 0
ArrayFieldVector.java,ArrayFieldVector,v2,T[],0,ZeroException,v1.length + $.length == 0
ArrayFieldVector.java,checkVectorDimensions,data,T[],0,DimensionMismatchException,$.length != n
ArrayFieldVector.java,equals,other,Object,0,RET,$ == null
ArrayFieldVector.java,checkIndex,index,int,0,OutOfRangeException,$ < 0
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,r,int,0,DEF,swap[$] != r
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,swap,int[],0,DEF,$[r] != r
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,c,double[][],1,NonPositiveDefiniteMatrixException,$[ir][ir] < small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,ir,int,1,NonPositiveDefiniteMatrixException,c[$][$] < small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,r,int,0,NonPositiveDefiniteMatrixException,$ == 0
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,c,double[][],0,NonPositiveDefiniteMatrixException,$[index[i]][index[i]] < -small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,index,int[],0,NonPositiveDefiniteMatrixException,c[$[i]][$[i]] < -small
RectangularCholeskyDecomposition.java,RectangularCholeskyDecomposition,i,int,0,NonPositiveDefiniteMatrixException,c[index[$]][index[$]] < -small
ArrayRealVector.java,ArrayRealVector,d,double[],0,NullArgumentException,$ == null
ArrayRealVector.java,ArrayRealVector,d,double[],0,NullArgumentException,$ == null
ArrayRealVector.java,ArrayRealVector,d,Double[],0,NullArgumentException,$ == null
ArrayRealVector.java,ArrayRealVector,v,RealVector,0,NullArgumentException,$ == null
ArrayRealVector.java,add,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,subtract,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,ebeMultiply,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,ebeDivide,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,dotProduct,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getDistance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getL1Distance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getLInfDistance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,unitVector,norm,double,0,MathArithmeticException,$ == 0
ArrayRealVector.java,unitize,norm,double,0,MathArithmeticException,$ == 0
ArrayRealVector.java,outerProduct,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,setSubVector,v,null,1,DEF,$ instanceof ArrayRealVector
ArrayRealVector.java,checkVectorDimensions,data,double[],0,DimensionMismatchException,$.length != n
ArrayRealVector.java,equals,other,Object,0,RET,$ == null
ArrayRealVector.java,equals,other,null,0,RET,$ instanceof RealVector
ArrayRealVector.java,combineToSelf,y,null,1,DEF,$ instanceof ArrayRealVector
BiDiagonalTransformer.java,BiDiagonalTransformer,m,int,1,DEF,$ >= n
BiDiagonalTransformer.java,getU,cachedU,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getU,hK,double[],0,DEF,$[k - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,k,int,0,DEF,hK[$ - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,hK[k - $] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getB,cachedB,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getB,m,int,1,DEF,$ < n
BiDiagonalTransformer.java,getB,i,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getV,cachedV,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getV,hK,double[],0,DEF,$[k] != 0.0
BiDiagonalTransformer.java,getV,k,int,0,DEF,hK[$] != 0.0
BiDiagonalTransformer.java,getV,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,b,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,b,double,0,DEF,$ != 0.0
FieldLUDecomposition.java,FieldLUDecomposition,nonZero,int,0,RET,$ >= m
FieldLUDecomposition.java,FieldLUDecomposition,nonZero,int,0,DEF,$ != col
FieldLUDecomposition.java,getL,cachedL,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecomposition.java,getU,cachedU,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecomposition.java,getP,cachedP,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecomposition.java,solve,b,FieldVector<T>,0,DimensionMismatchException,$.getDimension() != m
FieldLUDecomposition.java,solve,length,int,0,DimensionMismatchException,$ != m
FieldLUDecomposition.java,solve,b,FieldMatrix<T>,0,DimensionMismatchException,$.getRowDimension() != m
OpenMapRealVector.java,add,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,append,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,dotProduct,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getSubVector,key,int,0,DEF,$ >= index
OpenMapRealVector.java,getSubVector,key,int,0,DEF,$ < end
OpenMapRealVector.java,getDistance,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getL1Distance,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getLInfDistance,delta,double,0,DEF,$ > max
OpenMapRealVector.java,getLInfDistance,iter,Iterator,0,DEF,$.value() > max
OpenMapRealVector.java,getLInfDistance,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,subtract,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,equals,obj,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
DfpDec.java,round,msb,int,0,RET,$ == 0
DfpDec.java,round,lsbthreshold,int,0,RET,$ <= 1
DfpDec.java,round,lsbthreshold,int,1,DEF,$ == 1
DfpDec.java,round,rh,int,0,DEF,$ != 0
DfpDec.java,round,exp,int,0,RET,$ < MIN_EXP
DfpDec.java,round,exp,int,0,RET,$ > MAX_EXP
DfpDec.java,round,n,int,0,RET,$ != 0
DfpDec.java,round,discarded,int,0,RET,$ != 0
DfpDec.java,nextAfter,result,Dfp,0,DEF,$.classify() == INFINITE
Dfp.java,Dfp,x,long,0,DEF,$ == Long.MIN_VALUE
Dfp.java,Dfp,x,long,1,DEF,$ < 0
Dfp.java,Dfp,mant,int[],0,DEF,$[i] != 0
Dfp.java,Dfp,i,int,0,DEF,mant[$] != 0
Dfp.java,Dfp,exponent,int,0,RET,$ == -1023
Dfp.java,Dfp,x,double,0,RET,$ == 0
Dfp.java,Dfp,bits,long,0,DEF,($ & 0x8000000000000000L) != 0
Dfp.java,Dfp,exponent,int,0,RET,$ == 1024
Dfp.java,Dfp,x,double,1,DEF,$ != x
Dfp.java,Dfp,x,double,1,DEF,$ < 0
Dfp.java,Dfp,bits,long,0,DEF,($ & 0x8000000000000000L) != 0
Dfp.java,Dfp,p,int,0,DEF,$ == -1
Dfp.java,Dfp,p,int,1,DEF,$ != -1
Dfp.java,Dfp,fpexp,String,0,DEF,$.charAt(i) == '-'
Dfp.java,Dfp,i,int,0,DEF,fpexp.charAt($) == '-'
Dfp.java,Dfp,fpexp,String,0,DEF,$.charAt(i) >= '0'
Dfp.java,Dfp,i,int,0,DEF,fpexp.charAt($) >= '0'
Dfp.java,Dfp,fpexp,String,0,DEF,$.charAt(i) <= '9'
Dfp.java,Dfp,i,int,0,DEF,fpexp.charAt($) <= '9'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.indexOf(-") != -1"
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) >= '1'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) >= '1'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) <= '9'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) <= '9'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) == '0'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) == '0'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) == '.'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) == '.'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) == '.'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) == '.'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) < '0'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) < '0'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) > '9'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) > '9'
Dfp.java,Dfp,q,int,0,DEF,$ != offset
Dfp.java,Dfp,q,int,0,DEF,$ == offset
Dfp.java,Dfp,striped,char[],1,DEF,$[q] == '0'
Dfp.java,Dfp,q,int,1,DEF,striped[$] == '0'
Dfp.java,Dfp,significantDigits,int,0,DEF,$ == 0
Dfp.java,Dfp,p,int,0,DEF,striped[$] != '0'
Dfp.java,Dfp,striped,char[],0,DEF,$[p] != '0'
Dfp.java,Dfp,q,int,0,DEF,$ < striped.length
Dfp.java,align,adiff,int,0,DEF,$ < 0
Dfp.java,align,diff,int,0,RET,$ == 0
Dfp.java,align,diff,int,1,DEF,$ < 0
Dfp.java,align,lostdigit,int,0,DEF,$ != 0
Dfp.java,equals,other,null,0,RET,$ instanceof Dfp
Dfp.java,compare,a,Dfp,0,RET,$.mant[$.mant.length - 1] == 0
Dfp.java,compare,b,Dfp,0,RET,$.mant[$.mant.length - 1] == 0
Dfp.java,compare,a,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,a,Dfp,0,RET,$.sign != b.sign
Dfp.java,compare,a,Dfp,1,RET,$.sign == -1
Dfp.java,compare,a,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,a,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,a,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,b,Dfp,0,RET,$.mant[$.mant.length-1] != 0
Dfp.java,compare,a,Dfp,0,RET,$.mant[b.mant.length-1] != 0
Dfp.java,compare,b,Dfp,0,RET,a.mant[$.mant.length-1] != 0
Dfp.java,compare,a,Dfp,0,RET,$.exp < b.exp
Dfp.java,compare,a,Dfp,0,RET,$.exp > b.exp
Dfp.java,remainder,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,remainder,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,trunc,nans,byte,0,RET,$ == INFINITE
Dfp.java,trunc,mant,int[],0,RET,$[$.length-1] == 0
Dfp.java,trunc,exp,int,0,RET,$ < 0
Dfp.java,trunc,exp,int,0,RET,$ >= mant.length
Dfp.java,trunc,result,Dfp,0,DEF,$.sign == -1
Dfp.java,trunc,result,Dfp,0,DEF,$.sign == 1
Dfp.java,trunc,result,Dfp,0,DEF,$.exp > 0
Dfp.java,trunc,result,Dfp,0,DEF,($.mant[mant.length-$.exp]&1) != 0
Dfp.java,trunc,mant,int[],0,DEF,(result.mant[$.length-result.exp]&1) != 0
Dfp.java,intValue,rounded,Dfp,0,DEF,$.sign == -1
Dfp.java,log10,mant,int[],0,RET,$[$.length-1] > 1000
Dfp.java,log10,mant,int[],0,RET,$[$.length-1] > 100
Dfp.java,log10,mant,int[],0,RET,$[$.length-1] > 10
Dfp.java,power10,e,int,1,DEF,$ >= 0
Dfp.java,add,nans,byte,0,RET,$ != FINITE
Dfp.java,add,x,Dfp,0,RET,$.nans != FINITE
Dfp.java,add,nans,byte,0,RET,$ == INFINITE
Dfp.java,add,x,Dfp,0,RET,$.nans == FINITE
Dfp.java,add,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,add,nans,byte,0,RET,$ == FINITE
Dfp.java,add,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,add,nans,byte,0,RET,$ == INFINITE
Dfp.java,add,sign,byte,0,RET,$ == x.sign
Dfp.java,add,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,add,nans,byte,0,RET,$ == INFINITE
Dfp.java,add,sign,byte,0,RET,$ != x.sign
Dfp.java,add,a,Dfp,0,DEF,compare($, b) > 0
Dfp.java,add,b,Dfp,0,DEF,compare(a, $) > 0
Dfp.java,add,b,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,add,mant,int[],0,DEF,b.mant[$.length-1] == 0
Dfp.java,add,a,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,add,mant,int[],0,DEF,a.mant[$.length-1] == 0
Dfp.java,add,a,Dfp,1,DEF,$.exp < b.exp
Dfp.java,add,asign,byte,0,DEF,$ != bsign
Dfp.java,add,asign,byte,1,DEF,$ == rsign
Dfp.java,add,rh,int,0,DEF,$ != 0
Dfp.java,add,asign,byte,0,DEF,$ == bsign
Dfp.java,add,excp,int,0,DEF,$ != 0
Dfp.java,add,result,Dfp,0,DEF,$.mant[mant.length-1] != 0
Dfp.java,add,mant,int[],0,DEF,result.mant[$.length-1] != 0
Dfp.java,add,i,int,0,DEF,$ == 0
Dfp.java,add,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,add,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,add,asign,byte,0,DEF,$ != bsign
Dfp.java,add,excp,int,0,DEF,$ != 0
Dfp.java,round,rh,int,0,DEF,$ != 0
Dfp.java,round,exp,int,0,RET,$ < MIN_EXP
Dfp.java,round,exp,int,0,RET,$ > MAX_EXP
Dfp.java,round,n,int,0,RET,$ != 0
Dfp.java,multiply,nans,byte,0,RET,$ != FINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans != FINITE
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans == FINITE
Dfp.java,multiply,x,Dfp,0,RET,$.mant[mant.length-1] != 0
Dfp.java,multiply,mant,int[],0,RET,x.mant[$.length-1] != 0
Dfp.java,multiply,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,multiply,nans,byte,0,RET,$ == FINITE
Dfp.java,multiply,mant,int[],0,RET,$[$.length-1] != 0
Dfp.java,multiply,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,multiply,nans,byte,0,RET,$ == FINITE
Dfp.java,multiply,mant,int[],0,RET,$[$.length-1] == 0
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans == FINITE
Dfp.java,multiply,x,Dfp,0,RET,$.mant[mant.length-1] == 0
Dfp.java,multiply,mant,int[],0,RET,x.mant[$.length-1] == 0
Dfp.java,multiply,product,int[],0,DEF,$[i] != 0
Dfp.java,multiply,i,int,0,DEF,product[$] != 0
Dfp.java,multiply,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,multiply,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,multiply,excp,int,0,DEF,$ != 0
Dfp.java,multiply,nans,byte,0,RET,$ != FINITE
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,int,0,RET,$ != 0
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,int,0,RET,$ == 0
Dfp.java,multiply,x,int,0,RET,$ < 0
Dfp.java,multiply,x,int,0,RET,$ >= RADIX
Dfp.java,multiply,rh,int,0,DEF,$ != 0
Dfp.java,multiply,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,multiply,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,multiply,excp,int,0,DEF,$ != 0
Dfp.java,divide,nans,byte,0,RET,$ != FINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans != FINITE
Dfp.java,divide,nans,byte,0,RET,$ == INFINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans == FINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans == INFINITE
Dfp.java,divide,nans,byte,0,RET,$ == FINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans == INFINITE
Dfp.java,divide,nans,byte,0,RET,$ == INFINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.mant[mant.length-1] == 0
Dfp.java,divide,mant,int[],0,RET,divisor.mant[$.length-1] == 0
Dfp.java,divide,rh,int,0,DEF,$ == 0
Dfp.java,divide,minadj,int,0,DEF,$ >= 2
Dfp.java,divide,mant,int[],0,DEF,remainder[$.length] != 0
Dfp.java,divide,remainder,int[],0,DEF,$[mant.length] != 0
Dfp.java,divide,trialgood,boolean,0,DEF,$ == false
Dfp.java,divide,trial,int,0,DEF,$ != 0
Dfp.java,divide,nsqd,int,0,DEF,$ != 0
Dfp.java,divide,field,DfpField,0,DEF,$.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN
Dfp.java,divide,nsqd,int,0,DEF,$ == mant.length
Dfp.java,divide,nsqd,int,0,DEF,$ > mant.length
Dfp.java,divide,quotient,int[],0,DEF,$[i] != 0
Dfp.java,divide,i,int,0,DEF,quotient[$] != 0
Dfp.java,divide,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,divide,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,divide,excp,int,0,DEF,$ != 0
Dfp.java,divide,nans,byte,0,RET,$ != FINITE
Dfp.java,divide,nans,byte,0,RET,$ == INFINITE
Dfp.java,divide,divisor,int,0,RET,$ == 0
Dfp.java,divide,divisor,int,0,RET,$ < 0
Dfp.java,divide,divisor,int,0,RET,$ >= RADIX
Dfp.java,divide,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,divide,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,divide,excp,int,0,DEF,$ != 0
Dfp.java,sqrt,nans,byte,0,RET,$ == FINITE
Dfp.java,sqrt,mant,int[],0,RET,$[$.length-1] == 0
Dfp.java,sqrt,nans,byte,0,RET,$ != FINITE
Dfp.java,sqrt,nans,byte,0,RET,$ == INFINITE
Dfp.java,sqrt,sign,byte,0,RET,$ == 1
Dfp.java,sqrt,nans,byte,0,RET,$ == QNAN
Dfp.java,sqrt,nans,byte,0,RET,$ == SNAN
Dfp.java,sqrt,sign,byte,0,RET,$ == -1
Dfp.java,sqrt,x,Dfp,0,DEF,$.exp < -1
Dfp.java,sqrt,x,Dfp,0,DEF,$.exp > 1
Dfp.java,sqrt,dx,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,sqrt,mant,int[],0,DEF,dx.mant[$.length-1] == 0
Dfp.java,toString,nans,byte,0,RET,$ != FINITE
Dfp.java,toString,nans,byte,1,RET,$ == INFINITE
Dfp.java,toString,exp,int,0,RET,$ > mant.length
Dfp.java,toString,exp,int,0,RET,$ < -1
Dfp.java,dfp2sci,p,int,0,DEF,rawdigits[$] != '0'
Dfp.java,dfp2sci,rawdigits,char[],0,DEF,$[p] != '0'
Dfp.java,dfp2sci,sign,byte,0,DEF,$ == -1
Dfp.java,dfp2sci,p,int,1,DEF,$ != rawdigits.length
Dfp.java,dfp2sci,e,int,0,DEF,$ < 0
Dfp.java,dfp2sci,e,int,0,DEF,$ < 0
Dfp.java,dfp2string,e,int,0,DEF,$ <= 0
Dfp.java,dfp2string,e,int,0,DEF,--$ == 0
Dfp.java,dfp2string,q,int,0,DEF,buffer[$] == '.'
Dfp.java,dfp2string,buffer,char[],0,DEF,$[q] == '.'
Dfp.java,dfp2string,sign,byte,0,DEF,$ < 0
Dfp.java,dotrap,nans,byte,0,DEF,$ == FINITE
Dfp.java,dotrap,mant,int[],0,DEF,$[$.length-1] != 0
Dfp.java,dotrap,nans,byte,0,DEF,$ == FINITE
Dfp.java,dotrap,mant,int[],0,DEF,$[$.length-1] == 0
Dfp.java,dotrap,nans,byte,0,DEF,$ == INFINITE
Dfp.java,dotrap,nans,byte,0,DEF,$ == QNAN
Dfp.java,dotrap,nans,byte,0,DEF,$ == INFINITE
Dfp.java,dotrap,nans,byte,0,DEF,$ == SNAN
Dfp.java,dotrap,result,Dfp,1,DEF,($.exp+mant.length) < MIN_EXP
Dfp.java,dotrap,mant,int[],1,DEF,(result.exp+$.length) < MIN_EXP
Dfp.java,nextAfter,x,Dfp,0,RET,compare(this, $) == 0
Dfp.java,nextAfter,result,Dfp,0,DEF,$.classify() == INFINITE
Dfp.java,toDouble,cmp0,int,1,RET,$ == 0
Dfp.java,toDouble,cmp0,int,0,DEF,$ < 0
Dfp.java,toDouble,exponent,int,0,DEF,$ < 0
Dfp.java,toDouble,exponent,int,0,DEF,$ > -1023
Dfp.java,toDouble,exponent,int,0,RET,$ < -1074
Dfp.java,toDouble,exponent,int,0,RET,$ > 1023
Dfp.java,toDouble,mantissa,long,0,DEF,$ == 4503599627370496L
Dfp.java,toDouble,exponent,int,0,DEF,$ <= -1023
DfpMath.java,split,buf,char[],0,DEF,$[i] >= '1'
DfpMath.java,split,i,int,0,DEF,buf[$] >= '1'
DfpMath.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpMath.java,split,i,int,0,DEF,buf[$] <= '9'
DfpMath.java,split,buf,char[],0,DEF,$[i] == '.'
DfpMath.java,split,i,int,0,DEF,buf[$] == '.'
DfpMath.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpMath.java,split,i,int,0,DEF,buf[$] >= '0'
DfpMath.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpMath.java,split,i,int,0,DEF,buf[$] <= '9'
DfpMath.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpMath.java,split,i,int,0,DEF,buf[$] >= '0'
DfpMath.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpMath.java,split,i,int,0,DEF,buf[$] <= '9'
DfpMath.java,split,i,int,0,DEF,$ < sp
DfpMath.java,splitMult,result,Dfp[],0,RET,$[0].classify() == Dfp.INFINITE
DfpMath.java,splitPow,a,int,0,RET,$ == 0
DfpMath.java,splitPow,a,int,0,DEF,$ < 0
DfpMath.java,splitPow,trial,int,0,DEF,$ > a
DfpMath.java,pow,a,int,0,RET,$ == 0
DfpMath.java,pow,a,int,0,DEF,$ < 0
DfpMath.java,exp,ia,int,0,RET,$ > 2147483646
DfpMath.java,exp,ia,int,0,RET,$ < -2147483646
DfpMath.java,log,a,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,1,RET,$.classify() == Dfp.FINITE
DfpMath.java,pow,y,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,x,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,1,RET,$.classify() == Dfp.FINITE
BracketingNthOrderBrentSolverDFP.java,BracketingNthOrderBrentSolverDFP,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolverDFP.java,solve,agingA,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolverDFP.java,solve,agingB,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolverDFP.java,solve,nbPoints,int,1,DEF,$ > 2
BracketingNthOrderBrentSolverDFP.java,solve,start,int,1,DEF,end - $ != nbPoints
BracketingNthOrderBrentSolverDFP.java,solve,end,int,1,DEF,$ - start != nbPoints
BracketingNthOrderBrentSolverDFP.java,solve,nbPoints,int,0,DEF,$ == x.length
DfpField.java,split,buf,char[],0,DEF,$[i] >= '1'
DfpField.java,split,i,int,0,DEF,buf[$] >= '1'
DfpField.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpField.java,split,i,int,0,DEF,buf[$] <= '9'
DfpField.java,split,buf,char[],0,DEF,$[i] == '.'
DfpField.java,split,i,int,0,DEF,buf[$] == '.'
DfpField.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpField.java,split,i,int,0,DEF,buf[$] >= '0'
DfpField.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpField.java,split,i,int,0,DEF,buf[$] <= '9'
DfpField.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpField.java,split,i,int,0,DEF,buf[$] >= '0'
DfpField.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpField.java,split,i,int,0,DEF,buf[$] <= '9'
DfpField.java,split,i,int,0,DEF,$ < sp
DfpField.java,computeStringConstants,sqr2String,String,0,DEF,$ == null
SimplexSolver.java,getPivotColumn,entry,double,0,DEF,Precision.compareTo($, minValue, maxUlps) < 0
SimplexSolver.java,getPivotColumn,minValue,double,0,DEF,Precision.compareTo(entry, $, maxUlps) < 0
SimplexSolver.java,getPivotColumn,maxUlps,int,0,DEF,Precision.compareTo(entry, minValue, $) < 0
SimplexSolver.java,getPivotRow,entry,double,0,DEF,Precision.compareTo($, 0d, maxUlps) > 0
SimplexSolver.java,getPivotRow,maxUlps,int,0,DEF,Precision.compareTo(entry, 0d, $) > 0
SimplexSolver.java,getPivotRow,cmp,int,1,DEF,$ == 0
SimplexSolver.java,getPivotRow,cmp,int,0,DEF,$ < 0
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,1,RET,$.size() == 0
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,0,RET,$.size() > 1
SimplexSolver.java,doIteration,pivotRow,Integer,0,UnboundedSolutionException,$ == null
SimplexSolver.java,doIteration,i,int,0,DEF,$ != pivotRow
SimplexSolver.java,solvePhase1,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() == 0
SimplexTableau.java,createTableau,constraint,LinearConstraint,1,DEF,$.getRelationship() == Relationship.LEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.EQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,normalize,constraint,LinearConstraint,0,RET,$.getValue() < 0
SimplexTableau.java,getConstraintTypeCounts,constraint,LinearConstraint,0,DEF,$.getRelationship() == relationship
SimplexTableau.java,getBasicRow,row,Integer,1,DEF,$ == null
SimplexTableau.java,dropPhase1Objective,entry,double,0,DEF,Precision.compareTo($, 0d, maxUlps) > 0
SimplexTableau.java,dropPhase1Objective,maxUlps,int,0,DEF,Precision.compareTo(entry, 0d, $) > 0
SimplexTableau.java,dropPhase1Objective,col,int,0,DEF,getBasicRow($) == null
SimplexTableau.java,isOptimal,epsilon,double,0,RET,Precision.compareTo(entry, 0d, $) < 0
SimplexTableau.java,isOptimal,entry,double,0,RET,Precision.compareTo($, 0d, epsilon) < 0
SimplexTableau.java,getSolution,colIndex,int,0,DEF,$ < 0
SimplexTableau.java,getSolution,basicRow,Integer,1,DEF,$ != null
SimplexTableau.java,getSolution,basicRow,Integer,1,DEF,$ == 0
SimplexTableau.java,equals,other,null,0,RET,$ instanceof SimplexTableau
AbstractLinearOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxCountExceededException,++$ > maxIterations
LinearObjectiveFunction.java,equals,other,null,0,RET,$ instanceof LinearObjectiveFunction
LinearConstraint.java,equals,other,null,0,RET,$ instanceof LinearConstraint
BrentOptimizer.java,BrentOptimizer,rel,double,0,NumberIsTooSmallException,$ < MIN_RELATIVE_TOLERANCE
BrentOptimizer.java,BrentOptimizer,abs,double,0,NotStrictlyPositiveException,$ <= 0
BrentOptimizer.java,doOptimize,lo,double,1,DEF,$ < hi
BrentOptimizer.java,doOptimize,e,double,1,DEF,FastMath.abs($) > tol1
BrentOptimizer.java,doOptimize,q,double,1,DEF,$ > 0
BrentOptimizer.java,doOptimize,a,double,0,DEF,u - $ < tol2
BrentOptimizer.java,doOptimize,u,double,0,DEF,$ - a < tol2
BrentOptimizer.java,doOptimize,b,double,0,DEF,$ - u < tol2
BrentOptimizer.java,doOptimize,u,double,0,DEF,b - $ < tol2
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ <= m
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ < m
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ < m
BrentOptimizer.java,doOptimize,d,double,1,DEF,FastMath.abs($) < tol1
BrentOptimizer.java,doOptimize,d,double,1,DEF,$ >= 0
BrentOptimizer.java,doOptimize,fu,double,1,DEF,$ <= fx
BrentOptimizer.java,doOptimize,u,double,1,DEF,$ < x
BrentOptimizer.java,doOptimize,u,double,1,DEF,$ < x
BrentOptimizer.java,doOptimize,fu,double,1,DEF,$ <= fw
BrentOptimizer.java,doOptimize,fu,double,0,DEF,$ <= fv
BrentOptimizer.java,doOptimize,checker,ConvergenceChecker<UnivariatePointValuePair>,0,RET,$ != null
BaseAbstractUnivariateOptimizer.java,optimize,f,UnivariateFunction,0,NullArgumentException,$ == null
BaseAbstractUnivariateOptimizer.java,optimize,goalType,GoalType,0,NullArgumentException,$ == null
UnivariateMultiStartOptimizer.java,UnivariateMultiStartOptimizer,optimizer,BaseUnivariateOptimizer<FUNC>,0,NullArgumentException,$ == null
UnivariateMultiStartOptimizer.java,UnivariateMultiStartOptimizer,generator,RandomGenerator,0,NullArgumentException,$ == null
UnivariateMultiStartOptimizer.java,UnivariateMultiStartOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
UnivariateMultiStartOptimizer.java,getOptima,optima,UnivariatePointValuePair[],0,MathIllegalStateException,$ == null
UnivariateMultiStartOptimizer.java,optimize,optima,UnivariatePointValuePair[],0,DEF,$[0] == null
UnivariateMultiStartOptimizer.java,compare,o1,UnivariatePointValuePair,1,RET,$ == null
UnivariateMultiStartOptimizer.java,compare,o2,UnivariatePointValuePair,0,RET,$ == null
BracketFinder.java,BracketFinder,growLimit,double,0,NotStrictlyPositiveException,$ <= 0
BracketFinder.java,BracketFinder,maxEvaluations,int,0,NotStrictlyPositiveException,$ <= 0
BracketFinder.java,search,fA,double,0,DEF,$ < fB
BracketFinder.java,search,fA,double,0,DEF,$ > fB
BracketFinder.java,search,w,double,1,DEF,($ - xC) * (xB - $) > 0
BracketFinder.java,search,xB,double,1,DEF,(w - xC) * ($ - w) > 0
BracketFinder.java,search,xC,double,1,DEF,(w - $) * (xB - w) > 0
BracketFinder.java,search,fW,double,1,DEF,$ < fC
BracketFinder.java,search,fW,double,1,DEF,$ > fC
BracketFinder.java,search,fW,double,0,DEF,$ > fB
BracketFinder.java,search,fW,double,0,DEF,$ < fB
BracketFinder.java,search,w,double,1,DEF,($ - wLim) * (wLim - xC) >= 0
BracketFinder.java,search,xC,double,1,DEF,(w - wLim) * (wLim - $) >= 0
BracketFinder.java,search,wLim,double,1,DEF,(w - $) * ($ - xC) >= 0
BracketFinder.java,search,w,double,1,DEF,($ - wLim) * (xC - $) > 0
BracketFinder.java,search,xC,double,1,DEF,(w - wLim) * ($ - w) > 0
BracketFinder.java,search,wLim,double,1,DEF,(w - $) * (xC - w) > 0
BracketFinder.java,search,fW,double,0,DEF,$ < fC
BracketFinder.java,search,fW,double,0,DEF,$ > fC
BracketFinder.java,search,lo,double,0,DEF,$ > hi
HarmonicFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NumberIsTooSmallException,$.length < 4
HarmonicFitter.java,sortObservations,i,int,0,DEF,$-- != 0
HarmonicFitter.java,guessAOmega,c1,double,1,ZeroException,$ / c2 < 0
HarmonicFitter.java,guessAOmega,c2,double,1,ZeroException,c1 / $ < 0
HarmonicFitter.java,guessAOmega,c3,double,1,ZeroException,c2 / $ < 0
HarmonicFitter.java,guessAOmega,c2,double,1,ZeroException,$ / c3 < 0
HarmonicFitter.java,guessAOmega,xRange,double,0,ZeroException,$ == 0
HarmonicFitter.java,guessAOmega,y,double,0,DEF,$ < yMin
HarmonicFitter.java,guessAOmega,y,double,0,DEF,$ > yMax
GaussianFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NullArgumentException,$ == null
GaussianFitter.java,ParameterGuesser,observations,WeightedObservedPoint[],0,NumberIsTooSmallException,$.length < 3
GaussianFitter.java,guess,parameters,double[],0,DEF,$ == null
GaussianFitter.java,interpolateXAtY,idxStep,int,0,ZeroException,$ == 0
GaussianFitter.java,interpolateXAtY,pointA,WeightedObservedPoint,0,RET,$.getY() == y
GaussianFitter.java,interpolateXAtY,pointB,WeightedObservedPoint,0,RET,$.getY() == y
GaussianFitter.java,getInterpolationPointsForY,idxStep,int,0,ZeroException,$ == 0
GaussianFitter.java,compare,p1,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p2,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p1,WeightedObservedPoint,0,RET,$ == null
GaussianFitter.java,compare,p2,WeightedObservedPoint,0,RET,$ == null
LeastSquaresConverter.java,LeastSquaresConverter,observations,double[],0,DimensionMismatchException,$.length != weights.length
LeastSquaresConverter.java,value,residuals,double[],0,DimensionMismatchException,$.length != observations.length
LeastSquaresConverter.java,value,weights,double[],1,DEF,$ != null
LeastSquaresConverter.java,value,scale,RealMatrix,1,DEF,$ != null
BaseMultivariateVectorMultiStartOptimizer.java,BaseMultivariateVectorMultiStartOptimizer,optimizer,BaseMultivariateVectorOptimizer<FUNC>,0,NullArgumentException,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,BaseMultivariateVectorMultiStartOptimizer,generator,RandomVectorGenerator,0,NullArgumentException,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,BaseMultivariateVectorMultiStartOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
BaseMultivariateVectorMultiStartOptimizer.java,getOptima,optima,PointVectorValuePair[],0,MathIllegalStateException,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,optimize,optima,PointVectorValuePair[],0,DEF,$[0] == null
BaseMultivariateVectorMultiStartOptimizer.java,compare,o1,PointVectorValuePair,1,RET,$ == null
BaseMultivariateVectorMultiStartOptimizer.java,compare,o2,PointVectorValuePair,0,RET,$ == null
BOBYQAOptimizer.java,bobyqa,lowerDifference,ArrayRealVector,1,DEF,$.getEntry(j) >= -initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,lowerDifference.getEntry($) >= -initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,lowerDifference,ArrayRealVector,1,DEF,$.getEntry(j) >= ZERO
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,lowerDifference.getEntry($) >= ZERO
BOBYQAOptimizer.java,bobyqa,upperDifference,ArrayRealVector,0,DEF,$.getEntry(j) <= initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,j,int,0,DEF,upperDifference.getEntry($) <= initialTrustRegionRadius
BOBYQAOptimizer.java,bobyqa,upperDifference,ArrayRealVector,1,DEF,$.getEntry(j) <= ZERO
BOBYQAOptimizer.java,bobyqa,j,int,1,DEF,upperDifference.getEntry($) <= ZERO
BOBYQAOptimizer.java,bobyqb,trustRegionCenterInterpolationPointIndex,int,0,DEF,$ != kbase
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,bobyqb,crvmin,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,bdtest,double,0,DEF,$ < bdtol
BOBYQAOptimizer.java,bobyqb,bdtest,double,0,DEF,$ < bdtol
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,ntrits,int,1,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,denom,double,0,DEF,$ < cauchy
BOBYQAOptimizer.java,bobyqb,cauchy,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,k,int,0,DEF,$ == trustRegionCenterInterpolationPointIndex
BOBYQAOptimizer.java,bobyqb,temp,double,0,DEF,$ * den > scaden
BOBYQAOptimizer.java,bobyqb,den,double,0,DEF,temp * $ > scaden
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ == j
BOBYQAOptimizer.java,bobyqb,dnorm,double,0,DEF,$ > rho
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,MathIllegalStateException,$ > 0
BOBYQAOptimizer.java,bobyqb,vquad,double,0,MathIllegalStateException,$ >= ZERO
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= ONE_OVER_TEN
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= .7
BOBYQAOptimizer.java,bobyqb,f,double,0,DEF,$ < fopt
BOBYQAOptimizer.java,bobyqb,temp,double,0,DEF,$ * den > scaden
BOBYQAOptimizer.java,bobyqb,den,double,0,DEF,temp * $ > scaden
BOBYQAOptimizer.java,bobyqb,f,double,0,DEF,$ < fopt
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ > 0
BOBYQAOptimizer.java,bobyqb,itest,int,0,DEF,$ >= 3
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < n
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < npt
BOBYQAOptimizer.java,bobyqb,i,int,0,DEF,$ < nh
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == 0
BOBYQAOptimizer.java,bobyqb,sum,double,0,DEF,$ > distsq
BOBYQAOptimizer.java,bobyqb,knew,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,ratio,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,bobyqb,dnorm,double,0,DEF,Math.max(delta, $) > rho
BOBYQAOptimizer.java,bobyqb,delta,double,0,DEF,Math.max($, dnorm) > rho
BOBYQAOptimizer.java,bobyqb,rho,double,0,DEF,$ > stoppingTrustRegionRadius
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= SIXTEEN
BOBYQAOptimizer.java,bobyqb,ratio,double,1,DEF,$ <= TWO_HUNDRED_FIFTY
BOBYQAOptimizer.java,bobyqb,ntrits,int,0,DEF,$ == -1
BOBYQAOptimizer.java,bobyqb,fAtInterpolationPoints,ArrayRealVector,0,DEF,$.getEntry(trustRegionCenterInterpolationPointIndex) <= fsave
BOBYQAOptimizer.java,bobyqb,trustRegionCenterInterpolationPointIndex,int,0,DEF,fAtInterpolationPoints.getEntry($) <= fsave
BOBYQAOptimizer.java,altmov,k,int,0,DEF,$ == trustRegionCenterInterpolationPointIndex
BOBYQAOptimizer.java,altmov,tmp,double,1,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,tmp,double,0,DEF,$ < ZERO
BOBYQAOptimizer.java,altmov,k,int,1,DEF,$ == knew
BOBYQAOptimizer.java,altmov,d4,double,0,DEF,d3 * $ < ZERO
BOBYQAOptimizer.java,altmov,d3,double,0,DEF,$ * d4 < ZERO
BOBYQAOptimizer.java,altmov,subd,double,0,DEF,$ > HALF
BOBYQAOptimizer.java,altmov,vlag,double,0,DEF,Math.abs($) < ONE_OVER_FOUR
BOBYQAOptimizer.java,altmov,predsq,double,0,DEF,$ > presav
BOBYQAOptimizer.java,altmov,ibdsav,int,0,DEF,$ < 0
BOBYQAOptimizer.java,altmov,ibdsav,int,0,DEF,$ > 0
BOBYQAOptimizer.java,altmov,glagValue,double,0,DEF,Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), $) > ZERO
BOBYQAOptimizer.java,altmov,i,int,0,DEF,Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,lowerDifference,ArrayRealVector,0,DEF,Math.min(trustRegionCenterOffset.getEntry(i) - $.getEntry(i), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,trustRegionCenterOffset,ArrayRealVector,0,DEF,Math.min($.getEntry(i) - lowerDifference.getEntry(i), glagValue) > ZERO
BOBYQAOptimizer.java,altmov,glagValue,double,0,DEF,Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), $) < ZERO
BOBYQAOptimizer.java,altmov,upperDifference,ArrayRealVector,0,DEF,Math.max(trustRegionCenterOffset.getEntry(i) - $.getEntry(i), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,i,int,0,DEF,Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,trustRegionCenterOffset,ArrayRealVector,0,DEF,Math.max($.getEntry(i) - upperDifference.getEntry(i), glagValue) < ZERO
BOBYQAOptimizer.java,altmov,ggfree,double,0,RET,$ == ZERO
BOBYQAOptimizer.java,altmov,tmp1,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,0,DEF,$.getEntry(i) == bigstp
BOBYQAOptimizer.java,altmov,i,int,0,DEF,work1.getEntry($) == bigstp
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,1,DEF,$.getEntry(i) == bigstp
BOBYQAOptimizer.java,altmov,i,int,1,DEF,work1.getEntry($) == bigstp
BOBYQAOptimizer.java,altmov,work1,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,altmov,i,int,1,DEF,work1.getEntry($) == ZERO
BOBYQAOptimizer.java,altmov,glagValue,double,1,DEF,$ > ZERO
BOBYQAOptimizer.java,altmov,iflag,int,0,DEF,$ == 1
BOBYQAOptimizer.java,altmov,curv,double,1,DEF,$ > -gw
BOBYQAOptimizer.java,altmov,iflag,int,1,DEF,$ == 0
BOBYQAOptimizer.java,altmov,csave,double,0,DEF,$ > cauchy
BOBYQAOptimizer.java,prelim,nfm,int,1,DEF,$ >= 1
BOBYQAOptimizer.java,prelim,nfm,int,1,DEF,$ <= n
BOBYQAOptimizer.java,prelim,upperDifference,ArrayRealVector,0,DEF,$.getEntry(nfmm) == ZERO
BOBYQAOptimizer.java,prelim,nfmm,int,0,DEF,upperDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,nfm,int,0,DEF,$ > n
BOBYQAOptimizer.java,prelim,lowerDifference,ArrayRealVector,0,DEF,$.getEntry(nfxm) == ZERO
BOBYQAOptimizer.java,prelim,nfxm,int,0,DEF,lowerDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,upperDifference,ArrayRealVector,0,DEF,$.getEntry(nfxm) == ZERO
BOBYQAOptimizer.java,prelim,nfxm,int,0,DEF,upperDifference.getEntry($) == ZERO
BOBYQAOptimizer.java,prelim,ipt,int,0,DEF,$ > n
BOBYQAOptimizer.java,prelim,numEval,int,1,DEF,$ == 1
BOBYQAOptimizer.java,prelim,numEval,int,1,DEF,$ >= 2
BOBYQAOptimizer.java,prelim,stepb,double,0,DEF,stepa * $ < ZERO
BOBYQAOptimizer.java,prelim,stepa,double,0,DEF,$ * stepb < ZERO
BOBYQAOptimizer.java,prelim,trustRegionCenterInterpolationPointIndex,int,0,DEF,$ == nfm
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,gradientAtTrustRegionCenter.getEntry($) >= ZERO
BOBYQAOptimizer.java,trsbox,gradientAtTrustRegionCenter,ArrayRealVector,0,DEF,$.getEntry(i) >= ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,gradientAtTrustRegionCenter.getEntry($) <= ZERO
BOBYQAOptimizer.java,trsbox,gradientAtTrustRegionCenter,ArrayRealVector,0,DEF,$.getEntry(i) <= ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,beta,double,1,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,stepsq,double,0,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,beta,double,0,DEF,$ == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,resid,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,ds,double,1,DEF,$ < ZERO
BOBYQAOptimizer.java,trsbox,shs,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,0,DEF,$.getEntry(i) != ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,s.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,1,DEF,$.getEntry(i) > ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,s.getEntry($) > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ < stplen
BOBYQAOptimizer.java,trsbox,stplen,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ == -1
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,crvmin,double,0,DEF,$ == MINUS_ONE
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,trsbox,s,ArrayRealVector,0,DEF,$.getEntry(iact) < ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,s.getEntry($) < ZERO
BOBYQAOptimizer.java,trsbox,delsq,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,stplen,double,0,DEF,$ < blen
BOBYQAOptimizer.java,trsbox,iterc,int,0,DEF,$ == itermax
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,1,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,1,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,tempa,double,1,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,tempb,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,angbd * $ > tempa
BOBYQAOptimizer.java,trsbox,angbd,double,0,DEF,$ * temp > tempa
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,$ > ZERO
BOBYQAOptimizer.java,trsbox,temp,double,0,DEF,angbd * $ > tempb
BOBYQAOptimizer.java,trsbox,angbd,double,0,DEF,$ * temp > tempb
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,rednew,double,1,DEF,$ > redmax
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ < 0
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ < iu
BOBYQAOptimizer.java,trsbox,sdec,double,0,DEF,$ <= ZERO
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ZERO
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ZERO
BOBYQAOptimizer.java,trsbox,iact,int,0,DEF,$ >= 0
BOBYQAOptimizer.java,trsbox,isav,int,0,DEF,$ == iu
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == MINUS_ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == MINUS_ONE
BOBYQAOptimizer.java,trsbox,xbdi,ArrayRealVector,0,DEF,$.getEntry(i) == ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,xbdi.getEntry($) == ONE
BOBYQAOptimizer.java,trsbox,i,int,0,DEF,$ < j
BOBYQAOptimizer.java,trsbox,k,int,0,DEF,modelSecondDerivativesParameters.getEntry($) != ZERO
BOBYQAOptimizer.java,trsbox,modelSecondDerivativesParameters,ArrayRealVector,0,DEF,$.getEntry(k) != ZERO
BOBYQAOptimizer.java,trsbox,crvmin,double,0,DEF,$ != ZERO
BOBYQAOptimizer.java,trsbox,iterc,int,0,DEF,$ > itcsav
BOBYQAOptimizer.java,update,d1,double,0,DEF,Math.abs($) > ztest
BOBYQAOptimizer.java,update,i,int,0,DEF,$ >= npt
BOBYQAOptimizer.java,setup,dimension,int,0,NumberIsTooSmallException,$ < MINIMUM_PROBLEM_DIMENSION
BOBYQAOptimizer.java,setup,minDiff,double,0,DEF,$ < requiredMinDiff
MultivariateFunctionPenaltyAdapter.java,MultivariateFunctionPenaltyAdapter,lower,double[],0,DimensionMismatchException,$.length != upper.length
MultivariateFunctionPenaltyAdapter.java,MultivariateFunctionPenaltyAdapter,lower,double[],0,DimensionMismatchException,$.length != scale.length
PowellOptimizer.java,PowellOptimizer,rel,double,0,NumberIsTooSmallException,$ < MIN_RELATIVE_TOLERANCE
PowellOptimizer.java,PowellOptimizer,abs,double,0,NotStrictlyPositiveException,$ <= 0
PowellOptimizer.java,doOptimize,fX2,double,0,DEF,($ - fVal) > delta
PowellOptimizer.java,doOptimize,fVal,double,0,DEF,(fX2 - $) > delta
PowellOptimizer.java,doOptimize,checker,ConvergenceChecker<PointValuePair>,0,DEF,$ != null
PowellOptimizer.java,doOptimize,goal,GoalType,1,RET,$ == GoalType.MINIMIZE
PowellOptimizer.java,doOptimize,fX,double,0,DEF,$ > fX2
PowellOptimizer.java,doOptimize,t,double,0,DEF,$ < 0.0
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,lower,double[],0,NumberIsTooSmallException,$ != null
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,lower,double[],0,DimensionMismatchException,$.length != dim
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,v,double,0,NumberIsTooSmallException,$ < lo
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,upper,double[],0,NumberIsTooLargeException,$ != null
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,upper,double[],0,DimensionMismatchException,$.length != dim
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,v,double,0,NumberIsTooLargeException,$ > hi
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,lower,double[],1,DEF,$ == null
BaseAbstractMultivariateSimpleBoundsOptimizer.java,optimize,upper,double[],1,DEF,$ == null
MultivariateFunctionMappingAdapter.java,MultivariateFunctionMappingAdapter,lower,double[],0,DimensionMismatchException,$.length != upper.length
MultiDirectionalSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(reflected, best) < 0
MultiDirectionalSimplex.java,iterate,reflected,PointValuePair,0,RET,comparator.compare($, best) < 0
MultiDirectionalSimplex.java,iterate,best,PointValuePair,0,RET,comparator.compare(reflected, $) < 0
MultiDirectionalSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,DEF,$.compare(reflected, expanded) <= 0
MultiDirectionalSimplex.java,iterate,expanded,PointValuePair,0,DEF,comparator.compare(reflected, $) <= 0
MultiDirectionalSimplex.java,iterate,reflected,PointValuePair,0,DEF,comparator.compare($, expanded) <= 0
AbstractSimplex.java,AbstractSimplex,steps,double[],0,NullArgumentException,$ == null
AbstractSimplex.java,AbstractSimplex,steps,double[],0,ZeroException,$.length == 0
AbstractSimplex.java,AbstractSimplex,j,int,0,ZeroException,steps[$] == 0
AbstractSimplex.java,AbstractSimplex,steps,double[],0,ZeroException,$[j] == 0
AbstractSimplex.java,AbstractSimplex,referenceSimplex,double[][],0,NotStrictlyPositiveException,$.length <= 0
AbstractSimplex.java,AbstractSimplex,refI,double[],0,DimensionMismatchException,$.length != dimension
AbstractSimplex.java,AbstractSimplex,i,int,0,DEF,$ > 0
AbstractSimplex.java,build,dimension,int,0,DimensionMismatchException,$ != startPoint.length
AbstractSimplex.java,replaceWorstPoint,comparator,Comparator<PointValuePair>,0,DEF,$.compare(simplex[i], pointValuePair) > 0
AbstractSimplex.java,replaceWorstPoint,pointValuePair,PointValuePair,0,DEF,comparator.compare(simplex[i], $) > 0
AbstractSimplex.java,replaceWorstPoint,simplex,PointValuePair[],0,DEF,comparator.compare($[i], pointValuePair) > 0
AbstractSimplex.java,replaceWorstPoint,i,int,0,DEF,comparator.compare(simplex[$], pointValuePair) > 0
AbstractSimplex.java,getPoint,index,int,0,OutOfRangeException,$ < 0
AbstractSimplex.java,getPoint,index,int,0,OutOfRangeException,$ >= simplex.length
AbstractSimplex.java,setPoint,index,int,0,OutOfRangeException,$ < 0
AbstractSimplex.java,setPoint,index,int,0,OutOfRangeException,$ >= simplex.length
AbstractSimplex.java,setPoints,points,PointValuePair[],0,DimensionMismatchException,$.length != simplex.length
BaseAbstractMultivariateVectorOptimizer.java,optimize,f,FUNC,0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimize,t,double[],0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimize,w,double[],0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimize,startPoint,double[],0,NullArgumentException,$ == null
BaseAbstractMultivariateVectorOptimizer.java,optimize,t,double[],0,DimensionMismatchException,$.length != w.length
BaseAbstractMultivariateOptimizer.java,optimize,f,FUNC,0,NullArgumentException,$ == null
BaseAbstractMultivariateOptimizer.java,optimize,goalType,GoalType,0,NullArgumentException,$ == null
BaseAbstractMultivariateOptimizer.java,optimize,startPoint,double[],0,NullArgumentException,$ == null
CMAESOptimizer.java,doOptimize,diagonalOnly,int,1,DEF,$ <= 0
CMAESOptimizer.java,doOptimize,i,int,0,DEF,$ >= checkFeasableCount
CMAESOptimizer.java,doOptimize,diagonalOnly,int,1,DEF,$ <= 0
CMAESOptimizer.java,doOptimize,bestValue,double,0,DEF,$ > bestFitness
CMAESOptimizer.java,doOptimize,lastResult,PointValuePair,0,DEF,$ != null
CMAESOptimizer.java,doOptimize,stopFitness,double,0,DEF,$ != 0
CMAESOptimizer.java,doOptimize,sigma,double,0,DEF,$*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > stopTolX
CMAESOptimizer.java,doOptimize,sqrtDiagC,double[],0,DEF,sigma*(Math.max(Math.abs(pcCol[i]), $[i])) > stopTolX
CMAESOptimizer.java,doOptimize,pcCol,double[],0,DEF,sigma*(Math.max(Math.abs($[i]), sqrtDiagC[i])) > stopTolX
CMAESOptimizer.java,doOptimize,i,int,0,DEF,sigma*(Math.max(Math.abs(pcCol[$]), sqrtDiagC[$])) > stopTolX
CMAESOptimizer.java,doOptimize,sigma,double,0,DEF,$*sqrtDiagC[i] > stopTolUpX
CMAESOptimizer.java,doOptimize,sqrtDiagC,double[],0,DEF,sigma*$[i] > stopTolUpX
CMAESOptimizer.java,doOptimize,i,int,0,DEF,sigma*sqrtDiagC[$] > stopTolUpX
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > 2
CMAESOptimizer.java,doOptimize,worstFitness,double,0,DEF,Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,bestFitness,double,0,DEF,Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > fitnessHistory.length
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,historyWorst-$ < stopTolHistFun
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,$-historyBest < stopTolHistFun
CMAESOptimizer.java,doOptimize,diagD,RealMatrix,0,DEF,max($)/min($) > 1e7
CMAESOptimizer.java,doOptimize,lastResult,PointValuePair,0,DEF,$ != null
CMAESOptimizer.java,doOptimize,iterations,int,0,DEF,$ > 2
CMAESOptimizer.java,doOptimize,bestFitness,double,0,DEF,Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
CMAESOptimizer.java,doOptimize,historyBest,double,0,DEF,Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
CMAESOptimizer.java,doOptimize,historyWorst,double,0,DEF,Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,OutOfRangeException,$ != null
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,DimensionMismatchException,$.length != init.length
CMAESOptimizer.java,checkParameters,inputSigma,double[],0,NotPositiveException,$[i] < 0
CMAESOptimizer.java,checkParameters,i,int,0,NotPositiveException,inputSigma[$] < 0
CMAESOptimizer.java,checkParameters,boundaries,double[][],0,OutOfRangeException,$ != null
CMAESOptimizer.java,initializeCMA,lambda,int,0,DEF,$ <= 0
CMAESOptimizer.java,updateCovarianceDiagonalOnly,diagonalOnly,int,0,DEF,$ > 1
CMAESOptimizer.java,updateCovarianceDiagonalOnly,iterations,int,0,DEF,$ > diagonalOnly
CMAESOptimizer.java,updateCovariance,ccovmu,double,0,DEF,ccov1 + $ > 0
CMAESOptimizer.java,updateCovariance,ccov1,double,0,DEF,$ + ccovmu > 0
CMAESOptimizer.java,updateCovariance,negccov,double,0,DEF,$ > negcovMax
CMAESOptimizer.java,updateBD,negccov,double,0,DEF,ccov1 + ccovmu + $ > 0
CMAESOptimizer.java,updateBD,ccovmu,double,0,DEF,ccov1 + $ + negccov > 0
CMAESOptimizer.java,updateBD,ccov1,double,0,DEF,$ + ccovmu + negccov > 0
CMAESOptimizer.java,updateBD,negccov,double,0,DEF,(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1.
CMAESOptimizer.java,updateBD,ccovmu,double,0,DEF,(iterations % 1. / (ccov1 + $ + negccov) / dimension / 10.) < 1.
CMAESOptimizer.java,updateBD,ccov1,double,0,DEF,(iterations % 1. / ($ + ccovmu + negccov) / dimension / 10.) < 1.
CMAESOptimizer.java,updateBD,dimension,int,0,DEF,(iterations % 1. / (ccov1 + ccovmu + negccov) / $ / 10.) < 1.
CMAESOptimizer.java,updateBD,iterations,int,0,DEF,($ % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1.
CMAESOptimizer.java,updateBD,diagD,RealMatrix,0,DEF,min($) <= 0
CMAESOptimizer.java,updateBD,i,int,0,DEF,diagD.getEntry($, 0) < 0
CMAESOptimizer.java,updateBD,diagD,RealMatrix,0,DEF,$.getEntry(i, 0) < 0
CMAESOptimizer.java,equals,other,null,0,RET,$ instanceof DoubleIndex
CMAESOptimizer.java,encode,boundaries,double[][],0,RET,$ == null
CMAESOptimizer.java,decode,boundaries,double[][],0,RET,$ == null
CMAESOptimizer.java,value,boundaries,double[][],1,DEF,$ != null
CMAESOptimizer.java,isFeasible,boundaries,double[][],0,RET,$ == null
CMAESOptimizer.java,isFeasible,x,double[],0,RET,$[i] < 0
CMAESOptimizer.java,isFeasible,i,int,0,RET,x[$] < 0
CMAESOptimizer.java,isFeasible,x,double[],0,RET,$[i] > 1.0
CMAESOptimizer.java,isFeasible,i,int,0,RET,x[$] > 1.0
CMAESOptimizer.java,repair,x,double[],1,DEF,$[i] < 0
CMAESOptimizer.java,repair,i,int,1,DEF,x[$] < 0
CMAESOptimizer.java,repair,x,double[],1,DEF,$[i] > 1.0
CMAESOptimizer.java,repair,i,int,1,DEF,x[$] > 1.0
CMAESOptimizer.java,diag,m,RealMatrix,1,RET,$.getColumnDimension() == 1
CMAESOptimizer.java,eye,r,int,0,DEF,$ < m
CMAESOptimizer.java,max,max,double,0,DEF,$ < e
CMAESOptimizer.java,min,min,double,0,DEF,$ > e
SimplexOptimizer.java,doOptimize,simplex,AbstractSimplex,0,NullArgumentException,$ == null
SimplexOptimizer.java,doOptimize,iteration,int,0,RET,$ > 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(best, reflected) <= 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare(best, $) <= 0
NelderMeadSimplex.java,iterate,best,PointValuePair,1,DEF,comparator.compare($, reflected) <= 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(reflected, secondBest) < 0
NelderMeadSimplex.java,iterate,secondBest,PointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare($, secondBest) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(reflected, best) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare($, best) < 0
NelderMeadSimplex.java,iterate,best,PointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,DEF,$.compare(expanded, reflected) < 0
NelderMeadSimplex.java,iterate,expanded,PointValuePair,1,DEF,comparator.compare($, reflected) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,DEF,comparator.compare(expanded, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,1,RET,$.compare(reflected, worst) < 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,1,RET,comparator.compare($, worst) < 0
NelderMeadSimplex.java,iterate,worst,PointValuePair,1,RET,comparator.compare(reflected, $) < 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(outContracted, reflected) <= 0
NelderMeadSimplex.java,iterate,outContracted,PointValuePair,0,RET,comparator.compare($, reflected) <= 0
NelderMeadSimplex.java,iterate,reflected,PointValuePair,0,RET,comparator.compare(outContracted, $) <= 0
NelderMeadSimplex.java,iterate,comparator,Comparator<PointValuePair>,0,RET,$.compare(inContracted, worst) < 0
NelderMeadSimplex.java,iterate,worst,PointValuePair,0,RET,comparator.compare(inContracted, $) < 0
NelderMeadSimplex.java,iterate,inContracted,PointValuePair,0,RET,comparator.compare($, worst) < 0
NonLinearConjugateGradientOptimizer.java,setInitialStep,initialStep,double,1,DEF,$ <= 0
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,previous,PointValuePair,0,RET,$ != null
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,updateFormula,ConjugateGradientFormula,1,DEF,$ == ConjugateGradientFormula.FLETCHER_REEVES
NonLinearConjugateGradientOptimizer.java,doOptimize,iter,int,1,DEF,$ % n == 0
NonLinearConjugateGradientOptimizer.java,doOptimize,n,int,1,DEF,iter % $ == 0
NonLinearConjugateGradientOptimizer.java,doOptimize,beta,double,1,DEF,$ < 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yA,double,0,RET,$ * yB <= 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yB,double,0,RET,yA * $ <= 0
LevenbergMarquardtOptimizer.java,doOptimize,dk,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,s,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtOptimizer.java,doOptimize,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtOptimizer.java,doOptimize,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,RET,$ >= 1.0e-4
LevenbergMarquardtOptimizer.java,doOptimize,checker,ConvergenceChecker<PointVectorValuePair>,0,RET,$ != null
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,0,RET,FastMath.abs($) <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,1,ConvergenceException,FastMath.abs($) <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,1,ConvergenceException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,ConvergenceException,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,ConvergenceException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtOptimizer.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtOptimizer.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtOptimizer.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtOptimizer.java,qrDecomposition,ak2,double,0,RET,$ <= qrRankingThreshold
AbstractLeastSquaresOptimizer.java,updateJacobian,weightedResidualJacobian,double[][],0,DimensionMismatchException,$.length != rows
AbstractLeastSquaresOptimizer.java,updateResidualsAndCost,objective,double[],0,DimensionMismatchException,$.length != rows
AbstractLeastSquaresOptimizer.java,guessParametersErrors,rows,int,0,NumberIsTooSmallException,$ <= cols
GaussNewtonOptimizer.java,doOptimize,checker,ConvergenceChecker<PointVectorValuePair>,0,DEF,$ != null
GaussNewtonOptimizer.java,doOptimize,previous,PointVectorValuePair,0,DEF,$ != null
BaseMultivariateMultiStartOptimizer.java,BaseMultivariateMultiStartOptimizer,optimizer,BaseMultivariateOptimizer<FUNC>,0,NullArgumentException,$ == null
BaseMultivariateMultiStartOptimizer.java,BaseMultivariateMultiStartOptimizer,generator,RandomVectorGenerator,0,NullArgumentException,$ == null
BaseMultivariateMultiStartOptimizer.java,BaseMultivariateMultiStartOptimizer,starts,int,0,NotStrictlyPositiveException,$ < 1
BaseMultivariateMultiStartOptimizer.java,getOptima,optima,PointValuePair[],0,MathIllegalStateException,$ == null
BaseMultivariateMultiStartOptimizer.java,optimize,optima,PointValuePair[],0,DEF,$[0] == null
BaseMultivariateMultiStartOptimizer.java,compare,o1,PointValuePair,1,RET,$ == null
BaseMultivariateMultiStartOptimizer.java,compare,o2,PointValuePair,0,RET,$ == null
Beta.java,regularizedBeta,x,double,1,DEF,$ < 0
Beta.java,regularizedBeta,x,double,1,DEF,$ > 1
Beta.java,regularizedBeta,a,double,1,DEF,$ <= 0.0
Beta.java,regularizedBeta,b,double,1,DEF,$ <= 0.0
Beta.java,getB,n,int,1,DEF,$ % 2 == 0
Beta.java,logBeta,a,double,1,DEF,$ <= 0.0
Beta.java,logBeta,b,double,1,DEF,$ <= 0.0
Gamma.java,logGamma,x,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaP,n,double,1,MaxCountExceededException,$ >= maxIterations
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ == 0.0
Gamma.java,digamma,x,double,0,RET,$ > 0
Gamma.java,digamma,x,double,0,RET,$ <= S_LIMIT
Gamma.java,digamma,x,double,0,RET,$ >= C_LIMIT
Gamma.java,trigamma,x,double,0,RET,$ > 0
Gamma.java,trigamma,x,double,0,RET,$ <= S_LIMIT
Gamma.java,trigamma,x,double,0,RET,$ >= C_LIMIT
Erf.java,erf,x,double,0,RET,FastMath.abs($) > 40
Erf.java,erfc,x,double,0,RET,FastMath.abs($) > 40
Erf.java,erf,x1,double,0,RET,$ > x2
VectorFormat.java,format,i,int,0,DEF,$ > 0
VectorFormat.java,parseCoordinates,i,int,0,RET,$ > 0
VectorFormat.java,parseCoordinates,c,Number,0,RET,$ == null
Line.java,reset,d,double,1,DEF,$ == 0.0
Line.java,revertSelf,angle,double,1,DEF,$ < FastMath.PI
Line.java,intersection,d,double,0,RET,FastMath.abs($) < 1.0e-10
Line.java,LineTransform,c11,double,0,MathIllegalArgumentException,FastMath.abs($) < 1.0e-20
SubLine.java,side,crossing,Vector2D,0,RET,$ == null
SubLine.java,split,crossing,Vector2D,0,RET,$ == null
PolygonsSet.java,computeGeometricalProperties,v,Vector2D[][],1,DEF,$.length == 0
PolygonsSet.java,computeGeometricalProperties,v,Vector2D[][],1,DEF,$[0][0] == null
PolygonsSet.java,computeGeometricalProperties,sum,double,1,DEF,$ < 0
PolygonsSet.java,getVertices,vertices,Vector2D[][],0,DEF,$ == null
PolygonsSet.java,getVertices,loop,List<ComparableSegment>,0,DEF,$ != null
PolygonsSet.java,getVertices,loop,List<ComparableSegment>,1,DEF,$.size() < 2
PolygonsSet.java,getVertices,loop,List<ComparableSegment>,1,DEF,$.get(0).getStart() == null
PolygonsSet.java,getVertices,j,int,0,DEF,$ == 0
PolygonsSet.java,followLoop,distance,double,0,DEF,$ < selectedDistance
PolygonsSet.java,followLoop,selectedDistance,double,0,RET,$ > 1.0e-10
PolygonsSet.java,followLoop,loop,ArrayList<ComparableSegment>,0,RET,$.size() == 2
PolygonsSet.java,followLoop,end,Vector2D,0,MathInternalError,$ == null
PolygonsSet.java,equals,other,null,1,RET,$ instanceof ComparableSegment
PolygonsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean2D>,0,DEF,$.getPlusOutside() != null
PolygonsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean2D>,0,DEF,$.getPlusInside() != null
Vector2D.java,Vector2D,v,double[],0,DimensionMismatchException,$.length != 2
Vector2D.java,normalize,s,double,0,MathArithmeticException,$ == 0
Vector2D.java,equals,other,null,0,RET,$ instanceof Vector2D
Vector2DFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
Vector2DFormat.java,parse,coordinates,double[],0,RET,$ == null
NestedLoops.java,NestedLoops,loop,Vector2D[],0,MathIllegalArgumentException,$[0] == null
Vector1DFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
Vector1DFormat.java,parse,coordinates,double[],0,RET,$ == null
Vector1D.java,normalize,s,double,0,MathArithmeticException,$ == 0
Vector1D.java,equals,other,null,0,RET,$ instanceof Vector1D
IntervalsSet.java,buildTree,lower,double,0,RET,$ < 0
IntervalsSet.java,buildTree,upper,double,0,RET,$ > 0
IntervalsSet.java,buildTree,upper,double,0,RET,$ > 0
IntervalsSet.java,recurseList,node,BSPTree<Euclidean1D>,1,DEF,$.getCut() == null
IntervalsSet.java,recurseList,loc,Vector1D,0,DEF,checkPoint(low, $) == Location.INSIDE
IntervalsSet.java,recurseList,low,BSPTree<Euclidean1D>,0,DEF,checkPoint($, loc) == Location.INSIDE
IntervalsSet.java,recurseList,loc,Vector1D,0,DEF,checkPoint(high, $) == Location.INSIDE
IntervalsSet.java,recurseList,high,BSPTree<Euclidean1D>,0,DEF,checkPoint($, loc) == Location.INSIDE
SubPlane.java,side,inter,Line,0,RET,$ == null
SubPlane.java,side,otherPlane,Plane,0,DEF,crossP.dotProduct($.getNormal()) < 0
SubPlane.java,side,crossP,Vector3D,0,DEF,$.dotProduct(otherPlane.getNormal()) < 0
SubPlane.java,split,inter,Line,0,RET,$ == null
SubPlane.java,split,otherPlane,Plane,0,DEF,crossP.dotProduct($.getNormal()) < 0
SubPlane.java,split,crossP,Vector3D,0,DEF,$.dotProduct(otherPlane.getNormal()) < 0
Line.java,reset,norm2,double,0,MathIllegalArgumentException,$ == 0.0
Line.java,distance,n,double,0,RET,$ < Precision.SAFE_MIN
Line.java,closestPoint,n,double,0,RET,$ < Precision.EPSILON
Vector3DFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
Vector3DFormat.java,parse,coordinates,double[],0,RET,$ == null
Vector3D.java,Vector3D,v,double[],0,DimensionMismatchException,$.length != 3
Vector3D.java,normalize,s,double,0,MathArithmeticException,$ == 0
Vector3D.java,orthogonal,threshold,double,0,MathArithmeticException,$ == 0
Vector3D.java,orthogonal,x,double,1,RET,$ >= -threshold
Vector3D.java,orthogonal,x,double,1,RET,$ <= threshold
Vector3D.java,orthogonal,y,double,0,RET,$ >= -threshold
Vector3D.java,orthogonal,y,double,0,RET,$ <= threshold
Vector3D.java,angle,normProduct,double,0,MathArithmeticException,$ == 0
Vector3D.java,angle,dot,double,0,RET,$ < -threshold
Vector3D.java,angle,dot,double,0,RET,$ > threshold
Vector3D.java,angle,dot,double,0,RET,$ >= 0
Vector3D.java,equals,other,null,0,RET,$ instanceof Vector3D
OutlineExtractor.java,getOutline,end,int,0,DEF,$ != rawLoop.length
OutlineExtractor.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusOutside() != null
OutlineExtractor.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusInside() != null
OutlineExtractor.java,addContribution,scal,double,0,DEF,FastMath.abs($) > 1.0e-3
OutlineExtractor.java,addContribution,scal,double,0,DEF,$ < 0
OutlineExtractor.java,addContribution,loop,Vector2D[],1,DEF,$[0] == null
OutlineExtractor.java,addContribution,previous,int,0,DEF,$ != 1
PolyhedronsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusOutside() != null
PolyhedronsSet.java,visitInternalNode,attribute,BoundaryAttribute<Euclidean3D>,0,DEF,$.getPlusInside() != null
PolyhedronsSet.java,recurseFirstIntersection,cut,SubHyperplane<Euclidean3D>,0,RET,$ == null
PolyhedronsSet.java,recurseFirstIntersection,offset,double,1,DEF,$ < 0
PolyhedronsSet.java,recurseFirstIntersection,facet,SubHyperplane<Euclidean3D>,0,RET,$ != null
PolyhedronsSet.java,recurseFirstIntersection,crossed,SubHyperplane<Euclidean3D>,0,RET,$ != null
PolyhedronsSet.java,recurseFirstIntersection,hit3D,Vector3D,0,RET,$ != null
PolyhedronsSet.java,recurseFirstIntersection,facet,SubHyperplane<Euclidean3D>,0,RET,$ != null
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,$.getPlusOutside() != null
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,((SubPlane) $.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
PolyhedronsSet.java,boundaryFacet,point2D,Vector2D,0,RET,((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint($) == Location.INSIDE
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,$.getPlusInside() != null
PolyhedronsSet.java,boundaryFacet,attribute,BoundaryAttribute<Euclidean3D>,0,RET,((SubPlane) $.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
PolyhedronsSet.java,boundaryFacet,point2D,Vector2D,0,RET,((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint($) == Location.INSIDE
PolyhedronsSet.java,apply,original,Hyperplane<Euclidean3D>,0,DEF,$ != cachedOriginal
PolyhedronsSet.java,apply,original,Hyperplane<Euclidean3D>,0,DEF,$ != cachedOriginal
Plane.java,setNormal,norm,double,0,MathArithmeticException,$ < 1.0e-10
Plane.java,intersection,dot,double,0,RET,FastMath.abs($) < 1.0e-10
Plane.java,intersection,direction,Vector3D,0,RET,$.getNorm() < 1.0e-10
Plane.java,intersection,determinant,double,0,RET,FastMath.abs($) < 1.0e-10
Rotation.java,Rotation,norm,double,0,MathIllegalArgumentException,$ == 0
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$.length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[0].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[1].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[2].length != 3
Rotation.java,Rotation,det,double,0,NotARotationMatrixException,$ < 0.0
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,u1u1,double,0,MathIllegalArgumentException,$ == 0
Rotation.java,Rotation,u2u2,double,0,MathIllegalArgumentException,$ == 0
Rotation.java,Rotation,v1v1,double,0,MathIllegalArgumentException,$ == 0
Rotation.java,Rotation,v2v2,double,0,MathIllegalArgumentException,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ <= 0
Rotation.java,Rotation,normProduct,double,0,MathIllegalArgumentException,$ == 0
Rotation.java,getAxis,squaredSine,double,1,RET,$ == 0
Rotation.java,getAxis,q0,double,0,RET,$ < 0
Rotation.java,getAngle,q0,double,1,RET,$ < -0.1
Rotation.java,getAngle,q0,double,1,RET,$ > 0.1
Rotation.java,getAngle,q0,double,0,RET,$ < 0
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,orthogonalizeMatrix,fn1,double,0,RET,FastMath.abs($ - fn) <= threshold
Rotation.java,orthogonalizeMatrix,fn,double,0,RET,FastMath.abs(fn1 - $) <= threshold
Characterization.java,add,in,SubHyperplane<S>,1,DEF,$ == null
Characterization.java,add,out,SubHyperplane<S>,1,DEF,$ == null
RegionFactory.java,buildConvex,hyperplanes,Hyperplane<S>[],0,RET,$ == null
RegionFactory.java,buildConvex,hyperplanes,Hyperplane<S>[],0,RET,$.length == 0
RegionFactory.java,recurseComplement,node,BSPTree<S>,0,RET,$.getCut() == null
RegionFactory.java,recurseComplement,attribute,BoundaryAttribute<S>,0,DEF,$ != null
BSPTree.java,insertCut,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,copySelf,cut,SubHyperplane<S>,0,RET,$ == null
BSPTree.java,visit,cut,SubHyperplane<S>,1,DEF,$ == null
BSPTree.java,fitToCell,tree,BSPTree<S>,1,DEF,$ == tree.parent.plus
BSPTree.java,getCell,cut,SubHyperplane<S>,0,RET,$ == null
BSPTree.java,getCell,offset,double,1,RET,FastMath.abs($) < 1.0e-10
BSPTree.java,getCell,offset,double,1,RET,$ <= 0
BSPTree.java,condense,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,condense,plus,BSPTree<S>,0,DEF,$.cut == null
BSPTree.java,condense,minus,BSPTree<S>,0,DEF,$.cut == null
BSPTree.java,condense,plus,BSPTree<S>,0,DEF,$.attribute == null
BSPTree.java,condense,minus,BSPTree<S>,0,DEF,$.attribute == null
BSPTree.java,condense,plus,BSPTree<S>,0,DEF,$.attribute != null
BSPTree.java,merge,cut,SubHyperplane<S>,1,RET,$ == null
BSPTree.java,merge,tree,BSPTree<S>,1,RET,$.cut == null
BSPTree.java,merge,parentTree,BSPTree<S>,0,DEF,$ != null
BSPTree.java,merge,merged,BSPTree<S>,0,DEF,$.cut != null
BSPTree.java,split,cut,SubHyperplane<S>,0,RET,$ == null
BSPTree.java,split,cut,SubHyperplane<S>,1,DEF,$.side(sHyperplane) == Side.PLUS
BSPTree.java,split,sHyperplane,Hyperplane<S>,1,DEF,cut.side($) == Side.PLUS
BSPTree.java,split,cut,SubHyperplane<S>,1,DEF,$.side(sHyperplane) == Side.PLUS
BSPTree.java,split,sHyperplane,Hyperplane<S>,1,DEF,cut.side($) == Side.PLUS
BSPTree.java,insertInTree,parentTree,BSPTree<S>,0,DEF,$ != null
BSPTree.java,insertInTree,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,insertInTree,tree,BSPTree<S>,1,DEF,$ == tree.parent.plus
BSPTree.java,chopOffMinus,cut,SubHyperplane<S>,0,DEF,$ != null
BSPTree.java,chopOffPlus,cut,SubHyperplane<S>,0,DEF,$ != null
AbstractRegion.java,AbstractRegion,boundary,Collection<SubHyperplane<S>>,1,DEF,$.size() == 0
AbstractRegion.java,AbstractRegion,hyperplanes,Hyperplane<S>[],1,DEF,$ == null
AbstractRegion.java,AbstractRegion,hyperplanes,Hyperplane<S>[],1,DEF,$.length == 0
AbstractRegion.java,isEmpty,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,checkPoint,cell,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,getTree,tree,BSPTree<S>,0,DEF,$.getCut() != null
AbstractRegion.java,getTree,tree,BSPTree<S>,0,DEF,$.getAttribute() == null
AbstractRegion.java,recurseBuildBoundary,node,BSPTree<S>,0,DEF,$.getCut() != null
AbstractRegion.java,characterize,node,BSPTree<S>,1,DEF,$.getCut() == null
AbstractRegion.java,getSize,barycenter,Vector<S>,0,DEF,$ == null
AbstractRegion.java,getBarycenter,barycenter,Vector<S>,0,DEF,$ == null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,recurseSides,node,BSPTree<S>,1,DEF,$.getCut().side(sub.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,sub,SubHyperplane<S>,1,DEF,node.getCut().side($.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,node,BSPTree<S>,1,DEF,$.getCut().side(sub.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,sub,SubHyperplane<S>,1,DEF,node.getCut().side($.getHyperplane()) == Side.PLUS
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getPlus().getCut() != null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getMinus().getCut() != null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getPlus().getCut() != null
AbstractRegion.java,recurseSides,node,BSPTree<S>,0,DEF,$.getMinus().getCut() != null
AbstractRegion.java,recurseIntersection,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,recurseIntersection,plus,SubHyperplane<S>,1,RET,$ == null
AbstractRegion.java,recurseIntersection,minus,SubHyperplane<S>,1,RET,$ == null
AbstractRegion.java,recurseTransform,node,BSPTree<S>,0,RET,$.getCut() == null
AbstractRegion.java,recurseTransform,attribute,BoundaryAttribute<S>,0,DEF,$ != null
OrderedTuple.java,OrderedTuple,components,double[],1,DEF,$[i] < 0
OrderedTuple.java,OrderedTuple,i,int,1,DEF,components[$] < 0
OrderedTuple.java,OrderedTuple,m,long,0,DEF,$ != 0
OrderedTuple.java,OrderedTuple,lsb,int,1,DEF,$ <= msb
OrderedTuple.java,encode,encoding,long[],0,RET,$ != null
OrderedTuple.java,encode,encoding,long[],0,RET,$.length == 1
OrderedTuple.java,encode,encoding,long[],0,RET,$[0] == 0x0L
OrderedTuple.java,encode,vIndex,int,0,DEF,getBit($, k) != 0
OrderedTuple.java,encode,k,int,0,DEF,getBit(vIndex, $) != 0
OrderedTuple.java,encode,shift,int,0,DEF,$-- == 0
OrderedTuple.java,compareTo,components,double[],0,RET,$.length == ot.components.length
OrderedTuple.java,compareTo,offset,int,1,DEF,$ < ot.offset
OrderedTuple.java,compareTo,offset,int,0,DEF,$ > ot.offset
OrderedTuple.java,compareTo,encoding,long[],1,RET,$.length < ot.encoding.length
OrderedTuple.java,compareTo,encoding,long[],1,RET,$.length > ot.encoding.length
OrderedTuple.java,equals,other,null,1,RET,$ instanceof OrderedTuple
OrderedTuple.java,computeMSB,ll,long,0,DEF,($ & mask) != ll
OrderedTuple.java,computeMSB,mask,long,0,DEF,(ll & $) != ll
OrderedTuple.java,computeLSB,ll,long,0,DEF,($ & mask) == ll
OrderedTuple.java,computeLSB,mask,long,0,DEF,(ll & $) == ll
OrderedTuple.java,getBit,k,int,1,RET,$ < e
OrderedTuple.java,getBit,k,int,1,RET,$ > offset
OrderedTuple.java,getBit,k,int,1,RET,$ == offset
AVLTree.java,insert,element,T,0,DEF,$ != null
AVLTree.java,insert,top,Node,1,DEF,$ == null
AVLTree.java,delete,element,T,0,RET,$ != null
AVLTree.java,delete,node,Node,1,RET,$.element == element
AVLTree.java,delete,node,Node,0,RET,$.element.compareTo(element) > 0
AVLTree.java,delete,element,T,0,RET,node.element.compareTo($) > 0
AVLTree.java,getNotSmaller,reference,T,1,RET,node.element.compareTo($) < 0
AVLTree.java,getNotSmaller,node,Node,1,RET,$.element.compareTo(reference) < 0
AVLTree.java,getNotSmaller,node,Node,0,RET,$.right == null
AVLTree.java,getNotSmaller,node,Node,0,RET,$.left == null
AVLTree.java,getNotLarger,reference,T,1,RET,node.element.compareTo($) > 0
AVLTree.java,getNotLarger,node,Node,1,RET,$.element.compareTo(reference) > 0
AVLTree.java,getNotLarger,node,Node,0,RET,$.left == null
AVLTree.java,getNotLarger,node,Node,0,RET,$.right == null
AVLTree.java,getPrevious,left,Node,0,RET,$ != null
AVLTree.java,getPrevious,node,Node,0,RET,$ != null
AVLTree.java,getPrevious,node,Node,0,RET,$ != node.parent.left
AVLTree.java,getNext,right,Node,0,RET,$ != null
AVLTree.java,getNext,node,Node,0,RET,$ != null
AVLTree.java,getNext,node,Node,0,RET,$ != node.parent.right
AVLTree.java,insert,newElement,T,0,RET,$.compareTo(this.element) < 0
AVLTree.java,insert,left,Node,0,RET,$ == null
AVLTree.java,insert,right,Node,0,RET,$ == null
AVLTree.java,delete,parent,Node,1,DEF,$ == null
AVLTree.java,delete,left,Node,1,DEF,$ == null
AVLTree.java,delete,right,Node,1,DEF,$ == null
AVLTree.java,delete,left,Node,1,DEF,$ == null
AVLTree.java,delete,right,Node,1,DEF,$ == null
AVLTree.java,delete,child,Node,0,DEF,$ != null
AVLTree.java,delete,node,Node,0,RET,$.parent == null
AVLTree.java,rebalanceLeftGrown,left,Node,1,DEF,$.skew == Skew.LEFT_HIGH
AVLTree.java,rebalanceRightGrown,right,Node,1,DEF,$.skew == Skew.RIGHT_HIGH
AVLTree.java,rebalanceLeftShrunk,right,Node,1,RET,$.skew == Skew.RIGHT_HIGH
AVLTree.java,rebalanceLeftShrunk,right,Node,1,RET,$.skew == Skew.BALANCED
AVLTree.java,rebalanceRightShrunk,left,Node,1,RET,$.skew == Skew.LEFT_HIGH
AVLTree.java,rebalanceRightShrunk,left,Node,1,RET,$.skew == Skew.BALANCED
AVLTree.java,rotateCW,left,Node,0,DEF,$ != null
AVLTree.java,rotateCW,right,Node,0,DEF,$.right != null
AVLTree.java,rotateCCW,right,Node,0,DEF,$ != null
AVLTree.java,rotateCCW,left,Node,0,DEF,$.left != null
AbstractSubHyperplane.java,recurseTransform,node,BSPTree<T>,0,RET,$.getCut() == null
AbstractSubHyperplane.java,recurseTransform,attribute,BoundaryAttribute<T>,0,DEF,$ != null
BoundarySizeVisitor.java,visitInternalNode,attribute,BoundaryAttribute<S>,0,DEF,$.getPlusOutside() != null
BoundarySizeVisitor.java,visitInternalNode,attribute,BoundaryAttribute<S>,0,DEF,$.getPlusInside() != null
AbstractWell.java,setSeed,seed,int[],0,RET,$ == null
AbstractWell.java,setSeed,seed,int[],0,DEF,$.length < v.length
ValueServer.java,resetReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,closeReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,MathIllegalStateException,$ == null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,MathIllegalStateException,$.getBinStats().size() == 0
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,$ == null
ValueServer.java,getNextReplay,str,String,0,MathIllegalStateException,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,MathIllegalStateException,(str = $.readLine()) == null
ValueServer.java,getNextReplay,str,String,0,MathIllegalStateException,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,MathIllegalStateException,(str = $.readLine()) == null
ISAACRandom.java,setSeed,seed,int[],0,RET,$ == null
ISAACRandom.java,setSeed,seedLen,int,0,DEF,$ < rslLen
ISAACRandom.java,next,count,int,0,DEF,$ < 0
BitsStreamGenerator.java,nextInt,n,int,0,RET,$ > 0
BitsStreamGenerator.java,nextInt,n,int,0,RET,($ & -$) == n
UncorrelatedRandomVectorGenerator.java,UncorrelatedRandomVectorGenerator,mean,double[],0,DimensionMismatchException,$.length != standardDeviation.length
StableRandomGenerator.java,StableRandomGenerator,generator,RandomGenerator,0,NullArgumentException,$ == null
StableRandomGenerator.java,StableRandomGenerator,alpha,double,0,OutOfRangeException,$ > 0d
StableRandomGenerator.java,StableRandomGenerator,alpha,double,0,OutOfRangeException,$ <= 2d
StableRandomGenerator.java,StableRandomGenerator,beta,double,0,OutOfRangeException,$ >= -1d
StableRandomGenerator.java,StableRandomGenerator,beta,double,0,OutOfRangeException,$ <= 1d
StableRandomGenerator.java,StableRandomGenerator,alpha,double,1,DEF,$ < 2d
StableRandomGenerator.java,StableRandomGenerator,beta,double,1,DEF,$ != 0d
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,0,RET,$ == 2d
StableRandomGenerator.java,nextNormalizedDouble,beta,double,1,DEF,$ == 0d
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,1,DEF,$ == 1d
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,1,DEF,FastMath.abs($ - 1d) > 1e-8
StableRandomGenerator.java,nextNormalizedDouble,alpha,double,0,DEF,$ != 1d
RandomDataImpl.java,nextHexString,len,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataImpl.java,nextHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextInt,lower,int,0,NumberIsTooLargeException,$ >= upper
RandomDataImpl.java,nextLong,lower,long,0,NumberIsTooLargeException,$ >= upper
RandomDataImpl.java,nextSecureHexString,len,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataImpl.java,nextSecureHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextSecureInt,lower,int,0,NumberIsTooLargeException,$ >= upper
RandomDataImpl.java,nextSecureLong,lower,long,0,NumberIsTooLargeException,$ >= upper
RandomDataImpl.java,nextPoisson,mean,double,0,NotStrictlyPositiveException,$ <= 0
RandomDataImpl.java,nextPoisson,mean,double,1,RET,$ < pivot
RandomDataImpl.java,nextPoisson,r,double,1,DEF,$ >= p
RandomDataImpl.java,nextPoisson,u,double,1,DEF,$ <= p1
RandomDataImpl.java,nextPoisson,x,double,0,DEF,$ > delta
RandomDataImpl.java,nextPoisson,x,double,0,DEF,$ < -lambda
RandomDataImpl.java,nextPoisson,v,double,0,DEF,$ < -t
RandomDataImpl.java,nextPoisson,a,int,0,DEF,$ == 0
RandomDataImpl.java,nextPoisson,v,double,0,DEF,$ < qa
RandomDataImpl.java,nextPoisson,v,double,0,DEF,$ > qr
RandomDataImpl.java,nextGaussian,sigma,double,0,NotStrictlyPositiveException,$ <= 0
RandomDataImpl.java,nextExponential,mean,double,0,NotStrictlyPositiveException,$ <= 0.0
RandomDataImpl.java,nextExponential,u2,double,0,DEF,$ < umin
RandomDataImpl.java,nextUniform,lower,double,0,NumberIsTooLargeException,$ >= upper
RandomDataImpl.java,nextGamma,shape,double,0,RET,$ < 1
RandomDataImpl.java,nextGamma,p,double,1,RET,$ <= 1
RandomDataImpl.java,nextGamma,v,double,0,DEF,$ <= 0
RandomDataImpl.java,getRan,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,getSecRan,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,nextPermutation,k,int,0,NumberIsTooLargeException,$ > n
RandomDataImpl.java,nextPermutation,k,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataImpl.java,nextSample,k,int,0,NumberIsTooLargeException,$ > len
RandomDataImpl.java,nextSample,k,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataImpl.java,shuffle,i,int,1,DEF,$ == 0
MersenneTwister.java,setSeed,seed,int[],0,RET,$ == null
MersenneTwister.java,setSeed,i,int,0,DEF,$ >= N
MersenneTwister.java,setSeed,j,int,0,DEF,$ >= seed.length
MersenneTwister.java,setSeed,i,int,0,DEF,$ >= N
MersenneTwister.java,next,mti,int,0,DEF,$ >= N
CorrelatedRandomVectorGenerator.java,CorrelatedRandomVectorGenerator,mean,double[],0,DimensionMismatchException,$.length != order
EmpiricalDistribution.java,load,sampleStats,SummaryStatistics,0,ZeroException,$.getN() == 0
EmpiricalDistribution.java,getAdapter,in,null,1,RET,$ instanceof BufferedReader
EmpiricalDistribution.java,getAdapter,in,null,1,RET,$ instanceof double[]
EmpiricalDistribution.java,getNextValue,stats,SummaryStatistics,0,RET,$.getN() > 0
EmpiricalDistribution.java,getNextValue,stats,SummaryStatistics,1,RET,$.getStandardDeviation() > 0
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
AbstractRandomGenerator.java,nextBytes,i,int,0,DEF,$ > 0
AbstractRandomGenerator.java,nextBytes,bytesOut,int,0,RET,$ == bytes.length
AbstractRandomGenerator.java,nextInt,n,int,0,NotStrictlyPositiveException,$ <= 0
AbstractRandomGenerator.java,nextGaussian,s,double,0,DEF,$ != 0
Sigmoid.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Sigmoid.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 2
Gaussian.java,Gaussian,sigma,double,0,NotStrictlyPositiveException,$ <= 0
Gaussian.java,value,g,double,1,RET,$ == 0
Gaussian.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Gaussian.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 3
Gaussian.java,validateParameters,param,double[],0,NotStrictlyPositiveException,$[2] <= 0
HarmonicOscillator.java,validateParameters,param,double[],0,NullArgumentException,$ == null
HarmonicOscillator.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 3
Logit.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Logit.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 2
Logit.java,value,x,double,0,OutOfRangeException,$ < lo
Logit.java,value,x,double,0,OutOfRangeException,$ > hi
StepFunction.java,StepFunction,x,double[],0,NullArgumentException,$ == null
StepFunction.java,StepFunction,y,double[],0,NullArgumentException,$ == null
StepFunction.java,StepFunction,x,double[],0,NoDataException,$.length == 0
StepFunction.java,StepFunction,y,double[],0,NoDataException,$.length == 0
StepFunction.java,StepFunction,y,double[],0,DimensionMismatchException,$.length != x.length
StepFunction.java,value,index,int,1,DEF,$ < -1
StepFunction.java,value,index,int,1,DEF,$ >= 0
Logistic.java,Logistic,n,double,0,NotStrictlyPositiveException,$ <= 0
Logistic.java,validateParameters,param,double[],0,NullArgumentException,$ == null
Logistic.java,validateParameters,param,double[],0,DimensionMismatchException,$.length != 6
Logistic.java,validateParameters,param,double[],0,NotStrictlyPositiveException,$[5] <= 0
BaseSecantSolver.java,doSolve,f0,double,0,RET,$ == 0.0
BaseSecantSolver.java,doSolve,f1,double,0,RET,$ == 0.0
BaseSecantSolver.java,doSolve,fx,double,0,RET,$ == 0.0
BaseSecantSolver.java,doSolve,fx,double,1,DEF,f1 * $ < 0
BaseSecantSolver.java,doSolve,f1,double,1,DEF,$ * fx < 0
BaseSecantSolver.java,doSolve,x,double,0,ConvergenceException,$ == x1
BaseSecantSolver.java,doSolve,f1,double,0,MathInternalError:RET,FastMath.abs($) <= ftol
BaseSecantSolver.java,doSolve,f1,double,0,RET,$ <= 0
BaseSecantSolver.java,doSolve,f1,double,0,RET,$ >= 0
UnivariateSolverUtils.java,solve,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,solve,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,forceSide,allowedSolution,AllowedSolution,0,RET,$ == AllowedSolution.ANY_SIDE
UnivariateSolverUtils.java,forceSide,fLo,double,0,RET,$ >= 0
UnivariateSolverUtils.java,forceSide,fHi,double,0,RET,$ <= 0
UnivariateSolverUtils.java,forceSide,fLo,double,0,RET,$ <= 0
UnivariateSolverUtils.java,forceSide,fHi,double,0,RET,$ >= 0
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ < fHi
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ >= 0
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ > fHi
UnivariateSolverUtils.java,forceSide,fLo,double,1,DEF,$ <= 0
UnivariateSolverUtils.java,bracket,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,bracket,maximumIterations,int,0,NotStrictlyPositiveException,$ <= 0
UnivariateSolverUtils.java,bracket,fa,double,0,NoBracketingException,$ * fb > 0.0
UnivariateSolverUtils.java,bracket,fb,double,0,NoBracketingException,fa * $ > 0.0
UnivariateSolverUtils.java,isBracketing,function,UnivariateFunction,0,NullArgumentException,$ == null
UnivariateSolverUtils.java,verifyInterval,lower,double,0,NumberIsTooLargeException,$ >= upper
UnivariateSolverUtils.java,verifyBracketing,function,UnivariateFunction,0,NullArgumentException,$ == null
BisectionSolver.java,doSolve,fm,double,1,DEF,$ * fmin > 0
BisectionSolver.java,doSolve,fmin,double,1,DEF,fm * $ > 0
BisectionSolver.java,doSolve,min,double,0,RET,FastMath.abs(max - $) <= absoluteAccuracy
BisectionSolver.java,doSolve,max,double,0,RET,FastMath.abs($ - min) <= absoluteAccuracy
SecantSolver.java,doSolve,f0,double,0,RET,$ == 0.0
SecantSolver.java,doSolve,f1,double,0,RET,$ == 0.0
SecantSolver.java,doSolve,fx,double,0,RET,$ == 0.0
SecantSolver.java,doSolve,f1,double,0,RET,FastMath.abs($) <= ftol
LaguerreSolver.java,doSolve,yInitial,double,0,RET,FastMath.abs($) <= functionValueAccuracy
LaguerreSolver.java,doSolve,yMin,double,0,RET,FastMath.abs($) <= functionValueAccuracy
LaguerreSolver.java,doSolve,yMin,double,0,RET,yInitial * $ < 0
LaguerreSolver.java,doSolve,yInitial,double,0,RET,$ * yMin < 0
LaguerreSolver.java,doSolve,yMax,double,0,RET,FastMath.abs($) <= functionValueAccuracy
LaguerreSolver.java,doSolve,yInitial,double,0,RET,$ * yMax < 0
LaguerreSolver.java,doSolve,yMax,double,0,RET,yInitial * $ < 0
LaguerreSolver.java,solveAll,coefficients,Complex[],0,NullArgumentException,$ == null
LaguerreSolver.java,solveAll,n,int,0,NoDataException,$ == 0
LaguerreSolver.java,solve,coefficients,Complex[],0,NullArgumentException,$ == null
LaguerreSolver.java,solve,n,int,0,NoDataException,$ == 0
LaguerreSolver.java,solve,oldz,Complex,0,RET,(z.subtract($)).abs() <= tolerance
LaguerreSolver.java,solve,z,Complex,0,RET,($.subtract(oldz)).abs() <= tolerance
LaguerreSolver.java,solve,pv,Complex,0,RET,$.abs() <= functionValueAccuracy
NewtonSolver.java,doSolve,x0,double,0,RET,FastMath.abs(x1 - $) <= absoluteAccuracy
NewtonSolver.java,doSolve,x1,double,0,RET,FastMath.abs($ - x0) <= absoluteAccuracy
BracketingNthOrderBrentSolver.java,BracketingNthOrderBrentSolver,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolver.java,BracketingNthOrderBrentSolver,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolver.java,BracketingNthOrderBrentSolver,maximalOrder,int,0,NumberIsTooSmallException,$ < 2
BracketingNthOrderBrentSolver.java,doSolve,y,double[],1,DEF,$[0] * $[1] < 0
BracketingNthOrderBrentSolver.java,doSolve,y,double[],1,DEF,$[1] * $[2] < 0
BracketingNthOrderBrentSolver.java,doSolve,xA,double,0,MathInternalError:RET,(xB - $) <= xTol
BracketingNthOrderBrentSolver.java,doSolve,xB,double,0,MathInternalError:RET,($ - xA) <= xTol
BracketingNthOrderBrentSolver.java,doSolve,agingA,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolver.java,doSolve,agingB,int,1,DEF,$ >= MAXIMAL_AGING
BracketingNthOrderBrentSolver.java,doSolve,nextX,double,0,DEF,$ > xA
BracketingNthOrderBrentSolver.java,doSolve,nextX,double,0,DEF,$ < xB
BracketingNthOrderBrentSolver.java,doSolve,nbPoints,int,1,DEF,$ > 2
BracketingNthOrderBrentSolver.java,doSolve,start,int,1,DEF,end - $ != nbPoints
BracketingNthOrderBrentSolver.java,doSolve,end,int,1,DEF,$ - start != nbPoints
BracketingNthOrderBrentSolver.java,doSolve,nbPoints,int,0,DEF,$ == x.length
BracketingNthOrderBrentSolver.java,doSolve,yA,double,1,DEF,nextY * $ <= 0
BracketingNthOrderBrentSolver.java,doSolve,nextY,double,1,DEF,$ * yA <= 0
MullerSolver2.java,doSolve,y0,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver2.java,doSolve,y1,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver2.java,doSolve,y0,double,0,NoBracketingException,$ * y1 > 0
MullerSolver2.java,doSolve,y1,double,0,NoBracketingException,y0 * $ > 0
MullerSolver2.java,doSolve,delta,double,1,DEF,$ >= 0.0
MullerSolver2.java,doSolve,denominator,double,1,DEF,$ != 0
MullerSolver2.java,doSolve,oldx,double,0,RET,FastMath.abs(x - $) <= tolerance
MullerSolver2.java,doSolve,x,double,0,RET,FastMath.abs($ - oldx) <= tolerance
MullerSolver2.java,doSolve,y,double,0,RET,FastMath.abs($) <= functionValueAccuracy
MullerSolver.java,doSolve,fMin,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver.java,doSolve,fMax,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver.java,doSolve,fInitial,double,0,RET,FastMath.abs($) < functionValueAccuracy
MullerSolver.java,solve,oldx,double,0,RET,FastMath.abs(x - $) <= tolerance
MullerSolver.java,solve,x,double,0,RET,FastMath.abs($ - oldx) <= tolerance
MullerSolver.java,solve,y,double,0,RET,FastMath.abs($) <= functionValueAccuracy
MullerSolver.java,solve,ym,double,1,DEF,FastMath.signum(y0) + FastMath.signum($) == 0.0
MullerSolver.java,solve,y0,double,1,DEF,FastMath.signum($) + FastMath.signum(ym) == 0.0
BrentSolver.java,doSolve,yInitial,double,0,RET,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,doSolve,yMin,double,0,RET,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,doSolve,yMin,double,0,RET,yInitial * $ < 0
BrentSolver.java,doSolve,yInitial,double,0,RET,$ * yMin < 0
BrentSolver.java,doSolve,yMax,double,0,RET,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,doSolve,yInitial,double,0,RET,$ * yMax < 0
BrentSolver.java,doSolve,yMax,double,0,RET,yInitial * $ < 0
BrentSolver.java,brent,m,double,0,RET,FastMath.abs($) <= tol
BrentSolver.java,brent,e,double,1,DEF,FastMath.abs($) < tol
BrentSolver.java,brent,a,double,1,DEF,$ == c
BrentSolver.java,brent,p,double,1,DEF,$ > 0
BrentSolver.java,brent,d,double,1,DEF,FastMath.abs($) > tol
BrentSolver.java,brent,m,double,1,DEF,$ > 0
BrentSolver.java,brent,fb,double,0,DEF,$ > 0
BrentSolver.java,brent,fc,double,0,DEF,$ > 0
BrentSolver.java,brent,fb,double,0,DEF,$ <= 0
BrentSolver.java,brent,fc,double,0,DEF,$ <= 0
RiddersSolver.java,doSolve,y1,double,0,RET,$ == 0
RiddersSolver.java,doSolve,y2,double,0,RET,$ == 0
RiddersSolver.java,doSolve,y3,double,0,RET,FastMath.abs($) <= functionValueAccuracy
RiddersSolver.java,doSolve,oldx,double,0,RET,FastMath.abs(x - $) <= tolerance
RiddersSolver.java,doSolve,x,double,0,RET,FastMath.abs($ - oldx) <= tolerance
RiddersSolver.java,doSolve,y,double,0,RET,FastMath.abs($) <= functionValueAccuracy
RiddersSolver.java,doSolve,correction,double,1,DEF,$ > 0.0
RiddersSolver.java,doSolve,y1,double,1,DEF,FastMath.signum($) + FastMath.signum(y) == 0.0
RiddersSolver.java,doSolve,y,double,1,DEF,FastMath.signum(y1) + FastMath.signum($) == 0.0
RiddersSolver.java,doSolve,y2,double,1,DEF,FastMath.signum($) + FastMath.signum(y) == 0.0
RiddersSolver.java,doSolve,y,double,1,DEF,FastMath.signum(y2) + FastMath.signum($) == 0.0
FunctionUtils.java,value,i,int,0,DEF,$ != j
FunctionUtils.java,sample,n,int,0,NotStrictlyPositiveException,$ <= 0
FunctionUtils.java,sample,min,double,0,NumberIsTooLargeException,$ >= max
PolynomialFunctionLagrangeForm.java,evaluateInternal,dist,double,0,DEF,$ < min_dist
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != j
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,DimensionMismatchException,$.length != y.length
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,NumberIsTooSmallException,$.length < 2
PolynomialFunctionNewtonForm.java,verifyInputArray,a,double[],0,NoDataException,$.length == 0
PolynomialFunctionNewtonForm.java,verifyInputArray,c,double[],0,NoDataException,$.length == 0
PolynomialsUtils.java,equals,key,Object,0,RET,$ == null
PolynomialsUtils.java,equals,key,null,0,RET,$ instanceof JacobiKey
PolynomialsUtils.java,buildPolynomial,degree,int,0,DEF,$ > maxDegree
PolynomialFunction.java,PolynomialFunction,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,evaluate,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,subtract,coefficients,double[],1,DEF,$.length < p.coefficients.length
PolynomialFunction.java,differentiate,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,differentiate,n,int,0,RET,$ == 1
PolynomialFunction.java,toString,coefficients,double[],1,RET,$[0] == 0.0
PolynomialFunction.java,toString,coefficients,double[],0,RET,$.length == 1
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] != 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] != 0
PolynomialFunction.java,toString,s,StringBuilder,1,DEF,$.length() > 0
PolynomialFunction.java,toString,coefficients,double[],1,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,1,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,absAi,double,0,DEF,($ - 1) != 0
PolynomialFunction.java,toString,i,int,0,DEF,$ > 1
PolynomialFunction.java,equals,obj,null,0,RET,$ instanceof PolynomialFunction
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,NullArgumentException,$ == null
PolynomialSplineFunction.java,PolynomialSplineFunction,polynomials,PolynomialFunction[],0,NullArgumentException,$ == null
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,NumberIsTooSmallException,$.length < 2
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,DimensionMismatchException,$.length - 1 != polynomials.length
PolynomialSplineFunction.java,value,i,int,0,DEF,$ < 0
PolynomialSplineFunction.java,value,i,int,0,DEF,$ >= polynomials.length
UnivariatePeriodicInterpolator.java,interpolate,xval,double[],0,NumberIsTooSmallException,$.length < extend
LoessInterpolator.java,LoessInterpolator,bandwidth,double,0,OutOfRangeException,$ < 0
LoessInterpolator.java,LoessInterpolator,bandwidth,double,0,OutOfRangeException,$ > 1
LoessInterpolator.java,LoessInterpolator,robustnessIters,int,0,NotPositiveException,$ < 0
LoessInterpolator.java,smooth,xval,double[],0,DimensionMismatchException,$.length != yval.length
LoessInterpolator.java,smooth,n,int,0,NoDataException,$ == 0
LoessInterpolator.java,smooth,n,int,0,RET,$ == 1
LoessInterpolator.java,smooth,n,int,0,RET,$ == 2
LoessInterpolator.java,smooth,bandwidthInPoints,int,0,NumberIsTooSmallException,$ < 2
LoessInterpolator.java,smooth,i,int,0,DEF,$ > 0
LoessInterpolator.java,smooth,meanXSquared,double,1,DEF,FastMath.sqrt(FastMath.abs($ - meanX * meanX)) < accuracy
LoessInterpolator.java,smooth,meanX,double,1,DEF,FastMath.sqrt(FastMath.abs(meanXSquared - $ * $)) < accuracy
LoessInterpolator.java,smooth,iter,int,0,DEF,$ == robustnessIters
LoessInterpolator.java,smooth,medianResidual,double,0,DEF,FastMath.abs($) < accuracy
LoessInterpolator.java,smooth,arg,double,1,DEF,$ >= 1
LoessInterpolator.java,smooth,xval,double[],0,DimensionMismatchException,$.length != yval.length
LoessInterpolator.java,updateBandwidthInterval,nextRight,int,0,DEF,$ < xval.length
LoessInterpolator.java,tricube,absX,double,0,RET,$ >= 1.0
TricubicSplineInterpolator.java,interpolate,xval,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,yval,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,zval,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,fval,double[][][],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,xval,double[],0,DimensionMismatchException,$.length != fval.length
TricubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$].length != yLen
TricubicSplineInterpolator.java,interpolate,fval,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$][j].length != zLen
TricubicSplineInterpolator.java,interpolate,j,int,0,DimensionMismatchException,fval[i][$].length != zLen
TricubicSplineInterpolator.java,interpolate,fval,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
LinearInterpolator.java,interpolate,x,double[],0,DimensionMismatchException,$.length != y.length
LinearInterpolator.java,interpolate,x,double[],0,NumberIsTooSmallException,$.length < 2
BicubicSplineInterpolator.java,interpolate,xval,double[],0,NoDataException,$.length == 0
BicubicSplineInterpolator.java,interpolate,yval,double[],0,NoDataException,$.length == 0
BicubicSplineInterpolator.java,interpolate,fval,double[][],0,NoDataException,$.length == 0
BicubicSplineInterpolator.java,interpolate,xval,double[],0,DimensionMismatchException,$.length != fval.length
BicubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$].length != yLen
BicubicSplineInterpolator.java,interpolate,fval,double[][],0,DimensionMismatchException,$[i].length != yLen
SplineInterpolator.java,interpolate,x,double[],0,DimensionMismatchException,$.length != y.length
SplineInterpolator.java,interpolate,x,double[],0,NumberIsTooSmallException,$.length < 3
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,NoDataException,$ == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,yLen,int,0,NoDataException,$ == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,f,double[][],0,NoDataException,$.length == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,f,double[][],0,NoDataException,$[0].length == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != f.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdX.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdY.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdXdY.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,f,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,f[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,dFdX,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdX[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,dFdY,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdY[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdY[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,d2FdXdY,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,value,i,int,0,OutOfRangeException,$ == -1
BicubicSplineInterpolatingFunction.java,value,j,int,0,OutOfRangeException,$ == -1
BicubicSplineInterpolatingFunction.java,partialDerivative,partialDerivatives,BivariateFunction[][][],0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivative,i,int,0,OutOfRangeException,$ == -1
BicubicSplineInterpolatingFunction.java,partialDerivative,j,int,0,OutOfRangeException,$ == -1
BicubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ < 0
BicubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ > 1
BicubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ < 0
BicubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ > 1
BicubicSplineInterpolatingFunction.java,partialDerivativeX,partialDerivativeX,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeY,partialDerivativeY,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeXX,partialDerivativeXX,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeYY,partialDerivativeYY,BivariateFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeXY,partialDerivativeXY,BivariateFunction,0,DEF,$ == null
MicrosphereInterpolator.java,MicrosphereInterpolator,exponent,int,0,NotPositiveException,$ < 0
MicrosphereInterpolator.java,MicrosphereInterpolator,elements,int,0,NotStrictlyPositiveException,$ <= 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,NoDataException,$ == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,yLen,int,0,NoDataException,$ == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,z,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,NoDataException,$.length == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,NoDataException,$[0].length == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != f.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdX.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdY.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdXdY.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdXdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdYdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d3FdXdYdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,f[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdX,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdX[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdY,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdY[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdY[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdY,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdYdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdYdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d3FdXdYdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d3FdXdYdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,f[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,f[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdX,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdX[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,dFdX[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdY,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdY[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,dFdY[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,dFdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdY[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d2FdXdY[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdY,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d2FdXdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdYdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdYdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d2FdYdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d3FdXdYdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d3FdXdYdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d3FdXdYdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,value,i,int,0,OutOfRangeException,$ == -1
TricubicSplineInterpolatingFunction.java,value,j,int,0,OutOfRangeException,$ == -1
TricubicSplineInterpolatingFunction.java,value,k,int,0,OutOfRangeException,$ == -1
TricubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ < 0
TricubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ > 1
TricubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ < 0
TricubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ > 1
TricubicSplineInterpolatingFunction.java,value,z,double,0,OutOfRangeException,$ < 0
TricubicSplineInterpolatingFunction.java,value,z,double,0,OutOfRangeException,$ > 1
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,xval,double[],0,NoDataException,$.length == 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,yval,double[],0,NoDataException,$.length == 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,fval,double[][],0,NoDataException,$.length == 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,xval,double[],0,DimensionMismatchException,$.length != fval.length
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$].length != yLen
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,fval,double[][],0,DimensionMismatchException,$[i].length != yLen
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,NullArgumentException,$ == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,yval,double[],0,NullArgumentException,$ == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,NoDataException,$.length == 0
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,DimensionMismatchException,$.length != yval.length
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,NullArgumentException,$[0] == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xvalI,double[],0,NullArgumentException,$ == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xvalI,double[],0,DimensionMismatchException,$.length != dimension
MicrosphereInterpolatingFunction.java,value,sd,Entry<RealVector,Double>,0,DEF,$ != null
LegendreGaussIntegrator.java,doIntegrate,delta,double,0,RET,$ <= limit
BaseAbstractUnivariateIntegrator.java,BaseAbstractUnivariateIntegrator,minimalIterationCount,int,0,NotStrictlyPositiveException,$ <= 0
BaseAbstractUnivariateIntegrator.java,BaseAbstractUnivariateIntegrator,maximalIterationCount,int,0,NumberIsTooSmallException,$ <= minimalIterationCount
TrapezoidIntegrator.java,TrapezoidIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > TRAPEZOID_MAX_ITERATIONS_COUNT
TrapezoidIntegrator.java,TrapezoidIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > TRAPEZOID_MAX_ITERATIONS_COUNT
TrapezoidIntegrator.java,stage,n,int,1,RET,$ == 0
TrapezoidIntegrator.java,doIntegrate,delta,double,0,RET,$ <= rLimit
SimpsonIntegrator.java,SimpsonIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > SIMPSON_MAX_ITERATIONS_COUNT
SimpsonIntegrator.java,SimpsonIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > SIMPSON_MAX_ITERATIONS_COUNT
SimpsonIntegrator.java,doIntegrate,delta,double,0,RET,$ <= rLimit
RombergIntegrator.java,RombergIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > ROMBERG_MAX_ITERATIONS_COUNT
RombergIntegrator.java,RombergIntegrator,maximalIterationCount,int,0,NumberIsTooLargeException,$ > ROMBERG_MAX_ITERATIONS_COUNT
RombergIntegrator.java,doIntegrate,delta,double,0,RET,$ <= rLimit
ComplexFormat.java,ComplexFormat,imaginaryCharacter,String,0,NullArgumentException,$ == null
ComplexFormat.java,ComplexFormat,imaginaryCharacter,String,0,NoDataException,$.length() == 0
ComplexFormat.java,ComplexFormat,imaginaryFormat,NumberFormat,0,NullArgumentException,$ == null
ComplexFormat.java,ComplexFormat,realFormat,NumberFormat,0,NullArgumentException,$ == null
ComplexFormat.java,format,im,double,1,DEF,$ < 0.0
ComplexFormat.java,format,im,double,0,DEF,$ > 0.0
ComplexFormat.java,formatImaginary,absIm,double,0,MathInternalError,$ < 0
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Complex
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Number
ComplexFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
ComplexFormat.java,parse,re,Number,0,RET,$ == null
ComplexFormat.java,parse,im,Number,0,RET,$ == null
RootsOfUnity.java,isCounterClockWise,omegaCount,int,0,MathIllegalStateException,$ == 0
RootsOfUnity.java,computeRoots,n,int,0,ZeroException,$ == 0
RootsOfUnity.java,computeRoots,absN,int,0,RET,$ == omegaCount
RootsOfUnity.java,getReal,omegaCount,int,0,MathIllegalStateException,$ == 0
RootsOfUnity.java,getReal,k,int,0,OutOfRangeException,$ < 0
RootsOfUnity.java,getReal,k,int,0,OutOfRangeException,$ >= omegaCount
RootsOfUnity.java,getImaginary,omegaCount,int,0,MathIllegalStateException,$ == 0
RootsOfUnity.java,getImaginary,k,int,0,OutOfRangeException,$ < 0
RootsOfUnity.java,getImaginary,k,int,0,OutOfRangeException,$ >= omegaCount
Complex.java,abs,imaginary,double,0,RET,$ == 0.0
Complex.java,abs,real,double,0,RET,$ == 0.0
Complex.java,divide,c,double,0,RET,$ == 0.0
Complex.java,divide,d,double,0,RET,$ == 0.0
Complex.java,divide,divisor,double,0,RET,$ == 0d
Complex.java,reciprocal,real,double,0,RET,$ == 0.0
Complex.java,reciprocal,imaginary,double,0,RET,$ == 0.0
Complex.java,equals,other,null,0,RET,$ instanceof Complex
Complex.java,sqrt,real,double,0,RET,$ == 0.0
Complex.java,sqrt,imaginary,double,0,RET,$ == 0.0
Complex.java,sqrt,real,double,1,RET,$ >= 0.0
Complex.java,tan,imaginary,double,0,RET,$ > 20.0
Complex.java,tan,imaginary,double,0,RET,$ < -20.0
Complex.java,tanh,real,double,0,RET,$ > 20.0
Complex.java,tanh,real,double,0,RET,$ < -20.0
Complex.java,nthRoot,n,int,0,NotPositiveException,$ <= 0
ComplexUtils.java,polar2Complex,r,double,0,MathIllegalArgumentException,$ < 0
DescriptiveStatistics.java,DescriptiveStatistics,initialDoubleArray,double[],0,DEF,$ != null
DescriptiveStatistics.java,addValue,windowSize,int,1,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,MathIllegalArgumentException,$ < 1
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,MathIllegalArgumentException,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,getPercentile,percentileImpl,null,1,DEF,$ instanceof Percentile
AbstractStorelessUnivariateStatistic.java,evaluate,values,double[],0,NullArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,incrementAll,values,double[],0,NullArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,equals,object,Object,0,RET,$ instanceof AbstractStorelessUnivariateStatistic == false
AbstractStorelessUnivariateStatistic.java,equals,object,null,0,RET,$ instanceof AbstractStorelessUnivariateStatistic
StatisticalSummaryValues.java,equals,object,Object,0,RET,$ instanceof StatisticalSummaryValues == false
StatisticalSummaryValues.java,equals,object,null,0,RET,$ instanceof StatisticalSummaryValues
FirstMoment.java,increment,n,long,0,DEF,$ == 0
GeometricMean.java,getResult,sumOfLogs,StorelessUnivariateStatistic,1,RET,$.getN() > 0
ThirdMoment.java,increment,n,long,0,DEF,$ < 1
Kurtosis.java,getResult,moment,FourthMoment,0,DEF,$.getN() > 3
Kurtosis.java,getResult,moment,FirstMoment,1,DEF,$.n <= 3
Kurtosis.java,getResult,variance,double,1,DEF,$ < 10E-20
Kurtosis.java,evaluate,length,int,0,DEF,$ > 3
Skewness.java,getResult,moment,FirstMoment,0,RET,$.n < 3
Skewness.java,getResult,variance,double,1,RET,$ < 10E-20
Skewness.java,evaluate,length,int,0,DEF,$ > 2
FourthMoment.java,increment,n,long,0,DEF,$ < 1
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 0
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 1
Variance.java,evaluate,values,double[],0,NullArgumentException,$ == null
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
VectorialCovariance.java,increment,v,double[],0,DimensionMismatchException,$.length != sums.length
VectorialCovariance.java,getResult,n,long,0,DEF,$ > 1
VectorialCovariance.java,equals,obj,null,0,RET,$ instanceof VectorialCovariance
VectorialCovariance.java,equals,isBiasCorrected,boolean,0,RET,$ != other.isBiasCorrected
VectorialCovariance.java,equals,n,long,0,RET,$ != other.n
SecondMoment.java,increment,n,long,0,DEF,$ < 1
VectorialMean.java,increment,v,double[],0,DimensionMismatchException,$.length != means.length
VectorialMean.java,equals,obj,null,0,RET,$ instanceof VectorialMean
SemiVariance.java,evaluate,values,double[],0,NullArgumentException,$ == null
SemiVariance.java,evaluate,values,double[],1,RET,$.length == 0
SemiVariance.java,evaluate,values,double[],1,RET,$.length == 1
SemiVariance.java,evaluate,values,double[],0,DEF,($[i] > cutoff) == booleanDirection
SemiVariance.java,evaluate,i,int,0,DEF,(values[$] > cutoff) == booleanDirection
SemiVariance.java,evaluate,cutoff,double,0,DEF,(values[i] > $) == booleanDirection
SemiVariance.java,evaluate,values,double[],0,DEF,$[i] > cutoff
SemiVariance.java,evaluate,i,int,0,DEF,values[$] > cutoff
Percentile.java,setData,values,double[],1,DEF,$ == null
Percentile.java,setData,values,double[],1,DEF,$ == null
Percentile.java,evaluate,p,double,0,OutOfRangeException,$ > 100
Percentile.java,evaluate,p,double,0,OutOfRangeException,$ <= 0
Percentile.java,evaluate,length,int,0,RET,$ == 0
Percentile.java,evaluate,length,int,0,RET,$ == 1
Percentile.java,evaluate,pos,double,0,RET,$ < 1
Percentile.java,evaluate,pos,double,0,RET,$ >= n
Percentile.java,select,node,int,1,DEF,$ < pivotsHeap.length
Percentile.java,select,node,int,1,DEF,pivotsHeap[$] >= 0
Percentile.java,select,pivotsHeap,int[],1,DEF,$[node] >= 0
Percentile.java,select,node,int,0,DEF,$ < pivotsHeap.length
Percentile.java,select,k,int,1,RET,$ == pivot
Percentile.java,select,k,int,1,DEF,$ < pivot
Percentile.java,medianOf3,wBegin,double,1,RET,$ < wMiddle
Percentile.java,medianOf3,wMiddle,double,1,RET,$ < wEnd
Percentile.java,medianOf3,wBegin,double,1,RET,$ < wEnd
Percentile.java,partition,i,int,0,DEF,$ < j
Percentile.java,partition,i,int,0,DEF,$ >= end
Percentile.java,partition,work,double[],0,DEF,$[i] > value
Percentile.java,partition,i,int,0,DEF,work[$] > value
Percentile.java,setQuantile,p,double,0,OutOfRangeException,$ <= 0
Percentile.java,setQuantile,p,double,0,OutOfRangeException,$ > 100
Percentile.java,copy,source,Percentile,0,DEF,$.cachedPivots != null
Max.java,increment,d,double,0,DEF,$ > value
Min.java,increment,d,double,0,DEF,$ < value
AbstractUnivariateStatistic.java,test,values,double[],0,NullArgumentException,$ == null
AbstractUnivariateStatistic.java,test,begin,int,0,NotPositiveException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,NotPositiveException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,NumberIsTooLargeException,begin + $ > values.length
AbstractUnivariateStatistic.java,test,begin,int,0,NumberIsTooLargeException,$ + length > values.length
AbstractUnivariateStatistic.java,test,length,int,0,RET,$ == 0
AbstractUnivariateStatistic.java,test,weights,double[],0,NullArgumentException,$ == null
AbstractUnivariateStatistic.java,test,weights,double[],0,DimensionMismatchException,$.length != values.length
AbstractUnivariateStatistic.java,test,i,int,0,MathIllegalArgumentException,weights[$] < 0
AbstractUnivariateStatistic.java,test,weights,double[],0,MathIllegalArgumentException,$[i] < 0
AbstractUnivariateStatistic.java,test,i,int,0,DEF,weights[$] > 0.0
AbstractUnivariateStatistic.java,test,weights,double[],0,DEF,$[i] > 0.0
MultivariateSummaryStatistics.java,append,i,int,0,DEF,$ > 0
MultivariateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof MultivariateSummaryStatistics == false
MultivariateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof MultivariateSummaryStatistics
MultivariateSummaryStatistics.java,checkEmpty,n,long,0,MathIllegalStateException,$ > 0
MultivariateSummaryStatistics.java,checkDimension,dimension,int,0,DimensionMismatchException,$ != k
AggregateSummaryStatistics.java,aggregate,statistics,Collection<SummaryStatistics>,0,RET,$ == null
AggregateSummaryStatistics.java,aggregate,current,SummaryStatistics,0,DEF,$.getMin() < min
AggregateSummaryStatistics.java,aggregate,current,SummaryStatistics,0,DEF,$.getMax() > max
AggregateSummaryStatistics.java,aggregate,n,long,1,DEF,$ == 0
AggregateSummaryStatistics.java,aggregate,n,long,1,DEF,$ == 1
AggregateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof AggregatingSummaryStatistics == false
AggregateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof AggregatingSummaryStatistics
SummaryStatistics.java,addValue,meanImpl,StorelessUnivariateStatistic,0,DEF,$ != mean
SummaryStatistics.java,addValue,varianceImpl,StorelessUnivariateStatistic,0,DEF,$ != variance
SummaryStatistics.java,addValue,geoMeanImpl,StorelessUnivariateStatistic,0,DEF,$ != geoMean
SummaryStatistics.java,clear,meanImpl,StorelessUnivariateStatistic,0,DEF,$ != mean
SummaryStatistics.java,clear,varianceImpl,StorelessUnivariateStatistic,0,DEF,$ != variance
SummaryStatistics.java,equals,object,Object,0,RET,$ instanceof SummaryStatistics == false
SummaryStatistics.java,equals,object,null,0,RET,$ instanceof SummaryStatistics
SummaryStatistics.java,checkEmpty,n,long,0,MathIllegalStateException,$ > 0
SummaryStatistics.java,copy,source.meanImpl,null,1,DEF,$ instanceof Mean
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.geoMean == source.geoMeanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.max == source.maxImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.mean == source.meanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.min == source.minImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sum == source.sumImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.variance == source.varianceImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumLog == source.sumLogImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumsq == source.sumsqImpl
MannWhitneyUTest.java,ensureDataConformance,x,double[],0,NullArgumentException,$ == null
MannWhitneyUTest.java,ensureDataConformance,y,double[],0,NullArgumentException,$ == null
MannWhitneyUTest.java,ensureDataConformance,x,double[],0,NoDataException,$.length == 0
MannWhitneyUTest.java,ensureDataConformance,y,double[],0,NoDataException,$.length == 0
ChiSquareTest.java,chiSquare,expected,double[],0,DimensionMismatchException,$.length < 2
ChiSquareTest.java,chiSquare,expected,double[],0,DimensionMismatchException,$.length != observed.length
ChiSquareTest.java,chiSquare,sumObserved,double,0,DEF,FastMath.abs(sumExpected - $) > 10E-6
ChiSquareTest.java,chiSquare,sumExpected,double,0,DEF,FastMath.abs($ - sumObserved) > 10E-6
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ <= 0
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ > 0.5
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ <= 0
ChiSquareTest.java,chiSquareTest,alpha,double,0,OutOfRangeException,$ > 0.5
ChiSquareTest.java,chiSquareDataSetsComparison,observed1,long[],0,DimensionMismatchException,$.length < 2
ChiSquareTest.java,chiSquareDataSetsComparison,observed1,long[],0,DimensionMismatchException,$.length != observed2.length
ChiSquareTest.java,chiSquareDataSetsComparison,countSum1,long,0,ZeroException,$ == 0
ChiSquareTest.java,chiSquareDataSetsComparison,countSum2,long,0,ZeroException,$ == 0
ChiSquareTest.java,chiSquareDataSetsComparison,i,int,1,ZeroException,observed1[$] == 0
ChiSquareTest.java,chiSquareDataSetsComparison,observed1,long[],1,ZeroException,$[i] == 0
ChiSquareTest.java,chiSquareDataSetsComparison,observed2,long[],1,ZeroException,$[i] == 0
ChiSquareTest.java,chiSquareDataSetsComparison,i,int,1,ZeroException,observed2[$] == 0
ChiSquareTest.java,chiSquareTestDataSetsComparison,alpha,double,0,OutOfRangeException,$ <= 0
ChiSquareTest.java,chiSquareTestDataSetsComparison,alpha,double,0,OutOfRangeException,$ > 0.5
ChiSquareTest.java,checkArray,in,long[][],0,DimensionMismatchException,$.length < 2
ChiSquareTest.java,checkArray,in,long[][],0,DimensionMismatchException,$[0].length < 2
ChiSquareTest.java,checkPositive,in,double[],0,NotStrictlyPositiveException,$[i] <= 0
ChiSquareTest.java,checkPositive,i,int,0,NotStrictlyPositiveException,in[$] <= 0
ChiSquareTest.java,checkNonNegative,in,long[],0,NotPositiveException,$[i] < 0
ChiSquareTest.java,checkNonNegative,i,int,0,NotPositiveException,in[$] < 0
ChiSquareTest.java,checkNonNegative,in,long[][],0,NotPositiveException,$[i][j] < 0
ChiSquareTest.java,checkNonNegative,i,int,0,NotPositiveException,in[$][j] < 0
ChiSquareTest.java,checkNonNegative,j,int,0,NotPositiveException,in[i][$] < 0
TTest.java,checkSignificanceLevel,alpha,double,0,OutOfRangeException,$ <= 0
TTest.java,checkSignificanceLevel,alpha,double,0,OutOfRangeException,$ > 0.5
TTest.java,checkSampleData,data,double[],0,NullArgumentException,$ == null
TTest.java,checkSampleData,data,double[],0,NumberIsTooSmallException,$.length < 2
TTest.java,checkSampleData,stat,StatisticalSummary,0,NullArgumentException,$ == null
TTest.java,checkSampleData,stat,StatisticalSummary,0,NumberIsTooSmallException,$.getN() < 2
OneWayAnova.java,anovaTest,alpha,double,0,OutOfRangeException,$ <= 0
OneWayAnova.java,anovaTest,alpha,double,0,OutOfRangeException,$ > 0.5
OneWayAnova.java,anovaStats,categoryData,Collection<double[]>,0,NullArgumentException,$ == null
OneWayAnova.java,anovaStats,categoryData,Collection<double[]>,0,DimensionMismatchException,$.size() < 2
OneWayAnova.java,anovaStats,array,double[],0,DimensionMismatchException,$.length <= 1
WilcoxonSignedRankTest.java,ensureDataConformance,x,double[],0,NullArgumentException,$ == null
WilcoxonSignedRankTest.java,ensureDataConformance,y,double[],0,NullArgumentException,$ == null
WilcoxonSignedRankTest.java,ensureDataConformance,x,double[],0,NoDataException,$.length == 0
WilcoxonSignedRankTest.java,ensureDataConformance,y,double[],0,NoDataException,$.length == 0
WilcoxonSignedRankTest.java,ensureDataConformance,y,double[],0,DimensionMismatchException,$.length != x.length
WilcoxonSignedRankTest.java,calculateAbsoluteDifferences,z,double[],0,NullArgumentException,$ == null
WilcoxonSignedRankTest.java,calculateAbsoluteDifferences,z,double[],0,NoDataException,$.length == 0
WilcoxonSignedRankTest.java,wilcoxonSignedRank,i,int,0,DEF,z[$] > 0
WilcoxonSignedRankTest.java,wilcoxonSignedRank,z,double[],0,DEF,$[i] > 0
WilcoxonSignedRankTest.java,calculateExactPValue,i,int,0,DEF,(($ >> j) & 1) == 1
WilcoxonSignedRankTest.java,calculateExactPValue,j,int,0,DEF,((i >> $) & 1) == 1
WilcoxonSignedRankTest.java,calculateExactPValue,rankSum,int,0,DEF,$ >= Wmax
WilcoxonSignedRankTest.java,wilcoxonSignedRankTest,N,int,0,NumberIsTooLargeException,$ > 30
NaturalRanking.java,rank,ranks,IntDoublePair[],1,DEF,Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
NaturalRanking.java,rank,i,int,1,DEF,Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
NaturalRanking.java,rank,tiesTrace,List<Integer>,0,DEF,$.size() > 1
NaturalRanking.java,rank,tiesTrace,List<Integer>,0,DEF,$.size() > 1
NaturalRanking.java,rank,nanStrategy,NaNStrategy,0,DEF,$ == NaNStrategy.FIXED
NaturalRanking.java,restoreNaNs,nanPositions,List<Integer>,0,RET,$.size() == 0
StatUtils.java,sumDifference,n,int,0,DimensionMismatchException,$ != sample2.length
StatUtils.java,sumDifference,n,int,0,NoDataException,$ <= 0
StatUtils.java,varianceDifference,n,int,0,DimensionMismatchException,$ != sample2.length
StatUtils.java,varianceDifference,n,int,0,NumberIsTooSmallException,$ < 2
KMeansPlusPlusClusterer.java,cluster,varianceSum,double,0,DEF,$ <= bestVarianceSum
KMeansPlusPlusClusterer.java,cluster,points,Collection<T>,0,NumberIsTooSmallException,$.size() < k
KMeansPlusPlusClusterer.java,cluster,changes,int,0,RET,$ == 0
KMeansPlusPlusClusterer.java,chooseInitialCenters,i,int,0,DEF,$ != firstPointIndex
KMeansPlusPlusClusterer.java,chooseInitialCenters,sum,double,0,DEF,$ >= r
KMeansPlusPlusClusterer.java,chooseInitialCenters,nextPointIndex,int,0,DEF,$ == -1
KMeansPlusPlusClusterer.java,chooseInitialCenters,nextPointIndex,int,1,DEF,$ >= 0
KMeansPlusPlusClusterer.java,chooseInitialCenters,resultSet,List<Cluster<T>>,0,DEF,$.size() < k
KMeansPlusPlusClusterer.java,getPointFromLargestVarianceCluster,variance,double,0,DEF,$ > maxVariance
KMeansPlusPlusClusterer.java,getPointFromLargestVarianceCluster,selected,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getPointFromLargestNumberCluster,number,int,0,DEF,$ > maxNumber
KMeansPlusPlusClusterer.java,getPointFromLargestNumberCluster,selected,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getFarthestPoint,distance,double,0,DEF,$ > maxDistance
KMeansPlusPlusClusterer.java,getFarthestPoint,selectedCluster,Cluster<T>,0,ConvergenceException,$ == null
KMeansPlusPlusClusterer.java,getNearestCluster,distance,double,0,DEF,$ < minDistance
EuclideanIntegerPoint.java,equals,other,null,0,RET,$ instanceof EuclideanIntegerPoint
EuclideanIntegerPoint.java,equals,point,int[],0,RET,$.length != otherPoint.length
PearsonsCorrelation.java,PearsonsCorrelation,covarianceMatrix,RealMatrix,0,NullArgumentException,$ == null
PearsonsCorrelation.java,getCorrelationPValues,i,int,1,DEF,$ == j
PearsonsCorrelation.java,correlation,xArray,double[],1,DimensionMismatchException,$.length != yArray.length
PearsonsCorrelation.java,correlation,xArray,double[],1,MathIllegalArgumentException,$.length < 2
PearsonsCorrelation.java,checkSufficientData,nRows,int,0,MathIllegalArgumentException,$ < 2
PearsonsCorrelation.java,checkSufficientData,nCols,int,0,MathIllegalArgumentException,$ < 2
StorelessBivariateCovariance.java,getResult,n,double,0,NumberIsTooSmallException,$ < 2
SpearmansCorrelation.java,correlation,xArray,double[],1,DimensionMismatchException,$.length != yArray.length
SpearmansCorrelation.java,correlation,xArray,double[],1,MathIllegalArgumentException,$.length < 2
Covariance.java,covariance,length,int,1,MathIllegalArgumentException,$ != yArray.length
Covariance.java,covariance,length,int,1,MathIllegalArgumentException,$ < 2
Covariance.java,checkSufficientData,nRows,int,0,MathIllegalArgumentException,$ < 2
Covariance.java,checkSufficientData,nCols,int,0,MathIllegalArgumentException,$ < 2
StorelessCovariance.java,increment,length,int,0,DimensionMismatchException,$ != dimension
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ == j
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ < p
MillerUpdatingRegression.java,MillerUpdatingRegression,numberOfVariables,int,0,ModelSpecificationException,$ < 1
MillerUpdatingRegression.java,MillerUpdatingRegression,errorTolerance,double,1,DEF,$ > 0
MillerUpdatingRegression.java,addObservation,x,double[],0,ModelSpecificationException,$.length != nvars
MillerUpdatingRegression.java,addObservation,x,double[],0,ModelSpecificationException,$.length + 1 != nvars
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$ == null
MillerUpdatingRegression.java,addObservations,y,double[],0,ModelSpecificationException,$ == null
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$.length != y.length
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$.length == 0
MillerUpdatingRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$[0].length + 1 > x.length
MillerUpdatingRegression.java,include,w,double,0,RET,$ == 0.0
MillerUpdatingRegression.java,include,xi,double,0,DEF,$ == 0.0
MillerUpdatingRegression.java,include,di,double,1,DEF,$ != 0.0
MillerUpdatingRegression.java,include,tmp,double,0,DEF,FastMath.abs($) > Precision.EPSILON
MillerUpdatingRegression.java,include,di,double,1,DEF,$ != 0.0
MillerUpdatingRegression.java,include,di,double,1,DEF,$ != 0.0
MillerUpdatingRegression.java,smartAdd,_a,double,1,RET,$ > _b
MillerUpdatingRegression.java,smartAdd,_b,double,0,RET,$ > eps
MillerUpdatingRegression.java,smartAdd,_a,double,0,RET,$ > eps
MillerUpdatingRegression.java,regcf,nreq,int,0,ModelSpecificationException,$ < 1
MillerUpdatingRegression.java,singcheck,r,double[],0,DEF,Math.abs($[pos]) * work_sing[row] < temp
MillerUpdatingRegression.java,singcheck,work_sing,double[],0,DEF,Math.abs(r[pos]) * $[row] < temp
MillerUpdatingRegression.java,singcheck,pos,int,0,DEF,Math.abs(r[$]) * work_sing[row] < temp
MillerUpdatingRegression.java,singcheck,row,int,0,DEF,Math.abs(r[pos]) * work_sing[$] < temp
MillerUpdatingRegression.java,singcheck,col,int,0,DEF,work_sing[$] < temp
MillerUpdatingRegression.java,singcheck,work_sing,double[],0,DEF,$[col] < temp
MillerUpdatingRegression.java,cov,row,int,1,DEF,$ == col
MillerUpdatingRegression.java,getPartialCorrelations,in,int,0,RET,$ < -1
MillerUpdatingRegression.java,getPartialCorrelations,in,int,0,RET,$ >= nvars
MillerUpdatingRegression.java,getPartialCorrelations,d,double[],0,DEF,$[in] > 0.0
MillerUpdatingRegression.java,getPartialCorrelations,in,int,0,DEF,d[$] > 0.0
MillerUpdatingRegression.java,getPartialCorrelations,sumxx,double,1,DEF,$ > 0.0
MillerUpdatingRegression.java,getPartialCorrelations,sumyy,double,0,DEF,$ > 0.0
MillerUpdatingRegression.java,vmove,from,int,0,RET,$ == to
MillerUpdatingRegression.java,vmove,from,int,1,DEF,$ < to
MillerUpdatingRegression.java,vmove,m,int,0,DEF,$ > 0
MillerUpdatingRegression.java,reorderRegressors,list,int[],0,RET,$.length < 1
MillerUpdatingRegression.java,reorderRegressors,i,int,0,RET,$ > next
MillerUpdatingRegression.java,getDiagonalOfHatMatrix,row_data,double[],0,RET,$.length > nvars
MillerUpdatingRegression.java,regress,i,int,0,DEF,this.vorder[$] != i
MillerUpdatingRegression.java,regress,j,int,0,DEF,this.vorder[$] == i
MillerUpdatingRegression.java,regress,_i,int,1,DEF,$ > _j
MillerUpdatingRegression.java,regress,i,int,0,DEF,$ > 0
MillerUpdatingRegression.java,regress,iExclude,int,1,DEF,$ > 0
MillerUpdatingRegression.java,regress,variablesToInclude,int[],0,DEF,$[i] > -1
MillerUpdatingRegression.java,regress,i,int,0,DEF,variablesToInclude[$] > -1
MillerUpdatingRegression.java,regress,_i,int,1,DEF,$ > _j
AbstractMultipleLinearRegression.java,newSampleData,data,double[],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,newSampleData,nobs,int,0,NumberIsTooSmallException,$ <= nvars
AbstractMultipleLinearRegression.java,newYSampleData,y,double[],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,newYSampleData,y,double[],0,NoDataException,$.length == 0
AbstractMultipleLinearRegression.java,newXSampleData,x,double[][],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,newXSampleData,x,double[][],0,NoDataException,$.length == 0
AbstractMultipleLinearRegression.java,newXSampleData,x,double[][],0,DimensionMismatchException,$[i].length != nVars
AbstractMultipleLinearRegression.java,newXSampleData,i,int,0,DimensionMismatchException,x[$].length != nVars
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,y,double[],0,NullArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,DimensionMismatchException,$.length != y.length
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,NoDataException,$.length == 0
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,MathIllegalArgumentException,$[0].length + 1 > x.length
AbstractMultipleLinearRegression.java,validateCovarianceData,x,double[][],0,DimensionMismatchException,$.length != covariance.length
AbstractMultipleLinearRegression.java,validateCovarianceData,covariance,double[][],0,NonSquareMatrixException,$.length > 0
SimpleRegression.java,addData,n,long,1,DEF,$ == 0
SimpleRegression.java,removeData,n,long,0,DEF,$ > 0
SimpleRegression.java,addData,data,double[][],0,ModelSpecificationException,$[i].length < 2
SimpleRegression.java,addData,i,int,0,ModelSpecificationException,data[$].length < 2
SimpleRegression.java,addObservation,x,double[],0,ModelSpecificationException,$ == null
SimpleRegression.java,addObservation,x,double[],0,ModelSpecificationException,$.length == 0
SimpleRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$ == null
SimpleRegression.java,addObservations,y,double[],0,ModelSpecificationException,$ == null
SimpleRegression.java,addObservations,x,double[][],0,ModelSpecificationException,$.length != y.length
SimpleRegression.java,addObservations,x,double[][],0,DEF,$[i] == null
SimpleRegression.java,addObservations,i,int,0,DEF,x[$] == null
SimpleRegression.java,addObservations,x,double[][],0,DEF,$[i].length == 0
SimpleRegression.java,addObservations,i,int,0,DEF,x[$].length == 0
SimpleRegression.java,getSlope,n,long,0,RET,$ < 2
SimpleRegression.java,getTotalSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getXSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getMeanSquareError,n,long,0,RET,$ < 3
SimpleRegression.java,getR,b1,double,0,DEF,$ < 0
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,OutOfRangeException,$ >= 1
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,OutOfRangeException,$ <= 0
SimpleRegression.java,regress,n,long,0,NoDataException,$ < 3
SimpleRegression.java,regress,sumXX,double,1,RET,FastMath.abs( $ ) > Precision.SAFE_MIN
SimpleRegression.java,regress,n,long,0,NoDataException,$ < 2
SimpleRegression.java,regress,variablesToInclude,int[],0,MathIllegalArgumentException,$ == null
SimpleRegression.java,regress,variablesToInclude,int[],0,MathIllegalArgumentException,$.length == 0
SimpleRegression.java,regress,variablesToInclude,int[],0,ModelSpecificationException,$.length > 2
SimpleRegression.java,regress,variablesToInclude,int[],0,ModelSpecificationException,$.length > 1
SimpleRegression.java,regress,variablesToInclude,int[],1,OutOfRangeException:RET,$.length == 2
SimpleRegression.java,regress,variablesToInclude,int[],1,ModelSpecificationException,$[0] == 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 0
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[1] != 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 0
SimpleRegression.java,regress,variablesToInclude,int[],1,RET,$[0] == 0
SimpleRegression.java,regress,variablesToInclude,int[],0,RET,$[0] == 1
SimpleRegression.java,regress,variablesToInclude,int[],0,OutOfRangeException,$[0] != 0
GLSMultipleLinearRegression.java,getOmegaInverse,OmegaInverse,RealMatrix,0,DEF,$ == null
RegressionResults.java,RegressionResults,rank,int,0,DEF,$ > 0
RegressionResults.java,getParameterEstimate,parameters,double[],0,RET,$ == null
RegressionResults.java,getParameterEstimate,index,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getStdErrorOfEstimate,parameters,double[],0,RET,$ == null
RegressionResults.java,getStdErrorOfEstimate,index,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getStdErrorOfEstimate,var,double,0,RET,$ > Double.MIN_VALUE
RegressionResults.java,getStdErrorOfEstimates,parameters,double[],0,RET,$ == null
RegressionResults.java,getStdErrorOfEstimates,var,double,0,DEF,$ > Double.MIN_VALUE
RegressionResults.java,getCovarianceOfParameters,parameters,double[],0,RET,$ == null
RegressionResults.java,getCovarianceOfParameters,i,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getCovarianceOfParameters,j,int,0,OutOfRangeException,$ < 0
RegressionResults.java,getVcvElement,i,int,1,RET,$ == j
RegressionResults.java,getVcvElement,i,int,1,RET,$ > j
Frequency.java,addValue,v,null,0,DEF,$ instanceof Integer
Frequency.java,addValue,count,Long,1,DEF,$ == null
Frequency.java,getCount,v,null,0,RET,$ instanceof Integer
Frequency.java,getCount,count,Long,0,DEF,$ != null
Frequency.java,getPct,sumFreq,long,0,RET,$ == 0
Frequency.java,getCumFreq,v,null,0,RET,$ instanceof Integer
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,DEF,$ == null
Frequency.java,getCumFreq,value,Long,0,DEF,$ != null
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,RET,$.compare(v, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,v,Comparable<>,0,RET,c.compare($, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,freqTable,TreeMap<Comparable<?>,Long>,0,RET,c.compare(v, $.firstKey()) < 0
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,RET,$.compare(v, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,v,Comparable<>,0,RET,c.compare($, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,freqTable,TreeMap<Comparable<?>,Long>,0,RET,c.compare(v, $.lastKey()) >= 0
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,1,DEF,$.compare(v, nextValue) > 0
Frequency.java,getCumFreq,v,Comparable<>,1,DEF,c.compare($, nextValue) > 0
Frequency.java,getCumFreq,nextValue,Comparable<>,1,DEF,c.compare(v, $) > 0
Frequency.java,getCumPct,sumFreq,long,0,RET,$ == 0
Frequency.java,equals,obj,null,0,RET,$ instanceof Frequency
Frequency.java,equals,freqTable,TreeMap<Comparable<?>,Long>,1,RET,$ == null
Frequency.java,equals,other,Frequency,0,RET,$.freqTable != null
KalmanFilter.java,KalmanFilter,processModel,ProcessModel,1,DEF,$.getControlMatrix() == null
KalmanFilter.java,KalmanFilter,processModel,ProcessModel,1,DEF,$.getInitialStateEstimate() == null
KalmanFilter.java,KalmanFilter,processModel,ProcessModel,1,DEF,$.getInitialErrorCovariance() == null
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$ != null
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() > 0
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() > 0
KalmanFilter.java,KalmanFilter,controlMatrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
KalmanFilter.java,KalmanFilter,measNoise,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
KalmanFilter.java,predict,u,RealVector,0,DimensionMismatchException,$ != null
KalmanFilter.java,predict,u,RealVector,0,DEF,$ != null
TriangularDistribution.java,TriangularDistribution,a,double,0,NumberIsTooLargeException,$ >= b
TriangularDistribution.java,TriangularDistribution,c,double,0,NumberIsTooSmallException,$ < a
TriangularDistribution.java,TriangularDistribution,c,double,0,NumberIsTooLargeException,$ > b
TriangularDistribution.java,density,x,double,0,RET,$ < a
TriangularDistribution.java,density,a,double,0,RET,$ <= x
TriangularDistribution.java,density,x,double,0,RET,$ < c
TriangularDistribution.java,density,x,double,0,RET,$ == c
TriangularDistribution.java,density,c,double,0,RET,$ < x
TriangularDistribution.java,density,x,double,0,RET,$ <= b
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ < a
TriangularDistribution.java,cumulativeProbability,a,double,0,RET,$ <= x
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ < c
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ == c
TriangularDistribution.java,cumulativeProbability,c,double,0,RET,$ < x
TriangularDistribution.java,cumulativeProbability,x,double,0,RET,$ <= b
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
TriangularDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
ZipfDistribution.java,ZipfDistribution,numberOfElements,int,0,NotStrictlyPositiveException,$ <= 0
ZipfDistribution.java,ZipfDistribution,exponent,double,0,NotStrictlyPositiveException,$ <= 0
ZipfDistribution.java,probability,x,int,0,RET,$ <= 0
ZipfDistribution.java,probability,x,int,0,RET,$ > numberOfElements
ZipfDistribution.java,cumulativeProbability,x,int,1,RET,$ <= 0
ZipfDistribution.java,cumulativeProbability,x,int,0,RET,$ >= numberOfElements
HypergeometricDistribution.java,HypergeometricDistribution,populationSize,int,0,NotStrictlyPositiveException,$ <= 0
HypergeometricDistribution.java,HypergeometricDistribution,numberOfSuccesses,int,0,NotPositiveException,$ < 0
HypergeometricDistribution.java,HypergeometricDistribution,sampleSize,int,0,NotPositiveException,$ < 0
HypergeometricDistribution.java,HypergeometricDistribution,numberOfSuccesses,int,0,NumberIsTooLargeException,$ > populationSize
HypergeometricDistribution.java,HypergeometricDistribution,sampleSize,int,0,NumberIsTooLargeException,$ > populationSize
WeibullDistribution.java,WeibullDistribution,alpha,double,0,NotStrictlyPositiveException,$ <= 0
WeibullDistribution.java,WeibullDistribution,beta,double,0,NotStrictlyPositiveException,$ <= 0
WeibullDistribution.java,density,x,double,0,RET,$ < 0
WeibullDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ < 0.0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ > 1.0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
WeibullDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
NormalDistribution.java,NormalDistribution,sd,double,0,NotStrictlyPositiveException,$ <= 0
NormalDistribution.java,cumulativeProbability,x0,double,0,NumberIsTooLargeException,$ > x1
CauchyDistribution.java,CauchyDistribution,scale,double,0,NotStrictlyPositiveException,$ <= 0
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ < 0
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ > 1
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
CauchyDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
TDistribution.java,TDistribution,degreesOfFreedom,double,0,NotStrictlyPositiveException,$ <= 0
TDistribution.java,cumulativeProbability,x,double,1,DEF,$ == 0
TDistribution.java,cumulativeProbability,x,double,1,DEF,$ < 0.0
TDistribution.java,getNumericalMean,df,double,0,RET,$ > 1
TDistribution.java,getNumericalVariance,df,double,0,RET,$ > 2
TDistribution.java,getNumericalVariance,df,double,0,RET,$ > 1
TDistribution.java,getNumericalVariance,df,double,0,RET,$ <= 2
LogNormalDistribution.java,LogNormalDistribution,shape,double,0,NotStrictlyPositiveException,$ <= 0
LogNormalDistribution.java,density,x,double,0,RET,$ <= 0
LogNormalDistribution.java,cumulativeProbability,x,double,0,RET,$ <= 0
LogNormalDistribution.java,cumulativeProbability,x0,double,0,NumberIsTooLargeException,$ > x1
LogNormalDistribution.java,cumulativeProbability,x0,double,0,RET,$ <= 0
LogNormalDistribution.java,cumulativeProbability,x1,double,0,RET,$ <= 0
PoissonDistribution.java,PoissonDistribution,p,double,0,NotStrictlyPositiveException,$ <= 0
PoissonDistribution.java,probability,x,int,1,DEF,$ < 0
PoissonDistribution.java,probability,x,int,1,DEF,$ == Integer.MAX_VALUE
PoissonDistribution.java,probability,x,int,1,DEF,$ == 0
PoissonDistribution.java,cumulativeProbability,x,int,0,RET,$ < 0
PoissonDistribution.java,cumulativeProbability,x,int,0,RET,$ == Integer.MAX_VALUE
BetaDistribution.java,density,x,double,1,RET,$ < 0
BetaDistribution.java,density,x,double,1,RET,$ > 1
BetaDistribution.java,density,x,double,1,NumberIsTooSmallException:RET,$ == 0
BetaDistribution.java,density,alpha,double,0,NumberIsTooSmallException,$ < 1
BetaDistribution.java,density,x,double,1,NumberIsTooSmallException:RET,$ == 1
BetaDistribution.java,density,beta,double,0,NumberIsTooSmallException,$ < 1
BetaDistribution.java,cumulativeProbability,x,double,1,RET,$ <= 0
BetaDistribution.java,cumulativeProbability,x,double,1,RET,$ >= 1
UniformIntegerDistribution.java,UniformIntegerDistribution,lower,int,0,NumberIsTooLargeException,$ >= upper
UniformIntegerDistribution.java,probability,x,int,0,RET,$ < lower
UniformIntegerDistribution.java,probability,x,int,0,RET,$ > upper
UniformIntegerDistribution.java,cumulativeProbability,x,int,0,RET,$ < lower
UniformIntegerDistribution.java,cumulativeProbability,x,int,0,RET,$ > upper
KolmogorovSmirnovDistribution.java,KolmogorovSmirnovDistribution,n,int,0,NotStrictlyPositiveException,$ <= 0
KolmogorovSmirnovDistribution.java,cdf,d,double,1,RET,$ <= ninvhalf
KolmogorovSmirnovDistribution.java,cdf,ninvhalf,double,1,RET,$ < d
KolmogorovSmirnovDistribution.java,cdf,d,double,1,RET,$ <= ninv
KolmogorovSmirnovDistribution.java,cdf,ninv,double,1,RET,1 - $ <= d
KolmogorovSmirnovDistribution.java,cdf,d,double,1,RET,$ < 1
KolmogorovSmirnovDistribution.java,createH,hDouble,double,0,NumberIsTooLargeException,$ >= 1
KolmogorovSmirnovDistribution.java,createH,i,int,1,DEF,$ - j + 1 < 0
KolmogorovSmirnovDistribution.java,createH,j,int,1,DEF,i - $ + 1 < 0
KolmogorovSmirnovDistribution.java,createH,h,BigFraction,0,DEF,$.compareTo(BigFraction.ONE_HALF) == 1
KolmogorovSmirnovDistribution.java,createH,i,int,0,DEF,$ - j + 1 > 0
KolmogorovSmirnovDistribution.java,createH,j,int,0,DEF,i - $ + 1 > 0
AbstractRealDistribution.java,cumulativeProbability,x0,double,0,NumberIsTooLargeException,$ > x1
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0.0
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1.0
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 0.0
AbstractRealDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 1.0
AbstractRealDistribution.java,inverseCumulativeProbability,lowerBound,double,0,DEF,$ == Double.NEGATIVE_INFINITY
AbstractRealDistribution.java,inverseCumulativeProbability,upperBound,double,0,DEF,$ == Double.POSITIVE_INFINITY
AbstractRealDistribution.java,inverseCumulativeProbability,dx,double,0,RET,cumulativeProbability(x - $) == px
AbstractRealDistribution.java,inverseCumulativeProbability,x,double,0,RET,cumulativeProbability($ - dx) == px
AbstractRealDistribution.java,inverseCumulativeProbability,midPoint,double,1,DEF,cumulativeProbability($) < px
AbstractRealDistribution.java,sample,sampleSize,int,0,NotStrictlyPositiveException,$ <= 0
GammaDistribution.java,GammaDistribution,alpha,double,0,NotStrictlyPositiveException,$ <= 0
GammaDistribution.java,GammaDistribution,beta,double,0,NotStrictlyPositiveException,$ <= 0
GammaDistribution.java,density,x,double,0,RET,$ < 0
GammaDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0
PascalDistribution.java,PascalDistribution,r,int,0,NotStrictlyPositiveException,$ <= 0
PascalDistribution.java,PascalDistribution,p,double,0,OutOfRangeException,$ < 0
PascalDistribution.java,PascalDistribution,p,double,0,OutOfRangeException,$ > 1
PascalDistribution.java,probability,x,int,1,DEF,$ < 0
PascalDistribution.java,cumulativeProbability,x,int,1,DEF,$ < 0
UniformRealDistribution.java,UniformRealDistribution,lower,double,0,NumberIsTooLargeException,$ >= upper
UniformRealDistribution.java,density,x,double,0,RET,$ < lower
UniformRealDistribution.java,density,x,double,0,RET,$ > upper
UniformRealDistribution.java,cumulativeProbability,x,double,0,RET,$ <= lower
UniformRealDistribution.java,cumulativeProbability,x,double,0,RET,$ >= upper
FDistribution.java,FDistribution,numeratorDegreesOfFreedom,double,0,NotStrictlyPositiveException,$ <= 0
FDistribution.java,FDistribution,denominatorDegreesOfFreedom,double,0,NotStrictlyPositiveException,$ <= 0
FDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0
FDistribution.java,getNumericalMean,denominatorDF,double,0,RET,$ > 2
FDistribution.java,calculateNumericalVariance,denominatorDF,double,0,RET,$ > 4
ExponentialDistribution.java,ExponentialDistribution,mean,double,0,NotStrictlyPositiveException,$ <= 0
ExponentialDistribution.java,density,x,double,0,RET,$ < 0
ExponentialDistribution.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
ExponentialDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ < 0.0
ExponentialDistribution.java,inverseCumulativeProbability,p,double,1,OutOfRangeException,$ > 1.0
ExponentialDistribution.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1.0
AbstractIntegerDistribution.java,cumulativeProbability,x1,int,0,NumberIsTooLargeException,$ < x0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ < 0.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,OutOfRangeException,$ > 1.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 0.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,lower,int,1,RET,$ == Integer.MIN_VALUE
AbstractIntegerDistribution.java,inverseCumulativeProbability,lower,int,0,RET,checkedCumulativeProbability($) >= p
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,RET,$ == 1.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,tmp,double,0,DEF,$ > lower
AbstractIntegerDistribution.java,inverseCumulativeProbability,tmp,double,0,DEF,$ < upper
AbstractIntegerDistribution.java,solveInverseCumulativeProbability,xm,int,0,DEF,$ < lower
AbstractIntegerDistribution.java,solveInverseCumulativeProbability,xm,int,0,DEF,$ > upper
AbstractIntegerDistribution.java,solveInverseCumulativeProbability,pm,double,1,DEF,$ >= p
AbstractIntegerDistribution.java,sample,sampleSize,int,0,NotStrictlyPositiveException,$ <= 0
BinomialDistribution.java,BinomialDistribution,trials,int,0,NotPositiveException,$ < 0
BinomialDistribution.java,BinomialDistribution,p,double,0,OutOfRangeException,$ < 0
BinomialDistribution.java,BinomialDistribution,p,double,0,OutOfRangeException,$ > 1
BinomialDistribution.java,probability,x,int,1,DEF,$ < 0
BinomialDistribution.java,probability,x,int,1,DEF,$ > numberOfTrials
BinomialDistribution.java,cumulativeProbability,x,int,1,DEF,$ < 0
BinomialDistribution.java,cumulativeProbability,x,int,1,DEF,$ >= numberOfTrials
SaddlePointExpansion.java,getStirlingError,z,double,1,DEF,$ < 15.0
SaddlePointExpansion.java,getStirlingError,z2,double,1,DEF,FastMath.floor($) == z2
SaddlePointExpansion.java,logBinomialProbability,x,int,1,DEF,$ == 0
SaddlePointExpansion.java,logBinomialProbability,p,double,1,DEF,$ < 0.1
SaddlePointExpansion.java,logBinomialProbability,x,int,1,DEF,$ == n
SaddlePointExpansion.java,logBinomialProbability,q,double,1,DEF,$ < 0.1
FastFourierTransformer.java,bitReversalShuffle2,i,int,0,DEF,$ < j
FastFourierTransformer.java,normalizeTransformedData,type,TransformType,0,DEF,$ == TransformType.INVERSE
FastFourierTransformer.java,transformInPlace,dataRI,double[][],0,DimensionMismatchException,$.length != 2
FastFourierTransformer.java,transformInPlace,dataR,double[],0,DimensionMismatchException,$.length != dataI.length
FastFourierTransformer.java,transformInPlace,n,int,1,RET,$ == 1
FastFourierTransformer.java,transformInPlace,n,int,0,RET,$ == 2
FastFourierTransformer.java,transformInPlace,type,TransformType,1,DEF,$ == TransformType.INVERSE
FastFourierTransformer.java,transformInPlace,type,TransformType,0,DEF,$ == TransformType.INVERSE
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == dimensionSize.length
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == d
FastFourierTransformer.java,get,vector,int[],0,DimensionMismatchException:RET,$ == null
FastFourierTransformer.java,get,dimensionSize,int[],0,DimensionMismatchException,$.length > 0
FastFourierTransformer.java,get,vector,int[],0,DimensionMismatchException,$.length != dimensionSize.length
FastFourierTransformer.java,set,vector,int[],0,DimensionMismatchException:RET,$ == null
FastFourierTransformer.java,set,dimensionSize,int[],0,DimensionMismatchException,$.length > 0
FastFourierTransformer.java,set,vector,int[],0,DimensionMismatchException,$.length != dimensionSize.length
FastHadamardTransformer.java,transform,type,TransformType,0,RET,$ == TransformType.FORWARD
FastCosineTransformer.java,transform,type,TransformType,0,RET,$ == TransformType.FORWARD
FastCosineTransformer.java,transform,normalization,DctNormalization,0,RET,$ == DctNormalization.ORTHOGONAL_DCT_I
FastCosineTransformer.java,transform,normalization,DctNormalization,1,DEF,$ == DctNormalization.ORTHOGONAL_DCT_I
FastCosineTransformer.java,fct,n,int,0,RET,$ == 1
FastSineTransformer.java,transform,normalization,DstNormalization,0,RET,$ == DstNormalization.ORTHOGONAL_DST_I
FastSineTransformer.java,transform,type,TransformType,0,RET,$ == TransformType.FORWARD
FastSineTransformer.java,fst,f,double[],0,MathIllegalArgumentException,$[0] != 0.0
FastSineTransformer.java,fst,n,int,0,RET,$ == 1
TransformUtils.java,createComplexArray,dataRI,double[][],0,DimensionMismatchException,$.length != 2
TransformUtils.java,createComplexArray,dataR,double[],0,DimensionMismatchException,$.length != dataI.length
TransformUtils.java,exactLog2,index,int,0,MathIllegalArgumentException,$ < 0
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,source.substring($, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,endIndex,int,0,DEF,source.substring(startIndex, $).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,source,String,0,DEF,$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,sb,StringBuilder,0,DEF,source.substring(startIndex, endIndex).compareTo($.toString()) == 0
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,$ == endIndex
CompositeFormat.java,parseNumber,number,Number,0,DEF,$ != null
CompositeFormat.java,parseFixedstring,startIndex,int,0,RET,source.substring($, endIndex).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,endIndex,int,0,RET,source.substring(startIndex, $).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,expected,String,0,RET,source.substring(startIndex, endIndex).compareTo($) != 0
CompositeFormat.java,parseFixedstring,source,String,0,RET,$.substring(startIndex, endIndex).compareTo(expected) != 0
BigReal.java,equals,other,null,0,RET,$ instanceof BigReal
ResizableDoubleArray.java,ResizableDoubleArray,initialArray,double[],1,DEF,$ == null
ResizableDoubleArray.java,addElement,startIndex,int,0,DEF,($ + numElements) > internalArray.length
ResizableDoubleArray.java,addElement,numElements,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,addElementRolling,startIndex,int,0,DEF,($ + (numElements + 1)) > internalArray.length
ResizableDoubleArray.java,addElementRolling,numElements,int,0,DEF,(startIndex + ($ + 1)) > internalArray.length
ResizableDoubleArray.java,substituteMostRecentElement,numElements,int,0,MathIllegalStateException,$ < 1
ResizableDoubleArray.java,checkContractExpand,contraction,float,0,MathIllegalArgumentException,$ < expansion
ResizableDoubleArray.java,checkContractExpand,contraction,float,0,MathIllegalArgumentException,$ <= 1.0
ResizableDoubleArray.java,checkContractExpand,expansion,float,0,MathIllegalArgumentException,$ <= 1.0
ResizableDoubleArray.java,discardExtremeElements,i,int,1,MathIllegalArgumentException,$ > numElements
ResizableDoubleArray.java,discardExtremeElements,i,int,1,MathIllegalArgumentException,$ < 0
ResizableDoubleArray.java,expand,expansionMode,int,1,DEF,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,getElement,index,int,1,ArrayIndexOutOfBoundsException,$ >= numElements
ResizableDoubleArray.java,getElement,index,int,1,RET,$ >= 0
ResizableDoubleArray.java,setElement,index,int,0,ArrayIndexOutOfBoundsException,$ < 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ + 1 > numElements
ResizableDoubleArray.java,setElement,startIndex,int,0,DEF,($ + index) >= internalArray.length
ResizableDoubleArray.java,setElement,index,int,0,DEF,(startIndex + $) >= internalArray.length
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,MathIllegalArgumentException,$ != MULTIPLICATIVE_MODE
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,MathIllegalArgumentException,$ != ADDITIVE_MODE
ResizableDoubleArray.java,setInitialCapacity,initialCapacity,int,1,DEF,$ > 0
ResizableDoubleArray.java,setNumElements,i,int,0,MathIllegalArgumentException,$ < 0
ResizableDoubleArray.java,setNumElements,startIndex,int,0,DEF,($ + i) > internalArray.length
ResizableDoubleArray.java,setNumElements,i,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,shouldContract,expansionMode,int,1,RET,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,equals,object,Object,0,RET,$ instanceof ResizableDoubleArray == false
ResizableDoubleArray.java,equals,object,null,0,RET,$ instanceof ResizableDoubleArray
OpenIntToFieldHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToFieldHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToFieldHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToFieldHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToFieldHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToFieldHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToFieldHashMap.java,key,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToFieldHashMap.java,key,current,int,0,NoSuchElementException,$ < 0
OpenIntToFieldHashMap.java,value,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToFieldHashMap.java,value,current,int,0,NoSuchElementException,$ < 0
OpenIntToFieldHashMap.java,advance,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToFieldHashMap.java,advance,current,int,0,NoSuchElementException,$ < 0
FastMathCalc.java,buildSinCosTables,i,int,1,DEF,($ & 1) == 0
FastMathCalc.java,slowCos,i,int,0,DEF,($ & 1) != 0
FastMathCalc.java,slowCos,i,int,0,DEF,($ & 2) != 0
FastMathCalc.java,slowCos,result,double[],0,DEF,$ != null
FastMathCalc.java,slowSin,i,int,0,DEF,($ & 1) == 0
FastMathCalc.java,slowSin,i,int,0,DEF,($ & 2) != 0
FastMathCalc.java,slowSin,result,double[],0,DEF,$ != null
FastMathCalc.java,slowexp,result,double[],0,DEF,$ != null
FastMathCalc.java,split,d,double,1,DEF,$ < 8e298
FastMathCalc.java,split,d,double,1,DEF,$ > -8e298
FastMathCalc.java,resplit,c,double,1,DEF,$ < 8e298
FastMathCalc.java,resplit,c,double,1,DEF,$ > -8e298
FastMathCalc.java,splitReciprocal,in,double[],0,DEF,$[0] == 0.0
FastMathCalc.java,expint,p,int,0,DEF,($ & 1) != 0
FastMathCalc.java,expint,result,double[],0,DEF,$ != null
FastMathCalc.java,format,d,double,1,RET,$ != d
FastMathCalc.java,checkLen,expectedLen,int,0,DimensionMismatchException,$ != actual
Precision.java,compareTo,x,double,0,RET,$ < y
Precision.java,compareTo,x,double,0,RET,$ < y
Precision.java,equals,xInt,int,0,DEF,$ < 0
Precision.java,equals,yInt,int,0,DEF,$ < 0
Precision.java,equals,xInt,long,0,DEF,$ < 0
Precision.java,equals,yInt,long,0,DEF,$ < 0
Precision.java,roundUnscaled,sign,double,1,DEF,$ == -1
Precision.java,roundUnscaled,sign,double,1,DEF,$ == -1
Precision.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
Precision.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
Precision.java,roundUnscaled,fraction,double,1,DEF,$ < 0.5
Precision.java,roundUnscaled,fraction,double,1,DEF,$ >= 0.5
ContinuedFraction.java,evaluate,scale,double,0,ConvergenceException,$ <= 0
ContinuedFraction.java,evaluate,a,double,1,DEF,$ != 0.0
ContinuedFraction.java,evaluate,a,double,1,DEF,$ > b
ContinuedFraction.java,evaluate,b,double,0,DEF,$ != 0
ContinuedFraction.java,evaluate,n,int,0,MaxCountExceededException,$ >= maxIterations
MathUtils.java,copySign,magnitude,byte,1,RET,$ >= 0
MathUtils.java,copySign,sign,byte,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,byte,1,RET,$ < 0
MathUtils.java,copySign,sign,byte,1,RET,$ < 0
MathUtils.java,copySign,sign,byte,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,byte,1,MathArithmeticException,$ == Byte.MIN_VALUE
MathUtils.java,copySign,magnitude,short,1,RET,$ >= 0
MathUtils.java,copySign,sign,short,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,short,1,RET,$ < 0
MathUtils.java,copySign,sign,short,1,RET,$ < 0
MathUtils.java,copySign,sign,short,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,short,1,MathArithmeticException,$ == Short.MIN_VALUE
MathUtils.java,copySign,magnitude,int,1,RET,$ >= 0
MathUtils.java,copySign,sign,int,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,int,1,RET,$ < 0
MathUtils.java,copySign,sign,int,1,RET,$ < 0
MathUtils.java,copySign,sign,int,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,int,1,MathArithmeticException,$ == Integer.MIN_VALUE
MathUtils.java,copySign,magnitude,long,1,RET,$ >= 0
MathUtils.java,copySign,sign,long,1,RET,$ >= 0
MathUtils.java,copySign,magnitude,long,1,RET,$ < 0
MathUtils.java,copySign,sign,long,1,RET,$ < 0
MathUtils.java,copySign,sign,long,1,MathArithmeticException,$ >= 0
MathUtils.java,copySign,magnitude,long,1,MathArithmeticException,$ == Long.MIN_VALUE
MathUtils.java,checkNotNull,o,Object,0,NullArgumentException,$ == null
MathUtils.java,checkNotNull,o,Object,0,NullArgumentException,$ == null
MathArrays.java,isMonotonic,comp,int,0,RET,$ >= 0
MathArrays.java,isMonotonic,comp,int,0,RET,$ > 0
MathArrays.java,isMonotonic,comp,int,0,RET,$ >= 0
MathArrays.java,isMonotonic,comp,int,0,RET,$ > 0
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] <= previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] <= previous
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] < previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] < previous
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] >= previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] >= previous
MathArrays.java,checkOrder,val,double[],0,DEF,$[index] > previous
MathArrays.java,checkOrder,index,int,0,DEF,val[$] > previous
MathArrays.java,checkOrder,index,int,0,RET,$ == max
MathArrays.java,safeNorm,xabs,double,1,DEF,$ < rdwarf
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > agiant
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > rdwarf
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > x1max
MathArrays.java,safeNorm,xabs,double,1,DEF,$ > x3max
MathArrays.java,safeNorm,xabs,double,0,DEF,$ != 0
MathArrays.java,safeNorm,s1,double,1,DEF,$ != 0
MathArrays.java,safeNorm,s2,double,1,DEF,$ == 0
MathArrays.java,safeNorm,s2,double,1,DEF,$ >= x3max
MathArrays.java,sortInPlace,x,double[],0,NullArgumentException,$ == null
MathArrays.java,sortInPlace,y,double[],0,NullArgumentException,$ == null
MathArrays.java,sortInPlace,y,double[],0,DimensionMismatchException,$.length != len
MathArrays.java,linearCombination,len,int,0,DimensionMismatchException,$ != b.length
MathArrays.java,equals,x,float[],0,RET,$ == null
MathArrays.java,equals,y,float[],0,RET,$ == null
MathArrays.java,equals,x,float[],0,RET,$.length != y.length
MathArrays.java,equalsIncludingNaN,x,float[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,y,float[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,x,float[],0,RET,$.length != y.length
MathArrays.java,equals,x,double[],0,RET,$ == null
MathArrays.java,equals,y,double[],0,RET,$ == null
MathArrays.java,equals,x,double[],0,RET,$.length != y.length
MathArrays.java,equalsIncludingNaN,x,double[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,y,double[],0,RET,$ == null
MathArrays.java,equalsIncludingNaN,x,double[],0,RET,$.length != y.length
MathArrays.java,normalizeArray,sum,double,0,MathArithmeticException,$ == 0
DefaultTransformer.java,transform,o,Object,0,NullArgumentException,$ == null
DefaultTransformer.java,transform,o,null,0,RET,$ instanceof Number
DefaultTransformer.java,equals,other,Object,0,RET,$ == null
MultidimensionalCounter.java,MultidimensionalCounter,tS,int,0,NotStrictlyPositiveException,$ <= 0
MultidimensionalCounter.java,getCounts,index,int,0,OutOfRangeException,$ < 0
MultidimensionalCounter.java,getCounts,index,int,0,OutOfRangeException,$ >= totalSize
MultidimensionalCounter.java,getCount,c,int[],0,DimensionMismatchException,$.length != dimension
MultidimensionalCounter.java,getCount,index,int,0,OutOfRangeException,$ < 0
Decimal64.java,equals,obj,null,0,RET,$ instanceof Decimal64
Incrementor.java,incrementCount,count,int,0,DEF,++$ > maximalCount
FastMath.java,doubleHighPart,d,double,0,RET,$ > -Precision.SAFE_MIN
FastMath.java,doubleHighPart,d,double,0,RET,$ < Precision.SAFE_MIN
FastMath.java,cosh,x,double,0,RET,$ != x
FastMath.java,cosh,x,double,0,RET,$ > 20.0
FastMath.java,cosh,x,double,0,RET,$ < -20
FastMath.java,cosh,x,double,0,DEF,$ < 0.0
FastMath.java,sinh,x,double,0,RET,$ != x
FastMath.java,sinh,x,double,0,RET,$ > 20.0
FastMath.java,sinh,x,double,0,RET,$ < -20
FastMath.java,sinh,x,double,0,RET,$ == 0
FastMath.java,sinh,x,double,0,DEF,$ < 0.0
FastMath.java,sinh,x,double,1,DEF,$ > 0.25
FastMath.java,tanh,x,double,0,RET,$ != x
FastMath.java,tanh,x,double,0,RET,$ > 20.0
FastMath.java,tanh,x,double,0,RET,$ < -20
FastMath.java,tanh,x,double,0,RET,$ == 0
FastMath.java,tanh,x,double,0,DEF,$ < 0.0
FastMath.java,tanh,x,double,1,DEF,$ >= 0.5
FastMath.java,asinh,a,double,0,DEF,$ < 0
FastMath.java,asinh,a,double,1,DEF,$ > 0.167
FastMath.java,asinh,a,double,1,DEF,$ > 0.097
FastMath.java,asinh,a,double,1,DEF,$ > 0.036
FastMath.java,asinh,a,double,1,DEF,$ > 0.0036
FastMath.java,atanh,a,double,0,DEF,$ < 0
FastMath.java,atanh,a,double,1,DEF,$ > 0.15
FastMath.java,atanh,a,double,1,DEF,$ > 0.087
FastMath.java,atanh,a,double,1,DEF,$ > 0.031
FastMath.java,atanh,a,double,1,DEF,$ > 0.003
FastMath.java,exp,x,double,1,RET,$ < 0.0
FastMath.java,exp,intVal,int,0,RET,$ > 746
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,intVal,int,0,RET,$ > 709
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,intVal,int,0,RET,$ == 709
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,intVal,int,0,RET,$ > 709
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,extra,double,1,DEF,$ != 0.0
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,expm1,x,double,0,RET,$ != x
FastMath.java,expm1,x,double,0,RET,$ == 0.0
FastMath.java,expm1,x,double,0,RET,$ <= -1.0
FastMath.java,expm1,x,double,0,RET,$ >= 1.0
FastMath.java,expm1,x,double,1,RET,$ > 0.0
FastMath.java,expm1,x,double,0,DEF,$ < 0.0
FastMath.java,expm1,hiPrecOut,double[],0,DEF,$ != null
FastMath.java,log,x,double,0,RET,$==0
FastMath.java,log,bits,long,0,RET,($ & 0x8000000000000000L) != 0
FastMath.java,log,x,double,0,RET,$ != x
FastMath.java,log,x,double,0,RET,$ != 0.0
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log,bits,long,0,RET,($ & 0x7ff0000000000000L) == 0
FastMath.java,log,x,double,0,RET,$ == 0
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log,exp,int,0,RET,$ == -1
FastMath.java,log,exp,int,0,RET,$ == 0
FastMath.java,log,x,double,0,RET,$ < 1.01
FastMath.java,log,x,double,0,RET,$ > 0.99
FastMath.java,log,hiPrec,double[],0,RET,$ == null
FastMath.java,log,hiPrec,double[],1,DEF,$ != null
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log1p,x,double,0,RET,$ == -1
FastMath.java,log1p,x,double,0,RET,$ > 0
FastMath.java,log1p,x,double,0,RET,1/$ == 0
FastMath.java,log1p,x,double,0,RET,$>1e-6
FastMath.java,log1p,x,double,0,RET,$<-1e-6
FastMath.java,pow,y,double,0,RET,$ == 0.0
FastMath.java,pow,x,double,0,RET,$ != x
FastMath.java,pow,x,double,0,RET,$ == 0
FastMath.java,pow,bits,long,0,RET,($ & 0x8000000000000000L) != 0
FastMath.java,pow,y,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ > 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ > 0
FastMath.java,pow,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,pow,y,double,0,RET,$ != y
FastMath.java,pow,y,double,1,RET,$ < 0.0
FastMath.java,pow,y,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,pow,x,double,0,RET,$ * $ == 1.0
FastMath.java,pow,x,double,1,RET,$ * $ > 1.0
FastMath.java,pow,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,pow,y,double,0,RET,$ != y
FastMath.java,pow,y,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ > 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,pow,x,double,0,RET,$ * $ == 1.0
FastMath.java,pow,x,double,1,RET,$ * $ < 1.0
FastMath.java,pow,x,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ >= TWO_POWER_52
FastMath.java,pow,y,double,0,RET,$ <= -TWO_POWER_52
FastMath.java,pow,y,double,1,RET,$ == (long) y
FastMath.java,pow,y,double,1,DEF,$ < 8e298
FastMath.java,pow,y,double,1,DEF,$ > -8e298
FastMath.java,sinQ,xb,double,0,DEF,$ != 0.0
FastMath.java,tanQ,xb,double,0,DEF,$ != 0.0
FastMath.java,reducePayneHanek,shift,int,1,DEF,$ != 0
FastMath.java,sin,x,double,0,DEF,$ < 0
FastMath.java,sin,xa,double,0,RET,$ == 0.0
FastMath.java,sin,bits,long,0,RET,$ < 0
FastMath.java,sin,xa,double,0,RET,$ != xa
FastMath.java,sin,xa,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,sin,xa,double,1,DEF,$ > 3294198.0
FastMath.java,sin,xa,double,0,DEF,$ > 1.5707963267948966
FastMath.java,sin,remA,double,0,DEF,$ > 0.0
FastMath.java,cos,x,double,0,DEF,$ < 0
FastMath.java,cos,xa,double,0,RET,$ != xa
FastMath.java,cos,xa,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,cos,xa,double,1,DEF,$ > 3294198.0
FastMath.java,cos,xa,double,0,DEF,$ > 1.5707963267948966
FastMath.java,cos,remA,double,0,DEF,$ > 0.0
FastMath.java,tan,x,double,0,DEF,$ < 0
FastMath.java,tan,xa,double,0,RET,$ == 0.0
FastMath.java,tan,bits,long,0,RET,$ < 0
FastMath.java,tan,xa,double,0,RET,$ != xa
FastMath.java,tan,xa,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,tan,xa,double,1,DEF,$ > 3294198.0
FastMath.java,tan,xa,double,0,DEF,$ > 1.5707963267948966
FastMath.java,tan,remA,double,0,DEF,$ > 0.0
FastMath.java,tan,xa,double,0,DEF,$ > 1.5
FastMath.java,tan,quadrant,int,1,DEF,($ & 1) == 0
FastMath.java,atan,xa,double,0,RET,$ == 0.0
FastMath.java,atan,xa,double,0,DEF,$ < 0
FastMath.java,atan,xa,double,0,RET,$ > 1.633123935319537E16
FastMath.java,atan,xa,double,1,DEF,$ < 1
FastMath.java,atan,idx,int,1,DEF,$ == 0
FastMath.java,atan2,x,double,0,RET,$ != x
FastMath.java,atan2,y,double,0,RET,$ != y
FastMath.java,atan2,y,double,0,RET,$ == 0
FastMath.java,atan2,invx,double,0,RET,$ == 0
FastMath.java,atan2,x,double,1,RET,$ > 0
FastMath.java,atan2,x,double,1,RET,$ < 0
FastMath.java,atan2,invx,double,1,RET,$ < 0
FastMath.java,atan2,y,double,1,RET,$ < 0
FastMath.java,atan2,invy,double,1,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,y,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,y,double,0,RET,$ > 0
FastMath.java,atan2,y,double,0,RET,1 / $ > 0
FastMath.java,atan2,y,double,0,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,1 / $ < 0
FastMath.java,atan2,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,y,double,0,RET,$ > 0.0
FastMath.java,atan2,y,double,0,RET,1 / $ > 0.0
FastMath.java,atan2,y,double,0,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,1 / $ < 0
FastMath.java,atan2,x,double,0,RET,$ == 0
FastMath.java,atan2,y,double,0,RET,$ > 0
FastMath.java,atan2,y,double,0,RET,1 / $ > 0
FastMath.java,atan2,y,double,0,RET,$ < 0
FastMath.java,atan2,y,double,0,RET,1 / $ < 0
FastMath.java,atan2,ra,double,0,DEF,$ == 0
FastMath.java,asin,x,double,0,RET,$ != x
FastMath.java,asin,x,double,0,RET,$ > 1.0
FastMath.java,asin,x,double,0,RET,$ < -1.0
FastMath.java,asin,x,double,0,RET,$ == 1.0
FastMath.java,asin,x,double,0,RET,$ == -1.0
FastMath.java,asin,x,double,0,RET,$ == 0.0
FastMath.java,acos,x,double,0,RET,$ != x
FastMath.java,acos,x,double,0,RET,$ > 1.0
FastMath.java,acos,x,double,0,RET,$ < -1.0
FastMath.java,acos,x,double,0,RET,$ == -1.0
FastMath.java,acos,x,double,0,RET,$ == 1.0
FastMath.java,acos,x,double,0,RET,$ == 0
FastMath.java,cbrt,exponent,int,0,RET,$ == -1023
FastMath.java,cbrt,x,double,0,RET,$ == 0
FastMath.java,cbrt,exponent,int,0,RET,$ == 1024
FastMath.java,toRadians,x,double,0,RET,$ == 0.0
FastMath.java,toRadians,result,double,0,DEF,$ == 0
FastMath.java,toDegrees,x,double,0,RET,$ == 0.0
FastMath.java,scalb,n,int,0,RET,$ > -1023
FastMath.java,scalb,n,int,0,RET,$ < 1024
FastMath.java,scalb,d,double,0,RET,$ == 0
FastMath.java,scalb,n,int,0,RET,$ < -2098
FastMath.java,scalb,n,int,0,RET,$ > 2097
FastMath.java,scalb,n,int,1,RET,$ < 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > -53
FastMath.java,scalb,mostSignificantLostBit,long,0,DEF,$ != 0
FastMath.java,scalb,exponent,int,1,RET,$ == 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 2047
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 2047
FastMath.java,scalb,n,int,0,RET,$ > -127
FastMath.java,scalb,n,int,0,RET,$ < 128
FastMath.java,scalb,f,float,0,RET,$ == 0f
FastMath.java,scalb,n,int,0,RET,$ < -277
FastMath.java,scalb,n,int,0,RET,$ > 276
FastMath.java,scalb,n,int,1,RET,$ < 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ > -24
FastMath.java,scalb,mostSignificantLostBit,int,0,DEF,$ != 0
FastMath.java,scalb,exponent,int,1,RET,$ == 0
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 255
FastMath.java,scalb,scaledExponent,int,1,RET,$ < 255
FastMath.java,nextAfter,d,double,1,RET,$ == direction
FastMath.java,nextAfter,d,double,0,RET,$ == 0
FastMath.java,nextAfter,direction,double,1,RET,$ < d
FastMath.java,nextAfter,sign,long,1,RET,$ == 0L
FastMath.java,nextAfter,f,float,1,RET,$ == direction
FastMath.java,nextAfter,f,float,0,RET,$ == 0f
FastMath.java,nextAfter,direction,double,1,RET,$ < f
FastMath.java,nextAfter,sign,int,1,RET,$ == 0
FastMath.java,floor,x,double,0,RET,$ != x
FastMath.java,floor,x,double,0,RET,$ >= TWO_POWER_52
FastMath.java,floor,x,double,0,RET,$ <= -TWO_POWER_52
FastMath.java,floor,x,double,0,DEF,$ < 0
FastMath.java,floor,y,long,0,DEF,$ != x
FastMath.java,floor,y,long,0,RET,$ == 0
FastMath.java,ceil,x,double,0,RET,$ != x
FastMath.java,ceil,y,double,0,RET,$ == x
FastMath.java,ceil,y,double,0,RET,$ == 0
FastMath.java,rint,d,double,0,RET,$ > 0.5
FastMath.java,rint,y,double,0,RET,$ == -1.0
FastMath.java,rint,d,double,0,RET,$ < 0.5
FastMath.java,min,a,float,0,RET,$ > b
FastMath.java,min,a,float,0,RET,$ < b
FastMath.java,min,a,float,0,RET,$ != b
FastMath.java,min,bits,int,0,RET,$ == 0x80000000
FastMath.java,min,a,double,0,RET,$ > b
FastMath.java,min,a,double,0,RET,$ < b
FastMath.java,min,a,double,0,RET,$ != b
FastMath.java,min,bits,long,0,RET,$ == 0x8000000000000000L
FastMath.java,max,a,float,0,RET,$ > b
FastMath.java,max,a,float,0,RET,$ < b
FastMath.java,max,a,float,0,RET,$ != b
FastMath.java,max,bits,int,0,RET,$ == 0x80000000
FastMath.java,max,a,double,0,RET,$ > b
FastMath.java,max,a,double,0,RET,$ < b
FastMath.java,max,a,double,0,RET,$ != b
FastMath.java,max,bits,long,0,RET,$ == 0x8000000000000000L
FastMath.java,copySign,m,long,0,RET,$ >= 0
FastMath.java,copySign,s,long,0,RET,$ >= 0
FastMath.java,copySign,m,long,0,RET,$ < 0
FastMath.java,copySign,s,long,0,RET,$ < 0
FastMath.java,copySign,m,int,0,RET,$ >= 0
FastMath.java,copySign,s,int,0,RET,$ >= 0
FastMath.java,copySign,m,int,0,RET,$ < 0
FastMath.java,copySign,s,int,0,RET,$ < 0
FastMath.java,null,i,int,0,DEF,$ != 0
TransformerMap.java,transform,o,null,1,DEF,$ instanceof Number
TransformerMap.java,transform,o,null,1,DEF,$ instanceof String
TransformerMap.java,transform,trans,NumberTransformer,0,DEF,$ != null
TransformerMap.java,equals,other,null,0,RET,$ instanceof TransformerMap
Pair.java,equals,o,Object,0,RET,$ == null
Pair.java,equals,o,null,1,RET,$ instanceof Pair
OpenIntToDoubleHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToDoubleHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToDoubleHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToDoubleHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToDoubleHashMap.java,key,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToDoubleHashMap.java,key,current,int,0,NoSuchElementException,$ < 0
OpenIntToDoubleHashMap.java,value,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToDoubleHashMap.java,value,current,int,0,NoSuchElementException,$ < 0
OpenIntToDoubleHashMap.java,advance,referenceCount,int,0,ConcurrentModificationException,$ != count
OpenIntToDoubleHashMap.java,advance,current,int,0,NoSuchElementException,$ < 0
ArithmeticUtils.java,addAndCheck,s,long,0,MathArithmeticException,$ < Integer.MIN_VALUE
ArithmeticUtils.java,addAndCheck,s,long,0,MathArithmeticException,$ > Integer.MAX_VALUE
ArithmeticUtils.java,binomialCoefficient,n,int,0,RET,$ == k
ArithmeticUtils.java,binomialCoefficient,k,int,0,RET,$ == 0
ArithmeticUtils.java,binomialCoefficient,k,int,0,RET,$ == 1
ArithmeticUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 61
ArithmeticUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 66
ArithmeticUtils.java,binomialCoefficientDouble,n,int,0,RET,$ == k
ArithmeticUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 0
ArithmeticUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 1
ArithmeticUtils.java,binomialCoefficientDouble,n,int,0,RET,$ < 67
ArithmeticUtils.java,binomialCoefficientLog,n,int,0,RET,$ == k
ArithmeticUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 0
ArithmeticUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 1
ArithmeticUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 67
ArithmeticUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 1030
ArithmeticUtils.java,factorial,n,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,factorial,n,int,0,MathArithmeticException,$ > 20
ArithmeticUtils.java,factorialDouble,n,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,factorialDouble,n,int,0,RET,$ < 21
ArithmeticUtils.java,factorialLog,n,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,factorialLog,n,int,0,RET,$ < 21
ArithmeticUtils.java,gcd,u,int,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,v,int,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,u,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
ArithmeticUtils.java,gcd,v,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
ArithmeticUtils.java,gcd,u,int,0,DEF,$ > 0
ArithmeticUtils.java,gcd,v,int,0,DEF,$ > 0
ArithmeticUtils.java,gcd,k,int,0,MathArithmeticException,$ == 31
ArithmeticUtils.java,gcd,t,int,1,DEF,$ > 0
ArithmeticUtils.java,gcd,u,long,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,v,long,0,MathArithmeticException:RET,$ == 0
ArithmeticUtils.java,gcd,u,long,0,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,gcd,v,long,0,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,gcd,u,long,0,DEF,$ > 0
ArithmeticUtils.java,gcd,v,long,0,DEF,$ > 0
ArithmeticUtils.java,gcd,k,int,0,MathArithmeticException,$ == 63
ArithmeticUtils.java,gcd,t,long,1,DEF,$ > 0
ArithmeticUtils.java,lcm,a,int,0,RET,$ == 0
ArithmeticUtils.java,lcm,b,int,0,RET,$ == 0
ArithmeticUtils.java,lcm,lcm,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
ArithmeticUtils.java,lcm,a,long,0,RET,$ == 0
ArithmeticUtils.java,lcm,b,long,0,RET,$ == 0
ArithmeticUtils.java,lcm,lcm,long,0,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,mulAndCheck,m,long,0,MathArithmeticException,$ < Integer.MIN_VALUE
ArithmeticUtils.java,mulAndCheck,m,long,0,MathArithmeticException,$ > Integer.MAX_VALUE
ArithmeticUtils.java,mulAndCheck,a,long,1,DEF,$ > b
ArithmeticUtils.java,mulAndCheck,a,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,mulAndCheck,b,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,mulAndCheck,b,long,1,MathArithmeticException,$ > 0
ArithmeticUtils.java,mulAndCheck,b,long,1,DEF,Long.MIN_VALUE / $ <= a
ArithmeticUtils.java,mulAndCheck,a,long,1,MathArithmeticException,$ > 0
ArithmeticUtils.java,subAndCheck,s,long,0,MathArithmeticException,$ < Integer.MIN_VALUE
ArithmeticUtils.java,subAndCheck,s,long,0,MathArithmeticException,$ > Integer.MAX_VALUE
ArithmeticUtils.java,subAndCheck,b,long,1,MathArithmeticException,$ == Long.MIN_VALUE
ArithmeticUtils.java,subAndCheck,a,long,1,DEF,$ < 0
ArithmeticUtils.java,pow,e,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,long,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,long,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,int,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,NotPositiveException,$ < 0
ArithmeticUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
ArithmeticUtils.java,pow,e,BigInteger,0,NotPositiveException,$.compareTo(BigInteger.ZERO) < 0
ArithmeticUtils.java,addAndCheck,a,long,1,DEF,$ > b
ArithmeticUtils.java,addAndCheck,a,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,addAndCheck,b,long,1,MathArithmeticException,$ < 0
ArithmeticUtils.java,addAndCheck,b,long,1,DEF,Long.MIN_VALUE - $ <= a
ArithmeticUtils.java,checkBinomial,n,int,0,NumberIsTooLargeException,$ < k
ArithmeticUtils.java,checkBinomial,n,int,0,NotPositiveException,$ < 0
BigFraction.java,BigFraction,gcd,BigInteger,0,DEF,BigInteger.ONE.compareTo($) < 0
BigFraction.java,BigFraction,den,BigInteger,0,DEF,BigInteger.ZERO.compareTo($) > 0
BigFraction.java,BigFraction,exponent,long,0,DEF,$ != 0
BigFraction.java,BigFraction,sign,long,0,DEF,$ != 0
BigFraction.java,BigFraction,k,int,1,DEF,$ < 0
BigFraction.java,BigFraction,a0,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,value,double,0,RET,FastMath.abs(a0 - $) < epsilon
BigFraction.java,BigFraction,a0,long,0,RET,FastMath.abs($ - value) < epsilon
BigFraction.java,BigFraction,p2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,q2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,n,int,1,DEF,$ < maxIterations
BigFraction.java,BigFraction,convergent,double,1,DEF,FastMath.abs($ - value) > epsilon
BigFraction.java,BigFraction,value,double,1,DEF,FastMath.abs(convergent - $) > epsilon
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,BigFraction,n,int,0,FractionConversionException,$ >= maxIterations
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,getReducedFraction,numerator,int,0,RET,$ == 0
BigFraction.java,add,fraction,BigFraction,0,NullArgumentException,$ == null
BigFraction.java,divide,bg,BigInteger,0,NullArgumentException,$ == null
BigFraction.java,divide,fraction,BigFraction,0,NullArgumentException,$ == null
BigFraction.java,equals,other,null,0,DEF,$ instanceof BigFraction
BigFraction.java,multiply,bg,BigInteger,0,NullArgumentException,$ == null
BigFraction.java,multiply,fraction,BigFraction,0,NullArgumentException,$ == null
BigFraction.java,pow,exponent,int,0,RET,$ < 0
BigFraction.java,pow,exponent,long,0,RET,$ < 0
BigFraction.java,pow,exponent,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
BigFraction.java,subtract,bg,BigInteger,0,NullArgumentException,$ == null
BigFraction.java,subtract,fraction,BigFraction,0,NullArgumentException,$ == null
Fraction.java,Fraction,a0,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,value,double,0,RET,FastMath.abs(a0 - $) < epsilon
Fraction.java,Fraction,a0,long,0,RET,FastMath.abs($ - value) < epsilon
Fraction.java,Fraction,p2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,q2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,n,int,1,DEF,$ < maxIterations
Fraction.java,Fraction,convergent,double,1,DEF,FastMath.abs($ - value) > epsilon
Fraction.java,Fraction,value,double,1,DEF,FastMath.abs(convergent - $) > epsilon
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,n,int,0,FractionConversionException,$ >= maxIterations
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,den,int,0,MathArithmeticException,$ == 0
Fraction.java,Fraction,den,int,0,MathArithmeticException,$ < 0
Fraction.java,Fraction,num,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
Fraction.java,Fraction,den,int,0,MathArithmeticException,$ == Integer.MIN_VALUE
Fraction.java,Fraction,d,int,0,DEF,$ > 1
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,abs,numerator,int,1,DEF,$ >= 0
Fraction.java,equals,other,null,0,RET,$ instanceof Fraction
Fraction.java,negate,numerator,int,0,MathArithmeticException,$==Integer.MIN_VALUE
Fraction.java,addSub,fraction,Fraction,0,NullArgumentException,$ == null
Fraction.java,addSub,numerator,int,0,RET,$ == 0
Fraction.java,addSub,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,addSub,d1,int,0,RET,$==1
Fraction.java,addSub,w,BigInteger,0,MathArithmeticException,$.bitLength() > 31
Fraction.java,multiply,fraction,Fraction,0,NullArgumentException,$ == null
Fraction.java,multiply,numerator,int,0,RET,$ == 0
Fraction.java,multiply,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,divide,fraction,Fraction,0,NullArgumentException,$ == null
Fraction.java,divide,fraction,Fraction,0,MathArithmeticException,$.numerator == 0
Fraction.java,getReducedFraction,denominator,int,0,MathArithmeticException,$ == 0
Fraction.java,getReducedFraction,numerator,int,0,RET,$==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,numerator,int,0,DEF,($&1)==0
Fraction.java,getReducedFraction,denominator,int,0,MathArithmeticException,$ < 0
Fraction.java,getReducedFraction,numerator,int,0,MathArithmeticException,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,denominator,int,0,MathArithmeticException,$==Integer.MIN_VALUE
Fraction.java,toString,denominator,int,1,DEF,$ == 1
Fraction.java,toString,numerator,int,1,DEF,$ == 0
AbstractFormat.java,setDenominatorFormat,format,NumberFormat,0,NullArgumentException,$ == null
AbstractFormat.java,setNumeratorFormat,format,NumberFormat,0,NullArgumentException,$ == null
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
ProperBigFractionFormat.java,format,num,BigInteger,0,DEF,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,ret,BigFraction,0,RET,$ != null
ProperBigFractionFormat.java,parse,whole,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,setWholeFormat,format,NumberFormat,0,NullArgumentException,$ == null
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Fraction
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
FractionFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
FractionFormat.java,parse,num,Number,0,RET,$ == null
FractionFormat.java,parse,den,Number,0,RET,$ == null
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigFraction
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigInteger
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
BigFractionFormat.java,parse,parsePosition,ParsePosition,0,MathParseException,$.getIndex() == 0
BigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
BigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperFractionFormat.java,format,whole,int,0,DEF,$ != 0
ProperFractionFormat.java,parse,ret,Fraction,0,RET,$ != null
ProperFractionFormat.java,parse,whole,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,parse,den,Number,0,RET,$ == null
ProperFractionFormat.java,parse,den,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,setWholeFormat,format,NumberFormat,0,NullArgumentException,$ == null
AbstractIntegrator.java,sanityChecks,dt,double,0,NumberIsTooSmallException,$ <= threshold
ContinuousOutputModel.java,append,model,ContinuousOutputModel,0,RET,$.steps.size() == 0
ContinuousOutputModel.java,append,steps,List<StepInterpolator>,1,DEF,$.size() == 0
ContinuousOutputModel.java,handleStep,steps,List<StepInterpolator>,0,DEF,$.size() == 0
ContinuousOutputModel.java,setInterpolatedTime,sMin,StepInterpolator,0,RET,locatePoint(time, $) <= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMin) <= 0
ContinuousOutputModel.java,setInterpolatedTime,sMax,StepInterpolator,0,RET,locatePoint(time, $) >= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMax) >= 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ < 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ > 0
ContinuousOutputModel.java,setInterpolatedTime,tMin,double,1,DEF,FastMath.abs(tMed - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,FastMath.abs($ - tMin) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMax,double,1,DEF,FastMath.abs($ - tMed) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,FastMath.abs(tMax - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,index,int,1,DEF,$ < low
ContinuousOutputModel.java,setInterpolatedTime,index,int,0,DEF,$ > high
AdamsBashforthIntegrator.java,integrate,error,double,0,DEF,$ >= 1.0
GillStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
GillStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
EulerStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
EulerStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
DormandPrince54StepInterpolator.java,DormandPrince54StepInterpolator,interpolator,DormandPrince54StepInterpolator,1,DEF,$.v1 == null
DormandPrince54StepInterpolator.java,computeInterpolatedStateAndDerivatives,v1,double[],0,DEF,$ == null
DormandPrince54StepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
DormandPrince54StepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
GraggBulirschStoerIntegrator.java,setStabilityCheck,stepsizeReductionFactor,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStabilityCheck,stepsizeReductionFactor,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control3,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control3,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setControlFactors,control4,double,1,DEF,$ < 1.0001
GraggBulirschStoerIntegrator.java,setControlFactors,control4,double,1,DEF,$ > 999.9
GraggBulirschStoerIntegrator.java,setOrderControl,maximalOrder,int,0,DEF,$ <= 6
GraggBulirschStoerIntegrator.java,setOrderControl,maximalOrder,int,0,DEF,$ % 2 != 0
GraggBulirschStoerIntegrator.java,setOrderControl,control1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,control1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setOrderControl,control2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,control2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$ == null
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$.length != size
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudifControlParameter,int,1,DEF,$ <= 0
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudifControlParameter,int,1,DEF,$ >= 7
GraggBulirschStoerIntegrator.java,rescale,vecAbsoluteTolerance,double[],1,DEF,$ == null
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,DEF,2 * $ == n
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,RET,$ <= maxChecks
GraggBulirschStoerIntegrator.java,tryStep,k,int,0,RET,$ < maxIter
GraggBulirschStoerIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize > t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ > t
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize < t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ < t
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 0
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > 1.0e15
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > maxError
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ > 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,mu,int,0,DEF,$ >= 0
GraggBulirschStoerIntegrator.java,integrate,interpError,double,0,DEF,$ > 10.0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 1
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ <= targetIter
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 2
GraggBulirschStoerIntegrator.java,integrate,optimalIter,int,1,DEF,$ <= k
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ < targetIter
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ < minStep
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,DimensionMismatchException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,DimensionMismatchException,$.length != mainSetDimension
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,DimensionMismatchException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,DimensionMismatchException,$.length != mainSetDimension
AdaptiveStepsizeIntegrator.java,initializeStep,initialStep,double,0,RET,$ > 0
AdaptiveStepsizeIntegrator.java,filterStep,h,double,0,NumberIsTooSmallException,FastMath.abs($) < minStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,0,DEF,$ < -maxStep
EmbeddedRungeKuttaIntegrator.java,integrate,vecAbsoluteTolerance,double[],1,DEF,$ == null
EmbeddedRungeKuttaIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize >= t
EmbeddedRungeKuttaIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ >= t
EmbeddedRungeKuttaIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize <= t
EmbeddedRungeKuttaIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ <= t
EmbeddedRungeKuttaIntegrator.java,integrate,error,double,0,DEF,$ >= 1.0
MidpointStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
MidpointStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
ClassicalRungeKuttaStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
ClassicalRungeKuttaStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
AdamsNordsieckTransformer.java,getInstance,t,AdamsNordsieckTransformer,0,DEF,$ == null
AdamsMoultonIntegrator.java,integrate,error,double,0,DEF,$ >= 1.0
AdamsMoultonIntegrator.java,visit,row,int,1,DEF,($ & 0x1) == 0
AdamsMoultonIntegrator.java,end,i,int,0,DEF,$ < mainSetDimension
DormandPrince853StepInterpolator.java,DormandPrince853StepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState == null
DormandPrince853StepInterpolator.java,computeInterpolatedStateAndDerivatives,v,double[][],0,DEF,$ == null
DormandPrince853StepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
DormandPrince853StepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
DormandPrince853StepInterpolator.java,doFinalize,currentState,double[],0,RET,$ == null
HighamHall54StepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
HighamHall54StepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
DormandPrince853Integrator.java,estimateError,den,double,0,DEF,$ <= 0.0
ThreeEighthesStepInterpolator.java,computeInterpolatedStateAndDerivatives,previousState,double[],1,DEF,$ != null
ThreeEighthesStepInterpolator.java,computeInterpolatedStateAndDerivatives,theta,double,1,DEF,$ <= 0.5
RungeKuttaStepInterpolator.java,RungeKuttaStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
RungeKuttaStepInterpolator.java,readExternal,n,int,1,DEF,$ < 0
RungeKuttaStepInterpolator.java,readExternal,currentState,double[],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,GraggBulirschStoerStepInterpolator,interpolator,GraggBulirschStoerStepInterpolator,1,DEF,$.polynomials == null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ < 0
GraggBulirschStoerStepInterpolator.java,resetTables,polynomials,double[][],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ <= 4
GraggBulirschStoerStepInterpolator.java,computeCoefficients,polynomials,double[][],0,DEF,$ == null
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,RET,$ < 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 1
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 2
GraggBulirschStoerStepInterpolator.java,estimateError,currentDegree,int,0,DEF,$ >= 5
GraggBulirschStoerStepInterpolator.java,computeInterpolatedStateAndDerivatives,currentDegree,int,0,DEF,$ > 3
GraggBulirschStoerStepInterpolator.java,computeInterpolatedStateAndDerivatives,h,double,0,DEF,$ == 0
StepNormalizer.java,handleStep,lastState,double[],0,DEF,$ == null
StepNormalizer.java,handleStep,mode,StepNormalizerMode,0,DEF,$ == StepNormalizerMode.MULTIPLES
StepNormalizer.java,doNormalizedStep,firstTime,double,0,RET,$ == lastTime
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.scaled != null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.nordsieck != null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.stateVariation != null
NordsieckStepInterpolator.java,writeExternal,scaled,double[],1,DEF,$ == null
NordsieckStepInterpolator.java,writeExternal,nordsieck,Array2DRowRealMatrix,1,DEF,$ == null
AbstractStepInterpolator.java,AbstractStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState == null
AbstractStepInterpolator.java,allocateInterpolatedArrays,dimension,int,1,DEF,$ < 0
AbstractStepInterpolator.java,allocateInterpolatedArrays,secondaryMappers,EquationsMapper[],1,DEF,$ == null
AbstractStepInterpolator.java,writeBaseExternal,currentState,double[],1,DEF,$ == null
AbstractStepInterpolator.java,writeBaseExternal,currentState,double[],0,DEF,$ != null
AbstractStepInterpolator.java,readBaseExternal,dimension,int,1,DEF,$ < 0
ExpandableStatefulODE.java,setSecondaryState,secondaryState,double[],0,DimensionMismatchException,$.length != localArray.length
EventState.java,reinitializeBegin,g0,double,0,DEF,$ == 0
EventState.java,evaluateStep,dt,double,0,RET,FastMath.abs($) < convergence
EventState.java,evaluateStep,gb,double,1,RET,$ >= 0
EventState.java,evaluateStep,solver,null,1,DEF,$ instanceof BracketedUnivariateSolver<?>
EventState.java,evaluateStep,root,double,1,DEF,FastMath.abs($ - ta) <= convergence
EventState.java,evaluateStep,ta,double,1,DEF,FastMath.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,1,DEF,FastMath.abs($ - previousEventTime) <= convergence
EventState.java,evaluateStep,previousEventTime,double,1,DEF,FastMath.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,1,RET,FastMath.abs(previousEventTime - $) > convergence
EventState.java,evaluateStep,previousEventTime,double,1,RET,FastMath.abs($ - root) > convergence
EventState.java,stepAccepted,t,double,1,DEF,FastMath.abs(pendingEventTime - $) <= convergence
EventState.java,stepAccepted,pendingEventTime,double,1,DEF,FastMath.abs($ - t) <= convergence
EventState.java,reset,t,double,0,RET,FastMath.abs(pendingEventTime - $) <= convergence
EventState.java,reset,pendingEventTime,double,0,RET,FastMath.abs($ - t) <= convergence
MultistepIntegrator.java,MultistepIntegrator,nSteps,int,0,MathIllegalArgumentException,$ <= 1
MultistepIntegrator.java,handleStep,count,int,0,DEF,$ == 0
JacobianMatrices.java,JacobianMatrices,parameters,String[],1,DEF,$ == null
JacobianMatrices.java,registerVariationalEquations,expandable,ExpandableStatefulODE,0,MathIllegalArgumentException,$.getPrimary() != ode
JacobianMatrices.java,setInitialMainStateJacobian,efode,ExpandableStatefulODE,0,DEF,$ != null
JacobianMatrices.java,setInitialParameterJacobian,efode,ExpandableStatefulODE,0,DEF,$ != null
JacobianMatrices.java,checkDimension,arrayDimension,int,0,DimensionMismatchException,$ != expected
JacobianMatrices.java,computeDerivatives,paramDim,int,0,DEF,$ != 0
JacobianMatrices.java,computeDerivatives,paramDim,int,0,MathIllegalArgumentException,$ != 0
EquationsMapper.java,extractEquationData,equationData,double[],0,DimensionMismatchException,$.length != dimension
EquationsMapper.java,insertEquationData,equationData,double[],0,DimensionMismatchException,$.length != dimension
ArgUtils.java,flatten,array,Object[],0,DEF,$ != null
ArgUtils.java,flatten,o,null,1,DEF,$ instanceof Object[]
ExceptionContext.java,buildMessage,count,int,0,DEF,++$ < len
ExceptionContext.java,serializeContext,value,null,1,DEF,$ instanceof Serializable
BinaryMutation.java,mutate,original,null,0,IllegalArgumentException,$ instanceof BinaryChromosome
RandomKey.java,decodeGeneric,representation,List<Double>,0,IllegalArgumentException,$.size() != l
RandomKey.java,isSame,another,null,0,RET,$ instanceof RandomKey<?>
RandomKey.java,checkValidity,val,double,0,InvalidRepresentationException,$ < 0
RandomKey.java,checkValidity,val,double,0,InvalidRepresentationException,$ > 1
RandomKey.java,inducedPermutation,index,int,0,IllegalArgumentException,$ == -1
GeneticAlgorithm.java,GeneticAlgorithm,crossoverRate,double,0,IllegalArgumentException,$ < 0
GeneticAlgorithm.java,GeneticAlgorithm,crossoverRate,double,0,IllegalArgumentException,$ > 1
GeneticAlgorithm.java,GeneticAlgorithm,mutationRate,double,0,IllegalArgumentException,$ < 0
GeneticAlgorithm.java,GeneticAlgorithm,mutationRate,double,0,IllegalArgumentException,$ > 1
Chromosome.java,searchForFitnessUpdate,sameChromosome,Chromosome,0,DEF,$ != null
ElitisticListPopulation.java,setElitismRate,elitismRate,double,0,IllegalArgumentException,$ < 0
ElitisticListPopulation.java,setElitismRate,elitismRate,double,0,IllegalArgumentException,$ > 1
BinaryChromosome.java,checkValidity,i,int,0,InvalidRepresentationException,$ < 0
BinaryChromosome.java,checkValidity,i,int,0,InvalidRepresentationException,$ >1
BinaryChromosome.java,isSame,another,null,0,RET,$ instanceof BinaryChromosome
OnePointCrossover.java,crossover,first,null,0,IllegalArgumentException,$ instanceof AbstractListChromosome<?>
OnePointCrossover.java,crossover,second,null,0,IllegalArgumentException,$ instanceof AbstractListChromosome<?>
RandomKeyMutation.java,mutate,original,null,0,DEF,$ instanceof RandomKey<?>
ListPopulation.java,ListPopulation,chromosomes,List<Chromosome>,0,NumberIsTooLargeException,$.size() > populationLimit
ListPopulation.java,ListPopulation,populationLimit,int,0,NotPositiveException,$ < 0
ListPopulation.java,ListPopulation,populationLimit,int,0,NotPositiveException,$ < 0
ListPopulation.java,getFittestChromosome,bestChromosome,Chromosome,0,DEF,chromosome.compareTo($) > 0
ListPopulation.java,getFittestChromosome,chromosome,Chromosome,0,DEF,$.compareTo(bestChromosome) > 0
FixedGenerationCount.java,FixedGenerationCount,maxGenerations,int,0,IllegalArgumentException,$ <= 0
QRDecompositionImpl.java,QRDecompositionImpl,a,double,0,DEF,$ != 0.0
QRDecompositionImpl.java,getR,cachedR,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQT,cachedQT,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQT,minor,int,0,DEF,qrtMinor[$] != 0.0
QRDecompositionImpl.java,getQT,qrtMinor,double[],0,DEF,$[minor] != 0.0
QRDecompositionImpl.java,getH,cachedH,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,isNonSingular,diag,double,0,RET,$ == 0
QRDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
QRDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
RealMatrixImpl.java,RealMatrixImpl,d,double[][],0,NullPointerException,$ == null
RealMatrixImpl.java,RealMatrixImpl,nRows,int,0,DEF,$ == 0
RealMatrixImpl.java,RealMatrixImpl,nCols,int,0,DEF,$ == 0
RealMatrixImpl.java,RealMatrixImpl,r,int,0,DEF,d[$].length != nCols
RealMatrixImpl.java,RealMatrixImpl,d,double[][],0,DEF,$[r].length != nCols
RealMatrixImpl.java,setSubMatrix,data,double[][],1,DEF,$ == null
RealMatrixImpl.java,setSubMatrix,row,int,0,DEF,$ > 0
RealMatrixImpl.java,setSubMatrix,column,int,0,DEF,$ > 0
RealMatrixImpl.java,setSubMatrix,nRows,int,0,DEF,$ == 0
RealMatrixImpl.java,setSubMatrix,nCols,int,0,DEF,$ == 0
RealMatrixImpl.java,setSubMatrix,i,int,0,DEF,subMatrix[$].length != nCols
RealMatrixImpl.java,setSubMatrix,subMatrix,double[][],0,DEF,$[i].length != nCols
RealMatrixImpl.java,operate,v,double[],0,DEF,$.length != nCols
RealMatrixImpl.java,preMultiply,v,double[],0,DEF,$.length != nRows
LUDecompositionImpl.java,LUDecompositionImpl,sum,double,0,DEF,FastMath.abs($) > largest
LUDecompositionImpl.java,LUDecompositionImpl,col,int,0,RET,FastMath.abs(lu[max][$]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,max,int,0,RET,FastMath.abs(lu[$][col]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,lu,double[][],0,RET,FastMath.abs($[max][col]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,max,int,0,DEF,$ != col
LUDecompositionImpl.java,getL,cachedL,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,getU,cachedU,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,getP,cachedP,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
LUDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
LUDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
RealVectorFormat.java,format,i,int,0,DEF,$ > 0
RealVectorFormat.java,format,obj,null,0,RET,$ instanceof RealVector
RealVectorFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
RealVectorFormat.java,parse,component,Number,1,DEF,$ != null
Array2DRowRealMatrix.java,Array2DRowRealMatrix,d,double[][],0,NullPointerException,$ == null
Array2DRowRealMatrix.java,Array2DRowRealMatrix,nRows,int,0,DEF,$ == 0
Array2DRowRealMatrix.java,Array2DRowRealMatrix,nCols,int,0,DEF,$ == 0
Array2DRowRealMatrix.java,Array2DRowRealMatrix,r,int,0,DEF,d[$].length != nCols
Array2DRowRealMatrix.java,Array2DRowRealMatrix,d,double[][],0,DEF,$[r].length != nCols
Array2DRowRealMatrix.java,setSubMatrix,data,double[][],1,DEF,$ == null
Array2DRowRealMatrix.java,setSubMatrix,row,int,0,DEF,$ > 0
Array2DRowRealMatrix.java,setSubMatrix,column,int,0,DEF,$ > 0
Array2DRowRealMatrix.java,setSubMatrix,nRows,int,0,DEF,$ == 0
Array2DRowRealMatrix.java,setSubMatrix,nCols,int,0,DEF,$ == 0
Array2DRowRealMatrix.java,setSubMatrix,i,int,0,DEF,subMatrix[$].length != nCols
Array2DRowRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DEF,$[i].length != nCols
Array2DRowRealMatrix.java,operate,v,double[],0,DEF,$.length != nCols
Array2DRowRealMatrix.java,preMultiply,v,double[],0,DEF,$.length != nRows
AbstractRealMatrix.java,AbstractRealMatrix,rowDimension,int,0,NotStrictlyPositiveException,$ < 1
AbstractRealMatrix.java,AbstractRealMatrix,columnDimension,int,0,NotStrictlyPositiveException,$ < 1
AbstractRealMatrix.java,visit,row,int,0,DEF,$ == endRow
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$.length < rowsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$[0].length < columnsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$.length < selectedRows.length
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,MatrixDimensionMismatchException,$[0].length < selectedColumns.length
AbstractRealMatrix.java,setSubMatrix,nRows,int,0,NoDataException,$ == 0
AbstractRealMatrix.java,setSubMatrix,nCols,int,0,NoDataException,$ == 0
AbstractRealMatrix.java,setSubMatrix,r,int,0,DimensionMismatchException,subMatrix[$].length != nCols
AbstractRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DimensionMismatchException,$[r].length != nCols
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
AbstractRealMatrix.java,setRowVector,vector,RealVector,0,MatrixDimensionMismatchException,$.getDimension() != nCols
AbstractRealMatrix.java,setColumnVector,vector,RealVector,0,MatrixDimensionMismatchException,$.getDimension() != nRows
AbstractRealMatrix.java,setRow,array,double[],0,MatrixDimensionMismatchException,$.length != nCols
AbstractRealMatrix.java,setColumn,array,double[],0,MatrixDimensionMismatchException,$.length != nRows
AbstractRealMatrix.java,inverse,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,isSingular,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractRealMatrix.java,operate,v,double[],0,DimensionMismatchException,$.length != nCols
AbstractRealMatrix.java,operate,v,RealVector,0,DimensionMismatchException,$.getDimension() != nCols
AbstractRealMatrix.java,preMultiply,v,double[],0,DimensionMismatchException,$.length != nRows
AbstractRealMatrix.java,preMultiply,v,RealVector,0,DimensionMismatchException,$.getDimension() != nRows
AbstractRealMatrix.java,solve,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,solve,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,luDecompose,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,toString,i,int,0,DEF,$ > 0
AbstractRealMatrix.java,toString,j,int,0,DEF,$ > 0
AbstractRealMatrix.java,equals,object,Object,0,RET,$ instanceof RealMatrix == false
AbstractRealMatrix.java,equals,object,null,0,RET,$ instanceof RealMatrix
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getColumnDimension() != nCols
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getRowDimension() != nRows
BlockRealMatrix.java,toBlocksLayout,length,int,0,DimensionMismatchException,$ != columns
BlockRealMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,setSubMatrix,refLength,int,0,NoDataException,$ == 0
BlockRealMatrix.java,setSubMatrix,subRow,double[],0,DimensionMismatchException,$.length != refLength
BlockRealMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
BlockRealMatrix.java,setRowMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
BlockRealMatrix.java,setRowMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
BlockRealMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
BlockRealMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
BlockRealMatrix.java,setColumnMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
BlockRealMatrix.java,setColumnMatrix,matrix,BlockRealMatrix,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
BlockRealMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
BlockRealMatrix.java,setRow,array,double[],0,MatrixDimensionMismatchException,$.length != nCols
BlockRealMatrix.java,setColumn,array,double[],0,MatrixDimensionMismatchException,$.length != nRows
BlockRealMatrix.java,operate,v,double[],0,DimensionMismatchException,$.length != columns
BlockRealMatrix.java,preMultiply,v,double[],0,DimensionMismatchException,$.length != rows
MatrixUtils.java,createRowFieldMatrix,nCols,int,0,DEF,$ == 0
MatrixUtils.java,createColumnFieldMatrix,nRows,int,0,DEF,$ == 0
MatrixUtils.java,checkRowIndex,row,int,0,MatrixIndexException,$ < 0
MatrixUtils.java,checkColumnIndex,column,int,0,MatrixIndexException,$ < 0
MatrixUtils.java,checkSubMatrixIndex,startRow,int,0,MatrixIndexException,$ > endRow
MatrixUtils.java,checkSubMatrixIndex,startColumn,int,0,MatrixIndexException,$ > endColumn
MatrixUtils.java,checkSubMatrixIndex,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
MatrixUtils.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
MatrixUtils.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length == 0
SingularValueDecompositionImpl.java,SingularValueDecompositionImpl,m,int,1,DEF,$>=n
SingularValueDecompositionImpl.java,SingularValueDecompositionImpl,product,double,0,DEF,$<0
SingularValueDecompositionImpl.java,getUT,cachedUt,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getS,cachedS,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getCovariance,dimension,int,0,DEF,$ == 0
SingularValueDecompositionImpl.java,getRank,singularValues,double[],0,RET,$[i] > threshold
SingularValueDecompositionImpl.java,getRank,i,int,0,RET,singularValues[$] > threshold
SingularValueDecompositionImpl.java,Solver,singularValues,double[],1,DEF,$[i]>0
SingularValueDecompositionImpl.java,Solver,i,int,1,DEF,singularValues[$]>0
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,lJI,double,0,NotSymmetricMatrixException,FastMath.abs(lIJ - $) > maxDelta
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,lIJ,double,0,NotSymmetricMatrixException,FastMath.abs($ - lJI) > maxDelta
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,ltI,double[],0,NotPositiveDefiniteMatrixException,$[i] < absolutePositivityThreshold
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,i,int,0,NotPositiveDefiniteMatrixException,ltI[$] < absolutePositivityThreshold
CholeskyDecompositionImpl.java,getL,cachedL,RealMatrix,0,DEF,$ == null
CholeskyDecompositionImpl.java,getLT,cachedLT,RealMatrix,0,DEF,$ == null
CholeskyDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
CholeskyDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
CholeskyDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
TriDiagonalTransformer.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,cachedQt,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,hK,double[],0,DEF,$[k] != 0.0
TriDiagonalTransformer.java,getQT,k,int,0,DEF,hK[$] != 0.0
TriDiagonalTransformer.java,getT,cachedT,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getT,i,int,0,DEF,$ > 0
TriDiagonalTransformer.java,transform,a,double,0,DEF,$ != 0.0
EigenDecompositionImpl.java,getV,cachedV,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getD,cachedD,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
EigenDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
EigenDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
EigenDecompositionImpl.java,isNonSingular,realEigenvalues,double[],0,RET,$[i] == 0
EigenDecompositionImpl.java,isNonSingular,i,int,0,RET,realEigenvalues[$] == 0
EigenDecompositionImpl.java,isNonSingular,imagEigenvalues,double[],0,RET,$[i] == 0
EigenDecompositionImpl.java,isNonSingular,i,int,0,RET,imagEigenvalues[$] == 0
EigenDecompositionImpl.java,findEigenVectors,realEigenvalues,double[],0,DEF,FastMath.abs($[i])>maxAbsoluteValue
EigenDecompositionImpl.java,findEigenVectors,i,int,0,DEF,FastMath.abs(realEigenvalues[$])>maxAbsoluteValue
EigenDecompositionImpl.java,findEigenVectors,e,double[],0,DEF,FastMath.abs($[i])>maxAbsoluteValue
EigenDecompositionImpl.java,findEigenVectors,i,int,0,DEF,FastMath.abs(e[$])>maxAbsoluteValue
EigenDecompositionImpl.java,findEigenVectors,maxAbsoluteValue,double,0,DEF,$!=0.0
EigenDecompositionImpl.java,findEigenVectors,e,double[],0,DEF,FastMath.abs($[m]) + delta == delta
EigenDecompositionImpl.java,findEigenVectors,delta,double,0,DEF,FastMath.abs(e[m]) + $ == delta
EigenDecompositionImpl.java,findEigenVectors,m,int,0,DEF,FastMath.abs(e[$]) + delta == delta
EigenDecompositionImpl.java,findEigenVectors,m,int,0,MaxIterationsExceededException,$ != j
EigenDecompositionImpl.java,findEigenVectors,its,int,0,MaxIterationsExceededException,$ == maxIter
EigenDecompositionImpl.java,findEigenVectors,q,double,1,DEF,$ < 0.0
EigenDecompositionImpl.java,findEigenVectors,e,double[],0,DEF,$[i + 1] == 0.0
EigenDecompositionImpl.java,findEigenVectors,i,int,0,DEF,e[$ + 1] == 0.0
EigenDecompositionImpl.java,findEigenVectors,t,double,0,DEF,$ == 0.0
EigenDecompositionImpl.java,findEigenVectors,i,int,0,DEF,$ >= j
EigenDecompositionImpl.java,findEigenVectors,realEigenvalues,double[],0,DEF,$[j] > p
EigenDecompositionImpl.java,findEigenVectors,j,int,0,DEF,realEigenvalues[$] > p
EigenDecompositionImpl.java,findEigenVectors,k,int,0,DEF,$ != i
EigenDecompositionImpl.java,findEigenVectors,realEigenvalues,double[],0,DEF,FastMath.abs($[i])>maxAbsoluteValue
EigenDecompositionImpl.java,findEigenVectors,i,int,0,DEF,FastMath.abs(realEigenvalues[$])>maxAbsoluteValue
EigenDecompositionImpl.java,findEigenVectors,maxAbsoluteValue,double,0,DEF,$!=0.0
OpenMapRealMatrix.java,multiply,outValue,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,setEntry,value,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,addToEntry,value,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,multiplyEntry,value,double,1,DEF,$ == 0.0
SparseFieldVector.java,append,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,dotProduct,idx,int,0,DEF,$ < v.length
SparseFieldVector.java,getSubVector,key,int,0,DEF,$ >= index
SparseFieldVector.java,getSubVector,key,int,0,DEF,$ < end
SparseFieldVector.java,outerProduct,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,subtract,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
SparseFieldVector.java,add,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,equals,obj,null,0,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,equals,field,Field<T>,1,RET,$ == null
SparseFieldVector.java,equals,other,SparseFieldVector<T>,0,RET,$.field != null
SparseFieldVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
AbstractFieldMatrix.java,AbstractFieldMatrix,rowDimension,int,0,DEF,$ < 1
AbstractFieldMatrix.java,AbstractFieldMatrix,columnDimension,int,0,DEF,$ < 1
AbstractFieldMatrix.java,extractField,d,T[][],0,DEF,$.length == 0
AbstractFieldMatrix.java,extractField,d,T[][],0,DEF,$[0].length == 0
AbstractFieldMatrix.java,extractField,d,T[],0,DEF,$.length == 0
AbstractFieldMatrix.java,buildArray,columns,int,0,RET,$ < 0
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,DEF,$.length < rowsCount
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,DEF,$[0].length < columnsCount
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,DEF,$.length < selectedRows.length
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,DEF,$[0].length < selectedColumns.length
AbstractFieldMatrix.java,setSubMatrix,nRows,int,0,DEF,$ == 0
AbstractFieldMatrix.java,setSubMatrix,nCols,int,0,DEF,$ == 0
AbstractFieldMatrix.java,setSubMatrix,r,int,0,DEF,subMatrix[$].length != nCols
AbstractFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,DEF,$[r].length != nCols
AbstractFieldMatrix.java,setRowMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
AbstractFieldMatrix.java,setRowMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
AbstractFieldMatrix.java,setColumnMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
AbstractFieldMatrix.java,setColumnMatrix,matrix,FieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
AbstractFieldMatrix.java,setRowVector,vector,FieldVector<T>,0,MatrixDimensionMismatchException,$.getDimension() != nCols
AbstractFieldMatrix.java,setColumnVector,vector,FieldVector<T>,0,MatrixDimensionMismatchException,$.getDimension() != nRows
AbstractFieldMatrix.java,setRow,array,T[],0,MatrixDimensionMismatchException,$.length != nCols
AbstractFieldMatrix.java,setColumn,array,T[],0,MatrixDimensionMismatchException,$.length != nRows
AbstractFieldMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractFieldMatrix.java,operate,v,T[],0,DEF,$.length != nCols
AbstractFieldMatrix.java,operate,v,FieldVector<T>,0,DEF,$.getDimension() != nCols
AbstractFieldMatrix.java,preMultiply,v,T[],0,DEF,$.length != nRows
AbstractFieldMatrix.java,preMultiply,v,FieldVector<T>,0,DEF,$.getDimension() != nRows
AbstractFieldMatrix.java,toString,i,int,0,DEF,$ > 0
AbstractFieldMatrix.java,toString,j,int,0,DEF,$ > 0
AbstractFieldMatrix.java,equals,object,Object,0,RET,$ instanceof FieldMatrix<?> == false
AbstractFieldMatrix.java,equals,object,null,0,RET,$ instanceof FieldMatrix<?>
AbstractFieldMatrix.java,equals,m,FieldMatrix<>,0,RET,$.getColumnDimension() != nCols
AbstractFieldMatrix.java,equals,m,FieldMatrix<>,0,RET,$.getRowDimension() != nRows
AbstractFieldMatrix.java,checkRowIndex,row,int,0,MatrixIndexException,$ < 0
AbstractFieldMatrix.java,checkColumnIndex,column,int,0,MatrixIndexException,$ < 0
AbstractFieldMatrix.java,checkSubMatrixIndex,startRow,int,0,MatrixIndexException,$ > endRow
AbstractFieldMatrix.java,checkSubMatrixIndex,startColumn,int,0,MatrixIndexException,$ > endColumn
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length == 0
BlockFieldMatrix.java,toBlocksLayout,length,int,0,DimensionMismatchException,$ != columns
BlockFieldMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,setSubMatrix,refLength,int,0,NoDataException,$ == 0
BlockFieldMatrix.java,setSubMatrix,subRow,T[],0,DimensionMismatchException,$.length != refLength
BlockFieldMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
BlockFieldMatrix.java,setRowMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != 1
BlockFieldMatrix.java,setRowMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != nCols
BlockFieldMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
BlockFieldMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
BlockFieldMatrix.java,setColumnMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getRowDimension() != nRows
BlockFieldMatrix.java,setColumnMatrix,matrix,BlockFieldMatrix<T>,0,MatrixDimensionMismatchException,$.getColumnDimension() != 1
BlockFieldMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
BlockFieldMatrix.java,setRow,array,T[],0,MatrixDimensionMismatchException,$.length != nCols
BlockFieldMatrix.java,setColumn,array,T[],0,MatrixDimensionMismatchException,$.length != nRows
BlockFieldMatrix.java,operate,v,T[],0,DimensionMismatchException,$.length != columns
BlockFieldMatrix.java,preMultiply,v,T[],0,DimensionMismatchException,$.length != rows
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,d,T[][],0,NullPointerException,$ == null
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,nRows,int,0,DEF,$ == 0
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,nCols,int,0,DEF,$ == 0
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,r,int,0,DEF,d[$].length != nCols
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,d,T[][],0,DEF,$[r].length != nCols
Array2DRowFieldMatrix.java,setSubMatrix,data,T[][],1,DEF,$ == null
Array2DRowFieldMatrix.java,setSubMatrix,row,int,0,DEF,$ > 0
Array2DRowFieldMatrix.java,setSubMatrix,column,int,0,DEF,$ > 0
Array2DRowFieldMatrix.java,setSubMatrix,nRows,int,0,DEF,$ == 0
Array2DRowFieldMatrix.java,setSubMatrix,nCols,int,0,DEF,$ == 0
Array2DRowFieldMatrix.java,setSubMatrix,i,int,0,DEF,subMatrix[$].length != nCols
Array2DRowFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,DEF,$[i].length != nCols
Array2DRowFieldMatrix.java,operate,v,T[],0,DEF,$.length != nCols
Array2DRowFieldMatrix.java,preMultiply,v,T[],0,DEF,$.length != nRows
BigMatrixImpl.java,BigMatrixImpl,rowDimension,int,0,DEF,$ < 1
BigMatrixImpl.java,BigMatrixImpl,columnDimension,int,0,DEF,$ < 1
BigMatrixImpl.java,BigMatrixImpl,d,BigDecimal[][],0,NullPointerException,$ == null
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,r,int,0,DEF,d[$].length != nCols
BigMatrixImpl.java,BigMatrixImpl,d,BigDecimal[][],0,DEF,$[r].length != nCols
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,d,double[][],0,DEF,$[row].length != nCols
BigMatrixImpl.java,BigMatrixImpl,row,int,0,DEF,d[$].length != nCols
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,d,String[][],0,DEF,$[row].length != nCols
BigMatrixImpl.java,BigMatrixImpl,row,int,0,DEF,d[$].length != nCols
BigMatrixImpl.java,getSubMatrix,startRow,int,0,MatrixIndexException,$ > endRow
BigMatrixImpl.java,getSubMatrix,startColumn,int,0,MatrixIndexException,$ > endColumn
BigMatrixImpl.java,getSubMatrix,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
BigMatrixImpl.java,getSubMatrix,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
BigMatrixImpl.java,getSubMatrix,selectedRows,int[],0,MatrixIndexException,$.length == 0
BigMatrixImpl.java,setSubMatrix,nRows,int,0,DEF,$ == 0
BigMatrixImpl.java,setSubMatrix,nCols,int,0,DEF,$ == 0
BigMatrixImpl.java,setSubMatrix,r,int,0,DEF,subMatrix[$].length != nCols
BigMatrixImpl.java,setSubMatrix,subMatrix,BigDecimal[][],0,DEF,$[r].length != nCols
BigMatrixImpl.java,setSubMatrix,data,BigDecimal[][],1,DEF,$ == null
BigMatrixImpl.java,setSubMatrix,row,int,0,DEF,$ > 0
BigMatrixImpl.java,setSubMatrix,column,int,0,DEF,$ > 0
BigMatrixImpl.java,isSingular,lu,BigDecimal[][],1,RET,$ == null
BigMatrixImpl.java,preMultiply,v,BigDecimal[],0,DEF,$.length != nRows
BigMatrixImpl.java,solve,b,BigDecimal[],0,DEF,$.length != nRows
BigMatrixImpl.java,luDecompose,nRows,int,0,NonSquareMatrixException,$ != nCols
BigMatrixImpl.java,luDecompose,largest,BigDecimal,0,DEF,sum.abs().compareTo($) == 1
BigMatrixImpl.java,luDecompose,sum,BigDecimal,0,DEF,$.abs().compareTo(largest) == 1
BigMatrixImpl.java,luDecompose,col,int,0,SingularMatrixException,lu[max][$].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,TOO_SMALL,BigDecimal,0,SingularMatrixException,lu[max][col].abs().compareTo($) <= 0
BigMatrixImpl.java,luDecompose,max,int,0,SingularMatrixException,lu[$][col].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,lu,BigDecimal[][],0,SingularMatrixException,$[max][col].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,max,int,0,DEF,$ != col
BigMatrixImpl.java,toString,data,BigDecimal[][],0,DEF,$ != null
BigMatrixImpl.java,toString,i,int,0,DEF,$ > 0
BigMatrixImpl.java,toString,j,int,0,DEF,$ > 0
BigMatrixImpl.java,equals,object,Object,0,RET,$ instanceof BigMatrixImpl == false
BigMatrixImpl.java,equals,object,null,0,RET,$ instanceof BigMatrixImpl
BigMatrixImpl.java,equals,m,BigMatrix,0,RET,$.getColumnDimension() != nCols
BigMatrixImpl.java,equals,m,BigMatrix,0,RET,$.getRowDimension() != nRows
BigMatrixImpl.java,getLUMatrix,lu,BigDecimal[][],0,DEF,$ == null
ArrayFieldVector.java,checkVectorDimensions,data,T[],0,DEF,$.length != n
ArrayFieldVector.java,equals,other,Object,0,RET,$ == null
ArrayFieldVector.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
AbstractRealVector.java,checkVectorDimensions,d,int,0,DimensionMismatchException,$ != n
AbstractRealVector.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
AbstractRealVector.java,add,v,null,0,RET,$ instanceof ArrayRealVector
AbstractRealVector.java,subtract,v,null,0,RET,$ instanceof ArrayRealVector
AbstractRealVector.java,mapAddToSelf,d,double,0,IllegalArgumentException:RET,$ != 0
AbstractRealVector.java,getMinIndex,entry,Entry,0,DEF,$.getValue() <= minValue
AbstractRealVector.java,getMaxIndex,entry,Entry,0,DEF,$.getValue() >= maxValue
AbstractRealVector.java,outerProduct,v,null,1,DEF,$ instanceof SparseRealVector
AbstractRealVector.java,SparseEntryIterator,next,EntryImpl,0,DEF,$.getValue() == 0
AbstractRealVector.java,advance,e,EntryImpl,0,RET,$ == null
AbstractRealVector.java,advance,e,EntryImpl,0,DEF,$.getIndex() >= dim
AbstractRealVector.java,next,index,int,0,NoSuchElementException,$ < 0
ArrayRealVector.java,ArrayRealVector,d,double[],0,NullPointerException,$ == null
ArrayRealVector.java,ArrayRealVector,d,double[],0,DEF,$.length == 0
ArrayRealVector.java,add,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,subtract,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,ebeMultiply,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,ebeDivide,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,dotProduct,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getDistance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getL1Distance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getLInfDistance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,unitVector,norm,double,0,DEF,$ == 0
ArrayRealVector.java,unitize,norm,double,0,DEF,$ == 0
ArrayRealVector.java,outerProduct,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,checkVectorDimensions,data,double[],0,DEF,$.length != n
ArrayRealVector.java,equals,other,Object,0,RET,$ == null
ArrayRealVector.java,equals,other,null,0,RET,$ instanceof RealVector
BiDiagonalTransformer.java,BiDiagonalTransformer,m,int,1,DEF,$ >= n
BiDiagonalTransformer.java,getU,cachedU,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getU,hK,double[],0,DEF,$[k - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,k,int,0,DEF,hK[$ - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,hK[k - $] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getB,cachedB,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getB,m,int,1,DEF,$ < n
BiDiagonalTransformer.java,getB,i,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getV,cachedV,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getV,hK,double[],0,DEF,$[k] != 0.0
BiDiagonalTransformer.java,getV,k,int,0,DEF,hK[$] != 0.0
BiDiagonalTransformer.java,getV,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,b,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,b,double,0,DEF,$ != 0.0
OpenMapRealVector.java,add,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,append,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,dotProduct,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getSubVector,key,int,0,DEF,$ >= index
OpenMapRealVector.java,getSubVector,key,int,0,DEF,$ < end
OpenMapRealVector.java,getDistance,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getL1Distance,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getLInfDistance,delta,double,0,DEF,$ > max
OpenMapRealVector.java,getLInfDistance,iter,Iterator,0,DEF,$.value() > max
OpenMapRealVector.java,getLInfDistance,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getLInfDistance,delta,double,0,DEF,$ > max
OpenMapRealVector.java,subtract,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,equals,obj,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
FieldLUDecompositionImpl.java,FieldLUDecompositionImpl,nonZero,int,0,RET,$ >= m
FieldLUDecompositionImpl.java,FieldLUDecompositionImpl,nonZero,int,0,DEF,$ != col
FieldLUDecompositionImpl.java,getL,cachedL,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecompositionImpl.java,getU,cachedU,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecompositionImpl.java,getP,cachedP,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecompositionImpl.java,solve,b,T[],0,DEF,$.length != m
FieldLUDecompositionImpl.java,solve,b,FieldVector<T>,0,DEF,$.getDimension() != m
FieldLUDecompositionImpl.java,solve,b,FieldMatrix<T>,0,DEF,$.getRowDimension() != m
LevenbergMarquardtEstimator.java,estimate,dk,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,estimate,s,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,estimate,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtEstimator.java,estimate,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtEstimator.java,estimate,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,estimate,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,DEF,$ >= 1.0e-4
LevenbergMarquardtEstimator.java,estimate,actRed,double,0,RET,FastMath.abs($) <= costRelativeTolerance
LevenbergMarquardtEstimator.java,estimate,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtEstimator.java,estimate,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtEstimator.java,estimate,actRed,double,1,EstimationException,FastMath.abs($) <= 2.2204e-16
LevenbergMarquardtEstimator.java,estimate,preRed,double,1,EstimationException,$ <= 2.2204e-16
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,EstimationException,$ <= 2.0
LevenbergMarquardtEstimator.java,estimate,maxCosine,double,0,EstimationException,$ <= 2.2204e-16
LevenbergMarquardtEstimator.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtEstimator.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtEstimator.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtEstimator.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtEstimator.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtEstimator.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtEstimator.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtEstimator.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtEstimator.java,qrDecomposition,ak2,double,0,RET,$ == 0
AbstractEstimator.java,updateResidualsAndCost,costEvaluations,int,0,EstimationException,++$ > maxCostEval
AbstractEstimator.java,guessParametersErrors,m,int,0,EstimationException,$ <= p
DfpDec.java,round,msb,int,0,RET,$ == 0
DfpDec.java,round,lsbthreshold,int,0,RET,$ <= 1
DfpDec.java,round,lsbthreshold,int,1,DEF,$ == 1
DfpDec.java,round,rh,int,0,DEF,$ != 0
DfpDec.java,round,exp,int,0,RET,$ < MIN_EXP
DfpDec.java,round,exp,int,0,RET,$ > MAX_EXP
DfpDec.java,round,n,int,0,RET,$ != 0
DfpDec.java,round,discarded,int,0,RET,$ != 0
DfpDec.java,nextAfter,result,Dfp,0,DEF,$.classify() == INFINITE
Dfp.java,Dfp,x,long,0,DEF,$ == Long.MIN_VALUE
Dfp.java,Dfp,x,long,1,DEF,$ < 0
Dfp.java,Dfp,mant,int[],0,DEF,$[i] != 0
Dfp.java,Dfp,i,int,0,DEF,mant[$] != 0
Dfp.java,Dfp,exponent,int,0,RET,$ == -1023
Dfp.java,Dfp,x,double,0,RET,$ == 0
Dfp.java,Dfp,exponent,int,0,RET,$ == 1024
Dfp.java,Dfp,x,double,1,DEF,$ != x
Dfp.java,Dfp,x,double,1,DEF,$ < 0
Dfp.java,Dfp,bits,long,0,DEF,($ & 0x8000000000000000L) != 0
Dfp.java,Dfp,p,int,0,DEF,$ == -1
Dfp.java,Dfp,p,int,1,DEF,$ != -1
Dfp.java,Dfp,fpexp,String,0,DEF,$.charAt(i) == '-'
Dfp.java,Dfp,i,int,0,DEF,fpexp.charAt($) == '-'
Dfp.java,Dfp,fpexp,String,0,DEF,$.charAt(i) >= '0'
Dfp.java,Dfp,i,int,0,DEF,fpexp.charAt($) >= '0'
Dfp.java,Dfp,fpexp,String,0,DEF,$.charAt(i) <= '9'
Dfp.java,Dfp,i,int,0,DEF,fpexp.charAt($) <= '9'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.indexOf(-") != -1"
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) >= '1'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) >= '1'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) <= '9'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) <= '9'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) == '0'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) == '0'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) == '.'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) == '.'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) == '.'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) == '.'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) < '0'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) < '0'
Dfp.java,Dfp,p,int,0,DEF,fpdecimal.charAt($) > '9'
Dfp.java,Dfp,fpdecimal,String,0,DEF,$.charAt(p) > '9'
Dfp.java,Dfp,q,int,0,DEF,$ != offset
Dfp.java,Dfp,q,int,0,DEF,$ == offset
Dfp.java,Dfp,striped,char[],1,DEF,$[q] == '0'
Dfp.java,Dfp,q,int,1,DEF,striped[$] == '0'
Dfp.java,Dfp,significantDigits,int,0,DEF,$ == 0
Dfp.java,Dfp,p,int,0,DEF,striped[$] != '0'
Dfp.java,Dfp,striped,char[],0,DEF,$[p] != '0'
Dfp.java,Dfp,q,int,0,DEF,$ < striped.length
Dfp.java,align,adiff,int,0,DEF,$ < 0
Dfp.java,align,diff,int,0,RET,$ == 0
Dfp.java,align,diff,int,1,DEF,$ < 0
Dfp.java,align,lostdigit,int,0,DEF,$ != 0
Dfp.java,equals,other,null,0,RET,$ instanceof Dfp
Dfp.java,compare,a,Dfp,0,RET,$.mant[$.mant.length - 1] == 0
Dfp.java,compare,b,Dfp,0,RET,$.mant[$.mant.length - 1] == 0
Dfp.java,compare,a,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,a,Dfp,0,RET,$.sign != b.sign
Dfp.java,compare,a,Dfp,1,RET,$.sign == -1
Dfp.java,compare,a,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,a,Dfp,0,RET,$.nans == FINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,a,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,b,Dfp,0,RET,$.nans == INFINITE
Dfp.java,compare,b,Dfp,0,RET,$.mant[$.mant.length-1] != 0
Dfp.java,compare,a,Dfp,0,RET,$.mant[b.mant.length-1] != 0
Dfp.java,compare,b,Dfp,0,RET,a.mant[$.mant.length-1] != 0
Dfp.java,compare,a,Dfp,0,RET,$.exp < b.exp
Dfp.java,compare,a,Dfp,0,RET,$.exp > b.exp
Dfp.java,remainder,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,remainder,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,trunc,nans,byte,0,RET,$ == INFINITE
Dfp.java,trunc,mant,int[],0,RET,$[$.length-1] == 0
Dfp.java,trunc,exp,int,0,RET,$ < 0
Dfp.java,trunc,exp,int,0,RET,$ >= mant.length
Dfp.java,trunc,result,Dfp,0,DEF,$.sign == -1
Dfp.java,trunc,result,Dfp,0,DEF,$.sign == 1
Dfp.java,trunc,result,Dfp,0,DEF,$.exp > 0
Dfp.java,trunc,result,Dfp,0,DEF,($.mant[mant.length-$.exp]&1) != 0
Dfp.java,trunc,mant,int[],0,DEF,(result.mant[$.length-result.exp]&1) != 0
Dfp.java,intValue,rounded,Dfp,0,DEF,$.sign == -1
Dfp.java,log10,mant,int[],0,RET,$[$.length-1] > 1000
Dfp.java,log10,mant,int[],0,RET,$[$.length-1] > 100
Dfp.java,log10,mant,int[],0,RET,$[$.length-1] > 10
Dfp.java,power10,e,int,1,DEF,$ >= 0
Dfp.java,add,nans,byte,0,RET,$ != FINITE
Dfp.java,add,x,Dfp,0,RET,$.nans != FINITE
Dfp.java,add,nans,byte,0,RET,$ == INFINITE
Dfp.java,add,x,Dfp,0,RET,$.nans == FINITE
Dfp.java,add,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,add,nans,byte,0,RET,$ == FINITE
Dfp.java,add,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,add,nans,byte,0,RET,$ == INFINITE
Dfp.java,add,sign,byte,0,RET,$ == x.sign
Dfp.java,add,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,add,nans,byte,0,RET,$ == INFINITE
Dfp.java,add,sign,byte,0,RET,$ != x.sign
Dfp.java,add,a,Dfp,0,DEF,compare($, b) > 0
Dfp.java,add,b,Dfp,0,DEF,compare(a, $) > 0
Dfp.java,add,b,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,add,mant,int[],0,DEF,b.mant[$.length-1] == 0
Dfp.java,add,a,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,add,mant,int[],0,DEF,a.mant[$.length-1] == 0
Dfp.java,add,a,Dfp,1,DEF,$.exp < b.exp
Dfp.java,add,asign,byte,0,DEF,$ != bsign
Dfp.java,add,asign,byte,1,DEF,$ == rsign
Dfp.java,add,rh,int,0,DEF,$ != 0
Dfp.java,add,asign,byte,0,DEF,$ == bsign
Dfp.java,add,excp,int,0,DEF,$ != 0
Dfp.java,add,result,Dfp,0,DEF,$.mant[mant.length-1] != 0
Dfp.java,add,mant,int[],0,DEF,result.mant[$.length-1] != 0
Dfp.java,add,i,int,0,DEF,$ == 0
Dfp.java,add,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,add,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,add,asign,byte,0,DEF,$ != bsign
Dfp.java,add,excp,int,0,DEF,$ != 0
Dfp.java,round,rh,int,0,DEF,$ != 0
Dfp.java,round,exp,int,0,RET,$ < MIN_EXP
Dfp.java,round,exp,int,0,RET,$ > MAX_EXP
Dfp.java,round,n,int,0,RET,$ != 0
Dfp.java,multiply,nans,byte,0,RET,$ != FINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans != FINITE
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans == FINITE
Dfp.java,multiply,x,Dfp,0,RET,$.mant[mant.length-1] != 0
Dfp.java,multiply,mant,int[],0,RET,x.mant[$.length-1] != 0
Dfp.java,multiply,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,multiply,nans,byte,0,RET,$ == FINITE
Dfp.java,multiply,mant,int[],0,RET,$[$.length-1] != 0
Dfp.java,multiply,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans == INFINITE
Dfp.java,multiply,nans,byte,0,RET,$ == FINITE
Dfp.java,multiply,mant,int[],0,RET,$[$.length-1] == 0
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,Dfp,0,RET,$.nans == FINITE
Dfp.java,multiply,x,Dfp,0,RET,$.mant[mant.length-1] == 0
Dfp.java,multiply,mant,int[],0,RET,x.mant[$.length-1] == 0
Dfp.java,multiply,product,int[],0,DEF,$[i] != 0
Dfp.java,multiply,i,int,0,DEF,product[$] != 0
Dfp.java,multiply,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,multiply,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,multiply,excp,int,0,DEF,$ != 0
Dfp.java,multiply,nans,byte,0,RET,$ != FINITE
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,int,0,RET,$ != 0
Dfp.java,multiply,nans,byte,0,RET,$ == INFINITE
Dfp.java,multiply,x,int,0,RET,$ == 0
Dfp.java,multiply,x,int,0,RET,$ < 0
Dfp.java,multiply,x,int,0,RET,$ >= RADIX
Dfp.java,multiply,rh,int,0,DEF,$ != 0
Dfp.java,multiply,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,multiply,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,multiply,excp,int,0,DEF,$ != 0
Dfp.java,divide,nans,byte,0,RET,$ != FINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans != FINITE
Dfp.java,divide,nans,byte,0,RET,$ == INFINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans == FINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans == INFINITE
Dfp.java,divide,nans,byte,0,RET,$ == FINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.nans == INFINITE
Dfp.java,divide,nans,byte,0,RET,$ == INFINITE
Dfp.java,divide,divisor,Dfp,0,RET,$.mant[mant.length-1] == 0
Dfp.java,divide,mant,int[],0,RET,divisor.mant[$.length-1] == 0
Dfp.java,divide,rh,int,0,DEF,$ == 0
Dfp.java,divide,minadj,int,0,DEF,$ >= 2
Dfp.java,divide,mant,int[],0,DEF,remainder[$.length] != 0
Dfp.java,divide,remainder,int[],0,DEF,$[mant.length] != 0
Dfp.java,divide,trialgood,boolean,0,DEF,$ == false
Dfp.java,divide,trial,int,0,DEF,$ != 0
Dfp.java,divide,nsqd,int,0,DEF,$ != 0
Dfp.java,divide,field,DfpField,0,DEF,$.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN
Dfp.java,divide,nsqd,int,0,DEF,$ == mant.length
Dfp.java,divide,nsqd,int,0,DEF,$ > mant.length
Dfp.java,divide,quotient,int[],0,DEF,$[i] != 0
Dfp.java,divide,i,int,0,DEF,quotient[$] != 0
Dfp.java,divide,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,divide,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,divide,excp,int,0,DEF,$ != 0
Dfp.java,divide,nans,byte,0,RET,$ != FINITE
Dfp.java,divide,nans,byte,0,RET,$ == INFINITE
Dfp.java,divide,divisor,int,0,RET,$ == 0
Dfp.java,divide,divisor,int,0,RET,$ < 0
Dfp.java,divide,divisor,int,0,RET,$ >= RADIX
Dfp.java,divide,result,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,divide,mant,int[],0,DEF,result.mant[$.length-1] == 0
Dfp.java,divide,excp,int,0,DEF,$ != 0
Dfp.java,sqrt,nans,byte,0,RET,$ == FINITE
Dfp.java,sqrt,mant,int[],0,RET,$[$.length-1] == 0
Dfp.java,sqrt,nans,byte,0,RET,$ != FINITE
Dfp.java,sqrt,nans,byte,0,RET,$ == INFINITE
Dfp.java,sqrt,sign,byte,0,RET,$ == 1
Dfp.java,sqrt,nans,byte,0,RET,$ == QNAN
Dfp.java,sqrt,nans,byte,0,RET,$ == SNAN
Dfp.java,sqrt,sign,byte,0,RET,$ == -1
Dfp.java,sqrt,x,Dfp,0,DEF,$.exp < -1
Dfp.java,sqrt,x,Dfp,0,DEF,$.exp > 1
Dfp.java,sqrt,dx,Dfp,0,DEF,$.mant[mant.length-1] == 0
Dfp.java,sqrt,mant,int[],0,DEF,dx.mant[$.length-1] == 0
Dfp.java,toString,nans,byte,0,RET,$ != FINITE
Dfp.java,toString,nans,byte,1,RET,$ == INFINITE
Dfp.java,toString,exp,int,0,RET,$ > mant.length
Dfp.java,toString,exp,int,0,RET,$ < -1
Dfp.java,dfp2sci,p,int,0,DEF,rawdigits[$] != '0'
Dfp.java,dfp2sci,rawdigits,char[],0,DEF,$[p] != '0'
Dfp.java,dfp2sci,sign,byte,0,DEF,$ == -1
Dfp.java,dfp2sci,p,int,1,DEF,$ != rawdigits.length
Dfp.java,dfp2sci,e,int,0,DEF,$ < 0
Dfp.java,dfp2sci,e,int,0,DEF,$ < 0
Dfp.java,dfp2string,e,int,0,DEF,$ <= 0
Dfp.java,dfp2string,e,int,0,DEF,--$ == 0
Dfp.java,dfp2string,q,int,0,DEF,buffer[$] == '.'
Dfp.java,dfp2string,buffer,char[],0,DEF,$[q] == '.'
Dfp.java,dfp2string,sign,byte,0,DEF,$ < 0
Dfp.java,dotrap,nans,byte,0,DEF,$ == FINITE
Dfp.java,dotrap,mant,int[],0,DEF,$[$.length-1] != 0
Dfp.java,dotrap,nans,byte,0,DEF,$ == FINITE
Dfp.java,dotrap,mant,int[],0,DEF,$[$.length-1] == 0
Dfp.java,dotrap,nans,byte,0,DEF,$ == INFINITE
Dfp.java,dotrap,nans,byte,0,DEF,$ == QNAN
Dfp.java,dotrap,nans,byte,0,DEF,$ == INFINITE
Dfp.java,dotrap,nans,byte,0,DEF,$ == SNAN
Dfp.java,dotrap,result,Dfp,1,DEF,($.exp+mant.length) < MIN_EXP
Dfp.java,dotrap,mant,int[],1,DEF,(result.exp+$.length) < MIN_EXP
Dfp.java,nextAfter,x,Dfp,0,RET,compare(this, $) == 0
Dfp.java,nextAfter,result,Dfp,0,DEF,$.classify() == INFINITE
Dfp.java,toDouble,exponent,int,0,DEF,$ < 0
Dfp.java,toDouble,exponent,int,0,DEF,$ > -1023
Dfp.java,toDouble,exponent,int,0,RET,$ < -1074
Dfp.java,toDouble,exponent,int,0,RET,$ > 1023
Dfp.java,toDouble,mantissa,long,0,DEF,$ == 4503599627370496L
Dfp.java,toDouble,exponent,int,0,DEF,$ <= -1023
DfpMath.java,split,buf,char[],0,DEF,$[i] >= '1'
DfpMath.java,split,i,int,0,DEF,buf[$] >= '1'
DfpMath.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpMath.java,split,i,int,0,DEF,buf[$] <= '9'
DfpMath.java,split,buf,char[],0,DEF,$[i] == '.'
DfpMath.java,split,i,int,0,DEF,buf[$] == '.'
DfpMath.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpMath.java,split,i,int,0,DEF,buf[$] >= '0'
DfpMath.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpMath.java,split,i,int,0,DEF,buf[$] <= '9'
DfpMath.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpMath.java,split,i,int,0,DEF,buf[$] >= '0'
DfpMath.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpMath.java,split,i,int,0,DEF,buf[$] <= '9'
DfpMath.java,split,i,int,0,DEF,$ < sp
DfpMath.java,splitMult,result,Dfp[],0,RET,$[0].classify() == Dfp.INFINITE
DfpMath.java,splitPow,a,int,0,RET,$ == 0
DfpMath.java,splitPow,a,int,0,DEF,$ < 0
DfpMath.java,splitPow,trial,int,0,DEF,$ > a
DfpMath.java,pow,a,int,0,RET,$ == 0
DfpMath.java,pow,a,int,0,DEF,$ < 0
DfpMath.java,exp,ia,int,0,RET,$ > 2147483646
DfpMath.java,exp,ia,int,0,RET,$ < -2147483646
DfpMath.java,log,a,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,1,RET,$.classify() == Dfp.FINITE
DfpMath.java,pow,y,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,x,Dfp,0,RET,$.classify() == Dfp.INFINITE
DfpMath.java,pow,y,Dfp,1,RET,$.classify() == Dfp.FINITE
DfpField.java,split,buf,char[],0,DEF,$[i] >= '1'
DfpField.java,split,i,int,0,DEF,buf[$] >= '1'
DfpField.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpField.java,split,i,int,0,DEF,buf[$] <= '9'
DfpField.java,split,buf,char[],0,DEF,$[i] == '.'
DfpField.java,split,i,int,0,DEF,buf[$] == '.'
DfpField.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpField.java,split,i,int,0,DEF,buf[$] >= '0'
DfpField.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpField.java,split,i,int,0,DEF,buf[$] <= '9'
DfpField.java,split,buf,char[],0,DEF,$[i] >= '0'
DfpField.java,split,i,int,0,DEF,buf[$] >= '0'
DfpField.java,split,buf,char[],0,DEF,$[i] <= '9'
DfpField.java,split,i,int,0,DEF,buf[$] <= '9'
DfpField.java,split,i,int,0,DEF,$ < sp
DfpField.java,computeStringConstants,sqr2String,String,0,DEF,$ == null
SimplexSolver.java,getPivotColumn,epsilon,double,0,DEF,MathUtils.compareTo(tableau.getEntry(0, i), minValue, $) < 0
SimplexSolver.java,getPivotColumn,tableau,SimplexTableau,0,DEF,MathUtils.compareTo($.getEntry(0, i), minValue, epsilon) < 0
SimplexSolver.java,getPivotColumn,minValue,double,0,DEF,MathUtils.compareTo(tableau.getEntry(0, i), $, epsilon) < 0
SimplexSolver.java,getPivotColumn,i,int,0,DEF,MathUtils.compareTo(tableau.getEntry(0, $), minValue, epsilon) < 0
SimplexSolver.java,getPivotRow,epsilon,double,0,DEF,MathUtils.compareTo(entry, 0, $) > 0
SimplexSolver.java,getPivotRow,entry,double,0,DEF,MathUtils.compareTo($, 0, epsilon) > 0
SimplexSolver.java,getPivotRow,ratio,double,0,DEF,$ < minRatio
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,1,RET,$.size() == 0
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,0,RET,$.size() > 1
SimplexSolver.java,doIteration,pivotRow,Integer,0,UnboundedSolutionException,$ == null
SimplexSolver.java,doIteration,i,int,0,DEF,$ != pivotRow
SimplexSolver.java,solvePhase1,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() == 0
SimplexTableau.java,createTableau,constraint,LinearConstraint,1,DEF,$.getRelationship() == Relationship.LEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.EQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,normalize,constraint,LinearConstraint,0,RET,$.getValue() < 0
SimplexTableau.java,getConstraintTypeCounts,constraint,LinearConstraint,0,DEF,$.getRelationship() == relationship
SimplexTableau.java,getBasicRow,row,Integer,1,DEF,$ == null
SimplexTableau.java,dropPhase1Objective,epsilon,double,0,DEF,MathUtils.compareTo(tableau.getEntry(0, i), 0, $) > 0
SimplexTableau.java,dropPhase1Objective,tableau,RealMatrix,0,DEF,MathUtils.compareTo($.getEntry(0, i), 0, epsilon) > 0
SimplexTableau.java,dropPhase1Objective,i,int,0,DEF,MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) > 0
SimplexTableau.java,dropPhase1Objective,col,int,0,DEF,getBasicRow($) == null
SimplexTableau.java,isOptimal,epsilon,double,0,RET,MathUtils.compareTo(tableau.getEntry(0, i), 0, $) < 0
SimplexTableau.java,isOptimal,tableau,RealMatrix,0,RET,MathUtils.compareTo($.getEntry(0, i), 0, epsilon) < 0
SimplexTableau.java,isOptimal,i,int,0,RET,MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) < 0
SimplexTableau.java,getSolution,colIndex,int,0,DEF,$ < 0
SimplexTableau.java,equals,other,null,0,RET,$ instanceof SimplexTableau
AbstractLinearOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
LinearObjectiveFunction.java,equals,other,null,0,RET,$ instanceof LinearObjectiveFunction
LinearConstraint.java,equals,other,null,0,RET,$ instanceof LinearConstraint
MultiStartUnivariateRealOptimizer.java,getOptima,optima,UnivariateRealPointValuePair[],0,MathIllegalStateException,$ == null
MultiStartUnivariateRealOptimizer.java,optimize,optima,UnivariateRealPointValuePair[],0,ConvergenceException,$[0] == null
MultiStartUnivariateRealOptimizer.java,compare,o1,UnivariateRealPointValuePair,1,RET,$ == null
MultiStartUnivariateRealOptimizer.java,compare,o2,UnivariateRealPointValuePair,0,RET,$ == null
BrentOptimizer.java,BrentOptimizer,rel,double,0,NumberIsTooSmallException,$ < MIN_RELATIVE_TOLERANCE
BrentOptimizer.java,BrentOptimizer,abs,double,0,NotStrictlyPositiveException,$ <= 0
BrentOptimizer.java,doOptimize,lo,double,1,DEF,$ < hi
BrentOptimizer.java,doOptimize,e,double,1,DEF,FastMath.abs($) > tol1
BrentOptimizer.java,doOptimize,q,double,1,DEF,$ > 0
BrentOptimizer.java,doOptimize,a,double,0,DEF,u - $ < tol2
BrentOptimizer.java,doOptimize,u,double,0,DEF,$ - a < tol2
BrentOptimizer.java,doOptimize,b,double,0,DEF,$ - u < tol2
BrentOptimizer.java,doOptimize,u,double,0,DEF,b - $ < tol2
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ <= m
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ < m
BrentOptimizer.java,doOptimize,x,double,1,DEF,$ < m
BrentOptimizer.java,doOptimize,d,double,1,DEF,FastMath.abs($) < tol1
BrentOptimizer.java,doOptimize,d,double,1,DEF,$ >= 0
BrentOptimizer.java,doOptimize,fu,double,1,DEF,$ <= fx
BrentOptimizer.java,doOptimize,u,double,1,DEF,$ < x
BrentOptimizer.java,doOptimize,u,double,1,DEF,$ < x
BrentOptimizer.java,doOptimize,fu,double,1,DEF,$ <= fw
BrentOptimizer.java,doOptimize,fu,double,0,DEF,$ <= fv
BrentOptimizer.java,doOptimize,checker,ConvergenceChecker<UnivariateRealPointValuePair>,0,RET,$ != null
AbstractUnivariateRealOptimizer.java,optimize,f,UnivariateRealFunction,0,NullArgumentException,$ == null
AbstractUnivariateRealOptimizer.java,optimize,goalType,GoalType,0,NullArgumentException,$ == null
BracketFinder.java,BracketFinder,growLimit,double,0,NotStrictlyPositiveException,$ <= 0
BracketFinder.java,BracketFinder,maxEvaluations,int,0,NotStrictlyPositiveException,$ <= 0
BracketFinder.java,search,fA,double,0,DEF,$ < fB
BracketFinder.java,search,fA,double,0,DEF,$ > fB
BracketFinder.java,search,w,double,1,DEF,($ - xC) * (xB - $) > 0
BracketFinder.java,search,xB,double,1,DEF,(w - xC) * ($ - w) > 0
BracketFinder.java,search,xC,double,1,DEF,(w - $) * (xB - w) > 0
BracketFinder.java,search,fW,double,1,DEF,$ < fC
BracketFinder.java,search,fW,double,1,DEF,$ > fC
BracketFinder.java,search,fW,double,0,DEF,$ > fB
BracketFinder.java,search,fW,double,0,DEF,$ < fB
BracketFinder.java,search,w,double,1,DEF,($ - wLim) * (wLim - xC) >= 0
BracketFinder.java,search,xC,double,1,DEF,(w - wLim) * (wLim - $) >= 0
BracketFinder.java,search,wLim,double,1,DEF,(w - $) * ($ - xC) >= 0
BracketFinder.java,search,w,double,1,DEF,($ - wLim) * (xC - $) > 0
BracketFinder.java,search,xC,double,1,DEF,(w - wLim) * ($ - w) > 0
BracketFinder.java,search,wLim,double,1,DEF,(w - $) * (xC - w) > 0
BracketFinder.java,search,fW,double,0,DEF,$ < fC
BracketFinder.java,search,fW,double,0,DEF,$ > fC
BracketFinder.java,search,lo,double,0,DEF,$ > hi
HarmonicFitter.java,fit,parameters,double[],0,OptimizationException,$ == null
HarmonicFitter.java,fit,observations,WeightedObservedPoint[],0,OptimizationException,$.length < 4
HarmonicCoefficientsGuesser.java,sortObservations,i,int,1,DEF,$-- != 0
HarmonicCoefficientsGuesser.java,guessAOmega,c1,double,0,OptimizationException,$ / c2 < 0.0
HarmonicCoefficientsGuesser.java,guessAOmega,c2,double,0,OptimizationException,c1 / $ < 0.0
HarmonicCoefficientsGuesser.java,guessAOmega,c3,double,0,OptimizationException,c2 / $ < 0.0
HarmonicCoefficientsGuesser.java,guessAOmega,c2,double,0,OptimizationException,$ / c3 < 0.0
GaussianParametersGuesser.java,GaussianParametersGuesser,observations,WeightedObservedPoint[],0,NullArgumentException,$ == null
GaussianParametersGuesser.java,GaussianParametersGuesser,observations,WeightedObservedPoint[],0,NumberIsTooSmallException,$.length < 3
GaussianParametersGuesser.java,guess,parameters,double[],0,DEF,$ == null
GaussianParametersGuesser.java,interpolateXAtY,idxStep,int,0,ZeroException,$ == 0
GaussianParametersGuesser.java,interpolateXAtY,pointA,WeightedObservedPoint,0,RET,$.getY() == y
GaussianParametersGuesser.java,interpolateXAtY,pointB,WeightedObservedPoint,0,RET,$.getY() == y
GaussianParametersGuesser.java,getInterpolationPointsForY,idxStep,int,0,ZeroException,$ == 0
GaussianParametersGuesser.java,compare,p1,WeightedObservedPoint,0,RET,$ == null
GaussianParametersGuesser.java,compare,p2,WeightedObservedPoint,0,RET,$ == null
GaussianParametersGuesser.java,compare,p1,WeightedObservedPoint,0,RET,$ == null
GaussianParametersGuesser.java,compare,p2,WeightedObservedPoint,0,RET,$ == null
ParametricGaussianFunction.java,validateParameters,parameters,double[],0,NullArgumentException,$ == null
ParametricGaussianFunction.java,validateParameters,parameters,double[],0,DimensionMismatchException,$.length != 4
ParametricGaussianFunction.java,validateParameters,parameters,double[],0,ZeroException,$[3] == 0.0
GaussianDerivativeFunction.java,GaussianDerivativeFunction,d,double,0,ZeroException,$ == 0.0
GaussianDerivativeFunction.java,GaussianDerivativeFunction,parameters,double[],0,NullArgumentException,$ == null
GaussianDerivativeFunction.java,GaussianDerivativeFunction,parameters,double[],0,DimensionMismatchException,$.length != 3
GaussianDerivativeFunction.java,GaussianDerivativeFunction,parameters,double[],0,ZeroException,$[2] == 0.0
GaussianFunction.java,GaussianFunction,d,double,0,ZeroException,$ == 0.0
GaussianFunction.java,GaussianFunction,parameters,double[],0,NullArgumentException,$ == null
GaussianFunction.java,GaussianFunction,parameters,double[],0,DimensionMismatchException,$.length != 4
GaussianFunction.java,GaussianFunction,parameters,double[],0,ZeroException,$[3] == 0.0
BaseMultiStartMultivariateRealOptimizer.java,getOptima,optima,RealPointValuePair[],0,MathIllegalStateException,$ == null
BaseMultiStartMultivariateRealOptimizer.java,optimize,optima,RealPointValuePair[],0,ConvergenceException,$[0] == null
BaseMultiStartMultivariateRealOptimizer.java,compare,o1,RealPointValuePair,1,RET,$ == null
BaseMultiStartMultivariateRealOptimizer.java,compare,o2,RealPointValuePair,0,RET,$ == null
BaseMultiStartMultivariateVectorialOptimizer.java,getOptima,optima,VectorialPointValuePair[],0,MathIllegalStateException,$ == null
BaseMultiStartMultivariateVectorialOptimizer.java,optimize,optima,VectorialPointValuePair[],0,ConvergenceException,$[0] == null
BaseMultiStartMultivariateVectorialOptimizer.java,compare,o1,VectorialPointValuePair,1,RET,$ == null
BaseMultiStartMultivariateVectorialOptimizer.java,compare,o2,VectorialPointValuePair,0,RET,$ == null
LeastSquaresConverter.java,LeastSquaresConverter,observations,double[],0,DEF,$.length != weights.length
LeastSquaresConverter.java,value,residuals,double[],0,FunctionEvaluationException,$.length != observations.length
LeastSquaresConverter.java,value,weights,double[],1,DEF,$ != null
LeastSquaresConverter.java,value,scale,RealMatrix,1,DEF,$ != null
PowellOptimizer.java,PowellOptimizer,rel,double,0,NumberIsTooSmallException,$ < MIN_RELATIVE_TOLERANCE
PowellOptimizer.java,PowellOptimizer,abs,double,0,NotStrictlyPositiveException,$ <= 0
PowellOptimizer.java,doOptimize,fX2,double,0,DEF,($ - fVal) > delta
PowellOptimizer.java,doOptimize,fVal,double,0,DEF,(fX2 - $) > delta
PowellOptimizer.java,doOptimize,checker,ConvergenceChecker<RealPointValuePair>,0,DEF,$ != null
PowellOptimizer.java,doOptimize,goal,GoalType,1,RET,$ == GoalType.MINIMIZE
PowellOptimizer.java,doOptimize,fX,double,0,DEF,$ > fX2
PowellOptimizer.java,doOptimize,t,double,0,DEF,$ < 0.0
BaseAbstractScalarOptimizer.java,optimize,f,FUNC,0,NullArgumentException,$ == null
BaseAbstractScalarOptimizer.java,optimize,goalType,GoalType,0,NullArgumentException,$ == null
BaseAbstractScalarOptimizer.java,optimize,startPoint,double[],0,NullArgumentException,$ == null
DirectSearchOptimizer.java,setStartConfiguration,j,int,0,DEF,steps[$] == 0.0
DirectSearchOptimizer.java,setStartConfiguration,steps,double[],0,DEF,$[j] == 0.0
DirectSearchOptimizer.java,setStartConfiguration,n,int,0,DEF,$ < 0
DirectSearchOptimizer.java,setStartConfiguration,refI,double[],0,DimensionMismatchException,$.length != n
DirectSearchOptimizer.java,setStartConfiguration,i,int,0,DEF,$ > 0
DirectSearchOptimizer.java,doOptimize,startConfiguration,double[][],0,DEF,$ == null
DirectSearchOptimizer.java,doOptimize,startConfiguration,double[][],0,DEF,$.length != startPoint.length
DirectSearchOptimizer.java,doOptimize,iteration,int,0,RET,$ > 0
DirectSearchOptimizer.java,buildSimplex,n,int,0,DimensionMismatchException,$ != startConfiguration.length
DirectSearchOptimizer.java,replaceWorstPoint,comparator,Comparator<RealPointValuePair>,0,DEF,$.compare(simplex[i], pointValuePair) > 0
DirectSearchOptimizer.java,replaceWorstPoint,pointValuePair,RealPointValuePair,0,DEF,comparator.compare(simplex[i], $) > 0
DirectSearchOptimizer.java,replaceWorstPoint,simplex,RealPointValuePair[],0,DEF,comparator.compare($[i], pointValuePair) > 0
DirectSearchOptimizer.java,replaceWorstPoint,i,int,0,DEF,comparator.compare(simplex[$], pointValuePair) > 0
BaseAbstractVectorialOptimizer.java,optimize,f,FUNC,0,NullArgumentException,$ == null
BaseAbstractVectorialOptimizer.java,optimize,t,double[],0,NullArgumentException,$ == null
BaseAbstractVectorialOptimizer.java,optimize,w,double[],0,NullArgumentException,$ == null
BaseAbstractVectorialOptimizer.java,optimize,startPoint,double[],0,NullArgumentException,$ == null
BaseAbstractVectorialOptimizer.java,optimize,t,double[],0,DimensionMismatchException,$.length != w.length
MultiDirectional.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(reflected, best) < 0
MultiDirectional.java,iterateSimplex,reflected,RealPointValuePair,0,RET,comparator.compare($, best) < 0
MultiDirectional.java,iterateSimplex,best,RealPointValuePair,0,RET,comparator.compare(reflected, $) < 0
MultiDirectional.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,DEF,$.compare(reflected, expanded) <= 0
MultiDirectional.java,iterateSimplex,expanded,RealPointValuePair,0,DEF,comparator.compare(reflected, $) <= 0
MultiDirectional.java,iterateSimplex,reflected,RealPointValuePair,0,DEF,comparator.compare($, expanded) <= 0
MultiDirectional.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(contracted, best) < 0
MultiDirectional.java,iterateSimplex,contracted,RealPointValuePair,0,RET,comparator.compare($, best) < 0
MultiDirectional.java,iterateSimplex,best,RealPointValuePair,0,RET,comparator.compare(contracted, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(best, reflected) <= 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare(best, $) <= 0
NelderMead.java,iterateSimplex,best,RealPointValuePair,1,DEF,comparator.compare($, reflected) <= 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(reflected, secondBest) < 0
NelderMead.java,iterateSimplex,secondBest,RealPointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare($, secondBest) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(reflected, best) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare($, best) < 0
NelderMead.java,iterateSimplex,best,RealPointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(expanded, reflected) < 0
NelderMead.java,iterateSimplex,expanded,RealPointValuePair,1,DEF,comparator.compare($, reflected) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare(expanded, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,RET,$.compare(reflected, worst) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,RET,comparator.compare($, worst) < 0
NelderMead.java,iterateSimplex,worst,RealPointValuePair,1,RET,comparator.compare(reflected, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(outContracted, reflected) <= 0
NelderMead.java,iterateSimplex,outContracted,RealPointValuePair,0,RET,comparator.compare($, reflected) <= 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,0,RET,comparator.compare(outContracted, $) <= 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(inContracted, worst) < 0
NelderMead.java,iterateSimplex,worst,RealPointValuePair,0,RET,comparator.compare(inContracted, $) < 0
NelderMead.java,iterateSimplex,inContracted,RealPointValuePair,0,RET,comparator.compare($, worst) < 0
NonLinearConjugateGradientOptimizer.java,setInitialStep,initialStep,double,1,DEF,$ <= 0
NonLinearConjugateGradientOptimizer.java,doOptimize,preconditioner,Preconditioner,0,DEF,$ == null
NonLinearConjugateGradientOptimizer.java,doOptimize,solver,UnivariateRealSolver,0,DEF,$ == null
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,previous,RealPointValuePair,0,RET,$ != null
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,updateFormula,ConjugateGradientFormula,1,DEF,$ == ConjugateGradientFormula.FLETCHER_REEVES
NonLinearConjugateGradientOptimizer.java,doOptimize,iter,int,1,DEF,$ % n == 0
NonLinearConjugateGradientOptimizer.java,doOptimize,n,int,1,DEF,iter % $ == 0
NonLinearConjugateGradientOptimizer.java,doOptimize,beta,double,1,DEF,$ < 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yA,double,0,RET,$ * yB <= 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yB,double,0,RET,yA * $ <= 0
LevenbergMarquardtOptimizer.java,doOptimize,dk,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,s,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtOptimizer.java,doOptimize,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtOptimizer.java,doOptimize,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,RET,$ >= 1.0e-4
LevenbergMarquardtOptimizer.java,doOptimize,checker,ConvergenceChecker<VectorialPointValuePair>,0,RET,$ != null
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,0,RET,FastMath.abs($) <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,1,ConvergenceException,FastMath.abs($) <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,1,ConvergenceException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,ConvergenceException,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,ConvergenceException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtOptimizer.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtOptimizer.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtOptimizer.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtOptimizer.java,qrDecomposition,ak2,double,0,RET,$ <= qrRankingThreshold
AbstractLeastSquaresOptimizer.java,updateJacobian,weightedResidualJacobian,double[][],0,FunctionEvaluationException,$.length != rows
AbstractLeastSquaresOptimizer.java,updateResidualsAndCost,objective,double[],0,FunctionEvaluationException,$.length != rows
AbstractLeastSquaresOptimizer.java,guessParametersErrors,rows,int,0,ConvergenceException,$ <= cols
GaussNewtonOptimizer.java,doOptimize,checker,ConvergenceChecker<VectorialPointValuePair>,0,DEF,$ != null
GaussNewtonOptimizer.java,doOptimize,previous,VectorialPointValuePair,0,DEF,$ != null
Beta.java,regularizedBeta,x,double,1,DEF,$ < 0
Beta.java,regularizedBeta,x,double,1,DEF,$ > 1
Beta.java,regularizedBeta,a,double,1,DEF,$ <= 0.0
Beta.java,regularizedBeta,b,double,1,DEF,$ <= 0.0
Beta.java,getB,n,int,1,DEF,$ % 2 == 0
Beta.java,logBeta,a,double,1,DEF,$ <= 0.0
Beta.java,logBeta,b,double,1,DEF,$ <= 0.0
Gamma.java,logGamma,x,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaP,n,double,1,MaxIterationsExceededException,$ >= maxIterations
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ == 0.0
Gamma.java,digamma,x,double,0,RET,$ > 0
Gamma.java,digamma,x,double,0,RET,$ <= S_LIMIT
Gamma.java,digamma,x,double,0,RET,$ >= C_LIMIT
Gamma.java,trigamma,x,double,0,RET,$ > 0
Gamma.java,trigamma,x,double,0,RET,$ <= S_LIMIT
Gamma.java,trigamma,x,double,0,RET,$ >= C_LIMIT
Erf.java,erf,x,double,0,DEF,$ < 0
Vector3DFormat.java,format,obj,null,0,RET,$ instanceof Vector3D
Vector3DFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
Vector3DFormat.java,parse,x,Number,0,RET,$ == null
Vector3DFormat.java,parse,y,Number,0,RET,$ == null
Vector3DFormat.java,parse,z,Number,0,RET,$ == null
Vector3D.java,normalize,s,double,0,DEF,$ == 0
Vector3D.java,orthogonal,threshold,double,0,DEF,$ == 0
Vector3D.java,orthogonal,x,double,1,RET,$ >= -threshold
Vector3D.java,orthogonal,x,double,1,RET,$ <= threshold
Vector3D.java,orthogonal,y,double,0,RET,$ >= -threshold
Vector3D.java,orthogonal,y,double,0,RET,$ <= threshold
Vector3D.java,angle,normProduct,double,0,DEF,$ == 0
Vector3D.java,angle,dot,double,0,RET,$ < -threshold
Vector3D.java,angle,dot,double,0,RET,$ > threshold
Vector3D.java,angle,dot,double,0,RET,$ >= 0
Vector3D.java,equals,other,null,0,RET,$ instanceof Vector3D
Rotation.java,Rotation,norm,double,0,DEF,$ == 0
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$.length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[0].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[1].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[2].length != 3
Rotation.java,Rotation,det,double,0,NotARotationMatrixException,$ < 0.0
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,u1u1,double,0,DEF,$ == 0
Rotation.java,Rotation,u2u2,double,0,DEF,$ == 0
Rotation.java,Rotation,v1v1,double,0,DEF,$ == 0
Rotation.java,Rotation,v2v2,double,0,DEF,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,normProduct,double,0,DEF,$ == 0
Rotation.java,getAxis,squaredSine,double,1,RET,$ == 0
Rotation.java,getAxis,q0,double,0,RET,$ < 0
Rotation.java,getAngle,q0,double,1,RET,$ < -0.1
Rotation.java,getAngle,q0,double,1,RET,$ > 0.1
Rotation.java,getAngle,q0,double,0,RET,$ < 0
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,orthogonalizeMatrix,fn1,double,0,RET,FastMath.abs($ - fn) <= threshold
Rotation.java,orthogonalizeMatrix,fn,double,0,RET,FastMath.abs(fn1 - $) <= threshold
AbstractWell.java,setSeed,seed,int[],0,RET,$ == null
AbstractWell.java,setSeed,seed,int[],0,DEF,$.length < v.length
ValueServer.java,resetReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,closeReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,DEF,$ == null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,DEF,$.getBinStats().size() == 0
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,$ == null
ValueServer.java,getNextReplay,str,String,0,DEF,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,(str = $.readLine()) == null
ValueServer.java,getNextReplay,str,String,0,DEF,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,(str = $.readLine()) == null
BitsStreamGenerator.java,nextInt,n,int,0,NotStrictlyPositiveException,$ < 1
BitsStreamGenerator.java,nextInt,random,int,0,RET,$ < n
UncorrelatedRandomVectorGenerator.java,UncorrelatedRandomVectorGenerator,mean,double[],0,DimensionMismatchException,$.length != standardDeviation.length
EmpiricalDistributionImpl.java,load,sampleStats,SummaryStatistics,0,DEF,$.getN() == 0
EmpiricalDistributionImpl.java,getAdapter,in,null,1,RET,$ instanceof BufferedReader
EmpiricalDistributionImpl.java,getAdapter,in,null,1,RET,$ instanceof double[]
EmpiricalDistributionImpl.java,getNextValue,stats,SummaryStatistics,0,RET,$.getN() > 0
EmpiricalDistributionImpl.java,getNextValue,stats,SummaryStatistics,1,RET,$.getStandardDeviation() > 0
RandomDataImpl.java,nextHexString,len,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataImpl.java,nextHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextInt,lower,int,0,NumberIsTooLargeException,$ >= upper
RandomDataImpl.java,nextLong,lower,long,0,NumberIsTooLargeException,$ >= upper
RandomDataImpl.java,nextSecureHexString,len,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataImpl.java,nextSecureHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextSecureInt,lower,int,0,NumberIsTooLargeException,$ >= upper
RandomDataImpl.java,nextSecureLong,lower,long,0,NumberIsTooLargeException,$ >= upper
RandomDataImpl.java,nextPoisson,mean,double,0,NotStrictlyPositiveException,$ <= 0
RandomDataImpl.java,nextPoisson,mean,double,1,RET,$ < pivot
RandomDataImpl.java,nextPoisson,r,double,1,DEF,$ >= p
RandomDataImpl.java,nextPoisson,u,double,1,DEF,$ <= p1
RandomDataImpl.java,nextPoisson,x,double,0,DEF,$ > delta
RandomDataImpl.java,nextPoisson,x,double,0,DEF,$ < -lambda
RandomDataImpl.java,nextPoisson,v,double,0,DEF,$ < -t
RandomDataImpl.java,nextPoisson,a,int,0,DEF,$ == 0
RandomDataImpl.java,nextPoisson,v,double,0,DEF,$ < qa
RandomDataImpl.java,nextPoisson,v,double,0,DEF,$ > qr
RandomDataImpl.java,nextGaussian,sigma,double,0,NotStrictlyPositiveException,$ <= 0
RandomDataImpl.java,nextExponential,mean,double,0,NotStrictlyPositiveException,$ <= 0.0
RandomDataImpl.java,nextUniform,lower,double,0,NumberIsTooLargeException,$ >= upper
RandomDataImpl.java,getRan,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,getSecRan,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,nextPermutation,k,int,0,NumberIsTooLargeException,$ > n
RandomDataImpl.java,nextPermutation,k,int,0,NotStrictlyPositiveException,$ == 0
RandomDataImpl.java,nextSample,k,int,0,NumberIsTooLargeException,$ > len
RandomDataImpl.java,nextSample,k,int,0,NotStrictlyPositiveException,$ <= 0
RandomDataImpl.java,nextInversionDeviate,distribution,IntegerDistribution,1,RET,$.cumulativeProbability(glb) == 1.0d
RandomDataImpl.java,nextInversionDeviate,glb,int,1,RET,distribution.cumulativeProbability($) == 1.0d
RandomDataImpl.java,shuffle,i,int,1,DEF,$ == 0
MersenneTwister.java,setSeed,seed,int[],0,RET,$ == null
MersenneTwister.java,setSeed,i,int,0,DEF,$ >= N
MersenneTwister.java,setSeed,j,int,0,DEF,$ >= seed.length
MersenneTwister.java,setSeed,i,int,0,DEF,$ >= N
MersenneTwister.java,next,mti,int,0,DEF,$ >= N
CorrelatedRandomVectorGenerator.java,CorrelatedRandomVectorGenerator,mean,double[],0,DimensionMismatchException,$.length != order
CorrelatedRandomVectorGenerator.java,decompose,swap,int[],0,DEF,$[rank] != rank
CorrelatedRandomVectorGenerator.java,decompose,rank,int,0,DEF,swap[$] != rank
CorrelatedRandomVectorGenerator.java,decompose,c,double[][],1,NotPositiveDefiniteMatrixException,$[ir][ir] < small
CorrelatedRandomVectorGenerator.java,decompose,ir,int,1,NotPositiveDefiniteMatrixException,c[$][$] < small
CorrelatedRandomVectorGenerator.java,decompose,rank,int,0,NotPositiveDefiniteMatrixException,$ == 0
CorrelatedRandomVectorGenerator.java,decompose,c,double[][],0,NotPositiveDefiniteMatrixException,$[index[i]][index[i]] < -small
CorrelatedRandomVectorGenerator.java,decompose,index,int[],0,NotPositiveDefiniteMatrixException,c[$[i]][$[i]] < -small
CorrelatedRandomVectorGenerator.java,decompose,i,int,0,NotPositiveDefiniteMatrixException,c[index[$]][index[$]] < -small
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
AbstractRandomGenerator.java,nextBytes,i,int,0,DEF,$ > 0
AbstractRandomGenerator.java,nextBytes,bytesOut,int,0,RET,$ == bytes.length
AbstractRandomGenerator.java,nextInt,n,int,0,NotStrictlyPositiveException,$ <= 0
AbstractRandomGenerator.java,nextGaussian,s,double,0,DEF,$ != 0
ConvergingAlgorithmImpl.java,incrementIterationsCounter,iterationCount,int,0,MaxIterationsExceededException,++$ > maximalIterationCount
BisectionSolver.java,solve,fm,double,1,DEF,$ * fmin > 0.0
BisectionSolver.java,solve,fmin,double,1,DEF,fm * $ > 0.0
BisectionSolver.java,solve,min,double,0,RET,FastMath.abs(max - $) <= absoluteAccuracy
BisectionSolver.java,solve,max,double,0,RET,FastMath.abs($ - min) <= absoluteAccuracy
SecantSolver.java,solve,y0,double,0,DEF,$ * y1 >= 0
SecantSolver.java,solve,y1,double,0,DEF,y0 * $ >= 0
SecantSolver.java,solve,y1,double,0,RET,FastMath.abs($) <= functionValueAccuracy
SecantSolver.java,solve,oldDelta,double,0,DEF,delta / $ > 1
SecantSolver.java,solve,delta,double,0,DEF,$ / oldDelta > 1
SecantSolver.java,solve,y1,double,0,DEF,$ > 0
SecantSolver.java,solve,y2,double,0,DEF,$ > 0
LaguerreSolver.java,LaguerreSolver,f,null,1,DEF,$ instanceof PolynomialFunction
LaguerreSolver.java,solve,min,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
LaguerreSolver.java,solve,max,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
LaguerreSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
LaguerreSolver.java,solve,f,null,0,DEF,$ instanceof PolynomialFunction
LaguerreSolver.java,solve,min,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
LaguerreSolver.java,solve,max,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
LaguerreSolver.java,solveAll,n,int,0,DEF,$ < 1
LaguerreSolver.java,solve,n,int,0,DEF,$ < 1
LaguerreSolver.java,solve,oldz,Complex,0,RET,(z.subtract($)).abs() <= tolerance
LaguerreSolver.java,solve,z,Complex,0,RET,($.subtract(oldz)).abs() <= tolerance
LaguerreSolver.java,solve,pv,Complex,0,RET,$.abs() <= functionValueAccuracy
NewtonSolver.java,solve,x0,double,0,RET,FastMath.abs(x1 - $) <= absoluteAccuracy
NewtonSolver.java,solve,x1,double,0,RET,FastMath.abs($ - x0) <= absoluteAccuracy
UnivariateRealSolverImpl.java,UnivariateRealSolverImpl,f,UnivariateRealFunction,0,NullArgumentException,$ == null
UnivariateRealSolverImpl.java,verifyInterval,lower,double,0,DEF,$ >= upper
UnivariateRealSolverUtils.java,bracket,function,UnivariateRealFunction,0,NullArgumentException,$ == null
UnivariateRealSolverUtils.java,bracket,maximumIterations,int,0,DEF,$ <= 0
UnivariateRealSolverUtils.java,bracket,initial,double,0,DEF,$ < lowerBound
UnivariateRealSolverUtils.java,bracket,initial,double,0,DEF,$ > upperBound
UnivariateRealSolverUtils.java,bracket,lowerBound,double,0,DEF,$ >= upperBound
UnivariateRealSolverUtils.java,bracket,fa,double,0,ConvergenceException,$ * fb > 0.0
UnivariateRealSolverUtils.java,bracket,fb,double,0,ConvergenceException,fa * $ > 0.0
UnivariateRealSolverUtils.java,setup,f,UnivariateRealFunction,0,NullArgumentException,$ == null
MullerSolver.java,solve,min,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
MullerSolver.java,solve,max,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
MullerSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
MullerSolver.java,solve,y0,double,0,RET,$ == 0.0
MullerSolver.java,solve,y2,double,0,RET,$ == 0.0
MullerSolver.java,solve,oldx,double,0,RET,FastMath.abs(x - $) <= tolerance
MullerSolver.java,solve,x,double,0,RET,FastMath.abs($ - oldx) <= tolerance
MullerSolver.java,solve,y,double,0,RET,FastMath.abs($) <= functionValueAccuracy
MullerSolver.java,solve,ym,double,1,DEF,MathUtils.sign(y0) + MathUtils.sign($) == 0.0
MullerSolver.java,solve,y0,double,1,DEF,MathUtils.sign($) + MathUtils.sign(ym) == 0.0
MullerSolver.java,solve2,y0,double,0,RET,$ == 0.0
MullerSolver.java,solve2,y1,double,0,RET,$ == 0.0
MullerSolver.java,solve2,delta,double,1,DEF,$ >= 0.0
MullerSolver.java,solve2,denominator,double,1,DEF,$ != 0
MullerSolver.java,solve2,oldx,double,0,RET,FastMath.abs(x - $) <= tolerance
MullerSolver.java,solve2,x,double,0,RET,FastMath.abs($ - oldx) <= tolerance
MullerSolver.java,solve2,y,double,0,RET,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,solve,initial,double,0,DEF,$ < min
BrentSolver.java,solve,initial,double,0,DEF,$ > max
BrentSolver.java,solve,yInitial,double,0,RET,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMin,double,0,RET,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMin,double,0,RET,yInitial * $ < 0
BrentSolver.java,solve,yInitial,double,0,RET,$ * yMin < 0
BrentSolver.java,solve,yMax,double,0,RET,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yInitial,double,0,RET,$ * yMax < 0
BrentSolver.java,solve,yMax,double,0,RET,yInitial * $ < 0
BrentSolver.java,solve,sign,double,1,DEF,$ > 0
BrentSolver.java,solve,yMin,double,1,DEF,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMax,double,1,DEF,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,solve,sign,double,1,DEF,$ < 0
BrentSolver.java,solve,yMin,double,1,DEF,$ == 0.0
BrentSolver.java,solve,y1,double,0,RET,FastMath.abs($) <= functionValueAccuracy
BrentSolver.java,solve,dx,double,0,RET,FastMath.abs($) <= tolerance
BrentSolver.java,solve,oldDelta,double,1,DEF,FastMath.abs($) < tolerance
BrentSolver.java,solve,x0,double,1,DEF,$ == x2
BrentSolver.java,solve,p,double,1,DEF,$ > 0.0
BrentSolver.java,solve,delta,double,1,DEF,FastMath.abs($) > tolerance
BrentSolver.java,solve,dx,double,1,DEF,$ > 0.0
BrentSolver.java,solve,dx,double,0,DEF,$ <= 0.0
BrentSolver.java,solve,y1,double,0,DEF,$ > 0
BrentSolver.java,solve,y2,double,0,DEF,$ > 0
RiddersSolver.java,solve,min,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
RiddersSolver.java,solve,max,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
RiddersSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
RiddersSolver.java,solve,y1,double,0,RET,$ == 0.0
RiddersSolver.java,solve,y2,double,0,RET,$ == 0.0
RiddersSolver.java,solve,y3,double,0,RET,FastMath.abs($) <= functionValueAccuracy
RiddersSolver.java,solve,oldx,double,0,RET,FastMath.abs(x - $) <= tolerance
RiddersSolver.java,solve,x,double,0,RET,FastMath.abs($ - oldx) <= tolerance
RiddersSolver.java,solve,y,double,0,RET,FastMath.abs($) <= functionValueAccuracy
RiddersSolver.java,solve,correction,double,1,DEF,$ > 0.0
RiddersSolver.java,solve,y1,double,1,DEF,MathUtils.sign($) + MathUtils.sign(y) == 0.0
RiddersSolver.java,solve,y,double,1,DEF,MathUtils.sign(y1) + MathUtils.sign($) == 0.0
RiddersSolver.java,solve,y2,double,1,DEF,MathUtils.sign($) + MathUtils.sign(y) == 0.0
RiddersSolver.java,solve,y,double,1,DEF,MathUtils.sign(y2) + MathUtils.sign($) == 0.0
PolynomialFunctionLagrangeForm.java,evaluate,dist,double,0,DEF,$ < min_dist
PolynomialFunctionLagrangeForm.java,evaluate,divider,double,0,DuplicateSampleAbscissaException,$ == 0.0
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != j
PolynomialFunctionLagrangeForm.java,computeCoefficients,d,double,0,DEF,$ == 0.0
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != k
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,DEF,$.length != y.length
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,DEF,$.length < 2
PolynomialFunctionNewtonForm.java,verifyInputArray,a,double[],0,DEF,$.length < 1
PolynomialFunctionNewtonForm.java,verifyInputArray,c,double[],0,DEF,$.length < 1
PolynomialsUtils.java,buildPolynomial,degree,int,0,DEF,$ > maxDegree
PolynomialFunction.java,PolynomialFunction,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,evaluate,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,subtract,coefficients,double[],1,DEF,$.length < p.coefficients.length
PolynomialFunction.java,differentiate,n,int,0,NoDataException,$ == 0
PolynomialFunction.java,differentiate,n,int,0,RET,$ == 1
PolynomialFunction.java,toString,coefficients,double[],1,RET,$[0] == 0.0
PolynomialFunction.java,toString,coefficients,double[],0,RET,$.length == 1
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] != 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] != 0
PolynomialFunction.java,toString,s,StringBuffer,1,DEF,$.length() > 0
PolynomialFunction.java,toString,coefficients,double[],1,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,1,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,absAi,double,0,DEF,($ - 1) != 0
PolynomialFunction.java,toString,i,int,0,DEF,$ > 1
PolynomialFunction.java,equals,obj,null,0,RET,$ instanceof PolynomialFunction
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,DEF,$.length < 2
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,DEF,$.length - 1 != polynomials.length
PolynomialSplineFunction.java,value,i,int,0,DEF,$ < 0
PolynomialSplineFunction.java,value,i,int,0,DEF,$ >= polynomials.length
SmoothingBicubicSplineInterpolator.java,interpolate,xval,double[],0,DEF,$.length == 0
SmoothingBicubicSplineInterpolator.java,interpolate,yval,double[],0,DEF,$.length == 0
SmoothingBicubicSplineInterpolator.java,interpolate,zval,double[][],0,DEF,$.length == 0
SmoothingBicubicSplineInterpolator.java,interpolate,xval,double[],0,DimensionMismatchException,$.length != zval.length
SmoothingBicubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,zval[$].length != yLen
SmoothingBicubicSplineInterpolator.java,interpolate,zval,double[][],0,DimensionMismatchException,$[i].length != yLen
LoessInterpolator.java,LoessInterpolator,bandwidth,double,0,MathException,$ < 0
LoessInterpolator.java,LoessInterpolator,bandwidth,double,0,MathException,$ > 1
LoessInterpolator.java,LoessInterpolator,robustnessIters,int,0,MathException,$ < 0
LoessInterpolator.java,smooth,xval,double[],0,MathException,$.length != yval.length
LoessInterpolator.java,smooth,n,int,0,MathException,$ == 0
LoessInterpolator.java,smooth,n,int,0,RET,$ == 1
LoessInterpolator.java,smooth,n,int,0,RET,$ == 2
LoessInterpolator.java,smooth,bandwidthInPoints,int,0,MathException,$ < 2
LoessInterpolator.java,smooth,i,int,0,DEF,$ > 0
LoessInterpolator.java,smooth,meanXSquared,double,1,DEF,FastMath.sqrt(FastMath.abs($ - meanX * meanX)) < accuracy
LoessInterpolator.java,smooth,meanX,double,1,DEF,FastMath.sqrt(FastMath.abs(meanXSquared - $ * $)) < accuracy
LoessInterpolator.java,smooth,iter,int,0,DEF,$ == robustnessIters
LoessInterpolator.java,smooth,medianResidual,double,0,DEF,FastMath.abs($) < accuracy
LoessInterpolator.java,smooth,arg,double,1,DEF,$ >= 1
LoessInterpolator.java,smooth,xval,double[],0,MathException,$.length != yval.length
LoessInterpolator.java,updateBandwidthInterval,nextRight,int,0,DEF,$ < xval.length
LoessInterpolator.java,checkStrictlyIncreasing,i,int,0,MathException,$ >= 1
DividedDifferenceInterpolator.java,computeDividedDifference,denominator,double,0,DuplicateSampleAbscissaException,$ == 0.0
TricubicSplineInterpolator.java,interpolate,xval,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,yval,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,zval,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,fval,double[][][],0,NoDataException,$.length == 0
TricubicSplineInterpolator.java,interpolate,xval,double[],0,DimensionMismatchException,$.length != fval.length
TricubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$].length != yLen
TricubicSplineInterpolator.java,interpolate,fval,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$][j].length != zLen
TricubicSplineInterpolator.java,interpolate,j,int,0,DimensionMismatchException,fval[i][$].length != zLen
TricubicSplineInterpolator.java,interpolate,fval,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
LinearInterpolator.java,interpolate,x,double[],0,DimensionMismatchException,$.length != y.length
LinearInterpolator.java,interpolate,x,double[],0,NumberIsTooSmallException,$.length < 2
BicubicSplineInterpolator.java,interpolate,xval,double[],0,NoDataException,$.length == 0
BicubicSplineInterpolator.java,interpolate,yval,double[],0,NoDataException,$.length == 0
BicubicSplineInterpolator.java,interpolate,fval,double[][],0,NoDataException,$.length == 0
BicubicSplineInterpolator.java,interpolate,xval,double[],0,DimensionMismatchException,$.length != fval.length
BicubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$].length != yLen
BicubicSplineInterpolator.java,interpolate,fval,double[][],0,DimensionMismatchException,$[i].length != yLen
SplineInterpolator.java,interpolate,x,double[],0,DimensionMismatchException,$.length != y.length
SplineInterpolator.java,interpolate,x,double[],0,NumberIsTooSmallException,$.length < 3
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,NoDataException,$ == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,yLen,int,0,NoDataException,$ == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,f,double[][],0,NoDataException,$.length == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,f,double[][],0,NoDataException,$[0].length == 0
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != f.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdX.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdY.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdXdY.length
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,f,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,f[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,dFdX,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdX[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,dFdY,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdY[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdY[$].length != yLen
BicubicSplineInterpolatingFunction.java,BicubicSplineInterpolatingFunction,d2FdXdY,double[][],0,DimensionMismatchException,$[i].length != yLen
BicubicSplineInterpolatingFunction.java,value,i,int,0,OutOfRangeException,$ == -1
BicubicSplineInterpolatingFunction.java,value,j,int,0,OutOfRangeException,$ == -1
BicubicSplineInterpolatingFunction.java,partialDerivative,partialDerivatives,BivariateRealFunction[][][],0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivative,i,int,0,OutOfRangeException,$ == -1
BicubicSplineInterpolatingFunction.java,partialDerivative,j,int,0,OutOfRangeException,$ == -1
BicubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ < 0
BicubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ > 1
BicubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ < 0
BicubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ > 1
BicubicSplineInterpolatingFunction.java,partialDerivativeX,partialDerivativeX,BivariateRealFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeY,partialDerivativeY,BivariateRealFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeXX,partialDerivativeXX,BivariateRealFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeYY,partialDerivativeYY,BivariateRealFunction,0,DEF,$ == null
BicubicSplineInterpolatingFunction.java,partialDerivativeXY,partialDerivativeXY,BivariateRealFunction,0,DEF,$ == null
MicrosphereInterpolator.java,setBrightnessExponent,exponent,int,0,NotPositiveException,$ < 0
MicrosphereInterpolator.java,setMicropshereElements,elements,int,0,NotStrictlyPositiveException,$ <= 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,NoDataException,$ == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,yLen,int,0,NoDataException,$ == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,z,double[],0,NoDataException,$.length == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,NoDataException,$.length == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,NoDataException,$[0].length == 0
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != f.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdX.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdY.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != dFdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdXdY.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdXdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d2FdYdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,xLen,int,0,DimensionMismatchException,$ != d3FdXdYdZ.length
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,f[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdX,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdX[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdY,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdY[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdY[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdY,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdYdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdYdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d3FdXdYdZ,double[][][],0,DimensionMismatchException,$[i].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d3FdXdYdZ[$].length != yLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,f,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,f[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,f[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdX,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdX[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,dFdX[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdY,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdY[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,dFdY[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,dFdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,dFdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,dFdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdY[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d2FdXdY[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdY,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdXdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdXdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d2FdXdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d2FdYdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d2FdYdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d2FdYdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,d3FdXdYdZ,double[][][],0,DimensionMismatchException,$[i][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,i,int,0,DimensionMismatchException,d3FdXdYdZ[$][j].length != zLen
TricubicSplineInterpolatingFunction.java,TricubicSplineInterpolatingFunction,j,int,0,DimensionMismatchException,d3FdXdYdZ[i][$].length != zLen
TricubicSplineInterpolatingFunction.java,value,i,int,0,OutOfRangeException,$ == -1
TricubicSplineInterpolatingFunction.java,value,j,int,0,OutOfRangeException,$ == -1
TricubicSplineInterpolatingFunction.java,value,k,int,0,OutOfRangeException,$ == -1
TricubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ < 0
TricubicSplineInterpolatingFunction.java,value,x,double,0,OutOfRangeException,$ > 1
TricubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ < 0
TricubicSplineInterpolatingFunction.java,value,y,double,0,OutOfRangeException,$ > 1
TricubicSplineInterpolatingFunction.java,value,z,double,0,OutOfRangeException,$ < 0
TricubicSplineInterpolatingFunction.java,value,z,double,0,OutOfRangeException,$ > 1
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,xval,double[],0,NoDataException,$.length == 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,yval,double[],0,NoDataException,$.length == 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,fval,double[][],0,NoDataException,$.length == 0
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,xval,double[],0,DimensionMismatchException,$.length != fval.length
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,i,int,0,DimensionMismatchException,fval[$].length != yLen
SmoothingPolynomialBicubicSplineInterpolator.java,interpolate,fval,double[][],0,DimensionMismatchException,$[i].length != yLen
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,NoDataException,$.length == 0
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,NoDataException,$[0] == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,DimensionMismatchException,$.length != yval.length
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xvalI,double[],0,DimensionMismatchException,$.length != dimension
MicrosphereInterpolatingFunction.java,value,sd,Entry<RealVector,Double>,0,DEF,$ != null
LegendreGaussIntegrator.java,integrate,i,int,0,RET,$ + 1 >= minimalIterationCount
LegendreGaussIntegrator.java,integrate,delta,double,0,RET,$ <= limit
TrapezoidIntegrator.java,stage,n,int,1,RET,$ == 0
TrapezoidIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
TrapezoidIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
TrapezoidIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
TrapezoidIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 64
UnivariateRealIntegratorImpl.java,UnivariateRealIntegratorImpl,f,UnivariateRealFunction,0,NullArgumentException,$ == null
UnivariateRealIntegratorImpl.java,verifyInterval,lower,double,0,DEF,$ >= upper
UnivariateRealIntegratorImpl.java,verifyIterationCount,minimalIterationCount,int,0,DEF,$ <= 0
UnivariateRealIntegratorImpl.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ <= minimalIterationCount
SimpsonIntegrator.java,integrate,minimalIterationCount,int,0,RET,$ == 1
SimpsonIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
SimpsonIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
SimpsonIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
SimpsonIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 64
RombergIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
RombergIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
RombergIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
RombergIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 32
ComplexFormat.java,format,im,double,1,DEF,$ < 0.0
ComplexFormat.java,format,im,double,0,DEF,$ > 0.0
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Complex
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Number
ComplexFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
ComplexFormat.java,parse,re,Number,0,RET,$ == null
ComplexFormat.java,parse,im,Number,0,RET,$ == null
ComplexFormat.java,setImaginaryCharacter,imaginaryCharacter,String,0,DEF,$ == null
ComplexFormat.java,setImaginaryCharacter,imaginaryCharacter,String,0,DEF,$.length() == 0
ComplexFormat.java,setImaginaryFormat,imaginaryFormat,NumberFormat,0,NullArgumentException,$ == null
ComplexFormat.java,setRealFormat,realFormat,NumberFormat,0,NullArgumentException,$ == null
Complex.java,abs,imaginary,double,0,RET,$ == 0.0
Complex.java,abs,real,double,0,RET,$ == 0.0
Complex.java,divide,c,double,0,RET,$ == 0.0
Complex.java,divide,d,double,0,RET,$ == 0.0
Complex.java,equals,other,null,0,RET,$ instanceof Complex
Complex.java,pow,x,Complex,0,NullPointerException,$ == null
Complex.java,sqrt,real,double,0,RET,$ == 0.0
Complex.java,sqrt,imaginary,double,0,RET,$ == 0.0
Complex.java,sqrt,real,double,1,RET,$ >= 0.0
Complex.java,nthRoot,n,int,0,DEF,$ <= 0
ComplexUtils.java,polar2Complex,r,double,0,DEF,$ < 0
DescriptiveStatistics.java,addValue,windowSize,int,1,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ < 1
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,getPercentile,percentileImpl,null,1,DEF,$ instanceof Percentile
AbstractStorelessUnivariateStatistic.java,evaluate,values,double[],0,NullArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,incrementAll,values,double[],0,NullArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,equals,object,Object,0,RET,$ instanceof AbstractStorelessUnivariateStatistic == false
AbstractStorelessUnivariateStatistic.java,equals,object,null,0,RET,$ instanceof AbstractStorelessUnivariateStatistic
StatisticalSummaryValues.java,equals,object,Object,0,RET,$ instanceof StatisticalSummaryValues == false
StatisticalSummaryValues.java,equals,object,null,0,RET,$ instanceof StatisticalSummaryValues
FirstMoment.java,increment,n,long,0,DEF,$ == 0
GeometricMean.java,getResult,sumOfLogs,StorelessUnivariateStatistic,1,RET,$.getN() > 0
ThirdMoment.java,increment,n,long,0,DEF,$ < 1
Kurtosis.java,getResult,moment,FourthMoment,0,DEF,$.getN() > 3
Kurtosis.java,getResult,moment,FirstMoment,1,DEF,$.n <= 3
Kurtosis.java,getResult,variance,double,1,DEF,$ < 10E-20
Kurtosis.java,evaluate,length,int,0,DEF,$ > 3
Skewness.java,getResult,moment,FirstMoment,0,RET,$.n < 3
Skewness.java,getResult,variance,double,1,RET,$ < 10E-20
Skewness.java,evaluate,length,int,0,DEF,$ > 2
FourthMoment.java,increment,n,long,0,DEF,$ < 1
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 0
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 1
Variance.java,evaluate,values,double[],0,NullArgumentException,$ == null
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,copy,source,Variance,0,NullArgumentException,$ == null
Variance.java,copy,dest,Variance,0,NullArgumentException,$ == null
VectorialCovariance.java,increment,v,double[],0,DimensionMismatchException,$.length != sums.length
VectorialCovariance.java,getResult,n,long,0,DEF,$ > 1
VectorialCovariance.java,equals,obj,null,0,RET,$ instanceof VectorialCovariance
VectorialCovariance.java,equals,isBiasCorrected,boolean,0,RET,$ != other.isBiasCorrected
VectorialCovariance.java,equals,n,long,0,RET,$ != other.n
SecondMoment.java,increment,n,long,0,DEF,$ < 1
VectorialMean.java,increment,v,double[],0,DimensionMismatchException,$.length != means.length
VectorialMean.java,equals,obj,null,0,RET,$ instanceof VectorialMean
SemiVariance.java,evaluate,values,double[],0,NullArgumentException,$ == null
SemiVariance.java,evaluate,values,double[],1,RET,$.length == 0
SemiVariance.java,evaluate,values,double[],1,RET,$.length == 1
SemiVariance.java,evaluate,values,double[],0,DEF,($[i] > cutoff) == booleanDirection
SemiVariance.java,evaluate,i,int,0,DEF,(values[$] > cutoff) == booleanDirection
SemiVariance.java,evaluate,cutoff,double,0,DEF,(values[i] > $) == booleanDirection
SemiVariance.java,evaluate,values,double[],0,DEF,$[i] > cutoff
SemiVariance.java,evaluate,i,int,0,DEF,values[$] > cutoff
Percentile.java,evaluate,p,double,0,DEF,$ > 100
Percentile.java,evaluate,p,double,0,DEF,$ <= 0
Percentile.java,evaluate,length,int,0,RET,$ == 0
Percentile.java,evaluate,length,int,0,RET,$ == 1
Percentile.java,evaluate,pos,double,0,RET,$ < 1
Percentile.java,evaluate,pos,double,0,RET,$ >= n
Percentile.java,setQuantile,p,double,0,DEF,$ <= 0
Percentile.java,setQuantile,p,double,0,DEF,$ > 100
Max.java,increment,d,double,0,DEF,$ > value
Min.java,increment,d,double,0,DEF,$ < value
AbstractUnivariateStatistic.java,test,values,double[],0,NullArgumentException,$ == null
AbstractUnivariateStatistic.java,test,begin,int,0,NotPositiveException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,NotPositiveException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,DEF,begin + $ > values.length
AbstractUnivariateStatistic.java,test,begin,int,0,DEF,$ + length > values.length
AbstractUnivariateStatistic.java,test,length,int,0,RET,$ == 0
AbstractUnivariateStatistic.java,test,weights,double[],0,NullArgumentException,$ == null
AbstractUnivariateStatistic.java,test,weights,double[],0,DimensionMismatchException,$.length != values.length
AbstractUnivariateStatistic.java,test,i,int,0,DEF,weights[$] < 0
AbstractUnivariateStatistic.java,test,weights,double[],0,DEF,$[i] < 0
AbstractUnivariateStatistic.java,test,i,int,0,DEF,weights[$] > 0.0
AbstractUnivariateStatistic.java,test,weights,double[],0,DEF,$[i] > 0.0
MultivariateSummaryStatistics.java,append,i,int,0,DEF,$ > 0
MultivariateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof MultivariateSummaryStatistics == false
MultivariateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof MultivariateSummaryStatistics
MultivariateSummaryStatistics.java,checkEmpty,n,long,0,DEF,$ > 0
MultivariateSummaryStatistics.java,checkDimension,dimension,int,0,DimensionMismatchException,$ != k
AggregateSummaryStatistics.java,aggregate,statistics,Collection<SummaryStatistics>,0,RET,$ == null
AggregateSummaryStatistics.java,aggregate,current,SummaryStatistics,0,DEF,$.getMin() < min
AggregateSummaryStatistics.java,aggregate,current,SummaryStatistics,0,DEF,$.getMax() > max
AggregateSummaryStatistics.java,aggregate,n,long,1,DEF,$ == 0
AggregateSummaryStatistics.java,aggregate,n,long,1,DEF,$ == 1
AggregateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof AggregatingSummaryStatistics == false
AggregateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof AggregatingSummaryStatistics
SummaryStatistics.java,addValue,meanImpl,null,0,DEF,$ instanceof Mean
SummaryStatistics.java,addValue,varianceImpl,null,0,DEF,$ instanceof Variance
SummaryStatistics.java,addValue,geoMeanImpl,null,0,DEF,$ instanceof GeometricMean
SummaryStatistics.java,getMean,mean,Mean,1,RET,$ == meanImpl
SummaryStatistics.java,getVariance,varianceImpl,StorelessUnivariateStatistic,1,RET,$ == variance
SummaryStatistics.java,clear,meanImpl,StorelessUnivariateStatistic,0,DEF,$ != mean
SummaryStatistics.java,clear,varianceImpl,StorelessUnivariateStatistic,0,DEF,$ != variance
SummaryStatistics.java,equals,object,Object,0,RET,$ instanceof SummaryStatistics == false
SummaryStatistics.java,equals,object,null,0,RET,$ instanceof SummaryStatistics
SummaryStatistics.java,checkEmpty,n,long,0,DEF,$ > 0
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.geoMean == source.geoMeanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.max == source.maxImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.mean == source.meanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.min == source.minImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sum == source.sumImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.variance == source.varianceImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumLog == source.sumLogImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumsq == source.sumsqImpl
TTestImpl.java,checkSignificanceLevel,alpha,double,0,DEF,$ <= 0
TTestImpl.java,checkSignificanceLevel,alpha,double,0,DEF,$ > 0.5
TTestImpl.java,checkSampleData,data,double[],0,DEF,$ == null
TTestImpl.java,checkSampleData,data,double[],0,DEF,$.length < 2
TTestImpl.java,checkSampleData,stat,StatisticalSummary,0,DEF,$ == null
TTestImpl.java,checkSampleData,stat,StatisticalSummary,0,DEF,$.getN() < 2
OneWayAnovaImpl.java,anovaTest,alpha,double,0,DEF,$ <= 0
OneWayAnovaImpl.java,anovaTest,alpha,double,0,DEF,$ > 0.5
OneWayAnovaImpl.java,anovaStats,categoryData,Collection<double[]>,0,DEF,$.size() < 2
OneWayAnovaImpl.java,anovaStats,array,double[],0,DEF,$.length <= 1
ChiSquareTestImpl.java,chiSquare,expected,double[],0,DEF,$.length < 2
ChiSquareTestImpl.java,chiSquare,expected,double[],0,DEF,$.length != observed.length
ChiSquareTestImpl.java,chiSquare,sumObserved,double,0,DEF,FastMath.abs(sumExpected - $) > 10E-6
ChiSquareTestImpl.java,chiSquare,sumExpected,double,0,DEF,FastMath.abs($ - sumObserved) > 10E-6
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,DEF,$ <= 0
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,DEF,$ > 0.5
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,DEF,$ <= 0
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,DEF,$ > 0.5
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],0,DEF,$.length < 2
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],0,DEF,$.length != observed2.length
ChiSquareTestImpl.java,chiSquareDataSetsComparison,countSum1,long,0,DEF,$ == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,countSum2,long,0,DEF,$ == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,i,int,1,DEF,observed1[$] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],1,DEF,$[i] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed2,long[],1,DEF,$[i] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,i,int,1,DEF,observed2[$] == 0
ChiSquareTestImpl.java,chiSquareTestDataSetsComparison,alpha,double,0,DEF,$ <= 0
ChiSquareTestImpl.java,chiSquareTestDataSetsComparison,alpha,double,0,DEF,$ > 0.5
ChiSquareTestImpl.java,checkArray,in,long[][],0,DEF,$.length < 2
ChiSquareTestImpl.java,checkArray,in,long[][],0,DEF,$[0].length < 2
ChiSquareTestImpl.java,checkPositive,in,double[],0,DEF,$[i] <= 0
ChiSquareTestImpl.java,checkPositive,i,int,0,DEF,in[$] <= 0
ChiSquareTestImpl.java,checkNonNegative,in,long[],0,DEF,$[i] < 0
ChiSquareTestImpl.java,checkNonNegative,i,int,0,DEF,in[$] < 0
ChiSquareTestImpl.java,checkNonNegative,in,long[][],0,DEF,$[i][j] < 0
ChiSquareTestImpl.java,checkNonNegative,i,int,0,DEF,in[$][j] < 0
ChiSquareTestImpl.java,checkNonNegative,j,int,0,DEF,in[i][$] < 0
NaturalRanking.java,rank,ranks,IntDoublePair[],1,DEF,Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
NaturalRanking.java,rank,i,int,1,DEF,Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
NaturalRanking.java,rank,tiesTrace,List<Integer>,0,DEF,$.size() > 1
NaturalRanking.java,rank,tiesTrace,List<Integer>,0,DEF,$.size() > 1
NaturalRanking.java,rank,nanStrategy,NaNStrategy,0,DEF,$ == NaNStrategy.FIXED
NaturalRanking.java,restoreNaNs,nanPositions,List<Integer>,0,RET,$.size() == 0
StatUtils.java,sumDifference,n,int,0,DEF,$ != sample2.length
StatUtils.java,sumDifference,n,int,0,DEF,$ < 1
StatUtils.java,varianceDifference,n,int,0,DEF,$ != sample2.length
StatUtils.java,varianceDifference,n,int,0,DEF,$ < 2
KMeansPlusPlusClusterer.java,chooseInitialCenters,i,int,0,DEF,dx2[$] >= r
KMeansPlusPlusClusterer.java,chooseInitialCenters,dx2,double[],0,DEF,$[i] >= r
KMeansPlusPlusClusterer.java,getNearestCluster,distance,double,0,DEF,$ < minDistance
EuclideanIntegerPoint.java,equals,other,null,0,RET,$ instanceof EuclideanIntegerPoint
EuclideanIntegerPoint.java,equals,point,int[],0,RET,$.length != otherPoint.length
PearsonsCorrelation.java,PearsonsCorrelation,covarianceMatrix,RealMatrix,0,NullArgumentException,$ == null
PearsonsCorrelation.java,getCorrelationPValues,i,int,1,DEF,$ == j
PearsonsCorrelation.java,correlation,xArray,double[],1,DimensionMismatchException,$.length != yArray.length
PearsonsCorrelation.java,correlation,xArray,double[],1,DEF,$.length < 2
PearsonsCorrelation.java,checkSufficientData,nRows,int,0,DEF,$ < 2
PearsonsCorrelation.java,checkSufficientData,nCols,int,0,DEF,$ < 2
SpearmansCorrelation.java,correlation,xArray,double[],1,DEF,$.length != yArray.length
SpearmansCorrelation.java,correlation,xArray,double[],1,DEF,$.length < 2
Covariance.java,covariance,length,int,1,DEF,$ != yArray.length
Covariance.java,covariance,length,int,1,DEF,$ < 2
Covariance.java,checkSufficientData,nRows,int,0,DEF,$ < 2
Covariance.java,checkSufficientData,nCols,int,0,DEF,$ < 2
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ == j
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ < p
AbstractMultipleLinearRegression.java,newSampleData,data,double[],0,DEF,$ == null
AbstractMultipleLinearRegression.java,newSampleData,nobs,int,0,DEF,$ <= nvars
AbstractMultipleLinearRegression.java,newYSampleData,y,double[],0,DEF,$ == null
AbstractMultipleLinearRegression.java,newYSampleData,y,double[],0,DEF,$.length == 0
AbstractMultipleLinearRegression.java,newXSampleData,x,double[][],0,DEF,$ == null
AbstractMultipleLinearRegression.java,newXSampleData,x,double[][],0,DEF,$.length == 0
AbstractMultipleLinearRegression.java,newXSampleData,x,double[][],0,DEF,$[i].length != nVars
AbstractMultipleLinearRegression.java,newXSampleData,i,int,0,DEF,x[$].length != nVars
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,DEF,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,y,double[],0,DEF,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,DEF,$.length != y.length
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,DEF,$.length == 0
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,DEF,$[0].length + 1 > x.length
AbstractMultipleLinearRegression.java,validateCovarianceData,x,double[][],0,DEF,$.length != covariance.length
AbstractMultipleLinearRegression.java,validateCovarianceData,covariance,double[][],0,DEF,$.length > 0
SimpleRegression.java,addData,n,long,1,DEF,$ == 0
SimpleRegression.java,addData,n,long,0,DEF,$ > 2
SimpleRegression.java,removeData,n,long,0,DEF,$ > 0
SimpleRegression.java,removeData,n,long,0,DEF,$ > 2
SimpleRegression.java,getSlope,n,long,0,RET,$ < 2
SimpleRegression.java,getTotalSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getXSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getMeanSquareError,n,long,0,RET,$ < 3
SimpleRegression.java,getR,b1,double,0,DEF,$ < 0
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,DEF,$ >= 1
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,DEF,$ <= 0
SimpleRegression.java,setDistribution,n,long,0,DEF,$ > 2
GLSMultipleLinearRegression.java,getOmegaInverse,OmegaInverse,RealMatrix,0,DEF,$ == null
Frequency.java,addValue,v,null,1,DEF,$ instanceof Comparable<?>
Frequency.java,addValue,v,null,0,DEF,$ instanceof Integer
Frequency.java,addValue,count,Long,1,DEF,$ == null
Frequency.java,getCount,v,null,0,RET,$ instanceof Integer
Frequency.java,getCount,count,Long,0,DEF,$ != null
Frequency.java,getPct,sumFreq,long,0,RET,$ == 0
Frequency.java,getCumFreq,v,null,0,RET,$ instanceof Integer
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,DEF,$ == null
Frequency.java,getCumFreq,value,Long,0,DEF,$ != null
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,RET,$.compare(v, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,v,Comparable<>,0,RET,c.compare($, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,freqTable,TreeMap<Comparable<?>,Long>,0,RET,c.compare(v, $.firstKey()) < 0
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,RET,$.compare(v, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,v,Comparable<>,0,RET,c.compare($, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,freqTable,TreeMap<Comparable<?>,Long>,0,RET,c.compare(v, $.lastKey()) >= 0
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,1,DEF,$.compare(v, nextValue) > 0
Frequency.java,getCumFreq,v,Comparable<>,1,DEF,c.compare($, nextValue) > 0
Frequency.java,getCumFreq,nextValue,Comparable<>,1,DEF,c.compare(v, $) > 0
Frequency.java,getCumPct,sumFreq,long,0,RET,$ == 0
Frequency.java,equals,obj,null,0,RET,$ instanceof Frequency
Frequency.java,equals,freqTable,TreeMap<Comparable<?>,Long>,1,RET,$ == null
Frequency.java,equals,other,Frequency,0,RET,$.freqTable != null
MathException.java,getMessage,pattern,Localizable,0,RET,$ != null
FDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
FDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
FDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
FDistributionImpl.java,getInitialDomain,d,double,0,DEF,$ > 2.0
FDistributionImpl.java,setNumeratorDegreesOfFreedomInternal,degreesOfFreedom,double,0,DEF,$ <= 0.0
FDistributionImpl.java,setDenominatorDegreesOfFreedomInternal,degreesOfFreedom,double,0,DEF,$ <= 0.0
PoissonDistributionImpl.java,PoissonDistributionImpl,p,double,0,DEF,$ <= 0
PoissonDistributionImpl.java,probability,x,int,1,DEF,$ < 0
PoissonDistributionImpl.java,probability,x,int,1,DEF,$ == Integer.MAX_VALUE
PoissonDistributionImpl.java,probability,x,int,1,DEF,$ == 0
PoissonDistributionImpl.java,cumulativeProbability,x,int,0,RET,$ < 0
PoissonDistributionImpl.java,cumulativeProbability,x,int,0,RET,$ == Integer.MAX_VALUE
HypergeometricDistributionImpl.java,HypergeometricDistributionImpl,numberOfSuccesses,int,0,DEF,$ > populationSize
HypergeometricDistributionImpl.java,HypergeometricDistributionImpl,sampleSize,int,0,DEF,$ > populationSize
HypergeometricDistributionImpl.java,setNumberOfSuccessesInternal,num,int,0,DEF,$ < 0
HypergeometricDistributionImpl.java,setPopulationSizeInternal,size,int,0,DEF,$ <= 0
HypergeometricDistributionImpl.java,setSampleSizeInternal,size,int,0,DEF,$ < 0
GammaDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
GammaDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
GammaDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
GammaDistributionImpl.java,setAlphaInternal,newAlpha,double,0,DEF,$ <= 0.0
GammaDistributionImpl.java,setBetaInternal,newBeta,double,0,DEF,$ <= 0.0
GammaDistributionImpl.java,density,x,double,0,RET,$ < 0
GammaDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
GammaDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
TDistributionImpl.java,setDegreesOfFreedomInternal,newDegreesOfFreedom,double,0,DEF,$ <= 0.0
TDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ == 0.0
TDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ < 0.0
TDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
TDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
BinomialDistributionImpl.java,setNumberOfTrialsInternal,trials,int,0,DEF,$ < 0
BinomialDistributionImpl.java,setProbabilityOfSuccessInternal,p,double,0,DEF,$ < 0.0
BinomialDistributionImpl.java,setProbabilityOfSuccessInternal,p,double,0,DEF,$ > 1.0
BinomialDistributionImpl.java,cumulativeProbability,x,int,1,DEF,$ < 0
BinomialDistributionImpl.java,cumulativeProbability,x,int,1,DEF,$ >= numberOfTrials
BinomialDistributionImpl.java,probability,x,int,1,DEF,$ < 0
BinomialDistributionImpl.java,probability,x,int,1,DEF,$ > numberOfTrials
BinomialDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
BinomialDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
ExponentialDistributionImpl.java,setMeanInternal,newMean,double,0,DEF,$ <= 0.0
ExponentialDistributionImpl.java,density,x,double,0,RET,$ < 0
ExponentialDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ < 0.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ > 1.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1.0
ExponentialDistributionImpl.java,getDomainUpperBound,p,double,1,RET,$ < .5
ExponentialDistributionImpl.java,getInitialDomain,p,double,1,RET,$ < .5
ZipfDistributionImpl.java,setNumberOfElementsInternal,n,int,0,DEF,$ <= 0
ZipfDistributionImpl.java,setExponentInternal,s,double,0,DEF,$ <= 0.0
ZipfDistributionImpl.java,probability,x,int,0,RET,$ <= 0
ZipfDistributionImpl.java,probability,x,int,0,RET,$ > numberOfElements
ZipfDistributionImpl.java,cumulativeProbability,x,int,1,RET,$ <= 0
ZipfDistributionImpl.java,cumulativeProbability,x,int,0,RET,$ >= numberOfElements
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ < 0.0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ > 1.0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
CauchyDistributionImpl.java,setScaleInternal,s,double,0,DEF,$ <= 0.0
CauchyDistributionImpl.java,getDomainLowerBound,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ > .5
NormalDistributionImpl.java,setStandardDeviationInternal,sd,double,0,DEF,$ <= 0.0
NormalDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
NormalDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
NormalDistributionImpl.java,getDomainLowerBound,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ > .5
PascalDistributionImpl.java,setNumberOfSuccessesInternal,successes,int,0,DEF,$ < 0
PascalDistributionImpl.java,setProbabilityOfSuccessInternal,p,double,0,DEF,$ < 0.0
PascalDistributionImpl.java,setProbabilityOfSuccessInternal,p,double,0,DEF,$ > 1.0
PascalDistributionImpl.java,cumulativeProbability,x,int,1,DEF,$ < 0
PascalDistributionImpl.java,probability,x,int,1,DEF,$ < 0
PascalDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
PascalDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
AbstractDistribution.java,cumulativeProbability,x0,double,0,DEF,$ > x1
AbstractIntegerDistribution.java,cumulativeProbability,x0,double,0,DEF,$ > x1
AbstractIntegerDistribution.java,cumulativeProbability,x0,double,1,RET,FastMath.floor($) < x0
AbstractIntegerDistribution.java,probability,fl,double,1,RET,$ == x
AbstractIntegerDistribution.java,cumulativeProbability,x0,int,0,DEF,$ > x1
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,DEF,$ < 0.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,DEF,$ > 1.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,pm,double,1,DEF,$ > p
AbstractIntegerDistribution.java,inverseCumulativeProbability,xm,int,1,DEF,$ == x1
AbstractIntegerDistribution.java,inverseCumulativeProbability,xm,int,1,DEF,$ == x0
AbstractIntegerDistribution.java,sample,sampleSize,int,0,DEF,$ <= 0
ChiSquaredDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
ChiSquaredDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
ChiSquaredDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
ChiSquaredDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
AbstractContinuousDistribution.java,inverseCumulativeProbability,p,double,0,DEF,$ < 0.0
AbstractContinuousDistribution.java,inverseCumulativeProbability,p,double,0,DEF,$ > 1.0
AbstractContinuousDistribution.java,sample,sampleSize,int,0,DEF,$ <= 0
BetaDistributionImpl.java,density,x,double,1,RET,$ < 0
BetaDistributionImpl.java,density,x,double,1,RET,$ > 1
BetaDistributionImpl.java,density,x,double,1,RET,$ == 0
BetaDistributionImpl.java,density,alpha,double,0,DEF,$ < 1
BetaDistributionImpl.java,density,x,double,1,RET,$ == 1
BetaDistributionImpl.java,density,beta,double,0,DEF,$ < 1
BetaDistributionImpl.java,inverseCumulativeProbability,p,double,1,RET,$ == 0
BetaDistributionImpl.java,inverseCumulativeProbability,p,double,1,RET,$ == 1
BetaDistributionImpl.java,cumulativeProbability,x,double,1,RET,$ <= 0
BetaDistributionImpl.java,cumulativeProbability,x,double,1,RET,$ >= 1
SaddlePointExpansion.java,getStirlingError,z,double,1,DEF,$ < 15.0
SaddlePointExpansion.java,getStirlingError,z2,double,1,DEF,FastMath.floor($) == z2
SaddlePointExpansion.java,logBinomialProbability,x,int,1,DEF,$ == 0
SaddlePointExpansion.java,logBinomialProbability,p,double,1,DEF,$ < 0.1
SaddlePointExpansion.java,logBinomialProbability,x,int,1,DEF,$ == n
SaddlePointExpansion.java,logBinomialProbability,q,double,1,DEF,$ < 0.1
WeibullDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
WeibullDistributionImpl.java,density,x,double,0,RET,$ < 0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ < 0.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ > 1.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
WeibullDistributionImpl.java,setShapeInternal,alpha,double,0,DEF,$ <= 0.0
WeibullDistributionImpl.java,setScaleInternal,beta,double,0,DEF,$ <= 0.0
FastFourierTransformer.java,fft,f,double[],0,RET,$.length == 1
FastFourierTransformer.java,fft,n,int,0,RET,$ == 1
FastFourierTransformer.java,fft,n,int,0,RET,$ == 2
FastFourierTransformer.java,sample,n,int,0,DEF,$ <= 0
FastFourierTransformer.java,verifyInterval,lower,double,0,DEF,$ >= upper
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == dimensionSize.length
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == d
FastFourierTransformer.java,get,vector,int[],0,RET,$ == null
FastFourierTransformer.java,get,dimensionSize,int[],0,DEF,$.length > 0
FastFourierTransformer.java,get,vector,int[],0,DEF,$.length != dimensionSize.length
FastFourierTransformer.java,set,vector,int[],0,RET,$ == null
FastFourierTransformer.java,set,dimensionSize,int[],0,DEF,$.length > 0
FastFourierTransformer.java,set,vector,int[],0,DEF,$.length != dimensionSize.length
FastFourierTransformer.java,isForward,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,computeOmega,n,int,0,DEF,$ == 0
FastFourierTransformer.java,computeOmega,absN,int,0,RET,$ == omegaCount
FastFourierTransformer.java,getOmegaReal,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,getOmegaReal,k,int,0,DEF,$ < 0
FastFourierTransformer.java,getOmegaReal,k,int,0,DEF,$ >= omegaCount
FastFourierTransformer.java,getOmegaImaginary,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,getOmegaImaginary,k,int,0,DEF,$ < 0
FastFourierTransformer.java,getOmegaImaginary,k,int,0,DEF,$ >= omegaCount
FastCosineTransformer.java,fct,n,int,0,RET,$ == 1
FastSineTransformer.java,fst,f,double[],0,DEF,$[0] != 0.0
FastSineTransformer.java,fst,n,int,0,RET,$ == 1
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,source.substring($, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,endIndex,int,0,DEF,source.substring(startIndex, $).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,source,String,0,DEF,$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,sb,StringBuffer,0,DEF,source.substring(startIndex, endIndex).compareTo($.toString()) == 0
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,$ == endIndex
CompositeFormat.java,parseNumber,number,Number,0,DEF,$ != null
CompositeFormat.java,parseFixedstring,startIndex,int,0,RET,source.substring($, endIndex).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,endIndex,int,0,RET,source.substring(startIndex, $).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,expected,String,0,RET,source.substring(startIndex, endIndex).compareTo($) != 0
CompositeFormat.java,parseFixedstring,source,String,0,RET,$.substring(startIndex, endIndex).compareTo(expected) != 0
BigReal.java,equals,other,null,0,RET,$ instanceof BigReal
ResizableDoubleArray.java,addElement,startIndex,int,0,DEF,($ + numElements) > internalArray.length
ResizableDoubleArray.java,addElement,numElements,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,addElementRolling,startIndex,int,0,DEF,($ + (numElements + 1)) > internalArray.length
ResizableDoubleArray.java,addElementRolling,numElements,int,0,DEF,(startIndex + ($ + 1)) > internalArray.length
ResizableDoubleArray.java,substituteMostRecentElement,numElements,int,0,DEF,$ < 1
ResizableDoubleArray.java,checkContractExpand,contraction,float,0,DEF,$ < expansion
ResizableDoubleArray.java,checkContractExpand,contraction,float,0,DEF,$ <= 1.0
ResizableDoubleArray.java,checkContractExpand,expansion,float,0,DEF,$ <= 1.0
ResizableDoubleArray.java,discardExtremeElements,i,int,1,DEF,$ > numElements
ResizableDoubleArray.java,discardExtremeElements,i,int,1,DEF,$ < 0
ResizableDoubleArray.java,expand,expansionMode,int,1,DEF,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,getElement,index,int,1,DEF,$ >= numElements
ResizableDoubleArray.java,getElement,index,int,1,RET,$ >= 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ < 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ + 1 > numElements
ResizableDoubleArray.java,setElement,startIndex,int,0,DEF,($ + index) >= internalArray.length
ResizableDoubleArray.java,setElement,index,int,0,DEF,(startIndex + $) >= internalArray.length
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,DEF,$ != MULTIPLICATIVE_MODE
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,DEF,$ != ADDITIVE_MODE
ResizableDoubleArray.java,setInitialCapacity,initialCapacity,int,1,DEF,$ > 0
ResizableDoubleArray.java,setNumElements,i,int,0,DEF,$ < 0
ResizableDoubleArray.java,setNumElements,startIndex,int,0,DEF,($ + i) > internalArray.length
ResizableDoubleArray.java,setNumElements,i,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,shouldContract,expansionMode,int,1,RET,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,equals,object,Object,0,RET,$ instanceof ResizableDoubleArray == false
ResizableDoubleArray.java,equals,object,null,0,RET,$ instanceof ResizableDoubleArray
OpenIntToFieldHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToFieldHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToFieldHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToFieldHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToFieldHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToFieldHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToFieldHashMap.java,key,referenceCount,int,0,DEF,$ != count
OpenIntToFieldHashMap.java,key,current,int,0,DEF,$ < 0
OpenIntToFieldHashMap.java,value,referenceCount,int,0,DEF,$ != count
OpenIntToFieldHashMap.java,value,current,int,0,DEF,$ < 0
OpenIntToFieldHashMap.java,advance,referenceCount,int,0,DEF,$ != count
OpenIntToFieldHashMap.java,advance,current,int,0,DEF,$ < 0
ContinuedFraction.java,evaluate,scale,double,0,ConvergenceException,$ <= 0
ContinuedFraction.java,evaluate,a,double,1,DEF,$ != 0.0
ContinuedFraction.java,evaluate,a,double,1,DEF,$ > b
ContinuedFraction.java,evaluate,b,double,0,DEF,$ != 0
ContinuedFraction.java,evaluate,n,int,0,MaxIterationsExceededException,$ >= maxIterations
MathUtils.java,addAndCheck,s,long,0,DEF,$ < Integer.MIN_VALUE
MathUtils.java,addAndCheck,s,long,0,DEF,$ > Integer.MAX_VALUE
MathUtils.java,addAndCheck,a,long,1,DEF,$ > b
MathUtils.java,addAndCheck,a,long,1,DEF,$ < 0
MathUtils.java,addAndCheck,b,long,1,DEF,$ < 0
MathUtils.java,addAndCheck,b,long,1,DEF,Long.MIN_VALUE - $ <= a
MathUtils.java,binomialCoefficient,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficient,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficient,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 61
MathUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 66
MathUtils.java,binomialCoefficientDouble,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficientDouble,n,int,0,RET,$ < 67
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 67
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 1030
MathUtils.java,checkBinomial,n,int,0,DEF,$ < k
MathUtils.java,checkBinomial,n,int,0,DEF,$ < 0
MathUtils.java,compareTo,x,double,0,RET,$ < y
MathUtils.java,equals,xInt,long,0,DEF,$ < 0
MathUtils.java,equals,yInt,long,0,DEF,$ < 0
MathUtils.java,equals,x,double[],0,RET,$ == null
MathUtils.java,equals,y,double[],0,RET,$ == null
MathUtils.java,equals,x,double[],0,RET,$.length != y.length
MathUtils.java,equalsIncludingNaN,x,double[],0,RET,$ == null
MathUtils.java,equalsIncludingNaN,y,double[],0,RET,$ == null
MathUtils.java,equalsIncludingNaN,x,double[],0,RET,$.length != y.length
MathUtils.java,factorial,n,int,0,DEF,$ < 0
MathUtils.java,factorial,n,int,0,ArithmeticException,$ > 20
MathUtils.java,factorialDouble,n,int,0,DEF,$ < 0
MathUtils.java,factorialDouble,n,int,0,RET,$ < 21
MathUtils.java,factorialLog,n,int,0,DEF,$ < 0
MathUtils.java,factorialLog,n,int,0,RET,$ < 21
MathUtils.java,gcd,u,int,0,RET,$ == 0
MathUtils.java,gcd,v,int,0,RET,$ == 0
MathUtils.java,gcd,u,int,0,DEF,$ == Integer.MIN_VALUE
MathUtils.java,gcd,v,int,0,DEF,$ == Integer.MIN_VALUE
MathUtils.java,gcd,u,int,0,DEF,$ > 0
MathUtils.java,gcd,v,int,0,DEF,$ > 0
MathUtils.java,gcd,k,int,0,DEF,$ == 31
MathUtils.java,gcd,t,int,1,DEF,$ > 0
MathUtils.java,gcd,u,long,0,RET,$ == 0
MathUtils.java,gcd,v,long,0,RET,$ == 0
MathUtils.java,gcd,u,long,0,DEF,$ == Long.MIN_VALUE
MathUtils.java,gcd,v,long,0,DEF,$ == Long.MIN_VALUE
MathUtils.java,gcd,u,long,0,DEF,$ > 0
MathUtils.java,gcd,v,long,0,DEF,$ > 0
MathUtils.java,gcd,k,int,0,DEF,$ == 63
MathUtils.java,gcd,t,long,1,DEF,$ > 0
MathUtils.java,lcm,a,int,0,RET,$==0
MathUtils.java,lcm,b,int,0,RET,$==0
MathUtils.java,lcm,lcm,int,0,DEF,$ == Integer.MIN_VALUE
MathUtils.java,lcm,a,long,0,RET,$==0
MathUtils.java,lcm,b,long,0,RET,$==0
MathUtils.java,lcm,lcm,long,0,DEF,$ == Long.MIN_VALUE
MathUtils.java,mulAndCheck,m,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,mulAndCheck,m,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,mulAndCheck,a,long,1,DEF,$ > b
MathUtils.java,mulAndCheck,a,long,1,ArithmeticException,$ < 0
MathUtils.java,mulAndCheck,b,long,1,ArithmeticException,$ < 0
MathUtils.java,mulAndCheck,b,long,1,ArithmeticException,$ > 0
MathUtils.java,mulAndCheck,b,long,1,DEF,Long.MIN_VALUE / $ <= a
MathUtils.java,mulAndCheck,a,long,1,ArithmeticException,$ > 0
MathUtils.java,scalb,d,double,0,RET,$ == 0
MathUtils.java,normalizeArray,sum,double,0,DEF,$ == 0
MathUtils.java,roundUnscaled,sign,double,1,DEF,$ == -1
MathUtils.java,roundUnscaled,sign,double,1,DEF,$ == -1
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ < 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ >= 0.5
MathUtils.java,subAndCheck,s,long,0,DEF,$ < Integer.MIN_VALUE
MathUtils.java,subAndCheck,s,long,0,DEF,$ > Integer.MAX_VALUE
MathUtils.java,subAndCheck,b,long,1,ArithmeticException,$ == Long.MIN_VALUE
MathUtils.java,subAndCheck,a,long,1,DEF,$ < 0
MathUtils.java,pow,e,int,0,DEF,$ < 0
MathUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,long,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,int,0,DEF,$ < 0
MathUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,long,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,int,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,BigInteger,0,DEF,$.compareTo(BigInteger.ZERO) < 0
MathUtils.java,checkOrder,val,double[],0,DEF,$[i] <= previous
MathUtils.java,checkOrder,i,int,0,DEF,val[$] <= previous
MathUtils.java,checkOrder,val,double[],0,DEF,$[i] < previous
MathUtils.java,checkOrder,i,int,0,DEF,val[$] < previous
MathUtils.java,checkOrder,val,double[],0,DEF,$[i] >= previous
MathUtils.java,checkOrder,i,int,0,DEF,val[$] >= previous
MathUtils.java,checkOrder,val,double[],0,DEF,$[i] > previous
MathUtils.java,checkOrder,i,int,0,DEF,val[$] > previous
MathUtils.java,safeNorm,xabs,double,1,DEF,$<rdwarf
MathUtils.java,safeNorm,xabs,double,1,DEF,$>agiant
MathUtils.java,safeNorm,xabs,double,1,DEF,$>rdwarf
MathUtils.java,safeNorm,xabs,double,1,DEF,$>x1max
MathUtils.java,safeNorm,xabs,double,1,DEF,$>x3max
MathUtils.java,safeNorm,xabs,double,0,DEF,$!=0.0
MathUtils.java,safeNorm,s1,double,1,DEF,$!=0.0
MathUtils.java,safeNorm,s2,double,1,DEF,$==0.0
MathUtils.java,safeNorm,s2,double,1,DEF,$>=x3max
DefaultTransformer.java,transform,o,Object,0,NullArgumentException,$ == null
DefaultTransformer.java,transform,o,null,0,RET,$ instanceof Number
DefaultTransformer.java,equals,other,Object,0,RET,$ == null
MultidimensionalCounter.java,MultidimensionalCounter,tS,int,0,NotStrictlyPositiveException,$ <= 0
MultidimensionalCounter.java,getCounts,index,int,0,OutOfRangeException,$ < 0
MultidimensionalCounter.java,getCounts,index,int,0,OutOfRangeException,$ >= totalSize
MultidimensionalCounter.java,getCount,c,int[],0,DimensionMismatchException,$.length != dimension
MultidimensionalCounter.java,getCount,index,int,0,OutOfRangeException,$ < 0
Incrementor.java,incrementCount,count,int,0,MaxCountExceededException,++$ > maximalCount
FastMath.java,null,i,int,0,DEF,$ != 0
FastMath.java,sinh,a,double,0,DEF,$ < 0
FastMath.java,sinh,a,double,1,DEF,$ > 0.3
FastMath.java,sinh,a,double,1,DEF,$ > 0.05
FastMath.java,tanh,a,double,0,DEF,$ < 0
FastMath.java,tanh,a,double,1,DEF,$ > 0.074
FastMath.java,tanh,a,double,1,DEF,$ > 0.016
FastMath.java,asinh,a,double,0,DEF,$ < 0
FastMath.java,asinh,a,double,1,DEF,$ > 0.167
FastMath.java,asinh,a,double,1,DEF,$ > 0.097
FastMath.java,asinh,a,double,1,DEF,$ > 0.036
FastMath.java,asinh,a,double,1,DEF,$ > 0.0036
FastMath.java,atanh,a,double,0,DEF,$ < 0
FastMath.java,atanh,a,double,1,DEF,$ > 0.15
FastMath.java,atanh,a,double,1,DEF,$ > 0.087
FastMath.java,atanh,a,double,1,DEF,$ > 0.031
FastMath.java,atanh,a,double,1,DEF,$ > 0.003
FastMath.java,exp,x,double,1,RET,$ < 0.0
FastMath.java,exp,intVal,int,0,RET,$ > 746
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,intVal,int,0,RET,$ > 709
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,intVal,int,0,RET,$ == 709
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,intVal,int,0,RET,$ > 709
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,exp,extra,double,1,DEF,$ != 0.0
FastMath.java,exp,hiPrec,double[],0,DEF,$ != null
FastMath.java,expm1,x,double,0,RET,$ != x
FastMath.java,expm1,x,double,0,RET,$ == 0.0
FastMath.java,expm1,x,double,0,RET,$ <= -1.0
FastMath.java,expm1,x,double,0,RET,$ >= 1.0
FastMath.java,expm1,x,double,1,RET,$ > 0.0
FastMath.java,expm1,x,double,0,DEF,$ < 0.0
FastMath.java,slowexp,result,double[],0,DEF,$ != null
FastMath.java,split,d,double,1,DEF,$ < 8e298
FastMath.java,split,d,double,1,DEF,$ > -8e298
FastMath.java,resplit,c,double,1,DEF,$ < 8e298
FastMath.java,resplit,c,double,1,DEF,$ > -8e298
FastMath.java,splitReciprocal,in,double[],0,DEF,$[0] == 0.0
FastMath.java,expint,p,int,0,DEF,($ & 1) != 0
FastMath.java,expint,result,double[],0,DEF,$ != null
FastMath.java,log,bits,long,0,RET,($ & 0x8000000000000000L) != 0
FastMath.java,log,x,double,0,RET,$ != x
FastMath.java,log,x,double,0,RET,$ != 0.0
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log,bits,long,0,RET,($ & 0x7ff0000000000000L) == 0
FastMath.java,log,x,double,0,RET,$ == 0
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log,exp,int,0,RET,$ == -1
FastMath.java,log,exp,int,0,RET,$ == 0
FastMath.java,log,x,double,0,RET,$ < 1.01
FastMath.java,log,x,double,0,RET,$ > 0.99
FastMath.java,log,hiPrec,double[],0,RET,$ == null
FastMath.java,log,hiPrec,double[],1,DEF,$ != null
FastMath.java,log,hiPrec,double[],0,DEF,$ != null
FastMath.java,log1p,x,double,0,RET,$ == -1
FastMath.java,log1p,x,double,0,RET,$ > 0
FastMath.java,log1p,x,double,0,RET,1/$ == 0
FastMath.java,log1p,x,double,0,RET,$>1e-6
FastMath.java,log1p,x,double,0,RET,$<-1e-6
FastMath.java,pow,y,double,0,RET,$ == 0.0
FastMath.java,pow,x,double,0,RET,$ != x
FastMath.java,pow,x,double,0,RET,$ == 0
FastMath.java,pow,bits,long,0,RET,($ & 0x8000000000000000L) != 0
FastMath.java,pow,y,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ > 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ > 0
FastMath.java,pow,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,pow,y,double,0,RET,$ != y
FastMath.java,pow,y,double,1,RET,$ < 0.0
FastMath.java,pow,y,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,pow,x,double,0,RET,$ * $ == 1.0
FastMath.java,pow,x,double,1,RET,$ * $ > 1.0
FastMath.java,pow,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,pow,y,double,0,RET,$ != y
FastMath.java,pow,y,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ > 0
FastMath.java,pow,y,double,0,RET,$ == yi
FastMath.java,pow,yi,long,0,RET,($ & 1) == 1
FastMath.java,pow,y,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,pow,x,double,0,RET,$ * $ == 1.0
FastMath.java,pow,x,double,1,RET,$ * $ < 1.0
FastMath.java,pow,x,double,0,RET,$ < 0
FastMath.java,pow,y,double,0,RET,$ >= 4503599627370496.0
FastMath.java,pow,y,double,0,RET,$ <= -4503599627370496.0
FastMath.java,pow,y,double,1,RET,$ == (long) y
FastMath.java,pow,y,double,1,DEF,$ < 8e298
FastMath.java,pow,y,double,1,DEF,$ > -8e298
FastMath.java,slowSin,i,int,0,DEF,($ & 1) == 0
FastMath.java,slowSin,i,int,0,DEF,($ & 2) != 0
FastMath.java,slowSin,result,double[],0,DEF,$ != null
FastMath.java,slowCos,i,int,0,DEF,($ & 1) != 0
FastMath.java,slowCos,i,int,0,DEF,($ & 2) != 0
FastMath.java,slowCos,result,double[],0,DEF,$ != null
FastMath.java,buildSinCosTables,i,int,1,DEF,($ & 1) == 0
FastMath.java,sinQ,xb,double,0,DEF,$ != 0.0
FastMath.java,tanQ,xb,double,0,DEF,$ != 0.0
FastMath.java,reducePayneHanek,shift,int,1,DEF,$ != 0
FastMath.java,sin,x,double,0,DEF,$ < 0
FastMath.java,sin,xa,double,0,RET,$ == 0.0
FastMath.java,sin,bits,long,0,RET,$ < 0
FastMath.java,sin,xa,double,0,RET,$ != xa
FastMath.java,sin,xa,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,sin,xa,double,1,DEF,$ > 3294198.0
FastMath.java,sin,xa,double,0,DEF,$ > 1.5707963267948966
FastMath.java,sin,remA,double,0,DEF,$ > 0.0
FastMath.java,cos,x,double,0,DEF,$ < 0
FastMath.java,cos,xa,double,0,RET,$ != xa
FastMath.java,cos,xa,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,cos,xa,double,1,DEF,$ > 3294198.0
FastMath.java,cos,xa,double,0,DEF,$ > 1.5707963267948966
FastMath.java,cos,remA,double,0,DEF,$ > 0.0
FastMath.java,tan,x,double,0,DEF,$ < 0
FastMath.java,tan,xa,double,0,RET,$ == 0.0
FastMath.java,tan,bits,long,0,RET,$ < 0
FastMath.java,tan,xa,double,0,RET,$ != xa
FastMath.java,tan,xa,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,tan,xa,double,1,DEF,$ > 3294198.0
FastMath.java,tan,xa,double,0,DEF,$ > 1.5707963267948966
FastMath.java,tan,remA,double,0,DEF,$ > 0.0
FastMath.java,tan,xa,double,0,DEF,$ > 1.5
FastMath.java,tan,quadrant,int,1,DEF,($ & 1) == 0
FastMath.java,atan,xa,double,0,DEF,$ < 0
FastMath.java,atan,xa,double,0,RET,$ > 1.633123935319537E16
FastMath.java,atan,xa,double,1,DEF,$ < 1.0
FastMath.java,atan,idx,int,1,DEF,$ == 0
FastMath.java,atan2,x,double,0,RET,$ !=x
FastMath.java,atan2,y,double,0,RET,$ != y
FastMath.java,atan2,y,double,0,RET,$ == 0.0
FastMath.java,atan2,invx,double,0,RET,$ == 0.0
FastMath.java,atan2,x,double,1,RET,$ > 0
FastMath.java,atan2,result,double,0,RET,$ != result
FastMath.java,atan2,x,double,1,RET,$ < 0.0
FastMath.java,atan2,invx,double,1,RET,$ < 0.0
FastMath.java,atan2,y,double,1,RET,$ < 0.0
FastMath.java,atan2,invy,double,1,RET,$ < 0.0
FastMath.java,atan2,y,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,y,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,x,double,0,RET,$ == Double.POSITIVE_INFINITY
FastMath.java,atan2,y,double,0,RET,$ > 0.0
FastMath.java,atan2,y,double,0,RET,1/$ > 0.0
FastMath.java,atan2,y,double,0,RET,$ < 0.0
FastMath.java,atan2,y,double,0,RET,1/$ < 0.0
FastMath.java,atan2,x,double,0,RET,$ == Double.NEGATIVE_INFINITY
FastMath.java,atan2,y,double,0,RET,$ > 0.0
FastMath.java,atan2,y,double,0,RET,1/$ > 0.0
FastMath.java,atan2,y,double,0,RET,$ < 0.0
FastMath.java,atan2,y,double,0,RET,1/$ < 0.0
FastMath.java,atan2,x,double,0,RET,$ == 0
FastMath.java,atan2,y,double,0,RET,$ > 0.0
FastMath.java,atan2,y,double,0,RET,1/$ > 0.0
FastMath.java,atan2,y,double,0,RET,$ < 0.0
FastMath.java,atan2,y,double,0,RET,1/$ < 0.0
FastMath.java,atan2,x,double,0,DEF,$ > 8e298
FastMath.java,atan2,x,double,0,DEF,$ < -8e298
FastMath.java,asin,x,double,0,RET,$ != x
FastMath.java,asin,x,double,0,RET,$ > 1.0
FastMath.java,asin,x,double,0,RET,$ < -1.0
FastMath.java,asin,x,double,0,RET,$ == 1.0
FastMath.java,asin,x,double,0,RET,$ == -1.0
FastMath.java,acos,x,double,0,RET,$ != x
FastMath.java,acos,x,double,0,RET,$ > 1.0
FastMath.java,acos,x,double,0,RET,$ < -1.0
FastMath.java,acos,x,double,0,RET,$ == -1.0
FastMath.java,acos,x,double,0,RET,$ == 1.0
FastMath.java,acos,x,double,0,RET,$ == 0
FastMath.java,cbrt,exponent,int,0,RET,$ == -1023
FastMath.java,cbrt,x,double,0,RET,$ == 0
FastMath.java,cbrt,exponent,int,0,RET,$ == 1024
FastMath.java,nextAfter,d,double,0,RET,$ == 0
FastMath.java,nextAfter,d,double,1,RET,$ * (direction - $) >= 0
FastMath.java,nextAfter,direction,double,1,RET,d * ($ - d) >= 0
FastMath.java,nextAfter,mantissa,long,1,RET,$ == 0x000fffffffffffffL
FastMath.java,nextAfter,mantissa,long,1,RET,$ == 0L
FastMath.java,floor,x,double,0,RET,$ != x
FastMath.java,floor,x,double,0,RET,$ >= 4503599627370496.0
FastMath.java,floor,x,double,0,RET,$ <= -4503599627370496.0
FastMath.java,floor,x,double,0,DEF,$ < 0
FastMath.java,floor,y,long,0,DEF,$ != x
FastMath.java,floor,y,long,0,RET,$ == 0
FastMath.java,ceil,x,double,0,RET,$ != x
FastMath.java,ceil,y,double,0,RET,$ == x
FastMath.java,ceil,y,double,0,RET,$ == 0
FastMath.java,rint,d,double,0,RET,$ > 0.5
FastMath.java,rint,d,double,0,RET,$ < 0.5
TransformerMap.java,transform,o,null,1,DEF,$ instanceof Number
TransformerMap.java,transform,o,null,1,DEF,$ instanceof String
TransformerMap.java,transform,trans,NumberTransformer,0,DEF,$ != null
TransformerMap.java,equals,other,null,0,RET,$ instanceof TransformerMap
OpenIntToDoubleHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToDoubleHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToDoubleHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToDoubleHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToDoubleHashMap.java,key,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,key,current,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,value,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,value,current,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,advance,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,advance,current,int,0,DEF,$ < 0
BigFraction.java,BigFraction,num,BigInteger,0,NullArgumentException,$ == null
BigFraction.java,BigFraction,den,BigInteger,0,NullArgumentException,$ == null
BigFraction.java,BigFraction,gcd,BigInteger,0,DEF,BigInteger.ONE.compareTo($) < 0
BigFraction.java,BigFraction,den,BigInteger,0,DEF,BigInteger.ZERO.compareTo($) > 0
BigFraction.java,BigFraction,exponent,long,0,DEF,$ != 0
BigFraction.java,BigFraction,sign,long,0,DEF,$ != 0
BigFraction.java,BigFraction,k,int,1,DEF,$ < 0
BigFraction.java,BigFraction,a0,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,value,double,0,RET,FastMath.abs(a0 - $) < epsilon
BigFraction.java,BigFraction,a0,long,0,RET,FastMath.abs($ - value) < epsilon
BigFraction.java,BigFraction,p2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,q2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,n,int,1,DEF,$ < maxIterations
BigFraction.java,BigFraction,convergent,double,1,DEF,FastMath.abs($ - value) > epsilon
BigFraction.java,BigFraction,value,double,1,DEF,FastMath.abs(convergent - $) > epsilon
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,BigFraction,n,int,0,FractionConversionException,$ >= maxIterations
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,getReducedFraction,numerator,int,0,RET,$ == 0
BigFraction.java,add,fraction,BigFraction,0,NullArgumentException,$ == null
BigFraction.java,divide,fraction,BigFraction,0,NullArgumentException,$ == null
BigFraction.java,equals,other,null,0,DEF,$ instanceof BigFraction
BigFraction.java,multiply,bg,BigInteger,0,NullArgumentException,$ == null
BigFraction.java,multiply,fraction,BigFraction,0,NullArgumentException,$ == null
BigFraction.java,pow,exponent,int,0,RET,$ < 0
BigFraction.java,pow,exponent,long,0,RET,$ < 0
BigFraction.java,pow,exponent,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
BigFraction.java,subtract,bg,BigInteger,0,NullArgumentException,$ == null
BigFraction.java,subtract,fraction,BigFraction,0,NullArgumentException,$ == null
Fraction.java,Fraction,a0,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,value,double,0,RET,FastMath.abs(a0 - $) < epsilon
Fraction.java,Fraction,a0,long,0,RET,FastMath.abs($ - value) < epsilon
Fraction.java,Fraction,p2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,q2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,n,int,1,DEF,$ < maxIterations
Fraction.java,Fraction,convergent,double,1,DEF,FastMath.abs($ - value) > epsilon
Fraction.java,Fraction,value,double,1,DEF,FastMath.abs(convergent - $) > epsilon
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,n,int,0,FractionConversionException,$ >= maxIterations
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,den,int,0,DEF,$ == 0
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,Fraction,num,int,0,DEF,$ == Integer.MIN_VALUE
Fraction.java,Fraction,den,int,0,DEF,$ == Integer.MIN_VALUE
Fraction.java,Fraction,d,int,0,DEF,$ > 1
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,abs,numerator,int,1,DEF,$ >= 0
Fraction.java,equals,other,null,0,RET,$ instanceof Fraction
Fraction.java,negate,numerator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,addSub,fraction,Fraction,0,NullArgumentException,$ == null
Fraction.java,addSub,numerator,int,0,RET,$ == 0
Fraction.java,addSub,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,addSub,d1,int,0,RET,$==1
Fraction.java,addSub,w,BigInteger,0,DEF,$.bitLength() > 31
Fraction.java,multiply,fraction,Fraction,0,NullArgumentException,$ == null
Fraction.java,multiply,numerator,int,0,RET,$ == 0
Fraction.java,multiply,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,divide,fraction,Fraction,0,NullArgumentException,$ == null
Fraction.java,divide,fraction,Fraction,0,DEF,$.numerator == 0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$ == 0
Fraction.java,getReducedFraction,numerator,int,0,RET,$==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,numerator,int,0,DEF,($&1)==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$ < 0
Fraction.java,getReducedFraction,numerator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,toString,denominator,int,1,DEF,$ == 1
Fraction.java,toString,numerator,int,1,DEF,$ == 0
AbstractFormat.java,setDenominatorFormat,format,NumberFormat,0,NullArgumentException,$ == null
AbstractFormat.java,setNumeratorFormat,format,NumberFormat,0,NullArgumentException,$ == null
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
ProperBigFractionFormat.java,format,num,BigInteger,0,DEF,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,ret,BigFraction,0,RET,$ != null
ProperBigFractionFormat.java,parse,whole,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,setWholeFormat,format,NumberFormat,0,NullArgumentException,$ == null
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Fraction
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
FractionFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
FractionFormat.java,parse,num,Number,0,RET,$ == null
FractionFormat.java,parse,den,Number,0,RET,$ == null
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigFraction
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigInteger
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
BigFractionFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
BigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
BigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperFractionFormat.java,format,whole,int,0,DEF,$ != 0
ProperFractionFormat.java,parse,ret,Fraction,0,RET,$ != null
ProperFractionFormat.java,parse,whole,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,parse,den,Number,0,RET,$ == null
ProperFractionFormat.java,parse,den,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,setWholeFormat,format,NumberFormat,0,NullArgumentException,$ == null
AbstractIntegrator.java,computeDerivatives,evaluations,int,0,MaxEvaluationsExceededException,++$ > maxEvaluations
AbstractIntegrator.java,sanityChecks,ode,FirstOrderDifferentialEquations,0,IntegratorException,$.getDimension() != y0.length
AbstractIntegrator.java,sanityChecks,ode,FirstOrderDifferentialEquations,0,IntegratorException,$.getDimension() != y.length
ContinuousOutputModel.java,append,model,ContinuousOutputModel,0,RET,$.steps.size() == 0
ContinuousOutputModel.java,append,steps,List<StepInterpolator>,1,DEF,$.size() == 0
ContinuousOutputModel.java,handleStep,steps,List<StepInterpolator>,0,DEF,$.size() == 0
ContinuousOutputModel.java,setInterpolatedTime,sMin,StepInterpolator,0,RET,locatePoint(time, $) <= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMin) <= 0
ContinuousOutputModel.java,setInterpolatedTime,sMax,StepInterpolator,0,RET,locatePoint(time, $) >= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMax) >= 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ < 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ > 0
ContinuousOutputModel.java,setInterpolatedTime,tMin,double,1,DEF,FastMath.abs(tMed - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,FastMath.abs($ - tMin) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMax,double,1,DEF,FastMath.abs($ - tMed) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,FastMath.abs(tMax - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,index,int,1,DEF,$ < low
ContinuousOutputModel.java,setInterpolatedTime,index,int,0,DEF,$ > high
AdamsBashforthIntegrator.java,integrate,y,double[],0,DEF,$ != y0
AdamsBashforthIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
DormandPrince54StepInterpolator.java,DormandPrince54StepInterpolator,interpolator,DormandPrince54StepInterpolator,1,DEF,$.v1 == null
DormandPrince54StepInterpolator.java,computeInterpolatedStateAndDerivatives,v1,double[],0,DEF,$ == null
RungeKuttaIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,setStabilityCheck,stepsizeReductionFactor,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStabilityCheck,stepsizeReductionFactor,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,control1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,control1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,control2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,control2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,control3,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,control3,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,control4,double,1,DEF,$ < 1.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,control4,double,1,DEF,$ > 999.9
GraggBulirschStoerIntegrator.java,setOrderControl,maximalOrder,int,0,DEF,$ <= 6
GraggBulirschStoerIntegrator.java,setOrderControl,maximalOrder,int,0,DEF,$ % 2 != 0
GraggBulirschStoerIntegrator.java,setOrderControl,control1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,control1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setOrderControl,control2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,control2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$ == null
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$.length != size
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudifControlParameter,int,1,DEF,$ <= 0
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudifControlParameter,int,1,DEF,$ >= 7
GraggBulirschStoerIntegrator.java,rescale,vecAbsoluteTolerance,double[],1,DEF,$ == null
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,DEF,2 * $ == n
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,RET,$ <= maxChecks
GraggBulirschStoerIntegrator.java,tryStep,k,int,0,RET,$ < maxIter
GraggBulirschStoerIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize > t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ > t
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize < t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ < t
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 0
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > 1.0e15
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > maxError
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ > 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,mu,int,0,DEF,$ >= 0
GraggBulirschStoerIntegrator.java,integrate,interpError,double,0,DEF,$ > 10.0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 1
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ <= targetIter
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 2
GraggBulirschStoerIntegrator.java,integrate,optimalIter,int,1,DEF,$ <= k
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ < targetIter
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ < minStep
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,sanityChecks,equations,null,1,DEF,$ instanceof ExtendedFirstOrderDifferentialEquations
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,IntegratorException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,IntegratorException,$.length != mainSetDimension
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,IntegratorException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,IntegratorException,$.length != mainSetDimension
AdaptiveStepsizeIntegrator.java,initializeStep,initialStep,double,0,RET,$ > 0
AdaptiveStepsizeIntegrator.java,filterStep,h,double,0,IntegratorException,FastMath.abs($) < minStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,0,DEF,$ < -maxStep
EmbeddedRungeKuttaIntegrator.java,integrate,y,double[],0,DEF,$ != y0
EmbeddedRungeKuttaIntegrator.java,integrate,vecAbsoluteTolerance,double[],1,DEF,$ == null
EmbeddedRungeKuttaIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
AdamsNordsieckTransformer.java,getInstance,t,AdamsNordsieckTransformer,0,DEF,$ == null
AdamsMoultonIntegrator.java,integrate,y,double[],0,DEF,$ != y0
AdamsMoultonIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
AdamsMoultonIntegrator.java,visit,row,int,1,DEF,($ & 0x1) == 0
AdamsMoultonIntegrator.java,end,i,int,0,DEF,$ < mainSetDimension
DormandPrince853StepInterpolator.java,DormandPrince853StepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState == null
DormandPrince853StepInterpolator.java,computeInterpolatedStateAndDerivatives,v,double[][],0,DEF,$ == null
DormandPrince853StepInterpolator.java,doFinalize,currentState,double[],0,RET,$ == null
DormandPrince853Integrator.java,estimateError,den,double,0,DEF,$ <= 0.0
RungeKuttaStepInterpolator.java,RungeKuttaStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
RungeKuttaStepInterpolator.java,readExternal,currentState,double[],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,GraggBulirschStoerStepInterpolator,interpolator,GraggBulirschStoerStepInterpolator,1,DEF,$.polynoms == null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ < 0
GraggBulirschStoerStepInterpolator.java,resetTables,polynoms,double[][],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ <= 4
GraggBulirschStoerStepInterpolator.java,computeCoefficients,polynoms,double[][],0,DEF,$ == null
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,RET,$ < 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 1
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 2
GraggBulirschStoerStepInterpolator.java,estimateError,currentDegree,int,0,DEF,$ >= 5
GraggBulirschStoerStepInterpolator.java,computeInterpolatedStateAndDerivatives,currentDegree,int,0,DEF,$ > 3
GraggBulirschStoerStepInterpolator.java,computeInterpolatedStateAndDerivatives,h,double,0,DEF,$ == 0
StepNormalizer.java,handleStep,lastState,double[],0,DEF,$ == null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.scaled != null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.nordsieck != null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.stateVariation != null
NordsieckStepInterpolator.java,writeExternal,scaled,double[],1,DEF,$ == null
NordsieckStepInterpolator.java,writeExternal,nordsieck,Array2DRowRealMatrix,1,DEF,$ == null
AbstractStepInterpolator.java,AbstractStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
AbstractStepInterpolator.java,writeBaseExternal,currentState,double[],1,DEF,$ == null
AbstractStepInterpolator.java,writeBaseExternal,currentState,double[],0,DEF,$ != null
AbstractStepInterpolator.java,readBaseExternal,dimension,int,1,DEF,$ < 0
DummyStepInterpolator.java,writeExternal,currentDerivative,double[],0,DEF,$ != null
DummyStepInterpolator.java,readExternal,currentState,double[],1,DEF,$ == null
FirstOrderIntegratorWithJacobians.java,getStepHandlers,handler,null,0,DEF,$ instanceof StepHandlerWrapper
FirstOrderIntegratorWithJacobians.java,getEventHandlers,handler,null,0,DEF,$ instanceof EventHandlerWrapper
FirstOrderIntegratorWithJacobians.java,integrate,k,int,0,DEF,$ != 0
FirstOrderIntegratorWithJacobians.java,checkDimension,arrayDimension,int,0,DEF,$ != expected
FirstOrderIntegratorWithJacobians.java,computeDerivatives,evaluations,int,0,MaxEvaluationsExceededException,++$ > maxEvaluations
FirstOrderIntegratorWithJacobians.java,computeJacobians,evaluations,int,0,MaxEvaluationsExceededException,$ > maxEvaluations
EventState.java,evaluateStep,gb,double,1,FunctionEvaluationException:RET,$ >= 0
EventState.java,evaluateStep,ga,double,0,DEF,$ * gb > 0
EventState.java,evaluateStep,gb,double,0,DEF,ga * $ > 0
EventState.java,evaluateStep,ga,double,0,DEF,$ * gb > 0
EventState.java,evaluateStep,gb,double,0,DEF,ga * $ > 0
EventState.java,evaluateStep,root,double,1,DEF,FastMath.abs($ - ta) <= convergence
EventState.java,evaluateStep,ta,double,1,DEF,FastMath.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,1,DEF,FastMath.abs($ - previousEventTime) <= convergence
EventState.java,evaluateStep,previousEventTime,double,1,DEF,FastMath.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,0,RET,FastMath.abs(previousEventTime - $) > convergence
EventState.java,evaluateStep,previousEventTime,double,0,RET,FastMath.abs($ - root) > convergence
EventState.java,evaluateStep,pendingEventTime,double,0,RET,FastMath.abs(t1 - $) <= convergence
EventState.java,evaluateStep,t1,double,0,RET,FastMath.abs($ - pendingEventTime) <= convergence
EventState.java,evaluateStep,cause,Throwable,1,DEF,$ != null
EventState.java,evaluateStep,cause,null,1,DEF,$ instanceof DerivativeException
EventState.java,evaluateStep,cause,Throwable,0,DEF,$ != null
EventState.java,evaluateStep,cause,null,0,DEF,$ instanceof EventException
EventState.java,reset,nextAction,int,0,DEF,$ == EventHandler.RESET_STATE
CombinedEventsManager.java,evaluateStep,first,EventState,1,DEF,$ == null
MultistepIntegrator.java,MultistepIntegrator,nSteps,int,0,DEF,$ <= 0
MultistepIntegrator.java,start,de,null,0,DEF,$ instanceof InitializationCompletedMarkerException
ArgUtils.java,flatten,array,Object[],0,DEF,$ != null
ArgUtils.java,flatten,o,null,1,DEF,$ instanceof Object[]
MessageFactory.java,buildMessage,specific,Localizable,0,DEF,$ != null
MathRuntimeException.java,getMessage,pattern,Localizable,0,RET,$ != null
BinaryMutation.java,mutate,original,null,0,IllegalArgumentException,$ instanceof BinaryChromosome
RandomKey.java,decodeGeneric,representation,List<Double>,0,IllegalArgumentException,$.size() != l
RandomKey.java,isSame,another,null,0,RET,$ instanceof RandomKey<?>
RandomKey.java,checkValidity,val,double,0,InvalidRepresentationException,$ < 0
RandomKey.java,checkValidity,val,double,0,InvalidRepresentationException,$ > 1
RandomKey.java,inducedPermutation,index,int,0,IllegalArgumentException,$ == -1
GeneticAlgorithm.java,GeneticAlgorithm,crossoverRate,double,0,IllegalArgumentException,$ < 0
GeneticAlgorithm.java,GeneticAlgorithm,crossoverRate,double,0,IllegalArgumentException,$ > 1
GeneticAlgorithm.java,GeneticAlgorithm,mutationRate,double,0,IllegalArgumentException,$ < 0
GeneticAlgorithm.java,GeneticAlgorithm,mutationRate,double,0,IllegalArgumentException,$ > 1
Chromosome.java,searchForFitnessUpdate,sameChromosome,Chromosome,0,DEF,$ != null
ElitisticListPopulation.java,setElitismRate,elitismRate,double,0,IllegalArgumentException,$ < 0
ElitisticListPopulation.java,setElitismRate,elitismRate,double,0,IllegalArgumentException,$ > 1
BinaryChromosome.java,checkValidity,i,int,0,InvalidRepresentationException,$ < 0
BinaryChromosome.java,checkValidity,i,int,0,InvalidRepresentationException,$ >1
BinaryChromosome.java,isSame,another,null,0,RET,$ instanceof BinaryChromosome
OnePointCrossover.java,crossover,first,null,0,IllegalArgumentException,$ instanceof AbstractListChromosome<?>
OnePointCrossover.java,crossover,second,null,0,IllegalArgumentException,$ instanceof AbstractListChromosome<?>
RandomKeyMutation.java,mutate,original,null,0,DEF,$ instanceof RandomKey<?>
ListPopulation.java,ListPopulation,chromosomes,List<Chromosome>,0,IllegalArgumentException,$.size() > populationLimit
ListPopulation.java,ListPopulation,populationLimit,int,0,IllegalArgumentException,$ < 0
ListPopulation.java,ListPopulation,populationLimit,int,0,IllegalArgumentException,$ < 0
ListPopulation.java,getFittestChromosome,bestChromosome,Chromosome,0,DEF,chromosome.compareTo($) > 0
ListPopulation.java,getFittestChromosome,chromosome,Chromosome,0,DEF,$.compareTo(bestChromosome) > 0
FixedGenerationCount.java,FixedGenerationCount,maxGenerations,int,0,IllegalArgumentException,$ <= 0
QRDecompositionImpl.java,QRDecompositionImpl,a,double,0,DEF,$ != 0.0
QRDecompositionImpl.java,getR,cachedR,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQT,cachedQT,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQT,minor,int,0,DEF,qrtMinor[$] != 0.0
QRDecompositionImpl.java,getQT,qrtMinor,double[],0,DEF,$[minor] != 0.0
QRDecompositionImpl.java,getH,cachedH,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,isNonSingular,diag,double,0,RET,$ == 0
QRDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
QRDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
RealMatrixImpl.java,RealMatrixImpl,d,double[][],0,NullPointerException,$ == null
RealMatrixImpl.java,RealMatrixImpl,nRows,int,0,DEF,$ == 0
RealMatrixImpl.java,RealMatrixImpl,nCols,int,0,DEF,$ == 0
RealMatrixImpl.java,RealMatrixImpl,r,int,0,DEF,d[$].length != nCols
RealMatrixImpl.java,RealMatrixImpl,d,double[][],0,DEF,$[r].length != nCols
RealMatrixImpl.java,setSubMatrix,data,double[][],1,DEF,$ == null
RealMatrixImpl.java,setSubMatrix,row,int,0,DEF,$ > 0
RealMatrixImpl.java,setSubMatrix,column,int,0,DEF,$ > 0
RealMatrixImpl.java,setSubMatrix,nRows,int,0,DEF,$ == 0
RealMatrixImpl.java,setSubMatrix,nCols,int,0,DEF,$ == 0
RealMatrixImpl.java,setSubMatrix,i,int,0,DEF,subMatrix[$].length != nCols
RealMatrixImpl.java,setSubMatrix,subMatrix,double[][],0,DEF,$[i].length != nCols
RealMatrixImpl.java,operate,v,double[],0,DEF,$.length != nCols
RealMatrixImpl.java,preMultiply,v,double[],0,DEF,$.length != nRows
LUDecompositionImpl.java,LUDecompositionImpl,sum,double,0,DEF,Math.abs($) > largest
LUDecompositionImpl.java,LUDecompositionImpl,col,int,0,RET,Math.abs(lu[max][$]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,max,int,0,RET,Math.abs(lu[$][col]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,lu,double[][],0,RET,Math.abs($[max][col]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,max,int,0,DEF,$ != col
LUDecompositionImpl.java,getL,cachedL,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,getU,cachedU,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,getP,cachedP,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
LUDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
LUDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
RealVectorFormat.java,format,i,int,0,DEF,$ > 0
RealVectorFormat.java,format,obj,null,0,RET,$ instanceof RealVector
RealVectorFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
RealVectorFormat.java,parse,component,Number,1,DEF,$ != null
Array2DRowRealMatrix.java,Array2DRowRealMatrix,d,double[][],0,NullPointerException,$ == null
Array2DRowRealMatrix.java,Array2DRowRealMatrix,nRows,int,0,DEF,$ == 0
Array2DRowRealMatrix.java,Array2DRowRealMatrix,nCols,int,0,DEF,$ == 0
Array2DRowRealMatrix.java,Array2DRowRealMatrix,r,int,0,DEF,d[$].length != nCols
Array2DRowRealMatrix.java,Array2DRowRealMatrix,d,double[][],0,DEF,$[r].length != nCols
Array2DRowRealMatrix.java,setSubMatrix,data,double[][],1,DEF,$ == null
Array2DRowRealMatrix.java,setSubMatrix,row,int,0,DEF,$ > 0
Array2DRowRealMatrix.java,setSubMatrix,column,int,0,DEF,$ > 0
Array2DRowRealMatrix.java,setSubMatrix,nRows,int,0,DEF,$ == 0
Array2DRowRealMatrix.java,setSubMatrix,nCols,int,0,DEF,$ == 0
Array2DRowRealMatrix.java,setSubMatrix,i,int,0,DEF,subMatrix[$].length != nCols
Array2DRowRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DEF,$[i].length != nCols
Array2DRowRealMatrix.java,operate,v,double[],0,DEF,$.length != nCols
Array2DRowRealMatrix.java,preMultiply,v,double[],0,DEF,$.length != nRows
AbstractRealMatrix.java,AbstractRealMatrix,rowDimension,int,0,DEF,$ <= 0
AbstractRealMatrix.java,AbstractRealMatrix,columnDimension,int,0,DEF,$ <= 0
AbstractRealMatrix.java,visit,row,int,0,DEF,$ == endRow
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$.length < rowsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$[0].length < columnsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$.length < selectedRows.length
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$[0].length < selectedColumns.length
AbstractRealMatrix.java,setSubMatrix,nRows,int,0,DEF,$ == 0
AbstractRealMatrix.java,setSubMatrix,nCols,int,0,DEF,$ == 0
AbstractRealMatrix.java,setSubMatrix,r,int,0,DEF,subMatrix[$].length != nCols
AbstractRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DEF,$[r].length != nCols
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getRowDimension() != 1
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getColumnDimension() != nCols
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getRowDimension() != nRows
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getColumnDimension() != 1
AbstractRealMatrix.java,setRowVector,vector,RealVector,0,InvalidMatrixException,$.getDimension() != nCols
AbstractRealMatrix.java,setColumnVector,vector,RealVector,0,InvalidMatrixException,$.getDimension() != nRows
AbstractRealMatrix.java,setRow,array,double[],0,InvalidMatrixException,$.length != nCols
AbstractRealMatrix.java,setColumn,array,double[],0,InvalidMatrixException,$.length != nRows
AbstractRealMatrix.java,inverse,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,isSingular,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractRealMatrix.java,operate,v,double[],0,DEF,$.length != nCols
AbstractRealMatrix.java,operate,v,RealVector,0,DEF,$.getDimension() != nCols
AbstractRealMatrix.java,preMultiply,v,double[],0,DEF,$.length != nRows
AbstractRealMatrix.java,preMultiply,v,RealVector,0,DEF,$.getDimension() != nRows
AbstractRealMatrix.java,solve,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,solve,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,luDecompose,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,toString,i,int,0,DEF,$ > 0
AbstractRealMatrix.java,toString,j,int,0,DEF,$ > 0
AbstractRealMatrix.java,equals,object,Object,0,RET,$ instanceof RealMatrix == false
AbstractRealMatrix.java,equals,object,null,0,RET,$ instanceof RealMatrix
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getColumnDimension() != nCols
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getRowDimension() != nRows
BlockRealMatrix.java,toBlocksLayout,length,int,0,DEF,$ != columns
BlockRealMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,setSubMatrix,refLength,int,0,DEF,$ < 1
BlockRealMatrix.java,setSubMatrix,subRow,double[],0,DEF,$.length != refLength
BlockRealMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
BlockRealMatrix.java,setRowMatrix,matrix,BlockRealMatrix,0,InvalidMatrixException,$.getRowDimension() != 1
BlockRealMatrix.java,setRowMatrix,matrix,BlockRealMatrix,0,InvalidMatrixException,$.getColumnDimension() != nCols
BlockRealMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
BlockRealMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
BlockRealMatrix.java,setColumnMatrix,matrix,BlockRealMatrix,0,InvalidMatrixException,$.getRowDimension() != nRows
BlockRealMatrix.java,setColumnMatrix,matrix,BlockRealMatrix,0,InvalidMatrixException,$.getColumnDimension() != 1
BlockRealMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
BlockRealMatrix.java,setRow,array,double[],0,InvalidMatrixException,$.length != nCols
BlockRealMatrix.java,setColumn,array,double[],0,InvalidMatrixException,$.length != nRows
BlockRealMatrix.java,operate,v,double[],0,DEF,$.length != columns
BlockRealMatrix.java,preMultiply,v,double[],0,DEF,$.length != rows
MatrixUtils.java,createRowFieldMatrix,nCols,int,0,DEF,$ == 0
MatrixUtils.java,createColumnFieldMatrix,nRows,int,0,DEF,$ == 0
MatrixUtils.java,checkRowIndex,row,int,0,MatrixIndexException,$ < 0
MatrixUtils.java,checkColumnIndex,column,int,0,MatrixIndexException,$ < 0
MatrixUtils.java,checkSubMatrixIndex,startRow,int,0,MatrixIndexException,$ > endRow
MatrixUtils.java,checkSubMatrixIndex,startColumn,int,0,MatrixIndexException,$ > endColumn
MatrixUtils.java,checkSubMatrixIndex,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
MatrixUtils.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
MatrixUtils.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length == 0
SingularValueDecompositionImpl.java,SingularValueDecompositionImpl,m,int,1,DEF,$>=n
SingularValueDecompositionImpl.java,SingularValueDecompositionImpl,product,double,0,DEF,$<0
SingularValueDecompositionImpl.java,getUT,cachedUt,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getS,cachedS,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getCovariance,dimension,int,0,DEF,$ == 0
SingularValueDecompositionImpl.java,getRank,singularValues,double[],0,RET,$[i] > threshold
SingularValueDecompositionImpl.java,getRank,i,int,0,RET,singularValues[$] > threshold
SingularValueDecompositionImpl.java,Solver,singularValues,double[],1,DEF,$[i]>0
SingularValueDecompositionImpl.java,Solver,i,int,1,DEF,singularValues[$]>0
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,lJI,double,0,NotSymmetricMatrixException,Math.abs(lIJ - $) > maxDelta
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,lIJ,double,0,NotSymmetricMatrixException,Math.abs($ - lJI) > maxDelta
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,ltI,double[],0,NotPositiveDefiniteMatrixException,$[i] < absolutePositivityThreshold
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,i,int,0,NotPositiveDefiniteMatrixException,ltI[$] < absolutePositivityThreshold
CholeskyDecompositionImpl.java,getL,cachedL,RealMatrix,0,DEF,$ == null
CholeskyDecompositionImpl.java,getLT,cachedLT,RealMatrix,0,DEF,$ == null
CholeskyDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
CholeskyDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
CholeskyDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
TriDiagonalTransformer.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,cachedQt,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,hK,double[],0,DEF,$[k] != 0.0
TriDiagonalTransformer.java,getQT,k,int,0,DEF,hK[$] != 0.0
TriDiagonalTransformer.java,getT,cachedT,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getT,i,int,0,DEF,$ > 0
TriDiagonalTransformer.java,transform,a,double,0,DEF,$ != 0.0
EigenDecompositionImpl.java,getV,cachedV,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getD,cachedD,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
EigenDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
EigenDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
EigenDecompositionImpl.java,isNonSingular,realEigenvalues,double[],0,RET,$[i] == 0
EigenDecompositionImpl.java,isNonSingular,i,int,0,RET,realEigenvalues[$] == 0
EigenDecompositionImpl.java,isNonSingular,imagEigenvalues,double[],0,RET,$[i] == 0
EigenDecompositionImpl.java,isNonSingular,i,int,0,RET,imagEigenvalues[$] == 0
EigenDecompositionImpl.java,findEigenVectors,realEigenvalues,double[],0,DEF,Math.abs($[i])>maxAbsoluteValue
EigenDecompositionImpl.java,findEigenVectors,i,int,0,DEF,Math.abs(realEigenvalues[$])>maxAbsoluteValue
EigenDecompositionImpl.java,findEigenVectors,e,double[],0,DEF,Math.abs($[i])>maxAbsoluteValue
EigenDecompositionImpl.java,findEigenVectors,i,int,0,DEF,Math.abs(e[$])>maxAbsoluteValue
EigenDecompositionImpl.java,findEigenVectors,maxAbsoluteValue,double,0,DEF,$!=0.0
EigenDecompositionImpl.java,findEigenVectors,e,double[],0,DEF,Math.abs($[m]) + delta == delta
EigenDecompositionImpl.java,findEigenVectors,delta,double,0,DEF,Math.abs(e[m]) + $ == delta
EigenDecompositionImpl.java,findEigenVectors,m,int,0,DEF,Math.abs(e[$]) + delta == delta
EigenDecompositionImpl.java,findEigenVectors,m,int,0,MaxIterationsExceededException,$ != j
EigenDecompositionImpl.java,findEigenVectors,its,int,0,MaxIterationsExceededException,$ == maxIter
EigenDecompositionImpl.java,findEigenVectors,q,double,1,DEF,$ < 0.0
EigenDecompositionImpl.java,findEigenVectors,e,double[],0,DEF,$[i + 1] == 0.0
EigenDecompositionImpl.java,findEigenVectors,i,int,0,DEF,e[$ + 1] == 0.0
EigenDecompositionImpl.java,findEigenVectors,e,double[],0,DEF,$[i + 1] == 0.0
EigenDecompositionImpl.java,findEigenVectors,i,int,0,DEF,e[$ + 1] == 0.0
EigenDecompositionImpl.java,findEigenVectors,i,int,0,DEF,$ >= j
EigenDecompositionImpl.java,findEigenVectors,realEigenvalues,double[],0,DEF,$[j] > p
EigenDecompositionImpl.java,findEigenVectors,j,int,0,DEF,realEigenvalues[$] > p
EigenDecompositionImpl.java,findEigenVectors,k,int,0,DEF,$ != i
EigenDecompositionImpl.java,findEigenVectors,realEigenvalues,double[],0,DEF,Math.abs($[i])>maxAbsoluteValue
EigenDecompositionImpl.java,findEigenVectors,i,int,0,DEF,Math.abs(realEigenvalues[$])>maxAbsoluteValue
EigenDecompositionImpl.java,findEigenVectors,maxAbsoluteValue,double,0,DEF,$!=0.0
OpenMapRealMatrix.java,multiply,outValue,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,setEntry,value,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,addToEntry,value,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,multiplyEntry,value,double,1,DEF,$ == 0.0
SparseFieldVector.java,append,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,dotProduct,idx,int,0,DEF,$ < v.length
SparseFieldVector.java,getSubVector,key,int,0,DEF,$ >= index
SparseFieldVector.java,getSubVector,key,int,0,DEF,$ < end
SparseFieldVector.java,outerProduct,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,subtract,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
SparseFieldVector.java,add,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,equals,obj,Object,0,RET,$ == null
SparseFieldVector.java,equals,obj,null,0,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,equals,field,Field<T>,1,RET,$ == null
SparseFieldVector.java,equals,other,SparseFieldVector<T>,0,RET,$.field != null
SparseFieldVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
AbstractFieldMatrix.java,AbstractFieldMatrix,rowDimension,int,0,DEF,$ <= 0
AbstractFieldMatrix.java,AbstractFieldMatrix,columnDimension,int,0,DEF,$ <= 0
AbstractFieldMatrix.java,extractField,d,T[][],0,DEF,$.length == 0
AbstractFieldMatrix.java,extractField,d,T[][],0,DEF,$[0].length == 0
AbstractFieldMatrix.java,extractField,d,T[],0,DEF,$.length == 0
AbstractFieldMatrix.java,buildArray,columns,int,0,RET,$ < 0
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,DEF,$.length < rowsCount
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,DEF,$[0].length < columnsCount
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,DEF,$.length < selectedRows.length
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,DEF,$[0].length < selectedColumns.length
AbstractFieldMatrix.java,setSubMatrix,nRows,int,0,DEF,$ == 0
AbstractFieldMatrix.java,setSubMatrix,nCols,int,0,DEF,$ == 0
AbstractFieldMatrix.java,setSubMatrix,r,int,0,DEF,subMatrix[$].length != nCols
AbstractFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,DEF,$[r].length != nCols
AbstractFieldMatrix.java,setRowMatrix,matrix,FieldMatrix<T>,0,InvalidMatrixException,$.getRowDimension() != 1
AbstractFieldMatrix.java,setRowMatrix,matrix,FieldMatrix<T>,0,InvalidMatrixException,$.getColumnDimension() != nCols
AbstractFieldMatrix.java,setColumnMatrix,matrix,FieldMatrix<T>,0,InvalidMatrixException,$.getRowDimension() != nRows
AbstractFieldMatrix.java,setColumnMatrix,matrix,FieldMatrix<T>,0,InvalidMatrixException,$.getColumnDimension() != 1
AbstractFieldMatrix.java,setRowVector,vector,FieldVector<T>,0,InvalidMatrixException,$.getDimension() != nCols
AbstractFieldMatrix.java,setColumnVector,vector,FieldVector<T>,0,InvalidMatrixException,$.getDimension() != nRows
AbstractFieldMatrix.java,setRow,array,T[],0,InvalidMatrixException,$.length != nCols
AbstractFieldMatrix.java,setColumn,array,T[],0,InvalidMatrixException,$.length != nRows
AbstractFieldMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractFieldMatrix.java,operate,v,T[],0,DEF,$.length != nCols
AbstractFieldMatrix.java,operate,v,FieldVector<T>,0,DEF,$.getDimension() != nCols
AbstractFieldMatrix.java,preMultiply,v,T[],0,DEF,$.length != nRows
AbstractFieldMatrix.java,preMultiply,v,FieldVector<T>,0,DEF,$.getDimension() != nRows
AbstractFieldMatrix.java,toString,i,int,0,DEF,$ > 0
AbstractFieldMatrix.java,toString,j,int,0,DEF,$ > 0
AbstractFieldMatrix.java,equals,object,Object,0,RET,$ instanceof FieldMatrix<?> == false
AbstractFieldMatrix.java,equals,object,null,0,RET,$ instanceof FieldMatrix<?>
AbstractFieldMatrix.java,equals,m,FieldMatrix<>,0,RET,$.getColumnDimension() != nCols
AbstractFieldMatrix.java,equals,m,FieldMatrix<>,0,RET,$.getRowDimension() != nRows
AbstractFieldMatrix.java,checkRowIndex,row,int,0,MatrixIndexException,$ < 0
AbstractFieldMatrix.java,checkColumnIndex,column,int,0,MatrixIndexException,$ < 0
AbstractFieldMatrix.java,checkSubMatrixIndex,startRow,int,0,MatrixIndexException,$ > endRow
AbstractFieldMatrix.java,checkSubMatrixIndex,startColumn,int,0,MatrixIndexException,$ > endColumn
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length == 0
BlockFieldMatrix.java,toBlocksLayout,length,int,0,DEF,$ != columns
BlockFieldMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,setSubMatrix,refLength,int,0,DEF,$ < 1
BlockFieldMatrix.java,setSubMatrix,subRow,T[],0,DEF,$.length != refLength
BlockFieldMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
BlockFieldMatrix.java,setRowMatrix,matrix,BlockFieldMatrix<T>,0,InvalidMatrixException,$.getRowDimension() != 1
BlockFieldMatrix.java,setRowMatrix,matrix,BlockFieldMatrix<T>,0,InvalidMatrixException,$.getColumnDimension() != nCols
BlockFieldMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
BlockFieldMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
BlockFieldMatrix.java,setColumnMatrix,matrix,BlockFieldMatrix<T>,0,InvalidMatrixException,$.getRowDimension() != nRows
BlockFieldMatrix.java,setColumnMatrix,matrix,BlockFieldMatrix<T>,0,InvalidMatrixException,$.getColumnDimension() != 1
BlockFieldMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
BlockFieldMatrix.java,setRow,array,T[],0,InvalidMatrixException,$.length != nCols
BlockFieldMatrix.java,setColumn,array,T[],0,InvalidMatrixException,$.length != nRows
BlockFieldMatrix.java,operate,v,T[],0,DEF,$.length != columns
BlockFieldMatrix.java,preMultiply,v,T[],0,DEF,$.length != rows
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,d,T[][],0,NullPointerException,$ == null
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,nRows,int,0,DEF,$ == 0
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,nCols,int,0,DEF,$ == 0
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,r,int,0,DEF,d[$].length != nCols
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,d,T[][],0,DEF,$[r].length != nCols
Array2DRowFieldMatrix.java,setSubMatrix,data,T[][],1,DEF,$ == null
Array2DRowFieldMatrix.java,setSubMatrix,row,int,0,DEF,$ > 0
Array2DRowFieldMatrix.java,setSubMatrix,column,int,0,DEF,$ > 0
Array2DRowFieldMatrix.java,setSubMatrix,nRows,int,0,DEF,$ == 0
Array2DRowFieldMatrix.java,setSubMatrix,nCols,int,0,DEF,$ == 0
Array2DRowFieldMatrix.java,setSubMatrix,i,int,0,DEF,subMatrix[$].length != nCols
Array2DRowFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,DEF,$[i].length != nCols
Array2DRowFieldMatrix.java,operate,v,T[],0,DEF,$.length != nCols
Array2DRowFieldMatrix.java,preMultiply,v,T[],0,DEF,$.length != nRows
BigMatrixImpl.java,BigMatrixImpl,rowDimension,int,0,DEF,$ <= 0
BigMatrixImpl.java,BigMatrixImpl,columnDimension,int,0,DEF,$ <= 0
BigMatrixImpl.java,BigMatrixImpl,d,BigDecimal[][],0,NullPointerException,$ == null
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,r,int,0,DEF,d[$].length != nCols
BigMatrixImpl.java,BigMatrixImpl,d,BigDecimal[][],0,DEF,$[r].length != nCols
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,d,double[][],0,DEF,$[row].length != nCols
BigMatrixImpl.java,BigMatrixImpl,row,int,0,DEF,d[$].length != nCols
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,d,String[][],0,DEF,$[row].length != nCols
BigMatrixImpl.java,BigMatrixImpl,row,int,0,DEF,d[$].length != nCols
BigMatrixImpl.java,getSubMatrix,startRow,int,0,MatrixIndexException,$ > endRow
BigMatrixImpl.java,getSubMatrix,startColumn,int,0,MatrixIndexException,$ > endColumn
BigMatrixImpl.java,getSubMatrix,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
BigMatrixImpl.java,getSubMatrix,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
BigMatrixImpl.java,getSubMatrix,selectedRows,int[],0,MatrixIndexException,$.length == 0
BigMatrixImpl.java,setSubMatrix,nRows,int,0,DEF,$ == 0
BigMatrixImpl.java,setSubMatrix,nCols,int,0,DEF,$ == 0
BigMatrixImpl.java,setSubMatrix,r,int,0,DEF,subMatrix[$].length != nCols
BigMatrixImpl.java,setSubMatrix,subMatrix,BigDecimal[][],0,DEF,$[r].length != nCols
BigMatrixImpl.java,setSubMatrix,data,BigDecimal[][],1,DEF,$ == null
BigMatrixImpl.java,setSubMatrix,row,int,0,DEF,$ > 0
BigMatrixImpl.java,setSubMatrix,column,int,0,DEF,$ > 0
BigMatrixImpl.java,isSingular,lu,BigDecimal[][],1,RET,$ == null
BigMatrixImpl.java,preMultiply,v,BigDecimal[],0,DEF,$.length != nRows
BigMatrixImpl.java,solve,b,BigDecimal[],0,DEF,$.length != nRows
BigMatrixImpl.java,luDecompose,nRows,int,0,NonSquareMatrixException,$ != nCols
BigMatrixImpl.java,luDecompose,largest,BigDecimal,0,DEF,sum.abs().compareTo($) == 1
BigMatrixImpl.java,luDecompose,sum,BigDecimal,0,DEF,$.abs().compareTo(largest) == 1
BigMatrixImpl.java,luDecompose,col,int,0,SingularMatrixException,lu[max][$].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,TOO_SMALL,BigDecimal,0,SingularMatrixException,lu[max][col].abs().compareTo($) <= 0
BigMatrixImpl.java,luDecompose,max,int,0,SingularMatrixException,lu[$][col].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,lu,BigDecimal[][],0,SingularMatrixException,$[max][col].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,max,int,0,DEF,$ != col
BigMatrixImpl.java,toString,data,BigDecimal[][],0,DEF,$ != null
BigMatrixImpl.java,toString,i,int,0,DEF,$ > 0
BigMatrixImpl.java,toString,j,int,0,DEF,$ > 0
BigMatrixImpl.java,equals,object,Object,0,RET,$ instanceof BigMatrixImpl == false
BigMatrixImpl.java,equals,object,null,0,RET,$ instanceof BigMatrixImpl
BigMatrixImpl.java,equals,m,BigMatrix,0,RET,$.getColumnDimension() != nCols
BigMatrixImpl.java,equals,m,BigMatrix,0,RET,$.getRowDimension() != nRows
BigMatrixImpl.java,getLUMatrix,lu,BigDecimal[][],0,DEF,$ == null
ArrayFieldVector.java,checkVectorDimensions,data,T[],0,DEF,$.length != n
ArrayFieldVector.java,equals,other,Object,0,RET,$ == null
ArrayFieldVector.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
AbstractRealVector.java,checkVectorDimensions,d,double,0,DEF,$ != n
AbstractRealVector.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
AbstractRealVector.java,add,v,null,0,RET,$ instanceof ArrayRealVector
AbstractRealVector.java,subtract,v,null,0,RET,$ instanceof ArrayRealVector
AbstractRealVector.java,mapAddToSelf,d,double,0,IllegalArgumentException:RET,$ != 0
AbstractRealVector.java,getMinIndex,entry,Entry,0,DEF,$.getValue() <= minValue
AbstractRealVector.java,getMaxIndex,entry,Entry,0,DEF,$.getValue() >= maxValue
AbstractRealVector.java,outerProduct,v,null,1,DEF,$ instanceof SparseRealVector
AbstractRealVector.java,SparseEntryIterator,current,EntryImpl,0,DEF,$.getValue() == 0
AbstractRealVector.java,SparseEntryIterator,current,EntryImpl,1,DEF,$.getIndex() >= 0
AbstractRealVector.java,advance,e,EntryImpl,0,RET,$ == null
AbstractRealVector.java,advance,e,EntryImpl,0,DEF,$.getIndex() >= dim
AbstractRealVector.java,next,next,EntryImpl,1,DEF,$ != null
AbstractRealVector.java,next,next,EntryImpl,0,DEF,$.getIndex() < 0
ArrayRealVector.java,ArrayRealVector,d,double[],0,NullPointerException,$ == null
ArrayRealVector.java,ArrayRealVector,d,double[],0,DEF,$.length == 0
ArrayRealVector.java,add,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,subtract,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,ebeMultiply,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,ebeDivide,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,dotProduct,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getDistance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getL1Distance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,getLInfDistance,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,unitVector,norm,double,0,DEF,$ == 0
ArrayRealVector.java,unitize,norm,double,0,DEF,$ == 0
ArrayRealVector.java,outerProduct,v,null,1,RET,$ instanceof ArrayRealVector
ArrayRealVector.java,checkVectorDimensions,data,double[],0,DEF,$.length != n
ArrayRealVector.java,equals,other,Object,0,RET,$ == null
ArrayRealVector.java,equals,other,null,0,RET,$ instanceof RealVector
BiDiagonalTransformer.java,BiDiagonalTransformer,m,int,1,DEF,$ >= n
BiDiagonalTransformer.java,getU,cachedU,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getU,hK,double[],0,DEF,$[k - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,k,int,0,DEF,hK[$ - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,hK[k - $] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getB,cachedB,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getB,m,int,1,DEF,$ < n
BiDiagonalTransformer.java,getB,i,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getV,cachedV,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getV,hK,double[],0,DEF,$[k] != 0.0
BiDiagonalTransformer.java,getV,k,int,0,DEF,hK[$] != 0.0
BiDiagonalTransformer.java,getV,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,b,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,b,double,0,DEF,$ != 0.0
OpenMapRealVector.java,add,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,append,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,dotProduct,v,null,1,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getSubVector,key,int,0,DEF,$ >= index
OpenMapRealVector.java,getSubVector,key,int,0,DEF,$ < end
OpenMapRealVector.java,getDistance,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getL1Distance,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getLInfDistance,delta,double,0,DEF,$ > max
OpenMapRealVector.java,getLInfDistance,iter,Iterator,0,DEF,$.value() > max
OpenMapRealVector.java,getLInfDistance,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getLInfDistance,delta,double,0,DEF,$ > max
OpenMapRealVector.java,subtract,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,equals,obj,Object,0,RET,$ == null
OpenMapRealVector.java,equals,obj,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
FieldLUDecompositionImpl.java,FieldLUDecompositionImpl,nonZero,int,0,RET,$ >= m
FieldLUDecompositionImpl.java,FieldLUDecompositionImpl,nonZero,int,0,DEF,$ != col
FieldLUDecompositionImpl.java,getL,cachedL,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecompositionImpl.java,getU,cachedU,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecompositionImpl.java,getP,cachedP,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecompositionImpl.java,solve,b,T[],0,DEF,$.length != m
FieldLUDecompositionImpl.java,solve,b,FieldVector<T>,0,DEF,$.getDimension() != m
FieldLUDecompositionImpl.java,solve,b,FieldMatrix<T>,0,DEF,$.getRowDimension() != m
LevenbergMarquardtEstimator.java,estimate,dk,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,estimate,s,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,estimate,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtEstimator.java,estimate,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtEstimator.java,estimate,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,estimate,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,DEF,$ >= 1.0e-4
LevenbergMarquardtEstimator.java,estimate,actRed,double,0,RET,Math.abs($) <= costRelativeTolerance
LevenbergMarquardtEstimator.java,estimate,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtEstimator.java,estimate,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtEstimator.java,estimate,actRed,double,1,EstimationException,Math.abs($) <= 2.2204e-16
LevenbergMarquardtEstimator.java,estimate,preRed,double,1,EstimationException,$ <= 2.2204e-16
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,EstimationException,$ <= 2.0
LevenbergMarquardtEstimator.java,estimate,maxCosine,double,0,EstimationException,$ <= 2.2204e-16
LevenbergMarquardtEstimator.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtEstimator.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtEstimator.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtEstimator.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtEstimator.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtEstimator.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtEstimator.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtEstimator.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtEstimator.java,qrDecomposition,ak2,double,0,RET,$ == 0
AbstractEstimator.java,updateResidualsAndCost,costEvaluations,int,0,EstimationException,++$ > maxCostEval
AbstractEstimator.java,guessParametersErrors,m,int,0,EstimationException,$ <= p
MultiStartUnivariateRealOptimizer.java,getOptima,optima,double[],0,DEF,$ == null
MultiStartUnivariateRealOptimizer.java,getOptimaValues,optimaValues,double[],0,DEF,$ == null
MultiStartUnivariateRealOptimizer.java,optimize,goalType,GoalType,0,DEF,$ == GoalType.MAXIMIZE
MultiStartUnivariateRealOptimizer.java,optimize,currY,double,0,DEF,$ < prevY
MultiStartUnivariateRealOptimizer.java,optimize,i,int,1,DEF,$-- != 0
SimplexSolver.java,getPivotColumn,epsilon,double,0,DEF,MathUtils.compareTo(tableau.getEntry(0, i), minValue, $) < 0
SimplexSolver.java,getPivotColumn,tableau,SimplexTableau,0,DEF,MathUtils.compareTo($.getEntry(0, i), minValue, epsilon) < 0
SimplexSolver.java,getPivotColumn,minValue,double,0,DEF,MathUtils.compareTo(tableau.getEntry(0, i), $, epsilon) < 0
SimplexSolver.java,getPivotColumn,i,int,0,DEF,MathUtils.compareTo(tableau.getEntry(0, $), minValue, epsilon) < 0
SimplexSolver.java,getPivotRow,epsilon,double,0,DEF,MathUtils.compareTo(entry, 0, $) > 0
SimplexSolver.java,getPivotRow,entry,double,0,DEF,MathUtils.compareTo($, 0, epsilon) > 0
SimplexSolver.java,getPivotRow,ratio,double,0,DEF,$ < minRatio
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,1,RET,$.size() == 0
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,0,RET,$.size() > 1
SimplexSolver.java,doIteration,pivotRow,Integer,0,UnboundedSolutionException,$ == null
SimplexSolver.java,doIteration,i,int,0,DEF,$ != pivotRow
SimplexSolver.java,solvePhase1,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() == 0
SimplexTableau.java,createTableau,constraint,LinearConstraint,1,DEF,$.getRelationship() == Relationship.LEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.EQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,normalize,constraint,LinearConstraint,0,RET,$.getValue() < 0
SimplexTableau.java,getConstraintTypeCounts,constraint,LinearConstraint,0,DEF,$.getRelationship() == relationship
SimplexTableau.java,getBasicRow,row,Integer,1,DEF,$ == null
SimplexTableau.java,dropPhase1Objective,epsilon,double,0,DEF,MathUtils.compareTo(tableau.getEntry(0, i), 0, $) > 0
SimplexTableau.java,dropPhase1Objective,tableau,RealMatrix,0,DEF,MathUtils.compareTo($.getEntry(0, i), 0, epsilon) > 0
SimplexTableau.java,dropPhase1Objective,i,int,0,DEF,MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) > 0
SimplexTableau.java,dropPhase1Objective,col,int,0,DEF,getBasicRow($) == null
SimplexTableau.java,isOptimal,epsilon,double,0,RET,MathUtils.compareTo(tableau.getEntry(0, i), 0, $) < 0
SimplexTableau.java,isOptimal,tableau,RealMatrix,0,RET,MathUtils.compareTo($.getEntry(0, i), 0, epsilon) < 0
SimplexTableau.java,isOptimal,i,int,0,RET,MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) < 0
SimplexTableau.java,getSolution,colIndex,int,0,DEF,$ < 0
SimplexTableau.java,equals,other,Object,0,RET,$ == null
AbstractLinearOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
LinearObjectiveFunction.java,equals,other,Object,0,RET,$ == null
LinearConstraint.java,equals,other,Object,0,RET,$ == null
SimpleRealPointChecker.java,converged,difference,double,0,RET,$ > absoluteThreshold
SimpleVectorialValueChecker.java,converged,difference,double,0,RET,$ > absoluteThreshold
BrentOptimizer.java,localMin,goalType,GoalType,0,DEF,$ == GoalType.MAXIMIZE
BrentOptimizer.java,localMin,e,double,0,DEF,Math.abs($) > tol
BrentOptimizer.java,localMin,q,double,1,DEF,$ > 0
BrentOptimizer.java,localMin,a,double,0,DEF,(u - $) < t2
BrentOptimizer.java,localMin,u,double,0,DEF,($ - a) < t2
BrentOptimizer.java,localMin,b,double,0,DEF,($ - u) < t2
BrentOptimizer.java,localMin,u,double,0,DEF,(b - $) < t2
BrentOptimizer.java,localMin,goalType,GoalType,0,DEF,$ == GoalType.MAXIMIZE
BrentOptimizer.java,localMin,fu,double,1,DEF,$ <= fx
BrentOptimizer.java,localMin,u,double,1,DEF,$ < x
BrentOptimizer.java,localMin,u,double,1,DEF,$ < x
BrentOptimizer.java,localMin,fu,double,1,DEF,$ <= fw
BrentOptimizer.java,localMin,w,double,1,DEF,$ == x
BrentOptimizer.java,localMin,fu,double,0,DEF,$ <= fv
BrentOptimizer.java,localMin,v,double,0,DEF,$ == x
BrentOptimizer.java,localMin,v,double,0,DEF,$ == w
AbstractUnivariateRealOptimizer.java,computeObjectiveValue,evaluations,int,0,MaxEvaluationsExceededException,++$ > maxEvaluations
HarmonicFitter.java,fit,parameters,double[],0,OptimizationException,$ == null
HarmonicFitter.java,fit,observations,WeightedObservedPoint[],0,OptimizationException,$.length < 4
HarmonicCoefficientsGuesser.java,sortObservations,i,int,1,DEF,$-- != 0
HarmonicCoefficientsGuesser.java,guessAOmega,c1,double,0,OptimizationException,$ / c2 < 0.0
HarmonicCoefficientsGuesser.java,guessAOmega,c2,double,0,OptimizationException,c1 / $ < 0.0
HarmonicCoefficientsGuesser.java,guessAOmega,c3,double,0,OptimizationException,c2 / $ < 0.0
HarmonicCoefficientsGuesser.java,guessAOmega,c2,double,0,OptimizationException,$ / c3 < 0.0
MultiStartMultivariateRealOptimizer.java,getOptima,optima,RealPointValuePair[],0,DEF,$ == null
MultiStartMultivariateRealOptimizer.java,compare,o1,RealPointValuePair,1,RET,$ == null
MultiStartMultivariateRealOptimizer.java,compare,o2,RealPointValuePair,0,RET,$ == null
MultiStartMultivariateRealOptimizer.java,optimize,optima,RealPointValuePair[],0,OptimizationException,$[0] == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,getOptima,optima,VectorialPointValuePair[],0,DEF,$ == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,compare,o1,VectorialPointValuePair,1,RET,$ == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,compare,o2,VectorialPointValuePair,0,RET,$ == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,optimize,optima,VectorialPointValuePair[],0,OptimizationException,$[0] == null
LeastSquaresConverter.java,LeastSquaresConverter,observations,double[],0,DEF,$.length != weights.length
LeastSquaresConverter.java,value,residuals,double[],0,FunctionEvaluationException,$.length != observations.length
LeastSquaresConverter.java,value,weights,double[],1,DEF,$ != null
LeastSquaresConverter.java,value,scale,RealMatrix,1,DEF,$ != null
DirectSearchOptimizer.java,setStartConfiguration,j,int,0,DEF,steps[$] == 0.0
DirectSearchOptimizer.java,setStartConfiguration,steps,double[],0,DEF,$[j] == 0.0
DirectSearchOptimizer.java,setStartConfiguration,n,int,0,DEF,$ < 0
DirectSearchOptimizer.java,setStartConfiguration,refI,double[],0,DEF,$.length != n
DirectSearchOptimizer.java,setStartConfiguration,i,int,0,DEF,$ > 0
DirectSearchOptimizer.java,optimize,startConfiguration,double[][],0,DEF,$ == null
DirectSearchOptimizer.java,optimize,iterations,int,0,RET,$ > 0
DirectSearchOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
DirectSearchOptimizer.java,evaluate,evaluations,int,0,MaxEvaluationsExceededException,++$ > maxEvaluations
DirectSearchOptimizer.java,buildSimplex,n,int,0,DEF,$ != startConfiguration.length
DirectSearchOptimizer.java,replaceWorstPoint,comparator,Comparator<RealPointValuePair>,0,DEF,$.compare(simplex[i], pointValuePair) > 0
DirectSearchOptimizer.java,replaceWorstPoint,pointValuePair,RealPointValuePair,0,DEF,comparator.compare(simplex[i], $) > 0
DirectSearchOptimizer.java,replaceWorstPoint,simplex,RealPointValuePair[],0,DEF,comparator.compare($[i], pointValuePair) > 0
DirectSearchOptimizer.java,replaceWorstPoint,i,int,0,DEF,comparator.compare(simplex[$], pointValuePair) > 0
MultiDirectional.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(reflected, best) < 0
MultiDirectional.java,iterateSimplex,reflected,RealPointValuePair,0,RET,comparator.compare($, best) < 0
MultiDirectional.java,iterateSimplex,best,RealPointValuePair,0,RET,comparator.compare(reflected, $) < 0
MultiDirectional.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,DEF,$.compare(reflected, expanded) <= 0
MultiDirectional.java,iterateSimplex,expanded,RealPointValuePair,0,DEF,comparator.compare(reflected, $) <= 0
MultiDirectional.java,iterateSimplex,reflected,RealPointValuePair,0,DEF,comparator.compare($, expanded) <= 0
MultiDirectional.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(contracted, best) < 0
MultiDirectional.java,iterateSimplex,contracted,RealPointValuePair,0,RET,comparator.compare($, best) < 0
MultiDirectional.java,iterateSimplex,best,RealPointValuePair,0,RET,comparator.compare(contracted, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(best, reflected) <= 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare(best, $) <= 0
NelderMead.java,iterateSimplex,best,RealPointValuePair,1,DEF,comparator.compare($, reflected) <= 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(reflected, secondBest) < 0
NelderMead.java,iterateSimplex,secondBest,RealPointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare($, secondBest) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(reflected, best) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare($, best) < 0
NelderMead.java,iterateSimplex,best,RealPointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(expanded, reflected) < 0
NelderMead.java,iterateSimplex,expanded,RealPointValuePair,1,DEF,comparator.compare($, reflected) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare(expanded, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,RET,$.compare(reflected, worst) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,RET,comparator.compare($, worst) < 0
NelderMead.java,iterateSimplex,worst,RealPointValuePair,1,RET,comparator.compare(reflected, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(outContracted, reflected) <= 0
NelderMead.java,iterateSimplex,outContracted,RealPointValuePair,0,RET,comparator.compare($, reflected) <= 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,0,RET,comparator.compare(outContracted, $) <= 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(inContracted, worst) < 0
NelderMead.java,iterateSimplex,worst,RealPointValuePair,0,RET,comparator.compare(inContracted, $) < 0
NelderMead.java,iterateSimplex,inContracted,RealPointValuePair,0,RET,comparator.compare($, worst) < 0
NonLinearConjugateGradientOptimizer.java,setInitialStep,initialStep,double,1,DEF,$ <= 0
NonLinearConjugateGradientOptimizer.java,doOptimize,preconditioner,Preconditioner,0,DEF,$ == null
NonLinearConjugateGradientOptimizer.java,doOptimize,solver,UnivariateRealSolver,0,DEF,$ == null
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,previous,RealPointValuePair,0,RET,$ != null
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,updateFormula,ConjugateGradientFormula,1,DEF,$ == ConjugateGradientFormula.FLETCHER_REEVES
NonLinearConjugateGradientOptimizer.java,doOptimize,n,int,1,DEF,getIterations() % $ == 0
NonLinearConjugateGradientOptimizer.java,doOptimize,beta,double,1,DEF,$ < 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yA,double,0,RET,$ * yB <= 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yB,double,0,RET,yA * $ <= 0
LevenbergMarquardtOptimizer.java,doOptimize,dk,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,s,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtOptimizer.java,doOptimize,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtOptimizer.java,doOptimize,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,DEF,$ >= 1.0e-4
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,0,RET,Math.abs($) <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,1,OptimizationException,Math.abs($) <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,1,OptimizationException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,OptimizationException,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,OptimizationException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtOptimizer.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtOptimizer.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtOptimizer.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtOptimizer.java,qrDecomposition,ak2,double,0,RET,$ == 0
AbstractScalarDifferentiableOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
AbstractScalarDifferentiableOptimizer.java,computeObjectiveValue,evaluations,int,0,MaxEvaluationsExceededException,++$ > maxEvaluations
AbstractLeastSquaresOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
AbstractLeastSquaresOptimizer.java,updateJacobian,jacobian,double[][],0,FunctionEvaluationException,$.length != rows
AbstractLeastSquaresOptimizer.java,updateResidualsAndCost,objectiveEvaluations,int,0,MaxEvaluationsExceededException,++$ > maxEvaluations
AbstractLeastSquaresOptimizer.java,updateResidualsAndCost,objective,double[],0,FunctionEvaluationException,$.length != rows
AbstractLeastSquaresOptimizer.java,guessParametersErrors,rows,int,0,OptimizationException,$ <= cols
AbstractLeastSquaresOptimizer.java,optimize,target,double[],0,OptimizationException,$.length != weights.length
GaussNewtonOptimizer.java,doOptimize,previous,VectorialPointValuePair,0,DEF,$ != null
MultiStartDifferentiableMultivariateRealOptimizer.java,getOptima,optima,RealPointValuePair[],0,DEF,$ == null
MultiStartDifferentiableMultivariateRealOptimizer.java,compare,o1,RealPointValuePair,1,RET,$ == null
MultiStartDifferentiableMultivariateRealOptimizer.java,compare,o2,RealPointValuePair,0,RET,$ == null
MultiStartDifferentiableMultivariateRealOptimizer.java,optimize,optima,RealPointValuePair[],0,OptimizationException,$[0] == null
SimpleVectorialPointChecker.java,converged,difference,double,0,RET,$ > absoluteThreshold
Beta.java,regularizedBeta,x,double,1,DEF,$ < 0
Beta.java,regularizedBeta,x,double,1,DEF,$ > 1
Beta.java,regularizedBeta,a,double,1,DEF,$ <= 0.0
Beta.java,regularizedBeta,b,double,1,DEF,$ <= 0.0
Beta.java,getB,n,int,1,DEF,$ % 2 == 0
Beta.java,logBeta,a,double,1,DEF,$ <= 0.0
Beta.java,logBeta,b,double,1,DEF,$ <= 0.0
Gamma.java,logGamma,x,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ >= 1.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ > a
Gamma.java,regularizedGammaP,n,double,1,MaxIterationsExceededException,$ >= maxIterations
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < a
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ < 1.0
Gamma.java,digamma,x,double,0,RET,$ > 0
Gamma.java,digamma,x,double,0,RET,$ <= S_LIMIT
Gamma.java,digamma,x,double,0,RET,$ >= C_LIMIT
Gamma.java,trigamma,x,double,0,RET,$ > 0
Gamma.java,trigamma,x,double,0,RET,$ <= S_LIMIT
Gamma.java,trigamma,x,double,0,RET,$ >= C_LIMIT
Erf.java,erf,x,double,0,DEF,$ < 0
Vector3DFormat.java,format,obj,null,0,RET,$ instanceof Vector3D
Vector3DFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
Vector3DFormat.java,parse,x,Number,0,RET,$ == null
Vector3DFormat.java,parse,y,Number,0,RET,$ == null
Vector3DFormat.java,parse,z,Number,0,RET,$ == null
Vector3D.java,normalize,s,double,0,DEF,$ == 0
Vector3D.java,orthogonal,threshold,double,0,DEF,$ == 0
Vector3D.java,orthogonal,x,double,1,RET,$ >= -threshold
Vector3D.java,orthogonal,x,double,1,RET,$ <= threshold
Vector3D.java,orthogonal,y,double,0,RET,$ >= -threshold
Vector3D.java,orthogonal,y,double,0,RET,$ <= threshold
Vector3D.java,angle,normProduct,double,0,DEF,$ == 0
Vector3D.java,angle,dot,double,0,RET,$ < -threshold
Vector3D.java,angle,dot,double,0,RET,$ > threshold
Vector3D.java,angle,dot,double,0,RET,$ >= 0
Vector3D.java,equals,other,Object,0,RET,$ == null
Rotation.java,Rotation,norm,double,0,DEF,$ == 0
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$.length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[0].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[1].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[2].length != 3
Rotation.java,Rotation,det,double,0,NotARotationMatrixException,$ < 0.0
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,u1u1,double,0,DEF,$ == 0
Rotation.java,Rotation,u2u2,double,0,DEF,$ == 0
Rotation.java,Rotation,v1v1,double,0,DEF,$ == 0
Rotation.java,Rotation,v2v2,double,0,DEF,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,normProduct,double,0,DEF,$ == 0
Rotation.java,getAxis,squaredSine,double,1,RET,$ == 0
Rotation.java,getAxis,q0,double,0,RET,$ < 0
Rotation.java,getAngle,q0,double,1,RET,$ < -0.1
Rotation.java,getAngle,q0,double,1,RET,$ > 0.1
Rotation.java,getAngle,q0,double,0,RET,$ < 0
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,orthogonalizeMatrix,fn1,double,0,RET,Math.abs($ - fn) <= threshold
Rotation.java,orthogonalizeMatrix,fn,double,0,RET,Math.abs(fn1 - $) <= threshold
ValueServer.java,resetReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,closeReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,DEF,$ == null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,DEF,$.getBinStats().size() == 0
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,$ == null
ValueServer.java,getNextReplay,str,String,0,DEF,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,(str = $.readLine()) == null
ValueServer.java,getNextReplay,str,String,0,DEF,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,(str = $.readLine()) == null
BitsStreamGenerator.java,nextInt,n,int,0,DEF,$ < 1
BitsStreamGenerator.java,nextInt,random,int,0,RET,$ < n
UncorrelatedRandomVectorGenerator.java,UncorrelatedRandomVectorGenerator,mean,double[],0,DEF,$.length != standardDeviation.length
EmpiricalDistributionImpl.java,load,sampleStats,SummaryStatistics,0,DEF,$.getN() == 0
EmpiricalDistributionImpl.java,getAdapter,in,null,1,RET,$ instanceof BufferedReader
EmpiricalDistributionImpl.java,getAdapter,in,null,1,RET,$ instanceof double[]
EmpiricalDistributionImpl.java,getNextValue,stats,SummaryStatistics,0,RET,$.getN() > 0
EmpiricalDistributionImpl.java,getNextValue,stats,SummaryStatistics,1,RET,$.getStandardDeviation() > 0
RandomDataImpl.java,nextHexString,len,int,0,DEF,$ <= 0
RandomDataImpl.java,nextHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextInt,lower,int,0,DEF,$ >= upper
RandomDataImpl.java,nextLong,lower,long,0,DEF,$ >= upper
RandomDataImpl.java,nextSecureHexString,len,int,0,DEF,$ <= 0
RandomDataImpl.java,nextSecureHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextSecureInt,lower,int,0,DEF,$ >= upper
RandomDataImpl.java,nextSecureLong,lower,long,0,DEF,$ >= upper
RandomDataImpl.java,nextPoisson,mean,double,0,DEF,$ <= 0
RandomDataImpl.java,nextPoisson,mean,double,1,RET,$ < pivot
RandomDataImpl.java,nextPoisson,r,double,1,DEF,$ >= p
RandomDataImpl.java,nextPoisson,u,double,1,DEF,$ <= p1
RandomDataImpl.java,nextPoisson,x,double,0,DEF,$ > delta
RandomDataImpl.java,nextPoisson,x,double,0,DEF,$ < -lambda
RandomDataImpl.java,nextPoisson,v,double,0,DEF,$ < -t
RandomDataImpl.java,nextPoisson,a,int,0,DEF,$ == 0
RandomDataImpl.java,nextPoisson,v,double,0,DEF,$ < qa
RandomDataImpl.java,nextPoisson,v,double,0,DEF,$ > qr
RandomDataImpl.java,nextGaussian,sigma,double,0,DEF,$ <= 0
RandomDataImpl.java,nextExponential,mean,double,0,DEF,$ <= 0.0
RandomDataImpl.java,nextUniform,lower,double,0,DEF,$ >= upper
RandomDataImpl.java,getRan,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,getSecRan,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,nextPermutation,k,int,0,DEF,$ > n
RandomDataImpl.java,nextPermutation,k,int,0,DEF,$ == 0
RandomDataImpl.java,nextSample,k,int,0,DEF,$ > len
RandomDataImpl.java,nextSample,k,int,0,DEF,$ <= 0
RandomDataImpl.java,shuffle,i,int,1,DEF,$ == 0
MersenneTwister.java,setSeed,seed,int[],0,RET,$ == null
MersenneTwister.java,setSeed,i,int,0,DEF,$ >= N
MersenneTwister.java,setSeed,j,int,0,DEF,$ >= seed.length
MersenneTwister.java,setSeed,i,int,0,DEF,$ >= N
MersenneTwister.java,next,mti,int,0,DEF,$ >= N
CorrelatedRandomVectorGenerator.java,CorrelatedRandomVectorGenerator,mean,double[],0,DimensionMismatchException,$.length != order
CorrelatedRandomVectorGenerator.java,decompose,swap,int[],0,DEF,$[rank] != rank
CorrelatedRandomVectorGenerator.java,decompose,rank,int,0,DEF,swap[$] != rank
CorrelatedRandomVectorGenerator.java,decompose,c,double[][],1,NotPositiveDefiniteMatrixException,$[ir][ir] < small
CorrelatedRandomVectorGenerator.java,decompose,ir,int,1,NotPositiveDefiniteMatrixException,c[$][$] < small
CorrelatedRandomVectorGenerator.java,decompose,rank,int,0,NotPositiveDefiniteMatrixException,$ == 0
CorrelatedRandomVectorGenerator.java,decompose,c,double[][],0,NotPositiveDefiniteMatrixException,$[index[i]][index[i]] < -small
CorrelatedRandomVectorGenerator.java,decompose,index,int[],0,NotPositiveDefiniteMatrixException,c[$[i]][$[i]] < -small
CorrelatedRandomVectorGenerator.java,decompose,i,int,0,NotPositiveDefiniteMatrixException,c[index[$]][index[$]] < -small
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
AbstractRandomGenerator.java,nextBytes,i,int,0,DEF,$ > 0
AbstractRandomGenerator.java,nextBytes,bytesOut,int,0,RET,$ == bytes.length
AbstractRandomGenerator.java,nextInt,n,int,0,DEF,$ <= 0
AbstractRandomGenerator.java,nextGaussian,s,double,0,DEF,$ != 0
BisectionSolver.java,solve,fm,double,1,DEF,$ * fmin > 0.0
BisectionSolver.java,solve,fmin,double,1,DEF,fm * $ > 0.0
BisectionSolver.java,solve,min,double,0,RET,Math.abs(max - $) <= absoluteAccuracy
BisectionSolver.java,solve,max,double,0,RET,Math.abs($ - min) <= absoluteAccuracy
SecantSolver.java,solve,y0,double,0,DEF,$ * y1 >= 0
SecantSolver.java,solve,y1,double,0,DEF,y0 * $ >= 0
SecantSolver.java,solve,y1,double,0,RET,Math.abs($) <= functionValueAccuracy
SecantSolver.java,solve,oldDelta,double,0,DEF,delta / $ > 1
SecantSolver.java,solve,delta,double,0,DEF,$ / oldDelta > 1
SecantSolver.java,solve,y1,double,0,DEF,$ > 0
SecantSolver.java,solve,y2,double,0,DEF,$ > 0
LaguerreSolver.java,LaguerreSolver,f,null,1,DEF,$ instanceof PolynomialFunction
LaguerreSolver.java,solve,min,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
LaguerreSolver.java,solve,max,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
LaguerreSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
LaguerreSolver.java,solve,f,null,0,DEF,$ instanceof PolynomialFunction
LaguerreSolver.java,solve,min,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
LaguerreSolver.java,solve,max,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
LaguerreSolver.java,solveAll,n,int,0,DEF,$ < 1
LaguerreSolver.java,solve,n,int,0,DEF,$ < 1
LaguerreSolver.java,solve,oldz,Complex,0,RET,(z.subtract($)).abs() <= tolerance
LaguerreSolver.java,solve,z,Complex,0,RET,($.subtract(oldz)).abs() <= tolerance
LaguerreSolver.java,solve,pv,Complex,0,RET,$.abs() <= functionValueAccuracy
NewtonSolver.java,solve,x0,double,0,RET,Math.abs(x1 - $) <= absoluteAccuracy
NewtonSolver.java,solve,x1,double,0,RET,Math.abs($ - x0) <= absoluteAccuracy
UnivariateRealSolverImpl.java,UnivariateRealSolverImpl,f,UnivariateRealFunction,0,DEF,$ == null
UnivariateRealSolverImpl.java,verifyInterval,lower,double,0,DEF,$ >= upper
UnivariateRealSolverUtils.java,bracket,function,UnivariateRealFunction,0,DEF,$ == null
UnivariateRealSolverUtils.java,bracket,maximumIterations,int,0,DEF,$ <= 0
UnivariateRealSolverUtils.java,bracket,initial,double,0,DEF,$ < lowerBound
UnivariateRealSolverUtils.java,bracket,initial,double,0,DEF,$ > upperBound
UnivariateRealSolverUtils.java,bracket,lowerBound,double,0,DEF,$ >= upperBound
UnivariateRealSolverUtils.java,bracket,fa,double,0,ConvergenceException,$ * fb > 0.0
UnivariateRealSolverUtils.java,bracket,fb,double,0,ConvergenceException,fa * $ > 0.0
UnivariateRealSolverUtils.java,setup,f,UnivariateRealFunction,0,DEF,$ == null
MullerSolver.java,solve,min,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
MullerSolver.java,solve,max,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
MullerSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
MullerSolver.java,solve,y0,double,0,RET,$ == 0.0
MullerSolver.java,solve,y2,double,0,RET,$ == 0.0
MullerSolver.java,solve,oldx,double,0,RET,Math.abs(x - $) <= tolerance
MullerSolver.java,solve,x,double,0,RET,Math.abs($ - oldx) <= tolerance
MullerSolver.java,solve,y,double,0,RET,Math.abs($) <= functionValueAccuracy
MullerSolver.java,solve,ym,double,1,DEF,MathUtils.sign(y0) + MathUtils.sign($) == 0.0
MullerSolver.java,solve,y0,double,1,DEF,MathUtils.sign($) + MathUtils.sign(ym) == 0.0
MullerSolver.java,solve2,y0,double,0,RET,$ == 0.0
MullerSolver.java,solve2,y1,double,0,RET,$ == 0.0
MullerSolver.java,solve2,delta,double,1,DEF,$ >= 0.0
MullerSolver.java,solve2,denominator,double,1,DEF,$ != 0
MullerSolver.java,solve2,oldx,double,0,RET,Math.abs(x - $) <= tolerance
MullerSolver.java,solve2,x,double,0,RET,Math.abs($ - oldx) <= tolerance
MullerSolver.java,solve2,y,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yInitial,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMin,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMin,double,0,RET,yInitial * $ < 0
BrentSolver.java,solve,yInitial,double,0,RET,$ * yMin < 0
BrentSolver.java,solve,yMax,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yInitial,double,0,RET,$ * yMax < 0
BrentSolver.java,solve,yMax,double,0,RET,yInitial * $ < 0
BrentSolver.java,solve,sign,double,1,DEF,$ > 0
BrentSolver.java,solve,yMin,double,1,DEF,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMax,double,1,DEF,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,sign,double,1,DEF,$ < 0
BrentSolver.java,solve,yMin,double,1,DEF,$ == 0.0
BrentSolver.java,solve,y1,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,dx,double,0,RET,Math.abs($) <= tolerance
BrentSolver.java,solve,oldDelta,double,1,DEF,Math.abs($) < tolerance
BrentSolver.java,solve,x0,double,1,DEF,$ == x2
BrentSolver.java,solve,p,double,1,DEF,$ > 0.0
BrentSolver.java,solve,delta,double,1,DEF,Math.abs($) > tolerance
BrentSolver.java,solve,dx,double,1,DEF,$ > 0.0
BrentSolver.java,solve,dx,double,0,DEF,$ <= 0.0
BrentSolver.java,solve,y1,double,0,DEF,$ > 0
BrentSolver.java,solve,y2,double,0,DEF,$ > 0
RiddersSolver.java,solve,min,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
RiddersSolver.java,solve,max,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
RiddersSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
RiddersSolver.java,solve,y1,double,0,RET,$ == 0.0
RiddersSolver.java,solve,y2,double,0,RET,$ == 0.0
RiddersSolver.java,solve,y3,double,0,RET,Math.abs($) <= functionValueAccuracy
RiddersSolver.java,solve,oldx,double,0,RET,Math.abs(x - $) <= tolerance
RiddersSolver.java,solve,x,double,0,RET,Math.abs($ - oldx) <= tolerance
RiddersSolver.java,solve,y,double,0,RET,Math.abs($) <= functionValueAccuracy
RiddersSolver.java,solve,correction,double,1,DEF,$ > 0.0
RiddersSolver.java,solve,y1,double,1,DEF,MathUtils.sign($) + MathUtils.sign(y) == 0.0
RiddersSolver.java,solve,y,double,1,DEF,MathUtils.sign(y1) + MathUtils.sign($) == 0.0
RiddersSolver.java,solve,y2,double,1,DEF,MathUtils.sign($) + MathUtils.sign(y) == 0.0
RiddersSolver.java,solve,y,double,1,DEF,MathUtils.sign(y2) + MathUtils.sign($) == 0.0
PolynomialFunctionLagrangeForm.java,evaluate,dist,double,0,DEF,$ < min_dist
PolynomialFunctionLagrangeForm.java,evaluate,divider,double,0,DuplicateSampleAbscissaException,$ == 0.0
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != j
PolynomialFunctionLagrangeForm.java,computeCoefficients,d,double,0,DEF,$ == 0.0
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != k
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,DEF,$.length != y.length
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,DEF,$.length < 2
PolynomialFunctionNewtonForm.java,verifyInputArray,a,double[],0,DEF,$.length < 1
PolynomialFunctionNewtonForm.java,verifyInputArray,c,double[],0,DEF,$.length < 1
PolynomialsUtils.java,buildPolynomial,degree,int,0,DEF,$ > maxDegree
PolynomialFunction.java,PolynomialFunction,c,double[],0,DEF,$.length < 1
PolynomialFunction.java,evaluate,n,int,0,DEF,$ < 1
PolynomialFunction.java,subtract,coefficients,double[],1,DEF,$.length < p.coefficients.length
PolynomialFunction.java,differentiate,n,int,0,DEF,$ < 1
PolynomialFunction.java,differentiate,n,int,0,RET,$ == 1
PolynomialFunction.java,toString,coefficients,double[],1,RET,$[0] == 0.0
PolynomialFunction.java,toString,coefficients,double[],0,RET,$.length == 1
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] != 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] != 0
PolynomialFunction.java,toString,s,StringBuffer,1,DEF,$.length() > 0
PolynomialFunction.java,toString,coefficients,double[],1,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,1,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,absAi,double,0,DEF,($ - 1) != 0
PolynomialFunction.java,toString,i,int,0,DEF,$ > 1
PolynomialFunction.java,equals,obj,Object,0,RET,$ == null
PolynomialFunction.java,equals,obj,null,0,RET,$ instanceof PolynomialFunction
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,DEF,$.length < 2
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,DEF,$.length - 1 != polynomials.length
PolynomialSplineFunction.java,value,i,int,0,DEF,$ < 0
PolynomialSplineFunction.java,value,i,int,0,DEF,$ >= polynomials.length
LoessInterpolator.java,LoessInterpolator,bandwidth,double,0,MathException,$ < 0
LoessInterpolator.java,LoessInterpolator,bandwidth,double,0,MathException,$ > 1
LoessInterpolator.java,LoessInterpolator,robustnessIters,int,0,MathException,$ < 0
LoessInterpolator.java,smooth,xval,double[],0,MathException,$.length != yval.length
LoessInterpolator.java,smooth,n,int,0,MathException,$ == 0
LoessInterpolator.java,smooth,n,int,0,RET,$ == 1
LoessInterpolator.java,smooth,n,int,0,RET,$ == 2
LoessInterpolator.java,smooth,bandwidthInPoints,int,0,MathException,$ < 2
LoessInterpolator.java,smooth,i,int,0,DEF,$ > 0
LoessInterpolator.java,smooth,meanXSquared,double,1,DEF,Math.sqrt(Math.abs($ - meanX * meanX)) < accuracy
LoessInterpolator.java,smooth,meanX,double,1,DEF,Math.sqrt(Math.abs(meanXSquared - $ * $)) < accuracy
LoessInterpolator.java,smooth,iter,int,0,DEF,$ == robustnessIters
LoessInterpolator.java,smooth,medianResidual,double,0,DEF,Math.abs($) < accuracy
LoessInterpolator.java,smooth,arg,double,1,DEF,$ >= 1
LoessInterpolator.java,smooth,xval,double[],0,MathException,$.length != yval.length
LoessInterpolator.java,updateBandwidthInterval,nextRight,int,0,DEF,$ < xval.length
LoessInterpolator.java,checkStrictlyIncreasing,i,int,0,MathException,$ >= 1
DividedDifferenceInterpolator.java,computeDividedDifference,denominator,double,0,DuplicateSampleAbscissaException,$ == 0.0
SplineInterpolator.java,interpolate,x,double[],0,DEF,$.length != y.length
SplineInterpolator.java,interpolate,x,double[],0,DEF,$.length < 3
MicrosphereInterpolator.java,setBrightnessExponent,brightnessExponent,int,0,DEF,$ < 0
MicrosphereInterpolator.java,setMicropshereElements,microsphereElements,int,0,DEF,$ < 0
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,DEF,$.length == 0
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,DEF,$[0] == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,DimensionMismatchException,$.length != yval.length
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xvalI,double[],0,DimensionMismatchException,$.length != dimension
MicrosphereInterpolatingFunction.java,value,sd,Entry<RealVector,Double>,0,DEF,$ != null
LegendreGaussIntegrator.java,integrate,i,int,0,RET,$ + 1 >= minimalIterationCount
LegendreGaussIntegrator.java,integrate,delta,double,0,RET,$ <= limit
TrapezoidIntegrator.java,stage,n,int,1,RET,$ == 0
TrapezoidIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
TrapezoidIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
TrapezoidIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
TrapezoidIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 64
UnivariateRealIntegratorImpl.java,UnivariateRealIntegratorImpl,f,UnivariateRealFunction,0,DEF,$ == null
UnivariateRealIntegratorImpl.java,verifyInterval,lower,double,0,DEF,$ >= upper
UnivariateRealIntegratorImpl.java,verifyIterationCount,minimalIterationCount,int,0,DEF,$ <= 0
UnivariateRealIntegratorImpl.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ <= minimalIterationCount
SimpsonIntegrator.java,integrate,minimalIterationCount,int,0,RET,$ == 1
SimpsonIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
SimpsonIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
SimpsonIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
SimpsonIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 64
RombergIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
RombergIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
RombergIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
RombergIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 32
ComplexFormat.java,format,im,double,1,DEF,$ < 0.0
ComplexFormat.java,format,im,double,0,DEF,$ > 0.0
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Complex
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Number
ComplexFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
ComplexFormat.java,parse,re,Number,0,RET,$ == null
ComplexFormat.java,parse,im,Number,0,RET,$ == null
ComplexFormat.java,setImaginaryCharacter,imaginaryCharacter,String,0,DEF,$ == null
ComplexFormat.java,setImaginaryCharacter,imaginaryCharacter,String,0,DEF,$.length() == 0
ComplexFormat.java,setImaginaryFormat,imaginaryFormat,NumberFormat,0,DEF,$ == null
ComplexFormat.java,setRealFormat,realFormat,NumberFormat,0,DEF,$ == null
Complex.java,abs,imaginary,double,0,RET,$ == 0.0
Complex.java,abs,real,double,0,RET,$ == 0.0
Complex.java,divide,c,double,0,RET,$ == 0.0
Complex.java,divide,d,double,0,RET,$ == 0.0
Complex.java,equals,other,Object,1,DEF,$ == null
Complex.java,pow,x,Complex,0,NullPointerException,$ == null
Complex.java,sqrt,real,double,0,RET,$ == 0.0
Complex.java,sqrt,imaginary,double,0,RET,$ == 0.0
Complex.java,sqrt,real,double,1,RET,$ >= 0.0
Complex.java,nthRoot,n,int,0,DEF,$ <= 0
ComplexUtils.java,polar2Complex,r,double,0,DEF,$ < 0
DescriptiveStatistics.java,addValue,windowSize,int,1,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ < 1
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,getPercentile,percentileImpl,null,1,DEF,$ instanceof Percentile
AbstractStorelessUnivariateStatistic.java,evaluate,values,double[],0,DEF,$ == null
AbstractStorelessUnivariateStatistic.java,incrementAll,values,double[],0,DEF,$ == null
AbstractStorelessUnivariateStatistic.java,equals,object,Object,0,RET,$ instanceof AbstractStorelessUnivariateStatistic == false
AbstractStorelessUnivariateStatistic.java,equals,object,null,0,RET,$ instanceof AbstractStorelessUnivariateStatistic
StatisticalSummaryValues.java,equals,object,Object,0,RET,$ instanceof StatisticalSummaryValues == false
StatisticalSummaryValues.java,equals,object,null,0,RET,$ instanceof StatisticalSummaryValues
FirstMoment.java,increment,n,long,0,DEF,$ == 0
GeometricMean.java,getResult,sumOfLogs,StorelessUnivariateStatistic,1,RET,$.getN() > 0
ThirdMoment.java,increment,n,long,0,DEF,$ < 1
Kurtosis.java,getResult,moment,FourthMoment,0,DEF,$.getN() > 3
Kurtosis.java,getResult,moment,FirstMoment,1,DEF,$.n <= 3
Kurtosis.java,getResult,variance,double,1,DEF,$ < 10E-20
Kurtosis.java,evaluate,length,int,0,DEF,$ > 3
Skewness.java,getResult,moment,FirstMoment,0,RET,$.n < 3
Skewness.java,getResult,variance,double,1,RET,$ < 10E-20
Skewness.java,evaluate,length,int,0,DEF,$ > 2
FourthMoment.java,increment,n,long,0,DEF,$ < 1
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 0
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 1
Variance.java,evaluate,values,double[],0,DEF,$ == null
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
VectorialCovariance.java,increment,v,double[],0,DimensionMismatchException,$.length != sums.length
VectorialCovariance.java,getResult,n,long,0,DEF,$ > 1
VectorialCovariance.java,equals,obj,Object,0,RET,$ == null
VectorialCovariance.java,equals,obj,null,0,RET,$ instanceof VectorialCovariance
VectorialCovariance.java,equals,isBiasCorrected,boolean,0,RET,$ != other.isBiasCorrected
VectorialCovariance.java,equals,n,long,0,RET,$ != other.n
SecondMoment.java,increment,n,long,0,DEF,$ < 1
VectorialMean.java,increment,v,double[],0,DimensionMismatchException,$.length != means.length
VectorialMean.java,equals,obj,Object,0,RET,$ == null
VectorialMean.java,equals,obj,null,0,RET,$ instanceof VectorialMean
SemiVariance.java,evaluate,values,double[],0,DEF,$ == null
SemiVariance.java,evaluate,values,double[],1,RET,$.length == 0
SemiVariance.java,evaluate,values,double[],1,RET,$.length == 1
SemiVariance.java,evaluate,values,double[],0,DEF,($[i] > cutoff) == booleanDirection
SemiVariance.java,evaluate,i,int,0,DEF,(values[$] > cutoff) == booleanDirection
SemiVariance.java,evaluate,cutoff,double,0,DEF,(values[i] > $) == booleanDirection
SemiVariance.java,evaluate,values,double[],0,DEF,$[i] > cutoff
SemiVariance.java,evaluate,i,int,0,DEF,values[$] > cutoff
Percentile.java,evaluate,p,double,0,DEF,$ > 100
Percentile.java,evaluate,p,double,0,DEF,$ <= 0
Percentile.java,evaluate,length,int,0,RET,$ == 0
Percentile.java,evaluate,length,int,0,RET,$ == 1
Percentile.java,evaluate,pos,double,0,RET,$ < 1
Percentile.java,evaluate,pos,double,0,RET,$ >= n
Percentile.java,setQuantile,p,double,0,DEF,$ <= 0
Percentile.java,setQuantile,p,double,0,DEF,$ > 100
Max.java,increment,d,double,0,DEF,$ > value
Min.java,increment,d,double,0,DEF,$ < value
AbstractUnivariateStatistic.java,test,values,double[],0,DEF,$ == null
AbstractUnivariateStatistic.java,test,begin,int,0,DEF,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,DEF,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,DEF,begin + $ > values.length
AbstractUnivariateStatistic.java,test,begin,int,0,DEF,$ + length > values.length
AbstractUnivariateStatistic.java,test,length,int,0,RET,$ == 0
AbstractUnivariateStatistic.java,test,weights,double[],0,DEF,$ == null
AbstractUnivariateStatistic.java,test,weights,double[],0,DEF,$.length != values.length
AbstractUnivariateStatistic.java,test,i,int,0,DEF,weights[$] < 0
AbstractUnivariateStatistic.java,test,weights,double[],0,DEF,$[i] < 0
AbstractUnivariateStatistic.java,test,i,int,0,DEF,weights[$] > 0.0
AbstractUnivariateStatistic.java,test,weights,double[],0,DEF,$[i] > 0.0
MultivariateSummaryStatistics.java,append,i,int,0,DEF,$ > 0
MultivariateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof MultivariateSummaryStatistics == false
MultivariateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof MultivariateSummaryStatistics
MultivariateSummaryStatistics.java,checkEmpty,n,long,0,DEF,$ > 0
MultivariateSummaryStatistics.java,checkDimension,dimension,int,0,DimensionMismatchException,$ != k
AggregateSummaryStatistics.java,aggregate,statistics,Collection<SummaryStatistics>,0,RET,$ == null
AggregateSummaryStatistics.java,aggregate,current,SummaryStatistics,0,DEF,$.getMin() < min
AggregateSummaryStatistics.java,aggregate,current,SummaryStatistics,0,DEF,$.getMax() > max
AggregateSummaryStatistics.java,aggregate,n,long,1,DEF,$ == 0
AggregateSummaryStatistics.java,aggregate,n,long,1,DEF,$ == 1
AggregateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof AggregatingSummaryStatistics == false
AggregateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof AggregatingSummaryStatistics
SummaryStatistics.java,addValue,meanImpl,null,0,DEF,$ instanceof Mean
SummaryStatistics.java,addValue,varianceImpl,null,0,DEF,$ instanceof Variance
SummaryStatistics.java,addValue,geoMeanImpl,null,0,DEF,$ instanceof GeometricMean
SummaryStatistics.java,getMean,mean,Mean,1,RET,$ == meanImpl
SummaryStatistics.java,getVariance,varianceImpl,StorelessUnivariateStatistic,1,RET,$ == variance
SummaryStatistics.java,clear,meanImpl,StorelessUnivariateStatistic,0,DEF,$ != mean
SummaryStatistics.java,clear,varianceImpl,StorelessUnivariateStatistic,0,DEF,$ != variance
SummaryStatistics.java,equals,object,Object,0,RET,$ instanceof SummaryStatistics == false
SummaryStatistics.java,equals,object,null,0,RET,$ instanceof SummaryStatistics
SummaryStatistics.java,checkEmpty,n,long,0,DEF,$ > 0
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.geoMean == source.geoMeanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.max == source.maxImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.mean == source.meanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.min == source.minImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sum == source.sumImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.variance == source.varianceImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumLog == source.sumLogImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumsq == source.sumsqImpl
Product.java,increment,n,long,1,DEF,$ == 0
SumOfLogs.java,getResult,n,int,1,RET,$ > 0
SumOfSquares.java,increment,n,long,1,DEF,$ == 0
Sum.java,increment,n,long,1,DEF,$ == 0
TTestImpl.java,checkSignificanceLevel,alpha,double,0,DEF,$ <= 0
TTestImpl.java,checkSignificanceLevel,alpha,double,0,DEF,$ > 0.5
TTestImpl.java,checkSampleData,data,double[],0,DEF,$ == null
TTestImpl.java,checkSampleData,data,double[],0,DEF,$.length < 2
TTestImpl.java,checkSampleData,stat,StatisticalSummary,0,DEF,$ == null
TTestImpl.java,checkSampleData,stat,StatisticalSummary,0,DEF,$.getN() < 2
OneWayAnovaImpl.java,anovaTest,alpha,double,0,DEF,$ <= 0
OneWayAnovaImpl.java,anovaTest,alpha,double,0,DEF,$ > 0.5
OneWayAnovaImpl.java,anovaStats,categoryData,Collection<double[]>,0,DEF,$.size() < 2
OneWayAnovaImpl.java,anovaStats,array,double[],0,DEF,$.length <= 1
ChiSquareTestImpl.java,chiSquare,expected,double[],0,DEF,$.length < 2
ChiSquareTestImpl.java,chiSquare,expected,double[],0,DEF,$.length != observed.length
ChiSquareTestImpl.java,chiSquare,sumObserved,double,0,DEF,Math.abs(sumExpected - $) > 10E-6
ChiSquareTestImpl.java,chiSquare,sumExpected,double,0,DEF,Math.abs($ - sumObserved) > 10E-6
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,DEF,$ <= 0
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,DEF,$ > 0.5
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,DEF,$ <= 0
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,DEF,$ > 0.5
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],0,DEF,$.length < 2
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],0,DEF,$.length != observed2.length
ChiSquareTestImpl.java,chiSquareDataSetsComparison,countSum1,long,0,DEF,$ == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,countSum2,long,0,DEF,$ == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,i,int,1,DEF,observed1[$] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],1,DEF,$[i] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed2,long[],1,DEF,$[i] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,i,int,1,DEF,observed2[$] == 0
ChiSquareTestImpl.java,chiSquareTestDataSetsComparison,alpha,double,0,DEF,$ <= 0
ChiSquareTestImpl.java,chiSquareTestDataSetsComparison,alpha,double,0,DEF,$ > 0.5
ChiSquareTestImpl.java,checkArray,in,long[][],0,DEF,$.length < 2
ChiSquareTestImpl.java,checkArray,in,long[][],0,DEF,$[0].length < 2
ChiSquareTestImpl.java,checkPositive,in,double[],0,DEF,$[i] <= 0
ChiSquareTestImpl.java,checkPositive,i,int,0,DEF,in[$] <= 0
ChiSquareTestImpl.java,checkNonNegative,in,long[],0,DEF,$[i] < 0
ChiSquareTestImpl.java,checkNonNegative,i,int,0,DEF,in[$] < 0
ChiSquareTestImpl.java,checkNonNegative,in,long[][],0,DEF,$[i][j] < 0
ChiSquareTestImpl.java,checkNonNegative,i,int,0,DEF,in[$][j] < 0
ChiSquareTestImpl.java,checkNonNegative,j,int,0,DEF,in[i][$] < 0
NaturalRanking.java,rank,ranks,IntDoublePair[],1,DEF,Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
NaturalRanking.java,rank,i,int,1,DEF,Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
NaturalRanking.java,rank,tiesTrace,List<Integer>,0,DEF,$.size() > 1
NaturalRanking.java,rank,tiesTrace,List<Integer>,0,DEF,$.size() > 1
NaturalRanking.java,rank,nanStrategy,NaNStrategy,0,DEF,$ == NaNStrategy.FIXED
NaturalRanking.java,restoreNaNs,nanPositions,List<Integer>,0,RET,$.size() == 0
StatUtils.java,sumDifference,n,int,0,DEF,$ != sample2.length
StatUtils.java,sumDifference,n,int,0,DEF,$ < 1
StatUtils.java,varianceDifference,n,int,0,DEF,$ < 2
StatUtils.java,varianceDifference,n,int,0,DEF,$ != sample2.length
KMeansPlusPlusClusterer.java,chooseInitialCenters,i,int,0,DEF,dx2[$] >= r
KMeansPlusPlusClusterer.java,chooseInitialCenters,dx2,double[],0,DEF,$[i] >= r
KMeansPlusPlusClusterer.java,getNearestCluster,distance,double,0,DEF,$ < minDistance
EuclideanIntegerPoint.java,equals,other,null,0,RET,$ instanceof EuclideanIntegerPoint
EuclideanIntegerPoint.java,equals,point,int[],0,RET,$.length != otherPoint.length
PearsonsCorrelation.java,PearsonsCorrelation,covarianceMatrix,RealMatrix,0,DEF,$ == null
PearsonsCorrelation.java,getCorrelationPValues,i,int,1,DEF,$ == j
PearsonsCorrelation.java,correlation,xArray,double[],1,RET,$.length == yArray.length
PearsonsCorrelation.java,correlation,xArray,double[],1,RET,$.length > 1
PearsonsCorrelation.java,checkSufficientData,nRows,int,0,DEF,$ < 2
PearsonsCorrelation.java,checkSufficientData,nCols,int,0,DEF,$ < 2
SpearmansCorrelation.java,correlation,xArray,double[],1,RET,$.length == yArray.length
SpearmansCorrelation.java,correlation,xArray,double[],1,RET,$.length > 1
Covariance.java,covariance,length,int,1,DEF,$ == yArray.length
Covariance.java,covariance,length,int,1,DEF,$ > 1
Covariance.java,checkSufficientData,nRows,int,0,DEF,$ < 2
Covariance.java,checkSufficientData,nCols,int,0,DEF,$ < 2
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ == j
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ < p
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],1,DEF,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,y,double[],1,DEF,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],1,DEF,$.length != y.length
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,DEF,$.length > 0
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,DEF,$[0].length > x.length
AbstractMultipleLinearRegression.java,validateCovarianceData,x,double[][],0,DEF,$.length != covariance.length
AbstractMultipleLinearRegression.java,validateCovarianceData,covariance,double[][],0,DEF,$.length > 0
SimpleRegression.java,addData,n,long,1,DEF,$ == 0
SimpleRegression.java,addData,n,long,0,DEF,$ > 2
SimpleRegression.java,removeData,n,long,0,DEF,$ > 0
SimpleRegression.java,removeData,n,long,0,DEF,$ > 2
SimpleRegression.java,getSlope,n,long,0,RET,$ < 2
SimpleRegression.java,getTotalSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getXSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getMeanSquareError,n,long,0,RET,$ < 3
SimpleRegression.java,getR,b1,double,0,DEF,$ < 0
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,DEF,$ >= 1
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,DEF,$ <= 0
SimpleRegression.java,setDistribution,n,long,0,DEF,$ > 2
GLSMultipleLinearRegression.java,getOmegaInverse,OmegaInverse,RealMatrix,0,DEF,$ == null
Frequency.java,addValue,v,null,1,DEF,$ instanceof Comparable<?>
Frequency.java,addValue,v,null,0,DEF,$ instanceof Integer
Frequency.java,addValue,count,Long,1,DEF,$ == null
Frequency.java,getCount,v,null,0,RET,$ instanceof Integer
Frequency.java,getCount,count,Long,0,DEF,$ != null
Frequency.java,getPct,sumFreq,long,0,RET,$ == 0
Frequency.java,getCumFreq,v,null,0,RET,$ instanceof Integer
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,DEF,$ == null
Frequency.java,getCumFreq,value,Long,0,DEF,$ != null
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,RET,$.compare(v, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,v,Comparable<>,0,RET,c.compare($, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,freqTable,TreeMap<Comparable<?>,Long>,0,RET,c.compare(v, $.firstKey()) < 0
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,RET,$.compare(v, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,v,Comparable<>,0,RET,c.compare($, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,freqTable,TreeMap<Comparable<?>,Long>,0,RET,c.compare(v, $.lastKey()) >= 0
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,1,DEF,$.compare(v, nextValue) > 0
Frequency.java,getCumFreq,v,Comparable<>,1,DEF,c.compare($, nextValue) > 0
Frequency.java,getCumFreq,nextValue,Comparable<>,1,DEF,c.compare(v, $) > 0
Frequency.java,getCumPct,sumFreq,long,0,RET,$ == 0
Frequency.java,equals,obj,Object,0,RET,$ == null
Frequency.java,equals,obj,null,0,RET,$ instanceof Frequency
Frequency.java,equals,freqTable,TreeMap<Comparable<?>,Long>,1,RET,$ == null
Frequency.java,equals,other,Frequency,0,RET,$.freqTable != null
FDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
FDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
FDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
FDistributionImpl.java,getInitialDomain,d,double,0,DEF,$ > 2.0
FDistributionImpl.java,setNumeratorDegreesOfFreedom,degreesOfFreedom,double,0,DEF,$ <= 0.0
FDistributionImpl.java,setDenominatorDegreesOfFreedom,degreesOfFreedom,double,0,DEF,$ <= 0.0
PoissonDistributionImpl.java,setMean,p,double,0,DEF,$ <= 0
PoissonDistributionImpl.java,probability,x,int,1,DEF,$ < 0
PoissonDistributionImpl.java,probability,x,int,1,DEF,$ == Integer.MAX_VALUE
PoissonDistributionImpl.java,probability,x,int,1,DEF,$ == 0
PoissonDistributionImpl.java,cumulativeProbability,x,int,0,RET,$ < 0
PoissonDistributionImpl.java,cumulativeProbability,x,int,0,RET,$ == Integer.MAX_VALUE
HypergeometricDistributionImpl.java,HypergeometricDistributionImpl,numberOfSuccesses,int,0,DEF,$ > populationSize
HypergeometricDistributionImpl.java,HypergeometricDistributionImpl,sampleSize,int,0,DEF,$ > populationSize
HypergeometricDistributionImpl.java,setNumberOfSuccesses,num,int,0,DEF,$ < 0
HypergeometricDistributionImpl.java,setPopulationSize,size,int,0,DEF,$ <= 0
HypergeometricDistributionImpl.java,setSampleSize,size,int,0,DEF,$ < 0
GammaDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
GammaDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
GammaDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
GammaDistributionImpl.java,setAlpha,alpha,double,0,DEF,$ <= 0.0
GammaDistributionImpl.java,setBeta,beta,double,0,DEF,$ <= 0.0
GammaDistributionImpl.java,density,x,Double,0,RET,$ < 0
GammaDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
GammaDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
TDistributionImpl.java,setDegreesOfFreedom,degreesOfFreedom,double,0,DEF,$ <= 0.0
TDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ == 0.0
TDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ < 0.0
TDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
TDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
BinomialDistributionImpl.java,setNumberOfTrials,trials,int,0,DEF,$ < 0
BinomialDistributionImpl.java,setProbabilityOfSuccess,p,double,0,DEF,$ < 0.0
BinomialDistributionImpl.java,setProbabilityOfSuccess,p,double,0,DEF,$ > 1.0
BinomialDistributionImpl.java,cumulativeProbability,x,int,1,DEF,$ < 0
BinomialDistributionImpl.java,probability,x,int,1,DEF,$ < 0
BinomialDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
BinomialDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
ExponentialDistributionImpl.java,setMean,mean,double,0,DEF,$ <= 0.0
ExponentialDistributionImpl.java,density,x,Double,0,RET,$ < 0
ExponentialDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ < 0.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ > 1.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1.0
ExponentialDistributionImpl.java,getDomainUpperBound,p,double,1,RET,$ < .5
ExponentialDistributionImpl.java,getInitialDomain,p,double,1,RET,$ < .5
ZipfDistributionImpl.java,setNumberOfElements,n,int,0,DEF,$ <= 0
ZipfDistributionImpl.java,setExponent,s,double,0,DEF,$ <= 0.0
ZipfDistributionImpl.java,probability,x,int,0,RET,$ <= 0
ZipfDistributionImpl.java,cumulativeProbability,x,int,1,RET,$ <= 0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ < 0.0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ > 1.0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
CauchyDistributionImpl.java,setScale,s,double,0,DEF,$ <= 0.0
CauchyDistributionImpl.java,getDomainLowerBound,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ > .5
NormalDistributionImpl.java,setStandardDeviation,sd,double,0,DEF,$ <= 0.0
NormalDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
NormalDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
NormalDistributionImpl.java,getDomainLowerBound,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ > .5
PascalDistributionImpl.java,setNumberOfSuccesses,successes,int,0,DEF,$ < 0
PascalDistributionImpl.java,setProbabilityOfSuccess,p,double,0,DEF,$ < 0.0
PascalDistributionImpl.java,setProbabilityOfSuccess,p,double,0,DEF,$ > 1.0
PascalDistributionImpl.java,cumulativeProbability,x,int,1,DEF,$ < 0
PascalDistributionImpl.java,probability,x,int,1,DEF,$ < 0
PascalDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
PascalDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
AbstractDistribution.java,cumulativeProbability,x0,double,0,DEF,$ > x1
AbstractIntegerDistribution.java,cumulativeProbability,x0,double,0,DEF,$ > x1
AbstractIntegerDistribution.java,cumulativeProbability,x0,double,1,RET,Math.floor($) < x0
AbstractIntegerDistribution.java,probability,fl,double,1,RET,$ == x
AbstractIntegerDistribution.java,cumulativeProbability,x0,int,0,DEF,$ > x1
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,DEF,$ < 0.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,DEF,$ > 1.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,pm,double,1,DEF,$ > p
AbstractIntegerDistribution.java,inverseCumulativeProbability,xm,int,1,DEF,$ == x1
AbstractIntegerDistribution.java,inverseCumulativeProbability,xm,int,1,DEF,$ == x0
ChiSquaredDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
ChiSquaredDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
ChiSquaredDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
ChiSquaredDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
AbstractContinuousDistribution.java,inverseCumulativeProbability,p,double,0,DEF,$ < 0.0
AbstractContinuousDistribution.java,inverseCumulativeProbability,p,double,0,DEF,$ > 1.0
AbstractContinuousDistribution.java,inverseCumulativeProbability,rootFindingFunction,UnivariateRealFunction,0,RET,Math.abs($.value(lowerBound)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,lowerBound,double,0,RET,Math.abs(rootFindingFunction.value($)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,upperBound,double,0,RET,Math.abs(rootFindingFunction.value($)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,rootFindingFunction,UnivariateRealFunction,0,RET,Math.abs($.value(upperBound)) < 1E-6
BetaDistributionImpl.java,density,x,Double,1,RET,$ < 0
BetaDistributionImpl.java,density,x,Double,1,RET,$ > 1
BetaDistributionImpl.java,density,x,Double,1,MathException:RET,$ == 0
BetaDistributionImpl.java,density,alpha,double,0,MathException,$ < 1
BetaDistributionImpl.java,density,x,Double,1,MathException:RET,$ == 1
BetaDistributionImpl.java,density,beta,double,0,MathException,$ < 1
BetaDistributionImpl.java,inverseCumulativeProbability,p,double,1,RET,$ == 0
BetaDistributionImpl.java,inverseCumulativeProbability,p,double,1,RET,$ == 1
BetaDistributionImpl.java,cumulativeProbability,x,double,1,RET,$ <= 0
BetaDistributionImpl.java,cumulativeProbability,x,double,1,RET,$ >= 1
SaddlePointExpansion.java,getStirlingError,z,double,1,DEF,$ < 15.0
SaddlePointExpansion.java,getStirlingError,z2,double,1,DEF,Math.floor($) == z2
SaddlePointExpansion.java,logBinomialProbability,x,int,1,DEF,$ == 0
SaddlePointExpansion.java,logBinomialProbability,p,double,1,DEF,$ < 0.1
SaddlePointExpansion.java,logBinomialProbability,x,int,1,DEF,$ == n
SaddlePointExpansion.java,logBinomialProbability,q,double,1,DEF,$ < 0.1
WeibullDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ < 0.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ > 1.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
WeibullDistributionImpl.java,setShape,alpha,double,0,DEF,$ <= 0.0
WeibullDistributionImpl.java,setScale,beta,double,0,DEF,$ <= 0.0
FastFourierTransformer.java,fft,f,double[],0,RET,$.length == 1
FastFourierTransformer.java,fft,n,int,0,RET,$ == 1
FastFourierTransformer.java,fft,n,int,0,RET,$ == 2
FastFourierTransformer.java,sample,n,int,0,DEF,$ <= 0
FastFourierTransformer.java,verifyInterval,lower,double,0,DEF,$ >= upper
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == dimensionSize.length
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == d
FastFourierTransformer.java,get,vector,int[],0,RET,$ == null
FastFourierTransformer.java,get,dimensionSize,int[],0,DEF,$.length > 0
FastFourierTransformer.java,get,vector,int[],0,DEF,$.length != dimensionSize.length
FastFourierTransformer.java,set,vector,int[],0,RET,$ == null
FastFourierTransformer.java,set,dimensionSize,int[],0,DEF,$.length > 0
FastFourierTransformer.java,set,vector,int[],0,DEF,$.length != dimensionSize.length
FastFourierTransformer.java,isForward,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,computeOmega,n,int,0,DEF,$ == 0
FastFourierTransformer.java,computeOmega,absN,int,0,RET,$ == omegaCount
FastFourierTransformer.java,getOmegaReal,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,getOmegaReal,k,int,0,DEF,$ < 0
FastFourierTransformer.java,getOmegaReal,k,int,0,DEF,$ >= omegaCount
FastFourierTransformer.java,getOmegaImaginary,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,getOmegaImaginary,k,int,0,DEF,$ < 0
FastFourierTransformer.java,getOmegaImaginary,k,int,0,DEF,$ >= omegaCount
FastCosineTransformer.java,fct,n,int,0,RET,$ == 1
FastSineTransformer.java,fst,f,double[],0,DEF,$[0] != 0.0
FastSineTransformer.java,fst,n,int,0,RET,$ == 1
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,source.substring($, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,endIndex,int,0,DEF,source.substring(startIndex, $).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,source,String,0,DEF,$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,sb,StringBuffer,0,DEF,source.substring(startIndex, endIndex).compareTo($.toString()) == 0
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,$ == endIndex
CompositeFormat.java,parseNumber,number,Number,0,DEF,$ != null
CompositeFormat.java,parseFixedstring,startIndex,int,0,RET,source.substring($, endIndex).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,endIndex,int,0,RET,source.substring(startIndex, $).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,expected,String,0,RET,source.substring(startIndex, endIndex).compareTo($) != 0
CompositeFormat.java,parseFixedstring,source,String,0,RET,$.substring(startIndex, endIndex).compareTo(expected) != 0
BigReal.java,equals,other,Object,0,RET,$ == null
ResizableDoubleArray.java,addElement,startIndex,int,0,DEF,($ + numElements) > internalArray.length
ResizableDoubleArray.java,addElement,numElements,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,addElementRolling,startIndex,int,0,DEF,($ + (numElements + 1)) > internalArray.length
ResizableDoubleArray.java,addElementRolling,numElements,int,0,DEF,(startIndex + ($ + 1)) > internalArray.length
ResizableDoubleArray.java,substituteMostRecentElement,numElements,int,0,DEF,$ < 1
ResizableDoubleArray.java,checkContractExpand,contraction,float,0,DEF,$ < expansion
ResizableDoubleArray.java,checkContractExpand,contraction,float,0,DEF,$ <= 1.0
ResizableDoubleArray.java,checkContractExpand,expansion,float,0,DEF,$ <= 1.0
ResizableDoubleArray.java,discardExtremeElements,i,int,1,DEF,$ > numElements
ResizableDoubleArray.java,discardExtremeElements,i,int,1,DEF,$ < 0
ResizableDoubleArray.java,expand,expansionMode,int,1,DEF,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,getElement,index,int,1,DEF,$ >= numElements
ResizableDoubleArray.java,getElement,index,int,1,RET,$ >= 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ < 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ + 1 > numElements
ResizableDoubleArray.java,setElement,startIndex,int,0,DEF,($ + index) >= internalArray.length
ResizableDoubleArray.java,setElement,index,int,0,DEF,(startIndex + $) >= internalArray.length
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,DEF,$ != MULTIPLICATIVE_MODE
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,DEF,$ != ADDITIVE_MODE
ResizableDoubleArray.java,setInitialCapacity,initialCapacity,int,1,DEF,$ > 0
ResizableDoubleArray.java,setNumElements,i,int,0,DEF,$ < 0
ResizableDoubleArray.java,setNumElements,startIndex,int,0,DEF,($ + i) > internalArray.length
ResizableDoubleArray.java,setNumElements,i,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,shouldContract,expansionMode,int,1,RET,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,equals,object,Object,0,RET,$ instanceof ResizableDoubleArray == false
ResizableDoubleArray.java,equals,object,null,0,RET,$ instanceof ResizableDoubleArray
OpenIntToFieldHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToFieldHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToFieldHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToFieldHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToFieldHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToFieldHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToFieldHashMap.java,key,referenceCount,int,0,DEF,$ != count
OpenIntToFieldHashMap.java,key,current,int,0,DEF,$ < 0
OpenIntToFieldHashMap.java,value,referenceCount,int,0,DEF,$ != count
OpenIntToFieldHashMap.java,value,current,int,0,DEF,$ < 0
OpenIntToFieldHashMap.java,advance,referenceCount,int,0,DEF,$ != count
OpenIntToFieldHashMap.java,advance,current,int,0,DEF,$ < 0
ContinuedFraction.java,evaluate,a,double,1,DEF,$ != 0.0
ContinuedFraction.java,evaluate,b,double,1,DEF,$ != 0
ContinuedFraction.java,evaluate,n,int,0,MaxIterationsExceededException,$ >= maxIterations
MathUtils.java,addAndCheck,s,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,addAndCheck,s,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,addAndCheck,a,long,1,DEF,$ > b
MathUtils.java,addAndCheck,a,long,1,ArithmeticException,$ < 0
MathUtils.java,addAndCheck,b,long,1,ArithmeticException,$ < 0
MathUtils.java,addAndCheck,b,long,1,DEF,Long.MIN_VALUE - $ <= a
MathUtils.java,binomialCoefficient,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficient,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficient,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 61
MathUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 66
MathUtils.java,binomialCoefficientDouble,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficientDouble,n,int,0,RET,$ < 67
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 67
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 1030
MathUtils.java,checkBinomial,n,int,0,DEF,$ < k
MathUtils.java,checkBinomial,n,int,0,DEF,$ < 0
MathUtils.java,compareTo,x,double,0,RET,$ < y
MathUtils.java,equals,xInt,long,0,DEF,$ < 0
MathUtils.java,equals,yInt,long,0,DEF,$ < 0
MathUtils.java,equals,x,double[],0,RET,$ == null
MathUtils.java,equals,y,double[],0,RET,$ == null
MathUtils.java,equals,x,double[],0,RET,$.length != y.length
MathUtils.java,factorial,n,int,0,DEF,$ < 0
MathUtils.java,factorial,n,int,0,ArithmeticException,$ > 20
MathUtils.java,factorialDouble,n,int,0,DEF,$ < 0
MathUtils.java,factorialDouble,n,int,0,RET,$ < 21
MathUtils.java,factorialLog,n,int,0,DEF,$ < 0
MathUtils.java,factorialLog,n,int,0,RET,$ < 21
MathUtils.java,gcd,u,int,0,RET,$ == 0
MathUtils.java,gcd,v,int,0,RET,$ == 0
MathUtils.java,gcd,u,int,0,DEF,$ == Integer.MIN_VALUE
MathUtils.java,gcd,v,int,0,DEF,$ == Integer.MIN_VALUE
MathUtils.java,gcd,u,int,0,DEF,$ > 0
MathUtils.java,gcd,v,int,0,DEF,$ > 0
MathUtils.java,gcd,k,int,0,DEF,$ == 31
MathUtils.java,gcd,t,int,1,DEF,$ > 0
MathUtils.java,gcd,u,long,0,RET,$ == 0
MathUtils.java,gcd,v,long,0,RET,$ == 0
MathUtils.java,gcd,u,long,0,DEF,$ == Long.MIN_VALUE
MathUtils.java,gcd,v,long,0,DEF,$ == Long.MIN_VALUE
MathUtils.java,gcd,u,long,0,DEF,$ > 0
MathUtils.java,gcd,v,long,0,DEF,$ > 0
MathUtils.java,gcd,k,int,0,DEF,$ == 63
MathUtils.java,gcd,t,long,1,DEF,$ > 0
MathUtils.java,lcm,a,int,0,RET,$==0
MathUtils.java,lcm,b,int,0,RET,$==0
MathUtils.java,lcm,lcm,int,0,DEF,$ == Integer.MIN_VALUE
MathUtils.java,lcm,a,long,0,RET,$==0
MathUtils.java,lcm,b,long,0,RET,$==0
MathUtils.java,lcm,lcm,long,0,DEF,$ == Long.MIN_VALUE
MathUtils.java,mulAndCheck,m,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,mulAndCheck,m,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,mulAndCheck,a,long,1,DEF,$ > b
MathUtils.java,mulAndCheck,a,long,1,ArithmeticException,$ < 0
MathUtils.java,mulAndCheck,b,long,1,ArithmeticException,$ < 0
MathUtils.java,mulAndCheck,b,long,1,ArithmeticException,$ > 0
MathUtils.java,mulAndCheck,b,long,1,DEF,Long.MIN_VALUE / $ <= a
MathUtils.java,mulAndCheck,a,long,1,ArithmeticException,$ > 0
MathUtils.java,nextAfter,d,double,0,RET,$ == 0
MathUtils.java,nextAfter,d,double,1,RET,$ * (direction - $) >= 0
MathUtils.java,nextAfter,direction,double,1,RET,d * ($ - d) >= 0
MathUtils.java,nextAfter,mantissa,long,1,RET,$ == 0x000fffffffffffffL
MathUtils.java,nextAfter,mantissa,long,1,RET,$ == 0L
MathUtils.java,scalb,d,double,0,RET,$ == 0
MathUtils.java,normalizeArray,sum,double,0,DEF,$ == 0
MathUtils.java,roundUnscaled,sign,double,1,DEF,$ == -1
MathUtils.java,roundUnscaled,sign,double,1,DEF,$ == -1
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ < 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ >= 0.5
MathUtils.java,subAndCheck,s,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,subAndCheck,s,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,subAndCheck,b,long,1,ArithmeticException,$ == Long.MIN_VALUE
MathUtils.java,subAndCheck,a,long,1,DEF,$ < 0
MathUtils.java,pow,e,int,0,DEF,$ < 0
MathUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,long,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,int,0,DEF,$ < 0
MathUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,long,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,int,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,BigInteger,0,DEF,$.compareTo(BigInteger.ZERO) < 0
DefaultTransformer.java,transform,o,Object,0,MathException,$ == null
DefaultTransformer.java,transform,o,null,0,RET,$ instanceof Number
DefaultTransformer.java,equals,other,Object,0,RET,$ == null
TransformerMap.java,transform,o,null,1,DEF,$ instanceof Number
TransformerMap.java,transform,o,null,1,DEF,$ instanceof String
TransformerMap.java,transform,trans,NumberTransformer,0,DEF,$ != null
TransformerMap.java,equals,other,Object,0,RET,$ == null
OpenIntToDoubleHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToDoubleHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToDoubleHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToDoubleHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToDoubleHashMap.java,key,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,key,current,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,value,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,value,current,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,advance,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,advance,current,int,0,DEF,$ < 0
BigFraction.java,BigFraction,num,BigInteger,0,DEF,$ == null
BigFraction.java,BigFraction,den,BigInteger,0,DEF,$ == null
BigFraction.java,BigFraction,gcd,BigInteger,0,DEF,BigInteger.ONE.compareTo($) < 0
BigFraction.java,BigFraction,den,BigInteger,0,DEF,BigInteger.ZERO.compareTo($) > 0
BigFraction.java,BigFraction,exponent,long,0,DEF,$ != 0
BigFraction.java,BigFraction,sign,long,0,DEF,$ != 0
BigFraction.java,BigFraction,k,int,1,DEF,$ < 0
BigFraction.java,BigFraction,a0,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,value,double,0,RET,Math.abs(a0 - $) < epsilon
BigFraction.java,BigFraction,a0,long,0,RET,Math.abs($ - value) < epsilon
BigFraction.java,BigFraction,p2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,q2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,n,int,1,DEF,$ < maxIterations
BigFraction.java,BigFraction,convergent,double,1,DEF,Math.abs($ - value) > epsilon
BigFraction.java,BigFraction,value,double,1,DEF,Math.abs(convergent - $) > epsilon
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,BigFraction,n,int,0,FractionConversionException,$ >= maxIterations
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,getReducedFraction,numerator,int,0,RET,$ == 0
BigFraction.java,equals,other,null,0,DEF,$ instanceof BigFraction
BigFraction.java,pow,exponent,int,0,RET,$ < 0
BigFraction.java,pow,exponent,long,0,RET,$ < 0
BigFraction.java,pow,exponent,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
Fraction.java,Fraction,a0,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,value,double,0,RET,Math.abs(a0 - $) < epsilon
Fraction.java,Fraction,a0,long,0,RET,Math.abs($ - value) < epsilon
Fraction.java,Fraction,p2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,q2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,n,int,1,DEF,$ < maxIterations
Fraction.java,Fraction,convergent,double,1,DEF,Math.abs($ - value) > epsilon
Fraction.java,Fraction,value,double,1,DEF,Math.abs(convergent - $) > epsilon
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,n,int,0,FractionConversionException,$ >= maxIterations
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,den,int,0,DEF,$ == 0
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,Fraction,num,int,0,DEF,$ == Integer.MIN_VALUE
Fraction.java,Fraction,den,int,0,DEF,$ == Integer.MIN_VALUE
Fraction.java,Fraction,d,int,0,DEF,$ > 1
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,abs,numerator,int,1,DEF,$ >= 0
Fraction.java,equals,other,Object,1,DEF,$ == null
Fraction.java,negate,numerator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,addSub,fraction,Fraction,0,DEF,$ == null
Fraction.java,addSub,numerator,int,0,RET,$ == 0
Fraction.java,addSub,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,addSub,d1,int,0,RET,$==1
Fraction.java,addSub,w,BigInteger,0,DEF,$.bitLength() > 31
Fraction.java,multiply,fraction,Fraction,0,DEF,$ == null
Fraction.java,multiply,numerator,int,0,RET,$ == 0
Fraction.java,multiply,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,divide,fraction,Fraction,0,DEF,$ == null
Fraction.java,divide,fraction,Fraction,0,DEF,$.numerator == 0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$ == 0
Fraction.java,getReducedFraction,numerator,int,0,RET,$==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,numerator,int,0,DEF,($&1)==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$ < 0
Fraction.java,getReducedFraction,numerator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,toString,denominator,int,1,DEF,$ == 1
Fraction.java,toString,numerator,int,1,DEF,$ == 0
AbstractFormat.java,setDenominatorFormat,format,NumberFormat,0,DEF,$ == null
AbstractFormat.java,setNumeratorFormat,format,NumberFormat,0,DEF,$ == null
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
ProperBigFractionFormat.java,format,num,BigInteger,0,DEF,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,ret,BigFraction,0,RET,$ != null
ProperBigFractionFormat.java,parse,whole,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,setWholeFormat,format,NumberFormat,0,DEF,$ == null
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Fraction
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
FractionFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
FractionFormat.java,parse,num,Number,0,RET,$ == null
FractionFormat.java,parse,den,Number,0,RET,$ == null
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigFraction
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigInteger
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
BigFractionFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
BigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
BigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperFractionFormat.java,format,whole,int,0,DEF,$ != 0
ProperFractionFormat.java,parse,ret,Fraction,0,RET,$ != null
ProperFractionFormat.java,parse,whole,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,parse,den,Number,0,RET,$ == null
ProperFractionFormat.java,parse,den,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,setWholeFormat,format,NumberFormat,0,DEF,$ == null
AbstractIntegrator.java,computeDerivatives,evaluations,int,0,MaxEvaluationsExceededException,++$ > maxEvaluations
AbstractIntegrator.java,sanityChecks,ode,FirstOrderDifferentialEquations,0,IntegratorException,$.getDimension() != y0.length
AbstractIntegrator.java,sanityChecks,ode,FirstOrderDifferentialEquations,0,IntegratorException,$.getDimension() != y.length
ContinuousOutputModel.java,append,model,ContinuousOutputModel,0,RET,$.steps.size() == 0
ContinuousOutputModel.java,append,steps,List<StepInterpolator>,1,DEF,$.size() == 0
ContinuousOutputModel.java,handleStep,steps,List<StepInterpolator>,0,DEF,$.size() == 0
ContinuousOutputModel.java,setInterpolatedTime,sMin,StepInterpolator,0,RET,locatePoint(time, $) <= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMin) <= 0
ContinuousOutputModel.java,setInterpolatedTime,sMax,StepInterpolator,0,RET,locatePoint(time, $) >= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMax) >= 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ < 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ > 0
ContinuousOutputModel.java,setInterpolatedTime,tMin,double,1,DEF,Math.abs(tMed - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,Math.abs($ - tMin) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMax,double,1,DEF,Math.abs($ - tMed) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,Math.abs(tMax - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,index,int,1,DEF,$ < low
ContinuousOutputModel.java,setInterpolatedTime,index,int,0,DEF,$ > high
AdamsBashforthIntegrator.java,integrate,y,double[],0,DEF,$ != y0
AdamsBashforthIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
DormandPrince54StepInterpolator.java,DormandPrince54StepInterpolator,interpolator,DormandPrince54StepInterpolator,1,DEF,$.v1 == null
DormandPrince54StepInterpolator.java,computeInterpolatedStateAndDerivatives,v1,double[],0,DEF,$ == null
RungeKuttaIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,setStabilityCheck,stepsizeReductionFactor,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStabilityCheck,stepsizeReductionFactor,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,control1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,control1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,control2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,control2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,control3,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,control3,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,control4,double,1,DEF,$ < 1.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,control4,double,1,DEF,$ > 999.9
GraggBulirschStoerIntegrator.java,setOrderControl,maximalOrder,int,0,DEF,$ <= 6
GraggBulirschStoerIntegrator.java,setOrderControl,maximalOrder,int,0,DEF,$ % 2 != 0
GraggBulirschStoerIntegrator.java,setOrderControl,control1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,control1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setOrderControl,control2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,control2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$ == null
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$.length != size
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudifControlParameter,int,1,DEF,$ <= 0
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudifControlParameter,int,1,DEF,$ >= 7
GraggBulirschStoerIntegrator.java,rescale,vecAbsoluteTolerance,double[],1,DEF,$ == null
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,DEF,2 * $ == n
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,RET,$ <= maxChecks
GraggBulirschStoerIntegrator.java,tryStep,k,int,0,RET,$ < maxIter
GraggBulirschStoerIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize > t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ > t
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize < t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ < t
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 0
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > 1.0e15
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > maxError
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ > 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,mu,int,0,DEF,$ >= 0
GraggBulirschStoerIntegrator.java,integrate,interpError,double,0,DEF,$ > 10.0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 1
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ <= targetIter
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 2
GraggBulirschStoerIntegrator.java,integrate,optimalIter,int,1,DEF,$ <= k
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ < targetIter
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ < minStep
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,IntegratorException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,IntegratorException,$.length != y0.length
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,IntegratorException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,IntegratorException,$.length != y0.length
AdaptiveStepsizeIntegrator.java,initializeStep,initialStep,double,0,RET,$ > 0
AdaptiveStepsizeIntegrator.java,filterStep,h,double,0,IntegratorException,Math.abs($) < minStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,0,DEF,$ < -maxStep
EmbeddedRungeKuttaIntegrator.java,integrate,y,double[],0,DEF,$ != y0
EmbeddedRungeKuttaIntegrator.java,integrate,vecAbsoluteTolerance,double[],1,DEF,$ == null
EmbeddedRungeKuttaIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
AdamsNordsieckTransformer.java,getInstance,t,AdamsNordsieckTransformer,0,DEF,$ == null
AdamsMoultonIntegrator.java,integrate,y,double[],0,DEF,$ != y0
AdamsMoultonIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
AdamsMoultonIntegrator.java,visit,row,int,1,DEF,($ & 0x1) == 0
DormandPrince853StepInterpolator.java,DormandPrince853StepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState == null
DormandPrince853StepInterpolator.java,computeInterpolatedStateAndDerivatives,v,double[][],0,DEF,$ == null
DormandPrince853StepInterpolator.java,doFinalize,currentState,double[],0,RET,$ == null
DormandPrince853Integrator.java,estimateError,den,double,0,DEF,$ <= 0.0
RungeKuttaStepInterpolator.java,RungeKuttaStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
RungeKuttaStepInterpolator.java,readExternal,currentState,double[],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,GraggBulirschStoerStepInterpolator,interpolator,GraggBulirschStoerStepInterpolator,1,DEF,$.polynoms == null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ < 0
GraggBulirschStoerStepInterpolator.java,resetTables,polynoms,double[][],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ <= 4
GraggBulirschStoerStepInterpolator.java,computeCoefficients,polynoms,double[][],0,DEF,$ == null
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,RET,$ < 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 1
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 2
GraggBulirschStoerStepInterpolator.java,estimateError,currentDegree,int,0,DEF,$ >= 5
GraggBulirschStoerStepInterpolator.java,computeInterpolatedStateAndDerivatives,currentDegree,int,0,DEF,$ > 3
GraggBulirschStoerStepInterpolator.java,computeInterpolatedStateAndDerivatives,h,double,0,DEF,$ == 0
StepNormalizer.java,handleStep,lastState,double[],0,DEF,$ == null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.scaled != null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.nordsieck != null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.stateVariation != null
NordsieckStepInterpolator.java,writeExternal,scaled,double[],1,DEF,$ == null
NordsieckStepInterpolator.java,writeExternal,nordsieck,Array2DRowRealMatrix,1,DEF,$ == null
AbstractStepInterpolator.java,AbstractStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
AbstractStepInterpolator.java,writeBaseExternal,currentState,double[],1,DEF,$ == null
AbstractStepInterpolator.java,writeBaseExternal,currentState,double[],0,DEF,$ != null
AbstractStepInterpolator.java,readBaseExternal,dimension,int,1,DEF,$ < 0
EventState.java,evaluateStep,gb,double,1,FunctionEvaluationException:RET,$ >= 0
EventState.java,evaluateStep,ga,double,0,DEF,$ * gb > 0
EventState.java,evaluateStep,gb,double,0,DEF,ga * $ > 0
EventState.java,evaluateStep,ga,double,0,DEF,$ * gb > 0
EventState.java,evaluateStep,gb,double,0,DEF,ga * $ > 0
EventState.java,evaluateStep,root,double,1,DEF,Math.abs($ - ta) <= convergence
EventState.java,evaluateStep,ta,double,1,DEF,Math.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,1,DEF,Math.abs($ - previousEventTime) <= convergence
EventState.java,evaluateStep,previousEventTime,double,1,DEF,Math.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,0,RET,Math.abs(previousEventTime - $) > convergence
EventState.java,evaluateStep,previousEventTime,double,0,RET,Math.abs($ - root) > convergence
EventState.java,evaluateStep,pendingEventTime,double,0,RET,Math.abs(t1 - $) <= convergence
EventState.java,evaluateStep,t1,double,0,RET,Math.abs($ - pendingEventTime) <= convergence
EventState.java,evaluateStep,cause,Throwable,1,DEF,$ != null
EventState.java,evaluateStep,cause,null,1,DEF,$ instanceof DerivativeException
EventState.java,evaluateStep,cause,Throwable,0,DEF,$ != null
EventState.java,evaluateStep,cause,null,0,DEF,$ instanceof EventException
EventState.java,reset,nextAction,int,0,DEF,$ == EventHandler.RESET_STATE
CombinedEventsManager.java,evaluateStep,first,EventState,1,DEF,$ == null
MultistepIntegrator.java,MultistepIntegrator,nSteps,int,0,DEF,$ <= 0
MultistepIntegrator.java,start,de,null,0,DEF,$ instanceof InitializationCompletedMarkerException
BinaryMutation.java,mutate,original,null,0,IllegalArgumentException,$ instanceof BinaryChromosome
RandomKey.java,decodeGeneric,representation,List<Double>,0,IllegalArgumentException,$.size() != l
RandomKey.java,isSame,another,null,0,RET,$ instanceof RandomKey<?>
RandomKey.java,checkValidity,val,double,0,InvalidRepresentationException,$ < 0
RandomKey.java,checkValidity,val,double,0,InvalidRepresentationException,$ > 1
RandomKey.java,inducedPermutation,index,int,0,IllegalArgumentException,$ == -1
GeneticAlgorithm.java,GeneticAlgorithm,crossoverRate,double,0,IllegalArgumentException,$ < 0
GeneticAlgorithm.java,GeneticAlgorithm,crossoverRate,double,0,IllegalArgumentException,$ > 1
GeneticAlgorithm.java,GeneticAlgorithm,mutationRate,double,0,IllegalArgumentException,$ < 0
GeneticAlgorithm.java,GeneticAlgorithm,mutationRate,double,0,IllegalArgumentException,$ > 1
Chromosome.java,searchForFitnessUpdate,sameChromosome,Chromosome,0,DEF,$ != null
ElitisticListPopulation.java,setElitismRate,elitismRate,double,0,IllegalArgumentException,$ < 0
ElitisticListPopulation.java,setElitismRate,elitismRate,double,0,IllegalArgumentException,$ > 1
BinaryChromosome.java,checkValidity,i,int,0,InvalidRepresentationException,$ < 0
BinaryChromosome.java,checkValidity,i,int,0,InvalidRepresentationException,$ >1
BinaryChromosome.java,isSame,another,null,0,RET,$ instanceof BinaryChromosome
OnePointCrossover.java,crossover,first,null,0,IllegalArgumentException,$ instanceof AbstractListChromosome
OnePointCrossover.java,crossover,second,null,0,IllegalArgumentException,$ instanceof AbstractListChromosome
RandomKeyMutation.java,mutate,original,null,0,DEF,$ instanceof RandomKey<?>
ListPopulation.java,ListPopulation,chromosomes,List<Chromosome>,0,IllegalArgumentException,$.size() > populationLimit
ListPopulation.java,ListPopulation,populationLimit,int,0,IllegalArgumentException,$ < 0
ListPopulation.java,ListPopulation,populationLimit,int,0,IllegalArgumentException,$ < 0
ListPopulation.java,getFittestChromosome,bestChromosome,Chromosome,0,DEF,chromosome.compareTo($) > 0
ListPopulation.java,getFittestChromosome,chromosome,Chromosome,0,DEF,$.compareTo(bestChromosome) > 0
FixedGenerationCount.java,FixedGenerationCount,maxGenerations,int,0,IllegalArgumentException,$ <= 0
QRDecompositionImpl.java,QRDecompositionImpl,a,double,0,DEF,$ != 0.0
QRDecompositionImpl.java,getR,cachedR,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQT,cachedQT,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQT,minor,int,0,DEF,qrtMinor[$] != 0.0
QRDecompositionImpl.java,getQT,qrtMinor,double[],0,DEF,$[minor] != 0.0
QRDecompositionImpl.java,getH,cachedH,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,isNonSingular,diag,double,0,RET,$ == 0
QRDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
QRDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
RealMatrixImpl.java,RealMatrixImpl,d,double[][],0,NullPointerException,$ == null
RealMatrixImpl.java,RealMatrixImpl,nRows,int,0,DEF,$ == 0
RealMatrixImpl.java,RealMatrixImpl,nCols,int,0,DEF,$ == 0
RealMatrixImpl.java,RealMatrixImpl,r,int,0,DEF,d[$].length != nCols
RealMatrixImpl.java,RealMatrixImpl,d,double[][],0,DEF,$[r].length != nCols
RealMatrixImpl.java,setSubMatrix,data,double[][],1,DEF,$ == null
RealMatrixImpl.java,setSubMatrix,row,int,0,DEF,$ > 0
RealMatrixImpl.java,setSubMatrix,column,int,0,DEF,$ > 0
RealMatrixImpl.java,setSubMatrix,nRows,int,0,DEF,$ == 0
RealMatrixImpl.java,setSubMatrix,nCols,int,0,DEF,$ == 0
RealMatrixImpl.java,setSubMatrix,i,int,0,DEF,subMatrix[$].length != nCols
RealMatrixImpl.java,setSubMatrix,subMatrix,double[][],0,DEF,$[i].length != nCols
RealMatrixImpl.java,operate,v,double[],0,DEF,$.length != nCols
RealMatrixImpl.java,preMultiply,v,double[],0,DEF,$.length != nRows
LUDecompositionImpl.java,LUDecompositionImpl,sum,double,0,DEF,Math.abs($) > largest
LUDecompositionImpl.java,LUDecompositionImpl,col,int,0,RET,Math.abs(lu[max][$]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,max,int,0,RET,Math.abs(lu[$][col]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,lu,double[][],0,RET,Math.abs($[max][col]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,max,int,0,DEF,$ != col
LUDecompositionImpl.java,getL,cachedL,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,getU,cachedU,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,getP,cachedP,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
LUDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
LUDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
RealVectorFormat.java,format,i,int,0,DEF,$ > 0
RealVectorFormat.java,format,obj,null,0,RET,$ instanceof RealVector
RealVectorFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
RealVectorFormat.java,parse,component,Number,1,DEF,$ != null
Array2DRowRealMatrix.java,Array2DRowRealMatrix,d,double[][],0,NullPointerException,$ == null
Array2DRowRealMatrix.java,Array2DRowRealMatrix,nRows,int,0,DEF,$ == 0
Array2DRowRealMatrix.java,Array2DRowRealMatrix,nCols,int,0,DEF,$ == 0
Array2DRowRealMatrix.java,Array2DRowRealMatrix,r,int,0,DEF,d[$].length != nCols
Array2DRowRealMatrix.java,Array2DRowRealMatrix,d,double[][],0,DEF,$[r].length != nCols
Array2DRowRealMatrix.java,setSubMatrix,data,double[][],1,DEF,$ == null
Array2DRowRealMatrix.java,setSubMatrix,row,int,0,DEF,$ > 0
Array2DRowRealMatrix.java,setSubMatrix,column,int,0,DEF,$ > 0
Array2DRowRealMatrix.java,setSubMatrix,nRows,int,0,DEF,$ == 0
Array2DRowRealMatrix.java,setSubMatrix,nCols,int,0,DEF,$ == 0
Array2DRowRealMatrix.java,setSubMatrix,i,int,0,DEF,subMatrix[$].length != nCols
Array2DRowRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DEF,$[i].length != nCols
Array2DRowRealMatrix.java,operate,v,double[],0,DEF,$.length != nCols
Array2DRowRealMatrix.java,preMultiply,v,double[],0,DEF,$.length != nRows
AbstractRealMatrix.java,AbstractRealMatrix,rowDimension,int,0,DEF,$ <= 0
AbstractRealMatrix.java,AbstractRealMatrix,columnDimension,int,0,DEF,$ <= 0
AbstractRealMatrix.java,visit,row,int,0,DEF,$ == endRow
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$.length < rowsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$[0].length < columnsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$.length < selectedRows.length
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$[0].length < selectedColumns.length
AbstractRealMatrix.java,setSubMatrix,nRows,int,0,DEF,$ == 0
AbstractRealMatrix.java,setSubMatrix,nCols,int,0,DEF,$ == 0
AbstractRealMatrix.java,setSubMatrix,r,int,0,DEF,subMatrix[$].length != nCols
AbstractRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DEF,$[r].length != nCols
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getRowDimension() != 1
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getColumnDimension() != nCols
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getRowDimension() != nRows
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getColumnDimension() != 1
AbstractRealMatrix.java,setRowVector,vector,RealVector,0,InvalidMatrixException,$.getDimension() != nCols
AbstractRealMatrix.java,setColumnVector,vector,RealVector,0,InvalidMatrixException,$.getDimension() != nRows
AbstractRealMatrix.java,setRow,array,double[],0,InvalidMatrixException,$.length != nCols
AbstractRealMatrix.java,setColumn,array,double[],0,InvalidMatrixException,$.length != nRows
AbstractRealMatrix.java,inverse,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,isSingular,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractRealMatrix.java,operate,v,double[],0,DEF,$.length != nCols
AbstractRealMatrix.java,operate,v,RealVector,0,DEF,$.getDimension() != nCols
AbstractRealMatrix.java,preMultiply,v,double[],0,DEF,$.length != nRows
AbstractRealMatrix.java,preMultiply,v,RealVector,0,DEF,$.getDimension() != nRows
AbstractRealMatrix.java,solve,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,solve,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,luDecompose,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,toString,i,int,0,DEF,$ > 0
AbstractRealMatrix.java,toString,j,int,0,DEF,$ > 0
AbstractRealMatrix.java,equals,object,Object,0,RET,$ instanceof RealMatrix == false
AbstractRealMatrix.java,equals,object,null,0,RET,$ instanceof RealMatrix
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getColumnDimension() != nCols
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getRowDimension() != nRows
BlockRealMatrix.java,toBlocksLayout,length,int,0,DEF,$ != columns
BlockRealMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,setSubMatrix,refLength,int,0,DEF,$ < 1
BlockRealMatrix.java,setSubMatrix,subRow,double[],0,DEF,$.length != refLength
BlockRealMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
BlockRealMatrix.java,setRowMatrix,matrix,BlockRealMatrix,0,InvalidMatrixException,$.getRowDimension() != 1
BlockRealMatrix.java,setRowMatrix,matrix,BlockRealMatrix,0,InvalidMatrixException,$.getColumnDimension() != nCols
BlockRealMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
BlockRealMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
BlockRealMatrix.java,setColumnMatrix,matrix,BlockRealMatrix,0,InvalidMatrixException,$.getRowDimension() != nRows
BlockRealMatrix.java,setColumnMatrix,matrix,BlockRealMatrix,0,InvalidMatrixException,$.getColumnDimension() != 1
BlockRealMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
BlockRealMatrix.java,setRow,array,double[],0,InvalidMatrixException,$.length != nCols
BlockRealMatrix.java,setColumn,array,double[],0,InvalidMatrixException,$.length != nRows
BlockRealMatrix.java,operate,v,double[],0,DEF,$.length != columns
BlockRealMatrix.java,preMultiply,v,double[],0,DEF,$.length != rows
MatrixUtils.java,createRowFieldMatrix,nCols,int,0,DEF,$ == 0
MatrixUtils.java,createColumnFieldMatrix,nRows,int,0,DEF,$ == 0
MatrixUtils.java,checkRowIndex,row,int,0,MatrixIndexException,$ < 0
MatrixUtils.java,checkColumnIndex,column,int,0,MatrixIndexException,$ < 0
MatrixUtils.java,checkSubMatrixIndex,startRow,int,0,MatrixIndexException,$ > endRow
MatrixUtils.java,checkSubMatrixIndex,startColumn,int,0,MatrixIndexException,$ > endColumn
MatrixUtils.java,checkSubMatrixIndex,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
MatrixUtils.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
MatrixUtils.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length == 0
SingularValueDecompositionImpl.java,getU,cachedU,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getU,m,int,1,DEF,$ >= n
SingularValueDecompositionImpl.java,getUT,cachedUt,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getS,cachedS,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getV,cachedV,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getV,m,int,1,DEF,$ >= n
SingularValueDecompositionImpl.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getCovariance,dimension,int,0,DEF,$ == 0
SingularValueDecompositionImpl.java,getRank,singularValues,double[],0,RET,$[i] > threshold
SingularValueDecompositionImpl.java,getRank,i,int,0,RET,singularValues[$] > threshold
SingularValueDecompositionImpl.java,solve,b,double[],0,DEF,$.length != singularValues.length
SingularValueDecompositionImpl.java,solve,si,double,0,SingularMatrixException,$ == 0
SingularValueDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != singularValues.length
SingularValueDecompositionImpl.java,solve,si,double,0,SingularMatrixException,$ == 0
SingularValueDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != singularValues.length
SingularValueDecompositionImpl.java,solve,si,double,0,SingularMatrixException,$ == 0
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,lJI,double,0,NotSymmetricMatrixException,Math.abs(lIJ - $) > maxDelta
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,lIJ,double,0,NotSymmetricMatrixException,Math.abs($ - lJI) > maxDelta
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,ltI,double[],0,NotPositiveDefiniteMatrixException,$[i] < absolutePositivityThreshold
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,i,int,0,NotPositiveDefiniteMatrixException,ltI[$] < absolutePositivityThreshold
CholeskyDecompositionImpl.java,getL,cachedL,RealMatrix,0,DEF,$ == null
CholeskyDecompositionImpl.java,getLT,cachedLT,RealMatrix,0,DEF,$ == null
CholeskyDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
CholeskyDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
CholeskyDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
TriDiagonalTransformer.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,cachedQt,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,hK,double[],0,DEF,$[k] != 0.0
TriDiagonalTransformer.java,getQT,k,int,0,DEF,hK[$] != 0.0
TriDiagonalTransformer.java,getT,cachedT,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getT,i,int,0,DEF,$ > 0
TriDiagonalTransformer.java,transform,a,double,0,DEF,$ != 0.0
EigenDecompositionImpl.java,getV,cachedV,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getV,eigenvectors,ArrayRealVector[],0,DEF,$ == null
EigenDecompositionImpl.java,getD,cachedD,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getVT,eigenvectors,ArrayRealVector[],0,DEF,$ == null
EigenDecompositionImpl.java,getEigenvector,eigenvectors,ArrayRealVector[],0,DEF,$ == null
EigenDecompositionImpl.java,getSolver,eigenvectors,ArrayRealVector[],0,DEF,$ == null
EigenDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
EigenDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
EigenDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
EigenDecompositionImpl.java,isNonSingular,realEigenvalues,double[],0,RET,$[i] == 0
EigenDecompositionImpl.java,isNonSingular,i,int,0,RET,realEigenvalues[$] == 0
EigenDecompositionImpl.java,isNonSingular,imagEigenvalues,double[],0,RET,$[i] == 0
EigenDecompositionImpl.java,isNonSingular,i,int,0,RET,imagEigenvalues[$] == 0
EigenDecompositionImpl.java,computeSplits,secondary,double[],0,DEF,Math.abs($[i]) <= max
EigenDecompositionImpl.java,computeSplits,i,int,0,DEF,Math.abs(secondary[$]) <= max
EigenDecompositionImpl.java,process2RowsBlock,delta,double,0,InvalidMatrixException,$ < 0
EigenDecompositionImpl.java,process3RowsBlock,delta,double,0,InvalidMatrixException,$ >= 0
EigenDecompositionImpl.java,process3RowsBlock,z0,double,0,DEF,$ < z1
EigenDecompositionImpl.java,process3RowsBlock,z1,double,0,DEF,$ < z2
EigenDecompositionImpl.java,process3RowsBlock,z0,double,0,DEF,$ < z1
EigenDecompositionImpl.java,processGeneralBlock,sumOffDiag,double,0,RET,$ == 0
EigenDecompositionImpl.java,processGeneralBlock,work,double[],0,DEF,$[i + 2] <= 0
EigenDecompositionImpl.java,processGeneralBlock,i,int,0,DEF,work[$ + 2] <= 0
EigenDecompositionImpl.java,processGeneralBlock,k,int,0,MaxIterationsExceededException,$ >= maxIter
EigenDecompositionImpl.java,processGeneralBlock,pingPong,int,0,DEF,$ == 0
EigenDecompositionImpl.java,processGeneralBlock,n0,int,0,DEF,$ - i0 > 3
EigenDecompositionImpl.java,processGeneralBlock,i0,int,0,DEF,n0 - $ > 3
EigenDecompositionImpl.java,goodStep,start,int,0,RET,$ >= deflatedEnd
EigenDecompositionImpl.java,goodStep,s,double,1,DEF,$ <= t
EigenDecompositionImpl.java,goodStep,dMin,double,0,DEF,$ <= 0
EigenDecompositionImpl.java,goodStep,deflatedEnd,int,0,DEF,$ < end
EigenDecompositionImpl.java,goodStep,dMin,double,0,RET,$ < 0
EigenDecompositionImpl.java,goodStep,dMin,double,1,RET,$ >= 0
EigenDecompositionImpl.java,goodStep,dMin1,double,1,RET,$ > 0
EigenDecompositionImpl.java,goodStep,dMin,double,1,RET,$ < 0.0
EigenDecompositionImpl.java,goodStep,dMin1,double,1,RET,$ > 0.0
EigenDecompositionImpl.java,goodStep,dMin,double,1,DEF,$ < 0.0
EigenDecompositionImpl.java,goodStep,tType,int,1,DEF,$ < -22
EigenDecompositionImpl.java,goodStep,dMin1,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,eigenvaluesRange,range,double,0,DEF,$ < absoluteTolerance
EigenDecompositionImpl.java,eigenvaluesRange,middle,double,1,DEF,countEigenValues($, index, n) >= 1
EigenDecompositionImpl.java,eigenvaluesRange,index,int,1,DEF,countEigenValues(middle, $, n) >= 1
EigenDecompositionImpl.java,eigenvaluesRange,n,int,1,DEF,countEigenValues(middle, index, $) >= 1
EigenDecompositionImpl.java,eigenvaluesRange,range,double,0,DEF,$ < absoluteTolerance
EigenDecompositionImpl.java,eigenvaluesRange,middle,double,1,DEF,countEigenValues($, index, n) >= n
EigenDecompositionImpl.java,eigenvaluesRange,index,int,1,DEF,countEigenValues(middle, $, n) >= n
EigenDecompositionImpl.java,eigenvaluesRange,n,int,1,DEF,countEigenValues(middle, index, $) >= n
EigenDecompositionImpl.java,countEigenValues,ratio,double,0,DEF,$ <= 0
EigenDecompositionImpl.java,dqds,pingPong,int,1,DEF,$ == 0
EigenDecompositionImpl.java,dqd,pingPong,int,1,DEF,$ == 0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 2] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 2] == 0.0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 3] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 3] == 0.0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 2] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 2] == 0.0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 2] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 2] == 0.0
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,0,RET,$ <= 0.0
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,DEF,$ == dN
EigenDecompositionImpl.java,computeShiftIncrement,dMin1,double,1,DEF,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,gap1,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,computeShiftIncrement,gap1,double,1,DEF,$ > b1
EigenDecompositionImpl.java,computeShiftIncrement,dN,double,0,DEF,$ > b1
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,$ == 0.0
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,100 * Math.max($, b1) < a2
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * Math.max(b2, $) < a2
EigenDecompositionImpl.java,computeShiftIncrement,cnst1,double,0,DEF,$ < a2
EigenDecompositionImpl.java,computeShiftIncrement,a2,double,0,DEF,$ < cnst1
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN2
EigenDecompositionImpl.java,computeShiftIncrement,np,int,0,RET,work[$ - 8] > b2
EigenDecompositionImpl.java,computeShiftIncrement,work,double[],0,RET,$[np - 8] > b2
EigenDecompositionImpl.java,computeShiftIncrement,np,int,0,RET,work[$ - 4] > b1
EigenDecompositionImpl.java,computeShiftIncrement,work,double[],0,RET,$[np - 4] > b1
EigenDecompositionImpl.java,computeShiftIncrement,start,int,0,RET,end - $ > 2
EigenDecompositionImpl.java,computeShiftIncrement,end,int,0,RET,$ - start > 2
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,$ == 0.0
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,100 * Math.max($, b1) < a2
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * Math.max(b2, $) < a2
EigenDecompositionImpl.java,computeShiftIncrement,cnst1,double,0,DEF,$ < a2
EigenDecompositionImpl.java,computeShiftIncrement,a2,double,1,DEF,$ < cnst1
EigenDecompositionImpl.java,computeShiftIncrement,tType,int,1,DEF,$ == -6
EigenDecompositionImpl.java,computeShiftIncrement,tType,int,1,DEF,$ == -18
EigenDecompositionImpl.java,computeShiftIncrement,dMin1,double,1,RET,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,dMin2,double,1,RET,$ == dN2
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,RET,$ != 0.0
EigenDecompositionImpl.java,computeShiftIncrement,oldB1,double,0,DEF,100 * Math.max(b1, $) < b2
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * Math.max($, oldB1) < b2
EigenDecompositionImpl.java,computeShiftIncrement,gap2,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,computeShiftIncrement,dMin1,double,0,DEF,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,dMin2,double,1,RET,$ == dN2
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,RET,$ != 0.0
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * $ < b2
EigenDecompositionImpl.java,computeShiftIncrement,gap2,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,updateSigma,shift,double,1,DEF,$ < sigma
EigenDecompositionImpl.java,findEigenvector,absG,double,0,DEF,$ < minG
OpenMapRealMatrix.java,multiply,outValue,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,setEntry,value,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,addToEntry,value,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,multiplyEntry,value,double,1,DEF,$ == 0.0
SparseFieldVector.java,append,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,dotProduct,idx,int,0,DEF,$ < v.length
SparseFieldVector.java,getSubVector,key,int,0,DEF,$ >= index
SparseFieldVector.java,getSubVector,key,int,0,DEF,$ < end
SparseFieldVector.java,outerProduct,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,subtract,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
SparseFieldVector.java,add,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,equals,obj,Object,0,RET,$ == null
SparseFieldVector.java,equals,obj,null,0,RET,$ instanceof SparseFieldVector
SparseFieldVector.java,equals,field,Field<T>,1,RET,$ == null
SparseFieldVector.java,equals,other,SparseFieldVector<T>,0,RET,$.field != null
SparseFieldVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
AbstractFieldMatrix.java,AbstractFieldMatrix,rowDimension,int,0,DEF,$ <= 0
AbstractFieldMatrix.java,AbstractFieldMatrix,columnDimension,int,0,DEF,$ <= 0
AbstractFieldMatrix.java,extractField,d,T[][],0,DEF,$.length == 0
AbstractFieldMatrix.java,extractField,d,T[][],0,DEF,$[0].length == 0
AbstractFieldMatrix.java,extractField,d,T[],0,DEF,$.length == 0
AbstractFieldMatrix.java,buildArray,columns,int,0,RET,$ < 0
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,DEF,$.length < rowsCount
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,DEF,$[0].length < columnsCount
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,DEF,$.length < selectedRows.length
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,DEF,$[0].length < selectedColumns.length
AbstractFieldMatrix.java,setSubMatrix,nRows,int,0,DEF,$ == 0
AbstractFieldMatrix.java,setSubMatrix,nCols,int,0,DEF,$ == 0
AbstractFieldMatrix.java,setSubMatrix,r,int,0,DEF,subMatrix[$].length != nCols
AbstractFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,DEF,$[r].length != nCols
AbstractFieldMatrix.java,setRowMatrix,matrix,FieldMatrix<T>,0,InvalidMatrixException,$.getRowDimension() != 1
AbstractFieldMatrix.java,setRowMatrix,matrix,FieldMatrix<T>,0,InvalidMatrixException,$.getColumnDimension() != nCols
AbstractFieldMatrix.java,setColumnMatrix,matrix,FieldMatrix<T>,0,InvalidMatrixException,$.getRowDimension() != nRows
AbstractFieldMatrix.java,setColumnMatrix,matrix,FieldMatrix<T>,0,InvalidMatrixException,$.getColumnDimension() != 1
AbstractFieldMatrix.java,setRowVector,vector,FieldVector<T>,0,InvalidMatrixException,$.getDimension() != nCols
AbstractFieldMatrix.java,setColumnVector,vector,FieldVector<T>,0,InvalidMatrixException,$.getDimension() != nRows
AbstractFieldMatrix.java,setRow,array,T[],0,InvalidMatrixException,$.length != nCols
AbstractFieldMatrix.java,setColumn,array,T[],0,InvalidMatrixException,$.length != nRows
AbstractFieldMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractFieldMatrix.java,operate,v,T[],0,DEF,$.length != nCols
AbstractFieldMatrix.java,operate,v,FieldVector<T>,0,DEF,$.getDimension() != nCols
AbstractFieldMatrix.java,preMultiply,v,T[],0,DEF,$.length != nRows
AbstractFieldMatrix.java,preMultiply,v,FieldVector<T>,0,DEF,$.getDimension() != nRows
AbstractFieldMatrix.java,toString,i,int,0,DEF,$ > 0
AbstractFieldMatrix.java,toString,j,int,0,DEF,$ > 0
AbstractFieldMatrix.java,equals,object,Object,0,RET,$ instanceof FieldMatrix == false
AbstractFieldMatrix.java,equals,object,null,0,RET,$ instanceof FieldMatrix
AbstractFieldMatrix.java,equals,m,FieldMatrix<T>,0,RET,$.getColumnDimension() != nCols
AbstractFieldMatrix.java,equals,m,FieldMatrix<T>,0,RET,$.getRowDimension() != nRows
AbstractFieldMatrix.java,checkRowIndex,row,int,0,MatrixIndexException,$ < 0
AbstractFieldMatrix.java,checkColumnIndex,column,int,0,MatrixIndexException,$ < 0
AbstractFieldMatrix.java,checkSubMatrixIndex,startRow,int,0,MatrixIndexException,$ > endRow
AbstractFieldMatrix.java,checkSubMatrixIndex,startColumn,int,0,MatrixIndexException,$ > endColumn
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length == 0
BlockFieldMatrix.java,toBlocksLayout,length,int,0,DEF,$ != columns
BlockFieldMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,setSubMatrix,refLength,int,0,DEF,$ < 1
BlockFieldMatrix.java,setSubMatrix,subRow,T[],0,DEF,$.length != refLength
BlockFieldMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
BlockFieldMatrix.java,setRowMatrix,matrix,BlockFieldMatrix<T>,0,InvalidMatrixException,$.getRowDimension() != 1
BlockFieldMatrix.java,setRowMatrix,matrix,BlockFieldMatrix<T>,0,InvalidMatrixException,$.getColumnDimension() != nCols
BlockFieldMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
BlockFieldMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
BlockFieldMatrix.java,setColumnMatrix,matrix,BlockFieldMatrix<T>,0,InvalidMatrixException,$.getRowDimension() != nRows
BlockFieldMatrix.java,setColumnMatrix,matrix,BlockFieldMatrix<T>,0,InvalidMatrixException,$.getColumnDimension() != 1
BlockFieldMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
BlockFieldMatrix.java,setRow,array,T[],0,InvalidMatrixException,$.length != nCols
BlockFieldMatrix.java,setColumn,array,T[],0,InvalidMatrixException,$.length != nRows
BlockFieldMatrix.java,operate,v,T[],0,DEF,$.length != columns
BlockFieldMatrix.java,preMultiply,v,T[],0,DEF,$.length != rows
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,d,T[][],0,NullPointerException,$ == null
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,nRows,int,0,DEF,$ == 0
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,nCols,int,0,DEF,$ == 0
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,r,int,0,DEF,d[$].length != nCols
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,d,T[][],0,DEF,$[r].length != nCols
Array2DRowFieldMatrix.java,setSubMatrix,data,T[][],1,DEF,$ == null
Array2DRowFieldMatrix.java,setSubMatrix,row,int,0,DEF,$ > 0
Array2DRowFieldMatrix.java,setSubMatrix,column,int,0,DEF,$ > 0
Array2DRowFieldMatrix.java,setSubMatrix,nRows,int,0,DEF,$ == 0
Array2DRowFieldMatrix.java,setSubMatrix,nCols,int,0,DEF,$ == 0
Array2DRowFieldMatrix.java,setSubMatrix,i,int,0,DEF,subMatrix[$].length != nCols
Array2DRowFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,DEF,$[i].length != nCols
Array2DRowFieldMatrix.java,operate,v,T[],0,DEF,$.length != nCols
Array2DRowFieldMatrix.java,preMultiply,v,T[],0,DEF,$.length != nRows
BigMatrixImpl.java,BigMatrixImpl,rowDimension,int,0,DEF,$ <= 0
BigMatrixImpl.java,BigMatrixImpl,columnDimension,int,0,DEF,$ <= 0
BigMatrixImpl.java,BigMatrixImpl,d,BigDecimal[][],0,NullPointerException,$ == null
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,r,int,0,DEF,d[$].length != nCols
BigMatrixImpl.java,BigMatrixImpl,d,BigDecimal[][],0,DEF,$[r].length != nCols
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,d,double[][],0,DEF,$[row].length != nCols
BigMatrixImpl.java,BigMatrixImpl,row,int,0,DEF,d[$].length != nCols
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,d,String[][],0,DEF,$[row].length != nCols
BigMatrixImpl.java,BigMatrixImpl,row,int,0,DEF,d[$].length != nCols
BigMatrixImpl.java,getSubMatrix,startRow,int,0,MatrixIndexException,$ > endRow
BigMatrixImpl.java,getSubMatrix,startColumn,int,0,MatrixIndexException,$ > endColumn
BigMatrixImpl.java,getSubMatrix,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
BigMatrixImpl.java,getSubMatrix,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
BigMatrixImpl.java,getSubMatrix,selectedRows,int[],0,MatrixIndexException,$.length == 0
BigMatrixImpl.java,setSubMatrix,nRows,int,0,DEF,$ == 0
BigMatrixImpl.java,setSubMatrix,nCols,int,0,DEF,$ == 0
BigMatrixImpl.java,setSubMatrix,r,int,0,DEF,subMatrix[$].length != nCols
BigMatrixImpl.java,setSubMatrix,subMatrix,BigDecimal[][],0,DEF,$[r].length != nCols
BigMatrixImpl.java,setSubMatrix,data,BigDecimal[][],1,DEF,$ == null
BigMatrixImpl.java,setSubMatrix,row,int,0,DEF,$ > 0
BigMatrixImpl.java,setSubMatrix,column,int,0,DEF,$ > 0
BigMatrixImpl.java,isSingular,lu,BigDecimal[][],1,RET,$ == null
BigMatrixImpl.java,preMultiply,v,BigDecimal[],0,DEF,$.length != nRows
BigMatrixImpl.java,solve,b,BigDecimal[],0,DEF,$.length != nRows
BigMatrixImpl.java,luDecompose,nRows,int,0,NonSquareMatrixException,$ != nCols
BigMatrixImpl.java,luDecompose,largest,BigDecimal,0,DEF,sum.abs().compareTo($) == 1
BigMatrixImpl.java,luDecompose,sum,BigDecimal,0,DEF,$.abs().compareTo(largest) == 1
BigMatrixImpl.java,luDecompose,col,int,0,SingularMatrixException,lu[max][$].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,TOO_SMALL,BigDecimal,0,SingularMatrixException,lu[max][col].abs().compareTo($) <= 0
BigMatrixImpl.java,luDecompose,max,int,0,SingularMatrixException,lu[$][col].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,lu,BigDecimal[][],0,SingularMatrixException,$[max][col].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,max,int,0,DEF,$ != col
BigMatrixImpl.java,toString,data,BigDecimal[][],0,DEF,$ != null
BigMatrixImpl.java,toString,i,int,0,DEF,$ > 0
BigMatrixImpl.java,toString,j,int,0,DEF,$ > 0
BigMatrixImpl.java,equals,object,Object,0,RET,$ instanceof BigMatrixImpl == false
BigMatrixImpl.java,equals,object,null,0,RET,$ instanceof BigMatrixImpl
BigMatrixImpl.java,equals,m,BigMatrix,0,RET,$.getColumnDimension() != nCols
BigMatrixImpl.java,equals,m,BigMatrix,0,RET,$.getRowDimension() != nRows
BigMatrixImpl.java,getLUMatrix,lu,BigDecimal[][],0,DEF,$ == null
ArrayFieldVector.java,checkVectorDimensions,data,T[],0,DEF,$.length != n
ArrayFieldVector.java,equals,other,Object,0,RET,$ == null
ArrayFieldVector.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
ArrayRealVector.java,ArrayRealVector,d,double[],0,NullPointerException,$ == null
ArrayRealVector.java,ArrayRealVector,d,double[],0,DEF,$.length == 0
ArrayRealVector.java,unitVector,norm,double,0,DEF,$ == 0
ArrayRealVector.java,unitize,norm,double,0,DEF,$ == 0
ArrayRealVector.java,checkVectorDimensions,data,double[],0,DEF,$.length != n
ArrayRealVector.java,equals,other,Object,0,RET,$ == null
ArrayRealVector.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
BiDiagonalTransformer.java,BiDiagonalTransformer,m,int,1,DEF,$ >= n
BiDiagonalTransformer.java,getU,cachedU,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getU,hK,double[],0,DEF,$[k - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,k,int,0,DEF,hK[$ - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,hK[k - $] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getB,cachedB,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getB,m,int,1,DEF,$ < n
BiDiagonalTransformer.java,getB,i,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getV,cachedV,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getV,hK,double[],0,DEF,$[k] != 0.0
BiDiagonalTransformer.java,getV,k,int,0,DEF,hK[$] != 0.0
BiDiagonalTransformer.java,getV,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,b,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,b,double,0,DEF,$ != 0.0
OpenMapRealVector.java,add,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,append,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,dotProduct,idx,int,0,DEF,$ < v.length
OpenMapRealVector.java,getSubVector,key,int,0,DEF,$ >= index
OpenMapRealVector.java,getSubVector,key,int,0,DEF,$ < end
OpenMapRealVector.java,getDistance,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getL1Distance,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getLInfDistance,delta,double,0,DEF,$ > max
OpenMapRealVector.java,getLInfDistance,iter,Iterator,0,DEF,$.value() > max
OpenMapRealVector.java,getLInfDistance,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getLInfDistance,delta,double,0,DEF,$ > max
OpenMapRealVector.java,outerProduct,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,subtract,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
OpenMapRealVector.java,equals,obj,Object,0,RET,$ == null
OpenMapRealVector.java,equals,obj,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
FieldLUDecompositionImpl.java,FieldLUDecompositionImpl,nonZero,int,0,RET,$ >= m
FieldLUDecompositionImpl.java,FieldLUDecompositionImpl,nonZero,int,0,DEF,$ != col
FieldLUDecompositionImpl.java,getL,cachedL,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecompositionImpl.java,getU,cachedU,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecompositionImpl.java,getP,cachedP,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecompositionImpl.java,solve,b,T[],0,DEF,$.length != m
FieldLUDecompositionImpl.java,solve,b,FieldVector<T>,0,DEF,$.getDimension() != m
FieldLUDecompositionImpl.java,solve,b,FieldMatrix<T>,0,DEF,$.getRowDimension() != m
LevenbergMarquardtEstimator.java,estimate,dk,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,estimate,s,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,estimate,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtEstimator.java,estimate,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtEstimator.java,estimate,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,estimate,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,DEF,$ >= 1.0e-4
LevenbergMarquardtEstimator.java,estimate,actRed,double,0,RET,Math.abs($) <= costRelativeTolerance
LevenbergMarquardtEstimator.java,estimate,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtEstimator.java,estimate,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtEstimator.java,estimate,actRed,double,1,EstimationException,Math.abs($) <= 2.2204e-16
LevenbergMarquardtEstimator.java,estimate,preRed,double,1,EstimationException,$ <= 2.2204e-16
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,EstimationException,$ <= 2.0
LevenbergMarquardtEstimator.java,estimate,maxCosine,double,0,EstimationException,$ <= 2.2204e-16
LevenbergMarquardtEstimator.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtEstimator.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtEstimator.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtEstimator.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtEstimator.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtEstimator.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtEstimator.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtEstimator.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtEstimator.java,qrDecomposition,ak2,double,0,RET,$ == 0
AbstractEstimator.java,updateResidualsAndCost,costEvaluations,int,0,EstimationException,++$ > maxCostEval
AbstractEstimator.java,guessParametersErrors,m,int,0,EstimationException,$ <= p
MultiStartUnivariateRealOptimizer.java,getOptima,optima,double[],0,DEF,$ == null
MultiStartUnivariateRealOptimizer.java,getOptimaValues,optimaValues,double[],0,DEF,$ == null
MultiStartUnivariateRealOptimizer.java,optimize,goalType,GoalType,0,DEF,$ == GoalType.MAXIMIZE
MultiStartUnivariateRealOptimizer.java,optimize,currY,double,0,DEF,$ < prevY
MultiStartUnivariateRealOptimizer.java,optimize,i,int,1,DEF,$-- != 0
SimplexSolver.java,getPivotColumn,epsilon,double,0,DEF,MathUtils.compareTo(tableau.getEntry(0, i), minValue, $) < 0
SimplexSolver.java,getPivotColumn,tableau,SimplexTableau,0,DEF,MathUtils.compareTo($.getEntry(0, i), minValue, epsilon) < 0
SimplexSolver.java,getPivotColumn,minValue,double,0,DEF,MathUtils.compareTo(tableau.getEntry(0, i), $, epsilon) < 0
SimplexSolver.java,getPivotColumn,i,int,0,DEF,MathUtils.compareTo(tableau.getEntry(0, $), minValue, epsilon) < 0
SimplexSolver.java,getPivotRow,epsilon,double,0,DEF,MathUtils.compareTo(entry, 0, $) > 0
SimplexSolver.java,getPivotRow,entry,double,0,DEF,MathUtils.compareTo($, 0, epsilon) > 0
SimplexSolver.java,getPivotRow,ratio,double,0,DEF,$ < minRatio
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,1,RET,$.size() == 0
SimplexSolver.java,getPivotRow,minRatioPositions,List<Integer>,0,RET,$.size() > 1
SimplexSolver.java,doIteration,pivotRow,Integer,0,UnboundedSolutionException,$ == null
SimplexSolver.java,doIteration,i,int,0,DEF,$ != pivotRow
SimplexSolver.java,solvePhase1,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() == 0
SimplexTableau.java,createTableau,constraint,LinearConstraint,1,DEF,$.getRelationship() == Relationship.LEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.EQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,normalize,constraint,LinearConstraint,0,RET,$.getValue() < 0
SimplexTableau.java,getConstraintTypeCounts,constraint,LinearConstraint,0,DEF,$.getRelationship() == relationship
SimplexTableau.java,getBasicRow,row,Integer,1,DEF,$ == null
SimplexTableau.java,dropPhase1Objective,epsilon,double,0,DEF,MathUtils.compareTo(tableau.getEntry(0, i), 0, $) > 0
SimplexTableau.java,dropPhase1Objective,tableau,RealMatrix,0,DEF,MathUtils.compareTo($.getEntry(0, i), 0, epsilon) > 0
SimplexTableau.java,dropPhase1Objective,i,int,0,DEF,MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) > 0
SimplexTableau.java,dropPhase1Objective,col,int,0,DEF,getBasicRow($) == null
SimplexTableau.java,isOptimal,epsilon,double,0,RET,MathUtils.compareTo(tableau.getEntry(0, i), 0, $) < 0
SimplexTableau.java,isOptimal,tableau,RealMatrix,0,RET,MathUtils.compareTo($.getEntry(0, i), 0, epsilon) < 0
SimplexTableau.java,isOptimal,i,int,0,RET,MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) < 0
SimplexTableau.java,getSolution,colIndex,int,0,DEF,$ < 0
SimplexTableau.java,equals,other,Object,0,RET,$ == null
AbstractLinearOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
LinearObjectiveFunction.java,equals,other,Object,0,RET,$ == null
LinearConstraint.java,equals,other,Object,0,RET,$ == null
SimpleRealPointChecker.java,converged,difference,double,0,RET,$ > absoluteThreshold
SimpleVectorialValueChecker.java,converged,difference,double,0,RET,$ > absoluteThreshold
BrentOptimizer.java,localMin,goalType,GoalType,0,DEF,$ == GoalType.MAXIMIZE
BrentOptimizer.java,localMin,e,double,0,DEF,Math.abs($) > tol
BrentOptimizer.java,localMin,q,double,1,DEF,$ > 0
BrentOptimizer.java,localMin,a,double,0,DEF,(u - $) < t2
BrentOptimizer.java,localMin,u,double,0,DEF,($ - a) < t2
BrentOptimizer.java,localMin,b,double,0,DEF,($ - u) < t2
BrentOptimizer.java,localMin,u,double,0,DEF,(b - $) < t2
BrentOptimizer.java,localMin,goalType,GoalType,0,DEF,$ == GoalType.MAXIMIZE
BrentOptimizer.java,localMin,fu,double,1,DEF,$ <= fx
BrentOptimizer.java,localMin,u,double,1,DEF,$ < x
BrentOptimizer.java,localMin,u,double,1,DEF,$ < x
BrentOptimizer.java,localMin,fu,double,1,DEF,$ <= fw
BrentOptimizer.java,localMin,w,double,1,DEF,$ == x
BrentOptimizer.java,localMin,fu,double,0,DEF,$ <= fv
BrentOptimizer.java,localMin,v,double,0,DEF,$ == x
BrentOptimizer.java,localMin,v,double,0,DEF,$ == w
AbstractUnivariateRealOptimizer.java,computeObjectiveValue,evaluations,int,0,MaxEvaluationsExceededException,++$ > maxEvaluations
HarmonicFitter.java,fit,parameters,double[],0,OptimizationException,$ == null
HarmonicFitter.java,fit,observations,WeightedObservedPoint[],0,OptimizationException,$.length < 4
HarmonicCoefficientsGuesser.java,sortObservations,i,int,1,DEF,$-- != 0
HarmonicCoefficientsGuesser.java,guessAOmega,c1,double,0,OptimizationException,$ / c2 < 0.0
HarmonicCoefficientsGuesser.java,guessAOmega,c2,double,0,OptimizationException,c1 / $ < 0.0
HarmonicCoefficientsGuesser.java,guessAOmega,c3,double,0,OptimizationException,c2 / $ < 0.0
HarmonicCoefficientsGuesser.java,guessAOmega,c2,double,0,OptimizationException,$ / c3 < 0.0
MultiStartMultivariateRealOptimizer.java,getOptima,optima,RealPointValuePair[],0,DEF,$ == null
MultiStartMultivariateRealOptimizer.java,compare,o1,RealPointValuePair,1,RET,$ == null
MultiStartMultivariateRealOptimizer.java,compare,o2,RealPointValuePair,0,RET,$ == null
MultiStartMultivariateRealOptimizer.java,optimize,optima,RealPointValuePair[],0,OptimizationException,$[0] == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,getOptima,optima,VectorialPointValuePair[],0,DEF,$ == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,compare,o1,VectorialPointValuePair,1,RET,$ == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,compare,o2,VectorialPointValuePair,0,RET,$ == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,optimize,optima,VectorialPointValuePair[],0,OptimizationException,$[0] == null
LeastSquaresConverter.java,LeastSquaresConverter,observations,double[],0,DEF,$.length != weights.length
LeastSquaresConverter.java,value,residuals,double[],0,FunctionEvaluationException,$.length != observations.length
LeastSquaresConverter.java,value,weights,double[],1,DEF,$ != null
LeastSquaresConverter.java,value,scale,RealMatrix,1,DEF,$ != null
DirectSearchOptimizer.java,setStartConfiguration,j,int,0,DEF,steps[$] == 0.0
DirectSearchOptimizer.java,setStartConfiguration,steps,double[],0,DEF,$[j] == 0.0
DirectSearchOptimizer.java,setStartConfiguration,n,int,0,DEF,$ < 0
DirectSearchOptimizer.java,setStartConfiguration,refI,double[],0,DEF,$.length != n
DirectSearchOptimizer.java,setStartConfiguration,i,int,0,DEF,$ > 0
DirectSearchOptimizer.java,optimize,startConfiguration,double[][],0,DEF,$ == null
DirectSearchOptimizer.java,optimize,iterations,int,0,RET,$ > 0
DirectSearchOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
DirectSearchOptimizer.java,evaluate,evaluations,int,0,MaxEvaluationsExceededException,++$ > maxEvaluations
DirectSearchOptimizer.java,buildSimplex,n,int,0,DEF,$ != startConfiguration.length
DirectSearchOptimizer.java,replaceWorstPoint,comparator,Comparator<RealPointValuePair>,0,DEF,$.compare(simplex[i], pointValuePair) > 0
DirectSearchOptimizer.java,replaceWorstPoint,pointValuePair,RealPointValuePair,0,DEF,comparator.compare(simplex[i], $) > 0
DirectSearchOptimizer.java,replaceWorstPoint,simplex,RealPointValuePair[],0,DEF,comparator.compare($[i], pointValuePair) > 0
DirectSearchOptimizer.java,replaceWorstPoint,i,int,0,DEF,comparator.compare(simplex[$], pointValuePair) > 0
MultiDirectional.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(reflected, best) < 0
MultiDirectional.java,iterateSimplex,reflected,RealPointValuePair,0,RET,comparator.compare($, best) < 0
MultiDirectional.java,iterateSimplex,best,RealPointValuePair,0,RET,comparator.compare(reflected, $) < 0
MultiDirectional.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,DEF,$.compare(reflected, expanded) <= 0
MultiDirectional.java,iterateSimplex,expanded,RealPointValuePair,0,DEF,comparator.compare(reflected, $) <= 0
MultiDirectional.java,iterateSimplex,reflected,RealPointValuePair,0,DEF,comparator.compare($, expanded) <= 0
MultiDirectional.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(contracted, best) < 0
MultiDirectional.java,iterateSimplex,contracted,RealPointValuePair,0,RET,comparator.compare($, best) < 0
MultiDirectional.java,iterateSimplex,best,RealPointValuePair,0,RET,comparator.compare(contracted, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(best, reflected) <= 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare(best, $) <= 0
NelderMead.java,iterateSimplex,best,RealPointValuePair,1,DEF,comparator.compare($, reflected) <= 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(reflected, secondBest) < 0
NelderMead.java,iterateSimplex,secondBest,RealPointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare($, secondBest) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(reflected, best) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare($, best) < 0
NelderMead.java,iterateSimplex,best,RealPointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(expanded, reflected) < 0
NelderMead.java,iterateSimplex,expanded,RealPointValuePair,1,DEF,comparator.compare($, reflected) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare(expanded, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,RET,$.compare(reflected, worst) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,RET,comparator.compare($, worst) < 0
NelderMead.java,iterateSimplex,worst,RealPointValuePair,1,RET,comparator.compare(reflected, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(outContracted, reflected) <= 0
NelderMead.java,iterateSimplex,outContracted,RealPointValuePair,0,RET,comparator.compare($, reflected) <= 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,0,RET,comparator.compare(outContracted, $) <= 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(inContracted, worst) < 0
NelderMead.java,iterateSimplex,worst,RealPointValuePair,0,RET,comparator.compare(inContracted, $) < 0
NelderMead.java,iterateSimplex,inContracted,RealPointValuePair,0,RET,comparator.compare($, worst) < 0
NonLinearConjugateGradientOptimizer.java,setInitialStep,initialStep,double,1,DEF,$ <= 0
NonLinearConjugateGradientOptimizer.java,doOptimize,preconditioner,Preconditioner,0,DEF,$ == null
NonLinearConjugateGradientOptimizer.java,doOptimize,solver,UnivariateRealSolver,0,DEF,$ == null
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,previous,RealPointValuePair,0,RET,$ != null
NonLinearConjugateGradientOptimizer.java,doOptimize,goal,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,updateFormula,ConjugateGradientFormula,1,DEF,$ == ConjugateGradientFormula.FLETCHER_REEVES
NonLinearConjugateGradientOptimizer.java,doOptimize,n,int,1,DEF,getIterations() % $ == 0
NonLinearConjugateGradientOptimizer.java,doOptimize,beta,double,1,DEF,$ < 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yA,double,0,RET,$ * yB <= 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yB,double,0,RET,yA * $ <= 0
LevenbergMarquardtOptimizer.java,doOptimize,dk,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,s,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtOptimizer.java,doOptimize,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtOptimizer.java,doOptimize,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,DEF,$ >= 1.0e-4
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,0,RET,Math.abs($) <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,1,OptimizationException,Math.abs($) <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,1,OptimizationException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,OptimizationException,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,OptimizationException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtOptimizer.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtOptimizer.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtOptimizer.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtOptimizer.java,qrDecomposition,ak2,double,0,RET,$ == 0
AbstractScalarDifferentiableOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
AbstractScalarDifferentiableOptimizer.java,computeObjectiveValue,evaluations,int,0,MaxEvaluationsExceededException,++$ > maxEvaluations
AbstractLeastSquaresOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
AbstractLeastSquaresOptimizer.java,updateJacobian,jacobian,double[][],0,FunctionEvaluationException,$.length != rows
AbstractLeastSquaresOptimizer.java,updateResidualsAndCost,objectiveEvaluations,int,0,MaxEvaluationsExceededException,++$ > maxEvaluations
AbstractLeastSquaresOptimizer.java,updateResidualsAndCost,objective,double[],0,FunctionEvaluationException,$.length != rows
AbstractLeastSquaresOptimizer.java,guessParametersErrors,rows,int,0,OptimizationException,$ <= cols
AbstractLeastSquaresOptimizer.java,optimize,target,double[],0,OptimizationException,$.length != weights.length
GaussNewtonOptimizer.java,doOptimize,previous,VectorialPointValuePair,0,DEF,$ != null
MultiStartDifferentiableMultivariateRealOptimizer.java,getOptima,optima,RealPointValuePair[],0,DEF,$ == null
MultiStartDifferentiableMultivariateRealOptimizer.java,compare,o1,RealPointValuePair,1,RET,$ == null
MultiStartDifferentiableMultivariateRealOptimizer.java,compare,o2,RealPointValuePair,0,RET,$ == null
MultiStartDifferentiableMultivariateRealOptimizer.java,optimize,optima,RealPointValuePair[],0,OptimizationException,$[0] == null
SimpleVectorialPointChecker.java,converged,difference,double,0,RET,$ > absoluteThreshold
Beta.java,regularizedBeta,x,double,1,DEF,$ < 0
Beta.java,regularizedBeta,x,double,1,DEF,$ > 1
Beta.java,regularizedBeta,a,double,1,DEF,$ <= 0.0
Beta.java,regularizedBeta,b,double,1,DEF,$ <= 0.0
Beta.java,getB,n,int,1,DEF,$ % 2 == 0
Beta.java,logBeta,a,double,1,DEF,$ <= 0.0
Beta.java,logBeta,b,double,1,DEF,$ <= 0.0
Gamma.java,logGamma,x,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ >= 1.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ > a
Gamma.java,regularizedGammaP,n,double,1,MaxIterationsExceededException,$ >= maxIterations
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < a
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ < 1.0
Gamma.java,digamma,x,double,0,RET,$ > 0
Gamma.java,digamma,x,double,0,RET,$ <= S_LIMIT
Gamma.java,digamma,x,double,0,RET,$ >= C_LIMIT
Gamma.java,trigamma,x,double,0,RET,$ > 0
Gamma.java,trigamma,x,double,0,RET,$ <= S_LIMIT
Gamma.java,trigamma,x,double,0,RET,$ >= C_LIMIT
Erf.java,erf,x,double,0,DEF,$ < 0
Vector3DFormat.java,format,obj,null,0,RET,$ instanceof Vector3D
Vector3DFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
Vector3DFormat.java,parse,x,Number,0,RET,$ == null
Vector3DFormat.java,parse,y,Number,0,RET,$ == null
Vector3DFormat.java,parse,z,Number,0,RET,$ == null
Vector3D.java,normalize,s,double,0,DEF,$ == 0
Vector3D.java,orthogonal,threshold,double,0,DEF,$ == 0
Vector3D.java,orthogonal,x,double,1,RET,$ >= -threshold
Vector3D.java,orthogonal,x,double,1,RET,$ <= threshold
Vector3D.java,orthogonal,y,double,0,RET,$ >= -threshold
Vector3D.java,orthogonal,y,double,0,RET,$ <= threshold
Vector3D.java,angle,normProduct,double,0,DEF,$ == 0
Vector3D.java,angle,dot,double,0,RET,$ < -threshold
Vector3D.java,angle,dot,double,0,RET,$ > threshold
Vector3D.java,angle,dot,double,0,RET,$ >= 0
Vector3D.java,equals,other,Object,0,RET,$ == null
Rotation.java,Rotation,norm,double,0,DEF,$ == 0
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$.length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[0].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[1].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[2].length != 3
Rotation.java,Rotation,det,double,0,NotARotationMatrixException,$ < 0.0
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,u1u1,double,0,DEF,$ == 0
Rotation.java,Rotation,u2u2,double,0,DEF,$ == 0
Rotation.java,Rotation,v1v1,double,0,DEF,$ == 0
Rotation.java,Rotation,v2v2,double,0,DEF,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,normProduct,double,0,DEF,$ == 0
Rotation.java,getAxis,squaredSine,double,1,RET,$ == 0
Rotation.java,getAxis,q0,double,0,RET,$ < 0
Rotation.java,getAngle,q0,double,1,RET,$ < -0.1
Rotation.java,getAngle,q0,double,1,RET,$ > 0.1
Rotation.java,getAngle,q0,double,0,RET,$ < 0
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,orthogonalizeMatrix,fn1,double,0,RET,Math.abs($ - fn) <= threshold
Rotation.java,orthogonalizeMatrix,fn,double,0,RET,Math.abs(fn1 - $) <= threshold
ValueServer.java,resetReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,closeReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,DEF,$ == null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,DEF,$.getBinStats().size() == 0
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,$ == null
ValueServer.java,getNextReplay,str,String,0,DEF,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,(str = $.readLine()) == null
ValueServer.java,getNextReplay,str,String,0,DEF,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,(str = $.readLine()) == null
BitsStreamGenerator.java,nextInt,n,int,0,DEF,$ < 1
BitsStreamGenerator.java,nextInt,random,int,0,RET,$ < n
UncorrelatedRandomVectorGenerator.java,UncorrelatedRandomVectorGenerator,mean,double[],0,DEF,$.length != standardDeviation.length
EmpiricalDistributionImpl.java,load,sampleStats,SummaryStatistics,0,DEF,$.getN() == 0
EmpiricalDistributionImpl.java,getAdapter,in,null,1,RET,$ instanceof BufferedReader
EmpiricalDistributionImpl.java,getAdapter,in,null,1,RET,$ instanceof double[]
EmpiricalDistributionImpl.java,getNextValue,stats,SummaryStatistics,0,RET,$.getN() > 0
EmpiricalDistributionImpl.java,getNextValue,stats,SummaryStatistics,1,RET,$.getStandardDeviation() > 0
RandomDataImpl.java,nextHexString,len,int,0,DEF,$ <= 0
RandomDataImpl.java,nextHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextInt,lower,int,0,DEF,$ >= upper
RandomDataImpl.java,nextLong,lower,long,0,DEF,$ >= upper
RandomDataImpl.java,nextSecureHexString,len,int,0,DEF,$ <= 0
RandomDataImpl.java,nextSecureHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextSecureInt,lower,int,0,DEF,$ >= upper
RandomDataImpl.java,nextSecureLong,lower,long,0,DEF,$ >= upper
RandomDataImpl.java,nextPoisson,mean,double,0,DEF,$ <= 0
RandomDataImpl.java,nextPoisson,mean,double,1,RET,$ < pivot
RandomDataImpl.java,nextPoisson,r,double,1,DEF,$ >= p
RandomDataImpl.java,nextPoisson,u,double,1,DEF,$ <= p1
RandomDataImpl.java,nextPoisson,x,double,0,DEF,$ > delta
RandomDataImpl.java,nextPoisson,x,double,0,DEF,$ < -lambda
RandomDataImpl.java,nextPoisson,v,double,0,DEF,$ < -t
RandomDataImpl.java,nextPoisson,a,int,0,DEF,$ == 0
RandomDataImpl.java,nextPoisson,v,double,0,DEF,$ < qa
RandomDataImpl.java,nextPoisson,v,double,0,DEF,$ > qr
RandomDataImpl.java,nextGaussian,sigma,double,0,DEF,$ <= 0
RandomDataImpl.java,nextExponential,mean,double,0,DEF,$ <= 0.0
RandomDataImpl.java,nextUniform,lower,double,0,DEF,$ >= upper
RandomDataImpl.java,getRan,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,getSecRan,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,nextPermutation,k,int,0,DEF,$ > n
RandomDataImpl.java,nextPermutation,k,int,0,DEF,$ == 0
RandomDataImpl.java,nextSample,k,int,0,DEF,$ > len
RandomDataImpl.java,nextSample,k,int,0,DEF,$ <= 0
RandomDataImpl.java,shuffle,i,int,1,DEF,$ == 0
MersenneTwister.java,setSeed,seed,int[],0,RET,$ == null
MersenneTwister.java,setSeed,i,int,0,DEF,$ >= N
MersenneTwister.java,setSeed,j,int,0,DEF,$ >= seed.length
MersenneTwister.java,setSeed,i,int,0,DEF,$ >= N
MersenneTwister.java,next,mti,int,0,DEF,$ >= N
CorrelatedRandomVectorGenerator.java,CorrelatedRandomVectorGenerator,mean,double[],0,DimensionMismatchException,$.length != order
CorrelatedRandomVectorGenerator.java,decompose,swap,int[],0,DEF,$[rank] != rank
CorrelatedRandomVectorGenerator.java,decompose,rank,int,0,DEF,swap[$] != rank
CorrelatedRandomVectorGenerator.java,decompose,c,double[][],1,NotPositiveDefiniteMatrixException,$[ir][ir] < small
CorrelatedRandomVectorGenerator.java,decompose,ir,int,1,NotPositiveDefiniteMatrixException,c[$][$] < small
CorrelatedRandomVectorGenerator.java,decompose,rank,int,0,NotPositiveDefiniteMatrixException,$ == 0
CorrelatedRandomVectorGenerator.java,decompose,c,double[][],0,NotPositiveDefiniteMatrixException,$[index[i]][index[i]] < -small
CorrelatedRandomVectorGenerator.java,decompose,index,int[],0,NotPositiveDefiniteMatrixException,c[$[i]][$[i]] < -small
CorrelatedRandomVectorGenerator.java,decompose,i,int,0,NotPositiveDefiniteMatrixException,c[index[$]][index[$]] < -small
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
AbstractRandomGenerator.java,nextBytes,i,int,0,DEF,$ > 0
AbstractRandomGenerator.java,nextBytes,bytesOut,int,0,RET,$ == bytes.length
AbstractRandomGenerator.java,nextInt,n,int,0,DEF,$ <= 0
AbstractRandomGenerator.java,nextGaussian,s,double,0,DEF,$ != 0
BisectionSolver.java,solve,fm,double,1,DEF,$ * fmin > 0.0
BisectionSolver.java,solve,fmin,double,1,DEF,fm * $ > 0.0
BisectionSolver.java,solve,min,double,0,RET,Math.abs(max - $) <= absoluteAccuracy
BisectionSolver.java,solve,max,double,0,RET,Math.abs($ - min) <= absoluteAccuracy
SecantSolver.java,solve,y0,double,0,DEF,$ * y1 >= 0
SecantSolver.java,solve,y1,double,0,DEF,y0 * $ >= 0
SecantSolver.java,solve,y1,double,0,RET,Math.abs($) <= functionValueAccuracy
SecantSolver.java,solve,oldDelta,double,0,DEF,delta / $ > 1
SecantSolver.java,solve,delta,double,0,DEF,$ / oldDelta > 1
SecantSolver.java,solve,y1,double,0,DEF,$ > 0
SecantSolver.java,solve,y2,double,0,DEF,$ > 0
LaguerreSolver.java,LaguerreSolver,f,null,1,DEF,$ instanceof PolynomialFunction
LaguerreSolver.java,solve,min,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
LaguerreSolver.java,solve,max,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
LaguerreSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
LaguerreSolver.java,solve,f,null,0,DEF,$ instanceof PolynomialFunction
LaguerreSolver.java,solve,min,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
LaguerreSolver.java,solve,max,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
LaguerreSolver.java,solveAll,n,int,0,DEF,$ < 1
LaguerreSolver.java,solve,n,int,0,DEF,$ < 1
LaguerreSolver.java,solve,oldz,Complex,0,RET,(z.subtract($)).abs() <= tolerance
LaguerreSolver.java,solve,z,Complex,0,RET,($.subtract(oldz)).abs() <= tolerance
LaguerreSolver.java,solve,pv,Complex,0,RET,$.abs() <= functionValueAccuracy
NewtonSolver.java,solve,x0,double,0,RET,Math.abs(x1 - $) <= absoluteAccuracy
NewtonSolver.java,solve,x1,double,0,RET,Math.abs($ - x0) <= absoluteAccuracy
UnivariateRealSolverImpl.java,UnivariateRealSolverImpl,f,UnivariateRealFunction,0,DEF,$ == null
UnivariateRealSolverImpl.java,verifyInterval,lower,double,0,DEF,$ >= upper
UnivariateRealSolverUtils.java,bracket,function,UnivariateRealFunction,0,DEF,$ == null
UnivariateRealSolverUtils.java,bracket,maximumIterations,int,0,DEF,$ <= 0
UnivariateRealSolverUtils.java,bracket,initial,double,0,DEF,$ < lowerBound
UnivariateRealSolverUtils.java,bracket,initial,double,0,DEF,$ > upperBound
UnivariateRealSolverUtils.java,bracket,lowerBound,double,0,DEF,$ >= upperBound
UnivariateRealSolverUtils.java,bracket,fa,double,0,ConvergenceException,$ * fb > 0.0
UnivariateRealSolverUtils.java,bracket,fb,double,0,ConvergenceException,fa * $ > 0.0
UnivariateRealSolverUtils.java,setup,f,UnivariateRealFunction,0,DEF,$ == null
MullerSolver.java,solve,min,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
MullerSolver.java,solve,max,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
MullerSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
MullerSolver.java,solve,y0,double,0,RET,$ == 0.0
MullerSolver.java,solve,y2,double,0,RET,$ == 0.0
MullerSolver.java,solve,oldx,double,0,RET,Math.abs(x - $) <= tolerance
MullerSolver.java,solve,x,double,0,RET,Math.abs($ - oldx) <= tolerance
MullerSolver.java,solve,y,double,0,RET,Math.abs($) <= functionValueAccuracy
MullerSolver.java,solve,ym,double,1,DEF,MathUtils.sign(y0) + MathUtils.sign($) == 0.0
MullerSolver.java,solve,y0,double,1,DEF,MathUtils.sign($) + MathUtils.sign(ym) == 0.0
MullerSolver.java,solve2,y0,double,0,RET,$ == 0.0
MullerSolver.java,solve2,y1,double,0,RET,$ == 0.0
MullerSolver.java,solve2,delta,double,1,DEF,$ >= 0.0
MullerSolver.java,solve2,denominator,double,1,DEF,$ != 0
MullerSolver.java,solve2,oldx,double,0,RET,Math.abs(x - $) <= tolerance
MullerSolver.java,solve2,x,double,0,RET,Math.abs($ - oldx) <= tolerance
MullerSolver.java,solve2,y,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yInitial,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMin,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMin,double,0,RET,yInitial * $ < 0
BrentSolver.java,solve,yInitial,double,0,RET,$ * yMin < 0
BrentSolver.java,solve,yMax,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yInitial,double,0,RET,$ * yMax < 0
BrentSolver.java,solve,yMax,double,0,RET,yInitial * $ < 0
BrentSolver.java,solve,sign,double,1,DEF,$ > 0
BrentSolver.java,solve,yMin,double,1,DEF,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMax,double,1,DEF,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,sign,double,1,DEF,$ < 0
BrentSolver.java,solve,yMin,double,1,DEF,$ == 0.0
BrentSolver.java,solve,y1,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,dx,double,0,RET,Math.abs($) <= tolerance
BrentSolver.java,solve,oldDelta,double,1,DEF,Math.abs($) < tolerance
BrentSolver.java,solve,x0,double,1,DEF,$ == x2
BrentSolver.java,solve,p,double,1,DEF,$ > 0.0
BrentSolver.java,solve,delta,double,1,DEF,Math.abs($) > tolerance
BrentSolver.java,solve,dx,double,1,DEF,$ > 0.0
BrentSolver.java,solve,dx,double,0,DEF,$ <= 0.0
BrentSolver.java,solve,y1,double,0,DEF,$ > 0
BrentSolver.java,solve,y2,double,0,DEF,$ > 0
RiddersSolver.java,solve,min,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
RiddersSolver.java,solve,max,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
RiddersSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
RiddersSolver.java,solve,y1,double,0,RET,$ == 0.0
RiddersSolver.java,solve,y2,double,0,RET,$ == 0.0
RiddersSolver.java,solve,y3,double,0,RET,Math.abs($) <= functionValueAccuracy
RiddersSolver.java,solve,oldx,double,0,RET,Math.abs(x - $) <= tolerance
RiddersSolver.java,solve,x,double,0,RET,Math.abs($ - oldx) <= tolerance
RiddersSolver.java,solve,y,double,0,RET,Math.abs($) <= functionValueAccuracy
RiddersSolver.java,solve,correction,double,1,DEF,$ > 0.0
RiddersSolver.java,solve,y1,double,1,DEF,MathUtils.sign($) + MathUtils.sign(y) == 0.0
RiddersSolver.java,solve,y,double,1,DEF,MathUtils.sign(y1) + MathUtils.sign($) == 0.0
RiddersSolver.java,solve,y2,double,1,DEF,MathUtils.sign($) + MathUtils.sign(y) == 0.0
RiddersSolver.java,solve,y,double,1,DEF,MathUtils.sign(y2) + MathUtils.sign($) == 0.0
PolynomialFunctionLagrangeForm.java,evaluate,dist,double,0,DEF,$ < min_dist
PolynomialFunctionLagrangeForm.java,evaluate,divider,double,0,DuplicateSampleAbscissaException,$ == 0.0
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != j
PolynomialFunctionLagrangeForm.java,computeCoefficients,d,double,0,DEF,$ == 0.0
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != k
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,DEF,$.length != y.length
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,DEF,$.length < 2
PolynomialFunctionNewtonForm.java,verifyInputArray,a,double[],0,DEF,$.length < 1
PolynomialFunctionNewtonForm.java,verifyInputArray,c,double[],0,DEF,$.length < 1
PolynomialsUtils.java,buildPolynomial,degree,int,0,DEF,$ > maxDegree
PolynomialFunction.java,PolynomialFunction,c,double[],0,DEF,$.length < 1
PolynomialFunction.java,evaluate,n,int,0,DEF,$ < 1
PolynomialFunction.java,subtract,coefficients,double[],1,DEF,$.length < p.coefficients.length
PolynomialFunction.java,differentiate,n,int,0,DEF,$ < 1
PolynomialFunction.java,differentiate,n,int,0,RET,$ == 1
PolynomialFunction.java,toString,coefficients,double[],1,RET,$[0] == 0.0
PolynomialFunction.java,toString,coefficients,double[],0,RET,$.length == 1
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] != 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] != 0
PolynomialFunction.java,toString,s,StringBuffer,1,DEF,$.length() > 0
PolynomialFunction.java,toString,coefficients,double[],1,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,1,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,absAi,double,0,DEF,($ - 1) != 0
PolynomialFunction.java,toString,i,int,0,DEF,$ > 1
PolynomialFunction.java,equals,obj,Object,0,RET,$ == null
PolynomialFunction.java,equals,obj,null,0,RET,$ instanceof PolynomialFunction
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,DEF,$.length < 2
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,DEF,$.length - 1 != polynomials.length
PolynomialSplineFunction.java,value,i,int,0,DEF,$ < 0
PolynomialSplineFunction.java,value,i,int,0,DEF,$ >= polynomials.length
LoessInterpolator.java,LoessInterpolator,bandwidth,double,0,MathException,$ < 0
LoessInterpolator.java,LoessInterpolator,bandwidth,double,0,MathException,$ > 1
LoessInterpolator.java,LoessInterpolator,robustnessIters,int,0,MathException,$ < 0
LoessInterpolator.java,smooth,xval,double[],0,MathException,$.length != yval.length
LoessInterpolator.java,smooth,n,int,0,MathException,$ == 0
LoessInterpolator.java,smooth,n,int,0,RET,$ == 1
LoessInterpolator.java,smooth,n,int,0,RET,$ == 2
LoessInterpolator.java,smooth,bandwidthInPoints,int,0,MathException,$ < 2
LoessInterpolator.java,smooth,i,int,0,DEF,$ > 0
LoessInterpolator.java,smooth,meanXSquared,double,1,DEF,Math.sqrt(Math.abs($ - meanX * meanX)) < accuracy
LoessInterpolator.java,smooth,meanX,double,1,DEF,Math.sqrt(Math.abs(meanXSquared - $ * $)) < accuracy
LoessInterpolator.java,smooth,iter,int,0,DEF,$ == robustnessIters
LoessInterpolator.java,smooth,medianResidual,double,0,DEF,Math.abs($) < accuracy
LoessInterpolator.java,smooth,arg,double,1,DEF,$ >= 1
LoessInterpolator.java,checkStrictlyIncreasing,i,int,0,MathException,$ >= 1
DividedDifferenceInterpolator.java,computeDividedDifference,denominator,double,0,DuplicateSampleAbscissaException,$ == 0.0
SplineInterpolator.java,interpolate,x,double[],0,DEF,$.length != y.length
SplineInterpolator.java,interpolate,x,double[],0,DEF,$.length < 3
MicrosphereInterpolator.java,setBrightnessExponent,brightnessExponent,int,0,DEF,$ < 0
MicrosphereInterpolator.java,setMicropshereElements,microsphereElements,int,0,DEF,$ < 0
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,DEF,$.length == 0
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,DEF,$[0] == null
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xval,double[][],0,DimensionMismatchException,$.length != yval.length
MicrosphereInterpolatingFunction.java,MicrosphereInterpolatingFunction,xvalI,double[],0,DimensionMismatchException,$.length != dimension
MicrosphereInterpolatingFunction.java,value,sd,Entry<RealVector,Double>,0,DEF,$ != null
LegendreGaussIntegrator.java,integrate,i,int,0,RET,$ + 1 >= minimalIterationCount
LegendreGaussIntegrator.java,integrate,delta,double,0,RET,$ <= limit
TrapezoidIntegrator.java,stage,n,int,1,RET,$ == 0
TrapezoidIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
TrapezoidIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
TrapezoidIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
TrapezoidIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 64
UnivariateRealIntegratorImpl.java,UnivariateRealIntegratorImpl,f,UnivariateRealFunction,0,DEF,$ == null
UnivariateRealIntegratorImpl.java,verifyInterval,lower,double,0,DEF,$ >= upper
UnivariateRealIntegratorImpl.java,verifyIterationCount,minimalIterationCount,int,0,DEF,$ <= 0
UnivariateRealIntegratorImpl.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ <= minimalIterationCount
SimpsonIntegrator.java,integrate,minimalIterationCount,int,0,RET,$ == 1
SimpsonIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
SimpsonIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
SimpsonIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
SimpsonIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 64
RombergIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
RombergIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
RombergIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
RombergIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 32
ComplexFormat.java,format,im,double,1,DEF,$ < 0.0
ComplexFormat.java,format,im,double,0,DEF,$ > 0.0
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Complex
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Number
ComplexFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
ComplexFormat.java,parse,re,Number,0,RET,$ == null
ComplexFormat.java,parse,im,Number,0,RET,$ == null
ComplexFormat.java,setImaginaryCharacter,imaginaryCharacter,String,0,DEF,$ == null
ComplexFormat.java,setImaginaryCharacter,imaginaryCharacter,String,0,DEF,$.length() == 0
ComplexFormat.java,setImaginaryFormat,imaginaryFormat,NumberFormat,0,DEF,$ == null
ComplexFormat.java,setRealFormat,realFormat,NumberFormat,0,DEF,$ == null
Complex.java,abs,imaginary,double,0,RET,$ == 0.0
Complex.java,abs,real,double,0,RET,$ == 0.0
Complex.java,divide,c,double,0,RET,$ == 0.0
Complex.java,divide,d,double,0,RET,$ == 0.0
Complex.java,equals,other,Object,1,DEF,$ == null
Complex.java,pow,x,Complex,0,NullPointerException,$ == null
Complex.java,sqrt,real,double,0,RET,$ == 0.0
Complex.java,sqrt,imaginary,double,0,RET,$ == 0.0
Complex.java,sqrt,real,double,1,RET,$ >= 0.0
Complex.java,nthRoot,n,int,0,DEF,$ <= 0
ComplexUtils.java,polar2Complex,r,double,0,DEF,$ < 0
DescriptiveStatistics.java,addValue,windowSize,int,1,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ < 1
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,getPercentile,percentileImpl,null,1,DEF,$ instanceof Percentile
AbstractStorelessUnivariateStatistic.java,evaluate,values,double[],0,DEF,$ == null
AbstractStorelessUnivariateStatistic.java,incrementAll,values,double[],0,DEF,$ == null
AbstractStorelessUnivariateStatistic.java,equals,object,Object,0,RET,$ instanceof AbstractStorelessUnivariateStatistic == false
AbstractStorelessUnivariateStatistic.java,equals,object,null,0,RET,$ instanceof AbstractStorelessUnivariateStatistic
StatisticalSummaryValues.java,equals,object,Object,0,RET,$ instanceof StatisticalSummaryValues == false
StatisticalSummaryValues.java,equals,object,null,0,RET,$ instanceof StatisticalSummaryValues
FirstMoment.java,increment,n,long,0,DEF,$ == 0
GeometricMean.java,getResult,sumOfLogs,StorelessUnivariateStatistic,1,RET,$.getN() > 0
ThirdMoment.java,increment,n,long,0,DEF,$ < 1
Kurtosis.java,getResult,moment,FourthMoment,0,DEF,$.getN() > 3
Kurtosis.java,getResult,moment,FirstMoment,1,DEF,$.n <= 3
Kurtosis.java,getResult,variance,double,1,DEF,$ < 10E-20
Kurtosis.java,evaluate,length,int,0,DEF,$ > 3
Skewness.java,getResult,moment,FirstMoment,0,RET,$.n < 3
Skewness.java,getResult,variance,double,1,RET,$ < 10E-20
Skewness.java,evaluate,length,int,0,DEF,$ > 2
FourthMoment.java,increment,n,long,0,DEF,$ < 1
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 0
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 1
Variance.java,evaluate,values,double[],0,DEF,$ == null
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
VectorialCovariance.java,increment,v,double[],0,DimensionMismatchException,$.length != sums.length
VectorialCovariance.java,getResult,n,long,0,DEF,$ > 1
VectorialCovariance.java,equals,obj,Object,0,RET,$ == null
VectorialCovariance.java,equals,obj,null,0,RET,$ instanceof VectorialCovariance
VectorialCovariance.java,equals,isBiasCorrected,boolean,0,RET,$ != other.isBiasCorrected
VectorialCovariance.java,equals,n,long,0,RET,$ != other.n
SecondMoment.java,increment,n,long,0,DEF,$ < 1
VectorialMean.java,increment,v,double[],0,DimensionMismatchException,$.length != means.length
VectorialMean.java,equals,obj,Object,0,RET,$ == null
VectorialMean.java,equals,obj,null,0,RET,$ instanceof VectorialMean
Percentile.java,evaluate,p,double,0,DEF,$ > 100
Percentile.java,evaluate,p,double,0,DEF,$ <= 0
Percentile.java,evaluate,length,int,0,RET,$ == 0
Percentile.java,evaluate,length,int,0,RET,$ == 1
Percentile.java,evaluate,pos,double,0,RET,$ < 1
Percentile.java,evaluate,pos,double,0,RET,$ >= n
Percentile.java,setQuantile,p,double,0,DEF,$ <= 0
Percentile.java,setQuantile,p,double,0,DEF,$ > 100
Max.java,increment,d,double,0,DEF,$ > value
Min.java,increment,d,double,0,DEF,$ < value
AbstractUnivariateStatistic.java,test,values,double[],0,DEF,$ == null
AbstractUnivariateStatistic.java,test,begin,int,0,DEF,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,DEF,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,DEF,begin + $ > values.length
AbstractUnivariateStatistic.java,test,begin,int,0,DEF,$ + length > values.length
AbstractUnivariateStatistic.java,test,length,int,0,RET,$ == 0
AbstractUnivariateStatistic.java,test,weights,double[],0,DEF,$ == null
AbstractUnivariateStatistic.java,test,weights,double[],0,DEF,$.length != values.length
AbstractUnivariateStatistic.java,test,i,int,0,DEF,weights[$] < 0
AbstractUnivariateStatistic.java,test,weights,double[],0,DEF,$[i] < 0
AbstractUnivariateStatistic.java,test,i,int,0,DEF,weights[$] > 0.0
AbstractUnivariateStatistic.java,test,weights,double[],0,DEF,$[i] > 0.0
MultivariateSummaryStatistics.java,append,i,int,0,DEF,$ > 0
MultivariateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof MultivariateSummaryStatistics == false
MultivariateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof MultivariateSummaryStatistics
MultivariateSummaryStatistics.java,checkEmpty,n,long,0,DEF,$ > 0
MultivariateSummaryStatistics.java,checkDimension,dimension,int,0,DimensionMismatchException,$ != k
AggregateSummaryStatistics.java,aggregate,statistics,Collection<SummaryStatistics>,0,RET,$ == null
AggregateSummaryStatistics.java,aggregate,current,SummaryStatistics,0,DEF,$.getMin() < min
AggregateSummaryStatistics.java,aggregate,current,SummaryStatistics,0,DEF,$.getMax() > max
AggregateSummaryStatistics.java,aggregate,n,long,1,DEF,$ == 0
AggregateSummaryStatistics.java,aggregate,n,long,1,DEF,$ == 1
AggregateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof AggregatingSummaryStatistics == false
AggregateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof AggregatingSummaryStatistics
SummaryStatistics.java,addValue,meanImpl,null,0,DEF,$ instanceof Mean
SummaryStatistics.java,addValue,varianceImpl,null,0,DEF,$ instanceof Variance
SummaryStatistics.java,addValue,geoMeanImpl,null,0,DEF,$ instanceof GeometricMean
SummaryStatistics.java,getMean,mean,Mean,1,RET,$ == meanImpl
SummaryStatistics.java,getVariance,varianceImpl,StorelessUnivariateStatistic,1,RET,$ == variance
SummaryStatistics.java,clear,meanImpl,StorelessUnivariateStatistic,0,DEF,$ != mean
SummaryStatistics.java,clear,varianceImpl,StorelessUnivariateStatistic,0,DEF,$ != variance
SummaryStatistics.java,equals,object,Object,0,RET,$ instanceof SummaryStatistics == false
SummaryStatistics.java,equals,object,null,0,RET,$ instanceof SummaryStatistics
SummaryStatistics.java,checkEmpty,n,long,0,DEF,$ > 0
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.geoMean == source.geoMeanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.max == source.maxImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.mean == source.meanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.min == source.minImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sum == source.sumImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.variance == source.varianceImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumLog == source.sumLogImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumsq == source.sumsqImpl
Product.java,increment,n,long,1,DEF,$ == 0
SumOfLogs.java,getResult,n,int,1,RET,$ > 0
SumOfSquares.java,increment,n,long,1,DEF,$ == 0
Sum.java,increment,n,long,1,DEF,$ == 0
TTestImpl.java,checkSignificanceLevel,alpha,double,0,DEF,$ <= 0
TTestImpl.java,checkSignificanceLevel,alpha,double,0,DEF,$ > 0.5
TTestImpl.java,checkSampleData,data,double[],0,DEF,$ == null
TTestImpl.java,checkSampleData,data,double[],0,DEF,$.length < 2
TTestImpl.java,checkSampleData,stat,StatisticalSummary,0,DEF,$ == null
TTestImpl.java,checkSampleData,stat,StatisticalSummary,0,DEF,$.getN() < 2
OneWayAnovaImpl.java,anovaTest,alpha,double,0,DEF,$ <= 0
OneWayAnovaImpl.java,anovaTest,alpha,double,0,DEF,$ > 0.5
OneWayAnovaImpl.java,anovaStats,categoryData,Collection<double[]>,0,DEF,$.size() < 2
OneWayAnovaImpl.java,anovaStats,array,double[],0,DEF,$.length <= 1
ChiSquareTestImpl.java,chiSquare,expected,double[],0,DEF,$.length < 2
ChiSquareTestImpl.java,chiSquare,expected,double[],0,DEF,$.length != observed.length
ChiSquareTestImpl.java,chiSquare,sumObserved,double,0,DEF,Math.abs(sumExpected - $) > 10E-6
ChiSquareTestImpl.java,chiSquare,sumExpected,double,0,DEF,Math.abs($ - sumObserved) > 10E-6
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,DEF,$ <= 0
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,DEF,$ > 0.5
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,DEF,$ <= 0
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,DEF,$ > 0.5
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],0,DEF,$.length < 2
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],0,DEF,$.length != observed2.length
ChiSquareTestImpl.java,chiSquareDataSetsComparison,countSum1,long,0,DEF,$ == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,countSum2,long,0,DEF,$ == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,i,int,1,DEF,observed1[$] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],1,DEF,$[i] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed2,long[],1,DEF,$[i] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,i,int,1,DEF,observed2[$] == 0
ChiSquareTestImpl.java,chiSquareTestDataSetsComparison,alpha,double,0,DEF,$ <= 0
ChiSquareTestImpl.java,chiSquareTestDataSetsComparison,alpha,double,0,DEF,$ > 0.5
ChiSquareTestImpl.java,checkArray,in,long[][],0,DEF,$.length < 2
ChiSquareTestImpl.java,checkArray,in,long[][],0,DEF,$[0].length < 2
ChiSquareTestImpl.java,checkPositive,in,double[],0,DEF,$[i] <= 0
ChiSquareTestImpl.java,checkPositive,i,int,0,DEF,in[$] <= 0
ChiSquareTestImpl.java,checkNonNegative,in,long[],0,DEF,$[i] < 0
ChiSquareTestImpl.java,checkNonNegative,i,int,0,DEF,in[$] < 0
ChiSquareTestImpl.java,checkNonNegative,in,long[][],0,DEF,$[i][j] < 0
ChiSquareTestImpl.java,checkNonNegative,i,int,0,DEF,in[$][j] < 0
ChiSquareTestImpl.java,checkNonNegative,j,int,0,DEF,in[i][$] < 0
NaturalRanking.java,rank,ranks,IntDoublePair[],1,DEF,Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
NaturalRanking.java,rank,i,int,1,DEF,Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
NaturalRanking.java,rank,tiesTrace,List<Integer>,0,DEF,$.size() > 1
NaturalRanking.java,rank,tiesTrace,List<Integer>,0,DEF,$.size() > 1
NaturalRanking.java,rank,nanStrategy,NaNStrategy,0,DEF,$ == NaNStrategy.FIXED
NaturalRanking.java,restoreNaNs,nanPositions,List<Integer>,0,RET,$.size() == 0
StatUtils.java,sumDifference,n,int,0,DEF,$ != sample2.length
StatUtils.java,sumDifference,n,int,0,DEF,$ < 1
StatUtils.java,varianceDifference,n,int,0,DEF,$ < 2
StatUtils.java,varianceDifference,n,int,0,DEF,$ != sample2.length
KMeansPlusPlusClusterer.java,chooseInitialCenters,i,int,0,DEF,dx2[$] >= r
KMeansPlusPlusClusterer.java,chooseInitialCenters,dx2,double[],0,DEF,$[i] >= r
KMeansPlusPlusClusterer.java,getNearestCluster,distance,double,0,DEF,$ < minDistance
EuclideanIntegerPoint.java,equals,other,null,0,RET,$ instanceof EuclideanIntegerPoint
EuclideanIntegerPoint.java,equals,point,int[],0,RET,$.length != otherPoint.length
PearsonsCorrelation.java,PearsonsCorrelation,covarianceMatrix,RealMatrix,0,DEF,$ == null
PearsonsCorrelation.java,getCorrelationPValues,i,int,1,DEF,$ == j
PearsonsCorrelation.java,correlation,xArray,double[],1,RET,$.length == yArray.length
PearsonsCorrelation.java,correlation,xArray,double[],1,RET,$.length > 1
PearsonsCorrelation.java,checkSufficientData,nRows,int,0,DEF,$ < 2
PearsonsCorrelation.java,checkSufficientData,nCols,int,0,DEF,$ < 2
SpearmansCorrelation.java,correlation,xArray,double[],1,RET,$.length == yArray.length
SpearmansCorrelation.java,correlation,xArray,double[],1,RET,$.length > 1
Covariance.java,covariance,length,int,1,DEF,$ == yArray.length
Covariance.java,covariance,length,int,1,DEF,$ > 1
Covariance.java,checkSufficientData,nRows,int,0,DEF,$ < 2
Covariance.java,checkSufficientData,nCols,int,0,DEF,$ < 2
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ == j
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ < p
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],1,DEF,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,y,double[],1,DEF,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],1,DEF,$.length != y.length
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,DEF,$.length > 0
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,DEF,$[0].length > x.length
AbstractMultipleLinearRegression.java,validateCovarianceData,x,double[][],0,DEF,$.length != covariance.length
AbstractMultipleLinearRegression.java,validateCovarianceData,covariance,double[][],0,DEF,$.length > 0
SimpleRegression.java,addData,n,long,1,DEF,$ == 0
SimpleRegression.java,addData,n,long,0,DEF,$ > 2
SimpleRegression.java,removeData,n,long,0,DEF,$ > 0
SimpleRegression.java,removeData,n,long,0,DEF,$ > 2
SimpleRegression.java,getSlope,n,long,0,RET,$ < 2
SimpleRegression.java,getTotalSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getXSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getMeanSquareError,n,long,0,RET,$ < 3
SimpleRegression.java,getR,b1,double,0,DEF,$ < 0
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,DEF,$ >= 1
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,DEF,$ <= 0
SimpleRegression.java,setDistribution,n,long,0,DEF,$ > 2
GLSMultipleLinearRegression.java,getOmegaInverse,OmegaInverse,RealMatrix,0,DEF,$ == null
Frequency.java,addValue,v,null,1,DEF,$ instanceof Comparable<?>
Frequency.java,addValue,v,null,0,DEF,$ instanceof Integer
Frequency.java,addValue,count,Long,1,DEF,$ == null
Frequency.java,getCount,v,null,0,RET,$ instanceof Integer
Frequency.java,getCount,count,Long,0,DEF,$ != null
Frequency.java,getPct,sumFreq,long,0,RET,$ == 0
Frequency.java,getCumFreq,v,null,0,RET,$ instanceof Integer
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,DEF,$ == null
Frequency.java,getCumFreq,value,Long,0,DEF,$ != null
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,RET,$.compare(v, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,v,Comparable<>,0,RET,c.compare($, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,freqTable,TreeMap<Comparable<?>,Long>,0,RET,c.compare(v, $.firstKey()) < 0
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,RET,$.compare(v, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,v,Comparable<>,0,RET,c.compare($, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,freqTable,TreeMap<Comparable<?>,Long>,0,RET,c.compare(v, $.lastKey()) >= 0
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,1,DEF,$.compare(v, nextValue) > 0
Frequency.java,getCumFreq,v,Comparable<>,1,DEF,c.compare($, nextValue) > 0
Frequency.java,getCumFreq,nextValue,Comparable<>,1,DEF,c.compare(v, $) > 0
Frequency.java,getCumPct,sumFreq,long,0,RET,$ == 0
Frequency.java,equals,obj,Object,0,RET,$ == null
Frequency.java,equals,obj,null,0,RET,$ instanceof Frequency
Frequency.java,equals,freqTable,TreeMap<Comparable<?>,Long>,1,RET,$ == null
Frequency.java,equals,other,Frequency,0,RET,$.freqTable != null
FDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
FDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
FDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
FDistributionImpl.java,getInitialDomain,d,double,0,DEF,$ > 2.0
FDistributionImpl.java,setNumeratorDegreesOfFreedom,degreesOfFreedom,double,0,DEF,$ <= 0.0
FDistributionImpl.java,setDenominatorDegreesOfFreedom,degreesOfFreedom,double,0,DEF,$ <= 0.0
PoissonDistributionImpl.java,setMean,p,double,0,DEF,$ <= 0
PoissonDistributionImpl.java,probability,x,int,1,DEF,$ < 0
PoissonDistributionImpl.java,probability,x,int,1,DEF,$ == Integer.MAX_VALUE
PoissonDistributionImpl.java,probability,x,int,1,DEF,$ == 0
PoissonDistributionImpl.java,cumulativeProbability,x,int,0,RET,$ < 0
PoissonDistributionImpl.java,cumulativeProbability,x,int,0,RET,$ == Integer.MAX_VALUE
HypergeometricDistributionImpl.java,HypergeometricDistributionImpl,numberOfSuccesses,int,0,DEF,$ > populationSize
HypergeometricDistributionImpl.java,HypergeometricDistributionImpl,sampleSize,int,0,DEF,$ > populationSize
HypergeometricDistributionImpl.java,setNumberOfSuccesses,num,int,0,DEF,$ < 0
HypergeometricDistributionImpl.java,setPopulationSize,size,int,0,DEF,$ <= 0
HypergeometricDistributionImpl.java,setSampleSize,size,int,0,DEF,$ < 0
GammaDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
GammaDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
GammaDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
GammaDistributionImpl.java,setAlpha,alpha,double,0,DEF,$ <= 0.0
GammaDistributionImpl.java,setBeta,beta,double,0,DEF,$ <= 0.0
GammaDistributionImpl.java,density,x,Double,0,RET,$ < 0
GammaDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
GammaDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
TDistributionImpl.java,setDegreesOfFreedom,degreesOfFreedom,double,0,DEF,$ <= 0.0
TDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ == 0.0
TDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ < 0.0
TDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
TDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
BinomialDistributionImpl.java,setNumberOfTrials,trials,int,0,DEF,$ < 0
BinomialDistributionImpl.java,setProbabilityOfSuccess,p,double,0,DEF,$ < 0.0
BinomialDistributionImpl.java,setProbabilityOfSuccess,p,double,0,DEF,$ > 1.0
BinomialDistributionImpl.java,cumulativeProbability,x,int,1,DEF,$ < 0
BinomialDistributionImpl.java,probability,x,int,1,DEF,$ < 0
BinomialDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
BinomialDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
ExponentialDistributionImpl.java,setMean,mean,double,0,DEF,$ <= 0.0
ExponentialDistributionImpl.java,density,x,Double,0,RET,$ < 0
ExponentialDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ < 0.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ > 1.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1.0
ExponentialDistributionImpl.java,getDomainUpperBound,p,double,1,RET,$ < .5
ExponentialDistributionImpl.java,getInitialDomain,p,double,1,RET,$ < .5
ZipfDistributionImpl.java,setNumberOfElements,n,int,0,DEF,$ <= 0
ZipfDistributionImpl.java,setExponent,s,double,0,DEF,$ <= 0.0
ZipfDistributionImpl.java,probability,x,int,0,RET,$ <= 0
ZipfDistributionImpl.java,cumulativeProbability,x,int,1,RET,$ <= 0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ < 0.0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ > 1.0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
CauchyDistributionImpl.java,setScale,s,double,0,DEF,$ <= 0.0
CauchyDistributionImpl.java,getDomainLowerBound,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ > .5
NormalDistributionImpl.java,setStandardDeviation,sd,double,0,DEF,$ <= 0.0
NormalDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
NormalDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
NormalDistributionImpl.java,getDomainLowerBound,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ > .5
PascalDistributionImpl.java,setNumberOfSuccesses,successes,int,0,DEF,$ < 0
PascalDistributionImpl.java,setProbabilityOfSuccess,p,double,0,DEF,$ < 0.0
PascalDistributionImpl.java,setProbabilityOfSuccess,p,double,0,DEF,$ > 1.0
PascalDistributionImpl.java,cumulativeProbability,x,int,1,DEF,$ < 0
PascalDistributionImpl.java,probability,x,int,1,DEF,$ < 0
PascalDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
PascalDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
AbstractDistribution.java,cumulativeProbability,x0,double,0,DEF,$ > x1
AbstractIntegerDistribution.java,cumulativeProbability,x0,double,0,DEF,$ > x1
AbstractIntegerDistribution.java,cumulativeProbability,x0,double,1,RET,Math.floor($) < x0
AbstractIntegerDistribution.java,probability,fl,double,1,RET,$ == x
AbstractIntegerDistribution.java,cumulativeProbability,x0,int,0,DEF,$ > x1
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,DEF,$ < 0.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,DEF,$ > 1.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,pm,double,1,DEF,$ > p
AbstractIntegerDistribution.java,inverseCumulativeProbability,xm,int,1,DEF,$ == x1
AbstractIntegerDistribution.java,inverseCumulativeProbability,xm,int,1,DEF,$ == x0
ChiSquaredDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
ChiSquaredDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
ChiSquaredDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
ChiSquaredDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
AbstractContinuousDistribution.java,inverseCumulativeProbability,p,double,0,DEF,$ < 0.0
AbstractContinuousDistribution.java,inverseCumulativeProbability,p,double,0,DEF,$ > 1.0
AbstractContinuousDistribution.java,inverseCumulativeProbability,rootFindingFunction,UnivariateRealFunction,0,RET,Math.abs($.value(lowerBound)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,lowerBound,double,0,RET,Math.abs(rootFindingFunction.value($)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,upperBound,double,0,RET,Math.abs(rootFindingFunction.value($)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,rootFindingFunction,UnivariateRealFunction,0,RET,Math.abs($.value(upperBound)) < 1E-6
BetaDistributionImpl.java,density,x,Double,1,RET,$ < 0
BetaDistributionImpl.java,density,x,Double,1,RET,$ > 1
BetaDistributionImpl.java,density,x,Double,1,MathException:RET,$ == 0
BetaDistributionImpl.java,density,alpha,double,0,MathException,$ < 1
BetaDistributionImpl.java,density,x,Double,1,MathException:RET,$ == 1
BetaDistributionImpl.java,density,beta,double,0,MathException,$ < 1
BetaDistributionImpl.java,inverseCumulativeProbability,p,double,1,RET,$ == 0
BetaDistributionImpl.java,inverseCumulativeProbability,p,double,1,RET,$ == 1
BetaDistributionImpl.java,cumulativeProbability,x,double,1,RET,$ <= 0
BetaDistributionImpl.java,cumulativeProbability,x,double,1,RET,$ >= 1
SaddlePointExpansion.java,getStirlingError,z,double,1,DEF,$ < 15.0
SaddlePointExpansion.java,getStirlingError,z2,double,1,DEF,Math.floor($) == z2
SaddlePointExpansion.java,logBinomialProbability,x,int,1,DEF,$ == 0
SaddlePointExpansion.java,logBinomialProbability,p,double,1,DEF,$ < 0.1
SaddlePointExpansion.java,logBinomialProbability,x,int,1,DEF,$ == n
SaddlePointExpansion.java,logBinomialProbability,q,double,1,DEF,$ < 0.1
WeibullDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ < 0.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ > 1.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
WeibullDistributionImpl.java,setShape,alpha,double,0,DEF,$ <= 0.0
WeibullDistributionImpl.java,setScale,beta,double,0,DEF,$ <= 0.0
FastFourierTransformer.java,fft,f,double[],0,RET,$.length == 1
FastFourierTransformer.java,fft,n,int,0,RET,$ == 1
FastFourierTransformer.java,fft,n,int,0,RET,$ == 2
FastFourierTransformer.java,sample,n,int,0,DEF,$ <= 0
FastFourierTransformer.java,verifyInterval,lower,double,0,DEF,$ >= upper
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == dimensionSize.length
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == d
FastFourierTransformer.java,get,vector,int[],0,RET,$ == null
FastFourierTransformer.java,get,dimensionSize,int[],0,DEF,$.length > 0
FastFourierTransformer.java,get,vector,int[],0,DEF,$.length != dimensionSize.length
FastFourierTransformer.java,set,vector,int[],0,RET,$ == null
FastFourierTransformer.java,set,dimensionSize,int[],0,DEF,$.length > 0
FastFourierTransformer.java,set,vector,int[],0,DEF,$.length != dimensionSize.length
FastFourierTransformer.java,isForward,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,computeOmega,n,int,0,DEF,$ == 0
FastFourierTransformer.java,computeOmega,absN,int,0,RET,$ == omegaCount
FastFourierTransformer.java,getOmegaReal,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,getOmegaReal,k,int,0,DEF,$ < 0
FastFourierTransformer.java,getOmegaReal,k,int,0,DEF,$ >= omegaCount
FastFourierTransformer.java,getOmegaImaginary,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,getOmegaImaginary,k,int,0,DEF,$ < 0
FastFourierTransformer.java,getOmegaImaginary,k,int,0,DEF,$ >= omegaCount
FastCosineTransformer.java,fct,n,int,0,RET,$ == 1
FastSineTransformer.java,fst,f,double[],0,DEF,$[0] != 0.0
FastSineTransformer.java,fst,n,int,0,RET,$ == 1
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,source.substring($, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,endIndex,int,0,DEF,source.substring(startIndex, $).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,source,String,0,DEF,$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,sb,StringBuffer,0,DEF,source.substring(startIndex, endIndex).compareTo($.toString()) == 0
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,$ == endIndex
CompositeFormat.java,parseNumber,number,Number,0,DEF,$ != null
CompositeFormat.java,parseFixedstring,startIndex,int,0,RET,source.substring($, endIndex).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,endIndex,int,0,RET,source.substring(startIndex, $).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,expected,String,0,RET,source.substring(startIndex, endIndex).compareTo($) != 0
CompositeFormat.java,parseFixedstring,source,String,0,RET,$.substring(startIndex, endIndex).compareTo(expected) != 0
BigReal.java,equals,other,Object,0,RET,$ == null
ResizableDoubleArray.java,addElement,startIndex,int,0,DEF,($ + numElements) > internalArray.length
ResizableDoubleArray.java,addElement,numElements,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,addElementRolling,startIndex,int,0,DEF,($ + (numElements + 1)) > internalArray.length
ResizableDoubleArray.java,addElementRolling,numElements,int,0,DEF,(startIndex + ($ + 1)) > internalArray.length
ResizableDoubleArray.java,substituteMostRecentElement,numElements,int,0,DEF,$ < 1
ResizableDoubleArray.java,checkContractExpand,contraction,float,0,DEF,$ < expansion
ResizableDoubleArray.java,checkContractExpand,contraction,float,0,DEF,$ <= 1.0
ResizableDoubleArray.java,checkContractExpand,expansion,float,0,DEF,$ <= 1.0
ResizableDoubleArray.java,discardExtremeElements,i,int,1,DEF,$ > numElements
ResizableDoubleArray.java,discardExtremeElements,i,int,1,DEF,$ < 0
ResizableDoubleArray.java,expand,expansionMode,int,1,DEF,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,getElement,index,int,1,DEF,$ >= numElements
ResizableDoubleArray.java,getElement,index,int,1,RET,$ >= 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ < 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ + 1 > numElements
ResizableDoubleArray.java,setElement,startIndex,int,0,DEF,($ + index) >= internalArray.length
ResizableDoubleArray.java,setElement,index,int,0,DEF,(startIndex + $) >= internalArray.length
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,DEF,$ != MULTIPLICATIVE_MODE
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,DEF,$ != ADDITIVE_MODE
ResizableDoubleArray.java,setInitialCapacity,initialCapacity,int,1,DEF,$ > 0
ResizableDoubleArray.java,setNumElements,i,int,0,DEF,$ < 0
ResizableDoubleArray.java,setNumElements,startIndex,int,0,DEF,($ + i) > internalArray.length
ResizableDoubleArray.java,setNumElements,i,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,shouldContract,expansionMode,int,1,RET,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,equals,object,Object,0,RET,$ instanceof ResizableDoubleArray == false
ResizableDoubleArray.java,equals,object,null,0,RET,$ instanceof ResizableDoubleArray
OpenIntToFieldHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToFieldHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToFieldHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToFieldHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToFieldHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToFieldHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToFieldHashMap.java,key,referenceCount,int,0,DEF,$ != count
OpenIntToFieldHashMap.java,key,current,int,0,DEF,$ < 0
OpenIntToFieldHashMap.java,value,referenceCount,int,0,DEF,$ != count
OpenIntToFieldHashMap.java,value,current,int,0,DEF,$ < 0
OpenIntToFieldHashMap.java,advance,referenceCount,int,0,DEF,$ != count
OpenIntToFieldHashMap.java,advance,current,int,0,DEF,$ < 0
ContinuedFraction.java,evaluate,a,double,1,DEF,$ != 0.0
ContinuedFraction.java,evaluate,b,double,1,DEF,$ != 0
ContinuedFraction.java,evaluate,n,int,0,MaxIterationsExceededException,$ >= maxIterations
MathUtils.java,addAndCheck,s,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,addAndCheck,s,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,addAndCheck,a,long,1,DEF,$ > b
MathUtils.java,addAndCheck,a,long,1,ArithmeticException,$ < 0
MathUtils.java,addAndCheck,b,long,1,ArithmeticException,$ < 0
MathUtils.java,addAndCheck,b,long,1,DEF,Long.MIN_VALUE - $ <= a
MathUtils.java,binomialCoefficient,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficient,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficient,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 61
MathUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 66
MathUtils.java,binomialCoefficientDouble,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficientDouble,n,int,0,RET,$ < 67
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 67
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 1030
MathUtils.java,checkBinomial,n,int,0,DEF,$ < k
MathUtils.java,checkBinomial,n,int,0,DEF,$ < 0
MathUtils.java,compareTo,x,double,0,RET,$ < y
MathUtils.java,equals,xInt,long,0,DEF,$ < 0
MathUtils.java,equals,yInt,long,0,DEF,$ < 0
MathUtils.java,equals,x,double[],0,RET,$ == null
MathUtils.java,equals,y,double[],0,RET,$ == null
MathUtils.java,equals,x,double[],0,RET,$.length != y.length
MathUtils.java,factorial,n,int,0,DEF,$ < 0
MathUtils.java,factorial,n,int,0,ArithmeticException,$ > 20
MathUtils.java,factorialDouble,n,int,0,DEF,$ < 0
MathUtils.java,factorialDouble,n,int,0,RET,$ < 21
MathUtils.java,factorialLog,n,int,0,DEF,$ < 0
MathUtils.java,factorialLog,n,int,0,RET,$ < 21
MathUtils.java,gcd,u,int,0,RET,$ == 0
MathUtils.java,gcd,v,int,0,RET,$ == 0
MathUtils.java,gcd,u,int,0,DEF,$ == Integer.MIN_VALUE
MathUtils.java,gcd,v,int,0,DEF,$ == Integer.MIN_VALUE
MathUtils.java,gcd,u,int,0,DEF,$ > 0
MathUtils.java,gcd,v,int,0,DEF,$ > 0
MathUtils.java,gcd,k,int,0,DEF,$ == 31
MathUtils.java,gcd,t,int,1,DEF,$ > 0
MathUtils.java,lcm,a,int,0,RET,$==0
MathUtils.java,lcm,b,int,0,RET,$==0
MathUtils.java,lcm,lcm,int,0,ArithmeticException,$ == Integer.MIN_VALUE
MathUtils.java,mulAndCheck,m,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,mulAndCheck,m,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,mulAndCheck,a,long,1,DEF,$ > b
MathUtils.java,mulAndCheck,a,long,1,ArithmeticException,$ < 0
MathUtils.java,mulAndCheck,b,long,1,ArithmeticException,$ < 0
MathUtils.java,mulAndCheck,b,long,1,ArithmeticException,$ > 0
MathUtils.java,mulAndCheck,b,long,1,DEF,Long.MIN_VALUE / $ <= a
MathUtils.java,mulAndCheck,a,long,1,ArithmeticException,$ > 0
MathUtils.java,nextAfter,d,double,0,RET,$ == 0
MathUtils.java,nextAfter,d,double,1,RET,$ * (direction - $) >= 0
MathUtils.java,nextAfter,direction,double,1,RET,d * ($ - d) >= 0
MathUtils.java,nextAfter,mantissa,long,1,RET,$ == 0x000fffffffffffffL
MathUtils.java,nextAfter,mantissa,long,1,RET,$ == 0L
MathUtils.java,scalb,d,double,0,RET,$ == 0
MathUtils.java,normalizeArray,sum,double,0,DEF,$ == 0
MathUtils.java,roundUnscaled,sign,double,1,DEF,$ == -1
MathUtils.java,roundUnscaled,sign,double,1,DEF,$ == -1
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ < 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ >= 0.5
MathUtils.java,subAndCheck,s,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,subAndCheck,s,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,subAndCheck,b,long,1,ArithmeticException,$ == Long.MIN_VALUE
MathUtils.java,subAndCheck,a,long,1,DEF,$ < 0
MathUtils.java,pow,e,int,0,DEF,$ < 0
MathUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,long,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,int,0,DEF,$ < 0
MathUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,long,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,int,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,BigInteger,0,DEF,$.compareTo(BigInteger.ZERO) < 0
DefaultTransformer.java,transform,o,Object,0,MathException,$ == null
DefaultTransformer.java,transform,o,null,0,RET,$ instanceof Number
DefaultTransformer.java,equals,other,Object,0,RET,$ == null
TransformerMap.java,transform,o,null,1,DEF,$ instanceof Number
TransformerMap.java,transform,o,null,1,DEF,$ instanceof String
TransformerMap.java,transform,trans,NumberTransformer,0,DEF,$ != null
TransformerMap.java,equals,other,Object,0,RET,$ == null
OpenIntToDoubleHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToDoubleHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToDoubleHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToDoubleHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToDoubleHashMap.java,key,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,key,current,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,value,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,value,current,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,advance,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,advance,current,int,0,DEF,$ < 0
BigFraction.java,BigFraction,num,BigInteger,0,DEF,$ == null
BigFraction.java,BigFraction,den,BigInteger,0,DEF,$ == null
BigFraction.java,BigFraction,gcd,BigInteger,0,DEF,BigInteger.ONE.compareTo($) < 0
BigFraction.java,BigFraction,den,BigInteger,0,DEF,BigInteger.ZERO.compareTo($) > 0
BigFraction.java,BigFraction,exponent,long,0,DEF,$ != 0
BigFraction.java,BigFraction,sign,long,0,DEF,$ != 0
BigFraction.java,BigFraction,k,int,1,DEF,$ < 0
BigFraction.java,BigFraction,a0,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,value,double,0,RET,Math.abs(a0 - $) < epsilon
BigFraction.java,BigFraction,a0,long,0,RET,Math.abs($ - value) < epsilon
BigFraction.java,BigFraction,p2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,q2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,n,int,1,DEF,$ < maxIterations
BigFraction.java,BigFraction,convergent,double,1,DEF,Math.abs($ - value) > epsilon
BigFraction.java,BigFraction,value,double,1,DEF,Math.abs(convergent - $) > epsilon
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,BigFraction,n,int,0,FractionConversionException,$ >= maxIterations
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,getReducedFraction,numerator,int,0,RET,$ == 0
BigFraction.java,equals,other,null,0,DEF,$ instanceof BigFraction
BigFraction.java,multiply,fraction,BigFraction,0,DEF,$.getNumeratorAsInt() != 0
BigFraction.java,pow,exponent,int,0,RET,$ < 0
BigFraction.java,pow,exponent,long,0,RET,$ < 0
BigFraction.java,pow,exponent,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
Fraction.java,Fraction,a0,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,value,double,0,RET,Math.abs(a0 - $) < epsilon
Fraction.java,Fraction,a0,long,0,RET,Math.abs($ - value) < epsilon
Fraction.java,Fraction,p2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,q2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,n,int,1,DEF,$ < maxIterations
Fraction.java,Fraction,convergent,double,1,DEF,Math.abs($ - value) > epsilon
Fraction.java,Fraction,value,double,1,DEF,Math.abs(convergent - $) > epsilon
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,n,int,0,FractionConversionException,$ >= maxIterations
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,den,int,0,DEF,$ == 0
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,Fraction,num,int,0,DEF,$ == Integer.MIN_VALUE
Fraction.java,Fraction,den,int,0,DEF,$ == Integer.MIN_VALUE
Fraction.java,Fraction,d,int,0,DEF,$ > 1
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,abs,numerator,int,1,DEF,$ >= 0
Fraction.java,equals,other,Object,1,DEF,$ == null
Fraction.java,negate,numerator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,addSub,fraction,Fraction,0,DEF,$ == null
Fraction.java,addSub,numerator,int,0,RET,$ == 0
Fraction.java,addSub,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,addSub,d1,int,0,RET,$==1
Fraction.java,addSub,w,BigInteger,0,DEF,$.bitLength() > 31
Fraction.java,multiply,fraction,Fraction,0,DEF,$ == null
Fraction.java,multiply,numerator,int,0,RET,$ == 0
Fraction.java,multiply,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,divide,fraction,Fraction,0,DEF,$ == null
Fraction.java,divide,fraction,Fraction,0,DEF,$.numerator == 0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$ == 0
Fraction.java,getReducedFraction,numerator,int,0,RET,$==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,numerator,int,0,DEF,($&1)==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$ < 0
Fraction.java,getReducedFraction,numerator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,toString,denominator,int,1,DEF,$ == 1
Fraction.java,toString,numerator,int,1,DEF,$ == 0
AbstractFormat.java,setDenominatorFormat,format,NumberFormat,0,DEF,$ == null
AbstractFormat.java,setNumeratorFormat,format,NumberFormat,0,DEF,$ == null
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
ProperBigFractionFormat.java,format,num,BigInteger,0,DEF,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,ret,BigFraction,0,RET,$ != null
ProperBigFractionFormat.java,parse,whole,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,setWholeFormat,format,NumberFormat,0,DEF,$ == null
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Fraction
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
FractionFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
FractionFormat.java,parse,num,Number,0,RET,$ == null
FractionFormat.java,parse,den,Number,0,RET,$ == null
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigFraction
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigInteger
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
BigFractionFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
BigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
BigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperFractionFormat.java,format,whole,int,0,DEF,$ != 0
ProperFractionFormat.java,parse,ret,Fraction,0,RET,$ != null
ProperFractionFormat.java,parse,whole,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,parse,den,Number,0,RET,$ == null
ProperFractionFormat.java,parse,den,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,setWholeFormat,format,NumberFormat,0,DEF,$ == null
AbstractIntegrator.java,computeDerivatives,evaluations,int,0,MaxEvaluationsExceededException,++$ > maxEvaluations
AbstractIntegrator.java,sanityChecks,ode,FirstOrderDifferentialEquations,0,IntegratorException,$.getDimension() != y0.length
AbstractIntegrator.java,sanityChecks,ode,FirstOrderDifferentialEquations,0,IntegratorException,$.getDimension() != y.length
ContinuousOutputModel.java,append,model,ContinuousOutputModel,0,RET,$.steps.size() == 0
ContinuousOutputModel.java,append,steps,List<StepInterpolator>,1,DEF,$.size() == 0
ContinuousOutputModel.java,handleStep,steps,List<StepInterpolator>,0,DEF,$.size() == 0
ContinuousOutputModel.java,setInterpolatedTime,sMin,StepInterpolator,0,RET,locatePoint(time, $) <= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMin) <= 0
ContinuousOutputModel.java,setInterpolatedTime,sMax,StepInterpolator,0,RET,locatePoint(time, $) >= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMax) >= 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ < 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ > 0
ContinuousOutputModel.java,setInterpolatedTime,tMin,double,1,DEF,Math.abs(tMed - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,Math.abs($ - tMin) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMax,double,1,DEF,Math.abs($ - tMed) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,Math.abs(tMax - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,index,int,1,DEF,$ < low
ContinuousOutputModel.java,setInterpolatedTime,index,int,0,DEF,$ > high
AdamsBashforthIntegrator.java,integrate,y,double[],0,DEF,$ != y0
AdamsBashforthIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
DormandPrince54StepInterpolator.java,DormandPrince54StepInterpolator,interpolator,DormandPrince54StepInterpolator,1,DEF,$.v1 == null
DormandPrince54StepInterpolator.java,computeInterpolatedStateAndDerivatives,v1,double[],0,DEF,$ == null
RungeKuttaIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,setStabilityCheck,stepsizeReductionFactor,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStabilityCheck,stepsizeReductionFactor,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,control1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,control1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,control2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,control2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,control3,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,control3,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,control4,double,1,DEF,$ < 1.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,control4,double,1,DEF,$ > 999.9
GraggBulirschStoerIntegrator.java,setOrderControl,maximalOrder,int,0,DEF,$ <= 6
GraggBulirschStoerIntegrator.java,setOrderControl,maximalOrder,int,0,DEF,$ % 2 != 0
GraggBulirschStoerIntegrator.java,setOrderControl,control1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,control1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setOrderControl,control2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,control2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$ == null
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$.length != size
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudifControlParameter,int,1,DEF,$ <= 0
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudifControlParameter,int,1,DEF,$ >= 7
GraggBulirschStoerIntegrator.java,rescale,vecAbsoluteTolerance,double[],1,DEF,$ == null
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,DEF,2 * $ == n
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,RET,$ <= maxChecks
GraggBulirschStoerIntegrator.java,tryStep,k,int,0,RET,$ < maxIter
GraggBulirschStoerIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize > t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ > t
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize < t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ < t
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 0
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > 1.0e15
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > maxError
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ > 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,mu,int,0,DEF,$ >= 0
GraggBulirschStoerIntegrator.java,integrate,interpError,double,0,DEF,$ > 10.0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 1
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ <= targetIter
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 2
GraggBulirschStoerIntegrator.java,integrate,optimalIter,int,1,DEF,$ <= k
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ < targetIter
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ < minStep
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,IntegratorException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,IntegratorException,$.length != y0.length
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,IntegratorException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,IntegratorException,$.length != y0.length
AdaptiveStepsizeIntegrator.java,initializeStep,initialStep,double,0,RET,$ > 0
AdaptiveStepsizeIntegrator.java,filterStep,h,double,0,IntegratorException,Math.abs($) < minStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,0,DEF,$ < -maxStep
EmbeddedRungeKuttaIntegrator.java,integrate,y,double[],0,DEF,$ != y0
EmbeddedRungeKuttaIntegrator.java,integrate,vecAbsoluteTolerance,double[],1,DEF,$ != null
EmbeddedRungeKuttaIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
AdamsNordsieckTransformer.java,getInstance,t,AdamsNordsieckTransformer,0,DEF,$ == null
AdamsMoultonIntegrator.java,integrate,y,double[],0,DEF,$ != y0
AdamsMoultonIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
AdamsMoultonIntegrator.java,visit,row,int,1,DEF,($ & 0x1) == 0
DormandPrince853StepInterpolator.java,DormandPrince853StepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState == null
DormandPrince853StepInterpolator.java,computeInterpolatedStateAndDerivatives,v,double[][],0,DEF,$ == null
DormandPrince853StepInterpolator.java,doFinalize,currentState,double[],0,RET,$ == null
DormandPrince853Integrator.java,estimateError,den,double,0,DEF,$ <= 0.0
RungeKuttaStepInterpolator.java,RungeKuttaStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
RungeKuttaStepInterpolator.java,readExternal,currentState,double[],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,GraggBulirschStoerStepInterpolator,interpolator,GraggBulirschStoerStepInterpolator,1,DEF,$.polynoms == null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ < 0
GraggBulirschStoerStepInterpolator.java,resetTables,polynoms,double[][],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ <= 4
GraggBulirschStoerStepInterpolator.java,computeCoefficients,polynoms,double[][],0,DEF,$ == null
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,RET,$ < 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 1
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 2
GraggBulirschStoerStepInterpolator.java,estimateError,currentDegree,int,0,DEF,$ >= 5
GraggBulirschStoerStepInterpolator.java,computeInterpolatedStateAndDerivatives,currentDegree,int,0,DEF,$ > 3
GraggBulirschStoerStepInterpolator.java,computeInterpolatedStateAndDerivatives,h,double,0,DEF,$ == 0
StepNormalizer.java,handleStep,lastState,double[],0,DEF,$ == null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.scaled != null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.nordsieck != null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.stateVariation != null
NordsieckStepInterpolator.java,writeExternal,scaled,double[],1,DEF,$ == null
NordsieckStepInterpolator.java,writeExternal,nordsieck,Array2DRowRealMatrix,1,DEF,$ == null
AbstractStepInterpolator.java,AbstractStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
AbstractStepInterpolator.java,writeBaseExternal,currentState,double[],1,DEF,$ == null
AbstractStepInterpolator.java,writeBaseExternal,currentState,double[],0,DEF,$ != null
AbstractStepInterpolator.java,readBaseExternal,dimension,int,1,DEF,$ < 0
EventState.java,evaluateStep,gb,double,1,FunctionEvaluationException:RET,$ >= 0
EventState.java,evaluateStep,root,double,1,DEF,Math.abs($ - ta) <= convergence
EventState.java,evaluateStep,ta,double,1,DEF,Math.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,1,DEF,Math.abs($ - previousEventTime) <= convergence
EventState.java,evaluateStep,previousEventTime,double,1,DEF,Math.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,0,RET,Math.abs(previousEventTime - $) > convergence
EventState.java,evaluateStep,previousEventTime,double,0,RET,Math.abs($ - root) > convergence
EventState.java,evaluateStep,pendingEventTime,double,0,RET,Math.abs(t1 - $) <= convergence
EventState.java,evaluateStep,t1,double,0,RET,Math.abs($ - pendingEventTime) <= convergence
EventState.java,evaluateStep,cause,Throwable,1,DEF,$ != null
EventState.java,evaluateStep,cause,null,1,DEF,$ instanceof DerivativeException
EventState.java,evaluateStep,cause,Throwable,0,DEF,$ != null
EventState.java,evaluateStep,cause,null,0,DEF,$ instanceof EventException
EventState.java,reset,nextAction,int,0,DEF,$ == EventHandler.RESET_STATE
CombinedEventsManager.java,evaluateStep,first,EventState,1,DEF,$ == null
MultistepIntegrator.java,MultistepIntegrator,nSteps,int,0,DEF,$ <= 0
MultistepIntegrator.java,start,de,null,0,DEF,$ instanceof InitializationCompletedMarkerException
BinaryMutation.java,mutate,original,null,0,IllegalArgumentException,$ instanceof BinaryChromosome
RandomKey.java,decodeGeneric,representation,List<Double>,0,IllegalArgumentException,$.size() != l
RandomKey.java,isSame,another,null,0,RET,$ instanceof RandomKey<?>
RandomKey.java,checkValidity,val,double,0,InvalidRepresentationException,$ < 0
RandomKey.java,checkValidity,val,double,0,InvalidRepresentationException,$ > 1
RandomKey.java,inducedPermutation,index,int,0,IllegalArgumentException,$ == -1
GeneticAlgorithm.java,GeneticAlgorithm,crossoverRate,double,0,IllegalArgumentException,$ < 0
GeneticAlgorithm.java,GeneticAlgorithm,crossoverRate,double,0,IllegalArgumentException,$ > 1
GeneticAlgorithm.java,GeneticAlgorithm,mutationRate,double,0,IllegalArgumentException,$ < 0
GeneticAlgorithm.java,GeneticAlgorithm,mutationRate,double,0,IllegalArgumentException,$ > 1
Chromosome.java,searchForFitnessUpdate,sameChromosome,Chromosome,0,DEF,$ != null
ElitisticListPopulation.java,setElitismRate,elitismRate,double,0,IllegalArgumentException,$ < 0
ElitisticListPopulation.java,setElitismRate,elitismRate,double,0,IllegalArgumentException,$ > 1
BinaryChromosome.java,checkValidity,i,int,0,InvalidRepresentationException,$ < 0
BinaryChromosome.java,checkValidity,i,int,0,InvalidRepresentationException,$ >1
BinaryChromosome.java,isSame,another,null,0,RET,$ instanceof BinaryChromosome
OnePointCrossover.java,crossover,first,null,0,IllegalArgumentException,$ instanceof AbstractListChromosome
OnePointCrossover.java,crossover,second,null,0,IllegalArgumentException,$ instanceof AbstractListChromosome
RandomKeyMutation.java,mutate,original,null,0,DEF,$ instanceof RandomKey<?>
ListPopulation.java,ListPopulation,chromosomes,List<Chromosome>,0,IllegalArgumentException,$.size() > populationLimit
ListPopulation.java,ListPopulation,populationLimit,int,0,IllegalArgumentException,$ < 0
ListPopulation.java,ListPopulation,populationLimit,int,0,IllegalArgumentException,$ < 0
ListPopulation.java,getFittestChromosome,bestChromosome,Chromosome,0,DEF,chromosome.compareTo($) > 0
ListPopulation.java,getFittestChromosome,chromosome,Chromosome,0,DEF,$.compareTo(bestChromosome) > 0
FixedGenerationCount.java,FixedGenerationCount,maxGenerations,int,0,IllegalArgumentException,$ <= 0
QRDecompositionImpl.java,QRDecompositionImpl,a,double,0,DEF,$ != 0.0
QRDecompositionImpl.java,getR,cachedR,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQT,cachedQT,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQT,minor,int,0,DEF,qrtMinor[$] != 0.0
QRDecompositionImpl.java,getQT,qrtMinor,double[],0,DEF,$[minor] != 0.0
QRDecompositionImpl.java,getH,cachedH,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,isNonSingular,diag,double,0,RET,$ == 0
QRDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
QRDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
RealMatrixImpl.java,RealMatrixImpl,d,double[][],0,NullPointerException,$ == null
RealMatrixImpl.java,RealMatrixImpl,nRows,int,0,DEF,$ == 0
RealMatrixImpl.java,RealMatrixImpl,nCols,int,0,DEF,$ == 0
RealMatrixImpl.java,RealMatrixImpl,r,int,0,DEF,d[$].length != nCols
RealMatrixImpl.java,RealMatrixImpl,d,double[][],0,DEF,$[r].length != nCols
RealMatrixImpl.java,setSubMatrix,data,double[][],1,DEF,$ == null
RealMatrixImpl.java,setSubMatrix,row,int,0,DEF,$ > 0
RealMatrixImpl.java,setSubMatrix,column,int,0,DEF,$ > 0
RealMatrixImpl.java,setSubMatrix,nRows,int,0,DEF,$ == 0
RealMatrixImpl.java,setSubMatrix,nCols,int,0,DEF,$ == 0
RealMatrixImpl.java,setSubMatrix,i,int,0,DEF,subMatrix[$].length != nCols
RealMatrixImpl.java,setSubMatrix,subMatrix,double[][],0,DEF,$[i].length != nCols
RealMatrixImpl.java,operate,v,double[],0,DEF,$.length != nCols
RealMatrixImpl.java,preMultiply,v,double[],0,DEF,$.length != nRows
LUDecompositionImpl.java,LUDecompositionImpl,sum,double,0,DEF,Math.abs($) > largest
LUDecompositionImpl.java,LUDecompositionImpl,col,int,0,RET,Math.abs(lu[max][$]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,max,int,0,RET,Math.abs(lu[$][col]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,lu,double[][],0,RET,Math.abs($[max][col]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,max,int,0,DEF,$ != col
LUDecompositionImpl.java,getL,cachedL,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,getU,cachedU,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,getP,cachedP,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
LUDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
LUDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
RealVectorFormat.java,format,i,int,0,DEF,$ > 0
RealVectorFormat.java,format,obj,null,0,RET,$ instanceof RealVector
RealVectorFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
RealVectorFormat.java,parse,component,Number,1,DEF,$ != null
Array2DRowRealMatrix.java,Array2DRowRealMatrix,d,double[][],0,NullPointerException,$ == null
Array2DRowRealMatrix.java,Array2DRowRealMatrix,nRows,int,0,DEF,$ == 0
Array2DRowRealMatrix.java,Array2DRowRealMatrix,nCols,int,0,DEF,$ == 0
Array2DRowRealMatrix.java,Array2DRowRealMatrix,r,int,0,DEF,d[$].length != nCols
Array2DRowRealMatrix.java,Array2DRowRealMatrix,d,double[][],0,DEF,$[r].length != nCols
Array2DRowRealMatrix.java,setSubMatrix,data,double[][],1,DEF,$ == null
Array2DRowRealMatrix.java,setSubMatrix,row,int,0,DEF,$ > 0
Array2DRowRealMatrix.java,setSubMatrix,column,int,0,DEF,$ > 0
Array2DRowRealMatrix.java,setSubMatrix,nRows,int,0,DEF,$ == 0
Array2DRowRealMatrix.java,setSubMatrix,nCols,int,0,DEF,$ == 0
Array2DRowRealMatrix.java,setSubMatrix,i,int,0,DEF,subMatrix[$].length != nCols
Array2DRowRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DEF,$[i].length != nCols
Array2DRowRealMatrix.java,operate,v,double[],0,DEF,$.length != nCols
Array2DRowRealMatrix.java,preMultiply,v,double[],0,DEF,$.length != nRows
AbstractRealMatrix.java,AbstractRealMatrix,rowDimension,int,0,DEF,$ <= 0
AbstractRealMatrix.java,AbstractRealMatrix,columnDimension,int,0,DEF,$ <= 0
AbstractRealMatrix.java,visit,row,int,0,DEF,$ == endRow
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$.length < rowsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$[0].length < columnsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$.length < selectedRows.length
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$[0].length < selectedColumns.length
AbstractRealMatrix.java,setSubMatrix,nRows,int,0,DEF,$ == 0
AbstractRealMatrix.java,setSubMatrix,nCols,int,0,DEF,$ == 0
AbstractRealMatrix.java,setSubMatrix,r,int,0,DEF,subMatrix[$].length != nCols
AbstractRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DEF,$[r].length != nCols
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getRowDimension() != 1
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getColumnDimension() != nCols
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getRowDimension() != nRows
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getColumnDimension() != 1
AbstractRealMatrix.java,setRowVector,vector,RealVector,0,InvalidMatrixException,$.getDimension() != nCols
AbstractRealMatrix.java,setColumnVector,vector,RealVector,0,InvalidMatrixException,$.getDimension() != nRows
AbstractRealMatrix.java,setRow,array,double[],0,InvalidMatrixException,$.length != nCols
AbstractRealMatrix.java,setColumn,array,double[],0,InvalidMatrixException,$.length != nRows
AbstractRealMatrix.java,inverse,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,isSingular,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractRealMatrix.java,operate,v,double[],0,DEF,$.length != nCols
AbstractRealMatrix.java,operate,v,RealVector,0,DEF,$.getDimension() != nCols
AbstractRealMatrix.java,preMultiply,v,double[],0,DEF,$.length != nRows
AbstractRealMatrix.java,preMultiply,v,RealVector,0,DEF,$.getDimension() != nRows
AbstractRealMatrix.java,solve,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,solve,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,luDecompose,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,toString,i,int,0,DEF,$ > 0
AbstractRealMatrix.java,toString,j,int,0,DEF,$ > 0
AbstractRealMatrix.java,equals,object,Object,0,RET,$ instanceof RealMatrix == false
AbstractRealMatrix.java,equals,object,null,0,RET,$ instanceof RealMatrix
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getColumnDimension() != nCols
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getRowDimension() != nRows
BlockRealMatrix.java,toBlocksLayout,length,int,0,DEF,$ != columns
BlockRealMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,setSubMatrix,refLength,int,0,DEF,$ < 1
BlockRealMatrix.java,setSubMatrix,subRow,double[],0,DEF,$.length != refLength
BlockRealMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
BlockRealMatrix.java,setRowMatrix,matrix,BlockRealMatrix,0,InvalidMatrixException,$.getRowDimension() != 1
BlockRealMatrix.java,setRowMatrix,matrix,BlockRealMatrix,0,InvalidMatrixException,$.getColumnDimension() != nCols
BlockRealMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
BlockRealMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
BlockRealMatrix.java,setColumnMatrix,matrix,BlockRealMatrix,0,InvalidMatrixException,$.getRowDimension() != nRows
BlockRealMatrix.java,setColumnMatrix,matrix,BlockRealMatrix,0,InvalidMatrixException,$.getColumnDimension() != 1
BlockRealMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
BlockRealMatrix.java,setRow,array,double[],0,InvalidMatrixException,$.length != nCols
BlockRealMatrix.java,setColumn,array,double[],0,InvalidMatrixException,$.length != nRows
BlockRealMatrix.java,operate,v,double[],0,DEF,$.length != columns
BlockRealMatrix.java,preMultiply,v,double[],0,DEF,$.length != rows
MatrixUtils.java,createRowFieldMatrix,nCols,int,0,DEF,$ == 0
MatrixUtils.java,createColumnFieldMatrix,nRows,int,0,DEF,$ == 0
MatrixUtils.java,checkRowIndex,row,int,0,MatrixIndexException,$ < 0
MatrixUtils.java,checkColumnIndex,column,int,0,MatrixIndexException,$ < 0
MatrixUtils.java,checkSubMatrixIndex,startRow,int,0,MatrixIndexException,$ > endRow
MatrixUtils.java,checkSubMatrixIndex,startColumn,int,0,MatrixIndexException,$ > endColumn
MatrixUtils.java,checkSubMatrixIndex,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
MatrixUtils.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
MatrixUtils.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length == 0
SingularValueDecompositionImpl.java,getU,cachedU,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getU,m,int,1,DEF,$ >= n
SingularValueDecompositionImpl.java,getUT,cachedUt,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getS,cachedS,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getV,cachedV,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getV,m,int,1,DEF,$ >= n
SingularValueDecompositionImpl.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getCovariance,dimension,int,0,DEF,$ == 0
SingularValueDecompositionImpl.java,getRank,singularValues,double[],0,RET,$[i] > threshold
SingularValueDecompositionImpl.java,getRank,i,int,0,RET,singularValues[$] > threshold
SingularValueDecompositionImpl.java,solve,b,double[],0,DEF,$.length != singularValues.length
SingularValueDecompositionImpl.java,solve,si,double,0,SingularMatrixException,$ == 0
SingularValueDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != singularValues.length
SingularValueDecompositionImpl.java,solve,si,double,0,SingularMatrixException,$ == 0
SingularValueDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != singularValues.length
SingularValueDecompositionImpl.java,solve,si,double,0,SingularMatrixException,$ == 0
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,lJI,double,0,NotSymmetricMatrixException,Math.abs(lIJ - $) > maxDelta
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,lIJ,double,0,NotSymmetricMatrixException,Math.abs($ - lJI) > maxDelta
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,ltI,double[],0,NotPositiveDefiniteMatrixException,$[i] < absolutePositivityThreshold
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,i,int,0,NotPositiveDefiniteMatrixException,ltI[$] < absolutePositivityThreshold
CholeskyDecompositionImpl.java,getL,cachedL,RealMatrix,0,DEF,$ == null
CholeskyDecompositionImpl.java,getLT,cachedLT,RealMatrix,0,DEF,$ == null
CholeskyDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
CholeskyDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
CholeskyDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
TriDiagonalTransformer.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,cachedQt,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,hK,double[],0,DEF,$[k] != 0.0
TriDiagonalTransformer.java,getQT,k,int,0,DEF,hK[$] != 0.0
TriDiagonalTransformer.java,getT,cachedT,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getT,i,int,0,DEF,$ > 0
TriDiagonalTransformer.java,transform,a,double,0,DEF,$ != 0.0
EigenDecompositionImpl.java,getV,cachedV,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getV,eigenvectors,ArrayRealVector[],0,DEF,$ == null
EigenDecompositionImpl.java,getD,cachedD,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getVT,eigenvectors,ArrayRealVector[],0,DEF,$ == null
EigenDecompositionImpl.java,getEigenvector,eigenvectors,ArrayRealVector[],0,DEF,$ == null
EigenDecompositionImpl.java,getSolver,eigenvectors,ArrayRealVector[],0,DEF,$ == null
EigenDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
EigenDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
EigenDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
EigenDecompositionImpl.java,isNonSingular,realEigenvalues,double[],0,RET,$[i] == 0
EigenDecompositionImpl.java,isNonSingular,i,int,0,RET,realEigenvalues[$] == 0
EigenDecompositionImpl.java,isNonSingular,imagEigenvalues,double[],0,RET,$[i] == 0
EigenDecompositionImpl.java,isNonSingular,i,int,0,RET,imagEigenvalues[$] == 0
EigenDecompositionImpl.java,computeSplits,secondary,double[],0,DEF,Math.abs($[i]) <= max
EigenDecompositionImpl.java,computeSplits,i,int,0,DEF,Math.abs(secondary[$]) <= max
EigenDecompositionImpl.java,process2RowsBlock,delta,double,0,InvalidMatrixException,$ < 0
EigenDecompositionImpl.java,process3RowsBlock,delta,double,0,InvalidMatrixException,$ >= 0
EigenDecompositionImpl.java,process3RowsBlock,z0,double,0,DEF,$ < z1
EigenDecompositionImpl.java,process3RowsBlock,z1,double,0,DEF,$ < z2
EigenDecompositionImpl.java,process3RowsBlock,z0,double,0,DEF,$ < z1
EigenDecompositionImpl.java,processGeneralBlock,sumOffDiag,double,0,RET,$ == 0
EigenDecompositionImpl.java,processGeneralBlock,work,double[],0,DEF,$[i + 2] <= 0
EigenDecompositionImpl.java,processGeneralBlock,i,int,0,DEF,work[$ + 2] <= 0
EigenDecompositionImpl.java,processGeneralBlock,k,int,0,MaxIterationsExceededException,$ >= maxIter
EigenDecompositionImpl.java,processGeneralBlock,pingPong,int,0,DEF,$ == 0
EigenDecompositionImpl.java,processGeneralBlock,n0,int,0,DEF,$ - i0 > 3
EigenDecompositionImpl.java,processGeneralBlock,i0,int,0,DEF,n0 - $ > 3
EigenDecompositionImpl.java,goodStep,start,int,0,RET,$ >= deflatedEnd
EigenDecompositionImpl.java,goodStep,s,double,1,DEF,$ <= t
EigenDecompositionImpl.java,goodStep,dMin,double,0,DEF,$ <= 0
EigenDecompositionImpl.java,goodStep,deflatedEnd,int,0,DEF,$ < end
EigenDecompositionImpl.java,goodStep,dMin,double,0,RET,$ < 0
EigenDecompositionImpl.java,goodStep,dMin,double,1,RET,$ >= 0
EigenDecompositionImpl.java,goodStep,dMin1,double,1,RET,$ > 0
EigenDecompositionImpl.java,goodStep,dMin,double,1,RET,$ < 0.0
EigenDecompositionImpl.java,goodStep,dMin1,double,1,RET,$ > 0.0
EigenDecompositionImpl.java,goodStep,dMin,double,1,DEF,$ < 0.0
EigenDecompositionImpl.java,goodStep,tType,int,1,DEF,$ < -22
EigenDecompositionImpl.java,goodStep,dMin1,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,eigenvaluesRange,range,double,0,DEF,$ < absoluteTolerance
EigenDecompositionImpl.java,eigenvaluesRange,middle,double,1,DEF,countEigenValues($, index, n) >= 1
EigenDecompositionImpl.java,eigenvaluesRange,index,int,1,DEF,countEigenValues(middle, $, n) >= 1
EigenDecompositionImpl.java,eigenvaluesRange,n,int,1,DEF,countEigenValues(middle, index, $) >= 1
EigenDecompositionImpl.java,eigenvaluesRange,range,double,0,DEF,$ < absoluteTolerance
EigenDecompositionImpl.java,eigenvaluesRange,middle,double,1,DEF,countEigenValues($, index, n) >= n
EigenDecompositionImpl.java,eigenvaluesRange,index,int,1,DEF,countEigenValues(middle, $, n) >= n
EigenDecompositionImpl.java,eigenvaluesRange,n,int,1,DEF,countEigenValues(middle, index, $) >= n
EigenDecompositionImpl.java,countEigenValues,ratio,double,0,DEF,$ <= 0
EigenDecompositionImpl.java,dqds,pingPong,int,1,DEF,$ == 0
EigenDecompositionImpl.java,dqd,pingPong,int,1,DEF,$ == 0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 2] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 2] == 0.0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 3] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 3] == 0.0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 2] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 2] == 0.0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 2] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 2] == 0.0
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,0,RET,$ <= 0.0
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,DEF,$ == dN
EigenDecompositionImpl.java,computeShiftIncrement,dMin1,double,1,DEF,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,gap1,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,computeShiftIncrement,gap1,double,1,DEF,$ > b1
EigenDecompositionImpl.java,computeShiftIncrement,dN,double,0,DEF,$ > b1
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,$ == 0.0
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,100 * Math.max($, b1) < a2
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * Math.max(b2, $) < a2
EigenDecompositionImpl.java,computeShiftIncrement,cnst1,double,0,DEF,$ < a2
EigenDecompositionImpl.java,computeShiftIncrement,a2,double,0,DEF,$ < cnst1
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN2
EigenDecompositionImpl.java,computeShiftIncrement,np,int,0,RET,work[$ - 8] > b2
EigenDecompositionImpl.java,computeShiftIncrement,work,double[],0,RET,$[np - 8] > b2
EigenDecompositionImpl.java,computeShiftIncrement,np,int,0,RET,work[$ - 4] > b1
EigenDecompositionImpl.java,computeShiftIncrement,work,double[],0,RET,$[np - 4] > b1
EigenDecompositionImpl.java,computeShiftIncrement,start,int,0,RET,end - $ > 2
EigenDecompositionImpl.java,computeShiftIncrement,end,int,0,RET,$ - start > 2
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,$ == 0.0
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,100 * Math.max($, b1) < a2
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * Math.max(b2, $) < a2
EigenDecompositionImpl.java,computeShiftIncrement,cnst1,double,0,DEF,$ < a2
EigenDecompositionImpl.java,computeShiftIncrement,a2,double,1,DEF,$ < cnst1
EigenDecompositionImpl.java,computeShiftIncrement,tType,int,1,DEF,$ == -6
EigenDecompositionImpl.java,computeShiftIncrement,tType,int,1,DEF,$ == -18
EigenDecompositionImpl.java,computeShiftIncrement,dMin1,double,1,RET,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,dMin2,double,1,RET,$ == dN2
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,RET,$ != 0.0
EigenDecompositionImpl.java,computeShiftIncrement,oldB1,double,0,DEF,100 * Math.max(b1, $) < b2
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * Math.max($, oldB1) < b2
EigenDecompositionImpl.java,computeShiftIncrement,gap2,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,computeShiftIncrement,dMin1,double,0,DEF,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,dMin2,double,1,RET,$ == dN2
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,RET,$ != 0.0
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * $ < b2
EigenDecompositionImpl.java,computeShiftIncrement,gap2,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,updateSigma,tau,double,1,DEF,$ < sigma
EigenDecompositionImpl.java,findEigenvector,absG,double,0,DEF,$ < minG
OpenMapRealMatrix.java,multiply,outValue,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,setEntry,value,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,addToEntry,value,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,multiplyEntry,value,double,1,DEF,$ == 0.0
SparseFieldVector.java,append,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,dotProduct,idx,int,0,DEF,$ < v.length
SparseFieldVector.java,getSubVector,key,int,0,DEF,$ >= index
SparseFieldVector.java,getSubVector,key,int,0,DEF,$ < end
SparseFieldVector.java,outerProduct,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,subtract,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
SparseFieldVector.java,add,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,equals,obj,Object,0,RET,$ == null
SparseFieldVector.java,equals,obj,null,0,RET,$ instanceof SparseFieldVector
SparseFieldVector.java,equals,field,Field<T>,1,RET,$ == null
SparseFieldVector.java,equals,other,SparseFieldVector<T>,0,RET,$.field != null
SparseFieldVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
AbstractFieldMatrix.java,extractField,d,T[][],0,DEF,$.length == 0
AbstractFieldMatrix.java,extractField,d,T[][],0,DEF,$[0].length == 0
AbstractFieldMatrix.java,extractField,d,T[],0,DEF,$.length == 0
AbstractFieldMatrix.java,buildArray,columns,int,0,RET,$ < 0
AbstractFieldMatrix.java,AbstractFieldMatrix,rowDimension,int,0,DEF,$ <= 0
AbstractFieldMatrix.java,AbstractFieldMatrix,columnDimension,int,0,DEF,$ <= 0
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,DEF,$.length < rowsCount
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,DEF,$[0].length < columnsCount
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,DEF,$.length < selectedRows.length
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,DEF,$[0].length < selectedColumns.length
AbstractFieldMatrix.java,setSubMatrix,nRows,int,0,DEF,$ == 0
AbstractFieldMatrix.java,setSubMatrix,nCols,int,0,DEF,$ == 0
AbstractFieldMatrix.java,setSubMatrix,r,int,0,DEF,subMatrix[$].length != nCols
AbstractFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,DEF,$[r].length != nCols
AbstractFieldMatrix.java,setRowMatrix,matrix,FieldMatrix<T>,0,InvalidMatrixException,$.getRowDimension() != 1
AbstractFieldMatrix.java,setRowMatrix,matrix,FieldMatrix<T>,0,InvalidMatrixException,$.getColumnDimension() != nCols
AbstractFieldMatrix.java,setColumnMatrix,matrix,FieldMatrix<T>,0,InvalidMatrixException,$.getRowDimension() != nRows
AbstractFieldMatrix.java,setColumnMatrix,matrix,FieldMatrix<T>,0,InvalidMatrixException,$.getColumnDimension() != 1
AbstractFieldMatrix.java,setRowVector,vector,FieldVector<T>,0,InvalidMatrixException,$.getDimension() != nCols
AbstractFieldMatrix.java,setColumnVector,vector,FieldVector<T>,0,InvalidMatrixException,$.getDimension() != nRows
AbstractFieldMatrix.java,setRow,array,T[],0,InvalidMatrixException,$.length != nCols
AbstractFieldMatrix.java,setColumn,array,T[],0,InvalidMatrixException,$.length != nRows
AbstractFieldMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractFieldMatrix.java,operate,v,T[],0,DEF,$.length != nCols
AbstractFieldMatrix.java,operate,v,FieldVector<T>,0,DEF,$.getDimension() != nCols
AbstractFieldMatrix.java,preMultiply,v,T[],0,DEF,$.length != nRows
AbstractFieldMatrix.java,preMultiply,v,FieldVector<T>,0,DEF,$.getDimension() != nRows
AbstractFieldMatrix.java,toString,i,int,0,DEF,$ > 0
AbstractFieldMatrix.java,toString,j,int,0,DEF,$ > 0
AbstractFieldMatrix.java,equals,object,Object,0,RET,$ instanceof FieldMatrix == false
AbstractFieldMatrix.java,equals,object,null,0,RET,$ instanceof FieldMatrix
AbstractFieldMatrix.java,equals,m,FieldMatrix<T>,0,RET,$.getColumnDimension() != nCols
AbstractFieldMatrix.java,equals,m,FieldMatrix<T>,0,RET,$.getRowDimension() != nRows
AbstractFieldMatrix.java,checkRowIndex,row,int,0,MatrixIndexException,$ < 0
AbstractFieldMatrix.java,checkColumnIndex,column,int,0,MatrixIndexException,$ < 0
AbstractFieldMatrix.java,checkSubMatrixIndex,startRow,int,0,MatrixIndexException,$ > endRow
AbstractFieldMatrix.java,checkSubMatrixIndex,startColumn,int,0,MatrixIndexException,$ > endColumn
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length == 0
BlockFieldMatrix.java,toBlocksLayout,length,int,0,DEF,$ != columns
BlockFieldMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,setSubMatrix,refLength,int,0,DEF,$ < 1
BlockFieldMatrix.java,setSubMatrix,subRow,T[],0,DEF,$.length != refLength
BlockFieldMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
BlockFieldMatrix.java,setRowMatrix,matrix,BlockFieldMatrix<T>,0,InvalidMatrixException,$.getRowDimension() != 1
BlockFieldMatrix.java,setRowMatrix,matrix,BlockFieldMatrix<T>,0,InvalidMatrixException,$.getColumnDimension() != nCols
BlockFieldMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
BlockFieldMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
BlockFieldMatrix.java,setColumnMatrix,matrix,BlockFieldMatrix<T>,0,InvalidMatrixException,$.getRowDimension() != nRows
BlockFieldMatrix.java,setColumnMatrix,matrix,BlockFieldMatrix<T>,0,InvalidMatrixException,$.getColumnDimension() != 1
BlockFieldMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
BlockFieldMatrix.java,setRow,array,T[],0,InvalidMatrixException,$.length != nCols
BlockFieldMatrix.java,setColumn,array,T[],0,InvalidMatrixException,$.length != nRows
BlockFieldMatrix.java,operate,v,T[],0,DEF,$.length != columns
BlockFieldMatrix.java,preMultiply,v,T[],0,DEF,$.length != rows
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,d,T[][],0,NullPointerException,$ == null
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,nRows,int,0,DEF,$ == 0
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,nCols,int,0,DEF,$ == 0
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,r,int,0,DEF,d[$].length != nCols
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,d,T[][],0,DEF,$[r].length != nCols
Array2DRowFieldMatrix.java,setSubMatrix,data,T[][],1,DEF,$ == null
Array2DRowFieldMatrix.java,setSubMatrix,row,int,0,DEF,$ > 0
Array2DRowFieldMatrix.java,setSubMatrix,column,int,0,DEF,$ > 0
Array2DRowFieldMatrix.java,setSubMatrix,nRows,int,0,DEF,$ == 0
Array2DRowFieldMatrix.java,setSubMatrix,nCols,int,0,DEF,$ == 0
Array2DRowFieldMatrix.java,setSubMatrix,i,int,0,DEF,subMatrix[$].length != nCols
Array2DRowFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,DEF,$[i].length != nCols
Array2DRowFieldMatrix.java,operate,v,T[],0,DEF,$.length != nCols
Array2DRowFieldMatrix.java,preMultiply,v,T[],0,DEF,$.length != nRows
BigMatrixImpl.java,BigMatrixImpl,rowDimension,int,0,DEF,$ <= 0
BigMatrixImpl.java,BigMatrixImpl,columnDimension,int,0,DEF,$ <= 0
BigMatrixImpl.java,BigMatrixImpl,d,BigDecimal[][],0,NullPointerException,$ == null
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,r,int,0,DEF,d[$].length != nCols
BigMatrixImpl.java,BigMatrixImpl,d,BigDecimal[][],0,DEF,$[r].length != nCols
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,d,double[][],0,DEF,$[row].length != nCols
BigMatrixImpl.java,BigMatrixImpl,row,int,0,DEF,d[$].length != nCols
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,d,String[][],0,DEF,$[row].length != nCols
BigMatrixImpl.java,BigMatrixImpl,row,int,0,DEF,d[$].length != nCols
BigMatrixImpl.java,getSubMatrix,startRow,int,0,MatrixIndexException,$ > endRow
BigMatrixImpl.java,getSubMatrix,startColumn,int,0,MatrixIndexException,$ > endColumn
BigMatrixImpl.java,getSubMatrix,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
BigMatrixImpl.java,getSubMatrix,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
BigMatrixImpl.java,getSubMatrix,selectedRows,int[],0,MatrixIndexException,$.length == 0
BigMatrixImpl.java,setSubMatrix,nRows,int,0,DEF,$ == 0
BigMatrixImpl.java,setSubMatrix,nCols,int,0,DEF,$ == 0
BigMatrixImpl.java,setSubMatrix,r,int,0,DEF,subMatrix[$].length != nCols
BigMatrixImpl.java,setSubMatrix,subMatrix,BigDecimal[][],0,DEF,$[r].length != nCols
BigMatrixImpl.java,setSubMatrix,data,BigDecimal[][],1,DEF,$ == null
BigMatrixImpl.java,setSubMatrix,row,int,0,DEF,$ > 0
BigMatrixImpl.java,setSubMatrix,column,int,0,DEF,$ > 0
BigMatrixImpl.java,isSingular,lu,BigDecimal[][],1,RET,$ == null
BigMatrixImpl.java,preMultiply,v,BigDecimal[],0,DEF,$.length != nRows
BigMatrixImpl.java,solve,b,BigDecimal[],0,DEF,$.length != nRows
BigMatrixImpl.java,luDecompose,nRows,int,0,NonSquareMatrixException,$ != nCols
BigMatrixImpl.java,luDecompose,largest,BigDecimal,0,DEF,sum.abs().compareTo($) == 1
BigMatrixImpl.java,luDecompose,sum,BigDecimal,0,DEF,$.abs().compareTo(largest) == 1
BigMatrixImpl.java,luDecompose,col,int,0,SingularMatrixException,lu[max][$].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,TOO_SMALL,BigDecimal,0,SingularMatrixException,lu[max][col].abs().compareTo($) <= 0
BigMatrixImpl.java,luDecompose,max,int,0,SingularMatrixException,lu[$][col].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,lu,BigDecimal[][],0,SingularMatrixException,$[max][col].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,max,int,0,DEF,$ != col
BigMatrixImpl.java,toString,data,BigDecimal[][],0,DEF,$ != null
BigMatrixImpl.java,toString,i,int,0,DEF,$ > 0
BigMatrixImpl.java,toString,j,int,0,DEF,$ > 0
BigMatrixImpl.java,equals,object,Object,0,RET,$ instanceof BigMatrixImpl == false
BigMatrixImpl.java,equals,object,null,0,RET,$ instanceof BigMatrixImpl
BigMatrixImpl.java,equals,m,BigMatrix,0,RET,$.getColumnDimension() != nCols
BigMatrixImpl.java,equals,m,BigMatrix,0,RET,$.getRowDimension() != nRows
BigMatrixImpl.java,getLUMatrix,lu,BigDecimal[][],0,DEF,$ == null
ArrayFieldVector.java,checkVectorDimensions,data,T[],0,DEF,$.length != n
ArrayFieldVector.java,equals,other,Object,0,RET,$ == null
ArrayFieldVector.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
ArrayRealVector.java,ArrayRealVector,d,double[],0,NullPointerException,$ == null
ArrayRealVector.java,ArrayRealVector,d,double[],0,DEF,$.length == 0
ArrayRealVector.java,unitVector,norm,double,0,DEF,$ == 0
ArrayRealVector.java,unitize,norm,double,0,DEF,$ == 0
ArrayRealVector.java,checkVectorDimensions,data,double[],0,DEF,$.length != n
ArrayRealVector.java,equals,other,Object,0,RET,$ == null
ArrayRealVector.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
BiDiagonalTransformer.java,BiDiagonalTransformer,m,int,1,DEF,$ >= n
BiDiagonalTransformer.java,getU,cachedU,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getU,hK,double[],0,DEF,$[k - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,k,int,0,DEF,hK[$ - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,hK[k - $] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getB,cachedB,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getB,m,int,1,DEF,$ < n
BiDiagonalTransformer.java,getB,i,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getV,cachedV,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getV,hK,double[],0,DEF,$[k] != 0.0
BiDiagonalTransformer.java,getV,k,int,0,DEF,hK[$] != 0.0
BiDiagonalTransformer.java,getV,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,b,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,b,double,0,DEF,$ != 0.0
OpenMapRealVector.java,add,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,append,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,dotProduct,idx,int,0,DEF,$ < v.length
OpenMapRealVector.java,getSubVector,key,int,0,DEF,$ >= index
OpenMapRealVector.java,getSubVector,key,int,0,DEF,$ < end
OpenMapRealVector.java,getDistance,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getL1Distance,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getLInfDistance,delta,double,0,DEF,$ > max
OpenMapRealVector.java,getLInfDistance,iter,Iterator,0,DEF,$.value() > max
OpenMapRealVector.java,getLInfDistance,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getLInfDistance,delta,double,0,DEF,$ > max
OpenMapRealVector.java,outerProduct,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,subtract,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
OpenMapRealVector.java,equals,obj,Object,0,RET,$ == null
OpenMapRealVector.java,equals,obj,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
FieldLUDecompositionImpl.java,FieldLUDecompositionImpl,nonZero,int,0,RET,$ >= m
FieldLUDecompositionImpl.java,FieldLUDecompositionImpl,nonZero,int,0,DEF,$ != col
FieldLUDecompositionImpl.java,getL,cachedL,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecompositionImpl.java,getU,cachedU,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecompositionImpl.java,getP,cachedP,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecompositionImpl.java,solve,b,T[],0,DEF,$.length != m
FieldLUDecompositionImpl.java,solve,b,FieldVector<T>,0,DEF,$.getDimension() != m
FieldLUDecompositionImpl.java,solve,b,FieldMatrix<T>,0,DEF,$.getRowDimension() != m
LevenbergMarquardtEstimator.java,estimate,dk,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,estimate,s,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,estimate,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtEstimator.java,estimate,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtEstimator.java,estimate,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,estimate,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,DEF,$ >= 1.0e-4
LevenbergMarquardtEstimator.java,estimate,actRed,double,0,RET,Math.abs($) <= costRelativeTolerance
LevenbergMarquardtEstimator.java,estimate,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtEstimator.java,estimate,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtEstimator.java,estimate,actRed,double,1,EstimationException,Math.abs($) <= 2.2204e-16
LevenbergMarquardtEstimator.java,estimate,preRed,double,1,EstimationException,$ <= 2.2204e-16
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,EstimationException,$ <= 2.0
LevenbergMarquardtEstimator.java,estimate,maxCosine,double,0,EstimationException,$ <= 2.2204e-16
LevenbergMarquardtEstimator.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtEstimator.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtEstimator.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtEstimator.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtEstimator.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtEstimator.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtEstimator.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtEstimator.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtEstimator.java,qrDecomposition,ak2,double,0,RET,$ == 0
AbstractEstimator.java,updateResidualsAndCost,costEvaluations,int,0,EstimationException,++$ > maxCostEval
AbstractEstimator.java,guessParametersErrors,m,int,0,EstimationException,$ <= p
MultiStartUnivariateRealOptimizer.java,getOptima,optima,double[],0,DEF,$ == null
MultiStartUnivariateRealOptimizer.java,getOptimaValues,optimaValues,double[],0,DEF,$ == null
MultiStartUnivariateRealOptimizer.java,optimize,goalType,GoalType,0,DEF,$ == GoalType.MAXIMIZE
MultiStartUnivariateRealOptimizer.java,optimize,currY,double,0,DEF,$ < prevY
MultiStartUnivariateRealOptimizer.java,optimize,i,int,1,DEF,$-- != 0
SimplexSolver.java,getPivotColumn,epsilon,double,0,DEF,MathUtils.compareTo(tableau.getEntry(0, i), minValue, $) < 0
SimplexSolver.java,getPivotColumn,tableau,SimplexTableau,0,DEF,MathUtils.compareTo($.getEntry(0, i), minValue, epsilon) < 0
SimplexSolver.java,getPivotColumn,minValue,double,0,DEF,MathUtils.compareTo(tableau.getEntry(0, i), $, epsilon) < 0
SimplexSolver.java,getPivotColumn,i,int,0,DEF,MathUtils.compareTo(tableau.getEntry(0, $), minValue, epsilon) < 0
SimplexSolver.java,getPivotRow,epsilon,double,0,DEF,MathUtils.compareTo(entry, 0, $) >= 0
SimplexSolver.java,getPivotRow,entry,double,0,DEF,MathUtils.compareTo($, 0, epsilon) >= 0
SimplexSolver.java,getPivotRow,ratio,double,0,DEF,$ < minRatio
SimplexSolver.java,doIteration,pivotRow,Integer,0,UnboundedSolutionException,$ == null
SimplexSolver.java,doIteration,i,int,0,DEF,$ != pivotRow
SimplexSolver.java,isPhase1Solved,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() == 0
SimplexSolver.java,isPhase1Solved,epsilon,double,0,RET,MathUtils.compareTo(tableau.getEntry(0, i), 0, $) < 0
SimplexSolver.java,isPhase1Solved,tableau,SimplexTableau,0,RET,MathUtils.compareTo($.getEntry(0, i), 0, epsilon) < 0
SimplexSolver.java,isPhase1Solved,i,int,0,RET,MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) < 0
SimplexSolver.java,isOptimal,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() > 0
SimplexSolver.java,isOptimal,epsilon,double,0,RET,MathUtils.compareTo(tableau.getEntry(0, i), 0, $) < 0
SimplexSolver.java,isOptimal,tableau,SimplexTableau,0,RET,MathUtils.compareTo($.getEntry(0, i), 0, epsilon) < 0
SimplexSolver.java,isOptimal,i,int,0,RET,MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) < 0
SimplexSolver.java,solvePhase1,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() == 0
SimplexTableau.java,createTableau,constraint,LinearConstraint,1,DEF,$.getRelationship() == Relationship.LEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.EQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,normalize,constraint,LinearConstraint,0,RET,$.getValue() < 0
SimplexTableau.java,getConstraintTypeCounts,constraint,LinearConstraint,0,DEF,$.getRelationship() == relationship
SimplexTableau.java,getBasicRow,row,Integer,1,DEF,$ == null
SimplexTableau.java,discardArtificialVariables,numArtificialVariables,int,0,RET,$ == 0
SimplexTableau.java,equals,other,Object,0,RET,$ == null
AbstractLinearOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
LinearObjectiveFunction.java,equals,other,Object,0,RET,$ == null
LinearConstraint.java,equals,other,Object,0,RET,$ == null
SimpleRealPointChecker.java,converged,difference,double,0,RET,$ > absoluteThreshold
SimpleVectorialValueChecker.java,converged,difference,double,0,RET,$ > absoluteThreshold
BrentOptimizer.java,localMin,goalType,GoalType,0,DEF,$ == GoalType.MAXIMIZE
BrentOptimizer.java,localMin,e,double,0,DEF,Math.abs($) > tol
BrentOptimizer.java,localMin,q,double,1,DEF,$ > 0
BrentOptimizer.java,localMin,a,double,0,DEF,(u - $) < t2
BrentOptimizer.java,localMin,u,double,0,DEF,($ - a) < t2
BrentOptimizer.java,localMin,b,double,0,DEF,($ - u) < t2
BrentOptimizer.java,localMin,u,double,0,DEF,(b - $) < t2
BrentOptimizer.java,localMin,goalType,GoalType,0,DEF,$ == GoalType.MAXIMIZE
BrentOptimizer.java,localMin,fu,double,1,DEF,$ <= fx
BrentOptimizer.java,localMin,u,double,1,DEF,$ < x
BrentOptimizer.java,localMin,u,double,1,DEF,$ < x
BrentOptimizer.java,localMin,fu,double,1,DEF,$ <= fw
BrentOptimizer.java,localMin,w,double,1,DEF,$ == x
BrentOptimizer.java,localMin,fu,double,0,DEF,$ <= fv
BrentOptimizer.java,localMin,v,double,0,DEF,$ == x
BrentOptimizer.java,localMin,v,double,0,DEF,$ == w
AbstractUnivariateRealOptimizer.java,computeObjectiveValue,evaluations,int,0,MaxEvaluationsExceededException,++$ > maxEvaluations
HarmonicFitter.java,fit,parameters,double[],0,OptimizationException,$ == null
HarmonicFitter.java,fit,observations,WeightedObservedPoint[],0,OptimizationException,$.length < 4
HarmonicCoefficientsGuesser.java,sortObservations,i,int,1,DEF,$-- != 0
HarmonicCoefficientsGuesser.java,guessAOmega,c1,double,0,OptimizationException,$ / c2 < 0.0
HarmonicCoefficientsGuesser.java,guessAOmega,c2,double,0,OptimizationException,c1 / $ < 0.0
HarmonicCoefficientsGuesser.java,guessAOmega,c3,double,0,OptimizationException,c2 / $ < 0.0
HarmonicCoefficientsGuesser.java,guessAOmega,c2,double,0,OptimizationException,$ / c3 < 0.0
MultiStartMultivariateRealOptimizer.java,getOptima,optima,RealPointValuePair[],0,DEF,$ == null
MultiStartMultivariateRealOptimizer.java,compare,o1,RealPointValuePair,1,RET,$ == null
MultiStartMultivariateRealOptimizer.java,compare,o2,RealPointValuePair,0,RET,$ == null
MultiStartMultivariateRealOptimizer.java,optimize,optima,RealPointValuePair[],0,OptimizationException,$[0] == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,getOptima,optima,VectorialPointValuePair[],0,DEF,$ == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,compare,o1,VectorialPointValuePair,1,RET,$ == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,compare,o2,VectorialPointValuePair,0,RET,$ == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,optimize,optima,VectorialPointValuePair[],0,OptimizationException,$[0] == null
LeastSquaresConverter.java,LeastSquaresConverter,observations,double[],0,DEF,$.length != weights.length
LeastSquaresConverter.java,value,residuals,double[],0,FunctionEvaluationException,$.length != observations.length
LeastSquaresConverter.java,value,weights,double[],1,DEF,$ != null
LeastSquaresConverter.java,value,scale,RealMatrix,1,DEF,$ != null
DirectSearchOptimizer.java,setStartConfiguration,j,int,0,DEF,steps[$] == 0.0
DirectSearchOptimizer.java,setStartConfiguration,steps,double[],0,DEF,$[j] == 0.0
DirectSearchOptimizer.java,setStartConfiguration,n,int,0,DEF,$ < 0
DirectSearchOptimizer.java,setStartConfiguration,refI,double[],0,DEF,$.length != n
DirectSearchOptimizer.java,setStartConfiguration,i,int,0,DEF,$ > 0
DirectSearchOptimizer.java,optimize,startConfiguration,double[][],0,DEF,$ == null
DirectSearchOptimizer.java,optimize,iterations,int,0,RET,$ > 0
DirectSearchOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
DirectSearchOptimizer.java,evaluate,evaluations,int,0,MaxEvaluationsExceededException,++$ > maxEvaluations
DirectSearchOptimizer.java,buildSimplex,n,int,0,DEF,$ != startConfiguration.length
DirectSearchOptimizer.java,replaceWorstPoint,comparator,Comparator<RealPointValuePair>,0,DEF,$.compare(simplex[i], pointValuePair) > 0
DirectSearchOptimizer.java,replaceWorstPoint,pointValuePair,RealPointValuePair,0,DEF,comparator.compare(simplex[i], $) > 0
DirectSearchOptimizer.java,replaceWorstPoint,simplex,RealPointValuePair[],0,DEF,comparator.compare($[i], pointValuePair) > 0
DirectSearchOptimizer.java,replaceWorstPoint,i,int,0,DEF,comparator.compare(simplex[$], pointValuePair) > 0
MultiDirectional.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(reflected, best) < 0
MultiDirectional.java,iterateSimplex,reflected,RealPointValuePair,0,RET,comparator.compare($, best) < 0
MultiDirectional.java,iterateSimplex,best,RealPointValuePair,0,RET,comparator.compare(reflected, $) < 0
MultiDirectional.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,DEF,$.compare(reflected, expanded) <= 0
MultiDirectional.java,iterateSimplex,expanded,RealPointValuePair,0,DEF,comparator.compare(reflected, $) <= 0
MultiDirectional.java,iterateSimplex,reflected,RealPointValuePair,0,DEF,comparator.compare($, expanded) <= 0
MultiDirectional.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(contracted, best) < 0
MultiDirectional.java,iterateSimplex,contracted,RealPointValuePair,0,RET,comparator.compare($, best) < 0
MultiDirectional.java,iterateSimplex,best,RealPointValuePair,0,RET,comparator.compare(contracted, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(best, reflected) <= 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare(best, $) <= 0
NelderMead.java,iterateSimplex,best,RealPointValuePair,1,DEF,comparator.compare($, reflected) <= 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(reflected, secondBest) < 0
NelderMead.java,iterateSimplex,secondBest,RealPointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare($, secondBest) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(reflected, best) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare($, best) < 0
NelderMead.java,iterateSimplex,best,RealPointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(expanded, reflected) < 0
NelderMead.java,iterateSimplex,expanded,RealPointValuePair,1,DEF,comparator.compare($, reflected) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare(expanded, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,RET,$.compare(reflected, worst) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,RET,comparator.compare($, worst) < 0
NelderMead.java,iterateSimplex,worst,RealPointValuePair,1,RET,comparator.compare(reflected, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(outContracted, reflected) <= 0
NelderMead.java,iterateSimplex,outContracted,RealPointValuePair,0,RET,comparator.compare($, reflected) <= 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,0,RET,comparator.compare(outContracted, $) <= 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(inContracted, worst) < 0
NelderMead.java,iterateSimplex,worst,RealPointValuePair,0,RET,comparator.compare(inContracted, $) < 0
NelderMead.java,iterateSimplex,inContracted,RealPointValuePair,0,RET,comparator.compare($, worst) < 0
NonLinearConjugateGradientOptimizer.java,setInitialStep,initialStep,double,1,DEF,$ <= 0
NonLinearConjugateGradientOptimizer.java,doOptimize,preconditioner,Preconditioner,0,DEF,$ == null
NonLinearConjugateGradientOptimizer.java,doOptimize,solver,UnivariateRealSolver,0,DEF,$ == null
NonLinearConjugateGradientOptimizer.java,doOptimize,goalType,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,previous,RealPointValuePair,0,RET,$ != null
NonLinearConjugateGradientOptimizer.java,doOptimize,goalType,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,updateFormula,ConjugateGradientFormula,1,DEF,$ == ConjugateGradientFormula.FLETCHER_REEVES
NonLinearConjugateGradientOptimizer.java,doOptimize,n,int,1,DEF,getIterations() % $ == 0
NonLinearConjugateGradientOptimizer.java,doOptimize,beta,double,1,DEF,$ < 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yA,double,0,RET,$ * yB <= 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yB,double,0,RET,yA * $ <= 0
LevenbergMarquardtOptimizer.java,doOptimize,dk,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,s,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtOptimizer.java,doOptimize,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtOptimizer.java,doOptimize,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,DEF,$ >= 1.0e-4
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,0,RET,Math.abs($) <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,1,OptimizationException,Math.abs($) <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,1,OptimizationException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,OptimizationException,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,OptimizationException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtOptimizer.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtOptimizer.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtOptimizer.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtOptimizer.java,qrDecomposition,ak2,double,0,RET,$ == 0
AbstractScalarDifferentiableOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
AbstractScalarDifferentiableOptimizer.java,computeObjectiveValue,evaluations,int,0,MaxEvaluationsExceededException,++$ > maxEvaluations
AbstractLeastSquaresOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
AbstractLeastSquaresOptimizer.java,updateJacobian,jacobian,double[][],0,FunctionEvaluationException,$.length != rows
AbstractLeastSquaresOptimizer.java,updateResidualsAndCost,objectiveEvaluations,int,0,MaxEvaluationsExceededException,++$ > maxEvaluations
AbstractLeastSquaresOptimizer.java,updateResidualsAndCost,objective,double[],0,FunctionEvaluationException,$.length != rows
AbstractLeastSquaresOptimizer.java,guessParametersErrors,rows,int,0,OptimizationException,$ <= cols
AbstractLeastSquaresOptimizer.java,optimize,target,double[],0,OptimizationException,$.length != weights.length
GaussNewtonOptimizer.java,doOptimize,previous,VectorialPointValuePair,0,DEF,$ != null
MultiStartDifferentiableMultivariateRealOptimizer.java,getOptima,optima,RealPointValuePair[],0,DEF,$ == null
MultiStartDifferentiableMultivariateRealOptimizer.java,compare,o1,RealPointValuePair,1,RET,$ == null
MultiStartDifferentiableMultivariateRealOptimizer.java,compare,o2,RealPointValuePair,0,RET,$ == null
MultiStartDifferentiableMultivariateRealOptimizer.java,optimize,optima,RealPointValuePair[],0,OptimizationException,$[0] == null
SimpleVectorialPointChecker.java,converged,difference,double,0,RET,$ > absoluteThreshold
Beta.java,regularizedBeta,x,double,1,DEF,$ < 0
Beta.java,regularizedBeta,x,double,1,DEF,$ > 1
Beta.java,regularizedBeta,a,double,1,DEF,$ <= 0.0
Beta.java,regularizedBeta,b,double,1,DEF,$ <= 0.0
Beta.java,getB,n,int,1,DEF,$ % 2 == 0
Beta.java,logBeta,a,double,1,DEF,$ <= 0.0
Beta.java,logBeta,b,double,1,DEF,$ <= 0.0
Gamma.java,logGamma,x,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ >= 1.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ > a
Gamma.java,regularizedGammaP,n,double,1,MaxIterationsExceededException,$ >= maxIterations
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < a
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ < 1.0
Gamma.java,digamma,x,double,0,RET,$ > 0
Gamma.java,digamma,x,double,0,RET,$ <= S_LIMIT
Gamma.java,digamma,x,double,0,RET,$ >= C_LIMIT
Gamma.java,trigamma,x,double,0,RET,$ > 0
Gamma.java,trigamma,x,double,0,RET,$ <= S_LIMIT
Gamma.java,trigamma,x,double,0,RET,$ >= C_LIMIT
Erf.java,erf,x,double,0,DEF,$ < 0
Vector3DFormat.java,format,obj,null,0,RET,$ instanceof Vector3D
Vector3DFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
Vector3DFormat.java,parse,x,Number,0,RET,$ == null
Vector3DFormat.java,parse,y,Number,0,RET,$ == null
Vector3DFormat.java,parse,z,Number,0,RET,$ == null
Vector3D.java,normalize,s,double,0,DEF,$ == 0
Vector3D.java,orthogonal,threshold,double,0,DEF,$ == 0
Vector3D.java,orthogonal,x,double,1,RET,$ >= -threshold
Vector3D.java,orthogonal,x,double,1,RET,$ <= threshold
Vector3D.java,orthogonal,y,double,0,RET,$ >= -threshold
Vector3D.java,orthogonal,y,double,0,RET,$ <= threshold
Vector3D.java,angle,normProduct,double,0,DEF,$ == 0
Vector3D.java,angle,dot,double,0,RET,$ < -threshold
Vector3D.java,angle,dot,double,0,RET,$ > threshold
Vector3D.java,angle,dot,double,0,RET,$ >= 0
Vector3D.java,equals,other,Object,0,RET,$ == null
Rotation.java,Rotation,norm,double,0,DEF,$ == 0
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$.length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[0].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[1].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[2].length != 3
Rotation.java,Rotation,det,double,0,NotARotationMatrixException,$ < 0.0
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,u1u1,double,0,DEF,$ == 0
Rotation.java,Rotation,u2u2,double,0,DEF,$ == 0
Rotation.java,Rotation,v1v1,double,0,DEF,$ == 0
Rotation.java,Rotation,v2v2,double,0,DEF,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,normProduct,double,0,DEF,$ == 0
Rotation.java,getAxis,squaredSine,double,1,RET,$ == 0
Rotation.java,getAxis,q0,double,0,RET,$ < 0
Rotation.java,getAngle,q0,double,1,RET,$ < -0.1
Rotation.java,getAngle,q0,double,1,RET,$ > 0.1
Rotation.java,getAngle,q0,double,0,RET,$ < 0
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,orthogonalizeMatrix,fn1,double,0,RET,Math.abs($ - fn) <= threshold
Rotation.java,orthogonalizeMatrix,fn,double,0,RET,Math.abs(fn1 - $) <= threshold
ValueServer.java,resetReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,closeReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,DEF,$ == null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,DEF,$.getBinStats().size() == 0
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,$ == null
ValueServer.java,getNextReplay,str,String,0,DEF,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,(str = $.readLine()) == null
ValueServer.java,getNextReplay,str,String,0,DEF,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,(str = $.readLine()) == null
BitsStreamGenerator.java,nextInt,n,int,0,DEF,$ < 1
BitsStreamGenerator.java,nextInt,random,int,0,RET,$ < n
UncorrelatedRandomVectorGenerator.java,UncorrelatedRandomVectorGenerator,mean,double[],0,DEF,$.length != standardDeviation.length
EmpiricalDistributionImpl.java,load,sampleStats,SummaryStatistics,0,DEF,$.getN() == 0
EmpiricalDistributionImpl.java,getAdapter,in,null,1,RET,$ instanceof BufferedReader
EmpiricalDistributionImpl.java,getAdapter,in,null,1,RET,$ instanceof double[]
EmpiricalDistributionImpl.java,getNextValue,stats,SummaryStatistics,0,RET,$.getN() > 0
EmpiricalDistributionImpl.java,getNextValue,stats,SummaryStatistics,1,RET,$.getStandardDeviation() > 0
RandomDataImpl.java,nextHexString,len,int,0,DEF,$ <= 0
RandomDataImpl.java,nextHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextInt,lower,int,0,DEF,$ >= upper
RandomDataImpl.java,nextLong,lower,long,0,DEF,$ >= upper
RandomDataImpl.java,nextSecureHexString,len,int,0,DEF,$ <= 0
RandomDataImpl.java,nextSecureHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextSecureInt,lower,int,0,DEF,$ >= upper
RandomDataImpl.java,nextSecureLong,lower,long,0,DEF,$ >= upper
RandomDataImpl.java,nextPoisson,mean,double,0,DEF,$ <= 0
RandomDataImpl.java,nextPoisson,mean,double,1,RET,$ < pivot
RandomDataImpl.java,nextPoisson,r,double,1,DEF,$ >= p
RandomDataImpl.java,nextPoisson,u,double,1,DEF,$ <= c1
RandomDataImpl.java,nextPoisson,x,double,0,DEF,$ < -mu
RandomDataImpl.java,nextPoisson,c1,double,1,DEF,$ < u
RandomDataImpl.java,nextPoisson,u,double,1,DEF,$ <= c2
RandomDataImpl.java,nextPoisson,x,double,0,DEF,$ > delta
RandomDataImpl.java,nextPoisson,c2,double,1,DEF,$ < u
RandomDataImpl.java,nextPoisson,u,double,1,DEF,$ <= c3
RandomDataImpl.java,nextPoisson,c3,double,1,DEF,$ < u
RandomDataImpl.java,nextPoisson,u,double,1,DEF,$ <= c4
RandomDataImpl.java,nextPoisson,c4,double,0,DEF,$ < u
RandomDataImpl.java,nextGaussian,sigma,double,0,DEF,$ <= 0
RandomDataImpl.java,nextExponential,mean,double,0,DEF,$ < 0.0
RandomDataImpl.java,nextUniform,lower,double,0,DEF,$ >= upper
RandomDataImpl.java,getRan,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,getSecRan,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,nextPermutation,k,int,0,DEF,$ > n
RandomDataImpl.java,nextPermutation,k,int,0,DEF,$ == 0
RandomDataImpl.java,nextSample,k,int,0,DEF,$ > len
RandomDataImpl.java,nextSample,k,int,0,DEF,$ <= 0
RandomDataImpl.java,shuffle,i,int,1,DEF,$ == 0
MersenneTwister.java,setSeed,seed,int[],0,RET,$ == null
MersenneTwister.java,setSeed,i,int,0,DEF,$ >= N
MersenneTwister.java,setSeed,j,int,0,DEF,$ >= seed.length
MersenneTwister.java,setSeed,i,int,0,DEF,$ >= N
MersenneTwister.java,next,mti,int,0,DEF,$ >= N
CorrelatedRandomVectorGenerator.java,CorrelatedRandomVectorGenerator,mean,double[],0,DimensionMismatchException,$.length != order
CorrelatedRandomVectorGenerator.java,decompose,swap,int[],0,DEF,$[rank] != rank
CorrelatedRandomVectorGenerator.java,decompose,rank,int,0,DEF,swap[$] != rank
CorrelatedRandomVectorGenerator.java,decompose,c,double[][],1,NotPositiveDefiniteMatrixException,$[ir][ir] < small
CorrelatedRandomVectorGenerator.java,decompose,ir,int,1,NotPositiveDefiniteMatrixException,c[$][$] < small
CorrelatedRandomVectorGenerator.java,decompose,rank,int,0,NotPositiveDefiniteMatrixException,$ == 0
CorrelatedRandomVectorGenerator.java,decompose,c,double[][],0,NotPositiveDefiniteMatrixException,$[index[i]][index[i]] < -small
CorrelatedRandomVectorGenerator.java,decompose,index,int[],0,NotPositiveDefiniteMatrixException,c[$[i]][$[i]] < -small
CorrelatedRandomVectorGenerator.java,decompose,i,int,0,NotPositiveDefiniteMatrixException,c[index[$]][index[$]] < -small
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
AbstractRandomGenerator.java,nextBytes,i,int,0,DEF,$ > 0
AbstractRandomGenerator.java,nextBytes,bytesOut,int,0,RET,$ == bytes.length
AbstractRandomGenerator.java,nextInt,n,int,0,DEF,$ <= 0
AbstractRandomGenerator.java,nextGaussian,s,double,0,DEF,$ != 0
BisectionSolver.java,solve,fm,double,1,DEF,$ * fmin > 0.0
BisectionSolver.java,solve,fmin,double,1,DEF,fm * $ > 0.0
BisectionSolver.java,solve,min,double,0,RET,Math.abs(max - $) <= absoluteAccuracy
BisectionSolver.java,solve,max,double,0,RET,Math.abs($ - min) <= absoluteAccuracy
SecantSolver.java,solve,y0,double,0,DEF,$ * y1 >= 0
SecantSolver.java,solve,y1,double,0,DEF,y0 * $ >= 0
SecantSolver.java,solve,y1,double,0,RET,Math.abs($) <= functionValueAccuracy
SecantSolver.java,solve,oldDelta,double,0,DEF,delta / $ > 1
SecantSolver.java,solve,delta,double,0,DEF,$ / oldDelta > 1
SecantSolver.java,solve,y1,double,0,DEF,$ > 0
SecantSolver.java,solve,y2,double,0,DEF,$ > 0
LaguerreSolver.java,LaguerreSolver,f,null,1,DEF,$ instanceof PolynomialFunction
LaguerreSolver.java,solve,min,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
LaguerreSolver.java,solve,max,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
LaguerreSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
LaguerreSolver.java,solve,f,null,0,DEF,$ instanceof PolynomialFunction
LaguerreSolver.java,solve,min,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
LaguerreSolver.java,solve,max,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
LaguerreSolver.java,solveAll,n,int,0,DEF,$ < 1
LaguerreSolver.java,solve,n,int,0,DEF,$ < 1
LaguerreSolver.java,solve,oldz,Complex,0,RET,(z.subtract($)).abs() <= tolerance
LaguerreSolver.java,solve,z,Complex,0,RET,($.subtract(oldz)).abs() <= tolerance
LaguerreSolver.java,solve,pv,Complex,0,RET,$.abs() <= functionValueAccuracy
NewtonSolver.java,solve,x0,double,0,RET,Math.abs(x1 - $) <= absoluteAccuracy
NewtonSolver.java,solve,x1,double,0,RET,Math.abs($ - x0) <= absoluteAccuracy
UnivariateRealSolverImpl.java,UnivariateRealSolverImpl,f,UnivariateRealFunction,0,DEF,$ == null
UnivariateRealSolverImpl.java,verifyInterval,lower,double,0,DEF,$ >= upper
UnivariateRealSolverUtils.java,bracket,function,UnivariateRealFunction,0,DEF,$ == null
UnivariateRealSolverUtils.java,bracket,maximumIterations,int,0,DEF,$ <= 0
UnivariateRealSolverUtils.java,bracket,initial,double,0,DEF,$ < lowerBound
UnivariateRealSolverUtils.java,bracket,initial,double,0,DEF,$ > upperBound
UnivariateRealSolverUtils.java,bracket,lowerBound,double,0,DEF,$ >= upperBound
UnivariateRealSolverUtils.java,bracket,fa,double,0,ConvergenceException,$ * fb > 0.0
UnivariateRealSolverUtils.java,bracket,fb,double,0,ConvergenceException,fa * $ > 0.0
UnivariateRealSolverUtils.java,setup,f,UnivariateRealFunction,0,DEF,$ == null
MullerSolver.java,solve,min,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
MullerSolver.java,solve,max,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
MullerSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
MullerSolver.java,solve,y0,double,0,RET,$ == 0.0
MullerSolver.java,solve,y2,double,0,RET,$ == 0.0
MullerSolver.java,solve,oldx,double,0,RET,Math.abs(x - $) <= tolerance
MullerSolver.java,solve,x,double,0,RET,Math.abs($ - oldx) <= tolerance
MullerSolver.java,solve,y,double,0,RET,Math.abs($) <= functionValueAccuracy
MullerSolver.java,solve,ym,double,1,DEF,MathUtils.sign(y0) + MathUtils.sign($) == 0.0
MullerSolver.java,solve,y0,double,1,DEF,MathUtils.sign($) + MathUtils.sign(ym) == 0.0
MullerSolver.java,solve2,y0,double,0,RET,$ == 0.0
MullerSolver.java,solve2,y1,double,0,RET,$ == 0.0
MullerSolver.java,solve2,delta,double,1,DEF,$ >= 0.0
MullerSolver.java,solve2,denominator,double,1,DEF,$ != 0
MullerSolver.java,solve2,oldx,double,0,RET,Math.abs(x - $) <= tolerance
MullerSolver.java,solve2,x,double,0,RET,Math.abs($ - oldx) <= tolerance
MullerSolver.java,solve2,y,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yInitial,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMin,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMin,double,0,RET,yInitial * $ < 0
BrentSolver.java,solve,yInitial,double,0,RET,$ * yMin < 0
BrentSolver.java,solve,yMax,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yInitial,double,0,RET,$ * yMax < 0
BrentSolver.java,solve,yMax,double,0,RET,yInitial * $ < 0
BrentSolver.java,solve,sign,double,1,DEF,$ > 0
BrentSolver.java,solve,yMin,double,1,DEF,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMax,double,1,DEF,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,sign,double,1,DEF,$ < 0
BrentSolver.java,solve,yMin,double,1,DEF,$ == 0.0
BrentSolver.java,solve,y1,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,dx,double,0,RET,Math.abs($) <= tolerance
BrentSolver.java,solve,oldDelta,double,1,DEF,Math.abs($) < tolerance
BrentSolver.java,solve,x0,double,1,DEF,$ == x2
BrentSolver.java,solve,p,double,1,DEF,$ > 0.0
BrentSolver.java,solve,delta,double,1,DEF,Math.abs($) > tolerance
BrentSolver.java,solve,dx,double,1,DEF,$ > 0.0
BrentSolver.java,solve,dx,double,0,DEF,$ <= 0.0
BrentSolver.java,solve,y1,double,0,DEF,$ > 0
BrentSolver.java,solve,y2,double,0,DEF,$ > 0
RiddersSolver.java,solve,min,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
RiddersSolver.java,solve,max,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
RiddersSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
RiddersSolver.java,solve,y1,double,0,RET,$ == 0.0
RiddersSolver.java,solve,y2,double,0,RET,$ == 0.0
RiddersSolver.java,solve,y3,double,0,RET,Math.abs($) <= functionValueAccuracy
RiddersSolver.java,solve,oldx,double,0,RET,Math.abs(x - $) <= tolerance
RiddersSolver.java,solve,x,double,0,RET,Math.abs($ - oldx) <= tolerance
RiddersSolver.java,solve,y,double,0,RET,Math.abs($) <= functionValueAccuracy
RiddersSolver.java,solve,correction,double,1,DEF,$ > 0.0
RiddersSolver.java,solve,y1,double,1,DEF,MathUtils.sign($) + MathUtils.sign(y) == 0.0
RiddersSolver.java,solve,y,double,1,DEF,MathUtils.sign(y1) + MathUtils.sign($) == 0.0
RiddersSolver.java,solve,y2,double,1,DEF,MathUtils.sign($) + MathUtils.sign(y) == 0.0
RiddersSolver.java,solve,y,double,1,DEF,MathUtils.sign(y2) + MathUtils.sign($) == 0.0
PolynomialFunctionLagrangeForm.java,evaluate,dist,double,0,DEF,$ < min_dist
PolynomialFunctionLagrangeForm.java,evaluate,divider,double,0,DuplicateSampleAbscissaException,$ == 0.0
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != j
PolynomialFunctionLagrangeForm.java,computeCoefficients,d,double,0,DEF,$ == 0.0
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != k
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,DEF,Math.min($.length, y.length) < 2
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,y,double[],0,DEF,Math.min(x.length, $.length) < 2
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,DEF,$.length != y.length
PolynomialFunctionNewtonForm.java,verifyInputArray,a,double[],0,DEF,$.length < 1
PolynomialFunctionNewtonForm.java,verifyInputArray,c,double[],0,DEF,$.length < 1
PolynomialsUtils.java,buildPolynomial,degree,int,0,DEF,$ > maxDegree
PolynomialFunction.java,PolynomialFunction,c,double[],0,DEF,$.length < 1
PolynomialFunction.java,evaluate,n,int,0,DEF,$ < 1
PolynomialFunction.java,subtract,coefficients,double[],1,DEF,$.length < p.coefficients.length
PolynomialFunction.java,differentiate,n,int,0,DEF,$ < 1
PolynomialFunction.java,differentiate,n,int,0,RET,$ == 1
PolynomialFunction.java,toString,coefficients,double[],1,RET,$[0] == 0.0
PolynomialFunction.java,toString,coefficients,double[],0,RET,$.length == 1
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] != 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] != 0
PolynomialFunction.java,toString,s,StringBuffer,1,DEF,$.length() > 0
PolynomialFunction.java,toString,coefficients,double[],1,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,1,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,absAi,double,0,DEF,($ - 1) != 0
PolynomialFunction.java,toString,i,int,0,DEF,$ > 1
PolynomialFunction.java,equals,obj,Object,0,RET,$ == null
PolynomialFunction.java,equals,obj,null,0,RET,$ instanceof PolynomialFunction
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,DEF,$.length < 2
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,DEF,$.length - 1 != polynomials.length
PolynomialSplineFunction.java,value,i,int,0,DEF,$ < 0
PolynomialSplineFunction.java,value,i,int,0,DEF,$ >= polynomials.length
LoessInterpolator.java,LoessInterpolator,bandwidth,double,0,MathException,$ < 0
LoessInterpolator.java,LoessInterpolator,bandwidth,double,0,MathException,$ > 1
LoessInterpolator.java,LoessInterpolator,robustnessIters,int,0,MathException,$ < 0
LoessInterpolator.java,smooth,xval,double[],0,MathException,$.length != yval.length
LoessInterpolator.java,smooth,n,int,0,MathException,$ == 0
LoessInterpolator.java,smooth,n,int,0,RET,$ == 1
LoessInterpolator.java,smooth,n,int,0,RET,$ == 2
LoessInterpolator.java,smooth,bandwidthInPoints,int,0,MathException,$ < 2
LoessInterpolator.java,smooth,i,int,0,DEF,$ > 0
LoessInterpolator.java,smooth,k,int,1,DEF,$ < i
LoessInterpolator.java,smooth,iter,int,0,DEF,$ == robustnessIters
LoessInterpolator.java,smooth,medianResidual,double,0,DEF,$ == 0
LoessInterpolator.java,checkStrictlyIncreasing,i,int,0,MathException,$ >= 1
DividedDifferenceInterpolator.java,computeDividedDifference,denominator,double,0,DuplicateSampleAbscissaException,$ == 0.0
SplineInterpolator.java,interpolate,x,double[],0,DEF,$.length != y.length
SplineInterpolator.java,interpolate,x,double[],0,DEF,$.length < 3
LegendreGaussIntegrator.java,integrate,i,int,0,RET,$ + 1 >= minimalIterationCount
LegendreGaussIntegrator.java,integrate,delta,double,0,RET,$ <= limit
TrapezoidIntegrator.java,stage,n,int,1,RET,$ == 0
TrapezoidIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
TrapezoidIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
TrapezoidIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
TrapezoidIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 64
UnivariateRealIntegratorImpl.java,UnivariateRealIntegratorImpl,f,UnivariateRealFunction,0,DEF,$ == null
UnivariateRealIntegratorImpl.java,verifyInterval,lower,double,0,DEF,$ >= upper
UnivariateRealIntegratorImpl.java,verifyIterationCount,minimalIterationCount,int,0,DEF,$ <= 0
UnivariateRealIntegratorImpl.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ <= minimalIterationCount
SimpsonIntegrator.java,integrate,minimalIterationCount,int,0,RET,$ == 1
SimpsonIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
SimpsonIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
SimpsonIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
SimpsonIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 64
RombergIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
RombergIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
RombergIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
RombergIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 32
ComplexFormat.java,format,im,double,1,DEF,$ < 0.0
ComplexFormat.java,format,im,double,0,DEF,$ > 0.0
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Complex
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Number
ComplexFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
ComplexFormat.java,parse,re,Number,0,RET,$ == null
ComplexFormat.java,parse,im,Number,0,RET,$ == null
ComplexFormat.java,setImaginaryCharacter,imaginaryCharacter,String,0,DEF,$ == null
ComplexFormat.java,setImaginaryCharacter,imaginaryCharacter,String,0,DEF,$.length() == 0
ComplexFormat.java,setImaginaryFormat,imaginaryFormat,NumberFormat,0,DEF,$ == null
ComplexFormat.java,setRealFormat,realFormat,NumberFormat,0,DEF,$ == null
Complex.java,abs,imaginary,double,0,RET,$ == 0.0
Complex.java,abs,real,double,0,RET,$ == 0.0
Complex.java,divide,c,double,0,RET,$ == 0.0
Complex.java,divide,d,double,0,RET,$ == 0.0
Complex.java,divide,d,double,0,RET,$ == 0.0
Complex.java,divide,c,double,0,RET,$ == 0.0
Complex.java,equals,other,Object,1,DEF,$ == null
Complex.java,pow,x,Complex,0,NullPointerException,$ == null
Complex.java,sqrt,real,double,0,RET,$ == 0.0
Complex.java,sqrt,imaginary,double,0,RET,$ == 0.0
Complex.java,sqrt,real,double,1,RET,$ >= 0.0
Complex.java,nthRoot,n,int,0,DEF,$ <= 0
ComplexUtils.java,polar2Complex,r,double,0,DEF,$ < 0
DescriptiveStatistics.java,addValue,windowSize,int,1,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ < 1
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,getPercentile,percentileImpl,null,1,DEF,$ instanceof Percentile
AbstractStorelessUnivariateStatistic.java,evaluate,values,double[],0,DEF,$ == null
AbstractStorelessUnivariateStatistic.java,incrementAll,values,double[],0,DEF,$ == null
AbstractStorelessUnivariateStatistic.java,equals,object,Object,0,RET,$ instanceof AbstractStorelessUnivariateStatistic == false
AbstractStorelessUnivariateStatistic.java,equals,object,null,0,RET,$ instanceof AbstractStorelessUnivariateStatistic
StatisticalSummaryValues.java,equals,object,Object,0,RET,$ instanceof StatisticalSummaryValues == false
StatisticalSummaryValues.java,equals,object,null,0,RET,$ instanceof StatisticalSummaryValues
FirstMoment.java,increment,n,long,0,DEF,$ == 0
GeometricMean.java,getResult,sumOfLogs,StorelessUnivariateStatistic,1,RET,$.getN() > 0
ThirdMoment.java,increment,n,long,0,DEF,$ < 1
Kurtosis.java,getResult,moment,FourthMoment,0,DEF,$.getN() > 3
Kurtosis.java,getResult,moment,FirstMoment,1,DEF,$.n <= 3
Kurtosis.java,getResult,variance,double,1,DEF,$ < 10E-20
Kurtosis.java,evaluate,length,int,0,DEF,$ > 3
Skewness.java,getResult,moment,FirstMoment,0,RET,$.n < 3
Skewness.java,getResult,variance,double,1,RET,$ < 10E-20
Skewness.java,evaluate,length,int,0,DEF,$ > 2
FourthMoment.java,increment,n,long,0,DEF,$ < 1
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 0
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 1
Variance.java,evaluate,values,double[],0,DEF,$ == null
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
VectorialCovariance.java,increment,v,double[],0,DimensionMismatchException,$.length != sums.length
VectorialCovariance.java,getResult,n,long,0,DEF,$ > 1
VectorialCovariance.java,equals,obj,Object,0,RET,$ == null
VectorialCovariance.java,equals,obj,null,0,RET,$ instanceof VectorialCovariance
VectorialCovariance.java,equals,isBiasCorrected,boolean,0,RET,$ != other.isBiasCorrected
VectorialCovariance.java,equals,n,long,0,RET,$ != other.n
SecondMoment.java,increment,n,long,0,DEF,$ < 1
VectorialMean.java,increment,v,double[],0,DimensionMismatchException,$.length != means.length
VectorialMean.java,equals,obj,Object,0,RET,$ == null
VectorialMean.java,equals,obj,null,0,RET,$ instanceof VectorialMean
Percentile.java,evaluate,p,double,0,DEF,$ > 100
Percentile.java,evaluate,p,double,0,DEF,$ <= 0
Percentile.java,evaluate,length,int,0,RET,$ == 0
Percentile.java,evaluate,length,int,0,RET,$ == 1
Percentile.java,evaluate,pos,double,0,RET,$ < 1
Percentile.java,evaluate,pos,double,0,RET,$ >= n
Percentile.java,setQuantile,p,double,0,DEF,$ <= 0
Percentile.java,setQuantile,p,double,0,DEF,$ > 100
Max.java,increment,d,double,0,DEF,$ > value
Min.java,increment,d,double,0,DEF,$ < value
AbstractUnivariateStatistic.java,test,values,double[],0,DEF,$ == null
AbstractUnivariateStatistic.java,test,begin,int,0,DEF,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,DEF,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,DEF,begin + $ > values.length
AbstractUnivariateStatistic.java,test,begin,int,0,DEF,$ + length > values.length
AbstractUnivariateStatistic.java,test,length,int,0,RET,$ == 0
MultivariateSummaryStatistics.java,append,i,int,0,DEF,$ > 0
MultivariateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof MultivariateSummaryStatistics == false
MultivariateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof MultivariateSummaryStatistics
MultivariateSummaryStatistics.java,checkEmpty,n,long,0,DEF,$ > 0
MultivariateSummaryStatistics.java,checkDimension,dimension,int,0,DimensionMismatchException,$ != k
AggregateSummaryStatistics.java,aggregate,statistics,Collection<SummaryStatistics>,0,RET,$ == null
AggregateSummaryStatistics.java,aggregate,current,SummaryStatistics,0,DEF,$.getMin() < min
AggregateSummaryStatistics.java,aggregate,current,SummaryStatistics,0,DEF,$.getMax() > max
AggregateSummaryStatistics.java,aggregate,n,long,1,DEF,$ == 0
AggregateSummaryStatistics.java,aggregate,n,long,1,DEF,$ == 1
AggregateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof AggregatingSummaryStatistics == false
AggregateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof AggregatingSummaryStatistics
SummaryStatistics.java,addValue,meanImpl,null,0,DEF,$ instanceof Mean
SummaryStatistics.java,addValue,varianceImpl,null,0,DEF,$ instanceof Variance
SummaryStatistics.java,addValue,geoMeanImpl,null,0,DEF,$ instanceof GeometricMean
SummaryStatistics.java,getMean,mean,Mean,1,RET,$ == meanImpl
SummaryStatistics.java,getVariance,varianceImpl,StorelessUnivariateStatistic,1,RET,$ == variance
SummaryStatistics.java,clear,meanImpl,StorelessUnivariateStatistic,0,DEF,$ != mean
SummaryStatistics.java,clear,varianceImpl,StorelessUnivariateStatistic,0,DEF,$ != variance
SummaryStatistics.java,equals,object,Object,0,RET,$ instanceof SummaryStatistics == false
SummaryStatistics.java,equals,object,null,0,RET,$ instanceof SummaryStatistics
SummaryStatistics.java,checkEmpty,n,long,0,DEF,$ > 0
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.geoMean == source.geoMeanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.max == source.maxImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.mean == source.meanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.min == source.minImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sum == source.sumImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.variance == source.varianceImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumLog == source.sumLogImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumsq == source.sumsqImpl
Product.java,increment,n,long,1,DEF,$ == 0
SumOfLogs.java,getResult,n,int,1,RET,$ > 0
SumOfSquares.java,increment,n,long,1,DEF,$ == 0
Sum.java,increment,n,long,1,DEF,$ == 0
TTestImpl.java,checkSignificanceLevel,alpha,double,0,DEF,$ <= 0
TTestImpl.java,checkSignificanceLevel,alpha,double,0,DEF,$ > 0.5
TTestImpl.java,checkSampleData,data,double[],0,DEF,$ == null
TTestImpl.java,checkSampleData,data,double[],0,DEF,$.length < 2
TTestImpl.java,checkSampleData,stat,StatisticalSummary,0,DEF,$ == null
TTestImpl.java,checkSampleData,stat,StatisticalSummary,0,DEF,$.getN() < 2
OneWayAnovaImpl.java,anovaTest,alpha,double,0,DEF,$ <= 0
OneWayAnovaImpl.java,anovaTest,alpha,double,0,DEF,$ > 0.5
OneWayAnovaImpl.java,anovaStats,categoryData,Collection<double[]>,0,DEF,$.size() < 2
OneWayAnovaImpl.java,anovaStats,array,double[],0,DEF,$.length <= 1
ChiSquareTestImpl.java,chiSquare,expected,double[],0,DEF,$.length < 2
ChiSquareTestImpl.java,chiSquare,expected,double[],0,DEF,$.length != observed.length
ChiSquareTestImpl.java,chiSquare,sumObserved,double,0,DEF,Math.abs(sumExpected - $) > 10E-6
ChiSquareTestImpl.java,chiSquare,sumExpected,double,0,DEF,Math.abs($ - sumObserved) > 10E-6
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,DEF,$ <= 0
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,DEF,$ > 0.5
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,DEF,$ <= 0
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,DEF,$ > 0.5
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],0,DEF,$.length < 2
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],0,DEF,$.length != observed2.length
ChiSquareTestImpl.java,chiSquareDataSetsComparison,countSum1,long,0,DEF,$ == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,countSum2,long,0,DEF,$ == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,i,int,1,DEF,observed1[$] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],1,DEF,$[i] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed2,long[],1,DEF,$[i] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,i,int,1,DEF,observed2[$] == 0
ChiSquareTestImpl.java,chiSquareTestDataSetsComparison,alpha,double,0,DEF,$ <= 0
ChiSquareTestImpl.java,chiSquareTestDataSetsComparison,alpha,double,0,DEF,$ > 0.5
ChiSquareTestImpl.java,checkArray,in,long[][],0,DEF,$.length < 2
ChiSquareTestImpl.java,checkArray,in,long[][],0,DEF,$[0].length < 2
ChiSquareTestImpl.java,checkPositive,in,double[],0,DEF,$[i] <= 0
ChiSquareTestImpl.java,checkPositive,i,int,0,DEF,in[$] <= 0
ChiSquareTestImpl.java,checkNonNegative,in,long[],0,DEF,$[i] < 0
ChiSquareTestImpl.java,checkNonNegative,i,int,0,DEF,in[$] < 0
ChiSquareTestImpl.java,checkNonNegative,in,long[][],0,DEF,$[i][j] < 0
ChiSquareTestImpl.java,checkNonNegative,i,int,0,DEF,in[$][j] < 0
ChiSquareTestImpl.java,checkNonNegative,j,int,0,DEF,in[i][$] < 0
NaturalRanking.java,rank,ranks,IntDoublePair[],1,DEF,Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
NaturalRanking.java,rank,i,int,1,DEF,Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
NaturalRanking.java,rank,tiesTrace,List<Integer>,0,DEF,$.size() > 1
NaturalRanking.java,rank,tiesTrace,List<Integer>,0,DEF,$.size() > 1
NaturalRanking.java,rank,nanStrategy,NaNStrategy,0,DEF,$ == NaNStrategy.FIXED
NaturalRanking.java,restoreNaNs,nanPositions,List<Integer>,0,RET,$.size() == 0
StatUtils.java,sumDifference,n,int,0,DEF,$ != sample2.length
StatUtils.java,sumDifference,n,int,0,DEF,$ < 1
StatUtils.java,varianceDifference,n,int,0,DEF,$ < 2
StatUtils.java,varianceDifference,n,int,0,DEF,$ != sample2.length
KMeansPlusPlusClusterer.java,chooseInitialCenters,i,int,0,DEF,dx2[$] >= r
KMeansPlusPlusClusterer.java,chooseInitialCenters,dx2,double[],0,DEF,$[i] >= r
KMeansPlusPlusClusterer.java,getNearestCluster,distance,double,0,DEF,$ < minDistance
EuclideanIntegerPoint.java,equals,other,null,0,RET,$ instanceof EuclideanIntegerPoint
EuclideanIntegerPoint.java,equals,point,int[],0,RET,$.length != otherPoint.length
PearsonsCorrelation.java,PearsonsCorrelation,covarianceMatrix,RealMatrix,0,DEF,$ == null
PearsonsCorrelation.java,getCorrelationPValues,i,int,1,DEF,$ == j
PearsonsCorrelation.java,correlation,xArray,double[],1,RET,$.length == yArray.length
PearsonsCorrelation.java,correlation,xArray,double[],1,RET,$.length > 1
PearsonsCorrelation.java,checkSufficientData,nRows,int,0,DEF,$ < 2
PearsonsCorrelation.java,checkSufficientData,nCols,int,0,DEF,$ < 2
SpearmansCorrelation.java,correlation,xArray,double[],1,RET,$.length == yArray.length
SpearmansCorrelation.java,correlation,xArray,double[],1,RET,$.length > 1
Covariance.java,covariance,length,int,1,DEF,$ == yArray.length
Covariance.java,covariance,length,int,1,DEF,$ > 1
Covariance.java,checkSufficientData,nRows,int,0,DEF,$ < 2
Covariance.java,checkSufficientData,nCols,int,0,DEF,$ < 2
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ == j
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ < p
OLSMultipleLinearRegression.java,checkUpperTriangular,r,int,0,DEF,Math.abs(m.getEntry($, c)) > epsilon
OLSMultipleLinearRegression.java,checkUpperTriangular,c,int,0,DEF,Math.abs(m.getEntry(r, $)) > epsilon
OLSMultipleLinearRegression.java,checkUpperTriangular,m,RealMatrix,0,DEF,Math.abs($.getEntry(r, c)) > epsilon
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],1,DEF,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,y,double[],1,DEF,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],1,DEF,$.length != y.length
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,DEF,$.length > 0
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,DEF,$[0].length > x.length
AbstractMultipleLinearRegression.java,validateCovarianceData,x,double[][],0,DEF,$.length != covariance.length
AbstractMultipleLinearRegression.java,validateCovarianceData,covariance,double[][],0,DEF,$.length > 0
SimpleRegression.java,addData,n,long,1,DEF,$ == 0
SimpleRegression.java,addData,n,long,0,DEF,$ > 2
SimpleRegression.java,removeData,n,long,0,DEF,$ > 0
SimpleRegression.java,removeData,n,long,0,DEF,$ > 2
SimpleRegression.java,getSlope,n,long,0,RET,$ < 2
SimpleRegression.java,getTotalSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getXSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getMeanSquareError,n,long,0,RET,$ < 3
SimpleRegression.java,getR,b1,double,0,DEF,$ < 0
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,DEF,$ >= 1
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,DEF,$ <= 0
SimpleRegression.java,setDistribution,n,long,0,DEF,$ > 2
GLSMultipleLinearRegression.java,getOmegaInverse,OmegaInverse,RealMatrix,0,DEF,$ == null
Frequency.java,addValue,v,null,1,DEF,$ instanceof Comparable<?>
Frequency.java,addValue,v,null,0,DEF,$ instanceof Integer
Frequency.java,addValue,count,Long,1,DEF,$ == null
Frequency.java,getCount,v,null,0,RET,$ instanceof Integer
Frequency.java,getCount,count,Long,0,DEF,$ != null
Frequency.java,getPct,sumFreq,long,0,RET,$ == 0
Frequency.java,getCumFreq,v,null,0,RET,$ instanceof Integer
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,DEF,$ == null
Frequency.java,getCumFreq,value,Long,0,DEF,$ != null
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,RET,$.compare(v, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,v,Comparable<>,0,RET,c.compare($, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,freqTable,TreeMap<Comparable<?>,Long>,0,RET,c.compare(v, $.firstKey()) < 0
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,RET,$.compare(v, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,v,Comparable<>,0,RET,c.compare($, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,freqTable,TreeMap<Comparable<?>,Long>,0,RET,c.compare(v, $.lastKey()) >= 0
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,1,DEF,$.compare(v, nextValue) > 0
Frequency.java,getCumFreq,v,Comparable<>,1,DEF,c.compare($, nextValue) > 0
Frequency.java,getCumFreq,nextValue,Comparable<>,1,DEF,c.compare(v, $) > 0
Frequency.java,getCumPct,sumFreq,long,0,RET,$ == 0
Frequency.java,equals,obj,Object,0,RET,$ == null
Frequency.java,equals,obj,null,0,RET,$ instanceof Frequency
Frequency.java,equals,freqTable,TreeMap<Comparable<?>,Long>,1,RET,$ == null
Frequency.java,equals,other,Frequency,0,RET,$.freqTable != null
FDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
FDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
FDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
FDistributionImpl.java,getInitialDomain,d,double,0,DEF,$ > 2.0
FDistributionImpl.java,setNumeratorDegreesOfFreedom,degreesOfFreedom,double,0,DEF,$ <= 0.0
FDistributionImpl.java,setDenominatorDegreesOfFreedom,degreesOfFreedom,double,0,DEF,$ <= 0.0
PoissonDistributionImpl.java,setMean,p,double,0,DEF,$ <= 0
PoissonDistributionImpl.java,probability,x,int,0,RET,$ < 0
PoissonDistributionImpl.java,probability,x,int,0,RET,$ == Integer.MAX_VALUE
PoissonDistributionImpl.java,cumulativeProbability,x,int,0,RET,$ < 0
PoissonDistributionImpl.java,cumulativeProbability,x,int,0,RET,$ == Integer.MAX_VALUE
HypergeometricDistributionImpl.java,HypergeometricDistributionImpl,numberOfSuccesses,int,0,DEF,$ > populationSize
HypergeometricDistributionImpl.java,HypergeometricDistributionImpl,sampleSize,int,0,DEF,$ > populationSize
HypergeometricDistributionImpl.java,setNumberOfSuccesses,num,int,0,DEF,$ < 0
HypergeometricDistributionImpl.java,setPopulationSize,size,int,0,DEF,$ <= 0
HypergeometricDistributionImpl.java,setSampleSize,size,int,0,DEF,$ < 0
GammaDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
GammaDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
GammaDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
GammaDistributionImpl.java,setAlpha,alpha,double,0,DEF,$ <= 0.0
GammaDistributionImpl.java,setBeta,beta,double,0,DEF,$ <= 0.0
GammaDistributionImpl.java,density,x,Double,0,RET,$ < 0
GammaDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
GammaDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
TDistributionImpl.java,setDegreesOfFreedom,degreesOfFreedom,double,0,DEF,$ <= 0.0
TDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ == 0.0
TDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ < 0.0
TDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
TDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
BinomialDistributionImpl.java,setNumberOfTrials,trials,int,0,DEF,$ < 0
BinomialDistributionImpl.java,setProbabilityOfSuccess,p,double,0,DEF,$ < 0.0
BinomialDistributionImpl.java,setProbabilityOfSuccess,p,double,0,DEF,$ > 1.0
BinomialDistributionImpl.java,cumulativeProbability,x,int,1,DEF,$ < 0
BinomialDistributionImpl.java,probability,x,int,1,DEF,$ < 0
BinomialDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
BinomialDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
ExponentialDistributionImpl.java,setMean,mean,double,0,DEF,$ <= 0.0
ExponentialDistributionImpl.java,density,x,Double,0,RET,$ < 0
ExponentialDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ < 0.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ > 1.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1.0
ExponentialDistributionImpl.java,getDomainUpperBound,p,double,1,RET,$ < .5
ExponentialDistributionImpl.java,getInitialDomain,p,double,1,RET,$ < .5
ZipfDistributionImpl.java,setNumberOfElements,n,int,0,DEF,$ <= 0
ZipfDistributionImpl.java,setExponent,s,double,0,DEF,$ <= 0.0
ZipfDistributionImpl.java,probability,x,int,0,RET,$ <= 0
ZipfDistributionImpl.java,cumulativeProbability,x,int,1,RET,$ <= 0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ < 0.0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ > 1.0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
CauchyDistributionImpl.java,setScale,s,double,0,DEF,$ <= 0.0
CauchyDistributionImpl.java,getDomainLowerBound,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ > .5
NormalDistributionImpl.java,setStandardDeviation,sd,double,0,DEF,$ <= 0.0
NormalDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
NormalDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
NormalDistributionImpl.java,getDomainLowerBound,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ > .5
PascalDistributionImpl.java,setNumberOfSuccesses,successes,int,0,DEF,$ < 0
PascalDistributionImpl.java,setProbabilityOfSuccess,p,double,0,DEF,$ < 0.0
PascalDistributionImpl.java,setProbabilityOfSuccess,p,double,0,DEF,$ > 1.0
PascalDistributionImpl.java,cumulativeProbability,x,int,1,DEF,$ < 0
PascalDistributionImpl.java,probability,x,int,1,DEF,$ < 0
PascalDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
PascalDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
AbstractDistribution.java,cumulativeProbability,x0,double,0,DEF,$ > x1
AbstractIntegerDistribution.java,cumulativeProbability,x0,double,0,DEF,$ > x1
AbstractIntegerDistribution.java,cumulativeProbability,x0,double,1,RET,Math.floor($) < x0
AbstractIntegerDistribution.java,probability,fl,double,1,RET,$ == x
AbstractIntegerDistribution.java,cumulativeProbability,x0,int,0,DEF,$ > x1
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,DEF,$ < 0.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,DEF,$ > 1.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,pm,double,1,DEF,$ > p
AbstractIntegerDistribution.java,inverseCumulativeProbability,xm,int,1,DEF,$ == x1
AbstractIntegerDistribution.java,inverseCumulativeProbability,xm,int,1,DEF,$ == x0
ChiSquaredDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
ChiSquaredDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
ChiSquaredDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
ChiSquaredDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
AbstractContinuousDistribution.java,inverseCumulativeProbability,p,double,0,DEF,$ < 0.0
AbstractContinuousDistribution.java,inverseCumulativeProbability,p,double,0,DEF,$ > 1.0
AbstractContinuousDistribution.java,inverseCumulativeProbability,rootFindingFunction,UnivariateRealFunction,0,RET,Math.abs($.value(lowerBound)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,lowerBound,double,0,RET,Math.abs(rootFindingFunction.value($)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,upperBound,double,0,RET,Math.abs(rootFindingFunction.value($)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,rootFindingFunction,UnivariateRealFunction,0,RET,Math.abs($.value(upperBound)) < 1E-6
BetaDistributionImpl.java,density,x,Double,1,RET,$ < 0
BetaDistributionImpl.java,density,x,Double,1,RET,$ > 1
BetaDistributionImpl.java,density,x,Double,1,MathException:RET,$ == 0
BetaDistributionImpl.java,density,alpha,double,0,MathException,$ < 1
BetaDistributionImpl.java,density,x,Double,1,MathException:RET,$ == 1
BetaDistributionImpl.java,density,beta,double,0,MathException,$ < 1
BetaDistributionImpl.java,inverseCumulativeProbability,p,double,1,RET,$ == 0
BetaDistributionImpl.java,inverseCumulativeProbability,p,double,1,RET,$ == 1
BetaDistributionImpl.java,cumulativeProbability,x,double,1,RET,$ <= 0
BetaDistributionImpl.java,cumulativeProbability,x,double,1,RET,$ >= 1
WeibullDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ < 0.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ > 1.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
WeibullDistributionImpl.java,setShape,alpha,double,0,DEF,$ <= 0.0
WeibullDistributionImpl.java,setScale,beta,double,0,DEF,$ <= 0.0
FastFourierTransformer.java,fft,f,double[],0,RET,$.length == 1
FastFourierTransformer.java,fft,N,int,0,RET,$ == 1
FastFourierTransformer.java,fft,N,int,0,RET,$ == 2
FastFourierTransformer.java,sample,n,int,0,DEF,$ <= 0
FastFourierTransformer.java,verifyInterval,lower,double,0,DEF,$ >= upper
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == dimensionSize.length
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == d
FastFourierTransformer.java,get,vector,int[],0,RET,$ == null
FastFourierTransformer.java,get,dimensionSize,int[],0,DEF,$.length > 0
FastFourierTransformer.java,get,vector,int[],0,DEF,$.length != dimensionSize.length
FastFourierTransformer.java,set,vector,int[],0,RET,$ == null
FastFourierTransformer.java,set,dimensionSize,int[],0,DEF,$.length > 0
FastFourierTransformer.java,set,vector,int[],0,DEF,$.length != dimensionSize.length
FastFourierTransformer.java,isForward,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,computeOmega,n,int,0,DEF,$ == 0
FastFourierTransformer.java,computeOmega,absN,int,0,RET,$ == omegaCount
FastFourierTransformer.java,getOmegaReal,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,getOmegaReal,k,int,0,DEF,$ < 0
FastFourierTransformer.java,getOmegaReal,k,int,0,DEF,$ >= omegaCount
FastFourierTransformer.java,getOmegaImaginary,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,getOmegaImaginary,k,int,0,DEF,$ < 0
FastFourierTransformer.java,getOmegaImaginary,k,int,0,DEF,$ >= omegaCount
FastCosineTransformer.java,fct,N,int,0,RET,$ == 1
FastSineTransformer.java,fst,f,double[],0,DEF,$[0] != 0.0
FastSineTransformer.java,fst,N,int,0,RET,$ == 1
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,source.substring($, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,endIndex,int,0,DEF,source.substring(startIndex, $).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,source,String,0,DEF,$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,sb,StringBuffer,0,DEF,source.substring(startIndex, endIndex).compareTo($.toString()) == 0
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,$ == endIndex
CompositeFormat.java,parseNumber,number,Number,0,DEF,$ != null
CompositeFormat.java,parseFixedstring,startIndex,int,0,RET,source.substring($, endIndex).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,endIndex,int,0,RET,source.substring(startIndex, $).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,expected,String,0,RET,source.substring(startIndex, endIndex).compareTo($) != 0
CompositeFormat.java,parseFixedstring,source,String,0,RET,$.substring(startIndex, endIndex).compareTo(expected) != 0
BigReal.java,equals,other,Object,0,RET,$ == null
ResizableDoubleArray.java,addElement,startIndex,int,0,DEF,($ + numElements) > internalArray.length
ResizableDoubleArray.java,addElement,numElements,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,addElementRolling,startIndex,int,0,DEF,($ + (numElements + 1)) > internalArray.length
ResizableDoubleArray.java,addElementRolling,numElements,int,0,DEF,(startIndex + ($ + 1)) > internalArray.length
ResizableDoubleArray.java,substituteMostRecentElement,numElements,int,0,DEF,$ < 1
ResizableDoubleArray.java,checkContractExpand,contractionCriteria,float,0,DEF,$ < expansionFactor
ResizableDoubleArray.java,checkContractExpand,contractionCriteria,float,0,DEF,$ <= 1.0
ResizableDoubleArray.java,checkContractExpand,expansionFactor,float,0,DEF,$ <= 1.0
ResizableDoubleArray.java,discardExtremeElements,i,int,1,DEF,$ > numElements
ResizableDoubleArray.java,discardExtremeElements,i,int,1,DEF,$ < 0
ResizableDoubleArray.java,expand,expansionMode,int,1,DEF,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,getElement,index,int,1,DEF,$ >= numElements
ResizableDoubleArray.java,getElement,index,int,1,RET,$ >= 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ < 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ + 1 > numElements
ResizableDoubleArray.java,setElement,startIndex,int,0,DEF,($ + index) >= internalArray.length
ResizableDoubleArray.java,setElement,index,int,0,DEF,(startIndex + $) >= internalArray.length
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,DEF,$ != MULTIPLICATIVE_MODE
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,DEF,$ != ADDITIVE_MODE
ResizableDoubleArray.java,setInitialCapacity,initialCapacity,int,1,DEF,$ > 0
ResizableDoubleArray.java,setNumElements,i,int,0,DEF,$ < 0
ResizableDoubleArray.java,setNumElements,startIndex,int,0,DEF,($ + i) > internalArray.length
ResizableDoubleArray.java,setNumElements,i,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,shouldContract,expansionMode,int,1,RET,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,equals,object,Object,0,RET,$ instanceof ResizableDoubleArray == false
ResizableDoubleArray.java,equals,object,null,0,RET,$ instanceof ResizableDoubleArray
OpenIntToFieldHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToFieldHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToFieldHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToFieldHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToFieldHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToFieldHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToFieldHashMap.java,key,referenceCount,int,0,DEF,$ != count
OpenIntToFieldHashMap.java,key,current,int,0,DEF,$ < 0
OpenIntToFieldHashMap.java,value,referenceCount,int,0,DEF,$ != count
OpenIntToFieldHashMap.java,value,current,int,0,DEF,$ < 0
OpenIntToFieldHashMap.java,advance,referenceCount,int,0,DEF,$ != count
OpenIntToFieldHashMap.java,advance,current,int,0,DEF,$ < 0
ContinuedFraction.java,evaluate,a,double,1,DEF,$ != 0.0
ContinuedFraction.java,evaluate,b,double,1,DEF,$ != 0
ContinuedFraction.java,evaluate,n,int,0,MaxIterationsExceededException,$ >= maxIterations
MathUtils.java,addAndCheck,s,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,addAndCheck,s,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,addAndCheck,a,long,1,DEF,$ > b
MathUtils.java,addAndCheck,a,long,1,ArithmeticException,$ < 0
MathUtils.java,addAndCheck,b,long,1,ArithmeticException,$ < 0
MathUtils.java,addAndCheck,b,long,1,DEF,Long.MIN_VALUE - $ <= a
MathUtils.java,binomialCoefficient,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficient,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficient,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 61
MathUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 66
MathUtils.java,binomialCoefficientDouble,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficientDouble,n,int,0,RET,$ < 67
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 67
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 1030
MathUtils.java,checkBinomial,n,int,0,DEF,$ < k
MathUtils.java,checkBinomial,n,int,0,DEF,$ < 0
MathUtils.java,compareTo,x,double,0,RET,$ < y
MathUtils.java,equals,xInt,long,0,DEF,$ < 0
MathUtils.java,equals,yInt,long,0,DEF,$ < 0
MathUtils.java,equals,x,double[],0,RET,$ == null
MathUtils.java,equals,y,double[],0,RET,$ == null
MathUtils.java,equals,x,double[],0,RET,$.length != y.length
MathUtils.java,factorial,n,int,0,DEF,$ < 0
MathUtils.java,factorial,n,int,0,ArithmeticException,$ > 20
MathUtils.java,factorialDouble,n,int,0,DEF,$ < 0
MathUtils.java,factorialDouble,n,int,0,RET,$ < 21
MathUtils.java,factorialLog,n,int,0,DEF,$ < 0
MathUtils.java,factorialLog,n,int,0,RET,$ < 21
MathUtils.java,gcd,u,int,0,RET,$ == 0
MathUtils.java,gcd,v,int,0,RET,$ == 0
MathUtils.java,gcd,u,int,0,DEF,$ == Integer.MIN_VALUE
MathUtils.java,gcd,v,int,0,DEF,$ == Integer.MIN_VALUE
MathUtils.java,gcd,u,int,0,DEF,$ > 0
MathUtils.java,gcd,v,int,0,DEF,$ > 0
MathUtils.java,gcd,k,int,0,DEF,$ == 31
MathUtils.java,gcd,t,int,1,DEF,$ > 0
MathUtils.java,lcm,a,int,0,RET,$==0
MathUtils.java,lcm,b,int,0,RET,$==0
MathUtils.java,lcm,lcm,int,0,ArithmeticException,$ == Integer.MIN_VALUE
MathUtils.java,mulAndCheck,m,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,mulAndCheck,m,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,mulAndCheck,a,long,1,DEF,$ > b
MathUtils.java,mulAndCheck,a,long,1,ArithmeticException,$ < 0
MathUtils.java,mulAndCheck,b,long,1,ArithmeticException,$ < 0
MathUtils.java,mulAndCheck,b,long,1,ArithmeticException,$ > 0
MathUtils.java,mulAndCheck,b,long,1,DEF,Long.MIN_VALUE / $ <= a
MathUtils.java,mulAndCheck,a,long,1,ArithmeticException,$ > 0
MathUtils.java,nextAfter,d,double,0,RET,$ == 0
MathUtils.java,nextAfter,d,double,1,RET,$ * (direction - $) >= 0
MathUtils.java,nextAfter,direction,double,1,RET,d * ($ - d) >= 0
MathUtils.java,nextAfter,mantissa,long,1,RET,$ == 0x000fffffffffffffL
MathUtils.java,nextAfter,mantissa,long,1,RET,$ == 0L
MathUtils.java,scalb,d,double,0,RET,$ == 0
MathUtils.java,roundUnscaled,sign,double,1,DEF,$ == -1
MathUtils.java,roundUnscaled,sign,double,1,DEF,$ == -1
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ < 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ >= 0.5
MathUtils.java,subAndCheck,s,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,subAndCheck,s,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,subAndCheck,b,long,1,ArithmeticException,$ == Long.MIN_VALUE
MathUtils.java,subAndCheck,a,long,1,DEF,$ < 0
MathUtils.java,pow,e,int,0,DEF,$ < 0
MathUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,long,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,int,0,DEF,$ < 0
MathUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,long,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,int,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,BigInteger,0,DEF,$.compareTo(BigInteger.ZERO) < 0
DefaultTransformer.java,transform,o,Object,0,MathException,$ == null
DefaultTransformer.java,transform,o,null,0,RET,$ instanceof Number
DefaultTransformer.java,equals,other,Object,0,RET,$ == null
TransformerMap.java,transform,o,null,1,DEF,$ instanceof Number
TransformerMap.java,transform,o,null,1,DEF,$ instanceof String
TransformerMap.java,transform,trans,NumberTransformer,0,DEF,$ != null
TransformerMap.java,equals,other,Object,0,RET,$ == null
OpenIntToDoubleHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToDoubleHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToDoubleHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToDoubleHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToDoubleHashMap.java,key,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,key,current,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,value,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,value,current,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,advance,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,advance,current,int,0,DEF,$ < 0
BigFraction.java,getReducedFraction,numerator,int,0,RET,$ == 0
BigFraction.java,BigFraction,num,BigInteger,0,DEF,$ == null
BigFraction.java,BigFraction,den,BigInteger,0,DEF,$ == null
BigFraction.java,BigFraction,gcd,BigInteger,0,DEF,BigInteger.ONE.compareTo($) < 0
BigFraction.java,BigFraction,den,BigInteger,0,DEF,BigInteger.ZERO.compareTo($) > 0
BigFraction.java,BigFraction,exponent,long,0,DEF,$ != 0
BigFraction.java,BigFraction,sign,long,0,DEF,$ != 0
BigFraction.java,BigFraction,k,int,1,DEF,$ < 0
BigFraction.java,BigFraction,a0,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,value,double,0,RET,Math.abs(a0 - $) < epsilon
BigFraction.java,BigFraction,a0,long,0,RET,Math.abs($ - value) < epsilon
BigFraction.java,BigFraction,p2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,q2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,n,int,1,DEF,$ < maxIterations
BigFraction.java,BigFraction,convergent,double,1,DEF,Math.abs($ - value) > epsilon
BigFraction.java,BigFraction,value,double,1,DEF,Math.abs(convergent - $) > epsilon
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,BigFraction,n,int,0,FractionConversionException,$ >= maxIterations
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,equals,other,null,0,DEF,$ instanceof BigFraction
BigFraction.java,multiply,fraction,BigFraction,0,DEF,$.getNumeratorAsInt() != 0
BigFraction.java,pow,exponent,int,0,RET,$ < 0
BigFraction.java,pow,exponent,long,0,RET,$ < 0
BigFraction.java,pow,exponent,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
Fraction.java,Fraction,a0,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,value,double,0,RET,Math.abs(a0 - $) < epsilon
Fraction.java,Fraction,a0,long,0,RET,Math.abs($ - value) < epsilon
Fraction.java,Fraction,p2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,q2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,n,int,1,DEF,$ < maxIterations
Fraction.java,Fraction,convergent,double,1,DEF,Math.abs($ - value) > epsilon
Fraction.java,Fraction,value,double,1,DEF,Math.abs(convergent - $) > epsilon
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,n,int,0,FractionConversionException,$ >= maxIterations
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,den,int,0,DEF,$ == 0
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,Fraction,num,int,0,DEF,$ == Integer.MIN_VALUE
Fraction.java,Fraction,den,int,0,DEF,$ == Integer.MIN_VALUE
Fraction.java,Fraction,d,int,0,DEF,$ > 1
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,abs,numerator,int,1,DEF,$ >= 0
Fraction.java,equals,other,Object,1,DEF,$ == null
Fraction.java,negate,numerator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,addSub,fraction,Fraction,0,DEF,$ == null
Fraction.java,addSub,numerator,int,0,RET,$ == 0
Fraction.java,addSub,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,addSub,d1,int,0,RET,$==1
Fraction.java,addSub,w,BigInteger,0,DEF,$.bitLength() > 31
Fraction.java,multiply,fraction,Fraction,0,DEF,$ == null
Fraction.java,multiply,numerator,int,0,RET,$ == 0
Fraction.java,multiply,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,divide,fraction,Fraction,0,DEF,$ == null
Fraction.java,divide,fraction,Fraction,0,DEF,$.numerator == 0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$ == 0
Fraction.java,getReducedFraction,numerator,int,0,RET,$==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,numerator,int,0,DEF,($&1)==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$ < 0
Fraction.java,getReducedFraction,numerator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,toString,denominator,int,1,DEF,$ == 1
Fraction.java,toString,numerator,int,1,DEF,$ == 0
AbstractFormat.java,setDenominatorFormat,format,NumberFormat,0,DEF,$ == null
AbstractFormat.java,setNumeratorFormat,format,NumberFormat,0,DEF,$ == null
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
ProperBigFractionFormat.java,format,num,BigInteger,0,DEF,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,ret,BigFraction,0,RET,$ != null
ProperBigFractionFormat.java,parse,whole,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,setWholeFormat,format,NumberFormat,0,DEF,$ == null
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Fraction
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
FractionFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
FractionFormat.java,parse,num,Number,0,RET,$ == null
FractionFormat.java,parse,den,Number,0,RET,$ == null
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigFraction
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigInteger
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
BigFractionFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
BigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
BigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperFractionFormat.java,format,whole,int,0,DEF,$ != 0
ProperFractionFormat.java,parse,ret,Fraction,0,RET,$ != null
ProperFractionFormat.java,parse,whole,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,parse,den,Number,0,RET,$ == null
ProperFractionFormat.java,parse,den,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,setWholeFormat,format,NumberFormat,0,DEF,$ == null
AbstractIntegrator.java,computeDerivatives,evaluations,int,0,MaxEvaluationsExceededException,++$ > maxEvaluations
AbstractIntegrator.java,sanityChecks,equations,FirstOrderDifferentialEquations,0,IntegratorException,$.getDimension() != y0.length
AbstractIntegrator.java,sanityChecks,equations,FirstOrderDifferentialEquations,0,IntegratorException,$.getDimension() != y.length
ContinuousOutputModel.java,append,model,ContinuousOutputModel,0,RET,$.steps.size() == 0
ContinuousOutputModel.java,append,steps,List<StepInterpolator>,1,DEF,$.size() == 0
ContinuousOutputModel.java,handleStep,steps,List<StepInterpolator>,0,DEF,$.size() == 0
ContinuousOutputModel.java,setInterpolatedTime,sMin,StepInterpolator,0,RET,locatePoint(time, $) <= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMin) <= 0
ContinuousOutputModel.java,setInterpolatedTime,sMax,StepInterpolator,0,RET,locatePoint(time, $) >= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMax) >= 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ < 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ > 0
ContinuousOutputModel.java,setInterpolatedTime,tMin,double,1,DEF,Math.abs(tMed - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,Math.abs($ - tMin) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMax,double,1,DEF,Math.abs($ - tMed) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,Math.abs(tMax - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,index,int,1,DEF,$ < low
ContinuousOutputModel.java,setInterpolatedTime,index,int,0,DEF,$ > high
AdamsBashforthIntegrator.java,integrate,y,double[],0,DEF,$ != y0
AdamsBashforthIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
DormandPrince54StepInterpolator.java,DormandPrince54StepInterpolator,interpolator,DormandPrince54StepInterpolator,1,DEF,$.v1 == null
DormandPrince54StepInterpolator.java,computeInterpolatedStateAndDerivatives,v1,double[],0,DEF,$ == null
RungeKuttaIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,setStabilityCheck,stabilityReduction,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStabilityCheck,stabilityReduction,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl3,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl3,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl4,double,1,DEF,$ < 1.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl4,double,1,DEF,$ > 999.9
GraggBulirschStoerIntegrator.java,setOrderControl,maxOrder,int,0,DEF,$ <= 6
GraggBulirschStoerIntegrator.java,setOrderControl,maxOrder,int,0,DEF,$ % 2 != 0
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$ == null
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$.length != size
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudif,int,1,DEF,$ <= 0
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudif,int,1,DEF,$ >= 7
GraggBulirschStoerIntegrator.java,rescale,vecAbsoluteTolerance,double[],1,DEF,$ == null
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,DEF,2 * $ == n
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,RET,$ <= maxChecks
GraggBulirschStoerIntegrator.java,tryStep,k,int,0,RET,$ < maxIter
GraggBulirschStoerIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize > t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ > t
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize < t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ < t
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 0
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > 1.0e15
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > maxError
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ > 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,mu,int,0,DEF,$ >= 0
GraggBulirschStoerIntegrator.java,integrate,interpError,double,0,DEF,$ > 10.0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 1
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ <= targetIter
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 2
GraggBulirschStoerIntegrator.java,integrate,optimalIter,int,1,DEF,$ <= k
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ < targetIter
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ < minStep
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,IntegratorException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,IntegratorException,$.length != y0.length
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,IntegratorException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,IntegratorException,$.length != y0.length
AdaptiveStepsizeIntegrator.java,initializeStep,initialStep,double,0,RET,$ > 0
AdaptiveStepsizeIntegrator.java,filterStep,h,double,0,IntegratorException,Math.abs($) < minStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,0,DEF,$ < -maxStep
EmbeddedRungeKuttaIntegrator.java,integrate,y,double[],0,DEF,$ != y0
EmbeddedRungeKuttaIntegrator.java,integrate,vecAbsoluteTolerance,double[],1,DEF,$ != null
EmbeddedRungeKuttaIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
AdamsNordsieckTransformer.java,getInstance,t,AdamsNordsieckTransformer,0,DEF,$ == null
AdamsMoultonIntegrator.java,integrate,y,double[],0,DEF,$ != y0
AdamsMoultonIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
AdamsMoultonIntegrator.java,visit,row,int,1,DEF,($ & 0x1) == 0
DormandPrince853StepInterpolator.java,DormandPrince853StepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState == null
DormandPrince853StepInterpolator.java,computeInterpolatedStateAndDerivatives,v,double[][],0,DEF,$ == null
DormandPrince853StepInterpolator.java,doFinalize,currentState,double[],0,RET,$ == null
DormandPrince853Integrator.java,estimateError,den,double,0,DEF,$ <= 0.0
RungeKuttaStepInterpolator.java,RungeKuttaStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
RungeKuttaStepInterpolator.java,readExternal,currentState,double[],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ < 0
GraggBulirschStoerStepInterpolator.java,resetTables,polynoms,double[][],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ <= 4
GraggBulirschStoerStepInterpolator.java,GraggBulirschStoerStepInterpolator,interpolator,GraggBulirschStoerStepInterpolator,1,DEF,$.polynoms == null
GraggBulirschStoerStepInterpolator.java,computeCoefficients,polynoms,double[][],0,DEF,$ == null
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,RET,$ < 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 1
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 2
GraggBulirschStoerStepInterpolator.java,estimateError,currentDegree,int,0,DEF,$ >= 5
GraggBulirschStoerStepInterpolator.java,computeInterpolatedStateAndDerivatives,currentDegree,int,0,DEF,$ > 3
GraggBulirschStoerStepInterpolator.java,computeInterpolatedStateAndDerivatives,h,double,0,DEF,$ == 0
StepNormalizer.java,handleStep,lastState,double[],0,DEF,$ == null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.scaled != null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.nordsieck != null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.stateVariation != null
NordsieckStepInterpolator.java,writeExternal,scaled,double[],1,DEF,$ == null
NordsieckStepInterpolator.java,writeExternal,nordsieck,Array2DRowRealMatrix,1,DEF,$ == null
AbstractStepInterpolator.java,AbstractStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
AbstractStepInterpolator.java,writeBaseExternal,currentState,double[],1,DEF,$ == null
AbstractStepInterpolator.java,writeBaseExternal,currentState,double[],0,DEF,$ != null
AbstractStepInterpolator.java,readBaseExternal,dimension,int,1,DEF,$ < 0
EventState.java,evaluateStep,gb,double,1,FunctionEvaluationException:RET,$ >= 0
EventState.java,evaluateStep,root,double,1,DEF,Math.abs($ - ta) <= convergence
EventState.java,evaluateStep,ta,double,1,DEF,Math.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,1,DEF,Math.abs($ - previousEventTime) <= convergence
EventState.java,evaluateStep,previousEventTime,double,1,DEF,Math.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,0,RET,Math.abs(previousEventTime - $) > convergence
EventState.java,evaluateStep,previousEventTime,double,0,RET,Math.abs($ - root) > convergence
EventState.java,evaluateStep,pendingEventTime,double,0,RET,Math.abs(t1 - $) <= convergence
EventState.java,evaluateStep,t1,double,0,RET,Math.abs($ - pendingEventTime) <= convergence
EventState.java,evaluateStep,cause,Throwable,1,DEF,$ != null
EventState.java,evaluateStep,cause,null,1,DEF,$ instanceof DerivativeException
EventState.java,evaluateStep,cause,Throwable,0,DEF,$ != null
EventState.java,evaluateStep,cause,null,0,DEF,$ instanceof EventException
EventState.java,reset,nextAction,int,0,DEF,$ == EventHandler.RESET_STATE
CombinedEventsManager.java,evaluateStep,first,EventState,1,DEF,$ == null
MultistepIntegrator.java,MultistepIntegrator,nSteps,int,0,DEF,$ <= 0
MultistepIntegrator.java,start,de,null,0,DEF,$ instanceof InitializationCompletedMarkerException
BinaryMutation.java,mutate,original,null,0,IllegalArgumentException,$ instanceof BinaryChromosome
RandomKey.java,decodeGeneric,representation,List<Double>,0,IllegalArgumentException,$.size() != l
RandomKey.java,isSame,another,null,0,RET,$ instanceof RandomKey<?>
RandomKey.java,checkValidity,val,double,0,InvalidRepresentationException,$ < 0
RandomKey.java,checkValidity,val,double,0,InvalidRepresentationException,$ > 1
RandomKey.java,inducedPermutation,index,int,0,IllegalArgumentException,$ == -1
GeneticAlgorithm.java,GeneticAlgorithm,crossoverRate,double,0,IllegalArgumentException,$ < 0
GeneticAlgorithm.java,GeneticAlgorithm,crossoverRate,double,0,IllegalArgumentException,$ > 1
GeneticAlgorithm.java,GeneticAlgorithm,mutationRate,double,0,IllegalArgumentException,$ < 0
GeneticAlgorithm.java,GeneticAlgorithm,mutationRate,double,0,IllegalArgumentException,$ > 1
Chromosome.java,searchForFitnessUpdate,sameChromosome,Chromosome,0,DEF,$ != null
ElitisticListPopulation.java,setElitismRate,elitismRate,double,0,IllegalArgumentException,$ < 0
ElitisticListPopulation.java,setElitismRate,elitismRate,double,0,IllegalArgumentException,$ > 1
BinaryChromosome.java,checkValidity,i,int,0,InvalidRepresentationException,$ < 0
BinaryChromosome.java,checkValidity,i,int,0,InvalidRepresentationException,$ >1
BinaryChromosome.java,isSame,another,null,0,RET,$ instanceof BinaryChromosome
OnePointCrossover.java,crossover,first,null,0,IllegalArgumentException,$ instanceof AbstractListChromosome
OnePointCrossover.java,crossover,second,null,0,IllegalArgumentException,$ instanceof AbstractListChromosome
RandomKeyMutation.java,mutate,original,null,0,DEF,$ instanceof RandomKey<?>
ListPopulation.java,ListPopulation,chromosomes,List<Chromosome>,0,IllegalArgumentException,$.size() > populationLimit
ListPopulation.java,ListPopulation,populationLimit,int,0,IllegalArgumentException,$ < 0
ListPopulation.java,ListPopulation,populationLimit,int,0,IllegalArgumentException,$ < 0
ListPopulation.java,getFittestChromosome,bestChromosome,Chromosome,0,DEF,chromosome.compareTo($) > 0
ListPopulation.java,getFittestChromosome,chromosome,Chromosome,0,DEF,$.compareTo(bestChromosome) > 0
FixedGenerationCount.java,FixedGenerationCount,maxGenerations,int,0,IllegalArgumentException,$ <= 0
QRDecompositionImpl.java,QRDecompositionImpl,a,double,0,DEF,$ != 0.0
QRDecompositionImpl.java,getR,cachedR,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQT,cachedQT,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQT,minor,int,0,DEF,qrtMinor[$] != 0.0
QRDecompositionImpl.java,getQT,qrtMinor,double[],0,DEF,$[minor] != 0.0
QRDecompositionImpl.java,getH,cachedH,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,isNonSingular,diag,double,0,RET,$ == 0
QRDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
QRDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
RealMatrixImpl.java,RealMatrixImpl,d,double[][],0,NullPointerException,$ == null
RealMatrixImpl.java,RealMatrixImpl,nRows,int,0,DEF,$ == 0
RealMatrixImpl.java,RealMatrixImpl,nCols,int,0,DEF,$ == 0
RealMatrixImpl.java,RealMatrixImpl,r,int,0,DEF,d[$].length != nCols
RealMatrixImpl.java,RealMatrixImpl,d,double[][],0,DEF,$[r].length != nCols
RealMatrixImpl.java,setSubMatrix,data,double[][],1,DEF,$ == null
RealMatrixImpl.java,setSubMatrix,row,int,0,DEF,$ > 0
RealMatrixImpl.java,setSubMatrix,column,int,0,DEF,$ > 0
RealMatrixImpl.java,setSubMatrix,nRows,int,0,DEF,$ == 0
RealMatrixImpl.java,setSubMatrix,nCols,int,0,DEF,$ == 0
RealMatrixImpl.java,setSubMatrix,i,int,0,DEF,subMatrix[$].length != nCols
RealMatrixImpl.java,setSubMatrix,subMatrix,double[][],0,DEF,$[i].length != nCols
RealMatrixImpl.java,operate,v,double[],0,DEF,$.length != nCols
RealMatrixImpl.java,preMultiply,v,double[],0,DEF,$.length != nRows
LUDecompositionImpl.java,LUDecompositionImpl,sum,double,0,DEF,Math.abs($) > largest
LUDecompositionImpl.java,LUDecompositionImpl,col,int,0,RET,Math.abs(lu[max][$]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,max,int,0,RET,Math.abs(lu[$][col]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,lu,double[][],0,RET,Math.abs($[max][col]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,max,int,0,DEF,$ != col
LUDecompositionImpl.java,getL,cachedL,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,getU,cachedU,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,getP,cachedP,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
LUDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
LUDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
RealVectorFormat.java,format,i,int,0,DEF,$ > 0
RealVectorFormat.java,format,obj,null,0,RET,$ instanceof RealVector
RealVectorFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
RealVectorFormat.java,parse,component,Number,1,DEF,$ != null
Array2DRowRealMatrix.java,Array2DRowRealMatrix,d,double[][],0,NullPointerException,$ == null
Array2DRowRealMatrix.java,Array2DRowRealMatrix,nRows,int,0,DEF,$ == 0
Array2DRowRealMatrix.java,Array2DRowRealMatrix,nCols,int,0,DEF,$ == 0
Array2DRowRealMatrix.java,Array2DRowRealMatrix,r,int,0,DEF,d[$].length != nCols
Array2DRowRealMatrix.java,Array2DRowRealMatrix,d,double[][],0,DEF,$[r].length != nCols
Array2DRowRealMatrix.java,setSubMatrix,data,double[][],1,DEF,$ == null
Array2DRowRealMatrix.java,setSubMatrix,row,int,0,DEF,$ > 0
Array2DRowRealMatrix.java,setSubMatrix,column,int,0,DEF,$ > 0
Array2DRowRealMatrix.java,setSubMatrix,nRows,int,0,DEF,$ == 0
Array2DRowRealMatrix.java,setSubMatrix,nCols,int,0,DEF,$ == 0
Array2DRowRealMatrix.java,setSubMatrix,i,int,0,DEF,subMatrix[$].length != nCols
Array2DRowRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DEF,$[i].length != nCols
Array2DRowRealMatrix.java,operate,v,double[],0,DEF,$.length != nCols
Array2DRowRealMatrix.java,preMultiply,v,double[],0,DEF,$.length != nRows
AbstractRealMatrix.java,AbstractRealMatrix,rowDimension,int,0,DEF,$ <= 0
AbstractRealMatrix.java,AbstractRealMatrix,columnDimension,int,0,DEF,$ <= 0
AbstractRealMatrix.java,visit,row,int,0,DEF,$ == endRow
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$.length < rowsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$[0].length < columnsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$.length < selectedRows.length
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$[0].length < selectedColumns.length
AbstractRealMatrix.java,setSubMatrix,nRows,int,0,DEF,$ == 0
AbstractRealMatrix.java,setSubMatrix,nCols,int,0,DEF,$ == 0
AbstractRealMatrix.java,setSubMatrix,r,int,0,DEF,subMatrix[$].length != nCols
AbstractRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DEF,$[r].length != nCols
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getRowDimension() != 1
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getColumnDimension() != nCols
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getRowDimension() != nRows
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getColumnDimension() != 1
AbstractRealMatrix.java,setRowVector,vector,RealVector,0,InvalidMatrixException,$.getDimension() != nCols
AbstractRealMatrix.java,setColumnVector,vector,RealVector,0,InvalidMatrixException,$.getDimension() != nRows
AbstractRealMatrix.java,setRow,array,double[],0,InvalidMatrixException,$.length != nCols
AbstractRealMatrix.java,setColumn,array,double[],0,InvalidMatrixException,$.length != nRows
AbstractRealMatrix.java,inverse,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,isSingular,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractRealMatrix.java,operate,v,double[],0,DEF,$.length != nCols
AbstractRealMatrix.java,operate,v,RealVector,0,DEF,$.getDimension() != nCols
AbstractRealMatrix.java,preMultiply,v,double[],0,DEF,$.length != nRows
AbstractRealMatrix.java,preMultiply,v,RealVector,0,DEF,$.getDimension() != nRows
AbstractRealMatrix.java,solve,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,solve,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,luDecompose,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,toString,i,int,0,DEF,$ > 0
AbstractRealMatrix.java,toString,j,int,0,DEF,$ > 0
AbstractRealMatrix.java,equals,object,Object,0,RET,$ instanceof RealMatrix == false
AbstractRealMatrix.java,equals,object,null,0,RET,$ instanceof RealMatrix
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getColumnDimension() != nCols
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getRowDimension() != nRows
BlockRealMatrix.java,toBlocksLayout,length,int,0,DEF,$ != columns
BlockRealMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockRealMatrix.java,setSubMatrix,refLength,int,0,DEF,$ < 1
BlockRealMatrix.java,setSubMatrix,subRow,double[],0,DEF,$.length != refLength
BlockRealMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
BlockRealMatrix.java,setRowMatrix,matrix,BlockRealMatrix,0,InvalidMatrixException,$.getRowDimension() != 1
BlockRealMatrix.java,setRowMatrix,matrix,BlockRealMatrix,0,InvalidMatrixException,$.getColumnDimension() != nCols
BlockRealMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
BlockRealMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
BlockRealMatrix.java,setColumnMatrix,matrix,BlockRealMatrix,0,InvalidMatrixException,$.getRowDimension() != nRows
BlockRealMatrix.java,setColumnMatrix,matrix,BlockRealMatrix,0,InvalidMatrixException,$.getColumnDimension() != 1
BlockRealMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
BlockRealMatrix.java,setRow,array,double[],0,InvalidMatrixException,$.length != nCols
BlockRealMatrix.java,setColumn,array,double[],0,InvalidMatrixException,$.length != nRows
BlockRealMatrix.java,operate,v,double[],0,DEF,$.length != columns
BlockRealMatrix.java,preMultiply,v,double[],0,DEF,$.length != rows
MatrixUtils.java,createRowFieldMatrix,nCols,int,0,DEF,$ == 0
MatrixUtils.java,createColumnFieldMatrix,nRows,int,0,DEF,$ == 0
MatrixUtils.java,checkRowIndex,row,int,0,MatrixIndexException,$ < 0
MatrixUtils.java,checkColumnIndex,column,int,0,MatrixIndexException,$ < 0
MatrixUtils.java,checkSubMatrixIndex,startRow,int,0,MatrixIndexException,$ > endRow
MatrixUtils.java,checkSubMatrixIndex,startColumn,int,0,MatrixIndexException,$ > endColumn
MatrixUtils.java,checkSubMatrixIndex,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
MatrixUtils.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
MatrixUtils.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length == 0
SingularValueDecompositionImpl.java,getU,cachedU,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getU,m,int,1,DEF,$ >= n
SingularValueDecompositionImpl.java,getUT,cachedUt,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getS,cachedS,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getV,cachedV,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getV,m,int,1,DEF,$ >= n
SingularValueDecompositionImpl.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getCovariance,dimension,int,0,DEF,$ == 0
SingularValueDecompositionImpl.java,getRank,singularValues,double[],0,RET,$[i] > threshold
SingularValueDecompositionImpl.java,getRank,i,int,0,RET,singularValues[$] > threshold
SingularValueDecompositionImpl.java,solve,b,double[],0,DEF,$.length != singularValues.length
SingularValueDecompositionImpl.java,solve,si,double,0,SingularMatrixException,$ == 0
SingularValueDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != singularValues.length
SingularValueDecompositionImpl.java,solve,si,double,0,SingularMatrixException,$ == 0
SingularValueDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != singularValues.length
SingularValueDecompositionImpl.java,solve,si,double,0,SingularMatrixException,$ == 0
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,lJI,double,0,NotSymmetricMatrixException,Math.abs(lIJ - $) > maxDelta
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,lIJ,double,0,NotSymmetricMatrixException,Math.abs($ - lJI) > maxDelta
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,ltI,double[],0,NotPositiveDefiniteMatrixException,$[i] < absolutePositivityThreshold
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,i,int,0,NotPositiveDefiniteMatrixException,ltI[$] < absolutePositivityThreshold
CholeskyDecompositionImpl.java,getL,cachedL,RealMatrix,0,DEF,$ == null
CholeskyDecompositionImpl.java,getLT,cachedLT,RealMatrix,0,DEF,$ == null
CholeskyDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
CholeskyDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
CholeskyDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
TriDiagonalTransformer.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,cachedQt,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,hK,double[],0,DEF,$[k] != 0.0
TriDiagonalTransformer.java,getQT,k,int,0,DEF,hK[$] != 0.0
TriDiagonalTransformer.java,getT,cachedT,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getT,i,int,0,DEF,$ > 0
TriDiagonalTransformer.java,transform,a,double,0,DEF,$ != 0.0
EigenDecompositionImpl.java,getV,cachedV,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getV,eigenvectors,ArrayRealVector[],0,DEF,$ == null
EigenDecompositionImpl.java,getD,cachedD,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getVT,eigenvectors,ArrayRealVector[],0,DEF,$ == null
EigenDecompositionImpl.java,getEigenvector,eigenvectors,ArrayRealVector[],0,DEF,$ == null
EigenDecompositionImpl.java,getSolver,eigenvectors,ArrayRealVector[],0,DEF,$ == null
EigenDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
EigenDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
EigenDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
EigenDecompositionImpl.java,isNonSingular,realEigenvalues,double[],0,RET,$[i] == 0
EigenDecompositionImpl.java,isNonSingular,i,int,0,RET,realEigenvalues[$] == 0
EigenDecompositionImpl.java,isNonSingular,imagEigenvalues,double[],0,RET,$[i] == 0
EigenDecompositionImpl.java,isNonSingular,i,int,0,RET,imagEigenvalues[$] == 0
EigenDecompositionImpl.java,computeSplits,secondary,double[],0,DEF,Math.abs($[i]) <= max
EigenDecompositionImpl.java,computeSplits,i,int,0,DEF,Math.abs(secondary[$]) <= max
EigenDecompositionImpl.java,process2RowsBlock,delta,double,0,InvalidMatrixException,$ < 0
EigenDecompositionImpl.java,process3RowsBlock,delta,double,0,InvalidMatrixException,$ >= 0
EigenDecompositionImpl.java,process3RowsBlock,z0,double,0,DEF,$ < z1
EigenDecompositionImpl.java,process3RowsBlock,z1,double,0,DEF,$ < z2
EigenDecompositionImpl.java,process3RowsBlock,z0,double,0,DEF,$ < z1
EigenDecompositionImpl.java,processGeneralBlock,sumOffDiag,double,0,RET,$ == 0
EigenDecompositionImpl.java,processGeneralBlock,work,double[],0,DEF,$[i + 2] <= 0
EigenDecompositionImpl.java,processGeneralBlock,i,int,0,DEF,work[$ + 2] <= 0
EigenDecompositionImpl.java,processGeneralBlock,k,int,0,MaxIterationsExceededException,$ >= maxIter
EigenDecompositionImpl.java,processGeneralBlock,pingPong,int,0,DEF,$ == 0
EigenDecompositionImpl.java,processGeneralBlock,n0,int,0,DEF,$ - i0 > 3
EigenDecompositionImpl.java,processGeneralBlock,i0,int,0,DEF,n0 - $ > 3
EigenDecompositionImpl.java,goodStep,start,int,0,RET,$ >= deflatedEnd
EigenDecompositionImpl.java,goodStep,s,double,1,DEF,$ <= t
EigenDecompositionImpl.java,goodStep,dMin,double,0,DEF,$ <= 0
EigenDecompositionImpl.java,goodStep,deflatedEnd,int,0,DEF,$ < end
EigenDecompositionImpl.java,goodStep,dMin,double,0,RET,$ < 0
EigenDecompositionImpl.java,goodStep,dMin,double,1,RET,$ >= 0
EigenDecompositionImpl.java,goodStep,dMin1,double,1,RET,$ > 0
EigenDecompositionImpl.java,goodStep,dMin,double,1,RET,$ < 0.0
EigenDecompositionImpl.java,goodStep,dMin1,double,1,RET,$ > 0.0
EigenDecompositionImpl.java,goodStep,dMin,double,1,DEF,$ < 0.0
EigenDecompositionImpl.java,goodStep,tType,int,1,DEF,$ < -22
EigenDecompositionImpl.java,goodStep,dMin1,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,eigenvaluesRange,range,double,0,DEF,$ < absoluteTolerance
EigenDecompositionImpl.java,eigenvaluesRange,middle,double,1,DEF,countEigenValues($, index, n) >= 1
EigenDecompositionImpl.java,eigenvaluesRange,index,int,1,DEF,countEigenValues(middle, $, n) >= 1
EigenDecompositionImpl.java,eigenvaluesRange,n,int,1,DEF,countEigenValues(middle, index, $) >= 1
EigenDecompositionImpl.java,eigenvaluesRange,range,double,0,DEF,$ < absoluteTolerance
EigenDecompositionImpl.java,eigenvaluesRange,middle,double,1,DEF,countEigenValues($, index, n) >= n
EigenDecompositionImpl.java,eigenvaluesRange,index,int,1,DEF,countEigenValues(middle, $, n) >= n
EigenDecompositionImpl.java,eigenvaluesRange,n,int,1,DEF,countEigenValues(middle, index, $) >= n
EigenDecompositionImpl.java,countEigenValues,ratio,double,0,DEF,$ <= 0
EigenDecompositionImpl.java,dqds,pingPong,int,1,DEF,$ == 0
EigenDecompositionImpl.java,dqd,pingPong,int,1,DEF,$ == 0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 2] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 2] == 0.0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 3] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 3] == 0.0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 2] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 2] == 0.0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 2] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 2] == 0.0
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,0,RET,$ <= 0.0
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,DEF,$ == dN
EigenDecompositionImpl.java,computeShiftIncrement,dMin1,double,1,DEF,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,gap1,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,computeShiftIncrement,gap1,double,1,DEF,$ > b1
EigenDecompositionImpl.java,computeShiftIncrement,dN,double,0,DEF,$ > b1
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,$ == 0.0
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,100 * Math.max($, b1) < a2
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * Math.max(b2, $) < a2
EigenDecompositionImpl.java,computeShiftIncrement,cnst1,double,0,DEF,$ < a2
EigenDecompositionImpl.java,computeShiftIncrement,a2,double,0,DEF,$ < cnst1
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN2
EigenDecompositionImpl.java,computeShiftIncrement,np,int,0,RET,work[$ - 8] > b2
EigenDecompositionImpl.java,computeShiftIncrement,work,double[],0,RET,$[np - 8] > b2
EigenDecompositionImpl.java,computeShiftIncrement,np,int,0,RET,work[$ - 4] > b1
EigenDecompositionImpl.java,computeShiftIncrement,work,double[],0,RET,$[np - 4] > b1
EigenDecompositionImpl.java,computeShiftIncrement,start,int,0,RET,end - $ > 2
EigenDecompositionImpl.java,computeShiftIncrement,end,int,0,RET,$ - start > 2
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,$ == 0.0
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,100 * Math.max($, b1) < a2
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * Math.max(b2, $) < a2
EigenDecompositionImpl.java,computeShiftIncrement,cnst1,double,0,DEF,$ < a2
EigenDecompositionImpl.java,computeShiftIncrement,a2,double,1,DEF,$ < cnst1
EigenDecompositionImpl.java,computeShiftIncrement,tType,int,1,DEF,$ == -6
EigenDecompositionImpl.java,computeShiftIncrement,tType,int,1,DEF,$ == -18
EigenDecompositionImpl.java,computeShiftIncrement,dMin1,double,1,RET,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,dMin2,double,1,RET,$ == dN2
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,RET,$ != 0.0
EigenDecompositionImpl.java,computeShiftIncrement,oldB1,double,0,DEF,100 * Math.max(b1, $) < b2
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * Math.max($, oldB1) < b2
EigenDecompositionImpl.java,computeShiftIncrement,gap2,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,computeShiftIncrement,dMin1,double,0,DEF,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,dMin2,double,1,RET,$ == dN2
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,RET,$ != 0.0
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * $ < b2
EigenDecompositionImpl.java,computeShiftIncrement,gap2,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,updateSigma,tau,double,1,DEF,$ < sigma
EigenDecompositionImpl.java,findEigenvector,absG,double,0,DEF,$ < minG
OpenMapRealMatrix.java,multiply,outValue,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,setEntry,value,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,addToEntry,value,double,1,DEF,$ == 0.0
OpenMapRealMatrix.java,multiplyEntry,value,double,1,DEF,$ == 0.0
SparseFieldVector.java,append,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,dotProduct,idx,int,0,DEF,$ < v.length
SparseFieldVector.java,getSubVector,key,int,0,DEF,$ >= index
SparseFieldVector.java,getSubVector,key,int,0,DEF,$ < end
SparseFieldVector.java,outerProduct,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,subtract,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
SparseFieldVector.java,add,v,null,1,RET,$ instanceof SparseFieldVector<?>
SparseFieldVector.java,equals,obj,Object,0,RET,$ == null
SparseFieldVector.java,equals,obj,null,0,RET,$ instanceof SparseFieldVector
SparseFieldVector.java,equals,field,Field<T>,1,RET,$ == null
SparseFieldVector.java,equals,other,SparseFieldVector<T>,0,RET,$.field != null
SparseFieldVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
AbstractFieldMatrix.java,extractField,d,T[][],0,DEF,$.length == 0
AbstractFieldMatrix.java,extractField,d,T[][],0,DEF,$[0].length == 0
AbstractFieldMatrix.java,extractField,d,T[],0,DEF,$.length == 0
AbstractFieldMatrix.java,buildArray,columns,int,0,RET,$ < 0
AbstractFieldMatrix.java,AbstractFieldMatrix,rowDimension,int,0,DEF,$ <= 0
AbstractFieldMatrix.java,AbstractFieldMatrix,columnDimension,int,0,DEF,$ <= 0
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,DEF,$.length < rowsCount
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,DEF,$[0].length < columnsCount
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,DEF,$.length < selectedRows.length
AbstractFieldMatrix.java,copySubMatrix,destination,T[][],0,DEF,$[0].length < selectedColumns.length
AbstractFieldMatrix.java,setSubMatrix,nRows,int,0,DEF,$ == 0
AbstractFieldMatrix.java,setSubMatrix,nCols,int,0,DEF,$ == 0
AbstractFieldMatrix.java,setSubMatrix,r,int,0,DEF,subMatrix[$].length != nCols
AbstractFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,DEF,$[r].length != nCols
AbstractFieldMatrix.java,setRowMatrix,matrix,FieldMatrix<T>,0,InvalidMatrixException,$.getRowDimension() != 1
AbstractFieldMatrix.java,setRowMatrix,matrix,FieldMatrix<T>,0,InvalidMatrixException,$.getColumnDimension() != nCols
AbstractFieldMatrix.java,setColumnMatrix,matrix,FieldMatrix<T>,0,InvalidMatrixException,$.getRowDimension() != nRows
AbstractFieldMatrix.java,setColumnMatrix,matrix,FieldMatrix<T>,0,InvalidMatrixException,$.getColumnDimension() != 1
AbstractFieldMatrix.java,setRowVector,vector,FieldVector<T>,0,InvalidMatrixException,$.getDimension() != nCols
AbstractFieldMatrix.java,setColumnVector,vector,FieldVector<T>,0,InvalidMatrixException,$.getDimension() != nRows
AbstractFieldMatrix.java,setRow,array,T[],0,InvalidMatrixException,$.length != nCols
AbstractFieldMatrix.java,setColumn,array,T[],0,InvalidMatrixException,$.length != nRows
AbstractFieldMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractFieldMatrix.java,operate,v,T[],0,DEF,$.length != nCols
AbstractFieldMatrix.java,operate,v,FieldVector<T>,0,DEF,$.getDimension() != nCols
AbstractFieldMatrix.java,preMultiply,v,T[],0,DEF,$.length != nRows
AbstractFieldMatrix.java,preMultiply,v,FieldVector<T>,0,DEF,$.getDimension() != nRows
AbstractFieldMatrix.java,toString,i,int,0,DEF,$ > 0
AbstractFieldMatrix.java,toString,j,int,0,DEF,$ > 0
AbstractFieldMatrix.java,equals,object,Object,0,RET,$ instanceof FieldMatrix == false
AbstractFieldMatrix.java,equals,object,null,0,RET,$ instanceof FieldMatrix
AbstractFieldMatrix.java,equals,m,FieldMatrix<T>,0,RET,$.getColumnDimension() != nCols
AbstractFieldMatrix.java,equals,m,FieldMatrix<T>,0,RET,$.getRowDimension() != nRows
AbstractFieldMatrix.java,checkRowIndex,row,int,0,MatrixIndexException,$ < 0
AbstractFieldMatrix.java,checkColumnIndex,column,int,0,MatrixIndexException,$ < 0
AbstractFieldMatrix.java,checkSubMatrixIndex,startRow,int,0,MatrixIndexException,$ > endRow
AbstractFieldMatrix.java,checkSubMatrixIndex,startColumn,int,0,MatrixIndexException,$ > endColumn
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
AbstractFieldMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length == 0
BlockFieldMatrix.java,toBlocksLayout,length,int,0,DEF,$ != columns
BlockFieldMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
BlockFieldMatrix.java,setSubMatrix,refLength,int,0,DEF,$ < 1
BlockFieldMatrix.java,setSubMatrix,subRow,T[],0,DEF,$.length != refLength
BlockFieldMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
BlockFieldMatrix.java,setRowMatrix,matrix,BlockFieldMatrix<T>,0,InvalidMatrixException,$.getRowDimension() != 1
BlockFieldMatrix.java,setRowMatrix,matrix,BlockFieldMatrix<T>,0,InvalidMatrixException,$.getColumnDimension() != nCols
BlockFieldMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
BlockFieldMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
BlockFieldMatrix.java,setColumnMatrix,matrix,BlockFieldMatrix<T>,0,InvalidMatrixException,$.getRowDimension() != nRows
BlockFieldMatrix.java,setColumnMatrix,matrix,BlockFieldMatrix<T>,0,InvalidMatrixException,$.getColumnDimension() != 1
BlockFieldMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
BlockFieldMatrix.java,setRow,array,T[],0,InvalidMatrixException,$.length != nCols
BlockFieldMatrix.java,setColumn,array,T[],0,InvalidMatrixException,$.length != nRows
BlockFieldMatrix.java,operate,v,T[],0,DEF,$.length != columns
BlockFieldMatrix.java,preMultiply,v,T[],0,DEF,$.length != rows
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,d,T[][],0,NullPointerException,$ == null
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,nRows,int,0,DEF,$ == 0
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,nCols,int,0,DEF,$ == 0
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,r,int,0,DEF,d[$].length != nCols
Array2DRowFieldMatrix.java,Array2DRowFieldMatrix,d,T[][],0,DEF,$[r].length != nCols
Array2DRowFieldMatrix.java,setSubMatrix,data,T[][],1,DEF,$ == null
Array2DRowFieldMatrix.java,setSubMatrix,row,int,0,DEF,$ > 0
Array2DRowFieldMatrix.java,setSubMatrix,column,int,0,DEF,$ > 0
Array2DRowFieldMatrix.java,setSubMatrix,nRows,int,0,DEF,$ == 0
Array2DRowFieldMatrix.java,setSubMatrix,nCols,int,0,DEF,$ == 0
Array2DRowFieldMatrix.java,setSubMatrix,i,int,0,DEF,subMatrix[$].length != nCols
Array2DRowFieldMatrix.java,setSubMatrix,subMatrix,T[][],0,DEF,$[i].length != nCols
Array2DRowFieldMatrix.java,operate,v,T[],0,DEF,$.length != nCols
Array2DRowFieldMatrix.java,preMultiply,v,T[],0,DEF,$.length != nRows
BigMatrixImpl.java,BigMatrixImpl,rowDimension,int,0,DEF,$ <= 0
BigMatrixImpl.java,BigMatrixImpl,columnDimension,int,0,DEF,$ <= 0
BigMatrixImpl.java,BigMatrixImpl,d,BigDecimal[][],0,NullPointerException,$ == null
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,r,int,0,DEF,d[$].length != nCols
BigMatrixImpl.java,BigMatrixImpl,d,BigDecimal[][],0,DEF,$[r].length != nCols
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,d,double[][],0,DEF,$[row].length != nCols
BigMatrixImpl.java,BigMatrixImpl,row,int,0,DEF,d[$].length != nCols
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,DEF,$ == 0
BigMatrixImpl.java,BigMatrixImpl,d,String[][],0,DEF,$[row].length != nCols
BigMatrixImpl.java,BigMatrixImpl,row,int,0,DEF,d[$].length != nCols
BigMatrixImpl.java,getSubMatrix,startRow,int,0,MatrixIndexException,$ > endRow
BigMatrixImpl.java,getSubMatrix,startColumn,int,0,MatrixIndexException,$ > endColumn
BigMatrixImpl.java,getSubMatrix,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
BigMatrixImpl.java,getSubMatrix,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
BigMatrixImpl.java,getSubMatrix,selectedRows,int[],0,MatrixIndexException,$.length == 0
BigMatrixImpl.java,setSubMatrix,nRows,int,0,DEF,$ == 0
BigMatrixImpl.java,setSubMatrix,nCols,int,0,DEF,$ == 0
BigMatrixImpl.java,setSubMatrix,r,int,0,DEF,subMatrix[$].length != nCols
BigMatrixImpl.java,setSubMatrix,subMatrix,BigDecimal[][],0,DEF,$[r].length != nCols
BigMatrixImpl.java,setSubMatrix,data,BigDecimal[][],1,DEF,$ == null
BigMatrixImpl.java,setSubMatrix,row,int,0,DEF,$ > 0
BigMatrixImpl.java,setSubMatrix,column,int,0,DEF,$ > 0
BigMatrixImpl.java,isSingular,lu,BigDecimal[][],1,RET,$ == null
BigMatrixImpl.java,preMultiply,v,BigDecimal[],0,DEF,$.length != nRows
BigMatrixImpl.java,solve,b,BigDecimal[],0,DEF,$.length != nRows
BigMatrixImpl.java,luDecompose,nRows,int,0,NonSquareMatrixException,$ != nCols
BigMatrixImpl.java,luDecompose,largest,BigDecimal,0,DEF,sum.abs().compareTo($) == 1
BigMatrixImpl.java,luDecompose,sum,BigDecimal,0,DEF,$.abs().compareTo(largest) == 1
BigMatrixImpl.java,luDecompose,col,int,0,SingularMatrixException,lu[max][$].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,TOO_SMALL,BigDecimal,0,SingularMatrixException,lu[max][col].abs().compareTo($) <= 0
BigMatrixImpl.java,luDecompose,max,int,0,SingularMatrixException,lu[$][col].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,lu,BigDecimal[][],0,SingularMatrixException,$[max][col].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,max,int,0,DEF,$ != col
BigMatrixImpl.java,toString,data,BigDecimal[][],0,DEF,$ != null
BigMatrixImpl.java,toString,i,int,0,DEF,$ > 0
BigMatrixImpl.java,toString,j,int,0,DEF,$ > 0
BigMatrixImpl.java,equals,object,Object,0,RET,$ instanceof BigMatrixImpl == false
BigMatrixImpl.java,equals,object,null,0,RET,$ instanceof BigMatrixImpl
BigMatrixImpl.java,equals,m,BigMatrix,0,RET,$.getColumnDimension() != nCols
BigMatrixImpl.java,equals,m,BigMatrix,0,RET,$.getRowDimension() != nRows
BigMatrixImpl.java,getLUMatrix,lu,BigDecimal[][],0,DEF,$ == null
ArrayFieldVector.java,checkVectorDimensions,data,T[],0,DEF,$.length != n
ArrayFieldVector.java,equals,other,Object,0,RET,$ == null
ArrayFieldVector.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
ArrayRealVector.java,ArrayRealVector,d,double[],0,NullPointerException,$ == null
ArrayRealVector.java,ArrayRealVector,d,double[],0,DEF,$.length == 0
ArrayRealVector.java,unitVector,norm,double,0,DEF,$ == 0
ArrayRealVector.java,unitize,norm,double,0,DEF,$ == 0
ArrayRealVector.java,checkVectorDimensions,data,double[],0,DEF,$.length != n
ArrayRealVector.java,equals,other,Object,0,RET,$ == null
ArrayRealVector.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
BiDiagonalTransformer.java,BiDiagonalTransformer,m,int,1,DEF,$ >= n
BiDiagonalTransformer.java,getU,cachedU,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getU,hK,double[],0,DEF,$[k - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,k,int,0,DEF,hK[$ - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,hK[k - $] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getB,cachedB,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getB,m,int,1,DEF,$ < n
BiDiagonalTransformer.java,getB,i,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getV,cachedV,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getV,hK,double[],0,DEF,$[k] != 0.0
BiDiagonalTransformer.java,getV,k,int,0,DEF,hK[$] != 0.0
BiDiagonalTransformer.java,getV,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,b,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,b,double,0,DEF,$ != 0.0
OpenMapRealVector.java,add,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,append,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,dotProduct,idx,int,0,DEF,$ < v.length
OpenMapRealVector.java,getSubVector,key,int,0,DEF,$ >= index
OpenMapRealVector.java,getSubVector,key,int,0,DEF,$ < end
OpenMapRealVector.java,getDistance,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getL1Distance,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getLInfDistance,delta,double,0,DEF,$ > max
OpenMapRealVector.java,getLInfDistance,iter,Iterator,0,DEF,$.value() > max
OpenMapRealVector.java,getLInfDistance,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,getLInfDistance,delta,double,0,DEF,$ > max
OpenMapRealVector.java,outerProduct,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,subtract,v,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
OpenMapRealVector.java,equals,obj,Object,0,RET,$ == null
OpenMapRealVector.java,equals,obj,null,0,RET,$ instanceof OpenMapRealVector
OpenMapRealVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
FieldLUDecompositionImpl.java,FieldLUDecompositionImpl,nonZero,int,0,RET,$ >= m
FieldLUDecompositionImpl.java,FieldLUDecompositionImpl,nonZero,int,0,DEF,$ != col
FieldLUDecompositionImpl.java,getL,cachedL,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecompositionImpl.java,getU,cachedU,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecompositionImpl.java,getP,cachedP,FieldMatrix<T>,0,DEF,$ == null
FieldLUDecompositionImpl.java,solve,b,T[],0,DEF,$.length != m
FieldLUDecompositionImpl.java,solve,b,FieldVector<T>,0,DEF,$.getDimension() != m
FieldLUDecompositionImpl.java,solve,b,FieldMatrix<T>,0,DEF,$.getRowDimension() != m
LevenbergMarquardtEstimator.java,estimate,dk,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,estimate,s,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,estimate,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtEstimator.java,estimate,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtEstimator.java,estimate,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,estimate,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,DEF,$ >= 1.0e-4
LevenbergMarquardtEstimator.java,estimate,actRed,double,0,RET,Math.abs($) <= costRelativeTolerance
LevenbergMarquardtEstimator.java,estimate,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtEstimator.java,estimate,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtEstimator.java,estimate,actRed,double,1,EstimationException,Math.abs($) <= 2.2204e-16
LevenbergMarquardtEstimator.java,estimate,preRed,double,1,EstimationException,$ <= 2.2204e-16
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,EstimationException,$ <= 2.0
LevenbergMarquardtEstimator.java,estimate,maxCosine,double,0,EstimationException,$ <= 2.2204e-16
LevenbergMarquardtEstimator.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtEstimator.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtEstimator.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtEstimator.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtEstimator.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtEstimator.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtEstimator.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtEstimator.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtEstimator.java,qrDecomposition,ak2,double,0,RET,$ == 0
AbstractEstimator.java,updateResidualsAndCost,costEvaluations,int,0,EstimationException,++$ > maxCostEval
AbstractEstimator.java,guessParametersErrors,m,int,0,EstimationException,$ <= p
MultiStartUnivariateRealOptimizer.java,getOptima,optima,double[],0,DEF,$ == null
MultiStartUnivariateRealOptimizer.java,optimize,goalType,GoalType,0,DEF,$ == GoalType.MAXIMIZE
SimplexSolver.java,getPivotColumn,epsilon,double,0,DEF,MathUtils.compareTo(tableau.getEntry(0, i), minValue, $) < 0
SimplexSolver.java,getPivotColumn,tableau,SimplexTableau,0,DEF,MathUtils.compareTo($.getEntry(0, i), minValue, epsilon) < 0
SimplexSolver.java,getPivotColumn,minValue,double,0,DEF,MathUtils.compareTo(tableau.getEntry(0, i), $, epsilon) < 0
SimplexSolver.java,getPivotColumn,i,int,0,DEF,MathUtils.compareTo(tableau.getEntry(0, $), minValue, epsilon) < 0
SimplexSolver.java,getPivotRow,epsilon,double,0,DEF,MathUtils.compareTo(tableau.getEntry(i, col), 0, $) >= 0
SimplexSolver.java,getPivotRow,col,int,0,DEF,MathUtils.compareTo(tableau.getEntry(i, $), 0, epsilon) >= 0
SimplexSolver.java,getPivotRow,tableau,SimplexTableau,0,DEF,MathUtils.compareTo($.getEntry(i, col), 0, epsilon) >= 0
SimplexSolver.java,getPivotRow,i,int,0,DEF,MathUtils.compareTo(tableau.getEntry($, col), 0, epsilon) >= 0
SimplexSolver.java,getPivotRow,ratio,double,0,DEF,$ < minRatio
SimplexSolver.java,doIteration,pivotRow,Integer,0,UnboundedSolutionException,$ == null
SimplexSolver.java,doIteration,i,int,0,DEF,$ != pivotRow
SimplexSolver.java,isPhase1Solved,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() == 0
SimplexSolver.java,isPhase1Solved,epsilon,double,0,RET,MathUtils.compareTo(tableau.getEntry(0, i), 0, $) < 0
SimplexSolver.java,isPhase1Solved,tableau,SimplexTableau,0,RET,MathUtils.compareTo($.getEntry(0, i), 0, epsilon) < 0
SimplexSolver.java,isPhase1Solved,i,int,0,RET,MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) < 0
SimplexSolver.java,isOptimal,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() > 0
SimplexSolver.java,isOptimal,epsilon,double,0,RET,MathUtils.compareTo(tableau.getEntry(0, i), 0, $) < 0
SimplexSolver.java,isOptimal,tableau,SimplexTableau,0,RET,MathUtils.compareTo($.getEntry(0, i), 0, epsilon) < 0
SimplexSolver.java,isOptimal,i,int,0,RET,MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) < 0
SimplexSolver.java,solvePhase1,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() == 0
SimplexTableau.java,createTableau,constraint,LinearConstraint,1,DEF,$.getRelationship() == Relationship.LEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.EQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,normalize,constraint,LinearConstraint,0,RET,$.getValue() < 0
SimplexTableau.java,getConstraintTypeCounts,constraint,LinearConstraint,0,DEF,$.getRelationship() == relationship
SimplexTableau.java,getBasicRow,row,Integer,1,DEF,$ == null
SimplexTableau.java,discardArtificialVariables,numArtificialVariables,int,0,RET,$ == 0
SimplexTableau.java,equals,other,Object,0,RET,$ == null
AbstractLinearOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
LinearObjectiveFunction.java,equals,other,Object,0,RET,$ == null
LinearConstraint.java,equals,other,Object,0,RET,$ == null
SimpleRealPointChecker.java,converged,difference,double,0,RET,$ > absoluteThreshold
SimpleVectorialValueChecker.java,converged,difference,double,0,RET,$ > absoluteThreshold
BrentOptimizer.java,localMin,goalType,GoalType,0,DEF,$ == GoalType.MAXIMIZE
BrentOptimizer.java,localMin,e,double,0,DEF,Math.abs($) > tol
BrentOptimizer.java,localMin,q,double,1,DEF,$ > 0
BrentOptimizer.java,localMin,a,double,0,DEF,(u - $) < t2
BrentOptimizer.java,localMin,u,double,0,DEF,($ - a) < t2
BrentOptimizer.java,localMin,b,double,0,DEF,($ - u) < t2
BrentOptimizer.java,localMin,u,double,0,DEF,(b - $) < t2
BrentOptimizer.java,localMin,goalType,GoalType,0,DEF,$ == GoalType.MAXIMIZE
BrentOptimizer.java,localMin,fu,double,1,DEF,$ <= fx
BrentOptimizer.java,localMin,u,double,1,DEF,$ < x
BrentOptimizer.java,localMin,u,double,1,DEF,$ < x
BrentOptimizer.java,localMin,fu,double,1,DEF,$ <= fw
BrentOptimizer.java,localMin,w,double,1,DEF,$ == x
BrentOptimizer.java,localMin,fu,double,0,DEF,$ <= fv
BrentOptimizer.java,localMin,v,double,0,DEF,$ == x
BrentOptimizer.java,localMin,v,double,0,DEF,$ == w
AbstractUnivariateRealOptimizer.java,computeObjectiveValue,evaluations,int,0,MaxEvaluationsExceededException,++$ > maxEvaluations
HarmonicFitter.java,fit,parameters,double[],0,OptimizationException,$ == null
HarmonicFitter.java,fit,observations,WeightedObservedPoint[],0,OptimizationException,$.length < 4
HarmonicCoefficientsGuesser.java,sortObservations,i,int,1,DEF,$-- != 0
HarmonicCoefficientsGuesser.java,guessAOmega,c1,double,0,OptimizationException,$ / c2 < 0.0
HarmonicCoefficientsGuesser.java,guessAOmega,c2,double,0,OptimizationException,c1 / $ < 0.0
HarmonicCoefficientsGuesser.java,guessAOmega,c3,double,0,OptimizationException,c2 / $ < 0.0
HarmonicCoefficientsGuesser.java,guessAOmega,c2,double,0,OptimizationException,$ / c3 < 0.0
MultiStartMultivariateRealOptimizer.java,getOptima,optima,RealPointValuePair[],0,DEF,$ == null
MultiStartMultivariateRealOptimizer.java,compare,o1,RealPointValuePair,1,RET,$ == null
MultiStartMultivariateRealOptimizer.java,compare,o2,RealPointValuePair,0,RET,$ == null
MultiStartMultivariateRealOptimizer.java,optimize,optima,RealPointValuePair[],0,OptimizationException,$[0] == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,getOptima,optima,VectorialPointValuePair[],0,DEF,$ == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,compare,o1,VectorialPointValuePair,1,RET,$ == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,compare,o2,VectorialPointValuePair,0,RET,$ == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,optimize,optima,VectorialPointValuePair[],0,OptimizationException,$[0] == null
LeastSquaresConverter.java,LeastSquaresConverter,observations,double[],0,DEF,$.length != weights.length
LeastSquaresConverter.java,value,residuals,double[],0,FunctionEvaluationException,$.length != observations.length
LeastSquaresConverter.java,value,weights,double[],1,DEF,$ != null
LeastSquaresConverter.java,value,scale,RealMatrix,1,DEF,$ != null
DirectSearchOptimizer.java,setStartConfiguration,j,int,0,DEF,steps[$] == 0.0
DirectSearchOptimizer.java,setStartConfiguration,steps,double[],0,DEF,$[j] == 0.0
DirectSearchOptimizer.java,setStartConfiguration,n,int,0,DEF,$ < 0
DirectSearchOptimizer.java,setStartConfiguration,refI,double[],0,DEF,$.length != n
DirectSearchOptimizer.java,setStartConfiguration,i,int,0,DEF,$ > 0
DirectSearchOptimizer.java,optimize,startConfiguration,double[][],0,DEF,$ == null
DirectSearchOptimizer.java,optimize,iterations,int,0,RET,$ > 0
DirectSearchOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
DirectSearchOptimizer.java,evaluate,evaluations,int,0,MaxEvaluationsExceededException,++$ > maxEvaluations
DirectSearchOptimizer.java,buildSimplex,n,int,0,DEF,$ != startConfiguration.length
DirectSearchOptimizer.java,replaceWorstPoint,comparator,Comparator<RealPointValuePair>,0,DEF,$.compare(simplex[i], pointValuePair) > 0
DirectSearchOptimizer.java,replaceWorstPoint,pointValuePair,RealPointValuePair,0,DEF,comparator.compare(simplex[i], $) > 0
DirectSearchOptimizer.java,replaceWorstPoint,simplex,RealPointValuePair[],0,DEF,comparator.compare($[i], pointValuePair) > 0
DirectSearchOptimizer.java,replaceWorstPoint,i,int,0,DEF,comparator.compare(simplex[$], pointValuePair) > 0
MultiDirectional.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(reflected, best) < 0
MultiDirectional.java,iterateSimplex,reflected,RealPointValuePair,0,RET,comparator.compare($, best) < 0
MultiDirectional.java,iterateSimplex,best,RealPointValuePair,0,RET,comparator.compare(reflected, $) < 0
MultiDirectional.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,DEF,$.compare(reflected, expanded) <= 0
MultiDirectional.java,iterateSimplex,expanded,RealPointValuePair,0,DEF,comparator.compare(reflected, $) <= 0
MultiDirectional.java,iterateSimplex,reflected,RealPointValuePair,0,DEF,comparator.compare($, expanded) <= 0
MultiDirectional.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(contracted, best) < 0
MultiDirectional.java,iterateSimplex,contracted,RealPointValuePair,0,RET,comparator.compare($, best) < 0
MultiDirectional.java,iterateSimplex,best,RealPointValuePair,0,RET,comparator.compare(contracted, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(best, reflected) <= 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare(best, $) <= 0
NelderMead.java,iterateSimplex,best,RealPointValuePair,1,DEF,comparator.compare($, reflected) <= 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(reflected, secondBest) < 0
NelderMead.java,iterateSimplex,secondBest,RealPointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare($, secondBest) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(reflected, best) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare($, best) < 0
NelderMead.java,iterateSimplex,best,RealPointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(expanded, reflected) < 0
NelderMead.java,iterateSimplex,expanded,RealPointValuePair,1,DEF,comparator.compare($, reflected) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare(expanded, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,RET,$.compare(reflected, worst) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,RET,comparator.compare($, worst) < 0
NelderMead.java,iterateSimplex,worst,RealPointValuePair,1,RET,comparator.compare(reflected, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(outContracted, reflected) <= 0
NelderMead.java,iterateSimplex,outContracted,RealPointValuePair,0,RET,comparator.compare($, reflected) <= 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,0,RET,comparator.compare(outContracted, $) <= 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(inContracted, worst) < 0
NelderMead.java,iterateSimplex,worst,RealPointValuePair,0,RET,comparator.compare(inContracted, $) < 0
NelderMead.java,iterateSimplex,inContracted,RealPointValuePair,0,RET,comparator.compare($, worst) < 0
NonLinearConjugateGradientOptimizer.java,setInitialStep,initialStep,double,1,DEF,$ <= 0
NonLinearConjugateGradientOptimizer.java,doOptimize,preconditioner,Preconditioner,0,DEF,$ == null
NonLinearConjugateGradientOptimizer.java,doOptimize,solver,UnivariateRealSolver,0,DEF,$ == null
NonLinearConjugateGradientOptimizer.java,doOptimize,goalType,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,previous,RealPointValuePair,0,RET,$ != null
NonLinearConjugateGradientOptimizer.java,doOptimize,goalType,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,updateFormula,ConjugateGradientFormula,1,DEF,$ == ConjugateGradientFormula.FLETCHER_REEVES
NonLinearConjugateGradientOptimizer.java,doOptimize,n,int,1,DEF,getIterations() % $ == 0
NonLinearConjugateGradientOptimizer.java,doOptimize,beta,double,1,DEF,$ < 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yA,double,0,RET,$ * yB <= 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yB,double,0,RET,yA * $ <= 0
LevenbergMarquardtOptimizer.java,doOptimize,dk,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,s,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtOptimizer.java,doOptimize,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtOptimizer.java,doOptimize,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,DEF,$ >= 1.0e-4
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,0,RET,Math.abs($) <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,1,OptimizationException,Math.abs($) <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,1,OptimizationException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,OptimizationException,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,OptimizationException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtOptimizer.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtOptimizer.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtOptimizer.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtOptimizer.java,qrDecomposition,ak2,double,0,RET,$ == 0
AbstractScalarDifferentiableOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
AbstractScalarDifferentiableOptimizer.java,computeObjectiveValue,evaluations,int,0,MaxEvaluationsExceededException,++$ > maxEvaluations
AbstractLeastSquaresOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
AbstractLeastSquaresOptimizer.java,updateJacobian,jacobian,double[][],0,FunctionEvaluationException,$.length != rows
AbstractLeastSquaresOptimizer.java,updateResidualsAndCost,objectiveEvaluations,int,0,MaxEvaluationsExceededException,++$ > maxEvaluations
AbstractLeastSquaresOptimizer.java,updateResidualsAndCost,objective,double[],0,FunctionEvaluationException,$.length != rows
AbstractLeastSquaresOptimizer.java,guessParametersErrors,rows,int,0,OptimizationException,$ <= cols
AbstractLeastSquaresOptimizer.java,optimize,target,double[],0,OptimizationException,$.length != weights.length
GaussNewtonOptimizer.java,doOptimize,previous,VectorialPointValuePair,0,DEF,$ != null
MultiStartDifferentiableMultivariateRealOptimizer.java,getOptima,optima,RealPointValuePair[],0,DEF,$ == null
MultiStartDifferentiableMultivariateRealOptimizer.java,compare,o1,RealPointValuePair,1,RET,$ == null
MultiStartDifferentiableMultivariateRealOptimizer.java,compare,o2,RealPointValuePair,0,RET,$ == null
MultiStartDifferentiableMultivariateRealOptimizer.java,optimize,optima,RealPointValuePair[],0,OptimizationException,$[0] == null
SimpleVectorialPointChecker.java,converged,difference,double,0,RET,$ > absoluteThreshold
Beta.java,regularizedBeta,x,double,1,DEF,$ < 0
Beta.java,regularizedBeta,x,double,1,DEF,$ > 1
Beta.java,regularizedBeta,a,double,1,DEF,$ <= 0.0
Beta.java,regularizedBeta,b,double,1,DEF,$ <= 0.0
Beta.java,getB,n,int,1,DEF,$ % 2 == 0
Beta.java,logBeta,a,double,1,DEF,$ <= 0.0
Beta.java,logBeta,b,double,1,DEF,$ <= 0.0
Gamma.java,logGamma,x,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ >= 1.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ > a
Gamma.java,regularizedGammaP,n,double,1,MaxIterationsExceededException,$ >= maxIterations
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < a
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ < 1.0
Gamma.java,digamma,x,double,0,RET,$ > 0
Gamma.java,digamma,x,double,0,RET,$ <= S_LIMIT
Gamma.java,digamma,x,double,0,RET,$ >= C_LIMIT
Gamma.java,trigamma,x,double,0,RET,$ > 0
Gamma.java,trigamma,x,double,0,RET,$ <= S_LIMIT
Gamma.java,trigamma,x,double,0,RET,$ >= C_LIMIT
Erf.java,erf,x,double,0,DEF,$ < 0
Vector3DFormat.java,format,obj,null,0,RET,$ instanceof Vector3D
Vector3DFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
Vector3DFormat.java,parse,x,Number,0,RET,$ == null
Vector3DFormat.java,parse,y,Number,0,RET,$ == null
Vector3DFormat.java,parse,z,Number,0,RET,$ == null
Vector3D.java,normalize,s,double,0,DEF,$ == 0
Vector3D.java,orthogonal,threshold,double,0,DEF,$ == 0
Vector3D.java,orthogonal,x,double,1,RET,$ >= -threshold
Vector3D.java,orthogonal,x,double,1,RET,$ <= threshold
Vector3D.java,orthogonal,y,double,0,RET,$ >= -threshold
Vector3D.java,orthogonal,y,double,0,RET,$ <= threshold
Vector3D.java,angle,normProduct,double,0,DEF,$ == 0
Vector3D.java,angle,dot,double,0,RET,$ < -threshold
Vector3D.java,angle,dot,double,0,RET,$ > threshold
Vector3D.java,angle,dot,double,0,RET,$ >= 0
Vector3D.java,equals,other,Object,0,RET,$ == null
Rotation.java,Rotation,norm,double,0,DEF,$ == 0
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$.length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[0].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[1].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[2].length != 3
Rotation.java,Rotation,det,double,0,NotARotationMatrixException,$ < 0.0
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,u1u1,double,0,DEF,$ == 0
Rotation.java,Rotation,u2u2,double,0,DEF,$ == 0
Rotation.java,Rotation,v1v1,double,0,DEF,$ == 0
Rotation.java,Rotation,v2v2,double,0,DEF,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,normProduct,double,0,DEF,$ == 0
Rotation.java,getAxis,squaredSine,double,1,RET,$ == 0
Rotation.java,getAxis,q0,double,0,RET,$ < 0
Rotation.java,getAngle,q0,double,1,RET,$ < -0.1
Rotation.java,getAngle,q0,double,1,RET,$ > 0.1
Rotation.java,getAngle,q0,double,0,RET,$ < 0
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,orthogonalizeMatrix,fn1,double,0,RET,Math.abs($ - fn) <= threshold
Rotation.java,orthogonalizeMatrix,fn,double,0,RET,Math.abs(fn1 - $) <= threshold
ValueServer.java,resetReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,closeReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,DEF,$ == null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,DEF,$.getBinStats().size() == 0
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,$ == null
ValueServer.java,getNextReplay,str,String,0,DEF,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,(str = $.readLine()) == null
ValueServer.java,getNextReplay,str,String,0,DEF,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,(str = $.readLine()) == null
UncorrelatedRandomVectorGenerator.java,UncorrelatedRandomVectorGenerator,mean,double[],0,DEF,$.length != standardDeviation.length
EmpiricalDistributionImpl.java,load,sampleStats,SummaryStatistics,0,DEF,$.getN() == 0
EmpiricalDistributionImpl.java,getAdapter,in,null,1,RET,$ instanceof BufferedReader
EmpiricalDistributionImpl.java,getAdapter,in,null,1,RET,$ instanceof double[]
EmpiricalDistributionImpl.java,getNextValue,stats,SummaryStatistics,0,RET,$.getN() > 0
EmpiricalDistributionImpl.java,getNextValue,stats,SummaryStatistics,1,RET,$.getStandardDeviation() > 0
RandomDataImpl.java,nextHexString,len,int,0,DEF,$ <= 0
RandomDataImpl.java,nextHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextInt,lower,int,0,DEF,$ >= upper
RandomDataImpl.java,nextLong,lower,long,0,DEF,$ >= upper
RandomDataImpl.java,nextSecureHexString,len,int,0,DEF,$ <= 0
RandomDataImpl.java,nextSecureHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextSecureInt,lower,int,0,DEF,$ >= upper
RandomDataImpl.java,nextSecureLong,lower,long,0,DEF,$ >= upper
RandomDataImpl.java,nextPoisson,mean,double,0,DEF,$ <= 0
RandomDataImpl.java,nextPoisson,mean,double,1,RET,$ < pivot
RandomDataImpl.java,nextPoisson,r,double,1,DEF,$ >= p
RandomDataImpl.java,nextPoisson,u,double,1,DEF,$ <= c1
RandomDataImpl.java,nextPoisson,x,double,0,DEF,$ < -mu
RandomDataImpl.java,nextPoisson,c1,double,1,DEF,$ < u
RandomDataImpl.java,nextPoisson,u,double,1,DEF,$ <= c2
RandomDataImpl.java,nextPoisson,x,double,0,DEF,$ > delta
RandomDataImpl.java,nextPoisson,c2,double,1,DEF,$ < u
RandomDataImpl.java,nextPoisson,u,double,1,DEF,$ <= c3
RandomDataImpl.java,nextPoisson,c3,double,1,DEF,$ < u
RandomDataImpl.java,nextPoisson,u,double,1,DEF,$ <= c4
RandomDataImpl.java,nextPoisson,c4,double,0,DEF,$ < u
RandomDataImpl.java,nextGaussian,sigma,double,0,DEF,$ <= 0
RandomDataImpl.java,nextExponential,mean,double,0,DEF,$ < 0.0
RandomDataImpl.java,nextUniform,lower,double,0,DEF,$ >= upper
RandomDataImpl.java,getRan,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,getSecRan,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,nextPermutation,k,int,0,DEF,$ > n
RandomDataImpl.java,nextPermutation,k,int,0,DEF,$ == 0
RandomDataImpl.java,nextSample,k,int,0,DEF,$ > len
RandomDataImpl.java,nextSample,k,int,0,DEF,$ <= 0
RandomDataImpl.java,shuffle,i,int,1,DEF,$ == 0
CorrelatedRandomVectorGenerator.java,CorrelatedRandomVectorGenerator,mean,double[],0,DimensionMismatchException,$.length != order
CorrelatedRandomVectorGenerator.java,decompose,swap,int[],0,DEF,$[rank] != rank
CorrelatedRandomVectorGenerator.java,decompose,rank,int,0,DEF,swap[$] != rank
CorrelatedRandomVectorGenerator.java,decompose,c,double[][],1,NotPositiveDefiniteMatrixException,$[ir][ir] < small
CorrelatedRandomVectorGenerator.java,decompose,ir,int,1,NotPositiveDefiniteMatrixException,c[$][$] < small
CorrelatedRandomVectorGenerator.java,decompose,rank,int,0,NotPositiveDefiniteMatrixException,$ == 0
CorrelatedRandomVectorGenerator.java,decompose,c,double[][],0,NotPositiveDefiniteMatrixException,$[index[i]][index[i]] < -small
CorrelatedRandomVectorGenerator.java,decompose,index,int[],0,NotPositiveDefiniteMatrixException,c[$[i]][$[i]] < -small
CorrelatedRandomVectorGenerator.java,decompose,i,int,0,NotPositiveDefiniteMatrixException,c[index[$]][index[$]] < -small
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
AbstractRandomGenerator.java,nextBytes,i,int,0,DEF,$ > 0
AbstractRandomGenerator.java,nextBytes,bytesOut,int,0,RET,$ == bytes.length
AbstractRandomGenerator.java,nextInt,n,int,0,DEF,$ <= 0
AbstractRandomGenerator.java,nextGaussian,s,double,0,DEF,$ != 0
BisectionSolver.java,solve,fm,double,1,DEF,$ * fmin > 0.0
BisectionSolver.java,solve,fmin,double,1,DEF,fm * $ > 0.0
BisectionSolver.java,solve,min,double,0,RET,Math.abs(max - $) <= absoluteAccuracy
BisectionSolver.java,solve,max,double,0,RET,Math.abs($ - min) <= absoluteAccuracy
SecantSolver.java,solve,y0,double,0,DEF,$ * y1 >= 0
SecantSolver.java,solve,y1,double,0,DEF,y0 * $ >= 0
SecantSolver.java,solve,y1,double,0,RET,Math.abs($) <= functionValueAccuracy
SecantSolver.java,solve,oldDelta,double,0,DEF,delta / $ > 1
SecantSolver.java,solve,delta,double,0,DEF,$ / oldDelta > 1
SecantSolver.java,solve,y1,double,0,DEF,$ > 0
SecantSolver.java,solve,y2,double,0,DEF,$ > 0
LaguerreSolver.java,LaguerreSolver,f,null,1,DEF,$ instanceof PolynomialFunction
LaguerreSolver.java,solve,min,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
LaguerreSolver.java,solve,max,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
LaguerreSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
LaguerreSolver.java,solve,f,null,0,DEF,$ instanceof PolynomialFunction
LaguerreSolver.java,solve,min,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
LaguerreSolver.java,solve,max,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
LaguerreSolver.java,solveAll,n,int,0,DEF,$ < 1
LaguerreSolver.java,solve,n,int,0,DEF,$ < 1
LaguerreSolver.java,solve,oldz,Complex,0,RET,(z.subtract($)).abs() <= tolerance
LaguerreSolver.java,solve,z,Complex,0,RET,($.subtract(oldz)).abs() <= tolerance
LaguerreSolver.java,solve,pv,Complex,0,RET,$.abs() <= functionValueAccuracy
NewtonSolver.java,solve,x0,double,0,RET,Math.abs(x1 - $) <= absoluteAccuracy
NewtonSolver.java,solve,x1,double,0,RET,Math.abs($ - x0) <= absoluteAccuracy
UnivariateRealSolverImpl.java,UnivariateRealSolverImpl,f,UnivariateRealFunction,0,DEF,$ == null
UnivariateRealSolverImpl.java,verifyInterval,lower,double,0,DEF,$ >= upper
UnivariateRealSolverUtils.java,bracket,function,UnivariateRealFunction,0,DEF,$ == null
UnivariateRealSolverUtils.java,bracket,maximumIterations,int,0,DEF,$ <= 0
UnivariateRealSolverUtils.java,bracket,initial,double,0,DEF,$ < lowerBound
UnivariateRealSolverUtils.java,bracket,initial,double,0,DEF,$ > upperBound
UnivariateRealSolverUtils.java,bracket,lowerBound,double,0,DEF,$ >= upperBound
UnivariateRealSolverUtils.java,bracket,fa,double,0,ConvergenceException,$ * fb >= 0.0
UnivariateRealSolverUtils.java,bracket,fb,double,0,ConvergenceException,fa * $ >= 0.0
UnivariateRealSolverUtils.java,setup,f,UnivariateRealFunction,0,DEF,$ == null
MullerSolver.java,solve,min,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
MullerSolver.java,solve,max,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
MullerSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
MullerSolver.java,solve,y0,double,0,RET,$ == 0.0
MullerSolver.java,solve,y2,double,0,RET,$ == 0.0
MullerSolver.java,solve,oldx,double,0,RET,Math.abs(x - $) <= tolerance
MullerSolver.java,solve,x,double,0,RET,Math.abs($ - oldx) <= tolerance
MullerSolver.java,solve,y,double,0,RET,Math.abs($) <= functionValueAccuracy
MullerSolver.java,solve,ym,double,1,DEF,MathUtils.sign(y0) + MathUtils.sign($) == 0.0
MullerSolver.java,solve,y0,double,1,DEF,MathUtils.sign($) + MathUtils.sign(ym) == 0.0
MullerSolver.java,solve2,y0,double,0,RET,$ == 0.0
MullerSolver.java,solve2,y1,double,0,RET,$ == 0.0
MullerSolver.java,solve2,delta,double,1,DEF,$ >= 0.0
MullerSolver.java,solve2,denominator,double,1,DEF,$ != 0
MullerSolver.java,solve2,oldx,double,0,RET,Math.abs(x - $) <= tolerance
MullerSolver.java,solve2,x,double,0,RET,Math.abs($ - oldx) <= tolerance
MullerSolver.java,solve2,y,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yInitial,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMin,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMin,double,0,RET,yInitial * $ < 0
BrentSolver.java,solve,yInitial,double,0,RET,$ * yMin < 0
BrentSolver.java,solve,yMax,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yInitial,double,0,RET,$ * yMax < 0
BrentSolver.java,solve,yMax,double,0,RET,yInitial * $ < 0
BrentSolver.java,solve,sign,double,1,DEF,$ > 0
BrentSolver.java,solve,yMin,double,1,DEF,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMax,double,1,DEF,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,sign,double,1,DEF,$ < 0
BrentSolver.java,solve,yMin,double,1,DEF,$ == 0.0
BrentSolver.java,solve,y1,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,dx,double,0,RET,Math.abs($) <= tolerance
BrentSolver.java,solve,oldDelta,double,1,DEF,Math.abs($) < tolerance
BrentSolver.java,solve,x0,double,1,DEF,$ == x2
BrentSolver.java,solve,p,double,1,DEF,$ > 0.0
BrentSolver.java,solve,delta,double,1,DEF,Math.abs($) > tolerance
BrentSolver.java,solve,dx,double,1,DEF,$ > 0.0
BrentSolver.java,solve,dx,double,0,DEF,$ <= 0.0
BrentSolver.java,solve,y1,double,0,DEF,$ > 0
BrentSolver.java,solve,y2,double,0,DEF,$ > 0
RiddersSolver.java,solve,min,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
RiddersSolver.java,solve,max,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
RiddersSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
RiddersSolver.java,solve,y1,double,0,RET,$ == 0.0
RiddersSolver.java,solve,y2,double,0,RET,$ == 0.0
RiddersSolver.java,solve,y3,double,0,RET,Math.abs($) <= functionValueAccuracy
RiddersSolver.java,solve,oldx,double,0,RET,Math.abs(x - $) <= tolerance
RiddersSolver.java,solve,x,double,0,RET,Math.abs($ - oldx) <= tolerance
RiddersSolver.java,solve,y,double,0,RET,Math.abs($) <= functionValueAccuracy
RiddersSolver.java,solve,correction,double,1,DEF,$ > 0.0
RiddersSolver.java,solve,y1,double,1,DEF,MathUtils.sign($) + MathUtils.sign(y) == 0.0
RiddersSolver.java,solve,y,double,1,DEF,MathUtils.sign(y1) + MathUtils.sign($) == 0.0
RiddersSolver.java,solve,y2,double,1,DEF,MathUtils.sign($) + MathUtils.sign(y) == 0.0
RiddersSolver.java,solve,y,double,1,DEF,MathUtils.sign(y2) + MathUtils.sign($) == 0.0
PolynomialFunctionLagrangeForm.java,evaluate,dist,double,0,DEF,$ < min_dist
PolynomialFunctionLagrangeForm.java,evaluate,divider,double,0,DuplicateSampleAbscissaException,$ == 0.0
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != j
PolynomialFunctionLagrangeForm.java,computeCoefficients,d,double,0,DEF,$ == 0.0
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != k
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,DEF,Math.min($.length, y.length) < 2
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,y,double[],0,DEF,Math.min(x.length, $.length) < 2
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,DEF,$.length != y.length
PolynomialFunctionNewtonForm.java,verifyInputArray,a,double[],0,DEF,$.length < 1
PolynomialFunctionNewtonForm.java,verifyInputArray,c,double[],0,DEF,$.length < 1
PolynomialsUtils.java,buildPolynomial,degree,int,0,DEF,$ > maxDegree
PolynomialFunction.java,PolynomialFunction,c,double[],0,DEF,$.length < 1
PolynomialFunction.java,evaluate,n,int,0,DEF,$ < 1
PolynomialFunction.java,subtract,coefficients,double[],1,DEF,$.length < p.coefficients.length
PolynomialFunction.java,differentiate,n,int,0,DEF,$ < 1
PolynomialFunction.java,differentiate,n,int,0,RET,$ == 1
PolynomialFunction.java,toString,coefficients,double[],1,RET,$[0] == 0.0
PolynomialFunction.java,toString,coefficients,double[],0,RET,$.length == 1
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] != 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] != 0
PolynomialFunction.java,toString,s,StringBuffer,1,DEF,$.length() > 0
PolynomialFunction.java,toString,coefficients,double[],1,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,1,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,absAi,double,0,DEF,($ - 1) != 0
PolynomialFunction.java,toString,i,int,0,DEF,$ > 1
PolynomialFunction.java,equals,obj,Object,0,RET,$ == null
PolynomialFunction.java,equals,obj,null,0,RET,$ instanceof PolynomialFunction
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,DEF,$.length < 2
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,DEF,$.length - 1 != polynomials.length
PolynomialSplineFunction.java,value,i,int,0,DEF,$ < 0
PolynomialSplineFunction.java,value,i,int,0,DEF,$ >= polynomials.length
LoessInterpolator.java,LoessInterpolator,bandwidth,double,0,MathException,$ < 0
LoessInterpolator.java,LoessInterpolator,bandwidth,double,0,MathException,$ > 1
LoessInterpolator.java,LoessInterpolator,robustnessIters,int,0,MathException,$ < 0
LoessInterpolator.java,smooth,xval,double[],0,MathException,$.length != yval.length
LoessInterpolator.java,smooth,n,int,0,MathException,$ == 0
LoessInterpolator.java,smooth,n,int,0,RET,$ == 1
LoessInterpolator.java,smooth,n,int,0,RET,$ == 2
LoessInterpolator.java,smooth,bandwidthInPoints,int,0,MathException,$ < 2
LoessInterpolator.java,smooth,i,int,0,DEF,$ > 0
LoessInterpolator.java,smooth,k,int,1,DEF,$ < i
LoessInterpolator.java,smooth,iter,int,0,DEF,$ == robustnessIters
LoessInterpolator.java,smooth,medianResidual,double,0,DEF,$ == 0
LoessInterpolator.java,checkStrictlyIncreasing,i,int,0,MathException,$ >= 1
DividedDifferenceInterpolator.java,computeDividedDifference,denominator,double,0,DuplicateSampleAbscissaException,$ == 0.0
SplineInterpolator.java,interpolate,x,double[],0,DEF,$.length != y.length
SplineInterpolator.java,interpolate,x,double[],0,DEF,$.length < 3
LegendreGaussIntegrator.java,integrate,i,int,0,RET,$ + 1 >= minimalIterationCount
LegendreGaussIntegrator.java,integrate,delta,double,0,RET,$ <= limit
TrapezoidIntegrator.java,stage,n,int,1,RET,$ == 0
TrapezoidIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
TrapezoidIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
TrapezoidIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
TrapezoidIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 64
UnivariateRealIntegratorImpl.java,UnivariateRealIntegratorImpl,f,UnivariateRealFunction,0,DEF,$ == null
UnivariateRealIntegratorImpl.java,verifyInterval,lower,double,0,DEF,$ >= upper
UnivariateRealIntegratorImpl.java,verifyIterationCount,minimalIterationCount,int,0,DEF,$ <= 0
UnivariateRealIntegratorImpl.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ <= minimalIterationCount
SimpsonIntegrator.java,integrate,minimalIterationCount,int,0,RET,$ == 1
SimpsonIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
SimpsonIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
SimpsonIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
SimpsonIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 64
RombergIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
RombergIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
RombergIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
RombergIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 32
ComplexFormat.java,format,im,double,1,DEF,$ < 0.0
ComplexFormat.java,format,im,double,0,DEF,$ > 0.0
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Complex
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Number
ComplexFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
ComplexFormat.java,parse,re,Number,0,RET,$ == null
ComplexFormat.java,parse,im,Number,0,RET,$ == null
ComplexFormat.java,setImaginaryCharacter,imaginaryCharacter,String,0,DEF,$ == null
ComplexFormat.java,setImaginaryCharacter,imaginaryCharacter,String,0,DEF,$.length() == 0
ComplexFormat.java,setImaginaryFormat,imaginaryFormat,NumberFormat,0,DEF,$ == null
ComplexFormat.java,setRealFormat,realFormat,NumberFormat,0,DEF,$ == null
Complex.java,abs,imaginary,double,0,RET,$ == 0.0
Complex.java,abs,real,double,0,RET,$ == 0.0
Complex.java,divide,c,double,0,RET,$ == 0.0
Complex.java,divide,d,double,0,RET,$ == 0.0
Complex.java,divide,d,double,0,RET,$ == 0.0
Complex.java,divide,c,double,0,RET,$ == 0.0
Complex.java,equals,other,Object,1,DEF,$ == null
Complex.java,pow,x,Complex,0,NullPointerException,$ == null
Complex.java,sqrt,real,double,0,RET,$ == 0.0
Complex.java,sqrt,imaginary,double,0,RET,$ == 0.0
Complex.java,sqrt,real,double,1,RET,$ >= 0.0
Complex.java,nthRoot,n,int,0,DEF,$ <= 0
ComplexUtils.java,polar2Complex,r,double,0,DEF,$ < 0
DescriptiveStatistics.java,addValue,windowSize,int,1,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ < 1
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,getPercentile,percentileImpl,null,1,DEF,$ instanceof Percentile
AbstractStorelessUnivariateStatistic.java,evaluate,values,double[],0,DEF,$ == null
AbstractStorelessUnivariateStatistic.java,incrementAll,values,double[],0,DEF,$ == null
AbstractStorelessUnivariateStatistic.java,equals,object,Object,0,RET,$ instanceof AbstractStorelessUnivariateStatistic == false
AbstractStorelessUnivariateStatistic.java,equals,object,null,0,RET,$ instanceof AbstractStorelessUnivariateStatistic
StatisticalSummaryValues.java,equals,object,Object,0,RET,$ instanceof StatisticalSummaryValues == false
StatisticalSummaryValues.java,equals,object,null,0,RET,$ instanceof StatisticalSummaryValues
FirstMoment.java,increment,n,long,0,DEF,$ == 0
GeometricMean.java,getResult,sumOfLogs,StorelessUnivariateStatistic,1,RET,$.getN() > 0
ThirdMoment.java,increment,n,long,0,DEF,$ < 1
Kurtosis.java,getResult,moment,FourthMoment,0,DEF,$.getN() > 3
Kurtosis.java,getResult,moment,FirstMoment,1,DEF,$.n <= 3
Kurtosis.java,getResult,variance,double,1,DEF,$ < 10E-20
Kurtosis.java,evaluate,length,int,0,DEF,$ > 3
Skewness.java,getResult,moment,FirstMoment,0,RET,$.n < 3
Skewness.java,getResult,variance,double,1,RET,$ < 10E-20
Skewness.java,evaluate,length,int,0,DEF,$ > 2
FourthMoment.java,increment,n,long,0,DEF,$ < 1
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 0
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 1
Variance.java,evaluate,values,double[],0,DEF,$ == null
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
VectorialCovariance.java,increment,v,double[],0,DimensionMismatchException,$.length != sums.length
VectorialCovariance.java,getResult,n,long,0,DEF,$ > 1
VectorialCovariance.java,equals,obj,Object,0,RET,$ == null
VectorialCovariance.java,equals,obj,null,0,RET,$ instanceof VectorialCovariance
VectorialCovariance.java,equals,isBiasCorrected,boolean,0,RET,$ != other.isBiasCorrected
VectorialCovariance.java,equals,n,long,0,RET,$ != other.n
SecondMoment.java,increment,n,long,0,DEF,$ < 1
VectorialMean.java,increment,v,double[],0,DimensionMismatchException,$.length != means.length
VectorialMean.java,equals,obj,Object,0,RET,$ == null
VectorialMean.java,equals,obj,null,0,RET,$ instanceof VectorialMean
Percentile.java,evaluate,p,double,0,DEF,$ > 100
Percentile.java,evaluate,p,double,0,DEF,$ <= 0
Percentile.java,evaluate,length,int,0,RET,$ == 0
Percentile.java,evaluate,length,int,0,RET,$ == 1
Percentile.java,evaluate,pos,double,0,RET,$ < 1
Percentile.java,evaluate,pos,double,0,RET,$ >= n
Percentile.java,setQuantile,p,double,0,DEF,$ <= 0
Percentile.java,setQuantile,p,double,0,DEF,$ > 100
Max.java,increment,d,double,0,DEF,$ > value
Min.java,increment,d,double,0,DEF,$ < value
AbstractUnivariateStatistic.java,test,values,double[],0,DEF,$ == null
AbstractUnivariateStatistic.java,test,begin,int,0,DEF,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,DEF,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,DEF,begin + $ > values.length
AbstractUnivariateStatistic.java,test,begin,int,0,DEF,$ + length > values.length
AbstractUnivariateStatistic.java,test,length,int,0,RET,$ == 0
MultivariateSummaryStatistics.java,append,i,int,0,DEF,$ > 0
MultivariateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof MultivariateSummaryStatistics == false
MultivariateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof MultivariateSummaryStatistics
MultivariateSummaryStatistics.java,checkEmpty,n,long,0,DEF,$ > 0
MultivariateSummaryStatistics.java,checkDimension,dimension,int,0,DimensionMismatchException,$ != k
AggregateSummaryStatistics.java,aggregate,statistics,Collection<SummaryStatistics>,0,RET,$ == null
AggregateSummaryStatistics.java,aggregate,current,SummaryStatistics,0,DEF,$.getMin() < min
AggregateSummaryStatistics.java,aggregate,current,SummaryStatistics,0,DEF,$.getMax() > max
AggregateSummaryStatistics.java,aggregate,n,long,1,DEF,$ == 0
AggregateSummaryStatistics.java,aggregate,n,long,1,DEF,$ == 1
AggregateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof AggregatingSummaryStatistics == false
AggregateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof AggregatingSummaryStatistics
SummaryStatistics.java,addValue,meanImpl,null,0,DEF,$ instanceof Mean
SummaryStatistics.java,addValue,varianceImpl,null,0,DEF,$ instanceof Variance
SummaryStatistics.java,addValue,geoMeanImpl,null,0,DEF,$ instanceof GeometricMean
SummaryStatistics.java,getMean,mean,Mean,1,RET,$ == meanImpl
SummaryStatistics.java,getVariance,varianceImpl,StorelessUnivariateStatistic,1,RET,$ == variance
SummaryStatistics.java,clear,meanImpl,StorelessUnivariateStatistic,0,DEF,$ != mean
SummaryStatistics.java,clear,varianceImpl,StorelessUnivariateStatistic,0,DEF,$ != variance
SummaryStatistics.java,equals,object,Object,0,RET,$ instanceof SummaryStatistics == false
SummaryStatistics.java,equals,object,null,0,RET,$ instanceof SummaryStatistics
SummaryStatistics.java,checkEmpty,n,long,0,DEF,$ > 0
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.geoMean == source.geoMeanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.max == source.maxImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.mean == source.meanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.min == source.minImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sum == source.sumImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.variance == source.varianceImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumLog == source.sumLogImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumsq == source.sumsqImpl
Product.java,increment,n,long,1,DEF,$ == 0
SumOfLogs.java,getResult,n,int,1,RET,$ > 0
SumOfSquares.java,increment,n,long,1,DEF,$ == 0
Sum.java,increment,n,long,1,DEF,$ == 0
TTestImpl.java,checkSignificanceLevel,alpha,double,0,DEF,$ <= 0
TTestImpl.java,checkSignificanceLevel,alpha,double,0,DEF,$ > 0.5
TTestImpl.java,checkSampleData,data,double[],0,DEF,$ == null
TTestImpl.java,checkSampleData,data,double[],0,DEF,$.length < 2
TTestImpl.java,checkSampleData,stat,StatisticalSummary,0,DEF,$ == null
TTestImpl.java,checkSampleData,stat,StatisticalSummary,0,DEF,$.getN() < 2
OneWayAnovaImpl.java,anovaTest,alpha,double,0,DEF,$ <= 0
OneWayAnovaImpl.java,anovaTest,alpha,double,0,DEF,$ > 0.5
OneWayAnovaImpl.java,anovaStats,categoryData,Collection<double[]>,0,DEF,$.size() < 2
OneWayAnovaImpl.java,anovaStats,array,double[],0,DEF,$.length <= 1
ChiSquareTestImpl.java,chiSquare,expected,double[],0,DEF,$.length < 2
ChiSquareTestImpl.java,chiSquare,expected,double[],0,DEF,$.length != observed.length
ChiSquareTestImpl.java,chiSquare,sumObserved,double,0,DEF,Math.abs(sumExpected - $) > 10E-6
ChiSquareTestImpl.java,chiSquare,sumExpected,double,0,DEF,Math.abs($ - sumObserved) > 10E-6
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,DEF,$ <= 0
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,DEF,$ > 0.5
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,DEF,$ <= 0
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,DEF,$ > 0.5
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],0,DEF,$.length < 2
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],0,DEF,$.length != observed2.length
ChiSquareTestImpl.java,chiSquareDataSetsComparison,countSum1,long,0,DEF,$ == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,countSum2,long,0,DEF,$ == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,i,int,1,DEF,observed1[$] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],1,DEF,$[i] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed2,long[],1,DEF,$[i] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,i,int,1,DEF,observed2[$] == 0
ChiSquareTestImpl.java,chiSquareTestDataSetsComparison,alpha,double,0,DEF,$ <= 0
ChiSquareTestImpl.java,chiSquareTestDataSetsComparison,alpha,double,0,DEF,$ > 0.5
ChiSquareTestImpl.java,checkArray,in,long[][],0,DEF,$.length < 2
ChiSquareTestImpl.java,checkArray,in,long[][],0,DEF,$[0].length < 2
ChiSquareTestImpl.java,checkPositive,in,double[],0,DEF,$[i] <= 0
ChiSquareTestImpl.java,checkPositive,i,int,0,DEF,in[$] <= 0
ChiSquareTestImpl.java,checkNonNegative,in,long[],0,DEF,$[i] < 0
ChiSquareTestImpl.java,checkNonNegative,i,int,0,DEF,in[$] < 0
ChiSquareTestImpl.java,checkNonNegative,in,long[][],0,DEF,$[i][j] < 0
ChiSquareTestImpl.java,checkNonNegative,i,int,0,DEF,in[$][j] < 0
ChiSquareTestImpl.java,checkNonNegative,j,int,0,DEF,in[i][$] < 0
NaturalRanking.java,rank,ranks,IntDoublePair[],1,DEF,Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
NaturalRanking.java,rank,i,int,1,DEF,Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
NaturalRanking.java,rank,tiesTrace,List<Integer>,0,DEF,$.size() > 1
NaturalRanking.java,rank,tiesTrace,List<Integer>,0,DEF,$.size() > 1
NaturalRanking.java,rank,nanStrategy,NaNStrategy,0,DEF,$ == NaNStrategy.FIXED
NaturalRanking.java,restoreNaNs,nanPositions,List<Integer>,0,RET,$.size() == 0
StatUtils.java,sumDifference,n,int,0,DEF,$ != sample2.length
StatUtils.java,sumDifference,n,int,0,DEF,$ < 1
StatUtils.java,varianceDifference,n,int,0,DEF,$ < 2
StatUtils.java,varianceDifference,n,int,0,DEF,$ != sample2.length
KMeansPlusPlusClusterer.java,chooseInitialCenters,i,int,0,DEF,dx2[$] >= r
KMeansPlusPlusClusterer.java,chooseInitialCenters,dx2,double[],0,DEF,$[i] >= r
KMeansPlusPlusClusterer.java,getNearestCluster,distance,double,0,DEF,$ < minDistance
EuclideanIntegerPoint.java,equals,other,null,0,RET,$ instanceof EuclideanIntegerPoint
EuclideanIntegerPoint.java,equals,point,int[],0,RET,$.length != otherPoint.length
PearsonsCorrelation.java,PearsonsCorrelation,covarianceMatrix,RealMatrix,0,DEF,$ == null
PearsonsCorrelation.java,getCorrelationPValues,i,int,1,DEF,$ == j
PearsonsCorrelation.java,correlation,xArray,double[],1,RET,$.length == yArray.length
PearsonsCorrelation.java,correlation,xArray,double[],1,RET,$.length > 1
PearsonsCorrelation.java,checkSufficientData,nRows,int,0,DEF,$ < 2
PearsonsCorrelation.java,checkSufficientData,nCols,int,0,DEF,$ < 2
SpearmansCorrelation.java,correlation,xArray,double[],1,RET,$.length == yArray.length
SpearmansCorrelation.java,correlation,xArray,double[],1,RET,$.length > 1
Covariance.java,covariance,length,int,1,DEF,$ == yArray.length
Covariance.java,covariance,length,int,1,DEF,$ > 1
Covariance.java,checkSufficientData,nRows,int,0,DEF,$ < 2
Covariance.java,checkSufficientData,nCols,int,0,DEF,$ < 2
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ == j
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ < p
OLSMultipleLinearRegression.java,checkUpperTriangular,r,int,0,DEF,Math.abs(m.getEntry($, c)) > epsilon
OLSMultipleLinearRegression.java,checkUpperTriangular,c,int,0,DEF,Math.abs(m.getEntry(r, $)) > epsilon
OLSMultipleLinearRegression.java,checkUpperTriangular,m,RealMatrix,0,DEF,Math.abs($.getEntry(r, c)) > epsilon
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],1,DEF,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,y,double[],1,DEF,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],1,DEF,$.length != y.length
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,DEF,$.length > 0
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,DEF,$[0].length > x.length
AbstractMultipleLinearRegression.java,validateCovarianceData,x,double[][],0,DEF,$.length != covariance.length
AbstractMultipleLinearRegression.java,validateCovarianceData,covariance,double[][],0,DEF,$.length > 0
SimpleRegression.java,addData,n,long,1,DEF,$ == 0
SimpleRegression.java,addData,n,long,0,DEF,$ > 2
SimpleRegression.java,removeData,n,long,0,DEF,$ > 0
SimpleRegression.java,removeData,n,long,0,DEF,$ > 2
SimpleRegression.java,getSlope,n,long,0,RET,$ < 2
SimpleRegression.java,getTotalSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getXSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getMeanSquareError,n,long,0,RET,$ < 3
SimpleRegression.java,getR,b1,double,0,DEF,$ < 0
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,DEF,$ >= 1
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,DEF,$ <= 0
SimpleRegression.java,setDistribution,n,long,0,DEF,$ > 2
GLSMultipleLinearRegression.java,getOmegaInverse,OmegaInverse,RealMatrix,0,DEF,$ == null
Frequency.java,addValue,v,null,1,DEF,$ instanceof Comparable<?>
Frequency.java,addValue,v,null,0,DEF,$ instanceof Integer
Frequency.java,addValue,count,Long,1,DEF,$ == null
Frequency.java,getCount,v,null,0,RET,$ instanceof Integer
Frequency.java,getCount,count,Long,0,DEF,$ != null
Frequency.java,getPct,sumFreq,long,0,RET,$ == 0
Frequency.java,getCumFreq,v,null,0,RET,$ instanceof Integer
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,DEF,$ == null
Frequency.java,getCumFreq,value,Long,0,DEF,$ != null
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,RET,$.compare(v, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,v,Comparable<>,0,RET,c.compare($, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,freqTable,TreeMap<Comparable<?>,Long>,0,RET,c.compare(v, $.firstKey()) < 0
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,0,RET,$.compare(v, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,v,Comparable<>,0,RET,c.compare($, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,freqTable,TreeMap<Comparable<?>,Long>,0,RET,c.compare(v, $.lastKey()) >= 0
Frequency.java,getCumFreq,c,Comparator<Comparable<?>>,1,DEF,$.compare(v, nextValue) > 0
Frequency.java,getCumFreq,v,Comparable<>,1,DEF,c.compare($, nextValue) > 0
Frequency.java,getCumFreq,nextValue,Comparable<>,1,DEF,c.compare(v, $) > 0
Frequency.java,getCumPct,sumFreq,long,0,RET,$ == 0
Frequency.java,equals,obj,Object,0,RET,$ == null
Frequency.java,equals,obj,null,0,RET,$ instanceof Frequency
Frequency.java,equals,freqTable,TreeMap<Comparable<?>,Long>,1,RET,$ == null
Frequency.java,equals,other,Frequency,0,RET,$.freqTable != null
FDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
FDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
FDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
FDistributionImpl.java,getInitialDomain,d,double,0,DEF,$ > 2.0
FDistributionImpl.java,setNumeratorDegreesOfFreedom,degreesOfFreedom,double,0,DEF,$ <= 0.0
FDistributionImpl.java,setDenominatorDegreesOfFreedom,degreesOfFreedom,double,0,DEF,$ <= 0.0
PoissonDistributionImpl.java,setMean,p,double,0,DEF,$ <= 0
PoissonDistributionImpl.java,probability,x,int,0,RET,$ < 0
PoissonDistributionImpl.java,probability,x,int,0,RET,$ == Integer.MAX_VALUE
PoissonDistributionImpl.java,cumulativeProbability,x,int,0,RET,$ < 0
PoissonDistributionImpl.java,cumulativeProbability,x,int,0,RET,$ == Integer.MAX_VALUE
HypergeometricDistributionImpl.java,HypergeometricDistributionImpl,numberOfSuccesses,int,0,DEF,$ > populationSize
HypergeometricDistributionImpl.java,HypergeometricDistributionImpl,sampleSize,int,0,DEF,$ > populationSize
HypergeometricDistributionImpl.java,setNumberOfSuccesses,num,int,0,DEF,$ < 0
HypergeometricDistributionImpl.java,setPopulationSize,size,int,0,DEF,$ <= 0
HypergeometricDistributionImpl.java,setSampleSize,size,int,0,DEF,$ < 0
GammaDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
GammaDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
GammaDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
GammaDistributionImpl.java,setAlpha,alpha,double,0,DEF,$ <= 0.0
GammaDistributionImpl.java,setBeta,beta,double,0,DEF,$ <= 0.0
GammaDistributionImpl.java,density,x,Double,0,RET,$ < 0
GammaDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
GammaDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
TDistributionImpl.java,setDegreesOfFreedom,degreesOfFreedom,double,0,DEF,$ <= 0.0
TDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ == 0.0
TDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ < 0.0
TDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
TDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
BinomialDistributionImpl.java,setNumberOfTrials,trials,int,0,DEF,$ < 0
BinomialDistributionImpl.java,setProbabilityOfSuccess,p,double,0,DEF,$ < 0.0
BinomialDistributionImpl.java,setProbabilityOfSuccess,p,double,0,DEF,$ > 1.0
BinomialDistributionImpl.java,cumulativeProbability,x,int,1,DEF,$ < 0
BinomialDistributionImpl.java,probability,x,int,1,DEF,$ < 0
BinomialDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
BinomialDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
ExponentialDistributionImpl.java,setMean,mean,double,0,DEF,$ <= 0.0
ExponentialDistributionImpl.java,density,x,Double,0,RET,$ < 0
ExponentialDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ < 0.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ > 1.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1.0
ExponentialDistributionImpl.java,getDomainUpperBound,p,double,1,RET,$ < .5
ExponentialDistributionImpl.java,getInitialDomain,p,double,1,RET,$ < .5
ZipfDistributionImpl.java,setNumberOfElements,n,int,0,DEF,$ <= 0
ZipfDistributionImpl.java,setExponent,s,double,0,DEF,$ <= 0.0
ZipfDistributionImpl.java,probability,x,int,0,RET,$ <= 0
ZipfDistributionImpl.java,cumulativeProbability,x,int,1,RET,$ <= 0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ < 0.0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ > 1.0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
CauchyDistributionImpl.java,setScale,s,double,0,DEF,$ <= 0.0
CauchyDistributionImpl.java,getDomainLowerBound,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ > .5
NormalDistributionImpl.java,setStandardDeviation,sd,double,0,DEF,$ <= 0.0
NormalDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
NormalDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
NormalDistributionImpl.java,getDomainLowerBound,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ > .5
PascalDistributionImpl.java,setNumberOfSuccesses,successes,int,0,DEF,$ < 0
PascalDistributionImpl.java,setProbabilityOfSuccess,p,double,0,DEF,$ < 0.0
PascalDistributionImpl.java,setProbabilityOfSuccess,p,double,0,DEF,$ > 1.0
PascalDistributionImpl.java,cumulativeProbability,x,int,1,DEF,$ < 0
PascalDistributionImpl.java,probability,x,int,1,DEF,$ < 0
PascalDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
PascalDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
AbstractDistribution.java,cumulativeProbability,x0,double,0,DEF,$ > x1
AbstractIntegerDistribution.java,cumulativeProbability,x0,double,0,DEF,$ > x1
AbstractIntegerDistribution.java,cumulativeProbability,x0,double,1,RET,Math.floor($) < x0
AbstractIntegerDistribution.java,probability,fl,double,1,RET,$ == x
AbstractIntegerDistribution.java,cumulativeProbability,x0,int,0,DEF,$ > x1
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,DEF,$ < 0.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,DEF,$ > 1.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,pm,double,1,DEF,$ > p
AbstractIntegerDistribution.java,inverseCumulativeProbability,xm,int,1,DEF,$ == x1
AbstractIntegerDistribution.java,inverseCumulativeProbability,xm,int,1,DEF,$ == x0
ChiSquaredDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
ChiSquaredDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
ChiSquaredDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
ChiSquaredDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
AbstractContinuousDistribution.java,inverseCumulativeProbability,p,double,0,DEF,$ < 0.0
AbstractContinuousDistribution.java,inverseCumulativeProbability,p,double,0,DEF,$ > 1.0
AbstractContinuousDistribution.java,inverseCumulativeProbability,rootFindingFunction,UnivariateRealFunction,0,RET,Math.abs($.value(lowerBound)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,lowerBound,double,0,RET,Math.abs(rootFindingFunction.value($)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,upperBound,double,0,RET,Math.abs(rootFindingFunction.value($)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,rootFindingFunction,UnivariateRealFunction,0,RET,Math.abs($.value(upperBound)) < 1E-6
BetaDistributionImpl.java,density,x,Double,1,RET,$ < 0
BetaDistributionImpl.java,density,x,Double,1,RET,$ > 1
BetaDistributionImpl.java,density,x,Double,1,MathException:RET,$ == 0
BetaDistributionImpl.java,density,alpha,double,0,MathException,$ < 1
BetaDistributionImpl.java,density,x,Double,1,MathException:RET,$ == 1
BetaDistributionImpl.java,density,beta,double,0,MathException,$ < 1
BetaDistributionImpl.java,inverseCumulativeProbability,p,double,1,RET,$ == 0
BetaDistributionImpl.java,inverseCumulativeProbability,p,double,1,RET,$ == 1
BetaDistributionImpl.java,cumulativeProbability,x,double,1,RET,$ <= 0
BetaDistributionImpl.java,cumulativeProbability,x,double,1,RET,$ >= 1
WeibullDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ < 0.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ > 1.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
WeibullDistributionImpl.java,setShape,alpha,double,0,DEF,$ <= 0.0
WeibullDistributionImpl.java,setScale,beta,double,0,DEF,$ <= 0.0
FastFourierTransformer.java,fft,f,double[],0,RET,$.length == 1
FastFourierTransformer.java,fft,N,int,0,RET,$ == 1
FastFourierTransformer.java,fft,N,int,0,RET,$ == 2
FastFourierTransformer.java,sample,n,int,0,DEF,$ <= 0
FastFourierTransformer.java,verifyInterval,lower,double,0,DEF,$ >= upper
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == dimensionSize.length
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == d
FastFourierTransformer.java,get,vector,int[],0,RET,$ == null
FastFourierTransformer.java,get,dimensionSize,int[],0,DEF,$.length > 0
FastFourierTransformer.java,get,vector,int[],0,DEF,$.length != dimensionSize.length
FastFourierTransformer.java,set,vector,int[],0,RET,$ == null
FastFourierTransformer.java,set,dimensionSize,int[],0,DEF,$.length > 0
FastFourierTransformer.java,set,vector,int[],0,DEF,$.length != dimensionSize.length
FastFourierTransformer.java,isForward,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,computeOmega,n,int,0,DEF,$ == 0
FastFourierTransformer.java,computeOmega,absN,int,0,RET,$ == omegaCount
FastFourierTransformer.java,getOmegaReal,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,getOmegaReal,k,int,0,DEF,$ < 0
FastFourierTransformer.java,getOmegaReal,k,int,0,DEF,$ >= omegaCount
FastFourierTransformer.java,getOmegaImaginary,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,getOmegaImaginary,k,int,0,DEF,$ < 0
FastFourierTransformer.java,getOmegaImaginary,k,int,0,DEF,$ >= omegaCount
FastCosineTransformer.java,fct,N,int,0,RET,$ == 1
FastSineTransformer.java,fst,f,double[],0,DEF,$[0] != 0.0
FastSineTransformer.java,fst,N,int,0,RET,$ == 1
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,source.substring($, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,endIndex,int,0,DEF,source.substring(startIndex, $).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,source,String,0,DEF,$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,sb,StringBuffer,0,DEF,source.substring(startIndex, endIndex).compareTo($.toString()) == 0
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,$ == endIndex
CompositeFormat.java,parseNumber,number,Number,0,DEF,$ != null
CompositeFormat.java,parseFixedstring,startIndex,int,0,RET,source.substring($, endIndex).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,endIndex,int,0,RET,source.substring(startIndex, $).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,expected,String,0,RET,source.substring(startIndex, endIndex).compareTo($) != 0
CompositeFormat.java,parseFixedstring,source,String,0,RET,$.substring(startIndex, endIndex).compareTo(expected) != 0
BigReal.java,equals,other,Object,0,RET,$ == null
ResizableDoubleArray.java,addElement,startIndex,int,0,DEF,($ + numElements) > internalArray.length
ResizableDoubleArray.java,addElement,numElements,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,addElementRolling,startIndex,int,0,DEF,($ + (numElements + 1)) > internalArray.length
ResizableDoubleArray.java,addElementRolling,numElements,int,0,DEF,(startIndex + ($ + 1)) > internalArray.length
ResizableDoubleArray.java,substituteMostRecentElement,numElements,int,0,DEF,$ < 1
ResizableDoubleArray.java,checkContractExpand,contractionCriteria,float,0,DEF,$ < expansionFactor
ResizableDoubleArray.java,checkContractExpand,contractionCriteria,float,0,DEF,$ <= 1.0
ResizableDoubleArray.java,checkContractExpand,expansionFactor,float,0,DEF,$ <= 1.0
ResizableDoubleArray.java,discardExtremeElements,i,int,1,DEF,$ > numElements
ResizableDoubleArray.java,discardExtremeElements,i,int,1,DEF,$ < 0
ResizableDoubleArray.java,expand,expansionMode,int,1,DEF,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,getElement,index,int,1,DEF,$ >= numElements
ResizableDoubleArray.java,getElement,index,int,1,RET,$ >= 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ < 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ + 1 > numElements
ResizableDoubleArray.java,setElement,startIndex,int,0,DEF,($ + index) >= internalArray.length
ResizableDoubleArray.java,setElement,index,int,0,DEF,(startIndex + $) >= internalArray.length
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,DEF,$ != MULTIPLICATIVE_MODE
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,DEF,$ != ADDITIVE_MODE
ResizableDoubleArray.java,setInitialCapacity,initialCapacity,int,1,DEF,$ > 0
ResizableDoubleArray.java,setNumElements,i,int,0,DEF,$ < 0
ResizableDoubleArray.java,setNumElements,startIndex,int,0,DEF,($ + i) > internalArray.length
ResizableDoubleArray.java,setNumElements,i,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,shouldContract,expansionMode,int,1,RET,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,equals,object,Object,0,RET,$ instanceof ResizableDoubleArray == false
ResizableDoubleArray.java,equals,object,null,0,RET,$ instanceof ResizableDoubleArray
OpenIntToFieldHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToFieldHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToFieldHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToFieldHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToFieldHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToFieldHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToFieldHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToFieldHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToFieldHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToFieldHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToFieldHashMap.java,key,referenceCount,int,0,DEF,$ != count
OpenIntToFieldHashMap.java,key,current,int,0,DEF,$ < 0
OpenIntToFieldHashMap.java,value,referenceCount,int,0,DEF,$ != count
OpenIntToFieldHashMap.java,value,current,int,0,DEF,$ < 0
OpenIntToFieldHashMap.java,advance,referenceCount,int,0,DEF,$ != count
OpenIntToFieldHashMap.java,advance,current,int,0,DEF,$ < 0
ContinuedFraction.java,evaluate,a,double,1,DEF,$ != 0.0
ContinuedFraction.java,evaluate,b,double,1,DEF,$ != 0
ContinuedFraction.java,evaluate,n,int,0,MaxIterationsExceededException,$ >= maxIterations
MathUtils.java,addAndCheck,s,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,addAndCheck,s,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,addAndCheck,a,long,1,DEF,$ > b
MathUtils.java,addAndCheck,a,long,1,ArithmeticException,$ < 0
MathUtils.java,addAndCheck,b,long,1,ArithmeticException,$ < 0
MathUtils.java,addAndCheck,b,long,1,DEF,Long.MIN_VALUE - $ <= a
MathUtils.java,binomialCoefficient,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficient,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficient,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 61
MathUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 66
MathUtils.java,binomialCoefficientDouble,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficientDouble,n,int,0,RET,$ < 67
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 67
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 1030
MathUtils.java,checkBinomial,n,int,0,DEF,$ < k
MathUtils.java,checkBinomial,n,int,0,DEF,$ < 0
MathUtils.java,compareTo,x,double,0,RET,$ < y
MathUtils.java,equals,xInt,long,0,DEF,$ < 0
MathUtils.java,equals,yInt,long,0,DEF,$ < 0
MathUtils.java,equals,x,double[],0,RET,$ == null
MathUtils.java,equals,y,double[],0,RET,$ == null
MathUtils.java,equals,x,double[],0,RET,$.length != y.length
MathUtils.java,factorial,n,int,0,DEF,$ < 0
MathUtils.java,factorial,n,int,0,ArithmeticException,$ > 20
MathUtils.java,factorialDouble,n,int,0,DEF,$ < 0
MathUtils.java,factorialDouble,n,int,0,RET,$ < 21
MathUtils.java,factorialLog,n,int,0,DEF,$ < 0
MathUtils.java,factorialLog,n,int,0,RET,$ < 21
MathUtils.java,gcd,u,int,0,RET,$ == 0
MathUtils.java,gcd,v,int,0,RET,$ == 0
MathUtils.java,gcd,u,int,0,DEF,$ == Integer.MIN_VALUE
MathUtils.java,gcd,v,int,0,DEF,$ == Integer.MIN_VALUE
MathUtils.java,gcd,u,int,0,DEF,$ > 0
MathUtils.java,gcd,v,int,0,DEF,$ > 0
MathUtils.java,gcd,k,int,0,DEF,$ == 31
MathUtils.java,gcd,t,int,1,DEF,$ > 0
MathUtils.java,lcm,a,int,0,RET,$==0
MathUtils.java,lcm,b,int,0,RET,$==0
MathUtils.java,lcm,lcm,int,0,ArithmeticException,$ == Integer.MIN_VALUE
MathUtils.java,mulAndCheck,m,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,mulAndCheck,m,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,mulAndCheck,a,long,1,DEF,$ > b
MathUtils.java,mulAndCheck,a,long,1,ArithmeticException,$ < 0
MathUtils.java,mulAndCheck,b,long,1,ArithmeticException,$ < 0
MathUtils.java,mulAndCheck,b,long,1,ArithmeticException,$ > 0
MathUtils.java,mulAndCheck,b,long,1,DEF,Long.MIN_VALUE / $ <= a
MathUtils.java,mulAndCheck,a,long,1,ArithmeticException,$ > 0
MathUtils.java,nextAfter,d,double,0,RET,$ == 0
MathUtils.java,nextAfter,d,double,1,RET,$ * (direction - $) >= 0
MathUtils.java,nextAfter,direction,double,1,RET,d * ($ - d) >= 0
MathUtils.java,nextAfter,mantissa,long,1,RET,$ == 0x000fffffffffffffL
MathUtils.java,nextAfter,mantissa,long,1,RET,$ == 0L
MathUtils.java,scalb,d,double,0,RET,$ == 0
MathUtils.java,roundUnscaled,sign,double,1,DEF,$ == -1
MathUtils.java,roundUnscaled,sign,double,1,DEF,$ == -1
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ < 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ >= 0.5
MathUtils.java,subAndCheck,s,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,subAndCheck,s,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,subAndCheck,b,long,1,ArithmeticException,$ == Long.MIN_VALUE
MathUtils.java,subAndCheck,a,long,1,DEF,$ < 0
MathUtils.java,pow,e,int,0,DEF,$ < 0
MathUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,long,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,int,0,DEF,$ < 0
MathUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,long,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,int,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,BigInteger,0,DEF,$.compareTo(BigInteger.ZERO) < 0
DefaultTransformer.java,transform,o,Object,0,MathException,$ == null
DefaultTransformer.java,transform,o,null,0,RET,$ instanceof Number
TransformerMap.java,transform,o,null,1,DEF,$ instanceof Number
TransformerMap.java,transform,o,null,1,DEF,$ instanceof String
TransformerMap.java,transform,trans,NumberTransformer,0,DEF,$ != null
OpenIntToDoubleHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToDoubleHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToDoubleHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToDoubleHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToDoubleHashMap.java,key,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,key,current,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,value,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,value,current,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,advance,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,advance,current,int,0,DEF,$ < 0
BigFraction.java,getReducedFraction,numerator,int,0,RET,$ == 0
BigFraction.java,BigFraction,num,BigInteger,0,DEF,$ == null
BigFraction.java,BigFraction,den,BigInteger,0,DEF,$ == null
BigFraction.java,BigFraction,gcd,BigInteger,0,DEF,BigInteger.ONE.compareTo($) < 0
BigFraction.java,BigFraction,den,BigInteger,0,DEF,BigInteger.ZERO.compareTo($) > 0
BigFraction.java,BigFraction,exponent,long,0,DEF,$ != 0
BigFraction.java,BigFraction,sign,long,0,DEF,$ != 0
BigFraction.java,BigFraction,k,int,1,DEF,$ < 0
BigFraction.java,BigFraction,a0,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,value,double,0,RET,Math.abs(a0 - $) < epsilon
BigFraction.java,BigFraction,a0,long,0,RET,Math.abs($ - value) < epsilon
BigFraction.java,BigFraction,p2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,q2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,n,int,1,DEF,$ < maxIterations
BigFraction.java,BigFraction,convergent,double,1,DEF,Math.abs($ - value) > epsilon
BigFraction.java,BigFraction,value,double,1,DEF,Math.abs(convergent - $) > epsilon
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,BigFraction,n,int,0,FractionConversionException,$ >= maxIterations
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,equals,other,null,0,DEF,$ instanceof BigFraction
BigFraction.java,multiply,fraction,BigFraction,0,DEF,$.getNumeratorAsInt() != 0
BigFraction.java,pow,exponent,int,0,RET,$ < 0
BigFraction.java,pow,exponent,long,0,RET,$ < 0
BigFraction.java,pow,exponent,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
Fraction.java,Fraction,a0,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,value,double,0,RET,Math.abs(a0 - $) < epsilon
Fraction.java,Fraction,a0,long,0,RET,Math.abs($ - value) < epsilon
Fraction.java,Fraction,p2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,q2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,n,int,1,DEF,$ < maxIterations
Fraction.java,Fraction,convergent,double,1,DEF,Math.abs($ - value) > epsilon
Fraction.java,Fraction,value,double,1,DEF,Math.abs(convergent - $) > epsilon
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,n,int,0,FractionConversionException,$ >= maxIterations
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,den,int,0,DEF,$ == 0
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,Fraction,num,int,0,DEF,$ == Integer.MIN_VALUE
Fraction.java,Fraction,den,int,0,DEF,$ == Integer.MIN_VALUE
Fraction.java,Fraction,d,int,0,DEF,$ > 1
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,abs,numerator,int,1,DEF,$ >= 0
Fraction.java,equals,other,Object,1,DEF,$ == null
Fraction.java,negate,numerator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,addSub,fraction,Fraction,0,DEF,$ == null
Fraction.java,addSub,numerator,int,0,RET,$ == 0
Fraction.java,addSub,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,addSub,d1,int,0,RET,$==1
Fraction.java,addSub,w,BigInteger,0,DEF,$.bitLength() > 31
Fraction.java,multiply,fraction,Fraction,0,DEF,$ == null
Fraction.java,multiply,numerator,int,0,RET,$ == 0
Fraction.java,multiply,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,divide,fraction,Fraction,0,DEF,$ == null
Fraction.java,divide,fraction,Fraction,0,DEF,$.numerator == 0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$ == 0
Fraction.java,getReducedFraction,numerator,int,0,RET,$==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,numerator,int,0,DEF,($&1)==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$ < 0
Fraction.java,getReducedFraction,numerator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,toString,denominator,int,1,DEF,$ == 1
Fraction.java,toString,numerator,int,1,DEF,$ == 0
AbstractFormat.java,setDenominatorFormat,format,NumberFormat,0,DEF,$ == null
AbstractFormat.java,setNumeratorFormat,format,NumberFormat,0,DEF,$ == null
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
ProperBigFractionFormat.java,format,num,BigInteger,0,DEF,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,ret,BigFraction,0,RET,$ != null
ProperBigFractionFormat.java,parse,whole,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,setWholeFormat,format,NumberFormat,0,DEF,$ == null
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Fraction
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
FractionFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
FractionFormat.java,parse,num,Number,0,RET,$ == null
FractionFormat.java,parse,den,Number,0,RET,$ == null
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigFraction
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigInteger
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
BigFractionFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
BigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
BigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperFractionFormat.java,format,whole,int,0,DEF,$ != 0
ProperFractionFormat.java,parse,ret,Fraction,0,RET,$ != null
ProperFractionFormat.java,parse,whole,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,parse,den,Number,0,RET,$ == null
ProperFractionFormat.java,parse,den,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,setWholeFormat,format,NumberFormat,0,DEF,$ == null
AbstractIntegrator.java,computeDerivatives,evaluations,int,0,MaxEvaluationsExceededException,++$ > maxEvaluations
AbstractIntegrator.java,sanityChecks,equations,FirstOrderDifferentialEquations,0,IntegratorException,$.getDimension() != y0.length
AbstractIntegrator.java,sanityChecks,equations,FirstOrderDifferentialEquations,0,IntegratorException,$.getDimension() != y.length
ContinuousOutputModel.java,append,model,ContinuousOutputModel,0,RET,$.steps.size() == 0
ContinuousOutputModel.java,append,steps,List<StepInterpolator>,1,DEF,$.size() == 0
ContinuousOutputModel.java,handleStep,steps,List<StepInterpolator>,0,DEF,$.size() == 0
ContinuousOutputModel.java,setInterpolatedTime,sMin,StepInterpolator,0,RET,locatePoint(time, $) <= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMin) <= 0
ContinuousOutputModel.java,setInterpolatedTime,sMax,StepInterpolator,0,RET,locatePoint(time, $) >= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMax) >= 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ < 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ > 0
ContinuousOutputModel.java,setInterpolatedTime,tMin,double,1,DEF,Math.abs(tMed - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,Math.abs($ - tMin) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMax,double,1,DEF,Math.abs($ - tMed) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,Math.abs(tMax - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,index,int,1,DEF,$ < low
ContinuousOutputModel.java,setInterpolatedTime,index,int,0,DEF,$ > high
AdamsBashforthIntegrator.java,integrate,y,double[],0,DEF,$ != y0
AdamsBashforthIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
DormandPrince54StepInterpolator.java,DormandPrince54StepInterpolator,interpolator,DormandPrince54StepInterpolator,1,DEF,$.v1 == null
DormandPrince54StepInterpolator.java,computeInterpolatedStateAndDerivatives,v1,double[],0,DEF,$ == null
RungeKuttaIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,setStabilityCheck,stabilityReduction,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStabilityCheck,stabilityReduction,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl3,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl3,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl4,double,1,DEF,$ < 1.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl4,double,1,DEF,$ > 999.9
GraggBulirschStoerIntegrator.java,setOrderControl,maxOrder,int,0,DEF,$ <= 6
GraggBulirschStoerIntegrator.java,setOrderControl,maxOrder,int,0,DEF,$ % 2 != 0
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$ == null
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$.length != size
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudif,int,1,DEF,$ <= 0
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudif,int,1,DEF,$ >= 7
GraggBulirschStoerIntegrator.java,rescale,vecAbsoluteTolerance,double[],1,DEF,$ == null
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,DEF,2 * $ == n
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,RET,$ <= maxChecks
GraggBulirschStoerIntegrator.java,tryStep,k,int,0,RET,$ < maxIter
GraggBulirschStoerIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize > t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ > t
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize < t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ < t
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 0
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > 1.0e15
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > maxError
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ > 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,mu,int,0,DEF,$ >= 0
GraggBulirschStoerIntegrator.java,integrate,interpError,double,0,DEF,$ > 10.0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 1
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ <= targetIter
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 2
GraggBulirschStoerIntegrator.java,integrate,optimalIter,int,1,DEF,$ <= k
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ < targetIter
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ < minStep
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,IntegratorException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,IntegratorException,$.length != y0.length
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,IntegratorException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,IntegratorException,$.length != y0.length
AdaptiveStepsizeIntegrator.java,initializeStep,initialStep,double,0,RET,$ > 0
AdaptiveStepsizeIntegrator.java,filterStep,h,double,0,IntegratorException,Math.abs($) < minStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,0,DEF,$ < -maxStep
EmbeddedRungeKuttaIntegrator.java,integrate,y,double[],0,DEF,$ != y0
EmbeddedRungeKuttaIntegrator.java,integrate,vecAbsoluteTolerance,double[],1,DEF,$ != null
EmbeddedRungeKuttaIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
AdamsNordsieckTransformer.java,getInstance,t,AdamsNordsieckTransformer,0,DEF,$ == null
AdamsMoultonIntegrator.java,integrate,y,double[],0,DEF,$ != y0
AdamsMoultonIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
AdamsMoultonIntegrator.java,visit,row,int,1,DEF,($ & 0x1) == 0
DormandPrince853StepInterpolator.java,DormandPrince853StepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState == null
DormandPrince853StepInterpolator.java,computeInterpolatedStateAndDerivatives,v,double[][],0,DEF,$ == null
DormandPrince853StepInterpolator.java,doFinalize,currentState,double[],0,RET,$ == null
DormandPrince853Integrator.java,estimateError,den,double,0,DEF,$ <= 0.0
RungeKuttaStepInterpolator.java,RungeKuttaStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
RungeKuttaStepInterpolator.java,readExternal,currentState,double[],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ < 0
GraggBulirschStoerStepInterpolator.java,resetTables,polynoms,double[][],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ <= 4
GraggBulirschStoerStepInterpolator.java,GraggBulirschStoerStepInterpolator,interpolator,GraggBulirschStoerStepInterpolator,1,DEF,$.polynoms == null
GraggBulirschStoerStepInterpolator.java,computeCoefficients,polynoms,double[][],0,DEF,$ == null
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,RET,$ < 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 1
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 2
GraggBulirschStoerStepInterpolator.java,estimateError,currentDegree,int,0,DEF,$ >= 5
GraggBulirschStoerStepInterpolator.java,computeInterpolatedStateAndDerivatives,currentDegree,int,0,DEF,$ > 3
GraggBulirschStoerStepInterpolator.java,computeInterpolatedStateAndDerivatives,h,double,0,DEF,$ == 0
StepNormalizer.java,handleStep,lastState,double[],0,DEF,$ == null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.scaled != null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.nordsieck != null
NordsieckStepInterpolator.java,NordsieckStepInterpolator,interpolator,NordsieckStepInterpolator,0,DEF,$.stateVariation != null
NordsieckStepInterpolator.java,writeExternal,scaled,double[],1,DEF,$ == null
NordsieckStepInterpolator.java,writeExternal,nordsieck,Array2DRowRealMatrix,1,DEF,$ == null
AbstractStepInterpolator.java,AbstractStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
AbstractStepInterpolator.java,writeBaseExternal,currentState,double[],1,DEF,$ == null
AbstractStepInterpolator.java,writeBaseExternal,currentState,double[],0,DEF,$ != null
AbstractStepInterpolator.java,readBaseExternal,dimension,int,1,DEF,$ < 0
EventState.java,evaluateStep,gb,double,1,FunctionEvaluationException:RET,$ >= 0
EventState.java,evaluateStep,root,double,1,DEF,Math.abs($ - ta) <= convergence
EventState.java,evaluateStep,ta,double,1,DEF,Math.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,1,DEF,Math.abs($ - previousEventTime) <= convergence
EventState.java,evaluateStep,previousEventTime,double,1,DEF,Math.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,0,RET,Math.abs(previousEventTime - $) > convergence
EventState.java,evaluateStep,previousEventTime,double,0,RET,Math.abs($ - root) > convergence
EventState.java,evaluateStep,pendingEventTime,double,0,RET,Math.abs(t1 - $) <= convergence
EventState.java,evaluateStep,t1,double,0,RET,Math.abs($ - pendingEventTime) <= convergence
EventState.java,evaluateStep,cause,Throwable,1,DEF,$ != null
EventState.java,evaluateStep,cause,null,1,DEF,$ instanceof DerivativeException
EventState.java,evaluateStep,cause,Throwable,0,DEF,$ != null
EventState.java,evaluateStep,cause,null,0,DEF,$ instanceof EventException
EventState.java,reset,nextAction,int,0,DEF,$ == EventHandler.RESET_STATE
CombinedEventsManager.java,evaluateStep,first,EventState,1,DEF,$ == null
MultistepIntegrator.java,MultistepIntegrator,nSteps,int,0,DEF,$ <= 0
MultistepIntegrator.java,start,de,null,0,DEF,$ instanceof InitializationCompletedMarkerException
RealMatrixImpl.java,RealMatrixImpl,d,double[][],0,NullPointerException,$ == null
RealMatrixImpl.java,RealMatrixImpl,nRows,int,0,DEF,$ == 0
RealMatrixImpl.java,RealMatrixImpl,nCols,int,0,DEF,$ == 0
RealMatrixImpl.java,RealMatrixImpl,r,int,0,DEF,d[$].length != nCols
RealMatrixImpl.java,RealMatrixImpl,d,double[][],0,DEF,$[r].length != nCols
RealMatrixImpl.java,setSubMatrix,data,double[][],1,DEF,$ == null
RealMatrixImpl.java,setSubMatrix,row,int,0,DEF,$ > 0
RealMatrixImpl.java,setSubMatrix,column,int,0,DEF,$ > 0
RealMatrixImpl.java,setSubMatrix,nRows,int,0,DEF,$ == 0
RealMatrixImpl.java,setSubMatrix,nCols,int,0,DEF,$ == 0
RealMatrixImpl.java,setSubMatrix,i,int,0,DEF,subMatrix[$].length != nCols
RealMatrixImpl.java,setSubMatrix,subMatrix,double[][],0,DEF,$[i].length != nCols
RealMatrixImpl.java,operate,v,double[],0,DEF,$.length != nCols
RealMatrixImpl.java,preMultiply,v,double[],0,DEF,$.length != nRows
RealVectorFormat.java,format,i,int,0,DEF,$ > 0
RealVectorFormat.java,format,obj,null,0,RET,$ instanceof RealVector
RealVectorFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
RealVectorFormat.java,parse,component,Number,1,DEF,$ != null
RealVectorImpl.java,RealVectorImpl,d,double[],0,NullPointerException,$ == null
RealVectorImpl.java,RealVectorImpl,d,double[],0,DEF,$.length == 0
RealVectorImpl.java,unitVector,norm,double,0,DEF,$ == 0
RealVectorImpl.java,unitize,norm,double,0,DEF,$ == 0
RealVectorImpl.java,checkVectorDimensions,data,double[],0,DEF,$.length != n
RealVectorImpl.java,equals,other,Object,0,RET,$ == null
RealVectorImpl.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
AbstractRealMatrix.java,AbstractRealMatrix,rowDimension,int,0,DEF,$ <= 0
AbstractRealMatrix.java,AbstractRealMatrix,columnDimension,int,0,DEF,$ <= 0
AbstractRealMatrix.java,visit,row,int,0,DEF,$ == endRow
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$.length < rowsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$[0].length < columnsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$.length < selectedRows.length
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$[0].length < selectedColumns.length
AbstractRealMatrix.java,setSubMatrix,nRows,int,0,DEF,$ == 0
AbstractRealMatrix.java,setSubMatrix,nCols,int,0,DEF,$ == 0
AbstractRealMatrix.java,setSubMatrix,r,int,0,DEF,subMatrix[$].length != nCols
AbstractRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DEF,$[r].length != nCols
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getRowDimension() != 1
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getColumnDimension() != nCols
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getRowDimension() != nRows
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getColumnDimension() != 1
AbstractRealMatrix.java,setRowVector,vector,RealVector,0,InvalidMatrixException,$.getDimension() != nCols
AbstractRealMatrix.java,setColumnVector,vector,RealVector,0,InvalidMatrixException,$.getDimension() != nRows
AbstractRealMatrix.java,setRow,array,double[],0,InvalidMatrixException,$.length != nCols
AbstractRealMatrix.java,setColumn,array,double[],0,InvalidMatrixException,$.length != nRows
AbstractRealMatrix.java,inverse,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,isSingular,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractRealMatrix.java,operate,v,double[],0,DEF,$.length != nCols
AbstractRealMatrix.java,operate,v,RealVector,0,DEF,$.getDimension() != nCols
AbstractRealMatrix.java,preMultiply,v,double[],0,DEF,$.length != nRows
AbstractRealMatrix.java,preMultiply,v,RealVector,0,DEF,$.getDimension() != nRows
AbstractRealMatrix.java,solve,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,solve,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,luDecompose,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,toString,i,int,0,DEF,$ > 0
AbstractRealMatrix.java,toString,j,int,0,DEF,$ > 0
AbstractRealMatrix.java,equals,object,Object,0,RET,$ instanceof RealMatrix == false
AbstractRealMatrix.java,equals,object,null,0,RET,$ instanceof RealMatrix
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getColumnDimension() != nCols
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getRowDimension() != nRows
AbstractRealMatrix.java,checkRowIndex,row,int,0,MatrixIndexException,$ < 0
AbstractRealMatrix.java,checkColumnIndex,column,int,0,MatrixIndexException,$ < 0
AbstractRealMatrix.java,checkSubMatrixIndex,startRow,int,0,MatrixIndexException,$ > endRow
AbstractRealMatrix.java,checkSubMatrixIndex,startColumn,int,0,MatrixIndexException,$ > endColumn
AbstractRealMatrix.java,checkSubMatrixIndex,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
AbstractRealMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
AbstractRealMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length == 0
DenseRealMatrix.java,toBlocksLayout,length,int,0,DEF,$ != columns
DenseRealMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
DenseRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
DenseRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
DenseRealMatrix.java,setSubMatrix,refLength,int,0,DEF,$ < 1
DenseRealMatrix.java,setSubMatrix,subRow,double[],0,DEF,$.length != refLength
DenseRealMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
DenseRealMatrix.java,setRowMatrix,matrix,DenseRealMatrix,0,InvalidMatrixException,$.getRowDimension() != 1
DenseRealMatrix.java,setRowMatrix,matrix,DenseRealMatrix,0,InvalidMatrixException,$.getColumnDimension() != nCols
DenseRealMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
DenseRealMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
DenseRealMatrix.java,setColumnMatrix,matrix,DenseRealMatrix,0,InvalidMatrixException,$.getRowDimension() != nRows
DenseRealMatrix.java,setColumnMatrix,matrix,DenseRealMatrix,0,InvalidMatrixException,$.getColumnDimension() != 1
DenseRealMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
DenseRealMatrix.java,setRow,array,double[],0,InvalidMatrixException,$.length != nCols
DenseRealMatrix.java,setColumn,array,double[],0,InvalidMatrixException,$.length != nRows
DenseRealMatrix.java,operate,v,double[],0,DEF,$.length != columns
DenseRealMatrix.java,preMultiply,v,double[],0,DEF,$.length != rows
SparseRealVector.java,add,v,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,append,v,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,dotProduct,idx,int,0,DEF,$ < v.length
SparseRealVector.java,getSubVector,key,int,0,DEF,$ >= index
SparseRealVector.java,getSubVector,key,int,0,DEF,$ < end
SparseRealVector.java,getDistance,v,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,getL1Distance,v,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,getLInfDistance,delta,double,0,DEF,$ > max
SparseRealVector.java,getLInfDistance,iter,Iterator,0,DEF,$.value() > max
SparseRealVector.java,getLInfDistance,v,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,getLInfDistance,delta,double,0,DEF,$ > max
SparseRealVector.java,outerProduct,v,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,subtract,v,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
SparseRealVector.java,equals,obj,Object,0,RET,$ == null
SparseRealVector.java,equals,obj,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
SparseRealVector.java,equals,test,double,0,RET,Math.abs($) > epsilon
BigMatrixImpl.java,BigMatrixImpl,rowDimension,int,0,IllegalArgumentException,$ <=0
BigMatrixImpl.java,BigMatrixImpl,columnDimension,int,0,IllegalArgumentException,$ <=0
BigMatrixImpl.java,BigMatrixImpl,d,BigDecimal[][],0,NullPointerException,$ == null
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,r,int,0,IllegalArgumentException,d[$].length != nCols
BigMatrixImpl.java,BigMatrixImpl,d,BigDecimal[][],0,IllegalArgumentException,$[r].length != nCols
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,d,double[][],0,IllegalArgumentException,$[row].length != nCols
BigMatrixImpl.java,BigMatrixImpl,row,int,0,IllegalArgumentException,d[$].length != nCols
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,d,String[][],0,IllegalArgumentException,$[row].length != nCols
BigMatrixImpl.java,BigMatrixImpl,row,int,0,IllegalArgumentException,d[$].length != nCols
BigMatrixImpl.java,getSubMatrix,startRow,int,0,MatrixIndexException,$ > endRow
BigMatrixImpl.java,getSubMatrix,startColumn,int,0,MatrixIndexException,$ > endColumn
BigMatrixImpl.java,getSubMatrix,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
BigMatrixImpl.java,getSubMatrix,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
BigMatrixImpl.java,getSubMatrix,selectedRows,int[],0,MatrixIndexException,$.length == 0
BigMatrixImpl.java,setSubMatrix,nRows,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,setSubMatrix,nCols,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,setSubMatrix,r,int,0,IllegalArgumentException,subMatrix[$].length != nCols
BigMatrixImpl.java,setSubMatrix,subMatrix,BigDecimal[][],0,IllegalArgumentException,$[r].length != nCols
BigMatrixImpl.java,setSubMatrix,data,BigDecimal[][],1,DEF,$ == null
BigMatrixImpl.java,setSubMatrix,row,int,0,DEF,$ > 0
BigMatrixImpl.java,setSubMatrix,column,int,0,DEF,$ > 0
BigMatrixImpl.java,isSingular,lu,BigDecimal[][],1,RET,$ == null
BigMatrixImpl.java,preMultiply,v,BigDecimal[],0,DEF,$.length != nRows
BigMatrixImpl.java,solve,b,BigDecimal[],0,DEF,$.length != nRows
BigMatrixImpl.java,luDecompose,nRows,int,0,NonSquareMatrixException,$ != nCols
BigMatrixImpl.java,luDecompose,largest,BigDecimal,0,DEF,sum.abs().compareTo($) == 1
BigMatrixImpl.java,luDecompose,sum,BigDecimal,0,DEF,$.abs().compareTo(largest) == 1
BigMatrixImpl.java,luDecompose,col,int,0,SingularMatrixException,lu[max][$].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,TOO_SMALL,BigDecimal,0,SingularMatrixException,lu[max][col].abs().compareTo($) <= 0
BigMatrixImpl.java,luDecompose,max,int,0,SingularMatrixException,lu[$][col].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,lu,BigDecimal[][],0,SingularMatrixException,$[max][col].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,max,int,0,DEF,$ != col
BigMatrixImpl.java,toString,data,BigDecimal[][],0,DEF,$ != null
BigMatrixImpl.java,toString,i,int,0,DEF,$ > 0
BigMatrixImpl.java,toString,j,int,0,DEF,$ > 0
BigMatrixImpl.java,equals,object,Object,0,RET,$ instanceof BigMatrixImpl == false
BigMatrixImpl.java,equals,object,null,0,RET,$ instanceof BigMatrixImpl
BigMatrixImpl.java,equals,m,BigMatrix,0,RET,$.getColumnDimension() != nCols
BigMatrixImpl.java,equals,m,BigMatrix,0,RET,$.getRowDimension() != nRows
BigMatrixImpl.java,getLUMatrix,lu,BigDecimal[][],0,DEF,$ == null
BigMatrixImpl.java,checkRowIndex,row,int,0,MatrixIndexException,$ < 0
BigMatrixImpl.java,checkColumnIndex,column,int,0,MatrixIndexException,$ < 0
QRDecompositionImpl.java,QRDecompositionImpl,a,double,0,DEF,$ != 0.0
QRDecompositionImpl.java,getR,cachedR,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQT,cachedQT,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQT,minor,int,0,DEF,qrtMinor[$] != 0.0
QRDecompositionImpl.java,getQT,qrtMinor,double[],0,DEF,$[minor] != 0.0
QRDecompositionImpl.java,getH,cachedH,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,isNonSingular,diag,double,0,RET,$ == 0
QRDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
QRDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
LUDecompositionImpl.java,LUDecompositionImpl,sum,double,0,DEF,Math.abs($) > largest
LUDecompositionImpl.java,LUDecompositionImpl,col,int,0,RET,Math.abs(lu[max][$]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,max,int,0,RET,Math.abs(lu[$][col]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,lu,double[][],0,RET,Math.abs($[max][col]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,max,int,0,DEF,$ != col
LUDecompositionImpl.java,getL,cachedL,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,getU,cachedU,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,getP,cachedP,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
LUDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
LUDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
SingularValueDecompositionImpl.java,getU,cachedU,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getU,m,int,1,DEF,$ >= n
SingularValueDecompositionImpl.java,getUT,cachedUt,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getS,cachedS,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getV,cachedV,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getV,m,int,1,DEF,$ >= n
SingularValueDecompositionImpl.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getRank,singularValues,double[],0,RET,$[i] > threshold
SingularValueDecompositionImpl.java,getRank,i,int,0,RET,singularValues[$] > threshold
SingularValueDecompositionImpl.java,solve,b,double[],0,DEF,$.length != singularValues.length
SingularValueDecompositionImpl.java,solve,si,double,0,SingularMatrixException,$ == 0
SingularValueDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != singularValues.length
SingularValueDecompositionImpl.java,solve,si,double,0,SingularMatrixException,$ == 0
SingularValueDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != singularValues.length
SingularValueDecompositionImpl.java,solve,si,double,0,SingularMatrixException,$ == 0
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,lTData,double[][],0,NotPositiveDefiniteMatrixException,$[i][i] < absolutePositivityThreshold
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,i,int,0,NotPositiveDefiniteMatrixException,lTData[$][$] < absolutePositivityThreshold
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,lJI,double,0,NotSymmetricMatrixException,Math.abs(lIJ - $) > maxDelta
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,lIJ,double,0,NotSymmetricMatrixException,Math.abs($ - lJI) > maxDelta
CholeskyDecompositionImpl.java,getL,cachedL,RealMatrix,0,DEF,$ == null
CholeskyDecompositionImpl.java,getLT,cachedLT,RealMatrix,0,DEF,$ == null
CholeskyDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
CholeskyDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
CholeskyDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
TriDiagonalTransformer.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,cachedQt,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,hK,double[],0,DEF,$[k] != 0.0
TriDiagonalTransformer.java,getQT,k,int,0,DEF,hK[$] != 0.0
TriDiagonalTransformer.java,getT,cachedT,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getT,i,int,0,DEF,$ > 0
TriDiagonalTransformer.java,transform,a,double,0,DEF,$ != 0.0
EigenDecompositionImpl.java,getV,cachedV,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getV,eigenvectors,RealVectorImpl[],0,DEF,$ == null
EigenDecompositionImpl.java,getD,cachedD,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getVT,eigenvectors,RealVectorImpl[],0,DEF,$ == null
EigenDecompositionImpl.java,getEigenvector,eigenvectors,RealVectorImpl[],0,DEF,$ == null
EigenDecompositionImpl.java,getSolver,eigenvectors,RealVectorImpl[],0,DEF,$ == null
EigenDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
EigenDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
EigenDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
EigenDecompositionImpl.java,isNonSingular,realEigenvalues,double[],0,RET,$[i] == 0
EigenDecompositionImpl.java,isNonSingular,i,int,0,RET,realEigenvalues[$] == 0
EigenDecompositionImpl.java,isNonSingular,imagEigenvalues,double[],0,RET,$[i] == 0
EigenDecompositionImpl.java,isNonSingular,i,int,0,RET,imagEigenvalues[$] == 0
EigenDecompositionImpl.java,computeSplits,secondary,double[],0,DEF,Math.abs($[i]) <= max
EigenDecompositionImpl.java,computeSplits,i,int,0,DEF,Math.abs(secondary[$]) <= max
EigenDecompositionImpl.java,process2RowsBlock,delta,double,0,InvalidMatrixException,$ < 0
EigenDecompositionImpl.java,process3RowsBlock,delta,double,0,InvalidMatrixException,$ >= 0
EigenDecompositionImpl.java,process3RowsBlock,z0,double,0,DEF,$ < z1
EigenDecompositionImpl.java,process3RowsBlock,z1,double,0,DEF,$ < z2
EigenDecompositionImpl.java,process3RowsBlock,z0,double,0,DEF,$ < z1
EigenDecompositionImpl.java,processGeneralBlock,sumOffDiag,double,0,RET,$ == 0
EigenDecompositionImpl.java,processGeneralBlock,work,double[],0,DEF,$[i + 2] <= 0
EigenDecompositionImpl.java,processGeneralBlock,i,int,0,DEF,work[$ + 2] <= 0
EigenDecompositionImpl.java,processGeneralBlock,k,int,0,MaxIterationsExceededException,$ >= maxIter
EigenDecompositionImpl.java,processGeneralBlock,pingPong,int,0,DEF,$ == 0
EigenDecompositionImpl.java,processGeneralBlock,n0,int,0,DEF,$ - i0 > 3
EigenDecompositionImpl.java,processGeneralBlock,i0,int,0,DEF,n0 - $ > 3
EigenDecompositionImpl.java,goodStep,start,int,0,RET,$ >= deflatedEnd
EigenDecompositionImpl.java,goodStep,s,double,1,DEF,$ <= t
EigenDecompositionImpl.java,goodStep,dMin,double,0,DEF,$ <= 0
EigenDecompositionImpl.java,goodStep,deflatedEnd,int,0,DEF,$ < end
EigenDecompositionImpl.java,goodStep,dMin,double,0,RET,$ < 0
EigenDecompositionImpl.java,goodStep,dMin,double,1,RET,$ >= 0
EigenDecompositionImpl.java,goodStep,dMin1,double,1,RET,$ > 0
EigenDecompositionImpl.java,goodStep,dMin,double,1,RET,$ < 0.0
EigenDecompositionImpl.java,goodStep,dMin1,double,1,RET,$ > 0.0
EigenDecompositionImpl.java,goodStep,dMin,double,1,DEF,$ < 0.0
EigenDecompositionImpl.java,goodStep,tType,int,1,DEF,$ < -22
EigenDecompositionImpl.java,goodStep,dMin1,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,eigenvaluesRange,range,double,0,DEF,$ < absoluteTolerance
EigenDecompositionImpl.java,eigenvaluesRange,middle,double,1,DEF,countEigenValues($, index, n) >= 1
EigenDecompositionImpl.java,eigenvaluesRange,index,int,1,DEF,countEigenValues(middle, $, n) >= 1
EigenDecompositionImpl.java,eigenvaluesRange,n,int,1,DEF,countEigenValues(middle, index, $) >= 1
EigenDecompositionImpl.java,eigenvaluesRange,range,double,0,DEF,$ < absoluteTolerance
EigenDecompositionImpl.java,eigenvaluesRange,middle,double,1,DEF,countEigenValues($, index, n) >= n
EigenDecompositionImpl.java,eigenvaluesRange,index,int,1,DEF,countEigenValues(middle, $, n) >= n
EigenDecompositionImpl.java,eigenvaluesRange,n,int,1,DEF,countEigenValues(middle, index, $) >= n
EigenDecompositionImpl.java,countEigenValues,ratio,double,0,DEF,$ <= 0
EigenDecompositionImpl.java,dqds,pingPong,int,1,DEF,$ == 0
EigenDecompositionImpl.java,dqd,pingPong,int,1,DEF,$ == 0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 2] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 2] == 0.0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 3] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 3] == 0.0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 2] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 2] == 0.0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 2] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 2] == 0.0
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,0,RET,$ <= 0.0
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,DEF,$ == dN
EigenDecompositionImpl.java,computeShiftIncrement,dMin1,double,1,DEF,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,gap1,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,computeShiftIncrement,gap1,double,1,DEF,$ > b1
EigenDecompositionImpl.java,computeShiftIncrement,dN,double,0,DEF,$ > b1
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,$ == 0.0
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,100 * Math.max($, b1) < a2
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * Math.max(b2, $) < a2
EigenDecompositionImpl.java,computeShiftIncrement,cnst1,double,0,DEF,$ < a2
EigenDecompositionImpl.java,computeShiftIncrement,a2,double,0,DEF,$ < cnst1
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN2
EigenDecompositionImpl.java,computeShiftIncrement,np,int,0,RET,work[$ - 8] > b2
EigenDecompositionImpl.java,computeShiftIncrement,work,double[],0,RET,$[np - 8] > b2
EigenDecompositionImpl.java,computeShiftIncrement,np,int,0,RET,work[$ - 4] > b1
EigenDecompositionImpl.java,computeShiftIncrement,work,double[],0,RET,$[np - 4] > b1
EigenDecompositionImpl.java,computeShiftIncrement,start,int,0,RET,end - $ > 2
EigenDecompositionImpl.java,computeShiftIncrement,end,int,0,RET,$ - start > 2
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,$ == 0.0
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,100 * Math.max($, b1) < a2
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * Math.max(b2, $) < a2
EigenDecompositionImpl.java,computeShiftIncrement,cnst1,double,0,DEF,$ < a2
EigenDecompositionImpl.java,computeShiftIncrement,a2,double,1,DEF,$ < cnst1
EigenDecompositionImpl.java,computeShiftIncrement,tType,int,1,DEF,$ == -6
EigenDecompositionImpl.java,computeShiftIncrement,tType,int,1,DEF,$ == -18
EigenDecompositionImpl.java,computeShiftIncrement,dMin1,double,1,RET,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,dMin2,double,1,RET,$ == dN2
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,RET,$ != 0.0
EigenDecompositionImpl.java,computeShiftIncrement,oldB1,double,0,DEF,100 * Math.max(b1, $) < b2
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * Math.max($, oldB1) < b2
EigenDecompositionImpl.java,computeShiftIncrement,gap2,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,computeShiftIncrement,dMin1,double,0,DEF,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,dMin2,double,1,RET,$ == dN2
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,RET,$ != 0.0
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * $ < b2
EigenDecompositionImpl.java,computeShiftIncrement,gap2,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,updateSigma,tau,double,1,DEF,$ < sigma
EigenDecompositionImpl.java,findEigenvector,absG,double,0,DEF,$ < minG
BiDiagonalTransformer.java,BiDiagonalTransformer,m,int,1,DEF,$ >= n
BiDiagonalTransformer.java,getU,cachedU,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getU,hK,double[],0,DEF,$[k - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,k,int,0,DEF,hK[$ - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,hK[k - $] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getB,cachedB,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getB,m,int,1,DEF,$ < n
BiDiagonalTransformer.java,getB,i,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getV,cachedV,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getV,hK,double[],0,DEF,$[k] != 0.0
BiDiagonalTransformer.java,getV,k,int,0,DEF,hK[$] != 0.0
BiDiagonalTransformer.java,getV,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,b,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,b,double,0,DEF,$ != 0.0
SparseRealMatrix.java,multiply,outValue,double,1,DEF,$ == 0.0
SparseRealMatrix.java,setEntry,value,double,1,DEF,$ == 0.0
SparseRealMatrix.java,addToEntry,value,double,1,DEF,$ == 0.0
SparseRealMatrix.java,multiplyEntry,value,double,1,DEF,$ == 0.0
LevenbergMarquardtEstimator.java,estimate,dk,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,estimate,s,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,estimate,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtEstimator.java,estimate,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtEstimator.java,estimate,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,estimate,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,DEF,$ >= 1.0e-4
LevenbergMarquardtEstimator.java,estimate,actRed,double,0,RET,Math.abs($) <= costRelativeTolerance
LevenbergMarquardtEstimator.java,estimate,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtEstimator.java,estimate,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtEstimator.java,estimate,actRed,double,1,EstimationException,Math.abs($) <= 2.2204e-16
LevenbergMarquardtEstimator.java,estimate,preRed,double,1,EstimationException,$ <= 2.2204e-16
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,EstimationException,$ <= 2.0
LevenbergMarquardtEstimator.java,estimate,maxCosine,double,0,EstimationException,$ <= 2.2204e-16
LevenbergMarquardtEstimator.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtEstimator.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtEstimator.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtEstimator.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtEstimator.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtEstimator.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtEstimator.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtEstimator.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtEstimator.java,qrDecomposition,ak2,double,0,RET,$ == 0
AbstractEstimator.java,updateResidualsAndCost,costEvaluations,int,0,EstimationException,++$ > maxCostEval
AbstractEstimator.java,guessParametersErrors,m,int,0,EstimationException,$ <= p
MultiStartUnivariateRealOptimizer.java,getOptima,optima,double[],0,DEF,$ == null
MultiStartUnivariateRealOptimizer.java,optimize,goalType,GoalType,0,DEF,$ == GoalType.MAXIMIZE
SimplexSolver.java,getPivotColumn,epsilon,double,0,DEF,MathUtils.compareTo(tableau.getEntry(0, i), minValue, $) < 0
SimplexSolver.java,getPivotColumn,tableau,SimplexTableau,0,DEF,MathUtils.compareTo($.getEntry(0, i), minValue, epsilon) < 0
SimplexSolver.java,getPivotColumn,minValue,double,0,DEF,MathUtils.compareTo(tableau.getEntry(0, i), $, epsilon) < 0
SimplexSolver.java,getPivotColumn,i,int,0,DEF,MathUtils.compareTo(tableau.getEntry(0, $), minValue, epsilon) < 0
SimplexSolver.java,getPivotRow,epsilon,double,0,DEF,MathUtils.compareTo(tableau.getEntry(i, col), 0, $) >= 0
SimplexSolver.java,getPivotRow,col,int,0,DEF,MathUtils.compareTo(tableau.getEntry(i, $), 0, epsilon) >= 0
SimplexSolver.java,getPivotRow,tableau,SimplexTableau,0,DEF,MathUtils.compareTo($.getEntry(i, col), 0, epsilon) >= 0
SimplexSolver.java,getPivotRow,i,int,0,DEF,MathUtils.compareTo(tableau.getEntry($, col), 0, epsilon) >= 0
SimplexSolver.java,getPivotRow,ratio,double,0,DEF,$ < minRatio
SimplexSolver.java,doIteration,pivotRow,Integer,0,UnboundedSolutionException,$ == null
SimplexSolver.java,doIteration,i,int,0,DEF,$ != pivotRow
SimplexSolver.java,isPhase1Solved,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() == 0
SimplexSolver.java,isPhase1Solved,epsilon,double,0,RET,MathUtils.compareTo(tableau.getEntry(0, i), 0, $) < 0
SimplexSolver.java,isPhase1Solved,tableau,SimplexTableau,0,RET,MathUtils.compareTo($.getEntry(0, i), 0, epsilon) < 0
SimplexSolver.java,isPhase1Solved,i,int,0,RET,MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) < 0
SimplexSolver.java,isOptimal,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() > 0
SimplexSolver.java,isOptimal,epsilon,double,0,RET,MathUtils.compareTo(tableau.getEntry(0, i), 0, $) < 0
SimplexSolver.java,isOptimal,tableau,SimplexTableau,0,RET,MathUtils.compareTo($.getEntry(0, i), 0, epsilon) < 0
SimplexSolver.java,isOptimal,i,int,0,RET,MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) < 0
SimplexSolver.java,solvePhase1,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() == 0
SimplexTableau.java,createTableau,constraint,LinearConstraint,1,DEF,$.getRelationship() == Relationship.LEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.EQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,normalize,constraint,LinearConstraint,0,RET,$.getValue() < 0
SimplexTableau.java,getConstraintTypeCounts,constraint,LinearConstraint,0,DEF,$.getRelationship() == relationship
SimplexTableau.java,getBasicRow,row,Integer,1,DEF,$ == null
SimplexTableau.java,discardArtificialVariables,numArtificialVariables,int,0,RET,$ == 0
SimplexTableau.java,getDecisionVariableValue,basicRow,Integer,0,RET,$ == null
SimplexTableau.java,getDecisionVariableValue,tableau,RealMatrix,0,RET,$.getEntry(basicRow, i) == 1
SimplexTableau.java,getDecisionVariableValue,i,int,0,RET,tableau.getEntry(basicRow, $) == 1
SimplexTableau.java,getDecisionVariableValue,basicRow,Integer,0,RET,tableau.getEntry($, i) == 1
AbstractLinearOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
AbstractLinearOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
SimpleRealPointChecker.java,converged,difference,double,0,RET,$ > absoluteThreshold
SimpleVectorialValueChecker.java,converged,difference,double,0,RET,$ > absoluteThreshold
BrentOptimizer.java,localMin,goalType,GoalType,0,DEF,$ == GoalType.MAXIMIZE
BrentOptimizer.java,localMin,e,double,0,DEF,Math.abs($) > tol
BrentOptimizer.java,localMin,q,double,1,DEF,$ > 0
BrentOptimizer.java,localMin,a,double,0,DEF,(u - $) < t2
BrentOptimizer.java,localMin,u,double,0,DEF,($ - a) < t2
BrentOptimizer.java,localMin,b,double,0,DEF,($ - u) < t2
BrentOptimizer.java,localMin,u,double,0,DEF,(b - $) < t2
BrentOptimizer.java,localMin,goalType,GoalType,0,DEF,$ == GoalType.MAXIMIZE
BrentOptimizer.java,localMin,fu,double,1,DEF,$ <= fx
BrentOptimizer.java,localMin,u,double,1,DEF,$ < x
BrentOptimizer.java,localMin,u,double,1,DEF,$ < x
BrentOptimizer.java,localMin,fu,double,1,DEF,$ <= fw
BrentOptimizer.java,localMin,w,double,1,DEF,$ == x
BrentOptimizer.java,localMin,fu,double,0,DEF,$ <= fv
BrentOptimizer.java,localMin,v,double,0,DEF,$ == x
BrentOptimizer.java,localMin,v,double,0,DEF,$ == w
MultiStartMultivariateRealOptimizer.java,getOptima,optima,RealPointValuePair[],0,DEF,$ == null
MultiStartMultivariateRealOptimizer.java,compare,o1,RealPointValuePair,1,RET,$ == null
MultiStartMultivariateRealOptimizer.java,compare,o2,RealPointValuePair,0,RET,$ == null
MultiStartMultivariateRealOptimizer.java,optimize,optima,RealPointValuePair[],0,OptimizationException,$[0] == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,getOptima,optima,VectorialPointValuePair[],0,DEF,$ == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,compare,o1,VectorialPointValuePair,1,RET,$ == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,compare,o2,VectorialPointValuePair,0,RET,$ == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,optimize,optima,VectorialPointValuePair[],0,OptimizationException,$[0] == null
LeastSquaresConverter.java,LeastSquaresConverter,observations,double[],0,DEF,$.length != weights.length
LeastSquaresConverter.java,value,residuals,double[],0,FunctionEvaluationException,$.length != observations.length
LeastSquaresConverter.java,value,weights,double[],1,DEF,$ != null
LeastSquaresConverter.java,value,scale,RealMatrix,1,DEF,$ != null
DirectSearchOptimizer.java,setStartConfiguration,j,int,0,DEF,steps[$] == 0.0
DirectSearchOptimizer.java,setStartConfiguration,steps,double[],0,DEF,$[j] == 0.0
DirectSearchOptimizer.java,setStartConfiguration,n,int,0,DEF,$ < 0
DirectSearchOptimizer.java,setStartConfiguration,refI,double[],0,DEF,$.length != n
DirectSearchOptimizer.java,setStartConfiguration,i,int,0,DEF,$ > 0
DirectSearchOptimizer.java,optimize,startConfiguration,double[][],0,DEF,$ == null
DirectSearchOptimizer.java,optimize,iterations,int,0,RET,$ > 0
DirectSearchOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
DirectSearchOptimizer.java,buildSimplex,n,int,0,DEF,$ != startConfiguration.length
DirectSearchOptimizer.java,replaceWorstPoint,comparator,Comparator<RealPointValuePair>,0,DEF,$.compare(simplex[i], pointValuePair) > 0
DirectSearchOptimizer.java,replaceWorstPoint,pointValuePair,RealPointValuePair,0,DEF,comparator.compare(simplex[i], $) > 0
DirectSearchOptimizer.java,replaceWorstPoint,simplex,RealPointValuePair[],0,DEF,comparator.compare($[i], pointValuePair) > 0
DirectSearchOptimizer.java,replaceWorstPoint,i,int,0,DEF,comparator.compare(simplex[$], pointValuePair) > 0
MultiDirectional.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(reflected, best) < 0
MultiDirectional.java,iterateSimplex,reflected,RealPointValuePair,0,RET,comparator.compare($, best) < 0
MultiDirectional.java,iterateSimplex,best,RealPointValuePair,0,RET,comparator.compare(reflected, $) < 0
MultiDirectional.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,DEF,$.compare(reflected, expanded) <= 0
MultiDirectional.java,iterateSimplex,expanded,RealPointValuePair,0,DEF,comparator.compare(reflected, $) <= 0
MultiDirectional.java,iterateSimplex,reflected,RealPointValuePair,0,DEF,comparator.compare($, expanded) <= 0
MultiDirectional.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(contracted, best) < 0
MultiDirectional.java,iterateSimplex,contracted,RealPointValuePair,0,RET,comparator.compare($, best) < 0
MultiDirectional.java,iterateSimplex,best,RealPointValuePair,0,RET,comparator.compare(contracted, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(best, reflected) <= 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare(best, $) <= 0
NelderMead.java,iterateSimplex,best,RealPointValuePair,1,DEF,comparator.compare($, reflected) <= 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(reflected, secondBest) < 0
NelderMead.java,iterateSimplex,secondBest,RealPointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare($, secondBest) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(reflected, best) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare($, best) < 0
NelderMead.java,iterateSimplex,best,RealPointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(expanded, reflected) < 0
NelderMead.java,iterateSimplex,expanded,RealPointValuePair,1,DEF,comparator.compare($, reflected) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare(expanded, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,RET,$.compare(reflected, worst) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,RET,comparator.compare($, worst) < 0
NelderMead.java,iterateSimplex,worst,RealPointValuePair,1,RET,comparator.compare(reflected, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(outContracted, reflected) <= 0
NelderMead.java,iterateSimplex,outContracted,RealPointValuePair,0,RET,comparator.compare($, reflected) <= 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,0,RET,comparator.compare(outContracted, $) <= 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(inContracted, worst) < 0
NelderMead.java,iterateSimplex,worst,RealPointValuePair,0,RET,comparator.compare(inContracted, $) < 0
NelderMead.java,iterateSimplex,inContracted,RealPointValuePair,0,RET,comparator.compare($, worst) < 0
NonLinearConjugateGradientOptimizer.java,setInitialStep,initialStep,double,1,DEF,$ <= 0
NonLinearConjugateGradientOptimizer.java,doOptimize,preconditioner,Preconditioner,0,DEF,$ == null
NonLinearConjugateGradientOptimizer.java,doOptimize,solver,UnivariateRealSolver,0,DEF,$ == null
NonLinearConjugateGradientOptimizer.java,doOptimize,goalType,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,previous,RealPointValuePair,0,RET,$ != null
NonLinearConjugateGradientOptimizer.java,doOptimize,goalType,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,updateFormula,ConjugateGradientFormula,1,DEF,$ == ConjugateGradientFormula.FLETCHER_REEVES
NonLinearConjugateGradientOptimizer.java,doOptimize,n,int,1,DEF,getIterations() % $ == 0
NonLinearConjugateGradientOptimizer.java,doOptimize,beta,double,1,DEF,$ < 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yA,double,0,RET,$ * yB <= 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yB,double,0,RET,yA * $ <= 0
LevenbergMarquardtOptimizer.java,doOptimize,dk,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,s,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtOptimizer.java,doOptimize,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtOptimizer.java,doOptimize,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,DEF,$ >= 1.0e-4
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,0,RET,Math.abs($) <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,1,OptimizationException,Math.abs($) <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,1,OptimizationException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,OptimizationException,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,OptimizationException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtOptimizer.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtOptimizer.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtOptimizer.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtOptimizer.java,qrDecomposition,ak2,double,0,RET,$ == 0
AbstractScalarDifferentiableOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
AbstractScalarDifferentiableOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
AbstractLeastSquaresOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
AbstractLeastSquaresOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
AbstractLeastSquaresOptimizer.java,updateJacobian,jacobian,double[][],0,FunctionEvaluationException,$.length != rows
AbstractLeastSquaresOptimizer.java,updateResidualsAndCost,objective,double[],0,FunctionEvaluationException,$.length != rows
AbstractLeastSquaresOptimizer.java,guessParametersErrors,rows,int,0,OptimizationException,$ <= cols
AbstractLeastSquaresOptimizer.java,optimize,target,double[],0,OptimizationException,$.length != weights.length
GaussNewtonOptimizer.java,doOptimize,previous,VectorialPointValuePair,0,DEF,$ != null
MultiStartDifferentiableMultivariateRealOptimizer.java,getOptima,optima,RealPointValuePair[],0,DEF,$ == null
MultiStartDifferentiableMultivariateRealOptimizer.java,compare,o1,RealPointValuePair,1,RET,$ == null
MultiStartDifferentiableMultivariateRealOptimizer.java,compare,o2,RealPointValuePair,0,RET,$ == null
MultiStartDifferentiableMultivariateRealOptimizer.java,optimize,optima,RealPointValuePair[],0,OptimizationException,$[0] == null
SimpleVectorialPointChecker.java,converged,difference,double,0,RET,$ > absoluteThreshold
Beta.java,regularizedBeta,x,double,1,DEF,$ < 0
Beta.java,regularizedBeta,x,double,1,DEF,$ > 1
Beta.java,regularizedBeta,a,double,1,DEF,$ <= 0.0
Beta.java,regularizedBeta,b,double,1,DEF,$ <= 0.0
Beta.java,getB,n,int,1,DEF,$ % 2 == 0
Beta.java,logBeta,a,double,1,DEF,$ <= 0.0
Beta.java,logBeta,b,double,1,DEF,$ <= 0.0
Gamma.java,logGamma,x,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ >= 1.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ > a
Gamma.java,regularizedGammaP,n,double,1,MaxIterationsExceededException,$ >= maxIterations
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < a
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ < 1.0
Erf.java,erf,x,double,0,DEF,$ < 0
Vector3DFormat.java,format,obj,null,0,RET,$ instanceof Vector3D
Vector3DFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
Vector3DFormat.java,parse,x,Number,0,RET,$ == null
Vector3DFormat.java,parse,y,Number,0,RET,$ == null
Vector3DFormat.java,parse,z,Number,0,RET,$ == null
Vector3D.java,normalize,s,double,0,DEF,$ == 0
Vector3D.java,orthogonal,threshold,double,0,DEF,$ == 0
Vector3D.java,orthogonal,x,double,1,RET,$ >= -threshold
Vector3D.java,orthogonal,x,double,1,RET,$ <= threshold
Vector3D.java,orthogonal,y,double,0,RET,$ >= -threshold
Vector3D.java,orthogonal,y,double,0,RET,$ <= threshold
Vector3D.java,angle,normProduct,double,0,DEF,$ == 0
Vector3D.java,angle,dot,double,0,RET,$ < -threshold
Vector3D.java,angle,dot,double,0,RET,$ > threshold
Vector3D.java,angle,dot,double,0,RET,$ >= 0
Vector3D.java,equals,other,Object,0,RET,$ == null
Rotation.java,Rotation,norm,double,0,DEF,$ == 0
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$.length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[0].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[1].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[2].length != 3
Rotation.java,Rotation,det,double,0,NotARotationMatrixException,$ < 0.0
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,u1u1,double,0,IllegalArgumentException,$ == 0
Rotation.java,Rotation,u2u2,double,0,IllegalArgumentException,$ == 0
Rotation.java,Rotation,v1v1,double,0,IllegalArgumentException,$ == 0
Rotation.java,Rotation,v2v2,double,0,IllegalArgumentException,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,normProduct,double,0,IllegalArgumentException,$ == 0
Rotation.java,getAxis,squaredSine,double,1,RET,$ == 0
Rotation.java,getAxis,q0,double,0,RET,$ < 0
Rotation.java,getAngle,q0,double,1,RET,$ < -0.1
Rotation.java,getAngle,q0,double,1,RET,$ > 0.1
Rotation.java,getAngle,q0,double,0,RET,$ < 0
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,orthogonalizeMatrix,fn1,double,0,RET,Math.abs($ - fn) <= threshold
Rotation.java,orthogonalizeMatrix,fn,double,0,RET,Math.abs(fn1 - $) <= threshold
ValueServer.java,resetReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,closeReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,DEF,$ == null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,DEF,$.getBinStats().size() == 0
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,$ == null
ValueServer.java,getNextReplay,str,String,0,DEF,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,(str = $.readLine()) == null
ValueServer.java,getNextReplay,str,String,0,DEF,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,(str = $.readLine()) == null
UncorrelatedRandomVectorGenerator.java,UncorrelatedRandomVectorGenerator,mean,double[],0,IllegalArgumentException,$.length != standardDeviation.length
EmpiricalDistributionImpl.java,load,sampleStats,SummaryStatistics,0,DEF,$.getN() == 0
EmpiricalDistributionImpl.java,getAdapter,in,null,1,RET,$ instanceof BufferedReader
EmpiricalDistributionImpl.java,getAdapter,in,null,1,RET,$ instanceof double[]
EmpiricalDistributionImpl.java,getNextValue,stats,SummaryStatistics,0,RET,$.getN() > 0
EmpiricalDistributionImpl.java,getNextValue,stats,SummaryStatistics,1,RET,$.getStandardDeviation() > 0
RandomDataImpl.java,nextHexString,len,int,0,IllegalArgumentException,$ <= 0
RandomDataImpl.java,nextHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextInt,lower,int,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,nextLong,lower,long,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,nextSecureHexString,len,int,0,IllegalArgumentException,$ <= 0
RandomDataImpl.java,nextSecureHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextSecureInt,lower,int,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,nextSecureLong,lower,long,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,nextPoisson,mean,double,0,IllegalArgumentException,$ <= 0
RandomDataImpl.java,nextPoisson,mean,double,1,RET,$ < pivot
RandomDataImpl.java,nextPoisson,r,double,1,DEF,$ >= p
RandomDataImpl.java,nextPoisson,u,double,1,DEF,$ <= c1
RandomDataImpl.java,nextPoisson,x,double,0,DEF,$ < -mu
RandomDataImpl.java,nextPoisson,c1,double,1,DEF,$ < u
RandomDataImpl.java,nextPoisson,u,double,1,DEF,$ <= c2
RandomDataImpl.java,nextPoisson,x,double,0,DEF,$ > delta
RandomDataImpl.java,nextPoisson,c2,double,1,DEF,$ < u
RandomDataImpl.java,nextPoisson,u,double,1,DEF,$ <= c3
RandomDataImpl.java,nextPoisson,c3,double,1,DEF,$ < u
RandomDataImpl.java,nextPoisson,u,double,1,DEF,$ <= c4
RandomDataImpl.java,nextPoisson,c4,double,0,DEF,$ < u
RandomDataImpl.java,nextGaussian,sigma,double,0,IllegalArgumentException,$ <= 0
RandomDataImpl.java,nextExponential,mean,double,0,IllegalArgumentException,$ < 0.0
RandomDataImpl.java,nextUniform,lower,double,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,getRan,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,getSecRan,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,nextPermutation,k,int,0,IllegalArgumentException,$ > n
RandomDataImpl.java,nextPermutation,k,int,0,IllegalArgumentException,$ == 0
RandomDataImpl.java,nextSample,k,int,0,IllegalArgumentException,$ > len
RandomDataImpl.java,nextSample,k,int,0,IllegalArgumentException,$ == 0
RandomDataImpl.java,shuffle,i,int,1,DEF,$ == 0
CorrelatedRandomVectorGenerator.java,CorrelatedRandomVectorGenerator,mean,double[],0,DimensionMismatchException,$.length != order
CorrelatedRandomVectorGenerator.java,decompose,swap,int[],0,DEF,$[rank] != rank
CorrelatedRandomVectorGenerator.java,decompose,rank,int,0,DEF,swap[$] != rank
CorrelatedRandomVectorGenerator.java,decompose,c,double[][],1,NotPositiveDefiniteMatrixException,$[ir][ir] < small
CorrelatedRandomVectorGenerator.java,decompose,ir,int,1,NotPositiveDefiniteMatrixException,c[$][$] < small
CorrelatedRandomVectorGenerator.java,decompose,rank,int,0,NotPositiveDefiniteMatrixException,$ == 0
CorrelatedRandomVectorGenerator.java,decompose,c,double[][],0,NotPositiveDefiniteMatrixException,$[index[i]][index[i]] < -small
CorrelatedRandomVectorGenerator.java,decompose,index,int[],0,NotPositiveDefiniteMatrixException,c[$[i]][$[i]] < -small
CorrelatedRandomVectorGenerator.java,decompose,i,int,0,NotPositiveDefiniteMatrixException,c[index[$]][index[$]] < -small
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
AbstractRandomGenerator.java,nextBytes,i,int,0,DEF,$ > 0
AbstractRandomGenerator.java,nextBytes,bytesOut,int,0,RET,$ == bytes.length
AbstractRandomGenerator.java,nextInt,n,int,0,IllegalArgumentException,$ <= 0
AbstractRandomGenerator.java,nextGaussian,s,double,0,DEF,$ != 0
BisectionSolver.java,solve,fm,double,1,DEF,$ * fmin > 0.0
BisectionSolver.java,solve,fmin,double,1,DEF,fm * $ > 0.0
BisectionSolver.java,solve,min,double,0,RET,Math.abs(max - $) <= absoluteAccuracy
BisectionSolver.java,solve,max,double,0,RET,Math.abs($ - min) <= absoluteAccuracy
SecantSolver.java,solve,y0,double,0,IllegalArgumentException,$ * y1 >= 0
SecantSolver.java,solve,y1,double,0,IllegalArgumentException,y0 * $ >= 0
SecantSolver.java,solve,y1,double,0,RET,Math.abs($) <= functionValueAccuracy
SecantSolver.java,solve,oldDelta,double,0,DEF,delta / $ > 1
SecantSolver.java,solve,delta,double,0,DEF,$ / oldDelta > 1
SecantSolver.java,solve,y1,double,0,DEF,$ > 0
SecantSolver.java,solve,y2,double,0,DEF,$ > 0
LaguerreSolver.java,LaguerreSolver,f,null,1,DEF,$ instanceof PolynomialFunction
LaguerreSolver.java,solve,min,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
LaguerreSolver.java,solve,max,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
LaguerreSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
LaguerreSolver.java,solve,f,null,0,DEF,$ instanceof PolynomialFunction
LaguerreSolver.java,solve,min,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
LaguerreSolver.java,solve,max,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
LaguerreSolver.java,solveAll,n,int,0,IllegalArgumentException,$ < 1
LaguerreSolver.java,solve,n,int,0,IllegalArgumentException,$ < 1
LaguerreSolver.java,solve,oldz,Complex,0,RET,(z.subtract($)).abs() <= tolerance
LaguerreSolver.java,solve,z,Complex,0,RET,($.subtract(oldz)).abs() <= tolerance
LaguerreSolver.java,solve,pv,Complex,0,RET,$.abs() <= functionValueAccuracy
NewtonSolver.java,solve,x0,double,0,RET,Math.abs(x1 - $) <= absoluteAccuracy
NewtonSolver.java,solve,x1,double,0,RET,Math.abs($ - x0) <= absoluteAccuracy
UnivariateRealSolverImpl.java,UnivariateRealSolverImpl,f,UnivariateRealFunction,0,DEF,$ == null
UnivariateRealSolverImpl.java,verifyInterval,lower,double,0,DEF,$ >= upper
UnivariateRealSolverUtils.java,bracket,function,UnivariateRealFunction,0,IllegalArgumentException,$ == null
UnivariateRealSolverUtils.java,bracket,maximumIterations,int,0,IllegalArgumentException,$ <= 0
UnivariateRealSolverUtils.java,bracket,initial,double,0,IllegalArgumentException,$ < lowerBound
UnivariateRealSolverUtils.java,bracket,initial,double,0,IllegalArgumentException,$ > upperBound
UnivariateRealSolverUtils.java,bracket,lowerBound,double,0,IllegalArgumentException,$ >= upperBound
UnivariateRealSolverUtils.java,bracket,fa,double,0,ConvergenceException,$ * fb >= 0.0
UnivariateRealSolverUtils.java,bracket,fb,double,0,ConvergenceException,fa * $ >= 0.0
UnivariateRealSolverUtils.java,setup,f,UnivariateRealFunction,0,IllegalArgumentException,$ == null
MullerSolver.java,solve,min,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
MullerSolver.java,solve,max,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
MullerSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
MullerSolver.java,solve,y0,double,0,RET,$ == 0.0
MullerSolver.java,solve,y2,double,0,RET,$ == 0.0
MullerSolver.java,solve,oldx,double,0,RET,Math.abs(x - $) <= tolerance
MullerSolver.java,solve,x,double,0,RET,Math.abs($ - oldx) <= tolerance
MullerSolver.java,solve,y,double,0,RET,Math.abs($) <= functionValueAccuracy
MullerSolver.java,solve,ym,double,1,DEF,MathUtils.sign(y0) + MathUtils.sign($) == 0.0
MullerSolver.java,solve,y0,double,1,DEF,MathUtils.sign($) + MathUtils.sign(ym) == 0.0
MullerSolver.java,solve2,y0,double,0,RET,$ == 0.0
MullerSolver.java,solve2,y1,double,0,RET,$ == 0.0
MullerSolver.java,solve2,delta,double,1,DEF,$ >= 0.0
MullerSolver.java,solve2,denominator,double,1,DEF,$ != 0
MullerSolver.java,solve2,oldx,double,0,RET,Math.abs(x - $) <= tolerance
MullerSolver.java,solve2,x,double,0,RET,Math.abs($ - oldx) <= tolerance
MullerSolver.java,solve2,y,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yInitial,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMin,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMin,double,0,RET,yInitial * $ < 0
BrentSolver.java,solve,yInitial,double,0,RET,$ * yMin < 0
BrentSolver.java,solve,yMax,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yInitial,double,0,RET,$ * yMax < 0
BrentSolver.java,solve,yMax,double,0,RET,yInitial * $ < 0
BrentSolver.java,solve,sign,double,1,DEF,$ > 0
BrentSolver.java,solve,yMin,double,1,DEF,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMax,double,1,DEF,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,sign,double,1,DEF,$ < 0
BrentSolver.java,solve,yMin,double,1,DEF,$ == 0.0
BrentSolver.java,solve,y1,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,dx,double,0,RET,Math.abs($) <= tolerance
BrentSolver.java,solve,oldDelta,double,1,DEF,Math.abs($) < tolerance
BrentSolver.java,solve,x0,double,1,DEF,$ == x2
BrentSolver.java,solve,p,double,1,DEF,$ > 0.0
BrentSolver.java,solve,delta,double,1,DEF,Math.abs($) > tolerance
BrentSolver.java,solve,dx,double,1,DEF,$ > 0.0
BrentSolver.java,solve,dx,double,0,DEF,$ <= 0.0
BrentSolver.java,solve,y1,double,0,DEF,$ > 0
BrentSolver.java,solve,y2,double,0,DEF,$ > 0
RiddersSolver.java,solve,min,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
RiddersSolver.java,solve,max,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
RiddersSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
RiddersSolver.java,solve,y1,double,0,RET,$ == 0.0
RiddersSolver.java,solve,y2,double,0,RET,$ == 0.0
RiddersSolver.java,solve,y3,double,0,RET,Math.abs($) <= functionValueAccuracy
RiddersSolver.java,solve,oldx,double,0,RET,Math.abs(x - $) <= tolerance
RiddersSolver.java,solve,x,double,0,RET,Math.abs($ - oldx) <= tolerance
RiddersSolver.java,solve,y,double,0,RET,Math.abs($) <= functionValueAccuracy
RiddersSolver.java,solve,correction,double,1,DEF,$ > 0.0
RiddersSolver.java,solve,y1,double,1,DEF,MathUtils.sign($) + MathUtils.sign(y) == 0.0
RiddersSolver.java,solve,y,double,1,DEF,MathUtils.sign(y1) + MathUtils.sign($) == 0.0
RiddersSolver.java,solve,y2,double,1,DEF,MathUtils.sign($) + MathUtils.sign(y) == 0.0
RiddersSolver.java,solve,y,double,1,DEF,MathUtils.sign(y2) + MathUtils.sign($) == 0.0
PolynomialFunctionLagrangeForm.java,evaluate,dist,double,0,DEF,$ < min_dist
PolynomialFunctionLagrangeForm.java,evaluate,divider,double,0,DuplicateSampleAbscissaException,$ == 0.0
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != j
PolynomialFunctionLagrangeForm.java,computeCoefficients,d,double,0,DEF,$ == 0.0
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != k
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,IllegalArgumentException,$.length < 2
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,y,double[],0,IllegalArgumentException,$.length < 2
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,IllegalArgumentException,$.length != y.length
PolynomialFunctionNewtonForm.java,verifyInputArray,a,double[],0,IllegalArgumentException,$.length < 1
PolynomialFunctionNewtonForm.java,verifyInputArray,c,double[],0,IllegalArgumentException,$.length < 1
PolynomialsUtils.java,buildPolynomial,degree,int,0,DEF,$ > maxDegree
PolynomialFunction.java,PolynomialFunction,c,double[],0,IllegalArgumentException,$.length < 1
PolynomialFunction.java,evaluate,n,int,0,IllegalArgumentException,$ < 1
PolynomialFunction.java,subtract,coefficients,double[],1,DEF,$.length < p.coefficients.length
PolynomialFunction.java,differentiate,n,int,0,IllegalArgumentException,$ < 1
PolynomialFunction.java,differentiate,n,int,0,RET,$ == 1
PolynomialFunction.java,toString,coefficients,double[],1,RET,$[0] == 0.0
PolynomialFunction.java,toString,coefficients,double[],0,RET,$.length == 1
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] != 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] != 0
PolynomialFunction.java,toString,s,StringBuffer,1,DEF,$.length() > 0
PolynomialFunction.java,toString,coefficients,double[],1,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,1,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,absAi,double,0,DEF,($ - 1) != 0
PolynomialFunction.java,toString,i,int,0,DEF,$ > 1
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,IllegalArgumentException,$.length < 2
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,IllegalArgumentException,$.length - 1 != polynomials.length
PolynomialSplineFunction.java,value,i,int,0,DEF,$ < 0
PolynomialSplineFunction.java,value,i,int,0,DEF,$ >= polynomials.length
DividedDifferenceInterpolator.java,computeDividedDifference,denominator,double,0,DuplicateSampleAbscissaException,$ == 0.0
SplineInterpolator.java,interpolate,x,double[],0,IllegalArgumentException,$.length != y.length
SplineInterpolator.java,interpolate,x,double[],0,IllegalArgumentException,$.length < 3
LegendreGaussIntegrator.java,integrate,i,int,0,RET,$ + 1 >= minimalIterationCount
LegendreGaussIntegrator.java,integrate,delta,double,0,RET,$ <= limit
TrapezoidIntegrator.java,stage,n,int,1,RET,$ == 0
TrapezoidIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
TrapezoidIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
TrapezoidIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
TrapezoidIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 64
UnivariateRealIntegratorImpl.java,UnivariateRealIntegratorImpl,f,UnivariateRealFunction,0,IllegalArgumentException,$ == null
UnivariateRealIntegratorImpl.java,verifyInterval,lower,double,0,DEF,$ >= upper
UnivariateRealIntegratorImpl.java,verifyIterationCount,minimalIterationCount,int,0,DEF,$ <= 0
UnivariateRealIntegratorImpl.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ <= minimalIterationCount
SimpsonIntegrator.java,integrate,minimalIterationCount,int,0,RET,$ == 1
SimpsonIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
SimpsonIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
SimpsonIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
SimpsonIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 64
RombergIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
RombergIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
RombergIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
RombergIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 32
ComplexFormat.java,format,im,double,1,DEF,$ < 0.0
ComplexFormat.java,format,im,double,0,DEF,$ > 0.0
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Complex
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Number
ComplexFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
ComplexFormat.java,parse,re,Number,0,RET,$ == null
ComplexFormat.java,parse,im,Number,0,RET,$ == null
ComplexFormat.java,setImaginaryCharacter,imaginaryCharacter,String,0,IllegalArgumentException,$ == null
ComplexFormat.java,setImaginaryCharacter,imaginaryCharacter,String,0,IllegalArgumentException,$.length() == 0
ComplexFormat.java,setImaginaryFormat,imaginaryFormat,NumberFormat,0,IllegalArgumentException,$ == null
ComplexFormat.java,setRealFormat,realFormat,NumberFormat,0,IllegalArgumentException,$ == null
Complex.java,abs,imaginary,double,0,RET,$ == 0.0
Complex.java,abs,real,double,0,RET,$ == 0.0
Complex.java,divide,c,double,0,RET,$ == 0.0
Complex.java,divide,d,double,0,RET,$ == 0.0
Complex.java,divide,d,double,0,RET,$ == 0.0
Complex.java,divide,c,double,0,RET,$ == 0.0
Complex.java,equals,other,Object,1,DEF,$ == null
Complex.java,pow,x,Complex,0,NullPointerException,$ == null
Complex.java,sqrt,real,double,0,RET,$ == 0.0
Complex.java,sqrt,imaginary,double,0,RET,$ == 0.0
Complex.java,sqrt,real,double,1,RET,$ >= 0.0
Complex.java,nthRoot,n,int,0,DEF,$ <= 0
ComplexUtils.java,polar2Complex,r,double,0,IllegalArgumentException,$ < 0
DescriptiveStatistics.java,addValue,windowSize,int,1,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,IllegalArgumentException,$ < 1
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,IllegalArgumentException,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,getPercentile,percentileImpl,null,1,DEF,$ instanceof Percentile
AbstractStorelessUnivariateStatistic.java,evaluate,values,double[],0,IllegalArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,incrementAll,values,double[],0,IllegalArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,equals,object,Object,0,RET,$ instanceof AbstractStorelessUnivariateStatistic == false
AbstractStorelessUnivariateStatistic.java,equals,object,null,0,RET,$ instanceof AbstractStorelessUnivariateStatistic
StatisticalSummaryValues.java,equals,object,Object,0,RET,$ instanceof StatisticalSummaryValues == false
StatisticalSummaryValues.java,equals,object,null,0,RET,$ instanceof StatisticalSummaryValues
FirstMoment.java,increment,n,long,0,DEF,$ == 0
GeometricMean.java,getResult,sumOfLogs,StorelessUnivariateStatistic,1,RET,$.getN() > 0
ThirdMoment.java,increment,n,long,0,DEF,$ < 1
Kurtosis.java,getResult,moment,FourthMoment,0,DEF,$.getN() > 3
Kurtosis.java,getResult,moment,FirstMoment,1,DEF,$.n <= 3
Kurtosis.java,getResult,variance,double,1,DEF,$ < 10E-20
Kurtosis.java,evaluate,length,int,0,DEF,$ > 3
Skewness.java,getResult,moment,FirstMoment,0,RET,$.n < 3
Skewness.java,getResult,variance,double,1,RET,$ < 10E-20
Skewness.java,evaluate,length,int,0,DEF,$ > 2
FourthMoment.java,increment,n,long,0,DEF,$ < 1
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 0
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 1
Variance.java,evaluate,values,double[],0,IllegalArgumentException,$ == null
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
VectorialCovariance.java,increment,v,double[],0,DimensionMismatchException,$.length != sums.length
VectorialCovariance.java,getResult,n,long,0,DEF,$ > 1
SecondMoment.java,increment,n,long,0,DEF,$ < 1
VectorialMean.java,increment,v,double[],0,DimensionMismatchException,$.length != means.length
Percentile.java,evaluate,p,double,0,IllegalArgumentException,$ > 100
Percentile.java,evaluate,p,double,0,IllegalArgumentException,$ <= 0
Percentile.java,evaluate,length,int,0,RET,$ == 0
Percentile.java,evaluate,length,int,0,RET,$ == 1
Percentile.java,evaluate,pos,double,0,RET,$ < 1
Percentile.java,evaluate,pos,double,0,RET,$ >= n
Percentile.java,setQuantile,p,double,0,IllegalArgumentException,$ <= 0
Percentile.java,setQuantile,p,double,0,IllegalArgumentException,$ > 100
Max.java,increment,d,double,0,DEF,$ > value
Min.java,increment,d,double,0,DEF,$ < value
AbstractUnivariateStatistic.java,test,values,double[],0,IllegalArgumentException,$ == null
AbstractUnivariateStatistic.java,test,begin,int,0,IllegalArgumentException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,IllegalArgumentException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,IllegalArgumentException,begin + $ > values.length
AbstractUnivariateStatistic.java,test,begin,int,0,IllegalArgumentException,$ + length > values.length
AbstractUnivariateStatistic.java,test,length,int,0,RET,$ == 0
MultivariateSummaryStatistics.java,append,i,int,0,DEF,$ > 0
MultivariateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof MultivariateSummaryStatistics == false
MultivariateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof MultivariateSummaryStatistics
MultivariateSummaryStatistics.java,checkEmpty,n,long,0,DEF,$ > 0
MultivariateSummaryStatistics.java,checkDimension,dimension,int,0,DimensionMismatchException,$ != k
SummaryStatistics.java,addValue,meanImpl,null,0,DEF,$ instanceof Mean
SummaryStatistics.java,addValue,varianceImpl,null,0,DEF,$ instanceof Variance
SummaryStatistics.java,addValue,geoMeanImpl,null,0,DEF,$ instanceof GeometricMean
SummaryStatistics.java,getMean,mean,Mean,1,RET,$ == meanImpl
SummaryStatistics.java,getVariance,varianceImpl,StorelessUnivariateStatistic,1,RET,$ == variance
SummaryStatistics.java,clear,meanImpl,StorelessUnivariateStatistic,0,DEF,$ != mean
SummaryStatistics.java,clear,varianceImpl,StorelessUnivariateStatistic,0,DEF,$ != variance
SummaryStatistics.java,equals,object,Object,0,RET,$ instanceof SummaryStatistics == false
SummaryStatistics.java,equals,object,null,0,RET,$ instanceof SummaryStatistics
SummaryStatistics.java,checkEmpty,n,long,0,DEF,$ > 0
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.geoMean == source.geoMeanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.max == source.maxImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.mean == source.meanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.min == source.minImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sum == source.sumImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.variance == source.varianceImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumLog == source.sumLogImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumsq == source.sumsqImpl
Product.java,increment,n,long,1,DEF,$ == 0
SumOfLogs.java,getResult,n,int,1,RET,$ > 0
SumOfSquares.java,increment,n,long,1,DEF,$ == 0
Sum.java,increment,n,long,1,DEF,$ == 0
TTestImpl.java,pairedT,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,pairedT,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,pairedT,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,pairedT,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,pairedTTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,pairedTTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,t,observed,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,t,observed,double[],0,IllegalArgumentException,$.length < 2
TTestImpl.java,t,sampleStats,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,t,sampleStats,StatisticalSummary,0,IllegalArgumentException,$.getN() < 2
TTestImpl.java,homoscedasticT,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticT,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticT,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,homoscedasticT,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,t,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,t,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,t,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,t,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,t,sampleStats1,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,t,sampleStats2,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,t,sampleStats2,StatisticalSummary,0,IllegalArgumentException,Math.min(sampleStats1.getN(), $.getN()) < 2
TTestImpl.java,t,sampleStats1,StatisticalSummary,0,IllegalArgumentException,Math.min($.getN(), sampleStats2.getN()) < 2
TTestImpl.java,homoscedasticT,sampleStats1,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticT,sampleStats2,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticT,sampleStats2,StatisticalSummary,0,IllegalArgumentException,Math.min(sampleStats1.getN(), $.getN()) < 2
TTestImpl.java,homoscedasticT,sampleStats1,StatisticalSummary,0,IllegalArgumentException,Math.min($.getN(), sampleStats2.getN()) < 2
TTestImpl.java,tTest,sample,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sample,double[],0,IllegalArgumentException,$.length < 2
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,tTest,sampleStats,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sampleStats,StatisticalSummary,0,IllegalArgumentException,$.getN() < 2
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,tTest,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,tTest,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,homoscedasticTTest,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticTTest,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticTTest,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,homoscedasticTTest,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,homoscedasticTTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,homoscedasticTTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,tTest,sampleStats1,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sampleStats2,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sampleStats2,StatisticalSummary,0,IllegalArgumentException,Math.min(sampleStats1.getN(), $.getN()) < 2
TTestImpl.java,tTest,sampleStats1,StatisticalSummary,0,IllegalArgumentException,Math.min($.getN(), sampleStats2.getN()) < 2
TTestImpl.java,homoscedasticTTest,sampleStats1,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticTTest,sampleStats2,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticTTest,sampleStats2,StatisticalSummary,0,IllegalArgumentException,Math.min(sampleStats1.getN(), $.getN()) < 2
TTestImpl.java,homoscedasticTTest,sampleStats1,StatisticalSummary,0,IllegalArgumentException,Math.min($.getN(), sampleStats2.getN()) < 2
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ > 0.5
OneWayAnovaImpl.java,anovaTest,alpha,double,0,IllegalArgumentException,$ <= 0
OneWayAnovaImpl.java,anovaTest,alpha,double,0,IllegalArgumentException,$ > 0.5
OneWayAnovaImpl.java,anovaStats,categoryData,Collection<double[]>,0,IllegalArgumentException,$.size() < 2
OneWayAnovaImpl.java,anovaStats,array,double[],0,IllegalArgumentException,$.length <= 1
ChiSquareTestImpl.java,chiSquare,expected,double[],0,IllegalArgumentException,$.length < 2
ChiSquareTestImpl.java,chiSquare,expected,double[],0,IllegalArgumentException,$.length != observed.length
ChiSquareTestImpl.java,chiSquare,sumObserved,double,0,DEF,Math.abs(sumExpected - $) > 10E-6
ChiSquareTestImpl.java,chiSquare,sumExpected,double,0,DEF,Math.abs($ - sumObserved) > 10E-6
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,IllegalArgumentException,$ <= 0
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,IllegalArgumentException,$ > 0.5
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,IllegalArgumentException,$ <= 0
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,IllegalArgumentException,$ > 0.5
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],0,IllegalArgumentException,$.length < 2
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],0,IllegalArgumentException,$.length != observed2.length
ChiSquareTestImpl.java,chiSquareDataSetsComparison,countSum1,long,0,IllegalArgumentException,$ * countSum2 == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,countSum2,long,0,IllegalArgumentException,countSum1 * $ == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,i,int,1,IllegalArgumentException,observed1[$] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],1,IllegalArgumentException,$[i] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed2,long[],1,IllegalArgumentException,$[i] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,i,int,1,IllegalArgumentException,observed2[$] == 0
ChiSquareTestImpl.java,chiSquareTestDataSetsComparison,alpha,double,0,IllegalArgumentException,$ <= 0
ChiSquareTestImpl.java,chiSquareTestDataSetsComparison,alpha,double,0,IllegalArgumentException,$ > 0.5
ChiSquareTestImpl.java,checkArray,in,long[][],0,IllegalArgumentException,$.length < 2
ChiSquareTestImpl.java,checkArray,in,long[][],0,IllegalArgumentException,$[0].length < 2
ChiSquareTestImpl.java,isPositive,in,double[],0,RET,$[i] <= 0
ChiSquareTestImpl.java,isPositive,i,int,0,RET,in[$] <= 0
ChiSquareTestImpl.java,isNonNegative,in,long[],0,RET,$[i] < 0
ChiSquareTestImpl.java,isNonNegative,i,int,0,RET,in[$] < 0
ChiSquareTestImpl.java,isNonNegative,in,long[][],0,RET,$[i][j] < 0
ChiSquareTestImpl.java,isNonNegative,i,int,0,RET,in[$][j] < 0
ChiSquareTestImpl.java,isNonNegative,j,int,0,RET,in[i][$] < 0
StatUtils.java,sumDifference,n,int,0,IllegalArgumentException,$ != sample2.length
StatUtils.java,sumDifference,n,int,0,IllegalArgumentException,$ < 1
StatUtils.java,varianceDifference,n,int,0,IllegalArgumentException,$ < 2
StatUtils.java,varianceDifference,n,int,0,IllegalArgumentException,$ != sample2.length
PearsonsCorrelation.java,PearsonsCorrelation,covarianceMatrix,RealMatrix,0,DEF,$ == null
PearsonsCorrelation.java,getCorrelationPValues,i,int,1,DEF,$ == j
PearsonsCorrelation.java,correlation,xArray,double[],1,RET,$.length == yArray.length
PearsonsCorrelation.java,correlation,xArray,double[],1,RET,$.length > 1
PearsonsCorrelation.java,checkSufficientData,nRows,int,0,DEF,$ < 2
PearsonsCorrelation.java,checkSufficientData,nCols,int,0,DEF,$ < 2
Covariance.java,covariance,length,int,1,DEF,$ == yArray.length
Covariance.java,covariance,length,int,1,DEF,$ > 1
Covariance.java,checkSufficientData,nRows,int,0,DEF,$ < 2
Covariance.java,checkSufficientData,nCols,int,0,DEF,$ < 2
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ == j
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ < p
OLSMultipleLinearRegression.java,solveUpperTriangular,constants,RealMatrix,0,IllegalArgumentException,$.getColumnDimension() != 1
OLSMultipleLinearRegression.java,isUpperTriangular,r,int,0,RET,Math.abs(m.getEntry($, c)) > epsilon
OLSMultipleLinearRegression.java,isUpperTriangular,c,int,0,RET,Math.abs(m.getEntry(r, $)) > epsilon
OLSMultipleLinearRegression.java,isUpperTriangular,m,RealMatrix,0,RET,Math.abs($.getEntry(r, c)) > epsilon
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,IllegalArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,y,double[],0,IllegalArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,IllegalArgumentException,$.length != y.length
AbstractMultipleLinearRegression.java,validateCovarianceData,covariance,double[][],0,IllegalArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateCovarianceData,x,double[][],0,IllegalArgumentException,$.length != covariance.length
AbstractMultipleLinearRegression.java,validateCovarianceData,covariance,double[][],0,IllegalArgumentException,$.length > 0
SimpleRegression.java,addData,n,long,1,DEF,$ == 0
SimpleRegression.java,addData,n,long,0,DEF,$ > 2
SimpleRegression.java,removeData,n,long,0,DEF,$ > 0
SimpleRegression.java,removeData,n,long,0,DEF,$ > 2
SimpleRegression.java,getSlope,n,long,0,RET,$ < 2
SimpleRegression.java,getTotalSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getXSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getMeanSquareError,n,long,0,RET,$ < 3
SimpleRegression.java,getR,b1,double,0,DEF,$ < 0
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,IllegalArgumentException,$ >= 1
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,IllegalArgumentException,$ <= 0
SimpleRegression.java,setDistribution,n,long,0,DEF,$ > 2
GLSMultipleLinearRegression.java,getOmegaInverse,OmegaInverse,RealMatrix,0,DEF,$ == null
Frequency.java,addValue,v,null,0,DEF,$ instanceof Integer
Frequency.java,addValue,count,Long,1,DEF,$ == null
Frequency.java,getCount,v,null,0,RET,$ instanceof Integer
Frequency.java,getCount,count,Long,0,DEF,$ != null
Frequency.java,getPct,sumFreq,long,0,RET,$ == 0
Frequency.java,getCumFreq,v,null,0,RET,$ instanceof Integer
Frequency.java,getCumFreq,c,Comparator,0,DEF,$ == null
Frequency.java,getCumFreq,value,Long,0,DEF,$ != null
Frequency.java,getCumFreq,c,Comparator,0,RET,$.compare(v, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,v,Object,0,RET,c.compare($, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,freqTable,TreeMap,0,RET,c.compare(v, $.firstKey()) < 0
Frequency.java,getCumFreq,c,Comparator,0,RET,$.compare(v, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,v,Object,0,RET,c.compare($, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,freqTable,TreeMap,0,RET,c.compare(v, $.lastKey()) >= 0
Frequency.java,getCumFreq,c,Comparator,1,DEF,$.compare(v, nextValue) > 0
Frequency.java,getCumFreq,v,Object,1,DEF,c.compare($, nextValue) > 0
Frequency.java,getCumFreq,nextValue,Object,1,DEF,c.compare(v, $) > 0
Frequency.java,getCumPct,sumFreq,long,0,RET,$ == 0
FDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
FDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
FDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
FDistributionImpl.java,getInitialDomain,d,double,0,DEF,$ > 2.0
FDistributionImpl.java,setNumeratorDegreesOfFreedom,degreesOfFreedom,double,0,IllegalArgumentException,$ <= 0.0
FDistributionImpl.java,setDenominatorDegreesOfFreedom,degreesOfFreedom,double,0,IllegalArgumentException,$ <= 0.0
PoissonDistributionImpl.java,setMean,p,double,0,IllegalArgumentException,$ <= 0
PoissonDistributionImpl.java,probability,x,int,0,RET,$ < 0
PoissonDistributionImpl.java,probability,x,int,0,RET,$ == Integer.MAX_VALUE
PoissonDistributionImpl.java,cumulativeProbability,x,int,0,RET,$ < 0
PoissonDistributionImpl.java,cumulativeProbability,x,int,0,RET,$ == Integer.MAX_VALUE
HypergeometricDistributionImpl.java,HypergeometricDistributionImpl,numberOfSuccesses,int,0,IllegalArgumentException,$ > populationSize
HypergeometricDistributionImpl.java,HypergeometricDistributionImpl,sampleSize,int,0,IllegalArgumentException,$ > populationSize
HypergeometricDistributionImpl.java,setNumberOfSuccesses,num,int,0,IllegalArgumentException,$ < 0
HypergeometricDistributionImpl.java,setPopulationSize,size,int,0,IllegalArgumentException,$ <= 0
HypergeometricDistributionImpl.java,setSampleSize,size,int,0,IllegalArgumentException,$ < 0
GammaDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
GammaDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
GammaDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
GammaDistributionImpl.java,setAlpha,alpha,double,0,IllegalArgumentException,$ <= 0.0
GammaDistributionImpl.java,setBeta,beta,double,0,IllegalArgumentException,$ <= 0.0
GammaDistributionImpl.java,density,x,Double,0,RET,$ < 0
GammaDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
GammaDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
TDistributionImpl.java,setDegreesOfFreedom,degreesOfFreedom,double,0,IllegalArgumentException,$ <= 0.0
TDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ == 0.0
TDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ < 0.0
TDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
TDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
BinomialDistributionImpl.java,setNumberOfTrials,trials,int,0,IllegalArgumentException,$ < 0
BinomialDistributionImpl.java,setProbabilityOfSuccess,p,double,0,IllegalArgumentException,$ < 0.0
BinomialDistributionImpl.java,setProbabilityOfSuccess,p,double,0,IllegalArgumentException,$ > 1.0
BinomialDistributionImpl.java,cumulativeProbability,x,int,1,DEF,$ < 0
BinomialDistributionImpl.java,probability,x,int,1,DEF,$ < 0
BinomialDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
BinomialDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
ExponentialDistributionImpl.java,setMean,mean,double,0,IllegalArgumentException,$ <= 0.0
ExponentialDistributionImpl.java,density,x,Double,0,RET,$ < 0
ExponentialDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ < 0.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ > 1.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1.0
ExponentialDistributionImpl.java,getDomainUpperBound,p,double,1,RET,$ < .5
ExponentialDistributionImpl.java,getInitialDomain,p,double,1,RET,$ < .5
ZipfDistributionImpl.java,setNumberOfElements,n,int,0,DEF,$ <= 0
ZipfDistributionImpl.java,setExponent,s,double,0,DEF,$ <= 0.0
ZipfDistributionImpl.java,probability,x,int,0,RET,$ <= 0
ZipfDistributionImpl.java,cumulativeProbability,x,int,1,RET,$ <= 0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ < 0.0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ > 1.0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
CauchyDistributionImpl.java,setScale,s,double,0,IllegalArgumentException,$ <= 0.0
CauchyDistributionImpl.java,getDomainLowerBound,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ > .5
NormalDistributionImpl.java,setStandardDeviation,sd,double,0,IllegalArgumentException,$ <= 0.0
NormalDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
NormalDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
NormalDistributionImpl.java,getDomainLowerBound,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ > .5
PascalDistributionImpl.java,setNumberOfSuccesses,successes,int,0,IllegalArgumentException,$ < 0
PascalDistributionImpl.java,setProbabilityOfSuccess,p,double,0,IllegalArgumentException,$ < 0.0
PascalDistributionImpl.java,setProbabilityOfSuccess,p,double,0,IllegalArgumentException,$ > 1.0
PascalDistributionImpl.java,cumulativeProbability,x,int,1,DEF,$ < 0
PascalDistributionImpl.java,probability,x,int,1,DEF,$ < 0
PascalDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
PascalDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
AbstractDistribution.java,cumulativeProbability,x0,double,0,IllegalArgumentException,$ > x1
AbstractIntegerDistribution.java,cumulativeProbability,x0,double,0,IllegalArgumentException,$ > x1
AbstractIntegerDistribution.java,cumulativeProbability,x0,double,1,RET,Math.floor($) < x0
AbstractIntegerDistribution.java,probability,fl,double,1,RET,$ == x
AbstractIntegerDistribution.java,cumulativeProbability,x0,int,0,IllegalArgumentException,$ > x1
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,IllegalArgumentException,$ < 0.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,IllegalArgumentException,$ > 1.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,pm,double,1,DEF,$ > p
AbstractIntegerDistribution.java,inverseCumulativeProbability,xm,int,1,DEF,$ == x1
AbstractIntegerDistribution.java,inverseCumulativeProbability,xm,int,1,DEF,$ == x0
ChiSquaredDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
ChiSquaredDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
ChiSquaredDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
ChiSquaredDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
AbstractContinuousDistribution.java,inverseCumulativeProbability,p,double,0,IllegalArgumentException,$ < 0.0
AbstractContinuousDistribution.java,inverseCumulativeProbability,p,double,0,IllegalArgumentException,$ > 1.0
AbstractContinuousDistribution.java,inverseCumulativeProbability,rootFindingFunction,UnivariateRealFunction,0,RET,Math.abs($.value(lowerBound)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,lowerBound,double,0,RET,Math.abs(rootFindingFunction.value($)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,upperBound,double,0,RET,Math.abs(rootFindingFunction.value($)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,rootFindingFunction,UnivariateRealFunction,0,RET,Math.abs($.value(upperBound)) < 1E-6
BetaDistributionImpl.java,density,x,Double,1,RET,$ < 0
BetaDistributionImpl.java,density,x,Double,1,RET,$ > 1
BetaDistributionImpl.java,density,x,Double,1,MathException:RET,$ == 0
BetaDistributionImpl.java,density,alpha,double,0,MathException,$ < 1
BetaDistributionImpl.java,density,x,Double,1,MathException:RET,$ == 1
BetaDistributionImpl.java,density,beta,double,0,MathException,$ < 1
BetaDistributionImpl.java,inverseCumulativeProbability,p,double,1,RET,$ == 0
BetaDistributionImpl.java,inverseCumulativeProbability,p,double,1,RET,$ == 1
BetaDistributionImpl.java,cumulativeProbability,x,double,1,RET,$ <= 0
BetaDistributionImpl.java,cumulativeProbability,x,double,1,RET,$ >= 1
WeibullDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ < 0.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ > 1.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
WeibullDistributionImpl.java,setShape,alpha,double,0,IllegalArgumentException,$ <= 0.0
WeibullDistributionImpl.java,setScale,beta,double,0,IllegalArgumentException,$ <= 0.0
FastFourierTransformer.java,fft,f,double[],0,RET,$.length == 1
FastFourierTransformer.java,fft,N,int,0,RET,$ == 1
FastFourierTransformer.java,fft,N,int,0,RET,$ == 2
FastFourierTransformer.java,sample,n,int,0,DEF,$ <= 0
FastFourierTransformer.java,verifyInterval,lower,double,0,DEF,$ >= upper
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == dimensionSize.length
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == d
FastFourierTransformer.java,get,vector,int[],0,RET,$ == null
FastFourierTransformer.java,get,dimensionSize,int[],0,DEF,$.length > 0
FastFourierTransformer.java,get,vector,int[],0,DEF,$.length != dimensionSize.length
FastFourierTransformer.java,set,vector,int[],0,RET,$ == null
FastFourierTransformer.java,set,dimensionSize,int[],0,DEF,$.length > 0
FastFourierTransformer.java,set,vector,int[],0,DEF,$.length != dimensionSize.length
FastFourierTransformer.java,isForward,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,computeOmega,n,int,0,DEF,$ == 0
FastFourierTransformer.java,computeOmega,absN,int,0,RET,$ == omegaCount
FastFourierTransformer.java,getOmegaReal,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,getOmegaReal,k,int,0,DEF,$ < 0
FastFourierTransformer.java,getOmegaReal,k,int,0,DEF,$ >= omegaCount
FastFourierTransformer.java,getOmegaImaginary,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,getOmegaImaginary,k,int,0,DEF,$ < 0
FastFourierTransformer.java,getOmegaImaginary,k,int,0,DEF,$ >= omegaCount
FastCosineTransformer.java,fct,N,int,0,RET,$ == 1
FastSineTransformer.java,fst,f,double[],0,DEF,$[0] != 0.0
FastSineTransformer.java,fst,N,int,0,RET,$ == 1
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,source.substring($, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,endIndex,int,0,DEF,source.substring(startIndex, $).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,source,String,0,DEF,$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,sb,StringBuffer,0,DEF,source.substring(startIndex, endIndex).compareTo($.toString()) == 0
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,$ == endIndex
CompositeFormat.java,parseNumber,number,Number,0,DEF,$ != null
CompositeFormat.java,parseFixedstring,startIndex,int,0,RET,source.substring($, endIndex).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,endIndex,int,0,RET,source.substring(startIndex, $).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,expected,String,0,RET,source.substring(startIndex, endIndex).compareTo($) != 0
CompositeFormat.java,parseFixedstring,source,String,0,RET,$.substring(startIndex, endIndex).compareTo(expected) != 0
ResizableDoubleArray.java,addElement,startIndex,int,0,DEF,($ + numElements) > internalArray.length
ResizableDoubleArray.java,addElement,numElements,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,addElementRolling,startIndex,int,0,DEF,($ + (numElements + 1)) > internalArray.length
ResizableDoubleArray.java,addElementRolling,numElements,int,0,DEF,(startIndex + ($ + 1)) > internalArray.length
ResizableDoubleArray.java,substituteMostRecentElement,numElements,int,0,DEF,$ < 1
ResizableDoubleArray.java,checkContractExpand,contractionCritera,float,0,DEF,$ < expansionFactor
ResizableDoubleArray.java,checkContractExpand,contractionCriteria,float,0,DEF,$ <= 1.0
ResizableDoubleArray.java,checkContractExpand,expansionFactor,float,0,DEF,$ <= 1.0
ResizableDoubleArray.java,discardExtremeElements,i,int,1,DEF,$ > numElements
ResizableDoubleArray.java,discardExtremeElements,i,int,1,DEF,$ < 0
ResizableDoubleArray.java,expand,expansionMode,int,1,DEF,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,getElement,index,int,1,DEF,$ >= numElements
ResizableDoubleArray.java,getElement,index,int,1,RET,$ >= 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ < 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ + 1 > numElements
ResizableDoubleArray.java,setElement,startIndex,int,0,DEF,($ + index) >= internalArray.length
ResizableDoubleArray.java,setElement,index,int,0,DEF,(startIndex + $) >= internalArray.length
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,DEF,$ != MULTIPLICATIVE_MODE
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,DEF,$ != ADDITIVE_MODE
ResizableDoubleArray.java,setInitialCapacity,initialCapacity,int,1,DEF,$ > 0
ResizableDoubleArray.java,setNumElements,i,int,0,DEF,$ < 0
ResizableDoubleArray.java,setNumElements,startIndex,int,0,DEF,($ + i) > internalArray.length
ResizableDoubleArray.java,setNumElements,i,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,shouldContract,expansionMode,int,1,RET,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,equals,object,Object,0,RET,$ instanceof ResizableDoubleArray == false
ResizableDoubleArray.java,equals,object,null,0,RET,$ instanceof ResizableDoubleArray
ContinuedFraction.java,evaluate,a,double,1,DEF,$ != 0.0
ContinuedFraction.java,evaluate,b,double,1,DEF,$ != 0
ContinuedFraction.java,evaluate,n,int,0,MaxIterationsExceededException,$ >= maxIterations
MathUtils.java,addAndCheck,s,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,addAndCheck,s,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,addAndCheck,a,long,1,DEF,$ > b
MathUtils.java,addAndCheck,a,long,1,ArithmeticException,$ < 0
MathUtils.java,addAndCheck,b,long,1,ArithmeticException,$ < 0
MathUtils.java,addAndCheck,b,long,1,DEF,Long.MIN_VALUE - $ <= a
MathUtils.java,binomialCoefficient,n,int,0,IllegalArgumentException,$ < k
MathUtils.java,binomialCoefficient,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,binomialCoefficient,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficient,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficient,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 61
MathUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 66
MathUtils.java,binomialCoefficientDouble,n,int,0,IllegalArgumentException,$ < k
MathUtils.java,binomialCoefficientDouble,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,binomialCoefficientDouble,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficientDouble,n,int,0,RET,$ < 67
MathUtils.java,binomialCoefficientLog,n,int,0,IllegalArgumentException,$ < k
MathUtils.java,binomialCoefficientLog,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 67
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 1030
MathUtils.java,compareTo,x,double,0,RET,$ < y
MathUtils.java,equals,x,double[],0,RET,$ == null
MathUtils.java,equals,y,double[],0,RET,$ == null
MathUtils.java,equals,x,double[],0,RET,$.length != y.length
MathUtils.java,factorial,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,factorial,n,int,0,ArithmeticException,$ > 20
MathUtils.java,factorialDouble,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,factorialDouble,n,int,0,RET,$ < 21
MathUtils.java,factorialLog,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,factorialLog,n,int,0,RET,$ < 21
MathUtils.java,gcd,u,int,0,RET,$ == 0
MathUtils.java,gcd,v,int,0,RET,$ == 0
MathUtils.java,gcd,u,int,0,DEF,$ == Integer.MIN_VALUE
MathUtils.java,gcd,v,int,0,DEF,$ == Integer.MIN_VALUE
MathUtils.java,gcd,u,int,0,DEF,$ > 0
MathUtils.java,gcd,v,int,0,DEF,$ > 0
MathUtils.java,gcd,k,int,0,DEF,$ == 31
MathUtils.java,gcd,t,int,1,DEF,$ > 0
MathUtils.java,lcm,a,int,0,RET,$==0
MathUtils.java,lcm,b,int,0,RET,$==0
MathUtils.java,lcm,lcm,int,0,ArithmeticException,$ == Integer.MIN_VALUE
MathUtils.java,mulAndCheck,m,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,mulAndCheck,m,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,mulAndCheck,a,long,1,DEF,$ > b
MathUtils.java,mulAndCheck,a,long,1,ArithmeticException,$ < 0
MathUtils.java,mulAndCheck,b,long,1,ArithmeticException,$ < 0
MathUtils.java,mulAndCheck,b,long,1,ArithmeticException,$ > 0
MathUtils.java,mulAndCheck,b,long,1,DEF,Long.MIN_VALUE / $ <= a
MathUtils.java,mulAndCheck,a,long,1,ArithmeticException,$ > 0
MathUtils.java,nextAfter,d,double,0,RET,$ == 0
MathUtils.java,nextAfter,d,double,1,RET,$ * (direction - $) >= 0
MathUtils.java,nextAfter,direction,double,1,RET,d * ($ - d) >= 0
MathUtils.java,nextAfter,mantissa,long,1,RET,$ == 0x000fffffffffffffL
MathUtils.java,nextAfter,mantissa,long,1,RET,$ == 0L
MathUtils.java,scalb,d,double,0,RET,$ == 0
MathUtils.java,roundUnscaled,sign,double,1,DEF,$ == -1
MathUtils.java,roundUnscaled,sign,double,1,DEF,$ == -1
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ < 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ >= 0.5
MathUtils.java,subAndCheck,s,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,subAndCheck,s,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,subAndCheck,b,long,1,ArithmeticException,$ == Long.MIN_VALUE
MathUtils.java,subAndCheck,a,long,1,DEF,$ < 0
MathUtils.java,pow,e,int,0,DEF,$ < 0
MathUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,long,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,int,0,DEF,$ < 0
MathUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,long,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,int,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,BigInteger,0,DEF,$.compareTo(BigInteger.ZERO) < 0
DefaultTransformer.java,transform,o,Object,0,MathException,$ == null
DefaultTransformer.java,transform,o,null,0,RET,$ instanceof Number
TransformerMap.java,transform,o,null,1,DEF,$ instanceof Number
TransformerMap.java,transform,o,null,1,DEF,$ instanceof String
TransformerMap.java,transform,trans,NumberTransformer,0,DEF,$ != null
OpenIntToDoubleHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToDoubleHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToDoubleHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToDoubleHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToDoubleHashMap.java,key,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,key,current,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,value,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,value,current,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,advance,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,advance,current,int,0,DEF,$ < 0
BigFraction.java,getReducedFraction,numerator,int,0,RET,$ == 0
BigFraction.java,BigFraction,num,BigInteger,0,DEF,$ == null
BigFraction.java,BigFraction,den,BigInteger,0,DEF,$ == null
BigFraction.java,BigFraction,gcd,BigInteger,0,DEF,BigInteger.ONE.compareTo($) < 0
BigFraction.java,BigFraction,den,BigInteger,0,DEF,BigInteger.ZERO.compareTo($) > 0
BigFraction.java,BigFraction,exponent,long,0,DEF,$ != 0
BigFraction.java,BigFraction,sign,long,0,DEF,$ != 0
BigFraction.java,BigFraction,k,int,1,DEF,$ < 0
BigFraction.java,BigFraction,a0,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,value,double,0,RET,Math.abs(a0 - $) < epsilon
BigFraction.java,BigFraction,a0,long,0,RET,Math.abs($ - value) < epsilon
BigFraction.java,BigFraction,p2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,q2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,n,int,1,DEF,$ < maxIterations
BigFraction.java,BigFraction,convergent,double,1,DEF,Math.abs($ - value) > epsilon
BigFraction.java,BigFraction,value,double,1,DEF,Math.abs(convergent - $) > epsilon
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,BigFraction,n,int,0,FractionConversionException,$ >= maxIterations
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,equals,other,null,0,DEF,$ instanceof BigFraction
BigFraction.java,multiply,fraction,BigFraction,0,DEF,$.getNumeratorAsInt() != 0
BigFraction.java,pow,exponent,int,0,RET,$ < 0
BigFraction.java,pow,exponent,long,0,RET,$ < 0
BigFraction.java,pow,exponent,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
Fraction.java,Fraction,a0,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,value,double,0,RET,Math.abs(a0 - $) < epsilon
Fraction.java,Fraction,a0,long,0,RET,Math.abs($ - value) < epsilon
Fraction.java,Fraction,p2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,q2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,n,int,1,DEF,$ < maxIterations
Fraction.java,Fraction,convergent,double,1,DEF,Math.abs($ - value) > epsilon
Fraction.java,Fraction,value,double,1,DEF,Math.abs(convergent - $) > epsilon
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,n,int,0,FractionConversionException,$ >= maxIterations
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,den,int,0,DEF,$ == 0
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,Fraction,num,int,0,DEF,$ == Integer.MIN_VALUE
Fraction.java,Fraction,den,int,0,DEF,$ == Integer.MIN_VALUE
Fraction.java,Fraction,d,int,0,DEF,$ > 1
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,abs,numerator,int,1,DEF,$ >= 0
Fraction.java,equals,other,Object,1,DEF,$ == null
Fraction.java,negate,numerator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,addSub,fraction,Fraction,0,IllegalArgumentException,$ == null
Fraction.java,addSub,numerator,int,0,RET,$ == 0
Fraction.java,addSub,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,addSub,d1,int,0,RET,$==1
Fraction.java,addSub,w,BigInteger,0,DEF,$.bitLength() > 31
Fraction.java,multiply,fraction,Fraction,0,IllegalArgumentException,$ == null
Fraction.java,multiply,numerator,int,0,RET,$ == 0
Fraction.java,multiply,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,divide,fraction,Fraction,0,IllegalArgumentException,$ == null
Fraction.java,divide,fraction,Fraction,0,DEF,$.numerator == 0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$ == 0
Fraction.java,getReducedFraction,numerator,int,0,RET,$==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,numerator,int,0,DEF,($&1)==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$ < 0
Fraction.java,getReducedFraction,numerator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,toString,denominator,int,1,DEF,$ == 1
Fraction.java,toString,numerator,int,1,DEF,$ == 0
AbstractFormat.java,setDenominatorFormat,format,NumberFormat,0,DEF,$ == null
AbstractFormat.java,setNumeratorFormat,format,NumberFormat,0,DEF,$ == null
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
ProperBigFractionFormat.java,format,num,BigInteger,0,DEF,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,ret,BigFraction,0,RET,$ != null
ProperBigFractionFormat.java,parse,whole,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,setWholeFormat,format,NumberFormat,0,DEF,$ == null
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Fraction
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
FractionFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
FractionFormat.java,parse,num,Number,0,RET,$ == null
FractionFormat.java,parse,den,Number,0,RET,$ == null
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigFraction
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigInteger
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
BigFractionFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
BigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
BigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperFractionFormat.java,format,whole,int,0,DEF,$ != 0
ProperFractionFormat.java,parse,ret,Fraction,0,RET,$ != null
ProperFractionFormat.java,parse,whole,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,parse,den,Number,0,RET,$ == null
ProperFractionFormat.java,parse,den,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,setWholeFormat,format,NumberFormat,0,DEF,$ == null
AbstractIntegrator.java,sanityChecks,equations,FirstOrderDifferentialEquations,0,IntegratorException,$.getDimension() != y0.length
AbstractIntegrator.java,sanityChecks,equations,FirstOrderDifferentialEquations,0,IntegratorException,$.getDimension() != y.length
ContinuousOutputModel.java,append,model,ContinuousOutputModel,0,RET,$.steps.size() == 0
ContinuousOutputModel.java,append,steps,List<StepInterpolator>,1,DEF,$.size() == 0
ContinuousOutputModel.java,handleStep,steps,List<StepInterpolator>,0,DEF,$.size() == 0
ContinuousOutputModel.java,setInterpolatedTime,sMin,StepInterpolator,0,RET,locatePoint(time, $) <= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMin) <= 0
ContinuousOutputModel.java,setInterpolatedTime,sMax,StepInterpolator,0,RET,locatePoint(time, $) >= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMax) >= 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ < 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ > 0
ContinuousOutputModel.java,setInterpolatedTime,tMin,double,1,DEF,Math.abs(tMed - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,Math.abs($ - tMin) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMax,double,1,DEF,Math.abs($ - tMed) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,Math.abs(tMax - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,index,int,1,DEF,$ < low
ContinuousOutputModel.java,setInterpolatedTime,index,int,0,DEF,$ > high
AdamsBashforthIntegrator.java,integrate,y,double[],0,DEF,$ != y0
DormandPrince54StepInterpolator.java,DormandPrince54StepInterpolator,interpolator,DormandPrince54StepInterpolator,1,DEF,$.v1 == null
DormandPrince54StepInterpolator.java,computeInterpolatedState,v1,double[],0,DEF,$ == null
RungeKuttaIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,setStabilityCheck,stabilityReduction,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStabilityCheck,stabilityReduction,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl3,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl3,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl4,double,1,DEF,$ < 1.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl4,double,1,DEF,$ > 999.9
GraggBulirschStoerIntegrator.java,setOrderControl,maxOrder,int,0,DEF,$ <= 6
GraggBulirschStoerIntegrator.java,setOrderControl,maxOrder,int,0,DEF,$ % 2 != 0
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$ == null
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$.length != size
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudif,int,1,DEF,$ <= 0
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudif,int,1,DEF,$ >= 7
GraggBulirschStoerIntegrator.java,rescale,vecAbsoluteTolerance,double[],1,DEF,$ == null
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,DEF,2 * $ == n
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,RET,$ <= maxChecks
GraggBulirschStoerIntegrator.java,tryStep,k,int,0,RET,$ < maxIter
GraggBulirschStoerIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize > t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ > t
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize < t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ < t
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 0
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > 1.0e15
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > maxError
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ > 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,mu,int,0,DEF,$ >= 0
GraggBulirschStoerIntegrator.java,integrate,interpError,double,0,DEF,$ > 10.0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 1
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ <= targetIter
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 2
GraggBulirschStoerIntegrator.java,integrate,optimalIter,int,1,DEF,$ <= k
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ < targetIter
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ < minStep
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,IntegratorException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,IntegratorException,$.length != y0.length
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,IntegratorException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,IntegratorException,$.length != y0.length
AdaptiveStepsizeIntegrator.java,initializeStep,initialStep,double,0,RET,$ > 0
AdaptiveStepsizeIntegrator.java,filterStep,h,double,0,IntegratorException,Math.abs($) < minStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,0,DEF,$ < -maxStep
EmbeddedRungeKuttaIntegrator.java,integrate,y,double[],0,DEF,$ != y0
EmbeddedRungeKuttaIntegrator.java,integrate,vecAbsoluteTolerance,double[],1,DEF,$ != null
EmbeddedRungeKuttaIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
AdamsMoultonIntegrator.java,integrate,y,double[],0,DEF,$ != y0
DormandPrince853StepInterpolator.java,DormandPrince853StepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState == null
DormandPrince853StepInterpolator.java,computeInterpolatedState,v,double[][],0,DEF,$ == null
DormandPrince853StepInterpolator.java,doFinalize,currentState,double[],0,RET,$ == null
DormandPrince853Integrator.java,estimateError,den,double,0,DEF,$ <= 0.0
RungeKuttaStepInterpolator.java,RungeKuttaStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ < 0
GraggBulirschStoerStepInterpolator.java,resetTables,polynoms,double[][],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ <= 4
GraggBulirschStoerStepInterpolator.java,GraggBulirschStoerStepInterpolator,interpolator,GraggBulirschStoerStepInterpolator,1,DEF,$.polynoms == null
GraggBulirschStoerStepInterpolator.java,computeCoefficients,polynoms,double[][],0,DEF,$ == null
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,RET,$ < 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 1
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 2
GraggBulirschStoerStepInterpolator.java,estimateError,currentDegree,int,0,DEF,$ >= 5
GraggBulirschStoerStepInterpolator.java,computeInterpolatedState,currentDegree,int,0,DEF,$ > 3
GraggBulirschStoerStepInterpolator.java,computeInterpolatedState,h,double,0,DEF,$ == 0
StepNormalizer.java,handleStep,lastState,double[],0,DEF,$ == null
AbstractStepInterpolator.java,AbstractStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
MultistepStepInterpolator.java,MultistepStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
NordsieckTransformer.java,buildNordsieckToMultistep,n,int,0,DEF,$ > 1
NordsieckTransformer.java,convertMWDtNtoMtN,n,int,0,RET,$ == 1
EventState.java,evaluateStep,gb,double,1,FunctionEvaluationException:RET,$ >= 0
EventState.java,evaluateStep,root,double,1,DEF,Math.abs($ - ta) <= convergence
EventState.java,evaluateStep,ta,double,1,DEF,Math.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,0,RET,Math.abs(previousEventTime - $) > convergence
EventState.java,evaluateStep,previousEventTime,double,0,RET,Math.abs($ - root) > convergence
EventState.java,evaluateStep,pendingEventTime,double,0,RET,Math.abs(t1 - $) <= convergence
EventState.java,evaluateStep,t1,double,0,RET,Math.abs($ - pendingEventTime) <= convergence
EventState.java,evaluateStep,cause,Throwable,1,DEF,$ != null
EventState.java,evaluateStep,cause,null,1,DEF,$ instanceof DerivativeException
EventState.java,evaluateStep,cause,Throwable,0,DEF,$ != null
EventState.java,evaluateStep,cause,null,0,DEF,$ instanceof EventException
EventState.java,reset,nextAction,int,0,DEF,$ == EventHandler.RESET_STATE
CombinedEventsManager.java,evaluateStep,first,EventState,1,DEF,$ == null
MultistepIntegrator.java,start,store,StoringStepHandler,0,DEF,$.getFinalState() != null
MultistepIntegrator.java,eventOccurred,action,int,0,RET,$ == RESET_DERIVATIVES
MultistepIntegrator.java,eventOccurred,action,int,0,RET,$ == RESET_STATE
MultistepIntegrator.java,handleStep,count,int,0,DEF,$++ < n
MultistepIntegrator.java,handleStep,count,int,0,DEF,$ == n
RealMatrixImpl.java,RealMatrixImpl,d,double[][],0,NullPointerException,$ == null
RealMatrixImpl.java,RealMatrixImpl,nRows,int,0,DEF,$ == 0
RealMatrixImpl.java,RealMatrixImpl,nCols,int,0,DEF,$ == 0
RealMatrixImpl.java,RealMatrixImpl,r,int,0,DEF,d[$].length != nCols
RealMatrixImpl.java,RealMatrixImpl,d,double[][],0,DEF,$[r].length != nCols
RealMatrixImpl.java,setSubMatrix,data,double[][],1,DEF,$ == null
RealMatrixImpl.java,setSubMatrix,row,int,0,DEF,$ > 0
RealMatrixImpl.java,setSubMatrix,column,int,0,DEF,$ > 0
RealMatrixImpl.java,setSubMatrix,nRows,int,0,DEF,$ == 0
RealMatrixImpl.java,setSubMatrix,nCols,int,0,DEF,$ == 0
RealMatrixImpl.java,setSubMatrix,i,int,0,DEF,subMatrix[$].length != nCols
RealMatrixImpl.java,setSubMatrix,subMatrix,double[][],0,DEF,$[i].length != nCols
RealMatrixImpl.java,operate,v,double[],0,DEF,$.length != nCols
RealMatrixImpl.java,preMultiply,v,double[],0,DEF,$.length != nRows
RealVectorFormat.java,format,i,int,0,DEF,$ > 0
RealVectorFormat.java,format,obj,null,0,RET,$ instanceof RealVector
RealVectorFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
RealVectorFormat.java,parse,component,Number,1,DEF,$ != null
RealVectorImpl.java,RealVectorImpl,d,double[],0,NullPointerException,$ == null
RealVectorImpl.java,RealVectorImpl,d,double[],0,DEF,$.length == 0
RealVectorImpl.java,unitVector,norm,double,0,DEF,$ == 0
RealVectorImpl.java,unitize,norm,double,0,DEF,$ == 0
RealVectorImpl.java,checkVectorDimensions,data,double[],0,DEF,$.length != n
RealVectorImpl.java,equals,other,Object,0,RET,$ == null
RealVectorImpl.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
AbstractRealMatrix.java,AbstractRealMatrix,rowDimension,int,0,DEF,$ <= 0
AbstractRealMatrix.java,AbstractRealMatrix,columnDimension,int,0,DEF,$ <= 0
AbstractRealMatrix.java,visit,row,int,0,DEF,$ == endRow
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$.length < rowsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$[0].length < columnsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$.length < selectedRows.length
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$[0].length < selectedColumns.length
AbstractRealMatrix.java,setSubMatrix,nRows,int,0,DEF,$ == 0
AbstractRealMatrix.java,setSubMatrix,nCols,int,0,DEF,$ == 0
AbstractRealMatrix.java,setSubMatrix,r,int,0,DEF,subMatrix[$].length != nCols
AbstractRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DEF,$[r].length != nCols
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getRowDimension() != 1
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getColumnDimension() != nCols
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getRowDimension() != nRows
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getColumnDimension() != 1
AbstractRealMatrix.java,setRowVector,vector,RealVector,0,InvalidMatrixException,$.getDimension() != nCols
AbstractRealMatrix.java,setColumnVector,vector,RealVector,0,InvalidMatrixException,$.getDimension() != nRows
AbstractRealMatrix.java,setRow,array,double[],0,InvalidMatrixException,$.length != nCols
AbstractRealMatrix.java,setColumn,array,double[],0,InvalidMatrixException,$.length != nRows
AbstractRealMatrix.java,inverse,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,isSingular,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractRealMatrix.java,operate,v,double[],0,DEF,$.length != nCols
AbstractRealMatrix.java,operate,v,RealVector,0,DEF,$.getDimension() != nCols
AbstractRealMatrix.java,preMultiply,v,double[],0,DEF,$.length != nRows
AbstractRealMatrix.java,preMultiply,v,RealVector,0,DEF,$.getDimension() != nRows
AbstractRealMatrix.java,solve,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,solve,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,luDecompose,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,toString,i,int,0,DEF,$ > 0
AbstractRealMatrix.java,toString,j,int,0,DEF,$ > 0
AbstractRealMatrix.java,equals,object,Object,0,RET,$ instanceof RealMatrix == false
AbstractRealMatrix.java,equals,object,null,0,RET,$ instanceof RealMatrix
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getColumnDimension() != nCols
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getRowDimension() != nRows
AbstractRealMatrix.java,checkRowIndex,row,int,0,MatrixIndexException,$ < 0
AbstractRealMatrix.java,checkColumnIndex,column,int,0,MatrixIndexException,$ < 0
AbstractRealMatrix.java,checkSubMatrixIndex,startRow,int,0,MatrixIndexException,$ > endRow
AbstractRealMatrix.java,checkSubMatrixIndex,startColumn,int,0,MatrixIndexException,$ > endColumn
AbstractRealMatrix.java,checkSubMatrixIndex,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
AbstractRealMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
AbstractRealMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length == 0
DenseRealMatrix.java,toBlocksLayout,length,int,0,DEF,$ != columns
DenseRealMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
DenseRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
DenseRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
DenseRealMatrix.java,setSubMatrix,refLength,int,0,DEF,$ < 1
DenseRealMatrix.java,setSubMatrix,subRow,double[],0,DEF,$.length != refLength
DenseRealMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
DenseRealMatrix.java,setRowMatrix,matrix,DenseRealMatrix,0,InvalidMatrixException,$.getRowDimension() != 1
DenseRealMatrix.java,setRowMatrix,matrix,DenseRealMatrix,0,InvalidMatrixException,$.getColumnDimension() != nCols
DenseRealMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
DenseRealMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
DenseRealMatrix.java,setColumnMatrix,matrix,DenseRealMatrix,0,InvalidMatrixException,$.getRowDimension() != nRows
DenseRealMatrix.java,setColumnMatrix,matrix,DenseRealMatrix,0,InvalidMatrixException,$.getColumnDimension() != 1
DenseRealMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
DenseRealMatrix.java,setRow,array,double[],0,InvalidMatrixException,$.length != nCols
DenseRealMatrix.java,setColumn,array,double[],0,InvalidMatrixException,$.length != nRows
DenseRealMatrix.java,operate,v,double[],0,DEF,$.length != columns
DenseRealMatrix.java,preMultiply,v,double[],0,DEF,$.length != rows
SparseRealVector.java,add,v,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,append,v,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,dotProduct,idx,int,0,DEF,$ < v.length
SparseRealVector.java,getSubVector,key,int,0,DEF,$ >= index
SparseRealVector.java,getSubVector,key,int,0,DEF,$ < end
SparseRealVector.java,getDistance,v,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,getL1Distance,v,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,getLInfDistance,delta,double,0,DEF,$ > max
SparseRealVector.java,getLInfDistance,iter,Iterator,0,DEF,$.value() > max
SparseRealVector.java,getLInfDistance,v,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,getLInfDistance,delta,double,0,DEF,$ > max
SparseRealVector.java,outerProduct,v,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,subtract,v,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
SparseRealVector.java,equals,obj,Object,0,RET,$ == null
SparseRealVector.java,equals,obj,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
SparseRealVector.java,equals,test,double,0,RET,Math.abs($) > epsilon
BigMatrixImpl.java,BigMatrixImpl,rowDimension,int,0,IllegalArgumentException,$ <=0
BigMatrixImpl.java,BigMatrixImpl,columnDimension,int,0,IllegalArgumentException,$ <=0
BigMatrixImpl.java,BigMatrixImpl,d,BigDecimal[][],0,NullPointerException,$ == null
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,r,int,0,IllegalArgumentException,d[$].length != nCols
BigMatrixImpl.java,BigMatrixImpl,d,BigDecimal[][],0,IllegalArgumentException,$[r].length != nCols
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,d,double[][],0,IllegalArgumentException,$[row].length != nCols
BigMatrixImpl.java,BigMatrixImpl,row,int,0,IllegalArgumentException,d[$].length != nCols
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,d,String[][],0,IllegalArgumentException,$[row].length != nCols
BigMatrixImpl.java,BigMatrixImpl,row,int,0,IllegalArgumentException,d[$].length != nCols
BigMatrixImpl.java,getSubMatrix,startRow,int,0,MatrixIndexException,$ > endRow
BigMatrixImpl.java,getSubMatrix,startColumn,int,0,MatrixIndexException,$ > endColumn
BigMatrixImpl.java,getSubMatrix,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
BigMatrixImpl.java,getSubMatrix,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
BigMatrixImpl.java,getSubMatrix,selectedRows,int[],0,MatrixIndexException,$.length == 0
BigMatrixImpl.java,setSubMatrix,nRows,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,setSubMatrix,nCols,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,setSubMatrix,r,int,0,IllegalArgumentException,subMatrix[$].length != nCols
BigMatrixImpl.java,setSubMatrix,subMatrix,BigDecimal[][],0,IllegalArgumentException,$[r].length != nCols
BigMatrixImpl.java,setSubMatrix,data,BigDecimal[][],1,DEF,$ == null
BigMatrixImpl.java,setSubMatrix,row,int,0,DEF,$ > 0
BigMatrixImpl.java,setSubMatrix,column,int,0,DEF,$ > 0
BigMatrixImpl.java,isSingular,lu,BigDecimal[][],1,RET,$ == null
BigMatrixImpl.java,preMultiply,v,BigDecimal[],0,DEF,$.length != nRows
BigMatrixImpl.java,solve,b,BigDecimal[],0,DEF,$.length != nRows
BigMatrixImpl.java,luDecompose,nRows,int,0,NonSquareMatrixException,$ != nCols
BigMatrixImpl.java,luDecompose,largest,BigDecimal,0,DEF,sum.abs().compareTo($) == 1
BigMatrixImpl.java,luDecompose,sum,BigDecimal,0,DEF,$.abs().compareTo(largest) == 1
BigMatrixImpl.java,luDecompose,col,int,0,SingularMatrixException,lu[max][$].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,TOO_SMALL,BigDecimal,0,SingularMatrixException,lu[max][col].abs().compareTo($) <= 0
BigMatrixImpl.java,luDecompose,max,int,0,SingularMatrixException,lu[$][col].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,lu,BigDecimal[][],0,SingularMatrixException,$[max][col].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,max,int,0,DEF,$ != col
BigMatrixImpl.java,toString,data,BigDecimal[][],0,DEF,$ != null
BigMatrixImpl.java,toString,i,int,0,DEF,$ > 0
BigMatrixImpl.java,toString,j,int,0,DEF,$ > 0
BigMatrixImpl.java,equals,object,Object,0,RET,$ instanceof BigMatrixImpl == false
BigMatrixImpl.java,equals,object,null,0,RET,$ instanceof BigMatrixImpl
BigMatrixImpl.java,equals,m,BigMatrix,0,RET,$.getColumnDimension() != nCols
BigMatrixImpl.java,equals,m,BigMatrix,0,RET,$.getRowDimension() != nRows
BigMatrixImpl.java,getLUMatrix,lu,BigDecimal[][],0,DEF,$ == null
BigMatrixImpl.java,checkRowIndex,row,int,0,MatrixIndexException,$ < 0
BigMatrixImpl.java,checkColumnIndex,column,int,0,MatrixIndexException,$ < 0
QRDecompositionImpl.java,QRDecompositionImpl,a,double,0,DEF,$ != 0.0
QRDecompositionImpl.java,getR,cachedR,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQT,cachedQT,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQT,minor,int,0,DEF,qrtMinor[$] != 0.0
QRDecompositionImpl.java,getQT,qrtMinor,double[],0,DEF,$[minor] != 0.0
QRDecompositionImpl.java,getH,cachedH,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,isNonSingular,diag,double,0,RET,$ == 0
QRDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
QRDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
LUDecompositionImpl.java,LUDecompositionImpl,sum,double,0,DEF,Math.abs($) > largest
LUDecompositionImpl.java,LUDecompositionImpl,col,int,0,RET,Math.abs(lu[max][$]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,max,int,0,RET,Math.abs(lu[$][col]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,lu,double[][],0,RET,Math.abs($[max][col]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,max,int,0,DEF,$ != col
LUDecompositionImpl.java,getL,cachedL,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,getU,cachedU,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,getP,cachedP,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
LUDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
LUDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
SingularValueDecompositionImpl.java,getU,cachedU,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getU,m,int,1,DEF,$ >= n
SingularValueDecompositionImpl.java,getUT,cachedUt,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getS,cachedS,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getV,cachedV,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getV,m,int,1,DEF,$ >= n
SingularValueDecompositionImpl.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getRank,singularValues,double[],0,RET,$[i] > threshold
SingularValueDecompositionImpl.java,getRank,i,int,0,RET,singularValues[$] > threshold
SingularValueDecompositionImpl.java,solve,b,double[],0,DEF,$.length != singularValues.length
SingularValueDecompositionImpl.java,solve,si,double,0,SingularMatrixException,$ == 0
SingularValueDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != singularValues.length
SingularValueDecompositionImpl.java,solve,si,double,0,SingularMatrixException,$ == 0
SingularValueDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != singularValues.length
SingularValueDecompositionImpl.java,solve,si,double,0,SingularMatrixException,$ == 0
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,lTData,double[][],0,NotPositiveDefiniteMatrixException,$[i][i] < absolutePositivityThreshold
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,i,int,0,NotPositiveDefiniteMatrixException,lTData[$][$] < absolutePositivityThreshold
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,lJI,double,0,NotSymmetricMatrixException,Math.abs(lIJ - $) > maxDelta
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,lIJ,double,0,NotSymmetricMatrixException,Math.abs($ - lJI) > maxDelta
CholeskyDecompositionImpl.java,getL,cachedL,RealMatrix,0,DEF,$ == null
CholeskyDecompositionImpl.java,getLT,cachedLT,RealMatrix,0,DEF,$ == null
CholeskyDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
CholeskyDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
CholeskyDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
TriDiagonalTransformer.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,cachedQt,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,hK,double[],0,DEF,$[k] != 0.0
TriDiagonalTransformer.java,getQT,k,int,0,DEF,hK[$] != 0.0
TriDiagonalTransformer.java,getT,cachedT,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getT,i,int,0,DEF,$ > 0
TriDiagonalTransformer.java,transform,a,double,0,DEF,$ != 0.0
EigenDecompositionImpl.java,getV,cachedV,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getV,eigenvectors,RealVectorImpl[],0,DEF,$ == null
EigenDecompositionImpl.java,getD,cachedD,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getVT,eigenvectors,RealVectorImpl[],0,DEF,$ == null
EigenDecompositionImpl.java,getEigenvector,eigenvectors,RealVectorImpl[],0,DEF,$ == null
EigenDecompositionImpl.java,getSolver,eigenvectors,RealVectorImpl[],0,DEF,$ == null
EigenDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
EigenDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
EigenDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
EigenDecompositionImpl.java,isNonSingular,realEigenvalues,double[],0,RET,$[i] == 0
EigenDecompositionImpl.java,isNonSingular,i,int,0,RET,realEigenvalues[$] == 0
EigenDecompositionImpl.java,isNonSingular,imagEigenvalues,double[],0,RET,$[i] == 0
EigenDecompositionImpl.java,isNonSingular,i,int,0,RET,imagEigenvalues[$] == 0
EigenDecompositionImpl.java,computeSplits,secondary,double[],0,DEF,Math.abs($[i]) <= max
EigenDecompositionImpl.java,computeSplits,i,int,0,DEF,Math.abs(secondary[$]) <= max
EigenDecompositionImpl.java,process2RowsBlock,delta,double,0,InvalidMatrixException,$ < 0
EigenDecompositionImpl.java,process3RowsBlock,delta,double,0,InvalidMatrixException,$ >= 0
EigenDecompositionImpl.java,process3RowsBlock,z0,double,0,DEF,$ < z1
EigenDecompositionImpl.java,process3RowsBlock,z1,double,0,DEF,$ < z2
EigenDecompositionImpl.java,process3RowsBlock,z0,double,0,DEF,$ < z1
EigenDecompositionImpl.java,processGeneralBlock,sumOffDiag,double,0,RET,$ == 0
EigenDecompositionImpl.java,processGeneralBlock,work,double[],0,DEF,$[i + 2] <= 0
EigenDecompositionImpl.java,processGeneralBlock,i,int,0,DEF,work[$ + 2] <= 0
EigenDecompositionImpl.java,processGeneralBlock,k,int,0,MaxIterationsExceededException,$ >= maxIter
EigenDecompositionImpl.java,processGeneralBlock,pingPong,int,0,DEF,$ == 0
EigenDecompositionImpl.java,processGeneralBlock,n0,int,0,DEF,$ - i0 > 3
EigenDecompositionImpl.java,processGeneralBlock,i0,int,0,DEF,n0 - $ > 3
EigenDecompositionImpl.java,goodStep,start,int,0,RET,$ >= deflatedEnd
EigenDecompositionImpl.java,goodStep,s,double,1,DEF,$ <= t
EigenDecompositionImpl.java,goodStep,dMin,double,0,DEF,$ <= 0
EigenDecompositionImpl.java,goodStep,deflatedEnd,int,0,DEF,$ < end
EigenDecompositionImpl.java,goodStep,dMin,double,0,RET,$ < 0
EigenDecompositionImpl.java,goodStep,dMin,double,1,RET,$ >= 0
EigenDecompositionImpl.java,goodStep,dMin1,double,1,RET,$ > 0
EigenDecompositionImpl.java,goodStep,dMin,double,1,RET,$ < 0.0
EigenDecompositionImpl.java,goodStep,dMin1,double,1,RET,$ > 0.0
EigenDecompositionImpl.java,goodStep,dMin,double,1,DEF,$ < 0.0
EigenDecompositionImpl.java,goodStep,tType,int,1,DEF,$ < -22
EigenDecompositionImpl.java,goodStep,dMin1,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,eigenvaluesRange,range,double,0,DEF,$ < absoluteTolerance
EigenDecompositionImpl.java,eigenvaluesRange,middle,double,1,DEF,countEigenValues($, index, n) >= 1
EigenDecompositionImpl.java,eigenvaluesRange,index,int,1,DEF,countEigenValues(middle, $, n) >= 1
EigenDecompositionImpl.java,eigenvaluesRange,n,int,1,DEF,countEigenValues(middle, index, $) >= 1
EigenDecompositionImpl.java,eigenvaluesRange,range,double,0,DEF,$ < absoluteTolerance
EigenDecompositionImpl.java,eigenvaluesRange,middle,double,1,DEF,countEigenValues($, index, n) >= n
EigenDecompositionImpl.java,eigenvaluesRange,index,int,1,DEF,countEigenValues(middle, $, n) >= n
EigenDecompositionImpl.java,eigenvaluesRange,n,int,1,DEF,countEigenValues(middle, index, $) >= n
EigenDecompositionImpl.java,countEigenValues,ratio,double,0,DEF,$ <= 0
EigenDecompositionImpl.java,dqds,pingPong,int,1,DEF,$ == 0
EigenDecompositionImpl.java,dqd,pingPong,int,1,DEF,$ == 0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 2] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 2] == 0.0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 3] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 3] == 0.0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 2] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 2] == 0.0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 2] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 2] == 0.0
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,0,RET,$ <= 0.0
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,DEF,$ == dN
EigenDecompositionImpl.java,computeShiftIncrement,dMin1,double,1,DEF,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,gap1,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,computeShiftIncrement,gap1,double,1,DEF,$ > b1
EigenDecompositionImpl.java,computeShiftIncrement,dN,double,0,DEF,$ > b1
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,$ == 0.0
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,100 * Math.max($, b1) < a2
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * Math.max(b2, $) < a2
EigenDecompositionImpl.java,computeShiftIncrement,cnst1,double,0,DEF,$ < a2
EigenDecompositionImpl.java,computeShiftIncrement,a2,double,0,DEF,$ < cnst1
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN2
EigenDecompositionImpl.java,computeShiftIncrement,np,int,0,RET,work[$ - 8] > b2
EigenDecompositionImpl.java,computeShiftIncrement,work,double[],0,RET,$[np - 8] > b2
EigenDecompositionImpl.java,computeShiftIncrement,np,int,0,RET,work[$ - 4] > b1
EigenDecompositionImpl.java,computeShiftIncrement,work,double[],0,RET,$[np - 4] > b1
EigenDecompositionImpl.java,computeShiftIncrement,start,int,0,RET,end - $ > 2
EigenDecompositionImpl.java,computeShiftIncrement,end,int,0,RET,$ - start > 2
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,$ == 0.0
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,100 * Math.max($, b1) < a2
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * Math.max(b2, $) < a2
EigenDecompositionImpl.java,computeShiftIncrement,cnst1,double,0,DEF,$ < a2
EigenDecompositionImpl.java,computeShiftIncrement,a2,double,1,DEF,$ < cnst1
EigenDecompositionImpl.java,computeShiftIncrement,tType,int,1,DEF,$ == -6
EigenDecompositionImpl.java,computeShiftIncrement,tType,int,1,DEF,$ == -18
EigenDecompositionImpl.java,computeShiftIncrement,dMin1,double,1,RET,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,dMin2,double,1,RET,$ == dN2
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,RET,$ != 0.0
EigenDecompositionImpl.java,computeShiftIncrement,oldB1,double,0,DEF,100 * Math.max(b1, $) < b2
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * Math.max($, oldB1) < b2
EigenDecompositionImpl.java,computeShiftIncrement,gap2,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,computeShiftIncrement,dMin1,double,0,DEF,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,dMin2,double,1,RET,$ == dN2
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,RET,$ != 0.0
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * $ < b2
EigenDecompositionImpl.java,computeShiftIncrement,gap2,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,updateSigma,tau,double,1,DEF,$ < sigma
EigenDecompositionImpl.java,findEigenvector,absG,double,0,DEF,$ < minG
BiDiagonalTransformer.java,BiDiagonalTransformer,m,int,1,DEF,$ >= n
BiDiagonalTransformer.java,getU,cachedU,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getU,hK,double[],0,DEF,$[k - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,k,int,0,DEF,hK[$ - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,hK[k - $] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getB,cachedB,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getB,m,int,1,DEF,$ < n
BiDiagonalTransformer.java,getB,i,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getV,cachedV,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getV,hK,double[],0,DEF,$[k] != 0.0
BiDiagonalTransformer.java,getV,k,int,0,DEF,hK[$] != 0.0
BiDiagonalTransformer.java,getV,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,b,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,b,double,0,DEF,$ != 0.0
SparseRealMatrix.java,multiply,outValue,double,1,DEF,$ == 0.0
SparseRealMatrix.java,setEntry,value,double,1,DEF,$ == 0.0
SparseRealMatrix.java,addToEntry,value,double,1,DEF,$ == 0.0
SparseRealMatrix.java,multiplyEntry,value,double,1,DEF,$ == 0.0
LevenbergMarquardtEstimator.java,estimate,dk,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,estimate,s,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,estimate,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtEstimator.java,estimate,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtEstimator.java,estimate,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,estimate,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,DEF,$ >= 1.0e-4
LevenbergMarquardtEstimator.java,estimate,actRed,double,0,RET,Math.abs($) <= costRelativeTolerance
LevenbergMarquardtEstimator.java,estimate,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtEstimator.java,estimate,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtEstimator.java,estimate,actRed,double,1,EstimationException,Math.abs($) <= 2.2204e-16
LevenbergMarquardtEstimator.java,estimate,preRed,double,1,EstimationException,$ <= 2.2204e-16
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,EstimationException,$ <= 2.0
LevenbergMarquardtEstimator.java,estimate,maxCosine,double,0,EstimationException,$ <= 2.2204e-16
LevenbergMarquardtEstimator.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtEstimator.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtEstimator.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtEstimator.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtEstimator.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtEstimator.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtEstimator.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtEstimator.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtEstimator.java,qrDecomposition,ak2,double,0,RET,$ == 0
AbstractEstimator.java,updateResidualsAndCost,costEvaluations,int,0,EstimationException,++$ > maxCostEval
AbstractEstimator.java,guessParametersErrors,m,int,0,EstimationException,$ <= p
MultiStartUnivariateRealOptimizer.java,getOptima,optima,double[],0,DEF,$ == null
MultiStartUnivariateRealOptimizer.java,optimize,goalType,GoalType,0,DEF,$ == GoalType.MAXIMIZE
SimplexSolver.java,getPivotColumn,epsilon,double,0,DEF,MathUtils.compareTo(tableau.getEntry(0, i), minValue, $) < 0
SimplexSolver.java,getPivotColumn,tableau,SimplexTableau,0,DEF,MathUtils.compareTo($.getEntry(0, i), minValue, epsilon) < 0
SimplexSolver.java,getPivotColumn,minValue,double,0,DEF,MathUtils.compareTo(tableau.getEntry(0, i), $, epsilon) < 0
SimplexSolver.java,getPivotColumn,i,int,0,DEF,MathUtils.compareTo(tableau.getEntry(0, $), minValue, epsilon) < 0
SimplexSolver.java,getPivotRow,epsilon,double,0,DEF,MathUtils.compareTo(tableau.getEntry(i, col), 0, $) >= 0
SimplexSolver.java,getPivotRow,col,int,0,DEF,MathUtils.compareTo(tableau.getEntry(i, $), 0, epsilon) >= 0
SimplexSolver.java,getPivotRow,tableau,SimplexTableau,0,DEF,MathUtils.compareTo($.getEntry(i, col), 0, epsilon) >= 0
SimplexSolver.java,getPivotRow,i,int,0,DEF,MathUtils.compareTo(tableau.getEntry($, col), 0, epsilon) >= 0
SimplexSolver.java,getPivotRow,ratio,double,0,DEF,$ < minRatio
SimplexSolver.java,doIteration,pivotRow,Integer,0,UnboundedSolutionException,$ == null
SimplexSolver.java,doIteration,i,int,0,DEF,$ != pivotRow
SimplexSolver.java,isPhase1Solved,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() == 0
SimplexSolver.java,isPhase1Solved,epsilon,double,0,RET,MathUtils.compareTo(tableau.getEntry(0, i), 0, $) < 0
SimplexSolver.java,isPhase1Solved,tableau,SimplexTableau,0,RET,MathUtils.compareTo($.getEntry(0, i), 0, epsilon) < 0
SimplexSolver.java,isPhase1Solved,i,int,0,RET,MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) < 0
SimplexSolver.java,isOptimal,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() > 0
SimplexSolver.java,isOptimal,epsilon,double,0,RET,MathUtils.compareTo(tableau.getEntry(0, i), 0, $) < 0
SimplexSolver.java,isOptimal,tableau,SimplexTableau,0,RET,MathUtils.compareTo($.getEntry(0, i), 0, epsilon) < 0
SimplexSolver.java,isOptimal,i,int,0,RET,MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) < 0
SimplexSolver.java,solvePhase1,tableau,SimplexTableau,0,RET,$.getNumArtificialVariables() == 0
SimplexTableau.java,createTableau,constraint,LinearConstraint,1,DEF,$.getRelationship() == Relationship.LEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.EQ
SimplexTableau.java,createTableau,constraint,LinearConstraint,0,DEF,$.getRelationship() == Relationship.GEQ
SimplexTableau.java,normalize,constraint,LinearConstraint,0,RET,$.getValue() < 0
SimplexTableau.java,getConstraintTypeCounts,constraint,LinearConstraint,0,DEF,$.getRelationship() == relationship
SimplexTableau.java,getBasicRow,row,Integer,1,DEF,$ == null
SimplexTableau.java,discardArtificialVariables,numArtificialVariables,int,0,RET,$ == 0
SimplexTableau.java,getDecisionVariableValue,basicRow,Integer,0,RET,$ == null
SimplexTableau.java,getDecisionVariableValue,tableau,RealMatrix,0,RET,$.getEntry(basicRow, i) == 1
SimplexTableau.java,getDecisionVariableValue,i,int,0,RET,tableau.getEntry(basicRow, $) == 1
SimplexTableau.java,getDecisionVariableValue,basicRow,Integer,0,RET,tableau.getEntry($, i) == 1
AbstractLinearOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
AbstractLinearOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
SimpleRealPointChecker.java,converged,difference,double,0,RET,$ > absoluteThreshold
SimpleVectorialValueChecker.java,converged,difference,double,0,RET,$ > absoluteThreshold
BrentOptimizer.java,localMin,goalType,GoalType,0,DEF,$ == GoalType.MAXIMIZE
BrentOptimizer.java,localMin,e,double,0,DEF,Math.abs($) > tol
BrentOptimizer.java,localMin,q,double,1,DEF,$ > 0
BrentOptimizer.java,localMin,a,double,0,DEF,(u - $) < t2
BrentOptimizer.java,localMin,u,double,0,DEF,($ - a) < t2
BrentOptimizer.java,localMin,b,double,0,DEF,($ - u) < t2
BrentOptimizer.java,localMin,u,double,0,DEF,(b - $) < t2
BrentOptimizer.java,localMin,goalType,GoalType,0,DEF,$ == GoalType.MAXIMIZE
BrentOptimizer.java,localMin,fu,double,1,DEF,$ <= fx
BrentOptimizer.java,localMin,u,double,1,DEF,$ < x
BrentOptimizer.java,localMin,u,double,1,DEF,$ < x
BrentOptimizer.java,localMin,fu,double,1,DEF,$ <= fw
BrentOptimizer.java,localMin,w,double,1,DEF,$ == x
BrentOptimizer.java,localMin,fu,double,0,DEF,$ <= fv
BrentOptimizer.java,localMin,v,double,0,DEF,$ == x
BrentOptimizer.java,localMin,v,double,0,DEF,$ == w
MultiStartMultivariateRealOptimizer.java,getOptima,optima,RealPointValuePair[],0,DEF,$ == null
MultiStartMultivariateRealOptimizer.java,compare,o1,RealPointValuePair,1,RET,$ == null
MultiStartMultivariateRealOptimizer.java,compare,o2,RealPointValuePair,0,RET,$ == null
MultiStartMultivariateRealOptimizer.java,optimize,optima,RealPointValuePair[],0,OptimizationException,$[0] == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,getOptima,optima,VectorialPointValuePair[],0,DEF,$ == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,compare,o1,VectorialPointValuePair,1,RET,$ == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,compare,o2,VectorialPointValuePair,0,RET,$ == null
MultiStartDifferentiableMultivariateVectorialOptimizer.java,optimize,optima,VectorialPointValuePair[],0,OptimizationException,$[0] == null
LeastSquaresConverter.java,LeastSquaresConverter,observations,double[],0,DEF,$.length != weights.length
LeastSquaresConverter.java,value,residuals,double[],0,FunctionEvaluationException,$.length != observations.length
LeastSquaresConverter.java,value,weights,double[],1,DEF,$ != null
LeastSquaresConverter.java,value,scale,RealMatrix,1,DEF,$ != null
DirectSearchOptimizer.java,setStartConfiguration,j,int,0,DEF,steps[$] == 0.0
DirectSearchOptimizer.java,setStartConfiguration,steps,double[],0,DEF,$[j] == 0.0
DirectSearchOptimizer.java,setStartConfiguration,n,int,0,DEF,$ < 0
DirectSearchOptimizer.java,setStartConfiguration,refI,double[],0,DEF,$.length != n
DirectSearchOptimizer.java,setStartConfiguration,i,int,0,DEF,$ > 0
DirectSearchOptimizer.java,optimize,startConfiguration,double[][],0,DEF,$ == null
DirectSearchOptimizer.java,optimize,iterations,int,0,RET,$ > 0
DirectSearchOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
DirectSearchOptimizer.java,buildSimplex,n,int,0,DEF,$ != startConfiguration.length
DirectSearchOptimizer.java,replaceWorstPoint,comparator,Comparator<RealPointValuePair>,0,DEF,$.compare(simplex[i], pointValuePair) > 0
DirectSearchOptimizer.java,replaceWorstPoint,pointValuePair,RealPointValuePair,0,DEF,comparator.compare(simplex[i], $) > 0
DirectSearchOptimizer.java,replaceWorstPoint,simplex,RealPointValuePair[],0,DEF,comparator.compare($[i], pointValuePair) > 0
DirectSearchOptimizer.java,replaceWorstPoint,i,int,0,DEF,comparator.compare(simplex[$], pointValuePair) > 0
MultiDirectional.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(reflected, best) < 0
MultiDirectional.java,iterateSimplex,reflected,RealPointValuePair,0,RET,comparator.compare($, best) < 0
MultiDirectional.java,iterateSimplex,best,RealPointValuePair,0,RET,comparator.compare(reflected, $) < 0
MultiDirectional.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,DEF,$.compare(reflected, expanded) <= 0
MultiDirectional.java,iterateSimplex,expanded,RealPointValuePair,0,DEF,comparator.compare(reflected, $) <= 0
MultiDirectional.java,iterateSimplex,reflected,RealPointValuePair,0,DEF,comparator.compare($, expanded) <= 0
MultiDirectional.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(contracted, best) < 0
MultiDirectional.java,iterateSimplex,contracted,RealPointValuePair,0,RET,comparator.compare($, best) < 0
MultiDirectional.java,iterateSimplex,best,RealPointValuePair,0,RET,comparator.compare(contracted, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(best, reflected) <= 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare(best, $) <= 0
NelderMead.java,iterateSimplex,best,RealPointValuePair,1,DEF,comparator.compare($, reflected) <= 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(reflected, secondBest) < 0
NelderMead.java,iterateSimplex,secondBest,RealPointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare($, secondBest) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(reflected, best) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare($, best) < 0
NelderMead.java,iterateSimplex,best,RealPointValuePair,1,DEF,comparator.compare(reflected, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,DEF,$.compare(expanded, reflected) < 0
NelderMead.java,iterateSimplex,expanded,RealPointValuePair,1,DEF,comparator.compare($, reflected) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,DEF,comparator.compare(expanded, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,1,RET,$.compare(reflected, worst) < 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,1,RET,comparator.compare($, worst) < 0
NelderMead.java,iterateSimplex,worst,RealPointValuePair,1,RET,comparator.compare(reflected, $) < 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(outContracted, reflected) <= 0
NelderMead.java,iterateSimplex,outContracted,RealPointValuePair,0,RET,comparator.compare($, reflected) <= 0
NelderMead.java,iterateSimplex,reflected,RealPointValuePair,0,RET,comparator.compare(outContracted, $) <= 0
NelderMead.java,iterateSimplex,comparator,Comparator<RealPointValuePair>,0,RET,$.compare(inContracted, worst) < 0
NelderMead.java,iterateSimplex,worst,RealPointValuePair,0,RET,comparator.compare(inContracted, $) < 0
NelderMead.java,iterateSimplex,inContracted,RealPointValuePair,0,RET,comparator.compare($, worst) < 0
NonLinearConjugateGradientOptimizer.java,setInitialStep,initialStep,double,1,DEF,$ <= 0
NonLinearConjugateGradientOptimizer.java,doOptimize,preconditioner,Preconditioner,0,DEF,$ == null
NonLinearConjugateGradientOptimizer.java,doOptimize,solver,UnivariateRealSolver,0,DEF,$ == null
NonLinearConjugateGradientOptimizer.java,doOptimize,goalType,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,previous,RealPointValuePair,0,RET,$ != null
NonLinearConjugateGradientOptimizer.java,doOptimize,goalType,GoalType,0,DEF,$ == GoalType.MINIMIZE
NonLinearConjugateGradientOptimizer.java,doOptimize,updateFormula,ConjugateGradientFormula,1,DEF,$ == ConjugateGradientFormula.FLETCHER_REEVES
NonLinearConjugateGradientOptimizer.java,doOptimize,n,int,1,DEF,getIterations() % $ == 0
NonLinearConjugateGradientOptimizer.java,doOptimize,beta,double,1,DEF,$ < 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yA,double,0,RET,$ * yB <= 0
NonLinearConjugateGradientOptimizer.java,findUpperBound,yB,double,0,RET,yA * $ <= 0
LevenbergMarquardtOptimizer.java,doOptimize,dk,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,s,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtOptimizer.java,doOptimize,cost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtOptimizer.java,doOptimize,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtOptimizer.java,doOptimize,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,DEF,$ >= 1.0e-4
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,0,RET,Math.abs($) <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,actRed,double,1,OptimizationException,Math.abs($) <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,preRed,double,1,OptimizationException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,doOptimize,ratio,double,1,OptimizationException,$ <= 2.0
LevenbergMarquardtOptimizer.java,doOptimize,maxCosine,double,0,OptimizationException,$ <= 2.2204e-16
LevenbergMarquardtOptimizer.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtOptimizer.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtOptimizer.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtOptimizer.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtOptimizer.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtOptimizer.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtOptimizer.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtOptimizer.java,qrDecomposition,ak2,double,0,RET,$ == 0
AbstractScalarDifferentiableOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
AbstractScalarDifferentiableOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
AbstractLeastSquaresOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
AbstractLeastSquaresOptimizer.java,incrementIterationsCounter,iterations,int,0,MaxIterationsExceededException,++$ > maxIterations
AbstractLeastSquaresOptimizer.java,updateJacobian,jacobian,double[][],0,FunctionEvaluationException,$.length != rows
AbstractLeastSquaresOptimizer.java,updateResidualsAndCost,objective,double[],0,FunctionEvaluationException,$.length != rows
AbstractLeastSquaresOptimizer.java,guessParametersErrors,rows,int,0,OptimizationException,$ <= cols
AbstractLeastSquaresOptimizer.java,optimize,target,double[],0,OptimizationException,$.length != weights.length
GaussNewtonOptimizer.java,doOptimize,previous,VectorialPointValuePair,0,DEF,$ != null
MultiStartDifferentiableMultivariateRealOptimizer.java,getOptima,optima,RealPointValuePair[],0,DEF,$ == null
MultiStartDifferentiableMultivariateRealOptimizer.java,compare,o1,RealPointValuePair,1,RET,$ == null
MultiStartDifferentiableMultivariateRealOptimizer.java,compare,o2,RealPointValuePair,0,RET,$ == null
MultiStartDifferentiableMultivariateRealOptimizer.java,optimize,optima,RealPointValuePair[],0,OptimizationException,$[0] == null
SimpleVectorialPointChecker.java,converged,difference,double,0,RET,$ > absoluteThreshold
Beta.java,regularizedBeta,x,double,1,DEF,$ < 0
Beta.java,regularizedBeta,x,double,1,DEF,$ > 1
Beta.java,regularizedBeta,a,double,1,DEF,$ <= 0.0
Beta.java,regularizedBeta,b,double,1,DEF,$ <= 0.0
Beta.java,getB,n,int,1,DEF,$ % 2 == 0
Beta.java,logBeta,a,double,1,DEF,$ <= 0.0
Beta.java,logBeta,b,double,1,DEF,$ <= 0.0
Gamma.java,logGamma,x,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ >= 1.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ > a
Gamma.java,regularizedGammaP,n,double,1,MaxIterationsExceededException,$ >= maxIterations
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < a
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ < 1.0
Erf.java,erf,x,double,0,DEF,$ < 0
Vector3DFormat.java,format,obj,null,0,RET,$ instanceof Vector3D
Vector3DFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
Vector3DFormat.java,parse,x,Number,0,RET,$ == null
Vector3DFormat.java,parse,y,Number,0,RET,$ == null
Vector3DFormat.java,parse,z,Number,0,RET,$ == null
Vector3D.java,normalize,s,double,0,DEF,$ == 0
Vector3D.java,orthogonal,threshold,double,0,DEF,$ == 0
Vector3D.java,orthogonal,x,double,1,RET,$ >= -threshold
Vector3D.java,orthogonal,x,double,1,RET,$ <= threshold
Vector3D.java,orthogonal,y,double,0,RET,$ >= -threshold
Vector3D.java,orthogonal,y,double,0,RET,$ <= threshold
Vector3D.java,angle,normProduct,double,0,DEF,$ == 0
Vector3D.java,angle,dot,double,0,RET,$ < -threshold
Vector3D.java,angle,dot,double,0,RET,$ > threshold
Vector3D.java,angle,dot,double,0,RET,$ >= 0
Vector3D.java,equals,other,Object,0,RET,$ == null
Rotation.java,Rotation,norm,double,0,DEF,$ == 0
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$.length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[0].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[1].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[2].length != 3
Rotation.java,Rotation,det,double,0,NotARotationMatrixException,$ < 0.0
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,u1u1,double,0,IllegalArgumentException,$ == 0
Rotation.java,Rotation,u2u2,double,0,IllegalArgumentException,$ == 0
Rotation.java,Rotation,v1v1,double,0,IllegalArgumentException,$ == 0
Rotation.java,Rotation,v2v2,double,0,IllegalArgumentException,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,normProduct,double,0,IllegalArgumentException,$ == 0
Rotation.java,getAxis,squaredSine,double,1,RET,$ == 0
Rotation.java,getAxis,q0,double,0,RET,$ < 0
Rotation.java,getAngle,q0,double,1,RET,$ < -0.1
Rotation.java,getAngle,q0,double,1,RET,$ > 0.1
Rotation.java,getAngle,q0,double,0,RET,$ < 0
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,orthogonalizeMatrix,fn1,double,0,RET,Math.abs($ - fn) <= threshold
Rotation.java,orthogonalizeMatrix,fn,double,0,RET,Math.abs(fn1 - $) <= threshold
ValueServer.java,resetReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,closeReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,DEF,$ == null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,DEF,$.getBinStats().size() == 0
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,$ == null
ValueServer.java,getNextReplay,str,String,0,DEF,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,(str = $.readLine()) == null
ValueServer.java,getNextReplay,str,String,0,DEF,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,(str = $.readLine()) == null
UncorrelatedRandomVectorGenerator.java,UncorrelatedRandomVectorGenerator,mean,double[],0,IllegalArgumentException,$.length != standardDeviation.length
EmpiricalDistributionImpl.java,load,sampleStats,SummaryStatistics,0,DEF,$.getN() == 0
EmpiricalDistributionImpl.java,getAdapter,in,null,1,RET,$ instanceof BufferedReader
EmpiricalDistributionImpl.java,getAdapter,in,null,1,RET,$ instanceof double[]
EmpiricalDistributionImpl.java,getNextValue,stats,SummaryStatistics,0,RET,$.getN() > 0
EmpiricalDistributionImpl.java,getNextValue,stats,SummaryStatistics,1,RET,$.getStandardDeviation() > 0
RandomDataImpl.java,nextHexString,len,int,0,IllegalArgumentException,$ <= 0
RandomDataImpl.java,nextHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextInt,lower,int,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,nextLong,lower,long,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,nextSecureHexString,len,int,0,IllegalArgumentException,$ <= 0
RandomDataImpl.java,nextSecureHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextSecureInt,lower,int,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,nextSecureLong,lower,long,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,nextPoisson,mean,double,0,IllegalArgumentException,$ <= 0
RandomDataImpl.java,nextPoisson,mean,double,1,RET,$ < pivot
RandomDataImpl.java,nextPoisson,r,double,1,DEF,$ >= p
RandomDataImpl.java,nextPoisson,u,double,1,DEF,$ <= c1
RandomDataImpl.java,nextPoisson,x,double,0,DEF,$ < -mu
RandomDataImpl.java,nextPoisson,c1,double,1,DEF,$ < u
RandomDataImpl.java,nextPoisson,u,double,1,DEF,$ <= c2
RandomDataImpl.java,nextPoisson,x,double,0,DEF,$ > delta
RandomDataImpl.java,nextPoisson,c2,double,1,DEF,$ < u
RandomDataImpl.java,nextPoisson,u,double,1,DEF,$ <= c3
RandomDataImpl.java,nextPoisson,c3,double,1,DEF,$ < u
RandomDataImpl.java,nextPoisson,u,double,1,DEF,$ <= c4
RandomDataImpl.java,nextPoisson,c4,double,0,DEF,$ < u
RandomDataImpl.java,nextGaussian,sigma,double,0,IllegalArgumentException,$ <= 0
RandomDataImpl.java,nextExponential,mean,double,0,IllegalArgumentException,$ < 0.0
RandomDataImpl.java,nextUniform,lower,double,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,getRan,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,getSecRan,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,nextPermutation,k,int,0,IllegalArgumentException,$ > n
RandomDataImpl.java,nextPermutation,k,int,0,IllegalArgumentException,$ == 0
RandomDataImpl.java,nextSample,k,int,0,IllegalArgumentException,$ > len
RandomDataImpl.java,nextSample,k,int,0,IllegalArgumentException,$ == 0
RandomDataImpl.java,shuffle,i,int,1,DEF,$ == 0
CorrelatedRandomVectorGenerator.java,CorrelatedRandomVectorGenerator,mean,double[],0,DimensionMismatchException,$.length != order
CorrelatedRandomVectorGenerator.java,decompose,swap,int[],0,DEF,$[rank] != rank
CorrelatedRandomVectorGenerator.java,decompose,rank,int,0,DEF,swap[$] != rank
CorrelatedRandomVectorGenerator.java,decompose,c,double[][],1,NotPositiveDefiniteMatrixException,$[ir][ir] < small
CorrelatedRandomVectorGenerator.java,decompose,ir,int,1,NotPositiveDefiniteMatrixException,c[$][$] < small
CorrelatedRandomVectorGenerator.java,decompose,rank,int,0,NotPositiveDefiniteMatrixException,$ == 0
CorrelatedRandomVectorGenerator.java,decompose,c,double[][],0,NotPositiveDefiniteMatrixException,$[index[i]][index[i]] < -small
CorrelatedRandomVectorGenerator.java,decompose,index,int[],0,NotPositiveDefiniteMatrixException,c[$[i]][$[i]] < -small
CorrelatedRandomVectorGenerator.java,decompose,i,int,0,NotPositiveDefiniteMatrixException,c[index[$]][index[$]] < -small
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
AbstractRandomGenerator.java,nextBytes,i,int,0,DEF,$ > 0
AbstractRandomGenerator.java,nextBytes,bytesOut,int,0,RET,$ == bytes.length
AbstractRandomGenerator.java,nextInt,n,int,0,IllegalArgumentException,$ <= 0
AbstractRandomGenerator.java,nextGaussian,s,double,0,DEF,$ != 0
BisectionSolver.java,solve,fm,double,1,DEF,$ * fmin > 0.0
BisectionSolver.java,solve,fmin,double,1,DEF,fm * $ > 0.0
BisectionSolver.java,solve,min,double,0,RET,Math.abs(max - $) <= absoluteAccuracy
BisectionSolver.java,solve,max,double,0,RET,Math.abs($ - min) <= absoluteAccuracy
SecantSolver.java,solve,y0,double,0,IllegalArgumentException,$ * y1 >= 0
SecantSolver.java,solve,y1,double,0,IllegalArgumentException,y0 * $ >= 0
SecantSolver.java,solve,y1,double,0,RET,Math.abs($) <= functionValueAccuracy
SecantSolver.java,solve,oldDelta,double,0,DEF,delta / $ > 1
SecantSolver.java,solve,delta,double,0,DEF,$ / oldDelta > 1
SecantSolver.java,solve,y1,double,0,DEF,$ > 0
SecantSolver.java,solve,y2,double,0,DEF,$ > 0
LaguerreSolver.java,LaguerreSolver,f,null,1,DEF,$ instanceof PolynomialFunction
LaguerreSolver.java,solve,min,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
LaguerreSolver.java,solve,max,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
LaguerreSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
LaguerreSolver.java,solve,f,null,0,DEF,$ instanceof PolynomialFunction
LaguerreSolver.java,solve,min,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
LaguerreSolver.java,solve,max,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
LaguerreSolver.java,solveAll,n,int,0,IllegalArgumentException,$ < 1
LaguerreSolver.java,solve,n,int,0,IllegalArgumentException,$ < 1
LaguerreSolver.java,solve,oldz,Complex,0,RET,(z.subtract($)).abs() <= tolerance
LaguerreSolver.java,solve,z,Complex,0,RET,($.subtract(oldz)).abs() <= tolerance
LaguerreSolver.java,solve,pv,Complex,0,RET,$.abs() <= functionValueAccuracy
NewtonSolver.java,solve,x0,double,0,RET,Math.abs(x1 - $) <= absoluteAccuracy
NewtonSolver.java,solve,x1,double,0,RET,Math.abs($ - x0) <= absoluteAccuracy
UnivariateRealSolverImpl.java,UnivariateRealSolverImpl,f,UnivariateRealFunction,0,DEF,$ == null
UnivariateRealSolverImpl.java,verifyInterval,lower,double,0,DEF,$ >= upper
UnivariateRealSolverUtils.java,bracket,function,UnivariateRealFunction,0,IllegalArgumentException,$ == null
UnivariateRealSolverUtils.java,bracket,maximumIterations,int,0,IllegalArgumentException,$ <= 0
UnivariateRealSolverUtils.java,bracket,initial,double,0,IllegalArgumentException,$ < lowerBound
UnivariateRealSolverUtils.java,bracket,initial,double,0,IllegalArgumentException,$ > upperBound
UnivariateRealSolverUtils.java,bracket,lowerBound,double,0,IllegalArgumentException,$ >= upperBound
UnivariateRealSolverUtils.java,bracket,fa,double,0,ConvergenceException,$ * fb >= 0.0
UnivariateRealSolverUtils.java,bracket,fb,double,0,ConvergenceException,fa * $ >= 0.0
UnivariateRealSolverUtils.java,setup,f,UnivariateRealFunction,0,IllegalArgumentException,$ == null
MullerSolver.java,solve,min,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
MullerSolver.java,solve,max,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
MullerSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
MullerSolver.java,solve,y0,double,0,RET,$ == 0.0
MullerSolver.java,solve,y2,double,0,RET,$ == 0.0
MullerSolver.java,solve,oldx,double,0,RET,Math.abs(x - $) <= tolerance
MullerSolver.java,solve,x,double,0,RET,Math.abs($ - oldx) <= tolerance
MullerSolver.java,solve,y,double,0,RET,Math.abs($) <= functionValueAccuracy
MullerSolver.java,solve,ym,double,1,DEF,MathUtils.sign(y0) + MathUtils.sign($) == 0.0
MullerSolver.java,solve,y0,double,1,DEF,MathUtils.sign($) + MathUtils.sign(ym) == 0.0
MullerSolver.java,solve2,y0,double,0,RET,$ == 0.0
MullerSolver.java,solve2,y1,double,0,RET,$ == 0.0
MullerSolver.java,solve2,delta,double,1,DEF,$ >= 0.0
MullerSolver.java,solve2,denominator,double,1,DEF,$ != 0
MullerSolver.java,solve2,oldx,double,0,RET,Math.abs(x - $) <= tolerance
MullerSolver.java,solve2,x,double,0,RET,Math.abs($ - oldx) <= tolerance
MullerSolver.java,solve2,y,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yInitial,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMin,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMin,double,0,RET,yInitial * $ < 0
BrentSolver.java,solve,yInitial,double,0,RET,$ * yMin < 0
BrentSolver.java,solve,yMax,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yInitial,double,0,RET,$ * yMax < 0
BrentSolver.java,solve,yMax,double,0,RET,yInitial * $ < 0
BrentSolver.java,solve,sign,double,1,DEF,$ > 0
BrentSolver.java,solve,yMin,double,1,DEF,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMax,double,1,DEF,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,sign,double,1,DEF,$ < 0
BrentSolver.java,solve,yMin,double,1,DEF,$ == 0.0
BrentSolver.java,solve,y1,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,dx,double,0,RET,Math.abs($) <= tolerance
BrentSolver.java,solve,oldDelta,double,1,DEF,Math.abs($) < tolerance
BrentSolver.java,solve,x0,double,1,DEF,$ == x2
BrentSolver.java,solve,p,double,1,DEF,$ > 0.0
BrentSolver.java,solve,delta,double,1,DEF,Math.abs($) > tolerance
BrentSolver.java,solve,dx,double,1,DEF,$ > 0.0
BrentSolver.java,solve,dx,double,0,DEF,$ <= 0.0
BrentSolver.java,solve,y1,double,0,DEF,$ > 0
BrentSolver.java,solve,y2,double,0,DEF,$ > 0
RiddersSolver.java,solve,min,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
RiddersSolver.java,solve,max,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
RiddersSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
RiddersSolver.java,solve,y1,double,0,RET,$ == 0.0
RiddersSolver.java,solve,y2,double,0,RET,$ == 0.0
RiddersSolver.java,solve,y3,double,0,RET,Math.abs($) <= functionValueAccuracy
RiddersSolver.java,solve,oldx,double,0,RET,Math.abs(x - $) <= tolerance
RiddersSolver.java,solve,x,double,0,RET,Math.abs($ - oldx) <= tolerance
RiddersSolver.java,solve,y,double,0,RET,Math.abs($) <= functionValueAccuracy
RiddersSolver.java,solve,correction,double,1,DEF,$ > 0.0
RiddersSolver.java,solve,y1,double,1,DEF,MathUtils.sign($) + MathUtils.sign(y) == 0.0
RiddersSolver.java,solve,y,double,1,DEF,MathUtils.sign(y1) + MathUtils.sign($) == 0.0
RiddersSolver.java,solve,y2,double,1,DEF,MathUtils.sign($) + MathUtils.sign(y) == 0.0
RiddersSolver.java,solve,y,double,1,DEF,MathUtils.sign(y2) + MathUtils.sign($) == 0.0
PolynomialFunctionLagrangeForm.java,evaluate,dist,double,0,DEF,$ < min_dist
PolynomialFunctionLagrangeForm.java,evaluate,divider,double,0,DuplicateSampleAbscissaException,$ == 0.0
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != j
PolynomialFunctionLagrangeForm.java,computeCoefficients,d,double,0,DEF,$ == 0.0
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != k
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,IllegalArgumentException,$.length < 2
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,y,double[],0,IllegalArgumentException,$.length < 2
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,IllegalArgumentException,$.length != y.length
PolynomialFunctionNewtonForm.java,verifyInputArray,a,double[],0,IllegalArgumentException,$.length < 1
PolynomialFunctionNewtonForm.java,verifyInputArray,c,double[],0,IllegalArgumentException,$.length < 1
PolynomialsUtils.java,buildPolynomial,degree,int,0,DEF,$ > maxDegree
PolynomialFunction.java,PolynomialFunction,c,double[],0,IllegalArgumentException,$.length < 1
PolynomialFunction.java,evaluate,n,int,0,IllegalArgumentException,$ < 1
PolynomialFunction.java,subtract,coefficients,double[],1,DEF,$.length < p.coefficients.length
PolynomialFunction.java,differentiate,n,int,0,IllegalArgumentException,$ < 1
PolynomialFunction.java,differentiate,n,int,0,RET,$ == 1
PolynomialFunction.java,toString,coefficients,double[],1,RET,$[0] == 0.0
PolynomialFunction.java,toString,coefficients,double[],0,RET,$.length == 1
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] != 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] != 0
PolynomialFunction.java,toString,s,StringBuffer,1,DEF,$.length() > 0
PolynomialFunction.java,toString,coefficients,double[],1,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,1,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,absAi,double,0,DEF,($ - 1) != 0
PolynomialFunction.java,toString,i,int,0,DEF,$ > 1
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,IllegalArgumentException,$.length < 2
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,IllegalArgumentException,$.length - 1 != polynomials.length
PolynomialSplineFunction.java,value,i,int,0,DEF,$ < 0
PolynomialSplineFunction.java,value,i,int,0,DEF,$ >= polynomials.length
DividedDifferenceInterpolator.java,computeDividedDifference,denominator,double,0,DuplicateSampleAbscissaException,$ == 0.0
SplineInterpolator.java,interpolate,x,double[],0,IllegalArgumentException,$.length != y.length
SplineInterpolator.java,interpolate,x,double[],0,IllegalArgumentException,$.length < 3
LegendreGaussIntegrator.java,integrate,i,int,0,RET,$ + 1 >= minimalIterationCount
LegendreGaussIntegrator.java,integrate,delta,double,0,RET,$ <= limit
TrapezoidIntegrator.java,stage,n,int,1,RET,$ == 0
TrapezoidIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
TrapezoidIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
TrapezoidIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
TrapezoidIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 64
UnivariateRealIntegratorImpl.java,UnivariateRealIntegratorImpl,f,UnivariateRealFunction,0,IllegalArgumentException,$ == null
UnivariateRealIntegratorImpl.java,verifyInterval,lower,double,0,DEF,$ >= upper
UnivariateRealIntegratorImpl.java,verifyIterationCount,minimalIterationCount,int,0,DEF,$ <= 0
UnivariateRealIntegratorImpl.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ <= minimalIterationCount
SimpsonIntegrator.java,integrate,minimalIterationCount,int,0,RET,$ == 1
SimpsonIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
SimpsonIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
SimpsonIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
SimpsonIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 64
RombergIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
RombergIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
RombergIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
RombergIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 32
ComplexFormat.java,format,im,double,1,DEF,$ < 0.0
ComplexFormat.java,format,im,double,0,DEF,$ > 0.0
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Complex
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Number
ComplexFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
ComplexFormat.java,parse,re,Number,0,RET,$ == null
ComplexFormat.java,parse,im,Number,0,RET,$ == null
ComplexFormat.java,setImaginaryCharacter,imaginaryCharacter,String,0,IllegalArgumentException,$ == null
ComplexFormat.java,setImaginaryCharacter,imaginaryCharacter,String,0,IllegalArgumentException,$.length() == 0
ComplexFormat.java,setImaginaryFormat,imaginaryFormat,NumberFormat,0,IllegalArgumentException,$ == null
ComplexFormat.java,setRealFormat,realFormat,NumberFormat,0,IllegalArgumentException,$ == null
Complex.java,abs,imaginary,double,0,RET,$ == 0.0
Complex.java,abs,real,double,0,RET,$ == 0.0
Complex.java,divide,c,double,0,RET,$ == 0.0
Complex.java,divide,d,double,0,RET,$ == 0.0
Complex.java,divide,d,double,0,RET,$ == 0.0
Complex.java,divide,c,double,0,RET,$ == 0.0
Complex.java,equals,other,Object,1,DEF,$ == null
Complex.java,pow,x,Complex,0,NullPointerException,$ == null
Complex.java,sqrt,real,double,0,RET,$ == 0.0
Complex.java,sqrt,imaginary,double,0,RET,$ == 0.0
Complex.java,sqrt,real,double,1,RET,$ >= 0.0
Complex.java,nthRoot,n,int,0,DEF,$ <= 0
ComplexUtils.java,polar2Complex,r,double,0,IllegalArgumentException,$ < 0
DescriptiveStatistics.java,addValue,windowSize,int,1,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,IllegalArgumentException,$ < 1
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,IllegalArgumentException,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,getPercentile,percentileImpl,null,1,DEF,$ instanceof Percentile
AbstractStorelessUnivariateStatistic.java,evaluate,values,double[],0,IllegalArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,incrementAll,values,double[],0,IllegalArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,equals,object,Object,0,RET,$ instanceof AbstractStorelessUnivariateStatistic == false
AbstractStorelessUnivariateStatistic.java,equals,object,null,0,RET,$ instanceof AbstractStorelessUnivariateStatistic
StatisticalSummaryValues.java,equals,object,Object,0,RET,$ instanceof StatisticalSummaryValues == false
StatisticalSummaryValues.java,equals,object,null,0,RET,$ instanceof StatisticalSummaryValues
FirstMoment.java,increment,n,long,0,DEF,$ == 0
GeometricMean.java,getResult,sumOfLogs,StorelessUnivariateStatistic,1,RET,$.getN() > 0
ThirdMoment.java,increment,n,long,0,DEF,$ < 1
Kurtosis.java,getResult,moment,FourthMoment,0,DEF,$.getN() > 3
Kurtosis.java,getResult,moment,FirstMoment,1,DEF,$.n <= 3
Kurtosis.java,getResult,variance,double,1,DEF,$ < 10E-20
Kurtosis.java,evaluate,length,int,0,DEF,$ > 3
Skewness.java,getResult,moment,FirstMoment,0,RET,$.n < 3
Skewness.java,getResult,variance,double,1,RET,$ < 10E-20
Skewness.java,evaluate,length,int,0,DEF,$ > 2
FourthMoment.java,increment,n,long,0,DEF,$ < 1
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 0
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 1
Variance.java,evaluate,values,double[],0,IllegalArgumentException,$ == null
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
VectorialCovariance.java,increment,v,double[],0,DimensionMismatchException,$.length != sums.length
VectorialCovariance.java,getResult,n,long,0,DEF,$ > 1
SecondMoment.java,increment,n,long,0,DEF,$ < 1
VectorialMean.java,increment,v,double[],0,DimensionMismatchException,$.length != means.length
Percentile.java,evaluate,p,double,0,IllegalArgumentException,$ > 100
Percentile.java,evaluate,p,double,0,IllegalArgumentException,$ <= 0
Percentile.java,evaluate,length,int,0,RET,$ == 0
Percentile.java,evaluate,length,int,0,RET,$ == 1
Percentile.java,evaluate,pos,double,0,RET,$ < 1
Percentile.java,evaluate,pos,double,0,RET,$ >= n
Percentile.java,setQuantile,p,double,0,IllegalArgumentException,$ <= 0
Percentile.java,setQuantile,p,double,0,IllegalArgumentException,$ > 100
Max.java,increment,d,double,0,DEF,$ > value
Min.java,increment,d,double,0,DEF,$ < value
AbstractUnivariateStatistic.java,test,values,double[],0,IllegalArgumentException,$ == null
AbstractUnivariateStatistic.java,test,begin,int,0,IllegalArgumentException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,IllegalArgumentException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,IllegalArgumentException,begin + $ > values.length
AbstractUnivariateStatistic.java,test,begin,int,0,IllegalArgumentException,$ + length > values.length
AbstractUnivariateStatistic.java,test,length,int,0,RET,$ == 0
MultivariateSummaryStatistics.java,append,i,int,0,DEF,$ > 0
MultivariateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof MultivariateSummaryStatistics == false
MultivariateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof MultivariateSummaryStatistics
MultivariateSummaryStatistics.java,checkEmpty,n,long,0,DEF,$ > 0
MultivariateSummaryStatistics.java,checkDimension,dimension,int,0,DimensionMismatchException,$ != k
SummaryStatistics.java,addValue,meanImpl,null,0,DEF,$ instanceof Mean
SummaryStatistics.java,addValue,varianceImpl,null,0,DEF,$ instanceof Variance
SummaryStatistics.java,addValue,geoMeanImpl,null,0,DEF,$ instanceof GeometricMean
SummaryStatistics.java,getMean,mean,Mean,1,RET,$ == meanImpl
SummaryStatistics.java,getVariance,varianceImpl,StorelessUnivariateStatistic,1,RET,$ == variance
SummaryStatistics.java,clear,meanImpl,StorelessUnivariateStatistic,0,DEF,$ != mean
SummaryStatistics.java,clear,varianceImpl,StorelessUnivariateStatistic,0,DEF,$ != variance
SummaryStatistics.java,equals,object,Object,0,RET,$ instanceof SummaryStatistics == false
SummaryStatistics.java,equals,object,null,0,RET,$ instanceof SummaryStatistics
SummaryStatistics.java,checkEmpty,n,long,0,DEF,$ > 0
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.geoMean == source.geoMeanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.max == source.maxImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.mean == source.meanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.min == source.minImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sum == source.sumImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.variance == source.varianceImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumLog == source.sumLogImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumsq == source.sumsqImpl
Product.java,increment,n,long,1,DEF,$ == 0
SumOfLogs.java,getResult,n,int,1,RET,$ > 0
SumOfSquares.java,increment,n,long,1,DEF,$ == 0
Sum.java,increment,n,long,1,DEF,$ == 0
TTestImpl.java,pairedT,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,pairedT,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,pairedT,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,pairedT,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,pairedTTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,pairedTTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,t,observed,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,t,observed,double[],0,IllegalArgumentException,$.length < 2
TTestImpl.java,t,sampleStats,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,t,sampleStats,StatisticalSummary,0,IllegalArgumentException,$.getN() < 2
TTestImpl.java,homoscedasticT,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticT,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticT,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,homoscedasticT,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,t,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,t,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,t,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,t,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,t,sampleStats1,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,t,sampleStats2,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,t,sampleStats2,StatisticalSummary,0,IllegalArgumentException,Math.min(sampleStats1.getN(), $.getN()) < 2
TTestImpl.java,t,sampleStats1,StatisticalSummary,0,IllegalArgumentException,Math.min($.getN(), sampleStats2.getN()) < 2
TTestImpl.java,homoscedasticT,sampleStats1,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticT,sampleStats2,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticT,sampleStats2,StatisticalSummary,0,IllegalArgumentException,Math.min(sampleStats1.getN(), $.getN()) < 2
TTestImpl.java,homoscedasticT,sampleStats1,StatisticalSummary,0,IllegalArgumentException,Math.min($.getN(), sampleStats2.getN()) < 2
TTestImpl.java,tTest,sample,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sample,double[],0,IllegalArgumentException,$.length < 2
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,tTest,sampleStats,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sampleStats,StatisticalSummary,0,IllegalArgumentException,$.getN() < 2
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,tTest,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,tTest,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,homoscedasticTTest,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticTTest,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticTTest,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,homoscedasticTTest,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,homoscedasticTTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,homoscedasticTTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,tTest,sampleStats1,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sampleStats2,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sampleStats2,StatisticalSummary,0,IllegalArgumentException,Math.min(sampleStats1.getN(), $.getN()) < 2
TTestImpl.java,tTest,sampleStats1,StatisticalSummary,0,IllegalArgumentException,Math.min($.getN(), sampleStats2.getN()) < 2
TTestImpl.java,homoscedasticTTest,sampleStats1,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticTTest,sampleStats2,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticTTest,sampleStats2,StatisticalSummary,0,IllegalArgumentException,Math.min(sampleStats1.getN(), $.getN()) < 2
TTestImpl.java,homoscedasticTTest,sampleStats1,StatisticalSummary,0,IllegalArgumentException,Math.min($.getN(), sampleStats2.getN()) < 2
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ > 0.5
OneWayAnovaImpl.java,anovaTest,alpha,double,0,IllegalArgumentException,$ <= 0
OneWayAnovaImpl.java,anovaTest,alpha,double,0,IllegalArgumentException,$ > 0.5
OneWayAnovaImpl.java,anovaStats,categoryData,Collection<double[]>,0,IllegalArgumentException,$.size() < 2
OneWayAnovaImpl.java,anovaStats,array,double[],0,IllegalArgumentException,$.length <= 1
ChiSquareTestImpl.java,chiSquare,expected,double[],0,IllegalArgumentException,$.length < 2
ChiSquareTestImpl.java,chiSquare,expected,double[],0,IllegalArgumentException,$.length != observed.length
ChiSquareTestImpl.java,chiSquare,sumObserved,double,0,DEF,Math.abs(sumExpected - $) > 10E-6
ChiSquareTestImpl.java,chiSquare,sumExpected,double,0,DEF,Math.abs($ - sumObserved) > 10E-6
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,IllegalArgumentException,$ <= 0
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,IllegalArgumentException,$ > 0.5
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,IllegalArgumentException,$ <= 0
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,IllegalArgumentException,$ > 0.5
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],0,IllegalArgumentException,$.length < 2
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],0,IllegalArgumentException,$.length != observed2.length
ChiSquareTestImpl.java,chiSquareDataSetsComparison,countSum1,long,0,IllegalArgumentException,$ * countSum2 == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,countSum2,long,0,IllegalArgumentException,countSum1 * $ == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,i,int,1,IllegalArgumentException,observed1[$] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],1,IllegalArgumentException,$[i] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed2,long[],1,IllegalArgumentException,$[i] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,i,int,1,IllegalArgumentException,observed2[$] == 0
ChiSquareTestImpl.java,chiSquareTestDataSetsComparison,alpha,double,0,IllegalArgumentException,$ <= 0
ChiSquareTestImpl.java,chiSquareTestDataSetsComparison,alpha,double,0,IllegalArgumentException,$ > 0.5
ChiSquareTestImpl.java,checkArray,in,long[][],0,IllegalArgumentException,$.length < 2
ChiSquareTestImpl.java,checkArray,in,long[][],0,IllegalArgumentException,$[0].length < 2
ChiSquareTestImpl.java,isPositive,in,double[],0,RET,$[i] <= 0
ChiSquareTestImpl.java,isPositive,i,int,0,RET,in[$] <= 0
ChiSquareTestImpl.java,isNonNegative,in,long[],0,RET,$[i] < 0
ChiSquareTestImpl.java,isNonNegative,i,int,0,RET,in[$] < 0
ChiSquareTestImpl.java,isNonNegative,in,long[][],0,RET,$[i][j] < 0
ChiSquareTestImpl.java,isNonNegative,i,int,0,RET,in[$][j] < 0
ChiSquareTestImpl.java,isNonNegative,j,int,0,RET,in[i][$] < 0
StatUtils.java,sumDifference,n,int,0,IllegalArgumentException,$ != sample2.length
StatUtils.java,sumDifference,n,int,0,IllegalArgumentException,$ < 1
StatUtils.java,varianceDifference,n,int,0,IllegalArgumentException,$ < 2
StatUtils.java,varianceDifference,n,int,0,IllegalArgumentException,$ != sample2.length
PearsonsCorrelation.java,PearsonsCorrelation,covarianceMatrix,RealMatrix,0,DEF,$ == null
PearsonsCorrelation.java,getCorrelationPValues,i,int,1,DEF,$ == j
PearsonsCorrelation.java,correlation,xArray,double[],1,RET,$.length == yArray.length
PearsonsCorrelation.java,correlation,xArray,double[],1,RET,$.length > 1
PearsonsCorrelation.java,checkSufficientData,nRows,int,0,DEF,$ < 2
PearsonsCorrelation.java,checkSufficientData,nCols,int,0,DEF,$ < 2
Covariance.java,covariance,length,int,1,DEF,$ == yArray.length
Covariance.java,covariance,length,int,1,DEF,$ > 1
Covariance.java,checkSufficientData,nRows,int,0,DEF,$ < 2
Covariance.java,checkSufficientData,nCols,int,0,DEF,$ < 2
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ == j
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ < p
OLSMultipleLinearRegression.java,solveUpperTriangular,constants,RealMatrix,0,IllegalArgumentException,$.getColumnDimension() != 1
OLSMultipleLinearRegression.java,isUpperTriangular,r,int,0,RET,Math.abs(m.getEntry($, c)) > epsilon
OLSMultipleLinearRegression.java,isUpperTriangular,c,int,0,RET,Math.abs(m.getEntry(r, $)) > epsilon
OLSMultipleLinearRegression.java,isUpperTriangular,m,RealMatrix,0,RET,Math.abs($.getEntry(r, c)) > epsilon
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,IllegalArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,y,double[],0,IllegalArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,IllegalArgumentException,$.length != y.length
AbstractMultipleLinearRegression.java,validateCovarianceData,covariance,double[][],0,IllegalArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateCovarianceData,x,double[][],0,IllegalArgumentException,$.length != covariance.length
AbstractMultipleLinearRegression.java,validateCovarianceData,covariance,double[][],0,IllegalArgumentException,$.length > 0
SimpleRegression.java,addData,n,long,1,DEF,$ == 0
SimpleRegression.java,addData,n,long,0,DEF,$ > 2
SimpleRegression.java,removeData,n,long,0,DEF,$ > 0
SimpleRegression.java,removeData,n,long,0,DEF,$ > 2
SimpleRegression.java,getSlope,n,long,0,RET,$ < 2
SimpleRegression.java,getTotalSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getXSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getMeanSquareError,n,long,0,RET,$ < 3
SimpleRegression.java,getR,b1,double,0,DEF,$ < 0
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,IllegalArgumentException,$ >= 1
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,IllegalArgumentException,$ <= 0
SimpleRegression.java,setDistribution,n,long,0,DEF,$ > 2
GLSMultipleLinearRegression.java,getOmegaInverse,OmegaInverse,RealMatrix,0,DEF,$ == null
Frequency.java,addValue,v,null,0,DEF,$ instanceof Integer
Frequency.java,addValue,count,Long,1,DEF,$ == null
Frequency.java,getCount,v,null,0,RET,$ instanceof Integer
Frequency.java,getCount,count,Long,0,DEF,$ != null
Frequency.java,getPct,sumFreq,long,0,RET,$ == 0
Frequency.java,getCumFreq,v,null,0,RET,$ instanceof Integer
Frequency.java,getCumFreq,c,Comparator,0,DEF,$ == null
Frequency.java,getCumFreq,value,Long,0,DEF,$ != null
Frequency.java,getCumFreq,c,Comparator,0,RET,$.compare(v, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,v,Object,0,RET,c.compare($, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,freqTable,TreeMap,0,RET,c.compare(v, $.firstKey()) < 0
Frequency.java,getCumFreq,c,Comparator,0,RET,$.compare(v, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,v,Object,0,RET,c.compare($, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,freqTable,TreeMap,0,RET,c.compare(v, $.lastKey()) >= 0
Frequency.java,getCumFreq,c,Comparator,1,DEF,$.compare(v, nextValue) > 0
Frequency.java,getCumFreq,v,Object,1,DEF,c.compare($, nextValue) > 0
Frequency.java,getCumFreq,nextValue,Object,1,DEF,c.compare(v, $) > 0
Frequency.java,getCumPct,sumFreq,long,0,RET,$ == 0
FDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
FDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
FDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
FDistributionImpl.java,getInitialDomain,d,double,0,DEF,$ > 2.0
FDistributionImpl.java,setNumeratorDegreesOfFreedom,degreesOfFreedom,double,0,IllegalArgumentException,$ <= 0.0
FDistributionImpl.java,setDenominatorDegreesOfFreedom,degreesOfFreedom,double,0,IllegalArgumentException,$ <= 0.0
PoissonDistributionImpl.java,setMean,p,double,0,IllegalArgumentException,$ <= 0
PoissonDistributionImpl.java,probability,x,int,0,RET,$ < 0
PoissonDistributionImpl.java,probability,x,int,0,RET,$ == Integer.MAX_VALUE
PoissonDistributionImpl.java,cumulativeProbability,x,int,0,RET,$ < 0
PoissonDistributionImpl.java,cumulativeProbability,x,int,0,RET,$ == Integer.MAX_VALUE
HypergeometricDistributionImpl.java,HypergeometricDistributionImpl,numberOfSuccesses,int,0,IllegalArgumentException,$ > populationSize
HypergeometricDistributionImpl.java,HypergeometricDistributionImpl,sampleSize,int,0,IllegalArgumentException,$ > populationSize
HypergeometricDistributionImpl.java,setNumberOfSuccesses,num,int,0,IllegalArgumentException,$ < 0
HypergeometricDistributionImpl.java,setPopulationSize,size,int,0,IllegalArgumentException,$ <= 0
HypergeometricDistributionImpl.java,setSampleSize,size,int,0,IllegalArgumentException,$ < 0
GammaDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
GammaDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
GammaDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
GammaDistributionImpl.java,setAlpha,alpha,double,0,IllegalArgumentException,$ <= 0.0
GammaDistributionImpl.java,setBeta,beta,double,0,IllegalArgumentException,$ <= 0.0
GammaDistributionImpl.java,density,x,Double,0,RET,$ < 0
GammaDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
GammaDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
TDistributionImpl.java,setDegreesOfFreedom,degreesOfFreedom,double,0,IllegalArgumentException,$ <= 0.0
TDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ == 0.0
TDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ < 0.0
TDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
TDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
BinomialDistributionImpl.java,setNumberOfTrials,trials,int,0,IllegalArgumentException,$ < 0
BinomialDistributionImpl.java,setProbabilityOfSuccess,p,double,0,IllegalArgumentException,$ < 0.0
BinomialDistributionImpl.java,setProbabilityOfSuccess,p,double,0,IllegalArgumentException,$ > 1.0
BinomialDistributionImpl.java,cumulativeProbability,x,int,1,DEF,$ < 0
BinomialDistributionImpl.java,probability,x,int,1,DEF,$ < 0
BinomialDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
BinomialDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
ExponentialDistributionImpl.java,setMean,mean,double,0,IllegalArgumentException,$ <= 0.0
ExponentialDistributionImpl.java,density,x,Double,0,RET,$ < 0
ExponentialDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ < 0.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ > 1.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1.0
ExponentialDistributionImpl.java,getDomainUpperBound,p,double,1,RET,$ < .5
ExponentialDistributionImpl.java,getInitialDomain,p,double,1,RET,$ < .5
ZipfDistributionImpl.java,setNumberOfElements,n,int,0,DEF,$ <= 0
ZipfDistributionImpl.java,setExponent,s,double,0,DEF,$ <= 0.0
ZipfDistributionImpl.java,probability,x,int,0,RET,$ <= 0
ZipfDistributionImpl.java,cumulativeProbability,x,int,1,RET,$ <= 0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ < 0.0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ > 1.0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
CauchyDistributionImpl.java,setScale,s,double,0,IllegalArgumentException,$ <= 0.0
CauchyDistributionImpl.java,getDomainLowerBound,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ > .5
NormalDistributionImpl.java,setStandardDeviation,sd,double,0,IllegalArgumentException,$ <= 0.0
NormalDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
NormalDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
NormalDistributionImpl.java,getDomainLowerBound,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ > .5
PascalDistributionImpl.java,setNumberOfSuccesses,successes,int,0,IllegalArgumentException,$ < 0
PascalDistributionImpl.java,setProbabilityOfSuccess,p,double,0,IllegalArgumentException,$ < 0.0
PascalDistributionImpl.java,setProbabilityOfSuccess,p,double,0,IllegalArgumentException,$ > 1.0
PascalDistributionImpl.java,cumulativeProbability,x,int,1,DEF,$ < 0
PascalDistributionImpl.java,probability,x,int,1,DEF,$ < 0
PascalDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
PascalDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
AbstractDistribution.java,cumulativeProbability,x0,double,0,IllegalArgumentException,$ > x1
AbstractIntegerDistribution.java,cumulativeProbability,x0,double,0,IllegalArgumentException,$ > x1
AbstractIntegerDistribution.java,cumulativeProbability,x0,double,1,RET,Math.floor($) < x0
AbstractIntegerDistribution.java,probability,fl,double,1,RET,$ == x
AbstractIntegerDistribution.java,cumulativeProbability,x0,int,0,IllegalArgumentException,$ > x1
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,IllegalArgumentException,$ < 0.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,IllegalArgumentException,$ > 1.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,pm,double,1,DEF,$ > p
AbstractIntegerDistribution.java,inverseCumulativeProbability,xm,int,1,DEF,$ == x1
AbstractIntegerDistribution.java,inverseCumulativeProbability,xm,int,1,DEF,$ == x0
ChiSquaredDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
ChiSquaredDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
ChiSquaredDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
ChiSquaredDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
AbstractContinuousDistribution.java,inverseCumulativeProbability,p,double,0,IllegalArgumentException,$ < 0.0
AbstractContinuousDistribution.java,inverseCumulativeProbability,p,double,0,IllegalArgumentException,$ > 1.0
AbstractContinuousDistribution.java,inverseCumulativeProbability,rootFindingFunction,UnivariateRealFunction,0,RET,Math.abs($.value(lowerBound)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,lowerBound,double,0,RET,Math.abs(rootFindingFunction.value($)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,upperBound,double,0,RET,Math.abs(rootFindingFunction.value($)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,rootFindingFunction,UnivariateRealFunction,0,RET,Math.abs($.value(upperBound)) < 1E-6
BetaDistributionImpl.java,density,x,Double,1,RET,$ < 0
BetaDistributionImpl.java,density,x,Double,1,RET,$ > 1
BetaDistributionImpl.java,density,x,Double,1,MathException:RET,$ == 0
BetaDistributionImpl.java,density,alpha,double,0,MathException,$ < 1
BetaDistributionImpl.java,density,x,Double,1,MathException:RET,$ == 1
BetaDistributionImpl.java,density,beta,double,0,MathException,$ < 1
BetaDistributionImpl.java,inverseCumulativeProbability,p,double,1,RET,$ == 0
BetaDistributionImpl.java,inverseCumulativeProbability,p,double,1,RET,$ == 1
BetaDistributionImpl.java,cumulativeProbability,x,double,1,RET,$ <= 0
BetaDistributionImpl.java,cumulativeProbability,x,double,1,RET,$ >= 1
WeibullDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ < 0.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ > 1.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
WeibullDistributionImpl.java,setShape,alpha,double,0,IllegalArgumentException,$ <= 0.0
WeibullDistributionImpl.java,setScale,beta,double,0,IllegalArgumentException,$ <= 0.0
FastFourierTransformer.java,fft,f,double[],0,RET,$.length == 1
FastFourierTransformer.java,fft,N,int,0,RET,$ == 1
FastFourierTransformer.java,fft,N,int,0,RET,$ == 2
FastFourierTransformer.java,sample,n,int,0,DEF,$ <= 0
FastFourierTransformer.java,verifyInterval,lower,double,0,DEF,$ >= upper
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == dimensionSize.length
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == d
FastFourierTransformer.java,get,vector,int[],0,RET,$ == null
FastFourierTransformer.java,get,dimensionSize,int[],0,DEF,$.length > 0
FastFourierTransformer.java,get,vector,int[],0,DEF,$.length != dimensionSize.length
FastFourierTransformer.java,set,vector,int[],0,RET,$ == null
FastFourierTransformer.java,set,dimensionSize,int[],0,DEF,$.length > 0
FastFourierTransformer.java,set,vector,int[],0,DEF,$.length != dimensionSize.length
FastFourierTransformer.java,isForward,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,computeOmega,n,int,0,DEF,$ == 0
FastFourierTransformer.java,computeOmega,absN,int,0,RET,$ == omegaCount
FastFourierTransformer.java,getOmegaReal,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,getOmegaReal,k,int,0,DEF,$ < 0
FastFourierTransformer.java,getOmegaReal,k,int,0,DEF,$ >= omegaCount
FastFourierTransformer.java,getOmegaImaginary,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,getOmegaImaginary,k,int,0,DEF,$ < 0
FastFourierTransformer.java,getOmegaImaginary,k,int,0,DEF,$ >= omegaCount
FastCosineTransformer.java,fct,N,int,0,RET,$ == 1
FastSineTransformer.java,fst,f,double[],0,DEF,$[0] != 0.0
FastSineTransformer.java,fst,N,int,0,RET,$ == 1
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,source.substring($, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,endIndex,int,0,DEF,source.substring(startIndex, $).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,source,String,0,DEF,$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,sb,StringBuffer,0,DEF,source.substring(startIndex, endIndex).compareTo($.toString()) == 0
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,$ == endIndex
CompositeFormat.java,parseNumber,number,Number,0,DEF,$ != null
CompositeFormat.java,parseFixedstring,startIndex,int,0,RET,source.substring($, endIndex).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,endIndex,int,0,RET,source.substring(startIndex, $).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,expected,String,0,RET,source.substring(startIndex, endIndex).compareTo($) != 0
CompositeFormat.java,parseFixedstring,source,String,0,RET,$.substring(startIndex, endIndex).compareTo(expected) != 0
ResizableDoubleArray.java,addElement,startIndex,int,0,DEF,($ + numElements) > internalArray.length
ResizableDoubleArray.java,addElement,numElements,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,addElementRolling,startIndex,int,0,DEF,($ + (numElements + 1)) > internalArray.length
ResizableDoubleArray.java,addElementRolling,numElements,int,0,DEF,(startIndex + ($ + 1)) > internalArray.length
ResizableDoubleArray.java,substituteMostRecentElement,numElements,int,0,DEF,$ < 1
ResizableDoubleArray.java,checkContractExpand,contractionCritera,float,0,DEF,$ < expansionFactor
ResizableDoubleArray.java,checkContractExpand,contractionCriteria,float,0,DEF,$ <= 1.0
ResizableDoubleArray.java,checkContractExpand,expansionFactor,float,0,DEF,$ <= 1.0
ResizableDoubleArray.java,discardExtremeElements,i,int,1,DEF,$ > numElements
ResizableDoubleArray.java,discardExtremeElements,i,int,1,DEF,$ < 0
ResizableDoubleArray.java,expand,expansionMode,int,1,DEF,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,getElement,index,int,1,DEF,$ >= numElements
ResizableDoubleArray.java,getElement,index,int,1,RET,$ >= 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ < 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ + 1 > numElements
ResizableDoubleArray.java,setElement,startIndex,int,0,DEF,($ + index) >= internalArray.length
ResizableDoubleArray.java,setElement,index,int,0,DEF,(startIndex + $) >= internalArray.length
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,DEF,$ != MULTIPLICATIVE_MODE
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,DEF,$ != ADDITIVE_MODE
ResizableDoubleArray.java,setInitialCapacity,initialCapacity,int,1,DEF,$ > 0
ResizableDoubleArray.java,setNumElements,i,int,0,DEF,$ < 0
ResizableDoubleArray.java,setNumElements,startIndex,int,0,DEF,($ + i) > internalArray.length
ResizableDoubleArray.java,setNumElements,i,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,shouldContract,expansionMode,int,1,RET,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,equals,object,Object,0,RET,$ instanceof ResizableDoubleArray == false
ResizableDoubleArray.java,equals,object,null,0,RET,$ instanceof ResizableDoubleArray
ContinuedFraction.java,evaluate,a,double,1,DEF,$ != 0.0
ContinuedFraction.java,evaluate,b,double,1,DEF,$ != 0
ContinuedFraction.java,evaluate,n,int,0,MaxIterationsExceededException,$ >= maxIterations
MathUtils.java,addAndCheck,s,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,addAndCheck,s,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,addAndCheck,a,long,1,DEF,$ > b
MathUtils.java,addAndCheck,a,long,1,ArithmeticException,$ < 0
MathUtils.java,addAndCheck,b,long,1,ArithmeticException,$ < 0
MathUtils.java,addAndCheck,b,long,1,DEF,Long.MIN_VALUE - $ <= a
MathUtils.java,binomialCoefficient,n,int,0,IllegalArgumentException,$ < k
MathUtils.java,binomialCoefficient,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,binomialCoefficient,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficient,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficient,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 61
MathUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 66
MathUtils.java,binomialCoefficientDouble,n,int,0,IllegalArgumentException,$ < k
MathUtils.java,binomialCoefficientDouble,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,binomialCoefficientDouble,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficientDouble,n,int,0,RET,$ < 67
MathUtils.java,binomialCoefficientLog,n,int,0,IllegalArgumentException,$ < k
MathUtils.java,binomialCoefficientLog,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 67
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 1030
MathUtils.java,compareTo,x,double,0,RET,$ < y
MathUtils.java,equals,x,double[],0,RET,$ == null
MathUtils.java,equals,y,double[],0,RET,$ == null
MathUtils.java,equals,x,double[],0,RET,$.length != y.length
MathUtils.java,factorial,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,factorial,n,int,0,ArithmeticException,$ > 20
MathUtils.java,factorialDouble,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,factorialDouble,n,int,0,RET,$ < 21
MathUtils.java,factorialLog,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,factorialLog,n,int,0,RET,$ < 21
MathUtils.java,gcd,u,int,0,RET,$ == 0
MathUtils.java,gcd,v,int,0,RET,$ == 0
MathUtils.java,gcd,u,int,0,DEF,$ == Integer.MIN_VALUE
MathUtils.java,gcd,v,int,0,DEF,$ == Integer.MIN_VALUE
MathUtils.java,gcd,u,int,0,DEF,$ > 0
MathUtils.java,gcd,v,int,0,DEF,$ > 0
MathUtils.java,gcd,k,int,0,DEF,$ == 31
MathUtils.java,gcd,t,int,1,DEF,$ > 0
MathUtils.java,lcm,a,int,0,RET,$==0
MathUtils.java,lcm,b,int,0,RET,$==0
MathUtils.java,lcm,lcm,int,0,ArithmeticException,$ == Integer.MIN_VALUE
MathUtils.java,mulAndCheck,m,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,mulAndCheck,m,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,mulAndCheck,a,long,1,DEF,$ > b
MathUtils.java,mulAndCheck,a,long,1,ArithmeticException,$ < 0
MathUtils.java,mulAndCheck,b,long,1,ArithmeticException,$ < 0
MathUtils.java,mulAndCheck,b,long,1,ArithmeticException,$ > 0
MathUtils.java,mulAndCheck,b,long,1,DEF,Long.MIN_VALUE / $ <= a
MathUtils.java,mulAndCheck,a,long,1,ArithmeticException,$ > 0
MathUtils.java,nextAfter,d,double,0,RET,$ == 0
MathUtils.java,nextAfter,d,double,1,RET,$ * (direction - $) >= 0
MathUtils.java,nextAfter,direction,double,1,RET,d * ($ - d) >= 0
MathUtils.java,nextAfter,mantissa,long,1,RET,$ == 0x000fffffffffffffL
MathUtils.java,nextAfter,mantissa,long,1,RET,$ == 0L
MathUtils.java,scalb,d,double,0,RET,$ == 0
MathUtils.java,roundUnscaled,sign,double,1,DEF,$ == -1
MathUtils.java,roundUnscaled,sign,double,1,DEF,$ == -1
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ < 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ >= 0.5
MathUtils.java,subAndCheck,s,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,subAndCheck,s,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,subAndCheck,b,long,1,ArithmeticException,$ == Long.MIN_VALUE
MathUtils.java,subAndCheck,a,long,1,DEF,$ < 0
MathUtils.java,pow,e,int,0,DEF,$ < 0
MathUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,long,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,int,0,DEF,$ < 0
MathUtils.java,pow,e,int,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,long,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,int,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,$ < 0
MathUtils.java,pow,e,long,0,DEF,($ & 0x1) != 0
MathUtils.java,pow,e,BigInteger,0,DEF,$.compareTo(BigInteger.ZERO) < 0
DefaultTransformer.java,transform,o,Object,0,MathException,$ == null
DefaultTransformer.java,transform,o,null,0,RET,$ instanceof Number
TransformerMap.java,transform,o,null,1,DEF,$ instanceof Number
TransformerMap.java,transform,o,null,1,DEF,$ instanceof String
TransformerMap.java,transform,trans,NumberTransformer,0,DEF,$ != null
OpenIntToDoubleHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToDoubleHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToDoubleHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToDoubleHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToDoubleHashMap.java,key,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,key,current,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,value,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,value,current,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,advance,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,advance,current,int,0,DEF,$ < 0
BigFraction.java,getReducedFraction,numerator,int,0,RET,$ == 0
BigFraction.java,BigFraction,num,BigInteger,0,DEF,$ == null
BigFraction.java,BigFraction,den,BigInteger,0,DEF,$ == null
BigFraction.java,BigFraction,gcd,BigInteger,0,DEF,BigInteger.ONE.compareTo($) < 0
BigFraction.java,BigFraction,den,BigInteger,0,DEF,BigInteger.ZERO.compareTo($) > 0
BigFraction.java,BigFraction,exponent,long,0,DEF,$ != 0
BigFraction.java,BigFraction,sign,long,0,DEF,$ != 0
BigFraction.java,BigFraction,k,int,1,DEF,$ < 0
BigFraction.java,BigFraction,a0,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,value,double,0,RET,Math.abs(a0 - $) < epsilon
BigFraction.java,BigFraction,a0,long,0,RET,Math.abs($ - value) < epsilon
BigFraction.java,BigFraction,p2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,q2,long,0,FractionConversionException,$ > overflow
BigFraction.java,BigFraction,n,int,1,DEF,$ < maxIterations
BigFraction.java,BigFraction,convergent,double,1,DEF,Math.abs($ - value) > epsilon
BigFraction.java,BigFraction,value,double,1,DEF,Math.abs(convergent - $) > epsilon
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,BigFraction,n,int,0,FractionConversionException,$ >= maxIterations
BigFraction.java,BigFraction,q2,long,1,DEF,$ < maxDenominator
BigFraction.java,equals,other,null,0,DEF,$ instanceof BigFraction
BigFraction.java,multiply,fraction,BigFraction,0,DEF,$.getNumeratorAsInt() != 0
BigFraction.java,pow,exponent,int,0,RET,$ < 0
BigFraction.java,pow,exponent,long,0,RET,$ < 0
BigFraction.java,pow,exponent,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
Fraction.java,Fraction,a0,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,value,double,0,RET,Math.abs(a0 - $) < epsilon
Fraction.java,Fraction,a0,long,0,RET,Math.abs($ - value) < epsilon
Fraction.java,Fraction,p2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,q2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,n,int,1,DEF,$ < maxIterations
Fraction.java,Fraction,convergent,double,1,DEF,Math.abs($ - value) > epsilon
Fraction.java,Fraction,value,double,1,DEF,Math.abs(convergent - $) > epsilon
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,n,int,0,FractionConversionException,$ >= maxIterations
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,den,int,0,DEF,$ == 0
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,Fraction,num,int,0,DEF,$ == Integer.MIN_VALUE
Fraction.java,Fraction,den,int,0,DEF,$ == Integer.MIN_VALUE
Fraction.java,Fraction,d,int,0,DEF,$ > 1
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,abs,numerator,int,1,DEF,$ >= 0
Fraction.java,equals,other,Object,1,DEF,$ == null
Fraction.java,negate,numerator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,addSub,fraction,Fraction,0,IllegalArgumentException,$ == null
Fraction.java,addSub,numerator,int,0,RET,$ == 0
Fraction.java,addSub,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,addSub,d1,int,0,RET,$==1
Fraction.java,addSub,w,BigInteger,0,DEF,$.bitLength() > 31
Fraction.java,multiply,fraction,Fraction,0,IllegalArgumentException,$ == null
Fraction.java,multiply,numerator,int,0,RET,$ == 0
Fraction.java,multiply,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,divide,fraction,Fraction,0,IllegalArgumentException,$ == null
Fraction.java,divide,fraction,Fraction,0,DEF,$.numerator == 0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$ == 0
Fraction.java,getReducedFraction,numerator,int,0,RET,$==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,numerator,int,0,DEF,($&1)==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$ < 0
Fraction.java,getReducedFraction,numerator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,toString,denominator,int,1,DEF,$ == 1
Fraction.java,toString,numerator,int,1,DEF,$ == 0
AbstractFormat.java,setDenominatorFormat,format,NumberFormat,0,DEF,$ == null
AbstractFormat.java,setNumeratorFormat,format,NumberFormat,0,DEF,$ == null
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
AbstractFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
ProperBigFractionFormat.java,format,num,BigInteger,0,DEF,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,ret,BigFraction,0,RET,$ != null
ProperBigFractionFormat.java,parse,whole,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,num,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperBigFractionFormat.java,parse,den,BigInteger,0,RET,$.compareTo(BigInteger.ZERO) < 0
ProperBigFractionFormat.java,setWholeFormat,format,NumberFormat,0,DEF,$ == null
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Fraction
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
FractionFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
FractionFormat.java,parse,num,Number,0,RET,$ == null
FractionFormat.java,parse,den,Number,0,RET,$ == null
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigFraction
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof BigInteger
BigFractionFormat.java,format,obj,null,1,DEF,$ instanceof Number
BigFractionFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
BigFractionFormat.java,parse,num,BigInteger,0,RET,$ == null
BigFractionFormat.java,parse,den,BigInteger,0,RET,$ == null
ProperFractionFormat.java,format,whole,int,0,DEF,$ != 0
ProperFractionFormat.java,parse,ret,Fraction,0,RET,$ != null
ProperFractionFormat.java,parse,whole,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,parse,den,Number,0,RET,$ == null
ProperFractionFormat.java,parse,den,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,setWholeFormat,format,NumberFormat,0,DEF,$ == null
AbstractIntegrator.java,sanityChecks,equations,FirstOrderDifferentialEquations,0,IntegratorException,$.getDimension() != y0.length
AbstractIntegrator.java,sanityChecks,equations,FirstOrderDifferentialEquations,0,IntegratorException,$.getDimension() != y.length
ContinuousOutputModel.java,append,model,ContinuousOutputModel,0,RET,$.steps.size() == 0
ContinuousOutputModel.java,append,steps,List<StepInterpolator>,1,DEF,$.size() == 0
ContinuousOutputModel.java,handleStep,steps,List<StepInterpolator>,0,DEF,$.size() == 0
ContinuousOutputModel.java,setInterpolatedTime,sMin,StepInterpolator,0,RET,locatePoint(time, $) <= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMin) <= 0
ContinuousOutputModel.java,setInterpolatedTime,sMax,StepInterpolator,0,RET,locatePoint(time, $) >= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMax) >= 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ < 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ > 0
ContinuousOutputModel.java,setInterpolatedTime,tMin,double,1,DEF,Math.abs(tMed - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,Math.abs($ - tMin) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMax,double,1,DEF,Math.abs($ - tMed) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,Math.abs(tMax - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,index,int,1,DEF,$ < low
ContinuousOutputModel.java,setInterpolatedTime,index,int,0,DEF,$ > high
AdamsBashforthIntegrator.java,integrate,y,double[],0,DEF,$ != y0
DormandPrince54StepInterpolator.java,DormandPrince54StepInterpolator,interpolator,DormandPrince54StepInterpolator,1,DEF,$.v1 == null
DormandPrince54StepInterpolator.java,computeInterpolatedState,v1,double[],0,DEF,$ == null
RungeKuttaIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,setStabilityCheck,stabilityReduction,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStabilityCheck,stabilityReduction,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl3,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl3,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl4,double,1,DEF,$ < 1.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl4,double,1,DEF,$ > 999.9
GraggBulirschStoerIntegrator.java,setOrderControl,maxOrder,int,0,DEF,$ <= 6
GraggBulirschStoerIntegrator.java,setOrderControl,maxOrder,int,0,DEF,$ % 2 != 0
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$ == null
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$.length != size
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudif,int,1,DEF,$ <= 0
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudif,int,1,DEF,$ >= 7
GraggBulirschStoerIntegrator.java,rescale,vecAbsoluteTolerance,double[],1,DEF,$ == null
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,DEF,2 * $ == n
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,RET,$ <= maxChecks
GraggBulirschStoerIntegrator.java,tryStep,k,int,0,RET,$ < maxIter
GraggBulirschStoerIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize > t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ > t
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize < t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ < t
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 0
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > 1.0e15
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > maxError
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ > 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,mu,int,0,DEF,$ >= 0
GraggBulirschStoerIntegrator.java,integrate,interpError,double,0,DEF,$ > 10.0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 1
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ <= targetIter
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 2
GraggBulirschStoerIntegrator.java,integrate,optimalIter,int,1,DEF,$ <= k
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ < targetIter
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ < minStep
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,IntegratorException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,IntegratorException,$.length != y0.length
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,IntegratorException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,IntegratorException,$.length != y0.length
AdaptiveStepsizeIntegrator.java,initializeStep,initialStep,double,0,RET,$ > 0
AdaptiveStepsizeIntegrator.java,filterStep,h,double,0,IntegratorException,Math.abs($) < minStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,0,DEF,$ < -maxStep
EmbeddedRungeKuttaIntegrator.java,integrate,y,double[],0,DEF,$ != y0
EmbeddedRungeKuttaIntegrator.java,integrate,vecAbsoluteTolerance,double[],1,DEF,$ != null
EmbeddedRungeKuttaIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
AdamsMoultonIntegrator.java,integrate,y,double[],0,DEF,$ != y0
DormandPrince853StepInterpolator.java,DormandPrince853StepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState == null
DormandPrince853StepInterpolator.java,computeInterpolatedState,v,double[][],0,DEF,$ == null
DormandPrince853StepInterpolator.java,doFinalize,currentState,double[],0,RET,$ == null
DormandPrince853Integrator.java,estimateError,den,double,0,DEF,$ <= 0.0
RungeKuttaStepInterpolator.java,RungeKuttaStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ < 0
GraggBulirschStoerStepInterpolator.java,resetTables,polynoms,double[][],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ <= 4
GraggBulirschStoerStepInterpolator.java,GraggBulirschStoerStepInterpolator,interpolator,GraggBulirschStoerStepInterpolator,1,DEF,$.polynoms == null
GraggBulirschStoerStepInterpolator.java,computeCoefficients,polynoms,double[][],0,DEF,$ == null
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,RET,$ < 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 1
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 2
GraggBulirschStoerStepInterpolator.java,estimateError,currentDegree,int,0,DEF,$ >= 5
GraggBulirschStoerStepInterpolator.java,computeInterpolatedState,currentDegree,int,0,DEF,$ > 3
GraggBulirschStoerStepInterpolator.java,computeInterpolatedState,h,double,0,DEF,$ == 0
StepNormalizer.java,handleStep,lastState,double[],0,DEF,$ == null
AbstractStepInterpolator.java,AbstractStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
MultistepStepInterpolator.java,MultistepStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
NordsieckTransformer.java,buildNordsieckToMultistep,n,int,0,DEF,$ > 1
NordsieckTransformer.java,convertMWDtNtoMtN,n,int,0,RET,$ == 1
EventState.java,evaluateStep,gb,double,1,FunctionEvaluationException:RET,$ >= 0
EventState.java,evaluateStep,root,double,1,DEF,Math.abs($ - ta) <= convergence
EventState.java,evaluateStep,ta,double,1,DEF,Math.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,0,RET,Math.abs(previousEventTime - $) > convergence
EventState.java,evaluateStep,previousEventTime,double,0,RET,Math.abs($ - root) > convergence
EventState.java,evaluateStep,pendingEventTime,double,0,RET,Math.abs(t1 - $) <= convergence
EventState.java,evaluateStep,t1,double,0,RET,Math.abs($ - pendingEventTime) <= convergence
EventState.java,evaluateStep,cause,Throwable,1,DEF,$ != null
EventState.java,evaluateStep,cause,null,1,DEF,$ instanceof DerivativeException
EventState.java,evaluateStep,cause,Throwable,0,DEF,$ != null
EventState.java,evaluateStep,cause,null,0,DEF,$ instanceof EventException
EventState.java,reset,nextAction,int,0,DEF,$ == EventHandler.RESET_STATE
CombinedEventsManager.java,evaluateStep,first,EventState,1,DEF,$ == null
MultistepIntegrator.java,start,store,StoringStepHandler,0,DEF,$.getFinalState() != null
MultistepIntegrator.java,eventOccurred,action,int,0,RET,$ == RESET_DERIVATIVES
MultistepIntegrator.java,eventOccurred,action,int,0,RET,$ == RESET_STATE
MultistepIntegrator.java,handleStep,count,int,0,DEF,$++ < n
MultistepIntegrator.java,handleStep,count,int,0,DEF,$ == n
QRDecompositionImpl.java,QRDecompositionImpl,a,double,0,DEF,$ != 0.0
QRDecompositionImpl.java,getR,cachedR,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQT,cachedQT,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQT,minor,int,0,DEF,qrtMinor[$] != 0.0
QRDecompositionImpl.java,getQT,qrtMinor,double[],0,DEF,$[minor] != 0.0
QRDecompositionImpl.java,getH,cachedH,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,isNonSingular,diag,double,0,RET,$ == 0
QRDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
QRDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
RealMatrixImpl.java,RealMatrixImpl,d,double[][],0,NullPointerException,$ == null
RealMatrixImpl.java,RealMatrixImpl,nRows,int,0,DEF,$ == 0
RealMatrixImpl.java,RealMatrixImpl,nCols,int,0,DEF,$ == 0
RealMatrixImpl.java,RealMatrixImpl,r,int,0,DEF,d[$].length != nCols
RealMatrixImpl.java,RealMatrixImpl,d,double[][],0,DEF,$[r].length != nCols
RealMatrixImpl.java,setSubMatrix,data,double[][],1,DEF,$ == null
RealMatrixImpl.java,setSubMatrix,row,int,0,DEF,$ > 0
RealMatrixImpl.java,setSubMatrix,column,int,0,DEF,$ > 0
RealMatrixImpl.java,setSubMatrix,nRows,int,0,DEF,$ == 0
RealMatrixImpl.java,setSubMatrix,nCols,int,0,DEF,$ == 0
RealMatrixImpl.java,setSubMatrix,i,int,0,DEF,subMatrix[$].length != nCols
RealMatrixImpl.java,setSubMatrix,subMatrix,double[][],0,DEF,$[i].length != nCols
RealMatrixImpl.java,operate,v,double[],0,DEF,$.length != nCols
RealMatrixImpl.java,preMultiply,v,double[],0,DEF,$.length != nRows
LUDecompositionImpl.java,LUDecompositionImpl,sum,double,0,DEF,Math.abs($) > largest
LUDecompositionImpl.java,LUDecompositionImpl,col,int,0,RET,Math.abs(lu[max][$]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,max,int,0,RET,Math.abs(lu[$][col]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,lu,double[][],0,RET,Math.abs($[max][col]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,max,int,0,DEF,$ != col
LUDecompositionImpl.java,getL,cachedL,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,getU,cachedU,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,getP,cachedP,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,solve,b,double[],0,IllegalArgumentException,$.length != m
LUDecompositionImpl.java,solve,b,RealVector,0,IllegalArgumentException,$.getDimension() != m
LUDecompositionImpl.java,solve,b,RealMatrix,0,IllegalArgumentException,$.getRowDimension() != m
RealVectorFormat.java,format,i,int,0,DEF,$ > 0
RealVectorFormat.java,format,obj,null,0,RET,$ instanceof RealVector
RealVectorFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
RealVectorFormat.java,parse,component,Number,1,DEF,$ != null
RealVectorImpl.java,RealVectorImpl,d,double[],0,NullPointerException,$ == null
RealVectorImpl.java,RealVectorImpl,d,double[],0,IllegalArgumentException,$.length == 0
RealVectorImpl.java,unitVector,norm,double,0,DEF,$ == 0
RealVectorImpl.java,unitize,norm,double,0,DEF,$ == 0
RealVectorImpl.java,checkVectorDimensions,data,double[],0,IllegalArgumentException,$.length != n
RealVectorImpl.java,equals,other,Object,0,RET,$ == null
RealVectorImpl.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
AbstractRealMatrix.java,AbstractRealMatrix,rowDimension,int,0,DEF,$ <= 0
AbstractRealMatrix.java,AbstractRealMatrix,columnDimension,int,0,DEF,$ <= 0
AbstractRealMatrix.java,visit,row,int,0,DEF,$ == endRow
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$.length < rowsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$[0].length < columnsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$.length < selectedRows.length
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$[0].length < selectedColumns.length
AbstractRealMatrix.java,setSubMatrix,nRows,int,0,DEF,$ == 0
AbstractRealMatrix.java,setSubMatrix,nCols,int,0,DEF,$ == 0
AbstractRealMatrix.java,setSubMatrix,r,int,0,DEF,subMatrix[$].length != nCols
AbstractRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DEF,$[r].length != nCols
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getRowDimension() != 1
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getColumnDimension() != nCols
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getRowDimension() != nRows
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getColumnDimension() != 1
AbstractRealMatrix.java,setRowVector,vector,RealVector,0,InvalidMatrixException,$.getDimension() != nCols
AbstractRealMatrix.java,setColumnVector,vector,RealVector,0,InvalidMatrixException,$.getDimension() != nRows
AbstractRealMatrix.java,setRow,array,double[],0,InvalidMatrixException,$.length != nCols
AbstractRealMatrix.java,setColumn,array,double[],0,InvalidMatrixException,$.length != nRows
AbstractRealMatrix.java,inverse,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,isSingular,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractRealMatrix.java,operate,v,double[],0,DEF,$.length != nCols
AbstractRealMatrix.java,operate,v,RealVector,0,DEF,$.getDimension() != nCols
AbstractRealMatrix.java,preMultiply,v,double[],0,DEF,$.length != nRows
AbstractRealMatrix.java,preMultiply,v,RealVector,0,DEF,$.getDimension() != nRows
AbstractRealMatrix.java,solve,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,solve,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,luDecompose,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,toString,i,int,0,DEF,$ > 0
AbstractRealMatrix.java,toString,j,int,0,DEF,$ > 0
AbstractRealMatrix.java,equals,object,Object,0,RET,$ instanceof RealMatrix == false
AbstractRealMatrix.java,equals,object,null,0,RET,$ instanceof RealMatrix
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getColumnDimension() != nCols
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getRowDimension() != nRows
AbstractRealMatrix.java,checkRowIndex,row,int,0,MatrixIndexException,$ < 0
AbstractRealMatrix.java,checkColumnIndex,column,int,0,MatrixIndexException,$ < 0
AbstractRealMatrix.java,checkSubMatrixIndex,startRow,int,0,MatrixIndexException,$ > endRow
AbstractRealMatrix.java,checkSubMatrixIndex,startColumn,int,0,MatrixIndexException,$ > endColumn
AbstractRealMatrix.java,checkSubMatrixIndex,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
AbstractRealMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
AbstractRealMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length == 0
SingularValueDecompositionImpl.java,getU,cachedU,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getU,m,int,1,DEF,$ >= n
SingularValueDecompositionImpl.java,getUT,cachedUt,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getS,cachedS,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getV,cachedV,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getV,m,int,1,DEF,$ >= n
SingularValueDecompositionImpl.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getRank,singularValues,double[],0,RET,$[i] > threshold
SingularValueDecompositionImpl.java,getRank,i,int,0,RET,singularValues[$] > threshold
SingularValueDecompositionImpl.java,solve,b,double[],0,IllegalArgumentException,$.length != singularValues.length
SingularValueDecompositionImpl.java,solve,si,double,0,SingularMatrixException,$ == 0
SingularValueDecompositionImpl.java,solve,b,RealVector,0,IllegalArgumentException,$.getDimension() != singularValues.length
SingularValueDecompositionImpl.java,solve,si,double,0,SingularMatrixException,$ == 0
SingularValueDecompositionImpl.java,solve,b,RealMatrix,0,IllegalArgumentException,$.getRowDimension() != singularValues.length
SingularValueDecompositionImpl.java,solve,si,double,0,SingularMatrixException,$ == 0
TriDiagonalTransformer.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,cachedQt,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,hK,double[],0,DEF,$[k] != 0.0
TriDiagonalTransformer.java,getQT,k,int,0,DEF,hK[$] != 0.0
TriDiagonalTransformer.java,getT,cachedT,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getT,i,int,0,DEF,$ > 0
TriDiagonalTransformer.java,transform,a,double,0,DEF,$ != 0.0
DenseRealMatrix.java,toBlocksLayout,length,int,0,DEF,$ != columns
DenseRealMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
DenseRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
DenseRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
DenseRealMatrix.java,setSubMatrix,refLength,int,0,DEF,$ < 1
DenseRealMatrix.java,setSubMatrix,subRow,double[],0,DEF,$.length != refLength
DenseRealMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
DenseRealMatrix.java,setRowMatrix,matrix,DenseRealMatrix,0,InvalidMatrixException,$.getRowDimension() != 1
DenseRealMatrix.java,setRowMatrix,matrix,DenseRealMatrix,0,InvalidMatrixException,$.getColumnDimension() != nCols
DenseRealMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
DenseRealMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
DenseRealMatrix.java,setColumnMatrix,matrix,DenseRealMatrix,0,InvalidMatrixException,$.getRowDimension() != nRows
DenseRealMatrix.java,setColumnMatrix,matrix,DenseRealMatrix,0,InvalidMatrixException,$.getColumnDimension() != 1
DenseRealMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
DenseRealMatrix.java,setRow,array,double[],0,InvalidMatrixException,$.length != nCols
DenseRealMatrix.java,setColumn,array,double[],0,InvalidMatrixException,$.length != nRows
DenseRealMatrix.java,operate,v,double[],0,DEF,$.length != columns
DenseRealMatrix.java,preMultiply,v,double[],0,DEF,$.length != rows
EigenDecompositionImpl.java,getV,cachedV,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getV,eigenvectors,RealVectorImpl[],0,DEF,$ == null
EigenDecompositionImpl.java,getD,cachedD,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getVT,eigenvectors,RealVectorImpl[],0,DEF,$ == null
EigenDecompositionImpl.java,getEigenvector,eigenvectors,RealVectorImpl[],0,DEF,$ == null
EigenDecompositionImpl.java,getSolver,eigenvectors,RealVectorImpl[],0,DEF,$ == null
EigenDecompositionImpl.java,solve,b,double[],0,IllegalArgumentException,$.length != m
EigenDecompositionImpl.java,solve,b,RealVector,0,IllegalArgumentException,$.getDimension() != m
EigenDecompositionImpl.java,solve,b,RealMatrix,0,IllegalArgumentException,$.getRowDimension() != m
EigenDecompositionImpl.java,isNonSingular,realEigenvalues,double[],0,RET,$[i] == 0
EigenDecompositionImpl.java,isNonSingular,i,int,0,RET,realEigenvalues[$] == 0
EigenDecompositionImpl.java,isNonSingular,imagEigenvalues,double[],0,RET,$[i] == 0
EigenDecompositionImpl.java,isNonSingular,i,int,0,RET,imagEigenvalues[$] == 0
EigenDecompositionImpl.java,computeSplits,secondary,double[],0,DEF,Math.abs($[i]) <= max
EigenDecompositionImpl.java,computeSplits,i,int,0,DEF,Math.abs(secondary[$]) <= max
EigenDecompositionImpl.java,process2RowsBlock,delta,double,0,InvalidMatrixException,$ < 0
EigenDecompositionImpl.java,process3RowsBlock,delta,double,0,InvalidMatrixException,$ >= 0
EigenDecompositionImpl.java,process3RowsBlock,z0,double,0,DEF,$ < z1
EigenDecompositionImpl.java,process3RowsBlock,z1,double,0,DEF,$ < z2
EigenDecompositionImpl.java,process3RowsBlock,z0,double,0,DEF,$ < z1
EigenDecompositionImpl.java,processGeneralBlock,sumOffDiag,double,0,RET,$ == 0
EigenDecompositionImpl.java,processGeneralBlock,work,double[],0,DEF,$[i + 2] <= 0
EigenDecompositionImpl.java,processGeneralBlock,i,int,0,DEF,work[$ + 2] <= 0
EigenDecompositionImpl.java,processGeneralBlock,k,int,0,MaxIterationsExceededException,$ >= maxIter
EigenDecompositionImpl.java,processGeneralBlock,pingPong,int,0,DEF,$ == 0
EigenDecompositionImpl.java,processGeneralBlock,n0,int,0,DEF,$ - i0 > 3
EigenDecompositionImpl.java,processGeneralBlock,i0,int,0,DEF,n0 - $ > 3
EigenDecompositionImpl.java,goodStep,start,int,0,RET,$ >= deflatedEnd
EigenDecompositionImpl.java,goodStep,s,double,1,DEF,$ <= t
EigenDecompositionImpl.java,goodStep,dMin,double,0,DEF,$ <= 0
EigenDecompositionImpl.java,goodStep,deflatedEnd,int,0,DEF,$ < end
EigenDecompositionImpl.java,goodStep,dMin,double,0,RET,$ < 0
EigenDecompositionImpl.java,goodStep,dMin,double,1,RET,$ >= 0
EigenDecompositionImpl.java,goodStep,dMin1,double,1,RET,$ > 0
EigenDecompositionImpl.java,goodStep,dMin,double,1,RET,$ < 0.0
EigenDecompositionImpl.java,goodStep,dMin1,double,1,RET,$ > 0.0
EigenDecompositionImpl.java,goodStep,dMin,double,1,DEF,$ < 0.0
EigenDecompositionImpl.java,goodStep,tType,int,1,DEF,$ < -22
EigenDecompositionImpl.java,goodStep,dMin1,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,eigenvaluesRange,range,double,0,DEF,$ < absoluteTolerance
EigenDecompositionImpl.java,eigenvaluesRange,middle,double,1,DEF,countEigenValues($, index, n) >= 1
EigenDecompositionImpl.java,eigenvaluesRange,index,int,1,DEF,countEigenValues(middle, $, n) >= 1
EigenDecompositionImpl.java,eigenvaluesRange,n,int,1,DEF,countEigenValues(middle, index, $) >= 1
EigenDecompositionImpl.java,eigenvaluesRange,range,double,0,DEF,$ < absoluteTolerance
EigenDecompositionImpl.java,eigenvaluesRange,middle,double,1,DEF,countEigenValues($, index, n) >= n
EigenDecompositionImpl.java,eigenvaluesRange,index,int,1,DEF,countEigenValues(middle, $, n) >= n
EigenDecompositionImpl.java,eigenvaluesRange,n,int,1,DEF,countEigenValues(middle, index, $) >= n
EigenDecompositionImpl.java,countEigenValues,ratio,double,0,DEF,$ <= 0
EigenDecompositionImpl.java,dqds,pingPong,int,1,DEF,$ == 0
EigenDecompositionImpl.java,dqd,pingPong,int,1,DEF,$ == 0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 2] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 2] == 0.0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 3] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 3] == 0.0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 2] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 2] == 0.0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 2] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 2] == 0.0
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,0,RET,$ <= 0.0
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,DEF,$ == dN
EigenDecompositionImpl.java,computeShiftIncrement,dMin1,double,1,DEF,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,gap1,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,computeShiftIncrement,gap1,double,1,DEF,$ > b1
EigenDecompositionImpl.java,computeShiftIncrement,dN,double,0,DEF,$ > b1
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,$ == 0.0
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,100 * Math.max($, b1) < a2
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * Math.max(b2, $) < a2
EigenDecompositionImpl.java,computeShiftIncrement,cnst1,double,0,DEF,$ < a2
EigenDecompositionImpl.java,computeShiftIncrement,a2,double,0,DEF,$ < cnst1
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN2
EigenDecompositionImpl.java,computeShiftIncrement,np,int,0,RET,work[$ - 8] > b2
EigenDecompositionImpl.java,computeShiftIncrement,work,double[],0,RET,$[np - 8] > b2
EigenDecompositionImpl.java,computeShiftIncrement,np,int,0,RET,work[$ - 4] > b1
EigenDecompositionImpl.java,computeShiftIncrement,work,double[],0,RET,$[np - 4] > b1
EigenDecompositionImpl.java,computeShiftIncrement,start,int,0,RET,end - $ > 2
EigenDecompositionImpl.java,computeShiftIncrement,end,int,0,RET,$ - start > 2
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,$ == 0.0
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,100 * Math.max($, b1) < a2
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * Math.max(b2, $) < a2
EigenDecompositionImpl.java,computeShiftIncrement,cnst1,double,0,DEF,$ < a2
EigenDecompositionImpl.java,computeShiftIncrement,a2,double,1,DEF,$ < cnst1
EigenDecompositionImpl.java,computeShiftIncrement,tType,int,1,DEF,$ == -6
EigenDecompositionImpl.java,computeShiftIncrement,tType,int,1,DEF,$ == -18
EigenDecompositionImpl.java,computeShiftIncrement,dMin1,double,1,RET,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,dMin2,double,1,RET,$ == dN2
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,RET,$ != 0.0
EigenDecompositionImpl.java,computeShiftIncrement,oldB1,double,0,DEF,100 * Math.max(b1, $) < b2
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * Math.max($, oldB1) < b2
EigenDecompositionImpl.java,computeShiftIncrement,gap2,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,computeShiftIncrement,dMin1,double,0,DEF,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,dMin2,double,1,RET,$ == dN2
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,RET,$ != 0.0
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * $ < b2
EigenDecompositionImpl.java,computeShiftIncrement,gap2,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,updateSigma,tau,double,1,DEF,$ < sigma
EigenDecompositionImpl.java,findEigenvector,absG,double,0,DEF,$ < minG
BigMatrixImpl.java,BigMatrixImpl,rowDimension,int,0,IllegalArgumentException,$ <=0
BigMatrixImpl.java,BigMatrixImpl,columnDimension,int,0,IllegalArgumentException,$ <=0
BigMatrixImpl.java,BigMatrixImpl,d,BigDecimal[][],0,NullPointerException,$ == null
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,r,int,0,IllegalArgumentException,d[$].length != nCols
BigMatrixImpl.java,BigMatrixImpl,d,BigDecimal[][],0,IllegalArgumentException,$[r].length != nCols
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,d,double[][],0,IllegalArgumentException,$[row].length != nCols
BigMatrixImpl.java,BigMatrixImpl,row,int,0,IllegalArgumentException,d[$].length != nCols
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,d,String[][],0,IllegalArgumentException,$[row].length != nCols
BigMatrixImpl.java,BigMatrixImpl,row,int,0,IllegalArgumentException,d[$].length != nCols
BigMatrixImpl.java,getSubMatrix,startRow,int,0,MatrixIndexException,$ > endRow
BigMatrixImpl.java,getSubMatrix,startColumn,int,0,MatrixIndexException,$ > endColumn
BigMatrixImpl.java,getSubMatrix,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
BigMatrixImpl.java,getSubMatrix,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
BigMatrixImpl.java,getSubMatrix,selectedRows,int[],0,MatrixIndexException,$.length == 0
BigMatrixImpl.java,setSubMatrix,nRows,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,setSubMatrix,nCols,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,setSubMatrix,r,int,0,IllegalArgumentException,subMatrix[$].length != nCols
BigMatrixImpl.java,setSubMatrix,subMatrix,BigDecimal[][],0,IllegalArgumentException,$[r].length != nCols
BigMatrixImpl.java,setSubMatrix,data,BigDecimal[][],1,DEF,$ == null
BigMatrixImpl.java,setSubMatrix,row,int,0,DEF,$ > 0
BigMatrixImpl.java,setSubMatrix,column,int,0,DEF,$ > 0
BigMatrixImpl.java,isSingular,lu,BigDecimal[][],1,RET,$ == null
BigMatrixImpl.java,preMultiply,v,BigDecimal[],0,IllegalArgumentException,$.length != nRows
BigMatrixImpl.java,solve,b,BigDecimal[],0,IllegalArgumentException,$.length != nRows
BigMatrixImpl.java,luDecompose,nRows,int,0,NonSquareMatrixException,$ != nCols
BigMatrixImpl.java,luDecompose,largest,BigDecimal,0,DEF,sum.abs().compareTo($) == 1
BigMatrixImpl.java,luDecompose,sum,BigDecimal,0,DEF,$.abs().compareTo(largest) == 1
BigMatrixImpl.java,luDecompose,col,int,0,SingularMatrixException,lu[max][$].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,TOO_SMALL,BigDecimal,0,SingularMatrixException,lu[max][col].abs().compareTo($) <= 0
BigMatrixImpl.java,luDecompose,max,int,0,SingularMatrixException,lu[$][col].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,lu,BigDecimal[][],0,SingularMatrixException,$[max][col].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,max,int,0,DEF,$ != col
BigMatrixImpl.java,toString,data,BigDecimal[][],0,DEF,$ != null
BigMatrixImpl.java,toString,i,int,0,DEF,$ > 0
BigMatrixImpl.java,toString,j,int,0,DEF,$ > 0
BigMatrixImpl.java,equals,object,Object,0,RET,$ instanceof BigMatrixImpl == false
BigMatrixImpl.java,equals,object,null,0,RET,$ instanceof BigMatrixImpl
BigMatrixImpl.java,equals,m,BigMatrix,0,RET,$.getColumnDimension() != nCols
BigMatrixImpl.java,equals,m,BigMatrix,0,RET,$.getRowDimension() != nRows
BigMatrixImpl.java,getLUMatrix,lu,BigDecimal[][],0,DEF,$ == null
BigMatrixImpl.java,checkRowIndex,row,int,0,MatrixIndexException,$ < 0
BigMatrixImpl.java,checkColumnIndex,column,int,0,MatrixIndexException,$ < 0
SparseRealMatrix.java,setEntry,value,double,1,DEF,$ == 0.0
SparseRealMatrix.java,addToEntry,value,double,1,DEF,$ == 0.0
SparseRealMatrix.java,multiplyEntry,value,double,1,DEF,$ == 0.0
BiDiagonalTransformer.java,BiDiagonalTransformer,m,int,1,DEF,$ >= n
BiDiagonalTransformer.java,getU,cachedU,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getU,hK,double[],0,DEF,$[k - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,k,int,0,DEF,hK[$ - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,hK[k - $] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getB,cachedB,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getB,m,int,1,DEF,$ < n
BiDiagonalTransformer.java,getB,i,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getV,cachedV,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getV,hK,double[],0,DEF,$[k] != 0.0
BiDiagonalTransformer.java,getV,k,int,0,DEF,hK[$] != 0.0
BiDiagonalTransformer.java,getV,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,b,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,b,double,0,DEF,$ != 0.0
LevenbergMarquardtEstimator.java,estimate,dk,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,estimate,s,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,estimate,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtEstimator.java,estimate,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtEstimator.java,estimate,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,estimate,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,DEF,$ >= 1.0e-4
LevenbergMarquardtEstimator.java,estimate,actRed,double,0,RET,Math.abs($) <= costRelativeTolerance
LevenbergMarquardtEstimator.java,estimate,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtEstimator.java,estimate,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtEstimator.java,estimate,actRed,double,1,EstimationException,Math.abs($) <= 2.2204e-16
LevenbergMarquardtEstimator.java,estimate,preRed,double,1,EstimationException,$ <= 2.2204e-16
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,EstimationException,$ <= 2.0
LevenbergMarquardtEstimator.java,estimate,maxCosine,double,0,EstimationException,$ <= 2.2204e-16
LevenbergMarquardtEstimator.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtEstimator.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtEstimator.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtEstimator.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtEstimator.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtEstimator.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtEstimator.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtEstimator.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtEstimator.java,qrDecomposition,ak2,double,0,RET,$ == 0
AbstractEstimator.java,updateResidualsAndCost,costEvaluations,int,0,EstimationException,++$ > maxCostEval
AbstractEstimator.java,guessParametersErrors,m,int,0,EstimationException,$ <= p
DirectSearchOptimizer.java,buildSimplex,i,int,0,DEF,$ > 0
DirectSearchOptimizer.java,buildSimplex,i,int,0,DEF,$ < n
DirectSearchOptimizer.java,setMultiStart,starts,int,1,DEF,$ < 2
DirectSearchOptimizer.java,minimize,evaluations,int,1,DEF,$ >= maxEvaluations
DirectSearchOptimizer.java,minimize,minima,PointCostPair[],0,ConvergenceException,$[0] == null
DirectSearchOptimizer.java,compare,o1,PointCostPair,1,RET,$ == null
DirectSearchOptimizer.java,compare,o2,PointCostPair,0,RET,$ == null
MultiDirectional.java,iterateSimplex,reflectedCost,double,0,RET,$ < originalCost
MultiDirectional.java,iterateSimplex,reflectedCost,double,0,DEF,$ <= expandedCost
MultiDirectional.java,iterateSimplex,contractedCost,double,0,RET,$ < originalCost
NelderMead.java,iterateSimplex,smallest,double,1,DEF,$ <= costR
NelderMead.java,iterateSimplex,costR,double,1,DEF,$ < secondLargest
NelderMead.java,iterateSimplex,costR,double,1,DEF,$ < smallest
NelderMead.java,iterateSimplex,costE,double,1,DEF,$ < costR
NelderMead.java,iterateSimplex,costR,double,1,RET,$ < largest
NelderMead.java,iterateSimplex,costC,double,0,RET,$ <= costR
NelderMead.java,iterateSimplex,costC,double,0,RET,$ < largest
Beta.java,regularizedBeta,x,double,1,DEF,$ < 0
Beta.java,regularizedBeta,x,double,1,DEF,$ > 1
Beta.java,regularizedBeta,a,double,1,DEF,$ <= 0.0
Beta.java,regularizedBeta,b,double,1,DEF,$ <= 0.0
Beta.java,getB,n,int,1,DEF,$ % 2 == 0
Beta.java,logBeta,a,double,1,DEF,$ <= 0.0
Beta.java,logBeta,b,double,1,DEF,$ <= 0.0
Gamma.java,logGamma,x,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ >= 1.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ > a
Gamma.java,regularizedGammaP,n,double,1,MaxIterationsExceededException,$ >= maxIterations
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < a
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ < 1.0
Erf.java,erf,x,double,0,DEF,$ < 0
Vector3DFormat.java,format,obj,null,0,RET,$ instanceof Vector3D
Vector3DFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
Vector3DFormat.java,parse,x,Number,0,RET,$ == null
Vector3DFormat.java,parse,y,Number,0,RET,$ == null
Vector3DFormat.java,parse,z,Number,0,RET,$ == null
Vector3D.java,normalize,s,double,0,DEF,$ == 0
Vector3D.java,orthogonal,threshold,double,0,DEF,$ == 0
Vector3D.java,orthogonal,x,double,1,RET,$ >= -threshold
Vector3D.java,orthogonal,x,double,1,RET,$ <= threshold
Vector3D.java,orthogonal,y,double,0,RET,$ >= -threshold
Vector3D.java,orthogonal,y,double,0,RET,$ <= threshold
Vector3D.java,angle,normProduct,double,0,DEF,$ == 0
Vector3D.java,angle,dot,double,0,RET,$ < -threshold
Vector3D.java,angle,dot,double,0,RET,$ > threshold
Vector3D.java,angle,dot,double,0,RET,$ >= 0
Vector3D.java,equals,other,Object,0,RET,$ == null
Rotation.java,Rotation,norm,double,0,DEF,$ == 0
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$.length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[0].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[1].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[2].length != 3
Rotation.java,Rotation,det,double,0,NotARotationMatrixException,$ < 0.0
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,u1u1,double,0,IllegalArgumentException,$ == 0
Rotation.java,Rotation,u2u2,double,0,IllegalArgumentException,$ == 0
Rotation.java,Rotation,v1v1,double,0,IllegalArgumentException,$ == 0
Rotation.java,Rotation,v2v2,double,0,IllegalArgumentException,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,normProduct,double,0,IllegalArgumentException,$ == 0
Rotation.java,getAxis,squaredSine,double,1,RET,$ == 0
Rotation.java,getAxis,q0,double,0,RET,$ < 0
Rotation.java,getAngle,q0,double,1,RET,$ < -0.1
Rotation.java,getAngle,q0,double,1,RET,$ > 0.1
Rotation.java,getAngle,q0,double,0,RET,$ < 0
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,orthogonalizeMatrix,fn1,double,0,RET,Math.abs($ - fn) <= threshold
Rotation.java,orthogonalizeMatrix,fn,double,0,RET,Math.abs(fn1 - $) <= threshold
ValueServer.java,resetReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,closeReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,DEF,$ == null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,DEF,$.getBinStats().size() == 0
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,$ == null
ValueServer.java,getNextReplay,str,String,0,DEF,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,(str = $.readLine()) == null
ValueServer.java,getNextReplay,str,String,0,DEF,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,(str = $.readLine()) == null
UncorrelatedRandomVectorGenerator.java,UncorrelatedRandomVectorGenerator,mean,double[],0,IllegalArgumentException,$.length != standardDeviation.length
EmpiricalDistributionImpl.java,load,sampleStats,SummaryStatistics,0,DEF,$.getN() == 0
EmpiricalDistributionImpl.java,load,in,BufferedReader,0,DEF,$ != null
EmpiricalDistributionImpl.java,load,in,BufferedReader,0,DEF,$ != null
EmpiricalDistributionImpl.java,getAdapter,in,null,1,RET,$ instanceof BufferedReader
EmpiricalDistributionImpl.java,getAdapter,in,null,1,RET,$ instanceof double[]
EmpiricalDistributionImpl.java,getNextValue,stats,SummaryStatistics,0,RET,$.getN() > 0
EmpiricalDistributionImpl.java,getNextValue,stats,SummaryStatistics,1,RET,$.getStandardDeviation() > 0
RandomDataImpl.java,nextHexString,len,int,0,IllegalArgumentException,$ <= 0
RandomDataImpl.java,nextHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextInt,lower,int,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,nextLong,lower,long,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,nextSecureHexString,len,int,0,IllegalArgumentException,$ <= 0
RandomDataImpl.java,nextSecureHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextSecureInt,lower,int,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,nextSecureLong,lower,long,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,nextPoisson,mean,double,0,IllegalArgumentException,$ <= 0
RandomDataImpl.java,nextPoisson,r,double,1,DEF,$ >= p
RandomDataImpl.java,nextGaussian,sigma,double,0,IllegalArgumentException,$ <= 0
RandomDataImpl.java,nextExponential,mean,double,0,IllegalArgumentException,$ < 0.0
RandomDataImpl.java,nextUniform,lower,double,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,getRan,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,getSecRan,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,nextPermutation,k,int,0,IllegalArgumentException,$ > n
RandomDataImpl.java,nextPermutation,k,int,0,IllegalArgumentException,$ == 0
RandomDataImpl.java,nextSample,k,int,0,IllegalArgumentException,$ > len
RandomDataImpl.java,nextSample,k,int,0,IllegalArgumentException,$ == 0
RandomDataImpl.java,shuffle,i,int,1,DEF,$ == 0
CorrelatedRandomVectorGenerator.java,CorrelatedRandomVectorGenerator,mean,double[],0,DimensionMismatchException,$.length != order
CorrelatedRandomVectorGenerator.java,decompose,swap,int[],0,DEF,$[rank] != rank
CorrelatedRandomVectorGenerator.java,decompose,rank,int,0,DEF,swap[$] != rank
CorrelatedRandomVectorGenerator.java,decompose,c,double[][],1,NotPositiveDefiniteMatrixException,$[ir][ir] < small
CorrelatedRandomVectorGenerator.java,decompose,ir,int,1,NotPositiveDefiniteMatrixException,c[$][$] < small
CorrelatedRandomVectorGenerator.java,decompose,rank,int,0,NotPositiveDefiniteMatrixException,$ == 0
CorrelatedRandomVectorGenerator.java,decompose,c,double[][],0,NotPositiveDefiniteMatrixException,$[index[i]][index[i]] < -small
CorrelatedRandomVectorGenerator.java,decompose,index,int[],0,NotPositiveDefiniteMatrixException,c[$[i]][$[i]] < -small
CorrelatedRandomVectorGenerator.java,decompose,i,int,0,NotPositiveDefiniteMatrixException,c[index[$]][index[$]] < -small
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
AbstractRandomGenerator.java,nextBytes,i,int,0,DEF,$ > 0
AbstractRandomGenerator.java,nextBytes,bytesOut,int,0,RET,$ == bytes.length
AbstractRandomGenerator.java,nextInt,n,int,0,IllegalArgumentException,$ <= 0
AbstractRandomGenerator.java,nextGaussian,s,double,0,DEF,$ != 0
BisectionSolver.java,solve,fm,double,1,DEF,$ * fmin > 0.0
BisectionSolver.java,solve,fmin,double,1,DEF,fm * $ > 0.0
BisectionSolver.java,solve,min,double,0,RET,Math.abs(max - $) <= absoluteAccuracy
BisectionSolver.java,solve,max,double,0,RET,Math.abs($ - min) <= absoluteAccuracy
SecantSolver.java,solve,y0,double,0,IllegalArgumentException,$ * y1 >= 0
SecantSolver.java,solve,y1,double,0,IllegalArgumentException,y0 * $ >= 0
SecantSolver.java,solve,y1,double,0,RET,Math.abs($) <= functionValueAccuracy
SecantSolver.java,solve,oldDelta,double,0,DEF,delta / $ > 1
SecantSolver.java,solve,delta,double,0,DEF,$ / oldDelta > 1
SecantSolver.java,solve,y1,double,0,DEF,$ > 0
SecantSolver.java,solve,y2,double,0,DEF,$ > 0
LaguerreSolver.java,LaguerreSolver,f,null,1,DEF,$ instanceof PolynomialFunction
LaguerreSolver.java,solve,min,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
LaguerreSolver.java,solve,max,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
LaguerreSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
LaguerreSolver.java,solve,f,null,0,DEF,$ instanceof PolynomialFunction
LaguerreSolver.java,solve,min,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
LaguerreSolver.java,solve,max,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
LaguerreSolver.java,solveAll,n,int,0,IllegalArgumentException,$ < 1
LaguerreSolver.java,solve,n,int,0,IllegalArgumentException,$ < 1
LaguerreSolver.java,solve,oldz,Complex,0,RET,(z.subtract($)).abs() <= tolerance
LaguerreSolver.java,solve,z,Complex,0,RET,($.subtract(oldz)).abs() <= tolerance
LaguerreSolver.java,solve,pv,Complex,0,RET,$.abs() <= functionValueAccuracy
NewtonSolver.java,solve,x0,double,0,RET,Math.abs(x1 - $) <= absoluteAccuracy
NewtonSolver.java,solve,x1,double,0,RET,Math.abs($ - x0) <= absoluteAccuracy
UnivariateRealSolverImpl.java,UnivariateRealSolverImpl,f,UnivariateRealFunction,0,DEF,$ == null
UnivariateRealSolverImpl.java,verifyInterval,lower,double,0,DEF,$ >= upper
UnivariateRealSolverUtils.java,bracket,function,UnivariateRealFunction,0,IllegalArgumentException,$ == null
UnivariateRealSolverUtils.java,bracket,maximumIterations,int,0,IllegalArgumentException,$ <= 0
UnivariateRealSolverUtils.java,bracket,initial,double,0,IllegalArgumentException,$ < lowerBound
UnivariateRealSolverUtils.java,bracket,initial,double,0,IllegalArgumentException,$ > upperBound
UnivariateRealSolverUtils.java,bracket,lowerBound,double,0,IllegalArgumentException,$ >= upperBound
UnivariateRealSolverUtils.java,bracket,fa,double,0,ConvergenceException,$ * fb >= 0.0
UnivariateRealSolverUtils.java,bracket,fb,double,0,ConvergenceException,fa * $ >= 0.0
UnivariateRealSolverUtils.java,setup,f,UnivariateRealFunction,0,IllegalArgumentException,$ == null
UnivariateRealSolverUtils.java,setup,factory,UnivariateRealSolverFactory,0,DEF,$ == null
MullerSolver.java,solve,min,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
MullerSolver.java,solve,max,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
MullerSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
MullerSolver.java,solve,y0,double,0,RET,$ == 0.0
MullerSolver.java,solve,y2,double,0,RET,$ == 0.0
MullerSolver.java,solve,oldx,double,0,RET,Math.abs(x - $) <= tolerance
MullerSolver.java,solve,x,double,0,RET,Math.abs($ - oldx) <= tolerance
MullerSolver.java,solve,y,double,0,RET,Math.abs($) <= functionValueAccuracy
MullerSolver.java,solve,ym,double,1,DEF,MathUtils.sign(y0) + MathUtils.sign($) == 0.0
MullerSolver.java,solve,y0,double,1,DEF,MathUtils.sign($) + MathUtils.sign(ym) == 0.0
MullerSolver.java,solve2,y0,double,0,RET,$ == 0.0
MullerSolver.java,solve2,y1,double,0,RET,$ == 0.0
MullerSolver.java,solve2,delta,double,1,DEF,$ >= 0.0
MullerSolver.java,solve2,denominator,double,1,DEF,$ != 0
MullerSolver.java,solve2,oldx,double,0,RET,Math.abs(x - $) <= tolerance
MullerSolver.java,solve2,x,double,0,RET,Math.abs($ - oldx) <= tolerance
MullerSolver.java,solve2,y,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yInitial,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMin,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMin,double,0,RET,yInitial * $ < 0
BrentSolver.java,solve,yInitial,double,0,RET,$ * yMin < 0
BrentSolver.java,solve,yMax,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yInitial,double,0,RET,$ * yMax < 0
BrentSolver.java,solve,yMax,double,0,RET,yInitial * $ < 0
BrentSolver.java,solve,sign,double,1,DEF,$ > 0
BrentSolver.java,solve,yMin,double,1,DEF,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMax,double,1,DEF,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,sign,double,1,DEF,$ < 0
BrentSolver.java,solve,yMin,double,1,DEF,$ == 0.0
BrentSolver.java,solve,y1,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,dx,double,0,RET,Math.abs($) <= tolerance
BrentSolver.java,solve,oldDelta,double,1,DEF,Math.abs($) < tolerance
BrentSolver.java,solve,x0,double,1,DEF,$ == x2
BrentSolver.java,solve,p,double,1,DEF,$ > 0.0
BrentSolver.java,solve,delta,double,1,DEF,Math.abs($) > tolerance
BrentSolver.java,solve,dx,double,1,DEF,$ > 0.0
BrentSolver.java,solve,dx,double,0,DEF,$ <= 0.0
BrentSolver.java,solve,y1,double,0,DEF,$ > 0
BrentSolver.java,solve,y2,double,0,DEF,$ > 0
RiddersSolver.java,solve,min,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
RiddersSolver.java,solve,max,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
RiddersSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
RiddersSolver.java,solve,y1,double,0,RET,$ == 0.0
RiddersSolver.java,solve,y2,double,0,RET,$ == 0.0
RiddersSolver.java,solve,y3,double,0,RET,Math.abs($) <= functionValueAccuracy
RiddersSolver.java,solve,oldx,double,0,RET,Math.abs(x - $) <= tolerance
RiddersSolver.java,solve,x,double,0,RET,Math.abs($ - oldx) <= tolerance
RiddersSolver.java,solve,y,double,0,RET,Math.abs($) <= functionValueAccuracy
RiddersSolver.java,solve,correction,double,1,DEF,$ > 0.0
RiddersSolver.java,solve,y1,double,1,DEF,MathUtils.sign($) + MathUtils.sign(y) == 0.0
RiddersSolver.java,solve,y,double,1,DEF,MathUtils.sign(y1) + MathUtils.sign($) == 0.0
RiddersSolver.java,solve,y2,double,1,DEF,MathUtils.sign($) + MathUtils.sign(y) == 0.0
RiddersSolver.java,solve,y,double,1,DEF,MathUtils.sign(y2) + MathUtils.sign($) == 0.0
PolynomialFunctionLagrangeForm.java,evaluate,dist,double,0,DEF,$ < min_dist
PolynomialFunctionLagrangeForm.java,evaluate,divider,double,0,DuplicateSampleAbscissaException,$ == 0.0
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != j
PolynomialFunctionLagrangeForm.java,computeCoefficients,d,double,0,DEF,$ == 0.0
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != k
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,IllegalArgumentException,$.length < 2
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,y,double[],0,IllegalArgumentException,$.length < 2
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,IllegalArgumentException,$.length != y.length
PolynomialFunctionNewtonForm.java,verifyInputArray,a,double[],0,IllegalArgumentException,$.length < 1
PolynomialFunctionNewtonForm.java,verifyInputArray,c,double[],0,IllegalArgumentException,$.length < 1
PolynomialFunction.java,PolynomialFunction,c,double[],0,IllegalArgumentException,$.length < 1
PolynomialFunction.java,evaluate,n,int,0,IllegalArgumentException,$ < 1
PolynomialFunction.java,differentiate,n,int,0,IllegalArgumentException,$ < 1
PolynomialFunction.java,differentiate,n,int,0,RET,$ == 1
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,IllegalArgumentException,$.length < 2
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,IllegalArgumentException,$.length - 1 != polynomials.length
PolynomialSplineFunction.java,value,i,int,0,DEF,$ < 0
PolynomialSplineFunction.java,value,i,int,0,DEF,$ >= polynomials.length
DividedDifferenceInterpolator.java,computeDividedDifference,denominator,double,0,DuplicateSampleAbscissaException,$ == 0.0
SplineInterpolator.java,interpolate,x,double[],0,IllegalArgumentException,$.length != y.length
SplineInterpolator.java,interpolate,x,double[],0,IllegalArgumentException,$.length < 3
TrapezoidIntegrator.java,stage,n,int,1,RET,$ == 0
TrapezoidIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
TrapezoidIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
TrapezoidIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
TrapezoidIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 64
UnivariateRealIntegratorImpl.java,UnivariateRealIntegratorImpl,f,UnivariateRealFunction,0,IllegalArgumentException,$ == null
UnivariateRealIntegratorImpl.java,verifyInterval,lower,double,0,DEF,$ >= upper
UnivariateRealIntegratorImpl.java,verifyIterationCount,minimalIterationCount,int,0,DEF,$ <= 0
UnivariateRealIntegratorImpl.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ <= minimalIterationCount
SimpsonIntegrator.java,integrate,minimalIterationCount,int,0,RET,$ == 1
SimpsonIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
SimpsonIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
SimpsonIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
SimpsonIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 64
RombergIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
RombergIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
RombergIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
RombergIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 32
BrentMinimizer.java,localMin,e,double,0,DEF,Math.abs($) > tol
BrentMinimizer.java,localMin,q,double,1,DEF,$ > 0
BrentMinimizer.java,localMin,a,double,0,DEF,(u - $) < t2
BrentMinimizer.java,localMin,u,double,0,DEF,($ - a) < t2
BrentMinimizer.java,localMin,b,double,0,DEF,($ - u) < t2
BrentMinimizer.java,localMin,u,double,0,DEF,(b - $) < t2
BrentMinimizer.java,localMin,fu,double,1,DEF,$ <= fx
BrentMinimizer.java,localMin,u,double,1,DEF,$ < x
BrentMinimizer.java,localMin,u,double,1,DEF,$ < x
BrentMinimizer.java,localMin,fu,double,1,DEF,$ <= fw
BrentMinimizer.java,localMin,w,double,1,DEF,$ == x
BrentMinimizer.java,localMin,fu,double,0,DEF,$ <= fv
BrentMinimizer.java,localMin,v,double,0,DEF,$ == x
BrentMinimizer.java,localMin,v,double,0,DEF,$ == w
ComplexFormat.java,format,im,double,1,DEF,$ < 0.0
ComplexFormat.java,format,im,double,0,DEF,$ > 0.0
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Complex
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Number
ComplexFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
ComplexFormat.java,parse,re,Number,0,RET,$ == null
ComplexFormat.java,parse,im,Number,0,RET,$ == null
ComplexFormat.java,setImaginaryCharacter,imaginaryCharacter,String,0,IllegalArgumentException,$ == null
ComplexFormat.java,setImaginaryCharacter,imaginaryCharacter,String,0,IllegalArgumentException,$.length() == 0
ComplexFormat.java,setImaginaryFormat,imaginaryFormat,NumberFormat,0,IllegalArgumentException,$ == null
ComplexFormat.java,setRealFormat,realFormat,NumberFormat,0,IllegalArgumentException,$ == null
Complex.java,abs,imaginary,double,0,RET,$ == 0.0
Complex.java,abs,real,double,0,RET,$ == 0.0
Complex.java,divide,c,double,0,RET,$ == 0.0
Complex.java,divide,d,double,0,RET,$ == 0.0
Complex.java,divide,d,double,0,RET,$ == 0.0
Complex.java,divide,c,double,0,RET,$ == 0.0
Complex.java,equals,other,Object,1,DEF,$ == null
Complex.java,pow,x,Complex,0,NullPointerException,$ == null
Complex.java,sqrt,real,double,0,RET,$ == 0.0
Complex.java,sqrt,imaginary,double,0,RET,$ == 0.0
Complex.java,sqrt,real,double,1,RET,$ >= 0.0
Complex.java,nthRoot,n,int,0,DEF,$ <= 0
ComplexUtils.java,polar2Complex,r,double,0,IllegalArgumentException,$ < 0
DescriptiveStatistics.java,addValue,windowSize,int,1,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,IllegalArgumentException,$ < 1
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,IllegalArgumentException,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,getPercentile,percentileImpl,null,1,DEF,$ instanceof Percentile
AbstractStorelessUnivariateStatistic.java,evaluate,values,double[],0,IllegalArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,incrementAll,values,double[],0,IllegalArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,equals,object,Object,0,RET,$ instanceof AbstractStorelessUnivariateStatistic == false
AbstractStorelessUnivariateStatistic.java,equals,object,null,0,RET,$ instanceof AbstractStorelessUnivariateStatistic
StatisticalSummaryValues.java,equals,object,Object,0,RET,$ instanceof StatisticalSummaryValues == false
StatisticalSummaryValues.java,equals,object,null,0,RET,$ instanceof StatisticalSummaryValues
FirstMoment.java,increment,n,long,0,DEF,$ == 0
GeometricMean.java,getResult,sumOfLogs,StorelessUnivariateStatistic,1,RET,$.getN() > 0
ThirdMoment.java,increment,n,long,0,DEF,$ < 1
Kurtosis.java,getResult,moment,FourthMoment,0,DEF,$.getN() > 3
Kurtosis.java,getResult,moment,FirstMoment,1,DEF,$.n <= 3
Kurtosis.java,getResult,variance,double,1,DEF,$ < 10E-20
Kurtosis.java,evaluate,length,int,0,DEF,$ > 3
Skewness.java,getResult,moment,FirstMoment,0,RET,$.n < 3
Skewness.java,getResult,variance,double,1,RET,$ < 10E-20
Skewness.java,evaluate,length,int,0,DEF,$ > 2
FourthMoment.java,increment,n,long,0,DEF,$ < 1
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 0
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 1
Variance.java,evaluate,values,double[],0,IllegalArgumentException,$ == null
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
VectorialCovariance.java,increment,v,double[],0,DimensionMismatchException,$.length != sums.length
VectorialCovariance.java,getResult,n,long,0,DEF,$ > 1
SecondMoment.java,increment,n,long,0,DEF,$ < 1
VectorialMean.java,increment,v,double[],0,DimensionMismatchException,$.length != means.length
Percentile.java,evaluate,p,double,0,IllegalArgumentException,$ > 100
Percentile.java,evaluate,p,double,0,IllegalArgumentException,$ <= 0
Percentile.java,evaluate,length,int,0,RET,$ == 0
Percentile.java,evaluate,length,int,0,RET,$ == 1
Percentile.java,evaluate,pos,double,0,RET,$ < 1
Percentile.java,evaluate,pos,double,0,RET,$ >= n
Percentile.java,setQuantile,p,double,0,IllegalArgumentException,$ <= 0
Percentile.java,setQuantile,p,double,0,IllegalArgumentException,$ > 100
Max.java,increment,d,double,0,DEF,$ > value
Min.java,increment,d,double,0,DEF,$ < value
AbstractUnivariateStatistic.java,test,values,double[],0,IllegalArgumentException,$ == null
AbstractUnivariateStatistic.java,test,begin,int,0,IllegalArgumentException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,IllegalArgumentException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,IllegalArgumentException,begin + $ > values.length
AbstractUnivariateStatistic.java,test,begin,int,0,IllegalArgumentException,$ + length > values.length
AbstractUnivariateStatistic.java,test,length,int,0,RET,$ == 0
MultivariateSummaryStatistics.java,append,i,int,0,DEF,$ > 0
MultivariateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof MultivariateSummaryStatistics == false
MultivariateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof MultivariateSummaryStatistics
MultivariateSummaryStatistics.java,checkEmpty,n,long,0,DEF,$ > 0
MultivariateSummaryStatistics.java,checkDimension,dimension,int,0,DimensionMismatchException,$ != k
SummaryStatistics.java,addValue,meanImpl,null,0,DEF,$ instanceof Mean
SummaryStatistics.java,addValue,varianceImpl,null,0,DEF,$ instanceof Variance
SummaryStatistics.java,addValue,geoMeanImpl,null,0,DEF,$ instanceof GeometricMean
SummaryStatistics.java,getMean,mean,Mean,1,RET,$ == meanImpl
SummaryStatistics.java,getVariance,varianceImpl,StorelessUnivariateStatistic,1,RET,$ == variance
SummaryStatistics.java,clear,meanImpl,StorelessUnivariateStatistic,0,DEF,$ != mean
SummaryStatistics.java,clear,varianceImpl,StorelessUnivariateStatistic,0,DEF,$ != variance
SummaryStatistics.java,equals,object,Object,0,RET,$ instanceof SummaryStatistics == false
SummaryStatistics.java,equals,object,null,0,RET,$ instanceof SummaryStatistics
SummaryStatistics.java,checkEmpty,n,long,0,DEF,$ > 0
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.geoMean == source.geoMeanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.max == source.maxImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.mean == source.meanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.min == source.minImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sum == source.sumImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.variance == source.varianceImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumLog == source.sumLogImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumsq == source.sumsqImpl
Product.java,increment,n,long,1,DEF,$ == 0
SumOfLogs.java,getResult,n,int,1,RET,$ > 0
SumOfSquares.java,increment,n,long,1,DEF,$ == 0
Sum.java,increment,n,long,1,DEF,$ == 0
TTestImpl.java,pairedT,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,pairedT,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,pairedT,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,pairedT,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,pairedTTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,pairedTTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,t,observed,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,t,observed,double[],0,IllegalArgumentException,$.length < 2
TTestImpl.java,t,sampleStats,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,t,sampleStats,StatisticalSummary,0,IllegalArgumentException,$.getN() < 2
TTestImpl.java,homoscedasticT,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticT,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticT,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,homoscedasticT,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,t,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,t,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,t,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,t,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,t,sampleStats1,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,t,sampleStats2,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,t,sampleStats2,StatisticalSummary,0,IllegalArgumentException,Math.min(sampleStats1.getN(), $.getN()) < 2
TTestImpl.java,t,sampleStats1,StatisticalSummary,0,IllegalArgumentException,Math.min($.getN(), sampleStats2.getN()) < 2
TTestImpl.java,homoscedasticT,sampleStats1,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticT,sampleStats2,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticT,sampleStats2,StatisticalSummary,0,IllegalArgumentException,Math.min(sampleStats1.getN(), $.getN()) < 2
TTestImpl.java,homoscedasticT,sampleStats1,StatisticalSummary,0,IllegalArgumentException,Math.min($.getN(), sampleStats2.getN()) < 2
TTestImpl.java,tTest,sample,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sample,double[],0,IllegalArgumentException,$.length < 2
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,tTest,sampleStats,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sampleStats,StatisticalSummary,0,IllegalArgumentException,$.getN() < 2
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,tTest,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,tTest,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,homoscedasticTTest,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticTTest,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticTTest,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,homoscedasticTTest,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,homoscedasticTTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,homoscedasticTTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,tTest,sampleStats1,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sampleStats2,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sampleStats2,StatisticalSummary,0,IllegalArgumentException,Math.min(sampleStats1.getN(), $.getN()) < 2
TTestImpl.java,tTest,sampleStats1,StatisticalSummary,0,IllegalArgumentException,Math.min($.getN(), sampleStats2.getN()) < 2
TTestImpl.java,homoscedasticTTest,sampleStats1,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticTTest,sampleStats2,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticTTest,sampleStats2,StatisticalSummary,0,IllegalArgumentException,Math.min(sampleStats1.getN(), $.getN()) < 2
TTestImpl.java,homoscedasticTTest,sampleStats1,StatisticalSummary,0,IllegalArgumentException,Math.min($.getN(), sampleStats2.getN()) < 2
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ > 0.5
OneWayAnovaImpl.java,anovaTest,alpha,double,0,IllegalArgumentException,$ <= 0
OneWayAnovaImpl.java,anovaTest,alpha,double,0,IllegalArgumentException,$ > 0.5
OneWayAnovaImpl.java,anovaStats,categoryData,Collection<double[]>,0,IllegalArgumentException,$.size() < 2
OneWayAnovaImpl.java,anovaStats,array,double[],0,IllegalArgumentException,$.length <= 1
ChiSquareTestImpl.java,chiSquare,expected,double[],0,IllegalArgumentException,$.length < 2
ChiSquareTestImpl.java,chiSquare,expected,double[],0,IllegalArgumentException,$.length != observed.length
ChiSquareTestImpl.java,chiSquare,sumObserved,double,0,DEF,Math.abs(sumExpected - $) > 10E-6
ChiSquareTestImpl.java,chiSquare,sumExpected,double,0,DEF,Math.abs($ - sumObserved) > 10E-6
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,IllegalArgumentException,$ <= 0
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,IllegalArgumentException,$ > 0.5
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,IllegalArgumentException,$ <= 0
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,IllegalArgumentException,$ > 0.5
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],0,IllegalArgumentException,$.length < 2
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],0,IllegalArgumentException,$.length != observed2.length
ChiSquareTestImpl.java,chiSquareDataSetsComparison,countSum1,long,0,IllegalArgumentException,$ * countSum2 == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,countSum2,long,0,IllegalArgumentException,countSum1 * $ == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,i,int,1,IllegalArgumentException,observed1[$] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],1,IllegalArgumentException,$[i] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed2,long[],1,IllegalArgumentException,$[i] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,i,int,1,IllegalArgumentException,observed2[$] == 0
ChiSquareTestImpl.java,chiSquareTestDataSetsComparison,alpha,double,0,IllegalArgumentException,$ <= 0
ChiSquareTestImpl.java,chiSquareTestDataSetsComparison,alpha,double,0,IllegalArgumentException,$ > 0.5
ChiSquareTestImpl.java,checkArray,in,long[][],0,IllegalArgumentException,$.length < 2
ChiSquareTestImpl.java,checkArray,in,long[][],0,IllegalArgumentException,$[0].length < 2
ChiSquareTestImpl.java,isPositive,in,double[],0,RET,$[i] <= 0
ChiSquareTestImpl.java,isPositive,i,int,0,RET,in[$] <= 0
ChiSquareTestImpl.java,isNonNegative,in,long[],0,RET,$[i] < 0
ChiSquareTestImpl.java,isNonNegative,i,int,0,RET,in[$] < 0
ChiSquareTestImpl.java,isNonNegative,in,long[][],0,RET,$[i][j] < 0
ChiSquareTestImpl.java,isNonNegative,i,int,0,RET,in[$][j] < 0
ChiSquareTestImpl.java,isNonNegative,j,int,0,RET,in[i][$] < 0
StatUtils.java,sumDifference,n,int,0,IllegalArgumentException,$ != sample2.length
StatUtils.java,sumDifference,n,int,0,IllegalArgumentException,$ < 1
StatUtils.java,varianceDifference,n,int,0,IllegalArgumentException,$ < 2
StatUtils.java,varianceDifference,n,int,0,IllegalArgumentException,$ != sample2.length
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ == j
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ < p
OLSMultipleLinearRegression.java,solveUpperTriangular,constants,RealMatrix,0,IllegalArgumentException,$.getColumnDimension() != 1
OLSMultipleLinearRegression.java,isUpperTriangular,r,int,0,RET,Math.abs(m.getEntry($, c)) > epsilon
OLSMultipleLinearRegression.java,isUpperTriangular,c,int,0,RET,Math.abs(m.getEntry(r, $)) > epsilon
OLSMultipleLinearRegression.java,isUpperTriangular,m,RealMatrix,0,RET,Math.abs($.getEntry(r, c)) > epsilon
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,IllegalArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,y,double[],0,IllegalArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,IllegalArgumentException,$.length != y.length
AbstractMultipleLinearRegression.java,validateCovarianceData,covariance,double[][],0,IllegalArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateCovarianceData,x,double[][],0,IllegalArgumentException,$.length != covariance.length
AbstractMultipleLinearRegression.java,validateCovarianceData,covariance,double[][],0,IllegalArgumentException,$.length > 0
SimpleRegression.java,addData,n,long,1,DEF,$ == 0
SimpleRegression.java,addData,n,long,0,DEF,$ > 2
SimpleRegression.java,removeData,n,long,0,DEF,$ > 0
SimpleRegression.java,removeData,n,long,0,DEF,$ > 2
SimpleRegression.java,getSlope,n,long,0,RET,$ < 2
SimpleRegression.java,getTotalSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getMeanSquareError,n,long,0,RET,$ < 3
SimpleRegression.java,getR,b1,double,0,DEF,$ < 0
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,IllegalArgumentException,$ >= 1
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,IllegalArgumentException,$ <= 0
SimpleRegression.java,setDistribution,n,long,0,DEF,$ > 2
GLSMultipleLinearRegression.java,getOmegaInverse,OmegaInverse,RealMatrix,0,DEF,$ == null
Frequency.java,addValue,v,null,0,DEF,$ instanceof Integer
Frequency.java,addValue,count,Long,1,DEF,$ == null
Frequency.java,getCount,v,null,0,RET,$ instanceof Integer
Frequency.java,getCount,count,Long,0,DEF,$ != null
Frequency.java,getCumFreq,v,null,0,RET,$ instanceof Integer
Frequency.java,getCumFreq,c,Comparator,0,DEF,$ == null
Frequency.java,getCumFreq,value,Long,0,DEF,$ != null
Frequency.java,getCumFreq,c,Comparator,0,RET,$.compare(v, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,v,Object,0,RET,c.compare($, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,freqTable,TreeMap,0,RET,c.compare(v, $.firstKey()) < 0
Frequency.java,getCumFreq,c,Comparator,0,RET,$.compare(v, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,v,Object,0,RET,c.compare($, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,freqTable,TreeMap,0,RET,c.compare(v, $.lastKey()) >= 0
Frequency.java,getCumFreq,c,Comparator,1,DEF,$.compare(v, nextValue) > 0
Frequency.java,getCumFreq,v,Object,1,DEF,c.compare($, nextValue) > 0
Frequency.java,getCumFreq,nextValue,Object,1,DEF,c.compare(v, $) > 0
MathException.java,translate,cachedResources,ResourceBundle,0,DEF,$ == null
FDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
FDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
FDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
FDistributionImpl.java,getInitialDomain,d,double,0,DEF,$ > 2.0
FDistributionImpl.java,setNumeratorDegreesOfFreedom,degreesOfFreedom,double,0,IllegalArgumentException,$ <= 0.0
FDistributionImpl.java,setDenominatorDegreesOfFreedom,degreesOfFreedom,double,0,IllegalArgumentException,$ <= 0.0
PoissonDistributionImpl.java,setMean,p,double,0,IllegalArgumentException,$ <= 0
PoissonDistributionImpl.java,probability,x,int,0,RET,$ < 0
PoissonDistributionImpl.java,probability,x,int,0,RET,$ == Integer.MAX_VALUE
PoissonDistributionImpl.java,cumulativeProbability,x,int,0,RET,$ < 0
PoissonDistributionImpl.java,cumulativeProbability,x,int,0,RET,$ == Integer.MAX_VALUE
HypergeometricDistributionImpl.java,HypergeometricDistributionImpl,numberOfSuccesses,int,0,IllegalArgumentException,$ > populationSize
HypergeometricDistributionImpl.java,HypergeometricDistributionImpl,sampleSize,int,0,IllegalArgumentException,$ > populationSize
HypergeometricDistributionImpl.java,setNumberOfSuccesses,num,int,0,IllegalArgumentException,$ < 0
HypergeometricDistributionImpl.java,setPopulationSize,size,int,0,IllegalArgumentException,$ <= 0
HypergeometricDistributionImpl.java,setSampleSize,size,int,0,IllegalArgumentException,$ < 0
GammaDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
GammaDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
GammaDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
GammaDistributionImpl.java,setAlpha,alpha,double,0,IllegalArgumentException,$ <= 0.0
GammaDistributionImpl.java,setBeta,beta,double,0,IllegalArgumentException,$ <= 0.0
GammaDistributionImpl.java,density,x,Double,0,RET,$ < 0
GammaDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
GammaDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
TDistributionImpl.java,setDegreesOfFreedom,degreesOfFreedom,double,0,IllegalArgumentException,$ <= 0.0
TDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ == 0.0
TDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ < 0.0
TDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
TDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
BinomialDistributionImpl.java,setNumberOfTrials,trials,int,0,IllegalArgumentException,$ < 0
BinomialDistributionImpl.java,setProbabilityOfSuccess,p,double,0,IllegalArgumentException,$ < 0.0
BinomialDistributionImpl.java,setProbabilityOfSuccess,p,double,0,IllegalArgumentException,$ > 1.0
BinomialDistributionImpl.java,cumulativeProbability,x,int,1,DEF,$ < 0
BinomialDistributionImpl.java,probability,x,int,1,DEF,$ < 0
BinomialDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
BinomialDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
ExponentialDistributionImpl.java,setMean,mean,double,0,IllegalArgumentException,$ <= 0.0
ExponentialDistributionImpl.java,density,x,Double,0,RET,$ < 0
ExponentialDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ < 0.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ > 1.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1.0
ExponentialDistributionImpl.java,getDomainUpperBound,p,double,1,RET,$ < .5
ExponentialDistributionImpl.java,getInitialDomain,p,double,1,RET,$ < .5
ZipfDistributionImpl.java,setNumberOfElements,n,int,0,DEF,$ <= 0
ZipfDistributionImpl.java,setExponent,s,double,0,DEF,$ <= 0.0
ZipfDistributionImpl.java,probability,x,int,0,RET,$ <= 0
ZipfDistributionImpl.java,cumulativeProbability,x,int,1,RET,$ <= 0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ < 0.0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ > 1.0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
CauchyDistributionImpl.java,setScale,s,double,0,IllegalArgumentException,$ <= 0.0
CauchyDistributionImpl.java,getDomainLowerBound,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ > .5
NormalDistributionImpl.java,setStandardDeviation,sd,double,0,IllegalArgumentException,$ <= 0.0
NormalDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
NormalDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
NormalDistributionImpl.java,getDomainLowerBound,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ > .5
PascalDistributionImpl.java,setNumberOfSuccesses,successes,int,0,IllegalArgumentException,$ < 0
PascalDistributionImpl.java,setProbabilityOfSuccess,p,double,0,IllegalArgumentException,$ < 0.0
PascalDistributionImpl.java,setProbabilityOfSuccess,p,double,0,IllegalArgumentException,$ > 1.0
PascalDistributionImpl.java,cumulativeProbability,x,int,1,DEF,$ < 0
PascalDistributionImpl.java,probability,x,int,1,DEF,$ < 0
PascalDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
PascalDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
AbstractDistribution.java,cumulativeProbability,x0,double,0,IllegalArgumentException,$ > x1
AbstractIntegerDistribution.java,cumulativeProbability,x0,double,0,IllegalArgumentException,$ > x1
AbstractIntegerDistribution.java,cumulativeProbability,x0,double,1,RET,Math.floor($) < x0
AbstractIntegerDistribution.java,probability,fl,double,1,RET,$ == x
AbstractIntegerDistribution.java,cumulativeProbability,x0,int,0,IllegalArgumentException,$ > x1
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,IllegalArgumentException,$ < 0.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,IllegalArgumentException,$ > 1.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,pm,double,1,DEF,$ > p
AbstractIntegerDistribution.java,inverseCumulativeProbability,xm,int,1,DEF,$ == x1
AbstractIntegerDistribution.java,inverseCumulativeProbability,xm,int,1,DEF,$ == x0
ChiSquaredDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
ChiSquaredDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
ChiSquaredDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
ChiSquaredDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
AbstractContinuousDistribution.java,inverseCumulativeProbability,p,double,0,IllegalArgumentException,$ < 0.0
AbstractContinuousDistribution.java,inverseCumulativeProbability,p,double,0,IllegalArgumentException,$ > 1.0
AbstractContinuousDistribution.java,inverseCumulativeProbability,rootFindingFunction,UnivariateRealFunction,0,RET,Math.abs($.value(lowerBound)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,lowerBound,double,0,RET,Math.abs(rootFindingFunction.value($)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,upperBound,double,0,RET,Math.abs(rootFindingFunction.value($)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,rootFindingFunction,UnivariateRealFunction,0,RET,Math.abs($.value(upperBound)) < 1E-6
BetaDistributionImpl.java,density,x,Double,1,RET,$ < 0
BetaDistributionImpl.java,density,x,Double,1,RET,$ > 1
BetaDistributionImpl.java,density,x,Double,1,MathException:RET,$ == 0
BetaDistributionImpl.java,density,alpha,double,0,MathException,$ < 1
BetaDistributionImpl.java,density,x,Double,1,MathException:RET,$ == 1
BetaDistributionImpl.java,density,beta,double,0,MathException,$ < 1
BetaDistributionImpl.java,inverseCumulativeProbability,p,double,1,RET,$ == 0
BetaDistributionImpl.java,inverseCumulativeProbability,p,double,1,RET,$ == 1
BetaDistributionImpl.java,cumulativeProbability,x,double,1,RET,$ <= 0
BetaDistributionImpl.java,cumulativeProbability,x,double,1,RET,$ >= 1
WeibullDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ < 0.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ > 1.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
WeibullDistributionImpl.java,setShape,alpha,double,0,IllegalArgumentException,$ <= 0.0
WeibullDistributionImpl.java,setScale,beta,double,0,IllegalArgumentException,$ <= 0.0
FastFourierTransformer.java,fft,f,double[],0,RET,$.length == 1
FastFourierTransformer.java,fft,N,int,0,RET,$ == 1
FastFourierTransformer.java,fft,N,int,0,RET,$ == 2
FastFourierTransformer.java,computeOmega,n,int,0,DEF,$ == 0
FastFourierTransformer.java,computeOmega,n,int,0,RET,$ == omegaCount
FastFourierTransformer.java,computeOmega,omegaCount,int,0,RET,n + $ == 0
FastFourierTransformer.java,computeOmega,n,int,0,RET,$ + omegaCount == 0
FastFourierTransformer.java,sample,n,int,0,DEF,$ <= 0
FastFourierTransformer.java,verifyInterval,lower,double,0,DEF,$ >= upper
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == dimensionSize.length
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == d
FastFourierTransformer.java,MultiDimensionalComplexMatrix,dimensionSize,int[],0,DEF,$.length < numOfDimensions
FastFourierTransformer.java,MultiDimensionalComplexMatrix,dimensionSize,int[],0,DEF,$.length > numOfDimensions
FastFourierTransformer.java,get,vector,int[],0,DEF,$ == null
FastFourierTransformer.java,get,dimensionSize,int[],0,DEF,$.length > 1
FastFourierTransformer.java,get,vector,int[],0,DEF,$ != null
FastFourierTransformer.java,get,vector,int[],0,DEF,$.length != dimensionSize.length
FastFourierTransformer.java,set,vector,int[],0,RET,$ == null
FastFourierTransformer.java,set,dimensionSize,int[],0,DEF,$.length > 1
FastFourierTransformer.java,set,vector,int[],0,DEF,$ != null
FastFourierTransformer.java,set,vector,int[],0,DEF,$.length != dimensionSize.length
FastCosineTransformer.java,fct,N,int,0,RET,$ == 1
FastSineTransformer.java,fst,f,double[],0,DEF,$[0] != 0.0
FastSineTransformer.java,fst,N,int,0,RET,$ == 1
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,source.substring($, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,endIndex,int,0,DEF,source.substring(startIndex, $).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,source,String,0,DEF,$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,sb,StringBuffer,0,DEF,source.substring(startIndex, endIndex).compareTo($.toString()) == 0
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,$ == endIndex
CompositeFormat.java,parseNumber,number,Number,0,DEF,$ != null
CompositeFormat.java,parseFixedstring,startIndex,int,0,RET,source.substring($, endIndex).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,endIndex,int,0,RET,source.substring(startIndex, $).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,expected,String,0,RET,source.substring(startIndex, endIndex).compareTo($) != 0
CompositeFormat.java,parseFixedstring,source,String,0,RET,$.substring(startIndex, endIndex).compareTo(expected) != 0
ResizableDoubleArray.java,addElement,startIndex,int,0,DEF,($ + numElements) > internalArray.length
ResizableDoubleArray.java,addElement,numElements,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,addElementRolling,startIndex,int,0,DEF,($ + (numElements + 1)) > internalArray.length
ResizableDoubleArray.java,addElementRolling,numElements,int,0,DEF,(startIndex + ($ + 1)) > internalArray.length
ResizableDoubleArray.java,substituteMostRecentElement,numElements,int,0,DEF,$ < 1
ResizableDoubleArray.java,checkContractExpand,contractionCritera,float,0,IllegalArgumentException,$ < expansionFactor
ResizableDoubleArray.java,checkContractExpand,contractionCriteria,float,0,IllegalArgumentException,$ <= 1.0
ResizableDoubleArray.java,checkContractExpand,expansionFactor,float,0,IllegalArgumentException,$ <= 1.0
ResizableDoubleArray.java,discardExtremeElements,i,int,1,IllegalArgumentException,$ > numElements
ResizableDoubleArray.java,discardExtremeElements,i,int,1,IllegalArgumentException,$ < 0
ResizableDoubleArray.java,expand,expansionMode,int,1,DEF,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,getElement,index,int,1,DEF,$ >= numElements
ResizableDoubleArray.java,getElement,index,int,1,RET,$ >= 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ < 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ + 1 > numElements
ResizableDoubleArray.java,setElement,startIndex,int,0,DEF,($ + index) >= internalArray.length
ResizableDoubleArray.java,setElement,index,int,0,DEF,(startIndex + $) >= internalArray.length
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,IllegalArgumentException,$ != MULTIPLICATIVE_MODE
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,IllegalArgumentException,$ != ADDITIVE_MODE
ResizableDoubleArray.java,setInitialCapacity,initialCapacity,int,1,DEF,$ > 0
ResizableDoubleArray.java,setNumElements,i,int,0,IllegalArgumentException,$ < 0
ResizableDoubleArray.java,setNumElements,startIndex,int,0,DEF,($ + i) > internalArray.length
ResizableDoubleArray.java,setNumElements,i,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,shouldContract,expansionMode,int,1,RET,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,equals,object,Object,0,RET,$ instanceof ResizableDoubleArray == false
ResizableDoubleArray.java,equals,object,null,0,RET,$ instanceof ResizableDoubleArray
ContinuedFraction.java,evaluate,a,double,1,DEF,$ != 0.0
ContinuedFraction.java,evaluate,b,double,1,DEF,$ != 0
ContinuedFraction.java,evaluate,n,int,0,MaxIterationsExceededException,$ >= maxIterations
MathUtils.java,addAndCheck,s,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,addAndCheck,s,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,addAndCheck,a,long,1,DEF,$ > b
MathUtils.java,addAndCheck,a,long,1,ArithmeticException,$ < 0
MathUtils.java,addAndCheck,b,long,1,ArithmeticException,$ < 0
MathUtils.java,addAndCheck,b,long,1,DEF,Long.MIN_VALUE - $ <= a
MathUtils.java,binomialCoefficient,n,int,0,IllegalArgumentException,$ < k
MathUtils.java,binomialCoefficient,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,binomialCoefficient,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficient,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficient,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficient,result,long,0,ArithmeticException,$ == Long.MAX_VALUE
MathUtils.java,binomialCoefficientLog,n,int,0,IllegalArgumentException,$ < k
MathUtils.java,binomialCoefficientLog,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 1
MathUtils.java,equals,x,double[],0,RET,$ == null
MathUtils.java,equals,y,double[],0,RET,$ == null
MathUtils.java,equals,x,double[],0,RET,$.length != y.length
MathUtils.java,factorial,result,long,0,ArithmeticException,$ == Long.MAX_VALUE
MathUtils.java,factorialDouble,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,factorialLog,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,gcd,u,int,0,RET,$ == 0
MathUtils.java,gcd,v,int,0,RET,$ == 0
MathUtils.java,gcd,u,int,0,DEF,$ > 0
MathUtils.java,gcd,v,int,0,DEF,$ > 0
MathUtils.java,gcd,k,int,0,ArithmeticException,$ == 31
MathUtils.java,gcd,t,int,1,DEF,$ > 0
MathUtils.java,mulAndCheck,m,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,mulAndCheck,m,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,mulAndCheck,a,long,1,DEF,$ > b
MathUtils.java,mulAndCheck,a,long,1,ArithmeticException,$ < 0
MathUtils.java,mulAndCheck,b,long,1,ArithmeticException,$ < 0
MathUtils.java,mulAndCheck,b,long,1,ArithmeticException,$ > 0
MathUtils.java,mulAndCheck,b,long,1,DEF,Long.MIN_VALUE / $ <= a
MathUtils.java,mulAndCheck,a,long,1,ArithmeticException,$ > 0
MathUtils.java,nextAfter,d,double,0,RET,$ == 0
MathUtils.java,nextAfter,d,double,1,RET,$ * (direction - $) >= 0
MathUtils.java,nextAfter,direction,double,1,RET,d * ($ - d) >= 0
MathUtils.java,nextAfter,mantissa,long,1,RET,$ == 0x000fffffffffffffL
MathUtils.java,nextAfter,mantissa,long,1,RET,$ == 0L
MathUtils.java,scalb,d,double,0,RET,$ == 0
MathUtils.java,roundUnscaled,sign,double,1,DEF,$ == -1
MathUtils.java,roundUnscaled,sign,double,1,DEF,$ == -1
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ < 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ >= 0.5
MathUtils.java,subAndCheck,s,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,subAndCheck,s,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,subAndCheck,b,long,1,ArithmeticException,$ == Long.MIN_VALUE
MathUtils.java,subAndCheck,a,long,1,DEF,$ < 0
DefaultTransformer.java,transform,o,Object,0,MathException,$ == null
DefaultTransformer.java,transform,o,null,0,RET,$ instanceof Number
TransformerMap.java,transform,o,null,1,DEF,$ instanceof Number
TransformerMap.java,transform,o,null,1,DEF,$ instanceof String
TransformerMap.java,transform,trans,NumberTransformer,0,DEF,$ != null
OpenIntToDoubleHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToDoubleHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToDoubleHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToDoubleHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToDoubleHashMap.java,key,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,key,current,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,value,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,value,current,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,advance,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,advance,current,int,0,DEF,$ < 0
Fraction.java,Fraction,a0,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,value,double,0,RET,Math.abs(a0 - $) < epsilon
Fraction.java,Fraction,a0,long,0,RET,Math.abs($ - value) < epsilon
Fraction.java,Fraction,p2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,q2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,n,int,1,DEF,$ < maxIterations
Fraction.java,Fraction,convergent,double,1,DEF,Math.abs($ - value) > epsilon
Fraction.java,Fraction,value,double,1,DEF,Math.abs(convergent - $) > epsilon
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,n,int,0,FractionConversionException,$ >= maxIterations
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,den,int,0,DEF,$ == 0
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,Fraction,num,int,0,DEF,$ == Integer.MIN_VALUE
Fraction.java,Fraction,den,int,0,DEF,$ == Integer.MIN_VALUE
Fraction.java,Fraction,d,int,0,DEF,$ > 1
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,abs,numerator,int,1,DEF,$ >= 0
Fraction.java,compareTo,first,double,1,DEF,$ < second
Fraction.java,compareTo,first,double,0,DEF,$ > second
Fraction.java,equals,other,Object,1,DEF,$ == null
Fraction.java,negate,numerator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,addSub,fraction,Fraction,0,IllegalArgumentException,$ == null
Fraction.java,addSub,numerator,int,0,RET,$ == 0
Fraction.java,addSub,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,addSub,d1,int,0,RET,$==1
Fraction.java,addSub,w,BigInteger,0,DEF,$.bitLength() > 31
Fraction.java,multiply,fraction,Fraction,0,IllegalArgumentException,$ == null
Fraction.java,multiply,numerator,int,0,RET,$ == 0
Fraction.java,multiply,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,divide,fraction,Fraction,0,IllegalArgumentException,$ == null
Fraction.java,divide,fraction,Fraction,0,DEF,$.numerator == 0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$ == 0
Fraction.java,getReducedFraction,numerator,int,0,RET,$==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,numerator,int,0,DEF,($&1)==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$ < 0
Fraction.java,getReducedFraction,numerator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Fraction
FractionFormat.java,format,obj,null,1,IllegalArgumentException,$ instanceof Number
FractionFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
FractionFormat.java,parse,num,Number,0,RET,$ == null
FractionFormat.java,parse,den,Number,0,RET,$ == null
FractionFormat.java,setDenominatorFormat,format,NumberFormat,0,IllegalArgumentException,$ == null
FractionFormat.java,setNumeratorFormat,format,NumberFormat,0,IllegalArgumentException,$ == null
FractionFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
FractionFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
ProperFractionFormat.java,format,whole,int,0,DEF,$ != 0
ProperFractionFormat.java,parse,ret,Fraction,0,RET,$ != null
ProperFractionFormat.java,parse,whole,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,parse,den,Number,0,RET,$ == null
ProperFractionFormat.java,parse,den,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,setWholeFormat,format,NumberFormat,0,IllegalArgumentException,$ == null
AbstractIntegrator.java,sanityChecks,equations,FirstOrderDifferentialEquations,0,IntegratorException,$.getDimension() != y0.length
AbstractIntegrator.java,sanityChecks,equations,FirstOrderDifferentialEquations,0,IntegratorException,$.getDimension() != y.length
ContinuousOutputModel.java,append,model,ContinuousOutputModel,0,RET,$.steps.size() == 0
ContinuousOutputModel.java,append,steps,List<StepInterpolator>,1,DEF,$.size() == 0
ContinuousOutputModel.java,handleStep,steps,List<StepInterpolator>,0,DEF,$.size() == 0
ContinuousOutputModel.java,setInterpolatedTime,sMin,StepInterpolator,0,RET,locatePoint(time, $) <= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMin) <= 0
ContinuousOutputModel.java,setInterpolatedTime,sMax,StepInterpolator,0,RET,locatePoint(time, $) >= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMax) >= 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ < 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ > 0
ContinuousOutputModel.java,setInterpolatedTime,tMin,double,1,DEF,Math.abs(tMed - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,Math.abs($ - tMin) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMax,double,1,DEF,Math.abs($ - tMed) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,Math.abs(tMax - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,index,int,1,DEF,$ < low
ContinuousOutputModel.java,setInterpolatedTime,index,int,0,DEF,$ > high
AdamsBashforthIntegrator.java,integrate,y,double[],0,DEF,$ != y0
DormandPrince54StepInterpolator.java,DormandPrince54StepInterpolator,interpolator,DormandPrince54StepInterpolator,1,DEF,$.v1 == null
DormandPrince54StepInterpolator.java,computeInterpolatedState,v1,double[],0,DEF,$ == null
RungeKuttaIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,setStabilityCheck,stabilityReduction,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStabilityCheck,stabilityReduction,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl3,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl3,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl4,double,1,DEF,$ < 1.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl4,double,1,DEF,$ > 999.9
GraggBulirschStoerIntegrator.java,setOrderControl,maxOrder,int,0,DEF,$ <= 6
GraggBulirschStoerIntegrator.java,setOrderControl,maxOrder,int,0,DEF,$ % 2 != 0
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$ == null
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$.length != size
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudif,int,1,DEF,$ <= 0
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudif,int,1,DEF,$ >= 7
GraggBulirschStoerIntegrator.java,rescale,vecAbsoluteTolerance,double[],1,DEF,$ == null
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,DEF,2 * $ == n
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,RET,$ <= maxChecks
GraggBulirschStoerIntegrator.java,tryStep,k,int,0,RET,$ < maxIter
GraggBulirschStoerIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize > t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ > t
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize < t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ < t
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 0
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > 1.0e15
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > maxError
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ > 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,mu,int,0,DEF,$ >= 0
GraggBulirschStoerIntegrator.java,integrate,interpError,double,0,DEF,$ > 10.0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 1
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ <= targetIter
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 2
GraggBulirschStoerIntegrator.java,integrate,optimalIter,int,1,DEF,$ <= k
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ < targetIter
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ < minStep
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,IntegratorException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,IntegratorException,$.length != y0.length
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,IntegratorException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,IntegratorException,$.length != y0.length
AdaptiveStepsizeIntegrator.java,initializeStep,initialStep,double,0,RET,$ > 0
AdaptiveStepsizeIntegrator.java,filterStep,h,double,0,IntegratorException,Math.abs($) < minStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,0,DEF,$ < -maxStep
EmbeddedRungeKuttaIntegrator.java,integrate,y,double[],0,DEF,$ != y0
EmbeddedRungeKuttaIntegrator.java,integrate,vecAbsoluteTolerance,double[],1,DEF,$ != null
EmbeddedRungeKuttaIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
MultistepIntegrator.java,start,store,StoringStepHandler,0,DEF,$.getFinalState() != null
MultistepIntegrator.java,eventOccurred,action,int,0,RET,$ == RESET_DERIVATIVES
MultistepIntegrator.java,eventOccurred,action,int,0,RET,$ == RESET_STATE
MultistepIntegrator.java,handleStep,count,int,0,DEF,$++ < n
MultistepIntegrator.java,handleStep,count,int,0,DEF,$ == n
AdamsMoultonIntegrator.java,integrate,y,double[],0,DEF,$ != y0
DormandPrince853StepInterpolator.java,DormandPrince853StepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState == null
DormandPrince853StepInterpolator.java,computeInterpolatedState,v,double[][],0,DEF,$ == null
DormandPrince853StepInterpolator.java,doFinalize,currentState,double[],0,RET,$ == null
MultistepStepInterpolator.java,MultistepStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
DormandPrince853Integrator.java,estimateError,den,double,0,DEF,$ <= 0.0
RungeKuttaStepInterpolator.java,RungeKuttaStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ < 0
GraggBulirschStoerStepInterpolator.java,resetTables,polynoms,double[][],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ <= 4
GraggBulirschStoerStepInterpolator.java,GraggBulirschStoerStepInterpolator,interpolator,GraggBulirschStoerStepInterpolator,1,DEF,$.polynoms == null
GraggBulirschStoerStepInterpolator.java,computeCoefficients,polynoms,double[][],0,DEF,$ == null
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,RET,$ < 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 1
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 2
GraggBulirschStoerStepInterpolator.java,estimateError,currentDegree,int,0,DEF,$ >= 5
GraggBulirschStoerStepInterpolator.java,computeInterpolatedState,currentDegree,int,0,DEF,$ > 3
GraggBulirschStoerStepInterpolator.java,computeInterpolatedState,h,double,0,DEF,$ == 0
StepNormalizer.java,handleStep,lastState,double[],0,DEF,$ == null
AbstractStepInterpolator.java,AbstractStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
EventState.java,evaluateStep,gb,double,1,FunctionEvaluationException:RET,$ >= 0
EventState.java,evaluateStep,root,double,1,DEF,Math.abs($ - ta) <= convergence
EventState.java,evaluateStep,ta,double,1,DEF,Math.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,0,RET,Math.abs(previousEventTime - $) > convergence
EventState.java,evaluateStep,previousEventTime,double,0,RET,Math.abs($ - root) > convergence
EventState.java,evaluateStep,pendingEventTime,double,0,RET,Math.abs(t1 - $) <= convergence
EventState.java,evaluateStep,t1,double,0,RET,Math.abs($ - pendingEventTime) <= convergence
EventState.java,evaluateStep,cause,Throwable,1,DEF,$ != null
EventState.java,evaluateStep,cause,null,1,DEF,$ instanceof DerivativeException
EventState.java,evaluateStep,cause,Throwable,0,DEF,$ != null
EventState.java,evaluateStep,cause,null,0,DEF,$ instanceof EventException
EventState.java,reset,nextAction,int,0,DEF,$ == EventHandler.RESET_STATE
CombinedEventsManager.java,evaluateStep,first,EventState,1,DEF,$ == null
MathRuntimeException.java,translate,cachedResources,ResourceBundle,0,DEF,$ == null
QRDecompositionImpl.java,QRDecompositionImpl,qr,double[][],0,DEF,$[minor][minor] > 0
QRDecompositionImpl.java,QRDecompositionImpl,minor,int,0,DEF,qr[$][$] > 0
QRDecompositionImpl.java,QRDecompositionImpl,a,double,0,DEF,$ != 0.0
QRDecompositionImpl.java,getQ,qr,double[][],0,DEF,$[minor][minor] != 0.0
QRDecompositionImpl.java,getQ,minor,int,0,DEF,qr[$][$] != 0.0
RealMatrixImpl.java,RealMatrixImpl,rowDimension,int,0,IllegalArgumentException,$ <= 0
RealMatrixImpl.java,RealMatrixImpl,columnDimension,int,0,IllegalArgumentException,$ <= 0
RealMatrixImpl.java,RealMatrixImpl,d,double[][],0,NullPointerException,$ == null
RealMatrixImpl.java,RealMatrixImpl,nRows,int,0,IllegalArgumentException,$ == 0
RealMatrixImpl.java,RealMatrixImpl,nCols,int,0,IllegalArgumentException,$ == 0
RealMatrixImpl.java,RealMatrixImpl,r,int,0,IllegalArgumentException,d[$].length != nCols
RealMatrixImpl.java,RealMatrixImpl,d,double[][],0,IllegalArgumentException,$[r].length != nCols
RealMatrixImpl.java,getSubMatrix,startRow,int,0,MatrixIndexException,$ < 0
RealMatrixImpl.java,getSubMatrix,startRow,int,0,MatrixIndexException,$ > endRow
RealMatrixImpl.java,getSubMatrix,endRow,int,0,MatrixIndexException,$ > data.length
RealMatrixImpl.java,getSubMatrix,startColumn,int,0,MatrixIndexException,$ < 0
RealMatrixImpl.java,getSubMatrix,startColumn,int,0,MatrixIndexException,$ > endColumn
RealMatrixImpl.java,getSubMatrix,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
RealMatrixImpl.java,getSubMatrix,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
RealMatrixImpl.java,setSubMatrix,row,int,0,MatrixIndexException,$ < 0
RealMatrixImpl.java,setSubMatrix,column,int,0,MatrixIndexException,$ < 0
RealMatrixImpl.java,setSubMatrix,nRows,int,0,IllegalArgumentException,$ == 0
RealMatrixImpl.java,setSubMatrix,nCols,int,0,IllegalArgumentException,$ == 0
RealMatrixImpl.java,setSubMatrix,r,int,0,IllegalArgumentException,subMatrix[$].length != nCols
RealMatrixImpl.java,setSubMatrix,subMatrix,double[][],0,IllegalArgumentException,$[r].length != nCols
RealMatrixImpl.java,setSubMatrix,data,double[][],0,MatrixIndexException,$ == null
RealMatrixImpl.java,setSubMatrix,row,int,0,MatrixIndexException,$ > 0
RealMatrixImpl.java,setSubMatrix,column,int,0,MatrixIndexException,$ > 0
RealMatrixImpl.java,isSingular,lu,double[][],1,RET,$ == null
RealMatrixImpl.java,operate,v,double[],0,IllegalArgumentException,$.length != nCols
RealMatrixImpl.java,preMultiply,v,double[],0,IllegalArgumentException,$.length != nRows
RealMatrixImpl.java,solve,b,double[],0,IllegalArgumentException,$.length != nRows
RealMatrixImpl.java,luDecompose,nRows,int,0,InvalidMatrixException,$ != nCols
RealMatrixImpl.java,luDecompose,sum,double,0,DEF,Math.abs($) > largest
RealMatrixImpl.java,luDecompose,col,int,0,InvalidMatrixException,Math.abs(lu[max][$]) < TOO_SMALL
RealMatrixImpl.java,luDecompose,max,int,0,InvalidMatrixException,Math.abs(lu[$][col]) < TOO_SMALL
RealMatrixImpl.java,luDecompose,lu,double[][],0,InvalidMatrixException,Math.abs($[max][col]) < TOO_SMALL
RealMatrixImpl.java,luDecompose,max,int,0,DEF,$ != col
RealMatrixImpl.java,toString,data,double[][],0,DEF,$ != null
RealMatrixImpl.java,toString,i,int,0,DEF,$ > 0
RealMatrixImpl.java,toString,j,int,0,DEF,$ > 0
RealMatrixImpl.java,equals,object,Object,0,RET,$ instanceof RealMatrixImpl == false
RealMatrixImpl.java,equals,object,null,0,RET,$ instanceof RealMatrixImpl
RealMatrixImpl.java,equals,m,RealMatrix,0,RET,$.getColumnDimension() != nCols
RealMatrixImpl.java,equals,m,RealMatrix,0,RET,$.getRowDimension() != nRows
RealMatrixImpl.java,getLUMatrix,lu,double[][],0,DEF,$ == null
BigMatrixImpl.java,BigMatrixImpl,rowDimension,int,0,IllegalArgumentException,$ <=0
BigMatrixImpl.java,BigMatrixImpl,columnDimension,int,0,IllegalArgumentException,$ <=0
BigMatrixImpl.java,BigMatrixImpl,d,BigDecimal[][],0,NullPointerException,$ == null
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,r,int,0,IllegalArgumentException,d[$].length != nCols
BigMatrixImpl.java,BigMatrixImpl,d,BigDecimal[][],0,IllegalArgumentException,$[r].length != nCols
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,d,double[][],0,IllegalArgumentException,$[row].length != nCols
BigMatrixImpl.java,BigMatrixImpl,row,int,0,IllegalArgumentException,d[$].length != nCols
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,d,String[][],0,IllegalArgumentException,$[row].length != nCols
BigMatrixImpl.java,BigMatrixImpl,row,int,0,IllegalArgumentException,d[$].length != nCols
BigMatrixImpl.java,getSubMatrix,startRow,int,0,MatrixIndexException,$ < 0
BigMatrixImpl.java,getSubMatrix,startRow,int,0,MatrixIndexException,$ > endRow
BigMatrixImpl.java,getSubMatrix,endRow,int,0,MatrixIndexException,$ > data.length
BigMatrixImpl.java,getSubMatrix,startColumn,int,0,MatrixIndexException,$ < 0
BigMatrixImpl.java,getSubMatrix,startColumn,int,0,MatrixIndexException,$ > endColumn
BigMatrixImpl.java,getSubMatrix,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
BigMatrixImpl.java,getSubMatrix,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
BigMatrixImpl.java,setSubMatrix,row,int,0,MatrixIndexException,$ < 0
BigMatrixImpl.java,setSubMatrix,column,int,0,MatrixIndexException,$ < 0
BigMatrixImpl.java,setSubMatrix,nRows,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,setSubMatrix,nCols,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,setSubMatrix,r,int,0,IllegalArgumentException,subMatrix[$].length != nCols
BigMatrixImpl.java,setSubMatrix,subMatrix,BigDecimal[][],0,IllegalArgumentException,$[r].length != nCols
BigMatrixImpl.java,setSubMatrix,data,BigDecimal[][],0,MatrixIndexException,$ == null
BigMatrixImpl.java,setSubMatrix,row,int,0,MatrixIndexException,$ > 0
BigMatrixImpl.java,setSubMatrix,column,int,0,MatrixIndexException,$ > 0
BigMatrixImpl.java,isSingular,lu,BigDecimal[][],1,RET,$ == null
BigMatrixImpl.java,preMultiply,v,BigDecimal[],0,IllegalArgumentException,$.length != nRows
BigMatrixImpl.java,solve,b,BigDecimal[],0,IllegalArgumentException,$.length != nRows
BigMatrixImpl.java,luDecompose,nRows,int,0,InvalidMatrixException,$ != nCols
BigMatrixImpl.java,luDecompose,largest,BigDecimal,0,DEF,sum.abs().compareTo($) == 1
BigMatrixImpl.java,luDecompose,sum,BigDecimal,0,DEF,$.abs().compareTo(largest) == 1
BigMatrixImpl.java,luDecompose,col,int,0,InvalidMatrixException,lu[max][$].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,TOO_SMALL,BigDecimal,0,InvalidMatrixException,lu[max][col].abs().compareTo($) <= 0
BigMatrixImpl.java,luDecompose,max,int,0,InvalidMatrixException,lu[$][col].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,lu,BigDecimal[][],0,InvalidMatrixException,$[max][col].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,max,int,0,DEF,$ != col
BigMatrixImpl.java,toString,data,BigDecimal[][],0,DEF,$ != null
BigMatrixImpl.java,toString,i,int,0,DEF,$ > 0
BigMatrixImpl.java,toString,j,int,0,DEF,$ > 0
BigMatrixImpl.java,equals,object,Object,0,RET,$ instanceof BigMatrixImpl == false
BigMatrixImpl.java,equals,object,null,0,RET,$ instanceof BigMatrixImpl
BigMatrixImpl.java,equals,m,BigMatrix,0,RET,$.getColumnDimension() != nCols
BigMatrixImpl.java,equals,m,BigMatrix,0,RET,$.getRowDimension() != nRows
BigMatrixImpl.java,getLUMatrix,lu,BigDecimal[][],0,DEF,$ == null
LevenbergMarquardtEstimator.java,estimate,dk,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,estimate,s,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,estimate,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtEstimator.java,estimate,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtEstimator.java,estimate,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,estimate,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,DEF,$ >= 1.0e-4
LevenbergMarquardtEstimator.java,estimate,actRed,double,0,RET,Math.abs($) <= costRelativeTolerance
LevenbergMarquardtEstimator.java,estimate,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtEstimator.java,estimate,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtEstimator.java,estimate,actRed,double,1,EstimationException,Math.abs($) <= 2.2204e-16
LevenbergMarquardtEstimator.java,estimate,preRed,double,1,EstimationException,$ <= 2.2204e-16
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,EstimationException,$ <= 2.0
LevenbergMarquardtEstimator.java,estimate,maxCosine,double,0,EstimationException,$ <= 2.2204e-16
LevenbergMarquardtEstimator.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtEstimator.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtEstimator.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtEstimator.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtEstimator.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtEstimator.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtEstimator.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtEstimator.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtEstimator.java,qrDecomposition,ak2,double,0,RET,$ == 0
AbstractEstimator.java,updateResidualsAndCost,costEvaluations,int,0,EstimationException,++$ > maxCostEval
AbstractEstimator.java,guessParametersErrors,m,int,0,EstimationException,$ <= p
DirectSearchOptimizer.java,buildSimplex,i,int,0,DEF,$ > 0
DirectSearchOptimizer.java,buildSimplex,i,int,0,DEF,$ < n
DirectSearchOptimizer.java,setMultiStart,starts,int,1,DEF,$ < 2
DirectSearchOptimizer.java,minimize,evaluations,int,1,DEF,$ >= maxEvaluations
DirectSearchOptimizer.java,minimize,minima,PointCostPair[],0,ConvergenceException,$[0] == null
DirectSearchOptimizer.java,compare,o1,PointCostPair,1,RET,$ == null
DirectSearchOptimizer.java,compare,o2,PointCostPair,0,RET,$ == null
MultiDirectional.java,iterateSimplex,reflectedCost,double,0,RET,$ < originalCost
MultiDirectional.java,iterateSimplex,reflectedCost,double,0,DEF,$ <= expandedCost
MultiDirectional.java,iterateSimplex,contractedCost,double,0,RET,$ < originalCost
NelderMead.java,iterateSimplex,smallest,double,1,DEF,$ <= costR
NelderMead.java,iterateSimplex,costR,double,1,DEF,$ < secondLargest
NelderMead.java,iterateSimplex,costR,double,1,DEF,$ < smallest
NelderMead.java,iterateSimplex,costE,double,1,DEF,$ < costR
NelderMead.java,iterateSimplex,costR,double,1,RET,$ < largest
NelderMead.java,iterateSimplex,costC,double,0,RET,$ <= costR
NelderMead.java,iterateSimplex,costC,double,0,RET,$ < largest
Beta.java,regularizedBeta,x,double,1,DEF,$ < 0
Beta.java,regularizedBeta,x,double,1,DEF,$ > 1
Beta.java,regularizedBeta,a,double,1,DEF,$ <= 0.0
Beta.java,regularizedBeta,b,double,1,DEF,$ <= 0.0
Beta.java,getB,n,int,1,DEF,$ % 2 == 0
Beta.java,logBeta,a,double,1,DEF,$ <= 0.0
Beta.java,logBeta,b,double,1,DEF,$ <= 0.0
Gamma.java,logGamma,x,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ >= 1.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ > a
Gamma.java,regularizedGammaP,n,double,1,MaxIterationsExceededException,$ >= maxIterations
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < a
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ < 1.0
Erf.java,erf,x,double,0,DEF,$ < 0
Vector3D.java,normalize,s,double,0,ArithmeticException,$ == 0
Vector3D.java,orthogonal,threshold,double,0,ArithmeticException,$ == 0
Vector3D.java,orthogonal,x,double,1,RET,$ >= -threshold
Vector3D.java,orthogonal,x,double,1,RET,$ <= threshold
Vector3D.java,orthogonal,y,double,0,RET,$ >= -threshold
Vector3D.java,orthogonal,y,double,0,RET,$ <= threshold
Vector3D.java,angle,normProduct,double,0,ArithmeticException,$ == 0
Vector3D.java,angle,dot,double,0,RET,$ < -threshold
Vector3D.java,angle,dot,double,0,RET,$ > threshold
Vector3D.java,angle,dot,double,0,RET,$ >= 0
Rotation.java,Rotation,norm,double,0,ArithmeticException,$ == 0
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$.length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[0].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[1].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[2].length != 3
Rotation.java,Rotation,det,double,0,NotARotationMatrixException,$ < 0.0
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,u1u1,double,0,IllegalArgumentException,$ == 0
Rotation.java,Rotation,u2u2,double,0,IllegalArgumentException,$ == 0
Rotation.java,Rotation,v1v1,double,0,IllegalArgumentException,$ == 0
Rotation.java,Rotation,v2v2,double,0,IllegalArgumentException,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,normProduct,double,0,IllegalArgumentException,$ == 0
Rotation.java,getAxis,squaredSine,double,1,RET,$ == 0
Rotation.java,getAxis,q0,double,0,RET,$ < 0
Rotation.java,getAngle,q0,double,1,RET,$ < -0.1
Rotation.java,getAngle,q0,double,1,RET,$ > 0.1
Rotation.java,getAngle,q0,double,0,RET,$ < 0
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,orthogonalizeMatrix,fn1,double,0,RET,Math.abs($ - fn) <= threshold
Rotation.java,orthogonalizeMatrix,fn,double,0,RET,Math.abs(fn1 - $) <= threshold
ValueServer.java,resetReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,closeReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,IllegalStateException,$ == null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,IllegalStateException,$.getBinStats().size() == 0
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,$ == null
ValueServer.java,getNextReplay,str,String,0,EOFException,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,EOFException,(str = $.readLine()) == null
ValueServer.java,getNextReplay,str,String,0,EOFException,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,EOFException,(str = $.readLine()) == null
UncorrelatedRandomVectorGenerator.java,UncorrelatedRandomVectorGenerator,mean,double[],0,IllegalArgumentException,$.length != standardDeviation.length
EmpiricalDistributionImpl.java,load,sampleStats,SummaryStatistics,0,EOFException,$.getN() == 0
EmpiricalDistributionImpl.java,load,in,BufferedReader,0,DEF,$ != null
EmpiricalDistributionImpl.java,load,in,BufferedReader,0,DEF,$ != null
EmpiricalDistributionImpl.java,getAdapter,in,null,1,RET,$ instanceof BufferedReader
EmpiricalDistributionImpl.java,getAdapter,in,null,1,RET,$ instanceof double[]
EmpiricalDistributionImpl.java,fillBinStats,e,null,1,RuntimeException,$ instanceof RuntimeException
EmpiricalDistributionImpl.java,getNextValue,stats,SummaryStatistics,0,RET,$.getN() > 0
EmpiricalDistributionImpl.java,getNextValue,stats,SummaryStatistics,1,RET,$.getStandardDeviation() > 0
RandomDataImpl.java,nextHexString,len,int,0,IllegalArgumentException,$ <= 0
RandomDataImpl.java,nextHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextInt,lower,int,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,nextLong,lower,long,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,nextSecureHexString,len,int,0,IllegalArgumentException,$ <= 0
RandomDataImpl.java,nextSecureHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextSecureInt,lower,int,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,nextSecureLong,lower,long,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,nextPoisson,mean,double,0,IllegalArgumentException,$ <= 0
RandomDataImpl.java,nextPoisson,r,double,1,DEF,$ >= p
RandomDataImpl.java,nextGaussian,sigma,double,0,IllegalArgumentException,$ <= 0
RandomDataImpl.java,nextExponential,mean,double,0,IllegalArgumentException,$ < 0.0
RandomDataImpl.java,nextUniform,lower,double,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,getRan,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,getSecRan,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,nextPermutation,k,int,0,IllegalArgumentException,$ > n
RandomDataImpl.java,nextPermutation,k,int,0,IllegalArgumentException,$ == 0
RandomDataImpl.java,nextSample,k,int,0,IllegalArgumentException,$ > len
RandomDataImpl.java,nextSample,k,int,0,IllegalArgumentException,$ == 0
RandomDataImpl.java,shuffle,i,int,1,DEF,$ == 0
CorrelatedRandomVectorGenerator.java,CorrelatedRandomVectorGenerator,mean,double[],0,DimensionMismatchException,$.length != order
CorrelatedRandomVectorGenerator.java,decompose,swap,int[],0,DEF,$[rank] != rank
CorrelatedRandomVectorGenerator.java,decompose,rank,int,0,DEF,swap[$] != rank
CorrelatedRandomVectorGenerator.java,decompose,c,double[][],1,NotPositiveDefiniteMatrixException,$[ir][ir] < small
CorrelatedRandomVectorGenerator.java,decompose,ir,int,1,NotPositiveDefiniteMatrixException,c[$][$] < small
CorrelatedRandomVectorGenerator.java,decompose,rank,int,0,NotPositiveDefiniteMatrixException,$ == 0
CorrelatedRandomVectorGenerator.java,decompose,c,double[][],0,NotPositiveDefiniteMatrixException,$[index[i]][index[i]] < -small
CorrelatedRandomVectorGenerator.java,decompose,index,int[],0,NotPositiveDefiniteMatrixException,c[$[i]][$[i]] < -small
CorrelatedRandomVectorGenerator.java,decompose,i,int,0,NotPositiveDefiniteMatrixException,c[index[$]][index[$]] < -small
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
AbstractRandomGenerator.java,nextBytes,i,int,0,DEF,$ > 0
AbstractRandomGenerator.java,nextBytes,bytesOut,int,0,RET,$ == bytes.length
AbstractRandomGenerator.java,nextInt,n,int,0,IllegalArgumentException,$ <= 0
AbstractRandomGenerator.java,nextGaussian,s,double,0,DEF,$ != 0
PolynomialFunctionLagrangeForm.java,evaluate,dist,double,0,DEF,$ < min_dist
PolynomialFunctionLagrangeForm.java,evaluate,divider,double,0,DuplicateSampleAbscissaException,$ == 0.0
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != j
PolynomialFunctionLagrangeForm.java,computeCoefficients,d,double,0,ArithmeticException,$ == 0.0
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,IllegalArgumentException,$.length < 2
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,y,double[],0,IllegalArgumentException,$.length < 2
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,IllegalArgumentException,$.length != y.length
TrapezoidIntegrator.java,stage,n,int,1,RET,$ == 0
TrapezoidIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
TrapezoidIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,IllegalArgumentException,$ > 64
BisectionSolver.java,solve,fm,double,1,DEF,$ * fmin > 0.0
BisectionSolver.java,solve,fmin,double,1,DEF,fm * $ > 0.0
BisectionSolver.java,solve,min,double,0,RET,Math.abs(max - $) <= absoluteAccuracy
BisectionSolver.java,solve,max,double,0,RET,Math.abs($ - min) <= absoluteAccuracy
SecantSolver.java,solve,y0,double,0,IllegalArgumentException,$ * y1 >= 0
SecantSolver.java,solve,y1,double,0,IllegalArgumentException,y0 * $ >= 0
SecantSolver.java,solve,y1,double,0,RET,Math.abs($) <= functionValueAccuracy
SecantSolver.java,solve,oldDelta,double,0,DEF,delta / $ > 1
SecantSolver.java,solve,delta,double,0,DEF,$ / oldDelta > 1
SecantSolver.java,solve,y1,double,0,DEF,$ > 0
SecantSolver.java,solve,y2,double,0,DEF,$ > 0
PolynomialFunctionNewtonForm.java,verifyInputArray,a,double[],0,IllegalArgumentException,$.length < 1
PolynomialFunctionNewtonForm.java,verifyInputArray,c,double[],0,IllegalArgumentException,$.length < 1
LaguerreSolver.java,LaguerreSolver,f,null,1,DEF,$ instanceof PolynomialFunction
LaguerreSolver.java,solve,p,PolynomialFunction,0,RET,$.value(min) == 0.0
LaguerreSolver.java,solve,min,double,0,RET,p.value($) == 0.0
LaguerreSolver.java,solve,p,PolynomialFunction,0,RET,$.value(max) == 0.0
LaguerreSolver.java,solve,max,double,0,RET,p.value($) == 0.0
LaguerreSolver.java,solve,p,PolynomialFunction,0,RET,$.value(initial) == 0.0
LaguerreSolver.java,solve,initial,double,0,RET,p.value($) == 0.0
LaguerreSolver.java,solve,p,PolynomialFunction,0,RET,$.value(min) == 0.0
LaguerreSolver.java,solve,min,double,0,RET,p.value($) == 0.0
LaguerreSolver.java,solve,p,PolynomialFunction,0,RET,$.value(max) == 0.0
LaguerreSolver.java,solve,max,double,0,RET,p.value($) == 0.0
LaguerreSolver.java,solveAll,n,int,0,IllegalArgumentException,$ < 1
LaguerreSolver.java,solve,n,int,0,IllegalArgumentException,$ < 1
LaguerreSolver.java,solve,oldz,Complex,0,RET,(z.subtract($)).abs() <= tolerance
LaguerreSolver.java,solve,z,Complex,0,RET,($.subtract(oldz)).abs() <= tolerance
LaguerreSolver.java,solve,pv,Complex,0,RET,$.abs() <= functionValueAccuracy
NewtonSolver.java,solve,x0,double,0,RET,Math.abs(x1 - $) <= absoluteAccuracy
NewtonSolver.java,solve,x1,double,0,RET,Math.abs($ - x0) <= absoluteAccuracy
DividedDifferenceInterpolator.java,computeDividedDifference,denominator,double,0,DuplicateSampleAbscissaException,$ == 0.0
UnivariateRealSolverImpl.java,UnivariateRealSolverImpl,f,UnivariateRealFunction,0,IllegalArgumentException,$ == null
UnivariateRealSolverImpl.java,verifyInterval,lower,double,0,IllegalArgumentException,$ >= upper
UnivariateRealIntegratorImpl.java,UnivariateRealIntegratorImpl,f,UnivariateRealFunction,0,IllegalArgumentException,$ == null
UnivariateRealIntegratorImpl.java,verifyInterval,lower,double,0,IllegalArgumentException,$ >= upper
SimpsonIntegrator.java,integrate,minimalIterationCount,int,0,RET,$ == 1
SimpsonIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
SimpsonIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,IllegalArgumentException,$ > 64
RombergIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
RombergIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,IllegalArgumentException,$ > 32
PolynomialFunction.java,PolynomialFunction,c,double[],0,IllegalArgumentException,$.length < 1
PolynomialFunction.java,evaluate,n,int,0,IllegalArgumentException,$ < 1
PolynomialFunction.java,differentiate,n,int,0,IllegalArgumentException,$ < 1
PolynomialFunction.java,differentiate,n,int,0,RET,$ == 1
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,IllegalArgumentException,$.length < 2
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,IllegalArgumentException,$.length - 1 != polynomials.length
PolynomialSplineFunction.java,value,i,int,0,DEF,$ < 0
PolynomialSplineFunction.java,value,i,int,0,DEF,$ >= polynomials.length
SplineInterpolator.java,interpolate,x,double[],0,IllegalArgumentException,$.length != y.length
SplineInterpolator.java,interpolate,x,double[],0,IllegalArgumentException,$.length < 3
UnivariateRealSolverUtils.java,bracket,function,UnivariateRealFunction,0,IllegalArgumentException,$ == null
UnivariateRealSolverUtils.java,bracket,maximumIterations,int,0,IllegalArgumentException,$ <= 0
UnivariateRealSolverUtils.java,bracket,initial,double,0,IllegalArgumentException,$ < lowerBound
UnivariateRealSolverUtils.java,bracket,initial,double,0,IllegalArgumentException,$ > upperBound
UnivariateRealSolverUtils.java,bracket,lowerBound,double,0,IllegalArgumentException,$ >= upperBound
UnivariateRealSolverUtils.java,bracket,fa,double,0,ConvergenceException,$ * fb >= 0.0
UnivariateRealSolverUtils.java,bracket,fb,double,0,ConvergenceException,fa * $ >= 0.0
UnivariateRealSolverUtils.java,setup,f,UnivariateRealFunction,0,IllegalArgumentException,$ == null
UnivariateRealSolverUtils.java,setup,factory,UnivariateRealSolverFactory,0,DEF,$ == null
MullerSolver.java,solve,min,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
MullerSolver.java,solve,max,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
MullerSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
MullerSolver.java,solve,y0,double,0,RET,$ == 0.0
MullerSolver.java,solve,y2,double,0,RET,$ == 0.0
MullerSolver.java,solve,oldx,double,0,RET,Math.abs(x - $) <= tolerance
MullerSolver.java,solve,x,double,0,RET,Math.abs($ - oldx) <= tolerance
MullerSolver.java,solve,y,double,0,RET,Math.abs($) <= functionValueAccuracy
MullerSolver.java,solve,ym,double,1,DEF,MathUtils.sign(y0) + MathUtils.sign($) == 0.0
MullerSolver.java,solve,y0,double,1,DEF,MathUtils.sign($) + MathUtils.sign(ym) == 0.0
MullerSolver.java,solve2,y0,double,0,RET,$ == 0.0
MullerSolver.java,solve2,y1,double,0,RET,$ == 0.0
MullerSolver.java,solve2,delta,double,1,DEF,$ >= 0.0
MullerSolver.java,solve2,denominator,double,1,DEF,$ != 0
MullerSolver.java,solve2,oldx,double,0,RET,Math.abs(x - $) <= tolerance
MullerSolver.java,solve2,x,double,0,RET,Math.abs($ - oldx) <= tolerance
MullerSolver.java,solve2,y,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,min,double,0,IllegalArgumentException,((initial - $) * (max -initial)) < 0
BrentSolver.java,solve,initial,double,0,IllegalArgumentException,(($ - min) * (max -$)) < 0
BrentSolver.java,solve,max,double,0,IllegalArgumentException,((initial - min) * ($ -initial)) < 0
BrentSolver.java,solve,yInitial,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMin,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMin,double,0,RET,yInitial * $ < 0
BrentSolver.java,solve,yInitial,double,0,RET,$ * yMin < 0
BrentSolver.java,solve,yMax,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yInitial,double,0,RET,$ * yMax < 0
BrentSolver.java,solve,yMax,double,0,RET,yInitial * $ < 0
BrentSolver.java,solve,sign,double,1,IllegalArgumentException,$ >= 0
BrentSolver.java,solve,y1,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,dx,double,0,RET,Math.abs($) <= tolerance
BrentSolver.java,solve,oldDelta,double,1,DEF,Math.abs($) < tolerance
BrentSolver.java,solve,x0,double,1,DEF,$ == x2
BrentSolver.java,solve,p,double,1,DEF,$ > 0.0
BrentSolver.java,solve,delta,double,1,DEF,Math.abs($) > tolerance
BrentSolver.java,solve,dx,double,1,DEF,$ > 0.0
BrentSolver.java,solve,dx,double,0,DEF,$ <= 0.0
BrentSolver.java,solve,y1,double,0,DEF,$ > 0
BrentSolver.java,solve,y2,double,0,DEF,$ > 0
RiddersSolver.java,solve,min,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
RiddersSolver.java,solve,max,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
RiddersSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
RiddersSolver.java,solve,y1,double,0,RET,$ == 0.0
RiddersSolver.java,solve,y2,double,0,RET,$ == 0.0
RiddersSolver.java,solve,y3,double,0,RET,Math.abs($) <= functionValueAccuracy
RiddersSolver.java,solve,oldx,double,0,RET,Math.abs(x - $) <= tolerance
RiddersSolver.java,solve,x,double,0,RET,Math.abs($ - oldx) <= tolerance
RiddersSolver.java,solve,y,double,0,RET,Math.abs($) <= functionValueAccuracy
RiddersSolver.java,solve,correction,double,1,DEF,$ > 0.0
RiddersSolver.java,solve,y1,double,1,DEF,MathUtils.sign($) + MathUtils.sign(y) == 0.0
RiddersSolver.java,solve,y,double,1,DEF,MathUtils.sign(y1) + MathUtils.sign($) == 0.0
RiddersSolver.java,solve,y2,double,1,DEF,MathUtils.sign($) + MathUtils.sign(y) == 0.0
RiddersSolver.java,solve,y,double,1,DEF,MathUtils.sign(y2) + MathUtils.sign($) == 0.0
ComplexFormat.java,format,im,double,1,DEF,$ < 0.0
ComplexFormat.java,format,im,double,0,DEF,$ > 0.0
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Complex
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Number
ComplexFormat.java,parse,parsePosition,ParsePosition,0,ParseException,$.getIndex() == 0
ComplexFormat.java,parse,re,Number,0,RET,$ == null
ComplexFormat.java,parse,im,Number,0,RET,$ == null
ComplexFormat.java,parse,startIndex,int,0,RET,source.substring($, endIndex).compareTo( getImaginaryCharacter()) != 0
ComplexFormat.java,parse,endIndex,int,0,RET,source.substring(startIndex, $).compareTo( getImaginaryCharacter()) != 0
ComplexFormat.java,parse,source,String,0,RET,$.substring(startIndex, endIndex).compareTo( getImaginaryCharacter()) != 0
ComplexFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
ComplexFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
ComplexFormat.java,parseNumber,startIndex,int,0,DEF,source.substring($, endIndex).compareTo(sb.toString()) == 0
ComplexFormat.java,parseNumber,endIndex,int,0,DEF,source.substring(startIndex, $).compareTo(sb.toString()) == 0
ComplexFormat.java,parseNumber,source,String,0,DEF,$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
ComplexFormat.java,parseNumber,sb,StringBuffer,0,DEF,source.substring(startIndex, endIndex).compareTo($.toString()) == 0
ComplexFormat.java,parseNumber,startIndex,int,0,DEF,$ == endIndex
ComplexFormat.java,parseNumber,number,Number,0,DEF,$ != null
ComplexFormat.java,setImaginaryCharacter,imaginaryCharacter,String,0,IllegalArgumentException,$ == null
ComplexFormat.java,setImaginaryCharacter,imaginaryCharacter,String,0,IllegalArgumentException,$.length() == 0
ComplexFormat.java,setImaginaryFormat,imaginaryFormat,NumberFormat,0,IllegalArgumentException,$ == null
ComplexFormat.java,setRealFormat,realFormat,NumberFormat,0,IllegalArgumentException,$ == null
Complex.java,abs,imaginary,double,0,RET,$ == 0.0
Complex.java,abs,real,double,0,RET,$ == 0.0
Complex.java,divide,c,double,0,RET,$ == 0.0
Complex.java,divide,d,double,0,RET,$ == 0.0
Complex.java,divide,d,double,0,RET,$ == 0.0
Complex.java,divide,c,double,0,RET,$ == 0.0
Complex.java,equals,other,Object,1,DEF,$ == null
Complex.java,pow,x,Complex,0,NullPointerException,$ == null
Complex.java,sqrt,real,double,0,RET,$ == 0.0
Complex.java,sqrt,imaginary,double,0,RET,$ == 0.0
Complex.java,sqrt,real,double,1,RET,$ >= 0.0
ComplexUtils.java,polar2Complex,r,double,0,IllegalArgumentException,$ < 0
DescriptiveStatistics.java,addValue,windowSize,int,1,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,IllegalArgumentException,$ < 1
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,IllegalArgumentException,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,getPercentile,percentileImpl,null,1,DEF,$ instanceof Percentile
AbstractStorelessUnivariateStatistic.java,evaluate,values,double[],0,IllegalArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,incrementAll,values,double[],0,IllegalArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,equals,object,Object,0,RET,$ instanceof AbstractStorelessUnivariateStatistic == false
AbstractStorelessUnivariateStatistic.java,equals,object,null,0,RET,$ instanceof AbstractStorelessUnivariateStatistic
StatisticalSummaryValues.java,equals,object,Object,0,RET,$ instanceof StatisticalSummaryValues == false
StatisticalSummaryValues.java,equals,object,null,0,RET,$ instanceof StatisticalSummaryValues
FirstMoment.java,increment,n,long,0,DEF,$ == 0
GeometricMean.java,getResult,sumOfLogs,StorelessUnivariateStatistic,1,RET,$.getN() > 0
ThirdMoment.java,increment,n,long,0,DEF,$ < 1
Kurtosis.java,getResult,moment,FourthMoment,0,DEF,$.getN() > 3
Kurtosis.java,getResult,moment,FirstMoment,1,DEF,$.n <= 3
Kurtosis.java,getResult,variance,double,1,DEF,$ < 10E-20
Kurtosis.java,evaluate,length,int,0,DEF,$ > 3
Skewness.java,getResult,moment,FirstMoment,0,RET,$.n < 3
Skewness.java,getResult,variance,double,1,RET,$ < 10E-20
Skewness.java,evaluate,length,int,0,DEF,$ > 2
FourthMoment.java,increment,n,long,0,DEF,$ < 1
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 0
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 1
Variance.java,evaluate,values,double[],0,IllegalArgumentException,$ == null
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
VectorialCovariance.java,increment,v,double[],0,DimensionMismatchException,$.length != sums.length
VectorialCovariance.java,getResult,n,long,0,DEF,$ > 1
SecondMoment.java,increment,n,long,0,DEF,$ < 1
VectorialMean.java,increment,v,double[],0,DimensionMismatchException,$.length != means.length
Percentile.java,evaluate,p,double,0,IllegalArgumentException,$ > 100
Percentile.java,evaluate,p,double,0,IllegalArgumentException,$ <= 0
Percentile.java,evaluate,length,int,0,RET,$ == 0
Percentile.java,evaluate,length,int,0,RET,$ == 1
Percentile.java,evaluate,pos,double,0,RET,$ < 1
Percentile.java,evaluate,pos,double,0,RET,$ >= n
Percentile.java,setQuantile,p,double,0,IllegalArgumentException,$ <= 0
Percentile.java,setQuantile,p,double,0,IllegalArgumentException,$ > 100
Max.java,increment,d,double,0,DEF,$ > value
Min.java,increment,d,double,0,DEF,$ < value
AbstractUnivariateStatistic.java,test,values,double[],0,IllegalArgumentException,$ == null
AbstractUnivariateStatistic.java,test,begin,int,0,IllegalArgumentException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,IllegalArgumentException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,IllegalArgumentException,begin + $ > values.length
AbstractUnivariateStatistic.java,test,begin,int,0,IllegalArgumentException,$ + length > values.length
AbstractUnivariateStatistic.java,test,length,int,0,RET,$ == 0
MultivariateSummaryStatistics.java,append,i,int,0,DEF,$ > 0
MultivariateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof MultivariateSummaryStatistics == false
MultivariateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof MultivariateSummaryStatistics
MultivariateSummaryStatistics.java,checkEmpty,n,long,0,IllegalStateException,$ > 0
MultivariateSummaryStatistics.java,checkDimension,dimension,int,0,DimensionMismatchException,$ != k
SummaryStatistics.java,addValue,meanImpl,null,0,DEF,$ instanceof Mean
SummaryStatistics.java,addValue,varianceImpl,null,0,DEF,$ instanceof Variance
SummaryStatistics.java,addValue,geoMeanImpl,null,0,DEF,$ instanceof GeometricMean
SummaryStatistics.java,getMean,mean,Mean,1,RET,$ == meanImpl
SummaryStatistics.java,getVariance,varianceImpl,StorelessUnivariateStatistic,1,RET,$ == variance
SummaryStatistics.java,clear,meanImpl,StorelessUnivariateStatistic,0,DEF,$ != mean
SummaryStatistics.java,clear,varianceImpl,StorelessUnivariateStatistic,0,DEF,$ != variance
SummaryStatistics.java,equals,object,Object,0,RET,$ instanceof SummaryStatistics == false
SummaryStatistics.java,equals,object,null,0,RET,$ instanceof SummaryStatistics
SummaryStatistics.java,checkEmpty,n,long,0,IllegalStateException,$ > 0
Product.java,increment,n,long,1,DEF,$ == 0
SumOfLogs.java,getResult,n,int,1,RET,$ > 0
SumOfSquares.java,increment,n,long,1,DEF,$ == 0
Sum.java,increment,n,long,1,DEF,$ == 0
TTestImpl.java,pairedT,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,pairedT,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,pairedT,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,pairedT,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,pairedTTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,pairedTTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,t,observed,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,t,observed,double[],0,IllegalArgumentException,$.length < 2
TTestImpl.java,t,sampleStats,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,t,sampleStats,StatisticalSummary,0,IllegalArgumentException,$.getN() < 2
TTestImpl.java,homoscedasticT,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticT,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticT,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,homoscedasticT,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,t,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,t,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,t,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,t,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,t,sampleStats1,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,t,sampleStats2,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,t,sampleStats2,StatisticalSummary,0,IllegalArgumentException,Math.min(sampleStats1.getN(), $.getN()) < 2
TTestImpl.java,t,sampleStats1,StatisticalSummary,0,IllegalArgumentException,Math.min($.getN(), sampleStats2.getN()) < 2
TTestImpl.java,homoscedasticT,sampleStats1,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticT,sampleStats2,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticT,sampleStats2,StatisticalSummary,0,IllegalArgumentException,Math.min(sampleStats1.getN(), $.getN()) < 2
TTestImpl.java,homoscedasticT,sampleStats1,StatisticalSummary,0,IllegalArgumentException,Math.min($.getN(), sampleStats2.getN()) < 2
TTestImpl.java,tTest,sample,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sample,double[],0,IllegalArgumentException,$.length < 2
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,tTest,sampleStats,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sampleStats,StatisticalSummary,0,IllegalArgumentException,$.getN() < 2
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,tTest,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,tTest,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,homoscedasticTTest,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticTTest,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticTTest,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,homoscedasticTTest,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,homoscedasticTTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,homoscedasticTTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,tTest,sampleStats1,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sampleStats2,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sampleStats2,StatisticalSummary,0,IllegalArgumentException,Math.min(sampleStats1.getN(), $.getN()) < 2
TTestImpl.java,tTest,sampleStats1,StatisticalSummary,0,IllegalArgumentException,Math.min($.getN(), sampleStats2.getN()) < 2
TTestImpl.java,homoscedasticTTest,sampleStats1,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticTTest,sampleStats2,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticTTest,sampleStats2,StatisticalSummary,0,IllegalArgumentException,Math.min(sampleStats1.getN(), $.getN()) < 2
TTestImpl.java,homoscedasticTTest,sampleStats1,StatisticalSummary,0,IllegalArgumentException,Math.min($.getN(), sampleStats2.getN()) < 2
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ > 0.5
OneWayAnovaImpl.java,anovaTest,alpha,double,0,IllegalArgumentException,$ <= 0
OneWayAnovaImpl.java,anovaTest,alpha,double,0,IllegalArgumentException,$ > 0.5
OneWayAnovaImpl.java,anovaStats,categoryData,Collection<double[]>,0,IllegalArgumentException,$.size() < 2
OneWayAnovaImpl.java,anovaStats,array,double[],0,IllegalArgumentException,$.length <= 1
ChiSquareTestImpl.java,chiSquare,expected,double[],0,IllegalArgumentException,$.length < 2
ChiSquareTestImpl.java,chiSquare,expected,double[],0,IllegalArgumentException,$.length != observed.length
ChiSquareTestImpl.java,chiSquare,sumObserved,double,0,DEF,Math.abs(sumExpected - $) > 10E-6
ChiSquareTestImpl.java,chiSquare,sumExpected,double,0,DEF,Math.abs($ - sumObserved) > 10E-6
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,IllegalArgumentException,$ <= 0
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,IllegalArgumentException,$ > 0.5
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,IllegalArgumentException,$ <= 0
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,IllegalArgumentException,$ > 0.5
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],0,IllegalArgumentException,$.length < 2
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],0,IllegalArgumentException,$.length != observed2.length
ChiSquareTestImpl.java,chiSquareDataSetsComparison,countSum1,long,0,IllegalArgumentException,$ * countSum2 == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,countSum2,long,0,IllegalArgumentException,countSum1 * $ == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,i,int,1,IllegalArgumentException,observed1[$] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],1,IllegalArgumentException,$[i] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed2,long[],1,IllegalArgumentException,$[i] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,i,int,1,IllegalArgumentException,observed2[$] == 0
ChiSquareTestImpl.java,chiSquareTestDataSetsComparison,alpha,double,0,IllegalArgumentException,$ <= 0
ChiSquareTestImpl.java,chiSquareTestDataSetsComparison,alpha,double,0,IllegalArgumentException,$ > 0.5
ChiSquareTestImpl.java,checkArray,in,long[][],0,IllegalArgumentException,$.length < 2
ChiSquareTestImpl.java,checkArray,in,long[][],0,IllegalArgumentException,$[0].length < 2
ChiSquareTestImpl.java,isPositive,in,double[],0,RET,$[i] <= 0
ChiSquareTestImpl.java,isPositive,i,int,0,RET,in[$] <= 0
ChiSquareTestImpl.java,isNonNegative,in,long[],0,RET,$[i] < 0
ChiSquareTestImpl.java,isNonNegative,i,int,0,RET,in[$] < 0
ChiSquareTestImpl.java,isNonNegative,in,long[][],0,RET,$[i][j] < 0
ChiSquareTestImpl.java,isNonNegative,i,int,0,RET,in[$][j] < 0
ChiSquareTestImpl.java,isNonNegative,j,int,0,RET,in[i][$] < 0
StatUtils.java,sumDifference,n,int,0,IllegalArgumentException,$ != sample2.length
StatUtils.java,sumDifference,n,int,0,IllegalArgumentException,$ < 1
StatUtils.java,varianceDifference,n,int,0,IllegalArgumentException,$ < 2
StatUtils.java,varianceDifference,n,int,0,IllegalArgumentException,$ != sample2.length
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,IllegalArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,y,double[],0,IllegalArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,IllegalArgumentException,$.length != y.length
AbstractMultipleLinearRegression.java,validateCovarianceData,covariance,double[][],0,IllegalArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateCovarianceData,x,double[][],0,IllegalArgumentException,$.length != covariance.length
AbstractMultipleLinearRegression.java,validateCovarianceData,covariance,double[][],0,IllegalArgumentException,$.length > 0
SimpleRegression.java,addData,n,long,1,DEF,$ == 0
SimpleRegression.java,addData,n,long,0,DEF,$ > 2
SimpleRegression.java,getSlope,n,long,0,RET,$ < 2
SimpleRegression.java,getTotalSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getMeanSquareError,n,long,0,RET,$ < 3
SimpleRegression.java,getR,b1,double,0,DEF,$ < 0
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,IllegalArgumentException,$ >= 1
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,IllegalArgumentException,$ <= 0
SimpleRegression.java,setDistribution,n,long,0,DEF,$ > 2
Frequency.java,addValue,v,null,0,DEF,$ instanceof Integer
Frequency.java,addValue,count,Long,1,DEF,$ == null
Frequency.java,getCount,v,null,0,RET,$ instanceof Integer
Frequency.java,getCount,count,Long,0,DEF,$ != null
Frequency.java,getCumFreq,v,null,0,RET,$ instanceof Integer
Frequency.java,getCumFreq,c,Comparator,0,DEF,$ == null
Frequency.java,getCumFreq,value,Long,0,DEF,$ != null
Frequency.java,getCumFreq,c,Comparator,0,RET,$.compare(v, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,v,Object,0,RET,c.compare($, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,freqTable,TreeMap,0,RET,c.compare(v, $.firstKey()) < 0
Frequency.java,getCumFreq,c,Comparator,0,RET,$.compare(v, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,v,Object,0,RET,c.compare($, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,freqTable,TreeMap,0,RET,c.compare(v, $.lastKey()) >= 0
Frequency.java,getCumFreq,c,Comparator,1,DEF,$.compare(v, nextValue) > 0
Frequency.java,getCumFreq,v,Object,1,DEF,c.compare($, nextValue) > 0
Frequency.java,getCumFreq,nextValue,Object,1,DEF,c.compare(v, $) > 0
MathException.java,translate,cachedResources,ResourceBundle,0,DEF,$ == null
MathException.java,printStackTrace,rootCause,Throwable,0,DEF,$ != null
MathException.java,printStackTrace,JDK_SUPPORTS_NESTED,boolean,0,DEF,$ == false
FDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
FDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
FDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
FDistributionImpl.java,setNumeratorDegreesOfFreedom,degreesOfFreedom,double,0,IllegalArgumentException,$ <= 0.0
FDistributionImpl.java,setDenominatorDegreesOfFreedom,degreesOfFreedom,double,0,IllegalArgumentException,$ <= 0.0
PoissonDistributionImpl.java,setMean,p,double,0,IllegalArgumentException,$ <= 0
PoissonDistributionImpl.java,probability,x,int,0,RET,$ < 0
PoissonDistributionImpl.java,probability,x,int,0,RET,$ == Integer.MAX_VALUE
PoissonDistributionImpl.java,cumulativeProbability,x,int,0,RET,$ < 0
PoissonDistributionImpl.java,cumulativeProbability,x,int,0,RET,$ == Integer.MAX_VALUE
HypergeometricDistributionImpl.java,HypergeometricDistributionImpl,numberOfSuccesses,int,0,IllegalArgumentException,$ > populationSize
HypergeometricDistributionImpl.java,HypergeometricDistributionImpl,sampleSize,int,0,IllegalArgumentException,$ > populationSize
HypergeometricDistributionImpl.java,setNumberOfSuccesses,num,int,0,IllegalArgumentException,$ < 0
HypergeometricDistributionImpl.java,setPopulationSize,size,int,0,IllegalArgumentException,$ <= 0
HypergeometricDistributionImpl.java,setSampleSize,size,int,0,IllegalArgumentException,$ < 0
GammaDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
GammaDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
GammaDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
GammaDistributionImpl.java,setAlpha,alpha,double,0,IllegalArgumentException,$ <= 0.0
GammaDistributionImpl.java,setBeta,beta,double,0,IllegalArgumentException,$ <= 0.0
GammaDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
GammaDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
TDistributionImpl.java,setDegreesOfFreedom,degreesOfFreedom,double,0,IllegalArgumentException,$ <= 0.0
TDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ == 0.0
TDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ < 0.0
TDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
TDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
BinomialDistributionImpl.java,setNumberOfTrials,trials,int,0,IllegalArgumentException,$ < 0
BinomialDistributionImpl.java,setProbabilityOfSuccess,p,double,0,IllegalArgumentException,$ < 0.0
BinomialDistributionImpl.java,setProbabilityOfSuccess,p,double,0,IllegalArgumentException,$ > 1.0
BinomialDistributionImpl.java,cumulativeProbability,x,int,1,DEF,$ < 0
BinomialDistributionImpl.java,probability,x,int,1,DEF,$ < 0
BinomialDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
BinomialDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
ExponentialDistributionImpl.java,setMean,mean,double,0,IllegalArgumentException,$ <= 0.0
ExponentialDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ < 0.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ > 1.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1.0
ExponentialDistributionImpl.java,getDomainUpperBound,p,double,1,RET,$ < .5
ExponentialDistributionImpl.java,getInitialDomain,p,double,1,RET,$ < .5
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ < 0.0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ > 1.0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
CauchyDistributionImpl.java,setScale,s,double,0,IllegalArgumentException,$ <= 0.0
CauchyDistributionImpl.java,getDomainLowerBound,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ > .5
NormalDistributionImpl.java,setStandardDeviation,sd,double,0,IllegalArgumentException,$ <= 0.0
NormalDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
NormalDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
NormalDistributionImpl.java,getDomainLowerBound,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ > .5
PascalDistributionImpl.java,setNumberOfSuccesses,successes,int,0,IllegalArgumentException,$ < 0
PascalDistributionImpl.java,setProbabilityOfSuccess,p,double,0,IllegalArgumentException,$ < 0.0
PascalDistributionImpl.java,setProbabilityOfSuccess,p,double,0,IllegalArgumentException,$ > 1.0
PascalDistributionImpl.java,cumulativeProbability,x,int,1,DEF,$ < 0
PascalDistributionImpl.java,probability,x,int,1,DEF,$ < 0
PascalDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
PascalDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
AbstractDistribution.java,cumulativeProbability,x0,double,0,IllegalArgumentException,$ > x1
AbstractIntegerDistribution.java,cumulativeProbability,x0,double,0,IllegalArgumentException,$ > x1
AbstractIntegerDistribution.java,cumulativeProbability,x0,double,1,RET,Math.floor($) < x0
AbstractIntegerDistribution.java,probability,fl,double,1,RET,$ == x
AbstractIntegerDistribution.java,cumulativeProbability,x0,int,0,IllegalArgumentException,$ > x1
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,IllegalArgumentException,$ < 0.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,IllegalArgumentException,$ > 1.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,pm,double,1,DEF,$ > p
AbstractIntegerDistribution.java,inverseCumulativeProbability,xm,int,1,DEF,$ == x1
AbstractIntegerDistribution.java,inverseCumulativeProbability,xm,int,1,DEF,$ == x0
ChiSquaredDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
ChiSquaredDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
ChiSquaredDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
ChiSquaredDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
AbstractContinuousDistribution.java,inverseCumulativeProbability,p,double,0,IllegalArgumentException,$ < 0.0
AbstractContinuousDistribution.java,inverseCumulativeProbability,p,double,0,IllegalArgumentException,$ > 1.0
AbstractContinuousDistribution.java,inverseCumulativeProbability,rootFindingFunction,UnivariateRealFunction,0,RET,Math.abs($.value(lowerBound)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,lowerBound,double,0,RET,Math.abs(rootFindingFunction.value($)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,upperBound,double,0,RET,Math.abs(rootFindingFunction.value($)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,rootFindingFunction,UnivariateRealFunction,0,RET,Math.abs($.value(upperBound)) < 1E-6
WeibullDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ < 0.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ > 1.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
WeibullDistributionImpl.java,setShape,alpha,double,0,IllegalArgumentException,$ <= 0.0
WeibullDistributionImpl.java,setScale,beta,double,0,IllegalArgumentException,$ <= 0.0
FastFourierTransformer.java,fft,f,double[],0,RET,$.length == 1
FastFourierTransformer.java,fft,N,int,0,RET,$ == 1
FastFourierTransformer.java,fft,N,int,0,RET,$ == 2
FastFourierTransformer.java,computeOmega,n,int,0,IllegalArgumentException,$ == 0
FastFourierTransformer.java,computeOmega,n,int,0,RET,$ == omegaCount
FastFourierTransformer.java,computeOmega,omegaCount,int,0,RET,n + $ == 0
FastFourierTransformer.java,computeOmega,n,int,0,RET,$ + omegaCount == 0
FastFourierTransformer.java,sample,n,int,0,IllegalArgumentException,$ <= 0
FastFourierTransformer.java,verifyInterval,lower,double,0,IllegalArgumentException,$ >= upper
FastCosineTransformer.java,fct,N,int,0,RET,$ == 1
FastSineTransformer.java,fst,f,double[],0,IllegalArgumentException,$[0] != 0.0
FastSineTransformer.java,fst,N,int,0,RET,$ == 1
ResizableDoubleArray.java,addElement,startIndex,int,0,DEF,($ + numElements) > internalArray.length
ResizableDoubleArray.java,addElement,numElements,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,addElementRolling,startIndex,int,0,DEF,($ + (numElements + 1)) > internalArray.length
ResizableDoubleArray.java,addElementRolling,numElements,int,0,DEF,(startIndex + ($ + 1)) > internalArray.length
ResizableDoubleArray.java,checkContractExpand,contractionCritera,float,0,IllegalArgumentException,$ < expansionFactor
ResizableDoubleArray.java,checkContractExpand,contractionCriteria,float,0,IllegalArgumentException,$ <= 1.0
ResizableDoubleArray.java,checkContractExpand,expansionFactor,float,0,IllegalArgumentException,$ <= 1.0
ResizableDoubleArray.java,discardFrontElements,i,int,1,IllegalArgumentException,$ > numElements
ResizableDoubleArray.java,discardFrontElements,i,int,1,IllegalArgumentException,$ < 0
ResizableDoubleArray.java,expand,expansionMode,int,1,DEF,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,getElement,index,int,1,ArrayIndexOutOfBoundsException,$ >= numElements
ResizableDoubleArray.java,getElement,index,int,1,RET,$ >= 0
ResizableDoubleArray.java,setElement,index,int,0,ArrayIndexOutOfBoundsException,$ < 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ + 1 > numElements
ResizableDoubleArray.java,setElement,startIndex,int,0,DEF,($ + index) >= internalArray.length
ResizableDoubleArray.java,setElement,index,int,0,DEF,(startIndex + $) >= internalArray.length
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,IllegalArgumentException,$ != MULTIPLICATIVE_MODE
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,IllegalArgumentException,$ != ADDITIVE_MODE
ResizableDoubleArray.java,setInitialCapacity,initialCapacity,int,1,DEF,$ > 0
ResizableDoubleArray.java,setNumElements,i,int,0,IllegalArgumentException,$ < 0
ResizableDoubleArray.java,setNumElements,startIndex,int,0,DEF,($ + i) > internalArray.length
ResizableDoubleArray.java,setNumElements,i,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,shouldContract,expansionMode,int,1,RET,$ == MULTIPLICATIVE_MODE
ContinuedFraction.java,evaluate,a,double,1,DEF,$ != 0.0
ContinuedFraction.java,evaluate,b,double,1,DEF,$ != 0
ContinuedFraction.java,evaluate,n,int,0,MaxIterationsExceededException,$ >= maxIterations
MathUtils.java,addAndCheck,s,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,addAndCheck,s,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,addAndCheck,a,long,1,DEF,$ > b
MathUtils.java,addAndCheck,a,long,1,ArithmeticException,$ < 0
MathUtils.java,addAndCheck,b,long,1,ArithmeticException,$ < 0
MathUtils.java,addAndCheck,b,long,1,DEF,Long.MIN_VALUE - $ <= a
MathUtils.java,binomialCoefficient,n,int,0,IllegalArgumentException,$ < k
MathUtils.java,binomialCoefficient,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,binomialCoefficient,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficient,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficient,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficient,result,long,0,ArithmeticException,$ == Long.MAX_VALUE
MathUtils.java,binomialCoefficientLog,n,int,0,IllegalArgumentException,$ < k
MathUtils.java,binomialCoefficientLog,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 1
MathUtils.java,equals,x,double[],0,RET,$ == null
MathUtils.java,equals,y,double[],0,RET,$ == null
MathUtils.java,equals,x,double[],0,RET,$.length != y.length
MathUtils.java,factorial,result,long,0,ArithmeticException,$ == Long.MAX_VALUE
MathUtils.java,factorialDouble,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,factorialLog,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,gcd,u,int,0,RET,$ * v == 0
MathUtils.java,gcd,v,int,0,RET,u * $ == 0
MathUtils.java,gcd,u,int,0,DEF,$ > 0
MathUtils.java,gcd,v,int,0,DEF,$ > 0
MathUtils.java,gcd,k,int,0,ArithmeticException,$ == 31
MathUtils.java,gcd,t,int,1,DEF,$ > 0
MathUtils.java,hash,value,double[],0,RET,$ == null
MathUtils.java,mulAndCheck,m,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,mulAndCheck,m,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,mulAndCheck,a,long,1,DEF,$ > b
MathUtils.java,mulAndCheck,a,long,1,ArithmeticException,$ < 0
MathUtils.java,mulAndCheck,b,long,1,ArithmeticException,$ < 0
MathUtils.java,mulAndCheck,b,long,1,ArithmeticException,$ > 0
MathUtils.java,mulAndCheck,b,long,1,DEF,Long.MIN_VALUE / $ <= a
MathUtils.java,mulAndCheck,a,long,1,ArithmeticException,$ > 0
MathUtils.java,nextAfter,d,double,0,RET,$ == 0
MathUtils.java,nextAfter,d,double,1,RET,$ * (direction - $) >= 0
MathUtils.java,nextAfter,direction,double,1,RET,d * ($ - d) >= 0
MathUtils.java,nextAfter,mantissa,long,1,RET,$ == 0x000fffffffffffffL
MathUtils.java,nextAfter,mantissa,long,1,RET,$ == 0L
MathUtils.java,roundUnscaled,sign,double,1,DEF,$ == -1
MathUtils.java,roundUnscaled,sign,double,1,DEF,$ == -1
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ < 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ >= 0.5
MathUtils.java,subAndCheck,s,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,subAndCheck,s,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,subAndCheck,b,long,1,ArithmeticException,$ == Long.MIN_VALUE
MathUtils.java,subAndCheck,a,long,1,DEF,$ < 0
DefaultTransformer.java,transform,o,Object,0,MathException,$ == null
DefaultTransformer.java,transform,o,null,0,RET,$ instanceof Number
TransformerMap.java,transform,o,null,1,DEF,$ instanceof Number
TransformerMap.java,transform,o,null,1,DEF,$ instanceof String
TransformerMap.java,transform,trans,NumberTransformer,0,DEF,$ != null
Fraction.java,Fraction,a0,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,value,double,0,RET,Math.abs(a0 - $) < epsilon
Fraction.java,Fraction,a0,long,0,RET,Math.abs($ - value) < epsilon
Fraction.java,Fraction,p2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,q2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,n,int,1,DEF,$ < maxIterations
Fraction.java,Fraction,convergent,double,1,DEF,Math.abs($ - value) > epsilon
Fraction.java,Fraction,value,double,1,DEF,Math.abs(convergent - $) > epsilon
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,n,int,0,FractionConversionException,$ >= maxIterations
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,den,int,0,ArithmeticException,$ == 0
Fraction.java,Fraction,den,int,0,ArithmeticException,$ < 0
Fraction.java,Fraction,num,int,0,ArithmeticException,$ == Integer.MIN_VALUE
Fraction.java,Fraction,den,int,0,ArithmeticException,$ == Integer.MIN_VALUE
Fraction.java,Fraction,d,int,0,DEF,$ > 1
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,abs,numerator,int,1,DEF,$ >= 0
Fraction.java,compareTo,first,double,1,DEF,$ < second
Fraction.java,compareTo,first,double,0,DEF,$ > second
Fraction.java,equals,other,Object,1,DEF,$ == null
Fraction.java,negate,numerator,int,0,ArithmeticException,$==Integer.MIN_VALUE
Fraction.java,addSub,fraction,Fraction,0,IllegalArgumentException,$ == null
Fraction.java,addSub,numerator,int,0,RET,$ == 0
Fraction.java,addSub,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,addSub,d1,int,0,RET,$==1
Fraction.java,addSub,w,BigInteger,0,ArithmeticException,$.bitLength() > 31
Fraction.java,multiply,fraction,Fraction,0,IllegalArgumentException,$ == null
Fraction.java,multiply,numerator,int,0,RET,$ == 0
Fraction.java,multiply,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,divide,fraction,Fraction,0,IllegalArgumentException,$ == null
Fraction.java,divide,fraction,Fraction,0,ArithmeticException,$.numerator == 0
Fraction.java,getReducedFraction,denominator,int,0,ArithmeticException,$ == 0
Fraction.java,getReducedFraction,numerator,int,0,RET,$==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,numerator,int,0,DEF,($&1)==0
Fraction.java,getReducedFraction,denominator,int,0,ArithmeticException,$ < 0
Fraction.java,getReducedFraction,numerator,int,0,ArithmeticException,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,denominator,int,0,ArithmeticException,$==Integer.MIN_VALUE
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Fraction
FractionFormat.java,format,obj,null,1,IllegalArgumentException,$ instanceof Number
FractionFormat.java,parse,parsePosition,ParsePosition,0,ParseException,$.getIndex() == 0
FractionFormat.java,parse,num,Number,0,RET,$ == null
FractionFormat.java,parse,den,Number,0,RET,$ == null
FractionFormat.java,setDenominatorFormat,format,NumberFormat,0,IllegalArgumentException,$ == null
FractionFormat.java,setNumeratorFormat,format,NumberFormat,0,IllegalArgumentException,$ == null
FractionFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
FractionFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
ProperFractionFormat.java,format,whole,int,0,DEF,$ != 0
ProperFractionFormat.java,parse,ret,Fraction,0,RET,$ != null
ProperFractionFormat.java,parse,whole,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,parse,den,Number,0,RET,$ == null
ProperFractionFormat.java,parse,den,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,setWholeFormat,format,NumberFormat,0,IllegalArgumentException,$ == null
ContinuousOutputModel.java,append,model,ContinuousOutputModel,0,RET,$.steps.size() == 0
ContinuousOutputModel.java,append,steps,List<StepInterpolator>,1,DEF,$.size() == 0
ContinuousOutputModel.java,handleStep,steps,List<StepInterpolator>,0,DEF,$.size() == 0
ContinuousOutputModel.java,setInterpolatedTime,sMin,StepInterpolator,0,RET,locatePoint(time, $) <= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMin) <= 0
ContinuousOutputModel.java,setInterpolatedTime,sMax,StepInterpolator,0,RET,locatePoint(time, $) >= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMax) >= 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ < 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ > 0
ContinuousOutputModel.java,setInterpolatedTime,tMin,double,1,DEF,Math.abs(tMed - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,Math.abs($ - tMin) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMax,double,1,DEF,Math.abs($ - tMed) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,Math.abs(tMax - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,index,int,1,DEF,$ < low
ContinuousOutputModel.java,setInterpolatedTime,index,int,0,DEF,$ > high
DormandPrince54StepInterpolator.java,DormandPrince54StepInterpolator,interpolator,DormandPrince54StepInterpolator,1,DEF,$.v1 == null
DormandPrince54StepInterpolator.java,computeInterpolatedState,v1,double[],0,DEF,$ == null
RungeKuttaIntegrator.java,sanityChecks,equations,FirstOrderDifferentialEquations,0,IntegratorException,$.getDimension() != y0.length
RungeKuttaIntegrator.java,sanityChecks,equations,FirstOrderDifferentialEquations,0,IntegratorException,$.getDimension() != y.length
RungeKuttaIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,setStabilityCheck,stabilityReduction,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStabilityCheck,stabilityReduction,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl3,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl3,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl4,double,1,DEF,$ < 1.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl4,double,1,DEF,$ > 999.9
GraggBulirschStoerIntegrator.java,setOrderControl,maxOrder,int,0,DEF,$ <= 6
GraggBulirschStoerIntegrator.java,setOrderControl,maxOrder,int,0,DEF,$ % 2 != 0
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$ == null
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$.length != size
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudif,int,1,DEF,$ <= 0
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudif,int,1,DEF,$ >= 7
GraggBulirschStoerIntegrator.java,rescale,vecAbsoluteTolerance,double[],1,DEF,$ == null
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,DEF,2 * $ == n
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,RET,$ <= maxChecks
GraggBulirschStoerIntegrator.java,tryStep,k,int,0,RET,$ < maxIter
GraggBulirschStoerIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize > t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ > t
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize < t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ < t
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 0
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > 1.0e15
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > maxError
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ > 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,mu,int,0,DEF,$ >= 0
GraggBulirschStoerIntegrator.java,integrate,interpError,double,0,DEF,$ > 10.0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 1
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ <= targetIter
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 2
GraggBulirschStoerIntegrator.java,integrate,optimalIter,int,1,DEF,$ <= k
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ < targetIter
EmbeddedRungeKuttaIntegrator.java,integrate,y,double[],0,DEF,$ != y0
EmbeddedRungeKuttaIntegrator.java,integrate,vecAbsoluteTolerance,double[],1,DEF,$ != null
EmbeddedRungeKuttaIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize > t
EmbeddedRungeKuttaIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ > t
EmbeddedRungeKuttaIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize < t
EmbeddedRungeKuttaIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ < t
EmbeddedRungeKuttaIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
DormandPrince853StepInterpolator.java,DormandPrince853StepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState == null
DormandPrince853StepInterpolator.java,computeInterpolatedState,v,double[][],0,DEF,$ == null
DormandPrince853StepInterpolator.java,doFinalize,currentState,double[],0,RET,$ == null
DormandPrince853Integrator.java,estimateError,den,double,0,DEF,$ <= 0.0
RungeKuttaStepInterpolator.java,RungeKuttaStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ < 0
GraggBulirschStoerStepInterpolator.java,resetTables,polynoms,double[][],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ <= 4
GraggBulirschStoerStepInterpolator.java,GraggBulirschStoerStepInterpolator,interpolator,GraggBulirschStoerStepInterpolator,1,DEF,$.polynoms == null
GraggBulirschStoerStepInterpolator.java,computeCoefficients,polynoms,double[][],0,DEF,$ == null
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,RET,$ < 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 1
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 2
GraggBulirschStoerStepInterpolator.java,estimateError,currentDegree,int,0,DEF,$ >= 5
GraggBulirschStoerStepInterpolator.java,computeInterpolatedState,currentDegree,int,0,DEF,$ > 3
StepNormalizer.java,handleStep,lastState,double[],0,DEF,$ == null
AbstractStepInterpolator.java,AbstractStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ < minStep
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,sanityChecks,equations,FirstOrderDifferentialEquations,0,IntegratorException,$.getDimension() != y0.length
AdaptiveStepsizeIntegrator.java,sanityChecks,equations,FirstOrderDifferentialEquations,0,IntegratorException,$.getDimension() != y.length
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,IntegratorException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,IntegratorException,$.length != y0.length
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,IntegratorException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,IntegratorException,$.length != y0.length
AdaptiveStepsizeIntegrator.java,initializeStep,initialStep,double,0,RET,$ > 0
AdaptiveStepsizeIntegrator.java,filterStep,h,double,0,IntegratorException,Math.abs($) < minStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,filterStep,h,double,0,DEF,$ < -maxStep
EventState.java,evaluateStep,gb,double,1,FunctionEvaluationException:RET,$ >= 0
EventState.java,evaluateStep,root,double,0,RET,Math.abs(previousEventTime - $) > convergence
EventState.java,evaluateStep,previousEventTime,double,0,RET,Math.abs($ - root) > convergence
EventState.java,evaluateStep,pendingEventTime,double,0,RET,Math.abs(t1 - $) <= convergence
EventState.java,evaluateStep,t1,double,0,RET,Math.abs($ - pendingEventTime) <= convergence
EventState.java,evaluateStep,cause,Throwable,1,DEF,$ != null
EventState.java,evaluateStep,cause,null,1,DEF,$ instanceof DerivativeException
EventState.java,evaluateStep,cause,Throwable,0,DEF,$ != null
EventState.java,evaluateStep,cause,null,0,DEF,$ instanceof EventException
EventState.java,reset,nextAction,int,0,DEF,$ == EventHandler.RESET_STATE
CombinedEventsManager.java,evaluateStep,first,EventState,1,DEF,$ == null
RealMatrixImpl.java,RealMatrixImpl,d,double[][],0,NullPointerException,$ == null
RealMatrixImpl.java,RealMatrixImpl,nRows,int,0,DEF,$ == 0
RealMatrixImpl.java,RealMatrixImpl,nCols,int,0,DEF,$ == 0
RealMatrixImpl.java,RealMatrixImpl,r,int,0,DEF,d[$].length != nCols
RealMatrixImpl.java,RealMatrixImpl,d,double[][],0,DEF,$[r].length != nCols
RealMatrixImpl.java,setSubMatrix,data,double[][],1,DEF,$ == null
RealMatrixImpl.java,setSubMatrix,row,int,0,DEF,$ > 0
RealMatrixImpl.java,setSubMatrix,column,int,0,DEF,$ > 0
RealMatrixImpl.java,setSubMatrix,nRows,int,0,DEF,$ == 0
RealMatrixImpl.java,setSubMatrix,nCols,int,0,DEF,$ == 0
RealMatrixImpl.java,setSubMatrix,i,int,0,DEF,subMatrix[$].length != nCols
RealMatrixImpl.java,setSubMatrix,subMatrix,double[][],0,DEF,$[i].length != nCols
RealMatrixImpl.java,operate,v,double[],0,DEF,$.length != nCols
RealMatrixImpl.java,preMultiply,v,double[],0,DEF,$.length != nRows
RealVectorFormat.java,format,i,int,0,DEF,$ > 0
RealVectorFormat.java,format,obj,null,0,RET,$ instanceof RealVector
RealVectorFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
RealVectorFormat.java,parse,component,Number,1,DEF,$ != null
RealVectorImpl.java,RealVectorImpl,d,double[],0,NullPointerException,$ == null
RealVectorImpl.java,RealVectorImpl,d,double[],0,IllegalArgumentException,$.length == 0
RealVectorImpl.java,unitVector,norm,double,0,DEF,$ == 0
RealVectorImpl.java,unitize,norm,double,0,DEF,$ == 0
RealVectorImpl.java,checkVectorDimensions,data,double[],0,IllegalArgumentException,$.length != n
RealVectorImpl.java,equals,other,Object,0,RET,$ == null
RealVectorImpl.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
AbstractRealMatrix.java,AbstractRealMatrix,rowDimension,int,0,DEF,$ <= 0
AbstractRealMatrix.java,AbstractRealMatrix,columnDimension,int,0,DEF,$ <= 0
AbstractRealMatrix.java,visit,row,int,0,DEF,$ == endRow
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$.length < rowsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$[0].length < columnsCount
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$.length < selectedRows.length
AbstractRealMatrix.java,copySubMatrix,destination,double[][],0,DEF,$[0].length < selectedColumns.length
AbstractRealMatrix.java,setSubMatrix,nRows,int,0,DEF,$ == 0
AbstractRealMatrix.java,setSubMatrix,nCols,int,0,DEF,$ == 0
AbstractRealMatrix.java,setSubMatrix,r,int,0,DEF,subMatrix[$].length != nCols
AbstractRealMatrix.java,setSubMatrix,subMatrix,double[][],0,DEF,$[r].length != nCols
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getRowDimension() != 1
AbstractRealMatrix.java,setRowMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getColumnDimension() != nCols
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getRowDimension() != nRows
AbstractRealMatrix.java,setColumnMatrix,matrix,RealMatrix,0,InvalidMatrixException,$.getColumnDimension() != 1
AbstractRealMatrix.java,setRowVector,vector,RealVector,0,InvalidMatrixException,$.getDimension() != nCols
AbstractRealMatrix.java,setColumnVector,vector,RealVector,0,InvalidMatrixException,$.getDimension() != nRows
AbstractRealMatrix.java,setRow,array,double[],0,InvalidMatrixException,$.length != nCols
AbstractRealMatrix.java,setColumn,array,double[],0,InvalidMatrixException,$.length != nRows
AbstractRealMatrix.java,inverse,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,isSingular,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,getTrace,nRows,int,0,NonSquareMatrixException,$ != nCols
AbstractRealMatrix.java,operate,v,double[],0,DEF,$.length != nCols
AbstractRealMatrix.java,operate,v,RealVector,0,DEF,$.getDimension() != nCols
AbstractRealMatrix.java,preMultiply,v,double[],0,DEF,$.length != nRows
AbstractRealMatrix.java,preMultiply,v,RealVector,0,DEF,$.getDimension() != nRows
AbstractRealMatrix.java,solve,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,solve,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,luDecompose,lu,DecompositionSolver,0,DEF,$ == null
AbstractRealMatrix.java,toString,i,int,0,DEF,$ > 0
AbstractRealMatrix.java,toString,j,int,0,DEF,$ > 0
AbstractRealMatrix.java,equals,object,Object,0,RET,$ instanceof RealMatrix == false
AbstractRealMatrix.java,equals,object,null,0,RET,$ instanceof RealMatrix
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getColumnDimension() != nCols
AbstractRealMatrix.java,equals,m,RealMatrix,0,RET,$.getRowDimension() != nRows
AbstractRealMatrix.java,checkRowIndex,row,int,0,MatrixIndexException,$ < 0
AbstractRealMatrix.java,checkColumnIndex,column,int,0,MatrixIndexException,$ < 0
AbstractRealMatrix.java,checkSubMatrixIndex,startRow,int,0,MatrixIndexException,$ > endRow
AbstractRealMatrix.java,checkSubMatrixIndex,startColumn,int,0,MatrixIndexException,$ > endColumn
AbstractRealMatrix.java,checkSubMatrixIndex,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
AbstractRealMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
AbstractRealMatrix.java,checkSubMatrixIndex,selectedRows,int[],0,MatrixIndexException,$.length == 0
DenseRealMatrix.java,toBlocksLayout,length,int,0,DEF,$ != columns
DenseRealMatrix.java,getSubMatrix,heightExcess,int,1,DEF,$ > 0
DenseRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
DenseRealMatrix.java,getSubMatrix,widthExcess,int,1,DEF,$ > 0
DenseRealMatrix.java,setSubMatrix,refLength,int,0,DEF,$ < 1
DenseRealMatrix.java,setSubMatrix,subRow,double[],0,DEF,$.length != refLength
DenseRealMatrix.java,getRowMatrix,jWidth,int,1,DEF,$ > available
DenseRealMatrix.java,setRowMatrix,matrix,DenseRealMatrix,0,InvalidMatrixException,$.getRowDimension() != 1
DenseRealMatrix.java,setRowMatrix,matrix,DenseRealMatrix,0,InvalidMatrixException,$.getColumnDimension() != nCols
DenseRealMatrix.java,setRowMatrix,jWidth,int,1,DEF,$ > available
DenseRealMatrix.java,getColumnMatrix,outIndex,int,0,DEF,$ >= outBlock.length
DenseRealMatrix.java,setColumnMatrix,matrix,DenseRealMatrix,0,InvalidMatrixException,$.getRowDimension() != nRows
DenseRealMatrix.java,setColumnMatrix,matrix,DenseRealMatrix,0,InvalidMatrixException,$.getColumnDimension() != 1
DenseRealMatrix.java,setColumnMatrix,mIndex,int,0,DEF,$ >= mBlock.length
DenseRealMatrix.java,setRow,array,double[],0,InvalidMatrixException,$.length != nCols
DenseRealMatrix.java,setColumn,array,double[],0,InvalidMatrixException,$.length != nRows
DenseRealMatrix.java,operate,v,double[],0,DEF,$.length != columns
DenseRealMatrix.java,preMultiply,v,double[],0,DEF,$.length != rows
SparseRealVector.java,add,v,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,append,v,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,dotProduct,idx,int,0,DEF,$ < v.length
SparseRealVector.java,getSubVector,key,int,0,DEF,$ >= index
SparseRealVector.java,getSubVector,key,int,0,DEF,$ < end
SparseRealVector.java,getDistance,v,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,getL1Distance,v,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,getLInfDistance,delta,double,0,DEF,$ > max
SparseRealVector.java,getLInfDistance,iter,Iterator,0,DEF,$.value() > max
SparseRealVector.java,getLInfDistance,v,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,getLInfDistance,delta,double,0,DEF,$ > max
SparseRealVector.java,outerProduct,v,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,subtract,v,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,checkIndex,index,int,0,MatrixIndexException,$ < 0
SparseRealVector.java,equals,obj,Object,0,RET,$ == null
SparseRealVector.java,equals,obj,null,0,RET,$ instanceof SparseRealVector
SparseRealVector.java,equals,virtualSize,int,0,RET,$ != other.virtualSize
SparseRealVector.java,equals,test,double,0,RET,Math.abs($) > epsilon
BigMatrixImpl.java,BigMatrixImpl,rowDimension,int,0,IllegalArgumentException,$ <=0
BigMatrixImpl.java,BigMatrixImpl,columnDimension,int,0,IllegalArgumentException,$ <=0
BigMatrixImpl.java,BigMatrixImpl,d,BigDecimal[][],0,NullPointerException,$ == null
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,r,int,0,IllegalArgumentException,d[$].length != nCols
BigMatrixImpl.java,BigMatrixImpl,d,BigDecimal[][],0,IllegalArgumentException,$[r].length != nCols
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,d,double[][],0,IllegalArgumentException,$[row].length != nCols
BigMatrixImpl.java,BigMatrixImpl,row,int,0,IllegalArgumentException,d[$].length != nCols
BigMatrixImpl.java,BigMatrixImpl,nRows,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,nCols,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,BigMatrixImpl,d,String[][],0,IllegalArgumentException,$[row].length != nCols
BigMatrixImpl.java,BigMatrixImpl,row,int,0,IllegalArgumentException,d[$].length != nCols
BigMatrixImpl.java,getSubMatrix,startRow,int,0,MatrixIndexException,$ > endRow
BigMatrixImpl.java,getSubMatrix,startColumn,int,0,MatrixIndexException,$ > endColumn
BigMatrixImpl.java,getSubMatrix,selectedColumns,int[],0,MatrixIndexException,selectedRows.length * $.length == 0
BigMatrixImpl.java,getSubMatrix,selectedRows,int[],0,MatrixIndexException,$.length * selectedColumns.length == 0
BigMatrixImpl.java,getSubMatrix,selectedRows,int[],0,MatrixIndexException,$.length == 0
BigMatrixImpl.java,setSubMatrix,nRows,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,setSubMatrix,nCols,int,0,IllegalArgumentException,$ == 0
BigMatrixImpl.java,setSubMatrix,r,int,0,IllegalArgumentException,subMatrix[$].length != nCols
BigMatrixImpl.java,setSubMatrix,subMatrix,BigDecimal[][],0,IllegalArgumentException,$[r].length != nCols
BigMatrixImpl.java,setSubMatrix,data,BigDecimal[][],1,DEF,$ == null
BigMatrixImpl.java,setSubMatrix,row,int,0,DEF,$ > 0
BigMatrixImpl.java,setSubMatrix,column,int,0,DEF,$ > 0
BigMatrixImpl.java,isSingular,lu,BigDecimal[][],1,RET,$ == null
BigMatrixImpl.java,preMultiply,v,BigDecimal[],0,IllegalArgumentException,$.length != nRows
BigMatrixImpl.java,solve,b,BigDecimal[],0,IllegalArgumentException,$.length != nRows
BigMatrixImpl.java,luDecompose,nRows,int,0,NonSquareMatrixException,$ != nCols
BigMatrixImpl.java,luDecompose,largest,BigDecimal,0,DEF,sum.abs().compareTo($) == 1
BigMatrixImpl.java,luDecompose,sum,BigDecimal,0,DEF,$.abs().compareTo(largest) == 1
BigMatrixImpl.java,luDecompose,col,int,0,SingularMatrixException,lu[max][$].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,TOO_SMALL,BigDecimal,0,SingularMatrixException,lu[max][col].abs().compareTo($) <= 0
BigMatrixImpl.java,luDecompose,max,int,0,SingularMatrixException,lu[$][col].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,lu,BigDecimal[][],0,SingularMatrixException,$[max][col].abs().compareTo(TOO_SMALL) <= 0
BigMatrixImpl.java,luDecompose,max,int,0,DEF,$ != col
BigMatrixImpl.java,toString,data,BigDecimal[][],0,DEF,$ != null
BigMatrixImpl.java,toString,i,int,0,DEF,$ > 0
BigMatrixImpl.java,toString,j,int,0,DEF,$ > 0
BigMatrixImpl.java,equals,object,Object,0,RET,$ instanceof BigMatrixImpl == false
BigMatrixImpl.java,equals,object,null,0,RET,$ instanceof BigMatrixImpl
BigMatrixImpl.java,equals,m,BigMatrix,0,RET,$.getColumnDimension() != nCols
BigMatrixImpl.java,equals,m,BigMatrix,0,RET,$.getRowDimension() != nRows
BigMatrixImpl.java,getLUMatrix,lu,BigDecimal[][],0,DEF,$ == null
BigMatrixImpl.java,checkRowIndex,row,int,0,MatrixIndexException,$ < 0
BigMatrixImpl.java,checkColumnIndex,column,int,0,MatrixIndexException,$ < 0
QRDecompositionImpl.java,QRDecompositionImpl,a,double,0,DEF,$ != 0.0
QRDecompositionImpl.java,getR,cachedR,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQT,cachedQT,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,getQT,minor,int,0,DEF,qrtMinor[$] != 0.0
QRDecompositionImpl.java,getQT,qrtMinor,double[],0,DEF,$[minor] != 0.0
QRDecompositionImpl.java,getH,cachedH,RealMatrix,0,DEF,$ == null
QRDecompositionImpl.java,isNonSingular,diag,double,0,RET,$ == 0
QRDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
QRDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
LUDecompositionImpl.java,LUDecompositionImpl,sum,double,0,DEF,Math.abs($) > largest
LUDecompositionImpl.java,LUDecompositionImpl,col,int,0,RET,Math.abs(lu[max][$]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,max,int,0,RET,Math.abs(lu[$][col]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,lu,double[][],0,RET,Math.abs($[max][col]) < singularityThreshold
LUDecompositionImpl.java,LUDecompositionImpl,max,int,0,DEF,$ != col
LUDecompositionImpl.java,getL,cachedL,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,getU,cachedU,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,getP,cachedP,RealMatrix,0,DEF,$ == null
LUDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
LUDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
LUDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
SingularValueDecompositionImpl.java,getU,cachedU,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getU,m,int,1,DEF,$ >= n
SingularValueDecompositionImpl.java,getUT,cachedUt,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getS,cachedS,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getV,cachedV,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getV,m,int,1,DEF,$ >= n
SingularValueDecompositionImpl.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
SingularValueDecompositionImpl.java,getRank,singularValues,double[],0,RET,$[i] > threshold
SingularValueDecompositionImpl.java,getRank,i,int,0,RET,singularValues[$] > threshold
SingularValueDecompositionImpl.java,solve,b,double[],0,DEF,$.length != singularValues.length
SingularValueDecompositionImpl.java,solve,si,double,0,SingularMatrixException,$ == 0
SingularValueDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != singularValues.length
SingularValueDecompositionImpl.java,solve,si,double,0,SingularMatrixException,$ == 0
SingularValueDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != singularValues.length
SingularValueDecompositionImpl.java,solve,si,double,0,SingularMatrixException,$ == 0
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,lTData,double[][],0,NotPositiveDefiniteMatrixException,$[i][i] < absolutePositivityThreshold
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,i,int,0,NotPositiveDefiniteMatrixException,lTData[$][$] < absolutePositivityThreshold
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,lJI,double,0,NotSymmetricMatrixException,Math.abs(lIJ - $) > maxDelta
CholeskyDecompositionImpl.java,CholeskyDecompositionImpl,lIJ,double,0,NotSymmetricMatrixException,Math.abs($ - lJI) > maxDelta
CholeskyDecompositionImpl.java,getL,cachedL,RealMatrix,0,DEF,$ == null
CholeskyDecompositionImpl.java,getLT,cachedLT,RealMatrix,0,DEF,$ == null
CholeskyDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
CholeskyDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
CholeskyDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
TriDiagonalTransformer.java,getQ,cachedQ,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,cachedQt,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getQT,hK,double[],0,DEF,$[k] != 0.0
TriDiagonalTransformer.java,getQT,k,int,0,DEF,hK[$] != 0.0
TriDiagonalTransformer.java,getT,cachedT,RealMatrix,0,DEF,$ == null
TriDiagonalTransformer.java,getT,i,int,0,DEF,$ > 0
TriDiagonalTransformer.java,transform,a,double,0,DEF,$ != 0.0
EigenDecompositionImpl.java,getV,cachedV,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getV,eigenvectors,RealVectorImpl[],0,DEF,$ == null
EigenDecompositionImpl.java,getD,cachedD,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getVT,cachedVt,RealMatrix,0,DEF,$ == null
EigenDecompositionImpl.java,getVT,eigenvectors,RealVectorImpl[],0,DEF,$ == null
EigenDecompositionImpl.java,getEigenvector,eigenvectors,RealVectorImpl[],0,DEF,$ == null
EigenDecompositionImpl.java,getSolver,eigenvectors,RealVectorImpl[],0,DEF,$ == null
EigenDecompositionImpl.java,solve,b,double[],0,DEF,$.length != m
EigenDecompositionImpl.java,solve,b,RealVector,0,DEF,$.getDimension() != m
EigenDecompositionImpl.java,solve,b,RealMatrix,0,DEF,$.getRowDimension() != m
EigenDecompositionImpl.java,isNonSingular,realEigenvalues,double[],0,RET,$[i] == 0
EigenDecompositionImpl.java,isNonSingular,i,int,0,RET,realEigenvalues[$] == 0
EigenDecompositionImpl.java,isNonSingular,imagEigenvalues,double[],0,RET,$[i] == 0
EigenDecompositionImpl.java,isNonSingular,i,int,0,RET,imagEigenvalues[$] == 0
EigenDecompositionImpl.java,computeSplits,secondary,double[],0,DEF,Math.abs($[i]) <= max
EigenDecompositionImpl.java,computeSplits,i,int,0,DEF,Math.abs(secondary[$]) <= max
EigenDecompositionImpl.java,process2RowsBlock,delta,double,0,InvalidMatrixException,$ < 0
EigenDecompositionImpl.java,process3RowsBlock,delta,double,0,InvalidMatrixException,$ >= 0
EigenDecompositionImpl.java,process3RowsBlock,z0,double,0,DEF,$ < z1
EigenDecompositionImpl.java,process3RowsBlock,z1,double,0,DEF,$ < z2
EigenDecompositionImpl.java,process3RowsBlock,z0,double,0,DEF,$ < z1
EigenDecompositionImpl.java,processGeneralBlock,sumOffDiag,double,0,RET,$ == 0
EigenDecompositionImpl.java,processGeneralBlock,work,double[],0,DEF,$[i + 2] <= 0
EigenDecompositionImpl.java,processGeneralBlock,i,int,0,DEF,work[$ + 2] <= 0
EigenDecompositionImpl.java,processGeneralBlock,k,int,0,MaxIterationsExceededException,$ >= maxIter
EigenDecompositionImpl.java,processGeneralBlock,pingPong,int,0,DEF,$ == 0
EigenDecompositionImpl.java,processGeneralBlock,n0,int,0,DEF,$ - i0 > 3
EigenDecompositionImpl.java,processGeneralBlock,i0,int,0,DEF,n0 - $ > 3
EigenDecompositionImpl.java,goodStep,start,int,0,RET,$ >= deflatedEnd
EigenDecompositionImpl.java,goodStep,s,double,1,DEF,$ <= t
EigenDecompositionImpl.java,goodStep,dMin,double,0,DEF,$ <= 0
EigenDecompositionImpl.java,goodStep,deflatedEnd,int,0,DEF,$ < end
EigenDecompositionImpl.java,goodStep,dMin,double,0,RET,$ < 0
EigenDecompositionImpl.java,goodStep,dMin,double,1,RET,$ >= 0
EigenDecompositionImpl.java,goodStep,dMin1,double,1,RET,$ > 0
EigenDecompositionImpl.java,goodStep,dMin,double,1,RET,$ < 0.0
EigenDecompositionImpl.java,goodStep,dMin1,double,1,RET,$ > 0.0
EigenDecompositionImpl.java,goodStep,dMin,double,1,DEF,$ < 0.0
EigenDecompositionImpl.java,goodStep,tType,int,1,DEF,$ < -22
EigenDecompositionImpl.java,goodStep,dMin1,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,eigenvaluesRange,range,double,0,DEF,$ < absoluteTolerance
EigenDecompositionImpl.java,eigenvaluesRange,middle,double,1,DEF,countEigenValues($, index, n) >= 1
EigenDecompositionImpl.java,eigenvaluesRange,index,int,1,DEF,countEigenValues(middle, $, n) >= 1
EigenDecompositionImpl.java,eigenvaluesRange,n,int,1,DEF,countEigenValues(middle, index, $) >= 1
EigenDecompositionImpl.java,eigenvaluesRange,range,double,0,DEF,$ < absoluteTolerance
EigenDecompositionImpl.java,eigenvaluesRange,middle,double,1,DEF,countEigenValues($, index, n) >= n
EigenDecompositionImpl.java,eigenvaluesRange,index,int,1,DEF,countEigenValues(middle, $, n) >= n
EigenDecompositionImpl.java,eigenvaluesRange,n,int,1,DEF,countEigenValues(middle, index, $) >= n
EigenDecompositionImpl.java,countEigenValues,ratio,double,0,DEF,$ <= 0
EigenDecompositionImpl.java,dqds,pingPong,int,1,DEF,$ == 0
EigenDecompositionImpl.java,dqd,pingPong,int,1,DEF,$ == 0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 2] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 2] == 0.0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 3] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 3] == 0.0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 2] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 2] == 0.0
EigenDecompositionImpl.java,dqd,work,double[],1,DEF,$[j4 - 2] == 0.0
EigenDecompositionImpl.java,dqd,j4,int,1,DEF,work[$ - 2] == 0.0
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,0,RET,$ <= 0.0
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,DEF,$ == dN
EigenDecompositionImpl.java,computeShiftIncrement,dMin1,double,1,DEF,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,gap1,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,computeShiftIncrement,gap1,double,1,DEF,$ > b1
EigenDecompositionImpl.java,computeShiftIncrement,dN,double,0,DEF,$ > b1
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,$ == 0.0
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,100 * Math.max($, b1) < a2
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * Math.max(b2, $) < a2
EigenDecompositionImpl.java,computeShiftIncrement,cnst1,double,0,DEF,$ < a2
EigenDecompositionImpl.java,computeShiftIncrement,a2,double,0,DEF,$ < cnst1
EigenDecompositionImpl.java,computeShiftIncrement,dMin,double,1,RET,$ == dN2
EigenDecompositionImpl.java,computeShiftIncrement,np,int,0,RET,work[$ - 8] > b2
EigenDecompositionImpl.java,computeShiftIncrement,work,double[],0,RET,$[np - 8] > b2
EigenDecompositionImpl.java,computeShiftIncrement,np,int,0,RET,work[$ - 4] > b1
EigenDecompositionImpl.java,computeShiftIncrement,work,double[],0,RET,$[np - 4] > b1
EigenDecompositionImpl.java,computeShiftIncrement,start,int,0,RET,end - $ > 2
EigenDecompositionImpl.java,computeShiftIncrement,end,int,0,RET,$ - start > 2
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,$ == 0.0
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,DEF,100 * Math.max($, b1) < a2
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * Math.max(b2, $) < a2
EigenDecompositionImpl.java,computeShiftIncrement,cnst1,double,0,DEF,$ < a2
EigenDecompositionImpl.java,computeShiftIncrement,a2,double,1,DEF,$ < cnst1
EigenDecompositionImpl.java,computeShiftIncrement,tType,int,1,DEF,$ == -6
EigenDecompositionImpl.java,computeShiftIncrement,tType,int,1,DEF,$ == -18
EigenDecompositionImpl.java,computeShiftIncrement,dMin1,double,1,RET,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,dMin2,double,1,RET,$ == dN2
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,RET,$ != 0.0
EigenDecompositionImpl.java,computeShiftIncrement,oldB1,double,0,DEF,100 * Math.max(b1, $) < b2
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * Math.max($, oldB1) < b2
EigenDecompositionImpl.java,computeShiftIncrement,gap2,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,computeShiftIncrement,dMin1,double,0,DEF,$ == dN1
EigenDecompositionImpl.java,computeShiftIncrement,dMin2,double,1,RET,$ == dN2
EigenDecompositionImpl.java,computeShiftIncrement,b2,double,0,RET,$ != 0.0
EigenDecompositionImpl.java,computeShiftIncrement,b1,double,0,DEF,100 * $ < b2
EigenDecompositionImpl.java,computeShiftIncrement,gap2,double,1,DEF,$ > 0.0
EigenDecompositionImpl.java,updateSigma,tau,double,1,DEF,$ < sigma
EigenDecompositionImpl.java,findEigenvector,absG,double,0,DEF,$ < minG
BiDiagonalTransformer.java,BiDiagonalTransformer,m,int,1,DEF,$ >= n
BiDiagonalTransformer.java,getU,cachedU,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getU,hK,double[],0,DEF,$[k - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,k,int,0,DEF,hK[$ - diagOffset] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,hK[k - $] != 0.0
BiDiagonalTransformer.java,getU,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getB,cachedB,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getB,m,int,1,DEF,$ < n
BiDiagonalTransformer.java,getB,i,int,0,DEF,$ > 0
BiDiagonalTransformer.java,getV,cachedV,RealMatrix,0,DEF,$ == null
BiDiagonalTransformer.java,getV,hK,double[],0,DEF,$[k] != 0.0
BiDiagonalTransformer.java,getV,k,int,0,DEF,hK[$] != 0.0
BiDiagonalTransformer.java,getV,diagOffset,int,0,DEF,$ > 0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToUpperBiDiagonal,b,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,a,double,0,DEF,$ != 0.0
BiDiagonalTransformer.java,transformToLowerBiDiagonal,b,double,0,DEF,$ != 0.0
SparseRealMatrix.java,setEntry,value,double,1,DEF,$ == 0.0
SparseRealMatrix.java,addToEntry,value,double,1,DEF,$ == 0.0
SparseRealMatrix.java,multiplyEntry,value,double,1,DEF,$ == 0.0
LevenbergMarquardtEstimator.java,estimate,dk,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,estimate,s,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,estimate,maxCosine,double,0,RET,$ <= orthoTolerance
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,0.1 * $ < previousCost
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,DEF,$ <= 0.25
LevenbergMarquardtEstimator.java,estimate,cost,double,0,DEF,0.1 * $ >= previousCost
LevenbergMarquardtEstimator.java,estimate,tmp,double,0,DEF,$ < 0.1
LevenbergMarquardtEstimator.java,estimate,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,estimate,ratio,double,0,DEF,$ >= 0.75
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,DEF,$ >= 1.0e-4
LevenbergMarquardtEstimator.java,estimate,actRed,double,0,RET,Math.abs($) <= costRelativeTolerance
LevenbergMarquardtEstimator.java,estimate,preRed,double,0,RET,$ <= costRelativeTolerance
LevenbergMarquardtEstimator.java,estimate,ratio,double,0,RET,$ <= 2.0
LevenbergMarquardtEstimator.java,estimate,actRed,double,1,EstimationException,Math.abs($) <= 2.2204e-16
LevenbergMarquardtEstimator.java,estimate,preRed,double,1,EstimationException,$ <= 2.2204e-16
LevenbergMarquardtEstimator.java,estimate,ratio,double,1,EstimationException,$ <= 2.0
LevenbergMarquardtEstimator.java,estimate,maxCosine,double,0,EstimationException,$ <= 2.2204e-16
LevenbergMarquardtEstimator.java,determineLMParameter,rank,int,0,DEF,$ == solvedCols
LevenbergMarquardtEstimator.java,determineLMParameter,paru,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,lmPar,double,0,DEF,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,parl,double,0,RET,$ == 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,0,RET,$ <= previousFP
LevenbergMarquardtEstimator.java,determineLMParameter,previousFP,double,0,RET,$ < 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,1,DEF,$ > 0
LevenbergMarquardtEstimator.java,determineLMParameter,fp,double,0,DEF,$ < 0
LevenbergMarquardtEstimator.java,determineLMDirection,dpj,double,0,DEF,$ != 0
LevenbergMarquardtEstimator.java,determineLMDirection,lmDiag,double[],0,DEF,$[k] != 0
LevenbergMarquardtEstimator.java,determineLMDirection,k,int,0,DEF,lmDiag[$] != 0
LevenbergMarquardtEstimator.java,determineLMDirection,lmDiag,double[],0,DEF,$[j] == 0
LevenbergMarquardtEstimator.java,determineLMDirection,j,int,0,DEF,lmDiag[$] == 0
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ == solvedCols
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ < solvedCols
LevenbergMarquardtEstimator.java,determineLMDirection,nSing,int,0,DEF,$ > 0
LevenbergMarquardtEstimator.java,qrDecomposition,norm2,double,0,DEF,$ > ak2
LevenbergMarquardtEstimator.java,qrDecomposition,ak2,double,0,RET,$ == 0
AbstractEstimator.java,updateResidualsAndCost,costEvaluations,int,0,EstimationException,++$ > maxCostEval
AbstractEstimator.java,guessParametersErrors,m,int,0,EstimationException,$ <= p
DirectSearchOptimizer.java,buildSimplex,i,int,0,DEF,$ > 0
DirectSearchOptimizer.java,buildSimplex,i,int,0,DEF,$ < n
DirectSearchOptimizer.java,setMultiStart,starts,int,1,DEF,$ < 2
DirectSearchOptimizer.java,minimize,evaluations,int,1,DEF,$ >= maxEvaluations
DirectSearchOptimizer.java,minimize,minima,PointCostPair[],0,ConvergenceException,$[0] == null
DirectSearchOptimizer.java,compare,o1,PointCostPair,1,RET,$ == null
DirectSearchOptimizer.java,compare,o2,PointCostPair,0,RET,$ == null
MultiDirectional.java,iterateSimplex,reflectedCost,double,0,RET,$ < originalCost
MultiDirectional.java,iterateSimplex,reflectedCost,double,0,DEF,$ <= expandedCost
MultiDirectional.java,iterateSimplex,contractedCost,double,0,RET,$ < originalCost
NelderMead.java,iterateSimplex,smallest,double,1,DEF,$ <= costR
NelderMead.java,iterateSimplex,costR,double,1,DEF,$ < secondLargest
NelderMead.java,iterateSimplex,costR,double,1,DEF,$ < smallest
NelderMead.java,iterateSimplex,costE,double,1,DEF,$ < costR
NelderMead.java,iterateSimplex,costR,double,1,RET,$ < largest
NelderMead.java,iterateSimplex,costC,double,0,RET,$ <= costR
NelderMead.java,iterateSimplex,costC,double,0,RET,$ < largest
Beta.java,regularizedBeta,x,double,1,DEF,$ < 0
Beta.java,regularizedBeta,x,double,1,DEF,$ > 1
Beta.java,regularizedBeta,a,double,1,DEF,$ <= 0.0
Beta.java,regularizedBeta,b,double,1,DEF,$ <= 0.0
Beta.java,getB,n,int,1,DEF,$ % 2 == 0
Beta.java,logBeta,a,double,1,DEF,$ <= 0.0
Beta.java,logBeta,b,double,1,DEF,$ <= 0.0
Gamma.java,logGamma,x,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaP,a,double,1,DEF,$ >= 1.0
Gamma.java,regularizedGammaP,x,double,1,DEF,$ > a
Gamma.java,regularizedGammaP,n,double,1,MaxIterationsExceededException,$ >= maxIterations
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ <= 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ == 0.0
Gamma.java,regularizedGammaQ,x,double,1,DEF,$ < a
Gamma.java,regularizedGammaQ,a,double,1,DEF,$ < 1.0
Erf.java,erf,x,double,0,DEF,$ < 0
Vector3DFormat.java,format,obj,null,0,RET,$ instanceof Vector3D
Vector3DFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
Vector3DFormat.java,parse,x,Number,0,RET,$ == null
Vector3DFormat.java,parse,y,Number,0,RET,$ == null
Vector3DFormat.java,parse,z,Number,0,RET,$ == null
Vector3D.java,normalize,s,double,0,DEF,$ == 0
Vector3D.java,orthogonal,threshold,double,0,DEF,$ == 0
Vector3D.java,orthogonal,x,double,1,RET,$ >= -threshold
Vector3D.java,orthogonal,x,double,1,RET,$ <= threshold
Vector3D.java,orthogonal,y,double,0,RET,$ >= -threshold
Vector3D.java,orthogonal,y,double,0,RET,$ <= threshold
Vector3D.java,angle,normProduct,double,0,DEF,$ == 0
Vector3D.java,angle,dot,double,0,RET,$ < -threshold
Vector3D.java,angle,dot,double,0,RET,$ > threshold
Vector3D.java,angle,dot,double,0,RET,$ >= 0
Vector3D.java,equals,other,Object,0,RET,$ == null
Rotation.java,Rotation,norm,double,0,DEF,$ == 0
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$.length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[0].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[1].length != 3
Rotation.java,Rotation,m,double[][],0,NotARotationMatrixException,$[2].length != 3
Rotation.java,Rotation,det,double,0,NotARotationMatrixException,$ < 0.0
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,s,double,1,DEF,$ > -0.19
Rotation.java,Rotation,u1u1,double,0,IllegalArgumentException,$ == 0
Rotation.java,Rotation,u2u2,double,0,IllegalArgumentException,$ == 0
Rotation.java,Rotation,v1v1,double,0,IllegalArgumentException,$ == 0
Rotation.java,Rotation,v2v2,double,0,IllegalArgumentException,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,c,double,0,RET,$ == 0
Rotation.java,Rotation,normProduct,double,0,IllegalArgumentException,$ == 0
Rotation.java,getAxis,squaredSine,double,1,RET,$ == 0
Rotation.java,getAxis,q0,double,0,RET,$ < 0
Rotation.java,getAngle,q0,double,1,RET,$ < -0.1
Rotation.java,getAngle,q0,double,1,RET,$ > 0.1
Rotation.java,getAngle,q0,double,0,RET,$ < 0
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XYX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.XZX
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getX() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YXY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.YZY
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getY() > 0.9999999999
Rotation.java,getAngles,order,RotationOrder,1,CardanEulerSingularityException:RET,$ == RotationOrder.ZXZ
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() < -0.9999999999
Rotation.java,getAngles,v2,Vector3D,0,CardanEulerSingularityException,$.getZ() > 0.9999999999
Rotation.java,orthogonalizeMatrix,fn1,double,0,RET,Math.abs($ - fn) <= threshold
Rotation.java,orthogonalizeMatrix,fn,double,0,RET,Math.abs(fn1 - $) <= threshold
ValueServer.java,resetReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,closeReplayFile,filePointer,BufferedReader,0,DEF,$ != null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,DEF,$ == null
ValueServer.java,getNextDigest,empiricalDistribution,EmpiricalDistribution,0,DEF,$.getBinStats().size() == 0
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,$ == null
ValueServer.java,getNextReplay,str,String,0,DEF,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,(str = $.readLine()) == null
ValueServer.java,getNextReplay,str,String,0,DEF,($ = filePointer.readLine()) == null
ValueServer.java,getNextReplay,filePointer,BufferedReader,0,DEF,(str = $.readLine()) == null
UncorrelatedRandomVectorGenerator.java,UncorrelatedRandomVectorGenerator,mean,double[],0,IllegalArgumentException,$.length != standardDeviation.length
EmpiricalDistributionImpl.java,load,sampleStats,SummaryStatistics,0,DEF,$.getN() == 0
EmpiricalDistributionImpl.java,load,in,BufferedReader,0,DEF,$ != null
EmpiricalDistributionImpl.java,load,in,BufferedReader,0,DEF,$ != null
EmpiricalDistributionImpl.java,getAdapter,in,null,1,RET,$ instanceof BufferedReader
EmpiricalDistributionImpl.java,getAdapter,in,null,1,RET,$ instanceof double[]
EmpiricalDistributionImpl.java,getNextValue,stats,SummaryStatistics,0,RET,$.getN() > 0
EmpiricalDistributionImpl.java,getNextValue,stats,SummaryStatistics,1,RET,$.getStandardDeviation() > 0
RandomDataImpl.java,nextHexString,len,int,0,IllegalArgumentException,$ <= 0
RandomDataImpl.java,nextHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextInt,lower,int,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,nextLong,lower,long,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,nextSecureHexString,len,int,0,IllegalArgumentException,$ <= 0
RandomDataImpl.java,nextSecureHexString,hex,String,0,DEF,$.length() == 1
RandomDataImpl.java,nextSecureInt,lower,int,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,nextSecureLong,lower,long,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,nextPoisson,mean,double,0,IllegalArgumentException,$ <= 0
RandomDataImpl.java,nextPoisson,r,double,1,DEF,$ >= p
RandomDataImpl.java,nextGaussian,sigma,double,0,IllegalArgumentException,$ <= 0
RandomDataImpl.java,nextExponential,mean,double,0,IllegalArgumentException,$ < 0.0
RandomDataImpl.java,nextUniform,lower,double,0,IllegalArgumentException,$ >= upper
RandomDataImpl.java,getRan,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,getSecRan,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeedSecure,secRand,SecureRandom,0,DEF,$ == null
RandomDataImpl.java,reSeed,rand,RandomGenerator,0,DEF,$ == null
RandomDataImpl.java,nextPermutation,k,int,0,IllegalArgumentException,$ > n
RandomDataImpl.java,nextPermutation,k,int,0,IllegalArgumentException,$ == 0
RandomDataImpl.java,nextSample,k,int,0,IllegalArgumentException,$ > len
RandomDataImpl.java,nextSample,k,int,0,IllegalArgumentException,$ == 0
RandomDataImpl.java,shuffle,i,int,1,DEF,$ == 0
CorrelatedRandomVectorGenerator.java,CorrelatedRandomVectorGenerator,mean,double[],0,DimensionMismatchException,$.length != order
CorrelatedRandomVectorGenerator.java,decompose,swap,int[],0,DEF,$[rank] != rank
CorrelatedRandomVectorGenerator.java,decompose,rank,int,0,DEF,swap[$] != rank
CorrelatedRandomVectorGenerator.java,decompose,c,double[][],1,NotPositiveDefiniteMatrixException,$[ir][ir] < small
CorrelatedRandomVectorGenerator.java,decompose,ir,int,1,NotPositiveDefiniteMatrixException,c[$][$] < small
CorrelatedRandomVectorGenerator.java,decompose,rank,int,0,NotPositiveDefiniteMatrixException,$ == 0
CorrelatedRandomVectorGenerator.java,decompose,c,double[][],0,NotPositiveDefiniteMatrixException,$[index[i]][index[i]] < -small
CorrelatedRandomVectorGenerator.java,decompose,index,int[],0,NotPositiveDefiniteMatrixException,c[$[i]][$[i]] < -small
CorrelatedRandomVectorGenerator.java,decompose,i,int,0,NotPositiveDefiniteMatrixException,c[index[$]][index[$]] < -small
RandomAdaptor.java,setSeed,randomGenerator,RandomGenerator,0,DEF,$ != null
AbstractRandomGenerator.java,nextBytes,i,int,0,DEF,$ > 0
AbstractRandomGenerator.java,nextBytes,bytesOut,int,0,RET,$ == bytes.length
AbstractRandomGenerator.java,nextInt,n,int,0,IllegalArgumentException,$ <= 0
AbstractRandomGenerator.java,nextGaussian,s,double,0,DEF,$ != 0
BisectionSolver.java,solve,fm,double,1,DEF,$ * fmin > 0.0
BisectionSolver.java,solve,fmin,double,1,DEF,fm * $ > 0.0
BisectionSolver.java,solve,min,double,0,RET,Math.abs(max - $) <= absoluteAccuracy
BisectionSolver.java,solve,max,double,0,RET,Math.abs($ - min) <= absoluteAccuracy
SecantSolver.java,solve,y0,double,0,IllegalArgumentException,$ * y1 >= 0
SecantSolver.java,solve,y1,double,0,IllegalArgumentException,y0 * $ >= 0
SecantSolver.java,solve,y1,double,0,RET,Math.abs($) <= functionValueAccuracy
SecantSolver.java,solve,oldDelta,double,0,DEF,delta / $ > 1
SecantSolver.java,solve,delta,double,0,DEF,$ / oldDelta > 1
SecantSolver.java,solve,y1,double,0,DEF,$ > 0
SecantSolver.java,solve,y2,double,0,DEF,$ > 0
LaguerreSolver.java,LaguerreSolver,f,null,1,DEF,$ instanceof PolynomialFunction
LaguerreSolver.java,solve,min,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
LaguerreSolver.java,solve,max,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
LaguerreSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
LaguerreSolver.java,solve,f,null,0,DEF,$ instanceof PolynomialFunction
LaguerreSolver.java,solve,min,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
LaguerreSolver.java,solve,max,double,0,RET,f.value($) == 0.0
LaguerreSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
LaguerreSolver.java,solveAll,n,int,0,IllegalArgumentException,$ < 1
LaguerreSolver.java,solve,n,int,0,IllegalArgumentException,$ < 1
LaguerreSolver.java,solve,oldz,Complex,0,RET,(z.subtract($)).abs() <= tolerance
LaguerreSolver.java,solve,z,Complex,0,RET,($.subtract(oldz)).abs() <= tolerance
LaguerreSolver.java,solve,pv,Complex,0,RET,$.abs() <= functionValueAccuracy
NewtonSolver.java,solve,x0,double,0,RET,Math.abs(x1 - $) <= absoluteAccuracy
NewtonSolver.java,solve,x1,double,0,RET,Math.abs($ - x0) <= absoluteAccuracy
UnivariateRealSolverImpl.java,UnivariateRealSolverImpl,f,UnivariateRealFunction,0,DEF,$ == null
UnivariateRealSolverImpl.java,verifyInterval,lower,double,0,DEF,$ >= upper
UnivariateRealSolverUtils.java,bracket,function,UnivariateRealFunction,0,IllegalArgumentException,$ == null
UnivariateRealSolverUtils.java,bracket,maximumIterations,int,0,IllegalArgumentException,$ <= 0
UnivariateRealSolverUtils.java,bracket,initial,double,0,IllegalArgumentException,$ < lowerBound
UnivariateRealSolverUtils.java,bracket,initial,double,0,IllegalArgumentException,$ > upperBound
UnivariateRealSolverUtils.java,bracket,lowerBound,double,0,IllegalArgumentException,$ >= upperBound
UnivariateRealSolverUtils.java,bracket,fa,double,0,ConvergenceException,$ * fb >= 0.0
UnivariateRealSolverUtils.java,bracket,fb,double,0,ConvergenceException,fa * $ >= 0.0
UnivariateRealSolverUtils.java,setup,f,UnivariateRealFunction,0,IllegalArgumentException,$ == null
UnivariateRealSolverUtils.java,setup,factory,UnivariateRealSolverFactory,0,DEF,$ == null
MullerSolver.java,solve,min,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
MullerSolver.java,solve,max,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
MullerSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
MullerSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
MullerSolver.java,solve,y0,double,0,RET,$ == 0.0
MullerSolver.java,solve,y2,double,0,RET,$ == 0.0
MullerSolver.java,solve,oldx,double,0,RET,Math.abs(x - $) <= tolerance
MullerSolver.java,solve,x,double,0,RET,Math.abs($ - oldx) <= tolerance
MullerSolver.java,solve,y,double,0,RET,Math.abs($) <= functionValueAccuracy
MullerSolver.java,solve,ym,double,1,DEF,MathUtils.sign(y0) + MathUtils.sign($) == 0.0
MullerSolver.java,solve,y0,double,1,DEF,MathUtils.sign($) + MathUtils.sign(ym) == 0.0
MullerSolver.java,solve2,y0,double,0,RET,$ == 0.0
MullerSolver.java,solve2,y1,double,0,RET,$ == 0.0
MullerSolver.java,solve2,delta,double,1,DEF,$ >= 0.0
MullerSolver.java,solve2,denominator,double,1,DEF,$ != 0
MullerSolver.java,solve2,oldx,double,0,RET,Math.abs(x - $) <= tolerance
MullerSolver.java,solve2,x,double,0,RET,Math.abs($ - oldx) <= tolerance
MullerSolver.java,solve2,y,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yInitial,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMin,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMin,double,0,RET,yInitial * $ < 0
BrentSolver.java,solve,yInitial,double,0,RET,$ * yMin < 0
BrentSolver.java,solve,yMax,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yInitial,double,0,RET,$ * yMax < 0
BrentSolver.java,solve,yMax,double,0,RET,yInitial * $ < 0
BrentSolver.java,solve,sign,double,1,DEF,$ > 0
BrentSolver.java,solve,yMin,double,1,DEF,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,yMax,double,1,DEF,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,sign,double,1,DEF,$ < 0
BrentSolver.java,solve,yMin,double,1,DEF,$ == 0.0
BrentSolver.java,solve,y1,double,0,RET,Math.abs($) <= functionValueAccuracy
BrentSolver.java,solve,dx,double,0,RET,Math.abs($) <= tolerance
BrentSolver.java,solve,oldDelta,double,1,DEF,Math.abs($) < tolerance
BrentSolver.java,solve,x0,double,1,DEF,$ == x2
BrentSolver.java,solve,p,double,1,DEF,$ > 0.0
BrentSolver.java,solve,delta,double,1,DEF,Math.abs($) > tolerance
BrentSolver.java,solve,dx,double,1,DEF,$ > 0.0
BrentSolver.java,solve,dx,double,0,DEF,$ <= 0.0
BrentSolver.java,solve,y1,double,0,DEF,$ > 0
BrentSolver.java,solve,y2,double,0,DEF,$ > 0
RiddersSolver.java,solve,min,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(min) == 0.0
RiddersSolver.java,solve,max,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(max) == 0.0
RiddersSolver.java,solve,initial,double,0,RET,f.value($) == 0.0
RiddersSolver.java,solve,f,UnivariateRealFunction,0,RET,$.value(initial) == 0.0
RiddersSolver.java,solve,y1,double,0,RET,$ == 0.0
RiddersSolver.java,solve,y2,double,0,RET,$ == 0.0
RiddersSolver.java,solve,y3,double,0,RET,Math.abs($) <= functionValueAccuracy
RiddersSolver.java,solve,oldx,double,0,RET,Math.abs(x - $) <= tolerance
RiddersSolver.java,solve,x,double,0,RET,Math.abs($ - oldx) <= tolerance
RiddersSolver.java,solve,y,double,0,RET,Math.abs($) <= functionValueAccuracy
RiddersSolver.java,solve,correction,double,1,DEF,$ > 0.0
RiddersSolver.java,solve,y1,double,1,DEF,MathUtils.sign($) + MathUtils.sign(y) == 0.0
RiddersSolver.java,solve,y,double,1,DEF,MathUtils.sign(y1) + MathUtils.sign($) == 0.0
RiddersSolver.java,solve,y2,double,1,DEF,MathUtils.sign($) + MathUtils.sign(y) == 0.0
RiddersSolver.java,solve,y,double,1,DEF,MathUtils.sign(y2) + MathUtils.sign($) == 0.0
PolynomialFunctionLagrangeForm.java,evaluate,dist,double,0,DEF,$ < min_dist
PolynomialFunctionLagrangeForm.java,evaluate,divider,double,0,DuplicateSampleAbscissaException,$ == 0.0
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != j
PolynomialFunctionLagrangeForm.java,computeCoefficients,d,double,0,DEF,$ == 0.0
PolynomialFunctionLagrangeForm.java,computeCoefficients,i,int,0,DEF,$ != k
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,IllegalArgumentException,$.length < 2
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,y,double[],0,IllegalArgumentException,$.length < 2
PolynomialFunctionLagrangeForm.java,verifyInterpolationArray,x,double[],0,IllegalArgumentException,$.length != y.length
PolynomialFunctionNewtonForm.java,verifyInputArray,a,double[],0,IllegalArgumentException,$.length < 1
PolynomialFunctionNewtonForm.java,verifyInputArray,c,double[],0,IllegalArgumentException,$.length < 1
PolynomialsUtils.java,buildPolynomial,degree,int,0,DEF,$ > maxDegree
PolynomialFunction.java,PolynomialFunction,c,double[],0,IllegalArgumentException,$.length < 1
PolynomialFunction.java,evaluate,n,int,0,IllegalArgumentException,$ < 1
PolynomialFunction.java,subtract,coefficients,double[],1,DEF,$.length < p.coefficients.length
PolynomialFunction.java,differentiate,n,int,0,IllegalArgumentException,$ < 1
PolynomialFunction.java,differentiate,n,int,0,RET,$ == 1
PolynomialFunction.java,toString,coefficients,double[],1,RET,$[0] == 0.0
PolynomialFunction.java,toString,coefficients,double[],0,RET,$.length == 1
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] != 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] != 0
PolynomialFunction.java,toString,s,StringBuffer,1,DEF,$.length() > 0
PolynomialFunction.java,toString,coefficients,double[],1,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,1,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,coefficients,double[],0,DEF,$[i] < 0
PolynomialFunction.java,toString,i,int,0,DEF,coefficients[$] < 0
PolynomialFunction.java,toString,absAi,double,0,DEF,($ - 1) != 0
PolynomialFunction.java,toString,i,int,0,DEF,$ > 1
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,IllegalArgumentException,$.length < 2
PolynomialSplineFunction.java,PolynomialSplineFunction,knots,double[],0,IllegalArgumentException,$.length - 1 != polynomials.length
PolynomialSplineFunction.java,value,i,int,0,DEF,$ < 0
PolynomialSplineFunction.java,value,i,int,0,DEF,$ >= polynomials.length
DividedDifferenceInterpolator.java,computeDividedDifference,denominator,double,0,DuplicateSampleAbscissaException,$ == 0.0
SplineInterpolator.java,interpolate,x,double[],0,IllegalArgumentException,$.length != y.length
SplineInterpolator.java,interpolate,x,double[],0,IllegalArgumentException,$.length < 3
LegendreGaussIntegrator.java,integrate,i,int,0,RET,$ + 1 >= minimalIterationCount
LegendreGaussIntegrator.java,integrate,delta,double,0,RET,$ <= limit
TrapezoidIntegrator.java,stage,n,int,1,RET,$ == 0
TrapezoidIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
TrapezoidIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
TrapezoidIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
TrapezoidIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 64
UnivariateRealIntegratorImpl.java,UnivariateRealIntegratorImpl,f,UnivariateRealFunction,0,IllegalArgumentException,$ == null
UnivariateRealIntegratorImpl.java,verifyInterval,lower,double,0,DEF,$ >= upper
UnivariateRealIntegratorImpl.java,verifyIterationCount,minimalIterationCount,int,0,DEF,$ <= 0
UnivariateRealIntegratorImpl.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ <= minimalIterationCount
SimpsonIntegrator.java,integrate,minimalIterationCount,int,0,RET,$ == 1
SimpsonIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
SimpsonIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
SimpsonIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
SimpsonIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 64
RombergIntegrator.java,integrate,i,int,0,RET,$ >= minimalIterationCount
RombergIntegrator.java,integrate,delta,double,0,RET,$ <= rLimit
RombergIntegrator.java,integrate,delta,double,0,RET,$ <= absoluteAccuracy
RombergIntegrator.java,verifyIterationCount,maximalIterationCount,int,0,DEF,$ > 32
BrentMinimizer.java,localMin,e,double,0,DEF,Math.abs($) > tol
BrentMinimizer.java,localMin,q,double,1,DEF,$ > 0
BrentMinimizer.java,localMin,a,double,0,DEF,(u - $) < t2
BrentMinimizer.java,localMin,u,double,0,DEF,($ - a) < t2
BrentMinimizer.java,localMin,b,double,0,DEF,($ - u) < t2
BrentMinimizer.java,localMin,u,double,0,DEF,(b - $) < t2
BrentMinimizer.java,localMin,fu,double,1,DEF,$ <= fx
BrentMinimizer.java,localMin,u,double,1,DEF,$ < x
BrentMinimizer.java,localMin,u,double,1,DEF,$ < x
BrentMinimizer.java,localMin,fu,double,1,DEF,$ <= fw
BrentMinimizer.java,localMin,w,double,1,DEF,$ == x
BrentMinimizer.java,localMin,fu,double,0,DEF,$ <= fv
BrentMinimizer.java,localMin,v,double,0,DEF,$ == x
BrentMinimizer.java,localMin,v,double,0,DEF,$ == w
ComplexFormat.java,format,im,double,1,DEF,$ < 0.0
ComplexFormat.java,format,im,double,0,DEF,$ > 0.0
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Complex
ComplexFormat.java,format,obj,null,1,DEF,$ instanceof Number
ComplexFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
ComplexFormat.java,parse,re,Number,0,RET,$ == null
ComplexFormat.java,parse,im,Number,0,RET,$ == null
ComplexFormat.java,setImaginaryCharacter,imaginaryCharacter,String,0,IllegalArgumentException,$ == null
ComplexFormat.java,setImaginaryCharacter,imaginaryCharacter,String,0,IllegalArgumentException,$.length() == 0
ComplexFormat.java,setImaginaryFormat,imaginaryFormat,NumberFormat,0,IllegalArgumentException,$ == null
ComplexFormat.java,setRealFormat,realFormat,NumberFormat,0,IllegalArgumentException,$ == null
Complex.java,abs,imaginary,double,0,RET,$ == 0.0
Complex.java,abs,real,double,0,RET,$ == 0.0
Complex.java,divide,c,double,0,RET,$ == 0.0
Complex.java,divide,d,double,0,RET,$ == 0.0
Complex.java,divide,d,double,0,RET,$ == 0.0
Complex.java,divide,c,double,0,RET,$ == 0.0
Complex.java,equals,other,Object,1,DEF,$ == null
Complex.java,pow,x,Complex,0,NullPointerException,$ == null
Complex.java,sqrt,real,double,0,RET,$ == 0.0
Complex.java,sqrt,imaginary,double,0,RET,$ == 0.0
Complex.java,sqrt,real,double,1,RET,$ >= 0.0
Complex.java,nthRoot,n,int,0,DEF,$ <= 0
ComplexUtils.java,polar2Complex,r,double,0,IllegalArgumentException,$ < 0
DescriptiveStatistics.java,addValue,windowSize,int,1,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,IllegalArgumentException,$ < 1
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,IllegalArgumentException,$ != INFINITE_WINDOW
DescriptiveStatistics.java,setWindowSize,windowSize,int,0,DEF,$ != INFINITE_WINDOW
DescriptiveStatistics.java,getPercentile,percentileImpl,null,1,DEF,$ instanceof Percentile
AbstractStorelessUnivariateStatistic.java,evaluate,values,double[],0,IllegalArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,incrementAll,values,double[],0,IllegalArgumentException,$ == null
AbstractStorelessUnivariateStatistic.java,equals,object,Object,0,RET,$ instanceof AbstractStorelessUnivariateStatistic == false
AbstractStorelessUnivariateStatistic.java,equals,object,null,0,RET,$ instanceof AbstractStorelessUnivariateStatistic
StatisticalSummaryValues.java,equals,object,Object,0,RET,$ instanceof StatisticalSummaryValues == false
StatisticalSummaryValues.java,equals,object,null,0,RET,$ instanceof StatisticalSummaryValues
FirstMoment.java,increment,n,long,0,DEF,$ == 0
GeometricMean.java,getResult,sumOfLogs,StorelessUnivariateStatistic,1,RET,$.getN() > 0
ThirdMoment.java,increment,n,long,0,DEF,$ < 1
Kurtosis.java,getResult,moment,FourthMoment,0,DEF,$.getN() > 3
Kurtosis.java,getResult,moment,FirstMoment,1,DEF,$.n <= 3
Kurtosis.java,getResult,variance,double,1,DEF,$ < 10E-20
Kurtosis.java,evaluate,length,int,0,DEF,$ > 3
Skewness.java,getResult,moment,FirstMoment,0,RET,$.n < 3
Skewness.java,getResult,variance,double,1,RET,$ < 10E-20
Skewness.java,evaluate,length,int,0,DEF,$ > 2
FourthMoment.java,increment,n,long,0,DEF,$ < 1
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 0
Variance.java,getResult,moment,FirstMoment,1,RET,$.n == 1
Variance.java,evaluate,values,double[],0,IllegalArgumentException,$ == null
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
Variance.java,evaluate,length,int,1,DEF,$ == 1
Variance.java,evaluate,length,int,0,DEF,$ > 1
VectorialCovariance.java,increment,v,double[],0,DimensionMismatchException,$.length != sums.length
VectorialCovariance.java,getResult,n,long,0,DEF,$ > 1
SecondMoment.java,increment,n,long,0,DEF,$ < 1
VectorialMean.java,increment,v,double[],0,DimensionMismatchException,$.length != means.length
Percentile.java,evaluate,p,double,0,IllegalArgumentException,$ > 100
Percentile.java,evaluate,p,double,0,IllegalArgumentException,$ <= 0
Percentile.java,evaluate,length,int,0,RET,$ == 0
Percentile.java,evaluate,length,int,0,RET,$ == 1
Percentile.java,evaluate,pos,double,0,RET,$ < 1
Percentile.java,evaluate,pos,double,0,RET,$ >= n
Percentile.java,setQuantile,p,double,0,IllegalArgumentException,$ <= 0
Percentile.java,setQuantile,p,double,0,IllegalArgumentException,$ > 100
Max.java,increment,d,double,0,DEF,$ > value
Min.java,increment,d,double,0,DEF,$ < value
AbstractUnivariateStatistic.java,test,values,double[],0,IllegalArgumentException,$ == null
AbstractUnivariateStatistic.java,test,begin,int,0,IllegalArgumentException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,IllegalArgumentException,$ < 0
AbstractUnivariateStatistic.java,test,length,int,0,IllegalArgumentException,begin + $ > values.length
AbstractUnivariateStatistic.java,test,begin,int,0,IllegalArgumentException,$ + length > values.length
AbstractUnivariateStatistic.java,test,length,int,0,RET,$ == 0
MultivariateSummaryStatistics.java,append,i,int,0,DEF,$ > 0
MultivariateSummaryStatistics.java,equals,object,Object,0,RET,$ instanceof MultivariateSummaryStatistics == false
MultivariateSummaryStatistics.java,equals,object,null,0,RET,$ instanceof MultivariateSummaryStatistics
MultivariateSummaryStatistics.java,checkEmpty,n,long,0,DEF,$ > 0
MultivariateSummaryStatistics.java,checkDimension,dimension,int,0,DimensionMismatchException,$ != k
SummaryStatistics.java,addValue,meanImpl,null,0,DEF,$ instanceof Mean
SummaryStatistics.java,addValue,varianceImpl,null,0,DEF,$ instanceof Variance
SummaryStatistics.java,addValue,geoMeanImpl,null,0,DEF,$ instanceof GeometricMean
SummaryStatistics.java,getMean,mean,Mean,1,RET,$ == meanImpl
SummaryStatistics.java,getVariance,varianceImpl,StorelessUnivariateStatistic,1,RET,$ == variance
SummaryStatistics.java,clear,meanImpl,StorelessUnivariateStatistic,0,DEF,$ != mean
SummaryStatistics.java,clear,varianceImpl,StorelessUnivariateStatistic,0,DEF,$ != variance
SummaryStatistics.java,equals,object,Object,0,RET,$ instanceof SummaryStatistics == false
SummaryStatistics.java,equals,object,null,0,RET,$ instanceof SummaryStatistics
SummaryStatistics.java,checkEmpty,n,long,0,DEF,$ > 0
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.geoMean == source.geoMeanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.max == source.maxImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.mean == source.meanImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.min == source.minImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sum == source.sumImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.variance == source.varianceImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumLog == source.sumLogImpl
SummaryStatistics.java,copy,source,SummaryStatistics,1,DEF,$.sumsq == source.sumsqImpl
Product.java,increment,n,long,1,DEF,$ == 0
SumOfLogs.java,getResult,n,int,1,RET,$ > 0
SumOfSquares.java,increment,n,long,1,DEF,$ == 0
Sum.java,increment,n,long,1,DEF,$ == 0
TTestImpl.java,pairedT,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,pairedT,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,pairedT,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,pairedT,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,pairedTTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,pairedTTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,t,observed,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,t,observed,double[],0,IllegalArgumentException,$.length < 2
TTestImpl.java,t,sampleStats,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,t,sampleStats,StatisticalSummary,0,IllegalArgumentException,$.getN() < 2
TTestImpl.java,homoscedasticT,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticT,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticT,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,homoscedasticT,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,t,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,t,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,t,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,t,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,t,sampleStats1,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,t,sampleStats2,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,t,sampleStats2,StatisticalSummary,0,IllegalArgumentException,Math.min(sampleStats1.getN(), $.getN()) < 2
TTestImpl.java,t,sampleStats1,StatisticalSummary,0,IllegalArgumentException,Math.min($.getN(), sampleStats2.getN()) < 2
TTestImpl.java,homoscedasticT,sampleStats1,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticT,sampleStats2,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticT,sampleStats2,StatisticalSummary,0,IllegalArgumentException,Math.min(sampleStats1.getN(), $.getN()) < 2
TTestImpl.java,homoscedasticT,sampleStats1,StatisticalSummary,0,IllegalArgumentException,Math.min($.getN(), sampleStats2.getN()) < 2
TTestImpl.java,tTest,sample,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sample,double[],0,IllegalArgumentException,$.length < 2
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,tTest,sampleStats,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sampleStats,StatisticalSummary,0,IllegalArgumentException,$.getN() < 2
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,tTest,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,tTest,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,homoscedasticTTest,sample1,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticTTest,sample2,double[],0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticTTest,sample1,double[],0,IllegalArgumentException,Math.min($.length, sample2.length) < 2
TTestImpl.java,homoscedasticTTest,sample2,double[],0,IllegalArgumentException,Math.min(sample1.length, $.length) < 2
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,homoscedasticTTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,homoscedasticTTest,alpha,double,0,IllegalArgumentException,$ > 0.5
TTestImpl.java,tTest,sampleStats1,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sampleStats2,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,tTest,sampleStats2,StatisticalSummary,0,IllegalArgumentException,Math.min(sampleStats1.getN(), $.getN()) < 2
TTestImpl.java,tTest,sampleStats1,StatisticalSummary,0,IllegalArgumentException,Math.min($.getN(), sampleStats2.getN()) < 2
TTestImpl.java,homoscedasticTTest,sampleStats1,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticTTest,sampleStats2,StatisticalSummary,0,IllegalArgumentException,$ == null
TTestImpl.java,homoscedasticTTest,sampleStats2,StatisticalSummary,0,IllegalArgumentException,Math.min(sampleStats1.getN(), $.getN()) < 2
TTestImpl.java,homoscedasticTTest,sampleStats1,StatisticalSummary,0,IllegalArgumentException,Math.min($.getN(), sampleStats2.getN()) < 2
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ <= 0
TTestImpl.java,tTest,alpha,double,0,IllegalArgumentException,$ > 0.5
OneWayAnovaImpl.java,anovaTest,alpha,double,0,IllegalArgumentException,$ <= 0
OneWayAnovaImpl.java,anovaTest,alpha,double,0,IllegalArgumentException,$ > 0.5
OneWayAnovaImpl.java,anovaStats,categoryData,Collection<double[]>,0,IllegalArgumentException,$.size() < 2
OneWayAnovaImpl.java,anovaStats,array,double[],0,IllegalArgumentException,$.length <= 1
ChiSquareTestImpl.java,chiSquare,expected,double[],0,IllegalArgumentException,$.length < 2
ChiSquareTestImpl.java,chiSquare,expected,double[],0,IllegalArgumentException,$.length != observed.length
ChiSquareTestImpl.java,chiSquare,sumObserved,double,0,DEF,Math.abs(sumExpected - $) > 10E-6
ChiSquareTestImpl.java,chiSquare,sumExpected,double,0,DEF,Math.abs($ - sumObserved) > 10E-6
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,IllegalArgumentException,$ <= 0
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,IllegalArgumentException,$ > 0.5
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,IllegalArgumentException,$ <= 0
ChiSquareTestImpl.java,chiSquareTest,alpha,double,0,IllegalArgumentException,$ > 0.5
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],0,IllegalArgumentException,$.length < 2
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],0,IllegalArgumentException,$.length != observed2.length
ChiSquareTestImpl.java,chiSquareDataSetsComparison,countSum1,long,0,IllegalArgumentException,$ * countSum2 == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,countSum2,long,0,IllegalArgumentException,countSum1 * $ == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,i,int,1,IllegalArgumentException,observed1[$] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed1,long[],1,IllegalArgumentException,$[i] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,observed2,long[],1,IllegalArgumentException,$[i] == 0
ChiSquareTestImpl.java,chiSquareDataSetsComparison,i,int,1,IllegalArgumentException,observed2[$] == 0
ChiSquareTestImpl.java,chiSquareTestDataSetsComparison,alpha,double,0,IllegalArgumentException,$ <= 0
ChiSquareTestImpl.java,chiSquareTestDataSetsComparison,alpha,double,0,IllegalArgumentException,$ > 0.5
ChiSquareTestImpl.java,checkArray,in,long[][],0,IllegalArgumentException,$.length < 2
ChiSquareTestImpl.java,checkArray,in,long[][],0,IllegalArgumentException,$[0].length < 2
ChiSquareTestImpl.java,isPositive,in,double[],0,RET,$[i] <= 0
ChiSquareTestImpl.java,isPositive,i,int,0,RET,in[$] <= 0
ChiSquareTestImpl.java,isNonNegative,in,long[],0,RET,$[i] < 0
ChiSquareTestImpl.java,isNonNegative,i,int,0,RET,in[$] < 0
ChiSquareTestImpl.java,isNonNegative,in,long[][],0,RET,$[i][j] < 0
ChiSquareTestImpl.java,isNonNegative,i,int,0,RET,in[$][j] < 0
ChiSquareTestImpl.java,isNonNegative,j,int,0,RET,in[i][$] < 0
StatUtils.java,sumDifference,n,int,0,IllegalArgumentException,$ != sample2.length
StatUtils.java,sumDifference,n,int,0,IllegalArgumentException,$ < 1
StatUtils.java,varianceDifference,n,int,0,IllegalArgumentException,$ < 2
StatUtils.java,varianceDifference,n,int,0,IllegalArgumentException,$ != sample2.length
PearsonsCorrelation.java,PearsonsCorrelation,covarianceMatrix,RealMatrix,0,DEF,$ == null
PearsonsCorrelation.java,getCorrelationPValues,i,int,1,DEF,$ == j
PearsonsCorrelation.java,correlation,xArray,double[],1,RET,$.length == yArray.length
PearsonsCorrelation.java,correlation,xArray,double[],1,RET,$.length > 1
PearsonsCorrelation.java,checkSufficientData,nRows,int,0,DEF,$ < 2
PearsonsCorrelation.java,checkSufficientData,nCols,int,0,DEF,$ < 2
Covariance.java,covariance,length,long,1,DEF,$ == yArray.length
Covariance.java,covariance,length,long,1,DEF,$ > 1
Covariance.java,checkSufficientData,nRows,int,0,DEF,$ < 2
Covariance.java,checkSufficientData,nCols,int,0,DEF,$ < 2
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ == j
OLSMultipleLinearRegression.java,calculateHat,i,int,1,DEF,$ < p
OLSMultipleLinearRegression.java,solveUpperTriangular,constants,RealMatrix,0,IllegalArgumentException,$.getColumnDimension() != 1
OLSMultipleLinearRegression.java,isUpperTriangular,r,int,0,RET,Math.abs(m.getEntry($, c)) > epsilon
OLSMultipleLinearRegression.java,isUpperTriangular,c,int,0,RET,Math.abs(m.getEntry(r, $)) > epsilon
OLSMultipleLinearRegression.java,isUpperTriangular,m,RealMatrix,0,RET,Math.abs($.getEntry(r, c)) > epsilon
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,IllegalArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,y,double[],0,IllegalArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateSampleData,x,double[][],0,IllegalArgumentException,$.length != y.length
AbstractMultipleLinearRegression.java,validateCovarianceData,covariance,double[][],0,IllegalArgumentException,$ == null
AbstractMultipleLinearRegression.java,validateCovarianceData,x,double[][],0,IllegalArgumentException,$.length != covariance.length
AbstractMultipleLinearRegression.java,validateCovarianceData,covariance,double[][],0,IllegalArgumentException,$.length > 0
SimpleRegression.java,addData,n,long,1,DEF,$ == 0
SimpleRegression.java,addData,n,long,0,DEF,$ > 2
SimpleRegression.java,removeData,n,long,0,DEF,$ > 0
SimpleRegression.java,removeData,n,long,0,DEF,$ > 2
SimpleRegression.java,getSlope,n,long,0,RET,$ < 2
SimpleRegression.java,getTotalSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getXSumSquares,n,long,0,RET,$ < 2
SimpleRegression.java,getMeanSquareError,n,long,0,RET,$ < 3
SimpleRegression.java,getR,b1,double,0,DEF,$ < 0
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,IllegalArgumentException,$ >= 1
SimpleRegression.java,getSlopeConfidenceInterval,alpha,double,0,IllegalArgumentException,$ <= 0
SimpleRegression.java,setDistribution,n,long,0,DEF,$ > 2
GLSMultipleLinearRegression.java,getOmegaInverse,OmegaInverse,RealMatrix,0,DEF,$ == null
Frequency.java,addValue,v,null,0,DEF,$ instanceof Integer
Frequency.java,addValue,count,Long,1,DEF,$ == null
Frequency.java,getCount,v,null,0,RET,$ instanceof Integer
Frequency.java,getCount,count,Long,0,DEF,$ != null
Frequency.java,getCumFreq,v,null,0,RET,$ instanceof Integer
Frequency.java,getCumFreq,c,Comparator,0,DEF,$ == null
Frequency.java,getCumFreq,value,Long,0,DEF,$ != null
Frequency.java,getCumFreq,c,Comparator,0,RET,$.compare(v, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,v,Object,0,RET,c.compare($, freqTable.firstKey()) < 0
Frequency.java,getCumFreq,freqTable,TreeMap,0,RET,c.compare(v, $.firstKey()) < 0
Frequency.java,getCumFreq,c,Comparator,0,RET,$.compare(v, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,v,Object,0,RET,c.compare($, freqTable.lastKey()) >= 0
Frequency.java,getCumFreq,freqTable,TreeMap,0,RET,c.compare(v, $.lastKey()) >= 0
Frequency.java,getCumFreq,c,Comparator,1,DEF,$.compare(v, nextValue) > 0
Frequency.java,getCumFreq,v,Object,1,DEF,c.compare($, nextValue) > 0
Frequency.java,getCumFreq,nextValue,Object,1,DEF,c.compare(v, $) > 0
MathException.java,translate,cachedResources,ResourceBundle,0,DEF,$ == null
FDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
FDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
FDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
FDistributionImpl.java,getInitialDomain,d,double,0,DEF,$ > 2.0
FDistributionImpl.java,setNumeratorDegreesOfFreedom,degreesOfFreedom,double,0,IllegalArgumentException,$ <= 0.0
FDistributionImpl.java,setDenominatorDegreesOfFreedom,degreesOfFreedom,double,0,IllegalArgumentException,$ <= 0.0
PoissonDistributionImpl.java,setMean,p,double,0,IllegalArgumentException,$ <= 0
PoissonDistributionImpl.java,probability,x,int,0,RET,$ < 0
PoissonDistributionImpl.java,probability,x,int,0,RET,$ == Integer.MAX_VALUE
PoissonDistributionImpl.java,cumulativeProbability,x,int,0,RET,$ < 0
PoissonDistributionImpl.java,cumulativeProbability,x,int,0,RET,$ == Integer.MAX_VALUE
HypergeometricDistributionImpl.java,HypergeometricDistributionImpl,numberOfSuccesses,int,0,IllegalArgumentException,$ > populationSize
HypergeometricDistributionImpl.java,HypergeometricDistributionImpl,sampleSize,int,0,IllegalArgumentException,$ > populationSize
HypergeometricDistributionImpl.java,setNumberOfSuccesses,num,int,0,IllegalArgumentException,$ < 0
HypergeometricDistributionImpl.java,setPopulationSize,size,int,0,IllegalArgumentException,$ <= 0
HypergeometricDistributionImpl.java,setSampleSize,size,int,0,IllegalArgumentException,$ < 0
GammaDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
GammaDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
GammaDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
GammaDistributionImpl.java,setAlpha,alpha,double,0,IllegalArgumentException,$ <= 0.0
GammaDistributionImpl.java,setBeta,beta,double,0,IllegalArgumentException,$ <= 0.0
GammaDistributionImpl.java,density,x,Double,0,RET,$ < 0
GammaDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
GammaDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
TDistributionImpl.java,setDegreesOfFreedom,degreesOfFreedom,double,0,IllegalArgumentException,$ <= 0.0
TDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ == 0.0
TDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ < 0.0
TDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
TDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
BinomialDistributionImpl.java,setNumberOfTrials,trials,int,0,IllegalArgumentException,$ < 0
BinomialDistributionImpl.java,setProbabilityOfSuccess,p,double,0,IllegalArgumentException,$ < 0.0
BinomialDistributionImpl.java,setProbabilityOfSuccess,p,double,0,IllegalArgumentException,$ > 1.0
BinomialDistributionImpl.java,cumulativeProbability,x,int,1,DEF,$ < 0
BinomialDistributionImpl.java,probability,x,int,1,DEF,$ < 0
BinomialDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
BinomialDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
ExponentialDistributionImpl.java,setMean,mean,double,0,IllegalArgumentException,$ <= 0.0
ExponentialDistributionImpl.java,density,x,Double,0,RET,$ < 0
ExponentialDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ < 0.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ > 1.0
ExponentialDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1.0
ExponentialDistributionImpl.java,getDomainUpperBound,p,double,1,RET,$ < .5
ExponentialDistributionImpl.java,getInitialDomain,p,double,1,RET,$ < .5
ZipfDistributionImpl.java,setNumberOfElements,n,int,0,DEF,$ <= 0
ZipfDistributionImpl.java,setExponent,s,double,0,DEF,$ <= 0.0
ZipfDistributionImpl.java,probability,x,int,0,RET,$ <= 0
ZipfDistributionImpl.java,cumulativeProbability,x,int,1,RET,$ <= 0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ < 0.0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ > 1.0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
CauchyDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
CauchyDistributionImpl.java,setScale,s,double,0,IllegalArgumentException,$ <= 0.0
CauchyDistributionImpl.java,getDomainLowerBound,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
CauchyDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ > .5
NormalDistributionImpl.java,setStandardDeviation,sd,double,0,IllegalArgumentException,$ <= 0.0
NormalDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
NormalDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
NormalDistributionImpl.java,getDomainLowerBound,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
NormalDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ > .5
PascalDistributionImpl.java,setNumberOfSuccesses,successes,int,0,IllegalArgumentException,$ < 0
PascalDistributionImpl.java,setProbabilityOfSuccess,p,double,0,IllegalArgumentException,$ < 0.0
PascalDistributionImpl.java,setProbabilityOfSuccess,p,double,0,IllegalArgumentException,$ > 1.0
PascalDistributionImpl.java,cumulativeProbability,x,int,1,DEF,$ < 0
PascalDistributionImpl.java,probability,x,int,1,DEF,$ < 0
PascalDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
PascalDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
AbstractDistribution.java,cumulativeProbability,x0,double,0,IllegalArgumentException,$ > x1
AbstractIntegerDistribution.java,cumulativeProbability,x0,double,0,IllegalArgumentException,$ > x1
AbstractIntegerDistribution.java,cumulativeProbability,x0,double,1,RET,Math.floor($) < x0
AbstractIntegerDistribution.java,probability,fl,double,1,RET,$ == x
AbstractIntegerDistribution.java,cumulativeProbability,x0,int,0,IllegalArgumentException,$ > x1
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,IllegalArgumentException,$ < 0.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,p,double,0,IllegalArgumentException,$ > 1.0
AbstractIntegerDistribution.java,inverseCumulativeProbability,pm,double,1,DEF,$ > p
AbstractIntegerDistribution.java,inverseCumulativeProbability,xm,int,1,DEF,$ == x1
AbstractIntegerDistribution.java,inverseCumulativeProbability,xm,int,1,DEF,$ == x0
ChiSquaredDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 0
ChiSquaredDistributionImpl.java,inverseCumulativeProbability,p,double,0,RET,$ == 1
ChiSquaredDistributionImpl.java,getDomainUpperBound,p,double,1,DEF,$ < .5
ChiSquaredDistributionImpl.java,getInitialDomain,p,double,1,DEF,$ < .5
AbstractContinuousDistribution.java,inverseCumulativeProbability,p,double,0,IllegalArgumentException,$ < 0.0
AbstractContinuousDistribution.java,inverseCumulativeProbability,p,double,0,IllegalArgumentException,$ > 1.0
AbstractContinuousDistribution.java,inverseCumulativeProbability,rootFindingFunction,UnivariateRealFunction,0,RET,Math.abs($.value(lowerBound)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,lowerBound,double,0,RET,Math.abs(rootFindingFunction.value($)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,upperBound,double,0,RET,Math.abs(rootFindingFunction.value($)) < 1E-6
AbstractContinuousDistribution.java,inverseCumulativeProbability,rootFindingFunction,UnivariateRealFunction,0,RET,Math.abs($.value(upperBound)) < 1E-6
BetaDistributionImpl.java,density,x,Double,1,RET,$ < 0
BetaDistributionImpl.java,density,x,Double,1,RET,$ > 1
BetaDistributionImpl.java,density,x,Double,1,MathException:RET,$ == 0
BetaDistributionImpl.java,density,alpha,double,0,MathException,$ < 1
BetaDistributionImpl.java,density,x,Double,1,MathException:RET,$ == 1
BetaDistributionImpl.java,density,beta,double,0,MathException,$ < 1
BetaDistributionImpl.java,inverseCumulativeProbability,p,double,1,RET,$ == 0
BetaDistributionImpl.java,inverseCumulativeProbability,p,double,1,RET,$ == 1
BetaDistributionImpl.java,cumulativeProbability,x,double,1,RET,$ <= 0
BetaDistributionImpl.java,cumulativeProbability,x,double,1,RET,$ >= 1
WeibullDistributionImpl.java,cumulativeProbability,x,double,1,DEF,$ <= 0.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ < 0.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,IllegalArgumentException,$ > 1.0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 0
WeibullDistributionImpl.java,inverseCumulativeProbability,p,double,1,DEF,$ == 1
WeibullDistributionImpl.java,setShape,alpha,double,0,IllegalArgumentException,$ <= 0.0
WeibullDistributionImpl.java,setScale,beta,double,0,IllegalArgumentException,$ <= 0.0
FastFourierTransformer.java,fft,f,double[],0,RET,$.length == 1
FastFourierTransformer.java,fft,N,int,0,RET,$ == 1
FastFourierTransformer.java,fft,N,int,0,RET,$ == 2
FastFourierTransformer.java,sample,n,int,0,DEF,$ <= 0
FastFourierTransformer.java,verifyInterval,lower,double,0,DEF,$ >= upper
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == dimensionSize.length
FastFourierTransformer.java,mdfft,subVector,int[],1,DEF,$.length == d
FastFourierTransformer.java,MultiDimensionalComplexMatrix,dimensionSize,int[],0,DEF,$.length < numOfDimensions
FastFourierTransformer.java,MultiDimensionalComplexMatrix,dimensionSize,int[],0,DEF,$.length > numOfDimensions
FastFourierTransformer.java,get,vector,int[],0,DEF,$ == null
FastFourierTransformer.java,get,dimensionSize,int[],0,DEF,$.length > 1
FastFourierTransformer.java,get,vector,int[],0,DEF,$ != null
FastFourierTransformer.java,get,vector,int[],0,DEF,$.length != dimensionSize.length
FastFourierTransformer.java,set,vector,int[],0,RET,$ == null
FastFourierTransformer.java,set,dimensionSize,int[],0,DEF,$.length > 1
FastFourierTransformer.java,set,vector,int[],0,DEF,$ != null
FastFourierTransformer.java,set,vector,int[],0,DEF,$.length != dimensionSize.length
FastFourierTransformer.java,isForward,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,computeOmega,n,int,0,DEF,$ == 0
FastFourierTransformer.java,computeOmega,absN,int,0,RET,$ == omegaCount
FastFourierTransformer.java,getOmegaReal,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,getOmegaReal,k,int,0,DEF,$ < 0
FastFourierTransformer.java,getOmegaReal,k,int,0,DEF,$ >= omegaCount
FastFourierTransformer.java,getOmegaImaginary,omegaCount,int,0,DEF,$ == 0
FastFourierTransformer.java,getOmegaImaginary,k,int,0,DEF,$ < 0
FastFourierTransformer.java,getOmegaImaginary,k,int,0,DEF,$ >= omegaCount
FastCosineTransformer.java,fct,N,int,0,RET,$ == 1
FastSineTransformer.java,fst,f,double[],0,DEF,$[0] != 0.0
FastSineTransformer.java,fst,N,int,0,RET,$ == 1
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,source.substring($, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,endIndex,int,0,DEF,source.substring(startIndex, $).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,source,String,0,DEF,$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
CompositeFormat.java,parseNumber,sb,StringBuffer,0,DEF,source.substring(startIndex, endIndex).compareTo($.toString()) == 0
CompositeFormat.java,parseNumber,startIndex,int,0,DEF,$ == endIndex
CompositeFormat.java,parseNumber,number,Number,0,DEF,$ != null
CompositeFormat.java,parseFixedstring,startIndex,int,0,RET,source.substring($, endIndex).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,endIndex,int,0,RET,source.substring(startIndex, $).compareTo(expected) != 0
CompositeFormat.java,parseFixedstring,expected,String,0,RET,source.substring(startIndex, endIndex).compareTo($) != 0
CompositeFormat.java,parseFixedstring,source,String,0,RET,$.substring(startIndex, endIndex).compareTo(expected) != 0
ResizableDoubleArray.java,addElement,startIndex,int,0,DEF,($ + numElements) > internalArray.length
ResizableDoubleArray.java,addElement,numElements,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,addElementRolling,startIndex,int,0,DEF,($ + (numElements + 1)) > internalArray.length
ResizableDoubleArray.java,addElementRolling,numElements,int,0,DEF,(startIndex + ($ + 1)) > internalArray.length
ResizableDoubleArray.java,substituteMostRecentElement,numElements,int,0,DEF,$ < 1
ResizableDoubleArray.java,checkContractExpand,contractionCritera,float,0,IllegalArgumentException,$ < expansionFactor
ResizableDoubleArray.java,checkContractExpand,contractionCriteria,float,0,IllegalArgumentException,$ <= 1.0
ResizableDoubleArray.java,checkContractExpand,expansionFactor,float,0,IllegalArgumentException,$ <= 1.0
ResizableDoubleArray.java,discardExtremeElements,i,int,1,IllegalArgumentException,$ > numElements
ResizableDoubleArray.java,discardExtremeElements,i,int,1,IllegalArgumentException,$ < 0
ResizableDoubleArray.java,expand,expansionMode,int,1,DEF,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,getElement,index,int,1,DEF,$ >= numElements
ResizableDoubleArray.java,getElement,index,int,1,RET,$ >= 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ < 0
ResizableDoubleArray.java,setElement,index,int,0,DEF,$ + 1 > numElements
ResizableDoubleArray.java,setElement,startIndex,int,0,DEF,($ + index) >= internalArray.length
ResizableDoubleArray.java,setElement,index,int,0,DEF,(startIndex + $) >= internalArray.length
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,IllegalArgumentException,$ != MULTIPLICATIVE_MODE
ResizableDoubleArray.java,setExpansionMode,expansionMode,int,0,IllegalArgumentException,$ != ADDITIVE_MODE
ResizableDoubleArray.java,setInitialCapacity,initialCapacity,int,1,DEF,$ > 0
ResizableDoubleArray.java,setNumElements,i,int,0,IllegalArgumentException,$ < 0
ResizableDoubleArray.java,setNumElements,startIndex,int,0,DEF,($ + i) > internalArray.length
ResizableDoubleArray.java,setNumElements,i,int,0,DEF,(startIndex + $) > internalArray.length
ResizableDoubleArray.java,shouldContract,expansionMode,int,1,RET,$ == MULTIPLICATIVE_MODE
ResizableDoubleArray.java,equals,object,Object,0,RET,$ instanceof ResizableDoubleArray == false
ResizableDoubleArray.java,equals,object,null,0,RET,$ instanceof ResizableDoubleArray
ContinuedFraction.java,evaluate,a,double,1,DEF,$ != 0.0
ContinuedFraction.java,evaluate,b,double,1,DEF,$ != 0
ContinuedFraction.java,evaluate,n,int,0,MaxIterationsExceededException,$ >= maxIterations
MathUtils.java,addAndCheck,s,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,addAndCheck,s,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,addAndCheck,a,long,1,DEF,$ > b
MathUtils.java,addAndCheck,a,long,1,ArithmeticException,$ < 0
MathUtils.java,addAndCheck,b,long,1,ArithmeticException,$ < 0
MathUtils.java,addAndCheck,b,long,1,DEF,Long.MIN_VALUE - $ <= a
MathUtils.java,binomialCoefficient,n,int,0,IllegalArgumentException,$ < k
MathUtils.java,binomialCoefficient,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,binomialCoefficient,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficient,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficient,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 61
MathUtils.java,binomialCoefficient,n,int,1,DEF,$ <= 66
MathUtils.java,binomialCoefficientDouble,n,int,0,IllegalArgumentException,$ < k
MathUtils.java,binomialCoefficientDouble,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,binomialCoefficientDouble,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficientDouble,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficientDouble,n,int,0,RET,$ < 67
MathUtils.java,binomialCoefficientLog,n,int,0,IllegalArgumentException,$ < k
MathUtils.java,binomialCoefficientLog,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ == k
MathUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 0
MathUtils.java,binomialCoefficientLog,k,int,0,RET,$ == 1
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 67
MathUtils.java,binomialCoefficientLog,n,int,0,RET,$ < 1030
MathUtils.java,equals,x,double[],0,RET,$ == null
MathUtils.java,equals,y,double[],0,RET,$ == null
MathUtils.java,equals,x,double[],0,RET,$.length != y.length
MathUtils.java,factorial,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,factorial,n,int,0,ArithmeticException,$ > 20
MathUtils.java,factorialDouble,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,factorialDouble,n,int,0,RET,$ < 21
MathUtils.java,factorialLog,n,int,0,IllegalArgumentException,$ < 0
MathUtils.java,factorialLog,n,int,0,RET,$ < 21
MathUtils.java,gcd,u,int,0,RET,$ == 0
MathUtils.java,gcd,v,int,0,RET,$ == 0
MathUtils.java,gcd,u,int,0,DEF,$ > 0
MathUtils.java,gcd,v,int,0,DEF,$ > 0
MathUtils.java,gcd,k,int,0,DEF,$ == 31
MathUtils.java,gcd,t,int,1,DEF,$ > 0
MathUtils.java,lcm,a,int,0,RET,$==0
MathUtils.java,lcm,b,int,0,RET,$==0
MathUtils.java,mulAndCheck,m,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,mulAndCheck,m,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,mulAndCheck,a,long,1,DEF,$ > b
MathUtils.java,mulAndCheck,a,long,1,ArithmeticException,$ < 0
MathUtils.java,mulAndCheck,b,long,1,ArithmeticException,$ < 0
MathUtils.java,mulAndCheck,b,long,1,ArithmeticException,$ > 0
MathUtils.java,mulAndCheck,b,long,1,DEF,Long.MIN_VALUE / $ <= a
MathUtils.java,mulAndCheck,a,long,1,ArithmeticException,$ > 0
MathUtils.java,nextAfter,d,double,0,RET,$ == 0
MathUtils.java,nextAfter,d,double,1,RET,$ * (direction - $) >= 0
MathUtils.java,nextAfter,direction,double,1,RET,d * ($ - d) >= 0
MathUtils.java,nextAfter,mantissa,long,1,RET,$ == 0x000fffffffffffffL
MathUtils.java,nextAfter,mantissa,long,1,RET,$ == 0L
MathUtils.java,scalb,d,double,0,RET,$ == 0
MathUtils.java,roundUnscaled,sign,double,1,DEF,$ == -1
MathUtils.java,roundUnscaled,sign,double,1,DEF,$ == -1
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ > 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ < 0.5
MathUtils.java,roundUnscaled,fraction,double,1,DEF,$ >= 0.5
MathUtils.java,subAndCheck,s,long,0,ArithmeticException,$ < Integer.MIN_VALUE
MathUtils.java,subAndCheck,s,long,0,ArithmeticException,$ > Integer.MAX_VALUE
MathUtils.java,subAndCheck,b,long,1,ArithmeticException,$ == Long.MIN_VALUE
MathUtils.java,subAndCheck,a,long,1,DEF,$ < 0
DefaultTransformer.java,transform,o,Object,0,MathException,$ == null
DefaultTransformer.java,transform,o,null,0,RET,$ instanceof Number
TransformerMap.java,transform,o,null,1,DEF,$ instanceof Number
TransformerMap.java,transform,o,null,1,DEF,$ instanceof String
TransformerMap.java,transform,trans,NumberTransformer,0,DEF,$ != null
OpenIntToDoubleHashMap.java,computeCapacity,expectedSize,int,0,RET,$ == 0
OpenIntToDoubleHashMap.java,computeCapacity,powerOfTwo,int,0,RET,$ == capacity
OpenIntToDoubleHashMap.java,get,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,get,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,containsKey,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,containsKey,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,states[$] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,DEF,$[index] != FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,DEF,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,DEF,keys[$] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,1,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],1,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,states[$] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,states,byte[],0,RET,$[index] == FULL
OpenIntToDoubleHashMap.java,findInsertionIndex,keys,int[],0,RET,$[index] == key
OpenIntToDoubleHashMap.java,findInsertionIndex,index,int,0,RET,keys[$] == key
OpenIntToDoubleHashMap.java,remove,index,int,0,RET,states[$] == FREE
OpenIntToDoubleHashMap.java,remove,states,byte[],0,RET,$[index] == FREE
OpenIntToDoubleHashMap.java,put,index,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,growTable,oldStates,byte[],0,DEF,$[i] == FULL
OpenIntToDoubleHashMap.java,growTable,i,int,0,DEF,oldStates[$] == FULL
OpenIntToDoubleHashMap.java,key,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,key,current,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,value,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,value,current,int,0,DEF,$ < 0
OpenIntToDoubleHashMap.java,advance,referenceCount,int,0,DEF,$ != count
OpenIntToDoubleHashMap.java,advance,current,int,0,DEF,$ < 0
Fraction.java,Fraction,a0,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,value,double,0,RET,Math.abs(a0 - $) < epsilon
Fraction.java,Fraction,a0,long,0,RET,Math.abs($ - value) < epsilon
Fraction.java,Fraction,p2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,q2,long,0,FractionConversionException,$ > overflow
Fraction.java,Fraction,n,int,1,DEF,$ < maxIterations
Fraction.java,Fraction,convergent,double,1,DEF,Math.abs($ - value) > epsilon
Fraction.java,Fraction,value,double,1,DEF,Math.abs(convergent - $) > epsilon
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,n,int,0,FractionConversionException,$ >= maxIterations
Fraction.java,Fraction,q2,long,1,DEF,$ < maxDenominator
Fraction.java,Fraction,den,int,0,DEF,$ == 0
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,Fraction,num,int,0,DEF,$ == Integer.MIN_VALUE
Fraction.java,Fraction,den,int,0,DEF,$ == Integer.MIN_VALUE
Fraction.java,Fraction,d,int,0,DEF,$ > 1
Fraction.java,Fraction,den,int,0,DEF,$ < 0
Fraction.java,abs,numerator,int,1,DEF,$ >= 0
Fraction.java,compareTo,first,double,1,DEF,$ < second
Fraction.java,compareTo,first,double,0,DEF,$ > second
Fraction.java,equals,other,Object,1,DEF,$ == null
Fraction.java,negate,numerator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,addSub,fraction,Fraction,0,IllegalArgumentException,$ == null
Fraction.java,addSub,numerator,int,0,RET,$ == 0
Fraction.java,addSub,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,addSub,d1,int,0,RET,$==1
Fraction.java,addSub,w,BigInteger,0,DEF,$.bitLength() > 31
Fraction.java,multiply,fraction,Fraction,0,IllegalArgumentException,$ == null
Fraction.java,multiply,numerator,int,0,RET,$ == 0
Fraction.java,multiply,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,divide,fraction,Fraction,0,IllegalArgumentException,$ == null
Fraction.java,divide,fraction,Fraction,0,DEF,$.numerator == 0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$ == 0
Fraction.java,getReducedFraction,numerator,int,0,RET,$==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,numerator,int,0,DEF,($&1)==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$ < 0
Fraction.java,getReducedFraction,numerator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
FractionFormat.java,format,obj,null,1,DEF,$ instanceof Fraction
FractionFormat.java,format,obj,null,1,IllegalArgumentException,$ instanceof Number
FractionFormat.java,parse,parsePosition,ParsePosition,0,DEF,$.getIndex() == 0
FractionFormat.java,parse,num,Number,0,RET,$ == null
FractionFormat.java,parse,den,Number,0,RET,$ == null
FractionFormat.java,setDenominatorFormat,format,NumberFormat,0,IllegalArgumentException,$ == null
FractionFormat.java,setNumeratorFormat,format,NumberFormat,0,IllegalArgumentException,$ == null
FractionFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
FractionFormat.java,parseNextCharacter,index,int,0,DEF,$ < n
ProperFractionFormat.java,format,whole,int,0,DEF,$ != 0
ProperFractionFormat.java,parse,ret,Fraction,0,RET,$ != null
ProperFractionFormat.java,parse,whole,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$ == null
ProperFractionFormat.java,parse,num,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,parse,den,Number,0,RET,$ == null
ProperFractionFormat.java,parse,den,Number,0,RET,$.intValue() < 0
ProperFractionFormat.java,setWholeFormat,format,NumberFormat,0,IllegalArgumentException,$ == null
AbstractIntegrator.java,sanityChecks,equations,FirstOrderDifferentialEquations,0,IntegratorException,$.getDimension() != y0.length
AbstractIntegrator.java,sanityChecks,equations,FirstOrderDifferentialEquations,0,IntegratorException,$.getDimension() != y.length
ContinuousOutputModel.java,append,model,ContinuousOutputModel,0,RET,$.steps.size() == 0
ContinuousOutputModel.java,append,steps,List<StepInterpolator>,1,DEF,$.size() == 0
ContinuousOutputModel.java,handleStep,steps,List<StepInterpolator>,0,DEF,$.size() == 0
ContinuousOutputModel.java,setInterpolatedTime,sMin,StepInterpolator,0,RET,locatePoint(time, $) <= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMin) <= 0
ContinuousOutputModel.java,setInterpolatedTime,sMax,StepInterpolator,0,RET,locatePoint(time, $) >= 0
ContinuousOutputModel.java,setInterpolatedTime,time,double,0,RET,locatePoint($, sMax) >= 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ < 0
ContinuousOutputModel.java,setInterpolatedTime,location,int,1,DEF,$ > 0
ContinuousOutputModel.java,setInterpolatedTime,tMin,double,1,DEF,Math.abs(tMed - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,Math.abs($ - tMin) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMax,double,1,DEF,Math.abs($ - tMed) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,tMed,double,1,DEF,Math.abs(tMax - $) < 1e-6
ContinuousOutputModel.java,setInterpolatedTime,index,int,1,DEF,$ < low
ContinuousOutputModel.java,setInterpolatedTime,index,int,0,DEF,$ > high
AdamsBashforthIntegrator.java,integrate,y,double[],0,DEF,$ != y0
DormandPrince54StepInterpolator.java,DormandPrince54StepInterpolator,interpolator,DormandPrince54StepInterpolator,1,DEF,$.v1 == null
DormandPrince54StepInterpolator.java,computeInterpolatedState,v1,double[],0,DEF,$ == null
RungeKuttaIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,setStabilityCheck,stabilityReduction,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStabilityCheck,stabilityReduction,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl3,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl3,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl4,double,1,DEF,$ < 1.0001
GraggBulirschStoerIntegrator.java,setStepsizeControl,stepControl4,double,1,DEF,$ > 999.9
GraggBulirschStoerIntegrator.java,setOrderControl,maxOrder,int,0,DEF,$ <= 6
GraggBulirschStoerIntegrator.java,setOrderControl,maxOrder,int,0,DEF,$ % 2 != 0
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl1,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl1,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl2,double,1,DEF,$ < 0.0001
GraggBulirschStoerIntegrator.java,setOrderControl,orderControl2,double,1,DEF,$ > 0.9999
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$ == null
GraggBulirschStoerIntegrator.java,initializeArrays,sequence,int[],0,DEF,$.length != size
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudif,int,1,DEF,$ <= 0
GraggBulirschStoerIntegrator.java,setInterpolationControl,mudif,int,1,DEF,$ >= 7
GraggBulirschStoerIntegrator.java,rescale,vecAbsoluteTolerance,double[],1,DEF,$ == null
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,DEF,2 * $ == n
GraggBulirschStoerIntegrator.java,tryStep,j,int,0,RET,$ <= maxChecks
GraggBulirschStoerIntegrator.java,tryStep,k,int,0,RET,$ < maxIter
GraggBulirschStoerIntegrator.java,integrate,y,double[],0,DEF,$ != y0
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize > t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ > t
GraggBulirschStoerIntegrator.java,integrate,stepStart,double,0,DEF,$ + stepSize < t
GraggBulirschStoerIntegrator.java,integrate,stepSize,double,0,DEF,stepStart + $ < t
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 0
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 0
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > 1.0e15
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ > maxError
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ > 1.0
GraggBulirschStoerIntegrator.java,integrate,targetIter,int,0,DEF,$ > 1
GraggBulirschStoerIntegrator.java,integrate,error,double,0,DEF,$ <= 1.0
GraggBulirschStoerIntegrator.java,integrate,mu,int,0,DEF,$ >= 0
GraggBulirschStoerIntegrator.java,integrate,interpError,double,0,DEF,$ > 10.0
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ == 1
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ <= targetIter
GraggBulirschStoerIntegrator.java,integrate,k,int,0,DEF,$ > 2
GraggBulirschStoerIntegrator.java,integrate,optimalIter,int,1,DEF,$ <= k
GraggBulirschStoerIntegrator.java,integrate,k,int,1,DEF,$ < targetIter
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ < minStep
AdaptiveStepsizeIntegrator.java,setInitialStepSize,initialStepSize,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,IntegratorException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecAbsoluteTolerance,double[],0,IntegratorException,$.length != y0.length
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,IntegratorException,$ != null
AdaptiveStepsizeIntegrator.java,sanityChecks,vecRelativeTolerance,double[],0,IntegratorException,$.length != y0.length
AdaptiveStepsizeIntegrator.java,initializeStep,initialStep,double,0,RET,$ > 0
AdaptiveStepsizeIntegrator.java,filterStep,h,double,0,IntegratorException,Math.abs($) < minStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,1,DEF,$ > maxStep
AdaptiveStepsizeIntegrator.java,filterStep,filteredH,double,0,DEF,$ < -maxStep
EmbeddedRungeKuttaIntegrator.java,integrate,y,double[],0,DEF,$ != y0
EmbeddedRungeKuttaIntegrator.java,integrate,vecAbsoluteTolerance,double[],1,DEF,$ != null
EmbeddedRungeKuttaIntegrator.java,integrate,error,double,1,DEF,$ <= 1.0
MultistepIntegrator.java,start,store,StoringStepHandler,0,DEF,$.getFinalState() != null
MultistepIntegrator.java,eventOccurred,action,int,0,RET,$ == RESET_DERIVATIVES
MultistepIntegrator.java,eventOccurred,action,int,0,RET,$ == RESET_STATE
MultistepIntegrator.java,handleStep,count,int,0,DEF,$++ < n
MultistepIntegrator.java,handleStep,count,int,0,DEF,$ == n
AdamsMoultonIntegrator.java,integrate,y,double[],0,DEF,$ != y0
DormandPrince853StepInterpolator.java,DormandPrince853StepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState == null
DormandPrince853StepInterpolator.java,computeInterpolatedState,v,double[][],0,DEF,$ == null
DormandPrince853StepInterpolator.java,doFinalize,currentState,double[],0,RET,$ == null
MultistepStepInterpolator.java,MultistepStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
DormandPrince853Integrator.java,estimateError,den,double,0,DEF,$ <= 0.0
RungeKuttaStepInterpolator.java,RungeKuttaStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ < 0
GraggBulirschStoerStepInterpolator.java,resetTables,polynoms,double[][],1,DEF,$ != null
GraggBulirschStoerStepInterpolator.java,resetTables,maxDegree,int,1,DEF,$ <= 4
GraggBulirschStoerStepInterpolator.java,GraggBulirschStoerStepInterpolator,interpolator,GraggBulirschStoerStepInterpolator,1,DEF,$.polynoms == null
GraggBulirschStoerStepInterpolator.java,computeCoefficients,polynoms,double[][],0,DEF,$ == null
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,RET,$ < 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 0
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 1
GraggBulirschStoerStepInterpolator.java,computeCoefficients,mu,int,0,DEF,$ > 2
GraggBulirschStoerStepInterpolator.java,estimateError,currentDegree,int,0,DEF,$ >= 5
GraggBulirschStoerStepInterpolator.java,computeInterpolatedState,currentDegree,int,0,DEF,$ > 3
GraggBulirschStoerStepInterpolator.java,computeInterpolatedState,h,double,0,DEF,$ == 0
StepNormalizer.java,handleStep,lastState,double[],0,DEF,$ == null
AbstractStepInterpolator.java,AbstractStepInterpolator,interpolator,AbstractStepInterpolator,1,DEF,$.currentState != null
EventState.java,evaluateStep,gb,double,1,FunctionEvaluationException:RET,$ >= 0
EventState.java,evaluateStep,root,double,1,DEF,Math.abs($ - ta) <= convergence
EventState.java,evaluateStep,ta,double,1,DEF,Math.abs(root - $) <= convergence
EventState.java,evaluateStep,root,double,0,RET,Math.abs(previousEventTime - $) > convergence
EventState.java,evaluateStep,previousEventTime,double,0,RET,Math.abs($ - root) > convergence
EventState.java,evaluateStep,pendingEventTime,double,0,RET,Math.abs(t1 - $) <= convergence
EventState.java,evaluateStep,t1,double,0,RET,Math.abs($ - pendingEventTime) <= convergence
EventState.java,evaluateStep,cause,Throwable,1,DEF,$ != null
EventState.java,evaluateStep,cause,null,1,DEF,$ instanceof DerivativeException
EventState.java,evaluateStep,cause,Throwable,0,DEF,$ != null
EventState.java,evaluateStep,cause,null,0,DEF,$ instanceof EventException
EventState.java,reset,nextAction,int,0,DEF,$ == EventHandler.RESET_STATE
CombinedEventsManager.java,evaluateStep,first,EventState,1,DEF,$ == null
MathRuntimeException.java,translate,cachedResources,ResourceBundle,0,DEF,$ == null
TimeOfDay.java,fromCalendarFields,calendar,Calendar,0,IllegalArgumentException,$ == null
TimeOfDay.java,fromDateFields,date,Date,0,IllegalArgumentException,$ == null
TimeOfDay.java,withFieldAdded,amount,int,0,RET,$ == 0
TimeOfDay.java,withPeriodAdded,period,ReadablePeriod,0,RET,$ == null
TimeOfDay.java,withPeriodAdded,scalar,int,0,RET,$ == 0
TimeOfDay.java,withPeriodAdded,index,int,0,DEF,$ >= 0
BaseDuration.java,BaseDuration,start,ReadableInstant,1,DEF,$ == end
AbstractPartial.java,indexOf,i,int,0,RET,getFieldType($) == type
AbstractPartial.java,indexOfSupported,index,int,0,IllegalArgumentException,$ == -1
AbstractPartial.java,indexOf,i,int,0,RET,getFieldType($).getDurationType() == type
AbstractPartial.java,indexOfSupported,index,int,0,IllegalArgumentException,$ == -1
AbstractPartial.java,equals,partial,Object,0,RET,$ instanceof ReadablePartial == false
AbstractPartial.java,equals,partial,null,0,RET,$ instanceof ReadablePartial
AbstractPartial.java,isAfter,partial,ReadablePartial,0,IllegalArgumentException,$ == null
AbstractPartial.java,isBefore,partial,ReadablePartial,0,IllegalArgumentException,$ == null
AbstractPartial.java,isEqual,partial,ReadablePartial,0,IllegalArgumentException,$ == null
AbstractPartial.java,toString,formatter,DateTimeFormatter,0,RET,$ == null
AbstractDateTime.java,get,type,DateTimeFieldType,0,IllegalArgumentException,$ == null
AbstractDateTime.java,toCalendar,locale,Locale,0,DEF,$ == null
AbstractDateTime.java,toString,pattern,String,0,RET,$ == null
AbstractDateTime.java,toString,pattern,String,0,RET,$ == null
BaseSingleFieldPeriod.java,between,start,ReadableInstant,0,IllegalArgumentException,$ == null
BaseSingleFieldPeriod.java,between,end,ReadableInstant,0,IllegalArgumentException,$ == null
BaseSingleFieldPeriod.java,between,start,ReadablePartial,0,IllegalArgumentException,$ == null
BaseSingleFieldPeriod.java,between,end,ReadablePartial,0,IllegalArgumentException,$ == null
BaseSingleFieldPeriod.java,between,start,ReadablePartial,0,IllegalArgumentException,DateTimeUtils.isContiguous($) == false
BaseSingleFieldPeriod.java,standardPeriodIn,period,ReadablePeriod,0,RET,$ == null
BaseSingleFieldPeriod.java,standardPeriodIn,value,int,0,IllegalArgumentException,$ != 0
BaseSingleFieldPeriod.java,standardPeriodIn,field,DurationField,0,IllegalArgumentException,$.isPrecise() == false
BaseSingleFieldPeriod.java,getFieldType,index,int,0,IndexOutOfBoundsException,$ != 0
BaseSingleFieldPeriod.java,getValue,index,int,0,IndexOutOfBoundsException,$ != 0
BaseSingleFieldPeriod.java,equals,period,Object,0,RET,$ instanceof ReadablePeriod == false
BaseSingleFieldPeriod.java,equals,period,null,0,RET,$ instanceof ReadablePeriod
BaseSingleFieldPeriod.java,compareTo,thisValue,int,0,RET,$ > otherValue
BaseSingleFieldPeriod.java,compareTo,thisValue,int,0,RET,$ < otherValue
AbstractDuration.java,compareTo,thisMillis,long,0,RET,$ < otherMillis
AbstractDuration.java,compareTo,thisMillis,long,0,RET,$ > otherMillis
AbstractDuration.java,isEqual,duration,ReadableDuration,0,DEF,$ == null
AbstractDuration.java,isLongerThan,duration,ReadableDuration,0,DEF,$ == null
AbstractDuration.java,isShorterThan,duration,ReadableDuration,0,DEF,$ == null
AbstractDuration.java,equals,duration,Object,0,RET,$ instanceof ReadableDuration == false
AbstractDuration.java,equals,duration,null,0,RET,$ instanceof ReadableDuration
AbstractDuration.java,toString,millis,long,1,DEF,($ / 1000) * 1000 == millis
AbstractPeriod.java,get,index,int,0,RET,$ == -1
AbstractPeriod.java,equals,period,Object,0,RET,$ instanceof ReadablePeriod == false
AbstractPeriod.java,equals,period,null,0,RET,$ instanceof ReadablePeriod
AbstractPeriod.java,toString,formatter,PeriodFormatter,0,RET,$ == null
BasePartial.java,toString,pattern,String,0,RET,$ == null
BasePartial.java,toString,pattern,String,0,RET,$ == null
BasePeriod.java,BasePeriod,startInstant,ReadableInstant,1,DEF,$ == null
BasePeriod.java,BasePeriod,endInstant,ReadableInstant,1,DEF,$ == null
BasePeriod.java,BasePeriod,start,ReadablePartial,0,IllegalArgumentException,$ == null
BasePeriod.java,BasePeriod,end,ReadablePartial,0,IllegalArgumentException,$ == null
BasePeriod.java,BasePeriod,start,null,1,DEF,$ instanceof BaseLocal
BasePeriod.java,BasePeriod,end,null,1,DEF,$ instanceof BaseLocal
BasePeriod.java,BasePeriod,start,ReadablePartial,0,IllegalArgumentException,DateTimeUtils.isContiguous($) == false
BasePeriod.java,checkAndUpdate,index,int,1,IllegalArgumentException,$ == -1
BasePeriod.java,checkAndUpdate,newValue,int,0,IllegalArgumentException,$ != 0
BasePeriod.java,setPeriod,period,ReadablePeriod,1,DEF,$ == null
BasePeriod.java,setFieldInto,index,int,1,IllegalArgumentException,$ == -1
BasePeriod.java,setFieldInto,value,int,0,IllegalArgumentException,$ != 0
BasePeriod.java,setFieldInto,field,DurationFieldType,0,IllegalArgumentException,$ == null
BasePeriod.java,addFieldInto,index,int,1,IllegalArgumentException,$ == -1
BasePeriod.java,addFieldInto,value,int,0,IllegalArgumentException,$ != 0
BasePeriod.java,addFieldInto,field,DurationFieldType,0,IllegalArgumentException,$ == null
BasePeriod.java,mergePeriod,period,ReadablePeriod,0,DEF,$ != null
BasePeriod.java,addPeriod,period,ReadablePeriod,0,DEF,$ != null
BasePeriod.java,addPeriodInto,value,int,0,IllegalArgumentException,$ != 0
BasePeriod.java,addPeriodInto,index,int,1,IllegalArgumentException,$ == -1
BaseInterval.java,BaseInterval,start,ReadableInstant,1,DEF,$ == null
BaseInterval.java,BaseInterval,end,ReadableInstant,1,DEF,$ == null
BaseInterval.java,BaseInterval,period,ReadablePeriod,1,DEF,$ == null
BaseInterval.java,BaseInterval,period,ReadablePeriod,1,DEF,$ == null
AbstractInstant.java,get,type,DateTimeFieldType,0,IllegalArgumentException,$ == null
AbstractInstant.java,isSupported,type,DateTimeFieldType,0,RET,$ == null
AbstractInstant.java,get,field,DateTimeField,0,IllegalArgumentException,$ == null
AbstractInstant.java,equals,readableInstant,Object,0,RET,$ instanceof ReadableInstant == false
AbstractInstant.java,equals,readableInstant,null,0,RET,$ instanceof ReadableInstant
AbstractInstant.java,compareTo,thisMillis,long,0,RET,$ == otherMillis
AbstractInstant.java,compareTo,thisMillis,long,1,RET,$ < otherMillis
AbstractInstant.java,toString,formatter,DateTimeFormatter,0,RET,$ == null
AbstractInterval.java,checkInterval,end,long,0,IllegalArgumentException,$ < start
AbstractInterval.java,contains,instant,ReadableInstant,0,RET,$ == null
AbstractInterval.java,contains,interval,ReadableInterval,0,RET,$ == null
AbstractInterval.java,overlaps,interval,ReadableInterval,1,RET,$ == null
AbstractInterval.java,isBefore,instant,ReadableInstant,0,RET,$ == null
AbstractInterval.java,isBefore,interval,ReadableInterval,0,RET,$ == null
AbstractInterval.java,isAfter,instant,ReadableInstant,0,RET,$ == null
AbstractInterval.java,isAfter,interval,ReadableInterval,1,DEF,$ == null
AbstractInterval.java,toDuration,durMillis,long,1,RET,$ == 0
AbstractInterval.java,equals,readableInterval,Object,0,RET,$ instanceof ReadableInterval == false
AbstractInterval.java,equals,readableInterval,null,0,RET,$ instanceof ReadableInterval
DecoratedDurationField.java,DecoratedDurationField,field,DurationField,0,IllegalArgumentException,$ == null
DecoratedDateTimeField.java,DecoratedDateTimeField,field,DateTimeField,0,IllegalArgumentException,$ == null
DelegatedDurationField.java,DelegatedDurationField,field,DurationField,0,IllegalArgumentException,$ == null
DelegatedDurationField.java,equals,obj,null,0,RET,$ instanceof DelegatedDurationField
AbstractPartialFieldProperty.java,compareTo,instant,ReadableInstant,0,IllegalArgumentException,$ == null
AbstractPartialFieldProperty.java,compareTo,thisValue,int,1,RET,$ < otherValue
AbstractPartialFieldProperty.java,compareTo,thisValue,int,1,RET,$ > otherValue
AbstractPartialFieldProperty.java,compareTo,partial,ReadablePartial,0,IllegalArgumentException,$ == null
AbstractPartialFieldProperty.java,compareTo,thisValue,int,1,RET,$ < otherValue
AbstractPartialFieldProperty.java,compareTo,thisValue,int,1,RET,$ > otherValue
AbstractPartialFieldProperty.java,equals,object,Object,0,RET,$ instanceof AbstractPartialFieldProperty == false
AbstractPartialFieldProperty.java,equals,object,null,0,RET,$ instanceof AbstractPartialFieldProperty
BaseDateTimeField.java,BaseDateTimeField,type,DateTimeFieldType,0,IllegalArgumentException,$ == null
BaseDateTimeField.java,add,valueToAdd,int,0,RET,$ == 0
BaseDateTimeField.java,add,proposed,long,0,DEF,$ <= max
BaseDateTimeField.java,add,nextField,DateTimeField,0,IllegalArgumentException,$ == null
BaseDateTimeField.java,add,fieldIndex,int,0,IllegalArgumentException,$ == 0
BaseDateTimeField.java,add,proposed,long,0,DEF,$ >= min
BaseDateTimeField.java,add,nextField,DateTimeField,0,IllegalArgumentException,$ == null
BaseDateTimeField.java,add,fieldIndex,int,0,IllegalArgumentException,$ == 0
BaseDateTimeField.java,addWrapPartial,valueToAdd,int,0,RET,$ == 0
BaseDateTimeField.java,addWrapPartial,proposed,long,0,DEF,$ <= max
BaseDateTimeField.java,addWrapPartial,nextField,DateTimeField,0,IllegalArgumentException,$ == null
BaseDateTimeField.java,addWrapPartial,fieldIndex,int,0,DEF,$ == 0
BaseDateTimeField.java,addWrapPartial,proposed,long,0,DEF,$ >= min
BaseDateTimeField.java,addWrapPartial,nextField,DateTimeField,0,IllegalArgumentException,$ == null
BaseDateTimeField.java,addWrapPartial,fieldIndex,int,0,DEF,$ == 0
BaseDateTimeField.java,getMaximumTextLength,max,int,0,RET,$ >= 0
BaseDateTimeField.java,getMaximumTextLength,max,int,1,RET,$ < 10
BaseDateTimeField.java,getMaximumTextLength,max,int,1,RET,$ < 100
BaseDateTimeField.java,getMaximumTextLength,max,int,0,RET,$ < 1000
BaseDateTimeField.java,roundCeiling,newInstant,long,0,DEF,$ != instant
BaseDateTimeField.java,roundHalfFloor,diffFromFloor,long,1,RET,$ <= diffToCeiling
BaseDateTimeField.java,roundHalfCeiling,diffToCeiling,long,1,RET,$ <= diffFromFloor
BaseDateTimeField.java,roundHalfEven,diffFromFloor,long,1,RET,$ < diffToCeiling
BaseDateTimeField.java,roundHalfEven,diffToCeiling,long,1,RET,$ < diffFromFloor
BaseDateTimeField.java,roundHalfEven,ceiling,long,0,RET,(get($) & 1) == 0
PreciseDurationDateTimeField.java,PreciseDurationDateTimeField,iUnitMillis,long,0,IllegalArgumentException,$ < 1
PreciseDurationDateTimeField.java,roundFloor,instant,long,1,RET,$ >= 0
PreciseDurationDateTimeField.java,roundCeiling,instant,long,1,RET,$ > 0
PreciseDurationDateTimeField.java,remainder,instant,long,1,RET,$ >= 0
FieldUtils.java,safeNegate,value,int,0,ArithmeticException,$ == Integer.MIN_VALUE
FieldUtils.java,safeAdd,val1,int,0,ArithmeticException,($ ^ sum) < 0
FieldUtils.java,safeAdd,sum,int,0,ArithmeticException,(val1 ^ $) < 0
FieldUtils.java,safeAdd,val2,int,0,ArithmeticException,(val1 ^ $) >= 0
FieldUtils.java,safeAdd,val1,int,0,ArithmeticException,($ ^ val2) >= 0
FieldUtils.java,safeAdd,val1,long,0,ArithmeticException,($ ^ sum) < 0
FieldUtils.java,safeAdd,sum,long,0,ArithmeticException,(val1 ^ $) < 0
FieldUtils.java,safeAdd,val2,long,0,ArithmeticException,(val1 ^ $) >= 0
FieldUtils.java,safeAdd,val1,long,0,ArithmeticException,($ ^ val2) >= 0
FieldUtils.java,safeSubtract,val1,long,0,ArithmeticException,($ ^ diff) < 0
FieldUtils.java,safeSubtract,diff,long,0,ArithmeticException,(val1 ^ $) < 0
FieldUtils.java,safeSubtract,val2,long,0,ArithmeticException,(val1 ^ $) < 0
FieldUtils.java,safeSubtract,val1,long,0,ArithmeticException,($ ^ val2) < 0
FieldUtils.java,safeMultiply,total,long,0,ArithmeticException,$ < Integer.MIN_VALUE
FieldUtils.java,safeMultiply,total,long,0,ArithmeticException,$ > Integer.MAX_VALUE
FieldUtils.java,safeMultiply,total,long,0,ArithmeticException,$ / val2 != val1
FieldUtils.java,safeMultiply,val2,int,0,ArithmeticException,total / $ != val1
FieldUtils.java,safeMultiply,val2,long,0,RET,$ == 1
FieldUtils.java,safeMultiply,val1,long,0,RET,$ == 1
FieldUtils.java,safeMultiply,val1,long,0,RET,$ == 0
FieldUtils.java,safeMultiply,val2,long,0,RET,$ == 0
FieldUtils.java,safeMultiply,total,long,0,ArithmeticException,$ / val2 != val1
FieldUtils.java,safeMultiply,val2,long,0,ArithmeticException,total / $ != val1
FieldUtils.java,safeMultiply,val1,long,0,ArithmeticException,$ == Long.MIN_VALUE
FieldUtils.java,safeMultiply,val2,long,0,ArithmeticException,$ == -1
FieldUtils.java,safeMultiply,val2,long,0,ArithmeticException,$ == Long.MIN_VALUE
FieldUtils.java,safeMultiply,val1,long,0,ArithmeticException,$ == -1
FieldUtils.java,safeToInt,value,long,0,RET,$ <= Integer.MAX_VALUE
FieldUtils.java,verifyValueBounds,value,int,0,IllegalFieldValueException,$ < lowerBound
FieldUtils.java,verifyValueBounds,value,int,0,IllegalFieldValueException,$ > upperBound
FieldUtils.java,verifyValueBounds,value,int,0,IllegalFieldValueException,$ < lowerBound
FieldUtils.java,verifyValueBounds,value,int,0,IllegalFieldValueException,$ > upperBound
FieldUtils.java,verifyValueBounds,value,int,0,IllegalFieldValueException,$ < lowerBound
FieldUtils.java,verifyValueBounds,value,int,0,IllegalFieldValueException,$ > upperBound
FieldUtils.java,getWrappedValue,minValue,int,0,IllegalArgumentException,$ >= maxValue
FieldUtils.java,getWrappedValue,value,int,0,RET,$ >= 0
FieldUtils.java,getWrappedValue,remByRange,int,0,RET,$ == 0
FieldUtils.java,equals,object1,Object,0,RET,$ == object2
FieldUtils.java,equals,object1,Object,0,RET,$ == null
FieldUtils.java,equals,object2,Object,0,RET,$ == null
OffsetDateTimeField.java,OffsetDateTimeField,offset,int,0,IllegalArgumentException,$ == 0
ScaledDurationField.java,ScaledDurationField,scalar,int,0,IllegalArgumentException,$ == 0
ScaledDurationField.java,ScaledDurationField,scalar,int,0,IllegalArgumentException,$ == 1
ScaledDurationField.java,equals,obj,null,0,RET,$ instanceof ScaledDurationField
SkipUndoDateTimeField.java,SkipUndoDateTimeField,min,int,1,DEF,$ < skip
SkipUndoDateTimeField.java,get,value,int,0,DEF,$ < iSkip
SkipUndoDateTimeField.java,set,value,int,0,DEF,$ <= iSkip
LenientDateTimeField.java,getInstance,field,DateTimeField,0,RET,$ == null
LenientDateTimeField.java,getInstance,field,null,0,DEF,$ instanceof StrictDateTimeField
PreciseDateTimeField.java,PreciseDateTimeField,iRange,int,0,IllegalArgumentException,$ < 2
PreciseDateTimeField.java,get,instant,long,1,RET,$ >= 0
BaseDurationField.java,BaseDurationField,type,DurationFieldType,0,IllegalArgumentException,$ == null
BaseDurationField.java,compareTo,thisMillis,long,0,RET,$ == otherMillis
BaseDurationField.java,compareTo,thisMillis,long,1,RET,$ < otherMillis
UnsupportedDateTimeField.java,getInstance,cCache,HashMap<DateTimeFieldType,UnsupportedDateTimeField>,1,DEF,$ == null
UnsupportedDateTimeField.java,getInstance,field,UnsupportedDateTimeField,0,DEF,$ != null
UnsupportedDateTimeField.java,getInstance,field,UnsupportedDateTimeField,0,DEF,$.getDurationField() != durationField
UnsupportedDateTimeField.java,getInstance,field,UnsupportedDateTimeField,0,DEF,$ == null
UnsupportedDateTimeField.java,UnsupportedDateTimeField,type,DateTimeFieldType,0,IllegalArgumentException,$ == null
UnsupportedDateTimeField.java,UnsupportedDateTimeField,durationField,DurationField,0,IllegalArgumentException,$ == null
ImpreciseDateTimeField.java,getDifferenceAsLong,minuendInstant,long,0,RET,$ < subtrahendInstant
ImpreciseDateTimeField.java,getDifferenceAsLong,difference,long,1,DEF,add(subtrahendInstant, $) < minuendInstant
ImpreciseDateTimeField.java,getDifferenceAsLong,subtrahendInstant,long,1,DEF,add($, difference) < minuendInstant
ImpreciseDateTimeField.java,getDifferenceAsLong,difference,long,0,DEF,add(subtrahendInstant, $) > minuendInstant
ImpreciseDateTimeField.java,getDifferenceAsLong,subtrahendInstant,long,0,DEF,add($, difference) > minuendInstant
RemainderDateTimeField.java,RemainderDateTimeField,divisor,int,0,IllegalArgumentException,$ < 2
RemainderDateTimeField.java,RemainderDateTimeField,rangeField,DurationField,1,DEF,$ == null
RemainderDateTimeField.java,get,value,int,1,RET,$ >= 0
RemainderDateTimeField.java,getDivided,value,int,1,RET,$ >= 0
SkipDateTimeField.java,SkipDateTimeField,min,int,1,DEF,$ < skip
SkipDateTimeField.java,SkipDateTimeField,min,int,1,DEF,$ == skip
SkipDateTimeField.java,get,value,int,0,DEF,$ <= iSkip
SkipDateTimeField.java,set,value,int,0,IllegalFieldValueException,$ <= iSkip
SkipDateTimeField.java,set,value,int,0,IllegalFieldValueException,$ == iSkip
DividedDateTimeField.java,DividedDateTimeField,divisor,int,0,IllegalArgumentException,$ < 2
DividedDateTimeField.java,DividedDateTimeField,unitField,DurationField,1,DEF,$ == null
DividedDateTimeField.java,get,value,int,1,RET,$ >= 0
DividedDateTimeField.java,getRemainder,value,int,1,RET,$ >= 0
PreciseDurationField.java,equals,obj,null,0,RET,$ instanceof PreciseDurationField
AbstractReadableInstantFieldProperty.java,getDifference,instant,ReadableInstant,0,RET,$ == null
AbstractReadableInstantFieldProperty.java,getDifferenceAsLong,instant,ReadableInstant,0,RET,$ == null
AbstractReadableInstantFieldProperty.java,compareTo,instant,ReadableInstant,0,IllegalArgumentException,$ == null
AbstractReadableInstantFieldProperty.java,compareTo,thisValue,int,1,RET,$ < otherValue
AbstractReadableInstantFieldProperty.java,compareTo,thisValue,int,1,RET,$ > otherValue
AbstractReadableInstantFieldProperty.java,compareTo,partial,ReadablePartial,0,IllegalArgumentException,$ == null
AbstractReadableInstantFieldProperty.java,compareTo,thisValue,int,1,RET,$ < otherValue
AbstractReadableInstantFieldProperty.java,compareTo,thisValue,int,1,RET,$ > otherValue
AbstractReadableInstantFieldProperty.java,equals,object,Object,0,RET,$ instanceof AbstractReadableInstantFieldProperty == false
AbstractReadableInstantFieldProperty.java,equals,object,null,0,RET,$ instanceof AbstractReadableInstantFieldProperty
DelegatedDateTimeField.java,DelegatedDateTimeField,field,DateTimeField,0,IllegalArgumentException,$ == null
StrictDateTimeField.java,getInstance,field,DateTimeField,0,RET,$ == null
StrictDateTimeField.java,getInstance,field,null,0,DEF,$ instanceof LenientDateTimeField
ZeroIsMaxDateTimeField.java,ZeroIsMaxDateTimeField,field,DateTimeField,0,IllegalArgumentException,$.getMinimumValue() != 0
ZeroIsMaxDateTimeField.java,get,value,int,0,DEF,$ == 0
ZeroIsMaxDateTimeField.java,set,value,int,0,DEF,$ == max
UnsupportedDurationField.java,getInstance,cCache,HashMap<DurationFieldType,UnsupportedDurationField>,1,DEF,$ == null
UnsupportedDurationField.java,getInstance,field,UnsupportedDurationField,0,DEF,$ == null
UnsupportedDurationField.java,equals,obj,null,0,RET,$ instanceof UnsupportedDurationField
UnsupportedDurationField.java,equals,other,UnsupportedDurationField,0,RET,$.getName() == null
MillisDurationField.java,compareTo,thisMillis,long,0,RET,$ == otherMillis
MillisDurationField.java,compareTo,thisMillis,long,1,RET,$ < otherMillis
MillisDurationField.java,equals,obj,null,0,RET,$ instanceof MillisDurationField
Days.java,daysBetween,start,null,0,RET,$ instanceof LocalDate
Days.java,daysBetween,end,null,0,RET,$ instanceof LocalDate
Days.java,daysIn,interval,ReadableInterval,0,RET,$ == null
Days.java,parseDays,periodStr,String,0,RET,$ == null
Days.java,plus,days,int,0,RET,$ == 0
Days.java,plus,days,Days,0,RET,$ == null
Days.java,minus,days,Days,0,RET,$ == null
Days.java,dividedBy,divisor,int,0,RET,$ == 1
Days.java,isGreaterThan,other,Days,0,RET,$ == null
Days.java,isLessThan,other,Days,0,RET,$ == null
LocalDateTime.java,now,zone,DateTimeZone,0,NullPointerException,$ == null
LocalDateTime.java,now,chronology,Chronology,0,NullPointerException,$ == null
LocalDateTime.java,fromCalendarFields,calendar,Calendar,0,IllegalArgumentException,$ == null
LocalDateTime.java,fromDateFields,date,Date,0,IllegalArgumentException,$ == null
LocalDateTime.java,readResolve,iChronology,Chronology,0,RET,$ == null
LocalDateTime.java,readResolve,iChronology,Chronology,0,RET,DateTimeZone.UTC.equals($.getZone()) == false
LocalDateTime.java,get,type,DateTimeFieldType,0,IllegalArgumentException,$ == null
LocalDateTime.java,isSupported,type,DateTimeFieldType,0,RET,$ == null
LocalDateTime.java,isSupported,type,DurationFieldType,0,RET,$ == null
LocalDateTime.java,equals,partial,null,0,RET,$ instanceof LocalDateTime
LocalDateTime.java,compareTo,partial,null,0,RET,$ instanceof LocalDateTime
LocalDateTime.java,withFields,partial,ReadablePartial,0,RET,$ == null
LocalDateTime.java,withField,fieldType,DateTimeFieldType,0,IllegalArgumentException,$ == null
LocalDateTime.java,withFieldAdded,fieldType,DurationFieldType,0,IllegalArgumentException,$ == null
LocalDateTime.java,withFieldAdded,amount,int,0,RET,$ == 0
LocalDateTime.java,withDurationAdded,durationToAdd,ReadableDuration,0,RET,$ == null
LocalDateTime.java,withDurationAdded,scalar,int,0,RET,$ == 0
LocalDateTime.java,withPeriodAdded,period,ReadablePeriod,0,RET,$ == null
LocalDateTime.java,withPeriodAdded,scalar,int,0,RET,$ == 0
LocalDateTime.java,plusYears,years,int,0,RET,$ == 0
LocalDateTime.java,plusMonths,months,int,0,RET,$ == 0
LocalDateTime.java,plusWeeks,weeks,int,0,RET,$ == 0
LocalDateTime.java,plusDays,days,int,0,RET,$ == 0
LocalDateTime.java,plusHours,hours,int,0,RET,$ == 0
LocalDateTime.java,plusMinutes,minutes,int,0,RET,$ == 0
LocalDateTime.java,plusSeconds,seconds,int,0,RET,$ == 0
LocalDateTime.java,plusMillis,millis,int,0,RET,$ == 0
LocalDateTime.java,minusYears,years,int,0,RET,$ == 0
LocalDateTime.java,minusMonths,months,int,0,RET,$ == 0
LocalDateTime.java,minusWeeks,weeks,int,0,RET,$ == 0
LocalDateTime.java,minusDays,days,int,0,RET,$ == 0
LocalDateTime.java,minusHours,hours,int,0,RET,$ == 0
LocalDateTime.java,minusMinutes,minutes,int,0,RET,$ == 0
LocalDateTime.java,minusSeconds,seconds,int,0,RET,$ == 0
LocalDateTime.java,minusMillis,millis,int,0,RET,$ == 0
LocalDateTime.java,property,fieldType,DateTimeFieldType,0,IllegalArgumentException,$ == null
LocalDateTime.java,property,fieldType,DateTimeFieldType,0,IllegalArgumentException,isSupported($) == false
LocalDateTime.java,toString,pattern,String,0,RET,$ == null
LocalDateTime.java,toString,pattern,String,0,RET,$ == null
YearMonthDay.java,fromCalendarFields,calendar,Calendar,0,IllegalArgumentException,$ == null
YearMonthDay.java,fromDateFields,date,Date,0,IllegalArgumentException,$ == null
YearMonthDay.java,withFieldAdded,amount,int,0,RET,$ == 0
YearMonthDay.java,withPeriodAdded,period,ReadablePeriod,0,RET,$ == null
YearMonthDay.java,withPeriodAdded,scalar,int,0,RET,$ == 0
YearMonthDay.java,withPeriodAdded,index,int,0,DEF,$ >= 0
YearMonthDay.java,toDateTime,time,TimeOfDay,0,DEF,$ != null
MutableInterval.java,setInterval,interval,ReadableInterval,0,IllegalArgumentException,$ == null
MutableInterval.java,setInterval,start,ReadableInstant,1,DEF,$ == null
MutableInterval.java,setInterval,end,ReadableInstant,1,DEF,$ == null
MutableInterval.java,setPeriodAfterStart,period,ReadablePeriod,1,DEF,$ == null
MutableInterval.java,setPeriodBeforeEnd,period,ReadablePeriod,1,DEF,$ == null
DateTimeZone.java,getDefault,zone,DateTimeZone,0,DEF,$ == null
DateTimeZone.java,getDefault,zone,DateTimeZone,0,DEF,$ == null
DateTimeZone.java,getDefault,id,String,0,DEF,$ != null
DateTimeZone.java,getDefault,temp,DateTimeZone,0,DEF,$ == null
DateTimeZone.java,getDefault,temp,DateTimeZone,0,DEF,$ == null
DateTimeZone.java,setDefault,sm,SecurityManager,0,DEF,$ != null
DateTimeZone.java,setDefault,zone,DateTimeZone,0,IllegalArgumentException,$ == null
DateTimeZone.java,forID,id,String,0,RET,$ == null
DateTimeZone.java,forID,zone,DateTimeZone,0,RET,$ != null
DateTimeZone.java,forID,offset,int,1,RET,$ == 0L
DateTimeZone.java,forOffsetHoursMinutes,hoursOffset,int,0,RET,$ == 0
DateTimeZone.java,forOffsetHoursMinutes,minutesOffset,int,0,RET,$ == 0
DateTimeZone.java,forOffsetHoursMinutes,minutesOffset,int,0,IllegalArgumentException,$ < 0
DateTimeZone.java,forOffsetHoursMinutes,minutesOffset,int,0,IllegalArgumentException,$ > 59
DateTimeZone.java,forOffsetHoursMinutes,hoursInMinutes,int,1,DEF,$ < 0
DateTimeZone.java,forTimeZone,zone,TimeZone,0,RET,$ == null
DateTimeZone.java,forTimeZone,convId,String,0,DEF,$ != null
DateTimeZone.java,forTimeZone,dtz,DateTimeZone,0,DEF,$ == null
DateTimeZone.java,forTimeZone,dtz,DateTimeZone,0,RET,$ != null
DateTimeZone.java,forTimeZone,convId,String,0,RET,$ == null
DateTimeZone.java,forTimeZone,offset,int,1,RET,$ == 0L
DateTimeZone.java,fixedOffsetZone,offset,int,0,RET,$ == 0
DateTimeZone.java,fixedOffsetZone,iFixedOffsetCache,Map<String,SoftReference<DateTimeZone>>,0,DEF,$ == null
DateTimeZone.java,fixedOffsetZone,ref,Reference<DateTimeZone>,0,RET,$ != null
DateTimeZone.java,fixedOffsetZone,zone,DateTimeZone,0,RET,$ != null
DateTimeZone.java,setProvider,sm,SecurityManager,0,DEF,$ != null
DateTimeZone.java,setProvider0,provider,Provider,0,DEF,$ == null
DateTimeZone.java,setProvider0,ids,Set<String>,0,IllegalArgumentException,$ == null
DateTimeZone.java,setProvider0,ids,Set<String>,0,IllegalArgumentException,$.size() == 0
DateTimeZone.java,getDefaultProvider,providerClass,String,0,DEF,$ != null
DateTimeZone.java,getDefaultProvider,provider,Provider,0,DEF,$ == null
DateTimeZone.java,getDefaultProvider,provider,Provider,0,DEF,$ == null
DateTimeZone.java,setNameProvider,sm,SecurityManager,0,DEF,$ != null
DateTimeZone.java,setNameProvider0,nameProvider,NameProvider,0,DEF,$ == null
DateTimeZone.java,getDefaultNameProvider,providerClass,String,0,DEF,$ != null
DateTimeZone.java,getDefaultNameProvider,nameProvider,NameProvider,0,DEF,$ == null
DateTimeZone.java,getConvertedId,map,Map<String,String>,0,DEF,$ == null
DateTimeZone.java,printOffset,offset,int,1,DEF,$ >= 0
DateTimeZone.java,printOffset,offset,int,0,RET,$ == 0
DateTimeZone.java,printOffset,offset,int,0,RET,$ == 0
DateTimeZone.java,offsetFormatter,cOffsetFormatter,DateTimeFormatter,0,DEF,$ == null
DateTimeZone.java,DateTimeZone,id,String,0,IllegalArgumentException,$ == null
DateTimeZone.java,getShortName,locale,Locale,0,DEF,$ == null
DateTimeZone.java,getShortName,nameKey,String,0,RET,$ == null
DateTimeZone.java,getShortName,name,String,0,RET,$ != null
DateTimeZone.java,getName,locale,Locale,0,DEF,$ == null
DateTimeZone.java,getName,nameKey,String,0,RET,$ == null
DateTimeZone.java,getName,name,String,0,RET,$ != null
DateTimeZone.java,getOffset,instant,ReadableInstant,0,RET,$ == null
DateTimeZone.java,getOffsetFromLocal,offsetLocal,int,1,RET,$ != offsetAdjusted
DateTimeZone.java,getOffsetFromLocal,offsetAdjusted,int,0,RET,(offsetLocal - $) < 0
DateTimeZone.java,getOffsetFromLocal,offsetLocal,int,0,RET,($ - offsetAdjusted) < 0
DateTimeZone.java,getOffsetFromLocal,nextLocal,long,0,RET,$ != nextAdjusted
DateTimeZone.java,getOffsetFromLocal,offsetLocal,int,0,RET,$ >= 0
DateTimeZone.java,getOffsetFromLocal,prev,long,0,RET,$ < instantAdjusted
DateTimeZone.java,getOffsetFromLocal,prev,long,0,RET,instantAdjusted - $ <= diff
DateTimeZone.java,getOffsetFromLocal,instantAdjusted,long,0,RET,$ - prev <= diff
DateTimeZone.java,convertUTCToLocal,instantUTC,long,0,ArithmeticException,($ ^ instantLocal) < 0
DateTimeZone.java,convertUTCToLocal,instantLocal,long,0,ArithmeticException,(instantUTC ^ $) < 0
DateTimeZone.java,convertUTCToLocal,offset,int,0,ArithmeticException,(instantUTC ^ $) >= 0
DateTimeZone.java,convertUTCToLocal,instantUTC,long,0,ArithmeticException,($ ^ offset) >= 0
DateTimeZone.java,convertLocalToUTC,offsetLocalFromOriginal,int,0,RET,$ == offsetOriginal
DateTimeZone.java,convertLocalToUTC,offsetLocal,int,0,Instant,$ != offset
DateTimeZone.java,convertLocalToUTC,offsetLocal,int,0,Instant,$ < 0
DateTimeZone.java,convertLocalToUTC,nextLocal,long,0,Instant,$ != nextAdjusted
DateTimeZone.java,convertLocalToUTC,instantUTC,long,0,ArithmeticException,(instantLocal ^ $) < 0
DateTimeZone.java,convertLocalToUTC,instantLocal,long,0,ArithmeticException,($ ^ instantUTC) < 0
DateTimeZone.java,convertLocalToUTC,offset,int,0,ArithmeticException,(instantLocal ^ $) < 0
DateTimeZone.java,convertLocalToUTC,instantLocal,long,0,ArithmeticException,($ ^ offset) < 0
DateTimeZone.java,getMillisKeepLocal,newZone,DateTimeZone,0,DEF,$ == null
DateTimeZone.java,adjustOffset,offsetBefore,long,0,RET,$ <= offsetAfter
DateTimeZone.java,adjustOffset,instant,long,0,RET,$ < overlapStart
DateTimeZone.java,adjustOffset,instant,long,0,RET,$ >= overlapEnd
DateTimeZone.java,adjustOffset,afterStart,long,1,RET,$ >= diff
DateTimeUtils.java,setCurrentMillisOffset,offsetMillis,long,1,DEF,$ == 0
DateTimeUtils.java,setCurrentMillisProvider,millisProvider,MillisProvider,0,IllegalArgumentException,$ == null
DateTimeUtils.java,checkPermission,sm,SecurityManager,0,DEF,$ != null
DateTimeUtils.java,getInstantMillis,instant,ReadableInstant,0,RET,$ == null
DateTimeUtils.java,getInstantChronology,instant,ReadableInstant,0,RET,$ == null
DateTimeUtils.java,getInstantChronology,chrono,Chronology,0,RET,$ == null
DateTimeUtils.java,getIntervalChronology,start,ReadableInstant,1,DEF,$ != null
DateTimeUtils.java,getIntervalChronology,end,ReadableInstant,0,DEF,$ != null
DateTimeUtils.java,getIntervalChronology,chrono,Chronology,0,DEF,$ == null
DateTimeUtils.java,getIntervalChronology,interval,ReadableInterval,0,RET,$ == null
DateTimeUtils.java,getIntervalChronology,chrono,Chronology,0,RET,$ == null
DateTimeUtils.java,getReadableInterval,interval,ReadableInterval,0,DEF,$ == null
DateTimeUtils.java,getChronology,chrono,Chronology,0,RET,$ == null
DateTimeUtils.java,getZone,zone,DateTimeZone,0,RET,$ == null
DateTimeUtils.java,getPeriodType,type,PeriodType,0,RET,$ == null
DateTimeUtils.java,getDurationMillis,duration,ReadableDuration,0,RET,$ == null
DateTimeUtils.java,isContiguous,partial,ReadablePartial,0,IllegalArgumentException,$ == null
DateTimeUtils.java,isContiguous,i,int,0,RET,$ > 0
DateTimeUtils.java,isContiguous,loopField,DateTimeField,0,RET,$.getRangeDurationField().getType() != lastType
Minutes.java,minutesBetween,start,null,0,RET,$ instanceof LocalTime
Minutes.java,minutesBetween,end,null,0,RET,$ instanceof LocalTime
Minutes.java,minutesIn,interval,ReadableInterval,0,RET,$ == null
Minutes.java,parseMinutes,periodStr,String,0,RET,$ == null
Minutes.java,plus,minutes,int,0,RET,$ == 0
Minutes.java,plus,minutes,Minutes,0,RET,$ == null
Minutes.java,minus,minutes,Minutes,0,RET,$ == null
Minutes.java,dividedBy,divisor,int,0,RET,$ == 1
Minutes.java,isGreaterThan,other,Minutes,0,RET,$ == null
Minutes.java,isLessThan,other,Minutes,0,RET,$ == null
MonthDay.java,now,zone,DateTimeZone,0,NullPointerException,$ == null
MonthDay.java,now,chronology,Chronology,0,NullPointerException,$ == null
MonthDay.java,fromCalendarFields,calendar,Calendar,0,IllegalArgumentException,$ == null
MonthDay.java,fromDateFields,date,Date,0,IllegalArgumentException,$ == null
MonthDay.java,withFieldAdded,amount,int,0,RET,$ == 0
MonthDay.java,withPeriodAdded,period,ReadablePeriod,0,RET,$ == null
MonthDay.java,withPeriodAdded,scalar,int,0,RET,$ == 0
MonthDay.java,withPeriodAdded,index,int,0,DEF,$ >= 0
MonthDay.java,toString,pattern,String,0,RET,$ == null
MonthDay.java,toString,pattern,String,0,RET,$ == null
DateTimeFieldType.java,equals,obj,null,0,RET,$ instanceof StandardDateTimeFieldType
ReadableInstantConverter.java,getChronology,chrono,Chronology,0,RET,$ == null
ReadableInstantConverter.java,getChronology,chronoZone,DateTimeZone,0,RET,$ != zone
ReadableInstantConverter.java,getChronology,chrono,Chronology,0,RET,$ == null
ReadableInstantConverter.java,getChronology,chrono,Chronology,0,DEF,$ == null
ConverterSet.java,select,e,Entry,0,RET,$.iType == type
ConverterSet.java,select,index,int,0,DEF,++$ >= length
ConverterSet.java,select,entries,Entry[],0,RET,$[i] == null
ConverterSet.java,select,i,int,0,RET,entries[$] == null
ConverterSet.java,select,index,int,0,DEF,++$ >= newLength
ConverterSet.java,add,removed,Converter[],0,DEF,$ != null
ConverterSet.java,add,j,int,1,DEF,$ != i
ConverterSet.java,add,removed,Converter[],0,DEF,$ != null
ConverterSet.java,add,removed,Converter[],0,DEF,$ != null
ConverterSet.java,remove,removed,Converter[],0,DEF,$ != null
ConverterSet.java,remove,index,int,0,IndexOutOfBoundsException,$ >= length
ConverterSet.java,remove,removed,Converter[],0,DEF,$ != null
ConverterSet.java,remove,i,int,0,DEF,$ != index
ConverterSet.java,selectSlow,supportedType,Class<>,0,RET,$ == type
ConverterSet.java,selectSlow,supportedType,Class<>,0,DEF,$ == null
ConverterSet.java,selectSlow,type,Class<>,0,DEF,$ != null
ConverterSet.java,selectSlow,type,Class<>,0,RET,$ == null
ConverterSet.java,selectSlow,length,int,0,RET,$ == 0
ConverterSet.java,selectSlow,length,int,0,RET,$ == 1
ConverterSet.java,selectSlow,j,int,0,DEF,$ != i
ConverterSet.java,selectSlow,length,int,0,RET,$ == 1
CalendarConverter.java,getChronology,chrono,Chronology,0,RET,$ != null
CalendarConverter.java,getChronology,object,null,1,RET,$ instanceof GregorianCalendar
CalendarConverter.java,getChronology,cutover,long,1,RET,$ == Long.MIN_VALUE
CalendarConverter.java,getChronology,cutover,long,1,RET,$ == Long.MAX_VALUE
ReadableIntervalConverter.java,setInto,chrono,Chronology,1,DEF,$ != null
ConverterManager.java,getInstance,INSTANCE,ConverterManager,0,DEF,$ == null
ConverterManager.java,getInstantConverter,converter,InstantConverter,0,RET,$ != null
ConverterManager.java,addInstantConverter,converter,InstantConverter,0,RET,$ == null
ConverterManager.java,removeInstantConverter,converter,InstantConverter,0,RET,$ == null
ConverterManager.java,checkAlterInstantConverters,sm,SecurityManager,0,DEF,$ != null
ConverterManager.java,getPartialConverter,converter,PartialConverter,0,RET,$ != null
ConverterManager.java,addPartialConverter,converter,PartialConverter,0,RET,$ == null
ConverterManager.java,removePartialConverter,converter,PartialConverter,0,RET,$ == null
ConverterManager.java,checkAlterPartialConverters,sm,SecurityManager,0,DEF,$ != null
ConverterManager.java,getDurationConverter,converter,DurationConverter,0,RET,$ != null
ConverterManager.java,addDurationConverter,converter,DurationConverter,0,RET,$ == null
ConverterManager.java,removeDurationConverter,converter,DurationConverter,0,RET,$ == null
ConverterManager.java,checkAlterDurationConverters,sm,SecurityManager,0,DEF,$ != null
ConverterManager.java,getPeriodConverter,converter,PeriodConverter,0,RET,$ != null
ConverterManager.java,addPeriodConverter,converter,PeriodConverter,0,RET,$ == null
ConverterManager.java,removePeriodConverter,converter,PeriodConverter,0,RET,$ == null
ConverterManager.java,checkAlterPeriodConverters,sm,SecurityManager,0,DEF,$ != null
ConverterManager.java,getIntervalConverter,converter,IntervalConverter,0,RET,$ != null
ConverterManager.java,addIntervalConverter,converter,IntervalConverter,0,RET,$ == null
ConverterManager.java,removeIntervalConverter,converter,IntervalConverter,0,RET,$ == null
ConverterManager.java,checkAlterIntervalConverters,sm,SecurityManager,0,DEF,$ != null
StringConverter.java,getPartialValues,parser,DateTimeFormatter,0,DEF,$.getZone() != null
StringConverter.java,getDurationMillis,len,int,1,DEF,$ >= 4
StringConverter.java,getDurationMillis,str,String,1,DEF,$.charAt(0) == 'P'
StringConverter.java,getDurationMillis,str,String,1,DEF,$.charAt(0) == 'p'
StringConverter.java,getDurationMillis,str,String,1,DEF,$.charAt(1) == 'T'
StringConverter.java,getDurationMillis,str,String,1,DEF,$.charAt(1) == 't'
StringConverter.java,getDurationMillis,str,String,1,DEF,$.charAt(len - 1) == 'S'
StringConverter.java,getDurationMillis,len,int,1,DEF,str.charAt($ - 1) == 'S'
StringConverter.java,getDurationMillis,str,String,1,DEF,$.charAt(len - 1) == 's'
StringConverter.java,getDurationMillis,len,int,1,DEF,str.charAt($ - 1) == 's'
StringConverter.java,getDurationMillis,str,String,1,DEF,$.charAt(i) >= '0'
StringConverter.java,getDurationMillis,i,int,1,DEF,str.charAt($) >= '0'
StringConverter.java,getDurationMillis,str,String,1,DEF,$.charAt(i) <= '9'
StringConverter.java,getDurationMillis,i,int,1,DEF,str.charAt($) <= '9'
StringConverter.java,getDurationMillis,i,int,1,DEF,$ == 0
StringConverter.java,getDurationMillis,str,String,1,DEF,$.charAt(0) == '-'
StringConverter.java,getDurationMillis,i,int,1,DEF,$ > 0
StringConverter.java,getDurationMillis,str,String,1,DEF,$.charAt(i) == '.'
StringConverter.java,getDurationMillis,i,int,1,DEF,str.charAt($) == '.'
StringConverter.java,getDurationMillis,dot,int,1,DEF,$ == -1
StringConverter.java,getDurationMillis,dot,int,1,DEF,$ > 0
StringConverter.java,getDurationMillis,str,String,0,DEF,$.length() != 3
StringConverter.java,getDurationMillis,seconds,long,1,RET,$ < 0
StringConverter.java,setInto,pos,int,0,DEF,$ < 0
StringConverter.java,setInto,separator,int,0,IllegalArgumentException,$ < 0
StringConverter.java,setInto,leftStr,String,0,IllegalArgumentException,$.length() <= 0
StringConverter.java,setInto,rightStr,String,0,IllegalArgumentException,$.length() <= 0
StringConverter.java,setInto,c,char,1,DEF,$ == 'P'
StringConverter.java,setInto,c,char,1,DEF,$ == 'p'
StringConverter.java,setInto,c,char,1,IllegalArgumentException,$ == 'P'
StringConverter.java,setInto,c,char,1,IllegalArgumentException,$ == 'p'
StringConverter.java,setInto,period,Period,0,IllegalArgumentException,$ != null
StringConverter.java,setInto,period,Period,0,DEF,$ != null
ReadablePartialConverter.java,getChronology,chrono,Chronology,0,DEF,$ == null
DurationFieldType.java,equals,obj,null,0,RET,$ instanceof StandardDurationFieldType
Weeks.java,weeksBetween,start,null,0,RET,$ instanceof LocalDate
Weeks.java,weeksBetween,end,null,0,RET,$ instanceof LocalDate
Weeks.java,weeksIn,interval,ReadableInterval,0,RET,$ == null
Weeks.java,parseWeeks,periodStr,String,0,RET,$ == null
Weeks.java,plus,weeks,int,0,RET,$ == 0
Weeks.java,plus,weeks,Weeks,0,RET,$ == null
Weeks.java,minus,weeks,Weeks,0,RET,$ == null
Weeks.java,dividedBy,divisor,int,0,RET,$ == 1
Weeks.java,isGreaterThan,other,Weeks,0,RET,$ == null
Weeks.java,isLessThan,other,Weeks,0,RET,$ == null
MutablePeriod.java,setPeriod,interval,ReadableInterval,1,DEF,$ == null
MutablePeriod.java,setPeriod,start,ReadableInstant,1,DEF,$ == end
MutablePeriod.java,add,interval,ReadableInterval,0,DEF,$ != null
MutablePeriod.java,add,duration,ReadableDuration,0,DEF,$ != null
Seconds.java,secondsBetween,start,null,0,RET,$ instanceof LocalTime
Seconds.java,secondsBetween,end,null,0,RET,$ instanceof LocalTime
Seconds.java,secondsIn,interval,ReadableInterval,0,RET,$ == null
Seconds.java,parseSeconds,periodStr,String,0,RET,$ == null
Seconds.java,plus,seconds,int,0,RET,$ == 0
Seconds.java,plus,seconds,Seconds,0,RET,$ == null
Seconds.java,minus,seconds,Seconds,0,RET,$ == null
Seconds.java,dividedBy,divisor,int,0,RET,$ == 1
Seconds.java,isGreaterThan,other,Seconds,0,RET,$ == null
Seconds.java,isLessThan,other,Seconds,0,RET,$ == null
LocalTime.java,now,zone,DateTimeZone,0,NullPointerException,$ == null
LocalTime.java,now,chronology,Chronology,0,NullPointerException,$ == null
LocalTime.java,fromCalendarFields,calendar,Calendar,0,IllegalArgumentException,$ == null
LocalTime.java,fromDateFields,date,Date,0,IllegalArgumentException,$ == null
LocalTime.java,readResolve,iChronology,Chronology,0,RET,$ == null
LocalTime.java,readResolve,iChronology,Chronology,0,RET,DateTimeZone.UTC.equals($.getZone()) == false
LocalTime.java,get,fieldType,DateTimeFieldType,0,IllegalArgumentException,$ == null
LocalTime.java,get,fieldType,DateTimeFieldType,0,IllegalArgumentException,isSupported($) == false
LocalTime.java,isSupported,type,DateTimeFieldType,0,RET,$ == null
LocalTime.java,isSupported,type,DateTimeFieldType,0,RET,isSupported($.getDurationType()) == false
LocalTime.java,isSupported,type,DurationFieldType,0,RET,$ == null
LocalTime.java,equals,partial,null,0,RET,$ instanceof LocalTime
LocalTime.java,compareTo,partial,null,0,RET,$ instanceof LocalTime
LocalTime.java,withFields,partial,ReadablePartial,0,RET,$ == null
LocalTime.java,withField,fieldType,DateTimeFieldType,0,IllegalArgumentException,$ == null
LocalTime.java,withField,fieldType,DateTimeFieldType,0,IllegalArgumentException,isSupported($) == false
LocalTime.java,withFieldAdded,fieldType,DurationFieldType,0,IllegalArgumentException,$ == null
LocalTime.java,withFieldAdded,fieldType,DurationFieldType,0,IllegalArgumentException,isSupported($) == false
LocalTime.java,withFieldAdded,amount,int,0,RET,$ == 0
LocalTime.java,withPeriodAdded,period,ReadablePeriod,0,RET,$ == null
LocalTime.java,withPeriodAdded,scalar,int,0,RET,$ == 0
LocalTime.java,plusHours,hours,int,0,RET,$ == 0
LocalTime.java,plusMinutes,minutes,int,0,RET,$ == 0
LocalTime.java,plusSeconds,seconds,int,0,RET,$ == 0
LocalTime.java,plusMillis,millis,int,0,RET,$ == 0
LocalTime.java,minusHours,hours,int,0,RET,$ == 0
LocalTime.java,minusMinutes,minutes,int,0,RET,$ == 0
LocalTime.java,minusSeconds,seconds,int,0,RET,$ == 0
LocalTime.java,minusMillis,millis,int,0,RET,$ == 0
LocalTime.java,property,fieldType,DateTimeFieldType,0,IllegalArgumentException,$ == null
LocalTime.java,property,fieldType,DateTimeFieldType,0,IllegalArgumentException,isSupported($) == false
LocalTime.java,toString,pattern,String,0,RET,$ == null
LocalTime.java,toString,pattern,String,0,RET,$ == null
LocalTime.java,addNoWrapToCopy,rounded,long,0,IllegalArgumentException,$ != millis
Hours.java,hoursBetween,start,null,0,RET,$ instanceof LocalTime
Hours.java,hoursBetween,end,null,0,RET,$ instanceof LocalTime
Hours.java,hoursIn,interval,ReadableInterval,0,RET,$ == null
Hours.java,parseHours,periodStr,String,0,RET,$ == null
Hours.java,plus,hours,int,0,RET,$ == 0
Hours.java,plus,hours,Hours,0,RET,$ == null
Hours.java,minus,hours,Hours,0,RET,$ == null
Hours.java,dividedBy,divisor,int,0,RET,$ == 1
Hours.java,isGreaterThan,other,Hours,0,RET,$ == null
Hours.java,isLessThan,other,Hours,0,RET,$ == null
ZoneInfoProvider.java,ZoneInfoProvider,fileDir,File,0,IllegalArgumentException,$ == null
ZoneInfoProvider.java,ZoneInfoProvider,resourcePath,String,0,IllegalArgumentException,$ == null
ZoneInfoProvider.java,ZoneInfoProvider,loader,ClassLoader,0,DEF,$ == null
ZoneInfoProvider.java,getZone,id,String,0,RET,$ == null
ZoneInfoProvider.java,getZone,obj,Object,0,RET,$ == null
ZoneInfoProvider.java,getZone,obj,null,0,RET,$ instanceof SoftReference<?>
ZoneInfoProvider.java,getZone,tz,DateTimeZone,0,RET,$ != null
ZoneInfoProvider.java,openResource,iFileDir,File,1,DEF,$ != null
ZoneInfoProvider.java,openResource,iLoader,ClassLoader,1,DEF,$ != null
ZoneInfoProvider.java,openResource,in,InputStream,0,IOException,$ == null
ZoneInfoProvider.java,loadZoneData,in,InputStream,0,DEF,$ != null
DateTimeZoneBuilder.java,readFrom,in,null,1,RET,$ instanceof DataInput
DateTimeZoneBuilder.java,writeMillis,millis,long,0,RET,$ % (30 * 60000L) == 0
DateTimeZoneBuilder.java,writeMillis,units,long,0,RET,(($ << (64 - 6)) >> (64 - 6)) == units
DateTimeZoneBuilder.java,writeMillis,millis,long,0,RET,$ % 60000L == 0
DateTimeZoneBuilder.java,writeMillis,minutes,long,0,RET,(($ << (64 - 30)) >> (64 - 30)) == minutes
DateTimeZoneBuilder.java,writeMillis,millis,long,0,RET,$ % 1000L == 0
DateTimeZoneBuilder.java,writeMillis,seconds,long,0,RET,(($ << (64 - 38)) >> (64 - 38)) == seconds
DateTimeZoneBuilder.java,buildFixedZone,wallOffset,int,0,RET,$ == 0
DateTimeZoneBuilder.java,buildFixedZone,standardOffset,int,0,RET,$ == 0
DateTimeZoneBuilder.java,addCutover,iRuleSets,ArrayList<RuleSet>,0,DEF,$.size() > 0
DateTimeZoneBuilder.java,addRecurringSavings,fromYear,int,0,DEF,$ <= toYear
DateTimeZoneBuilder.java,getLastRuleSet,iRuleSets,ArrayList<RuleSet>,0,DEF,$.size() == 0
DateTimeZoneBuilder.java,toDateTimeZone,id,String,0,IllegalArgumentException,$ == null
DateTimeZoneBuilder.java,toDateTimeZone,next,Transition,0,DEF,$ == null
DateTimeZoneBuilder.java,toDateTimeZone,tailZone,DSTZone,0,DEF,$ != null
DateTimeZoneBuilder.java,toDateTimeZone,tailZone,DSTZone,0,DEF,$ == null
DateTimeZoneBuilder.java,toDateTimeZone,transitions,ArrayList<Transition>,0,RET,$.size() == 0
DateTimeZoneBuilder.java,toDateTimeZone,tailZone,DSTZone,0,RET,$ != null
DateTimeZoneBuilder.java,toDateTimeZone,transitions,ArrayList<Transition>,0,RET,$.size() == 1
DateTimeZoneBuilder.java,toDateTimeZone,tailZone,DSTZone,0,RET,$ == null
DateTimeZoneBuilder.java,addTransition,size,int,0,RET,$ == 0
DateTimeZoneBuilder.java,addTransition,size,int,0,DEF,$ >= 2
DateTimeZoneBuilder.java,addTransition,newLocal,long,0,RET,$ != lastLocal
DateTimeZoneBuilder.java,writeTo,out,null,1,DEF,$ instanceof DataOutput
DateTimeZoneBuilder.java,writeTo,zone,null,1,DEF,$ instanceof FixedDateTimeZone
DateTimeZoneBuilder.java,writeTo,zone,null,1,DEF,$ instanceof CachedDateTimeZone
DateTimeZoneBuilder.java,OfYear,mode,char,0,IllegalArgumentException,$ != 'u'
DateTimeZoneBuilder.java,OfYear,mode,char,0,IllegalArgumentException,$ != 'w'
DateTimeZoneBuilder.java,OfYear,mode,char,0,IllegalArgumentException,$ != 's'
DateTimeZoneBuilder.java,setInstant,iMode,char,1,DEF,$ == 'w'
DateTimeZoneBuilder.java,setInstant,iMode,char,1,DEF,$ == 's'
DateTimeZoneBuilder.java,setInstant,iDayOfWeek,int,0,DEF,$ != 0
DateTimeZoneBuilder.java,next,iMode,char,1,DEF,$ == 'w'
DateTimeZoneBuilder.java,next,iMode,char,1,DEF,$ == 's'
DateTimeZoneBuilder.java,next,iDayOfWeek,int,1,DEF,$ == 0
DateTimeZoneBuilder.java,next,next,long,0,DEF,$ <= instant
DateTimeZoneBuilder.java,next,next,long,0,DEF,$ <= instant
DateTimeZoneBuilder.java,previous,iMode,char,1,DEF,$ == 'w'
DateTimeZoneBuilder.java,previous,iMode,char,1,DEF,$ == 's'
DateTimeZoneBuilder.java,previous,iDayOfWeek,int,1,DEF,$ == 0
DateTimeZoneBuilder.java,previous,prev,long,0,DEF,$ >= instant
DateTimeZoneBuilder.java,previous,prev,long,0,DEF,$ >= instant
DateTimeZoneBuilder.java,equals,obj,null,0,RET,$ instanceof OfYear
DateTimeZoneBuilder.java,setDayOfMonthNext,iMonthOfYear,int,1,DEF,$ == 2
DateTimeZoneBuilder.java,setDayOfMonthNext,iDayOfMonth,int,1,DEF,$ == 29
DateTimeZoneBuilder.java,setDayOfMonthPrevious,iMonthOfYear,int,1,DEF,$ == 2
DateTimeZoneBuilder.java,setDayOfMonthPrevious,iDayOfMonth,int,1,DEF,$ == 29
DateTimeZoneBuilder.java,setDayOfMonth,iDayOfMonth,int,1,DEF,$ >= 0
DateTimeZoneBuilder.java,setDayOfWeek,daysToAdd,int,0,DEF,$ != 0
DateTimeZoneBuilder.java,setDayOfWeek,daysToAdd,int,0,DEF,$ < 0
DateTimeZoneBuilder.java,setDayOfWeek,daysToAdd,int,0,DEF,$ > 0
DateTimeZoneBuilder.java,equals,obj,null,0,RET,$ instanceof Recurrence
DateTimeZoneBuilder.java,next,instant,long,1,DEF,$ == Long.MIN_VALUE
DateTimeZoneBuilder.java,next,year,int,0,DEF,$ < iFromYear
DateTimeZoneBuilder.java,next,next,long,0,DEF,$ > instant
DateTimeZoneBuilder.java,next,year,int,0,DEF,$ > iToYear
DateTimeZoneBuilder.java,isTransitionFrom,other,Transition,0,RET,$ == null
DateTimeZoneBuilder.java,firstTransition,iInitialNameKey,String,0,RET,$ != null
DateTimeZoneBuilder.java,firstTransition,millis,long,0,DEF,$ == firstMillis
DateTimeZoneBuilder.java,firstTransition,millis,long,0,DEF,$ > firstMillis
DateTimeZoneBuilder.java,firstTransition,first,Transition,0,DEF,$ == null
DateTimeZoneBuilder.java,firstTransition,rule,Rule,0,DEF,$.getSaveMillis() == 0
DateTimeZoneBuilder.java,firstTransition,first,Transition,0,DEF,$ == null
DateTimeZoneBuilder.java,nextTransition,next,long,0,DEF,$ <= instant
DateTimeZoneBuilder.java,nextTransition,next,long,0,DEF,$ <= nextMillis
DateTimeZoneBuilder.java,nextTransition,nextRule,Rule,0,RET,$ == null
DateTimeZoneBuilder.java,nextTransition,nextMillis,long,0,RET,chrono.year().get($) >= YEAR_LIMIT
DateTimeZoneBuilder.java,nextTransition,chrono,Chronology,0,RET,$.year().get(nextMillis) >= YEAR_LIMIT
DateTimeZoneBuilder.java,nextTransition,iUpperYear,int,0,RET,$ < Integer.MAX_VALUE
DateTimeZoneBuilder.java,nextTransition,nextMillis,long,0,RET,$ >= upperMillis
DateTimeZoneBuilder.java,getUpperLimit,iUpperYear,int,0,RET,$ == Integer.MAX_VALUE
DateTimeZoneBuilder.java,buildTailZone,iRules,ArrayList<Rule>,0,RET,$.size() == 2
DateTimeZoneBuilder.java,buildTailZone,startRule,Rule,0,RET,$.getToYear() == Integer.MAX_VALUE
DateTimeZoneBuilder.java,buildTailZone,endRule,Rule,0,RET,$.getToYear() == Integer.MAX_VALUE
DateTimeZoneBuilder.java,nextTransition,instant,long,0,DEF,$ > 0
DateTimeZoneBuilder.java,nextTransition,start,long,0,DEF,$ < 0
DateTimeZoneBuilder.java,nextTransition,instant,long,0,DEF,$ > 0
DateTimeZoneBuilder.java,nextTransition,end,long,0,DEF,$ < 0
DateTimeZoneBuilder.java,previousTransition,instant,long,0,DEF,$ < 0
DateTimeZoneBuilder.java,previousTransition,start,long,0,DEF,$ > 0
DateTimeZoneBuilder.java,previousTransition,instant,long,0,DEF,$ < 0
DateTimeZoneBuilder.java,previousTransition,end,long,0,DEF,$ > 0
DateTimeZoneBuilder.java,equals,obj,null,0,RET,$ instanceof DSTZone
DateTimeZoneBuilder.java,readFrom,poolSize,int,1,DEF,$ < 256
DateTimeZoneBuilder.java,create,size,int,0,IllegalArgumentException,$ == 0
DateTimeZoneBuilder.java,create,set,String[],0,DEF,$ != null
DateTimeZoneBuilder.java,create,set,String[],0,DEF,$.length == 5
DateTimeZoneBuilder.java,create,curOffset,long,0,DEF,$ != nextOffset
DateTimeZoneBuilder.java,create,curStdOffset,long,0,DEF,$ == nextStdOffset
DateTimeZoneBuilder.java,create,p,Period,0,DEF,$.getYears() == 0
DateTimeZoneBuilder.java,create,p,Period,0,DEF,$.getMonths() > 4
DateTimeZoneBuilder.java,create,p,Period,0,DEF,$.getMonths() < 8
DateTimeZoneBuilder.java,create,curOffset,long,1,DEF,$ > nextOffset
DateTimeZoneBuilder.java,create,curOffset,long,0,DEF,$ < nextOffset
DateTimeZoneBuilder.java,create,tailZone,DSTZone,0,DEF,$ != null
DateTimeZoneBuilder.java,create,tailZone,DSTZone,1,DEF,$.iStartRecurrence.getSaveMillis() > 0
DateTimeZoneBuilder.java,getNameKey,i,int,0,RET,$ >= 0
DateTimeZoneBuilder.java,getNameKey,i,int,0,RET,$ < transitions.length
DateTimeZoneBuilder.java,getNameKey,i,int,0,RET,$ > 0
DateTimeZoneBuilder.java,getNameKey,iTailZone,DSTZone,0,RET,$ == null
DateTimeZoneBuilder.java,getOffset,i,int,0,RET,$ >= 0
DateTimeZoneBuilder.java,getOffset,i,int,0,RET,$ < transitions.length
DateTimeZoneBuilder.java,getOffset,i,int,0,RET,$ > 0
DateTimeZoneBuilder.java,getOffset,iTailZone,DSTZone,0,RET,$ == null
DateTimeZoneBuilder.java,getStandardOffset,i,int,0,RET,$ >= 0
DateTimeZoneBuilder.java,getStandardOffset,i,int,0,RET,$ < transitions.length
DateTimeZoneBuilder.java,getStandardOffset,i,int,0,RET,$ > 0
DateTimeZoneBuilder.java,getStandardOffset,iTailZone,DSTZone,0,RET,$ == null
DateTimeZoneBuilder.java,nextTransition,i,int,0,RET,$ < transitions.length
DateTimeZoneBuilder.java,nextTransition,iTailZone,DSTZone,0,RET,$ == null
DateTimeZoneBuilder.java,nextTransition,instant,long,0,DEF,$ < end
DateTimeZoneBuilder.java,previousTransition,i,int,0,RET,$ >= 0
DateTimeZoneBuilder.java,previousTransition,instant,long,0,RET,$ > Long.MIN_VALUE
DateTimeZoneBuilder.java,previousTransition,i,int,0,RET,$ < transitions.length
DateTimeZoneBuilder.java,previousTransition,i,int,0,RET,$ > 0
DateTimeZoneBuilder.java,previousTransition,prev,long,0,RET,$ > Long.MIN_VALUE
DateTimeZoneBuilder.java,previousTransition,iTailZone,DSTZone,0,RET,$ != null
DateTimeZoneBuilder.java,previousTransition,prev,long,0,RET,$ < instant
DateTimeZoneBuilder.java,previousTransition,prev,long,0,RET,$ > Long.MIN_VALUE
DateTimeZoneBuilder.java,equals,obj,null,0,RET,$ instanceof PrecalculatedZone
DateTimeZoneBuilder.java,writeTo,poolSize,int,0,UnsupportedOperationException,$ > 65535
DateTimeZoneBuilder.java,writeTo,poolSize,int,1,DEF,$ < 256
DateTimeZoneBuilder.java,writeTo,iTailZone,DSTZone,0,DEF,$ != null
DateTimeZoneBuilder.java,isCachable,iTailZone,DSTZone,0,RET,$ != null
DateTimeZoneBuilder.java,isCachable,transitions,long[],0,RET,$.length <= 1
DateTimeZoneBuilder.java,isCachable,count,int,0,RET,$ > 0
DateTimeZoneBuilder.java,isCachable,avg,double,0,RET,$ >= 25
CachedDateTimeZone.java,null,i,Integer,1,DEF,$ == null
CachedDateTimeZone.java,forZone,zone,null,0,RET,$ instanceof CachedDateTimeZone
CachedDateTimeZone.java,equals,obj,null,0,RET,$ instanceof CachedDateTimeZone
CachedDateTimeZone.java,getInfo,info,Info,0,DEF,$ == null
CachedDateTimeZone.java,getInfo,info,Info,0,DEF,(int)(($.iPeriodStart >> 32)) != period
CachedDateTimeZone.java,createInfo,next,long,0,DEF,$ == periodStart
CachedDateTimeZone.java,createInfo,next,long,0,DEF,$ > end
CachedDateTimeZone.java,getNameKey,iNextInfo,Info,0,RET,$ == null
CachedDateTimeZone.java,getNameKey,millis,long,0,RET,$ < iNextInfo.iPeriodStart
CachedDateTimeZone.java,getNameKey,iNameKey,String,0,DEF,$ == null
CachedDateTimeZone.java,getOffset,iNextInfo,Info,0,RET,$ == null
CachedDateTimeZone.java,getOffset,millis,long,0,RET,$ < iNextInfo.iPeriodStart
CachedDateTimeZone.java,getOffset,iOffset,int,0,DEF,$ == Integer.MIN_VALUE
CachedDateTimeZone.java,getStandardOffset,iNextInfo,Info,0,RET,$ == null
CachedDateTimeZone.java,getStandardOffset,millis,long,0,RET,$ < iNextInfo.iPeriodStart
CachedDateTimeZone.java,getStandardOffset,iStandardOffset,int,0,DEF,$ == Integer.MIN_VALUE
DefaultNameProvider.java,getNameSet,locale,Locale,0,RET,$ == null
DefaultNameProvider.java,getNameSet,id,String,0,RET,$ == null
DefaultNameProvider.java,getNameSet,nameKey,String,0,RET,$ == null
DefaultNameProvider.java,getNameSet,byIdCache,Map<String,Map<String,Object>>,0,DEF,$ == null
DefaultNameProvider.java,getNameSet,byNameKeyCache,Map<String,Object>,0,DEF,$ == null
DefaultNameProvider.java,getNameSet,strings,String[],0,DEF,$ != null
DefaultNameProvider.java,getNameSet,strings,String[],0,DEF,$.length == 5
DefaultNameProvider.java,getNameSet,strings,String[],0,DEF,$ != null
DefaultNameProvider.java,getNameSet,strings,String[],0,DEF,$.length == 5
DefaultNameProvider.java,getNameSet,setEn,String[],0,DEF,$ != null
DefaultNameProvider.java,getNameSet,setLoc,String[],0,DEF,$ != null
FixedDateTimeZone.java,toTimeZone,id,String,0,RET,$.length() == 6
FixedDateTimeZone.java,equals,obj,null,0,RET,$ instanceof FixedDateTimeZone
ZoneInfoCompiler.java,main,args,String[],0,RET,$.length == 0
ZoneInfoCompiler.java,main,i,int,0,RET,$ >= args.length
ZoneInfoCompiler.java,getStartOfYear,cStartOfYear,DateTimeOfYear,0,DEF,$ == null
ZoneInfoCompiler.java,getLenientISOChronology,cLenientISO,Chronology,0,DEF,$ == null
ZoneInfoCompiler.java,writeZoneInfoMap,count,short,0,InternalError,++$ == 0
ZoneInfoCompiler.java,writeZoneInfoMap,count,short,0,InternalError,++$ == 0
ZoneInfoCompiler.java,parseTime,newPos,int,0,IllegalArgumentException,$ == ~pos
ZoneInfoCompiler.java,parseTime,pos,int,0,DEF,$ == 1
ZoneInfoCompiler.java,test,next,long,0,DEF,$ == millis
ZoneInfoCompiler.java,test,next,long,0,DEF,$ > end
ZoneInfoCompiler.java,test,offset,int,0,RET,$ == nextOffset
ZoneInfoCompiler.java,test,nextKey,String,0,RET,$ == null
ZoneInfoCompiler.java,test,nextKey,String,0,RET,$.length() < 3
ZoneInfoCompiler.java,test,prev,long,0,DEF,$ == millis
ZoneInfoCompiler.java,test,prev,long,0,DEF,$ < end
ZoneInfoCompiler.java,test,trans,long,0,RET,$ - 1 != millis
ZoneInfoCompiler.java,compile,sources,File[],0,DEF,$ != null
ZoneInfoCompiler.java,compile,outputDir,File,0,IOException,$ != null
ZoneInfoCompiler.java,compile,outputDir,File,0,DEF,$ != null
ZoneInfoCompiler.java,compile,tz,DateTimeZone,1,DEF,$ == null
ZoneInfoCompiler.java,compile,pass,int,0,DEF,$ > 0
ZoneInfoCompiler.java,compile,outputDir,File,0,DEF,$ != null
ZoneInfoCompiler.java,parseDataFile,trimmed,String,0,DEF,$.length() == 0
ZoneInfoCompiler.java,parseDataFile,trimmed,String,0,DEF,$.charAt(0) == '#'
ZoneInfoCompiler.java,parseDataFile,index,int,0,DEF,$ >= 0
ZoneInfoCompiler.java,parseDataFile,zone,Zone,0,DEF,$ != null
ZoneInfoCompiler.java,parseDataFile,zone,Zone,0,DEF,$ != null
ZoneInfoCompiler.java,parseDataFile,rs,RuleSet,1,DEF,$ == null
ZoneInfoCompiler.java,parseDataFile,zone,Zone,0,DEF,$ != null
ZoneInfoCompiler.java,DateTimeOfYear,index,int,1,DEF,$ > 0
ZoneInfoCompiler.java,DateTimeOfYear,index,int,1,DEF,$ > 0
ZoneInfoCompiler.java,Rule,iToYear,int,0,IllegalArgumentException,$ < iFromYear
ZoneInfoCompiler.java,formatName,index,int,0,RET,$ > 0
ZoneInfoCompiler.java,formatName,iSaveMillis,int,1,RET,$ == 0
ZoneInfoCompiler.java,formatName,index,int,0,RET,$ < 0
ZoneInfoCompiler.java,formatName,iLetterS,String,1,DEF,$ == null
ZoneInfoCompiler.java,chain,iNext,Zone,1,DEF,$ != null
ZoneInfoCompiler.java,addToBuilder,zone,Zone,1,DEF,$.iRules == null
ZoneInfoCompiler.java,addToBuilder,rs,RuleSet,0,IllegalArgumentException,$ == null
ZoneInfoCompiler.java,addToBuilder,zone,Zone,0,DEF,$.iUntilYear == Integer.MAX_VALUE
ZoneInfoCompiler.java,toString,iNext,Zone,0,RET,$ == null
Months.java,monthsBetween,start,null,0,RET,$ instanceof LocalDate
Months.java,monthsBetween,end,null,0,RET,$ instanceof LocalDate
Months.java,monthsIn,interval,ReadableInterval,0,RET,$ == null
Months.java,parseMonths,periodStr,String,0,RET,$ == null
Months.java,plus,months,int,0,RET,$ == 0
Months.java,plus,months,Months,0,RET,$ == null
Months.java,minus,months,Months,0,RET,$ == null
Months.java,dividedBy,divisor,int,0,RET,$ == 1
Months.java,isGreaterThan,other,Months,0,RET,$ == null
Months.java,isLessThan,other,Months,0,RET,$ == null
DateTimeFormatter.java,withLocale,locale,Locale,0,RET,$ != null
DateTimeFormatter.java,withOffsetParsed,iOffsetParsed,boolean,0,RET,$ == true
DateTimeFormatter.java,withChronology,iChrono,Chronology,0,RET,$ == chrono
DateTimeFormatter.java,withZone,iZone,DateTimeZone,0,RET,$ == zone
DateTimeFormatter.java,withPivotYear,iPivotYear,Integer,0,RET,$ == pivotYear
DateTimeFormatter.java,withPivotYear,iPivotYear,Integer,0,RET,$ != null
DateTimeFormatter.java,printTo,partial,ReadablePartial,0,IllegalArgumentException,$ == null
DateTimeFormatter.java,printTo,partial,ReadablePartial,0,IllegalArgumentException,$ == null
DateTimeFormatter.java,printTo,adjustedInstant,long,0,DEF,(instant ^ $) < 0
DateTimeFormatter.java,printTo,instant,long,0,DEF,($ ^ adjustedInstant) < 0
DateTimeFormatter.java,printTo,offset,int,0,DEF,(instant ^ $) >= 0
DateTimeFormatter.java,printTo,instant,long,0,DEF,($ ^ offset) >= 0
DateTimeFormatter.java,printTo,adjustedInstant,long,0,DEF,(instant ^ $) < 0
DateTimeFormatter.java,printTo,instant,long,0,DEF,($ ^ adjustedInstant) < 0
DateTimeFormatter.java,printTo,offset,int,0,DEF,(instant ^ $) >= 0
DateTimeFormatter.java,printTo,instant,long,0,DEF,($ ^ offset) >= 0
DateTimeFormatter.java,requirePrinter,printer,DateTimePrinter,0,UnsupportedOperationException,$ == null
DateTimeFormatter.java,parseInto,instant,ReadWritableInstant,0,IllegalArgumentException,$ == null
DateTimeFormatter.java,parseInto,bucket,DateTimeParserBucket,1,DEF,$.getOffsetInteger() != null
DateTimeFormatter.java,parseInto,bucket,DateTimeParserBucket,0,DEF,$.getZone() != null
DateTimeFormatter.java,parseInto,iZone,DateTimeZone,0,DEF,$ != null
DateTimeFormatter.java,parseMillis,newPos,int,1,RET,$ >= 0
DateTimeFormatter.java,parseLocalDateTime,newPos,int,1,RET,$ >= 0
DateTimeFormatter.java,parseLocalDateTime,bucket,DateTimeParserBucket,1,DEF,$.getOffsetInteger() != null
DateTimeFormatter.java,parseLocalDateTime,bucket,DateTimeParserBucket,0,DEF,$.getZone() != null
DateTimeFormatter.java,parseDateTime,newPos,int,1,RET,$ >= 0
DateTimeFormatter.java,parseDateTime,bucket,DateTimeParserBucket,1,DEF,$.getOffsetInteger() != null
DateTimeFormatter.java,parseDateTime,bucket,DateTimeParserBucket,0,DEF,$.getZone() != null
DateTimeFormatter.java,parseDateTime,iZone,DateTimeZone,0,DEF,$ != null
DateTimeFormatter.java,parseMutableDateTime,newPos,int,1,RET,$ >= 0
DateTimeFormatter.java,parseMutableDateTime,bucket,DateTimeParserBucket,1,DEF,$.getOffsetInteger() != null
DateTimeFormatter.java,parseMutableDateTime,bucket,DateTimeParserBucket,0,DEF,$.getZone() != null
DateTimeFormatter.java,parseMutableDateTime,iZone,DateTimeZone,0,DEF,$ != null
DateTimeFormatter.java,requireParser,parser,DateTimeParser,0,UnsupportedOperationException,$ == null
DateTimeFormatter.java,selectChronology,iChrono,Chronology,0,DEF,$ != null
DateTimeFormatter.java,selectChronology,iZone,DateTimeZone,0,DEF,$ != null
ISOPeriodFormat.java,standard,cStandard,PeriodFormatter,0,DEF,$ == null
ISOPeriodFormat.java,alternate,cAlternate,PeriodFormatter,0,DEF,$ == null
ISOPeriodFormat.java,alternateExtended,cAlternateExtended,PeriodFormatter,0,DEF,$ == null
ISOPeriodFormat.java,alternateWithWeeks,cAlternateWithWeeks,PeriodFormatter,0,DEF,$ == null
ISOPeriodFormat.java,alternateExtendedWithWeeks,cAlternateExtendedWihWeeks,PeriodFormatter,0,DEF,$ == null
DateTimeFormatterBuilder.java,toFormatter,printer,DateTimePrinter,0,RET,$ != null
DateTimeFormatterBuilder.java,toFormatter,parser,DateTimeParser,0,RET,$ != null
DateTimeFormatterBuilder.java,append,formatter,DateTimeFormatter,0,IllegalArgumentException,$ == null
DateTimeFormatterBuilder.java,append,printer,DateTimePrinter,0,DEF,$ != null
DateTimeFormatterBuilder.java,append,parsers,DateTimeParser[],0,IllegalArgumentException,$ == null
DateTimeFormatterBuilder.java,append,length,int,0,IllegalArgumentException:RET,$ == 1
DateTimeFormatterBuilder.java,append,parsers,DateTimeParser[],0,IllegalArgumentException,$[0] == null
DateTimeFormatterBuilder.java,append,parsers,DateTimeParser[],0,IllegalArgumentException,(copyOfParsers[i] = $[i]) == null
DateTimeFormatterBuilder.java,append,copyOfParsers,DateTimeParser[],0,IllegalArgumentException,($[i] = parsers[i]) == null
DateTimeFormatterBuilder.java,append,i,int,0,IllegalArgumentException,(copyOfParsers[$] = parsers[$]) == null
DateTimeFormatterBuilder.java,checkParser,parser,DateTimeParser,0,IllegalArgumentException,$ == null
DateTimeFormatterBuilder.java,checkPrinter,printer,DateTimePrinter,0,IllegalArgumentException,$ == null
DateTimeFormatterBuilder.java,appendLiteral,text,String,0,IllegalArgumentException,$ == null
DateTimeFormatterBuilder.java,appendDecimal,fieldType,DateTimeFieldType,0,IllegalArgumentException,$ == null
DateTimeFormatterBuilder.java,appendDecimal,maxDigits,int,0,DEF,$ < minDigits
DateTimeFormatterBuilder.java,appendDecimal,minDigits,int,0,IllegalArgumentException,$ < 0
DateTimeFormatterBuilder.java,appendDecimal,maxDigits,int,0,IllegalArgumentException,$ <= 0
DateTimeFormatterBuilder.java,appendDecimal,minDigits,int,1,RET,$ <= 1
DateTimeFormatterBuilder.java,appendFixedDecimal,fieldType,DateTimeFieldType,0,IllegalArgumentException,$ == null
DateTimeFormatterBuilder.java,appendFixedDecimal,numDigits,int,0,IllegalArgumentException,$ <= 0
DateTimeFormatterBuilder.java,appendSignedDecimal,fieldType,DateTimeFieldType,0,IllegalArgumentException,$ == null
DateTimeFormatterBuilder.java,appendSignedDecimal,maxDigits,int,0,DEF,$ < minDigits
DateTimeFormatterBuilder.java,appendSignedDecimal,minDigits,int,0,IllegalArgumentException,$ < 0
DateTimeFormatterBuilder.java,appendSignedDecimal,maxDigits,int,0,IllegalArgumentException,$ <= 0
DateTimeFormatterBuilder.java,appendSignedDecimal,minDigits,int,1,RET,$ <= 1
DateTimeFormatterBuilder.java,appendFixedSignedDecimal,fieldType,DateTimeFieldType,0,IllegalArgumentException,$ == null
DateTimeFormatterBuilder.java,appendFixedSignedDecimal,numDigits,int,0,IllegalArgumentException,$ <= 0
DateTimeFormatterBuilder.java,appendText,fieldType,DateTimeFieldType,0,IllegalArgumentException,$ == null
DateTimeFormatterBuilder.java,appendShortText,fieldType,DateTimeFieldType,0,IllegalArgumentException,$ == null
DateTimeFormatterBuilder.java,appendFraction,fieldType,DateTimeFieldType,0,IllegalArgumentException,$ == null
DateTimeFormatterBuilder.java,appendFraction,maxDigits,int,0,DEF,$ < minDigits
DateTimeFormatterBuilder.java,appendFraction,minDigits,int,0,IllegalArgumentException,$ < 0
DateTimeFormatterBuilder.java,appendFraction,maxDigits,int,0,IllegalArgumentException,$ <= 0
DateTimeFormatterBuilder.java,getFormatter,f,Object,0,DEF,$ == null
DateTimeFormatterBuilder.java,getFormatter,iElementPairs,ArrayList<Object>,0,DEF,$.size() == 2
DateTimeFormatterBuilder.java,getFormatter,printer,Object,1,DEF,$ != null
DateTimeFormatterBuilder.java,getFormatter,printer,Object,0,DEF,$ == parser
DateTimeFormatterBuilder.java,getFormatter,parser,Object,0,DEF,$ == null
DateTimeFormatterBuilder.java,getFormatter,f,Object,0,DEF,$ == null
DateTimeFormatterBuilder.java,isPrinter,f,null,0,RET,$ instanceof DateTimePrinter
DateTimeFormatterBuilder.java,isPrinter,f,null,0,RET,$ instanceof Composite
DateTimeFormatterBuilder.java,isParser,f,null,0,RET,$ instanceof DateTimeParser
DateTimeFormatterBuilder.java,isParser,f,null,0,RET,$ instanceof Composite
DateTimeFormatterBuilder.java,parseInto,a,char,0,RET,$ != b
DateTimeFormatterBuilder.java,parseInto,a,char,0,RET,$ != b
DateTimeFormatterBuilder.java,parseInto,a,char,0,RET,$ != b
DateTimeFormatterBuilder.java,parseInto,length,int,0,DEF,$ == 0
DateTimeFormatterBuilder.java,parseInto,c,char,0,DEF,$ == '-'
DateTimeFormatterBuilder.java,parseInto,c,char,0,DEF,$ == '+'
DateTimeFormatterBuilder.java,parseInto,length,int,0,DEF,$ + 1 >= limit
DateTimeFormatterBuilder.java,parseInto,c,char,0,DEF,($ = text.charAt(position + length + 1)) < '0'
DateTimeFormatterBuilder.java,parseInto,length,int,0,DEF,(c = text.charAt(position + $ + 1)) < '0'
DateTimeFormatterBuilder.java,parseInto,text,String,0,DEF,(c = $.charAt(position + length + 1)) < '0'
DateTimeFormatterBuilder.java,parseInto,position,int,0,DEF,(c = text.charAt($ + length + 1)) < '0'
DateTimeFormatterBuilder.java,parseInto,c,char,0,DEF,$ > '9'
DateTimeFormatterBuilder.java,parseInto,c,char,0,DEF,$ < '0'
DateTimeFormatterBuilder.java,parseInto,c,char,0,DEF,$ > '9'
DateTimeFormatterBuilder.java,parseInto,length,int,0,RET,$ == 0
DateTimeFormatterBuilder.java,parseInto,length,int,1,DEF,$ >= 9
DateTimeFormatterBuilder.java,parseInto,newPos,int,0,RET,$ < 0
DateTimeFormatterBuilder.java,parseInto,newPos,int,0,RET,$ != expectedPos
DateTimeFormatterBuilder.java,parseInto,c,char,0,DEF,$ == '-'
DateTimeFormatterBuilder.java,parseInto,c,char,0,DEF,$ == '+'
DateTimeFormatterBuilder.java,parseInto,newPos,int,1,RET,$ > expectedPos
DateTimeFormatterBuilder.java,parseInto,newPos,int,0,RET,$ < expectedPos
DateTimeFormatterBuilder.java,parseInto,limit,int,0,RET,$ < 2
DateTimeFormatterBuilder.java,parseInto,length,int,0,DEF,$ == 0
DateTimeFormatterBuilder.java,parseInto,c,char,0,DEF,$ == '-'
DateTimeFormatterBuilder.java,parseInto,c,char,0,DEF,$ == '+'
DateTimeFormatterBuilder.java,parseInto,c,char,0,DEF,$ < '0'
DateTimeFormatterBuilder.java,parseInto,c,char,0,DEF,$ > '9'
DateTimeFormatterBuilder.java,parseInto,length,int,0,RET,$ == 0
DateTimeFormatterBuilder.java,parseInto,length,int,0,RET,$ != 2
DateTimeFormatterBuilder.java,parseInto,length,int,1,DEF,$ >= 9
DateTimeFormatterBuilder.java,parseInto,c,char,0,RET,$ < '0'
DateTimeFormatterBuilder.java,parseInto,c,char,0,RET,$ > '9'
DateTimeFormatterBuilder.java,parseInto,c,char,0,RET,$ < '0'
DateTimeFormatterBuilder.java,parseInto,c,char,0,RET,$ > '9'
DateTimeFormatterBuilder.java,parseInto,bucket,DateTimeParserBucket,0,DEF,$.getPivotYear() != null
DateTimeFormatterBuilder.java,parseInto,low,int,1,DEF,$ >= 0
DateTimeFormatterBuilder.java,printTo,year,int,1,DEF,$ < 0
DateTimeFormatterBuilder.java,printTo,year,int,1,DEF,$ < 0
DateTimeFormatterBuilder.java,getTwoDigitYear,year,int,0,DEF,$ < 0
DateTimeFormatterBuilder.java,printTo,year,int,1,DEF,$ < 0
DateTimeFormatterBuilder.java,printTo,year,int,1,DEF,$ < 0
DateTimeFormatterBuilder.java,getTwoDigitYear,year,int,0,DEF,$ < 0
DateTimeFormatterBuilder.java,parseInto,innerMap,Map<DateTimeFieldType,Object[]>,0,DEF,$ == null
DateTimeFormatterBuilder.java,parseInto,array,Object[],1,RET,$ == null
DateTimeFormatterBuilder.java,parseInto,min,int,0,RET,max - $ > 32
DateTimeFormatterBuilder.java,parseInto,max,int,0,RET,$ - min > 32
DateTimeFormatterBuilder.java,Fraction,maxDigits,int,0,DEF,$ > 18
DateTimeFormatterBuilder.java,printTo,buf,StringBuffer,1,DEF,$ != null
DateTimeFormatterBuilder.java,printTo,fraction,long,0,RET,$ == 0
DateTimeFormatterBuilder.java,printTo,buf,StringBuffer,1,DEF,$ != null
DateTimeFormatterBuilder.java,printTo,scaled,long,1,DEF,($ & 0x7fffffff) == scaled
DateTimeFormatterBuilder.java,printTo,buf,StringBuffer,1,DEF,$ != null
DateTimeFormatterBuilder.java,printTo,minDigits,int,0,RET,$ < digits
DateTimeFormatterBuilder.java,printTo,length,int,0,DEF,$ <= 1
DateTimeFormatterBuilder.java,printTo,str,String,0,DEF,$.charAt(length - 1) != '0'
DateTimeFormatterBuilder.java,printTo,length,int,0,DEF,str.charAt($ - 1) != '0'
DateTimeFormatterBuilder.java,printTo,buf,StringBuffer,1,DEF,$ != null
DateTimeFormatterBuilder.java,printTo,buf,StringBuffer,1,DEF,$ != null
DateTimeFormatterBuilder.java,getFractionData,rangeMillis,long,0,DEF,(($ * scalar) / scalar) == rangeMillis
DateTimeFormatterBuilder.java,getFractionData,scalar,long,0,DEF,((rangeMillis * $) / $) == rangeMillis
DateTimeFormatterBuilder.java,parseInto,c,char,0,DEF,$ < '0'
DateTimeFormatterBuilder.java,parseInto,c,char,0,DEF,$ > '9'
DateTimeFormatterBuilder.java,parseInto,length,int,0,RET,$ == 0
DateTimeFormatterBuilder.java,parseInto,value,long,0,RET,$ > Integer.MAX_VALUE
DateTimeFormatterBuilder.java,TimeZoneOffset,minFields,int,0,IllegalArgumentException,$ <= 0
DateTimeFormatterBuilder.java,TimeZoneOffset,maxFields,int,0,IllegalArgumentException,$ < minFields
DateTimeFormatterBuilder.java,TimeZoneOffset,minFields,int,0,DEF,$ > 4
DateTimeFormatterBuilder.java,estimatePrintedLength,iZeroOffsetPrintText,String,0,DEF,$ != null
DateTimeFormatterBuilder.java,estimatePrintedLength,iZeroOffsetPrintText,String,0,DEF,$.length() > est
DateTimeFormatterBuilder.java,printTo,displayZone,DateTimeZone,0,RET,$ == null
DateTimeFormatterBuilder.java,printTo,displayOffset,int,0,RET,$ == 0
DateTimeFormatterBuilder.java,printTo,iZeroOffsetPrintText,String,0,RET,$ != null
DateTimeFormatterBuilder.java,printTo,displayOffset,int,1,DEF,$ >= 0
DateTimeFormatterBuilder.java,printTo,iMaxFields,int,0,RET,$ == 1
DateTimeFormatterBuilder.java,printTo,displayOffset,int,0,RET,$ == 0
DateTimeFormatterBuilder.java,printTo,iMinFields,int,0,RET,$ <= 1
DateTimeFormatterBuilder.java,printTo,iMaxFields,int,0,RET,$ == 2
DateTimeFormatterBuilder.java,printTo,displayOffset,int,0,RET,$ == 0
DateTimeFormatterBuilder.java,printTo,iMinFields,int,0,RET,$ <= 2
DateTimeFormatterBuilder.java,printTo,iMaxFields,int,0,RET,$ == 3
DateTimeFormatterBuilder.java,printTo,displayOffset,int,0,RET,$ == 0
DateTimeFormatterBuilder.java,printTo,iMinFields,int,0,RET,$ <= 3
DateTimeFormatterBuilder.java,printTo,displayZone,DateTimeZone,0,RET,$ == null
DateTimeFormatterBuilder.java,printTo,displayOffset,int,0,RET,$ == 0
DateTimeFormatterBuilder.java,printTo,iZeroOffsetPrintText,String,0,RET,$ != null
DateTimeFormatterBuilder.java,printTo,displayOffset,int,1,DEF,$ >= 0
DateTimeFormatterBuilder.java,printTo,iMaxFields,int,0,RET,$ == 1
DateTimeFormatterBuilder.java,printTo,displayOffset,int,0,RET,$ == 0
DateTimeFormatterBuilder.java,printTo,iMinFields,int,0,RET,$ == 1
DateTimeFormatterBuilder.java,printTo,iMaxFields,int,0,RET,$ == 2
DateTimeFormatterBuilder.java,printTo,displayOffset,int,0,RET,$ == 0
DateTimeFormatterBuilder.java,printTo,iMinFields,int,0,RET,$ == 2
DateTimeFormatterBuilder.java,printTo,iMaxFields,int,0,RET,$ == 3
DateTimeFormatterBuilder.java,printTo,displayOffset,int,0,RET,$ == 0
DateTimeFormatterBuilder.java,printTo,iMinFields,int,0,RET,$ == 3
DateTimeFormatterBuilder.java,parseInto,iZeroOffsetParseText,String,0,RET,$ != null
DateTimeFormatterBuilder.java,parseInto,iZeroOffsetParseText,String,0,RET,$.length() == 0
DateTimeFormatterBuilder.java,parseInto,limit,int,0,DEF,$ > 0
DateTimeFormatterBuilder.java,parseInto,c,char,0,DEF,$ == '-'
DateTimeFormatterBuilder.java,parseInto,c,char,0,DEF,$ == '+'
DateTimeFormatterBuilder.java,parseInto,limit,int,0,RET,$ <= 1
DateTimeFormatterBuilder.java,parseInto,c,char,1,DEF,$ == '-'
DateTimeFormatterBuilder.java,parseInto,c,char,1,DEF,$ == '+'
DateTimeFormatterBuilder.java,parseInto,text,String,0,RET,digitCount($, position, 2) < 2
DateTimeFormatterBuilder.java,parseInto,position,int,0,RET,digitCount(text, $, 2) < 2
DateTimeFormatterBuilder.java,parseInto,hours,int,0,RET,$ > 23
DateTimeFormatterBuilder.java,parseInto,limit,int,0,DEF,$ <= 0
DateTimeFormatterBuilder.java,parseInto,c,char,1,DEF,$ == ':'
DateTimeFormatterBuilder.java,parseInto,c,char,1,DEF,$ >= '0'
DateTimeFormatterBuilder.java,parseInto,c,char,1,DEF,$ <= '9'
DateTimeFormatterBuilder.java,parseInto,count,int,1,DEF,$ == 0
DateTimeFormatterBuilder.java,parseInto,count,int,0,RET,$ < 2
DateTimeFormatterBuilder.java,parseInto,minutes,int,0,RET,$ > 59
DateTimeFormatterBuilder.java,parseInto,limit,int,0,DEF,$ <= 0
DateTimeFormatterBuilder.java,parseInto,text,String,0,DEF,$.charAt(position) != ':'
DateTimeFormatterBuilder.java,parseInto,position,int,0,DEF,text.charAt($) != ':'
DateTimeFormatterBuilder.java,parseInto,count,int,1,DEF,$ == 0
DateTimeFormatterBuilder.java,parseInto,count,int,0,RET,$ < 2
DateTimeFormatterBuilder.java,parseInto,seconds,int,0,RET,$ > 59
DateTimeFormatterBuilder.java,parseInto,limit,int,0,DEF,$ <= 0
DateTimeFormatterBuilder.java,parseInto,text,String,0,DEF,$.charAt(position) != '.'
DateTimeFormatterBuilder.java,parseInto,position,int,0,DEF,text.charAt($) != '.'
DateTimeFormatterBuilder.java,parseInto,text,String,0,DEF,$.charAt(position) != ','
DateTimeFormatterBuilder.java,parseInto,position,int,0,DEF,text.charAt($) != ','
DateTimeFormatterBuilder.java,parseInto,count,int,1,DEF,$ == 0
DateTimeFormatterBuilder.java,parseInto,count,int,0,RET,$ < 1
DateTimeFormatterBuilder.java,parseInto,count,int,0,DEF,$ > 1
DateTimeFormatterBuilder.java,parseInto,count,int,0,DEF,$ > 2
DateTimeFormatterBuilder.java,digitCount,c,char,0,DEF,$ < '0'
DateTimeFormatterBuilder.java,digitCount,c,char,0,DEF,$ > '9'
DateTimeFormatterBuilder.java,print,displayZone,DateTimeZone,0,RET,$ == null
DateTimeFormatterBuilder.java,parseInto,best,String,0,DEF,$ == null
DateTimeFormatterBuilder.java,parseInto,best,String,0,RET,$ != null
DateTimeFormatterBuilder.java,Composite,printerList,List<Object>,1,DEF,$.size() <= 0
DateTimeFormatterBuilder.java,Composite,parserList,List<Object>,1,DEF,$.size() <= 0
DateTimeFormatterBuilder.java,printTo,elements,DateTimePrinter[],0,UnsupportedOperationException,$ == null
DateTimeFormatterBuilder.java,printTo,locale,Locale,0,DEF,$ == null
DateTimeFormatterBuilder.java,printTo,elements,DateTimePrinter[],0,UnsupportedOperationException,$ == null
DateTimeFormatterBuilder.java,printTo,locale,Locale,0,DEF,$ == null
DateTimeFormatterBuilder.java,printTo,elements,DateTimePrinter[],0,UnsupportedOperationException,$ == null
DateTimeFormatterBuilder.java,printTo,locale,Locale,0,DEF,$ == null
DateTimeFormatterBuilder.java,printTo,elements,DateTimePrinter[],0,UnsupportedOperationException,$ == null
DateTimeFormatterBuilder.java,printTo,locale,Locale,0,DEF,$ == null
DateTimeFormatterBuilder.java,parseInto,elements,DateTimeParser[],0,UnsupportedOperationException,$ == null
DateTimeFormatterBuilder.java,decompose,element,null,0,DEF,$ instanceof DateTimePrinter
DateTimeFormatterBuilder.java,decompose,element,null,1,DEF,$ instanceof Composite
DateTimeFormatterBuilder.java,decompose,element,null,0,DEF,$ instanceof DateTimeParser
DateTimeFormatterBuilder.java,decompose,element,null,1,DEF,$ instanceof Composite
DateTimeFormatterBuilder.java,addArrayToList,array,Object[],0,DEF,$ != null
DateTimeFormatterBuilder.java,MatchingParser,parser,DateTimeParser,0,DEF,$ != null
DateTimeFormatterBuilder.java,MatchingParser,len,int,0,DEF,$ > est
DateTimeFormatterBuilder.java,parseInto,parser,DateTimeParser,0,RET,$ == null
DateTimeFormatterBuilder.java,parseInto,bestValidPos,int,0,RET,$ <= position
DateTimeFormatterBuilder.java,parseInto,parsePos,int,1,RET,$ >= position
DateTimeFormatterBuilder.java,parseInto,parsePos,int,0,RET,$ > bestValidPos
DateTimeFormatterBuilder.java,parseInto,i,int,0,RET,($ + 1) >= length
DateTimeFormatterBuilder.java,parseInto,parsers,DateTimeParser[],0,RET,$[i + 1] == null
DateTimeFormatterBuilder.java,parseInto,i,int,0,RET,parsers[$ + 1] == null
DateTimeFormatterBuilder.java,parseInto,parsePos,int,0,DEF,$ < 0
DateTimeFormatterBuilder.java,parseInto,parsePos,int,0,DEF,$ > bestInvalidPos
DateTimeFormatterBuilder.java,parseInto,bestValidPos,int,0,RET,$ > position
DateTimeFormatterBuilder.java,parseInto,bestValidPos,int,0,RET,$ == position
DateTimeFormatterBuilder.java,parseInto,bestValidState,Object,0,DEF,$ != null
PeriodFormatterBuilder.java,clear,iElementPairs,List<Object>,1,DEF,$ == null
PeriodFormatterBuilder.java,append,formatter,PeriodFormatter,0,IllegalArgumentException,$ == null
PeriodFormatterBuilder.java,append,printer,PeriodPrinter,0,IllegalArgumentException,$ == null
PeriodFormatterBuilder.java,append,parser,PeriodParser,0,IllegalArgumentException,$ == null
PeriodFormatterBuilder.java,appendLiteral,text,String,0,IllegalArgumentException,$ == null
PeriodFormatterBuilder.java,appendPrefix,text,String,0,IllegalArgumentException,$ == null
PeriodFormatterBuilder.java,appendPrefix,singularText,String,0,IllegalArgumentException,$ == null
PeriodFormatterBuilder.java,appendPrefix,pluralText,String,0,IllegalArgumentException,$ == null
PeriodFormatterBuilder.java,appendPrefix,prefix,PeriodFieldAffix,0,IllegalArgumentException,$ == null
PeriodFormatterBuilder.java,appendPrefix,iPrefix,PeriodFieldAffix,0,DEF,$ != null
PeriodFormatterBuilder.java,appendSuffix,text,String,0,IllegalArgumentException,$ == null
PeriodFormatterBuilder.java,appendSuffix,singularText,String,0,IllegalArgumentException,$ == null
PeriodFormatterBuilder.java,appendSuffix,pluralText,String,0,IllegalArgumentException,$ == null
PeriodFormatterBuilder.java,appendSuffix,iElementPairs,List<Object>,1,DEF,$.size() > 0
PeriodFormatterBuilder.java,appendSuffix,originalPrinter,Object,0,IllegalStateException,$ == null
PeriodFormatterBuilder.java,appendSuffix,originalParser,Object,0,IllegalStateException,$ == null
PeriodFormatterBuilder.java,appendSuffix,originalPrinter,Object,0,IllegalStateException,$ != originalParser
PeriodFormatterBuilder.java,appendSuffix,originalPrinter,null,0,IllegalStateException,$ instanceof FieldFormatter
PeriodFormatterBuilder.java,appendSeparator,text,String,0,IllegalArgumentException,$ == null
PeriodFormatterBuilder.java,appendSeparator,finalText,String,0,IllegalArgumentException,$ == null
PeriodFormatterBuilder.java,appendSeparator,pairs,List<Object>,0,RET,$.size() == 0
PeriodFormatterBuilder.java,appendSeparator,useBefore,boolean,0,DEF,$ == false
PeriodFormatterBuilder.java,appendSeparator,lastSeparator,Separator,1,IllegalStateException,$ != null
PeriodFormatterBuilder.java,appendSeparator,pairs,List<Object>,1,IllegalStateException,$.size() == 0
PeriodFormatterBuilder.java,clearPrefix,iPrefix,PeriodFieldAffix,0,IllegalStateException,$ != null
PeriodFormatterBuilder.java,toFormatter,size,int,0,RET,$ >= 2
PeriodFormatterBuilder.java,toFormatter,sep,Separator,0,RET,$.iAfterParser == null
PeriodFormatterBuilder.java,toFormatter,sep,Separator,0,RET,$.iAfterPrinter == null
PeriodFormatterBuilder.java,parse,position,int,0,DEF,$ >= 0
PeriodFormatterBuilder.java,scan,pos,int,0,RET,$ >= 0
PeriodFormatterBuilder.java,FieldFormatter,field,FieldFormatter,0,DEF,$.iSuffix != null
PeriodFormatterBuilder.java,countFieldsToPrint,stopAt,int,0,RET,$ <= 0
PeriodFormatterBuilder.java,countFieldsToPrint,iPrintZeroSetting,int,0,RET,$ == PRINT_ZERO_ALWAYS
PeriodFormatterBuilder.java,countFieldsToPrint,period,ReadablePeriod,0,RET,getFieldValue($) != Long.MAX_VALUE
PeriodFormatterBuilder.java,calculatePrintedLength,valueLong,long,0,RET,$ == Long.MAX_VALUE
PeriodFormatterBuilder.java,calculatePrintedLength,iFieldType,int,0,DEF,$ >= SECONDS_MILLIS
PeriodFormatterBuilder.java,calculatePrintedLength,iFieldType,int,0,DEF,$ == SECONDS_OPTIONAL_MILLIS
PeriodFormatterBuilder.java,calculatePrintedLength,valueLong,long,0,DEF,(Math.abs($) % DateTimeConstants.MILLIS_PER_SECOND) == 0
PeriodFormatterBuilder.java,calculatePrintedLength,iPrefix,PeriodFieldAffix,0,DEF,$ != null
PeriodFormatterBuilder.java,calculatePrintedLength,iSuffix,PeriodFieldAffix,0,DEF,$ != null
PeriodFormatterBuilder.java,printTo,valueLong,long,0,RET,$ == Long.MAX_VALUE
PeriodFormatterBuilder.java,printTo,iFieldType,int,0,DEF,$ >= SECONDS_MILLIS
PeriodFormatterBuilder.java,printTo,iPrefix,PeriodFieldAffix,0,DEF,$ != null
PeriodFormatterBuilder.java,printTo,minDigits,int,1,DEF,$ <= 1
PeriodFormatterBuilder.java,printTo,iFieldType,int,0,DEF,$ >= SECONDS_MILLIS
PeriodFormatterBuilder.java,printTo,iFieldType,int,0,DEF,$ == SECONDS_MILLIS
PeriodFormatterBuilder.java,printTo,dp,int,0,DEF,$ > 0
PeriodFormatterBuilder.java,printTo,iSuffix,PeriodFieldAffix,0,DEF,$ != null
PeriodFormatterBuilder.java,printTo,valueLong,long,0,RET,$ == Long.MAX_VALUE
PeriodFormatterBuilder.java,printTo,iFieldType,int,0,DEF,$ >= SECONDS_MILLIS
PeriodFormatterBuilder.java,printTo,iPrefix,PeriodFieldAffix,0,DEF,$ != null
PeriodFormatterBuilder.java,printTo,minDigits,int,1,DEF,$ <= 1
PeriodFormatterBuilder.java,printTo,iFieldType,int,0,DEF,$ >= SECONDS_MILLIS
PeriodFormatterBuilder.java,printTo,iFieldType,int,0,DEF,$ == SECONDS_MILLIS
PeriodFormatterBuilder.java,printTo,dp,int,0,DEF,$ > 0
PeriodFormatterBuilder.java,printTo,iSuffix,PeriodFieldAffix,0,DEF,$ != null
PeriodFormatterBuilder.java,parseInto,iPrefix,PeriodFieldAffix,0,RET,$ != null
PeriodFormatterBuilder.java,parseInto,position,int,1,DEF,$ >= 0
PeriodFormatterBuilder.java,parseInto,iSuffix,PeriodFieldAffix,0,RET,$ != null
PeriodFormatterBuilder.java,parseInto,suffixPos,int,1,DEF,$ >= 0
PeriodFormatterBuilder.java,parseInto,suffixPos,int,1,DEF,$ > 0
PeriodFormatterBuilder.java,parseInto,length,int,0,DEF,$ == 0
PeriodFormatterBuilder.java,parseInto,c,char,0,DEF,$ == '-'
PeriodFormatterBuilder.java,parseInto,c,char,0,DEF,$ == '+'
PeriodFormatterBuilder.java,parseInto,length,int,0,DEF,$ + 1 >= limit
PeriodFormatterBuilder.java,parseInto,c,char,0,DEF,($ = text.charAt(position + length + 1)) < '0'
PeriodFormatterBuilder.java,parseInto,length,int,0,DEF,(c = text.charAt(position + $ + 1)) < '0'
PeriodFormatterBuilder.java,parseInto,text,String,0,DEF,(c = $.charAt(position + length + 1)) < '0'
PeriodFormatterBuilder.java,parseInto,position,int,0,DEF,(c = text.charAt($ + length + 1)) < '0'
PeriodFormatterBuilder.java,parseInto,c,char,0,DEF,$ > '9'
PeriodFormatterBuilder.java,parseInto,c,char,1,DEF,$ >= '0'
PeriodFormatterBuilder.java,parseInto,c,char,1,DEF,$ <= '9'
PeriodFormatterBuilder.java,parseInto,c,char,1,DEF,$ == '.'
PeriodFormatterBuilder.java,parseInto,c,char,1,DEF,$ == ','
PeriodFormatterBuilder.java,parseInto,iFieldType,int,1,DEF,$ == SECONDS_MILLIS
PeriodFormatterBuilder.java,parseInto,iFieldType,int,1,DEF,$ == SECONDS_OPTIONAL_MILLIS
PeriodFormatterBuilder.java,parseInto,fractPos,int,0,DEF,$ >= 0
PeriodFormatterBuilder.java,parseInto,suffixPos,int,0,RET,$ >= 0
PeriodFormatterBuilder.java,parseInto,length,int,0,RET,position + $ != suffixPos
PeriodFormatterBuilder.java,parseInto,position,int,0,RET,$ + length != suffixPos
PeriodFormatterBuilder.java,parseInto,iFieldType,int,1,DEF,$ != SECONDS_MILLIS
PeriodFormatterBuilder.java,parseInto,iFieldType,int,1,DEF,$ != SECONDS_OPTIONAL_MILLIS
PeriodFormatterBuilder.java,parseInto,fractPos,int,1,DEF,$ < 0
PeriodFormatterBuilder.java,parseInto,fractLen,int,1,DEF,$ <= 0
PeriodFormatterBuilder.java,parseInto,fractLen,int,1,DEF,$ >= 3
PeriodFormatterBuilder.java,parseInto,fractLen,int,1,DEF,$ == 1
PeriodFormatterBuilder.java,parseInto,wholeValue,int,0,DEF,$ < 0
PeriodFormatterBuilder.java,parseInto,position,int,0,DEF,$ >= 0
PeriodFormatterBuilder.java,parseInto,iSuffix,PeriodFieldAffix,0,DEF,$ != null
PeriodFormatterBuilder.java,parseInt,length,int,0,RET,$ >= 10
PeriodFormatterBuilder.java,parseInt,length,int,0,RET,$ <= 0
PeriodFormatterBuilder.java,parseInt,value,int,1,RET,$ == '-'
PeriodFormatterBuilder.java,parseInt,length,int,0,RET,--$ < 0
PeriodFormatterBuilder.java,getFieldValue,iPrintZeroSetting,int,1,DEF,$ == PRINT_ZERO_ALWAYS
PeriodFormatterBuilder.java,getFieldValue,type,PeriodType,0,RET,$ != null
PeriodFormatterBuilder.java,getFieldValue,iFieldType,int,0,RET,isSupported(type, $) == false
PeriodFormatterBuilder.java,getFieldValue,type,PeriodType,0,RET,isSupported($, iFieldType) == false
PeriodFormatterBuilder.java,getFieldValue,value,long,0,RET,$ == 0
PeriodFormatterBuilder.java,getFieldValue,i,int,0,RET,iFieldFormatters[$] != null
PeriodFormatterBuilder.java,getFieldValue,iFieldFormatters,FieldFormatter[],0,RET,$[i] != null
PeriodFormatterBuilder.java,getFieldValue,i,int,0,RET,iFieldFormatters[$] != null
PeriodFormatterBuilder.java,getFieldValue,iFieldFormatters,FieldFormatter[],0,RET,$[i] != null
PeriodFormatterBuilder.java,isZero,period,ReadablePeriod,0,RET,$.getValue(i) != 0
PeriodFormatterBuilder.java,isZero,i,int,0,RET,period.getValue($) != 0
PeriodFormatterBuilder.java,Separator,finalText,String,1,DEF,$ == null
PeriodFormatterBuilder.java,Separator,variants,String[],1,DEF,$ == null
PeriodFormatterBuilder.java,Separator,variants,String[],1,DEF,$.length == 0
PeriodFormatterBuilder.java,Separator,variants,String[],0,DEF,$ != null
PeriodFormatterBuilder.java,countFieldsToPrint,sum,int,0,DEF,$ < stopAt
PeriodFormatterBuilder.java,calculatePrintedLength,period,ReadablePeriod,0,DEF,before.countFieldsToPrint($, 1, locale) > 0
PeriodFormatterBuilder.java,calculatePrintedLength,before,PeriodPrinter,0,DEF,$.countFieldsToPrint(period, 1, locale) > 0
PeriodFormatterBuilder.java,calculatePrintedLength,locale,Locale,0,DEF,before.countFieldsToPrint(period, 1, $) > 0
PeriodFormatterBuilder.java,calculatePrintedLength,afterCount,int,0,DEF,$ > 0
PeriodFormatterBuilder.java,calculatePrintedLength,period,ReadablePeriod,0,DEF,after.countFieldsToPrint($, 1, locale) > 0
PeriodFormatterBuilder.java,calculatePrintedLength,after,PeriodPrinter,0,DEF,$.countFieldsToPrint(period, 1, locale) > 0
PeriodFormatterBuilder.java,calculatePrintedLength,locale,Locale,0,DEF,after.countFieldsToPrint(period, 1, $) > 0
PeriodFormatterBuilder.java,printTo,period,ReadablePeriod,0,DEF,before.countFieldsToPrint($, 1, locale) > 0
PeriodFormatterBuilder.java,printTo,before,PeriodPrinter,0,DEF,$.countFieldsToPrint(period, 1, locale) > 0
PeriodFormatterBuilder.java,printTo,locale,Locale,0,DEF,before.countFieldsToPrint(period, 1, $) > 0
PeriodFormatterBuilder.java,printTo,afterCount,int,0,DEF,$ > 0
PeriodFormatterBuilder.java,printTo,period,ReadablePeriod,0,DEF,after.countFieldsToPrint($, 1, locale) > 0
PeriodFormatterBuilder.java,printTo,after,PeriodPrinter,0,DEF,$.countFieldsToPrint(period, 1, locale) > 0
PeriodFormatterBuilder.java,printTo,locale,Locale,0,DEF,after.countFieldsToPrint(period, 1, $) > 0
PeriodFormatterBuilder.java,printTo,period,ReadablePeriod,0,DEF,before.countFieldsToPrint($, 1, locale) > 0
PeriodFormatterBuilder.java,printTo,before,PeriodPrinter,0,DEF,$.countFieldsToPrint(period, 1, locale) > 0
PeriodFormatterBuilder.java,printTo,locale,Locale,0,DEF,before.countFieldsToPrint(period, 1, $) > 0
PeriodFormatterBuilder.java,printTo,afterCount,int,0,DEF,$ > 0
PeriodFormatterBuilder.java,printTo,period,ReadablePeriod,0,DEF,after.countFieldsToPrint($, 1, locale) > 0
PeriodFormatterBuilder.java,printTo,after,PeriodPrinter,0,DEF,$.countFieldsToPrint(period, 1, locale) > 0
PeriodFormatterBuilder.java,printTo,locale,Locale,0,DEF,after.countFieldsToPrint(period, 1, $) > 0
PeriodFormatterBuilder.java,parseInto,position,int,0,RET,$ < 0
PeriodFormatterBuilder.java,parseInto,position,int,0,DEF,$ > oldPos
PeriodFormatterBuilder.java,parseInto,parsedForm,String,0,DEF,$ == null
PeriodFormatterBuilder.java,parseInto,parsedForm,String,0,DEF,$.length() == 0
PeriodFormatterBuilder.java,parseInto,position,int,0,RET,$ < 0
PeriodFormatterBuilder.java,parseInto,position,int,0,RET,$ == oldPos
PeriodFormatterBuilder.java,parseInto,position,int,0,RET,$ > oldPos
PeriodFormatterBuilder.java,Composite,printerList,List<Object>,1,DEF,$.size() <= 0
PeriodFormatterBuilder.java,Composite,parserList,List<Object>,1,DEF,$.size() <= 0
PeriodFormatterBuilder.java,parseInto,parsers,PeriodParser[],0,UnsupportedOperationException,$ == null
PeriodFormatterBuilder.java,decompose,element,null,0,DEF,$ instanceof PeriodPrinter
PeriodFormatterBuilder.java,decompose,element,null,1,DEF,$ instanceof Composite
PeriodFormatterBuilder.java,decompose,element,null,0,DEF,$ instanceof PeriodParser
PeriodFormatterBuilder.java,decompose,element,null,1,DEF,$ instanceof Composite
PeriodFormatterBuilder.java,addArrayToList,array,Object[],0,DEF,$ != null
DateTimeFormat.java,patternForStyle,locale,Locale,0,DEF,$ == null
DateTimeFormat.java,parsePatternTo,tokenLen,int,0,DEF,$ == 0
DateTimeFormat.java,parsePatternTo,tokenLen,int,1,DEF,$ == 2
DateTimeFormat.java,parsePatternTo,i,int,0,DEF,$ + 1 < length
DateTimeFormat.java,parsePatternTo,i,int,0,DEF,$ + 1 < length
DateTimeFormat.java,parsePatternTo,tokenLen,int,1,DEF,$ >= 3
DateTimeFormat.java,parsePatternTo,tokenLen,int,1,DEF,$ >= 4
DateTimeFormat.java,parsePatternTo,tokenLen,int,1,DEF,$ >= 4
DateTimeFormat.java,parsePatternTo,tokenLen,int,1,DEF,$ >= 4
DateTimeFormat.java,parsePatternTo,tokenLen,int,1,DEF,$ == 1
DateTimeFormat.java,parsePatternTo,tokenLen,int,1,DEF,$ == 2
DateTimeFormat.java,parsePatternTo,sub,String,1,DEF,$.length() == 1
DateTimeFormat.java,parseToken,c,char,1,DEF,$ >= 'A'
DateTimeFormat.java,parseToken,c,char,1,DEF,$ <= 'Z'
DateTimeFormat.java,parseToken,c,char,1,DEF,$ >= 'a'
DateTimeFormat.java,parseToken,c,char,1,DEF,$ <= 'z'
DateTimeFormat.java,parseToken,peek,char,1,DEF,$ == c
DateTimeFormat.java,parseToken,c,char,1,DEF,$ == '\''
DateTimeFormat.java,parseToken,i,int,1,DEF,$ + 1 < length
DateTimeFormat.java,parseToken,pattern,String,1,DEF,$.charAt(i + 1) == '\''
DateTimeFormat.java,parseToken,i,int,1,DEF,pattern.charAt($ + 1) == '\''
DateTimeFormat.java,parseToken,c,char,1,DEF,$ >= 'A'
DateTimeFormat.java,parseToken,c,char,1,DEF,$ <= 'Z'
DateTimeFormat.java,parseToken,c,char,1,DEF,$ >= 'a'
DateTimeFormat.java,parseToken,c,char,1,DEF,$ <= 'z'
DateTimeFormat.java,isNumericToken,tokenLen,int,0,RET,$ > 0
DateTimeFormat.java,isNumericToken,tokenLen,int,0,RET,$ <= 2
DateTimeFormat.java,createFormatterForPattern,pattern,String,0,IllegalArgumentException,$ == null
DateTimeFormat.java,createFormatterForPattern,pattern,String,0,IllegalArgumentException,$.length() == 0
DateTimeFormat.java,createFormatterForPattern,formatter,DateTimeFormatter,0,DEF,$ == null
DateTimeFormat.java,createFormatterForStyle,style,String,0,IllegalArgumentException,$ == null
DateTimeFormat.java,createFormatterForStyle,style,String,0,IllegalArgumentException,$.length() != 2
DateTimeFormat.java,createFormatterForStyle,dateStyle,int,0,IllegalArgumentException,$ == NONE
DateTimeFormat.java,createFormatterForStyle,timeStyle,int,0,IllegalArgumentException,$ == NONE
DateTimeFormat.java,createFormatterForStyleIndex,f,DateTimeFormatter,0,DEF,$ == null
DateTimeFormat.java,createFormatterForStyleIndex,dateStyle,int,1,DEF,$ == NONE
DateTimeFormat.java,createFormatterForStyleIndex,timeStyle,int,0,DEF,$ == NONE
DateTimeFormat.java,getFormatter,f,DateTimeFormatter,0,DEF,$ == null
DateTimeFormat.java,getPattern,f,DateFormat,0,IllegalArgumentException,$ instanceof SimpleDateFormat == false
DateTimeFormat.java,getPattern,f,null,0,IllegalArgumentException,$ instanceof SimpleDateFormat
DateTimeParserBucket.java,saveField,savedFieldsCount,int,0,DEF,$ == savedFields.length
DateTimeParserBucket.java,saveState,iSavedState,Object,0,DEF,$ == null
DateTimeParserBucket.java,restoreState,savedState,null,0,RET,$ instanceof SavedState
DateTimeParserBucket.java,computeMillis,count,int,0,RET,$ > 0
DateTimeParserBucket.java,computeMillis,months,DurationField,0,RET,compareReverse(first, $) >= 0
DateTimeParserBucket.java,computeMillis,first,DurationField,0,RET,compareReverse($, months) >= 0
DateTimeParserBucket.java,computeMillis,days,DurationField,0,RET,compareReverse(first, $) <= 0
DateTimeParserBucket.java,computeMillis,first,DurationField,0,RET,compareReverse($, days) <= 0
DateTimeParserBucket.java,computeMillis,text,String,0,DEF,$ != null
DateTimeParserBucket.java,computeMillis,iOffset,Integer,1,DEF,$ != null
DateTimeParserBucket.java,computeMillis,iZone,DateTimeZone,0,IllegalArgumentException,$ != null
DateTimeParserBucket.java,computeMillis,text,String,0,DEF,$ != null
DateTimeParserBucket.java,sort,high,int,1,DEF,$ > 10
DateTimeParserBucket.java,set,iText,String,1,DEF,$ == null
DateTimeParserBucket.java,compareTo,result,int,0,RET,$ != 0
DateTimeParserBucket.java,compareReverse,a,DurationField,0,RET,$ == null
DateTimeParserBucket.java,compareReverse,b,DurationField,0,RET,$ == null
DateTimeParserBucket.java,compareReverse,b,DurationField,0,RET,$ == null
PeriodFormat.java,wordBased,pf,PeriodFormatter,0,DEF,$ == null
PeriodFormatter.java,withLocale,locale,Locale,0,RET,$ != null
PeriodFormatter.java,withParseType,type,PeriodType,0,RET,$ == iParseType
PeriodFormatter.java,checkPrinter,iPrinter,PeriodPrinter,0,UnsupportedOperationException,$ == null
PeriodFormatter.java,checkPeriod,period,ReadablePeriod,0,IllegalArgumentException,$ == null
PeriodFormatter.java,parseMutablePeriod,newPos,int,1,RET,$ >= 0
PeriodFormatter.java,checkParser,iParser,PeriodParser,0,UnsupportedOperationException,$ == null
FormatUtils.java,appendPaddedInteger,value,int,0,RET,$ < 0
FormatUtils.java,appendPaddedInteger,value,int,1,DEF,$ != Integer.MIN_VALUE
FormatUtils.java,appendPaddedInteger,value,int,1,DEF,$ < 10
FormatUtils.java,appendPaddedInteger,value,int,1,DEF,$ < 100
FormatUtils.java,appendPaddedInteger,value,int,1,DEF,$ < 1000
FormatUtils.java,appendPaddedInteger,value,int,1,DEF,$ < 10000
FormatUtils.java,appendPaddedInteger,intValue,int,1,DEF,$ == value
FormatUtils.java,appendPaddedInteger,size,int,1,DEF,$ <= 19
FormatUtils.java,appendPaddedInteger,value,long,0,RET,$ < 0
FormatUtils.java,appendPaddedInteger,value,long,1,DEF,$ != Long.MIN_VALUE
FormatUtils.java,writePaddedInteger,value,int,0,RET,$ < 0
FormatUtils.java,writePaddedInteger,value,int,1,DEF,$ != Integer.MIN_VALUE
FormatUtils.java,writePaddedInteger,value,int,1,DEF,$ < 10
FormatUtils.java,writePaddedInteger,value,int,1,DEF,$ < 100
FormatUtils.java,writePaddedInteger,value,int,1,DEF,$ < 1000
FormatUtils.java,writePaddedInteger,value,int,1,DEF,$ < 10000
FormatUtils.java,writePaddedInteger,intValue,int,1,DEF,$ == value
FormatUtils.java,writePaddedInteger,size,int,1,DEF,$ <= 19
FormatUtils.java,writePaddedInteger,value,long,0,RET,$ < 0
FormatUtils.java,writePaddedInteger,value,long,1,DEF,$ != Long.MIN_VALUE
FormatUtils.java,appendUnpaddedInteger,value,int,0,RET,$ < 0
FormatUtils.java,appendUnpaddedInteger,value,int,1,DEF,$ != Integer.MIN_VALUE
FormatUtils.java,appendUnpaddedInteger,value,int,1,DEF,$ < 10
FormatUtils.java,appendUnpaddedInteger,value,int,1,DEF,$ < 100
FormatUtils.java,appendUnpaddedInteger,intValue,int,1,DEF,$ == value
FormatUtils.java,writeUnpaddedInteger,value,int,0,RET,$ < 0
FormatUtils.java,writeUnpaddedInteger,value,int,1,DEF,$ != Integer.MIN_VALUE
FormatUtils.java,writeUnpaddedInteger,value,int,1,DEF,$ < 10
FormatUtils.java,writeUnpaddedInteger,value,int,1,DEF,$ < 100
FormatUtils.java,writeUnpaddedInteger,intValue,int,1,DEF,$ == value
FormatUtils.java,calculateDigitCount,value,long,0,RET,$ < 0
FormatUtils.java,calculateDigitCount,value,long,1,RET,$ != Long.MIN_VALUE
FormatUtils.java,createErrorMessage,errorPos,int,0,RET,$ <= 0
ISODateTimeFormat.java,forFields,fields,Collection<DateTimeFieldType>,0,IllegalArgumentException,$ == null
ISODateTimeFormat.java,forFields,fields,Collection<DateTimeFieldType>,0,IllegalArgumentException,$.size() == 0
ISODateTimeFormat.java,forFields,bld,DateTimeFormatterBuilder,0,IllegalArgumentException,$.canBuildFormatter() == false
ISODateTimeFormat.java,dateParser,dp,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,localDateParser,ldp,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,dateElementParser,dpe,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,timeParser,tp,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,localTimeParser,ltp,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,timeElementParser,tpe,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,dateTimeParser,dtp,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,dateOptionalTimeParser,dotp,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,localDateOptionalTimeParser,ldotp,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,time,t,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,timeNoMillis,tx,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,tTime,tt,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,tTimeNoMillis,ttx,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,dateTime,dt,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,dateTimeNoMillis,dtx,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,ordinalDate,od,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,ordinalDateTime,odt,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,ordinalDateTimeNoMillis,odtx,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,weekDateTime,wdt,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,weekDateTimeNoMillis,wdtx,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,basicDate,bd,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,basicTime,bt,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,basicTimeNoMillis,btx,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,basicTTime,btt,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,basicTTimeNoMillis,bttx,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,basicDateTime,bdt,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,basicDateTimeNoMillis,bdtx,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,basicOrdinalDate,bod,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,basicOrdinalDateTime,bodt,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,basicOrdinalDateTimeNoMillis,bodtx,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,basicWeekDate,bwd,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,basicWeekDateTime,bwdt,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,basicWeekDateTimeNoMillis,bwdtx,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,yearMonth,ym,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,yearMonthDay,ymd,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,weekyearWeek,ww,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,weekyearWeekDay,wwd,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,hourMinute,hm,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,hourMinuteSecond,hms,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,hourMinuteSecondMillis,hmsl,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,hourMinuteSecondFraction,hmsf,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,dateHour,dh,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,dateHourMinute,dhm,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,dateHourMinuteSecond,dhms,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,dateHourMinuteSecondMillis,dhmsl,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,dateHourMinuteSecondFraction,dhmsf,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,yearElement,ye,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,monthElement,mye,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,dayOfMonthElement,dme,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,weekyearElement,we,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,weekElement,wwe,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,dayOfWeekElement,dwe,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,dayOfYearElement,dye,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,literalTElement,lte,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,hourElement,hde,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,minuteElement,mhe,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,secondElement,sme,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,fractionElement,fse,DateTimeFormatter,0,DEF,$ == null
ISODateTimeFormat.java,offsetElement,ze,DateTimeFormatter,0,DEF,$ == null
DateMidnight.java,now,zone,DateTimeZone,0,NullPointerException,$ == null
DateMidnight.java,now,chronology,Chronology,0,NullPointerException,$ == null
DateMidnight.java,withZoneRetainFields,newZone,DateTimeZone,0,RET,$ == originalZone
DateMidnight.java,withFields,partial,ReadablePartial,0,RET,$ == null
DateMidnight.java,withField,fieldType,DateTimeFieldType,0,IllegalArgumentException,$ == null
DateMidnight.java,withFieldAdded,fieldType,DurationFieldType,0,IllegalArgumentException,$ == null
DateMidnight.java,withFieldAdded,amount,int,0,RET,$ == 0
DateMidnight.java,withDurationAdded,durationToAdd,long,0,RET,$ == 0
DateMidnight.java,withDurationAdded,scalar,int,0,RET,$ == 0
DateMidnight.java,withDurationAdded,durationToAdd,ReadableDuration,0,RET,$ == null
DateMidnight.java,withDurationAdded,scalar,int,0,RET,$ == 0
DateMidnight.java,withPeriodAdded,period,ReadablePeriod,0,RET,$ == null
DateMidnight.java,withPeriodAdded,scalar,int,0,RET,$ == 0
DateMidnight.java,plusYears,years,int,0,RET,$ == 0
DateMidnight.java,plusMonths,months,int,0,RET,$ == 0
DateMidnight.java,plusWeeks,weeks,int,0,RET,$ == 0
DateMidnight.java,plusDays,days,int,0,RET,$ == 0
DateMidnight.java,minusYears,years,int,0,RET,$ == 0
DateMidnight.java,minusMonths,months,int,0,RET,$ == 0
DateMidnight.java,minusWeeks,weeks,int,0,RET,$ == 0
DateMidnight.java,minusDays,days,int,0,RET,$ == 0
DateMidnight.java,property,type,DateTimeFieldType,0,IllegalArgumentException,$ == null
DateMidnight.java,property,field,DateTimeField,0,IllegalArgumentException,$.isSupported() == false
Partial.java,Partial,type,DateTimeFieldType,0,IllegalArgumentException,$ == null
Partial.java,Partial,types,DateTimeFieldType[],0,IllegalArgumentException,$ == null
Partial.java,Partial,values,int[],0,IllegalArgumentException,$ == null
Partial.java,Partial,values,int[],0,IllegalArgumentException,$.length != types.length
Partial.java,Partial,types,DateTimeFieldType[],0,RET,$.length == 0
Partial.java,Partial,types,DateTimeFieldType[],0,IllegalArgumentException,$[i] == null
Partial.java,Partial,i,int,0,IllegalArgumentException,types[$] == null
Partial.java,Partial,i,int,0,IllegalArgumentException,$ > 0
Partial.java,Partial,compare,int,1,IllegalArgumentException,$ < 0
Partial.java,Partial,compare,int,1,IllegalArgumentException,$ != 0
Partial.java,Partial,loopUnitField,DurationField,1,IllegalArgumentException,$.isSupported() == false
Partial.java,Partial,compare,int,0,IllegalArgumentException,$ == 0
Partial.java,Partial,types,DateTimeFieldType[],1,IllegalArgumentException,$[i - 1].getRangeDurationType() == null
Partial.java,Partial,i,int,1,IllegalArgumentException,types[$ - 1].getRangeDurationType() == null
Partial.java,Partial,loopType,DateTimeFieldType,0,IllegalArgumentException,$.getRangeDurationType() == null
Partial.java,Partial,loopType,DateTimeFieldType,0,IllegalArgumentException,$.getRangeDurationType() == null
Partial.java,Partial,lastRangeField,DurationField,0,IllegalArgumentException,$.compareTo(loopRangeField) < 0
Partial.java,Partial,loopRangeField,DurationField,0,IllegalArgumentException,lastRangeField.compareTo($) < 0
Partial.java,Partial,lastRangeField,DurationField,0,IllegalArgumentException,$.compareTo(loopRangeField) == 0
Partial.java,Partial,loopRangeField,DurationField,0,IllegalArgumentException,lastRangeField.compareTo($) == 0
Partial.java,Partial,partial,ReadablePartial,0,IllegalArgumentException,$ == null
Partial.java,with,fieldType,DateTimeFieldType,0,IllegalArgumentException,$ == null
Partial.java,with,index,int,0,RET,$ == -1
Partial.java,with,compare,int,1,DEF,$ > 0
Partial.java,with,compare,int,0,DEF,$ == 0
Partial.java,with,loopRangeField,DurationField,0,DEF,rangeField.compareTo($) > 0
Partial.java,with,rangeField,DurationField,0,DEF,$.compareTo(loopRangeField) > 0
Partial.java,without,index,int,0,RET,$ != -1
Partial.java,withFieldAdded,amount,int,0,RET,$ == 0
Partial.java,withFieldAddWrapped,amount,int,0,RET,$ == 0
Partial.java,withPeriodAdded,period,ReadablePeriod,0,RET,$ == null
Partial.java,withPeriodAdded,scalar,int,0,RET,$ == 0
Partial.java,withPeriodAdded,index,int,0,DEF,$ >= 0
Partial.java,isMatch,partial,ReadablePartial,0,IllegalArgumentException,$ == null
Partial.java,getFormatter,f,DateTimeFormatter[],0,RET,$ == null
Partial.java,getFormatter,list,List<DateTimeFieldType>,0,DEF,$.size() == 0
Partial.java,toString,f,DateTimeFormatter[],0,RET,$ == null
Partial.java,toString,f,DateTimeFormatter[],0,RET,$ == null
Partial.java,toString,f1,DateTimeFormatter,0,RET,$ == null
Partial.java,toStringList,i,int,0,DEF,$ > 0
Partial.java,toString,pattern,String,0,RET,$ == null
Partial.java,toString,pattern,String,0,RET,$ == null
ISOYearOfEraDateTimeField.java,set,instant,long,0,DEF,getWrappedField().get($) < 0
IslamicChronology.java,getInstance,zone,DateTimeZone,0,DEF,$ == null
IslamicChronology.java,getInstance,chronos,IslamicChronology[],0,DEF,$ == null
IslamicChronology.java,getInstance,chrono,IslamicChronology,0,DEF,$ == null
IslamicChronology.java,getInstance,zone,DateTimeZone,1,DEF,$ == DateTimeZone.UTC
IslamicChronology.java,withZone,zone,DateTimeZone,0,DEF,$ == null
IslamicChronology.java,setYear,dayOfYear,int,0,DEF,$ > 354
IslamicChronology.java,getYearDifference,minuendRem,long,0,DEF,$ < subtrahendRem
IslamicChronology.java,getTotalMillisByYearMonth,month,int,1,RET,--$ % 2 == 1
IslamicChronology.java,getDayOfMonth,doy,int,0,RET,$ == 354
IslamicChronology.java,getDaysInYearMonth,month,int,0,RET,$ == 12
IslamicChronology.java,getDaysInMonthMax,month,int,0,RET,$ == 12
IslamicChronology.java,getMonthOfYear,doyZeroBased,int,0,RET,$ == 354
IslamicChronology.java,calculateFirstDayOfYearMillis,year,int,0,ArithmeticException,$ > MAX_YEAR
IslamicChronology.java,calculateFirstDayOfYearMillis,year,int,0,ArithmeticException,$ < MIN_YEAR
GJYearOfEraDateTimeField.java,get,year,int,0,DEF,$ <= 0
GJYearOfEraDateTimeField.java,set,iChronology,BasicChronology,0,DEF,$.getYear(instant) <= 0
GJYearOfEraDateTimeField.java,set,instant,long,0,DEF,iChronology.getYear($) <= 0
BasicMonthOfYearDateTimeField.java,add,months,int,0,RET,$ == 0
BasicMonthOfYearDateTimeField.java,add,monthToUse,int,1,DEF,$ >= 0
BasicMonthOfYearDateTimeField.java,add,remMonthToUse,int,0,DEF,$ == 0
BasicMonthOfYearDateTimeField.java,add,monthToUse,int,0,DEF,$ == 1
BasicMonthOfYearDateTimeField.java,add,dayToUse,int,0,DEF,$ > maxDay
BasicMonthOfYearDateTimeField.java,add,i_months,int,0,RET,$ == months
BasicMonthOfYearDateTimeField.java,add,monthToUse,long,1,DEF,$ >= 0
BasicMonthOfYearDateTimeField.java,add,remMonthToUse,int,0,DEF,$ == 0
BasicMonthOfYearDateTimeField.java,add,monthToUse,long,0,DEF,$ == 1
BasicMonthOfYearDateTimeField.java,add,dayToUse,int,0,DEF,$ > maxDay
BasicMonthOfYearDateTimeField.java,add,valueToAdd,int,0,RET,$ == 0
BasicMonthOfYearDateTimeField.java,getDifferenceAsLong,minuendInstant,long,0,RET,$ < subtrahendInstant
BasicMonthOfYearDateTimeField.java,getDifferenceAsLong,subtrahendDom,int,0,DEF,$ > minuendDom
BasicMonthOfYearDateTimeField.java,getDifferenceAsLong,minuendRem,long,0,DEF,$ < subtrahendRem
BasicMonthOfYearDateTimeField.java,set,thisDom,int,0,DEF,$ > maxDom
BasicChronology.java,BasicChronology,minDaysInFirstWeek,int,0,IllegalArgumentException,$ < 1
BasicChronology.java,BasicChronology,minDaysInFirstWeek,int,0,IllegalArgumentException,$ > 7
BasicChronology.java,getZone,base,Chronology,0,RET,($ = getBase()) != null
BasicChronology.java,getDateTimeMillis,base,Chronology,0,RET,($ = getBase()) != null
BasicChronology.java,getDateTimeMillis,base,Chronology,0,RET,($ = getBase()) != null
BasicChronology.java,toString,index,int,0,DEF,$ >= 0
BasicChronology.java,toString,zone,DateTimeZone,0,DEF,$ != null
BasicChronology.java,getYear,i2,long,0,DEF,$ < 0
BasicChronology.java,getYear,diff,long,1,DEF,$ < 0
BasicChronology.java,getYear,yearStart,long,0,DEF,$ <= instant
BasicChronology.java,getWeekyear,week,int,1,RET,$ == 1
BasicChronology.java,getWeekyear,week,int,1,RET,$ > 51
BasicChronology.java,getWeekOfWeekyear,instant,long,0,RET,$ < firstWeekMillis1
BasicChronology.java,getWeekOfWeekyear,instant,long,0,RET,$ >= firstWeekMillis2
BasicChronology.java,getDayOfWeek,instant,long,1,DEF,$ >= 0
BasicChronology.java,getDayOfWeek,daysSince19700101,long,0,RET,$ < -3
BasicChronology.java,getMillisOfDay,instant,long,1,RET,$ >= 0
BasicChronology.java,getYearInfo,info,YearInfo,0,DEF,$ == null
BasicChronology.java,getYearInfo,info,YearInfo,0,DEF,$.iYear != year
BasicSingleEraDateTimeField.java,set,iEraText,String,0,IllegalFieldValueException,$.equals(text) == false
BasicSingleEraDateTimeField.java,set,text,String,0,IllegalFieldValueException,iEraText.equals($) == false
BasicSingleEraDateTimeField.java,set,text,String,0,IllegalFieldValueException,1".equals($) == false"
BasicYearDateTimeField.java,add,years,int,0,RET,$ == 0
BasicYearDateTimeField.java,addWrapField,years,int,0,RET,$ == 0
BasicYearDateTimeField.java,getDifferenceAsLong,minuendInstant,long,0,RET,$ < subtrahendInstant
BasicYearDateTimeField.java,roundCeiling,instant,long,0,DEF,$ != yearStartMillis
GJLocaleSymbols.java,forLocale,locale,Locale,0,DEF,$ == null
GJLocaleSymbols.java,forLocale,symbols,GJLocaleSymbols,0,RET,$ != null
GJLocaleSymbols.java,forLocale,symbols,GJLocaleSymbols,0,RET,$.iLocale.get() == locale
GJLocaleSymbols.java,forLocale,symbols,GJLocaleSymbols,0,DEF,$ == null
GJLocaleSymbols.java,addSymbols,symbol,String,0,DEF,$ != null
GJLocaleSymbols.java,maxLength,s,String,0,DEF,$ != null
GJLocaleSymbols.java,maxLength,len,int,0,DEF,$ > max
GJLocaleSymbols.java,eraTextToValue,era,Integer,0,RET,$ != null
GJLocaleSymbols.java,monthOfYearTextToValue,month,Integer,0,RET,$ != null
GJLocaleSymbols.java,dayOfWeekTextToValue,day,Integer,0,RET,$ != null
GregorianChronology.java,getInstance,zone,DateTimeZone,0,DEF,$ == null
GregorianChronology.java,getInstance,chronos,GregorianChronology[],0,DEF,$ == null
GregorianChronology.java,getInstance,chrono,GregorianChronology,0,DEF,$ == null
GregorianChronology.java,getInstance,zone,DateTimeZone,1,DEF,$ == DateTimeZone.UTC
GregorianChronology.java,withZone,zone,DateTimeZone,0,DEF,$ == null
GregorianChronology.java,calculateFirstDayOfYearMillis,year,int,1,DEF,$ < 0
LenientChronology.java,getInstance,base,Chronology,0,IllegalArgumentException,$ == null
LenientChronology.java,withUTC,iWithUTC,Chronology,0,DEF,$ == null
LenientChronology.java,withZone,zone,DateTimeZone,0,DEF,$ == null
LenientChronology.java,withZone,zone,DateTimeZone,0,RET,$ == DateTimeZone.UTC
LenientChronology.java,equals,obj,Object,0,RET,$ instanceof LenientChronology == false
LenientChronology.java,equals,obj,null,0,RET,$ instanceof LenientChronology
BuddhistChronology.java,getInstance,zone,DateTimeZone,0,DEF,$ == null
BuddhistChronology.java,getInstance,chrono,BuddhistChronology,0,DEF,$ == null
BuddhistChronology.java,withZone,zone,DateTimeZone,0,DEF,$ == null
BuddhistChronology.java,toString,zone,DateTimeZone,0,DEF,$ != null
LimitChronology.java,getInstance,base,Chronology,0,IllegalArgumentException,$ == null
LimitChronology.java,getInstance,lowerLimit,ReadableDateTime,0,IllegalArgumentException,$ != null
LimitChronology.java,getInstance,upperLimit,ReadableDateTime,0,IllegalArgumentException,$ != null
LimitChronology.java,withZone,zone,DateTimeZone,0,DEF,$ == null
LimitChronology.java,withZone,zone,DateTimeZone,0,RET,$ == DateTimeZone.UTC
LimitChronology.java,withZone,iWithUTC,LimitChronology,0,RET,$ != null
LimitChronology.java,withZone,lowerLimit,DateTime,0,DEF,$ != null
LimitChronology.java,withZone,upperLimit,DateTime,0,DEF,$ != null
LimitChronology.java,withZone,zone,DateTimeZone,0,DEF,$ == DateTimeZone.UTC
LimitChronology.java,convertField,field,DurationField,0,RET,$ == null
LimitChronology.java,convertField,field,DateTimeField,0,RET,$ == null
LimitChronology.java,checkLimits,iLowerLimit,DateTime,0,LimitException,(limit = $) != null
LimitChronology.java,checkLimits,limit,DateTime,0,LimitException,($ = iLowerLimit) != null
LimitChronology.java,checkLimits,iUpperLimit,DateTime,0,LimitException,(limit = $) != null
LimitChronology.java,checkLimits,limit,DateTime,0,LimitException,($ = iUpperLimit) != null
LimitChronology.java,equals,obj,Object,0,RET,$ instanceof LimitChronology == false
LimitChronology.java,equals,obj,null,0,RET,$ instanceof LimitChronology
LimitChronology.java,getMessage,desc,String,0,DEF,$ != null
BaseChronology.java,get,startInstant,long,0,DEF,$ != endInstant
BaseChronology.java,get,duration,long,0,DEF,$ != 0
BaseChronology.java,add,scalar,int,0,DEF,$ != 0
BaseChronology.java,add,period,ReadablePeriod,0,DEF,$ != null
BaseChronology.java,add,value,long,0,DEF,$ != 0
BaseChronology.java,add,duration,long,0,RET,$ == 0
BaseChronology.java,add,scalar,int,0,RET,$ == 0
ISOChronology.java,getInstance,zone,DateTimeZone,0,DEF,$ == null
ISOChronology.java,getInstance,chrono,ISOChronology,0,RET,$ != null
ISOChronology.java,getInstance,chrono,ISOChronology,0,RET,$.getZone() == zone
ISOChronology.java,getInstance,chrono,ISOChronology,0,DEF,$ == null
ISOChronology.java,withZone,zone,DateTimeZone,0,DEF,$ == null
ISOChronology.java,toString,zone,DateTimeZone,0,DEF,$ != null
BasicGJChronology.java,getYearDifference,subtrahendRem,long,0,DEF,$ >= FEB_29
BasicGJChronology.java,getYearDifference,minuendRem,long,0,DEF,$ >= FEB_29
BasicGJChronology.java,getYearDifference,minuendRem,long,0,DEF,$ < subtrahendRem
ZonedChronology.java,getInstance,base,Chronology,0,IllegalArgumentException,$ == null
ZonedChronology.java,getInstance,base,Chronology,0,IllegalArgumentException,$ == null
ZonedChronology.java,getInstance,zone,DateTimeZone,0,IllegalArgumentException,$ == null
ZonedChronology.java,withZone,zone,DateTimeZone,0,DEF,$ == null
ZonedChronology.java,withZone,zone,DateTimeZone,0,RET,$ == DateTimeZone.UTC
ZonedChronology.java,convertField,field,DurationField,0,RET,$ == null
ZonedChronology.java,convertField,field,DateTimeField,0,RET,$ == null
ZonedChronology.java,equals,obj,Object,0,RET,$ instanceof ZonedChronology == false
ZonedChronology.java,equals,obj,null,0,RET,$ instanceof ZonedChronology
ZonedChronology.java,getOffsetToAdd,sum,long,0,ArithmeticException,(instant ^ $) < 0
ZonedChronology.java,getOffsetToAdd,instant,long,0,ArithmeticException,($ ^ sum) < 0
ZonedChronology.java,getOffsetToAdd,offset,int,0,ArithmeticException,(instant ^ $) >= 0
ZonedChronology.java,getOffsetToAdd,instant,long,0,ArithmeticException,($ ^ offset) >= 0
ZonedChronology.java,getOffsetFromLocalToSubtract,diff,long,0,ArithmeticException,(instant ^ $) < 0
ZonedChronology.java,getOffsetFromLocalToSubtract,instant,long,0,ArithmeticException,($ ^ diff) < 0
ZonedChronology.java,getOffsetFromLocalToSubtract,offset,int,0,ArithmeticException,(instant ^ $) < 0
ZonedChronology.java,getOffsetFromLocalToSubtract,instant,long,0,ArithmeticException,($ ^ offset) < 0
ZonedChronology.java,set,result,long,0,Instant,get($) != value
ZonedChronology.java,getOffsetToAdd,sum,long,0,ArithmeticException,(instant ^ $) < 0
ZonedChronology.java,getOffsetToAdd,instant,long,0,ArithmeticException,($ ^ sum) < 0
ZonedChronology.java,getOffsetToAdd,offset,int,0,ArithmeticException,(instant ^ $) >= 0
ZonedChronology.java,getOffsetToAdd,instant,long,0,ArithmeticException,($ ^ offset) >= 0
GJChronology.java,getInstance,gregorianCutover,ReadableInstant,1,DEF,$ == null
GJChronology.java,getInstance,chronos,ArrayList<GJChronology>,1,DEF,$ == null
GJChronology.java,getInstance,zone,DateTimeZone,1,DEF,$ == DateTimeZone.UTC
GJChronology.java,getZone,base,Chronology,0,RET,($ = getBase()) != null
GJChronology.java,withZone,zone,DateTimeZone,0,DEF,$ == null
GJChronology.java,getDateTimeMillis,base,Chronology,0,RET,($ = getBase()) != null
GJChronology.java,getDateTimeMillis,instant,long,0,IllegalArgumentException,$ < iCutoverMillis
GJChronology.java,getDateTimeMillis,instant,long,0,IllegalArgumentException,$ >= iCutoverMillis
GJChronology.java,getDateTimeMillis,base,Chronology,0,RET,($ = getBase()) != null
GJChronology.java,getDateTimeMillis,monthOfYear,int,0,DEF,$ != 2
GJChronology.java,getDateTimeMillis,dayOfMonth,int,0,DEF,$ != 29
GJChronology.java,getDateTimeMillis,instant,long,0,DEF,$ >= iCutoverMillis
GJChronology.java,getDateTimeMillis,instant,long,0,IllegalArgumentException,$ < iCutoverMillis
GJChronology.java,getDateTimeMillis,instant,long,0,IllegalArgumentException,$ >= iCutoverMillis
GJChronology.java,toString,iCutoverMillis,long,1,DEF,withUTC().dayOfYear().remainder($) == 0
GJChronology.java,assemble,iCutoverMillis,long,0,DEF,gregorian.millisOfDay().get($) == 0
GJChronology.java,assemble,gregorian,GregorianChronology,0,DEF,$.millisOfDay().get(iCutoverMillis) == 0
GJChronology.java,CutoverField,rangeField,DurationField,0,DEF,$ == null
GJChronology.java,get,instant,long,1,RET,$ >= iCutover
GJChronology.java,getAsText,instant,long,1,RET,$ >= iCutover
GJChronology.java,getAsShortText,instant,long,1,RET,$ >= iCutover
GJChronology.java,add,valueToAdd,int,0,RET,$ == 0
GJChronology.java,set,instant,long,1,IllegalFieldValueException,$ >= iCutover
GJChronology.java,set,instant,long,0,IllegalFieldValueException,$ < iCutover
GJChronology.java,set,iGapDuration,long,0,DEF,instant + $ < iCutover
GJChronology.java,set,instant,long,0,DEF,$ + iGapDuration < iCutover
GJChronology.java,set,instant,long,0,IllegalFieldValueException,get($) != value
GJChronology.java,set,instant,long,0,IllegalFieldValueException,$ >= iCutover
GJChronology.java,set,iGapDuration,long,0,DEF,instant - $ >= iCutover
GJChronology.java,set,instant,long,0,DEF,$ - iGapDuration >= iCutover
GJChronology.java,set,instant,long,0,IllegalFieldValueException,get($) != value
GJChronology.java,set,instant,long,1,DEF,$ >= iCutover
GJChronology.java,set,instant,long,0,DEF,$ < iCutover
GJChronology.java,set,iGapDuration,long,0,DEF,instant + $ < iCutover
GJChronology.java,set,instant,long,0,DEF,$ + iGapDuration < iCutover
GJChronology.java,set,instant,long,0,DEF,$ >= iCutover
GJChronology.java,set,iGapDuration,long,0,DEF,instant - $ >= iCutover
GJChronology.java,set,instant,long,0,DEF,$ - iGapDuration >= iCutover
GJChronology.java,isLeap,instant,long,1,RET,$ >= iCutover
GJChronology.java,getLeapAmount,instant,long,1,RET,$ >= iCutover
GJChronology.java,getMinimumValue,instant,long,0,RET,$ < iCutover
GJChronology.java,getMinimumValue,instant,long,0,DEF,$ < iCutover
GJChronology.java,getMaximumValue,instant,long,0,RET,$ >= iCutover
GJChronology.java,getMaximumValue,instant,long,0,DEF,$ >= iCutover
GJChronology.java,roundFloor,instant,long,1,DEF,$ >= iCutover
GJChronology.java,roundFloor,instant,long,0,DEF,$ < iCutover
GJChronology.java,roundFloor,iGapDuration,long,0,DEF,instant + $ < iCutover
GJChronology.java,roundFloor,instant,long,0,DEF,$ + iGapDuration < iCutover
GJChronology.java,roundCeiling,instant,long,1,DEF,$ >= iCutover
GJChronology.java,roundCeiling,instant,long,0,DEF,$ >= iCutover
GJChronology.java,roundCeiling,iGapDuration,long,0,DEF,instant - $ >= iCutover
GJChronology.java,roundCeiling,instant,long,0,DEF,$ - iGapDuration >= iCutover
GJChronology.java,ImpreciseCutoverField,durationField,DurationField,0,DEF,$ == null
GJChronology.java,add,instant,long,1,DEF,$ >= iCutover
GJChronology.java,add,instant,long,0,DEF,$ < iCutover
GJChronology.java,add,iGapDuration,long,0,DEF,instant + $ < iCutover
GJChronology.java,add,instant,long,0,DEF,$ + iGapDuration < iCutover
GJChronology.java,add,instant,long,0,DEF,$ >= iCutover
GJChronology.java,add,iGapDuration,long,0,DEF,instant - $ >= iCutover
GJChronology.java,add,instant,long,0,DEF,$ - iGapDuration >= iCutover
GJChronology.java,add,instant,long,1,DEF,$ >= iCutover
GJChronology.java,add,instant,long,0,DEF,$ < iCutover
GJChronology.java,add,iGapDuration,long,0,DEF,instant + $ < iCutover
GJChronology.java,add,instant,long,0,DEF,$ + iGapDuration < iCutover
GJChronology.java,add,instant,long,0,DEF,$ >= iCutover
GJChronology.java,add,iGapDuration,long,0,DEF,instant - $ >= iCutover
GJChronology.java,add,instant,long,0,DEF,$ - iGapDuration >= iCutover
GJChronology.java,getDifference,minuendInstant,long,1,RET,$ >= iCutover
GJChronology.java,getDifference,subtrahendInstant,long,0,RET,$ >= iCutover
GJChronology.java,getDifference,subtrahendInstant,long,0,RET,$ < iCutover
GJChronology.java,getDifferenceAsLong,minuendInstant,long,1,RET,$ >= iCutover
GJChronology.java,getDifferenceAsLong,subtrahendInstant,long,0,RET,$ >= iCutover
GJChronology.java,getDifferenceAsLong,subtrahendInstant,long,0,RET,$ < iCutover
GJChronology.java,getMinimumValue,instant,long,1,RET,$ >= iCutover
GJChronology.java,getMaximumValue,instant,long,1,RET,$ >= iCutover
JulianChronology.java,adjustYearForSet,year,int,0,IllegalFieldValueException,$ <= 0
JulianChronology.java,adjustYearForSet,year,int,0,IllegalFieldValueException,$ == 0
JulianChronology.java,getInstance,zone,DateTimeZone,0,DEF,$ == null
JulianChronology.java,getInstance,chronos,JulianChronology[],0,DEF,$ == null
JulianChronology.java,getInstance,chrono,JulianChronology,0,DEF,$ == null
JulianChronology.java,getInstance,zone,DateTimeZone,1,DEF,$ == DateTimeZone.UTC
JulianChronology.java,withZone,zone,DateTimeZone,0,DEF,$ == null
JulianChronology.java,calculateFirstDayOfYearMillis,relativeYear,int,1,DEF,$ <= 0
EthiopicChronology.java,getInstance,zone,DateTimeZone,0,DEF,$ == null
EthiopicChronology.java,getInstance,chronos,EthiopicChronology[],0,DEF,$ == null
EthiopicChronology.java,getInstance,chrono,EthiopicChronology,0,DEF,$ == null
EthiopicChronology.java,getInstance,zone,DateTimeZone,1,DEF,$ == DateTimeZone.UTC
EthiopicChronology.java,withZone,zone,DateTimeZone,0,DEF,$ == null
EthiopicChronology.java,calculateFirstDayOfYearMillis,relativeYear,int,1,DEF,$ <= 0
GJEraDateTimeField.java,get,iChronology,BasicChronology,1,RET,$.getYear(instant) <= 0
GJEraDateTimeField.java,get,instant,long,1,RET,iChronology.getYear($) <= 0
GJEraDateTimeField.java,set,oldEra,int,1,RET,$ != era
GJEraDateTimeField.java,roundFloor,instant,long,1,RET,get($) == DateTimeConstants.CE
GJEraDateTimeField.java,roundCeiling,instant,long,1,RET,get($) == DateTimeConstants.BCE
BasicWeekyearDateTimeField.java,add,years,int,0,RET,$ == 0
BasicWeekyearDateTimeField.java,getDifferenceAsLong,minuendInstant,long,0,RET,$ < subtrahendInstant
BasicWeekyearDateTimeField.java,getDifferenceAsLong,subtrahendRem,long,0,DEF,$ >= WEEK_53
BasicWeekyearDateTimeField.java,getDifferenceAsLong,iChronology,BasicChronology,0,DEF,$.getWeeksInYear(minuendWeekyear) <= 52
BasicWeekyearDateTimeField.java,getDifferenceAsLong,minuendWeekyear,int,0,DEF,iChronology.getWeeksInYear($) <= 52
BasicWeekyearDateTimeField.java,getDifferenceAsLong,minuendRem,long,0,DEF,$ < subtrahendRem
BasicWeekyearDateTimeField.java,set,thisWeekyear,int,0,RET,$ == year
BasicWeekyearDateTimeField.java,set,setToWeek,int,0,DEF,$ > maxOutWeeks
BasicWeekyearDateTimeField.java,set,workWoyYear,int,1,DEF,$ < year
BasicWeekyearDateTimeField.java,set,workWoyYear,int,0,DEF,$ > year
BasicWeekyearDateTimeField.java,roundFloor,wow,int,0,DEF,$ > 1
StrictChronology.java,getInstance,base,Chronology,0,IllegalArgumentException,$ == null
StrictChronology.java,withUTC,iWithUTC,Chronology,0,DEF,$ == null
StrictChronology.java,withZone,zone,DateTimeZone,0,DEF,$ == null
StrictChronology.java,withZone,zone,DateTimeZone,0,RET,$ == DateTimeZone.UTC
StrictChronology.java,equals,obj,Object,0,RET,$ instanceof StrictChronology == false
StrictChronology.java,equals,obj,null,0,RET,$ instanceof StrictChronology
BasicFixedMonthChronology.java,setYear,dayOfYear,int,0,DEF,$ > 365
BasicFixedMonthChronology.java,getYearDifference,minuendRem,long,0,DEF,$ < subtrahendRem
AssembledChronology.java,getZone,iBase,Chronology,0,RET,(base = $) != null
AssembledChronology.java,getZone,base,Chronology,0,RET,($ = iBase) != null
AssembledChronology.java,getDateTimeMillis,iBase,Chronology,0,RET,(base = $) != null
AssembledChronology.java,getDateTimeMillis,base,Chronology,0,RET,($ = iBase) != null
AssembledChronology.java,getDateTimeMillis,iBaseFlags,int,0,RET,($ & 6) == 6
AssembledChronology.java,getDateTimeMillis,iBase,Chronology,0,RET,(base = $) != null
AssembledChronology.java,getDateTimeMillis,base,Chronology,0,RET,($ = iBase) != null
AssembledChronology.java,getDateTimeMillis,iBaseFlags,int,0,RET,($ & 5) == 5
AssembledChronology.java,getDateTimeMillis,iBase,Chronology,0,RET,(base = $) != null
AssembledChronology.java,getDateTimeMillis,base,Chronology,0,RET,($ = iBase) != null
AssembledChronology.java,getDateTimeMillis,iBaseFlags,int,0,RET,($ & 1) == 1
AssembledChronology.java,setFields,iBase,Chronology,0,DEF,$ != null
AssembledChronology.java,setFields,iBase,Chronology,1,DEF,$ == null
CopticChronology.java,getInstance,zone,DateTimeZone,0,DEF,$ == null
CopticChronology.java,getInstance,chronos,CopticChronology[],0,DEF,$ == null
CopticChronology.java,getInstance,chrono,CopticChronology,0,DEF,$ == null
CopticChronology.java,getInstance,zone,DateTimeZone,1,DEF,$ == DateTimeZone.UTC
CopticChronology.java,withZone,zone,DateTimeZone,0,DEF,$ == null
CopticChronology.java,calculateFirstDayOfYearMillis,relativeYear,int,1,DEF,$ <= 0
Period.java,fieldDifference,start,ReadablePartial,0,IllegalArgumentException,$ == null
Period.java,fieldDifference,end,ReadablePartial,0,IllegalArgumentException,$ == null
Period.java,fieldDifference,i,int,0,IllegalArgumentException,$ > 0
Period.java,withFields,period,ReadablePeriod,0,RET,$ == null
Period.java,withField,field,DurationFieldType,0,IllegalArgumentException,$ == null
Period.java,withFieldAdded,field,DurationFieldType,0,IllegalArgumentException,$ == null
Period.java,withFieldAdded,value,int,0,RET,$ == 0
Period.java,plus,period,ReadablePeriod,0,RET,$ == null
Period.java,plusYears,years,int,0,RET,$ == 0
Period.java,plusMonths,months,int,0,RET,$ == 0
Period.java,plusWeeks,weeks,int,0,RET,$ == 0
Period.java,plusDays,days,int,0,RET,$ == 0
Period.java,plusHours,hours,int,0,RET,$ == 0
Period.java,plusMinutes,minutes,int,0,RET,$ == 0
Period.java,plusSeconds,seconds,int,0,RET,$ == 0
Period.java,plusMillis,millis,int,0,RET,$ == 0
Period.java,minus,period,ReadablePeriod,0,RET,$ == null
Period.java,multipliedBy,scalar,int,0,RET,$ == 1
Period.java,normalizedStandard,years,int,0,DEF,$ != 0
Period.java,normalizedStandard,months,int,0,DEF,$ != 0
Period.java,normalizedStandard,years,int,0,DEF,$ != 0
Period.java,normalizedStandard,months,int,0,DEF,$ != 0
Instant.java,withDurationAdded,durationToAdd,long,0,RET,$ == 0
Instant.java,withDurationAdded,scalar,int,0,RET,$ == 0
Instant.java,withDurationAdded,durationToAdd,ReadableDuration,0,RET,$ == null
Instant.java,withDurationAdded,scalar,int,0,RET,$ == 0
PeriodType.java,standard,type,PeriodType,0,DEF,$ == null
PeriodType.java,yearMonthDayTime,type,PeriodType,0,DEF,$ == null
PeriodType.java,yearMonthDay,type,PeriodType,0,DEF,$ == null
PeriodType.java,yearWeekDayTime,type,PeriodType,0,DEF,$ == null
PeriodType.java,yearWeekDay,type,PeriodType,0,DEF,$ == null
PeriodType.java,yearDayTime,type,PeriodType,0,DEF,$ == null
PeriodType.java,yearDay,type,PeriodType,0,DEF,$ == null
PeriodType.java,dayTime,type,PeriodType,0,DEF,$ == null
PeriodType.java,time,type,PeriodType,0,DEF,$ == null
PeriodType.java,years,type,PeriodType,0,DEF,$ == null
PeriodType.java,months,type,PeriodType,0,DEF,$ == null
PeriodType.java,weeks,type,PeriodType,0,DEF,$ == null
PeriodType.java,days,type,PeriodType,0,DEF,$ == null
PeriodType.java,hours,type,PeriodType,0,DEF,$ == null
PeriodType.java,minutes,type,PeriodType,0,DEF,$ == null
PeriodType.java,seconds,type,PeriodType,0,DEF,$ == null
PeriodType.java,millis,type,PeriodType,0,DEF,$ == null
PeriodType.java,forFields,types,DurationFieldType[],0,IllegalArgumentException,$ == null
PeriodType.java,forFields,types,DurationFieldType[],0,IllegalArgumentException,$.length == 0
PeriodType.java,forFields,types,DurationFieldType[],0,IllegalArgumentException,$[i] == null
PeriodType.java,forFields,i,int,0,IllegalArgumentException,types[$] == null
PeriodType.java,forFields,cached,null,0,RET,$ instanceof PeriodType
PeriodType.java,forFields,cached,Object,0,IllegalArgumentException,$ != null
PeriodType.java,forFields,list,List<DurationFieldType>,0,DEF,$.remove(DurationFieldType.years()) == false
PeriodType.java,forFields,list,List<DurationFieldType>,0,DEF,$.remove(DurationFieldType.months()) == false
PeriodType.java,forFields,list,List<DurationFieldType>,0,DEF,$.remove(DurationFieldType.weeks()) == false
PeriodType.java,forFields,list,List<DurationFieldType>,0,DEF,$.remove(DurationFieldType.days()) == false
PeriodType.java,forFields,list,List<DurationFieldType>,0,DEF,$.remove(DurationFieldType.hours()) == false
PeriodType.java,forFields,list,List<DurationFieldType>,0,DEF,$.remove(DurationFieldType.minutes()) == false
PeriodType.java,forFields,list,List<DurationFieldType>,0,DEF,$.remove(DurationFieldType.seconds()) == false
PeriodType.java,forFields,list,List<DurationFieldType>,0,DEF,$.remove(DurationFieldType.millis()) == false
PeriodType.java,forFields,list,List<DurationFieldType>,0,IllegalArgumentException,$.size() > 0
PeriodType.java,forFields,checkedType,PeriodType,0,RET,$ != null
PeriodType.java,indexOf,iTypes,DurationFieldType[],0,RET,$[i] == type
PeriodType.java,indexOf,i,int,0,RET,iTypes[$] == type
PeriodType.java,setIndexedField,realIndex,int,0,UnsupportedOperationException,$ == -1
PeriodType.java,addIndexedField,valueToAdd,int,0,RET,$ == 0
PeriodType.java,addIndexedField,realIndex,int,0,UnsupportedOperationException,$ == -1
PeriodType.java,withFieldRemoved,fieldIndex,int,0,RET,$ == -1
PeriodType.java,withFieldRemoved,i,int,1,DEF,$ < fieldIndex
PeriodType.java,withFieldRemoved,i,int,0,DEF,$ > fieldIndex
PeriodType.java,withFieldRemoved,i,int,1,DEF,$ < indicesIndex
PeriodType.java,withFieldRemoved,i,int,1,DEF,$ > indicesIndex
PeriodType.java,equals,obj,Object,0,RET,$ instanceof PeriodType == false
PeriodType.java,equals,obj,null,0,RET,$ instanceof PeriodType
DateTime.java,now,zone,DateTimeZone,0,NullPointerException,$ == null
DateTime.java,now,chronology,Chronology,0,NullPointerException,$ == null
DateTime.java,withZoneRetainFields,newZone,DateTimeZone,0,RET,$ == originalZone
DateTime.java,withFields,partial,ReadablePartial,0,RET,$ == null
DateTime.java,withField,fieldType,DateTimeFieldType,0,IllegalArgumentException,$ == null
DateTime.java,withFieldAdded,fieldType,DurationFieldType,0,IllegalArgumentException,$ == null
DateTime.java,withFieldAdded,amount,int,0,RET,$ == 0
DateTime.java,withDurationAdded,durationToAdd,long,0,RET,$ == 0
DateTime.java,withDurationAdded,scalar,int,0,RET,$ == 0
DateTime.java,withDurationAdded,durationToAdd,ReadableDuration,0,RET,$ == null
DateTime.java,withDurationAdded,scalar,int,0,RET,$ == 0
DateTime.java,withPeriodAdded,period,ReadablePeriod,0,RET,$ == null
DateTime.java,withPeriodAdded,scalar,int,0,RET,$ == 0
DateTime.java,plusYears,years,int,0,RET,$ == 0
DateTime.java,plusMonths,months,int,0,RET,$ == 0
DateTime.java,plusWeeks,weeks,int,0,RET,$ == 0
DateTime.java,plusDays,days,int,0,RET,$ == 0
DateTime.java,plusHours,hours,int,0,RET,$ == 0
DateTime.java,plusMinutes,minutes,int,0,RET,$ == 0
DateTime.java,plusSeconds,seconds,int,0,RET,$ == 0
DateTime.java,plusMillis,millis,int,0,RET,$ == 0
DateTime.java,minusYears,years,int,0,RET,$ == 0
DateTime.java,minusMonths,months,int,0,RET,$ == 0
DateTime.java,minusWeeks,weeks,int,0,RET,$ == 0
DateTime.java,minusDays,days,int,0,RET,$ == 0
DateTime.java,minusHours,hours,int,0,RET,$ == 0
DateTime.java,minusMinutes,minutes,int,0,RET,$ == 0
DateTime.java,minusSeconds,seconds,int,0,RET,$ == 0
DateTime.java,minusMillis,millis,int,0,RET,$ == 0
DateTime.java,property,type,DateTimeFieldType,0,IllegalArgumentException,$ == null
DateTime.java,property,field,DateTimeField,0,IllegalArgumentException,$.isSupported() == false
Years.java,yearsBetween,start,null,0,RET,$ instanceof LocalDate
Years.java,yearsBetween,end,null,0,RET,$ instanceof LocalDate
Years.java,yearsIn,interval,ReadableInterval,0,RET,$ == null
Years.java,parseYears,periodStr,String,0,RET,$ == null
Years.java,plus,years,int,0,RET,$ == 0
Years.java,plus,years,Years,0,RET,$ == null
Years.java,minus,years,Years,0,RET,$ == null
Years.java,dividedBy,divisor,int,0,RET,$ == 1
Years.java,isGreaterThan,other,Years,0,RET,$ == null
Years.java,isLessThan,other,Years,0,RET,$ == null
YearMonth.java,now,zone,DateTimeZone,0,NullPointerException,$ == null
YearMonth.java,now,chronology,Chronology,0,NullPointerException,$ == null
YearMonth.java,fromCalendarFields,calendar,Calendar,0,IllegalArgumentException,$ == null
YearMonth.java,fromDateFields,date,Date,0,IllegalArgumentException,$ == null
YearMonth.java,withFieldAdded,amount,int,0,RET,$ == 0
YearMonth.java,withPeriodAdded,period,ReadablePeriod,0,RET,$ == null
YearMonth.java,withPeriodAdded,scalar,int,0,RET,$ == 0
YearMonth.java,withPeriodAdded,index,int,0,DEF,$ >= 0
YearMonth.java,toString,pattern,String,0,RET,$ == null
YearMonth.java,toString,pattern,String,0,RET,$ == null
Duration.java,standardDays,days,long,0,RET,$ == 0
Duration.java,standardHours,hours,long,0,RET,$ == 0
Duration.java,standardMinutes,minutes,long,0,RET,$ == 0
Duration.java,standardSeconds,seconds,long,0,RET,$ == 0
Duration.java,millis,millis,long,0,RET,$ == 0
Duration.java,withDurationAdded,durationToAdd,long,0,RET,$ == 0
Duration.java,withDurationAdded,scalar,int,0,RET,$ == 0
Duration.java,withDurationAdded,durationToAdd,ReadableDuration,0,RET,$ == null
Duration.java,withDurationAdded,scalar,int,0,RET,$ == 0
Duration.java,plus,amount,ReadableDuration,0,RET,$ == null
Duration.java,minus,amount,ReadableDuration,0,RET,$ == null
Interval.java,overlap,interval,ReadableInterval,0,RET,overlaps($) == false
Interval.java,gap,thisStart,long,1,RET,$ > otherEnd
Interval.java,gap,otherStart,long,1,RET,$ > thisEnd
Interval.java,abuts,interval,ReadableInterval,1,RET,$ == null
Interval.java,withPeriodAfterStart,period,ReadablePeriod,0,RET,$ == null
Interval.java,withPeriodBeforeEnd,period,ReadablePeriod,0,RET,$ == null
DurationField.java,subtract,value,int,0,RET,$ == Integer.MIN_VALUE
DurationField.java,subtract,value,long,0,ArithmeticException,$ == Long.MIN_VALUE
MutableDateTime.java,now,zone,DateTimeZone,0,NullPointerException,$ == null
MutableDateTime.java,now,chronology,Chronology,0,NullPointerException,$ == null
MutableDateTime.java,setRounding,field,DateTimeField,0,IllegalArgumentException,$ != null
MutableDateTime.java,setRounding,mode,int,0,IllegalArgumentException,$ < ROUND_NONE
MutableDateTime.java,setRounding,mode,int,0,IllegalArgumentException,$ > ROUND_HALF_EVEN
MutableDateTime.java,add,duration,ReadableDuration,0,DEF,$ != null
MutableDateTime.java,add,period,ReadablePeriod,0,DEF,$ != null
MutableDateTime.java,setZone,chrono,Chronology,0,DEF,$.getZone() != newZone
MutableDateTime.java,setZoneRetainFields,newZone,DateTimeZone,0,RET,$ == originalZone
MutableDateTime.java,set,type,DateTimeFieldType,0,IllegalArgumentException,$ == null
MutableDateTime.java,add,type,DurationFieldType,0,IllegalArgumentException,$ == null
MutableDateTime.java,setDate,zone,DateTimeZone,0,DEF,$ != null
MutableDateTime.java,setTime,zone,DateTimeZone,0,DEF,$ != null
MutableDateTime.java,property,type,DateTimeFieldType,0,IllegalArgumentException,$ == null
MutableDateTime.java,property,field,DateTimeField,0,IllegalArgumentException,$.isSupported() == false
LocalDate.java,now,zone,DateTimeZone,0,NullPointerException,$ == null
LocalDate.java,now,chronology,Chronology,0,NullPointerException,$ == null
LocalDate.java,fromCalendarFields,calendar,Calendar,0,IllegalArgumentException,$ == null
LocalDate.java,fromDateFields,date,Date,0,IllegalArgumentException,$ == null
LocalDate.java,readResolve,iChronology,Chronology,0,RET,$ == null
LocalDate.java,readResolve,iChronology,Chronology,0,RET,DateTimeZone.UTC.equals($.getZone()) == false
LocalDate.java,get,fieldType,DateTimeFieldType,0,IllegalArgumentException,$ == null
LocalDate.java,get,fieldType,DateTimeFieldType,0,IllegalArgumentException,isSupported($) == false
LocalDate.java,isSupported,type,DateTimeFieldType,0,RET,$ == null
LocalDate.java,isSupported,type,DurationFieldType,0,RET,$ == null
LocalDate.java,equals,partial,null,0,RET,$ instanceof LocalDate
LocalDate.java,hashCode,hash,int,0,DEF,$ == 0
LocalDate.java,compareTo,partial,null,0,RET,$ instanceof LocalDate
LocalDate.java,toLocalDateTime,time,LocalTime,0,IllegalArgumentException,$ == null
LocalDate.java,toDateTime,time,LocalTime,0,IllegalArgumentException,$ != null
LocalDate.java,toDateTime,time,LocalTime,0,DEF,$ != null
LocalDate.java,toDate,earlier,Date,0,DEF,$.getDate() == dom
LocalDate.java,withFields,partial,ReadablePartial,0,RET,$ == null
LocalDate.java,withField,fieldType,DateTimeFieldType,0,IllegalArgumentException,$ == null
LocalDate.java,withField,fieldType,DateTimeFieldType,0,IllegalArgumentException,isSupported($) == false
LocalDate.java,withFieldAdded,fieldType,DurationFieldType,0,IllegalArgumentException,$ == null
LocalDate.java,withFieldAdded,fieldType,DurationFieldType,0,IllegalArgumentException,isSupported($) == false
LocalDate.java,withFieldAdded,amount,int,0,RET,$ == 0
LocalDate.java,withPeriodAdded,period,ReadablePeriod,0,RET,$ == null
LocalDate.java,withPeriodAdded,scalar,int,0,RET,$ == 0
LocalDate.java,plusYears,years,int,0,RET,$ == 0
LocalDate.java,plusMonths,months,int,0,RET,$ == 0
LocalDate.java,plusWeeks,weeks,int,0,RET,$ == 0
LocalDate.java,plusDays,days,int,0,RET,$ == 0
LocalDate.java,minusYears,years,int,0,RET,$ == 0
LocalDate.java,minusMonths,months,int,0,RET,$ == 0
LocalDate.java,minusWeeks,weeks,int,0,RET,$ == 0
LocalDate.java,minusDays,days,int,0,RET,$ == 0
LocalDate.java,property,fieldType,DateTimeFieldType,0,IllegalArgumentException,$ == null
LocalDate.java,property,fieldType,DateTimeFieldType,0,IllegalArgumentException,isSupported($) == false
LocalDate.java,toString,pattern,String,0,RET,$ == null
LocalDate.java,toString,pattern,String,0,RET,$ == null
DateTimeComparator.java,getInstance,lowerLimit,DateTimeFieldType,0,RET,$ == null
DateTimeComparator.java,getInstance,upperLimit,DateTimeFieldType,0,RET,$ == null
DateTimeComparator.java,getInstance,upperLimit,DateTimeFieldType,0,RET,$ == null
DateTimeComparator.java,getInstance,lowerLimit,DateTimeFieldType,0,RET,$ == null
DateTimeComparator.java,compare,iLowerLimit,DateTimeFieldType,0,DEF,$ != null
DateTimeComparator.java,compare,iUpperLimit,DateTimeFieldType,0,DEF,$ != null
DateTimeComparator.java,compare,lhsMillis,long,1,RET,$ < rhsMillis
DateTimeComparator.java,compare,lhsMillis,long,1,RET,$ > rhsMillis
DateTimeComparator.java,equals,object,null,0,RET,$ instanceof DateTimeComparator
DateTimeComparator.java,toString,iLowerLimit,DateTimeFieldType,1,RET,$ == iUpperLimit
IllegalFieldValueException.java,createMessage,lowerBound,Number,1,DEF,$ == null
IllegalFieldValueException.java,createMessage,upperBound,Number,1,DEF,$ == null
IllegalFieldValueException.java,createMessage,upperBound,Number,1,DEF,$ == null
IllegalFieldValueException.java,createMessage,explain,String,0,DEF,$ != null
IllegalFieldValueException.java,createMessage,value,String,1,DEF,$ == null
IllegalFieldValueException.java,getIllegalValueAsString,value,String,0,DEF,$ == null
IllegalFieldValueException.java,prependMessage,iMessage,String,1,DEF,$ == null
IllegalFieldValueException.java,prependMessage,message,String,0,DEF,$ != null
AnnotationUtils.java,appendDetail,value,null,0,DEF,$ instanceof Annotation
AnnotationUtils.java,equals,a1,Annotation,0,RET,$ == a2
AnnotationUtils.java,equals,a1,Annotation,0,RET,$ == null
AnnotationUtils.java,equals,a2,Annotation,0,RET,$ == null
AnnotationUtils.java,equals,m,Method,0,RET,$.getParameterTypes().length == 0
AnnotationUtils.java,hashCode,value,Object,0,IllegalStateException,$ == null
AnnotationUtils.java,toString,m,Method,0,DEF,$.getParameterTypes().length > 0
AnnotationUtils.java,isValidAnnotationMemberType,type,Class<>,0,RET,$ == null
AnnotationUtils.java,hashMember,value,null,0,RET,$ instanceof Annotation
AnnotationUtils.java,memberEquals,o1,Object,0,RET,$ == o2
AnnotationUtils.java,memberEquals,o1,Object,0,RET,$ == null
AnnotationUtils.java,memberEquals,o2,Object,0,RET,$ == null
AnnotationUtils.java,annotationArrayMemberEquals,a1,Annotation[],0,RET,$.length != a2.length
CharEncoding.java,isSupported,name,String,0,RET,$ == null
ObjectUtils.java,firstNonNull,values,T[],0,RET,$ != null
ObjectUtils.java,firstNonNull,val,T,0,RET,$ != null
ObjectUtils.java,equals,object1,Object,0,RET,$ == object2
ObjectUtils.java,equals,object1,Object,0,RET,$ == null
ObjectUtils.java,equals,object2,Object,0,RET,$ == null
ObjectUtils.java,hashCodeMulti,objects,Object[],0,DEF,$ != null
ObjectUtils.java,identityToString,object,Object,0,RET,$ == null
ObjectUtils.java,identityToString,object,Object,0,NullPointerException,$ == null
ObjectUtils.java,min,values,T[],0,DEF,$ != null
ObjectUtils.java,min,result,T,0,DEF,compare(value, $, true) < 0
ObjectUtils.java,min,value,T,0,DEF,compare($, result, true) < 0
ObjectUtils.java,max,values,T[],0,DEF,$ != null
ObjectUtils.java,max,result,T,0,DEF,compare(value, $, false) > 0
ObjectUtils.java,max,value,T,0,DEF,compare($, result, false) > 0
ObjectUtils.java,compare,c1,T,1,RET,$ == c2
ObjectUtils.java,compare,c1,T,1,RET,$ == null
ObjectUtils.java,compare,c2,T,0,RET,$ == null
ObjectUtils.java,mode,count,MutableInt,1,DEF,$ == null
ObjectUtils.java,mode,cmp,int,1,DEF,$ == max
ObjectUtils.java,mode,cmp,int,0,DEF,$ > max
ObjectUtils.java,clone,obj,null,0,CloneFailedException:RET,$ instanceof Cloneable
ObjectUtils.java,CONST_BYTE,v,int,0,IllegalArgumentException,$ < Byte.MIN_VALUE
ObjectUtils.java,CONST_BYTE,v,int,0,IllegalArgumentException,$ > Byte.MAX_VALUE
ObjectUtils.java,CONST_SHORT,v,int,0,IllegalArgumentException,$ < Short.MIN_VALUE
ObjectUtils.java,CONST_SHORT,v,int,0,IllegalArgumentException,$ > Short.MAX_VALUE
StringUtils.java,isBlank,cs,CharSequence,0,RET,$ == null
StringUtils.java,isBlank,strLen,int,0,RET,($ = cs.length()) == 0
StringUtils.java,isBlank,cs,CharSequence,0,RET,(strLen = $.length()) == 0
StringUtils.java,isBlank,cs,CharSequence,0,RET,Character.isWhitespace($.charAt(i)) == false
StringUtils.java,isBlank,i,int,0,RET,Character.isWhitespace(cs.charAt($)) == false
StringUtils.java,stripToNull,str,String,0,RET,$ == null
StringUtils.java,stripStart,str,String,0,RET,$ == null
StringUtils.java,stripStart,strLen,int,0,RET,($ = str.length()) == 0
StringUtils.java,stripStart,str,String,0,RET,(strLen = $.length()) == 0
StringUtils.java,stripStart,stripChars,String,1,DEF,$ == null
StringUtils.java,stripStart,stripChars,String,1,RET,$.length() == 0
StringUtils.java,stripEnd,str,String,0,RET,$ == null
StringUtils.java,stripEnd,str,String,0,RET,(end = $.length()) == 0
StringUtils.java,stripEnd,end,int,0,RET,($ = str.length()) == 0
StringUtils.java,stripEnd,stripChars,String,1,DEF,$ == null
StringUtils.java,stripEnd,stripChars,String,1,RET,$.length() == 0
StringUtils.java,stripAll,strs,String[],0,RET,$ == null
StringUtils.java,stripAll,strs,String[],0,RET,(strsLen = $.length) == 0
StringUtils.java,stripAll,strsLen,int,0,RET,($ = strs.length) == 0
StringUtils.java,stripAccents,input,String,0,RET,$ == null
StringUtils.java,equals,cs1,CharSequence,0,RET,$ == cs2
StringUtils.java,equals,cs1,CharSequence,0,RET,$ == null
StringUtils.java,equals,cs2,CharSequence,0,RET,$ == null
StringUtils.java,equals,cs1,null,0,RET,$ instanceof String
StringUtils.java,equals,cs2,null,0,RET,$ instanceof String
StringUtils.java,equalsIgnoreCase,str1,CharSequence,1,RET,$ == null
StringUtils.java,equalsIgnoreCase,str2,CharSequence,1,RET,$ == null
StringUtils.java,equalsIgnoreCase,str1,CharSequence,1,RET,$ == str2
StringUtils.java,indexOf,seq,CharSequence,0,RET,$ == null
StringUtils.java,indexOf,searchSeq,CharSequence,0,RET,$ == null
StringUtils.java,indexOf,seq,CharSequence,0,RET,$ == null
StringUtils.java,indexOf,searchSeq,CharSequence,0,RET,$ == null
StringUtils.java,ordinalIndexOf,str,CharSequence,0,RET,$ == null
StringUtils.java,ordinalIndexOf,searchStr,CharSequence,0,RET,$ == null
StringUtils.java,ordinalIndexOf,ordinal,int,0,RET,$ <= 0
StringUtils.java,ordinalIndexOf,searchStr,CharSequence,0,RET,$.length() == 0
StringUtils.java,ordinalIndexOf,index,int,0,RET,$ < 0
StringUtils.java,indexOfIgnoreCase,str,CharSequence,0,RET,$ == null
StringUtils.java,indexOfIgnoreCase,searchStr,CharSequence,0,RET,$ == null
StringUtils.java,indexOfIgnoreCase,startPos,int,0,DEF,$ < 0
StringUtils.java,indexOfIgnoreCase,startPos,int,0,RET,$ > endLimit
StringUtils.java,indexOfIgnoreCase,searchStr,CharSequence,0,RET,$.length() == 0
StringUtils.java,lastIndexOf,seq,CharSequence,0,RET,$ == null
StringUtils.java,lastIndexOf,searchSeq,CharSequence,0,RET,$ == null
StringUtils.java,lastIndexOf,seq,CharSequence,0,RET,$ == null
StringUtils.java,lastIndexOf,searchSeq,CharSequence,0,RET,$ == null
StringUtils.java,lastIndexOfIgnoreCase,str,CharSequence,0,RET,$ == null
StringUtils.java,lastIndexOfIgnoreCase,searchStr,CharSequence,0,RET,$ == null
StringUtils.java,lastIndexOfIgnoreCase,str,CharSequence,0,RET,$ == null
StringUtils.java,lastIndexOfIgnoreCase,searchStr,CharSequence,0,RET,$ == null
StringUtils.java,lastIndexOfIgnoreCase,startPos,int,0,RET,$ < 0
StringUtils.java,lastIndexOfIgnoreCase,searchStr,CharSequence,0,RET,$.length() == 0
StringUtils.java,contains,seq,CharSequence,0,RET,$ == null
StringUtils.java,contains,searchSeq,CharSequence,0,RET,$ == null
StringUtils.java,containsIgnoreCase,str,CharSequence,0,RET,$ == null
StringUtils.java,containsIgnoreCase,searchStr,CharSequence,0,RET,$ == null
StringUtils.java,indexOfAny,j,int,0,RET,searchChars[$] == ch
StringUtils.java,indexOfAny,searchChars,char[],0,RET,$[j] == ch
StringUtils.java,indexOfAny,i,int,1,RET,$ < csLast
StringUtils.java,indexOfAny,j,int,1,RET,$ < searchLast
StringUtils.java,containsAny,j,int,0,RET,searchChars[$] == ch
StringUtils.java,containsAny,searchChars,char[],0,RET,$[j] == ch
StringUtils.java,containsAny,j,int,0,RET,$ == searchLast
StringUtils.java,containsAny,i,int,0,RET,$ < csLast
StringUtils.java,containsAny,searchChars,CharSequence,0,RET,$ == null
StringUtils.java,indexOfAnyBut,j,int,0,DEF,searchChars[$] == ch
StringUtils.java,indexOfAnyBut,searchChars,char[],0,DEF,$[j] == ch
StringUtils.java,indexOfAnyBut,i,int,1,DEF,$ < csLast
StringUtils.java,indexOfAnyBut,j,int,1,DEF,$ < searchLast
StringUtils.java,indexOfAnyBut,i,int,1,RET,$ + 1 < strLen
StringUtils.java,indexOfAnyBut,ch2,char,0,RET,CharSequenceUtils.indexOf(searchChars, $, 0) < 0
StringUtils.java,indexOfAnyBut,searchChars,CharSequence,0,RET,CharSequenceUtils.indexOf($, ch2, 0) < 0
StringUtils.java,containsOnly,valid,char[],0,RET,$ == null
StringUtils.java,containsOnly,cs,CharSequence,0,RET,$ == null
StringUtils.java,containsOnly,cs,CharSequence,0,RET,$.length() == 0
StringUtils.java,containsOnly,valid,char[],0,RET,$.length == 0
StringUtils.java,containsOnly,cs,CharSequence,0,RET,$ == null
StringUtils.java,containsOnly,validChars,String,0,RET,$ == null
StringUtils.java,containsNone,cs,CharSequence,0,RET,$ == null
StringUtils.java,containsNone,searchChars,char[],0,RET,$ == null
StringUtils.java,containsNone,j,int,0,RET,searchChars[$] == ch
StringUtils.java,containsNone,searchChars,char[],0,RET,$[j] == ch
StringUtils.java,containsNone,j,int,0,RET,$ == searchLast
StringUtils.java,containsNone,i,int,0,RET,$ < csLast
StringUtils.java,containsNone,cs,CharSequence,0,RET,$ == null
StringUtils.java,containsNone,invalidChars,String,0,RET,$ == null
StringUtils.java,indexOfAny,str,CharSequence,0,RET,$ == null
StringUtils.java,indexOfAny,searchStrs,CharSequence[],0,RET,$ == null
StringUtils.java,indexOfAny,search,CharSequence,0,DEF,$ == null
StringUtils.java,indexOfAny,tmp,int,0,DEF,$ == INDEX_NOT_FOUND
StringUtils.java,indexOfAny,tmp,int,0,DEF,$ < ret
StringUtils.java,lastIndexOfAny,str,CharSequence,0,RET,$ == null
StringUtils.java,lastIndexOfAny,searchStrs,CharSequence[],0,RET,$ == null
StringUtils.java,lastIndexOfAny,search,CharSequence,0,DEF,$ == null
StringUtils.java,lastIndexOfAny,tmp,int,0,DEF,$ > ret
StringUtils.java,substring,str,String,0,RET,$ == null
StringUtils.java,substring,start,int,0,DEF,$ < 0
StringUtils.java,substring,start,int,0,DEF,$ < 0
StringUtils.java,substring,str,String,0,RET,$ == null
StringUtils.java,substring,end,int,0,DEF,$ < 0
StringUtils.java,substring,start,int,0,DEF,$ < 0
StringUtils.java,substring,start,int,0,RET,$ > end
StringUtils.java,substring,start,int,0,DEF,$ < 0
StringUtils.java,substring,end,int,0,DEF,$ < 0
StringUtils.java,left,str,String,0,RET,$ == null
StringUtils.java,left,len,int,0,RET,$ < 0
StringUtils.java,left,str,String,0,RET,$.length() <= len
StringUtils.java,right,str,String,0,RET,$ == null
StringUtils.java,right,len,int,0,RET,$ < 0
StringUtils.java,right,str,String,0,RET,$.length() <= len
StringUtils.java,mid,str,String,0,RET,$ == null
StringUtils.java,mid,len,int,0,RET,$ < 0
StringUtils.java,mid,pos,int,0,DEF,$ < 0
StringUtils.java,substringBefore,separator,String,0,RET,$ == null
StringUtils.java,substringBefore,separator,String,0,RET,$.length() == 0
StringUtils.java,substringBefore,pos,int,0,RET,$ == INDEX_NOT_FOUND
StringUtils.java,substringAfter,separator,String,0,RET,$ == null
StringUtils.java,substringAfter,pos,int,0,RET,$ == INDEX_NOT_FOUND
StringUtils.java,substringBeforeLast,pos,int,0,RET,$ == INDEX_NOT_FOUND
StringUtils.java,substringAfterLast,pos,int,0,RET,$ == INDEX_NOT_FOUND
StringUtils.java,substringBetween,str,String,0,RET,$ == null
StringUtils.java,substringBetween,open,String,0,RET,$ == null
StringUtils.java,substringBetween,close,String,0,RET,$ == null
StringUtils.java,substringBetween,start,int,0,RET,$ != INDEX_NOT_FOUND
StringUtils.java,substringBetween,end,int,0,RET,$ != INDEX_NOT_FOUND
StringUtils.java,substringsBetween,str,String,0,RET,$ == null
StringUtils.java,substringsBetween,strLen,int,0,RET,$ == 0
StringUtils.java,substringsBetween,start,int,0,DEF,$ < 0
StringUtils.java,substringsBetween,end,int,0,DEF,$ < 0
StringUtils.java,splitByWholeSeparatorWorker,str,String,0,RET,$ == null
StringUtils.java,splitByWholeSeparatorWorker,len,int,0,RET,$ == 0
StringUtils.java,splitByWholeSeparatorWorker,separator,String,0,RET,$ == null
StringUtils.java,splitByWholeSeparatorWorker,end,int,1,DEF,$ > -1
StringUtils.java,splitByWholeSeparatorWorker,end,int,1,DEF,$ > beg
StringUtils.java,splitByWholeSeparatorWorker,numberOfSubstrings,int,1,DEF,$ == max
StringUtils.java,splitByWholeSeparatorWorker,numberOfSubstrings,int,1,DEF,$ == max
StringUtils.java,splitWorker,str,String,0,RET,$ == null
StringUtils.java,splitWorker,len,int,0,RET,$ == 0
StringUtils.java,splitWorker,str,String,0,DEF,$.charAt(i) == separatorChar
StringUtils.java,splitWorker,i,int,0,DEF,str.charAt($) == separatorChar
StringUtils.java,splitWorker,str,String,0,RET,$ == null
StringUtils.java,splitWorker,len,int,0,RET,$ == 0
StringUtils.java,splitWorker,separatorChars,String,1,DEF,$ == null
StringUtils.java,splitWorker,sizePlus1,int,0,DEF,$++ == max
StringUtils.java,splitWorker,separatorChars,String,1,DEF,$.length() == 1
StringUtils.java,splitWorker,str,String,0,DEF,$.charAt(i) == sep
StringUtils.java,splitWorker,i,int,0,DEF,str.charAt($) == sep
StringUtils.java,splitWorker,sizePlus1,int,0,DEF,$++ == max
StringUtils.java,splitWorker,str,String,0,DEF,separatorChars.indexOf($.charAt(i)) >= 0
StringUtils.java,splitWorker,separatorChars,String,0,DEF,$.indexOf(str.charAt(i)) >= 0
StringUtils.java,splitWorker,i,int,0,DEF,separatorChars.indexOf(str.charAt($)) >= 0
StringUtils.java,splitWorker,sizePlus1,int,0,DEF,$++ == max
StringUtils.java,splitByCharacterType,str,String,0,RET,$ == null
StringUtils.java,splitByCharacterType,str,String,0,RET,$.length() == 0
StringUtils.java,splitByCharacterType,type,int,0,DEF,$ == currentType
StringUtils.java,splitByCharacterType,type,int,1,DEF,$ == Character.LOWERCASE_LETTER
StringUtils.java,splitByCharacterType,currentType,int,1,DEF,$ == Character.UPPERCASE_LETTER
StringUtils.java,splitByCharacterType,newTokenStart,int,0,DEF,$ != tokenStart
StringUtils.java,join,array,Object[],0,RET,$ == null
StringUtils.java,join,array,long[],0,RET,$ == null
StringUtils.java,join,array,int[],0,RET,$ == null
StringUtils.java,join,array,short[],0,RET,$ == null
StringUtils.java,join,array,byte[],0,RET,$ == null
StringUtils.java,join,array,char[],0,RET,$ == null
StringUtils.java,join,array,float[],0,RET,$ == null
StringUtils.java,join,array,double[],0,RET,$ == null
StringUtils.java,join,array,Object[],0,RET,$ == null
StringUtils.java,join,noOfItems,int,0,RET,$ <= 0
StringUtils.java,join,i,int,0,DEF,$ > startIndex
StringUtils.java,join,array,Object[],0,DEF,$[i] != null
StringUtils.java,join,i,int,0,DEF,array[$] != null
StringUtils.java,join,array,long[],0,RET,$ == null
StringUtils.java,join,noOfItems,int,0,RET,$ <= 0
StringUtils.java,join,i,int,0,DEF,$ > startIndex
StringUtils.java,join,array,int[],0,RET,$ == null
StringUtils.java,join,noOfItems,int,0,RET,$ <= 0
StringUtils.java,join,i,int,0,DEF,$ > startIndex
StringUtils.java,join,array,byte[],0,RET,$ == null
StringUtils.java,join,noOfItems,int,0,RET,$ <= 0
StringUtils.java,join,i,int,0,DEF,$ > startIndex
StringUtils.java,join,array,short[],0,RET,$ == null
StringUtils.java,join,noOfItems,int,0,RET,$ <= 0
StringUtils.java,join,i,int,0,DEF,$ > startIndex
StringUtils.java,join,array,char[],0,RET,$ == null
StringUtils.java,join,noOfItems,int,0,RET,$ <= 0
StringUtils.java,join,i,int,0,DEF,$ > startIndex
StringUtils.java,join,array,double[],0,RET,$ == null
StringUtils.java,join,noOfItems,int,0,RET,$ <= 0
StringUtils.java,join,i,int,0,DEF,$ > startIndex
StringUtils.java,join,array,float[],0,RET,$ == null
StringUtils.java,join,noOfItems,int,0,RET,$ <= 0
StringUtils.java,join,i,int,0,DEF,$ > startIndex
StringUtils.java,join,array,Object[],0,RET,$ == null
StringUtils.java,join,array,Object[],0,RET,$ == null
StringUtils.java,join,separator,String,0,DEF,$ == null
StringUtils.java,join,noOfItems,int,0,RET,$ <= 0
StringUtils.java,join,i,int,0,DEF,$ > startIndex
StringUtils.java,join,array,Object[],0,DEF,$[i] != null
StringUtils.java,join,i,int,0,DEF,array[$] != null
StringUtils.java,join,iterator,Iterator<>,0,RET,$ == null
StringUtils.java,join,first,Object,0,DEF,$ != null
StringUtils.java,join,obj,Object,0,DEF,$ != null
StringUtils.java,join,iterator,Iterator<>,0,RET,$ == null
StringUtils.java,join,first,Object,0,DEF,$ != null
StringUtils.java,join,separator,String,0,DEF,$ != null
StringUtils.java,join,obj,Object,0,DEF,$ != null
StringUtils.java,join,iterable,Iterable<>,0,RET,$ == null
StringUtils.java,join,iterable,Iterable<>,0,RET,$ == null
StringUtils.java,deleteWhitespace,count,int,0,RET,$ == sz
StringUtils.java,remove,str,String,0,RET,$.indexOf(remove) == INDEX_NOT_FOUND
StringUtils.java,remove,remove,char,0,RET,str.indexOf($) == INDEX_NOT_FOUND
StringUtils.java,remove,i,int,0,DEF,chars[$] != remove
StringUtils.java,remove,chars,char[],0,DEF,$[i] != remove
StringUtils.java,replace,replacement,String,0,RET,$ == null
StringUtils.java,replace,max,int,0,RET,$ == 0
StringUtils.java,replace,end,int,0,RET,$ == INDEX_NOT_FOUND
StringUtils.java,replace,max,int,0,DEF,--$ == 0
StringUtils.java,replaceEach,text,String,0,RET,$ == null
StringUtils.java,replaceEach,text,String,0,RET,$.length() == 0
StringUtils.java,replaceEach,searchList,String[],0,RET,$ == null
StringUtils.java,replaceEach,searchList,String[],0,RET,$.length == 0
StringUtils.java,replaceEach,replacementList,String[],0,RET,$ == null
StringUtils.java,replaceEach,replacementList,String[],0,RET,$.length == 0
StringUtils.java,replaceEach,timeToLive,int,0,IllegalStateException,$ < 0
StringUtils.java,replaceEach,searchLength,int,0,IllegalArgumentException,$ != replacementLength
StringUtils.java,replaceEach,searchList,String[],0,DEF,$[i] == null
StringUtils.java,replaceEach,i,int,0,DEF,searchList[$] == null
StringUtils.java,replaceEach,searchList,String[],0,DEF,$[i].length() == 0
StringUtils.java,replaceEach,i,int,0,DEF,searchList[$].length() == 0
StringUtils.java,replaceEach,i,int,0,DEF,replacementList[$] == null
StringUtils.java,replaceEach,replacementList,String[],0,DEF,$[i] == null
StringUtils.java,replaceEach,tempIndex,int,1,DEF,$ == -1
StringUtils.java,replaceEach,textIndex,int,0,DEF,$ == -1
StringUtils.java,replaceEach,tempIndex,int,0,DEF,$ < textIndex
StringUtils.java,replaceEach,textIndex,int,0,RET,$ == -1
StringUtils.java,replaceEach,searchList,String[],0,DEF,$[i] == null
StringUtils.java,replaceEach,i,int,0,DEF,searchList[$] == null
StringUtils.java,replaceEach,i,int,0,DEF,replacementList[$] == null
StringUtils.java,replaceEach,replacementList,String[],0,DEF,$[i] == null
StringUtils.java,replaceEach,greater,int,0,DEF,$ > 0
StringUtils.java,replaceEach,searchList,String[],0,DEF,$[i] == null
StringUtils.java,replaceEach,i,int,0,DEF,searchList[$] == null
StringUtils.java,replaceEach,searchList,String[],0,DEF,$[i].length() == 0
StringUtils.java,replaceEach,i,int,0,DEF,searchList[$].length() == 0
StringUtils.java,replaceEach,i,int,0,DEF,replacementList[$] == null
StringUtils.java,replaceEach,replacementList,String[],0,DEF,$[i] == null
StringUtils.java,replaceEach,tempIndex,int,1,DEF,$ == -1
StringUtils.java,replaceEach,textIndex,int,0,DEF,$ == -1
StringUtils.java,replaceEach,tempIndex,int,0,DEF,$ < textIndex
StringUtils.java,replaceChars,str,String,0,RET,$ == null
StringUtils.java,replaceChars,replaceChars,String,0,DEF,$ == null
StringUtils.java,replaceChars,index,int,1,DEF,$ >= 0
StringUtils.java,replaceChars,index,int,0,DEF,$ < replaceCharsLength
StringUtils.java,overlay,str,String,0,RET,$ == null
StringUtils.java,overlay,overlay,String,0,DEF,$ == null
StringUtils.java,overlay,start,int,0,DEF,$ < 0
StringUtils.java,overlay,start,int,0,DEF,$ > len
StringUtils.java,overlay,end,int,0,DEF,$ < 0
StringUtils.java,overlay,end,int,0,DEF,$ > len
StringUtils.java,overlay,start,int,0,DEF,$ > end
StringUtils.java,chomp,str,String,0,RET,$.length() == 1
StringUtils.java,chomp,ch,char,0,RET,$ == CharUtils.CR
StringUtils.java,chomp,ch,char,0,RET,$ == CharUtils.LF
StringUtils.java,chomp,last,char,1,DEF,$ == CharUtils.LF
StringUtils.java,chomp,str,String,0,DEF,$.charAt(lastIdx - 1) == CharUtils.CR
StringUtils.java,chomp,lastIdx,int,0,DEF,str.charAt($ - 1) == CharUtils.CR
StringUtils.java,chomp,last,char,0,DEF,$ != CharUtils.CR
StringUtils.java,chop,str,String,0,RET,$ == null
StringUtils.java,chop,strLen,int,0,RET,$ < 2
StringUtils.java,chop,last,char,0,RET,$ == CharUtils.LF
StringUtils.java,chop,ret,String,0,RET,$.charAt(lastIdx - 1) == CharUtils.CR
StringUtils.java,chop,lastIdx,int,0,RET,ret.charAt($ - 1) == CharUtils.CR
StringUtils.java,repeat,str,String,0,RET,$ == null
StringUtils.java,repeat,repeat,int,0,RET,$ <= 0
StringUtils.java,repeat,repeat,int,0,RET,$ == 1
StringUtils.java,repeat,inputLength,int,0,RET,$ == 0
StringUtils.java,repeat,inputLength,int,0,RET,$ == 1
StringUtils.java,repeat,repeat,int,0,RET,$ <= PAD_LIMIT
StringUtils.java,repeat,str,String,1,RET,$ == null
StringUtils.java,repeat,separator,String,1,RET,$ == null
StringUtils.java,rightPad,str,String,0,RET,$ == null
StringUtils.java,rightPad,pads,int,0,RET,$ <= 0
StringUtils.java,rightPad,pads,int,0,RET,$ > PAD_LIMIT
StringUtils.java,rightPad,str,String,0,RET,$ == null
StringUtils.java,rightPad,pads,int,0,RET,$ <= 0
StringUtils.java,rightPad,padLen,int,0,RET,$ == 1
StringUtils.java,rightPad,pads,int,0,RET,$ <= PAD_LIMIT
StringUtils.java,rightPad,pads,int,1,RET,$ == padLen
StringUtils.java,rightPad,pads,int,1,RET,$ < padLen
StringUtils.java,leftPad,str,String,0,RET,$ == null
StringUtils.java,leftPad,pads,int,0,RET,$ <= 0
StringUtils.java,leftPad,pads,int,0,RET,$ > PAD_LIMIT
StringUtils.java,leftPad,str,String,0,RET,$ == null
StringUtils.java,leftPad,pads,int,0,RET,$ <= 0
StringUtils.java,leftPad,padLen,int,0,RET,$ == 1
StringUtils.java,leftPad,pads,int,0,RET,$ <= PAD_LIMIT
StringUtils.java,leftPad,pads,int,1,RET,$ == padLen
StringUtils.java,leftPad,pads,int,1,RET,$ < padLen
StringUtils.java,center,str,String,0,RET,$ == null
StringUtils.java,center,size,int,0,RET,$ <= 0
StringUtils.java,center,pads,int,0,RET,$ <= 0
StringUtils.java,center,str,String,0,RET,$ == null
StringUtils.java,center,size,int,0,RET,$ <= 0
StringUtils.java,center,pads,int,0,RET,$ <= 0
StringUtils.java,upperCase,str,String,0,RET,$ == null
StringUtils.java,upperCase,str,String,0,RET,$ == null
StringUtils.java,lowerCase,str,String,0,RET,$ == null
StringUtils.java,lowerCase,str,String,0,RET,$ == null
StringUtils.java,capitalize,str,String,0,RET,$ == null
StringUtils.java,capitalize,strLen,int,0,RET,($ = str.length()) == 0
StringUtils.java,capitalize,str,String,0,RET,(strLen = $.length()) == 0
StringUtils.java,uncapitalize,str,String,0,RET,$ == null
StringUtils.java,uncapitalize,strLen,int,0,RET,($ = str.length()) == 0
StringUtils.java,uncapitalize,str,String,0,RET,(strLen = $.length()) == 0
StringUtils.java,isAlpha,cs,CharSequence,0,RET,$ == null
StringUtils.java,isAlpha,cs,CharSequence,0,RET,$.length() == 0
StringUtils.java,isAlpha,cs,CharSequence,0,RET,Character.isLetter($.charAt(i)) == false
StringUtils.java,isAlpha,i,int,0,RET,Character.isLetter(cs.charAt($)) == false
StringUtils.java,isAlphaSpace,cs,CharSequence,0,RET,$ == null
StringUtils.java,isAlphaSpace,cs,CharSequence,0,RET,Character.isLetter($.charAt(i)) == false
StringUtils.java,isAlphaSpace,i,int,0,RET,Character.isLetter(cs.charAt($)) == false
StringUtils.java,isAlphaSpace,cs,CharSequence,0,RET,$.charAt(i) != ' '
StringUtils.java,isAlphaSpace,i,int,0,RET,cs.charAt($) != ' '
StringUtils.java,isAlphanumeric,cs,CharSequence,0,RET,$ == null
StringUtils.java,isAlphanumeric,cs,CharSequence,0,RET,$.length() == 0
StringUtils.java,isAlphanumeric,cs,CharSequence,0,RET,Character.isLetterOrDigit($.charAt(i)) == false
StringUtils.java,isAlphanumeric,i,int,0,RET,Character.isLetterOrDigit(cs.charAt($)) == false
StringUtils.java,isAlphanumericSpace,cs,CharSequence,0,RET,$ == null
StringUtils.java,isAlphanumericSpace,cs,CharSequence,0,RET,Character.isLetterOrDigit($.charAt(i)) == false
StringUtils.java,isAlphanumericSpace,i,int,0,RET,Character.isLetterOrDigit(cs.charAt($)) == false
StringUtils.java,isAlphanumericSpace,cs,CharSequence,0,RET,$.charAt(i) != ' '
StringUtils.java,isAlphanumericSpace,i,int,0,RET,cs.charAt($) != ' '
StringUtils.java,isAsciiPrintable,cs,CharSequence,0,RET,$ == null
StringUtils.java,isAsciiPrintable,cs,CharSequence,0,RET,CharUtils.isAsciiPrintable($.charAt(i)) == false
StringUtils.java,isAsciiPrintable,i,int,0,RET,CharUtils.isAsciiPrintable(cs.charAt($)) == false
StringUtils.java,isNumeric,cs,CharSequence,0,RET,$ == null
StringUtils.java,isNumeric,cs,CharSequence,0,RET,$.length() == 0
StringUtils.java,isNumeric,cs,CharSequence,0,RET,Character.isDigit($.charAt(i)) == false
StringUtils.java,isNumeric,i,int,0,RET,Character.isDigit(cs.charAt($)) == false
StringUtils.java,isNumericSpace,cs,CharSequence,0,RET,$ == null
StringUtils.java,isNumericSpace,cs,CharSequence,0,RET,Character.isDigit($.charAt(i)) == false
StringUtils.java,isNumericSpace,i,int,0,RET,Character.isDigit(cs.charAt($)) == false
StringUtils.java,isNumericSpace,cs,CharSequence,0,RET,$.charAt(i) != ' '
StringUtils.java,isNumericSpace,i,int,0,RET,cs.charAt($) != ' '
StringUtils.java,isWhitespace,cs,CharSequence,0,RET,$ == null
StringUtils.java,isWhitespace,cs,CharSequence,0,RET,Character.isWhitespace($.charAt(i)) == false
StringUtils.java,isWhitespace,i,int,0,RET,Character.isWhitespace(cs.charAt($)) == false
StringUtils.java,isAllLowerCase,cs,CharSequence,0,RET,$ == null
StringUtils.java,isAllLowerCase,cs,CharSequence,0,RET,Character.isLowerCase($.charAt(i)) == false
StringUtils.java,isAllLowerCase,i,int,0,RET,Character.isLowerCase(cs.charAt($)) == false
StringUtils.java,isAllUpperCase,cs,CharSequence,0,RET,$ == null
StringUtils.java,isAllUpperCase,cs,CharSequence,0,RET,Character.isUpperCase($.charAt(i)) == false
StringUtils.java,isAllUpperCase,i,int,0,RET,Character.isUpperCase(cs.charAt($)) == false
StringUtils.java,reverse,str,String,0,RET,$ == null
StringUtils.java,reverseDelimited,str,String,0,RET,$ == null
StringUtils.java,abbreviate,str,String,0,RET,$ == null
StringUtils.java,abbreviate,maxWidth,int,0,IllegalArgumentException,$ < 4
StringUtils.java,abbreviate,str,String,0,RET,$.length() <= maxWidth
StringUtils.java,abbreviate,offset,int,0,RET,$ <= 4
StringUtils.java,abbreviate,maxWidth,int,0,IllegalArgumentException,$ < 7
StringUtils.java,difference,str1,String,0,RET,$ == null
StringUtils.java,difference,str2,String,0,RET,$ == null
StringUtils.java,difference,at,int,0,RET,$ == INDEX_NOT_FOUND
StringUtils.java,indexOfDifference,cs1,CharSequence,0,RET,$ == cs2
StringUtils.java,indexOfDifference,cs1,CharSequence,0,RET,$ == null
StringUtils.java,indexOfDifference,cs2,CharSequence,0,RET,$ == null
StringUtils.java,indexOfDifference,css,CharSequence[],0,RET,$ == null
StringUtils.java,indexOfDifference,css,CharSequence[],0,RET,$.length <= 1
StringUtils.java,indexOfDifference,css,CharSequence[],1,DEF,$[i] == null
StringUtils.java,indexOfDifference,i,int,1,DEF,css[$] == null
StringUtils.java,indexOfDifference,longestStrLen,int,0,RET,$ == 0
StringUtils.java,indexOfDifference,shortestStrLen,int,0,RET,$ == 0
StringUtils.java,indexOfDifference,css,CharSequence[],0,DEF,$[arrayPos].charAt(stringPos) != comparisonChar
StringUtils.java,indexOfDifference,arrayPos,int,0,DEF,css[$].charAt(stringPos) != comparisonChar
StringUtils.java,indexOfDifference,stringPos,int,0,DEF,css[arrayPos].charAt($) != comparisonChar
StringUtils.java,indexOfDifference,firstDiff,int,0,DEF,$ != -1
StringUtils.java,indexOfDifference,firstDiff,int,0,RET,$ == -1
StringUtils.java,indexOfDifference,shortestStrLen,int,0,RET,$ != longestStrLen
StringUtils.java,getCommonPrefix,strs,String[],0,RET,$ == null
StringUtils.java,getCommonPrefix,strs,String[],0,RET,$.length == 0
StringUtils.java,getCommonPrefix,smallestIndexOfDiff,int,1,RET,$ == INDEX_NOT_FOUND
StringUtils.java,getCommonPrefix,strs,String[],0,RET,$[0] == null
StringUtils.java,getCommonPrefix,smallestIndexOfDiff,int,1,RET,$ == 0
StringUtils.java,getLevenshteinDistance,s,CharSequence,0,IllegalArgumentException,$ == null
StringUtils.java,getLevenshteinDistance,t,CharSequence,0,IllegalArgumentException,$ == null
StringUtils.java,getLevenshteinDistance,n,int,1,RET,$ == 0
StringUtils.java,getLevenshteinDistance,m,int,0,RET,$ == 0
StringUtils.java,getLevenshteinDistance,n,int,0,DEF,$ > m
StringUtils.java,getLevenshteinDistance,s,CharSequence,0,IllegalArgumentException,$ == null
StringUtils.java,getLevenshteinDistance,t,CharSequence,0,IllegalArgumentException,$ == null
StringUtils.java,getLevenshteinDistance,threshold,int,0,IllegalArgumentException,$ < 0
StringUtils.java,getLevenshteinDistance,n,int,1,RET,$ == 0
StringUtils.java,getLevenshteinDistance,m,int,0,RET,$ == 0
StringUtils.java,getLevenshteinDistance,n,int,0,DEF,$ > m
StringUtils.java,getLevenshteinDistance,min,int,0,RET,$ > max
StringUtils.java,getLevenshteinDistance,min,int,0,DEF,$ > 1
StringUtils.java,getLevenshteinDistance,s,CharSequence,1,DEF,$.charAt(i - 1) == t_j
StringUtils.java,getLevenshteinDistance,i,int,1,DEF,s.charAt($ - 1) == t_j
StringUtils.java,getLevenshteinDistance,p,int[],1,RET,$[n] <= threshold
StringUtils.java,getLevenshteinDistance,n,int,1,RET,p[$] <= threshold
StringUtils.java,startsWith,str,CharSequence,0,RET,$ == null
StringUtils.java,startsWith,prefix,CharSequence,0,RET,$ == null
StringUtils.java,endsWith,str,CharSequence,0,RET,$ == null
StringUtils.java,endsWith,suffix,CharSequence,0,RET,$ == null
StringUtils.java,normalizeSpace,str,String,0,RET,$ == null
EnumUtils.java,isValidEnum,enumName,String,0,RET,$ == null
EnumUtils.java,getEnum,enumName,String,0,RET,$ == null
EnumUtils.java,processBitVectors,block,int,0,DEF,$ < values.length
EnumUtils.java,processBitVectors,constant,E,0,DEF,(values[block] & 1 << ($.ordinal() % Long.SIZE)) != 0
EnumUtils.java,processBitVectors,values,long[],0,DEF,($[block] & 1 << (constant.ordinal() % Long.SIZE)) != 0
EnumUtils.java,processBitVectors,block,int,0,DEF,(values[$] & 1 << (constant.ordinal() % Long.SIZE)) != 0
ClassUtils.java,getShortClassName,object,Object,0,RET,$ == null
ClassUtils.java,getShortClassName,cls,Class<>,0,RET,$ == null
ClassUtils.java,getShortClassName,className,String,0,DEF,$.charAt(0) == 'L'
ClassUtils.java,getShortClassName,className,String,0,DEF,$.charAt($.length() - 1) == ';'
ClassUtils.java,getShortClassName,innerIdx,int,0,DEF,$ != -1
ClassUtils.java,getSimpleName,cls,Class<>,0,RET,$ == null
ClassUtils.java,getSimpleName,object,Object,0,RET,$ == null
ClassUtils.java,getPackageName,object,Object,0,RET,$ == null
ClassUtils.java,getPackageName,cls,Class<>,0,RET,$ == null
ClassUtils.java,getPackageName,className,String,0,DEF,$.charAt(0) == 'L'
ClassUtils.java,getPackageName,className,String,0,DEF,$.charAt($.length() - 1) == ';'
ClassUtils.java,getPackageName,i,int,0,RET,$ == -1
ClassUtils.java,getAllSuperclasses,cls,Class<>,0,RET,$ == null
ClassUtils.java,getAllInterfaces,cls,Class<>,0,RET,$ == null
ClassUtils.java,convertClassNamesToClasses,classNames,List<String>,0,RET,$ == null
ClassUtils.java,convertClassesToClassNames,classes,List<Class<?>>,0,RET,$ == null
ClassUtils.java,convertClassesToClassNames,cls,Class<>,1,DEF,$ == null
ClassUtils.java,isAssignable,toClassArray,Class<?>[],0,RET,ArrayUtils.isSameLength(classArray, $) == false
ClassUtils.java,isAssignable,classArray,Class<?>[],0,RET,ArrayUtils.isSameLength($, toClassArray) == false
ClassUtils.java,isAssignable,classArray,Class<?>[],0,DEF,$ == null
ClassUtils.java,isAssignable,toClassArray,Class<?>[],0,DEF,$ == null
ClassUtils.java,isAssignable,autoboxing,boolean,0,RET,isAssignable(classArray[i], toClassArray[i], $) == false
ClassUtils.java,isAssignable,i,int,0,RET,isAssignable(classArray[$], toClassArray[$], autoboxing) == false
ClassUtils.java,isAssignable,toClassArray,Class<?>[],0,RET,isAssignable(classArray[i], $[i], autoboxing) == false
ClassUtils.java,isAssignable,classArray,Class<?>[],0,RET,isAssignable($[i], toClassArray[i], autoboxing) == false
ClassUtils.java,isPrimitiveOrWrapper,type,Class<>,0,RET,$ == null
ClassUtils.java,isAssignable,toClass,Class<>,0,RET,$ == null
ClassUtils.java,isAssignable,cls,Class<>,0,RET,$ == null
ClassUtils.java,isAssignable,cls,Class<>,0,RET,$ == null
ClassUtils.java,isAssignable,cls,Class<>,0,RET,$ == null
ClassUtils.java,isAssignable,toClass,Class<>,0,RET,$.isPrimitive() == false
ClassUtils.java,primitiveToWrapper,cls,Class<>,0,DEF,$ != null
ClassUtils.java,primitivesToWrappers,classes,Class<?>[],0,RET,$ == null
ClassUtils.java,primitivesToWrappers,classes,Class<?>[],0,RET,$.length == 0
ClassUtils.java,wrappersToPrimitives,classes,Class<?>[],0,RET,$ == null
ClassUtils.java,wrappersToPrimitives,classes,Class<?>[],0,RET,$.length == 0
ClassUtils.java,getClass,lastDotIndex,int,0,RET,$ != -1
ClassUtils.java,toCanonicalName,className,String,1,NullPointerException,$ == null
ClassUtils.java,toCanonicalName,abbreviation,String,1,DEF,$ != null
ClassUtils.java,toClass,array,Object[],1,RET,$ == null
ClassUtils.java,toClass,array,Object[],0,RET,$.length == 0
ClassUtils.java,getShortCanonicalName,object,Object,0,RET,$ == null
ClassUtils.java,getShortCanonicalName,cls,Class<>,0,RET,$ == null
ClassUtils.java,getPackageCanonicalName,object,Object,0,RET,$ == null
ClassUtils.java,getPackageCanonicalName,cls,Class<>,0,RET,$ == null
ClassUtils.java,getCanonicalName,className,String,1,RET,$ == null
ClassUtils.java,getCanonicalName,dim,int,1,RET,$ < 1
ClassUtils.java,getCanonicalName,className,String,0,DEF,$.length() > 0
MutableInt.java,equals,obj,null,0,RET,$ instanceof MutableInt
MutableObject.java,equals,obj,Object,0,RET,$ == null
MutableShort.java,equals,obj,null,0,RET,$ instanceof MutableShort
MutableBoolean.java,equals,obj,null,0,RET,$ instanceof MutableBoolean
MutableByte.java,equals,obj,null,0,RET,$ instanceof MutableByte
MutableLong.java,equals,obj,null,0,RET,$ instanceof MutableLong
BooleanUtils.java,negate,bool,Boolean,0,RET,$ == null
BooleanUtils.java,toBooleanDefaultIfNull,bool,Boolean,0,RET,$ == null
BooleanUtils.java,toBooleanObject,value,Integer,0,RET,$ == null
BooleanUtils.java,toBoolean,value,int,0,RET,$ == trueValue
BooleanUtils.java,toBoolean,value,int,0,RET,$ == falseValue
BooleanUtils.java,toBoolean,value,Integer,1,RET,$ == null
BooleanUtils.java,toBoolean,trueValue,Integer,0,RET,$ == null
BooleanUtils.java,toBoolean,falseValue,Integer,0,RET,$ == null
BooleanUtils.java,toBooleanObject,value,int,0,RET,$ == trueValue
BooleanUtils.java,toBooleanObject,value,int,0,RET,$ == falseValue
BooleanUtils.java,toBooleanObject,value,int,0,RET,$ == nullValue
BooleanUtils.java,toBooleanObject,value,Integer,1,RET,$ == null
BooleanUtils.java,toBooleanObject,trueValue,Integer,0,RET,$ == null
BooleanUtils.java,toBooleanObject,falseValue,Integer,0,RET,$ == null
BooleanUtils.java,toBooleanObject,nullValue,Integer,0,RET,$ == null
BooleanUtils.java,toIntegerObject,bool,Boolean,0,RET,$ == null
BooleanUtils.java,toInteger,bool,Boolean,0,RET,$ == null
BooleanUtils.java,toIntegerObject,bool,Boolean,0,RET,$ == null
BooleanUtils.java,toBooleanObject,str,String,0,RET,$ == true""
BooleanUtils.java,toBooleanObject,str,String,0,RET,$ == null
BooleanUtils.java,toBooleanObject,ch0,char,0,RET,$ == 'y'
BooleanUtils.java,toBooleanObject,ch0,char,0,RET,$ == 'Y'
BooleanUtils.java,toBooleanObject,ch0,char,0,RET,$ == 't'
BooleanUtils.java,toBooleanObject,ch0,char,0,RET,$ == 'T'
BooleanUtils.java,toBooleanObject,ch0,char,0,RET,$ == 'n'
BooleanUtils.java,toBooleanObject,ch0,char,0,RET,$ == 'N'
BooleanUtils.java,toBooleanObject,ch0,char,0,RET,$ == 'f'
BooleanUtils.java,toBooleanObject,ch0,char,0,RET,$ == 'F'
BooleanUtils.java,toBooleanObject,ch0,char,0,RET,$ == 'o'
BooleanUtils.java,toBooleanObject,ch0,char,0,RET,$ == 'O'
BooleanUtils.java,toBooleanObject,ch1,char,0,RET,$ == 'n'
BooleanUtils.java,toBooleanObject,ch1,char,0,RET,$ == 'N'
BooleanUtils.java,toBooleanObject,ch0,char,0,RET,$ == 'n'
BooleanUtils.java,toBooleanObject,ch0,char,0,RET,$ == 'N'
BooleanUtils.java,toBooleanObject,ch1,char,0,RET,$ == 'o'
BooleanUtils.java,toBooleanObject,ch1,char,0,RET,$ == 'O'
BooleanUtils.java,toBooleanObject,ch0,char,0,RET,$ == 'y'
BooleanUtils.java,toBooleanObject,ch0,char,0,RET,$ == 'Y'
BooleanUtils.java,toBooleanObject,ch1,char,0,RET,$ == 'e'
BooleanUtils.java,toBooleanObject,ch1,char,0,RET,$ == 'E'
BooleanUtils.java,toBooleanObject,ch2,char,0,RET,$ == 's'
BooleanUtils.java,toBooleanObject,ch2,char,0,RET,$ == 'S'
BooleanUtils.java,toBooleanObject,ch0,char,0,RET,$ == 'o'
BooleanUtils.java,toBooleanObject,ch0,char,0,RET,$ == 'O'
BooleanUtils.java,toBooleanObject,ch1,char,0,RET,$ == 'f'
BooleanUtils.java,toBooleanObject,ch1,char,0,RET,$ == 'F'
BooleanUtils.java,toBooleanObject,ch2,char,0,RET,$ == 'f'
BooleanUtils.java,toBooleanObject,ch2,char,0,RET,$ == 'F'
BooleanUtils.java,toBooleanObject,ch0,char,0,RET,$ == 't'
BooleanUtils.java,toBooleanObject,ch0,char,0,RET,$ == 'T'
BooleanUtils.java,toBooleanObject,ch1,char,0,RET,$ == 'r'
BooleanUtils.java,toBooleanObject,ch1,char,0,RET,$ == 'R'
BooleanUtils.java,toBooleanObject,ch2,char,0,RET,$ == 'u'
BooleanUtils.java,toBooleanObject,ch2,char,0,RET,$ == 'U'
BooleanUtils.java,toBooleanObject,ch3,char,0,RET,$ == 'e'
BooleanUtils.java,toBooleanObject,ch3,char,0,RET,$ == 'E'
BooleanUtils.java,toBooleanObject,ch0,char,0,RET,$ == 'f'
BooleanUtils.java,toBooleanObject,ch0,char,0,RET,$ == 'F'
BooleanUtils.java,toBooleanObject,ch1,char,0,RET,$ == 'a'
BooleanUtils.java,toBooleanObject,ch1,char,0,RET,$ == 'A'
BooleanUtils.java,toBooleanObject,ch2,char,0,RET,$ == 'l'
BooleanUtils.java,toBooleanObject,ch2,char,0,RET,$ == 'L'
BooleanUtils.java,toBooleanObject,ch3,char,0,RET,$ == 's'
BooleanUtils.java,toBooleanObject,ch3,char,0,RET,$ == 'S'
BooleanUtils.java,toBooleanObject,ch4,char,0,RET,$ == 'e'
BooleanUtils.java,toBooleanObject,ch4,char,0,RET,$ == 'E'
BooleanUtils.java,toBooleanObject,str,String,1,RET,$ == null
BooleanUtils.java,toBooleanObject,trueString,String,0,RET,$ == null
BooleanUtils.java,toBooleanObject,falseString,String,0,RET,$ == null
BooleanUtils.java,toBooleanObject,nullString,String,0,RET,$ == null
BooleanUtils.java,toBoolean,str,String,1,RET,$ == trueString
BooleanUtils.java,toBoolean,str,String,1,RET,$ == falseString
BooleanUtils.java,toBoolean,str,String,0,RET,$ != null
BooleanUtils.java,toString,bool,Boolean,0,RET,$ == null
BooleanUtils.java,and,array,boolean[],0,IllegalArgumentException,$ == null
BooleanUtils.java,and,array,boolean[],0,IllegalArgumentException,$.length == 0
BooleanUtils.java,and,array,Boolean[],0,IllegalArgumentException,$ == null
BooleanUtils.java,and,array,Boolean[],0,IllegalArgumentException,$.length == 0
BooleanUtils.java,or,array,boolean[],0,IllegalArgumentException,$ == null
BooleanUtils.java,or,array,boolean[],0,IllegalArgumentException,$.length == 0
BooleanUtils.java,or,array,Boolean[],0,IllegalArgumentException,$ == null
BooleanUtils.java,or,array,Boolean[],0,IllegalArgumentException,$.length == 0
BooleanUtils.java,xor,array,boolean[],0,IllegalArgumentException,$ == null
BooleanUtils.java,xor,array,boolean[],0,IllegalArgumentException,$.length == 0
BooleanUtils.java,xor,trueCount,int,1,DEF,$ < 1
BooleanUtils.java,xor,array,Boolean[],0,IllegalArgumentException,$ == null
BooleanUtils.java,xor,array,Boolean[],0,IllegalArgumentException,$.length == 0
LocaleUtils.java,toLocale,str,String,0,RET,$ == null
LocaleUtils.java,toLocale,len,int,0,IllegalArgumentException,$ != 2
LocaleUtils.java,toLocale,len,int,0,IllegalArgumentException,$ != 5
LocaleUtils.java,toLocale,len,int,0,IllegalArgumentException,$ < 7
LocaleUtils.java,toLocale,ch0,char,0,IllegalArgumentException,$ < 'a'
LocaleUtils.java,toLocale,ch0,char,0,IllegalArgumentException,$ > 'z'
LocaleUtils.java,toLocale,ch1,char,0,IllegalArgumentException,$ < 'a'
LocaleUtils.java,toLocale,ch1,char,0,IllegalArgumentException,$ > 'z'
LocaleUtils.java,toLocale,len,int,1,RET,$ == 2
LocaleUtils.java,toLocale,str,String,0,IllegalArgumentException,$.charAt(2) != '_'
LocaleUtils.java,toLocale,ch3,char,0,RET,$ == '_'
LocaleUtils.java,toLocale,ch3,char,0,IllegalArgumentException,$ < 'A'
LocaleUtils.java,toLocale,ch3,char,0,IllegalArgumentException,$ > 'Z'
LocaleUtils.java,toLocale,ch4,char,0,IllegalArgumentException,$ < 'A'
LocaleUtils.java,toLocale,ch4,char,0,IllegalArgumentException,$ > 'Z'
LocaleUtils.java,toLocale,len,int,1,RET,$ == 5
LocaleUtils.java,toLocale,str,String,0,IllegalArgumentException,$.charAt(5) != '_'
LocaleUtils.java,localeLookupList,locale,Locale,0,DEF,$ != null
LocaleUtils.java,localeLookupList,locale,Locale,0,DEF,$.getVariant().length() > 0
LocaleUtils.java,localeLookupList,locale,Locale,0,DEF,$.getCountry().length() > 0
LocaleUtils.java,localeLookupList,defaultLocale,Locale,0,DEF,list.contains($) == false
LocaleUtils.java,localeLookupList,list,List<Locale>,0,DEF,$.contains(defaultLocale) == false
LocaleUtils.java,languagesByCountry,countryCode,String,0,RET,$ == null
LocaleUtils.java,languagesByCountry,langs,List<Locale>,0,DEF,$ == null
LocaleUtils.java,countriesByLanguage,languageCode,String,0,RET,$ == null
LocaleUtils.java,countriesByLanguage,countries,List<Locale>,0,DEF,$ == null
LocaleUtils.java,countriesByLanguage,locale,Locale,0,DEF,$.getCountry().length() != 0
CharSetUtils.java,squeeze,ch,char,0,DEF,$ == lastChar
CharSetUtils.java,squeeze,i,int,0,DEF,$ != 0
CharSetUtils.java,keep,str,String,0,RET,$ == null
CharSetUtils.java,keep,str,String,0,RET,$.length() == 0
CharSetUtils.java,modify,chrs,char[],0,DEF,chars.contains($[i]) == expect
CharSetUtils.java,modify,i,int,0,DEF,chars.contains(chrs[$]) == expect
CharSetUtils.java,modify,chars,CharSet,0,DEF,$.contains(chrs[i]) == expect
CharSetUtils.java,deepEmpty,strings,String[],0,RET,$ != null
ToStringBuilder.java,setDefaultStyle,style,ToStringStyle,0,IllegalArgumentException,$ == null
ToStringBuilder.java,ToStringBuilder,style,ToStringStyle,0,DEF,$ == null
ToStringBuilder.java,ToStringBuilder,buffer,StringBuffer,0,DEF,$ == null
ToStringBuilder.java,appendSuper,superToString,String,0,DEF,$ != null
ToStringBuilder.java,appendToString,toString,String,0,DEF,$ != null
ReflectionToStringBuilder.java,toNoNullStringArray,collection,Collection<String>,0,RET,$ == null
ReflectionToStringBuilder.java,toNoNullStringArray,e,Object,0,DEF,$ != null
ReflectionToStringBuilder.java,accept,field,Field,0,RET,$.getName().indexOf(ClassUtils.INNER_CLASS_SEPARATOR_CHAR) != -1
ReflectionToStringBuilder.java,accept,field,Field,0,RET,Arrays.binarySearch(this.excludeFieldNames, $.getName()) >= 0
ReflectionToStringBuilder.java,setExcludeFieldNames,excludeFieldNamesParam,String[],1,DEF,$ == null
ReflectionToStringBuilder.java,setUpToClass,clazz,Class<>,0,IllegalArgumentException,$ != null
ReflectionToStringBuilder.java,setUpToClass,object,Object,0,IllegalArgumentException,$ != null
ReflectionToStringBuilder.java,setUpToClass,clazz,Class<>,0,IllegalArgumentException,$.isInstance(object) == false
ReflectionToStringBuilder.java,setUpToClass,object,Object,0,IllegalArgumentException,clazz.isInstance($) == false
ToStringStyle.java,register,value,Object,0,DEF,$ != null
ToStringStyle.java,register,m,Map<Object,Object>,0,DEF,$ == null
ToStringStyle.java,unregister,value,Object,0,DEF,$ != null
ToStringStyle.java,unregister,m,Map<Object,Object>,0,DEF,$ != null
ToStringStyle.java,appendToString,toString,String,0,DEF,$ != null
ToStringStyle.java,appendToString,pos1,int,0,DEF,$ != pos2
ToStringStyle.java,appendToString,pos1,int,0,DEF,$ >= 0
ToStringStyle.java,appendToString,pos2,int,0,DEF,$ >= 0
ToStringStyle.java,appendStart,object,Object,0,DEF,$ != null
ToStringStyle.java,removeLastFieldSeparator,len,int,0,DEF,$ > 0
ToStringStyle.java,removeLastFieldSeparator,sepLen,int,0,DEF,$ > 0
ToStringStyle.java,removeLastFieldSeparator,len,int,0,DEF,$ >= sepLen
ToStringStyle.java,append,value,Object,1,DEF,$ == null
ToStringStyle.java,appendInternal,value,null,0,RET,$ instanceof Number
ToStringStyle.java,appendInternal,value,null,0,RET,$ instanceof Boolean
ToStringStyle.java,appendInternal,value,null,0,RET,$ instanceof Character
ToStringStyle.java,appendInternal,value,null,1,DEF,$ instanceof Collection<?>
ToStringStyle.java,appendInternal,value,null,1,DEF,$ instanceof Map<?,?>
ToStringStyle.java,appendInternal,value,null,1,DEF,$ instanceof long[]
ToStringStyle.java,appendInternal,value,null,1,DEF,$ instanceof int[]
ToStringStyle.java,appendInternal,value,null,1,DEF,$ instanceof short[]
ToStringStyle.java,appendInternal,value,null,1,DEF,$ instanceof byte[]
ToStringStyle.java,appendInternal,value,null,1,DEF,$ instanceof char[]
ToStringStyle.java,appendInternal,value,null,1,DEF,$ instanceof double[]
ToStringStyle.java,appendInternal,value,null,1,DEF,$ instanceof float[]
ToStringStyle.java,appendInternal,value,null,1,DEF,$ instanceof boolean[]
ToStringStyle.java,append,array,Object[],1,DEF,$ == null
ToStringStyle.java,appendDetail,i,int,0,DEF,$ > 0
ToStringStyle.java,appendDetail,item,Object,1,DEF,$ == null
ToStringStyle.java,reflectionAppendArrayDetail,i,int,0,DEF,$ > 0
ToStringStyle.java,reflectionAppendArrayDetail,item,Object,1,DEF,$ == null
ToStringStyle.java,append,array,long[],1,DEF,$ == null
ToStringStyle.java,appendDetail,i,int,0,DEF,$ > 0
ToStringStyle.java,append,array,int[],1,DEF,$ == null
ToStringStyle.java,appendDetail,i,int,0,DEF,$ > 0
ToStringStyle.java,append,array,short[],1,DEF,$ == null
ToStringStyle.java,appendDetail,i,int,0,DEF,$ > 0
ToStringStyle.java,append,array,byte[],1,DEF,$ == null
ToStringStyle.java,appendDetail,i,int,0,DEF,$ > 0
ToStringStyle.java,append,array,char[],1,DEF,$ == null
ToStringStyle.java,appendDetail,i,int,0,DEF,$ > 0
ToStringStyle.java,append,array,double[],1,DEF,$ == null
ToStringStyle.java,appendDetail,i,int,0,DEF,$ > 0
ToStringStyle.java,append,array,float[],1,DEF,$ == null
ToStringStyle.java,appendDetail,i,int,0,DEF,$ > 0
ToStringStyle.java,append,array,boolean[],1,DEF,$ == null
ToStringStyle.java,appendDetail,i,int,0,DEF,$ > 0
ToStringStyle.java,appendClassName,object,Object,0,DEF,$ != null
ToStringStyle.java,appendIdentityHashCode,object,Object,0,DEF,$!=null
ToStringStyle.java,appendFieldStart,fieldName,String,0,DEF,$ != null
ToStringStyle.java,isFullDetail,fullDetailRequest,Boolean,0,RET,$ == null
ToStringStyle.java,setArrayStart,arrayStart,String,0,DEF,$ == null
ToStringStyle.java,setArrayEnd,arrayEnd,String,0,DEF,$ == null
ToStringStyle.java,setArraySeparator,arraySeparator,String,0,DEF,$ == null
ToStringStyle.java,setContentStart,contentStart,String,0,DEF,$ == null
ToStringStyle.java,setContentEnd,contentEnd,String,0,DEF,$ == null
ToStringStyle.java,setFieldNameValueSeparator,fieldNameValueSeparator,String,0,DEF,$ == null
ToStringStyle.java,setFieldSeparator,fieldSeparator,String,0,DEF,$ == null
ToStringStyle.java,setNullText,nullText,String,0,DEF,$ == null
ToStringStyle.java,setSizeStartText,sizeStartText,String,0,DEF,$ == null
ToStringStyle.java,setSizeEndText,sizeEndText,String,0,DEF,$ == null
ToStringStyle.java,setSummaryObjectStartText,summaryObjectStartText,String,0,DEF,$ == null
ToStringStyle.java,setSummaryObjectEndText,summaryObjectEndText,String,0,DEF,$ == null
IDKey.java,equals,other,null,0,RET,$ instanceof IDKey
IDKey.java,equals,id,int,0,RET,$ != idKey.id
HashCodeBuilder.java,reflectionAppend,field,Field,0,InternalError,$.getName().indexOf('$') == -1
HashCodeBuilder.java,reflectionHashCode,object,T,0,IllegalArgumentException,$ == null
HashCodeBuilder.java,unregister,registry,Set<IDKey>,0,DEF,$ != null
HashCodeBuilder.java,unregister,registry,Set<IDKey>,0,DEF,$ != null
HashCodeBuilder.java,HashCodeBuilder,initialNonZeroOddNumber,int,0,IllegalArgumentException,$ == 0
HashCodeBuilder.java,HashCodeBuilder,initialNonZeroOddNumber,int,0,IllegalArgumentException,$ % 2 == 0
HashCodeBuilder.java,HashCodeBuilder,multiplierNonZeroOddNumber,int,0,IllegalArgumentException,$ == 0
HashCodeBuilder.java,HashCodeBuilder,multiplierNonZeroOddNumber,int,0,IllegalArgumentException,$ % 2 == 0
HashCodeBuilder.java,append,array,boolean[],1,DEF,$ == null
HashCodeBuilder.java,append,array,byte[],1,DEF,$ == null
HashCodeBuilder.java,append,array,char[],1,DEF,$ == null
HashCodeBuilder.java,append,array,double[],1,DEF,$ == null
HashCodeBuilder.java,append,array,float[],1,DEF,$ == null
HashCodeBuilder.java,append,array,int[],1,DEF,$ == null
HashCodeBuilder.java,append,array,long[],1,DEF,$ == null
HashCodeBuilder.java,append,object,Object,1,DEF,$ == null
HashCodeBuilder.java,append,object,null,1,DEF,$ instanceof long[]
HashCodeBuilder.java,append,object,null,1,DEF,$ instanceof int[]
HashCodeBuilder.java,append,object,null,1,DEF,$ instanceof short[]
HashCodeBuilder.java,append,object,null,1,DEF,$ instanceof char[]
HashCodeBuilder.java,append,object,null,1,DEF,$ instanceof byte[]
HashCodeBuilder.java,append,object,null,1,DEF,$ instanceof double[]
HashCodeBuilder.java,append,object,null,1,DEF,$ instanceof float[]
HashCodeBuilder.java,append,object,null,1,DEF,$ instanceof boolean[]
HashCodeBuilder.java,append,array,Object[],1,DEF,$ == null
HashCodeBuilder.java,append,array,short[],1,DEF,$ == null
EqualsBuilder.java,unregister,registry,Set<Pair<IDKey,IDKey>>,0,DEF,$ != null
EqualsBuilder.java,unregister,registry,Set<Pair<IDKey,IDKey>>,0,DEF,$ != null
EqualsBuilder.java,reflectionEquals,lhs,Object,0,RET,$ == rhs
EqualsBuilder.java,reflectionEquals,lhs,Object,0,RET,$ == null
EqualsBuilder.java,reflectionEquals,rhs,Object,0,RET,$ == null
EqualsBuilder.java,reflectionAppend,f,Field,0,InternalError,$.getName().indexOf('$') == -1
EqualsBuilder.java,appendSuper,isEquals,boolean,0,RET,$ == false
EqualsBuilder.java,append,isEquals,boolean,0,RET,$ == false
EqualsBuilder.java,append,lhs,Object,0,RET,$ == rhs
EqualsBuilder.java,append,lhs,Object,0,RET,$ == null
EqualsBuilder.java,append,rhs,Object,0,RET,$ == null
EqualsBuilder.java,append,lhs,null,1,DEF,$ instanceof long[]
EqualsBuilder.java,append,lhs,null,1,DEF,$ instanceof int[]
EqualsBuilder.java,append,lhs,null,1,DEF,$ instanceof short[]
EqualsBuilder.java,append,lhs,null,1,DEF,$ instanceof char[]
EqualsBuilder.java,append,lhs,null,1,DEF,$ instanceof byte[]
EqualsBuilder.java,append,lhs,null,1,DEF,$ instanceof double[]
EqualsBuilder.java,append,lhs,null,1,DEF,$ instanceof float[]
EqualsBuilder.java,append,lhs,null,1,DEF,$ instanceof boolean[]
EqualsBuilder.java,append,isEquals,boolean,0,RET,$ == false
EqualsBuilder.java,append,isEquals,boolean,0,RET,$ == false
EqualsBuilder.java,append,isEquals,boolean,0,RET,$ == false
EqualsBuilder.java,append,isEquals,boolean,0,RET,$ == false
EqualsBuilder.java,append,isEquals,boolean,0,RET,$ == false
EqualsBuilder.java,append,isEquals,boolean,0,RET,$ == false
EqualsBuilder.java,append,isEquals,boolean,0,RET,$ == false
EqualsBuilder.java,append,isEquals,boolean,0,RET,$ == false
EqualsBuilder.java,append,isEquals,boolean,0,RET,$ == false
EqualsBuilder.java,append,lhs,Object[],0,RET,$ == rhs
EqualsBuilder.java,append,lhs,Object[],0,RET,$ == null
EqualsBuilder.java,append,rhs,Object[],0,RET,$ == null
EqualsBuilder.java,append,lhs,Object[],0,RET,$.length != rhs.length
EqualsBuilder.java,append,isEquals,boolean,0,RET,$ == false
EqualsBuilder.java,append,lhs,long[],0,RET,$ == rhs
EqualsBuilder.java,append,lhs,long[],0,RET,$ == null
EqualsBuilder.java,append,rhs,long[],0,RET,$ == null
EqualsBuilder.java,append,lhs,long[],0,RET,$.length != rhs.length
EqualsBuilder.java,append,isEquals,boolean,0,RET,$ == false
EqualsBuilder.java,append,lhs,int[],0,RET,$ == rhs
EqualsBuilder.java,append,lhs,int[],0,RET,$ == null
EqualsBuilder.java,append,rhs,int[],0,RET,$ == null
EqualsBuilder.java,append,lhs,int[],0,RET,$.length != rhs.length
EqualsBuilder.java,append,isEquals,boolean,0,RET,$ == false
EqualsBuilder.java,append,lhs,short[],0,RET,$ == rhs
EqualsBuilder.java,append,lhs,short[],0,RET,$ == null
EqualsBuilder.java,append,rhs,short[],0,RET,$ == null
EqualsBuilder.java,append,lhs,short[],0,RET,$.length != rhs.length
EqualsBuilder.java,append,isEquals,boolean,0,RET,$ == false
EqualsBuilder.java,append,lhs,char[],0,RET,$ == rhs
EqualsBuilder.java,append,lhs,char[],0,RET,$ == null
EqualsBuilder.java,append,rhs,char[],0,RET,$ == null
EqualsBuilder.java,append,lhs,char[],0,RET,$.length != rhs.length
EqualsBuilder.java,append,isEquals,boolean,0,RET,$ == false
EqualsBuilder.java,append,lhs,byte[],0,RET,$ == rhs
EqualsBuilder.java,append,lhs,byte[],0,RET,$ == null
EqualsBuilder.java,append,rhs,byte[],0,RET,$ == null
EqualsBuilder.java,append,lhs,byte[],0,RET,$.length != rhs.length
EqualsBuilder.java,append,isEquals,boolean,0,RET,$ == false
EqualsBuilder.java,append,lhs,double[],0,RET,$ == rhs
EqualsBuilder.java,append,lhs,double[],0,RET,$ == null
EqualsBuilder.java,append,rhs,double[],0,RET,$ == null
EqualsBuilder.java,append,lhs,double[],0,RET,$.length != rhs.length
EqualsBuilder.java,append,isEquals,boolean,0,RET,$ == false
EqualsBuilder.java,append,lhs,float[],0,RET,$ == rhs
EqualsBuilder.java,append,lhs,float[],0,RET,$ == null
EqualsBuilder.java,append,rhs,float[],0,RET,$ == null
EqualsBuilder.java,append,lhs,float[],0,RET,$.length != rhs.length
EqualsBuilder.java,append,isEquals,boolean,0,RET,$ == false
EqualsBuilder.java,append,lhs,boolean[],0,RET,$ == rhs
EqualsBuilder.java,append,lhs,boolean[],0,RET,$ == null
EqualsBuilder.java,append,rhs,boolean[],0,RET,$ == null
EqualsBuilder.java,append,lhs,boolean[],0,RET,$.length != rhs.length
CompareToBuilder.java,reflectionCompare,lhs,Object,0,RET,$ == rhs
CompareToBuilder.java,reflectionCompare,lhs,Object,0,NullPointerException,$ == null
CompareToBuilder.java,reflectionCompare,rhs,Object,0,NullPointerException,$ == null
CompareToBuilder.java,reflectionAppend,f,Field,0,InternalError,$.getName().indexOf('$') == -1
CompareToBuilder.java,appendSuper,comparison,int,0,RET,$ != 0
CompareToBuilder.java,append,comparison,int,0,RET,$ != 0
CompareToBuilder.java,append,lhs,Object,0,RET,$ == rhs
CompareToBuilder.java,append,lhs,Object,0,RET,$ == null
CompareToBuilder.java,append,rhs,Object,0,RET,$ == null
CompareToBuilder.java,append,lhs,null,1,DEF,$ instanceof long[]
CompareToBuilder.java,append,lhs,null,1,DEF,$ instanceof int[]
CompareToBuilder.java,append,lhs,null,1,DEF,$ instanceof short[]
CompareToBuilder.java,append,lhs,null,1,DEF,$ instanceof char[]
CompareToBuilder.java,append,lhs,null,1,DEF,$ instanceof byte[]
CompareToBuilder.java,append,lhs,null,1,DEF,$ instanceof double[]
CompareToBuilder.java,append,lhs,null,1,DEF,$ instanceof float[]
CompareToBuilder.java,append,lhs,null,1,DEF,$ instanceof boolean[]
CompareToBuilder.java,append,comparator,Comparator<>,1,DEF,$ == null
CompareToBuilder.java,append,comparison,int,0,RET,$ != 0
CompareToBuilder.java,append,comparison,int,0,RET,$ != 0
CompareToBuilder.java,append,comparison,int,0,RET,$ != 0
CompareToBuilder.java,append,comparison,int,0,RET,$ != 0
CompareToBuilder.java,append,comparison,int,0,RET,$ != 0
CompareToBuilder.java,append,comparison,int,0,RET,$ != 0
CompareToBuilder.java,append,comparison,int,0,RET,$ != 0
CompareToBuilder.java,append,comparison,int,0,RET,$ != 0
CompareToBuilder.java,append,lhs,boolean,0,RET,$ == rhs
CompareToBuilder.java,append,lhs,boolean,1,DEF,$ == false
CompareToBuilder.java,append,comparison,int,0,RET,$ != 0
CompareToBuilder.java,append,lhs,Object[],0,RET,$ == rhs
CompareToBuilder.java,append,lhs,Object[],0,RET,$ == null
CompareToBuilder.java,append,rhs,Object[],0,RET,$ == null
CompareToBuilder.java,append,lhs,Object[],0,RET,$.length != rhs.length
CompareToBuilder.java,append,comparison,int,0,RET,$ != 0
CompareToBuilder.java,append,lhs,long[],0,RET,$ == rhs
CompareToBuilder.java,append,lhs,long[],0,RET,$ == null
CompareToBuilder.java,append,rhs,long[],0,RET,$ == null
CompareToBuilder.java,append,lhs,long[],0,RET,$.length != rhs.length
CompareToBuilder.java,append,comparison,int,0,RET,$ != 0
CompareToBuilder.java,append,lhs,int[],0,RET,$ == rhs
CompareToBuilder.java,append,lhs,int[],0,RET,$ == null
CompareToBuilder.java,append,rhs,int[],0,RET,$ == null
CompareToBuilder.java,append,lhs,int[],0,RET,$.length != rhs.length
CompareToBuilder.java,append,comparison,int,0,RET,$ != 0
CompareToBuilder.java,append,lhs,short[],0,RET,$ == rhs
CompareToBuilder.java,append,lhs,short[],0,RET,$ == null
CompareToBuilder.java,append,rhs,short[],0,RET,$ == null
CompareToBuilder.java,append,lhs,short[],0,RET,$.length != rhs.length
CompareToBuilder.java,append,comparison,int,0,RET,$ != 0
CompareToBuilder.java,append,lhs,char[],0,RET,$ == rhs
CompareToBuilder.java,append,lhs,char[],0,RET,$ == null
CompareToBuilder.java,append,rhs,char[],0,RET,$ == null
CompareToBuilder.java,append,lhs,char[],0,RET,$.length != rhs.length
CompareToBuilder.java,append,comparison,int,0,RET,$ != 0
CompareToBuilder.java,append,lhs,byte[],0,RET,$ == rhs
CompareToBuilder.java,append,lhs,byte[],0,RET,$ == null
CompareToBuilder.java,append,rhs,byte[],0,RET,$ == null
CompareToBuilder.java,append,lhs,byte[],0,RET,$.length != rhs.length
CompareToBuilder.java,append,comparison,int,0,RET,$ != 0
CompareToBuilder.java,append,lhs,double[],0,RET,$ == rhs
CompareToBuilder.java,append,lhs,double[],0,RET,$ == null
CompareToBuilder.java,append,rhs,double[],0,RET,$ == null
CompareToBuilder.java,append,lhs,double[],0,RET,$.length != rhs.length
CompareToBuilder.java,append,comparison,int,0,RET,$ != 0
CompareToBuilder.java,append,lhs,float[],0,RET,$ == rhs
CompareToBuilder.java,append,lhs,float[],0,RET,$ == null
CompareToBuilder.java,append,rhs,float[],0,RET,$ == null
CompareToBuilder.java,append,lhs,float[],0,RET,$.length != rhs.length
CompareToBuilder.java,append,comparison,int,0,RET,$ != 0
CompareToBuilder.java,append,lhs,boolean[],0,RET,$ == rhs
CompareToBuilder.java,append,lhs,boolean[],0,RET,$ == null
CompareToBuilder.java,append,rhs,boolean[],0,RET,$ == null
CompareToBuilder.java,append,lhs,boolean[],0,RET,$.length != rhs.length
SystemUtils.java,isJavaVersionMatch,version,String,0,RET,$ == null
SystemUtils.java,isOSMatch,osName,String,0,RET,$ == null
SystemUtils.java,isOSMatch,osVersion,String,0,RET,$ == null
SystemUtils.java,isOSNameMatch,osName,String,0,RET,$ == null
StringEscapeUtils.java,translate,index,int,0,IllegalStateException,$ != 0
StringEscapeUtils.java,translate,index,int,0,IllegalStateException,$ != 0
StringEscapeUtils.java,translate,input,CharSequence,0,RET,$.charAt(0) != CSV_QUOTE
StringEscapeUtils.java,translate,input,CharSequence,0,RET,$.charAt($.length() - 1) != CSV_QUOTE
MemberUtils.java,setAccessibleWorkaround,o,AccessibleObject,0,RET,$ == null
MemberUtils.java,getObjectTransformationCost,srcClass,Class<>,0,DEF,$ == null
FieldUtils.java,getField,cls,Class<>,0,IllegalArgumentException,$ == null
FieldUtils.java,getField,fieldName,String,0,IllegalArgumentException,$ == null
FieldUtils.java,getField,match,Field,0,IllegalArgumentException,$ != null
FieldUtils.java,getDeclaredField,cls,Class<>,0,IllegalArgumentException,$ == null
FieldUtils.java,getDeclaredField,fieldName,String,0,IllegalArgumentException,$ == null
FieldUtils.java,readStaticField,field,Field,0,IllegalArgumentException,$ == null
FieldUtils.java,readStaticField,field,Field,0,IllegalArgumentException,$ == null
FieldUtils.java,readDeclaredStaticField,field,Field,0,IllegalArgumentException,$ == null
FieldUtils.java,readField,field,Field,0,IllegalArgumentException,$ == null
FieldUtils.java,readField,target,Object,0,IllegalArgumentException,$ == null
FieldUtils.java,readField,field,Field,0,IllegalArgumentException,$ == null
FieldUtils.java,readDeclaredField,target,Object,0,IllegalArgumentException,$ == null
FieldUtils.java,readDeclaredField,field,Field,0,IllegalArgumentException,$ == null
FieldUtils.java,writeStaticField,field,Field,0,IllegalArgumentException,$ == null
FieldUtils.java,writeStaticField,field,Field,0,IllegalArgumentException,$ == null
FieldUtils.java,writeDeclaredStaticField,field,Field,0,IllegalArgumentException,$ == null
FieldUtils.java,writeField,field,Field,0,IllegalArgumentException,$ == null
FieldUtils.java,writeField,target,Object,0,IllegalArgumentException,$ == null
FieldUtils.java,writeField,field,Field,0,IllegalArgumentException,$ == null
FieldUtils.java,writeDeclaredField,target,Object,0,IllegalArgumentException,$ == null
FieldUtils.java,writeDeclaredField,field,Field,0,IllegalArgumentException,$ == null
ConstructorUtils.java,invokeConstructor,args,Object[],0,DEF,$ == null
ConstructorUtils.java,invokeConstructor,parameterTypes,Class<?>[],0,DEF,$ == null
ConstructorUtils.java,invokeConstructor,args,Object[],0,DEF,$ == null
ConstructorUtils.java,invokeConstructor,ctor,Constructor<T>,0,NoSuchMethodException,$ == null
ConstructorUtils.java,invokeExactConstructor,args,Object[],0,DEF,$ == null
ConstructorUtils.java,invokeExactConstructor,args,Object[],0,DEF,$ == null
ConstructorUtils.java,invokeExactConstructor,parameterTypes,Class<?>[],0,DEF,$ == null
ConstructorUtils.java,invokeExactConstructor,ctor,Constructor<T>,0,NoSuchMethodException,$ == null
ConstructorUtils.java,getMatchingAccessibleConstructor,ctor,Constructor<>,0,DEF,$ != null
ConstructorUtils.java,getMatchingAccessibleConstructor,result,Constructor<T>,0,DEF,$ == null
ConstructorUtils.java,getMatchingAccessibleConstructor,result,Constructor<T>,0,DEF,MemberUtils.compareParameterTypes(ctor.getParameterTypes(), $ .getParameterTypes(), parameterTypes) < 0
ConstructorUtils.java,getMatchingAccessibleConstructor,parameterTypes,Class<?>[],0,DEF,MemberUtils.compareParameterTypes(ctor.getParameterTypes(), result .getParameterTypes(), $) < 0
ConstructorUtils.java,getMatchingAccessibleConstructor,ctor,Constructor<>,0,DEF,MemberUtils.compareParameterTypes($.getParameterTypes(), result .getParameterTypes(), parameterTypes) < 0
MethodUtils.java,invokeMethod,args,Object[],0,DEF,$ == null
MethodUtils.java,invokeMethod,parameterTypes,Class<?>[],0,DEF,$ == null
MethodUtils.java,invokeMethod,args,Object[],0,DEF,$ == null
MethodUtils.java,invokeMethod,method,Method,0,NoSuchMethodException,$ == null
MethodUtils.java,invokeExactMethod,args,Object[],0,DEF,$ == null
MethodUtils.java,invokeExactMethod,args,Object[],0,DEF,$ == null
MethodUtils.java,invokeExactMethod,parameterTypes,Class<?>[],0,DEF,$ == null
MethodUtils.java,invokeExactMethod,method,Method,0,NoSuchMethodException,$ == null
MethodUtils.java,invokeExactStaticMethod,args,Object[],0,DEF,$ == null
MethodUtils.java,invokeExactStaticMethod,parameterTypes,Class<?>[],0,DEF,$ == null
MethodUtils.java,invokeExactStaticMethod,method,Method,0,NoSuchMethodException,$ == null
MethodUtils.java,invokeStaticMethod,args,Object[],0,DEF,$ == null
MethodUtils.java,invokeStaticMethod,parameterTypes,Class<?>[],0,DEF,$ == null
MethodUtils.java,invokeStaticMethod,args,Object[],0,DEF,$ == null
MethodUtils.java,invokeStaticMethod,method,Method,0,NoSuchMethodException,$ == null
MethodUtils.java,invokeExactStaticMethod,args,Object[],0,DEF,$ == null
MethodUtils.java,getAccessibleMethod,method,Method,0,DEF,$ == null
MethodUtils.java,getAccessibleMethodFromInterfaceNest,method,Method,0,DEF,$ != null
MethodUtils.java,getAccessibleMethodFromInterfaceNest,method,Method,0,DEF,$ != null
MethodUtils.java,getMatchingAccessibleMethod,accessibleMethod,Method,0,DEF,$ != null
MethodUtils.java,getMatchingAccessibleMethod,bestMatch,Method,0,DEF,$ == null
MethodUtils.java,getMatchingAccessibleMethod,bestMatch,Method,0,DEF,MemberUtils.compareParameterTypes( accessibleMethod.getParameterTypes(), $.getParameterTypes(), parameterTypes) < 0
MethodUtils.java,getMatchingAccessibleMethod,parameterTypes,Class<?>[],0,DEF,MemberUtils.compareParameterTypes( accessibleMethod.getParameterTypes(), bestMatch.getParameterTypes(), $) < 0
MethodUtils.java,getMatchingAccessibleMethod,accessibleMethod,Method,0,DEF,MemberUtils.compareParameterTypes( $.getParameterTypes(), bestMatch.getParameterTypes(), parameterTypes) < 0
MethodUtils.java,getMatchingAccessibleMethod,bestMatch,Method,0,DEF,$ != null
TypeUtils.java,isAssignable,toType,Type,0,RET,$ == null
TypeUtils.java,isAssignable,toType,null,0,RET,$ instanceof Class<?>
TypeUtils.java,isAssignable,toType,null,0,RET,$ instanceof ParameterizedType
TypeUtils.java,isAssignable,toType,null,0,RET,$ instanceof GenericArrayType
TypeUtils.java,isAssignable,toType,null,0,RET,$ instanceof WildcardType
TypeUtils.java,isAssignable,toType,null,0,RET,$ instanceof TypeVariable<?>
TypeUtils.java,isAssignable,type,Type,0,RET,$ == null
TypeUtils.java,isAssignable,toClass,Class<>,0,RET,$ == null
TypeUtils.java,isAssignable,type,null,0,RET,$ instanceof Class<?>
TypeUtils.java,isAssignable,type,null,0,RET,$ instanceof ParameterizedType
TypeUtils.java,isAssignable,type,null,0,RET,$ instanceof TypeVariable<?>
TypeUtils.java,isAssignable,type,null,0,RET,$ instanceof GenericArrayType
TypeUtils.java,isAssignable,type,null,0,RET,$ instanceof WildcardType
TypeUtils.java,isAssignable,type,Type,0,RET,$ == null
TypeUtils.java,isAssignable,toParameterizedType,ParameterizedType,0,RET,$ == null
TypeUtils.java,isAssignable,fromTypeVarAssigns,Map<TypeVariable<?>,Type>,0,RET,$ == null
TypeUtils.java,isAssignable,fromTypeArg,Type,0,RET,$ != null
TypeUtils.java,isAssignable,toTypeArg,null,0,RET,$ instanceof WildcardType
TypeUtils.java,unrollVariableAssignments,result,null,0,DEF,$ instanceof TypeVariable<?>
TypeUtils.java,isAssignable,type,Type,0,RET,$ == null
TypeUtils.java,isAssignable,toGenericArrayType,GenericArrayType,0,RET,$ == null
TypeUtils.java,isAssignable,type,null,0,RET,$ instanceof Class<?>
TypeUtils.java,isAssignable,type,null,0,RET,$ instanceof GenericArrayType
TypeUtils.java,isAssignable,type,null,0,RET,$ instanceof WildcardType
TypeUtils.java,isAssignable,type,null,0,RET,$ instanceof TypeVariable<?>
TypeUtils.java,isAssignable,type,null,0,RET,$ instanceof ParameterizedType
TypeUtils.java,isAssignable,type,Type,0,RET,$ == null
TypeUtils.java,isAssignable,toWildcardType,WildcardType,0,RET,$ == null
TypeUtils.java,isAssignable,type,null,0,RET,$ instanceof WildcardType
TypeUtils.java,isAssignable,type,Type,0,RET,$ == null
TypeUtils.java,isAssignable,toTypeVariable,TypeVariable<>,0,RET,$ == null
TypeUtils.java,isAssignable,type,null,0,RET,$ instanceof TypeVariable<?>
TypeUtils.java,isAssignable,type,null,0,RET,$ instanceof Class<?>
TypeUtils.java,isAssignable,type,null,0,RET,$ instanceof ParameterizedType
TypeUtils.java,isAssignable,type,null,0,RET,$ instanceof GenericArrayType
TypeUtils.java,isAssignable,type,null,0,RET,$ instanceof WildcardType
TypeUtils.java,substituteTypeVariables,type,null,0,IllegalArgumentException:RET,$ instanceof TypeVariable<?>
TypeUtils.java,substituteTypeVariables,typeVarAssigns,Map<TypeVariable<?>,Type>,0,IllegalArgumentException:RET,$ != null
TypeUtils.java,substituteTypeVariables,replacementType,Type,0,IllegalArgumentException,$ == null
TypeUtils.java,getTypeArguments,type,null,0,RET,$ instanceof Class<?>
TypeUtils.java,getTypeArguments,type,null,0,RET,$ instanceof ParameterizedType
TypeUtils.java,getTypeArguments,type,null,0,RET,$ instanceof GenericArrayType
TypeUtils.java,getTypeArguments,type,null,0,RET,$ instanceof WildcardType
TypeUtils.java,getTypeArguments,type,null,0,RET,$ instanceof TypeVariable<?>
TypeUtils.java,getTypeArguments,ownerType,null,1,DEF,$ instanceof ParameterizedType
TypeUtils.java,determineTypeArguments,midType,null,0,RET,$ instanceof Class<?>
TypeUtils.java,mapTypeVariablesToArguments,ownerType,null,0,DEF,$ instanceof ParameterizedType
TypeUtils.java,getClosestParentType,midType,null,1,DEF,$ instanceof ParameterizedType
TypeUtils.java,getClosestParentType,midType,null,1,DEF,$ instanceof Class<?>
TypeUtils.java,getClosestParentType,genericInterface,Type,0,RET,$ != null
TypeUtils.java,isInstance,type,Type,0,RET,$ == null
TypeUtils.java,normalizeUpperBounds,bounds,Type[],0,RET,$.length < 2
TypeUtils.java,normalizeUpperBounds,type1,Type,0,DEF,$ != type2
TypeUtils.java,getRawType,rawType,null,0,IllegalStateException,$ instanceof Class<?>
TypeUtils.java,getRawType,type,null,0,RET,$ instanceof Class<?>
TypeUtils.java,getRawType,type,null,0,RET,$ instanceof ParameterizedType
TypeUtils.java,getRawType,type,null,0,RET,$ instanceof TypeVariable<?>
TypeUtils.java,getRawType,assigningType,Type,0,RET,$ == null
TypeUtils.java,getRawType,genericDeclaration,null,0,RET,$ instanceof Class<?>
TypeUtils.java,getRawType,typeVarAssigns,Map<TypeVariable<?>,Type>,0,RET,$ == null
TypeUtils.java,getRawType,typeArgument,Type,0,RET,$ == null
TypeUtils.java,getRawType,type,null,0,RET,$ instanceof GenericArrayType
TypeUtils.java,getRawType,type,null,0,RET,$ instanceof WildcardType
TypeUtils.java,getArrayComponentType,type,null,0,RET,$ instanceof Class<?>
TypeUtils.java,getArrayComponentType,type,null,0,RET,$ instanceof GenericArrayType
CharSet.java,getInstance,setStrs,String[],0,RET,$ == null
CharSet.java,getInstance,setStrs,String[],0,RET,$.length == 1
CharSet.java,getInstance,common,CharSet,0,RET,$ != null
CharSet.java,add,str,String,0,RET,$ == null
CharSet.java,add,remainder,int,1,DEF,$ >= 4
CharSet.java,add,str,String,1,DEF,$.charAt(pos) == '^'
CharSet.java,add,pos,int,1,DEF,str.charAt($) == '^'
CharSet.java,add,str,String,1,DEF,$.charAt(pos + 2) == '-'
CharSet.java,add,pos,int,1,DEF,str.charAt($ + 2) == '-'
CharSet.java,add,remainder,int,1,DEF,$ >= 3
CharSet.java,add,str,String,1,DEF,$.charAt(pos + 1) == '-'
CharSet.java,add,pos,int,1,DEF,str.charAt($ + 1) == '-'
CharSet.java,add,remainder,int,1,DEF,$ >= 2
CharSet.java,add,str,String,1,DEF,$.charAt(pos) == '^'
CharSet.java,add,pos,int,1,DEF,str.charAt($) == '^'
CharSet.java,equals,obj,Object,0,RET,$ instanceof CharSet == false
CharSet.java,equals,obj,null,0,RET,$ instanceof CharSet
Range.java,Range,element1,T,0,IllegalArgumentException,$ == null
Range.java,Range,element2,T,0,IllegalArgumentException,$ == null
Range.java,Range,comparator,Comparator<T>,0,DEF,$ == null
Range.java,Range,comparator,Comparator<T>,1,DEF,$.compare(element1, element2) < 1
Range.java,Range,element1,T,1,DEF,comparator.compare($, element2) < 1
Range.java,Range,element2,T,1,DEF,comparator.compare(element1, $) < 1
Range.java,contains,element,T,0,RET,$ == null
Range.java,isAfter,element,T,0,RET,$ == null
Range.java,isStartedBy,element,T,0,RET,$ == null
Range.java,isEndedBy,element,T,0,RET,$ == null
Range.java,isBefore,element,T,0,RET,$ == null
Range.java,elementCompareTo,element,T,0,NullPointerException,$ == null
Range.java,containsRange,otherRange,Range<T>,0,RET,$ == null
Range.java,isAfterRange,otherRange,Range<T>,0,RET,$ == null
Range.java,isOverlappedBy,otherRange,Range<T>,0,RET,$ == null
Range.java,isBeforeRange,otherRange,Range<T>,0,RET,$ == null
Range.java,equals,obj,Object,1,RET,$ == null
Range.java,hashCode,hashCode,int,0,DEF,$ == 0
Range.java,toString,result,String,0,DEF,$ == null
CharSequenceUtils.java,indexOf,cs,null,1,RET,$ instanceof String
CharSequenceUtils.java,indexOf,start,int,0,DEF,$ < 0
CharSequenceUtils.java,indexOf,cs,CharSequence,0,RET,$.charAt(i) == searchChar
CharSequenceUtils.java,indexOf,i,int,0,RET,cs.charAt($) == searchChar
CharSequenceUtils.java,lastIndexOf,cs,null,1,RET,$ instanceof String
CharSequenceUtils.java,lastIndexOf,start,int,0,RET,$ < 0
CharSequenceUtils.java,lastIndexOf,start,int,0,DEF,$ >= sz
CharSequenceUtils.java,lastIndexOf,cs,CharSequence,0,RET,$.charAt(i) == searchChar
CharSequenceUtils.java,lastIndexOf,i,int,0,RET,cs.charAt($) == searchChar
CharSequenceUtils.java,toCharArray,cs,null,1,RET,$ instanceof String
CharSequenceUtils.java,regionMatches,cs,null,1,RET,$ instanceof String
CharSequenceUtils.java,regionMatches,substring,null,1,RET,$ instanceof String
Validate.java,isTrue,expression,boolean,0,IllegalArgumentException,$ == false
Validate.java,isTrue,expression,boolean,0,IllegalArgumentException,$ == false
Validate.java,isTrue,expression,boolean,0,IllegalArgumentException,$ == false
Validate.java,isTrue,expression,boolean,0,IllegalArgumentException,$ == false
Validate.java,notNull,object,T,0,NullPointerException,$ == null
Validate.java,notEmpty,array,T[],0,NullPointerException,$ == null
Validate.java,notEmpty,array,T[],0,IllegalArgumentException,$.length == 0
Validate.java,notEmpty,collection,T,0,NullPointerException,$ == null
Validate.java,notEmpty,map,T,0,NullPointerException,$ == null
Validate.java,notEmpty,chars,T,0,NullPointerException,$ == null
Validate.java,notEmpty,chars,T,0,IllegalArgumentException,$.length() == 0
Validate.java,notBlank,chars,T,0,NullPointerException,$ == null
Validate.java,noNullElements,array,T[],0,IllegalArgumentException,$[i] == null
Validate.java,noNullElements,i,int,0,IllegalArgumentException,array[$] == null
Validate.java,noNullElements,it,Iterator<>,0,IllegalArgumentException,$.next() == null
Validate.java,validIndex,index,int,0,IndexOutOfBoundsException,$ < 0
Validate.java,validIndex,index,int,0,IndexOutOfBoundsException,$ >= array.length
Validate.java,validIndex,index,int,0,IndexOutOfBoundsException,$ < 0
Validate.java,validIndex,index,int,0,IndexOutOfBoundsException,$ < 0
Validate.java,validState,expression,boolean,0,IllegalStateException,$ == false
Validate.java,validState,expression,boolean,0,IllegalStateException,$ == false
Validate.java,matchesPattern,input,CharSequence,0,IllegalArgumentException,Pattern.matches(pattern, $) == false
Validate.java,matchesPattern,pattern,String,0,IllegalArgumentException,Pattern.matches($, input) == false
Validate.java,matchesPattern,input,CharSequence,0,IllegalArgumentException,Pattern.matches(pattern, $) == false
Validate.java,matchesPattern,pattern,String,0,IllegalArgumentException,Pattern.matches($, input) == false
Validate.java,inclusiveBetween,start,T,0,IllegalArgumentException,value.compareTo($) < 0
Validate.java,inclusiveBetween,value,Comparable<T>,0,IllegalArgumentException,$.compareTo(start) < 0
Validate.java,inclusiveBetween,end,T,0,IllegalArgumentException,value.compareTo($) > 0
Validate.java,inclusiveBetween,value,Comparable<T>,0,IllegalArgumentException,$.compareTo(end) > 0
Validate.java,inclusiveBetween,start,T,0,IllegalArgumentException,value.compareTo($) < 0
Validate.java,inclusiveBetween,value,Comparable<T>,0,IllegalArgumentException,$.compareTo(start) < 0
Validate.java,inclusiveBetween,end,T,0,IllegalArgumentException,value.compareTo($) > 0
Validate.java,inclusiveBetween,value,Comparable<T>,0,IllegalArgumentException,$.compareTo(end) > 0
Validate.java,exclusiveBetween,start,T,0,IllegalArgumentException,value.compareTo($) <= 0
Validate.java,exclusiveBetween,value,Comparable<T>,0,IllegalArgumentException,$.compareTo(start) <= 0
Validate.java,exclusiveBetween,end,T,0,IllegalArgumentException,value.compareTo($) >= 0
Validate.java,exclusiveBetween,value,Comparable<T>,0,IllegalArgumentException,$.compareTo(end) >= 0
Validate.java,exclusiveBetween,start,T,0,IllegalArgumentException,value.compareTo($) <= 0
Validate.java,exclusiveBetween,value,Comparable<T>,0,IllegalArgumentException,$.compareTo(start) <= 0
Validate.java,exclusiveBetween,end,T,0,IllegalArgumentException,value.compareTo($) >= 0
Validate.java,exclusiveBetween,value,Comparable<T>,0,IllegalArgumentException,$.compareTo(end) >= 0
Validate.java,isInstanceOf,obj,Object,0,IllegalArgumentException,type.isInstance($) == false
Validate.java,isInstanceOf,type,Class<>,0,IllegalArgumentException,$.isInstance(obj) == false
Validate.java,isInstanceOf,obj,Object,0,IllegalArgumentException,type.isInstance($) == false
Validate.java,isInstanceOf,type,Class<>,0,IllegalArgumentException,$.isInstance(obj) == false
Validate.java,isAssignableFrom,superType,Class<>,0,IllegalArgumentException,$.isAssignableFrom(type) == false
Validate.java,isAssignableFrom,type,Class<>,0,IllegalArgumentException,superType.isAssignableFrom($) == false
Validate.java,isAssignableFrom,superType,Class<>,0,IllegalArgumentException,$.isAssignableFrom(type) == false
Validate.java,isAssignableFrom,type,Class<>,0,IllegalArgumentException,superType.isAssignableFrom($) == false
BackgroundInitializer.java,start,executor,ExecutorService,1,DEF,$ == null
BackgroundInitializer.java,getFuture,future,Future<T>,0,IllegalStateException,$ == null
BackgroundInitializer.java,call,execFinally,ExecutorService,0,DEF,$ != null
ConstantInitializer.java,equals,obj,null,0,RET,$ instanceof ConstantInitializer<?>
BasicThreadFactory.java,BasicThreadFactory,builder,Builder,1,DEF,$.wrappedFactory == null
BasicThreadFactory.java,wrappedFactory,factory,ThreadFactory,0,NullPointerException,$ == null
BasicThreadFactory.java,namingPattern,pattern,String,0,NullPointerException,$ == null
BasicThreadFactory.java,uncaughtExceptionHandler,handler,UncaughtExceptionHandler,0,NullPointerException,$ == null
LazyInitializer.java,get,result,T,0,DEF,$ == null
LazyInitializer.java,get,result,T,0,DEF,$ == null
MultiBackgroundInitializer.java,addInitializer,name,String,0,IllegalArgumentException,$ == null
MultiBackgroundInitializer.java,addInitializer,init,BackgroundInitializer<>,0,IllegalArgumentException,$ == null
MultiBackgroundInitializer.java,initialize,bi,BackgroundInitializer<>,0,DEF,$.getExternalExecutor() == null
MultiBackgroundInitializer.java,checkName,init,BackgroundInitializer<>,0,NoSuchElementException,$ == null
AtomicInitializer.java,get,result,T,0,DEF,$ == null
ConcurrentUtils.java,extractCause,ex,ExecutionException,0,RET,$ == null
ConcurrentUtils.java,extractCause,ex,ExecutionException,0,RET,$.getCause() == null
ConcurrentUtils.java,extractCauseUnchecked,ex,ExecutionException,0,RET,$ == null
ConcurrentUtils.java,extractCauseUnchecked,ex,ExecutionException,0,RET,$.getCause() == null
ConcurrentUtils.java,handleCause,cex,ConcurrentException,0,DEF,$ != null
ConcurrentUtils.java,handleCauseUnchecked,crex,ConcurrentRuntimeException,0,DEF,$ != null
ConcurrentUtils.java,checkedException,ex,Throwable,1,RET,$ != null
ConcurrentUtils.java,checkedException,ex,null,1,RET,$ instanceof RuntimeException
ConcurrentUtils.java,checkedException,ex,null,1,RET,$ instanceof Error
ConcurrentUtils.java,putIfAbsent,map,ConcurrentMap<K,V>,0,RET,$ == null
ConcurrentUtils.java,createIfAbsent,map,ConcurrentMap<K,V>,0,RET,$ == null
ConcurrentUtils.java,createIfAbsent,init,ConcurrentInitializer<V>,0,RET,$ == null
ConcurrentUtils.java,createIfAbsent,value,V,0,RET,$ == null
CallableBackgroundInitializer.java,checkCallable,call,Callable<T>,0,IllegalArgumentException,$ == null
TimedSemaphore.java,TimedSemaphore,timePeriod,long,0,IllegalArgumentException,$ <= 0
TimedSemaphore.java,TimedSemaphore,service,ScheduledExecutorService,1,DEF,$ != null
TimedSemaphore.java,shutdown,task,ScheduledFuture<>,0,DEF,$ != null
TimedSemaphore.java,acquire,task,ScheduledFuture<>,0,DEF,$ == null
CharUtils.java,toChar,ch,Character,0,IllegalArgumentException,$ == null
CharUtils.java,toChar,ch,Character,0,RET,$ == null
CharUtils.java,toIntValue,ch,char,0,IllegalArgumentException,isAsciiNumeric($) == false
CharUtils.java,toIntValue,ch,char,0,RET,isAsciiNumeric($) == false
CharUtils.java,toIntValue,ch,Character,0,IllegalArgumentException,$ == null
CharUtils.java,toIntValue,ch,Character,0,RET,$ == null
CharUtils.java,toString,ch,char,0,RET,$ < 128
CharUtils.java,toString,ch,Character,0,RET,$ == null
CharUtils.java,unicodeEscaped,ch,char,1,RET,$ < 0x10
CharUtils.java,unicodeEscaped,ch,char,1,RET,$ < 0x100
CharUtils.java,unicodeEscaped,ch,char,0,RET,$ < 0x1000
CharUtils.java,unicodeEscaped,ch,Character,0,RET,$ == null
BitField.java,BitField,bit_pattern,int,0,DEF,$ != 0
Conversion.java,hexDigitToInt,digit,int,0,IllegalArgumentException,$ < 0
Conversion.java,binaryToHexDigit,src,boolean[],0,IllegalArgumentException,$.length == 0
Conversion.java,binaryToHexDigitMsb0_4bits,src,boolean[],0,IllegalArgumentException,$.length > 8
Conversion.java,binaryToHexDigitMsb0_4bits,srcPos,int,0,IllegalArgumentException,src.length - $ < 4
Conversion.java,binaryToHexDigitMsb0_4bits,src,boolean[],0,IllegalArgumentException,$.length - srcPos < 4
Conversion.java,binaryBeMsb0ToHexDigit,src,boolean[],0,IllegalArgumentException,$.length == 0
Conversion.java,intToHexDigit,c,char,0,IllegalArgumentException,$ == Character.MIN_VALUE
Conversion.java,intArrayToLong,src,int[],0,RET,$.length == 0
Conversion.java,intArrayToLong,srcPos,int,0,RET,$ == 0
Conversion.java,intArrayToLong,dstPos,int,0,IllegalArgumentException,(nInts - 1) * 32 + $ >= 64
Conversion.java,intArrayToLong,nInts,int,0,IllegalArgumentException,($ - 1) * 32 + dstPos >= 64
Conversion.java,shortArrayToLong,src,short[],0,RET,$.length == 0
Conversion.java,shortArrayToLong,srcPos,int,0,RET,$ == 0
Conversion.java,shortArrayToLong,dstPos,int,0,IllegalArgumentException,(nShorts - 1) * 16 + $ >= 64
Conversion.java,shortArrayToLong,nShorts,int,0,IllegalArgumentException,($ - 1) * 16 + dstPos >= 64
Conversion.java,shortArrayToInt,src,short[],0,RET,$.length == 0
Conversion.java,shortArrayToInt,srcPos,int,0,RET,$ == 0
Conversion.java,shortArrayToInt,dstPos,int,0,IllegalArgumentException,(nShorts - 1) * 16 + $ >= 32
Conversion.java,shortArrayToInt,nShorts,int,0,IllegalArgumentException,($ - 1) * 16 + dstPos >= 32
Conversion.java,byteArrayToLong,src,byte[],0,RET,$.length == 0
Conversion.java,byteArrayToLong,srcPos,int,0,RET,$ == 0
Conversion.java,byteArrayToLong,dstPos,int,0,IllegalArgumentException,(nBytes - 1) * 8 + $ >= 64
Conversion.java,byteArrayToLong,nBytes,int,0,IllegalArgumentException,($ - 1) * 8 + dstPos >= 64
Conversion.java,byteArrayToInt,src,byte[],0,RET,$.length == 0
Conversion.java,byteArrayToInt,srcPos,int,0,RET,$ == 0
Conversion.java,byteArrayToInt,dstPos,int,0,IllegalArgumentException,(nBytes - 1) * 8 + $ >= 32
Conversion.java,byteArrayToInt,nBytes,int,0,IllegalArgumentException,($ - 1) * 8 + dstPos >= 32
Conversion.java,byteArrayToShort,src,byte[],0,RET,$.length == 0
Conversion.java,byteArrayToShort,srcPos,int,0,RET,$ == 0
Conversion.java,byteArrayToShort,dstPos,int,0,IllegalArgumentException,(nBytes - 1) * 8 + $ >= 16
Conversion.java,byteArrayToShort,nBytes,int,0,IllegalArgumentException,($ - 1) * 8 + dstPos >= 16
Conversion.java,hexToLong,dstPos,int,0,IllegalArgumentException,(nHex - 1) * 4 + $ >= 64
Conversion.java,hexToLong,nHex,int,0,IllegalArgumentException,($ - 1) * 4 + dstPos >= 64
Conversion.java,hexToInt,dstPos,int,0,IllegalArgumentException,(nHex - 1) * 4 + $ >= 32
Conversion.java,hexToInt,nHex,int,0,IllegalArgumentException,($ - 1) * 4 + dstPos >= 32
Conversion.java,hexToShort,dstPos,int,0,IllegalArgumentException,(nHex - 1) * 4 + $ >= 16
Conversion.java,hexToShort,nHex,int,0,IllegalArgumentException,($ - 1) * 4 + dstPos >= 16
Conversion.java,hexToByte,dstPos,int,0,IllegalArgumentException,(nHex - 1) * 4 + $ >= 8
Conversion.java,hexToByte,nHex,int,0,IllegalArgumentException,($ - 1) * 4 + dstPos >= 8
Conversion.java,binaryToLong,src,boolean[],0,RET,$.length == 0
Conversion.java,binaryToLong,srcPos,int,0,RET,$ == 0
Conversion.java,binaryToLong,nBools,int,0,IllegalArgumentException,$ - 1 + dstPos >= 64
Conversion.java,binaryToLong,dstPos,int,0,IllegalArgumentException,nBools - 1 + $ >= 64
Conversion.java,binaryToInt,src,boolean[],0,RET,$.length == 0
Conversion.java,binaryToInt,srcPos,int,0,RET,$ == 0
Conversion.java,binaryToInt,nBools,int,0,IllegalArgumentException,$ - 1 + dstPos >= 32
Conversion.java,binaryToInt,dstPos,int,0,IllegalArgumentException,nBools - 1 + $ >= 32
Conversion.java,binaryToShort,src,boolean[],0,RET,$.length == 0
Conversion.java,binaryToShort,srcPos,int,0,RET,$ == 0
Conversion.java,binaryToShort,nBools,int,0,IllegalArgumentException,$ - 1 + dstPos >= 16
Conversion.java,binaryToShort,dstPos,int,0,IllegalArgumentException,nBools - 1 + $ >= 16
Conversion.java,binaryToByte,src,boolean[],0,RET,$.length == 0
Conversion.java,binaryToByte,srcPos,int,0,RET,$ == 0
Conversion.java,binaryToByte,nBools,int,0,IllegalArgumentException,$ - 1 + dstPos >= 8
Conversion.java,binaryToByte,dstPos,int,0,IllegalArgumentException,nBools - 1 + $ >= 8
Conversion.java,longToIntArray,nInts,int,0,IllegalArgumentException,($ - 1) * 32 + srcPos >= 64
Conversion.java,longToIntArray,srcPos,int,0,IllegalArgumentException,(nInts - 1) * 32 + $ >= 64
Conversion.java,longToShortArray,srcPos,int,0,IllegalArgumentException,(nShorts - 1) * 16 + $ >= 64
Conversion.java,longToShortArray,nShorts,int,0,IllegalArgumentException,($ - 1) * 16 + srcPos >= 64
Conversion.java,intToShortArray,srcPos,int,0,IllegalArgumentException,(nShorts - 1) * 16 + $ >= 32
Conversion.java,intToShortArray,nShorts,int,0,IllegalArgumentException,($ - 1) * 16 + srcPos >= 32
Conversion.java,longToByteArray,nBytes,int,0,IllegalArgumentException,($ - 1) * 8 + srcPos >= 64
Conversion.java,longToByteArray,srcPos,int,0,IllegalArgumentException,(nBytes - 1) * 8 + $ >= 64
Conversion.java,intToByteArray,nBytes,int,0,IllegalArgumentException,($ - 1) * 8 + srcPos >= 32
Conversion.java,intToByteArray,srcPos,int,0,IllegalArgumentException,(nBytes - 1) * 8 + $ >= 32
Conversion.java,shortToByteArray,nBytes,int,0,IllegalArgumentException,($ - 1) * 8 + srcPos >= 16
Conversion.java,shortToByteArray,srcPos,int,0,IllegalArgumentException,(nBytes - 1) * 8 + $ >= 16
Conversion.java,longToHex,srcPos,int,0,IllegalArgumentException,(nHexs - 1) * 4 + $ >= 64
Conversion.java,longToHex,nHexs,int,0,IllegalArgumentException,($ - 1) * 4 + srcPos >= 64
Conversion.java,longToHex,dstPos,int,1,DEF,$ + i == append
Conversion.java,longToHex,i,int,1,DEF,dstPos + $ == append
Conversion.java,intToHex,srcPos,int,0,IllegalArgumentException,(nHexs - 1) * 4 + $ >= 32
Conversion.java,intToHex,nHexs,int,0,IllegalArgumentException,($ - 1) * 4 + srcPos >= 32
Conversion.java,intToHex,dstPos,int,1,DEF,$ + i == append
Conversion.java,intToHex,i,int,1,DEF,dstPos + $ == append
Conversion.java,shortToHex,srcPos,int,0,IllegalArgumentException,(nHexs - 1) * 4 + $ >= 16
Conversion.java,shortToHex,nHexs,int,0,IllegalArgumentException,($ - 1) * 4 + srcPos >= 16
Conversion.java,shortToHex,dstPos,int,1,DEF,$ + i == append
Conversion.java,shortToHex,i,int,1,DEF,dstPos + $ == append
Conversion.java,byteToHex,srcPos,int,0,IllegalArgumentException,(nHexs - 1) * 4 + $ >= 8
Conversion.java,byteToHex,nHexs,int,0,IllegalArgumentException,($ - 1) * 4 + srcPos >= 8
Conversion.java,byteToHex,dstPos,int,1,DEF,$ + i == append
Conversion.java,byteToHex,i,int,1,DEF,dstPos + $ == append
Conversion.java,longToBinary,nBools,int,0,IllegalArgumentException,$ - 1 + srcPos >= 64
Conversion.java,longToBinary,srcPos,int,0,IllegalArgumentException,nBools - 1 + $ >= 64
Conversion.java,intToBinary,nBools,int,0,IllegalArgumentException,$ - 1 + srcPos >= 32
Conversion.java,intToBinary,srcPos,int,0,IllegalArgumentException,nBools - 1 + $ >= 32
Conversion.java,shortToBinary,nBools,int,0,IllegalArgumentException,$ - 1 + srcPos >= 16
Conversion.java,shortToBinary,srcPos,int,0,IllegalArgumentException,nBools - 1 + $ >= 16
Conversion.java,byteToBinary,nBools,int,0,IllegalArgumentException,$ - 1 + srcPos >= 8
Conversion.java,byteToBinary,srcPos,int,0,IllegalArgumentException,nBools - 1 + $ >= 8
Conversion.java,uuidToByteArray,nBytes,int,0,IllegalArgumentException,$ > 16
Conversion.java,uuidToByteArray,nBytes,int,0,DEF,$ >= 8
Conversion.java,byteArrayToUuid,srcPos,int,0,IllegalArgumentException,src.length - $ < 16
Conversion.java,byteArrayToUuid,src,byte[],0,IllegalArgumentException,$.length - srcPos < 16
FormattableUtils.java,append,precision,int,0,DEF,$ >= 0
StrSubstitutor.java,replace,valueProperties,Properties,0,RET,$ == null
StrSubstitutor.java,replace,source,String,0,RET,$ == null
StrSubstitutor.java,replace,buf,StrBuilder,0,RET,substitute($, 0, source.length()) == false
StrSubstitutor.java,replace,source,String,0,RET,substitute(buf, 0, $.length()) == false
StrSubstitutor.java,replace,source,String,0,RET,$ == null
StrSubstitutor.java,replace,buf,StrBuilder,0,RET,substitute($, 0, length) == false
StrSubstitutor.java,replace,length,int,0,RET,substitute(buf, 0, $) == false
StrSubstitutor.java,replace,source,char[],0,RET,$ == null
StrSubstitutor.java,replace,source,char[],0,RET,$ == null
StrSubstitutor.java,replace,source,StringBuffer,0,RET,$ == null
StrSubstitutor.java,replace,source,StringBuffer,0,RET,$ == null
StrSubstitutor.java,replace,source,StrBuilder,0,RET,$ == null
StrSubstitutor.java,replace,source,StrBuilder,0,RET,$ == null
StrSubstitutor.java,replace,source,Object,0,RET,$ == null
StrSubstitutor.java,replaceIn,source,StringBuffer,0,RET,$ == null
StrSubstitutor.java,replaceIn,source,StringBuffer,0,RET,$ == null
StrSubstitutor.java,replaceIn,buf,StrBuilder,0,RET,substitute($, 0, length) == false
StrSubstitutor.java,replaceIn,length,int,0,RET,substitute(buf, 0, $) == false
StrSubstitutor.java,replaceIn,source,StrBuilder,0,RET,$ == null
StrSubstitutor.java,replaceIn,source,StrBuilder,0,RET,$ == null
StrSubstitutor.java,substitute,startMatchLen,int,1,DEF,$ == 0
StrSubstitutor.java,substitute,pos,int,1,DEF,$ > offset
StrSubstitutor.java,substitute,pos,int,1,DEF,chars[$ - 1] == escape
StrSubstitutor.java,substitute,chars,char[],1,DEF,$[pos - 1] == escape
StrSubstitutor.java,substitute,prefixMatcher,StrMatcher,0,DEF,(endMatchLen = $.isMatch(chars, pos, offset, bufEnd)) != 0
StrSubstitutor.java,substitute,bufEnd,int,0,DEF,(endMatchLen = prefixMatcher.isMatch(chars, pos, offset, $)) != 0
StrSubstitutor.java,substitute,offset,int,0,DEF,(endMatchLen = prefixMatcher.isMatch(chars, pos, $, bufEnd)) != 0
StrSubstitutor.java,substitute,pos,int,0,DEF,(endMatchLen = prefixMatcher.isMatch(chars, $, offset, bufEnd)) != 0
StrSubstitutor.java,substitute,endMatchLen,int,0,DEF,($ = prefixMatcher.isMatch(chars, pos, offset, bufEnd)) != 0
StrSubstitutor.java,substitute,chars,char[],0,DEF,(endMatchLen = prefixMatcher.isMatch($, pos, offset, bufEnd)) != 0
StrSubstitutor.java,substitute,endMatchLen,int,1,DEF,$ == 0
StrSubstitutor.java,substitute,nestedVarCount,int,1,DEF,$ == 0
StrSubstitutor.java,substitute,priorVariables,List<String>,0,DEF,$ == null
StrSubstitutor.java,substitute,varValue,String,0,DEF,$ != null
StrSubstitutor.java,checkCyclicSubstitution,varName,String,0,RET,priorVariables.contains($) == false
StrSubstitutor.java,checkCyclicSubstitution,priorVariables,List<String>,0,RET,$.contains(varName) == false
StrSubstitutor.java,resolveVariable,resolver,StrLookup<>,0,RET,$ == null
StrSubstitutor.java,setVariablePrefixMatcher,prefixMatcher,StrMatcher,0,IllegalArgumentException,$ == null
StrSubstitutor.java,setVariablePrefix,prefix,String,0,IllegalArgumentException,$ == null
StrSubstitutor.java,setVariableSuffixMatcher,suffixMatcher,StrMatcher,0,IllegalArgumentException,$ == null
StrSubstitutor.java,setVariableSuffix,suffix,String,0,IllegalArgumentException,$ == null
StrMatcher.java,charSetMatcher,chars,char[],0,RET,$ == null
StrMatcher.java,charSetMatcher,chars,char[],0,RET,$.length == 0
StrMatcher.java,charSetMatcher,chars,char[],0,RET,$.length == 1
StrMatcher.java,charSetMatcher,chars,String,0,RET,$.length() == 1
StrMatcher.java,isMatch,len,int,0,RET,pos + $ > bufferEnd
StrMatcher.java,isMatch,pos,int,0,RET,$ + len > bufferEnd
UnicodeUnescaper.java,translate,input,CharSequence,0,IllegalArgumentException:RET,$.charAt(index) == '\\'
UnicodeUnescaper.java,translate,index,int,0,IllegalArgumentException:RET,input.charAt($) == '\\'
UnicodeUnescaper.java,translate,input,CharSequence,0,IllegalArgumentException:RET,$.charAt(index + 1) == 'u'
UnicodeUnescaper.java,translate,index,int,0,IllegalArgumentException:RET,input.charAt($ + 1) == 'u'
UnicodeUnescaper.java,translate,input,CharSequence,0,DEF,$.charAt(index + i) == '+'
UnicodeUnescaper.java,translate,index,int,0,DEF,input.charAt($ + i) == '+'
UnicodeUnescaper.java,translate,i,int,0,DEF,input.charAt(index + $) == '+'
OctalUnescaper.java,translate,input,CharSequence,0,RET,$.charAt(index) == '\\'
OctalUnescaper.java,translate,index,int,0,RET,input.charAt($) == '\\'
OctalUnescaper.java,translate,input,CharSequence,0,DEF,Integer.parseInt($.subSequence(start, end).toString(), 10) > OCTAL_MAX
OctalUnescaper.java,translate,start,int,0,DEF,Integer.parseInt(input.subSequence($, end).toString(), 10) > OCTAL_MAX
OctalUnescaper.java,translate,end,int,0,DEF,Integer.parseInt(input.subSequence(start, $).toString(), 10) > OCTAL_MAX
UnicodeEscaper.java,translate,codepoint,int,0,RET,$ < below
UnicodeEscaper.java,translate,codepoint,int,0,RET,$ > above
UnicodeEscaper.java,translate,codepoint,int,0,RET,$ >= below
UnicodeEscaper.java,translate,codepoint,int,0,RET,$ <= above
UnicodeEscaper.java,translate,codepoint,int,1,DEF,$ > 0xffff
UnicodeEscaper.java,translate,codepoint,int,1,DEF,$ > 0xfff
UnicodeEscaper.java,translate,codepoint,int,1,DEF,$ > 0xff
UnicodeEscaper.java,translate,codepoint,int,1,DEF,$ > 0xf
NumericEntityUnescaper.java,NumericEntityUnescaper,options,UNKNOWN,1,DEF,$.length > 0
NumericEntityUnescaper.java,translate,input,CharSequence,0,IllegalArgumentException:RET,$.charAt(index) == '&'
NumericEntityUnescaper.java,translate,index,int,0,IllegalArgumentException:RET,input.charAt($) == '&'
NumericEntityUnescaper.java,translate,input,CharSequence,0,IllegalArgumentException:RET,$.charAt(index + 1) == '#'
NumericEntityUnescaper.java,translate,index,int,0,IllegalArgumentException:RET,input.charAt($ + 1) == '#'
NumericEntityUnescaper.java,translate,firstChar,char,0,RET,$ == 'x'
NumericEntityUnescaper.java,translate,firstChar,char,0,RET,$ == 'X'
NumericEntityUnescaper.java,translate,start,int,0,RET,$ == seqEnd
NumericEntityUnescaper.java,translate,entityValue,int,1,DEF,$ > 0xFFFF
CharSequenceTranslator.java,translate,input,CharSequence,0,RET,$ == null
CharSequenceTranslator.java,translate,out,Writer,0,IllegalArgumentException,$ == null
CharSequenceTranslator.java,translate,input,CharSequence,0,RET,$ == null
CharSequenceTranslator.java,translate,consumed,int,0,DEF,$ == 0
LookupTranslator.java,LookupTranslator,lookup,CharSequence[][],0,DEF,$ != null
LookupTranslator.java,LookupTranslator,sz,int,0,DEF,$ < _shortest
LookupTranslator.java,LookupTranslator,sz,int,0,DEF,$ > _longest
LookupTranslator.java,translate,result,CharSequence,0,RET,$ != null
AggregateTranslator.java,translate,consumed,int,0,RET,$ != 0
NumericEntityEscaper.java,translate,codepoint,int,0,RET,$ < below
NumericEntityEscaper.java,translate,codepoint,int,0,RET,$ > above
NumericEntityEscaper.java,translate,codepoint,int,0,RET,$ >= below
NumericEntityEscaper.java,translate,codepoint,int,0,RET,$ <= above
StrBuilder.java,StrBuilder,initialCapacity,int,0,DEF,$ <= 0
StrBuilder.java,StrBuilder,str,String,1,DEF,$ == null
StrBuilder.java,setNullText,nullText,String,0,DEF,$ != null
StrBuilder.java,setNullText,nullText,String,0,DEF,$.length() == 0
StrBuilder.java,setLength,length,int,0,StringIndexOutOfBoundsException,$ < 0
StrBuilder.java,setLength,length,int,1,DEF,$ < size
StrBuilder.java,setLength,length,int,0,DEF,$ > size
StrBuilder.java,ensureCapacity,capacity,int,0,DEF,$ > buffer.length
StrBuilder.java,charAt,index,int,0,StringIndexOutOfBoundsException,$ < 0
StrBuilder.java,setCharAt,index,int,0,StringIndexOutOfBoundsException,$ < 0
StrBuilder.java,deleteCharAt,index,int,0,StringIndexOutOfBoundsException,$ < 0
StrBuilder.java,deleteCharAt,index,int,0,StringIndexOutOfBoundsException,$ >= size
StrBuilder.java,toCharArray,size,int,0,RET,$ == 0
StrBuilder.java,toCharArray,len,int,0,RET,$ == 0
StrBuilder.java,getChars,destination,char[],0,DEF,$ == null
StrBuilder.java,getChars,destination,char[],0,DEF,$.length < len
StrBuilder.java,getChars,startIndex,int,0,StringIndexOutOfBoundsException,$ < 0
StrBuilder.java,getChars,endIndex,int,0,StringIndexOutOfBoundsException,$ < 0
StrBuilder.java,getChars,startIndex,int,0,StringIndexOutOfBoundsException,$ > endIndex
StrBuilder.java,appendNewLine,newLine,String,0,RET,$ == null
StrBuilder.java,appendNull,nullText,String,0,RET,$ == null
StrBuilder.java,append,obj,Object,0,RET,$ == null
StrBuilder.java,append,seq,CharSequence,0,RET,$ == null
StrBuilder.java,append,seq,CharSequence,0,RET,$ == null
StrBuilder.java,append,str,String,0,RET,$ == null
StrBuilder.java,append,strLen,int,0,DEF,$ > 0
StrBuilder.java,append,str,String,0,RET,$ == null
StrBuilder.java,append,startIndex,int,0,StringIndexOutOfBoundsException,$ < 0
StrBuilder.java,append,length,int,0,StringIndexOutOfBoundsException,$ < 0
StrBuilder.java,append,length,int,0,DEF,$ > 0
StrBuilder.java,append,str,StringBuffer,0,RET,$ == null
StrBuilder.java,append,strLen,int,0,DEF,$ > 0
StrBuilder.java,append,str,StringBuffer,0,RET,$ == null
StrBuilder.java,append,startIndex,int,0,StringIndexOutOfBoundsException,$ < 0
StrBuilder.java,append,length,int,0,StringIndexOutOfBoundsException,$ < 0
StrBuilder.java,append,length,int,0,DEF,$ > 0
StrBuilder.java,append,str,StrBuilder,0,RET,$ == null
StrBuilder.java,append,strLen,int,0,DEF,$ > 0
StrBuilder.java,append,str,StrBuilder,0,RET,$ == null
StrBuilder.java,append,startIndex,int,0,StringIndexOutOfBoundsException,$ < 0
StrBuilder.java,append,length,int,0,StringIndexOutOfBoundsException,$ < 0
StrBuilder.java,append,length,int,0,DEF,$ > 0
StrBuilder.java,append,chars,char[],0,RET,$ == null
StrBuilder.java,append,strLen,int,0,DEF,$ > 0
StrBuilder.java,append,chars,char[],0,RET,$ == null
StrBuilder.java,append,startIndex,int,0,StringIndexOutOfBoundsException,$ < 0
StrBuilder.java,append,startIndex,int,0,StringIndexOutOfBoundsException,$ > chars.length
StrBuilder.java,append,length,int,0,StringIndexOutOfBoundsException,$ < 0
StrBuilder.java,append,startIndex,int,0,StringIndexOutOfBoundsException,($ + length) > chars.length
StrBuilder.java,append,length,int,0,StringIndexOutOfBoundsException,(startIndex + $) > chars.length
StrBuilder.java,append,length,int,0,DEF,$ > 0
StrBuilder.java,appendAll,array,T[],0,DEF,$ != null
StrBuilder.java,appendAll,array,T[],0,DEF,$.length > 0
StrBuilder.java,appendAll,iterable,Iterable<>,0,DEF,$ != null
StrBuilder.java,appendAll,it,Iterator<>,0,DEF,$ != null
StrBuilder.java,appendWithSeparators,array,Object[],0,DEF,$ != null
StrBuilder.java,appendWithSeparators,array,Object[],0,DEF,$.length > 0
StrBuilder.java,appendWithSeparators,iterable,Iterable<>,0,DEF,$ != null
StrBuilder.java,appendWithSeparators,it,Iterator<>,0,DEF,$ != null
StrBuilder.java,appendSeparator,str,String,0,DEF,$ != null
StrBuilder.java,appendSeparator,separator,String,0,DEF,$ != null
StrBuilder.java,appendSeparator,loopIndex,int,0,DEF,$ > 0
StrBuilder.java,appendSeparator,loopIndex,int,0,DEF,$ > 0
StrBuilder.java,appendPadding,length,int,0,DEF,$ >= 0
StrBuilder.java,appendFixedWidthPadLeft,width,int,0,DEF,$ > 0
StrBuilder.java,appendFixedWidthPadLeft,str,String,0,DEF,$ == null
StrBuilder.java,appendFixedWidthPadLeft,strLen,int,1,DEF,$ >= width
StrBuilder.java,appendFixedWidthPadRight,width,int,0,DEF,$ > 0
StrBuilder.java,appendFixedWidthPadRight,str,String,0,DEF,$ == null
StrBuilder.java,appendFixedWidthPadRight,strLen,int,1,DEF,$ >= width
StrBuilder.java,insert,obj,Object,0,RET,$ == null
StrBuilder.java,insert,str,String,0,DEF,$ == null
StrBuilder.java,insert,strLen,int,0,DEF,$ > 0
StrBuilder.java,insert,chars,char[],0,RET,$ == null
StrBuilder.java,insert,len,int,0,DEF,$ > 0
StrBuilder.java,insert,chars,char[],0,RET,$ == null
StrBuilder.java,insert,offset,int,0,StringIndexOutOfBoundsException,$ < 0
StrBuilder.java,insert,offset,int,0,StringIndexOutOfBoundsException,$ > chars.length
StrBuilder.java,insert,length,int,0,StringIndexOutOfBoundsException,$ < 0
StrBuilder.java,insert,offset,int,0,StringIndexOutOfBoundsException,$ + length > chars.length
StrBuilder.java,insert,length,int,0,StringIndexOutOfBoundsException,offset + $ > chars.length
StrBuilder.java,insert,length,int,0,DEF,$ > 0
StrBuilder.java,delete,len,int,0,DEF,$ > 0
StrBuilder.java,deleteAll,i,int,0,DEF,buffer[$] == ch
StrBuilder.java,deleteAll,buffer,char[],0,DEF,$[i] == ch
StrBuilder.java,deleteAll,i,int,0,DEF,buffer[$] != ch
StrBuilder.java,deleteAll,buffer,char[],0,DEF,$[i] != ch
StrBuilder.java,deleteFirst,i,int,0,DEF,buffer[$] == ch
StrBuilder.java,deleteFirst,buffer,char[],0,DEF,$[i] == ch
StrBuilder.java,deleteAll,len,int,0,DEF,$ > 0
StrBuilder.java,deleteFirst,len,int,0,DEF,$ > 0
StrBuilder.java,deleteFirst,index,int,0,DEF,$ >= 0
StrBuilder.java,replaceImpl,insertLen,int,0,DEF,$ != removeLen
StrBuilder.java,replaceImpl,insertLen,int,0,DEF,$ > 0
StrBuilder.java,replaceAll,search,char,0,DEF,$ != replace
StrBuilder.java,replaceAll,i,int,0,DEF,buffer[$] == search
StrBuilder.java,replaceAll,buffer,char[],0,DEF,$[i] == search
StrBuilder.java,replaceFirst,search,char,0,DEF,$ != replace
StrBuilder.java,replaceFirst,i,int,0,DEF,buffer[$] == search
StrBuilder.java,replaceFirst,buffer,char[],0,DEF,$[i] == search
StrBuilder.java,replaceAll,searchLen,int,0,DEF,$ > 0
StrBuilder.java,replaceFirst,searchLen,int,0,DEF,$ > 0
StrBuilder.java,replaceFirst,index,int,0,DEF,$ >= 0
StrBuilder.java,replaceImpl,matcher,StrMatcher,0,RET,$ == null
StrBuilder.java,replaceImpl,size,int,0,RET,$ == 0
StrBuilder.java,replaceImpl,removeLen,int,0,DEF,$ > 0
StrBuilder.java,replaceImpl,replaceCount,int,0,DEF,$ > 0
StrBuilder.java,reverse,size,int,0,RET,$ == 0
StrBuilder.java,trim,size,int,0,RET,$ == 0
StrBuilder.java,trim,len,int,0,DEF,$ < size
StrBuilder.java,trim,pos,int,0,DEF,$ > 0
StrBuilder.java,startsWith,str,String,0,RET,$ == null
StrBuilder.java,startsWith,len,int,0,RET,$ == 0
StrBuilder.java,startsWith,len,int,0,RET,$ > size
StrBuilder.java,endsWith,str,String,0,RET,$ == null
StrBuilder.java,endsWith,len,int,0,RET,$ == 0
StrBuilder.java,endsWith,len,int,0,RET,$ > size
StrBuilder.java,subSequence,startIndex,int,0,StringIndexOutOfBoundsException,$ < 0
StrBuilder.java,subSequence,endIndex,int,0,StringIndexOutOfBoundsException,$ > size
StrBuilder.java,subSequence,startIndex,int,0,StringIndexOutOfBoundsException,$ > endIndex
StrBuilder.java,leftString,length,int,1,RET,$ <= 0
StrBuilder.java,leftString,length,int,1,RET,$ >= size
StrBuilder.java,rightString,length,int,1,RET,$ <= 0
StrBuilder.java,rightString,length,int,1,RET,$ >= size
StrBuilder.java,midString,index,int,0,DEF,$ < 0
StrBuilder.java,midString,length,int,0,RET,$ <= 0
StrBuilder.java,midString,index,int,0,RET,$ >= size
StrBuilder.java,contains,thisBuf,char[],0,RET,$[i] == ch
StrBuilder.java,contains,i,int,0,RET,thisBuf[$] == ch
StrBuilder.java,indexOf,startIndex,int,0,RET,$ >= size
StrBuilder.java,indexOf,thisBuf,char[],0,RET,$[i] == ch
StrBuilder.java,indexOf,i,int,0,RET,thisBuf[$] == ch
StrBuilder.java,indexOf,str,String,0,RET,$ == null
StrBuilder.java,indexOf,startIndex,int,0,RET,$ >= size
StrBuilder.java,indexOf,strLen,int,0,RET,$ == 1
StrBuilder.java,indexOf,strLen,int,0,RET,$ == 0
StrBuilder.java,indexOf,strLen,int,0,RET,$ > size
StrBuilder.java,indexOf,matcher,StrMatcher,0,RET,$ == null
StrBuilder.java,indexOf,startIndex,int,0,RET,$ >= size
StrBuilder.java,indexOf,buf,char[],0,RET,matcher.isMatch($, i, startIndex, len) > 0
StrBuilder.java,indexOf,startIndex,int,0,RET,matcher.isMatch(buf, i, $, len) > 0
StrBuilder.java,indexOf,len,int,0,RET,matcher.isMatch(buf, i, startIndex, $) > 0
StrBuilder.java,indexOf,i,int,0,RET,matcher.isMatch(buf, $, startIndex, len) > 0
StrBuilder.java,indexOf,matcher,StrMatcher,0,RET,$.isMatch(buf, i, startIndex, len) > 0
StrBuilder.java,lastIndexOf,startIndex,int,0,RET,$ < 0
StrBuilder.java,lastIndexOf,i,int,0,RET,buffer[$] == ch
StrBuilder.java,lastIndexOf,buffer,char[],0,RET,$[i] == ch
StrBuilder.java,lastIndexOf,str,String,0,RET,$ == null
StrBuilder.java,lastIndexOf,startIndex,int,0,RET,$ < 0
StrBuilder.java,lastIndexOf,strLen,int,1,RET,$ > 0
StrBuilder.java,lastIndexOf,strLen,int,1,RET,$ <= size
StrBuilder.java,lastIndexOf,strLen,int,0,RET,$ == 1
StrBuilder.java,lastIndexOf,strLen,int,0,RET,$ == 0
StrBuilder.java,lastIndexOf,matcher,StrMatcher,0,RET,$ == null
StrBuilder.java,lastIndexOf,startIndex,int,0,RET,$ < 0
StrBuilder.java,lastIndexOf,buf,char[],0,RET,matcher.isMatch($, i, 0, endIndex) > 0
StrBuilder.java,lastIndexOf,endIndex,int,0,RET,matcher.isMatch(buf, i, 0, $) > 0
StrBuilder.java,lastIndexOf,i,int,0,RET,matcher.isMatch(buf, $, 0, endIndex) > 0
StrBuilder.java,lastIndexOf,matcher,StrMatcher,0,RET,$.isMatch(buf, i, 0, endIndex) > 0
StrBuilder.java,equalsIgnoreCase,c1,char,0,RET,$ != c2
StrBuilder.java,equals,obj,null,0,RET,$ instanceof StrBuilder
StrBuilder.java,validateRange,startIndex,int,0,StringIndexOutOfBoundsException,$ < 0
StrBuilder.java,validateRange,endIndex,int,0,DEF,$ > size
StrBuilder.java,validateRange,startIndex,int,0,StringIndexOutOfBoundsException,$ > endIndex
StrBuilder.java,validateIndex,index,int,0,StringIndexOutOfBoundsException,$ < 0
StrBuilder.java,validateIndex,index,int,0,StringIndexOutOfBoundsException,$ > size
StrBuilder.java,tokenize,chars,char[],1,RET,$ == null
StrBuilder.java,getContent,str,String,1,RET,$ == null
StrBuilder.java,read,off,int,0,IndexOutOfBoundsException,$ < 0
StrBuilder.java,read,len,int,0,IndexOutOfBoundsException,$ < 0
StrBuilder.java,read,off,int,0,IndexOutOfBoundsException,$ > b.length
StrBuilder.java,read,len,int,0,IndexOutOfBoundsException,(off + $) > b.length
StrBuilder.java,read,off,int,0,IndexOutOfBoundsException,($ + len) > b.length
StrBuilder.java,read,len,int,0,IndexOutOfBoundsException,(off + $) < 0
StrBuilder.java,read,off,int,0,IndexOutOfBoundsException,($ + len) < 0
StrBuilder.java,read,len,int,0,RET,$ == 0
StrBuilder.java,skip,n,long,0,RET,$ < 0
StrLookup.java,lookup,map,Map<String,V>,0,RET,$ == null
StrLookup.java,lookup,obj,Object,0,RET,$ == null
StrTokenizer.java,StrTokenizer,input,String,1,DEF,$ != null
StrTokenizer.java,reset,input,String,1,DEF,$ != null
StrTokenizer.java,checkTokenized,tokens,String[],0,DEF,$ == null
StrTokenizer.java,checkTokenized,chars,char[],1,DEF,$ == null
StrTokenizer.java,tokenize,chars,char[],0,RET,$ == null
StrTokenizer.java,tokenize,count,int,0,RET,$ == 0
StrTokenizer.java,tokenize,pos,int,0,DEF,$ >= count
StrTokenizer.java,readNextToken,removeLen,int,0,DEF,$ == 0
StrTokenizer.java,readNextToken,len,int,0,DEF,getDelimiterMatcher().isMatch(chars, start, start, $) > 0
StrTokenizer.java,readNextToken,start,int,0,DEF,getDelimiterMatcher().isMatch(chars, $, $, len) > 0
StrTokenizer.java,readNextToken,chars,char[],0,DEF,getDelimiterMatcher().isMatch($, start, start, len) > 0
StrTokenizer.java,readNextToken,len,int,0,DEF,getQuoteMatcher().isMatch(chars, start, start, $) > 0
StrTokenizer.java,readNextToken,start,int,0,DEF,getQuoteMatcher().isMatch(chars, $, $, len) > 0
StrTokenizer.java,readNextToken,chars,char[],0,DEF,getQuoteMatcher().isMatch($, start, start, len) > 0
StrTokenizer.java,readNextToken,start,int,0,RET,$ >= len
StrTokenizer.java,readNextToken,delimLen,int,0,RET,$ > 0
StrTokenizer.java,readNextToken,quoteLen,int,0,RET,$ > 0
StrTokenizer.java,readWithQuotes,delimLen,int,0,RET,$ > 0
StrTokenizer.java,readWithQuotes,quoteLen,int,0,DEF,$ > 0
StrTokenizer.java,readWithQuotes,ignoredLen,int,0,DEF,$ > 0
StrTokenizer.java,readWithQuotes,trimmedLen,int,0,DEF,$ > 0
StrTokenizer.java,isQuote,pos,int,0,RET,$ + i >= len
StrTokenizer.java,isQuote,i,int,0,RET,pos + $ >= len
StrTokenizer.java,setDelimiterMatcher,delim,StrMatcher,1,DEF,$ == null
StrTokenizer.java,setQuoteMatcher,quote,StrMatcher,0,DEF,$ != null
StrTokenizer.java,setIgnoredMatcher,ignored,StrMatcher,0,DEF,$ != null
StrTokenizer.java,setTrimmerMatcher,trimmer,StrMatcher,0,DEF,$ != null
StrTokenizer.java,getContent,chars,char[],0,RET,$ == null
StrTokenizer.java,cloneReset,cloned,StrTokenizer,0,DEF,$.chars != null
StrTokenizer.java,toString,tokens,String[],0,RET,$ == null
ExtendedMessageFormat.java,applyPattern,registry,Map<String,>,0,RET,$ == null
ExtendedMessageFormat.java,applyPattern,c,char[],0,DEF,$[pos.getIndex()] == START_FMT
ExtendedMessageFormat.java,applyPattern,pos,ParsePosition,0,DEF,c[$.getIndex()] == START_FMT
ExtendedMessageFormat.java,applyPattern,format,Format,0,DEF,$ == null
ExtendedMessageFormat.java,applyPattern,c,char[],0,IllegalArgumentException,$[pos.getIndex()] != END_FE
ExtendedMessageFormat.java,applyPattern,pos,ParsePosition,0,IllegalArgumentException,c[$.getIndex()] != END_FE
ExtendedMessageFormat.java,applyPattern,f,Format,0,DEF,$ != null
ExtendedMessageFormat.java,equals,obj,Object,0,RET,$ == null
ExtendedMessageFormat.java,getFormat,registry,Map<String,>,0,RET,$ != null
ExtendedMessageFormat.java,getFormat,i,int,0,DEF,$ > 0
ExtendedMessageFormat.java,getFormat,factory,FormatFactory,0,RET,$ != null
ExtendedMessageFormat.java,readArgumentIndex,c,char,0,DEF,$ != START_FMT
ExtendedMessageFormat.java,readArgumentIndex,c,char,0,DEF,$ != END_FE
ExtendedMessageFormat.java,readArgumentIndex,c,char,0,RET,$ == START_FMT
ExtendedMessageFormat.java,readArgumentIndex,c,char,0,RET,$ == END_FE
ExtendedMessageFormat.java,readArgumentIndex,result,StringBuilder,0,RET,$.length() > 0
ExtendedMessageFormat.java,parseFormatDescription,depth,int,0,RET,$ == 0
ExtendedMessageFormat.java,insertFormats,depth,int,0,DEF,$ == 1
ExtendedMessageFormat.java,insertFormats,customPattern,String,0,DEF,$ != null
ExtendedMessageFormat.java,appendQuotedString,c,char[],0,RET,$[start] == QUOTE
ExtendedMessageFormat.java,appendQuotedString,start,int,0,RET,c[$] == QUOTE
ExtendedMessageFormat.java,containsElements,coll,Collection<>,0,RET,$ == null
ExtendedMessageFormat.java,containsElements,name,Object,0,RET,$ != null
WordUtils.java,wrap,str,String,0,RET,$ == null
WordUtils.java,wrap,newLineStr,String,0,DEF,$ == null
WordUtils.java,wrap,wrapLength,int,0,DEF,$ < 1
WordUtils.java,wrap,str,String,0,DEF,$.charAt(offset) == ' '
WordUtils.java,wrap,offset,int,0,DEF,str.charAt($) == ' '
WordUtils.java,wrap,spaceToWrapAt,int,1,DEF,$ >= offset
WordUtils.java,wrap,spaceToWrapAt,int,1,DEF,$ >= 0
WordUtils.java,capitalize,delimLen,int,0,RET,$ == 0
WordUtils.java,capitalizeFully,delimLen,int,0,RET,$ == 0
WordUtils.java,uncapitalize,delimLen,int,0,RET,$ == 0
WordUtils.java,initials,delimiters,char[],0,RET,$ != null
WordUtils.java,initials,delimiters,char[],0,RET,$.length == 0
WordUtils.java,isDelimiter,delimiters,char[],0,RET,$ == null
WordUtils.java,isDelimiter,ch,char,0,RET,$ == delimiter
CharRange.java,CharRange,start,char,0,DEF,$ > end
CharRange.java,contains,range,CharRange,0,IllegalArgumentException,$ == null
CharRange.java,equals,obj,Object,0,RET,$ instanceof CharRange == false
CharRange.java,equals,obj,null,0,RET,$ instanceof CharRange
CharRange.java,toString,iToString,String,0,DEF,$ == null
CharRange.java,toString,start,char,0,DEF,$ != end
CharRange.java,CharacterIterator,range,CharRange,1,DEF,$.start == 0
CharRange.java,CharacterIterator,range,CharRange,1,DEF,$.end == Character.MAX_VALUE
CharRange.java,prepareNext,current,char,1,DEF,$ == Character.MAX_VALUE
CharRange.java,prepareNext,current,char,1,DEF,$ + 1 == range.start
CharRange.java,prepareNext,range,CharRange,1,DEF,$.end == Character.MAX_VALUE
CharRange.java,prepareNext,current,char,1,DEF,$ < range.end
CharRange.java,next,hasNext,boolean,0,NoSuchElementException,$ == false
Triple.java,equals,obj,null,0,RET,$ instanceof Triple<?,?,?>
Pair.java,equals,obj,null,0,RET,$ instanceof Map.Entry<?,?>
SerializationUtils.java,clone,object,T,0,RET,$ == null
SerializationUtils.java,clone,in,ClassLoaderAwareObjectInputStream,0,DEF,$ != null
SerializationUtils.java,serialize,outputStream,OutputStream,0,IllegalArgumentException,$ == null
SerializationUtils.java,serialize,out,ObjectOutputStream,0,DEF,$ != null
SerializationUtils.java,deserialize,inputStream,InputStream,0,IllegalArgumentException,$ == null
SerializationUtils.java,deserialize,in,ObjectInputStream,0,DEF,$ != null
SerializationUtils.java,deserialize,objectData,byte[],0,IllegalArgumentException,$ == null
SerializationUtils.java,resolveClass,cls,Class<>,1,RET,$ != null
Fraction.java,getFraction,denominator,int,0,ArithmeticException,$ == 0
Fraction.java,getFraction,denominator,int,0,ArithmeticException,$ < 0
Fraction.java,getFraction,numerator,int,0,ArithmeticException,$==Integer.MIN_VALUE
Fraction.java,getFraction,denominator,int,0,ArithmeticException,$==Integer.MIN_VALUE
Fraction.java,getFraction,denominator,int,0,ArithmeticException,$ == 0
Fraction.java,getFraction,denominator,int,0,ArithmeticException,$ < 0
Fraction.java,getFraction,numerator,int,0,ArithmeticException,$ < 0
Fraction.java,getFraction,whole,int,1,DEF,$ < 0
Fraction.java,getFraction,numeratorValue,long,0,ArithmeticException,$ < Integer.MIN_VALUE
Fraction.java,getFraction,numeratorValue,long,0,ArithmeticException,$ > Integer.MAX_VALUE
Fraction.java,getReducedFraction,denominator,int,0,ArithmeticException,$ == 0
Fraction.java,getReducedFraction,numerator,int,0,RET,$==0
Fraction.java,getReducedFraction,denominator,int,0,DEF,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,numerator,int,0,DEF,($&1)==0
Fraction.java,getReducedFraction,denominator,int,0,ArithmeticException,$ < 0
Fraction.java,getReducedFraction,numerator,int,0,ArithmeticException,$==Integer.MIN_VALUE
Fraction.java,getReducedFraction,denominator,int,0,ArithmeticException,$==Integer.MIN_VALUE
Fraction.java,getFraction,value,double,0,ArithmeticException,$ > Integer.MAX_VALUE
Fraction.java,getFraction,i,int,0,ArithmeticException,$ == 25
Fraction.java,getFraction,str,String,0,IllegalArgumentException,$ == null
Fraction.java,getFraction,pos,int,0,RET,$ >= 0
Fraction.java,getFraction,pos,int,0,NumberFormatException:RET,$ > 0
Fraction.java,getFraction,pos,int,1,NumberFormatException,$ < 0
Fraction.java,getFraction,pos,int,1,RET,$ < 0
Fraction.java,reduce,numerator,int,0,RET,$ == 0
Fraction.java,reduce,gcd,int,0,RET,$ == 1
Fraction.java,invert,numerator,int,0,ArithmeticException,$ == 0
Fraction.java,invert,numerator,int,0,ArithmeticException,$==Integer.MIN_VALUE
Fraction.java,invert,numerator,int,1,RET,$<0
Fraction.java,negate,numerator,int,0,ArithmeticException,$==Integer.MIN_VALUE
Fraction.java,abs,numerator,int,0,RET,$ >= 0
Fraction.java,pow,power,int,1,RET,$ == 1
Fraction.java,pow,power,int,1,RET,$ == 0
Fraction.java,pow,power,int,1,RET,$ < 0
Fraction.java,pow,power,int,0,RET,$==Integer.MIN_VALUE
Fraction.java,pow,power,int,1,RET,$ % 2 == 0
Fraction.java,greatestCommonDivisor,u,int,0,ArithmeticException:RET,$ == 0
Fraction.java,greatestCommonDivisor,v,int,0,ArithmeticException:RET,$ == 0
Fraction.java,greatestCommonDivisor,u,int,0,ArithmeticException,$ == Integer.MIN_VALUE
Fraction.java,greatestCommonDivisor,v,int,0,ArithmeticException,$ == Integer.MIN_VALUE
Fraction.java,greatestCommonDivisor,u,int,0,RET,Math.abs($) == 1
Fraction.java,greatestCommonDivisor,v,int,0,RET,Math.abs($) == 1
Fraction.java,greatestCommonDivisor,u,int,0,DEF,$>0
Fraction.java,greatestCommonDivisor,v,int,0,DEF,$>0
Fraction.java,greatestCommonDivisor,k,int,0,ArithmeticException,$==31
Fraction.java,greatestCommonDivisor,t,int,1,DEF,$>0
Fraction.java,mulAndCheck,m,long,0,ArithmeticException,$ < Integer.MIN_VALUE
Fraction.java,mulAndCheck,m,long,0,ArithmeticException,$ > Integer.MAX_VALUE
Fraction.java,mulPosAndCheck,m,long,0,ArithmeticException,$ > Integer.MAX_VALUE
Fraction.java,addAndCheck,s,long,0,ArithmeticException,$ < Integer.MIN_VALUE
Fraction.java,addAndCheck,s,long,0,ArithmeticException,$ > Integer.MAX_VALUE
Fraction.java,subAndCheck,s,long,0,ArithmeticException,$ < Integer.MIN_VALUE
Fraction.java,subAndCheck,s,long,0,ArithmeticException,$ > Integer.MAX_VALUE
Fraction.java,addSub,fraction,Fraction,0,IllegalArgumentException,$ == null
Fraction.java,addSub,numerator,int,0,RET,$ == 0
Fraction.java,addSub,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,addSub,d1,int,0,RET,$==1
Fraction.java,addSub,w,BigInteger,0,ArithmeticException,$.bitLength() > 31
Fraction.java,multiplyBy,fraction,Fraction,0,IllegalArgumentException,$ == null
Fraction.java,multiplyBy,numerator,int,0,RET,$ == 0
Fraction.java,multiplyBy,fraction,Fraction,0,RET,$.numerator == 0
Fraction.java,divideBy,fraction,Fraction,0,IllegalArgumentException,$ == null
Fraction.java,divideBy,fraction,Fraction,0,ArithmeticException,$.numerator == 0
Fraction.java,equals,obj,Object,0,RET,$ instanceof Fraction == false
Fraction.java,equals,obj,null,0,RET,$ instanceof Fraction
Fraction.java,hashCode,hashCode,int,0,DEF,$ == 0
Fraction.java,compareTo,numerator,int,0,RET,$ == other.numerator
Fraction.java,compareTo,denominator,int,0,RET,$ == other.denominator
Fraction.java,compareTo,first,long,1,RET,$ == second
Fraction.java,compareTo,first,long,1,RET,$ < second
Fraction.java,toString,toString,String,0,DEF,$ == null
Fraction.java,toProperString,toProperString,String,0,DEF,$ == null
Fraction.java,toProperString,numerator,int,1,DEF,$ == 0
Fraction.java,toProperString,numerator,int,1,DEF,$ == denominator
Fraction.java,toProperString,numerator,int,1,DEF,($>0?-$:$) < -denominator
Fraction.java,toProperString,numerator,int,1,DEF,$>0
Fraction.java,toProperString,properNumerator,int,1,DEF,$ == 0
IEEE754rUtils.java,min,array,double[],1,IllegalArgumentException,$ == null
IEEE754rUtils.java,min,array,double[],0,IllegalArgumentException,$.length == 0
IEEE754rUtils.java,min,array,float[],1,IllegalArgumentException,$ == null
IEEE754rUtils.java,min,array,float[],0,IllegalArgumentException,$.length == 0
IEEE754rUtils.java,max,array,double[],1,IllegalArgumentException,$== null
IEEE754rUtils.java,max,array,double[],0,IllegalArgumentException,$.length == 0
IEEE754rUtils.java,max,array,float[],1,IllegalArgumentException,$ == null
IEEE754rUtils.java,max,array,float[],0,IllegalArgumentException,$.length == 0
NumberUtils.java,toInt,str,String,0,RET,$ == null
NumberUtils.java,toLong,str,String,0,RET,$ == null
NumberUtils.java,toFloat,str,String,0,RET,$ == null
NumberUtils.java,toDouble,str,String,0,RET,$ == null
NumberUtils.java,toByte,str,String,0,RET,$ == null
NumberUtils.java,toShort,str,String,0,RET,$ == null
NumberUtils.java,createNumber,str,String,0,RET,$ == null
NumberUtils.java,createNumber,hexDigits,int,0,RET,$ > 8
NumberUtils.java,createNumber,decPos,int,1,NumberFormatException,$ > -1
NumberUtils.java,createNumber,expPos,int,1,NumberFormatException,$ > -1
NumberUtils.java,createNumber,expPos,int,0,NumberFormatException,$ < decPos
NumberUtils.java,createNumber,expPos,int,1,NumberFormatException,$ > -1
NumberUtils.java,createNumber,lastChar,char,1,NumberFormatException:RET,$ != '.'
NumberUtils.java,createNumber,expPos,int,1,DEF,$ > -1
NumberUtils.java,createNumber,dec,String,0,RET,$ == null
NumberUtils.java,createNumber,exp,String,0,RET,$ == null
NumberUtils.java,createNumber,numeric,String,0,RET,$.charAt(0) == '-'
NumberUtils.java,createNumber,f,Float,0,RET,$.floatValue() == 0.0F
NumberUtils.java,createNumber,d,Double,0,RET,$.floatValue() == 0.0D
NumberUtils.java,createNumber,expPos,int,1,DEF,$ > -1
NumberUtils.java,createNumber,dec,String,1,RET,$ == null
NumberUtils.java,createNumber,exp,String,1,RET,$ == null
NumberUtils.java,createNumber,f,Float,0,RET,$.floatValue() == 0.0F
NumberUtils.java,createNumber,d,Double,0,RET,$.doubleValue() == 0.0D
NumberUtils.java,isAllZeros,str,String,0,RET,$ == null
NumberUtils.java,isAllZeros,str,String,0,RET,$.charAt(i) != '0'
NumberUtils.java,isAllZeros,i,int,0,RET,str.charAt($) != '0'
NumberUtils.java,createFloat,str,String,0,RET,$ == null
NumberUtils.java,createDouble,str,String,0,RET,$ == null
NumberUtils.java,createInteger,str,String,0,RET,$ == null
NumberUtils.java,createLong,str,String,0,RET,$ == null
NumberUtils.java,createBigInteger,str,String,0,RET,$ == null
NumberUtils.java,createBigDecimal,str,String,0,RET,$ == null
NumberUtils.java,min,array,long[],1,IllegalArgumentException,$ == null
NumberUtils.java,min,array,long[],0,IllegalArgumentException,$.length == 0
NumberUtils.java,min,array,long[],0,DEF,$[i] < min
NumberUtils.java,min,i,int,0,DEF,array[$] < min
NumberUtils.java,min,array,int[],1,IllegalArgumentException,$ == null
NumberUtils.java,min,array,int[],0,IllegalArgumentException,$.length == 0
NumberUtils.java,min,array,int[],0,DEF,$[j] < min
NumberUtils.java,min,j,int,0,DEF,array[$] < min
NumberUtils.java,min,array,short[],1,IllegalArgumentException,$ == null
NumberUtils.java,min,array,short[],0,IllegalArgumentException,$.length == 0
NumberUtils.java,min,array,short[],0,DEF,$[i] < min
NumberUtils.java,min,i,int,0,DEF,array[$] < min
NumberUtils.java,min,array,byte[],1,IllegalArgumentException,$ == null
NumberUtils.java,min,array,byte[],0,IllegalArgumentException,$.length == 0
NumberUtils.java,min,array,byte[],0,DEF,$[i] < min
NumberUtils.java,min,i,int,0,DEF,array[$] < min
NumberUtils.java,min,array,double[],1,IllegalArgumentException,$ == null
NumberUtils.java,min,array,double[],0,IllegalArgumentException,$.length == 0
NumberUtils.java,min,array,double[],0,DEF,$[i] < min
NumberUtils.java,min,i,int,0,DEF,array[$] < min
NumberUtils.java,min,array,float[],1,IllegalArgumentException,$ == null
NumberUtils.java,min,array,float[],0,IllegalArgumentException,$.length == 0
NumberUtils.java,min,array,float[],0,DEF,$[i] < min
NumberUtils.java,min,i,int,0,DEF,array[$] < min
NumberUtils.java,max,array,long[],1,IllegalArgumentException,$ == null
NumberUtils.java,max,array,long[],0,IllegalArgumentException,$.length == 0
NumberUtils.java,max,array,long[],0,DEF,$[j] > max
NumberUtils.java,max,j,int,0,DEF,array[$] > max
NumberUtils.java,max,array,int[],1,IllegalArgumentException,$ == null
NumberUtils.java,max,array,int[],0,IllegalArgumentException,$.length == 0
NumberUtils.java,max,array,int[],0,DEF,$[j] > max
NumberUtils.java,max,j,int,0,DEF,array[$] > max
NumberUtils.java,max,array,short[],1,IllegalArgumentException,$ == null
NumberUtils.java,max,array,short[],0,IllegalArgumentException,$.length == 0
NumberUtils.java,max,array,short[],0,DEF,$[i] > max
NumberUtils.java,max,i,int,0,DEF,array[$] > max
NumberUtils.java,max,array,byte[],1,IllegalArgumentException,$ == null
NumberUtils.java,max,array,byte[],0,IllegalArgumentException,$.length == 0
NumberUtils.java,max,array,byte[],0,DEF,$[i] > max
NumberUtils.java,max,i,int,0,DEF,array[$] > max
NumberUtils.java,max,array,double[],1,IllegalArgumentException,$== null
NumberUtils.java,max,array,double[],0,IllegalArgumentException,$.length == 0
NumberUtils.java,max,array,double[],0,DEF,$[j] > max
NumberUtils.java,max,j,int,0,DEF,array[$] > max
NumberUtils.java,max,array,float[],1,IllegalArgumentException,$ == null
NumberUtils.java,max,array,float[],0,IllegalArgumentException,$.length == 0
NumberUtils.java,max,array,float[],0,DEF,$[j] > max
NumberUtils.java,max,j,int,0,DEF,array[$] > max
NumberUtils.java,min,b,long,0,DEF,$ < a
NumberUtils.java,min,c,long,0,DEF,$ < a
NumberUtils.java,min,b,int,0,DEF,$ < a
NumberUtils.java,min,c,int,0,DEF,$ < a
NumberUtils.java,min,b,short,0,DEF,$ < a
NumberUtils.java,min,c,short,0,DEF,$ < a
NumberUtils.java,min,b,byte,0,DEF,$ < a
NumberUtils.java,min,c,byte,0,DEF,$ < a
NumberUtils.java,max,b,long,0,DEF,$ > a
NumberUtils.java,max,c,long,0,DEF,$ > a
NumberUtils.java,max,b,int,0,DEF,$ > a
NumberUtils.java,max,c,int,0,DEF,$ > a
NumberUtils.java,max,b,short,0,DEF,$ > a
NumberUtils.java,max,c,short,0,DEF,$ > a
NumberUtils.java,max,b,byte,0,DEF,$ > a
NumberUtils.java,max,c,byte,0,DEF,$ > a
NumberUtils.java,isNumber,start,int,0,RET,chars[$] == '0'
NumberUtils.java,isNumber,chars,char[],0,RET,$[start] == '0'
NumberUtils.java,isNumber,start,int,0,RET,chars[$ + 1] == 'x'
NumberUtils.java,isNumber,chars,char[],0,RET,$[start + 1] == 'x'
NumberUtils.java,isNumber,i,int,0,RET,$ == sz
NumberUtils.java,isNumber,i,int,0,RET,chars[$] < '0'
NumberUtils.java,isNumber,chars,char[],0,RET,$[i] < '0'
NumberUtils.java,isNumber,i,int,0,RET,chars[$] > '9'
NumberUtils.java,isNumber,chars,char[],0,RET,$[i] > '9'
NumberUtils.java,isNumber,i,int,0,RET,chars[$] < 'a'
NumberUtils.java,isNumber,chars,char[],0,RET,$[i] < 'a'
NumberUtils.java,isNumber,i,int,0,RET,chars[$] > 'f'
NumberUtils.java,isNumber,chars,char[],0,RET,$[i] > 'f'
NumberUtils.java,isNumber,i,int,0,RET,chars[$] < 'A'
NumberUtils.java,isNumber,chars,char[],0,RET,$[i] < 'A'
NumberUtils.java,isNumber,i,int,0,RET,chars[$] > 'F'
NumberUtils.java,isNumber,chars,char[],0,RET,$[i] > 'F'
NumberUtils.java,isNumber,i,int,1,DEF,chars[$] >= '0'
NumberUtils.java,isNumber,chars,char[],1,DEF,$[i] >= '0'
NumberUtils.java,isNumber,i,int,1,DEF,chars[$] <= '9'
NumberUtils.java,isNumber,chars,char[],1,DEF,$[i] <= '9'
NumberUtils.java,isNumber,i,int,1,RET,chars[$] == '.'
NumberUtils.java,isNumber,chars,char[],1,RET,$[i] == '.'
NumberUtils.java,isNumber,i,int,1,RET,chars[$] == 'e'
NumberUtils.java,isNumber,chars,char[],1,RET,$[i] == 'e'
NumberUtils.java,isNumber,i,int,1,RET,chars[$] == 'E'
NumberUtils.java,isNumber,chars,char[],1,RET,$[i] == 'E'
NumberUtils.java,isNumber,i,int,1,RET,chars[$] == '+'
NumberUtils.java,isNumber,chars,char[],1,RET,$[i] == '+'
NumberUtils.java,isNumber,i,int,1,RET,chars[$] == '-'
NumberUtils.java,isNumber,chars,char[],1,RET,$[i] == '-'
NumberUtils.java,isNumber,i,int,0,RET,$ < chars.length
NumberUtils.java,isNumber,i,int,0,RET,chars[$] >= '0'
NumberUtils.java,isNumber,chars,char[],0,RET,$[i] >= '0'
NumberUtils.java,isNumber,i,int,0,RET,chars[$] <= '9'
NumberUtils.java,isNumber,chars,char[],0,RET,$[i] <= '9'
NumberUtils.java,isNumber,i,int,0,RET,chars[$] == 'e'
NumberUtils.java,isNumber,chars,char[],0,RET,$[i] == 'e'
NumberUtils.java,isNumber,i,int,0,RET,chars[$] == 'E'
NumberUtils.java,isNumber,chars,char[],0,RET,$[i] == 'E'
NumberUtils.java,isNumber,i,int,0,RET,chars[$] == '.'
NumberUtils.java,isNumber,chars,char[],0,RET,$[i] == '.'
NumberUtils.java,isNumber,i,int,0,RET,chars[$] == 'd'
NumberUtils.java,isNumber,chars,char[],0,RET,$[i] == 'd'
NumberUtils.java,isNumber,i,int,0,RET,chars[$] == 'D'
NumberUtils.java,isNumber,chars,char[],0,RET,$[i] == 'D'
NumberUtils.java,isNumber,i,int,0,RET,chars[$] == 'f'
NumberUtils.java,isNumber,chars,char[],0,RET,$[i] == 'f'
NumberUtils.java,isNumber,i,int,0,RET,chars[$] == 'F'
NumberUtils.java,isNumber,chars,char[],0,RET,$[i] == 'F'
NumberUtils.java,isNumber,i,int,0,RET,chars[$] == 'l'
NumberUtils.java,isNumber,chars,char[],0,RET,$[i] == 'l'
NumberUtils.java,isNumber,i,int,0,RET,chars[$] == 'L'
NumberUtils.java,isNumber,chars,char[],0,RET,$[i] == 'L'
ContextedException.java,ContextedException,context,ExceptionContext,0,DEF,$ == null
ContextedRuntimeException.java,ContextedRuntimeException,context,ExceptionContext,0,DEF,$ == null
ExceptionUtils.java,getCause,throwable,Throwable,0,RET,$ == null
ExceptionUtils.java,getCause,methodNames,String[],0,DEF,$ == null
ExceptionUtils.java,getCause,methodName,String,0,RET,$ != null
ExceptionUtils.java,getCause,cause,Throwable,0,RET,$ != null
ExceptionUtils.java,getCauseUsingMethodName,method,Method,0,RET,$ != null
ExceptionUtils.java,indexOf,throwable,Throwable,0,RET,$ == null
ExceptionUtils.java,indexOf,type,Class<>,0,RET,$ == null
ExceptionUtils.java,indexOf,fromIndex,int,0,DEF,$ < 0
ExceptionUtils.java,indexOf,fromIndex,int,0,RET,$ >= throwables.length
ExceptionUtils.java,printRootCauseStackTrace,throwable,Throwable,0,RET,$ == null
ExceptionUtils.java,printRootCauseStackTrace,stream,PrintStream,0,IllegalArgumentException,$ == null
ExceptionUtils.java,printRootCauseStackTrace,throwable,Throwable,0,RET,$ == null
ExceptionUtils.java,printRootCauseStackTrace,writer,PrintWriter,0,IllegalArgumentException,$ == null
ExceptionUtils.java,getRootCauseStackTrace,throwable,Throwable,0,RET,$ == null
ExceptionUtils.java,getRootCauseStackTrace,i,int,0,DEF,$ != 0
ExceptionUtils.java,removeCommonFrames,causeFrames,List<String>,0,IllegalArgumentException,$ == null
ExceptionUtils.java,removeCommonFrames,wrapperFrames,List<String>,0,IllegalArgumentException,$ == null
ExceptionUtils.java,getStackFrames,throwable,Throwable,0,RET,$ == null
ExceptionUtils.java,getStackFrameList,at,int,1,DEF,$ != -1
ExceptionUtils.java,getMessage,th,Throwable,0,RET,$ == null
DefaultExceptionContext.java,getFormattedExceptionMessage,baseMessage,String,0,DEF,$ != null
DefaultExceptionContext.java,getFormattedExceptionMessage,contextValues,List<Pair<String,Object>>,0,DEF,$.size() > 0
DefaultExceptionContext.java,getFormattedExceptionMessage,buffer,StringBuilder,0,DEF,$.length() > 0
DefaultExceptionContext.java,getFormattedExceptionMessage,value,Object,1,DEF,$ == null
RandomStringUtils.java,random,count,int,1,RET,$ == 0
RandomStringUtils.java,random,count,int,0,IllegalArgumentException,$ < 0
RandomStringUtils.java,random,chars,char[],0,IllegalArgumentException,$ != null
RandomStringUtils.java,random,chars,char[],0,IllegalArgumentException,$.length == 0
RandomStringUtils.java,random,start,int,1,DEF,$ == 0
RandomStringUtils.java,random,end,int,1,DEF,$ == 0
RandomStringUtils.java,random,chars,char[],1,DEF,$ != null
RandomStringUtils.java,random,end,int,0,IllegalArgumentException,$ <= start
RandomStringUtils.java,random,chars,char[],1,DEF,$ == null
RandomStringUtils.java,random,ch,char,1,DEF,$ >= 56320
RandomStringUtils.java,random,ch,char,1,DEF,$ <= 57343
RandomStringUtils.java,random,count,int,1,DEF,$ == 0
RandomStringUtils.java,random,ch,char,1,DEF,$ >= 55296
RandomStringUtils.java,random,ch,char,1,DEF,$ <= 56191
RandomStringUtils.java,random,count,int,1,DEF,$ == 0
RandomStringUtils.java,random,ch,char,1,DEF,$ >= 56192
RandomStringUtils.java,random,ch,char,1,DEF,$ <= 56319
RandomStringUtils.java,random,chars,String,0,RET,$ == null
RandomStringUtils.java,random,chars,char[],0,RET,$ == null
ArrayUtils.java,toString,array,Object,0,RET,$ == null
ArrayUtils.java,toMap,array,Object[],0,RET,$ == null
ArrayUtils.java,toMap,object,null,1,DEF,$ instanceof Map.Entry<?,?>
ArrayUtils.java,toMap,object,null,1,IllegalArgumentException,$ instanceof Object[]
ArrayUtils.java,toMap,entry,Object[],0,IllegalArgumentException,$.length < 2
ArrayUtils.java,clone,array,T[],0,RET,$ == null
ArrayUtils.java,clone,array,long[],0,RET,$ == null
ArrayUtils.java,clone,array,int[],0,RET,$ == null
ArrayUtils.java,clone,array,short[],0,RET,$ == null
ArrayUtils.java,clone,array,char[],0,RET,$ == null
ArrayUtils.java,clone,array,byte[],0,RET,$ == null
ArrayUtils.java,clone,array,double[],0,RET,$ == null
ArrayUtils.java,clone,array,float[],0,RET,$ == null
ArrayUtils.java,clone,array,boolean[],0,RET,$ == null
ArrayUtils.java,nullToEmpty,array,Object[],0,RET,$ == null
ArrayUtils.java,nullToEmpty,array,Object[],0,RET,$.length == 0
ArrayUtils.java,nullToEmpty,array,String[],0,RET,$ == null
ArrayUtils.java,nullToEmpty,array,String[],0,RET,$.length == 0
ArrayUtils.java,nullToEmpty,array,long[],0,RET,$ == null
ArrayUtils.java,nullToEmpty,array,long[],0,RET,$.length == 0
ArrayUtils.java,nullToEmpty,array,int[],0,RET,$ == null
ArrayUtils.java,nullToEmpty,array,int[],0,RET,$.length == 0
ArrayUtils.java,nullToEmpty,array,short[],0,RET,$ == null
ArrayUtils.java,nullToEmpty,array,short[],0,RET,$.length == 0
ArrayUtils.java,nullToEmpty,array,char[],0,RET,$ == null
ArrayUtils.java,nullToEmpty,array,char[],0,RET,$.length == 0
ArrayUtils.java,nullToEmpty,array,byte[],0,RET,$ == null
ArrayUtils.java,nullToEmpty,array,byte[],0,RET,$.length == 0
ArrayUtils.java,nullToEmpty,array,double[],0,RET,$ == null
ArrayUtils.java,nullToEmpty,array,double[],0,RET,$.length == 0
ArrayUtils.java,nullToEmpty,array,float[],0,RET,$ == null
ArrayUtils.java,nullToEmpty,array,float[],0,RET,$.length == 0
ArrayUtils.java,nullToEmpty,array,boolean[],0,RET,$ == null
ArrayUtils.java,nullToEmpty,array,boolean[],0,RET,$.length == 0
ArrayUtils.java,nullToEmpty,array,Long[],0,RET,$ == null
ArrayUtils.java,nullToEmpty,array,Long[],0,RET,$.length == 0
ArrayUtils.java,nullToEmpty,array,Integer[],0,RET,$ == null
ArrayUtils.java,nullToEmpty,array,Integer[],0,RET,$.length == 0
ArrayUtils.java,nullToEmpty,array,Short[],0,RET,$ == null
ArrayUtils.java,nullToEmpty,array,Short[],0,RET,$.length == 0
ArrayUtils.java,nullToEmpty,array,Character[],0,RET,$ == null
ArrayUtils.java,nullToEmpty,array,Character[],0,RET,$.length == 0
ArrayUtils.java,nullToEmpty,array,Byte[],0,RET,$ == null
ArrayUtils.java,nullToEmpty,array,Byte[],0,RET,$.length == 0
ArrayUtils.java,nullToEmpty,array,Double[],0,RET,$ == null
ArrayUtils.java,nullToEmpty,array,Double[],0,RET,$.length == 0
ArrayUtils.java,nullToEmpty,array,Float[],0,RET,$ == null
ArrayUtils.java,nullToEmpty,array,Float[],0,RET,$.length == 0
ArrayUtils.java,nullToEmpty,array,Boolean[],0,RET,$ == null
ArrayUtils.java,nullToEmpty,array,Boolean[],0,RET,$.length == 0
ArrayUtils.java,subarray,array,T[],0,RET,$ == null
ArrayUtils.java,subarray,startIndexInclusive,int,0,DEF,$ < 0
ArrayUtils.java,subarray,endIndexExclusive,int,0,DEF,$ > array.length
ArrayUtils.java,subarray,newSize,int,0,RET,$ <= 0
ArrayUtils.java,subarray,array,long[],0,RET,$ == null
ArrayUtils.java,subarray,startIndexInclusive,int,0,DEF,$ < 0
ArrayUtils.java,subarray,endIndexExclusive,int,0,DEF,$ > array.length
ArrayUtils.java,subarray,newSize,int,0,RET,$ <= 0
ArrayUtils.java,subarray,array,int[],0,RET,$ == null
ArrayUtils.java,subarray,startIndexInclusive,int,0,DEF,$ < 0
ArrayUtils.java,subarray,endIndexExclusive,int,0,DEF,$ > array.length
ArrayUtils.java,subarray,newSize,int,0,RET,$ <= 0
ArrayUtils.java,subarray,array,short[],0,RET,$ == null
ArrayUtils.java,subarray,startIndexInclusive,int,0,DEF,$ < 0
ArrayUtils.java,subarray,endIndexExclusive,int,0,DEF,$ > array.length
ArrayUtils.java,subarray,newSize,int,0,RET,$ <= 0
ArrayUtils.java,subarray,array,char[],0,RET,$ == null
ArrayUtils.java,subarray,startIndexInclusive,int,0,DEF,$ < 0
ArrayUtils.java,subarray,endIndexExclusive,int,0,DEF,$ > array.length
ArrayUtils.java,subarray,newSize,int,0,RET,$ <= 0
ArrayUtils.java,subarray,array,byte[],0,RET,$ == null
ArrayUtils.java,subarray,startIndexInclusive,int,0,DEF,$ < 0
ArrayUtils.java,subarray,endIndexExclusive,int,0,DEF,$ > array.length
ArrayUtils.java,subarray,newSize,int,0,RET,$ <= 0
ArrayUtils.java,subarray,array,double[],0,RET,$ == null
ArrayUtils.java,subarray,startIndexInclusive,int,0,DEF,$ < 0
ArrayUtils.java,subarray,endIndexExclusive,int,0,DEF,$ > array.length
ArrayUtils.java,subarray,newSize,int,0,RET,$ <= 0
ArrayUtils.java,subarray,array,float[],0,RET,$ == null
ArrayUtils.java,subarray,startIndexInclusive,int,0,DEF,$ < 0
ArrayUtils.java,subarray,endIndexExclusive,int,0,DEF,$ > array.length
ArrayUtils.java,subarray,newSize,int,0,RET,$ <= 0
ArrayUtils.java,subarray,array,boolean[],0,RET,$ == null
ArrayUtils.java,subarray,startIndexInclusive,int,0,DEF,$ < 0
ArrayUtils.java,subarray,endIndexExclusive,int,0,DEF,$ > array.length
ArrayUtils.java,subarray,newSize,int,0,RET,$ <= 0
ArrayUtils.java,isSameLength,array1,Object[],0,RET,$ == null
ArrayUtils.java,isSameLength,array2,Object[],0,RET,$ != null
ArrayUtils.java,isSameLength,array2,Object[],0,RET,$.length > 0
ArrayUtils.java,isSameLength,array2,Object[],0,RET,$ == null
ArrayUtils.java,isSameLength,array1,Object[],0,RET,$ != null
ArrayUtils.java,isSameLength,array1,Object[],0,RET,$.length > 0
ArrayUtils.java,isSameLength,array1,Object[],0,RET,$ != null
ArrayUtils.java,isSameLength,array2,Object[],0,RET,$ != null
ArrayUtils.java,isSameLength,array1,Object[],0,RET,$.length != array2.length
ArrayUtils.java,isSameLength,array1,long[],0,RET,$ == null
ArrayUtils.java,isSameLength,array2,long[],0,RET,$ != null
ArrayUtils.java,isSameLength,array2,long[],0,RET,$.length > 0
ArrayUtils.java,isSameLength,array2,long[],0,RET,$ == null
ArrayUtils.java,isSameLength,array1,long[],0,RET,$ != null
ArrayUtils.java,isSameLength,array1,long[],0,RET,$.length > 0
ArrayUtils.java,isSameLength,array1,long[],0,RET,$ != null
ArrayUtils.java,isSameLength,array2,long[],0,RET,$ != null
ArrayUtils.java,isSameLength,array1,long[],0,RET,$.length != array2.length
ArrayUtils.java,isSameLength,array1,int[],0,RET,$ == null
ArrayUtils.java,isSameLength,array2,int[],0,RET,$ != null
ArrayUtils.java,isSameLength,array2,int[],0,RET,$.length > 0
ArrayUtils.java,isSameLength,array2,int[],0,RET,$ == null
ArrayUtils.java,isSameLength,array1,int[],0,RET,$ != null
ArrayUtils.java,isSameLength,array1,int[],0,RET,$.length > 0
ArrayUtils.java,isSameLength,array1,int[],0,RET,$ != null
ArrayUtils.java,isSameLength,array2,int[],0,RET,$ != null
ArrayUtils.java,isSameLength,array1,int[],0,RET,$.length != array2.length
ArrayUtils.java,isSameLength,array1,short[],0,RET,$ == null
ArrayUtils.java,isSameLength,array2,short[],0,RET,$ != null
ArrayUtils.java,isSameLength,array2,short[],0,RET,$.length > 0
ArrayUtils.java,isSameLength,array2,short[],0,RET,$ == null
ArrayUtils.java,isSameLength,array1,short[],0,RET,$ != null
ArrayUtils.java,isSameLength,array1,short[],0,RET,$.length > 0
ArrayUtils.java,isSameLength,array1,short[],0,RET,$ != null
ArrayUtils.java,isSameLength,array2,short[],0,RET,$ != null
ArrayUtils.java,isSameLength,array1,short[],0,RET,$.length != array2.length
ArrayUtils.java,isSameLength,array1,char[],0,RET,$ == null
ArrayUtils.java,isSameLength,array2,char[],0,RET,$ != null
ArrayUtils.java,isSameLength,array2,char[],0,RET,$.length > 0
ArrayUtils.java,isSameLength,array2,char[],0,RET,$ == null
ArrayUtils.java,isSameLength,array1,char[],0,RET,$ != null
ArrayUtils.java,isSameLength,array1,char[],0,RET,$.length > 0
ArrayUtils.java,isSameLength,array1,char[],0,RET,$ != null
ArrayUtils.java,isSameLength,array2,char[],0,RET,$ != null
ArrayUtils.java,isSameLength,array1,char[],0,RET,$.length != array2.length
ArrayUtils.java,isSameLength,array1,byte[],0,RET,$ == null
ArrayUtils.java,isSameLength,array2,byte[],0,RET,$ != null
ArrayUtils.java,isSameLength,array2,byte[],0,RET,$.length > 0
ArrayUtils.java,isSameLength,array2,byte[],0,RET,$ == null
ArrayUtils.java,isSameLength,array1,byte[],0,RET,$ != null
ArrayUtils.java,isSameLength,array1,byte[],0,RET,$.length > 0
ArrayUtils.java,isSameLength,array1,byte[],0,RET,$ != null
ArrayUtils.java,isSameLength,array2,byte[],0,RET,$ != null
ArrayUtils.java,isSameLength,array1,byte[],0,RET,$.length != array2.length
ArrayUtils.java,isSameLength,array1,double[],0,RET,$ == null
ArrayUtils.java,isSameLength,array2,double[],0,RET,$ != null
ArrayUtils.java,isSameLength,array2,double[],0,RET,$.length > 0
ArrayUtils.java,isSameLength,array2,double[],0,RET,$ == null
ArrayUtils.java,isSameLength,array1,double[],0,RET,$ != null
ArrayUtils.java,isSameLength,array1,double[],0,RET,$.length > 0
ArrayUtils.java,isSameLength,array1,double[],0,RET,$ != null
ArrayUtils.java,isSameLength,array2,double[],0,RET,$ != null
ArrayUtils.java,isSameLength,array1,double[],0,RET,$.length != array2.length
ArrayUtils.java,isSameLength,array1,float[],0,RET,$ == null
ArrayUtils.java,isSameLength,array2,float[],0,RET,$ != null
ArrayUtils.java,isSameLength,array2,float[],0,RET,$.length > 0
ArrayUtils.java,isSameLength,array2,float[],0,RET,$ == null
ArrayUtils.java,isSameLength,array1,float[],0,RET,$ != null
ArrayUtils.java,isSameLength,array1,float[],0,RET,$.length > 0
ArrayUtils.java,isSameLength,array1,float[],0,RET,$ != null
ArrayUtils.java,isSameLength,array2,float[],0,RET,$ != null
ArrayUtils.java,isSameLength,array1,float[],0,RET,$.length != array2.length
ArrayUtils.java,isSameLength,array1,boolean[],0,RET,$ == null
ArrayUtils.java,isSameLength,array2,boolean[],0,RET,$ != null
ArrayUtils.java,isSameLength,array2,boolean[],0,RET,$.length > 0
ArrayUtils.java,isSameLength,array2,boolean[],0,RET,$ == null
ArrayUtils.java,isSameLength,array1,boolean[],0,RET,$ != null
ArrayUtils.java,isSameLength,array1,boolean[],0,RET,$.length > 0
ArrayUtils.java,isSameLength,array1,boolean[],0,RET,$ != null
ArrayUtils.java,isSameLength,array2,boolean[],0,RET,$ != null
ArrayUtils.java,isSameLength,array1,boolean[],0,RET,$.length != array2.length
ArrayUtils.java,getLength,array,Object,0,RET,$ == null
ArrayUtils.java,isSameType,array1,Object,0,IllegalArgumentException,$ == null
ArrayUtils.java,isSameType,array2,Object,0,IllegalArgumentException,$ == null
ArrayUtils.java,reverse,array,Object[],0,RET,$ == null
ArrayUtils.java,reverse,array,long[],0,RET,$ == null
ArrayUtils.java,reverse,array,int[],0,RET,$ == null
ArrayUtils.java,reverse,array,short[],0,RET,$ == null
ArrayUtils.java,reverse,array,char[],0,RET,$ == null
ArrayUtils.java,reverse,array,byte[],0,RET,$ == null
ArrayUtils.java,reverse,array,double[],0,RET,$ == null
ArrayUtils.java,reverse,array,float[],0,RET,$ == null
ArrayUtils.java,reverse,array,boolean[],0,RET,$ == null
ArrayUtils.java,indexOf,array,Object[],0,RET,$ == null
ArrayUtils.java,indexOf,startIndex,int,0,DEF,$ < 0
ArrayUtils.java,indexOf,objectToFind,Object,1,RET,$ == null
ArrayUtils.java,indexOf,array,Object[],0,RET,$[i] == null
ArrayUtils.java,indexOf,i,int,0,RET,array[$] == null
ArrayUtils.java,lastIndexOf,array,Object[],0,RET,$ == null
ArrayUtils.java,lastIndexOf,startIndex,int,1,RET,$ < 0
ArrayUtils.java,lastIndexOf,startIndex,int,0,DEF,$ >= array.length
ArrayUtils.java,lastIndexOf,objectToFind,Object,1,RET,$ == null
ArrayUtils.java,lastIndexOf,array,Object[],0,RET,$[i] == null
ArrayUtils.java,lastIndexOf,i,int,0,RET,array[$] == null
ArrayUtils.java,indexOf,array,long[],0,RET,$ == null
ArrayUtils.java,indexOf,startIndex,int,0,DEF,$ < 0
ArrayUtils.java,lastIndexOf,array,long[],0,RET,$ == null
ArrayUtils.java,lastIndexOf,startIndex,int,1,RET,$ < 0
ArrayUtils.java,lastIndexOf,startIndex,int,0,DEF,$ >= array.length
ArrayUtils.java,indexOf,array,int[],0,RET,$ == null
ArrayUtils.java,indexOf,startIndex,int,0,DEF,$ < 0
ArrayUtils.java,lastIndexOf,array,int[],0,RET,$ == null
ArrayUtils.java,lastIndexOf,startIndex,int,1,RET,$ < 0
ArrayUtils.java,lastIndexOf,startIndex,int,0,DEF,$ >= array.length
ArrayUtils.java,indexOf,array,short[],0,RET,$ == null
ArrayUtils.java,indexOf,startIndex,int,0,DEF,$ < 0
ArrayUtils.java,lastIndexOf,array,short[],0,RET,$ == null
ArrayUtils.java,lastIndexOf,startIndex,int,1,RET,$ < 0
ArrayUtils.java,lastIndexOf,startIndex,int,0,DEF,$ >= array.length
ArrayUtils.java,indexOf,array,char[],0,RET,$ == null
ArrayUtils.java,indexOf,startIndex,int,0,DEF,$ < 0
ArrayUtils.java,lastIndexOf,array,char[],0,RET,$ == null
ArrayUtils.java,lastIndexOf,startIndex,int,1,RET,$ < 0
ArrayUtils.java,lastIndexOf,startIndex,int,0,DEF,$ >= array.length
ArrayUtils.java,indexOf,array,byte[],0,RET,$ == null
ArrayUtils.java,indexOf,startIndex,int,0,DEF,$ < 0
ArrayUtils.java,lastIndexOf,array,byte[],0,RET,$ == null
ArrayUtils.java,lastIndexOf,startIndex,int,1,RET,$ < 0
ArrayUtils.java,lastIndexOf,startIndex,int,0,DEF,$ >= array.length
ArrayUtils.java,indexOf,startIndex,int,0,DEF,$ < 0
ArrayUtils.java,indexOf,startIndex,int,0,DEF,$ < 0
ArrayUtils.java,indexOf,array,double[],0,RET,$[i] >= min
ArrayUtils.java,indexOf,i,int,0,RET,array[$] >= min
ArrayUtils.java,indexOf,array,double[],0,RET,$[i] <= max
ArrayUtils.java,indexOf,i,int,0,RET,array[$] <= max
ArrayUtils.java,lastIndexOf,startIndex,int,1,RET,$ < 0
ArrayUtils.java,lastIndexOf,startIndex,int,0,DEF,$ >= array.length
ArrayUtils.java,lastIndexOf,startIndex,int,1,RET,$ < 0
ArrayUtils.java,lastIndexOf,startIndex,int,0,DEF,$ >= array.length
ArrayUtils.java,lastIndexOf,array,double[],0,RET,$[i] >= min
ArrayUtils.java,lastIndexOf,i,int,0,RET,array[$] >= min
ArrayUtils.java,lastIndexOf,array,double[],0,RET,$[i] <= max
ArrayUtils.java,lastIndexOf,i,int,0,RET,array[$] <= max
ArrayUtils.java,indexOf,startIndex,int,0,DEF,$ < 0
ArrayUtils.java,lastIndexOf,startIndex,int,1,RET,$ < 0
ArrayUtils.java,lastIndexOf,startIndex,int,0,DEF,$ >= array.length
ArrayUtils.java,indexOf,startIndex,int,0,DEF,$ < 0
ArrayUtils.java,lastIndexOf,startIndex,int,1,RET,$ < 0
ArrayUtils.java,lastIndexOf,startIndex,int,0,DEF,$ >= array.length
ArrayUtils.java,toPrimitive,array,Character[],1,RET,$ == null
ArrayUtils.java,toPrimitive,array,Character[],0,RET,$.length == 0
ArrayUtils.java,toPrimitive,array,Character[],1,RET,$ == null
ArrayUtils.java,toPrimitive,array,Character[],0,RET,$.length == 0
ArrayUtils.java,toObject,array,char[],1,RET,$ == null
ArrayUtils.java,toObject,array,char[],0,RET,$.length == 0
ArrayUtils.java,toPrimitive,array,Long[],1,RET,$ == null
ArrayUtils.java,toPrimitive,array,Long[],0,RET,$.length == 0
ArrayUtils.java,toPrimitive,array,Long[],1,RET,$ == null
ArrayUtils.java,toPrimitive,array,Long[],0,RET,$.length == 0
ArrayUtils.java,toObject,array,long[],1,RET,$ == null
ArrayUtils.java,toObject,array,long[],0,RET,$.length == 0
ArrayUtils.java,toPrimitive,array,Integer[],1,RET,$ == null
ArrayUtils.java,toPrimitive,array,Integer[],0,RET,$.length == 0
ArrayUtils.java,toPrimitive,array,Integer[],1,RET,$ == null
ArrayUtils.java,toPrimitive,array,Integer[],0,RET,$.length == 0
ArrayUtils.java,toObject,array,int[],1,RET,$ == null
ArrayUtils.java,toObject,array,int[],0,RET,$.length == 0
ArrayUtils.java,toPrimitive,array,Short[],1,RET,$ == null
ArrayUtils.java,toPrimitive,array,Short[],0,RET,$.length == 0
ArrayUtils.java,toPrimitive,array,Short[],1,RET,$ == null
ArrayUtils.java,toPrimitive,array,Short[],0,RET,$.length == 0
ArrayUtils.java,toObject,array,short[],1,RET,$ == null
ArrayUtils.java,toObject,array,short[],0,RET,$.length == 0
ArrayUtils.java,toPrimitive,array,Byte[],1,RET,$ == null
ArrayUtils.java,toPrimitive,array,Byte[],0,RET,$.length == 0
ArrayUtils.java,toPrimitive,array,Byte[],1,RET,$ == null
ArrayUtils.java,toPrimitive,array,Byte[],0,RET,$.length == 0
ArrayUtils.java,toObject,array,byte[],1,RET,$ == null
ArrayUtils.java,toObject,array,byte[],0,RET,$.length == 0
ArrayUtils.java,toPrimitive,array,Double[],1,RET,$ == null
ArrayUtils.java,toPrimitive,array,Double[],0,RET,$.length == 0
ArrayUtils.java,toPrimitive,array,Double[],1,RET,$ == null
ArrayUtils.java,toPrimitive,array,Double[],0,RET,$.length == 0
ArrayUtils.java,toObject,array,double[],1,RET,$ == null
ArrayUtils.java,toObject,array,double[],0,RET,$.length == 0
ArrayUtils.java,toPrimitive,array,Float[],1,RET,$ == null
ArrayUtils.java,toPrimitive,array,Float[],0,RET,$.length == 0
ArrayUtils.java,toPrimitive,array,Float[],1,RET,$ == null
ArrayUtils.java,toPrimitive,array,Float[],0,RET,$.length == 0
ArrayUtils.java,toObject,array,float[],1,RET,$ == null
ArrayUtils.java,toObject,array,float[],0,RET,$.length == 0
ArrayUtils.java,toPrimitive,array,Boolean[],1,RET,$ == null
ArrayUtils.java,toPrimitive,array,Boolean[],0,RET,$.length == 0
ArrayUtils.java,toPrimitive,array,Boolean[],1,RET,$ == null
ArrayUtils.java,toPrimitive,array,Boolean[],0,RET,$.length == 0
ArrayUtils.java,toObject,array,boolean[],1,RET,$ == null
ArrayUtils.java,toObject,array,boolean[],0,RET,$.length == 0
ArrayUtils.java,addAll,array1,T[],1,RET,$ == null
ArrayUtils.java,addAll,array2,T[],0,RET,$ == null
ArrayUtils.java,addAll,array1,boolean[],1,RET,$ == null
ArrayUtils.java,addAll,array2,boolean[],0,RET,$ == null
ArrayUtils.java,addAll,array1,char[],1,RET,$ == null
ArrayUtils.java,addAll,array2,char[],0,RET,$ == null
ArrayUtils.java,addAll,array1,byte[],1,RET,$ == null
ArrayUtils.java,addAll,array2,byte[],0,RET,$ == null
ArrayUtils.java,addAll,array1,short[],1,RET,$ == null
ArrayUtils.java,addAll,array2,short[],0,RET,$ == null
ArrayUtils.java,addAll,array1,int[],1,RET,$ == null
ArrayUtils.java,addAll,array2,int[],0,RET,$ == null
ArrayUtils.java,addAll,array1,long[],1,RET,$ == null
ArrayUtils.java,addAll,array2,long[],0,RET,$ == null
ArrayUtils.java,addAll,array1,float[],1,RET,$ == null
ArrayUtils.java,addAll,array2,float[],0,RET,$ == null
ArrayUtils.java,addAll,array1,double[],1,RET,$ == null
ArrayUtils.java,addAll,array2,double[],0,RET,$ == null
ArrayUtils.java,add,array,T[],1,DEF,$ != null
ArrayUtils.java,add,element,T,1,DEF,$ != null
ArrayUtils.java,copyArrayGrow1,array,Object,0,RET,$ != null
ArrayUtils.java,add,array,T[],1,DEF,$ != null
ArrayUtils.java,add,element,T,1,DEF,$ != null
ArrayUtils.java,add,array,Object,0,IndexOutOfBoundsException:RET,$ == null
ArrayUtils.java,add,index,int,0,IndexOutOfBoundsException,$ != 0
ArrayUtils.java,add,index,int,0,IndexOutOfBoundsException,$ > length
ArrayUtils.java,add,index,int,0,IndexOutOfBoundsException,$ < 0
ArrayUtils.java,add,index,int,0,DEF,$ < length
ArrayUtils.java,removeElement,index,int,0,RET,$ == INDEX_NOT_FOUND
ArrayUtils.java,removeElement,index,int,0,RET,$ == INDEX_NOT_FOUND
ArrayUtils.java,removeElement,index,int,0,RET,$ == INDEX_NOT_FOUND
ArrayUtils.java,removeElement,index,int,0,RET,$ == INDEX_NOT_FOUND
ArrayUtils.java,removeElement,index,int,0,RET,$ == INDEX_NOT_FOUND
ArrayUtils.java,removeElement,index,int,0,RET,$ == INDEX_NOT_FOUND
ArrayUtils.java,removeElement,index,int,0,RET,$ == INDEX_NOT_FOUND
ArrayUtils.java,removeElement,index,int,0,RET,$ == INDEX_NOT_FOUND
ArrayUtils.java,removeElement,index,int,0,RET,$ == INDEX_NOT_FOUND
ArrayUtils.java,remove,index,int,0,IndexOutOfBoundsException,$ < 0
ArrayUtils.java,remove,index,int,0,IndexOutOfBoundsException,$ >= length
ArrayUtils.java,removeElements,count,MutableInt,1,DEF,$ == null
ArrayUtils.java,removeElements,found,int,0,DEF,$ < 0
ArrayUtils.java,removeElements,count,MutableInt,1,DEF,$ == null
ArrayUtils.java,removeElements,found,int,0,DEF,$ < 0
ArrayUtils.java,removeElements,count,MutableInt,1,DEF,$ == null
ArrayUtils.java,removeElements,found,int,0,DEF,$ < 0
ArrayUtils.java,removeElements,count,MutableInt,1,DEF,$ == null
ArrayUtils.java,removeElements,found,int,0,DEF,$ < 0
ArrayUtils.java,removeElements,count,MutableInt,1,DEF,$ == null
ArrayUtils.java,removeElements,found,int,0,DEF,$ < 0
ArrayUtils.java,removeElements,count,MutableInt,1,DEF,$ == null
ArrayUtils.java,removeElements,found,int,0,DEF,$ < 0
ArrayUtils.java,removeElements,count,MutableInt,1,DEF,$ == null
ArrayUtils.java,removeElements,found,int,0,DEF,$ < 0
ArrayUtils.java,removeElements,count,MutableInt,1,DEF,$ == null
ArrayUtils.java,removeElements,found,int,0,DEF,$ < 0
ArrayUtils.java,removeElements,count,MutableInt,1,DEF,$ == null
ArrayUtils.java,removeElements,found,int,0,DEF,$ < 0
ArrayUtils.java,removeAll,index,int,0,IndexOutOfBoundsException,$ < 0
ArrayUtils.java,removeAll,index,int,0,IndexOutOfBoundsException,$ >= length
ArrayUtils.java,removeAll,index,int,0,DEF,$ >= prevIndex
ArrayUtils.java,removeAll,diff,int,0,DEF,$ < length
ArrayUtils.java,removeAll,index,int,0,DEF,end - $ > 1
ArrayUtils.java,removeAll,end,int,0,DEF,$ - index > 1
ArrayUtils.java,removeAll,end,int,0,DEF,$ > 0
ArrayUtils.java,removeAll,count,int,0,DEF,$ > 0
ArrayUtils.java,removeAll,count,int,0,DEF,$ > 0
FastDatePrinter.java,parsePattern,tokenLen,int,0,DEF,$ == 0
FastDatePrinter.java,parsePattern,tokenLen,int,1,DEF,$ == 2
FastDatePrinter.java,parsePattern,tokenLen,int,1,DEF,$ >= 4
FastDatePrinter.java,parsePattern,tokenLen,int,1,DEF,$ == 3
FastDatePrinter.java,parsePattern,tokenLen,int,1,DEF,$ == 2
FastDatePrinter.java,parsePattern,tokenLen,int,1,DEF,$ >= 4
FastDatePrinter.java,parsePattern,tokenLen,int,1,DEF,$ == 1
FastDatePrinter.java,parsePattern,sub,String,1,DEF,$.length() == 1
FastDatePrinter.java,parseToken,c,char,1,DEF,$ >= 'A'
FastDatePrinter.java,parseToken,c,char,1,DEF,$ <= 'Z'
FastDatePrinter.java,parseToken,c,char,1,DEF,$ >= 'a'
FastDatePrinter.java,parseToken,c,char,1,DEF,$ <= 'z'
FastDatePrinter.java,parseToken,peek,char,1,DEF,$ == c
FastDatePrinter.java,parseToken,c,char,1,DEF,$ == '\''
FastDatePrinter.java,parseToken,i,int,1,DEF,$ + 1 < length
FastDatePrinter.java,parseToken,pattern,String,1,DEF,$.charAt(i + 1) == '\''
FastDatePrinter.java,parseToken,i,int,1,DEF,pattern.charAt($ + 1) == '\''
FastDatePrinter.java,parseToken,c,char,1,DEF,$ >= 'A'
FastDatePrinter.java,parseToken,c,char,1,DEF,$ <= 'Z'
FastDatePrinter.java,parseToken,c,char,1,DEF,$ >= 'a'
FastDatePrinter.java,parseToken,c,char,1,DEF,$ <= 'z'
FastDatePrinter.java,format,obj,null,1,RET,$ instanceof Date
FastDatePrinter.java,format,obj,null,1,RET,$ instanceof Calendar
FastDatePrinter.java,format,obj,null,1,RET,$ instanceof Long
FastDatePrinter.java,equals,obj,Object,0,RET,$ instanceof FastDatePrinter == false
FastDatePrinter.java,equals,obj,null,0,RET,$ instanceof FastDatePrinter
FastDatePrinter.java,estimateLength,len,int,0,DEF,$ > max
FastDatePrinter.java,appendTo,value,int,1,DEF,$ < 10
FastDatePrinter.java,appendTo,value,int,1,DEF,$ < 100
FastDatePrinter.java,appendTo,value,int,1,DEF,$ < 10
FastDatePrinter.java,PaddedNumberField,size,int,0,IllegalArgumentException,$ < 3
FastDatePrinter.java,appendTo,value,int,1,DEF,$ < 100
FastDatePrinter.java,appendTo,value,int,1,DEF,$ < 1000
FastDatePrinter.java,appendTo,value,int,1,DEF,$ < 100
FastDatePrinter.java,appendTo,value,int,0,DEF,$ == 0
FastDatePrinter.java,appendTo,value,int,0,DEF,$ == 0
FastDatePrinter.java,getTimeZoneDisplay,value,String,0,DEF,$ == null
FastDatePrinter.java,getTimeZoneDisplay,prior,String,0,DEF,$ != null
FastDatePrinter.java,appendTo,calendar,Calendar,1,DEF,$.get(Calendar.DST_OFFSET) != 0
FastDatePrinter.java,appendTo,offset,int,1,DEF,$ < 0
FastDatePrinter.java,equals,obj,null,0,RET,$ instanceof TimeZoneDisplayKey
FormatCache.java,getInstance,pattern,String,0,NullPointerException,$ == null
FormatCache.java,getInstance,timeZone,TimeZone,0,DEF,$ == null
FormatCache.java,getInstance,locale,Locale,0,DEF,$ == null
FormatCache.java,getInstance,format,F,0,DEF,$ == null
FormatCache.java,getInstance,previousValue,F,0,DEF,$ != null
FormatCache.java,getDateTimeInstance,locale,Locale,0,DEF,$ == null
FormatCache.java,getPatternForStyle,pattern,String,0,IllegalArgumentException,$ == null
FormatCache.java,getPatternForStyle,dateStyle,Integer,1,DEF,$ == null
FormatCache.java,getPatternForStyle,timeStyle,Integer,1,DEF,$ == null
FormatCache.java,getPatternForStyle,previous,String,0,DEF,$ != null
FormatCache.java,hashCode,hashCode,int,0,DEF,$==0
FormatCache.java,hashCode,key,Object,0,DEF,$!=null
DateUtils.java,isSameDay,date1,Date,0,IllegalArgumentException,$ == null
DateUtils.java,isSameDay,date2,Date,0,IllegalArgumentException,$ == null
DateUtils.java,isSameDay,cal1,Calendar,0,IllegalArgumentException,$ == null
DateUtils.java,isSameDay,cal2,Calendar,0,IllegalArgumentException,$ == null
DateUtils.java,isSameInstant,date1,Date,0,IllegalArgumentException,$ == null
DateUtils.java,isSameInstant,date2,Date,0,IllegalArgumentException,$ == null
DateUtils.java,isSameInstant,cal1,Calendar,0,IllegalArgumentException,$ == null
DateUtils.java,isSameInstant,cal2,Calendar,0,IllegalArgumentException,$ == null
DateUtils.java,isSameLocalTime,cal1,Calendar,0,IllegalArgumentException,$ == null
DateUtils.java,isSameLocalTime,cal2,Calendar,0,IllegalArgumentException,$ == null
DateUtils.java,parseDateWithLeniency,str,String,0,IllegalArgumentException,$ == null
DateUtils.java,parseDateWithLeniency,parsePatterns,String[],0,IllegalArgumentException,$ == null
DateUtils.java,parseDateWithLeniency,locale,Locale,1,DEF,$ == null
DateUtils.java,parseDateWithLeniency,date,Date,0,RET,$ != null
DateUtils.java,add,date,Date,0,IllegalArgumentException,$ == null
DateUtils.java,set,date,Date,0,IllegalArgumentException,$ == null
DateUtils.java,round,date,Date,0,IllegalArgumentException,$ == null
DateUtils.java,round,date,Calendar,0,IllegalArgumentException,$ == null
DateUtils.java,round,date,Object,0,IllegalArgumentException,$ == null
DateUtils.java,round,date,null,1,RET,$ instanceof Date
DateUtils.java,round,date,null,1,RET,$ instanceof Calendar
DateUtils.java,truncate,date,Date,0,IllegalArgumentException,$ == null
DateUtils.java,truncate,date,Calendar,0,IllegalArgumentException,$ == null
DateUtils.java,truncate,date,Object,0,IllegalArgumentException,$ == null
DateUtils.java,truncate,date,null,1,RET,$ instanceof Date
DateUtils.java,truncate,date,null,1,RET,$ instanceof Calendar
DateUtils.java,ceiling,date,Date,0,IllegalArgumentException,$ == null
DateUtils.java,ceiling,date,Calendar,0,IllegalArgumentException,$ == null
DateUtils.java,ceiling,date,Object,0,IllegalArgumentException,$ == null
DateUtils.java,ceiling,date,null,1,RET,$ instanceof Date
DateUtils.java,ceiling,date,null,1,RET,$ instanceof Calendar
DateUtils.java,modify,val,Calendar,0,ArithmeticException,$.get(Calendar.YEAR) > 280000000
DateUtils.java,modify,field,int,0,RET,$ == Calendar.MILLISECOND
DateUtils.java,modify,MODIFY_TRUNCATE,int,0,DEF,$ == modType
DateUtils.java,modify,millisecs,int,0,DEF,$ < 500
DateUtils.java,modify,field,int,0,DEF,$ == Calendar.SECOND
DateUtils.java,modify,MODIFY_TRUNCATE,int,0,DEF,$ == modType
DateUtils.java,modify,seconds,int,0,DEF,$ < 30
DateUtils.java,modify,field,int,0,DEF,$ == Calendar.MINUTE
DateUtils.java,modify,MODIFY_TRUNCATE,int,0,DEF,$ == modType
DateUtils.java,modify,minutes,int,0,DEF,$ < 30
DateUtils.java,modify,date,Date,0,DEF,$.getTime() != time
DateUtils.java,modify,element,int,0,RET,$ == field
DateUtils.java,modify,modType,int,0,DEF,$ == MODIFY_CEILING
DateUtils.java,modify,modType,int,0,DEF,$ == MODIFY_ROUND
DateUtils.java,modify,field,int,1,DEF,$ == DateUtils.SEMI_MONTH
DateUtils.java,modify,val,Calendar,1,DEF,$.get(Calendar.DATE) == 1
DateUtils.java,modify,field,int,1,DEF,$ == Calendar.AM_PM
DateUtils.java,modify,val,Calendar,1,DEF,$.get(Calendar.HOUR_OF_DAY) == 0
DateUtils.java,modify,aField,int[],0,DEF,$[0] == Calendar.DATE
DateUtils.java,modify,offset,int,0,DEF,$ >= 15
DateUtils.java,modify,aField,int[],0,DEF,$[0] == Calendar.HOUR_OF_DAY
DateUtils.java,modify,offset,int,0,DEF,$ >= 12
DateUtils.java,modify,offset,int,0,DEF,$ != 0
DateUtils.java,iterator,focus,Date,0,IllegalArgumentException,$ == null
DateUtils.java,iterator,focus,Calendar,0,IllegalArgumentException,$ == null
DateUtils.java,iterator,rangeStyle,int,0,DEF,$ == RANGE_MONTH_MONDAY
DateUtils.java,iterator,startCutoff,int,0,DEF,$ < Calendar.SUNDAY
DateUtils.java,iterator,startCutoff,int,0,DEF,$ > Calendar.SATURDAY
DateUtils.java,iterator,endCutoff,int,0,DEF,$ < Calendar.SUNDAY
DateUtils.java,iterator,endCutoff,int,0,DEF,$ > Calendar.SATURDAY
DateUtils.java,iterator,focus,Object,0,IllegalArgumentException,$ == null
DateUtils.java,iterator,focus,null,1,RET,$ instanceof Date
DateUtils.java,iterator,focus,null,1,RET,$ instanceof Calendar
DateUtils.java,getFragment,date,Date,0,IllegalArgumentException,$ == null
DateUtils.java,getFragment,calendar,Calendar,0,IllegalArgumentException,$ == null
FastDateParser.java,equals,obj,null,0,RET,$ instanceof FastDateParser
FastDateParser.java,parse,date,Date,0,ParseException,$==null
FastDateParser.java,escapeRegex,c,char,0,DEF,$ == 'E'
FastDateParser.java,getStrategy,formatField,String,0,DEF,$.length()>2
FastDateParser.java,getCache,caches,ConcurrentMap<Locale,Strategy>[],0,DEF,$[field]==null
FastDateParser.java,getCache,field,int,0,DEF,caches[$]==null
FastDateParser.java,getLocaleSpecificStrategy,strategy,Strategy,0,RET,$==null
FastDateParser.java,getLocaleSpecificStrategy,inCache,Strategy,0,RET,$!=null
FastDateParser.java,isNumber,c,char,0,DEF,$=='\''
FastDateParser.java,setCalendar,iVal,Integer,0,IllegalArgumentException,$ == null
FastDateParser.java,setCalendar,iValue,int,0,DEF,$<100
FastDateParser.java,setCalendar,value,String,1,DEF,$.charAt(0)=='+'
FastDateParser.java,setCalendar,value,String,1,DEF,$.charAt(0)=='-'
FastDateParser.java,setCalendar,tz,TimeZone,0,IllegalArgumentException,$==null
DurationFormatUtils.java,formatDurationWords,duration,String,0,DEF,$.length() != 0
DurationFormatUtils.java,formatPeriod,years,int,0,DEF,$ != 0
DurationFormatUtils.java,formatPeriod,months,int,0,DEF,$ < 0
DurationFormatUtils.java,formatPeriod,start,null,0,DEF,$ instanceof GregorianCalendar
DurationFormatUtils.java,formatPeriod,start,Calendar,0,DEF,$.get(Calendar.MONTH) == Calendar.FEBRUARY
DurationFormatUtils.java,formatPeriod,start,Calendar,0,DEF,$.get(Calendar.DAY_OF_MONTH) == 29
DurationFormatUtils.java,format,value,null,1,DEF,$ instanceof StringBuilder
DurationFormatUtils.java,format,value,Object,1,DEF,$ == y
DurationFormatUtils.java,format,value,Object,1,DEF,$ == M
DurationFormatUtils.java,format,value,Object,1,DEF,$ == d
DurationFormatUtils.java,format,value,Object,1,DEF,$ == H
DurationFormatUtils.java,format,value,Object,1,DEF,$ == m
DurationFormatUtils.java,format,value,Object,1,DEF,$ == s
DurationFormatUtils.java,format,value,Object,0,DEF,$ == S
DurationFormatUtils.java,lexx,ch,char,0,DEF,$ != '\''
DurationFormatUtils.java,lexx,buffer,StringBuilder,0,DEF,$ == null
DurationFormatUtils.java,lexx,value,Object,0,DEF,$ != null
DurationFormatUtils.java,lexx,previous,Token,1,DEF,$ != null
DurationFormatUtils.java,lexx,previous,Token,1,DEF,$.getValue() == value
DurationFormatUtils.java,containsTokenWithValue,i,int,0,RET,tokens[$].getValue() == value
DurationFormatUtils.java,containsTokenWithValue,tokens,Token[],0,RET,$[i].getValue() == value
DurationFormatUtils.java,equals,obj2,null,0,RET,$ instanceof Token
FastDateFormat.java,equals,obj,Object,0,RET,$ instanceof FastDateFormat == false
FastDateFormat.java,equals,obj,null,0,RET,$ instanceof FastDateFormat
