id	line	column	filename	methodname	varname	vartype	else	return	right
280	61	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	IllegalArgumentException	$ > 1.0
280	61	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	IllegalArgumentException	$ < 0.0
281	96	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	Math.abs($.value(lowerBound)) < 1E-6
281	96	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	lowerBound	double	0	RET	Math.abs(rootFindingFunction.value($)) < 1E-6
282	99	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	Math.abs($.value(upperBound)) < 1E-6
282	99	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	upperBound	double	0	RET	Math.abs(rootFindingFunction.value($)) < 1E-6
306	60	8	AbstractDistribution.java	cumulativeProbability	x0	double	0	IllegalArgumentException	$ > x1
306	60	8	AbstractDistribution.java	cumulativeProbability	x1	double	0	IllegalArgumentException	x0 > $
46361	75	8	AbstractEstimator.java	updateJacobian	THIS	AbstractEstimator	0	NIL-FOR	i < $.rows
46361	75	8	AbstractEstimator.java	updateJacobian	i	int	0	NIL-FOR	$ < rows
46362	78	12	AbstractEstimator.java	updateJacobian	THIS	AbstractEstimator	0	NIL-FOR	j < $.cols
46362	78	12	AbstractEstimator.java	updateJacobian	j	int	0	NIL-FOR	$ < cols
655	99	8	AbstractEstimator.java	updateResidualsAndCost	THIS	AbstractEstimator	0	Integer	++$.costEvaluations > $.maxCostEval
46363	105	8	AbstractEstimator.java	updateResidualsAndCost	THIS	AbstractEstimator	0	NIL-FOR	i < $.rows
46363	105	8	AbstractEstimator.java	updateResidualsAndCost	i	int	0	NIL-FOR	$ < rows
46364	129	8	AbstractEstimator.java	getRMS	THIS	AbstractEstimator	0	NIL-FOR	i < wm.$.length
46364	129	8	AbstractEstimator.java	getRMS	i	int	0	NIL-FOR	$ < wm.length
46364	129	8	AbstractEstimator.java	getRMS	wm	WeightedMeasurement[]	0	NIL-FOR	i < $.length
46365	144	8	AbstractEstimator.java	getChiSquare	THIS	AbstractEstimator	0	NIL-FOR	i < wm.$.length
46365	144	8	AbstractEstimator.java	getChiSquare	i	int	0	NIL-FOR	$ < wm.length
46365	144	8	AbstractEstimator.java	getChiSquare	wm	WeightedMeasurement[]	0	NIL-FOR	i < $.length
46366	169	8	AbstractEstimator.java	getCovariances	i	int	0	NIL-FOR	$ < cols
46366	169	8	AbstractEstimator.java	getCovariances	cols	int	0	NIL-FOR	i < $
46367	170	12	AbstractEstimator.java	getCovariances	j	int	0	NIL-FOR	$ < cols
46367	170	12	AbstractEstimator.java	getCovariances	cols	int	0	NIL-FOR	j < $
46368	172	16	AbstractEstimator.java	getCovariances	k	int	0	NIL-FOR	$ < max
46368	172	16	AbstractEstimator.java	getCovariances	max	int	0	NIL-FOR	k < $
656	203	8	AbstractEstimator.java	guessParametersErrors	m	int	0	Integer	$ <= p
656	203	8	AbstractEstimator.java	guessParametersErrors	p	int	0	Integer	m <= $
46369	210	8	AbstractEstimator.java	guessParametersErrors	THIS	AbstractEstimator	0	NIL-FOR	i < errors.$.length
46369	210	8	AbstractEstimator.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
46369	210	8	AbstractEstimator.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
240	78	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	0	IllegalArgumentException	$ > x1
240	78	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	double	0	IllegalArgumentException	x0 > $
241	82	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	1	RET	Math.floor($) < $
242	116	8	AbstractIntegerDistribution.java	probability	fl	double	1	RET	$ == x
242	116	8	AbstractIntegerDistribution.java	probability	x	double	1	RET	fl == $
243	135	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	int	0	IllegalArgumentException	$ > x1
243	135	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	int	0	IllegalArgumentException	x0 > $
244	154	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	IllegalArgumentException	$ > 1.0
244	154	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	IllegalArgumentException	$ < 0.0
46111	164	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	0	NIL-WHILE	$ < x1
46111	164	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	0	NIL-WHILE	x0 < $
245	167	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	1	DEF	$ > p
245	167	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	1	DEF	pm > $
246	169	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x1
246	169	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	1	DEF	xm == $
247	179	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x0
247	179	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	1	DEF	xm == $
46112	192	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	0	NIL-WHILE	$ > p
46112	192	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	pm > $
46338	88	8	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	NIL-WHILE	bytesOut < bytes.$.length
46338	88	8	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	NIL-WHILE	$ < bytes.length
46338	88	8	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	bytesOut < $.length
46339	90	10	AbstractRandomGenerator.java	nextBytes	i	int	0	NIL-FOR	$ < 3
616	91	14	AbstractRandomGenerator.java	nextBytes	i	int	0	DEF	$ > 0
617	95	14	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	RET	bytesOut == bytes.$.length
617	95	14	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	RET	$ == bytes.length
617	95	14	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	RET	bytesOut == $.length
618	137	8	AbstractRandomGenerator.java	nextInt	n	int	0	IllegalArgumentException	$ <= 0
619	233	8	AbstractRandomGenerator.java	nextGaussian	THIS	AbstractRandomGenerator	0	RET	Double.isNaN($.cachedNormalDeviate)
46340	241	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	NIL-WHILE	$ >=1
620	246	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	DEF	$ != 0
715	133	4	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	1	DEF	interpolator.$.currentState != null
715	133	4	AbstractStepInterpolator.java	AbstractStepInterpolator	interpolator	AbstractStepInterpolator	1	DEF	$.currentState != null
716	342	4	AbstractStepInterpolator.java	finalizeStep	THIS	AbstractStepInterpolator	0	DEF	$.finalized
46444	387	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
46444	387	4	AbstractStepInterpolator.java	writeBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
46445	424	4	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
46445	424	4	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
445	58	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	IllegalArgumentException	$ == null
446	83	8	AbstractStorelessUnivariateStatistic.java	evaluate	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
446	83	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	test($, begin, length)
446	83	8	AbstractStorelessUnivariateStatistic.java	evaluate	begin	int	0	DEF	test(values, $, length)
446	83	8	AbstractStorelessUnivariateStatistic.java	evaluate	length	int	0	DEF	test(values, begin, $)
447	116	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	IllegalArgumentException	$ == null
448	135	8	AbstractStorelessUnivariateStatistic.java	incrementAll	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
448	135	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	test($, begin, length)
448	135	8	AbstractStorelessUnivariateStatistic.java	incrementAll	begin	int	0	DEF	test(values, $, length)
448	135	8	AbstractStorelessUnivariateStatistic.java	incrementAll	length	int	0	DEF	test(values, begin, $)
46282	137	12	AbstractStorelessUnivariateStatistic.java	incrementAll	i	int	0	NIL-FOR	$ < k
46282	137	12	AbstractStorelessUnivariateStatistic.java	incrementAll	k	int	0	NIL-FOR	i < $
449	151	8	AbstractStorelessUnivariateStatistic.java	equals	THIS	AbstractStorelessUnivariateStatistic	0	RET	object == $
449	151	8	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ == this
450	154	7	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ instanceof AbstractStorelessUnivariateStatistic == false
527	77	8	AbstractUnivariateStatistic.java	test	values	double[]	0	IllegalArgumentException	$ == null
528	81	8	AbstractUnivariateStatistic.java	test	begin	int	0	IllegalArgumentException	$ < 0
529	85	8	AbstractUnivariateStatistic.java	test	length	int	0	IllegalArgumentException	$ < 0
530	89	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	IllegalArgumentException	begin + length > values.$.length
530	89	8	AbstractUnivariateStatistic.java	test	values	double[]	0	IllegalArgumentException	begin + length > $.length
530	89	8	AbstractUnivariateStatistic.java	test	begin	int	0	IllegalArgumentException	$ + length > values.length
530	89	8	AbstractUnivariateStatistic.java	test	length	int	0	IllegalArgumentException	begin + $ > values.length
531	94	8	AbstractUnivariateStatistic.java	test	length	int	0	RET	$ == 0
844	126	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize < $.minStep
844	126	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize > $.maxStep
844	126	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ < minStep
844	126	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ > maxStep
845	176	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	Integer	equations.getDimension() != y0.$.length
845	176	6	AdaptiveStepsizeIntegrator.java	sanityChecks	equations	FirstOrderDifferentialEquations	0	Integer	$.getDimension() != y0.length
845	176	6	AdaptiveStepsizeIntegrator.java	sanityChecks	y0	double[]	0	Integer	equations.getDimension() != $.length
846	184	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	Integer	equations.getDimension() != y.$.length
846	184	6	AdaptiveStepsizeIntegrator.java	sanityChecks	equations	FirstOrderDifferentialEquations	0	Integer	$.getDimension() != y.length
846	184	6	AdaptiveStepsizeIntegrator.java	sanityChecks	y	double[]	0	Integer	equations.getDimension() != $.length
847	192	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	Integer	$.vecAbsoluteTolerance.$.length != y0.$.length
847	192	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	Integer	$.vecAbsoluteTolerance != null
847	192	6	AdaptiveStepsizeIntegrator.java	sanityChecks	y0	double[]	0	Integer	vecAbsoluteTolerance.length != $.length
848	200	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	Integer	$.vecRelativeTolerance.$.length != y0.$.length
848	200	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	Integer	$.vecRelativeTolerance != null
848	200	6	AdaptiveStepsizeIntegrator.java	sanityChecks	y0	double[]	0	Integer	vecRelativeTolerance.length != $.length
849	208	6	AdaptiveStepsizeIntegrator.java	sanityChecks	t0	double	0	Double	Math.abs(t - $) <= 1.0e-12 * Math.max(Math.abs($), Math.abs(t))
849	208	6	AdaptiveStepsizeIntegrator.java	sanityChecks	t	double	0	Double	Math.abs($ - t0) <= 1.0e-12 * Math.max(Math.abs(t0), Math.abs($))
850	235	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	RET	$.initialStep > 0
46532	245	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
46532	245	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
46532	245	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
851	254	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
46533	259	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
46533	259	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
46533	259	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
46534	266	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
46534	266	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
46534	266	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
852	280	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < $.getMinStep()
852	280	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ < getMinStep()
853	283	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h > $.getMaxStep()
853	283	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ > getMaxStep()
854	286	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
855	305	4	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	Double	Math.abs(h) < $.minStep
855	305	4	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	Double	Math.abs($) < minStep
856	306	6	AdaptiveStepsizeIntegrator.java	filterStep	acceptSmall	boolean	1	DEF	$
857	318	4	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	1	DEF	h > $.maxStep
857	318	4	AdaptiveStepsizeIntegrator.java	filterStep	h	double	1	DEF	$ > maxStep
858	320	11	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < -$.maxStep
858	320	11	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	DEF	$ < -maxStep
689	126	8	Beta.java	regularizedBeta	x	double	1	DEF	$ < 0
689	126	8	Beta.java	regularizedBeta	x	double	1	DEF	$ > 1
689	126	8	Beta.java	regularizedBeta	x	double	1	DEF	Double.isNaN($)
689	126	8	Beta.java	regularizedBeta	a	double	1	DEF	$ <= 0.0
689	126	8	Beta.java	regularizedBeta	a	double	1	DEF	Double.isNaN($)
689	126	8	Beta.java	regularizedBeta	b	double	1	DEF	Double.isNaN($)
689	126	8	Beta.java	regularizedBeta	b	double	1	DEF	$ <= 0.0
690	130	15	Beta.java	regularizedBeta	x	double	1	DEF	$ > (a + 1.0) / (a + b + 2.0)
690	130	15	Beta.java	regularizedBeta	a	double	1	DEF	x > ($ + 1.0) / ($ + b + 2.0)
690	130	15	Beta.java	regularizedBeta	b	double	1	DEF	x > (a + 1.0) / (a + $ + 2.0)
691	197	8	Beta.java	logBeta	a	double	1	DEF	$ <= 0.0
691	197	8	Beta.java	logBeta	a	double	1	DEF	Double.isNaN($)
691	197	8	Beta.java	logBeta	b	double	1	DEF	$ <= 0.0
691	197	8	Beta.java	logBeta	b	double	1	DEF	Double.isNaN($)
329	98	8	BigMatrixImpl.java	BigMatrixImpl	rowDimension	int	0	IllegalArgumentException	$ <=0
329	98	8	BigMatrixImpl.java	BigMatrixImpl	columnDimension	int	0	IllegalArgumentException	$ <=0
330	135	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	IllegalArgumentException	$ == 0
331	140	8	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	$ == 0
46114	144	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
46114	144	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
332	145	12	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	IllegalArgumentException	d[row].length != nCols
332	145	12	BigMatrixImpl.java	BigMatrixImpl	row	int	0	IllegalArgumentException	d[$].length != nCols
332	145	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	d[row].length != $
332	145	12	BigMatrixImpl.java	BigMatrixImpl	d	double[][]	0	IllegalArgumentException	$[row].length != nCols
333	165	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	IllegalArgumentException	$ == 0
334	170	8	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	$ == 0
46115	174	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
46115	174	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
335	175	12	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	IllegalArgumentException	d[row].length != nCols
335	175	12	BigMatrixImpl.java	BigMatrixImpl	row	int	0	IllegalArgumentException	d[$].length != nCols
335	175	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	d[row].length != $
335	175	12	BigMatrixImpl.java	BigMatrixImpl	d	String[][]	0	IllegalArgumentException	$[row].length != nCols
46116	196	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
46116	196	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
336	218	8	BigMatrixImpl.java	add	THIS	BigMatrixImpl	0	IllegalArgumentException	$.getRowDimension() != m.getRowDimension()
336	218	8	BigMatrixImpl.java	add	THIS	BigMatrixImpl	0	IllegalArgumentException	$.getColumnDimension() != m.getColumnDimension()
336	218	8	BigMatrixImpl.java	add	m	BigMatrix	0	IllegalArgumentException	this.getRowDimension() != $.getRowDimension()
336	218	8	BigMatrixImpl.java	add	m	BigMatrix	0	IllegalArgumentException	this.getColumnDimension() != $.getColumnDimension()
46117	225	8	BigMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
46117	225	8	BigMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
46118	226	12	BigMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
46118	226	12	BigMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
337	241	8	BigMatrixImpl.java	subtract	THIS	BigMatrixImpl	0	IllegalArgumentException	$.getRowDimension() != m.getRowDimension()
337	241	8	BigMatrixImpl.java	subtract	THIS	BigMatrixImpl	0	IllegalArgumentException	$.getColumnDimension() != m.getColumnDimension()
337	241	8	BigMatrixImpl.java	subtract	m	BigMatrix	0	IllegalArgumentException	this.getRowDimension() != $.getRowDimension()
337	241	8	BigMatrixImpl.java	subtract	m	BigMatrix	0	IllegalArgumentException	this.getColumnDimension() != $.getColumnDimension()
46119	248	8	BigMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
46119	248	8	BigMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
46120	249	12	BigMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
46120	249	12	BigMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
46121	266	8	BigMatrixImpl.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
46121	266	8	BigMatrixImpl.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
46122	267	12	BigMatrixImpl.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
46122	267	12	BigMatrixImpl.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
46123	283	8	BigMatrixImpl.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
46123	283	8	BigMatrixImpl.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
46124	284	12	BigMatrixImpl.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
46124	284	12	BigMatrixImpl.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
338	299	8	BigMatrixImpl.java	multiply	THIS	BigMatrixImpl	0	IllegalArgumentException	$.getColumnDimension() != m.getRowDimension()
338	299	8	BigMatrixImpl.java	multiply	m	BigMatrix	0	IllegalArgumentException	this.getColumnDimension() != $.getRowDimension()
46125	307	8	BigMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
46125	307	8	BigMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
46126	308	12	BigMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
46126	308	12	BigMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
46127	310	16	BigMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
46127	310	16	BigMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
46128	353	8	BigMatrixImpl.java	getDataAsDoubleArray	i	int	0	NIL-FOR	$ < nRows
46128	353	8	BigMatrixImpl.java	getDataAsDoubleArray	nRows	int	0	NIL-FOR	i < $
46129	354	12	BigMatrixImpl.java	getDataAsDoubleArray	j	int	0	NIL-FOR	$<nCols
46129	354	12	BigMatrixImpl.java	getDataAsDoubleArray	nCols	int	0	NIL-FOR	j<$
46130	418	8	BigMatrixImpl.java	getNorm	THIS	BigMatrixImpl	0	NIL-FOR	col < $.getColumnDimension()
46130	418	8	BigMatrixImpl.java	getNorm	col	int	0	NIL-FOR	$ < this.getColumnDimension()
46131	420	12	BigMatrixImpl.java	getNorm	THIS	BigMatrixImpl	0	NIL-FOR	row < $.getRowDimension()
46131	420	12	BigMatrixImpl.java	getNorm	row	int	0	NIL-FOR	$ < this.getRowDimension()
339	442	8	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	endColumn > $.data[0].length
339	442	8	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	endRow > $.data.$.length
339	442	8	BigMatrixImpl.java	getSubMatrix	startRow	int	0	MatrixIndexException	$ < 0
339	442	8	BigMatrixImpl.java	getSubMatrix	startRow	int	0	MatrixIndexException	$ > endRow
339	442	8	BigMatrixImpl.java	getSubMatrix	endRow	int	0	MatrixIndexException	startRow > $
339	442	8	BigMatrixImpl.java	getSubMatrix	endRow	int	0	MatrixIndexException	$ > data.length
339	442	8	BigMatrixImpl.java	getSubMatrix	startColumn	int	0	MatrixIndexException	$ < 0
339	442	8	BigMatrixImpl.java	getSubMatrix	startColumn	int	0	MatrixIndexException	$ > endColumn
339	442	8	BigMatrixImpl.java	getSubMatrix	endColumn	int	0	MatrixIndexException	$ > data[0].length
339	442	8	BigMatrixImpl.java	getSubMatrix	endColumn	int	0	MatrixIndexException	startColumn > $
46132	451	8	BigMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
46132	451	8	BigMatrixImpl.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
46133	452	12	BigMatrixImpl.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
46133	452	12	BigMatrixImpl.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
340	472	8	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
340	472	8	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
340	472	8	BigMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
46134	480	12	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	NIL-FOR	i < selectedRows.$.length
46134	480	12	BigMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
46134	480	12	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
46135	481	16	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	NIL-FOR	j < selectedColumns.$.length
46135	481	16	BigMatrixImpl.java	getSubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
46135	481	16	BigMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
341	521	8	BigMatrixImpl.java	setSubMatrix	row	int	0	MatrixIndexException	$ < 0
341	521	8	BigMatrixImpl.java	setSubMatrix	column	int	0	MatrixIndexException	$ < 0
342	526	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	IllegalArgumentException	$ == 0
343	531	8	BigMatrixImpl.java	setSubMatrix	nCols	int	0	IllegalArgumentException	$ == 0
46136	535	8	BigMatrixImpl.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
46136	535	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
344	536	12	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	0	IllegalArgumentException	subMatrix[r].length != nCols
344	536	12	BigMatrixImpl.java	setSubMatrix	r	int	0	IllegalArgumentException	subMatrix[$].length != nCols
344	536	12	BigMatrixImpl.java	setSubMatrix	nCols	int	0	IllegalArgumentException	subMatrix[r].length != $
344	536	12	BigMatrixImpl.java	setSubMatrix	subMatrix	BigDecimal[][]	0	IllegalArgumentException	$[r].length != nCols
345	541	8	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	$.data == null
346	542	12	BigMatrixImpl.java	setSubMatrix	row	int	0	MatrixIndexException	$ > 0
346	542	12	BigMatrixImpl.java	setSubMatrix	column	int	0	MatrixIndexException	$ > 0
347	547	8	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	(nRows + row) > $.getRowDimension()
347	547	8	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	nCols + column > $.getColumnDimension()
347	547	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	MatrixIndexException	($ + row) > this.getRowDimension()
347	547	8	BigMatrixImpl.java	setSubMatrix	nCols	int	0	MatrixIndexException	$ + column > this.getColumnDimension()
347	547	8	BigMatrixImpl.java	setSubMatrix	row	int	0	MatrixIndexException	(nRows + $) > this.getRowDimension()
347	547	8	BigMatrixImpl.java	setSubMatrix	column	int	0	MatrixIndexException	nCols + $ > this.getColumnDimension()
46137	551	8	BigMatrixImpl.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
46137	551	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
348	566	8	BigMatrixImpl.java	getRowMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	$.isValidCoordinate( row, 0)
348	566	8	BigMatrixImpl.java	getRowMatrix	row	int	0	MatrixIndexException	isValidCoordinate( $, 0)
349	584	8	BigMatrixImpl.java	getColumnMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	$.isValidCoordinate( 0, column)
349	584	8	BigMatrixImpl.java	getColumnMatrix	column	int	0	MatrixIndexException	isValidCoordinate( 0, $)
46138	589	8	BigMatrixImpl.java	getColumnMatrix	row	int	0	NIL-FOR	$ < nRows
46138	589	8	BigMatrixImpl.java	getColumnMatrix	nRows	int	0	NIL-FOR	row < $
350	606	8	BigMatrixImpl.java	getRow	THIS	BigMatrixImpl	0	MatrixIndexException	$.isValidCoordinate( row, 0 )
350	606	8	BigMatrixImpl.java	getRow	row	int	0	MatrixIndexException	isValidCoordinate( $, 0 )
351	627	8	BigMatrixImpl.java	getRowAsDoubleArray	THIS	BigMatrixImpl	0	MatrixIndexException	$.isValidCoordinate( row, 0 )
351	627	8	BigMatrixImpl.java	getRowAsDoubleArray	row	int	0	MatrixIndexException	isValidCoordinate( $, 0 )
46139	632	8	BigMatrixImpl.java	getRowAsDoubleArray	i	int	0	NIL-FOR	$<ncols
46139	632	8	BigMatrixImpl.java	getRowAsDoubleArray	ncols	int	0	NIL-FOR	i<$
352	649	8	BigMatrixImpl.java	getColumn	THIS	BigMatrixImpl	0	MatrixIndexException	$.isValidCoordinate(0, col)
352	649	8	BigMatrixImpl.java	getColumn	col	int	0	MatrixIndexException	isValidCoordinate(0, $)
46140	654	8	BigMatrixImpl.java	getColumn	i	int	0	NIL-FOR	$ < nRows
46140	654	8	BigMatrixImpl.java	getColumn	nRows	int	0	NIL-FOR	i < $
353	672	8	BigMatrixImpl.java	getColumnAsDoubleArray	THIS	BigMatrixImpl	0	MatrixIndexException	$.isValidCoordinate( 0, col )
353	672	8	BigMatrixImpl.java	getColumnAsDoubleArray	col	int	0	MatrixIndexException	isValidCoordinate( 0, $ )
46141	677	8	BigMatrixImpl.java	getColumnAsDoubleArray	i	int	0	NIL-FOR	$<nrows
46141	677	8	BigMatrixImpl.java	getColumnAsDoubleArray	nrows	int	0	NIL-FOR	i<$
354	700	8	BigMatrixImpl.java	getEntry	THIS	BigMatrixImpl	0	MatrixIndexException	$.isValidCoordinate(row,column)
354	700	8	BigMatrixImpl.java	getEntry	row	int	0	MatrixIndexException	isValidCoordinate($,column)
354	700	8	BigMatrixImpl.java	getEntry	column	int	0	MatrixIndexException	isValidCoordinate(row,$)
46142	736	8	BigMatrixImpl.java	transpose	row	int	0	NIL-FOR	$ < nRows
46142	736	8	BigMatrixImpl.java	transpose	nRows	int	0	NIL-FOR	row < $
46143	737	12	BigMatrixImpl.java	transpose	col	int	0	NIL-FOR	$ < nCols
46143	737	12	BigMatrixImpl.java	transpose	nCols	int	0	NIL-FOR	col < $
355	762	8	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	0	InvalidMatrixException	$.isSquare()
356	765	8	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	1	RET	$.isSingular()
46144	769	12	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
46144	769	12	BigMatrixImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < this.getRowDimension()
357	789	8	BigMatrixImpl.java	isSingular	THIS	BigMatrixImpl	1	RET	$.lu == null
358	828	8	BigMatrixImpl.java	getTrace	THIS	BigMatrixImpl	0	IllegalArgumentException	$.isSquare()
46145	832	8	BigMatrixImpl.java	getTrace	THIS	BigMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
46145	832	8	BigMatrixImpl.java	getTrace	i	int	0	NIL-FOR	$ < this.getRowDimension()
359	846	8	BigMatrixImpl.java	operate	THIS	BigMatrixImpl	0	IllegalArgumentException	v.$.length != $.getColumnDimension()
359	846	8	BigMatrixImpl.java	operate	v	BigDecimal[]	0	IllegalArgumentException	$.length != this.getColumnDimension()
46146	852	8	BigMatrixImpl.java	operate	row	int	0	NIL-FOR	$ < nRows
46146	852	8	BigMatrixImpl.java	operate	nRows	int	0	NIL-FOR	row < $
46147	854	12	BigMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < nCols
46147	854	12	BigMatrixImpl.java	operate	nCols	int	0	NIL-FOR	i < $
46148	871	8	BigMatrixImpl.java	operate	THIS	BigMatrixImpl	0	NIL-FOR	i<bd.$.length
46148	871	8	BigMatrixImpl.java	operate	i	int	0	NIL-FOR	$<bd.length
46148	871	8	BigMatrixImpl.java	operate	bd	BigDecimal[]	0	NIL-FOR	i<$.length
360	886	8	BigMatrixImpl.java	preMultiply	THIS	BigMatrixImpl	0	IllegalArgumentException	v.$.length != nRows
360	886	8	BigMatrixImpl.java	preMultiply	nRows	int	0	IllegalArgumentException	v.length != $
360	886	8	BigMatrixImpl.java	preMultiply	v	BigDecimal[]	0	IllegalArgumentException	$.length != nRows
46149	891	8	BigMatrixImpl.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
46149	891	8	BigMatrixImpl.java	preMultiply	nCols	int	0	NIL-FOR	col < $
46150	893	12	BigMatrixImpl.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
46150	893	12	BigMatrixImpl.java	preMultiply	nRows	int	0	NIL-FOR	i < $
361	914	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	IllegalArgumentException	b.$.length != nRows
361	914	8	BigMatrixImpl.java	solve	nRows	int	0	IllegalArgumentException	b.length != $
361	914	8	BigMatrixImpl.java	solve	b	BigDecimal[]	0	IllegalArgumentException	$.length != nRows
46151	920	8	BigMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRows
46151	920	8	BigMatrixImpl.java	solve	nRows	int	0	NIL-FOR	row < $
46152	939	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	NIL-FOR	i<bd.$.length
46152	939	8	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$<bd.length
46152	939	8	BigMatrixImpl.java	solve	bd	BigDecimal[]	0	NIL-FOR	i<$.length
362	957	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	IllegalArgumentException	b.getRowDimension() != $.getRowDimension()
362	957	8	BigMatrixImpl.java	solve	b	BigMatrix	0	IllegalArgumentException	$.getRowDimension() != this.getRowDimension()
363	960	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	InvalidMatrixException	$.isSquare()
364	963	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	InvalidMatrixException	$.isSingular()
46153	973	8	BigMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRowB
46153	973	8	BigMatrixImpl.java	solve	nRowB	int	0	NIL-FOR	row < $
46154	974	12	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nColB
46154	974	12	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	col < $
46155	980	8	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nCol
46155	980	8	BigMatrixImpl.java	solve	nCol	int	0	NIL-FOR	col < $
46156	981	12	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < nCol
46156	981	12	BigMatrixImpl.java	solve	nCol	int	0	NIL-FOR	i < $
46157	982	16	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
46157	982	16	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
46158	989	8	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ >= 0
46159	990	12	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
46159	990	12	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
46160	993	12	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < col
46160	993	12	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	i < $
46161	994	16	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
46161	994	16	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
365	1026	8	BigMatrixImpl.java	luDecompose	nRows	int	0	InvalidMatrixException	$ != nCols
365	1026	8	BigMatrixImpl.java	luDecompose	nCols	int	0	InvalidMatrixException	nRows != $
46162	1033	8	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
46162	1033	8	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
46163	1039	8	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	$ < nCols
46163	1039	8	BigMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	col < $
46164	1044	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < col
46164	1044	12	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	row < $
46165	1046	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < row
46165	1046	16	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	i < $
46166	1055	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
46166	1055	12	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
46167	1057	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < col
46167	1057	16	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	i < $
366	1063	16	BigMatrixImpl.java	luDecompose	sum	BigDecimal	0	DEF	$.abs().compareTo(largest) == 1
366	1063	16	BigMatrixImpl.java	luDecompose	largest	BigDecimal	0	DEF	sum.abs().compareTo($) == 1
367	1070	12	BigMatrixImpl.java	luDecompose	THIS	BigMatrixImpl	0	InvalidMatrixException	$.lu[max][col].abs().compareTo(TOO_SMALL) <= 0
367	1070	12	BigMatrixImpl.java	luDecompose	max	int	0	InvalidMatrixException	lu[$][col].abs().compareTo(TOO_SMALL) <= 0
367	1070	12	BigMatrixImpl.java	luDecompose	col	int	0	InvalidMatrixException	lu[max][$].abs().compareTo(TOO_SMALL) <= 0
368	1076	12	BigMatrixImpl.java	luDecompose	max	int	0	DEF	$ != col
368	1076	12	BigMatrixImpl.java	luDecompose	col	int	0	DEF	max != $
46168	1078	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < nCols
46168	1078	16	BigMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	i < $
46169	1090	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
46169	1090	12	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
369	1105	8	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	DEF	$.data != null
46170	1106	12	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	NIL-FOR	i < $.data.$.length
46170	1106	12	BigMatrixImpl.java	toString	i	int	0	NIL-FOR	$ < data.length
370	1107	16	BigMatrixImpl.java	toString	i	int	0	DEF	$ > 0
46171	1110	16	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	NIL-FOR	j < $.data[0].length
46171	1110	16	BigMatrixImpl.java	toString	j	int	0	NIL-FOR	$ < data[0].length
371	1111	20	BigMatrixImpl.java	toString	j	int	0	DEF	$ > 0
372	1132	8	BigMatrixImpl.java	equals	THIS	BigMatrixImpl	0	RET	object == $
372	1132	8	BigMatrixImpl.java	equals	object	Object	0	RET	$ == this
373	1135	8	BigMatrixImpl.java	equals	object	Object	0	RET	$ instanceof BigMatrixImpl == false
374	1141	8	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	$.getRowDimension() != nRows
374	1141	8	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	$.getColumnDimension() != nCols
374	1141	8	BigMatrixImpl.java	equals	nRows	int	0	RET	m.getRowDimension() != $
374	1141	8	BigMatrixImpl.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
46172	1144	8	BigMatrixImpl.java	equals	row	int	0	NIL-FOR	$ < nRows
46172	1144	8	BigMatrixImpl.java	equals	nRows	int	0	NIL-FOR	row < $
46173	1145	12	BigMatrixImpl.java	equals	col	int	0	NIL-FOR	$ < nCols
46173	1145	12	BigMatrixImpl.java	equals	nCols	int	0	NIL-FOR	col < $
375	1146	16	BigMatrixImpl.java	equals	THIS	BigMatrixImpl	0	RET	$.data[row][col].equals(m.getEntry(row, col))
375	1146	16	BigMatrixImpl.java	equals	col	int	0	RET	data[row][$].equals(m.getEntry(row, $))
375	1146	16	BigMatrixImpl.java	equals	row	int	0	RET	data[$][col].equals(m.getEntry($, col))
375	1146	16	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	data[row][col].equals($.getEntry(row, col))
46174	1165	8	BigMatrixImpl.java	hashCode	row	int	0	NIL-FOR	$ < nRows
46174	1165	8	BigMatrixImpl.java	hashCode	nRows	int	0	NIL-FOR	row < $
46175	1166	12	BigMatrixImpl.java	hashCode	col	int	0	NIL-FOR	$ < nCols
46175	1166	12	BigMatrixImpl.java	hashCode	nCols	int	0	NIL-FOR	col < $
376	1216	8	BigMatrixImpl.java	getLUMatrix	THIS	BigMatrixImpl	0	DEF	$.lu == null
46176	1251	8	BigMatrixImpl.java	copyOut	i	int	0	NIL-FOR	$ < nRows
46176	1251	8	BigMatrixImpl.java	copyOut	nRows	int	0	NIL-FOR	i < $
46177	1280	8	BigMatrixImpl.java	copyIn	i	int	0	NIL-FOR	$ < nRows
46177	1280	8	BigMatrixImpl.java	copyIn	nRows	int	0	NIL-FOR	i < $
46178	1281	12	BigMatrixImpl.java	copyIn	j	int	0	NIL-FOR	$ < nCols
46178	1281	12	BigMatrixImpl.java	copyIn	nCols	int	0	NIL-FOR	j < $
46179	1298	8	BigMatrixImpl.java	copyIn	i	int	0	NIL-FOR	$ < nRows
46179	1298	8	BigMatrixImpl.java	copyIn	nRows	int	0	NIL-FOR	i < $
46180	1299	12	BigMatrixImpl.java	copyIn	j	int	0	NIL-FOR	$ < nCols
46180	1299	12	BigMatrixImpl.java	copyIn	nCols	int	0	NIL-FOR	j < $
273	78	8	BinomialDistributionImpl.java	setNumberOfTrials	trials	int	0	IllegalArgumentException	$ < 0
274	91	8	BinomialDistributionImpl.java	setProbabilityOfSuccess	p	double	0	IllegalArgumentException	$ < 0.0
274	91	8	BinomialDistributionImpl.java	setProbabilityOfSuccess	p	double	0	IllegalArgumentException	$ > 1.0
275	130	8	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
276	132	15	BinomialDistributionImpl.java	cumulativeProbability	THIS	BinomialDistributionImpl	1	DEF	x >= $.getNumberOfTrials()
276	132	15	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= getNumberOfTrials()
277	152	8	BinomialDistributionImpl.java	probability	THIS	BinomialDistributionImpl	1	DEF	x > $.getNumberOfTrials()
277	152	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ > getNumberOfTrials()
277	152	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ < 0
278	179	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
279	182	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
46579	83	8	BisectionSolver.java	solve	THIS	BisectionSolver	0	NIL-WHILE	i < $.maximalIterationCount
46579	83	8	BisectionSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
952	88	12	BisectionSolver.java	solve	fm	double	1	DEF	$ * fmin > 0.0
952	88	12	BisectionSolver.java	solve	fmin	double	1	DEF	fm * $ > 0.0
953	96	12	BisectionSolver.java	solve	THIS	BisectionSolver	0	RET	Math.abs(max - min) <= $.absoluteAccuracy
953	96	12	BisectionSolver.java	solve	min	double	0	RET	Math.abs(max - $) <= absoluteAccuracy
953	96	12	BisectionSolver.java	solve	max	double	0	RET	Math.abs($ - min) <= absoluteAccuracy
974	67	8	BrentSolver.java	solve	min	double	0	IllegalArgumentException	((initial - $) * (max -initial)) < 0
974	67	8	BrentSolver.java	solve	max	double	0	IllegalArgumentException	((initial - min) * ($ -initial)) < 0
974	67	8	BrentSolver.java	solve	initial	double	0	IllegalArgumentException	(($ - min) * (max -$)) < 0
975	75	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yInitial) <= $.functionValueAccuracy
975	75	8	BrentSolver.java	solve	yInitial	double	0	RET	Math.abs($) <= functionValueAccuracy
976	82	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yMin) <= $.functionValueAccuracy
976	82	8	BrentSolver.java	solve	yMin	double	0	RET	Math.abs($) <= functionValueAccuracy
977	88	8	BrentSolver.java	solve	yInitial	double	0	RET	$ * yMin < 0
977	88	8	BrentSolver.java	solve	yMin	double	0	RET	yInitial * $ < 0
978	94	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yMax) <= $.functionValueAccuracy
978	94	8	BrentSolver.java	solve	yMax	double	0	RET	Math.abs($) <= functionValueAccuracy
979	100	8	BrentSolver.java	solve	yInitial	double	0	RET	$ * yMax < 0
979	100	8	BrentSolver.java	solve	yMax	double	0	RET	yInitial * $ < 0
980	135	8	BrentSolver.java	solve	yMin	double	0	IllegalArgumentException	$ * yMax >= 0
980	135	8	BrentSolver.java	solve	yMax	double	0	IllegalArgumentException	yMin * $ >= 0
46594	172	8	BrentSolver.java	solve	THIS	BrentSolver	0	NIL-WHILE	i < $.maximalIterationCount
46594	172	8	BrentSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
981	173	12	BrentSolver.java	solve	y1	double	0	DEF	Math.abs(y2) < Math.abs($)
981	173	12	BrentSolver.java	solve	y2	double	0	DEF	Math.abs($) < Math.abs(y1)
982	182	12	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(y1) <= $.functionValueAccuracy
982	182	12	BrentSolver.java	solve	y1	double	0	RET	Math.abs($) <= functionValueAccuracy
983	192	12	BrentSolver.java	solve	dx	double	0	RET	Math.abs($) <= tolerance
983	192	12	BrentSolver.java	solve	tolerance	double	0	RET	Math.abs(dx) <= $
984	196	12	BrentSolver.java	solve	tolerance	double	1	DEF	Math.abs(oldDelta) < $
984	196	12	BrentSolver.java	solve	oldDelta	double	1	DEF	Math.abs($) < tolerance
984	196	12	BrentSolver.java	solve	y0	double	1	DEF	Math.abs($) <= Math.abs(y1)
984	196	12	BrentSolver.java	solve	y1	double	1	DEF	Math.abs(y0) <= Math.abs($)
985	208	16	BrentSolver.java	solve	x0	double	1	DEF	$ == x2
985	208	16	BrentSolver.java	solve	x2	double	1	DEF	x0 == $
986	219	16	BrentSolver.java	solve	p	double	1	DEF	$ > 0.0
987	224	16	BrentSolver.java	solve	p	double	1	DEF	2.0 * $ >= 1.5 * dx * p1 - Math.abs(tolerance * p1)
987	224	16	BrentSolver.java	solve	p	double	1	DEF	$ >= Math.abs(0.5 * oldDelta * p1)
987	224	16	BrentSolver.java	solve	p1	double	1	DEF	2.0 * p >= 1.5 * dx * $ - Math.abs(tolerance * $)
987	224	16	BrentSolver.java	solve	p1	double	1	DEF	p >= Math.abs(0.5 * oldDelta * $)
987	224	16	BrentSolver.java	solve	dx	double	1	DEF	2.0 * p >= 1.5 * $ * p1 - Math.abs(tolerance * p1)
987	224	16	BrentSolver.java	solve	tolerance	double	1	DEF	2.0 * p >= 1.5 * dx * p1 - Math.abs($ * p1)
987	224	16	BrentSolver.java	solve	oldDelta	double	1	DEF	p >= Math.abs(0.5 * $ * p1)
988	240	12	BrentSolver.java	solve	tolerance	double	1	DEF	Math.abs(delta) > $
988	240	12	BrentSolver.java	solve	delta	double	1	DEF	Math.abs($) > tolerance
989	242	19	BrentSolver.java	solve	dx	double	1	DEF	$ > 0.0
990	244	19	BrentSolver.java	solve	dx	double	0	DEF	$ <= 0.0
991	248	12	BrentSolver.java	solve	y1	double	0	DEF	($ > 0) == (y2 > 0)
991	248	12	BrentSolver.java	solve	y2	double	0	DEF	(y1 > 0) == ($ > 0)
298	99	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ > 1.0
298	99	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ < 0.0
299	102	15	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
300	104	16	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
301	126	8	CauchyDistributionImpl.java	setScale	s	double	0	IllegalArgumentException	$ <= 0.0
302	145	8	CauchyDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < .5
303	166	8	CauchyDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
304	186	8	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
305	188	15	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > .5
537	66	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	IllegalArgumentException	expected.$.length < 2
537	66	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	IllegalArgumentException	expected.$.length != observed.$.length
537	66	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	IllegalArgumentException	$.length < 2
537	66	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	IllegalArgumentException	$.length != observed.length
537	66	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	IllegalArgumentException	expected.length != $.length
538	70	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isPositive(expected)
538	70	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isNonNegative(observed)
538	70	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	IllegalArgumentException	isPositive($)
538	70	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	IllegalArgumentException	isNonNegative($)
46304	76	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
46304	76	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
46304	76	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
539	82	8	ChiSquareTestImpl.java	chiSquare	sumExpected	double	0	DEF	Math.abs($ - sumObserved) > 10E-6
539	82	8	ChiSquareTestImpl.java	chiSquare	sumObserved	double	0	DEF	Math.abs(sumExpected - $) > 10E-6
46305	88	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
46305	88	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
46305	88	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
540	89	12	ChiSquareTestImpl.java	chiSquare	rescale	boolean	1	DEF	$
541	135	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	IllegalArgumentException	$ > 0.5
541	135	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	IllegalArgumentException	$ <= 0
46306	157	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
46306	157	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
46307	158	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
46307	158	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
46308	168	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
46308	168	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
46309	169	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
46309	169	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
542	202	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	IllegalArgumentException	$ <= 0
542	202	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	IllegalArgumentException	$ > 0.5
543	219	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	IllegalArgumentException	observed1.$.length < 2
543	219	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	IllegalArgumentException	observed1.$.length != observed2.$.length
543	219	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	IllegalArgumentException	$.length < 2
543	219	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	IllegalArgumentException	$.length != observed2.length
543	219	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	0	IllegalArgumentException	observed1.length != $.length
544	224	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isNonNegative(observed2)
544	224	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isNonNegative(observed1)
544	224	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	IllegalArgumentException	isNonNegative($)
544	224	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	0	IllegalArgumentException	isNonNegative($)
46310	233	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
46310	233	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
46310	233	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
545	238	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum1	long	0	IllegalArgumentException	$ * countSum2 == 0
545	238	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum2	long	0	IllegalArgumentException	countSum1 * $ == 0
546	244	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	0	DEF	$
46311	252	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
46311	252	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
46311	252	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
547	253	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	IllegalArgumentException	observed1[$] == 0
547	253	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	IllegalArgumentException	observed2[$] == 0
547	253	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	1	IllegalArgumentException	$[i] == 0
547	253	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	1	IllegalArgumentException	$[i] == 0
548	259	16	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	1	DEF	$
549	297	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	IllegalArgumentException	$ > 0.5
549	297	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	IllegalArgumentException	$ <= 0
550	314	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	IllegalArgumentException	in.$.length < 2
550	314	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	IllegalArgumentException	$.length < 2
551	318	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	IllegalArgumentException	in[0].length < 2
551	318	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	IllegalArgumentException	$[0].length < 2
552	322	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isRectangular(in)
552	322	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	IllegalArgumentException	isRectangular($)
553	326	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isNonNegative(in)
553	326	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	IllegalArgumentException	isNonNegative($)
46312	353	8	ChiSquareTestImpl.java	isRectangular	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
46312	353	8	ChiSquareTestImpl.java	isRectangular	i	int	0	NIL-FOR	$ < in.length
46312	353	8	ChiSquareTestImpl.java	isRectangular	in	long[][]	0	NIL-FOR	i < $.length
554	354	12	ChiSquareTestImpl.java	isRectangular	THIS	ChiSquareTestImpl	0	RET	in[i].length != in[0].length
554	354	12	ChiSquareTestImpl.java	isRectangular	i	int	0	RET	in[$].length != in[0].length
554	354	12	ChiSquareTestImpl.java	isRectangular	in	long[][]	0	RET	$[i].length != $[0].length
46313	370	8	ChiSquareTestImpl.java	isPositive	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
46313	370	8	ChiSquareTestImpl.java	isPositive	i	int	0	NIL-FOR	$ < in.length
46313	370	8	ChiSquareTestImpl.java	isPositive	in	double[]	0	NIL-FOR	i < $.length
555	371	12	ChiSquareTestImpl.java	isPositive	i	int	0	RET	in[$] <= 0
555	371	12	ChiSquareTestImpl.java	isPositive	in	double[]	0	RET	$[i] <= 0
46314	387	8	ChiSquareTestImpl.java	isNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
46314	387	8	ChiSquareTestImpl.java	isNonNegative	i	int	0	NIL-FOR	$ < in.length
46314	387	8	ChiSquareTestImpl.java	isNonNegative	in	long[]	0	NIL-FOR	i < $.length
556	388	12	ChiSquareTestImpl.java	isNonNegative	i	int	0	RET	in[$] < 0
556	388	12	ChiSquareTestImpl.java	isNonNegative	in	long[]	0	RET	$[i] < 0
46315	404	8	ChiSquareTestImpl.java	isNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
46315	404	8	ChiSquareTestImpl.java	isNonNegative	i	int	0	NIL-FOR	$ < in.length
46315	404	8	ChiSquareTestImpl.java	isNonNegative	in	long[][]	0	NIL-FOR	i < $.length
46316	405	12	ChiSquareTestImpl.java	isNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	j < in[i].length
46316	405	12	ChiSquareTestImpl.java	isNonNegative	j	int	0	NIL-FOR	$ < in[i].length
46316	405	12	ChiSquareTestImpl.java	isNonNegative	i	int	0	NIL-FOR	j < in[$].length
46316	405	12	ChiSquareTestImpl.java	isNonNegative	in	long[][]	0	NIL-FOR	j < $[i].length
557	406	16	ChiSquareTestImpl.java	isNonNegative	j	int	0	RET	in[i][$] < 0
557	406	16	ChiSquareTestImpl.java	isNonNegative	i	int	0	RET	in[$][j] < 0
557	406	16	ChiSquareTestImpl.java	isNonNegative	in	long[][]	0	RET	$[i][j] < 0
294	100	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
295	103	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
296	137	8	ChiSquaredDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
297	162	8	ChiSquaredDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
46528	97	4	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedState	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
46528	97	4	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
156	94	8	Complex.java	abs	THIS	Complex	0	RET	$.isNaN()
157	98	8	Complex.java	abs	THIS	Complex	0	RET	$.isInfinite()
158	102	8	Complex.java	abs	THIS	Complex	1	RET	Math.abs($.real) < Math.abs($.imaginary)
159	103	12	Complex.java	abs	THIS	Complex	0	RET	$.imaginary == 0.0
160	109	12	Complex.java	abs	THIS	Complex	0	RET	$.real == 0.0
161	154	8	Complex.java	conjugate	THIS	Complex	0	RET	$.isNaN()
162	196	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN()
162	196	8	Complex.java	divide	rhs	Complex	0	RET	$.isNaN()
163	202	8	Complex.java	divide	c	double	0	RET	$ == 0.0
163	202	8	Complex.java	divide	d	double	0	RET	$ == 0.0
164	206	8	Complex.java	divide	THIS	Complex	0	RET	$.isInfinite()
164	206	8	Complex.java	divide	rhs	Complex	0	RET	$.isInfinite()
165	210	8	Complex.java	divide	c	double	1	RET	Math.abs($) < Math.abs(d)
165	210	8	Complex.java	divide	d	double	1	RET	Math.abs(c) < Math.abs($)
166	211	12	Complex.java	divide	d	double	0	RET	$ == 0.0
167	219	12	Complex.java	divide	c	double	0	RET	$ == 0.0
168	250	8	Complex.java	equals	THIS	Complex	1	DEF	$ == other
168	250	8	Complex.java	equals	other	Object	1	DEF	this == $
169	252	15	Complex.java	equals	other	Object	1	DEF	$ == null
170	257	16	Complex.java	equals	rhs	Complex	1	DEF	$.isNaN()
171	282	8	Complex.java	hashCode	THIS	Complex	0	RET	$.isNaN()
172	360	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN()
172	360	8	Complex.java	multiply	rhs	Complex	0	RET	$.isNaN()
173	363	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
173	363	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
173	363	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(rhs.$.real)
173	363	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(rhs.$.imaginary)
173	363	8	Complex.java	multiply	rhs	Complex	0	RET	Double.isInfinite($.real)
173	363	8	Complex.java	multiply	rhs	Complex	0	RET	Double.isInfinite($.imaginary)
174	381	8	Complex.java	negate	THIS	Complex	0	RET	$.isNaN()
175	407	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN()
175	407	8	Complex.java	subtract	rhs	Complex	0	RET	$.isNaN()
176	430	8	Complex.java	acos	THIS	Complex	0	RET	$.isNaN()
177	453	8	Complex.java	asin	THIS	Complex	0	RET	$.isNaN()
178	476	8	Complex.java	atan	THIS	Complex	0	RET	$.isNaN()
179	511	8	Complex.java	cos	THIS	Complex	0	RET	$.isNaN()
180	545	8	Complex.java	cosh	THIS	Complex	0	RET	$.isNaN()
181	580	8	Complex.java	exp	THIS	Complex	0	RET	$.isNaN()
182	618	8	Complex.java	log	THIS	Complex	0	RET	$.isNaN()
183	644	8	Complex.java	pow	x	Complex	0	NullPointerException	$ == null
184	677	8	Complex.java	sin	THIS	Complex	0	RET	$.isNaN()
185	711	8	Complex.java	sinh	THIS	Complex	0	RET	$.isNaN()
186	753	8	Complex.java	sqrt	THIS	Complex	0	RET	$.isNaN()
187	757	8	Complex.java	sqrt	THIS	Complex	0	RET	$.imaginary == 0.0
187	757	8	Complex.java	sqrt	THIS	Complex	0	RET	$.real == 0.0
188	762	8	Complex.java	sqrt	THIS	Complex	1	RET	$.real >= 0.0
189	819	8	Complex.java	tan	THIS	Complex	0	RET	$.isNaN()
190	857	8	Complex.java	tanh	THIS	Complex	0	RET	$.isNaN()
138	148	8	ComplexFormat.java	format	im	double	1	DEF	$ < 0.0
139	152	15	ComplexFormat.java	format	im	double	0	DEF	$ > 0.0
139	152	15	ComplexFormat.java	format	im	double	0	DEF	Double.isNaN($)
140	179	8	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Complex
141	181	15	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Number
142	211	8	ComplexFormat.java	formatDouble	value	double	1	DEF	Double.isInfinite($)
142	211	8	ComplexFormat.java	formatDouble	value	double	1	DEF	Double.isNaN($)
143	306	8	ComplexFormat.java	parse	parsePosition	ParsePosition	0	ParseException	$.getIndex() == 0
144	328	8	ComplexFormat.java	parse	re	Number	0	RET	$ == null
145	365	8	ComplexFormat.java	parse	im	Number	0	RET	$ == null
146	377	8	ComplexFormat.java	parse	THIS	ComplexFormat	0	RET	source.substring(startIndex, endIndex).compareTo( $.getImaginaryCharacter()) != 0
146	377	8	ComplexFormat.java	parse	startIndex	int	0	RET	source.substring($, endIndex).compareTo( getImaginaryCharacter()) != 0
146	377	8	ComplexFormat.java	parse	endIndex	int	0	RET	source.substring(startIndex, $).compareTo( getImaginaryCharacter()) != 0
146	377	8	ComplexFormat.java	parse	source	String	0	RET	$.substring(startIndex, endIndex).compareTo( getImaginaryCharacter()) != 0
147	415	9	ComplexFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
147	415	9	ComplexFormat.java	parseNextCharacter	n	int	0	DEF	index < $
46107	417	13	ComplexFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
46107	417	13	ComplexFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
46107	417	13	ComplexFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
148	422	13	ComplexFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
148	422	13	ComplexFormat.java	parseNextCharacter	n	int	0	DEF	index < $
149	450	8	ComplexFormat.java	parseNumber	endIndex	int	0	DEF	$ < source.length()
149	450	8	ComplexFormat.java	parseNumber	source	String	0	DEF	endIndex < $.length()
150	451	12	ComplexFormat.java	parseNumber	sb	StringBuffer	0	DEF	source.substring(startIndex, endIndex).compareTo($.toString()) == 0
150	451	12	ComplexFormat.java	parseNumber	startIndex	int	0	DEF	source.substring($, endIndex).compareTo(sb.toString()) == 0
150	451	12	ComplexFormat.java	parseNumber	endIndex	int	0	DEF	source.substring(startIndex, $).compareTo(sb.toString()) == 0
150	451	12	ComplexFormat.java	parseNumber	source	String	0	DEF	$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
151	476	8	ComplexFormat.java	parseNumber	startIndex	int	0	DEF	$ == endIndex
151	476	8	ComplexFormat.java	parseNumber	endIndex	int	0	DEF	startIndex == $
46108	479	12	ComplexFormat.java	parseNumber	THIS	ComplexFormat	0	NIL-FOR	i < special.$.length
46108	479	12	ComplexFormat.java	parseNumber	i	int	0	NIL-FOR	$ < special.length
46108	479	12	ComplexFormat.java	parseNumber	special	double[]	0	NIL-FOR	i < $.length
152	481	16	ComplexFormat.java	parseNumber	number	Number	0	DEF	$ != null
153	508	8	ComplexFormat.java	setImaginaryCharacter	imaginaryCharacter	String	0	IllegalArgumentException	$ == null
153	508	8	ComplexFormat.java	setImaginaryCharacter	imaginaryCharacter	String	0	IllegalArgumentException	$.length() == 0
154	522	8	ComplexFormat.java	setImaginaryFormat	imaginaryFormat	NumberFormat	0	IllegalArgumentException	$ == null
155	536	8	ComplexFormat.java	setRealFormat	realFormat	NumberFormat	0	IllegalArgumentException	$ == null
137	267	8	ComplexUtils.java	polar2Complex	r	double	0	IllegalArgumentException	$ < 0
46097	140	8	ContinuedFraction.java	evaluate	n	int	0	NIL-WHILE	$ < maxIterations
46097	140	8	ContinuedFraction.java	evaluate	relativeError	double	0	NIL-WHILE	$ > epsilon
46097	140	8	ContinuedFraction.java	evaluate	epsilon	double	0	NIL-WHILE	relativeError > $
46097	140	8	ContinuedFraction.java	evaluate	maxIterations	int	0	NIL-WHILE	n < $
3	146	12	ContinuedFraction.java	evaluate	p2	double	0	Double	Double.isInfinite($)
3	146	12	ContinuedFraction.java	evaluate	q2	double	0	Double	Double.isInfinite($)
4	148	16	ContinuedFraction.java	evaluate	a	double	1	DEF	$ != 0.0
5	151	23	ContinuedFraction.java	evaluate	b	double	1	DEF	$ != 0
6	172	8	ContinuedFraction.java	evaluate	n	int	0	Double	$ >= maxIterations
6	172	8	ContinuedFraction.java	evaluate	maxIterations	int	0	Double	n >= $
825	104	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	RET	model.$.steps.size() == 0
825	104	4	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	RET	$.steps.size() == 0
826	108	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	1	DEF	$.steps.size() == 0
827	113	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	IllegalArgumentException	$.getInterpolatedState().length != model.getInterpolatedState().length
827	113	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	IllegalArgumentException	getInterpolatedState().length != $.getInterpolatedState().length
828	117	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	IllegalArgumentException	$.forward ^ model.$.forward
828	117	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	IllegalArgumentException	forward ^ $.forward
829	126	6	ContinuousOutputModel.java	append	step	double	0	IllegalArgumentException	Math.abs(gap) > 1.0e-3 * Math.abs($)
829	126	6	ContinuousOutputModel.java	append	gap	double	0	IllegalArgumentException	Math.abs($) > 1.0e-3 * Math.abs(step)
46529	132	4	ContinuousOutputModel.java	append	iter	Iterator	0	NIL-FOR	$.hasNext()
830	176	4	ContinuousOutputModel.java	handleStep	THIS	ContinuousOutputModel	0	DEF	$.steps.size() == 0
831	183	4	ContinuousOutputModel.java	handleStep	isLast	boolean	0	DEF	$
832	242	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMin) <= 0
832	242	6	ContinuousOutputModel.java	setInterpolatedTime	sMin	StepInterpolator	0	RET	locatePoint(time, $) <= 0
832	242	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMin) <= 0
833	247	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMax) >= 0
833	247	6	ContinuousOutputModel.java	setInterpolatedTime	sMax	StepInterpolator	0	RET	locatePoint(time, $) >= 0
833	247	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMax) >= 0
46530	254	6	ContinuousOutputModel.java	setInterpolatedTime	iMin	int	0	NIL-WHILE	iMax - $ > 5
46530	254	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	$ - iMin > 5
834	259	8	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ < 0
835	262	15	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ > 0
836	276	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	Math.abs($ - tMin) < 1e-6
836	276	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	Math.abs(tMax - $) < 1e-6
836	276	8	ContinuousOutputModel.java	setInterpolatedTime	tMin	double	1	DEF	Math.abs(tMed - $) < 1e-6
836	276	8	ContinuousOutputModel.java	setInterpolatedTime	tMax	double	1	DEF	Math.abs($ - tMed) < 1e-6
837	299	8	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.index < low
837	299	8	ContinuousOutputModel.java	setInterpolatedTime	low	int	1	DEF	index < $
838	301	15	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	DEF	$.index > high
838	301	15	ContinuousOutputModel.java	setInterpolatedTime	high	int	0	DEF	index > $
46531	309	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.index <= iMax
46531	309	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.locatePoint(time, (StepInterpolator) $.steps.get($.index)) > 0
46531	309	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	index <= $
46531	309	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	NIL-WHILE	locatePoint($, (StepInterpolator) steps.get(index)) > 0
839	341	4	ContinuousOutputModel.java	locatePoint	THIS	ContinuousOutputModel	0	RET	$.forward
840	342	6	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getPreviousTime()
840	342	6	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getPreviousTime()
841	344	13	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getCurrentTime()
841	344	13	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getCurrentTime()
842	350	4	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getPreviousTime()
842	350	4	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getPreviousTime()
843	352	11	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getCurrentTime()
843	352	11	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getCurrentTime()
601	86	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	THIS	CorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != order
601	86	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	DimensionMismatchException	mean.length != $
601	86	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != order
46323	115	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	i	int	0	NIL-FOR	$ < order
46323	115	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	NIL-FOR	i < $
46324	180	8	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
46324	180	8	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
46325	185	8	CorrelatedRandomVectorGenerator.java	decompose	loop	boolean	0	NIL-FOR	$
46326	189	12	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
46326	189	12	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
602	192	16	CorrelatedRandomVectorGenerator.java	decompose	ii	int	0	DEF	c[$][$] > c[isi][isi]
602	192	16	CorrelatedRandomVectorGenerator.java	decompose	isi	int	0	DEF	c[ii][ii] > c[$][$]
602	192	16	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	0	DEF	$[ii][ii] > $[isi][isi]
603	199	12	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	DEF	swap[$.rank] != $.rank
603	199	12	CorrelatedRandomVectorGenerator.java	decompose	swap	int[]	0	DEF	$[rank] != rank
604	207	12	CorrelatedRandomVectorGenerator.java	decompose	ir	int	1	NotPositiveDefiniteMatrixException	c[$][$] < small
604	207	12	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	1	NotPositiveDefiniteMatrixException	$[ir][ir] < small
604	207	12	CorrelatedRandomVectorGenerator.java	decompose	small	double	1	NotPositiveDefiniteMatrixException	c[ir][ir] < $
605	209	16	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	NotPositiveDefiniteMatrixException	$.rank == 0
46327	214	16	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
46327	214	16	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
606	215	20	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NotPositiveDefiniteMatrixException	c[index[$]][index[$]] < -small
606	215	20	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	0	NotPositiveDefiniteMatrixException	$[index[i]][index[i]] < -small
606	215	20	CorrelatedRandomVectorGenerator.java	decompose	index	int[]	0	NotPositiveDefiniteMatrixException	c[$[i]][$[i]] < -small
606	215	20	CorrelatedRandomVectorGenerator.java	decompose	small	double	0	NotPositiveDefiniteMatrixException	c[index[i]][index[i]] < -$
46328	233	16	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
46328	233	16	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
46329	238	20	CorrelatedRandomVectorGenerator.java	decompose	j	int	0	NIL-FOR	$ < i
46329	238	20	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	j < $
46330	255	8	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
46330	255	8	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
46331	268	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < $.rank
46331	268	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < rank
46332	274	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < correlated.$.length
46332	274	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < correlated.length
46332	274	8	CorrelatedRandomVectorGenerator.java	nextVector	correlated	double[]	0	NIL-FOR	i < $.length
46333	276	12	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.rank
46333	276	12	CorrelatedRandomVectorGenerator.java	nextVector	j	int	0	NIL-FOR	$ < rank
87	46	8	DefaultTransformer.java	transform	o	Object	0	MathException	$ == null
88	50	8	DefaultTransformer.java	transform	o	Object	0	RET	$ instanceof Number
494	164	8	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.windowSize != INFINITE_WINDOW
495	165	12	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.getN() == $.windowSize
496	167	19	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	0	DEF	$.getN() < $.windowSize
497	210	8	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	0	DEF	$.getN() > 0
498	211	12	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	1	DEF	$.getN() > 1
499	309	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	IllegalArgumentException	$ < 1
500	310	12	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	IllegalArgumentException	$ != INFINITE_WINDOW
501	320	8	DescriptiveStatistics.java	setWindowSize	THIS	DescriptiveStatistics	0	DEF	windowSize < $.eDA.getNumElements()
501	320	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
501	320	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < eDA.getNumElements()
502	384	8	DescriptiveStatistics.java	getPercentile	THIS	DescriptiveStatistics	1	DEF	$.percentileImpl instanceof Percentile
46267	166	8	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	0	NIL-FOR	i < vertexA.$.length
46267	166	8	DirectSearchOptimizer.java	minimize	i	int	0	NIL-FOR	$ < vertexA.length
46267	166	8	DirectSearchOptimizer.java	minimize	vertexA	double[]	0	NIL-FOR	i < $.length
46268	251	12	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	0	NIL-FOR	i < vertices.$.length
46268	251	12	DirectSearchOptimizer.java	minimize	i	int	0	NIL-FOR	$ < vertices.length
46268	251	12	DirectSearchOptimizer.java	minimize	vertices	double[][]	0	NIL-FOR	i < $.length
46269	360	8	DirectSearchOptimizer.java	buildSimplex	i	int	0	NIL-FOR	$ <= n
46269	360	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	i <= $
429	362	12	DirectSearchOptimizer.java	buildSimplex	i	int	0	DEF	$ > 0
430	365	12	DirectSearchOptimizer.java	buildSimplex	i	int	0	DEF	$ < n
430	365	12	DirectSearchOptimizer.java	buildSimplex	n	int	0	DEF	i < $
46270	379	8	DirectSearchOptimizer.java	buildSimplex	i	int	0	NIL-FOR	$ <= n
46270	379	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	i <= $
46271	396	8	DirectSearchOptimizer.java	buildSimplex	i	int	0	NIL-FOR	$ <= n
46271	396	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	i <= $
431	417	8	DirectSearchOptimizer.java	setMultiStart	starts	int	1	DEF	$ < 2
46272	477	8	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	0	NIL-FOR	i < $.starts
46272	477	8	DirectSearchOptimizer.java	minimize	i	int	0	NIL-FOR	$ < starts
46273	482	12	DirectSearchOptimizer.java	minimize	loop	boolean	0	NIL-FOR	$
432	483	16	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	1	DEF	checker.converged($.simplex)
432	483	16	DirectSearchOptimizer.java	minimize	checker	ConvergenceChecker	1	DEF	$.converged(simplex)
433	487	23	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	1	DEF	$.evaluations >= maxEvaluations
433	487	23	DirectSearchOptimizer.java	minimize	maxEvaluations	int	1	DEF	evaluations >= $
434	496	12	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	0	DEF	i < ($.starts - 1)
434	496	12	DirectSearchOptimizer.java	minimize	i	int	0	DEF	$ < (starts - 1)
435	508	8	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	0	ConvergenceException	$.minima[0] == null
46274	546	8	DirectSearchOptimizer.java	evaluateSimplex	THIS	DirectSearchOptimizer	0	NIL-FOR	i < $.simplex.$.length
46274	546	8	DirectSearchOptimizer.java	evaluateSimplex	i	int	0	NIL-FOR	$ < simplex.length
436	548	12	DirectSearchOptimizer.java	evaluateSimplex	pair	PointCostPair	0	DEF	Double.isNaN($.getCost())
46275	563	8	DirectSearchOptimizer.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < n
46275	563	8	DirectSearchOptimizer.java	replaceWorstPoint	n	int	0	NIL-FOR	i < $
437	564	12	DirectSearchOptimizer.java	replaceWorstPoint	THIS	DirectSearchOptimizer	0	DEF	$.simplex[i].getCost() > pointCostPair.getCost()
437	564	12	DirectSearchOptimizer.java	replaceWorstPoint	i	int	0	DEF	simplex[$].getCost() > pointCostPair.getCost()
437	564	12	DirectSearchOptimizer.java	replaceWorstPoint	pointCostPair	PointCostPair	0	DEF	simplex[i].getCost() > $.getCost()
46555	71	8	DividedDifferenceInterpolator.java	interpolate	THIS	DividedDifferenceInterpolator	0	NIL-FOR	i < c.$.length
46555	71	8	DividedDifferenceInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < c.length
46555	71	8	DividedDifferenceInterpolator.java	interpolate	c	double[]	0	NIL-FOR	i < $.length
46556	106	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
46556	106	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
46557	112	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
46557	112	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
46558	113	12	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	j < n-$
46558	113	12	DividedDifferenceInterpolator.java	computeDividedDifference	j	int	0	NIL-FOR	$ < n-i
46558	113	12	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	j < $-i
888	115	16	DividedDifferenceInterpolator.java	computeDividedDifference	denominator	double	0	DuplicateSampleAbscissaException	$ == 0.0
46482	151	4	DormandPrince54Integrator.java	estimateError	THIS	DormandPrince54Integrator	0	NIL-FOR	j < y0.$.length
46482	151	4	DormandPrince54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
46482	151	4	DormandPrince54Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
717	60	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	THIS	DormandPrince54StepInterpolator	1	DEF	interpolator.$.v1 == null
717	60	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	interpolator	DormandPrince54StepInterpolator	1	DEF	$.v1 == null
718	126	4	DormandPrince54StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince54StepInterpolator	0	DEF	$.vectorsInitialized
719	128	6	DormandPrince54StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince54StepInterpolator	0	DEF	$.v1 == null
46446	138	6	DormandPrince54StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
46446	138	6	DormandPrince54StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
46447	153	4	DormandPrince54StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
46447	153	4	DormandPrince54StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
46481	265	4	DormandPrince853Integrator.java	estimateError	THIS	DormandPrince853Integrator	0	NIL-FOR	j < y0.$.length
46481	265	4	DormandPrince853Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
46481	265	4	DormandPrince853Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
781	286	4	DormandPrince853Integrator.java	estimateError	den	double	0	DEF	$ <= 0.0
801	62	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	1	DEF	interpolator.$.currentState == null
801	62	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	interpolator	DormandPrince853StepInterpolator	1	DEF	$.currentState == null
46494	73	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
46494	73	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < yDotKLast.length
46495	80	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
46495	80	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < v.length
46496	127	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
46496	127	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < yDotKLast.length
46497	132	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
46497	132	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < v.length
802	162	4	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	DEF	$.vectorsInitialized
803	164	6	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	DEF	$.v == null
46498	166	8	DormandPrince853StepInterpolator.java	computeInterpolatedState	k	int	0	NIL-FOR	$ < 7
46499	175	6	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
46499	175	6	DormandPrince853StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
46500	181	8	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.d.$.length
46500	181	8	DormandPrince853StepInterpolator.java	computeInterpolatedState	k	int	0	NIL-FOR	$ < d.length
46501	197	4	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
46501	197	4	DormandPrince853StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
804	215	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	RET	$.currentState == null
46502	224	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
46502	224	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
46503	233	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
46503	233	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
46504	243	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
46504	243	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
46505	268	4	DormandPrince853StepInterpolator.java	writeExternal	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.currentState.$.length
46505	268	4	DormandPrince853StepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < currentState.length
46506	293	4	DormandPrince853StepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < dimension
46506	293	4	DormandPrince853StepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	i < $
782	184	4	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
782	184	4	EmbeddedRungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
46484	188	4	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
46484	188	4	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
783	195	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.switchesHandler.isEmpty()
783	195	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.handler.requiresDenseOutput()
46485	209	4	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	NIL-DOWHILE	$
46486	214	6	EmbeddedRungeKuttaIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
784	216	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
784	216	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
785	221	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
786	223	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.vecAbsoluteTolerance != null
46487	227	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
46487	227	12	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
46487	227	12	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
787	239	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize < t
787	239	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize > t
787	239	8	EmbeddedRungeKuttaIntegrator.java	integrate	forward	boolean	0	DEF	$
787	239	8	EmbeddedRungeKuttaIntegrator.java	integrate	forward	boolean	0	DEF	$
787	239	8	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
787	239	8	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
46488	245	8	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
46488	245	8	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
46489	247	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
46489	247	10	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
46489	247	10	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
46490	249	12	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
46490	249	12	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
46491	260	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
46491	260	8	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
46491	260	8	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
46492	262	10	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
46492	262	10	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
788	270	8	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
789	274	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.switchesHandler.evaluateStep(interpolator)
789	274	10	EmbeddedRungeKuttaIntegrator.java	integrate	interpolator	AbstractStepInterpolator	1	DEF	switchesHandler.evaluateStep($)
790	296	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.switchesHandler.stop()
791	307	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
792	312	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.switchesHandler.reset($.stepStart, y)
792	312	6	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
792	312	6	EmbeddedRungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	switchesHandler.reset(stepStart, $)
793	318	6	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
607	135	12	EmpiricalDistributionImpl.java	load	THIS	EmpiricalDistributionImpl	0	EOFException	$.sampleStats.getN() == 0
608	142	11	EmpiricalDistributionImpl.java	load	in	BufferedReader	0	DEF	$ != null
609	171	12	EmpiricalDistributionImpl.java	load	in	BufferedReader	0	DEF	$ != null
46334	342	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i< $.binCount - 1
46334	342	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$< binCount - 1
610	348	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	DEF	$.binStats.isEmpty()
46335	351	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
46335	351	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount
611	362	12	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	1	RuntimeException	$.e instanceof RuntimeException
46336	374	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount-1
46336	374	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount-1
612	404	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	IllegalStateException	$.loaded
46337	412	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
46337	412	8	EmpiricalDistributionImpl.java	getNextValue	i	int	0	NIL-FOR	$ < binCount
613	413	11	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	RET	x <= $.upperBounds[i]
613	413	11	EmpiricalDistributionImpl.java	getNextValue	i	int	0	RET	x <= upperBounds[$]
613	413	11	EmpiricalDistributionImpl.java	getNextValue	x	double	0	RET	$ <= upperBounds[i]
614	415	15	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	0	RET	$.getN() > 0
615	416	19	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	1	RET	$.getStandardDeviation() > 0
688	57	8	Erf.java	erf	x	double	0	DEF	$ < 0
46535	85	4	EulerStepInterpolator.java	computeInterpolatedState	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
46535	85	4	EulerStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
323	52	8	ExponentialDistributionImpl.java	setMean	mean	double	0	IllegalArgumentException	$ <= 0.0
324	83	8	ExponentialDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
325	106	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ > 1.0
325	106	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ < 0.0
326	109	15	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1.0
327	142	8	ExponentialDistributionImpl.java	getDomainUpperBound	p	double	1	RET	$ < .5
328	161	8	ExponentialDistributionImpl.java	getInitialDomain	p	double	1	RET	$ < .5
289	72	8	FDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
290	100	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
291	103	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
292	155	8	FDistributionImpl.java	setNumeratorDegreesOfFreedom	degreesOfFreedom	double	0	IllegalArgumentException	$ <= 0.0
293	177	8	FDistributionImpl.java	setDenominatorDegreesOfFreedom	degreesOfFreedom	double	0	IllegalArgumentException	$ <= 0.0
46422	249	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (N >> 1)
46423	263	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (N >> 1)
704	315	8	FastFourierTransformer.java	fft	THIS	FastFourierTransformer	0	RET	f.$.length == 1
704	315	8	FastFourierTransformer.java	fft	f	double	0	RET	$.length == 1
46426	324	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
46427	334	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
46428	374	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
46429	377	12	FastFourierTransformer.java	fft	j	int	0	NIL-WHILE	$ >= k
46429	377	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	$ > 0
46429	377	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	j >= $
46430	384	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
46431	399	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
46432	401	12	FastFourierTransformer.java	fft	j	int	0	NIL-FOR	$ < N
46433	402	16	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	k < $
46433	402	16	FastFourierTransformer.java	fft	k	int	0	NIL-FOR	$ < i
707	423	8	FastFourierTransformer.java	computeOmega	n	int	0	IllegalArgumentException	$ == 0
708	428	8	FastFourierTransformer.java	computeOmega	THIS	FastFourierTransformer	0	RET	n == $.omegaCount
708	428	8	FastFourierTransformer.java	computeOmega	n	int	0	RET	$ == omegaCount
709	429	8	FastFourierTransformer.java	computeOmega	THIS	FastFourierTransformer	0	RET	n + $.omegaCount == 0
709	429	8	FastFourierTransformer.java	computeOmega	n	int	0	RET	$ + omegaCount == 0
46434	430	12	FastFourierTransformer.java	computeOmega	THIS	FastFourierTransformer	0	NIL-FOR	i < Math.abs($.omegaCount)
46434	430	12	FastFourierTransformer.java	computeOmega	i	int	0	NIL-FOR	$ < Math.abs(omegaCount)
46435	442	8	FastFourierTransformer.java	computeOmega	i	int	0	NIL-FOR	$ < Math.abs(n)
46435	442	8	FastFourierTransformer.java	computeOmega	n	int	0	NIL-FOR	i < Math.abs($)
710	470	8	FastFourierTransformer.java	sample	n	int	0	IllegalArgumentException	$ <= 0
46436	477	8	FastFourierTransformer.java	sample	i	int	0	NIL-FOR	$ < n
46436	477	8	FastFourierTransformer.java	sample	n	int	0	NIL-FOR	i < $
46437	492	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
46437	492	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
46437	492	8	FastFourierTransformer.java	scaleArray	f	double	0	NIL-FOR	i < $.length
46438	507	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
46438	507	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
46438	507	8	FastFourierTransformer.java	scaleArray	f	Complex	0	NIL-FOR	i < $.length
711	530	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	IllegalArgumentException	$.isPowerOf2(d.$.length)
711	530	8	FastFourierTransformer.java	verifyDataSet	d	double	0	IllegalArgumentException	isPowerOf2($.length)
712	543	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	IllegalArgumentException	$.isPowerOf2(o.$.length)
712	543	8	FastFourierTransformer.java	verifyDataSet	o	Object	0	IllegalArgumentException	isPowerOf2($.length)
713	559	8	FastFourierTransformer.java	verifyInterval	lower	double	0	IllegalArgumentException	$ >= upper
713	559	8	FastFourierTransformer.java	verifyInterval	upper	double	0	IllegalArgumentException	lower >= $
702	228	8	FastSineTransformer.java	fst	f	double	0	IllegalArgumentException	$[0] != 0.0
46424	242	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (N >> 1)
46425	254	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (N >> 1)
491	87	8	FirstMoment.java	increment	THIS	FirstMoment	0	DEF	$.n == 0
475	73	8	FourthMoment.java	increment	THIS	FourthMoment	0	DEF	$.n < 1
208	134	8	Fraction.java	Fraction	overflow	long	0	FractionConversionException	a0 > $
208	134	8	Fraction.java	Fraction	a0	long	0	FractionConversionException	$ > overflow
209	140	8	Fraction.java	Fraction	a0	long	0	RET	Math.abs($ - value) < epsilon
209	140	8	Fraction.java	Fraction	value	double	0	RET	Math.abs(a0 - $) < epsilon
209	140	8	Fraction.java	Fraction	epsilon	double	0	RET	Math.abs(a0 - value) < $
46110	156	8	Fraction.java	Fraction	stop	boolean	0	NIL-DOWHILE	$
210	162	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	p2 > $
210	162	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	q2 > $
210	162	12	Fraction.java	Fraction	p2	long	0	FractionConversionException	$ > overflow
210	162	12	Fraction.java	Fraction	q2	long	0	FractionConversionException	$ > overflow
211	167	12	Fraction.java	Fraction	convergent	double	1	DEF	Math.abs($ - value) > epsilon
211	167	12	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
211	167	12	Fraction.java	Fraction	n	int	1	DEF	$ < maxIterations
211	167	12	Fraction.java	Fraction	value	double	1	DEF	Math.abs(convergent - $) > epsilon
211	167	12	Fraction.java	Fraction	epsilon	double	1	DEF	Math.abs(convergent - value) > $
211	167	12	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
211	167	12	Fraction.java	Fraction	maxIterations	int	1	DEF	n < $
212	179	8	Fraction.java	Fraction	n	int	0	FractionConversionException	$ >= maxIterations
212	179	8	Fraction.java	Fraction	maxIterations	int	0	FractionConversionException	n >= $
213	183	8	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
213	183	8	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
214	202	8	Fraction.java	Fraction	den	int	0	ArithmeticException	$ == 0
215	205	8	Fraction.java	Fraction	den	int	0	ArithmeticException	$ < 0
216	206	12	Fraction.java	Fraction	num	int	0	ArithmeticException	$ == Integer.MIN_VALUE
216	206	12	Fraction.java	Fraction	den	int	0	ArithmeticException	$ == Integer.MIN_VALUE
217	215	8	Fraction.java	Fraction	d	int	0	DEF	$ > 1
218	221	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
219	235	8	Fraction.java	abs	THIS	Fraction	1	DEF	$.numerator >= 0
220	252	8	Fraction.java	compareTo	THIS	Fraction	0	DEF	$ != object
220	252	8	Fraction.java	compareTo	object	Object	0	DEF	this != $
221	257	12	Fraction.java	compareTo	first	double	1	DEF	$ < second
221	257	12	Fraction.java	compareTo	second	double	1	DEF	first < $
222	259	19	Fraction.java	compareTo	first	double	0	DEF	$ > second
222	259	19	Fraction.java	compareTo	second	double	0	DEF	first > $
223	288	8	Fraction.java	equals	THIS	Fraction	1	DEF	$ == other
223	288	8	Fraction.java	equals	other	Object	1	DEF	this == $
224	290	15	Fraction.java	equals	other	Object	1	DEF	$ == null
225	364	8	Fraction.java	negate	THIS	Fraction	0	ArithmeticException	$.numerator==Integer.MIN_VALUE
226	417	8	Fraction.java	addSub	fraction	Fraction	0	IllegalArgumentException	$ == null
227	421	8	Fraction.java	addSub	THIS	Fraction	0	RET	$.numerator == 0
228	424	8	Fraction.java	addSub	THIS	Fraction	0	RET	fraction.$.numerator == 0
228	424	8	Fraction.java	addSub	fraction	Fraction	0	RET	$.numerator == 0
229	430	8	Fraction.java	addSub	d1	int	0	RET	$==1
230	454	8	Fraction.java	addSub	w	BigInteger	0	ArithmeticException	$.bitLength() > 31
231	474	8	Fraction.java	multiply	fraction	Fraction	0	IllegalArgumentException	$ == null
232	477	8	Fraction.java	multiply	THIS	Fraction	0	RET	$.numerator == 0
232	477	8	Fraction.java	multiply	THIS	Fraction	0	RET	fraction.$.numerator == 0
232	477	8	Fraction.java	multiply	fraction	Fraction	0	RET	$.numerator == 0
233	500	8	Fraction.java	divide	fraction	Fraction	0	IllegalArgumentException	$ == null
234	503	8	Fraction.java	divide	THIS	Fraction	0	ArithmeticException	fraction.$.numerator == 0
234	503	8	Fraction.java	divide	fraction	Fraction	0	ArithmeticException	$.numerator == 0
235	521	8	Fraction.java	getReducedFraction	denominator	int	0	ArithmeticException	$ == 0
236	524	8	Fraction.java	getReducedFraction	numerator	int	0	RET	$==0
237	528	8	Fraction.java	getReducedFraction	numerator	int	0	DEF	($&1)==0
237	528	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
238	531	8	Fraction.java	getReducedFraction	denominator	int	0	ArithmeticException	$ < 0
239	532	12	Fraction.java	getReducedFraction	numerator	int	0	ArithmeticException	$==Integer.MIN_VALUE
239	532	12	Fraction.java	getReducedFraction	denominator	int	0	ArithmeticException	$==Integer.MIN_VALUE
199	202	8	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Fraction
200	204	15	FractionFormat.java	format	obj	Object	1	IllegalArgumentException	$ instanceof Number
201	246	8	FractionFormat.java	parse	parsePosition	ParsePosition	0	ParseException	$.getIndex() == 0
202	268	8	FractionFormat.java	parse	num	Number	0	RET	$ == null
203	301	8	FractionFormat.java	parse	den	Number	0	RET	$ == null
204	330	8	FractionFormat.java	setDenominatorFormat	format	NumberFormat	0	IllegalArgumentException	$ == null
205	344	8	FractionFormat.java	setNumeratorFormat	format	NumberFormat	0	IllegalArgumentException	$ == null
206	375	9	FractionFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
206	375	9	FractionFormat.java	parseNextCharacter	n	int	0	DEF	index < $
46109	377	13	FractionFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
46109	377	13	FractionFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
46109	377	13	FractionFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
207	382	13	FractionFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
207	382	13	FractionFormat.java	parseNextCharacter	n	int	0	DEF	index < $
46317	76	8	Frequency.java	toString	iter	Iterator	0	NIL-WHILE	$.hasNext()
577	98	8	Frequency.java	addValue	v	Object	0	DEF	$ instanceof Integer
578	103	12	Frequency.java	addValue	count	Long	1	DEF	$ == null
46318	178	8	Frequency.java	getSumFreq	iterator	Iterator	0	NIL-WHILE	$.hasNext()
579	191	8	Frequency.java	getCount	v	Object	0	RET	$ instanceof Integer
580	197	12	Frequency.java	getCount	count	Long	0	DEF	$ != null
581	248	8	Frequency.java	getPct	THIS	Frequency	0	RET	$.getSumFreq() == 0
582	298	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	$.getSumFreq() == 0
583	301	8	Frequency.java	getCumFreq	v	Object	0	RET	$ instanceof Integer
584	305	8	Frequency.java	getCumFreq	c	Comparator	0	DEF	$ == null
585	312	12	Frequency.java	getCumFreq	value	Long	0	DEF	$ != null
586	319	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.firstKey()) < 0
586	319	8	Frequency.java	getCumFreq	c	Comparator	0	RET	$.compare(v, freqTable.firstKey()) < 0
586	319	8	Frequency.java	getCumFreq	v	Object	0	RET	c.compare($, freqTable.firstKey()) < 0
587	323	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.lastKey()) >= 0
587	323	8	Frequency.java	getCumFreq	c	Comparator	0	RET	$.compare(v, freqTable.lastKey()) >= 0
587	323	8	Frequency.java	getCumFreq	v	Object	0	RET	c.compare($, freqTable.lastKey()) >= 0
46319	328	8	Frequency.java	getCumFreq	values	Iterator	0	NIL-WHILE	$.hasNext()
588	330	12	Frequency.java	getCumFreq	nextValue	Object	1	DEF	c.compare(v, $) > 0
588	330	12	Frequency.java	getCumFreq	c	Comparator	1	DEF	$.compare(v, nextValue) > 0
588	330	12	Frequency.java	getCumFreq	v	Object	1	DEF	c.compare($, nextValue) > 0
589	389	8	Frequency.java	getCumPct	THIS	Frequency	0	RET	$.getSumFreq() == 0
692	90	8	Gamma.java	logGamma	x	double	1	DEF	Double.isNaN($)
692	90	8	Gamma.java	logGamma	x	double	1	DEF	$ <= 0.0
46420	96	12	Gamma.java	logGamma	i	int	0	NIL-FOR	$ > 0
693	158	8	Gamma.java	regularizedGammaP	a	double	1	DEF	Double.isNaN($)
693	158	8	Gamma.java	regularizedGammaP	a	double	1	DEF	$ <= 0.0
693	158	8	Gamma.java	regularizedGammaP	x	double	1	DEF	$ < 0.0
693	158	8	Gamma.java	regularizedGammaP	x	double	1	DEF	Double.isNaN($)
694	160	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ == 0.0
695	162	15	Gamma.java	regularizedGammaP	a	double	1	DEF	x > $
695	162	15	Gamma.java	regularizedGammaP	a	double	1	DEF	$ >= 1.0
695	162	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ > a
46421	171	12	Gamma.java	regularizedGammaP	n	double	0	NIL-WHILE	$ < maxIterations
46421	171	12	Gamma.java	regularizedGammaP	an	double	0	NIL-WHILE	Math.abs($) > epsilon
46421	171	12	Gamma.java	regularizedGammaP	epsilon	double	0	NIL-WHILE	Math.abs(an) > $
46421	171	12	Gamma.java	regularizedGammaP	maxIterations	int	0	NIL-WHILE	n < $
696	179	12	Gamma.java	regularizedGammaP	n	double	1	MaxIterationsExceededException	$ >= maxIterations
696	179	12	Gamma.java	regularizedGammaP	maxIterations	int	1	MaxIterationsExceededException	n >= $
697	233	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ <= 0.0
697	233	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	Double.isNaN($)
697	233	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	Double.isNaN($)
697	233	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < 0.0
698	235	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ == 0.0
699	237	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ < 1.0
699	237	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	x < $
699	237	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < a
253	72	8	GammaDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
254	96	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
255	99	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
256	111	8	GammaDistributionImpl.java	setAlpha	alpha	double	0	IllegalArgumentException	$ <= 0.0
257	131	8	GammaDistributionImpl.java	setBeta	beta	double	0	IllegalArgumentException	$ <= 0.0
258	175	8	GammaDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
259	200	8	GammaDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
46354	116	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	$.getCostEvaluations() < 2
46354	116	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	Math.abs($.cost) > $.convergence
46354	116	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	Math.abs(previous - $.cost) > ($.cost * $.steadyStateThreshold)
46354	116	8	GaussNewtonEstimator.java	estimate	previous	double	0	NIL-DOWHILE	Math.abs($ - cost) > (cost * steadyStateThreshold)
46355	122	12	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	i < $.measurements.$.length
46355	122	12	GaussNewtonEstimator.java	estimate	i	int	0	NIL-FOR	$ < measurements.length
653	123	16	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	DEF	$.measurements [i].isIgnored()
653	123	16	GaussNewtonEstimator.java	estimate	i	int	0	DEF	measurements [$].isIgnored()
46356	129	20	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	j < $.parameters.$.length
46356	129	20	GaussNewtonEstimator.java	estimate	j	int	0	NIL-FOR	$ < parameters.length
46357	135	20	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	k < $.parameters.$.length
46357	135	20	GaussNewtonEstimator.java	estimate	k	int	0	NIL-FOR	$ < parameters.length
46358	138	24	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	l < $.parameters.$.length
46358	138	24	GaussNewtonEstimator.java	estimate	l	int	0	NIL-FOR	$ < parameters.length
46359	156	16	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	i < $.parameters.$.length
46359	156	16	GaussNewtonEstimator.java	estimate	i	int	0	NIL-FOR	$ < parameters.length
489	80	8	GeometricMean.java	getResult	THIS	GeometricMean	1	RET	$.sumOfLogs.getN() > 0
490	153	8	GeometricMean.java	checkEmpty	THIS	GeometricMean	0	IllegalStateException	$.getN() > 0
46483	99	4	GillStepInterpolator.java	computeInterpolatedState	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
46483	99	4	GillStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
720	163	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stabilityReduction	double	1	DEF	$ > 0.9999
720	163	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stabilityReduction	double	1	DEF	$ < 0.0001
721	198	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl1	double	1	DEF	$ > 0.9999
721	198	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl1	double	1	DEF	$ < 0.0001
722	204	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl2	double	1	DEF	$ < 0.0001
722	204	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl2	double	1	DEF	$ > 0.9999
723	210	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl3	double	1	DEF	$ > 0.9999
723	210	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl3	double	1	DEF	$ < 0.0001
724	216	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl4	double	1	DEF	$ < 1.0001
724	216	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl4	double	1	DEF	$ > 999.9
725	250	4	GraggBulirschStoerIntegrator.java	setOrderControl	maxOrder	int	0	DEF	$ % 2 != 0
725	250	4	GraggBulirschStoerIntegrator.java	setOrderControl	maxOrder	int	0	DEF	$ <= 6
726	254	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl1	double	1	DEF	$ < 0.0001
726	254	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl1	double	1	DEF	$ > 0.9999
727	260	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl2	double	1	DEF	$ < 0.0001
727	260	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl2	double	1	DEF	$ > 0.9999
728	312	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence == null
728	312	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence.$.length != size
728	312	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	DEF	sequence.length != $
729	321	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
46448	323	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
46448	323	6	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
46449	328	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
46449	328	6	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
46450	336	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
46450	336	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
46451	341	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
46451	341	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
46452	343	6	GraggBulirschStoerIntegrator.java	initializeArrays	l	int	0	NIL-FOR	$ < k
46452	343	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	l < $
730	366	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudif	int	1	DEF	$ <= 0
730	366	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudif	int	1	DEF	$ >= 7
731	387	4	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	1	DEF	$.vecAbsoluteTolerance == null
46453	388	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
46453	388	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
46453	388	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
46454	393	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
46454	393	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
46454	393	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
46455	431	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
46455	431	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
46455	431	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
46456	438	4	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	NIL-FOR	$ < n
46456	438	4	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	NIL-FOR	j < $
732	440	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	DEF	2 * $ == n
732	440	6	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	DEF	2 * j == $
46457	446	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
46457	446	6	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
46457	446	6	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
733	455	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	$.performTest
733	455	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	k < $.maxIter
733	455	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	j <= $.maxChecks
733	455	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	RET	$ <= maxChecks
733	455	6	GraggBulirschStoerIntegrator.java	tryStep	k	int	0	RET	$ < maxIter
46458	457	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < y0.$.length
46458	457	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < y0.length
46458	457	8	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	l < $.length
46459	462	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < y0.$.length
46459	462	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < y0.length
46459	462	8	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	l < $.length
734	466	8	GraggBulirschStoerIntegrator.java	tryStep	initialNorm	double	0	RET	deltaNorm > 4 * Math.max(1.0e-15, $)
734	466	8	GraggBulirschStoerIntegrator.java	tryStep	deltaNorm	double	0	RET	$ > 4 * Math.max(1.0e-15, initialNorm)
46460	474	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
46460	474	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
46460	474	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
46461	492	4	GraggBulirschStoerIntegrator.java	extrapolate	j	int	0	NIL-FOR	$ < k
46461	492	4	GraggBulirschStoerIntegrator.java	extrapolate	k	int	0	NIL-FOR	j < $
46462	493	6	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
46462	493	6	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
46462	493	6	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
46463	501	4	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
46463	501	4	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
46463	501	4	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
46464	538	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length-1
46464	538	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length-1
46465	544	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length
46465	544	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length
46466	551	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < $.sequence[k]
46466	551	6	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < sequence[k]
46466	551	6	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	l < sequence[$]
735	557	4	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	DEF	y != $
735	557	4	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
736	563	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
46467	566	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < yMidDots.$.length
46467	566	6	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < yMidDots.length
46467	566	6	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	0	NIL-FOR	j < $.length
737	587	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.switchesHandler.isEmpty()
737	587	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
46468	606	4	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
738	611	6	GraggBulirschStoerIntegrator.java	integrate	newStep	boolean	0	DEF	$
739	616	8	GraggBulirschStoerIntegrator.java	integrate	firstStepAlreadyComputed	boolean	0	DEF	$
740	620	8	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
741	626	10	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
742	639	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize > t
742	639	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize < t
742	639	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
742	639	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
742	639	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
742	639	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
46469	648	6	GraggBulirschStoerIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
743	653	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.tryStep(equations, $.stepStart, y, $.stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
743	653	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	tryStep(equations, stepStart, y, stepSize, $, scale, fk[$], ($ == 0) ? yMidDots[0] : diagonal[$-1], ($ == 0) ? y1 : y1Diag[$-1], yTmp)
743	653	8	GraggBulirschStoerIntegrator.java	integrate	y1	double[]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? $ : y1Diag[k-1], yTmp)
743	653	8	GraggBulirschStoerIntegrator.java	integrate	yTmp	double[]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], $)
743	653	8	GraggBulirschStoerIntegrator.java	integrate	diagonal	double[][]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : $[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
743	653	8	GraggBulirschStoerIntegrator.java	integrate	y1Diag	double[][]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : $[k-1], yTmp)
743	653	8	GraggBulirschStoerIntegrator.java	integrate	fk	double[][][]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, $[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
743	653	8	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? $[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
743	653	8	GraggBulirschStoerIntegrator.java	integrate	scale	double[]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, $, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
743	653	8	GraggBulirschStoerIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	1	DEF	tryStep($, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
743	653	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	1	DEF	tryStep(equations, stepStart, $, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
744	666	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 0
46470	675	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < y0.$.length
46470	675	12	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
46470	675	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
745	681	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > 1.0e15
745	681	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > maxError
745	681	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ > 1
745	681	12	GraggBulirschStoerIntegrator.java	integrate	maxError	double	1	DEF	error > $
746	702	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
746	702	16	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
747	705	18	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
748	714	20	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
748	714	20	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
749	720	22	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
749	720	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
749	720	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
750	732	16	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
751	740	18	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
751	740	18	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
752	745	20	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
752	745	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
752	745	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
753	756	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > 1.0
754	758	18	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
754	758	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
754	758	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
755	769	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ <= 1.0
755	769	16	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
755	769	16	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	DEF	$
756	783	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.denseOutput
756	783	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
46471	786	8	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
46471	786	8	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
46472	795	8	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < mu
46472	795	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	NIL-FOR	l < $
46473	801	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
46473	801	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
46473	801	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
46474	804	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k - l2
46474	804	10	GraggBulirschStoerIntegrator.java	integrate	l2	int	0	NIL-FOR	j <= k - $
46474	804	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $ - l2
46475	807	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
46475	807	12	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
46475	807	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
46476	812	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
46476	812	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
46476	812	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
46477	817	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
46477	817	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
46478	818	12	GraggBulirschStoerIntegrator.java	integrate	m	int	0	NIL-FOR	$ >= 2 * (l + 1)
46478	818	12	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	m >= 2 * ($ + 1)
46479	819	14	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
46479	819	14	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
46479	819	14	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
757	827	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	DEF	$ >= 0
758	834	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.useInterpolationError
759	839	12	GraggBulirschStoerIntegrator.java	integrate	interpError	double	0	DEF	$ > 10.0
760	846	10	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
761	848	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.switchesHandler.evaluateStep(interpolator)
761	848	12	GraggBulirschStoerIntegrator.java	integrate	interpolator	AbstractStepInterpolator	0	DEF	switchesHandler.evaluateStep($)
762	856	8	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
763	864	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
764	871	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.switchesHandler.stop()
765	880	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.switchesHandler.reset($.stepStart, y)
765	880	8	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	DEF	$
765	880	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	switchesHandler.reset(stepStart, $)
766	887	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ == 1
767	889	10	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
768	892	15	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ <= targetIter
768	892	15	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k <= $
769	894	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k-1] < $.orderControl1 * $.costPerTimeUnit[k]
769	894	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
770	896	17	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
770	896	17	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
771	901	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k-2] < $.orderControl1 * $.costPerTimeUnit[k-1]
771	901	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 2
771	901	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$-2] < orderControl1 * costPerTimeUnit[$-1]
772	905	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[optimalIter]
772	905	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	0	DEF	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[$]
772	905	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[optimalIter]
773	910	8	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	1	DEF	$
774	917	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	1	DEF	$ <= k
774	917	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	optimalIter <= $
775	920	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
775	920	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
775	920	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ < targetIter
775	920	12	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k < $
776	941	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
777	947	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	1	DEF	$
814	107	4	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ < 0
815	114	6	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms != null
46512	116	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
46512	116	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
46512	116	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
46513	120	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
46513	120	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
46513	120	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
816	127	6	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ <= 4
46514	131	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.errfac.$.length
46514	131	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < errfac.length
46515	135	10	GraggBulirschStoerStepInterpolator.java	resetTables	j	int	0	NIL-FOR	$ <= i
46515	135	10	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	j <= $
817	206	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	1	DEF	interpolator.$.polynoms == null
817	206	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	interpolator	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms == null
46516	211	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.polynoms.$.length
46516	211	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	i	int	0	NIL-FOR	$ < polynoms.length
818	235	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms == null
818	235	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms.$.length <= (mu + 4)
818	235	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	polynoms.length <= ($ + 4)
46517	241	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
46517	241	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	i	int	0	NIL-FOR	$ < currentState.length
819	254	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	RET	$ < 0
820	262	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 0
821	266	8	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 1
822	270	10	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 2
46518	274	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	j	int	0	NIL-FOR	$ <= mu
46518	274	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	NIL-FOR	j <= $
823	294	4	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree >= 5
46519	295	6	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
46519	295	6	GraggBulirschStoerStepInterpolator.java	estimateError	i	int	0	NIL-FOR	$ < currentState.length
46520	325	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < dimension
46520	325	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedState	dimension	int	0	NIL-FOR	i < $
824	331	6	GraggBulirschStoerStepInterpolator.java	computeInterpolatedState	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree > 3
46521	333	8	GraggBulirschStoerStepInterpolator.java	computeInterpolatedState	j	int	0	NIL-FOR	$ > 3
46522	356	4	GraggBulirschStoerStepInterpolator.java	writeExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
46522	356	4	GraggBulirschStoerStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ <= currentDegree
46523	357	6	GraggBulirschStoerStepInterpolator.java	writeExternal	l	int	0	NIL-FOR	$ < dimension
46523	357	6	GraggBulirschStoerStepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	l < $
46524	380	4	GraggBulirschStoerStepInterpolator.java	readExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
46524	380	4	GraggBulirschStoerStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ <= currentDegree
46525	381	6	GraggBulirschStoerStepInterpolator.java	readExternal	l	int	0	NIL-FOR	$ < dimension
46525	381	6	GraggBulirschStoerStepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	l < $
46545	124	4	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	j < y0.$.length
46545	124	4	HighamHall54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
46545	124	4	HighamHall54Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
46546	126	6	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	l < $.staticE.$.length
46546	126	6	HighamHall54Integrator.java	estimateError	l	int	0	NIL-FOR	$ < staticE.length
46544	83	4	HighamHall54StepInterpolator.java	computeInterpolatedState	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
46544	83	4	HighamHall54StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
307	55	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	IllegalArgumentException	numberOfSuccesses > $
307	55	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	numberOfSuccesses	int	0	IllegalArgumentException	$ > populationSize
308	60	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	IllegalArgumentException	sampleSize > $
308	60	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	sampleSize	int	0	IllegalArgumentException	$ > populationSize
309	82	8	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x < $[0]
309	82	8	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < domain[0]
310	84	15	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x >= $[1]
310	84	15	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= domain[1]
311	194	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x < $[0]
311	194	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x > $[1]
311	194	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ < domain[0]
311	194	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ > domain[1]
312	225	8	HypergeometricDistributionImpl.java	setNumberOfSuccesses	num	int	0	IllegalArgumentException	$ < 0
313	238	8	HypergeometricDistributionImpl.java	setPopulationSize	size	int	0	IllegalArgumentException	$ <= 0
314	251	8	HypergeometricDistributionImpl.java	setSampleSize	size	int	0	IllegalArgumentException	$ < 0
315	272	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x < $[0]
315	272	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ < domain[0]
316	274	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x > $[1]
316	274	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ > domain[1]
46113	300	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x0	int	0	NIL-WHILE	$ != x1
46113	300	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x1	int	0	NIL-WHILE	x0 != $
484	79	8	Kurtosis.java	increment	THIS	Kurtosis	1	DEF	$.incMoment
485	92	8	Kurtosis.java	getResult	THIS	Kurtosis	0	DEF	$.moment.getN() > 3
486	94	16	Kurtosis.java	getResult	THIS	Kurtosis	1	DEF	$.moment.$.n <= 3
486	94	16	Kurtosis.java	getResult	variance	double	1	DEF	$ < 10E-20
487	111	8	Kurtosis.java	clear	THIS	Kurtosis	1	DEF	$.incMoment
488	148	8	Kurtosis.java	evaluate	THIS	Kurtosis	0	DEF	$.test(values, begin, length)
488	148	8	Kurtosis.java	evaluate	values	double[]	0	DEF	test($, begin, length)
488	148	8	Kurtosis.java	evaluate	begin	int	0	DEF	test(values, $, length)
488	148	8	Kurtosis.java	evaluate	length	int	0	DEF	test(values, begin, $)
488	148	8	Kurtosis.java	evaluate	length	int	0	DEF	$ > 3
46295	159	12	Kurtosis.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
46295	159	12	Kurtosis.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
46295	159	12	Kurtosis.java	evaluate	length	int	0	NIL-FOR	i < begin + $
954	54	8	LaguerreSolver.java	LaguerreSolver	f	UnivariateRealFunction	1	DEF	$ instanceof PolynomialFunction
955	89	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.p.value(min) == 0.0
955	89	8	LaguerreSolver.java	solve	min	double	0	RET	p.value($) == 0.0
956	90	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.p.value(max) == 0.0
956	90	8	LaguerreSolver.java	solve	max	double	0	RET	p.value($) == 0.0
957	91	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.p.value(initial) == 0.0
957	91	8	LaguerreSolver.java	solve	initial	double	0	RET	p.value($) == 0.0
958	95	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	1	RET	$.isBracketing(min, initial, $.p)
958	95	8	LaguerreSolver.java	solve	min	double	1	RET	isBracketing($, initial, p)
958	95	8	LaguerreSolver.java	solve	initial	double	1	RET	isBracketing(min, $, p)
959	124	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.p.value(min) == 0.0
959	124	8	LaguerreSolver.java	solve	min	double	0	RET	p.value($) == 0.0
960	125	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.p.value(max) == 0.0
960	125	8	LaguerreSolver.java	solve	max	double	0	RET	p.value($) == 0.0
46580	130	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-FOR	i < coefficients.$.length
46580	130	8	LaguerreSolver.java	solve	i	int	0	NIL-FOR	$ < coefficients.length
46580	130	8	LaguerreSolver.java	solve	coefficients	double[]	0	NIL-FOR	i < $.length
961	135	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.isRootOK(min, max, z)
961	135	8	LaguerreSolver.java	solve	z	Complex	0	RET	isRootOK(min, max, $)
961	135	8	LaguerreSolver.java	solve	min	double	0	RET	isRootOK($, max, z)
961	135	8	LaguerreSolver.java	solve	max	double	0	RET	isRootOK(min, $, z)
46581	142	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-FOR	i < root.$.length
46581	142	8	LaguerreSolver.java	solve	i	int	0	NIL-FOR	$ < root.length
46581	142	8	LaguerreSolver.java	solve	root	Complex[]	0	NIL-FOR	i < $.length
962	143	12	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.isRootOK(min, max, root[i])
962	143	12	LaguerreSolver.java	solve	i	int	0	RET	isRootOK(min, max, root[$])
962	143	12	LaguerreSolver.java	solve	root	Complex[]	0	RET	isRootOK(min, max, $[i])
962	143	12	LaguerreSolver.java	solve	min	double	0	RET	isRootOK($, max, root[i])
962	143	12	LaguerreSolver.java	solve	max	double	0	RET	isRootOK(min, $, root[i])
46582	187	8	LaguerreSolver.java	solveAll	THIS	LaguerreSolver	0	NIL-FOR	i < c.$.length
46582	187	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ < c.length
46582	187	8	LaguerreSolver.java	solveAll	c	Complex[]	0	NIL-FOR	i < $.length
963	211	8	LaguerreSolver.java	solveAll	n	int	0	IllegalArgumentException	$ < 1
46583	216	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ <= n
46583	216	8	LaguerreSolver.java	solveAll	n	int	0	NIL-FOR	i <= $
46584	222	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ < n
46584	222	8	LaguerreSolver.java	solveAll	n	int	0	NIL-FOR	i < $
46585	229	12	LaguerreSolver.java	solveAll	j	int	0	NIL-FOR	$ >= 0
964	259	8	LaguerreSolver.java	solve	n	int	0	IllegalArgumentException	$ < 1
46586	277	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-WHILE	i <= $.maximalIterationCount
46586	277	8	LaguerreSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
46587	283	12	LaguerreSolver.java	solve	j	int	0	NIL-FOR	$ >= 0
965	293	12	LaguerreSolver.java	solve	tolerance	double	0	RET	(z.subtract(oldz)).abs() <= $
965	293	12	LaguerreSolver.java	solve	z	Complex	0	RET	($.subtract(oldz)).abs() <= tolerance
965	293	12	LaguerreSolver.java	solve	oldz	Complex	0	RET	(z.subtract($)).abs() <= tolerance
966	298	12	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	pv.abs() <= $.functionValueAccuracy
966	298	12	LaguerreSolver.java	solve	pv	Complex	0	RET	$.abs() <= functionValueAccuracy
967	316	12	LaguerreSolver.java	solve	denominator	Complex	1	DEF	$.equals(new Complex(0.0, 0.0))
46370	239	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.solvedCols
46370	239	6	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < solvedCols
657	244	6	LevenbergMarquardtEstimator.java	estimate	firstIteration	boolean	0	DEF	$
46371	249	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
46371	249	8	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < cols
658	251	10	LevenbergMarquardtEstimator.java	estimate	dk	double	0	DEF	$ == 0
659	267	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	$.cost != 0
46372	268	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46372	268	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
660	271	10	LevenbergMarquardtEstimator.java	estimate	s	double	0	DEF	$ != 0
46373	273	12	LevenbergMarquardtEstimator.java	estimate	i	int	0	NIL-FOR	$ <= j
46373	273	12	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	i <= $
661	280	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	maxCosine <= $.orthoTolerance
661	280	6	LevenbergMarquardtEstimator.java	estimate	maxCosine	double	0	RET	$ <= orthoTolerance
46374	285	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.cols
46374	285	6	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < cols
46375	290	6	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	NIL-FOR	$ < 1.0e-4
46376	293	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46376	293	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
46377	307	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46377	307	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
662	317	8	LevenbergMarquardtEstimator.java	estimate	firstIteration	boolean	0	DEF	$
663	326	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	0.1 * $.cost < previousCost
663	326	8	LevenbergMarquardtEstimator.java	estimate	previousCost	double	0	DEF	0.1 * cost < $
46378	333	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46378	333	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
46379	337	10	LevenbergMarquardtEstimator.java	estimate	i	int	0	NIL-FOR	$ <= j
46379	337	10	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	i <= $
46380	342	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46380	342	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
664	355	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	DEF	$ <= 0.25
665	358	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	0.1 * $.cost >= previousCost
665	358	10	LevenbergMarquardtEstimator.java	estimate	tmp	double	0	DEF	$ < 0.1
665	358	10	LevenbergMarquardtEstimator.java	estimate	previousCost	double	0	DEF	0.1 * cost >= $
666	363	15	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
666	363	15	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	DEF	$ >= 0.75
667	369	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	DEF	$ >= 1.0e-4
46381	373	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
46381	373	10	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < cols
46382	381	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46382	381	10	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
668	391	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	preRed <= $.costRelativeTolerance
668	391	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	delta <= $.parRelativeTolerance * xNorm
668	391	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	Math.abs(actRed) <= $.costRelativeTolerance
668	391	8	LevenbergMarquardtEstimator.java	estimate	actRed	double	0	RET	Math.abs($) <= costRelativeTolerance
668	391	8	LevenbergMarquardtEstimator.java	estimate	preRed	double	0	RET	$ <= costRelativeTolerance
668	391	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	RET	$ <= 2.0
668	391	8	LevenbergMarquardtEstimator.java	estimate	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
668	391	8	LevenbergMarquardtEstimator.java	estimate	xNorm	double	0	RET	delta <= parRelativeTolerance * $
669	400	8	LevenbergMarquardtEstimator.java	estimate	actRed	double	1	Double	Math.abs($) <= 2.2204e-16
669	400	8	LevenbergMarquardtEstimator.java	estimate	preRed	double	1	Double	$ <= 2.2204e-16
669	400	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	Double	$ <= 2.0
670	405	15	LevenbergMarquardtEstimator.java	estimate	delta	double	1	Double	$ <= 2.2204e-16 * xNorm
670	405	15	LevenbergMarquardtEstimator.java	estimate	xNorm	double	1	Double	delta <= 2.2204e-16 * $
671	410	15	LevenbergMarquardtEstimator.java	estimate	maxCosine	double	0	Double	$ <= 2.2204e-16
46383	449	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.rank
46383	449	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
46384	452	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.cols
46384	452	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < cols
46385	455	4	LevenbergMarquardtEstimator.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
46386	458	6	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
46386	458	6	LevenbergMarquardtEstimator.java	determineLMParameter	k	int	0	NIL-FOR	i < $
46387	467	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46387	467	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
672	475	4	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
672	475	4	LevenbergMarquardtEstimator.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
673	484	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.rank == $.solvedCols
46388	485	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46388	485	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
46389	490	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46389	490	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
46390	493	8	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
46390	493	8	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	i < $
46391	505	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46391	505	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
46392	508	6	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
46392	508	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
674	516	4	LevenbergMarquardtEstimator.java	determineLMParameter	paru	double	0	DEF	$ == 0
675	524	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
46393	528	4	LevenbergMarquardtEstimator.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
676	531	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
46394	535	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46394	535	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
46395	542	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46395	542	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
677	554	6	LevenbergMarquardtEstimator.java	determineLMParameter	previousFP	double	0	RET	$ < 0
677	554	6	LevenbergMarquardtEstimator.java	determineLMParameter	previousFP	double	0	RET	fp <= $
677	554	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	Math.abs($) <= 0.1 * delta
677	554	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
677	554	6	LevenbergMarquardtEstimator.java	determineLMParameter	parl	double	0	RET	$ == 0
677	554	6	LevenbergMarquardtEstimator.java	determineLMParameter	delta	double	0	RET	Math.abs(fp) <= 0.1 * $
46396	560	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46396	560	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
46397	564	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46397	564	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
46398	568	8	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
46398	568	8	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
46399	573	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46399	573	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
678	580	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	1	DEF	$ > 0
679	582	13	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	DEF	$ < 0
46400	617	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46400	617	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
46401	619	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
46401	619	6	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
46402	627	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46402	627	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
680	633	6	LevenbergMarquardtEstimator.java	determineLMDirection	dpj	double	0	DEF	$ != 0
46403	642	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.solvedCols
46403	642	6	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
681	647	8	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
681	647	8	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
682	651	10	LevenbergMarquardtEstimator.java	determineLMDirection	rkk	double	1	DEF	Math.abs($) < Math.abs(lmDiag[k])
682	651	10	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	1	DEF	Math.abs(rkk) < Math.abs(lmDiag[$])
682	651	10	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	1	DEF	Math.abs(rkk) < Math.abs($[k])
46404	669	10	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
46404	669	10	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
46405	690	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46405	690	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
683	691	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	DEF	nSing == $.solvedCols
683	691	6	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
683	691	6	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
683	691	6	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
684	694	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	DEF	nSing < $.solvedCols
684	694	6	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
685	698	4	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ > 0
46406	699	6	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
46407	702	8	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
46407	702	8	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
46408	710	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.lmDir.$.length
46408	710	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
46409	740	4	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
46409	740	4	LevenbergMarquardtEstimator.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
46410	743	6	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
46410	743	6	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
46411	751	4	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
46411	751	4	LevenbergMarquardtEstimator.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
46412	756	6	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.cols
46412	756	6	LevenbergMarquardtEstimator.java	qrDecomposition	i	int	0	NIL-FOR	$ < cols
46413	759	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
46413	759	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
686	763	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
686	763	8	LevenbergMarquardtEstimator.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
687	768	6	LevenbergMarquardtEstimator.java	qrDecomposition	ak2	double	0	RET	$ == 0
46414	788	6	LevenbergMarquardtEstimator.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
46415	791	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
46415	791	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
46416	795	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
46416	795	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
46417	812	4	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
46417	812	4	LevenbergMarquardtEstimator.java	qTy	k	int	0	NIL-FOR	$ < cols
46418	816	6	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.rows
46418	816	6	LevenbergMarquardtEstimator.java	qTy	i	int	0	NIL-FOR	$ < rows
46419	820	6	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.rows
46419	820	6	LevenbergMarquardtEstimator.java	qTy	i	int	0	NIL-FOR	$ < rows
0	84	12	MathException.java	translate	THIS	MathException	0	DEF	$.cachedResources == null
0	84	12	MathException.java	translate	THIS	MathException	0	DEF	$.cachedResources.getLocale().equals(locale)
0	84	12	MathException.java	translate	locale	Locale	0	DEF	cachedResources.getLocale().equals($)
1	90	12	MathException.java	translate	THIS	MathException	0	RET	$.cachedResources.getLocale().getLanguage().equals(locale.getLanguage())
1	90	12	MathException.java	translate	locale	Locale	0	RET	cachedResources.getLocale().getLanguage().equals($.getLanguage())
2	272	12	MathException.java	printStackTrace	THIS	MathException	0	DEF	$.rootCause != null
30	68	8	MathUtils.java	addAndCheck	s	long	0	ArithmeticException	$ > Integer.MAX_VALUE
30	68	8	MathUtils.java	addAndCheck	s	long	0	ArithmeticException	$ < Integer.MIN_VALUE
31	101	8	MathUtils.java	addAndCheck	a	long	1	DEF	$ > b
31	101	8	MathUtils.java	addAndCheck	b	long	1	DEF	a > $
32	107	12	MathUtils.java	addAndCheck	a	long	1	ArithmeticException	$ < 0
33	108	16	MathUtils.java	addAndCheck	b	long	1	ArithmeticException	$ < 0
34	110	20	MathUtils.java	addAndCheck	a	long	1	DEF	Long.MIN_VALUE - b <= $
34	110	20	MathUtils.java	addAndCheck	b	long	1	DEF	Long.MIN_VALUE - $ <= a
35	124	16	MathUtils.java	addAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE - b
35	124	16	MathUtils.java	addAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE - $
36	161	8	MathUtils.java	binomialCoefficient	n	int	0	IllegalArgumentException	$ < k
36	161	8	MathUtils.java	binomialCoefficient	k	int	0	IllegalArgumentException	n < $
37	165	8	MathUtils.java	binomialCoefficient	n	int	0	IllegalArgumentException	$ < 0
38	169	8	MathUtils.java	binomialCoefficient	n	int	0	RET	$ == k
38	169	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 0
38	169	8	MathUtils.java	binomialCoefficient	k	int	0	RET	n == $
39	172	8	MathUtils.java	binomialCoefficient	n	int	0	RET	k == $ - 1
39	172	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 1
39	172	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == n - 1
40	177	8	MathUtils.java	binomialCoefficient	result	long	0	ArithmeticException	$ == Long.MAX_VALUE
41	229	8	MathUtils.java	binomialCoefficientLog	n	int	0	IllegalArgumentException	$ < k
41	229	8	MathUtils.java	binomialCoefficientLog	k	int	0	IllegalArgumentException	n < $
42	233	8	MathUtils.java	binomialCoefficientLog	n	int	0	IllegalArgumentException	$ < 0
43	237	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ == k
43	237	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 0
43	237	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	n == $
44	240	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	k == $ - 1
44	240	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == n - 1
44	240	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 1
46098	246	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n
46098	246	8	MathUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $
46099	251	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n - k
46099	251	8	MathUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $ - k
46099	251	8	MathUtils.java	binomialCoefficientLog	k	int	0	NIL-FOR	i <= n - $
45	292	8	MathUtils.java	equals	x	double[]	0	RET	$ == null
45	292	8	MathUtils.java	equals	y	double[]	0	RET	$ == null
46	295	8	MathUtils.java	equals	THIS	MathUtils	0	RET	x.$.length != y.$.length
46	295	8	MathUtils.java	equals	x	double[]	0	RET	$.length != y.length
46	295	8	MathUtils.java	equals	y	double[]	0	RET	x.length != $.length
46100	298	8	MathUtils.java	equals	THIS	MathUtils	0	NIL-FOR	i < x.$.length
46100	298	8	MathUtils.java	equals	i	int	0	NIL-FOR	$ < x.length
46100	298	8	MathUtils.java	equals	x	double[]	0	NIL-FOR	i < $.length
47	299	12	MathUtils.java	equals	THIS	MathUtils	0	RET	$.equals(x[i], y[i])
47	299	12	MathUtils.java	equals	i	int	0	RET	equals(x[$], y[$])
47	299	12	MathUtils.java	equals	x	double[]	0	RET	equals($[i], y[i])
47	299	12	MathUtils.java	equals	y	double[]	0	RET	equals(x[i], $[i])
48	330	8	MathUtils.java	factorial	result	long	0	ArithmeticException	$ == Long.MAX_VALUE
49	358	8	MathUtils.java	factorialDouble	n	int	0	IllegalArgumentException	$ < 0
50	378	8	MathUtils.java	factorialLog	n	int	0	IllegalArgumentException	$ < 0
46101	382	8	MathUtils.java	factorialLog	i	int	0	NIL-FOR	$ <= n
46101	382	8	MathUtils.java	factorialLog	n	int	0	NIL-FOR	i <= $
51	402	8	MathUtils.java	gcd	u	int	0	RET	$ * v == 0
51	402	8	MathUtils.java	gcd	v	int	0	RET	u * $ == 0
52	410	8	MathUtils.java	gcd	u	int	0	DEF	$ > 0
53	413	8	MathUtils.java	gcd	v	int	0	DEF	$ > 0
46102	418	8	MathUtils.java	gcd	k	int	0	NIL-WHILE	$ < 31
46102	418	8	MathUtils.java	gcd	u	int	0	NIL-WHILE	($ & 1) == 0
46102	418	8	MathUtils.java	gcd	v	int	0	NIL-WHILE	($ & 1) == 0
54	424	8	MathUtils.java	gcd	k	int	0	ArithmeticException	$ == 31
46103	432	8	MathUtils.java	gcd	t	int	0	NIL-DOWHILE	$ != 0
46104	435	12	MathUtils.java	gcd	t	int	0	NIL-WHILE	($ & 1) == 0
55	439	12	MathUtils.java	gcd	t	int	1	DEF	$ > 0
56	471	8	MathUtils.java	hash	value	double[]	0	RET	$ == null
46105	475	8	MathUtils.java	hash	THIS	MathUtils	0	NIL-FOR	i < value.$.length
46105	475	8	MathUtils.java	hash	i	int	0	NIL-FOR	$ < value.length
46105	475	8	MathUtils.java	hash	value	double[]	0	NIL-FOR	i < $.length
57	501	8	MathUtils.java	indicator	x	double	0	RET	Double.isNaN($)
58	515	8	MathUtils.java	indicator	x	float	0	RET	Float.isNaN($)
59	597	8	MathUtils.java	mulAndCheck	m	long	0	ArithmeticException	$ > Integer.MAX_VALUE
59	597	8	MathUtils.java	mulAndCheck	m	long	0	ArithmeticException	$ < Integer.MIN_VALUE
60	616	8	MathUtils.java	mulAndCheck	a	long	1	DEF	$ > b
60	616	8	MathUtils.java	mulAndCheck	b	long	1	DEF	a > $
61	620	12	MathUtils.java	mulAndCheck	a	long	1	ArithmeticException	$ < 0
62	621	16	MathUtils.java	mulAndCheck	b	long	1	ArithmeticException	$ < 0
63	623	20	MathUtils.java	mulAndCheck	a	long	1	DEF	$ >= Long.MAX_VALUE / b
63	623	20	MathUtils.java	mulAndCheck	b	long	1	DEF	a >= Long.MAX_VALUE / $
64	628	23	MathUtils.java	mulAndCheck	b	long	1	ArithmeticException	$ > 0
65	630	20	MathUtils.java	mulAndCheck	a	long	1	DEF	Long.MIN_VALUE / b <= $
65	630	20	MathUtils.java	mulAndCheck	b	long	1	DEF	Long.MIN_VALUE / $ <= a
66	640	19	MathUtils.java	mulAndCheck	a	long	1	ArithmeticException	$ > 0
67	645	16	MathUtils.java	mulAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE / b
67	645	16	MathUtils.java	mulAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE / $
68	678	8	MathUtils.java	nextAfter	d	double	1	RET	Double.isInfinite($)
68	678	8	MathUtils.java	nextAfter	d	double	1	RET	Double.isNaN($)
69	680	15	MathUtils.java	nextAfter	d	double	0	RET	$ == 0
70	692	8	MathUtils.java	nextAfter	d	double	1	RET	$ * (direction - $) >= 0
70	692	8	MathUtils.java	nextAfter	direction	double	1	RET	d * ($ - d) >= 0
71	694	16	MathUtils.java	nextAfter	mantissa	long	1	RET	$ == 0x000fffffffffffffL
72	703	16	MathUtils.java	nextAfter	mantissa	long	1	RET	$ == 0L
73	770	12	MathUtils.java	round	x	double	1	RET	Double.isInfinite($)
74	825	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
75	835	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
76	844	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
77	853	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
78	855	19	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ < 0.5
79	859	16	MathUtils.java	roundUnscaled	unscaled	double	1	DEF	Math.floor($) / 2.0 == Math.floor(Math .floor($) / 2.0)
80	871	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ >= 0.5
81	879	12	MathUtils.java	roundUnscaled	unscaled	double	0	ArithmeticException	$ != Math.floor($)
82	919	8	MathUtils.java	sign	x	double	0	RET	Double.isNaN($)
83	937	8	MathUtils.java	sign	x	float	0	RET	Float.isNaN($)
84	1009	8	MathUtils.java	subAndCheck	s	long	0	ArithmeticException	$ < Integer.MIN_VALUE
84	1009	8	MathUtils.java	subAndCheck	s	long	0	ArithmeticException	$ > Integer.MAX_VALUE
85	1028	8	MathUtils.java	subAndCheck	b	long	1	ArithmeticException	$ == Long.MIN_VALUE
86	1029	12	MathUtils.java	subAndCheck	a	long	1	DEF	$ < 0
46236	61	8	MatrixUtils.java	createRealIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
46236	61	8	MatrixUtils.java	createRealIdentityMatrix	dimension	int	0	NIL-FOR	row < $
46237	62	12	MatrixUtils.java	createRealIdentityMatrix	col	int	0	NIL-FOR	$ < dimension
46237	62	12	MatrixUtils.java	createRealIdentityMatrix	dimension	int	0	NIL-FOR	col < $
46238	187	8	MatrixUtils.java	createColumnRealMatrix	row	int	0	NIL-FOR	$ < nRows
46238	187	8	MatrixUtils.java	createColumnRealMatrix	nRows	int	0	NIL-FOR	row < $
46239	205	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
46239	205	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
46240	223	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
46240	223	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
46241	241	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
46241	241	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
46242	258	8	MatrixUtils.java	createBigIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
46242	258	8	MatrixUtils.java	createBigIdentityMatrix	dimension	int	0	NIL-FOR	row < $
46243	259	12	MatrixUtils.java	createBigIdentityMatrix	col	int	0	NIL-FOR	$ < dimension
46243	259	12	MatrixUtils.java	createBigIdentityMatrix	dimension	int	0	NIL-FOR	col < $
518	61	8	Max.java	increment	THIS	Max	0	DEF	d > $.value
518	61	8	Max.java	increment	THIS	Max	0	DEF	Double.isNaN($.value)
518	61	8	Max.java	increment	d	double	0	DEF	$ > value
519	113	8	Max.java	evaluate	THIS	Max	0	DEF	$.test(values, begin, length)
519	113	8	Max.java	evaluate	values	double[]	0	DEF	test($, begin, length)
519	113	8	Max.java	evaluate	begin	int	0	DEF	test(values, $, length)
519	113	8	Max.java	evaluate	length	int	0	DEF	test(values, begin, $)
46300	115	12	Max.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
46300	115	12	Max.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
46300	115	12	Max.java	evaluate	length	int	0	NIL-FOR	i < begin + $
520	116	16	Max.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
520	116	16	Max.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
472	95	8	Mean.java	increment	THIS	Mean	0	DEF	$.incMoment
473	104	8	Mean.java	clear	THIS	Mean	0	DEF	$.incMoment
474	140	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, begin, length)
474	140	8	Mean.java	evaluate	values	double[]	0	RET	test($, begin, length)
474	140	8	Mean.java	evaluate	begin	int	0	RET	test(values, $, length)
474	140	8	Mean.java	evaluate	length	int	0	RET	test(values, begin, $)
46288	149	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
46288	149	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
46288	149	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
46526	90	4	MidpointStepInterpolator.java	computeInterpolatedState	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
46526	90	4	MidpointStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
515	63	8	Min.java	increment	THIS	Min	0	DEF	d < $.value
515	63	8	Min.java	increment	THIS	Min	0	DEF	Double.isNaN($.value)
515	63	8	Min.java	increment	d	double	0	DEF	$ < value
516	115	8	Min.java	evaluate	THIS	Min	0	DEF	$.test(values, begin, length)
516	115	8	Min.java	evaluate	values	double[]	0	DEF	test($, begin, length)
516	115	8	Min.java	evaluate	begin	int	0	DEF	test(values, $, length)
516	115	8	Min.java	evaluate	length	int	0	DEF	test(values, begin, $)
46299	117	12	Min.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
46299	117	12	Min.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
46299	117	12	Min.java	evaluate	length	int	0	NIL-FOR	i < begin + $
517	118	16	Min.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
517	118	16	Min.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
923	69	8	MullerSolver.java	solve	THIS	MullerSolver	0	RET	$.f.value(min) == 0.0
923	69	8	MullerSolver.java	solve	min	double	0	RET	f.value($) == 0.0
924	70	8	MullerSolver.java	solve	THIS	MullerSolver	0	RET	$.f.value(max) == 0.0
924	70	8	MullerSolver.java	solve	max	double	0	RET	f.value($) == 0.0
925	71	8	MullerSolver.java	solve	THIS	MullerSolver	0	RET	$.f.value(initial) == 0.0
925	71	8	MullerSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
926	75	8	MullerSolver.java	solve	THIS	MullerSolver	1	RET	$.isBracketing(min, initial, $.f)
926	75	8	MullerSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
926	75	8	MullerSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
927	121	8	MullerSolver.java	solve	y0	double	0	RET	$ == 0.0
928	122	8	MullerSolver.java	solve	y2	double	0	RET	$ == 0.0
46574	127	8	MullerSolver.java	solve	THIS	MullerSolver	0	NIL-WHILE	i <= $.maximalIterationCount
46574	127	8	MullerSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
929	146	12	MullerSolver.java	solve	x	double	0	RET	Math.abs($ - oldx) <= tolerance
929	146	12	MullerSolver.java	solve	oldx	double	0	RET	Math.abs(x - $) <= tolerance
929	146	12	MullerSolver.java	solve	tolerance	double	0	RET	Math.abs(x - oldx) <= $
930	150	12	MullerSolver.java	solve	THIS	MullerSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
930	150	12	MullerSolver.java	solve	y	double	0	RET	Math.abs($) <= functionValueAccuracy
931	163	12	MullerSolver.java	solve	bisect	boolean	1	DEF	$
932	173	16	MullerSolver.java	solve	ym	double	1	DEF	MathUtils.sign(y0) + MathUtils.sign($) == 0.0
932	173	16	MullerSolver.java	solve	y0	double	1	DEF	MathUtils.sign($) + MathUtils.sign(ym) == 0.0
933	226	8	MullerSolver.java	solve2	y0	double	0	RET	$ == 0.0
934	227	8	MullerSolver.java	solve2	y1	double	0	RET	$ == 0.0
46575	232	8	MullerSolver.java	solve2	THIS	MullerSolver	0	NIL-WHILE	i <= $.maximalIterationCount
46575	232	8	MullerSolver.java	solve2	i	int	0	NIL-WHILE	$ <= maximalIterationCount
935	239	12	MullerSolver.java	solve2	delta	double	1	DEF	$ >= 0.0
936	248	12	MullerSolver.java	solve2	denominator	double	1	DEF	$ != 0
46576	252	16	MullerSolver.java	solve2	x1	double	0	NIL-WHILE	x == $
46576	252	16	MullerSolver.java	solve2	x2	double	0	NIL-WHILE	x == $
46576	252	16	MullerSolver.java	solve2	x	double	0	NIL-WHILE	$ == x2
46576	252	16	MullerSolver.java	solve2	x	double	0	NIL-WHILE	$ == x1
937	264	12	MullerSolver.java	solve2	x	double	0	RET	Math.abs($ - oldx) <= tolerance
937	264	12	MullerSolver.java	solve2	oldx	double	0	RET	Math.abs(x - $) <= tolerance
937	264	12	MullerSolver.java	solve2	tolerance	double	0	RET	Math.abs(x - oldx) <= $
938	268	12	MullerSolver.java	solve2	THIS	MullerSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
938	268	12	MullerSolver.java	solve2	y	double	0	RET	Math.abs($) <= functionValueAccuracy
426	64	6	MultiDirectional.java	iterateSimplex	originalCost	double	0	RET	reflectedCost < $
426	64	6	MultiDirectional.java	iterateSimplex	reflectedCost	double	0	RET	$ < originalCost
427	69	8	MultiDirectional.java	iterateSimplex	expandedCost	double	0	DEF	reflectedCost <= $
427	69	8	MultiDirectional.java	iterateSimplex	reflectedCost	double	0	DEF	$ <= expandedCost
428	80	6	MultiDirectional.java	iterateSimplex	originalCost	double	0	RET	contractedCost < $
428	80	6	MultiDirectional.java	iterateSimplex	contractedCost	double	0	RET	$ < originalCost
46265	105	4	MultiDirectional.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ <= n
46265	105	4	MultiDirectional.java	evaluateNewSimplex	n	int	0	NIL-FOR	i <= $
46266	108	6	MultiDirectional.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < n
46266	108	6	MultiDirectional.java	evaluateNewSimplex	n	int	0	NIL-FOR	j < $
46276	91	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	i	int	0	NIL-FOR	$ < k
46276	91	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	k	int	0	NIL-FOR	i < $
46277	146	8	MultivariateSummaryStatistics.java	addValue	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
46277	146	8	MultivariateSummaryStatistics.java	addValue	i	int	0	NIL-FOR	$ < k
46278	183	8	MultivariateSummaryStatistics.java	getResults	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < results.$.length
46278	183	8	MultivariateSummaryStatistics.java	getResults	i	int	0	NIL-FOR	$ < results.length
46278	183	8	MultivariateSummaryStatistics.java	getResults	results	double[]	0	NIL-FOR	i < $.length
438	242	8	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 1
439	244	15	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 2
46279	248	12	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
46279	248	12	MultivariateSummaryStatistics.java	getStandardDeviation	i	int	0	NIL-FOR	$ < k
46280	329	8	MultivariateSummaryStatistics.java	append	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < data.$.length
46280	329	8	MultivariateSummaryStatistics.java	append	i	int	0	NIL-FOR	$ < data.length
46280	329	8	MultivariateSummaryStatistics.java	append	data	double[]	0	NIL-FOR	i < $.length
440	330	12	MultivariateSummaryStatistics.java	append	i	int	0	DEF	$ > 0
46281	343	8	MultivariateSummaryStatistics.java	clear	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
46281	343	8	MultivariateSummaryStatistics.java	clear	i	int	0	NIL-FOR	$ < k
441	362	8	MultivariateSummaryStatistics.java	equals	THIS	MultivariateSummaryStatistics	0	RET	object == $
441	362	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ == this
442	365	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ instanceof MultivariateSummaryStatistics == false
443	611	8	MultivariateSummaryStatistics.java	checkEmpty	THIS	MultivariateSummaryStatistics	0	IllegalStateException	$.n > 0
444	624	8	MultivariateSummaryStatistics.java	checkDimension	THIS	MultivariateSummaryStatistics	0	DimensionMismatchException	dimension != $.k
444	624	8	MultivariateSummaryStatistics.java	checkDimension	dimension	int	0	DimensionMismatchException	$ != k
46256	75	4	NelderMead.java	iterateSimplex	i	int	0	NIL-FOR	$ < n
46256	75	4	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	i < $
46257	77	6	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
46257	77	6	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
46258	82	4	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
46258	82	4	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
46259	88	4	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
46259	88	4	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
420	93	4	NelderMead.java	iterateSimplex	smallest	double	1	DEF	$ <= costR
420	93	4	NelderMead.java	iterateSimplex	secondLargest	double	1	DEF	costR < $
420	93	4	NelderMead.java	iterateSimplex	costR	double	1	DEF	smallest <= $
420	93	4	NelderMead.java	iterateSimplex	costR	double	1	DEF	$ < secondLargest
421	98	11	NelderMead.java	iterateSimplex	smallest	double	1	DEF	costR < $
421	98	11	NelderMead.java	iterateSimplex	costR	double	1	DEF	$ < smallest
46260	102	6	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
46260	102	6	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
422	107	6	NelderMead.java	iterateSimplex	costE	double	1	DEF	$ < costR
422	107	6	NelderMead.java	iterateSimplex	costR	double	1	DEF	costE < $
423	117	6	NelderMead.java	iterateSimplex	largest	double	1	RET	costR < $
423	117	6	NelderMead.java	iterateSimplex	costR	double	1	RET	$ < largest
46261	121	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
46261	121	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
424	126	8	NelderMead.java	iterateSimplex	costC	double	0	RET	$ <= costR
424	126	8	NelderMead.java	iterateSimplex	costR	double	0	RET	costC <= $
46262	136	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
46262	136	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
425	141	8	NelderMead.java	iterateSimplex	costC	double	0	RET	$ < largest
425	141	8	NelderMead.java	iterateSimplex	largest	double	0	RET	costC < $
46263	151	6	NelderMead.java	iterateSimplex	THIS	NelderMead	0	NIL-FOR	i < $.simplex.$.length
46263	151	6	NelderMead.java	iterateSimplex	i	int	0	NIL-FOR	$ < simplex.length
46264	153	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
46264	153	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
46559	87	8	NewtonSolver.java	solve	THIS	NewtonSolver	0	NIL-WHILE	i < $.maximalIterationCount
46559	87	8	NewtonSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
889	89	12	NewtonSolver.java	solve	THIS	NewtonSolver	0	RET	Math.abs(x1 - x0) <= $.absoluteAccuracy
889	89	12	NewtonSolver.java	solve	x0	double	0	RET	Math.abs(x1 - $) <= absoluteAccuracy
889	89	12	NewtonSolver.java	solve	x1	double	0	RET	Math.abs($ - x0) <= absoluteAccuracy
264	93	8	NormalDistributionImpl.java	setStandardDeviation	sd	double	0	IllegalArgumentException	$ <= 0.0
265	113	12	NormalDistributionImpl.java	cumulativeProbability	THIS	NormalDistributionImpl	1	RET	x < ($.mean - 20 * $.standardDeviation)
265	113	12	NormalDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ < (mean - 20 * standardDeviation)
266	115	19	NormalDistributionImpl.java	cumulativeProbability	THIS	NormalDistributionImpl	1	RET	x > ($.mean + 20 * $.standardDeviation)
266	115	19	NormalDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ > (mean + 20 * standardDeviation)
267	139	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
268	142	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
269	160	8	NormalDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < .5
270	181	8	NormalDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
271	201	8	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
272	203	15	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > .5
534	104	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	IllegalArgumentException	$ > 0.5
534	104	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	IllegalArgumentException	$ <= 0
535	125	8	OneWayAnovaImpl.java	anovaStats	categoryData	Collection	0	IllegalArgumentException	$.size() < 2
46301	131	8	OneWayAnovaImpl.java	anovaStats	iterator	Iterator	0	NIL-FOR	$.hasNext()
536	139	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	IllegalArgumentException	array.$.length <= 1
536	139	12	OneWayAnovaImpl.java	anovaStats	array	double[]	0	IllegalArgumentException	$.length <= 1
46302	151	8	OneWayAnovaImpl.java	anovaStats	iterator	Iterator	0	NIL-FOR	$.hasNext()
46303	158	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	NIL-FOR	i < data.$.length
46303	158	12	OneWayAnovaImpl.java	anovaStats	i	int	0	NIL-FOR	$ < data.length
46303	158	12	OneWayAnovaImpl.java	anovaStats	data	double[]	0	NIL-FOR	i < $.length
317	77	8	PascalDistributionImpl.java	setNumberOfSuccesses	successes	int	0	IllegalArgumentException	$ < 0
318	91	8	PascalDistributionImpl.java	setProbabilityOfSuccess	p	double	0	IllegalArgumentException	$ < 0.0
318	91	8	PascalDistributionImpl.java	setProbabilityOfSuccess	p	double	0	IllegalArgumentException	$ > 1.0
319	130	8	PascalDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
320	146	8	PascalDistributionImpl.java	probability	x	int	1	DEF	$ < 0
321	174	8	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
322	176	15	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
521	187	8	Percentile.java	evaluate	p	double	0	IllegalArgumentException	$ <= 0
521	187	8	Percentile.java	evaluate	p	double	0	IllegalArgumentException	$ > 100
522	190	8	Percentile.java	evaluate	length	int	0	RET	$ == 0
523	193	8	Percentile.java	evaluate	length	int	0	RET	$ == 1
524	205	8	Percentile.java	evaluate	pos	double	0	RET	$ < 1
525	208	8	Percentile.java	evaluate	n	double	0	RET	pos >= $
525	208	8	Percentile.java	evaluate	pos	double	0	RET	$ >= n
526	235	8	Percentile.java	setQuantile	p	double	0	IllegalArgumentException	$ <= 0
526	235	8	Percentile.java	setQuantile	p	double	0	IllegalArgumentException	$ > 100
260	90	8	PoissonDistributionImpl.java	setMean	p	double	0	IllegalArgumentException	$ <= 0
261	106	8	PoissonDistributionImpl.java	probability	x	int	0	RET	$ == Integer.MAX_VALUE
261	106	8	PoissonDistributionImpl.java	probability	x	int	0	RET	$ < 0
262	122	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ < 0
263	125	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ == Integer.MAX_VALUE
898	56	8	PolynomialFunction.java	PolynomialFunction	THIS	PolynomialFunction	0	IllegalArgumentException	c.$.length < 1
898	56	8	PolynomialFunction.java	PolynomialFunction	c	double	0	IllegalArgumentException	$.length < 1
899	114	8	PolynomialFunction.java	evaluate	n	int	0	IllegalArgumentException	$ < 1
46569	118	8	PolynomialFunction.java	evaluate	j	int	0	NIL-FOR	$ >=0
900	134	8	PolynomialFunction.java	differentiate	n	int	0	IllegalArgumentException	$ < 1
901	137	8	PolynomialFunction.java	differentiate	n	int	0	RET	$ == 1
46570	141	8	PolynomialFunction.java	differentiate	i	int	0	NIL-FOR	$ > 0
890	139	8	PolynomialFunctionLagrangeForm.java	getCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.coefficientsComputed
46560	174	8	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	$ < n
46560	174	8	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	i < $
891	180	12	PolynomialFunctionLagrangeForm.java	evaluate	dist	double	0	DEF	$ < min_dist
891	180	12	PolynomialFunctionLagrangeForm.java	evaluate	min_dist	double	0	DEF	dist < $
46561	189	8	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	$ < n
46561	189	8	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	i < $
46562	190	12	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	j < n-$
46562	190	12	PolynomialFunctionLagrangeForm.java	evaluate	j	int	0	NIL-FOR	$ < n-i
46562	190	12	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	j < $-i
892	194	16	PolynomialFunctionLagrangeForm.java	evaluate	divider	double	0	DuplicateSampleAbscissaException	$ == 0.0
893	204	12	PolynomialFunctionLagrangeForm.java	evaluate	i	int	1	DEF	nearest < 0.5*(n-$+1)
893	204	12	PolynomialFunctionLagrangeForm.java	evaluate	n	int	1	DEF	nearest < 0.5*($-i+1)
893	204	12	PolynomialFunctionLagrangeForm.java	evaluate	nearest	int	1	DEF	$ < 0.5*(n-i+1)
46563	230	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
46563	230	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
46564	237	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
46564	237	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
46565	238	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
46566	246	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
46566	246	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
46567	249	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ < n
46567	249	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	j < $
894	250	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != j
894	250	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	DEF	i != $
895	254	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	d	double	0	ArithmeticException	$ == 0.0
46568	265	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ >= 0
896	289	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	IllegalArgumentException	y.$.length < 2
896	289	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	IllegalArgumentException	x.$.length < 2
896	289	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	IllegalArgumentException	$.length < 2
896	289	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	IllegalArgumentException	$.length < 2
897	293	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	IllegalArgumentException	x.$.length != y.$.length
897	293	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	IllegalArgumentException	$.length != y.length
897	293	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	IllegalArgumentException	x.length != $.length
971	137	8	PolynomialFunctionNewtonForm.java	getCoefficients	THIS	PolynomialFunctionNewtonForm	0	DEF	$.coefficientsComputed
46590	164	8	PolynomialFunctionNewtonForm.java	evaluate	i	int	0	NIL-FOR	$ >= 0
46591	179	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ <= n
46591	179	8	PolynomialFunctionNewtonForm.java	computeCoefficients	n	int	0	NIL-FOR	i <= $
46592	184	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ >= 0
46593	185	12	PolynomialFunctionNewtonForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
972	209	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	IllegalArgumentException	a.$.length < 1
972	209	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	IllegalArgumentException	c.$.length < 1
972	209	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	IllegalArgumentException	$.length < 1
972	209	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	IllegalArgumentException	$.length < 1
973	213	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	IllegalArgumentException	a.$.length != c.$.length + 1
973	213	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	IllegalArgumentException	$.length != c.length + 1
973	213	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	IllegalArgumentException	a.length != $.length + 1
875	99	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	IllegalArgumentException	knots.$.length < 2
875	99	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	IllegalArgumentException	$.length < 2
876	103	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	IllegalArgumentException	knots.$.length - 1 != polynomials.$.length
876	103	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	IllegalArgumentException	$.length - 1 != polynomials.length
876	103	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	IllegalArgumentException	knots.length - 1 != $.length
877	107	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	IllegalArgumentException	$.isStrictlyIncreasing(knots)
877	107	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	IllegalArgumentException	isStrictlyIncreasing($)
878	135	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	ArgumentOutsideDomainException	v > $.knots[$.n]
878	135	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	ArgumentOutsideDomainException	v < $.knots[0]
878	135	8	PolynomialSplineFunction.java	value	v	double	0	ArgumentOutsideDomainException	$ > knots[n]
878	135	8	PolynomialSplineFunction.java	value	v	double	0	ArgumentOutsideDomainException	$ < knots[0]
879	139	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
880	145	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
880	145	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
46553	166	8	PolynomialSplineFunction.java	polynomialSplineDerivative	THIS	PolynomialSplineFunction	0	NIL-FOR	i < $.n
46553	166	8	PolynomialSplineFunction.java	polynomialSplineDerivative	i	int	0	NIL-FOR	$ < n
46554	219	8	PolynomialSplineFunction.java	isStrictlyIncreasing	THIS	PolynomialSplineFunction	0	NIL-FOR	i < x.$.length
46554	219	8	PolynomialSplineFunction.java	isStrictlyIncreasing	i	int	0	NIL-FOR	$ < x.length
46554	219	8	PolynomialSplineFunction.java	isStrictlyIncreasing	x	double[]	0	NIL-FOR	i < $.length
881	220	12	PolynomialSplineFunction.java	isStrictlyIncreasing	i	int	0	RET	x[$ - 1] >= x[$]
881	220	12	PolynomialSplineFunction.java	isStrictlyIncreasing	x	double[]	0	RET	$[i - 1] >= $[i]
457	61	8	Product.java	increment	THIS	Product	1	DEF	$.n == 0
458	107	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, begin, length)
458	107	8	Product.java	evaluate	values	double[]	0	DEF	test($, begin, length)
458	107	8	Product.java	evaluate	begin	int	0	DEF	test(values, $, length)
458	107	8	Product.java	evaluate	length	int	0	DEF	test(values, begin, $)
46286	109	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
46286	109	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
46286	109	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
191	98	8	ProperFractionFormat.java	format	whole	int	0	DEF	$ != 0
192	134	8	ProperFractionFormat.java	parse	ret	Fraction	0	RET	$ != null
193	145	8	ProperFractionFormat.java	parse	whole	Number	0	RET	$ == null
194	158	8	ProperFractionFormat.java	parse	num	Number	0	RET	$ == null
195	166	8	ProperFractionFormat.java	parse	num	Number	0	RET	$.intValue() < 0
196	197	8	ProperFractionFormat.java	parse	den	Number	0	RET	$ == null
197	205	8	ProperFractionFormat.java	parse	den	Number	0	RET	$.intValue() < 0
198	224	8	ProperFractionFormat.java	setWholeFormat	format	NumberFormat	0	IllegalArgumentException	$ == null
46244	76	8	QRDecompositionImpl.java	QRDecompositionImpl	THIS	QRDecompositionImpl	0	NIL-FOR	minor < Math.min($.m, $.n)
46244	76	8	QRDecompositionImpl.java	QRDecompositionImpl	minor	int	0	NIL-FOR	$ < Math.min(m, n)
46245	85	12	QRDecompositionImpl.java	QRDecompositionImpl	THIS	QRDecompositionImpl	0	NIL-FOR	row < $.m
46245	85	12	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
417	89	12	QRDecompositionImpl.java	QRDecompositionImpl	THIS	QRDecompositionImpl	0	DEF	$.qr[minor][minor] > 0
417	89	12	QRDecompositionImpl.java	QRDecompositionImpl	minor	int	0	DEF	qr[$][$] > 0
418	92	12	QRDecompositionImpl.java	QRDecompositionImpl	a	double	0	DEF	$ != 0.0
46246	116	16	QRDecompositionImpl.java	QRDecompositionImpl	THIS	QRDecompositionImpl	0	NIL-FOR	col < $.n
46246	116	16	QRDecompositionImpl.java	QRDecompositionImpl	col	int	0	NIL-FOR	$ < n
46247	118	20	QRDecompositionImpl.java	QRDecompositionImpl	THIS	QRDecompositionImpl	0	NIL-FOR	row < $.m
46247	118	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
46248	124	20	QRDecompositionImpl.java	QRDecompositionImpl	THIS	QRDecompositionImpl	0	NIL-FOR	row < $.m
46248	124	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
46249	144	8	QRDecompositionImpl.java	getR	row	int	0	NIL-FOR	$ >= 0
46250	146	12	QRDecompositionImpl.java	getR	THIS	QRDecompositionImpl	0	NIL-FOR	col < $.n
46250	146	12	QRDecompositionImpl.java	getR	col	int	0	NIL-FOR	$ < n
46251	169	8	QRDecompositionImpl.java	getQ	THIS	QRDecompositionImpl	0	NIL-FOR	minor >= Math.min($.m,$.n)
46251	169	8	QRDecompositionImpl.java	getQ	minor	int	0	NIL-FOR	$ >= Math.min(m,n)
46252	173	8	QRDecompositionImpl.java	getQ	minor	int	0	NIL-FOR	$ >= 0
419	175	12	QRDecompositionImpl.java	getQ	THIS	QRDecompositionImpl	0	DEF	$.qr[minor][minor] != 0.0
419	175	12	QRDecompositionImpl.java	getQ	minor	int	0	DEF	qr[$][$] != 0.0
46253	176	16	QRDecompositionImpl.java	getQ	THIS	QRDecompositionImpl	0	NIL-FOR	col < $.m
46253	176	16	QRDecompositionImpl.java	getQ	col	int	0	NIL-FOR	$ < m
46254	178	20	QRDecompositionImpl.java	getQ	THIS	QRDecompositionImpl	0	NIL-FOR	row < $.m
46254	178	20	QRDecompositionImpl.java	getQ	row	int	0	NIL-FOR	$ < m
46255	183	20	QRDecompositionImpl.java	getQ	THIS	QRDecompositionImpl	0	NIL-FOR	row < $.m
46255	183	20	QRDecompositionImpl.java	getQ	row	int	0	NIL-FOR	$ < m
621	175	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
622	124	8	RandomDataImpl.java	nextHexString	len	int	0	IllegalArgumentException	$ <= 0
46341	139	8	RandomDataImpl.java	nextHexString	THIS	RandomDataImpl	0	NIL-FOR	i < randomBytes.$.length
46341	139	8	RandomDataImpl.java	nextHexString	i	int	0	NIL-FOR	$ < randomBytes.length
46341	139	8	RandomDataImpl.java	nextHexString	randomBytes	byte[]	0	NIL-FOR	i < $.length
623	150	13	RandomDataImpl.java	nextHexString	hex	String	0	DEF	$.length() == 1
624	167	8	RandomDataImpl.java	nextInt	lower	int	0	IllegalArgumentException	$ >= upper
624	167	8	RandomDataImpl.java	nextInt	upper	int	0	IllegalArgumentException	lower >= $
625	185	8	RandomDataImpl.java	nextLong	lower	long	0	IllegalArgumentException	$ >= upper
625	185	8	RandomDataImpl.java	nextLong	upper	long	0	IllegalArgumentException	lower >= $
626	211	8	RandomDataImpl.java	nextSecureHexString	len	int	0	IllegalArgumentException	$ <= 0
46342	229	7	RandomDataImpl.java	nextSecureHexString	iter	int	0	NIL-FOR	$ < numIter + 1
46342	229	7	RandomDataImpl.java	nextSecureHexString	numIter	int	0	NIL-FOR	iter < $ + 1
46343	238	12	RandomDataImpl.java	nextSecureHexString	THIS	RandomDataImpl	0	NIL-FOR	i < hash.$.length
46343	238	12	RandomDataImpl.java	nextSecureHexString	i	int	0	NIL-FOR	$ < hash.length
46343	238	12	RandomDataImpl.java	nextSecureHexString	hash	byte[]	0	NIL-FOR	i < $.length
627	249	16	RandomDataImpl.java	nextSecureHexString	hex	String	0	DEF	$.length() == 1
628	268	10	RandomDataImpl.java	nextSecureInt	lower	int	0	IllegalArgumentException	$ >= upper
628	268	10	RandomDataImpl.java	nextSecureInt	upper	int	0	IllegalArgumentException	lower >= $
629	286	8	RandomDataImpl.java	nextSecureLong	lower	long	0	IllegalArgumentException	$ >= upper
629	286	8	RandomDataImpl.java	nextSecureLong	upper	long	0	IllegalArgumentException	lower >= $
630	310	8	RandomDataImpl.java	nextPoisson	mean	double	0	IllegalArgumentException	$ <= 0
46344	318	8	RandomDataImpl.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * mean
46344	318	8	RandomDataImpl.java	nextPoisson	mean	double	0	NIL-WHILE	n < 1000 * $
631	321	12	RandomDataImpl.java	nextPoisson	p	double	1	DEF	r >= $
631	321	12	RandomDataImpl.java	nextPoisson	r	double	1	DEF	$ >= p
632	340	8	RandomDataImpl.java	nextGaussian	sigma	double	0	IllegalArgumentException	$ <= 0
633	360	8	RandomDataImpl.java	nextExponential	mean	double	0	IllegalArgumentException	$ < 0.0
46345	366	8	RandomDataImpl.java	nextExponential	unif	double	0	NIL-WHILE	$ == 0.0d
634	385	8	RandomDataImpl.java	nextUniform	lower	double	0	IllegalArgumentException	$ >= upper
634	385	8	RandomDataImpl.java	nextUniform	upper	double	0	IllegalArgumentException	lower >= $
46346	393	8	RandomDataImpl.java	nextUniform	u	double	0	NIL-WHILE	$ <= 0.0
635	410	8	RandomDataImpl.java	getRan	THIS	RandomDataImpl	0	DEF	$.rand == null
636	425	8	RandomDataImpl.java	getSecRan	THIS	RandomDataImpl	0	DEF	$.secRand == null
637	440	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
638	453	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
639	467	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
640	478	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
641	516	8	RandomDataImpl.java	nextPermutation	n	int	0	IllegalArgumentException	k > $
641	516	8	RandomDataImpl.java	nextPermutation	k	int	0	IllegalArgumentException	$ > n
642	520	8	RandomDataImpl.java	nextPermutation	k	int	0	IllegalArgumentException	$ == 0
46347	528	8	RandomDataImpl.java	nextPermutation	i	int	0	NIL-FOR	$ < k
46347	528	8	RandomDataImpl.java	nextPermutation	k	int	0	NIL-FOR	i < $
643	550	8	RandomDataImpl.java	nextSample	len	int	0	IllegalArgumentException	k > $
643	550	8	RandomDataImpl.java	nextSample	k	int	0	IllegalArgumentException	$ > len
644	554	8	RandomDataImpl.java	nextSample	k	int	0	IllegalArgumentException	$ == 0
46348	562	7	RandomDataImpl.java	nextSample	i	int	0	NIL-FOR	$ < k
46348	562	7	RandomDataImpl.java	nextSample	k	int	0	NIL-FOR	i < $
46349	579	8	RandomDataImpl.java	shuffle	i	int	0	NIL-FOR	$ >= end
46349	579	8	RandomDataImpl.java	shuffle	end	int	0	NIL-FOR	i >= $
645	580	12	RandomDataImpl.java	shuffle	i	int	1	DEF	$ == 0
46350	599	8	RandomDataImpl.java	getNatural	i	int	0	NIL-FOR	$ < n
46350	599	8	RandomDataImpl.java	getNatural	n	int	0	NIL-FOR	i < $
377	89	8	RealMatrixImpl.java	RealMatrixImpl	rowDimension	int	0	IllegalArgumentException	$ <= 0
377	89	8	RealMatrixImpl.java	RealMatrixImpl	columnDimension	int	0	IllegalArgumentException	$ <= 0
46181	125	8	RealMatrixImpl.java	RealMatrixImpl	row	int	0	NIL-FOR	$ < nRows
46181	125	8	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	NIL-FOR	row < $
378	147	8	RealMatrixImpl.java	add	THIS	RealMatrixImpl	0	IllegalArgumentException	$.getRowDimension() != m.getRowDimension()
378	147	8	RealMatrixImpl.java	add	THIS	RealMatrixImpl	0	IllegalArgumentException	$.getColumnDimension() != m.getColumnDimension()
378	147	8	RealMatrixImpl.java	add	m	RealMatrix	0	IllegalArgumentException	this.getRowDimension() != $.getRowDimension()
378	147	8	RealMatrixImpl.java	add	m	RealMatrix	0	IllegalArgumentException	this.getColumnDimension() != $.getColumnDimension()
46182	154	8	RealMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
46182	154	8	RealMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
46183	155	12	RealMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
46183	155	12	RealMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
379	170	8	RealMatrixImpl.java	subtract	THIS	RealMatrixImpl	0	IllegalArgumentException	$.getColumnDimension() != m.getColumnDimension()
379	170	8	RealMatrixImpl.java	subtract	THIS	RealMatrixImpl	0	IllegalArgumentException	$.getRowDimension() != m.getRowDimension()
379	170	8	RealMatrixImpl.java	subtract	m	RealMatrix	0	IllegalArgumentException	this.getColumnDimension() != $.getColumnDimension()
379	170	8	RealMatrixImpl.java	subtract	m	RealMatrix	0	IllegalArgumentException	this.getRowDimension() != $.getRowDimension()
46184	177	8	RealMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
46184	177	8	RealMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
46185	178	12	RealMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
46185	178	12	RealMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
46186	195	8	RealMatrixImpl.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
46186	195	8	RealMatrixImpl.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
46187	196	12	RealMatrixImpl.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
46187	196	12	RealMatrixImpl.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
46188	212	8	RealMatrixImpl.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
46188	212	8	RealMatrixImpl.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
46189	213	12	RealMatrixImpl.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
46189	213	12	RealMatrixImpl.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
380	228	8	RealMatrixImpl.java	multiply	THIS	RealMatrixImpl	0	IllegalArgumentException	$.getColumnDimension() != m.getRowDimension()
380	228	8	RealMatrixImpl.java	multiply	m	RealMatrix	0	IllegalArgumentException	this.getColumnDimension() != $.getRowDimension()
46190	236	8	RealMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
46190	236	8	RealMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
46191	237	12	RealMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
46191	237	12	RealMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
46192	239	16	RealMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
46192	239	16	RealMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
46193	287	8	RealMatrixImpl.java	getNorm	THIS	RealMatrixImpl	0	NIL-FOR	col < $.getColumnDimension()
46193	287	8	RealMatrixImpl.java	getNorm	col	int	0	NIL-FOR	$ < this.getColumnDimension()
46194	289	12	RealMatrixImpl.java	getNorm	THIS	RealMatrixImpl	0	NIL-FOR	row < $.getRowDimension()
46194	289	12	RealMatrixImpl.java	getNorm	row	int	0	NIL-FOR	$ < this.getRowDimension()
381	311	8	RealMatrixImpl.java	getSubMatrix	THIS	RealMatrixImpl	0	MatrixIndexException	endRow > $.data.$.length
381	311	8	RealMatrixImpl.java	getSubMatrix	THIS	RealMatrixImpl	0	MatrixIndexException	endColumn > $.data[0].length
381	311	8	RealMatrixImpl.java	getSubMatrix	startRow	int	0	MatrixIndexException	$ > endRow
381	311	8	RealMatrixImpl.java	getSubMatrix	startRow	int	0	MatrixIndexException	$ < 0
381	311	8	RealMatrixImpl.java	getSubMatrix	endRow	int	0	MatrixIndexException	startRow > $
381	311	8	RealMatrixImpl.java	getSubMatrix	endRow	int	0	MatrixIndexException	$ > data.length
381	311	8	RealMatrixImpl.java	getSubMatrix	startColumn	int	0	MatrixIndexException	$ < 0
381	311	8	RealMatrixImpl.java	getSubMatrix	startColumn	int	0	MatrixIndexException	$ > endColumn
381	311	8	RealMatrixImpl.java	getSubMatrix	endColumn	int	0	MatrixIndexException	$ > data[0].length
381	311	8	RealMatrixImpl.java	getSubMatrix	endColumn	int	0	MatrixIndexException	startColumn > $
46195	320	8	RealMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
46195	320	8	RealMatrixImpl.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
46196	321	12	RealMatrixImpl.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
46196	321	12	RealMatrixImpl.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
382	341	8	RealMatrixImpl.java	getSubMatrix	THIS	RealMatrixImpl	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
382	341	8	RealMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
382	341	8	RealMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
46197	349	12	RealMatrixImpl.java	getSubMatrix	THIS	RealMatrixImpl	0	NIL-FOR	i < selectedRows.$.length
46197	349	12	RealMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
46197	349	12	RealMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
46198	350	16	RealMatrixImpl.java	getSubMatrix	THIS	RealMatrixImpl	0	NIL-FOR	j < selectedColumns.$.length
46198	350	16	RealMatrixImpl.java	getSubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
46198	350	16	RealMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
383	390	8	RealMatrixImpl.java	setSubMatrix	row	int	0	MatrixIndexException	$ < 0
383	390	8	RealMatrixImpl.java	setSubMatrix	column	int	0	MatrixIndexException	$ < 0
384	395	8	RealMatrixImpl.java	setSubMatrix	nRows	int	0	IllegalArgumentException	$ == 0
385	400	8	RealMatrixImpl.java	setSubMatrix	nCols	int	0	IllegalArgumentException	$ == 0
46199	404	8	RealMatrixImpl.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
46199	404	8	RealMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
386	405	12	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	IllegalArgumentException	subMatrix[r].length != nCols
386	405	12	RealMatrixImpl.java	setSubMatrix	r	int	0	IllegalArgumentException	subMatrix[$].length != nCols
386	405	12	RealMatrixImpl.java	setSubMatrix	nCols	int	0	IllegalArgumentException	subMatrix[r].length != $
386	405	12	RealMatrixImpl.java	setSubMatrix	subMatrix	double[][]	0	IllegalArgumentException	$[r].length != nCols
387	410	8	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	MatrixIndexException	$.data == null
388	411	12	RealMatrixImpl.java	setSubMatrix	row	int	0	MatrixIndexException	$ > 0
388	411	12	RealMatrixImpl.java	setSubMatrix	column	int	0	MatrixIndexException	$ > 0
389	416	8	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	MatrixIndexException	nCols + column > $.getColumnDimension()
389	416	8	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	MatrixIndexException	(nRows + row) > $.getRowDimension()
389	416	8	RealMatrixImpl.java	setSubMatrix	nRows	int	0	MatrixIndexException	($ + row) > this.getRowDimension()
389	416	8	RealMatrixImpl.java	setSubMatrix	nCols	int	0	MatrixIndexException	$ + column > this.getColumnDimension()
389	416	8	RealMatrixImpl.java	setSubMatrix	row	int	0	MatrixIndexException	(nRows + $) > this.getRowDimension()
389	416	8	RealMatrixImpl.java	setSubMatrix	column	int	0	MatrixIndexException	nCols + $ > this.getColumnDimension()
46200	420	8	RealMatrixImpl.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
46200	420	8	RealMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
390	435	8	RealMatrixImpl.java	getRowMatrix	THIS	RealMatrixImpl	0	MatrixIndexException	$.isValidCoordinate( row, 0)
390	435	8	RealMatrixImpl.java	getRowMatrix	row	int	0	MatrixIndexException	isValidCoordinate( $, 0)
391	453	8	RealMatrixImpl.java	getColumnMatrix	THIS	RealMatrixImpl	0	MatrixIndexException	$.isValidCoordinate( 0, column)
391	453	8	RealMatrixImpl.java	getColumnMatrix	column	int	0	MatrixIndexException	isValidCoordinate( 0, $)
46201	458	8	RealMatrixImpl.java	getColumnMatrix	row	int	0	NIL-FOR	$ < nRows
46201	458	8	RealMatrixImpl.java	getColumnMatrix	nRows	int	0	NIL-FOR	row < $
392	475	8	RealMatrixImpl.java	getRow	THIS	RealMatrixImpl	0	MatrixIndexException	$.isValidCoordinate( row, 0 )
392	475	8	RealMatrixImpl.java	getRow	row	int	0	MatrixIndexException	isValidCoordinate( $, 0 )
393	495	8	RealMatrixImpl.java	getColumn	THIS	RealMatrixImpl	0	MatrixIndexException	$.isValidCoordinate(0, col)
393	495	8	RealMatrixImpl.java	getColumn	col	int	0	MatrixIndexException	isValidCoordinate(0, $)
46202	500	8	RealMatrixImpl.java	getColumn	row	int	0	NIL-FOR	$ < nRows
46202	500	8	RealMatrixImpl.java	getColumn	nRows	int	0	NIL-FOR	row < $
394	523	8	RealMatrixImpl.java	getEntry	THIS	RealMatrixImpl	0	MatrixIndexException	$.isValidCoordinate(row,column)
394	523	8	RealMatrixImpl.java	getEntry	row	int	0	MatrixIndexException	isValidCoordinate($,column)
394	523	8	RealMatrixImpl.java	getEntry	column	int	0	MatrixIndexException	isValidCoordinate(row,$)
46203	539	8	RealMatrixImpl.java	transpose	row	int	0	NIL-FOR	$ < nRows
46203	539	8	RealMatrixImpl.java	transpose	nRows	int	0	NIL-FOR	row < $
46204	540	12	RealMatrixImpl.java	transpose	col	int	0	NIL-FOR	$ < nCols
46204	540	12	RealMatrixImpl.java	transpose	nCols	int	0	NIL-FOR	col < $
395	563	8	RealMatrixImpl.java	getDeterminant	THIS	RealMatrixImpl	0	InvalidMatrixException	$.isSquare()
396	566	8	RealMatrixImpl.java	getDeterminant	THIS	RealMatrixImpl	1	RET	$.isSingular()
46205	570	12	RealMatrixImpl.java	getDeterminant	THIS	RealMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
46205	570	12	RealMatrixImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < this.getRowDimension()
397	588	8	RealMatrixImpl.java	isSingular	THIS	RealMatrixImpl	1	RET	$.lu == null
398	619	8	RealMatrixImpl.java	getTrace	THIS	RealMatrixImpl	0	IllegalArgumentException	$.isSquare()
46206	623	8	RealMatrixImpl.java	getTrace	THIS	RealMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
46206	623	8	RealMatrixImpl.java	getTrace	i	int	0	NIL-FOR	$ < this.getRowDimension()
399	635	8	RealMatrixImpl.java	operate	THIS	RealMatrixImpl	0	IllegalArgumentException	v.$.length != $.getColumnDimension()
399	635	8	RealMatrixImpl.java	operate	v	double[]	0	IllegalArgumentException	$.length != this.getColumnDimension()
46207	641	8	RealMatrixImpl.java	operate	row	int	0	NIL-FOR	$ < nRows
46207	641	8	RealMatrixImpl.java	operate	nRows	int	0	NIL-FOR	row < $
46208	643	12	RealMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < nCols
46208	643	12	RealMatrixImpl.java	operate	nCols	int	0	NIL-FOR	i < $
400	658	8	RealMatrixImpl.java	preMultiply	THIS	RealMatrixImpl	0	IllegalArgumentException	v.$.length != nRows
400	658	8	RealMatrixImpl.java	preMultiply	nRows	int	0	IllegalArgumentException	v.length != $
400	658	8	RealMatrixImpl.java	preMultiply	v	double[]	0	IllegalArgumentException	$.length != nRows
46209	663	8	RealMatrixImpl.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
46209	663	8	RealMatrixImpl.java	preMultiply	nCols	int	0	NIL-FOR	col < $
46210	665	12	RealMatrixImpl.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
46210	665	12	RealMatrixImpl.java	preMultiply	nRows	int	0	NIL-FOR	i < $
401	686	8	RealMatrixImpl.java	solve	THIS	RealMatrixImpl	0	IllegalArgumentException	b.$.length != nRows
401	686	8	RealMatrixImpl.java	solve	nRows	int	0	IllegalArgumentException	b.length != $
401	686	8	RealMatrixImpl.java	solve	b	double[]	0	IllegalArgumentException	$.length != nRows
46211	692	8	RealMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRows
46211	692	8	RealMatrixImpl.java	solve	nRows	int	0	NIL-FOR	row < $
402	710	8	RealMatrixImpl.java	solve	THIS	RealMatrixImpl	0	IllegalArgumentException	b.getRowDimension() != $.getRowDimension()
402	710	8	RealMatrixImpl.java	solve	b	RealMatrix	0	IllegalArgumentException	$.getRowDimension() != this.getRowDimension()
403	713	8	RealMatrixImpl.java	solve	THIS	RealMatrixImpl	0	InvalidMatrixException	$.isSquare()
404	716	8	RealMatrixImpl.java	solve	THIS	RealMatrixImpl	0	InvalidMatrixException	$.isSingular()
46212	726	8	RealMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRowB
46212	726	8	RealMatrixImpl.java	solve	nRowB	int	0	NIL-FOR	row < $
46213	727	12	RealMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nColB
46213	727	12	RealMatrixImpl.java	solve	nColB	int	0	NIL-FOR	col < $
46214	733	8	RealMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nCol
46214	733	8	RealMatrixImpl.java	solve	nCol	int	0	NIL-FOR	col < $
46215	734	12	RealMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < nCol
46215	734	12	RealMatrixImpl.java	solve	nCol	int	0	NIL-FOR	i < $
46216	735	16	RealMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
46216	735	16	RealMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
46217	742	8	RealMatrixImpl.java	solve	col	int	0	NIL-FOR	$ >= 0
46218	743	12	RealMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
46218	743	12	RealMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
46219	746	12	RealMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < col
46219	746	12	RealMatrixImpl.java	solve	col	int	0	NIL-FOR	i < $
46220	747	16	RealMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
46220	747	16	RealMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
405	779	8	RealMatrixImpl.java	luDecompose	nRows	int	0	InvalidMatrixException	$ != nCols
405	779	8	RealMatrixImpl.java	luDecompose	nCols	int	0	InvalidMatrixException	nRows != $
46221	786	8	RealMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
46221	786	8	RealMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
46222	792	8	RealMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	$ < nCols
46222	792	8	RealMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	col < $
46223	797	12	RealMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < col
46223	797	12	RealMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	row < $
46224	799	16	RealMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < row
46224	799	16	RealMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	i < $
46225	808	12	RealMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
46225	808	12	RealMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
46226	810	16	RealMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < col
46226	810	16	RealMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	i < $
406	816	16	RealMatrixImpl.java	luDecompose	sum	double	0	DEF	Math.abs($) > largest
406	816	16	RealMatrixImpl.java	luDecompose	largest	double	0	DEF	Math.abs(sum) > $
407	823	12	RealMatrixImpl.java	luDecompose	THIS	RealMatrixImpl	0	InvalidMatrixException	Math.abs($.lu[max][col]) < TOO_SMALL
407	823	12	RealMatrixImpl.java	luDecompose	max	int	0	InvalidMatrixException	Math.abs(lu[$][col]) < TOO_SMALL
407	823	12	RealMatrixImpl.java	luDecompose	col	int	0	InvalidMatrixException	Math.abs(lu[max][$]) < TOO_SMALL
408	829	12	RealMatrixImpl.java	luDecompose	max	int	0	DEF	$ != col
408	829	12	RealMatrixImpl.java	luDecompose	col	int	0	DEF	max != $
46227	831	16	RealMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < nCols
46227	831	16	RealMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	i < $
46228	843	12	RealMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
46228	843	12	RealMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
409	856	8	RealMatrixImpl.java	toString	THIS	RealMatrixImpl	0	DEF	$.data != null
46229	857	12	RealMatrixImpl.java	toString	THIS	RealMatrixImpl	0	NIL-FOR	i < $.data.$.length
46229	857	12	RealMatrixImpl.java	toString	i	int	0	NIL-FOR	$ < data.length
410	858	16	RealMatrixImpl.java	toString	i	int	0	DEF	$ > 0
46230	861	16	RealMatrixImpl.java	toString	THIS	RealMatrixImpl	0	NIL-FOR	j < $.data[0].length
46230	861	16	RealMatrixImpl.java	toString	j	int	0	NIL-FOR	$ < data[0].length
411	862	20	RealMatrixImpl.java	toString	j	int	0	DEF	$ > 0
412	883	8	RealMatrixImpl.java	equals	THIS	RealMatrixImpl	0	RET	object == $
412	883	8	RealMatrixImpl.java	equals	object	Object	0	RET	$ == this
413	886	8	RealMatrixImpl.java	equals	object	Object	0	RET	$ instanceof RealMatrixImpl == false
414	892	8	RealMatrixImpl.java	equals	m	RealMatrix	0	RET	$.getRowDimension() != nRows
414	892	8	RealMatrixImpl.java	equals	m	RealMatrix	0	RET	$.getColumnDimension() != nCols
414	892	8	RealMatrixImpl.java	equals	nRows	int	0	RET	m.getRowDimension() != $
414	892	8	RealMatrixImpl.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
46231	895	8	RealMatrixImpl.java	equals	row	int	0	NIL-FOR	$ < nRows
46231	895	8	RealMatrixImpl.java	equals	nRows	int	0	NIL-FOR	row < $
46232	896	12	RealMatrixImpl.java	equals	col	int	0	NIL-FOR	$ < nCols
46232	896	12	RealMatrixImpl.java	equals	nCols	int	0	NIL-FOR	col < $
415	897	16	RealMatrixImpl.java	equals	THIS	RealMatrixImpl	0	RET	Double.doubleToLongBits($.data[row][col]) != Double.doubleToLongBits(m.getEntry(row, col))
415	897	16	RealMatrixImpl.java	equals	col	int	0	RET	Double.doubleToLongBits(data[row][$]) != Double.doubleToLongBits(m.getEntry(row, $))
415	897	16	RealMatrixImpl.java	equals	row	int	0	RET	Double.doubleToLongBits(data[$][col]) != Double.doubleToLongBits(m.getEntry($, col))
415	897	16	RealMatrixImpl.java	equals	m	RealMatrix	0	RET	Double.doubleToLongBits(data[row][col]) != Double.doubleToLongBits($.getEntry(row, col))
46233	917	8	RealMatrixImpl.java	hashCode	row	int	0	NIL-FOR	$ < nRows
46233	917	8	RealMatrixImpl.java	hashCode	nRows	int	0	NIL-FOR	row < $
46234	918	11	RealMatrixImpl.java	hashCode	col	int	0	NIL-FOR	$ < nCols
46234	918	11	RealMatrixImpl.java	hashCode	nCols	int	0	NIL-FOR	col < $
416	968	8	RealMatrixImpl.java	getLUMatrix	THIS	RealMatrixImpl	0	DEF	$.lu == null
46235	1003	8	RealMatrixImpl.java	copyOut	i	int	0	NIL-FOR	$ < nRows
46235	1003	8	RealMatrixImpl.java	copyOut	nRows	int	0	NIL-FOR	i < $
9	252	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + $.numElements) > $.internalArray.$.length
10	256	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
11	280	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	($.startIndex + ($.numElements + 1)) > $.internalArray.$.length
12	290	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
13	310	8	ResizableDoubleArray.java	checkContractExpand	contractionCritera	float	0	IllegalArgumentException	$ < expansionFactor
13	310	8	ResizableDoubleArray.java	checkContractExpand	expansionFactor	float	0	IllegalArgumentException	contractionCritera < $
14	320	8	ResizableDoubleArray.java	checkContractExpand	THIS	ResizableDoubleArray	0	IllegalArgumentException	$.contractionCriteria <= 1.0
15	330	8	ResizableDoubleArray.java	checkContractExpand	expansionFactor	float	0	IllegalArgumentException	$ <= 1.0
16	373	8	ResizableDoubleArray.java	discardFrontElements	THIS	ResizableDoubleArray	1	IllegalArgumentException	i > $.numElements
16	373	8	ResizableDoubleArray.java	discardFrontElements	i	int	1	IllegalArgumentException	$ > numElements
17	377	15	ResizableDoubleArray.java	discardFrontElements	i	int	1	IllegalArgumentException	$ < 0
18	385	8	ResizableDoubleArray.java	discardFrontElements	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
19	407	8	ResizableDoubleArray.java	expand	THIS	ResizableDoubleArray	1	DEF	$.expansionMode == MULTIPLICATIVE_MODE
20	456	8	ResizableDoubleArray.java	getElement	THIS	ResizableDoubleArray	1	ArrayIndexOutOfBoundsException	index >= $.numElements
20	456	8	ResizableDoubleArray.java	getElement	index	int	1	ArrayIndexOutOfBoundsException	$ >= numElements
21	461	15	ResizableDoubleArray.java	getElement	index	int	1	RET	$ >= 0
22	572	8	ResizableDoubleArray.java	setElement	index	int	0	ArrayIndexOutOfBoundsException	$ < 0
23	576	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	index + 1 > $.numElements
23	576	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ + 1 > numElements
24	579	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + index) >= $.internalArray.$.length
24	579	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	(startIndex + $) >= internalArray.length
25	610	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	IllegalArgumentException	$ != MULTIPLICATIVE_MODE
25	610	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	IllegalArgumentException	$ != ADDITIVE_MODE
26	625	8	ResizableDoubleArray.java	setInitialCapacity	initialCapacity	int	1	DEF	$ > 0
27	648	8	ResizableDoubleArray.java	setNumElements	i	int	0	IllegalArgumentException	$ < 0
28	656	8	ResizableDoubleArray.java	setNumElements	THIS	ResizableDoubleArray	0	DEF	($.startIndex + i) > $.internalArray.$.length
28	656	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	(startIndex + $) > internalArray.length
29	671	8	ResizableDoubleArray.java	shouldContract	THIS	ResizableDoubleArray	1	RET	$.expansionMode == MULTIPLICATIVE_MODE
907	67	8	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	$.f.value(min) == 0.0
907	67	8	RiddersSolver.java	solve	min	double	0	RET	f.value($) == 0.0
908	68	8	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	$.f.value(max) == 0.0
908	68	8	RiddersSolver.java	solve	max	double	0	RET	f.value($) == 0.0
909	69	8	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	$.f.value(initial) == 0.0
909	69	8	RiddersSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
910	73	8	RiddersSolver.java	solve	THIS	RiddersSolver	1	RET	$.isBracketing(min, initial, $.f)
910	73	8	RiddersSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
910	73	8	RiddersSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
911	105	8	RiddersSolver.java	solve	y1	double	0	RET	$ == 0.0
912	106	8	RiddersSolver.java	solve	y2	double	0	RET	$ == 0.0
46571	111	8	RiddersSolver.java	solve	THIS	RiddersSolver	0	NIL-WHILE	i <= $.maximalIterationCount
46571	111	8	RiddersSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
913	115	12	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	Math.abs(y3) <= $.functionValueAccuracy
913	115	12	RiddersSolver.java	solve	y3	double	0	RET	Math.abs($) <= functionValueAccuracy
914	127	12	RiddersSolver.java	solve	x	double	0	RET	Math.abs($ - oldx) <= tolerance
914	127	12	RiddersSolver.java	solve	oldx	double	0	RET	Math.abs(x - $) <= tolerance
914	127	12	RiddersSolver.java	solve	tolerance	double	0	RET	Math.abs(x - oldx) <= $
915	131	12	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
915	131	12	RiddersSolver.java	solve	y	double	0	RET	Math.abs($) <= functionValueAccuracy
916	138	12	RiddersSolver.java	solve	correction	double	1	DEF	$ > 0.0
917	139	16	RiddersSolver.java	solve	y1	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
917	139	16	RiddersSolver.java	solve	y	double	1	DEF	MathUtils.sign(y1) + MathUtils.sign($) == 0.0
918	146	16	RiddersSolver.java	solve	y2	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
918	146	16	RiddersSolver.java	solve	y	double	1	DEF	MathUtils.sign(y2) + MathUtils.sign($) == 0.0
46588	76	8	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	NIL-WHILE	i <= $.maximalIterationCount
46588	76	8	RombergIntegrator.java	integrate	i	int	0	NIL-WHILE	$ <= maximalIterationCount
46589	78	12	RombergIntegrator.java	integrate	i	int	0	NIL-FOR	j <= $
46589	78	12	RombergIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= i
968	84	12	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	RET	i >= $.minimalIterationCount
968	84	12	RombergIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
969	85	16	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	RET	Math.abs(s - olds) <= Math.abs($.relativeAccuracy * olds)
969	85	16	RombergIntegrator.java	integrate	s	double	0	RET	Math.abs($ - olds) <= Math.abs(relativeAccuracy * olds)
969	85	16	RombergIntegrator.java	integrate	olds	double	0	RET	Math.abs(s - $) <= Math.abs(relativeAccuracy * $)
970	104	8	RombergIntegrator.java	verifyIterationCount	THIS	RombergIntegrator	0	IllegalArgumentException	$.maximalIterationCount > 32
89	117	4	Rotation.java	Rotation	needsNormalization	boolean	0	DEF	$
90	147	4	Rotation.java	Rotation	norm	double	0	ArithmeticException	$ == 0
91	195	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m.$.length != 3
91	195	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[1].length != 3
91	195	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[0].length != 3
91	195	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[2].length != 3
91	195	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$.length != 3
91	195	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[1].length != 3
91	195	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[0].length != 3
91	195	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[2].length != 3
92	212	4	Rotation.java	Rotation	det	double	0	NotARotationMatrixException	$ < 0.0
93	232	4	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
94	241	6	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
95	250	8	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
96	296	2	Rotation.java	Rotation	u1u1	double	0	IllegalArgumentException	$ == 0
96	296	2	Rotation.java	Rotation	u2u2	double	0	IllegalArgumentException	$ == 0
96	296	2	Rotation.java	Rotation	v1v1	double	0	IllegalArgumentException	$ == 0
96	296	2	Rotation.java	Rotation	v2v2	double	0	IllegalArgumentException	$ == 0
97	345	2	Rotation.java	Rotation	c	double	0	RET	$ == 0
98	367	4	Rotation.java	Rotation	c	double	0	RET	$ == 0
99	377	6	Rotation.java	Rotation	c	double	0	RET	$ == 0
100	427	4	Rotation.java	Rotation	normProduct	double	0	IllegalArgumentException	$ == 0
101	433	4	Rotation.java	Rotation	normProduct	double	1	DEF	dot < ((2.0e-15 - 1.0) * $)
101	433	4	Rotation.java	Rotation	dot	double	1	DEF	$ < ((2.0e-15 - 1.0) * normProduct)
102	528	4	Rotation.java	getAxis	squaredSine	double	1	RET	$ == 0
103	530	11	Rotation.java	getAxis	THIS	Rotation	0	RET	$.q0 < 0
104	542	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 < -0.1
104	542	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 > 0.1
105	544	11	Rotation.java	getAngle	THIS	Rotation	0	RET	$.q0 < 0
106	588	4	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
107	597	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
107	597	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
108	606	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
109	615	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
109	615	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
110	624	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
111	633	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
111	633	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
112	642	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
113	651	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
113	651	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
114	660	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
115	669	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
115	669	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
116	678	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
117	687	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
117	687	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
118	696	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
119	705	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
119	705	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
120	714	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
121	723	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
121	723	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
122	732	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
123	741	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
123	741	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
124	750	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
125	759	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
125	759	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
126	768	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
127	777	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
127	777	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
128	795	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
128	795	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
46106	954	4	Rotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
129	995	6	Rotation.java	orthogonalizeMatrix	fn	double	0	RET	Math.abs(fn1 - $) <= threshold
129	995	6	Rotation.java	orthogonalizeMatrix	fn1	double	0	RET	Math.abs($ - fn) <= threshold
129	995	6	Rotation.java	orthogonalizeMatrix	threshold	double	0	RET	Math.abs(fn1 - fn) <= $
859	118	4	RungeKuttaIntegrator.java	sanityChecks	THIS	RungeKuttaIntegrator	0	Integer	equations.getDimension() != y0.$.length
859	118	4	RungeKuttaIntegrator.java	sanityChecks	equations	FirstOrderDifferentialEquations	0	Integer	$.getDimension() != y0.length
859	118	4	RungeKuttaIntegrator.java	sanityChecks	y0	double[]	0	Integer	equations.getDimension() != $.length
860	126	4	RungeKuttaIntegrator.java	sanityChecks	THIS	RungeKuttaIntegrator	0	Integer	equations.getDimension() != y.$.length
860	126	4	RungeKuttaIntegrator.java	sanityChecks	equations	FirstOrderDifferentialEquations	0	Integer	$.getDimension() != y.length
860	126	4	RungeKuttaIntegrator.java	sanityChecks	y	double[]	0	Integer	equations.getDimension() != $.length
861	134	4	RungeKuttaIntegrator.java	sanityChecks	t0	double	0	Double	Math.abs(t - $) <= 1.0e-12 * Math.max(Math.abs($), Math.abs(t))
861	134	4	RungeKuttaIntegrator.java	sanityChecks	t	double	0	Double	Math.abs($ - t0) <= 1.0e-12 * Math.max(Math.abs(t0), Math.abs($))
862	166	4	RungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
862	166	4	RungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
46536	170	4	RungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
46536	170	4	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
863	177	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.handler.requiresDenseOutput()
863	177	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.switchesHandler.isEmpty()
46537	192	4	RungeKuttaIntegrator.java	integrate	lastStep	boolean	0	NIL-FOR	$
46538	197	6	RungeKuttaIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
46539	203	8	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
46539	203	8	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
46540	205	10	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
46540	205	10	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
46540	205	10	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
46541	207	12	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
46541	207	12	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
46542	218	8	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
46542	218	8	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
46542	218	8	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
46543	220	10	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
46543	220	10	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
864	228	8	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.switchesHandler.evaluateStep(interpolator)
864	228	8	RungeKuttaIntegrator.java	integrate	interpolator	AbstractStepInterpolator	1	DEF	switchesHandler.evaluateStep($)
865	241	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.switchesHandler.stop()
866	252	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	DEF	$.switchesHandler.reset($.stepStart, y)
866	252	6	RungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
866	252	6	RungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	switchesHandler.reset(stepStart, $)
867	258	6	RungeKuttaIntegrator.java	integrate	needUpdate	boolean	0	DEF	$
714	74	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	1	DEF	interpolator.$.currentState != null
714	74	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
46439	78	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < interpolator.$.yDotK.$.length
46439	78	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.yDotK.length
46439	78	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.length
46440	134	4	RungeKuttaStepInterpolator.java	writeExternal	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.$.length
46440	134	4	RungeKuttaStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < yDotK.length
46441	135	6	RungeKuttaStepInterpolator.java	writeExternal	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
46441	135	6	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < currentState.length
46442	157	4	RungeKuttaStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
46442	157	4	RungeKuttaStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
46443	159	6	RungeKuttaStepInterpolator.java	readExternal	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
46443	159	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < currentState.length
939	101	8	SecantSolver.java	solve	y0	double	0	IllegalArgumentException	$ * y1 >= 0
939	101	8	SecantSolver.java	solve	y1	double	0	IllegalArgumentException	y0 * $ >= 0
46577	112	8	SecantSolver.java	solve	THIS	SecantSolver	0	NIL-WHILE	i < $.maximalIterationCount
46577	112	8	SecantSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
940	113	12	SecantSolver.java	solve	y1	double	0	DEF	Math.abs(y2) < Math.abs($)
940	113	12	SecantSolver.java	solve	y2	double	0	DEF	Math.abs($) < Math.abs(y1)
941	121	12	SecantSolver.java	solve	THIS	SecantSolver	0	RET	Math.abs(y1) <= $.functionValueAccuracy
941	121	12	SecantSolver.java	solve	y1	double	0	RET	Math.abs($) <= functionValueAccuracy
942	125	12	SecantSolver.java	solve	THIS	SecantSolver	0	RET	Math.abs(oldDelta) < Math.max($.relativeAccuracy * Math.abs(x1), $.absoluteAccuracy)
942	125	12	SecantSolver.java	solve	x1	double	0	RET	Math.abs(oldDelta) < Math.max(relativeAccuracy * Math.abs($), absoluteAccuracy)
942	125	12	SecantSolver.java	solve	oldDelta	double	0	RET	Math.abs($) < Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy)
943	131	12	SecantSolver.java	solve	y0	double	1	DEF	Math.abs(y1) > Math.abs($)
943	131	12	SecantSolver.java	solve	y1	double	1	DEF	Math.abs($) > Math.abs(y0)
944	136	16	SecantSolver.java	solve	delta	double	0	DEF	$ / oldDelta > 1
944	136	16	SecantSolver.java	solve	oldDelta	double	0	DEF	delta / $ > 1
945	146	12	SecantSolver.java	solve	y1	double	0	DEF	($ > 0) == (y2 > 0)
945	146	12	SecantSolver.java	solve	y2	double	0	DEF	(y1 > 0) == ($ > 0)
483	65	8	SecondMoment.java	increment	THIS	SecondMoment	0	DEF	$.n < 1
46360	69	8	SimpleEstimationProblem.java	getUnboundParameters	iterator	Iterator	0	NIL-FOR	$.hasNext()
654	71	12	SimpleEstimationProblem.java	getUnboundParameters	p	EstimatedParameter	0	DEF	$.isBound()
592	121	8	SimpleRegression.java	addData	THIS	SimpleRegression	1	DEF	$.n == 0
593	137	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.n > 2
46322	159	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
46322	159	8	SimpleRegression.java	addData	i	int	0	NIL-FOR	$ < data.length
46322	159	8	SimpleRegression.java	addData	data	double[][]	0	NIL-FOR	i < $.length
594	244	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	$.n < 2
595	247	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	Math.abs($.sumXX) < 10 * Double.MIN_VALUE
596	297	8	SimpleRegression.java	getTotalSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
597	334	8	SimpleRegression.java	getMeanSquareError	THIS	SimpleRegression	0	RET	$.n < 3
598	357	8	SimpleRegression.java	getR	b1	double	0	DEF	$ < 0
599	472	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	IllegalArgumentException	$ >= 1
599	472	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	IllegalArgumentException	$ <= 0
600	538	8	SimpleRegression.java	setDistribution	THIS	SimpleRegression	0	DEF	$.n > 2
871	71	8	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	$.minimalIterationCount == 1
46552	79	8	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	NIL-WHILE	i <= $.maximalIterationCount
46552	79	8	SimpsonIntegrator.java	integrate	i	int	0	NIL-WHILE	$ <= maximalIterationCount
872	82	12	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	i >= $.minimalIterationCount
872	82	12	SimpsonIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
873	83	16	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	Math.abs(s - olds) <= Math.abs($.relativeAccuracy * olds)
873	83	16	SimpsonIntegrator.java	integrate	s	double	0	RET	Math.abs($ - olds) <= Math.abs(relativeAccuracy * olds)
873	83	16	SimpsonIntegrator.java	integrate	olds	double	0	RET	Math.abs(s - $) <= Math.abs(relativeAccuracy * $)
874	103	8	SimpsonIntegrator.java	verifyIterationCount	THIS	SimpsonIntegrator	0	IllegalArgumentException	$.maximalIterationCount > 64
476	77	8	Skewness.java	increment	THIS	Skewness	0	DEF	$.incMoment
477	91	8	Skewness.java	getResult	THIS	Skewness	0	RET	$.moment.$.n < 3
478	95	8	Skewness.java	getResult	variance	double	1	RET	$ < 10E-20
479	115	8	Skewness.java	clear	THIS	Skewness	0	DEF	$.incMoment
480	142	8	Skewness.java	evaluate	THIS	Skewness	0	DEF	$.test(values, begin, length)
480	142	8	Skewness.java	evaluate	values	double[]	0	DEF	test($, begin, length)
480	142	8	Skewness.java	evaluate	begin	int	0	DEF	test(values, $, length)
480	142	8	Skewness.java	evaluate	length	int	0	DEF	test(values, begin, $)
480	142	8	Skewness.java	evaluate	length	int	0	DEF	$ > 2
46289	152	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
46289	152	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
46289	152	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
46290	160	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
46290	160	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
46290	160	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
868	55	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	IllegalArgumentException	x.$.length != y.$.length
868	55	8	SplineInterpolator.java	interpolate	x	double	0	IllegalArgumentException	$.length != y.length
868	55	8	SplineInterpolator.java	interpolate	y	double	0	IllegalArgumentException	x.length != $.length
869	59	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	IllegalArgumentException	x.$.length < 3
869	59	8	SplineInterpolator.java	interpolate	x	double	0	IllegalArgumentException	$.length < 3
46547	67	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
46547	67	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
870	68	12	SplineInterpolator.java	interpolate	i	int	0	IllegalArgumentException	x[$] >= x[$ + 1]
870	68	12	SplineInterpolator.java	interpolate	x	double	0	IllegalArgumentException	$[i] >= $[i + 1]
46548	75	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
46548	75	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
46549	84	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
46549	84	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
46550	99	8	SplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ >=0
46551	107	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
46551	107	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
590	566	8	StatUtils.java	sumDifference	THIS	StatUtils	0	IllegalArgumentException	n != sample2.$.length
590	566	8	StatUtils.java	sumDifference	n	int	0	IllegalArgumentException	$ < 1
590	566	8	StatUtils.java	sumDifference	n	int	0	IllegalArgumentException	$ != sample2.length
590	566	8	StatUtils.java	sumDifference	sample2	double[]	0	IllegalArgumentException	n != $.length
46320	571	8	StatUtils.java	sumDifference	i	int	0	NIL-FOR	$ < n
46320	571	8	StatUtils.java	sumDifference	n	int	0	NIL-FOR	i < $
591	610	8	StatUtils.java	varianceDifference	THIS	StatUtils	0	IllegalArgumentException	n != sample2.$.length
591	610	8	StatUtils.java	varianceDifference	n	int	0	IllegalArgumentException	$ != sample2.length
591	610	8	StatUtils.java	varianceDifference	n	int	0	IllegalArgumentException	$ < 2
591	610	8	StatUtils.java	varianceDifference	sample2	double[]	0	IllegalArgumentException	n != $.length
46321	613	8	StatUtils.java	varianceDifference	i	int	0	NIL-FOR	$ < n
46321	613	8	StatUtils.java	varianceDifference	n	int	0	NIL-FOR	i < $
532	130	8	StatisticalSummaryValues.java	equals	THIS	StatisticalSummaryValues	0	RET	object == $
532	130	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ == this
533	133	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ instanceof StatisticalSummaryValues == false
778	99	4	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.lastState == null
779	109	6	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.forward
46480	117	4	StepNormalizer.java	handleStep	nextInStep	boolean	0	NIL-WHILE	$
780	133	4	StepNormalizer.java	handleStep	isLast	boolean	0	DEF	$
453	61	8	Sum.java	increment	THIS	Sum	1	DEF	$.n == 0
454	107	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, begin, length)
454	107	8	Sum.java	evaluate	values	double[]	0	DEF	test($, begin, length)
454	107	8	Sum.java	evaluate	begin	int	0	DEF	test(values, $, length)
454	107	8	Sum.java	evaluate	length	int	0	DEF	test(values, begin, $)
46284	109	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
46284	109	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
46284	109	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
455	77	8	SumOfLogs.java	getResult	THIS	SumOfLogs	1	RET	$.n > 0
456	118	8	SumOfLogs.java	evaluate	THIS	SumOfLogs	0	DEF	$.test(values, begin, length)
456	118	8	SumOfLogs.java	evaluate	values	double[]	0	DEF	test($, begin, length)
456	118	8	SumOfLogs.java	evaluate	begin	int	0	DEF	test(values, $, length)
456	118	8	SumOfLogs.java	evaluate	length	int	0	DEF	test(values, begin, $)
46285	120	12	SumOfLogs.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
46285	120	12	SumOfLogs.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
46285	120	12	SumOfLogs.java	evaluate	length	int	0	NIL-FOR	i < begin + $
451	61	8	SumOfSquares.java	increment	THIS	SumOfSquares	1	DEF	$.n == 0
452	107	8	SumOfSquares.java	evaluate	THIS	SumOfSquares	0	DEF	$.test(values, begin, length)
452	107	8	SumOfSquares.java	evaluate	values	double[]	0	DEF	test($, begin, length)
452	107	8	SumOfSquares.java	evaluate	begin	int	0	DEF	test(values, $, length)
452	107	8	SumOfSquares.java	evaluate	length	int	0	DEF	test(values, begin, $)
46283	109	12	SumOfSquares.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
46283	109	12	SumOfSquares.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
46283	109	12	SumOfSquares.java	evaluate	length	int	0	NIL-FOR	i < begin + $
503	172	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.meanImpl instanceof Mean
504	175	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.varianceImpl instanceof Variance
505	178	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.geoMeanImpl instanceof GeometricMean
506	219	8	SummaryStatistics.java	getMean	THIS	SummaryStatistics	1	RET	$.mean == $.meanImpl
507	235	8	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	0	DEF	$.getN() > 0
508	236	12	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	1	DEF	$.getN() > 1
509	253	8	SummaryStatistics.java	getVariance	THIS	SummaryStatistics	1	RET	$.varianceImpl == $.variance
510	341	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
511	344	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
512	357	8	SummaryStatistics.java	equals	THIS	SummaryStatistics	0	RET	object == $
512	357	8	SummaryStatistics.java	equals	object	Object	0	RET	$ == this
513	360	8	SummaryStatistics.java	equals	object	Object	0	RET	$ instanceof SummaryStatistics == false
514	625	8	SummaryStatistics.java	checkEmpty	THIS	SummaryStatistics	0	IllegalStateException	$.n > 0
46493	151	6	SwitchState.java	evaluateStep	i	int	0	NIL-FOR	$ < n
46493	151	6	SwitchState.java	evaluateStep	n	int	0	NIL-FOR	i < $
794	159	8	SwitchState.java	evaluateStep	THIS	SwitchState	1	FunctionEvaluationException:RET	$.g0Positive ^ (gb >= 0)
794	159	8	SwitchState.java	evaluateStep	gb	double	1	FunctionEvaluationException:RET	g0Positive ^ ($ >= 0)
795	178	10	SwitchState.java	evaluateStep	THIS	SwitchState	0	RET	Double.isNaN($.previousEventTime)
795	178	10	SwitchState.java	evaluateStep	THIS	SwitchState	0	RET	Math.abs($.previousEventTime - root) > $.convergence
795	178	10	SwitchState.java	evaluateStep	root	double	0	RET	Math.abs(previousEventTime - $) > convergence
796	180	14	SwitchState.java	evaluateStep	THIS	SwitchState	0	RET	$.pendingEvent
796	180	14	SwitchState.java	evaluateStep	THIS	SwitchState	0	RET	Math.abs(t1 - $.pendingEventTime) <= $.convergence
796	180	14	SwitchState.java	evaluateStep	t1	double	0	RET	Math.abs($ - pendingEventTime) <= convergence
797	208	6	SwitchState.java	evaluateStep	cause	Throwable	0	DEF	$ instanceof DerivativeException
797	208	6	SwitchState.java	evaluateStep	cause	Throwable	0	DEF	$ != null
798	239	4	SwitchState.java	stepAccepted	THIS	SwitchState	1	DEF	$.pendingEvent
799	267	4	SwitchState.java	reset	THIS	SwitchState	0	RET	$.pendingEvent
800	271	4	SwitchState.java	reset	THIS	SwitchState	0	DEF	$.nextAction == SwitchingFunction.RESET_STATE
805	84	6	SwitchingFunctionsHandler.java	evaluateStep	THIS	SwitchingFunctionsHandler	0	RET	$.functions.isEmpty()
806	91	6	SwitchingFunctionsHandler.java	evaluateStep	THIS	SwitchingFunctionsHandler	0	DEF	$.initialized
46507	97	8	SwitchingFunctionsHandler.java	evaluateStep	iter	Iterator	0	NIL-FOR	$.hasNext()
46508	106	6	SwitchingFunctionsHandler.java	evaluateStep	iter	Iterator	0	NIL-FOR	$.hasNext()
807	109	8	SwitchingFunctionsHandler.java	evaluateStep	state	SwitchState	0	DEF	$.evaluateStep(interpolator)
807	109	8	SwitchingFunctionsHandler.java	evaluateStep	interpolator	StepInterpolator	0	DEF	state.evaluateStep($)
808	110	10	SwitchingFunctionsHandler.java	evaluateStep	THIS	SwitchingFunctionsHandler	1	DEF	$.first == null
809	113	12	SwitchingFunctionsHandler.java	evaluateStep	interpolator	StepInterpolator	1	DEF	$.isForward()
810	114	14	SwitchingFunctionsHandler.java	evaluateStep	THIS	SwitchingFunctionsHandler	0	DEF	state.getEventTime() < $.first.getEventTime()
810	114	14	SwitchingFunctionsHandler.java	evaluateStep	state	SwitchState	0	DEF	$.getEventTime() < first.getEventTime()
811	118	14	SwitchingFunctionsHandler.java	evaluateStep	THIS	SwitchingFunctionsHandler	0	DEF	state.getEventTime() > $.first.getEventTime()
811	118	14	SwitchingFunctionsHandler.java	evaluateStep	state	SwitchState	0	DEF	$.getEventTime() > first.getEventTime()
46509	159	6	SwitchingFunctionsHandler.java	stepAccepted	iter	Iterator	0	NIL-FOR	$.hasNext()
46510	172	4	SwitchingFunctionsHandler.java	stop	iter	Iterator	0	NIL-FOR	$.hasNext()
812	173	6	SwitchingFunctionsHandler.java	stop	iter	Iterator	0	RET	((SwitchState) $.next()).stop()
46511	189	4	SwitchingFunctionsHandler.java	reset	iter	Iterator	0	NIL-FOR	$.hasNext()
813	190	6	SwitchingFunctionsHandler.java	reset	iter	Iterator	0	DEF	((SwitchState) $.next()).reset(t, y)
813	190	6	SwitchingFunctionsHandler.java	reset	t	double	0	DEF	((SwitchState) iter.next()).reset($, y)
813	190	6	SwitchingFunctionsHandler.java	reset	y	double[]	0	DEF	((SwitchState) iter.next()).reset(t, $)
248	54	8	TDistributionImpl.java	setDegreesOfFreedom	degreesOfFreedom	double	0	IllegalArgumentException	$ <= 0.0
249	77	8	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ == 0.0
250	85	12	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ < 0.0
251	111	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
252	114	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
558	79	8	TTestImpl.java	pairedT	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
558	79	8	TTestImpl.java	pairedT	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
558	79	8	TTestImpl.java	pairedT	sample1	double[]	0	IllegalArgumentException	$ == null
558	79	8	TTestImpl.java	pairedT	sample2	double[]	0	IllegalArgumentException	$ == null
558	79	8	TTestImpl.java	pairedT	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
559	164	8	TTestImpl.java	pairedTTest	alpha	double	0	IllegalArgumentException	$ <= 0
559	164	8	TTestImpl.java	pairedTTest	alpha	double	0	IllegalArgumentException	$ > 0.5
560	187	8	TTestImpl.java	t	THIS	TTestImpl	0	IllegalArgumentException	observed.$.length < 2
560	187	8	TTestImpl.java	t	observed	double[]	0	IllegalArgumentException	$.length < 2
560	187	8	TTestImpl.java	t	observed	double[]	0	IllegalArgumentException	$ == null
561	212	8	TTestImpl.java	t	sampleStats	StatisticalSummary	0	IllegalArgumentException	$ == null
561	212	8	TTestImpl.java	t	sampleStats	StatisticalSummary	0	IllegalArgumentException	$.getN() < 2
562	254	8	TTestImpl.java	homoscedasticT	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
562	254	8	TTestImpl.java	homoscedasticT	sample1	double[]	0	IllegalArgumentException	$ == null
562	254	8	TTestImpl.java	homoscedasticT	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
562	254	8	TTestImpl.java	homoscedasticT	sample2	double[]	0	IllegalArgumentException	$ == null
562	254	8	TTestImpl.java	homoscedasticT	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
563	293	8	TTestImpl.java	t	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
563	293	8	TTestImpl.java	t	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
563	293	8	TTestImpl.java	t	sample1	double[]	0	IllegalArgumentException	$ == null
563	293	8	TTestImpl.java	t	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
563	293	8	TTestImpl.java	t	sample2	double[]	0	IllegalArgumentException	$ == null
564	336	8	TTestImpl.java	t	sampleStats1	StatisticalSummary	0	IllegalArgumentException	$ == null
564	336	8	TTestImpl.java	t	sampleStats1	StatisticalSummary	0	IllegalArgumentException	Math.min($.getN(), sampleStats2.getN()) < 2
564	336	8	TTestImpl.java	t	sampleStats2	StatisticalSummary	0	IllegalArgumentException	Math.min(sampleStats1.getN(), $.getN()) < 2
564	336	8	TTestImpl.java	t	sampleStats2	StatisticalSummary	0	IllegalArgumentException	$ == null
565	384	8	TTestImpl.java	homoscedasticT	sampleStats1	StatisticalSummary	0	IllegalArgumentException	Math.min($.getN(), sampleStats2.getN()) < 2
565	384	8	TTestImpl.java	homoscedasticT	sampleStats1	StatisticalSummary	0	IllegalArgumentException	$ == null
565	384	8	TTestImpl.java	homoscedasticT	sampleStats2	StatisticalSummary	0	IllegalArgumentException	$ == null
565	384	8	TTestImpl.java	homoscedasticT	sampleStats2	StatisticalSummary	0	IllegalArgumentException	Math.min(sampleStats1.getN(), $.getN()) < 2
566	422	8	TTestImpl.java	tTest	THIS	TTestImpl	0	IllegalArgumentException	sample.$.length < 2
566	422	8	TTestImpl.java	tTest	sample	double[]	0	IllegalArgumentException	$.length < 2
566	422	8	TTestImpl.java	tTest	sample	double[]	0	IllegalArgumentException	$ == null
567	466	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ <= 0
567	466	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ > 0.5
568	502	8	TTestImpl.java	tTest	sampleStats	StatisticalSummary	0	IllegalArgumentException	$ == null
568	502	8	TTestImpl.java	tTest	sampleStats	StatisticalSummary	0	IllegalArgumentException	$.getN() < 2
569	548	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ <= 0
569	548	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ > 0.5
570	592	8	TTestImpl.java	tTest	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
570	592	8	TTestImpl.java	tTest	sample1	double[]	0	IllegalArgumentException	$ == null
570	592	8	TTestImpl.java	tTest	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
570	592	8	TTestImpl.java	tTest	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
570	592	8	TTestImpl.java	tTest	sample2	double[]	0	IllegalArgumentException	$ == null
571	636	8	TTestImpl.java	homoscedasticTTest	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
571	636	8	TTestImpl.java	homoscedasticTTest	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
571	636	8	TTestImpl.java	homoscedasticTTest	sample1	double[]	0	IllegalArgumentException	$ == null
571	636	8	TTestImpl.java	homoscedasticTTest	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
571	636	8	TTestImpl.java	homoscedasticTTest	sample2	double[]	0	IllegalArgumentException	$ == null
572	701	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ > 0.5
572	701	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ <= 0
573	761	8	TTestImpl.java	homoscedasticTTest	alpha	double	0	IllegalArgumentException	$ <= 0
573	761	8	TTestImpl.java	homoscedasticTTest	alpha	double	0	IllegalArgumentException	$ > 0.5
574	803	8	TTestImpl.java	tTest	sampleStats1	StatisticalSummary	0	IllegalArgumentException	Math.min($.getN(), sampleStats2.getN()) < 2
574	803	8	TTestImpl.java	tTest	sampleStats1	StatisticalSummary	0	IllegalArgumentException	$ == null
574	803	8	TTestImpl.java	tTest	sampleStats2	StatisticalSummary	0	IllegalArgumentException	Math.min(sampleStats1.getN(), $.getN()) < 2
574	803	8	TTestImpl.java	tTest	sampleStats2	StatisticalSummary	0	IllegalArgumentException	$ == null
575	848	8	TTestImpl.java	homoscedasticTTest	sampleStats1	StatisticalSummary	0	IllegalArgumentException	$ == null
575	848	8	TTestImpl.java	homoscedasticTTest	sampleStats1	StatisticalSummary	0	IllegalArgumentException	Math.min($.getN(), sampleStats2.getN()) < 2
575	848	8	TTestImpl.java	homoscedasticTTest	sampleStats2	StatisticalSummary	0	IllegalArgumentException	$ == null
575	848	8	TTestImpl.java	homoscedasticTTest	sampleStats2	StatisticalSummary	0	IllegalArgumentException	Math.min(sampleStats1.getN(), $.getN()) < 2
576	914	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ <= 0
576	914	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ > 0.5
492	74	8	ThirdMoment.java	increment	THIS	ThirdMoment	0	DEF	$.n < 1
46527	99	4	ThreeEighthesStepInterpolator.java	computeInterpolatedState	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
46527	99	4	ThreeEighthesStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
7	143	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof Number
7	143	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof String
8	147	12	TransformerMap.java	transform	trans	NumberTransformer	0	DEF	$ != null
919	72	8	TrapezoidIntegrator.java	stage	n	int	1	RET	$ == 0
46572	79	12	TrapezoidIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
46572	79	12	TrapezoidIntegrator.java	stage	np	long	0	NIL-FOR	i < $
46573	112	8	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	NIL-WHILE	i <= $.maximalIterationCount
46573	112	8	TrapezoidIntegrator.java	integrate	i	int	0	NIL-WHILE	$ <= maximalIterationCount
920	114	12	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	RET	i >= $.minimalIterationCount
920	114	12	TrapezoidIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
921	115	16	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	RET	Math.abs(t - oldt) <= Math.abs($.relativeAccuracy * oldt)
921	115	16	TrapezoidIntegrator.java	integrate	t	double	0	RET	Math.abs($ - oldt) <= Math.abs(relativeAccuracy * oldt)
921	115	16	TrapezoidIntegrator.java	integrate	oldt	double	0	RET	Math.abs(t - $) <= Math.abs(relativeAccuracy * $)
922	134	8	TrapezoidIntegrator.java	verifyIterationCount	THIS	TrapezoidIntegrator	0	IllegalArgumentException	$.maximalIterationCount > 64
646	45	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	THIS	UncorrelatedRandomVectorGenerator	0	IllegalArgumentException	mean.$.length != standardDeviation.$.length
646	45	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	mean	double[]	0	IllegalArgumentException	$.length != standardDeviation.length
646	45	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	standardDeviation	double[]	0	IllegalArgumentException	mean.length != $.length
46351	74	4	UncorrelatedRandomVectorGenerator.java	nextVector	THIS	UncorrelatedRandomVectorGenerator	0	NIL-FOR	i < random.$.length
46351	74	4	UncorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < random.length
46351	74	4	UncorrelatedRandomVectorGenerator.java	nextVector	random	double[]	0	NIL-FOR	i < $.length
902	75	8	UnivariateRealIntegratorImpl.java	UnivariateRealIntegratorImpl	f	UnivariateRealFunction	0	IllegalArgumentException	$ == null
903	99	8	UnivariateRealIntegratorImpl.java	getResult	THIS	UnivariateRealIntegratorImpl	1	RET	$.resultComputed
904	113	8	UnivariateRealIntegratorImpl.java	getIterationCount	THIS	UnivariateRealIntegratorImpl	1	RET	$.resultComputed
905	237	8	UnivariateRealIntegratorImpl.java	verifyInterval	lower	double	0	IllegalArgumentException	$ >= upper
905	237	8	UnivariateRealIntegratorImpl.java	verifyInterval	upper	double	0	IllegalArgumentException	lower >= $
906	250	8	UnivariateRealIntegratorImpl.java	verifyIterationCount	THIS	UnivariateRealIntegratorImpl	0	IllegalArgumentException	$.isSequence(0, $.minimalIterationCount, $.maximalIterationCount+1)
882	89	8	UnivariateRealSolverImpl.java	UnivariateRealSolverImpl	f	UnivariateRealFunction	0	IllegalArgumentException	$ == null
883	111	8	UnivariateRealSolverImpl.java	getResult	THIS	UnivariateRealSolverImpl	1	RET	$.resultComputed
884	126	8	UnivariateRealSolverImpl.java	getIterationCount	THIS	UnivariateRealSolverImpl	1	RET	$.resultComputed
885	295	8	UnivariateRealSolverImpl.java	verifyInterval	lower	double	0	IllegalArgumentException	$ >= upper
885	295	8	UnivariateRealSolverImpl.java	verifyInterval	upper	double	0	IllegalArgumentException	lower >= $
886	312	8	UnivariateRealSolverImpl.java	verifySequence	THIS	UnivariateRealSolverImpl	0	IllegalArgumentException	$.isSequence(lower, initial, upper)
886	312	8	UnivariateRealSolverImpl.java	verifySequence	lower	double	0	IllegalArgumentException	isSequence($, initial, upper)
886	312	8	UnivariateRealSolverImpl.java	verifySequence	initial	double	0	IllegalArgumentException	isSequence(lower, $, upper)
886	312	8	UnivariateRealSolverImpl.java	verifySequence	upper	double	0	IllegalArgumentException	isSequence(lower, initial, $)
887	334	8	UnivariateRealSolverImpl.java	verifyBracketing	THIS	UnivariateRealSolverImpl	0	IllegalArgumentException	$.isBracketing(lower, upper, f)
887	334	8	UnivariateRealSolverImpl.java	verifyBracketing	lower	double	0	IllegalArgumentException	isBracketing($, upper, f)
887	334	8	UnivariateRealSolverImpl.java	verifyBracketing	upper	double	0	IllegalArgumentException	isBracketing(lower, $, f)
887	334	8	UnivariateRealSolverImpl.java	verifyBracketing	f	UnivariateRealFunction	0	IllegalArgumentException	isBracketing(lower, upper, $)
946	171	8	UnivariateRealSolverUtils.java	bracket	function	UnivariateRealFunction	0	IllegalArgumentException	$ == null
947	174	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	IllegalArgumentException	$ <= 0
948	178	8	UnivariateRealSolverUtils.java	bracket	initial	double	0	IllegalArgumentException	$ > upperBound
948	178	8	UnivariateRealSolverUtils.java	bracket	initial	double	0	IllegalArgumentException	$ < lowerBound
948	178	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	IllegalArgumentException	$ >= upperBound
948	178	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	IllegalArgumentException	initial < $
948	178	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	IllegalArgumentException	lowerBound >= $
948	178	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	IllegalArgumentException	initial > $
46578	189	8	UnivariateRealSolverUtils.java	bracket	a	double	0	NIL-DOWHILE	$ > lowerBound
46578	189	8	UnivariateRealSolverUtils.java	bracket	b	double	0	NIL-DOWHILE	$ < upperBound
46578	189	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	NIL-DOWHILE	$ * fb > 0.0
46578	189	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	NIL-DOWHILE	fa * $ > 0.0
46578	189	8	UnivariateRealSolverUtils.java	bracket	numIterations	int	0	NIL-DOWHILE	$ < maximumIterations
46578	189	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	NIL-DOWHILE	a > $
46578	189	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	NIL-DOWHILE	b < $
46578	189	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	NIL-DOWHILE	numIterations < $
949	199	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	Double	$ * fb >= 0.0
949	199	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	Double	fa * $ >= 0.0
950	230	8	UnivariateRealSolverUtils.java	setup	f	UnivariateRealFunction	0	IllegalArgumentException	$ == null
951	234	8	UnivariateRealSolverUtils.java	setup	THIS	UnivariateRealSolverUtils	0	DEF	$.factory == null
46352	120	8	ValueServer.java	fill	THIS	ValueServer	0	NIL-FOR	i < values.$.length
46352	120	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < values.length
46352	120	8	ValueServer.java	fill	values	double[]	0	NIL-FOR	i < $.length
46353	135	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < length
46353	135	8	ValueServer.java	fill	length	int	0	NIL-FOR	i < $
647	232	8	ValueServer.java	resetReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
648	249	8	ValueServer.java	closeReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
649	296	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	IllegalStateException	$.empiricalDistribution.getBinStats().size() == 0
649	296	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	IllegalStateException	$.empiricalDistribution == null
650	323	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	$.filePointer == null
651	326	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	EOFException	(str = $.filePointer.readLine()) == null
651	326	8	ValueServer.java	getNextReplay	str	String	0	EOFException	($ = filePointer.readLine()) == null
652	330	12	ValueServer.java	getNextReplay	THIS	ValueServer	0	EOFException	(str = $.filePointer.readLine()) == null
652	330	12	ValueServer.java	getNextReplay	str	String	0	EOFException	($ = filePointer.readLine()) == null
459	144	8	Variance.java	increment	THIS	Variance	0	DEF	$.incMoment
460	153	12	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 0
461	155	19	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 1
462	158	16	Variance.java	getResult	THIS	Variance	1	RET	$.isBiasCorrected
463	177	8	Variance.java	clear	THIS	Variance	0	DEF	$.incMoment
464	199	8	Variance.java	evaluate	values	double[]	0	IllegalArgumentException	$ == null
465	229	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
465	229	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
465	229	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
465	229	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
466	231	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
467	233	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
468	273	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
468	273	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
468	273	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
468	273	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
469	274	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
470	276	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
46287	280	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
46287	280	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
46287	280	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
471	286	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
130	241	4	Vector3D.java	normalize	s	double	0	ArithmeticException	$ == 0
131	265	4	Vector3D.java	orthogonal	threshold	double	0	ArithmeticException	$ == 0
132	269	4	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x >= -threshold
132	269	4	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x <= threshold
132	269	4	Vector3D.java	orthogonal	threshold	double	1	RET	x >= -$
132	269	4	Vector3D.java	orthogonal	threshold	double	1	RET	x <= $
133	272	11	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y >= -threshold
133	272	11	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y <= threshold
133	272	11	Vector3D.java	orthogonal	threshold	double	0	RET	y >= -$
133	272	11	Vector3D.java	orthogonal	threshold	double	0	RET	y <= $
134	295	4	Vector3D.java	angle	normProduct	double	0	ArithmeticException	$ == 0
135	301	4	Vector3D.java	angle	dot	double	0	RET	$ > threshold
135	301	4	Vector3D.java	angle	dot	double	0	RET	$ < -threshold
135	301	4	Vector3D.java	angle	threshold	double	0	RET	dot > $
135	301	4	Vector3D.java	angle	threshold	double	0	RET	dot < -$
136	304	6	Vector3D.java	angle	dot	double	0	RET	$ >= 0
481	66	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	DimensionMismatchException	v.$.length != $.sums.$.length
481	66	8	VectorialCovariance.java	increment	v	double[]	0	DimensionMismatchException	$.length != sums.length
46291	70	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	NIL-FOR	i < v.$.length
46291	70	8	VectorialCovariance.java	increment	i	int	0	NIL-FOR	$ < v.length
46291	70	8	VectorialCovariance.java	increment	v	double[]	0	NIL-FOR	i < $.length
46292	72	12	VectorialCovariance.java	increment	j	int	0	NIL-FOR	$ <= i
46292	72	12	VectorialCovariance.java	increment	i	int	0	NIL-FOR	j <= $
482	88	8	VectorialCovariance.java	getResult	THIS	VectorialCovariance	0	DEF	$.n > 1
46293	92	12	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	$ < dimension
46293	92	12	VectorialCovariance.java	getResult	dimension	int	0	NIL-FOR	i < $
46294	93	16	VectorialCovariance.java	getResult	j	int	0	NIL-FOR	$ <= i
46294	93	16	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	j <= $
46296	41	8	VectorialMean.java	VectorialMean	i	int	0	NIL-FOR	$ < dimension
46296	41	8	VectorialMean.java	VectorialMean	dimension	int	0	NIL-FOR	i < $
493	52	8	VectorialMean.java	increment	THIS	VectorialMean	0	DimensionMismatchException	v.$.length != $.means.$.length
493	52	8	VectorialMean.java	increment	v	double[]	0	DimensionMismatchException	$.length != means.length
46297	55	8	VectorialMean.java	increment	THIS	VectorialMean	0	NIL-FOR	i < v.$.length
46297	55	8	VectorialMean.java	increment	i	int	0	NIL-FOR	$ < v.length
46297	55	8	VectorialMean.java	increment	v	double[]	0	NIL-FOR	i < $.length
46298	66	8	VectorialMean.java	getResult	THIS	VectorialMean	0	NIL-FOR	i < result.$.length
46298	66	8	VectorialMean.java	getResult	i	int	0	NIL-FOR	$ < result.length
46298	66	8	VectorialMean.java	getResult	result	double[]	0	NIL-FOR	i < $.length
283	60	8	WeibullDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
284	98	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ > 1.0
284	98	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ < 0.0
285	101	15	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
286	103	16	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
287	116	8	WeibullDistributionImpl.java	setShape	alpha	double	0	IllegalArgumentException	$ <= 0.0
288	128	8	WeibullDistributionImpl.java	setScale	beta	double	0	IllegalArgumentException	$ <= 0.0
