id	line	column	filename	methodname	varname	vartype	else	return	right
428	62	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	DEF	$ < 0.0
428	62	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	DEF	$ > 1.0
429	97	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	Math.abs($.value(lowerBound)) < 1E-6
429	97	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	lowerBound	double	0	RET	Math.abs(rootFindingFunction.value($)) < 1E-6
430	100	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	Math.abs($.value(upperBound)) < 1E-6
430	100	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	upperBound	double	0	RET	Math.abs(rootFindingFunction.value($)) < 1E-6
460	61	8	AbstractDistribution.java	cumulativeProbability	x0	double	0	DEF	$ > x1
460	61	8	AbstractDistribution.java	cumulativeProbability	x1	double	0	DEF	x0 > $
40870	86	8	AbstractEstimator.java	updateJacobian	THIS	AbstractEstimator	0	NIL-FOR	i < $.rows
40870	86	8	AbstractEstimator.java	updateJacobian	i	int	0	NIL-FOR	$ < rows
40871	89	12	AbstractEstimator.java	updateJacobian	THIS	AbstractEstimator	0	NIL-FOR	j < $.cols
40871	89	12	AbstractEstimator.java	updateJacobian	j	int	0	NIL-FOR	$ < cols
1391	110	8	AbstractEstimator.java	updateResidualsAndCost	THIS	AbstractEstimator	0	EstimationException	++$.costEvaluations > $.maxCostEval
40872	116	8	AbstractEstimator.java	updateResidualsAndCost	THIS	AbstractEstimator	0	NIL-FOR	i < $.rows
40872	116	8	AbstractEstimator.java	updateResidualsAndCost	i	int	0	NIL-FOR	$ < rows
40873	140	8	AbstractEstimator.java	getRMS	THIS	AbstractEstimator	0	NIL-FOR	i < wm.$.length
40873	140	8	AbstractEstimator.java	getRMS	i	int	0	NIL-FOR	$ < wm.length
40873	140	8	AbstractEstimator.java	getRMS	wm	WeightedMeasurement[]	0	NIL-FOR	i < $.length
40874	155	8	AbstractEstimator.java	getChiSquare	THIS	AbstractEstimator	0	NIL-FOR	i < wm.$.length
40874	155	8	AbstractEstimator.java	getChiSquare	i	int	0	NIL-FOR	$ < wm.length
40874	155	8	AbstractEstimator.java	getChiSquare	wm	WeightedMeasurement[]	0	NIL-FOR	i < $.length
40875	180	8	AbstractEstimator.java	getCovariances	i	int	0	NIL-FOR	$ < cols
40875	180	8	AbstractEstimator.java	getCovariances	cols	int	0	NIL-FOR	i < $
40876	181	12	AbstractEstimator.java	getCovariances	j	int	0	NIL-FOR	$ < cols
40876	181	12	AbstractEstimator.java	getCovariances	cols	int	0	NIL-FOR	j < $
40877	183	16	AbstractEstimator.java	getCovariances	k	int	0	NIL-FOR	$ < max
40877	183	16	AbstractEstimator.java	getCovariances	max	int	0	NIL-FOR	k < $
1392	215	8	AbstractEstimator.java	guessParametersErrors	m	int	0	EstimationException	$ <= p
1392	215	8	AbstractEstimator.java	guessParametersErrors	p	int	0	EstimationException	m <= $
40878	223	8	AbstractEstimator.java	guessParametersErrors	THIS	AbstractEstimator	0	NIL-FOR	i < errors.$.length
40878	223	8	AbstractEstimator.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
40878	223	8	AbstractEstimator.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
665	50	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	DEF	d.$.length == 0
665	50	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	DEF	$.length == 0
666	53	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	DEF	d[0].length == 0
666	53	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	DEF	$[0].length == 0
667	68	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	DEF	d.$.length == 0
667	68	8	AbstractFieldMatrix.java	extractField	d	T[]	0	DEF	$.length == 0
668	89	8	AbstractFieldMatrix.java	buildArray	columns	int	0	RET	$ < 0
40132	95	8	AbstractFieldMatrix.java	buildArray	THIS	AbstractFieldMatrix	0	NIL-FOR	i < array.$.length
40132	95	8	AbstractFieldMatrix.java	buildArray	i	int	0	NIL-FOR	$ < array.length
40132	95	8	AbstractFieldMatrix.java	buildArray	array	T[][]	0	NIL-FOR	i < $.length
669	144	8	AbstractFieldMatrix.java	AbstractFieldMatrix	rowDimension	int	0	DEF	$ <= 0
670	149	8	AbstractFieldMatrix.java	AbstractFieldMatrix	columnDimension	int	0	DEF	$ <= 0
40133	178	8	AbstractFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
40133	178	8	AbstractFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
40134	179	12	AbstractFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
40134	179	12	AbstractFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
40135	197	8	AbstractFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
40135	197	8	AbstractFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
40136	198	12	AbstractFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
40136	198	12	AbstractFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
40137	213	8	AbstractFieldMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
40137	213	8	AbstractFieldMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
40138	214	12	AbstractFieldMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
40138	214	12	AbstractFieldMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
40139	229	8	AbstractFieldMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
40139	229	8	AbstractFieldMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
40140	230	12	AbstractFieldMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
40140	230	12	AbstractFieldMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
40141	250	8	AbstractFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
40141	250	8	AbstractFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
40142	251	12	AbstractFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
40142	251	12	AbstractFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
40143	253	16	AbstractFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
40143	253	16	AbstractFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
40144	275	8	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	i < data.$.length
40144	275	8	AbstractFieldMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
40144	275	8	AbstractFieldMatrix.java	getData	data	T[][]	0	NIL-FOR	i < $.length
40145	277	12	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	j < dataI.$.length
40145	277	12	AbstractFieldMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
40145	277	12	AbstractFieldMatrix.java	getData	dataI	T[]	0	NIL-FOR	j < $.length
40146	295	8	AbstractFieldMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
40146	295	8	AbstractFieldMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
40147	296	12	AbstractFieldMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
40147	296	12	AbstractFieldMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
671	339	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	DEF	destination[0].length < columnsCount
671	339	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	DEF	destination.$.length < rowsCount
671	339	8	AbstractFieldMatrix.java	copySubMatrix	rowsCount	int	0	DEF	destination.length < $
671	339	8	AbstractFieldMatrix.java	copySubMatrix	columnsCount	int	0	DEF	destination[0].length < $
671	339	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	DEF	$[0].length < columnsCount
671	339	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	DEF	$.length < rowsCount
672	380	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	DEF	destination[0].length < selectedColumns.$.length
672	380	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	DEF	destination.$.length < selectedRows.$.length
672	380	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	DEF	destination.length < $.length
672	380	8	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	DEF	destination[0].length < $.length
672	380	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	DEF	$[0].length < selectedColumns.length
672	380	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	DEF	$.length < selectedRows.length
40148	389	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	i < selectedRows.$.length
40148	389	8	AbstractFieldMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
40148	389	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
40149	391	12	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	j < selectedColumns.$.length
40149	391	12	AbstractFieldMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
40149	391	12	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
673	403	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	DEF	$ == 0
674	408	8	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	DEF	$ == 0
40150	412	8	AbstractFieldMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
40150	412	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
675	413	12	AbstractFieldMatrix.java	setSubMatrix	THIS	AbstractFieldMatrix	0	DEF	subMatrix[r].length != nCols
675	413	12	AbstractFieldMatrix.java	setSubMatrix	r	int	0	DEF	subMatrix[$].length != nCols
675	413	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	DEF	subMatrix[r].length != $
675	413	12	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DEF	$[r].length != nCols
40151	425	8	AbstractFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
40151	425	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
40152	426	12	AbstractFieldMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
40152	426	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
40153	440	8	AbstractFieldMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
40153	440	8	AbstractFieldMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
676	454	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	InvalidMatrixException	matrix.getColumnDimension() != $
676	454	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	InvalidMatrixException	$.getRowDimension() != 1
676	454	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	InvalidMatrixException	$.getColumnDimension() != nCols
40154	460	8	AbstractFieldMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
40154	460	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
40155	473	8	AbstractFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
40155	473	8	AbstractFieldMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
677	487	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	InvalidMatrixException	matrix.getRowDimension() != $
677	487	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	InvalidMatrixException	$.getColumnDimension() != 1
677	487	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	InvalidMatrixException	$.getRowDimension() != nRows
40156	493	8	AbstractFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
40156	493	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
678	511	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	InvalidMatrixException	vector.getDimension() != $
678	511	8	AbstractFieldMatrix.java	setRowVector	vector	FieldVector<T>	0	InvalidMatrixException	$.getDimension() != nCols
40157	516	8	AbstractFieldMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
40157	516	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
679	534	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	InvalidMatrixException	vector.getDimension() != $
679	534	8	AbstractFieldMatrix.java	setColumnVector	vector	FieldVector<T>	0	InvalidMatrixException	$.getDimension() != nRows
40158	539	8	AbstractFieldMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
40158	539	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
40159	552	8	AbstractFieldMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
40159	552	8	AbstractFieldMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
680	566	8	AbstractFieldMatrix.java	setRow	THIS	AbstractFieldMatrix	0	InvalidMatrixException	array.$.length != nCols
680	566	8	AbstractFieldMatrix.java	setRow	nCols	int	0	InvalidMatrixException	array.length != $
680	566	8	AbstractFieldMatrix.java	setRow	array	T[]	0	InvalidMatrixException	$.length != nCols
40160	571	8	AbstractFieldMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
40160	571	8	AbstractFieldMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
40161	584	8	AbstractFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
40161	584	8	AbstractFieldMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
681	598	8	AbstractFieldMatrix.java	setColumn	THIS	AbstractFieldMatrix	0	InvalidMatrixException	array.$.length != nRows
681	598	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	InvalidMatrixException	array.length != $
681	598	8	AbstractFieldMatrix.java	setColumn	array	T[]	0	InvalidMatrixException	$.length != nRows
40162	603	8	AbstractFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
40162	603	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
682	661	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
682	661	8	AbstractFieldMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
40163	665	8	AbstractFieldMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
40163	665	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
683	677	8	AbstractFieldMatrix.java	operate	THIS	AbstractFieldMatrix	0	DEF	v.$.length != nCols
683	677	8	AbstractFieldMatrix.java	operate	nCols	int	0	DEF	v.length != $
683	677	8	AbstractFieldMatrix.java	operate	v	T[]	0	DEF	$.length != nCols
40164	684	8	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
40164	684	8	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
40165	686	12	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
40165	686	12	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
684	704	12	AbstractFieldMatrix.java	operate	nCols	int	0	DEF	v.getDimension() != $
684	704	12	AbstractFieldMatrix.java	operate	v	FieldVector<T>	0	DEF	$.getDimension() != nCols
40166	711	12	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
40166	711	12	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
40167	713	16	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
40167	713	16	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
685	729	8	AbstractFieldMatrix.java	preMultiply	THIS	AbstractFieldMatrix	0	DEF	v.$.length != nRows
685	729	8	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DEF	v.length != $
685	729	8	AbstractFieldMatrix.java	preMultiply	v	T[]	0	DEF	$.length != nRows
40168	736	8	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
40168	736	8	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
40169	738	12	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
40169	738	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
686	757	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DEF	v.getDimension() != $
686	757	12	AbstractFieldMatrix.java	preMultiply	v	FieldVector<T>	0	DEF	$.getDimension() != nRows
40170	764	12	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
40170	764	12	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
40171	766	16	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
40171	766	16	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
40172	783	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
40172	783	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
40173	784	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
40173	784	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
40174	799	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
40174	799	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
40175	800	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
40175	800	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
40176	815	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
40176	815	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
40177	816	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
40177	816	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
40178	833	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
40178	833	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
40179	834	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
40179	834	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
40180	847	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
40180	847	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
40181	848	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
40181	848	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
40182	863	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
40182	863	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
40183	864	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
40183	864	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
40184	879	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
40184	879	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
40185	880	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
40185	880	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
40186	897	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
40186	897	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
40187	898	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
40187	898	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
40188	946	8	AbstractFieldMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
40188	946	8	AbstractFieldMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
687	947	12	AbstractFieldMatrix.java	toString	i	int	0	DEF	$ > 0
40189	951	12	AbstractFieldMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
40189	951	12	AbstractFieldMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
688	952	16	AbstractFieldMatrix.java	toString	j	int	0	DEF	$ > 0
689	976	8	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	object == $
689	976	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ == this
690	979	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ instanceof FieldMatrix == false
691	985	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<T>	0	RET	$.getColumnDimension() != nCols
691	985	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<T>	0	RET	$.getRowDimension() != nRows
691	985	8	AbstractFieldMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
691	985	8	AbstractFieldMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
40190	988	8	AbstractFieldMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
40190	988	8	AbstractFieldMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
40191	989	12	AbstractFieldMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
40191	989	12	AbstractFieldMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
692	990	16	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	$.getEntry(row, col).equals(m.getEntry(row, col))
692	990	16	AbstractFieldMatrix.java	equals	col	int	0	RET	getEntry(row, $).equals(m.getEntry(row, $))
692	990	16	AbstractFieldMatrix.java	equals	row	int	0	RET	getEntry($, col).equals(m.getEntry($, col))
692	990	16	AbstractFieldMatrix.java	equals	m	FieldMatrix<T>	0	RET	getEntry(row, col).equals($.getEntry(row, col))
40192	1010	8	AbstractFieldMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
40192	1010	8	AbstractFieldMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
40193	1011	12	AbstractFieldMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
40193	1011	12	AbstractFieldMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
693	1024	8	AbstractFieldMatrix.java	checkRowIndex	THIS	AbstractFieldMatrix	0	MatrixIndexException	row >= $.getRowDimension()
693	1024	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	MatrixIndexException	$ < 0
693	1024	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	MatrixIndexException	$ >= getRowDimension()
694	1037	8	AbstractFieldMatrix.java	checkColumnIndex	THIS	AbstractFieldMatrix	0	MatrixIndexException	column >= $.getColumnDimension()
694	1037	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	MatrixIndexException	$ >= getColumnDimension()
694	1037	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	MatrixIndexException	$ < 0
695	1057	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startRow	int	0	MatrixIndexException	$ > endRow
695	1057	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endRow	int	0	MatrixIndexException	startRow > $
696	1064	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startColumn	int	0	MatrixIndexException	$ > endColumn
696	1064	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endColumn	int	0	MatrixIndexException	startColumn > $
697	1081	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
697	1081	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
697	1081	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
698	1082	12	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	MatrixIndexException	selectedRows.$.length == 0
698	1082	12	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length == 0
699	1102	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getRowDimension() != m.getRowDimension()
699	1102	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getColumnDimension() != m.getColumnDimension()
699	1102	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	DEF	getRowDimension() != $.getRowDimension()
699	1102	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	DEF	getColumnDimension() != $.getColumnDimension()
700	1117	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getRowDimension() != m.getRowDimension()
700	1117	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getColumnDimension() != m.getColumnDimension()
700	1117	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	DEF	getRowDimension() != $.getRowDimension()
700	1117	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	DEF	getColumnDimension() != $.getColumnDimension()
701	1132	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getColumnDimension() != m.getRowDimension()
701	1132	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	m	FieldMatrix<T>	0	DEF	getColumnDimension() != $.getRowDimension()
336	120	8	AbstractFormat.java	setDenominatorFormat	format	NumberFormat	0	DEF	$ == null
337	134	8	AbstractFormat.java	setNumeratorFormat	format	NumberFormat	0	DEF	$ == null
338	165	9	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
338	165	9	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
39700	167	13	AbstractFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
39700	167	13	AbstractFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
39700	167	13	AbstractFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
339	172	13	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
339	172	13	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
387	80	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	0	DEF	$ > x1
387	80	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	double	0	DEF	x0 > $
388	85	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	1	RET	Math.floor($) < $
389	119	8	AbstractIntegerDistribution.java	probability	fl	double	1	RET	$ == x
389	119	8	AbstractIntegerDistribution.java	probability	x	double	1	RET	fl == $
390	138	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	int	0	DEF	$ > x1
390	138	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	int	0	DEF	x0 > $
391	158	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	DEF	$ < 0.0
391	158	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	DEF	$ > 1.0
39702	168	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	0	NIL-WHILE	$ < x1
39702	168	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	0	NIL-WHILE	x0 < $
392	171	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	1	DEF	$ > p
392	171	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	1	DEF	pm > $
393	173	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x1
393	173	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	1	DEF	xm == $
394	183	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x0
394	183	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	1	DEF	xm == $
39703	196	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	0	NIL-WHILE	$ > p
39703	196	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	pm > $
1597	125	12	AbstractIntegrator.java	requiresDenseOutput	THIS	AbstractIntegrator	0	RET	$.handler.requiresDenseOutput()
1598	180	8	AbstractIntegrator.java	computeDerivatives	THIS	AbstractIntegrator	0	MaxEvaluationsExceededException	++$.evaluations > $.maxEvaluations
1599	199	8	AbstractIntegrator.java	sanityChecks	THIS	AbstractIntegrator	0	IntegratorException	equations.getDimension() != y0.$.length
1599	199	8	AbstractIntegrator.java	sanityChecks	equations	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y0.length
1599	199	8	AbstractIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	equations.getDimension() != $.length
1600	206	8	AbstractIntegrator.java	sanityChecks	THIS	AbstractIntegrator	0	IntegratorException	equations.getDimension() != y.$.length
1600	206	8	AbstractIntegrator.java	sanityChecks	equations	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y.length
1600	206	8	AbstractIntegrator.java	sanityChecks	y	double[]	0	IntegratorException	equations.getDimension() != $.length
1601	213	8	AbstractIntegrator.java	sanityChecks	t0	double	0	IntegratorException	Math.abs(t - $) <= 1.0e-12 * Math.max(Math.abs($), Math.abs(t))
1601	213	8	AbstractIntegrator.java	sanityChecks	t	double	0	IntegratorException	Math.abs($ - t0) <= 1.0e-12 * Math.max(Math.abs(t0), Math.abs($))
1041	166	8	AbstractLeastSquaresOptimizer.java	incrementIterationsCounter	THIS	AbstractLeastSquaresOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
1042	179	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	FunctionEvaluationException	$.jacobian.$.length != $.rows
40683	183	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
40683	183	8	AbstractLeastSquaresOptimizer.java	updateJacobian	i	int	0	NIL-FOR	$ < rows
40684	186	12	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
40684	186	12	AbstractLeastSquaresOptimizer.java	updateJacobian	j	int	0	NIL-FOR	$ < cols
1043	201	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	MaxEvaluationsExceededException	++$.objectiveEvaluations > $.maxEvaluations
1044	206	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	FunctionEvaluationException	$.objective.$.length != $.rows
40685	211	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
40685	211	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	i	int	0	NIL-FOR	$ < rows
40686	232	8	AbstractLeastSquaresOptimizer.java	getRMS	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
40686	232	8	AbstractLeastSquaresOptimizer.java	getRMS	i	int	0	NIL-FOR	$ < rows
40687	245	8	AbstractLeastSquaresOptimizer.java	getChiSquare	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
40687	245	8	AbstractLeastSquaresOptimizer.java	getChiSquare	i	int	0	NIL-FOR	$ < rows
40688	268	8	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.cols
40688	268	8	AbstractLeastSquaresOptimizer.java	getCovariances	i	int	0	NIL-FOR	$ < cols
40689	269	12	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
40689	269	12	AbstractLeastSquaresOptimizer.java	getCovariances	j	int	0	NIL-FOR	$ < cols
40690	271	16	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	k < $.rows
40690	271	16	AbstractLeastSquaresOptimizer.java	getCovariances	k	int	0	NIL-FOR	$ < rows
1045	301	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	OptimizationException	$.rows <= $.cols
40691	309	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < errors.$.length
40691	309	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
40691	309	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
1046	321	8	AbstractLeastSquaresOptimizer.java	optimize	THIS	AbstractLeastSquaresOptimizer	0	OptimizationException	target.$.length != weights.$.length
1046	321	8	AbstractLeastSquaresOptimizer.java	optimize	target	double[]	0	OptimizationException	$.length != weights.length
1046	321	8	AbstractLeastSquaresOptimizer.java	optimize	weights	double[]	0	OptimizationException	target.length != $.length
986	86	8	AbstractLinearOptimizer.java	incrementIterationsCounter	THIS	AbstractLinearOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
40812	51	8	AbstractMultipleLinearRegression.java	newSampleData	i	int	0	NIL-FOR	$ < nobs
40812	51	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NIL-FOR	i < $
40813	54	12	AbstractMultipleLinearRegression.java	newSampleData	j	int	0	NIL-FOR	$ < nvars + 1
40813	54	12	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	NIL-FOR	j < $ + 1
1283	89	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	1	DEF	x.$.length != y.$.length
1283	89	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	1	DEF	$ == null
1283	89	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	1	DEF	$.length != y.length
1283	89	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	1	DEF	$ == null
1283	89	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	1	DEF	x.length != $.length
1284	94	15	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	x[0].length > x.$.length
1284	94	15	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	x.$.length > 0
1284	94	15	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DEF	$[0].length > $.length
1284	94	15	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DEF	$.length > 0
1285	110	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DEF	x.$.length != covariance.$.length
1285	110	8	AbstractMultipleLinearRegression.java	validateCovarianceData	x	double[][]	0	DEF	$.length != covariance.length
1285	110	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DEF	x.length != $.length
1286	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DEF	covariance.$.length != covariance[0].length
1286	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DEF	covariance.$.length > 0
1286	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DEF	$.length != $[0].length
1286	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DEF	$.length > 0
40814	153	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	i	int	0	NIL-FOR	$ < length
40814	153	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	length	int	0	NIL-FOR	i < $
40833	90	8	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	NIL-WHILE	bytesOut < bytes.$.length
40833	90	8	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	NIL-WHILE	$ < bytes.length
40833	90	8	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	bytesOut < $.length
40834	92	10	AbstractRandomGenerator.java	nextBytes	i	int	0	NIL-FOR	$ < 3
1312	93	14	AbstractRandomGenerator.java	nextBytes	i	int	0	DEF	$ > 0
1313	97	14	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	RET	bytesOut == bytes.$.length
1313	97	14	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	RET	$ == bytes.length
1313	97	14	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	RET	bytesOut == $.length
1314	139	8	AbstractRandomGenerator.java	nextInt	n	int	0	DEF	$ <= 0
1315	236	8	AbstractRandomGenerator.java	nextGaussian	THIS	AbstractRandomGenerator	0	RET	Double.isNaN($.cachedNormalDeviate)
40835	244	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	NIL-WHILE	$ >=1
1316	249	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	DEF	$ != 0
603	56	8	AbstractRealMatrix.java	AbstractRealMatrix	rowDimension	int	0	DEF	$ <= 0
604	61	8	AbstractRealMatrix.java	AbstractRealMatrix	columnDimension	int	0	DEF	$ <= 0
40012	85	8	AbstractRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
40012	85	8	AbstractRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
40013	86	12	AbstractRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
40013	86	12	AbstractRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
40014	104	8	AbstractRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
40014	104	8	AbstractRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
40015	105	12	AbstractRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
40015	105	12	AbstractRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
40016	120	8	AbstractRealMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
40016	120	8	AbstractRealMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
40017	121	12	AbstractRealMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
40017	121	12	AbstractRealMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
40018	136	8	AbstractRealMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
40018	136	8	AbstractRealMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
40019	137	12	AbstractRealMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
40019	137	12	AbstractRealMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
40020	157	8	AbstractRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
40020	157	8	AbstractRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
40021	158	12	AbstractRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
40021	158	12	AbstractRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
40022	160	16	AbstractRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
40022	160	16	AbstractRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
40023	182	8	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	i < data.$.length
40023	182	8	AbstractRealMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
40023	182	8	AbstractRealMatrix.java	getData	data	double[][]	0	NIL-FOR	i < $.length
40024	184	12	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	j < dataI.$.length
40024	184	12	AbstractRealMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
40024	184	12	AbstractRealMatrix.java	getData	dataI	double[]	0	NIL-FOR	j < $.length
40025	268	8	AbstractRealMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
40025	268	8	AbstractRealMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
40026	269	12	AbstractRealMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
40026	269	12	AbstractRealMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
605	312	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination.$.length < rowsCount
605	312	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination[0].length < columnsCount
605	312	8	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	DEF	destination.length < $
605	312	8	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	DEF	destination[0].length < $
605	312	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$.length < rowsCount
605	312	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$[0].length < columnsCount
606	353	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination[0].length < selectedColumns.$.length
606	353	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination.$.length < selectedRows.$.length
606	353	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	DEF	destination.length < $.length
606	353	8	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	DEF	destination[0].length < $.length
606	353	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$[0].length < selectedColumns.length
606	353	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$.length < selectedRows.length
40027	362	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	i < selectedRows.$.length
40027	362	8	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
40027	362	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
40028	364	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	j < selectedColumns.$.length
40028	364	12	AbstractRealMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
40028	364	12	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
607	376	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	DEF	$ == 0
608	381	8	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DEF	$ == 0
40029	385	8	AbstractRealMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
40029	385	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
609	386	12	AbstractRealMatrix.java	setSubMatrix	THIS	AbstractRealMatrix	0	DEF	subMatrix[r].length != nCols
609	386	12	AbstractRealMatrix.java	setSubMatrix	r	int	0	DEF	subMatrix[$].length != nCols
609	386	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DEF	subMatrix[r].length != $
609	386	12	AbstractRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DEF	$[r].length != nCols
40030	398	8	AbstractRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
40030	398	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
40031	399	12	AbstractRealMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
40031	399	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
40032	415	8	AbstractRealMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
40032	415	8	AbstractRealMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
610	429	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	InvalidMatrixException	matrix.getColumnDimension() != $
610	429	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getColumnDimension() != nCols
610	429	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getRowDimension() != 1
40033	435	8	AbstractRealMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
40033	435	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
40034	448	8	AbstractRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
40034	448	8	AbstractRealMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
611	462	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	InvalidMatrixException	matrix.getRowDimension() != $
611	462	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getColumnDimension() != 1
611	462	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getRowDimension() != nRows
40035	468	8	AbstractRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
40035	468	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
612	486	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	InvalidMatrixException	vector.getDimension() != $
612	486	8	AbstractRealMatrix.java	setRowVector	vector	RealVector	0	InvalidMatrixException	$.getDimension() != nCols
40036	491	8	AbstractRealMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
40036	491	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
613	509	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	InvalidMatrixException	vector.getDimension() != $
613	509	8	AbstractRealMatrix.java	setColumnVector	vector	RealVector	0	InvalidMatrixException	$.getDimension() != nRows
40037	514	8	AbstractRealMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
40037	514	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
40038	527	8	AbstractRealMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
40038	527	8	AbstractRealMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
614	541	8	AbstractRealMatrix.java	setRow	THIS	AbstractRealMatrix	0	InvalidMatrixException	array.$.length != nCols
614	541	8	AbstractRealMatrix.java	setRow	nCols	int	0	InvalidMatrixException	array.length != $
614	541	8	AbstractRealMatrix.java	setRow	array	double[]	0	InvalidMatrixException	$.length != nCols
40039	546	8	AbstractRealMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
40039	546	8	AbstractRealMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
40040	559	8	AbstractRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
40040	559	8	AbstractRealMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
615	573	8	AbstractRealMatrix.java	setColumn	THIS	AbstractRealMatrix	0	InvalidMatrixException	array.$.length != nRows
615	573	8	AbstractRealMatrix.java	setColumn	nRows	int	0	InvalidMatrixException	array.length != $
615	573	8	AbstractRealMatrix.java	setColumn	array	double[]	0	InvalidMatrixException	$.length != nRows
40041	578	8	AbstractRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
40041	578	8	AbstractRealMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
616	624	8	AbstractRealMatrix.java	inverse	THIS	AbstractRealMatrix	0	DEF	$.lu == null
617	645	8	AbstractRealMatrix.java	isSingular	THIS	AbstractRealMatrix	0	DEF	$.lu == null
618	662	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
618	662	8	AbstractRealMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
40042	666	8	AbstractRealMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
40042	666	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
619	678	8	AbstractRealMatrix.java	operate	THIS	AbstractRealMatrix	0	DEF	v.$.length != nCols
619	678	8	AbstractRealMatrix.java	operate	nCols	int	0	DEF	v.length != $
619	678	8	AbstractRealMatrix.java	operate	v	double[]	0	DEF	$.length != nCols
40043	685	8	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
40043	685	8	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
40044	687	12	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
40044	687	12	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
620	705	12	AbstractRealMatrix.java	operate	nCols	int	0	DEF	v.getDimension() != $
620	705	12	AbstractRealMatrix.java	operate	v	RealVector	0	DEF	$.getDimension() != nCols
40045	712	12	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
40045	712	12	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
40046	714	16	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
40046	714	16	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
621	730	8	AbstractRealMatrix.java	preMultiply	THIS	AbstractRealMatrix	0	DEF	v.$.length != nRows
621	730	8	AbstractRealMatrix.java	preMultiply	nRows	int	0	DEF	v.length != $
621	730	8	AbstractRealMatrix.java	preMultiply	v	double[]	0	DEF	$.length != nRows
40047	737	8	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
40047	737	8	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
40048	739	12	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
40048	739	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
622	758	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	DEF	v.getDimension() != $
622	758	12	AbstractRealMatrix.java	preMultiply	v	RealVector	0	DEF	$.getDimension() != nRows
40049	765	12	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
40049	765	12	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
40050	767	16	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
40050	767	16	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
40051	784	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
40051	784	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
40052	785	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
40052	785	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
40053	801	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
40053	801	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
40054	802	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
40054	802	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
40055	817	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
40055	817	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
40056	818	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
40056	818	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
40057	836	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
40057	836	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
40058	837	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
40058	837	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
40059	850	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
40059	850	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
40060	851	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
40060	851	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
40061	867	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
40061	867	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
40062	868	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
40062	868	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
40063	883	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
40063	883	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
40064	884	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
40064	884	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
40065	902	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
40065	902	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
40066	903	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
40066	903	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
623	942	8	AbstractRealMatrix.java	solve	THIS	AbstractRealMatrix	0	DEF	$.lu == null
624	952	8	AbstractRealMatrix.java	solve	THIS	AbstractRealMatrix	0	DEF	$.lu == null
625	980	8	AbstractRealMatrix.java	luDecompose	THIS	AbstractRealMatrix	0	DEF	$.lu == null
40067	998	8	AbstractRealMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
40067	998	8	AbstractRealMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
626	999	12	AbstractRealMatrix.java	toString	i	int	0	DEF	$ > 0
40068	1003	12	AbstractRealMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
40068	1003	12	AbstractRealMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
627	1004	16	AbstractRealMatrix.java	toString	j	int	0	DEF	$ > 0
628	1027	8	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	object == $
628	1027	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ == this
629	1030	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ instanceof RealMatrix == false
630	1036	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getColumnDimension() != nCols
630	1036	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getRowDimension() != nRows
630	1036	8	AbstractRealMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
630	1036	8	AbstractRealMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
40069	1039	8	AbstractRealMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
40069	1039	8	AbstractRealMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
40070	1040	12	AbstractRealMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
40070	1040	12	AbstractRealMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
631	1041	16	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	$.getEntry(row, col) != m.getEntry(row, col)
631	1041	16	AbstractRealMatrix.java	equals	col	int	0	RET	getEntry(row, $) != m.getEntry(row, $)
631	1041	16	AbstractRealMatrix.java	equals	row	int	0	RET	getEntry($, col) != m.getEntry($, col)
631	1041	16	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	getEntry(row, col) != $.getEntry(row, col)
40071	1061	8	AbstractRealMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
40071	1061	8	AbstractRealMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
40072	1062	12	AbstractRealMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
40072	1062	12	AbstractRealMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
1058	136	8	AbstractScalarDifferentiableOptimizer.java	incrementIterationsCounter	THIS	AbstractScalarDifferentiableOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
1059	163	8	AbstractScalarDifferentiableOptimizer.java	computeObjectiveValue	THIS	AbstractScalarDifferentiableOptimizer	0	MaxEvaluationsExceededException	++$.evaluations > $.maxEvaluations
1457	150	4	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	1	DEF	interpolator.$.currentState != null
1457	150	4	AbstractStepInterpolator.java	AbstractStepInterpolator	interpolator	AbstractStepInterpolator	1	DEF	$.currentState != null
1458	274	6	AbstractStepInterpolator.java	getInterpolatedState	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
1459	289	6	AbstractStepInterpolator.java	getInterpolatedDerivatives	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
1460	343	4	AbstractStepInterpolator.java	finalizeStep	THIS	AbstractStepInterpolator	0	DEF	$.finalized
1461	376	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	1	DEF	$.currentState == null
1462	386	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	DEF	$.currentState != null
40956	387	8	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
40956	387	8	AbstractStepInterpolator.java	writeBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
1463	425	4	AbstractStepInterpolator.java	readBaseExternal	dimension	int	1	DEF	$ < 0
40957	429	8	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
40957	429	8	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
1093	57	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	$ == null
1094	86	8	AbstractStorelessUnivariateStatistic.java	evaluate	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
1094	86	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1094	86	8	AbstractStorelessUnivariateStatistic.java	evaluate	begin	int	0	DEF	test(values, $, length)
1094	86	8	AbstractStorelessUnivariateStatistic.java	evaluate	length	int	0	DEF	test(values, begin, $)
1095	125	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	$ == null
1096	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
1096	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	test($, begin, length)
1096	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	begin	int	0	DEF	test(values, $, length)
1096	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	length	int	0	DEF	test(values, begin, $)
40736	146	12	AbstractStorelessUnivariateStatistic.java	incrementAll	i	int	0	NIL-FOR	$ < k
40736	146	12	AbstractStorelessUnivariateStatistic.java	incrementAll	k	int	0	NIL-FOR	i < $
1097	161	8	AbstractStorelessUnivariateStatistic.java	equals	THIS	AbstractStorelessUnivariateStatistic	0	RET	object == $
1097	161	8	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ == this
1098	164	7	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ instanceof AbstractStorelessUnivariateStatistic == false
964	71	8	AbstractUnivariateRealOptimizer.java	checkResultComputed	THIS	AbstractUnivariateRealOptimizer	0	DEF	$.resultComputed
965	148	8	AbstractUnivariateRealOptimizer.java	computeObjectiveValue	THIS	AbstractUnivariateRealOptimizer	0	MaxEvaluationsExceededException	++$.evaluations > $.maxEvaluations
1195	79	8	AbstractUnivariateStatistic.java	test	values	double[]	0	DEF	$ == null
1196	83	8	AbstractUnivariateStatistic.java	test	begin	int	0	DEF	$ < 0
1197	88	8	AbstractUnivariateStatistic.java	test	length	int	0	DEF	$ < 0
1198	93	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	DEF	begin + length > values.$.length
1198	93	8	AbstractUnivariateStatistic.java	test	values	double[]	0	DEF	begin + length > $.length
1198	93	8	AbstractUnivariateStatistic.java	test	begin	int	0	DEF	$ + length > values.length
1198	93	8	AbstractUnivariateStatistic.java	test	length	int	0	DEF	begin + $ > values.length
1199	98	8	AbstractUnivariateStatistic.java	test	length	int	0	RET	$ == 0
1546	197	8	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1546	197	8	AdamsBashforthIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
41012	226	8	AdamsBashforthIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
41013	232	12	AdamsBashforthIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
41014	238	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	i < y0.$.length
41014	238	16	AdamsBashforthIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
41014	238	16	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
1547	248	16	AdamsBashforthIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
41015	260	20	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	j < y0.$.length
41015	260	20	AdamsBashforthIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
41015	260	20	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
1548	271	20	AdamsBashforthIntegrator.java	integrate	interpolatorTmp	NordsieckStepInterpolator	1	DEF	manager.evaluateStep($)
1548	271	20	AdamsBashforthIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolatorTmp)
1549	273	24	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	1	DEF	Math.abs(dt) <= Math.ulp($.stepStart)
1549	273	24	AdamsBashforthIntegrator.java	integrate	dt	double	1	DEF	Math.abs($) <= Math.ulp(stepStart)
1550	312	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	manager.reset($.stepStart, y)
1550	312	12	AdamsBashforthIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1550	312	12	AdamsBashforthIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1550	312	12	AdamsBashforthIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1551	321	12	AdamsBashforthIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1540	215	8	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1540	215	8	AdamsMoultonIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
41008	243	8	AdamsMoultonIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
41009	249	12	AdamsMoultonIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
41010	263	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
41010	263	16	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
41010	263	16	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
1541	272	16	AdamsMoultonIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
41011	279	20	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
41011	279	20	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
41011	279	20	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
1542	289	20	AdamsMoultonIntegrator.java	integrate	interpolatorTmp	NordsieckStepInterpolator	1	DEF	manager.evaluateStep($)
1542	289	20	AdamsMoultonIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolatorTmp)
1543	291	24	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	1	DEF	Math.abs(dt) <= Math.ulp($.stepStart)
1543	291	24	AdamsMoultonIntegrator.java	integrate	dt	double	1	DEF	Math.abs($) <= Math.ulp(stepStart)
1544	330	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	manager.reset($.stepStart, y)
1544	330	12	AdamsMoultonIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1544	330	12	AdamsMoultonIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1544	330	12	AdamsMoultonIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1545	339	12	AdamsMoultonIntegrator.java	integrate	lastStep	boolean	0	DEF	$
41066	167	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ > 0
41067	191	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ < nSteps
41067	191	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	nSteps	int	0	NIL-FOR	i < $
1596	205	12	AdamsNordsieckTransformer.java	getInstance	t	AdamsNordsieckTransformer	0	DEF	$ == null
41068	239	8	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < pData.$.length
41068	239	8	AdamsNordsieckTransformer.java	buildP	i	int	0	NIL-FOR	$ < pData.length
41068	239	8	AdamsNordsieckTransformer.java	buildP	pData	BigFraction[][]	0	NIL-FOR	i < $.length
41069	244	12	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < pI.$.length
41069	244	12	AdamsNordsieckTransformer.java	buildP	j	int	0	NIL-FOR	$ < pI.length
41069	244	12	AdamsNordsieckTransformer.java	buildP	pI	BigFraction[]	0	NIL-FOR	j < $.length
41070	262	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < multistep.$.length
41070	262	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	i	int	0	NIL-FOR	$ < multistep.length
41070	262	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	multistep	double[][]	0	NIL-FOR	i < $.length
41071	264	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < first.$.length
41071	264	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < first.length
41071	264	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	first	double[]	0	NIL-FOR	j < $.length
41072	303	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < data.$.length
41072	303	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	i	int	0	NIL-FOR	$ < data.length
41072	303	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	data	double[][]	0	NIL-FOR	i < $.length
41073	306	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < dataI.$.length
41073	306	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	j	int	0	NIL-FOR	$ < dataI.length
41073	306	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	dataI	double[]	0	NIL-FOR	j < $.length
1579	130	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize > $.maxStep
1579	130	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize < $.minStep
1579	130	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ > maxStep
1579	130	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ < minStep
1580	153	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecAbsoluteTolerance.$.length != y0.$.length
1580	153	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecAbsoluteTolerance != null
1580	153	6	AdaptiveStepsizeIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	vecAbsoluteTolerance.length != $.length
1581	160	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecRelativeTolerance != null
1581	160	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecRelativeTolerance.$.length != y0.$.length
1581	160	6	AdaptiveStepsizeIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	vecRelativeTolerance.length != $.length
1582	189	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	RET	$.initialStep > 0
41054	199	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
41054	199	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
41054	199	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
1583	208	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
41055	213	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
41055	213	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
41055	213	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
41056	220	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
41056	220	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
41056	220	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
1584	234	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < $.getMinStep()
1584	234	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ < getMinStep()
1585	237	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h > $.getMaxStep()
1585	237	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ > getMaxStep()
1586	240	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
1587	261	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	Math.abs(h) < $.minStep
1587	261	6	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	IntegratorException	Math.abs($) < minStep
1588	262	10	AdaptiveStepsizeIntegrator.java	filterStep	acceptSmall	boolean	1	DEF	$
1589	271	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	1	DEF	filteredH > $.maxStep
1589	271	6	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	1	DEF	$ > maxStep
1590	273	13	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	filteredH < -$.maxStep
1590	273	13	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	0	DEF	$ < -maxStep
1202	217	8	AggregateSummaryStatistics.java	aggregate	statistics	Collection<SummaryStatistics>	0	RET	$ == null
1203	221	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	RET	$.hasNext()
40755	231	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	NIL-WHILE	$.hasNext()
1204	233	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMin() < min
1204	233	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	current.getMin() < $
1204	233	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	Double.isNaN($)
1205	236	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMax() > max
1205	236	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	Double.isNaN($)
1205	236	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	current.getMax() > $
1206	248	8	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 0
1207	250	15	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 1
652	106	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	copyArray	boolean	1	DEF	$
653	109	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	d	T[][]	0	NullPointerException	$ == null
654	113	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	DEF	$ == 0
655	117	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	DEF	$ == 0
40101	120	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	NIL-FOR	$ < nRows
40101	120	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	r < $
656	121	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	THIS	Array2DRowFieldMatrix	0	DEF	d[r].length != nCols
656	121	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	DEF	d[$].length != nCols
656	121	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	DEF	d[r].length != $
656	121	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	d	T[][]	0	DEF	$[r].length != nCols
40102	143	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	row	int	0	NIL-FOR	$ < nRows
40102	143	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	row < $
40103	188	8	Array2DRowFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
40103	188	8	Array2DRowFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
40104	192	12	Array2DRowFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
40104	192	12	Array2DRowFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
40105	228	8	Array2DRowFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
40105	228	8	Array2DRowFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
40106	232	12	Array2DRowFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
40106	232	12	Array2DRowFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
40107	269	8	Array2DRowFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
40107	269	8	Array2DRowFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
40108	272	12	Array2DRowFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
40108	272	12	Array2DRowFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
40109	274	16	Array2DRowFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
40109	274	16	Array2DRowFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
657	306	8	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	1	DEF	$.data == null
658	307	12	Array2DRowFieldMatrix.java	setSubMatrix	row	int	0	DEF	$ > 0
659	312	12	Array2DRowFieldMatrix.java	setSubMatrix	column	int	0	DEF	$ > 0
660	318	12	Array2DRowFieldMatrix.java	setSubMatrix	nRows	int	0	DEF	$ == 0
661	323	12	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	DEF	$ == 0
40110	327	12	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	NIL-FOR	i < $.data.$.length
40110	327	12	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
662	328	16	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	DEF	subMatrix[i].length != nCols
662	328	16	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	DEF	subMatrix[$].length != nCols
662	328	16	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	DEF	subMatrix[i].length != $
662	328	16	Array2DRowFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DEF	$[i].length != nCols
663	411	8	Array2DRowFieldMatrix.java	operate	THIS	Array2DRowFieldMatrix	0	DEF	v.$.length != nCols
663	411	8	Array2DRowFieldMatrix.java	operate	nCols	int	0	DEF	v.length != $
663	411	8	Array2DRowFieldMatrix.java	operate	v	T[]	0	DEF	$.length != nCols
40111	417	8	Array2DRowFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
40111	417	8	Array2DRowFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
40112	420	12	Array2DRowFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
40112	420	12	Array2DRowFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
664	435	8	Array2DRowFieldMatrix.java	preMultiply	THIS	Array2DRowFieldMatrix	0	DEF	v.$.length != nRows
664	435	8	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	DEF	v.length != $
664	435	8	Array2DRowFieldMatrix.java	preMultiply	v	T[]	0	DEF	$.length != nRows
40113	442	8	Array2DRowFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
40113	442	8	Array2DRowFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
40114	444	12	Array2DRowFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
40114	444	12	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
40115	461	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
40115	461	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
40116	463	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
40116	463	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
40117	477	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
40117	477	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
40118	479	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
40118	479	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
40119	495	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
40119	495	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
40120	497	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
40120	497	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
40121	513	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
40121	513	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
40122	515	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
40122	515	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
40123	529	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
40123	529	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
40124	530	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
40124	530	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
40125	545	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
40125	545	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
40126	546	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
40126	546	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
40127	562	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
40127	562	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
40128	563	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
40128	563	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
40129	580	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
40129	580	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
40130	581	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
40130	581	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
40131	597	8	Array2DRowFieldMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
40131	597	8	Array2DRowFieldMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
782	115	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	copyArray	boolean	1	DEF	$
783	118	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	NullPointerException	$ == null
784	122	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	DEF	$ == 0
785	126	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	DEF	$ == 0
40411	129	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	NIL-FOR	$ < nRows
40411	129	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	r < $
786	130	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	THIS	Array2DRowRealMatrix	0	DEF	d[r].length != nCols
786	130	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	DEF	d[$].length != nCols
786	130	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	DEF	d[r].length != $
786	130	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	DEF	$[r].length != nCols
40412	151	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	row	int	0	NIL-FOR	$ < nRows
40412	151	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	row < $
40413	196	8	Array2DRowRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
40413	196	8	Array2DRowRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
40414	200	12	Array2DRowRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
40414	200	12	Array2DRowRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
40415	236	8	Array2DRowRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
40415	236	8	Array2DRowRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
40416	240	12	Array2DRowRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
40416	240	12	Array2DRowRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
40417	277	8	Array2DRowRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
40417	277	8	Array2DRowRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
40418	280	12	Array2DRowRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
40418	280	12	Array2DRowRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
40419	282	16	Array2DRowRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
40419	282	16	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
787	314	8	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	1	DEF	$.data == null
788	315	12	Array2DRowRealMatrix.java	setSubMatrix	row	int	0	DEF	$ > 0
789	320	12	Array2DRowRealMatrix.java	setSubMatrix	column	int	0	DEF	$ > 0
790	326	12	Array2DRowRealMatrix.java	setSubMatrix	nRows	int	0	DEF	$ == 0
791	331	12	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	DEF	$ == 0
40420	335	12	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	NIL-FOR	i < $.data.$.length
40420	335	12	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
792	336	16	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	DEF	subMatrix[i].length != nCols
792	336	16	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	DEF	subMatrix[$].length != nCols
792	336	16	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	DEF	subMatrix[i].length != $
792	336	16	Array2DRowRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DEF	$[i].length != nCols
793	419	8	Array2DRowRealMatrix.java	operate	THIS	Array2DRowRealMatrix	0	DEF	v.$.length != nCols
793	419	8	Array2DRowRealMatrix.java	operate	nCols	int	0	DEF	v.length != $
793	419	8	Array2DRowRealMatrix.java	operate	v	double[]	0	DEF	$.length != nCols
40421	425	8	Array2DRowRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
40421	425	8	Array2DRowRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
40422	428	12	Array2DRowRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
40422	428	12	Array2DRowRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
794	443	8	Array2DRowRealMatrix.java	preMultiply	THIS	Array2DRowRealMatrix	0	DEF	v.$.length != nRows
794	443	8	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	DEF	v.length != $
794	443	8	Array2DRowRealMatrix.java	preMultiply	v	double[]	0	DEF	$.length != nRows
40423	450	8	Array2DRowRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
40423	450	8	Array2DRowRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
40424	452	12	Array2DRowRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
40424	452	12	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
40425	469	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
40425	469	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
40426	471	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
40426	471	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
40427	485	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
40427	485	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
40428	487	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
40428	487	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
40429	503	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
40429	503	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
40430	505	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
40430	505	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
40431	521	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
40431	521	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
40432	523	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
40432	523	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
40433	537	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
40433	537	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
40434	538	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
40434	538	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
40435	553	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
40435	553	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
40436	554	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
40436	554	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
40437	570	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
40437	570	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
40438	571	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
40438	571	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
40439	588	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
40439	588	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
40440	589	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
40440	589	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
40441	605	8	Array2DRowRealMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
40441	605	8	Array2DRowRealMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
933	136	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	DEF	d.$.length < pos + size
933	136	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	DEF	$.length < pos + size
933	136	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	DEF	d.length < $ + size
933	136	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	DEF	d.length < pos + $
40570	153	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40570	153	8	ArrayFieldVector.java	ArrayFieldVector	i	int	0	NIL-FOR	$ < data.length
40571	248	12	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40571	248	12	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
40572	259	8	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40572	259	8	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
40573	283	12	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40573	283	12	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
40574	294	8	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40574	294	8	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
40575	314	8	ArrayFieldVector.java	mapAdd	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40575	314	8	ArrayFieldVector.java	mapAdd	i	int	0	NIL-FOR	$ < data.length
40576	322	8	ArrayFieldVector.java	mapAddToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40576	322	8	ArrayFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
40577	331	8	ArrayFieldVector.java	mapSubtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40577	331	8	ArrayFieldVector.java	mapSubtract	i	int	0	NIL-FOR	$ < data.length
40578	339	8	ArrayFieldVector.java	mapSubtractToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40578	339	8	ArrayFieldVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
40579	348	8	ArrayFieldVector.java	mapMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40579	348	8	ArrayFieldVector.java	mapMultiply	i	int	0	NIL-FOR	$ < data.length
40580	356	8	ArrayFieldVector.java	mapMultiplyToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40580	356	8	ArrayFieldVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
40581	365	8	ArrayFieldVector.java	mapDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40581	365	8	ArrayFieldVector.java	mapDivide	i	int	0	NIL-FOR	$ < data.length
40582	373	8	ArrayFieldVector.java	mapDivideToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40582	373	8	ArrayFieldVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
40583	383	8	ArrayFieldVector.java	mapInv	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40583	383	8	ArrayFieldVector.java	mapInv	i	int	0	NIL-FOR	$ < data.length
40584	392	8	ArrayFieldVector.java	mapInvToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40584	392	8	ArrayFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
40585	406	12	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40585	406	12	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
40586	418	8	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40586	418	8	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
40587	443	12	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40587	443	12	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
40588	455	8	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40588	455	8	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
40589	494	12	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40589	494	12	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
40590	506	8	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40590	506	8	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
40591	551	12	ArrayFieldVector.java	outerProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40591	551	12	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
40592	552	16	ArrayFieldVector.java	outerProduct	THIS	ArrayFieldVector	0	NIL-FOR	j < $.data.$.length
40592	552	16	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
40593	577	8	ArrayFieldVector.java	outerProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40593	577	8	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
40594	578	12	ArrayFieldVector.java	outerProduct	THIS	ArrayFieldVector	0	NIL-FOR	j < $.data.$.length
40594	578	12	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
40595	653	16	ArrayFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
40595	653	16	ArrayFieldVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
40595	653	16	ArrayFieldVector.java	setSubVector	v	FieldVector<T>	0	NIL-FOR	i < index + $.getDimension()
934	716	8	ArrayFieldVector.java	checkVectorDimensions	THIS	ArrayFieldVector	0	DEF	$.data.$.length != n
934	716	8	ArrayFieldVector.java	checkVectorDimensions	n	int	0	DEF	data.length != $
935	746	6	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$ == other
935	746	6	ArrayFieldVector.java	equals	other	Object	0	RET	this == $
936	750	6	ArrayFieldVector.java	equals	other	Object	0	RET	$ == null
937	757	10	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data.$.length != rhs.getDimension()
937	757	10	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data.length != $.getDimension()
40596	761	10	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
40596	761	10	ArrayFieldVector.java	equals	i	int	0	NIL-FOR	$ < data.length
938	762	14	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data[i].equals(rhs.getEntry(i))
938	762	14	ArrayFieldVector.java	equals	i	int	0	RET	data[$].equals(rhs.getEntry($))
938	762	14	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data[i].equals($.getEntry(i))
939	796	8	ArrayFieldVector.java	checkIndex	THIS	ArrayFieldVector	0	MatrixIndexException	index >= $.getDimension()
939	796	8	ArrayFieldVector.java	checkIndex	index	int	0	MatrixIndexException	$ < 0
939	796	8	ArrayFieldVector.java	checkIndex	index	int	0	MatrixIndexException	$ >= getDimension()
521	97	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullPointerException	$ == null
522	100	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	DEF	d.$.length == 0
522	100	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	DEF	$.length == 0
523	113	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	DEF	d.$.length < pos + size
523	113	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	DEF	$.length < pos + size
523	113	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	DEF	d.length < $ + size
523	113	8	ArrayRealVector.java	ArrayRealVector	size	int	0	DEF	d.length < pos + $
39828	128	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < d.$.length
39828	128	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < d.length
39828	128	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NIL-FOR	i < $.length
524	140	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	DEF	d.$.length < pos + size
524	140	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	DEF	$.length < pos + size
524	140	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	DEF	d.length < $ + size
524	140	8	ArrayRealVector.java	ArrayRealVector	size	int	0	DEF	d.length < pos + $
39829	146	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < pos + size
39829	146	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NIL-FOR	i < $ + size
39829	146	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NIL-FOR	i < pos + $
39830	157	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39830	157	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < data.length
39831	236	12	ArrayRealVector.java	add	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39831	236	12	ArrayRealVector.java	add	i	int	0	NIL-FOR	$ < data.length
39832	248	8	ArrayRealVector.java	add	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39832	248	8	ArrayRealVector.java	add	i	int	0	NIL-FOR	$ < data.length
39833	273	12	ArrayRealVector.java	subtract	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39833	273	12	ArrayRealVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
39834	285	8	ArrayRealVector.java	subtract	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39834	285	8	ArrayRealVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
39835	305	8	ArrayRealVector.java	mapAdd	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39835	305	8	ArrayRealVector.java	mapAdd	i	int	0	NIL-FOR	$ < data.length
39836	313	8	ArrayRealVector.java	mapAddToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39836	313	8	ArrayRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
39837	322	8	ArrayRealVector.java	mapSubtract	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39837	322	8	ArrayRealVector.java	mapSubtract	i	int	0	NIL-FOR	$ < data.length
39838	330	8	ArrayRealVector.java	mapSubtractToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39838	330	8	ArrayRealVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
39839	339	8	ArrayRealVector.java	mapMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39839	339	8	ArrayRealVector.java	mapMultiply	i	int	0	NIL-FOR	$ < data.length
39840	347	8	ArrayRealVector.java	mapMultiplyToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39840	347	8	ArrayRealVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
39841	356	8	ArrayRealVector.java	mapDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39841	356	8	ArrayRealVector.java	mapDivide	i	int	0	NIL-FOR	$ < data.length
39842	364	8	ArrayRealVector.java	mapDivideToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39842	364	8	ArrayRealVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
39843	373	8	ArrayRealVector.java	mapPow	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39843	373	8	ArrayRealVector.java	mapPow	i	int	0	NIL-FOR	$ < data.length
39844	381	8	ArrayRealVector.java	mapPowToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39844	381	8	ArrayRealVector.java	mapPowToSelf	i	int	0	NIL-FOR	$ < data.length
39845	390	8	ArrayRealVector.java	mapExp	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39845	390	8	ArrayRealVector.java	mapExp	i	int	0	NIL-FOR	$ < data.length
39846	398	8	ArrayRealVector.java	mapExpToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39846	398	8	ArrayRealVector.java	mapExpToSelf	i	int	0	NIL-FOR	$ < data.length
39847	407	8	ArrayRealVector.java	mapExpm1	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39847	407	8	ArrayRealVector.java	mapExpm1	i	int	0	NIL-FOR	$ < data.length
39848	415	8	ArrayRealVector.java	mapExpm1ToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39848	415	8	ArrayRealVector.java	mapExpm1ToSelf	i	int	0	NIL-FOR	$ < data.length
39849	424	8	ArrayRealVector.java	mapLog	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39849	424	8	ArrayRealVector.java	mapLog	i	int	0	NIL-FOR	$ < data.length
39850	432	8	ArrayRealVector.java	mapLogToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39850	432	8	ArrayRealVector.java	mapLogToSelf	i	int	0	NIL-FOR	$ < data.length
39851	441	8	ArrayRealVector.java	mapLog10	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39851	441	8	ArrayRealVector.java	mapLog10	i	int	0	NIL-FOR	$ < data.length
39852	449	8	ArrayRealVector.java	mapLog10ToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39852	449	8	ArrayRealVector.java	mapLog10ToSelf	i	int	0	NIL-FOR	$ < data.length
39853	458	8	ArrayRealVector.java	mapLog1p	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39853	458	8	ArrayRealVector.java	mapLog1p	i	int	0	NIL-FOR	$ < data.length
39854	466	8	ArrayRealVector.java	mapLog1pToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39854	466	8	ArrayRealVector.java	mapLog1pToSelf	i	int	0	NIL-FOR	$ < data.length
39855	475	8	ArrayRealVector.java	mapCosh	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39855	475	8	ArrayRealVector.java	mapCosh	i	int	0	NIL-FOR	$ < data.length
39856	483	8	ArrayRealVector.java	mapCoshToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39856	483	8	ArrayRealVector.java	mapCoshToSelf	i	int	0	NIL-FOR	$ < data.length
39857	492	8	ArrayRealVector.java	mapSinh	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39857	492	8	ArrayRealVector.java	mapSinh	i	int	0	NIL-FOR	$ < data.length
39858	500	8	ArrayRealVector.java	mapSinhToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39858	500	8	ArrayRealVector.java	mapSinhToSelf	i	int	0	NIL-FOR	$ < data.length
39859	509	8	ArrayRealVector.java	mapTanh	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39859	509	8	ArrayRealVector.java	mapTanh	i	int	0	NIL-FOR	$ < data.length
39860	517	8	ArrayRealVector.java	mapTanhToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39860	517	8	ArrayRealVector.java	mapTanhToSelf	i	int	0	NIL-FOR	$ < data.length
39861	526	8	ArrayRealVector.java	mapCos	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39861	526	8	ArrayRealVector.java	mapCos	i	int	0	NIL-FOR	$ < data.length
39862	534	8	ArrayRealVector.java	mapCosToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39862	534	8	ArrayRealVector.java	mapCosToSelf	i	int	0	NIL-FOR	$ < data.length
39863	543	8	ArrayRealVector.java	mapSin	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39863	543	8	ArrayRealVector.java	mapSin	i	int	0	NIL-FOR	$ < data.length
39864	551	8	ArrayRealVector.java	mapSinToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39864	551	8	ArrayRealVector.java	mapSinToSelf	i	int	0	NIL-FOR	$ < data.length
39865	560	8	ArrayRealVector.java	mapTan	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39865	560	8	ArrayRealVector.java	mapTan	i	int	0	NIL-FOR	$ < data.length
39866	568	8	ArrayRealVector.java	mapTanToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39866	568	8	ArrayRealVector.java	mapTanToSelf	i	int	0	NIL-FOR	$ < data.length
39867	577	8	ArrayRealVector.java	mapAcos	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39867	577	8	ArrayRealVector.java	mapAcos	i	int	0	NIL-FOR	$ < data.length
39868	585	8	ArrayRealVector.java	mapAcosToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39868	585	8	ArrayRealVector.java	mapAcosToSelf	i	int	0	NIL-FOR	$ < data.length
39869	594	8	ArrayRealVector.java	mapAsin	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39869	594	8	ArrayRealVector.java	mapAsin	i	int	0	NIL-FOR	$ < data.length
39870	602	8	ArrayRealVector.java	mapAsinToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39870	602	8	ArrayRealVector.java	mapAsinToSelf	i	int	0	NIL-FOR	$ < data.length
39871	611	8	ArrayRealVector.java	mapAtan	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39871	611	8	ArrayRealVector.java	mapAtan	i	int	0	NIL-FOR	$ < data.length
39872	619	8	ArrayRealVector.java	mapAtanToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39872	619	8	ArrayRealVector.java	mapAtanToSelf	i	int	0	NIL-FOR	$ < data.length
39873	628	8	ArrayRealVector.java	mapInv	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39873	628	8	ArrayRealVector.java	mapInv	i	int	0	NIL-FOR	$ < data.length
39874	636	8	ArrayRealVector.java	mapInvToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39874	636	8	ArrayRealVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
39875	645	8	ArrayRealVector.java	mapAbs	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39875	645	8	ArrayRealVector.java	mapAbs	i	int	0	NIL-FOR	$ < data.length
39876	653	8	ArrayRealVector.java	mapAbsToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39876	653	8	ArrayRealVector.java	mapAbsToSelf	i	int	0	NIL-FOR	$ < data.length
39877	662	8	ArrayRealVector.java	mapSqrt	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39877	662	8	ArrayRealVector.java	mapSqrt	i	int	0	NIL-FOR	$ < data.length
39878	670	8	ArrayRealVector.java	mapSqrtToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39878	670	8	ArrayRealVector.java	mapSqrtToSelf	i	int	0	NIL-FOR	$ < data.length
39879	679	8	ArrayRealVector.java	mapCbrt	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39879	679	8	ArrayRealVector.java	mapCbrt	i	int	0	NIL-FOR	$ < data.length
39880	687	8	ArrayRealVector.java	mapCbrtToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39880	687	8	ArrayRealVector.java	mapCbrtToSelf	i	int	0	NIL-FOR	$ < data.length
39881	696	8	ArrayRealVector.java	mapCeil	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39881	696	8	ArrayRealVector.java	mapCeil	i	int	0	NIL-FOR	$ < data.length
39882	704	8	ArrayRealVector.java	mapCeilToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39882	704	8	ArrayRealVector.java	mapCeilToSelf	i	int	0	NIL-FOR	$ < data.length
39883	713	8	ArrayRealVector.java	mapFloor	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39883	713	8	ArrayRealVector.java	mapFloor	i	int	0	NIL-FOR	$ < data.length
39884	721	8	ArrayRealVector.java	mapFloorToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39884	721	8	ArrayRealVector.java	mapFloorToSelf	i	int	0	NIL-FOR	$ < data.length
39885	730	8	ArrayRealVector.java	mapRint	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39885	730	8	ArrayRealVector.java	mapRint	i	int	0	NIL-FOR	$ < data.length
39886	738	8	ArrayRealVector.java	mapRintToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39886	738	8	ArrayRealVector.java	mapRintToSelf	i	int	0	NIL-FOR	$ < data.length
39887	747	8	ArrayRealVector.java	mapSignum	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39887	747	8	ArrayRealVector.java	mapSignum	i	int	0	NIL-FOR	$ < data.length
39888	755	8	ArrayRealVector.java	mapSignumToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39888	755	8	ArrayRealVector.java	mapSignumToSelf	i	int	0	NIL-FOR	$ < data.length
39889	764	8	ArrayRealVector.java	mapUlp	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39889	764	8	ArrayRealVector.java	mapUlp	i	int	0	NIL-FOR	$ < data.length
39890	772	8	ArrayRealVector.java	mapUlpToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39890	772	8	ArrayRealVector.java	mapUlpToSelf	i	int	0	NIL-FOR	$ < data.length
39891	786	12	ArrayRealVector.java	ebeMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39891	786	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
39892	798	8	ArrayRealVector.java	ebeMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39892	798	8	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
39893	823	12	ArrayRealVector.java	ebeDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39893	823	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
39894	835	8	ArrayRealVector.java	ebeDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39894	835	8	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
39895	874	12	ArrayRealVector.java	dotProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39895	874	12	ArrayRealVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
39896	886	8	ArrayRealVector.java	dotProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39896	886	8	ArrayRealVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
39897	938	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39897	938	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
39898	951	8	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39898	951	8	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
39899	984	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39899	984	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
39900	997	8	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39900	997	8	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
39901	1030	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39901	1030	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
39902	1043	8	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39902	1043	8	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
525	1071	8	ArrayRealVector.java	unitVector	norm	double	0	DEF	$ == 0
526	1080	8	ArrayRealVector.java	unitize	norm	double	0	DEF	$ == 0
39903	1083	8	ArrayRealVector.java	unitize	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39903	1083	8	ArrayRealVector.java	unitize	i	int	0	NIL-FOR	$ < data.length
39904	1116	12	ArrayRealVector.java	outerProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39904	1116	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
39905	1117	16	ArrayRealVector.java	outerProduct	THIS	ArrayRealVector	0	NIL-FOR	j < $.data.$.length
39905	1117	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
39906	1142	8	ArrayRealVector.java	outerProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39906	1142	8	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
39907	1143	12	ArrayRealVector.java	outerProduct	THIS	ArrayRealVector	0	NIL-FOR	j < $.data.$.length
39907	1143	12	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
39908	1218	16	ArrayRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
39908	1218	16	ArrayRealVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
39908	1218	16	ArrayRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < index + $.getDimension()
527	1287	8	ArrayRealVector.java	checkVectorDimensions	THIS	ArrayRealVector	0	DEF	$.data.$.length != n
527	1287	8	ArrayRealVector.java	checkVectorDimensions	n	int	0	DEF	data.length != $
528	1300	12	ArrayRealVector.java	isNaN	THIS	ArrayRealVector	0	RET	Double.isNaN($.v)
529	1315	8	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	$.isNaN()
530	1320	12	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	Double.isInfinite($.v)
531	1351	6	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$ == other
531	1351	6	ArrayRealVector.java	equals	other	Object	0	RET	this == $
532	1355	6	ArrayRealVector.java	equals	other	Object	0	RET	$ == null
533	1362	10	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data.$.length != rhs.getDimension()
533	1362	10	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data.length != $.getDimension()
534	1366	10	ArrayRealVector.java	equals	rhs	RealVector	0	RET	$.isNaN()
39909	1370	10	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
39909	1370	10	ArrayRealVector.java	equals	i	int	0	NIL-FOR	$ < data.length
535	1371	14	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data[i] != rhs.getEntry(i)
535	1371	14	ArrayRealVector.java	equals	i	int	0	RET	data[$] != rhs.getEntry($)
535	1371	14	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data[i] != $.getEntry(i)
536	1391	8	ArrayRealVector.java	hashCode	THIS	ArrayRealVector	0	RET	$.isNaN()
537	1404	8	ArrayRealVector.java	checkIndex	THIS	ArrayRealVector	0	MatrixIndexException	index >= $.getDimension()
537	1404	8	ArrayRealVector.java	checkIndex	index	int	0	MatrixIndexException	$ < 0
537	1404	8	ArrayRealVector.java	checkIndex	index	int	0	MatrixIndexException	$ >= getDimension()
1426	121	8	Beta.java	regularizedBeta	x	double	1	DEF	$ < 0
1426	121	8	Beta.java	regularizedBeta	x	double	1	DEF	Double.isNaN($)
1426	121	8	Beta.java	regularizedBeta	x	double	1	DEF	$ > 1
1426	121	8	Beta.java	regularizedBeta	a	double	1	DEF	Double.isNaN($)
1426	121	8	Beta.java	regularizedBeta	a	double	1	DEF	$ <= 0.0
1426	121	8	Beta.java	regularizedBeta	b	double	1	DEF	$ <= 0.0
1426	121	8	Beta.java	regularizedBeta	b	double	1	DEF	Double.isNaN($)
1427	125	15	Beta.java	regularizedBeta	x	double	1	DEF	$ > (a + 1.0) / (a + b + 2.0)
1427	125	15	Beta.java	regularizedBeta	a	double	1	DEF	x > ($ + 1.0) / ($ + b + 2.0)
1427	125	15	Beta.java	regularizedBeta	b	double	1	DEF	x > (a + 1.0) / (a + $ + 2.0)
1428	192	8	Beta.java	logBeta	a	double	1	DEF	$ <= 0.0
1428	192	8	Beta.java	logBeta	a	double	1	DEF	Double.isNaN($)
1428	192	8	Beta.java	logBeta	b	double	1	DEF	Double.isNaN($)
1428	192	8	Beta.java	logBeta	b	double	1	DEF	$ <= 0.0
461	89	8	BetaDistributionImpl.java	recomputeZ	THIS	BetaDistributionImpl	0	DEF	Double.isNaN($.z)
462	97	8	BetaDistributionImpl.java	density	x	Double	1	RET	$ > 1
462	97	8	BetaDistributionImpl.java	density	x	Double	1	RET	$ < 0
463	99	15	BetaDistributionImpl.java	density	x	Double	1	MathException:RET	$ == 0
464	100	12	BetaDistributionImpl.java	density	THIS	BetaDistributionImpl	0	MathException	$.alpha < 1
465	104	15	BetaDistributionImpl.java	density	x	Double	1	MathException:RET	$ == 1
466	105	12	BetaDistributionImpl.java	density	THIS	BetaDistributionImpl	0	MathException	$.beta < 1
467	119	8	BetaDistributionImpl.java	inverseCumulativeProbability	p	double	1	RET	$ == 0
468	121	15	BetaDistributionImpl.java	inverseCumulativeProbability	p	double	1	RET	$ == 1
469	148	8	BetaDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ <= 0
470	150	15	BetaDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ >= 1
715	73	8	BiDiagonalTransformer.java	BiDiagonalTransformer	m	int	1	DEF	$ >= n
715	73	8	BiDiagonalTransformer.java	BiDiagonalTransformer	n	int	1	DEF	m >= $
716	88	8	BiDiagonalTransformer.java	getU	THIS	BiDiagonalTransformer	0	DEF	$.cachedU == null
40225	98	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= p
40225	98	12	BiDiagonalTransformer.java	getU	p	int	0	NIL-FOR	k >= $
40226	103	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= diagOffset
40226	103	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	NIL-FOR	k >= $
717	106	16	BiDiagonalTransformer.java	getU	hK	double[]	0	DEF	$[k - diagOffset] != 0.0
717	106	16	BiDiagonalTransformer.java	getU	k	int	0	DEF	hK[$ - diagOffset] != 0.0
717	106	16	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	hK[k - $] != 0.0
40227	107	20	BiDiagonalTransformer.java	getU	j	int	0	NIL-FOR	$ < m
40227	107	20	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	j < $
40228	109	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
40228	109	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
40229	114	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
40229	114	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
718	120	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	$ > 0
719	137	8	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	$.cachedB == null
40230	142	12	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	NIL-FOR	i < $.main.$.length
40230	142	12	BiDiagonalTransformer.java	getB	i	int	0	NIL-FOR	$ < main.length
720	144	16	BiDiagonalTransformer.java	getB	m	int	1	DEF	$ < n
720	144	16	BiDiagonalTransformer.java	getB	n	int	1	DEF	m < $
721	145	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ > 0
722	149	20	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	i < $.main.$.length - 1
722	149	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ < main.length - 1
723	169	8	BiDiagonalTransformer.java	getV	THIS	BiDiagonalTransformer	0	DEF	$.cachedV == null
40231	179	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= p
40231	179	12	BiDiagonalTransformer.java	getV	p	int	0	NIL-FOR	k >= $
40232	184	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= diagOffset
40232	184	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	NIL-FOR	k >= $
724	187	16	BiDiagonalTransformer.java	getV	hK	double[]	0	DEF	$[k] != 0.0
724	187	16	BiDiagonalTransformer.java	getV	k	int	0	DEF	hK[$] != 0.0
40233	188	20	BiDiagonalTransformer.java	getV	j	int	0	NIL-FOR	$ < n
40233	188	20	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	j < $
40234	190	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
40234	190	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
40235	195	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
40235	195	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
725	201	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	DEF	$ > 0
40236	259	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	NIL-FOR	$ < n
40236	259	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	k < $
40237	263	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
40237	263	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
726	270	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	a	double	0	DEF	$ != 0.0
40238	272	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
40238	272	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
40239	274	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
40239	274	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
40240	279	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
40240	279	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
727	286	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	DEF	$ < n - 1
727	286	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	DEF	k < $ - 1
40241	289	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
40241	289	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
728	295	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	b	double	0	DEF	$ != 0.0
40242	297	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
40242	297	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
40243	300	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
40243	300	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
40244	304	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
40244	304	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
40245	323	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	NIL-FOR	$ < m
40245	323	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	k < $
40246	328	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
40246	328	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
729	334	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	a	double	0	DEF	$ != 0.0
40247	336	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
40247	336	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
40248	339	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
40248	339	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
40249	343	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
40249	343	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
730	349	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	DEF	$ < m - 1
730	349	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	DEF	k < $ - 1
40250	353	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
40250	353	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
731	359	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	b	double	0	DEF	$ != 0.0
40251	361	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
40251	361	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
40252	363	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
40252	363	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
40253	368	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
40253	368	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
290	113	8	BigFraction.java	getReducedFraction	numerator	int	0	RET	$ == 0
291	149	8	BigFraction.java	BigFraction	num	BigInteger	0	DEF	$ == null
292	152	8	BigFraction.java	BigFraction	den	BigInteger	0	DEF	$ == null
293	155	8	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.equals($)
294	158	8	BigFraction.java	BigFraction	num	BigInteger	1	DEF	BigInteger.ZERO.equals($)
295	165	12	BigFraction.java	BigFraction	gcd	BigInteger	0	DEF	BigInteger.ONE.compareTo($) < 0
296	171	12	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.compareTo($) > 0
297	205	8	BigFraction.java	BigFraction	value	double	0	DEF	Double.isNaN($)
298	208	8	BigFraction.java	BigFraction	value	double	0	DEF	Double.isInfinite($)
299	217	8	BigFraction.java	BigFraction	exponent	long	0	DEF	$ != 0
300	221	8	BigFraction.java	BigFraction	sign	long	0	DEF	$ != 0
39697	225	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x001ffffffffffffeL) != 0
39697	225	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x1) == 0
301	230	8	BigFraction.java	BigFraction	k	int	1	DEF	$ < 0
302	307	8	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	a0 > $
302	307	8	BigFraction.java	BigFraction	a0	long	0	FractionConversionException	$ > overflow
303	313	8	BigFraction.java	BigFraction	a0	long	0	RET	Math.abs($ - value) < epsilon
303	313	8	BigFraction.java	BigFraction	value	double	0	RET	Math.abs(a0 - $) < epsilon
303	313	8	BigFraction.java	BigFraction	epsilon	double	0	RET	Math.abs(a0 - value) < $
39698	329	8	BigFraction.java	BigFraction	stop	boolean	0	NIL-DOWHILE	$
304	335	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	p2 > $
304	335	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	q2 > $
304	335	12	BigFraction.java	BigFraction	p2	long	0	FractionConversionException	$ > overflow
304	335	12	BigFraction.java	BigFraction	q2	long	0	FractionConversionException	$ > overflow
305	340	12	BigFraction.java	BigFraction	convergent	double	1	DEF	Math.abs($ - value) > epsilon
305	340	12	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
305	340	12	BigFraction.java	BigFraction	n	int	1	DEF	$ < maxIterations
305	340	12	BigFraction.java	BigFraction	value	double	1	DEF	Math.abs(convergent - $) > epsilon
305	340	12	BigFraction.java	BigFraction	epsilon	double	1	DEF	Math.abs(convergent - value) > $
305	340	12	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
305	340	12	BigFraction.java	BigFraction	maxIterations	int	1	DEF	n < $
306	354	8	BigFraction.java	BigFraction	n	int	0	FractionConversionException	$ >= maxIterations
306	354	8	BigFraction.java	BigFraction	maxIterations	int	0	FractionConversionException	n >= $
307	358	8	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
307	358	8	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
308	512	8	BigFraction.java	add	fraction	BigFraction	0	RET	ZERO.equals($)
309	519	8	BigFraction.java	add	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
309	519	8	BigFraction.java	add	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
310	617	8	BigFraction.java	divide	bg	BigInteger	0	DEF	BigInteger.ZERO.equals($)
311	670	8	BigFraction.java	divide	THIS	BigFraction	0	DEF	BigInteger.ZERO.equals(fraction.$.numerator)
311	670	8	BigFraction.java	divide	fraction	BigFraction	0	DEF	BigInteger.ZERO.equals($.numerator)
312	710	8	BigFraction.java	equals	THIS	BigFraction	1	DEF	$ == other
312	710	8	BigFraction.java	equals	other	Object	1	DEF	this == $
313	712	15	BigFraction.java	equals	other	Object	0	DEF	$ instanceof BigFraction
314	901	8	BigFraction.java	multiply	THIS	BigFraction	0	DEF	$.getNumeratorAsInt() != 0
314	901	8	BigFraction.java	multiply	fraction	BigFraction	0	DEF	$.getNumeratorAsInt() != 0
315	944	8	BigFraction.java	pow	exponent	int	0	RET	$ < 0
316	961	8	BigFraction.java	pow	exponent	long	0	RET	$ < 0
317	980	8	BigFraction.java	pow	exponent	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
318	1088	8	BigFraction.java	subtract	fraction	BigFraction	0	RET	ZERO.equals($)
319	1094	8	BigFraction.java	subtract	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
319	1094	8	BigFraction.java	subtract	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
320	1117	8	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ONE.equals($.denominator)
321	1119	15	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ZERO.equals($.numerator)
322	168	8	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigFraction
323	170	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigInteger
324	172	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
325	194	8	BigFractionFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
326	218	8	BigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
327	251	8	BigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
39699	274	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	$ < source.length()
39699	274	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	Character.isDigit(source.charAt($))
39699	274	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	end < $.length()
39699	274	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	Character.isDigit($.charAt(end))
546	103	8	BigMatrixImpl.java	BigMatrixImpl	rowDimension	int	0	DEF	$ <= 0
547	108	8	BigMatrixImpl.java	BigMatrixImpl	columnDimension	int	0	DEF	$ <= 0
548	150	8	BigMatrixImpl.java	BigMatrixImpl	copyArray	boolean	1	DEF	$
549	153	12	BigMatrixImpl.java	BigMatrixImpl	d	BigDecimal[][]	0	NullPointerException	$ == null
550	157	12	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	DEF	$ == 0
551	162	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	$ == 0
39924	165	12	BigMatrixImpl.java	BigMatrixImpl	r	int	0	NIL-FOR	$ < nRows
39924	165	12	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	r < $
552	166	16	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	DEF	d[r].length != nCols
552	166	16	BigMatrixImpl.java	BigMatrixImpl	r	int	0	DEF	d[$].length != nCols
552	166	16	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	d[r].length != $
552	166	16	BigMatrixImpl.java	BigMatrixImpl	d	BigDecimal[][]	0	DEF	$[r].length != nCols
553	190	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	DEF	$ == 0
554	195	8	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	$ == 0
39925	198	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
39925	198	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
555	199	12	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	DEF	d[row].length != nCols
555	199	12	BigMatrixImpl.java	BigMatrixImpl	row	int	0	DEF	d[$].length != nCols
555	199	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	d[row].length != $
555	199	12	BigMatrixImpl.java	BigMatrixImpl	d	double[][]	0	DEF	$[row].length != nCols
556	220	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	DEF	$ == 0
557	225	8	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	$ == 0
39926	228	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
39926	228	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
558	229	12	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	DEF	d[row].length != nCols
558	229	12	BigMatrixImpl.java	BigMatrixImpl	row	int	0	DEF	d[$].length != nCols
558	229	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	d[row].length != $
558	229	12	BigMatrixImpl.java	BigMatrixImpl	d	String[][]	0	DEF	$[row].length != nCols
39927	251	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
39927	251	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
39928	283	12	BigMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
39928	283	12	BigMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
39929	286	16	BigMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
39929	286	16	BigMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
39930	309	8	BigMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
39930	309	8	BigMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
39931	313	12	BigMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
39931	313	12	BigMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
39932	338	12	BigMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
39932	338	12	BigMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
39933	341	16	BigMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
39933	341	16	BigMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
39934	364	8	BigMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
39934	364	8	BigMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
39935	368	12	BigMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
39935	368	12	BigMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
39936	385	8	BigMatrixImpl.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
39936	385	8	BigMatrixImpl.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
39937	388	12	BigMatrixImpl.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
39937	388	12	BigMatrixImpl.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
39938	404	8	BigMatrixImpl.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
39938	404	8	BigMatrixImpl.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
39939	407	12	BigMatrixImpl.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
39939	407	12	BigMatrixImpl.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
39940	433	12	BigMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
39940	433	12	BigMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
39941	436	16	BigMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
39941	436	16	BigMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
39942	438	20	BigMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
39942	438	20	BigMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
39943	464	8	BigMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
39943	464	8	BigMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
39944	467	12	BigMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
39944	467	12	BigMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
39945	469	16	BigMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
39945	469	16	BigMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
39946	512	8	BigMatrixImpl.java	getDataAsDoubleArray	i	int	0	NIL-FOR	$ < nRows
39946	512	8	BigMatrixImpl.java	getDataAsDoubleArray	nRows	int	0	NIL-FOR	i < $
39947	513	12	BigMatrixImpl.java	getDataAsDoubleArray	j	int	0	NIL-FOR	$ < nCols
39947	513	12	BigMatrixImpl.java	getDataAsDoubleArray	nCols	int	0	NIL-FOR	j < $
39948	577	8	BigMatrixImpl.java	getNorm	THIS	BigMatrixImpl	0	NIL-FOR	col < $.getColumnDimension()
39948	577	8	BigMatrixImpl.java	getNorm	col	int	0	NIL-FOR	$ < this.getColumnDimension()
39949	579	12	BigMatrixImpl.java	getNorm	THIS	BigMatrixImpl	0	NIL-FOR	row < $.getRowDimension()
39949	579	12	BigMatrixImpl.java	getNorm	row	int	0	NIL-FOR	$ < this.getRowDimension()
559	605	8	BigMatrixImpl.java	getSubMatrix	startRow	int	0	MatrixIndexException	$ > endRow
559	605	8	BigMatrixImpl.java	getSubMatrix	endRow	int	0	MatrixIndexException	startRow > $
560	612	8	BigMatrixImpl.java	getSubMatrix	startColumn	int	0	MatrixIndexException	$ > endColumn
560	612	8	BigMatrixImpl.java	getSubMatrix	endColumn	int	0	MatrixIndexException	startColumn > $
39950	619	8	BigMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
39950	619	8	BigMatrixImpl.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
561	643	8	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
561	643	8	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
561	643	8	BigMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
562	644	12	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	selectedRows.$.length == 0
562	644	12	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	MatrixIndexException	$.length == 0
39951	653	12	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	NIL-FOR	i < selectedRows.$.length
39951	653	12	BigMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
39951	653	12	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
39952	656	16	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	NIL-FOR	j < selectedColumns.$.length
39952	656	16	BigMatrixImpl.java	getSubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
39952	656	16	BigMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
563	704	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	DEF	$ == 0
564	709	8	BigMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	$ == 0
39953	713	8	BigMatrixImpl.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
39953	713	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
565	714	12	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	0	DEF	subMatrix[r].length != nCols
565	714	12	BigMatrixImpl.java	setSubMatrix	r	int	0	DEF	subMatrix[$].length != nCols
565	714	12	BigMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	subMatrix[r].length != $
565	714	12	BigMatrixImpl.java	setSubMatrix	subMatrix	BigDecimal[][]	0	DEF	$[r].length != nCols
566	721	8	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	1	DEF	$.data == null
567	722	12	BigMatrixImpl.java	setSubMatrix	row	int	0	DEF	$ > 0
568	727	12	BigMatrixImpl.java	setSubMatrix	column	int	0	DEF	$ > 0
39954	740	8	BigMatrixImpl.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
39954	740	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
39955	776	8	BigMatrixImpl.java	getColumnMatrix	row	int	0	NIL-FOR	$ < nRows
39955	776	8	BigMatrixImpl.java	getColumnMatrix	nRows	int	0	NIL-FOR	row < $
39956	815	8	BigMatrixImpl.java	getRowAsDoubleArray	i	int	0	NIL-FOR	$<ncols
39956	815	8	BigMatrixImpl.java	getRowAsDoubleArray	ncols	int	0	NIL-FOR	i<$
39957	835	8	BigMatrixImpl.java	getColumn	i	int	0	NIL-FOR	$ < nRows
39957	835	8	BigMatrixImpl.java	getColumn	nRows	int	0	NIL-FOR	i < $
39958	856	8	BigMatrixImpl.java	getColumnAsDoubleArray	i	int	0	NIL-FOR	$<nrows
39958	856	8	BigMatrixImpl.java	getColumnAsDoubleArray	nrows	int	0	NIL-FOR	i<$
39959	917	8	BigMatrixImpl.java	transpose	row	int	0	NIL-FOR	$ < nRows
39959	917	8	BigMatrixImpl.java	transpose	nRows	int	0	NIL-FOR	row < $
39960	919	12	BigMatrixImpl.java	transpose	col	int	0	NIL-FOR	$ < nCols
39960	919	12	BigMatrixImpl.java	transpose	nCols	int	0	NIL-FOR	col < $
569	943	8	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	0	NonSquareMatrixException	$.isSquare()
570	946	8	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	1	RET	$.isSingular()
39961	950	12	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
39961	950	12	BigMatrixImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < this.getRowDimension()
571	970	8	BigMatrixImpl.java	isSingular	THIS	BigMatrixImpl	1	RET	$.lu == null
572	1009	8	BigMatrixImpl.java	getTrace	THIS	BigMatrixImpl	0	NonSquareMatrixException	$.isSquare()
39962	1013	8	BigMatrixImpl.java	getTrace	THIS	BigMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
39962	1013	8	BigMatrixImpl.java	getTrace	i	int	0	NIL-FOR	$ < this.getRowDimension()
573	1027	8	BigMatrixImpl.java	operate	THIS	BigMatrixImpl	0	DEF	v.$.length != $.getColumnDimension()
573	1027	8	BigMatrixImpl.java	operate	v	BigDecimal[]	0	DEF	$.length != getColumnDimension()
39963	1035	8	BigMatrixImpl.java	operate	row	int	0	NIL-FOR	$ < nRows
39963	1035	8	BigMatrixImpl.java	operate	nRows	int	0	NIL-FOR	row < $
39964	1037	12	BigMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < nCols
39964	1037	12	BigMatrixImpl.java	operate	nCols	int	0	NIL-FOR	i < $
39965	1054	8	BigMatrixImpl.java	operate	THIS	BigMatrixImpl	0	NIL-FOR	i < bd.$.length
39965	1054	8	BigMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < bd.length
39965	1054	8	BigMatrixImpl.java	operate	bd	BigDecimal[]	0	NIL-FOR	i < $.length
574	1069	8	BigMatrixImpl.java	preMultiply	THIS	BigMatrixImpl	0	DEF	v.$.length != nRows
574	1069	8	BigMatrixImpl.java	preMultiply	nRows	int	0	DEF	v.length != $
574	1069	8	BigMatrixImpl.java	preMultiply	v	BigDecimal[]	0	DEF	$.length != nRows
39966	1076	8	BigMatrixImpl.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
39966	1076	8	BigMatrixImpl.java	preMultiply	nCols	int	0	NIL-FOR	col < $
39967	1078	12	BigMatrixImpl.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
39967	1078	12	BigMatrixImpl.java	preMultiply	nRows	int	0	NIL-FOR	i < $
575	1099	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	DEF	b.$.length != nRows
575	1099	8	BigMatrixImpl.java	solve	nRows	int	0	DEF	b.length != $
575	1099	8	BigMatrixImpl.java	solve	b	BigDecimal[]	0	DEF	$.length != nRows
39968	1107	8	BigMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRows
39968	1107	8	BigMatrixImpl.java	solve	nRows	int	0	NIL-FOR	row < $
39969	1126	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	NIL-FOR	i < bd.$.length
39969	1126	8	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < bd.length
39969	1126	8	BigMatrixImpl.java	solve	bd	BigDecimal[]	0	NIL-FOR	i < $.length
576	1144	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	DEF	b.getRowDimension() != $.getRowDimension()
576	1144	8	BigMatrixImpl.java	solve	b	BigMatrix	0	DEF	$.getRowDimension() != getRowDimension()
577	1149	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	NonSquareMatrixException	$.isSquare()
578	1152	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	SingularMatrixException	$.isSingular()
39970	1162	8	BigMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRowB
39970	1162	8	BigMatrixImpl.java	solve	nRowB	int	0	NIL-FOR	row < $
39971	1164	12	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nColB
39971	1164	12	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	col < $
39972	1170	8	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nCol
39972	1170	8	BigMatrixImpl.java	solve	nCol	int	0	NIL-FOR	col < $
39973	1171	12	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < nCol
39973	1171	12	BigMatrixImpl.java	solve	nCol	int	0	NIL-FOR	i < $
39974	1174	16	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
39974	1174	16	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
39975	1181	8	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ >= 0
39976	1184	12	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
39976	1184	12	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
39977	1187	12	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < col
39977	1187	12	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	i < $
39978	1190	16	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
39978	1190	16	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
579	1222	8	BigMatrixImpl.java	luDecompose	nRows	int	0	NonSquareMatrixException	$ != nCols
579	1222	8	BigMatrixImpl.java	luDecompose	nCols	int	0	NonSquareMatrixException	nRows != $
39979	1229	8	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
39979	1229	8	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
39980	1235	8	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	$ < nCols
39980	1235	8	BigMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	col < $
39981	1240	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < col
39981	1240	12	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	row < $
39982	1243	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < row
39982	1243	16	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	i < $
39983	1252	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
39983	1252	12	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
39984	1255	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < col
39984	1255	16	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	i < $
580	1261	16	BigMatrixImpl.java	luDecompose	sum	BigDecimal	0	DEF	$.abs().compareTo(largest) == 1
580	1261	16	BigMatrixImpl.java	luDecompose	largest	BigDecimal	0	DEF	sum.abs().compareTo($) == 1
581	1268	12	BigMatrixImpl.java	luDecompose	THIS	BigMatrixImpl	0	SingularMatrixException	$.lu[max][col].abs().compareTo(TOO_SMALL) <= 0
581	1268	12	BigMatrixImpl.java	luDecompose	max	int	0	SingularMatrixException	lu[$][col].abs().compareTo(TOO_SMALL) <= 0
581	1268	12	BigMatrixImpl.java	luDecompose	col	int	0	SingularMatrixException	lu[max][$].abs().compareTo(TOO_SMALL) <= 0
582	1274	12	BigMatrixImpl.java	luDecompose	max	int	0	DEF	$ != col
582	1274	12	BigMatrixImpl.java	luDecompose	col	int	0	DEF	max != $
39985	1276	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < nCols
39985	1276	16	BigMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	i < $
39986	1289	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
39986	1289	12	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
583	1306	8	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	DEF	$.data != null
39987	1307	12	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	NIL-FOR	i < $.data.$.length
39987	1307	12	BigMatrixImpl.java	toString	i	int	0	NIL-FOR	$ < data.length
584	1308	16	BigMatrixImpl.java	toString	i	int	0	DEF	$ > 0
39988	1312	16	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	NIL-FOR	j < $.data[0].length
39988	1312	16	BigMatrixImpl.java	toString	j	int	0	NIL-FOR	$ < data[0].length
585	1313	20	BigMatrixImpl.java	toString	j	int	0	DEF	$ > 0
586	1336	8	BigMatrixImpl.java	equals	THIS	BigMatrixImpl	0	RET	object == $
586	1336	8	BigMatrixImpl.java	equals	object	Object	0	RET	$ == this
587	1339	8	BigMatrixImpl.java	equals	object	Object	0	RET	$ instanceof BigMatrixImpl == false
588	1345	8	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	$.getColumnDimension() != nCols
588	1345	8	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	$.getRowDimension() != nRows
588	1345	8	BigMatrixImpl.java	equals	nRows	int	0	RET	m.getRowDimension() != $
588	1345	8	BigMatrixImpl.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
39989	1348	8	BigMatrixImpl.java	equals	row	int	0	NIL-FOR	$ < nRows
39989	1348	8	BigMatrixImpl.java	equals	nRows	int	0	NIL-FOR	row < $
39990	1350	12	BigMatrixImpl.java	equals	col	int	0	NIL-FOR	$ < nCols
39990	1350	12	BigMatrixImpl.java	equals	nCols	int	0	NIL-FOR	col < $
589	1351	16	BigMatrixImpl.java	equals	col	int	0	RET	dataRow[$].equals(m.getEntry(row, $))
589	1351	16	BigMatrixImpl.java	equals	dataRow	BigDecimal[]	0	RET	$[col].equals(m.getEntry(row, col))
589	1351	16	BigMatrixImpl.java	equals	row	int	0	RET	dataRow[col].equals(m.getEntry($, col))
589	1351	16	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	dataRow[col].equals($.getEntry(row, col))
39991	1371	8	BigMatrixImpl.java	hashCode	row	int	0	NIL-FOR	$ < nRows
39991	1371	8	BigMatrixImpl.java	hashCode	nRows	int	0	NIL-FOR	row < $
39992	1373	12	BigMatrixImpl.java	hashCode	col	int	0	NIL-FOR	$ < nCols
39992	1373	12	BigMatrixImpl.java	hashCode	nCols	int	0	NIL-FOR	col < $
590	1411	8	BigMatrixImpl.java	getLUMatrix	THIS	BigMatrixImpl	0	DEF	$.lu == null
39993	1446	8	BigMatrixImpl.java	copyOut	i	int	0	NIL-FOR	$ < nRows
39993	1446	8	BigMatrixImpl.java	copyOut	nRows	int	0	NIL-FOR	i < $
39994	1475	8	BigMatrixImpl.java	copyIn	i	int	0	NIL-FOR	$ < nRows
39994	1475	8	BigMatrixImpl.java	copyIn	nRows	int	0	NIL-FOR	i < $
39995	1478	12	BigMatrixImpl.java	copyIn	j	int	0	NIL-FOR	$ < nCols
39995	1478	12	BigMatrixImpl.java	copyIn	nCols	int	0	NIL-FOR	j < $
39996	1495	8	BigMatrixImpl.java	copyIn	i	int	0	NIL-FOR	$ < nRows
39996	1495	8	BigMatrixImpl.java	copyIn	nRows	int	0	NIL-FOR	i < $
39997	1498	12	BigMatrixImpl.java	copyIn	j	int	0	NIL-FOR	$ < nCols
39997	1498	12	BigMatrixImpl.java	copyIn	nCols	int	0	NIL-FOR	j < $
33	215	12	BigReal.java	equals	other	Object	0	RET	$ == null
1374	53	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i >1
1374	53	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i < 0
40854	66	8	BinaryChromosome.java	randomBinaryRepresentation	j	int	0	NIL-FOR	$<length
40854	66	8	BinaryChromosome.java	randomBinaryRepresentation	length	int	0	NIL-FOR	j<$
1375	78	8	BinaryChromosome.java	isSame	another	Chromosome	0	RET	$ instanceof BinaryChromosome
1376	82	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getLength() != anotherBc.getLength()
1376	82	8	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getLength() != $.getLength()
40855	85	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	NIL-FOR	i< $.getRepresentation().size()
40855	85	8	BinaryChromosome.java	isSame	i	int	0	NIL-FOR	$< getRepresentation().size()
1377	86	12	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getRepresentation().get(i).equals(anotherBc.getRepresentation().get(i))
1377	86	12	BinaryChromosome.java	isSame	i	int	0	RET	getRepresentation().get($).equals(anotherBc.getRepresentation().get($))
1377	86	12	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getRepresentation().get(i).equals($.getRepresentation().get(i))
1386	36	8	BinaryMutation.java	mutate	original	Chromosome	0	IllegalArgumentException	$ instanceof BinaryChromosome
421	79	8	BinomialDistributionImpl.java	setNumberOfTrials	trials	int	0	DEF	$ < 0
422	93	8	BinomialDistributionImpl.java	setProbabilityOfSuccess	p	double	0	DEF	$ < 0.0
422	93	8	BinomialDistributionImpl.java	setProbabilityOfSuccess	p	double	0	DEF	$ > 1.0
423	136	8	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
424	138	15	BinomialDistributionImpl.java	cumulativeProbability	THIS	BinomialDistributionImpl	1	DEF	x >= $.getNumberOfTrials()
424	138	15	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= getNumberOfTrials()
425	158	8	BinomialDistributionImpl.java	probability	THIS	BinomialDistributionImpl	1	DEF	x > $.getNumberOfTrials()
425	158	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ > getNumberOfTrials()
425	158	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ < 0
426	186	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
427	189	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
41102	86	8	BisectionSolver.java	solve	THIS	BisectionSolver	0	NIL-WHILE	i < $.maximalIterationCount
41102	86	8	BisectionSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1707	91	12	BisectionSolver.java	solve	fm	double	1	DEF	$ * fmin > 0.0
1707	91	12	BisectionSolver.java	solve	fmin	double	1	DEF	fm * $ > 0.0
1708	99	12	BisectionSolver.java	solve	THIS	BisectionSolver	0	RET	Math.abs(max - min) <= $.absoluteAccuracy
1708	99	12	BisectionSolver.java	solve	min	double	0	RET	Math.abs(max - $) <= absoluteAccuracy
1708	99	12	BisectionSolver.java	solve	max	double	0	RET	Math.abs($ - min) <= absoluteAccuracy
494	159	8	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	1	DEF	$
39706	168	8	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
39706	168	8	BlockFieldMatrix.java	BlockFieldMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
39707	170	12	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
39707	170	12	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
495	171	16	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	DEF	blockData[index].length != iHeight * $.blockWidth(jBlock)
495	171	16	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	DEF	blockData[index].length != iHeight * blockWidth($)
495	171	16	BlockFieldMatrix.java	BlockFieldMatrix	iHeight	int	0	DEF	blockData[index].length != $ * blockWidth(jBlock)
495	171	16	BlockFieldMatrix.java	BlockFieldMatrix	index	int	0	DEF	blockData[$].length != iHeight * blockWidth(jBlock)
495	171	16	BlockFieldMatrix.java	BlockFieldMatrix	blockData	T[][]	0	DEF	$[index].length != iHeight * blockWidth(jBlock)
496	176	16	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	0	DEF	$
39708	217	8	BlockFieldMatrix.java	toBlocksLayout	THIS	BlockFieldMatrix	0	NIL-FOR	i < rawData.$.length
39708	217	8	BlockFieldMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
39708	217	8	BlockFieldMatrix.java	toBlocksLayout	rawData	T[][]	0	NIL-FOR	i < $.length
497	219	12	BlockFieldMatrix.java	toBlocksLayout	length	int	0	DEF	$ != columns
497	219	12	BlockFieldMatrix.java	toBlocksLayout	columns	int	0	DEF	length != $
39709	229	8	BlockFieldMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
39709	229	8	BlockFieldMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
39710	233	12	BlockFieldMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
39710	233	12	BlockFieldMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
39711	243	16	BlockFieldMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
39711	243	16	BlockFieldMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
39712	276	8	BlockFieldMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
39712	276	8	BlockFieldMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
39713	280	12	BlockFieldMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
39713	280	12	BlockFieldMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
39714	307	8	BlockFieldMatrix.java	copy	THIS	BlockFieldMatrix	0	NIL-FOR	i < $.blocks.$.length
39714	307	8	BlockFieldMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
39715	330	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
39715	330	12	BlockFieldMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
39715	330	12	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
39716	331	16	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
39716	331	16	BlockFieldMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
39716	331	16	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
39717	340	20	BlockFieldMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
39717	340	20	BlockFieldMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
39718	341	24	BlockFieldMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
39718	341	24	BlockFieldMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
39719	373	8	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
39719	373	8	BlockFieldMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
39719	373	8	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
39720	377	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
39720	377	12	BlockFieldMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
39720	377	12	BlockFieldMatrix.java	add	outBlock	T[]	0	NIL-FOR	k < $.length
39721	401	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
39721	401	12	BlockFieldMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
39721	401	12	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
39722	402	16	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
39722	402	16	BlockFieldMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
39722	402	16	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
39723	411	20	BlockFieldMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
39723	411	20	BlockFieldMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
39724	412	24	BlockFieldMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
39724	412	24	BlockFieldMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
39725	444	8	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
39725	444	8	BlockFieldMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
39725	444	8	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
39726	448	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
39726	448	12	BlockFieldMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
39726	448	12	BlockFieldMatrix.java	subtract	outBlock	T[]	0	NIL-FOR	k < $.length
39727	465	8	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
39727	465	8	BlockFieldMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
39727	465	8	BlockFieldMatrix.java	scalarAdd	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
39728	468	12	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
39728	468	12	BlockFieldMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
39728	468	12	BlockFieldMatrix.java	scalarAdd	outBlock	T[]	0	NIL-FOR	k < $.length
39729	485	8	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
39729	485	8	BlockFieldMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
39729	485	8	BlockFieldMatrix.java	scalarMultiply	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
39730	488	12	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
39730	488	12	BlockFieldMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
39730	488	12	BlockFieldMatrix.java	scalarMultiply	outBlock	T[]	0	NIL-FOR	k < $.length
39731	513	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
39731	513	12	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
39731	513	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
39732	518	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
39732	518	16	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
39732	518	16	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
39733	527	20	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
39733	527	20	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
39734	531	24	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
39734	531	24	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
39735	534	28	BlockFieldMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
39735	534	28	BlockFieldMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
39736	536	32	BlockFieldMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
39736	536	32	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
39737	574	8	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
39737	574	8	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
39737	574	8	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
39738	579	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
39738	579	12	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
39738	579	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
39739	589	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
39739	589	16	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
39740	593	20	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
39740	593	20	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
39741	596	24	BlockFieldMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
39741	596	24	BlockFieldMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
39742	600	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
39742	600	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
39743	609	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
39743	609	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
39744	636	8	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
39744	636	8	BlockFieldMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
39745	641	12	BlockFieldMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
39745	641	12	BlockFieldMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
39746	645	16	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
39746	645	16	BlockFieldMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
39747	679	8	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
39747	679	8	BlockFieldMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
39747	679	8	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
39748	681	12	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
39748	681	12	BlockFieldMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
39748	681	12	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
498	692	16	BlockFieldMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
499	694	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
500	726	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
39749	776	8	BlockFieldMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
39749	776	8	BlockFieldMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
501	790	8	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	DEF	$ < 1
502	797	12	BlockFieldMatrix.java	setSubMatrix	THIS	BlockFieldMatrix	0	DEF	$.subRow.$.length != refLength
502	797	12	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	DEF	subRow.length != $
39750	811	8	BlockFieldMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
39750	811	8	BlockFieldMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
39751	817	12	BlockFieldMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
39751	817	12	BlockFieldMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
39752	826	16	BlockFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
39752	826	16	BlockFieldMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
39753	850	8	BlockFieldMatrix.java	getRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
39753	850	8	BlockFieldMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
503	854	12	BlockFieldMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
503	854	12	BlockFieldMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
504	896	8	BlockFieldMatrix.java	setRowMatrix	nCols	int	0	InvalidMatrixException	matrix.getColumnDimension() != $
504	896	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	InvalidMatrixException	$.getColumnDimension() != nCols
504	896	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	InvalidMatrixException	$.getRowDimension() != 1
39754	910	8	BlockFieldMatrix.java	setRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
39754	910	8	BlockFieldMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
505	914	12	BlockFieldMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
505	914	12	BlockFieldMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
39755	942	8	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
39755	942	8	BlockFieldMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
39756	945	12	BlockFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
39756	945	12	BlockFieldMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
506	946	16	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	DEF	outIndex >= outBlock.$.length
506	946	16	BlockFieldMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
506	946	16	BlockFieldMatrix.java	getColumnMatrix	outBlock	T[]	0	DEF	outIndex >= $.length
507	985	8	BlockFieldMatrix.java	setColumnMatrix	nRows	int	0	InvalidMatrixException	matrix.getRowDimension() != $
507	985	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	InvalidMatrixException	$.getColumnDimension() != 1
507	985	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	InvalidMatrixException	$.getRowDimension() != nRows
39757	1000	8	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
39757	1000	8	BlockFieldMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
39758	1003	12	BlockFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
39758	1003	12	BlockFieldMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
508	1004	16	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	DEF	mIndex >= mBlock.$.length
508	1004	16	BlockFieldMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
508	1004	16	BlockFieldMatrix.java	setColumnMatrix	mBlock	T[]	0	DEF	mIndex >= $.length
39759	1026	8	BlockFieldMatrix.java	getRowVector	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
39759	1026	8	BlockFieldMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
39760	1061	8	BlockFieldMatrix.java	getColumnVector	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
39760	1061	8	BlockFieldMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
39761	1064	12	BlockFieldMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
39761	1064	12	BlockFieldMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
39762	1096	8	BlockFieldMatrix.java	getRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
39762	1096	8	BlockFieldMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
509	1114	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	InvalidMatrixException	array.$.length != nCols
509	1114	8	BlockFieldMatrix.java	setRow	nCols	int	0	InvalidMatrixException	array.length != $
509	1114	8	BlockFieldMatrix.java	setRow	array	T[]	0	InvalidMatrixException	$.length != nCols
39763	1124	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
39763	1124	8	BlockFieldMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
39764	1146	8	BlockFieldMatrix.java	getColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
39764	1146	8	BlockFieldMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
39765	1149	12	BlockFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
39765	1149	12	BlockFieldMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
510	1165	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	InvalidMatrixException	array.$.length != nRows
510	1165	8	BlockFieldMatrix.java	setColumn	nRows	int	0	InvalidMatrixException	array.length != $
510	1165	8	BlockFieldMatrix.java	setColumn	array	T[]	0	InvalidMatrixException	$.length != nRows
39766	1176	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
39766	1176	8	BlockFieldMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
39767	1179	12	BlockFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
39767	1179	12	BlockFieldMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
39768	1266	8	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockColumns
39768	1266	8	BlockFieldMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
39769	1267	12	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockRows
39769	1267	12	BlockFieldMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
39770	1276	16	BlockFieldMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
39770	1276	16	BlockFieldMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
39771	1278	20	BlockFieldMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
39771	1278	20	BlockFieldMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
511	1310	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	DEF	v.$.length != $.columns
511	1310	8	BlockFieldMatrix.java	operate	v	T[]	0	DEF	$.length != columns
39772	1319	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
39772	1319	8	BlockFieldMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
39773	1322	12	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
39773	1322	12	BlockFieldMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
39774	1326	16	BlockFieldMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
39774	1326	16	BlockFieldMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
39775	1329	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
39775	1329	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
39776	1338	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
39776	1338	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
512	1355	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	DEF	v.$.length != $.rows
512	1355	8	BlockFieldMatrix.java	preMultiply	v	T[]	0	DEF	$.length != rows
39777	1364	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
39777	1364	8	BlockFieldMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
39778	1371	12	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
39778	1371	12	BlockFieldMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
39779	1375	16	BlockFieldMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
39779	1375	16	BlockFieldMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
39780	1379	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
39780	1379	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
39781	1388	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
39781	1388	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
39782	1406	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
39782	1406	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
39783	1409	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
39783	1409	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
39784	1410	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
39784	1410	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
39785	1415	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
39785	1415	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
39786	1429	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
39786	1429	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
39787	1432	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
39787	1432	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
39788	1433	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
39788	1433	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
39789	1438	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
39789	1438	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
39790	1455	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
39790	1455	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
39791	1459	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
39791	1459	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
39792	1460	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
39792	1460	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
39793	1466	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
39793	1466	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
39794	1483	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
39794	1483	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
39795	1487	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
39795	1487	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
39796	1488	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
39796	1488	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
39797	1494	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
39797	1494	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
39798	1508	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
39798	1508	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
39799	1511	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
39799	1511	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
39800	1515	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
39800	1515	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
39801	1516	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
39801	1516	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
39802	1530	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
39802	1530	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
39803	1533	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
39803	1533	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
39804	1537	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
39804	1537	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
39805	1538	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
39805	1538	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
39806	1555	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
39806	1555	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
39807	1559	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
39807	1559	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
39808	1565	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
39808	1565	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
39809	1566	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
39809	1566	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
39810	1583	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
39810	1583	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
39811	1587	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
39811	1587	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
39812	1593	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
39812	1593	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
39813	1594	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
39813	1594	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
763	156	8	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	1	DEF	$
40297	165	8	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
40297	165	8	BlockRealMatrix.java	BlockRealMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
40298	167	12	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
40298	167	12	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
764	168	16	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	DEF	blockData[index].length != iHeight * $.blockWidth(jBlock)
764	168	16	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	DEF	blockData[index].length != iHeight * blockWidth($)
764	168	16	BlockRealMatrix.java	BlockRealMatrix	iHeight	int	0	DEF	blockData[index].length != $ * blockWidth(jBlock)
764	168	16	BlockRealMatrix.java	BlockRealMatrix	index	int	0	DEF	blockData[$].length != iHeight * blockWidth(jBlock)
764	168	16	BlockRealMatrix.java	BlockRealMatrix	blockData	double[][]	0	DEF	$[index].length != iHeight * blockWidth(jBlock)
765	173	16	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	0	DEF	$
40299	212	8	BlockRealMatrix.java	toBlocksLayout	THIS	BlockRealMatrix	0	NIL-FOR	i < rawData.$.length
40299	212	8	BlockRealMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
40299	212	8	BlockRealMatrix.java	toBlocksLayout	rawData	double[][]	0	NIL-FOR	i < $.length
766	214	12	BlockRealMatrix.java	toBlocksLayout	length	int	0	DEF	$ != columns
766	214	12	BlockRealMatrix.java	toBlocksLayout	columns	int	0	DEF	length != $
40300	223	8	BlockRealMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
40300	223	8	BlockRealMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
40301	227	12	BlockRealMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
40301	227	12	BlockRealMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
40302	237	16	BlockRealMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
40302	237	16	BlockRealMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
40303	266	8	BlockRealMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
40303	266	8	BlockRealMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
40304	270	12	BlockRealMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
40304	270	12	BlockRealMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
40305	297	8	BlockRealMatrix.java	copy	THIS	BlockRealMatrix	0	NIL-FOR	i < $.blocks.$.length
40305	297	8	BlockRealMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
40306	320	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
40306	320	12	BlockRealMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
40306	320	12	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
40307	321	16	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
40307	321	16	BlockRealMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
40307	321	16	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
40308	330	20	BlockRealMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
40308	330	20	BlockRealMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
40309	331	24	BlockRealMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
40309	331	24	BlockRealMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
40310	363	8	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
40310	363	8	BlockRealMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
40310	363	8	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
40311	367	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
40311	367	12	BlockRealMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
40311	367	12	BlockRealMatrix.java	add	outBlock	double[]	0	NIL-FOR	k < $.length
40312	391	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
40312	391	12	BlockRealMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
40312	391	12	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
40313	392	16	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
40313	392	16	BlockRealMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
40313	392	16	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
40314	401	20	BlockRealMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
40314	401	20	BlockRealMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
40315	402	24	BlockRealMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
40315	402	24	BlockRealMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
40316	434	8	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
40316	434	8	BlockRealMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
40316	434	8	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
40317	438	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
40317	438	12	BlockRealMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
40317	438	12	BlockRealMatrix.java	subtract	outBlock	double[]	0	NIL-FOR	k < $.length
40318	455	8	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
40318	455	8	BlockRealMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
40318	455	8	BlockRealMatrix.java	scalarAdd	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
40319	458	12	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
40319	458	12	BlockRealMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
40319	458	12	BlockRealMatrix.java	scalarAdd	outBlock	double[]	0	NIL-FOR	k < $.length
40320	475	8	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
40320	475	8	BlockRealMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
40320	475	8	BlockRealMatrix.java	scalarMultiply	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
40321	478	12	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
40321	478	12	BlockRealMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
40321	478	12	BlockRealMatrix.java	scalarMultiply	outBlock	double[]	0	NIL-FOR	k < $.length
40322	502	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
40322	502	12	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
40322	502	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
40323	507	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
40323	507	16	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
40323	507	16	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
40324	516	20	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
40324	516	20	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
40325	520	24	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
40325	520	24	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
40326	523	28	BlockRealMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
40326	523	28	BlockRealMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
40327	525	32	BlockRealMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
40327	525	32	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
40328	561	8	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
40328	561	8	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
40328	561	8	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
40329	566	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
40329	566	12	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
40329	566	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
40330	576	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
40330	576	16	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
40331	580	20	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
40331	580	20	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
40332	583	24	BlockRealMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
40332	583	24	BlockRealMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
40333	587	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
40333	587	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
40334	595	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
40334	595	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
40335	621	8	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
40335	621	8	BlockRealMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
40336	626	12	BlockRealMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
40336	626	12	BlockRealMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
40337	630	16	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
40337	630	16	BlockRealMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
40338	649	8	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
40338	649	8	BlockRealMatrix.java	getNorm	jBlock	int	0	NIL-FOR	$ < blockColumns
40339	652	12	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
40339	652	12	BlockRealMatrix.java	getNorm	iBlock	int	0	NIL-FOR	$ < blockRows
40340	655	16	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
40340	655	16	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
40341	657	20	BlockRealMatrix.java	getNorm	i	int	0	NIL-FOR	$ < iHeight
40341	657	20	BlockRealMatrix.java	getNorm	iHeight	int	0	NIL-FOR	i < $
40342	663	12	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
40342	663	12	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
40343	674	8	BlockRealMatrix.java	getFrobeniusNorm	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.$.length
40343	674	8	BlockRealMatrix.java	getFrobeniusNorm	blockIndex	int	0	NIL-FOR	$ < blocks.length
40344	702	8	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
40344	702	8	BlockRealMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
40344	702	8	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
40345	704	12	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
40345	704	12	BlockRealMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
40345	704	12	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
767	715	16	BlockRealMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
768	717	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
769	749	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
40346	799	8	BlockRealMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
40346	799	8	BlockRealMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
770	813	8	BlockRealMatrix.java	setSubMatrix	refLength	int	0	DEF	$ < 1
771	820	12	BlockRealMatrix.java	setSubMatrix	THIS	BlockRealMatrix	0	DEF	$.subRow.$.length != refLength
771	820	12	BlockRealMatrix.java	setSubMatrix	refLength	int	0	DEF	subRow.length != $
40347	834	8	BlockRealMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
40347	834	8	BlockRealMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
40348	840	12	BlockRealMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
40348	840	12	BlockRealMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
40349	849	16	BlockRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
40349	849	16	BlockRealMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
40350	873	8	BlockRealMatrix.java	getRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
40350	873	8	BlockRealMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
772	877	12	BlockRealMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
772	877	12	BlockRealMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
773	919	8	BlockRealMatrix.java	setRowMatrix	nCols	int	0	InvalidMatrixException	matrix.getColumnDimension() != $
773	919	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	InvalidMatrixException	$.getRowDimension() != 1
773	919	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	InvalidMatrixException	$.getColumnDimension() != nCols
40351	933	8	BlockRealMatrix.java	setRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
40351	933	8	BlockRealMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
774	937	12	BlockRealMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
774	937	12	BlockRealMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
40352	965	8	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
40352	965	8	BlockRealMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
40353	968	12	BlockRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
40353	968	12	BlockRealMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
775	969	16	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	DEF	outIndex >= outBlock.$.length
775	969	16	BlockRealMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
775	969	16	BlockRealMatrix.java	getColumnMatrix	outBlock	double[]	0	DEF	outIndex >= $.length
776	1008	8	BlockRealMatrix.java	setColumnMatrix	nRows	int	0	InvalidMatrixException	matrix.getRowDimension() != $
776	1008	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	InvalidMatrixException	$.getColumnDimension() != 1
776	1008	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	InvalidMatrixException	$.getRowDimension() != nRows
40354	1023	8	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
40354	1023	8	BlockRealMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
40355	1026	12	BlockRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
40355	1026	12	BlockRealMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
777	1027	16	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	DEF	mIndex >= mBlock.$.length
777	1027	16	BlockRealMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
777	1027	16	BlockRealMatrix.java	setColumnMatrix	mBlock	double[]	0	DEF	mIndex >= $.length
40356	1049	8	BlockRealMatrix.java	getRowVector	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
40356	1049	8	BlockRealMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
40357	1084	8	BlockRealMatrix.java	getColumnVector	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
40357	1084	8	BlockRealMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
40358	1087	12	BlockRealMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
40358	1087	12	BlockRealMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
40359	1119	8	BlockRealMatrix.java	getRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
40359	1119	8	BlockRealMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
778	1137	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	InvalidMatrixException	array.$.length != nCols
778	1137	8	BlockRealMatrix.java	setRow	nCols	int	0	InvalidMatrixException	array.length != $
778	1137	8	BlockRealMatrix.java	setRow	array	double[]	0	InvalidMatrixException	$.length != nCols
40360	1147	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
40360	1147	8	BlockRealMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
40361	1169	8	BlockRealMatrix.java	getColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
40361	1169	8	BlockRealMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
40362	1172	12	BlockRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
40362	1172	12	BlockRealMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
779	1188	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	InvalidMatrixException	array.$.length != nRows
779	1188	8	BlockRealMatrix.java	setColumn	nRows	int	0	InvalidMatrixException	array.length != $
779	1188	8	BlockRealMatrix.java	setColumn	array	double[]	0	InvalidMatrixException	$.length != nRows
40363	1199	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
40363	1199	8	BlockRealMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
40364	1202	12	BlockRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
40364	1202	12	BlockRealMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
40365	1287	8	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockColumns
40365	1287	8	BlockRealMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
40366	1288	12	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockRows
40366	1288	12	BlockRealMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
40367	1297	16	BlockRealMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
40367	1297	16	BlockRealMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
40368	1299	20	BlockRealMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
40368	1299	20	BlockRealMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
780	1331	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	DEF	v.$.length != $.columns
780	1331	8	BlockRealMatrix.java	operate	v	double[]	0	DEF	$.length != columns
40369	1339	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
40369	1339	8	BlockRealMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
40370	1342	12	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
40370	1342	12	BlockRealMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
40371	1346	16	BlockRealMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
40371	1346	16	BlockRealMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
40372	1349	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
40372	1349	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
40373	1357	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
40373	1357	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
781	1374	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	DEF	v.$.length != $.rows
781	1374	8	BlockRealMatrix.java	preMultiply	v	double[]	0	DEF	$.length != rows
40374	1382	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
40374	1382	8	BlockRealMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
40375	1389	12	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
40375	1389	12	BlockRealMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
40376	1393	16	BlockRealMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
40376	1393	16	BlockRealMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
40377	1397	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
40377	1397	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
40378	1405	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
40378	1405	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
40379	1423	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
40379	1423	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
40380	1426	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
40380	1426	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
40381	1427	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
40381	1427	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
40382	1432	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
40382	1432	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
40383	1446	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
40383	1446	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
40384	1449	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
40384	1449	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
40385	1450	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
40385	1450	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
40386	1455	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
40386	1455	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
40387	1472	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
40387	1472	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
40388	1476	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
40388	1476	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
40389	1477	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
40389	1477	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
40390	1483	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
40390	1483	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
40391	1500	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
40391	1500	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
40392	1504	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
40392	1504	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
40393	1505	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
40393	1505	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
40394	1511	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
40394	1511	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
40395	1525	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
40395	1525	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
40396	1528	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
40396	1528	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
40397	1532	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
40397	1532	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
40398	1533	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
40398	1533	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
40399	1547	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
40399	1547	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
40400	1550	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
40400	1550	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
40401	1554	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
40401	1554	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
40402	1555	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
40402	1555	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
40403	1572	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
40403	1572	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
40404	1576	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
40404	1576	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
40405	1582	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
40405	1582	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
40406	1583	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
40406	1583	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
40407	1600	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
40407	1600	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
40408	1604	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
40408	1604	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
40409	1610	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
40409	1610	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
40410	1611	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
40410	1611	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
952	93	8	BrentOptimizer.java	localMin	THIS	BrentOptimizer	0	DEF	goalType == $.GoalType.MAXIMIZE
952	93	8	BrentOptimizer.java	localMin	goalType	GoalType	0	DEF	$ == GoalType.MAXIMIZE
40608	100	8	BrentOptimizer.java	localMin	THIS	BrentOptimizer	0	NIL-WHILE	count < $.maximalIterationCount
40608	100	8	BrentOptimizer.java	localMin	count	int	0	NIL-WHILE	$ < maximalIterationCount
953	106	12	BrentOptimizer.java	localMin	m	double	1	DEF	Math.abs(x - $) > t2 - 0.5 * (b - a)
953	106	12	BrentOptimizer.java	localMin	t2	double	1	DEF	Math.abs(x - m) > $ - 0.5 * (b - a)
953	106	12	BrentOptimizer.java	localMin	x	double	1	DEF	Math.abs($ - m) > t2 - 0.5 * (b - a)
953	106	12	BrentOptimizer.java	localMin	a	double	1	DEF	Math.abs(x - m) > t2 - 0.5 * (b - $)
953	106	12	BrentOptimizer.java	localMin	b	double	1	DEF	Math.abs(x - m) > t2 - 0.5 * ($ - a)
954	113	16	BrentOptimizer.java	localMin	tol	double	0	DEF	Math.abs(e) > $
954	113	16	BrentOptimizer.java	localMin	e	double	0	DEF	Math.abs($) > tol
955	119	20	BrentOptimizer.java	localMin	q	double	1	DEF	$ > 0
956	129	16	BrentOptimizer.java	localMin	p	double	1	DEF	Math.abs($) < Math.abs(0.5 * q * r)
956	129	16	BrentOptimizer.java	localMin	p	double	1	DEF	$ < q * (a - x)
956	129	16	BrentOptimizer.java	localMin	p	double	1	DEF	$ < q * (b - x)
956	129	16	BrentOptimizer.java	localMin	q	double	1	DEF	Math.abs(p) < Math.abs(0.5 * $ * r)
956	129	16	BrentOptimizer.java	localMin	q	double	1	DEF	p < $ * (a - x)
956	129	16	BrentOptimizer.java	localMin	q	double	1	DEF	p < $ * (b - x)
956	129	16	BrentOptimizer.java	localMin	r	double	1	DEF	Math.abs(p) < Math.abs(0.5 * q * $)
956	129	16	BrentOptimizer.java	localMin	x	double	1	DEF	p < q * (a - $)
956	129	16	BrentOptimizer.java	localMin	x	double	1	DEF	p < q * (b - $)
956	129	16	BrentOptimizer.java	localMin	a	double	1	DEF	p < q * ($ - x)
956	129	16	BrentOptimizer.java	localMin	b	double	1	DEF	p < q * ($ - x)
957	135	20	BrentOptimizer.java	localMin	u	double	0	DEF	(b - $) < t2
957	135	20	BrentOptimizer.java	localMin	u	double	0	DEF	($ - a) < t2
957	135	20	BrentOptimizer.java	localMin	t2	double	0	DEF	(b - u) < $
957	135	20	BrentOptimizer.java	localMin	t2	double	0	DEF	(u - a) < $
957	135	20	BrentOptimizer.java	localMin	a	double	0	DEF	(u - $) < t2
957	135	20	BrentOptimizer.java	localMin	b	double	0	DEF	($ - u) < t2
958	146	16	BrentOptimizer.java	localMin	THIS	BrentOptimizer	0	DEF	goalType == $.GoalType.MAXIMIZE
958	146	16	BrentOptimizer.java	localMin	goalType	GoalType	0	DEF	$ == GoalType.MAXIMIZE
959	151	16	BrentOptimizer.java	localMin	fu	double	1	DEF	$ <= fx
959	151	16	BrentOptimizer.java	localMin	fx	double	1	DEF	fu <= $
960	152	20	BrentOptimizer.java	localMin	u	double	1	DEF	$ < x
960	152	20	BrentOptimizer.java	localMin	x	double	1	DEF	u < $
961	164	20	BrentOptimizer.java	localMin	u	double	1	DEF	$ < x
961	164	20	BrentOptimizer.java	localMin	x	double	1	DEF	u < $
962	169	20	BrentOptimizer.java	localMin	fu	double	1	DEF	$ <= fw
962	169	20	BrentOptimizer.java	localMin	x	double	1	DEF	w == $
962	169	20	BrentOptimizer.java	localMin	w	double	1	DEF	$ == x
962	169	20	BrentOptimizer.java	localMin	fw	double	1	DEF	fu <= $
963	174	27	BrentOptimizer.java	localMin	fu	double	0	DEF	$ <= fv
963	174	27	BrentOptimizer.java	localMin	x	double	0	DEF	v == $
963	174	27	BrentOptimizer.java	localMin	v	double	0	DEF	$ == x
963	174	27	BrentOptimizer.java	localMin	v	double	0	DEF	$ == w
963	174	27	BrentOptimizer.java	localMin	w	double	0	DEF	v == $
963	174	27	BrentOptimizer.java	localMin	fv	double	0	DEF	fu <= $
1724	102	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yInitial) <= $.functionValueAccuracy
1724	102	8	BrentSolver.java	solve	yInitial	double	0	RET	Math.abs($) <= functionValueAccuracy
1725	109	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yMin) <= $.functionValueAccuracy
1725	109	8	BrentSolver.java	solve	yMin	double	0	RET	Math.abs($) <= functionValueAccuracy
1726	115	8	BrentSolver.java	solve	yInitial	double	0	RET	$ * yMin < 0
1726	115	8	BrentSolver.java	solve	yMin	double	0	RET	yInitial * $ < 0
1727	121	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yMax) <= $.functionValueAccuracy
1727	121	8	BrentSolver.java	solve	yMax	double	0	RET	Math.abs($) <= functionValueAccuracy
1728	127	8	BrentSolver.java	solve	yInitial	double	0	RET	$ * yMax < 0
1728	127	8	BrentSolver.java	solve	yMax	double	0	RET	yInitial * $ < 0
1729	168	8	BrentSolver.java	solve	sign	double	1	DEF	$ > 0
1730	170	12	BrentSolver.java	solve	THIS	BrentSolver	1	DEF	Math.abs(yMin) <= $.functionValueAccuracy
1730	170	12	BrentSolver.java	solve	yMin	double	1	DEF	Math.abs($) <= functionValueAccuracy
1731	173	19	BrentSolver.java	solve	THIS	BrentSolver	1	DEF	Math.abs(yMax) <= $.functionValueAccuracy
1731	173	19	BrentSolver.java	solve	yMax	double	1	DEF	Math.abs($) <= functionValueAccuracy
1732	183	15	BrentSolver.java	solve	sign	double	1	DEF	$ < 0
1733	188	12	BrentSolver.java	solve	yMin	double	1	DEF	$ == 0.0
41111	225	8	BrentSolver.java	solve	THIS	BrentSolver	0	NIL-WHILE	i < $.maximalIterationCount
41111	225	8	BrentSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1734	226	12	BrentSolver.java	solve	y1	double	0	DEF	Math.abs(y2) < Math.abs($)
1734	226	12	BrentSolver.java	solve	y2	double	0	DEF	Math.abs($) < Math.abs(y1)
1735	235	12	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(y1) <= $.functionValueAccuracy
1735	235	12	BrentSolver.java	solve	y1	double	0	RET	Math.abs($) <= functionValueAccuracy
1736	245	12	BrentSolver.java	solve	dx	double	0	RET	Math.abs($) <= tolerance
1736	245	12	BrentSolver.java	solve	tolerance	double	0	RET	Math.abs(dx) <= $
1737	249	12	BrentSolver.java	solve	tolerance	double	1	DEF	Math.abs(oldDelta) < $
1737	249	12	BrentSolver.java	solve	oldDelta	double	1	DEF	Math.abs($) < tolerance
1737	249	12	BrentSolver.java	solve	y0	double	1	DEF	Math.abs($) <= Math.abs(y1)
1737	249	12	BrentSolver.java	solve	y1	double	1	DEF	Math.abs(y0) <= Math.abs($)
1738	261	16	BrentSolver.java	solve	x0	double	1	DEF	$ == x2
1738	261	16	BrentSolver.java	solve	x2	double	1	DEF	x0 == $
1739	272	16	BrentSolver.java	solve	p	double	1	DEF	$ > 0.0
1740	277	16	BrentSolver.java	solve	p	double	1	DEF	$ >= Math.abs(0.5 * oldDelta * p1)
1740	277	16	BrentSolver.java	solve	p	double	1	DEF	2.0 * $ >= 1.5 * dx * p1 - Math.abs(tolerance * p1)
1740	277	16	BrentSolver.java	solve	p1	double	1	DEF	p >= Math.abs(0.5 * oldDelta * $)
1740	277	16	BrentSolver.java	solve	p1	double	1	DEF	2.0 * p >= 1.5 * dx * $ - Math.abs(tolerance * $)
1740	277	16	BrentSolver.java	solve	dx	double	1	DEF	2.0 * p >= 1.5 * $ * p1 - Math.abs(tolerance * p1)
1740	277	16	BrentSolver.java	solve	tolerance	double	1	DEF	2.0 * p >= 1.5 * dx * p1 - Math.abs($ * p1)
1740	277	16	BrentSolver.java	solve	oldDelta	double	1	DEF	p >= Math.abs(0.5 * $ * p1)
1741	293	12	BrentSolver.java	solve	tolerance	double	1	DEF	Math.abs(delta) > $
1741	293	12	BrentSolver.java	solve	delta	double	1	DEF	Math.abs($) > tolerance
1742	295	19	BrentSolver.java	solve	dx	double	1	DEF	$ > 0.0
1743	297	19	BrentSolver.java	solve	dx	double	0	DEF	$ <= 0.0
1744	301	12	BrentSolver.java	solve	y1	double	0	DEF	($ > 0) == (y2 > 0)
1744	301	12	BrentSolver.java	solve	y2	double	0	DEF	(y1 > 0) == ($ > 0)
452	102	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ < 0.0
452	102	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ > 1.0
453	105	15	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
454	107	16	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
455	129	8	CauchyDistributionImpl.java	setScale	s	double	0	DEF	$ <= 0.0
456	149	8	CauchyDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < .5
457	171	8	CauchyDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
458	192	8	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
459	194	15	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > .5
1211	66	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	DEF	expected.$.length < 2
1211	66	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	DEF	$.length < 2
1212	71	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	DEF	expected.$.length != observed.$.length
1212	71	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	DEF	$.length != observed.length
1212	71	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	DEF	expected.length != $.length
40757	79	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
40757	79	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
40757	79	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
1213	85	8	ChiSquareTestImpl.java	chiSquare	sumExpected	double	0	DEF	Math.abs($ - sumObserved) > 10E-6
1213	85	8	ChiSquareTestImpl.java	chiSquare	sumObserved	double	0	DEF	Math.abs(sumExpected - $) > 10E-6
40758	91	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
40758	91	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
40758	91	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
1214	92	12	ChiSquareTestImpl.java	chiSquare	rescale	boolean	1	DEF	$
1215	138	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	DEF	$ <= 0
1215	138	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	DEF	$ > 0.5
40759	161	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
40759	161	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
40760	162	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
40760	162	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
40761	172	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
40761	172	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
40762	173	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
40762	173	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
1216	206	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	DEF	$ <= 0
1216	206	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	DEF	$ > 0.5
1217	225	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	DEF	observed1.$.length < 2
1217	225	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	DEF	$.length < 2
1218	230	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	DEF	observed1.$.length != observed2.$.length
1218	230	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	DEF	$.length != observed2.length
1218	230	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	0	DEF	observed1.length != $.length
40763	245	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
40763	245	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
40763	245	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
1219	250	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum1	long	0	DEF	$ == 0
1220	254	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum2	long	0	DEF	$ == 0
1221	260	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	0	DEF	$
40764	268	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
40764	268	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
40764	268	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
1222	269	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	DEF	observed2[$] == 0
1222	269	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	DEF	observed1[$] == 0
1222	269	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	1	DEF	$[i] == 0
1222	269	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	1	DEF	$[i] == 0
1223	275	16	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	1	DEF	$
1224	313	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	DEF	$ <= 0
1224	313	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	DEF	$ > 0.5
1225	331	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	DEF	in.$.length < 2
1225	331	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	DEF	$.length < 2
1226	337	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	DEF	in[0].length < 2
1226	337	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	DEF	$[0].length < 2
40765	358	8	ChiSquareTestImpl.java	checkRectangular	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
40765	358	8	ChiSquareTestImpl.java	checkRectangular	i	int	0	NIL-FOR	$ < in.length
40765	358	8	ChiSquareTestImpl.java	checkRectangular	in	long[][]	0	NIL-FOR	i < $.length
1227	359	12	ChiSquareTestImpl.java	checkRectangular	THIS	ChiSquareTestImpl	0	DEF	in[i].length != in[0].length
1227	359	12	ChiSquareTestImpl.java	checkRectangular	i	int	0	DEF	in[$].length != in[0].length
1227	359	12	ChiSquareTestImpl.java	checkRectangular	in	long[][]	0	DEF	$[i].length != $[0].length
40766	374	8	ChiSquareTestImpl.java	checkPositive	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
40766	374	8	ChiSquareTestImpl.java	checkPositive	i	int	0	NIL-FOR	$ < in.length
40766	374	8	ChiSquareTestImpl.java	checkPositive	in	double[]	0	NIL-FOR	i < $.length
1228	375	12	ChiSquareTestImpl.java	checkPositive	i	int	0	DEF	in[$] <= 0
1228	375	12	ChiSquareTestImpl.java	checkPositive	in	double[]	0	DEF	$[i] <= 0
40767	390	8	ChiSquareTestImpl.java	checkNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
40767	390	8	ChiSquareTestImpl.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
40767	390	8	ChiSquareTestImpl.java	checkNonNegative	in	long[]	0	NIL-FOR	i < $.length
1229	391	12	ChiSquareTestImpl.java	checkNonNegative	i	int	0	DEF	in[$] < 0
1229	391	12	ChiSquareTestImpl.java	checkNonNegative	in	long[]	0	DEF	$[i] < 0
40768	406	8	ChiSquareTestImpl.java	checkNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
40768	406	8	ChiSquareTestImpl.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
40768	406	8	ChiSquareTestImpl.java	checkNonNegative	in	long[][]	0	NIL-FOR	i < $.length
40769	407	12	ChiSquareTestImpl.java	checkNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	j < in[i].length
40769	407	12	ChiSquareTestImpl.java	checkNonNegative	j	int	0	NIL-FOR	$ < in[i].length
40769	407	12	ChiSquareTestImpl.java	checkNonNegative	i	int	0	NIL-FOR	j < in[$].length
40769	407	12	ChiSquareTestImpl.java	checkNonNegative	in	long[][]	0	NIL-FOR	j < $[i].length
1230	408	16	ChiSquareTestImpl.java	checkNonNegative	j	int	0	DEF	in[i][$] < 0
1230	408	16	ChiSquareTestImpl.java	checkNonNegative	i	int	0	DEF	in[$][j] < 0
1230	408	16	ChiSquareTestImpl.java	checkNonNegative	in	long[][]	0	DEF	$[i][j] < 0
448	111	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
449	114	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
450	150	8	ChiSquaredDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
451	176	8	ChiSquaredDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
752	99	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
40277	110	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
40277	110	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
40278	115	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	j	int	0	NIL-FOR	$ < order
40278	115	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	j < $
753	121	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	lIJ	double	0	NotSymmetricMatrixException	Math.abs($ - lJI) > maxDelta
753	121	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	lJI	double	0	NotSymmetricMatrixException	Math.abs(lIJ - $) > maxDelta
753	121	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	maxDelta	double	0	NotSymmetricMatrixException	Math.abs(lIJ - lJI) > $
40279	129	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
40279	129	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
754	134	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	ltI	double[]	0	NotPositiveDefiniteMatrixException	$[i] < absolutePositivityThreshold
754	134	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NotPositiveDefiniteMatrixException	ltI[$] < absolutePositivityThreshold
754	134	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	absolutePositivityThreshold	double	0	NotPositiveDefiniteMatrixException	ltI[i] < $
40280	141	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	q	int	0	NIL-FOR	$ > i
40280	141	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	q > $
40281	144	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	p	int	0	NIL-FOR	$ < order
40281	144	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	p < $
755	155	8	CholeskyDecompositionImpl.java	getL	THIS	CholeskyDecompositionImpl	0	DEF	$.cachedL == null
756	164	8	CholeskyDecompositionImpl.java	getLT	THIS	CholeskyDecompositionImpl	0	DEF	$.cachedLT == null
40282	176	8	CholeskyDecompositionImpl.java	getDeterminant	THIS	CholeskyDecompositionImpl	0	NIL-FOR	i < $.lTData.$.length
40282	176	8	CholeskyDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < lTData.length
1360	45	8	Chromosome.java	getFitness	THIS	Chromosome	0	DEF	$.fitness == Double.MIN_VALUE
1361	91	12	Chromosome.java	findSameChromosome	THIS	Chromosome	0	RET	$.isSame($.anotherChr)
1362	106	8	Chromosome.java	searchForFitnessUpdate	sameChromosome	Chromosome	0	DEF	$ != null
41053	98	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
41053	98	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1602	128	12	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	RET	$.states.isEmpty()
1603	135	12	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.initialized
1604	152	16	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.evaluateStep(interpolator)
1604	152	16	CombinedEventsManager.java	evaluateStep	interpolator	StepInterpolator	0	DEF	state.evaluateStep($)
1605	153	20	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	1	DEF	$.first == null
1606	156	24	CombinedEventsManager.java	evaluateStep	interpolator	StepInterpolator	1	DEF	$.isForward()
1607	157	28	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.getEventTime() < $.first.getEventTime()
1608	161	28	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.getEventTime() > $.first.getEventTime()
1609	216	12	CombinedEventsManager.java	stop	THIS	CombinedEventsManager	0	RET	$.state.stop()
1610	237	16	CombinedEventsManager.java	reset	THIS	CombinedEventsManager	0	DEF	$.state.reset(t, y)
1610	237	16	CombinedEventsManager.java	reset	t	double	0	DEF	state.reset($, y)
1610	237	16	CombinedEventsManager.java	reset	y	double[]	0	DEF	state.reset(t, $)
250	113	8	Complex.java	abs	THIS	Complex	0	RET	$.isNaN()
251	117	8	Complex.java	abs	THIS	Complex	0	RET	$.isInfinite()
252	121	8	Complex.java	abs	THIS	Complex	1	RET	Math.abs($.real) < Math.abs($.imaginary)
253	122	12	Complex.java	abs	THIS	Complex	0	RET	$.imaginary == 0.0
254	128	12	Complex.java	abs	THIS	Complex	0	RET	$.real == 0.0
255	173	8	Complex.java	conjugate	THIS	Complex	0	RET	$.isNaN()
256	215	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN()
256	215	8	Complex.java	divide	rhs	Complex	0	RET	$.isNaN()
257	221	8	Complex.java	divide	c	double	0	RET	$ == 0.0
257	221	8	Complex.java	divide	d	double	0	RET	$ == 0.0
258	225	8	Complex.java	divide	THIS	Complex	0	RET	$.isInfinite()
258	225	8	Complex.java	divide	rhs	Complex	0	RET	$.isInfinite()
259	229	8	Complex.java	divide	c	double	1	RET	Math.abs($) < Math.abs(d)
259	229	8	Complex.java	divide	d	double	1	RET	Math.abs(c) < Math.abs($)
260	230	12	Complex.java	divide	d	double	0	RET	$ == 0.0
261	238	12	Complex.java	divide	c	double	0	RET	$ == 0.0
262	270	8	Complex.java	equals	THIS	Complex	1	DEF	$ == other
262	270	8	Complex.java	equals	other	Object	1	DEF	this == $
263	272	15	Complex.java	equals	other	Object	1	DEF	$ == null
264	277	16	Complex.java	equals	rhs	Complex	1	DEF	$.isNaN()
265	300	8	Complex.java	hashCode	THIS	Complex	0	RET	$.isNaN()
266	377	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN()
266	377	8	Complex.java	multiply	rhs	Complex	0	RET	$.isNaN()
267	380	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
267	380	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(rhs.$.real)
267	380	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(rhs.$.imaginary)
267	380	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
267	380	8	Complex.java	multiply	rhs	Complex	0	RET	Double.isInfinite($.real)
267	380	8	Complex.java	multiply	rhs	Complex	0	RET	Double.isInfinite($.imaginary)
268	416	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN()
268	416	8	Complex.java	multiply	rhs	double	0	RET	Double.isNaN($)
269	419	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
269	419	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
269	419	8	Complex.java	multiply	rhs	double	0	RET	Double.isInfinite($)
270	436	8	Complex.java	negate	THIS	Complex	0	RET	$.isNaN()
271	462	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN()
271	462	8	Complex.java	subtract	rhs	Complex	0	RET	$.isNaN()
272	485	8	Complex.java	acos	THIS	Complex	0	RET	$.isNaN()
273	508	8	Complex.java	asin	THIS	Complex	0	RET	$.isNaN()
274	531	8	Complex.java	atan	THIS	Complex	0	RET	$.isNaN()
275	566	8	Complex.java	cos	THIS	Complex	0	RET	$.isNaN()
276	600	8	Complex.java	cosh	THIS	Complex	0	RET	$.isNaN()
277	635	8	Complex.java	exp	THIS	Complex	0	RET	$.isNaN()
278	673	8	Complex.java	log	THIS	Complex	0	RET	$.isNaN()
279	699	8	Complex.java	pow	x	Complex	0	NullPointerException	$ == null
280	732	8	Complex.java	sin	THIS	Complex	0	RET	$.isNaN()
281	766	8	Complex.java	sinh	THIS	Complex	0	RET	$.isNaN()
282	808	8	Complex.java	sqrt	THIS	Complex	0	RET	$.isNaN()
283	812	8	Complex.java	sqrt	THIS	Complex	0	RET	$.imaginary == 0.0
283	812	8	Complex.java	sqrt	THIS	Complex	0	RET	$.real == 0.0
284	817	8	Complex.java	sqrt	THIS	Complex	1	RET	$.real >= 0.0
285	874	8	Complex.java	tan	THIS	Complex	0	RET	$.isNaN()
286	912	8	Complex.java	tanh	THIS	Complex	0	RET	$.isNaN()
287	963	8	Complex.java	nthRoot	n	int	0	DEF	$ <= 0
288	971	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isNaN()
289	976	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isInfinite()
39696	988	8	Complex.java	nthRoot	k	int	0	NIL-FOR	$ < n
39696	988	8	Complex.java	nthRoot	n	int	0	NIL-FOR	k < $
239	157	8	ComplexFormat.java	format	im	double	1	DEF	$ < 0.0
240	161	15	ComplexFormat.java	format	im	double	0	DEF	Double.isNaN($)
240	161	15	ComplexFormat.java	format	im	double	0	DEF	$ > 0.0
241	189	8	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Complex
242	191	15	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Number
243	256	8	ComplexFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
244	279	8	ComplexFormat.java	parse	re	Number	0	RET	$ == null
245	315	8	ComplexFormat.java	parse	im	Number	0	RET	$ == null
246	323	8	ComplexFormat.java	parse	THIS	ComplexFormat	0	RET	$.parseFixedstring(source, $.getImaginaryCharacter(), pos)
246	323	8	ComplexFormat.java	parse	source	String	0	RET	parseFixedstring($, getImaginaryCharacter(), pos)
246	323	8	ComplexFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, getImaginaryCharacter(), $)
247	351	8	ComplexFormat.java	setImaginaryCharacter	imaginaryCharacter	String	0	DEF	$.length() == 0
247	351	8	ComplexFormat.java	setImaginaryCharacter	imaginaryCharacter	String	0	DEF	$ == null
248	365	8	ComplexFormat.java	setImaginaryFormat	imaginaryFormat	NumberFormat	0	DEF	$ == null
249	379	8	ComplexFormat.java	setRealFormat	realFormat	NumberFormat	0	DEF	$ == null
238	63	8	ComplexUtils.java	polar2Complex	r	double	0	DEF	$ < 0
57	85	9	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
57	85	9	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
39666	87	13	CompositeFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
39666	87	13	CompositeFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
39666	87	13	CompositeFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
58	92	13	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
58	92	13	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
59	121	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	$ < source.length()
59	121	8	CompositeFormat.java	parseNumber	source	String	0	DEF	endIndex < $.length()
60	122	12	CompositeFormat.java	parseNumber	sb	StringBuffer	0	DEF	source.substring(startIndex, endIndex).compareTo($.toString()) == 0
60	122	12	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	source.substring($, endIndex).compareTo(sb.toString()) == 0
60	122	12	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	source.substring(startIndex, $).compareTo(sb.toString()) == 0
60	122	12	CompositeFormat.java	parseNumber	source	String	0	DEF	$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
61	148	8	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	$ == endIndex
61	148	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	startIndex == $
39667	153	12	CompositeFormat.java	parseNumber	THIS	CompositeFormat	0	NIL-FOR	i < special.$.length
39667	153	12	CompositeFormat.java	parseNumber	i	int	0	NIL-FOR	$ < special.length
39667	153	12	CompositeFormat.java	parseNumber	special	double[]	0	NIL-FOR	i < $.length
62	155	16	CompositeFormat.java	parseNumber	number	Number	0	DEF	$ != null
63	176	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	$ >= source.length()
63	176	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	source.substring($, endIndex).compareTo(expected) != 0
63	176	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	$ > source.length()
63	176	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	source.substring(startIndex, $).compareTo(expected) != 0
63	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	endIndex > $.length()
63	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	startIndex >= $.length()
63	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	$.substring(startIndex, endIndex).compareTo(expected) != 0
63	176	8	CompositeFormat.java	parseFixedstring	expected	String	0	RET	source.substring(startIndex, endIndex).compareTo($) != 0
64	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isNaN($)
64	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isInfinite($)
39661	135	8	ContinuedFraction.java	evaluate	n	int	0	NIL-WHILE	$ < maxIterations
39661	135	8	ContinuedFraction.java	evaluate	relativeError	double	0	NIL-WHILE	$ > epsilon
39661	135	8	ContinuedFraction.java	evaluate	epsilon	double	0	NIL-WHILE	relativeError > $
39661	135	8	ContinuedFraction.java	evaluate	maxIterations	int	0	NIL-WHILE	n < $
1	141	12	ContinuedFraction.java	evaluate	p2	double	0	ConvergenceException	Double.isInfinite($)
1	141	12	ContinuedFraction.java	evaluate	q2	double	0	ConvergenceException	Double.isInfinite($)
2	143	16	ContinuedFraction.java	evaluate	a	double	1	DEF	$ != 0.0
3	146	23	ContinuedFraction.java	evaluate	b	double	1	DEF	$ != 0
4	167	8	ContinuedFraction.java	evaluate	n	int	0	MaxIterationsExceededException	$ >= maxIterations
4	167	8	ContinuedFraction.java	evaluate	maxIterations	int	0	MaxIterationsExceededException	n >= $
1620	108	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	RET	model.$.steps.size() == 0
1620	108	4	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	RET	$.steps.size() == 0
1621	112	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	1	DEF	$.steps.size() == 0
1622	117	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DEF	$.getInterpolatedState().length != model.getInterpolatedState().length
1622	117	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DEF	getInterpolatedState().length != $.getInterpolatedState().length
1623	123	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DEF	$.forward ^ model.$.forward
1623	123	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DEF	forward ^ $.forward
1624	133	6	ContinuousOutputModel.java	append	step	double	0	DEF	Math.abs(gap) > 1.0e-3 * Math.abs($)
1624	133	6	ContinuousOutputModel.java	append	gap	double	0	DEF	Math.abs($) > 1.0e-3 * Math.abs(step)
1625	182	4	ContinuousOutputModel.java	handleStep	THIS	ContinuousOutputModel	0	DEF	$.steps.size() == 0
1626	189	4	ContinuousOutputModel.java	handleStep	isLast	boolean	0	DEF	$
1627	247	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMin) <= 0
1627	247	6	ContinuousOutputModel.java	setInterpolatedTime	sMin	StepInterpolator	0	RET	locatePoint(time, $) <= 0
1627	247	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMin) <= 0
1628	252	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMax) >= 0
1628	252	6	ContinuousOutputModel.java	setInterpolatedTime	sMax	StepInterpolator	0	RET	locatePoint(time, $) >= 0
1628	252	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMax) >= 0
41078	259	6	ContinuousOutputModel.java	setInterpolatedTime	iMin	int	0	NIL-WHILE	iMax - $ > 5
41078	259	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	$ - iMin > 5
1629	264	8	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ < 0
1630	267	15	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ > 0
1631	281	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	Math.abs($ - tMin) < 1e-6
1631	281	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	Math.abs(tMax - $) < 1e-6
1631	281	8	ContinuousOutputModel.java	setInterpolatedTime	tMin	double	1	DEF	Math.abs(tMed - $) < 1e-6
1631	281	8	ContinuousOutputModel.java	setInterpolatedTime	tMax	double	1	DEF	Math.abs($ - tMed) < 1e-6
1632	304	8	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.index < low
1632	304	8	ContinuousOutputModel.java	setInterpolatedTime	low	int	1	DEF	index < $
1633	306	15	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	DEF	$.index > high
1633	306	15	ContinuousOutputModel.java	setInterpolatedTime	high	int	0	DEF	index > $
41079	314	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.locatePoint(time, $.steps.get($.index)) > 0
41079	314	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.index <= iMax
41079	314	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	index <= $
41079	314	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	NIL-WHILE	locatePoint($, steps.get(index)) > 0
1634	340	4	ContinuousOutputModel.java	locatePoint	THIS	ContinuousOutputModel	0	RET	$.forward
1635	341	6	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getPreviousTime()
1635	341	6	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getPreviousTime()
1636	343	13	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getCurrentTime()
1636	343	13	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getCurrentTime()
1637	349	4	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getPreviousTime()
1637	349	4	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getPreviousTime()
1638	351	11	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getCurrentTime()
1638	351	11	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getCurrentTime()
1300	87	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	THIS	CorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != order
1300	87	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	DimensionMismatchException	mean.length != $
1300	87	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != order
40817	116	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	i	int	0	NIL-FOR	$ < order
40817	116	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	NIL-FOR	i < $
40818	181	8	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
40818	181	8	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
40819	186	8	CorrelatedRandomVectorGenerator.java	decompose	loop	boolean	0	NIL-FOR	$
40820	190	12	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
40820	190	12	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
1301	193	16	CorrelatedRandomVectorGenerator.java	decompose	ii	int	0	DEF	c[$][$] > c[isi][isi]
1301	193	16	CorrelatedRandomVectorGenerator.java	decompose	isi	int	0	DEF	c[ii][ii] > c[$][$]
1301	193	16	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	0	DEF	$[ii][ii] > $[isi][isi]
1302	200	12	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	DEF	swap[$.rank] != $.rank
1302	200	12	CorrelatedRandomVectorGenerator.java	decompose	swap	int[]	0	DEF	$[rank] != rank
1303	208	12	CorrelatedRandomVectorGenerator.java	decompose	ir	int	1	NotPositiveDefiniteMatrixException	c[$][$] < small
1303	208	12	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	1	NotPositiveDefiniteMatrixException	$[ir][ir] < small
1303	208	12	CorrelatedRandomVectorGenerator.java	decompose	small	double	1	NotPositiveDefiniteMatrixException	c[ir][ir] < $
1304	210	16	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	NotPositiveDefiniteMatrixException	$.rank == 0
40821	215	16	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
40821	215	16	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
1305	216	20	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NotPositiveDefiniteMatrixException	c[index[$]][index[$]] < -small
1305	216	20	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	0	NotPositiveDefiniteMatrixException	$[index[i]][index[i]] < -small
1305	216	20	CorrelatedRandomVectorGenerator.java	decompose	index	int[]	0	NotPositiveDefiniteMatrixException	c[$[i]][$[i]] < -small
1305	216	20	CorrelatedRandomVectorGenerator.java	decompose	small	double	0	NotPositiveDefiniteMatrixException	c[index[i]][index[i]] < -$
40822	234	16	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
40822	234	16	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
40823	239	20	CorrelatedRandomVectorGenerator.java	decompose	j	int	0	NIL-FOR	$ < i
40823	239	20	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	j < $
40824	256	8	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
40824	256	8	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
40825	257	12	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.rank
40825	257	12	CorrelatedRandomVectorGenerator.java	decompose	j	int	0	NIL-FOR	$ < rank
40826	271	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < $.rank
40826	271	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < rank
40827	277	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < correlated.$.length
40827	277	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < correlated.length
40827	277	8	CorrelatedRandomVectorGenerator.java	nextVector	correlated	double[]	0	NIL-FOR	i < $.length
40828	279	12	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.rank
40828	279	12	CorrelatedRandomVectorGenerator.java	nextVector	j	int	0	NIL-FOR	$ < rank
40786	163	8	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	$ < dimension
40786	163	8	Covariance.java	computeCovarianceMatrix	dimension	int	0	NIL-FOR	i < $
40787	164	12	Covariance.java	computeCovarianceMatrix	j	int	0	NIL-FOR	$ < i
40787	164	12	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	j < $
1245	224	8	Covariance.java	covariance	THIS	Covariance	1	DEF	length == yArray.$.length
1245	224	8	Covariance.java	covariance	length	int	1	DEF	$ > 1
1245	224	8	Covariance.java	covariance	length	int	1	DEF	$ == yArray.length
1245	224	8	Covariance.java	covariance	yArray	double[]	1	DEF	length == $.length
40788	227	12	Covariance.java	covariance	i	int	0	NIL-FOR	$ < length
40788	227	12	Covariance.java	covariance	length	int	0	NIL-FOR	i < $
1246	267	8	Covariance.java	checkSufficientData	nRows	int	0	DEF	$ < 2
1246	267	8	Covariance.java	checkSufficientData	nCols	int	0	DEF	$ < 2
152	48	8	DefaultTransformer.java	transform	o	Object	0	MathException	$ == null
153	52	8	DefaultTransformer.java	transform	o	Object	0	RET	$ instanceof Number
1153	140	8	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.windowSize != INFINITE_WINDOW
1154	141	12	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.getN() == $.windowSize
1155	143	19	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	0	DEF	$.getN() < $.windowSize
1156	204	8	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	0	DEF	$.getN() > 0
1157	205	12	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	1	DEF	$.getN() > 1
1158	303	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < 1
1159	304	12	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
1160	315	8	DescriptiveStatistics.java	setWindowSize	THIS	DescriptiveStatistics	0	DEF	windowSize < $.eDA.getNumElements()
1160	315	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
1160	315	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < eDA.getNumElements()
1161	376	8	DescriptiveStatistics.java	getPercentile	THIS	DescriptiveStatistics	1	DEF	$.percentileImpl instanceof Percentile
40718	144	8	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	$ < n
40718	144	8	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	i < $
40719	146	12	DirectSearchOptimizer.java	setStartConfiguration	j	int	0	NIL-FOR	$ < i + 1
40719	146	12	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	j < $ + 1
1071	147	16	DirectSearchOptimizer.java	setStartConfiguration	j	int	0	DEF	steps[$] == 0.0
1071	147	16	DirectSearchOptimizer.java	setStartConfiguration	steps	double[]	0	DEF	$[j] == 0.0
1072	172	8	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	DEF	$ < 0
40720	180	8	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	$ < n + 1
40720	180	8	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	i < $ + 1
1073	185	12	DirectSearchOptimizer.java	setStartConfiguration	THIS	DirectSearchOptimizer	0	DEF	refI.$.length != n
1073	185	12	DirectSearchOptimizer.java	setStartConfiguration	refI	double[]	0	DEF	$.length != n
1073	185	12	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	DEF	refI.length != $
40721	190	12	DirectSearchOptimizer.java	setStartConfiguration	j	int	0	NIL-FOR	$ < i
40721	190	12	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	j < $
40722	193	16	DirectSearchOptimizer.java	setStartConfiguration	k	int	0	NIL-FOR	$ < n
40722	193	16	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	k < $
1074	194	20	DirectSearchOptimizer.java	setStartConfiguration	k	int	0	DEF	refI[$] != refJ[$]
1074	194	20	DirectSearchOptimizer.java	setStartConfiguration	refJ	double[]	0	DEF	refI[k] != $[k]
1074	194	20	DirectSearchOptimizer.java	setStartConfiguration	refI	double[]	0	DEF	$[k] != refJ[k]
1075	199	16	DirectSearchOptimizer.java	setStartConfiguration	allEquals	boolean	0	DEF	$
1076	207	12	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	DEF	$ > 0
40723	209	16	DirectSearchOptimizer.java	setStartConfiguration	k	int	0	NIL-FOR	$ < n
40723	209	16	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	k < $
1077	265	8	DirectSearchOptimizer.java	optimize	THIS	DirectSearchOptimizer	0	DEF	$.startConfiguration == null
1078	294	12	DirectSearchOptimizer.java	optimize	THIS	DirectSearchOptimizer	0	RET	$.iterations > 0
40724	296	16	DirectSearchOptimizer.java	optimize	THIS	DirectSearchOptimizer	0	NIL-FOR	i < $.simplex.$.length
40724	296	16	DirectSearchOptimizer.java	optimize	i	int	0	NIL-FOR	$ < simplex.length
1079	299	16	DirectSearchOptimizer.java	optimize	converged	boolean	0	RET	$
1080	319	8	DirectSearchOptimizer.java	incrementIterationsCounter	THIS	DirectSearchOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
1081	345	8	DirectSearchOptimizer.java	evaluate	THIS	DirectSearchOptimizer	0	MaxEvaluationsExceededException	++$.evaluations > $.maxEvaluations
1082	361	8	DirectSearchOptimizer.java	buildSimplex	THIS	DirectSearchOptimizer	0	DEF	n != $.startConfiguration.$.length
1082	361	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	DEF	$ != startConfiguration.length
40725	372	8	DirectSearchOptimizer.java	buildSimplex	i	int	0	NIL-FOR	$ < n
40725	372	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	i < $
40726	375	12	DirectSearchOptimizer.java	buildSimplex	k	int	0	NIL-FOR	$ < n
40726	375	12	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	k < $
40727	392	8	DirectSearchOptimizer.java	evaluateSimplex	THIS	DirectSearchOptimizer	0	NIL-FOR	i < $.simplex.$.length
40727	392	8	DirectSearchOptimizer.java	evaluateSimplex	i	int	0	NIL-FOR	$ < simplex.length
1083	395	12	DirectSearchOptimizer.java	evaluateSimplex	vertex	RealPointValuePair	0	DEF	Double.isNaN($.getValue())
40728	412	8	DirectSearchOptimizer.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < n
40728	412	8	DirectSearchOptimizer.java	replaceWorstPoint	n	int	0	NIL-FOR	i < $
1084	413	12	DirectSearchOptimizer.java	replaceWorstPoint	THIS	DirectSearchOptimizer	0	DEF	comparator.compare($.simplex[i], pointValuePair) > 0
1084	413	12	DirectSearchOptimizer.java	replaceWorstPoint	i	int	0	DEF	comparator.compare(simplex[$], pointValuePair) > 0
1084	413	12	DirectSearchOptimizer.java	replaceWorstPoint	pointValuePair	RealPointValuePair	0	DEF	comparator.compare(simplex[i], $) > 0
1084	413	12	DirectSearchOptimizer.java	replaceWorstPoint	comparator	Comparator<RealPointValuePair>	0	DEF	$.compare(simplex[i], pointValuePair) > 0
41085	74	8	DividedDifferenceInterpolator.java	interpolate	THIS	DividedDifferenceInterpolator	0	NIL-FOR	i < c.$.length
41085	74	8	DividedDifferenceInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < c.length
41085	74	8	DividedDifferenceInterpolator.java	interpolate	c	double[]	0	NIL-FOR	i < $.length
41086	109	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
41086	109	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
41087	115	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
41087	115	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
41088	116	12	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	j < n-$
41088	116	12	DividedDifferenceInterpolator.java	computeDividedDifference	j	int	0	NIL-FOR	$ < n-i
41088	116	12	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	j < $-i
1644	118	16	DividedDifferenceInterpolator.java	computeDividedDifference	denominator	double	0	DuplicateSampleAbscissaException	$ == 0.0
41007	138	4	DormandPrince54Integrator.java	estimateError	THIS	DormandPrince54Integrator	0	NIL-FOR	j < y0.$.length
41007	138	4	DormandPrince54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
41007	138	4	DormandPrince54Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
1477	64	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	THIS	DormandPrince54StepInterpolator	1	DEF	interpolator.$.v1 == null
1477	64	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	interpolator	DormandPrince54StepInterpolator	1	DEF	$.v1 == null
1478	116	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.vectorsInitialized
1479	118	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.v1 == null
40972	128	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
40972	128	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
40973	151	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
40973	151	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
41006	252	4	DormandPrince853Integrator.java	estimateError	THIS	DormandPrince853Integrator	0	NIL-FOR	j < y0.$.length
41006	252	4	DormandPrince853Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
41006	252	4	DormandPrince853Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
1539	273	4	DormandPrince853Integrator.java	estimateError	den	double	0	DEF	$ <= 0.0
1563	67	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	1	DEF	interpolator.$.currentState == null
1563	67	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	interpolator	DormandPrince853StepInterpolator	1	DEF	$.currentState == null
41024	78	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
41024	78	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < yDotKLast.length
41025	85	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
41025	85	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < v.length
41026	112	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
41026	112	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < yDotKLast.length
41027	117	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
41027	117	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < v.length
1564	138	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.vectorsInitialized
1565	140	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.v == null
41028	142	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < 7
41029	151	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
41029	151	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
41030	169	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.d.$.length
41030	169	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < d.length
41031	191	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
41031	191	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1566	212	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	RET	$.currentState == null
41032	221	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
41032	221	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
41033	230	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
41033	230	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
41034	240	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
41034	240	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
41035	264	4	DormandPrince853StepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < dimension
41035	264	4	DormandPrince853StepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	i < $
41036	287	4	DormandPrince853StepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < dimension
41036	287	4	DormandPrince853StepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	i < $
831	165	8	EigenDecompositionImpl.java	EigenDecompositionImpl	THIS	EigenDecompositionImpl	1	DEF	$.isSymmetric(matrix)
831	165	8	EigenDecompositionImpl.java	EigenDecompositionImpl	matrix	RealMatrix	1	DEF	isSymmetric($)
40512	196	8	EigenDecompositionImpl.java	EigenDecompositionImpl	THIS	EigenDecompositionImpl	0	NIL-FOR	i < $.squaredSecondary.$.length
40512	196	8	EigenDecompositionImpl.java	EigenDecompositionImpl	i	int	0	NIL-FOR	$ < squaredSecondary.length
40513	215	8	EigenDecompositionImpl.java	isSymmetric	i	int	0	NIL-FOR	$ < rows
40513	215	8	EigenDecompositionImpl.java	isSymmetric	rows	int	0	NIL-FOR	i < $
40514	216	12	EigenDecompositionImpl.java	isSymmetric	j	int	0	NIL-FOR	$ < columns
40514	216	12	EigenDecompositionImpl.java	isSymmetric	columns	int	0	NIL-FOR	j < $
832	219	16	EigenDecompositionImpl.java	isSymmetric	mij	double	0	RET	Math.abs($ - mji) > (Math.max(Math.abs($), Math.abs(mji)) * eps)
832	219	16	EigenDecompositionImpl.java	isSymmetric	mji	double	0	RET	Math.abs(mij - $) > (Math.max(Math.abs(mij), Math.abs($)) * eps)
832	219	16	EigenDecompositionImpl.java	isSymmetric	eps	double	0	RET	Math.abs(mij - mji) > (Math.max(Math.abs(mij), Math.abs(mji)) * $)
833	254	8	EigenDecompositionImpl.java	getV	THIS	EigenDecompositionImpl	0	DEF	$.cachedV == null
834	256	12	EigenDecompositionImpl.java	getV	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
40515	262	12	EigenDecompositionImpl.java	getV	k	int	0	NIL-FOR	$ < m
40515	262	12	EigenDecompositionImpl.java	getV	m	int	0	NIL-FOR	k < $
835	276	8	EigenDecompositionImpl.java	getD	THIS	EigenDecompositionImpl	0	DEF	$.cachedD == null
836	287	8	EigenDecompositionImpl.java	getVT	THIS	EigenDecompositionImpl	0	DEF	$.cachedVt == null
837	289	12	EigenDecompositionImpl.java	getVT	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
40516	295	12	EigenDecompositionImpl.java	getVT	k	int	0	NIL-FOR	$ < m
40516	295	12	EigenDecompositionImpl.java	getVT	m	int	0	NIL-FOR	k < $
838	333	8	EigenDecompositionImpl.java	getEigenvector	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
839	353	8	EigenDecompositionImpl.java	getSolver	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
40517	556	8	EigenDecompositionImpl.java	transformToTridiagonal	THIS	EigenDecompositionImpl	0	NIL-FOR	i < $.squaredSecondary.$.length
40517	556	8	EigenDecompositionImpl.java	transformToTridiagonal	i	int	0	NIL-FOR	$ < squaredSecondary.length
40518	576	8	EigenDecompositionImpl.java	computeGershgorinCircles	i	int	0	NIL-FOR	$ < m - 1
40518	576	8	EigenDecompositionImpl.java	computeGershgorinCircles	m	int	0	NIL-FOR	i < $ - 1
840	654	16	EigenDecompositionImpl.java	findEigenvalues	chooseLeft	boolean	1	DEF	$
40519	655	20	EigenDecompositionImpl.java	findEigenvalues	i	int	0	NIL-FOR	$ < n
40519	655	20	EigenDecompositionImpl.java	findEigenvalues	n	int	0	NIL-FOR	i < $
40520	659	20	EigenDecompositionImpl.java	findEigenvalues	i	int	0	NIL-FOR	$ < n
40520	659	20	EigenDecompositionImpl.java	findEigenvalues	n	int	0	NIL-FOR	i < $
40521	670	8	EigenDecompositionImpl.java	findEigenvalues	i	int	0	NIL-FOR	$ < j
40521	670	8	EigenDecompositionImpl.java	findEigenvalues	j	int	0	NIL-FOR	i < $
40522	688	8	EigenDecompositionImpl.java	computeSplits	THIS	EigenDecompositionImpl	0	NIL-FOR	i < $.secondary.$.length
40522	688	8	EigenDecompositionImpl.java	computeSplits	i	int	0	NIL-FOR	$ < secondary.length
841	692	12	EigenDecompositionImpl.java	computeSplits	THIS	EigenDecompositionImpl	0	DEF	Math.abs($.secondary[i]) <= max
841	692	12	EigenDecompositionImpl.java	computeSplits	max	double	0	DEF	Math.abs(secondary[i]) <= $
841	692	12	EigenDecompositionImpl.java	computeSplits	i	int	0	DEF	Math.abs(secondary[$]) <= max
842	731	8	EigenDecompositionImpl.java	process2RowsBlock	delta	double	0	InvalidMatrixException	$ < 0
843	768	8	EigenDecompositionImpl.java	process3RowsBlock	delta	double	0	InvalidMatrixException	$ >= 0
844	782	8	EigenDecompositionImpl.java	process3RowsBlock	z0	double	0	DEF	$ < z1
844	782	8	EigenDecompositionImpl.java	process3RowsBlock	z1	double	0	DEF	z0 < $
845	787	8	EigenDecompositionImpl.java	process3RowsBlock	z1	double	0	DEF	$ < z2
845	787	8	EigenDecompositionImpl.java	process3RowsBlock	z2	double	0	DEF	z1 < $
846	792	8	EigenDecompositionImpl.java	process3RowsBlock	z0	double	0	DEF	$ < z1
846	792	8	EigenDecompositionImpl.java	process3RowsBlock	z1	double	0	DEF	z0 < $
40523	819	8	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	NIL-FOR	$ < n - 1
40523	819	8	EigenDecompositionImpl.java	processGeneralBlock	n	int	0	NIL-FOR	i < $ - 1
847	825	8	EigenDecompositionImpl.java	processGeneralBlock	sumOffDiag	double	0	RET	$ == 0
40524	848	8	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	NIL-WHILE	$ > 0
40525	860	12	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	NIL-FOR	$ >= 0
848	861	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.work[i + 2] <= 0
848	861	16	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	DEF	work[$ + 2] <= 0
849	865	16	EigenDecompositionImpl.java	processGeneralBlock	eMax	double	0	DEF	qMin >= 4 * $
849	865	16	EigenDecompositionImpl.java	processGeneralBlock	qMin	double	0	DEF	$ >= 4 * eMax
40526	879	12	EigenDecompositionImpl.java	processGeneralBlock	i0	int	0	NIL-FOR	$ < n0
40526	879	12	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	NIL-FOR	i0 < $
850	880	16	EigenDecompositionImpl.java	processGeneralBlock	k	int	0	MaxIterationsExceededException	$ >= maxIter
850	880	16	EigenDecompositionImpl.java	processGeneralBlock	maxIter	int	0	MaxIterationsExceededException	k >= $
851	890	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.work[4 * n0 - 1] <= $.TOLERANCE_2 * qMax
851	890	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.work[4 * n0 - 2] <= $.TOLERANCE_2 * $.sigma
851	890	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.pingPong == 0
851	890	16	EigenDecompositionImpl.java	processGeneralBlock	qMax	double	0	DEF	work[4 * n0 - 1] <= TOLERANCE_2 * $
851	890	16	EigenDecompositionImpl.java	processGeneralBlock	i0	int	0	DEF	n0 - $ > 3
851	890	16	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	DEF	work[4 * $ - 1] <= TOLERANCE_2 * qMax
851	890	16	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	DEF	$ - i0 > 3
851	890	16	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	DEF	work[4 * $ - 2] <= TOLERANCE_2 * sigma
40527	897	20	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	NIL-FOR	$ < 4 * n0 - 11
40527	897	20	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	NIL-FOR	i < 4 * $ - 11
852	898	24	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	1	DEF	$.work[i + 2] <= $.TOLERANCE_2 * $.sigma
852	898	24	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	1	DEF	$.work[i + 3] <= $.TOLERANCE_2 * $.work[i]
852	898	24	EigenDecompositionImpl.java	processGeneralBlock	i	int	1	DEF	work[$ + 2] <= TOLERANCE_2 * sigma
852	898	24	EigenDecompositionImpl.java	processGeneralBlock	i	int	1	DEF	work[$ + 3] <= TOLERANCE_2 * work[$]
40528	929	8	EigenDecompositionImpl.java	initialSplits	k	int	0	NIL-FOR	$ < 2
40529	933	12	EigenDecompositionImpl.java	initialSplits	i	int	0	NIL-FOR	$ >= 0
853	934	16	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	$.work[i + 2] <= $.TOLERANCE_2 * d
853	934	16	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	work[$ + 2] <= TOLERANCE_2 * d
853	934	16	EigenDecompositionImpl.java	initialSplits	d	double	1	DEF	work[i + 2] <= TOLERANCE_2 * $
40530	944	12	EigenDecompositionImpl.java	initialSplits	i	int	0	NIL-FOR	$ < 4 * n - 2
40530	944	12	EigenDecompositionImpl.java	initialSplits	n	int	0	NIL-FOR	i < 4 * $ - 2
854	947	16	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	$.work[i] <= $.TOLERANCE_2 * d
854	947	16	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	work[$] <= TOLERANCE_2 * d
854	947	16	EigenDecompositionImpl.java	initialSplits	d	double	1	DEF	work[i] <= TOLERANCE_2 * $
855	952	23	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j] < $.work[i + 2]
855	952	23	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[i + 2] < $.work[j]
855	952	23	EigenDecompositionImpl.java	initialSplits	j	int	1	DEF	MathUtils.SAFE_MIN * work[$] < work[i + 2]
855	952	23	EigenDecompositionImpl.java	initialSplits	j	int	1	DEF	MathUtils.SAFE_MIN * work[i + 2] < work[$]
855	952	23	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	MathUtils.SAFE_MIN * work[j] < work[$ + 2]
855	952	23	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[j]
40531	988	8	EigenDecompositionImpl.java	goodStep	deflating	boolean	0	NIL-FOR	$
856	990	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	0	RET	start >= $
856	990	12	EigenDecompositionImpl.java	goodStep	start	int	0	RET	$ >= deflatedEnd
857	997	12	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 2 * $.pingPong - 4] <= $.TOLERANCE_2 * $.work[k - 7]
857	997	12	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 5] <= $.TOLERANCE_2 * ($.sigma + $.work[k - 3])
857	997	12	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 2 * pingPong - 4] <= TOLERANCE_2 * work[$ - 7]
857	997	12	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 5] <= TOLERANCE_2 * (sigma + work[$ - 3])
857	997	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	DEF	start != $ - 2
857	997	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	DEF	start == $ - 1
857	997	12	EigenDecompositionImpl.java	goodStep	start	int	1	DEF	$ != deflatedEnd - 2
857	997	12	EigenDecompositionImpl.java	goodStep	start	int	1	DEF	$ == deflatedEnd - 1
858	1006	19	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 9] <= $.TOLERANCE_2 * $.sigma
858	1006	19	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 2 * $.pingPong - 8] <= $.TOLERANCE_2 * $.work[k - 11]
858	1006	19	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 9] <= TOLERANCE_2 * sigma
858	1006	19	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 2 * pingPong - 8] <= TOLERANCE_2 * work[$ - 11]
858	1006	19	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	DEF	start == $ - 2
858	1006	19	EigenDecompositionImpl.java	goodStep	start	int	1	DEF	$ == deflatedEnd - 2
859	1011	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.work[k - 3] > $.work[k - 7]
859	1011	16	EigenDecompositionImpl.java	goodStep	k	int	0	DEF	work[$ - 3] > work[$ - 7]
860	1017	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.work[k - 5] > $.TOLERANCE_2 * $.work[k - 3]
860	1017	16	EigenDecompositionImpl.java	goodStep	k	int	0	DEF	work[$ - 5] > TOLERANCE_2 * work[$ - 3]
861	1020	20	EigenDecompositionImpl.java	goodStep	t	double	1	DEF	s <= $
861	1020	20	EigenDecompositionImpl.java	goodStep	s	double	1	DEF	$ <= t
862	1044	8	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.dMin <= 0
862	1044	8	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	0	DEF	$ < end
862	1044	8	EigenDecompositionImpl.java	goodStep	end	int	0	DEF	deflatedEnd < $
863	1045	12	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.flipIfWarranted(deflatedEnd, 1)
863	1045	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	0	DEF	flipIfWarranted($, 1)
864	1058	8	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	RET	MathUtils.SAFE_MIN * $.qMax < Math.min($.work[l - 1], Math.min($.work[l - 9], $.dMin2 + $.work[l - 2 * $.pingPong]))
864	1058	8	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	RET	$.dMin < 0
864	1058	8	EigenDecompositionImpl.java	goodStep	l	int	0	RET	MathUtils.SAFE_MIN * qMax < Math.min(work[$ - 1], Math.min(work[$ - 9], dMin2 + work[$ - 2 * pingPong]))
40532	1066	12	EigenDecompositionImpl.java	goodStep	loop	boolean	0	NIL-FOR	$
865	1072	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin1 > 0
865	1072	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin >= 0
866	1076	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	Math.abs($.dN) < TOLERANCE * $.sigma
866	1076	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin1 > 0.0
866	1076	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.work[4 * deflatedEnd - 5 - $.pingPong] < TOLERANCE * ($.sigma + $.dN1)
866	1076	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin < 0.0
866	1076	23	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	RET	work[4 * $ - 5 - pingPong] < TOLERANCE * (sigma + dN1)
867	1085	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.dMin < 0.0
868	1087	20	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.tType < -22
869	1090	27	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.dMin1 > 0.0
870	1099	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	Double.isNaN($.dMin)
871	1124	8	EigenDecompositionImpl.java	flipIfWarranted	THIS	EigenDecompositionImpl	0	RET	1.5 * $.work[$.pingPong] < $.work[4 * (n - 1) + $.pingPong]
871	1124	8	EigenDecompositionImpl.java	flipIfWarranted	n	int	0	RET	1.5 * work[pingPong] < work[4 * ($ - 1) + pingPong]
40533	1126	12	EigenDecompositionImpl.java	flipIfWarranted	i	int	0	NIL-FOR	$ < j
40533	1126	12	EigenDecompositionImpl.java	flipIfWarranted	j	int	0	NIL-FOR	i < $
40534	1127	16	EigenDecompositionImpl.java	flipIfWarranted	k	int	0	NIL-FOR	$ < 4
40535	1151	8	EigenDecompositionImpl.java	eigenvaluesRange	i	int	0	NIL-FOR	$ < n
40535	1151	8	EigenDecompositionImpl.java	eigenvaluesRange	n	int	0	NIL-FOR	i < $
40536	1167	8	EigenDecompositionImpl.java	eigenvaluesRange	i	int	0	NIL-FOR	$ < maxIter
40536	1167	8	EigenDecompositionImpl.java	eigenvaluesRange	maxIter	int	0	NIL-FOR	i < $
872	1170	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < relativeTolerance * Math.max(Math.abs(left), Math.abs(right))
872	1170	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < absoluteTolerance
872	1170	12	EigenDecompositionImpl.java	eigenvaluesRange	relativeTolerance	double	0	DEF	range < $ * Math.max(Math.abs(left), Math.abs(right))
872	1170	12	EigenDecompositionImpl.java	eigenvaluesRange	absoluteTolerance	double	0	DEF	range < $
872	1170	12	EigenDecompositionImpl.java	eigenvaluesRange	left	double	0	DEF	range < relativeTolerance * Math.max(Math.abs($), Math.abs(right))
872	1170	12	EigenDecompositionImpl.java	eigenvaluesRange	right	double	0	DEF	range < relativeTolerance * Math.max(Math.abs(left), Math.abs($))
873	1177	12	EigenDecompositionImpl.java	eigenvaluesRange	THIS	EigenDecompositionImpl	1	DEF	$.countEigenValues(middle, index, n) >= 1
873	1177	12	EigenDecompositionImpl.java	eigenvaluesRange	middle	double	1	DEF	countEigenValues($, index, n) >= 1
873	1177	12	EigenDecompositionImpl.java	eigenvaluesRange	index	int	1	DEF	countEigenValues(middle, $, n) >= 1
873	1177	12	EigenDecompositionImpl.java	eigenvaluesRange	n	int	1	DEF	countEigenValues(middle, index, $) >= 1
40537	1189	8	EigenDecompositionImpl.java	eigenvaluesRange	i	int	0	NIL-FOR	$ < maxIter
40537	1189	8	EigenDecompositionImpl.java	eigenvaluesRange	maxIter	int	0	NIL-FOR	i < $
874	1192	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < relativeTolerance * Math.max(Math.abs(left), Math.abs(right))
874	1192	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < absoluteTolerance
874	1192	12	EigenDecompositionImpl.java	eigenvaluesRange	relativeTolerance	double	0	DEF	range < $ * Math.max(Math.abs(left), Math.abs(right))
874	1192	12	EigenDecompositionImpl.java	eigenvaluesRange	absoluteTolerance	double	0	DEF	range < $
874	1192	12	EigenDecompositionImpl.java	eigenvaluesRange	left	double	0	DEF	range < relativeTolerance * Math.max(Math.abs($), Math.abs(right))
874	1192	12	EigenDecompositionImpl.java	eigenvaluesRange	right	double	0	DEF	range < relativeTolerance * Math.max(Math.abs(left), Math.abs($))
875	1199	12	EigenDecompositionImpl.java	eigenvaluesRange	THIS	EigenDecompositionImpl	1	DEF	$.countEigenValues(middle, index, n) >= n
875	1199	12	EigenDecompositionImpl.java	eigenvaluesRange	middle	double	1	DEF	countEigenValues($, index, n) >= n
875	1199	12	EigenDecompositionImpl.java	eigenvaluesRange	index	int	1	DEF	countEigenValues(middle, $, n) >= n
875	1199	12	EigenDecompositionImpl.java	eigenvaluesRange	n	int	1	DEF	countEigenValues(middle, index, $) >= $
40538	1222	8	EigenDecompositionImpl.java	countEigenValues	i	int	0	NIL-FOR	$ < n
40538	1222	8	EigenDecompositionImpl.java	countEigenValues	n	int	0	NIL-FOR	i < $
876	1224	12	EigenDecompositionImpl.java	countEigenValues	ratio	double	0	DEF	$ <= 0
40539	1245	8	EigenDecompositionImpl.java	ldlTDecomposition	i	int	0	NIL-FOR	$ < n
40539	1245	8	EigenDecompositionImpl.java	ldlTDecomposition	n	int	0	NIL-FOR	i < $
877	1268	8	EigenDecompositionImpl.java	dqds	THIS	EigenDecompositionImpl	1	DEF	$.pingPong == 0
40540	1269	12	EigenDecompositionImpl.java	dqds	j4	int	0	NIL-FOR	$ <= 4 * (end - 3)
40540	1269	12	EigenDecompositionImpl.java	dqds	end	int	0	NIL-FOR	j4 <= 4 * ($ - 3)
40541	1278	12	EigenDecompositionImpl.java	dqds	j4	int	0	NIL-FOR	$ <= 4 * (end - 3)
40541	1278	12	EigenDecompositionImpl.java	dqds	end	int	0	NIL-FOR	j4 <= 4 * ($ - 3)
878	1324	8	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.pingPong == 0
40542	1325	12	EigenDecompositionImpl.java	dqd	j4	int	0	NIL-FOR	$ < 4 * (end - 3)
40542	1325	12	EigenDecompositionImpl.java	dqd	end	int	0	NIL-FOR	j4 < 4 * ($ - 3)
879	1327	16	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 2] == 0.0
879	1327	16	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 2] == 0.0
880	1332	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 + 1] < $.work[j4 - 2]
880	1332	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 2] < $.work[j4 + 1]
880	1332	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 1] < work[$ - 2]
880	1332	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 2] < work[$ + 1]
40543	1345	12	EigenDecompositionImpl.java	dqd	j4	int	0	NIL-FOR	$ < 4 * (end - 3)
40543	1345	12	EigenDecompositionImpl.java	dqd	end	int	0	NIL-FOR	j4 < 4 * ($ - 3)
881	1347	16	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 3] == 0.0
881	1347	16	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 3] == 0.0
882	1352	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 3] < $.work[j4 + 2]
882	1352	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 + 2] < $.work[j4 - 3]
882	1352	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 3] < work[$ + 2]
882	1352	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[$ - 3]
883	1372	8	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 2] == 0.0
883	1372	8	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 2] == 0.0
884	1377	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4p2 + 2] < $.work[j4 - 2]
884	1377	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 2] < $.work[j4p2 + 2]
884	1377	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[j4p2 + 2] < work[$ - 2]
884	1377	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 2] < work[j4p2 + 2]
884	1377	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[j4 - 2]
884	1377	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[j4 - 2] < work[$ + 2]
885	1392	8	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 2] == 0.0
885	1392	8	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 2] == 0.0
886	1397	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 2] < $.work[j4p2 + 2]
886	1397	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4p2 + 2] < $.work[j4 - 2]
886	1397	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 2] < work[j4p2 + 2]
886	1397	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[j4p2 + 2] < work[$ - 2]
886	1397	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[j4 - 2] < work[$ + 2]
886	1397	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[j4 - 2]
887	1428	8	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.dMin <= 0.0
888	1438	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN
888	1438	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN1
889	1444	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.dMin == $.dN
889	1444	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.dMin1 == $.dN1
890	1448	20	EigenDecompositionImpl.java	computeShiftIncrement	gap1	double	1	DEF	$ > b1
890	1448	20	EigenDecompositionImpl.java	computeShiftIncrement	gap1	double	1	DEF	$ > 0.0
890	1448	20	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	1	DEF	gap1 > $
891	1453	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	DEF	$.dN > b1
891	1453	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	dN > $
892	1456	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	a2 > ($ + b2)
892	1456	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	a2 > (b1 + $)
892	1456	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	$ > (b1 + b2)
893	1468	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN
894	1471	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 5] > $.work[nn - 7]
894	1471	24	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 5] > work[$ - 7]
895	1480	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[np - 4] > $.work[np - 2]
895	1480	24	EigenDecompositionImpl.java	computeShiftIncrement	np	int	0	RET	work[$ - 4] > work[$ - 2]
896	1484	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 9] > $.work[nn - 11]
896	1484	24	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 9] > work[$ - 11]
40544	1493	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
40544	1493	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
40544	1493	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
897	1494	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	$ == 0.0
898	1498	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
898	1498	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
899	1503	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * Math.max(b2, $) < a2
899	1503	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * Math.max($, b1) < a2
899	1503	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	cnst1 < $
899	1503	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	100 * Math.max(b2, b1) < $
899	1503	24	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	0	DEF	$ < a2
900	1510	20	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	$ < cnst1
900	1510	20	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	0	DEF	a2 < $
901	1516	19	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN2
902	1527	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[np - 8] > b2
902	1527	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[np - 4] > b1
902	1527	16	EigenDecompositionImpl.java	computeShiftIncrement	np	int	0	RET	work[$ - 8] > b2
902	1527	16	EigenDecompositionImpl.java	computeShiftIncrement	np	int	0	RET	work[$ - 4] > b1
902	1527	16	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	RET	work[np - 4] > $
902	1527	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	RET	work[np - 8] > $
903	1533	16	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	RET	end - $ > 2
903	1533	16	EigenDecompositionImpl.java	computeShiftIncrement	end	int	0	RET	$ - start > 2
40545	1536	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
40545	1536	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
40545	1536	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
904	1537	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	$ == 0.0
905	1541	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
905	1541	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
906	1546	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * Math.max(b2, $) < a2
906	1546	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * Math.max($, b1) < a2
906	1546	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	100 * Math.max(b2, b1) < $
906	1546	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	cnst1 < $
906	1546	24	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	0	DEF	$ < a2
907	1553	16	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	1	DEF	$ < cnst1
907	1553	16	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	1	DEF	a2 < $
908	1562	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.tType == -6
909	1564	23	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.tType == -18
910	1576	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin2 == $.dN2
910	1576	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin1 == $.dN1
911	1581	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 5] > $.work[nn - 7]
911	1581	16	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 5] > work[$ - 7]
912	1586	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	RET	$ != 0.0
40546	1587	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
40546	1587	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
40546	1587	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
913	1589	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
913	1589	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
914	1594	24	EigenDecompositionImpl.java	computeShiftIncrement	oldB1	double	0	DEF	100 * Math.max(b1, $) < b2
914	1594	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * Math.max($, oldB1) < b2
914	1594	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * Math.max(b1, oldB1) < $
915	1602	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	1	DEF	gap2 > $ * a2
915	1602	16	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	1	DEF	gap2 > b2 * $
915	1602	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > b2 * a2
915	1602	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > 0.0
916	1612	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	DEF	$.dMin1 == $.dN1
917	1622	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin2 == $.dN2
917	1622	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	2 * $.work[nn - 5] < $.work[nn - 7]
917	1622	12	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	1	RET	2 * work[$ - 5] < work[$ - 7]
918	1625	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 5] > $.work[nn - 7]
918	1625	16	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 5] > work[$ - 7]
919	1630	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	RET	$ != 0.0
40547	1631	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
40547	1631	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
40547	1631	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
920	1632	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
920	1632	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
921	1637	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * $ < b2
921	1637	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * b1 < $
922	1646	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	1	DEF	gap2 > $ * a2
922	1646	16	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	1	DEF	gap2 > b2 * $
922	1646	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > 0.0
922	1646	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > b2 * a2
923	1672	8	EigenDecompositionImpl.java	updateSigma	THIS	EigenDecompositionImpl	1	DEF	tau < $.sigma
923	1672	8	EigenDecompositionImpl.java	updateSigma	tau	double	1	DEF	$ < sigma
40548	1697	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < m
40548	1697	8	EigenDecompositionImpl.java	findEigenVectors	m	int	0	NIL-FOR	i < $
40549	1706	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < m
40549	1706	8	EigenDecompositionImpl.java	findEigenVectors	m	int	0	NIL-FOR	i < $
40550	1734	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ < m - 1
40550	1734	8	EigenDecompositionImpl.java	findEigenvector	m	int	0	NIL-FOR	i < $ - 1
924	1737	12	EigenDecompositionImpl.java	findEigenvector	absG	double	0	DEF	$ < minG
924	1737	12	EigenDecompositionImpl.java	findEigenvector	minG	double	0	DEF	absG < $
40551	1749	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ >= 0
40552	1755	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ < m
40552	1755	8	EigenDecompositionImpl.java	findEigenvector	m	int	0	NIL-FOR	i < $
40553	1763	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ < m
40553	1763	8	EigenDecompositionImpl.java	findEigenvector	m	int	0	NIL-FOR	i < $
40554	1785	8	EigenDecompositionImpl.java	stationaryQuotientDifferenceWithShift	i	int	0	NIL-FOR	$ < nM1
40554	1785	8	EigenDecompositionImpl.java	stationaryQuotientDifferenceWithShift	nM1	int	0	NIL-FOR	i < $
40555	1811	8	EigenDecompositionImpl.java	progressiveQuotientDifferenceWithShift	i	int	0	NIL-FOR	$ >= 0
40850	80	8	ElitisticListPopulation.java	nextGeneration	i	int	0	NIL-FOR	$<oldChromosomes.size()
40850	80	8	ElitisticListPopulation.java	nextGeneration	oldChromosomes	List<Chromosome>	0	NIL-FOR	i<$.size()
1357	95	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	IllegalArgumentException	$ < 0
1357	95	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	IllegalArgumentException	$ > 1
1552	179	4	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1552	179	4	EmbeddedRungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
1553	187	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.requiresDenseOutput()
1553	187	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
41017	207	4	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
41018	212	6	EmbeddedRungeKuttaIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
1554	214	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
1554	214	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1555	219	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1556	221	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.vecAbsoluteTolerance != null
41019	235	8	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
41019	235	8	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
41020	237	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
41020	237	10	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
41020	237	10	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
41021	239	12	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
41021	239	12	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
41022	250	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
41022	250	8	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
41022	250	8	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
41023	252	10	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
41023	252	10	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
1557	260	8	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1558	264	10	EmbeddedRungeKuttaIntegrator.java	integrate	interpolator	AbstractStepInterpolator	1	DEF	manager.evaluateStep($)
1558	264	10	EmbeddedRungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolator)
1559	266	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	Math.abs(dt) <= Math.ulp($.stepStart)
1559	266	14	EmbeddedRungeKuttaIntegrator.java	integrate	dt	double	1	DEF	Math.abs($) <= Math.ulp(stepStart)
1560	301	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
1561	306	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	manager.reset($.stepStart, y)
1561	306	6	EmbeddedRungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1561	306	6	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1561	306	6	EmbeddedRungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1562	312	6	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1306	141	12	EmpiricalDistributionImpl.java	load	THIS	EmpiricalDistributionImpl	0	DEF	$.sampleStats.getN() == 0
40829	356	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i< $.binCount - 1
40829	356	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$< binCount - 1
1307	362	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	DEF	$.binStats.isEmpty()
40830	365	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
40830	365	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount
40831	389	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount-1
40831	389	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount-1
1308	418	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	DEF	$.loaded
40832	426	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
40832	426	8	EmpiricalDistributionImpl.java	getNextValue	i	int	0	NIL-FOR	$ < binCount
1309	427	11	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	RET	x <= $.upperBounds[i]
1309	427	11	EmpiricalDistributionImpl.java	getNextValue	i	int	0	RET	x <= upperBounds[$]
1309	427	11	EmpiricalDistributionImpl.java	getNextValue	x	double	0	RET	$ <= upperBounds[i]
1310	429	15	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	0	RET	$.getN() > 0
1311	430	19	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	1	RET	$.getStandardDeviation() > 0
1425	52	8	Erf.java	erf	x	double	0	DEF	$ < 0
40774	66	12	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
40774	66	12	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
40774	66	12	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
40775	70	8	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
40775	70	8	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
40775	70	8	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
1238	79	8	EuclideanIntegerPoint.java	equals	other	Object	0	RET	$ instanceof EuclideanIntegerPoint
1239	83	8	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	RET	$.point.$.length != otherPoint.$.length
1239	83	8	EuclideanIntegerPoint.java	equals	otherPoint	int[]	0	RET	point.length != $.length
40776	86	8	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < $.point.$.length
40776	86	8	EuclideanIntegerPoint.java	equals	i	int	0	NIL-FOR	$ < point.length
1240	87	12	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	RET	$.point[i] != otherPoint[i]
1240	87	12	EuclideanIntegerPoint.java	equals	i	int	0	RET	point[$] != otherPoint[$]
1240	87	12	EuclideanIntegerPoint.java	equals	otherPoint	int[]	0	RET	point[i] != $[i]
41057	83	4	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
41057	83	4	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
41077	179	12	EventState.java	evaluateStep	i	int	0	NIL-FOR	$ < n
41077	179	12	EventState.java	evaluateStep	n	int	0	NIL-FOR	i < $
1611	187	16	EventState.java	evaluateStep	THIS	EventState	1	FunctionEvaluationException:RET	$.g0Positive ^ (gb >= 0)
1611	187	16	EventState.java	evaluateStep	gb	double	1	FunctionEvaluationException:RET	g0Positive ^ ($ >= 0)
1612	215	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	Math.abs(root - $.previousEventTime) <= $.convergence
1612	215	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	Math.abs(root - ta) <= $.convergence
1612	215	20	EventState.java	evaluateStep	root	double	1	DEF	Double.isNaN($)
1612	215	20	EventState.java	evaluateStep	root	double	1	DEF	Math.abs($ - previousEventTime) <= convergence
1612	215	20	EventState.java	evaluateStep	root	double	1	DEF	Math.abs($ - ta) <= convergence
1612	215	20	EventState.java	evaluateStep	ta	double	1	DEF	Math.abs(root - $) <= convergence
1613	221	27	EventState.java	evaluateStep	THIS	EventState	0	RET	Double.isNaN($.previousEventTime)
1613	221	27	EventState.java	evaluateStep	THIS	EventState	0	RET	Math.abs($.previousEventTime - root) > $.convergence
1613	221	27	EventState.java	evaluateStep	root	double	0	RET	Math.abs(previousEventTime - $) > convergence
1614	224	24	EventState.java	evaluateStep	THIS	EventState	0	RET	Math.abs(t1 - $.pendingEventTime) <= $.convergence
1614	224	24	EventState.java	evaluateStep	THIS	EventState	0	RET	$.pendingEvent
1614	224	24	EventState.java	evaluateStep	t1	double	0	RET	Math.abs($ - pendingEventTime) <= convergence
1615	252	12	EventState.java	evaluateStep	cause	Throwable	1	DEF	$ instanceof DerivativeException
1615	252	12	EventState.java	evaluateStep	cause	Throwable	1	DEF	$ != null
1616	254	19	EventState.java	evaluateStep	cause	Throwable	0	DEF	$ instanceof EventException
1616	254	19	EventState.java	evaluateStep	cause	Throwable	0	DEF	$ != null
1617	285	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	$.pendingEvent
1618	316	8	EventState.java	reset	THIS	EventState	0	RET	$.pendingEvent
1619	320	8	EventState.java	reset	THIS	EventState	0	DEF	$.nextAction == EventHandler.RESET_STATE
487	53	8	ExponentialDistributionImpl.java	setMean	mean	double	0	DEF	$ <= 0.0
488	75	8	ExponentialDistributionImpl.java	density	x	Double	0	RET	$ < 0
489	98	8	ExponentialDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
490	122	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ > 1.0
490	122	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ < 0.0
491	125	15	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1.0
492	160	8	ExponentialDistributionImpl.java	getDomainUpperBound	p	double	1	RET	$ < .5
493	182	8	ExponentialDistributionImpl.java	getInitialDomain	p	double	1	RET	$ < .5
442	73	8	FDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
443	102	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
444	105	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
445	151	8	FDistributionImpl.java	getInitialDomain	d	double	0	DEF	$ > 2.0
446	165	8	FDistributionImpl.java	setNumeratorDegreesOfFreedom	degreesOfFreedom	double	0	DEF	$ <= 0.0
447	188	8	FDistributionImpl.java	setDenominatorDegreesOfFreedom	degreesOfFreedom	double	0	DEF	$ <= 0.0
40931	240	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (N >> 1)
40932	254	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (N >> 1)
1447	304	8	FastFourierTransformer.java	fft	THIS	FastFourierTransformer	0	RET	f.$.length == 1
1447	304	8	FastFourierTransformer.java	fft	f	double	0	RET	$.length == 1
40941	313	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
40942	323	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
40943	364	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
40944	367	12	FastFourierTransformer.java	fft	j	int	0	NIL-WHILE	$ >= k
40944	367	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	$ > 0
40944	367	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	j >= $
40945	374	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
40946	389	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
40947	391	12	FastFourierTransformer.java	fft	j	int	0	NIL-FOR	$ < N
40948	392	16	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	k < $
40948	392	16	FastFourierTransformer.java	fft	k	int	0	NIL-FOR	$ < i
1450	433	8	FastFourierTransformer.java	sample	n	int	0	DEF	$ <= 0
40949	442	8	FastFourierTransformer.java	sample	i	int	0	NIL-FOR	$ < n
40949	442	8	FastFourierTransformer.java	sample	n	int	0	NIL-FOR	i < $
40950	457	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
40950	457	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
40950	457	8	FastFourierTransformer.java	scaleArray	f	double	0	NIL-FOR	i < $.length
40951	472	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
40951	472	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
40951	472	8	FastFourierTransformer.java	scaleArray	f	Complex	0	NIL-FOR	i < $.length
1451	495	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	DEF	$.isPowerOf2(d.$.length)
1451	495	8	FastFourierTransformer.java	verifyDataSet	d	double	0	DEF	isPowerOf2($.length)
1452	509	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	DEF	$.isPowerOf2(o.$.length)
1452	509	8	FastFourierTransformer.java	verifyDataSet	o	Object	0	DEF	isPowerOf2($.length)
1453	526	8	FastFourierTransformer.java	verifyInterval	lower	double	0	DEF	$ >= upper
1453	526	8	FastFourierTransformer.java	verifyInterval	upper	double	0	DEF	lower >= $
40952	553	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize.$.length
40952	553	8	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize.length
40952	553	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $.length
1454	573	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == dimensionSize.$.length
1454	573	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	1	DEF	subVector.length == $.length
1454	573	8	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == dimensionSize.length
40953	575	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
40953	575	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
40953	575	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
1455	581	12	FastFourierTransformer.java	mdfft	forward	boolean	1	DEF	$
40954	586	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
40954	586	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
40954	586	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
1456	593	12	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == d
1456	593	12	FastFourierTransformer.java	mdfft	d	int	1	DEF	subVector.length == $
1456	593	12	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == d
40955	599	16	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize[subVector.$.length]
40955	599	16	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[subVector.length]
40955	599	16	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[subVector.length]
40955	599	16	FastFourierTransformer.java	mdfft	subVector	int[]	0	NIL-FOR	i < dimensionSize[$.length]
1443	161	8	FastHadamardTransformer.java	fht	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
40933	173	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
40933	173	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
40934	181	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
40934	181	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
40935	187	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
40935	187	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
1444	212	8	FastHadamardTransformer.java	fht	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
40936	224	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
40936	224	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
40937	232	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
40937	232	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
40938	238	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
40938	238	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
1445	218	8	FastSineTransformer.java	fst	f	double	0	DEF	$[0] != 0.0
40939	233	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (N >> 1)
40940	245	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (N >> 1)
538	74	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	matrix	FieldMatrix<T>	0	NonSquareMatrixException	$.isSquare()
39910	87	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < m
39910	87	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	row < $
39911	94	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	NIL-FOR	$ < m
39911	94	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	col < $
39912	99	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < col
39912	99	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	NIL-FOR	row < $
39913	102	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	i	int	0	NIL-FOR	$ < row
39913	102	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	i < $
39914	110	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < m
39914	110	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	row < $
39915	113	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	i	int	0	NIL-FOR	$ < col
39915	113	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	NIL-FOR	i < $
539	118	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	THIS	FieldLUDecompositionImpl	0	DEF	$.lu[nonZero][col].equals($.field.getZero())
539	118	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	nonZero	int	0	DEF	lu[$][col].equals(field.getZero())
539	118	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	DEF	lu[nonZero][$].equals(field.getZero())
540	125	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	nonZero	int	0	RET	$ >= m
540	125	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	RET	nonZero >= $
541	131	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	nonZero	int	0	DEF	$ != col
541	131	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	DEF	nonZero != $
39916	133	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	i	int	0	NIL-FOR	$ < m
39916	133	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	i < $
39917	146	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < m
39917	146	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	row < $
542	156	8	FieldLUDecompositionImpl.java	getL	THIS	FieldLUDecompositionImpl	0	DEF	$.singular
542	156	8	FieldLUDecompositionImpl.java	getL	THIS	FieldLUDecompositionImpl	0	DEF	$.cachedL == null
39918	159	12	FieldLUDecompositionImpl.java	getL	i	int	0	NIL-FOR	$ < m
39918	159	12	FieldLUDecompositionImpl.java	getL	m	int	0	NIL-FOR	i < $
39919	161	16	FieldLUDecompositionImpl.java	getL	j	int	0	NIL-FOR	$ < i
39919	161	16	FieldLUDecompositionImpl.java	getL	i	int	0	NIL-FOR	j < $
543	172	8	FieldLUDecompositionImpl.java	getU	THIS	FieldLUDecompositionImpl	0	DEF	$.singular
543	172	8	FieldLUDecompositionImpl.java	getU	THIS	FieldLUDecompositionImpl	0	DEF	$.cachedU == null
39920	175	12	FieldLUDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < m
39920	175	12	FieldLUDecompositionImpl.java	getU	m	int	0	NIL-FOR	i < $
39921	177	16	FieldLUDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < m
39921	177	16	FieldLUDecompositionImpl.java	getU	m	int	0	NIL-FOR	j < $
544	187	8	FieldLUDecompositionImpl.java	getP	THIS	FieldLUDecompositionImpl	0	DEF	$.cachedP == null
544	187	8	FieldLUDecompositionImpl.java	getP	THIS	FieldLUDecompositionImpl	0	DEF	$.singular
39922	190	12	FieldLUDecompositionImpl.java	getP	i	int	0	NIL-FOR	$ < m
39922	190	12	FieldLUDecompositionImpl.java	getP	m	int	0	NIL-FOR	i < $
545	204	8	FieldLUDecompositionImpl.java	getDeterminant	THIS	FieldLUDecompositionImpl	1	RET	$.singular
39923	209	12	FieldLUDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < m
39923	209	12	FieldLUDecompositionImpl.java	getDeterminant	m	int	0	NIL-FOR	i < $
1146	99	8	FirstMoment.java	increment	THIS	FirstMoment	0	DEF	$.n == 0
1372	42	8	FixedGenerationCount.java	FixedGenerationCount	maxGenerations	int	0	IllegalArgumentException	$ <= 0
1373	56	8	FixedGenerationCount.java	isSatisfied	THIS	FixedGenerationCount	0	RET	$.numGenerations < $.maxGenerations
1123	85	8	FourthMoment.java	increment	THIS	FourthMoment	0	DEF	$.n < 1
356	178	8	Fraction.java	Fraction	overflow	long	0	FractionConversionException	a0 > $
356	178	8	Fraction.java	Fraction	a0	long	0	FractionConversionException	$ > overflow
357	184	8	Fraction.java	Fraction	a0	long	0	RET	Math.abs($ - value) < epsilon
357	184	8	Fraction.java	Fraction	value	double	0	RET	Math.abs(a0 - $) < epsilon
357	184	8	Fraction.java	Fraction	epsilon	double	0	RET	Math.abs(a0 - value) < $
39701	200	8	Fraction.java	Fraction	stop	boolean	0	NIL-DOWHILE	$
358	206	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	q2 > $
358	206	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	p2 > $
358	206	12	Fraction.java	Fraction	p2	long	0	FractionConversionException	$ > overflow
358	206	12	Fraction.java	Fraction	q2	long	0	FractionConversionException	$ > overflow
359	211	12	Fraction.java	Fraction	convergent	double	1	DEF	Math.abs($ - value) > epsilon
359	211	12	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
359	211	12	Fraction.java	Fraction	n	int	1	DEF	$ < maxIterations
359	211	12	Fraction.java	Fraction	value	double	1	DEF	Math.abs(convergent - $) > epsilon
359	211	12	Fraction.java	Fraction	epsilon	double	1	DEF	Math.abs(convergent - value) > $
359	211	12	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
359	211	12	Fraction.java	Fraction	maxIterations	int	1	DEF	n < $
360	223	8	Fraction.java	Fraction	n	int	0	FractionConversionException	$ >= maxIterations
360	223	8	Fraction.java	Fraction	maxIterations	int	0	FractionConversionException	n >= $
361	227	8	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
361	227	8	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
362	254	8	Fraction.java	Fraction	den	int	0	DEF	$ == 0
363	258	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
364	259	12	Fraction.java	Fraction	num	int	0	DEF	$ == Integer.MIN_VALUE
364	259	12	Fraction.java	Fraction	den	int	0	DEF	$ == Integer.MIN_VALUE
365	268	8	Fraction.java	Fraction	d	int	0	DEF	$ > 1
366	274	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
367	288	8	Fraction.java	abs	THIS	Fraction	1	DEF	$.numerator >= 0
368	331	8	Fraction.java	equals	THIS	Fraction	1	DEF	$ == other
368	331	8	Fraction.java	equals	other	Object	1	DEF	this == $
369	333	15	Fraction.java	equals	other	Object	1	DEF	$ == null
370	411	8	Fraction.java	negate	THIS	Fraction	0	DEF	$.numerator==Integer.MIN_VALUE
371	483	8	Fraction.java	addSub	fraction	Fraction	0	DEF	$ == null
372	487	8	Fraction.java	addSub	THIS	Fraction	0	RET	$.numerator == 0
373	490	8	Fraction.java	addSub	THIS	Fraction	0	RET	fraction.$.numerator == 0
373	490	8	Fraction.java	addSub	fraction	Fraction	0	RET	$.numerator == 0
374	496	8	Fraction.java	addSub	d1	int	0	RET	$==1
375	520	8	Fraction.java	addSub	w	BigInteger	0	DEF	$.bitLength() > 31
376	540	8	Fraction.java	multiply	fraction	Fraction	0	DEF	$ == null
377	543	8	Fraction.java	multiply	THIS	Fraction	0	RET	fraction.$.numerator == 0
377	543	8	Fraction.java	multiply	THIS	Fraction	0	RET	$.numerator == 0
377	543	8	Fraction.java	multiply	fraction	Fraction	0	RET	$.numerator == 0
378	575	8	Fraction.java	divide	fraction	Fraction	0	DEF	$ == null
379	578	8	Fraction.java	divide	THIS	Fraction	0	DEF	fraction.$.numerator == 0
379	578	8	Fraction.java	divide	fraction	Fraction	0	DEF	$.numerator == 0
380	607	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$ == 0
381	612	8	Fraction.java	getReducedFraction	numerator	int	0	RET	$==0
382	616	8	Fraction.java	getReducedFraction	numerator	int	0	DEF	($&1)==0
382	616	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
383	619	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$ < 0
384	620	12	Fraction.java	getReducedFraction	numerator	int	0	DEF	$==Integer.MIN_VALUE
384	620	12	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
385	648	8	Fraction.java	toString	THIS	Fraction	1	DEF	$.denominator == 1
386	650	15	Fraction.java	toString	THIS	Fraction	1	DEF	$.numerator == 0
340	175	8	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Fraction
341	177	15	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
342	205	8	FractionFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
343	229	8	FractionFormat.java	parse	num	Number	0	RET	$ == null
344	262	8	FractionFormat.java	parse	den	Number	0	RET	$ == null
40801	85	8	Frequency.java	toString	iter	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
1258	113	8	Frequency.java	addValue	v	Object	1	DEF	$ instanceof Comparable<?>
1259	134	8	Frequency.java	addValue	v	Comparable<?>	0	DEF	$ instanceof Integer
1260	139	12	Frequency.java	addValue	count	Long	1	DEF	$ == null
40802	216	8	Frequency.java	getSumFreq	iterator	Iterator<Long>	0	NIL-WHILE	$.hasNext()
1261	243	8	Frequency.java	getCount	v	Comparable<?>	0	RET	$ instanceof Integer
1262	249	12	Frequency.java	getCount	count	Long	0	DEF	$ != null
1263	316	8	Frequency.java	getPct	sumFreq	long	0	RET	$ == 0
1264	381	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	$.getSumFreq() == 0
1265	384	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	$ instanceof Integer
1266	388	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	DEF	$ == null
1267	395	12	Frequency.java	getCumFreq	value	Long	0	DEF	$ != null
1268	402	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.firstKey()) < 0
1268	402	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.firstKey()) < 0
1268	402	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.firstKey()) < 0
1269	406	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.lastKey()) >= 0
1269	406	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.lastKey()) >= 0
1269	406	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.lastKey()) >= 0
40803	411	8	Frequency.java	getCumFreq	values	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
1270	413	12	Frequency.java	getCumFreq	nextValue	Comparable<?>	1	DEF	c.compare(v, $) > 0
1270	413	12	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	1	DEF	$.compare(v, nextValue) > 0
1270	413	12	Frequency.java	getCumFreq	v	Comparable<?>	1	DEF	c.compare($, nextValue) > 0
1271	491	8	Frequency.java	getCumPct	sumFreq	long	0	RET	$ == 0
1272	577	8	Frequency.java	equals	THIS	Frequency	0	RET	$ == obj
1272	577	8	Frequency.java	equals	obj	Object	0	RET	this == $
1273	579	8	Frequency.java	equals	obj	Object	0	RET	$ == null
1274	581	8	Frequency.java	equals	obj	Object	0	RET	$ instanceof Frequency
1275	584	8	Frequency.java	equals	THIS	Frequency	1	RET	$.freqTable == null
1276	585	12	Frequency.java	equals	THIS	Frequency	0	RET	other.$.freqTable != null
1276	585	12	Frequency.java	equals	other	Frequency	0	RET	$.freqTable != null
1277	587	15	Frequency.java	equals	THIS	Frequency	0	RET	$.freqTable.equals(other.$.freqTable)
1277	587	15	Frequency.java	equals	other	Frequency	0	RET	freqTable.equals($.freqTable)
1280	81	8	GLSMultipleLinearRegression.java	getOmegaInverse	THIS	GLSMultipleLinearRegression	0	DEF	$.OmegaInverse == null
1429	91	8	Gamma.java	logGamma	x	double	1	DEF	$ <= 0.0
1429	91	8	Gamma.java	logGamma	x	double	1	DEF	Double.isNaN($)
40929	97	12	Gamma.java	logGamma	i	int	0	NIL-FOR	$ > 0
1430	159	8	Gamma.java	regularizedGammaP	a	double	1	DEF	$ <= 0.0
1430	159	8	Gamma.java	regularizedGammaP	a	double	1	DEF	Double.isNaN($)
1430	159	8	Gamma.java	regularizedGammaP	x	double	1	DEF	$ < 0.0
1430	159	8	Gamma.java	regularizedGammaP	x	double	1	DEF	Double.isNaN($)
1431	161	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ == 0.0
1432	163	15	Gamma.java	regularizedGammaP	a	double	1	DEF	$ >= 1.0
1432	163	15	Gamma.java	regularizedGammaP	a	double	1	DEF	x > $
1432	163	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ > a
40930	172	12	Gamma.java	regularizedGammaP	n	double	0	NIL-WHILE	$ < maxIterations
40930	172	12	Gamma.java	regularizedGammaP	an	double	0	NIL-WHILE	Math.abs($) > epsilon
40930	172	12	Gamma.java	regularizedGammaP	epsilon	double	0	NIL-WHILE	Math.abs(an) > $
40930	172	12	Gamma.java	regularizedGammaP	maxIterations	int	0	NIL-WHILE	n < $
1433	180	12	Gamma.java	regularizedGammaP	n	double	1	MaxIterationsExceededException	$ >= maxIterations
1433	180	12	Gamma.java	regularizedGammaP	maxIterations	int	1	MaxIterationsExceededException	n >= $
1434	234	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	Double.isNaN($)
1434	234	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ <= 0.0
1434	234	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < 0.0
1434	234	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	Double.isNaN($)
1435	236	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ == 0.0
1436	238	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	x < $
1436	238	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ < 1.0
1436	238	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < a
1437	292	8	Gamma.java	digamma	x	double	0	RET	$ <= S_LIMIT
1437	292	8	Gamma.java	digamma	x	double	0	RET	$ > 0
1438	298	8	Gamma.java	digamma	x	double	0	RET	$ >= C_LIMIT
1439	321	8	Gamma.java	trigamma	x	double	0	RET	$ > 0
1439	321	8	Gamma.java	trigamma	x	double	0	RET	$ <= S_LIMIT
1440	325	8	Gamma.java	trigamma	x	double	0	RET	$ >= C_LIMIT
400	73	8	GammaDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
401	98	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
402	101	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
403	113	8	GammaDistributionImpl.java	setAlpha	alpha	double	0	DEF	$ <= 0.0
404	135	8	GammaDistributionImpl.java	setBeta	beta	double	0	DEF	$ <= 0.0
405	158	8	GammaDistributionImpl.java	density	x	Double	0	RET	$ < 0
406	194	8	GammaDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
407	220	8	GammaDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
40864	172	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	$.getCostEvaluations() < 2
40864	172	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	Math.abs($.cost) > $.convergence
40864	172	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	Math.abs(previous - $.cost) > ($.cost * $.steadyStateThreshold)
40864	172	8	GaussNewtonEstimator.java	estimate	previous	double	0	NIL-DOWHILE	Math.abs($ - cost) > (cost * steadyStateThreshold)
40865	178	12	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	i < $.measurements.$.length
40865	178	12	GaussNewtonEstimator.java	estimate	i	int	0	NIL-FOR	$ < measurements.length
1389	179	16	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	DEF	$.measurements [i].isIgnored()
1389	179	16	GaussNewtonEstimator.java	estimate	i	int	0	DEF	measurements [$].isIgnored()
40866	185	20	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	j < $.parameters.$.length
40866	185	20	GaussNewtonEstimator.java	estimate	j	int	0	NIL-FOR	$ < parameters.length
40867	191	20	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	k < $.parameters.$.length
40867	191	20	GaussNewtonEstimator.java	estimate	k	int	0	NIL-FOR	$ < parameters.length
40868	193	24	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	l < $.parameters.$.length
40868	193	24	GaussNewtonEstimator.java	estimate	l	int	0	NIL-FOR	$ < parameters.length
40869	211	16	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	i < $.parameters.$.length
40869	211	16	GaussNewtonEstimator.java	estimate	i	int	0	NIL-FOR	$ < parameters.length
40700	73	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
40701	86	12	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.rows
40701	86	12	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < rows
40702	94	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	j < $.cols
40702	94	16	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
40703	99	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	k < $.cols
40703	99	16	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
40704	102	20	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	l < $.cols
40704	102	20	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < cols
40705	119	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.cols
40705	119	16	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < cols
1057	128	12	GaussNewtonOptimizer.java	doOptimize	previous	VectorialPointValuePair	0	DEF	$ != null
1367	84	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	IllegalArgumentException	$ < 0
1367	84	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	IllegalArgumentException	$ > 1
1368	87	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	IllegalArgumentException	$ < 0
1368	87	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	IllegalArgumentException	$ > 1
40852	107	8	GeneticAlgorithm.java	evolve	current	Population	0	NIL-WHILE	condition.isSatisfied($)
40852	107	8	GeneticAlgorithm.java	evolve	condition	StoppingCondition	0	NIL-WHILE	$.isSatisfied(current)
40853	140	8	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	NIL-WHILE	$.getPopulationSize() < $.getPopulationLimit()
1369	145	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getCrossoverRate()
1369	145	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getCrossoverRate()
1370	151	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getMutationRate()
1370	151	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getMutationRate()
1371	161	12	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	DEF	$.getPopulationSize() < $.getPopulationLimit()
1144	107	8	GeometricMean.java	getResult	THIS	GeometricMean	1	RET	$.sumOfLogs.getN() > 0
1145	195	8	GeometricMean.java	checkEmpty	THIS	GeometricMean	0	DEF	$.getN() > 0
41016	101	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
41016	101	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1480	172	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stabilityReduction	double	1	DEF	$ > 0.9999
1480	172	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stabilityReduction	double	1	DEF	$ < 0.0001
1481	207	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl1	double	1	DEF	$ < 0.0001
1481	207	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl1	double	1	DEF	$ > 0.9999
1482	213	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl2	double	1	DEF	$ < 0.0001
1482	213	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl2	double	1	DEF	$ > 0.9999
1483	219	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl3	double	1	DEF	$ > 0.9999
1483	219	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl3	double	1	DEF	$ < 0.0001
1484	225	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl4	double	1	DEF	$ < 1.0001
1484	225	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl4	double	1	DEF	$ > 999.9
1485	259	4	GraggBulirschStoerIntegrator.java	setOrderControl	maxOrder	int	0	DEF	$ % 2 != 0
1485	259	4	GraggBulirschStoerIntegrator.java	setOrderControl	maxOrder	int	0	DEF	$ <= 6
1486	263	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl1	double	1	DEF	$ > 0.9999
1486	263	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl1	double	1	DEF	$ < 0.0001
1487	269	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl2	double	1	DEF	$ < 0.0001
1487	269	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl2	double	1	DEF	$ > 0.9999
1488	311	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence == null
1488	311	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence.$.length != size
1488	311	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	DEF	sequence.length != $
1489	320	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
40974	322	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
40974	322	6	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
40975	327	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
40975	327	6	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
40976	335	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
40976	335	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
40977	340	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
40977	340	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
40978	342	6	GraggBulirschStoerIntegrator.java	initializeArrays	l	int	0	NIL-FOR	$ < k
40978	342	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	l < $
1490	365	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudif	int	1	DEF	$ >= 7
1490	365	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudif	int	1	DEF	$ <= 0
1491	379	4	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	1	DEF	$.vecAbsoluteTolerance == null
40979	380	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
40979	380	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
40979	380	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
40980	385	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
40980	385	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
40980	385	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
40981	421	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
40981	421	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
40981	421	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
40982	428	4	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	NIL-FOR	$ < n
40982	428	4	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	NIL-FOR	j < $
1492	430	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	DEF	2 * $ == n
1492	430	6	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	DEF	2 * j == $
40983	436	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
40983	436	6	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
40983	436	6	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
1493	445	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	$.performTest
1493	445	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	k < $.maxIter
1493	445	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	j <= $.maxChecks
1493	445	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	RET	$ <= maxChecks
1493	445	6	GraggBulirschStoerIntegrator.java	tryStep	k	int	0	RET	$ < maxIter
40984	447	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < y0.$.length
40984	447	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < y0.length
40984	447	8	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	l < $.length
40985	452	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < y0.$.length
40985	452	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < y0.length
40985	452	8	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	l < $.length
1494	456	8	GraggBulirschStoerIntegrator.java	tryStep	initialNorm	double	0	RET	deltaNorm > 4 * Math.max(1.0e-15, $)
1494	456	8	GraggBulirschStoerIntegrator.java	tryStep	deltaNorm	double	0	RET	$ > 4 * Math.max(1.0e-15, initialNorm)
40986	464	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
40986	464	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
40986	464	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
40987	483	4	GraggBulirschStoerIntegrator.java	extrapolate	j	int	0	NIL-FOR	$ < k
40987	483	4	GraggBulirschStoerIntegrator.java	extrapolate	k	int	0	NIL-FOR	j < $
40988	484	6	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
40988	484	6	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
40988	484	6	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
40989	492	4	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
40989	492	4	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
40989	492	4	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
40990	517	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length-1
40990	517	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length-1
40991	523	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length
40991	523	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length
40992	530	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < $.sequence[k]
40992	530	6	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < sequence[k]
40992	530	6	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	l < sequence[$]
1495	536	4	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1495	536	4	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
1496	542	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
40993	545	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < yMidDots.$.length
40993	545	6	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < yMidDots.length
40993	545	6	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	0	NIL-FOR	j < $.length
1497	566	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
1497	566	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
40994	587	4	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
1498	592	6	GraggBulirschStoerIntegrator.java	integrate	newStep	boolean	0	DEF	$
1499	597	8	GraggBulirschStoerIntegrator.java	integrate	firstStepAlreadyComputed	boolean	0	DEF	$
1500	601	8	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1501	607	10	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1502	620	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize < t
1502	620	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize > t
1502	620	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1502	620	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1502	620	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
1502	620	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
40995	629	6	GraggBulirschStoerIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
1503	634	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.tryStep($.stepStart, y, $.stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1503	634	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	tryStep(stepStart, y, stepSize, $, scale, fk[$], ($ == 0) ? yMidDots[0] : diagonal[$-1], ($ == 0) ? y1 : y1Diag[$-1], yTmp)
1503	634	8	GraggBulirschStoerIntegrator.java	integrate	y1	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? $ : y1Diag[k-1], yTmp)
1503	634	8	GraggBulirschStoerIntegrator.java	integrate	yTmp	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], $)
1503	634	8	GraggBulirschStoerIntegrator.java	integrate	diagonal	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : $[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1503	634	8	GraggBulirschStoerIntegrator.java	integrate	y1Diag	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : $[k-1], yTmp)
1503	634	8	GraggBulirschStoerIntegrator.java	integrate	fk	double[][][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, $[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1503	634	8	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? $[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1503	634	8	GraggBulirschStoerIntegrator.java	integrate	scale	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, $, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1503	634	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	1	DEF	tryStep(stepStart, $, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1504	647	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 0
40996	656	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < y0.$.length
40996	656	12	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
40996	656	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
1505	662	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > 1.0e15
1505	662	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > maxError
1505	662	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ > 1
1505	662	12	GraggBulirschStoerIntegrator.java	integrate	maxError	double	1	DEF	error > $
1506	683	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1506	683	16	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
1507	686	18	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1508	695	20	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
1508	695	20	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
1509	701	22	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1509	701	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1509	701	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1510	713	16	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1511	721	18	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
1511	721	18	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
1512	726	20	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1512	726	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1512	726	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1513	737	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > 1.0
1514	739	18	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1514	739	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1514	739	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1515	750	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ <= 1.0
1515	750	16	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1515	750	16	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1516	764	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.denseOutput
1516	764	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
40997	767	8	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
40997	767	8	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
40998	776	8	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < mu
40998	776	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	NIL-FOR	l < $
40999	782	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
40999	782	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
40999	782	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
41000	785	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k - l2
41000	785	10	GraggBulirschStoerIntegrator.java	integrate	l2	int	0	NIL-FOR	j <= k - $
41000	785	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $ - l2
41001	788	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
41001	788	12	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
41001	788	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
41002	793	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
41002	793	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
41002	793	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
41003	798	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
41003	798	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
41004	799	12	GraggBulirschStoerIntegrator.java	integrate	m	int	0	NIL-FOR	$ >= 2 * (l + 1)
41004	799	12	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	m >= 2 * ($ + 1)
41005	800	14	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
41005	800	14	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
41005	800	14	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
1517	808	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	DEF	$ >= 0
1518	815	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.useInterpolationError
1519	820	12	GraggBulirschStoerIntegrator.java	integrate	interpError	double	0	DEF	$ > 10.0
1520	827	10	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1521	829	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.evaluateStep(interpolator)
1521	829	12	GraggBulirschStoerIntegrator.java	integrate	interpolator	AbstractStepInterpolator	0	DEF	eventsHandlersManager.evaluateStep($)
1522	831	16	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	Math.abs(dt) > Math.ulp($.stepStart)
1522	831	16	GraggBulirschStoerIntegrator.java	integrate	dt	double	0	DEF	Math.abs($) > Math.ulp(stepStart)
1523	841	8	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1524	849	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1525	856	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.stop()
1526	867	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.reset($.stepStart, y)
1526	867	8	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1526	867	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	eventsHandlersManager.reset(stepStart, $)
1527	874	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ == 1
1528	876	10	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
1529	879	15	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ <= targetIter
1529	879	15	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k <= $
1530	881	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k-1] < $.orderControl1 * $.costPerTimeUnit[k]
1530	881	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1531	883	17	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
1531	883	17	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
1532	888	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k-2] < $.orderControl1 * $.costPerTimeUnit[k-1]
1532	888	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$-2] < orderControl1 * costPerTimeUnit[$-1]
1532	888	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 2
1533	892	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[optimalIter]
1533	892	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	0	DEF	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[$]
1533	892	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[optimalIter]
1534	897	8	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	1	DEF	$
1535	904	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	1	DEF	$ <= k
1535	904	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	optimalIter <= $
1536	907	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
1536	907	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ < targetIter
1536	907	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
1536	907	12	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k < $
1537	926	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1538	932	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	1	DEF	$
1567	111	4	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ < 0
1568	118	6	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms != null
41037	120	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
41037	120	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
41037	120	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
41038	124	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
41038	124	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
41038	124	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
1569	131	6	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ <= 4
41039	135	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.errfac.$.length
41039	135	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < errfac.length
41040	139	10	GraggBulirschStoerStepInterpolator.java	resetTables	j	int	0	NIL-FOR	$ <= i
41040	139	10	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	j <= $
1570	210	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	1	DEF	interpolator.$.polynoms == null
1570	210	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	interpolator	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms == null
41041	215	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.polynoms.$.length
41041	215	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	i	int	0	NIL-FOR	$ < polynoms.length
1571	238	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms.$.length <= (mu + 4)
1571	238	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms == null
1571	238	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	polynoms.length <= ($ + 4)
41042	244	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
41042	244	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	i	int	0	NIL-FOR	$ < currentState.length
1572	257	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	RET	$ < 0
1573	265	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 0
1574	269	8	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 1
1575	273	10	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 2
41043	277	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	j	int	0	NIL-FOR	$ <= mu
41043	277	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	NIL-FOR	j <= $
1576	297	4	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree >= 5
41044	298	6	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
41044	298	6	GraggBulirschStoerStepInterpolator.java	estimateError	i	int	0	NIL-FOR	$ < currentState.length
41045	324	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < dimension
41045	324	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	dimension	int	0	NIL-FOR	i < $
1577	333	8	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree > 3
41046	336	12	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ > 3
1578	347	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.h == 0
41047	367	4	GraggBulirschStoerStepInterpolator.java	writeExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
41047	367	4	GraggBulirschStoerStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ <= currentDegree
41048	368	6	GraggBulirschStoerStepInterpolator.java	writeExternal	l	int	0	NIL-FOR	$ < dimension
41048	368	6	GraggBulirschStoerStepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	l < $
41049	389	4	GraggBulirschStoerStepInterpolator.java	readExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
41049	389	4	GraggBulirschStoerStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ <= currentDegree
41050	390	6	GraggBulirschStoerStepInterpolator.java	readExternal	l	int	0	NIL-FOR	$ < dimension
41050	390	6	GraggBulirschStoerStepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	l < $
40609	167	8	HarmonicCoefficientsGuesser.java	sortObservations	THIS	HarmonicCoefficientsGuesser	0	NIL-FOR	j < $.observations.$.length
40609	167	8	HarmonicCoefficientsGuesser.java	sortObservations	j	int	0	NIL-FOR	$ < observations.length
968	170	12	HarmonicCoefficientsGuesser.java	sortObservations	prec	WeightedObservedPoint	0	DEF	curr.getX() < $.getX()
968	170	12	HarmonicCoefficientsGuesser.java	sortObservations	curr	WeightedObservedPoint	0	DEF	$.getX() < prec.getX()
40610	174	16	HarmonicCoefficientsGuesser.java	sortObservations	i	int	0	NIL-WHILE	$ >= 0
40610	174	16	HarmonicCoefficientsGuesser.java	sortObservations	mI	WeightedObservedPoint	0	NIL-WHILE	curr.getX() < $.getX()
40610	174	16	HarmonicCoefficientsGuesser.java	sortObservations	curr	WeightedObservedPoint	0	NIL-WHILE	$.getX() < mI.getX()
969	176	20	HarmonicCoefficientsGuesser.java	sortObservations	i	int	1	DEF	$-- != 0
40611	208	8	HarmonicCoefficientsGuesser.java	guessAOmega	THIS	HarmonicCoefficientsGuesser	0	NIL-FOR	i < $.observations.$.length
40611	208	8	HarmonicCoefficientsGuesser.java	guessAOmega	i	int	0	NIL-FOR	$ < observations.length
970	240	8	HarmonicCoefficientsGuesser.java	guessAOmega	c1	double	0	OptimizationException	$ / c2 < 0.0
970	240	8	HarmonicCoefficientsGuesser.java	guessAOmega	c2	double	0	OptimizationException	c1 / $ < 0.0
970	240	8	HarmonicCoefficientsGuesser.java	guessAOmega	c2	double	0	OptimizationException	$ / c3 < 0.0
970	240	8	HarmonicCoefficientsGuesser.java	guessAOmega	c3	double	0	OptimizationException	c2 / $ < 0.0
40612	258	8	HarmonicCoefficientsGuesser.java	guessPhi	THIS	HarmonicCoefficientsGuesser	0	NIL-FOR	i < $.observations.$.length
40612	258	8	HarmonicCoefficientsGuesser.java	guessPhi	i	int	0	NIL-FOR	$ < observations.length
966	82	12	HarmonicFitter.java	fit	THIS	HarmonicFitter	0	OptimizationException	$.parameters == null
967	84	16	HarmonicFitter.java	fit	THIS	HarmonicFitter	0	OptimizationException	observations.$.length < 4
967	84	16	HarmonicFitter.java	fit	observations	WeightedObservedPoint[]	0	OptimizationException	$.length < 4
41075	111	4	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	j < y0.$.length
41075	111	4	HighamHall54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
41075	111	4	HighamHall54Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
41076	113	6	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	l < $.staticE.$.length
41076	113	6	HighamHall54Integrator.java	estimateError	l	int	0	NIL-FOR	$ < staticE.length
41074	85	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
41074	85	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
471	56	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	DEF	numberOfSuccesses > $
471	56	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	numberOfSuccesses	int	0	DEF	$ > populationSize
472	61	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	DEF	sampleSize > $
472	61	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	sampleSize	int	0	DEF	$ > populationSize
473	85	8	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x < $[0]
473	85	8	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < domain[0]
474	87	15	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x >= $[1]
474	87	15	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= domain[1]
475	199	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x < $[0]
475	199	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x > $[1]
475	199	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ < domain[0]
475	199	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ > domain[1]
476	230	8	HypergeometricDistributionImpl.java	setNumberOfSuccesses	num	int	0	DEF	$ < 0
477	244	8	HypergeometricDistributionImpl.java	setPopulationSize	size	int	0	DEF	$ <= 0
478	258	8	HypergeometricDistributionImpl.java	setSampleSize	size	int	0	DEF	$ < 0
479	280	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x < $[0]
479	280	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ < domain[0]
480	282	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x > $[1]
480	282	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ > domain[1]
39705	308	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x0	int	0	NIL-WHILE	$ != x1
39705	308	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x1	int	0	NIL-WHILE	x0 != $
40770	61	8	KMeansPlusPlusClusterer.java	cluster	count	int	0	NIL-FOR	$ < max
40770	61	8	KMeansPlusPlusClusterer.java	cluster	max	int	0	NIL-FOR	count < $
1234	66	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	0	DEF	newCenter.equals($.cluster.getCenter())
1234	66	16	KMeansPlusPlusClusterer.java	cluster	newCenter	T	0	DEF	$.equals(cluster.getCenter())
1235	71	12	KMeansPlusPlusClusterer.java	cluster	clusteringChanged	boolean	0	RET	$
40771	115	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	NIL-WHILE	$.size() < k
40771	115	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	NIL-WHILE	resultSet.size() < $
40772	119	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < pointSet.size()
40772	119	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	pointSet	List<T>	0	NIL-FOR	i < $.size()
40773	130	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	THIS	KMeansPlusPlusClusterer	0	NIL-FOR	i < dx2.$.length
40773	130	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < dx2.length
40773	130	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	dx2	double[]	0	NIL-FOR	i < $.length
1236	131	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	dx2[$] >= r
1236	131	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	r	double	0	DEF	dx2[i] >= $
1236	131	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	dx2	double[]	0	DEF	$[i] >= r
1237	157	12	KMeansPlusPlusClusterer.java	getNearestCluster	distance	double	0	DEF	$ < minDistance
1237	157	12	KMeansPlusPlusClusterer.java	getNearestCluster	minDistance	double	0	DEF	distance < $
1139	94	8	Kurtosis.java	increment	THIS	Kurtosis	1	DEF	$.incMoment
1140	108	8	Kurtosis.java	getResult	THIS	Kurtosis	0	DEF	$.moment.getN() > 3
1141	110	16	Kurtosis.java	getResult	THIS	Kurtosis	1	DEF	$.moment.$.n <= 3
1141	110	16	Kurtosis.java	getResult	variance	double	1	DEF	$ < 10E-20
1142	128	8	Kurtosis.java	clear	THIS	Kurtosis	1	DEF	$.incMoment
1143	166	8	Kurtosis.java	evaluate	THIS	Kurtosis	0	DEF	$.test(values, begin, length)
1143	166	8	Kurtosis.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1143	166	8	Kurtosis.java	evaluate	begin	int	0	DEF	test(values, $, length)
1143	166	8	Kurtosis.java	evaluate	length	int	0	DEF	test(values, begin, $)
1143	166	8	Kurtosis.java	evaluate	length	int	0	DEF	$ > 3
40749	177	12	Kurtosis.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
40749	177	12	Kurtosis.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
40749	177	12	Kurtosis.java	evaluate	length	int	0	NIL-FOR	i < begin + $
925	80	8	LUDecompositionImpl.java	LUDecompositionImpl	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
40556	92	8	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
40556	92	8	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
40557	99	8	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	$ < m
40557	99	8	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	col < $
40558	104	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < col
40558	104	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	row < $
40559	107	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < row
40559	107	16	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	i < $
40560	116	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
40560	116	12	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
40561	119	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < col
40561	119	16	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	i < $
926	125	16	LUDecompositionImpl.java	LUDecompositionImpl	sum	double	0	DEF	Math.abs($) > largest
926	125	16	LUDecompositionImpl.java	LUDecompositionImpl	largest	double	0	DEF	Math.abs(sum) > $
927	132	12	LUDecompositionImpl.java	LUDecompositionImpl	THIS	LUDecompositionImpl	0	RET	Math.abs($.lu[max][col]) < singularityThreshold
927	132	12	LUDecompositionImpl.java	LUDecompositionImpl	max	int	0	RET	Math.abs(lu[$][col]) < singularityThreshold
927	132	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	RET	Math.abs(lu[max][$]) < singularityThreshold
927	132	12	LUDecompositionImpl.java	LUDecompositionImpl	singularityThreshold	double	0	RET	Math.abs(lu[max][col]) < $
928	138	12	LUDecompositionImpl.java	LUDecompositionImpl	max	int	0	DEF	$ != col
928	138	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	DEF	max != $
40562	142	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < m
40562	142	16	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	i < $
40563	155	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
40563	155	12	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
929	164	8	LUDecompositionImpl.java	getL	THIS	LUDecompositionImpl	0	DEF	$.cachedL == null
929	164	8	LUDecompositionImpl.java	getL	THIS	LUDecompositionImpl	0	DEF	$.singular
40564	167	12	LUDecompositionImpl.java	getL	i	int	0	NIL-FOR	$ < m
40564	167	12	LUDecompositionImpl.java	getL	m	int	0	NIL-FOR	i < $
40565	169	16	LUDecompositionImpl.java	getL	j	int	0	NIL-FOR	$ < i
40565	169	16	LUDecompositionImpl.java	getL	i	int	0	NIL-FOR	j < $
930	180	8	LUDecompositionImpl.java	getU	THIS	LUDecompositionImpl	0	DEF	$.singular
930	180	8	LUDecompositionImpl.java	getU	THIS	LUDecompositionImpl	0	DEF	$.cachedU == null
40566	183	12	LUDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < m
40566	183	12	LUDecompositionImpl.java	getU	m	int	0	NIL-FOR	i < $
40567	185	16	LUDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < m
40567	185	16	LUDecompositionImpl.java	getU	m	int	0	NIL-FOR	j < $
931	195	8	LUDecompositionImpl.java	getP	THIS	LUDecompositionImpl	0	DEF	$.singular
931	195	8	LUDecompositionImpl.java	getP	THIS	LUDecompositionImpl	0	DEF	$.cachedP == null
40568	198	12	LUDecompositionImpl.java	getP	i	int	0	NIL-FOR	$ < m
40568	198	12	LUDecompositionImpl.java	getP	m	int	0	NIL-FOR	i < $
932	212	8	LUDecompositionImpl.java	getDeterminant	THIS	LUDecompositionImpl	1	RET	$.singular
40569	217	12	LUDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < m
40569	217	12	LUDecompositionImpl.java	getDeterminant	m	int	0	NIL-FOR	i < $
1709	60	8	LaguerreSolver.java	LaguerreSolver	f	UnivariateRealFunction	1	DEF	$ instanceof PolynomialFunction
1710	120	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1710	120	8	LaguerreSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1711	121	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1711	121	8	LaguerreSolver.java	solve	max	double	0	RET	f.value($) == 0.0
1712	122	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
1712	122	8	LaguerreSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
1713	126	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	1	RET	$.isBracketing(min, initial, f)
1713	126	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
1713	126	8	LaguerreSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
1713	126	8	LaguerreSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
1714	158	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	DEF	$ instanceof PolynomialFunction
1715	163	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1715	163	8	LaguerreSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1716	164	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1716	164	8	LaguerreSolver.java	solve	max	double	0	RET	f.value($) == 0.0
41103	169	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-FOR	i < coefficients.$.length
41103	169	8	LaguerreSolver.java	solve	i	int	0	NIL-FOR	$ < coefficients.length
41103	169	8	LaguerreSolver.java	solve	coefficients	double[]	0	NIL-FOR	i < $.length
1717	174	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.isRootOK(min, max, z)
1717	174	8	LaguerreSolver.java	solve	z	Complex	0	RET	isRootOK(min, max, $)
1717	174	8	LaguerreSolver.java	solve	min	double	0	RET	isRootOK($, max, z)
1717	174	8	LaguerreSolver.java	solve	max	double	0	RET	isRootOK(min, $, z)
41104	181	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-FOR	i < root.$.length
41104	181	8	LaguerreSolver.java	solve	i	int	0	NIL-FOR	$ < root.length
41104	181	8	LaguerreSolver.java	solve	root	Complex[]	0	NIL-FOR	i < $.length
1718	182	12	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.isRootOK(min, max, root[i])
1718	182	12	LaguerreSolver.java	solve	i	int	0	RET	isRootOK(min, max, root[$])
1718	182	12	LaguerreSolver.java	solve	root	Complex[]	0	RET	isRootOK(min, max, $[i])
1718	182	12	LaguerreSolver.java	solve	min	double	0	RET	isRootOK($, max, root[i])
1718	182	12	LaguerreSolver.java	solve	max	double	0	RET	isRootOK(min, $, root[i])
41105	226	8	LaguerreSolver.java	solveAll	THIS	LaguerreSolver	0	NIL-FOR	i < c.$.length
41105	226	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ < c.length
41105	226	8	LaguerreSolver.java	solveAll	c	Complex[]	0	NIL-FOR	i < $.length
1719	250	8	LaguerreSolver.java	solveAll	n	int	0	DEF	$ < 1
41106	255	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ <= n
41106	255	8	LaguerreSolver.java	solveAll	n	int	0	NIL-FOR	i <= $
41107	261	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ < n
41107	261	8	LaguerreSolver.java	solveAll	n	int	0	NIL-FOR	i < $
41108	268	12	LaguerreSolver.java	solveAll	j	int	0	NIL-FOR	$ >= 0
1720	298	8	LaguerreSolver.java	solve	n	int	0	DEF	$ < 1
41109	316	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-WHILE	i <= $.maximalIterationCount
41109	316	8	LaguerreSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
41110	322	12	LaguerreSolver.java	solve	j	int	0	NIL-FOR	$ >= 0
1721	332	12	LaguerreSolver.java	solve	tolerance	double	0	RET	(z.subtract(oldz)).abs() <= $
1721	332	12	LaguerreSolver.java	solve	z	Complex	0	RET	($.subtract(oldz)).abs() <= tolerance
1721	332	12	LaguerreSolver.java	solve	oldz	Complex	0	RET	(z.subtract($)).abs() <= tolerance
1722	337	12	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	pv.abs() <= $.functionValueAccuracy
1722	337	12	LaguerreSolver.java	solve	pv	Complex	0	RET	$.abs() <= functionValueAccuracy
1723	355	12	LaguerreSolver.java	solve	denominator	Complex	1	DEF	$.equals(new Complex(0.0, 0.0))
1003	114	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DEF	observations.$.length != weights.$.length
1003	114	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DEF	$.length != weights.length
1003	114	8	LeastSquaresConverter.java	LeastSquaresConverter	weights	double[]	0	DEF	observations.length != $.length
1004	147	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DEF	observations.$.length != scale.getColumnDimension()
1004	147	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DEF	$.length != scale.getColumnDimension()
1004	147	8	LeastSquaresConverter.java	LeastSquaresConverter	scale	RealMatrix	0	DEF	observations.length != $.getColumnDimension()
1005	163	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	FunctionEvaluationException	residuals.$.length != $.observations.$.length
1005	163	8	LeastSquaresConverter.java	value	residuals	double[]	0	FunctionEvaluationException	$.length != observations.length
40630	167	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
40630	167	8	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
40630	167	8	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1006	173	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.weights != null
40631	174	12	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
40631	174	12	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
40631	174	12	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1007	178	15	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.scale != null
41144	175	8	LegendreGaussIntegrator.java	integrate	THIS	LegendreGaussIntegrator	0	NIL-FOR	i < $.maximalIterationCount
41144	175	8	LegendreGaussIntegrator.java	integrate	i	int	0	NIL-FOR	$ < maximalIterationCount
1794	187	12	LegendreGaussIntegrator.java	integrate	THIS	LegendreGaussIntegrator	0	RET	i + 1 >= $.minimalIterationCount
1794	187	12	LegendreGaussIntegrator.java	integrate	delta	double	0	RET	$ <= limit
1794	187	12	LegendreGaussIntegrator.java	integrate	limit	double	0	RET	delta <= $
1794	187	12	LegendreGaussIntegrator.java	integrate	i	int	0	RET	$ + 1 >= minimalIterationCount
41145	224	8	LegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
41145	224	8	LegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
41146	225	12	LegendreGaussIntegrator.java	stage	THIS	LegendreGaussIntegrator	0	NIL-FOR	j < $.abscissas.$.length
41146	225	12	LegendreGaussIntegrator.java	stage	j	int	0	NIL-FOR	$ < abscissas.length
40879	242	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.solvedCols
40879	242	6	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < solvedCols
1393	247	6	LevenbergMarquardtEstimator.java	estimate	firstIteration	boolean	0	DEF	$
40880	252	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
40880	252	8	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < cols
1394	254	10	LevenbergMarquardtEstimator.java	estimate	dk	double	0	DEF	$ == 0
1395	270	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	$.cost != 0
40881	271	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
40881	271	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1396	274	10	LevenbergMarquardtEstimator.java	estimate	s	double	0	DEF	$ != 0
40882	276	12	LevenbergMarquardtEstimator.java	estimate	i	int	0	NIL-FOR	$ <= j
40882	276	12	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	i <= $
1397	283	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	maxCosine <= $.orthoTolerance
1397	283	6	LevenbergMarquardtEstimator.java	estimate	maxCosine	double	0	RET	$ <= orthoTolerance
40883	288	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.cols
40883	288	6	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < cols
40884	293	6	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	NIL-FOR	$ < 1.0e-4
40885	296	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
40885	296	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
40886	310	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
40886	310	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1398	320	8	LevenbergMarquardtEstimator.java	estimate	firstIteration	boolean	0	DEF	$
1399	329	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	0.1 * $.cost < previousCost
1399	329	8	LevenbergMarquardtEstimator.java	estimate	previousCost	double	0	DEF	0.1 * cost < $
40887	336	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
40887	336	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
40888	340	10	LevenbergMarquardtEstimator.java	estimate	i	int	0	NIL-FOR	$ <= j
40888	340	10	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	i <= $
40889	345	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
40889	345	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1400	358	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	DEF	$ <= 0.25
1401	361	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	0.1 * $.cost >= previousCost
1401	361	10	LevenbergMarquardtEstimator.java	estimate	tmp	double	0	DEF	$ < 0.1
1401	361	10	LevenbergMarquardtEstimator.java	estimate	previousCost	double	0	DEF	0.1 * cost >= $
1402	366	15	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
1402	366	15	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	DEF	$ >= 0.75
1403	372	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	DEF	$ >= 1.0e-4
40890	376	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
40890	376	10	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < cols
40891	384	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
40891	384	10	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1404	394	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	preRed <= $.costRelativeTolerance
1404	394	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	delta <= $.parRelativeTolerance * xNorm
1404	394	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	Math.abs(actRed) <= $.costRelativeTolerance
1404	394	8	LevenbergMarquardtEstimator.java	estimate	actRed	double	0	RET	Math.abs($) <= costRelativeTolerance
1404	394	8	LevenbergMarquardtEstimator.java	estimate	preRed	double	0	RET	$ <= costRelativeTolerance
1404	394	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	RET	$ <= 2.0
1404	394	8	LevenbergMarquardtEstimator.java	estimate	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
1404	394	8	LevenbergMarquardtEstimator.java	estimate	xNorm	double	0	RET	delta <= parRelativeTolerance * $
1405	403	8	LevenbergMarquardtEstimator.java	estimate	actRed	double	1	EstimationException	Math.abs($) <= 2.2204e-16
1405	403	8	LevenbergMarquardtEstimator.java	estimate	preRed	double	1	EstimationException	$ <= 2.2204e-16
1405	403	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	EstimationException	$ <= 2.0
1406	408	15	LevenbergMarquardtEstimator.java	estimate	delta	double	1	EstimationException	$ <= 2.2204e-16 * xNorm
1406	408	15	LevenbergMarquardtEstimator.java	estimate	xNorm	double	1	EstimationException	delta <= 2.2204e-16 * $
1407	413	15	LevenbergMarquardtEstimator.java	estimate	maxCosine	double	0	EstimationException	$ <= 2.2204e-16
40892	452	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.rank
40892	452	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
40893	455	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.cols
40893	455	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < cols
40894	458	4	LevenbergMarquardtEstimator.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
40895	461	6	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
40895	461	6	LevenbergMarquardtEstimator.java	determineLMParameter	k	int	0	NIL-FOR	i < $
40896	470	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
40896	470	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1408	478	4	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
1408	478	4	LevenbergMarquardtEstimator.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1409	487	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.rank == $.solvedCols
40897	488	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
40897	488	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
40898	493	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
40898	493	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
40899	496	8	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
40899	496	8	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	i < $
40900	508	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
40900	508	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
40901	511	6	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
40901	511	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1410	519	4	LevenbergMarquardtEstimator.java	determineLMParameter	paru	double	0	DEF	$ == 0
1411	527	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
40902	531	4	LevenbergMarquardtEstimator.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1412	534	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
40903	538	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
40903	538	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
40904	545	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
40904	545	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1413	557	6	LevenbergMarquardtEstimator.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1413	557	6	LevenbergMarquardtEstimator.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1413	557	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	Math.abs($) <= 0.1 * delta
1413	557	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1413	557	6	LevenbergMarquardtEstimator.java	determineLMParameter	parl	double	0	RET	$ == 0
1413	557	6	LevenbergMarquardtEstimator.java	determineLMParameter	delta	double	0	RET	Math.abs(fp) <= 0.1 * $
40905	563	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
40905	563	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
40906	567	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
40906	567	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
40907	571	8	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
40907	571	8	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
40908	576	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
40908	576	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1414	583	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	1	DEF	$ > 0
1415	585	13	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	DEF	$ < 0
40909	620	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
40909	620	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
40910	622	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
40910	622	6	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
40911	630	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
40911	630	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1416	636	6	LevenbergMarquardtEstimator.java	determineLMDirection	dpj	double	0	DEF	$ != 0
40912	645	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.solvedCols
40912	645	6	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
1417	650	8	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1417	650	8	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1418	654	10	LevenbergMarquardtEstimator.java	determineLMDirection	rkk	double	1	DEF	Math.abs($) < Math.abs(lmDiag[k])
1418	654	10	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	1	DEF	Math.abs(rkk) < Math.abs(lmDiag[$])
1418	654	10	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	1	DEF	Math.abs(rkk) < Math.abs($[k])
40913	672	10	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
40913	672	10	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
40914	693	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
40914	693	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1419	694	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	DEF	nSing == $.solvedCols
1419	694	6	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1419	694	6	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1419	694	6	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1420	697	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	DEF	nSing < $.solvedCols
1420	697	6	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1421	701	4	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ > 0
40915	702	6	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
40916	705	8	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
40916	705	8	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
40917	713	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.lmDir.$.length
40917	713	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
40918	744	4	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
40918	744	4	LevenbergMarquardtEstimator.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
40919	747	6	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
40919	747	6	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
40920	755	4	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
40920	755	4	LevenbergMarquardtEstimator.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
40921	760	6	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.cols
40921	760	6	LevenbergMarquardtEstimator.java	qrDecomposition	i	int	0	NIL-FOR	$ < cols
40922	763	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
40922	763	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
1422	767	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	EstimationException	Double.isNaN($)
1422	767	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	EstimationException	Double.isInfinite($)
1423	772	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1423	772	8	LevenbergMarquardtEstimator.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1424	777	6	LevenbergMarquardtEstimator.java	qrDecomposition	ak2	double	0	RET	$ == 0
40923	797	6	LevenbergMarquardtEstimator.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
40924	800	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
40924	800	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
40925	804	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
40925	804	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
40926	821	4	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
40926	821	4	LevenbergMarquardtEstimator.java	qTy	k	int	0	NIL-FOR	$ < cols
40927	825	6	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.rows
40927	825	6	LevenbergMarquardtEstimator.java	qTy	i	int	0	NIL-FOR	$ < rows
40928	829	6	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.rows
40928	829	6	LevenbergMarquardtEstimator.java	qTy	i	int	0	NIL-FOR	$ < rows
40633	253	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
40633	253	12	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
1009	258	12	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
40634	263	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
40634	263	16	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
1010	265	20	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
1011	281	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.cost != 0
40635	282	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
40635	282	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1012	285	20	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
40636	287	24	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
40636	287	24	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
1013	294	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
1013	294	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
40637	300	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
40637	300	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
40638	305	12	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
40639	308	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
40639	308	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
40640	322	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
40640	322	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1014	332	16	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
1015	341	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost < previousCost
1015	341	16	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost < $
40641	348	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
40641	348	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
40642	352	20	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
40642	352	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
40643	357	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
40643	357	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1016	370	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
1017	373	24	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost >= previousCost
1017	373	24	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
1017	373	24	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost >= $
1018	378	23	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
1018	378	23	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
1019	384	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ >= 1.0e-4
40644	388	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
40644	388	20	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
40645	396	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
40645	396	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1020	406	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
1020	406	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
1020	406	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	Math.abs(actRed) <= $.costRelativeTolerance
1020	406	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	Math.abs($) <= costRelativeTolerance
1020	406	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
1020	406	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
1020	406	16	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
1020	406	16	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
1021	415	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	OptimizationException	Math.abs($) <= 2.2204e-16
1021	415	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	OptimizationException	$ <= 2.2204e-16
1021	415	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	OptimizationException	$ <= 2.0
1022	420	23	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	OptimizationException	$ <= 2.2204e-16 * xNorm
1022	420	23	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	OptimizationException	delta <= 2.2204e-16 * $
1023	425	23	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	OptimizationException	$ <= 2.2204e-16
40646	464	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.rank
40646	464	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
40647	467	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
40647	467	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < cols
40648	470	8	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
40649	473	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
40649	473	12	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
40650	482	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
40650	482	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1024	490	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
1024	490	8	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1025	499	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.rank == $.solvedCols
40651	500	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
40651	500	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
40652	505	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
40652	505	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
40653	508	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
40653	508	16	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
40654	520	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
40654	520	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
40655	523	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
40655	523	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1026	531	8	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
1027	539	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
40656	543	8	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1028	546	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
40657	550	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
40657	550	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
40658	557	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
40658	557	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1029	569	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1029	569	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1029	569	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1029	569	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	Math.abs($) <= 0.1 * delta
1029	569	12	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
1029	569	12	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	Math.abs(fp) <= 0.1 * $
40659	575	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
40659	575	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
40660	579	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
40660	579	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
40661	583	16	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
40661	583	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
40662	588	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
40662	588	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1030	595	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
1031	597	19	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
40663	632	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
40663	632	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
40664	634	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
40664	634	12	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
40665	642	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
40665	642	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1032	648	12	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
40666	657	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
40666	657	12	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
1033	662	16	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1033	662	16	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1034	666	20	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	Math.abs($) < Math.abs(lmDiag[k])
1034	666	20	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	Math.abs(rkk) < Math.abs(lmDiag[$])
1034	666	20	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	Math.abs(rkk) < Math.abs($[k])
40667	684	20	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
40667	684	20	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
40668	704	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
40668	704	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1035	705	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing == $.solvedCols
1035	705	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1035	705	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1035	705	12	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1036	708	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing < $.solvedCols
1036	708	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1037	712	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
40669	713	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
40670	716	16	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
40670	716	16	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
40671	724	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
40671	724	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
40672	755	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
40672	755	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
40673	758	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.jacobian.$.length
40673	758	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < jacobian.length
40674	766	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
40674	766	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
40675	771	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.cols
40675	771	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < cols
40676	773	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.jacobian.$.length
40676	773	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < jacobian.length
1038	777	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	OptimizationException	Double.isNaN($)
1038	777	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	OptimizationException	Double.isInfinite($)
1039	782	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1039	782	16	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1040	787	12	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ == 0
40677	806	12	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
40678	808	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.jacobian.$.length
40678	808	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < jacobian.length
40679	812	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.jacobian.$.length
40679	812	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < jacobian.length
40680	829	8	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
40680	829	8	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < cols
40681	832	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
40681	832	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
40682	836	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
40682	836	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
40614	128	8	LinearConstraint.java	LinearConstraint	THIS	LinearConstraint	0	NIL-FOR	i < sub.$.length
40614	128	8	LinearConstraint.java	LinearConstraint	i	int	0	NIL-FOR	$ < sub.length
40614	128	8	LinearConstraint.java	LinearConstraint	sub	double[]	0	NIL-FOR	i < $.length
973	191	6	LinearConstraint.java	equals	THIS	LinearConstraint	0	RET	$ == other
973	191	6	LinearConstraint.java	equals	other	Object	0	RET	this == $
974	195	6	LinearConstraint.java	equals	other	Object	0	RET	$ == null
987	108	6	LinearObjectiveFunction.java	equals	THIS	LinearObjectiveFunction	0	RET	$ == other
987	108	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	this == $
988	112	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	$ == null
1363	45	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	IllegalArgumentException	$.size() > populationLimit
1363	45	8	ListPopulation.java	ListPopulation	populationLimit	int	0	IllegalArgumentException	chromosomes.size() > $
1364	48	8	ListPopulation.java	ListPopulation	populationLimit	int	0	IllegalArgumentException	$ < 0
1365	63	8	ListPopulation.java	ListPopulation	populationLimit	int	0	IllegalArgumentException	$ < 0
1366	102	12	ListPopulation.java	getFittestChromosome	THIS	ListPopulation	0	DEF	$.chromosome.compareTo(bestChromosome) > 0
1366	102	12	ListPopulation.java	getFittestChromosome	bestChromosome	Chromosome	0	DEF	chromosome.compareTo($) > 0
1645	105	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	MathException	$ > 1
1645	105	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	MathException	$ < 0
1646	110	8	LoessInterpolator.java	LoessInterpolator	robustnessIters	int	0	MathException	$ < 0
1647	155	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	MathException	xval.$.length != yval.$.length
1647	155	8	LoessInterpolator.java	smooth	xval	double[]	0	MathException	$.length != yval.length
1647	155	8	LoessInterpolator.java	smooth	yval	double[]	0	MathException	xval.length != $.length
1648	165	8	LoessInterpolator.java	smooth	n	int	0	MathException	$ == 0
1649	174	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 1
1650	178	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 2
1651	184	8	LoessInterpolator.java	smooth	bandwidthInPoints	int	0	MathException	$ < 2
41089	205	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	NIL-FOR	iter <= $.robustnessIters
41089	205	8	LoessInterpolator.java	smooth	iter	int	0	NIL-FOR	$ <= robustnessIters
41090	208	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
41090	208	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
1652	213	16	LoessInterpolator.java	smooth	i	int	0	DEF	$ > 0
1653	223	16	LoessInterpolator.java	smooth	ileft	int	1	DEF	xval[i] - xval[$] > xval[iright] - xval[i]
1653	223	16	LoessInterpolator.java	smooth	iright	int	1	DEF	xval[i] - xval[ileft] > xval[$] - xval[i]
1653	223	16	LoessInterpolator.java	smooth	i	int	1	DEF	xval[$] - xval[ileft] > xval[iright] - xval[$]
1653	223	16	LoessInterpolator.java	smooth	xval	double[]	1	DEF	$[i] - $[ileft] > $[iright] - $[i]
41091	239	16	LoessInterpolator.java	smooth	k	int	0	NIL-FOR	$ <= iright
41091	239	16	LoessInterpolator.java	smooth	iright	int	0	NIL-FOR	k <= $
1654	243	20	LoessInterpolator.java	smooth	k	int	1	DEF	$ < i
1654	243	20	LoessInterpolator.java	smooth	i	int	1	DEF	k < $
1655	263	16	LoessInterpolator.java	smooth	meanX	double	1	DEF	meanXSquared == $ * $
1655	263	16	LoessInterpolator.java	smooth	meanXSquared	double	1	DEF	$ == meanX * meanX
1656	277	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	iter == $.robustnessIters
1656	277	12	LoessInterpolator.java	smooth	iter	int	0	DEF	$ == robustnessIters
1657	290	12	LoessInterpolator.java	smooth	medianResidual	double	0	DEF	$ == 0
41092	294	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
41092	294	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
1658	323	8	LoessInterpolator.java	updateBandwidthInterval	THIS	LoessInterpolator	0	DEF	right < xval.$.length - 1
1658	323	8	LoessInterpolator.java	updateBandwidthInterval	left	int	0	DEF	xval[right+1] - xval[i] < xval[i] - xval[$]
1658	323	8	LoessInterpolator.java	updateBandwidthInterval	right	int	0	DEF	$ < xval.length - 1
1658	323	8	LoessInterpolator.java	updateBandwidthInterval	right	int	0	DEF	xval[$+1] - xval[i] < xval[i] - xval[left]
1658	323	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	right < $.length - 1
1658	323	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	$[right+1] - $[i] < $[i] - $[left]
1658	323	8	LoessInterpolator.java	updateBandwidthInterval	i	int	0	DEF	xval[right+1] - xval[$] < xval[$] - xval[left]
41093	353	8	LoessInterpolator.java	checkAllFiniteReal	THIS	LoessInterpolator	0	NIL-FOR	i < values.$.length
41093	353	8	LoessInterpolator.java	checkAllFiniteReal	i	int	0	NIL-FOR	$ < values.length
41093	353	8	LoessInterpolator.java	checkAllFiniteReal	values	double[]	0	NIL-FOR	i < $.length
1659	355	12	LoessInterpolator.java	checkAllFiniteReal	x	double	0	MathException	Double.isNaN($)
1659	355	12	LoessInterpolator.java	checkAllFiniteReal	x	double	0	MathException	Double.isInfinite($)
41094	374	8	LoessInterpolator.java	checkStrictlyIncreasing	THIS	LoessInterpolator	0	NIL-FOR	i < xval.$.length
41094	374	8	LoessInterpolator.java	checkStrictlyIncreasing	i	int	0	NIL-FOR	$ < xval.length
41094	374	8	LoessInterpolator.java	checkStrictlyIncreasing	xval	double[]	0	NIL-FOR	i < $.length
1660	375	12	LoessInterpolator.java	checkStrictlyIncreasing	i	int	0	MathException	$ >= 1
1660	375	12	LoessInterpolator.java	checkStrictlyIncreasing	i	int	0	MathException	xval[$ - 1] >= xval[$]
1660	375	12	LoessInterpolator.java	checkStrictlyIncreasing	xval	double[]	0	MathException	$[i - 1] >= $[i]
0	62	12	MathException.java	translate	bundle	ResourceBundle	0	RET	$.getLocale().getLanguage().equals(locale.getLanguage())
0	62	12	MathException.java	translate	locale	Locale	0	RET	bundle.getLocale().getLanguage().equals($.getLanguage())
1299	63	12	MathRuntimeException.java	translate	bundle	ResourceBundle	0	RET	$.getLocale().getLanguage().equals(locale.getLanguage())
1299	63	12	MathRuntimeException.java	translate	locale	Locale	0	RET	bundle.getLocale().getLanguage().equals($.getLanguage())
65	87	8	MathUtils.java	addAndCheck	s	long	0	ArithmeticException	$ < Integer.MIN_VALUE
65	87	8	MathUtils.java	addAndCheck	s	long	0	ArithmeticException	$ > Integer.MAX_VALUE
66	120	8	MathUtils.java	addAndCheck	a	long	1	DEF	$ > b
66	120	8	MathUtils.java	addAndCheck	b	long	1	DEF	a > $
67	126	12	MathUtils.java	addAndCheck	a	long	1	ArithmeticException	$ < 0
68	127	16	MathUtils.java	addAndCheck	b	long	1	ArithmeticException	$ < 0
69	129	20	MathUtils.java	addAndCheck	a	long	1	DEF	Long.MIN_VALUE - b <= $
69	129	20	MathUtils.java	addAndCheck	b	long	1	DEF	Long.MIN_VALUE - $ <= a
70	143	16	MathUtils.java	addAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE - b
70	143	16	MathUtils.java	addAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE - $
71	180	8	MathUtils.java	binomialCoefficient	n	int	0	RET	$ == k
71	180	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 0
71	180	8	MathUtils.java	binomialCoefficient	k	int	0	RET	n == $
72	183	8	MathUtils.java	binomialCoefficient	n	int	0	RET	k == $ - 1
72	183	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == n - 1
72	183	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 1
73	187	8	MathUtils.java	binomialCoefficient	n	int	0	RET	k > $ / 2
73	187	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ > n / 2
74	196	8	MathUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 61
39668	198	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
39668	198	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
75	201	15	MathUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 66
39669	204	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
39669	204	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
39670	218	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
39670	218	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
76	250	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	$ == k
76	250	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 0
76	250	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	n == $
77	253	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	k == $ - 1
77	253	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == n - 1
77	253	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 1
78	256	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	k > $/2
78	256	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ > n/2
79	259	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	$ < 67
39671	264	8	MathUtils.java	binomialCoefficientDouble	i	int	0	NIL-FOR	$ <= k
39671	264	8	MathUtils.java	binomialCoefficientDouble	k	int	0	NIL-FOR	i <= $
80	291	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ == k
80	291	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 0
80	291	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	n == $
81	294	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	k == $ - 1
81	294	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 1
81	294	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == n - 1
82	302	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 67
83	310	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 1030
84	314	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	k > $ / 2
84	314	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ > n / 2
39672	324	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n
39672	324	8	MathUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $
39673	329	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= k
39673	329	8	MathUtils.java	binomialCoefficientLog	k	int	0	NIL-FOR	i <= $
85	344	8	MathUtils.java	checkBinomial	n	int	0	DEF	$ < k
85	344	8	MathUtils.java	checkBinomial	k	int	0	DEF	n < $
86	349	8	MathUtils.java	checkBinomial	n	int	0	DEF	$ < 0
87	367	8	MathUtils.java	compareTo	THIS	MathUtils	1	RET	$.equals(x, y, eps)
87	367	8	MathUtils.java	compareTo	x	double	1	RET	equals($, y, eps)
87	367	8	MathUtils.java	compareTo	y	double	1	RET	equals(x, $, eps)
87	367	8	MathUtils.java	compareTo	eps	double	1	RET	equals(x, y, $)
88	369	15	MathUtils.java	compareTo	x	double	0	RET	$ < y
88	369	15	MathUtils.java	compareTo	y	double	0	RET	x < $
89	437	8	MathUtils.java	equals	xInt	long	0	DEF	$ < 0
90	440	8	MathUtils.java	equals	yInt	long	0	DEF	$ < 0
91	458	8	MathUtils.java	equals	x	double[]	0	RET	$ == null
91	458	8	MathUtils.java	equals	y	double[]	0	RET	$ == null
92	461	8	MathUtils.java	equals	THIS	MathUtils	0	RET	x.$.length != y.$.length
92	461	8	MathUtils.java	equals	x	double[]	0	RET	$.length != y.length
92	461	8	MathUtils.java	equals	y	double[]	0	RET	x.length != $.length
39674	464	8	MathUtils.java	equals	THIS	MathUtils	0	NIL-FOR	i < x.$.length
39674	464	8	MathUtils.java	equals	i	int	0	NIL-FOR	$ < x.length
39674	464	8	MathUtils.java	equals	x	double[]	0	NIL-FOR	i < $.length
93	465	12	MathUtils.java	equals	THIS	MathUtils	0	RET	$.equals(x[i], y[i])
93	465	12	MathUtils.java	equals	i	int	0	RET	equals(x[$], y[$])
93	465	12	MathUtils.java	equals	x	double[]	0	RET	equals($[i], y[i])
93	465	12	MathUtils.java	equals	y	double[]	0	RET	equals(x[i], $[i])
94	502	8	MathUtils.java	factorial	n	int	0	DEF	$ < 0
95	507	8	MathUtils.java	factorial	n	int	0	ArithmeticException	$ > 20
96	535	8	MathUtils.java	factorialDouble	n	int	0	DEF	$ < 0
97	540	8	MathUtils.java	factorialDouble	n	int	0	RET	$ < 21
98	560	8	MathUtils.java	factorialLog	n	int	0	DEF	$ < 0
99	565	8	MathUtils.java	factorialLog	n	int	0	RET	$ < 21
39675	569	8	MathUtils.java	factorialLog	i	int	0	NIL-FOR	$ <= n
39675	569	8	MathUtils.java	factorialLog	n	int	0	NIL-FOR	i <= $
100	608	8	MathUtils.java	gcd	u	int	0	RET	$ == 0
100	608	8	MathUtils.java	gcd	v	int	0	RET	$ == 0
101	609	12	MathUtils.java	gcd	u	int	0	DEF	$ == Integer.MIN_VALUE
101	609	12	MathUtils.java	gcd	v	int	0	DEF	$ == Integer.MIN_VALUE
102	621	8	MathUtils.java	gcd	u	int	0	DEF	$ > 0
103	624	8	MathUtils.java	gcd	v	int	0	DEF	$ > 0
39676	629	8	MathUtils.java	gcd	u	int	0	NIL-WHILE	($ & 1) == 0
39676	629	8	MathUtils.java	gcd	v	int	0	NIL-WHILE	($ & 1) == 0
39676	629	8	MathUtils.java	gcd	k	int	0	NIL-WHILE	$ < 31
104	635	8	MathUtils.java	gcd	k	int	0	DEF	$ == 31
39677	645	8	MathUtils.java	gcd	t	int	0	NIL-DOWHILE	$ != 0
39678	648	12	MathUtils.java	gcd	t	int	0	NIL-WHILE	($ & 1) == 0
105	652	12	MathUtils.java	gcd	t	int	1	DEF	$ > 0
106	706	8	MathUtils.java	indicator	x	double	0	RET	Double.isNaN($)
107	720	8	MathUtils.java	indicator	x	float	0	RET	Float.isNaN($)
108	781	8	MathUtils.java	lcm	a	int	0	RET	$==0
108	781	8	MathUtils.java	lcm	b	int	0	RET	$==0
109	785	8	MathUtils.java	lcm	lcm	int	0	ArithmeticException	$ == Integer.MIN_VALUE
110	823	8	MathUtils.java	mulAndCheck	m	long	0	ArithmeticException	$ < Integer.MIN_VALUE
110	823	8	MathUtils.java	mulAndCheck	m	long	0	ArithmeticException	$ > Integer.MAX_VALUE
111	842	8	MathUtils.java	mulAndCheck	a	long	1	DEF	$ > b
111	842	8	MathUtils.java	mulAndCheck	b	long	1	DEF	a > $
112	846	12	MathUtils.java	mulAndCheck	a	long	1	ArithmeticException	$ < 0
113	847	16	MathUtils.java	mulAndCheck	b	long	1	ArithmeticException	$ < 0
114	849	20	MathUtils.java	mulAndCheck	a	long	1	DEF	$ >= Long.MAX_VALUE / b
114	849	20	MathUtils.java	mulAndCheck	b	long	1	DEF	a >= Long.MAX_VALUE / $
115	854	23	MathUtils.java	mulAndCheck	b	long	1	ArithmeticException	$ > 0
116	856	20	MathUtils.java	mulAndCheck	a	long	1	DEF	Long.MIN_VALUE / b <= $
116	856	20	MathUtils.java	mulAndCheck	b	long	1	DEF	Long.MIN_VALUE / $ <= a
117	866	19	MathUtils.java	mulAndCheck	a	long	1	ArithmeticException	$ > 0
118	871	16	MathUtils.java	mulAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE / b
118	871	16	MathUtils.java	mulAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE / $
119	904	8	MathUtils.java	nextAfter	d	double	1	RET	Double.isNaN($)
119	904	8	MathUtils.java	nextAfter	d	double	1	RET	Double.isInfinite($)
120	906	15	MathUtils.java	nextAfter	d	double	0	RET	$ == 0
121	918	8	MathUtils.java	nextAfter	d	double	1	RET	$ * (direction - $) >= 0
121	918	8	MathUtils.java	nextAfter	direction	double	1	RET	d * ($ - d) >= 0
122	920	16	MathUtils.java	nextAfter	mantissa	long	1	RET	$ == 0x000fffffffffffffL
123	929	16	MathUtils.java	nextAfter	mantissa	long	1	RET	$ == 0L
124	953	8	MathUtils.java	scalb	d	double	0	RET	$ == 0
124	953	8	MathUtils.java	scalb	d	double	0	RET	Double.isNaN($)
124	953	8	MathUtils.java	scalb	d	double	0	RET	Double.isInfinite($)
125	1023	12	MathUtils.java	round	x	double	1	RET	Double.isInfinite($)
126	1078	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
127	1088	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
128	1097	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
129	1106	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
130	1108	19	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ < 0.5
131	1112	16	MathUtils.java	roundUnscaled	unscaled	double	1	DEF	Math.floor($) / 2.0 == Math.floor(Math .floor($) / 2.0)
132	1124	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ >= 0.5
133	1132	12	MathUtils.java	roundUnscaled	unscaled	double	0	ArithmeticException	$ != Math.floor($)
134	1183	8	MathUtils.java	sign	x	double	0	RET	Double.isNaN($)
135	1201	8	MathUtils.java	sign	x	float	0	RET	Float.isNaN($)
136	1273	8	MathUtils.java	subAndCheck	s	long	0	ArithmeticException	$ > Integer.MAX_VALUE
136	1273	8	MathUtils.java	subAndCheck	s	long	0	ArithmeticException	$ < Integer.MIN_VALUE
137	1292	8	MathUtils.java	subAndCheck	b	long	1	ArithmeticException	$ == Long.MIN_VALUE
138	1293	12	MathUtils.java	subAndCheck	a	long	1	DEF	$ < 0
139	1315	8	MathUtils.java	pow	e	int	0	DEF	$ < 0
39679	1323	8	MathUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
140	1324	12	MathUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
141	1345	8	MathUtils.java	pow	e	long	0	DEF	$ < 0
39680	1353	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
142	1354	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
143	1375	8	MathUtils.java	pow	e	int	0	DEF	$ < 0
39681	1383	8	MathUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
144	1384	12	MathUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
145	1405	8	MathUtils.java	pow	e	long	0	DEF	$ < 0
39682	1413	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
146	1414	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
147	1435	8	MathUtils.java	pow	e	int	0	DEF	$ < 0
148	1455	8	MathUtils.java	pow	e	long	0	DEF	$ < 0
39683	1463	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
149	1464	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
150	1485	8	MathUtils.java	pow	e	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
39684	1493	8	MathUtils.java	pow	e	BigInteger	0	NIL-WHILE	BigInteger.ZERO.equals($)
151	1494	12	MathUtils.java	pow	e	BigInteger	0	DEF	$.testBit(0)
39685	1514	8	MathUtils.java	distance1	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
39685	1514	8	MathUtils.java	distance1	i	int	0	NIL-FOR	$ < p1.length
39685	1514	8	MathUtils.java	distance1	p1	double[]	0	NIL-FOR	i < $.length
39686	1529	6	MathUtils.java	distance1	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
39686	1529	6	MathUtils.java	distance1	i	int	0	NIL-FOR	$ < p1.length
39686	1529	6	MathUtils.java	distance1	p1	int[]	0	NIL-FOR	i < $.length
39687	1544	8	MathUtils.java	distance	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
39687	1544	8	MathUtils.java	distance	i	int	0	NIL-FOR	$ < p1.length
39687	1544	8	MathUtils.java	distance	p1	double[]	0	NIL-FOR	i < $.length
39688	1560	6	MathUtils.java	distance	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
39688	1560	6	MathUtils.java	distance	i	int	0	NIL-FOR	$ < p1.length
39688	1560	6	MathUtils.java	distance	p1	int[]	0	NIL-FOR	i < $.length
39689	1576	8	MathUtils.java	distanceInf	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
39689	1576	8	MathUtils.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
39689	1576	8	MathUtils.java	distanceInf	p1	double[]	0	NIL-FOR	i < $.length
39690	1591	8	MathUtils.java	distanceInf	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
39690	1591	8	MathUtils.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
39690	1591	8	MathUtils.java	distanceInf	p1	int[]	0	NIL-FOR	i < $.length
40254	143	8	MatrixUtils.java	createRealIdentityMatrix	i	int	0	NIL-FOR	$ < dimension
40254	143	8	MatrixUtils.java	createRealIdentityMatrix	dimension	int	0	NIL-FOR	i < $
40255	165	8	MatrixUtils.java	createFieldIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
40255	165	8	MatrixUtils.java	createFieldIdentityMatrix	dimension	int	0	NIL-FOR	row < $
40256	185	8	MatrixUtils.java	createBigIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
40256	185	8	MatrixUtils.java	createBigIdentityMatrix	dimension	int	0	NIL-FOR	row < $
40257	203	8	MatrixUtils.java	createRealDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
40257	203	8	MatrixUtils.java	createRealDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
40257	203	8	MatrixUtils.java	createRealDiagonalMatrix	diagonal	double[]	0	NIL-FOR	i < $.length
40258	222	8	MatrixUtils.java	createFieldDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
40258	222	8	MatrixUtils.java	createFieldDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
40258	222	8	MatrixUtils.java	createFieldDiagonalMatrix	diagonal	T[]	0	NIL-FOR	i < $.length
40259	335	8	MatrixUtils.java	createRowRealMatrix	i	int	0	NIL-FOR	$ < nCols
40259	335	8	MatrixUtils.java	createRowRealMatrix	nCols	int	0	NIL-FOR	i < $
732	354	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	DEF	$ == 0
40260	358	8	MatrixUtils.java	createRowFieldMatrix	i	int	0	NIL-FOR	$ < nCols
40260	358	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NIL-FOR	i < $
40261	378	8	MatrixUtils.java	createRowBigMatrix	i	int	0	NIL-FOR	$ < nCols
40261	378	8	MatrixUtils.java	createRowBigMatrix	nCols	int	0	NIL-FOR	i < $
40262	416	8	MatrixUtils.java	createRowBigMatrix	i	int	0	NIL-FOR	$ < nCols
40262	416	8	MatrixUtils.java	createRowBigMatrix	nCols	int	0	NIL-FOR	i < $
40263	434	8	MatrixUtils.java	createColumnRealMatrix	i	int	0	NIL-FOR	$ < nRows
40263	434	8	MatrixUtils.java	createColumnRealMatrix	nRows	int	0	NIL-FOR	i < $
733	453	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	DEF	$ == 0
40264	457	8	MatrixUtils.java	createColumnFieldMatrix	i	int	0	NIL-FOR	$ < nRows
40264	457	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NIL-FOR	i < $
40265	477	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
40265	477	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
40266	497	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
40266	497	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
40267	517	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
40267	517	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
734	530	8	MatrixUtils.java	checkRowIndex	m	AnyMatrix	0	MatrixIndexException	row >= $.getRowDimension()
734	530	8	MatrixUtils.java	checkRowIndex	row	int	0	MatrixIndexException	$ < 0
734	530	8	MatrixUtils.java	checkRowIndex	row	int	0	MatrixIndexException	$ >= m.getRowDimension()
735	544	8	MatrixUtils.java	checkColumnIndex	m	AnyMatrix	0	MatrixIndexException	column >= $.getColumnDimension()
735	544	8	MatrixUtils.java	checkColumnIndex	column	int	0	MatrixIndexException	$ < 0
735	544	8	MatrixUtils.java	checkColumnIndex	column	int	0	MatrixIndexException	$ >= m.getColumnDimension()
736	566	8	MatrixUtils.java	checkSubMatrixIndex	startRow	int	0	MatrixIndexException	$ > endRow
736	566	8	MatrixUtils.java	checkSubMatrixIndex	endRow	int	0	MatrixIndexException	startRow > $
737	573	8	MatrixUtils.java	checkSubMatrixIndex	startColumn	int	0	MatrixIndexException	$ > endColumn
737	573	8	MatrixUtils.java	checkSubMatrixIndex	endColumn	int	0	MatrixIndexException	startColumn > $
738	593	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
738	593	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
738	593	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
739	594	12	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	MatrixIndexException	selectedRows.$.length == 0
739	594	12	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length == 0
740	616	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	DEF	$.getRowDimension() != right.getRowDimension()
740	616	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	DEF	$.getColumnDimension() != right.getColumnDimension()
740	616	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	DEF	left.getRowDimension() != $.getRowDimension()
740	616	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	DEF	left.getColumnDimension() != $.getColumnDimension()
741	633	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	DEF	$.getRowDimension() != right.getRowDimension()
741	633	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	DEF	$.getColumnDimension() != right.getColumnDimension()
741	633	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	DEF	left.getRowDimension() != $.getRowDimension()
741	633	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	DEF	left.getColumnDimension() != $.getColumnDimension()
742	650	8	MatrixUtils.java	checkMultiplicationCompatible	left	AnyMatrix	0	DEF	$.getColumnDimension() != right.getRowDimension()
742	650	8	MatrixUtils.java	checkMultiplicationCompatible	right	AnyMatrix	0	DEF	left.getColumnDimension() != $.getRowDimension()
40268	791	8	MatrixUtils.java	serializeRealVector	i	int	0	NIL-FOR	$ < n
40268	791	8	MatrixUtils.java	serializeRealVector	n	int	0	NIL-FOR	i < $
40269	822	12	MatrixUtils.java	deserializeRealVector	i	int	0	NIL-FOR	$ < n
40269	822	12	MatrixUtils.java	deserializeRealVector	n	int	0	NIL-FOR	i < $
40270	894	8	MatrixUtils.java	serializeRealMatrix	i	int	0	NIL-FOR	$ < n
40270	894	8	MatrixUtils.java	serializeRealMatrix	n	int	0	NIL-FOR	i < $
40271	895	12	MatrixUtils.java	serializeRealMatrix	j	int	0	NIL-FOR	$ < m
40271	895	12	MatrixUtils.java	serializeRealMatrix	m	int	0	NIL-FOR	j < $
40272	928	12	MatrixUtils.java	deserializeRealMatrix	i	int	0	NIL-FOR	$ < n
40272	928	12	MatrixUtils.java	deserializeRealMatrix	n	int	0	NIL-FOR	i < $
40273	930	16	MatrixUtils.java	deserializeRealMatrix	j	int	0	NIL-FOR	$ < m
40273	930	16	MatrixUtils.java	deserializeRealMatrix	m	int	0	NIL-FOR	j < $
1186	74	8	Max.java	increment	THIS	Max	0	DEF	d > $.value
1186	74	8	Max.java	increment	THIS	Max	0	DEF	Double.isNaN($.value)
1186	74	8	Max.java	increment	d	double	0	DEF	$ > value
1187	129	8	Max.java	evaluate	THIS	Max	0	DEF	$.test(values, begin, length)
1187	129	8	Max.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1187	129	8	Max.java	evaluate	begin	int	0	DEF	test(values, $, length)
1187	129	8	Max.java	evaluate	length	int	0	DEF	test(values, begin, $)
40754	131	12	Max.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
40754	131	12	Max.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
40754	131	12	Max.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1188	132	16	Max.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
1188	132	16	Max.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
1120	106	8	Mean.java	increment	THIS	Mean	0	DEF	$.incMoment
1121	116	8	Mean.java	clear	THIS	Mean	0	DEF	$.incMoment
1122	154	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, begin, length)
1122	154	8	Mean.java	evaluate	values	double[]	0	RET	test($, begin, length)
1122	154	8	Mean.java	evaluate	begin	int	0	RET	test(values, $, length)
1122	154	8	Mean.java	evaluate	length	int	0	RET	test(values, begin, $)
40742	163	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
40742	163	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
40742	163	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
41051	87	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
41051	87	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1183	74	8	Min.java	increment	THIS	Min	0	DEF	Double.isNaN($.value)
1183	74	8	Min.java	increment	THIS	Min	0	DEF	d < $.value
1183	74	8	Min.java	increment	d	double	0	DEF	$ < value
1184	129	8	Min.java	evaluate	THIS	Min	0	DEF	$.test(values, begin, length)
1184	129	8	Min.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1184	129	8	Min.java	evaluate	begin	int	0	DEF	test(values, $, length)
1184	129	8	Min.java	evaluate	length	int	0	DEF	test(values, begin, $)
40753	131	12	Min.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
40753	131	12	Min.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
40753	131	12	Min.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1185	132	16	Min.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
1185	132	16	Min.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
1679	96	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1679	96	8	MullerSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1680	97	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1680	97	8	MullerSolver.java	solve	max	double	0	RET	f.value($) == 0.0
1681	98	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
1681	98	8	MullerSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
1682	102	8	MullerSolver.java	solve	THIS	MullerSolver	1	RET	$.isBracketing(min, initial, f)
1682	102	8	MullerSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
1682	102	8	MullerSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
1682	102	8	MullerSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
1683	150	8	MullerSolver.java	solve	y0	double	0	RET	$ == 0.0
1684	151	8	MullerSolver.java	solve	y2	double	0	RET	$ == 0.0
41097	156	8	MullerSolver.java	solve	THIS	MullerSolver	0	NIL-WHILE	i <= $.maximalIterationCount
41097	156	8	MullerSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1685	175	12	MullerSolver.java	solve	x	double	0	RET	Math.abs($ - oldx) <= tolerance
1685	175	12	MullerSolver.java	solve	oldx	double	0	RET	Math.abs(x - $) <= tolerance
1685	175	12	MullerSolver.java	solve	tolerance	double	0	RET	Math.abs(x - oldx) <= $
1686	179	12	MullerSolver.java	solve	THIS	MullerSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
1686	179	12	MullerSolver.java	solve	y	double	0	RET	Math.abs($) <= functionValueAccuracy
1687	192	12	MullerSolver.java	solve	bisect	boolean	1	DEF	$
1688	202	16	MullerSolver.java	solve	ym	double	1	DEF	MathUtils.sign(y0) + MathUtils.sign($) == 0.0
1688	202	16	MullerSolver.java	solve	y0	double	1	DEF	MathUtils.sign($) + MathUtils.sign(ym) == 0.0
1689	290	8	MullerSolver.java	solve2	y0	double	0	RET	$ == 0.0
1690	291	8	MullerSolver.java	solve2	y1	double	0	RET	$ == 0.0
41098	296	8	MullerSolver.java	solve2	THIS	MullerSolver	0	NIL-WHILE	i <= $.maximalIterationCount
41098	296	8	MullerSolver.java	solve2	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1691	303	12	MullerSolver.java	solve2	delta	double	1	DEF	$ >= 0.0
1692	312	12	MullerSolver.java	solve2	denominator	double	1	DEF	$ != 0
41099	316	16	MullerSolver.java	solve2	x1	double	0	NIL-WHILE	x == $
41099	316	16	MullerSolver.java	solve2	x2	double	0	NIL-WHILE	x == $
41099	316	16	MullerSolver.java	solve2	x	double	0	NIL-WHILE	$ == x1
41099	316	16	MullerSolver.java	solve2	x	double	0	NIL-WHILE	$ == x2
1693	328	12	MullerSolver.java	solve2	x	double	0	RET	Math.abs($ - oldx) <= tolerance
1693	328	12	MullerSolver.java	solve2	oldx	double	0	RET	Math.abs(x - $) <= tolerance
1693	328	12	MullerSolver.java	solve2	tolerance	double	0	RET	Math.abs(x - oldx) <= $
1694	332	12	MullerSolver.java	solve2	THIS	MullerSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
1694	332	12	MullerSolver.java	solve2	y	double	0	RET	Math.abs($) <= functionValueAccuracy
1068	81	12	MultiDirectional.java	iterateSimplex	best	RealPointValuePair	0	RET	comparator.compare(reflected, $) < 0
1068	81	12	MultiDirectional.java	iterateSimplex	reflected	RealPointValuePair	0	RET	comparator.compare($, best) < 0
1068	81	12	MultiDirectional.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(reflected, best) < 0
1069	86	16	MultiDirectional.java	iterateSimplex	expanded	RealPointValuePair	0	DEF	comparator.compare(reflected, $) <= 0
1069	86	16	MultiDirectional.java	iterateSimplex	reflected	RealPointValuePair	0	DEF	comparator.compare($, expanded) <= 0
1069	86	16	MultiDirectional.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	DEF	$.compare(reflected, expanded) <= 0
1070	97	12	MultiDirectional.java	iterateSimplex	best	RealPointValuePair	0	RET	comparator.compare(contracted, $) < 0
1070	97	12	MultiDirectional.java	iterateSimplex	contracted	RealPointValuePair	0	RET	comparator.compare($, best) < 0
1070	97	12	MultiDirectional.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(contracted, best) < 0
40716	126	8	MultiDirectional.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ <= n
40716	126	8	MultiDirectional.java	evaluateNewSimplex	n	int	0	NIL-FOR	i <= $
40717	129	12	MultiDirectional.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < n
40717	129	12	MultiDirectional.java	evaluateNewSimplex	n	int	0	NIL-FOR	j < $
945	120	8	MultiStartDifferentiableMultivariateRealOptimizer.java	getOptima	THIS	MultiStartDifferentiableMultivariateRealOptimizer	0	DEF	$.optima == null
40603	183	8	MultiStartDifferentiableMultivariateRealOptimizer.java	optimize	THIS	MultiStartDifferentiableMultivariateRealOptimizer	0	NIL-FOR	i < $.starts
40603	183	8	MultiStartDifferentiableMultivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
946	217	8	MultiStartDifferentiableMultivariateRealOptimizer.java	optimize	THIS	MultiStartDifferentiableMultivariateRealOptimizer	0	OptimizationException	$.optima[0] == null
1060	124	8	MultiStartDifferentiableMultivariateVectorialOptimizer.java	getOptima	THIS	MultiStartDifferentiableMultivariateVectorialOptimizer	0	DEF	$.optima == null
40706	187	8	MultiStartDifferentiableMultivariateVectorialOptimizer.java	optimize	THIS	MultiStartDifferentiableMultivariateVectorialOptimizer	0	NIL-FOR	i < $.starts
40706	187	8	MultiStartDifferentiableMultivariateVectorialOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1061	227	8	MultiStartDifferentiableMultivariateVectorialOptimizer.java	optimize	THIS	MultiStartDifferentiableMultivariateVectorialOptimizer	0	OptimizationException	$.optima[0] == null
971	115	8	MultiStartMultivariateRealOptimizer.java	getOptima	THIS	MultiStartMultivariateRealOptimizer	0	DEF	$.optima == null
40613	172	8	MultiStartMultivariateRealOptimizer.java	optimize	THIS	MultiStartMultivariateRealOptimizer	0	NIL-FOR	i < $.starts
40613	172	8	MultiStartMultivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
972	205	8	MultiStartMultivariateRealOptimizer.java	optimize	THIS	MultiStartMultivariateRealOptimizer	0	OptimizationException	$.optima[0] == null
947	190	8	MultiStartUnivariateRealOptimizer.java	getOptima	THIS	MultiStartUnivariateRealOptimizer	0	DEF	$.optima == null
40604	214	8	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	NIL-FOR	i < $.starts
40604	214	8	MultiStartUnivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
40605	234	8	MultiStartUnivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < lastNaN
40605	234	8	MultiStartUnivariateRealOptimizer.java	optimize	lastNaN	int	0	NIL-FOR	i < $
948	235	12	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	DEF	Double.isNaN($.optima[i])
948	235	12	MultiStartUnivariateRealOptimizer.java	optimize	i	int	0	DEF	Double.isNaN(optima[$])
949	241	8	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	DEF	goalType == $.GoalType.MAXIMIZE
949	241	8	MultiStartUnivariateRealOptimizer.java	optimize	goalType	GoalType	0	DEF	$ == GoalType.MAXIMIZE
40606	242	12	MultiStartUnivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < j
40606	242	12	MultiStartUnivariateRealOptimizer.java	optimize	j	int	0	NIL-FOR	i < $
950	249	8	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	OptimizationException	Double.isNaN($.optima[0])
1639	89	8	MultistepIntegrator.java	MultistepIntegrator	nSteps	int	0	DEF	$ <= 0
1640	198	12	MultistepIntegrator.java	start	THIS	MultistepIntegrator	0	DEF	$.de instanceof InitializationCompletedMarkerException
40730	92	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	i	int	0	NIL-FOR	$ < k
40730	92	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	k	int	0	NIL-FOR	i < $
40731	147	8	MultivariateSummaryStatistics.java	addValue	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
40731	147	8	MultivariateSummaryStatistics.java	addValue	i	int	0	NIL-FOR	$ < k
40732	184	8	MultivariateSummaryStatistics.java	getResults	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < results.$.length
40732	184	8	MultivariateSummaryStatistics.java	getResults	i	int	0	NIL-FOR	$ < results.length
40732	184	8	MultivariateSummaryStatistics.java	getResults	results	double[]	0	NIL-FOR	i < $.length
1086	243	8	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 1
1087	245	15	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 2
40733	249	12	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
40733	249	12	MultivariateSummaryStatistics.java	getStandardDeviation	i	int	0	NIL-FOR	$ < k
40734	331	8	MultivariateSummaryStatistics.java	append	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < data.$.length
40734	331	8	MultivariateSummaryStatistics.java	append	i	int	0	NIL-FOR	$ < data.length
40734	331	8	MultivariateSummaryStatistics.java	append	data	double[]	0	NIL-FOR	i < $.length
1088	332	12	MultivariateSummaryStatistics.java	append	i	int	0	DEF	$ > 0
40735	345	8	MultivariateSummaryStatistics.java	clear	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
40735	345	8	MultivariateSummaryStatistics.java	clear	i	int	0	NIL-FOR	$ < k
1089	365	8	MultivariateSummaryStatistics.java	equals	THIS	MultivariateSummaryStatistics	0	RET	object == $
1089	365	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ == this
1090	368	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ instanceof MultivariateSummaryStatistics == false
1091	615	8	MultivariateSummaryStatistics.java	checkEmpty	THIS	MultivariateSummaryStatistics	0	DEF	$.n > 0
1092	629	8	MultivariateSummaryStatistics.java	checkDimension	THIS	MultivariateSummaryStatistics	0	DimensionMismatchException	dimension != $.k
1092	629	8	MultivariateSummaryStatistics.java	checkDimension	dimension	int	0	DimensionMismatchException	$ != k
40790	192	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < data.$.length
40790	192	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < data.length
40790	192	8	NaturalRanking.java	rank	data	double[]	0	NIL-FOR	i < $.length
40791	223	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
40791	223	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < ranks.length
40791	223	8	NaturalRanking.java	rank	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1248	224	12	NaturalRanking.java	rank	i	int	1	DEF	Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
1248	224	12	NaturalRanking.java	rank	ranks	IntDoublePair[]	1	DEF	Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
1249	227	16	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
1250	238	8	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
1251	241	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	DEF	$.nanStrategy == $.NaNStrategy.FIXED
1252	255	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	RET	$.containsNaNs(ranks)
1252	255	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	RET	containsNaNs($)
40792	260	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
40792	260	8	NaturalRanking.java	removeNaNs	i	int	0	NIL-FOR	$ < ranks.length
40792	260	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1253	261	12	NaturalRanking.java	removeNaNs	i	int	1	DEF	Double.isNaN(ranks[$].getValue())
1253	261	12	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	1	DEF	Double.isNaN($[i].getValue())
40793	263	16	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	k < ranks.$.length
40793	263	16	NaturalRanking.java	removeNaNs	k	int	0	NIL-FOR	$ < ranks.length
40793	263	16	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	k < $.length
40794	285	8	NaturalRanking.java	recodeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
40794	285	8	NaturalRanking.java	recodeNaNs	i	int	0	NIL-FOR	$ < ranks.length
40794	285	8	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1254	286	12	NaturalRanking.java	recodeNaNs	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
1254	286	12	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
40795	300	8	NaturalRanking.java	containsNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
40795	300	8	NaturalRanking.java	containsNaNs	i	int	0	NIL-FOR	$ < ranks.length
40795	300	8	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1255	301	12	NaturalRanking.java	containsNaNs	i	int	0	RET	Double.isNaN(ranks[$].getValue())
1255	301	12	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	RET	Double.isNaN($[i].getValue())
40796	343	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
40797	353	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
40798	369	8	NaturalRanking.java	fill	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
1256	381	8	NaturalRanking.java	restoreNaNs	nanPositions	List<Integer>	0	RET	$.size() == 0
40799	385	8	NaturalRanking.java	restoreNaNs	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
40800	399	8	NaturalRanking.java	getNanPositions	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
40800	399	8	NaturalRanking.java	getNanPositions	i	int	0	NIL-FOR	$ < ranks.length
40800	399	8	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1257	400	12	NaturalRanking.java	getNanPositions	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
1257	400	12	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
40707	99	8	NelderMead.java	iterateSimplex	i	int	0	NIL-FOR	$ < n
40707	99	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	i < $
40708	101	12	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
40708	101	12	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
40709	106	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
40709	106	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
40710	112	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
40710	112	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
1062	117	8	NelderMead.java	iterateSimplex	best	RealPointValuePair	1	DEF	comparator.compare($, reflected) <= 0
1062	117	8	NelderMead.java	iterateSimplex	secondBest	RealPointValuePair	1	DEF	comparator.compare(reflected, $) < 0
1062	117	8	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare($, secondBest) < 0
1062	117	8	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare(best, $) <= 0
1062	117	8	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(reflected, secondBest) < 0
1062	117	8	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(best, reflected) <= 0
1063	123	15	NelderMead.java	iterateSimplex	best	RealPointValuePair	1	DEF	comparator.compare(reflected, $) < 0
1063	123	15	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare($, best) < 0
1063	123	15	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(reflected, best) < 0
40711	127	12	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
40711	127	12	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
1064	132	12	NelderMead.java	iterateSimplex	expanded	RealPointValuePair	1	DEF	comparator.compare($, reflected) < 0
1064	132	12	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare(expanded, $) < 0
1064	132	12	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(expanded, reflected) < 0
1065	142	12	NelderMead.java	iterateSimplex	worst	RealPointValuePair	1	RET	comparator.compare(reflected, $) < 0
1065	142	12	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	RET	comparator.compare($, worst) < 0
1065	142	12	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	RET	$.compare(reflected, worst) < 0
40712	146	16	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
40712	146	16	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
1066	151	16	NelderMead.java	iterateSimplex	outContracted	RealPointValuePair	0	RET	comparator.compare($, reflected) <= 0
1066	151	16	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	0	RET	comparator.compare(outContracted, $) <= 0
1066	151	16	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(outContracted, reflected) <= 0
40713	161	16	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
40713	161	16	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
1067	166	16	NelderMead.java	iterateSimplex	inContracted	RealPointValuePair	0	RET	comparator.compare($, worst) < 0
1067	166	16	NelderMead.java	iterateSimplex	worst	RealPointValuePair	0	RET	comparator.compare(inContracted, $) < 0
1067	166	16	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(inContracted, worst) < 0
40714	176	12	NelderMead.java	iterateSimplex	THIS	NelderMead	0	NIL-FOR	i < $.simplex.$.length
40714	176	12	NelderMead.java	iterateSimplex	i	int	0	NIL-FOR	$ < simplex.length
40715	178	16	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
40715	178	16	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
41095	118	12	NewtonSolver.java	solve	THIS	NewtonSolver	0	NIL-WHILE	i < $.maximalIterationCount
41095	118	12	NewtonSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1666	121	16	NewtonSolver.java	solve	THIS	NewtonSolver	0	RET	Math.abs(x1 - x0) <= $.absoluteAccuracy
1666	121	16	NewtonSolver.java	solve	x0	double	0	RET	Math.abs(x1 - $) <= absoluteAccuracy
1666	121	16	NewtonSolver.java	solve	x1	double	0	RET	Math.abs($ - x0) <= absoluteAccuracy
1047	105	8	NonLinearConjugateGradientOptimizer.java	setInitialStep	initialStep	double	1	DEF	$ <= 0
1048	119	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.preconditioner == null
1049	122	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.solver == null
1050	127	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.goalType == $.GoalType.MINIMIZE
40692	128	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
40692	128	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
40693	138	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
40693	138	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1051	148	16	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	RealPointValuePair	0	RET	$ != null
1052	149	20	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	RET	$.checker.converged($.getIterations(), previous, current)
1052	149	20	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	RealPointValuePair	0	RET	checker.converged(getIterations(), $, current)
1052	149	20	NonLinearConjugateGradientOptimizer.java	doOptimize	current	RealPointValuePair	0	RET	checker.converged(getIterations(), previous, $)
40694	167	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < $.point.$.length
40694	167	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < point.length
1053	171	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.goalType == $.GoalType.MINIMIZE
40695	172	20	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
40695	172	20	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
40696	181	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
40696	181	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1054	186	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.updateFormula == $.ConjugateGradientFormula.FLETCHER_REEVES
40697	190	20	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < r.$.length
40697	190	20	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < r.length
40697	190	20	NonLinearConjugateGradientOptimizer.java	doOptimize	r	double[]	0	NIL-FOR	i < $.length
1055	198	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.getIterations() % n == 0
1055	198	16	NonLinearConjugateGradientOptimizer.java	doOptimize	beta	double	1	DEF	$ < 0
1055	198	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	1	DEF	getIterations() % $ == 0
40698	203	20	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
40698	203	20	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
40699	229	8	NonLinearConjugateGradientOptimizer.java	findUpperBound	step	double	0	NIL-FOR	$ < Double.MAX_VALUE
1056	232	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yA	double	0	RET	$ * yB <= 0
1056	232	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yB	double	0	RET	yA * $ <= 0
1467	84	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.scaled != null
1467	84	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.scaled != null
1468	87	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.nordsieck != null
1468	87	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.nordsieck != null
1469	90	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.stateVariation != null
1469	90	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.stateVariation != null
40959	144	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < $.scaled.$.length
40959	144	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < scaled.length
40960	150	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < nData.$.length
40960	150	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < nData.length
40960	150	8	NordsieckStepInterpolator.java	rescale	nData	double[][]	0	NIL-FOR	i < $.length
40961	153	12	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
40961	153	12	NordsieckStepInterpolator.java	rescale	j	int	0	NIL-FOR	$ < nDataI.length
40961	153	12	NordsieckStepInterpolator.java	rescale	nDataI	double[]	0	NIL-FOR	j < $.length
40962	196	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ >= 0
40963	200	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
40963	200	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < nDataI.length
40963	200	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	nDataI	double[]	0	NIL-FOR	j < $.length
40964	207	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < $.currentState.$.length
40964	207	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < currentState.length
1470	229	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.scaled == null
40965	233	12	NordsieckStepInterpolator.java	writeExternal	j	int	0	NIL-FOR	$ < n
40965	233	12	NordsieckStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	j < $
1471	238	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.nordsieck == null
1472	263	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
40966	265	12	NordsieckStepInterpolator.java	readExternal	j	int	0	NIL-FOR	$ < n
40966	265	12	NordsieckStepInterpolator.java	readExternal	n	int	0	NIL-FOR	j < $
1473	273	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
1474	279	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
1474	279	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
412	97	8	NormalDistributionImpl.java	setStandardDeviation	sd	double	0	DEF	$ <= 0.0
413	129	12	NormalDistributionImpl.java	cumulativeProbability	THIS	NormalDistributionImpl	1	RET	x < ($.mean - 20 * $.standardDeviation)
413	129	12	NormalDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ < (mean - 20 * standardDeviation)
414	131	19	NormalDistributionImpl.java	cumulativeProbability	THIS	NormalDistributionImpl	1	RET	x > ($.mean + 20 * $.standardDeviation)
414	131	19	NormalDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ > (mean + 20 * standardDeviation)
415	156	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
416	159	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
417	178	8	NormalDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < .5
418	200	8	NormalDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
419	221	8	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
420	223	15	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > .5
40806	112	8	OLSMultipleLinearRegression.java	calculateHat	i	int	0	NIL-FOR	$ < n
40806	112	8	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	i < $
40807	113	12	OLSMultipleLinearRegression.java	calculateHat	j	int	0	NIL-FOR	$ < n
40807	113	12	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	j < $
1281	114	16	OLSMultipleLinearRegression.java	calculateHat	j	int	1	DEF	i == $
1281	114	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ == j
1281	114	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ < p
1281	114	16	OLSMultipleLinearRegression.java	calculateHat	p	int	1	DEF	i < $
40808	206	8	OLSMultipleLinearRegression.java	solveUpperTriangular	i	int	0	NIL-FOR	$ < length
40808	206	8	OLSMultipleLinearRegression.java	solveUpperTriangular	length	int	0	NIL-FOR	i < $
40809	209	12	OLSMultipleLinearRegression.java	solveUpperTriangular	j	int	0	NIL-FOR	$ < length
40809	209	12	OLSMultipleLinearRegression.java	solveUpperTriangular	length	int	0	NIL-FOR	j < $
40810	231	8	OLSMultipleLinearRegression.java	checkUpperTriangular	r	int	0	NIL-FOR	$ < nRows
40810	231	8	OLSMultipleLinearRegression.java	checkUpperTriangular	nRows	int	0	NIL-FOR	r < $
40811	233	12	OLSMultipleLinearRegression.java	checkUpperTriangular	c	int	0	NIL-FOR	$ < bound
40811	233	12	OLSMultipleLinearRegression.java	checkUpperTriangular	bound	int	0	NIL-FOR	c < $
1282	234	16	OLSMultipleLinearRegression.java	checkUpperTriangular	c	int	0	DEF	Math.abs(m.getEntry(r, $)) > epsilon
1282	234	16	OLSMultipleLinearRegression.java	checkUpperTriangular	r	int	0	DEF	Math.abs(m.getEntry($, c)) > epsilon
1282	234	16	OLSMultipleLinearRegression.java	checkUpperTriangular	m	RealMatrix	0	DEF	Math.abs($.getEntry(r, c)) > epsilon
1282	234	16	OLSMultipleLinearRegression.java	checkUpperTriangular	epsilon	double	0	DEF	Math.abs(m.getEntry(r, c)) > $
1387	71	8	OnePointCrossover.java	crossover	first	Chromosome	0	IllegalArgumentException	$ instanceof AbstractListChromosome
1387	71	8	OnePointCrossover.java	crossover	second	Chromosome	0	IllegalArgumentException	$ instanceof AbstractListChromosome
1388	87	8	OnePointCrossover.java	crossover	length	int	0	IllegalArgumentException	$ != second.getLength()
1388	87	8	OnePointCrossover.java	crossover	second	AbstractListChromosome<T>	0	IllegalArgumentException	length != $.getLength()
40862	101	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < crossoverIndex
40862	101	8	OnePointCrossover.java	crossover	crossoverIndex	int	0	NIL-FOR	i < $
40863	106	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < length
40863	106	8	OnePointCrossover.java	crossover	length	int	0	NIL-FOR	i < $
1208	103	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	DEF	$ > 0.5
1208	103	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	DEF	$ <= 0
1209	126	8	OneWayAnovaImpl.java	anovaStats	categoryData	Collection<double[]>	0	DEF	$.size() < 2
1210	134	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	DEF	$.array.$.length <= 1
40756	153	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	NIL-FOR	i < $.data.$.length
40756	153	12	OneWayAnovaImpl.java	anovaStats	i	int	0	NIL-FOR	$ < data.length
34	152	8	OpenIntToDoubleHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
35	157	8	OpenIntToDoubleHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
35	157	8	OpenIntToDoubleHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
36	181	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
36	181	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
36	181	8	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
37	185	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
37	185	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	states[$] == FREE
39662	189	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
39662	189	8	OpenIntToDoubleHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
38	192	12	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
38	192	12	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
38	192	12	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
39	210	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
39	210	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
39	210	8	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
40	214	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
40	214	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
39663	218	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
39663	218	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
41	221	12	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
41	221	12	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
41	221	12	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
42	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
42	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
43	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
43	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
43	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
43	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
43	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
44	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
44	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
45	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
45	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
45	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
45	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
45	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
46	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
46	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
47	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
47	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
48	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
48	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
49	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
49	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
49	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
49	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
49	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
50	353	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
50	353	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
50	353	8	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
51	357	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
51	357	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	states[$] == FREE
39664	361	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
39664	361	8	OpenIntToDoubleHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
52	364	12	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
52	364	12	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
52	364	12	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
53	409	8	OpenIntToDoubleHashMap.java	put	index	int	0	DEF	$ < 0
54	417	8	OpenIntToDoubleHashMap.java	put	newMapping	boolean	0	DEF	$
55	419	12	OpenIntToDoubleHashMap.java	put	THIS	OpenIntToDoubleHashMap	0	DEF	$.shouldGrowTable()
39665	443	8	OpenIntToDoubleHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
39665	443	8	OpenIntToDoubleHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
56	444	12	OpenIntToDoubleHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
56	444	12	OpenIntToDoubleHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
154	164	8	OpenIntToFieldHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
155	169	8	OpenIntToFieldHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
155	169	8	OpenIntToFieldHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
156	193	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
156	193	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
156	193	8	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
157	197	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
157	197	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	states[$] == FREE
39691	201	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
39691	201	8	OpenIntToFieldHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
158	204	12	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
158	204	12	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
158	204	12	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
159	222	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
159	222	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
159	222	8	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
160	226	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
160	226	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
39692	230	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
39692	230	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
161	233	12	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
161	233	12	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
161	233	12	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
162	283	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
162	283	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
163	285	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
163	285	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
163	285	15	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
163	285	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
163	285	15	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
164	291	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
164	291	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
165	297	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
165	297	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
165	297	16	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
165	297	16	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
165	297	16	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
166	303	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
166	303	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
167	305	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
167	305	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
168	316	12	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
168	316	12	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
169	318	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
169	318	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
169	318	19	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
169	318	19	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
169	318	19	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
170	365	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
170	365	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
170	365	8	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
171	369	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
171	369	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	states[$] == FREE
39693	373	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
39693	373	8	OpenIntToFieldHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
172	376	12	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
172	376	12	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
172	376	12	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
173	421	8	OpenIntToFieldHashMap.java	put	index	int	0	DEF	$ < 0
174	429	8	OpenIntToFieldHashMap.java	put	newMapping	boolean	0	DEF	$
175	431	12	OpenIntToFieldHashMap.java	put	THIS	OpenIntToFieldHashMap	0	DEF	$.shouldGrowTable()
39694	455	8	OpenIntToFieldHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
39694	455	8	OpenIntToFieldHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
176	456	12	OpenIntToFieldHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
176	456	12	OpenIntToFieldHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
40597	109	8	OpenMapRealMatrix.java	add	iterator	Iterator	0	NIL-FOR	$.hasNext()
40598	144	8	OpenMapRealMatrix.java	subtract	iterator	Iterator	0	NIL-FOR	$.hasNext()
40599	168	12	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
40600	174	16	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
40600	174	16	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
40601	199	8	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
40602	205	12	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
40602	205	12	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
940	207	16	OpenMapRealMatrix.java	multiply	THIS	OpenMapRealMatrix	0	DEF	m.$.entries.containsKey(rightKey)
940	207	16	OpenMapRealMatrix.java	multiply	rightKey	int	0	DEF	m.entries.containsKey($)
940	207	16	OpenMapRealMatrix.java	multiply	m	OpenMapRealMatrix	0	DEF	$.entries.containsKey(rightKey)
941	211	20	OpenMapRealMatrix.java	multiply	outValue	double	1	DEF	$ == 0.0
942	244	8	OpenMapRealMatrix.java	setEntry	value	double	1	DEF	$ == 0.0
943	259	8	OpenMapRealMatrix.java	addToEntry	value	double	1	DEF	$ == 0.0
944	274	8	OpenMapRealMatrix.java	multiplyEntry	value	double	1	DEF	$ == 0.0
40442	130	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
40442	130	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
40442	130	8	OpenMapRealVector.java	OpenMapRealVector	values	double[]	0	NIL-FOR	key < $.length
795	132	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isZero(value)
795	132	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isZero($)
40443	157	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
40443	157	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
40443	157	8	OpenMapRealVector.java	OpenMapRealVector	values	Double[]	0	NIL-FOR	key < $.length
796	159	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isZero(value)
796	159	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isZero($)
40444	183	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < $.virtualSize
40444	183	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < virtualSize
797	185	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isZero(value)
797	185	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isZero($)
798	227	8	OpenMapRealVector.java	add	v	RealVector	0	RET	$ instanceof OpenMapRealVector
40445	243	8	OpenMapRealVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
799	246	12	OpenMapRealVector.java	add	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(key)
799	246	12	OpenMapRealVector.java	add	key	int	1	DEF	entries.containsKey($)
40446	259	8	OpenMapRealVector.java	add	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
40446	259	8	OpenMapRealVector.java	add	i	int	0	NIL-FOR	$ < v.length
40446	259	8	OpenMapRealVector.java	add	v	double[]	0	NIL-FOR	i < $.length
40447	273	8	OpenMapRealVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
800	282	8	OpenMapRealVector.java	append	v	RealVector	0	RET	$ instanceof OpenMapRealVector
40448	298	8	OpenMapRealVector.java	append	THIS	OpenMapRealVector	0	NIL-FOR	i < a.$.length
40448	298	8	OpenMapRealVector.java	append	i	int	0	NIL-FOR	$ < a.length
40448	298	8	OpenMapRealVector.java	append	a	double[]	0	NIL-FOR	i < $.length
40449	314	8	OpenMapRealVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
40450	326	8	OpenMapRealVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
801	329	12	OpenMapRealVector.java	dotProduct	THIS	OpenMapRealVector	0	DEF	idx < v.$.length
801	329	12	OpenMapRealVector.java	dotProduct	idx	int	0	DEF	$ < v.length
801	329	12	OpenMapRealVector.java	dotProduct	v	double[]	0	DEF	idx < $.length
40451	342	8	OpenMapRealVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
40452	354	8	OpenMapRealVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
40453	366	8	OpenMapRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
40454	378	8	OpenMapRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
40455	392	8	OpenMapRealVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
802	395	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ < end
802	395	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ >= index
802	395	12	OpenMapRealVector.java	getSubVector	end	int	0	DEF	key < $
802	395	12	OpenMapRealVector.java	getSubVector	index	int	0	DEF	key >= $
40456	406	8	OpenMapRealVector.java	getData	iter	Iterator	0	NIL-WHILE	$.hasNext()
40457	427	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
40458	435	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
803	438	12	OpenMapRealVector.java	getDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
803	438	12	OpenMapRealVector.java	getDistance	key	int	0	DEF	entries.containsKey($)
804	449	8	OpenMapRealVector.java	getDistance	v	RealVector	0	RET	$ instanceof OpenMapRealVector
40459	459	8	OpenMapRealVector.java	getDistance	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
40459	459	8	OpenMapRealVector.java	getDistance	i	int	0	NIL-FOR	$ < v.length
40459	459	8	OpenMapRealVector.java	getDistance	v	double[]	0	NIL-FOR	i < $.length
40460	483	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
40461	489	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
805	492	12	OpenMapRealVector.java	getL1Distance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
805	492	12	OpenMapRealVector.java	getL1Distance	key	int	0	DEF	entries.containsKey($)
806	503	8	OpenMapRealVector.java	getL1Distance	v	RealVector	0	RET	$ instanceof OpenMapRealVector
40462	513	8	OpenMapRealVector.java	getL1Distance	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
40462	513	8	OpenMapRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < v.length
40462	513	8	OpenMapRealVector.java	getL1Distance	v	double[]	0	NIL-FOR	i < $.length
40463	524	8	OpenMapRealVector.java	getL1Norm	iter	Iterator	0	NIL-WHILE	$.hasNext()
40464	539	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
807	542	12	OpenMapRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
807	542	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
40465	547	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
808	550	12	OpenMapRealVector.java	getLInfDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
808	550	12	OpenMapRealVector.java	getLInfDistance	key	int	0	DEF	entries.containsKey($)
809	551	16	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	iter.value() > $
809	551	16	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	DEF	$.value() > max
810	562	8	OpenMapRealVector.java	getLInfDistance	v	RealVector	0	RET	$ instanceof OpenMapRealVector
40466	572	8	OpenMapRealVector.java	getLInfDistance	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
40466	572	8	OpenMapRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < v.length
40466	572	8	OpenMapRealVector.java	getLInfDistance	v	double[]	0	NIL-FOR	i < $.length
811	574	12	OpenMapRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
811	574	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
40467	585	8	OpenMapRealVector.java	getLInfNorm	iter	Iterator	0	NIL-WHILE	$.hasNext()
40468	596	8	OpenMapRealVector.java	getNorm	iter	Iterator	0	NIL-WHILE	$.hasNext()
40469	607	8	OpenMapRealVector.java	isInfinite	iter	Iterator	0	NIL-WHILE	$.hasNext()
812	610	12	OpenMapRealVector.java	isInfinite	value	double	0	RET	Double.isNaN($)
813	613	12	OpenMapRealVector.java	isInfinite	value	double	0	DEF	Double.isInfinite($)
40470	623	8	OpenMapRealVector.java	isNaN	iter	Iterator	0	NIL-WHILE	$.hasNext()
814	625	12	OpenMapRealVector.java	isNaN	iter	Iterator	0	RET	Double.isNaN($.value())
40471	640	8	OpenMapRealVector.java	mapAbsToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
40472	654	8	OpenMapRealVector.java	mapAcosToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
40472	654	8	OpenMapRealVector.java	mapAcosToSelf	i	int	0	NIL-FOR	$ < virtualSize
40473	667	8	OpenMapRealVector.java	mapAddToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
40473	667	8	OpenMapRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
40474	681	8	OpenMapRealVector.java	mapAsinToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
40475	696	8	OpenMapRealVector.java	mapAtanToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
40476	711	8	OpenMapRealVector.java	mapCbrtToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
40477	726	8	OpenMapRealVector.java	mapCeilToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
40478	740	8	OpenMapRealVector.java	mapCosToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
40478	740	8	OpenMapRealVector.java	mapCosToSelf	i	int	0	NIL-FOR	$ < virtualSize
40479	753	8	OpenMapRealVector.java	mapCoshToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
40479	753	8	OpenMapRealVector.java	mapCoshToSelf	i	int	0	NIL-FOR	$ < virtualSize
40480	767	8	OpenMapRealVector.java	mapDivideToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
40481	781	8	OpenMapRealVector.java	mapExpToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
40481	781	8	OpenMapRealVector.java	mapExpToSelf	i	int	0	NIL-FOR	$ < virtualSize
40482	795	8	OpenMapRealVector.java	mapExpm1ToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
40483	810	8	OpenMapRealVector.java	mapFloorToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
40484	824	8	OpenMapRealVector.java	mapInvToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
40484	824	8	OpenMapRealVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < virtualSize
40485	842	8	OpenMapRealVector.java	mapLog10ToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
40485	842	8	OpenMapRealVector.java	mapLog10ToSelf	i	int	0	NIL-FOR	$ < virtualSize
40486	856	8	OpenMapRealVector.java	mapLog1pToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
40487	865	8	OpenMapRealVector.java	mapLogToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
40487	865	8	OpenMapRealVector.java	mapLogToSelf	i	int	0	NIL-FOR	$ < virtualSize
40488	879	8	OpenMapRealVector.java	mapMultiplyToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
40489	893	8	OpenMapRealVector.java	mapPowToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
40490	908	8	OpenMapRealVector.java	mapRintToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
40491	923	8	OpenMapRealVector.java	mapSignumToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
40492	938	8	OpenMapRealVector.java	mapSinToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
40493	954	8	OpenMapRealVector.java	mapSinhToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
40494	969	8	OpenMapRealVector.java	mapSqrtToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
40495	994	8	OpenMapRealVector.java	mapTanToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
40496	1009	8	OpenMapRealVector.java	mapTanhToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
40497	1024	8	OpenMapRealVector.java	mapUlpToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
40498	1041	8	OpenMapRealVector.java	outerproduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
40499	1044	12	OpenMapRealVector.java	outerproduct	iter2	Iterator	0	NIL-WHILE	$.hasNext()
815	1056	8	OpenMapRealVector.java	outerProduct	v	RealVector	0	RET	$ instanceof OpenMapRealVector
40500	1061	8	OpenMapRealVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
40501	1064	12	OpenMapRealVector.java	outerProduct	THIS	OpenMapRealVector	0	NIL-FOR	col < $.virtualSize
40501	1064	12	OpenMapRealVector.java	outerProduct	col	int	0	NIL-FOR	$ < virtualSize
40502	1076	8	OpenMapRealVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
40503	1080	12	OpenMapRealVector.java	outerProduct	THIS	OpenMapRealVector	0	NIL-FOR	col < $.virtualSize
40503	1080	12	OpenMapRealVector.java	outerProduct	col	int	0	NIL-FOR	$ < virtualSize
816	1102	8	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	1	DEF	$.isZero(value)
816	1102	8	OpenMapRealVector.java	setEntry	value	double	1	DEF	isZero($)
817	1104	15	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(index)
817	1104	15	OpenMapRealVector.java	setEntry	index	int	0	DEF	entries.containsKey($)
40504	1120	8	OpenMapRealVector.java	setSubVector	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
40504	1120	8	OpenMapRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.length
40504	1120	8	OpenMapRealVector.java	setSubVector	v	double[]	0	NIL-FOR	i < $.length
40505	1127	8	OpenMapRealVector.java	set	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
40505	1127	8	OpenMapRealVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
40506	1142	8	OpenMapRealVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
818	1145	12	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(key)
818	1145	12	OpenMapRealVector.java	subtract	key	int	1	DEF	entries.containsKey($)
819	1157	8	OpenMapRealVector.java	subtract	v	RealVector	0	RET	$ instanceof OpenMapRealVector
40507	1167	8	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
40507	1167	8	OpenMapRealVector.java	subtract	i	int	0	NIL-FOR	$ < v.length
40507	1167	8	OpenMapRealVector.java	subtract	v	double[]	0	NIL-FOR	i < $.length
820	1168	12	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(i)
820	1168	12	OpenMapRealVector.java	subtract	i	int	1	DEF	entries.containsKey($)
821	1188	8	OpenMapRealVector.java	unitize	THIS	OpenMapRealVector	0	DEF	$.isZero(norm)
821	1188	8	OpenMapRealVector.java	unitize	norm	double	0	DEF	isZero($)
40508	1192	8	OpenMapRealVector.java	unitize	iter	Iterator	0	NIL-WHILE	$.hasNext()
822	1208	8	OpenMapRealVector.java	checkIndex	THIS	OpenMapRealVector	0	MatrixIndexException	index >= $.getDimension()
822	1208	8	OpenMapRealVector.java	checkIndex	index	int	0	MatrixIndexException	$ < 0
822	1208	8	OpenMapRealVector.java	checkIndex	index	int	0	MatrixIndexException	$ >= getDimension()
823	1224	8	OpenMapRealVector.java	checkVectorDimensions	THIS	OpenMapRealVector	0	DEF	$.getDimension() != n
823	1224	8	OpenMapRealVector.java	checkVectorDimensions	n	int	0	DEF	getDimension() != $
40509	1250	8	OpenMapRealVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
824	1266	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$ == obj
824	1266	8	OpenMapRealVector.java	equals	obj	Object	0	RET	this == $
825	1269	8	OpenMapRealVector.java	equals	obj	Object	0	RET	$ == null
826	1272	8	OpenMapRealVector.java	equals	obj	Object	0	RET	$ instanceof OpenMapRealVector
827	1276	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$.virtualSize != other.$.virtualSize
827	1276	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	virtualSize != $.virtualSize
828	1279	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits($.epsilon) != Double.doubleToLongBits(other.$.epsilon)
828	1279	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	Double.doubleToLongBits(epsilon) != Double.doubleToLongBits($.epsilon)
40510	1284	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
829	1287	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(iter.value())
829	1287	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.value())
40511	1292	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
830	1295	12	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.getEntry(iter.key()))
830	1295	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(getEntry(iter.key()))
830	1295	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry($.key()))
481	78	8	PascalDistributionImpl.java	setNumberOfSuccesses	successes	int	0	DEF	$ < 0
482	93	8	PascalDistributionImpl.java	setProbabilityOfSuccess	p	double	0	DEF	$ > 1.0
482	93	8	PascalDistributionImpl.java	setProbabilityOfSuccess	p	double	0	DEF	$ < 0.0
483	135	8	PascalDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
484	151	8	PascalDistributionImpl.java	probability	x	int	1	DEF	$ < 0
485	180	8	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
486	182	15	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
1241	93	8	PearsonsCorrelation.java	PearsonsCorrelation	covarianceMatrix	RealMatrix	0	DEF	$ == null
40777	138	8	PearsonsCorrelation.java	getCorrelationStandardErrors	i	int	0	NIL-FOR	$ < nVars
40777	138	8	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	i < $
40778	139	12	PearsonsCorrelation.java	getCorrelationStandardErrors	j	int	0	NIL-FOR	$ < nVars
40778	139	12	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	j < $
40779	164	8	PearsonsCorrelation.java	getCorrelationPValues	i	int	0	NIL-FOR	$ < nVars
40779	164	8	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	i < $
40780	165	12	PearsonsCorrelation.java	getCorrelationPValues	j	int	0	NIL-FOR	$ < nVars
40780	165	12	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	j < $
1242	166	16	PearsonsCorrelation.java	getCorrelationPValues	j	int	1	DEF	i == $
1242	166	16	PearsonsCorrelation.java	getCorrelationPValues	i	int	1	DEF	$ == j
40781	189	8	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	$ < nVars
40781	189	8	PearsonsCorrelation.java	computeCorrelationMatrix	nVars	int	0	NIL-FOR	i < $
40782	190	12	PearsonsCorrelation.java	computeCorrelationMatrix	j	int	0	NIL-FOR	$ < i
40782	190	12	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	j < $
1243	226	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	RET	xArray.$.length == yArray.$.length
1243	226	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	RET	xArray.$.length > 1
1243	226	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	RET	$.length == yArray.length
1243	226	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	RET	$.length > 1
1243	226	8	PearsonsCorrelation.java	correlation	yArray	double[]	1	RET	xArray.length == $.length
40783	227	12	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	0	NIL-FOR	i<xArray.$.length
40783	227	12	PearsonsCorrelation.java	correlation	i	int	0	NIL-FOR	$<xArray.length
40783	227	12	PearsonsCorrelation.java	correlation	xArray	double[]	0	NIL-FOR	i<$.length
40784	253	8	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	$ < nVars
40784	253	8	PearsonsCorrelation.java	covarianceToCorrelation	nVars	int	0	NIL-FOR	i < $
40785	256	12	PearsonsCorrelation.java	covarianceToCorrelation	j	int	0	NIL-FOR	$ < i
40785	256	12	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	j < $
1244	275	8	PearsonsCorrelation.java	checkSufficientData	nRows	int	0	DEF	$ < 2
1244	275	8	PearsonsCorrelation.java	checkSufficientData	nCols	int	0	DEF	$ < 2
1189	200	8	Percentile.java	evaluate	p	double	0	DEF	$ > 100
1189	200	8	Percentile.java	evaluate	p	double	0	DEF	$ <= 0
1190	204	8	Percentile.java	evaluate	length	int	0	RET	$ == 0
1191	207	8	Percentile.java	evaluate	length	int	0	RET	$ == 1
1192	219	8	Percentile.java	evaluate	pos	double	0	RET	$ < 1
1193	222	8	Percentile.java	evaluate	n	double	0	RET	pos >= $
1193	222	8	Percentile.java	evaluate	pos	double	0	RET	$ >= n
1194	249	8	Percentile.java	setQuantile	p	double	0	DEF	$ <= 0
1194	249	8	Percentile.java	setQuantile	p	double	0	DEF	$ > 100
408	91	8	PoissonDistributionImpl.java	setMean	p	double	0	DEF	$ <= 0
409	108	8	PoissonDistributionImpl.java	probability	x	int	0	RET	$ < 0
409	108	8	PoissonDistributionImpl.java	probability	x	int	0	RET	$ == Integer.MAX_VALUE
410	125	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ < 0
411	128	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ == Integer.MAX_VALUE
1761	64	8	PolynomialFunction.java	PolynomialFunction	THIS	PolynomialFunction	0	DEF	c.$.length < 1
1761	64	8	PolynomialFunction.java	PolynomialFunction	c	double	0	DEF	$.length < 1
41124	68	8	PolynomialFunction.java	PolynomialFunction	l	int	0	NIL-WHILE	$ > 1
41124	68	8	PolynomialFunction.java	PolynomialFunction	l	int	0	NIL-WHILE	c[$ - 1] == 0
41124	68	8	PolynomialFunction.java	PolynomialFunction	c	double	0	NIL-WHILE	$[l - 1] == 0
1762	124	8	PolynomialFunction.java	evaluate	n	int	0	DEF	$ < 1
41125	128	8	PolynomialFunction.java	evaluate	j	int	0	NIL-FOR	$ >=0
41126	147	8	PolynomialFunction.java	add	i	int	0	NIL-FOR	$ < lowLength
41126	147	8	PolynomialFunction.java	add	lowLength	int	0	NIL-FOR	i < $
41127	173	8	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < lowLength
41127	173	8	PolynomialFunction.java	subtract	lowLength	int	0	NIL-FOR	i < $
1763	176	8	PolynomialFunction.java	subtract	THIS	PolynomialFunction	1	DEF	$.coefficients.$.length < p.$.coefficients.$.length
1763	176	8	PolynomialFunction.java	subtract	p	PolynomialFunction	1	DEF	coefficients.length < $.coefficients.length
41128	177	12	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < highLength
41128	177	12	PolynomialFunction.java	subtract	highLength	int	0	NIL-FOR	i < $
41129	195	8	PolynomialFunction.java	negate	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
41129	195	8	PolynomialFunction.java	negate	i	int	0	NIL-FOR	$ < coefficients.length
41130	210	8	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	i < newCoefficients.$.length
41130	210	8	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	$ < newCoefficients.length
41130	210	8	PolynomialFunction.java	multiply	newCoefficients	double[]	0	NIL-FOR	i < $.length
41131	212	12	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	j < Math.min($.coefficients.$.length, i + 1)
41131	212	12	PolynomialFunction.java	multiply	j	int	0	NIL-FOR	$ < Math.min(coefficients.length, i + 1)
41131	212	12	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	j < Math.min(coefficients.length, $ + 1)
1764	233	8	PolynomialFunction.java	differentiate	n	int	0	DEF	$ < 1
1765	236	8	PolynomialFunction.java	differentiate	n	int	0	RET	$ == 1
41132	240	8	PolynomialFunction.java	differentiate	i	int	0	NIL-FOR	$ > 0
1766	283	7	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	RET	$.coefficients[0] == 0.0
1767	284	9	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	RET	$.coefficients.$.length == 1
41133	291	7	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
41133	291	7	PolynomialFunction.java	toString	i	int	0	NIL-FOR	$ < coefficients.length
1768	293	9	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] != 0
1768	293	9	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] != 0
1769	295	11	PolynomialFunction.java	toString	s	StringBuffer	1	DEF	$.length() > 0
1770	296	13	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	DEF	$.coefficients[i] < 0
1770	296	13	PolynomialFunction.java	toString	i	int	1	DEF	coefficients[$] < 0
1771	302	13	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] < 0
1771	302	13	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] < 0
1772	308	11	PolynomialFunction.java	toString	absAi	double	0	DEF	($ - 1) != 0
1773	314	11	PolynomialFunction.java	toString	i	int	0	DEF	$ > 1
1774	338	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	$ == obj
1774	338	8	PolynomialFunction.java	equals	obj	Object	0	RET	this == $
1775	340	8	PolynomialFunction.java	equals	obj	Object	0	RET	$ == null
1776	342	8	PolynomialFunction.java	equals	obj	Object	0	RET	$ instanceof PolynomialFunction
1777	345	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	Arrays.equals($.coefficients, other.$.coefficients)
1777	345	8	PolynomialFunction.java	equals	other	PolynomialFunction	0	RET	Arrays.equals(coefficients, $.coefficients)
1752	135	8	PolynomialFunctionLagrangeForm.java	getCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.coefficientsComputed
41114	170	8	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	$ < n
41114	170	8	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	i < $
1753	176	12	PolynomialFunctionLagrangeForm.java	evaluate	dist	double	0	DEF	$ < min_dist
1753	176	12	PolynomialFunctionLagrangeForm.java	evaluate	min_dist	double	0	DEF	dist < $
41115	185	8	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	$ < n
41115	185	8	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	i < $
41116	186	12	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	j < n-$
41116	186	12	PolynomialFunctionLagrangeForm.java	evaluate	j	int	0	NIL-FOR	$ < n-i
41116	186	12	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	j < $-i
1754	190	16	PolynomialFunctionLagrangeForm.java	evaluate	divider	double	0	DuplicateSampleAbscissaException	$ == 0.0
1755	200	12	PolynomialFunctionLagrangeForm.java	evaluate	i	int	1	DEF	nearest < 0.5*(n-$+1)
1755	200	12	PolynomialFunctionLagrangeForm.java	evaluate	n	int	1	DEF	nearest < 0.5*($-i+1)
1755	200	12	PolynomialFunctionLagrangeForm.java	evaluate	nearest	int	1	DEF	$ < 0.5*(n-i+1)
41117	226	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
41117	226	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
41118	233	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
41118	233	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
41119	234	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
41120	242	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
41120	242	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
41121	245	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ < n
41121	245	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	j < $
1756	246	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != j
1756	246	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	DEF	i != $
1757	250	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	d	double	0	DEF	$ == 0.0
41122	252	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	NIL-FOR	$ < n
41122	252	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	k < $
1758	253	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.x[i] == $.x[k]
1758	253	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	DEF	x[i] == x[$]
1758	253	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	DEF	i != $
1758	253	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	x[$] == x[k]
1758	253	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != k
41123	265	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ >= 0
1759	289	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	DEF	Math.min(x.$.length, y.$.length) < 2
1759	289	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	DEF	Math.min($.length, y.length) < 2
1759	289	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	DEF	Math.min(x.length, $.length) < 2
1760	294	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	DEF	x.$.length != y.$.length
1760	294	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	DEF	$.length != y.length
1760	294	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	DEF	x.length != $.length
1779	135	8	PolynomialFunctionNewtonForm.java	getCoefficients	THIS	PolynomialFunctionNewtonForm	0	DEF	$.coefficientsComputed
41137	162	8	PolynomialFunctionNewtonForm.java	evaluate	i	int	0	NIL-FOR	$ >= 0
41138	177	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ <= n
41138	177	8	PolynomialFunctionNewtonForm.java	computeCoefficients	n	int	0	NIL-FOR	i <= $
41139	182	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ >= 0
41140	183	12	PolynomialFunctionNewtonForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
1780	207	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DEF	a.$.length < 1
1780	207	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DEF	c.$.length < 1
1780	207	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	DEF	$.length < 1
1780	207	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	DEF	$.length < 1
1781	211	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DEF	a.$.length != c.$.length + 1
1781	211	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	DEF	$.length != c.length + 1
1781	211	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	DEF	a.length != $.length + 1
1745	98	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DEF	knots.$.length < 2
1745	98	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DEF	$.length < 2
1746	103	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DEF	knots.$.length - 1 != polynomials.$.length
1746	103	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DEF	$.length - 1 != polynomials.length
1746	103	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	DEF	knots.length - 1 != $.length
1747	108	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DEF	$.isStrictlyIncreasing(knots)
1747	108	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DEF	isStrictlyIncreasing($)
1748	136	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	ArgumentOutsideDomainException	v < $.knots[0]
1748	136	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	ArgumentOutsideDomainException	v > $.knots[$.n]
1748	136	8	PolynomialSplineFunction.java	value	v	double	0	ArgumentOutsideDomainException	$ < knots[0]
1748	136	8	PolynomialSplineFunction.java	value	v	double	0	ArgumentOutsideDomainException	$ > knots[n]
1749	140	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
1750	146	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
1750	146	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
41112	167	8	PolynomialSplineFunction.java	polynomialSplineDerivative	THIS	PolynomialSplineFunction	0	NIL-FOR	i < $.n
41112	167	8	PolynomialSplineFunction.java	polynomialSplineDerivative	i	int	0	NIL-FOR	$ < n
41113	220	8	PolynomialSplineFunction.java	isStrictlyIncreasing	THIS	PolynomialSplineFunction	0	NIL-FOR	i < x.$.length
41113	220	8	PolynomialSplineFunction.java	isStrictlyIncreasing	i	int	0	NIL-FOR	$ < x.length
41113	220	8	PolynomialSplineFunction.java	isStrictlyIncreasing	x	double[]	0	NIL-FOR	i < $.length
1751	221	12	PolynomialSplineFunction.java	isStrictlyIncreasing	i	int	0	RET	x[$ - 1] >= x[$]
1751	221	12	PolynomialSplineFunction.java	isStrictlyIncreasing	x	double[]	0	RET	$[i - 1] >= $[i]
1778	198	12	PolynomialsUtils.java	buildPolynomial	maxDegree	int	0	DEF	degree > $
1778	198	12	PolynomialsUtils.java	buildPolynomial	degree	int	0	DEF	$ > maxDegree
41134	214	8	PolynomialsUtils.java	buildPolynomial	i	int	0	NIL-FOR	$ <= degree
41134	214	8	PolynomialsUtils.java	buildPolynomial	degree	int	0	NIL-FOR	i <= $
41135	234	8	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	$ < degree
41135	234	8	PolynomialsUtils.java	computeUpToDegree	degree	int	0	NIL-FOR	k < $
41136	250	12	PolynomialsUtils.java	computeUpToDegree	i	int	0	NIL-FOR	$ < k
41136	250	12	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	i < $
1105	72	8	Product.java	increment	THIS	Product	1	DEF	$.n == 0
1106	121	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, begin, length)
1106	121	8	Product.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1106	121	8	Product.java	evaluate	begin	int	0	DEF	test(values, $, length)
1106	121	8	Product.java	evaluate	length	int	0	DEF	test(values, begin, $)
40740	123	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
40740	123	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
40740	123	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
345	99	8	ProperBigFractionFormat.java	format	whole	BigInteger	0	DEF	BigInteger.ZERO.equals($)
346	102	12	ProperBigFractionFormat.java	format	num	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
347	137	8	ProperBigFractionFormat.java	parse	ret	BigFraction	0	RET	$ != null
348	148	8	ProperBigFractionFormat.java	parse	whole	BigInteger	0	RET	$ == null
349	161	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
350	169	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
351	200	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
352	208	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
353	215	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
354	219	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
355	234	8	ProperBigFractionFormat.java	setWholeFormat	format	NumberFormat	0	DEF	$ == null
328	100	8	ProperFractionFormat.java	format	whole	int	0	DEF	$ != 0
329	137	8	ProperFractionFormat.java	parse	ret	Fraction	0	RET	$ != null
330	148	8	ProperFractionFormat.java	parse	whole	Number	0	RET	$ == null
331	161	8	ProperFractionFormat.java	parse	num	Number	0	RET	$ == null
332	169	8	ProperFractionFormat.java	parse	num	Number	0	RET	$.intValue() < 0
333	200	8	ProperFractionFormat.java	parse	den	Number	0	RET	$ == null
334	208	8	ProperFractionFormat.java	parse	den	Number	0	RET	$.intValue() < 0
335	227	8	ProperFractionFormat.java	setWholeFormat	format	NumberFormat	0	DEF	$ == null
40283	86	8	QRDecompositionImpl.java	QRDecompositionImpl	minor	int	0	NIL-FOR	$ < Math.min(m, n)
40283	86	8	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	minor < Math.min($, n)
40283	86	8	QRDecompositionImpl.java	QRDecompositionImpl	n	int	0	NIL-FOR	minor < Math.min(m, $)
40284	98	12	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
40284	98	12	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
757	105	12	QRDecompositionImpl.java	QRDecompositionImpl	a	double	0	DEF	$ != 0.0
40285	129	16	QRDecompositionImpl.java	QRDecompositionImpl	col	int	0	NIL-FOR	$ < n
40285	129	16	QRDecompositionImpl.java	QRDecompositionImpl	n	int	0	NIL-FOR	col < $
40286	132	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
40286	132	20	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
40287	138	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
40287	138	20	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
758	149	8	QRDecompositionImpl.java	getR	THIS	QRDecompositionImpl	0	DEF	$.cachedR == null
40288	157	12	QRDecompositionImpl.java	getR	row	int	0	NIL-FOR	$ >= 0
40289	159	16	QRDecompositionImpl.java	getR	col	int	0	NIL-FOR	$ < n
40289	159	16	QRDecompositionImpl.java	getR	n	int	0	NIL-FOR	col < $
759	173	8	QRDecompositionImpl.java	getQ	THIS	QRDecompositionImpl	0	DEF	$.cachedQ == null
760	182	8	QRDecompositionImpl.java	getQT	THIS	QRDecompositionImpl	0	DEF	$.cachedQT == null
40290	194	12	QRDecompositionImpl.java	getQT	minor	int	0	NIL-FOR	$ >= Math.min(m, n)
40290	194	12	QRDecompositionImpl.java	getQT	n	int	0	NIL-FOR	minor >= Math.min(m, $)
40290	194	12	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	minor >= Math.min($, n)
40291	198	12	QRDecompositionImpl.java	getQT	minor	int	0	NIL-FOR	$ >= 0
761	201	16	QRDecompositionImpl.java	getQT	qrtMinor	double[]	0	DEF	$[minor] != 0.0
761	201	16	QRDecompositionImpl.java	getQT	minor	int	0	DEF	qrtMinor[$] != 0.0
40292	202	20	QRDecompositionImpl.java	getQT	col	int	0	NIL-FOR	$ < m
40292	202	20	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	col < $
40293	204	24	QRDecompositionImpl.java	getQT	row	int	0	NIL-FOR	$ < m
40293	204	24	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	row < $
40294	209	24	QRDecompositionImpl.java	getQT	row	int	0	NIL-FOR	$ < m
40294	209	24	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	row < $
762	226	8	QRDecompositionImpl.java	getH	THIS	QRDecompositionImpl	0	DEF	$.cachedH == null
40295	231	12	QRDecompositionImpl.java	getH	i	int	0	NIL-FOR	$ < m
40295	231	12	QRDecompositionImpl.java	getH	m	int	0	NIL-FOR	i < $
40296	232	16	QRDecompositionImpl.java	getH	j	int	0	NIL-FOR	$ < Math.min(i + 1, n)
40296	232	16	QRDecompositionImpl.java	getH	i	int	0	NIL-FOR	j < Math.min($ + 1, n)
40296	232	16	QRDecompositionImpl.java	getH	n	int	0	NIL-FOR	j < Math.min(i + 1, $)
1317	185	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
1318	135	8	RandomDataImpl.java	nextHexString	len	int	0	DEF	$ <= 0
40836	151	8	RandomDataImpl.java	nextHexString	THIS	RandomDataImpl	0	NIL-FOR	i < randomBytes.$.length
40836	151	8	RandomDataImpl.java	nextHexString	i	int	0	NIL-FOR	$ < randomBytes.length
40836	151	8	RandomDataImpl.java	nextHexString	randomBytes	byte[]	0	NIL-FOR	i < $.length
1319	162	12	RandomDataImpl.java	nextHexString	hex	String	0	DEF	$.length() == 1
1320	181	8	RandomDataImpl.java	nextInt	lower	int	0	DEF	$ >= upper
1320	181	8	RandomDataImpl.java	nextInt	upper	int	0	DEF	lower >= $
1321	202	8	RandomDataImpl.java	nextLong	lower	long	0	DEF	$ >= upper
1321	202	8	RandomDataImpl.java	nextLong	upper	long	0	DEF	lower >= $
1322	233	8	RandomDataImpl.java	nextSecureHexString	len	int	0	DEF	$ <= 0
40837	252	8	RandomDataImpl.java	nextSecureHexString	iter	int	0	NIL-FOR	$ < numIter + 1
40837	252	8	RandomDataImpl.java	nextSecureHexString	numIter	int	0	NIL-FOR	iter < $ + 1
40838	261	12	RandomDataImpl.java	nextSecureHexString	THIS	RandomDataImpl	0	NIL-FOR	i < hash.$.length
40838	261	12	RandomDataImpl.java	nextSecureHexString	i	int	0	NIL-FOR	$ < hash.length
40838	261	12	RandomDataImpl.java	nextSecureHexString	hash	byte[]	0	NIL-FOR	i < $.length
1323	272	16	RandomDataImpl.java	nextSecureHexString	hex	String	0	DEF	$.length() == 1
1324	293	8	RandomDataImpl.java	nextSecureInt	lower	int	0	DEF	$ >= upper
1324	293	8	RandomDataImpl.java	nextSecureInt	upper	int	0	DEF	lower >= $
1325	314	8	RandomDataImpl.java	nextSecureLong	lower	long	0	DEF	$ >= upper
1325	314	8	RandomDataImpl.java	nextSecureLong	upper	long	0	DEF	lower >= $
1326	353	8	RandomDataImpl.java	nextPoisson	mean	double	0	DEF	$ <= 0
1327	361	8	RandomDataImpl.java	nextPoisson	pivot	double	1	RET	mean < $
1327	361	8	RandomDataImpl.java	nextPoisson	mean	double	1	RET	$ < pivot
40839	367	12	RandomDataImpl.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * mean
40839	367	12	RandomDataImpl.java	nextPoisson	mean	double	0	NIL-WHILE	n < 1000 * $
1328	370	16	RandomDataImpl.java	nextPoisson	p	double	1	DEF	r >= $
1328	370	16	RandomDataImpl.java	nextPoisson	r	double	1	DEF	$ >= p
40840	402	12	RandomDataImpl.java	nextPoisson	accept	boolean	0	NIL-WHILE	$
1329	406	16	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ <= c1
1329	406	16	RandomDataImpl.java	nextPoisson	c1	double	1	DEF	u <= $
1330	411	20	RandomDataImpl.java	nextPoisson	mu	double	0	DEF	x < -$
1330	411	20	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ < -mu
1331	414	23	RandomDataImpl.java	nextPoisson	u	double	1	DEF	c1 < $
1331	414	23	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ <= c2
1331	414	23	RandomDataImpl.java	nextPoisson	c1	double	1	DEF	$ < u
1331	414	23	RandomDataImpl.java	nextPoisson	c2	double	1	DEF	u <= $
1332	419	20	RandomDataImpl.java	nextPoisson	delta	double	0	DEF	x > $
1332	419	20	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ > delta
1333	422	23	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ <= c3
1333	422	23	RandomDataImpl.java	nextPoisson	u	double	1	DEF	c2 < $
1333	422	23	RandomDataImpl.java	nextPoisson	c2	double	1	DEF	$ < u
1333	422	23	RandomDataImpl.java	nextPoisson	c3	double	1	DEF	u <= $
1334	425	23	RandomDataImpl.java	nextPoisson	u	double	1	DEF	c3 < $
1334	425	23	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ <= c4
1334	425	23	RandomDataImpl.java	nextPoisson	c3	double	1	DEF	$ < u
1334	425	23	RandomDataImpl.java	nextPoisson	c4	double	1	DEF	u <= $
1335	428	23	RandomDataImpl.java	nextPoisson	u	double	0	DEF	c4 < $
1335	428	23	RandomDataImpl.java	nextPoisson	c4	double	0	DEF	$ < u
1336	456	8	RandomDataImpl.java	nextGaussian	sigma	double	0	DEF	$ <= 0
1337	479	8	RandomDataImpl.java	nextExponential	mean	double	0	DEF	$ < 0.0
40841	485	8	RandomDataImpl.java	nextExponential	unif	double	0	NIL-WHILE	$ == 0.0d
1338	508	8	RandomDataImpl.java	nextUniform	lower	double	0	DEF	$ >= upper
1338	508	8	RandomDataImpl.java	nextUniform	upper	double	0	DEF	lower >= $
40842	517	8	RandomDataImpl.java	nextUniform	u	double	0	NIL-WHILE	$ <= 0.0
1339	534	8	RandomDataImpl.java	getRan	THIS	RandomDataImpl	0	DEF	$.rand == null
1340	550	8	RandomDataImpl.java	getSecRan	THIS	RandomDataImpl	0	DEF	$.secRand == null
1341	567	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
1342	581	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
1343	597	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
1344	608	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
1345	668	8	RandomDataImpl.java	nextPermutation	n	int	0	DEF	k > $
1345	668	8	RandomDataImpl.java	nextPermutation	k	int	0	DEF	$ > n
1346	672	8	RandomDataImpl.java	nextPermutation	k	int	0	DEF	$ == 0
40843	680	8	RandomDataImpl.java	nextPermutation	i	int	0	NIL-FOR	$ < k
40843	680	8	RandomDataImpl.java	nextPermutation	k	int	0	NIL-FOR	i < $
1347	705	8	RandomDataImpl.java	nextSample	len	int	0	DEF	k > $
1347	705	8	RandomDataImpl.java	nextSample	k	int	0	DEF	$ > len
1348	709	8	RandomDataImpl.java	nextSample	k	int	0	DEF	$ <= 0
40844	717	8	RandomDataImpl.java	nextSample	i	int	0	NIL-FOR	$ < k
40844	717	8	RandomDataImpl.java	nextSample	k	int	0	NIL-FOR	i < $
40845	736	8	RandomDataImpl.java	shuffle	i	int	0	NIL-FOR	$ >= end
40845	736	8	RandomDataImpl.java	shuffle	end	int	0	NIL-FOR	i >= $
1349	737	12	RandomDataImpl.java	shuffle	i	int	1	DEF	$ == 0
40846	757	8	RandomDataImpl.java	getNatural	i	int	0	NIL-FOR	$ < n
40846	757	8	RandomDataImpl.java	getNatural	n	int	0	NIL-FOR	i < $
1378	122	8	RandomKey.java	decodeGeneric	l	int	0	IllegalArgumentException	representation.size() != $
1378	122	8	RandomKey.java	decodeGeneric	representation	List<Double>	0	IllegalArgumentException	$.size() != l
1379	125	8	RandomKey.java	decodeGeneric	representation	List<Double>	0	IllegalArgumentException	$.size() != sortedRepr.size()
1379	125	8	RandomKey.java	decodeGeneric	sortedRepr	List<Double>	0	IllegalArgumentException	representation.size() != $.size()
40856	133	8	RandomKey.java	decodeGeneric	i	int	0	NIL-FOR	$<l
40856	133	8	RandomKey.java	decodeGeneric	l	int	0	NIL-FOR	i<$
1380	151	8	RandomKey.java	isSame	another	Chromosome	0	RET	$ instanceof RandomKey<?>
1381	155	8	RandomKey.java	isSame	THIS	RandomKey	0	RET	$.getLength() != anotherRk.getLength()
1381	155	8	RandomKey.java	isSame	anotherRk	RandomKey<?>	0	RET	getLength() != $.getLength()
40857	163	8	RandomKey.java	isSame	THIS	RandomKey	0	NIL-FOR	i<$.getLength()
40857	163	8	RandomKey.java	isSame	i	int	0	NIL-FOR	$<getLength()
1382	164	12	RandomKey.java	isSame	i	int	0	RET	thisPerm.get($) != anotherPerm.get($)
1382	164	12	RandomKey.java	isSame	thisPerm	List<Integer>	0	RET	$.get(i) != anotherPerm.get(i)
1382	164	12	RandomKey.java	isSame	anotherPerm	List<Integer>	0	RET	thisPerm.get(i) != $.get(i)
1383	177	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val < 0
1383	177	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val > 1
40858	194	8	RandomKey.java	randomPermutation	i	int	0	NIL-FOR	$<l
40858	194	8	RandomKey.java	randomPermutation	l	int	0	NIL-FOR	i<$
40859	210	8	RandomKey.java	identityPermutation	i	int	0	NIL-FOR	$<l
40859	210	8	RandomKey.java	identityPermutation	l	int	0	NIL-FOR	i<$
1384	250	8	RandomKey.java	inducedPermutation	originalData	List<S>	0	IllegalArgumentException	$.size() != permutedData.size()
1384	250	8	RandomKey.java	inducedPermutation	permutedData	List<S>	0	IllegalArgumentException	originalData.size() != $.size()
40860	258	8	RandomKey.java	inducedPermutation	i	int	0	NIL-FOR	$<l
40860	258	8	RandomKey.java	inducedPermutation	l	int	0	NIL-FOR	i<$
1385	260	12	RandomKey.java	inducedPermutation	index	int	0	IllegalArgumentException	$ == -1
40861	285	8	RandomKey.java	baseSequence	i	int	0	NIL-FOR	$<l
40861	285	8	RandomKey.java	baseSequence	l	int	0	NIL-FOR	i<$
1359	40	8	RandomKeyMutation.java	mutate	original	Chromosome	0	DEF	$ instanceof RandomKey<?>
702	117	8	RealMatrixImpl.java	RealMatrixImpl	copyArray	boolean	1	DEF	$
703	120	12	RealMatrixImpl.java	RealMatrixImpl	d	double[][]	0	NullPointerException	$ == null
704	124	12	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	DEF	$ == 0
705	128	12	RealMatrixImpl.java	RealMatrixImpl	nCols	int	0	DEF	$ == 0
40194	131	12	RealMatrixImpl.java	RealMatrixImpl	r	int	0	NIL-FOR	$ < nRows
40194	131	12	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	NIL-FOR	r < $
706	132	16	RealMatrixImpl.java	RealMatrixImpl	THIS	RealMatrixImpl	0	DEF	d[r].length != nCols
706	132	16	RealMatrixImpl.java	RealMatrixImpl	r	int	0	DEF	d[$].length != nCols
706	132	16	RealMatrixImpl.java	RealMatrixImpl	nCols	int	0	DEF	d[r].length != $
706	132	16	RealMatrixImpl.java	RealMatrixImpl	d	double[][]	0	DEF	$[r].length != nCols
40195	153	8	RealMatrixImpl.java	RealMatrixImpl	row	int	0	NIL-FOR	$ < nRows
40195	153	8	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	NIL-FOR	row < $
40196	198	8	RealMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
40196	198	8	RealMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
40197	202	12	RealMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
40197	202	12	RealMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
40198	238	8	RealMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
40198	238	8	RealMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
40199	242	12	RealMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
40199	242	12	RealMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
40200	279	8	RealMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
40200	279	8	RealMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
40201	282	12	RealMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
40201	282	12	RealMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
40202	284	16	RealMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
40202	284	16	RealMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
707	316	8	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	1	DEF	$.data == null
708	317	12	RealMatrixImpl.java	setSubMatrix	row	int	0	DEF	$ > 0
709	322	12	RealMatrixImpl.java	setSubMatrix	column	int	0	DEF	$ > 0
710	328	12	RealMatrixImpl.java	setSubMatrix	nRows	int	0	DEF	$ == 0
711	333	12	RealMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	$ == 0
40203	337	12	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	NIL-FOR	i < $.data.$.length
40203	337	12	RealMatrixImpl.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
712	338	16	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	DEF	subMatrix[i].length != nCols
712	338	16	RealMatrixImpl.java	setSubMatrix	i	int	0	DEF	subMatrix[$].length != nCols
712	338	16	RealMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	subMatrix[i].length != $
712	338	16	RealMatrixImpl.java	setSubMatrix	subMatrix	double[][]	0	DEF	$[i].length != nCols
713	421	8	RealMatrixImpl.java	operate	THIS	RealMatrixImpl	0	DEF	v.$.length != nCols
713	421	8	RealMatrixImpl.java	operate	nCols	int	0	DEF	v.length != $
713	421	8	RealMatrixImpl.java	operate	v	double[]	0	DEF	$.length != nCols
40204	427	8	RealMatrixImpl.java	operate	row	int	0	NIL-FOR	$ < nRows
40204	427	8	RealMatrixImpl.java	operate	nRows	int	0	NIL-FOR	row < $
40205	430	12	RealMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < nCols
40205	430	12	RealMatrixImpl.java	operate	nCols	int	0	NIL-FOR	i < $
714	445	8	RealMatrixImpl.java	preMultiply	THIS	RealMatrixImpl	0	DEF	v.$.length != nRows
714	445	8	RealMatrixImpl.java	preMultiply	nRows	int	0	DEF	v.length != $
714	445	8	RealMatrixImpl.java	preMultiply	v	double[]	0	DEF	$.length != nRows
40206	452	8	RealMatrixImpl.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
40206	452	8	RealMatrixImpl.java	preMultiply	nCols	int	0	NIL-FOR	col < $
40207	454	12	RealMatrixImpl.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
40207	454	12	RealMatrixImpl.java	preMultiply	nRows	int	0	NIL-FOR	i < $
40208	471	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
40208	471	8	RealMatrixImpl.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
40209	473	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
40209	473	12	RealMatrixImpl.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
40210	487	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
40210	487	8	RealMatrixImpl.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
40211	489	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
40211	489	12	RealMatrixImpl.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
40212	505	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
40212	505	8	RealMatrixImpl.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
40213	507	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
40213	507	12	RealMatrixImpl.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
40214	523	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
40214	523	8	RealMatrixImpl.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
40215	525	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
40215	525	12	RealMatrixImpl.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
40216	539	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
40216	539	8	RealMatrixImpl.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
40217	540	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
40217	540	12	RealMatrixImpl.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
40218	555	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
40218	555	8	RealMatrixImpl.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
40219	556	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
40219	556	12	RealMatrixImpl.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
40220	572	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
40220	572	8	RealMatrixImpl.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
40221	573	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
40221	573	12	RealMatrixImpl.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
40222	590	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
40222	590	8	RealMatrixImpl.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
40223	591	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
40223	591	12	RealMatrixImpl.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
40224	607	8	RealMatrixImpl.java	copyOut	i	int	0	NIL-FOR	$ < nRows
40224	607	8	RealMatrixImpl.java	copyOut	nRows	int	0	NIL-FOR	i < $
40274	214	8	RealVectorFormat.java	format	i	int	0	NIL-FOR	$ < vector.getDimension()
40274	214	8	RealVectorFormat.java	format	vector	RealVector	0	NIL-FOR	i < $.getDimension()
743	215	12	RealVectorFormat.java	format	i	int	0	DEF	$ > 0
744	244	8	RealVectorFormat.java	format	obj	Object	0	RET	$ instanceof RealVector
745	264	8	RealVectorFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
746	283	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	$.parseFixedstring(source, $.trimmedPrefix, pos)
746	283	8	RealVectorFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedPrefix, pos)
746	283	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedPrefix, $)
40275	289	8	RealVectorFormat.java	parse	loop	boolean	0	NIL-FOR	$
747	291	12	RealVectorFormat.java	parse	components	List<Number>	0	DEF	$.isEmpty()
748	293	16	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	DEF	$.parseFixedstring(source, $.trimmedSeparator, pos)
748	293	16	RealVectorFormat.java	parse	source	String	0	DEF	parseFixedstring($, trimmedSeparator, pos)
748	293	16	RealVectorFormat.java	parse	pos	ParsePosition	0	DEF	parseFixedstring(source, trimmedSeparator, $)
749	298	12	RealVectorFormat.java	parse	loop	boolean	0	RET	$
750	301	16	RealVectorFormat.java	parse	component	Number	1	DEF	$ != null
751	315	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	$.parseFixedstring(source, $.trimmedSuffix, pos)
751	315	8	RealVectorFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSuffix, pos)
751	315	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSuffix, $)
40276	321	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	NIL-FOR	i < data.$.length
40276	321	8	RealVectorFormat.java	parse	i	int	0	NIL-FOR	$ < data.length
40276	321	8	RealVectorFormat.java	parse	data	double[]	0	NIL-FOR	i < $.length
7	268	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + $.numElements) > $.internalArray.$.length
8	272	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
9	296	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	($.startIndex + ($.numElements + 1)) > $.internalArray.$.length
10	306	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
11	322	8	ResizableDoubleArray.java	substituteMostRecentElement	THIS	ResizableDoubleArray	0	DEF	$.numElements < 1
12	349	8	ResizableDoubleArray.java	checkContractExpand	contractionCriteria	float	0	DEF	$ < expansionFactor
12	349	8	ResizableDoubleArray.java	checkContractExpand	expansionFactor	float	0	DEF	contractionCriteria < $
13	357	8	ResizableDoubleArray.java	checkContractExpand	contractionCriteria	float	0	DEF	$ <= 1.0
14	365	8	ResizableDoubleArray.java	checkContractExpand	expansionFactor	float	0	DEF	$ <= 1.0
15	451	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	1	DEF	i > $.numElements
15	451	8	ResizableDoubleArray.java	discardExtremeElements	i	int	1	DEF	$ > numElements
16	455	14	ResizableDoubleArray.java	discardExtremeElements	i	int	1	DEF	$ < 0
17	462	12	ResizableDoubleArray.java	discardExtremeElements	front	boolean	0	DEF	$
18	464	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
19	486	8	ResizableDoubleArray.java	expand	THIS	ResizableDoubleArray	1	DEF	$.expansionMode == MULTIPLICATIVE_MODE
20	535	8	ResizableDoubleArray.java	getElement	THIS	ResizableDoubleArray	1	DEF	index >= $.numElements
20	535	8	ResizableDoubleArray.java	getElement	index	int	1	DEF	$ >= numElements
21	539	15	ResizableDoubleArray.java	getElement	index	int	1	RET	$ >= 0
22	670	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ < 0
23	675	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	index + 1 > $.numElements
23	675	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ + 1 > numElements
24	678	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + index) >= $.internalArray.$.length
24	678	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	(startIndex + $) >= internalArray.length
25	711	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	DEF	$ != ADDITIVE_MODE
25	711	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	DEF	$ != MULTIPLICATIVE_MODE
26	731	8	ResizableDoubleArray.java	setInitialCapacity	initialCapacity	int	1	DEF	$ > 0
27	753	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	$ < 0
28	761	8	ResizableDoubleArray.java	setNumElements	THIS	ResizableDoubleArray	0	DEF	($.startIndex + i) > $.internalArray.$.length
28	761	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	(startIndex + $) > internalArray.length
29	776	8	ResizableDoubleArray.java	shouldContract	THIS	ResizableDoubleArray	1	RET	$.expansionMode == MULTIPLICATIVE_MODE
30	853	8	ResizableDoubleArray.java	equals	THIS	ResizableDoubleArray	0	RET	object == $
30	853	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ == this
31	856	7	ResizableDoubleArray.java	equals	object	Object	0	RET	$ instanceof ResizableDoubleArray == false
32	869	15	ResizableDoubleArray.java	equals	result	boolean	1	RET	$
1667	94	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1667	94	8	RiddersSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1668	95	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1668	95	8	RiddersSolver.java	solve	max	double	0	RET	f.value($) == 0.0
1669	96	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
1669	96	8	RiddersSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
1670	100	8	RiddersSolver.java	solve	THIS	RiddersSolver	1	RET	$.isBracketing(min, initial, f)
1670	100	8	RiddersSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
1670	100	8	RiddersSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
1670	100	8	RiddersSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
1671	134	8	RiddersSolver.java	solve	y1	double	0	RET	$ == 0.0
1672	135	8	RiddersSolver.java	solve	y2	double	0	RET	$ == 0.0
41096	140	8	RiddersSolver.java	solve	THIS	RiddersSolver	0	NIL-WHILE	i <= $.maximalIterationCount
41096	140	8	RiddersSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1673	144	12	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	Math.abs(y3) <= $.functionValueAccuracy
1673	144	12	RiddersSolver.java	solve	y3	double	0	RET	Math.abs($) <= functionValueAccuracy
1674	156	12	RiddersSolver.java	solve	x	double	0	RET	Math.abs($ - oldx) <= tolerance
1674	156	12	RiddersSolver.java	solve	oldx	double	0	RET	Math.abs(x - $) <= tolerance
1674	156	12	RiddersSolver.java	solve	tolerance	double	0	RET	Math.abs(x - oldx) <= $
1675	160	12	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
1675	160	12	RiddersSolver.java	solve	y	double	0	RET	Math.abs($) <= functionValueAccuracy
1676	167	12	RiddersSolver.java	solve	correction	double	1	DEF	$ > 0.0
1677	168	16	RiddersSolver.java	solve	y1	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
1677	168	16	RiddersSolver.java	solve	y	double	1	DEF	MathUtils.sign(y1) + MathUtils.sign($) == 0.0
1678	175	16	RiddersSolver.java	solve	y2	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
1678	175	16	RiddersSolver.java	solve	y	double	1	DEF	MathUtils.sign(y2) + MathUtils.sign($) == 0.0
41147	82	8	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	NIL-WHILE	i <= $.maximalIterationCount
41147	82	8	RombergIntegrator.java	integrate	i	int	0	NIL-WHILE	$ <= maximalIterationCount
41148	84	12	RombergIntegrator.java	integrate	i	int	0	NIL-FOR	j <= $
41148	84	12	RombergIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= i
1795	90	12	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	RET	i >= $.minimalIterationCount
1795	90	12	RombergIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
1796	94	16	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	RET	delta <= $.absoluteAccuracy
1796	94	16	RombergIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
1796	94	16	RombergIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
1796	94	16	RombergIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
1797	110	8	RombergIntegrator.java	verifyIterationCount	THIS	RombergIntegrator	0	DEF	$.maximalIterationCount > 32
186	128	4	Rotation.java	Rotation	needsNormalization	boolean	0	DEF	$
187	158	4	Rotation.java	Rotation	norm	double	0	DEF	$ == 0
188	206	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[2].length != 3
188	206	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[1].length != 3
188	206	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m.$.length != 3
188	206	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[0].length != 3
188	206	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[2].length != 3
188	206	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[1].length != 3
188	206	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$.length != 3
188	206	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[0].length != 3
189	220	4	Rotation.java	Rotation	det	double	0	NotARotationMatrixException	$ < 0.0
190	238	4	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
191	247	6	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
192	256	8	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
193	302	2	Rotation.java	Rotation	u1u1	double	0	DEF	$ == 0
193	302	2	Rotation.java	Rotation	u2u2	double	0	DEF	$ == 0
193	302	2	Rotation.java	Rotation	v1v1	double	0	DEF	$ == 0
193	302	2	Rotation.java	Rotation	v2v2	double	0	DEF	$ == 0
194	351	2	Rotation.java	Rotation	c	double	0	RET	$ == 0
195	373	4	Rotation.java	Rotation	c	double	0	RET	$ == 0
196	383	6	Rotation.java	Rotation	c	double	0	RET	$ == 0
197	433	4	Rotation.java	Rotation	normProduct	double	0	DEF	$ == 0
198	439	4	Rotation.java	Rotation	normProduct	double	1	DEF	dot < ((2.0e-15 - 1.0) * $)
198	439	4	Rotation.java	Rotation	dot	double	1	DEF	$ < ((2.0e-15 - 1.0) * normProduct)
199	534	4	Rotation.java	getAxis	squaredSine	double	1	RET	$ == 0
200	536	11	Rotation.java	getAxis	THIS	Rotation	0	RET	$.q0 < 0
201	548	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 > 0.1
201	548	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 < -0.1
202	550	11	Rotation.java	getAngle	THIS	Rotation	0	RET	$.q0 < 0
203	594	4	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
204	603	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
204	603	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
205	612	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
206	621	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
206	621	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
207	630	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
208	639	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
208	639	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
209	648	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
210	657	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
210	657	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
211	666	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
212	675	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
212	675	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
213	684	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
214	693	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
214	693	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
215	702	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
216	711	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
216	711	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
217	720	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
218	729	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
218	729	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
219	738	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
220	747	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
220	747	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
221	756	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
222	765	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
222	765	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
223	774	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
224	783	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
224	783	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
225	801	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
225	801	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
39695	960	4	Rotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
226	1001	6	Rotation.java	orthogonalizeMatrix	fn	double	0	RET	Math.abs(fn1 - $) <= threshold
226	1001	6	Rotation.java	orthogonalizeMatrix	fn1	double	0	RET	Math.abs($ - fn) <= threshold
226	1001	6	Rotation.java	orthogonalizeMatrix	threshold	double	0	RET	Math.abs(fn1 - fn) <= $
1591	92	4	RungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1591	92	4	RungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
41058	96	4	RungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
41058	96	4	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
1592	103	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
1592	103	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.requiresDenseOutput()
41059	122	4	RungeKuttaIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
41060	126	6	RungeKuttaIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
41061	132	8	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
41061	132	8	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
41062	134	10	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
41062	134	10	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
41062	134	10	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
41063	136	12	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
41063	136	12	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
41064	147	8	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
41064	147	8	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
41064	147	8	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
41065	149	10	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
41065	149	10	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
1593	157	8	RungeKuttaIntegrator.java	integrate	interpolator	AbstractStepInterpolator	1	DEF	manager.evaluateStep($)
1593	157	8	RungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolator)
1594	159	12	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	Math.abs(dt) <= Math.ulp($.stepStart)
1594	159	12	RungeKuttaIntegrator.java	integrate	dt	double	1	DEF	Math.abs($) <= Math.ulp(stepStart)
1595	185	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	DEF	manager.reset($.stepStart, y)
1595	185	6	RungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1595	185	6	RungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1595	185	6	RungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1475	77	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	1	DEF	interpolator.$.currentState != null
1475	77	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
40967	81	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < interpolator.$.yDotK.$.length
40967	81	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.yDotK.length
40967	81	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.length
40968	137	4	RungeKuttaStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < kMax
40968	137	4	RungeKuttaStepInterpolator.java	writeExternal	kMax	int	0	NIL-FOR	k < $
40969	138	6	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
40969	138	6	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
40970	159	4	RungeKuttaStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
40970	159	4	RungeKuttaStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
40971	161	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
40971	161	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
1476	168	4	RungeKuttaStepInterpolator.java	readExternal	THIS	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
1695	128	8	SecantSolver.java	solve	y0	double	0	DEF	$ * y1 >= 0
1695	128	8	SecantSolver.java	solve	y1	double	0	DEF	y0 * $ >= 0
41100	139	8	SecantSolver.java	solve	THIS	SecantSolver	0	NIL-WHILE	i < $.maximalIterationCount
41100	139	8	SecantSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1696	140	12	SecantSolver.java	solve	y1	double	0	DEF	Math.abs(y2) < Math.abs($)
1696	140	12	SecantSolver.java	solve	y2	double	0	DEF	Math.abs($) < Math.abs(y1)
1697	148	12	SecantSolver.java	solve	THIS	SecantSolver	0	RET	Math.abs(y1) <= $.functionValueAccuracy
1697	148	12	SecantSolver.java	solve	y1	double	0	RET	Math.abs($) <= functionValueAccuracy
1698	152	12	SecantSolver.java	solve	THIS	SecantSolver	0	RET	Math.abs(oldDelta) < Math.max($.relativeAccuracy * Math.abs(x1), $.absoluteAccuracy)
1698	152	12	SecantSolver.java	solve	x1	double	0	RET	Math.abs(oldDelta) < Math.max(relativeAccuracy * Math.abs($), absoluteAccuracy)
1698	152	12	SecantSolver.java	solve	oldDelta	double	0	RET	Math.abs($) < Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy)
1699	158	12	SecantSolver.java	solve	y0	double	1	DEF	Math.abs(y1) > Math.abs($)
1699	158	12	SecantSolver.java	solve	y1	double	1	DEF	Math.abs($) > Math.abs(y0)
1700	163	16	SecantSolver.java	solve	delta	double	0	DEF	$ / oldDelta > 1
1700	163	16	SecantSolver.java	solve	oldDelta	double	0	DEF	delta / $ > 1
1701	173	12	SecantSolver.java	solve	y1	double	0	DEF	($ > 0) == (y2 > 0)
1701	173	12	SecantSolver.java	solve	y2	double	0	DEF	(y1 > 0) == ($ > 0)
1138	77	8	SecondMoment.java	increment	THIS	SecondMoment	0	DEF	$.n < 1
1390	72	12	SimpleEstimationProblem.java	getUnboundParameters	THIS	SimpleEstimationProblem	0	DEF	$.p.isBound()
40729	83	8	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	NIL-FOR	i < p.$.length
40729	83	8	SimpleRealPointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
40729	83	8	SimpleRealPointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1085	86	12	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	RET	difference > $.absoluteThreshold
1085	86	12	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	RET	difference > (size * $.relativeThreshold)
1085	86	12	SimpleRealPointChecker.java	converged	difference	double	0	RET	$ > absoluteThreshold
1085	86	12	SimpleRealPointChecker.java	converged	difference	double	0	RET	$ > (size * relativeThreshold)
1085	86	12	SimpleRealPointChecker.java	converged	size	double	0	RET	difference > ($ * relativeThreshold)
1287	122	8	SimpleRegression.java	addData	THIS	SimpleRegression	1	DEF	$.n == 0
1288	138	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.n > 2
1289	158	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 0
1290	170	12	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 2
40815	193	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
40815	193	8	SimpleRegression.java	addData	i	int	0	NIL-FOR	$ < data.length
40815	193	8	SimpleRegression.java	addData	data	double[][]	0	NIL-FOR	i < $.length
40816	213	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
40816	213	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	$.n > 0
40816	213	8	SimpleRegression.java	removeData	i	int	0	NIL-FOR	$ < data.length
40816	213	8	SimpleRegression.java	removeData	data	double[][]	0	NIL-FOR	i < $.length
1291	298	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	$.n < 2
1292	301	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	Math.abs($.sumXX) < 10 * Double.MIN_VALUE
1293	351	8	SimpleRegression.java	getTotalSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
1294	365	8	SimpleRegression.java	getXSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
1295	411	8	SimpleRegression.java	getMeanSquareError	THIS	SimpleRegression	0	RET	$.n < 3
1296	434	8	SimpleRegression.java	getR	b1	double	0	DEF	$ < 0
1297	549	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	DEF	$ >= 1
1297	549	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	DEF	$ <= 0
1298	617	8	SimpleRegression.java	setDistribution	THIS	SimpleRegression	0	DEF	$.n > 2
40607	83	8	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	NIL-FOR	i < p.$.length
40607	83	8	SimpleVectorialPointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
40607	83	8	SimpleVectorialPointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
951	88	12	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	RET	difference > (size * $.relativeThreshold)
951	88	12	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	RET	difference > $.absoluteThreshold
951	88	12	SimpleVectorialPointChecker.java	converged	difference	double	0	RET	$ > (size * relativeThreshold)
951	88	12	SimpleVectorialPointChecker.java	converged	difference	double	0	RET	$ > absoluteThreshold
951	88	12	SimpleVectorialPointChecker.java	converged	size	double	0	RET	difference > ($ * relativeThreshold)
40632	83	8	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	NIL-FOR	i < p.$.length
40632	83	8	SimpleVectorialValueChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
40632	83	8	SimpleVectorialValueChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1008	88	12	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	RET	difference > $.absoluteThreshold
1008	88	12	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	RET	difference > (size * $.relativeThreshold)
1008	88	12	SimpleVectorialValueChecker.java	converged	difference	double	0	RET	$ > absoluteThreshold
1008	88	12	SimpleVectorialValueChecker.java	converged	difference	double	0	RET	$ > (size * relativeThreshold)
1008	88	12	SimpleVectorialValueChecker.java	converged	size	double	0	RET	difference > ($ * relativeThreshold)
40615	61	8	SimplexSolver.java	getPivotColumn	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
40615	61	8	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
975	62	12	SimplexSolver.java	getPivotColumn	THIS	SimplexSolver	0	DEF	MathUtils.compareTo(tableau.getEntry(0, i), minValue, $.epsilon) < 0
975	62	12	SimplexSolver.java	getPivotColumn	i	int	0	DEF	MathUtils.compareTo(tableau.getEntry(0, $), minValue, epsilon) < 0
975	62	12	SimplexSolver.java	getPivotColumn	minValue	double	0	DEF	MathUtils.compareTo(tableau.getEntry(0, i), $, epsilon) < 0
975	62	12	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	DEF	MathUtils.compareTo($.getEntry(0, i), minValue, epsilon) < 0
40616	79	8	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getHeight()
40616	79	8	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
976	81	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	MathUtils.compareTo(tableau.getEntry(i, col), 0, $.epsilon) >= 0
976	81	12	SimplexSolver.java	getPivotRow	i	int	0	DEF	MathUtils.compareTo(tableau.getEntry($, col), 0, epsilon) >= 0
976	81	12	SimplexSolver.java	getPivotRow	col	int	0	DEF	MathUtils.compareTo(tableau.getEntry(i, $), 0, epsilon) >= 0
976	81	12	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	DEF	MathUtils.compareTo($.getEntry(i, col), 0, epsilon) >= 0
977	83	16	SimplexSolver.java	getPivotRow	ratio	double	0	DEF	$ < minRatio
977	83	16	SimplexSolver.java	getPivotRow	minRatio	double	0	DEF	ratio < $
978	106	8	SimplexSolver.java	doIteration	pivotRow	Integer	0	UnboundedSolutionException	$ == null
40617	115	8	SimplexSolver.java	doIteration	i	int	0	NIL-FOR	$ < tableau.getHeight()
40617	115	8	SimplexSolver.java	doIteration	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
979	116	12	SimplexSolver.java	doIteration	i	int	0	DEF	$ != pivotRow
979	116	12	SimplexSolver.java	doIteration	pivotRow	Integer	0	DEF	i != $
980	129	8	SimplexSolver.java	isPhase1Solved	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
40618	132	8	SimplexSolver.java	isPhase1Solved	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
40618	132	8	SimplexSolver.java	isPhase1Solved	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
981	133	12	SimplexSolver.java	isPhase1Solved	THIS	SimplexSolver	0	RET	MathUtils.compareTo(tableau.getEntry(0, i), 0, $.epsilon) < 0
981	133	12	SimplexSolver.java	isPhase1Solved	i	int	0	RET	MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) < 0
981	133	12	SimplexSolver.java	isPhase1Solved	tableau	SimplexTableau	0	RET	MathUtils.compareTo($.getEntry(0, i), 0, epsilon) < 0
982	146	8	SimplexSolver.java	isOptimal	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() > 0
40619	149	8	SimplexSolver.java	isOptimal	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
40619	149	8	SimplexSolver.java	isOptimal	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
983	150	12	SimplexSolver.java	isOptimal	THIS	SimplexSolver	0	RET	MathUtils.compareTo(tableau.getEntry(0, i), 0, $.epsilon) < 0
983	150	12	SimplexSolver.java	isOptimal	i	int	0	RET	MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) < 0
983	150	12	SimplexSolver.java	isOptimal	tableau	SimplexTableau	0	RET	MathUtils.compareTo($.getEntry(0, i), 0, epsilon) < 0
984	167	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
40620	171	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NIL-WHILE	$.isPhase1Solved(tableau)
40620	171	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NIL-WHILE	isPhase1Solved($)
985	176	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NoFeasibleSolutionException	MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, $.epsilon)
985	176	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NoFeasibleSolutionException	MathUtils.equals($.getEntry(0, $.getRhsOffset()), 0, epsilon)
40621	189	8	SimplexSolver.java	doOptimize	THIS	SimplexSolver	0	NIL-WHILE	$.isOptimal(tableau)
40621	189	8	SimplexSolver.java	doOptimize	tableau	SimplexTableau	0	NIL-WHILE	isOptimal($)
989	133	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
990	144	16	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
40622	152	16	SimplexTableau.java	createTableau	i	int	0	NIL-FOR	$ < constraints.size()
40622	152	16	SimplexTableau.java	createTableau	constraints	List<LinearConstraint>	0	NIL-FOR	i < $.size()
991	160	20	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
992	169	20	SimplexTableau.java	createTableau	THIS	SimplexTableau	1	DEF	constraint.getRelationship() == $.Relationship.LEQ
992	169	20	SimplexTableau.java	createTableau	constraint	LinearConstraint	1	DEF	$.getRelationship() == Relationship.LEQ
993	171	27	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
993	171	27	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
994	176	20	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.EQ
994	176	20	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
994	176	20	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.EQ
994	176	20	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
995	211	8	SimplexTableau.java	normalize	constraint	LinearConstraint	0	RET	$.getValue() < 0
996	236	12	SimplexTableau.java	getConstraintTypeCounts	THIS	SimplexTableau	0	DEF	$.constraint.getRelationship() == relationship
996	236	12	SimplexTableau.java	getConstraintTypeCounts	relationship	Relationship	0	DEF	constraint.getRelationship() == $
40623	248	8	SimplexTableau.java	initialize	THIS	SimplexTableau	0	NIL-FOR	artificialVar < $.numArtificialVariables
40623	248	8	SimplexTableau.java	initialize	artificialVar	int	0	NIL-FOR	$ < numArtificialVariables
40624	274	8	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
40624	274	8	SimplexTableau.java	getBasicRow	i	int	0	NIL-FOR	$ < getHeight()
997	275	12	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	1	DEF	MathUtils.equals($.getEntry(i, col), 1.0, $.epsilon)
997	275	12	SimplexTableau.java	getBasicRow	i	int	1	DEF	MathUtils.equals(getEntry($, col), 1.0, epsilon)
997	275	12	SimplexTableau.java	getBasicRow	row	Integer	1	DEF	$ == null
997	275	12	SimplexTableau.java	getBasicRow	col	int	1	DEF	MathUtils.equals(getEntry(i, $), 1.0, epsilon)
998	277	19	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	RET	MathUtils.equals($.getEntry(i, col), 0.0, $.epsilon)
998	277	19	SimplexTableau.java	getBasicRow	i	int	0	RET	MathUtils.equals(getEntry($, col), 0.0, epsilon)
998	277	19	SimplexTableau.java	getBasicRow	col	int	0	RET	MathUtils.equals(getEntry(i, $), 0.0, epsilon)
999	288	8	SimplexTableau.java	discardArtificialVariables	THIS	SimplexTableau	0	RET	$.numArtificialVariables == 0
40625	294	8	SimplexTableau.java	discardArtificialVariables	i	int	0	NIL-FOR	$ < height
40625	294	8	SimplexTableau.java	discardArtificialVariables	height	int	0	NIL-FOR	i < $
40626	295	12	SimplexTableau.java	discardArtificialVariables	j	int	0	NIL-FOR	$ < width - 1
40626	295	12	SimplexTableau.java	discardArtificialVariables	width	int	0	NIL-FOR	j < $ - 1
40627	328	8	SimplexTableau.java	getSolution	THIS	SimplexTableau	0	NIL-FOR	i < coefficients.$.length
40627	328	8	SimplexTableau.java	getSolution	i	int	0	NIL-FOR	$ < coefficients.length
40627	328	8	SimplexTableau.java	getSolution	coefficients	double[]	0	NIL-FOR	i < $.length
1000	330	12	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	basicRows.contains($)
1000	330	12	SimplexTableau.java	getSolution	basicRows	Set<Integer>	1	DEF	$.contains(basicRow)
40628	354	8	SimplexTableau.java	divideRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
40628	354	8	SimplexTableau.java	divideRow	j	int	0	NIL-FOR	$ < getWidth()
40629	371	8	SimplexTableau.java	subtractRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
40629	371	8	SimplexTableau.java	subtractRow	j	int	0	NIL-FOR	$ < getWidth()
1001	487	6	SimplexTableau.java	equals	THIS	SimplexTableau	0	RET	$ == other
1001	487	6	SimplexTableau.java	equals	other	Object	0	RET	this == $
1002	491	6	SimplexTableau.java	equals	other	Object	0	RET	$ == null
1782	77	8	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	$.minimalIterationCount == 1
41141	85	8	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	NIL-WHILE	i <= $.maximalIterationCount
41141	85	8	SimpsonIntegrator.java	integrate	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1783	88	12	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	i >= $.minimalIterationCount
1783	88	12	SimpsonIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
1784	92	16	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	delta <= $.absoluteAccuracy
1784	92	16	SimpsonIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
1784	92	16	SimpsonIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
1784	92	16	SimpsonIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
1785	109	8	SimpsonIntegrator.java	verifyIterationCount	THIS	SimpsonIntegrator	0	DEF	$.maximalIterationCount > 64
39998	106	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.mainBidiagonal.$.length
39998	106	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < mainBidiagonal.length
39999	118	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.singularValues.$.length
39999	118	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < singularValues.length
591	128	8	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedU == null
592	130	12	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	1	DEF	$.m >= $.n
40000	136	16	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n - 1
40000	136	16	SingularValueDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < n - 1
40001	142	20	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.n
40001	142	20	SingularValueDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < n
40002	149	16	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.n
40002	149	16	SingularValueDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < n
40003	152	16	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
40003	152	16	SingularValueDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < m
593	173	8	SingularValueDecompositionImpl.java	getUT	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedUt == null
594	186	8	SingularValueDecompositionImpl.java	getS	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedS == null
595	205	8	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedV == null
596	207	12	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	1	DEF	$.m >= $.n
40004	216	16	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m - 1
40004	216	16	SingularValueDecompositionImpl.java	getV	i	int	0	NIL-FOR	$ < m - 1
40005	222	20	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.m
40005	222	20	SingularValueDecompositionImpl.java	getV	j	int	0	NIL-FOR	$ < m
40006	229	16	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.m
40006	229	16	SingularValueDecompositionImpl.java	getV	j	int	0	NIL-FOR	$ < m
40007	232	16	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n
40007	232	16	SingularValueDecompositionImpl.java	getV	i	int	0	NIL-FOR	$ < n
597	250	8	SingularValueDecompositionImpl.java	getVT	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedVt == null
40008	264	8	SingularValueDecompositionImpl.java	getCovariance	THIS	SingularValueDecompositionImpl	0	NIL-WHILE	dimension < $.n
40008	264	8	SingularValueDecompositionImpl.java	getCovariance	THIS	SingularValueDecompositionImpl	0	NIL-WHILE	$.singularValues[dimension] >= minSingularValue
40008	264	8	SingularValueDecompositionImpl.java	getCovariance	dimension	int	0	NIL-WHILE	$ < n
40008	264	8	SingularValueDecompositionImpl.java	getCovariance	dimension	int	0	NIL-WHILE	singularValues[$] >= minSingularValue
40008	264	8	SingularValueDecompositionImpl.java	getCovariance	minSingularValue	double	0	NIL-WHILE	singularValues[dimension] >= $
598	268	8	SingularValueDecompositionImpl.java	getCovariance	dimension	int	0	DEF	$ == 0
40009	306	8	SingularValueDecompositionImpl.java	getRank	i	int	0	NIL-FOR	$ >= 0
599	307	11	SingularValueDecompositionImpl.java	getRank	THIS	SingularValueDecompositionImpl	0	RET	$.singularValues[i] > threshold
599	307	11	SingularValueDecompositionImpl.java	getRank	i	int	0	RET	singularValues[$] > threshold
599	307	11	SingularValueDecompositionImpl.java	getRank	threshold	double	0	RET	singularValues[i] > $
1124	88	8	Skewness.java	increment	THIS	Skewness	0	DEF	$.incMoment
1125	103	8	Skewness.java	getResult	THIS	Skewness	0	RET	$.moment.$.n < 3
1126	107	8	Skewness.java	getResult	variance	double	1	RET	$ < 10E-20
1127	128	8	Skewness.java	clear	THIS	Skewness	0	DEF	$.incMoment
1128	156	8	Skewness.java	evaluate	THIS	Skewness	0	DEF	$.test(values, begin, length)
1128	156	8	Skewness.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1128	156	8	Skewness.java	evaluate	begin	int	0	DEF	test(values, $, length)
1128	156	8	Skewness.java	evaluate	length	int	0	DEF	$ > 2
1128	156	8	Skewness.java	evaluate	length	int	0	DEF	test(values, begin, $)
40743	166	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
40743	166	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
40743	166	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
40744	174	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
40744	174	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
40744	174	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
40010	95	8	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	i < $.rowDimension
40010	95	8	SparseFieldMatrix.java	SparseFieldMatrix	i	int	0	NIL-FOR	$ < rowDimension
40011	96	12	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	j < $.columnDimension
40011	96	12	SparseFieldMatrix.java	SparseFieldMatrix	j	int	0	NIL-FOR	$ < columnDimension
600	110	8	SparseFieldMatrix.java	addToEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
600	110	8	SparseFieldMatrix.java	addToEntry	value	T	1	DEF	getField().getZero().equals($)
601	159	8	SparseFieldMatrix.java	multiplyEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
601	159	8	SparseFieldMatrix.java	multiplyEntry	value	T	1	DEF	getField().getZero().equals($)
602	173	8	SparseFieldMatrix.java	setEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
602	173	8	SparseFieldMatrix.java	setEntry	value	T	1	DEF	getField().getZero().equals($)
40073	106	8	SparseFieldVector.java	SparseFieldVector	THIS	SparseFieldVector	0	NIL-FOR	key < values.$.length
40073	106	8	SparseFieldVector.java	SparseFieldVector	key	int	0	NIL-FOR	$ < values.length
40073	106	8	SparseFieldVector.java	SparseFieldVector	values	T[]	0	NIL-FOR	key < $.length
40074	142	8	SparseFieldVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
632	146	12	SparseFieldVector.java	add	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
632	146	12	SparseFieldVector.java	add	key	int	1	DEF	entries.containsKey($)
40075	161	8	SparseFieldVector.java	add	THIS	SparseFieldVector	0	NIL-FOR	i < v.$.length
40075	161	8	SparseFieldVector.java	add	i	int	0	NIL-FOR	$ < v.length
40075	161	8	SparseFieldVector.java	add	v	T[]	0	NIL-FOR	i < $.length
40076	175	8	SparseFieldVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
633	184	8	SparseFieldVector.java	append	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
40077	201	8	SparseFieldVector.java	append	THIS	SparseFieldVector	0	NIL-FOR	i < a.$.length
40077	201	8	SparseFieldVector.java	append	i	int	0	NIL-FOR	$ < a.length
40077	201	8	SparseFieldVector.java	append	a	T[]	0	NIL-FOR	i < $.length
40078	217	8	SparseFieldVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
40079	229	8	SparseFieldVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
634	232	12	SparseFieldVector.java	dotProduct	THIS	SparseFieldVector	0	DEF	idx < v.$.length
634	232	12	SparseFieldVector.java	dotProduct	idx	int	0	DEF	$ < v.length
634	232	12	SparseFieldVector.java	dotProduct	v	T[]	0	DEF	idx < $.length
40080	246	8	SparseFieldVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
40081	258	8	SparseFieldVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
40082	270	8	SparseFieldVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
40083	282	8	SparseFieldVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
40084	293	8	SparseFieldVector.java	getData	iter	Iterator	0	NIL-WHILE	$.hasNext()
40085	324	8	SparseFieldVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
635	327	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ < end
635	327	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ >= index
635	327	12	SparseFieldVector.java	getSubVector	end	int	0	DEF	key < $
635	327	12	SparseFieldVector.java	getSubVector	index	int	0	DEF	key >= $
40086	341	8	SparseFieldVector.java	mapAddToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
40086	341	8	SparseFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
40087	355	8	SparseFieldVector.java	mapDivideToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
40088	369	8	SparseFieldVector.java	mapInvToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
40088	369	8	SparseFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < virtualSize
40089	383	8	SparseFieldVector.java	mapMultiplyToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
40090	411	8	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
40091	414	12	SparseFieldVector.java	outerProduct	iter2	Iterator	0	NIL-WHILE	$.hasNext()
40092	427	8	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
40093	431	12	SparseFieldVector.java	outerProduct	THIS	SparseFieldVector	0	NIL-FOR	col < $.virtualSize
40093	431	12	SparseFieldVector.java	outerProduct	col	int	0	NIL-FOR	$ < virtualSize
636	441	8	SparseFieldVector.java	outerProduct	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
40094	462	8	SparseFieldVector.java	set	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
40094	462	8	SparseFieldVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
40095	485	8	SparseFieldVector.java	setSubVector	THIS	SparseFieldVector	0	NIL-FOR	i < v.$.length
40095	485	8	SparseFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.length
40095	485	8	SparseFieldVector.java	setSubVector	v	T[]	0	NIL-FOR	i < $.length
40096	501	8	SparseFieldVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
637	504	12	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
637	504	12	SparseFieldVector.java	subtract	key	int	1	DEF	entries.containsKey($)
638	516	8	SparseFieldVector.java	subtract	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
40097	526	8	SparseFieldVector.java	subtract	THIS	SparseFieldVector	0	NIL-FOR	i < v.$.length
40097	526	8	SparseFieldVector.java	subtract	i	int	0	NIL-FOR	$ < v.length
40097	526	8	SparseFieldVector.java	subtract	v	T[]	0	NIL-FOR	i < $.length
639	527	12	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(i)
639	527	12	SparseFieldVector.java	subtract	i	int	1	DEF	entries.containsKey($)
640	550	8	SparseFieldVector.java	checkIndex	THIS	SparseFieldVector	0	MatrixIndexException	index >= $.getDimension()
640	550	8	SparseFieldVector.java	checkIndex	index	int	0	MatrixIndexException	$ < 0
640	550	8	SparseFieldVector.java	checkIndex	index	int	0	MatrixIndexException	$ >= getDimension()
641	566	8	SparseFieldVector.java	checkVectorDimensions	THIS	SparseFieldVector	0	DEF	$.getDimension() != n
641	566	8	SparseFieldVector.java	checkVectorDimensions	n	int	0	DEF	getDimension() != $
642	576	8	SparseFieldVector.java	add	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
40098	601	8	SparseFieldVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
643	615	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$ == obj
643	615	8	SparseFieldVector.java	equals	obj	Object	0	RET	this == $
644	619	8	SparseFieldVector.java	equals	obj	Object	0	RET	$ == null
645	623	8	SparseFieldVector.java	equals	obj	Object	0	RET	$ instanceof SparseFieldVector
646	628	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	1	RET	$.field == null
647	629	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	other.$.field != null
647	629	12	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	$.field != null
648	632	15	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.field.equals(other.$.field)
648	632	15	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	field.equals($.field)
649	635	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.virtualSize != other.$.virtualSize
649	635	8	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	virtualSize != $.virtualSize
40099	640	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
650	643	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(iter.value())
650	643	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals($.value())
40100	648	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
651	651	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	test.equals($.getEntry(iter.key()))
651	651	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(getEntry(iter.key()))
651	651	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals(getEntry($.key()))
1247	148	8	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	RET	xArray.$.length == yArray.$.length
1247	148	8	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	RET	xArray.$.length > 1
1247	148	8	SpearmansCorrelation.java	correlation	xArray	double[]	1	RET	$.length == yArray.length
1247	148	8	SpearmansCorrelation.java	correlation	xArray	double[]	1	RET	$.length > 1
1247	148	8	SpearmansCorrelation.java	correlation	yArray	double[]	1	RET	xArray.length == $.length
40789	166	8	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < matrix.getColumnDimension()
40789	166	8	SpearmansCorrelation.java	rankTransform	matrix	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
1641	60	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	DEF	x.$.length != y.$.length
1641	60	8	SplineInterpolator.java	interpolate	x	double	0	DEF	$.length != y.length
1641	60	8	SplineInterpolator.java	interpolate	y	double	0	DEF	x.length != $.length
1642	65	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	DEF	x.$.length < 3
1642	65	8	SplineInterpolator.java	interpolate	x	double	0	DEF	$.length < 3
41080	73	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
41080	73	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
1643	74	12	SplineInterpolator.java	interpolate	i	int	0	DEF	x[$] >= x[$ + 1]
1643	74	12	SplineInterpolator.java	interpolate	x	double	0	DEF	$[i] >= $[i + 1]
41081	83	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
41081	83	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
41082	92	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
41082	92	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
41083	107	8	SplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ >=0
41084	115	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
41084	115	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
1278	567	8	StatUtils.java	sumDifference	THIS	StatUtils	0	DEF	n != sample2.$.length
1278	567	8	StatUtils.java	sumDifference	n	int	0	DEF	$ != sample2.length
1278	567	8	StatUtils.java	sumDifference	n	int	0	DEF	$ < 1
1278	567	8	StatUtils.java	sumDifference	sample2	double[]	0	DEF	n != $.length
40804	573	8	StatUtils.java	sumDifference	i	int	0	NIL-FOR	$ < n
40804	573	8	StatUtils.java	sumDifference	n	int	0	NIL-FOR	i < $
1279	612	8	StatUtils.java	varianceDifference	THIS	StatUtils	0	DEF	n != sample2.$.length
1279	612	8	StatUtils.java	varianceDifference	n	int	0	DEF	$ < 2
1279	612	8	StatUtils.java	varianceDifference	n	int	0	DEF	$ != sample2.length
1279	612	8	StatUtils.java	varianceDifference	sample2	double[]	0	DEF	n != $.length
40805	617	8	StatUtils.java	varianceDifference	i	int	0	NIL-FOR	$ < n
40805	617	8	StatUtils.java	varianceDifference	n	int	0	NIL-FOR	i < $
1200	131	8	StatisticalSummaryValues.java	equals	THIS	StatisticalSummaryValues	0	RET	object == $
1200	131	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ == this
1201	134	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ instanceof StatisticalSummaryValues == false
1464	117	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.lastState == null
1465	126	12	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.forward
40958	134	8	StepNormalizer.java	handleStep	nextInStep	boolean	0	NIL-WHILE	$
1466	152	8	StepNormalizer.java	handleStep	isLast	boolean	0	DEF	$
1101	72	8	Sum.java	increment	THIS	Sum	1	DEF	$.n == 0
1102	121	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, begin, length)
1102	121	8	Sum.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1102	121	8	Sum.java	evaluate	begin	int	0	DEF	test(values, $, length)
1102	121	8	Sum.java	evaluate	length	int	0	DEF	test(values, begin, $)
40738	123	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
40738	123	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
40738	123	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1103	89	8	SumOfLogs.java	getResult	THIS	SumOfLogs	1	RET	$.n > 0
1104	132	8	SumOfLogs.java	evaluate	THIS	SumOfLogs	0	DEF	$.test(values, begin, length)
1104	132	8	SumOfLogs.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1104	132	8	SumOfLogs.java	evaluate	begin	int	0	DEF	test(values, $, length)
1104	132	8	SumOfLogs.java	evaluate	length	int	0	DEF	test(values, begin, $)
40739	134	12	SumOfLogs.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
40739	134	12	SumOfLogs.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
40739	134	12	SumOfLogs.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1099	72	8	SumOfSquares.java	increment	THIS	SumOfSquares	1	DEF	$.n == 0
1100	121	8	SumOfSquares.java	evaluate	THIS	SumOfSquares	0	DEF	$.test(values, begin, length)
1100	121	8	SumOfSquares.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1100	121	8	SumOfSquares.java	evaluate	begin	int	0	DEF	test(values, $, length)
1100	121	8	SumOfSquares.java	evaluate	length	int	0	DEF	test(values, begin, $)
40737	123	12	SumOfSquares.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
40737	123	12	SumOfSquares.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
40737	123	12	SumOfSquares.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1162	154	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.meanImpl instanceof Mean
1163	157	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.varianceImpl instanceof Variance
1164	160	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.geoMeanImpl instanceof GeometricMean
1165	201	8	SummaryStatistics.java	getMean	THIS	SummaryStatistics	1	RET	$.mean == $.meanImpl
1166	217	8	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	0	DEF	$.getN() > 0
1167	218	12	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	1	DEF	$.getN() > 1
1168	235	8	SummaryStatistics.java	getVariance	THIS	SummaryStatistics	1	RET	$.varianceImpl == $.variance
1169	339	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
1170	342	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
1171	356	8	SummaryStatistics.java	equals	THIS	SummaryStatistics	0	RET	object == $
1171	356	8	SummaryStatistics.java	equals	object	Object	0	RET	$ == this
1172	359	8	SummaryStatistics.java	equals	object	Object	0	RET	$ instanceof SummaryStatistics == false
1173	630	8	SummaryStatistics.java	checkEmpty	THIS	SummaryStatistics	0	DEF	$.n > 0
1174	664	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getGeoMeanImpl() instanceof GeometricMean
1175	675	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.geoMean == source.$.geoMeanImpl
1175	675	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.geoMean == $.geoMeanImpl
1176	680	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.max == source.$.maxImpl
1176	680	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.max == $.maxImpl
1177	685	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.mean == source.$.meanImpl
1177	685	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.mean == $.meanImpl
1178	690	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.min == source.$.minImpl
1178	690	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.min == $.minImpl
1179	695	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sum == source.$.sumImpl
1179	695	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sum == $.sumImpl
1180	700	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.variance == source.$.varianceImpl
1180	700	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.variance == $.varianceImpl
1181	705	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumLog == source.$.sumLogImpl
1181	705	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumLog == $.sumLogImpl
1182	710	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumsq == source.$.sumsqImpl
1182	710	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumsq == $.sumsqImpl
395	55	8	TDistributionImpl.java	setDegreesOfFreedom	degreesOfFreedom	double	0	DEF	$ <= 0.0
396	80	8	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ == 0.0
397	88	12	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ < 0.0
398	115	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
399	118	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
1231	1027	8	TTestImpl.java	checkSignificanceLevel	alpha	double	0	DEF	$ <= 0
1231	1027	8	TTestImpl.java	checkSignificanceLevel	alpha	double	0	DEF	$ > 0.5
1232	1040	8	TTestImpl.java	checkSampleData	THIS	TTestImpl	0	DEF	data.$.length < 2
1232	1040	8	TTestImpl.java	checkSampleData	data	double[]	0	DEF	$ == null
1232	1040	8	TTestImpl.java	checkSampleData	data	double[]	0	DEF	$.length < 2
1233	1053	8	TTestImpl.java	checkSampleData	stat	StatisticalSummary	0	DEF	$.getN() < 2
1233	1053	8	TTestImpl.java	checkSampleData	stat	StatisticalSummary	0	DEF	$ == null
1147	86	8	ThirdMoment.java	increment	THIS	ThirdMoment	0	DEF	$.n < 1
41052	98	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
41052	98	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1358	73	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	IllegalArgumentException	population.getPopulationSize() < $.arity
1358	73	8	TournamentSelection.java	tournament	population	ListPopulation	0	IllegalArgumentException	$.getPopulationSize() < this.arity
40851	85	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	NIL-FOR	i<$.arity
40851	85	8	TournamentSelection.java	tournament	i	int	0	NIL-FOR	$<this.arity
5	145	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof String
5	145	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof Number
6	149	12	TransformerMap.java	transform	trans	NumberTransformer	0	DEF	$ != null
1790	83	8	TrapezoidIntegrator.java	stage	n	int	1	RET	$ == 0
41142	90	12	TrapezoidIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
41142	90	12	TrapezoidIntegrator.java	stage	np	long	0	NIL-FOR	i < $
41143	120	8	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	NIL-WHILE	i <= $.maximalIterationCount
41143	120	8	TrapezoidIntegrator.java	integrate	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1791	122	12	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	RET	i >= $.minimalIterationCount
1791	122	12	TrapezoidIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
1792	126	16	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	RET	delta <= $.absoluteAccuracy
1792	126	16	TrapezoidIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
1792	126	16	TrapezoidIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
1792	126	16	TrapezoidIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
1793	142	8	TrapezoidIntegrator.java	verifyIterationCount	THIS	TrapezoidIntegrator	0	DEF	$.maximalIterationCount > 64
513	67	8	TriDiagonalTransformer.java	TriDiagonalTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
514	90	8	TriDiagonalTransformer.java	getQ	THIS	TriDiagonalTransformer	0	DEF	$.cachedQ == null
515	103	8	TriDiagonalTransformer.java	getQT	THIS	TriDiagonalTransformer	0	DEF	$.cachedQt == null
39814	109	12	TriDiagonalTransformer.java	getQT	k	int	0	NIL-FOR	$ >= 1
516	113	16	TriDiagonalTransformer.java	getQT	hK	double[]	0	DEF	$[k] != 0.0
516	113	16	TriDiagonalTransformer.java	getQT	k	int	0	DEF	hK[$] != 0.0
39815	116	20	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
39815	116	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
39816	119	20	TriDiagonalTransformer.java	getQT	j	int	0	NIL-FOR	$ < m
39816	119	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	j < $
39817	121	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
39817	121	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
39818	126	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
39818	126	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
517	147	8	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	$.cachedT == null
39819	151	12	TriDiagonalTransformer.java	getT	i	int	0	NIL-FOR	$ < m
39819	151	12	TriDiagonalTransformer.java	getT	m	int	0	NIL-FOR	i < $
518	153	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ > 0
519	156	16	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	i < $.main.$.length - 1
519	156	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ < main.length - 1
39820	206	8	TriDiagonalTransformer.java	transform	k	int	0	NIL-FOR	$ < m - 1
39820	206	8	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	k < $ - 1
39821	212	12	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
39821	212	12	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
520	218	12	TriDiagonalTransformer.java	transform	a	double	0	DEF	$ != 0.0
39822	229	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
39822	229	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
39823	233	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
39823	233	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
39824	243	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
39824	243	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
39825	249	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
39825	249	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
39826	255	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
39826	255	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
39827	257	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
39827	257	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1350	47	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	THIS	UncorrelatedRandomVectorGenerator	0	DEF	mean.$.length != standardDeviation.$.length
1350	47	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	mean	double[]	0	DEF	$.length != standardDeviation.length
1350	47	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	standardDeviation	double[]	0	DEF	mean.length != $.length
40847	78	4	UncorrelatedRandomVectorGenerator.java	nextVector	THIS	UncorrelatedRandomVectorGenerator	0	NIL-FOR	i < random.$.length
40847	78	4	UncorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < random.length
40847	78	4	UncorrelatedRandomVectorGenerator.java	nextVector	random	double[]	0	NIL-FOR	i < $.length
1786	68	8	UnivariateRealIntegratorImpl.java	UnivariateRealIntegratorImpl	f	UnivariateRealFunction	0	DEF	$ == null
1787	108	8	UnivariateRealIntegratorImpl.java	getResult	THIS	UnivariateRealIntegratorImpl	1	RET	$.resultComputed
1788	159	8	UnivariateRealIntegratorImpl.java	verifyInterval	lower	double	0	DEF	$ >= upper
1788	159	8	UnivariateRealIntegratorImpl.java	verifyInterval	upper	double	0	DEF	lower >= $
1789	172	8	UnivariateRealIntegratorImpl.java	verifyIterationCount	THIS	UnivariateRealIntegratorImpl	0	DEF	$.maximalIterationCount <= $.minimalIterationCount
1789	172	8	UnivariateRealIntegratorImpl.java	verifyIterationCount	THIS	UnivariateRealIntegratorImpl	0	DEF	$.minimalIterationCount <= 0
1661	75	8	UnivariateRealSolverImpl.java	UnivariateRealSolverImpl	f	UnivariateRealFunction	0	DEF	$ == null
1662	102	8	UnivariateRealSolverImpl.java	checkResultComputed	THIS	UnivariateRealSolverImpl	0	DEF	$.resultComputed
1663	208	8	UnivariateRealSolverImpl.java	verifyInterval	lower	double	0	DEF	$ >= upper
1663	208	8	UnivariateRealSolverImpl.java	verifyInterval	upper	double	0	DEF	lower >= $
1664	225	8	UnivariateRealSolverImpl.java	verifySequence	THIS	UnivariateRealSolverImpl	0	DEF	$.isSequence(lower, initial, upper)
1664	225	8	UnivariateRealSolverImpl.java	verifySequence	lower	double	0	DEF	isSequence($, initial, upper)
1664	225	8	UnivariateRealSolverImpl.java	verifySequence	initial	double	0	DEF	isSequence(lower, $, upper)
1664	225	8	UnivariateRealSolverImpl.java	verifySequence	upper	double	0	DEF	isSequence(lower, initial, $)
1665	248	8	UnivariateRealSolverImpl.java	verifyBracketing	THIS	UnivariateRealSolverImpl	0	DEF	$.isBracketing(lower, upper, f)
1665	248	8	UnivariateRealSolverImpl.java	verifyBracketing	lower	double	0	DEF	isBracketing($, upper, f)
1665	248	8	UnivariateRealSolverImpl.java	verifyBracketing	upper	double	0	DEF	isBracketing(lower, $, f)
1665	248	8	UnivariateRealSolverImpl.java	verifyBracketing	f	UnivariateRealFunction	0	DEF	isBracketing(lower, upper, $)
1702	170	8	UnivariateRealSolverUtils.java	bracket	function	UnivariateRealFunction	0	DEF	$ == null
1703	173	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	DEF	$ <= 0
1704	177	8	UnivariateRealSolverUtils.java	bracket	initial	double	0	DEF	$ < lowerBound
1704	177	8	UnivariateRealSolverUtils.java	bracket	initial	double	0	DEF	$ > upperBound
1704	177	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	DEF	initial < $
1704	177	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	DEF	$ >= upperBound
1704	177	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	DEF	lowerBound >= $
1704	177	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	DEF	initial > $
41101	188	8	UnivariateRealSolverUtils.java	bracket	a	double	0	NIL-DOWHILE	$ > lowerBound
41101	188	8	UnivariateRealSolverUtils.java	bracket	b	double	0	NIL-DOWHILE	$ < upperBound
41101	188	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	NIL-DOWHILE	$ * fb > 0.0
41101	188	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	NIL-DOWHILE	fa * $ > 0.0
41101	188	8	UnivariateRealSolverUtils.java	bracket	numIterations	int	0	NIL-DOWHILE	$ < maximumIterations
41101	188	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	NIL-DOWHILE	a > $
41101	188	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	NIL-DOWHILE	b < $
41101	188	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	NIL-DOWHILE	numIterations < $
1705	198	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	ConvergenceException	$ * fb >= 0.0
1705	198	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	ConvergenceException	fa * $ >= 0.0
1706	227	8	UnivariateRealSolverUtils.java	setup	f	UnivariateRealFunction	0	DEF	$ == null
40848	126	8	ValueServer.java	fill	THIS	ValueServer	0	NIL-FOR	i < values.$.length
40848	126	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < values.length
40848	126	8	ValueServer.java	fill	values	double[]	0	NIL-FOR	i < $.length
40849	141	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < length
40849	141	8	ValueServer.java	fill	length	int	0	NIL-FOR	i < $
1351	238	8	ValueServer.java	resetReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
1352	255	8	ValueServer.java	closeReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
1353	302	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	DEF	$.empiricalDistribution == null
1353	302	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	DEF	$.empiricalDistribution.getBinStats().size() == 0
1354	329	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	$.filePointer == null
1355	332	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	(str = $.filePointer.readLine()) == null
1355	332	8	ValueServer.java	getNextReplay	str	String	0	DEF	($ = filePointer.readLine()) == null
1356	336	12	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	(str = $.filePointer.readLine()) == null
1356	336	12	ValueServer.java	getNextReplay	str	String	0	DEF	($ = filePointer.readLine()) == null
1107	156	8	Variance.java	increment	THIS	Variance	0	DEF	$.incMoment
1108	166	12	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 0
1109	168	19	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 1
1110	171	16	Variance.java	getResult	THIS	Variance	1	RET	$.isBiasCorrected
1111	191	8	Variance.java	clear	THIS	Variance	0	DEF	$.incMoment
1112	214	8	Variance.java	evaluate	values	double[]	0	DEF	$ == null
1113	245	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
1113	245	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1113	245	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
1113	245	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
1114	247	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1115	249	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
1116	289	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
1116	289	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1116	289	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
1116	289	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
1117	290	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1118	292	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
40741	296	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
40741	296	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
40741	296	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1119	302	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
227	283	4	Vector3D.java	normalize	s	double	0	DEF	$ == 0
228	307	4	Vector3D.java	orthogonal	threshold	double	0	DEF	$ == 0
229	311	4	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x <= threshold
229	311	4	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x >= -threshold
229	311	4	Vector3D.java	orthogonal	threshold	double	1	RET	x <= $
229	311	4	Vector3D.java	orthogonal	threshold	double	1	RET	x >= -$
230	314	11	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y >= -threshold
230	314	11	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y <= threshold
230	314	11	Vector3D.java	orthogonal	threshold	double	0	RET	y >= -$
230	314	11	Vector3D.java	orthogonal	threshold	double	0	RET	y <= $
231	337	4	Vector3D.java	angle	normProduct	double	0	DEF	$ == 0
232	343	4	Vector3D.java	angle	dot	double	0	RET	$ > threshold
232	343	4	Vector3D.java	angle	dot	double	0	RET	$ < -threshold
232	343	4	Vector3D.java	angle	threshold	double	0	RET	dot > $
232	343	4	Vector3D.java	angle	threshold	double	0	RET	dot < -$
233	346	6	Vector3D.java	angle	dot	double	0	RET	$ >= 0
234	412	4	Vector3D.java	equals	THIS	Vector3D	0	RET	$ == other
234	412	4	Vector3D.java	equals	other	Object	0	RET	this == $
235	416	4	Vector3D.java	equals	other	Object	0	RET	$ == null
236	423	6	Vector3D.java	equals	rhs	Vector3D	0	RET	$.isNaN()
237	445	6	Vector3D.java	hashCode	THIS	Vector3D	0	RET	$.isNaN()
177	240	8	Vector3DFormat.java	format	obj	Object	0	RET	$ instanceof Vector3D
178	259	8	Vector3DFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
179	278	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedPrefix, pos)
179	278	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedPrefix, pos)
179	278	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedPrefix, $)
180	285	8	Vector3DFormat.java	parse	x	Number	0	RET	$ == null
181	294	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSeparator, pos)
181	294	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSeparator, pos)
181	294	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSeparator, $)
182	299	8	Vector3DFormat.java	parse	y	Number	0	RET	$ == null
183	308	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSeparator, pos)
183	308	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSeparator, pos)
183	308	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSeparator, $)
184	313	8	Vector3DFormat.java	parse	z	Number	0	RET	$ == null
185	322	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSuffix, pos)
185	322	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSuffix, pos)
185	322	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSuffix, $)
1129	66	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	DimensionMismatchException	v.$.length != $.sums.$.length
1129	66	8	VectorialCovariance.java	increment	v	double[]	0	DimensionMismatchException	$.length != sums.length
40745	70	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	NIL-FOR	i < v.$.length
40745	70	8	VectorialCovariance.java	increment	i	int	0	NIL-FOR	$ < v.length
40745	70	8	VectorialCovariance.java	increment	v	double[]	0	NIL-FOR	i < $.length
40746	72	12	VectorialCovariance.java	increment	j	int	0	NIL-FOR	$ <= i
40746	72	12	VectorialCovariance.java	increment	i	int	0	NIL-FOR	j <= $
1130	88	8	VectorialCovariance.java	getResult	THIS	VectorialCovariance	0	DEF	$.n > 1
40747	91	12	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	$ < dimension
40747	91	12	VectorialCovariance.java	getResult	dimension	int	0	NIL-FOR	i < $
40748	92	16	VectorialCovariance.java	getResult	j	int	0	NIL-FOR	$ <= i
40748	92	16	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	j <= $
1131	136	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$ == obj
1131	136	8	VectorialCovariance.java	equals	obj	Object	0	RET	this == $
1132	138	8	VectorialCovariance.java	equals	obj	Object	0	RET	$ == null
1133	140	8	VectorialCovariance.java	equals	obj	Object	0	RET	$ instanceof VectorialCovariance
1134	143	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.isBiasCorrected != other.$.isBiasCorrected
1134	143	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	isBiasCorrected != $.isBiasCorrected
1135	145	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.n != other.$.n
1135	145	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	n != $.n
1136	147	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.productsSums, other.$.productsSums)
1136	147	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(productsSums, $.productsSums)
1137	149	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.sums, other.$.sums)
1137	149	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(sums, $.sums)
40750	42	8	VectorialMean.java	VectorialMean	i	int	0	NIL-FOR	$ < dimension
40750	42	8	VectorialMean.java	VectorialMean	dimension	int	0	NIL-FOR	i < $
1148	53	8	VectorialMean.java	increment	THIS	VectorialMean	0	DimensionMismatchException	v.$.length != $.means.$.length
1148	53	8	VectorialMean.java	increment	v	double[]	0	DimensionMismatchException	$.length != means.length
40751	56	8	VectorialMean.java	increment	THIS	VectorialMean	0	NIL-FOR	i < v.$.length
40751	56	8	VectorialMean.java	increment	i	int	0	NIL-FOR	$ < v.length
40751	56	8	VectorialMean.java	increment	v	double[]	0	NIL-FOR	i < $.length
40752	67	8	VectorialMean.java	getResult	THIS	VectorialMean	0	NIL-FOR	i < result.$.length
40752	67	8	VectorialMean.java	getResult	i	int	0	NIL-FOR	$ < result.length
40752	67	8	VectorialMean.java	getResult	result	double[]	0	NIL-FOR	i < $.length
1149	93	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	$ == obj
1149	93	8	VectorialMean.java	equals	obj	Object	0	RET	this == $
1150	95	8	VectorialMean.java	equals	obj	Object	0	RET	$ == null
1151	97	8	VectorialMean.java	equals	obj	Object	0	RET	$ instanceof VectorialMean
1152	100	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	Arrays.equals($.means, other.$.means)
1152	100	8	VectorialMean.java	equals	other	VectorialMean	0	RET	Arrays.equals(means, $.means)
431	62	8	WeibullDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
432	101	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ < 0.0
432	101	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ > 1.0
433	104	15	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
434	106	16	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
435	119	8	WeibullDistributionImpl.java	setShape	alpha	double	0	DEF	$ <= 0.0
436	132	8	WeibullDistributionImpl.java	setScale	beta	double	0	DEF	$ <= 0.0
437	75	8	ZipfDistributionImpl.java	setNumberOfElements	n	int	0	DEF	$ <= 0
438	102	8	ZipfDistributionImpl.java	setExponent	s	double	0	DEF	$ <= 0.0
439	117	8	ZipfDistributionImpl.java	probability	THIS	ZipfDistributionImpl	0	RET	x > $.getNumberOfElements()
439	117	8	ZipfDistributionImpl.java	probability	x	int	0	RET	$ > getNumberOfElements()
439	117	8	ZipfDistributionImpl.java	probability	x	int	0	RET	$ <= 0
440	133	8	ZipfDistributionImpl.java	cumulativeProbability	x	int	1	RET	$ <= 0
441	135	15	ZipfDistributionImpl.java	cumulativeProbability	THIS	ZipfDistributionImpl	0	RET	x >= $.getNumberOfElements()
441	135	15	ZipfDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ >= getNumberOfElements()
39704	181	8	ZipfDistributionImpl.java	generalizedHarmonic	k	int	0	NIL-FOR	$ > 0
