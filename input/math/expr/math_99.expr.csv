id	line	column	filename	methodname	varname	vartype	else	return	right
340	61	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	IllegalArgumentException	$ < 0.0
340	61	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	IllegalArgumentException	$ > 1.0
341	96	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	Math.abs($.value(lowerBound)) < 1E-6
341	96	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	lowerBound	double	0	RET	Math.abs(rootFindingFunction.value($)) < 1E-6
342	99	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	Math.abs($.value(upperBound)) < 1E-6
342	99	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	upperBound	double	0	RET	Math.abs(rootFindingFunction.value($)) < 1E-6
372	60	8	AbstractDistribution.java	cumulativeProbability	x0	double	0	IllegalArgumentException	$ > x1
372	60	8	AbstractDistribution.java	cumulativeProbability	x1	double	0	IllegalArgumentException	x0 > $
46183	83	8	AbstractEstimator.java	updateJacobian	THIS	AbstractEstimator	0	NIL-FOR	i < $.rows
46183	83	8	AbstractEstimator.java	updateJacobian	i	int	0	NIL-FOR	$ < rows
46184	86	12	AbstractEstimator.java	updateJacobian	THIS	AbstractEstimator	0	NIL-FOR	j < $.cols
46184	86	12	AbstractEstimator.java	updateJacobian	j	int	0	NIL-FOR	$ < cols
1004	107	8	AbstractEstimator.java	updateResidualsAndCost	THIS	AbstractEstimator	0	EstimationException	++$.costEvaluations > $.maxCostEval
46185	113	8	AbstractEstimator.java	updateResidualsAndCost	THIS	AbstractEstimator	0	NIL-FOR	i < $.rows
46185	113	8	AbstractEstimator.java	updateResidualsAndCost	i	int	0	NIL-FOR	$ < rows
46186	137	8	AbstractEstimator.java	getRMS	THIS	AbstractEstimator	0	NIL-FOR	i < wm.$.length
46186	137	8	AbstractEstimator.java	getRMS	i	int	0	NIL-FOR	$ < wm.length
46186	137	8	AbstractEstimator.java	getRMS	wm	WeightedMeasurement[]	0	NIL-FOR	i < $.length
46187	152	8	AbstractEstimator.java	getChiSquare	THIS	AbstractEstimator	0	NIL-FOR	i < wm.$.length
46187	152	8	AbstractEstimator.java	getChiSquare	i	int	0	NIL-FOR	$ < wm.length
46187	152	8	AbstractEstimator.java	getChiSquare	wm	WeightedMeasurement[]	0	NIL-FOR	i < $.length
46188	177	8	AbstractEstimator.java	getCovariances	i	int	0	NIL-FOR	$ < cols
46188	177	8	AbstractEstimator.java	getCovariances	cols	int	0	NIL-FOR	i < $
46189	178	12	AbstractEstimator.java	getCovariances	j	int	0	NIL-FOR	$ < cols
46189	178	12	AbstractEstimator.java	getCovariances	cols	int	0	NIL-FOR	j < $
46190	180	16	AbstractEstimator.java	getCovariances	k	int	0	NIL-FOR	$ < max
46190	180	16	AbstractEstimator.java	getCovariances	max	int	0	NIL-FOR	k < $
1005	213	8	AbstractEstimator.java	guessParametersErrors	m	int	0	EstimationException	$ <= p
1005	213	8	AbstractEstimator.java	guessParametersErrors	p	int	0	EstimationException	m <= $
46191	220	8	AbstractEstimator.java	guessParametersErrors	THIS	AbstractEstimator	0	NIL-FOR	i < errors.$.length
46191	220	8	AbstractEstimator.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
46191	220	8	AbstractEstimator.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
299	78	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	0	IllegalArgumentException	$ > x1
299	78	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	double	0	IllegalArgumentException	x0 > $
300	82	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	1	RET	Math.floor($) < $
301	116	8	AbstractIntegerDistribution.java	probability	fl	double	1	RET	$ == x
301	116	8	AbstractIntegerDistribution.java	probability	x	double	1	RET	fl == $
302	135	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	int	0	IllegalArgumentException	$ > x1
302	135	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	int	0	IllegalArgumentException	x0 > $
303	154	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	IllegalArgumentException	$ > 1.0
303	154	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	IllegalArgumentException	$ < 0.0
45474	164	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	0	NIL-WHILE	$ < x1
45474	164	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	0	NIL-WHILE	x0 < $
304	167	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	1	DEF	$ > p
304	167	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	1	DEF	pm > $
305	169	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x1
305	169	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	1	DEF	xm == $
306	179	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x0
306	179	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	1	DEF	xm == $
45475	192	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	0	NIL-WHILE	$ > p
45475	192	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	pm > $
1193	109	12	AbstractIntegrator.java	requiresDenseOutput	THIS	AbstractIntegrator	0	RET	$.handler.requiresDenseOutput()
1194	139	8	AbstractIntegrator.java	sanityChecks	THIS	AbstractIntegrator	0	IntegratorException	equations.getDimension() != y0.$.length
1194	139	8	AbstractIntegrator.java	sanityChecks	equations	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y0.length
1194	139	8	AbstractIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	equations.getDimension() != $.length
1195	148	8	AbstractIntegrator.java	sanityChecks	THIS	AbstractIntegrator	0	IntegratorException	equations.getDimension() != y.$.length
1195	148	8	AbstractIntegrator.java	sanityChecks	equations	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y.length
1195	148	8	AbstractIntegrator.java	sanityChecks	y	double[]	0	IntegratorException	equations.getDimension() != $.length
1196	157	8	AbstractIntegrator.java	sanityChecks	t0	double	0	IntegratorException	Math.abs(t - $) <= 1.0e-12 * Math.max(Math.abs($), Math.abs(t))
1196	157	8	AbstractIntegrator.java	sanityChecks	t	double	0	IntegratorException	Math.abs($ - t0) <= 1.0e-12 * Math.max(Math.abs(t0), Math.abs($))
46138	48	8	AbstractMultipleLinearRegression.java	newSampleData	i	int	0	NIL-FOR	$ < nobs
46138	48	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NIL-FOR	i < $
46139	51	12	AbstractMultipleLinearRegression.java	newSampleData	j	int	0	NIL-FOR	$ < nvars + 1
46139	51	12	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	NIL-FOR	j < $ + 1
928	86	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	IllegalArgumentException	$ == null
929	89	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	IllegalArgumentException	$ == null
930	92	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	IllegalArgumentException	x.$.length != y.$.length
930	92	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	IllegalArgumentException	$.length != y.length
930	92	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	IllegalArgumentException	x.length != $.length
931	107	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	IllegalArgumentException	$ == null
932	110	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	IllegalArgumentException	x.$.length != covariance.$.length
932	110	8	AbstractMultipleLinearRegression.java	validateCovarianceData	x	double[][]	0	IllegalArgumentException	$.length != covariance.length
932	110	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	IllegalArgumentException	x.length != $.length
933	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	IllegalArgumentException	covariance.$.length > 0
933	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	IllegalArgumentException	covariance.$.length != covariance[0].length
933	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	IllegalArgumentException	$.length > 0
933	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	IllegalArgumentException	$.length != $[0].length
46140	151	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	i	int	0	NIL-FOR	$ < length
46140	151	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	length	int	0	NIL-FOR	i < $
46159	91	8	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	NIL-WHILE	bytesOut < bytes.$.length
46159	91	8	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	NIL-WHILE	$ < bytes.length
46159	91	8	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	bytesOut < $.length
46160	93	10	AbstractRandomGenerator.java	nextBytes	i	int	0	NIL-FOR	$ < 3
962	94	14	AbstractRandomGenerator.java	nextBytes	i	int	0	DEF	$ > 0
963	98	14	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	RET	bytesOut == bytes.$.length
963	98	14	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	RET	$ == bytes.length
963	98	14	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	RET	bytesOut == $.length
964	140	8	AbstractRandomGenerator.java	nextInt	n	int	0	IllegalArgumentException	$ <= 0
965	236	8	AbstractRandomGenerator.java	nextGaussian	THIS	AbstractRandomGenerator	0	RET	Double.isNaN($.cachedNormalDeviate)
46161	244	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	NIL-WHILE	$ >=1
966	249	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	DEF	$ != 0
475	63	8	AbstractRealMatrix.java	AbstractRealMatrix	rowDimension	int	0	DEF	$ <= 0
476	68	8	AbstractRealMatrix.java	AbstractRealMatrix	columnDimension	int	0	DEF	$ <= 0
45634	92	8	AbstractRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
45634	92	8	AbstractRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
45635	93	12	AbstractRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
45635	93	12	AbstractRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
45636	111	8	AbstractRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
45636	111	8	AbstractRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
45637	112	12	AbstractRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
45637	112	12	AbstractRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
45638	127	8	AbstractRealMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
45638	127	8	AbstractRealMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
45639	128	12	AbstractRealMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
45639	128	12	AbstractRealMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
45640	143	8	AbstractRealMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
45640	143	8	AbstractRealMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
45641	144	12	AbstractRealMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
45641	144	12	AbstractRealMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
45642	164	8	AbstractRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
45642	164	8	AbstractRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
45643	165	12	AbstractRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
45643	165	12	AbstractRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
45644	167	16	AbstractRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
45644	167	16	AbstractRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
45645	189	8	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	i < data.$.length
45645	189	8	AbstractRealMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
45645	189	8	AbstractRealMatrix.java	getData	data	double[][]	0	NIL-FOR	i < $.length
45646	191	12	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	j < dataI.$.length
45646	191	12	AbstractRealMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
45646	191	12	AbstractRealMatrix.java	getData	dataI	double[]	0	NIL-FOR	j < $.length
45647	281	8	AbstractRealMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
45647	281	8	AbstractRealMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
45648	282	12	AbstractRealMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
45648	282	12	AbstractRealMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
477	327	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination[0].length < columnsCount
477	327	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination.$.length < rowsCount
477	327	8	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	DEF	destination.length < $
477	327	8	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	DEF	destination[0].length < $
477	327	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$[0].length < columnsCount
477	327	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$.length < rowsCount
478	371	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination[0].length < selectedColumns.$.length
478	371	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination.$.length < selectedRows.$.length
478	371	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	DEF	destination.length < $.length
478	371	8	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	DEF	destination[0].length < $.length
478	371	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$[0].length < selectedColumns.length
478	371	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$.length < selectedRows.length
45649	382	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	i < selectedRows.$.length
45649	382	8	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
45649	382	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
45650	384	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	j < selectedColumns.$.length
45650	384	12	AbstractRealMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
45650	384	12	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
479	396	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	DEF	$ == 0
480	402	8	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DEF	$ == 0
45651	407	8	AbstractRealMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
45651	407	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
481	408	12	AbstractRealMatrix.java	setSubMatrix	THIS	AbstractRealMatrix	0	DEF	subMatrix[r].length != nCols
481	408	12	AbstractRealMatrix.java	setSubMatrix	r	int	0	DEF	subMatrix[$].length != nCols
481	408	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DEF	subMatrix[r].length != $
481	408	12	AbstractRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DEF	$[r].length != nCols
45652	421	8	AbstractRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
45652	421	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
45653	422	12	AbstractRealMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
45653	422	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
45654	438	8	AbstractRealMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
45654	438	8	AbstractRealMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
482	452	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	InvalidMatrixException	matrix.getColumnDimension() != $
482	452	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getRowDimension() != 1
482	452	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getColumnDimension() != nCols
45655	461	8	AbstractRealMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
45655	461	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
45656	474	8	AbstractRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
45656	474	8	AbstractRealMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
483	488	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	InvalidMatrixException	matrix.getRowDimension() != $
483	488	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getRowDimension() != nRows
483	488	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getColumnDimension() != 1
45657	497	8	AbstractRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
45657	497	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
484	515	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	InvalidMatrixException	vector.getDimension() != $
484	515	8	AbstractRealMatrix.java	setRowVector	vector	RealVector	0	InvalidMatrixException	$.getDimension() != nCols
45658	522	8	AbstractRealMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
45658	522	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
485	540	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	InvalidMatrixException	vector.getDimension() != $
485	540	8	AbstractRealMatrix.java	setColumnVector	vector	RealVector	0	InvalidMatrixException	$.getDimension() != nRows
45659	547	8	AbstractRealMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
45659	547	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
45660	560	8	AbstractRealMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
45660	560	8	AbstractRealMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
486	574	8	AbstractRealMatrix.java	setRow	THIS	AbstractRealMatrix	0	InvalidMatrixException	array.$.length != nCols
486	574	8	AbstractRealMatrix.java	setRow	nCols	int	0	InvalidMatrixException	array.length != $
486	574	8	AbstractRealMatrix.java	setRow	array	double[]	0	InvalidMatrixException	$.length != nCols
45661	581	8	AbstractRealMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
45661	581	8	AbstractRealMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
45662	594	8	AbstractRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
45662	594	8	AbstractRealMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
487	608	8	AbstractRealMatrix.java	setColumn	THIS	AbstractRealMatrix	0	InvalidMatrixException	array.$.length != nRows
487	608	8	AbstractRealMatrix.java	setColumn	nRows	int	0	InvalidMatrixException	array.length != $
487	608	8	AbstractRealMatrix.java	setColumn	array	double[]	0	InvalidMatrixException	$.length != nRows
45663	615	8	AbstractRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
45663	615	8	AbstractRealMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
488	663	8	AbstractRealMatrix.java	inverse	THIS	AbstractRealMatrix	0	DEF	$.lu == null
489	684	8	AbstractRealMatrix.java	isSingular	THIS	AbstractRealMatrix	0	DEF	$.lu == null
490	701	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
490	701	8	AbstractRealMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
45664	705	8	AbstractRealMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
45664	705	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
491	717	8	AbstractRealMatrix.java	operate	THIS	AbstractRealMatrix	0	DEF	v.$.length != nCols
491	717	8	AbstractRealMatrix.java	operate	nCols	int	0	DEF	v.length != $
491	717	8	AbstractRealMatrix.java	operate	v	double[]	0	DEF	$.length != nCols
45665	726	8	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
45665	726	8	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
45666	728	12	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
45666	728	12	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
492	746	12	AbstractRealMatrix.java	operate	nCols	int	0	DEF	v.getDimension() != $
492	746	12	AbstractRealMatrix.java	operate	v	RealVector	0	DEF	$.getDimension() != nCols
45667	755	12	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
45667	755	12	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
45668	757	16	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
45668	757	16	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
493	773	8	AbstractRealMatrix.java	preMultiply	THIS	AbstractRealMatrix	0	DEF	v.$.length != nRows
493	773	8	AbstractRealMatrix.java	preMultiply	nRows	int	0	DEF	v.length != $
493	773	8	AbstractRealMatrix.java	preMultiply	v	double[]	0	DEF	$.length != nRows
45669	782	8	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
45669	782	8	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
45670	784	12	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
45670	784	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
494	803	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	DEF	v.getDimension() != $
494	803	12	AbstractRealMatrix.java	preMultiply	v	RealVector	0	DEF	$.getDimension() != nRows
45671	812	12	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
45671	812	12	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
45672	814	16	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
45672	814	16	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
45673	831	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
45673	831	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
45674	832	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
45674	832	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
45675	848	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
45675	848	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
45676	849	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
45676	849	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
45677	864	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
45677	864	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
45678	865	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
45678	865	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
45679	883	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
45679	883	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
45680	884	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
45680	884	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
45681	897	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
45681	897	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
45682	898	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
45682	898	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
45683	914	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
45683	914	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
45684	915	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
45684	915	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
45685	930	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
45685	930	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
45686	931	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
45686	931	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
45687	949	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
45687	949	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
45688	950	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
45688	950	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
495	989	8	AbstractRealMatrix.java	solve	THIS	AbstractRealMatrix	0	DEF	$.lu == null
496	999	8	AbstractRealMatrix.java	solve	THIS	AbstractRealMatrix	0	DEF	$.lu == null
497	1027	8	AbstractRealMatrix.java	luDecompose	THIS	AbstractRealMatrix	0	DEF	$.lu == null
45689	1044	8	AbstractRealMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
45689	1044	8	AbstractRealMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
498	1045	12	AbstractRealMatrix.java	toString	i	int	0	DEF	$ > 0
45690	1049	12	AbstractRealMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
45690	1049	12	AbstractRealMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
499	1050	16	AbstractRealMatrix.java	toString	j	int	0	DEF	$ > 0
500	1072	8	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	object == $
500	1072	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ == this
501	1075	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ instanceof RealMatrix == false
502	1081	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getColumnDimension() != nCols
502	1081	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getRowDimension() != nRows
502	1081	8	AbstractRealMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
502	1081	8	AbstractRealMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
45691	1084	8	AbstractRealMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
45691	1084	8	AbstractRealMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
45692	1085	12	AbstractRealMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
45692	1085	12	AbstractRealMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
503	1086	16	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	$.getEntry(row, col) != m.getEntry(row, col)
503	1086	16	AbstractRealMatrix.java	equals	col	int	0	RET	getEntry(row, $) != m.getEntry(row, $)
503	1086	16	AbstractRealMatrix.java	equals	row	int	0	RET	getEntry($, col) != m.getEntry($, col)
503	1086	16	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	getEntry(row, col) != $.getEntry(row, col)
45693	1105	8	AbstractRealMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
45693	1105	8	AbstractRealMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
45694	1106	12	AbstractRealMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
45694	1106	12	AbstractRealMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
504	1120	8	AbstractRealMatrix.java	checkRowIndex	THIS	AbstractRealMatrix	0	MatrixIndexException	row >= $.getRowDimension()
504	1120	8	AbstractRealMatrix.java	checkRowIndex	row	int	0	MatrixIndexException	$ < 0
504	1120	8	AbstractRealMatrix.java	checkRowIndex	row	int	0	MatrixIndexException	$ >= getRowDimension()
505	1133	8	AbstractRealMatrix.java	checkColumnIndex	THIS	AbstractRealMatrix	0	MatrixIndexException	column >= $.getColumnDimension()
505	1133	8	AbstractRealMatrix.java	checkColumnIndex	column	int	0	MatrixIndexException	$ >= getColumnDimension()
505	1133	8	AbstractRealMatrix.java	checkColumnIndex	column	int	0	MatrixIndexException	$ < 0
506	1153	8	AbstractRealMatrix.java	checkSubMatrixIndex	startRow	int	0	MatrixIndexException	$ > endRow
506	1153	8	AbstractRealMatrix.java	checkSubMatrixIndex	endRow	int	0	MatrixIndexException	startRow > $
507	1160	8	AbstractRealMatrix.java	checkSubMatrixIndex	startColumn	int	0	MatrixIndexException	$ > endColumn
507	1160	8	AbstractRealMatrix.java	checkSubMatrixIndex	endColumn	int	0	MatrixIndexException	startColumn > $
508	1177	8	AbstractRealMatrix.java	checkSubMatrixIndex	THIS	AbstractRealMatrix	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
508	1177	8	AbstractRealMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
508	1177	8	AbstractRealMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
509	1178	12	AbstractRealMatrix.java	checkSubMatrixIndex	THIS	AbstractRealMatrix	0	MatrixIndexException	selectedRows.$.length == 0
509	1178	12	AbstractRealMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length == 0
510	1198	8	AbstractRealMatrix.java	checkAdditionCompatible	THIS	AbstractRealMatrix	0	DEF	$.getColumnDimension() != m.getColumnDimension()
510	1198	8	AbstractRealMatrix.java	checkAdditionCompatible	THIS	AbstractRealMatrix	0	DEF	$.getRowDimension() != m.getRowDimension()
510	1198	8	AbstractRealMatrix.java	checkAdditionCompatible	m	RealMatrix	0	DEF	getColumnDimension() != $.getColumnDimension()
510	1198	8	AbstractRealMatrix.java	checkAdditionCompatible	m	RealMatrix	0	DEF	getRowDimension() != $.getRowDimension()
511	1217	8	AbstractRealMatrix.java	checkSubtractionCompatible	THIS	AbstractRealMatrix	0	DEF	$.getRowDimension() != m.getRowDimension()
511	1217	8	AbstractRealMatrix.java	checkSubtractionCompatible	THIS	AbstractRealMatrix	0	DEF	$.getColumnDimension() != m.getColumnDimension()
511	1217	8	AbstractRealMatrix.java	checkSubtractionCompatible	m	RealMatrix	0	DEF	getRowDimension() != $.getRowDimension()
511	1217	8	AbstractRealMatrix.java	checkSubtractionCompatible	m	RealMatrix	0	DEF	getColumnDimension() != $.getColumnDimension()
512	1236	8	AbstractRealMatrix.java	checkMultiplicationCompatible	THIS	AbstractRealMatrix	0	DEF	$.getColumnDimension() != m.getRowDimension()
512	1236	8	AbstractRealMatrix.java	checkMultiplicationCompatible	m	RealMatrix	0	DEF	getColumnDimension() != $.getRowDimension()
1066	144	4	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	1	DEF	interpolator.$.currentState != null
1066	144	4	AbstractStepInterpolator.java	AbstractStepInterpolator	interpolator	AbstractStepInterpolator	1	DEF	$.currentState != null
1067	321	4	AbstractStepInterpolator.java	finalizeStep	THIS	AbstractStepInterpolator	0	DEF	$.finalized
46269	360	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
46269	360	4	AbstractStepInterpolator.java	writeBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
46270	397	4	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
46270	397	4	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
761	59	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	IllegalArgumentException	$ == null
762	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
762	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	test($, begin, length)
762	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	begin	int	0	DEF	test(values, $, length)
762	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	length	int	0	DEF	test(values, begin, $)
763	125	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	IllegalArgumentException	$ == null
764	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
764	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	test($, begin, length)
764	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	begin	int	0	DEF	test(values, $, length)
764	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	length	int	0	DEF	test(values, begin, $)
46082	146	12	AbstractStorelessUnivariateStatistic.java	incrementAll	i	int	0	NIL-FOR	$ < k
46082	146	12	AbstractStorelessUnivariateStatistic.java	incrementAll	k	int	0	NIL-FOR	i < $
765	160	8	AbstractStorelessUnivariateStatistic.java	equals	THIS	AbstractStorelessUnivariateStatistic	0	RET	object == $
765	160	8	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ == this
766	163	7	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ instanceof AbstractStorelessUnivariateStatistic == false
852	82	8	AbstractUnivariateStatistic.java	test	values	double[]	0	IllegalArgumentException	$ == null
853	86	8	AbstractUnivariateStatistic.java	test	begin	int	0	IllegalArgumentException	$ < 0
854	90	8	AbstractUnivariateStatistic.java	test	length	int	0	IllegalArgumentException	$ < 0
855	94	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	IllegalArgumentException	begin + length > values.$.length
855	94	8	AbstractUnivariateStatistic.java	test	values	double[]	0	IllegalArgumentException	begin + length > $.length
855	94	8	AbstractUnivariateStatistic.java	test	begin	int	0	IllegalArgumentException	$ + length > values.length
855	94	8	AbstractUnivariateStatistic.java	test	length	int	0	IllegalArgumentException	begin + $ > values.length
856	99	8	AbstractUnivariateStatistic.java	test	length	int	0	RET	$ == 0
46337	85	8	AdamsBashforthIntegrator.java	AdamsBashforthIntegrator	i	int	0	NIL-FOR	$ < order
46337	85	8	AdamsBashforthIntegrator.java	AdamsBashforthIntegrator	order	int	0	NIL-FOR	i < $
46338	87	12	AdamsBashforthIntegrator.java	AdamsBashforthIntegrator	j	int	0	NIL-FOR	$ < order
46338	87	12	AdamsBashforthIntegrator.java	AdamsBashforthIntegrator	order	int	0	NIL-FOR	j < $
1141	106	8	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1141	106	8	AdamsBashforthIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
1142	127	8	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	RET	Double.isNaN($.previousT[0])
46339	134	8	AdamsBashforthIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
46340	140	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	j < y0.$.length
46340	140	12	AdamsBashforthIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
46340	140	12	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
46341	142	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	l < $.coeffs.$.length
46341	142	16	AdamsBashforthIntegrator.java	integrate	l	int	0	NIL-FOR	$ < coeffs.length
1143	151	12	AdamsBashforthIntegrator.java	integrate	interpolator	AdamsBashforthStepInterpolator	1	DEF	manager.evaluateStep($)
1143	151	12	AdamsBashforthIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolator)
1144	171	12	AdamsBashforthIntegrator.java	integrate	lastStep	boolean	0	RET	$
1145	174	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	1	RET	manager.reset($.stepStart, y)
1145	174	16	AdamsBashforthIntegrator.java	integrate	manager	CombinedEventsManager	1	RET	$.reset(stepStart, y)
1145	174	16	AdamsBashforthIntegrator.java	integrate	y	double[]	1	RET	manager.reset(stepStart, $)
1146	180	20	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	RET	Double.isNaN($.previousT[0])
1147	187	20	AdamsBashforthIntegrator.java	integrate	truncated	boolean	1	DEF	$
46342	189	24	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	i < $.previousF.$.length
46342	189	24	AdamsBashforthIntegrator.java	integrate	i	int	0	NIL-FOR	$ < previousF.length
46343	248	8	AdamsBashforthIntegrator.java	computeBackwardDifferencesArray	i	int	0	NIL-FOR	$ < order
46343	248	8	AdamsBashforthIntegrator.java	computeBackwardDifferencesArray	order	int	0	NIL-FOR	i < $
46344	251	12	AdamsBashforthIntegrator.java	computeBackwardDifferencesArray	j	int	0	NIL-FOR	$ < i - 1
46344	251	12	AdamsBashforthIntegrator.java	computeBackwardDifferencesArray	i	int	0	NIL-FOR	j < $ - 1
46345	274	8	AdamsBashforthIntegrator.java	computeGammaArray	i	int	0	NIL-FOR	$ < order
46345	274	8	AdamsBashforthIntegrator.java	computeGammaArray	order	int	0	NIL-FOR	i < $
46346	276	12	AdamsBashforthIntegrator.java	computeGammaArray	j	int	0	NIL-FOR	$ <= i
46346	276	12	AdamsBashforthIntegrator.java	computeGammaArray	i	int	0	NIL-FOR	j <= $
46370	107	8	AdamsBashforthStepInterpolator.java	initializeCoefficients	THIS	AdamsBashforthStepInterpolator	0	NIL-FOR	i < fGamma.$.length
46370	107	8	AdamsBashforthStepInterpolator.java	initializeCoefficients	i	int	0	NIL-FOR	$ < fGamma.length
46370	107	8	AdamsBashforthStepInterpolator.java	initializeCoefficients	fGamma	Fraction[]	0	NIL-FOR	i < $.length
46371	154	8	AdamsBashforthStepInterpolator.java	interpolateDerivatives	THIS	AdamsBashforthStepInterpolator	0	NIL-FOR	i < $.interpolatedDerivatives.$.length
46371	154	8	AdamsBashforthStepInterpolator.java	interpolateDerivatives	i	int	0	NIL-FOR	$ < interpolatedDerivatives.length
46372	157	12	AdamsBashforthStepInterpolator.java	interpolateDerivatives	THIS	AdamsBashforthStepInterpolator	0	NIL-FOR	k < $.previousF.$.length
46372	157	12	AdamsBashforthStepInterpolator.java	interpolateDerivatives	k	int	0	NIL-FOR	$ < previousF.length
46373	162	12	AdamsBashforthStepInterpolator.java	interpolateDerivatives	THIS	AdamsBashforthStepInterpolator	0	NIL-FOR	l < $.neville.$.length
46373	162	12	AdamsBashforthStepInterpolator.java	interpolateDerivatives	l	int	0	NIL-FOR	$ < neville.length
46374	163	16	AdamsBashforthStepInterpolator.java	interpolateDerivatives	m	int	0	NIL-FOR	$ >= l
46374	163	16	AdamsBashforthStepInterpolator.java	interpolateDerivatives	l	int	0	NIL-FOR	m >= $
46375	231	8	AdamsBashforthStepInterpolator.java	interpolateState	THIS	AdamsBashforthStepInterpolator	0	NIL-FOR	j < $.interpolatedState.$.length
46375	231	8	AdamsBashforthStepInterpolator.java	interpolateState	j	int	0	NIL-FOR	$ < interpolatedState.length
46376	233	12	AdamsBashforthStepInterpolator.java	interpolateState	THIS	AdamsBashforthStepInterpolator	0	NIL-FOR	l < $.previousT.$.length
46376	233	12	AdamsBashforthStepInterpolator.java	interpolateState	l	int	0	NIL-FOR	$ < previousT.length
46377	250	8	AdamsBashforthStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	$ < order
46377	250	8	AdamsBashforthStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	i < $
46378	253	12	AdamsBashforthStepInterpolator.java	computeRollback	j	int	0	NIL-FOR	$ <= i
46378	253	12	AdamsBashforthStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	j <= $
46379	260	8	AdamsBashforthStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	$ < order
46379	260	8	AdamsBashforthStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	i < $
46380	266	8	AdamsBashforthStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	$ < order
46380	266	8	AdamsBashforthStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	i < $
46381	268	12	AdamsBashforthStepInterpolator.java	computeRollback	j	int	0	NIL-FOR	$ <= order
46381	268	12	AdamsBashforthStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	j <= $
46325	89	8	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	i	int	0	NIL-FOR	$ < order
46325	89	8	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	order	int	0	NIL-FOR	i < $
46326	91	12	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	j	int	0	NIL-FOR	$ < order
46326	91	12	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	order	int	0	NIL-FOR	j < $
46327	100	8	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	i	int	0	NIL-FOR	$ <= order
46327	100	8	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	order	int	0	NIL-FOR	i <= $
46328	102	12	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	j	int	0	NIL-FOR	$ <= order
46328	102	12	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	order	int	0	NIL-FOR	j <= $
1134	122	8	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1134	122	8	AdamsMoultonIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
1135	143	8	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	RET	Double.isNaN($.previousT[0])
46329	152	8	AdamsMoultonIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
46330	158	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
46330	158	12	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
46330	158	12	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
46331	160	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	l < $.predictorCoeffs.$.length
46331	160	16	AdamsMoultonIntegrator.java	integrate	l	int	0	NIL-FOR	$ < predictorCoeffs.length
46332	171	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
46332	171	12	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
46332	171	12	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
46333	173	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	l < $.correctorCoeffs.$.length
46333	173	16	AdamsMoultonIntegrator.java	integrate	l	int	0	NIL-FOR	$ < correctorCoeffs.length
1136	182	12	AdamsMoultonIntegrator.java	integrate	interpolator	AdamsMoultonStepInterpolator	1	DEF	manager.evaluateStep($)
1136	182	12	AdamsMoultonIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolator)
1137	202	12	AdamsMoultonIntegrator.java	integrate	lastStep	boolean	0	RET	$
1138	205	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	1	RET	manager.reset($.stepStart, y)
1138	205	16	AdamsMoultonIntegrator.java	integrate	manager	CombinedEventsManager	1	RET	$.reset(stepStart, y)
1138	205	16	AdamsMoultonIntegrator.java	integrate	y	double[]	1	RET	manager.reset(stepStart, $)
1139	211	20	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	RET	Double.isNaN($.previousT[0])
1140	220	20	AdamsMoultonIntegrator.java	integrate	truncated	boolean	1	DEF	$
46334	222	24	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	i < $.previousF.$.length
46334	222	24	AdamsMoultonIntegrator.java	integrate	i	int	0	NIL-FOR	$ < previousF.length
46335	283	8	AdamsMoultonIntegrator.java	computeGammaStarArray	i	int	0	NIL-FOR	$ <= order
46335	283	8	AdamsMoultonIntegrator.java	computeGammaStarArray	order	int	0	NIL-FOR	i <= $
46336	285	12	AdamsMoultonIntegrator.java	computeGammaStarArray	j	int	0	NIL-FOR	$ <= i
46336	285	12	AdamsMoultonIntegrator.java	computeGammaStarArray	i	int	0	NIL-FOR	j <= $
46277	107	8	AdamsMoultonStepInterpolator.java	initializeCoefficients	THIS	AdamsMoultonStepInterpolator	0	NIL-FOR	i < fGammaStar.$.length
46277	107	8	AdamsMoultonStepInterpolator.java	initializeCoefficients	i	int	0	NIL-FOR	$ < fGammaStar.length
46277	107	8	AdamsMoultonStepInterpolator.java	initializeCoefficients	fGammaStar	Fraction[]	0	NIL-FOR	i < $.length
46278	154	8	AdamsMoultonStepInterpolator.java	interpolateDerivatives	THIS	AdamsMoultonStepInterpolator	0	NIL-FOR	i < $.interpolatedDerivatives.$.length
46278	154	8	AdamsMoultonStepInterpolator.java	interpolateDerivatives	i	int	0	NIL-FOR	$ < interpolatedDerivatives.length
46279	157	12	AdamsMoultonStepInterpolator.java	interpolateDerivatives	THIS	AdamsMoultonStepInterpolator	0	NIL-FOR	k < $.previousF.$.length
46279	157	12	AdamsMoultonStepInterpolator.java	interpolateDerivatives	k	int	0	NIL-FOR	$ < previousF.length
46280	162	12	AdamsMoultonStepInterpolator.java	interpolateDerivatives	THIS	AdamsMoultonStepInterpolator	0	NIL-FOR	l < $.neville.$.length
46280	162	12	AdamsMoultonStepInterpolator.java	interpolateDerivatives	l	int	0	NIL-FOR	$ < neville.length
46281	163	16	AdamsMoultonStepInterpolator.java	interpolateDerivatives	m	int	0	NIL-FOR	$ >= l
46281	163	16	AdamsMoultonStepInterpolator.java	interpolateDerivatives	l	int	0	NIL-FOR	m >= $
46282	232	8	AdamsMoultonStepInterpolator.java	interpolateState	THIS	AdamsMoultonStepInterpolator	0	NIL-FOR	j < $.interpolatedState.$.length
46282	232	8	AdamsMoultonStepInterpolator.java	interpolateState	j	int	0	NIL-FOR	$ < interpolatedState.length
46283	234	12	AdamsMoultonStepInterpolator.java	interpolateState	THIS	AdamsMoultonStepInterpolator	0	NIL-FOR	l < $.previousT.$.length
46283	234	12	AdamsMoultonStepInterpolator.java	interpolateState	l	int	0	NIL-FOR	$ < previousT.length
46284	251	8	AdamsMoultonStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	$ <= order
46284	251	8	AdamsMoultonStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	i <= $
46285	254	12	AdamsMoultonStepInterpolator.java	computeRollback	j	int	0	NIL-FOR	$ <= i
46285	254	12	AdamsMoultonStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	j <= $
46286	261	8	AdamsMoultonStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	$ <= order
46286	261	8	AdamsMoultonStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	i <= $
46287	267	8	AdamsMoultonStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	$ <= order
46287	267	8	AdamsMoultonStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	i <= $
46288	269	12	AdamsMoultonStepInterpolator.java	computeRollback	j	int	0	NIL-FOR	$ <= order
46288	269	12	AdamsMoultonStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	j <= $
1174	132	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize > $.maxStep
1174	132	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize < $.minStep
1174	132	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ > maxStep
1174	132	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ < minStep
1175	154	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecAbsoluteTolerance.$.length != y0.$.length
1175	154	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecAbsoluteTolerance != null
1175	154	6	AdaptiveStepsizeIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	vecAbsoluteTolerance.length != $.length
1176	163	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecRelativeTolerance != null
1176	163	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecRelativeTolerance.$.length != y0.$.length
1176	163	6	AdaptiveStepsizeIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	vecRelativeTolerance.length != $.length
1177	194	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	RET	$.initialStep > 0
46399	204	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
46399	204	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
46399	204	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
1178	213	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
46400	218	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
46400	218	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
46400	218	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
46401	225	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
46401	225	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
46401	225	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
1179	239	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < $.getMinStep()
1179	239	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ < getMinStep()
1180	242	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h > $.getMaxStep()
1180	242	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ > getMaxStep()
1181	245	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
1182	266	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	Math.abs(h) < $.minStep
1182	266	6	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	IntegratorException	Math.abs($) < minStep
1183	267	10	AdaptiveStepsizeIntegrator.java	filterStep	acceptSmall	boolean	1	DEF	$
1184	279	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	1	DEF	filteredH > $.maxStep
1184	279	6	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	1	DEF	$ > maxStep
1185	281	13	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	filteredH < -$.maxStep
1185	281	13	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	0	DEF	$ < -maxStep
1039	126	8	Beta.java	regularizedBeta	x	double	1	DEF	$ < 0
1039	126	8	Beta.java	regularizedBeta	x	double	1	DEF	Double.isNaN($)
1039	126	8	Beta.java	regularizedBeta	x	double	1	DEF	$ > 1
1039	126	8	Beta.java	regularizedBeta	a	double	1	DEF	$ <= 0.0
1039	126	8	Beta.java	regularizedBeta	a	double	1	DEF	Double.isNaN($)
1039	126	8	Beta.java	regularizedBeta	b	double	1	DEF	$ <= 0.0
1039	126	8	Beta.java	regularizedBeta	b	double	1	DEF	Double.isNaN($)
1040	130	15	Beta.java	regularizedBeta	x	double	1	DEF	$ > (a + 1.0) / (a + b + 2.0)
1040	130	15	Beta.java	regularizedBeta	a	double	1	DEF	x > ($ + 1.0) / ($ + b + 2.0)
1040	130	15	Beta.java	regularizedBeta	b	double	1	DEF	x > (a + 1.0) / (a + $ + 2.0)
1041	197	8	Beta.java	logBeta	a	double	1	DEF	Double.isNaN($)
1041	197	8	Beta.java	logBeta	a	double	1	DEF	$ <= 0.0
1041	197	8	Beta.java	logBeta	b	double	1	DEF	$ <= 0.0
1041	197	8	Beta.java	logBeta	b	double	1	DEF	Double.isNaN($)
373	89	8	BetaDistributionImpl.java	recomputeZ	THIS	BetaDistributionImpl	0	DEF	Double.isNaN($.z)
374	97	8	BetaDistributionImpl.java	density	x	Double	1	RET	$ < 0
374	97	8	BetaDistributionImpl.java	density	x	Double	1	RET	$ > 1
375	99	15	BetaDistributionImpl.java	density	x	Double	1	MathException:RET	$ == 0
376	100	12	BetaDistributionImpl.java	density	THIS	BetaDistributionImpl	0	MathException	$.alpha < 1
377	104	15	BetaDistributionImpl.java	density	x	Double	1	MathException:RET	$ == 1
378	105	12	BetaDistributionImpl.java	density	THIS	BetaDistributionImpl	0	MathException	$.beta < 1
379	118	8	BetaDistributionImpl.java	inverseCumulativeProbability	p	double	1	RET	$ == 0
380	120	15	BetaDistributionImpl.java	inverseCumulativeProbability	p	double	1	RET	$ == 1
381	144	8	BetaDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ <= 0
382	146	15	BetaDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ >= 1
606	80	8	BiDiagonalTransformer.java	BiDiagonalTransformer	m	int	1	DEF	$ >= n
606	80	8	BiDiagonalTransformer.java	BiDiagonalTransformer	n	int	1	DEF	m >= $
607	95	8	BiDiagonalTransformer.java	getU	THIS	BiDiagonalTransformer	0	DEF	$.cachedU == null
45949	105	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= p
45949	105	12	BiDiagonalTransformer.java	getU	p	int	0	NIL-FOR	k >= $
45950	110	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= diagOffset
45950	110	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	NIL-FOR	k >= $
608	113	16	BiDiagonalTransformer.java	getU	hK	double[]	0	DEF	$[k - diagOffset] != 0.0
608	113	16	BiDiagonalTransformer.java	getU	k	int	0	DEF	hK[$ - diagOffset] != 0.0
608	113	16	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	hK[k - $] != 0.0
45951	114	20	BiDiagonalTransformer.java	getU	j	int	0	NIL-FOR	$ < m
45951	114	20	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	j < $
45952	116	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
45952	116	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
45953	121	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
45953	121	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
609	127	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	$ > 0
610	144	8	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	$.cachedB == null
45954	149	12	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	NIL-FOR	i < $.main.$.length
45954	149	12	BiDiagonalTransformer.java	getB	i	int	0	NIL-FOR	$ < main.length
611	151	16	BiDiagonalTransformer.java	getB	m	int	1	DEF	$ < n
611	151	16	BiDiagonalTransformer.java	getB	n	int	1	DEF	m < $
612	152	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ > 0
613	156	20	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	i < $.main.$.length - 1
613	156	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ < main.length - 1
614	176	8	BiDiagonalTransformer.java	getV	THIS	BiDiagonalTransformer	0	DEF	$.cachedV == null
45955	186	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= p
45955	186	12	BiDiagonalTransformer.java	getV	p	int	0	NIL-FOR	k >= $
45956	191	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= diagOffset
45956	191	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	NIL-FOR	k >= $
615	194	16	BiDiagonalTransformer.java	getV	hK	double[]	0	DEF	$[k] != 0.0
615	194	16	BiDiagonalTransformer.java	getV	k	int	0	DEF	hK[$] != 0.0
45957	195	20	BiDiagonalTransformer.java	getV	j	int	0	NIL-FOR	$ < n
45957	195	20	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	j < $
45958	197	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
45958	197	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
45959	202	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
45959	202	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
616	208	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	DEF	$ > 0
45960	266	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	NIL-FOR	$ < n
45960	266	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	k < $
45961	270	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
45961	270	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
617	277	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	a	double	0	DEF	$ != 0.0
45962	279	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
45962	279	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
45963	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
45963	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
45964	286	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
45964	286	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
618	293	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	DEF	$ < n - 1
618	293	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	DEF	k < $ - 1
45965	296	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
45965	296	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
619	302	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	b	double	0	DEF	$ != 0.0
45966	304	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
45966	304	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
45967	307	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
45967	307	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
45968	311	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
45968	311	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
45969	330	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	NIL-FOR	$ < m
45969	330	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	k < $
45970	335	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
45970	335	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
620	341	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	a	double	0	DEF	$ != 0.0
45971	343	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
45971	343	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
45972	346	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
45972	346	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
45973	350	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
45973	350	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
621	356	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	DEF	$ < m - 1
621	356	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	DEF	k < $ - 1
45974	360	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
45974	360	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
622	366	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	b	double	0	DEF	$ != 0.0
45975	368	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
45975	368	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
45976	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
45976	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
45977	375	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
45977	375	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
423	102	8	BigMatrixImpl.java	BigMatrixImpl	rowDimension	int	0	IllegalArgumentException	$ <=0
423	102	8	BigMatrixImpl.java	BigMatrixImpl	columnDimension	int	0	IllegalArgumentException	$ <=0
424	143	8	BigMatrixImpl.java	BigMatrixImpl	copyArray	boolean	1	DEF	$
425	146	12	BigMatrixImpl.java	BigMatrixImpl	d	BigDecimal[][]	0	NullPointerException	$ == null
426	150	12	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	IllegalArgumentException	$ == 0
427	154	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	$ == 0
45560	157	12	BigMatrixImpl.java	BigMatrixImpl	r	int	0	NIL-FOR	$ < nRows
45560	157	12	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	r < $
428	158	16	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	IllegalArgumentException	d[r].length != nCols
428	158	16	BigMatrixImpl.java	BigMatrixImpl	r	int	0	IllegalArgumentException	d[$].length != nCols
428	158	16	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	d[r].length != $
428	158	16	BigMatrixImpl.java	BigMatrixImpl	d	BigDecimal[][]	0	IllegalArgumentException	$[r].length != nCols
429	180	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	IllegalArgumentException	$ == 0
430	185	8	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	$ == 0
45561	189	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
45561	189	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
431	190	12	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	IllegalArgumentException	d[row].length != nCols
431	190	12	BigMatrixImpl.java	BigMatrixImpl	row	int	0	IllegalArgumentException	d[$].length != nCols
431	190	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	d[row].length != $
431	190	12	BigMatrixImpl.java	BigMatrixImpl	d	double[][]	0	IllegalArgumentException	$[row].length != nCols
432	210	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	IllegalArgumentException	$ == 0
433	215	8	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	$ == 0
45562	219	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
45562	219	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
434	220	12	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	IllegalArgumentException	d[row].length != nCols
434	220	12	BigMatrixImpl.java	BigMatrixImpl	row	int	0	IllegalArgumentException	d[$].length != nCols
434	220	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	d[row].length != $
434	220	12	BigMatrixImpl.java	BigMatrixImpl	d	String[][]	0	IllegalArgumentException	$[row].length != nCols
45563	241	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
45563	241	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
435	268	12	BigMatrixImpl.java	add	rowCount	int	0	IllegalArgumentException	$ != m.getRowDimension()
435	268	12	BigMatrixImpl.java	add	columnCount	int	0	IllegalArgumentException	$ != m.getColumnDimension()
435	268	12	BigMatrixImpl.java	add	m	BigMatrix	0	IllegalArgumentException	rowCount != $.getRowDimension()
435	268	12	BigMatrixImpl.java	add	m	BigMatrix	0	IllegalArgumentException	columnCount != $.getColumnDimension()
45564	272	12	BigMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
45564	272	12	BigMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
45565	275	16	BigMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
45565	275	16	BigMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
436	293	8	BigMatrixImpl.java	add	rowCount	int	0	IllegalArgumentException	$ != m.getRowDimension()
436	293	8	BigMatrixImpl.java	add	columnCount	int	0	IllegalArgumentException	$ != m.getColumnDimension()
436	293	8	BigMatrixImpl.java	add	m	BigMatrixImpl	0	IllegalArgumentException	columnCount != $.getColumnDimension()
436	293	8	BigMatrixImpl.java	add	m	BigMatrixImpl	0	IllegalArgumentException	rowCount != $.getRowDimension()
45566	297	8	BigMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
45566	297	8	BigMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
45567	301	12	BigMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
45567	301	12	BigMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
437	321	12	BigMatrixImpl.java	subtract	rowCount	int	0	IllegalArgumentException	$ != m.getRowDimension()
437	321	12	BigMatrixImpl.java	subtract	columnCount	int	0	IllegalArgumentException	$ != m.getColumnDimension()
437	321	12	BigMatrixImpl.java	subtract	m	BigMatrix	0	IllegalArgumentException	columnCount != $.getColumnDimension()
437	321	12	BigMatrixImpl.java	subtract	m	BigMatrix	0	IllegalArgumentException	rowCount != $.getRowDimension()
45568	325	12	BigMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
45568	325	12	BigMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
45569	328	16	BigMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
45569	328	16	BigMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
438	346	8	BigMatrixImpl.java	subtract	rowCount	int	0	IllegalArgumentException	$ != m.getRowDimension()
438	346	8	BigMatrixImpl.java	subtract	columnCount	int	0	IllegalArgumentException	$ != m.getColumnDimension()
438	346	8	BigMatrixImpl.java	subtract	m	BigMatrixImpl	0	IllegalArgumentException	columnCount != $.getColumnDimension()
438	346	8	BigMatrixImpl.java	subtract	m	BigMatrixImpl	0	IllegalArgumentException	rowCount != $.getRowDimension()
45570	350	8	BigMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
45570	350	8	BigMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
45571	354	12	BigMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
45571	354	12	BigMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
45572	371	8	BigMatrixImpl.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
45572	371	8	BigMatrixImpl.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
45573	374	12	BigMatrixImpl.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
45573	374	12	BigMatrixImpl.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
45574	390	8	BigMatrixImpl.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
45574	390	8	BigMatrixImpl.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
45575	393	12	BigMatrixImpl.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
45575	393	12	BigMatrixImpl.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
439	411	12	BigMatrixImpl.java	multiply	THIS	BigMatrixImpl	0	IllegalArgumentException	$.getColumnDimension() != m.getRowDimension()
439	411	12	BigMatrixImpl.java	multiply	m	BigMatrix	0	IllegalArgumentException	this.getColumnDimension() != $.getRowDimension()
45576	418	12	BigMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
45576	418	12	BigMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
45577	421	16	BigMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
45577	421	16	BigMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
45578	423	20	BigMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
45578	423	20	BigMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
440	441	8	BigMatrixImpl.java	multiply	THIS	BigMatrixImpl	0	IllegalArgumentException	$.getColumnDimension() != m.getRowDimension()
440	441	8	BigMatrixImpl.java	multiply	m	BigMatrixImpl	0	IllegalArgumentException	this.getColumnDimension() != $.getRowDimension()
45579	448	8	BigMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
45579	448	8	BigMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
45580	451	12	BigMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
45580	451	12	BigMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
45581	453	16	BigMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
45581	453	16	BigMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
45582	496	8	BigMatrixImpl.java	getDataAsDoubleArray	i	int	0	NIL-FOR	$ < nRows
45582	496	8	BigMatrixImpl.java	getDataAsDoubleArray	nRows	int	0	NIL-FOR	i < $
45583	497	12	BigMatrixImpl.java	getDataAsDoubleArray	j	int	0	NIL-FOR	$ < nCols
45583	497	12	BigMatrixImpl.java	getDataAsDoubleArray	nCols	int	0	NIL-FOR	j < $
45584	561	8	BigMatrixImpl.java	getNorm	THIS	BigMatrixImpl	0	NIL-FOR	col < $.getColumnDimension()
45584	561	8	BigMatrixImpl.java	getNorm	col	int	0	NIL-FOR	$ < this.getColumnDimension()
45585	563	12	BigMatrixImpl.java	getNorm	THIS	BigMatrixImpl	0	NIL-FOR	row < $.getRowDimension()
45585	563	12	BigMatrixImpl.java	getNorm	row	int	0	NIL-FOR	$ < this.getRowDimension()
441	589	8	BigMatrixImpl.java	getSubMatrix	startRow	int	0	MatrixIndexException	$ > endRow
441	589	8	BigMatrixImpl.java	getSubMatrix	endRow	int	0	MatrixIndexException	startRow > $
442	596	8	BigMatrixImpl.java	getSubMatrix	startColumn	int	0	MatrixIndexException	$ > endColumn
442	596	8	BigMatrixImpl.java	getSubMatrix	endColumn	int	0	MatrixIndexException	startColumn > $
45586	603	8	BigMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
45586	603	8	BigMatrixImpl.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
443	627	8	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
443	627	8	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
443	627	8	BigMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
444	628	12	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	selectedRows.$.length == 0
444	628	12	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	MatrixIndexException	$.length == 0
45587	637	12	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	NIL-FOR	i < selectedRows.$.length
45587	637	12	BigMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
45587	637	12	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
45588	640	16	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	NIL-FOR	j < selectedColumns.$.length
45588	640	16	BigMatrixImpl.java	getSubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
45588	640	16	BigMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
445	690	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	IllegalArgumentException	$ == 0
446	693	8	BigMatrixImpl.java	setSubMatrix	nCols	int	0	IllegalArgumentException	$ == 0
45589	697	8	BigMatrixImpl.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
45589	697	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
447	698	12	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	0	IllegalArgumentException	subMatrix[r].length != nCols
447	698	12	BigMatrixImpl.java	setSubMatrix	r	int	0	IllegalArgumentException	subMatrix[$].length != nCols
447	698	12	BigMatrixImpl.java	setSubMatrix	nCols	int	0	IllegalArgumentException	subMatrix[r].length != $
447	698	12	BigMatrixImpl.java	setSubMatrix	subMatrix	BigDecimal[][]	0	IllegalArgumentException	$[r].length != nCols
448	703	8	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	1	DEF	$.data == null
449	704	12	BigMatrixImpl.java	setSubMatrix	row	int	0	DEF	$ > 0
450	708	12	BigMatrixImpl.java	setSubMatrix	column	int	0	DEF	$ > 0
45590	720	8	BigMatrixImpl.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
45590	720	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
45591	756	8	BigMatrixImpl.java	getColumnMatrix	row	int	0	NIL-FOR	$ < nRows
45591	756	8	BigMatrixImpl.java	getColumnMatrix	nRows	int	0	NIL-FOR	row < $
45592	795	8	BigMatrixImpl.java	getRowAsDoubleArray	i	int	0	NIL-FOR	$<ncols
45592	795	8	BigMatrixImpl.java	getRowAsDoubleArray	ncols	int	0	NIL-FOR	i<$
45593	815	8	BigMatrixImpl.java	getColumn	i	int	0	NIL-FOR	$ < nRows
45593	815	8	BigMatrixImpl.java	getColumn	nRows	int	0	NIL-FOR	i < $
45594	836	8	BigMatrixImpl.java	getColumnAsDoubleArray	i	int	0	NIL-FOR	$<nrows
45594	836	8	BigMatrixImpl.java	getColumnAsDoubleArray	nrows	int	0	NIL-FOR	i<$
45595	899	8	BigMatrixImpl.java	transpose	row	int	0	NIL-FOR	$ < nRows
45595	899	8	BigMatrixImpl.java	transpose	nRows	int	0	NIL-FOR	row < $
45596	901	12	BigMatrixImpl.java	transpose	col	int	0	NIL-FOR	$ < nCols
45596	901	12	BigMatrixImpl.java	transpose	nCols	int	0	NIL-FOR	col < $
451	925	8	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	0	NonSquareMatrixException	$.isSquare()
452	928	8	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	1	RET	$.isSingular()
45597	932	12	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
45597	932	12	BigMatrixImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < this.getRowDimension()
453	952	8	BigMatrixImpl.java	isSingular	THIS	BigMatrixImpl	1	RET	$.lu == null
454	991	8	BigMatrixImpl.java	getTrace	THIS	BigMatrixImpl	0	IllegalArgumentException	$.isSquare()
45598	995	8	BigMatrixImpl.java	getTrace	THIS	BigMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
45598	995	8	BigMatrixImpl.java	getTrace	i	int	0	NIL-FOR	$ < this.getRowDimension()
455	1009	8	BigMatrixImpl.java	operate	THIS	BigMatrixImpl	0	IllegalArgumentException	v.$.length != $.getColumnDimension()
455	1009	8	BigMatrixImpl.java	operate	v	BigDecimal[]	0	IllegalArgumentException	$.length != this.getColumnDimension()
45599	1015	8	BigMatrixImpl.java	operate	row	int	0	NIL-FOR	$ < nRows
45599	1015	8	BigMatrixImpl.java	operate	nRows	int	0	NIL-FOR	row < $
45600	1017	12	BigMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < nCols
45600	1017	12	BigMatrixImpl.java	operate	nCols	int	0	NIL-FOR	i < $
45601	1034	8	BigMatrixImpl.java	operate	THIS	BigMatrixImpl	0	NIL-FOR	i < bd.$.length
45601	1034	8	BigMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < bd.length
45601	1034	8	BigMatrixImpl.java	operate	bd	BigDecimal[]	0	NIL-FOR	i < $.length
456	1049	8	BigMatrixImpl.java	preMultiply	THIS	BigMatrixImpl	0	IllegalArgumentException	v.$.length != nRows
456	1049	8	BigMatrixImpl.java	preMultiply	nRows	int	0	IllegalArgumentException	v.length != $
456	1049	8	BigMatrixImpl.java	preMultiply	v	BigDecimal[]	0	IllegalArgumentException	$.length != nRows
45602	1054	8	BigMatrixImpl.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
45602	1054	8	BigMatrixImpl.java	preMultiply	nCols	int	0	NIL-FOR	col < $
45603	1056	12	BigMatrixImpl.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
45603	1056	12	BigMatrixImpl.java	preMultiply	nRows	int	0	NIL-FOR	i < $
457	1077	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	IllegalArgumentException	b.$.length != nRows
457	1077	8	BigMatrixImpl.java	solve	nRows	int	0	IllegalArgumentException	b.length != $
457	1077	8	BigMatrixImpl.java	solve	b	BigDecimal[]	0	IllegalArgumentException	$.length != nRows
45604	1083	8	BigMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRows
45604	1083	8	BigMatrixImpl.java	solve	nRows	int	0	NIL-FOR	row < $
45605	1102	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	NIL-FOR	i < bd.$.length
45605	1102	8	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < bd.length
45605	1102	8	BigMatrixImpl.java	solve	bd	BigDecimal[]	0	NIL-FOR	i < $.length
458	1120	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	IllegalArgumentException	b.getRowDimension() != $.getRowDimension()
458	1120	8	BigMatrixImpl.java	solve	b	BigMatrix	0	IllegalArgumentException	$.getRowDimension() != this.getRowDimension()
459	1123	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	NonSquareMatrixException	$.isSquare()
460	1126	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	SingularMatrixException	$.isSingular()
45606	1136	8	BigMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRowB
45606	1136	8	BigMatrixImpl.java	solve	nRowB	int	0	NIL-FOR	row < $
45607	1138	12	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nColB
45607	1138	12	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	col < $
45608	1144	8	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nCol
45608	1144	8	BigMatrixImpl.java	solve	nCol	int	0	NIL-FOR	col < $
45609	1145	12	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < nCol
45609	1145	12	BigMatrixImpl.java	solve	nCol	int	0	NIL-FOR	i < $
45610	1148	16	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
45610	1148	16	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
45611	1155	8	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ >= 0
45612	1158	12	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
45612	1158	12	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
45613	1161	12	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < col
45613	1161	12	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	i < $
45614	1164	16	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
45614	1164	16	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
461	1196	8	BigMatrixImpl.java	luDecompose	nRows	int	0	NonSquareMatrixException	$ != nCols
461	1196	8	BigMatrixImpl.java	luDecompose	nCols	int	0	NonSquareMatrixException	nRows != $
45615	1203	8	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
45615	1203	8	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
45616	1209	8	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	$ < nCols
45616	1209	8	BigMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	col < $
45617	1214	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < col
45617	1214	12	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	row < $
45618	1217	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < row
45618	1217	16	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	i < $
45619	1226	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
45619	1226	12	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
45620	1229	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < col
45620	1229	16	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	i < $
462	1235	16	BigMatrixImpl.java	luDecompose	sum	BigDecimal	0	DEF	$.abs().compareTo(largest) == 1
462	1235	16	BigMatrixImpl.java	luDecompose	largest	BigDecimal	0	DEF	sum.abs().compareTo($) == 1
463	1242	12	BigMatrixImpl.java	luDecompose	THIS	BigMatrixImpl	0	SingularMatrixException	$.lu[max][col].abs().compareTo(TOO_SMALL) <= 0
463	1242	12	BigMatrixImpl.java	luDecompose	max	int	0	SingularMatrixException	lu[$][col].abs().compareTo(TOO_SMALL) <= 0
463	1242	12	BigMatrixImpl.java	luDecompose	col	int	0	SingularMatrixException	lu[max][$].abs().compareTo(TOO_SMALL) <= 0
464	1248	12	BigMatrixImpl.java	luDecompose	max	int	0	DEF	$ != col
464	1248	12	BigMatrixImpl.java	luDecompose	col	int	0	DEF	max != $
45621	1250	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < nCols
45621	1250	16	BigMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	i < $
45622	1263	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
45622	1263	12	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
465	1279	8	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	DEF	$.data != null
45623	1280	12	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	NIL-FOR	i < $.data.$.length
45623	1280	12	BigMatrixImpl.java	toString	i	int	0	NIL-FOR	$ < data.length
466	1281	16	BigMatrixImpl.java	toString	i	int	0	DEF	$ > 0
45624	1285	16	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	NIL-FOR	j < $.data[0].length
45624	1285	16	BigMatrixImpl.java	toString	j	int	0	NIL-FOR	$ < data[0].length
467	1286	20	BigMatrixImpl.java	toString	j	int	0	DEF	$ > 0
468	1308	8	BigMatrixImpl.java	equals	THIS	BigMatrixImpl	0	RET	object == $
468	1308	8	BigMatrixImpl.java	equals	object	Object	0	RET	$ == this
469	1311	8	BigMatrixImpl.java	equals	object	Object	0	RET	$ instanceof BigMatrixImpl == false
470	1317	8	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	$.getColumnDimension() != nCols
470	1317	8	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	$.getRowDimension() != nRows
470	1317	8	BigMatrixImpl.java	equals	nRows	int	0	RET	m.getRowDimension() != $
470	1317	8	BigMatrixImpl.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
45625	1320	8	BigMatrixImpl.java	equals	row	int	0	NIL-FOR	$ < nRows
45625	1320	8	BigMatrixImpl.java	equals	nRows	int	0	NIL-FOR	row < $
45626	1322	12	BigMatrixImpl.java	equals	col	int	0	NIL-FOR	$ < nCols
45626	1322	12	BigMatrixImpl.java	equals	nCols	int	0	NIL-FOR	col < $
471	1323	16	BigMatrixImpl.java	equals	col	int	0	RET	dataRow[$].equals(m.getEntry(row, $))
471	1323	16	BigMatrixImpl.java	equals	dataRow	BigDecimal[]	0	RET	$[col].equals(m.getEntry(row, col))
471	1323	16	BigMatrixImpl.java	equals	row	int	0	RET	dataRow[col].equals(m.getEntry($, col))
471	1323	16	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	dataRow[col].equals($.getEntry(row, col))
45627	1342	8	BigMatrixImpl.java	hashCode	row	int	0	NIL-FOR	$ < nRows
45627	1342	8	BigMatrixImpl.java	hashCode	nRows	int	0	NIL-FOR	row < $
45628	1344	12	BigMatrixImpl.java	hashCode	col	int	0	NIL-FOR	$ < nCols
45628	1344	12	BigMatrixImpl.java	hashCode	nCols	int	0	NIL-FOR	col < $
472	1382	8	BigMatrixImpl.java	getLUMatrix	THIS	BigMatrixImpl	0	DEF	$.lu == null
45629	1417	8	BigMatrixImpl.java	copyOut	i	int	0	NIL-FOR	$ < nRows
45629	1417	8	BigMatrixImpl.java	copyOut	nRows	int	0	NIL-FOR	i < $
45630	1446	8	BigMatrixImpl.java	copyIn	i	int	0	NIL-FOR	$ < nRows
45630	1446	8	BigMatrixImpl.java	copyIn	nRows	int	0	NIL-FOR	i < $
45631	1449	12	BigMatrixImpl.java	copyIn	j	int	0	NIL-FOR	$ < nCols
45631	1449	12	BigMatrixImpl.java	copyIn	nCols	int	0	NIL-FOR	j < $
45632	1466	8	BigMatrixImpl.java	copyIn	i	int	0	NIL-FOR	$ < nRows
45632	1466	8	BigMatrixImpl.java	copyIn	nRows	int	0	NIL-FOR	i < $
45633	1469	12	BigMatrixImpl.java	copyIn	j	int	0	NIL-FOR	$ < nCols
45633	1469	12	BigMatrixImpl.java	copyIn	nCols	int	0	NIL-FOR	j < $
473	1482	8	BigMatrixImpl.java	checkRowIndex	THIS	BigMatrixImpl	0	MatrixIndexException	row >= $.getRowDimension()
473	1482	8	BigMatrixImpl.java	checkRowIndex	row	int	0	MatrixIndexException	$ >= getRowDimension()
473	1482	8	BigMatrixImpl.java	checkRowIndex	row	int	0	MatrixIndexException	$ < 0
474	1495	8	BigMatrixImpl.java	checkColumnIndex	THIS	BigMatrixImpl	0	MatrixIndexException	column >= $.getColumnDimension()
474	1495	8	BigMatrixImpl.java	checkColumnIndex	column	int	0	MatrixIndexException	$ >= getColumnDimension()
474	1495	8	BigMatrixImpl.java	checkColumnIndex	column	int	0	MatrixIndexException	$ < 0
333	78	8	BinomialDistributionImpl.java	setNumberOfTrials	trials	int	0	IllegalArgumentException	$ < 0
334	91	8	BinomialDistributionImpl.java	setProbabilityOfSuccess	p	double	0	IllegalArgumentException	$ > 1.0
334	91	8	BinomialDistributionImpl.java	setProbabilityOfSuccess	p	double	0	IllegalArgumentException	$ < 0.0
335	130	8	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
336	132	15	BinomialDistributionImpl.java	cumulativeProbability	THIS	BinomialDistributionImpl	1	DEF	x >= $.getNumberOfTrials()
336	132	15	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= getNumberOfTrials()
337	152	8	BinomialDistributionImpl.java	probability	THIS	BinomialDistributionImpl	1	DEF	x > $.getNumberOfTrials()
337	152	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ < 0
337	152	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ > getNumberOfTrials()
338	179	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
339	182	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
46440	89	8	BisectionSolver.java	solve	THIS	BisectionSolver	0	NIL-WHILE	i < $.maximalIterationCount
46440	89	8	BisectionSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1285	94	12	BisectionSolver.java	solve	fm	double	1	DEF	$ * fmin > 0.0
1285	94	12	BisectionSolver.java	solve	fmin	double	1	DEF	fm * $ > 0.0
1286	102	12	BisectionSolver.java	solve	THIS	BisectionSolver	0	RET	Math.abs(max - min) <= $.absoluteAccuracy
1286	102	12	BisectionSolver.java	solve	min	double	0	RET	Math.abs(max - $) <= absoluteAccuracy
1286	102	12	BisectionSolver.java	solve	max	double	0	RET	Math.abs($ - min) <= absoluteAccuracy
46450	115	8	BrentMinimizer.java	localMin	THIS	BrentMinimizer	0	NIL-WHILE	count < $.maximalIterationCount
46450	115	8	BrentMinimizer.java	localMin	count	int	0	NIL-WHILE	$ < maximalIterationCount
1323	121	12	BrentMinimizer.java	localMin	m	double	1	DEF	Math.abs(x - $) > t2 - 0.5 * (b - a)
1323	121	12	BrentMinimizer.java	localMin	t2	double	1	DEF	Math.abs(x - m) > $ - 0.5 * (b - a)
1323	121	12	BrentMinimizer.java	localMin	x	double	1	DEF	Math.abs($ - m) > t2 - 0.5 * (b - a)
1323	121	12	BrentMinimizer.java	localMin	a	double	1	DEF	Math.abs(x - m) > t2 - 0.5 * (b - $)
1323	121	12	BrentMinimizer.java	localMin	b	double	1	DEF	Math.abs(x - m) > t2 - 0.5 * ($ - a)
1324	128	16	BrentMinimizer.java	localMin	tol	double	0	DEF	Math.abs(e) > $
1324	128	16	BrentMinimizer.java	localMin	e	double	0	DEF	Math.abs($) > tol
1325	134	20	BrentMinimizer.java	localMin	q	double	1	DEF	$ > 0
1326	144	16	BrentMinimizer.java	localMin	p	double	1	DEF	Math.abs($) < Math.abs(0.5 * q * r)
1326	144	16	BrentMinimizer.java	localMin	p	double	1	DEF	$ < q * (b - x)
1326	144	16	BrentMinimizer.java	localMin	p	double	1	DEF	$ < q * (a - x)
1326	144	16	BrentMinimizer.java	localMin	q	double	1	DEF	Math.abs(p) < Math.abs(0.5 * $ * r)
1326	144	16	BrentMinimizer.java	localMin	q	double	1	DEF	p < $ * (b - x)
1326	144	16	BrentMinimizer.java	localMin	q	double	1	DEF	p < $ * (a - x)
1326	144	16	BrentMinimizer.java	localMin	r	double	1	DEF	Math.abs(p) < Math.abs(0.5 * q * $)
1326	144	16	BrentMinimizer.java	localMin	x	double	1	DEF	p < q * (b - $)
1326	144	16	BrentMinimizer.java	localMin	x	double	1	DEF	p < q * (a - $)
1326	144	16	BrentMinimizer.java	localMin	a	double	1	DEF	p < q * ($ - x)
1326	144	16	BrentMinimizer.java	localMin	b	double	1	DEF	p < q * ($ - x)
1327	150	20	BrentMinimizer.java	localMin	u	double	0	DEF	($ - a) < t2
1327	150	20	BrentMinimizer.java	localMin	u	double	0	DEF	(b - $) < t2
1327	150	20	BrentMinimizer.java	localMin	t2	double	0	DEF	(u - a) < $
1327	150	20	BrentMinimizer.java	localMin	t2	double	0	DEF	(b - u) < $
1327	150	20	BrentMinimizer.java	localMin	a	double	0	DEF	(u - $) < t2
1327	150	20	BrentMinimizer.java	localMin	b	double	0	DEF	($ - u) < t2
1328	163	16	BrentMinimizer.java	localMin	fu	double	1	DEF	$ <= fx
1328	163	16	BrentMinimizer.java	localMin	fx	double	1	DEF	fu <= $
1329	164	20	BrentMinimizer.java	localMin	u	double	1	DEF	$ < x
1329	164	20	BrentMinimizer.java	localMin	x	double	1	DEF	u < $
1330	176	20	BrentMinimizer.java	localMin	u	double	1	DEF	$ < x
1330	176	20	BrentMinimizer.java	localMin	x	double	1	DEF	u < $
1331	181	20	BrentMinimizer.java	localMin	fu	double	1	DEF	$ <= fw
1331	181	20	BrentMinimizer.java	localMin	x	double	1	DEF	w == $
1331	181	20	BrentMinimizer.java	localMin	w	double	1	DEF	$ == x
1331	181	20	BrentMinimizer.java	localMin	fw	double	1	DEF	fu <= $
1332	186	27	BrentMinimizer.java	localMin	fu	double	0	DEF	$ <= fv
1332	186	27	BrentMinimizer.java	localMin	x	double	0	DEF	v == $
1332	186	27	BrentMinimizer.java	localMin	v	double	0	DEF	$ == x
1332	186	27	BrentMinimizer.java	localMin	v	double	0	DEF	$ == w
1332	186	27	BrentMinimizer.java	localMin	w	double	0	DEF	v == $
1332	186	27	BrentMinimizer.java	localMin	fv	double	0	DEF	fu <= $
1302	102	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yInitial) <= $.functionValueAccuracy
1302	102	8	BrentSolver.java	solve	yInitial	double	0	RET	Math.abs($) <= functionValueAccuracy
1303	109	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yMin) <= $.functionValueAccuracy
1303	109	8	BrentSolver.java	solve	yMin	double	0	RET	Math.abs($) <= functionValueAccuracy
1304	115	8	BrentSolver.java	solve	yInitial	double	0	RET	$ * yMin < 0
1304	115	8	BrentSolver.java	solve	yMin	double	0	RET	yInitial * $ < 0
1305	121	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yMax) <= $.functionValueAccuracy
1305	121	8	BrentSolver.java	solve	yMax	double	0	RET	Math.abs($) <= functionValueAccuracy
1306	127	8	BrentSolver.java	solve	yInitial	double	0	RET	$ * yMax < 0
1306	127	8	BrentSolver.java	solve	yMax	double	0	RET	yInitial * $ < 0
1307	168	8	BrentSolver.java	solve	sign	double	1	DEF	$ > 0
1308	170	12	BrentSolver.java	solve	THIS	BrentSolver	1	DEF	Math.abs(yMin) <= $.functionValueAccuracy
1308	170	12	BrentSolver.java	solve	yMin	double	1	DEF	Math.abs($) <= functionValueAccuracy
1309	173	19	BrentSolver.java	solve	THIS	BrentSolver	1	DEF	Math.abs(yMax) <= $.functionValueAccuracy
1309	173	19	BrentSolver.java	solve	yMax	double	1	DEF	Math.abs($) <= functionValueAccuracy
1310	183	15	BrentSolver.java	solve	sign	double	1	DEF	$ < 0
1311	188	12	BrentSolver.java	solve	yMin	double	1	DEF	$ == 0.0
46449	225	8	BrentSolver.java	solve	THIS	BrentSolver	0	NIL-WHILE	i < $.maximalIterationCount
46449	225	8	BrentSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1312	226	12	BrentSolver.java	solve	y1	double	0	DEF	Math.abs(y2) < Math.abs($)
1312	226	12	BrentSolver.java	solve	y2	double	0	DEF	Math.abs($) < Math.abs(y1)
1313	235	12	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(y1) <= $.functionValueAccuracy
1313	235	12	BrentSolver.java	solve	y1	double	0	RET	Math.abs($) <= functionValueAccuracy
1314	245	12	BrentSolver.java	solve	dx	double	0	RET	Math.abs($) <= tolerance
1314	245	12	BrentSolver.java	solve	tolerance	double	0	RET	Math.abs(dx) <= $
1315	249	12	BrentSolver.java	solve	tolerance	double	1	DEF	Math.abs(oldDelta) < $
1315	249	12	BrentSolver.java	solve	oldDelta	double	1	DEF	Math.abs($) < tolerance
1315	249	12	BrentSolver.java	solve	y0	double	1	DEF	Math.abs($) <= Math.abs(y1)
1315	249	12	BrentSolver.java	solve	y1	double	1	DEF	Math.abs(y0) <= Math.abs($)
1316	261	16	BrentSolver.java	solve	x0	double	1	DEF	$ == x2
1316	261	16	BrentSolver.java	solve	x2	double	1	DEF	x0 == $
1317	272	16	BrentSolver.java	solve	p	double	1	DEF	$ > 0.0
1318	277	16	BrentSolver.java	solve	p	double	1	DEF	2.0 * $ >= 1.5 * dx * p1 - Math.abs(tolerance * p1)
1318	277	16	BrentSolver.java	solve	p	double	1	DEF	$ >= Math.abs(0.5 * oldDelta * p1)
1318	277	16	BrentSolver.java	solve	p1	double	1	DEF	2.0 * p >= 1.5 * dx * $ - Math.abs(tolerance * $)
1318	277	16	BrentSolver.java	solve	p1	double	1	DEF	p >= Math.abs(0.5 * oldDelta * $)
1318	277	16	BrentSolver.java	solve	dx	double	1	DEF	2.0 * p >= 1.5 * $ * p1 - Math.abs(tolerance * p1)
1318	277	16	BrentSolver.java	solve	tolerance	double	1	DEF	2.0 * p >= 1.5 * dx * p1 - Math.abs($ * p1)
1318	277	16	BrentSolver.java	solve	oldDelta	double	1	DEF	p >= Math.abs(0.5 * $ * p1)
1319	293	12	BrentSolver.java	solve	tolerance	double	1	DEF	Math.abs(delta) > $
1319	293	12	BrentSolver.java	solve	delta	double	1	DEF	Math.abs($) > tolerance
1320	295	19	BrentSolver.java	solve	dx	double	1	DEF	$ > 0.0
1321	297	19	BrentSolver.java	solve	dx	double	0	DEF	$ <= 0.0
1322	301	12	BrentSolver.java	solve	y1	double	0	DEF	($ > 0) == (y2 > 0)
1322	301	12	BrentSolver.java	solve	y2	double	0	DEF	(y1 > 0) == ($ > 0)
364	99	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ > 1.0
364	99	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ < 0.0
365	102	15	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
366	104	16	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
367	126	8	CauchyDistributionImpl.java	setScale	s	double	0	IllegalArgumentException	$ <= 0.0
368	145	8	CauchyDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < .5
369	166	8	CauchyDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
370	186	8	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
371	188	15	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > .5
862	65	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	IllegalArgumentException	expected.$.length != observed.$.length
862	65	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	IllegalArgumentException	expected.$.length < 2
862	65	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	IllegalArgumentException	$.length != observed.length
862	65	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	IllegalArgumentException	$.length < 2
862	65	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	IllegalArgumentException	expected.length != $.length
863	69	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isPositive(expected)
863	69	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isNonNegative(observed)
863	69	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	IllegalArgumentException	isPositive($)
863	69	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	IllegalArgumentException	isNonNegative($)
46102	75	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
46102	75	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
46102	75	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
864	81	8	ChiSquareTestImpl.java	chiSquare	sumExpected	double	0	DEF	Math.abs($ - sumObserved) > 10E-6
864	81	8	ChiSquareTestImpl.java	chiSquare	sumObserved	double	0	DEF	Math.abs(sumExpected - $) > 10E-6
46103	87	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
46103	87	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
46103	87	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
865	88	12	ChiSquareTestImpl.java	chiSquare	rescale	boolean	1	DEF	$
866	134	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	IllegalArgumentException	$ <= 0
866	134	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	IllegalArgumentException	$ > 0.5
46104	156	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
46104	156	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
46105	157	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
46105	157	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
46106	167	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
46106	167	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
46107	168	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
46107	168	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
867	201	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	IllegalArgumentException	$ > 0.5
867	201	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	IllegalArgumentException	$ <= 0
868	218	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	IllegalArgumentException	observed1.$.length < 2
868	218	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	IllegalArgumentException	observed1.$.length != observed2.$.length
868	218	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	IllegalArgumentException	$.length < 2
868	218	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	IllegalArgumentException	$.length != observed2.length
868	218	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	0	IllegalArgumentException	observed1.length != $.length
869	223	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isNonNegative(observed2)
869	223	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isNonNegative(observed1)
869	223	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	IllegalArgumentException	isNonNegative($)
869	223	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	0	IllegalArgumentException	isNonNegative($)
46108	232	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
46108	232	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
46108	232	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
870	237	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum1	long	0	IllegalArgumentException	$ * countSum2 == 0
870	237	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum2	long	0	IllegalArgumentException	countSum1 * $ == 0
871	243	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	0	DEF	$
46109	251	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
46109	251	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
46109	251	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
872	252	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	IllegalArgumentException	observed1[$] == 0
872	252	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	IllegalArgumentException	observed2[$] == 0
872	252	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	1	IllegalArgumentException	$[i] == 0
872	252	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	1	IllegalArgumentException	$[i] == 0
873	258	16	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	1	DEF	$
874	296	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	IllegalArgumentException	$ <= 0
874	296	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	IllegalArgumentException	$ > 0.5
875	313	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	IllegalArgumentException	in.$.length < 2
875	313	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	IllegalArgumentException	$.length < 2
876	317	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	IllegalArgumentException	in[0].length < 2
876	317	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	IllegalArgumentException	$[0].length < 2
877	321	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isRectangular(in)
877	321	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	IllegalArgumentException	isRectangular($)
878	325	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isNonNegative(in)
878	325	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	IllegalArgumentException	isNonNegative($)
46110	342	8	ChiSquareTestImpl.java	isRectangular	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
46110	342	8	ChiSquareTestImpl.java	isRectangular	i	int	0	NIL-FOR	$ < in.length
46110	342	8	ChiSquareTestImpl.java	isRectangular	in	long[][]	0	NIL-FOR	i < $.length
879	343	12	ChiSquareTestImpl.java	isRectangular	THIS	ChiSquareTestImpl	0	RET	in[i].length != in[0].length
879	343	12	ChiSquareTestImpl.java	isRectangular	i	int	0	RET	in[$].length != in[0].length
879	343	12	ChiSquareTestImpl.java	isRectangular	in	long[][]	0	RET	$[i].length != $[0].length
46111	359	8	ChiSquareTestImpl.java	isPositive	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
46111	359	8	ChiSquareTestImpl.java	isPositive	i	int	0	NIL-FOR	$ < in.length
46111	359	8	ChiSquareTestImpl.java	isPositive	in	double[]	0	NIL-FOR	i < $.length
880	360	12	ChiSquareTestImpl.java	isPositive	i	int	0	RET	in[$] <= 0
880	360	12	ChiSquareTestImpl.java	isPositive	in	double[]	0	RET	$[i] <= 0
46112	376	8	ChiSquareTestImpl.java	isNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
46112	376	8	ChiSquareTestImpl.java	isNonNegative	i	int	0	NIL-FOR	$ < in.length
46112	376	8	ChiSquareTestImpl.java	isNonNegative	in	long[]	0	NIL-FOR	i < $.length
881	377	12	ChiSquareTestImpl.java	isNonNegative	i	int	0	RET	in[$] < 0
881	377	12	ChiSquareTestImpl.java	isNonNegative	in	long[]	0	RET	$[i] < 0
46113	393	8	ChiSquareTestImpl.java	isNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
46113	393	8	ChiSquareTestImpl.java	isNonNegative	i	int	0	NIL-FOR	$ < in.length
46113	393	8	ChiSquareTestImpl.java	isNonNegative	in	long[][]	0	NIL-FOR	i < $.length
46114	394	12	ChiSquareTestImpl.java	isNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	j < in[i].length
46114	394	12	ChiSquareTestImpl.java	isNonNegative	j	int	0	NIL-FOR	$ < in[i].length
46114	394	12	ChiSquareTestImpl.java	isNonNegative	i	int	0	NIL-FOR	j < in[$].length
46114	394	12	ChiSquareTestImpl.java	isNonNegative	in	long[][]	0	NIL-FOR	j < $[i].length
882	395	16	ChiSquareTestImpl.java	isNonNegative	j	int	0	RET	in[i][$] < 0
882	395	16	ChiSquareTestImpl.java	isNonNegative	i	int	0	RET	in[$][j] < 0
882	395	16	ChiSquareTestImpl.java	isNonNegative	in	long[][]	0	RET	$[i][j] < 0
360	110	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
361	113	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
362	147	8	ChiSquaredDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
363	172	8	ChiSquaredDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
623	108	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
45978	119	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
45978	119	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
624	124	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	THIS	CholeskyDecompositionImpl	0	NotPositiveDefiniteMatrixException	$.lTData[i][i] < absolutePositivityThreshold
624	124	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NotPositiveDefiniteMatrixException	lTData[$][$] < absolutePositivityThreshold
624	124	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	absolutePositivityThreshold	double	0	NotPositiveDefiniteMatrixException	lTData[i][i] < $
45979	129	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	j	int	0	NIL-FOR	$ < order
45979	129	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	j < $
625	135	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	lIJ	double	0	NotSymmetricMatrixException	Math.abs($ - lJI) > maxDelta
625	135	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	lJI	double	0	NotSymmetricMatrixException	Math.abs(lIJ - $) > maxDelta
625	135	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	maxDelta	double	0	NotSymmetricMatrixException	Math.abs(lIJ - lJI) > $
45980	143	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
45980	143	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
45981	149	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	q	int	0	NIL-FOR	$ > i
45981	149	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	q > $
45982	152	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	p	int	0	NIL-FOR	$ < order
45982	152	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	p < $
626	163	8	CholeskyDecompositionImpl.java	getL	THIS	CholeskyDecompositionImpl	0	DEF	$.cachedL == null
627	172	8	CholeskyDecompositionImpl.java	getLT	THIS	CholeskyDecompositionImpl	0	DEF	$.cachedLT == null
45983	184	8	CholeskyDecompositionImpl.java	getDeterminant	THIS	CholeskyDecompositionImpl	0	NIL-FOR	i < $.lTData.$.length
45983	184	8	CholeskyDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < lTData.length
46398	96	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedState	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
46398	96	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
1197	132	12	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	RET	$.states.isEmpty()
1198	139	12	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.initialized
1199	156	16	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.evaluateStep(interpolator)
1199	156	16	CombinedEventsManager.java	evaluateStep	interpolator	StepInterpolator	0	DEF	state.evaluateStep($)
1200	157	20	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	1	DEF	$.first == null
1201	160	24	CombinedEventsManager.java	evaluateStep	interpolator	StepInterpolator	1	DEF	$.isForward()
1202	161	28	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.getEventTime() < $.first.getEventTime()
1203	165	28	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.getEventTime() > $.first.getEventTime()
1204	220	12	CombinedEventsManager.java	stop	THIS	CombinedEventsManager	0	RET	$.state.stop()
1205	241	16	CombinedEventsManager.java	reset	THIS	CombinedEventsManager	0	DEF	$.state.reset(t, y)
1205	241	16	CombinedEventsManager.java	reset	t	double	0	DEF	state.reset($, y)
1205	241	16	CombinedEventsManager.java	reset	y	double[]	0	DEF	state.reset(t, $)
212	96	8	Complex.java	abs	THIS	Complex	0	RET	$.isNaN()
213	100	8	Complex.java	abs	THIS	Complex	0	RET	$.isInfinite()
214	104	8	Complex.java	abs	THIS	Complex	1	RET	Math.abs($.real) < Math.abs($.imaginary)
215	105	12	Complex.java	abs	THIS	Complex	0	RET	$.imaginary == 0.0
216	111	12	Complex.java	abs	THIS	Complex	0	RET	$.real == 0.0
217	156	8	Complex.java	conjugate	THIS	Complex	0	RET	$.isNaN()
218	198	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN()
218	198	8	Complex.java	divide	rhs	Complex	0	RET	$.isNaN()
219	204	8	Complex.java	divide	c	double	0	RET	$ == 0.0
219	204	8	Complex.java	divide	d	double	0	RET	$ == 0.0
220	208	8	Complex.java	divide	THIS	Complex	0	RET	$.isInfinite()
220	208	8	Complex.java	divide	rhs	Complex	0	RET	$.isInfinite()
221	212	8	Complex.java	divide	c	double	1	RET	Math.abs($) < Math.abs(d)
221	212	8	Complex.java	divide	d	double	1	RET	Math.abs(c) < Math.abs($)
222	213	12	Complex.java	divide	d	double	0	RET	$ == 0.0
223	221	12	Complex.java	divide	c	double	0	RET	$ == 0.0
224	252	8	Complex.java	equals	THIS	Complex	1	DEF	$ == other
224	252	8	Complex.java	equals	other	Object	1	DEF	this == $
225	254	15	Complex.java	equals	other	Object	1	DEF	$ == null
226	259	16	Complex.java	equals	rhs	Complex	1	DEF	$.isNaN()
227	281	8	Complex.java	hashCode	THIS	Complex	0	RET	$.isNaN()
228	359	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN()
228	359	8	Complex.java	multiply	rhs	Complex	0	RET	$.isNaN()
229	362	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(rhs.$.real)
229	362	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(rhs.$.imaginary)
229	362	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
229	362	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
229	362	8	Complex.java	multiply	rhs	Complex	0	RET	Double.isInfinite($.real)
229	362	8	Complex.java	multiply	rhs	Complex	0	RET	Double.isInfinite($.imaginary)
230	380	8	Complex.java	negate	THIS	Complex	0	RET	$.isNaN()
231	406	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN()
231	406	8	Complex.java	subtract	rhs	Complex	0	RET	$.isNaN()
232	429	8	Complex.java	acos	THIS	Complex	0	RET	$.isNaN()
233	452	8	Complex.java	asin	THIS	Complex	0	RET	$.isNaN()
234	475	8	Complex.java	atan	THIS	Complex	0	RET	$.isNaN()
235	510	8	Complex.java	cos	THIS	Complex	0	RET	$.isNaN()
236	544	8	Complex.java	cosh	THIS	Complex	0	RET	$.isNaN()
237	579	8	Complex.java	exp	THIS	Complex	0	RET	$.isNaN()
238	617	8	Complex.java	log	THIS	Complex	0	RET	$.isNaN()
239	643	8	Complex.java	pow	x	Complex	0	NullPointerException	$ == null
240	676	8	Complex.java	sin	THIS	Complex	0	RET	$.isNaN()
241	710	8	Complex.java	sinh	THIS	Complex	0	RET	$.isNaN()
242	752	8	Complex.java	sqrt	THIS	Complex	0	RET	$.isNaN()
243	756	8	Complex.java	sqrt	THIS	Complex	0	RET	$.imaginary == 0.0
243	756	8	Complex.java	sqrt	THIS	Complex	0	RET	$.real == 0.0
244	761	8	Complex.java	sqrt	THIS	Complex	1	RET	$.real >= 0.0
245	818	8	Complex.java	tan	THIS	Complex	0	RET	$.isNaN()
246	856	8	Complex.java	tanh	THIS	Complex	0	RET	$.isNaN()
247	907	8	Complex.java	nthRoot	n	int	0	DEF	$ <= 0
248	914	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isNaN()
249	919	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isInfinite()
45471	931	8	Complex.java	nthRoot	k	int	0	NIL-FOR	$ < n
45471	931	8	Complex.java	nthRoot	n	int	0	NIL-FOR	k < $
201	157	8	ComplexFormat.java	format	im	double	1	DEF	$ < 0.0
202	161	15	ComplexFormat.java	format	im	double	0	DEF	Double.isNaN($)
202	161	15	ComplexFormat.java	format	im	double	0	DEF	$ > 0.0
203	188	8	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Complex
204	190	15	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Number
205	253	8	ComplexFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
206	276	8	ComplexFormat.java	parse	re	Number	0	RET	$ == null
207	312	8	ComplexFormat.java	parse	im	Number	0	RET	$ == null
208	320	8	ComplexFormat.java	parse	THIS	ComplexFormat	0	RET	$.parseFixedstring(source, $.getImaginaryCharacter(), pos)
208	320	8	ComplexFormat.java	parse	source	String	0	RET	parseFixedstring($, getImaginaryCharacter(), pos)
208	320	8	ComplexFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, getImaginaryCharacter(), $)
209	347	8	ComplexFormat.java	setImaginaryCharacter	imaginaryCharacter	String	0	IllegalArgumentException	$.length() == 0
209	347	8	ComplexFormat.java	setImaginaryCharacter	imaginaryCharacter	String	0	IllegalArgumentException	$ == null
210	361	8	ComplexFormat.java	setImaginaryFormat	imaginaryFormat	NumberFormat	0	IllegalArgumentException	$ == null
211	375	8	ComplexFormat.java	setRealFormat	realFormat	NumberFormat	0	IllegalArgumentException	$ == null
200	61	8	ComplexUtils.java	polar2Complex	r	double	0	IllegalArgumentException	$ < 0
57	85	9	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
57	85	9	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
45457	87	13	CompositeFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
45457	87	13	CompositeFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
45457	87	13	CompositeFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
58	92	13	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
58	92	13	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
59	121	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	$ < source.length()
59	121	8	CompositeFormat.java	parseNumber	source	String	0	DEF	endIndex < $.length()
60	122	12	CompositeFormat.java	parseNumber	sb	StringBuffer	0	DEF	source.substring(startIndex, endIndex).compareTo($.toString()) == 0
60	122	12	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	source.substring($, endIndex).compareTo(sb.toString()) == 0
60	122	12	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	source.substring(startIndex, $).compareTo(sb.toString()) == 0
60	122	12	CompositeFormat.java	parseNumber	source	String	0	DEF	$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
61	148	8	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	$ == endIndex
61	148	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	startIndex == $
45458	153	12	CompositeFormat.java	parseNumber	THIS	CompositeFormat	0	NIL-FOR	i < special.$.length
45458	153	12	CompositeFormat.java	parseNumber	i	int	0	NIL-FOR	$ < special.length
45458	153	12	CompositeFormat.java	parseNumber	special	double[]	0	NIL-FOR	i < $.length
62	155	16	CompositeFormat.java	parseNumber	number	Number	0	DEF	$ != null
63	176	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	$ >= source.length()
63	176	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	source.substring($, endIndex).compareTo(expected) != 0
63	176	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	$ > source.length()
63	176	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	source.substring(startIndex, $).compareTo(expected) != 0
63	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	startIndex >= $.length()
63	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	endIndex > $.length()
63	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	$.substring(startIndex, endIndex).compareTo(expected) != 0
63	176	8	CompositeFormat.java	parseFixedstring	expected	String	0	RET	source.substring(startIndex, endIndex).compareTo($) != 0
64	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isNaN($)
64	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isInfinite($)
45452	140	8	ContinuedFraction.java	evaluate	n	int	0	NIL-WHILE	$ < maxIterations
45452	140	8	ContinuedFraction.java	evaluate	relativeError	double	0	NIL-WHILE	$ > epsilon
45452	140	8	ContinuedFraction.java	evaluate	epsilon	double	0	NIL-WHILE	relativeError > $
45452	140	8	ContinuedFraction.java	evaluate	maxIterations	int	0	NIL-WHILE	n < $
2	146	12	ContinuedFraction.java	evaluate	p2	double	0	ConvergenceException	Double.isInfinite($)
2	146	12	ContinuedFraction.java	evaluate	q2	double	0	ConvergenceException	Double.isInfinite($)
3	148	16	ContinuedFraction.java	evaluate	a	double	1	DEF	$ != 0.0
4	151	23	ContinuedFraction.java	evaluate	b	double	1	DEF	$ != 0
5	172	8	ContinuedFraction.java	evaluate	n	int	0	MaxIterationsExceededException	$ >= maxIterations
5	172	8	ContinuedFraction.java	evaluate	maxIterations	int	0	MaxIterationsExceededException	n >= $
1215	108	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	RET	model.$.steps.size() == 0
1215	108	4	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	RET	$.steps.size() == 0
1216	112	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	1	DEF	$.steps.size() == 0
1217	117	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	IllegalArgumentException	$.getInterpolatedState().length != model.getInterpolatedState().length
1217	117	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	IllegalArgumentException	getInterpolatedState().length != $.getInterpolatedState().length
1218	121	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	IllegalArgumentException	$.forward ^ model.$.forward
1218	121	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	IllegalArgumentException	forward ^ $.forward
1219	130	6	ContinuousOutputModel.java	append	step	double	0	IllegalArgumentException	Math.abs(gap) > 1.0e-3 * Math.abs($)
1219	130	6	ContinuousOutputModel.java	append	gap	double	0	IllegalArgumentException	Math.abs($) > 1.0e-3 * Math.abs(step)
1220	178	4	ContinuousOutputModel.java	handleStep	THIS	ContinuousOutputModel	0	DEF	$.steps.size() == 0
1221	185	4	ContinuousOutputModel.java	handleStep	isLast	boolean	0	DEF	$
1222	244	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMin) <= 0
1222	244	6	ContinuousOutputModel.java	setInterpolatedTime	sMin	StepInterpolator	0	RET	locatePoint(time, $) <= 0
1222	244	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMin) <= 0
1223	249	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMax) >= 0
1223	249	6	ContinuousOutputModel.java	setInterpolatedTime	sMax	StepInterpolator	0	RET	locatePoint(time, $) >= 0
1223	249	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMax) >= 0
46422	256	6	ContinuousOutputModel.java	setInterpolatedTime	iMin	int	0	NIL-WHILE	iMax - $ > 5
46422	256	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	$ - iMin > 5
1224	261	8	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ < 0
1225	264	15	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ > 0
1226	278	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	Math.abs(tMax - $) < 1e-6
1226	278	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	Math.abs($ - tMin) < 1e-6
1226	278	8	ContinuousOutputModel.java	setInterpolatedTime	tMin	double	1	DEF	Math.abs(tMed - $) < 1e-6
1226	278	8	ContinuousOutputModel.java	setInterpolatedTime	tMax	double	1	DEF	Math.abs($ - tMed) < 1e-6
1227	301	8	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.index < low
1227	301	8	ContinuousOutputModel.java	setInterpolatedTime	low	int	1	DEF	index < $
1228	303	15	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	DEF	$.index > high
1228	303	15	ContinuousOutputModel.java	setInterpolatedTime	high	int	0	DEF	index > $
46423	311	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.index <= iMax
46423	311	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.locatePoint(time, $.steps.get($.index)) > 0
46423	311	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	index <= $
46423	311	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	NIL-WHILE	locatePoint($, steps.get(index)) > 0
1229	339	4	ContinuousOutputModel.java	locatePoint	THIS	ContinuousOutputModel	0	RET	$.forward
1230	340	6	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getPreviousTime()
1230	340	6	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getPreviousTime()
1231	342	13	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getCurrentTime()
1231	342	13	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getCurrentTime()
1232	348	4	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getPreviousTime()
1232	348	4	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getPreviousTime()
1233	350	11	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getCurrentTime()
1233	350	11	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getCurrentTime()
948	87	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	THIS	CorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != order
948	87	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	DimensionMismatchException	mean.length != $
948	87	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != order
46143	116	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	i	int	0	NIL-FOR	$ < order
46143	116	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	NIL-FOR	i < $
46144	181	8	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
46144	181	8	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
46145	186	8	CorrelatedRandomVectorGenerator.java	decompose	loop	boolean	0	NIL-FOR	$
46146	190	12	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
46146	190	12	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
949	193	16	CorrelatedRandomVectorGenerator.java	decompose	ii	int	0	DEF	c[$][$] > c[isi][isi]
949	193	16	CorrelatedRandomVectorGenerator.java	decompose	isi	int	0	DEF	c[ii][ii] > c[$][$]
949	193	16	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	0	DEF	$[ii][ii] > $[isi][isi]
950	200	12	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	DEF	swap[$.rank] != $.rank
950	200	12	CorrelatedRandomVectorGenerator.java	decompose	swap	int[]	0	DEF	$[rank] != rank
951	208	12	CorrelatedRandomVectorGenerator.java	decompose	ir	int	1	NotPositiveDefiniteMatrixException	c[$][$] < small
951	208	12	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	1	NotPositiveDefiniteMatrixException	$[ir][ir] < small
951	208	12	CorrelatedRandomVectorGenerator.java	decompose	small	double	1	NotPositiveDefiniteMatrixException	c[ir][ir] < $
952	210	16	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	NotPositiveDefiniteMatrixException	$.rank == 0
46147	215	16	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
46147	215	16	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
953	216	20	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NotPositiveDefiniteMatrixException	c[index[$]][index[$]] < -small
953	216	20	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	0	NotPositiveDefiniteMatrixException	$[index[i]][index[i]] < -small
953	216	20	CorrelatedRandomVectorGenerator.java	decompose	index	int[]	0	NotPositiveDefiniteMatrixException	c[$[i]][$[i]] < -small
953	216	20	CorrelatedRandomVectorGenerator.java	decompose	small	double	0	NotPositiveDefiniteMatrixException	c[index[i]][index[i]] < -$
46148	234	16	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
46148	234	16	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
46149	239	20	CorrelatedRandomVectorGenerator.java	decompose	j	int	0	NIL-FOR	$ < i
46149	239	20	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	j < $
46150	256	8	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
46150	256	8	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
46151	257	12	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.rank
46151	257	12	CorrelatedRandomVectorGenerator.java	decompose	j	int	0	NIL-FOR	$ < rank
46152	271	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < $.rank
46152	271	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < rank
46153	277	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < correlated.$.length
46153	277	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < correlated.length
46153	277	8	CorrelatedRandomVectorGenerator.java	nextVector	correlated	double[]	0	NIL-FOR	i < $.length
46154	279	12	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.rank
46154	279	12	CorrelatedRandomVectorGenerator.java	nextVector	j	int	0	NIL-FOR	$ < rank
46124	163	8	Covariance.java	computeCovariance	i	int	0	NIL-FOR	$ < dimension
46124	163	8	Covariance.java	computeCovariance	dimension	int	0	NIL-FOR	i < $
46125	164	12	Covariance.java	computeCovariance	j	int	0	NIL-FOR	$ < i
46125	164	12	Covariance.java	computeCovariance	i	int	0	NIL-FOR	j < $
906	191	8	Covariance.java	covariance	THIS	Covariance	1	DEF	length == yArray.$.length
906	191	8	Covariance.java	covariance	length	long	1	DEF	$ == yArray.length
906	191	8	Covariance.java	covariance	length	long	1	DEF	$ > 1
906	191	8	Covariance.java	covariance	yArray	double[]	1	DEF	length == $.length
46126	194	12	Covariance.java	covariance	THIS	Covariance	0	NIL-FOR	i < xArray.$.length
46126	194	12	Covariance.java	covariance	i	int	0	NIL-FOR	$ < xArray.length
46126	194	12	Covariance.java	covariance	xArray	double[]	0	NIL-FOR	i < $.length
907	217	8	Covariance.java	checkSufficientData	nRows	int	0	DEF	$ < 2
907	217	8	Covariance.java	checkSufficientData	nCols	int	0	DEF	$ < 2
137	46	8	DefaultTransformer.java	transform	o	Object	0	MathException	$ == null
138	50	8	DefaultTransformer.java	transform	o	Object	0	RET	$ instanceof Number
535	156	8	DenseRealMatrix.java	DenseRealMatrix	copyArray	boolean	1	DEF	$
45739	165	8	DenseRealMatrix.java	DenseRealMatrix	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
45739	165	8	DenseRealMatrix.java	DenseRealMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
45740	167	12	DenseRealMatrix.java	DenseRealMatrix	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
45740	167	12	DenseRealMatrix.java	DenseRealMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
536	168	16	DenseRealMatrix.java	DenseRealMatrix	THIS	DenseRealMatrix	0	DEF	blockData[index].length != iHeight * $.blockWidth(jBlock)
536	168	16	DenseRealMatrix.java	DenseRealMatrix	jBlock	int	0	DEF	blockData[index].length != iHeight * blockWidth($)
536	168	16	DenseRealMatrix.java	DenseRealMatrix	iHeight	int	0	DEF	blockData[index].length != $ * blockWidth(jBlock)
536	168	16	DenseRealMatrix.java	DenseRealMatrix	index	int	0	DEF	blockData[$].length != iHeight * blockWidth(jBlock)
536	168	16	DenseRealMatrix.java	DenseRealMatrix	blockData	double[][]	0	DEF	$[index].length != iHeight * blockWidth(jBlock)
537	175	16	DenseRealMatrix.java	DenseRealMatrix	copyArray	boolean	0	DEF	$
45741	214	8	DenseRealMatrix.java	toBlocksLayout	THIS	DenseRealMatrix	0	NIL-FOR	i < rawData.$.length
45741	214	8	DenseRealMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
45741	214	8	DenseRealMatrix.java	toBlocksLayout	rawData	double[][]	0	NIL-FOR	i < $.length
538	216	12	DenseRealMatrix.java	toBlocksLayout	length	int	0	DEF	$ != columns
538	216	12	DenseRealMatrix.java	toBlocksLayout	columns	int	0	DEF	length != $
45742	225	8	DenseRealMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
45742	225	8	DenseRealMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
45743	229	12	DenseRealMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
45743	229	12	DenseRealMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
45744	239	16	DenseRealMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
45744	239	16	DenseRealMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
45745	268	8	DenseRealMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
45745	268	8	DenseRealMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
45746	272	12	DenseRealMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
45746	272	12	DenseRealMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
45747	297	8	DenseRealMatrix.java	copy	THIS	DenseRealMatrix	0	NIL-FOR	i < $.blocks.$.length
45747	297	8	DenseRealMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
45748	319	12	DenseRealMatrix.java	add	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
45748	319	12	DenseRealMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
45748	319	12	DenseRealMatrix.java	add	out	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
45749	320	16	DenseRealMatrix.java	add	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
45749	320	16	DenseRealMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
45749	320	16	DenseRealMatrix.java	add	out	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
45750	329	20	DenseRealMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
45750	329	20	DenseRealMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
45751	330	24	DenseRealMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
45751	330	24	DenseRealMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
45752	362	8	DenseRealMatrix.java	add	THIS	DenseRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
45752	362	8	DenseRealMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
45752	362	8	DenseRealMatrix.java	add	out	DenseRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
45753	366	12	DenseRealMatrix.java	add	THIS	DenseRealMatrix	0	NIL-FOR	k < outBlock.$.length
45753	366	12	DenseRealMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
45753	366	12	DenseRealMatrix.java	add	outBlock	double[]	0	NIL-FOR	k < $.length
45754	389	12	DenseRealMatrix.java	subtract	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
45754	389	12	DenseRealMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
45754	389	12	DenseRealMatrix.java	subtract	out	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
45755	390	16	DenseRealMatrix.java	subtract	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
45755	390	16	DenseRealMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
45755	390	16	DenseRealMatrix.java	subtract	out	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
45756	399	20	DenseRealMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
45756	399	20	DenseRealMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
45757	400	24	DenseRealMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
45757	400	24	DenseRealMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
45758	432	8	DenseRealMatrix.java	subtract	THIS	DenseRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
45758	432	8	DenseRealMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
45758	432	8	DenseRealMatrix.java	subtract	out	DenseRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
45759	436	12	DenseRealMatrix.java	subtract	THIS	DenseRealMatrix	0	NIL-FOR	k < outBlock.$.length
45759	436	12	DenseRealMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
45759	436	12	DenseRealMatrix.java	subtract	outBlock	double[]	0	NIL-FOR	k < $.length
45760	452	8	DenseRealMatrix.java	scalarAdd	THIS	DenseRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
45760	452	8	DenseRealMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
45760	452	8	DenseRealMatrix.java	scalarAdd	out	DenseRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
45761	455	12	DenseRealMatrix.java	scalarAdd	THIS	DenseRealMatrix	0	NIL-FOR	k < outBlock.$.length
45761	455	12	DenseRealMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
45761	455	12	DenseRealMatrix.java	scalarAdd	outBlock	double[]	0	NIL-FOR	k < $.length
45762	471	8	DenseRealMatrix.java	scalarMultiply	THIS	DenseRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
45762	471	8	DenseRealMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
45762	471	8	DenseRealMatrix.java	scalarMultiply	out	DenseRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
45763	474	12	DenseRealMatrix.java	scalarMultiply	THIS	DenseRealMatrix	0	NIL-FOR	k < outBlock.$.length
45763	474	12	DenseRealMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
45763	474	12	DenseRealMatrix.java	scalarMultiply	outBlock	double[]	0	NIL-FOR	k < $.length
45764	497	12	DenseRealMatrix.java	multiply	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
45764	497	12	DenseRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
45764	497	12	DenseRealMatrix.java	multiply	out	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
45765	502	16	DenseRealMatrix.java	multiply	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
45765	502	16	DenseRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
45765	502	16	DenseRealMatrix.java	multiply	out	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
45766	511	20	DenseRealMatrix.java	multiply	THIS	DenseRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
45766	511	20	DenseRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
45767	515	24	DenseRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
45767	515	24	DenseRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
45768	518	28	DenseRealMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
45768	518	28	DenseRealMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
45769	520	32	DenseRealMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
45769	520	32	DenseRealMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
45770	556	8	DenseRealMatrix.java	multiply	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
45770	556	8	DenseRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
45770	556	8	DenseRealMatrix.java	multiply	out	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
45771	561	12	DenseRealMatrix.java	multiply	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
45771	561	12	DenseRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
45771	561	12	DenseRealMatrix.java	multiply	out	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
45772	571	16	DenseRealMatrix.java	multiply	THIS	DenseRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
45772	571	16	DenseRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
45773	575	20	DenseRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
45773	575	20	DenseRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
45774	578	24	DenseRealMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
45774	578	24	DenseRealMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
45775	582	28	DenseRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
45775	582	28	DenseRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
45776	590	28	DenseRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
45776	590	28	DenseRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
45777	615	8	DenseRealMatrix.java	getData	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
45777	615	8	DenseRealMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
45778	620	12	DenseRealMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
45778	620	12	DenseRealMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
45779	624	16	DenseRealMatrix.java	getData	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
45779	624	16	DenseRealMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
45780	642	8	DenseRealMatrix.java	getNorm	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
45780	642	8	DenseRealMatrix.java	getNorm	jBlock	int	0	NIL-FOR	$ < blockColumns
45781	645	12	DenseRealMatrix.java	getNorm	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
45781	645	12	DenseRealMatrix.java	getNorm	iBlock	int	0	NIL-FOR	$ < blockRows
45782	648	16	DenseRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
45782	648	16	DenseRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
45783	650	20	DenseRealMatrix.java	getNorm	i	int	0	NIL-FOR	$ < iHeight
45783	650	20	DenseRealMatrix.java	getNorm	iHeight	int	0	NIL-FOR	i < $
45784	656	12	DenseRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
45784	656	12	DenseRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
45785	666	8	DenseRealMatrix.java	getFrobeniusNorm	THIS	DenseRealMatrix	0	NIL-FOR	blockIndex < $.blocks.$.length
45785	666	8	DenseRealMatrix.java	getFrobeniusNorm	blockIndex	int	0	NIL-FOR	$ < blocks.length
45786	693	8	DenseRealMatrix.java	getSubMatrix	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
45786	693	8	DenseRealMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
45786	693	8	DenseRealMatrix.java	getSubMatrix	out	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
45787	695	12	DenseRealMatrix.java	getSubMatrix	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
45787	695	12	DenseRealMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
45787	695	12	DenseRealMatrix.java	getSubMatrix	out	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
539	706	16	DenseRealMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
540	708	20	DenseRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
541	740	20	DenseRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
45788	790	8	DenseRealMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
45788	790	8	DenseRealMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
542	803	8	DenseRealMatrix.java	setSubMatrix	refLength	int	0	DEF	$ < 1
543	811	12	DenseRealMatrix.java	setSubMatrix	THIS	DenseRealMatrix	0	DEF	$.subRow.$.length != refLength
543	811	12	DenseRealMatrix.java	setSubMatrix	refLength	int	0	DEF	subRow.length != $
45789	826	8	DenseRealMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
45789	826	8	DenseRealMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
45790	832	12	DenseRealMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
45790	832	12	DenseRealMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
45791	841	16	DenseRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
45791	841	16	DenseRealMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
45792	864	8	DenseRealMatrix.java	getRowMatrix	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
45792	864	8	DenseRealMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
544	868	12	DenseRealMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
544	868	12	DenseRealMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
545	909	8	DenseRealMatrix.java	setRowMatrix	nCols	int	0	InvalidMatrixException	matrix.getColumnDimension() != $
545	909	8	DenseRealMatrix.java	setRowMatrix	matrix	DenseRealMatrix	0	InvalidMatrixException	$.getColumnDimension() != nCols
545	909	8	DenseRealMatrix.java	setRowMatrix	matrix	DenseRealMatrix	0	InvalidMatrixException	$.getRowDimension() != 1
45793	925	8	DenseRealMatrix.java	setRowMatrix	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
45793	925	8	DenseRealMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
546	929	12	DenseRealMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
546	929	12	DenseRealMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
45794	956	8	DenseRealMatrix.java	getColumnMatrix	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
45794	956	8	DenseRealMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
45795	959	12	DenseRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
45795	959	12	DenseRealMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
547	960	16	DenseRealMatrix.java	getColumnMatrix	THIS	DenseRealMatrix	0	DEF	outIndex >= outBlock.$.length
547	960	16	DenseRealMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
547	960	16	DenseRealMatrix.java	getColumnMatrix	outBlock	double[]	0	DEF	outIndex >= $.length
548	998	8	DenseRealMatrix.java	setColumnMatrix	nRows	int	0	InvalidMatrixException	matrix.getRowDimension() != $
548	998	8	DenseRealMatrix.java	setColumnMatrix	matrix	DenseRealMatrix	0	InvalidMatrixException	$.getRowDimension() != nRows
548	998	8	DenseRealMatrix.java	setColumnMatrix	matrix	DenseRealMatrix	0	InvalidMatrixException	$.getColumnDimension() != 1
45796	1015	8	DenseRealMatrix.java	setColumnMatrix	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
45796	1015	8	DenseRealMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
45797	1018	12	DenseRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
45797	1018	12	DenseRealMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
549	1019	16	DenseRealMatrix.java	setColumnMatrix	THIS	DenseRealMatrix	0	DEF	mIndex >= mBlock.$.length
549	1019	16	DenseRealMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
549	1019	16	DenseRealMatrix.java	setColumnMatrix	mBlock	double[]	0	DEF	mIndex >= $.length
45798	1040	8	DenseRealMatrix.java	getRowVector	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
45798	1040	8	DenseRealMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
45799	1073	8	DenseRealMatrix.java	getColumnVector	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
45799	1073	8	DenseRealMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
45800	1076	12	DenseRealMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
45800	1076	12	DenseRealMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
45801	1106	8	DenseRealMatrix.java	getRow	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
45801	1106	8	DenseRealMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
550	1123	8	DenseRealMatrix.java	setRow	THIS	DenseRealMatrix	0	InvalidMatrixException	array.$.length != nCols
550	1123	8	DenseRealMatrix.java	setRow	nCols	int	0	InvalidMatrixException	array.length != $
550	1123	8	DenseRealMatrix.java	setRow	array	double[]	0	InvalidMatrixException	$.length != nCols
45802	1135	8	DenseRealMatrix.java	setRow	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
45802	1135	8	DenseRealMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
45803	1156	8	DenseRealMatrix.java	getColumn	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
45803	1156	8	DenseRealMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
45804	1159	12	DenseRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
45804	1159	12	DenseRealMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
551	1174	8	DenseRealMatrix.java	setColumn	THIS	DenseRealMatrix	0	InvalidMatrixException	array.$.length != nRows
551	1174	8	DenseRealMatrix.java	setColumn	nRows	int	0	InvalidMatrixException	array.length != $
551	1174	8	DenseRealMatrix.java	setColumn	array	double[]	0	InvalidMatrixException	$.length != nRows
45805	1187	8	DenseRealMatrix.java	setColumn	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
45805	1187	8	DenseRealMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
45806	1190	12	DenseRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
45806	1190	12	DenseRealMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
45807	1278	8	DenseRealMatrix.java	transpose	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockColumns
45807	1278	8	DenseRealMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
45808	1279	12	DenseRealMatrix.java	transpose	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockRows
45808	1279	12	DenseRealMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
45809	1288	16	DenseRealMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
45809	1288	16	DenseRealMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
45810	1290	20	DenseRealMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
45810	1290	20	DenseRealMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
552	1319	8	DenseRealMatrix.java	operate	THIS	DenseRealMatrix	0	DEF	v.$.length != $.columns
552	1319	8	DenseRealMatrix.java	operate	v	double[]	0	DEF	$.length != columns
45811	1329	8	DenseRealMatrix.java	operate	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
45811	1329	8	DenseRealMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
45812	1332	12	DenseRealMatrix.java	operate	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
45812	1332	12	DenseRealMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
45813	1336	16	DenseRealMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
45813	1336	16	DenseRealMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
45814	1339	20	DenseRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
45814	1339	20	DenseRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
45815	1347	20	DenseRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
45815	1347	20	DenseRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
553	1363	8	DenseRealMatrix.java	preMultiply	THIS	DenseRealMatrix	0	DEF	v.$.length != $.rows
553	1363	8	DenseRealMatrix.java	preMultiply	v	double[]	0	DEF	$.length != rows
45816	1373	8	DenseRealMatrix.java	preMultiply	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
45816	1373	8	DenseRealMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
45817	1380	12	DenseRealMatrix.java	preMultiply	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
45817	1380	12	DenseRealMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
45818	1384	16	DenseRealMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
45818	1384	16	DenseRealMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
45819	1388	20	DenseRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
45819	1388	20	DenseRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
45820	1396	20	DenseRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
45820	1396	20	DenseRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
45821	1413	8	DenseRealMatrix.java	walkInRowOrder	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
45821	1413	8	DenseRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
45822	1416	12	DenseRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
45822	1416	12	DenseRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
45823	1417	16	DenseRealMatrix.java	walkInRowOrder	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
45823	1417	16	DenseRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
45824	1422	20	DenseRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
45824	1422	20	DenseRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
45825	1435	8	DenseRealMatrix.java	walkInRowOrder	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
45825	1435	8	DenseRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
45826	1438	12	DenseRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
45826	1438	12	DenseRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
45827	1439	16	DenseRealMatrix.java	walkInRowOrder	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
45827	1439	16	DenseRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
45828	1444	20	DenseRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
45828	1444	20	DenseRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
45829	1460	8	DenseRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
45829	1460	8	DenseRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
45830	1464	12	DenseRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
45830	1464	12	DenseRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
45831	1465	16	DenseRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
45831	1465	16	DenseRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
45832	1471	20	DenseRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
45832	1471	20	DenseRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
45833	1487	8	DenseRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
45833	1487	8	DenseRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
45834	1491	12	DenseRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
45834	1491	12	DenseRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
45835	1492	16	DenseRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
45835	1492	16	DenseRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
45836	1498	20	DenseRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
45836	1498	20	DenseRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
45837	1511	8	DenseRealMatrix.java	walkInOptimizedOrder	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
45837	1511	8	DenseRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
45838	1514	12	DenseRealMatrix.java	walkInOptimizedOrder	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
45838	1514	12	DenseRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
45839	1518	16	DenseRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
45839	1518	16	DenseRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
45840	1519	20	DenseRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
45840	1519	20	DenseRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
45841	1532	8	DenseRealMatrix.java	walkInOptimizedOrder	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
45841	1532	8	DenseRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
45842	1535	12	DenseRealMatrix.java	walkInOptimizedOrder	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
45842	1535	12	DenseRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
45843	1539	16	DenseRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
45843	1539	16	DenseRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
45844	1540	20	DenseRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
45844	1540	20	DenseRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
45845	1556	8	DenseRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
45845	1556	8	DenseRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
45846	1560	12	DenseRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
45846	1560	12	DenseRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
45847	1566	16	DenseRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
45847	1566	16	DenseRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
45848	1567	20	DenseRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
45848	1567	20	DenseRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
45849	1583	8	DenseRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
45849	1583	8	DenseRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
45850	1587	12	DenseRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
45850	1587	12	DenseRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
45851	1593	16	DenseRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
45851	1593	16	DenseRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
45852	1594	20	DenseRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
45852	1594	20	DenseRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
810	139	8	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.windowSize != INFINITE_WINDOW
811	140	12	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.getN() == $.windowSize
812	142	19	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	0	DEF	$.getN() < $.windowSize
813	203	8	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	0	DEF	$.getN() > 0
814	204	12	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	1	DEF	$.getN() > 1
815	302	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	IllegalArgumentException	$ < 1
816	303	12	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	IllegalArgumentException	$ != INFINITE_WINDOW
817	313	8	DescriptiveStatistics.java	setWindowSize	THIS	DescriptiveStatistics	0	DEF	windowSize < $.eDA.getNumElements()
817	313	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < eDA.getNumElements()
817	313	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
818	374	8	DescriptiveStatistics.java	getPercentile	THIS	DescriptiveStatistics	1	DEF	$.percentileImpl instanceof Percentile
46067	167	8	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	0	NIL-FOR	i < vertexA.$.length
46067	167	8	DirectSearchOptimizer.java	minimize	i	int	0	NIL-FOR	$ < vertexA.length
46067	167	8	DirectSearchOptimizer.java	minimize	vertexA	double[]	0	NIL-FOR	i < $.length
46068	252	12	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	0	NIL-FOR	i < vertices.$.length
46068	252	12	DirectSearchOptimizer.java	minimize	i	int	0	NIL-FOR	$ < vertices.length
46068	252	12	DirectSearchOptimizer.java	minimize	vertices	double[][]	0	NIL-FOR	i < $.length
46069	361	8	DirectSearchOptimizer.java	buildSimplex	i	int	0	NIL-FOR	$ <= n
46069	361	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	i <= $
745	363	12	DirectSearchOptimizer.java	buildSimplex	i	int	0	DEF	$ > 0
746	366	12	DirectSearchOptimizer.java	buildSimplex	i	int	0	DEF	$ < n
746	366	12	DirectSearchOptimizer.java	buildSimplex	n	int	0	DEF	i < $
46070	380	8	DirectSearchOptimizer.java	buildSimplex	i	int	0	NIL-FOR	$ <= n
46070	380	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	i <= $
46071	397	8	DirectSearchOptimizer.java	buildSimplex	i	int	0	NIL-FOR	$ <= n
46071	397	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	i <= $
747	418	8	DirectSearchOptimizer.java	setMultiStart	starts	int	1	DEF	$ < 2
46072	478	8	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	0	NIL-FOR	i < $.starts
46072	478	8	DirectSearchOptimizer.java	minimize	i	int	0	NIL-FOR	$ < starts
46073	483	12	DirectSearchOptimizer.java	minimize	loop	boolean	0	NIL-FOR	$
748	484	16	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	1	DEF	checker.converged($.simplex)
748	484	16	DirectSearchOptimizer.java	minimize	checker	ConvergenceChecker	1	DEF	$.converged(simplex)
749	488	23	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	1	DEF	$.evaluations >= maxEvaluations
749	488	23	DirectSearchOptimizer.java	minimize	maxEvaluations	int	1	DEF	evaluations >= $
750	497	12	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	0	DEF	i < ($.starts - 1)
750	497	12	DirectSearchOptimizer.java	minimize	i	int	0	DEF	$ < (starts - 1)
751	509	8	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	0	ConvergenceException	$.minima[0] == null
46074	547	8	DirectSearchOptimizer.java	evaluateSimplex	THIS	DirectSearchOptimizer	0	NIL-FOR	i < $.simplex.$.length
46074	547	8	DirectSearchOptimizer.java	evaluateSimplex	i	int	0	NIL-FOR	$ < simplex.length
752	549	12	DirectSearchOptimizer.java	evaluateSimplex	pair	PointCostPair	0	DEF	Double.isNaN($.getCost())
46075	564	8	DirectSearchOptimizer.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < n
46075	564	8	DirectSearchOptimizer.java	replaceWorstPoint	n	int	0	NIL-FOR	i < $
753	565	12	DirectSearchOptimizer.java	replaceWorstPoint	THIS	DirectSearchOptimizer	0	DEF	$.simplex[i].getCost() > pointCostPair.getCost()
753	565	12	DirectSearchOptimizer.java	replaceWorstPoint	i	int	0	DEF	simplex[$].getCost() > pointCostPair.getCost()
753	565	12	DirectSearchOptimizer.java	replaceWorstPoint	pointCostPair	PointCostPair	0	DEF	simplex[i].getCost() > $.getCost()
46429	74	8	DividedDifferenceInterpolator.java	interpolate	THIS	DividedDifferenceInterpolator	0	NIL-FOR	i < c.$.length
46429	74	8	DividedDifferenceInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < c.length
46429	74	8	DividedDifferenceInterpolator.java	interpolate	c	double[]	0	NIL-FOR	i < $.length
46430	109	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
46430	109	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
46431	115	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
46431	115	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
46432	116	12	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	j < n-$
46432	116	12	DividedDifferenceInterpolator.java	computeDividedDifference	j	int	0	NIL-FOR	$ < n-i
46432	116	12	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	j < $-i
1237	118	16	DividedDifferenceInterpolator.java	computeDividedDifference	denominator	double	0	DuplicateSampleAbscissaException	$ == 0.0
46324	139	4	DormandPrince54Integrator.java	estimateError	THIS	DormandPrince54Integrator	0	NIL-FOR	j < y0.$.length
46324	139	4	DormandPrince54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
46324	139	4	DormandPrince54Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
1072	64	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	THIS	DormandPrince54StepInterpolator	1	DEF	interpolator.$.v1 == null
1072	64	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	interpolator	DormandPrince54StepInterpolator	1	DEF	$.v1 == null
1073	112	4	DormandPrince54StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince54StepInterpolator	0	DEF	$.vectorsInitialized
1074	114	6	DormandPrince54StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince54StepInterpolator	0	DEF	$.v1 == null
46289	124	6	DormandPrince54StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
46289	124	6	DormandPrince54StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
46290	147	4	DormandPrince54StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
46290	147	4	DormandPrince54StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
46323	253	4	DormandPrince853Integrator.java	estimateError	THIS	DormandPrince853Integrator	0	NIL-FOR	j < y0.$.length
46323	253	4	DormandPrince853Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
46323	253	4	DormandPrince853Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
1133	274	4	DormandPrince853Integrator.java	estimateError	den	double	0	DEF	$ <= 0.0
1158	67	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	1	DEF	interpolator.$.currentState == null
1158	67	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	interpolator	DormandPrince853StepInterpolator	1	DEF	$.currentState == null
46357	78	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
46357	78	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < yDotKLast.length
46358	85	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
46358	85	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < v.length
46359	110	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
46359	110	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < yDotKLast.length
46360	115	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
46360	115	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < v.length
1159	134	4	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	DEF	$.vectorsInitialized
1160	136	6	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	DEF	$.v == null
46361	138	8	DormandPrince853StepInterpolator.java	computeInterpolatedState	k	int	0	NIL-FOR	$ < 7
46362	147	6	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
46362	147	6	DormandPrince853StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
46363	165	10	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.d.$.length
46363	165	10	DormandPrince853StepInterpolator.java	computeInterpolatedState	k	int	0	NIL-FOR	$ < d.length
46364	187	4	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
46364	187	4	DormandPrince853StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
1161	207	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	RET	$.currentState == null
46365	216	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
46365	216	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
46366	225	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
46366	225	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
46367	235	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
46367	235	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
46368	257	4	DormandPrince853StepInterpolator.java	writeExternal	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.currentState.$.length
46368	257	4	DormandPrince853StepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < currentState.length
46369	279	4	DormandPrince853StepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < dimension
46369	279	4	DormandPrince853StepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	i < $
634	173	8	EigenDecompositionImpl.java	EigenDecompositionImpl	THIS	EigenDecompositionImpl	1	DEF	$.isSymmetric(matrix)
634	173	8	EigenDecompositionImpl.java	EigenDecompositionImpl	matrix	RealMatrix	1	DEF	isSymmetric($)
45998	205	8	EigenDecompositionImpl.java	EigenDecompositionImpl	THIS	EigenDecompositionImpl	0	NIL-FOR	i < $.squaredSecondary.$.length
45998	205	8	EigenDecompositionImpl.java	EigenDecompositionImpl	i	int	0	NIL-FOR	$ < squaredSecondary.length
45999	224	8	EigenDecompositionImpl.java	isSymmetric	i	int	0	NIL-FOR	$ < rows
45999	224	8	EigenDecompositionImpl.java	isSymmetric	rows	int	0	NIL-FOR	i < $
46000	225	12	EigenDecompositionImpl.java	isSymmetric	j	int	0	NIL-FOR	$ < columns
46000	225	12	EigenDecompositionImpl.java	isSymmetric	columns	int	0	NIL-FOR	j < $
635	228	16	EigenDecompositionImpl.java	isSymmetric	mij	double	0	RET	Math.abs($ - mji) > (Math.max(Math.abs($), Math.abs(mji)) * eps)
635	228	16	EigenDecompositionImpl.java	isSymmetric	mji	double	0	RET	Math.abs(mij - $) > (Math.max(Math.abs(mij), Math.abs($)) * eps)
635	228	16	EigenDecompositionImpl.java	isSymmetric	eps	double	0	RET	Math.abs(mij - mji) > (Math.max(Math.abs(mij), Math.abs(mji)) * $)
636	263	8	EigenDecompositionImpl.java	getV	THIS	EigenDecompositionImpl	0	DEF	$.cachedV == null
637	265	12	EigenDecompositionImpl.java	getV	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
46001	271	12	EigenDecompositionImpl.java	getV	k	int	0	NIL-FOR	$ < m
46001	271	12	EigenDecompositionImpl.java	getV	m	int	0	NIL-FOR	k < $
638	285	8	EigenDecompositionImpl.java	getD	THIS	EigenDecompositionImpl	0	DEF	$.cachedD == null
639	296	8	EigenDecompositionImpl.java	getVT	THIS	EigenDecompositionImpl	0	DEF	$.cachedVt == null
640	298	12	EigenDecompositionImpl.java	getVT	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
46002	304	12	EigenDecompositionImpl.java	getVT	k	int	0	NIL-FOR	$ < m
46002	304	12	EigenDecompositionImpl.java	getVT	m	int	0	NIL-FOR	k < $
641	342	8	EigenDecompositionImpl.java	getEigenvector	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
642	362	8	EigenDecompositionImpl.java	getSolver	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
46003	571	8	EigenDecompositionImpl.java	transformToTridiagonal	THIS	EigenDecompositionImpl	0	NIL-FOR	i < $.squaredSecondary.$.length
46003	571	8	EigenDecompositionImpl.java	transformToTridiagonal	i	int	0	NIL-FOR	$ < squaredSecondary.length
46004	591	8	EigenDecompositionImpl.java	computeGershgorinCircles	i	int	0	NIL-FOR	$ < m - 1
46004	591	8	EigenDecompositionImpl.java	computeGershgorinCircles	m	int	0	NIL-FOR	i < $ - 1
643	669	16	EigenDecompositionImpl.java	findEigenvalues	chooseLeft	boolean	1	DEF	$
46005	670	20	EigenDecompositionImpl.java	findEigenvalues	i	int	0	NIL-FOR	$ < n
46005	670	20	EigenDecompositionImpl.java	findEigenvalues	n	int	0	NIL-FOR	i < $
46006	674	20	EigenDecompositionImpl.java	findEigenvalues	i	int	0	NIL-FOR	$ < n
46006	674	20	EigenDecompositionImpl.java	findEigenvalues	n	int	0	NIL-FOR	i < $
46007	685	8	EigenDecompositionImpl.java	findEigenvalues	i	int	0	NIL-FOR	$ < j
46007	685	8	EigenDecompositionImpl.java	findEigenvalues	j	int	0	NIL-FOR	i < $
46008	703	8	EigenDecompositionImpl.java	computeSplits	THIS	EigenDecompositionImpl	0	NIL-FOR	i < $.secondary.$.length
46008	703	8	EigenDecompositionImpl.java	computeSplits	i	int	0	NIL-FOR	$ < secondary.length
644	707	12	EigenDecompositionImpl.java	computeSplits	THIS	EigenDecompositionImpl	0	DEF	Math.abs($.secondary[i]) <= max
644	707	12	EigenDecompositionImpl.java	computeSplits	max	double	0	DEF	Math.abs(secondary[i]) <= $
644	707	12	EigenDecompositionImpl.java	computeSplits	i	int	0	DEF	Math.abs(secondary[$]) <= max
645	746	8	EigenDecompositionImpl.java	process2RowsBlock	delta	double	0	InvalidMatrixException	$ < 0
646	783	8	EigenDecompositionImpl.java	process3RowsBlock	delta	double	0	InvalidMatrixException	$ >= 0
647	797	8	EigenDecompositionImpl.java	process3RowsBlock	z0	double	0	DEF	$ < z1
647	797	8	EigenDecompositionImpl.java	process3RowsBlock	z1	double	0	DEF	z0 < $
648	802	8	EigenDecompositionImpl.java	process3RowsBlock	z1	double	0	DEF	$ < z2
648	802	8	EigenDecompositionImpl.java	process3RowsBlock	z2	double	0	DEF	z1 < $
649	807	8	EigenDecompositionImpl.java	process3RowsBlock	z0	double	0	DEF	$ < z1
649	807	8	EigenDecompositionImpl.java	process3RowsBlock	z1	double	0	DEF	z0 < $
46009	834	8	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	NIL-FOR	$ < n - 1
46009	834	8	EigenDecompositionImpl.java	processGeneralBlock	n	int	0	NIL-FOR	i < $ - 1
650	840	8	EigenDecompositionImpl.java	processGeneralBlock	sumOffDiag	double	0	RET	$ == 0
46010	863	8	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	NIL-WHILE	$ > 0
46011	875	12	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	NIL-FOR	$ >= 0
651	876	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.work[i + 2] <= 0
651	876	16	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	DEF	work[$ + 2] <= 0
652	880	16	EigenDecompositionImpl.java	processGeneralBlock	eMax	double	0	DEF	qMin >= 4 * $
652	880	16	EigenDecompositionImpl.java	processGeneralBlock	qMin	double	0	DEF	$ >= 4 * eMax
46012	894	12	EigenDecompositionImpl.java	processGeneralBlock	i0	int	0	NIL-FOR	$ < n0
46012	894	12	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	NIL-FOR	i0 < $
653	895	16	EigenDecompositionImpl.java	processGeneralBlock	k	int	0	MaxIterationsExceededException	$ >= maxIter
653	895	16	EigenDecompositionImpl.java	processGeneralBlock	maxIter	int	0	MaxIterationsExceededException	k >= $
654	905	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.work[4 * n0 - 2] <= $.TOLERANCE_2 * $.sigma
654	905	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.pingPong == 0
654	905	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.work[4 * n0 - 1] <= $.TOLERANCE_2 * qMax
654	905	16	EigenDecompositionImpl.java	processGeneralBlock	qMax	double	0	DEF	work[4 * n0 - 1] <= TOLERANCE_2 * $
654	905	16	EigenDecompositionImpl.java	processGeneralBlock	i0	int	0	DEF	n0 - $ > 3
654	905	16	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	DEF	work[4 * $ - 2] <= TOLERANCE_2 * sigma
654	905	16	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	DEF	$ - i0 > 3
654	905	16	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	DEF	work[4 * $ - 1] <= TOLERANCE_2 * qMax
46013	912	20	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	NIL-FOR	$ < 4 * n0 - 11
46013	912	20	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	NIL-FOR	i < 4 * $ - 11
655	913	24	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	1	DEF	$.work[i + 2] <= $.TOLERANCE_2 * $.sigma
655	913	24	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	1	DEF	$.work[i + 3] <= $.TOLERANCE_2 * $.work[i]
655	913	24	EigenDecompositionImpl.java	processGeneralBlock	i	int	1	DEF	work[$ + 2] <= TOLERANCE_2 * sigma
655	913	24	EigenDecompositionImpl.java	processGeneralBlock	i	int	1	DEF	work[$ + 3] <= TOLERANCE_2 * work[$]
46014	944	8	EigenDecompositionImpl.java	initialSplits	k	int	0	NIL-FOR	$ < 2
46015	948	12	EigenDecompositionImpl.java	initialSplits	i	int	0	NIL-FOR	$ >= 0
656	949	16	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	$.work[i + 2] <= $.TOLERANCE_2 * d
656	949	16	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	work[$ + 2] <= TOLERANCE_2 * d
656	949	16	EigenDecompositionImpl.java	initialSplits	d	double	1	DEF	work[i + 2] <= TOLERANCE_2 * $
46016	959	12	EigenDecompositionImpl.java	initialSplits	i	int	0	NIL-FOR	$ < 4 * n - 2
46016	959	12	EigenDecompositionImpl.java	initialSplits	n	int	0	NIL-FOR	i < 4 * $ - 2
657	962	16	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	$.work[i] <= $.TOLERANCE_2 * d
657	962	16	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	work[$] <= TOLERANCE_2 * d
657	962	16	EigenDecompositionImpl.java	initialSplits	d	double	1	DEF	work[i] <= TOLERANCE_2 * $
658	967	23	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j] < $.work[i + 2]
658	967	23	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[i + 2] < $.work[j]
658	967	23	EigenDecompositionImpl.java	initialSplits	j	int	1	DEF	MathUtils.SAFE_MIN * work[$] < work[i + 2]
658	967	23	EigenDecompositionImpl.java	initialSplits	j	int	1	DEF	MathUtils.SAFE_MIN * work[i + 2] < work[$]
658	967	23	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	MathUtils.SAFE_MIN * work[j] < work[$ + 2]
658	967	23	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[j]
46017	1003	8	EigenDecompositionImpl.java	goodStep	deflating	boolean	0	NIL-FOR	$
659	1005	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	0	RET	start >= $
659	1005	12	EigenDecompositionImpl.java	goodStep	start	int	0	RET	$ >= deflatedEnd
660	1012	12	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 5] <= $.TOLERANCE_2 * ($.sigma + $.work[k - 3])
660	1012	12	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 2 * $.pingPong - 4] <= $.TOLERANCE_2 * $.work[k - 7]
660	1012	12	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 5] <= TOLERANCE_2 * (sigma + work[$ - 3])
660	1012	12	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 2 * pingPong - 4] <= TOLERANCE_2 * work[$ - 7]
660	1012	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	DEF	start == $ - 1
660	1012	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	DEF	start != $ - 2
660	1012	12	EigenDecompositionImpl.java	goodStep	start	int	1	DEF	$ == deflatedEnd - 1
660	1012	12	EigenDecompositionImpl.java	goodStep	start	int	1	DEF	$ != deflatedEnd - 2
661	1021	19	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 2 * $.pingPong - 8] <= $.TOLERANCE_2 * $.work[k - 11]
661	1021	19	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 9] <= $.TOLERANCE_2 * $.sigma
661	1021	19	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 2 * pingPong - 8] <= TOLERANCE_2 * work[$ - 11]
661	1021	19	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 9] <= TOLERANCE_2 * sigma
661	1021	19	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	DEF	start == $ - 2
661	1021	19	EigenDecompositionImpl.java	goodStep	start	int	1	DEF	$ == deflatedEnd - 2
662	1026	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.work[k - 3] > $.work[k - 7]
662	1026	16	EigenDecompositionImpl.java	goodStep	k	int	0	DEF	work[$ - 3] > work[$ - 7]
663	1032	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.work[k - 5] > $.TOLERANCE_2 * $.work[k - 3]
663	1032	16	EigenDecompositionImpl.java	goodStep	k	int	0	DEF	work[$ - 5] > TOLERANCE_2 * work[$ - 3]
664	1035	20	EigenDecompositionImpl.java	goodStep	t	double	1	DEF	s <= $
664	1035	20	EigenDecompositionImpl.java	goodStep	s	double	1	DEF	$ <= t
665	1059	8	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.dMin <= 0
665	1059	8	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	0	DEF	$ < end
665	1059	8	EigenDecompositionImpl.java	goodStep	end	int	0	DEF	deflatedEnd < $
666	1060	12	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.flipIfWarranted(deflatedEnd, 1)
666	1060	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	0	DEF	flipIfWarranted($, 1)
667	1073	8	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	RET	$.dMin < 0
667	1073	8	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	RET	MathUtils.SAFE_MIN * $.qMax < Math.min($.work[l - 1], Math.min($.work[l - 9], $.dMin2 + $.work[l - 2 * $.pingPong]))
667	1073	8	EigenDecompositionImpl.java	goodStep	l	int	0	RET	MathUtils.SAFE_MIN * qMax < Math.min(work[$ - 1], Math.min(work[$ - 9], dMin2 + work[$ - 2 * pingPong]))
46018	1081	12	EigenDecompositionImpl.java	goodStep	loop	boolean	0	NIL-FOR	$
668	1087	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin >= 0
668	1087	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin1 > 0
669	1091	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.work[4 * deflatedEnd - 5 - $.pingPong] < TOLERANCE * ($.sigma + $.dN1)
669	1091	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	Math.abs($.dN) < TOLERANCE * $.sigma
669	1091	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin1 > 0.0
669	1091	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin < 0.0
669	1091	23	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	RET	work[4 * $ - 5 - pingPong] < TOLERANCE * (sigma + dN1)
670	1100	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.dMin < 0.0
671	1102	20	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.tType < -22
672	1105	27	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.dMin1 > 0.0
673	1114	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	Double.isNaN($.dMin)
674	1139	8	EigenDecompositionImpl.java	flipIfWarranted	THIS	EigenDecompositionImpl	0	RET	1.5 * $.work[$.pingPong] < $.work[4 * (n - 1) + $.pingPong]
674	1139	8	EigenDecompositionImpl.java	flipIfWarranted	n	int	0	RET	1.5 * work[pingPong] < work[4 * ($ - 1) + pingPong]
46019	1141	12	EigenDecompositionImpl.java	flipIfWarranted	i	int	0	NIL-FOR	$ < j
46019	1141	12	EigenDecompositionImpl.java	flipIfWarranted	j	int	0	NIL-FOR	i < $
46020	1142	16	EigenDecompositionImpl.java	flipIfWarranted	k	int	0	NIL-FOR	$ < 4
46021	1166	8	EigenDecompositionImpl.java	eigenvaluesRange	i	int	0	NIL-FOR	$ < n
46021	1166	8	EigenDecompositionImpl.java	eigenvaluesRange	n	int	0	NIL-FOR	i < $
46022	1182	8	EigenDecompositionImpl.java	eigenvaluesRange	i	int	0	NIL-FOR	$ < maxIter
46022	1182	8	EigenDecompositionImpl.java	eigenvaluesRange	maxIter	int	0	NIL-FOR	i < $
675	1185	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < absoluteTolerance
675	1185	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < relativeTolerance * Math.max(Math.abs(left), Math.abs(right))
675	1185	12	EigenDecompositionImpl.java	eigenvaluesRange	relativeTolerance	double	0	DEF	range < $ * Math.max(Math.abs(left), Math.abs(right))
675	1185	12	EigenDecompositionImpl.java	eigenvaluesRange	absoluteTolerance	double	0	DEF	range < $
675	1185	12	EigenDecompositionImpl.java	eigenvaluesRange	left	double	0	DEF	range < relativeTolerance * Math.max(Math.abs($), Math.abs(right))
675	1185	12	EigenDecompositionImpl.java	eigenvaluesRange	right	double	0	DEF	range < relativeTolerance * Math.max(Math.abs(left), Math.abs($))
676	1192	12	EigenDecompositionImpl.java	eigenvaluesRange	THIS	EigenDecompositionImpl	1	DEF	$.countEigenValues(middle, index, n) >= 1
676	1192	12	EigenDecompositionImpl.java	eigenvaluesRange	middle	double	1	DEF	countEigenValues($, index, n) >= 1
676	1192	12	EigenDecompositionImpl.java	eigenvaluesRange	index	int	1	DEF	countEigenValues(middle, $, n) >= 1
676	1192	12	EigenDecompositionImpl.java	eigenvaluesRange	n	int	1	DEF	countEigenValues(middle, index, $) >= 1
46023	1204	8	EigenDecompositionImpl.java	eigenvaluesRange	i	int	0	NIL-FOR	$ < maxIter
46023	1204	8	EigenDecompositionImpl.java	eigenvaluesRange	maxIter	int	0	NIL-FOR	i < $
677	1207	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < relativeTolerance * Math.max(Math.abs(left), Math.abs(right))
677	1207	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < absoluteTolerance
677	1207	12	EigenDecompositionImpl.java	eigenvaluesRange	relativeTolerance	double	0	DEF	range < $ * Math.max(Math.abs(left), Math.abs(right))
677	1207	12	EigenDecompositionImpl.java	eigenvaluesRange	absoluteTolerance	double	0	DEF	range < $
677	1207	12	EigenDecompositionImpl.java	eigenvaluesRange	left	double	0	DEF	range < relativeTolerance * Math.max(Math.abs($), Math.abs(right))
677	1207	12	EigenDecompositionImpl.java	eigenvaluesRange	right	double	0	DEF	range < relativeTolerance * Math.max(Math.abs(left), Math.abs($))
678	1214	12	EigenDecompositionImpl.java	eigenvaluesRange	THIS	EigenDecompositionImpl	1	DEF	$.countEigenValues(middle, index, n) >= n
678	1214	12	EigenDecompositionImpl.java	eigenvaluesRange	middle	double	1	DEF	countEigenValues($, index, n) >= n
678	1214	12	EigenDecompositionImpl.java	eigenvaluesRange	index	int	1	DEF	countEigenValues(middle, $, n) >= n
678	1214	12	EigenDecompositionImpl.java	eigenvaluesRange	n	int	1	DEF	countEigenValues(middle, index, $) >= $
46024	1237	8	EigenDecompositionImpl.java	countEigenValues	i	int	0	NIL-FOR	$ < n
46024	1237	8	EigenDecompositionImpl.java	countEigenValues	n	int	0	NIL-FOR	i < $
679	1239	12	EigenDecompositionImpl.java	countEigenValues	ratio	double	0	DEF	$ <= 0
46025	1260	8	EigenDecompositionImpl.java	ldlTDecomposition	i	int	0	NIL-FOR	$ < n
46025	1260	8	EigenDecompositionImpl.java	ldlTDecomposition	n	int	0	NIL-FOR	i < $
680	1283	8	EigenDecompositionImpl.java	dqds	THIS	EigenDecompositionImpl	1	DEF	$.pingPong == 0
46026	1284	12	EigenDecompositionImpl.java	dqds	j4	int	0	NIL-FOR	$ <= 4 * (end - 3)
46026	1284	12	EigenDecompositionImpl.java	dqds	end	int	0	NIL-FOR	j4 <= 4 * ($ - 3)
46027	1293	12	EigenDecompositionImpl.java	dqds	j4	int	0	NIL-FOR	$ <= 4 * (end - 3)
46027	1293	12	EigenDecompositionImpl.java	dqds	end	int	0	NIL-FOR	j4 <= 4 * ($ - 3)
681	1339	8	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.pingPong == 0
46028	1340	12	EigenDecompositionImpl.java	dqd	j4	int	0	NIL-FOR	$ < 4 * (end - 3)
46028	1340	12	EigenDecompositionImpl.java	dqd	end	int	0	NIL-FOR	j4 < 4 * ($ - 3)
682	1342	16	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 2] == 0.0
682	1342	16	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 2] == 0.0
683	1347	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 + 1] < $.work[j4 - 2]
683	1347	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 2] < $.work[j4 + 1]
683	1347	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 1] < work[$ - 2]
683	1347	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 2] < work[$ + 1]
46029	1360	12	EigenDecompositionImpl.java	dqd	j4	int	0	NIL-FOR	$ < 4 * (end - 3)
46029	1360	12	EigenDecompositionImpl.java	dqd	end	int	0	NIL-FOR	j4 < 4 * ($ - 3)
684	1362	16	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 3] == 0.0
684	1362	16	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 3] == 0.0
685	1367	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 + 2] < $.work[j4 - 3]
685	1367	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 3] < $.work[j4 + 2]
685	1367	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[$ - 3]
685	1367	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 3] < work[$ + 2]
686	1387	8	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 2] == 0.0
686	1387	8	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 2] == 0.0
687	1392	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4p2 + 2] < $.work[j4 - 2]
687	1392	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 2] < $.work[j4p2 + 2]
687	1392	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[j4p2 + 2] < work[$ - 2]
687	1392	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 2] < work[j4p2 + 2]
687	1392	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[j4 - 2]
687	1392	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[j4 - 2] < work[$ + 2]
688	1407	8	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 2] == 0.0
688	1407	8	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 2] == 0.0
689	1412	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 2] < $.work[j4p2 + 2]
689	1412	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4p2 + 2] < $.work[j4 - 2]
689	1412	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 2] < work[j4p2 + 2]
689	1412	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[j4p2 + 2] < work[$ - 2]
689	1412	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[j4 - 2] < work[$ + 2]
689	1412	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[j4 - 2]
690	1443	8	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.dMin <= 0.0
691	1453	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN1
691	1453	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN
692	1459	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.dMin == $.dN
692	1459	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.dMin1 == $.dN1
693	1463	20	EigenDecompositionImpl.java	computeShiftIncrement	gap1	double	1	DEF	$ > 0.0
693	1463	20	EigenDecompositionImpl.java	computeShiftIncrement	gap1	double	1	DEF	$ > b1
693	1463	20	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	1	DEF	gap1 > $
694	1468	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	DEF	$.dN > b1
694	1468	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	dN > $
695	1471	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	a2 > ($ + b2)
695	1471	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	a2 > (b1 + $)
695	1471	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	$ > (b1 + b2)
696	1483	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN
697	1486	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 5] > $.work[nn - 7]
697	1486	24	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 5] > work[$ - 7]
698	1495	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[np - 4] > $.work[np - 2]
698	1495	24	EigenDecompositionImpl.java	computeShiftIncrement	np	int	0	RET	work[$ - 4] > work[$ - 2]
699	1499	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 9] > $.work[nn - 11]
699	1499	24	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 9] > work[$ - 11]
46030	1508	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
46030	1508	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
46030	1508	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
700	1509	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	$ == 0.0
701	1513	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
701	1513	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
702	1518	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * Math.max(b2, $) < a2
702	1518	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * Math.max($, b1) < a2
702	1518	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	100 * Math.max(b2, b1) < $
702	1518	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	cnst1 < $
702	1518	24	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	0	DEF	$ < a2
703	1525	20	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	$ < cnst1
703	1525	20	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	0	DEF	a2 < $
704	1531	19	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN2
705	1542	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[np - 8] > b2
705	1542	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[np - 4] > b1
705	1542	16	EigenDecompositionImpl.java	computeShiftIncrement	np	int	0	RET	work[$ - 8] > b2
705	1542	16	EigenDecompositionImpl.java	computeShiftIncrement	np	int	0	RET	work[$ - 4] > b1
705	1542	16	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	RET	work[np - 4] > $
705	1542	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	RET	work[np - 8] > $
706	1548	16	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	RET	end - $ > 2
706	1548	16	EigenDecompositionImpl.java	computeShiftIncrement	end	int	0	RET	$ - start > 2
46031	1551	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
46031	1551	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
46031	1551	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
707	1552	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	$ == 0.0
708	1556	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
708	1556	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
709	1561	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * Math.max(b2, $) < a2
709	1561	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * Math.max($, b1) < a2
709	1561	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	cnst1 < $
709	1561	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	100 * Math.max(b2, b1) < $
709	1561	24	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	0	DEF	$ < a2
710	1568	16	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	1	DEF	$ < cnst1
710	1568	16	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	1	DEF	a2 < $
711	1577	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.tType == -6
712	1579	23	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.tType == -18
713	1591	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin2 == $.dN2
713	1591	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin1 == $.dN1
714	1596	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 5] > $.work[nn - 7]
714	1596	16	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 5] > work[$ - 7]
715	1601	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	RET	$ != 0.0
46032	1602	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
46032	1602	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
46032	1602	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
716	1604	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
716	1604	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
717	1609	24	EigenDecompositionImpl.java	computeShiftIncrement	oldB1	double	0	DEF	100 * Math.max(b1, $) < b2
717	1609	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * Math.max($, oldB1) < b2
717	1609	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * Math.max(b1, oldB1) < $
718	1617	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	1	DEF	gap2 > $ * a2
718	1617	16	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	1	DEF	gap2 > b2 * $
718	1617	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > 0.0
718	1617	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > b2 * a2
719	1627	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	DEF	$.dMin1 == $.dN1
720	1637	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin2 == $.dN2
720	1637	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	2 * $.work[nn - 5] < $.work[nn - 7]
720	1637	12	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	1	RET	2 * work[$ - 5] < work[$ - 7]
721	1640	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 5] > $.work[nn - 7]
721	1640	16	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 5] > work[$ - 7]
722	1645	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	RET	$ != 0.0
46033	1646	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
46033	1646	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
46033	1646	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
723	1647	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
723	1647	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
724	1652	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * $ < b2
724	1652	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * b1 < $
725	1661	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	1	DEF	gap2 > $ * a2
725	1661	16	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	1	DEF	gap2 > b2 * $
725	1661	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > b2 * a2
725	1661	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > 0.0
726	1687	8	EigenDecompositionImpl.java	updateSigma	THIS	EigenDecompositionImpl	1	DEF	tau < $.sigma
726	1687	8	EigenDecompositionImpl.java	updateSigma	tau	double	1	DEF	$ < sigma
46034	1712	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < m
46034	1712	8	EigenDecompositionImpl.java	findEigenVectors	m	int	0	NIL-FOR	i < $
46035	1721	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < m
46035	1721	8	EigenDecompositionImpl.java	findEigenVectors	m	int	0	NIL-FOR	i < $
46036	1749	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ < m - 1
46036	1749	8	EigenDecompositionImpl.java	findEigenvector	m	int	0	NIL-FOR	i < $ - 1
727	1752	12	EigenDecompositionImpl.java	findEigenvector	absG	double	0	DEF	$ < minG
727	1752	12	EigenDecompositionImpl.java	findEigenvector	minG	double	0	DEF	absG < $
46037	1764	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ >= 0
46038	1770	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ < m
46038	1770	8	EigenDecompositionImpl.java	findEigenvector	m	int	0	NIL-FOR	i < $
46039	1778	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ < m
46039	1778	8	EigenDecompositionImpl.java	findEigenvector	m	int	0	NIL-FOR	i < $
46040	1800	8	EigenDecompositionImpl.java	stationaryQuotientDifferenceWithShift	i	int	0	NIL-FOR	$ < nM1
46040	1800	8	EigenDecompositionImpl.java	stationaryQuotientDifferenceWithShift	nM1	int	0	NIL-FOR	i < $
46041	1826	8	EigenDecompositionImpl.java	progressiveQuotientDifferenceWithShift	i	int	0	NIL-FOR	$ >= 0
1148	177	4	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1148	177	4	EmbeddedRungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
46348	181	4	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
46348	181	4	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
1149	188	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.requiresDenseOutput()
1149	188	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
46349	208	4	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
46350	213	6	EmbeddedRungeKuttaIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
1150	215	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
1150	215	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1151	220	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1152	222	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.vecAbsoluteTolerance != null
46351	226	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
46351	226	12	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
46351	226	12	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
46352	238	8	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
46352	238	8	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
46353	240	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
46353	240	10	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
46353	240	10	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
46354	242	12	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
46354	242	12	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
46355	253	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
46355	253	8	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
46355	253	8	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
46356	255	10	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
46356	255	10	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
1153	263	8	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1154	267	10	EmbeddedRungeKuttaIntegrator.java	integrate	interpolator	AbstractStepInterpolator	1	DEF	manager.evaluateStep($)
1154	267	10	EmbeddedRungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolator)
1155	298	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
1156	303	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	manager.reset($.stepStart, y)
1156	303	6	EmbeddedRungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1156	303	6	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1156	303	6	EmbeddedRungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1157	309	6	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
954	141	12	EmpiricalDistributionImpl.java	load	THIS	EmpiricalDistributionImpl	0	DEF	$.sampleStats.getN() == 0
955	149	11	EmpiricalDistributionImpl.java	load	in	BufferedReader	0	DEF	$ != null
956	184	12	EmpiricalDistributionImpl.java	load	in	BufferedReader	0	DEF	$ != null
46155	353	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i< $.binCount - 1
46155	353	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$< binCount - 1
957	359	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	DEF	$.binStats.isEmpty()
46156	362	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
46156	362	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount
46157	386	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount-1
46157	386	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount-1
958	415	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	DEF	$.loaded
46158	424	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
46158	424	8	EmpiricalDistributionImpl.java	getNextValue	i	int	0	NIL-FOR	$ < binCount
959	425	11	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	RET	x <= $.upperBounds[i]
959	425	11	EmpiricalDistributionImpl.java	getNextValue	i	int	0	RET	x <= upperBounds[$]
959	425	11	EmpiricalDistributionImpl.java	getNextValue	x	double	0	RET	$ <= upperBounds[i]
960	427	15	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	0	RET	$.getN() > 0
961	428	19	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	1	RET	$.getStandardDeviation() > 0
1038	57	8	Erf.java	erf	x	double	0	DEF	$ < 0
46402	81	4	EulerStepInterpolator.java	computeInterpolatedState	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
46402	81	4	EulerStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
46421	180	12	EventState.java	evaluateStep	i	int	0	NIL-FOR	$ < n
46421	180	12	EventState.java	evaluateStep	n	int	0	NIL-FOR	i < $
1206	188	16	EventState.java	evaluateStep	THIS	EventState	1	FunctionEvaluationException:RET	$.g0Positive ^ (gb >= 0)
1206	188	16	EventState.java	evaluateStep	gb	double	1	FunctionEvaluationException:RET	g0Positive ^ ($ >= 0)
1207	210	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	Math.abs(root - ta) <= $.convergence
1207	210	20	EventState.java	evaluateStep	root	double	1	DEF	Math.abs($ - ta) <= convergence
1207	210	20	EventState.java	evaluateStep	ta	double	1	DEF	Math.abs(root - $) <= convergence
1208	214	27	EventState.java	evaluateStep	THIS	EventState	0	RET	Math.abs($.previousEventTime - root) > $.convergence
1208	214	27	EventState.java	evaluateStep	THIS	EventState	0	RET	Double.isNaN($.previousEventTime)
1208	214	27	EventState.java	evaluateStep	root	double	0	RET	Math.abs(previousEventTime - $) > convergence
1209	217	24	EventState.java	evaluateStep	THIS	EventState	0	RET	$.pendingEvent
1209	217	24	EventState.java	evaluateStep	THIS	EventState	0	RET	Math.abs(t1 - $.pendingEventTime) <= $.convergence
1209	217	24	EventState.java	evaluateStep	t1	double	0	RET	Math.abs($ - pendingEventTime) <= convergence
1210	245	12	EventState.java	evaluateStep	cause	Throwable	1	DEF	$ != null
1210	245	12	EventState.java	evaluateStep	cause	Throwable	1	DEF	$ instanceof DerivativeException
1211	247	19	EventState.java	evaluateStep	cause	Throwable	0	DEF	$ instanceof EventException
1211	247	19	EventState.java	evaluateStep	cause	Throwable	0	DEF	$ != null
1212	278	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	$.pendingEvent
1213	309	8	EventState.java	reset	THIS	EventState	0	RET	$.pendingEvent
1214	313	8	EventState.java	reset	THIS	EventState	0	DEF	$.nextAction == EventHandler.RESET_STATE
399	52	8	ExponentialDistributionImpl.java	setMean	mean	double	0	IllegalArgumentException	$ <= 0.0
400	73	8	ExponentialDistributionImpl.java	density	x	Double	0	RET	$ < 0
401	96	8	ExponentialDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
402	119	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ > 1.0
402	119	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ < 0.0
403	122	15	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1.0
404	155	8	ExponentialDistributionImpl.java	getDomainUpperBound	p	double	1	RET	$ < .5
405	176	8	ExponentialDistributionImpl.java	getInitialDomain	p	double	1	RET	$ < .5
354	72	8	FDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
355	100	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
356	103	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
357	146	8	FDistributionImpl.java	getInitialDomain	d	double	0	DEF	$ > 2.0
358	160	8	FDistributionImpl.java	setNumeratorDegreesOfFreedom	degreesOfFreedom	double	0	IllegalArgumentException	$ <= 0.0
359	182	8	FDistributionImpl.java	setDenominatorDegreesOfFreedom	degreesOfFreedom	double	0	IllegalArgumentException	$ <= 0.0
46244	241	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (N >> 1)
46245	255	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (N >> 1)
1056	304	8	FastFourierTransformer.java	fft	THIS	FastFourierTransformer	0	RET	f.$.length == 1
1056	304	8	FastFourierTransformer.java	fft	f	double	0	RET	$.length == 1
46254	313	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
46255	323	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
46256	364	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
46257	367	12	FastFourierTransformer.java	fft	j	int	0	NIL-WHILE	$ >= k
46257	367	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	$ > 0
46257	367	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	j >= $
46258	374	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
46259	389	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
46260	391	12	FastFourierTransformer.java	fft	j	int	0	NIL-FOR	$ < N
46261	392	16	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	k < $
46261	392	16	FastFourierTransformer.java	fft	k	int	0	NIL-FOR	$ < i
1059	433	8	FastFourierTransformer.java	sample	n	int	0	DEF	$ <= 0
46262	441	8	FastFourierTransformer.java	sample	i	int	0	NIL-FOR	$ < n
46262	441	8	FastFourierTransformer.java	sample	n	int	0	NIL-FOR	i < $
46263	456	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
46263	456	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
46263	456	8	FastFourierTransformer.java	scaleArray	f	double	0	NIL-FOR	i < $.length
46264	471	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
46264	471	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
46264	471	8	FastFourierTransformer.java	scaleArray	f	Complex	0	NIL-FOR	i < $.length
1060	494	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	DEF	$.isPowerOf2(d.$.length)
1060	494	8	FastFourierTransformer.java	verifyDataSet	d	double	0	DEF	isPowerOf2($.length)
1061	507	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	DEF	$.isPowerOf2(o.$.length)
1061	507	8	FastFourierTransformer.java	verifyDataSet	o	Object	0	DEF	isPowerOf2($.length)
1062	523	8	FastFourierTransformer.java	verifyInterval	lower	double	0	DEF	$ >= upper
1062	523	8	FastFourierTransformer.java	verifyInterval	upper	double	0	DEF	lower >= $
46265	549	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize.$.length
46265	549	8	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize.length
46265	549	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $.length
1063	569	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == dimensionSize.$.length
1063	569	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	1	DEF	subVector.length == $.length
1063	569	8	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == dimensionSize.length
46266	571	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
46266	571	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
46266	571	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
1064	577	12	FastFourierTransformer.java	mdfft	forward	boolean	1	DEF	$
46267	582	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
46267	582	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
46267	582	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
1065	589	12	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == d
1065	589	12	FastFourierTransformer.java	mdfft	d	int	1	DEF	subVector.length == $
1065	589	12	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == d
46268	595	16	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize[subVector.$.length]
46268	595	16	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[subVector.length]
46268	595	16	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[subVector.length]
46268	595	16	FastFourierTransformer.java	mdfft	subVector	int[]	0	NIL-FOR	i < dimensionSize[$.length]
1052	164	8	FastHadamardTransformer.java	fht	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
46246	175	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
46246	175	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
46247	183	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
46247	183	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
46248	189	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
46248	189	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
1053	214	8	FastHadamardTransformer.java	fht	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
46249	225	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
46249	225	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
46250	233	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
46250	233	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
46251	239	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
46251	239	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
1054	220	8	FastSineTransformer.java	fst	f	double	0	DEF	$[0] != 0.0
46252	234	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (N >> 1)
46253	246	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (N >> 1)
807	97	8	FirstMoment.java	increment	THIS	FirstMoment	0	DEF	$.n == 0
791	84	8	FourthMoment.java	increment	THIS	FourthMoment	0	DEF	$.n < 1
267	142	8	Fraction.java	Fraction	overflow	long	0	FractionConversionException	a0 > $
267	142	8	Fraction.java	Fraction	a0	long	0	FractionConversionException	$ > overflow
268	148	8	Fraction.java	Fraction	a0	long	0	RET	Math.abs($ - value) < epsilon
268	148	8	Fraction.java	Fraction	value	double	0	RET	Math.abs(a0 - $) < epsilon
268	148	8	Fraction.java	Fraction	epsilon	double	0	RET	Math.abs(a0 - value) < $
45473	164	8	Fraction.java	Fraction	stop	boolean	0	NIL-DOWHILE	$
269	170	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	p2 > $
269	170	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	q2 > $
269	170	12	Fraction.java	Fraction	p2	long	0	FractionConversionException	$ > overflow
269	170	12	Fraction.java	Fraction	q2	long	0	FractionConversionException	$ > overflow
270	175	12	Fraction.java	Fraction	convergent	double	1	DEF	Math.abs($ - value) > epsilon
270	175	12	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
270	175	12	Fraction.java	Fraction	n	int	1	DEF	$ < maxIterations
270	175	12	Fraction.java	Fraction	value	double	1	DEF	Math.abs(convergent - $) > epsilon
270	175	12	Fraction.java	Fraction	epsilon	double	1	DEF	Math.abs(convergent - value) > $
270	175	12	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
270	175	12	Fraction.java	Fraction	maxIterations	int	1	DEF	n < $
271	187	8	Fraction.java	Fraction	n	int	0	FractionConversionException	$ >= maxIterations
271	187	8	Fraction.java	Fraction	maxIterations	int	0	FractionConversionException	n >= $
272	191	8	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
272	191	8	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
273	210	8	Fraction.java	Fraction	den	int	0	DEF	$ == 0
274	214	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
275	215	12	Fraction.java	Fraction	num	int	0	DEF	$ == Integer.MIN_VALUE
275	215	12	Fraction.java	Fraction	den	int	0	DEF	$ == Integer.MIN_VALUE
276	224	8	Fraction.java	Fraction	d	int	0	DEF	$ > 1
277	230	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
278	244	8	Fraction.java	abs	THIS	Fraction	1	DEF	$.numerator >= 0
279	261	8	Fraction.java	compareTo	THIS	Fraction	0	DEF	$ != object
279	261	8	Fraction.java	compareTo	object	Fraction	0	DEF	this != $
280	265	12	Fraction.java	compareTo	first	double	1	DEF	$ < second
280	265	12	Fraction.java	compareTo	second	double	1	DEF	first < $
281	267	19	Fraction.java	compareTo	first	double	0	DEF	$ > second
281	267	19	Fraction.java	compareTo	second	double	0	DEF	first > $
282	296	8	Fraction.java	equals	THIS	Fraction	1	DEF	$ == other
282	296	8	Fraction.java	equals	other	Object	1	DEF	this == $
283	298	15	Fraction.java	equals	other	Object	1	DEF	$ == null
284	372	8	Fraction.java	negate	THIS	Fraction	0	DEF	$.numerator==Integer.MIN_VALUE
285	426	8	Fraction.java	addSub	fraction	Fraction	0	IllegalArgumentException	$ == null
286	430	8	Fraction.java	addSub	THIS	Fraction	0	RET	$.numerator == 0
287	433	8	Fraction.java	addSub	THIS	Fraction	0	RET	fraction.$.numerator == 0
287	433	8	Fraction.java	addSub	fraction	Fraction	0	RET	$.numerator == 0
288	439	8	Fraction.java	addSub	d1	int	0	RET	$==1
289	463	8	Fraction.java	addSub	w	BigInteger	0	DEF	$.bitLength() > 31
290	483	8	Fraction.java	multiply	fraction	Fraction	0	IllegalArgumentException	$ == null
291	486	8	Fraction.java	multiply	THIS	Fraction	0	RET	fraction.$.numerator == 0
291	486	8	Fraction.java	multiply	THIS	Fraction	0	RET	$.numerator == 0
291	486	8	Fraction.java	multiply	fraction	Fraction	0	RET	$.numerator == 0
292	509	8	Fraction.java	divide	fraction	Fraction	0	IllegalArgumentException	$ == null
293	512	8	Fraction.java	divide	THIS	Fraction	0	DEF	fraction.$.numerator == 0
293	512	8	Fraction.java	divide	fraction	Fraction	0	DEF	$.numerator == 0
294	531	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$ == 0
295	535	8	Fraction.java	getReducedFraction	numerator	int	0	RET	$==0
296	539	8	Fraction.java	getReducedFraction	numerator	int	0	DEF	($&1)==0
296	539	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
297	542	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$ < 0
298	543	12	Fraction.java	getReducedFraction	numerator	int	0	DEF	$==Integer.MIN_VALUE
298	543	12	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
258	202	8	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Fraction
259	204	15	FractionFormat.java	format	obj	Object	1	IllegalArgumentException	$ instanceof Number
260	246	8	FractionFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
261	269	8	FractionFormat.java	parse	num	Number	0	RET	$ == null
262	302	8	FractionFormat.java	parse	den	Number	0	RET	$ == null
263	320	8	FractionFormat.java	setDenominatorFormat	format	NumberFormat	0	IllegalArgumentException	$ == null
264	334	8	FractionFormat.java	setNumeratorFormat	format	NumberFormat	0	IllegalArgumentException	$ == null
265	365	9	FractionFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
265	365	9	FractionFormat.java	parseNextCharacter	n	int	0	DEF	index < $
45472	367	13	FractionFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
45472	367	13	FractionFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
45472	367	13	FractionFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
266	372	13	FractionFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
266	372	13	FractionFormat.java	parseNextCharacter	n	int	0	DEF	index < $
46127	76	8	Frequency.java	toString	iter	Iterator	0	NIL-WHILE	$.hasNext()
908	98	8	Frequency.java	addValue	v	Object	0	DEF	$ instanceof Integer
909	103	12	Frequency.java	addValue	count	Long	1	DEF	$ == null
46128	178	8	Frequency.java	getSumFreq	iterator	Iterator	0	NIL-WHILE	$.hasNext()
910	191	8	Frequency.java	getCount	v	Object	0	RET	$ instanceof Integer
911	197	12	Frequency.java	getCount	count	Long	0	DEF	$ != null
912	248	8	Frequency.java	getPct	THIS	Frequency	0	RET	$.getSumFreq() == 0
913	298	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	$.getSumFreq() == 0
914	301	8	Frequency.java	getCumFreq	v	Object	0	RET	$ instanceof Integer
915	305	8	Frequency.java	getCumFreq	c	Comparator	0	DEF	$ == null
916	312	12	Frequency.java	getCumFreq	value	Long	0	DEF	$ != null
917	319	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.firstKey()) < 0
917	319	8	Frequency.java	getCumFreq	c	Comparator	0	RET	$.compare(v, freqTable.firstKey()) < 0
917	319	8	Frequency.java	getCumFreq	v	Object	0	RET	c.compare($, freqTable.firstKey()) < 0
918	323	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.lastKey()) >= 0
918	323	8	Frequency.java	getCumFreq	c	Comparator	0	RET	$.compare(v, freqTable.lastKey()) >= 0
918	323	8	Frequency.java	getCumFreq	v	Object	0	RET	c.compare($, freqTable.lastKey()) >= 0
46129	328	8	Frequency.java	getCumFreq	values	Iterator	0	NIL-WHILE	$.hasNext()
919	330	12	Frequency.java	getCumFreq	nextValue	Object	1	DEF	c.compare(v, $) > 0
919	330	12	Frequency.java	getCumFreq	c	Comparator	1	DEF	$.compare(v, nextValue) > 0
919	330	12	Frequency.java	getCumFreq	v	Object	1	DEF	c.compare($, nextValue) > 0
920	389	8	Frequency.java	getCumPct	THIS	Frequency	0	RET	$.getSumFreq() == 0
923	80	8	GLSMultipleLinearRegression.java	getOmegaInverse	THIS	GLSMultipleLinearRegression	0	DEF	$.OmegaInverse == null
1042	90	8	Gamma.java	logGamma	x	double	1	DEF	$ <= 0.0
1042	90	8	Gamma.java	logGamma	x	double	1	DEF	Double.isNaN($)
46242	96	12	Gamma.java	logGamma	i	int	0	NIL-FOR	$ > 0
1043	158	8	Gamma.java	regularizedGammaP	a	double	1	DEF	$ <= 0.0
1043	158	8	Gamma.java	regularizedGammaP	a	double	1	DEF	Double.isNaN($)
1043	158	8	Gamma.java	regularizedGammaP	x	double	1	DEF	Double.isNaN($)
1043	158	8	Gamma.java	regularizedGammaP	x	double	1	DEF	$ < 0.0
1044	160	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ == 0.0
1045	162	15	Gamma.java	regularizedGammaP	a	double	1	DEF	x > $
1045	162	15	Gamma.java	regularizedGammaP	a	double	1	DEF	$ >= 1.0
1045	162	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ > a
46243	171	12	Gamma.java	regularizedGammaP	n	double	0	NIL-WHILE	$ < maxIterations
46243	171	12	Gamma.java	regularizedGammaP	an	double	0	NIL-WHILE	Math.abs($) > epsilon
46243	171	12	Gamma.java	regularizedGammaP	epsilon	double	0	NIL-WHILE	Math.abs(an) > $
46243	171	12	Gamma.java	regularizedGammaP	maxIterations	int	0	NIL-WHILE	n < $
1046	179	12	Gamma.java	regularizedGammaP	n	double	1	MaxIterationsExceededException	$ >= maxIterations
1046	179	12	Gamma.java	regularizedGammaP	maxIterations	int	1	MaxIterationsExceededException	n >= $
1047	233	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	Double.isNaN($)
1047	233	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ <= 0.0
1047	233	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < 0.0
1047	233	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	Double.isNaN($)
1048	235	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ == 0.0
1049	237	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ < 1.0
1049	237	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	x < $
1049	237	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < a
312	72	8	GammaDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
313	96	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
314	99	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
315	111	8	GammaDistributionImpl.java	setAlpha	alpha	double	0	IllegalArgumentException	$ <= 0.0
316	131	8	GammaDistributionImpl.java	setBeta	beta	double	0	IllegalArgumentException	$ <= 0.0
317	152	8	GammaDistributionImpl.java	density	x	Double	0	RET	$ < 0
318	186	8	GammaDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
319	211	8	GammaDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
46177	169	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	Math.abs($.cost) > $.convergence
46177	169	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	Math.abs(previous - $.cost) > ($.cost * $.steadyStateThreshold)
46177	169	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	$.getCostEvaluations() < 2
46177	169	8	GaussNewtonEstimator.java	estimate	previous	double	0	NIL-DOWHILE	Math.abs($ - cost) > (cost * steadyStateThreshold)
46178	175	12	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	i < $.measurements.$.length
46178	175	12	GaussNewtonEstimator.java	estimate	i	int	0	NIL-FOR	$ < measurements.length
1002	176	16	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	DEF	$.measurements [i].isIgnored()
1002	176	16	GaussNewtonEstimator.java	estimate	i	int	0	DEF	measurements [$].isIgnored()
46179	182	20	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	j < $.parameters.$.length
46179	182	20	GaussNewtonEstimator.java	estimate	j	int	0	NIL-FOR	$ < parameters.length
46180	188	20	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	k < $.parameters.$.length
46180	188	20	GaussNewtonEstimator.java	estimate	k	int	0	NIL-FOR	$ < parameters.length
46181	190	24	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	l < $.parameters.$.length
46181	190	24	GaussNewtonEstimator.java	estimate	l	int	0	NIL-FOR	$ < parameters.length
46182	208	16	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	i < $.parameters.$.length
46182	208	16	GaussNewtonEstimator.java	estimate	i	int	0	NIL-FOR	$ < parameters.length
46175	51	8	GeneticAlgorithm.java	evolve	current	Population	0	NIL-WHILE	condition.isSatisfied($)
46175	51	8	GeneticAlgorithm.java	evolve	condition	StoppingCondition	0	NIL-WHILE	$.isSatisfied(current)
46176	128	8	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	NIL-WHILE	$.getPopulationSize() < $ .getPopulationLimit()
999	134	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	Math.random() < $.getCrossoverRate()
1000	141	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	Math.random() < $.getMutationRate()
1001	152	12	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	DEF	$.getPopulationSize() < $ .getPopulationLimit()
805	102	8	GeometricMean.java	getResult	THIS	GeometricMean	1	RET	$.sumOfLogs.getN() > 0
806	188	8	GeometricMean.java	checkEmpty	THIS	GeometricMean	0	DEF	$.getN() > 0
46347	99	4	GillStepInterpolator.java	computeInterpolatedState	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
46347	99	4	GillStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
1075	176	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stabilityReduction	double	1	DEF	$ < 0.0001
1075	176	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stabilityReduction	double	1	DEF	$ > 0.9999
1076	211	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl1	double	1	DEF	$ < 0.0001
1076	211	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl1	double	1	DEF	$ > 0.9999
1077	217	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl2	double	1	DEF	$ > 0.9999
1077	217	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl2	double	1	DEF	$ < 0.0001
1078	223	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl3	double	1	DEF	$ < 0.0001
1078	223	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl3	double	1	DEF	$ > 0.9999
1079	229	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl4	double	1	DEF	$ < 1.0001
1079	229	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl4	double	1	DEF	$ > 999.9
1080	263	4	GraggBulirschStoerIntegrator.java	setOrderControl	maxOrder	int	0	DEF	$ % 2 != 0
1080	263	4	GraggBulirschStoerIntegrator.java	setOrderControl	maxOrder	int	0	DEF	$ <= 6
1081	267	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl1	double	1	DEF	$ > 0.9999
1081	267	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl1	double	1	DEF	$ < 0.0001
1082	273	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl2	double	1	DEF	$ > 0.9999
1082	273	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl2	double	1	DEF	$ < 0.0001
1083	313	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence == null
1083	313	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence.$.length != size
1083	313	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	DEF	sequence.length != $
1084	322	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
46291	324	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
46291	324	6	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
46292	329	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
46292	329	6	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
46293	337	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
46293	337	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
46294	342	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
46294	342	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
46295	344	6	GraggBulirschStoerIntegrator.java	initializeArrays	l	int	0	NIL-FOR	$ < k
46295	344	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	l < $
1085	367	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudif	int	1	DEF	$ <= 0
1085	367	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudif	int	1	DEF	$ >= 7
1086	381	4	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	1	DEF	$.vecAbsoluteTolerance == null
46296	382	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
46296	382	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
46296	382	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
46297	387	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
46297	387	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
46297	387	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
46298	425	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
46298	425	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
46298	425	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
46299	432	4	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	NIL-FOR	$ < n
46299	432	4	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	NIL-FOR	j < $
1087	434	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	DEF	2 * $ == n
1087	434	6	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	DEF	2 * j == $
46300	440	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
46300	440	6	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
46300	440	6	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
1088	449	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	k < $.maxIter
1088	449	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	$.performTest
1088	449	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	j <= $.maxChecks
1088	449	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	RET	$ <= maxChecks
1088	449	6	GraggBulirschStoerIntegrator.java	tryStep	k	int	0	RET	$ < maxIter
46301	451	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < y0.$.length
46301	451	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < y0.length
46301	451	8	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	l < $.length
46302	456	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < y0.$.length
46302	456	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < y0.length
46302	456	8	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	l < $.length
1089	460	8	GraggBulirschStoerIntegrator.java	tryStep	initialNorm	double	0	RET	deltaNorm > 4 * Math.max(1.0e-15, $)
1089	460	8	GraggBulirschStoerIntegrator.java	tryStep	deltaNorm	double	0	RET	$ > 4 * Math.max(1.0e-15, initialNorm)
46303	468	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
46303	468	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
46303	468	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
46304	487	4	GraggBulirschStoerIntegrator.java	extrapolate	j	int	0	NIL-FOR	$ < k
46304	487	4	GraggBulirschStoerIntegrator.java	extrapolate	k	int	0	NIL-FOR	j < $
46305	488	6	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
46305	488	6	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
46305	488	6	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
46306	496	4	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
46306	496	4	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
46306	496	4	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
46307	518	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length-1
46307	518	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length-1
46308	524	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length
46308	524	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length
46309	531	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < $.sequence[k]
46309	531	6	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < sequence[k]
46309	531	6	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	l < sequence[$]
1090	537	4	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1090	537	4	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
1091	543	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
46310	546	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < yMidDots.$.length
46310	546	6	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < yMidDots.length
46310	546	6	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	0	NIL-FOR	j < $.length
1092	567	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
1092	567	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
46311	588	4	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
1093	593	6	GraggBulirschStoerIntegrator.java	integrate	newStep	boolean	0	DEF	$
1094	598	8	GraggBulirschStoerIntegrator.java	integrate	firstStepAlreadyComputed	boolean	0	DEF	$
1095	602	8	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1096	608	10	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1097	621	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize < t
1097	621	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize > t
1097	621	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1097	621	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1097	621	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
1097	621	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
46312	630	6	GraggBulirschStoerIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
1098	635	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.tryStep(equations, $.stepStart, y, $.stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1098	635	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	tryStep(equations, stepStart, y, stepSize, $, scale, fk[$], ($ == 0) ? yMidDots[0] : diagonal[$-1], ($ == 0) ? y1 : y1Diag[$-1], yTmp)
1098	635	8	GraggBulirschStoerIntegrator.java	integrate	y1	double[]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? $ : y1Diag[k-1], yTmp)
1098	635	8	GraggBulirschStoerIntegrator.java	integrate	yTmp	double[]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], $)
1098	635	8	GraggBulirschStoerIntegrator.java	integrate	diagonal	double[][]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : $[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1098	635	8	GraggBulirschStoerIntegrator.java	integrate	y1Diag	double[][]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : $[k-1], yTmp)
1098	635	8	GraggBulirschStoerIntegrator.java	integrate	fk	double[][][]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, $[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1098	635	8	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? $[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1098	635	8	GraggBulirschStoerIntegrator.java	integrate	scale	double[]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, $, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1098	635	8	GraggBulirschStoerIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	1	DEF	tryStep($, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1098	635	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	1	DEF	tryStep(equations, stepStart, $, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1099	648	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 0
46313	657	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < y0.$.length
46313	657	12	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
46313	657	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
1100	663	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > maxError
1100	663	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > 1.0e15
1100	663	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ > 1
1100	663	12	GraggBulirschStoerIntegrator.java	integrate	maxError	double	1	DEF	error > $
1101	684	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1101	684	16	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
1102	687	18	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1103	696	20	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
1103	696	20	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
1104	702	22	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1104	702	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1104	702	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1105	714	16	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1106	722	18	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
1106	722	18	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
1107	727	20	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1107	727	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1107	727	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1108	738	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > 1.0
1109	740	18	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1109	740	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1109	740	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1110	751	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ <= 1.0
1110	751	16	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1110	751	16	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1111	765	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.denseOutput
1111	765	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
46314	768	8	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
46314	768	8	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
46315	777	8	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < mu
46315	777	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	NIL-FOR	l < $
46316	783	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
46316	783	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
46316	783	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
46317	786	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k - l2
46317	786	10	GraggBulirschStoerIntegrator.java	integrate	l2	int	0	NIL-FOR	j <= k - $
46317	786	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $ - l2
46318	789	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
46318	789	12	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
46318	789	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
46319	794	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
46319	794	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
46319	794	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
46320	799	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
46320	799	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
46321	800	12	GraggBulirschStoerIntegrator.java	integrate	m	int	0	NIL-FOR	$ >= 2 * (l + 1)
46321	800	12	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	m >= 2 * ($ + 1)
46322	801	14	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
46322	801	14	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
46322	801	14	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
1112	809	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	DEF	$ >= 0
1113	816	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.useInterpolationError
1114	821	12	GraggBulirschStoerIntegrator.java	integrate	interpError	double	0	DEF	$ > 10.0
1115	828	10	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1116	830	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.evaluateStep(interpolator)
1116	830	12	GraggBulirschStoerIntegrator.java	integrate	interpolator	AbstractStepInterpolator	0	DEF	eventsHandlersManager.evaluateStep($)
1117	838	8	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1118	846	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1119	853	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.stop()
1120	864	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.reset($.stepStart, y)
1120	864	8	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1120	864	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	eventsHandlersManager.reset(stepStart, $)
1121	871	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ == 1
1122	873	10	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
1123	876	15	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ <= targetIter
1123	876	15	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k <= $
1124	878	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k-1] < $.orderControl1 * $.costPerTimeUnit[k]
1124	878	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1125	880	17	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
1125	880	17	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
1126	885	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k-2] < $.orderControl1 * $.costPerTimeUnit[k-1]
1126	885	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 2
1126	885	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$-2] < orderControl1 * costPerTimeUnit[$-1]
1127	889	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[optimalIter]
1127	889	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	0	DEF	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[$]
1127	889	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[optimalIter]
1128	894	8	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	1	DEF	$
1129	901	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	1	DEF	$ <= k
1129	901	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	optimalIter <= $
1130	904	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
1130	904	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
1130	904	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ < targetIter
1130	904	12	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k < $
1131	923	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1132	929	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	1	DEF	$
1162	112	4	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ < 0
1163	119	6	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms != null
46382	121	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
46382	121	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
46382	121	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
46383	125	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
46383	125	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
46383	125	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
1164	132	6	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ <= 4
46384	136	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.errfac.$.length
46384	136	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < errfac.length
46385	140	10	GraggBulirschStoerStepInterpolator.java	resetTables	j	int	0	NIL-FOR	$ <= i
46385	140	10	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	j <= $
1165	211	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	1	DEF	interpolator.$.polynoms == null
1165	211	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	interpolator	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms == null
46386	216	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.polynoms.$.length
46386	216	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	i	int	0	NIL-FOR	$ < polynoms.length
1166	238	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms.$.length <= (mu + 4)
1166	238	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms == null
1166	238	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	polynoms.length <= ($ + 4)
46387	244	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
46387	244	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	i	int	0	NIL-FOR	$ < currentState.length
1167	257	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	RET	$ < 0
1168	265	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 0
1169	269	8	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 1
1170	273	10	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 2
46388	277	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	j	int	0	NIL-FOR	$ <= mu
46388	277	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	NIL-FOR	j <= $
1171	297	4	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree >= 5
46389	298	6	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
46389	298	6	GraggBulirschStoerStepInterpolator.java	estimateError	i	int	0	NIL-FOR	$ < currentState.length
46390	323	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < dimension
46390	323	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedState	dimension	int	0	NIL-FOR	i < $
1172	332	8	GraggBulirschStoerStepInterpolator.java	computeInterpolatedState	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree > 3
46391	335	12	GraggBulirschStoerStepInterpolator.java	computeInterpolatedState	j	int	0	NIL-FOR	$ > 3
1173	346	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedState	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.h == 0
46392	365	4	GraggBulirschStoerStepInterpolator.java	writeExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
46392	365	4	GraggBulirschStoerStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ <= currentDegree
46393	366	6	GraggBulirschStoerStepInterpolator.java	writeExternal	l	int	0	NIL-FOR	$ < dimension
46393	366	6	GraggBulirschStoerStepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	l < $
46394	386	4	GraggBulirschStoerStepInterpolator.java	readExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
46394	386	4	GraggBulirschStoerStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ <= currentDegree
46395	387	6	GraggBulirschStoerStepInterpolator.java	readExternal	l	int	0	NIL-FOR	$ < dimension
46395	387	6	GraggBulirschStoerStepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	l < $
46419	112	4	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	j < y0.$.length
46419	112	4	HighamHall54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
46419	112	4	HighamHall54Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
46420	114	6	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	l < $.staticE.$.length
46420	114	6	HighamHall54Integrator.java	estimateError	l	int	0	NIL-FOR	$ < staticE.length
46418	83	4	HighamHall54StepInterpolator.java	computeInterpolatedState	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
46418	83	4	HighamHall54StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
383	55	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	IllegalArgumentException	numberOfSuccesses > $
383	55	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	numberOfSuccesses	int	0	IllegalArgumentException	$ > populationSize
384	60	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	IllegalArgumentException	sampleSize > $
384	60	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	sampleSize	int	0	IllegalArgumentException	$ > populationSize
385	82	8	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x < $[0]
385	82	8	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < domain[0]
386	84	15	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x >= $[1]
386	84	15	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= domain[1]
387	194	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x < $[0]
387	194	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x > $[1]
387	194	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ < domain[0]
387	194	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ > domain[1]
388	225	8	HypergeometricDistributionImpl.java	setNumberOfSuccesses	num	int	0	IllegalArgumentException	$ < 0
389	238	8	HypergeometricDistributionImpl.java	setPopulationSize	size	int	0	IllegalArgumentException	$ <= 0
390	251	8	HypergeometricDistributionImpl.java	setSampleSize	size	int	0	IllegalArgumentException	$ < 0
391	272	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x < $[0]
391	272	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ < domain[0]
392	274	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x > $[1]
392	274	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ > domain[1]
45477	300	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x0	int	0	NIL-WHILE	$ != x1
45477	300	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x1	int	0	NIL-WHILE	x0 != $
800	91	8	Kurtosis.java	increment	THIS	Kurtosis	1	DEF	$.incMoment
801	105	8	Kurtosis.java	getResult	THIS	Kurtosis	0	DEF	$.moment.getN() > 3
802	107	16	Kurtosis.java	getResult	THIS	Kurtosis	1	DEF	$.moment.$.n <= 3
802	107	16	Kurtosis.java	getResult	variance	double	1	DEF	$ < 10E-20
803	124	8	Kurtosis.java	clear	THIS	Kurtosis	1	DEF	$.incMoment
804	162	8	Kurtosis.java	evaluate	THIS	Kurtosis	0	DEF	$.test(values, begin, length)
804	162	8	Kurtosis.java	evaluate	values	double[]	0	DEF	test($, begin, length)
804	162	8	Kurtosis.java	evaluate	begin	int	0	DEF	test(values, $, length)
804	162	8	Kurtosis.java	evaluate	length	int	0	DEF	$ > 3
804	162	8	Kurtosis.java	evaluate	length	int	0	DEF	test(values, begin, $)
46095	173	12	Kurtosis.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
46095	173	12	Kurtosis.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
46095	173	12	Kurtosis.java	evaluate	length	int	0	NIL-FOR	i < begin + $
728	89	8	LUDecompositionImpl.java	LUDecompositionImpl	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
46042	101	8	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
46042	101	8	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
46043	108	8	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	$ < m
46043	108	8	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	col < $
46044	113	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < col
46044	113	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	row < $
46045	116	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < row
46045	116	16	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	i < $
46046	125	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
46046	125	12	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
46047	128	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < col
46047	128	16	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	i < $
729	134	16	LUDecompositionImpl.java	LUDecompositionImpl	sum	double	0	DEF	Math.abs($) > largest
729	134	16	LUDecompositionImpl.java	LUDecompositionImpl	largest	double	0	DEF	Math.abs(sum) > $
730	141	12	LUDecompositionImpl.java	LUDecompositionImpl	THIS	LUDecompositionImpl	0	RET	Math.abs($.lu[max][col]) < singularityThreshold
730	141	12	LUDecompositionImpl.java	LUDecompositionImpl	max	int	0	RET	Math.abs(lu[$][col]) < singularityThreshold
730	141	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	RET	Math.abs(lu[max][$]) < singularityThreshold
730	141	12	LUDecompositionImpl.java	LUDecompositionImpl	singularityThreshold	double	0	RET	Math.abs(lu[max][col]) < $
731	147	12	LUDecompositionImpl.java	LUDecompositionImpl	max	int	0	DEF	$ != col
731	147	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	DEF	max != $
46048	149	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < m
46048	149	16	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	i < $
46049	162	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
46049	162	12	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
732	171	8	LUDecompositionImpl.java	getL	THIS	LUDecompositionImpl	0	DEF	$.cachedL == null
732	171	8	LUDecompositionImpl.java	getL	THIS	LUDecompositionImpl	0	DEF	$.singular
46050	174	12	LUDecompositionImpl.java	getL	i	int	0	NIL-FOR	$ < m
46050	174	12	LUDecompositionImpl.java	getL	m	int	0	NIL-FOR	i < $
46051	176	16	LUDecompositionImpl.java	getL	j	int	0	NIL-FOR	$ < i
46051	176	16	LUDecompositionImpl.java	getL	i	int	0	NIL-FOR	j < $
733	187	8	LUDecompositionImpl.java	getU	THIS	LUDecompositionImpl	0	DEF	$.cachedU == null
733	187	8	LUDecompositionImpl.java	getU	THIS	LUDecompositionImpl	0	DEF	$.singular
46052	190	12	LUDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < m
46052	190	12	LUDecompositionImpl.java	getU	m	int	0	NIL-FOR	i < $
46053	192	16	LUDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < m
46053	192	16	LUDecompositionImpl.java	getU	m	int	0	NIL-FOR	j < $
734	202	8	LUDecompositionImpl.java	getP	THIS	LUDecompositionImpl	0	DEF	$.cachedP == null
734	202	8	LUDecompositionImpl.java	getP	THIS	LUDecompositionImpl	0	DEF	$.singular
46054	205	12	LUDecompositionImpl.java	getP	i	int	0	NIL-FOR	$ < m
46054	205	12	LUDecompositionImpl.java	getP	m	int	0	NIL-FOR	i < $
735	219	8	LUDecompositionImpl.java	getDeterminant	THIS	LUDecompositionImpl	1	RET	$.singular
46055	224	12	LUDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < m
46055	224	12	LUDecompositionImpl.java	getDeterminant	m	int	0	NIL-FOR	i < $
1287	64	8	LaguerreSolver.java	LaguerreSolver	f	UnivariateRealFunction	1	DEF	$ instanceof PolynomialFunction
1288	124	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1288	124	8	LaguerreSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1289	125	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1289	125	8	LaguerreSolver.java	solve	max	double	0	RET	f.value($) == 0.0
1290	126	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
1290	126	8	LaguerreSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
1291	130	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	1	RET	$.isBracketing(min, initial, f)
1291	130	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
1291	130	8	LaguerreSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
1291	130	8	LaguerreSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
1292	162	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	DEF	$ instanceof PolynomialFunction
1293	167	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1293	167	8	LaguerreSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1294	168	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1294	168	8	LaguerreSolver.java	solve	max	double	0	RET	f.value($) == 0.0
46441	173	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-FOR	i < coefficients.$.length
46441	173	8	LaguerreSolver.java	solve	i	int	0	NIL-FOR	$ < coefficients.length
46441	173	8	LaguerreSolver.java	solve	coefficients	double[]	0	NIL-FOR	i < $.length
1295	178	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.isRootOK(min, max, z)
1295	178	8	LaguerreSolver.java	solve	z	Complex	0	RET	isRootOK(min, max, $)
1295	178	8	LaguerreSolver.java	solve	min	double	0	RET	isRootOK($, max, z)
1295	178	8	LaguerreSolver.java	solve	max	double	0	RET	isRootOK(min, $, z)
46442	185	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-FOR	i < root.$.length
46442	185	8	LaguerreSolver.java	solve	i	int	0	NIL-FOR	$ < root.length
46442	185	8	LaguerreSolver.java	solve	root	Complex[]	0	NIL-FOR	i < $.length
1296	186	12	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.isRootOK(min, max, root[i])
1296	186	12	LaguerreSolver.java	solve	i	int	0	RET	isRootOK(min, max, root[$])
1296	186	12	LaguerreSolver.java	solve	root	Complex[]	0	RET	isRootOK(min, max, $[i])
1296	186	12	LaguerreSolver.java	solve	min	double	0	RET	isRootOK($, max, root[i])
1296	186	12	LaguerreSolver.java	solve	max	double	0	RET	isRootOK(min, $, root[i])
46443	230	8	LaguerreSolver.java	solveAll	THIS	LaguerreSolver	0	NIL-FOR	i < c.$.length
46443	230	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ < c.length
46443	230	8	LaguerreSolver.java	solveAll	c	Complex[]	0	NIL-FOR	i < $.length
1297	254	8	LaguerreSolver.java	solveAll	n	int	0	IllegalArgumentException	$ < 1
46444	259	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ <= n
46444	259	8	LaguerreSolver.java	solveAll	n	int	0	NIL-FOR	i <= $
46445	265	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ < n
46445	265	8	LaguerreSolver.java	solveAll	n	int	0	NIL-FOR	i < $
46446	272	12	LaguerreSolver.java	solveAll	j	int	0	NIL-FOR	$ >= 0
1298	302	8	LaguerreSolver.java	solve	n	int	0	IllegalArgumentException	$ < 1
46447	320	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-WHILE	i <= $.maximalIterationCount
46447	320	8	LaguerreSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
46448	326	12	LaguerreSolver.java	solve	j	int	0	NIL-FOR	$ >= 0
1299	336	12	LaguerreSolver.java	solve	tolerance	double	0	RET	(z.subtract(oldz)).abs() <= $
1299	336	12	LaguerreSolver.java	solve	z	Complex	0	RET	($.subtract(oldz)).abs() <= tolerance
1299	336	12	LaguerreSolver.java	solve	oldz	Complex	0	RET	(z.subtract($)).abs() <= tolerance
1300	341	12	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	pv.abs() <= $.functionValueAccuracy
1300	341	12	LaguerreSolver.java	solve	pv	Complex	0	RET	$.abs() <= functionValueAccuracy
1301	359	12	LaguerreSolver.java	solve	denominator	Complex	1	DEF	$.equals(new Complex(0.0, 0.0))
46483	178	8	LegendreGaussIntegrator.java	integrate	THIS	LegendreGaussIntegrator	0	NIL-FOR	i < $.maximalIterationCount
46483	178	8	LegendreGaussIntegrator.java	integrate	i	int	0	NIL-FOR	$ < maximalIterationCount
1379	190	12	LegendreGaussIntegrator.java	integrate	THIS	LegendreGaussIntegrator	0	RET	i + 1 >= $.minimalIterationCount
1379	190	12	LegendreGaussIntegrator.java	integrate	delta	double	0	RET	$ <= limit
1379	190	12	LegendreGaussIntegrator.java	integrate	limit	double	0	RET	delta <= $
1379	190	12	LegendreGaussIntegrator.java	integrate	i	int	0	RET	$ + 1 >= minimalIterationCount
46484	227	8	LegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
46484	227	8	LegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
46485	228	12	LegendreGaussIntegrator.java	stage	THIS	LegendreGaussIntegrator	0	NIL-FOR	j < $.abscissas.$.length
46485	228	12	LegendreGaussIntegrator.java	stage	j	int	0	NIL-FOR	$ < abscissas.length
46192	238	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.solvedCols
46192	238	6	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < solvedCols
1006	243	6	LevenbergMarquardtEstimator.java	estimate	firstIteration	boolean	0	DEF	$
46193	248	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
46193	248	8	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < cols
1007	250	10	LevenbergMarquardtEstimator.java	estimate	dk	double	0	DEF	$ == 0
1008	266	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	$.cost != 0
46194	267	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46194	267	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1009	270	10	LevenbergMarquardtEstimator.java	estimate	s	double	0	DEF	$ != 0
46195	272	12	LevenbergMarquardtEstimator.java	estimate	i	int	0	NIL-FOR	$ <= j
46195	272	12	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	i <= $
1010	279	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	maxCosine <= $.orthoTolerance
1010	279	6	LevenbergMarquardtEstimator.java	estimate	maxCosine	double	0	RET	$ <= orthoTolerance
46196	284	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.cols
46196	284	6	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < cols
46197	289	6	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	NIL-FOR	$ < 1.0e-4
46198	292	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46198	292	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
46199	306	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46199	306	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1011	316	8	LevenbergMarquardtEstimator.java	estimate	firstIteration	boolean	0	DEF	$
1012	325	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	0.1 * $.cost < previousCost
1012	325	8	LevenbergMarquardtEstimator.java	estimate	previousCost	double	0	DEF	0.1 * cost < $
46200	332	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46200	332	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
46201	336	10	LevenbergMarquardtEstimator.java	estimate	i	int	0	NIL-FOR	$ <= j
46201	336	10	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	i <= $
46202	341	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46202	341	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1013	354	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	DEF	$ <= 0.25
1014	357	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	0.1 * $.cost >= previousCost
1014	357	10	LevenbergMarquardtEstimator.java	estimate	tmp	double	0	DEF	$ < 0.1
1014	357	10	LevenbergMarquardtEstimator.java	estimate	previousCost	double	0	DEF	0.1 * cost >= $
1015	362	15	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
1015	362	15	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	DEF	$ >= 0.75
1016	368	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	DEF	$ >= 1.0e-4
46203	372	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
46203	372	10	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < cols
46204	380	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46204	380	10	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1017	390	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	Math.abs(actRed) <= $.costRelativeTolerance
1017	390	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	preRed <= $.costRelativeTolerance
1017	390	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	delta <= $.parRelativeTolerance * xNorm
1017	390	8	LevenbergMarquardtEstimator.java	estimate	actRed	double	0	RET	Math.abs($) <= costRelativeTolerance
1017	390	8	LevenbergMarquardtEstimator.java	estimate	preRed	double	0	RET	$ <= costRelativeTolerance
1017	390	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	RET	$ <= 2.0
1017	390	8	LevenbergMarquardtEstimator.java	estimate	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
1017	390	8	LevenbergMarquardtEstimator.java	estimate	xNorm	double	0	RET	delta <= parRelativeTolerance * $
1018	399	8	LevenbergMarquardtEstimator.java	estimate	actRed	double	1	EstimationException	Math.abs($) <= 2.2204e-16
1018	399	8	LevenbergMarquardtEstimator.java	estimate	preRed	double	1	EstimationException	$ <= 2.2204e-16
1018	399	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	EstimationException	$ <= 2.0
1019	404	15	LevenbergMarquardtEstimator.java	estimate	delta	double	1	EstimationException	$ <= 2.2204e-16 * xNorm
1019	404	15	LevenbergMarquardtEstimator.java	estimate	xNorm	double	1	EstimationException	delta <= 2.2204e-16 * $
1020	409	15	LevenbergMarquardtEstimator.java	estimate	maxCosine	double	0	EstimationException	$ <= 2.2204e-16
46205	448	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.rank
46205	448	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
46206	451	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.cols
46206	451	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < cols
46207	454	4	LevenbergMarquardtEstimator.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
46208	457	6	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
46208	457	6	LevenbergMarquardtEstimator.java	determineLMParameter	k	int	0	NIL-FOR	i < $
46209	466	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46209	466	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1021	474	4	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
1021	474	4	LevenbergMarquardtEstimator.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1022	483	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.rank == $.solvedCols
46210	484	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46210	484	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
46211	489	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46211	489	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
46212	492	8	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
46212	492	8	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	i < $
46213	504	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46213	504	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
46214	507	6	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
46214	507	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1023	515	4	LevenbergMarquardtEstimator.java	determineLMParameter	paru	double	0	DEF	$ == 0
1024	523	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
46215	527	4	LevenbergMarquardtEstimator.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1025	530	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
46216	534	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46216	534	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
46217	541	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46217	541	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1026	553	6	LevenbergMarquardtEstimator.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1026	553	6	LevenbergMarquardtEstimator.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1026	553	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	Math.abs($) <= 0.1 * delta
1026	553	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1026	553	6	LevenbergMarquardtEstimator.java	determineLMParameter	parl	double	0	RET	$ == 0
1026	553	6	LevenbergMarquardtEstimator.java	determineLMParameter	delta	double	0	RET	Math.abs(fp) <= 0.1 * $
46218	559	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46218	559	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
46219	563	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46219	563	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
46220	567	8	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
46220	567	8	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
46221	572	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46221	572	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1027	579	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	1	DEF	$ > 0
1028	581	13	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	DEF	$ < 0
46222	616	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46222	616	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
46223	618	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
46223	618	6	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
46224	626	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46224	626	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1029	632	6	LevenbergMarquardtEstimator.java	determineLMDirection	dpj	double	0	DEF	$ != 0
46225	641	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.solvedCols
46225	641	6	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
1030	646	8	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1030	646	8	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1031	650	10	LevenbergMarquardtEstimator.java	determineLMDirection	rkk	double	1	DEF	Math.abs($) < Math.abs(lmDiag[k])
1031	650	10	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	1	DEF	Math.abs(rkk) < Math.abs(lmDiag[$])
1031	650	10	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	1	DEF	Math.abs(rkk) < Math.abs($[k])
46226	668	10	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
46226	668	10	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
46227	689	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
46227	689	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1032	690	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	DEF	nSing == $.solvedCols
1032	690	6	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1032	690	6	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1032	690	6	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1033	693	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	DEF	nSing < $.solvedCols
1033	693	6	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1034	697	4	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ > 0
46228	698	6	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
46229	701	8	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
46229	701	8	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
46230	709	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.lmDir.$.length
46230	709	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
46231	740	4	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
46231	740	4	LevenbergMarquardtEstimator.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
46232	743	6	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
46232	743	6	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
46233	751	4	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
46233	751	4	LevenbergMarquardtEstimator.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
46234	756	6	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.cols
46234	756	6	LevenbergMarquardtEstimator.java	qrDecomposition	i	int	0	NIL-FOR	$ < cols
46235	759	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
46235	759	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
1035	763	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	EstimationException	Double.isNaN($)
1035	763	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	EstimationException	Double.isInfinite($)
1036	767	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1036	767	8	LevenbergMarquardtEstimator.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1037	772	6	LevenbergMarquardtEstimator.java	qrDecomposition	ak2	double	0	RET	$ == 0
46236	792	6	LevenbergMarquardtEstimator.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
46237	795	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
46237	795	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
46238	799	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
46238	799	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
46239	816	4	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
46239	816	4	LevenbergMarquardtEstimator.java	qTy	k	int	0	NIL-FOR	$ < cols
46240	820	6	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.rows
46240	820	6	LevenbergMarquardtEstimator.java	qTy	i	int	0	NIL-FOR	$ < rows
46241	824	6	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.rows
46241	824	6	LevenbergMarquardtEstimator.java	qTy	i	int	0	NIL-FOR	$ < rows
0	63	12	MathException.java	translate	THIS	MathException	0	DEF	$.cachedResources == null
0	63	12	MathException.java	translate	THIS	MathException	0	DEF	$.cachedResources.getLocale().equals(locale)
0	63	12	MathException.java	translate	locale	Locale	0	DEF	cachedResources.getLocale().equals($)
1	69	12	MathException.java	translate	THIS	MathException	0	RET	$.cachedResources.getLocale().getLanguage().equals(locale.getLanguage())
1	69	12	MathException.java	translate	locale	Locale	0	RET	cachedResources.getLocale().getLanguage().equals($.getLanguage())
946	64	12	MathRuntimeException.java	translate	THIS	MathRuntimeException	0	DEF	$.cachedResources == null
946	64	12	MathRuntimeException.java	translate	THIS	MathRuntimeException	0	DEF	$.cachedResources.getLocale().equals(locale)
946	64	12	MathRuntimeException.java	translate	locale	Locale	0	DEF	cachedResources.getLocale().equals($)
947	70	12	MathRuntimeException.java	translate	THIS	MathRuntimeException	0	RET	$.cachedResources.getLocale().getLanguage().equals(locale.getLanguage())
947	70	12	MathRuntimeException.java	translate	locale	Locale	0	RET	cachedResources.getLocale().getLanguage().equals($.getLanguage())
65	81	8	MathUtils.java	addAndCheck	s	long	0	ArithmeticException	$ < Integer.MIN_VALUE
65	81	8	MathUtils.java	addAndCheck	s	long	0	ArithmeticException	$ > Integer.MAX_VALUE
66	114	8	MathUtils.java	addAndCheck	a	long	1	DEF	$ > b
66	114	8	MathUtils.java	addAndCheck	b	long	1	DEF	a > $
67	120	12	MathUtils.java	addAndCheck	a	long	1	ArithmeticException	$ < 0
68	121	16	MathUtils.java	addAndCheck	b	long	1	ArithmeticException	$ < 0
69	123	20	MathUtils.java	addAndCheck	a	long	1	DEF	Long.MIN_VALUE - b <= $
69	123	20	MathUtils.java	addAndCheck	b	long	1	DEF	Long.MIN_VALUE - $ <= a
70	137	16	MathUtils.java	addAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE - b
70	137	16	MathUtils.java	addAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE - $
71	173	8	MathUtils.java	binomialCoefficient	n	int	0	IllegalArgumentException	$ < k
71	173	8	MathUtils.java	binomialCoefficient	k	int	0	IllegalArgumentException	n < $
72	177	8	MathUtils.java	binomialCoefficient	n	int	0	IllegalArgumentException	$ < 0
73	181	8	MathUtils.java	binomialCoefficient	n	int	0	RET	$ == k
73	181	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 0
73	181	8	MathUtils.java	binomialCoefficient	k	int	0	RET	n == $
74	184	8	MathUtils.java	binomialCoefficient	n	int	0	RET	k == $ - 1
74	184	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == n - 1
74	184	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 1
75	188	8	MathUtils.java	binomialCoefficient	n	int	0	RET	k > $ / 2
75	188	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ > n / 2
76	197	8	MathUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 61
45459	199	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
45459	199	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
77	202	15	MathUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 66
45460	205	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
45460	205	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
45461	219	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
45461	219	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
78	250	8	MathUtils.java	binomialCoefficientDouble	n	int	0	IllegalArgumentException	$ < k
78	250	8	MathUtils.java	binomialCoefficientDouble	k	int	0	IllegalArgumentException	n < $
79	254	8	MathUtils.java	binomialCoefficientDouble	n	int	0	IllegalArgumentException	$ < 0
80	258	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	$ == k
80	258	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	n == $
80	258	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 0
81	261	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	k == $ - 1
81	261	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == n - 1
81	261	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 1
82	264	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	k > $/2
82	264	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ > n/2
83	267	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	$ < 67
45462	272	8	MathUtils.java	binomialCoefficientDouble	i	int	0	NIL-FOR	$ <= k
45462	272	8	MathUtils.java	binomialCoefficientDouble	k	int	0	NIL-FOR	i <= $
84	298	8	MathUtils.java	binomialCoefficientLog	n	int	0	IllegalArgumentException	$ < k
84	298	8	MathUtils.java	binomialCoefficientLog	k	int	0	IllegalArgumentException	n < $
85	302	8	MathUtils.java	binomialCoefficientLog	n	int	0	IllegalArgumentException	$ < 0
86	306	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ == k
86	306	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	n == $
86	306	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 0
87	309	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	k == $ - 1
87	309	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 1
87	309	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == n - 1
88	317	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 67
89	325	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 1030
90	329	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	k > $ / 2
90	329	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ > n / 2
45463	339	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n
45463	339	8	MathUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $
45464	344	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= k
45464	344	8	MathUtils.java	binomialCoefficientLog	k	int	0	NIL-FOR	i <= $
91	398	8	MathUtils.java	equals	x	double[]	0	RET	$ == null
91	398	8	MathUtils.java	equals	y	double[]	0	RET	$ == null
92	401	8	MathUtils.java	equals	THIS	MathUtils	0	RET	x.$.length != y.$.length
92	401	8	MathUtils.java	equals	x	double[]	0	RET	$.length != y.length
92	401	8	MathUtils.java	equals	y	double[]	0	RET	x.length != $.length
45465	404	8	MathUtils.java	equals	THIS	MathUtils	0	NIL-FOR	i < x.$.length
45465	404	8	MathUtils.java	equals	i	int	0	NIL-FOR	$ < x.length
45465	404	8	MathUtils.java	equals	x	double[]	0	NIL-FOR	i < $.length
93	405	12	MathUtils.java	equals	THIS	MathUtils	0	RET	$.equals(x[i], y[i])
93	405	12	MathUtils.java	equals	i	int	0	RET	equals(x[$], y[$])
93	405	12	MathUtils.java	equals	x	double[]	0	RET	equals($[i], y[i])
93	405	12	MathUtils.java	equals	y	double[]	0	RET	equals(x[i], $[i])
94	442	8	MathUtils.java	factorial	n	int	0	IllegalArgumentException	$ < 0
95	445	8	MathUtils.java	factorial	n	int	0	ArithmeticException	$ > 20
96	473	8	MathUtils.java	factorialDouble	n	int	0	IllegalArgumentException	$ < 0
97	476	8	MathUtils.java	factorialDouble	n	int	0	RET	$ < 21
98	496	8	MathUtils.java	factorialLog	n	int	0	IllegalArgumentException	$ < 0
99	499	8	MathUtils.java	factorialLog	n	int	0	RET	$ < 21
45466	503	8	MathUtils.java	factorialLog	i	int	0	NIL-FOR	$ <= n
45466	503	8	MathUtils.java	factorialLog	n	int	0	NIL-FOR	i <= $
100	542	8	MathUtils.java	gcd	u	int	0	RET	$ == 0
100	542	8	MathUtils.java	gcd	v	int	0	RET	$ == 0
101	550	8	MathUtils.java	gcd	u	int	0	DEF	$ > 0
102	553	8	MathUtils.java	gcd	v	int	0	DEF	$ > 0
45467	558	8	MathUtils.java	gcd	u	int	0	NIL-WHILE	($ & 1) == 0
45467	558	8	MathUtils.java	gcd	v	int	0	NIL-WHILE	($ & 1) == 0
45467	558	8	MathUtils.java	gcd	k	int	0	NIL-WHILE	$ < 31
103	564	8	MathUtils.java	gcd	k	int	0	DEF	$ == 31
45468	574	8	MathUtils.java	gcd	t	int	0	NIL-DOWHILE	$ != 0
45469	577	12	MathUtils.java	gcd	t	int	0	NIL-WHILE	($ & 1) == 0
104	581	12	MathUtils.java	gcd	t	int	1	DEF	$ > 0
105	635	8	MathUtils.java	indicator	x	double	0	RET	Double.isNaN($)
106	649	8	MathUtils.java	indicator	x	float	0	RET	Float.isNaN($)
107	710	8	MathUtils.java	lcm	a	int	0	RET	$==0
107	710	8	MathUtils.java	lcm	b	int	0	RET	$==0
108	749	8	MathUtils.java	mulAndCheck	m	long	0	ArithmeticException	$ > Integer.MAX_VALUE
108	749	8	MathUtils.java	mulAndCheck	m	long	0	ArithmeticException	$ < Integer.MIN_VALUE
109	768	8	MathUtils.java	mulAndCheck	a	long	1	DEF	$ > b
109	768	8	MathUtils.java	mulAndCheck	b	long	1	DEF	a > $
110	772	12	MathUtils.java	mulAndCheck	a	long	1	ArithmeticException	$ < 0
111	773	16	MathUtils.java	mulAndCheck	b	long	1	ArithmeticException	$ < 0
112	775	20	MathUtils.java	mulAndCheck	a	long	1	DEF	$ >= Long.MAX_VALUE / b
112	775	20	MathUtils.java	mulAndCheck	b	long	1	DEF	a >= Long.MAX_VALUE / $
113	780	23	MathUtils.java	mulAndCheck	b	long	1	ArithmeticException	$ > 0
114	782	20	MathUtils.java	mulAndCheck	a	long	1	DEF	Long.MIN_VALUE / b <= $
114	782	20	MathUtils.java	mulAndCheck	b	long	1	DEF	Long.MIN_VALUE / $ <= a
115	792	19	MathUtils.java	mulAndCheck	a	long	1	ArithmeticException	$ > 0
116	797	16	MathUtils.java	mulAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE / b
116	797	16	MathUtils.java	mulAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE / $
117	830	8	MathUtils.java	nextAfter	d	double	1	RET	Double.isNaN($)
117	830	8	MathUtils.java	nextAfter	d	double	1	RET	Double.isInfinite($)
118	832	15	MathUtils.java	nextAfter	d	double	0	RET	$ == 0
119	844	8	MathUtils.java	nextAfter	d	double	1	RET	$ * (direction - $) >= 0
119	844	8	MathUtils.java	nextAfter	direction	double	1	RET	d * ($ - d) >= 0
120	846	16	MathUtils.java	nextAfter	mantissa	long	1	RET	$ == 0x000fffffffffffffL
121	855	16	MathUtils.java	nextAfter	mantissa	long	1	RET	$ == 0L
122	879	8	MathUtils.java	scalb	d	double	0	RET	Double.isNaN($)
122	879	8	MathUtils.java	scalb	d	double	0	RET	Double.isInfinite($)
122	879	8	MathUtils.java	scalb	d	double	0	RET	$ == 0
123	949	12	MathUtils.java	round	x	double	1	RET	Double.isInfinite($)
124	1004	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
125	1014	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
126	1023	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
127	1032	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
128	1034	19	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ < 0.5
129	1038	16	MathUtils.java	roundUnscaled	unscaled	double	1	DEF	Math.floor($) / 2.0 == Math.floor(Math .floor($) / 2.0)
130	1050	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ >= 0.5
131	1058	12	MathUtils.java	roundUnscaled	unscaled	double	0	ArithmeticException	$ != Math.floor($)
132	1098	8	MathUtils.java	sign	x	double	0	RET	Double.isNaN($)
133	1116	8	MathUtils.java	sign	x	float	0	RET	Float.isNaN($)
134	1188	8	MathUtils.java	subAndCheck	s	long	0	ArithmeticException	$ > Integer.MAX_VALUE
134	1188	8	MathUtils.java	subAndCheck	s	long	0	ArithmeticException	$ < Integer.MIN_VALUE
135	1207	8	MathUtils.java	subAndCheck	b	long	1	ArithmeticException	$ == Long.MIN_VALUE
136	1208	12	MathUtils.java	subAndCheck	a	long	1	DEF	$ < 0
45726	74	8	MatrixUtils.java	createRealIdentityMatrix	i	int	0	NIL-FOR	$ < dimension
45726	74	8	MatrixUtils.java	createRealIdentityMatrix	dimension	int	0	NIL-FOR	i < $
45727	90	8	MatrixUtils.java	createRealDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
45727	90	8	MatrixUtils.java	createRealDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
45727	90	8	MatrixUtils.java	createRealDiagonalMatrix	diagonal	double[]	0	NIL-FOR	i < $.length
45728	182	8	MatrixUtils.java	createRowRealMatrix	i	int	0	NIL-FOR	$ < nCols
45728	182	8	MatrixUtils.java	createRowRealMatrix	nCols	int	0	NIL-FOR	i < $
45729	200	8	MatrixUtils.java	createRowBigMatrix	i	int	0	NIL-FOR	$ < nCols
45729	200	8	MatrixUtils.java	createRowBigMatrix	nCols	int	0	NIL-FOR	i < $
45730	234	8	MatrixUtils.java	createRowBigMatrix	i	int	0	NIL-FOR	$ < nCols
45730	234	8	MatrixUtils.java	createRowBigMatrix	nCols	int	0	NIL-FOR	i < $
45731	252	8	MatrixUtils.java	createColumnRealMatrix	i	int	0	NIL-FOR	$ < nRows
45731	252	8	MatrixUtils.java	createColumnRealMatrix	nRows	int	0	NIL-FOR	i < $
45732	270	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
45732	270	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
45733	288	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
45733	288	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
45734	306	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
45734	306	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
45735	322	8	MatrixUtils.java	createBigIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
45735	322	8	MatrixUtils.java	createBigIdentityMatrix	dimension	int	0	NIL-FOR	row < $
843	71	8	Max.java	increment	THIS	Max	0	DEF	Double.isNaN($.value)
843	71	8	Max.java	increment	THIS	Max	0	DEF	d > $.value
843	71	8	Max.java	increment	d	double	0	DEF	$ > value
844	123	8	Max.java	evaluate	THIS	Max	0	DEF	$.test(values, begin, length)
844	123	8	Max.java	evaluate	values	double[]	0	DEF	test($, begin, length)
844	123	8	Max.java	evaluate	begin	int	0	DEF	test(values, $, length)
844	123	8	Max.java	evaluate	length	int	0	DEF	test(values, begin, $)
46100	125	12	Max.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
46100	125	12	Max.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
46100	125	12	Max.java	evaluate	length	int	0	NIL-FOR	i < begin + $
845	126	16	Max.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
845	126	16	Max.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
788	105	8	Mean.java	increment	THIS	Mean	0	DEF	$.incMoment
789	114	8	Mean.java	clear	THIS	Mean	0	DEF	$.incMoment
790	150	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, begin, length)
790	150	8	Mean.java	evaluate	values	double[]	0	RET	test($, begin, length)
790	150	8	Mean.java	evaluate	begin	int	0	RET	test(values, $, length)
790	150	8	Mean.java	evaluate	length	int	0	RET	test(values, begin, $)
46088	159	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
46088	159	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
46088	159	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
46396	85	4	MidpointStepInterpolator.java	computeInterpolatedState	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
46396	85	4	MidpointStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
840	73	8	Min.java	increment	THIS	Min	0	DEF	Double.isNaN($.value)
840	73	8	Min.java	increment	THIS	Min	0	DEF	d < $.value
840	73	8	Min.java	increment	d	double	0	DEF	$ < value
841	125	8	Min.java	evaluate	THIS	Min	0	DEF	$.test(values, begin, length)
841	125	8	Min.java	evaluate	values	double[]	0	DEF	test($, begin, length)
841	125	8	Min.java	evaluate	begin	int	0	DEF	test(values, $, length)
841	125	8	Min.java	evaluate	length	int	0	DEF	test(values, begin, $)
46099	127	12	Min.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
46099	127	12	Min.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
46099	127	12	Min.java	evaluate	length	int	0	NIL-FOR	i < begin + $
842	128	16	Min.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
842	128	16	Min.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
1256	99	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1256	99	8	MullerSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1257	100	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1257	100	8	MullerSolver.java	solve	max	double	0	RET	f.value($) == 0.0
1258	101	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
1258	101	8	MullerSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
1259	105	8	MullerSolver.java	solve	THIS	MullerSolver	1	RET	$.isBracketing(min, initial, f)
1259	105	8	MullerSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
1259	105	8	MullerSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
1259	105	8	MullerSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
1260	153	8	MullerSolver.java	solve	y0	double	0	RET	$ == 0.0
1261	154	8	MullerSolver.java	solve	y2	double	0	RET	$ == 0.0
46435	159	8	MullerSolver.java	solve	THIS	MullerSolver	0	NIL-WHILE	i <= $.maximalIterationCount
46435	159	8	MullerSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1262	178	12	MullerSolver.java	solve	x	double	0	RET	Math.abs($ - oldx) <= tolerance
1262	178	12	MullerSolver.java	solve	oldx	double	0	RET	Math.abs(x - $) <= tolerance
1262	178	12	MullerSolver.java	solve	tolerance	double	0	RET	Math.abs(x - oldx) <= $
1263	182	12	MullerSolver.java	solve	THIS	MullerSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
1263	182	12	MullerSolver.java	solve	y	double	0	RET	Math.abs($) <= functionValueAccuracy
1264	195	12	MullerSolver.java	solve	bisect	boolean	1	DEF	$
1265	205	16	MullerSolver.java	solve	ym	double	1	DEF	MathUtils.sign(y0) + MathUtils.sign($) == 0.0
1265	205	16	MullerSolver.java	solve	y0	double	1	DEF	MathUtils.sign($) + MathUtils.sign(ym) == 0.0
1266	293	8	MullerSolver.java	solve2	y0	double	0	RET	$ == 0.0
1267	294	8	MullerSolver.java	solve2	y1	double	0	RET	$ == 0.0
46436	299	8	MullerSolver.java	solve2	THIS	MullerSolver	0	NIL-WHILE	i <= $.maximalIterationCount
46436	299	8	MullerSolver.java	solve2	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1268	306	12	MullerSolver.java	solve2	delta	double	1	DEF	$ >= 0.0
1269	315	12	MullerSolver.java	solve2	denominator	double	1	DEF	$ != 0
46437	319	16	MullerSolver.java	solve2	x1	double	0	NIL-WHILE	x == $
46437	319	16	MullerSolver.java	solve2	x2	double	0	NIL-WHILE	x == $
46437	319	16	MullerSolver.java	solve2	x	double	0	NIL-WHILE	$ == x2
46437	319	16	MullerSolver.java	solve2	x	double	0	NIL-WHILE	$ == x1
1270	331	12	MullerSolver.java	solve2	x	double	0	RET	Math.abs($ - oldx) <= tolerance
1270	331	12	MullerSolver.java	solve2	oldx	double	0	RET	Math.abs(x - $) <= tolerance
1270	331	12	MullerSolver.java	solve2	tolerance	double	0	RET	Math.abs(x - oldx) <= $
1271	335	12	MullerSolver.java	solve2	THIS	MullerSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
1271	335	12	MullerSolver.java	solve2	y	double	0	RET	Math.abs($) <= functionValueAccuracy
742	64	6	MultiDirectional.java	iterateSimplex	originalCost	double	0	RET	reflectedCost < $
742	64	6	MultiDirectional.java	iterateSimplex	reflectedCost	double	0	RET	$ < originalCost
743	69	8	MultiDirectional.java	iterateSimplex	expandedCost	double	0	DEF	reflectedCost <= $
743	69	8	MultiDirectional.java	iterateSimplex	reflectedCost	double	0	DEF	$ <= expandedCost
744	80	6	MultiDirectional.java	iterateSimplex	originalCost	double	0	RET	contractedCost < $
744	80	6	MultiDirectional.java	iterateSimplex	contractedCost	double	0	RET	$ < originalCost
46065	105	4	MultiDirectional.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ <= n
46065	105	4	MultiDirectional.java	evaluateNewSimplex	n	int	0	NIL-FOR	i <= $
46066	108	6	MultiDirectional.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < n
46066	108	6	MultiDirectional.java	evaluateNewSimplex	n	int	0	NIL-FOR	j < $
46403	168	8	MultistepIntegrator.java	start	THIS	MultistepIntegrator	0	NIL-DOWHILE	Double.isNaN($.resetTime)
1186	173	12	MultistepIntegrator.java	start	THIS	MultistepIntegrator	0	DEF	Double.isNaN($.resetTime)
1187	183	8	MultistepIntegrator.java	start	store	StoringStepHandler	0	DEF	$.getFinalState() != null
46404	194	8	MultistepIntegrator.java	rotatePreviousSteps	k	int	0	NIL-FOR	$ > 0
1192	81	8	MultistepStepInterpolator.java	MultistepStepInterpolator	THIS	MultistepStepInterpolator	1	DEF	interpolator.$.currentState != null
1192	81	8	MultistepStepInterpolator.java	MultistepStepInterpolator	interpolator	MultistepStepInterpolator	1	DEF	$.currentState != null
46413	84	12	MultistepStepInterpolator.java	MultistepStepInterpolator	THIS	MultistepStepInterpolator	0	NIL-FOR	k < interpolator.$.previousF.$.length
46413	84	12	MultistepStepInterpolator.java	MultistepStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.previousF.length
46413	84	12	MultistepStepInterpolator.java	MultistepStepInterpolator	interpolator	MultistepStepInterpolator	0	NIL-FOR	k < $.previousF.length
46414	126	8	MultistepStepInterpolator.java	writeExternal	THIS	MultistepStepInterpolator	0	NIL-FOR	k < $.previousF.$.length
46414	126	8	MultistepStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < previousF.length
46415	128	12	MultistepStepInterpolator.java	writeExternal	THIS	MultistepStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
46415	128	12	MultistepStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < currentState.length
46416	146	8	MultistepStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
46416	146	8	MultistepStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
46417	149	12	MultistepStepInterpolator.java	readExternal	THIS	MultistepStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
46417	149	12	MultistepStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < currentState.length
46076	92	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	i	int	0	NIL-FOR	$ < k
46076	92	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	k	int	0	NIL-FOR	i < $
46077	147	8	MultivariateSummaryStatistics.java	addValue	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
46077	147	8	MultivariateSummaryStatistics.java	addValue	i	int	0	NIL-FOR	$ < k
46078	184	8	MultivariateSummaryStatistics.java	getResults	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < results.$.length
46078	184	8	MultivariateSummaryStatistics.java	getResults	i	int	0	NIL-FOR	$ < results.length
46078	184	8	MultivariateSummaryStatistics.java	getResults	results	double[]	0	NIL-FOR	i < $.length
754	243	8	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 1
755	245	15	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 2
46079	249	12	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
46079	249	12	MultivariateSummaryStatistics.java	getStandardDeviation	i	int	0	NIL-FOR	$ < k
46080	330	8	MultivariateSummaryStatistics.java	append	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < data.$.length
46080	330	8	MultivariateSummaryStatistics.java	append	i	int	0	NIL-FOR	$ < data.length
46080	330	8	MultivariateSummaryStatistics.java	append	data	double[]	0	NIL-FOR	i < $.length
756	331	12	MultivariateSummaryStatistics.java	append	i	int	0	DEF	$ > 0
46081	344	8	MultivariateSummaryStatistics.java	clear	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
46081	344	8	MultivariateSummaryStatistics.java	clear	i	int	0	NIL-FOR	$ < k
757	363	8	MultivariateSummaryStatistics.java	equals	THIS	MultivariateSummaryStatistics	0	RET	object == $
757	363	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ == this
758	366	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ instanceof MultivariateSummaryStatistics == false
759	612	8	MultivariateSummaryStatistics.java	checkEmpty	THIS	MultivariateSummaryStatistics	0	DEF	$.n > 0
760	625	8	MultivariateSummaryStatistics.java	checkDimension	THIS	MultivariateSummaryStatistics	0	DimensionMismatchException	dimension != $.k
760	625	8	MultivariateSummaryStatistics.java	checkDimension	dimension	int	0	DimensionMismatchException	$ != k
46056	75	4	NelderMead.java	iterateSimplex	i	int	0	NIL-FOR	$ < n
46056	75	4	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	i < $
46057	77	6	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
46057	77	6	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
46058	82	4	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
46058	82	4	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
46059	88	4	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
46059	88	4	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
736	93	4	NelderMead.java	iterateSimplex	smallest	double	1	DEF	$ <= costR
736	93	4	NelderMead.java	iterateSimplex	secondLargest	double	1	DEF	costR < $
736	93	4	NelderMead.java	iterateSimplex	costR	double	1	DEF	smallest <= $
736	93	4	NelderMead.java	iterateSimplex	costR	double	1	DEF	$ < secondLargest
737	98	11	NelderMead.java	iterateSimplex	smallest	double	1	DEF	costR < $
737	98	11	NelderMead.java	iterateSimplex	costR	double	1	DEF	$ < smallest
46060	102	6	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
46060	102	6	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
738	107	6	NelderMead.java	iterateSimplex	costE	double	1	DEF	$ < costR
738	107	6	NelderMead.java	iterateSimplex	costR	double	1	DEF	costE < $
739	117	6	NelderMead.java	iterateSimplex	largest	double	1	RET	costR < $
739	117	6	NelderMead.java	iterateSimplex	costR	double	1	RET	$ < largest
46061	121	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
46061	121	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
740	126	8	NelderMead.java	iterateSimplex	costC	double	0	RET	$ <= costR
740	126	8	NelderMead.java	iterateSimplex	costR	double	0	RET	costC <= $
46062	136	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
46062	136	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
741	141	8	NelderMead.java	iterateSimplex	costC	double	0	RET	$ < largest
741	141	8	NelderMead.java	iterateSimplex	largest	double	0	RET	costC < $
46063	151	6	NelderMead.java	iterateSimplex	THIS	NelderMead	0	NIL-FOR	i < $.simplex.$.length
46063	151	6	NelderMead.java	iterateSimplex	i	int	0	NIL-FOR	$ < simplex.length
46064	153	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
46064	153	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
46433	121	12	NewtonSolver.java	solve	THIS	NewtonSolver	0	NIL-WHILE	i < $.maximalIterationCount
46433	121	12	NewtonSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1243	124	16	NewtonSolver.java	solve	THIS	NewtonSolver	0	RET	Math.abs(x1 - x0) <= $.absoluteAccuracy
1243	124	16	NewtonSolver.java	solve	x0	double	0	RET	Math.abs(x1 - $) <= absoluteAccuracy
1243	124	16	NewtonSolver.java	solve	x1	double	0	RET	Math.abs($ - x0) <= absoluteAccuracy
324	96	8	NormalDistributionImpl.java	setStandardDeviation	sd	double	0	IllegalArgumentException	$ <= 0.0
325	127	12	NormalDistributionImpl.java	cumulativeProbability	THIS	NormalDistributionImpl	1	RET	x < ($.mean - 20 * $.standardDeviation)
325	127	12	NormalDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ < (mean - 20 * standardDeviation)
326	129	19	NormalDistributionImpl.java	cumulativeProbability	THIS	NormalDistributionImpl	1	RET	x > ($.mean + 20 * $.standardDeviation)
326	129	19	NormalDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ > (mean + 20 * standardDeviation)
327	153	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
328	156	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
329	174	8	NormalDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < .5
330	195	8	NormalDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
331	215	8	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
332	217	15	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > .5
46132	108	8	OLSMultipleLinearRegression.java	calculateHat	i	int	0	NIL-FOR	$ < n
46132	108	8	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	i < $
46133	109	12	OLSMultipleLinearRegression.java	calculateHat	j	int	0	NIL-FOR	$ < n
46133	109	12	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	j < $
924	110	16	OLSMultipleLinearRegression.java	calculateHat	j	int	1	DEF	i == $
924	110	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ < p
924	110	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ == j
924	110	16	OLSMultipleLinearRegression.java	calculateHat	p	int	1	DEF	i < $
925	195	8	OLSMultipleLinearRegression.java	solveUpperTriangular	THIS	OLSMultipleLinearRegression	0	IllegalArgumentException	$.isUpperTriangular(coefficients, 1E-12)
925	195	8	OLSMultipleLinearRegression.java	solveUpperTriangular	coefficients	RealMatrix	0	IllegalArgumentException	isUpperTriangular($, 1E-12)
926	199	8	OLSMultipleLinearRegression.java	solveUpperTriangular	constants	RealMatrix	0	IllegalArgumentException	$.getColumnDimension() != 1
46134	205	8	OLSMultipleLinearRegression.java	solveUpperTriangular	i	int	0	NIL-FOR	$ < length
46134	205	8	OLSMultipleLinearRegression.java	solveUpperTriangular	length	int	0	NIL-FOR	i < $
46135	208	12	OLSMultipleLinearRegression.java	solveUpperTriangular	j	int	0	NIL-FOR	$ < length
46135	208	12	OLSMultipleLinearRegression.java	solveUpperTriangular	length	int	0	NIL-FOR	j < $
46136	231	8	OLSMultipleLinearRegression.java	isUpperTriangular	r	int	0	NIL-FOR	$ < nRows
46136	231	8	OLSMultipleLinearRegression.java	isUpperTriangular	nRows	int	0	NIL-FOR	r < $
46137	233	12	OLSMultipleLinearRegression.java	isUpperTriangular	c	int	0	NIL-FOR	$ < bound
46137	233	12	OLSMultipleLinearRegression.java	isUpperTriangular	bound	int	0	NIL-FOR	c < $
927	234	16	OLSMultipleLinearRegression.java	isUpperTriangular	c	int	0	RET	Math.abs(m.getEntry(r, $)) > epsilon
927	234	16	OLSMultipleLinearRegression.java	isUpperTriangular	r	int	0	RET	Math.abs(m.getEntry($, c)) > epsilon
927	234	16	OLSMultipleLinearRegression.java	isUpperTriangular	m	RealMatrix	0	RET	Math.abs($.getEntry(r, c)) > epsilon
927	234	16	OLSMultipleLinearRegression.java	isUpperTriangular	epsilon	double	0	RET	Math.abs(m.getEntry(r, c)) > $
859	102	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	IllegalArgumentException	$ > 0.5
859	102	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	IllegalArgumentException	$ <= 0
860	123	8	OneWayAnovaImpl.java	anovaStats	categoryData	Collection<double[]>	0	IllegalArgumentException	$.size() < 2
861	130	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	IllegalArgumentException	$.array.$.length <= 1
46101	148	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	NIL-FOR	i < $.data.$.length
46101	148	12	OneWayAnovaImpl.java	anovaStats	i	int	0	NIL-FOR	$ < data.length
34	152	8	OpenIntToDoubleHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
35	157	8	OpenIntToDoubleHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
35	157	8	OpenIntToDoubleHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
36	181	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
36	181	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
36	181	8	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
37	185	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
37	185	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	states[$] == FREE
45453	189	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
45453	189	8	OpenIntToDoubleHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
38	192	12	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
38	192	12	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
38	192	12	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
39	210	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
39	210	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
39	210	8	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
40	214	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
40	214	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
45454	218	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
45454	218	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
41	221	12	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
41	221	12	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
41	221	12	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
42	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
42	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
43	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
43	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
43	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
43	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
43	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
44	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
44	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
45	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
45	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
45	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
45	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
45	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
46	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
46	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
47	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
47	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
48	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
48	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
49	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
49	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
49	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
49	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
49	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
50	353	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
50	353	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
50	353	8	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
51	357	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
51	357	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	states[$] == FREE
45455	361	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
45455	361	8	OpenIntToDoubleHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
52	364	12	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
52	364	12	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
52	364	12	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
53	409	8	OpenIntToDoubleHashMap.java	put	index	int	0	DEF	$ < 0
54	417	8	OpenIntToDoubleHashMap.java	put	newMapping	boolean	0	DEF	$
55	419	12	OpenIntToDoubleHashMap.java	put	THIS	OpenIntToDoubleHashMap	0	DEF	$.shouldGrowTable()
45456	443	8	OpenIntToDoubleHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
45456	443	8	OpenIntToDoubleHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
56	444	12	OpenIntToDoubleHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
56	444	12	OpenIntToDoubleHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
393	77	8	PascalDistributionImpl.java	setNumberOfSuccesses	successes	int	0	IllegalArgumentException	$ < 0
394	91	8	PascalDistributionImpl.java	setProbabilityOfSuccess	p	double	0	IllegalArgumentException	$ < 0.0
394	91	8	PascalDistributionImpl.java	setProbabilityOfSuccess	p	double	0	IllegalArgumentException	$ > 1.0
395	130	8	PascalDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
396	146	8	PascalDistributionImpl.java	probability	x	int	1	DEF	$ < 0
397	174	8	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
398	176	15	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
902	93	8	PearsonsCorrelation.java	PearsonsCorrelation	covarianceMatrix	RealMatrix	0	DEF	$ == null
46115	139	8	PearsonsCorrelation.java	getCorrelationStandardErrors	i	int	0	NIL-FOR	$ < nVars
46115	139	8	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	i < $
46116	140	12	PearsonsCorrelation.java	getCorrelationStandardErrors	j	int	0	NIL-FOR	$ < nVars
46116	140	12	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	j < $
46117	165	8	PearsonsCorrelation.java	getCorrelationPValues	i	int	0	NIL-FOR	$ < nVars
46117	165	8	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	i < $
46118	166	12	PearsonsCorrelation.java	getCorrelationPValues	j	int	0	NIL-FOR	$ < nVars
46118	166	12	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	j < $
903	167	16	PearsonsCorrelation.java	getCorrelationPValues	j	int	1	DEF	i == $
903	167	16	PearsonsCorrelation.java	getCorrelationPValues	i	int	1	DEF	$ == j
46119	190	8	PearsonsCorrelation.java	computeCorrelation	i	int	0	NIL-FOR	$ < nVars
46119	190	8	PearsonsCorrelation.java	computeCorrelation	nVars	int	0	NIL-FOR	i < $
46120	191	12	PearsonsCorrelation.java	computeCorrelation	j	int	0	NIL-FOR	$ < i
46120	191	12	PearsonsCorrelation.java	computeCorrelation	i	int	0	NIL-FOR	j < $
904	215	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	RET	xArray.$.length > 1
904	215	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	RET	xArray.$.length == yArray.$.length
904	215	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	RET	$.length > 1
904	215	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	RET	$.length == yArray.length
904	215	8	PearsonsCorrelation.java	correlation	yArray	double[]	1	RET	xArray.length == $.length
46121	216	12	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	0	NIL-FOR	i<xArray.$.length
46121	216	12	PearsonsCorrelation.java	correlation	i	int	0	NIL-FOR	$<xArray.length
46121	216	12	PearsonsCorrelation.java	correlation	xArray	double[]	0	NIL-FOR	i<$.length
46122	242	8	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	$ < nVars
46122	242	8	PearsonsCorrelation.java	covarianceToCorrelation	nVars	int	0	NIL-FOR	i < $
46123	245	12	PearsonsCorrelation.java	covarianceToCorrelation	j	int	0	NIL-FOR	$ < i
46123	245	12	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	j < $
905	264	8	PearsonsCorrelation.java	checkSufficientData	nRows	int	0	DEF	$ < 2
905	264	8	PearsonsCorrelation.java	checkSufficientData	nCols	int	0	DEF	$ < 2
846	197	8	Percentile.java	evaluate	p	double	0	IllegalArgumentException	$ > 100
846	197	8	Percentile.java	evaluate	p	double	0	IllegalArgumentException	$ <= 0
847	200	8	Percentile.java	evaluate	length	int	0	RET	$ == 0
848	203	8	Percentile.java	evaluate	length	int	0	RET	$ == 1
849	215	8	Percentile.java	evaluate	pos	double	0	RET	$ < 1
850	218	8	Percentile.java	evaluate	n	double	0	RET	pos >= $
850	218	8	Percentile.java	evaluate	pos	double	0	RET	$ >= n
851	245	8	Percentile.java	setQuantile	p	double	0	IllegalArgumentException	$ <= 0
851	245	8	Percentile.java	setQuantile	p	double	0	IllegalArgumentException	$ > 100
320	90	8	PoissonDistributionImpl.java	setMean	p	double	0	IllegalArgumentException	$ <= 0
321	106	8	PoissonDistributionImpl.java	probability	x	int	0	RET	$ == Integer.MAX_VALUE
321	106	8	PoissonDistributionImpl.java	probability	x	int	0	RET	$ < 0
322	122	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ < 0
323	125	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ == Integer.MAX_VALUE
1350	60	8	PolynomialFunction.java	PolynomialFunction	THIS	PolynomialFunction	0	IllegalArgumentException	c.$.length < 1
1350	60	8	PolynomialFunction.java	PolynomialFunction	c	double	0	IllegalArgumentException	$.length < 1
46463	64	8	PolynomialFunction.java	PolynomialFunction	l	int	0	NIL-WHILE	$ > 1
46463	64	8	PolynomialFunction.java	PolynomialFunction	l	int	0	NIL-WHILE	c[$ - 1] == 0
46463	64	8	PolynomialFunction.java	PolynomialFunction	c	double	0	NIL-WHILE	$[l - 1] == 0
1351	120	8	PolynomialFunction.java	evaluate	n	int	0	IllegalArgumentException	$ < 1
46464	124	8	PolynomialFunction.java	evaluate	j	int	0	NIL-FOR	$ >=0
46465	143	8	PolynomialFunction.java	add	i	int	0	NIL-FOR	$ < lowLength
46465	143	8	PolynomialFunction.java	add	lowLength	int	0	NIL-FOR	i < $
46466	169	8	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < lowLength
46466	169	8	PolynomialFunction.java	subtract	lowLength	int	0	NIL-FOR	i < $
1352	172	8	PolynomialFunction.java	subtract	THIS	PolynomialFunction	1	DEF	$.coefficients.$.length < p.$.coefficients.$.length
1352	172	8	PolynomialFunction.java	subtract	p	PolynomialFunction	1	DEF	coefficients.length < $.coefficients.length
46467	173	12	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < highLength
46467	173	12	PolynomialFunction.java	subtract	highLength	int	0	NIL-FOR	i < $
46468	191	8	PolynomialFunction.java	negate	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
46468	191	8	PolynomialFunction.java	negate	i	int	0	NIL-FOR	$ < coefficients.length
46469	206	8	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	i < newCoefficients.$.length
46469	206	8	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	$ < newCoefficients.length
46469	206	8	PolynomialFunction.java	multiply	newCoefficients	double[]	0	NIL-FOR	i < $.length
46470	208	12	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	j < Math.min($.coefficients.$.length, i + 1)
46470	208	12	PolynomialFunction.java	multiply	j	int	0	NIL-FOR	$ < Math.min(coefficients.length, i + 1)
46470	208	12	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	j < Math.min(coefficients.length, $ + 1)
1353	229	8	PolynomialFunction.java	differentiate	n	int	0	IllegalArgumentException	$ < 1
1354	232	8	PolynomialFunction.java	differentiate	n	int	0	RET	$ == 1
46471	236	8	PolynomialFunction.java	differentiate	i	int	0	NIL-FOR	$ > 0
1355	278	7	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	RET	$.coefficients[0] == 0.0
1356	279	9	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	RET	$.coefficients.$.length == 1
46472	286	7	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
46472	286	7	PolynomialFunction.java	toString	i	int	0	NIL-FOR	$ < coefficients.length
1357	288	9	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] != 0
1357	288	9	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] != 0
1358	290	11	PolynomialFunction.java	toString	s	StringBuffer	1	DEF	$.length() > 0
1359	291	13	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	DEF	$.coefficients[i] < 0
1359	291	13	PolynomialFunction.java	toString	i	int	1	DEF	coefficients[$] < 0
1360	297	13	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] < 0
1360	297	13	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] < 0
1361	303	11	PolynomialFunction.java	toString	absAi	double	0	DEF	($ - 1) != 0
1362	309	11	PolynomialFunction.java	toString	i	int	0	DEF	$ > 1
1341	141	8	PolynomialFunctionLagrangeForm.java	getCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.coefficientsComputed
46453	176	8	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	$ < n
46453	176	8	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	i < $
1342	182	12	PolynomialFunctionLagrangeForm.java	evaluate	dist	double	0	DEF	$ < min_dist
1342	182	12	PolynomialFunctionLagrangeForm.java	evaluate	min_dist	double	0	DEF	dist < $
46454	191	8	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	$ < n
46454	191	8	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	i < $
46455	192	12	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	j < n-$
46455	192	12	PolynomialFunctionLagrangeForm.java	evaluate	j	int	0	NIL-FOR	$ < n-i
46455	192	12	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	j < $-i
1343	196	16	PolynomialFunctionLagrangeForm.java	evaluate	divider	double	0	DuplicateSampleAbscissaException	$ == 0.0
1344	206	12	PolynomialFunctionLagrangeForm.java	evaluate	i	int	1	DEF	nearest < 0.5*(n-$+1)
1344	206	12	PolynomialFunctionLagrangeForm.java	evaluate	n	int	1	DEF	nearest < 0.5*($-i+1)
1344	206	12	PolynomialFunctionLagrangeForm.java	evaluate	nearest	int	1	DEF	$ < 0.5*(n-i+1)
46456	232	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
46456	232	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
46457	239	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
46457	239	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
46458	240	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
46459	248	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
46459	248	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
46460	251	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ < n
46460	251	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	j < $
1345	252	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != j
1345	252	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	DEF	i != $
1346	256	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	d	double	0	DEF	$ == 0.0
46461	258	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	NIL-FOR	$ < n
46461	258	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	k < $
1347	259	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.x[i] == $.x[k]
1347	259	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	DEF	x[i] == x[$]
1347	259	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	DEF	i != $
1347	259	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	x[$] == x[k]
1347	259	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != k
46462	273	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ >= 0
1348	297	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	IllegalArgumentException	y.$.length < 2
1348	297	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	IllegalArgumentException	x.$.length < 2
1348	297	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	IllegalArgumentException	$.length < 2
1348	297	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	IllegalArgumentException	$.length < 2
1349	301	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	IllegalArgumentException	x.$.length != y.$.length
1349	301	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	IllegalArgumentException	$.length != y.length
1349	301	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	IllegalArgumentException	x.length != $.length
1364	139	8	PolynomialFunctionNewtonForm.java	getCoefficients	THIS	PolynomialFunctionNewtonForm	0	DEF	$.coefficientsComputed
46476	166	8	PolynomialFunctionNewtonForm.java	evaluate	i	int	0	NIL-FOR	$ >= 0
46477	181	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ <= n
46477	181	8	PolynomialFunctionNewtonForm.java	computeCoefficients	n	int	0	NIL-FOR	i <= $
46478	186	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ >= 0
46479	187	12	PolynomialFunctionNewtonForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
1365	211	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	IllegalArgumentException	c.$.length < 1
1365	211	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	IllegalArgumentException	a.$.length < 1
1365	211	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	IllegalArgumentException	$.length < 1
1365	211	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	IllegalArgumentException	$.length < 1
1366	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	IllegalArgumentException	a.$.length != c.$.length + 1
1366	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	IllegalArgumentException	$.length != c.length + 1
1366	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	IllegalArgumentException	a.length != $.length + 1
1334	101	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	IllegalArgumentException	knots.$.length < 2
1334	101	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	IllegalArgumentException	$.length < 2
1335	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	IllegalArgumentException	knots.$.length - 1 != polynomials.$.length
1335	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	IllegalArgumentException	$.length - 1 != polynomials.length
1335	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	IllegalArgumentException	knots.length - 1 != $.length
1336	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	IllegalArgumentException	$.isStrictlyIncreasing(knots)
1336	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	IllegalArgumentException	isStrictlyIncreasing($)
1337	137	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	ArgumentOutsideDomainException	v > $.knots[$.n]
1337	137	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	ArgumentOutsideDomainException	v < $.knots[0]
1337	137	8	PolynomialSplineFunction.java	value	v	double	0	ArgumentOutsideDomainException	$ > knots[n]
1337	137	8	PolynomialSplineFunction.java	value	v	double	0	ArgumentOutsideDomainException	$ < knots[0]
1338	141	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
1339	147	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
1339	147	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
46451	168	8	PolynomialSplineFunction.java	polynomialSplineDerivative	THIS	PolynomialSplineFunction	0	NIL-FOR	i < $.n
46451	168	8	PolynomialSplineFunction.java	polynomialSplineDerivative	i	int	0	NIL-FOR	$ < n
46452	221	8	PolynomialSplineFunction.java	isStrictlyIncreasing	THIS	PolynomialSplineFunction	0	NIL-FOR	i < x.$.length
46452	221	8	PolynomialSplineFunction.java	isStrictlyIncreasing	i	int	0	NIL-FOR	$ < x.length
46452	221	8	PolynomialSplineFunction.java	isStrictlyIncreasing	x	double[]	0	NIL-FOR	i < $.length
1340	222	12	PolynomialSplineFunction.java	isStrictlyIncreasing	i	int	0	RET	x[$ - 1] >= x[$]
1340	222	12	PolynomialSplineFunction.java	isStrictlyIncreasing	x	double[]	0	RET	$[i - 1] >= $[i]
1363	198	12	PolynomialsUtils.java	buildPolynomial	maxDegree	int	0	DEF	degree > $
1363	198	12	PolynomialsUtils.java	buildPolynomial	degree	int	0	DEF	$ > maxDegree
46473	214	8	PolynomialsUtils.java	buildPolynomial	i	int	0	NIL-FOR	$ <= degree
46473	214	8	PolynomialsUtils.java	buildPolynomial	degree	int	0	NIL-FOR	i <= $
46474	234	8	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	$ < degree
46474	234	8	PolynomialsUtils.java	computeUpToDegree	degree	int	0	NIL-FOR	k < $
46475	250	12	PolynomialsUtils.java	computeUpToDegree	i	int	0	NIL-FOR	$ < k
46475	250	12	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	i < $
773	71	8	Product.java	increment	THIS	Product	1	DEF	$.n == 0
774	117	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, begin, length)
774	117	8	Product.java	evaluate	values	double[]	0	DEF	test($, begin, length)
774	117	8	Product.java	evaluate	begin	int	0	DEF	test(values, $, length)
774	117	8	Product.java	evaluate	length	int	0	DEF	test(values, begin, $)
46086	119	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
46086	119	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
46086	119	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
250	98	8	ProperFractionFormat.java	format	whole	int	0	DEF	$ != 0
251	134	8	ProperFractionFormat.java	parse	ret	Fraction	0	RET	$ != null
252	145	8	ProperFractionFormat.java	parse	whole	Number	0	RET	$ == null
253	158	8	ProperFractionFormat.java	parse	num	Number	0	RET	$ == null
254	166	8	ProperFractionFormat.java	parse	num	Number	0	RET	$.intValue() < 0
255	197	8	ProperFractionFormat.java	parse	den	Number	0	RET	$ == null
256	205	8	ProperFractionFormat.java	parse	den	Number	0	RET	$.intValue() < 0
257	224	8	ProperFractionFormat.java	setWholeFormat	format	NumberFormat	0	IllegalArgumentException	$ == null
45984	95	8	QRDecompositionImpl.java	QRDecompositionImpl	minor	int	0	NIL-FOR	$ < Math.min(m, n)
45984	95	8	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	minor < Math.min($, n)
45984	95	8	QRDecompositionImpl.java	QRDecompositionImpl	n	int	0	NIL-FOR	minor < Math.min(m, $)
45985	107	12	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
45985	107	12	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
628	114	12	QRDecompositionImpl.java	QRDecompositionImpl	a	double	0	DEF	$ != 0.0
45986	138	16	QRDecompositionImpl.java	QRDecompositionImpl	col	int	0	NIL-FOR	$ < n
45986	138	16	QRDecompositionImpl.java	QRDecompositionImpl	n	int	0	NIL-FOR	col < $
45987	141	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
45987	141	20	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
45988	147	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
45988	147	20	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
629	158	8	QRDecompositionImpl.java	getR	THIS	QRDecompositionImpl	0	DEF	$.cachedR == null
45989	166	12	QRDecompositionImpl.java	getR	row	int	0	NIL-FOR	$ >= 0
45990	168	16	QRDecompositionImpl.java	getR	col	int	0	NIL-FOR	$ < n
45990	168	16	QRDecompositionImpl.java	getR	n	int	0	NIL-FOR	col < $
630	182	8	QRDecompositionImpl.java	getQ	THIS	QRDecompositionImpl	0	DEF	$.cachedQ == null
631	191	8	QRDecompositionImpl.java	getQT	THIS	QRDecompositionImpl	0	DEF	$.cachedQT == null
45991	203	12	QRDecompositionImpl.java	getQT	minor	int	0	NIL-FOR	$ >= Math.min(m, n)
45991	203	12	QRDecompositionImpl.java	getQT	n	int	0	NIL-FOR	minor >= Math.min(m, $)
45991	203	12	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	minor >= Math.min($, n)
45992	207	12	QRDecompositionImpl.java	getQT	minor	int	0	NIL-FOR	$ >= 0
632	210	16	QRDecompositionImpl.java	getQT	qrtMinor	double[]	0	DEF	$[minor] != 0.0
632	210	16	QRDecompositionImpl.java	getQT	minor	int	0	DEF	qrtMinor[$] != 0.0
45993	211	20	QRDecompositionImpl.java	getQT	col	int	0	NIL-FOR	$ < m
45993	211	20	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	col < $
45994	213	24	QRDecompositionImpl.java	getQT	row	int	0	NIL-FOR	$ < m
45994	213	24	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	row < $
45995	218	24	QRDecompositionImpl.java	getQT	row	int	0	NIL-FOR	$ < m
45995	218	24	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	row < $
633	235	8	QRDecompositionImpl.java	getH	THIS	QRDecompositionImpl	0	DEF	$.cachedH == null
45996	240	12	QRDecompositionImpl.java	getH	i	int	0	NIL-FOR	$ < m
45996	240	12	QRDecompositionImpl.java	getH	m	int	0	NIL-FOR	i < $
45997	241	16	QRDecompositionImpl.java	getH	j	int	0	NIL-FOR	$ < Math.min(i + 1, n)
45997	241	16	QRDecompositionImpl.java	getH	i	int	0	NIL-FOR	j < Math.min($ + 1, n)
45997	241	16	QRDecompositionImpl.java	getH	n	int	0	NIL-FOR	j < Math.min(i + 1, $)
967	175	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
968	124	8	RandomDataImpl.java	nextHexString	len	int	0	IllegalArgumentException	$ <= 0
46162	139	8	RandomDataImpl.java	nextHexString	THIS	RandomDataImpl	0	NIL-FOR	i < randomBytes.$.length
46162	139	8	RandomDataImpl.java	nextHexString	i	int	0	NIL-FOR	$ < randomBytes.length
46162	139	8	RandomDataImpl.java	nextHexString	randomBytes	byte[]	0	NIL-FOR	i < $.length
969	150	13	RandomDataImpl.java	nextHexString	hex	String	0	DEF	$.length() == 1
970	167	8	RandomDataImpl.java	nextInt	lower	int	0	IllegalArgumentException	$ >= upper
970	167	8	RandomDataImpl.java	nextInt	upper	int	0	IllegalArgumentException	lower >= $
971	185	8	RandomDataImpl.java	nextLong	lower	long	0	IllegalArgumentException	$ >= upper
971	185	8	RandomDataImpl.java	nextLong	upper	long	0	IllegalArgumentException	lower >= $
972	211	8	RandomDataImpl.java	nextSecureHexString	len	int	0	IllegalArgumentException	$ <= 0
46163	229	7	RandomDataImpl.java	nextSecureHexString	iter	int	0	NIL-FOR	$ < numIter + 1
46163	229	7	RandomDataImpl.java	nextSecureHexString	numIter	int	0	NIL-FOR	iter < $ + 1
46164	238	12	RandomDataImpl.java	nextSecureHexString	THIS	RandomDataImpl	0	NIL-FOR	i < hash.$.length
46164	238	12	RandomDataImpl.java	nextSecureHexString	i	int	0	NIL-FOR	$ < hash.length
46164	238	12	RandomDataImpl.java	nextSecureHexString	hash	byte[]	0	NIL-FOR	i < $.length
973	249	16	RandomDataImpl.java	nextSecureHexString	hex	String	0	DEF	$.length() == 1
974	268	10	RandomDataImpl.java	nextSecureInt	lower	int	0	IllegalArgumentException	$ >= upper
974	268	10	RandomDataImpl.java	nextSecureInt	upper	int	0	IllegalArgumentException	lower >= $
975	286	8	RandomDataImpl.java	nextSecureLong	lower	long	0	IllegalArgumentException	$ >= upper
975	286	8	RandomDataImpl.java	nextSecureLong	upper	long	0	IllegalArgumentException	lower >= $
976	310	8	RandomDataImpl.java	nextPoisson	mean	double	0	IllegalArgumentException	$ <= 0
46165	318	8	RandomDataImpl.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * mean
46165	318	8	RandomDataImpl.java	nextPoisson	mean	double	0	NIL-WHILE	n < 1000 * $
977	321	12	RandomDataImpl.java	nextPoisson	p	double	1	DEF	r >= $
977	321	12	RandomDataImpl.java	nextPoisson	r	double	1	DEF	$ >= p
978	340	8	RandomDataImpl.java	nextGaussian	sigma	double	0	IllegalArgumentException	$ <= 0
979	360	8	RandomDataImpl.java	nextExponential	mean	double	0	IllegalArgumentException	$ < 0.0
46166	366	8	RandomDataImpl.java	nextExponential	unif	double	0	NIL-WHILE	$ == 0.0d
980	385	8	RandomDataImpl.java	nextUniform	lower	double	0	IllegalArgumentException	$ >= upper
980	385	8	RandomDataImpl.java	nextUniform	upper	double	0	IllegalArgumentException	lower >= $
46167	393	8	RandomDataImpl.java	nextUniform	u	double	0	NIL-WHILE	$ <= 0.0
981	410	8	RandomDataImpl.java	getRan	THIS	RandomDataImpl	0	DEF	$.rand == null
982	425	8	RandomDataImpl.java	getSecRan	THIS	RandomDataImpl	0	DEF	$.secRand == null
983	440	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
984	453	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
985	467	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
986	478	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
987	530	8	RandomDataImpl.java	nextPermutation	n	int	0	IllegalArgumentException	k > $
987	530	8	RandomDataImpl.java	nextPermutation	k	int	0	IllegalArgumentException	$ > n
988	534	8	RandomDataImpl.java	nextPermutation	k	int	0	IllegalArgumentException	$ == 0
46168	542	8	RandomDataImpl.java	nextPermutation	i	int	0	NIL-FOR	$ < k
46168	542	8	RandomDataImpl.java	nextPermutation	k	int	0	NIL-FOR	i < $
989	564	8	RandomDataImpl.java	nextSample	len	int	0	IllegalArgumentException	k > $
989	564	8	RandomDataImpl.java	nextSample	k	int	0	IllegalArgumentException	$ > len
990	568	8	RandomDataImpl.java	nextSample	k	int	0	IllegalArgumentException	$ == 0
46169	576	7	RandomDataImpl.java	nextSample	i	int	0	NIL-FOR	$ < k
46169	576	7	RandomDataImpl.java	nextSample	k	int	0	NIL-FOR	i < $
46170	593	8	RandomDataImpl.java	shuffle	i	int	0	NIL-FOR	$ >= end
46170	593	8	RandomDataImpl.java	shuffle	end	int	0	NIL-FOR	i >= $
991	594	12	RandomDataImpl.java	shuffle	i	int	1	DEF	$ == 0
46171	613	8	RandomDataImpl.java	getNatural	i	int	0	NIL-FOR	$ < n
46171	613	8	RandomDataImpl.java	getNatural	n	int	0	NIL-FOR	i < $
513	115	8	RealMatrixImpl.java	RealMatrixImpl	copyArray	boolean	1	DEF	$
514	118	12	RealMatrixImpl.java	RealMatrixImpl	d	double[][]	0	NullPointerException	$ == null
515	122	12	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	DEF	$ == 0
516	127	12	RealMatrixImpl.java	RealMatrixImpl	nCols	int	0	DEF	$ == 0
45695	131	12	RealMatrixImpl.java	RealMatrixImpl	r	int	0	NIL-FOR	$ < nRows
45695	131	12	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	NIL-FOR	r < $
517	132	16	RealMatrixImpl.java	RealMatrixImpl	THIS	RealMatrixImpl	0	DEF	d[r].length != nCols
517	132	16	RealMatrixImpl.java	RealMatrixImpl	r	int	0	DEF	d[$].length != nCols
517	132	16	RealMatrixImpl.java	RealMatrixImpl	nCols	int	0	DEF	d[r].length != $
517	132	16	RealMatrixImpl.java	RealMatrixImpl	d	double[][]	0	DEF	$[r].length != nCols
45696	153	8	RealMatrixImpl.java	RealMatrixImpl	row	int	0	NIL-FOR	$ < nRows
45696	153	8	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	NIL-FOR	row < $
45697	195	8	RealMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
45697	195	8	RealMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
45698	199	12	RealMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
45698	199	12	RealMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
45699	234	8	RealMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
45699	234	8	RealMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
45700	238	12	RealMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
45700	238	12	RealMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
45701	274	8	RealMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
45701	274	8	RealMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
45702	277	12	RealMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
45702	277	12	RealMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
45703	279	16	RealMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
45703	279	16	RealMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
518	309	8	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	1	DEF	$.data == null
519	310	12	RealMatrixImpl.java	setSubMatrix	row	int	0	DEF	$ > 0
520	314	12	RealMatrixImpl.java	setSubMatrix	column	int	0	DEF	$ > 0
521	319	12	RealMatrixImpl.java	setSubMatrix	nRows	int	0	DEF	$ == 0
522	325	12	RealMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	$ == 0
45704	330	12	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	NIL-FOR	i < $.data.$.length
45704	330	12	RealMatrixImpl.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
523	331	16	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	DEF	subMatrix[i].length != nCols
523	331	16	RealMatrixImpl.java	setSubMatrix	i	int	0	DEF	subMatrix[$].length != nCols
523	331	16	RealMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	subMatrix[i].length != $
523	331	16	RealMatrixImpl.java	setSubMatrix	subMatrix	double[][]	0	DEF	$[i].length != nCols
524	416	8	RealMatrixImpl.java	operate	THIS	RealMatrixImpl	0	DEF	v.$.length != nCols
524	416	8	RealMatrixImpl.java	operate	nCols	int	0	DEF	v.length != $
524	416	8	RealMatrixImpl.java	operate	v	double[]	0	DEF	$.length != nCols
45705	424	8	RealMatrixImpl.java	operate	row	int	0	NIL-FOR	$ < nRows
45705	424	8	RealMatrixImpl.java	operate	nRows	int	0	NIL-FOR	row < $
45706	427	12	RealMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < nCols
45706	427	12	RealMatrixImpl.java	operate	nCols	int	0	NIL-FOR	i < $
525	441	8	RealMatrixImpl.java	preMultiply	THIS	RealMatrixImpl	0	DEF	v.$.length != nRows
525	441	8	RealMatrixImpl.java	preMultiply	nRows	int	0	DEF	v.length != $
525	441	8	RealMatrixImpl.java	preMultiply	v	double[]	0	DEF	$.length != nRows
45707	450	8	RealMatrixImpl.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
45707	450	8	RealMatrixImpl.java	preMultiply	nCols	int	0	NIL-FOR	col < $
45708	452	12	RealMatrixImpl.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
45708	452	12	RealMatrixImpl.java	preMultiply	nRows	int	0	NIL-FOR	i < $
45709	468	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
45709	468	8	RealMatrixImpl.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
45710	470	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
45710	470	12	RealMatrixImpl.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
45711	483	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
45711	483	8	RealMatrixImpl.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
45712	485	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
45712	485	12	RealMatrixImpl.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
45713	500	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
45713	500	8	RealMatrixImpl.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
45714	502	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
45714	502	12	RealMatrixImpl.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
45715	517	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
45715	517	8	RealMatrixImpl.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
45716	519	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
45716	519	12	RealMatrixImpl.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
45717	532	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
45717	532	8	RealMatrixImpl.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
45718	533	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
45718	533	12	RealMatrixImpl.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
45719	547	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
45719	547	8	RealMatrixImpl.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
45720	548	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
45720	548	12	RealMatrixImpl.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
45721	563	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
45721	563	8	RealMatrixImpl.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
45722	564	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
45722	564	12	RealMatrixImpl.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
45723	580	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
45723	580	8	RealMatrixImpl.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
45724	581	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
45724	581	12	RealMatrixImpl.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
45725	597	8	RealMatrixImpl.java	copyOut	i	int	0	NIL-FOR	$ < nRows
45725	597	8	RealMatrixImpl.java	copyOut	nRows	int	0	NIL-FOR	i < $
45736	214	8	RealVectorFormat.java	format	i	int	0	NIL-FOR	$ < vector.getDimension()
45736	214	8	RealVectorFormat.java	format	vector	RealVector	0	NIL-FOR	i < $.getDimension()
526	215	12	RealVectorFormat.java	format	i	int	0	DEF	$ > 0
527	243	8	RealVectorFormat.java	format	obj	Object	0	RET	$ instanceof RealVector
528	261	8	RealVectorFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
529	280	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	$.parseFixedstring(source, $.trimmedPrefix, pos)
529	280	8	RealVectorFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedPrefix, pos)
529	280	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedPrefix, $)
45737	286	8	RealVectorFormat.java	parse	loop	boolean	0	NIL-FOR	$
530	288	12	RealVectorFormat.java	parse	components	List<Number>	0	DEF	$.isEmpty()
531	290	16	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	DEF	$.parseFixedstring(source, $.trimmedSeparator, pos)
531	290	16	RealVectorFormat.java	parse	source	String	0	DEF	parseFixedstring($, trimmedSeparator, pos)
531	290	16	RealVectorFormat.java	parse	pos	ParsePosition	0	DEF	parseFixedstring(source, trimmedSeparator, $)
532	295	12	RealVectorFormat.java	parse	loop	boolean	0	RET	$
533	298	16	RealVectorFormat.java	parse	component	Number	1	DEF	$ != null
534	312	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	$.parseFixedstring(source, $.trimmedSuffix, pos)
534	312	8	RealVectorFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSuffix, pos)
534	312	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSuffix, $)
45738	318	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	NIL-FOR	i < data.$.length
45738	318	8	RealVectorFormat.java	parse	i	int	0	NIL-FOR	$ < data.length
45738	318	8	RealVectorFormat.java	parse	data	double[]	0	NIL-FOR	i < $.length
406	97	8	RealVectorImpl.java	RealVectorImpl	d	double[]	0	NullPointerException	$ == null
407	100	8	RealVectorImpl.java	RealVectorImpl	THIS	RealVectorImpl	0	IllegalArgumentException	d.$.length == 0
407	100	8	RealVectorImpl.java	RealVectorImpl	d	double[]	0	IllegalArgumentException	$.length == 0
408	113	8	RealVectorImpl.java	RealVectorImpl	THIS	RealVectorImpl	0	IllegalArgumentException	d.$.length < pos + size
408	113	8	RealVectorImpl.java	RealVectorImpl	d	double[]	0	IllegalArgumentException	$.length < pos + size
408	113	8	RealVectorImpl.java	RealVectorImpl	pos	int	0	IllegalArgumentException	d.length < $ + size
408	113	8	RealVectorImpl.java	RealVectorImpl	size	int	0	IllegalArgumentException	d.length < pos + $
45478	128	8	RealVectorImpl.java	RealVectorImpl	THIS	RealVectorImpl	0	NIL-FOR	i < d.$.length
45478	128	8	RealVectorImpl.java	RealVectorImpl	i	int	0	NIL-FOR	$ < d.length
45478	128	8	RealVectorImpl.java	RealVectorImpl	d	Double[]	0	NIL-FOR	i < $.length
409	140	8	RealVectorImpl.java	RealVectorImpl	THIS	RealVectorImpl	0	IllegalArgumentException	d.$.length < pos + size
409	140	8	RealVectorImpl.java	RealVectorImpl	d	Double[]	0	IllegalArgumentException	$.length < pos + size
409	140	8	RealVectorImpl.java	RealVectorImpl	pos	int	0	IllegalArgumentException	d.length < $ + size
409	140	8	RealVectorImpl.java	RealVectorImpl	size	int	0	IllegalArgumentException	d.length < pos + $
45479	146	8	RealVectorImpl.java	RealVectorImpl	i	int	0	NIL-FOR	$ < pos + size
45479	146	8	RealVectorImpl.java	RealVectorImpl	pos	int	0	NIL-FOR	i < $ + size
45479	146	8	RealVectorImpl.java	RealVectorImpl	size	int	0	NIL-FOR	i < pos + $
45480	157	8	RealVectorImpl.java	RealVectorImpl	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45480	157	8	RealVectorImpl.java	RealVectorImpl	i	int	0	NIL-FOR	$ < data.length
45481	236	12	RealVectorImpl.java	add	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45481	236	12	RealVectorImpl.java	add	i	int	0	NIL-FOR	$ < data.length
45482	248	8	RealVectorImpl.java	add	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45482	248	8	RealVectorImpl.java	add	i	int	0	NIL-FOR	$ < data.length
45483	273	12	RealVectorImpl.java	subtract	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45483	273	12	RealVectorImpl.java	subtract	i	int	0	NIL-FOR	$ < data.length
45484	285	8	RealVectorImpl.java	subtract	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45484	285	8	RealVectorImpl.java	subtract	i	int	0	NIL-FOR	$ < data.length
45485	305	8	RealVectorImpl.java	mapAdd	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45485	305	8	RealVectorImpl.java	mapAdd	i	int	0	NIL-FOR	$ < data.length
45486	313	8	RealVectorImpl.java	mapAddToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45486	313	8	RealVectorImpl.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
45487	322	8	RealVectorImpl.java	mapSubtract	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45487	322	8	RealVectorImpl.java	mapSubtract	i	int	0	NIL-FOR	$ < data.length
45488	330	8	RealVectorImpl.java	mapSubtractToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45488	330	8	RealVectorImpl.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
45489	339	8	RealVectorImpl.java	mapMultiply	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45489	339	8	RealVectorImpl.java	mapMultiply	i	int	0	NIL-FOR	$ < data.length
45490	347	8	RealVectorImpl.java	mapMultiplyToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45490	347	8	RealVectorImpl.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
45491	356	8	RealVectorImpl.java	mapDivide	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45491	356	8	RealVectorImpl.java	mapDivide	i	int	0	NIL-FOR	$ < data.length
45492	364	8	RealVectorImpl.java	mapDivideToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45492	364	8	RealVectorImpl.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
45493	373	8	RealVectorImpl.java	mapPow	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45493	373	8	RealVectorImpl.java	mapPow	i	int	0	NIL-FOR	$ < data.length
45494	381	8	RealVectorImpl.java	mapPowToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45494	381	8	RealVectorImpl.java	mapPowToSelf	i	int	0	NIL-FOR	$ < data.length
45495	390	8	RealVectorImpl.java	mapExp	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45495	390	8	RealVectorImpl.java	mapExp	i	int	0	NIL-FOR	$ < data.length
45496	398	8	RealVectorImpl.java	mapExpToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45496	398	8	RealVectorImpl.java	mapExpToSelf	i	int	0	NIL-FOR	$ < data.length
45497	407	8	RealVectorImpl.java	mapExpm1	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45497	407	8	RealVectorImpl.java	mapExpm1	i	int	0	NIL-FOR	$ < data.length
45498	415	8	RealVectorImpl.java	mapExpm1ToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45498	415	8	RealVectorImpl.java	mapExpm1ToSelf	i	int	0	NIL-FOR	$ < data.length
45499	424	8	RealVectorImpl.java	mapLog	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45499	424	8	RealVectorImpl.java	mapLog	i	int	0	NIL-FOR	$ < data.length
45500	432	8	RealVectorImpl.java	mapLogToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45500	432	8	RealVectorImpl.java	mapLogToSelf	i	int	0	NIL-FOR	$ < data.length
45501	441	8	RealVectorImpl.java	mapLog10	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45501	441	8	RealVectorImpl.java	mapLog10	i	int	0	NIL-FOR	$ < data.length
45502	449	8	RealVectorImpl.java	mapLog10ToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45502	449	8	RealVectorImpl.java	mapLog10ToSelf	i	int	0	NIL-FOR	$ < data.length
45503	458	8	RealVectorImpl.java	mapLog1p	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45503	458	8	RealVectorImpl.java	mapLog1p	i	int	0	NIL-FOR	$ < data.length
45504	466	8	RealVectorImpl.java	mapLog1pToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45504	466	8	RealVectorImpl.java	mapLog1pToSelf	i	int	0	NIL-FOR	$ < data.length
45505	475	8	RealVectorImpl.java	mapCosh	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45505	475	8	RealVectorImpl.java	mapCosh	i	int	0	NIL-FOR	$ < data.length
45506	483	8	RealVectorImpl.java	mapCoshToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45506	483	8	RealVectorImpl.java	mapCoshToSelf	i	int	0	NIL-FOR	$ < data.length
45507	492	8	RealVectorImpl.java	mapSinh	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45507	492	8	RealVectorImpl.java	mapSinh	i	int	0	NIL-FOR	$ < data.length
45508	500	8	RealVectorImpl.java	mapSinhToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45508	500	8	RealVectorImpl.java	mapSinhToSelf	i	int	0	NIL-FOR	$ < data.length
45509	509	8	RealVectorImpl.java	mapTanh	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45509	509	8	RealVectorImpl.java	mapTanh	i	int	0	NIL-FOR	$ < data.length
45510	517	8	RealVectorImpl.java	mapTanhToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45510	517	8	RealVectorImpl.java	mapTanhToSelf	i	int	0	NIL-FOR	$ < data.length
45511	526	8	RealVectorImpl.java	mapCos	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45511	526	8	RealVectorImpl.java	mapCos	i	int	0	NIL-FOR	$ < data.length
45512	534	8	RealVectorImpl.java	mapCosToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45512	534	8	RealVectorImpl.java	mapCosToSelf	i	int	0	NIL-FOR	$ < data.length
45513	543	8	RealVectorImpl.java	mapSin	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45513	543	8	RealVectorImpl.java	mapSin	i	int	0	NIL-FOR	$ < data.length
45514	551	8	RealVectorImpl.java	mapSinToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45514	551	8	RealVectorImpl.java	mapSinToSelf	i	int	0	NIL-FOR	$ < data.length
45515	560	8	RealVectorImpl.java	mapTan	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45515	560	8	RealVectorImpl.java	mapTan	i	int	0	NIL-FOR	$ < data.length
45516	568	8	RealVectorImpl.java	mapTanToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45516	568	8	RealVectorImpl.java	mapTanToSelf	i	int	0	NIL-FOR	$ < data.length
45517	577	8	RealVectorImpl.java	mapAcos	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45517	577	8	RealVectorImpl.java	mapAcos	i	int	0	NIL-FOR	$ < data.length
45518	585	8	RealVectorImpl.java	mapAcosToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45518	585	8	RealVectorImpl.java	mapAcosToSelf	i	int	0	NIL-FOR	$ < data.length
45519	594	8	RealVectorImpl.java	mapAsin	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45519	594	8	RealVectorImpl.java	mapAsin	i	int	0	NIL-FOR	$ < data.length
45520	602	8	RealVectorImpl.java	mapAsinToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45520	602	8	RealVectorImpl.java	mapAsinToSelf	i	int	0	NIL-FOR	$ < data.length
45521	611	8	RealVectorImpl.java	mapAtan	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45521	611	8	RealVectorImpl.java	mapAtan	i	int	0	NIL-FOR	$ < data.length
45522	619	8	RealVectorImpl.java	mapAtanToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45522	619	8	RealVectorImpl.java	mapAtanToSelf	i	int	0	NIL-FOR	$ < data.length
45523	628	8	RealVectorImpl.java	mapInv	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45523	628	8	RealVectorImpl.java	mapInv	i	int	0	NIL-FOR	$ < data.length
45524	636	8	RealVectorImpl.java	mapInvToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45524	636	8	RealVectorImpl.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
45525	645	8	RealVectorImpl.java	mapAbs	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45525	645	8	RealVectorImpl.java	mapAbs	i	int	0	NIL-FOR	$ < data.length
45526	653	8	RealVectorImpl.java	mapAbsToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45526	653	8	RealVectorImpl.java	mapAbsToSelf	i	int	0	NIL-FOR	$ < data.length
45527	662	8	RealVectorImpl.java	mapSqrt	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45527	662	8	RealVectorImpl.java	mapSqrt	i	int	0	NIL-FOR	$ < data.length
45528	670	8	RealVectorImpl.java	mapSqrtToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45528	670	8	RealVectorImpl.java	mapSqrtToSelf	i	int	0	NIL-FOR	$ < data.length
45529	679	8	RealVectorImpl.java	mapCbrt	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45529	679	8	RealVectorImpl.java	mapCbrt	i	int	0	NIL-FOR	$ < data.length
45530	687	8	RealVectorImpl.java	mapCbrtToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45530	687	8	RealVectorImpl.java	mapCbrtToSelf	i	int	0	NIL-FOR	$ < data.length
45531	696	8	RealVectorImpl.java	mapCeil	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45531	696	8	RealVectorImpl.java	mapCeil	i	int	0	NIL-FOR	$ < data.length
45532	704	8	RealVectorImpl.java	mapCeilToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45532	704	8	RealVectorImpl.java	mapCeilToSelf	i	int	0	NIL-FOR	$ < data.length
45533	713	8	RealVectorImpl.java	mapFloor	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45533	713	8	RealVectorImpl.java	mapFloor	i	int	0	NIL-FOR	$ < data.length
45534	721	8	RealVectorImpl.java	mapFloorToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45534	721	8	RealVectorImpl.java	mapFloorToSelf	i	int	0	NIL-FOR	$ < data.length
45535	730	8	RealVectorImpl.java	mapRint	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45535	730	8	RealVectorImpl.java	mapRint	i	int	0	NIL-FOR	$ < data.length
45536	738	8	RealVectorImpl.java	mapRintToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45536	738	8	RealVectorImpl.java	mapRintToSelf	i	int	0	NIL-FOR	$ < data.length
45537	747	8	RealVectorImpl.java	mapSignum	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45537	747	8	RealVectorImpl.java	mapSignum	i	int	0	NIL-FOR	$ < data.length
45538	755	8	RealVectorImpl.java	mapSignumToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45538	755	8	RealVectorImpl.java	mapSignumToSelf	i	int	0	NIL-FOR	$ < data.length
45539	764	8	RealVectorImpl.java	mapUlp	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45539	764	8	RealVectorImpl.java	mapUlp	i	int	0	NIL-FOR	$ < data.length
45540	772	8	RealVectorImpl.java	mapUlpToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45540	772	8	RealVectorImpl.java	mapUlpToSelf	i	int	0	NIL-FOR	$ < data.length
45541	786	12	RealVectorImpl.java	ebeMultiply	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45541	786	12	RealVectorImpl.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
45542	798	8	RealVectorImpl.java	ebeMultiply	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45542	798	8	RealVectorImpl.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
45543	823	12	RealVectorImpl.java	ebeDivide	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45543	823	12	RealVectorImpl.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
45544	835	8	RealVectorImpl.java	ebeDivide	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45544	835	8	RealVectorImpl.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
45545	874	12	RealVectorImpl.java	dotProduct	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45545	874	12	RealVectorImpl.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
45546	886	8	RealVectorImpl.java	dotProduct	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45546	886	8	RealVectorImpl.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
45547	938	12	RealVectorImpl.java	getDistance	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45547	938	12	RealVectorImpl.java	getDistance	i	int	0	NIL-FOR	$ < data.length
45548	951	8	RealVectorImpl.java	getDistance	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45548	951	8	RealVectorImpl.java	getDistance	i	int	0	NIL-FOR	$ < data.length
45549	984	12	RealVectorImpl.java	getL1Distance	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45549	984	12	RealVectorImpl.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
45550	997	8	RealVectorImpl.java	getL1Distance	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45550	997	8	RealVectorImpl.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
45551	1030	12	RealVectorImpl.java	getLInfDistance	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45551	1030	12	RealVectorImpl.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
45552	1043	8	RealVectorImpl.java	getLInfDistance	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45552	1043	8	RealVectorImpl.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
410	1071	8	RealVectorImpl.java	unitVector	norm	double	0	DEF	$ == 0
411	1080	8	RealVectorImpl.java	unitize	norm	double	0	DEF	$ == 0
45553	1084	8	RealVectorImpl.java	unitize	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45553	1084	8	RealVectorImpl.java	unitize	i	int	0	NIL-FOR	$ < data.length
45554	1117	12	RealVectorImpl.java	outerProduct	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45554	1117	12	RealVectorImpl.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
45555	1118	16	RealVectorImpl.java	outerProduct	THIS	RealVectorImpl	0	NIL-FOR	j < $.data.$.length
45555	1118	16	RealVectorImpl.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
45556	1143	8	RealVectorImpl.java	outerProduct	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45556	1143	8	RealVectorImpl.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
45557	1144	12	RealVectorImpl.java	outerProduct	THIS	RealVectorImpl	0	NIL-FOR	j < $.data.$.length
45557	1144	12	RealVectorImpl.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
45558	1219	16	RealVectorImpl.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
45558	1219	16	RealVectorImpl.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
45558	1219	16	RealVectorImpl.java	setSubVector	v	RealVector	0	NIL-FOR	i < index + $.getDimension()
412	1287	8	RealVectorImpl.java	checkVectorDimensions	THIS	RealVectorImpl	0	IllegalArgumentException	$.data.$.length != n
412	1287	8	RealVectorImpl.java	checkVectorDimensions	n	int	0	IllegalArgumentException	data.length != $
413	1299	12	RealVectorImpl.java	isNaN	THIS	RealVectorImpl	0	RET	Double.isNaN($.v)
414	1314	8	RealVectorImpl.java	isInfinite	THIS	RealVectorImpl	0	RET	$.isNaN()
415	1319	12	RealVectorImpl.java	isInfinite	THIS	RealVectorImpl	0	RET	Double.isInfinite($.v)
416	1349	6	RealVectorImpl.java	equals	THIS	RealVectorImpl	0	RET	$ == other
416	1349	6	RealVectorImpl.java	equals	other	Object	0	RET	this == $
417	1353	6	RealVectorImpl.java	equals	other	Object	0	RET	$ == null
418	1360	10	RealVectorImpl.java	equals	THIS	RealVectorImpl	0	RET	$.data.$.length != rhs.getDimension()
418	1360	10	RealVectorImpl.java	equals	rhs	RealVector	0	RET	data.length != $.getDimension()
419	1364	10	RealVectorImpl.java	equals	rhs	RealVector	0	RET	$.isNaN()
45559	1368	10	RealVectorImpl.java	equals	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
45559	1368	10	RealVectorImpl.java	equals	i	int	0	NIL-FOR	$ < data.length
420	1369	14	RealVectorImpl.java	equals	THIS	RealVectorImpl	0	RET	$.data[i] != rhs.getEntry(i)
420	1369	14	RealVectorImpl.java	equals	i	int	0	RET	data[$] != rhs.getEntry($)
420	1369	14	RealVectorImpl.java	equals	rhs	RealVector	0	RET	data[i] != $.getEntry(i)
421	1388	8	RealVectorImpl.java	hashCode	THIS	RealVectorImpl	0	RET	$.isNaN()
422	1401	8	RealVectorImpl.java	checkIndex	THIS	RealVectorImpl	0	MatrixIndexException	index >= $.getDimension()
422	1401	8	RealVectorImpl.java	checkIndex	index	int	0	MatrixIndexException	$ < 0
422	1401	8	RealVectorImpl.java	checkIndex	index	int	0	MatrixIndexException	$ >= getDimension()
8	268	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + $.numElements) > $.internalArray.$.length
9	272	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
10	296	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	($.startIndex + ($.numElements + 1)) > $.internalArray.$.length
11	306	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
12	322	8	ResizableDoubleArray.java	substituteMostRecentElement	THIS	ResizableDoubleArray	0	DEF	$.numElements < 1
13	349	8	ResizableDoubleArray.java	checkContractExpand	contractionCritera	float	0	IllegalArgumentException	$ < expansionFactor
13	349	8	ResizableDoubleArray.java	checkContractExpand	expansionFactor	float	0	IllegalArgumentException	contractionCritera < $
14	359	8	ResizableDoubleArray.java	checkContractExpand	THIS	ResizableDoubleArray	0	IllegalArgumentException	$.contractionCriteria <= 1.0
15	369	8	ResizableDoubleArray.java	checkContractExpand	expansionFactor	float	0	IllegalArgumentException	$ <= 1.0
16	455	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	1	IllegalArgumentException	i > $.numElements
16	455	8	ResizableDoubleArray.java	discardExtremeElements	i	int	1	IllegalArgumentException	$ > numElements
17	459	15	ResizableDoubleArray.java	discardExtremeElements	i	int	1	IllegalArgumentException	$ < 0
18	465	12	ResizableDoubleArray.java	discardExtremeElements	front	boolean	0	DEF	$
19	467	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
20	489	8	ResizableDoubleArray.java	expand	THIS	ResizableDoubleArray	1	DEF	$.expansionMode == MULTIPLICATIVE_MODE
21	538	8	ResizableDoubleArray.java	getElement	THIS	ResizableDoubleArray	1	DEF	index >= $.numElements
21	538	8	ResizableDoubleArray.java	getElement	index	int	1	DEF	$ >= numElements
22	541	15	ResizableDoubleArray.java	getElement	index	int	1	RET	$ >= 0
23	668	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ < 0
24	672	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	index + 1 > $.numElements
24	672	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ + 1 > numElements
25	675	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + index) >= $.internalArray.$.length
25	675	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	(startIndex + $) >= internalArray.length
26	706	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	IllegalArgumentException	$ != ADDITIVE_MODE
26	706	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	IllegalArgumentException	$ != MULTIPLICATIVE_MODE
27	721	8	ResizableDoubleArray.java	setInitialCapacity	initialCapacity	int	1	DEF	$ > 0
28	744	8	ResizableDoubleArray.java	setNumElements	i	int	0	IllegalArgumentException	$ < 0
29	752	8	ResizableDoubleArray.java	setNumElements	THIS	ResizableDoubleArray	0	DEF	($.startIndex + i) > $.internalArray.$.length
29	752	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	(startIndex + $) > internalArray.length
30	767	8	ResizableDoubleArray.java	shouldContract	THIS	ResizableDoubleArray	1	RET	$.expansionMode == MULTIPLICATIVE_MODE
31	843	8	ResizableDoubleArray.java	equals	THIS	ResizableDoubleArray	0	RET	object == $
31	843	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ == this
32	846	7	ResizableDoubleArray.java	equals	object	Object	0	RET	$ instanceof ResizableDoubleArray == false
33	859	15	ResizableDoubleArray.java	equals	result	boolean	1	RET	$
1244	97	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1244	97	8	RiddersSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1245	98	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1245	98	8	RiddersSolver.java	solve	max	double	0	RET	f.value($) == 0.0
1246	99	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
1246	99	8	RiddersSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
1247	103	8	RiddersSolver.java	solve	THIS	RiddersSolver	1	RET	$.isBracketing(min, initial, f)
1247	103	8	RiddersSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
1247	103	8	RiddersSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
1247	103	8	RiddersSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
1248	137	8	RiddersSolver.java	solve	y1	double	0	RET	$ == 0.0
1249	138	8	RiddersSolver.java	solve	y2	double	0	RET	$ == 0.0
46434	143	8	RiddersSolver.java	solve	THIS	RiddersSolver	0	NIL-WHILE	i <= $.maximalIterationCount
46434	143	8	RiddersSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1250	147	12	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	Math.abs(y3) <= $.functionValueAccuracy
1250	147	12	RiddersSolver.java	solve	y3	double	0	RET	Math.abs($) <= functionValueAccuracy
1251	159	12	RiddersSolver.java	solve	x	double	0	RET	Math.abs($ - oldx) <= tolerance
1251	159	12	RiddersSolver.java	solve	oldx	double	0	RET	Math.abs(x - $) <= tolerance
1251	159	12	RiddersSolver.java	solve	tolerance	double	0	RET	Math.abs(x - oldx) <= $
1252	163	12	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
1252	163	12	RiddersSolver.java	solve	y	double	0	RET	Math.abs($) <= functionValueAccuracy
1253	170	12	RiddersSolver.java	solve	correction	double	1	DEF	$ > 0.0
1254	171	16	RiddersSolver.java	solve	y1	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
1254	171	16	RiddersSolver.java	solve	y	double	1	DEF	MathUtils.sign(y1) + MathUtils.sign($) == 0.0
1255	178	16	RiddersSolver.java	solve	y2	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
1255	178	16	RiddersSolver.java	solve	y	double	1	DEF	MathUtils.sign(y2) + MathUtils.sign($) == 0.0
46486	85	8	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	NIL-WHILE	i <= $.maximalIterationCount
46486	85	8	RombergIntegrator.java	integrate	i	int	0	NIL-WHILE	$ <= maximalIterationCount
46487	87	12	RombergIntegrator.java	integrate	i	int	0	NIL-FOR	j <= $
46487	87	12	RombergIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= i
1380	93	12	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	RET	i >= $.minimalIterationCount
1380	93	12	RombergIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
1381	97	16	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	RET	delta <= $.absoluteAccuracy
1381	97	16	RombergIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
1381	97	16	RombergIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
1381	97	16	RombergIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
1382	112	8	RombergIntegrator.java	verifyIterationCount	THIS	RombergIntegrator	0	DEF	$.maximalIterationCount > 32
148	128	4	Rotation.java	Rotation	needsNormalization	boolean	0	DEF	$
149	158	4	Rotation.java	Rotation	norm	double	0	DEF	$ == 0
150	207	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[2].length != 3
150	207	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[1].length != 3
150	207	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m.$.length != 3
150	207	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[0].length != 3
150	207	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[2].length != 3
150	207	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[1].length != 3
150	207	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$.length != 3
150	207	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[0].length != 3
151	224	4	Rotation.java	Rotation	det	double	0	NotARotationMatrixException	$ < 0.0
152	244	4	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
153	253	6	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
154	262	8	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
155	308	2	Rotation.java	Rotation	u1u1	double	0	IllegalArgumentException	$ == 0
155	308	2	Rotation.java	Rotation	u2u2	double	0	IllegalArgumentException	$ == 0
155	308	2	Rotation.java	Rotation	v1v1	double	0	IllegalArgumentException	$ == 0
155	308	2	Rotation.java	Rotation	v2v2	double	0	IllegalArgumentException	$ == 0
156	357	2	Rotation.java	Rotation	c	double	0	RET	$ == 0
157	379	4	Rotation.java	Rotation	c	double	0	RET	$ == 0
158	389	6	Rotation.java	Rotation	c	double	0	RET	$ == 0
159	439	4	Rotation.java	Rotation	normProduct	double	0	IllegalArgumentException	$ == 0
160	445	4	Rotation.java	Rotation	normProduct	double	1	DEF	dot < ((2.0e-15 - 1.0) * $)
160	445	4	Rotation.java	Rotation	dot	double	1	DEF	$ < ((2.0e-15 - 1.0) * normProduct)
161	540	4	Rotation.java	getAxis	squaredSine	double	1	RET	$ == 0
162	542	11	Rotation.java	getAxis	THIS	Rotation	0	RET	$.q0 < 0
163	554	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 > 0.1
163	554	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 < -0.1
164	556	11	Rotation.java	getAngle	THIS	Rotation	0	RET	$.q0 < 0
165	600	4	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
166	609	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
166	609	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
167	618	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
168	627	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
168	627	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
169	636	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
170	645	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
170	645	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
171	654	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
172	663	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
172	663	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
173	672	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
174	681	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
174	681	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
175	690	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
176	699	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
176	699	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
177	708	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
178	717	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
178	717	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
179	726	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
180	735	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
180	735	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
181	744	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
182	753	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
182	753	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
183	762	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
184	771	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
184	771	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
185	780	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
186	789	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
186	789	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
187	807	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
187	807	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
45470	966	4	Rotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
188	1007	6	Rotation.java	orthogonalizeMatrix	fn	double	0	RET	Math.abs(fn1 - $) <= threshold
188	1007	6	Rotation.java	orthogonalizeMatrix	fn1	double	0	RET	Math.abs($ - fn) <= threshold
188	1007	6	Rotation.java	orthogonalizeMatrix	threshold	double	0	RET	Math.abs(fn1 - fn) <= $
1188	93	4	RungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1188	93	4	RungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
46405	97	4	RungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
46405	97	4	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
1189	104	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
1189	104	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.requiresDenseOutput()
46406	123	4	RungeKuttaIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
46407	127	6	RungeKuttaIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
46408	133	8	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
46408	133	8	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
46409	135	10	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
46409	135	10	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
46409	135	10	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
46410	137	12	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
46410	137	12	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
46411	148	8	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
46411	148	8	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
46411	148	8	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
46412	150	10	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
46412	150	10	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
1190	158	8	RungeKuttaIntegrator.java	integrate	interpolator	AbstractStepInterpolator	1	DEF	manager.evaluateStep($)
1190	158	8	RungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolator)
1191	179	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	DEF	manager.reset($.stepStart, y)
1191	179	6	RungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1191	179	6	RungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1191	179	6	RungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1071	79	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	1	DEF	interpolator.$.currentState != null
1071	79	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
46272	83	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < interpolator.$.yDotK.$.length
46272	83	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.yDotK.length
46272	83	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.length
46273	136	4	RungeKuttaStepInterpolator.java	writeExternal	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.$.length
46273	136	4	RungeKuttaStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < yDotK.length
46274	137	6	RungeKuttaStepInterpolator.java	writeExternal	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
46274	137	6	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < currentState.length
46275	156	4	RungeKuttaStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
46275	156	4	RungeKuttaStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
46276	158	6	RungeKuttaStepInterpolator.java	readExternal	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
46276	158	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < currentState.length
1272	132	8	SecantSolver.java	solve	y0	double	0	IllegalArgumentException	$ * y1 >= 0
1272	132	8	SecantSolver.java	solve	y1	double	0	IllegalArgumentException	y0 * $ >= 0
46438	143	8	SecantSolver.java	solve	THIS	SecantSolver	0	NIL-WHILE	i < $.maximalIterationCount
46438	143	8	SecantSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1273	144	12	SecantSolver.java	solve	y1	double	0	DEF	Math.abs(y2) < Math.abs($)
1273	144	12	SecantSolver.java	solve	y2	double	0	DEF	Math.abs($) < Math.abs(y1)
1274	152	12	SecantSolver.java	solve	THIS	SecantSolver	0	RET	Math.abs(y1) <= $.functionValueAccuracy
1274	152	12	SecantSolver.java	solve	y1	double	0	RET	Math.abs($) <= functionValueAccuracy
1275	156	12	SecantSolver.java	solve	THIS	SecantSolver	0	RET	Math.abs(oldDelta) < Math.max($.relativeAccuracy * Math.abs(x1), $.absoluteAccuracy)
1275	156	12	SecantSolver.java	solve	x1	double	0	RET	Math.abs(oldDelta) < Math.max(relativeAccuracy * Math.abs($), absoluteAccuracy)
1275	156	12	SecantSolver.java	solve	oldDelta	double	0	RET	Math.abs($) < Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy)
1276	162	12	SecantSolver.java	solve	y0	double	1	DEF	Math.abs(y1) > Math.abs($)
1276	162	12	SecantSolver.java	solve	y1	double	1	DEF	Math.abs($) > Math.abs(y0)
1277	167	16	SecantSolver.java	solve	delta	double	0	DEF	$ / oldDelta > 1
1277	167	16	SecantSolver.java	solve	oldDelta	double	0	DEF	delta / $ > 1
1278	177	12	SecantSolver.java	solve	y1	double	0	DEF	($ > 0) == (y2 > 0)
1278	177	12	SecantSolver.java	solve	y2	double	0	DEF	(y1 > 0) == ($ > 0)
799	76	8	SecondMoment.java	increment	THIS	SecondMoment	0	DEF	$.n < 1
1003	69	12	SimpleEstimationProblem.java	getUnboundParameters	THIS	SimpleEstimationProblem	0	DEF	$.p.isBound()
934	121	8	SimpleRegression.java	addData	THIS	SimpleRegression	1	DEF	$.n == 0
935	137	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.n > 2
936	157	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 0
937	169	12	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 2
46141	192	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
46141	192	8	SimpleRegression.java	addData	i	int	0	NIL-FOR	$ < data.length
46141	192	8	SimpleRegression.java	addData	data	double[][]	0	NIL-FOR	i < $.length
46142	212	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	$.n > 0
46142	212	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
46142	212	8	SimpleRegression.java	removeData	i	int	0	NIL-FOR	$ < data.length
46142	212	8	SimpleRegression.java	removeData	data	double[][]	0	NIL-FOR	i < $.length
938	297	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	$.n < 2
939	300	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	Math.abs($.sumXX) < 10 * Double.MIN_VALUE
940	350	8	SimpleRegression.java	getTotalSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
941	364	8	SimpleRegression.java	getXSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
942	410	8	SimpleRegression.java	getMeanSquareError	THIS	SimpleRegression	0	RET	$.n < 3
943	433	8	SimpleRegression.java	getR	b1	double	0	DEF	$ < 0
944	548	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	IllegalArgumentException	$ >= 1
944	548	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	IllegalArgumentException	$ <= 0
945	614	8	SimpleRegression.java	setDistribution	THIS	SimpleRegression	0	DEF	$.n > 2
1367	80	8	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	$.minimalIterationCount == 1
46480	88	8	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	NIL-WHILE	i <= $.maximalIterationCount
46480	88	8	SimpsonIntegrator.java	integrate	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1368	91	12	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	i >= $.minimalIterationCount
1368	91	12	SimpsonIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
1369	95	16	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	delta <= $.absoluteAccuracy
1369	95	16	SimpsonIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
1369	95	16	SimpsonIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
1369	95	16	SimpsonIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
1370	111	8	SimpsonIntegrator.java	verifyIterationCount	THIS	SimpsonIntegrator	0	DEF	$.maximalIterationCount > 64
45938	113	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.mainBidiagonal.$.length
45938	113	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < mainBidiagonal.length
45939	125	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.singularValues.$.length
45939	125	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < singularValues.length
598	135	8	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedU == null
599	137	12	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	1	DEF	$.m >= $.n
45940	143	16	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n - 1
45940	143	16	SingularValueDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < n - 1
45941	149	20	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.n
45941	149	20	SingularValueDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < n
45942	156	16	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.n
45942	156	16	SingularValueDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < n
45943	159	16	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
45943	159	16	SingularValueDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < m
600	180	8	SingularValueDecompositionImpl.java	getUT	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedUt == null
601	193	8	SingularValueDecompositionImpl.java	getS	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedS == null
602	212	8	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedV == null
603	214	12	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	1	DEF	$.m >= $.n
45944	223	16	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m - 1
45944	223	16	SingularValueDecompositionImpl.java	getV	i	int	0	NIL-FOR	$ < m - 1
45945	229	20	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.m
45945	229	20	SingularValueDecompositionImpl.java	getV	j	int	0	NIL-FOR	$ < m
45946	236	16	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.m
45946	236	16	SingularValueDecompositionImpl.java	getV	j	int	0	NIL-FOR	$ < m
45947	239	16	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n
45947	239	16	SingularValueDecompositionImpl.java	getV	i	int	0	NIL-FOR	$ < n
604	257	8	SingularValueDecompositionImpl.java	getVT	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedVt == null
45948	284	8	SingularValueDecompositionImpl.java	getRank	i	int	0	NIL-FOR	$ >= 0
605	285	11	SingularValueDecompositionImpl.java	getRank	THIS	SingularValueDecompositionImpl	0	RET	$.singularValues[i] > threshold
605	285	11	SingularValueDecompositionImpl.java	getRank	i	int	0	RET	singularValues[$] > threshold
605	285	11	SingularValueDecompositionImpl.java	getRank	threshold	double	0	RET	singularValues[i] > $
792	87	8	Skewness.java	increment	THIS	Skewness	0	DEF	$.incMoment
793	101	8	Skewness.java	getResult	THIS	Skewness	0	RET	$.moment.$.n < 3
794	105	8	Skewness.java	getResult	variance	double	1	RET	$ < 10E-20
795	125	8	Skewness.java	clear	THIS	Skewness	0	DEF	$.incMoment
796	152	8	Skewness.java	evaluate	THIS	Skewness	0	DEF	$.test(values, begin, length)
796	152	8	Skewness.java	evaluate	values	double[]	0	DEF	test($, begin, length)
796	152	8	Skewness.java	evaluate	begin	int	0	DEF	test(values, $, length)
796	152	8	Skewness.java	evaluate	length	int	0	DEF	test(values, begin, $)
796	152	8	Skewness.java	evaluate	length	int	0	DEF	$ > 2
46089	162	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
46089	162	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
46089	162	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
46090	170	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
46090	170	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
46090	170	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
45922	106	8	SparseRealMatrix.java	add	iterator	Iterator	0	NIL-FOR	$.hasNext()
45923	140	8	SparseRealMatrix.java	subtract	iterator	Iterator	0	NIL-FOR	$.hasNext()
587	171	8	SparseRealMatrix.java	setEntry	value	double	1	DEF	$ == 0.0
588	186	8	SparseRealMatrix.java	addToEntry	value	double	1	DEF	$ == 0.0
589	201	8	SparseRealMatrix.java	multiplyEntry	value	double	1	DEF	$ == 0.0
45853	135	8	SparseRealVector.java	SparseRealVector	THIS	SparseRealVector	0	NIL-FOR	i < values.$.length
45853	135	8	SparseRealVector.java	SparseRealVector	i	int	0	NIL-FOR	$ < values.length
45853	135	8	SparseRealVector.java	SparseRealVector	values	Double[]	0	NIL-FOR	i < $.length
45854	151	8	SparseRealVector.java	SparseRealVector	THIS	SparseRealVector	0	NIL-FOR	i < values.$.length
45854	151	8	SparseRealVector.java	SparseRealVector	i	int	0	NIL-FOR	$ < values.length
45854	151	8	SparseRealVector.java	SparseRealVector	values	Double[]	0	NIL-FOR	i < $.length
45855	183	8	SparseRealVector.java	fromDoubleArray	THIS	SparseRealVector	0	NIL-FOR	key < values.$.length
45855	183	8	SparseRealVector.java	fromDoubleArray	key	int	0	NIL-FOR	$ < values.length
45855	183	8	SparseRealVector.java	fromDoubleArray	values	double[]	0	NIL-FOR	key < $.length
554	185	12	SparseRealVector.java	fromDoubleArray	THIS	SparseRealVector	0	DEF	$.isZero(value)
554	185	12	SparseRealVector.java	fromDoubleArray	value	double	0	DEF	isZero($)
555	228	8	SparseRealVector.java	add	v	RealVector	0	RET	$ instanceof SparseRealVector
45856	244	8	SparseRealVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
556	247	12	SparseRealVector.java	add	THIS	SparseRealVector	1	DEF	$.entries.containsKey(key)
556	247	12	SparseRealVector.java	add	key	int	1	DEF	entries.containsKey($)
45857	260	8	SparseRealVector.java	add	THIS	SparseRealVector	0	NIL-FOR	i < v.$.length
45857	260	8	SparseRealVector.java	add	i	int	0	NIL-FOR	$ < v.length
45857	260	8	SparseRealVector.java	add	v	double[]	0	NIL-FOR	i < $.length
45858	274	8	SparseRealVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
557	283	8	SparseRealVector.java	append	v	RealVector	0	RET	$ instanceof SparseRealVector
45859	299	8	SparseRealVector.java	append	THIS	SparseRealVector	0	NIL-FOR	i < a.$.length
45859	299	8	SparseRealVector.java	append	i	int	0	NIL-FOR	$ < a.length
45859	299	8	SparseRealVector.java	append	a	double[]	0	NIL-FOR	i < $.length
45860	315	8	SparseRealVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
45861	327	8	SparseRealVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
558	330	12	SparseRealVector.java	dotProduct	THIS	SparseRealVector	0	DEF	idx < v.$.length
558	330	12	SparseRealVector.java	dotProduct	idx	int	0	DEF	$ < v.length
558	330	12	SparseRealVector.java	dotProduct	v	double[]	0	DEF	idx < $.length
45862	342	8	SparseRealVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
45863	354	8	SparseRealVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
45864	366	8	SparseRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
45865	378	8	SparseRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
45866	392	8	SparseRealVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
559	395	12	SparseRealVector.java	getSubVector	key	int	0	DEF	$ >= index
559	395	12	SparseRealVector.java	getSubVector	key	int	0	DEF	$ < end
559	395	12	SparseRealVector.java	getSubVector	end	int	0	DEF	key < $
559	395	12	SparseRealVector.java	getSubVector	index	int	0	DEF	key >= $
45867	406	8	SparseRealVector.java	getData	iter	Iterator	0	NIL-WHILE	$.hasNext()
45868	427	8	SparseRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
45869	435	8	SparseRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
560	438	12	SparseRealVector.java	getDistance	THIS	SparseRealVector	0	DEF	$.entries.containsKey(key)
560	438	12	SparseRealVector.java	getDistance	key	int	0	DEF	entries.containsKey($)
561	448	8	SparseRealVector.java	getDistance	v	RealVector	0	RET	$ instanceof SparseRealVector
45870	458	8	SparseRealVector.java	getDistance	THIS	SparseRealVector	0	NIL-FOR	i < v.$.length
45870	458	8	SparseRealVector.java	getDistance	i	int	0	NIL-FOR	$ < v.length
45870	458	8	SparseRealVector.java	getDistance	v	double[]	0	NIL-FOR	i < $.length
45871	475	8	SparseRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
45872	481	8	SparseRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
562	484	12	SparseRealVector.java	getL1Distance	THIS	SparseRealVector	0	DEF	$.entries.containsKey(key)
562	484	12	SparseRealVector.java	getL1Distance	key	int	0	DEF	entries.containsKey($)
563	495	8	SparseRealVector.java	getL1Distance	v	RealVector	0	RET	$ instanceof SparseRealVector
45873	505	8	SparseRealVector.java	getL1Distance	THIS	SparseRealVector	0	NIL-FOR	i < v.$.length
45873	505	8	SparseRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < v.length
45873	505	8	SparseRealVector.java	getL1Distance	v	double[]	0	NIL-FOR	i < $.length
45874	516	8	SparseRealVector.java	getL1Norm	iter	Iterator	0	NIL-WHILE	$.hasNext()
45875	531	8	SparseRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
564	534	12	SparseRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
564	534	12	SparseRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
45876	538	8	SparseRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
565	541	12	SparseRealVector.java	getLInfDistance	THIS	SparseRealVector	0	DEF	$.entries.containsKey(key)
565	541	12	SparseRealVector.java	getLInfDistance	key	int	0	DEF	entries.containsKey($)
566	542	16	SparseRealVector.java	getLInfDistance	max	double	0	DEF	iter.value() > $
566	542	16	SparseRealVector.java	getLInfDistance	iter	Iterator	0	DEF	$.value() > max
567	552	8	SparseRealVector.java	getLInfDistance	v	RealVector	0	RET	$ instanceof SparseRealVector
45877	562	8	SparseRealVector.java	getLInfDistance	THIS	SparseRealVector	0	NIL-FOR	i < v.$.length
45877	562	8	SparseRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < v.length
45877	562	8	SparseRealVector.java	getLInfDistance	v	double[]	0	NIL-FOR	i < $.length
568	564	12	SparseRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
568	564	12	SparseRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
45878	574	8	SparseRealVector.java	getLInfNorm	iter	Iterator	0	NIL-WHILE	$.hasNext()
45879	585	8	SparseRealVector.java	getNorm	iter	Iterator	0	NIL-WHILE	$.hasNext()
45880	595	8	SparseRealVector.java	isInfinite	iter	Iterator	0	NIL-WHILE	$.hasNext()
569	597	12	SparseRealVector.java	isInfinite	iter	Iterator	0	RET	Double.isInfinite($.value())
45881	606	8	SparseRealVector.java	isNaN	iter	Iterator	0	NIL-WHILE	$.hasNext()
570	608	12	SparseRealVector.java	isNaN	iter	Iterator	0	RET	Double.isNaN($.value())
45882	622	8	SparseRealVector.java	mapAbsToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
45883	636	8	SparseRealVector.java	mapAcosToSelf	THIS	SparseRealVector	0	NIL-FOR	i < $.virtualSize
45883	636	8	SparseRealVector.java	mapAcosToSelf	i	int	0	NIL-FOR	$ < virtualSize
45884	649	8	SparseRealVector.java	mapAddToSelf	THIS	SparseRealVector	0	NIL-FOR	i < $.virtualSize
45884	649	8	SparseRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
45885	663	8	SparseRealVector.java	mapAsinToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
45886	678	8	SparseRealVector.java	mapAtanToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
45887	693	8	SparseRealVector.java	mapCbrtToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
45888	708	8	SparseRealVector.java	mapCeilToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
45889	722	8	SparseRealVector.java	mapCosToSelf	THIS	SparseRealVector	0	NIL-FOR	i < $.virtualSize
45889	722	8	SparseRealVector.java	mapCosToSelf	i	int	0	NIL-FOR	$ < virtualSize
45890	735	8	SparseRealVector.java	mapCoshToSelf	THIS	SparseRealVector	0	NIL-FOR	i < $.virtualSize
45890	735	8	SparseRealVector.java	mapCoshToSelf	i	int	0	NIL-FOR	$ < virtualSize
45891	749	8	SparseRealVector.java	mapDivideToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
45892	763	8	SparseRealVector.java	mapExpToSelf	THIS	SparseRealVector	0	NIL-FOR	i < $.virtualSize
45892	763	8	SparseRealVector.java	mapExpToSelf	i	int	0	NIL-FOR	$ < virtualSize
45893	777	8	SparseRealVector.java	mapExpm1ToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
45894	792	8	SparseRealVector.java	mapFloorToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
45895	806	8	SparseRealVector.java	mapInvToSelf	THIS	SparseRealVector	0	NIL-FOR	i < $.virtualSize
45895	806	8	SparseRealVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < virtualSize
45896	824	8	SparseRealVector.java	mapLog10ToSelf	THIS	SparseRealVector	0	NIL-FOR	i < $.virtualSize
45896	824	8	SparseRealVector.java	mapLog10ToSelf	i	int	0	NIL-FOR	$ < virtualSize
45897	838	8	SparseRealVector.java	mapLog1pToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
45898	847	8	SparseRealVector.java	mapLogToSelf	THIS	SparseRealVector	0	NIL-FOR	i < $.virtualSize
45898	847	8	SparseRealVector.java	mapLogToSelf	i	int	0	NIL-FOR	$ < virtualSize
45899	861	8	SparseRealVector.java	mapMultiplyToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
45900	875	8	SparseRealVector.java	mapPowToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
45901	890	8	SparseRealVector.java	mapRintToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
45902	905	8	SparseRealVector.java	mapSignumToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
45903	920	8	SparseRealVector.java	mapSinToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
45904	936	8	SparseRealVector.java	mapSinhToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
45905	951	8	SparseRealVector.java	mapSqrtToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
45906	976	8	SparseRealVector.java	mapTanToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
45907	991	8	SparseRealVector.java	mapTanhToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
45908	1006	8	SparseRealVector.java	mapUlpToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
45909	1023	8	SparseRealVector.java	outerproduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
45910	1026	12	SparseRealVector.java	outerproduct	iter2	Iterator	0	NIL-WHILE	$.hasNext()
571	1038	8	SparseRealVector.java	outerProduct	v	RealVector	0	RET	$ instanceof SparseRealVector
45911	1043	8	SparseRealVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
45912	1046	12	SparseRealVector.java	outerProduct	THIS	SparseRealVector	0	NIL-FOR	col < $.virtualSize
45912	1046	12	SparseRealVector.java	outerProduct	col	int	0	NIL-FOR	$ < virtualSize
45913	1058	8	SparseRealVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
45914	1062	12	SparseRealVector.java	outerProduct	THIS	SparseRealVector	0	NIL-FOR	col < $.virtualSize
45914	1062	12	SparseRealVector.java	outerProduct	col	int	0	NIL-FOR	$ < virtualSize
572	1084	8	SparseRealVector.java	setEntry	THIS	SparseRealVector	1	DEF	$.isZero(value)
572	1084	8	SparseRealVector.java	setEntry	value	double	1	DEF	isZero($)
573	1086	15	SparseRealVector.java	setEntry	THIS	SparseRealVector	0	DEF	$.entries.containsKey(index)
573	1086	15	SparseRealVector.java	setEntry	index	int	0	DEF	entries.containsKey($)
45915	1102	8	SparseRealVector.java	setSubVector	THIS	SparseRealVector	0	NIL-FOR	i < v.$.length
45915	1102	8	SparseRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.length
45915	1102	8	SparseRealVector.java	setSubVector	v	double[]	0	NIL-FOR	i < $.length
45916	1109	8	SparseRealVector.java	set	THIS	SparseRealVector	0	NIL-FOR	i < $.virtualSize
45916	1109	8	SparseRealVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
45917	1124	8	SparseRealVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
574	1127	12	SparseRealVector.java	subtract	THIS	SparseRealVector	1	DEF	$.entries.containsKey(key)
574	1127	12	SparseRealVector.java	subtract	key	int	1	DEF	entries.containsKey($)
575	1139	8	SparseRealVector.java	subtract	v	RealVector	0	RET	$ instanceof SparseRealVector
45918	1149	8	SparseRealVector.java	subtract	THIS	SparseRealVector	0	NIL-FOR	i < v.$.length
45918	1149	8	SparseRealVector.java	subtract	i	int	0	NIL-FOR	$ < v.length
45918	1149	8	SparseRealVector.java	subtract	v	double[]	0	NIL-FOR	i < $.length
576	1150	12	SparseRealVector.java	subtract	THIS	SparseRealVector	1	DEF	$.entries.containsKey(i)
576	1150	12	SparseRealVector.java	subtract	i	int	1	DEF	entries.containsKey($)
577	1170	8	SparseRealVector.java	unitize	THIS	SparseRealVector	0	DEF	$.isZero(norm)
577	1170	8	SparseRealVector.java	unitize	norm	double	0	DEF	isZero($)
45919	1176	8	SparseRealVector.java	unitize	iter	Iterator	0	NIL-WHILE	$.hasNext()
578	1192	8	SparseRealVector.java	checkIndex	THIS	SparseRealVector	0	MatrixIndexException	index >= $.getDimension()
578	1192	8	SparseRealVector.java	checkIndex	index	int	0	MatrixIndexException	$ < 0
578	1192	8	SparseRealVector.java	checkIndex	index	int	0	MatrixIndexException	$ >= getDimension()
579	1208	8	SparseRealVector.java	checkVectorDimensions	THIS	SparseRealVector	0	DEF	$.getDimension() != n
579	1208	8	SparseRealVector.java	checkVectorDimensions	n	int	0	DEF	getDimension() != $
580	1235	8	SparseRealVector.java	equals	THIS	SparseRealVector	0	RET	$ == obj
580	1235	8	SparseRealVector.java	equals	obj	Object	0	RET	this == $
581	1237	8	SparseRealVector.java	equals	obj	Object	0	RET	$ == null
582	1239	8	SparseRealVector.java	equals	obj	Object	0	RET	$ instanceof SparseRealVector
583	1242	8	SparseRealVector.java	equals	THIS	SparseRealVector	0	RET	$.virtualSize != other.$.virtualSize
583	1242	8	SparseRealVector.java	equals	other	SparseRealVector	0	RET	virtualSize != $.virtualSize
584	1244	8	SparseRealVector.java	equals	THIS	SparseRealVector	0	RET	Double.doubleToLongBits($.epsilon) != Double .doubleToLongBits(other.$.epsilon)
584	1244	8	SparseRealVector.java	equals	other	SparseRealVector	0	RET	Double.doubleToLongBits(epsilon) != Double .doubleToLongBits($.epsilon)
45920	1248	8	SparseRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
585	1251	12	SparseRealVector.java	equals	THIS	SparseRealVector	0	RET	Math.abs(test) > $.epsilon
585	1251	12	SparseRealVector.java	equals	test	double	0	RET	Math.abs($) > epsilon
45921	1255	8	SparseRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
586	1258	12	SparseRealVector.java	equals	THIS	SparseRealVector	0	RET	$.isZero(test)
586	1258	12	SparseRealVector.java	equals	test	double	0	RET	isZero($)
1234	59	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	IllegalArgumentException	x.$.length != y.$.length
1234	59	8	SplineInterpolator.java	interpolate	x	double	0	IllegalArgumentException	$.length != y.length
1234	59	8	SplineInterpolator.java	interpolate	y	double	0	IllegalArgumentException	x.length != $.length
1235	63	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	IllegalArgumentException	x.$.length < 3
1235	63	8	SplineInterpolator.java	interpolate	x	double	0	IllegalArgumentException	$.length < 3
46424	71	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
46424	71	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
1236	72	12	SplineInterpolator.java	interpolate	i	int	0	IllegalArgumentException	x[$] >= x[$ + 1]
1236	72	12	SplineInterpolator.java	interpolate	x	double	0	IllegalArgumentException	$[i] >= $[i + 1]
46425	79	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
46425	79	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
46426	88	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
46426	88	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
46427	103	8	SplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ >=0
46428	111	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
46428	111	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
921	566	8	StatUtils.java	sumDifference	THIS	StatUtils	0	IllegalArgumentException	n != sample2.$.length
921	566	8	StatUtils.java	sumDifference	n	int	0	IllegalArgumentException	$ < 1
921	566	8	StatUtils.java	sumDifference	n	int	0	IllegalArgumentException	$ != sample2.length
921	566	8	StatUtils.java	sumDifference	sample2	double[]	0	IllegalArgumentException	n != $.length
46130	571	8	StatUtils.java	sumDifference	i	int	0	NIL-FOR	$ < n
46130	571	8	StatUtils.java	sumDifference	n	int	0	NIL-FOR	i < $
922	610	8	StatUtils.java	varianceDifference	THIS	StatUtils	0	IllegalArgumentException	n != sample2.$.length
922	610	8	StatUtils.java	varianceDifference	n	int	0	IllegalArgumentException	$ != sample2.length
922	610	8	StatUtils.java	varianceDifference	n	int	0	IllegalArgumentException	$ < 2
922	610	8	StatUtils.java	varianceDifference	sample2	double[]	0	IllegalArgumentException	n != $.length
46131	613	8	StatUtils.java	varianceDifference	i	int	0	NIL-FOR	$ < n
46131	613	8	StatUtils.java	varianceDifference	n	int	0	NIL-FOR	i < $
857	130	8	StatisticalSummaryValues.java	equals	THIS	StatisticalSummaryValues	0	RET	object == $
857	130	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ == this
858	133	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ instanceof StatisticalSummaryValues == false
1068	120	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.lastState == null
1069	129	12	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.forward
46271	137	8	StepNormalizer.java	handleStep	nextInStep	boolean	0	NIL-WHILE	$
1070	155	8	StepNormalizer.java	handleStep	isLast	boolean	0	DEF	$
769	71	8	Sum.java	increment	THIS	Sum	1	DEF	$.n == 0
770	117	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, begin, length)
770	117	8	Sum.java	evaluate	values	double[]	0	DEF	test($, begin, length)
770	117	8	Sum.java	evaluate	begin	int	0	DEF	test(values, $, length)
770	117	8	Sum.java	evaluate	length	int	0	DEF	test(values, begin, $)
46084	119	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
46084	119	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
46084	119	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
771	87	8	SumOfLogs.java	getResult	THIS	SumOfLogs	1	RET	$.n > 0
772	128	8	SumOfLogs.java	evaluate	THIS	SumOfLogs	0	DEF	$.test(values, begin, length)
772	128	8	SumOfLogs.java	evaluate	values	double[]	0	DEF	test($, begin, length)
772	128	8	SumOfLogs.java	evaluate	begin	int	0	DEF	test(values, $, length)
772	128	8	SumOfLogs.java	evaluate	length	int	0	DEF	test(values, begin, $)
46085	130	12	SumOfLogs.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
46085	130	12	SumOfLogs.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
46085	130	12	SumOfLogs.java	evaluate	length	int	0	NIL-FOR	i < begin + $
767	71	8	SumOfSquares.java	increment	THIS	SumOfSquares	1	DEF	$.n == 0
768	117	8	SumOfSquares.java	evaluate	THIS	SumOfSquares	0	DEF	$.test(values, begin, length)
768	117	8	SumOfSquares.java	evaluate	values	double[]	0	DEF	test($, begin, length)
768	117	8	SumOfSquares.java	evaluate	begin	int	0	DEF	test(values, $, length)
768	117	8	SumOfSquares.java	evaluate	length	int	0	DEF	test(values, begin, $)
46083	119	12	SumOfSquares.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
46083	119	12	SumOfSquares.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
46083	119	12	SumOfSquares.java	evaluate	length	int	0	NIL-FOR	i < begin + $
819	154	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.meanImpl instanceof Mean
820	157	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.varianceImpl instanceof Variance
821	160	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.geoMeanImpl instanceof GeometricMean
822	201	8	SummaryStatistics.java	getMean	THIS	SummaryStatistics	1	RET	$.mean == $.meanImpl
823	217	8	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	0	DEF	$.getN() > 0
824	218	12	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	1	DEF	$.getN() > 1
825	235	8	SummaryStatistics.java	getVariance	THIS	SummaryStatistics	1	RET	$.varianceImpl == $.variance
826	323	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
827	326	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
828	339	8	SummaryStatistics.java	equals	THIS	SummaryStatistics	0	RET	object == $
828	339	8	SummaryStatistics.java	equals	object	Object	0	RET	$ == this
829	342	8	SummaryStatistics.java	equals	object	Object	0	RET	$ instanceof SummaryStatistics == false
830	612	8	SummaryStatistics.java	checkEmpty	THIS	SummaryStatistics	0	DEF	$.n > 0
831	645	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getGeoMeanImpl() instanceof GeometricMean
832	656	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.geoMean == source.$.geoMeanImpl
832	656	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.geoMean == $.geoMeanImpl
833	661	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.max == source.$.maxImpl
833	661	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.max == $.maxImpl
834	666	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.mean == source.$.meanImpl
834	666	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.mean == $.meanImpl
835	671	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.min == source.$.minImpl
835	671	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.min == $.minImpl
836	676	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sum == source.$.sumImpl
836	676	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sum == $.sumImpl
837	681	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.variance == source.$.varianceImpl
837	681	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.variance == $.varianceImpl
838	686	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumLog == source.$.sumLogImpl
838	686	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumLog == $.sumLogImpl
839	691	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumsq == source.$.sumsqImpl
839	691	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumsq == $.sumsqImpl
307	54	8	TDistributionImpl.java	setDegreesOfFreedom	degreesOfFreedom	double	0	IllegalArgumentException	$ <= 0.0
308	77	8	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ == 0.0
309	85	12	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ < 0.0
310	111	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
311	114	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
883	78	8	TTestImpl.java	pairedT	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
883	78	8	TTestImpl.java	pairedT	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
883	78	8	TTestImpl.java	pairedT	sample1	double[]	0	IllegalArgumentException	$ == null
883	78	8	TTestImpl.java	pairedT	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
883	78	8	TTestImpl.java	pairedT	sample2	double[]	0	IllegalArgumentException	$ == null
884	163	8	TTestImpl.java	pairedTTest	alpha	double	0	IllegalArgumentException	$ > 0.5
884	163	8	TTestImpl.java	pairedTTest	alpha	double	0	IllegalArgumentException	$ <= 0
885	186	8	TTestImpl.java	t	THIS	TTestImpl	0	IllegalArgumentException	observed.$.length < 2
885	186	8	TTestImpl.java	t	observed	double[]	0	IllegalArgumentException	$.length < 2
885	186	8	TTestImpl.java	t	observed	double[]	0	IllegalArgumentException	$ == null
886	211	8	TTestImpl.java	t	sampleStats	StatisticalSummary	0	IllegalArgumentException	$ == null
886	211	8	TTestImpl.java	t	sampleStats	StatisticalSummary	0	IllegalArgumentException	$.getN() < 2
887	253	8	TTestImpl.java	homoscedasticT	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
887	253	8	TTestImpl.java	homoscedasticT	sample1	double[]	0	IllegalArgumentException	$ == null
887	253	8	TTestImpl.java	homoscedasticT	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
887	253	8	TTestImpl.java	homoscedasticT	sample2	double[]	0	IllegalArgumentException	$ == null
887	253	8	TTestImpl.java	homoscedasticT	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
888	292	8	TTestImpl.java	t	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
888	292	8	TTestImpl.java	t	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
888	292	8	TTestImpl.java	t	sample1	double[]	0	IllegalArgumentException	$ == null
888	292	8	TTestImpl.java	t	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
888	292	8	TTestImpl.java	t	sample2	double[]	0	IllegalArgumentException	$ == null
889	335	8	TTestImpl.java	t	sampleStats1	StatisticalSummary	0	IllegalArgumentException	Math.min($.getN(), sampleStats2.getN()) < 2
889	335	8	TTestImpl.java	t	sampleStats1	StatisticalSummary	0	IllegalArgumentException	$ == null
889	335	8	TTestImpl.java	t	sampleStats2	StatisticalSummary	0	IllegalArgumentException	$ == null
889	335	8	TTestImpl.java	t	sampleStats2	StatisticalSummary	0	IllegalArgumentException	Math.min(sampleStats1.getN(), $.getN()) < 2
890	383	8	TTestImpl.java	homoscedasticT	sampleStats1	StatisticalSummary	0	IllegalArgumentException	$ == null
890	383	8	TTestImpl.java	homoscedasticT	sampleStats1	StatisticalSummary	0	IllegalArgumentException	Math.min($.getN(), sampleStats2.getN()) < 2
890	383	8	TTestImpl.java	homoscedasticT	sampleStats2	StatisticalSummary	0	IllegalArgumentException	Math.min(sampleStats1.getN(), $.getN()) < 2
890	383	8	TTestImpl.java	homoscedasticT	sampleStats2	StatisticalSummary	0	IllegalArgumentException	$ == null
891	421	8	TTestImpl.java	tTest	THIS	TTestImpl	0	IllegalArgumentException	sample.$.length < 2
891	421	8	TTestImpl.java	tTest	sample	double[]	0	IllegalArgumentException	$ == null
891	421	8	TTestImpl.java	tTest	sample	double[]	0	IllegalArgumentException	$.length < 2
892	465	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ <= 0
892	465	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ > 0.5
893	501	8	TTestImpl.java	tTest	sampleStats	StatisticalSummary	0	IllegalArgumentException	$.getN() < 2
893	501	8	TTestImpl.java	tTest	sampleStats	StatisticalSummary	0	IllegalArgumentException	$ == null
894	547	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ <= 0
894	547	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ > 0.5
895	591	8	TTestImpl.java	tTest	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
895	591	8	TTestImpl.java	tTest	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
895	591	8	TTestImpl.java	tTest	sample1	double[]	0	IllegalArgumentException	$ == null
895	591	8	TTestImpl.java	tTest	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
895	591	8	TTestImpl.java	tTest	sample2	double[]	0	IllegalArgumentException	$ == null
896	635	8	TTestImpl.java	homoscedasticTTest	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
896	635	8	TTestImpl.java	homoscedasticTTest	sample1	double[]	0	IllegalArgumentException	$ == null
896	635	8	TTestImpl.java	homoscedasticTTest	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
896	635	8	TTestImpl.java	homoscedasticTTest	sample2	double[]	0	IllegalArgumentException	$ == null
896	635	8	TTestImpl.java	homoscedasticTTest	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
897	700	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ <= 0
897	700	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ > 0.5
898	760	8	TTestImpl.java	homoscedasticTTest	alpha	double	0	IllegalArgumentException	$ > 0.5
898	760	8	TTestImpl.java	homoscedasticTTest	alpha	double	0	IllegalArgumentException	$ <= 0
899	802	8	TTestImpl.java	tTest	sampleStats1	StatisticalSummary	0	IllegalArgumentException	$ == null
899	802	8	TTestImpl.java	tTest	sampleStats1	StatisticalSummary	0	IllegalArgumentException	Math.min($.getN(), sampleStats2.getN()) < 2
899	802	8	TTestImpl.java	tTest	sampleStats2	StatisticalSummary	0	IllegalArgumentException	Math.min(sampleStats1.getN(), $.getN()) < 2
899	802	8	TTestImpl.java	tTest	sampleStats2	StatisticalSummary	0	IllegalArgumentException	$ == null
900	847	8	TTestImpl.java	homoscedasticTTest	sampleStats1	StatisticalSummary	0	IllegalArgumentException	$ == null
900	847	8	TTestImpl.java	homoscedasticTTest	sampleStats1	StatisticalSummary	0	IllegalArgumentException	Math.min($.getN(), sampleStats2.getN()) < 2
900	847	8	TTestImpl.java	homoscedasticTTest	sampleStats2	StatisticalSummary	0	IllegalArgumentException	$ == null
900	847	8	TTestImpl.java	homoscedasticTTest	sampleStats2	StatisticalSummary	0	IllegalArgumentException	Math.min(sampleStats1.getN(), $.getN()) < 2
901	913	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ > 0.5
901	913	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ <= 0
808	85	8	ThirdMoment.java	increment	THIS	ThirdMoment	0	DEF	$.n < 1
46397	96	6	ThreeEighthesStepInterpolator.java	computeInterpolatedState	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
46397	96	6	ThreeEighthesStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
6	143	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof String
6	143	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof Number
7	147	12	TransformerMap.java	transform	trans	NumberTransformer	0	DEF	$ != null
1375	86	8	TrapezoidIntegrator.java	stage	n	int	1	RET	$ == 0
46481	93	12	TrapezoidIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
46481	93	12	TrapezoidIntegrator.java	stage	np	long	0	NIL-FOR	i < $
46482	123	8	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	NIL-WHILE	i <= $.maximalIterationCount
46482	123	8	TrapezoidIntegrator.java	integrate	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1376	125	12	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	RET	i >= $.minimalIterationCount
1376	125	12	TrapezoidIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
1377	129	16	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	RET	delta <= $.absoluteAccuracy
1377	129	16	TrapezoidIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
1377	129	16	TrapezoidIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
1377	129	16	TrapezoidIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
1378	144	8	TrapezoidIntegrator.java	verifyIterationCount	THIS	TrapezoidIntegrator	0	DEF	$.maximalIterationCount > 64
590	74	8	TriDiagonalTransformer.java	TriDiagonalTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
591	97	8	TriDiagonalTransformer.java	getQ	THIS	TriDiagonalTransformer	0	DEF	$.cachedQ == null
592	110	8	TriDiagonalTransformer.java	getQT	THIS	TriDiagonalTransformer	0	DEF	$.cachedQt == null
45924	116	12	TriDiagonalTransformer.java	getQT	k	int	0	NIL-FOR	$ >= 1
593	120	16	TriDiagonalTransformer.java	getQT	hK	double[]	0	DEF	$[k] != 0.0
593	120	16	TriDiagonalTransformer.java	getQT	k	int	0	DEF	hK[$] != 0.0
45925	123	20	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
45925	123	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
45926	126	20	TriDiagonalTransformer.java	getQT	j	int	0	NIL-FOR	$ < m
45926	126	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	j < $
45927	128	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
45927	128	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
45928	133	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
45928	133	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
594	154	8	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	$.cachedT == null
45929	158	12	TriDiagonalTransformer.java	getT	i	int	0	NIL-FOR	$ < m
45929	158	12	TriDiagonalTransformer.java	getT	m	int	0	NIL-FOR	i < $
595	160	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ > 0
596	163	16	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	i < $.main.$.length - 1
596	163	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ < main.length - 1
45930	213	8	TriDiagonalTransformer.java	transform	k	int	0	NIL-FOR	$ < m - 1
45930	213	8	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	k < $ - 1
45931	219	12	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
45931	219	12	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
597	225	12	TriDiagonalTransformer.java	transform	a	double	0	DEF	$ != 0.0
45932	236	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
45932	236	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
45933	240	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
45933	240	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
45934	250	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
45934	250	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
45935	256	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
45935	256	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
45936	262	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
45936	262	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
45937	264	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
45937	264	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
992	45	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	THIS	UncorrelatedRandomVectorGenerator	0	IllegalArgumentException	mean.$.length != standardDeviation.$.length
992	45	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	mean	double[]	0	IllegalArgumentException	$.length != standardDeviation.length
992	45	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	standardDeviation	double[]	0	IllegalArgumentException	mean.length != $.length
46172	74	4	UncorrelatedRandomVectorGenerator.java	nextVector	THIS	UncorrelatedRandomVectorGenerator	0	NIL-FOR	i < random.$.length
46172	74	4	UncorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < random.length
46172	74	4	UncorrelatedRandomVectorGenerator.java	nextVector	random	double[]	0	NIL-FOR	i < $.length
1371	68	8	UnivariateRealIntegratorImpl.java	UnivariateRealIntegratorImpl	f	UnivariateRealFunction	0	IllegalArgumentException	$ == null
1372	108	8	UnivariateRealIntegratorImpl.java	getResult	THIS	UnivariateRealIntegratorImpl	1	RET	$.resultComputed
1373	159	8	UnivariateRealIntegratorImpl.java	verifyInterval	lower	double	0	DEF	$ >= upper
1373	159	8	UnivariateRealIntegratorImpl.java	verifyInterval	upper	double	0	DEF	lower >= $
1374	172	8	UnivariateRealIntegratorImpl.java	verifyIterationCount	THIS	UnivariateRealIntegratorImpl	0	DEF	$.minimalIterationCount <= 0
1374	172	8	UnivariateRealIntegratorImpl.java	verifyIterationCount	THIS	UnivariateRealIntegratorImpl	0	DEF	$.maximalIterationCount <= $.minimalIterationCount
1333	62	8	UnivariateRealMinimizerImpl.java	checkResultComputed	THIS	UnivariateRealMinimizerImpl	0	DEF	$.resultComputed
1238	78	8	UnivariateRealSolverImpl.java	UnivariateRealSolverImpl	f	UnivariateRealFunction	0	DEF	$ == null
1239	106	8	UnivariateRealSolverImpl.java	checkResultComputed	THIS	UnivariateRealSolverImpl	0	DEF	$.resultComputed
1240	212	8	UnivariateRealSolverImpl.java	verifyInterval	lower	double	0	DEF	$ >= upper
1240	212	8	UnivariateRealSolverImpl.java	verifyInterval	upper	double	0	DEF	lower >= $
1241	229	8	UnivariateRealSolverImpl.java	verifySequence	THIS	UnivariateRealSolverImpl	0	DEF	$.isSequence(lower, initial, upper)
1241	229	8	UnivariateRealSolverImpl.java	verifySequence	lower	double	0	DEF	isSequence($, initial, upper)
1241	229	8	UnivariateRealSolverImpl.java	verifySequence	initial	double	0	DEF	isSequence(lower, $, upper)
1241	229	8	UnivariateRealSolverImpl.java	verifySequence	upper	double	0	DEF	isSequence(lower, initial, $)
1242	252	8	UnivariateRealSolverImpl.java	verifyBracketing	THIS	UnivariateRealSolverImpl	0	DEF	$.isBracketing(lower, upper, f)
1242	252	8	UnivariateRealSolverImpl.java	verifyBracketing	lower	double	0	DEF	isBracketing($, upper, f)
1242	252	8	UnivariateRealSolverImpl.java	verifyBracketing	upper	double	0	DEF	isBracketing(lower, $, f)
1242	252	8	UnivariateRealSolverImpl.java	verifyBracketing	f	UnivariateRealFunction	0	DEF	isBracketing(lower, upper, $)
1279	172	8	UnivariateRealSolverUtils.java	bracket	function	UnivariateRealFunction	0	IllegalArgumentException	$ == null
1280	175	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	IllegalArgumentException	$ <= 0
1281	179	8	UnivariateRealSolverUtils.java	bracket	initial	double	0	IllegalArgumentException	$ < lowerBound
1281	179	8	UnivariateRealSolverUtils.java	bracket	initial	double	0	IllegalArgumentException	$ > upperBound
1281	179	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	IllegalArgumentException	initial < $
1281	179	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	IllegalArgumentException	$ >= upperBound
1281	179	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	IllegalArgumentException	initial > $
1281	179	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	IllegalArgumentException	lowerBound >= $
46439	190	8	UnivariateRealSolverUtils.java	bracket	a	double	0	NIL-DOWHILE	$ > lowerBound
46439	190	8	UnivariateRealSolverUtils.java	bracket	b	double	0	NIL-DOWHILE	$ < upperBound
46439	190	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	NIL-DOWHILE	$ * fb > 0.0
46439	190	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	NIL-DOWHILE	fa * $ > 0.0
46439	190	8	UnivariateRealSolverUtils.java	bracket	numIterations	int	0	NIL-DOWHILE	$ < maximumIterations
46439	190	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	NIL-DOWHILE	a > $
46439	190	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	NIL-DOWHILE	b < $
46439	190	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	NIL-DOWHILE	numIterations < $
1282	200	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	ConvergenceException	$ * fb >= 0.0
1282	200	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	ConvergenceException	fa * $ >= 0.0
1283	231	8	UnivariateRealSolverUtils.java	setup	f	UnivariateRealFunction	0	IllegalArgumentException	$ == null
1284	235	8	UnivariateRealSolverUtils.java	setup	THIS	UnivariateRealSolverUtils	0	DEF	$.factory == null
46173	131	8	ValueServer.java	fill	THIS	ValueServer	0	NIL-FOR	i < values.$.length
46173	131	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < values.length
46173	131	8	ValueServer.java	fill	values	double[]	0	NIL-FOR	i < $.length
46174	146	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < length
46174	146	8	ValueServer.java	fill	length	int	0	NIL-FOR	i < $
993	243	8	ValueServer.java	resetReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
994	260	8	ValueServer.java	closeReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
995	307	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	DEF	$.empiricalDistribution == null
995	307	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	DEF	$.empiricalDistribution.getBinStats().size() == 0
996	334	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	$.filePointer == null
997	337	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	(str = $.filePointer.readLine()) == null
997	337	8	ValueServer.java	getNextReplay	str	String	0	DEF	($ = filePointer.readLine()) == null
998	341	12	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	(str = $.filePointer.readLine()) == null
998	341	12	ValueServer.java	getNextReplay	str	String	0	DEF	($ = filePointer.readLine()) == null
775	154	8	Variance.java	increment	THIS	Variance	0	DEF	$.incMoment
776	163	12	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 0
777	165	19	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 1
778	168	16	Variance.java	getResult	THIS	Variance	1	RET	$.isBiasCorrected
779	187	8	Variance.java	clear	THIS	Variance	0	DEF	$.incMoment
780	209	8	Variance.java	evaluate	values	double[]	0	IllegalArgumentException	$ == null
781	239	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
781	239	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
781	239	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
781	239	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
782	241	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
783	243	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
784	283	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
784	283	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
784	283	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
784	283	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
785	284	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
786	286	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
46087	290	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
46087	290	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
46087	290	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
787	296	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
189	269	4	Vector3D.java	normalize	s	double	0	DEF	$ == 0
190	294	4	Vector3D.java	orthogonal	threshold	double	0	DEF	$ == 0
191	298	4	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x <= threshold
191	298	4	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x >= -threshold
191	298	4	Vector3D.java	orthogonal	threshold	double	1	RET	x <= $
191	298	4	Vector3D.java	orthogonal	threshold	double	1	RET	x >= -$
192	301	11	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y >= -threshold
192	301	11	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y <= threshold
192	301	11	Vector3D.java	orthogonal	threshold	double	0	RET	y >= -$
192	301	11	Vector3D.java	orthogonal	threshold	double	0	RET	y <= $
193	324	4	Vector3D.java	angle	normProduct	double	0	DEF	$ == 0
194	330	4	Vector3D.java	angle	dot	double	0	RET	$ < -threshold
194	330	4	Vector3D.java	angle	dot	double	0	RET	$ > threshold
194	330	4	Vector3D.java	angle	threshold	double	0	RET	dot < -$
194	330	4	Vector3D.java	angle	threshold	double	0	RET	dot > $
195	333	6	Vector3D.java	angle	dot	double	0	RET	$ >= 0
196	398	4	Vector3D.java	equals	THIS	Vector3D	0	RET	$ == other
196	398	4	Vector3D.java	equals	other	Object	0	RET	this == $
197	402	4	Vector3D.java	equals	other	Object	0	RET	$ == null
198	409	6	Vector3D.java	equals	rhs	Vector3D	0	RET	$.isNaN()
199	430	6	Vector3D.java	hashCode	THIS	Vector3D	0	RET	$.isNaN()
139	239	8	Vector3DFormat.java	format	obj	Object	0	RET	$ instanceof Vector3D
140	257	8	Vector3DFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
141	276	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedPrefix, pos)
141	276	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedPrefix, pos)
141	276	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedPrefix, $)
142	283	8	Vector3DFormat.java	parse	x	Number	0	RET	$ == null
143	292	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSeparator, pos)
143	292	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSeparator, pos)
143	292	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSeparator, $)
144	297	8	Vector3DFormat.java	parse	y	Number	0	RET	$ == null
145	306	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSeparator, pos)
145	306	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSeparator, pos)
145	306	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSeparator, $)
146	311	8	Vector3DFormat.java	parse	z	Number	0	RET	$ == null
147	320	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSuffix, pos)
147	320	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSuffix, pos)
147	320	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSuffix, $)
797	66	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	DimensionMismatchException	v.$.length != $.sums.$.length
797	66	8	VectorialCovariance.java	increment	v	double[]	0	DimensionMismatchException	$.length != sums.length
46091	70	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	NIL-FOR	i < v.$.length
46091	70	8	VectorialCovariance.java	increment	i	int	0	NIL-FOR	$ < v.length
46091	70	8	VectorialCovariance.java	increment	v	double[]	0	NIL-FOR	i < $.length
46092	72	12	VectorialCovariance.java	increment	j	int	0	NIL-FOR	$ <= i
46092	72	12	VectorialCovariance.java	increment	i	int	0	NIL-FOR	j <= $
798	88	8	VectorialCovariance.java	getResult	THIS	VectorialCovariance	0	DEF	$.n > 1
46093	91	12	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	$ < dimension
46093	91	12	VectorialCovariance.java	getResult	dimension	int	0	NIL-FOR	i < $
46094	92	16	VectorialCovariance.java	getResult	j	int	0	NIL-FOR	$ <= i
46094	92	16	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	j <= $
46096	41	8	VectorialMean.java	VectorialMean	i	int	0	NIL-FOR	$ < dimension
46096	41	8	VectorialMean.java	VectorialMean	dimension	int	0	NIL-FOR	i < $
809	52	8	VectorialMean.java	increment	THIS	VectorialMean	0	DimensionMismatchException	v.$.length != $.means.$.length
809	52	8	VectorialMean.java	increment	v	double[]	0	DimensionMismatchException	$.length != means.length
46097	55	8	VectorialMean.java	increment	THIS	VectorialMean	0	NIL-FOR	i < v.$.length
46097	55	8	VectorialMean.java	increment	i	int	0	NIL-FOR	$ < v.length
46097	55	8	VectorialMean.java	increment	v	double[]	0	NIL-FOR	i < $.length
46098	66	8	VectorialMean.java	getResult	THIS	VectorialMean	0	NIL-FOR	i < result.$.length
46098	66	8	VectorialMean.java	getResult	i	int	0	NIL-FOR	$ < result.length
46098	66	8	VectorialMean.java	getResult	result	double[]	0	NIL-FOR	i < $.length
343	60	8	WeibullDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
344	98	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ > 1.0
344	98	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ < 0.0
345	101	15	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
346	103	16	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
347	116	8	WeibullDistributionImpl.java	setShape	alpha	double	0	IllegalArgumentException	$ <= 0.0
348	128	8	WeibullDistributionImpl.java	setScale	beta	double	0	IllegalArgumentException	$ <= 0.0
349	75	8	ZipfDistributionImpl.java	setNumberOfElements	n	int	0	DEF	$ <= 0
350	102	8	ZipfDistributionImpl.java	setExponent	s	double	0	DEF	$ <= 0.0
351	116	8	ZipfDistributionImpl.java	probability	THIS	ZipfDistributionImpl	0	RET	x > $.getNumberOfElements()
351	116	8	ZipfDistributionImpl.java	probability	x	int	0	RET	$ > getNumberOfElements()
351	116	8	ZipfDistributionImpl.java	probability	x	int	0	RET	$ <= 0
352	131	8	ZipfDistributionImpl.java	cumulativeProbability	x	int	1	RET	$ <= 0
353	133	15	ZipfDistributionImpl.java	cumulativeProbability	THIS	ZipfDistributionImpl	0	RET	x >= $.getNumberOfElements()
353	133	15	ZipfDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ >= getNumberOfElements()
45476	177	8	ZipfDistributionImpl.java	generalizedHarmonic	k	int	0	NIL-FOR	$ > 0
