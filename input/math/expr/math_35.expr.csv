id	line	column	filename	methodname	varname	vartype	else	return	right
527	62	8	AVLTree.java	insert	element	T	0	DEF	$ != null
528	63	12	AVLTree.java	insert	THIS	AVLTree	1	DEF	$.top == null
529	82	8	AVLTree.java	delete	element	T	0	RET	$ != null
30086	83	12	AVLTree.java	delete	node	Node	0	NIL-FOR	$ != null
530	86	16	AVLTree.java	delete	THIS	AVLTree	1	RET	node.$.element == element
530	86	16	AVLTree.java	delete	node	Node	1	RET	$.element == element
530	86	16	AVLTree.java	delete	element	T	1	RET	node.element == $
531	89	23	AVLTree.java	delete	THIS	AVLTree	0	RET	node.$.element.compareTo(element) > 0
531	89	23	AVLTree.java	delete	node	Node	0	RET	$.element.compareTo(element) > 0
531	89	23	AVLTree.java	delete	element	T	0	RET	node.element.compareTo($) > 0
30087	153	8	AVLTree.java	getNotSmaller	node	Node	0	NIL-FOR	$ != null
532	154	12	AVLTree.java	getNotSmaller	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) < 0
532	154	12	AVLTree.java	getNotSmaller	node	Node	1	RET	$.element.compareTo(reference) < 0
532	154	12	AVLTree.java	getNotSmaller	reference	T	1	RET	node.element.compareTo($) < 0
533	155	16	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.right == null
533	155	16	AVLTree.java	getNotSmaller	node	Node	0	RET	$.right == null
534	161	16	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.left == null
534	161	16	AVLTree.java	getNotSmaller	node	Node	0	RET	$.left == null
30088	184	8	AVLTree.java	getNotLarger	node	Node	0	NIL-FOR	$ != null
535	185	12	AVLTree.java	getNotLarger	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) > 0
535	185	12	AVLTree.java	getNotLarger	node	Node	1	RET	$.element.compareTo(reference) > 0
535	185	12	AVLTree.java	getNotLarger	reference	T	1	RET	node.element.compareTo($) > 0
536	186	16	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.left == null
536	186	16	AVLTree.java	getNotLarger	node	Node	0	RET	$.left == null
537	192	16	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.right == null
537	192	16	AVLTree.java	getNotLarger	node	Node	0	RET	$.right == null
1269	76	8	AbstractFieldMatrix.java	AbstractFieldMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ <= 0
1270	80	8	AbstractFieldMatrix.java	AbstractFieldMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ <= 0
1271	97	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NullArgumentException	$ == null
1272	100	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1272	100	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$.length == 0
1273	103	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d[0].length == 0
1273	103	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$[0].length == 0
1274	118	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1274	118	8	AbstractFieldMatrix.java	extractField	d	T[]	0	NoDataException	$.length == 0
1275	139	8	AbstractFieldMatrix.java	buildArray	columns	int	0	RET	$ < 0
30475	145	8	AbstractFieldMatrix.java	buildArray	THIS	AbstractFieldMatrix	0	NIL-FOR	i < array.$.length
30475	145	8	AbstractFieldMatrix.java	buildArray	i	int	0	NIL-FOR	$ < array.length
30475	145	8	AbstractFieldMatrix.java	buildArray	array	T[][]	0	NIL-FOR	i < $.length
30476	187	8	AbstractFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
30476	187	8	AbstractFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
30477	188	12	AbstractFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
30477	188	12	AbstractFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
30478	204	8	AbstractFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
30478	204	8	AbstractFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
30479	205	12	AbstractFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
30479	205	12	AbstractFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
30480	219	8	AbstractFieldMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
30480	219	8	AbstractFieldMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
30481	220	12	AbstractFieldMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
30481	220	12	AbstractFieldMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
30482	233	8	AbstractFieldMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
30482	233	8	AbstractFieldMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
30483	234	12	AbstractFieldMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
30483	234	12	AbstractFieldMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
30484	251	8	AbstractFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
30484	251	8	AbstractFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
30485	252	12	AbstractFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
30485	252	12	AbstractFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
30486	254	16	AbstractFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
30486	254	16	AbstractFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1276	271	8	AbstractFieldMatrix.java	power	p	int	0	IllegalArgumentException	$ < 0
1277	275	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NonSquareMatrixException	$.isSquare()
1278	279	8	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 0
1279	283	8	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 1
30487	300	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
30487	300	8	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
30487	300	8	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1280	301	12	AbstractFieldMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1280	301	12	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
30488	312	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
30488	312	8	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
30488	312	8	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
30489	331	8	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	i < data.$.length
30489	331	8	AbstractFieldMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
30489	331	8	AbstractFieldMatrix.java	getData	data	T[][]	0	NIL-FOR	i < $.length
30490	333	12	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	j < dataI.$.length
30490	333	12	AbstractFieldMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
30490	333	12	AbstractFieldMatrix.java	getData	dataI	T[]	0	NIL-FOR	j < $.length
30491	348	8	AbstractFieldMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
30491	348	8	AbstractFieldMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
30492	349	12	AbstractFieldMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
30492	349	12	AbstractFieldMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1281	390	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1281	390	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1281	390	8	AbstractFieldMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1281	390	8	AbstractFieldMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1281	390	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
1281	390	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
1282	429	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1282	429	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < selectedColumns.$.length
1282	429	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1282	429	8	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	MatrixDimensionMismatchException	destination[0].length < $.length
1282	429	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
1282	429	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < selectedColumns.length
30493	438	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	i < selectedRows.$.length
30493	438	8	AbstractFieldMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
30493	438	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
30494	440	12	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	j < selectedColumns.$.length
30494	440	12	AbstractFieldMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
30494	440	12	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1283	449	8	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	NullArgumentException	$ == null
1284	453	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1285	458	8	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
30495	462	8	AbstractFieldMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
30495	462	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1286	463	12	AbstractFieldMatrix.java	setSubMatrix	THIS	AbstractFieldMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1286	463	12	AbstractFieldMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1286	463	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1286	463	12	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[r].length != nCols
30496	473	8	AbstractFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
30496	473	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
30497	474	12	AbstractFieldMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
30497	474	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
30498	485	8	AbstractFieldMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
30498	485	8	AbstractFieldMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1287	497	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1287	497	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
1287	497	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
30499	503	8	AbstractFieldMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
30499	503	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
30500	515	8	AbstractFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
30500	515	8	AbstractFieldMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1288	527	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1288	527	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1288	527	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
30501	533	8	AbstractFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
30501	533	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1289	548	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1289	548	8	AbstractFieldMatrix.java	setRowVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nCols
30502	552	8	AbstractFieldMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
30502	552	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1290	567	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1290	567	8	AbstractFieldMatrix.java	setColumnVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nRows
30503	571	8	AbstractFieldMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
30503	571	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
30504	582	8	AbstractFieldMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
30504	582	8	AbstractFieldMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1291	594	8	AbstractFieldMatrix.java	setRow	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1291	594	8	AbstractFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1291	594	8	AbstractFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
30505	597	8	AbstractFieldMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
30505	597	8	AbstractFieldMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
30506	608	8	AbstractFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
30506	608	8	AbstractFieldMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1292	620	8	AbstractFieldMatrix.java	setColumn	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1292	620	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1292	620	8	AbstractFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
30507	623	8	AbstractFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
30507	623	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1293	671	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1293	671	8	AbstractFieldMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
30508	675	8	AbstractFieldMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
30508	675	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1294	686	8	AbstractFieldMatrix.java	operate	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1294	686	8	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1294	686	8	AbstractFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
30509	691	8	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
30509	691	8	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
30510	693	12	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
30510	693	12	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1295	709	12	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1295	709	12	AbstractFieldMatrix.java	operate	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nCols
30511	714	12	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
30511	714	12	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
30512	716	16	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
30512	716	16	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1296	731	8	AbstractFieldMatrix.java	preMultiply	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1296	731	8	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1296	731	8	AbstractFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
30513	736	8	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
30513	736	8	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
30514	738	12	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
30514	738	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1297	754	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1297	754	12	AbstractFieldMatrix.java	preMultiply	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nRows
30515	759	12	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
30515	759	12	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
30516	761	16	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
30516	761	16	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
30517	776	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
30517	776	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
30518	777	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
30518	777	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
30519	791	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
30519	791	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
30520	792	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
30520	792	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
30521	806	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
30521	806	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
30522	807	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
30522	807	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
30523	823	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
30523	823	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
30524	824	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
30524	824	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
30525	836	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
30525	836	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
30526	837	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
30526	837	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
30527	851	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
30527	851	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
30528	852	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
30528	852	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
30529	866	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
30529	866	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
30530	867	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
30530	867	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
30531	883	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
30531	883	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
30532	884	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
30532	884	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
30533	928	8	AbstractFieldMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
30533	928	8	AbstractFieldMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
1298	929	12	AbstractFieldMatrix.java	toString	i	int	0	DEF	$ > 0
30534	933	12	AbstractFieldMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
30534	933	12	AbstractFieldMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
1299	934	16	AbstractFieldMatrix.java	toString	j	int	0	DEF	$ > 0
1300	956	8	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	object == $
1300	956	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ == this
1301	959	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ instanceof FieldMatrix<?> == false
1302	965	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getRowDimension() != nRows
1302	965	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getColumnDimension() != nCols
1302	965	8	AbstractFieldMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1302	965	8	AbstractFieldMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
30535	968	8	AbstractFieldMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
30535	968	8	AbstractFieldMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
30536	969	12	AbstractFieldMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
30536	969	12	AbstractFieldMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1303	970	16	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	$.getEntry(row, col).equals(m.getEntry(row, col))
1303	970	16	AbstractFieldMatrix.java	equals	col	int	0	RET	getEntry(row, $).equals(m.getEntry(row, $))
1303	970	16	AbstractFieldMatrix.java	equals	row	int	0	RET	getEntry($, col).equals(m.getEntry($, col))
1303	970	16	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	getEntry(row, col).equals($.getEntry(row, col))
30537	990	8	AbstractFieldMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
30537	990	8	AbstractFieldMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
30538	991	12	AbstractFieldMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
30538	991	12	AbstractFieldMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
1304	1005	8	AbstractFieldMatrix.java	checkRowIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1304	1005	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1304	1005	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= getRowDimension()
1305	1018	8	AbstractFieldMatrix.java	checkColumnIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1305	1018	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= getColumnDimension()
1305	1018	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1306	1040	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1306	1040	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1307	1047	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1307	1047	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1308	1064	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1308	1064	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1309	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedColumns.$.length == 0
1309	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedRows.$.length == 0
1309	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1309	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1310	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1310	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1310	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1310	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1311	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1311	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1311	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1311	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1312	1119	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	THIS	AbstractFieldMatrix	0	DimensionMismatchException	$.getColumnDimension() != m.getRowDimension()
1312	1119	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	m	FieldMatrix<T>	0	DimensionMismatchException	getColumnDimension() != $.getRowDimension()
899	120	8	AbstractFormat.java	setDenominatorFormat	format	NumberFormat	0	NullArgumentException	$ == null
900	132	8	AbstractFormat.java	setNumeratorFormat	format	NumberFormat	0	NullArgumentException	$ == null
901	162	9	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
901	162	9	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
30118	164	13	AbstractFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
30118	164	13	AbstractFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
30118	164	13	AbstractFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
902	169	13	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
902	169	13	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
950	56	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	int	0	NumberIsTooLargeException	x1 < $
950	56	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	int	0	NumberIsTooLargeException	$ < x0
951	75	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
951	75	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
952	80	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
953	83	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	1	RET	$ == Integer.MIN_VALUE
954	84	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	THIS	AbstractIntegerDistribution	0	RET	$.checkedCumulativeProbability(lower) >= p
954	84	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	0	RET	checkedCumulativeProbability($) >= p
954	84	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	checkedCumulativeProbability(lower) >= $
955	93	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
956	103	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	0	DEF	$
957	106	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	tmp	double	0	DEF	$ > lower
957	106	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	0	DEF	tmp > $
958	111	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	tmp	double	0	DEF	$ < upper
958	111	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	upper	int	0	DEF	tmp < $
30120	132	8	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	lower	int	0	NIL-WHILE	$ + 1 < upper
30120	132	8	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	upper	int	0	NIL-WHILE	lower + 1 < $
959	134	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	xm	int	0	DEF	$ < lower
959	134	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	xm	int	0	DEF	$ > upper
959	134	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	lower	int	0	DEF	xm < $
959	134	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	upper	int	0	DEF	xm > $
960	144	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	pm	double	1	DEF	$ >= p
960	144	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	p	double	1	DEF	pm >= $
961	176	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
30121	181	8	AbstractIntegerDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
30121	181	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
962	202	8	AbstractIntegerDistribution.java	checkedCumulativeProbability	result	double	0	MathInternalError	Double.isNaN($)
2654	215	8	AbstractIntegrator.java	integrate	THIS	AbstractIntegrator	0	DimensionMismatchException	y0.$.length != equations.getDimension()
2654	215	8	AbstractIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	0	DimensionMismatchException	y0.length != $.getDimension()
2654	215	8	AbstractIntegrator.java	integrate	y0	double[]	0	DimensionMismatchException	$.length != equations.getDimension()
2655	218	8	AbstractIntegrator.java	integrate	THIS	AbstractIntegrator	0	DimensionMismatchException	y.$.length != equations.getDimension()
2655	218	8	AbstractIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	0	DimensionMismatchException	y.length != $.getDimension()
2655	218	8	AbstractIntegrator.java	integrate	y	double[]	0	DimensionMismatchException	$.length != equations.getDimension()
2656	297	12	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.statesInitialized
2657	316	16	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.state.evaluateStep(interpolator)
2657	316	16	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	state.evaluateStep($)
31594	322	12	AbstractIntegrator.java	acceptStep	occuringEvents	SortedSet<EventState>	0	NIL-WHILE	$.isEmpty()
2658	345	16	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	RET	$.isLastStep
2659	354	16	AbstractIntegrator.java	acceptStep	currentEvent	EventState	0	RET	$.reset(eventT, eventY)
2659	354	16	AbstractIntegrator.java	acceptStep	eventT	double	0	RET	currentEvent.reset($, eventY)
2659	354	16	AbstractIntegrator.java	acceptStep	eventY	double[]	0	RET	currentEvent.reset(eventT, $)
2660	372	16	AbstractIntegrator.java	acceptStep	currentEvent	EventState	0	DEF	$.evaluateStep(interpolator)
2660	372	16	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	currentEvent.evaluateStep($)
2661	407	8	AbstractIntegrator.java	sanityChecks	threshold	double	0	NumberIsTooSmallException	dt <= $
2661	407	8	AbstractIntegrator.java	sanityChecks	dt	double	0	NumberIsTooSmallException	$ <= threshold
1647	110	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	$.weightedResidualJacobian.$.length != $.rows
30958	116	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
30958	116	8	AbstractLeastSquaresOptimizer.java	updateJacobian	i	int	0	NIL-FOR	$ < rows
30959	119	12	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
30959	119	12	AbstractLeastSquaresOptimizer.java	updateJacobian	j	int	0	NIL-FOR	$ < cols
1648	135	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	$.objective.$.length != $.rows
30960	143	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
30960	143	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	i	int	0	NIL-FOR	$ < rows
30961	209	8	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.cols
30961	209	8	AbstractLeastSquaresOptimizer.java	getCovariances	i	int	0	NIL-FOR	$ < cols
30962	210	12	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
30962	210	12	AbstractLeastSquaresOptimizer.java	getCovariances	j	int	0	NIL-FOR	$ < cols
30963	212	16	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	k < $.rows
30963	212	16	AbstractLeastSquaresOptimizer.java	getCovariances	k	int	0	NIL-FOR	$ < rows
1649	238	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NumberIsTooSmallException	$.rows <= $.cols
30964	245	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < errors.$.length
30964	245	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
30964	245	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
1581	127	8	AbstractLinearOptimizer.java	incrementIterationsCounter	THIS	AbstractLinearOptimizer	0	MaxCountExceededException	++$.iterations > $.maxIterations
2272	116	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	NullArgumentException	$ == null
2273	119	8	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	data.$.length != nobs * (nvars + 1)
2273	119	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	DimensionMismatchException	$.length != nobs * (nvars + 1)
2273	119	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	DimensionMismatchException	data.length != $ * (nvars + 1)
2273	119	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	DimensionMismatchException	data.length != nobs * ($ + 1)
2274	122	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NumberIsTooSmallException	$ <= nvars
2274	122	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	NumberIsTooSmallException	nobs <= $
31355	129	8	AbstractMultipleLinearRegression.java	newSampleData	i	int	0	NIL-FOR	$ < nobs
31355	129	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NIL-FOR	i < $
2275	131	12	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	$.noIntercept
31356	134	12	AbstractMultipleLinearRegression.java	newSampleData	j	int	0	NIL-FOR	$ < cols
31356	134	12	AbstractMultipleLinearRegression.java	newSampleData	cols	int	0	NIL-FOR	j < $
2276	150	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	NullArgumentException	$ == null
2277	153	8	AbstractMultipleLinearRegression.java	newYSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	y.$.length == 0
2277	153	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	NoDataException	$.length == 0
2278	185	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NullArgumentException	$ == null
2279	188	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	x.$.length == 0
2279	188	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NoDataException	$.length == 0
2280	191	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	1	DEF	$.noIntercept
31357	196	12	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	NIL-FOR	i < x.$.length
31357	196	12	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	NIL-FOR	$ < x.length
31357	196	12	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NIL-FOR	i < $.length
2281	197	16	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x[i].length != nVars
2281	197	16	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	DimensionMismatchException	x[$].length != nVars
2281	197	16	AbstractMultipleLinearRegression.java	newXSampleData	nVars	int	0	DimensionMismatchException	x[i].length != $
2281	197	16	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	DimensionMismatchException	$[i].length != nVars
2282	226	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	NullArgumentException	$ == null
2282	226	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	NullArgumentException	$ == null
2283	229	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x.$.length != y.$.length
2283	229	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DimensionMismatchException	$.length != y.length
2283	229	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	DimensionMismatchException	x.length != $.length
2284	232	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	x.$.length == 0
2284	232	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	NoDataException	$.length == 0
2285	235	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	MathIllegalArgumentException	x[0].length + 1 > x.$.length
2285	235	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	MathIllegalArgumentException	$[0].length + 1 > $.length
2286	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x.$.length != covariance.$.length
2286	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	x	double[][]	0	DimensionMismatchException	$.length != covariance.length
2286	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DimensionMismatchException	x.length != $.length
2287	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	NonSquareMatrixException	covariance.$.length != covariance[0].length
2287	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	NonSquareMatrixException	covariance.$.length > 0
2287	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	NonSquareMatrixException	$.length != $[0].length
2287	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	NonSquareMatrixException	$.length > 0
31358	293	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	i	int	0	NIL-FOR	$ < length
31358	293	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	length	int	0	NIL-FOR	i < $
2701	62	12	AbstractParameterizable.java	isSupported	THIS	AbstractParameterizable	0	RET	$.supportedName.equals(name)
2701	62	12	AbstractParameterizable.java	isSupported	name	String	0	RET	supportedName.equals($)
2702	76	8	AbstractParameterizable.java	complainIfNotSupported	THIS	AbstractParameterizable	0	MathIllegalArgumentException	$.isSupported(name)
2702	76	8	AbstractParameterizable.java	complainIfNotSupported	name	String	0	MathIllegalArgumentException	isSupported($)
31385	108	8	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	NIL-WHILE	bytesOut < bytes.$.length
31385	108	8	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	NIL-WHILE	$ < bytes.length
31385	108	8	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	bytesOut < $.length
31386	110	10	AbstractRandomGenerator.java	nextBytes	i	int	0	NIL-FOR	$ < 3
2357	111	14	AbstractRandomGenerator.java	nextBytes	i	int	0	DEF	$ > 0
2358	115	14	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	RET	bytesOut == bytes.$.length
2358	115	14	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	RET	$ == bytes.length
2358	115	14	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	RET	bytesOut == $.length
2359	157	8	AbstractRandomGenerator.java	nextInt	n	int	0	NotStrictlyPositiveException	$ <= 0
2360	253	8	AbstractRandomGenerator.java	nextGaussian	THIS	AbstractRandomGenerator	0	RET	Double.isNaN($.cachedNormalDeviate)
31387	261	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	NIL-WHILE	$ >=1
2361	266	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	DEF	$ != 0
1072	62	8	AbstractRealDistribution.java	cumulativeProbability	x0	double	0	NumberIsTooLargeException	$ > x1
1072	62	8	AbstractRealDistribution.java	cumulativeProbability	x1	double	0	NumberIsTooLargeException	x0 > $
1073	107	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1073	107	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
1074	112	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
1075	117	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
1076	127	8	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	DEF	$ == Double.NEGATIVE_INFINITY
1077	128	12	AbstractRealDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	1	DEF	$
30136	132	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	NIL-WHILE	$.cumulativeProbability(lowerBound) >= p
30136	132	16	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	NIL-WHILE	cumulativeProbability($) >= p
30136	132	16	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumulativeProbability(lowerBound) >= $
1078	138	8	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	DEF	$ == Double.POSITIVE_INFINITY
1079	139	12	AbstractRealDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	1	DEF	$
30137	143	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	NIL-WHILE	$.cumulativeProbability(upperBound) < p
30137	143	16	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	NIL-WHILE	cumulativeProbability($) < p
30137	143	16	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumulativeProbability(upperBound) < $
1080	161	8	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	$.isSupportConnected()
1081	164	12	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	x - dx >= $.getSupportLowerBound()
1081	164	12	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	RET	x - $ >= getSupportLowerBound()
1081	164	12	AbstractRealDistribution.java	inverseCumulativeProbability	x	double	0	RET	$ - dx >= getSupportLowerBound()
1082	166	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	$.cumulativeProbability(x - dx) == px
1082	166	16	AbstractRealDistribution.java	inverseCumulativeProbability	px	double	0	RET	cumulativeProbability(x - dx) == $
1082	166	16	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	RET	cumulativeProbability(x - $) == px
1082	166	16	AbstractRealDistribution.java	inverseCumulativeProbability	x	double	0	RET	cumulativeProbability($ - dx) == px
30138	168	20	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	NIL-WHILE	upperBound - lowerBound > $
30138	168	20	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	NIL-WHILE	upperBound - $ > dx
30138	168	20	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	NIL-WHILE	$ - lowerBound > dx
1083	170	24	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	1	DEF	$.cumulativeProbability(midPoint) < px
1083	170	24	AbstractRealDistribution.java	inverseCumulativeProbability	midPoint	double	1	DEF	cumulativeProbability($) < px
1083	170	24	AbstractRealDistribution.java	inverseCumulativeProbability	px	double	1	DEF	cumulativeProbability(midPoint) < $
1084	218	8	AbstractRealDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
30139	223	8	AbstractRealDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
30139	223	8	AbstractRealDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1172	54	8	AbstractRealMatrix.java	AbstractRealMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ < 1
1173	57	8	AbstractRealMatrix.java	AbstractRealMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ < 1
30316	76	8	AbstractRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
30316	76	8	AbstractRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
30317	77	12	AbstractRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
30317	77	12	AbstractRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
30318	93	8	AbstractRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
30318	93	8	AbstractRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
30319	94	12	AbstractRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
30319	94	12	AbstractRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
30320	107	8	AbstractRealMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
30320	107	8	AbstractRealMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
30321	108	12	AbstractRealMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
30321	108	12	AbstractRealMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
30322	121	8	AbstractRealMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
30322	121	8	AbstractRealMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
30323	122	12	AbstractRealMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
30323	122	12	AbstractRealMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
30324	139	8	AbstractRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
30324	139	8	AbstractRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
30325	140	12	AbstractRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
30325	140	12	AbstractRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
30326	142	16	AbstractRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
30326	142	16	AbstractRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1174	159	8	AbstractRealMatrix.java	power	p	int	0	IllegalArgumentException	$ < 0
1175	163	8	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NonSquareMatrixException	$.isSquare()
1176	167	8	AbstractRealMatrix.java	power	p	int	0	RET	$ == 0
1177	171	8	AbstractRealMatrix.java	power	p	int	0	RET	$ == 1
30327	188	8	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
30327	188	8	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
30327	188	8	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1178	189	12	AbstractRealMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1178	189	12	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
1179	194	16	AbstractRealMatrix.java	power	maxI	int	0	DEF	$ == -1
30328	203	8	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ <= maxI
30328	203	8	AbstractRealMatrix.java	power	maxI	int	0	NIL-FOR	i <= $
30329	220	8	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	i < data.$.length
30329	220	8	AbstractRealMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
30329	220	8	AbstractRealMatrix.java	getData	data	double[][]	0	NIL-FOR	i < $.length
30330	222	12	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	j < dataI.$.length
30330	222	12	AbstractRealMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
30330	222	12	AbstractRealMatrix.java	getData	dataI	double[]	0	NIL-FOR	j < $.length
30331	301	8	AbstractRealMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
30331	301	8	AbstractRealMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
30332	302	12	AbstractRealMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
30332	302	12	AbstractRealMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1180	339	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1180	339	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1180	339	8	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1180	339	8	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1180	339	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
1180	339	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
1181	375	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1181	375	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < selectedColumns.$.length
1181	375	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1181	375	8	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	MatrixDimensionMismatchException	destination[0].length < $.length
1181	375	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
1181	375	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < selectedColumns.length
30333	382	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	i < selectedRows.$.length
30333	382	8	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
30333	382	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
30334	384	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	j < selectedColumns.$.length
30334	384	12	AbstractRealMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
30334	384	12	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1182	395	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1183	400	8	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
30335	404	8	AbstractRealMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
30335	404	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1184	405	12	AbstractRealMatrix.java	setSubMatrix	THIS	AbstractRealMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1184	405	12	AbstractRealMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1184	405	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1184	405	12	AbstractRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[r].length != nCols
30336	415	8	AbstractRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
30336	415	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
30337	416	12	AbstractRealMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
30337	416	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
30338	427	8	AbstractRealMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
30338	427	8	AbstractRealMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1185	438	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1185	438	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1185	438	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
30339	444	8	AbstractRealMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
30339	444	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
30340	454	8	AbstractRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
30340	454	8	AbstractRealMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1186	465	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1186	465	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
1186	465	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
30341	471	8	AbstractRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
30341	471	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1187	485	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1187	485	8	AbstractRealMatrix.java	setRowVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nCols
30342	489	8	AbstractRealMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
30342	489	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1188	503	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1188	503	8	AbstractRealMatrix.java	setColumnVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nRows
30343	507	8	AbstractRealMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
30343	507	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
30344	517	8	AbstractRealMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
30344	517	8	AbstractRealMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1189	528	8	AbstractRealMatrix.java	setRow	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1189	528	8	AbstractRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1189	528	8	AbstractRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
30345	531	8	AbstractRealMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
30345	531	8	AbstractRealMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
30346	541	8	AbstractRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
30346	541	8	AbstractRealMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1190	552	8	AbstractRealMatrix.java	setColumn	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1190	552	8	AbstractRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1190	552	8	AbstractRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
30347	555	8	AbstractRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
30347	555	8	AbstractRealMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1191	623	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1191	623	8	AbstractRealMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
30348	627	8	AbstractRealMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
30348	627	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1192	637	8	AbstractRealMatrix.java	operate	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1192	637	8	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1192	637	8	AbstractRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
30349	642	8	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
30349	642	8	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
30350	644	12	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
30350	644	12	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1193	661	12	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1193	661	12	AbstractRealMatrix.java	operate	v	RealVector	0	DimensionMismatchException	$.getDimension() != nCols
30351	666	12	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
30351	666	12	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
30352	668	16	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
30352	668	16	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1194	683	8	AbstractRealMatrix.java	preMultiply	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1194	683	8	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1194	683	8	AbstractRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
30353	688	8	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
30353	688	8	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
30354	690	12	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
30354	690	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1195	707	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1195	707	12	AbstractRealMatrix.java	preMultiply	v	RealVector	0	DimensionMismatchException	$.getDimension() != nRows
30355	712	12	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
30355	712	12	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
30356	714	16	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
30356	714	16	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
30357	729	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
30357	729	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
30358	730	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
30358	730	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
30359	744	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
30359	744	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
30360	745	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
30360	745	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
30361	759	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
30361	759	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
30362	760	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
30362	760	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
30363	776	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
30363	776	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
30364	777	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
30364	777	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
30365	789	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
30365	789	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
30366	790	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
30366	790	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
30367	804	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
30367	804	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
30368	805	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
30368	805	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
30369	819	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
30369	819	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
30370	820	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
30370	820	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
30371	836	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
30371	836	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
30372	837	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
30372	837	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
30373	881	8	AbstractRealMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
30373	881	8	AbstractRealMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
1196	882	12	AbstractRealMatrix.java	toString	i	int	0	DEF	$ > 0
30374	886	12	AbstractRealMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
30374	886	12	AbstractRealMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
1197	887	16	AbstractRealMatrix.java	toString	j	int	0	DEF	$ > 0
1198	909	8	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	object == $
1198	909	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ == this
1199	912	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ instanceof RealMatrix == false
1200	918	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getColumnDimension() != nCols
1200	918	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getRowDimension() != nRows
1200	918	8	AbstractRealMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1200	918	8	AbstractRealMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
30375	921	8	AbstractRealMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
30375	921	8	AbstractRealMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
30376	922	12	AbstractRealMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
30376	922	12	AbstractRealMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1201	923	16	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	$.getEntry(row, col) != m.getEntry(row, col)
1201	923	16	AbstractRealMatrix.java	equals	col	int	0	RET	getEntry(row, $) != m.getEntry(row, $)
1201	923	16	AbstractRealMatrix.java	equals	row	int	0	RET	getEntry($, col) != m.getEntry($, col)
1201	923	16	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	getEntry(row, col) != $.getEntry(row, col)
30377	943	8	AbstractRealMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
30377	943	8	AbstractRealMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
30378	944	12	AbstractRealMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
30378	944	12	AbstractRealMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
565	90	8	AbstractRegion.java	AbstractRegion	boundary	Collection<SubHyperplane<S>>	1	DEF	$.size() == 0
566	141	8	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	1	DEF	hyperplanes.$.length == 0
566	141	8	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$ == null
566	141	8	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$.length == 0
567	152	16	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	0	DEF	node.insertCut($.hyperplane)
567	152	16	AbstractRegion.java	AbstractRegion	node	BSPTree<S>	0	DEF	$.insertCut(hyperplane)
30095	179	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	NIL-WHILE	$.hasNext()
30095	179	8	AbstractRegion.java	insertCuts	inserted	Hyperplane<S>	0	NIL-WHILE	$ == null
568	181	12	AbstractRegion.java	insertCuts	inserted	Hyperplane<S>	0	DEF	node.insertCut($.copySelf())
568	181	12	AbstractRegion.java	insertCuts	node	BSPTree<S>	0	DEF	$.insertCut(inserted.copySelf())
569	186	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	RET	$.hasNext()
30096	193	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	NIL-WHILE	$.hasNext()
570	235	8	AbstractRegion.java	isEmpty	node	BSPTree<S>	0	RET	$.getCut() == null
571	264	8	AbstractRegion.java	checkPoint	cell	BSPTree<S>	0	RET	$.getCut() == null
572	278	8	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getAttribute() == null
572	278	8	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getCut() != null
572	278	8	AbstractRegion.java	getTree	includeBoundaryAttributes	boolean	0	DEF	$
573	289	8	AbstractRegion.java	recurseBuildBoundary	node	BSPTree<S>	0	DEF	$.getCut() != null
574	299	12	AbstractRegion.java	recurseBuildBoundary	plusChar	Characterization<S>	0	DEF	$.hasOut()
575	306	16	AbstractRegion.java	recurseBuildBoundary	minusChar	Characterization<S>	0	DEF	$.hasIn()
576	311	12	AbstractRegion.java	recurseBuildBoundary	plusChar	Characterization<S>	0	DEF	$.hasIn()
577	318	16	AbstractRegion.java	recurseBuildBoundary	minusChar	Characterization<S>	0	DEF	$.hasOut()
578	345	8	AbstractRegion.java	characterize	node	BSPTree<S>	1	DEF	$.getCut() == null
579	379	8	AbstractRegion.java	getSize	THIS	AbstractRegion	0	DEF	$.barycenter == null
580	394	8	AbstractRegion.java	getBarycenter	THIS	AbstractRegion	0	DEF	$.barycenter == null
581	438	8	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	RET	$.getCut() == null
582	439	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getAttribute()
583	451	12	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
583	451	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
583	451	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
584	452	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
584	452	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
585	456	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
585	456	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
586	460	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
586	460	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
587	466	12	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
587	466	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
587	466	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
588	467	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
588	467	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
589	471	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
589	471	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
590	475	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
590	475	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
591	487	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
591	487	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
592	493	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().getHyperplane().sameOrientationAs(sub.getHyperplane())
592	493	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().getHyperplane().sameOrientationAs($.getHyperplane())
593	494	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
593	494	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getPlus().getAttribute()
594	497	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
594	497	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getMinus().getAttribute()
595	501	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
595	501	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getPlus().getAttribute()
596	504	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
596	504	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getMinus().getAttribute()
597	569	8	AbstractRegion.java	recurseIntersection	node	BSPTree<S>	0	RET	$.getCut() == null
598	583	12	AbstractRegion.java	recurseIntersection	plus	SubHyperplane<S>	1	RET	$ == null
599	585	19	AbstractRegion.java	recurseIntersection	minus	SubHyperplane<S>	1	RET	$ == null
600	619	8	AbstractRegion.java	recurseTransform	node	BSPTree<S>	0	RET	$.getCut() == null
601	626	8	AbstractRegion.java	recurseTransform	attribute	BoundaryAttribute<S>	0	DEF	$ != null
1660	97	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	NullArgumentException	$ == null
1661	100	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	ZeroException	steps.$.length == 0
1661	100	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$.length == 0
30979	108	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
30979	108	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < dimension
30980	110	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i + 1
30980	110	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $ + 1
1662	111	16	AbstractSimplex.java	AbstractSimplex	j	int	0	ZeroException	steps[$] == 0
1662	111	16	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$[j] == 0
1663	132	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NotStrictlyPositiveException	referenceSimplex.$.length <= 0
1663	132	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NotStrictlyPositiveException	$.length <= 0
30981	144	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < referenceSimplex.$.length
30981	144	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < referenceSimplex.length
30981	144	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NIL-FOR	i < $.length
1664	148	12	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	DimensionMismatchException	refI.$.length != $.dimension
1664	148	12	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DimensionMismatchException	$.length != dimension
30982	151	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i
30982	151	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $
30983	154	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
30983	154	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
1665	155	20	AbstractSimplex.java	AbstractSimplex	k	int	0	DEF	refI[$] != refJ[$]
1665	155	20	AbstractSimplex.java	AbstractSimplex	refJ	double[]	0	DEF	refI[k] != $[k]
1665	155	20	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DEF	$[k] != refJ[k]
1666	160	16	AbstractSimplex.java	AbstractSimplex	allEquals	boolean	0	MathIllegalArgumentException	$
1667	167	12	AbstractSimplex.java	AbstractSimplex	i	int	0	DEF	$ > 0
30984	169	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
30984	169	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
1668	216	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	DimensionMismatchException	$.dimension != startPoint.$.length
1668	216	8	AbstractSimplex.java	build	startPoint	double[]	0	DimensionMismatchException	dimension != $.length
30985	225	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
30985	225	8	AbstractSimplex.java	build	i	int	0	NIL-FOR	$ < dimension
30986	228	12	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
30986	228	12	AbstractSimplex.java	build	k	int	0	NIL-FOR	$ < dimension
30987	246	8	AbstractSimplex.java	evaluate	THIS	AbstractSimplex	0	NIL-FOR	i < $.simplex.$.length
30987	246	8	AbstractSimplex.java	evaluate	i	int	0	NIL-FOR	$ < simplex.length
1669	249	12	AbstractSimplex.java	evaluate	vertex	PointValuePair	0	DEF	Double.isNaN($.getValue())
30988	267	8	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
30988	267	8	AbstractSimplex.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < dimension
1670	268	12	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	DEF	comparator.compare($.simplex[i], pointValuePair) > 0
1670	268	12	AbstractSimplex.java	replaceWorstPoint	i	int	0	DEF	comparator.compare(simplex[$], pointValuePair) > 0
1670	268	12	AbstractSimplex.java	replaceWorstPoint	pointValuePair	PointValuePair	0	DEF	comparator.compare(simplex[i], $) > 0
1670	268	12	AbstractSimplex.java	replaceWorstPoint	comparator	Comparator<PointValuePair>	0	DEF	$.compare(simplex[i], pointValuePair) > 0
1671	295	8	AbstractSimplex.java	getPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
1671	295	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ < 0
1671	295	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ >= simplex.length
1672	310	8	AbstractSimplex.java	setPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
1672	310	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ < 0
1672	310	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ >= simplex.length
1673	324	8	AbstractSimplex.java	setPoints	THIS	AbstractSimplex	0	DimensionMismatchException	points.$.length != $.simplex.$.length
1673	324	8	AbstractSimplex.java	setPoints	points	PointValuePair[]	0	DimensionMismatchException	$.length != simplex.length
30989	340	8	AbstractSimplex.java	createHypercubeSteps	i	int	0	NIL-FOR	$ < n
30989	340	8	AbstractSimplex.java	createHypercubeSteps	n	int	0	NIL-FOR	i < $
2518	180	4	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	1	DEF	interpolator.$.currentState == null
2518	180	4	AbstractStepInterpolator.java	AbstractStepInterpolator	interpolator	AbstractStepInterpolator	1	DEF	$.currentState == null
31460	193	6	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.interpolatedSecondaryState.$.length
31460	193	6	AbstractStepInterpolator.java	AbstractStepInterpolator	i	int	0	NIL-FOR	$ < interpolatedSecondaryState.length
2519	212	6	AbstractStepInterpolator.java	allocateInterpolatedArrays	dimension	int	1	DEF	$ < 0
2520	224	10	AbstractStepInterpolator.java	allocateInterpolatedArrays	THIS	AbstractStepInterpolator	1	DEF	$.secondaryMappers == null
31461	230	14	AbstractStepInterpolator.java	allocateInterpolatedArrays	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.secondaryMappers.$.length
31461	230	14	AbstractStepInterpolator.java	allocateInterpolatedArrays	i	int	0	NIL-FOR	$ < secondaryMappers.length
2521	402	6	AbstractStepInterpolator.java	evaluateCompleteInterpolatedState	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
2522	482	4	AbstractStepInterpolator.java	finalizeStep	THIS	AbstractStepInterpolator	0	DEF	$.finalized
2523	512	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	1	DEF	$.currentState == null
2524	529	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	DEF	$.currentState != null
31462	530	8	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
31462	530	8	AbstractStepInterpolator.java	writeBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
31463	568	4	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.secondaryMappers.$.length
31463	568	4	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < secondaryMappers.length
2525	573	4	AbstractStepInterpolator.java	readBaseExternal	dimension	int	1	DEF	$ < 0
31464	577	8	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
31464	577	8	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
1938	59	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	NullArgumentException	$ == null
1939	88	8	AbstractStorelessUnivariateStatistic.java	evaluate	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
1939	88	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1939	88	8	AbstractStorelessUnivariateStatistic.java	evaluate	begin	int	0	DEF	test(values, $, length)
1939	88	8	AbstractStorelessUnivariateStatistic.java	evaluate	length	int	0	DEF	test(values, begin, $)
1940	127	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	NullArgumentException	$ == null
1941	146	8	AbstractStorelessUnivariateStatistic.java	incrementAll	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
1941	146	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	test($, begin, length)
1941	146	8	AbstractStorelessUnivariateStatistic.java	incrementAll	begin	int	0	DEF	test(values, $, length)
1941	146	8	AbstractStorelessUnivariateStatistic.java	incrementAll	length	int	0	DEF	test(values, begin, $)
31197	148	12	AbstractStorelessUnivariateStatistic.java	incrementAll	i	int	0	NIL-FOR	$ < k
31197	148	12	AbstractStorelessUnivariateStatistic.java	incrementAll	k	int	0	NIL-FOR	i < $
1942	163	8	AbstractStorelessUnivariateStatistic.java	equals	THIS	AbstractStorelessUnivariateStatistic	0	RET	object == $
1942	163	8	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ == this
1943	166	7	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ instanceof AbstractStorelessUnivariateStatistic == false
627	126	8	AbstractSubHyperplane.java	recurseTransform	node	BSPTree<T>	0	RET	$.getCut() == null
628	133	8	AbstractSubHyperplane.java	recurseTransform	attribute	BoundaryAttribute<T>	0	DEF	$ != null
2063	163	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NullArgumentException	$ == null
2064	167	8	AbstractUnivariateStatistic.java	test	begin	int	0	NotPositiveException	$ < 0
2065	171	8	AbstractUnivariateStatistic.java	test	length	int	0	NotPositiveException	$ < 0
2066	175	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	NumberIsTooLargeException	begin + length > values.$.length
2066	175	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NumberIsTooLargeException	begin + length > $.length
2066	175	8	AbstractUnivariateStatistic.java	test	begin	int	0	NumberIsTooLargeException	$ + length > values.length
2066	175	8	AbstractUnivariateStatistic.java	test	length	int	0	NumberIsTooLargeException	begin + $ > values.length
2067	180	8	AbstractUnivariateStatistic.java	test	length	int	0	RET	$ == 0
2067	180	8	AbstractUnivariateStatistic.java	test	allowEmpty	boolean	0	RET	$
2068	258	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	NullArgumentException	$ == null
2069	262	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	DimensionMismatchException	weights.$.length != values.$.length
2069	262	8	AbstractUnivariateStatistic.java	test	values	double[]	0	DimensionMismatchException	weights.length != $.length
2069	262	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	DimensionMismatchException	$.length != values.length
31228	267	8	AbstractUnivariateStatistic.java	test	i	int	0	NIL-FOR	$ < begin + length
31228	267	8	AbstractUnivariateStatistic.java	test	begin	int	0	NIL-FOR	i < $ + length
31228	267	8	AbstractUnivariateStatistic.java	test	length	int	0	NIL-FOR	i < begin + $
2070	268	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isNaN(weights[$])
2070	268	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isNaN($[i])
2071	271	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isInfinite(weights[$])
2071	271	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
2072	274	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	weights[$] < 0
2072	274	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	$[i] < 0
2073	277	12	AbstractUnivariateStatistic.java	test	i	int	0	DEF	weights[$] > 0.0
2073	277	12	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	DEF	$
2073	277	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	$[i] > 0.0
2074	282	8	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	MathIllegalArgumentException	$
31376	111	8	AbstractWell.java	AbstractWell	j	int	0	NIL-FOR	$ < r
31376	111	8	AbstractWell.java	AbstractWell	r	int	0	NIL-FOR	j < $
2349	154	8	AbstractWell.java	setSeed	seed	int[]	0	RET	$ == null
2350	161	8	AbstractWell.java	setSeed	THIS	AbstractWell	0	DEF	seed.$.length < $.v.$.length
2350	161	8	AbstractWell.java	setSeed	seed	int[]	0	DEF	$.length < v.length
31377	162	12	AbstractWell.java	setSeed	THIS	AbstractWell	0	NIL-FOR	i < $.v.$.length
31377	162	12	AbstractWell.java	setSeed	i	int	0	NIL-FOR	$ < v.length
31520	223	8	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-DOWHILE	$.isLastStep
31521	226	12	AdamsBashforthIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
31522	232	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	i < $.mainSetDimension
31522	232	16	AdamsBashforthIntegrator.java	integrate	i	int	0	NIL-FOR	$ < mainSetDimension
2602	242	16	AdamsBashforthIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
31523	262	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	j < y0.$.length
31523	262	12	AdamsBashforthIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
31523	262	12	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2603	276	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.isLastStep
2604	281	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.resetOccurred
2605	297	16	AdamsBashforthIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
31516	240	8	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-DOWHILE	$.isLastStep
31517	243	12	AdamsMoultonIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
31518	256	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
31518	256	16	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
31518	256	16	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2598	265	16	AdamsMoultonIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
31519	279	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
31519	279	12	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
31519	279	12	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2599	294	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.isLastStep
2600	299	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.resetOccurred
2601	316	16	AdamsMoultonIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
31581	167	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ > 0
31582	179	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ < nSteps
31582	179	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	nSteps	int	0	NIL-FOR	i < $
2652	193	12	AdamsNordsieckTransformer.java	getInstance	t	AdamsNordsieckTransformer	0	DEF	$ == null
31583	227	8	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < pData.$.length
31583	227	8	AdamsNordsieckTransformer.java	buildP	i	int	0	NIL-FOR	$ < pData.length
31583	227	8	AdamsNordsieckTransformer.java	buildP	pData	BigFraction[][]	0	NIL-FOR	i < $.length
31584	232	12	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < pI.$.length
31584	232	12	AdamsNordsieckTransformer.java	buildP	j	int	0	NIL-FOR	$ < pI.length
31584	232	12	AdamsNordsieckTransformer.java	buildP	pI	BigFraction[]	0	NIL-FOR	j < $.length
31585	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < y.$.length
31585	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	i	int	0	NIL-FOR	$ < y.length
31585	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	y	double[][]	0	NIL-FOR	i < $.length
31586	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < aI.$.length
31586	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < aI.length
31586	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	aI	double[]	0	NIL-FOR	j < $.length
31587	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < yI.$.length
31587	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < yI.length
31587	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	yI	double[]	0	NIL-FOR	j < $.length
31588	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < data.$.length
31588	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	i	int	0	NIL-FOR	$ < data.length
31588	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	data	double[][]	0	NIL-FOR	i < $.length
31589	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < dataI.$.length
31589	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	j	int	0	NIL-FOR	$ < dataI.length
31589	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	dataI	double[]	0	NIL-FOR	j < $.length
2637	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize < $.minStep
2637	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize > $.maxStep
2637	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ < minStep
2637	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ > maxStep
2638	225	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecAbsoluteTolerance != null
2638	225	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecAbsoluteTolerance.$.length != $.mainSetDimension
2639	229	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecRelativeTolerance.$.length != $.mainSetDimension
2639	229	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecRelativeTolerance != null
2640	250	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	RET	$.initialStep > 0
31569	260	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
31569	260	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
31569	260	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
2641	269	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
31570	274	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
31570	274	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
31570	274	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
31571	281	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
31571	281	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
31571	281	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
2642	295	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < $.getMinStep()
2642	295	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ < getMinStep()
2643	298	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h > $.getMaxStep()
2643	298	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ > getMaxStep()
2644	301	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
2645	322	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	NumberIsTooSmallException	FastMath.abs(h) < $.minStep
2645	322	6	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	NumberIsTooSmallException	FastMath.abs($) < minStep
2646	323	10	AdaptiveStepsizeIntegrator.java	filterStep	acceptSmall	boolean	1	DEF	$
2647	331	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	1	DEF	filteredH > $.maxStep
2647	331	6	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	1	DEF	$ > maxStep
2648	333	13	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	filteredH < -$.maxStep
2648	333	13	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	0	DEF	$ < -maxStep
2077	302	8	AggregateSummaryStatistics.java	aggregate	statistics	Collection<SummaryStatistics>	0	RET	$ == null
2078	306	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	RET	$.hasNext()
31229	316	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	NIL-WHILE	$.hasNext()
2079	318	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMin() < min
2079	318	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	current.getMin() < $
2079	318	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	Double.isNaN($)
2080	321	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMax() > max
2080	321	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	current.getMax() > $
2080	321	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	Double.isNaN($)
2081	333	8	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 0
2082	335	15	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 1
2485	43	8	ArgUtils.java	flatten	array	Object[]	0	DEF	$ != null
2486	45	16	ArgUtils.java	flatten	THIS	ArgUtils	1	DEF	$.o instanceof Object[]
11	61	8	ArithmeticUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
11	61	8	ArithmeticUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
12	109	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	$ == k
12	109	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == 0
12	109	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	n == $
13	112	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	k == $ - 1
13	112	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == n - 1
13	112	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == 1
14	116	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	k > $ / 2
14	116	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ > n / 2
15	126	8	ArithmeticUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 61
30011	129	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
30011	129	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
16	133	15	ArithmeticUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 66
30012	137	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
30012	137	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
30013	153	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
30013	153	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
17	187	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	$ == k
17	187	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	n == $
17	187	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 0
18	190	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	k == $ - 1
18	190	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == n - 1
18	190	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 1
19	193	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	k > $/2
19	193	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ > n/2
20	196	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	$ < 67
30014	201	8	ArithmeticUtils.java	binomialCoefficientDouble	i	int	0	NIL-FOR	$ <= k
30014	201	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	NIL-FOR	i <= $
21	229	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ == k
21	229	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 0
21	229	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	n == $
22	232	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	k == $ - 1
22	232	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 1
22	232	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == n - 1
23	240	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 67
24	248	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 1030
25	252	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	k > $ / 2
25	252	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ > n / 2
30015	262	8	ArithmeticUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n
30015	262	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $
30016	267	8	ArithmeticUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= k
30016	267	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	NIL-FOR	i <= $
26	299	8	ArithmeticUtils.java	factorial	n	int	0	NotPositiveException	$ < 0
27	303	8	ArithmeticUtils.java	factorial	n	int	0	MathArithmeticException	$ > 20
28	323	8	ArithmeticUtils.java	factorialDouble	n	int	0	NotPositiveException	$ < 0
29	327	8	ArithmeticUtils.java	factorialDouble	n	int	0	RET	$ < 21
30	341	8	ArithmeticUtils.java	factorialLog	n	int	0	NotPositiveException	$ < 0
31	345	8	ArithmeticUtils.java	factorialLog	n	int	0	RET	$ < 21
30017	349	8	ArithmeticUtils.java	factorialLog	i	int	0	NIL-FOR	$ <= n
30017	349	8	ArithmeticUtils.java	factorialLog	n	int	0	NIL-FOR	i <= $
32	387	8	ArithmeticUtils.java	gcd	u	int	0	MathArithmeticException:RET	$ == 0
32	387	8	ArithmeticUtils.java	gcd	v	int	0	MathArithmeticException:RET	$ == 0
33	388	12	ArithmeticUtils.java	gcd	u	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
33	388	12	ArithmeticUtils.java	gcd	v	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
34	399	8	ArithmeticUtils.java	gcd	u	int	0	DEF	$ > 0
35	402	8	ArithmeticUtils.java	gcd	v	int	0	DEF	$ > 0
30018	407	8	ArithmeticUtils.java	gcd	u	int	0	NIL-WHILE	($ & 1) == 0
30018	407	8	ArithmeticUtils.java	gcd	v	int	0	NIL-WHILE	($ & 1) == 0
30018	407	8	ArithmeticUtils.java	gcd	k	int	0	NIL-WHILE	$ < 31
36	413	8	ArithmeticUtils.java	gcd	k	int	0	MathArithmeticException	$ == 31
30019	422	8	ArithmeticUtils.java	gcd	t	int	0	NIL-DOWHILE	$ != 0
30020	425	12	ArithmeticUtils.java	gcd	t	int	0	NIL-WHILE	($ & 1) == 0
37	429	12	ArithmeticUtils.java	gcd	t	int	1	DEF	$ > 0
38	474	8	ArithmeticUtils.java	gcd	u	long	0	MathArithmeticException:RET	$ == 0
38	474	8	ArithmeticUtils.java	gcd	v	long	0	MathArithmeticException:RET	$ == 0
39	475	12	ArithmeticUtils.java	gcd	u	long	0	MathArithmeticException	$ == Long.MIN_VALUE
39	475	12	ArithmeticUtils.java	gcd	v	long	0	MathArithmeticException	$ == Long.MIN_VALUE
40	486	8	ArithmeticUtils.java	gcd	u	long	0	DEF	$ > 0
41	489	8	ArithmeticUtils.java	gcd	v	long	0	DEF	$ > 0
30021	494	8	ArithmeticUtils.java	gcd	u	long	0	NIL-WHILE	($ & 1) == 0
30021	494	8	ArithmeticUtils.java	gcd	v	long	0	NIL-WHILE	($ & 1) == 0
30021	494	8	ArithmeticUtils.java	gcd	k	int	0	NIL-WHILE	$ < 63
42	500	8	ArithmeticUtils.java	gcd	k	int	0	MathArithmeticException	$ == 63
30022	509	8	ArithmeticUtils.java	gcd	t	long	0	NIL-DOWHILE	$ != 0
30023	512	12	ArithmeticUtils.java	gcd	t	long	0	NIL-WHILE	($ & 1) == 0
43	516	12	ArithmeticUtils.java	gcd	t	long	1	DEF	$ > 0
44	552	8	ArithmeticUtils.java	lcm	a	int	0	RET	$ == 0
44	552	8	ArithmeticUtils.java	lcm	b	int	0	RET	$ == 0
45	556	8	ArithmeticUtils.java	lcm	lcm	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
46	586	8	ArithmeticUtils.java	lcm	a	long	0	RET	$ == 0
46	586	8	ArithmeticUtils.java	lcm	b	long	0	RET	$ == 0
47	590	8	ArithmeticUtils.java	lcm	lcm	long	0	MathArithmeticException	$ == Long.MIN_VALUE
48	609	8	ArithmeticUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
48	609	8	ArithmeticUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
49	627	8	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ > b
49	627	8	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a > $
50	631	12	ArithmeticUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ < 0
51	632	16	ArithmeticUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ < 0
52	634	20	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ >= Long.MAX_VALUE / b
52	634	20	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a >= Long.MAX_VALUE / $
53	639	23	ArithmeticUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ > 0
54	641	20	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	Long.MIN_VALUE / b <= $
54	641	20	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	Long.MIN_VALUE / $ <= a
55	651	19	ArithmeticUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ > 0
56	656	16	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE / b
56	656	16	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE / $
57	681	8	ArithmeticUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
57	681	8	ArithmeticUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
58	699	8	ArithmeticUtils.java	subAndCheck	b	long	1	MathArithmeticException	$ == Long.MIN_VALUE
59	700	12	ArithmeticUtils.java	subAndCheck	a	long	1	DEF	$ < 0
60	721	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
30024	727	8	ArithmeticUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
61	728	12	ArithmeticUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
62	747	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
30025	753	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
63	754	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
64	773	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
30026	779	8	ArithmeticUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
65	780	12	ArithmeticUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
66	799	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
30027	805	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
67	806	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
68	825	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
69	841	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
30028	847	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
70	848	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
71	868	8	ArithmeticUtils.java	pow	e	BigInteger	0	NotPositiveException	$.compareTo(BigInteger.ZERO) < 0
30029	874	8	ArithmeticUtils.java	pow	e	BigInteger	0	NIL-WHILE	BigInteger.ZERO.equals($)
72	875	12	ArithmeticUtils.java	pow	e	BigInteger	0	DEF	$.testBit(0)
73	898	8	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	$ > b
73	898	8	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	a > $
74	904	12	ArithmeticUtils.java	addAndCheck	a	long	1	MathArithmeticException	$ < 0
75	905	16	ArithmeticUtils.java	addAndCheck	b	long	1	MathArithmeticException	$ < 0
76	907	20	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	Long.MIN_VALUE - b <= $
76	907	20	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	Long.MIN_VALUE - $ <= a
77	921	16	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE - b
77	921	16	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE - $
78	940	8	ArithmeticUtils.java	checkBinomial	n	int	0	NumberIsTooLargeException	$ < k
78	940	8	ArithmeticUtils.java	checkBinomial	k	int	0	NumberIsTooLargeException	n < $
79	944	8	ArithmeticUtils.java	checkBinomial	n	int	0	NotPositiveException	$ < 0
1252	151	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	copyArray	boolean	1	DEF	$
1253	156	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NoDataException	$ == 0
1254	160	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
30438	163	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	NIL-FOR	$ < nRows
30438	163	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	r < $
1255	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	d[r].length != nCols
1255	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1255	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1255	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	d	T[][]	0	DimensionMismatchException	$[r].length != nCols
30439	195	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	row	int	0	NIL-FOR	$ < nRows
30439	195	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	row < $
30440	227	8	Array2DRowFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
30440	227	8	Array2DRowFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
30441	231	12	Array2DRowFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
30441	231	12	Array2DRowFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
30442	254	8	Array2DRowFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
30442	254	8	Array2DRowFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
30443	258	12	Array2DRowFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
30443	258	12	Array2DRowFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
30444	283	8	Array2DRowFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
30444	283	8	Array2DRowFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
30445	286	12	Array2DRowFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
30445	286	12	Array2DRowFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
30446	288	16	Array2DRowFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
30446	288	16	Array2DRowFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1256	318	8	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	1	DimensionMismatchException	$.data == null
1257	319	12	Array2DRowFieldMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1258	322	12	Array2DRowFieldMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1259	326	12	Array2DRowFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1260	331	12	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
30447	335	12	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	NIL-FOR	i < $.data.$.length
30447	335	12	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1261	336	16	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1261	336	16	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1261	336	16	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1261	336	16	Array2DRowFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[i].length != nCols
1262	400	8	Array2DRowFieldMatrix.java	operate	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1262	400	8	Array2DRowFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1262	400	8	Array2DRowFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
30448	404	8	Array2DRowFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
30448	404	8	Array2DRowFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
30449	407	12	Array2DRowFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
30449	407	12	Array2DRowFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1263	420	8	Array2DRowFieldMatrix.java	preMultiply	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1263	420	8	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1263	420	8	Array2DRowFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
30450	425	8	Array2DRowFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
30450	425	8	Array2DRowFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
30451	427	12	Array2DRowFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
30451	427	12	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
30452	442	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
30452	442	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
30453	444	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
30453	444	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
30454	457	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
30454	457	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
30455	459	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
30455	459	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
30456	474	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
30456	474	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
30457	476	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
30457	476	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
30458	491	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
30458	491	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
30459	493	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
30459	493	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
30460	506	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
30460	506	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
30461	507	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
30461	507	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
30462	521	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
30462	521	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
30463	522	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
30463	522	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
30464	537	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
30464	537	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
30465	538	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
30465	538	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
30466	554	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
30466	554	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
30467	555	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
30467	555	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
30468	571	8	Array2DRowFieldMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
30468	571	8	Array2DRowFieldMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1398	96	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	copyArray	boolean	1	DEF	$
1399	99	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	NullArgumentException	$ == null
1400	103	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NoDataException	$ == 0
1401	107	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	NoDataException	$ == 0
30725	110	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	NIL-FOR	$ < nRows
30725	110	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	r < $
1402	111	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	d[r].length != nCols
1402	111	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1402	111	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1402	111	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	DimensionMismatchException	$[r].length != nCols
30726	129	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	row	int	0	NIL-FOR	$ < nRows
30726	129	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	row < $
30727	162	8	Array2DRowRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
30727	162	8	Array2DRowRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
30728	166	12	Array2DRowRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
30728	166	12	Array2DRowRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
30729	189	8	Array2DRowRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
30729	189	8	Array2DRowRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
30730	193	12	Array2DRowRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
30730	193	12	Array2DRowRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
30731	223	8	Array2DRowRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
30731	223	8	Array2DRowRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
30732	226	12	Array2DRowRealMatrix.java	multiply	mRow	int	0	NIL-FOR	$ < nSum
30732	226	12	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	mRow < $
30733	230	12	Array2DRowRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
30733	230	12	Array2DRowRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
30734	233	16	Array2DRowRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
30734	233	16	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1403	262	8	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	1	DimensionMismatchException	$.data == null
1404	263	12	Array2DRowRealMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1405	266	12	Array2DRowRealMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1406	271	12	Array2DRowRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1407	276	12	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
30735	280	12	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	NIL-FOR	i < $.data.$.length
30735	280	12	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1408	281	16	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1408	281	16	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1408	281	16	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1408	281	16	Array2DRowRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[i].length != nCols
1409	337	8	Array2DRowRealMatrix.java	operate	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1409	337	8	Array2DRowRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1409	337	8	Array2DRowRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
30736	341	8	Array2DRowRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
30736	341	8	Array2DRowRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
30737	344	12	Array2DRowRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
30737	344	12	Array2DRowRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1410	357	8	Array2DRowRealMatrix.java	preMultiply	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1410	357	8	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1410	357	8	Array2DRowRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
30738	362	8	Array2DRowRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
30738	362	8	Array2DRowRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
30739	364	12	Array2DRowRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
30739	364	12	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
30740	380	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
30740	380	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
30741	382	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
30741	382	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
30742	395	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
30742	395	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
30743	397	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
30743	397	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
30744	412	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
30744	412	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
30745	414	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
30745	414	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
30746	429	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
30746	429	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
30747	431	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
30747	431	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
30748	444	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
30748	444	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
30749	445	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
30749	445	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
30750	459	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
30750	459	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
30751	460	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
30751	460	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
30752	475	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
30752	475	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
30753	476	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
30753	476	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
30754	492	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
30754	492	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
30755	493	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
30755	493	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
30756	509	8	Array2DRowRealMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
30756	509	8	Array2DRowRealMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1492	98	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1493	118	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1494	147	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1495	150	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	d.$.length == 0
1495	150	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	ZeroException	$.length == 0
1496	173	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1497	191	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1498	194	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1498	194	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1498	194	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1498	194	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
1499	214	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1500	217	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1500	217	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1500	217	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1500	217	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
1501	232	8	ArrayFieldVector.java	ArrayFieldVector	v	FieldVector<T>	0	NullArgumentException	$ == null
30846	237	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
30846	237	8	ArrayFieldVector.java	ArrayFieldVector	i	int	0	NIL-FOR	$ < data.length
1502	249	8	ArrayFieldVector.java	ArrayFieldVector	v	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1503	265	8	ArrayFieldVector.java	ArrayFieldVector	v	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1504	281	8	ArrayFieldVector.java	ArrayFieldVector	v1	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1504	281	8	ArrayFieldVector.java	ArrayFieldVector	v2	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1505	300	8	ArrayFieldVector.java	ArrayFieldVector	v1	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1505	300	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	NullArgumentException	$ == null
1506	319	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	NullArgumentException	$ == null
1506	319	8	ArrayFieldVector.java	ArrayFieldVector	v2	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1507	345	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	NullArgumentException	$ == null
1507	345	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	NullArgumentException	$ == null
1508	349	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1508	349	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1508	349	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
1509	370	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1509	370	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1509	370	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
30847	407	12	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
30847	407	12	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
30848	423	8	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
30848	423	8	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
30849	436	12	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
30849	436	12	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
30850	452	8	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
30850	452	8	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
30851	461	8	ArrayFieldVector.java	mapAdd	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
30851	461	8	ArrayFieldVector.java	mapAdd	i	int	0	NIL-FOR	$ < data.length
30852	469	8	ArrayFieldVector.java	mapAddToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
30852	469	8	ArrayFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
30853	478	8	ArrayFieldVector.java	mapSubtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
30853	478	8	ArrayFieldVector.java	mapSubtract	i	int	0	NIL-FOR	$ < data.length
30854	486	8	ArrayFieldVector.java	mapSubtractToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
30854	486	8	ArrayFieldVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
30855	495	8	ArrayFieldVector.java	mapMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
30855	495	8	ArrayFieldVector.java	mapMultiply	i	int	0	NIL-FOR	$ < data.length
30856	503	8	ArrayFieldVector.java	mapMultiplyToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
30856	503	8	ArrayFieldVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
30857	512	8	ArrayFieldVector.java	mapDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
30857	512	8	ArrayFieldVector.java	mapDivide	i	int	0	NIL-FOR	$ < data.length
30858	520	8	ArrayFieldVector.java	mapDivideToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
30858	520	8	ArrayFieldVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
30859	530	8	ArrayFieldVector.java	mapInv	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
30859	530	8	ArrayFieldVector.java	mapInv	i	int	0	NIL-FOR	$ < data.length
30860	539	8	ArrayFieldVector.java	mapInvToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
30860	539	8	ArrayFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
30861	552	12	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
30861	552	12	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
30862	568	8	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
30862	568	8	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
30863	581	12	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
30863	581	12	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
30864	597	8	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
30864	597	8	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
30865	624	12	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
30865	624	12	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
30866	640	8	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
30866	640	8	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
30867	668	12	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
30867	668	12	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
30868	669	16	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
30868	669	16	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
30869	687	8	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
30869	687	8	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
30870	688	12	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
30870	688	12	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
30871	758	16	ArrayFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
30871	758	16	ArrayFieldVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
30871	758	16	ArrayFieldVector.java	setSubVector	v	FieldVector<T>	0	NIL-FOR	i < index + $.getDimension()
1510	813	8	ArrayFieldVector.java	checkVectorDimensions	THIS	ArrayFieldVector	0	DimensionMismatchException	$.data.$.length != n
1510	813	8	ArrayFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1511	827	8	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$ == other
1511	827	8	ArrayFieldVector.java	equals	other	Object	0	RET	this == $
1512	830	8	ArrayFieldVector.java	equals	other	Object	0	RET	$ == null
1513	837	12	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data.$.length != rhs.getDimension()
1513	837	12	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data.length != $.getDimension()
30872	841	12	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
30872	841	12	ArrayFieldVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1514	842	16	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data[i].equals(rhs.getEntry(i))
1514	842	16	ArrayFieldVector.java	equals	i	int	0	RET	data[$].equals(rhs.getEntry($))
1514	842	16	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data[i].equals($.getEntry(i))
1515	874	8	ArrayFieldVector.java	checkIndex	THIS	ArrayFieldVector	0	OutOfRangeException	index >= $.getDimension()
1515	874	8	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1515	874	8	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1140	103	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1141	120	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1142	123	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1142	123	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NumberIsTooLargeException	$.length < pos + size
1142	123	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1142	123	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
30280	137	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < d.$.length
30280	137	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < d.length
30280	137	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NIL-FOR	i < $.length
1143	153	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NullArgumentException	$ == null
1144	156	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1144	156	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NumberIsTooLargeException	$.length < pos + size
1144	156	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1144	156	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
30281	160	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < pos + size
30281	160	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NIL-FOR	i < $ + size
30281	160	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NIL-FOR	i < pos + $
1145	172	8	ArrayRealVector.java	ArrayRealVector	v	RealVector	0	NullArgumentException	$ == null
30282	176	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
30282	176	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < data.length
30283	223	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l2
30283	223	8	ArrayRealVector.java	ArrayRealVector	l2	int	0	NIL-FOR	i < $
30284	237	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l1
30284	237	8	ArrayRealVector.java	ArrayRealVector	l1	int	0	NIL-FOR	i < $
1146	291	8	ArrayRealVector.java	add	v	RealVector	1	RET	$ instanceof ArrayRealVector
30285	297	12	ArrayRealVector.java	add	i	int	0	NIL-FOR	$ < dim
30285	297	12	ArrayRealVector.java	add	dim	int	0	NIL-FOR	i < $
30286	306	12	ArrayRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
30286	306	12	ArrayRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
30286	306	12	ArrayRealVector.java	add	e	Entry	0	NIL-WHILE	($ = it.next()) != null
1147	316	8	ArrayRealVector.java	subtract	v	RealVector	1	RET	$ instanceof ArrayRealVector
30287	322	12	ArrayRealVector.java	subtract	i	int	0	NIL-FOR	$ < dim
30287	322	12	ArrayRealVector.java	subtract	dim	int	0	NIL-FOR	i < $
30288	331	12	ArrayRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
30288	331	12	ArrayRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
30288	331	12	ArrayRealVector.java	subtract	e	Entry	0	NIL-WHILE	($ = it.next()) != null
30289	347	8	ArrayRealVector.java	mapToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
30289	347	8	ArrayRealVector.java	mapToSelf	i	int	0	NIL-FOR	$ < data.length
30290	356	8	ArrayRealVector.java	mapAddToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
30290	356	8	ArrayRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
30291	365	8	ArrayRealVector.java	mapSubtractToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
30291	365	8	ArrayRealVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
30292	374	8	ArrayRealVector.java	mapMultiplyToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
30292	374	8	ArrayRealVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
30293	383	8	ArrayRealVector.java	mapDivideToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
30293	383	8	ArrayRealVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
1148	392	8	ArrayRealVector.java	ebeMultiply	v	RealVector	1	RET	$ instanceof ArrayRealVector
30294	398	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < dim
30294	398	12	ArrayRealVector.java	ebeMultiply	dim	int	0	NIL-FOR	i < $
30295	405	12	ArrayRealVector.java	ebeMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
30295	405	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
1149	415	8	ArrayRealVector.java	ebeDivide	v	RealVector	1	RET	$ instanceof ArrayRealVector
30296	421	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < dim
30296	421	12	ArrayRealVector.java	ebeDivide	dim	int	0	NIL-FOR	i < $
30297	428	12	ArrayRealVector.java	ebeDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
30297	428	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
1150	448	8	ArrayRealVector.java	dotProduct	v	RealVector	1	RET	$ instanceof ArrayRealVector
30298	452	12	ArrayRealVector.java	dotProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
30298	452	12	ArrayRealVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
30299	461	12	ArrayRealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
30299	461	12	ArrayRealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
30299	461	12	ArrayRealVector.java	dotProduct	e	Entry	0	NIL-WHILE	($ = it.next()) != null
1151	501	8	ArrayRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
30300	505	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
30300	505	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
30301	513	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
30301	513	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
1152	524	8	ArrayRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof ArrayRealVector
30302	528	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
30302	528	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
30303	536	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
30303	536	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
1153	547	8	ArrayRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
30304	551	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
30304	551	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
30305	559	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
30305	559	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
1154	571	8	ArrayRealVector.java	unitVector	norm	double	0	MathArithmeticException	$ == 0
1155	581	8	ArrayRealVector.java	unitize	norm	double	0	MathArithmeticException	$ == 0
1156	596	8	ArrayRealVector.java	outerProduct	v	RealVector	1	RET	$ instanceof ArrayRealVector
30306	601	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
30306	601	12	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
30307	602	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
30307	602	16	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
30308	611	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
30308	611	12	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
30309	612	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
30309	612	16	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1157	693	8	ArrayRealVector.java	setSubVector	v	RealVector	1	DEF	$ instanceof ArrayRealVector
30310	697	16	ArrayRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
30310	697	16	ArrayRealVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
30310	697	16	ArrayRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < index + $.getDimension()
1158	763	8	ArrayRealVector.java	checkVectorDimensions	THIS	ArrayRealVector	0	DimensionMismatchException	$.data.$.length != n
1158	763	8	ArrayRealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1159	777	12	ArrayRealVector.java	isNaN	THIS	ArrayRealVector	0	RET	Double.isNaN($.v)
1160	793	8	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	$.isNaN()
1161	798	12	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	Double.isInfinite($.v)
1162	822	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$ == other
1162	822	8	ArrayRealVector.java	equals	other	Object	0	RET	this == $
1163	826	8	ArrayRealVector.java	equals	other	Object	0	RET	$ instanceof RealVector
1163	826	8	ArrayRealVector.java	equals	other	Object	0	RET	$ == null
1164	831	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data.$.length != rhs.getDimension()
1164	831	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data.length != $.getDimension()
1165	835	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	$.isNaN()
30311	839	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
30311	839	8	ArrayRealVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1166	840	12	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data[i] != rhs.getEntry(i)
1166	840	12	ArrayRealVector.java	equals	i	int	0	RET	data[$] != rhs.getEntry($)
1166	840	12	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data[i] != $.getEntry(i)
1167	855	8	ArrayRealVector.java	hashCode	THIS	ArrayRealVector	0	RET	$.isNaN()
1168	870	8	ArrayRealVector.java	combineToSelf	y	RealVector	1	DEF	$ instanceof ArrayRealVector
30312	873	12	ArrayRealVector.java	combineToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.length
30312	873	12	ArrayRealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < this.data.length
30313	878	12	ArrayRealVector.java	combineToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.length
30313	878	12	ArrayRealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < this.data.length
31046	299	8	BOBYQAOptimizer.java	bobyqa	j	int	0	NIL-FOR	$ < n
31046	299	8	BOBYQAOptimizer.java	bobyqa	n	int	0	NIL-FOR	j < $
1733	303	12	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= -$.initialTrustRegionRadius
1733	303	12	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= -initialTrustRegionRadius
1734	304	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= ZERO
1734	304	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= ZERO
1735	315	19	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(j) <= $.initialTrustRegionRadius
1735	315	19	BOBYQAOptimizer.java	bobyqa	j	int	0	DEF	upperDifference.getEntry($) <= initialTrustRegionRadius
1736	316	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.upperDifference.getEntry(j) <= ZERO
1736	316	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	upperDifference.getEntry($) <= ZERO
31047	410	8	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
31047	410	8	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1737	447	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex != kbase
1737	447	12	BOBYQAOptimizer.java	bobyqb	kbase	int	0	DEF	trustRegionCenterInterpolationPointIndex != $
31048	449	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
31048	449	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
31049	450	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
31049	450	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
1738	451	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
1738	451	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
1739	458	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() > npt
1739	458	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	getEvaluations() > $
31050	459	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
31050	459	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
31051	461	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
31051	461	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
31052	465	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
31052	465	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1740	498	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm < HALF * $
1740	498	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ < HALF * rho
1741	503	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() <= nfsav + 2
1741	503	16	BOBYQAOptimizer.java	bobyqb	nfsav	int	0	DEF	getEvaluations() <= $ + 2
1742	517	16	BOBYQAOptimizer.java	bobyqb	errbig	double	0	DEF	$ > frhosq * crvmin
1742	517	16	BOBYQAOptimizer.java	bobyqb	frhosq	double	0	DEF	errbig > $ * crvmin
1742	517	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	errbig > frhosq * $
1742	517	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	$ > ZERO
31053	522	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
31053	522	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1743	524	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.lowerDifference.getEntry(j)
1743	524	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
1744	527	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.upperDifference.getEntry(j)
1744	527	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
1745	530	20	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
1745	530	20	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
31054	532	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
31054	532	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1746	538	24	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
1746	538	24	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
1747	557	12	BOBYQAOptimizer.java	bobyqb	dsq	double	0	DEF	$ <= xoptsq * ONE_OVER_A_THOUSAND
1747	557	12	BOBYQAOptimizer.java	bobyqb	xoptsq	double	0	DEF	dsq <= $ * ONE_OVER_A_THOUSAND
31055	562	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
31055	562	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
31056	565	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
31056	565	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
31057	571	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
31057	571	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
31058	575	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
31058	575	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
31059	586	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
31059	586	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
31060	589	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
31060	589	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
31061	594	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
31061	594	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
31062	596	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
31062	596	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
31063	600	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
31063	600	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
31064	606	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
31064	606	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
31065	609	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
31065	609	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
31066	621	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
31066	621	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
31067	623	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
31067	623	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
31068	627	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
31068	627	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
31069	636	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
31069	636	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1748	645	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
31070	677	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
31070	677	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
31071	688	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
31071	688	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
31072	692	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
31072	692	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
31073	702	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
31073	702	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
31074	704	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
31074	704	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
31075	708	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
31075	708	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
31076	715	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
31076	715	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
31077	720	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
31077	720	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
31078	725	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
31078	725	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1749	744	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	1	DEF	$ == 0
1750	748	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	$ > ZERO
1750	748	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	denom < $
1750	748	16	BOBYQAOptimizer.java	bobyqb	denom	double	0	DEF	$ < cauchy
31079	749	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
31079	749	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
31080	767	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
31080	767	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1751	768	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
1751	768	20	BOBYQAOptimizer.java	bobyqb	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
31081	772	20	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
31081	772	20	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
31082	781	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
31082	781	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1752	790	20	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
1752	790	20	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
1752	790	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
31083	811	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
31083	811	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1753	819	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.lowerDifference.getEntry(i)
1753	819	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
1754	822	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.upperDifference.getEntry(i)
1754	822	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
1755	829	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.isMinimize
1756	831	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
31084	842	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
31084	842	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
31085	844	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
31085	844	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
1757	846	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ == j
1757	846	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i == $
31086	853	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
31086	853	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1758	863	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm > $
1758	863	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ > rho
1759	869	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	MathIllegalStateException	$ > 0
1760	870	16	BOBYQAOptimizer.java	bobyqb	vquad	double	0	MathIllegalStateException	$ >= ZERO
1761	875	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= ONE_OVER_TEN
1762	878	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= .7
1763	885	16	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
1763	885	16	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
1764	891	16	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
1764	891	16	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
31087	898	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
31087	898	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
31088	900	24	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
31088	900	24	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
31089	909	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
31089	909	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1765	918	24	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
1765	918	24	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
1765	918	24	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
1766	929	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	$ <= HALF * biglsq
1766	929	20	BOBYQAOptimizer.java	bobyqb	biglsq	double	0	DEF	scaden <= HALF * $
31090	944	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
31090	944	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
31091	946	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
31091	946	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
31092	951	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
31092	951	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
31093	953	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
31093	953	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
31094	962	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
31094	962	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
31095	966	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
31095	966	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
31096	968	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
31096	968	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
31097	972	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
31097	972	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
31098	976	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
31098	976	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
31099	980	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
31099	980	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1767	986	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
1767	986	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
31100	990	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
31100	990	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
31101	995	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
31101	995	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
1768	996	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
1768	996	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
31102	1003	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
31102	1003	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
31103	1005	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
31103	1005	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
31104	1009	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
31104	1009	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1769	1019	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ > 0
31105	1020	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
31105	1020	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
31106	1024	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < nptm
31106	1024	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	j < $
31107	1026	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
31107	1026	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
31108	1029	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
31108	1029	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
31109	1033	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
31109	1033	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
31110	1035	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
31110	1035	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
31111	1043	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
31111	1043	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
31112	1045	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
31112	1045	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1770	1049	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
1770	1049	20	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
1771	1057	27	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
1771	1057	27	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
1772	1078	16	BOBYQAOptimizer.java	bobyqb	gqsq	double	0	DEF	$ < TEN * gisq
1772	1078	16	BOBYQAOptimizer.java	bobyqb	gisq	double	0	DEF	gqsq < TEN * $
1773	1081	16	BOBYQAOptimizer.java	bobyqb	itest	int	0	DEF	$ >= 3
31113	1082	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < max
31113	1082	20	BOBYQAOptimizer.java	bobyqb	max	int	0	NIL-FOR	i < $
1774	1083	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < n
1774	1083	24	BOBYQAOptimizer.java	bobyqb	n	int	0	DEF	i < $
1775	1086	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < npt
1775	1086	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	i < $
1776	1089	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < nh
1776	1089	24	BOBYQAOptimizer.java	bobyqb	nh	int	0	DEF	i < $
1777	1101	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
1778	1104	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f <= $ + ONE_OVER_TEN * vquad
1778	1104	12	BOBYQAOptimizer.java	bobyqb	vquad	double	0	DEF	f <= fopt + ONE_OVER_TEN * $
1778	1104	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ <= fopt + ONE_OVER_TEN * vquad
31114	1121	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
31114	1121	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
31115	1123	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
31115	1123	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1779	1128	16	BOBYQAOptimizer.java	bobyqb	sum	double	0	DEF	$ > distsq
1779	1128	16	BOBYQAOptimizer.java	bobyqb	distsq	double	0	DEF	sum > $
1780	1140	12	BOBYQAOptimizer.java	bobyqb	knew	int	0	DEF	$ >= 0
1781	1142	16	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
1782	1145	20	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
1782	1145	20	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
1783	1157	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
1784	1160	12	BOBYQAOptimizer.java	bobyqb	ratio	double	0	DEF	$ > ZERO
1785	1163	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	Math.max(delta, dnorm) > $
1785	1163	12	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	Math.max($, dnorm) > rho
1785	1163	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	Math.max(delta, $) > rho
1786	1172	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	rho > $.stoppingTrustRegionRadius
1786	1172	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	$ > stoppingTrustRegionRadius
1787	1175	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= SIXTEEN
1788	1177	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= TWO_HUNDRED_FIFTY
1789	1191	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
1790	1197	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex) <= fsave
1790	1197	12	BOBYQAOptimizer.java	bobyqb	fsave	double	0	DEF	fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex) <= $
31116	1198	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
31116	1198	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1791	1206	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
1791	1206	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
1792	1209	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
1792	1209	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
31117	1272	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
31117	1272	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
31118	1275	8	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < max
31118	1275	8	BOBYQAOptimizer.java	altmov	max	int	0	NIL-FOR	j < $
31119	1277	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
31119	1277	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
31120	1286	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
31120	1286	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
31121	1289	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
31121	1289	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
31122	1291	12	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
31122	1291	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
31123	1295	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
31123	1295	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
31124	1311	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
31124	1311	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
1793	1312	12	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
1793	1312	12	BOBYQAOptimizer.java	altmov	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
31125	1317	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
31125	1317	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
31126	1330	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
31126	1330	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1794	1332	16	BOBYQAOptimizer.java	altmov	tmp	double	1	DEF	$ > ZERO
1795	1333	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
1795	1333	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1795	1333	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
1795	1333	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1796	1337	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
1796	1337	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1796	1337	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
1796	1337	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1797	1343	23	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	$ < ZERO
1798	1344	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
1798	1344	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1798	1344	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
1798	1344	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1799	1348	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
1799	1348	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1799	1348	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
1799	1348	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1800	1363	12	BOBYQAOptimizer.java	altmov	k	int	1	DEF	$ == knew
1800	1363	12	BOBYQAOptimizer.java	altmov	knew	int	1	DEF	k == $
1801	1367	16	BOBYQAOptimizer.java	altmov	d1	double	0	DEF	Math.abs($) > Math.abs(vlag)
1801	1367	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d1) > Math.abs($)
1802	1375	16	BOBYQAOptimizer.java	altmov	d3	double	0	DEF	$ * d4 < ZERO
1802	1375	16	BOBYQAOptimizer.java	altmov	d4	double	0	DEF	d3 * $ < ZERO
1803	1377	20	BOBYQAOptimizer.java	altmov	d5	double	0	DEF	Math.abs($) > Math.abs(vlag)
1803	1377	20	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d5) > Math.abs($)
1804	1389	16	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	Math.abs($) > Math.abs(vlag)
1804	1389	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(tmp) > Math.abs($)
1805	1394	16	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ > HALF
1806	1395	20	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs($) < ONE_OVER_FOUR
1807	1408	12	BOBYQAOptimizer.java	altmov	predsq	double	0	DEF	$ > presav
1807	1408	12	BOBYQAOptimizer.java	altmov	presav	double	0	DEF	predsq > $
31127	1418	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
31127	1418	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1808	1423	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ < 0
1809	1426	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ > 0
31128	1441	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
31128	1441	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1810	1444	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.min($.trustRegionCenterOffset.getEntry(i) - $.lowerDifference.getEntry(i), glagValue) > ZERO
1810	1444	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.max($.trustRegionCenterOffset.getEntry(i) - $.upperDifference.getEntry(i), glagValue) < ZERO
1810	1444	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), $) > ZERO
1810	1444	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), $) < ZERO
1810	1444	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($), glagValue) > ZERO
1810	1444	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($), glagValue) < ZERO
1811	1451	12	BOBYQAOptimizer.java	altmov	ggfree	double	0	RET	$ == ZERO
1812	1457	12	BOBYQAOptimizer.java	altmov	tmp1	double	0	DEF	$ > ZERO
31129	1460	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
31129	1460	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1813	1461	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	work1.getEntry($) == bigstp
1813	1461	20	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	0	DEF	$.getEntry(i) == bigstp
1813	1461	20	BOBYQAOptimizer.java	altmov	bigstp	double	0	DEF	work1.getEntry(i) == $
1814	1463	24	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 <= $.lowerDifference.getEntry(i)
1814	1463	24	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ <= lowerDifference.getEntry(i)
1814	1463	24	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 <= lowerDifference.getEntry($)
1815	1468	31	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 >= $.upperDifference.getEntry(i)
1815	1468	31	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ >= upperDifference.getEntry(i)
1815	1468	31	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 >= upperDifference.getEntry($)
31130	1486	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
31130	1486	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1816	1488	16	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == bigstp
1816	1488	16	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == bigstp
1816	1488	16	BOBYQAOptimizer.java	altmov	bigstp	double	1	DEF	work1.getEntry(i) == $
1817	1493	23	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == ZERO
1817	1493	23	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
1818	1495	23	BOBYQAOptimizer.java	altmov	glagValue	double	1	DEF	$ > ZERO
31131	1509	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
31131	1509	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
31132	1511	16	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
31132	1511	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
1819	1516	12	BOBYQAOptimizer.java	altmov	iflag	int	0	DEF	$ == 1
1820	1519	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv > -$
1820	1519	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv < -$ * (ONE + Math.sqrt(TWO))
1820	1519	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ > -gw
1820	1519	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ < -gw * (ONE + Math.sqrt(TWO))
31133	1522	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
31133	1522	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1821	1540	12	BOBYQAOptimizer.java	altmov	iflag	int	1	DEF	$ == 0
31134	1541	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
31134	1541	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1822	1551	8	BOBYQAOptimizer.java	altmov	cauchy	double	0	DEF	csave > $
1822	1551	8	BOBYQAOptimizer.java	altmov	csave	double	0	DEF	$ > cauchy
31135	1552	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
31135	1552	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
31136	1598	8	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
31136	1598	8	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
31137	1600	12	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
31137	1600	12	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
31138	1603	12	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < ndim
31138	1603	12	BOBYQAOptimizer.java	prelim	ndim	int	0	NIL-FOR	i < $
31139	1607	8	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < max
31139	1607	8	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	i < $
31140	1610	8	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
31140	1610	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
31141	1612	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < max
31141	1612	12	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	j < $
31142	1624	8	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	NIL-DOWHILE	$.getEvaluations() < npt
31142	1624	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-DOWHILE	getEvaluations() < $
1823	1631	12	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= 2 * n
1823	1631	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= 2 * $
1824	1632	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ >= 1
1824	1632	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= n
1824	1632	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= $
1825	1635	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfmm) == ZERO
1825	1635	20	BOBYQAOptimizer.java	prelim	nfmm	int	0	DEF	upperDifference.getEntry($) == ZERO
1826	1640	23	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	$ > n
1826	1640	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	nfm > $
1827	1643	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.lowerDifference.getEntry(nfxm) == ZERO
1827	1643	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	lowerDifference.getEntry($) == ZERO
1828	1647	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfxm) == ZERO
1828	1647	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	upperDifference.getEntry($) == ZERO
1829	1657	16	BOBYQAOptimizer.java	prelim	n	int	0	DEF	ipt > $
1829	1657	16	BOBYQAOptimizer.java	prelim	ipt	int	0	DEF	$ > n
31143	1672	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
31143	1672	12	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
1830	1676	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.lowerDifference.getEntry(j)
1830	1676	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == lowerDifference.getEntry($)
1830	1676	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == lowerDifference.getEntry(j)
1831	1679	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.upperDifference.getEntry(j)
1831	1679	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == upperDifference.getEntry($)
1831	1679	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == upperDifference.getEntry(j)
1832	1689	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ == 1
1833	1692	19	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex)
1833	1692	19	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)
1834	1702	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= 2 * n + 1
1834	1702	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= 2 * $ + 1
1835	1703	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= n + 1
1835	1703	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ >= 2
1835	1703	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= $ + 1
1836	1706	20	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	npt < $ + n
1836	1706	20	BOBYQAOptimizer.java	prelim	n	int	0	DEF	npt < numEval + $
1836	1706	20	BOBYQAOptimizer.java	prelim	npt	int	0	DEF	$ < numEval + n
1837	1713	23	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	$ >= n + 2
1837	1713	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	numEval >= $ + 2
1838	1719	20	BOBYQAOptimizer.java	prelim	stepa	double	0	DEF	$ * stepb < ZERO
1838	1719	20	BOBYQAOptimizer.java	prelim	stepb	double	0	DEF	stepa * $ < ZERO
1839	1720	24	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry(nfm - n)
1839	1720	24	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	f < fAtInterpolationPoints.getEntry($ - n)
1839	1720	24	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(nfm - n)
1839	1720	24	BOBYQAOptimizer.java	prelim	n	int	0	DEF	f < fAtInterpolationPoints.getEntry(nfm - $)
1840	1723	28	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex == nfm
1840	1723	28	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	trustRegionCenterInterpolationPointIndex == $
31144	1850	8	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
31144	1850	8	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1841	1852	12	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) <= $.lowerDifference.getEntry(i)
1841	1852	12	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	trustRegionCenterOffset.getEntry($) <= lowerDifference.getEntry($)
1842	1853	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) >= ZERO
1842	1853	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) >= ZERO
1843	1856	19	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) >= $.upperDifference.getEntry(i)
1843	1856	19	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	trustRegionCenterOffset.getEntry($) >= upperDifference.getEntry($)
1844	1857	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) <= ZERO
1844	1857	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) <= ZERO
1845	1861	12	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) != ZERO
1845	1861	12	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
31145	1887	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
31145	1887	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1846	1888	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) != ZERO
1846	1888	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) != ZERO
1847	1890	23	BOBYQAOptimizer.java	trsbox	beta	double	1	DEF	$ == ZERO
1848	1899	12	BOBYQAOptimizer.java	trsbox	stepsq	double	0	DEF	$ == ZERO
1849	1902	12	BOBYQAOptimizer.java	trsbox	beta	double	0	DEF	$ == ZERO
1850	1906	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	gredsq * delsq <= $ * 1e-4 * $
1850	1906	12	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	gredsq * $ <= qred * 1e-4 * qred
1850	1906	12	BOBYQAOptimizer.java	trsbox	gredsq	double	0	DEF	$ * delsq <= qred * 1e-4 * qred
31146	1922	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
31146	1922	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1851	1923	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1851	1923	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
1852	1931	12	BOBYQAOptimizer.java	trsbox	resid	double	0	DEF	$ <= ZERO
1853	1935	12	BOBYQAOptimizer.java	trsbox	ds	double	1	DEF	$ < ZERO
1854	1941	12	BOBYQAOptimizer.java	trsbox	shs	double	0	DEF	$ > ZERO
31147	1950	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
31147	1950	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1855	1951	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	s.getEntry($) != ZERO
1855	1951	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
1856	1953	20	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	s.getEntry($) > ZERO
1856	1953	20	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	1	DEF	$.getEntry(i) > ZERO
1857	1958	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ < stplen
1857	1958	20	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	temp < $
1858	1968	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ > ZERO
1859	1971	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ == -1
1859	1971	16	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
1860	1973	20	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ == MINUS_ONE
31148	1979	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
31148	1979	16	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1861	1981	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1861	1981	20	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
1862	1996	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
1863	1999	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	s.getEntry($) < ZERO
1863	1999	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(iact) < ZERO
1864	2005	16	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	$ <= ZERO
1865	2014	12	BOBYQAOptimizer.java	trsbox	blen	double	0	DEF	stplen < $
1865	2014	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ < blen
1866	2015	16	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ == itermax
1866	2015	16	BOBYQAOptimizer.java	trsbox	itermax	int	0	DEF	iterc == $
1867	2018	16	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= qred * .01
1867	2018	16	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec <= $ * .01
1868	2036	12	BOBYQAOptimizer.java	trsbox	n	int	0	DEF	nact >= $ - 1
1868	2036	12	BOBYQAOptimizer.java	trsbox	nact	int	0	DEF	$ >= n - 1
31149	2042	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
31149	2042	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1869	2043	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
1869	2043	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
1870	2065	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	temp <= $ * 1e-4 * $
1870	2065	12	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ <= qred * 1e-4 * qred
31150	2069	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
31150	2069	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1871	2070	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
1871	2070	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
31151	2085	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
31151	2085	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1872	2086	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1872	2086	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
1873	2089	20	BOBYQAOptimizer.java	trsbox	tempa	double	1	DEF	$ <= ZERO
1874	2093	27	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	$ <= ZERO
1875	2106	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
1876	2108	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempa
1876	2108	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempa
1876	2108	24	BOBYQAOptimizer.java	trsbox	tempa	double	0	DEF	angbd * temp > $
1877	2117	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
1878	2119	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempb
1878	2119	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempb
1878	2119	24	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	angbd * temp > $
31152	2137	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
31152	2137	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1879	2138	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1879	2138	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
31153	2153	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < iu
31153	2153	12	BOBYQAOptimizer.java	trsbox	iu	int	0	NIL-FOR	i < $
1880	2158	16	BOBYQAOptimizer.java	trsbox	redmax	double	1	DEF	rednew > $
1880	2158	16	BOBYQAOptimizer.java	trsbox	rednew	double	1	DEF	$ > redmax
1881	2162	23	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ == isav + 1
1881	2162	23	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	i == $ + 1
1882	2171	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < 0
1883	2174	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav < $
1883	2174	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < iu
1884	2182	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= ZERO
31154	2192	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
31154	2192	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1885	2194	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1885	2194	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
1886	2204	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav == $
1886	2204	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
1886	2204	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ == iu
1887	2213	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ > qred * .01
1887	2213	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec > $ * .01
31155	2220	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
31155	2220	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1888	2226	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == MINUS_ONE
1888	2226	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == MINUS_ONE
1889	2229	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ONE
1889	2229	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ONE
31156	2246	12	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	$ < n
31156	2246	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	j < $
31157	2248	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ <= j
31157	2248	16	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	i <= $
1890	2249	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ < j
1890	2249	20	BOBYQAOptimizer.java	trsbox	j	int	0	DEF	i < $
31158	2257	12	BOBYQAOptimizer.java	trsbox	k	int	0	NIL-FOR	$ < npt
31158	2257	12	BOBYQAOptimizer.java	trsbox	npt	int	0	NIL-FOR	k < $
1891	2258	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.modelSecondDerivativesParameters.getEntry(k) != ZERO
1891	2258	16	BOBYQAOptimizer.java	trsbox	k	int	0	DEF	modelSecondDerivativesParameters.getEntry($) != ZERO
31159	2259	20	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
31159	2259	20	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1892	2264	12	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ != ZERO
1893	2267	12	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ > itcsav
1893	2267	12	BOBYQAOptimizer.java	trsbox	itcsav	int	0	DEF	iterc > $
31160	2270	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
31160	2270	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
31161	2311	8	BOBYQAOptimizer.java	update	k	int	0	NIL-FOR	$ < npt
31161	2311	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	k < $
31162	2312	12	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
31162	2312	12	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
31163	2321	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
31163	2321	8	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
1894	2323	12	BOBYQAOptimizer.java	update	d1	double	0	DEF	Math.abs($) > ztest
1894	2323	12	BOBYQAOptimizer.java	update	ztest	double	0	DEF	Math.abs(d1) > $
31164	2331	16	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
31164	2331	16	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
31165	2343	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
31165	2343	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
31166	2355	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
31166	2355	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
31167	2362	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < n
31167	2362	8	BOBYQAOptimizer.java	update	n	int	0	NIL-FOR	j < $
31168	2367	12	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ <= jp
31168	2367	12	BOBYQAOptimizer.java	update	jp	int	0	NIL-FOR	i <= $
1895	2370	16	BOBYQAOptimizer.java	update	i	int	0	DEF	$ >= npt
1895	2370	16	BOBYQAOptimizer.java	update	npt	int	0	DEF	i >= $
1896	2391	8	BOBYQAOptimizer.java	setup	dimension	int	0	NumberIsTooSmallException	$ < MINIMUM_PROBLEM_DIMENSION
1897	2396	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints < nPointsInterval[0]
1897	2396	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints > nPointsInterval[1]
1897	2396	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints < $[0]
1897	2396	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints > $[1]
31169	2409	8	BOBYQAOptimizer.java	setup	i	int	0	NIL-FOR	$ < dimension
31169	2409	8	BOBYQAOptimizer.java	setup	dimension	int	0	NIL-FOR	i < $
1898	2413	8	BOBYQAOptimizer.java	setup	requiredMinDiff	double	0	DEF	minDiff < $
1898	2413	8	BOBYQAOptimizer.java	setup	minDiff	double	0	DEF	$ < requiredMinDiff
604	149	8	BSPTree.java	insertCut	THIS	BSPTree	0	DEF	$.cut != null
605	155	8	BSPTree.java	insertCut	chopped	SubHyperplane<S>	0	RET	$.isEmpty()
606	180	8	BSPTree.java	copySelf	THIS	BSPTree	0	RET	$.cut == null
607	241	8	BSPTree.java	visit	THIS	BSPTree	1	DEF	$.cut == null
30097	292	8	BSPTree.java	fitToCell	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
30097	292	8	BSPTree.java	fitToCell	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
608	293	12	BSPTree.java	fitToCell	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
608	293	12	BSPTree.java	fitToCell	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
609	311	8	BSPTree.java	getCell	THIS	BSPTree	0	RET	$.cut == null
610	318	8	BSPTree.java	getCell	offset	double	1	RET	FastMath.abs($) < 1.0e-10
611	320	15	BSPTree.java	getCell	offset	double	1	RET	$ <= 0
612	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute.equals($.minus.$.attribute)
612	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.cut != null
612	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute == null
612	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.cut == null
612	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.cut == null
612	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.attribute == null
612	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute != null
613	384	8	BSPTree.java	merge	THIS	BSPTree	1	RET	$.cut == null
614	387	15	BSPTree.java	merge	THIS	BSPTree	1	RET	tree.$.cut == null
614	387	15	BSPTree.java	merge	tree	BSPTree<S>	1	RET	$.cut == null
615	393	12	BSPTree.java	merge	parentTree	BSPTree<S>	0	DEF	$ != null
616	395	16	BSPTree.java	merge	isPlusChild	boolean	1	DEF	$
617	406	12	BSPTree.java	merge	THIS	BSPTree	0	DEF	merged.$.cut != null
617	406	12	BSPTree.java	merge	merged	BSPTree<S>	0	DEF	$.cut != null
618	488	8	BSPTree.java	split	THIS	BSPTree	0	RET	$.cut == null
619	499	12	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
619	499	12	BSPTree.java	split	sHyperplane	Hyperplane<S>	1	DEF	cut.side($) == Side.PLUS
620	515	12	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
620	515	12	BSPTree.java	split	sHyperplane	Hyperplane<S>	1	DEF	cut.side($) == Side.PLUS
621	567	8	BSPTree.java	insertInTree	parentTree	BSPTree<S>	0	DEF	$ != null
622	568	12	BSPTree.java	insertInTree	isPlusChild	boolean	1	DEF	$
623	576	8	BSPTree.java	insertInTree	THIS	BSPTree	0	DEF	$.cut != null
30098	579	12	BSPTree.java	insertInTree	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
30098	579	12	BSPTree.java	insertInTree	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
624	586	16	BSPTree.java	insertInTree	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
624	586	16	BSPTree.java	insertInTree	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
625	613	8	BSPTree.java	chopOffMinus	THIS	BSPTree	0	DEF	$.cut != null
626	627	8	BSPTree.java	chopOffPlus	THIS	BSPTree	0	DEF	$.cut != null
1914	105	8	BaseAbstractMultivariateOptimizer.java	optimize	f	FUNC	0	NullArgumentException	$ == null
1915	108	8	BaseAbstractMultivariateOptimizer.java	optimize	goalType	GoalType	0	NullArgumentException	$ == null
1916	111	8	BaseAbstractMultivariateOptimizer.java	optimize	startPoint	double[]	0	NullArgumentException	$ == null
1674	94	8	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	lower	double[]	0	NumberIsTooSmallException	$ != null
1675	95	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	THIS	BaseAbstractMultivariateSimpleBoundsOptimizer	0	DimensionMismatchException	lower.$.length != dim
1675	95	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	DimensionMismatchException	lower.length != $
1675	95	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	lower	double[]	0	DimensionMismatchException	$.length != dim
30990	98	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	i	int	0	NIL-FOR	$ < dim
30990	98	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	NIL-FOR	i < $
1676	101	16	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	v	double	0	NumberIsTooSmallException	$ < lo
1676	101	16	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	lo	double	0	NumberIsTooSmallException	v < $
1677	106	8	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	upper	double[]	0	NumberIsTooLargeException	$ != null
1678	107	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	THIS	BaseAbstractMultivariateSimpleBoundsOptimizer	0	DimensionMismatchException	upper.$.length != dim
1678	107	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	DimensionMismatchException	upper.length != $
1678	107	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	upper	double[]	0	DimensionMismatchException	$.length != dim
30991	110	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	i	int	0	NIL-FOR	$ < dim
30991	110	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	NIL-FOR	i < $
1679	113	16	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	v	double	0	NumberIsTooLargeException	$ > hi
1679	113	16	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	hi	double	0	NumberIsTooLargeException	v > $
1680	120	8	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	lower	double[]	1	DEF	$ == null
30992	122	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	i	int	0	NIL-FOR	$ < dim
30992	122	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	NIL-FOR	i < $
1681	128	8	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	upper	double[]	1	DEF	$ == null
30993	130	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	i	int	0	NIL-FOR	$ < dim
30993	130	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	NIL-FOR	i < $
1682	107	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	f	FUNC	0	NullArgumentException	$ == null
1683	110	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	t	double[]	0	NullArgumentException	$ == null
1684	113	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	w	double[]	0	NullArgumentException	$ == null
1685	116	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	startPoint	double[]	0	NullArgumentException	$ == null
1686	119	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	THIS	BaseAbstractMultivariateVectorOptimizer	0	DimensionMismatchException	t.$.length != w.$.length
1686	119	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	t	double[]	0	DimensionMismatchException	$.length != w.length
1686	119	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	w	double[]	0	DimensionMismatchException	t.length != $.length
3281	120	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	minimalIterationCount	int	0	NotStrictlyPositiveException	$ <= 0
3282	123	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	minimalIterationCount	int	0	NumberIsTooSmallException	maximalIterationCount <= $
3282	123	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	maximalIterationCount	int	0	NumberIsTooSmallException	$ <= minimalIterationCount
1530	117	8	BaseAbstractUnivariateOptimizer.java	optimize	f	UnivariateFunction	0	NullArgumentException	$ == null
1531	120	8	BaseAbstractUnivariateOptimizer.java	optimize	goalType	GoalType	0	NullArgumentException	$ == null
1522	73	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	optimizer	BaseMultivariateOptimizer<FUNC>	0	NullArgumentException	$ == null
1522	73	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
1523	77	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1524	113	8	BaseMultivariateMultiStartOptimizer.java	getOptima	THIS	BaseMultivariateMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
30879	146	8	BaseMultivariateMultiStartOptimizer.java	optimize	THIS	BaseMultivariateMultiStartOptimizer	0	NIL-FOR	i < $.starts
30879	146	8	BaseMultivariateMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1525	162	8	BaseMultivariateMultiStartOptimizer.java	optimize	THIS	BaseMultivariateMultiStartOptimizer	0	DEF	$.optima[0] == null
1526	73	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	optimizer	BaseMultivariateVectorOptimizer<FUNC>	0	NullArgumentException	$ == null
1526	73	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
1527	77	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1528	114	8	BaseMultivariateVectorMultiStartOptimizer.java	getOptima	THIS	BaseMultivariateVectorMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
30880	147	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	THIS	BaseMultivariateVectorMultiStartOptimizer	0	NIL-FOR	i < $.starts
30880	147	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1529	166	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	THIS	BaseMultivariateVectorMultiStartOptimizer	0	DEF	$.optima[0] == null
3136	140	8	BaseSecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
3137	143	8	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
3138	168	12	BaseSecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
3139	173	12	BaseSecantSolver.java	doSolve	fx	double	1	DEF	f1 * $ < 0
3139	173	12	BaseSecantSolver.java	doSolve	f1	double	1	DEF	$ * fx < 0
3140	190	20	BaseSecantSolver.java	doSolve	x	double	0	ConvergenceException	$ == x1
3140	190	20	BaseSecantSolver.java	doSolve	x1	double	0	ConvergenceException	x == $
3141	206	12	BaseSecantSolver.java	doSolve	f1	double	0	MathInternalError:RET	FastMath.abs($) <= ftol
3141	206	12	BaseSecantSolver.java	doSolve	ftol	double	0	MathInternalError:RET	FastMath.abs(f1) <= $
3142	211	20	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
3143	216	20	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
3144	221	20	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ <= 0
3145	226	20	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ >= 0
3146	237	12	BaseSecantSolver.java	doSolve	x0	double	0	MathInternalError:RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1), atol)
3146	237	12	BaseSecantSolver.java	doSolve	x1	double	0	MathInternalError:RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($), atol)
3146	237	12	BaseSecantSolver.java	doSolve	atol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), $)
3146	237	12	BaseSecantSolver.java	doSolve	rtol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1), atol)
2469	120	8	Beta.java	regularizedBeta	x	double	1	DEF	$ < 0
2469	120	8	Beta.java	regularizedBeta	x	double	1	DEF	$ > 1
2469	120	8	Beta.java	regularizedBeta	x	double	1	DEF	Double.isNaN($)
2469	120	8	Beta.java	regularizedBeta	a	double	1	DEF	$ <= 0.0
2469	120	8	Beta.java	regularizedBeta	a	double	1	DEF	Double.isNaN($)
2469	120	8	Beta.java	regularizedBeta	b	double	1	DEF	Double.isNaN($)
2469	120	8	Beta.java	regularizedBeta	b	double	1	DEF	$ <= 0.0
2470	128	15	Beta.java	regularizedBeta	x	double	1	DEF	$ > (a + 1.0) / (a + b + 2.0)
2470	128	15	Beta.java	regularizedBeta	a	double	1	DEF	x > ($ + 1.0) / ($ + b + 2.0)
2470	128	15	Beta.java	regularizedBeta	b	double	1	DEF	x > (a + 1.0) / (a + $ + 2.0)
2471	195	8	Beta.java	logBeta	a	double	1	DEF	Double.isNaN($)
2471	195	8	Beta.java	logBeta	a	double	1	DEF	$ <= 0.0
2471	195	8	Beta.java	logBeta	b	double	1	DEF	Double.isNaN($)
2471	195	8	Beta.java	logBeta	b	double	1	DEF	$ <= 0.0
986	98	8	BetaDistribution.java	recomputeZ	THIS	BetaDistribution	0	DEF	Double.isNaN($.z)
987	117	8	BetaDistribution.java	density	x	double	1	RET	$ > 1
987	117	8	BetaDistribution.java	density	x	double	1	RET	$ < 0
988	119	15	BetaDistribution.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 0
989	120	12	BetaDistribution.java	density	THIS	BetaDistribution	0	NumberIsTooSmallException	$.alpha < 1
990	124	15	BetaDistribution.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 1
991	125	12	BetaDistribution.java	density	THIS	BetaDistribution	0	NumberIsTooSmallException	$.beta < 1
992	138	8	BetaDistribution.java	cumulativeProbability	x	double	1	RET	$ <= 0
993	140	15	BetaDistribution.java	cumulativeProbability	x	double	1	RET	$ >= 1
1313	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	m	int	1	DEF	$ >= n
1313	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	n	int	1	DEF	m >= $
1314	90	8	BiDiagonalTransformer.java	getU	THIS	BiDiagonalTransformer	0	DEF	$.cachedU == null
30539	100	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= p
30539	100	12	BiDiagonalTransformer.java	getU	p	int	0	NIL-FOR	k >= $
30540	105	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= diagOffset
30540	105	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	NIL-FOR	k >= $
1315	108	16	BiDiagonalTransformer.java	getU	hK	double[]	0	DEF	$[k - diagOffset] != 0.0
1315	108	16	BiDiagonalTransformer.java	getU	k	int	0	DEF	hK[$ - diagOffset] != 0.0
1315	108	16	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	hK[k - $] != 0.0
30541	109	20	BiDiagonalTransformer.java	getU	j	int	0	NIL-FOR	$ < m
30541	109	20	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	j < $
30542	111	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
30542	111	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
30543	116	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
30543	116	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
1316	122	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	$ > 0
1317	139	8	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	$.cachedB == null
30544	144	12	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	NIL-FOR	i < $.main.$.length
30544	144	12	BiDiagonalTransformer.java	getB	i	int	0	NIL-FOR	$ < main.length
1318	146	16	BiDiagonalTransformer.java	getB	m	int	1	DEF	$ < n
1318	146	16	BiDiagonalTransformer.java	getB	n	int	1	DEF	m < $
1319	147	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ > 0
1320	151	20	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1320	151	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ < main.length - 1
1321	171	8	BiDiagonalTransformer.java	getV	THIS	BiDiagonalTransformer	0	DEF	$.cachedV == null
30545	181	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= p
30545	181	12	BiDiagonalTransformer.java	getV	p	int	0	NIL-FOR	k >= $
30546	186	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= diagOffset
30546	186	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	NIL-FOR	k >= $
1322	189	16	BiDiagonalTransformer.java	getV	hK	double[]	0	DEF	$[k] != 0.0
1322	189	16	BiDiagonalTransformer.java	getV	k	int	0	DEF	hK[$] != 0.0
30547	190	20	BiDiagonalTransformer.java	getV	j	int	0	NIL-FOR	$ < n
30547	190	20	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	j < $
30548	192	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
30548	192	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
30549	197	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
30549	197	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
1323	203	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	DEF	$ > 0
30550	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	NIL-FOR	$ < n
30550	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	k < $
30551	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
30551	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1324	272	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	a	double	0	DEF	$ != 0.0
30552	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
30552	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
30553	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
30553	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
30554	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
30554	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1325	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	DEF	$ < n - 1
1325	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	DEF	k < $ - 1
30555	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
30555	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
1326	297	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	b	double	0	DEF	$ != 0.0
30556	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
30556	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
30557	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
30557	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
30558	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
30558	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
30559	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	NIL-FOR	$ < m
30559	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	k < $
30560	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
30560	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1327	336	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	a	double	0	DEF	$ != 0.0
30561	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
30561	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
30562	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
30562	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
30563	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
30563	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1328	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	DEF	$ < m - 1
1328	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	DEF	k < $ - 1
30564	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
30564	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
1329	361	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	b	double	0	DEF	$ != 0.0
30565	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
30565	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
30566	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
30566	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
30567	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
30567	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
3077	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
3077	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
3077	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
3077	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
3077	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$[0].length == 0
3077	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$.length == 0
3078	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
3078	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
3078	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	xLen != $.length
3079	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
3079	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
3079	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	xLen != $.length
3080	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
3080	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
3080	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	xLen != $.length
3081	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
3081	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
3081	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	xLen != $.length
31706	127	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
31706	127	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
3082	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
3082	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
3082	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
3082	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	$[i].length != yLen
3083	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
3083	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
3083	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
3083	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	$[i].length != yLen
3084	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
3084	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
3084	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
3084	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
3085	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
3085	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
3085	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
3085	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
31707	141	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
31707	141	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
3086	160	8	BicubicSplineInterpolatingFunction.java	value	i	int	0	OutOfRangeException	$ == -1
3087	164	8	BicubicSplineInterpolatingFunction.java	value	j	int	0	OutOfRangeException	$ == -1
3088	226	8	BicubicSplineInterpolatingFunction.java	partialDerivative	THIS	BicubicSplineInterpolatingFunction	0	DEF	$.partialDerivatives == null
3089	231	8	BicubicSplineInterpolatingFunction.java	partialDerivative	i	int	0	OutOfRangeException	$ == -1
3090	235	8	BicubicSplineInterpolatingFunction.java	partialDerivative	j	int	0	OutOfRangeException	$ == -1
31708	253	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < lastI
31708	253	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastI	int	0	NIL-FOR	i < $
31709	254	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < lastJ
31709	254	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastJ	int	0	NIL-FOR	j < $
3091	273	8	BicubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ < val[0]
3091	273	8	BicubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c < $[0]
31710	278	8	BicubicSplineInterpolatingFunction.java	searchIndex	i	int	0	NIL-FOR	$ < max
31710	278	8	BicubicSplineInterpolatingFunction.java	searchIndex	max	int	0	NIL-FOR	i < $
3092	279	12	BicubicSplineInterpolatingFunction.java	searchIndex	i	int	0	RET	c <= val[$]
3092	279	12	BicubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ <= val[i]
3092	279	12	BicubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c <= $[i]
31711	319	8	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < 16
31712	322	12	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < 16
31713	367	8	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	i	int	0	NIL-FOR	$ < N
31714	368	12	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	j	int	0	NIL-FOR	$ < N
3093	378	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
3093	378	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
3094	381	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
3094	381	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
31715	406	8	BicubicSplineInterpolatingFunction.java	apply	i	int	0	NIL-FOR	$ < N
31716	407	12	BicubicSplineInterpolatingFunction.java	apply	j	int	0	NIL-FOR	$ < N
3095	419	8	BicubicSplineInterpolatingFunction.java	partialDerivativeX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeX == null
3096	429	8	BicubicSplineInterpolatingFunction.java	partialDerivativeY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeY == null
3097	439	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXX == null
3098	449	8	BicubicSplineInterpolatingFunction.java	partialDerivativeYY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeYY == null
3099	459	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXY == null
31717	476	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < N
31718	477	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < N
3074	39	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3074	39	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3074	39	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3074	39	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3074	39	8	BicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3074	39	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
3075	42	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3075	42	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3075	42	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
31694	57	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
31694	57	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3076	58	12	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3076	58	12	BicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3076	58	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3076	58	12	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
31695	62	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
31695	62	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
31696	72	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
31696	72	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
31697	79	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
31697	79	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
31698	85	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
31698	85	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
31699	87	12	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
31699	87	12	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
31700	94	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
31700	94	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
31701	96	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
31701	96	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
31702	103	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
31702	103	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
31703	106	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
31703	106	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
846	123	8	BigFraction.java	BigFraction	den	BigInteger	0	ZeroException	BigInteger.ZERO.equals($)
847	126	8	BigFraction.java	BigFraction	num	BigInteger	1	DEF	BigInteger.ZERO.equals($)
848	133	12	BigFraction.java	BigFraction	gcd	BigInteger	0	DEF	BigInteger.ONE.compareTo($) < 0
849	139	12	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.compareTo($) > 0
850	173	8	BigFraction.java	BigFraction	value	double	0	MathIllegalArgumentException	Double.isNaN($)
851	176	8	BigFraction.java	BigFraction	value	double	0	MathIllegalArgumentException	Double.isInfinite($)
852	185	8	BigFraction.java	BigFraction	exponent	long	0	DEF	$ != 0
853	189	8	BigFraction.java	BigFraction	sign	long	0	DEF	$ != 0
30115	193	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x001ffffffffffffeL) != 0
30115	193	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x1) == 0
854	198	8	BigFraction.java	BigFraction	k	int	1	DEF	$ < 0
855	275	8	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	a0 > $
855	275	8	BigFraction.java	BigFraction	a0	long	0	FractionConversionException	$ > overflow
856	281	8	BigFraction.java	BigFraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
856	281	8	BigFraction.java	BigFraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
856	281	8	BigFraction.java	BigFraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
30116	297	8	BigFraction.java	BigFraction	stop	boolean	0	NIL-DOWHILE	$
857	303	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	q2 > $
857	303	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	p2 > $
857	303	12	BigFraction.java	BigFraction	p2	long	0	FractionConversionException	$ > overflow
857	303	12	BigFraction.java	BigFraction	q2	long	0	FractionConversionException	$ > overflow
858	308	12	BigFraction.java	BigFraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
858	308	12	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
858	308	12	BigFraction.java	BigFraction	n	int	1	DEF	$ < maxIterations
858	308	12	BigFraction.java	BigFraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
858	308	12	BigFraction.java	BigFraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
858	308	12	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
858	308	12	BigFraction.java	BigFraction	maxIterations	int	1	DEF	n < $
859	322	8	BigFraction.java	BigFraction	n	int	0	FractionConversionException	$ >= maxIterations
859	322	8	BigFraction.java	BigFraction	maxIterations	int	0	FractionConversionException	n >= $
860	326	8	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
860	326	8	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
861	433	8	BigFraction.java	getReducedFraction	numerator	int	0	RET	$ == 0
862	508	8	BigFraction.java	add	fraction	BigFraction	0	NullArgumentException	$ == null
863	511	8	BigFraction.java	add	fraction	BigFraction	0	RET	ZERO.equals($)
864	518	8	BigFraction.java	add	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
864	518	8	BigFraction.java	add	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
865	612	8	BigFraction.java	divide	bg	BigInteger	0	NullArgumentException	$ == null
866	615	8	BigFraction.java	divide	bg	BigInteger	0	MathArithmeticException	BigInteger.ZERO.equals($)
867	661	8	BigFraction.java	divide	fraction	BigFraction	0	NullArgumentException	$ == null
868	664	8	BigFraction.java	divide	THIS	BigFraction	0	MathArithmeticException	BigInteger.ZERO.equals(fraction.$.numerator)
868	664	8	BigFraction.java	divide	fraction	BigFraction	0	MathArithmeticException	BigInteger.ZERO.equals($.numerator)
869	683	8	BigFraction.java	doubleValue	result	double	0	DEF	Double.isNaN($)
870	713	8	BigFraction.java	equals	THIS	BigFraction	1	DEF	$ == other
870	713	8	BigFraction.java	equals	other	Object	1	DEF	this == $
871	715	15	BigFraction.java	equals	other	Object	0	DEF	$ instanceof BigFraction
872	736	8	BigFraction.java	floatValue	result	float	0	DEF	Double.isNaN($)
873	865	8	BigFraction.java	multiply	bg	BigInteger	0	NullArgumentException	$ == null
874	910	8	BigFraction.java	multiply	fraction	BigFraction	0	NullArgumentException	$ == null
875	913	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	fraction.$.numerator.equals(BigInteger.ZERO)
875	913	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
875	913	8	BigFraction.java	multiply	fraction	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
876	957	8	BigFraction.java	pow	exponent	int	0	RET	$ < 0
877	974	8	BigFraction.java	pow	exponent	long	0	RET	$ < 0
878	993	8	BigFraction.java	pow	exponent	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
879	1052	8	BigFraction.java	subtract	bg	BigInteger	0	NullArgumentException	$ == null
880	1095	8	BigFraction.java	subtract	fraction	BigFraction	0	NullArgumentException	$ == null
881	1098	8	BigFraction.java	subtract	fraction	BigFraction	0	RET	ZERO.equals($)
882	1104	8	BigFraction.java	subtract	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
882	1104	8	BigFraction.java	subtract	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
883	1127	8	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ONE.equals($.denominator)
884	1129	15	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ZERO.equals($.numerator)
885	169	8	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigFraction
886	171	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigInteger
887	173	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
888	194	8	BigFractionFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
889	216	8	BigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
890	249	8	BigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
30117	272	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	$ < source.length()
30117	272	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	Character.isDigit(source.charAt($))
30117	272	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	end < $.length()
30117	272	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	Character.isDigit($.charAt(end))
193	306	8	BigReal.java	equals	THIS	BigReal	0	RET	$ == other
193	306	8	BigReal.java	equals	other	Object	0	RET	this == $
194	310	8	BigReal.java	equals	other	Object	0	RET	$ instanceof BigReal
2449	59	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i < 0
2449	59	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i >1
31414	74	8	BinaryChromosome.java	randomBinaryRepresentation	j	int	0	NIL-FOR	$<length
31414	74	8	BinaryChromosome.java	randomBinaryRepresentation	length	int	0	NIL-FOR	j<$
2450	86	8	BinaryChromosome.java	isSame	another	Chromosome	0	RET	$ instanceof BinaryChromosome
2451	91	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getLength() != anotherBc.getLength()
2451	91	8	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getLength() != $.getLength()
31415	95	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	NIL-FOR	i< $.getRepresentation().size()
31415	95	8	BinaryChromosome.java	isSame	i	int	0	NIL-FOR	$< getRepresentation().size()
2452	96	12	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getRepresentation().get(i).equals(anotherBc.getRepresentation().get(i))
2452	96	12	BinaryChromosome.java	isSame	i	int	0	RET	getRepresentation().get($).equals(anotherBc.getRepresentation().get($))
2452	96	12	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getRepresentation().get(i).equals($.getRepresentation().get(i))
2463	41	8	BinaryMutation.java	mutate	original	Chromosome	0	MathIllegalArgumentException	$ instanceof BinaryChromosome
1042	50	8	BinomialDistribution.java	BinomialDistribution	trials	int	0	NotPositiveException	$ < 0
1043	54	8	BinomialDistribution.java	BinomialDistribution	p	double	0	OutOfRangeException	$ > 1
1043	54	8	BinomialDistribution.java	BinomialDistribution	p	double	0	OutOfRangeException	$ < 0
1044	83	8	BinomialDistribution.java	probability	THIS	BinomialDistribution	1	DEF	x > $.numberOfTrials
1044	83	8	BinomialDistribution.java	probability	x	int	1	DEF	$ < 0
1044	83	8	BinomialDistribution.java	probability	x	int	1	DEF	$ > numberOfTrials
1045	96	8	BinomialDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
1046	98	15	BinomialDistribution.java	cumulativeProbability	THIS	BinomialDistribution	1	DEF	x >= $.numberOfTrials
1046	98	15	BinomialDistribution.java	cumulativeProbability	x	int	1	DEF	$ >= numberOfTrials
3210	76	12	BisectionSolver.java	doSolve	fm	double	1	DEF	$ * fmin > 0
3210	76	12	BisectionSolver.java	doSolve	fmin	double	1	DEF	fm * $ > 0
3211	84	12	BisectionSolver.java	doSolve	min	double	0	RET	FastMath.abs(max - $) <= absoluteAccuracy
3211	84	12	BisectionSolver.java	doSolve	max	double	0	RET	FastMath.abs($ - min) <= absoluteAccuracy
3211	84	12	BisectionSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(max - min) <= $
31404	68	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < iEnd
31404	68	8	BitsStreamGenerator.java	nextBytes	iEnd	int	0	NIL-WHILE	i < $
31405	77	8	BitsStreamGenerator.java	nextBytes	THIS	BitsStreamGenerator	0	NIL-WHILE	i < bytes.$.length
31405	77	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < bytes.length
31405	77	8	BitsStreamGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	i < $.length
2422	99	8	BitsStreamGenerator.java	nextGaussian	THIS	BitsStreamGenerator	1	DEF	Double.isNaN($.nextGaussian)
2423	138	8	BitsStreamGenerator.java	nextInt	n	int	0	RET	$ > 0
2424	139	12	BitsStreamGenerator.java	nextInt	n	int	0	RET	($ & -$) == $
31406	144	12	BitsStreamGenerator.java	nextInt	bits	int	0	NIL-DOWHILE	$ - val + (n - 1) < 0
31406	144	12	BitsStreamGenerator.java	nextInt	val	int	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
31406	144	12	BitsStreamGenerator.java	nextInt	n	int	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
1106	150	8	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	1	DEF	$
30155	159	8	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
30155	159	8	BlockFieldMatrix.java	BlockFieldMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
30156	161	12	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
30156	161	12	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1107	162	16	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1107	162	16	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1107	162	16	BlockFieldMatrix.java	BlockFieldMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1107	162	16	BlockFieldMatrix.java	BlockFieldMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1107	162	16	BlockFieldMatrix.java	BlockFieldMatrix	blockData	T[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1108	166	16	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	0	DEF	$
30157	205	8	BlockFieldMatrix.java	toBlocksLayout	THIS	BlockFieldMatrix	0	NIL-FOR	i < rawData.$.length
30157	205	8	BlockFieldMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
30157	205	8	BlockFieldMatrix.java	toBlocksLayout	rawData	T[][]	0	NIL-FOR	i < $.length
1109	207	12	BlockFieldMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1109	207	12	BlockFieldMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
30158	216	8	BlockFieldMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
30158	216	8	BlockFieldMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
30159	220	12	BlockFieldMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
30159	220	12	BlockFieldMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
30160	231	16	BlockFieldMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
30160	231	16	BlockFieldMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
30161	265	8	BlockFieldMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
30161	265	8	BlockFieldMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
30162	269	12	BlockFieldMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
30162	269	12	BlockFieldMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
30163	295	8	BlockFieldMatrix.java	copy	THIS	BlockFieldMatrix	0	NIL-FOR	i < $.blocks.$.length
30163	295	8	BlockFieldMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
30164	316	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
30164	316	12	BlockFieldMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
30164	316	12	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
30165	317	16	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
30165	317	16	BlockFieldMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
30165	317	16	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
30166	327	20	BlockFieldMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
30166	327	20	BlockFieldMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
30167	328	24	BlockFieldMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
30167	328	24	BlockFieldMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
30168	359	8	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
30168	359	8	BlockFieldMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
30168	359	8	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
30169	363	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
30169	363	12	BlockFieldMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
30169	363	12	BlockFieldMatrix.java	add	outBlock	T[]	0	NIL-FOR	k < $.length
30170	385	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
30170	385	12	BlockFieldMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
30170	385	12	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
30171	386	16	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
30171	386	16	BlockFieldMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
30171	386	16	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
30172	396	20	BlockFieldMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
30172	396	20	BlockFieldMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
30173	397	24	BlockFieldMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
30173	397	24	BlockFieldMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
30174	427	8	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
30174	427	8	BlockFieldMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
30174	427	8	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
30175	431	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
30175	431	12	BlockFieldMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
30175	431	12	BlockFieldMatrix.java	subtract	outBlock	T[]	0	NIL-FOR	k < $.length
30176	445	8	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
30176	445	8	BlockFieldMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
30176	445	8	BlockFieldMatrix.java	scalarAdd	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
30177	448	12	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
30177	448	12	BlockFieldMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
30177	448	12	BlockFieldMatrix.java	scalarAdd	outBlock	T[]	0	NIL-FOR	k < $.length
30178	463	8	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
30178	463	8	BlockFieldMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
30178	463	8	BlockFieldMatrix.java	scalarMultiply	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
30179	466	12	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
30179	466	12	BlockFieldMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
30179	466	12	BlockFieldMatrix.java	scalarMultiply	outBlock	T[]	0	NIL-FOR	k < $.length
30180	489	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
30180	489	12	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
30180	489	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
30181	494	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
30181	494	16	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
30181	494	16	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
30182	503	20	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
30182	503	20	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
30183	508	24	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
30183	508	24	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
30184	511	28	BlockFieldMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
30184	511	28	BlockFieldMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
30185	514	32	BlockFieldMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
30185	514	32	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
30186	552	8	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
30186	552	8	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
30186	552	8	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
30187	557	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
30187	557	12	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
30187	557	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
30188	567	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
30188	567	16	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
30189	572	20	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
30189	572	20	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
30190	575	24	BlockFieldMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
30190	575	24	BlockFieldMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
30191	579	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
30191	579	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
30192	588	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
30192	588	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
30193	613	8	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
30193	613	8	BlockFieldMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
30194	618	12	BlockFieldMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
30194	618	12	BlockFieldMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
30195	622	16	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
30195	622	16	BlockFieldMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
30196	654	8	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
30196	654	8	BlockFieldMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
30196	654	8	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
30197	657	12	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
30197	657	12	BlockFieldMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
30197	657	12	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
1110	668	16	BlockFieldMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1111	670	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1112	702	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
30198	752	8	BlockFieldMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
30198	752	8	BlockFieldMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1113	765	8	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1114	772	12	BlockFieldMatrix.java	setSubMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1114	772	12	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
30199	784	8	BlockFieldMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
30199	784	8	BlockFieldMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
30200	790	12	BlockFieldMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
30200	790	12	BlockFieldMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
30201	799	16	BlockFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
30201	799	16	BlockFieldMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
30202	821	8	BlockFieldMatrix.java	getRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
30202	821	8	BlockFieldMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1115	825	12	BlockFieldMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1115	825	12	BlockFieldMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1116	864	8	BlockFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1116	864	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1116	864	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
30203	877	8	BlockFieldMatrix.java	setRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
30203	877	8	BlockFieldMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1117	881	12	BlockFieldMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1117	881	12	BlockFieldMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
30204	906	8	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
30204	906	8	BlockFieldMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
30205	909	12	BlockFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
30205	909	12	BlockFieldMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1118	910	16	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	DEF	outIndex >= outBlock.$.length
1118	910	16	BlockFieldMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1118	910	16	BlockFieldMatrix.java	getColumnMatrix	outBlock	T[]	0	DEF	outIndex >= $.length
1119	946	8	BlockFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1119	946	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1119	946	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
30206	960	8	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
30206	960	8	BlockFieldMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
30207	963	12	BlockFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
30207	963	12	BlockFieldMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1120	964	16	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	DEF	mIndex >= mBlock.$.length
1120	964	16	BlockFieldMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1120	964	16	BlockFieldMatrix.java	setColumnMatrix	mBlock	T[]	0	DEF	mIndex >= $.length
30208	983	8	BlockFieldMatrix.java	getRowVector	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
30208	983	8	BlockFieldMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
30209	1014	8	BlockFieldMatrix.java	getColumnVector	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
30209	1014	8	BlockFieldMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
30210	1017	12	BlockFieldMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
30210	1017	12	BlockFieldMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
30211	1045	8	BlockFieldMatrix.java	getRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
30211	1045	8	BlockFieldMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1121	1060	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1121	1060	8	BlockFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1121	1060	8	BlockFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
30212	1068	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
30212	1068	8	BlockFieldMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
30213	1087	8	BlockFieldMatrix.java	getColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
30213	1087	8	BlockFieldMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
30214	1090	12	BlockFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
30214	1090	12	BlockFieldMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1122	1103	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1122	1103	8	BlockFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1122	1103	8	BlockFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
30215	1112	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
30215	1112	8	BlockFieldMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
30216	1115	12	BlockFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
30216	1115	12	BlockFieldMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
30217	1188	8	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockColumns
30217	1188	8	BlockFieldMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
30218	1189	12	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockRows
30218	1189	12	BlockFieldMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
30219	1199	16	BlockFieldMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
30219	1199	16	BlockFieldMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
30220	1202	20	BlockFieldMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
30220	1202	20	BlockFieldMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1123	1233	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.columns
1123	1233	8	BlockFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != columns
30221	1240	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
30221	1240	8	BlockFieldMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
30222	1243	12	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
30222	1243	12	BlockFieldMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
30223	1248	16	BlockFieldMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
30223	1248	16	BlockFieldMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
30224	1251	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
30224	1251	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
30225	1260	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
30225	1260	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1124	1275	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.rows
1124	1275	8	BlockFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != rows
30226	1282	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
30226	1282	8	BlockFieldMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
30227	1289	12	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
30227	1289	12	BlockFieldMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
30228	1293	16	BlockFieldMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
30228	1293	16	BlockFieldMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
30229	1297	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
30229	1297	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
30230	1306	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
30230	1306	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
30231	1322	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
30231	1322	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
30232	1325	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
30232	1325	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
30233	1326	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
30233	1326	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
30234	1332	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
30234	1332	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
30235	1346	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
30235	1346	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
30236	1349	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
30236	1349	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
30237	1350	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
30237	1350	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
30238	1356	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
30238	1356	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
30239	1373	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
30239	1373	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
30240	1377	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
30240	1377	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
30241	1378	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
30241	1378	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
30242	1385	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
30242	1385	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
30243	1402	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
30243	1402	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
30244	1406	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
30244	1406	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
30245	1407	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
30245	1407	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
30246	1414	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
30246	1414	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
30247	1429	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
30247	1429	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
30248	1432	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
30248	1432	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
30249	1437	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
30249	1437	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
30250	1438	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
30250	1438	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
30251	1454	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
30251	1454	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
30252	1457	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
30252	1457	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
30253	1462	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
30253	1462	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
30254	1463	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
30254	1463	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
30255	1481	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
30255	1481	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
30256	1485	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
30256	1485	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
30257	1491	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
30257	1491	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
30258	1493	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
30258	1493	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
30259	1510	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
30259	1510	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
30260	1514	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
30260	1514	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
30261	1520	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
30261	1520	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
30262	1522	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
30262	1522	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
1374	147	8	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	1	DEF	$
30603	156	8	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
30603	156	8	BlockRealMatrix.java	BlockRealMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
30604	158	12	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
30604	158	12	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1375	159	16	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1375	159	16	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1375	159	16	BlockRealMatrix.java	BlockRealMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1375	159	16	BlockRealMatrix.java	BlockRealMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1375	159	16	BlockRealMatrix.java	BlockRealMatrix	blockData	double[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1376	163	16	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	0	DEF	$
30605	198	8	BlockRealMatrix.java	toBlocksLayout	THIS	BlockRealMatrix	0	NIL-FOR	i < rawData.$.length
30605	198	8	BlockRealMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
30605	198	8	BlockRealMatrix.java	toBlocksLayout	rawData	double[][]	0	NIL-FOR	i < $.length
1377	200	12	BlockRealMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1377	200	12	BlockRealMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
30606	208	8	BlockRealMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
30606	208	8	BlockRealMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
30607	212	12	BlockRealMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
30607	212	12	BlockRealMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
30608	223	16	BlockRealMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
30608	223	16	BlockRealMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
30609	252	8	BlockRealMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
30609	252	8	BlockRealMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
30610	256	12	BlockRealMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
30610	256	12	BlockRealMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
30611	281	8	BlockRealMatrix.java	copy	THIS	BlockRealMatrix	0	NIL-FOR	i < $.blocks.$.length
30611	281	8	BlockRealMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
30612	301	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
30612	301	12	BlockRealMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
30612	301	12	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
30613	302	16	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
30613	302	16	BlockRealMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
30613	302	16	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
30614	312	20	BlockRealMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
30614	312	20	BlockRealMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
30615	313	24	BlockRealMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
30615	313	24	BlockRealMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
30616	342	8	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
30616	342	8	BlockRealMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
30616	342	8	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
30617	346	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
30617	346	12	BlockRealMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
30617	346	12	BlockRealMatrix.java	add	outBlock	double[]	0	NIL-FOR	k < $.length
30618	367	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
30618	367	12	BlockRealMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
30618	367	12	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
30619	368	16	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
30619	368	16	BlockRealMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
30619	368	16	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
30620	378	20	BlockRealMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
30620	378	20	BlockRealMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
30621	379	24	BlockRealMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
30621	379	24	BlockRealMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
30622	408	8	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
30622	408	8	BlockRealMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
30622	408	8	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
30623	412	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
30623	412	12	BlockRealMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
30623	412	12	BlockRealMatrix.java	subtract	outBlock	double[]	0	NIL-FOR	k < $.length
30624	427	8	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
30624	427	8	BlockRealMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
30624	427	8	BlockRealMatrix.java	scalarAdd	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
30625	430	12	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
30625	430	12	BlockRealMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
30625	430	12	BlockRealMatrix.java	scalarAdd	outBlock	double[]	0	NIL-FOR	k < $.length
30626	444	8	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
30626	444	8	BlockRealMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
30626	444	8	BlockRealMatrix.java	scalarMultiply	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
30627	447	12	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
30627	447	12	BlockRealMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
30627	447	12	BlockRealMatrix.java	scalarMultiply	outBlock	double[]	0	NIL-FOR	k < $.length
30628	468	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
30628	468	12	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
30628	468	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
30629	472	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
30629	472	16	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
30629	472	16	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
30630	480	20	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
30630	480	20	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
30631	485	24	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
30631	485	24	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
30632	488	28	BlockRealMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
30632	488	28	BlockRealMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
30633	491	32	BlockRealMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
30633	491	32	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
30634	525	8	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
30634	525	8	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
30634	525	8	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
30635	530	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
30635	530	12	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
30635	530	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
30636	540	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
30636	540	16	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
30637	545	20	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
30637	545	20	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
30638	548	24	BlockRealMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
30638	548	24	BlockRealMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
30639	552	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
30639	552	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
30640	560	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
30640	560	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
30641	583	8	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
30641	583	8	BlockRealMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
30642	588	12	BlockRealMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
30642	588	12	BlockRealMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
30643	592	16	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
30643	592	16	BlockRealMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
30644	610	8	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
30644	610	8	BlockRealMatrix.java	getNorm	jBlock	int	0	NIL-FOR	$ < blockColumns
30645	613	12	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
30645	613	12	BlockRealMatrix.java	getNorm	iBlock	int	0	NIL-FOR	$ < blockRows
30646	616	16	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
30646	616	16	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
30647	618	20	BlockRealMatrix.java	getNorm	i	int	0	NIL-FOR	$ < iHeight
30647	618	20	BlockRealMatrix.java	getNorm	iHeight	int	0	NIL-FOR	i < $
30648	624	12	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
30648	624	12	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
30649	635	8	BlockRealMatrix.java	getFrobeniusNorm	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.$.length
30649	635	8	BlockRealMatrix.java	getFrobeniusNorm	blockIndex	int	0	NIL-FOR	$ < blocks.length
30650	662	8	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
30650	662	8	BlockRealMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
30650	662	8	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
30651	665	12	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
30651	665	12	BlockRealMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
30651	665	12	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
1378	676	16	BlockRealMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1379	678	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1380	710	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
30652	760	8	BlockRealMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
30652	760	8	BlockRealMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1381	774	8	BlockRealMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1382	781	12	BlockRealMatrix.java	setSubMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1382	781	12	BlockRealMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
30653	793	8	BlockRealMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
30653	793	8	BlockRealMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
30654	799	12	BlockRealMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
30654	799	12	BlockRealMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
30655	808	16	BlockRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
30655	808	16	BlockRealMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
30656	830	8	BlockRealMatrix.java	getRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
30656	830	8	BlockRealMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1383	834	12	BlockRealMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1383	834	12	BlockRealMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1384	873	8	BlockRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1384	873	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
1384	873	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
30657	886	8	BlockRealMatrix.java	setRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
30657	886	8	BlockRealMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1385	890	12	BlockRealMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1385	890	12	BlockRealMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
30658	915	8	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
30658	915	8	BlockRealMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
30659	918	12	BlockRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
30659	918	12	BlockRealMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1386	919	16	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	DEF	outIndex >= outBlock.$.length
1386	919	16	BlockRealMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1386	919	16	BlockRealMatrix.java	getColumnMatrix	outBlock	double[]	0	DEF	outIndex >= $.length
1387	955	8	BlockRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1387	955	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
1387	955	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
30660	969	8	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
30660	969	8	BlockRealMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
30661	972	12	BlockRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
30661	972	12	BlockRealMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1388	973	16	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	DEF	mIndex >= mBlock.$.length
1388	973	16	BlockRealMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1388	973	16	BlockRealMatrix.java	setColumnMatrix	mBlock	double[]	0	DEF	mIndex >= $.length
30662	992	8	BlockRealMatrix.java	getRowVector	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
30662	992	8	BlockRealMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
30663	1023	8	BlockRealMatrix.java	getColumnVector	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
30663	1023	8	BlockRealMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
30664	1026	12	BlockRealMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
30664	1026	12	BlockRealMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
30665	1054	8	BlockRealMatrix.java	getRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
30665	1054	8	BlockRealMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1389	1069	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1389	1069	8	BlockRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1389	1069	8	BlockRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
30666	1077	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
30666	1077	8	BlockRealMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
30667	1096	8	BlockRealMatrix.java	getColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
30667	1096	8	BlockRealMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
30668	1099	12	BlockRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
30668	1099	12	BlockRealMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1390	1112	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1390	1112	8	BlockRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1390	1112	8	BlockRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
30669	1121	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
30669	1121	8	BlockRealMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
30670	1124	12	BlockRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
30670	1124	12	BlockRealMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
30671	1183	8	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockColumns
30671	1183	8	BlockRealMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
30672	1184	12	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockRows
30672	1184	12	BlockRealMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
30673	1193	16	BlockRealMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
30673	1193	16	BlockRealMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
30674	1196	20	BlockRealMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
30674	1196	20	BlockRealMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1391	1225	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.columns
1391	1225	8	BlockRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != columns
30675	1231	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
30675	1231	8	BlockRealMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
30676	1234	12	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
30676	1234	12	BlockRealMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
30677	1239	16	BlockRealMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
30677	1239	16	BlockRealMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
30678	1242	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
30678	1242	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
30679	1250	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
30679	1250	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1392	1264	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.rows
1392	1264	8	BlockRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != rows
30680	1270	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
30680	1270	8	BlockRealMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
30681	1277	12	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
30681	1277	12	BlockRealMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
30682	1281	16	BlockRealMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
30682	1281	16	BlockRealMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
30683	1285	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
30683	1285	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
30684	1293	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
30684	1293	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
30685	1309	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
30685	1309	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
30686	1312	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
30686	1312	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
30687	1313	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
30687	1313	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
30688	1319	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
30688	1319	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
30689	1333	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
30689	1333	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
30690	1336	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
30690	1336	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
30691	1337	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
30691	1337	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
30692	1343	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
30692	1343	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
30693	1360	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
30693	1360	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
30694	1364	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
30694	1364	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
30695	1365	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
30695	1365	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
30696	1372	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
30696	1372	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
30697	1389	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
30697	1389	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
30698	1393	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
30698	1393	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
30699	1394	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
30699	1394	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
30700	1401	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
30700	1401	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
30701	1416	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
30701	1416	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
30702	1419	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
30702	1419	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
30703	1424	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
30703	1424	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
30704	1425	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
30704	1425	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
30705	1441	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
30705	1441	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
30706	1444	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
30706	1444	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
30707	1449	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
30707	1449	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
30708	1450	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
30708	1450	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
30709	1468	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
30709	1468	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
30710	1472	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
30710	1472	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
30711	1478	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
30711	1478	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
30712	1480	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
30712	1480	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
30713	1497	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
30713	1497	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
30714	1501	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
30714	1501	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
30715	1507	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
30715	1507	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
30716	1509	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
30716	1509	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
602	47	8	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute<S>	0	DEF	$.getPlusOutside() != null
603	50	8	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute<S>	0	DEF	$.getPlusInside() != null
1532	91	8	BracketFinder.java	BracketFinder	growLimit	double	0	NotStrictlyPositiveException	$ <= 0
1533	94	8	BracketFinder.java	BracketFinder	maxEvaluations	int	0	NotStrictlyPositiveException	$ <= 0
1534	118	8	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fA < fB : fA > fB
1534	118	8	BracketFinder.java	search	fA	double	0	DEF	isMinim ? $ < fB : $ > fB
1534	118	8	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fA < $ : fA > $
30881	134	8	BracketFinder.java	search	isMinim	boolean	0	NIL-WHILE	$ ? fC < fB : fC > fB
30881	134	8	BracketFinder.java	search	fB	double	0	NIL-WHILE	isMinim ? fC < $ : fC > $
30881	134	8	BracketFinder.java	search	fC	double	0	NIL-WHILE	isMinim ? $ < fB : $ > fB
1535	145	12	BracketFinder.java	search	w	double	1	DEF	($ - xC) * (xB - $) > 0
1535	145	12	BracketFinder.java	search	xC	double	1	DEF	(w - $) * (xB - w) > 0
1535	145	12	BracketFinder.java	search	xB	double	1	DEF	(w - xC) * ($ - w) > 0
1536	147	16	BracketFinder.java	search	fW	double	1	DEF	isMinim ? $ < fC : $ > fC
1536	147	16	BracketFinder.java	search	isMinim	boolean	1	DEF	$ ? fW < fC : fW > fC
1536	147	16	BracketFinder.java	search	fC	double	1	DEF	isMinim ? fW < $ : fW > $
1537	155	23	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ > fB : $ < fB
1537	155	23	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW > fB : fW < fB
1537	155	23	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fW > $ : fW < $
1538	164	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (wLim - xC) >= 0
1538	164	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * ($ - xC) >= 0
1538	164	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * (wLim - $) >= 0
1539	167	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (xC - $) > 0
1539	167	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * (xC - w) > 0
1539	167	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * ($ - w) > 0
1540	169	16	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ < fC : $ > fC
1540	169	16	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW < fC : fW > fC
1540	169	16	BracketFinder.java	search	fC	double	0	DEF	isMinim ? fW < $ : fW > $
1541	199	8	BracketFinder.java	search	THIS	BracketFinder	0	DEF	$.lo > $.hi
3165	83	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3166	103	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3167	125	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3168	155	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[1], 0.0, 1)
3169	162	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[0], 0.0, 1)
3170	169	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	1	DEF	$[0] * $[1] < 0
3171	179	12	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[2], 0.0, 1)
3172	184	12	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	1	DEF	$[1] * $[2] < 0
3173	213	12	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	MathInternalError:RET	FastMath.max(absYA, absYB) < $.getFunctionValueAccuracy()
3173	213	12	BracketingNthOrderBrentSolver.java	doSolve	xTol	double	0	MathInternalError:RET	(xB - xA) <= $
3173	213	12	BracketingNthOrderBrentSolver.java	doSolve	xA	double	0	MathInternalError:RET	(xB - $) <= xTol
3173	213	12	BracketingNthOrderBrentSolver.java	doSolve	absYA	double	0	MathInternalError:RET	FastMath.max($, absYB) < getFunctionValueAccuracy()
3173	213	12	BracketingNthOrderBrentSolver.java	doSolve	xB	double	0	MathInternalError:RET	($ - xA) <= xTol
3173	213	12	BracketingNthOrderBrentSolver.java	doSolve	absYB	double	0	MathInternalError:RET	FastMath.max(absYA, $) < getFunctionValueAccuracy()
3174	233	12	BracketingNthOrderBrentSolver.java	doSolve	agingA	int	1	DEF	$ >= MAXIMAL_AGING
3175	239	19	BracketingNthOrderBrentSolver.java	doSolve	agingB	int	1	DEF	$ >= MAXIMAL_AGING
31756	254	12	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	NIL-DOWHILE	Double.isNaN($)
31756	254	12	BracketingNthOrderBrentSolver.java	doSolve	start	int	0	NIL-DOWHILE	end - $ > 1
31756	254	12	BracketingNthOrderBrentSolver.java	doSolve	end	int	0	NIL-DOWHILE	$ - start > 1
3176	260	16	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	$ < xB
3176	260	16	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	$ > xA
3176	260	16	BracketingNthOrderBrentSolver.java	doSolve	xA	double	0	DEF	nextX > $
3176	260	16	BracketingNthOrderBrentSolver.java	doSolve	xB	double	0	DEF	nextX < $
3177	266	20	BracketingNthOrderBrentSolver.java	doSolve	start	int	1	DEF	signChangeIndex - $ >= end - signChangeIndex
3177	266	20	BracketingNthOrderBrentSolver.java	doSolve	end	int	1	DEF	signChangeIndex - start >= $ - signChangeIndex
3177	266	20	BracketingNthOrderBrentSolver.java	doSolve	signChangeIndex	int	1	DEF	$ - start >= end - $
3178	281	12	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	Double.isNaN($)
3179	290	12	BracketingNthOrderBrentSolver.java	doSolve	nextY	double	0	RET	Precision.equals($, 0.0, 1)
3180	296	12	BracketingNthOrderBrentSolver.java	doSolve	start	int	1	DEF	end - $ != nbPoints
3180	296	12	BracketingNthOrderBrentSolver.java	doSolve	end	int	1	DEF	$ - start != nbPoints
3180	296	12	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	1	DEF	$ > 2
3180	296	12	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	1	DEF	end - start != $
3181	305	20	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	DEF	nbPoints == x.$.length
3181	305	20	BracketingNthOrderBrentSolver.java	doSolve	x	double[]	0	DEF	nbPoints == $.length
3181	305	20	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	0	DEF	$ == x.length
3182	311	16	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	DEF	signChangeIndex >= (x.$.length + 1) / 2
3182	311	16	BracketingNthOrderBrentSolver.java	doSolve	x	double[]	0	DEF	signChangeIndex >= ($.length + 1) / 2
3182	311	16	BracketingNthOrderBrentSolver.java	doSolve	signChangeIndex	int	0	DEF	$ >= (x.length + 1) / 2
3183	329	12	BracketingNthOrderBrentSolver.java	doSolve	nextY	double	1	DEF	$ * yA <= 0
3183	329	12	BracketingNthOrderBrentSolver.java	doSolve	yA	double	1	DEF	nextY * $ <= 0
31757	371	8	BracketingNthOrderBrentSolver.java	guessX	i	int	0	NIL-FOR	$ < end - 1
31757	371	8	BracketingNthOrderBrentSolver.java	guessX	end	int	0	NIL-FOR	i < $ - 1
31758	373	12	BracketingNthOrderBrentSolver.java	guessX	j	int	0	NIL-FOR	$ > i
31758	373	12	BracketingNthOrderBrentSolver.java	guessX	i	int	0	NIL-FOR	j > $
31759	380	8	BracketingNthOrderBrentSolver.java	guessX	j	int	0	NIL-FOR	$ >= start
31759	380	8	BracketingNthOrderBrentSolver.java	guessX	start	int	0	NIL-FOR	j >= $
2946	77	8	BracketingNthOrderBrentSolverDFP.java	BracketingNthOrderBrentSolverDFP	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
2947	203	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[1].isZero()
2948	211	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[0].isZero()
2949	218	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	1	DEF	$[0].multiply($[1]).negativeOrNull()
2950	229	12	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[2].isZero()
2951	234	12	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	1	DEF	$[1].multiply($[2]).negativeOrNull()
2952	267	12	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	MathInternalError:RET	maxY.lessThan($.functionValueAccuracy)
2952	267	12	BracketingNthOrderBrentSolverDFP.java	solve	maxY	Dfp	0	MathInternalError:RET	$.lessThan(functionValueAccuracy)
2952	267	12	BracketingNthOrderBrentSolverDFP.java	solve	xTol	Dfp	0	MathInternalError:RET	xB.subtract(xA).subtract($).negativeOrNull()
2952	267	12	BracketingNthOrderBrentSolverDFP.java	solve	xA	Dfp	0	MathInternalError:RET	xB.subtract($).subtract(xTol).negativeOrNull()
2952	267	12	BracketingNthOrderBrentSolverDFP.java	solve	xB	Dfp	0	MathInternalError:RET	$.subtract(xA).subtract(xTol).negativeOrNull()
2953	288	12	BracketingNthOrderBrentSolverDFP.java	solve	agingA	int	1	DEF	$ >= MAXIMAL_AGING
2954	291	19	BracketingNthOrderBrentSolverDFP.java	solve	agingB	int	1	DEF	$ >= MAXIMAL_AGING
31658	303	12	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	NIL-DOWHILE	$.isNaN()
31658	303	12	BracketingNthOrderBrentSolverDFP.java	solve	start	int	0	NIL-DOWHILE	end - $ > 1
31658	303	12	BracketingNthOrderBrentSolverDFP.java	solve	end	int	0	NIL-DOWHILE	$ - start > 1
2955	309	16	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.lessThan(xB)
2955	309	16	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.greaterThan(xA)
2955	309	16	BracketingNthOrderBrentSolverDFP.java	solve	xA	Dfp	0	DEF	nextX.greaterThan($)
2955	309	16	BracketingNthOrderBrentSolverDFP.java	solve	xB	Dfp	0	DEF	nextX.lessThan($)
2956	315	20	BracketingNthOrderBrentSolverDFP.java	solve	start	int	1	DEF	signChangeIndex - $ >= end - signChangeIndex
2956	315	20	BracketingNthOrderBrentSolverDFP.java	solve	end	int	1	DEF	signChangeIndex - start >= $ - signChangeIndex
2956	315	20	BracketingNthOrderBrentSolverDFP.java	solve	signChangeIndex	int	1	DEF	$ - start >= end - $
2957	330	12	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.isNaN()
2958	340	12	BracketingNthOrderBrentSolverDFP.java	solve	nextY	Dfp	0	RET	$.isZero()
2959	346	12	BracketingNthOrderBrentSolverDFP.java	solve	start	int	1	DEF	end - $ != nbPoints
2959	346	12	BracketingNthOrderBrentSolverDFP.java	solve	end	int	1	DEF	$ - start != nbPoints
2959	346	12	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	1	DEF	end - start != $
2959	346	12	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	1	DEF	$ > 2
2960	355	20	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	DEF	nbPoints == x.$.length
2960	355	20	BracketingNthOrderBrentSolverDFP.java	solve	x	Dfp[]	0	DEF	nbPoints == $.length
2960	355	20	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	0	DEF	$ == x.length
2961	361	16	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	DEF	signChangeIndex >= (x.$.length + 1) / 2
2961	361	16	BracketingNthOrderBrentSolverDFP.java	solve	x	Dfp[]	0	DEF	signChangeIndex >= ($.length + 1) / 2
2961	361	16	BracketingNthOrderBrentSolverDFP.java	solve	signChangeIndex	int	0	DEF	$ >= (x.length + 1) / 2
2962	379	12	BracketingNthOrderBrentSolverDFP.java	solve	nextY	Dfp	1	DEF	$.multiply(yA).negativeOrNull()
2962	379	12	BracketingNthOrderBrentSolverDFP.java	solve	yA	Dfp	1	DEF	nextY.multiply($).negativeOrNull()
31659	421	8	BracketingNthOrderBrentSolverDFP.java	guessX	i	int	0	NIL-FOR	$ < end - 1
31659	421	8	BracketingNthOrderBrentSolverDFP.java	guessX	end	int	0	NIL-FOR	i < $ - 1
31660	423	12	BracketingNthOrderBrentSolverDFP.java	guessX	j	int	0	NIL-FOR	$ > i
31660	423	12	BracketingNthOrderBrentSolverDFP.java	guessX	i	int	0	NIL-FOR	j > $
31661	430	8	BracketingNthOrderBrentSolverDFP.java	guessX	j	int	0	NIL-FOR	$ >= start
31661	430	8	BracketingNthOrderBrentSolverDFP.java	guessX	start	int	0	NIL-FOR	j >= $
1542	77	8	BrentOptimizer.java	BrentOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
1543	80	8	BrentOptimizer.java	BrentOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
1544	120	8	BrentOptimizer.java	doOptimize	lo	double	1	DEF	$ < hi
1544	120	8	BrentOptimizer.java	doOptimize	hi	double	1	DEF	lo < $
1545	134	8	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1546	152	12	BrentOptimizer.java	doOptimize	stop	boolean	1	RET	$
1547	158	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(e) > $
1547	158	16	BrentOptimizer.java	doOptimize	e	double	1	DEF	FastMath.abs($) > tol1
1548	164	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	$ > 0
1549	173	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ > q * (a - x)
1549	173	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	FastMath.abs($) < FastMath.abs(0.5 * q * r)
1549	173	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ < q * (b - x)
1549	173	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p > $ * (a - x)
1549	173	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * $ * r)
1549	173	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p < $ * (b - x)
1549	173	20	BrentOptimizer.java	doOptimize	r	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * q * $)
1549	173	20	BrentOptimizer.java	doOptimize	a	double	1	DEF	p > q * ($ - x)
1549	173	20	BrentOptimizer.java	doOptimize	b	double	1	DEF	p < q * ($ - x)
1549	173	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p > q * (a - $)
1549	173	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p < q * (b - $)
1550	181	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	b - $ < tol2
1550	181	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	$ - a < tol2
1550	181	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	b - u < $
1550	181	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	u - a < $
1550	181	24	BrentOptimizer.java	doOptimize	a	double	0	DEF	u - $ < tol2
1550	181	24	BrentOptimizer.java	doOptimize	b	double	0	DEF	$ - u < tol2
1551	182	28	BrentOptimizer.java	doOptimize	m	double	1	DEF	x <= $
1551	182	28	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ <= m
1552	190	24	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1552	190	24	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1553	199	20	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1553	199	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1554	208	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(d) < $
1554	208	16	BrentOptimizer.java	doOptimize	d	double	1	DEF	FastMath.abs($) < tol1
1555	209	20	BrentOptimizer.java	doOptimize	d	double	1	DEF	$ >= 0
1556	219	16	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1557	224	16	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fx
1557	224	16	BrentOptimizer.java	doOptimize	fx	double	1	DEF	fu <= $
1558	225	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1558	225	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1559	237	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1559	237	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1560	242	20	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fw
1560	242	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	Precision.equals(w, $)
1560	242	20	BrentOptimizer.java	doOptimize	w	double	1	DEF	Precision.equals($, x)
1560	242	20	BrentOptimizer.java	doOptimize	fw	double	1	DEF	fu <= $
1561	248	27	BrentOptimizer.java	doOptimize	fu	double	0	DEF	$ <= fv
1561	248	27	BrentOptimizer.java	doOptimize	x	double	0	DEF	Precision.equals(v, $)
1561	248	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, x)
1561	248	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, w)
1561	248	27	BrentOptimizer.java	doOptimize	w	double	0	DEF	Precision.equals(v, $)
1561	248	27	BrentOptimizer.java	doOptimize	fv	double	0	DEF	fu <= $
1562	260	16	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$ != null
1563	261	20	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$.converged(iter, previous, current)
1563	261	20	BrentOptimizer.java	doOptimize	previous	UnivariatePointValuePair	0	RET	checker.converged(iter, $, current)
1563	261	20	BrentOptimizer.java	doOptimize	current	UnivariatePointValuePair	0	RET	checker.converged(iter, previous, $)
1563	261	20	BrentOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
3219	92	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
3219	92	8	BrentSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3220	98	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
3220	98	8	BrentSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3221	103	8	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
3221	103	8	BrentSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
3222	109	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
3222	109	8	BrentSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3223	114	8	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
3223	114	8	BrentSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
3224	152	12	BrentSolver.java	brent	fb	double	0	DEF	FastMath.abs(fc) < FastMath.abs($)
3224	152	12	BrentSolver.java	brent	fc	double	0	DEF	FastMath.abs($) < FastMath.abs(fb)
3225	164	12	BrentSolver.java	brent	tol	double	0	RET	FastMath.abs(m) <= $
3225	164	12	BrentSolver.java	brent	m	double	0	RET	FastMath.abs($) <= tol
3225	164	12	BrentSolver.java	brent	fb	double	0	RET	Precision.equals($, 0)
3226	168	12	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(e) < $
3226	168	12	BrentSolver.java	brent	fa	double	1	DEF	FastMath.abs($) <= FastMath.abs(fb)
3226	168	12	BrentSolver.java	brent	fb	double	1	DEF	FastMath.abs(fa) <= FastMath.abs($)
3226	168	12	BrentSolver.java	brent	e	double	1	DEF	FastMath.abs($) < tol
3227	180	16	BrentSolver.java	brent	a	double	1	DEF	$ == c
3227	180	16	BrentSolver.java	brent	c	double	1	DEF	a == $
3228	191	16	BrentSolver.java	brent	p	double	1	DEF	$ > 0
3229	198	16	BrentSolver.java	brent	s	double	1	DEF	p >= FastMath.abs(0.5 * $ * q)
3229	198	16	BrentSolver.java	brent	p	double	1	DEF	$ >= 1.5 * m * q - FastMath.abs(tol * q)
3229	198	16	BrentSolver.java	brent	p	double	1	DEF	$ >= FastMath.abs(0.5 * s * q)
3229	198	16	BrentSolver.java	brent	q	double	1	DEF	p >= 1.5 * m * $ - FastMath.abs(tol * $)
3229	198	16	BrentSolver.java	brent	q	double	1	DEF	p >= FastMath.abs(0.5 * s * $)
3229	198	16	BrentSolver.java	brent	tol	double	1	DEF	p >= 1.5 * m * q - FastMath.abs($ * q)
3229	198	16	BrentSolver.java	brent	m	double	1	DEF	p >= 1.5 * $ * q - FastMath.abs(tol * q)
3230	212	12	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(d) > $
3230	212	12	BrentSolver.java	brent	d	double	1	DEF	FastMath.abs($) > tol
3231	214	19	BrentSolver.java	brent	m	double	1	DEF	$ > 0
3232	220	12	BrentSolver.java	brent	fb	double	0	DEF	$ <= 0
3232	220	12	BrentSolver.java	brent	fb	double	0	DEF	$ > 0
3232	220	12	BrentSolver.java	brent	fc	double	0	DEF	$ > 0
3232	220	12	BrentSolver.java	brent	fc	double	0	DEF	$ <= 0
30996	364	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	$.iterations <= $.maxIterations
30997	370	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	k < $.lambda
30997	370	16	CMAESOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < lambda
30998	372	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.checkFeasableCount+1
30998	372	20	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < checkFeasableCount+1
1689	373	24	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
1690	380	24	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.checkFeasableCount
1690	380	24	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= checkFeasableCount
1690	380	24	CMAESOptimizer.java	doOptimize	arxk	RealMatrix	0	DEF	fitfun.isFeasible($.getColumn(0))
1690	380	24	CMAESOptimizer.java	doOptimize	fitfun	FitnessFunction	0	DEF	$.isFeasible(arxk.getColumn(0))
1691	402	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
1692	411	16	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	bestValue > $
1692	411	16	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ > bestFitness
1693	417	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
1693	417	20	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
1694	418	24	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, optimum, lastResult)
1694	418	24	CMAESOptimizer.java	doOptimize	optimum	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
1694	418	24	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, optimum, $)
1695	425	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.stopFitness != 0
1696	426	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestFitness < ($.isMinimize ? $.stopFitness : -$.stopFitness)
1696	426	20	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	$ < (isMinimize ? stopFitness : -stopFitness)
30999	432	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
30999	432	16	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
1697	433	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > $.stopTolX
1697	433	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma*(Math.max(Math.abs(pcCol[$]), sqrtDiagC[$])) > stopTolX
1697	433	20	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma*(Math.max(Math.abs(pcCol[i]), $[i])) > stopTolX
1697	433	20	CMAESOptimizer.java	doOptimize	pcCol	double[]	0	DEF	sigma*(Math.max(Math.abs($[i]), sqrtDiagC[i])) > stopTolX
1698	436	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.dimension-1
1698	436	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= dimension-1
31000	440	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
31000	440	16	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
1699	441	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma*sqrtDiagC[i] > $.stopTolUpX
1699	441	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma*sqrtDiagC[$] > stopTolUpX
1699	441	20	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma*$[i] > stopTolUpX
1700	447	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
1700	447	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, bestFitness) < $.stopTolFun
1700	447	16	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
1700	447	16	CMAESOptimizer.java	doOptimize	worstFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
1700	447	16	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
1700	447	16	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
1701	451	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > $.fitnessHistory.$.length
1701	451	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	historyWorst-historyBest < $.stopTolHistFun
1701	451	16	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	historyWorst-$ < stopTolHistFun
1701	451	16	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	$-historyBest < stopTolHistFun
1702	456	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.max($.diagD)/$.min($.diagD) > 1e7
1703	460	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
1704	464	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, current, lastResult)
1704	464	20	CMAESOptimizer.java	doOptimize	current	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
1704	464	20	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
1704	464	20	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, current, $)
1705	471	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestValue == fitness[arindex[(int)(0.1+$.lambda/4.)]]
1705	471	16	CMAESOptimizer.java	doOptimize	fitness	double[]	0	DEF	bestValue == $[arindex[(int)(0.1+lambda/4.)]]
1705	471	16	CMAESOptimizer.java	doOptimize	arindex	int[]	0	DEF	bestValue == fitness[$[(int)(0.1+lambda/4.)]]
1705	471	16	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ == fitness[arindex[(int)(0.1+lambda/4.)]]
1706	474	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
1706	474	16	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
1706	474	16	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
1706	474	16	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
1707	481	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.generateStatistics
31001	501	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < lB.$.length
31001	501	8	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < lB.length
31001	501	8	CMAESOptimizer.java	checkParameters	lB	double[]	0	NIL-FOR	i < $.length
1708	502	12	CMAESOptimizer.java	checkParameters	i	int	0	DEF	Double.isInfinite(lB[$])
1708	502	12	CMAESOptimizer.java	checkParameters	i	int	0	DEF	Double.isInfinite(uB[$])
1708	502	12	CMAESOptimizer.java	checkParameters	lB	double[]	0	DEF	Double.isInfinite($[i])
1708	502	12	CMAESOptimizer.java	checkParameters	uB	double[]	0	DEF	Double.isInfinite($[i])
1709	510	8	CMAESOptimizer.java	checkParameters	hasFiniteBounds	boolean	1	MathUnsupportedOperationException	$
31002	511	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < lB.$.length
31002	511	12	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < lB.length
31002	511	12	CMAESOptimizer.java	checkParameters	lB	double[]	0	NIL-FOR	i < $.length
1710	512	16	CMAESOptimizer.java	checkParameters	i	int	0	DEF	Double.isInfinite(uB[$])
1710	512	16	CMAESOptimizer.java	checkParameters	i	int	0	DEF	Double.isInfinite(lB[$])
1710	512	16	CMAESOptimizer.java	checkParameters	lB	double[]	0	DEF	Double.isInfinite($[i])
1710	512	16	CMAESOptimizer.java	checkParameters	uB	double[]	0	DEF	Double.isInfinite($[i])
1711	519	12	CMAESOptimizer.java	checkParameters	hasInfiniteBounds	boolean	1	MathUnsupportedOperationException	$
1712	534	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma != null
1713	535	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	DimensionMismatchException	$.inputSigma.$.length != init.$.length
1713	535	12	CMAESOptimizer.java	checkParameters	init	double[]	0	DimensionMismatchException	inputSigma.length != $.length
31003	538	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < init.$.length
31003	538	12	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < init.length
31003	538	12	CMAESOptimizer.java	checkParameters	init	double[]	0	NIL-FOR	i < $.length
1714	539	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NotPositiveException	$.inputSigma[i] < 0
1714	539	16	CMAESOptimizer.java	checkParameters	i	int	0	NotPositiveException	inputSigma[$] < 0
1715	542	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.boundaries != null
1716	543	20	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma[i] > $.boundaries[1][i] - $.boundaries[0][i]
1716	543	20	CMAESOptimizer.java	checkParameters	i	int	0	OutOfRangeException	inputSigma[$] > boundaries[1][$] - boundaries[0][$]
1717	557	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	DEF	$.lambda <= 0
31004	562	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < guess.$.length
31004	562	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < guess.length
31004	562	8	CMAESOptimizer.java	initializeCMA	guess	double[]	0	NIL-FOR	i < $.length
31005	581	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.mu
31005	581	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < mu
31006	620	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.historySize
31006	620	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < historySize
1718	642	8	CMAESOptimizer.java	updateEvolutionPaths	hsig	boolean	0	DEF	$
1719	670	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.iterations > $.diagonalOnly
1719	670	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.diagonalOnly > 1
1720	693	8	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu > 0
1721	701	12	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	1	DEF	$.isActiveCMA
1722	725	16	CMAESOptimizer.java	updateCovariance	negcovMax	double	0	DEF	negccov > $
1722	725	16	CMAESOptimizer.java	updateCovariance	negccov	double	0	DEF	$ > negcovMax
1723	764	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	($.iterations % 1. / ($.ccov1 + $.ccovmu + negccov) / $.dimension / 10.) < 1.
1723	764	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu + negccov > 0
1723	764	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1.
1723	764	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	ccov1 + ccovmu + $ > 0
1724	773	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.min($.diagD) <= 0
31007	774	16	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
31007	774	16	CMAESOptimizer.java	updateBD	i	int	0	NIL-FOR	$ < dimension
1725	775	20	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.diagD.getEntry(i, 0) < 0
1725	775	20	CMAESOptimizer.java	updateBD	i	int	0	DEF	diagD.getEntry($, 0) < 0
1726	783	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.max($.diagD) > 1e14 * $.min($.diagD)
31008	801	8	CMAESOptimizer.java	push	i	int	0	NIL-FOR	$ > 0
31009	815	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
31009	815	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
31009	815	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
31010	820	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
31010	820	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
31010	820	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
31011	1013	8	CMAESOptimizer.java	log	r	int	0	NIL-FOR	$ < m.getRowDimension()
31011	1013	8	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
31012	1014	12	CMAESOptimizer.java	log	c	int	0	NIL-FOR	$ < m.getColumnDimension()
31012	1014	12	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
31013	1028	8	CMAESOptimizer.java	sqrt	r	int	0	NIL-FOR	$ < m.getRowDimension()
31013	1028	8	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
31014	1029	12	CMAESOptimizer.java	sqrt	c	int	0	NIL-FOR	$ < m.getColumnDimension()
31014	1029	12	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
31015	1042	8	CMAESOptimizer.java	square	r	int	0	NIL-FOR	$ < m.getRowDimension()
31015	1042	8	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
31016	1043	12	CMAESOptimizer.java	square	c	int	0	NIL-FOR	$ < m.getColumnDimension()
31016	1043	12	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
31017	1058	8	CMAESOptimizer.java	times	r	int	0	NIL-FOR	$ < m.getRowDimension()
31017	1058	8	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
31018	1059	12	CMAESOptimizer.java	times	c	int	0	NIL-FOR	$ < m.getColumnDimension()
31018	1059	12	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
31019	1073	8	CMAESOptimizer.java	divide	r	int	0	NIL-FOR	$ < m.getRowDimension()
31019	1073	8	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
31020	1074	12	CMAESOptimizer.java	divide	c	int	0	NIL-FOR	$ < m.getColumnDimension()
31020	1074	12	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
31021	1088	8	CMAESOptimizer.java	selectColumns	r	int	0	NIL-FOR	$ < m.getRowDimension()
31021	1088	8	CMAESOptimizer.java	selectColumns	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
31022	1089	12	CMAESOptimizer.java	selectColumns	THIS	CMAESOptimizer	0	NIL-FOR	c < cols.$.length
31022	1089	12	CMAESOptimizer.java	selectColumns	c	int	0	NIL-FOR	$ < cols.length
31022	1089	12	CMAESOptimizer.java	selectColumns	cols	int[]	0	NIL-FOR	c < $.length
31023	1103	8	CMAESOptimizer.java	triu	r	int	0	NIL-FOR	$ < m.getRowDimension()
31023	1103	8	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
31024	1104	12	CMAESOptimizer.java	triu	c	int	0	NIL-FOR	$ < m.getColumnDimension()
31024	1104	12	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
31025	1117	8	CMAESOptimizer.java	sumRows	c	int	0	NIL-FOR	$ < m.getColumnDimension()
31025	1117	8	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
31026	1119	12	CMAESOptimizer.java	sumRows	r	int	0	NIL-FOR	$ < m.getRowDimension()
31026	1119	12	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
1727	1133	8	CMAESOptimizer.java	diag	m	RealMatrix	1	RET	$.getColumnDimension() == 1
31027	1135	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getRowDimension()
31027	1135	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
31028	1141	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getColumnDimension()
31028	1141	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
31029	1157	8	CMAESOptimizer.java	copyColumn	i	int	0	NIL-FOR	$ < m1.getRowDimension()
31029	1157	8	CMAESOptimizer.java	copyColumn	m1	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
31030	1169	8	CMAESOptimizer.java	ones	r	int	0	NIL-FOR	$ < n
31030	1169	8	CMAESOptimizer.java	ones	n	int	0	NIL-FOR	r < $
31031	1182	8	CMAESOptimizer.java	eye	r	int	0	NIL-FOR	$ < n
31031	1182	8	CMAESOptimizer.java	eye	n	int	0	NIL-FOR	r < $
1728	1183	12	CMAESOptimizer.java	eye	r	int	0	DEF	$ < m
1728	1183	12	CMAESOptimizer.java	eye	m	int	0	DEF	r < $
31032	1209	8	CMAESOptimizer.java	repmat	r	int	0	NIL-FOR	$ < n * rd
31032	1209	8	CMAESOptimizer.java	repmat	rd	int	0	NIL-FOR	r < n * $
31032	1209	8	CMAESOptimizer.java	repmat	n	int	0	NIL-FOR	r < $ * rd
31033	1210	12	CMAESOptimizer.java	repmat	c	int	0	NIL-FOR	$ < m * cd
31033	1210	12	CMAESOptimizer.java	repmat	cd	int	0	NIL-FOR	c < m * $
31033	1210	12	CMAESOptimizer.java	repmat	m	int	0	NIL-FOR	c < $ * cd
31034	1227	8	CMAESOptimizer.java	sequence	r	int	0	NIL-FOR	$ < size
31034	1227	8	CMAESOptimizer.java	sequence	size	int	0	NIL-FOR	r < $
31035	1240	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.getRowDimension()
31035	1240	8	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
31036	1241	12	CMAESOptimizer.java	max	c	int	0	NIL-FOR	$ < m.getColumnDimension()
31036	1241	12	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
1729	1243	16	CMAESOptimizer.java	max	e	double	0	DEF	max < $
1729	1243	16	CMAESOptimizer.java	max	max	double	0	DEF	$ < e
31037	1257	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.getRowDimension()
31037	1257	8	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
31038	1258	12	CMAESOptimizer.java	min	c	int	0	NIL-FOR	$ < m.getColumnDimension()
31038	1258	12	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
1730	1260	16	CMAESOptimizer.java	min	e	double	0	DEF	min > $
1730	1260	16	CMAESOptimizer.java	min	min	double	0	DEF	$ > e
31039	1274	8	CMAESOptimizer.java	max	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
31039	1274	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.length
31039	1274	8	CMAESOptimizer.java	max	m	double[]	0	NIL-FOR	r < $.length
1731	1275	12	CMAESOptimizer.java	max	r	int	0	DEF	max < m[$]
1731	1275	12	CMAESOptimizer.java	max	max	double	0	DEF	$ < m[r]
1731	1275	12	CMAESOptimizer.java	max	m	double[]	0	DEF	max < $[r]
31040	1288	8	CMAESOptimizer.java	min	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
31040	1288	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.length
31040	1288	8	CMAESOptimizer.java	min	m	double[]	0	NIL-FOR	r < $.length
1732	1289	12	CMAESOptimizer.java	min	r	int	0	DEF	min > m[$]
1732	1289	12	CMAESOptimizer.java	min	min	double	0	DEF	$ > m[r]
1732	1289	12	CMAESOptimizer.java	min	m	double[]	0	DEF	min > $[r]
31041	1302	8	CMAESOptimizer.java	inverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
31041	1302	8	CMAESOptimizer.java	inverse	i	int	0	NIL-FOR	$ < indices.length
31041	1302	8	CMAESOptimizer.java	inverse	indices	int[]	0	NIL-FOR	i < $.length
31042	1314	8	CMAESOptimizer.java	reverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
31042	1314	8	CMAESOptimizer.java	reverse	i	int	0	NIL-FOR	$ < indices.length
31042	1314	8	CMAESOptimizer.java	reverse	indices	int[]	0	NIL-FOR	i < $.length
31043	1326	8	CMAESOptimizer.java	randn	i	int	0	NIL-FOR	$ < size
31043	1326	8	CMAESOptimizer.java	randn	size	int	0	NIL-FOR	i < $
31044	1339	8	CMAESOptimizer.java	randn1	r	int	0	NIL-FOR	$ < size
31044	1339	8	CMAESOptimizer.java	randn1	size	int	0	NIL-FOR	r < $
31045	1340	12	CMAESOptimizer.java	randn1	c	int	0	NIL-FOR	$ < popSize
31045	1340	12	CMAESOptimizer.java	randn1	popSize	int	0	NIL-FOR	c < $
1032	78	8	CauchyDistribution.java	CauchyDistribution	scale	double	0	NotStrictlyPositiveException	$ <= 0
1033	135	8	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1
1033	135	8	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0
1034	137	15	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
1035	139	16	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
524	75	8	Characterization.java	add	inside	boolean	1	DEF	$
525	76	12	Characterization.java	add	THIS	Characterization	1	DEF	$.in == null
526	82	12	Characterization.java	add	THIS	Characterization	1	DEF	$.out == null
2104	83	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	DimensionMismatchException	expected.$.length < 2
2104	83	8	ChiSquareTest.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length < 2
2105	86	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	DimensionMismatchException	expected.$.length != observed.$.length
2105	86	8	ChiSquareTest.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length != observed.length
2105	86	8	ChiSquareTest.java	chiSquare	observed	long[]	0	DimensionMismatchException	expected.length != $.length
31237	94	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	NIL-FOR	i < observed.$.length
31237	94	8	ChiSquareTest.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
31237	94	8	ChiSquareTest.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
2106	100	8	ChiSquareTest.java	chiSquare	sumExpected	double	0	DEF	FastMath.abs($ - sumObserved) > 10E-6
2106	100	8	ChiSquareTest.java	chiSquare	sumObserved	double	0	DEF	FastMath.abs(sumExpected - $) > 10E-6
31238	105	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	NIL-FOR	i < observed.$.length
31238	105	8	ChiSquareTest.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
31238	105	8	ChiSquareTest.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
2107	106	12	ChiSquareTest.java	chiSquare	rescale	boolean	1	DEF	$
2108	209	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
2108	209	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
31239	257	8	ChiSquareTest.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
31239	257	8	ChiSquareTest.java	chiSquare	nRows	int	0	NIL-FOR	row < $
31240	258	12	ChiSquareTest.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
31240	258	12	ChiSquareTest.java	chiSquare	nCols	int	0	NIL-FOR	col < $
31241	268	8	ChiSquareTest.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
31241	268	8	ChiSquareTest.java	chiSquare	nRows	int	0	NIL-FOR	row < $
31242	269	12	ChiSquareTest.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
31242	269	12	ChiSquareTest.java	chiSquare	nCols	int	0	NIL-FOR	col < $
2109	364	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
2109	364	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
2110	415	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	DimensionMismatchException	observed1.$.length < 2
2110	415	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length < 2
2111	418	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	DimensionMismatchException	observed1.$.length != observed2.$.length
2111	418	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length != observed2.length
2111	418	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed2	long[]	0	DimensionMismatchException	observed1.length != $.length
31243	431	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	NIL-FOR	i < observed1.$.length
31243	431	8	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
31243	431	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2112	436	8	ChiSquareTest.java	chiSquareDataSetsComparison	countSum1	long	0	ZeroException	$ == 0
2112	436	8	ChiSquareTest.java	chiSquareDataSetsComparison	countSum2	long	0	ZeroException	$ == 0
2113	441	8	ChiSquareTest.java	chiSquareDataSetsComparison	unequalCounts	boolean	0	DEF	$
31244	449	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	NIL-FOR	i < observed1.$.length
31244	449	8	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
31244	449	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2114	450	12	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	1	ZeroException	observed2[$] == 0
2114	450	12	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	1	ZeroException	observed1[$] == 0
2114	450	12	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	1	ZeroException	$[i] == 0
2114	450	12	ChiSquareTest.java	chiSquareDataSetsComparison	observed2	long[]	1	ZeroException	$[i] == 0
2115	455	16	ChiSquareTest.java	chiSquareDataSetsComparison	unequalCounts	boolean	1	DEF	$
2116	567	8	ChiSquareTest.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ > 0.5
2116	567	8	ChiSquareTest.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ <= 0
2117	589	8	ChiSquareTest.java	checkArray	THIS	ChiSquareTest	0	DimensionMismatchException	in.$.length < 2
2117	589	8	ChiSquareTest.java	checkArray	in	long[][]	0	DimensionMismatchException	$.length < 2
2118	593	8	ChiSquareTest.java	checkArray	THIS	ChiSquareTest	0	DimensionMismatchException	in[0].length < 2
2118	593	8	ChiSquareTest.java	checkArray	in	long[][]	0	DimensionMismatchException	$[0].length < 2
31245	615	8	ChiSquareTest.java	checkRectangular	THIS	ChiSquareTest	0	NIL-FOR	i < in.$.length
31245	615	8	ChiSquareTest.java	checkRectangular	i	int	0	NIL-FOR	$ < in.length
31245	615	8	ChiSquareTest.java	checkRectangular	in	long[][]	0	NIL-FOR	i < $.length
2119	616	12	ChiSquareTest.java	checkRectangular	THIS	ChiSquareTest	0	DimensionMismatchException	in[i].length != in[0].length
2119	616	12	ChiSquareTest.java	checkRectangular	i	int	0	DimensionMismatchException	in[$].length != in[0].length
2119	616	12	ChiSquareTest.java	checkRectangular	in	long[][]	0	DimensionMismatchException	$[i].length != $[0].length
31246	634	8	ChiSquareTest.java	checkPositive	THIS	ChiSquareTest	0	NIL-FOR	i < in.$.length
31246	634	8	ChiSquareTest.java	checkPositive	i	int	0	NIL-FOR	$ < in.length
31246	634	8	ChiSquareTest.java	checkPositive	in	double[]	0	NIL-FOR	i < $.length
2120	635	12	ChiSquareTest.java	checkPositive	i	int	0	NotStrictlyPositiveException	in[$] <= 0
2120	635	12	ChiSquareTest.java	checkPositive	in	double[]	0	NotStrictlyPositiveException	$[i] <= 0
31247	651	8	ChiSquareTest.java	checkNonNegative	THIS	ChiSquareTest	0	NIL-FOR	i < in.$.length
31247	651	8	ChiSquareTest.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
31247	651	8	ChiSquareTest.java	checkNonNegative	in	long[]	0	NIL-FOR	i < $.length
2121	652	12	ChiSquareTest.java	checkNonNegative	i	int	0	NotPositiveException	in[$] < 0
2121	652	12	ChiSquareTest.java	checkNonNegative	in	long[]	0	NotPositiveException	$[i] < 0
31248	668	8	ChiSquareTest.java	checkNonNegative	THIS	ChiSquareTest	0	NIL-FOR	i < in.$.length
31248	668	8	ChiSquareTest.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
31248	668	8	ChiSquareTest.java	checkNonNegative	in	long[][]	0	NIL-FOR	i < $.length
31249	669	12	ChiSquareTest.java	checkNonNegative	THIS	ChiSquareTest	0	NIL-FOR	j < in[i].length
31249	669	12	ChiSquareTest.java	checkNonNegative	j	int	0	NIL-FOR	$ < in[i].length
31249	669	12	ChiSquareTest.java	checkNonNegative	i	int	0	NIL-FOR	j < in[$].length
31249	669	12	ChiSquareTest.java	checkNonNegative	in	long[][]	0	NIL-FOR	j < $[i].length
2122	670	16	ChiSquareTest.java	checkNonNegative	j	int	0	NotPositiveException	in[i][$] < 0
2122	670	16	ChiSquareTest.java	checkNonNegative	i	int	0	NotPositiveException	in[$][j] < 0
2122	670	16	ChiSquareTest.java	checkNonNegative	in	long[][]	0	NotPositiveException	$[i][j] < 0
1264	107	8	CholeskyDecomposition.java	CholeskyDecomposition	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
30469	118	8	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	$ < order
30469	118	8	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	i < $
30470	122	12	CholeskyDecomposition.java	CholeskyDecomposition	j	int	0	NIL-FOR	$ < order
30470	122	12	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	j < $
1265	128	16	CholeskyDecomposition.java	CholeskyDecomposition	lIJ	double	0	NonSymmetricMatrixException	FastMath.abs($ - lJI) > maxDelta
1265	128	16	CholeskyDecomposition.java	CholeskyDecomposition	lJI	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - $) > maxDelta
1265	128	16	CholeskyDecomposition.java	CholeskyDecomposition	maxDelta	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - lJI) > $
30471	136	8	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	$ < order
30471	136	8	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	i < $
1266	141	12	CholeskyDecomposition.java	CholeskyDecomposition	ltI	double[]	0	NonPositiveDefiniteMatrixException	$[i] <= absolutePositivityThreshold
1266	141	12	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NonPositiveDefiniteMatrixException	ltI[$] <= absolutePositivityThreshold
1266	141	12	CholeskyDecomposition.java	CholeskyDecomposition	absolutePositivityThreshold	double	0	NonPositiveDefiniteMatrixException	ltI[i] <= $
30472	148	12	CholeskyDecomposition.java	CholeskyDecomposition	q	int	0	NIL-FOR	$ > i
30472	148	12	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	q > $
30473	151	16	CholeskyDecomposition.java	CholeskyDecomposition	p	int	0	NIL-FOR	$ < order
30473	151	16	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	p < $
1267	164	8	CholeskyDecomposition.java	getL	THIS	CholeskyDecomposition	0	DEF	$.cachedL == null
1268	177	8	CholeskyDecomposition.java	getLT	THIS	CholeskyDecomposition	0	DEF	$.cachedLT == null
30474	191	8	CholeskyDecomposition.java	getDeterminant	THIS	CholeskyDecomposition	0	NIL-FOR	i < $.lTData.$.length
30474	191	8	CholeskyDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < lTData.length
2435	45	8	Chromosome.java	getFitness	THIS	Chromosome	0	DEF	$.fitness == NO_FITNESS
2436	90	12	Chromosome.java	findSameChromosome	THIS	Chromosome	0	RET	$.isSame($.anotherChr)
2437	105	8	Chromosome.java	searchForFitnessUpdate	sameChromosome	Chromosome	0	DEF	$ != null
2636	100	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	1	DEF	$.previousState != null
2636	100	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
31567	106	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
31567	106	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
31568	121	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
31568	121	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
791	116	8	Complex.java	abs	THIS	Complex	0	RET	$.isNaN
792	119	8	Complex.java	abs	THIS	Complex	0	RET	$.isInfinite()
793	122	8	Complex.java	abs	THIS	Complex	1	RET	FastMath.abs($.real) < FastMath.abs($.imaginary)
794	123	12	Complex.java	abs	THIS	Complex	0	RET	$.imaginary == 0.0
795	129	12	Complex.java	abs	THIS	Complex	0	RET	$.real == 0.0
796	158	8	Complex.java	add	THIS	Complex	0	RET	addend.$.isNaN
796	158	8	Complex.java	add	THIS	Complex	0	RET	$.isNaN
796	158	8	Complex.java	add	addend	Complex	0	RET	$.isNaN
797	175	8	Complex.java	add	THIS	Complex	0	RET	$.isNaN
797	175	8	Complex.java	add	addend	double	0	RET	Double.isNaN($)
798	197	8	Complex.java	conjugate	THIS	Complex	0	RET	$.isNaN
799	249	8	Complex.java	divide	THIS	Complex	0	RET	divisor.$.isNaN
799	249	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN
799	249	8	Complex.java	divide	divisor	Complex	0	RET	$.isNaN
800	255	8	Complex.java	divide	c	double	0	RET	$ == 0.0
800	255	8	Complex.java	divide	d	double	0	RET	$ == 0.0
801	259	8	Complex.java	divide	THIS	Complex	0	RET	$.isInfinite()
801	259	8	Complex.java	divide	divisor	Complex	0	RET	$.isInfinite()
802	263	8	Complex.java	divide	c	double	1	RET	FastMath.abs($) < FastMath.abs(d)
802	263	8	Complex.java	divide	d	double	1	RET	FastMath.abs(c) < FastMath.abs($)
803	285	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN
803	285	8	Complex.java	divide	divisor	double	0	RET	Double.isNaN($)
804	288	8	Complex.java	divide	divisor	double	0	RET	$ == 0d
805	291	8	Complex.java	divide	divisor	double	0	RET	Double.isInfinite($)
806	300	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.isNaN
807	304	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.imaginary == 0.0
807	304	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.real == 0.0
808	308	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.isInfinite
809	312	8	Complex.java	reciprocal	THIS	Complex	1	RET	FastMath.abs($.real) < FastMath.abs($.imaginary)
810	340	8	Complex.java	equals	THIS	Complex	0	RET	$ == other
810	340	8	Complex.java	equals	other	Object	0	RET	this == $
811	343	8	Complex.java	equals	other	Object	0	RET	$ instanceof Complex
812	345	12	Complex.java	equals	THIS	Complex	1	RET	c.$.isNaN
812	345	12	Complex.java	equals	c	Complex	1	RET	$.isNaN
813	363	8	Complex.java	hashCode	THIS	Complex	0	RET	$.isNaN
814	439	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
814	439	8	Complex.java	multiply	THIS	Complex	0	RET	factor.$.isNaN
814	439	8	Complex.java	multiply	factor	Complex	0	RET	$.isNaN
815	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
815	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(factor.$.imaginary)
815	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
815	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(factor.$.real)
815	442	8	Complex.java	multiply	factor	Complex	0	RET	Double.isInfinite($.imaginary)
815	442	8	Complex.java	multiply	factor	Complex	0	RET	Double.isInfinite($.real)
816	462	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
817	465	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
817	465	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
818	481	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
818	481	8	Complex.java	multiply	factor	double	0	RET	Double.isNaN($)
819	484	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
819	484	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
819	484	8	Complex.java	multiply	factor	double	0	RET	Double.isInfinite($)
820	501	8	Complex.java	negate	THIS	Complex	0	RET	$.isNaN
821	529	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN
821	529	8	Complex.java	subtract	THIS	Complex	0	RET	subtrahend.$.isNaN
821	529	8	Complex.java	subtract	subtrahend	Complex	0	RET	$.isNaN
822	546	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN
822	546	8	Complex.java	subtract	subtrahend	double	0	RET	Double.isNaN($)
823	569	8	Complex.java	acos	THIS	Complex	0	RET	$.isNaN
824	594	8	Complex.java	asin	THIS	Complex	0	RET	$.isNaN
825	619	8	Complex.java	atan	THIS	Complex	0	RET	$.isNaN
826	660	8	Complex.java	cos	THIS	Complex	0	RET	$.isNaN
827	700	8	Complex.java	cosh	THIS	Complex	0	RET	$.isNaN
828	741	8	Complex.java	exp	THIS	Complex	0	RET	$.isNaN
829	786	8	Complex.java	log	THIS	Complex	0	RET	$.isNaN
830	864	8	Complex.java	sin	THIS	Complex	0	RET	$.isNaN
831	904	8	Complex.java	sinh	THIS	Complex	0	RET	$.isNaN
832	947	8	Complex.java	sqrt	THIS	Complex	0	RET	$.isNaN
833	951	8	Complex.java	sqrt	THIS	Complex	0	RET	$.real == 0.0
833	951	8	Complex.java	sqrt	THIS	Complex	0	RET	$.imaginary == 0.0
834	956	8	Complex.java	sqrt	THIS	Complex	1	RET	$.real >= 0.0
835	1018	8	Complex.java	tan	THIS	Complex	0	RET	Double.isInfinite($.real)
835	1018	8	Complex.java	tan	THIS	Complex	0	RET	$.isNaN
836	1021	8	Complex.java	tan	THIS	Complex	0	RET	$.imaginary > 20.0
837	1024	8	Complex.java	tan	THIS	Complex	0	RET	$.imaginary < -20.0
838	1069	8	Complex.java	tanh	THIS	Complex	0	RET	$.isNaN
838	1069	8	Complex.java	tanh	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
839	1072	8	Complex.java	tanh	THIS	Complex	0	RET	$.real > 20.0
840	1075	8	Complex.java	tanh	THIS	Complex	0	RET	$.real < -20.0
841	1133	8	Complex.java	nthRoot	n	int	0	NotPositiveException	$ <= 0
842	1140	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isNaN
843	1144	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isInfinite()
30114	1156	8	Complex.java	nthRoot	k	int	0	NIL-FOR	$ < n
30114	1156	8	Complex.java	nthRoot	n	int	0	NIL-FOR	k < $
844	1190	8	Complex.java	valueOf	realPart	double	0	RET	Double.isNaN($)
844	1190	8	Complex.java	valueOf	imaginaryPart	double	0	RET	Double.isNaN($)
845	1204	8	Complex.java	valueOf	realPart	double	0	RET	Double.isNaN($)
777	115	8	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NullArgumentException	$ == null
778	118	8	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NoDataException	$.length() == 0
779	121	8	ComplexFormat.java	ComplexFormat	imaginaryFormat	NumberFormat	0	NullArgumentException	$ == null
780	124	8	ComplexFormat.java	ComplexFormat	realFormat	NumberFormat	0	NullArgumentException	$ == null
781	183	8	ComplexFormat.java	format	im	double	1	DEF	$ < 0.0
782	188	15	ComplexFormat.java	format	im	double	0	DEF	$ > 0.0
782	188	15	ComplexFormat.java	format	im	double	0	DEF	Double.isNaN($)
783	211	8	ComplexFormat.java	formatImaginary	absIm	double	0	MathInternalError	$ < 0
784	219	8	ComplexFormat.java	formatImaginary	toAppendTo	StringBuffer	0	DEF	$.toString().equals("1")
785	245	8	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Complex
786	247	15	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Number
787	323	8	ComplexFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
788	346	8	ComplexFormat.java	parse	re	Number	0	RET	$ == null
789	382	8	ComplexFormat.java	parse	im	Number	0	RET	$ == null
790	390	8	ComplexFormat.java	parse	THIS	ComplexFormat	0	RET	CompositeFormat.parseFixedstring(source, $.getImaginaryCharacter(), pos)
790	390	8	ComplexFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, getImaginaryCharacter(), pos)
790	390	8	ComplexFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, getImaginaryCharacter(), $)
769	65	8	ComplexUtils.java	polar2Complex	r	double	0	MathIllegalArgumentException	$ < 0
476	85	9	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
476	85	9	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
30079	87	13	CompositeFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
30079	87	13	CompositeFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
30079	87	13	CompositeFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
477	92	13	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
477	92	13	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
478	121	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	$ < source.length()
478	121	8	CompositeFormat.java	parseNumber	source	String	0	DEF	endIndex < $.length()
479	122	12	CompositeFormat.java	parseNumber	sb	StringBuilder	0	DEF	source.substring(startIndex, endIndex).compareTo($.toString()) == 0
479	122	12	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	source.substring($, endIndex).compareTo(sb.toString()) == 0
479	122	12	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	source.substring(startIndex, $).compareTo(sb.toString()) == 0
479	122	12	CompositeFormat.java	parseNumber	source	String	0	DEF	$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
480	148	8	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	$ == endIndex
480	148	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	startIndex == $
30080	153	12	CompositeFormat.java	parseNumber	THIS	CompositeFormat	0	NIL-FOR	i < special.$.length
30080	153	12	CompositeFormat.java	parseNumber	i	int	0	NIL-FOR	$ < special.length
30080	153	12	CompositeFormat.java	parseNumber	special	double[]	0	NIL-FOR	i < $.length
481	155	16	CompositeFormat.java	parseNumber	number	Number	0	DEF	$ != null
482	177	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	source.substring($, endIndex).compareTo(expected) != 0
482	177	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	$ >= source.length()
482	177	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	source.substring(startIndex, $).compareTo(expected) != 0
482	177	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	$ > source.length()
482	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	$.substring(startIndex, endIndex).compareTo(expected) != 0
482	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	endIndex > $.length()
482	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	startIndex >= $.length()
482	177	8	CompositeFormat.java	parseFixedstring	expected	String	0	RET	source.substring(startIndex, endIndex).compareTo($) != 0
483	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isNaN($)
483	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isInfinite($)
1477	166	8	ConjugateGradient.java	solveInPlace	m	RealLinearOperator	1	DEF	$ == null
1478	175	8	ConjugateGradient.java	solveInPlace	rmax	double	0	RET	rnorm <= $
1478	175	8	ConjugateGradient.java	solveInPlace	rnorm	double	0	RET	$ <= rmax
1479	185	12	ConjugateGradient.java	solveInPlace	m	RealLinearOperator	0	DEF	$ != null
1480	189	12	ConjugateGradient.java	solveInPlace	THIS	ConjugateGradient	0	DEF	$.check
1480	189	12	ConjugateGradient.java	solveInPlace	rhoNext	double	0	DEF	$ <= 0.
1481	197	12	ConjugateGradient.java	solveInPlace	manager	IterationManager	1	DEF	$.getIterations() == 2
1482	204	12	ConjugateGradient.java	solveInPlace	THIS	ConjugateGradient	0	DEF	$.check
1482	204	12	ConjugateGradient.java	solveInPlace	pq	double	0	DEF	$ <= 0.
1483	220	12	ConjugateGradient.java	solveInPlace	rmax	double	0	RET	rnorm <= $
1483	220	12	ConjugateGradient.java	solveInPlace	rnorm	double	0	RET	$ <= rmax
30030	132	8	ContinuedFraction.java	evaluate	n	int	0	NIL-WHILE	$ < maxIterations
30030	132	8	ContinuedFraction.java	evaluate	relativeError	double	0	NIL-WHILE	$ > epsilon
30030	132	8	ContinuedFraction.java	evaluate	epsilon	double	0	NIL-WHILE	relativeError > $
30030	132	8	ContinuedFraction.java	evaluate	maxIterations	int	0	NIL-WHILE	n < $
80	139	12	ContinuedFraction.java	evaluate	p2	double	0	ConvergenceException	Double.isInfinite($)
80	139	12	ContinuedFraction.java	evaluate	q2	double	0	ConvergenceException	Double.isInfinite($)
81	149	16	ContinuedFraction.java	evaluate	scale	double	0	ConvergenceException	$ <= 0
30031	154	16	ContinuedFraction.java	evaluate	i	int	0	NIL-FOR	$ < maxPower
30031	154	16	ContinuedFraction.java	evaluate	maxPower	int	0	NIL-FOR	i < $
82	157	20	ContinuedFraction.java	evaluate	a	double	1	DEF	$ != 0.0
82	157	20	ContinuedFraction.java	evaluate	a	double	1	DEF	$ > b
82	157	20	ContinuedFraction.java	evaluate	b	double	1	DEF	a > $
83	160	27	ContinuedFraction.java	evaluate	b	double	0	DEF	$ != 0
84	165	20	ContinuedFraction.java	evaluate	infinite	boolean	0	DEF	$
85	171	12	ContinuedFraction.java	evaluate	infinite	boolean	0	ConvergenceException	$
86	179	12	ContinuedFraction.java	evaluate	r	double	0	ConvergenceException	Double.isNaN($)
87	193	8	ContinuedFraction.java	evaluate	n	int	0	MaxCountExceededException	$ >= maxIterations
87	193	8	ContinuedFraction.java	evaluate	maxIterations	int	0	MaxCountExceededException	n >= $
2682	130	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	RET	model.$.steps.size() == 0
2682	130	4	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	RET	$.steps.size() == 0
2683	134	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	1	DEF	$.steps.size() == 0
2684	139	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DimensionMismatchException	$.getInterpolatedState().length != model.getInterpolatedState().length
2684	139	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DimensionMismatchException	getInterpolatedState().length != $.getInterpolatedState().length
2685	144	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	MathIllegalArgumentException	$.forward ^ model.$.forward
2685	144	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	MathIllegalArgumentException	forward ^ $.forward
2686	153	6	ContinuousOutputModel.java	append	step	double	0	MathIllegalArgumentException	FastMath.abs(gap) > 1.0e-3 * FastMath.abs($)
2686	153	6	ContinuousOutputModel.java	append	gap	double	0	MathIllegalArgumentException	FastMath.abs($) > 1.0e-3 * FastMath.abs(step)
2687	186	4	ContinuousOutputModel.java	handleStep	THIS	ContinuousOutputModel	0	DEF	$.steps.size() == 0
2688	193	4	ContinuousOutputModel.java	handleStep	isLast	boolean	0	DEF	$
2689	251	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMin) <= 0
2689	251	6	ContinuousOutputModel.java	setInterpolatedTime	sMin	StepInterpolator	0	RET	locatePoint(time, $) <= 0
2689	251	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMin) <= 0
2690	256	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMax) >= 0
2690	256	6	ContinuousOutputModel.java	setInterpolatedTime	sMax	StepInterpolator	0	RET	locatePoint(time, $) >= 0
2690	256	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMax) >= 0
31599	263	6	ContinuousOutputModel.java	setInterpolatedTime	iMin	int	0	NIL-WHILE	iMax - $ > 5
31599	263	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	$ - iMin > 5
2691	268	8	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ < 0
2692	271	15	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ > 0
2693	285	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs(tMax - $) < 1e-6
2693	285	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs($ - tMin) < 1e-6
2693	285	8	ContinuousOutputModel.java	setInterpolatedTime	tMin	double	1	DEF	FastMath.abs(tMed - $) < 1e-6
2693	285	8	ContinuousOutputModel.java	setInterpolatedTime	tMax	double	1	DEF	FastMath.abs($ - tMed) < 1e-6
2694	308	8	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.index < low
2694	308	8	ContinuousOutputModel.java	setInterpolatedTime	low	int	1	DEF	index < $
2695	310	15	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	DEF	$.index > high
2695	310	15	ContinuousOutputModel.java	setInterpolatedTime	high	int	0	DEF	index > $
31600	318	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.index <= iMax
31600	318	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.locatePoint(time, $.steps.get($.index)) > 0
31600	318	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	index <= $
31600	318	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	NIL-WHILE	locatePoint($, steps.get(index)) > 0
2696	342	4	ContinuousOutputModel.java	locatePoint	THIS	ContinuousOutputModel	0	RET	$.forward
2697	343	6	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getPreviousTime()
2697	343	6	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getPreviousTime()
2698	345	13	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getCurrentTime()
2698	345	13	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getCurrentTime()
2699	351	4	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getPreviousTime()
2699	351	4	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getPreviousTime()
2700	353	11	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getCurrentTime()
2700	353	11	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getCurrentTime()
2345	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	THIS	CorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != order
2345	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	DimensionMismatchException	mean.length != $
2345	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != order
31365	121	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	i	int	0	NIL-FOR	$ < order
31365	121	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	NIL-FOR	i < $
31366	168	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < $.normalized.$.length
31366	168	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < normalized.length
31367	174	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < correlated.$.length
31367	174	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < correlated.length
31367	174	8	CorrelatedRandomVectorGenerator.java	nextVector	correlated	double[]	0	NIL-FOR	i < $.length
31368	176	12	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.root.getColumnDimension()
31368	176	12	CorrelatedRandomVectorGenerator.java	nextVector	j	int	0	NIL-FOR	$ < root.getColumnDimension()
31278	163	8	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	$ < dimension
31278	163	8	Covariance.java	computeCovarianceMatrix	dimension	int	0	NIL-FOR	i < $
31279	164	12	Covariance.java	computeCovarianceMatrix	j	int	0	NIL-FOR	$ < i
31279	164	12	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	j < $
2159	224	8	Covariance.java	covariance	THIS	Covariance	1	MathIllegalArgumentException	length != yArray.$.length
2159	224	8	Covariance.java	covariance	length	int	1	MathIllegalArgumentException	$ != yArray.length
2159	224	8	Covariance.java	covariance	yArray	double[]	1	MathIllegalArgumentException	length != $.length
2160	227	15	Covariance.java	covariance	length	int	1	MathIllegalArgumentException	$ < 2
31280	233	12	Covariance.java	covariance	i	int	0	NIL-FOR	$ < length
31280	233	12	Covariance.java	covariance	length	int	0	NIL-FOR	i < $
2161	267	8	Covariance.java	checkSufficientData	nRows	int	0	MathIllegalArgumentException	$ < 2
2161	267	8	Covariance.java	checkSufficientData	nCols	int	0	MathIllegalArgumentException	$ < 2
523	246	8	Decimal64.java	equals	obj	Object	0	RET	$ instanceof Decimal64
1491	113	8	DefaultIterativeLinearSolverEvent.java	getResidual	THIS	DefaultIterativeLinearSolverEvent	0	RET	$.r != null
496	50	8	DefaultTransformer.java	transform	o	Object	0	NullArgumentException	$ == null
497	54	8	DefaultTransformer.java	transform	o	Object	0	RET	$ instanceof Number
498	69	8	DefaultTransformer.java	equals	THIS	DefaultTransformer	0	RET	$ == other
498	69	8	DefaultTransformer.java	equals	other	Object	0	RET	this == $
499	72	8	DefaultTransformer.java	equals	other	Object	0	RET	$ == null
2007	138	8	DescriptiveStatistics.java	DescriptiveStatistics	initialDoubleArray	double[]	0	DEF	$ != null
2008	162	8	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.windowSize != INFINITE_WINDOW
2009	163	12	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.getN() == $.windowSize
2010	165	19	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	0	DEF	$.getN() < $.windowSize
2011	242	8	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	0	DEF	$.getN() > 0
2012	243	12	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	1	DEF	$.getN() > 1
2013	341	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	MathIllegalArgumentException	$ < 1
2014	342	12	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	MathIllegalArgumentException	$ != INFINITE_WINDOW
2015	353	8	DescriptiveStatistics.java	setWindowSize	THIS	DescriptiveStatistics	0	DEF	windowSize < $.eDA.getNumElements()
2015	353	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
2015	353	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < eDA.getNumElements()
2016	413	8	DescriptiveStatistics.java	getPercentile	THIS	DescriptiveStatistics	1	DEF	$.percentileImpl instanceof Percentile
2730	217	8	Dfp.java	Dfp	x	long	0	DEF	$ == Long.MIN_VALUE
2731	225	8	Dfp.java	Dfp	x	long	1	DEF	$ < 0
31606	233	8	Dfp.java	Dfp	x	long	0	NIL-WHILE	$ != 0
2732	240	8	Dfp.java	Dfp	isLongMin	boolean	0	DEF	$
31607	243	12	Dfp.java	Dfp	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
31607	243	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < mant.length - 1
2733	244	16	Dfp.java	Dfp	THIS	Dfp	0	DEF	$.mant[i] != 0
2733	244	16	Dfp.java	Dfp	i	int	0	DEF	mant[$] != 0
2734	269	8	Dfp.java	Dfp	exponent	int	0	RET	$ == -1023
2735	271	12	Dfp.java	Dfp	x	double	0	RET	$ == 0
2736	273	16	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
31608	282	12	Dfp.java	Dfp	mantissa	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
2737	289	8	Dfp.java	Dfp	exponent	int	0	RET	$ == 1024
2738	291	12	Dfp.java	Dfp	x	double	1	DEF	$ != $
2739	294	19	Dfp.java	Dfp	x	double	1	DEF	$ < 0
2740	308	8	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
2741	349	8	Dfp.java	Dfp	s	String	0	RET	$.equals(POS_INFINITY_STRING)
2742	355	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NEG_INFINITY_STRING)
2743	361	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NAN_STRING)
2744	369	8	Dfp.java	Dfp	p	int	0	DEF	$ == -1
2745	375	8	Dfp.java	Dfp	p	int	1	DEF	$ != -1
31609	381	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$<fpexp.length()
31609	381	12	Dfp.java	Dfp	fpexp	String	0	NIL-FOR	i<$.length()
2746	383	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) == '-'
2746	383	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) == '-'
2747	388	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) >= '0'
2747	388	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) <= '9'
2747	388	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) >= '0'
2747	388	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) <= '9'
2748	393	12	Dfp.java	Dfp	negative	boolean	0	DEF	$
2749	402	8	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.indexOf("-") != -1
2750	412	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) >= '1'
2750	412	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) <= '9'
2750	412	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) >= '1'
2750	412	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) <= '9'
2751	416	12	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
2751	416	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '0'
2751	416	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '0'
2752	420	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
2752	420	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
2753	426	12	Dfp.java	Dfp	p	int	0	DEF	$ == fpdecimal.length()
2753	426	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == $.length()
2754	439	12	Dfp.java	Dfp	p	int	0	DEF	$ == (fpdecimal.length())
2754	439	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == ($.length())
2755	444	12	Dfp.java	Dfp	THIS	Dfp	0	DEF	q == $.mant.$.length*rsize+offset+1
2755	444	12	Dfp.java	Dfp	rsize	int	0	DEF	q == mant.length*$+offset+1
2755	444	12	Dfp.java	Dfp	offset	int	0	DEF	q == mant.length*rsize+$+1
2755	444	12	Dfp.java	Dfp	q	int	0	DEF	$ == mant.length*rsize+offset+1
2756	448	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
2756	448	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
2757	455	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) > '9'
2757	455	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) < '0'
2757	455	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) > '9'
2757	455	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) < '0'
2758	468	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
2758	468	8	Dfp.java	Dfp	offset	int	0	DEF	q != $
2758	468	8	Dfp.java	Dfp	q	int	0	DEF	$ != offset
2759	471	16	Dfp.java	Dfp	offset	int	0	DEF	q == $
2759	471	16	Dfp.java	Dfp	q	int	0	DEF	$ == offset
2760	474	16	Dfp.java	Dfp	striped	char[]	1	DEF	$[q] == '0'
2760	474	16	Dfp.java	Dfp	q	int	1	DEF	striped[$] == '0'
2761	483	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
2761	483	8	Dfp.java	Dfp	significantDigits	int	0	DEF	$ == 0
2762	488	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
31610	496	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	$ > q
31610	496	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	p > $
2763	497	12	Dfp.java	Dfp	striped	char[]	0	DEF	$[p] != '0'
2763	497	12	Dfp.java	Dfp	p	int	0	DEF	striped[$] != '0'
31611	509	8	Dfp.java	Dfp	THIS	Dfp	0	NIL-WHILE	(p - q) < ($.mant.$.length * rsize)
31611	509	8	Dfp.java	Dfp	rsize	int	0	NIL-WHILE	(p - q) < (mant.length * $)
31611	509	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	($ - q) < (mant.length * rsize)
31611	509	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	(p - $) < (mant.length * rsize)
31612	510	12	Dfp.java	Dfp	rsize	int	0	NIL-FOR	i < $
31612	510	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < rsize
31613	517	8	Dfp.java	Dfp	i	int	0	NIL-FOR	$ >= 0
2764	528	8	Dfp.java	Dfp	THIS	Dfp	0	DEF	q < striped.$.length
2764	528	8	Dfp.java	Dfp	striped	char[]	0	DEF	q < $.length
2764	528	8	Dfp.java	Dfp	q	int	0	DEF	$ < striped.length
2765	597	8	Dfp.java	newInstance	THIS	Dfp	0	RET	$.field.getRadixDigits() != d.$.field.getRadixDigits()
2765	597	8	Dfp.java	newInstance	d	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
31614	669	8	Dfp.java	shiftLeft	i	int	0	NIL-FOR	$ > 0
31615	681	8	Dfp.java	shiftRight	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
31615	681	8	Dfp.java	shiftRight	i	int	0	NIL-FOR	$ < mant.length - 1
2766	703	8	Dfp.java	align	adiff	int	0	DEF	$ < 0
2767	707	8	Dfp.java	align	diff	int	0	RET	$ == 0
2768	711	8	Dfp.java	align	THIS	Dfp	0	RET	adiff > ($.mant.$.length + 1)
2768	711	8	Dfp.java	align	adiff	int	0	RET	$ > (mant.length + 1)
31616	722	8	Dfp.java	align	i	int	0	NIL-FOR	$ < adiff
31616	722	8	Dfp.java	align	adiff	int	0	NIL-FOR	i < $
2769	723	12	Dfp.java	align	diff	int	1	DEF	$ < 0
2770	728	16	Dfp.java	align	lostdigit	int	0	DEF	$ != 0
2771	740	8	Dfp.java	align	inexact	boolean	0	DEF	$
2772	756	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2772	756	8	Dfp.java	lessThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2773	765	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.isNaN()
2773	765	8	Dfp.java	lessThan	x	Dfp	0	RET	$.isNaN()
2774	781	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2774	781	8	Dfp.java	greaterThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2775	790	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.isNaN()
2775	790	8	Dfp.java	greaterThan	x	Dfp	0	RET	$.isNaN()
2776	804	8	Dfp.java	negativeOrNull	THIS	Dfp	0	RET	$.isNaN()
2777	819	8	Dfp.java	strictlyNegative	THIS	Dfp	0	RET	$.isNaN()
2778	834	8	Dfp.java	positiveOrNull	THIS	Dfp	0	RET	$.isNaN()
2779	849	8	Dfp.java	strictlyPositive	THIS	Dfp	0	RET	$.isNaN()
2780	887	8	Dfp.java	isZero	THIS	Dfp	0	RET	$.isNaN()
2781	904	8	Dfp.java	equals	other	Object	0	RET	$ instanceof Dfp
2782	906	12	Dfp.java	equals	THIS	Dfp	0	RET	$.isNaN()
2782	906	12	Dfp.java	equals	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2782	906	12	Dfp.java	equals	x	Dfp	0	RET	$.isNaN()
2782	906	12	Dfp.java	equals	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2783	931	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.isNaN()
2783	931	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2783	931	8	Dfp.java	unequal	x	Dfp	0	RET	$.isNaN()
2783	931	8	Dfp.java	unequal	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2784	946	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length - 1] == 0
2784	946	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
2784	946	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[a.$.mant.$.length - 1] == 0
2784	946	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
2784	946	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
2784	946	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
2784	946	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
2784	946	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
2785	951	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.sign != b.$.sign
2785	951	8	Dfp.java	compare	a	Dfp	0	RET	$.sign != b.sign
2785	951	8	Dfp.java	compare	b	Dfp	0	RET	a.sign != $.sign
2786	952	12	Dfp.java	compare	THIS	Dfp	1	RET	a.$.sign == -1
2786	952	12	Dfp.java	compare	a	Dfp	1	RET	$.sign == -1
2787	960	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
2787	960	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
2787	960	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
2787	960	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
2788	964	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
2788	964	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
2788	964	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
2788	964	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
2789	968	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
2789	968	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
2789	968	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
2789	968	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
2790	973	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length-1] != 0
2790	973	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[b.$.mant.$.length-1] != 0
2790	973	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[b.mant.length-1] != 0
2790	973	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length-1] != 0
2790	973	8	Dfp.java	compare	b	Dfp	0	RET	a.mant[$.mant.length-1] != 0
2791	974	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp < b.$.exp
2791	974	12	Dfp.java	compare	a	Dfp	0	RET	$.exp < b.exp
2791	974	12	Dfp.java	compare	b	Dfp	0	RET	a.exp < $.exp
2792	978	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp > b.$.exp
2792	978	12	Dfp.java	compare	a	Dfp	0	RET	$.exp > b.exp
2792	978	12	Dfp.java	compare	b	Dfp	0	RET	a.exp > $.exp
31617	984	8	Dfp.java	compare	i	int	0	NIL-FOR	$ >= 0
2793	985	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] > b.$.mant[i]
2793	985	12	Dfp.java	compare	i	int	0	RET	a.mant[$] > b.mant[$]
2793	985	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] > b.mant[i]
2793	985	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] > $.mant[i]
2794	989	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] < b.$.mant[i]
2794	989	12	Dfp.java	compare	i	int	0	RET	a.mant[$] < b.mant[$]
2794	989	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] < b.mant[i]
2794	989	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] < $.mant[i]
2795	1032	8	Dfp.java	remainder	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2795	1032	8	Dfp.java	remainder	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2796	1047	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.isNaN()
2797	1051	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.nans == INFINITE
2798	1055	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
2799	1062	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp < 0
2800	1073	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp >= $.mant.$.length
31618	1081	8	Dfp.java	trunc	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length-result.$.exp
31618	1081	8	Dfp.java	trunc	i	int	0	NIL-FOR	$ < mant.length-result.exp
31618	1081	8	Dfp.java	trunc	result	Dfp	0	NIL-FOR	i < mant.length-$.exp
2801	1086	8	Dfp.java	trunc	changed	boolean	0	RET	$
2802	1089	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == -1
2802	1089	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == -1
2803	1096	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == 1
2803	1096	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == 1
2804	1107	20	Dfp.java	trunc	half	Dfp	0	DEF	a.greaterThan($)
2804	1107	20	Dfp.java	trunc	a	Dfp	0	DEF	$.greaterThan(half)
2805	1114	20	Dfp.java	trunc	THIS	Dfp	0	DEF	(result.$.mant[$.mant.$.length-result.$.exp]&1) != 0
2805	1114	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.exp > 0
2805	1114	20	Dfp.java	trunc	half	Dfp	0	DEF	a.equals($)
2805	1114	20	Dfp.java	trunc	a	Dfp	0	DEF	$.equals(half)
2805	1114	20	Dfp.java	trunc	result	Dfp	0	DEF	($.mant[mant.length-$.exp]&1) != 0
2805	1114	20	Dfp.java	trunc	result	Dfp	0	DEF	$.exp > 0
2806	1140	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.greaterThan($.newInstance(2147483647))
2806	1140	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.greaterThan(newInstance(2147483647))
2807	1144	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.lessThan($.newInstance(-2147483648))
2807	1144	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.lessThan(newInstance(-2147483648))
31619	1148	8	Dfp.java	intValue	THIS	Dfp	0	NIL-FOR	i >= $.mant.$.length - rounded.$.exp
31619	1148	8	Dfp.java	intValue	i	int	0	NIL-FOR	$ >= mant.length - rounded.exp
31619	1148	8	Dfp.java	intValue	rounded	Dfp	0	NIL-FOR	i >= mant.length - $.exp
2808	1152	8	Dfp.java	intValue	THIS	Dfp	0	DEF	rounded.$.sign == -1
2808	1152	8	Dfp.java	intValue	rounded	Dfp	0	DEF	$.sign == -1
2809	1182	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 1000
2810	1185	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 100
2811	1188	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 10
2812	1201	8	Dfp.java	power10	e	int	1	DEF	$ >= 0
31620	1232	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
31620	1232	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
31621	1238	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
31621	1238	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
2813	1254	8	Dfp.java	add	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2813	1254	8	Dfp.java	add	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2814	1262	8	Dfp.java	add	THIS	Dfp	0	RET	$.nans != FINITE
2814	1262	8	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans != FINITE
2814	1262	8	Dfp.java	add	x	Dfp	0	RET	$.nans != FINITE
2815	1263	12	Dfp.java	add	THIS	Dfp	0	RET	$.isNaN()
2816	1267	12	Dfp.java	add	x	Dfp	0	RET	$.isNaN()
2817	1271	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
2817	1271	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == FINITE
2817	1271	12	Dfp.java	add	x	Dfp	0	RET	$.nans == FINITE
2818	1275	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == FINITE
2818	1275	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
2818	1275	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
2819	1279	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
2819	1279	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
2819	1279	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign == x.$.sign
2819	1279	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
2819	1279	12	Dfp.java	add	x	Dfp	0	RET	sign == $.sign
2820	1283	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign != x.$.sign
2820	1283	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
2820	1283	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
2820	1283	12	Dfp.java	add	x	Dfp	0	RET	sign != $.sign
2820	1283	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
2821	1308	8	Dfp.java	add	THIS	Dfp	0	DEF	$.compare(a, b) > 0
2821	1308	8	Dfp.java	add	a	Dfp	0	DEF	compare($, b) > 0
2821	1308	8	Dfp.java	add	b	Dfp	0	DEF	compare(a, $) > 0
2822	1315	8	Dfp.java	add	THIS	Dfp	0	DEF	b.$.mant[$.mant.$.length-1] == 0
2822	1315	8	Dfp.java	add	b	Dfp	0	DEF	$.mant[mant.length-1] == 0
2823	1319	8	Dfp.java	add	THIS	Dfp	0	DEF	a.$.mant[$.mant.$.length-1] == 0
2823	1319	8	Dfp.java	add	a	Dfp	0	DEF	$.mant[mant.length-1] == 0
2824	1326	8	Dfp.java	add	THIS	Dfp	1	DEF	a.$.exp < b.$.exp
2824	1326	8	Dfp.java	add	a	Dfp	1	DEF	$.exp < b.exp
2824	1326	8	Dfp.java	add	b	Dfp	1	DEF	a.exp < $.exp
2825	1333	8	Dfp.java	add	asign	byte	0	DEF	$ != bsign
2825	1333	8	Dfp.java	add	bsign	byte	0	DEF	asign != $
2826	1334	12	Dfp.java	add	asign	byte	1	DEF	$ == rsign
2826	1334	12	Dfp.java	add	rsign	byte	1	DEF	asign == $
31622	1343	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
31622	1343	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
2827	1354	8	Dfp.java	add	asign	byte	0	DEF	$ == bsign
2827	1354	8	Dfp.java	add	bsign	byte	0	DEF	asign == $
2827	1354	8	Dfp.java	add	rh	int	0	DEF	$ != 0
2828	1359	12	Dfp.java	add	excp	int	0	DEF	$ != 0
31623	1365	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
31623	1365	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
2829	1366	12	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] != 0
2829	1366	12	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] != 0
2830	1370	12	Dfp.java	add	i	int	0	DEF	$ == 0
2831	1378	8	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2831	1378	8	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2832	1381	12	Dfp.java	add	asign	byte	0	DEF	$ != bsign
2832	1381	12	Dfp.java	add	bsign	byte	0	DEF	asign != $
2833	1389	8	Dfp.java	add	excp	int	0	DEF	$ != 0
2834	1454	8	Dfp.java	round	inc	boolean	0	DEF	$
31624	1457	12	Dfp.java	round	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
31624	1457	12	Dfp.java	round	i	int	0	NIL-FOR	$ < mant.length
2835	1463	12	Dfp.java	round	rh	int	0	DEF	$ != 0
2836	1470	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp < MIN_EXP
2837	1476	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp > MAX_EXP
2838	1482	8	Dfp.java	round	n	int	0	RET	$ != 0
2839	1499	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2839	1499	8	Dfp.java	multiply	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2840	1509	8	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans != FINITE
2840	1509	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans != FINITE
2840	1509	8	Dfp.java	multiply	x	Dfp	0	RET	$.nans != FINITE
2841	1510	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.isNaN()
2842	1514	12	Dfp.java	multiply	x	Dfp	0	RET	$.isNaN()
2843	1518	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
2843	1518	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2843	1518	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] != 0
2843	1518	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
2843	1518	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] != 0
2844	1524	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2844	1524	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] != 0
2844	1524	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
2844	1524	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
2845	1530	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2845	1530	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2845	1530	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
2846	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
2846	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
2846	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
2846	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2846	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] == 0
2846	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2846	1536	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
2846	1536	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
2846	1536	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] == 0
31625	1548	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
31625	1548	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
31626	1550	12	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	j<$.mant.$.length
31626	1550	12	Dfp.java	multiply	j	int	0	NIL-FOR	$<mant.length
31627	1562	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ >= 0
2847	1563	12	Dfp.java	multiply	i	int	0	DEF	product[$] != 0
2847	1563	12	Dfp.java	multiply	product	int[]	0	DEF	$[i] != 0
31628	1570	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
31628	1570	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
2848	1578	8	Dfp.java	multiply	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2848	1578	8	Dfp.java	multiply	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2849	1584	8	Dfp.java	multiply	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
2849	1584	8	Dfp.java	multiply	md	int	1	DEF	$ > (mant.length-1)
2850	1590	8	Dfp.java	multiply	excp	int	0	DEF	$ != 0
2851	1607	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans != FINITE
2852	1608	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.isNaN()
2853	1612	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2853	1612	12	Dfp.java	multiply	x	int	0	RET	$ != 0
2854	1617	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2854	1617	12	Dfp.java	multiply	x	int	0	RET	$ == 0
2855	1627	8	Dfp.java	multiply	x	int	0	RET	$ < 0
2855	1627	8	Dfp.java	multiply	x	int	0	RET	$ >= RADIX
31629	1636	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
31629	1636	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
2856	1643	8	Dfp.java	multiply	rh	int	0	DEF	$ != 0
2857	1649	8	Dfp.java	multiply	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2857	1649	8	Dfp.java	multiply	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2858	1654	8	Dfp.java	multiply	excp	int	0	DEF	$ != 0
2859	1678	8	Dfp.java	divide	THIS	Dfp	0	RET	$.field.getRadixDigits() != divisor.$.field.getRadixDigits()
2859	1678	8	Dfp.java	divide	divisor	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2860	1688	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
2860	1688	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans != FINITE
2860	1688	8	Dfp.java	divide	divisor	Dfp	0	RET	$.nans != FINITE
2861	1689	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
2862	1693	12	Dfp.java	divide	divisor	Dfp	0	RET	$.isNaN()
2863	1697	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == FINITE
2863	1697	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
2863	1697	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == FINITE
2864	1703	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
2864	1703	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == FINITE
2864	1703	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
2865	1709	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
2865	1709	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
2865	1709	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
2866	1719	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.mant[$.mant.$.length-1] == 0
2866	1719	8	Dfp.java	divide	divisor	Dfp	0	RET	$.mant[mant.length-1] == 0
31630	1742	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
31630	1742	8	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
31631	1750	8	Dfp.java	divide	qd	int	0	NIL-FOR	$ >= 0
31632	1759	12	Dfp.java	divide	trialgood	boolean	0	NIL-WHILE	$
31633	1765	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
31633	1765	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
31634	1774	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
31634	1774	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
2867	1781	16	Dfp.java	divide	rh	int	0	DEF	$ == 0
2868	1791	16	Dfp.java	divide	minadj	int	0	DEF	$ >= 2
31635	1799	16	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
2869	1800	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] > remainder[i]
2869	1800	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] > remainder[$]
2869	1800	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] > $[i]
2869	1800	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] > remainder[i]
2870	1803	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] < remainder[i]
2870	1803	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] < remainder[$]
2870	1803	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] < $[i]
2870	1803	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] < remainder[i]
2871	1808	16	Dfp.java	divide	THIS	Dfp	0	DEF	remainder[$.mant.$.length] != 0
2871	1808	16	Dfp.java	divide	remainder	int[]	0	DEF	$[mant.length] != 0
2872	1812	16	Dfp.java	divide	trialgood	boolean	0	DEF	$ == false
2873	1819	12	Dfp.java	divide	nsqd	int	0	DEF	$ != 0
2873	1819	12	Dfp.java	divide	trial	int	0	DEF	$ != 0
2874	1823	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd == $.mant.$.length
2874	1823	12	Dfp.java	divide	THIS	Dfp	0	DEF	$.field.getRoundingMode() == DfpField.$.RoundingMode.ROUND_DOWN
2874	1823	12	Dfp.java	divide	nsqd	int	0	DEF	$ == mant.length
2875	1828	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd > $.mant.$.length
2875	1828	12	Dfp.java	divide	nsqd	int	0	DEF	$ > mant.length
31636	1835	12	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
31636	1835	12	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
31637	1842	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
2876	1843	12	Dfp.java	divide	i	int	0	DEF	quotient[$] != 0
2876	1843	12	Dfp.java	divide	quotient	int[]	0	DEF	$[i] != 0
31638	1850	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i<$.mant.$.length
31638	1850	8	Dfp.java	divide	i	int	0	NIL-FOR	$<mant.length
2877	1858	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2877	1858	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2878	1862	8	Dfp.java	divide	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
2878	1862	8	Dfp.java	divide	md	int	1	DEF	$ > (mant.length-1)
2879	1868	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
2880	1883	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
2881	1884	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
2882	1888	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
2883	1894	8	Dfp.java	divide	divisor	int	0	RET	$ == 0
2884	1904	8	Dfp.java	divide	divisor	int	0	RET	$ < 0
2884	1904	8	Dfp.java	divide	divisor	int	0	RET	$ >= RADIX
31639	1915	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
2885	1922	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2885	1922	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2886	1932	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
2887	1951	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
2887	1951	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == FINITE
2888	1956	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans != FINITE
2889	1957	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == INFINITE
2889	1957	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == 1
2890	1962	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == QNAN
2891	1966	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == SNAN
2892	1976	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == -1
2893	1990	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp < -1
2893	1990	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp > 1
2893	1990	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp < -1
2893	1990	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp > 1
31640	2016	8	Dfp.java	sqrt	x	Dfp	0	NIL-WHILE	$.unequal(px)
31640	2016	8	Dfp.java	sqrt	px	Dfp	0	NIL-WHILE	x.unequal($)
2894	2025	12	Dfp.java	sqrt	x	Dfp	0	DEF	$.equals(ppx)
2894	2025	12	Dfp.java	sqrt	ppx	Dfp	0	DEF	x.equals($)
2895	2032	12	Dfp.java	sqrt	THIS	Dfp	0	DEF	dx.$.mant[$.mant.$.length-1] == 0
2895	2032	12	Dfp.java	sqrt	dx	Dfp	0	DEF	$.mant[mant.length-1] == 0
2896	2046	8	Dfp.java	toString	THIS	Dfp	0	RET	$.nans != FINITE
2897	2048	12	Dfp.java	toString	THIS	Dfp	1	RET	$.nans == INFINITE
2898	2055	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp > $.mant.$.length
2898	2055	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp < -1
31641	2077	8	Dfp.java	dfp2sci	i	int	0	NIL-FOR	$ >= 0
31642	2085	8	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-FOR	p < rawdigits.$.length
31642	2085	8	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-FOR	p < $.length
31642	2085	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ < rawdigits.length
2899	2086	12	Dfp.java	dfp2sci	rawdigits	char[]	0	DEF	$[p] != '0'
2899	2086	12	Dfp.java	dfp2sci	p	int	0	DEF	rawdigits[$] != '0'
2900	2094	8	Dfp.java	dfp2sci	THIS	Dfp	0	DEF	$.sign == -1
2901	2098	8	Dfp.java	dfp2sci	THIS	Dfp	1	DEF	p != rawdigits.$.length
2901	2098	8	Dfp.java	dfp2sci	rawdigits	char[]	1	DEF	p != $.length
2901	2098	8	Dfp.java	dfp2sci	p	int	1	DEF	$ != rawdigits.length
31643	2103	12	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-WHILE	p<rawdigits.$.length
31643	2103	12	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-WHILE	p<$.length
31643	2103	12	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$<rawdigits.length
2902	2121	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
31644	2126	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ > ae
31644	2126	8	Dfp.java	dfp2sci	ae	int	0	NIL-FOR	p > $
2903	2130	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
31645	2134	8	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$ > 0
2904	2156	8	Dfp.java	dfp2string	e	int	0	DEF	$ <= 0
31646	2162	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ < 0
31647	2170	8	Dfp.java	dfp2string	i	int	0	NIL-FOR	$ >= 0
2905	2175	12	Dfp.java	dfp2string	e	int	0	DEF	--$ == 0
31648	2181	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ > 0
2906	2189	8	Dfp.java	dfp2string	pointInserted	boolean	0	DEF	$
31649	2196	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[q] == '0'
31649	2196	8	Dfp.java	dfp2string	q	int	0	NIL-WHILE	buffer[$] == '0'
2907	2199	8	Dfp.java	dfp2string	buffer	char[]	0	DEF	$[q] == '.'
2907	2199	8	Dfp.java	dfp2string	q	int	0	DEF	buffer[$] == '.'
31650	2204	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[p-1] == '0'
31650	2204	8	Dfp.java	dfp2string	p	int	0	NIL-WHILE	buffer[$-1] == '0'
2908	2209	8	Dfp.java	dfp2string	THIS	Dfp	0	DEF	$.sign < 0
2909	2235	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] != 0
2909	2235	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
2910	2242	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] == 0
2910	2242	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
2911	2248	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
2911	2248	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == QNAN
2912	2253	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
2912	2253	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == SNAN
2913	2260	16	Dfp.java	dotrap	THIS	Dfp	1	DEF	(result.$.exp+$.mant.$.length) < MIN_EXP
2913	2260	16	Dfp.java	dotrap	result	Dfp	1	DEF	($.exp+mant.length) < MIN_EXP
2914	2325	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2914	2325	8	Dfp.java	nextAfter	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2915	2334	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan(x)
2915	2334	8	Dfp.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
2916	2338	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.compare(this, x) == 0
2916	2338	8	Dfp.java	nextAfter	x	Dfp	0	RET	compare(this, $) == 0
2917	2342	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan($.getZero())
2918	2348	8	Dfp.java	nextAfter	up	boolean	1	DEF	$
2919	2353	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
2920	2363	12	Dfp.java	nextAfter	THIS	Dfp	1	DEF	$.equals(inc)
2920	2363	12	Dfp.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
2921	2369	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
2922	2376	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.classify() != INFINITE
2922	2376	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
2923	2381	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero()) == false
2923	2381	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	result.equals($.getZero())
2923	2381	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
2924	2396	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isInfinite()
2925	2397	12	Dfp.java	toDouble	THIS	Dfp	1	RET	$.lessThan($.getZero())
2926	2404	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isNaN()
2927	2411	8	Dfp.java	toDouble	cmp0	int	1	RET	$ == 0
2928	2413	15	Dfp.java	toDouble	cmp0	int	0	DEF	$ < 0
2929	2421	8	Dfp.java	toDouble	exponent	int	0	DEF	$ < 0
31651	2426	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.equals($)
31651	2426	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.lessThan($)
31651	2426	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.equals(y)
31651	2426	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.lessThan(y)
2930	2435	8	Dfp.java	toDouble	exponent	int	0	DEF	$ > -1023
2931	2439	8	Dfp.java	toDouble	exponent	int	0	RET	$ < -1074
2932	2443	8	Dfp.java	toDouble	exponent	int	0	RET	$ > 1023
2933	2453	8	Dfp.java	toDouble	mantissa	long	0	DEF	$ == 4503599627370496L
2934	2460	8	Dfp.java	toDouble	exponent	int	0	DEF	$ <= -1023
31652	2464	8	Dfp.java	toDouble	exponent	int	0	NIL-WHILE	$ < -1023
2935	2472	8	Dfp.java	toDouble	negate	boolean	0	DEF	$
2709	131	8	DfpDec.java	newInstance	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != d.getField().getRadixDigits()
2709	131	8	DfpDec.java	newInstance	d	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
2710	168	8	DfpDec.java	round	msb	int	0	RET	$ == 0
31602	175	8	DfpDec.java	round	msb	int	0	NIL-WHILE	lsbthreshold > $
31602	175	8	DfpDec.java	round	lsbthreshold	int	0	NIL-WHILE	$ > msb
31603	186	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsbshift % 4
31603	186	8	DfpDec.java	round	lsbshift	int	0	NIL-FOR	i < $ % 4
2711	192	8	DfpDec.java	round	THIS	DfpDec	0	RET	digits == 4 * $.mant.$.length - 3
2711	192	8	DfpDec.java	round	lsbthreshold	int	0	RET	$ <= 1
2711	192	8	DfpDec.java	round	digits	int	0	RET	$ == 4 * mant.length - 3
2712	198	8	DfpDec.java	round	lsbthreshold	int	1	DEF	$ == 1
31604	208	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsd
31604	208	8	DfpDec.java	round	lsd	int	0	NIL-FOR	i < $
2713	255	8	DfpDec.java	round	inc	boolean	0	DEF	$
31605	258	12	DfpDec.java	round	THIS	DfpDec	0	NIL-FOR	i < $.mant.$.length
31605	258	12	DfpDec.java	round	i	int	0	NIL-FOR	$ < mant.length
2714	264	12	DfpDec.java	round	rh	int	0	DEF	$ != 0
2715	271	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp < MIN_EXP
2716	277	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp > MAX_EXP
2717	283	8	DfpDec.java	round	discarded	int	0	RET	$ != 0
2717	283	8	DfpDec.java	round	n	int	0	RET	$ != 0
2718	298	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != x.getField().getRadixDigits()
2718	298	8	DfpDec.java	nextAfter	x	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
2719	310	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan(x)
2719	310	8	DfpDec.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
2720	314	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.equals(x)
2720	314	8	DfpDec.java	nextAfter	x	Dfp	0	RET	equals($)
2721	318	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan($.getZero())
2722	322	8	DfpDec.java	nextAfter	up	boolean	1	DEF	$
2723	326	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
2724	330	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
2724	330	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
2725	339	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	$.equals(inc)
2725	339	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
2726	345	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
2727	349	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
2727	349	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
2728	356	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.classify() != INFINITE
2728	356	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
2729	361	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero()) == false
2729	361	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	result.equals($.getZero())
2729	361	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
2936	200	8	DfpField.java	DfpField	computeConstants	boolean	1	DEF	$
31653	537	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
31653	537	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
31653	537	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
2937	540	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
2937	540	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '1'
2937	540	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
2937	540	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '1'
2938	544	8	DfpField.java	split	i	int	0	DEF	buf[$] == '.'
2938	544	8	DfpField.java	split	buf	char[]	0	DEF	$[i] == '.'
2939	549	8	DfpField.java	split	THIS	DfpField	0	DEF	sig == ($.radixDigits / 2) * 4
2939	549	8	DfpField.java	split	sig	int	0	DEF	$ == (radixDigits / 2) * 4
2940	554	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
2940	554	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
2940	554	8	DfpField.java	split	leading	boolean	0	DEF	$
2940	554	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
2940	554	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
31654	561	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
31654	561	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
31654	561	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
2941	563	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
2941	563	8	DfpField.java	split	i	int	0	DEF	$ < sp
2941	563	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
2941	563	8	DfpField.java	split	sp	int	0	DEF	i < $
2941	563	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
2941	563	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
2942	578	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String == null
2942	578	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String.length() < highPrecisionDecimalDigits - 3
2942	578	8	DfpField.java	computeStringConstants	highPrecisionDecimalDigits	int	0	DEF	sqr2String.length() < $ - 3
31655	623	8	DfpField.java	computePi	i	int	0	NIL-FOR	$ < 20
2943	637	12	DfpField.java	computePi	ykM1	Dfp	0	DEF	yk.equals($)
2943	637	12	DfpField.java	computePi	yk	Dfp	0	DEF	$.equals(ykM1)
31656	659	8	DfpField.java	computeExp	i	int	0	NIL-FOR	$ < 10000
2944	664	12	DfpField.java	computeExp	y	Dfp	0	DEF	$.equals(py)
2944	664	12	DfpField.java	computeExp	py	Dfp	0	DEF	y.equals($)
31657	742	8	DfpField.java	computeLn	i	int	0	NIL-FOR	$ < 10000
2945	748	12	DfpField.java	computeLn	y	Dfp	0	DEF	$.equals(py)
2945	748	12	DfpField.java	computeLn	py	Dfp	0	DEF	y.equals($)
31662	54	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
31662	54	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
31662	54	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
2963	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '1'
2963	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
2963	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '1'
2963	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
2964	61	12	DfpMath.java	split	i	int	0	DEF	buf[$] == '.'
2964	61	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] == '.'
2965	66	12	DfpMath.java	split	sig	int	0	DEF	$ == (field.getRadixDigits() / 2) * 4
2965	66	12	DfpMath.java	split	field	DfpField	0	DEF	sig == ($.getRadixDigits() / 2) * 4
2966	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
2966	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
2966	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
2966	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
2966	71	12	DfpMath.java	split	leading	boolean	0	DEF	$
31663	78	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
31663	78	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
31663	78	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
2967	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
2967	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
2967	80	12	DfpMath.java	split	i	int	0	DEF	$ < sp
2967	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
2967	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
2967	80	12	DfpMath.java	split	sp	int	0	DEF	i < $
2968	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].equals($[1])
2968	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].classify() == Dfp.INFINITE
2969	162	8	DfpMath.java	splitPow	a	int	0	RET	$ == 0
2970	167	8	DfpMath.java	splitPow	a	int	0	DEF	$ < 0
31664	174	8	DfpMath.java	splitPow	a	int	0	NIL-DOWHILE	$ >= 1
2971	183	16	DfpMath.java	splitPow	trial	int	0	DEF	$ > a
2971	183	16	DfpMath.java	splitPow	a	int	0	DEF	trial > $
2972	198	8	DfpMath.java	splitPow	invert	boolean	0	DEF	$
2973	217	8	DfpMath.java	pow	a	int	0	RET	$ == 0
2974	222	8	DfpMath.java	pow	a	int	0	DEF	$ < 0
31665	228	8	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$ >= 1
31666	234	12	DfpMath.java	pow	trial	int	0	NIL-DOWHILE	a>$
31666	234	12	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$>trial
2975	249	8	DfpMath.java	pow	invert	boolean	0	DEF	$
2976	270	8	DfpMath.java	exp	ia	int	0	RET	$ > 2147483646
2977	275	8	DfpMath.java	exp	ia	int	0	RET	$ < -2147483646
31667	297	8	DfpMath.java	expInternal	i	int	0	NIL-FOR	$ < 90
2978	301	12	DfpMath.java	expInternal	y	Dfp	0	DEF	$.equals(py)
2978	301	12	DfpMath.java	expInternal	py	Dfp	0	DEF	y.equals($)
2979	324	8	DfpMath.java	log	a	Dfp	0	RET	$.equals($.getZero())
2979	324	8	DfpMath.java	log	a	Dfp	0	RET	$.lessThan($.getZero())
2979	324	8	DfpMath.java	log	a	Dfp	0	RET	$.isNaN()
2980	330	8	DfpMath.java	log	a	Dfp	0	RET	$.classify() == Dfp.INFINITE
31668	340	8	DfpMath.java	log	ix	int	0	NIL-WHILE	$ > 2
31669	353	8	DfpMath.java	log	spx	Dfp[]	0	NIL-WHILE	$[0].add($[1]).greaterThan(spy[0])
31669	353	8	DfpMath.java	log	spy	Dfp[]	0	NIL-WHILE	spx[0].add(spx[1]).greaterThan($[0])
31670	447	8	DfpMath.java	logInternal	i	int	0	NIL-FOR	$ < 10000
2981	453	12	DfpMath.java	logInternal	y	Dfp	0	DEF	$.equals(py)
2981	453	12	DfpMath.java	logInternal	py	Dfp	0	DEF	y.equals($)
2982	508	8	DfpMath.java	pow	x	Dfp	0	RET	$.getField().getRadixDigits() != y.getField().getRadixDigits()
2982	508	8	DfpMath.java	pow	y	Dfp	0	RET	x.getField().getRadixDigits() != $.getField().getRadixDigits()
2983	522	8	DfpMath.java	pow	zero	Dfp	0	RET	y.equals($)
2983	522	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(zero)
2984	526	8	DfpMath.java	pow	one	Dfp	0	RET	y.equals($)
2984	526	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(one)
2985	527	12	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
2986	535	8	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
2986	535	8	DfpMath.java	pow	y	Dfp	0	RET	$.isNaN()
2987	542	8	DfpMath.java	pow	zero	Dfp	0	RET	x.equals($)
2987	542	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(zero)
2988	543	12	DfpMath.java	pow	zero	Dfp	1	RET	Dfp.copysign(one, x).greaterThan($)
2988	543	12	DfpMath.java	pow	one	Dfp	1	RET	Dfp.copysign($, x).greaterThan(zero)
2988	543	12	DfpMath.java	pow	x	Dfp	1	RET	Dfp.copysign(one, $).greaterThan(zero)
2989	545	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2989	545	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2990	552	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
2990	552	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
2990	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
2990	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
2990	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
2991	554	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2991	554	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2992	561	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2992	561	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2993	570	8	DfpMath.java	pow	zero	Dfp	0	DEF	x.lessThan($)
2993	570	8	DfpMath.java	pow	x	Dfp	0	DEF	$.lessThan(zero)
2994	576	8	DfpMath.java	pow	one	Dfp	0	RET	x.greaterThan($)
2994	576	8	DfpMath.java	pow	x	Dfp	0	RET	$.greaterThan(one)
2994	576	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
2995	577	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2995	577	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2996	584	8	DfpMath.java	pow	one	Dfp	0	RET	x.lessThan($)
2996	584	8	DfpMath.java	pow	x	Dfp	0	RET	$.lessThan(one)
2996	584	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
2997	585	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2997	585	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2998	592	8	DfpMath.java	pow	one	Dfp	0	RET	x.equals($)
2998	592	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(one)
2998	592	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
2999	597	8	DfpMath.java	pow	x	Dfp	0	RET	$.classify() == Dfp.INFINITE
3000	599	12	DfpMath.java	pow	invert	boolean	1	RET	$
3001	601	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
3001	601	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
3001	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
3001	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
3001	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
3002	603	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3002	603	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3003	610	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3003	610	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3004	618	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3004	618	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3005	626	8	DfpMath.java	pow	invert	boolean	0	RET	$
3005	626	8	DfpMath.java	pow	y	Dfp	0	RET	$.rint().equals($)
3006	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.greaterThan($.newInstance(-100000000))
3006	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.lessThan($.newInstance(100000000))
3006	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.greaterThan(x.newInstance(-100000000))
3006	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.lessThan(x.newInstance(100000000))
3007	640	12	DfpMath.java	pow	v	Dfp	1	DEF	$.unequal(zero)
3007	640	12	DfpMath.java	pow	zero	Dfp	1	DEF	v.unequal($)
3008	656	8	DfpMath.java	pow	invert	boolean	0	DEF	$
3009	658	12	DfpMath.java	pow	zero	Dfp	0	DEF	y.remainder(two).equals($)
3009	658	12	DfpMath.java	pow	two	Dfp	0	DEF	y.remainder($).equals(zero)
3009	658	12	DfpMath.java	pow	y	Dfp	0	DEF	$.remainder(two).equals(zero)
3009	658	12	DfpMath.java	pow	y	Dfp	0	DEF	$.rint().equals($)
31671	681	8	DfpMath.java	sinInternal	i	int	0	NIL-FOR	$ < 90
3010	687	12	DfpMath.java	sinInternal	y	Dfp	0	DEF	$.equals(py)
3010	687	12	DfpMath.java	sinInternal	py	Dfp	0	DEF	y.equals($)
31672	714	8	DfpMath.java	cosInternal	i	int	0	NIL-FOR	$ < 90
3011	721	12	DfpMath.java	cosInternal	y	Dfp	0	DEF	$.equals(py)
3011	721	12	DfpMath.java	cosInternal	py	Dfp	0	DEF	y.equals($)
3012	745	8	DfpMath.java	sin	zero	Dfp	0	DEF	x.lessThan($)
3012	745	8	DfpMath.java	sin	x	Dfp	0	DEF	$.lessThan(zero)
3013	754	8	DfpMath.java	sin	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
3013	754	8	DfpMath.java	sin	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
3014	759	8	DfpMath.java	sin	pi	Dfp	1	DEF	x.lessThan($.divide(4))
3014	759	8	DfpMath.java	sin	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
3015	774	8	DfpMath.java	sin	neg	boolean	0	DEF	$
3016	796	8	DfpMath.java	cos	zero	Dfp	0	DEF	x.lessThan($)
3016	796	8	DfpMath.java	cos	x	Dfp	0	DEF	$.lessThan(zero)
3017	804	8	DfpMath.java	cos	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
3017	804	8	DfpMath.java	cos	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
3018	810	8	DfpMath.java	cos	pi	Dfp	1	DEF	x.lessThan($.divide(4))
3018	810	8	DfpMath.java	cos	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
3019	824	8	DfpMath.java	cos	neg	boolean	0	DEF	$
31673	850	8	DfpMath.java	atanInternal	i	int	0	NIL-FOR	$ < 90
3020	855	12	DfpMath.java	atanInternal	y	Dfp	0	DEF	$.equals(py)
3020	855	12	DfpMath.java	atanInternal	py	Dfp	0	DEF	y.equals($)
3021	890	8	DfpMath.java	atan	zero	Dfp	0	DEF	x.lessThan($)
3021	890	8	DfpMath.java	atan	x	Dfp	0	DEF	$.lessThan(zero)
3022	895	8	DfpMath.java	atan	one	Dfp	0	DEF	x.greaterThan($)
3022	895	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(one)
3023	900	8	DfpMath.java	atan	ty	Dfp	0	DEF	x.greaterThan($)
3023	900	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(ty)
3024	923	8	DfpMath.java	atan	sub	boolean	0	DEF	$
3025	927	8	DfpMath.java	atan	recp	boolean	0	DEF	$
3026	931	8	DfpMath.java	atan	neg	boolean	0	DEF	$
3027	955	8	DfpMath.java	acos	a	Dfp	0	DEF	$.lessThan($.getZero())
3028	963	8	DfpMath.java	acos	negative	boolean	0	DEF	$
31704	105	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
31704	105	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
31705	106	12	DividedDifferenceInterpolator.java	computeDividedDifference	j	int	0	NIL-FOR	$ < n-i
31705	106	12	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	j < n-$
31705	106	12	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	j < $-i
31515	144	4	DormandPrince54Integrator.java	estimateError	THIS	DormandPrince54Integrator	0	NIL-FOR	j < $.mainSetDimension
31515	144	4	DormandPrince54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
2543	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	THIS	DormandPrince54StepInterpolator	1	DEF	interpolator.$.v1 == null
2543	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	interpolator	DormandPrince54StepInterpolator	1	DEF	$.v1 == null
2544	172	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.vectorsInitialized
2545	174	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.v1 == null
31481	184	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
31481	184	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2546	207	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	1	DEF	$.previousState != null
2546	207	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
31482	208	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
31482	208	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
31483	214	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
31483	214	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
31514	258	4	DormandPrince853Integrator.java	estimateError	THIS	DormandPrince853Integrator	0	NIL-FOR	j < $.mainSetDimension
31514	258	4	DormandPrince853Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
2597	279	4	DormandPrince853Integrator.java	estimateError	den	double	0	DEF	$ <= 0.0
2617	246	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	1	DEF	interpolator.$.currentState == null
2617	246	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	interpolator	DormandPrince853StepInterpolator	1	DEF	$.currentState == null
31535	257	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
31535	257	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < yDotKLast.length
31536	264	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
31536	264	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < v.length
31537	293	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
31537	293	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < yDotKLast.length
31538	298	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
31538	298	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < v.length
2618	318	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.vectorsInitialized
2619	320	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.v == null
31539	322	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < 7
31540	331	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
31540	331	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
31541	349	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < D.$.length
31541	349	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < D.length
2620	371	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	1	DEF	$.previousState != null
2620	371	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
31542	372	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
31542	372	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
31543	386	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
31543	386	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2621	407	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	RET	$.currentState == null
31544	417	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
31544	417	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
31545	426	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
31545	426	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
31546	436	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
31546	436	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
31547	457	4	DormandPrince853StepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < dimension
31547	457	4	DormandPrince853StepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	i < $
31548	480	4	DormandPrince853StepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < dimension
31548	480	4	DormandPrince853StepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	i < $
1202	103	8	EigenDecomposition.java	EigenDecomposition	THIS	EigenDecomposition	0	DEF	$.isSymmetric(matrix, true)
1202	103	8	EigenDecomposition.java	EigenDecomposition	matrix	RealMatrix	0	DEF	isSymmetric($, true)
30379	126	8	EigenDecomposition.java	EigenDecomposition	i	int	0	NIL-FOR	$<size
30379	126	8	EigenDecomposition.java	EigenDecomposition	size	int	0	NIL-FOR	i<$
30380	147	8	EigenDecomposition.java	isSymmetric	i	int	0	NIL-FOR	$ < rows
30380	147	8	EigenDecomposition.java	isSymmetric	rows	int	0	NIL-FOR	i < $
30381	148	12	EigenDecomposition.java	isSymmetric	j	int	0	NIL-FOR	$ < columns
30381	148	12	EigenDecomposition.java	isSymmetric	columns	int	0	NIL-FOR	j < $
1203	151	16	EigenDecomposition.java	isSymmetric	mij	double	0	NonSymmetricMatrixException:RET	FastMath.abs($ - mji) > (FastMath.max(FastMath.abs($), FastMath.abs(mji)) * eps)
1203	151	16	EigenDecomposition.java	isSymmetric	mji	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - $) > (FastMath.max(FastMath.abs(mij), FastMath.abs($)) * eps)
1203	151	16	EigenDecomposition.java	isSymmetric	eps	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - mji) > (FastMath.max(FastMath.abs(mij), FastMath.abs(mji)) * $)
1204	153	20	EigenDecomposition.java	isSymmetric	raiseException	boolean	0	NonSymmetricMatrixException	$
1205	175	8	EigenDecomposition.java	getV	THIS	EigenDecomposition	0	DEF	$.cachedV == null
30382	178	12	EigenDecomposition.java	getV	k	int	0	NIL-FOR	$ < m
30382	178	12	EigenDecomposition.java	getV	m	int	0	NIL-FOR	k < $
1206	199	8	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	DEF	$.cachedD == null
1207	218	8	EigenDecomposition.java	getVT	THIS	EigenDecomposition	0	DEF	$.cachedVt == null
30383	221	12	EigenDecomposition.java	getVT	k	int	0	NIL-FOR	$ < m
30383	221	12	EigenDecomposition.java	getVT	m	int	0	NIL-FOR	k < $
30384	491	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n - 1
30384	491	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $ - 1
30385	500	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
30385	500	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1208	501	12	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) > maxAbsoluteValue
1208	501	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
1208	501	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) > $
1209	504	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$]) > maxAbsoluteValue
1209	504	12	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i]) > maxAbsoluteValue
1209	504	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i]) > $
1210	509	8	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$ != 0
30386	510	12	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
30386	510	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1211	511	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue
1211	511	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) <= Precision.EPSILON * maxAbsoluteValue
1211	511	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * $
1212	514	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$]) <= Precision.EPSILON * maxAbsoluteValue
1212	514	16	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i]) <= Precision.EPSILON * maxAbsoluteValue
1212	514	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i]) <= Precision.EPSILON * $
30387	520	8	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
30387	520	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
30388	523	12	EigenDecomposition.java	findEigenVectors	m	int	0	NIL-DOWHILE	$ != j
30388	523	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-DOWHILE	m != $
30389	524	16	EigenDecomposition.java	findEigenVectors	m	int	0	NIL-FOR	$ < n - 1
30389	524	16	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	m < $ - 1
1213	527	20	EigenDecomposition.java	findEigenVectors	delta	double	0	DEF	FastMath.abs(e[m]) + $ == $
1213	527	20	EigenDecomposition.java	findEigenVectors	m	int	0	DEF	FastMath.abs(e[$]) + delta == delta
1213	527	20	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[m]) + delta == delta
1214	531	16	EigenDecomposition.java	findEigenVectors	m	int	0	MaxCountExceededException	$ != j
1214	531	16	EigenDecomposition.java	findEigenVectors	j	int	0	MaxCountExceededException	m != $
1215	532	20	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	MaxCountExceededException	its == $.maxIter
1215	532	20	EigenDecomposition.java	findEigenVectors	its	int	0	MaxCountExceededException	$ == maxIter
1216	539	20	EigenDecomposition.java	findEigenVectors	q	double	1	DEF	$ < 0.0
30390	548	20	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ >= j
30390	548	20	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	i >= $
1217	551	24	EigenDecomposition.java	findEigenVectors	p	double	1	DEF	FastMath.abs($) >= FastMath.abs(q)
1217	551	24	EigenDecomposition.java	findEigenVectors	q	double	1	DEF	FastMath.abs(p) >= FastMath.abs($)
1218	564	24	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	e[$ + 1] == 0.0
1218	564	24	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	$[i + 1] == 0.0
30391	574	24	EigenDecomposition.java	findEigenVectors	ia	int	0	NIL-FOR	$ < n
30391	574	24	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	ia < $
1219	580	20	EigenDecomposition.java	findEigenVectors	t	double	0	DEF	$ == 0.0
1219	580	20	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	$ >= j
1219	580	20	EigenDecomposition.java	findEigenVectors	j	int	0	DEF	i >= $
30392	591	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
30392	591	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
30393	594	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
30393	594	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
1220	595	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	$.realEigenvalues[j] > p
1220	595	16	EigenDecomposition.java	findEigenVectors	j	int	0	DEF	realEigenvalues[$] > p
1220	595	16	EigenDecomposition.java	findEigenVectors	p	double	0	DEF	realEigenvalues[j] > $
1221	600	12	EigenDecomposition.java	findEigenVectors	k	int	0	DEF	$ != i
1221	600	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	k != $
30394	603	16	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
30394	603	16	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
30395	613	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
30395	613	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1222	614	12	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) > maxAbsoluteValue
1222	614	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
1222	614	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) > $
1223	619	8	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$!=0.0
30396	620	12	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
30396	620	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1224	621	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue
1224	621	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) < Precision.EPSILON * maxAbsoluteValue
1224	621	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * $
30397	628	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
30397	628	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
30398	629	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
30398	629	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
31410	83	8	ElitisticListPopulation.java	nextGeneration	i	int	0	NIL-FOR	$<oldChromosomes.size()
31410	83	8	ElitisticListPopulation.java	nextGeneration	oldChromosomes	List<Chromosome>	0	NIL-FOR	i<$.size()
2432	98	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	OutOfRangeException	$ > 1
2432	98	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	OutOfRangeException	$ < 0
31526	220	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
31527	226	6	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
2607	228	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
2607	228	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2608	233	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2609	235	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.vecAbsoluteTolerance == null
31528	236	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
31528	236	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
31528	236	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
31529	240	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
31529	240	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
31529	240	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
2610	250	8	EmbeddedRungeKuttaIntegrator.java	integrate	forward	boolean	1	DEF	$
2611	251	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize >= t
2611	251	12	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize >= $
2612	255	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize <= t
2612	255	12	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize <= $
31530	261	8	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
31530	261	8	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
31531	263	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
31531	263	10	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
31531	263	10	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
31532	265	12	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
31532	265	12	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
31533	276	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
31533	276	8	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
31533	276	8	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
31534	278	10	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
31534	278	10	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
2613	286	8	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
2614	303	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.isLastStep
2615	308	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
2616	323	10	EmbeddedRungeKuttaIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
2351	218	12	EmpiricalDistribution.java	load	THIS	EmpiricalDistribution	0	ZeroException	$.sampleStats.getN() == 0
2352	408	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	DEF	$.binStats.isEmpty()
31378	411	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount
31378	411	8	EmpiricalDistribution.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount
31379	425	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount-1
31379	425	8	EmpiricalDistribution.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount-1
2353	453	8	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	MathIllegalStateException	$.loaded
31380	461	8	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount
31380	461	8	EmpiricalDistribution.java	getNextValue	i	int	0	NIL-FOR	$ < binCount
2354	462	11	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	RET	x <= $.upperBounds[i]
2354	462	11	EmpiricalDistribution.java	getNextValue	i	int	0	RET	x <= upperBounds[$]
2354	462	11	EmpiricalDistribution.java	getNextValue	x	double	0	RET	$ <= upperBounds[i]
2355	464	15	EmpiricalDistribution.java	getNextValue	stats	SummaryStatistics	0	RET	$.getN() > 0
2356	465	19	EmpiricalDistribution.java	getNextValue	stats	SummaryStatistics	1	RET	$.getStandardDeviation() > 0
31381	525	8	EmpiricalDistribution.java	getUpperBounds	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount - 1
31381	525	8	EmpiricalDistribution.java	getUpperBounds	i	int	0	NIL-FOR	$ < binCount - 1
2663	77	8	EquationsMapper.java	extractEquationData	THIS	EquationsMapper	0	DimensionMismatchException	equationData.$.length != $.dimension
2663	77	8	EquationsMapper.java	extractEquationData	equationData	double[]	0	DimensionMismatchException	$.length != dimension
2664	92	8	EquationsMapper.java	insertEquationData	THIS	EquationsMapper	0	DimensionMismatchException	equationData.$.length != $.dimension
2664	92	8	EquationsMapper.java	insertEquationData	equationData	double[]	0	DimensionMismatchException	$.length != dimension
2466	67	8	Erf.java	erf	x	double	0	RET	FastMath.abs($) > 40
2467	98	8	Erf.java	erfc	x	double	0	RET	FastMath.abs($) > 40
2468	116	8	Erf.java	erf	x1	double	0	RET	$ > x2
2468	116	8	Erf.java	erf	x2	double	0	RET	x1 > $
31259	64	12	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
31259	64	12	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
31259	64	12	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
31260	68	8	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
31260	68	8	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
31260	68	8	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
2147	77	8	EuclideanIntegerPoint.java	equals	other	Object	0	RET	$ instanceof EuclideanIntegerPoint
2148	81	8	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	RET	$.point.$.length != otherPoint.$.length
2148	81	8	EuclideanIntegerPoint.java	equals	otherPoint	int[]	0	RET	point.length != $.length
31261	84	8	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < $.point.$.length
31261	84	8	EuclideanIntegerPoint.java	equals	i	int	0	NIL-FOR	$ < point.length
2149	85	12	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	RET	$.point[i] != otherPoint[i]
2149	85	12	EuclideanIntegerPoint.java	equals	i	int	0	RET	point[$] != otherPoint[$]
2149	85	12	EuclideanIntegerPoint.java	equals	otherPoint	int[]	0	RET	point[i] != $[i]
31262	110	8	EuclideanIntegerPoint.java	toString	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < coordinates.$.length
31262	110	8	EuclideanIntegerPoint.java	toString	i	int	0	NIL-FOR	$ < coordinates.length
31262	110	8	EuclideanIntegerPoint.java	toString	coordinates	int[]	0	NIL-FOR	i < $.length
2150	112	12	EuclideanIntegerPoint.java	toString	THIS	EuclideanIntegerPoint	0	DEF	i < coordinates.$.length - 1
2150	112	12	EuclideanIntegerPoint.java	toString	i	int	0	DEF	$ < coordinates.length - 1
2150	112	12	EuclideanIntegerPoint.java	toString	coordinates	int[]	0	DEF	i < $.length - 1
2649	86	6	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	1	DEF	$.previousState != null
2649	86	6	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
31572	87	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
31572	87	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
31573	92	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
31573	92	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2665	157	8	EventState.java	reinitializeBegin	THIS	EventState	0	DEF	$.g0 == 0
2666	193	12	EventState.java	evaluateStep	THIS	EventState	0	RET	FastMath.abs(dt) < $.convergence
2666	193	12	EventState.java	evaluateStep	dt	double	0	RET	FastMath.abs($) < convergence
31595	209	12	EventState.java	evaluateStep	i	int	0	NIL-FOR	$ < n
31595	209	12	EventState.java	evaluateStep	n	int	0	NIL-FOR	i < $
2667	217	16	EventState.java	evaluateStep	THIS	EventState	1	RET	$.g0Positive ^ (gb >= 0)
2667	217	16	EventState.java	evaluateStep	gb	double	1	RET	g0Positive ^ ($ >= 0)
2668	225	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	$.solver instanceof BracketedUnivariateSolver<?>
2669	246	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - $.previousEventTime) <= $.convergence
2669	246	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - ta) <= $.convergence
2669	246	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	Double.isNaN($.previousEventTime)
2669	246	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - previousEventTime) <= convergence
2669	246	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - ta) <= convergence
2669	246	20	EventState.java	evaluateStep	ta	double	1	DEF	FastMath.abs(root - $) <= convergence
2670	254	27	EventState.java	evaluateStep	THIS	EventState	1	RET	Double.isNaN($.previousEventTime)
2670	254	27	EventState.java	evaluateStep	THIS	EventState	1	RET	FastMath.abs($.previousEventTime - root) > $.convergence
2670	254	27	EventState.java	evaluateStep	root	double	1	RET	FastMath.abs(previousEventTime - $) > convergence
2671	301	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	FastMath.abs($.pendingEventTime - t) <= $.convergence
2671	301	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	$.pendingEvent
2671	301	8	EventState.java	stepAccepted	t	double	1	DEF	FastMath.abs(pendingEventTime - $) <= convergence
2672	329	8	EventState.java	reset	THIS	EventState	0	RET	FastMath.abs($.pendingEventTime - t) <= $.convergence
2672	329	8	EventState.java	reset	THIS	EventState	0	RET	$.pendingEvent
2672	329	8	EventState.java	reset	t	double	0	RET	FastMath.abs(pendingEventTime - $) <= convergence
2673	333	8	EventState.java	reset	THIS	EventState	0	DEF	$.nextAction == EventHandler.$.Action.RESET_STATE
31426	174	8	ExceptionContext.java	buildMessage	i	int	0	NIL-FOR	$ < len
31426	174	8	ExceptionContext.java	buildMessage	len	int	0	NIL-FOR	i < $
2487	180	12	ExceptionContext.java	buildMessage	count	int	0	DEF	++$ < len
2487	180	12	ExceptionContext.java	buildMessage	len	int	0	DEF	++count < $
31427	228	8	ExceptionContext.java	serializeMessages	i	int	0	NIL-FOR	$ < len
31427	228	8	ExceptionContext.java	serializeMessages	len	int	0	NIL-FOR	i < $
31428	236	12	ExceptionContext.java	serializeMessages	j	int	0	NIL-FOR	$ < aLen
31428	236	12	ExceptionContext.java	serializeMessages	aLen	int	0	NIL-FOR	j < $
2488	237	16	ExceptionContext.java	serializeMessages	j	int	1	DEF	args[$] instanceof Serializable
2488	237	16	ExceptionContext.java	serializeMessages	args	Object[]	1	DEF	$[j] instanceof Serializable
31429	263	8	ExceptionContext.java	deSerializeMessages	i	int	0	NIL-FOR	$ < len
31429	263	8	ExceptionContext.java	deSerializeMessages	len	int	0	NIL-FOR	i < $
31430	270	12	ExceptionContext.java	deSerializeMessages	j	int	0	NIL-FOR	$ < aLen
31430	270	12	ExceptionContext.java	deSerializeMessages	aLen	int	0	NIL-FOR	j < $
2489	293	12	ExceptionContext.java	serializeContext	value	Object	1	DEF	$ instanceof Serializable
31431	316	8	ExceptionContext.java	deSerializeContext	i	int	0	NIL-FOR	$ < len
31431	316	8	ExceptionContext.java	deSerializeContext	len	int	0	NIL-FOR	i < $
2704	96	8	ExpandableStatefulODE.java	getTotalDimension	THIS	ExpandableStatefulODE	1	RET	$.components.isEmpty()
2705	135	8	ExpandableStatefulODE.java	addSecondaryEquations	THIS	ExpandableStatefulODE	1	DEF	$.components.isEmpty()
31601	164	8	ExpandableStatefulODE.java	getSecondaryMappers	THIS	ExpandableStatefulODE	0	NIL-FOR	i < mappers.$.length
31601	164	8	ExpandableStatefulODE.java	getSecondaryMappers	i	int	0	NIL-FOR	$ < mappers.length
31601	164	8	ExpandableStatefulODE.java	getSecondaryMappers	mappers	EquationsMapper[]	0	NIL-FOR	i < $.length
2706	192	8	ExpandableStatefulODE.java	setPrimaryState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	primaryState.$.length != $.primaryState.length
2706	192	8	ExpandableStatefulODE.java	setPrimaryState	primaryState	double[]	0	DimensionMismatchException	$.length != this.primaryState.length
2707	229	8	ExpandableStatefulODE.java	setSecondaryState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	secondaryState.$.length != localArray.$.length
2707	229	8	ExpandableStatefulODE.java	setSecondaryState	localArray	double[]	0	DimensionMismatchException	secondaryState.length != $.length
2707	229	8	ExpandableStatefulODE.java	setSecondaryState	secondaryState	double[]	0	DimensionMismatchException	$.length != localArray.length
2708	265	8	ExpandableStatefulODE.java	setCompleteState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	completeState.$.length != $.getTotalDimension()
2708	265	8	ExpandableStatefulODE.java	setCompleteState	completeState	double[]	0	DimensionMismatchException	$.length != getTotalDimension()
994	64	8	ExponentialDistribution.java	ExponentialDistribution	mean	double	0	NotStrictlyPositiveException	$ <= 0
995	93	8	ExponentialDistribution.java	density	x	double	0	RET	$ < 0
996	111	8	ExponentialDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
997	129	8	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
997	129	8	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
998	131	15	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1.0
1036	89	8	FDistribution.java	FDistribution	numeratorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1037	93	8	FDistribution.java	FDistribution	denominatorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1038	144	8	FDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0
1039	193	8	FDistribution.java	getNumericalMean	denominatorDF	double	0	RET	$ > 2
1040	214	8	FDistribution.java	getNumericalVariance	THIS	FDistribution	0	DEF	$.numericalVarianceIsCalculated
1041	229	8	FDistribution.java	calculateNumericalVariance	denominatorDF	double	0	RET	$ > 4
2490	98	8	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	0	RET	type == $.TransformType.FORWARD
2490	98	8	FastCosineTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
2491	99	12	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	0	RET	$.normalization == $.DctNormalization.ORTHOGONAL_DCT_I
2492	107	8	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	1	DEF	$.normalization == $.DctNormalization.ORTHOGONAL_DCT_I
2493	147	8	FastCosineTransformer.java	fct	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
2494	152	8	FastCosineTransformer.java	fct	n	int	0	RET	$ == 1
31432	164	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
31432	164	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
31433	179	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
31433	179	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
31446	139	8	FastFourierTransformer.java	bitReversalShuffle2	i	int	0	NIL-FOR	$ < n
31446	139	8	FastFourierTransformer.java	bitReversalShuffle2	n	int	0	NIL-FOR	i < $
2506	140	12	FastFourierTransformer.java	bitReversalShuffle2	i	int	0	DEF	$ < j
2506	140	12	FastFourierTransformer.java	bitReversalShuffle2	j	int	0	DEF	i < $
31447	152	12	FastFourierTransformer.java	bitReversalShuffle2	k	int	0	NIL-WHILE	$ <= j
31447	152	12	FastFourierTransformer.java	bitReversalShuffle2	k	int	0	NIL-WHILE	$ > 0
31447	152	12	FastFourierTransformer.java	bitReversalShuffle2	j	int	0	NIL-WHILE	k <= $
2507	178	16	FastFourierTransformer.java	normalizeTransformedData	THIS	FastFourierTransformer	0	DEF	type == $.TransformType.INVERSE
2507	178	16	FastFourierTransformer.java	normalizeTransformedData	type	TransformType	0	DEF	$ == TransformType.INVERSE
31448	180	20	FastFourierTransformer.java	normalizeTransformedData	i	int	0	NIL-FOR	$ < n
31448	180	20	FastFourierTransformer.java	normalizeTransformedData	n	int	0	NIL-FOR	i < $
31449	188	16	FastFourierTransformer.java	normalizeTransformedData	i	int	0	NIL-FOR	$ < n
31449	188	16	FastFourierTransformer.java	normalizeTransformedData	n	int	0	NIL-FOR	i < $
2508	227	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DimensionMismatchException	dataRI.$.length != 2
2508	227	8	FastFourierTransformer.java	transformInPlace	dataRI	double[][]	0	DimensionMismatchException	$.length != 2
2509	232	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DimensionMismatchException	dataR.$.length != dataI.$.length
2509	232	8	FastFourierTransformer.java	transformInPlace	dataR	double[]	0	DimensionMismatchException	$.length != dataI.length
2509	232	8	FastFourierTransformer.java	transformInPlace	dataI	double[]	0	DimensionMismatchException	dataR.length != $.length
2510	237	8	FastFourierTransformer.java	transformInPlace	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
2511	243	8	FastFourierTransformer.java	transformInPlace	n	int	1	RET	$ == 1
2512	245	15	FastFourierTransformer.java	transformInPlace	n	int	0	RET	$ == 2
2513	265	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	1	DEF	type == $.TransformType.INVERSE
2513	265	8	FastFourierTransformer.java	transformInPlace	type	TransformType	1	DEF	$ == TransformType.INVERSE
31450	266	12	FastFourierTransformer.java	transformInPlace	i0	int	0	NIL-FOR	$ < n
31450	266	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	i0 < $
31451	295	12	FastFourierTransformer.java	transformInPlace	i0	int	0	NIL-FOR	$ < n
31451	295	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	i0 < $
31452	327	8	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-WHILE	lastN0 < $
31452	327	8	FastFourierTransformer.java	transformInPlace	lastN0	int	0	NIL-WHILE	$ < n
2514	332	12	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DEF	type == $.TransformType.INVERSE
2514	332	12	FastFourierTransformer.java	transformInPlace	type	TransformType	0	DEF	$ == TransformType.INVERSE
31453	337	12	FastFourierTransformer.java	transformInPlace	destEvenStartIndex	int	0	NIL-FOR	$ < n
31453	337	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	destEvenStartIndex < $
31454	343	16	FastFourierTransformer.java	transformInPlace	r	int	0	NIL-FOR	$ < lastN0
31454	343	16	FastFourierTransformer.java	transformInPlace	lastN0	int	0	NIL-FOR	r < $
31455	456	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize.$.length
31455	456	8	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize.length
31455	456	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $.length
2515	478	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == dimensionSize.$.length
2515	478	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	1	DEF	subVector.length == $.length
2515	478	8	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == dimensionSize.length
31456	480	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
31456	480	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
31456	480	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
31457	488	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
31457	488	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
31457	488	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
2516	495	12	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == d
2516	495	12	FastFourierTransformer.java	mdfft	d	int	1	DEF	subVector.length == $
2516	495	12	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == d
31458	501	16	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize[subVector.$.length]
31458	501	16	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[subVector.length]
31458	501	16	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[subVector.length]
31458	501	16	FastFourierTransformer.java	mdfft	subVector	int[]	0	NIL-FOR	i < dimensionSize[$.length]
2498	50	8	FastHadamardTransformer.java	transform	THIS	FastHadamardTransformer	0	RET	type == $.TransformType.FORWARD
2498	50	8	FastHadamardTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
2499	235	8	FastHadamardTransformer.java	fht	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
31438	249	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
31438	249	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
31439	257	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
31439	257	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
31440	262	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
31440	262	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
2500	287	8	FastHadamardTransformer.java	fht	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
31441	301	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
31441	301	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
31442	309	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
31442	309	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
31443	314	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
31443	314	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
235	361	8	FastMath.java	doubleHighPart	d	double	0	RET	$ < Precision.SAFE_MIN
235	361	8	FastMath.java	doubleHighPart	d	double	0	RET	$ > -Precision.SAFE_MIN
236	383	6	FastMath.java	cosh	x	double	0	RET	$ != $
237	392	6	FastMath.java	cosh	x	double	0	RET	$ > 20.0
238	396	6	FastMath.java	cosh	x	double	0	RET	$ < -20
239	401	6	FastMath.java	cosh	x	double	0	DEF	$ < 0.0
240	443	6	FastMath.java	sinh	x	double	0	RET	$ != $
241	452	6	FastMath.java	sinh	x	double	0	RET	$ > 20.0
242	456	6	FastMath.java	sinh	x	double	0	RET	$ < -20
243	460	6	FastMath.java	sinh	x	double	0	RET	$ == 0
244	464	6	FastMath.java	sinh	x	double	0	DEF	$ < 0.0
245	471	6	FastMath.java	sinh	x	double	1	DEF	$ > 0.25
246	545	6	FastMath.java	sinh	negate	boolean	0	DEF	$
247	559	6	FastMath.java	tanh	x	double	0	RET	$ != $
248	569	6	FastMath.java	tanh	x	double	0	RET	$ > 20.0
249	573	6	FastMath.java	tanh	x	double	0	RET	$ < -20
250	577	6	FastMath.java	tanh	x	double	0	RET	$ == 0
251	581	6	FastMath.java	tanh	x	double	0	DEF	$ < 0.0
252	587	6	FastMath.java	tanh	x	double	1	DEF	$ >= 0.5
253	669	6	FastMath.java	tanh	negate	boolean	0	DEF	$
254	690	8	FastMath.java	asinh	a	double	0	DEF	$ < 0
255	696	8	FastMath.java	asinh	a	double	1	DEF	$ > 0.167
256	700	12	FastMath.java	asinh	a	double	1	DEF	$ > 0.097
257	702	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.036
258	704	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.0036
259	720	8	FastMath.java	atanh	a	double	0	DEF	$ < 0
260	726	8	FastMath.java	atanh	a	double	1	DEF	$ > 0.15
261	730	12	FastMath.java	atanh	a	double	1	DEF	$ > 0.087
262	732	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.031
263	734	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.003
264	826	8	FastMath.java	exp	x	double	1	RET	$ < 0.0
265	829	12	FastMath.java	exp	intVal	int	0	RET	$ > 746
266	830	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
267	837	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
268	840	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
269	847	12	FastMath.java	exp	intVal	int	0	RET	$ == 709
270	850	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
271	866	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
272	867	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
273	919	8	FastMath.java	exp	extra	double	1	DEF	$ != 0.0
274	925	8	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
275	948	8	FastMath.java	expm1	x	double	0	RET	$ != $
275	948	8	FastMath.java	expm1	x	double	0	RET	$ == 0.0
276	952	8	FastMath.java	expm1	x	double	0	RET	$ <= -1.0
276	952	8	FastMath.java	expm1	x	double	0	RET	$ >= 1.0
277	957	12	FastMath.java	expm1	x	double	1	RET	$ > 0.0
278	972	8	FastMath.java	expm1	x	double	0	DEF	$ < 0.0
279	1048	8	FastMath.java	expm1	negative	boolean	0	DEF	$
280	1081	8	FastMath.java	expm1	hiPrecOut	double	0	DEF	$ != null
281	1106	8	FastMath.java	log	x	double	0	RET	$==0
282	1112	8	FastMath.java	log	bits	long	0	RET	($ & 0x8000000000000000L) != 0
282	1112	8	FastMath.java	log	x	double	0	RET	$ != $
283	1113	12	FastMath.java	log	x	double	0	RET	$ != 0.0
284	1114	16	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
285	1123	8	FastMath.java	log	x	double	0	RET	$ == Double.POSITIVE_INFINITY
286	1124	12	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
287	1134	8	FastMath.java	log	bits	long	0	RET	($ & 0x7ff0000000000000L) == 0
288	1136	12	FastMath.java	log	x	double	0	RET	$ == 0
289	1138	16	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
30074	1147	12	FastMath.java	log	bits	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
290	1154	8	FastMath.java	log	exp	int	0	RET	$ == 0
290	1154	8	FastMath.java	log	exp	int	0	RET	$ == -1
291	1155	12	FastMath.java	log	x	double	0	RET	$ > 0.99
291	1155	12	FastMath.java	log	x	double	0	RET	$ < 1.01
291	1155	12	FastMath.java	log	hiPrec	double[]	0	RET	$ == null
30075	1171	16	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
292	1218	8	FastMath.java	log	hiPrec	double[]	1	DEF	$ != null
30076	1236	12	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
293	1319	8	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
294	1333	8	FastMath.java	log1p	x	double	0	RET	$ == -1
295	1337	8	FastMath.java	log1p	x	double	0	RET	$ > 0
295	1337	8	FastMath.java	log1p	x	double	0	RET	1/$ == 0
296	1341	8	FastMath.java	log1p	x	double	0	RET	$>1e-6
296	1341	8	FastMath.java	log1p	x	double	0	RET	$<-1e-6
297	1348	12	FastMath.java	log1p	lores	double	0	RET	Double.isInfinite($)
298	1378	8	FastMath.java	log10	lores	double	0	RET	Double.isInfinite($)
299	1422	8	FastMath.java	pow	y	double	0	RET	$ == 0.0
300	1426	8	FastMath.java	pow	x	double	0	RET	$ != $
301	1431	8	FastMath.java	pow	x	double	0	RET	$ == 0
302	1433	12	FastMath.java	pow	bits	long	0	RET	($ & 0x8000000000000000L) != 0
303	1437	16	FastMath.java	pow	yi	long	0	RET	y == $
303	1437	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
303	1437	16	FastMath.java	pow	y	double	0	RET	$ == yi
303	1437	16	FastMath.java	pow	y	double	0	RET	$ < 0
304	1441	16	FastMath.java	pow	yi	long	0	RET	y == $
304	1441	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
304	1441	16	FastMath.java	pow	y	double	0	RET	$ == yi
304	1441	16	FastMath.java	pow	y	double	0	RET	$ > 0
305	1446	12	FastMath.java	pow	y	double	0	RET	$ < 0
306	1449	12	FastMath.java	pow	y	double	0	RET	$ > 0
307	1456	8	FastMath.java	pow	x	double	0	RET	$ == Double.POSITIVE_INFINITY
308	1457	12	FastMath.java	pow	y	double	0	RET	$ != $
309	1460	12	FastMath.java	pow	y	double	1	RET	$ < 0.0
310	1467	8	FastMath.java	pow	y	double	0	RET	$ == Double.POSITIVE_INFINITY
311	1468	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
312	1472	12	FastMath.java	pow	x	double	1	RET	$ * $ > 1.0
313	1479	8	FastMath.java	pow	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
314	1480	12	FastMath.java	pow	y	double	0	RET	$ != $
315	1484	12	FastMath.java	pow	y	double	0	RET	$ < 0
316	1486	16	FastMath.java	pow	yi	long	0	RET	y == $
316	1486	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
316	1486	16	FastMath.java	pow	y	double	0	RET	$ == yi
317	1493	12	FastMath.java	pow	y	double	0	RET	$ > 0
318	1495	16	FastMath.java	pow	yi	long	0	RET	y == $
318	1495	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
318	1495	16	FastMath.java	pow	y	double	0	RET	$ == yi
319	1503	8	FastMath.java	pow	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
320	1505	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
321	1509	12	FastMath.java	pow	x	double	1	RET	$ * $ < 1.0
322	1517	8	FastMath.java	pow	x	double	0	RET	$ < 0
323	1519	12	FastMath.java	pow	THIS	FastMath	0	RET	y >= $.TWO_POWER_52
323	1519	12	FastMath.java	pow	THIS	FastMath	0	RET	y <= -$.TWO_POWER_52
323	1519	12	FastMath.java	pow	y	double	0	RET	$ >= TWO_POWER_52
323	1519	12	FastMath.java	pow	y	double	0	RET	$ <= -TWO_POWER_52
324	1523	12	FastMath.java	pow	y	double	1	RET	$ == (long) $
325	1534	8	FastMath.java	pow	y	double	1	DEF	$ < 8e298
325	1534	8	FastMath.java	pow	y	double	1	DEF	$ > -8e298
326	1547	8	FastMath.java	pow	lores	double	0	RET	Double.isInfinite($)
327	1729	8	FastMath.java	sinQ	xb	double	0	DEF	$ != 0.0
328	1859	8	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
329	1892	8	FastMath.java	tanQ	xb	double	0	DEF	$ != 0.0
330	1896	12	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
331	1938	8	FastMath.java	reducePayneHanek	shift	int	1	DEF	$ != 0
332	1969	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
332	1969	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
332	1969	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
332	1969	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
332	1969	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
333	1983	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
333	1983	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
333	1983	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
333	1983	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
333	1983	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
334	2003	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
334	2003	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
334	2003	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
334	2003	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
334	2003	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
335	2055	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
335	2055	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
335	2055	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
335	2055	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
335	2055	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
336	2069	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
336	2069	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
336	2069	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
336	2069	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
336	2069	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
337	2089	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
337	2089	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
337	2089	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
337	2089	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
337	2089	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
338	2111	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
338	2111	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
338	2111	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
338	2111	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
338	2111	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
339	2142	8	FastMath.java	sin	x	double	0	DEF	$ < 0
340	2148	8	FastMath.java	sin	xa	double	0	RET	$ == 0.0
341	2150	12	FastMath.java	sin	bits	long	0	RET	$ < 0
342	2156	8	FastMath.java	sin	xa	double	0	RET	$ != $
342	2156	8	FastMath.java	sin	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
343	2161	8	FastMath.java	sin	xa	double	1	DEF	$ > 3294198.0
344	2170	15	FastMath.java	sin	xa	double	0	DEF	$ > 1.5707963267948966
345	2195	16	FastMath.java	sin	remA	double	0	DEF	$ > 0.0
346	2209	8	FastMath.java	sin	negative	boolean	0	DEF	$
347	2237	8	FastMath.java	cos	x	double	0	DEF	$ < 0
348	2241	8	FastMath.java	cos	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
348	2241	8	FastMath.java	cos	xa	double	0	RET	$ != $
349	2247	8	FastMath.java	cos	xa	double	1	DEF	$ > 3294198.0
350	2256	15	FastMath.java	cos	xa	double	0	DEF	$ > 1.5707963267948966
351	2281	16	FastMath.java	cos	remA	double	0	DEF	$ > 0.0
352	2323	8	FastMath.java	tan	x	double	0	DEF	$ < 0
353	2329	8	FastMath.java	tan	xa	double	0	RET	$ == 0.0
354	2331	12	FastMath.java	tan	bits	long	0	RET	$ < 0
355	2337	8	FastMath.java	tan	xa	double	0	RET	$ != $
355	2337	8	FastMath.java	tan	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
356	2343	8	FastMath.java	tan	xa	double	1	DEF	$ > 3294198.0
357	2352	15	FastMath.java	tan	xa	double	0	DEF	$ > 1.5707963267948966
358	2377	16	FastMath.java	tan	remA	double	0	DEF	$ > 0.0
359	2391	8	FastMath.java	tan	xa	double	0	DEF	$ > 1.5
360	2407	8	FastMath.java	tan	quadrant	int	1	DEF	($ & 1) == 0
361	2413	8	FastMath.java	tan	negative	boolean	0	DEF	$
362	2439	8	FastMath.java	atan	xa	double	0	RET	$ == 0.0
363	2443	8	FastMath.java	atan	xa	double	0	DEF	$ < 0
364	2450	8	FastMath.java	atan	xa	double	0	RET	$ > 1.633123935319537E16
365	2455	8	FastMath.java	atan	xa	double	1	DEF	$ < 1
366	2477	8	FastMath.java	atan	idx	int	1	DEF	$ == 0
367	2555	8	FastMath.java	atan	leftPlane	boolean	0	DEF	$
368	2569	8	FastMath.java	atan	negate	boolean	0	DEF	$ ^ leftPlane
368	2569	8	FastMath.java	atan	leftPlane	boolean	0	DEF	negate ^ $
369	2583	8	FastMath.java	atan2	y	double	0	RET	$ != $
369	2583	8	FastMath.java	atan2	x	double	0	RET	$ != $
370	2587	8	FastMath.java	atan2	y	double	0	RET	$ == 0
371	2592	12	FastMath.java	atan2	invx	double	0	RET	$ == 0
372	2593	16	FastMath.java	atan2	x	double	1	RET	$ > 0
373	2600	12	FastMath.java	atan2	invx	double	1	RET	$ < 0
373	2600	12	FastMath.java	atan2	x	double	1	RET	$ < 0
374	2601	16	FastMath.java	atan2	invy	double	1	RET	$ < 0
374	2601	16	FastMath.java	atan2	y	double	1	RET	$ < 0
375	2613	8	FastMath.java	atan2	y	double	0	RET	$ == Double.POSITIVE_INFINITY
376	2614	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
377	2618	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
378	2625	8	FastMath.java	atan2	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
379	2626	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
380	2630	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
381	2637	8	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
382	2638	12	FastMath.java	atan2	y	double	0	RET	$ > 0
382	2638	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0
383	2642	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
383	2642	12	FastMath.java	atan2	y	double	0	RET	$ < 0
384	2647	8	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
385	2649	12	FastMath.java	atan2	y	double	0	RET	$ > 0.0
385	2649	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0.0
386	2653	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
386	2653	12	FastMath.java	atan2	y	double	0	RET	$ < 0
387	2660	8	FastMath.java	atan2	x	double	0	RET	$ == 0
388	2661	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0
388	2661	12	FastMath.java	atan2	y	double	0	RET	$ > 0
389	2665	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
389	2665	12	FastMath.java	atan2	y	double	0	RET	$ < 0
390	2672	8	FastMath.java	atan2	r	double	0	RET	Double.isInfinite($)
391	2689	8	FastMath.java	atan2	ra	double	0	DEF	$ == 0
392	2704	6	FastMath.java	asin	x	double	0	RET	$ != $
393	2708	6	FastMath.java	asin	x	double	0	RET	$ > 1.0
393	2708	6	FastMath.java	asin	x	double	0	RET	$ < -1.0
394	2712	6	FastMath.java	asin	x	double	0	RET	$ == 1.0
395	2716	6	FastMath.java	asin	x	double	0	RET	$ == -1.0
396	2720	6	FastMath.java	asin	x	double	0	RET	$ == 0.0
397	2780	6	FastMath.java	acos	x	double	0	RET	$ != $
398	2784	6	FastMath.java	acos	x	double	0	RET	$ > 1.0
398	2784	6	FastMath.java	acos	x	double	0	RET	$ < -1.0
399	2788	6	FastMath.java	acos	x	double	0	RET	$ == -1.0
400	2792	6	FastMath.java	acos	x	double	0	RET	$ == 1.0
401	2796	6	FastMath.java	acos	x	double	0	RET	$ == 0
402	2840	6	FastMath.java	acos	r	double	0	RET	Double.isInfinite($)
403	2867	6	FastMath.java	cbrt	exponent	int	0	RET	$ == -1023
404	2868	10	FastMath.java	cbrt	x	double	0	RET	$ == 0
405	2879	6	FastMath.java	cbrt	exponent	int	0	RET	$ == 1024
406	2934	6	FastMath.java	cbrt	subnormal	boolean	0	DEF	$
407	2948	8	FastMath.java	toRadians	x	double	0	RET	Double.isInfinite($)
407	2948	8	FastMath.java	toRadians	x	double	0	RET	$ == 0.0
408	2960	8	FastMath.java	toRadians	result	double	0	DEF	$ == 0
409	2973	8	FastMath.java	toDegrees	x	double	0	RET	$ == 0.0
409	2973	8	FastMath.java	toDegrees	x	double	0	RET	Double.isInfinite($)
410	3029	8	FastMath.java	ulp	x	double	0	RET	Double.isInfinite($)
411	3041	8	FastMath.java	ulp	x	float	0	RET	Float.isInfinite($)
412	3056	8	FastMath.java	scalb	n	int	0	RET	$ > -1023
412	3056	8	FastMath.java	scalb	n	int	0	RET	$ < 1024
413	3061	8	FastMath.java	scalb	d	double	0	RET	$ == 0
413	3061	8	FastMath.java	scalb	d	double	0	RET	Double.isInfinite($)
413	3061	8	FastMath.java	scalb	d	double	0	RET	Double.isNaN($)
414	3064	8	FastMath.java	scalb	n	int	0	RET	$ < -2098
415	3067	8	FastMath.java	scalb	n	int	0	RET	$ > 2097
416	3080	8	FastMath.java	scalb	n	int	1	RET	$ < 0
417	3082	12	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
418	3085	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -53
419	3094	16	FastMath.java	scalb	mostSignificantLostBit	long	0	DEF	$ != 0
420	3106	12	FastMath.java	scalb	exponent	int	1	RET	$ == 0
30077	3109	16	FastMath.java	scalb	mantissa	long	0	NIL-WHILE	($ >>> 52) != 1
421	3116	16	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
422	3122	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
423	3140	8	FastMath.java	scalb	n	int	0	RET	$ > -127
423	3140	8	FastMath.java	scalb	n	int	0	RET	$ < 128
424	3145	8	FastMath.java	scalb	f	float	0	RET	$ == 0f
424	3145	8	FastMath.java	scalb	f	float	0	RET	Float.isNaN($)
424	3145	8	FastMath.java	scalb	f	float	0	RET	Float.isInfinite($)
425	3148	8	FastMath.java	scalb	n	int	0	RET	$ < -277
426	3151	8	FastMath.java	scalb	n	int	0	RET	$ > 276
427	3164	8	FastMath.java	scalb	n	int	1	RET	$ < 0
428	3166	12	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
429	3169	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -24
430	3178	16	FastMath.java	scalb	mostSignificantLostBit	int	0	DEF	$ != 0
431	3190	12	FastMath.java	scalb	exponent	int	1	RET	$ == 0
30078	3193	16	FastMath.java	scalb	mantissa	int	0	NIL-WHILE	($ >>> 23) != 1
432	3200	16	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
433	3206	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
434	3249	8	FastMath.java	nextAfter	d	double	1	RET	Double.isNaN($)
434	3249	8	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
435	3251	15	FastMath.java	nextAfter	d	double	1	RET	$ == direction
435	3251	15	FastMath.java	nextAfter	direction	double	1	RET	d == $
436	3253	15	FastMath.java	nextAfter	d	double	1	RET	Double.isInfinite($)
437	3255	15	FastMath.java	nextAfter	d	double	0	RET	$ == 0
438	3263	8	FastMath.java	nextAfter	sign	long	1	RET	(direction < d) ^ ($ == 0L)
438	3263	8	FastMath.java	nextAfter	d	double	1	RET	(direction < $) ^ (sign == 0L)
438	3263	8	FastMath.java	nextAfter	direction	double	1	RET	($ < d) ^ (sign == 0L)
439	3305	8	FastMath.java	nextAfter	f	float	1	RET	Double.isNaN($)
439	3305	8	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
440	3307	15	FastMath.java	nextAfter	f	float	1	RET	$ == direction
440	3307	15	FastMath.java	nextAfter	direction	double	1	RET	f == $
441	3309	15	FastMath.java	nextAfter	f	float	1	RET	Float.isInfinite($)
442	3311	15	FastMath.java	nextAfter	f	float	0	RET	$ == 0f
443	3319	8	FastMath.java	nextAfter	sign	int	1	RET	(direction < f) ^ ($ == 0)
443	3319	8	FastMath.java	nextAfter	f	float	1	RET	(direction < $) ^ (sign == 0)
443	3319	8	FastMath.java	nextAfter	direction	double	1	RET	($ < f) ^ (sign == 0)
444	3334	8	FastMath.java	floor	x	double	0	RET	$ != $
445	3338	8	FastMath.java	floor	THIS	FastMath	0	RET	x >= $.TWO_POWER_52
445	3338	8	FastMath.java	floor	THIS	FastMath	0	RET	x <= -$.TWO_POWER_52
445	3338	8	FastMath.java	floor	x	double	0	RET	$ >= TWO_POWER_52
445	3338	8	FastMath.java	floor	x	double	0	RET	$ <= -TWO_POWER_52
446	3343	8	FastMath.java	floor	y	long	0	DEF	$ != x
446	3343	8	FastMath.java	floor	x	double	0	DEF	$ < 0
446	3343	8	FastMath.java	floor	x	double	0	DEF	y != $
447	3347	8	FastMath.java	floor	y	long	0	RET	$ == 0
448	3361	8	FastMath.java	ceil	x	double	0	RET	$ != $
449	3366	8	FastMath.java	ceil	y	double	0	RET	$ == x
449	3366	8	FastMath.java	ceil	x	double	0	RET	y == $
450	3372	8	FastMath.java	ceil	y	double	0	RET	$ == 0
451	3387	8	FastMath.java	rint	d	double	0	RET	$ > 0.5
452	3388	12	FastMath.java	rint	y	double	0	RET	$ == -1.0
453	3393	8	FastMath.java	rint	d	double	0	RET	$ < 0.5
454	3442	8	FastMath.java	min	a	float	0	RET	$ > b
454	3442	8	FastMath.java	min	b	float	0	RET	a > $
455	3445	8	FastMath.java	min	a	float	0	RET	$ < b
455	3445	8	FastMath.java	min	b	float	0	RET	a < $
456	3449	8	FastMath.java	min	a	float	0	RET	$ != b
456	3449	8	FastMath.java	min	b	float	0	RET	a != $
457	3455	8	FastMath.java	min	bits	int	0	RET	$ == 0x80000000
458	3467	8	FastMath.java	min	a	double	0	RET	$ > b
458	3467	8	FastMath.java	min	b	double	0	RET	a > $
459	3470	8	FastMath.java	min	a	double	0	RET	$ < b
459	3470	8	FastMath.java	min	b	double	0	RET	a < $
460	3474	8	FastMath.java	min	a	double	0	RET	$ != b
460	3474	8	FastMath.java	min	b	double	0	RET	a != $
461	3480	8	FastMath.java	min	bits	long	0	RET	$ == 0x8000000000000000L
462	3510	8	FastMath.java	max	a	float	0	RET	$ > b
462	3510	8	FastMath.java	max	b	float	0	RET	a > $
463	3513	8	FastMath.java	max	a	float	0	RET	$ < b
463	3513	8	FastMath.java	max	b	float	0	RET	a < $
464	3517	8	FastMath.java	max	a	float	0	RET	$ != b
464	3517	8	FastMath.java	max	b	float	0	RET	a != $
465	3523	8	FastMath.java	max	bits	int	0	RET	$ == 0x80000000
466	3535	8	FastMath.java	max	a	double	0	RET	$ > b
466	3535	8	FastMath.java	max	b	double	0	RET	a > $
467	3538	8	FastMath.java	max	a	double	0	RET	$ < b
467	3538	8	FastMath.java	max	b	double	0	RET	a < $
468	3542	8	FastMath.java	max	a	double	0	RET	$ != b
468	3542	8	FastMath.java	max	b	double	0	RET	a != $
469	3548	8	FastMath.java	max	bits	long	0	RET	$ == 0x8000000000000000L
470	3569	8	FastMath.java	hypot	x	double	1	RET	Double.isInfinite($)
470	3569	8	FastMath.java	hypot	y	double	1	RET	Double.isInfinite($)
471	3571	15	FastMath.java	hypot	x	double	1	RET	Double.isNaN($)
471	3571	15	FastMath.java	hypot	y	double	1	RET	Double.isNaN($)
472	3577	12	FastMath.java	hypot	expX	int	1	RET	$ > expY + 27
472	3577	12	FastMath.java	hypot	expY	int	1	RET	expX > $ + 27
473	3580	19	FastMath.java	hypot	expX	int	1	RET	expY > $ + 27
473	3580	19	FastMath.java	hypot	expY	int	1	RET	$ > expX + 27
474	3638	8	FastMath.java	copySign	m	long	0	RET	$ >= 0
474	3638	8	FastMath.java	copySign	m	long	0	RET	$ < 0
474	3638	8	FastMath.java	copySign	s	long	0	RET	$ >= 0
474	3638	8	FastMath.java	copySign	s	long	0	RET	$ < 0
475	3655	8	FastMath.java	copySign	m	int	0	RET	$ < 0
475	3655	8	FastMath.java	copySign	m	int	0	RET	$ >= 0
475	3655	8	FastMath.java	copySign	s	int	0	RET	$ < 0
475	3655	8	FastMath.java	copySign	s	int	0	RET	$ >= 0
30060	108	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < 7
30061	121	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < SINE_TABLE_LEN
149	128	12	FastMathCalc.java	buildSinCosTables	i	int	1	DEF	($ & 1) == 0
30062	177	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < SINE_TABLE_LEN
30063	215	8	FastMathCalc.java	slowCos	i	int	0	NIL-FOR	$ >= 0
150	219	12	FastMathCalc.java	slowCos	i	int	0	DEF	($ & 1) != 0
151	226	12	FastMathCalc.java	slowCos	i	int	0	DEF	($ & 2) != 0
152	235	8	FastMathCalc.java	slowCos	result	double	0	DEF	$ != null
30064	259	8	FastMathCalc.java	slowSin	i	int	0	NIL-FOR	$ >= 0
153	263	12	FastMathCalc.java	slowSin	i	int	0	DEF	($ & 1) == 0
154	270	12	FastMathCalc.java	slowSin	i	int	0	DEF	($ & 2) != 0
155	279	8	FastMathCalc.java	slowSin	result	double	0	DEF	$ != null
30065	303	8	FastMathCalc.java	slowexp	i	int	0	NIL-FOR	$ >= 0
156	316	8	FastMathCalc.java	slowexp	result	double	0	DEF	$ != null
157	330	8	FastMathCalc.java	split	d	double	1	DEF	$ < 8e298
157	330	8	FastMathCalc.java	split	d	double	1	DEF	$ > -8e298
158	349	8	FastMathCalc.java	resplit	c	double	1	DEF	$ > -8e298
158	349	8	FastMathCalc.java	resplit	c	double	1	DEF	$ < 8e298
159	407	8	FastMathCalc.java	splitReciprocal	in	double	0	DEF	$[0] == 0.0
160	415	8	FastMathCalc.java	splitReciprocal	result	double	0	DEF	$[1] != $[1]
30066	422	8	FastMathCalc.java	splitReciprocal	i	int	0	NIL-FOR	$ < 2
30067	510	8	FastMathCalc.java	expint	p	int	0	NIL-WHILE	$ > 0
161	511	12	FastMathCalc.java	expint	p	int	0	DEF	($ & 1) != 0
162	522	8	FastMathCalc.java	expint	result	double	0	DEF	$ != null
30068	578	8	FastMathCalc.java	slowLog	i	int	0	NIL-FOR	$ >= 0
163	639	8	FastMathCalc.java	format	d	double	1	RET	$ != $
164	654	8	FastMathCalc.java	checkLen	expectedLen	int	0	DimensionMismatchException	$ != actual
164	654	8	FastMathCalc.java	checkLen	actual	int	0	DimensionMismatchException	expectedLen != $
2501	105	8	FastSineTransformer.java	transform	THIS	FastSineTransformer	0	RET	$.normalization == $.DstNormalization.ORTHOGONAL_DST_I
2502	109	8	FastSineTransformer.java	transform	THIS	FastSineTransformer	0	RET	type == $.TransformType.FORWARD
2502	109	8	FastSineTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
2503	150	8	FastSineTransformer.java	fst	THIS	FastSineTransformer	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo(f.$.length)
2503	150	8	FastSineTransformer.java	fst	f	double[]	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($.length)
2504	155	8	FastSineTransformer.java	fst	f	double[]	0	MathIllegalArgumentException	$[0] != 0.0
2505	161	8	FastSineTransformer.java	fst	n	int	0	RET	$ == 1
31444	170	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
31444	170	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
31445	183	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
31445	183	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
1366	87	8	FieldLUDecomposition.java	FieldLUDecomposition	matrix	FieldMatrix<T>	0	NonSquareMatrixException	$.isSquare()
30589	101	8	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
30589	101	8	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
30590	108	8	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	$ < m
30590	108	8	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	col < $
30591	113	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < col
30591	113	12	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	row < $
30592	116	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < row
30592	116	16	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	i < $
30593	124	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
30593	124	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
30594	127	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < col
30594	127	16	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	i < $
1367	132	16	FieldLUDecomposition.java	FieldLUDecomposition	THIS	FieldLUDecomposition	0	DEF	$.lu[nonZero][col].equals($.field.getZero())
1367	132	16	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	DEF	lu[$][col].equals(field.getZero())
1367	132	16	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	DEF	lu[nonZero][$].equals(field.getZero())
1368	139	12	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	RET	$ >= m
1368	139	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	RET	nonZero >= $
1369	145	12	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	DEF	$ != col
1369	145	12	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	DEF	nonZero != $
30595	147	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < m
30595	147	16	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	i < $
30596	160	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
30596	160	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
1370	174	8	FieldLUDecomposition.java	getL	THIS	FieldLUDecomposition	0	DEF	$.singular
1370	174	8	FieldLUDecomposition.java	getL	THIS	FieldLUDecomposition	0	DEF	$.cachedL == null
30597	177	12	FieldLUDecomposition.java	getL	i	int	0	NIL-FOR	$ < m
30597	177	12	FieldLUDecomposition.java	getL	m	int	0	NIL-FOR	i < $
30598	179	16	FieldLUDecomposition.java	getL	j	int	0	NIL-FOR	$ < i
30598	179	16	FieldLUDecomposition.java	getL	i	int	0	NIL-FOR	j < $
1371	194	8	FieldLUDecomposition.java	getU	THIS	FieldLUDecomposition	0	DEF	$.cachedU == null
1371	194	8	FieldLUDecomposition.java	getU	THIS	FieldLUDecomposition	0	DEF	$.singular
30599	197	12	FieldLUDecomposition.java	getU	i	int	0	NIL-FOR	$ < m
30599	197	12	FieldLUDecomposition.java	getU	m	int	0	NIL-FOR	i < $
30600	199	16	FieldLUDecomposition.java	getU	j	int	0	NIL-FOR	$ < m
30600	199	16	FieldLUDecomposition.java	getU	m	int	0	NIL-FOR	j < $
1372	217	8	FieldLUDecomposition.java	getP	THIS	FieldLUDecomposition	0	DEF	$.singular
1372	217	8	FieldLUDecomposition.java	getP	THIS	FieldLUDecomposition	0	DEF	$.cachedP == null
30601	220	12	FieldLUDecomposition.java	getP	i	int	0	NIL-FOR	$ < m
30601	220	12	FieldLUDecomposition.java	getP	m	int	0	NIL-FOR	i < $
1373	241	8	FieldLUDecomposition.java	getDeterminant	THIS	FieldLUDecomposition	1	RET	$.singular
30602	246	12	FieldLUDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < m
30602	246	12	FieldLUDecomposition.java	getDeterminant	m	int	0	NIL-FOR	i < $
1996	102	8	FirstMoment.java	increment	THIS	FirstMoment	0	DEF	$.n == 0
2461	61	8	FixedElapsedTime.java	FixedElapsedTime	maxTime	long	0	NumberIsTooSmallException	$ < 0
2462	75	8	FixedElapsedTime.java	isSatisfied	THIS	FixedElapsedTime	0	DEF	$.endTime < 0
2447	45	8	FixedGenerationCount.java	FixedGenerationCount	maxGenerations	int	0	NumberIsTooSmallException	$ <= 0
2448	60	8	FixedGenerationCount.java	isSatisfied	THIS	FixedGenerationCount	0	RET	$.numGenerations < $.maxGenerations
1974	88	8	FourthMoment.java	increment	THIS	FourthMoment	0	DEF	$.n < 1
919	181	8	Fraction.java	Fraction	overflow	long	0	FractionConversionException	a0 > $
919	181	8	Fraction.java	Fraction	a0	long	0	FractionConversionException	$ > overflow
920	187	8	Fraction.java	Fraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
920	187	8	Fraction.java	Fraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
920	187	8	Fraction.java	Fraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
30119	203	8	Fraction.java	Fraction	stop	boolean	0	NIL-DOWHILE	$
921	209	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	q2 > $
921	209	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	p2 > $
921	209	12	Fraction.java	Fraction	p2	long	0	FractionConversionException	$ > overflow
921	209	12	Fraction.java	Fraction	q2	long	0	FractionConversionException	$ > overflow
922	214	12	Fraction.java	Fraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
922	214	12	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
922	214	12	Fraction.java	Fraction	n	int	1	DEF	$ < maxIterations
922	214	12	Fraction.java	Fraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
922	214	12	Fraction.java	Fraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
922	214	12	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
922	214	12	Fraction.java	Fraction	maxIterations	int	1	DEF	n < $
923	226	8	Fraction.java	Fraction	n	int	0	FractionConversionException	$ >= maxIterations
923	226	8	Fraction.java	Fraction	maxIterations	int	0	FractionConversionException	n >= $
924	230	8	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
924	230	8	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
925	257	8	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == 0
926	261	8	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ < 0
927	262	12	Fraction.java	Fraction	num	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
927	262	12	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
928	272	8	Fraction.java	Fraction	d	int	0	DEF	$ > 1
929	278	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
930	292	8	Fraction.java	abs	THIS	Fraction	1	DEF	$.numerator >= 0
931	333	8	Fraction.java	equals	THIS	Fraction	0	RET	$ == other
931	333	8	Fraction.java	equals	other	Object	0	RET	this == $
932	336	8	Fraction.java	equals	other	Object	0	RET	$ instanceof Fraction
933	406	8	Fraction.java	negate	THIS	Fraction	0	MathArithmeticException	$.numerator==Integer.MIN_VALUE
934	477	8	Fraction.java	addSub	fraction	Fraction	0	NullArgumentException	$ == null
935	481	8	Fraction.java	addSub	THIS	Fraction	0	RET	$.numerator == 0
936	484	8	Fraction.java	addSub	THIS	Fraction	0	RET	fraction.$.numerator == 0
936	484	8	Fraction.java	addSub	fraction	Fraction	0	RET	$.numerator == 0
937	490	8	Fraction.java	addSub	d1	int	0	RET	$==1
938	514	8	Fraction.java	addSub	w	BigInteger	0	MathArithmeticException	$.bitLength() > 31
939	534	8	Fraction.java	multiply	fraction	Fraction	0	NullArgumentException	$ == null
940	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	$.numerator == 0
940	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	fraction.$.numerator == 0
940	537	8	Fraction.java	multiply	fraction	Fraction	0	RET	$.numerator == 0
941	569	8	Fraction.java	divide	fraction	Fraction	0	NullArgumentException	$ == null
942	572	8	Fraction.java	divide	THIS	Fraction	0	MathArithmeticException	fraction.$.numerator == 0
942	572	8	Fraction.java	divide	fraction	Fraction	0	MathArithmeticException	$.numerator == 0
943	612	8	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ == 0
944	616	8	Fraction.java	getReducedFraction	numerator	int	0	RET	$==0
945	620	8	Fraction.java	getReducedFraction	numerator	int	0	DEF	($&1)==0
945	620	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
946	623	8	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ < 0
947	624	12	Fraction.java	getReducedFraction	numerator	int	0	MathArithmeticException	$==Integer.MIN_VALUE
947	624	12	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$==Integer.MIN_VALUE
948	651	8	Fraction.java	toString	THIS	Fraction	1	DEF	$.denominator == 1
949	653	15	Fraction.java	toString	THIS	Fraction	1	DEF	$.numerator == 0
903	177	8	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Fraction
904	179	15	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
905	199	8	FractionFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
906	221	8	FractionFormat.java	parse	num	Number	0	RET	$ == null
907	254	8	FractionFormat.java	parse	den	Number	0	RET	$ == null
31293	86	8	Frequency.java	toString	iter	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
2174	112	8	Frequency.java	addValue	v	Comparable<?>	0	DEF	$ instanceof Integer
2175	117	12	Frequency.java	addValue	count	Long	1	DEF	$ == null
31294	185	8	Frequency.java	getSumFreq	iterator	Iterator<Long>	0	NIL-WHILE	$.hasNext()
2176	199	8	Frequency.java	getCount	v	Comparable<?>	0	RET	$ instanceof Integer
2177	205	12	Frequency.java	getCount	count	Long	0	DEF	$ != null
2178	265	8	Frequency.java	getPct	sumFreq	long	0	RET	$ == 0
2179	315	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	$.getSumFreq() == 0
2180	318	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	$ instanceof Integer
2181	323	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	DEF	$ == null
2182	330	12	Frequency.java	getCumFreq	value	Long	0	DEF	$ != null
2183	337	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.firstKey()) < 0
2183	337	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.firstKey()) < 0
2183	337	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.firstKey()) < 0
2184	341	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.lastKey()) >= 0
2184	341	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.lastKey()) >= 0
2184	341	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.lastKey()) >= 0
31295	346	8	Frequency.java	getCumFreq	values	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
2185	348	12	Frequency.java	getCumFreq	nextValue	Comparable<?>	1	DEF	c.compare(v, $) > 0
2185	348	12	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	1	DEF	$.compare(v, nextValue) > 0
2185	348	12	Frequency.java	getCumFreq	v	Comparable<?>	1	DEF	c.compare($, nextValue) > 0
2186	408	8	Frequency.java	getCumPct	sumFreq	long	0	RET	$ == 0
2187	494	8	Frequency.java	equals	THIS	Frequency	0	RET	$ == obj
2187	494	8	Frequency.java	equals	obj	Object	0	RET	this == $
2188	497	8	Frequency.java	equals	obj	Object	0	RET	$ instanceof Frequency
2189	501	8	Frequency.java	equals	THIS	Frequency	1	RET	$.freqTable == null
2190	502	12	Frequency.java	equals	THIS	Frequency	0	RET	other.$.freqTable != null
2190	502	12	Frequency.java	equals	other	Frequency	0	RET	$.freqTable != null
2191	505	15	Frequency.java	equals	THIS	Frequency	0	RET	$.freqTable.equals(other.$.freqTable)
2191	505	15	Frequency.java	equals	other	Frequency	0	RET	freqTable.equals($.freqTable)
3233	320	8	FunctionUtils.java	sample	n	int	0	NotStrictlyPositiveException	$ <= 0
3234	325	8	FunctionUtils.java	sample	min	double	0	NumberIsTooLargeException	$ >= max
3234	325	8	FunctionUtils.java	sample	max	double	0	NumberIsTooLargeException	min >= $
31763	331	8	FunctionUtils.java	sample	i	int	0	NIL-FOR	$ < n
31763	331	8	FunctionUtils.java	sample	n	int	0	NIL-FOR	i < $
2196	80	8	GLSMultipleLinearRegression.java	getOmegaInverse	THIS	GLSMultipleLinearRegression	0	DEF	$.OmegaInverse == null
2472	88	8	Gamma.java	logGamma	x	double	1	DEF	$ <= 0.0
2472	88	8	Gamma.java	logGamma	x	double	1	DEF	Double.isNaN($)
31424	94	12	Gamma.java	logGamma	i	int	0	NIL-FOR	$ > 0
2473	153	8	Gamma.java	regularizedGammaP	a	double	1	DEF	$ <= 0.0
2473	153	8	Gamma.java	regularizedGammaP	a	double	1	DEF	Double.isNaN($)
2473	153	8	Gamma.java	regularizedGammaP	x	double	1	DEF	$ < 0.0
2473	153	8	Gamma.java	regularizedGammaP	x	double	1	DEF	Double.isNaN($)
2474	155	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ == 0.0
2475	157	15	Gamma.java	regularizedGammaP	a	double	1	DEF	x >= $ + 1
2475	157	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ >= a + 1
31425	166	12	Gamma.java	regularizedGammaP	n	double	0	NIL-WHILE	$ < maxIterations
31425	166	12	Gamma.java	regularizedGammaP	an	double	0	NIL-WHILE	FastMath.abs($/sum) > epsilon
31425	166	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	$ < Double.POSITIVE_INFINITY
31425	166	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	FastMath.abs(an/$) > epsilon
31425	166	12	Gamma.java	regularizedGammaP	epsilon	double	0	NIL-WHILE	FastMath.abs(an/sum) > $
31425	166	12	Gamma.java	regularizedGammaP	maxIterations	int	0	NIL-WHILE	n < $
2476	176	12	Gamma.java	regularizedGammaP	n	double	1	MaxCountExceededException	$ >= maxIterations
2476	176	12	Gamma.java	regularizedGammaP	maxIterations	int	1	MaxCountExceededException	n >= $
2477	178	19	Gamma.java	regularizedGammaP	sum	double	1	DEF	Double.isInfinite($)
2478	231	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	Double.isNaN($)
2478	231	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ <= 0.0
2478	231	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	Double.isNaN($)
2478	231	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < 0.0
2479	233	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ == 0.0
2480	235	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	x < $ + 1.0
2480	235	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < a + 1.0
2481	283	8	Gamma.java	digamma	x	double	0	RET	$ > 0
2481	283	8	Gamma.java	digamma	x	double	0	RET	$ <= S_LIMIT
2482	289	8	Gamma.java	digamma	x	double	0	RET	$ >= C_LIMIT
2483	313	8	Gamma.java	trigamma	x	double	0	RET	$ <= S_LIMIT
2483	313	8	Gamma.java	trigamma	x	double	0	RET	$ > 0
2484	317	8	Gamma.java	trigamma	x	double	0	RET	$ >= C_LIMIT
1059	71	8	GammaDistribution.java	GammaDistribution	alpha	double	0	NotStrictlyPositiveException	$ <= 0
1060	74	8	GammaDistribution.java	GammaDistribution	beta	double	0	NotStrictlyPositiveException	$ <= 0
1061	114	8	GammaDistribution.java	density	x	double	0	RET	$ < 0
1062	138	8	GammaDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0
30973	106	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
30974	121	12	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.rows
30974	121	12	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < rows
30975	129	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	j < $.cols
30975	129	16	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
30976	134	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	k < $.cols
30976	134	16	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
30977	137	20	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	l < $.cols
30977	137	20	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < cols
30978	151	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.cols
30978	151	16	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < cols
1658	159	12	GaussNewtonOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	DEF	$ != null
1659	160	16	GaussNewtonOptimizer.java	doOptimize	previous	PointVectorValuePair	0	DEF	$ != null
3127	54	8	Gaussian.java	Gaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
2442	74	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	OutOfRangeException	$ > 1
2442	74	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	OutOfRangeException	$ < 0
2443	78	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	OutOfRangeException	$ > 1
2443	78	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	OutOfRangeException	$ < 0
31412	120	8	GeneticAlgorithm.java	evolve	current	Population	0	NIL-WHILE	condition.isSatisfied($)
31412	120	8	GeneticAlgorithm.java	evolve	condition	StoppingCondition	0	NIL-WHILE	$.isSatisfied(current)
31413	154	8	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	NIL-WHILE	$.getPopulationSize() < $.getPopulationLimit()
2444	159	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getCrossoverRate()
2444	159	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getCrossoverRate()
2445	165	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getMutationRate()
2445	165	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getMutationRate()
2446	175	12	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	DEF	$.getPopulationSize() < $.getPopulationLimit()
1994	111	8	GeometricMean.java	getResult	THIS	GeometricMean	1	RET	$.sumOfLogs.getN() > 0
1995	203	8	GeometricMean.java	checkEmpty	THIS	GeometricMean	0	MathIllegalStateException	$.getN() > 0
2606	111	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	1	DEF	$.previousState != null
2606	111	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
31524	118	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
31524	118	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
31525	135	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
31525	135	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2547	226	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ < 0.0001
2547	226	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ > 0.9999
2548	261	4	GraggBulirschStoerIntegrator.java	setControlFactors	control1	double	1	DEF	$ > 0.9999
2548	261	4	GraggBulirschStoerIntegrator.java	setControlFactors	control1	double	1	DEF	$ < 0.0001
2549	267	4	GraggBulirschStoerIntegrator.java	setControlFactors	control2	double	1	DEF	$ < 0.0001
2549	267	4	GraggBulirschStoerIntegrator.java	setControlFactors	control2	double	1	DEF	$ > 0.9999
2550	273	4	GraggBulirschStoerIntegrator.java	setControlFactors	control3	double	1	DEF	$ < 0.0001
2550	273	4	GraggBulirschStoerIntegrator.java	setControlFactors	control3	double	1	DEF	$ > 0.9999
2551	279	4	GraggBulirschStoerIntegrator.java	setControlFactors	control4	double	1	DEF	$ < 1.0001
2551	279	4	GraggBulirschStoerIntegrator.java	setControlFactors	control4	double	1	DEF	$ > 999.9
2552	313	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ % 2 != 0
2552	313	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ <= 6
2553	317	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ > 0.9999
2553	317	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ < 0.0001
2554	323	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ < 0.0001
2554	323	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ > 0.9999
2555	365	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence.$.length != size
2555	365	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence == null
2555	365	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	DEF	sequence.length != $
31484	375	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
31484	375	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
31485	382	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
31485	382	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
31486	387	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
31486	387	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
31487	389	6	GraggBulirschStoerIntegrator.java	initializeArrays	l	int	0	NIL-FOR	$ < k
31487	389	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	l < $
2556	412	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ <= 0
2556	412	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ >= 7
2557	426	4	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	1	DEF	$.vecAbsoluteTolerance == null
31488	427	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
31488	427	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
31488	427	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
31489	432	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
31489	432	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
31489	432	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
31490	465	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
31490	465	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
31490	465	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
31491	472	4	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	NIL-FOR	$ < n
31491	472	4	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	NIL-FOR	j < $
2558	474	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	DEF	2 * $ == n
2558	474	6	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	DEF	2 * j == $
31492	480	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
31492	480	6	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
31492	480	6	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
2559	489	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	j <= $.maxChecks
2559	489	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	$.performTest
2559	489	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	k < $.maxIter
2559	489	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	RET	$ <= maxChecks
2559	489	6	GraggBulirschStoerIntegrator.java	tryStep	k	int	0	RET	$ < maxIter
31493	491	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
31493	491	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
31493	491	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
31494	496	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
31494	496	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
31494	496	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
2560	500	8	GraggBulirschStoerIntegrator.java	tryStep	initialNorm	double	0	RET	deltaNorm > 4 * FastMath.max(1.0e-15, $)
2560	500	8	GraggBulirschStoerIntegrator.java	tryStep	deltaNorm	double	0	RET	$ > 4 * FastMath.max(1.0e-15, initialNorm)
31495	508	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
31495	508	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
31495	508	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
31496	527	4	GraggBulirschStoerIntegrator.java	extrapolate	j	int	0	NIL-FOR	$ < k
31496	527	4	GraggBulirschStoerIntegrator.java	extrapolate	k	int	0	NIL-FOR	j < $
31497	528	6	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
31497	528	6	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
31497	528	6	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
31498	536	4	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
31498	536	4	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
31498	536	4	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
31499	561	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length-1
31499	561	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length-1
31500	567	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length
31500	567	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length
31501	574	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < $.sequence[k]
31501	574	6	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < sequence[k]
31501	574	6	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	l < sequence[$]
2561	580	4	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	DEF	y != $
2561	580	4	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
31502	618	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-DOWHILE	$.isLastStep
2562	623	6	GraggBulirschStoerIntegrator.java	integrate	newStep	boolean	0	DEF	$
2563	628	8	GraggBulirschStoerIntegrator.java	integrate	firstStepAlreadyComputed	boolean	0	DEF	$
2564	632	8	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2565	644	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize < t
2565	644	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize > t
2565	644	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2565	644	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2565	644	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
2565	644	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
31503	653	6	GraggBulirschStoerIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
2566	658	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.tryStep($.stepStart, y, $.stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2566	658	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	tryStep(stepStart, y, stepSize, $, scale, fk[$], ($ == 0) ? yMidDots[0] : diagonal[$-1], ($ == 0) ? y1 : y1Diag[$-1], yTmp)
2566	658	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	1	DEF	tryStep(stepStart, $, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2566	658	8	GraggBulirschStoerIntegrator.java	integrate	y1	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? $ : y1Diag[k-1], yTmp)
2566	658	8	GraggBulirschStoerIntegrator.java	integrate	yTmp	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], $)
2566	658	8	GraggBulirschStoerIntegrator.java	integrate	diagonal	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : $[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2566	658	8	GraggBulirschStoerIntegrator.java	integrate	y1Diag	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : $[k-1], yTmp)
2566	658	8	GraggBulirschStoerIntegrator.java	integrate	fk	double[][][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, $[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2566	658	8	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? $[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2566	658	8	GraggBulirschStoerIntegrator.java	integrate	scale	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, $, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2567	671	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 0
31504	680	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < $.mainSetDimension
31504	680	12	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < mainSetDimension
2568	686	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > maxError
2568	686	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > 1.0e15
2568	686	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ > 1
2568	686	12	GraggBulirschStoerIntegrator.java	integrate	maxError	double	1	DEF	error > $
2569	707	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2569	707	16	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
2570	710	18	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
2571	719	20	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
2571	719	20	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
2572	725	22	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2572	725	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2572	725	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2573	737	16	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
2574	745	18	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
2574	745	18	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
2575	750	20	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2575	750	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2575	750	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2576	761	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > 1.0
2577	763	18	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2577	763	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2577	763	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2578	774	16	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.isLastStep
2578	774	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ <= 1.0
2578	774	16	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2579	786	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
2580	793	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
31505	796	8	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
31505	796	8	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
31506	802	8	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < mu
31506	802	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	NIL-FOR	l < $
31507	808	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
31507	808	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
31507	808	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
31508	811	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k - l2
31508	811	10	GraggBulirschStoerIntegrator.java	integrate	l2	int	0	NIL-FOR	j <= k - $
31508	811	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $ - l2
31509	814	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
31509	814	12	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
31509	814	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
31510	819	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
31510	819	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
31510	819	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
31511	824	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
31511	824	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
31512	825	12	GraggBulirschStoerIntegrator.java	integrate	m	int	0	NIL-FOR	$ >= 2 * (l + 1)
31512	825	12	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	m >= 2 * ($ + 1)
31513	826	14	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
31513	826	14	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
31513	826	14	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
2581	834	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	DEF	$ >= 0
2582	841	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.useInterpolationError
2583	846	12	GraggBulirschStoerIntegrator.java	integrate	interpError	double	0	DEF	$ > 10.0
2584	856	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
2585	869	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ == 1
2586	871	10	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
2587	874	15	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ <= targetIter
2587	874	15	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k <= $
2588	876	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k-1] < $.orderControl1 * $.costPerTimeUnit[k]
2588	876	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2589	878	17	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
2589	878	17	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
2590	883	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k-2] < $.orderControl1 * $.costPerTimeUnit[k-1]
2590	883	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$-2] < orderControl1 * costPerTimeUnit[$-1]
2590	883	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 2
2591	887	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[optimalIter]
2591	887	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	0	DEF	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[$]
2591	887	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[optimalIter]
2592	892	8	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	1	DEF	$
2593	899	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	1	DEF	$ <= k
2593	899	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	optimalIter <= $
2594	902	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
2594	902	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
2594	902	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ < targetIter
2594	902	12	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k < $
2595	921	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2596	927	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	1	DEF	$
2622	170	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	1	DEF	interpolator.$.polynomials == null
2622	170	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	interpolator	GraggBulirschStoerStepInterpolator	1	DEF	$.polynomials == null
31549	175	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.polynomials.$.length
31549	175	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	i	int	0	NIL-FOR	$ < polynomials.length
2623	192	4	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ < 0
2624	199	6	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	1	DEF	$.polynomials != null
31550	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
31550	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
31550	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
31551	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
31551	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
31551	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
2625	212	6	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ <= 4
31552	216	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.errfac.$.length
31552	216	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < errfac.length
31553	220	10	GraggBulirschStoerStepInterpolator.java	resetTables	j	int	0	NIL-FOR	$ <= i
31553	220	10	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	j <= $
2626	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynomials == null
2626	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynomials.$.length <= (mu + 4)
2626	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	polynomials.length <= ($ + 4)
31554	251	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
31554	251	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	i	int	0	NIL-FOR	$ < currentState.length
2627	264	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	RET	$ < 0
2628	272	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 0
2629	276	8	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 1
2630	280	10	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 2
31555	284	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	j	int	0	NIL-FOR	$ <= mu
31555	284	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	NIL-FOR	j <= $
2631	304	4	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree >= 5
31556	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < scale.$.length
31556	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	i	int	0	NIL-FOR	$ < scale.length
31556	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	scale	double[]	0	NIL-FOR	i < $.length
31557	330	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < dimension
31557	330	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	dimension	int	0	NIL-FOR	i < $
2632	339	8	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree > 3
31558	342	12	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ > 3
2633	353	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.h == 0
31559	373	4	GraggBulirschStoerStepInterpolator.java	writeExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
31559	373	4	GraggBulirschStoerStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ <= currentDegree
31560	374	6	GraggBulirschStoerStepInterpolator.java	writeExternal	l	int	0	NIL-FOR	$ < dimension
31560	374	6	GraggBulirschStoerStepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	l < $
31561	395	4	GraggBulirschStoerStepInterpolator.java	readExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
31561	395	4	GraggBulirschStoerStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ <= currentDegree
31562	396	6	GraggBulirschStoerStepInterpolator.java	readExternal	l	int	0	NIL-FOR	$ < dimension
31562	396	6	GraggBulirschStoerStepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	l < $
31592	117	4	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	j < $.mainSetDimension
31592	117	4	HighamHall54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
31593	119	6	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	l < STATIC_E.$.length
31593	119	6	HighamHall54Integrator.java	estimateError	l	int	0	NIL-FOR	$ < STATIC_E.length
2653	80	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	1	DEF	$.previousState != null
2653	80	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
31590	87	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
31590	87	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
31591	105	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
31591	105	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
975	67	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NotStrictlyPositiveException	$ <= 0
976	71	8	HypergeometricDistribution.java	HypergeometricDistribution	numberOfSuccesses	int	0	NotPositiveException	$ < 0
977	75	8	HypergeometricDistribution.java	HypergeometricDistribution	sampleSize	int	0	NotPositiveException	$ < 0
978	80	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NumberIsTooLargeException	numberOfSuccesses > $
978	80	8	HypergeometricDistribution.java	HypergeometricDistribution	numberOfSuccesses	int	0	NumberIsTooLargeException	$ > populationSize
979	84	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NumberIsTooLargeException	sampleSize > $
979	84	8	HypergeometricDistribution.java	HypergeometricDistribution	sampleSize	int	0	NumberIsTooLargeException	$ > populationSize
980	99	8	HypergeometricDistribution.java	cumulativeProbability	domain	int[]	1	DEF	x < $[0]
980	99	8	HypergeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ < domain[0]
981	101	15	HypergeometricDistribution.java	cumulativeProbability	domain	int[]	1	DEF	x >= $[1]
981	101	15	HypergeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ >= domain[1]
982	181	8	HypergeometricDistribution.java	probability	domain	int[]	1	DEF	x > $[1]
982	181	8	HypergeometricDistribution.java	probability	domain	int[]	1	DEF	x < $[0]
982	181	8	HypergeometricDistribution.java	probability	x	int	1	DEF	$ > domain[1]
982	181	8	HypergeometricDistribution.java	probability	x	int	1	DEF	$ < domain[0]
983	226	8	HypergeometricDistribution.java	upperCumulativeProbability	domain	int[]	1	DEF	x < $[0]
983	226	8	HypergeometricDistribution.java	upperCumulativeProbability	x	int	1	DEF	$ < domain[0]
984	228	15	HypergeometricDistribution.java	upperCumulativeProbability	domain	int[]	1	DEF	x > $[1]
984	228	15	HypergeometricDistribution.java	upperCumulativeProbability	x	int	1	DEF	$ > domain[1]
30122	257	8	HypergeometricDistribution.java	innerCumulativeProbability	x0	int	0	NIL-WHILE	$ != x1
30122	257	8	HypergeometricDistribution.java	innerCumulativeProbability	x1	int	0	NIL-WHILE	x0 != $
985	282	8	HypergeometricDistribution.java	getNumericalVariance	THIS	HypergeometricDistribution	0	DEF	$.numericalVarianceIsCalculated
2346	121	8	ISAACRandom.java	setSeed	seed	int[]	0	RET	$ == null
2347	128	8	ISAACRandom.java	setSeed	seedLen	int	0	DEF	$ < rslLen
2347	128	8	ISAACRandom.java	setSeed	rslLen	int	0	DEF	seedLen < $
31369	129	12	ISAACRandom.java	setSeed	j	int	0	NIL-FOR	$ < rslLen
31369	129	12	ISAACRandom.java	setSeed	rslLen	int	0	NIL-FOR	j < $
2348	140	8	ISAACRandom.java	next	THIS	ISAACRandom	0	DEF	$.count < 0
31370	152	8	ISAACRandom.java	isaac	THIS	ISAACRandom	0	NIL-WHILE	$.isaacI < H_SIZE
31371	156	8	ISAACRandom.java	isaac	THIS	ISAACRandom	0	NIL-WHILE	$.isaacJ < H_SIZE
31372	193	8	ISAACRandom.java	initState	THIS	ISAACRandom	0	NIL-FOR	j < $.arr.$.length
31372	193	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < arr.length
31373	196	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < 4
31374	200	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < SIZE
31375	213	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < SIZE
30069	131	8	Incrementor.java	incrementCount	i	int	0	NIL-FOR	$ < value
30069	131	8	Incrementor.java	incrementCount	value	int	0	NIL-FOR	i < $
165	150	8	Incrementor.java	incrementCount	THIS	Incrementor	0	DEF	++$.count > $.maximalCount
726	93	8	IntervalsSet.java	buildTree	lower	double	0	RET	Double.isInfinite($)
726	93	8	IntervalsSet.java	buildTree	lower	double	0	RET	$ < 0
727	94	12	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
727	94	12	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
728	108	8	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
728	108	8	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
729	138	8	IntervalsSet.java	computeGeometricalProperties	THIS	IntervalsSet	1	DEF	$.getTree(false).getCut() == null
30105	162	8	IntervalsSet.java	getInf	node	BSPTree<Euclidean1D>	0	NIL-WHILE	$.getCut() != null
30106	179	8	IntervalsSet.java	getSup	node	BSPTree<Euclidean1D>	0	NIL-WHILE	$.getCut() != null
730	217	8	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	1	DEF	$.getCut() == null
731	218	12	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	0	DEF	(Boolean) $.getAttribute()
732	234	12	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(low, loc) == $.Location.INSIDE
732	234	12	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(high, loc) == $.Location.INSIDE
732	234	12	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(low, $) == Location.INSIDE
732	234	12	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(high, $) == Location.INSIDE
732	234	12	IntervalsSet.java	recurseList	low	BSPTree<Euclidean1D>	0	DEF	checkPoint($, loc) == Location.INSIDE
732	234	12	IntervalsSet.java	recurseList	high	BSPTree<Euclidean1D>	0	DEF	checkPoint($, loc) == Location.INSIDE
1137	81	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	NonSquareOperatorException	$.getRowDimension() != $.getColumnDimension()
1138	85	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	b.getDimension() != $.getRowDimension()
1138	85	8	IterativeLinearSolver.java	checkParameters	b	RealVector	0	DimensionMismatchException	$.getDimension() != a.getRowDimension()
1139	89	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	x0.getDimension() != $.getColumnDimension()
1139	89	8	IterativeLinearSolver.java	checkParameters	x0	RealVector	0	DimensionMismatchException	$.getDimension() != a.getColumnDimension()
1125	62	8	JacobiPreconditioner.java	create	n	int	0	NonSquareOperatorException	a.getRowDimension() != $
1125	62	8	JacobiPreconditioner.java	create	a	RealLinearOperator	0	NonSquareOperatorException	$.getRowDimension() != n
1126	66	8	JacobiPreconditioner.java	create	a	RealLinearOperator	1	DEF	$ instanceof AbstractRealMatrix
30263	68	12	JacobiPreconditioner.java	create	i	int	0	NIL-FOR	$ < n
30263	68	12	JacobiPreconditioner.java	create	n	int	0	NIL-FOR	i < $
30264	73	12	JacobiPreconditioner.java	create	i	int	0	NIL-FOR	$ < n
30264	73	12	JacobiPreconditioner.java	create	n	int	0	NIL-FOR	i < $
2674	133	8	JacobianMatrices.java	JacobianMatrices	parameters	String	1	DEF	$ == null
31596	138	12	JacobianMatrices.java	JacobianMatrices	THIS	JacobianMatrices	0	NIL-FOR	i < parameters.$.length
31596	138	12	JacobianMatrices.java	JacobianMatrices	i	int	0	NIL-FOR	$ < parameters.length
31596	138	12	JacobianMatrices.java	JacobianMatrices	parameters	String	0	NIL-FOR	i < $.length
31597	150	8	JacobianMatrices.java	JacobianMatrices	THIS	JacobianMatrices	0	NIL-FOR	i < $.stateDim
31597	150	8	JacobianMatrices.java	JacobianMatrices	i	int	0	NIL-FOR	$ < stateDim
2675	169	8	JacobianMatrices.java	registerVariationalEquations	ode	FirstOrderDifferentialEquations	0	MathIllegalArgumentException	expandable.getPrimary() != $
2675	169	8	JacobianMatrices.java	registerVariationalEquations	expandable	ExpandableStatefulODE	0	MathIllegalArgumentException	$.getPrimary() != ode
2676	214	12	JacobianMatrices.java	setParameterStep	THIS	JacobianMatrices	0	RET	parameter.equals($.param.getParameterName())
2676	214	12	JacobianMatrices.java	setParameterStep	parameter	String	0	RET	$.equals(param.getParameterName())
2677	247	8	JacobianMatrices.java	setInitialMainStateJacobian	THIS	JacobianMatrices	0	DEF	$.efode != null
2678	271	12	JacobianMatrices.java	setInitialParameterJacobian	THIS	JacobianMatrices	0	RET	pName.equals($.param.getParameterName())
2678	271	12	JacobianMatrices.java	setInitialParameterJacobian	pName	String	0	RET	$.equals(param.getParameterName())
2679	273	16	JacobianMatrices.java	setInitialParameterJacobian	THIS	JacobianMatrices	0	DEF	$.efode != null
31598	294	8	JacobianMatrices.java	getCurrentMainSetJacobian	THIS	JacobianMatrices	0	NIL-FOR	i < $.stateDim
31598	294	8	JacobianMatrices.java	getCurrentMainSetJacobian	i	int	0	NIL-FOR	$ < stateDim
2680	312	12	JacobianMatrices.java	getCurrentParameterJacobian	THIS	JacobianMatrices	0	RET	$.param.getParameterName().equals(pName)
2680	312	12	JacobianMatrices.java	getCurrentParameterJacobian	pName	String	0	RET	param.getParameterName().equals($)
2681	329	8	JacobianMatrices.java	checkDimension	arrayDimension	int	0	DimensionMismatchException	$ != expected
2681	329	8	JacobianMatrices.java	checkDimension	expected	int	0	DimensionMismatchException	arrayDimension != $
31250	108	8	KMeansPlusPlusClusterer.java	cluster	i	int	0	NIL-FOR	$ < numTrials
31250	108	8	KMeansPlusPlusClusterer.java	cluster	numTrials	int	0	NIL-FOR	i < $
2123	116	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
2124	129	12	KMeansPlusPlusClusterer.java	cluster	varianceSum	double	0	DEF	$ <= bestVarianceSum
2124	129	12	KMeansPlusPlusClusterer.java	cluster	bestVarianceSum	double	0	DEF	varianceSum <= $
2125	161	8	KMeansPlusPlusClusterer.java	cluster	points	Collection<T>	0	NumberIsTooSmallException	$.size() < k
2125	161	8	KMeansPlusPlusClusterer.java	cluster	k	int	0	NumberIsTooSmallException	points.size() < $
31251	175	8	KMeansPlusPlusClusterer.java	cluster	count	int	0	NIL-FOR	$ < max
31251	175	8	KMeansPlusPlusClusterer.java	cluster	max	int	0	NIL-FOR	count < $
2126	180	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	1	ConvergenceException	$.cluster.getPoints().isEmpty()
2127	205	12	KMeansPlusPlusClusterer.java	cluster	emptyCluster	boolean	0	RET	$
2127	205	12	KMeansPlusPlusClusterer.java	cluster	changes	int	0	RET	$ == 0
2128	228	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	clusterIndex	int	0	DEF	$ != assignments[pointIndex]
2128	228	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	pointIndex	int	0	DEF	clusterIndex != assignments[$]
2128	228	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	assignments	int[]	0	DEF	clusterIndex != $[pointIndex]
31252	282	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
31252	282	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2129	283	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	$ != firstPointIndex
2129	283	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	firstPointIndex	int	0	DEF	i != $
31253	289	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	NIL-WHILE	$.size() < k
31253	289	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	NIL-WHILE	resultSet.size() < $
31254	295	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
31254	295	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2130	296	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2130	296	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
31255	311	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
31255	311	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2131	312	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2131	312	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
2132	314	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	r	double	0	DEF	sum >= $
2132	314	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	sum	double	0	DEF	$ >= r
2133	324	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	0	DEF	$ == -1
31256	325	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ >= 0
2134	326	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2134	326	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
2135	334	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	1	DEF	$ >= 0
2136	343	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	DEF	$.size() < k
2136	343	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	DEF	resultSet.size() < $
31257	346	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	NIL-FOR	$ < numPoints
31257	346	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	j < $
2137	348	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	taken[$]
2137	348	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[j]
2138	351	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	d2	double	0	DEF	$ < minDistSquared[j]
2138	351	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	d2 < minDistSquared[$]
2138	351	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	minDistSquared	double[]	0	DEF	d2 < $[j]
2139	380	12	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
2140	391	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	variance	double	0	DEF	$ > maxVariance
2140	391	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	maxVariance	double	0	DEF	variance > $
2141	400	8	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
2142	426	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	number	int	0	DEF	$ > maxNumber
2142	426	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	maxNumber	int	0	DEF	number > $
2143	434	8	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
31258	460	12	KMeansPlusPlusClusterer.java	getFarthestPoint	i	int	0	NIL-FOR	$ < points.size()
31258	460	12	KMeansPlusPlusClusterer.java	getFarthestPoint	points	List<T>	0	NIL-FOR	i < $.size()
2144	462	16	KMeansPlusPlusClusterer.java	getFarthestPoint	distance	double	0	DEF	$ > maxDistance
2144	462	16	KMeansPlusPlusClusterer.java	getFarthestPoint	maxDistance	double	0	DEF	distance > $
2145	472	8	KMeansPlusPlusClusterer.java	getFarthestPoint	selectedCluster	Cluster<T>	0	ConvergenceException	$ == null
2146	495	12	KMeansPlusPlusClusterer.java	getNearestCluster	distance	double	0	DEF	$ < minDistance
2146	495	12	KMeansPlusPlusClusterer.java	getNearestCluster	minDistance	double	0	DEF	distance < $
0	134	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getControlMatrix() == null
1	154	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialStateEstimate() == null
2	161	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	DimensionMismatchException	$.transitionMatrix.getColumnDimension() != $.stateEstimation.getDimension()
3	168	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialErrorCovariance() == null
4	177	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	NonSquareMatrixException	$.transitionMatrix.isSquare()
5	184	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() != 1
5	184	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix != null
5	184	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() > 0
5	184	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() != $.transitionMatrix.getRowDimension()
5	184	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() > 0
6	198	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.measurementMatrix.getColumnDimension() != $.transitionMatrix.getRowDimension()
7	206	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	measNoise.getRowDimension() != $.measurementMatrix.getRowDimension()
7	206	8	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
7	206	8	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != measurementMatrix.getRowDimension()
8	296	8	KalmanFilter.java	predict	THIS	KalmanFilter	0	DimensionMismatchException	u.getDimension() != $.controlMatrix.getColumnDimension()
8	296	8	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$ != null
8	296	8	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$.getDimension() != controlMatrix.getColumnDimension()
9	307	8	KalmanFilter.java	predict	u	RealVector	0	DEF	$ != null
10	343	8	KalmanFilter.java	correct	THIS	KalmanFilter	0	DimensionMismatchException	z.getDimension() != $.measurementMatrix.getRowDimension()
10	343	8	KalmanFilter.java	correct	z	RealVector	0	DimensionMismatchException	$.getDimension() != measurementMatrix.getRowDimension()
1063	86	8	KolmogorovSmirnovDistribution.java	KolmogorovSmirnovDistribution	n	int	0	NotStrictlyPositiveException	$ <= 0
1064	154	8	KolmogorovSmirnovDistribution.java	cdf	ninvhalf	double	1	RET	d <= $
1064	154	8	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ <= ninvhalf
1065	158	15	KolmogorovSmirnovDistribution.java	cdf	ninv	double	1	RET	d <= $
1065	158	15	KolmogorovSmirnovDistribution.java	cdf	ninvhalf	double	1	RET	$ < d
1065	158	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ <= ninv
1065	158	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	ninvhalf < $
30124	164	12	KolmogorovSmirnovDistribution.java	cdf	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
30124	164	12	KolmogorovSmirnovDistribution.java	cdf	i	int	0	NIL-FOR	$ <= n
1066	170	15	KolmogorovSmirnovDistribution.java	cdf	ninv	double	1	RET	1 - $ <= d
1066	170	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	1 - ninv <= $
1066	170	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ < 1
1067	174	15	KolmogorovSmirnovDistribution.java	cdf	d	double	0	RET	1 <= $
30125	203	8	KolmogorovSmirnovDistribution.java	exactK	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
30125	203	8	KolmogorovSmirnovDistribution.java	exactK	i	int	0	NIL-FOR	$ <= n
30126	238	8	KolmogorovSmirnovDistribution.java	roundedK	i	int	0	NIL-FOR	$ < m
30126	238	8	KolmogorovSmirnovDistribution.java	roundedK	m	int	0	NIL-FOR	i < $
30127	239	12	KolmogorovSmirnovDistribution.java	roundedK	j	int	0	NIL-FOR	$ < m
30127	239	12	KolmogorovSmirnovDistribution.java	roundedK	m	int	0	NIL-FOR	j < $
30128	248	8	KolmogorovSmirnovDistribution.java	roundedK	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
30128	248	8	KolmogorovSmirnovDistribution.java	roundedK	i	int	0	NIL-FOR	$ <= n
1068	274	8	KolmogorovSmirnovDistribution.java	createH	hDouble	double	0	NumberIsTooLargeException	$ >= 1
30129	295	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
30129	295	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
30130	296	12	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	$ < m
30130	296	12	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	j < $
1069	297	16	KolmogorovSmirnovDistribution.java	createH	j	int	1	DEF	i - $ + 1 < 0
1069	297	16	KolmogorovSmirnovDistribution.java	createH	i	int	1	DEF	$ - j + 1 < 0
30131	311	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
30131	311	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
30132	318	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
30132	318	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
1070	328	8	KolmogorovSmirnovDistribution.java	createH	h	BigFraction	0	DEF	$.compareTo(BigFraction.ONE_HALF) == 1
30133	343	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
30133	343	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
30134	344	12	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	$ < i + 1
30134	344	12	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	j < $ + 1
1071	345	16	KolmogorovSmirnovDistribution.java	createH	j	int	0	DEF	i - $ + 1 > 0
1071	345	16	KolmogorovSmirnovDistribution.java	createH	i	int	0	DEF	$ - j + 1 > 0
30135	346	20	KolmogorovSmirnovDistribution.java	createH	g	int	0	NIL-FOR	$ <= i - j + 1
30135	346	20	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	g <= i - $ + 1
30135	346	20	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	g <= $ - j + 1
1989	98	8	Kurtosis.java	increment	THIS	Kurtosis	1	DEF	$.incMoment
1990	111	8	Kurtosis.java	getResult	THIS	Kurtosis	0	DEF	$.moment.getN() > 3
1991	113	16	Kurtosis.java	getResult	THIS	Kurtosis	1	DEF	$.moment.$.n <= 3
1991	113	16	Kurtosis.java	getResult	variance	double	1	DEF	$ < 10E-20
1992	131	8	Kurtosis.java	clear	THIS	Kurtosis	1	DEF	$.incMoment
1993	168	8	Kurtosis.java	evaluate	THIS	Kurtosis	0	DEF	$.test(values, begin, length)
1993	168	8	Kurtosis.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1993	168	8	Kurtosis.java	evaluate	begin	int	0	DEF	test(values, $, length)
1993	168	8	Kurtosis.java	evaluate	length	int	0	DEF	$ > 3
1993	168	8	Kurtosis.java	evaluate	length	int	0	DEF	test(values, begin, $)
31215	179	12	Kurtosis.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
31215	179	12	Kurtosis.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
31215	179	12	Kurtosis.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1098	87	8	LUDecomposition.java	LUDecomposition	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
30141	100	8	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
30141	100	8	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
30142	107	8	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	$ < m
30142	107	8	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	col < $
30143	110	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < col
30143	110	12	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	row < $
30144	113	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < row
30144	113	16	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	i < $
30145	122	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
30145	122	12	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
30146	125	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < col
30146	125	16	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	i < $
1099	131	16	LUDecomposition.java	LUDecomposition	sum	double	0	DEF	FastMath.abs($) > largest
1099	131	16	LUDecomposition.java	LUDecomposition	largest	double	0	DEF	FastMath.abs(sum) > $
1100	138	12	LUDecomposition.java	LUDecomposition	THIS	LUDecomposition	0	RET	FastMath.abs($.lu[max][col]) < singularityThreshold
1100	138	12	LUDecomposition.java	LUDecomposition	max	int	0	RET	FastMath.abs(lu[$][col]) < singularityThreshold
1100	138	12	LUDecomposition.java	LUDecomposition	col	int	0	RET	FastMath.abs(lu[max][$]) < singularityThreshold
1100	138	12	LUDecomposition.java	LUDecomposition	singularityThreshold	double	0	RET	FastMath.abs(lu[max][col]) < $
1101	144	12	LUDecomposition.java	LUDecomposition	max	int	0	DEF	$ != col
1101	144	12	LUDecomposition.java	LUDecomposition	col	int	0	DEF	max != $
30147	148	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < m
30147	148	16	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	i < $
30148	161	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
30148	161	12	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
1102	173	8	LUDecomposition.java	getL	THIS	LUDecomposition	0	DEF	$.cachedL == null
1102	173	8	LUDecomposition.java	getL	THIS	LUDecomposition	0	DEF	$.singular
30149	176	12	LUDecomposition.java	getL	i	int	0	NIL-FOR	$ < m
30149	176	12	LUDecomposition.java	getL	m	int	0	NIL-FOR	i < $
30150	178	16	LUDecomposition.java	getL	j	int	0	NIL-FOR	$ < i
30150	178	16	LUDecomposition.java	getL	i	int	0	NIL-FOR	j < $
1103	193	8	LUDecomposition.java	getU	THIS	LUDecomposition	0	DEF	$.singular
1103	193	8	LUDecomposition.java	getU	THIS	LUDecomposition	0	DEF	$.cachedU == null
30151	196	12	LUDecomposition.java	getU	i	int	0	NIL-FOR	$ < m
30151	196	12	LUDecomposition.java	getU	m	int	0	NIL-FOR	i < $
30152	198	16	LUDecomposition.java	getU	j	int	0	NIL-FOR	$ < m
30152	198	16	LUDecomposition.java	getU	m	int	0	NIL-FOR	j < $
1104	216	8	LUDecomposition.java	getP	THIS	LUDecomposition	0	DEF	$.singular
1104	216	8	LUDecomposition.java	getP	THIS	LUDecomposition	0	DEF	$.cachedP == null
30153	219	12	LUDecomposition.java	getP	i	int	0	NIL-FOR	$ < m
30153	219	12	LUDecomposition.java	getP	m	int	0	NIL-FOR	i < $
1105	240	8	LUDecomposition.java	getDeterminant	THIS	LUDecomposition	1	RET	$.singular
30154	245	12	LUDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < m
30154	245	12	LUDecomposition.java	getDeterminant	m	int	0	NIL-FOR	i < $
3212	98	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
3212	98	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3213	104	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
3213	104	8	LaguerreSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3214	109	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
3214	109	8	LaguerreSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
3215	115	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
3215	115	8	LaguerreSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3216	120	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
3216	120	8	LaguerreSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
31761	149	8	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	NIL-FOR	i < coefficients.$.length
31761	149	8	LaguerreSolver.java	laguerre	i	int	0	NIL-FOR	$ < coefficients.length
31761	149	8	LaguerreSolver.java	laguerre	coefficients	double[]	0	NIL-FOR	i < $.length
3217	154	8	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	1	RET	$.complexSolver.isRoot(lo, hi, z)
3217	154	8	LaguerreSolver.java	laguerre	z	Complex	1	RET	complexSolver.isRoot(lo, hi, $)
3217	154	8	LaguerreSolver.java	laguerre	lo	double	1	RET	complexSolver.isRoot($, hi, z)
3217	154	8	LaguerreSolver.java	laguerre	hi	double	1	RET	complexSolver.isRoot(lo, $, z)
31762	160	12	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	NIL-FOR	i < root.$.length
31762	160	12	LaguerreSolver.java	laguerre	i	int	0	NIL-FOR	$ < root.length
31762	160	12	LaguerreSolver.java	laguerre	root	Complex[]	0	NIL-FOR	i < $.length
3218	161	16	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	DEF	$.complexSolver.isRoot(lo, hi, root[i])
3218	161	16	LaguerreSolver.java	laguerre	i	int	0	DEF	complexSolver.isRoot(lo, hi, root[$])
3218	161	16	LaguerreSolver.java	laguerre	root	Complex[]	0	DEF	complexSolver.isRoot(lo, hi, $[i])
3218	161	16	LaguerreSolver.java	laguerre	lo	double	0	DEF	complexSolver.isRoot($, hi, root[i])
3218	161	16	LaguerreSolver.java	laguerre	hi	double	0	DEF	complexSolver.isRoot(lo, $, root[i])
1608	112	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != weights.$.length
1608	112	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != weights.length
1608	112	8	LeastSquaresConverter.java	LeastSquaresConverter	weights	double[]	0	DimensionMismatchException	observations.length != $.length
1609	142	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != scale.getColumnDimension()
1609	142	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != scale.getColumnDimension()
1609	142	8	LeastSquaresConverter.java	LeastSquaresConverter	scale	RealMatrix	0	DimensionMismatchException	observations.length != $.getColumnDimension()
1610	155	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	DimensionMismatchException	residuals.$.length != $.observations.$.length
1610	155	8	LeastSquaresConverter.java	value	residuals	double[]	0	DimensionMismatchException	$.length != observations.length
30905	158	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
30905	158	8	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
30905	158	8	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1611	164	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.weights != null
30906	165	12	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
30906	165	12	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
30906	165	12	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1612	169	15	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.scale != null
3283	217	12	LegendreGaussIntegrator.java	doIntegrate	THIS	LegendreGaussIntegrator	0	RET	$.iterations.getCount() + 1 >= $.getMinimalIterationCount()
3283	217	12	LegendreGaussIntegrator.java	doIntegrate	delta	double	0	RET	$ <= limit
3283	217	12	LegendreGaussIntegrator.java	doIntegrate	limit	double	0	RET	delta <= $
31797	248	8	LegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
31797	248	8	LegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
31798	249	12	LegendreGaussIntegrator.java	stage	THIS	LegendreGaussIntegrator	0	NIL-FOR	j < $.abscissas.$.length
31798	249	12	LegendreGaussIntegrator.java	stage	j	int	0	NIL-FOR	$ < abscissas.length
30907	305	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i<$.rows
30907	305	12	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$<rows
30908	318	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
30908	318	12	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
1613	323	12	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
30909	327	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
30909	327	16	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
1614	329	20	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
1615	344	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.cost != 0
30910	345	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
30910	345	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1616	348	20	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
30911	350	24	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
30911	350	24	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
1617	357	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
1617	357	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
30912	365	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
30912	365	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
30913	370	12	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
30914	373	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
30914	373	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
30915	390	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
30915	390	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1618	399	16	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
1619	408	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost < previousCost
1619	408	16	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost < $
30916	415	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
30916	415	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
30917	419	20	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
30917	419	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
30918	424	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
30918	424	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1620	437	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
1621	440	24	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost >= previousCost
1621	440	24	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
1621	440	24	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost >= $
1622	445	23	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
1622	445	23	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
1623	451	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	RET	$ >= 1.0e-4
30919	455	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
30919	455	20	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
1624	463	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$ != null
1625	465	24	LevenbergMarquardtOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	checker.converged(iter, $, current)
1625	465	24	LevenbergMarquardtOptimizer.java	doOptimize	current	PointVectorValuePair	0	RET	checker.converged(iter, previous, $)
1625	465	24	LevenbergMarquardtOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
1625	465	24	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$.converged(iter, previous, current)
30920	472	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
30920	472	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1626	485	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	FastMath.abs(actRed) <= $.costRelativeTolerance
1626	485	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
1626	485	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
1626	485	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	FastMath.abs($) <= costRelativeTolerance
1626	485	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
1626	485	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
1626	485	16	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
1626	485	16	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
1627	494	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	ConvergenceException	FastMath.abs($) <= 2.2204e-16
1627	494	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	ConvergenceException	$ <= 2.2204e-16
1627	494	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	ConvergenceException	$ <= 2.0
1628	497	23	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	ConvergenceException	$ <= 2.2204e-16 * xNorm
1628	497	23	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	ConvergenceException	delta <= 2.2204e-16 * $
1629	500	23	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	ConvergenceException	$ <= 2.2204e-16
30921	535	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.rank
30921	535	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
30922	538	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
30922	538	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < cols
30923	541	8	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
30924	544	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
30924	544	12	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
30925	553	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
30925	553	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1630	561	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
1630	561	8	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1631	571	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.rank == $.solvedCols
30926	572	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
30926	572	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
30927	577	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
30927	577	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
30928	580	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
30928	580	16	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
30929	592	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
30929	592	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
30930	595	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
30930	595	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1632	603	8	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
1633	611	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
30931	615	8	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1634	618	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
30932	622	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
30932	622	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
30933	629	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
30933	629	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1635	641	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1635	641	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1635	641	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	FastMath.abs($) <= 0.1 * delta
1635	641	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1635	641	12	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
1635	641	12	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	FastMath.abs(fp) <= 0.1 * $
30934	647	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
30934	647	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
30935	651	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
30935	651	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
30936	655	16	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
30936	655	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
30937	660	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
30937	660	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1636	667	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
1637	669	19	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
30938	704	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
30938	704	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
30939	706	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
30939	706	12	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
30940	714	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
30940	714	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1638	720	12	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
30941	729	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
30941	729	12	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
1639	734	16	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1639	734	16	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1640	739	20	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	FastMath.abs($) < FastMath.abs(lmDiag[k])
1640	739	20	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	FastMath.abs(rkk) < FastMath.abs(lmDiag[$])
1640	739	20	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	FastMath.abs(rkk) < FastMath.abs($[k])
30942	757	20	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
30942	757	20	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
30943	775	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
30943	775	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1641	776	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing == $.solvedCols
1641	776	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1641	776	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1641	776	12	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1642	779	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing < $.solvedCols
1642	779	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1643	783	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
30944	784	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
30945	787	16	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
30945	787	16	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
30946	795	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
30946	795	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
30947	825	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
30947	825	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
30948	828	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.weightedResidualJacobian.$.length
30948	828	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < weightedResidualJacobian.length
30949	836	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
30949	836	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
30950	841	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.cols
30950	841	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < cols
30951	843	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.weightedResidualJacobian.$.length
30951	843	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < weightedResidualJacobian.length
1644	847	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isNaN($)
1644	847	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isInfinite($)
1645	851	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1645	851	16	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1646	856	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	RET	ak2 <= $.qrRankingThreshold
1646	856	12	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ <= qrRankingThreshold
30952	875	12	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
30953	877	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.weightedResidualJacobian.$.length
30953	877	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < weightedResidualJacobian.length
30954	881	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.weightedResidualJacobian.$.length
30954	881	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < weightedResidualJacobian.length
30955	895	8	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
30955	895	8	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < cols
30956	898	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
30956	898	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
30957	902	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
30957	902	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
649	76	8	Line.java	reset	norm2	double	0	MathIllegalArgumentException	$ == 0.0
650	175	8	Line.java	distance	n	double	0	RET	$ < Precision.SAFE_MIN
651	195	8	Line.java	closestPoint	n	double	0	RET	$ < Precision.EPSILON
735	132	8	Line.java	reset	d	double	1	DEF	$ == 0.0
736	159	8	Line.java	revertSelf	THIS	Line	1	DEF	$.angle < FastMath.PI
737	199	8	Line.java	intersection	d	double	0	RET	FastMath.abs($) < 1.0e-10
30883	128	8	LinearConstraint.java	LinearConstraint	THIS	LinearConstraint	0	NIL-FOR	i < sub.$.length
30883	128	8	LinearConstraint.java	LinearConstraint	i	int	0	NIL-FOR	$ < sub.length
30883	128	8	LinearConstraint.java	LinearConstraint	sub	double[]	0	NIL-FOR	i < $.length
1568	191	6	LinearConstraint.java	equals	THIS	LinearConstraint	0	RET	$ == other
1568	191	6	LinearConstraint.java	equals	other	Object	0	RET	this == $
1569	195	6	LinearConstraint.java	equals	other	Object	0	RET	$ instanceof LinearConstraint
3031	44	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
3031	44	8	LinearInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
3031	44	8	LinearInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
3032	48	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	NumberIsTooSmallException	x.$.length < 2
3032	48	8	LinearInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 2
31678	60	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
31678	60	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
31679	66	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
31679	66	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
1582	108	6	LinearObjectiveFunction.java	equals	THIS	LinearObjectiveFunction	0	RET	$ == other
1582	108	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	this == $
1583	112	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	$ instanceof LinearObjectiveFunction
2438	51	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	NumberIsTooLargeException	$.size() > populationLimit
2438	51	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NumberIsTooLargeException	chromosomes.size() > $
2439	55	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NotPositiveException	$ <= 0
2440	70	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NotPositiveException	$ <= 0
2441	109	12	ListPopulation.java	getFittestChromosome	THIS	ListPopulation	0	DEF	$.chromosome.compareTo(bestChromosome) > 0
2441	109	12	ListPopulation.java	getFittestChromosome	bestChromosome	Chromosome	0	DEF	chromosome.compareTo($) > 0
3107	147	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ < 0
3107	147	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ > 1
3108	152	8	LoessInterpolator.java	LoessInterpolator	robustnessIters	int	0	NotPositiveException	$ < 0
3109	206	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
3109	206	8	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
3109	206	8	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
3110	212	8	LoessInterpolator.java	smooth	n	int	0	NoDataException	$ == 0
3111	222	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 1
3112	226	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 2
3113	232	8	LoessInterpolator.java	smooth	bandwidthInPoints	int	0	NumberIsTooSmallException	$ < 2
31739	249	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	NIL-FOR	iter <= $.robustnessIters
31739	249	8	LoessInterpolator.java	smooth	iter	int	0	NIL-FOR	$ <= robustnessIters
31740	252	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
31740	252	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
3114	257	16	LoessInterpolator.java	smooth	i	int	0	DEF	$ > 0
3115	267	16	LoessInterpolator.java	smooth	ileft	int	1	DEF	xval[i] - xval[$] > xval[iright] - xval[i]
3115	267	16	LoessInterpolator.java	smooth	iright	int	1	DEF	xval[i] - xval[ileft] > xval[$] - xval[i]
3115	267	16	LoessInterpolator.java	smooth	i	int	1	DEF	xval[$] - xval[ileft] > xval[iright] - xval[$]
3115	267	16	LoessInterpolator.java	smooth	xval	double[]	1	DEF	$[i] - $[ileft] > $[iright] - $[i]
31741	286	16	LoessInterpolator.java	smooth	k	int	0	NIL-FOR	$ <= iright
31741	286	16	LoessInterpolator.java	smooth	iright	int	0	NIL-FOR	k <= $
3116	305	16	LoessInterpolator.java	smooth	THIS	LoessInterpolator	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - meanX * meanX)) < $.accuracy
3116	305	16	LoessInterpolator.java	smooth	meanX	double	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - $ * $)) < accuracy
3116	305	16	LoessInterpolator.java	smooth	meanXSquared	double	1	DEF	FastMath.sqrt(FastMath.abs($ - meanX * meanX)) < accuracy
3117	319	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	iter == $.robustnessIters
3117	319	12	LoessInterpolator.java	smooth	iter	int	0	DEF	$ == robustnessIters
3118	332	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	FastMath.abs(medianResidual) < $.accuracy
3118	332	12	LoessInterpolator.java	smooth	medianResidual	double	0	DEF	FastMath.abs($) < accuracy
31742	336	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
31742	336	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
3119	338	16	LoessInterpolator.java	smooth	arg	double	1	DEF	$ >= 1
3120	368	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
3120	368	8	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
3120	368	8	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
3121	402	8	LoessInterpolator.java	updateBandwidthInterval	THIS	LoessInterpolator	0	DEF	nextRight < xval.$.length
3121	402	8	LoessInterpolator.java	updateBandwidthInterval	left	int	0	DEF	xval[nextRight] - xval[i] < xval[i] - xval[$]
3121	402	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	$ < xval.length
3121	402	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	xval[$] - xval[i] < xval[i] - xval[left]
3121	402	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	nextRight < $.length
3121	402	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	$[nextRight] - $[i] < $[i] - $[left]
3121	402	8	LoessInterpolator.java	updateBandwidthInterval	i	int	0	DEF	xval[nextRight] - xval[$] < xval[$] - xval[left]
31743	419	8	LoessInterpolator.java	nextNonzero	THIS	LoessInterpolator	0	NIL-WHILE	j < weights.$.length
31743	419	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	$ < weights.length
31743	419	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	weights[$] == 0
31743	419	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	j < $.length
31743	419	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	$[j] == 0
3122	435	8	LoessInterpolator.java	tricube	absX	double	0	RET	$ >= 1.0
31744	450	8	LoessInterpolator.java	checkAllFiniteReal	THIS	LoessInterpolator	0	NIL-FOR	i < values.$.length
31744	450	8	LoessInterpolator.java	checkAllFiniteReal	i	int	0	NIL-FOR	$ < values.length
31744	450	8	LoessInterpolator.java	checkAllFiniteReal	values	double[]	0	NIL-FOR	i < $.length
1085	99	8	LogNormalDistribution.java	LogNormalDistribution	shape	double	0	NotStrictlyPositiveException	$ <= 0
1086	160	8	LogNormalDistribution.java	density	x	double	0	RET	$ <= 0
1087	184	8	LogNormalDistribution.java	cumulativeProbability	x	double	0	RET	$ <= 0
1088	188	8	LogNormalDistribution.java	cumulativeProbability	THIS	LogNormalDistribution	0	RET	FastMath.abs(dev) > 40 * $.shape
1088	188	8	LogNormalDistribution.java	cumulativeProbability	dev	double	0	RET	FastMath.abs($) > 40 * shape
1089	198	8	LogNormalDistribution.java	cumulativeProbability	x0	double	0	NumberIsTooLargeException	$ > x1
1089	198	8	LogNormalDistribution.java	cumulativeProbability	x1	double	0	NumberIsTooLargeException	x0 > $
1090	202	8	LogNormalDistribution.java	cumulativeProbability	x0	double	0	RET	$ <= 0
1090	202	8	LogNormalDistribution.java	cumulativeProbability	x1	double	0	RET	$ <= 0
3130	68	8	Logistic.java	Logistic	n	double	0	NotStrictlyPositiveException	$ <= 0
3126	152	8	Logit.java	value	x	double	0	OutOfRangeException	$ > hi
3126	152	8	Logit.java	value	x	double	0	OutOfRangeException	$ < lo
3126	152	8	Logit.java	value	lo	double	0	OutOfRangeException	x < $
3126	152	8	Logit.java	value	hi	double	0	OutOfRangeException	x > $
2093	74	8	MannWhitneyUTest.java	ensureDataConformance	x	double[]	0	NullArgumentException	$ == null
2093	74	8	MannWhitneyUTest.java	ensureDataConformance	y	double[]	0	NullArgumentException	$ == null
2094	78	8	MannWhitneyUTest.java	ensureDataConformance	THIS	MannWhitneyUTest	0	NoDataException	x.$.length == 0
2094	78	8	MannWhitneyUTest.java	ensureDataConformance	THIS	MannWhitneyUTest	0	NoDataException	y.$.length == 0
2094	78	8	MannWhitneyUTest.java	ensureDataConformance	x	double[]	0	NoDataException	$.length == 0
2094	78	8	MannWhitneyUTest.java	ensureDataConformance	y	double[]	0	NoDataException	$.length == 0
31235	140	8	MannWhitneyUTest.java	mannWhitneyU	THIS	MannWhitneyUTest	0	NIL-FOR	i < x.$.length
31235	140	8	MannWhitneyUTest.java	mannWhitneyU	i	int	0	NIL-FOR	$ < x.length
31235	140	8	MannWhitneyUTest.java	mannWhitneyU	x	double[]	0	NIL-FOR	i < $.length
30038	57	8	MathArrays.java	distance1	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
30038	57	8	MathArrays.java	distance1	i	int	0	NIL-FOR	$ < p1.length
30038	57	8	MathArrays.java	distance1	p1	double[]	0	NIL-FOR	i < $.length
30039	72	6	MathArrays.java	distance1	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
30039	72	6	MathArrays.java	distance1	i	int	0	NIL-FOR	$ < p1.length
30039	72	6	MathArrays.java	distance1	p1	int[]	0	NIL-FOR	i < $.length
30040	87	8	MathArrays.java	distance	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
30040	87	8	MathArrays.java	distance	i	int	0	NIL-FOR	$ < p1.length
30040	87	8	MathArrays.java	distance	p1	double[]	0	NIL-FOR	i < $.length
30041	103	6	MathArrays.java	distance	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
30041	103	6	MathArrays.java	distance	i	int	0	NIL-FOR	$ < p1.length
30041	103	6	MathArrays.java	distance	p1	int[]	0	NIL-FOR	i < $.length
30042	119	8	MathArrays.java	distanceInf	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
30042	119	8	MathArrays.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
30042	119	8	MathArrays.java	distanceInf	p1	double[]	0	NIL-FOR	i < $.length
30043	134	8	MathArrays.java	distanceInf	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
30043	134	8	MathArrays.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
30043	134	8	MathArrays.java	distanceInf	p1	int[]	0	NIL-FOR	i < $.length
30044	163	8	MathArrays.java	isMonotonic	i	int	0	NIL-FOR	$ < max
30044	163	8	MathArrays.java	isMonotonic	max	int	0	NIL-FOR	i < $
99	168	16	MathArrays.java	isMonotonic	strict	boolean	1	RET	$
100	169	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ >= 0
101	173	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ > 0
102	180	16	MathArrays.java	isMonotonic	strict	boolean	1	RET	$
103	181	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ >= 0
104	185	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ > 0
30045	232	8	MathArrays.java	checkOrder	max	int	0	NIL-FOR	index < $
30045	232	8	MathArrays.java	checkOrder	index	int	0	NIL-FOR	$ < max
105	235	16	MathArrays.java	checkOrder	strict	boolean	1	DEF	$
106	236	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] <= $
106	236	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] <= previous
106	236	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] <= previous
107	240	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] < $
107	240	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] < previous
107	240	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] < previous
108	246	16	MathArrays.java	checkOrder	strict	boolean	1	DEF	$
109	247	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] >= $
109	247	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] >= previous
109	247	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] >= previous
110	251	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] > $
110	251	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] > previous
110	251	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] > previous
111	264	8	MathArrays.java	checkOrder	max	int	0	RET	index == $
111	264	8	MathArrays.java	checkOrder	index	int	0	RET	$ == max
112	270	8	MathArrays.java	checkOrder	abort	boolean	1	NonMonotonicSequenceException	$
30046	372	8	MathArrays.java	safeNorm	THIS	MathArrays	0	NIL-FOR	i < v.$.length
30046	372	8	MathArrays.java	safeNorm	i	int	0	NIL-FOR	$ < v.length
30046	372	8	MathArrays.java	safeNorm	v	double[]	0	NIL-FOR	i < $.length
113	374	12	MathArrays.java	safeNorm	xabs	double	1	DEF	$ < rdwarf
113	374	12	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > agiant
113	374	12	MathArrays.java	safeNorm	rdwarf	double	1	DEF	xabs < $
113	374	12	MathArrays.java	safeNorm	agiant	double	1	DEF	xabs > $
114	375	16	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > rdwarf
114	375	16	MathArrays.java	safeNorm	rdwarf	double	1	DEF	xabs > $
115	376	20	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > x1max
115	376	20	MathArrays.java	safeNorm	x1max	double	1	DEF	xabs > $
116	385	20	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > x3max
116	385	20	MathArrays.java	safeNorm	x3max	double	1	DEF	xabs > $
117	390	24	MathArrays.java	safeNorm	xabs	double	0	DEF	$ != 0
118	401	8	MathArrays.java	safeNorm	s1	double	1	DEF	$ != 0
119	404	12	MathArrays.java	safeNorm	s2	double	1	DEF	$ == 0
120	407	16	MathArrays.java	safeNorm	s2	double	1	DEF	$ >= x3max
120	407	16	MathArrays.java	safeNorm	x3max	double	1	DEF	s2 >= $
121	458	8	MathArrays.java	sortInPlace	x	double[]	0	NullArgumentException	$ == null
30047	467	8	MathArrays.java	sortInPlace	i	int	0	NIL-FOR	$ < len
30047	467	8	MathArrays.java	sortInPlace	len	int	0	NIL-FOR	i < $
30048	469	12	MathArrays.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
30048	469	12	MathArrays.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
122	471	16	MathArrays.java	sortInPlace	y	double[]	0	NullArgumentException	$ == null
123	474	16	MathArrays.java	sortInPlace	THIS	MathArrays	0	DimensionMismatchException	y.$.length != len
123	474	16	MathArrays.java	sortInPlace	y	double[]	0	DimensionMismatchException	$.length != len
123	474	16	MathArrays.java	sortInPlace	len	int	0	DimensionMismatchException	y.length != $
30049	504	8	MathArrays.java	sortInPlace	i	int	0	NIL-FOR	$ < len
30049	504	8	MathArrays.java	sortInPlace	len	int	0	NIL-FOR	i < $
30050	508	12	MathArrays.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
30050	508	12	MathArrays.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
124	582	8	MathArrays.java	linearCombination	THIS	MathArrays	0	DimensionMismatchException	len != b.$.length
124	582	8	MathArrays.java	linearCombination	len	int	0	DimensionMismatchException	$ != b.length
124	582	8	MathArrays.java	linearCombination	b	double[]	0	DimensionMismatchException	len != $.length
30051	589	8	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < len
30051	589	8	MathArrays.java	linearCombination	len	int	0	NIL-FOR	i < $
30052	615	8	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < lenMinusOne
30052	615	8	MathArrays.java	linearCombination	lenMinusOne	int	0	NIL-FOR	i < $
125	625	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
30053	629	12	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < len
30053	629	12	MathArrays.java	linearCombination	len	int	0	NIL-FOR	i < $
126	705	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
127	802	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
128	921	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
129	941	8	MathArrays.java	equals	x	float[]	0	RET	$ == null
129	941	8	MathArrays.java	equals	y	float[]	0	RET	$ == null
130	944	8	MathArrays.java	equals	THIS	MathArrays	0	RET	x.$.length != y.$.length
130	944	8	MathArrays.java	equals	x	float[]	0	RET	$.length != y.length
130	944	8	MathArrays.java	equals	y	float[]	0	RET	x.length != $.length
30054	947	8	MathArrays.java	equals	THIS	MathArrays	0	NIL-FOR	i < x.$.length
30054	947	8	MathArrays.java	equals	i	int	0	NIL-FOR	$ < x.length
30054	947	8	MathArrays.java	equals	x	float[]	0	NIL-FOR	i < $.length
131	948	12	MathArrays.java	equals	i	int	0	RET	Precision.equals(x[$], y[$])
131	948	12	MathArrays.java	equals	x	float[]	0	RET	Precision.equals($[i], y[i])
131	948	12	MathArrays.java	equals	y	float[]	0	RET	Precision.equals(x[i], $[i])
132	967	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	$ == null
132	967	8	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	$ == null
133	970	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	RET	x.$.length != y.$.length
133	970	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	$.length != y.length
133	970	8	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	x.length != $.length
30055	973	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	NIL-FOR	i < x.$.length
30055	973	8	MathArrays.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
30055	973	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	NIL-FOR	i < $.length
134	974	12	MathArrays.java	equalsIncludingNaN	i	int	0	RET	Precision.equalsIncludingNaN(x[$], y[$])
134	974	12	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	Precision.equalsIncludingNaN($[i], y[i])
134	974	12	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	Precision.equalsIncludingNaN(x[i], $[i])
135	992	8	MathArrays.java	equals	x	double[]	0	RET	$ == null
135	992	8	MathArrays.java	equals	y	double[]	0	RET	$ == null
136	995	8	MathArrays.java	equals	THIS	MathArrays	0	RET	x.$.length != y.$.length
136	995	8	MathArrays.java	equals	x	double[]	0	RET	$.length != y.length
136	995	8	MathArrays.java	equals	y	double[]	0	RET	x.length != $.length
30056	998	8	MathArrays.java	equals	THIS	MathArrays	0	NIL-FOR	i < x.$.length
30056	998	8	MathArrays.java	equals	i	int	0	NIL-FOR	$ < x.length
30056	998	8	MathArrays.java	equals	x	double[]	0	NIL-FOR	i < $.length
137	999	12	MathArrays.java	equals	i	int	0	RET	Precision.equals(x[$], y[$])
137	999	12	MathArrays.java	equals	x	double[]	0	RET	Precision.equals($[i], y[i])
137	999	12	MathArrays.java	equals	y	double[]	0	RET	Precision.equals(x[i], $[i])
138	1018	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	$ == null
138	1018	8	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	$ == null
139	1021	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	RET	x.$.length != y.$.length
139	1021	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	$.length != y.length
139	1021	8	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	x.length != $.length
30057	1024	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	NIL-FOR	i < x.$.length
30057	1024	8	MathArrays.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
30057	1024	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	NIL-FOR	i < $.length
140	1025	12	MathArrays.java	equalsIncludingNaN	i	int	0	RET	Precision.equalsIncludingNaN(x[$], y[$])
140	1025	12	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	Precision.equalsIncludingNaN($[i], y[i])
140	1025	12	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	Precision.equalsIncludingNaN(x[i], $[i])
141	1055	9	MathArrays.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isInfinite($)
142	1058	9	MathArrays.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isNaN($)
30058	1064	9	MathArrays.java	normalizeArray	i	int	0	NIL-FOR	$ < len
30058	1064	9	MathArrays.java	normalizeArray	len	int	0	NIL-FOR	i < $
143	1065	13	MathArrays.java	normalizeArray	i	int	0	MathIllegalArgumentException	Double.isInfinite(values[$])
143	1065	13	MathArrays.java	normalizeArray	values	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
144	1068	13	MathArrays.java	normalizeArray	i	int	0	DEF	Double.isNaN(values[$])
144	1068	13	MathArrays.java	normalizeArray	values	double[]	0	DEF	Double.isNaN($[i])
145	1072	9	MathArrays.java	normalizeArray	sum	double	0	MathArithmeticException	$ == 0
30059	1075	9	MathArrays.java	normalizeArray	i	int	0	NIL-FOR	$ < len
30059	1075	9	MathArrays.java	normalizeArray	len	int	0	NIL-FOR	i < $
146	1076	13	MathArrays.java	normalizeArray	i	int	1	DEF	Double.isNaN(values[$])
146	1076	13	MathArrays.java	normalizeArray	values	double[]	1	DEF	Double.isNaN($[i])
484	128	8	MathUtils.java	copySign	magnitude	byte	1	RET	$ < 0
484	128	8	MathUtils.java	copySign	magnitude	byte	1	RET	$ >= 0
484	128	8	MathUtils.java	copySign	sign	byte	1	RET	$ < 0
484	128	8	MathUtils.java	copySign	sign	byte	1	RET	$ >= 0
485	131	15	MathUtils.java	copySign	magnitude	byte	1	MathArithmeticException	$ == Byte.MIN_VALUE
485	131	15	MathUtils.java	copySign	sign	byte	1	MathArithmeticException	$ >= 0
486	150	8	MathUtils.java	copySign	magnitude	short	1	RET	$ < 0
486	150	8	MathUtils.java	copySign	magnitude	short	1	RET	$ >= 0
486	150	8	MathUtils.java	copySign	sign	short	1	RET	$ < 0
486	150	8	MathUtils.java	copySign	sign	short	1	RET	$ >= 0
487	153	15	MathUtils.java	copySign	magnitude	short	1	MathArithmeticException	$ == Short.MIN_VALUE
487	153	15	MathUtils.java	copySign	sign	short	1	MathArithmeticException	$ >= 0
488	172	8	MathUtils.java	copySign	magnitude	int	1	RET	$ >= 0
488	172	8	MathUtils.java	copySign	magnitude	int	1	RET	$ < 0
488	172	8	MathUtils.java	copySign	sign	int	1	RET	$ < 0
488	172	8	MathUtils.java	copySign	sign	int	1	RET	$ >= 0
489	175	15	MathUtils.java	copySign	magnitude	int	1	MathArithmeticException	$ == Integer.MIN_VALUE
489	175	15	MathUtils.java	copySign	sign	int	1	MathArithmeticException	$ >= 0
490	194	8	MathUtils.java	copySign	magnitude	long	1	RET	$ < 0
490	194	8	MathUtils.java	copySign	magnitude	long	1	RET	$ >= 0
490	194	8	MathUtils.java	copySign	sign	long	1	RET	$ >= 0
490	194	8	MathUtils.java	copySign	sign	long	1	RET	$ < 0
491	197	15	MathUtils.java	copySign	magnitude	long	1	MathArithmeticException	$ == Long.MIN_VALUE
491	197	15	MathUtils.java	copySign	sign	long	1	MathArithmeticException	$ >= 0
492	212	8	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
492	212	8	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
30081	225	8	MathUtils.java	checkFinite	THIS	MathUtils	0	NIL-FOR	i < val.$.length
30081	225	8	MathUtils.java	checkFinite	i	int	0	NIL-FOR	$ < val.length
30081	225	8	MathUtils.java	checkFinite	val	double[]	0	NIL-FOR	i < $.length
493	227	12	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
493	227	12	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
494	244	8	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
495	257	8	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
1330	116	8	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$ == null
1330	116	8	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$[0] == null
1331	144	8	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$[0] == null
1331	144	8	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$ == null
30568	162	8	MatrixUtils.java	createRealIdentityMatrix	i	int	0	NIL-FOR	$ < dimension
30568	162	8	MatrixUtils.java	createRealIdentityMatrix	dimension	int	0	NIL-FOR	i < $
30569	184	8	MatrixUtils.java	createFieldIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
30569	184	8	MatrixUtils.java	createFieldIdentityMatrix	dimension	int	0	NIL-FOR	row < $
30570	202	8	MatrixUtils.java	createRealDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
30570	202	8	MatrixUtils.java	createRealDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
30570	202	8	MatrixUtils.java	createRealDiagonalMatrix	diagonal	double[]	0	NIL-FOR	i < $.length
30571	221	8	MatrixUtils.java	createFieldDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
30571	221	8	MatrixUtils.java	createFieldDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
30571	221	8	MatrixUtils.java	createFieldDiagonalMatrix	diagonal	T[]	0	NIL-FOR	i < $.length
1332	236	8	MatrixUtils.java	createRealVector	data	double[]	0	NullArgumentException	$ == null
1333	253	8	MatrixUtils.java	createFieldVector	data	T[]	0	NullArgumentException	$ == null
1334	256	8	MatrixUtils.java	createFieldVector	THIS	MatrixUtils	0	ZeroException	data.$.length == 0
1334	256	8	MatrixUtils.java	createFieldVector	data	T[]	0	ZeroException	$.length == 0
1335	272	8	MatrixUtils.java	createRowRealMatrix	rowData	double[]	0	NullArgumentException	$ == null
30572	277	8	MatrixUtils.java	createRowRealMatrix	i	int	0	NIL-FOR	$ < nCols
30572	277	8	MatrixUtils.java	createRowRealMatrix	nCols	int	0	NIL-FOR	i < $
1336	295	8	MatrixUtils.java	createRowFieldMatrix	rowData	T[]	0	NullArgumentException	$ == null
1337	299	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
30573	303	8	MatrixUtils.java	createRowFieldMatrix	i	int	0	NIL-FOR	$ < nCols
30573	303	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NIL-FOR	i < $
1338	319	8	MatrixUtils.java	createColumnRealMatrix	columnData	double[]	0	NullArgumentException	$ == null
30574	324	8	MatrixUtils.java	createColumnRealMatrix	i	int	0	NIL-FOR	$ < nRows
30574	324	8	MatrixUtils.java	createColumnRealMatrix	nRows	int	0	NIL-FOR	i < $
1339	342	8	MatrixUtils.java	createColumnFieldMatrix	columnData	T[]	0	NullArgumentException	$ == null
1340	346	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NoDataException	$ == 0
30575	350	8	MatrixUtils.java	createColumnFieldMatrix	i	int	0	NIL-FOR	$ < nRows
30575	350	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NIL-FOR	i < $
1341	379	8	MatrixUtils.java	checkRowIndex	m	AnyMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1341	379	8	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1341	379	8	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= m.getRowDimension()
1342	394	8	MatrixUtils.java	checkColumnIndex	m	AnyMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1342	394	8	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= m.getColumnDimension()
1342	394	8	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1343	418	8	MatrixUtils.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1343	418	8	MatrixUtils.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1344	425	8	MatrixUtils.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1344	425	8	MatrixUtils.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1345	449	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1346	452	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1347	455	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedRows.$.length == 0
1347	455	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1348	458	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedColumns.$.length == 0
1348	458	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1349	478	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1349	478	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1349	478	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1349	478	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1350	493	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1350	493	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1350	493	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1350	493	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1351	508	8	MatrixUtils.java	checkMultiplicationCompatible	left	AnyMatrix	0	DimensionMismatchException	$.getColumnDimension() != right.getRowDimension()
1351	508	8	MatrixUtils.java	checkMultiplicationCompatible	right	AnyMatrix	0	DimensionMismatchException	left.getColumnDimension() != $.getRowDimension()
30576	647	8	MatrixUtils.java	serializeRealVector	i	int	0	NIL-FOR	$ < n
30576	647	8	MatrixUtils.java	serializeRealVector	n	int	0	NIL-FOR	i < $
30577	678	12	MatrixUtils.java	deserializeRealVector	i	int	0	NIL-FOR	$ < n
30577	678	12	MatrixUtils.java	deserializeRealVector	n	int	0	NIL-FOR	i < $
30578	750	8	MatrixUtils.java	serializeRealMatrix	i	int	0	NIL-FOR	$ < n
30578	750	8	MatrixUtils.java	serializeRealMatrix	n	int	0	NIL-FOR	i < $
30579	751	12	MatrixUtils.java	serializeRealMatrix	j	int	0	NIL-FOR	$ < m
30579	751	12	MatrixUtils.java	serializeRealMatrix	m	int	0	NIL-FOR	j < $
30580	784	12	MatrixUtils.java	deserializeRealMatrix	i	int	0	NIL-FOR	$ < n
30580	784	12	MatrixUtils.java	deserializeRealMatrix	n	int	0	NIL-FOR	i < $
30581	786	16	MatrixUtils.java	deserializeRealMatrix	j	int	0	NIL-FOR	$ < m
30581	786	16	MatrixUtils.java	deserializeRealMatrix	m	int	0	NIL-FOR	j < $
1352	827	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$.getRowDimension() != b.getDimension()
1352	827	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$ == null
1352	827	8	MatrixUtils.java	solveLowerTriangularSystem	b	RealVector	0	MathIllegalArgumentException	$ == null
1352	827	8	MatrixUtils.java	solveLowerTriangularSystem	b	RealVector	0	MathIllegalArgumentException	rm.getRowDimension() != $.getDimension()
1353	832	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$.getColumnDimension() != $.getRowDimension()
30582	838	8	MatrixUtils.java	solveLowerTriangularSystem	i	int	0	NIL-FOR	$ < rows
30582	838	8	MatrixUtils.java	solveLowerTriangularSystem	rows	int	0	NIL-FOR	i < $
1354	840	12	MatrixUtils.java	solveLowerTriangularSystem	diag	double	0	MathArithmeticException	FastMath.abs($) < Precision.SAFE_MIN
30583	845	12	MatrixUtils.java	solveLowerTriangularSystem	j	int	0	NIL-FOR	$< rows
30583	845	12	MatrixUtils.java	solveLowerTriangularSystem	rows	int	0	NIL-FOR	j< $
1355	867	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$.getRowDimension() != b.getDimension()
1355	867	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$ == null
1355	867	8	MatrixUtils.java	solveUpperTriangularSystem	b	RealVector	0	MathIllegalArgumentException	rm.getRowDimension() != $.getDimension()
1355	867	8	MatrixUtils.java	solveUpperTriangularSystem	b	RealVector	0	MathIllegalArgumentException	$ == null
1356	872	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$.getColumnDimension() != $.getRowDimension()
30584	878	8	MatrixUtils.java	solveUpperTriangularSystem	i	int	0	NIL-FOR	$ >-1
1357	880	12	MatrixUtils.java	solveUpperTriangularSystem	diag	double	0	MathArithmeticException	FastMath.abs($) < Precision.SAFE_MIN
30585	885	12	MatrixUtils.java	solveUpperTriangularSystem	j	int	0	NIL-FOR	$>-1
2041	76	8	Max.java	increment	THIS	Max	0	DEF	d > $.value
2041	76	8	Max.java	increment	THIS	Max	0	DEF	Double.isNaN($.value)
2041	76	8	Max.java	increment	d	double	0	DEF	$ > value
2042	131	8	Max.java	evaluate	THIS	Max	0	DEF	$.test(values, begin, length)
2042	131	8	Max.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2042	131	8	Max.java	evaluate	begin	int	0	DEF	test(values, $, length)
2042	131	8	Max.java	evaluate	length	int	0	DEF	test(values, begin, $)
31221	133	12	Max.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
31221	133	12	Max.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
31221	133	12	Max.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2043	134	16	Max.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
2043	134	16	Max.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
1970	109	8	Mean.java	increment	THIS	Mean	0	DEF	$.incMoment
1971	119	8	Mean.java	clear	THIS	Mean	0	DEF	$.incMoment
1972	157	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, begin, length)
1972	157	8	Mean.java	evaluate	values	double[]	0	RET	test($, begin, length)
1972	157	8	Mean.java	evaluate	begin	int	0	RET	test(values, $, length)
1972	157	8	Mean.java	evaluate	length	int	0	RET	test(values, begin, $)
31207	166	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
31207	166	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
31207	166	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1973	205	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, weights, begin, length)
1973	205	8	Mean.java	evaluate	values	double[]	0	RET	test($, weights, begin, length)
1973	205	8	Mean.java	evaluate	weights	double[]	0	RET	test(values, $, begin, length)
1973	205	8	Mean.java	evaluate	begin	int	0	RET	test(values, weights, $, length)
1973	205	8	Mean.java	evaluate	length	int	0	RET	test(values, weights, begin, $)
31208	214	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
31208	214	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
31208	214	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
31399	147	8	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	NIL-FOR	$.mti < N
2417	167	8	MersenneTwister.java	setSeed	seed	int[]	0	RET	$ == null
31400	176	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
2418	182	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
2419	186	12	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	DEF	j >= seed.$.length
2419	186	12	MersenneTwister.java	setSeed	j	int	0	DEF	$ >= seed.length
2419	186	12	MersenneTwister.java	setSeed	seed	int[]	0	DEF	j >= $.length
31401	191	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
2420	197	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
2421	233	8	MersenneTwister.java	next	THIS	MersenneTwister	0	DEF	$.mti >= N
31402	235	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - M
31403	241	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - 1
3066	151	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$ == null
3066	151	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	NullArgumentException	$ == null
3067	155	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NoDataException	xval.$.length == 0
3067	155	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NoDataException	$.length == 0
3068	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xval.$.length != yval.$.length
3068	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	DimensionMismatchException	$.length != yval.length
3068	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	DimensionMismatchException	xval.length != $.length
3069	161	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$[0] == null
31692	170	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NIL-FOR	i < xval.$.length
31692	170	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < xval.length
31692	170	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NIL-FOR	i < $.length
3070	172	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	NullArgumentException	$ == null
3071	175	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xvalI.$.length != $.dimension
3071	175	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	DimensionMismatchException	$.length != dimension
31693	185	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < microsphereElements
31693	185	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	microsphereElements	int	0	NIL-FOR	i < $
3072	209	12	MicrosphereInterpolatingFunction.java	value	diffNorm	double	0	RET	FastMath.abs($) < FastMath.ulp(1d)
3073	228	12	MicrosphereInterpolatingFunction.java	value	sd	Entry<RealVector,Double>	0	DEF	$ != null
3100	72	8	MicrosphereInterpolator.java	MicrosphereInterpolator	exponent	int	0	NotPositiveException	$ < 0
3101	75	8	MicrosphereInterpolator.java	MicrosphereInterpolator	elements	int	0	NotStrictlyPositiveException	$ <= 0
2634	92	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	1	DEF	$.previousState != null
2634	92	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
31563	95	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
31563	95	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
31564	104	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
31564	104	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2197	118	8	MillerUpdatingRegression.java	MillerUpdatingRegression	numberOfVariables	int	0	ModelSpecificationException	$ < 1
2198	121	8	MillerUpdatingRegression.java	MillerUpdatingRegression	includeConstant	boolean	1	DEF	$
31300	138	8	MillerUpdatingRegression.java	MillerUpdatingRegression	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
31300	138	8	MillerUpdatingRegression.java	MillerUpdatingRegression	i	int	0	NIL-FOR	$ < this.nvars
2199	141	8	MillerUpdatingRegression.java	MillerUpdatingRegression	errorTolerance	double	1	DEF	$ > 0
2200	184	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length + 1 != $.nvars
2200	184	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.hasIntercept
2200	184	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.hasIntercept
2200	184	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length != $.nvars
2200	184	8	MillerUpdatingRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length + 1 != nvars
2200	184	8	MillerUpdatingRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length != nvars
2201	189	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	1	DEF	$.hasIntercept
2202	210	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length != y.$.length
2202	210	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$ == null
2202	210	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length != y.length
2202	210	8	MillerUpdatingRegression.java	addObservations	y	double[]	0	ModelSpecificationException	x.length != $.length
2202	210	8	MillerUpdatingRegression.java	addObservations	y	double[]	0	ModelSpecificationException	$ == null
2203	216	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length == 0
2203	216	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length == 0
2204	220	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x[0].length + 1 > x.$.length
2204	220	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$[0].length + 1 > $.length
31301	225	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	NIL-FOR	i < x.$.length
31301	225	8	MillerUpdatingRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
31301	225	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
31302	258	8	MillerUpdatingRegression.java	include	THIS	MillerUpdatingRegression	0	NIL-FOR	i < x.$.length
31302	258	8	MillerUpdatingRegression.java	include	i	int	0	NIL-FOR	$ < x.length
31302	258	8	MillerUpdatingRegression.java	include	x	double[]	0	NIL-FOR	i < $.length
2205	259	12	MillerUpdatingRegression.java	include	w	double	0	RET	$ == 0.0
2206	264	12	MillerUpdatingRegression.java	include	xi	double	0	DEF	$ == 0.0
2207	271	12	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2208	274	16	MillerUpdatingRegression.java	include	tmp	double	0	DEF	FastMath.abs($) > Precision.EPSILON
31303	282	12	MillerUpdatingRegression.java	include	THIS	MillerUpdatingRegression	0	NIL-FOR	k < $.nvars
31303	282	12	MillerUpdatingRegression.java	include	k	int	0	NIL-FOR	$ < nvars
2209	285	16	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2210	294	12	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2211	314	8	MillerUpdatingRegression.java	smartAdd	_a	double	1	RET	$ > _b
2211	314	8	MillerUpdatingRegression.java	smartAdd	_b	double	1	RET	_a > $
2212	316	12	MillerUpdatingRegression.java	smartAdd	eps	double	0	RET	_b > $
2212	316	12	MillerUpdatingRegression.java	smartAdd	_b	double	0	RET	$ > eps
2213	322	12	MillerUpdatingRegression.java	smartAdd	eps	double	0	RET	_a > $
2213	322	12	MillerUpdatingRegression.java	smartAdd	_a	double	0	RET	$ > eps
31304	343	8	MillerUpdatingRegression.java	clear	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
31304	343	8	MillerUpdatingRegression.java	clear	i	int	0	NIL-FOR	$ < nvars
31305	362	8	MillerUpdatingRegression.java	tolset	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
31305	362	8	MillerUpdatingRegression.java	tolset	i	int	0	NIL-FOR	$ < nvars
31306	366	8	MillerUpdatingRegression.java	tolset	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
31306	366	8	MillerUpdatingRegression.java	tolset	col	int	0	NIL-FOR	$ < nvars
31307	369	12	MillerUpdatingRegression.java	tolset	row	int	0	NIL-FOR	$ < col
31307	369	12	MillerUpdatingRegression.java	tolset	col	int	0	NIL-FOR	row < $
2214	390	8	MillerUpdatingRegression.java	regcf	nreq	int	0	ModelSpecificationException	$ < 1
2215	393	8	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	ModelSpecificationException	nreq > $.nvars
2215	393	8	MillerUpdatingRegression.java	regcf	nreq	int	0	ModelSpecificationException	$ > this.nvars
2216	397	8	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	DEF	$.tol_set
31308	402	8	MillerUpdatingRegression.java	regcf	i	int	0	NIL-FOR	$ > -1
2217	403	12	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	1	DEF	Math.sqrt($.d[i]) < $.tol[i]
2217	403	12	MillerUpdatingRegression.java	regcf	i	int	1	DEF	Math.sqrt(d[$]) < tol[$]
31309	410	16	MillerUpdatingRegression.java	regcf	j	int	0	NIL-FOR	$ < nreq
31309	410	16	MillerUpdatingRegression.java	regcf	nreq	int	0	NIL-FOR	j < $
2218	416	8	MillerUpdatingRegression.java	regcf	rankProblem	boolean	0	DEF	$
31310	417	12	MillerUpdatingRegression.java	regcf	i	int	0	NIL-FOR	$ < nreq
31310	417	12	MillerUpdatingRegression.java	regcf	nreq	int	0	NIL-FOR	i < $
2219	418	16	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2219	418	16	MillerUpdatingRegression.java	regcf	i	int	0	DEF	this.lindep[$]
31311	435	8	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
31311	435	8	MillerUpdatingRegression.java	singcheck	i	int	0	NIL-FOR	$ < nvars
31312	438	8	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
31312	438	8	MillerUpdatingRegression.java	singcheck	col	int	0	NIL-FOR	$ < nvars
31313	444	12	MillerUpdatingRegression.java	singcheck	row	int	0	NIL-FOR	$ < col - 1
31313	444	12	MillerUpdatingRegression.java	singcheck	col	int	0	NIL-FOR	row < $ - 1
2220	445	16	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	DEF	Math.abs($.r[pos]) * $.work_sing[row] < temp
2220	445	16	MillerUpdatingRegression.java	singcheck	row	int	0	DEF	Math.abs(r[pos]) * work_sing[$] < temp
2220	445	16	MillerUpdatingRegression.java	singcheck	temp	double	0	DEF	Math.abs(r[pos]) * work_sing[row] < $
2220	445	16	MillerUpdatingRegression.java	singcheck	pos	int	0	DEF	Math.abs(r[$]) * work_sing[row] < temp
2221	454	12	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	DEF	$.work_sing[col] < temp
2221	454	12	MillerUpdatingRegression.java	singcheck	col	int	0	DEF	work_sing[$] < temp
2221	454	12	MillerUpdatingRegression.java	singcheck	temp	double	0	DEF	work_sing[col] < $
2222	456	16	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	1	DEF	col < $.nvars - 1
2222	456	16	MillerUpdatingRegression.java	singcheck	col	int	1	DEF	$ < nvars - 1
31314	459	20	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	_xi < $.nvars
31314	459	20	MillerUpdatingRegression.java	singcheck	_xi	int	0	NIL-FOR	$ < nvars
31315	488	8	MillerUpdatingRegression.java	ss	i	int	0	NIL-FOR	$ > 0
2223	515	8	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	RET	$.nobs <= nreq
2223	515	8	MillerUpdatingRegression.java	cov	nreq	int	0	RET	this.nobs <= $
31316	519	8	MillerUpdatingRegression.java	cov	i	int	0	NIL-FOR	$ < nreq
31316	519	8	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	i < $
2224	520	12	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2224	520	12	MillerUpdatingRegression.java	cov	i	int	0	DEF	this.lindep[$]
31317	533	8	MillerUpdatingRegression.java	cov	row	int	0	NIL-FOR	$ < nreq
31317	533	8	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	row < $
2225	535	12	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[row]
2225	535	12	MillerUpdatingRegression.java	cov	row	int	0	DEF	this.lindep[$]
31318	536	16	MillerUpdatingRegression.java	cov	col	int	0	NIL-FOR	$ < nreq
31318	536	16	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	col < $
2226	537	20	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	1	DEF	$.lindep[col]
2226	537	20	MillerUpdatingRegression.java	cov	col	int	1	DEF	this.lindep[$]
2227	539	24	MillerUpdatingRegression.java	cov	col	int	1	DEF	row == $
2227	539	24	MillerUpdatingRegression.java	cov	row	int	1	DEF	$ == col
31319	544	24	MillerUpdatingRegression.java	cov	k	int	0	NIL-FOR	$ < nreq
31319	544	24	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	k < $
2228	545	28	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[k]
2228	545	28	MillerUpdatingRegression.java	cov	k	int	0	DEF	this.lindep[$]
31320	576	8	MillerUpdatingRegression.java	inverse	row	int	0	NIL-FOR	$ > 0
2229	577	12	MillerUpdatingRegression.java	inverse	THIS	MillerUpdatingRegression	1	DEF	$.lindep[row]
2229	577	12	MillerUpdatingRegression.java	inverse	row	int	1	DEF	this.lindep[$]
31321	579	16	MillerUpdatingRegression.java	inverse	col	int	0	NIL-FOR	$ > row
31321	579	16	MillerUpdatingRegression.java	inverse	row	int	0	NIL-FOR	col > $
31322	583	20	MillerUpdatingRegression.java	inverse	k	int	0	NIL-FOR	$ < col - 1
31322	583	20	MillerUpdatingRegression.java	inverse	col	int	0	NIL-FOR	k < $ - 1
2230	585	24	MillerUpdatingRegression.java	inverse	THIS	MillerUpdatingRegression	0	DEF	$.lindep[k]
2230	585	24	MillerUpdatingRegression.java	inverse	k	int	0	DEF	this.lindep[$]
2231	647	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	RET	in >= $.nvars
2231	647	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	RET	$ >= nvars
2231	647	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	RET	$ < -1
2232	652	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	DEF	$.d[in] > 0.0
2232	652	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	DEF	d[$] > 0.0
31323	655	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
31323	655	8	MillerUpdatingRegression.java	getPartialCorrelations	col	int	0	NIL-FOR	$ < nvars
31324	658	12	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < col
31324	658	12	MillerUpdatingRegression.java	getPartialCorrelations	col	int	0	NIL-FOR	row < $
2233	662	12	MillerUpdatingRegression.java	getPartialCorrelations	sumxx	double	1	DEF	$ > 0.0
31325	669	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	row < $.nvars
31325	669	8	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < nvars
2234	672	8	MillerUpdatingRegression.java	getPartialCorrelations	sumyy	double	0	DEF	$ > 0.0
31326	676	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col1 < $.nvars
31326	676	8	MillerUpdatingRegression.java	getPartialCorrelations	col1	int	0	NIL-FOR	$ < nvars
31327	680	12	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < col1
31327	680	12	MillerUpdatingRegression.java	getPartialCorrelations	col1	int	0	NIL-FOR	row < $
31328	682	16	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col2 < $.nvars
31328	682	16	MillerUpdatingRegression.java	getPartialCorrelations	col2	int	0	NIL-FOR	$ < nvars
31329	690	12	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col2 < $.nvars
31329	690	12	MillerUpdatingRegression.java	getPartialCorrelations	col2	int	0	NIL-FOR	$ < nvars
2235	728	8	MillerUpdatingRegression.java	vmove	from	int	0	RET	$ == to
2235	728	8	MillerUpdatingRegression.java	vmove	to	int	0	RET	from == $
2236	731	8	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	$.rss_set
2237	735	8	MillerUpdatingRegression.java	vmove	from	int	1	DEF	$ < to
2237	735	8	MillerUpdatingRegression.java	vmove	to	int	1	DEF	from < $
31330	747	8	MillerUpdatingRegression.java	vmove	count	int	0	NIL-WHILE	idx < $
31330	747	8	MillerUpdatingRegression.java	vmove	idx	int	0	NIL-WHILE	$ < count
2238	755	12	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d1 > $.epsilon
2238	755	12	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d2 > $.epsilon
2238	755	12	MillerUpdatingRegression.java	vmove	d1	double	0	DEF	$ > this.epsilon
2238	755	12	MillerUpdatingRegression.java	vmove	d2	double	0	DEF	$ > this.epsilon
2239	757	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	Math.abs(X) * Math.sqrt(d1) < $.tol[mp1]
2239	757	16	MillerUpdatingRegression.java	vmove	d1	double	0	DEF	Math.abs(X) * Math.sqrt($) < tol[mp1]
2239	757	16	MillerUpdatingRegression.java	vmove	mp1	int	0	DEF	Math.abs(X) * Math.sqrt(d1) < tol[$]
2240	760	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	1	DEF	d1 < $.epsilon
2240	760	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	1	DEF	Math.abs(X) < $.epsilon
2240	760	16	MillerUpdatingRegression.java	vmove	d1	double	1	DEF	$ < this.epsilon
31331	764	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
31331	764	20	MillerUpdatingRegression.java	vmove	col	int	0	NIL-FOR	$ < nvars
2241	776	23	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d2 < $.epsilon
2241	776	23	MillerUpdatingRegression.java	vmove	d2	double	0	DEF	$ < this.epsilon
31332	779	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	_i < m1 + $.nvars - m - 1
31332	779	20	MillerUpdatingRegression.java	vmove	_i	int	0	NIL-FOR	$ < m1 + nvars - m - 1
31332	779	20	MillerUpdatingRegression.java	vmove	m1	int	0	NIL-FOR	_i < $ + nvars - m - 1
31332	779	20	MillerUpdatingRegression.java	vmove	m	int	0	NIL-FOR	_i < m1 + nvars - $ - 1
2242	786	16	MillerUpdatingRegression.java	vmove	bSkipTo40	boolean	0	DEF	$
31333	794	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
31333	794	20	MillerUpdatingRegression.java	vmove	col	int	0	NIL-FOR	$ < nvars
2243	806	12	MillerUpdatingRegression.java	vmove	m	int	0	DEF	$ > 0
31334	808	16	MillerUpdatingRegression.java	vmove	row	int	0	NIL-FOR	$ < m
31334	808	16	MillerUpdatingRegression.java	vmove	m	int	0	NIL-FOR	row < $
2244	849	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	RET	list.$.length > $.nvars + 1 - pos1
2244	849	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	RET	list.$.length < 1
2244	849	8	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	$.length > nvars + 1 - pos1
2244	849	8	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	$.length < 1
2244	849	8	MillerUpdatingRegression.java	reorderRegressors	pos1	int	0	RET	list.length > nvars + 1 - $
31335	854	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	NIL-WHILE	i < $.nvars
31335	854	8	MillerUpdatingRegression.java	reorderRegressors	i	int	0	NIL-WHILE	$ < nvars
31336	856	12	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	NIL-FOR	j < list.$.length
31336	856	12	MillerUpdatingRegression.java	reorderRegressors	j	int	0	NIL-FOR	$ < list.length
31336	856	12	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	NIL-FOR	j < $.length
2245	857	16	MillerUpdatingRegression.java	reorderRegressors	j	int	0	RET	l == list[$]
2245	857	16	MillerUpdatingRegression.java	reorderRegressors	l	int	0	RET	$ == list[j]
2245	857	16	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	l == $[j]
2246	858	20	MillerUpdatingRegression.java	reorderRegressors	next	int	0	RET	i > $
2246	858	20	MillerUpdatingRegression.java	reorderRegressors	i	int	0	RET	$ > next
2247	861	24	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	1	RET	next >= list.$.length + pos1
2247	861	24	MillerUpdatingRegression.java	reorderRegressors	next	int	1	RET	$ >= list.length + pos1
2247	861	24	MillerUpdatingRegression.java	reorderRegressors	list	int[]	1	RET	next >= $.length + pos1
2247	861	24	MillerUpdatingRegression.java	reorderRegressors	pos1	int	1	RET	next >= list.length + $
2248	885	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	0	RET	row_data.$.length > $.nvars
2248	885	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	row_data	double[]	0	RET	$.length > nvars
2249	889	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	1	DEF	$.hasIntercept
31337	897	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	0	NIL-FOR	col < xrow.$.length
31337	897	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	0	NIL-FOR	$ < xrow.length
31337	897	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	xrow	double[]	0	NIL-FOR	col < $.length
2250	898	12	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	1	DEF	Math.sqrt($.d[col]) < $.tol[col]
2250	898	12	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	1	DEF	Math.sqrt(d[$]) < tol[$]
31338	903	16	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	row	int	0	NIL-FOR	$ < col
31338	903	16	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	0	NIL-FOR	row < $
2251	947	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.nobs <= numberOfRegressors
2251	947	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	ModelSpecificationException	this.nobs <= $
2252	952	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	numberOfRegressors > $.nvars
2252	952	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	ModelSpecificationException	$ > this.nvars
31339	967	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.lindep.length
31339	967	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.lindep.length
2253	968	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2253	968	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.lindep[$]
31340	974	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < numberOfRegressors
31340	974	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	NIL-FOR	i < $
2254	975	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[i] != i
2254	975	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[$] != $
2255	980	8	MillerUpdatingRegression.java	regress	needsReorder	boolean	1	RET	$
31341	989	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
31341	989	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < nvars
31342	990	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ < numberOfRegressors
31342	990	16	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	NIL-FOR	j < $
2256	991	20	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[j] == i
2256	991	20	MillerUpdatingRegression.java	regress	j	int	0	DEF	this.vorder[$] == i
2256	991	20	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[j] == $
31343	1002	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < beta.$.length
31343	1002	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < beta.length
31343	1002	12	MillerUpdatingRegression.java	regress	beta	double[]	0	NIL-FOR	i < $.length
31344	1004	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ <= i
31344	1004	16	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	j <= $
2257	1006	20	MillerUpdatingRegression.java	regress	_i	int	1	DEF	$ > _j
2257	1006	20	MillerUpdatingRegression.java	regress	_j	int	1	DEF	_i > $
2258	1033	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	variablesToInclude.$.length > $.nvars
2258	1033	8	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > this.nvars
2259	1037	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.nobs <= $.nvars
31345	1044	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < variablesToInclude.$.length
31345	1044	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < variablesToInclude.length
31345	1044	8	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	NIL-FOR	i < $.length
2260	1045	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	i >= $.nvars
2260	1045	12	MillerUpdatingRegression.java	regress	i	int	0	ModelSpecificationException	$ >= this.nvars
2261	1049	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	variablesToInclude[$] == variablesToInclude[$ - 1]
2261	1049	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	$ > 0
2261	1049	12	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	DEF	$[i] == $[i - 1]
2262	1055	8	MillerUpdatingRegression.java	regress	iExclude	int	1	DEF	$ > 0
31346	1058	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < variablesToInclude.$.length
31346	1058	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < variablesToInclude.length
31346	1058	12	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	NIL-FOR	i < $.length
2263	1059	16	MillerUpdatingRegression.java	regress	i	int	0	DEF	variablesToInclude[$] > -1
2263	1059	16	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	DEF	$[i] > -1
31347	1081	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.lindep.length
31347	1081	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.lindep.length
2264	1082	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2264	1082	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.lindep[$]
31348	1088	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
31348	1088	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.nvars
2265	1089	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[i] != series[i]
2265	1089	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[$] != series[$]
2265	1089	12	MillerUpdatingRegression.java	regress	series	int[]	0	DEF	this.vorder[i] != $[i]
2266	1094	8	MillerUpdatingRegression.java	regress	needsReorder	boolean	1	RET	$
31349	1101	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < series.$.length
31349	1101	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < series.length
31349	1101	12	MillerUpdatingRegression.java	regress	series	int[]	0	NIL-FOR	i < $.length
31350	1102	16	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	j < $.vorder.length
31350	1102	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ < this.vorder.length
2267	1103	20	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[j] == series[i]
2267	1103	20	MillerUpdatingRegression.java	regress	j	int	0	DEF	this.vorder[$] == series[i]
2267	1103	20	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[j] == series[$]
2267	1103	20	MillerUpdatingRegression.java	regress	series	int[]	0	DEF	this.vorder[j] == $[i]
31351	1114	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < beta.$.length
31351	1114	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < beta.length
31351	1114	12	MillerUpdatingRegression.java	regress	beta	double[]	0	NIL-FOR	i < $.length
31352	1116	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ <= i
31352	1116	16	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	j <= $
2268	1118	20	MillerUpdatingRegression.java	regress	_i	int	1	DEF	$ > _j
2268	1118	20	MillerUpdatingRegression.java	regress	_j	int	1	DEF	_i > $
2038	76	8	Min.java	increment	THIS	Min	0	DEF	d < $.value
2038	76	8	Min.java	increment	THIS	Min	0	DEF	Double.isNaN($.value)
2038	76	8	Min.java	increment	d	double	0	DEF	$ < value
2039	131	8	Min.java	evaluate	THIS	Min	0	DEF	$.test(values, begin, length)
2039	131	8	Min.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2039	131	8	Min.java	evaluate	begin	int	0	DEF	test(values, $, length)
2039	131	8	Min.java	evaluate	length	int	0	DEF	test(values, begin, $)
31220	133	12	Min.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
31220	133	12	Min.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
31220	133	12	Min.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2040	134	16	Min.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
2040	134	16	Min.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
3198	92	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMin) < $
3198	92	8	MullerSolver.java	doSolve	fMin	double	0	RET	FastMath.abs($) < functionValueAccuracy
3199	96	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMax) < $
3199	96	8	MullerSolver.java	doSolve	fMax	double	0	RET	FastMath.abs($) < functionValueAccuracy
3200	100	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fInitial) < $
3200	100	8	MullerSolver.java	doSolve	fInitial	double	0	RET	FastMath.abs($) < functionValueAccuracy
3201	106	8	MullerSolver.java	doSolve	THIS	MullerSolver	1	RET	$.isBracketing(min, initial)
3201	106	8	MullerSolver.java	doSolve	min	double	1	RET	isBracketing($, initial)
3201	106	8	MullerSolver.java	doSolve	initial	double	1	RET	isBracketing(min, $)
3202	160	12	MullerSolver.java	solve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
3202	160	12	MullerSolver.java	solve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3202	160	12	MullerSolver.java	solve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
3202	160	12	MullerSolver.java	solve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
3202	160	12	MullerSolver.java	solve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
3203	173	12	MullerSolver.java	solve	bisect	boolean	1	DEF	$
3204	183	16	MullerSolver.java	solve	ym	double	1	DEF	FastMath.signum(y0) + FastMath.signum($) == 0.0
3204	183	16	MullerSolver.java	solve	y0	double	1	DEF	FastMath.signum($) + FastMath.signum(ym) == 0.0
3192	98	8	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y0) < $
3192	98	8	MullerSolver2.java	doSolve	y0	double	0	RET	FastMath.abs($) < functionValueAccuracy
3193	103	8	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y1) < $
3193	103	8	MullerSolver2.java	doSolve	y1	double	0	RET	FastMath.abs($) < functionValueAccuracy
3194	107	8	MullerSolver2.java	doSolve	y0	double	0	NoBracketingException	$ * y1 > 0
3194	107	8	MullerSolver2.java	doSolve	y1	double	0	NoBracketingException	y0 * $ > 0
3195	124	12	MullerSolver2.java	doSolve	delta	double	1	DEF	$ >= 0.0
3196	133	12	MullerSolver2.java	doSolve	denominator	double	1	DEF	$ != 0
31760	137	16	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x1
31760	137	16	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x2
31760	137	16	MullerSolver2.java	doSolve	x1	double	0	NIL-WHILE	x == $
31760	137	16	MullerSolver2.java	doSolve	x2	double	0	NIL-WHILE	x == $
3197	149	12	MullerSolver2.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
3197	149	12	MullerSolver2.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3197	149	12	MullerSolver2.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
3197	149	12	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
3197	149	12	MullerSolver2.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
1687	164	8	MultiDirectionalSimplex.java	iterate	best	PointValuePair	0	RET	comparator.compare(reflected, $) < 0
1687	164	8	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare($, best) < 0
1687	164	8	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(reflected, best) < 0
1688	169	12	MultiDirectionalSimplex.java	iterate	expanded	PointValuePair	0	DEF	comparator.compare(reflected, $) <= 0
1688	169	12	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	DEF	comparator.compare($, expanded) <= 0
1688	169	12	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	DEF	$.compare(reflected, expanded) <= 0
30994	203	8	MultiDirectionalSimplex.java	evaluateNewSimplex	THIS	MultiDirectionalSimplex	0	NIL-FOR	i < $.getSize()
30994	203	8	MultiDirectionalSimplex.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ < getSize()
30995	206	12	MultiDirectionalSimplex.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < dim
30995	206	12	MultiDirectionalSimplex.java	evaluateNewSimplex	dim	int	0	NIL-FOR	j < $
30032	172	8	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
30032	172	8	MultidimensionalCounter.java	MultidimensionalCounter	i	int	0	NIL-FOR	$ < last
30033	174	12	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	j < $.dimension
30033	174	12	MultidimensionalCounter.java	MultidimensionalCounter	j	int	0	NIL-FOR	$ < dimension
95	182	8	MultidimensionalCounter.java	MultidimensionalCounter	tS	int	0	NotStrictlyPositiveException	$ <= 0
96	216	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.totalSize
96	216	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ < 0
96	216	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ >= totalSize
30034	224	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
30034	224	8	MultidimensionalCounter.java	getCounts	i	int	0	NIL-FOR	$ < last
30035	227	12	MultidimensionalCounter.java	getCounts	count	int	0	NIL-WHILE	$ <= index
30035	227	12	MultidimensionalCounter.java	getCounts	index	int	0	NIL-WHILE	count <= $
97	253	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	DimensionMismatchException	c.$.length != $.dimension
97	253	8	MultidimensionalCounter.java	getCount	c	int	0	DimensionMismatchException	$.length != dimension
30036	257	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
30036	257	8	MultidimensionalCounter.java	getCount	i	int	0	NIL-FOR	$ < dimension
98	259	12	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.size[i]
98	259	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ < 0
98	259	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ >= size[i]
98	259	12	MultidimensionalCounter.java	getCount	i	int	0	OutOfRangeException	index >= size[$]
30037	291	8	MultidimensionalCounter.java	toString	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
30037	291	8	MultidimensionalCounter.java	toString	i	int	0	NIL-FOR	$ < dimension
2703	116	8	MultistepIntegrator.java	MultistepIntegrator	nSteps	int	0	MathIllegalArgumentException	$ <= 1
1926	103	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
1926	103	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
1926	103	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
31187	106	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < lower.$.length
31187	106	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < lower.length
31187	106	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NIL-FOR	i < $.length
1927	108	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
1927	108	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
1927	108	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
31188	115	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
31188	115	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < mappers.length
1928	116	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(lower[$])
1928	116	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	1	DEF	Double.isInfinite($[i])
1929	117	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
1929	117	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
1930	125	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
1930	125	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
31189	145	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
31189	145	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	i	int	0	NIL-FOR	$ < mappers.length
31190	161	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
31190	161	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	i	int	0	NIL-FOR	$ < mappers.length
1920	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
1920	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
1920	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
1921	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != scale.$.length
1921	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != scale.length
1921	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	scale	double[]	0	DimensionMismatchException	lower.length != $.length
31184	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < lower.$.length
31184	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NIL-FOR	$ < lower.length
31184	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NIL-FOR	i < $.length
1922	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
1922	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
1922	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
31185	164	8	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < $.scale.$.length
31185	164	8	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	NIL-FOR	$ < scale.length
1923	165	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] < $.lower[i]
1923	165	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] > $.upper[i]
1923	165	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] < lower[$]
1923	165	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] > upper[$]
1923	165	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] < lower[i]
1923	165	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] > upper[i]
31186	168	16	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	j < $.scale.$.length
31186	168	16	MultivariateFunctionPenaltyAdapter.java	value	j	int	0	NIL-FOR	$ < scale.length
1924	170	20	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] < $.lower[j]
1924	170	20	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] < lower[$]
1924	170	20	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] < lower[j]
1925	172	27	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] > $.upper[j]
1925	172	27	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] > upper[$]
1925	172	27	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] > upper[j]
31191	126	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	i	int	0	NIL-FOR	$ < k
31191	126	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	k	int	0	NIL-FOR	i < $
31192	150	8	MultivariateSummaryStatistics.java	addValue	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
31192	150	8	MultivariateSummaryStatistics.java	addValue	i	int	0	NIL-FOR	$ < k
31193	187	8	MultivariateSummaryStatistics.java	getResults	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < results.$.length
31193	187	8	MultivariateSummaryStatistics.java	getResults	i	int	0	NIL-FOR	$ < results.length
31193	187	8	MultivariateSummaryStatistics.java	getResults	results	double[]	0	NIL-FOR	i < $.length
1931	246	8	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 1
1932	248	15	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 2
31194	252	12	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
31194	252	12	MultivariateSummaryStatistics.java	getStandardDeviation	i	int	0	NIL-FOR	$ < k
31195	336	8	MultivariateSummaryStatistics.java	append	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < data.$.length
31195	336	8	MultivariateSummaryStatistics.java	append	i	int	0	NIL-FOR	$ < data.length
31195	336	8	MultivariateSummaryStatistics.java	append	data	double[]	0	NIL-FOR	i < $.length
1933	337	12	MultivariateSummaryStatistics.java	append	i	int	0	DEF	$ > 0
31196	350	8	MultivariateSummaryStatistics.java	clear	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
31196	350	8	MultivariateSummaryStatistics.java	clear	i	int	0	NIL-FOR	$ < k
1934	370	8	MultivariateSummaryStatistics.java	equals	THIS	MultivariateSummaryStatistics	0	RET	object == $
1934	370	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ == this
1935	373	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ instanceof MultivariateSummaryStatistics == false
1936	612	8	MultivariateSummaryStatistics.java	checkEmpty	THIS	MultivariateSummaryStatistics	0	MathIllegalStateException	$.n > 0
1937	624	8	MultivariateSummaryStatistics.java	checkDimension	THIS	MultivariateSummaryStatistics	0	DimensionMismatchException	dimension != $.k
1937	624	8	MultivariateSummaryStatistics.java	checkDimension	dimension	int	0	DimensionMismatchException	$ != k
31282	194	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < data.$.length
31282	194	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < data.length
31282	194	8	NaturalRanking.java	rank	data	double[]	0	NIL-FOR	i < $.length
31283	227	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
31283	227	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < ranks.length
31283	227	8	NaturalRanking.java	rank	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2164	228	12	NaturalRanking.java	rank	i	int	1	DEF	Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
2164	228	12	NaturalRanking.java	rank	ranks	IntDoublePair[]	1	DEF	Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
2165	231	16	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
2166	242	8	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
2167	245	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	DEF	$.nanStrategy == $.NaNStrategy.FIXED
2168	259	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	RET	$.containsNaNs(ranks)
2168	259	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	RET	containsNaNs($)
31284	264	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
31284	264	8	NaturalRanking.java	removeNaNs	i	int	0	NIL-FOR	$ < ranks.length
31284	264	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2169	265	12	NaturalRanking.java	removeNaNs	i	int	1	DEF	Double.isNaN(ranks[$].getValue())
2169	265	12	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	1	DEF	Double.isNaN($[i].getValue())
31285	267	16	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	k < ranks.$.length
31285	267	16	NaturalRanking.java	removeNaNs	k	int	0	NIL-FOR	$ < ranks.length
31285	267	16	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	k < $.length
31286	289	8	NaturalRanking.java	recodeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
31286	289	8	NaturalRanking.java	recodeNaNs	i	int	0	NIL-FOR	$ < ranks.length
31286	289	8	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2170	290	12	NaturalRanking.java	recodeNaNs	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
2170	290	12	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
31287	304	8	NaturalRanking.java	containsNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
31287	304	8	NaturalRanking.java	containsNaNs	i	int	0	NIL-FOR	$ < ranks.length
31287	304	8	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2171	305	12	NaturalRanking.java	containsNaNs	i	int	0	RET	Double.isNaN(ranks[$].getValue())
2171	305	12	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	RET	Double.isNaN($[i].getValue())
31288	347	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
31289	357	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
31290	375	8	NaturalRanking.java	fill	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
2172	387	8	NaturalRanking.java	restoreNaNs	nanPositions	List<Integer>	0	RET	$.size() == 0
31291	391	8	NaturalRanking.java	restoreNaNs	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
31292	405	8	NaturalRanking.java	getNanPositions	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
31292	405	8	NaturalRanking.java	getNanPositions	i	int	0	NIL-FOR	$ < ranks.length
31292	405	8	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2173	406	12	NaturalRanking.java	getNanPositions	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
2173	406	12	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
31174	201	8	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ < n
31174	201	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i < $
31175	203	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
31175	203	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
31176	208	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
31176	208	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
31177	214	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
31177	214	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
1908	220	8	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare($, reflected) <= 0
1908	220	8	NelderMeadSimplex.java	iterate	secondBest	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
1908	220	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(best, $) <= 0
1908	220	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, secondBest) < 0
1908	220	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(best, reflected) <= 0
1908	220	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, secondBest) < 0
1909	224	15	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
1909	224	15	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, best) < 0
1909	224	15	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, best) < 0
31178	227	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
31178	227	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
1910	233	12	NelderMeadSimplex.java	iterate	expanded	PointValuePair	1	DEF	comparator.compare($, reflected) < 0
1910	233	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(expanded, $) < 0
1910	233	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(expanded, reflected) < 0
1911	241	12	NelderMeadSimplex.java	iterate	worst	PointValuePair	1	RET	comparator.compare(reflected, $) < 0
1911	241	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	RET	comparator.compare($, worst) < 0
1911	241	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	RET	$.compare(reflected, worst) < 0
31179	244	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
31179	244	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
1912	249	16	NelderMeadSimplex.java	iterate	outContracted	PointValuePair	0	RET	comparator.compare($, reflected) <= 0
1912	249	16	NelderMeadSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare(outContracted, $) <= 0
1912	249	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(outContracted, reflected) <= 0
31180	257	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
31180	257	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
1913	263	16	NelderMeadSimplex.java	iterate	inContracted	PointValuePair	0	RET	comparator.compare($, worst) < 0
1913	263	16	NelderMeadSimplex.java	iterate	worst	PointValuePair	0	RET	comparator.compare(inContracted, $) < 0
1913	263	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(inContracted, worst) < 0
31181	272	12	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ <= n
31181	272	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i <= $
31182	274	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
31182	274	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
757	78	8	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	MathIllegalArgumentException	$[0] == null
30110	88	8	NestedLoops.java	NestedLoops	THIS	NestedLoops	0	NIL-FOR	i < loop.$.length
30110	88	8	NestedLoops.java	NestedLoops	i	int	0	NIL-FOR	$ < loop.length
30110	88	8	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	NIL-FOR	i < $.length
758	99	8	NestedLoops.java	NestedLoops	THIS	NestedLoops	1	DEF	Double.isInfinite($.polygon.getSize())
759	126	12	NestedLoops.java	add	THIS	NestedLoops	0	RET	$.child.$.polygon.contains(node.$.polygon)
759	126	12	NestedLoops.java	add	node	NestedLoops	0	RET	child.polygon.contains($.polygon)
30111	133	8	NestedLoops.java	add	iterator	Iterator<NestedLoops>	0	NIL-FOR	$.hasNext()
760	135	12	NestedLoops.java	add	THIS	NestedLoops	0	DEF	node.$.polygon.contains(child.$.polygon)
760	135	12	NestedLoops.java	add	child	NestedLoops	0	DEF	node.polygon.contains($.polygon)
760	135	12	NestedLoops.java	add	node	NestedLoops	0	DEF	$.polygon.contains(child.polygon)
761	144	12	NestedLoops.java	add	THIS	NestedLoops	0	MathIllegalArgumentException	factory.intersection(node.$.polygon, $.child.$.polygon).isEmpty()
761	144	12	NestedLoops.java	add	factory	RegionFactory<Euclidean2D>	0	MathIllegalArgumentException	$.intersection(node.polygon, child.polygon).isEmpty()
761	144	12	NestedLoops.java	add	node	NestedLoops	0	MathIllegalArgumentException	factory.intersection($.polygon, child.polygon).isEmpty()
762	170	8	NestedLoops.java	setClockWise	THIS	NestedLoops	0	DEF	$.originalIsClockwise ^ clockwise
762	170	8	NestedLoops.java	setClockWise	clockwise	boolean	0	DEF	originalIsClockwise ^ $
30112	174	12	NestedLoops.java	setClockWise	min	int	0	NIL-WHILE	++$ < --max
30112	174	12	NestedLoops.java	setClockWise	max	int	0	NIL-WHILE	++min < --$
3164	81	12	NewtonSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(x1 - x0) <= $
3164	81	12	NewtonSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) <= absoluteAccuracy
3164	81	12	NewtonSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) <= absoluteAccuracy
1650	137	8	NonLinearConjugateGradientOptimizer.java	setInitialStep	initialStep	double	1	DEF	$ <= 0
1651	152	8	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
1651	152	8	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
30965	153	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
30965	153	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
30966	163	8	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
30966	163	8	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1652	176	12	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	$ != null
1653	177	16	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	checker.converged(iter, $, current)
1653	177	16	NonLinearConjugateGradientOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	RET	$.converged(iter, previous, current)
1653	177	16	NonLinearConjugateGradientOptimizer.java	doOptimize	current	PointValuePair	0	RET	checker.converged(iter, previous, $)
1653	177	16	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
30967	193	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < $.point.$.length
30967	193	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < point.length
1654	198	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
1654	198	12	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
30968	199	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
30968	199	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
30969	208	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
30969	208	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1655	213	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.updateFormula == $.ConjugateGradientFormula.FLETCHER_REEVES
30970	217	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < r.$.length
30970	217	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < r.length
30970	217	16	NonLinearConjugateGradientOptimizer.java	doOptimize	r	double[]	0	NIL-FOR	i < $.length
1656	225	12	NonLinearConjugateGradientOptimizer.java	doOptimize	beta	double	1	DEF	$ < 0
1656	225	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	1	DEF	iter % $ == 0
1656	225	12	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	1	DEF	$ % n == 0
30971	231	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
30971	231	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
30972	251	8	NonLinearConjugateGradientOptimizer.java	findUpperBound	step	double	0	NIL-FOR	$ < Double.MAX_VALUE
1657	254	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yA	double	0	RET	$ * yB <= 0
1657	254	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yB	double	0	RET	yA * $ <= 0
2532	85	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.scaled != null
2532	85	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.scaled != null
2533	88	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.nordsieck != null
2533	88	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.nordsieck != null
2534	91	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.stateVariation != null
2534	91	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.stateVariation != null
31466	150	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < $.scaled.$.length
31466	150	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < scaled.length
31467	156	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < nData.$.length
31467	156	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < nData.length
31467	156	8	NordsieckStepInterpolator.java	rescale	nData	double[][]	0	NIL-FOR	i < $.length
31468	159	12	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
31468	159	12	NordsieckStepInterpolator.java	rescale	j	int	0	NIL-FOR	$ < nDataI.length
31468	159	12	NordsieckStepInterpolator.java	rescale	nDataI	double[]	0	NIL-FOR	j < $.length
31469	199	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ >= 0
31470	203	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
31470	203	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < nDataI.length
31470	203	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	nDataI	double[]	0	NIL-FOR	j < $.length
31471	210	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < $.currentState.$.length
31471	210	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < currentState.length
2535	232	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.scaled == null
31472	236	12	NordsieckStepInterpolator.java	writeExternal	j	int	0	NIL-FOR	$ < n
31472	236	12	NordsieckStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	j < $
2536	241	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.nordsieck == null
2537	266	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
31473	268	12	NordsieckStepInterpolator.java	readExternal	j	int	0	NIL-FOR	$ < n
31473	268	12	NordsieckStepInterpolator.java	readExternal	n	int	0	NIL-FOR	j < $
2538	276	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
2539	282	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
2539	282	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
963	76	8	NormalDistribution.java	NormalDistribution	sd	double	0	NotStrictlyPositiveException	$ <= 0
964	138	8	NormalDistribution.java	cumulativeProbability	THIS	NormalDistribution	0	RET	FastMath.abs(dev) > 40 * $.standardDeviation
964	138	8	NormalDistribution.java	cumulativeProbability	dev	double	0	RET	FastMath.abs($) > 40 * standardDeviation
965	148	8	NormalDistribution.java	cumulativeProbability	x0	double	0	NumberIsTooLargeException	$ > x1
965	148	8	NormalDistribution.java	cumulativeProbability	x1	double	0	NumberIsTooLargeException	x0 > $
31353	106	8	OLSMultipleLinearRegression.java	calculateHat	i	int	0	NIL-FOR	$ < n
31353	106	8	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	i < $
31354	107	12	OLSMultipleLinearRegression.java	calculateHat	j	int	0	NIL-FOR	$ < n
31354	107	12	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	j < $
2269	108	16	OLSMultipleLinearRegression.java	calculateHat	j	int	1	DEF	i == $
2269	108	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ < p
2269	108	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ == j
2269	108	16	OLSMultipleLinearRegression.java	calculateHat	p	int	1	DEF	i < $
2270	134	8	OLSMultipleLinearRegression.java	calculateTotalSumOfSquares	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
2271	184	8	OLSMultipleLinearRegression.java	calculateAdjustedRSquared	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
2464	78	8	OnePointCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2464	78	8	OnePointCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2465	96	8	OnePointCrossover.java	crossover	length	int	0	DimensionMismatchException	$ != second.getLength()
2465	96	8	OnePointCrossover.java	crossover	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
31422	111	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < crossoverIndex
31422	111	8	OnePointCrossover.java	crossover	crossoverIndex	int	0	NIL-FOR	i < $
31423	116	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < length
31423	116	8	OnePointCrossover.java	crossover	length	int	0	NIL-FOR	i < $
2095	172	8	OneWayAnova.java	anovaTest	alpha	double	0	OutOfRangeException	$ <= 0
2095	172	8	OneWayAnova.java	anovaTest	alpha	double	0	OutOfRangeException	$ > 0.5
2096	195	8	OneWayAnova.java	anovaStats	categoryData	Collection<double[]>	0	NullArgumentException	$ == null
2097	200	8	OneWayAnova.java	anovaStats	categoryData	Collection<double[]>	0	DimensionMismatchException	$.size() < 2
2098	208	12	OneWayAnova.java	anovaStats	THIS	OneWayAnova	0	DimensionMismatchException	$.array.$.length <= 1
31236	227	12	OneWayAnova.java	anovaStats	THIS	OneWayAnova	0	NIL-FOR	i < $.data.$.length
31236	227	12	OneWayAnova.java	anovaStats	i	int	0	NIL-FOR	$ < data.length
212	150	8	OpenIntToDoubleHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
213	155	8	OpenIntToDoubleHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
213	155	8	OpenIntToDoubleHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
214	179	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
214	179	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
214	179	8	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
215	183	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
215	183	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	states[$] == FREE
30070	188	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
30070	188	8	OpenIntToDoubleHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
216	191	12	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
216	191	12	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
216	191	12	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
217	209	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
217	209	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
217	209	8	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
218	213	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
218	213	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
30071	218	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
30071	218	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
219	221	12	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
219	221	12	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
219	221	12	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
220	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
220	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
221	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
221	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
221	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
221	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
221	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
222	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
222	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
223	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
223	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
223	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
223	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
223	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
224	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
224	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
225	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
225	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
226	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
226	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
227	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
227	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
227	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
227	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
227	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
228	353	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
228	353	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
228	353	8	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
229	357	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
229	357	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	states[$] == FREE
30072	362	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
30072	362	8	OpenIntToDoubleHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
230	365	12	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
230	365	12	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
230	365	12	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
231	410	8	OpenIntToDoubleHashMap.java	put	index	int	0	DEF	$ < 0
232	418	8	OpenIntToDoubleHashMap.java	put	newMapping	boolean	0	DEF	$
233	420	12	OpenIntToDoubleHashMap.java	put	THIS	OpenIntToDoubleHashMap	0	DEF	$.shouldGrowTable()
30073	444	8	OpenIntToDoubleHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
30073	444	8	OpenIntToDoubleHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
234	445	12	OpenIntToDoubleHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
234	445	12	OpenIntToDoubleHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
500	163	8	OpenIntToFieldHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
501	168	8	OpenIntToFieldHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
501	168	8	OpenIntToFieldHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
502	192	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
502	192	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
502	192	8	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
503	196	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
503	196	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	states[$] == FREE
30082	201	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
30082	201	8	OpenIntToFieldHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
504	204	12	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
504	204	12	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
504	204	12	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
505	222	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
505	222	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
505	222	8	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
506	226	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
506	226	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
30083	231	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
30083	231	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
507	234	12	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
507	234	12	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
507	234	12	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
508	284	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
508	284	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
509	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
509	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
509	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
509	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
509	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
510	292	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
510	292	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
511	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
511	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
511	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
511	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
511	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
512	304	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
512	304	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
513	306	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
513	306	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
514	317	12	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
514	317	12	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
515	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
515	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
515	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
515	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
515	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
516	366	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
516	366	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
516	366	8	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
517	370	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
517	370	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	states[$] == FREE
30084	375	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
30084	375	8	OpenIntToFieldHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
518	378	12	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
518	378	12	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
518	378	12	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
519	423	8	OpenIntToFieldHashMap.java	put	index	int	0	DEF	$ < 0
520	431	8	OpenIntToFieldHashMap.java	put	newMapping	boolean	0	DEF	$
521	433	12	OpenIntToFieldHashMap.java	put	THIS	OpenIntToFieldHashMap	0	DEF	$.shouldGrowTable()
30085	457	8	OpenIntToFieldHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
30085	457	8	OpenIntToFieldHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
522	458	12	OpenIntToFieldHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
522	458	12	OpenIntToFieldHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
1516	52	8	OpenMapRealMatrix.java	OpenMapRealMatrix	lRow	long	0	NumberIsTooLargeException	$ * lCol >= Integer.MAX_VALUE
1516	52	8	OpenMapRealMatrix.java	OpenMapRealMatrix	lCol	long	0	NumberIsTooLargeException	lRow * $ >= Integer.MAX_VALUE
30873	103	8	OpenMapRealMatrix.java	add	iterator	Iterator	0	NIL-FOR	$.hasNext()
30874	137	8	OpenMapRealMatrix.java	subtract	iterator	Iterator	0	NIL-FOR	$.hasNext()
30875	159	12	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
30876	165	16	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
30876	165	16	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
30877	189	8	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
30878	195	12	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
30878	195	12	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
1517	197	16	OpenMapRealMatrix.java	multiply	THIS	OpenMapRealMatrix	0	DEF	m.$.entries.containsKey(rightKey)
1517	197	16	OpenMapRealMatrix.java	multiply	rightKey	int	0	DEF	m.entries.containsKey($)
1517	197	16	OpenMapRealMatrix.java	multiply	m	OpenMapRealMatrix	0	DEF	$.entries.containsKey(rightKey)
1518	201	20	OpenMapRealMatrix.java	multiply	outValue	double	1	DEF	$ == 0.0
1519	232	8	OpenMapRealMatrix.java	setEntry	value	double	1	DEF	$ == 0.0
1520	246	8	OpenMapRealMatrix.java	addToEntry	value	double	1	DEF	$ == 0.0
1521	260	8	OpenMapRealMatrix.java	multiplyEntry	value	double	1	DEF	$ == 0.0
30802	136	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
30802	136	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
30802	136	8	OpenMapRealVector.java	OpenMapRealVector	values	double[]	0	NIL-FOR	key < $.length
1447	138	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1447	138	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
30803	165	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
30803	165	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
30803	165	8	OpenMapRealVector.java	OpenMapRealVector	values	Double[]	0	NIL-FOR	key < $.length
1448	167	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1448	167	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
30804	193	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < $.virtualSize
30804	193	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < virtualSize
1449	195	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1449	195	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
1450	226	8	OpenMapRealVector.java	add	v	RealVector	1	RET	$ instanceof OpenMapRealVector
30805	248	8	OpenMapRealVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1451	251	12	OpenMapRealVector.java	add	key	int	1	DEF	randomAccess.containsKey($)
1451	251	12	OpenMapRealVector.java	add	randomAccess	OpenIntToDoubleHashMap	1	DEF	$.containsKey(key)
30806	268	8	OpenMapRealVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1452	278	8	OpenMapRealVector.java	append	v	RealVector	1	RET	$ instanceof OpenMapRealVector
30807	282	12	OpenMapRealVector.java	append	i	int	0	NIL-FOR	$ < v.getDimension()
30807	282	12	OpenMapRealVector.java	append	v	RealVector	0	NIL-FOR	i < $.getDimension()
30808	321	8	OpenMapRealVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
1453	331	8	OpenMapRealVector.java	dotProduct	v	RealVector	1	RET	$ instanceof OpenMapRealVector
30809	344	8	OpenMapRealVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
30810	357	8	OpenMapRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
30811	372	8	OpenMapRealVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1454	375	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ >= index
1454	375	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ < end
1454	375	12	OpenMapRealVector.java	getSubVector	end	int	0	DEF	key < $
1454	375	12	OpenMapRealVector.java	getSubVector	index	int	0	DEF	key >= $
30812	399	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
30813	407	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1455	410	12	OpenMapRealVector.java	getDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1455	410	12	OpenMapRealVector.java	getDistance	key	int	0	DEF	entries.containsKey($)
1456	422	8	OpenMapRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
30814	448	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
30815	454	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1457	457	12	OpenMapRealVector.java	getL1Distance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1457	457	12	OpenMapRealVector.java	getL1Distance	key	int	0	DEF	entries.containsKey($)
1458	469	8	OpenMapRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
30816	485	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1459	488	12	OpenMapRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
1459	488	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
30817	493	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1460	496	12	OpenMapRealVector.java	getLInfDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1460	496	12	OpenMapRealVector.java	getLInfDistance	key	int	0	DEF	entries.containsKey($)
1461	497	16	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	iter.value() > $
1461	497	16	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	DEF	$.value() > max
1462	509	8	OpenMapRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
30818	521	8	OpenMapRealVector.java	isInfinite	iter	Iterator	0	NIL-WHILE	$.hasNext()
1463	524	12	OpenMapRealVector.java	isInfinite	value	double	0	RET	Double.isNaN($)
1464	527	12	OpenMapRealVector.java	isInfinite	value	double	0	DEF	Double.isInfinite($)
30819	538	8	OpenMapRealVector.java	isNaN	iter	Iterator	0	NIL-WHILE	$.hasNext()
1465	540	12	OpenMapRealVector.java	isNaN	iter	Iterator	0	RET	Double.isNaN($.value())
30820	556	8	OpenMapRealVector.java	mapAddToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
30820	556	8	OpenMapRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
1466	573	8	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	1	DEF	$.isDefaultValue(value)
1466	573	8	OpenMapRealVector.java	setEntry	value	double	1	DEF	isDefaultValue($)
1467	575	15	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(index)
1467	575	15	OpenMapRealVector.java	setEntry	index	int	0	DEF	entries.containsKey($)
30821	585	8	OpenMapRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.getDimension()
30821	585	8	OpenMapRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < $.getDimension()
30822	593	8	OpenMapRealVector.java	set	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
30822	593	8	OpenMapRealVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
30823	610	8	OpenMapRealVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1468	613	12	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(key)
1468	613	12	OpenMapRealVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1469	626	8	OpenMapRealVector.java	subtract	v	RealVector	1	RET	$ instanceof OpenMapRealVector
1470	645	8	OpenMapRealVector.java	unitize	THIS	OpenMapRealVector	0	MathArithmeticException	$.isDefaultValue(norm)
1470	645	8	OpenMapRealVector.java	unitize	norm	double	0	MathArithmeticException	isDefaultValue($)
30824	649	8	OpenMapRealVector.java	unitize	iter	Iterator	0	NIL-WHILE	$.hasNext()
30825	660	8	OpenMapRealVector.java	toArray	iter	Iterator	0	NIL-WHILE	$.hasNext()
30826	682	8	OpenMapRealVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1471	698	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$ == obj
1471	698	8	OpenMapRealVector.java	equals	obj	Object	0	RET	this == $
1472	701	8	OpenMapRealVector.java	equals	obj	Object	0	RET	$ instanceof OpenMapRealVector
1473	705	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$.virtualSize != other.$.virtualSize
1473	705	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	virtualSize != $.virtualSize
1474	708	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits($.epsilon) != Double.doubleToLongBits(other.$.epsilon)
1474	708	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	Double.doubleToLongBits(epsilon) != Double.doubleToLongBits($.epsilon)
30827	713	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1475	716	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(iter.value())
1475	716	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.value())
30828	721	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1476	724	12	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.getEntry(iter.key()))
1476	724	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(getEntry(iter.key()))
1476	724	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry($.key()))
30089	139	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	NIL-FOR	i < components.$.length
30089	139	8	OrderedTuple.java	OrderedTuple	i	int	0	NIL-FOR	$ < components.length
30089	139	8	OrderedTuple.java	OrderedTuple	components	double	0	NIL-FOR	i < $.length
538	140	12	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isInfinite(components[$])
538	140	12	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isInfinite($[i])
539	141	16	OrderedTuple.java	OrderedTuple	i	int	1	DEF	components[$] < 0
539	141	16	OrderedTuple.java	OrderedTuple	components	double	1	DEF	$[i] < 0
540	146	19	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isNaN(components[$])
540	146	19	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isNaN($[i])
541	151	16	OrderedTuple.java	OrderedTuple	m	long	0	DEF	$ != 0
542	159	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.negInf
542	159	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.posInf
543	166	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	1	DEF	$.lsb <= msb
543	166	8	OrderedTuple.java	OrderedTuple	msb	int	1	DEF	lsb <= $
544	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding != null
544	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding.$.length == 1
544	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding[0] == 0x0L
30090	202	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	eIndex < $.encoding.$.length
30090	202	8	OrderedTuple.java	encode	eIndex	int	0	NIL-FOR	$ < encoding.length
30091	203	12	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	vIndex < $.components.$.length
30091	203	12	OrderedTuple.java	encode	vIndex	int	0	NIL-FOR	$ < components.length
545	204	16	OrderedTuple.java	encode	THIS	OrderedTuple	0	DEF	$.getBit(vIndex, k) != 0
545	204	16	OrderedTuple.java	encode	vIndex	int	0	DEF	getBit($, k) != 0
545	204	16	OrderedTuple.java	encode	k	int	0	DEF	getBit(vIndex, $) != 0
546	207	16	OrderedTuple.java	encode	shift	int	0	DEF	$-- == 0
547	248	8	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.components.$.length == ot.$.components.$.length
547	248	8	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	components.length == $.components.length
548	249	12	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.nan
549	251	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.nan
549	251	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.nan
550	253	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.posInf
550	253	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.negInf
550	253	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.posInf
551	255	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.negInf
551	255	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.posInf
551	255	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.negInf
552	259	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	DEF	$.offset < ot.$.offset
552	259	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	DEF	offset < $.offset
553	261	23	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	DEF	$.offset > ot.$.offset
553	261	23	OrderedTuple.java	compareTo	ot	OrderedTuple	0	DEF	offset > $.offset
30092	266	16	OrderedTuple.java	compareTo	i	int	0	NIL-FOR	$ < limit
30092	266	16	OrderedTuple.java	compareTo	limit	int	0	NIL-FOR	i < $
554	267	20	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding[i] < ot.$.encoding[i]
554	267	20	OrderedTuple.java	compareTo	i	int	1	RET	encoding[$] < ot.encoding[$]
554	267	20	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding[i] < $.encoding[i]
555	269	27	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.encoding[i] > ot.$.encoding[i]
555	269	27	OrderedTuple.java	compareTo	i	int	0	RET	encoding[$] > ot.encoding[$]
555	269	27	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	encoding[i] > $.encoding[i]
556	274	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length < ot.$.encoding.$.length
556	274	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length < $.encoding.length
557	276	23	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length > ot.$.encoding.$.length
557	276	23	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length > $.encoding.length
558	292	8	OrderedTuple.java	equals	THIS	OrderedTuple	1	RET	$ == other
558	292	8	OrderedTuple.java	equals	other	Object	1	RET	this == $
559	294	15	OrderedTuple.java	equals	other	Object	1	RET	$ instanceof OrderedTuple
30093	358	8	OrderedTuple.java	computeMSB	scale	int	0	NIL-WHILE	$ != 0
560	359	12	OrderedTuple.java	computeMSB	ll	long	0	DEF	($ & mask) != $
560	359	12	OrderedTuple.java	computeMSB	mask	long	0	DEF	(ll & $) != ll
30094	384	8	OrderedTuple.java	computeLSB	scale	int	0	NIL-WHILE	$ != 0
561	385	12	OrderedTuple.java	computeLSB	ll	long	0	DEF	($ & mask) == $
561	385	12	OrderedTuple.java	computeLSB	mask	long	0	DEF	(ll & $) == ll
562	406	8	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k > $.offset
562	406	8	OrderedTuple.java	getBit	e	int	1	RET	k < $
562	406	8	OrderedTuple.java	getBit	k	int	1	RET	$ < e
562	406	8	OrderedTuple.java	getBit	k	int	1	RET	$ > offset
563	408	15	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k == $.offset
563	408	15	OrderedTuple.java	getBit	k	int	1	RET	$ == offset
564	410	15	OrderedTuple.java	getBit	e	int	1	RET	k > ($ + 52)
564	410	15	OrderedTuple.java	getBit	k	int	1	RET	$ > (e + 52)
30102	72	8	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	NIL-FOR	i < outline.$.length
30102	72	8	OutlineExtractor.java	getOutline	i	int	0	NIL-FOR	$ < outline.length
30102	72	8	OutlineExtractor.java	getOutline	outline	Vector2D[][]	0	NIL-FOR	i < $.length
30103	76	12	OutlineExtractor.java	getOutline	end	int	0	NIL-WHILE	j < $
30103	76	12	OutlineExtractor.java	getOutline	j	int	0	NIL-WHILE	$ < end
706	77	16	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	1	DEF	$.pointIsBetween(rawLoop, end, j)
706	77	16	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	1	DEF	pointIsBetween($, end, j)
706	77	16	OutlineExtractor.java	getOutline	end	int	1	DEF	pointIsBetween(rawLoop, $, j)
706	77	16	OutlineExtractor.java	getOutline	j	int	1	DEF	pointIsBetween(rawLoop, end, $)
30104	79	20	OutlineExtractor.java	getOutline	k	int	0	NIL-FOR	$ < (end - 1)
30104	79	20	OutlineExtractor.java	getOutline	end	int	0	NIL-FOR	k < ($ - 1)
707	88	12	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	DEF	end != rawLoop.$.length
707	88	12	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	0	DEF	end != $.length
707	88	12	OutlineExtractor.java	getOutline	end	int	0	DEF	$ != rawLoop.length
147	84	8	Pair.java	equals	o	Object	0	RET	$ == null
148	87	8	Pair.java	equals	o	Object	1	RET	$ instanceof Pair
2517	56	12	ParameterJacobianWrapper.java	ParameterJacobianWrapper	name	String	0	DEF	pode.isSupported($)
2517	56	12	ParameterJacobianWrapper.java	ParameterJacobianWrapper	pode	ParameterizedODE	0	DEF	$.isSupported(name)
31459	84	8	ParameterJacobianWrapper.java	computeParameterJacobian	i	int	0	NIL-FOR	$ < n
31459	84	8	ParameterJacobianWrapper.java	computeParameterJacobian	n	int	0	NIL-FOR	i < $
2662	72	8	ParameterizedWrapper.java	getParameter	THIS	ParameterizedWrapper	0	MathIllegalArgumentException	$.isSupported(name)
2662	72	8	ParameterizedWrapper.java	getParameter	name	String	0	MathIllegalArgumentException	isSupported($)
1005	82	8	PascalDistribution.java	PascalDistribution	r	int	0	NotStrictlyPositiveException	$ <= 0
1006	86	8	PascalDistribution.java	PascalDistribution	p	double	0	OutOfRangeException	$ < 0
1006	86	8	PascalDistribution.java	PascalDistribution	p	double	0	OutOfRangeException	$ > 1
1007	115	8	PascalDistribution.java	probability	x	int	1	DEF	$ < 0
1008	129	8	PascalDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
2154	95	8	PearsonsCorrelation.java	PearsonsCorrelation	covarianceMatrix	RealMatrix	0	NullArgumentException	$ == null
31269	140	8	PearsonsCorrelation.java	getCorrelationStandardErrors	i	int	0	NIL-FOR	$ < nVars
31269	140	8	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	i < $
31270	141	12	PearsonsCorrelation.java	getCorrelationStandardErrors	j	int	0	NIL-FOR	$ < nVars
31270	141	12	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	j < $
31271	167	8	PearsonsCorrelation.java	getCorrelationPValues	i	int	0	NIL-FOR	$ < nVars
31271	167	8	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	i < $
31272	168	12	PearsonsCorrelation.java	getCorrelationPValues	j	int	0	NIL-FOR	$ < nVars
31272	168	12	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	j < $
2155	169	16	PearsonsCorrelation.java	getCorrelationPValues	j	int	1	DEF	i == $
2155	169	16	PearsonsCorrelation.java	getCorrelationPValues	i	int	1	DEF	$ == j
31273	192	8	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	$ < nVars
31273	192	8	PearsonsCorrelation.java	computeCorrelationMatrix	nVars	int	0	NIL-FOR	i < $
31274	193	12	PearsonsCorrelation.java	computeCorrelationMatrix	j	int	0	NIL-FOR	$ < i
31274	193	12	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	j < $
2156	229	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	DimensionMismatchException	xArray.$.length != yArray.$.length
2156	229	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	DimensionMismatchException	$.length != yArray.length
2156	229	8	PearsonsCorrelation.java	correlation	yArray	double[]	1	DimensionMismatchException	xArray.length != $.length
2157	231	15	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	MathIllegalArgumentException	xArray.$.length < 2
2157	231	15	PearsonsCorrelation.java	correlation	xArray	double[]	1	MathIllegalArgumentException	$.length < 2
31275	235	12	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	0	NIL-FOR	i<xArray.$.length
31275	235	12	PearsonsCorrelation.java	correlation	i	int	0	NIL-FOR	$<xArray.length
31275	235	12	PearsonsCorrelation.java	correlation	xArray	double[]	0	NIL-FOR	i<$.length
31276	256	8	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	$ < nVars
31276	256	8	PearsonsCorrelation.java	covarianceToCorrelation	nVars	int	0	NIL-FOR	i < $
31277	259	12	PearsonsCorrelation.java	covarianceToCorrelation	j	int	0	NIL-FOR	$ < i
31277	259	12	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	j < $
2158	279	8	PearsonsCorrelation.java	checkSufficientData	nRows	int	0	MathIllegalArgumentException	$ < 2
2158	279	8	PearsonsCorrelation.java	checkSufficientData	nCols	int	0	MathIllegalArgumentException	$ < 2
2044	133	8	Percentile.java	setData	values	double[]	1	DEF	$ == null
2045	145	8	Percentile.java	setData	values	double[]	1	DEF	$ == null
2046	261	8	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ > 100
2046	261	8	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ <= 0
2047	264	8	Percentile.java	evaluate	length	int	0	RET	$ == 0
2048	267	8	Percentile.java	evaluate	length	int	0	RET	$ == 1
2049	277	8	Percentile.java	evaluate	THIS	Percentile	1	DEF	values == $.getDataRef()
2049	277	8	Percentile.java	evaluate	values	double[]	1	DEF	$ == getDataRef()
2050	287	8	Percentile.java	evaluate	pos	double	0	RET	$ < 1
2051	290	8	Percentile.java	evaluate	n	double	0	RET	pos >= $
2051	290	8	Percentile.java	evaluate	pos	double	0	RET	$ >= n
31222	315	8	Percentile.java	select	begin	int	0	NIL-WHILE	end - $ > MIN_SELECT_SIZE
31222	315	8	Percentile.java	select	end	int	0	NIL-WHILE	$ - begin > MIN_SELECT_SIZE
2052	318	12	Percentile.java	select	THIS	Percentile	1	DEF	node < pivotsHeap.$.length
2052	318	12	Percentile.java	select	node	int	1	DEF	pivotsHeap[$] >= 0
2052	318	12	Percentile.java	select	node	int	1	DEF	$ < pivotsHeap.length
2052	318	12	Percentile.java	select	pivotsHeap	int[]	1	DEF	$[node] >= 0
2052	318	12	Percentile.java	select	pivotsHeap	int[]	1	DEF	node < $.length
2053	325	16	Percentile.java	select	THIS	Percentile	0	DEF	node < pivotsHeap.$.length
2053	325	16	Percentile.java	select	node	int	0	DEF	$ < pivotsHeap.length
2053	325	16	Percentile.java	select	pivotsHeap	int[]	0	DEF	node < $.length
2054	330	12	Percentile.java	select	pivot	int	1	RET	k == $
2054	330	12	Percentile.java	select	k	int	1	RET	$ == pivot
2055	333	19	Percentile.java	select	pivot	int	1	DEF	k < $
2055	333	19	Percentile.java	select	k	int	1	DEF	$ < pivot
2056	367	8	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wMiddle
2056	367	8	Percentile.java	medianOf3	wMiddle	double	1	RET	wBegin < $
2057	368	12	Percentile.java	medianOf3	wMiddle	double	1	RET	$ < wEnd
2057	368	12	Percentile.java	medianOf3	wEnd	double	1	RET	wMiddle < $
2058	374	12	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wEnd
2058	374	12	Percentile.java	medianOf3	wEnd	double	1	RET	wBegin < $
31223	403	8	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
31223	403	8	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
31224	404	12	Percentile.java	partition	value	double	0	NIL-WHILE	work[j] >= $
31224	404	12	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
31224	404	12	Percentile.java	partition	j	int	0	NIL-WHILE	work[$] >= value
31224	404	12	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
31224	404	12	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[j] >= value
31225	407	12	Percentile.java	partition	value	double	0	NIL-WHILE	work[i] <= $
31225	407	12	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
31225	407	12	Percentile.java	partition	i	int	0	NIL-WHILE	work[$] <= value
31225	407	12	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
31225	407	12	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[i] <= value
2059	411	12	Percentile.java	partition	i	int	0	DEF	$ < j
2059	411	12	Percentile.java	partition	j	int	0	DEF	i < $
2060	418	8	Percentile.java	partition	value	double	0	DEF	work[i] > $
2060	418	8	Percentile.java	partition	i	int	0	DEF	$ >= end
2060	418	8	Percentile.java	partition	i	int	0	DEF	work[$] > value
2060	418	8	Percentile.java	partition	work	double[]	0	DEF	$[i] > value
2060	418	8	Percentile.java	partition	end	int	0	DEF	i >= $
31226	434	8	Percentile.java	insertionSort	j	int	0	NIL-FOR	$ < end
31226	434	8	Percentile.java	insertionSort	end	int	0	NIL-FOR	j < $
31227	437	12	Percentile.java	insertionSort	saved	double	0	NIL-WHILE	$ < work[i]
31227	437	12	Percentile.java	insertionSort	i	int	0	NIL-WHILE	$ >= begin
31227	437	12	Percentile.java	insertionSort	i	int	0	NIL-WHILE	saved < work[$]
31227	437	12	Percentile.java	insertionSort	work	double[]	0	NIL-WHILE	saved < $[i]
31227	437	12	Percentile.java	insertionSort	begin	int	0	NIL-WHILE	i >= $
2061	464	8	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ > 100
2061	464	8	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ <= 0
2062	493	8	Percentile.java	copy	THIS	Percentile	0	DEF	source.$.cachedPivots != null
2062	493	8	Percentile.java	copy	source	Percentile	0	DEF	$.cachedPivots != null
645	138	8	Plane.java	setNormal	norm	double	0	MathArithmeticException	$ < 1.0e-10
646	308	8	Plane.java	intersection	dot	double	0	RET	FastMath.abs($) < 1.0e-10
647	323	8	Plane.java	intersection	direction	Vector3D	0	RET	$.getNorm() < 1.0e-10
648	360	8	Plane.java	intersection	determinant	double	0	RET	FastMath.abs($) < 1.0e-10
1047	89	8	PoissonDistribution.java	PoissonDistribution	p	double	0	NotStrictlyPositiveException	$ <= 0
1048	137	8	PoissonDistribution.java	probability	x	int	1	DEF	$ < 0
1048	137	8	PoissonDistribution.java	probability	x	int	1	DEF	$ == Integer.MAX_VALUE
1049	139	15	PoissonDistribution.java	probability	x	int	1	DEF	$ == 0
1050	151	8	PoissonDistribution.java	cumulativeProbability	x	int	0	RET	$ < 0
1051	154	8	PoissonDistribution.java	cumulativeProbability	x	int	0	RET	$ == Integer.MAX_VALUE
741	134	8	PolygonsSet.java	computeGeometricalProperties	THIS	PolygonsSet	1	DEF	v.$.length == 0
741	134	8	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$.length == 0
742	135	12	PolygonsSet.java	computeGeometricalProperties	THIS	PolygonsSet	1	DEF	(Boolean) $.getTree(false).getAttribute()
743	142	15	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$[0][0] == null
744	168	12	PolygonsSet.java	computeGeometricalProperties	sum	double	1	DEF	$ < 0
745	205	8	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	$.vertices == null
746	206	12	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.getTree(false).getCut() == null
30107	218	16	PolygonsSet.java	getVertices	sorted	AVLTree<ComparableSegment>	0	NIL-WHILE	$.isEmpty()
747	221	20	PolygonsSet.java	getVertices	loop	List<ComparableSegment>	0	DEF	$ != null
748	231	20	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.size() < 2
749	239	27	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.get(0).getStart() == null
750	245	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ == 0
751	253	28	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j < (array.$.length - 1)
751	253	28	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j < ($.length - 1)
751	253	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ < (array.length - 1)
752	258	28	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j == (array.$.length - 1)
752	258	28	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j == ($.length - 1)
752	258	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ == (array.length - 1)
30108	304	8	PolygonsSet.java	followLoop	globalStart	Vector2D	0	NIL-WHILE	$.distance(end) > 1.0e-10
30108	304	8	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	globalStart.distance($) > 1.0e-10
30108	304	8	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	$ != null
30108	304	8	PolygonsSet.java	followLoop	open	boolean	0	NIL-WHILE	$
30109	312	12	PolygonsSet.java	followLoop	n	Node	0	NIL-FOR	$ != null
30109	312	12	PolygonsSet.java	followLoop	n	Node	0	NIL-FOR	$.getElement().compareTo(upperRight) <= 0
30109	312	12	PolygonsSet.java	followLoop	upperRight	ComparableSegment	0	NIL-FOR	n.getElement().compareTo($) <= 0
753	317	16	PolygonsSet.java	followLoop	distance	double	0	DEF	$ < selectedDistance
753	317	16	PolygonsSet.java	followLoop	selectedDistance	double	0	DEF	distance < $
754	324	12	PolygonsSet.java	followLoop	selectedDistance	double	0	RET	$ > 1.0e-10
755	337	8	PolygonsSet.java	followLoop	loop	ArrayList<ComparableSegment>	0	RET	$.size() == 2
755	337	8	PolygonsSet.java	followLoop	open	boolean	0	RET	$
756	342	8	PolygonsSet.java	followLoop	end	Vector2D	0	MathInternalError	$ == null
756	342	8	PolygonsSet.java	followLoop	open	boolean	0	MathInternalError	$
708	120	8	PolyhedronsSet.java	computeGeometricalProperties	THIS	PolyhedronsSet	1	DEF	$.getSize() < 0
709	218	8	PolyhedronsSet.java	recurseFirstIntersection	cut	SubHyperplane<Euclidean3D>	0	RET	$ == null
710	230	8	PolyhedronsSet.java	recurseFirstIntersection	offset	double	1	DEF	$ < 0
711	238	8	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
712	241	12	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane<Euclidean3D>	0	RET	$ != null
713	248	8	PolyhedronsSet.java	recurseFirstIntersection	crossed	SubHyperplane<Euclidean3D>	0	RET	$ != null
714	252	8	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
715	255	12	PolyhedronsSet.java	recurseFirstIntersection	hit3D	Vector3D	0	RET	$ != null
716	257	16	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane<Euclidean3D>	0	RET	$ != null
717	280	8	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
717	280	8	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint($) == Location.INSIDE
717	280	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	((SubPlane) $.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
717	280	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	$.getPlusOutside() != null
718	284	8	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
718	284	8	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint($) == Location.INSIDE
718	284	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	$.getPlusInside() != null
718	284	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	((SubPlane) $.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
3249	70	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NoDataException	$ == 0
31774	73	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	$ > 1
31774	73	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	c[$ - 1] == 0
31774	73	8	PolynomialFunction.java	PolynomialFunction	c	double	0	NIL-WHILE	$[n - 1] == 0
3250	130	8	PolynomialFunction.java	evaluate	n	int	0	NoDataException	$ == 0
31775	134	8	PolynomialFunction.java	evaluate	j	int	0	NIL-FOR	$ >= 0
31776	153	8	PolynomialFunction.java	add	i	int	0	NIL-FOR	$ < lowLength
31776	153	8	PolynomialFunction.java	add	lowLength	int	0	NIL-FOR	i < $
31777	178	8	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < lowLength
31777	178	8	PolynomialFunction.java	subtract	lowLength	int	0	NIL-FOR	i < $
3251	181	8	PolynomialFunction.java	subtract	THIS	PolynomialFunction	1	DEF	$.coefficients.$.length < p.$.coefficients.$.length
3251	181	8	PolynomialFunction.java	subtract	p	PolynomialFunction	1	DEF	coefficients.length < $.coefficients.length
31778	182	12	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < highLength
31778	182	12	PolynomialFunction.java	subtract	highLength	int	0	NIL-FOR	i < $
31779	200	8	PolynomialFunction.java	negate	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
31779	200	8	PolynomialFunction.java	negate	i	int	0	NIL-FOR	$ < coefficients.length
31780	215	8	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	i < newCoefficients.$.length
31780	215	8	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	$ < newCoefficients.length
31780	215	8	PolynomialFunction.java	multiply	newCoefficients	double[]	0	NIL-FOR	i < $.length
31781	217	12	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	j < FastMath.min($.coefficients.$.length, i + 1)
31781	217	12	PolynomialFunction.java	multiply	j	int	0	NIL-FOR	$ < FastMath.min(coefficients.length, i + 1)
31781	217	12	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	j < FastMath.min(coefficients.length, $ + 1)
3252	239	8	PolynomialFunction.java	differentiate	n	int	0	NoDataException	$ == 0
3253	242	8	PolynomialFunction.java	differentiate	n	int	0	RET	$ == 1
31782	246	8	PolynomialFunction.java	differentiate	i	int	0	NIL-FOR	$ > 0
3254	288	8	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	RET	$.coefficients[0] == 0.0
3255	289	12	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	RET	$.coefficients.$.length == 1
31783	296	8	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
31783	296	8	PolynomialFunction.java	toString	i	int	0	NIL-FOR	$ < coefficients.length
3256	297	12	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] != 0
3256	297	12	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] != 0
3257	298	16	PolynomialFunction.java	toString	s	StringBuilder	1	DEF	$.length() > 0
3258	299	20	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	DEF	$.coefficients[i] < 0
3258	299	20	PolynomialFunction.java	toString	i	int	1	DEF	coefficients[$] < 0
3259	305	20	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] < 0
3259	305	20	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] < 0
3260	311	16	PolynomialFunction.java	toString	absAi	double	0	DEF	($ - 1) != 0
3261	317	16	PolynomialFunction.java	toString	i	int	0	DEF	$ > 1
3262	335	8	PolynomialFunction.java	toString	c	String	1	RET	$.endsWith(".0")
3263	354	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	$ == obj
3263	354	8	PolynomialFunction.java	equals	obj	Object	0	RET	this == $
3264	357	8	PolynomialFunction.java	equals	obj	Object	0	RET	$ instanceof PolynomialFunction
3265	361	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	Arrays.equals($.coefficients, other.$.coefficients)
3265	361	8	PolynomialFunction.java	equals	other	PolynomialFunction	0	RET	Arrays.equals(coefficients, $.coefficients)
3241	78	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.verifyInterpolationArray(x, y, false)
3241	78	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	x	double	0	DEF	verifyInterpolationArray($, y, false)
3241	78	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	y	double	0	DEF	verifyInterpolationArray(x, $, false)
3242	147	8	PolynomialFunctionLagrangeForm.java	getCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.coefficientsComputed
3243	172	8	PolynomialFunctionLagrangeForm.java	evaluate	THIS	PolynomialFunctionLagrangeForm	0	RET	$.verifyInterpolationArray(x, y, false)
3243	172	8	PolynomialFunctionLagrangeForm.java	evaluate	x	double	0	RET	verifyInterpolationArray($, y, false)
3243	172	8	PolynomialFunctionLagrangeForm.java	evaluate	y	double	0	RET	verifyInterpolationArray(x, $, false)
31765	210	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
31765	210	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
3244	216	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	dist	double	0	DEF	$ < min_dist
3244	216	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	min_dist	double	0	DEF	dist < $
31766	225	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
31766	225	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
31767	226	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	j	int	0	NIL-FOR	$ < n-i
31767	226	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	j < n-$
31767	226	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	j < $-i
3245	236	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	1	DEF	nearest < 0.5*(n-$+1)
3245	236	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	nearest	int	1	DEF	$ < 0.5*(n-i+1)
3245	236	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	1	DEF	nearest < 0.5*($-i+1)
31768	256	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
31768	256	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
31769	263	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
31769	263	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
31770	264	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
31771	272	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
31771	272	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
31772	275	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ < n
31772	275	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	j < $
3246	276	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	DEF	i != $
3246	276	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != j
31773	286	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ >= 0
3247	314	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	DimensionMismatchException	x.$.length != y.$.length
3247	314	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	DimensionMismatchException	$.length != y.length
3247	314	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	DimensionMismatchException	x.length != $.length
3248	317	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	NumberIsTooSmallException	x.$.length < 2
3248	317	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	NumberIsTooSmallException	$.length < 2
3268	140	8	PolynomialFunctionNewtonForm.java	getCoefficients	THIS	PolynomialFunctionNewtonForm	0	DEF	$.coefficientsComputed
31792	168	8	PolynomialFunctionNewtonForm.java	evaluate	i	int	0	NIL-FOR	$ >= 0
31793	183	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ <= n
31793	183	8	PolynomialFunctionNewtonForm.java	computeCoefficients	n	int	0	NIL-FOR	i <= $
31794	188	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ >= 0
31795	189	12	PolynomialFunctionNewtonForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
3269	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	a.$.length == 0
3269	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	c.$.length == 0
3269	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	NoDataException	$.length == 0
3269	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	NoDataException	$.length == 0
3270	219	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DimensionMismatchException	a.$.length != c.$.length + 1
3270	219	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	DimensionMismatchException	$.length != c.length + 1
3270	219	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	DimensionMismatchException	a.length != $.length + 1
3235	101	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NullArgumentException	$ == null
3235	101	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	NullArgumentException	$ == null
3236	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	NumberIsTooSmallException	knots.$.length < 2
3236	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NumberIsTooSmallException	$.length < 2
3237	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DimensionMismatchException	knots.$.length - 1 != polynomials.$.length
3237	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DimensionMismatchException	$.length - 1 != polynomials.length
3237	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	DimensionMismatchException	knots.length - 1 != $.length
3238	133	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v > $.knots[$.n]
3238	133	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v < $.knots[0]
3238	133	8	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ > knots[n]
3238	133	8	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ < knots[0]
3239	137	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
3240	143	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
3240	143	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
31764	165	8	PolynomialSplineFunction.java	polynomialSplineDerivative	THIS	PolynomialSplineFunction	0	NIL-FOR	i < $.n
31764	165	8	PolynomialSplineFunction.java	polynomialSplineDerivative	i	int	0	NIL-FOR	$ < n
3266	219	8	PolynomialsUtils.java	createJacobiPolynomial	key	JacobiKey	0	DEF	JACOBI_COEFFICIENTS.containsKey($)
31784	329	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < dp1
31784	329	8	PolynomialsUtils.java	shift	dp1	int	0	NIL-FOR	i < $
31785	330	12	PolynomialsUtils.java	shift	j	int	0	NIL-FOR	$ <= i
31785	330	12	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	j <= $
31786	336	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < dp1
31786	336	8	PolynomialsUtils.java	shift	dp1	int	0	NIL-FOR	i < $
31787	342	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < d
31787	342	8	PolynomialsUtils.java	shift	d	int	0	NIL-FOR	i < $
31788	343	12	PolynomialsUtils.java	shift	j	int	0	NIL-FOR	$ < d
31788	343	12	PolynomialsUtils.java	shift	d	int	0	NIL-FOR	j < $
3267	365	12	PolynomialsUtils.java	buildPolynomial	maxDegree	int	0	DEF	degree > $
3267	365	12	PolynomialsUtils.java	buildPolynomial	degree	int	0	DEF	$ > maxDegree
31789	381	8	PolynomialsUtils.java	buildPolynomial	i	int	0	NIL-FOR	$ <= degree
31789	381	8	PolynomialsUtils.java	buildPolynomial	degree	int	0	NIL-FOR	i <= $
31790	401	8	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	$ < degree
31790	401	8	PolynomialsUtils.java	computeUpToDegree	degree	int	0	NIL-FOR	k < $
31791	417	12	PolynomialsUtils.java	computeUpToDegree	i	int	0	NIL-FOR	$ < k
31791	417	12	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	i < $
1899	84	8	PowellOptimizer.java	PowellOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
1900	87	8	PowellOptimizer.java	PowellOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
31170	123	8	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
31170	123	8	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
31171	143	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
31171	143	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1901	154	16	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	($ - fVal) > delta
1901	154	16	PowellOptimizer.java	doOptimize	delta	double	0	DEF	(fX2 - fVal) > $
1901	154	16	PowellOptimizer.java	doOptimize	fVal	double	0	DEF	(fX2 - $) > delta
1902	167	12	PowellOptimizer.java	doOptimize	stop	boolean	0	DEF	$
1903	168	16	PowellOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	DEF	$ != null
1904	172	12	PowellOptimizer.java	doOptimize	stop	boolean	0	RET	$
1905	173	16	PowellOptimizer.java	doOptimize	THIS	PowellOptimizer	1	RET	goal == $.GoalType.MINIMIZE
1905	173	16	PowellOptimizer.java	doOptimize	goal	GoalType	1	RET	$ == GoalType.MINIMIZE
31172	182	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
31172	182	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1906	190	12	PowellOptimizer.java	doOptimize	fX	double	0	DEF	$ > fX2
1906	190	12	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	fX > $
1907	197	16	PowellOptimizer.java	doOptimize	t	double	0	DEF	$ < 0.0
31173	230	8	PowellOptimizer.java	newPointAndDirection	i	int	0	NIL-FOR	$ < n
31173	230	8	PowellOptimizer.java	newPointAndDirection	n	int	0	NIL-FOR	i < $
195	65	8	Precision.java	compareTo	THIS	Precision	1	RET	$.equals(x, y, eps)
195	65	8	Precision.java	compareTo	x	double	1	RET	equals($, y, eps)
195	65	8	Precision.java	compareTo	y	double	1	RET	equals(x, $, eps)
195	65	8	Precision.java	compareTo	eps	double	1	RET	equals(x, y, $)
196	67	15	Precision.java	compareTo	x	double	0	RET	$ < y
196	67	15	Precision.java	compareTo	y	double	0	RET	x < $
197	91	8	Precision.java	compareTo	THIS	Precision	1	RET	$.equals(x, y, maxUlps)
197	91	8	Precision.java	compareTo	x	double	1	RET	equals($, y, maxUlps)
197	91	8	Precision.java	compareTo	y	double	1	RET	equals(x, $, maxUlps)
197	91	8	Precision.java	compareTo	maxUlps	int	1	RET	equals(x, y, $)
198	93	15	Precision.java	compareTo	x	double	0	RET	$ < y
198	93	15	Precision.java	compareTo	y	double	0	RET	x < $
199	176	8	Precision.java	equals	xInt	int	0	DEF	$ < 0
200	179	8	Precision.java	equals	yInt	int	0	DEF	$ < 0
201	281	8	Precision.java	equals	xInt	long	0	DEF	$ < 0
202	284	8	Precision.java	equals	yInt	long	0	DEF	$ < 0
203	346	12	Precision.java	round	x	double	1	RET	Double.isInfinite($)
204	401	12	Precision.java	roundUnscaled	sign	double	1	DEF	$ == -1
205	411	12	Precision.java	roundUnscaled	sign	double	1	DEF	$ == -1
206	420	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
207	429	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
208	431	19	Precision.java	roundUnscaled	fraction	double	1	DEF	$ < 0.5
209	435	16	Precision.java	roundUnscaled	unscaled	double	1	DEF	FastMath.floor($) / 2.0 == FastMath.floor(Math .floor($) / 2.0)
210	447	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ >= 0.5
211	455	12	Precision.java	roundUnscaled	unscaled	double	0	MathArithmeticException	$ != FastMath.floor($)
1225	144	8	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	DimensionMismatchException	$ != null
1226	145	12	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	NonSquareOperatorException	$.getColumnDimension() != $.getRowDimension()
1227	149	12	PreconditionedIterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	m.getRowDimension() != $.getRowDimension()
1227	149	12	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	DimensionMismatchException	$.getRowDimension() != a.getRowDimension()
1948	122	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, begin, length, true)
1948	122	8	Product.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
1948	122	8	Product.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
1948	122	8	Product.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
31202	124	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
31202	124	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
31202	124	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1949	162	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, weights, begin, length, true)
1949	162	8	Product.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
1949	162	8	Product.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
1949	162	8	Product.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
1949	162	8	Product.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
31203	164	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
31203	164	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
31203	164	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
908	100	8	ProperBigFractionFormat.java	format	whole	BigInteger	0	DEF	BigInteger.ZERO.equals($)
909	103	12	ProperBigFractionFormat.java	format	num	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
910	138	8	ProperBigFractionFormat.java	parse	ret	BigFraction	0	RET	$ != null
911	149	8	ProperBigFractionFormat.java	parse	whole	BigInteger	0	RET	$ == null
912	162	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
913	170	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
914	201	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
915	209	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
916	216	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
917	220	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
918	234	8	ProperBigFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
891	101	8	ProperFractionFormat.java	format	whole	int	0	DEF	$ != 0
892	138	8	ProperFractionFormat.java	parse	ret	Fraction	0	RET	$ != null
893	149	8	ProperFractionFormat.java	parse	whole	Number	0	RET	$ == null
894	162	8	ProperFractionFormat.java	parse	num	Number	0	RET	$ == null
895	170	8	ProperFractionFormat.java	parse	num	Number	0	RET	$.intValue() < 0
896	201	8	ProperFractionFormat.java	parse	den	Number	0	RET	$ == null
897	209	8	ProperFractionFormat.java	parse	den	Number	0	RET	$.intValue() < 0
898	227	8	ProperFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
30424	108	8	QRDecomposition.java	QRDecomposition	minor	int	0	NIL-FOR	$ < FastMath.min(m, n)
30424	108	8	QRDecomposition.java	QRDecomposition	m	int	0	NIL-FOR	minor < FastMath.min($, n)
30424	108	8	QRDecomposition.java	QRDecomposition	n	int	0	NIL-FOR	minor < FastMath.min(m, $)
30425	120	12	QRDecomposition.java	QRDecomposition	row	int	0	NIL-FOR	$ < m
30425	120	12	QRDecomposition.java	QRDecomposition	m	int	0	NIL-FOR	row < $
1246	127	12	QRDecomposition.java	QRDecomposition	a	double	0	DEF	$ != 0.0
30426	151	16	QRDecomposition.java	QRDecomposition	col	int	0	NIL-FOR	$ < n
30426	151	16	QRDecomposition.java	QRDecomposition	n	int	0	NIL-FOR	col < $
30427	154	20	QRDecomposition.java	QRDecomposition	row	int	0	NIL-FOR	$ < m
30427	154	20	QRDecomposition.java	QRDecomposition	m	int	0	NIL-FOR	row < $
30428	160	20	QRDecomposition.java	QRDecomposition	row	int	0	NIL-FOR	$ < m
30428	160	20	QRDecomposition.java	QRDecomposition	m	int	0	NIL-FOR	row < $
1247	175	8	QRDecomposition.java	getR	THIS	QRDecomposition	0	DEF	$.cachedR == null
30429	182	12	QRDecomposition.java	getR	row	int	0	NIL-FOR	$ >= 0
30430	184	16	QRDecomposition.java	getR	col	int	0	NIL-FOR	$ < n
30430	184	16	QRDecomposition.java	getR	n	int	0	NIL-FOR	col < $
1248	201	8	QRDecomposition.java	getQ	THIS	QRDecomposition	0	DEF	$.cachedQ == null
1249	213	8	QRDecomposition.java	getQT	THIS	QRDecomposition	0	DEF	$.cachedQT == null
30431	225	12	QRDecomposition.java	getQT	minor	int	0	NIL-FOR	$ >= FastMath.min(m, n)
30431	225	12	QRDecomposition.java	getQT	n	int	0	NIL-FOR	minor >= FastMath.min(m, $)
30431	225	12	QRDecomposition.java	getQT	m	int	0	NIL-FOR	minor >= FastMath.min($, n)
30432	229	12	QRDecomposition.java	getQT	minor	int	0	NIL-FOR	$ >= 0
1250	232	16	QRDecomposition.java	getQT	qrtMinor	double[]	0	DEF	$[minor] != 0.0
1250	232	16	QRDecomposition.java	getQT	minor	int	0	DEF	qrtMinor[$] != 0.0
30433	233	20	QRDecomposition.java	getQT	col	int	0	NIL-FOR	$ < m
30433	233	20	QRDecomposition.java	getQT	m	int	0	NIL-FOR	col < $
30434	235	24	QRDecomposition.java	getQT	row	int	0	NIL-FOR	$ < m
30434	235	24	QRDecomposition.java	getQT	m	int	0	NIL-FOR	row < $
30435	240	24	QRDecomposition.java	getQT	row	int	0	NIL-FOR	$ < m
30435	240	24	QRDecomposition.java	getQT	m	int	0	NIL-FOR	row < $
1251	261	8	QRDecomposition.java	getH	THIS	QRDecomposition	0	DEF	$.cachedH == null
30436	266	12	QRDecomposition.java	getH	i	int	0	NIL-FOR	$ < m
30436	266	12	QRDecomposition.java	getH	m	int	0	NIL-FOR	i < $
30437	267	16	QRDecomposition.java	getH	j	int	0	NIL-FOR	$ < FastMath.min(i + 1, n)
30437	267	16	QRDecomposition.java	getH	i	int	0	NIL-FOR	j < FastMath.min($ + 1, n)
30437	267	16	QRDecomposition.java	getH	n	int	0	NIL-FOR	j < FastMath.min(i + 1, $)
2371	178	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
2372	185	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
2373	193	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
2374	201	8	RandomDataImpl.java	nextHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
31388	216	8	RandomDataImpl.java	nextHexString	THIS	RandomDataImpl	0	NIL-FOR	i < randomBytes.$.length
31388	216	8	RandomDataImpl.java	nextHexString	i	int	0	NIL-FOR	$ < randomBytes.length
31388	216	8	RandomDataImpl.java	nextHexString	randomBytes	byte[]	0	NIL-FOR	i < $.length
2375	227	12	RandomDataImpl.java	nextHexString	hex	String	0	DEF	$.length() == 1
2376	237	8	RandomDataImpl.java	nextInt	lower	int	0	NumberIsTooLargeException	$ >= upper
2376	237	8	RandomDataImpl.java	nextInt	upper	int	0	NumberIsTooLargeException	lower >= $
2377	248	8	RandomDataImpl.java	nextLong	lower	long	0	NumberIsTooLargeException	$ >= upper
2377	248	8	RandomDataImpl.java	nextLong	upper	long	0	NumberIsTooLargeException	lower >= $
2378	274	8	RandomDataImpl.java	nextSecureHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
31389	293	8	RandomDataImpl.java	nextSecureHexString	iter	int	0	NIL-FOR	$ < numIter + 1
31389	293	8	RandomDataImpl.java	nextSecureHexString	numIter	int	0	NIL-FOR	iter < $ + 1
31390	302	12	RandomDataImpl.java	nextSecureHexString	THIS	RandomDataImpl	0	NIL-FOR	i < hash.$.length
31390	302	12	RandomDataImpl.java	nextSecureHexString	i	int	0	NIL-FOR	$ < hash.length
31390	302	12	RandomDataImpl.java	nextSecureHexString	hash	byte[]	0	NIL-FOR	i < $.length
2379	313	16	RandomDataImpl.java	nextSecureHexString	hex	String	0	DEF	$.length() == 1
2380	324	8	RandomDataImpl.java	nextSecureInt	lower	int	0	NumberIsTooLargeException	$ >= upper
2380	324	8	RandomDataImpl.java	nextSecureInt	upper	int	0	NumberIsTooLargeException	lower >= $
2381	337	8	RandomDataImpl.java	nextSecureLong	lower	long	0	NumberIsTooLargeException	$ >= upper
2381	337	8	RandomDataImpl.java	nextSecureLong	upper	long	0	NumberIsTooLargeException	lower >= $
2382	361	8	RandomDataImpl.java	nextPoisson	mean	double	0	NotStrictlyPositiveException	$ <= 0
2383	366	8	RandomDataImpl.java	nextPoisson	pivot	double	1	RET	mean < $
2383	366	8	RandomDataImpl.java	nextPoisson	mean	double	1	RET	$ < pivot
31391	373	12	RandomDataImpl.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * mean
31391	373	12	RandomDataImpl.java	nextPoisson	mean	double	0	NIL-WHILE	n < 1000 * $
2384	376	16	RandomDataImpl.java	nextPoisson	p	double	1	DEF	r >= $
2384	376	16	RandomDataImpl.java	nextPoisson	r	double	1	DEF	$ >= p
2385	408	16	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ <= p1
2385	408	16	RandomDataImpl.java	nextPoisson	p1	double	1	DEF	u <= $
2386	411	20	RandomDataImpl.java	nextPoisson	lambda	double	0	DEF	x < -$
2386	411	20	RandomDataImpl.java	nextPoisson	delta	double	0	DEF	x > $
2386	411	20	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ < -lambda
2386	411	20	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ > delta
2387	418	20	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ > p1 + p2
2387	418	20	RandomDataImpl.java	nextPoisson	p1	double	1	DEF	u > $ + p2
2387	418	20	RandomDataImpl.java	nextPoisson	p2	double	1	DEF	u > p1 + $
2388	429	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < -t
2388	429	16	RandomDataImpl.java	nextPoisson	a	int	0	DEF	$ == 0
2388	429	16	RandomDataImpl.java	nextPoisson	t	double	0	DEF	v < -$
2389	435	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < qa
2389	435	16	RandomDataImpl.java	nextPoisson	qa	double	0	DEF	v < $
2390	439	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ > qr
2390	439	16	RandomDataImpl.java	nextPoisson	qr	double	0	DEF	v > $
2391	442	16	RandomDataImpl.java	nextPoisson	lambda	double	0	DEF	v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + $)) + logLambdaFactorial
2391	442	16	RandomDataImpl.java	nextPoisson	logLambda	double	0	DEF	v < y * $ - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
2391	442	16	RandomDataImpl.java	nextPoisson	logLambdaFactorial	double	0	DEF	v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + $
2391	442	16	RandomDataImpl.java	nextPoisson	y	double	0	DEF	v < $ * logLambda - ArithmeticUtils.factorialLog((int) ($ + lambda)) + logLambdaFactorial
2391	442	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
2392	454	8	RandomDataImpl.java	nextGaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
2393	473	8	RandomDataImpl.java	nextExponential	mean	double	0	NotStrictlyPositiveException	$ <= 0.0
31392	482	8	RandomDataImpl.java	nextExponential	u	double	0	NIL-WHILE	$ < 0.5
2394	491	8	RandomDataImpl.java	nextExponential	u	double	0	RET	$ <= EXPONENTIAL_SA_QI[0]
31393	501	8	RandomDataImpl.java	nextExponential	u	double	0	NIL-DOWHILE	$ > EXPONENTIAL_SA_QI[i]
31393	501	8	RandomDataImpl.java	nextExponential	i	int	0	NIL-DOWHILE	u > EXPONENTIAL_SA_QI[$]
2395	505	12	RandomDataImpl.java	nextExponential	u2	double	0	DEF	$ < umin
2395	505	12	RandomDataImpl.java	nextExponential	umin	double	0	DEF	u2 < $
2396	551	8	RandomDataImpl.java	nextUniform	lower	double	0	NumberIsTooLargeException	$ >= upper
2396	551	8	RandomDataImpl.java	nextUniform	upper	double	0	NumberIsTooLargeException	lower >= $
2397	556	8	RandomDataImpl.java	nextUniform	lower	double	0	MathIllegalArgumentException	Double.isInfinite($)
2397	556	8	RandomDataImpl.java	nextUniform	upper	double	0	MathIllegalArgumentException	Double.isInfinite($)
2398	560	8	RandomDataImpl.java	nextUniform	lower	double	0	MathIllegalArgumentException	Double.isNaN($)
2398	560	8	RandomDataImpl.java	nextUniform	upper	double	0	MathIllegalArgumentException	Double.isNaN($)
31394	568	8	RandomDataImpl.java	nextUniform	u	double	0	NIL-WHILE	$ <= 0.0
31394	568	8	RandomDataImpl.java	nextUniform	lowerInclusive	boolean	0	NIL-WHILE	$
2399	666	8	RandomDataImpl.java	nextGamma	shape	double	0	RET	$ < 1
2400	675	16	RandomDataImpl.java	nextGamma	p	double	1	RET	$ <= 1
2401	681	20	RandomDataImpl.java	nextGamma	x	double	1	DEF	u2 > FastMath.exp(-$)
2401	681	20	RandomDataImpl.java	nextGamma	u2	double	1	DEF	$ > FastMath.exp(-x)
2402	693	20	RandomDataImpl.java	nextGamma	x	double	1	DEF	u2 > FastMath.pow($, shape - 1)
2402	693	20	RandomDataImpl.java	nextGamma	u2	double	1	DEF	$ > FastMath.pow(x, shape - 1)
2402	693	20	RandomDataImpl.java	nextGamma	shape	double	1	DEF	u2 > FastMath.pow(x, $ - 1)
2403	713	12	RandomDataImpl.java	nextGamma	v	double	0	DEF	$ <= 0
2404	721	12	RandomDataImpl.java	nextGamma	xx	double	0	RET	u < 1 - 0.0331*$*$
2404	721	12	RandomDataImpl.java	nextGamma	u	double	0	RET	$ < 1 - 0.0331*xx*xx
2405	725	12	RandomDataImpl.java	nextGamma	v	double	0	RET	FastMath.log(u) < 0.5*xx + d*(1 - $ + FastMath.log($))
2405	725	12	RandomDataImpl.java	nextGamma	xx	double	0	RET	FastMath.log(u) < 0.5*$ + d*(1 - v + FastMath.log(v))
2405	725	12	RandomDataImpl.java	nextGamma	u	double	0	RET	FastMath.log($) < 0.5*xx + d*(1 - v + FastMath.log(v))
2405	725	12	RandomDataImpl.java	nextGamma	d	double	0	RET	FastMath.log(u) < 0.5*xx + $*(1 - v + FastMath.log(v))
2406	812	8	RandomDataImpl.java	getRan	THIS	RandomDataImpl	0	DEF	$.rand == null
2407	836	8	RandomDataImpl.java	getSecRan	THIS	RandomDataImpl	0	DEF	$.secRand == null
2408	853	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
2409	867	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
2410	883	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
2411	894	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
2412	935	8	RandomDataImpl.java	nextPermutation	n	int	0	NumberIsTooLargeException	k > $
2412	935	8	RandomDataImpl.java	nextPermutation	k	int	0	NumberIsTooLargeException	$ > n
2413	939	8	RandomDataImpl.java	nextPermutation	k	int	0	NotStrictlyPositiveException	$ <= 0
31395	947	8	RandomDataImpl.java	nextPermutation	i	int	0	NIL-FOR	$ < k
31395	947	8	RandomDataImpl.java	nextPermutation	k	int	0	NIL-FOR	i < $
2414	970	8	RandomDataImpl.java	nextSample	len	int	0	NumberIsTooLargeException	k > $
2414	970	8	RandomDataImpl.java	nextSample	k	int	0	NumberIsTooLargeException	$ > len
2415	974	8	RandomDataImpl.java	nextSample	k	int	0	NotStrictlyPositiveException	$ <= 0
31396	981	8	RandomDataImpl.java	nextSample	i	int	0	NIL-FOR	$ < k
31396	981	8	RandomDataImpl.java	nextSample	k	int	0	NIL-FOR	i < $
31397	1025	8	RandomDataImpl.java	shuffle	i	int	0	NIL-FOR	$ >= end
31397	1025	8	RandomDataImpl.java	shuffle	end	int	0	NIL-FOR	i >= $
2416	1026	12	RandomDataImpl.java	shuffle	i	int	1	DEF	$ == 0
31398	1046	8	RandomDataImpl.java	getNatural	i	int	0	NIL-FOR	$ < n
31398	1046	8	RandomDataImpl.java	getNatural	n	int	0	NIL-FOR	i < $
2453	130	8	RandomKey.java	decodeGeneric	l	int	0	DimensionMismatchException	representation.size() != $
2453	130	8	RandomKey.java	decodeGeneric	representation	List<Double>	0	DimensionMismatchException	$.size() != l
2454	133	8	RandomKey.java	decodeGeneric	l	int	0	DimensionMismatchException	sortedRepr.size() != $
2454	133	8	RandomKey.java	decodeGeneric	sortedRepr	List<Double>	0	DimensionMismatchException	$.size() != l
31416	142	8	RandomKey.java	decodeGeneric	i	int	0	NIL-FOR	$<l
31416	142	8	RandomKey.java	decodeGeneric	l	int	0	NIL-FOR	i<$
2455	160	8	RandomKey.java	isSame	another	Chromosome	0	RET	$ instanceof RandomKey<?>
2456	165	8	RandomKey.java	isSame	THIS	RandomKey	0	RET	$.getLength() != anotherRk.getLength()
2456	165	8	RandomKey.java	isSame	anotherRk	RandomKey<?>	0	RET	getLength() != $.getLength()
31417	174	8	RandomKey.java	isSame	THIS	RandomKey	0	NIL-FOR	i<$.getLength()
31417	174	8	RandomKey.java	isSame	i	int	0	NIL-FOR	$<getLength()
2457	175	12	RandomKey.java	isSame	i	int	0	RET	thisPerm.get($) != anotherPerm.get($)
2457	175	12	RandomKey.java	isSame	thisPerm	List<Integer>	0	RET	$.get(i) != anotherPerm.get(i)
2457	175	12	RandomKey.java	isSame	anotherPerm	List<Integer>	0	RET	thisPerm.get(i) != $.get(i)
2458	191	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val > 1
2458	191	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val < 0
31418	208	8	RandomKey.java	randomPermutation	i	int	0	NIL-FOR	$<l
31418	208	8	RandomKey.java	randomPermutation	l	int	0	NIL-FOR	i<$
31419	223	8	RandomKey.java	identityPermutation	i	int	0	NIL-FOR	$<l
31419	223	8	RandomKey.java	identityPermutation	l	int	0	NIL-FOR	i<$
2459	270	8	RandomKey.java	inducedPermutation	originalData	List<S>	0	DimensionMismatchException	$.size() != permutedData.size()
2459	270	8	RandomKey.java	inducedPermutation	permutedData	List<S>	0	DimensionMismatchException	originalData.size() != $.size()
31420	278	8	RandomKey.java	inducedPermutation	i	int	0	NIL-FOR	$<l
31420	278	8	RandomKey.java	inducedPermutation	l	int	0	NIL-FOR	i<$
2460	280	12	RandomKey.java	inducedPermutation	index	int	0	MathIllegalArgumentException	$ == -1
31421	305	8	RandomKey.java	baseSequence	i	int	0	NIL-FOR	$<l
31421	305	8	RandomKey.java	baseSequence	l	int	0	NIL-FOR	i<$
2434	41	8	RandomKeyMutation.java	mutate	original	Chromosome	0	MathIllegalArgumentException	$ instanceof RandomKey<?>
1484	174	8	RealVector.java	checkVectorDimensions	d	int	0	DimensionMismatchException	$ != n
1484	174	8	RealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	d != $
1485	186	8	RealVector.java	checkIndex	THIS	RealVector	0	OutOfRangeException	index >= $.getDimension()
1485	186	8	RealVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1485	186	8	RealVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
30829	206	8	RealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
30829	206	8	RealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
30829	206	8	RealVector.java	add	e	Entry	0	NIL-WHILE	($ = it.next()) != null
30830	226	8	RealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
30830	226	8	RealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
30830	226	8	RealVector.java	subtract	e	Entry	0	NIL-WHILE	($ = it.next()) != null
1486	252	8	RealVector.java	mapAddToSelf	d	double	0	RET	$ != 0
30831	278	8	RealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
30831	278	8	RealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
30831	278	8	RealVector.java	dotProduct	e	Entry	0	NIL-WHILE	($ = it.next()) != null
1487	295	8	RealVector.java	cosine	norm	double	0	MathArithmeticException	$ == 0
1487	295	8	RealVector.java	cosine	vNorm	double	0	MathArithmeticException	$ == 0
30832	341	8	RealVector.java	getDistance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
30832	341	8	RealVector.java	getDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
30832	341	8	RealVector.java	getDistance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
30833	362	8	RealVector.java	getNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
30833	362	8	RealVector.java	getNorm	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
30833	362	8	RealVector.java	getNorm	e	Entry	0	NIL-WHILE	($ = it.next()) != null
30834	383	8	RealVector.java	getL1Norm	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
30834	383	8	RealVector.java	getL1Norm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
30834	383	8	RealVector.java	getL1Norm	e	Entry	0	NIL-WHILE	($ = it.next()) != null
30835	403	8	RealVector.java	getLInfNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
30835	403	8	RealVector.java	getLInfNorm	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
30835	403	8	RealVector.java	getLInfNorm	e	Entry	0	NIL-WHILE	($ = it.next()) != null
30836	425	8	RealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
30836	425	8	RealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
30836	425	8	RealVector.java	getL1Distance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
30837	450	8	RealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
30837	450	8	RealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
30837	450	8	RealVector.java	getLInfDistance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
30838	466	8	RealVector.java	getMinIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1488	468	12	RealVector.java	getMinIndex	entry	Entry	0	DEF	$.getValue() <= minValue
1488	468	12	RealVector.java	getMinIndex	minValue	double	0	DEF	entry.getValue() <= $
30839	497	8	RealVector.java	getMaxIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1489	499	12	RealVector.java	getMaxIndex	entry	Entry	0	DEF	$.getValue() >= maxValue
1489	499	12	RealVector.java	getMaxIndex	maxValue	double	0	DEF	entry.getValue() >= $
1490	593	8	RealVector.java	outerProduct	v	RealVector	1	DEF	$ instanceof SparseRealVector
30840	602	8	RealVector.java	outerProduct	thisIt	Iterator<Entry>	0	NIL-WHILE	(thisE = $.next()) != null
30840	602	8	RealVector.java	outerProduct	thisIt	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
30840	602	8	RealVector.java	outerProduct	thisE	Entry	0	NIL-WHILE	($ = thisIt.next()) != null
30841	605	12	RealVector.java	outerProduct	otherIt	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
30841	605	12	RealVector.java	outerProduct	otherIt	Iterator<Entry>	0	NIL-WHILE	(otherE = $.next()) != null
30841	605	12	RealVector.java	outerProduct	otherE	Entry	0	NIL-WHILE	($ = otherIt.next()) != null
30842	633	8	RealVector.java	set	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
30842	633	8	RealVector.java	set	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
30842	633	8	RealVector.java	set	e	Entry	0	NIL-WHILE	($ = it.next()) != null
30843	648	8	RealVector.java	toArray	i	int	0	NIL-FOR	$ < dim
30843	648	8	RealVector.java	toArray	dim	int	0	NIL-FOR	i < $
30844	757	8	RealVector.java	mapToSelf	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
30844	757	8	RealVector.java	mapToSelf	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
30844	757	8	RealVector.java	mapToSelf	e	Entry	0	NIL-WHILE	($ = it.next()) != null
30845	794	8	RealVector.java	combineToSelf	THIS	RealVector	0	NIL-FOR	i < $.getDimension()
30845	794	8	RealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < getDimension()
30586	202	8	RealVectorFormat.java	format	i	int	0	NIL-FOR	$ < vector.getDimension()
30586	202	8	RealVectorFormat.java	format	vector	RealVector	0	NIL-FOR	i < $.getDimension()
1358	203	12	RealVectorFormat.java	format	i	int	0	DEF	$ > 0
1359	226	8	RealVectorFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1360	246	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedPrefix, pos)
1360	246	8	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
1360	246	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
30587	252	8	RealVectorFormat.java	parse	loop	boolean	0	NIL-FOR	$
1361	254	12	RealVectorFormat.java	parse	components	List<Number>	0	DEF	$.isEmpty()
1362	256	16	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	DEF	CompositeFormat.parseFixedstring(source, $.trimmedSeparator, pos)
1362	256	16	RealVectorFormat.java	parse	source	String	0	DEF	CompositeFormat.parseFixedstring($, trimmedSeparator, pos)
1362	256	16	RealVectorFormat.java	parse	pos	ParsePosition	0	DEF	CompositeFormat.parseFixedstring(source, trimmedSeparator, $)
1363	261	12	RealVectorFormat.java	parse	loop	boolean	0	RET	$
1364	264	16	RealVectorFormat.java	parse	component	Number	1	DEF	$ != null
1365	278	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSuffix, pos)
1365	278	8	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
1365	278	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
30588	284	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	NIL-FOR	i < data.$.length
30588	284	8	RealVectorFormat.java	parse	i	int	0	NIL-FOR	$ < data.length
30588	284	8	RealVectorFormat.java	parse	data	double[]	0	NIL-FOR	i < $.length
30717	71	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
30717	71	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
30718	76	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	loop	boolean	0	NIL-FOR	$
30719	80	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
30719	80	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
1393	83	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	ii	int	0	DEF	c[$][$] > c[isi][isi]
1393	83	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	isi	int	0	DEF	c[ii][ii] > c[$][$]
1393	83	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	0	DEF	$[ii][ii] > $[isi][isi]
1394	90	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	swap	int[]	0	DEF	$[r] != r
1394	90	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	DEF	swap[$] != $
1395	98	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	ir	int	1	NonPositiveDefiniteMatrixException	c[$][$] < small
1395	98	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	1	NonPositiveDefiniteMatrixException	$[ir][ir] < small
1395	98	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	small	double	1	NonPositiveDefiniteMatrixException	c[ir][ir] < $
1396	100	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	NonPositiveDefiniteMatrixException	$ == 0
30720	105	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
30720	105	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
1397	106	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NonPositiveDefiniteMatrixException	c[index[$]][index[$]] < -small
1397	106	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	0	NonPositiveDefiniteMatrixException	$[index[i]][index[i]] < -small
1397	106	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	index	int[]	0	NonPositiveDefiniteMatrixException	c[$[i]][$[i]] < -small
1397	106	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	small	double	0	NonPositiveDefiniteMatrixException	c[index[i]][index[i]] < -$
30721	124	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
30721	124	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
30722	129	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	j	int	0	NIL-FOR	$ < i
30722	129	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	j < $
30723	145	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
30723	145	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
30724	146	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	j	int	0	NIL-FOR	$ < r
30724	146	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	NIL-FOR	j < $
629	44	8	RegionFactory.java	buildConvex	THIS	RegionFactory	0	RET	hyperplanes.$.length == 0
629	44	8	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$.length == 0
629	44	8	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$ == null
630	55	12	RegionFactory.java	buildConvex	THIS	RegionFactory	0	DEF	node.insertCut($.hyperplane)
630	55	12	RegionFactory.java	buildConvex	node	BSPTree<S>	0	DEF	$.insertCut(hyperplane)
631	137	8	RegionFactory.java	recurseComplement	node	BSPTree<S>	0	RET	$.getCut() == null
632	143	8	RegionFactory.java	recurseComplement	attribute	BoundaryAttribute<S>	0	DEF	$ != null
2288	100	8	RegressionResults.java	RegressionResults	copyData	boolean	1	DEF	$
31359	103	12	RegressionResults.java	RegressionResults	THIS	RegressionResults	0	NIL-FOR	i < varcov.$.length
31359	103	12	RegressionResults.java	RegressionResults	i	int	0	NIL-FOR	$ < varcov.length
31359	103	12	RegressionResults.java	RegressionResults	varcov	double[][]	0	NIL-FOR	i < $.length
2289	117	8	RegressionResults.java	RegressionResults	rank	int	0	DEF	$ > 0
2290	129	8	RegressionResults.java	RegressionResults	containsConstant	boolean	1	DEF	$
2291	151	8	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	RET	$.parameters == null
2292	154	8	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	OutOfRangeException	index >= $.parameters.length
2292	154	8	RegressionResults.java	getParameterEstimate	index	int	0	OutOfRangeException	$ >= this.parameters.length
2292	154	8	RegressionResults.java	getParameterEstimate	index	int	0	OutOfRangeException	$ < 0
2293	171	8	RegressionResults.java	getParameterEstimates	THIS	RegressionResults	0	RET	$.parameters == null
2294	188	8	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	RET	$.parameters == null
2295	191	8	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	OutOfRangeException	index >= $.parameters.length
2295	191	8	RegressionResults.java	getStdErrorOfEstimate	index	int	0	OutOfRangeException	$ >= this.parameters.length
2295	191	8	RegressionResults.java	getStdErrorOfEstimate	index	int	0	OutOfRangeException	$ < 0
2296	195	8	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	Double.isNaN($)
2296	195	8	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	$ > Double.MIN_VALUE
2297	213	8	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	RET	$.parameters == null
31360	217	8	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	NIL-FOR	i < $.parameters.length
31360	217	8	RegressionResults.java	getStdErrorOfEstimates	i	int	0	NIL-FOR	$ < this.parameters.length
2298	219	12	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	$ > Double.MIN_VALUE
2298	219	12	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	Double.isNaN($)
2299	241	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
2300	244	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	OutOfRangeException	i >= $.parameters.length
2300	244	8	RegressionResults.java	getCovarianceOfParameters	i	int	0	OutOfRangeException	$ < 0
2300	244	8	RegressionResults.java	getCovarianceOfParameters	i	int	0	OutOfRangeException	$ >= this.parameters.length
2301	247	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	OutOfRangeException	j >= $.parameters.length
2301	247	8	RegressionResults.java	getCovarianceOfParameters	j	int	0	OutOfRangeException	$ < 0
2301	247	8	RegressionResults.java	getCovarianceOfParameters	j	int	0	OutOfRangeException	$ >= this.parameters.length
2302	262	8	RegressionResults.java	getNumberOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
2303	401	8	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.isSymmetricVCD
2304	402	12	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.varCovData.length > 1
2305	404	16	RegressionResults.java	getVcvElement	i	int	1	RET	$ == j
2305	404	16	RegressionResults.java	getVcvElement	j	int	1	RET	i == $
2306	406	23	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	i >= $.varCovData[j].length
2306	406	23	RegressionResults.java	getVcvElement	i	int	1	RET	$ >= varCovData[j].length
2306	406	23	RegressionResults.java	getVcvElement	j	int	1	RET	i >= varCovData[$].length
2307	412	16	RegressionResults.java	getVcvElement	i	int	1	RET	$ > j
2307	412	16	RegressionResults.java	getVcvElement	j	int	1	RET	i > $
166	183	8	ResizableDoubleArray.java	ResizableDoubleArray	initialArray	double[]	1	DEF	$ == null
167	302	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + $.numElements) > $.internalArray.$.length
168	306	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
169	345	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	($.startIndex + ($.numElements + 1)) > $.internalArray.$.length
170	355	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
171	372	8	ResizableDoubleArray.java	substituteMostRecentElement	THIS	ResizableDoubleArray	0	MathIllegalStateException	$.numElements < 1
172	397	8	ResizableDoubleArray.java	checkContractExpand	contraction	float	0	MathIllegalArgumentException	$ < expansion
172	397	8	ResizableDoubleArray.java	checkContractExpand	expansion	float	0	MathIllegalArgumentException	contraction < $
173	403	8	ResizableDoubleArray.java	checkContractExpand	contraction	float	0	MathIllegalArgumentException	$ <= 1.0
174	409	8	ResizableDoubleArray.java	checkContractExpand	expansion	float	0	MathIllegalArgumentException	$ <= 1.0
175	496	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	1	MathIllegalArgumentException	i > $.numElements
175	496	8	ResizableDoubleArray.java	discardExtremeElements	i	int	1	MathIllegalArgumentException	$ > numElements
176	500	14	ResizableDoubleArray.java	discardExtremeElements	i	int	1	MathIllegalArgumentException	$ < 0
177	507	12	ResizableDoubleArray.java	discardExtremeElements	front	boolean	0	DEF	$
178	511	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
179	533	8	ResizableDoubleArray.java	expand	THIS	ResizableDoubleArray	1	DEF	$.expansionMode == MULTIPLICATIVE_MODE
180	582	8	ResizableDoubleArray.java	getElement	THIS	ResizableDoubleArray	1	ArrayIndexOutOfBoundsException	index >= $.numElements
180	582	8	ResizableDoubleArray.java	getElement	index	int	1	ArrayIndexOutOfBoundsException	$ >= numElements
181	584	15	ResizableDoubleArray.java	getElement	index	int	1	RET	$ >= 0
182	696	8	ResizableDoubleArray.java	setElement	index	int	0	ArrayIndexOutOfBoundsException	$ < 0
183	699	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	index + 1 > $.numElements
183	699	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ + 1 > numElements
184	702	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + index) >= $.internalArray.$.length
184	702	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	(startIndex + $) >= internalArray.length
185	735	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	MathIllegalArgumentException	$ != ADDITIVE_MODE
185	735	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	MathIllegalArgumentException	$ != MULTIPLICATIVE_MODE
186	755	8	ResizableDoubleArray.java	setInitialCapacity	initialCapacity	int	1	DEF	$ > 0
187	777	8	ResizableDoubleArray.java	setNumElements	i	int	0	MathIllegalArgumentException	$ < 0
188	785	8	ResizableDoubleArray.java	setNumElements	THIS	ResizableDoubleArray	0	DEF	($.startIndex + i) > $.internalArray.$.length
188	785	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	(startIndex + $) > internalArray.length
189	800	8	ResizableDoubleArray.java	shouldContract	THIS	ResizableDoubleArray	1	RET	$.expansionMode == MULTIPLICATIVE_MODE
190	881	8	ResizableDoubleArray.java	equals	THIS	ResizableDoubleArray	0	RET	object == $
190	881	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ == this
191	884	7	ResizableDoubleArray.java	equals	object	Object	0	RET	$ instanceof ResizableDoubleArray == false
192	897	15	ResizableDoubleArray.java	equals	result	boolean	1	RET	$
3184	78	8	RiddersSolver.java	doSolve	y1	double	0	RET	$ == 0
3185	81	8	RiddersSolver.java	doSolve	y2	double	0	RET	$ == 0
3186	95	12	RiddersSolver.java	doSolve	y3	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3186	95	12	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y3) <= $
3187	106	12	RiddersSolver.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
3187	106	12	RiddersSolver.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
3187	106	12	RiddersSolver.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
3188	109	12	RiddersSolver.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3188	109	12	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
3189	115	12	RiddersSolver.java	doSolve	correction	double	1	DEF	$ > 0.0
3190	116	16	RiddersSolver.java	doSolve	y	double	1	DEF	FastMath.signum(y1) + FastMath.signum($) == 0.0
3190	116	16	RiddersSolver.java	doSolve	y1	double	1	DEF	FastMath.signum($) + FastMath.signum(y) == 0.0
3191	126	16	RiddersSolver.java	doSolve	y	double	1	DEF	FastMath.signum(y2) + FastMath.signum($) == 0.0
3191	126	16	RiddersSolver.java	doSolve	y2	double	1	DEF	FastMath.signum($) + FastMath.signum(y) == 0.0
3284	64	8	RombergIntegrator.java	RombergIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > ROMBERG_MAX_ITERATIONS_COUNT
3285	86	8	RombergIntegrator.java	RombergIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > ROMBERG_MAX_ITERATIONS_COUNT
31799	124	12	RombergIntegrator.java	doIntegrate	j	int	0	NIL-FOR	$ <= i
31799	124	12	RombergIntegrator.java	doIntegrate	i	int	0	NIL-FOR	j <= $
3286	131	12	RombergIntegrator.java	doIntegrate	THIS	RombergIntegrator	0	RET	i >= $.getMinimalIterationCount()
3286	131	12	RombergIntegrator.java	doIntegrate	i	int	0	RET	$ >= getMinimalIterationCount()
3287	134	16	RombergIntegrator.java	doIntegrate	THIS	RombergIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
3287	134	16	RombergIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
3287	134	16	RombergIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
3287	134	16	RombergIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
770	91	8	RootsOfUnity.java	isCounterClockWise	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
771	119	8	RootsOfUnity.java	computeRoots	n	int	0	ZeroException	$ == 0
772	129	8	RootsOfUnity.java	computeRoots	THIS	RootsOfUnity	0	RET	absN == $.omegaCount
772	129	8	RootsOfUnity.java	computeRoots	absN	int	0	RET	$ == omegaCount
30113	143	8	RootsOfUnity.java	computeRoots	i	int	0	NIL-FOR	$ < absN
30113	143	8	RootsOfUnity.java	computeRoots	absN	int	0	NIL-FOR	i < $
773	165	8	RootsOfUnity.java	getReal	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
774	169	8	RootsOfUnity.java	getReal	THIS	RootsOfUnity	0	OutOfRangeException	k >= $.omegaCount
774	169	8	RootsOfUnity.java	getReal	k	int	0	OutOfRangeException	$ < 0
774	169	8	RootsOfUnity.java	getReal	k	int	0	OutOfRangeException	$ >= omegaCount
775	192	8	RootsOfUnity.java	getImaginary	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
776	196	8	RootsOfUnity.java	getImaginary	THIS	RootsOfUnity	0	OutOfRangeException	k >= $.omegaCount
776	196	8	RootsOfUnity.java	getImaginary	k	int	0	OutOfRangeException	$ >= omegaCount
776	196	8	RootsOfUnity.java	getImaginary	k	int	0	OutOfRangeException	$ < 0
652	136	4	Rotation.java	Rotation	needsNormalization	boolean	0	DEF	$
653	176	4	Rotation.java	Rotation	norm	double	0	MathIllegalArgumentException	$ == 0
654	224	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[2].length != 3
654	224	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[0].length != 3
654	224	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[1].length != 3
654	224	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m.$.length != 3
654	224	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[2].length != 3
654	224	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[0].length != 3
654	224	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[1].length != 3
654	224	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$.length != 3
655	238	4	Rotation.java	Rotation	det	double	0	NotARotationMatrixException	$ < 0.0
656	256	4	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
657	265	6	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
658	274	8	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
659	320	2	Rotation.java	Rotation	u1u1	double	0	MathIllegalArgumentException	$ == 0
659	320	2	Rotation.java	Rotation	u2u2	double	0	MathIllegalArgumentException	$ == 0
659	320	2	Rotation.java	Rotation	v1v1	double	0	MathIllegalArgumentException	$ == 0
659	320	2	Rotation.java	Rotation	v2v2	double	0	MathIllegalArgumentException	$ == 0
660	345	2	Rotation.java	Rotation	k	Vector3D	0	RET	c <= inPlaneThreshold * $.getNorm() * u3.getNorm()
660	345	2	Rotation.java	Rotation	u3	Vector3D	0	RET	c <= inPlaneThreshold * k.getNorm() * $.getNorm()
660	345	2	Rotation.java	Rotation	c	double	0	RET	$ <= inPlaneThreshold * k.getNorm() * u3.getNorm()
660	345	2	Rotation.java	Rotation	inPlaneThreshold	double	0	RET	c <= $ * k.getNorm() * u3.getNorm()
661	354	4	Rotation.java	Rotation	u2Prime	Vector3D	0	RET	c <= inPlaneThreshold * k.getNorm() * $.getNorm()
661	354	4	Rotation.java	Rotation	k	Vector3D	0	RET	c <= inPlaneThreshold * $.getNorm() * u2Prime.getNorm()
661	354	4	Rotation.java	Rotation	c	double	0	RET	$ <= inPlaneThreshold * k.getNorm() * u2Prime.getNorm()
661	354	4	Rotation.java	Rotation	inPlaneThreshold	double	0	RET	c <= $ * k.getNorm() * u2Prime.getNorm()
662	360	6	Rotation.java	Rotation	c	double	0	RET	$ <= 0
663	409	4	Rotation.java	Rotation	normProduct	double	0	MathIllegalArgumentException	$ == 0
664	415	4	Rotation.java	Rotation	normProduct	double	1	DEF	dot < ((2.0e-15 - 1.0) * $)
664	415	4	Rotation.java	Rotation	dot	double	1	DEF	$ < ((2.0e-15 - 1.0) * normProduct)
665	512	4	Rotation.java	getAxis	squaredSine	double	1	RET	$ == 0
666	514	11	Rotation.java	getAxis	THIS	Rotation	0	RET	$.q0 < 0
667	527	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 < -0.1
667	527	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 > 0.1
668	529	11	Rotation.java	getAngle	THIS	Rotation	0	RET	$.q0 < 0
669	573	4	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
670	582	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
670	582	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
671	591	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
672	600	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
672	600	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
673	609	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
674	618	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
674	618	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
675	627	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
676	636	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
676	636	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
677	645	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
678	654	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
678	654	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
679	663	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
680	672	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
680	672	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
681	681	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
682	690	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
682	690	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
683	699	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
684	708	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
684	708	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
685	717	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
686	726	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
686	726	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
687	735	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
688	744	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
688	744	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
689	753	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
690	762	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
690	762	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
691	780	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
691	780	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
30101	978	4	Rotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
692	1019	6	Rotation.java	orthogonalizeMatrix	fn	double	0	RET	FastMath.abs(fn1 - $) <= threshold
692	1019	6	Rotation.java	orthogonalizeMatrix	fn1	double	0	RET	FastMath.abs($ - fn) <= threshold
692	1019	6	Rotation.java	orthogonalizeMatrix	threshold	double	0	RET	FastMath.abs(fn1 - fn) <= $
31574	105	4	RungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
31574	105	4	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
31575	124	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
31576	132	6	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
31576	132	6	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
31577	134	10	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
31577	134	10	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
31577	134	10	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
31578	136	14	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
31578	136	14	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
31579	147	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
31579	147	6	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
31579	147	6	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
31580	149	10	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
31580	149	10	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
2650	161	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	DEF	$.isLastStep
2651	169	10	RungeKuttaIntegrator.java	integrate	nextIsLast	boolean	0	DEF	$
2540	87	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	1	DEF	interpolator.$.currentState != null
2540	87	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
31474	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < interpolator.$.yDotK.$.length
31474	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.yDotK.length
31474	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.length
31475	157	4	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
31475	157	4	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
31476	163	4	RungeKuttaStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < kMax
31476	163	4	RungeKuttaStepInterpolator.java	writeExternal	kMax	int	0	NIL-FOR	k < $
31477	164	6	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
31477	164	6	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
2541	183	4	RungeKuttaStepInterpolator.java	readExternal	n	int	1	DEF	$ < 0
31478	187	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
31478	187	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
31479	194	4	RungeKuttaStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
31479	194	4	RungeKuttaStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
31480	196	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
31480	196	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
2542	203	4	RungeKuttaStepInterpolator.java	readExternal	THIS	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
1052	109	8	SaddlePointExpansion.java	getStirlingError	z	double	1	DEF	$ < 15.0
1053	111	12	SaddlePointExpansion.java	getStirlingError	z2	double	1	DEF	FastMath.floor($) == $
1054	147	8	SaddlePointExpansion.java	getDeviancePart	x	double	1	DEF	FastMath.abs($ - mu) < 0.1 * ($ + mu)
1054	147	8	SaddlePointExpansion.java	getDeviancePart	mu	double	1	DEF	FastMath.abs(x - $) < 0.1 * (x + $)
30123	155	12	SaddlePointExpansion.java	getDeviancePart	s1	double	0	NIL-WHILE	$ != s
30123	155	12	SaddlePointExpansion.java	getDeviancePart	s	double	0	NIL-WHILE	s1 != $
1055	180	8	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == 0
1056	181	12	SaddlePointExpansion.java	logBinomialProbability	p	double	1	DEF	$ < 0.1
1057	186	15	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == n
1057	186	15	SaddlePointExpansion.java	logBinomialProbability	n	int	1	DEF	x == $
1058	187	12	SaddlePointExpansion.java	logBinomialProbability	q	double	1	DEF	$ < 0.1
3205	83	8	SecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
3206	86	8	SecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
3207	107	12	SecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
3208	120	12	SecantSolver.java	doSolve	f1	double	0	RET	FastMath.abs($) <= ftol
3208	120	12	SecantSolver.java	doSolve	ftol	double	0	RET	FastMath.abs(f1) <= $
3209	126	12	SecantSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1), atol)
3209	126	12	SecantSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($), atol)
3209	126	12	SecantSolver.java	doSolve	atol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), $)
3209	126	12	SecantSolver.java	doSolve	rtol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1), atol)
1988	80	8	SecondMoment.java	increment	THIS	SecondMoment	0	DEF	$.n < 1
1998	183	8	SemiVariance.java	evaluate	values	double[]	0	NullArgumentException	$ == null
1999	281	8	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 0
1999	281	8	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 0
2000	284	12	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 1
2000	284	12	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 1
31216	291	16	SemiVariance.java	evaluate	i	int	0	NIL-FOR	$ < length
31216	291	16	SemiVariance.java	evaluate	length	int	0	NIL-FOR	i < $
2001	292	20	SemiVariance.java	evaluate	i	int	0	DEF	(values[$] > cutoff) == booleanDirection
2001	292	20	SemiVariance.java	evaluate	booleanDirection	boolean	0	DEF	(values[i] > cutoff) == $
2001	292	20	SemiVariance.java	evaluate	values	double[]	0	DEF	($[i] > cutoff) == booleanDirection
2001	292	20	SemiVariance.java	evaluate	cutoff	double	0	DEF	(values[i] > $) == booleanDirection
2002	298	16	SemiVariance.java	evaluate	corrected	boolean	1	RET	$
30903	81	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	NIL-FOR	i < p.$.length
30903	81	8	SimplePointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
30903	81	8	SimplePointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1606	86	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > $.getAbsoluteThreshold()
1606	86	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > size * $.getRelativeThreshold()
1606	86	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1606	86	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1606	86	12	SimplePointChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
2308	133	8	SimpleRegression.java	addData	THIS	SimpleRegression	1	DEF	$.n == 0
2309	137	12	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.hasIntercept
2310	149	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.hasIntercept
2311	175	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 0
2312	176	12	SimpleRegression.java	removeData	THIS	SimpleRegression	1	DEF	$.hasIntercept
31361	220	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
31361	220	8	SimpleRegression.java	addData	i	int	0	NIL-FOR	$ < data.length
31361	220	8	SimpleRegression.java	addData	data	double[][]	0	NIL-FOR	i < $.length
2313	221	12	SimpleRegression.java	addData	THIS	SimpleRegression	0	ModelSpecificationException	data[i].length < 2
2313	221	12	SimpleRegression.java	addData	i	int	0	ModelSpecificationException	data[$].length < 2
2313	221	12	SimpleRegression.java	addData	data	double[][]	0	ModelSpecificationException	$[i].length < 2
2314	239	8	SimpleRegression.java	addObservation	THIS	SimpleRegression	0	ModelSpecificationException	x.$.length == 0
2314	239	8	SimpleRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length == 0
2314	239	8	SimpleRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$ == null
2315	257	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	ModelSpecificationException	x.$.length != y.$.length
2315	257	8	SimpleRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length != y.length
2315	257	8	SimpleRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$ == null
2315	257	8	SimpleRegression.java	addObservations	y	double[]	0	ModelSpecificationException	x.length != $.length
2315	257	8	SimpleRegression.java	addObservations	y	double[]	0	ModelSpecificationException	$ == null
31362	264	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	NIL-FOR	i < x.$.length
31362	264	8	SimpleRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
31362	264	8	SimpleRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
2316	265	12	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	DEF	x[i].length == 0
2316	265	12	SimpleRegression.java	addObservations	i	int	0	DEF	x[$] == null
2316	265	12	SimpleRegression.java	addObservations	i	int	0	DEF	x[$].length == 0
2316	265	12	SimpleRegression.java	addObservations	x	double[][]	0	DEF	$[i] == null
2316	265	12	SimpleRegression.java	addObservations	x	double[][]	0	DEF	$[i].length == 0
2317	269	8	SimpleRegression.java	addObservations	obsOk	boolean	0	ModelSpecificationException	$
31363	274	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	NIL-FOR	i < x.$.length
31363	274	8	SimpleRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
31363	274	8	SimpleRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
31364	294	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	$.n > 0
31364	294	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
31364	294	8	SimpleRegression.java	removeData	i	int	0	NIL-FOR	$ < data.length
31364	294	8	SimpleRegression.java	removeData	data	double[][]	0	NIL-FOR	i < $.length
2318	339	8	SimpleRegression.java	predict	THIS	SimpleRegression	0	RET	$.hasIntercept
2319	395	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	$.n < 2
2320	398	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	FastMath.abs($.sumXX) < 10 * Double.MIN_VALUE
2321	448	8	SimpleRegression.java	getTotalSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
2322	462	8	SimpleRegression.java	getXSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
2323	508	8	SimpleRegression.java	getMeanSquareError	THIS	SimpleRegression	0	RET	$.n < 3
2324	531	8	SimpleRegression.java	getR	b1	double	0	DEF	$ < 0
2325	569	8	SimpleRegression.java	getInterceptStdErr	THIS	SimpleRegression	0	RET	$.hasIntercept
2326	649	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ >= 1
2326	649	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ <= 0
2327	697	6	SimpleRegression.java	getIntercept	THIS	SimpleRegression	0	RET	$.hasIntercept
2328	719	8	SimpleRegression.java	regress	THIS	SimpleRegression	1	NoDataException:RET	$.hasIntercept
2329	720	10	SimpleRegression.java	regress	THIS	SimpleRegression	0	NoDataException	$.n < 3
2330	723	10	SimpleRegression.java	regress	THIS	SimpleRegression	1	RET	FastMath.abs( $.sumXX ) > Precision.SAFE_MIN
2331	746	10	SimpleRegression.java	regress	THIS	SimpleRegression	0	NoDataException	$.n < 2
2332	749	10	SimpleRegression.java	regress	THIS	SimpleRegression	1	RET	Double.isNaN($.sumXX)
2333	775	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	MathIllegalArgumentException	variablesToInclude.$.length == 0
2333	775	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	MathIllegalArgumentException	$.length == 0
2333	775	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	MathIllegalArgumentException	$ == null
2334	778	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	$.hasIntercept
2334	778	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	variablesToInclude.$.length > 2
2334	778	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	variablesToInclude.$.length > 1
2334	778	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > 2
2334	778	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > 1
2335	784	8	SimpleRegression.java	regress	THIS	SimpleRegression	1	OutOfRangeException:RET	$.hasIntercept
2336	785	12	SimpleRegression.java	regress	THIS	SimpleRegression	1	OutOfRangeException:RET	variablesToInclude.$.length == 2
2336	785	12	SimpleRegression.java	regress	variablesToInclude	int[]	1	OutOfRangeException:RET	$.length == 2
2337	786	16	SimpleRegression.java	regress	variablesToInclude	int[]	1	ModelSpecificationException	$[0] == 1
2338	788	22	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
2339	791	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[1] != 1
2340	796	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 1
2340	796	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
2341	801	16	SimpleRegression.java	regress	variablesToInclude	int[]	1	RET	$[0] == 0
2342	809	22	SimpleRegression.java	regress	variablesToInclude	int[]	0	RET	$[0] == 1
2343	815	20	SimpleRegression.java	regress	_sxx	double	1	RET	Double.isNaN($)
2344	831	12	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
30904	78	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	NIL-FOR	i < p.$.length
30904	78	8	SimpleVectorValueChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
30904	78	8	SimpleVectorValueChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1607	83	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > size * $.getRelativeThreshold()
1607	83	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > $.getAbsoluteThreshold()
1607	83	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1607	83	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1607	83	12	SimpleVectorValueChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
1917	127	8	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NullArgumentException	$.simplex == null
1918	159	12	SimplexOptimizer.java	doOptimize	iteration	int	0	RET	$ > 0
31183	161	16	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NIL-FOR	i < $.simplex.getSize()
31183	161	16	SimplexOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < simplex.getSize()
1919	165	16	SimplexOptimizer.java	doOptimize	converged	boolean	0	RET	$
30884	72	8	SimplexSolver.java	getPivotColumn	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
30884	72	8	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
1570	74	12	SimplexSolver.java	getPivotColumn	THIS	SimplexSolver	0	DEF	Precision.compareTo(entry, minValue, $.maxUlps) < 0
1570	74	12	SimplexSolver.java	getPivotColumn	entry	double	0	DEF	Precision.compareTo($, minValue, maxUlps) < 0
1570	74	12	SimplexSolver.java	getPivotColumn	minValue	double	0	DEF	Precision.compareTo(entry, $, maxUlps) < 0
30885	92	8	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getHeight()
30885	92	8	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1571	96	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	Precision.compareTo(entry, 0d, $.maxUlps) > 0
1571	96	12	SimplexSolver.java	getPivotRow	entry	double	0	DEF	Precision.compareTo($, 0d, maxUlps) > 0
1572	99	16	SimplexSolver.java	getPivotRow	cmp	int	1	DEF	$ == 0
1573	101	23	SimplexSolver.java	getPivotRow	cmp	int	0	DEF	$ < 0
1574	109	8	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	1	RET	$.size() == 0
1575	111	15	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	0	RET	$.size() > 1
30886	115	12	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getNumArtificialVariables()
30886	115	12	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
1576	118	14	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	Precision.equals(entry, 1d, $.maxUlps)
1576	118	14	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.row.equals(tableau.getBasicRow(column))
1576	118	14	SimplexSolver.java	getPivotRow	column	int	0	RET	row.equals(tableau.getBasicRow($))
1576	118	14	SimplexSolver.java	getPivotRow	entry	double	0	RET	Precision.equals($, 1d, maxUlps)
1576	118	14	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	row.equals($.getBasicRow(column))
1577	141	8	SimplexSolver.java	doIteration	pivotRow	Integer	0	UnboundedSolutionException	$ == null
30887	150	8	SimplexSolver.java	doIteration	i	int	0	NIL-FOR	$ < tableau.getHeight()
30887	150	8	SimplexSolver.java	doIteration	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1578	151	12	SimplexSolver.java	doIteration	i	int	0	DEF	$ != pivotRow
1578	151	12	SimplexSolver.java	doIteration	pivotRow	Integer	0	DEF	i != $
1579	169	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
30888	173	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
1580	178	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NoFeasibleSolutionException	Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, $.epsilon)
1580	178	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NoFeasibleSolutionException	Precision.equals($.getEntry(0, $.getRhsOffset()), 0d, epsilon)
30889	198	8	SimplexSolver.java	doOptimize	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
1584	154	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
30890	158	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getOriginalNumDecisionVariables()
30890	158	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getOriginalNumDecisionVariables()
1585	161	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
30891	164	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumSlackVariables()
30891	164	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumSlackVariables()
30892	167	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
30892	167	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1586	187	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
1587	198	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
30893	206	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	NIL-FOR	i < $.constraints.size()
30893	206	8	SimplexTableau.java	createTableau	i	int	0	NIL-FOR	$ < constraints.size()
1588	214	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
1589	223	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	1	DEF	constraint.getRelationship() == $.Relationship.LEQ
1589	223	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	1	DEF	$.getRelationship() == Relationship.LEQ
1590	225	19	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1590	225	19	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1591	230	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.EQ
1591	230	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1591	230	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.EQ
1591	230	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1592	260	8	SimplexTableau.java	normalize	constraint	LinearConstraint	0	RET	$.getValue() < 0
1593	285	12	SimplexTableau.java	getConstraintTypeCounts	THIS	SimplexTableau	0	DEF	$.constraint.getRelationship() == relationship
1593	285	12	SimplexTableau.java	getConstraintTypeCounts	relationship	Relationship	0	DEF	constraint.getRelationship() == $
30894	312	8	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
30894	312	8	SimplexTableau.java	getBasicRow	i	int	0	NIL-FOR	$ < getHeight()
1594	314	12	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	1	DEF	Precision.equals(entry, 1d, $.maxUlps)
1594	314	12	SimplexTableau.java	getBasicRow	entry	double	1	DEF	Precision.equals($, 1d, maxUlps)
1594	314	12	SimplexTableau.java	getBasicRow	row	Integer	1	DEF	$ == null
1595	316	19	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	RET	Precision.equals(entry, 0d, $.maxUlps)
1595	316	19	SimplexTableau.java	getBasicRow	entry	double	0	RET	Precision.equals($, 0d, maxUlps)
1596	328	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	RET	$.getNumObjectiveFunctions() == 1
30895	336	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getArtificialVariableOffset()
30895	336	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getArtificialVariableOffset()
1597	338	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	Precision.compareTo(entry, 0d, $.maxUlps) > 0
1597	338	12	SimplexTableau.java	dropPhase1Objective	entry	double	0	DEF	Precision.compareTo($, 0d, maxUlps) > 0
30896	344	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
30896	344	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1598	346	10	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	$.getBasicRow(col) == null
1598	346	10	SimplexTableau.java	dropPhase1Objective	col	int	0	DEF	getBasicRow($) == null
30897	352	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
30897	352	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getHeight()
30898	354	10	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
30898	354	10	SimplexTableau.java	dropPhase1Objective	j	int	0	NIL-FOR	$ < getWidth()
1599	355	12	SimplexTableau.java	dropPhase1Objective	j	int	0	DEF	columnsToDrop.contains($)
1599	355	12	SimplexTableau.java	dropPhase1Objective	columnsToDrop	List<Integer>	0	DEF	$.contains(j)
30899	361	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ >= 0
30900	382	8	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
30900	382	8	SimplexTableau.java	isOptimal	i	int	0	NIL-FOR	$ < getWidth() - 1
1600	384	12	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	RET	Precision.compareTo(entry, 0d, $.epsilon) < 0
1600	384	12	SimplexTableau.java	isOptimal	entry	double	0	RET	Precision.compareTo($, 0d, epsilon) < 0
30901	403	6	SimplexTableau.java	getSolution	THIS	SimplexTableau	0	NIL-FOR	i < coefficients.$.length
30901	403	6	SimplexTableau.java	getSolution	i	int	0	NIL-FOR	$ < coefficients.length
30901	403	6	SimplexTableau.java	getSolution	coefficients	double[]	0	NIL-FOR	i < $.length
1601	405	10	SimplexTableau.java	getSolution	colIndex	int	0	DEF	$ < 0
1602	410	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ != null
1602	410	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ == 0
1603	415	17	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	basicRows.contains($)
1603	415	17	SimplexTableau.java	getSolution	basicRows	Set<Integer>	1	DEF	$.contains(basicRow)
30902	439	8	SimplexTableau.java	divideRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
30902	439	8	SimplexTableau.java	divideRow	j	int	0	NIL-FOR	$ < getWidth()
1604	570	6	SimplexTableau.java	equals	THIS	SimplexTableau	0	RET	$ == other
1604	570	6	SimplexTableau.java	equals	other	Object	0	RET	this == $
1605	574	6	SimplexTableau.java	equals	other	Object	0	RET	$ instanceof SimplexTableau
3271	63	8	SimpsonIntegrator.java	SimpsonIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > SIMPSON_MAX_ITERATIONS_COUNT
3272	85	8	SimpsonIntegrator.java	SimpsonIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > SIMPSON_MAX_ITERATIONS_COUNT
3273	105	8	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	$.getMinimalIterationCount() == 1
3274	116	12	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	$.iterations.getCount() >= $.getMinimalIterationCount()
3275	120	16	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
3275	120	16	SimpsonIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
3275	120	16	SimpsonIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
3275	120	16	SimpsonIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
3128	64	8	Sinc.java	value	THIS	Sinc	1	RET	$.normalized
3129	74	8	Sinc.java	derivative	THIS	Sinc	1	RET	$.normalized
1411	92	8	SingularValueDecomposition.java	SingularValueDecomposition	matrix	RealMatrix	1	DEF	$.getRowDimension() < $.getColumnDimension()
30757	113	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ < FastMath.max(nct, nrt)
30757	113	8	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	NIL-FOR	k < FastMath.max($, nrt)
30757	113	8	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	NIL-FOR	k < FastMath.max(nct, $)
1412	114	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1412	114	12	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
30758	119	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
30758	119	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1413	122	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] != 0
1413	122	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] != 0
1414	123	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	A[$][$] < 0
30759	126	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
30759	126	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
30760	133	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
30760	133	12	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
1415	134	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] != 0
1415	134	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] != 0
1415	134	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1415	134	16	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
30761	138	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
30761	138	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
30762	142	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
30762	142	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1416	150	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1416	150	12	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
30763	153	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
30763	153	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1417	157	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nrt
1417	157	12	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	k < $
30764	162	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
30764	162	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1418	165	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1418	165	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
1419	166	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$ + 1] < 0
1419	166	20	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k + 1] < 0
30765	169	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
30765	169	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1420	175	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k + 1 < $.m
1420	175	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1420	175	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ + 1 < m
1420	175	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
30766	178	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
30766	178	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
30767	181	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
30767	181	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
30768	182	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
30768	182	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
30769	186	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
30769	186	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
30770	188	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
30770	188	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
30771	196	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
30771	196	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1421	203	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	nct < $.n
1421	203	8	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	$ < n
1422	206	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.m < p
1422	206	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	DEF	m < $
1423	209	8	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	$ + 1 < p
1423	209	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	DEF	nrt + 1 < $
30772	215	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
30772	215	8	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
30773	216	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
30773	216	12	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
30774	221	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1424	222	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	1	DEF	$.singularValues[k] != 0
1424	222	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	singularValues[$] != 0
30775	223	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
30775	223	16	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
30776	225	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
30776	225	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
30777	229	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
30777	229	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
30778	233	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
30778	233	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
30779	237	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < k - 1
30779	237	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	i < $ - 1
30780	241	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
30780	241	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
30781	249	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1425	250	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nrt
1425	250	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1425	250	12	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
1425	250	12	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	k < $
30782	252	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
30782	252	16	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
30783	254	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
30783	254	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
30784	258	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
30784	258	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
30785	263	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
30785	263	12	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
30786	272	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-WHILE	$ > 0
30787	284	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1426	288	16	SingularValueDecomposition.java	SingularValueDecomposition	threshold	double	0	DEF	FastMath.abs(e[k]) <= $
1426	288	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	FastMath.abs(e[$]) <= threshold
1426	288	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	FastMath.abs($[k]) <= threshold
1427	294	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	$ == p - 2
1427	294	12	SingularValueDecomposition.java	SingularValueDecomposition	p	int	1	DEF	k == $ - 2
30788	298	16	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	NIL-FOR	$ >= k
30788	298	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	ks >= $
1428	299	20	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	DEF	$ == k
1428	299	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	ks == $
1429	304	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	FastMath.abs($.singularValues[ks]) <= TINY + EPS * t
1429	304	20	SingularValueDecomposition.java	SingularValueDecomposition	t	double	0	DEF	FastMath.abs(singularValues[ks]) <= TINY + EPS * $
1429	304	20	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	DEF	FastMath.abs(singularValues[$]) <= TINY + EPS * t
1430	309	16	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	1	DEF	$ == k
1430	309	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	ks == $
1431	311	23	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	1	DEF	$ == p - 1
1431	311	23	SingularValueDecomposition.java	SingularValueDecomposition	p	int	1	DEF	ks == $ - 1
30789	325	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ >= k
30789	325	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	j >= $
1432	330	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ != k
1432	330	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	j != $
30790	335	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
30790	335	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
30791	347	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < p
30791	347	20	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-FOR	j < $
30792	355	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
30792	355	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1433	380	20	SingularValueDecomposition.java	SingularValueDecomposition	b	double	0	DEF	$ != 0
1433	380	20	SingularValueDecomposition.java	SingularValueDecomposition	c	double	0	DEF	$ != 0
1434	383	24	SingularValueDecomposition.java	SingularValueDecomposition	b	double	0	DEF	$ < 0
30793	391	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < p - 1
30793	391	20	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-FOR	j < $ - 1
1435	395	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ != k
1435	395	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	j != $
30794	403	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
30794	403	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1436	416	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	j < $.m - 1
1436	416	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ < m - 1
30795	417	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
30795	417	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1437	431	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] <= 0
1437	431	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] <= 0
30796	434	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ <= pp
30796	434	24	SingularValueDecomposition.java	SingularValueDecomposition	pp	int	0	NIL-FOR	i <= $
30797	439	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-WHILE	$ < pp
30797	439	20	SingularValueDecomposition.java	SingularValueDecomposition	pp	int	0	NIL-WHILE	k < $
1438	440	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] >= $.singularValues[k + 1]
1438	440	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] >= singularValues[$ + 1]
1439	446	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k < $.n - 1
1439	446	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < n - 1
30798	447	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
30798	447	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1440	453	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k < $.m - 1
1440	453	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < m - 1
30799	454	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
30799	454	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1441	473	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	1	DEF	$.transposed
1442	501	8	SingularValueDecomposition.java	getUT	THIS	SingularValueDecomposition	0	DEF	$.cachedUt == null
1443	515	8	SingularValueDecomposition.java	getS	THIS	SingularValueDecomposition	0	DEF	$.cachedS == null
1444	550	8	SingularValueDecomposition.java	getVT	THIS	SingularValueDecomposition	0	DEF	$.cachedVt == null
30800	572	8	SingularValueDecomposition.java	getCovariance	THIS	SingularValueDecomposition	0	NIL-WHILE	$.singularValues[dimension] >= minSingularValue
30800	572	8	SingularValueDecomposition.java	getCovariance	p	int	0	NIL-WHILE	dimension < $
30800	572	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NIL-WHILE	$ < p
30800	572	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NIL-WHILE	singularValues[$] >= minSingularValue
30800	572	8	SingularValueDecomposition.java	getCovariance	minSingularValue	double	0	NIL-WHILE	singularValues[dimension] >= $
1445	577	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NumberIsTooLargeException	$ == 0
30801	636	8	SingularValueDecomposition.java	getRank	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.singularValues.$.length
30801	636	8	SingularValueDecomposition.java	getRank	i	int	0	NIL-FOR	$ < singularValues.length
1446	637	12	SingularValueDecomposition.java	getRank	THIS	SingularValueDecomposition	0	DEF	$.singularValues[i] > $.tol
1446	637	12	SingularValueDecomposition.java	getRank	i	int	0	DEF	singularValues[$] > tol
1975	91	8	Skewness.java	increment	THIS	Skewness	0	DEF	$.incMoment
1976	106	8	Skewness.java	getResult	THIS	Skewness	0	RET	$.moment.$.n < 3
1977	110	8	Skewness.java	getResult	variance	double	1	RET	$ < 10E-20
1978	131	8	Skewness.java	clear	THIS	Skewness	0	DEF	$.incMoment
1979	159	8	Skewness.java	evaluate	THIS	Skewness	0	DEF	$.test(values, begin, length)
1979	159	8	Skewness.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1979	159	8	Skewness.java	evaluate	begin	int	0	DEF	test(values, $, length)
1979	159	8	Skewness.java	evaluate	length	int	0	DEF	test(values, begin, $)
1979	159	8	Skewness.java	evaluate	length	int	0	DEF	$ > 2
31209	169	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
31209	169	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
31209	169	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
31210	177	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
31210	177	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
31210	177	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
3123	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3123	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3123	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3123	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3123	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3123	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
3124	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3124	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3124	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
31745	84	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
31745	84	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3125	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3125	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3125	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3125	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
31746	96	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
31746	96	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
31747	98	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
31747	98	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
31748	108	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
31748	108	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
31749	110	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
31749	110	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
31750	118	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
31750	118	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
31751	120	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
31751	120	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
31752	130	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
31752	130	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
31753	132	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
31753	132	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
30314	91	8	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	i < $.rows
30314	91	8	SparseFieldMatrix.java	SparseFieldMatrix	i	int	0	NIL-FOR	$ < rows
30315	92	12	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	j < $.columns
30315	92	12	SparseFieldMatrix.java	SparseFieldMatrix	j	int	0	NIL-FOR	$ < columns
1169	105	8	SparseFieldMatrix.java	addToEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1169	105	8	SparseFieldMatrix.java	addToEntry	value	T	1	DEF	getField().getZero().equals($)
1170	151	8	SparseFieldMatrix.java	multiplyEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1170	151	8	SparseFieldMatrix.java	multiplyEntry	value	T	1	DEF	getField().getZero().equals($)
1171	164	8	SparseFieldMatrix.java	setEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1171	164	8	SparseFieldMatrix.java	setEntry	value	T	1	DEF	getField().getZero().equals($)
30399	108	8	SparseFieldVector.java	SparseFieldVector	THIS	SparseFieldVector	0	NIL-FOR	key < values.$.length
30399	108	8	SparseFieldVector.java	SparseFieldVector	key	int	0	NIL-FOR	$ < values.length
30399	108	8	SparseFieldVector.java	SparseFieldVector	values	T[]	0	NIL-FOR	key < $.length
30400	146	8	SparseFieldVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1228	150	12	SparseFieldVector.java	add	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1228	150	12	SparseFieldVector.java	add	key	int	1	DEF	entries.containsKey($)
30401	169	8	SparseFieldVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1229	178	8	SparseFieldVector.java	append	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
30402	183	12	SparseFieldVector.java	append	i	int	0	NIL-FOR	$ < n
30402	183	12	SparseFieldVector.java	append	n	int	0	NIL-FOR	i < $
30403	207	8	SparseFieldVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
30404	219	8	SparseFieldVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
30405	231	8	SparseFieldVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
30406	242	8	SparseFieldVector.java	getData	iter	Iterator	0	NIL-WHILE	$.hasNext()
30407	272	8	SparseFieldVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1230	275	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ >= index
1230	275	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ < end
1230	275	12	SparseFieldVector.java	getSubVector	end	int	0	DEF	key < $
1230	275	12	SparseFieldVector.java	getSubVector	index	int	0	DEF	key >= $
30408	289	8	SparseFieldVector.java	mapAddToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
30408	289	8	SparseFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
30409	303	8	SparseFieldVector.java	mapDivideToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
30410	317	8	SparseFieldVector.java	mapInvToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
30410	317	8	SparseFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < virtualSize
30411	331	8	SparseFieldVector.java	mapMultiplyToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
30412	359	8	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
30413	362	12	SparseFieldVector.java	outerProduct	iter2	Iterator	0	NIL-WHILE	$.hasNext()
1231	372	8	SparseFieldVector.java	outerProduct	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
30414	378	12	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
30415	382	16	SparseFieldVector.java	outerProduct	col	int	0	NIL-FOR	$ < n
30415	382	16	SparseFieldVector.java	outerProduct	n	int	0	NIL-FOR	col < $
30416	398	8	SparseFieldVector.java	set	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
30416	398	8	SparseFieldVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
30417	414	8	SparseFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < n
30417	414	8	SparseFieldVector.java	setSubVector	n	int	0	NIL-FOR	i < $
30418	431	8	SparseFieldVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1232	434	12	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1232	434	12	SparseFieldVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1233	445	8	SparseFieldVector.java	subtract	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
30419	451	12	SparseFieldVector.java	subtract	i	int	0	NIL-FOR	$ < n
30419	451	12	SparseFieldVector.java	subtract	n	int	0	NIL-FOR	i < $
1234	452	16	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(i)
1234	452	16	SparseFieldVector.java	subtract	i	int	1	DEF	entries.containsKey($)
1235	474	8	SparseFieldVector.java	checkIndex	THIS	SparseFieldVector	0	OutOfRangeException	index >= $.getDimension()
1235	474	8	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1235	474	8	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1236	486	8	SparseFieldVector.java	checkVectorDimensions	THIS	SparseFieldVector	0	DimensionMismatchException	$.getDimension() != n
1236	486	8	SparseFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	getDimension() != $
1237	493	8	SparseFieldVector.java	add	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
30420	500	12	SparseFieldVector.java	add	i	int	0	NIL-FOR	$ < n
30420	500	12	SparseFieldVector.java	add	n	int	0	NIL-FOR	i < $
30421	527	8	SparseFieldVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1238	540	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$ == obj
1238	540	8	SparseFieldVector.java	equals	obj	Object	0	RET	this == $
1239	544	8	SparseFieldVector.java	equals	obj	Object	0	RET	$ instanceof SparseFieldVector<?>
1240	551	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	1	RET	$.field == null
1241	552	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	other.$.field != null
1241	552	12	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	$.field != null
1242	555	15	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.field.equals(other.$.field)
1242	555	15	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	field.equals($.field)
1243	558	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.virtualSize != other.$.virtualSize
1243	558	8	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	virtualSize != $.virtualSize
30422	563	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1244	566	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(iter.value())
1244	566	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals($.value())
30423	571	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1245	574	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	test.equals($.getEntry(iter.key()))
1245	574	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(getEntry(iter.key()))
1245	574	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals(getEntry($.key()))
2162	146	8	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	DimensionMismatchException	xArray.$.length != yArray.$.length
2162	146	8	SpearmansCorrelation.java	correlation	xArray	double[]	1	DimensionMismatchException	$.length != yArray.length
2162	146	8	SpearmansCorrelation.java	correlation	yArray	double[]	1	DimensionMismatchException	xArray.length != $.length
2163	148	15	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	MathIllegalArgumentException	xArray.$.length < 2
2163	148	15	SpearmansCorrelation.java	correlation	xArray	double[]	1	MathIllegalArgumentException	$.length < 2
31281	164	8	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < matrix.getColumnDimension()
31281	164	8	SpearmansCorrelation.java	rankTransform	matrix	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
3029	68	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
3029	68	8	SplineInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
3029	68	8	SplineInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
3030	72	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	NumberIsTooSmallException	x.$.length < 3
3030	72	8	SplineInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 3
31674	84	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
31674	84	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
31675	93	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
31675	93	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
31676	108	8	SplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ >=0
31677	116	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
31677	116	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
2362	57	8	StableRandomGenerator.java	StableRandomGenerator	generator	RandomGenerator	0	NullArgumentException	$ == null
2363	61	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	0	OutOfRangeException	$ <= 2d
2363	61	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	0	OutOfRangeException	$ > 0d
2364	66	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	0	OutOfRangeException	$ >= -1d
2364	66	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	0	OutOfRangeException	$ <= 1d
2365	74	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	1	DEF	$ < 2d
2365	74	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	1	DEF	$ != 0d
2366	92	8	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	0	RET	$.alpha == 2d
2367	99	8	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	$.beta == 0d
2368	101	12	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	$.alpha == 1d
2369	113	12	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	FastMath.abs($.alpha - 1d) > 1e-8
2370	124	16	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	0	DEF	$.alpha != 1d
2192	692	8	StatUtils.java	sumDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
2192	692	8	StatUtils.java	sumDifference	n	int	0	DimensionMismatchException	$ != sample2.length
2192	692	8	StatUtils.java	sumDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
2193	695	8	StatUtils.java	sumDifference	n	int	0	NoDataException	$ <= 0
31296	699	8	StatUtils.java	sumDifference	i	int	0	NIL-FOR	$ < n
31296	699	8	StatUtils.java	sumDifference	n	int	0	NIL-FOR	i < $
2194	740	8	StatUtils.java	varianceDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
2194	740	8	StatUtils.java	varianceDifference	n	int	0	DimensionMismatchException	$ != sample2.length
2194	740	8	StatUtils.java	varianceDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
2195	743	8	StatUtils.java	varianceDifference	n	int	0	NumberIsTooSmallException	$ < 2
31297	746	8	StatUtils.java	varianceDifference	i	int	0	NIL-FOR	$ < n
31297	746	8	StatUtils.java	varianceDifference	n	int	0	NIL-FOR	i < $
31298	765	8	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
31298	765	8	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
31298	765	8	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
31299	776	8	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
31299	776	8	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
31299	776	8	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
2075	134	8	StatisticalSummaryValues.java	equals	THIS	StatisticalSummaryValues	0	RET	object == $
2075	134	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ == this
2076	137	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ instanceof StatisticalSummaryValues == false
3131	62	8	StepFunction.java	StepFunction	x	double[]	0	NullArgumentException	$ == null
3131	62	8	StepFunction.java	StepFunction	y	double[]	0	NullArgumentException	$ == null
3132	66	8	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	x.$.length == 0
3132	66	8	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	y.$.length == 0
3132	66	8	StepFunction.java	StepFunction	x	double[]	0	NoDataException	$.length == 0
3132	66	8	StepFunction.java	StepFunction	y	double[]	0	NoDataException	$.length == 0
3133	70	8	StepFunction.java	StepFunction	THIS	StepFunction	0	DimensionMismatchException	y.$.length != x.$.length
3133	70	8	StepFunction.java	StepFunction	x	double[]	0	DimensionMismatchException	y.length != $.length
3133	70	8	StepFunction.java	StepFunction	y	double[]	0	DimensionMismatchException	$.length != x.length
3134	84	8	StepFunction.java	value	index	int	1	DEF	$ < -1
3135	87	15	StepFunction.java	value	index	int	1	DEF	$ >= 0
2526	202	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.lastState == null
2527	211	12	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.forward
2528	220	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	Precision.equals(nextTime, $.lastTime, 1)
2528	220	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.mode == $.StepNormalizerMode.MULTIPLES
2528	220	8	StepNormalizer.java	handleStep	nextTime	double	0	DEF	Precision.equals($, lastTime, 1)
31465	227	8	StepNormalizer.java	handleStep	nextInStep	boolean	0	NIL-WHILE	$
2529	239	8	StepNormalizer.java	handleStep	isLast	boolean	0	DEF	$
2530	246	12	StepNormalizer.java	handleStep	addLast	boolean	0	DEF	$
2531	274	8	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.firstTime == $.lastTime
2531	274	8	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.bounds.firstIncluded()
2152	110	8	StorelessBivariateCovariance.java	getResult	THIS	StorelessBivariateCovariance	0	NumberIsTooSmallException	$.n < 2
2153	114	8	StorelessBivariateCovariance.java	getResult	THIS	StorelessBivariateCovariance	1	RET	$.biasCorrected
31263	82	8	StorelessCovariance.java	initializeMatrix	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
31263	82	8	StorelessCovariance.java	initializeMatrix	i	int	0	NIL-FOR	$ < dimension
31264	83	12	StorelessCovariance.java	initializeMatrix	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
31264	83	12	StorelessCovariance.java	initializeMatrix	j	int	0	NIL-FOR	$ < dimension
2151	151	8	StorelessCovariance.java	increment	THIS	StorelessCovariance	0	DimensionMismatchException	length != $.dimension
2151	151	8	StorelessCovariance.java	increment	length	int	0	DimensionMismatchException	$ != dimension
31265	157	8	StorelessCovariance.java	increment	i	int	0	NIL-FOR	$ < length
31265	157	8	StorelessCovariance.java	increment	length	int	0	NIL-FOR	i < $
31266	158	12	StorelessCovariance.java	increment	j	int	0	NIL-FOR	$ < length
31266	158	12	StorelessCovariance.java	increment	length	int	0	NIL-FOR	j < $
31267	184	8	StorelessCovariance.java	getData	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
31267	184	8	StorelessCovariance.java	getData	i	int	0	NIL-FOR	$ < dimension
31268	185	12	StorelessCovariance.java	getData	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
31268	185	12	StorelessCovariance.java	getData	j	int	0	NIL-FOR	$ < dimension
693	117	8	SubLine.java	intersection	includeEndPoints	boolean	1	RET	$
738	125	8	SubLine.java	intersection	includeEndPoints	boolean	1	RET	$
739	159	8	SubLine.java	side	crossing	Vector2D	0	RET	$ == null
740	180	8	SubLine.java	split	crossing	Vector2D	0	RET	$ == null
639	60	8	SubPlane.java	side	inter	Line	0	RET	$ == null
640	77	8	SubPlane.java	side	otherPlane	Plane	0	DEF	crossP.dotProduct($.getNormal()) < 0
640	77	8	SubPlane.java	side	crossP	Vector3D	0	DEF	$.dotProduct(otherPlane.getNormal()) < 0
641	103	8	SubPlane.java	split	inter	Line	0	RET	$ == null
642	115	8	SubPlane.java	split	otherPlane	Plane	0	DEF	crossP.dotProduct($.getNormal()) < 0
642	115	8	SubPlane.java	split	crossP	Vector3D	0	DEF	$.dotProduct(otherPlane.getNormal()) < 0
1945	121	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, begin, length, true)
1945	121	8	Sum.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
1945	121	8	Sum.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
1945	121	8	Sum.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
31199	123	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
31199	123	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
31199	123	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1946	160	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, weights, begin, length, true)
1946	160	8	Sum.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
1946	160	8	Sum.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
1946	160	8	Sum.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
1946	160	8	Sum.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
31200	162	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
31200	162	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
31200	162	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1947	132	8	SumOfLogs.java	evaluate	THIS	SumOfLogs	0	DEF	$.test(values, begin, length, true)
1947	132	8	SumOfLogs.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
1947	132	8	SumOfLogs.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
1947	132	8	SumOfLogs.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
31201	134	12	SumOfLogs.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
31201	134	12	SumOfLogs.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
31201	134	12	SumOfLogs.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1944	120	8	SumOfSquares.java	evaluate	THIS	SumOfSquares	0	DEF	$.test(values, begin, length, true)
1944	120	8	SumOfSquares.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
1944	120	8	SumOfSquares.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
1944	120	8	SumOfSquares.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
31198	122	12	SumOfSquares.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
31198	122	12	SumOfSquares.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
31198	122	12	SumOfSquares.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2017	158	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
2018	161	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
2019	164	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.geoMeanImpl != $.geoMean
2020	217	8	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	0	DEF	$.getN() > 0
2021	218	12	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	1	DEF	$.getN() > 1
2022	353	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
2023	356	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
2024	370	8	SummaryStatistics.java	equals	THIS	SummaryStatistics	0	RET	object == $
2024	370	8	SummaryStatistics.java	equals	object	Object	0	RET	$ == this
2025	373	8	SummaryStatistics.java	equals	object	Object	0	RET	$ instanceof SummaryStatistics == false
2026	643	8	SummaryStatistics.java	checkEmpty	THIS	SummaryStatistics	0	MathIllegalStateException	$.n > 0
2027	681	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getVarianceImpl() instanceof Variance
2028	686	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.meanImpl instanceof Mean
2028	686	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.meanImpl instanceof Mean
2029	691	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getGeoMeanImpl() instanceof GeometricMean
2030	699	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.geoMean == source.$.geoMeanImpl
2030	699	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.geoMean == $.geoMeanImpl
2031	704	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.max == source.$.maxImpl
2031	704	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.max == $.maxImpl
2032	709	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.mean == source.$.meanImpl
2032	709	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.mean == $.meanImpl
2033	714	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.min == source.$.minImpl
2033	714	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.min == $.minImpl
2034	719	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sum == source.$.sumImpl
2034	719	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sum == $.sumImpl
2035	724	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.variance == source.$.varianceImpl
2035	724	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.variance == $.varianceImpl
2036	729	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumLog == source.$.sumLogImpl
2036	729	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumLog == $.sumLogImpl
2037	734	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumsq == source.$.sumsqImpl
2037	734	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumsq == $.sumsqImpl
1135	1168	8	SymmLQ.java	solveInPlace	state	State	0	RET	$.bEqualsNullVector()
1136	1177	8	SymmLQ.java	solveInPlace	earlyStop	boolean	0	DEF	$
30279	1178	12	SymmLQ.java	solveInPlace	state	State	0	NIL-DOWHILE	$.hasConverged()
999	58	8	TDistribution.java	TDistribution	degreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1000	111	8	TDistribution.java	cumulativeProbability	x	double	1	DEF	$ == 0
1001	119	12	TDistribution.java	cumulativeProbability	x	double	1	DEF	$ < 0.0
1002	147	8	TDistribution.java	getNumericalMean	df	double	0	RET	$ > 1
1003	168	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ > 2
1004	172	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ > 1
1004	172	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ <= 2
2099	1120	8	TTest.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ > 0.5
2099	1120	8	TTest.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ <= 0
2100	1137	8	TTest.java	checkSampleData	data	double[]	0	NullArgumentException	$ == null
2101	1140	8	TTest.java	checkSampleData	THIS	TTest	0	NumberIsTooSmallException	data.$.length < 2
2101	1140	8	TTest.java	checkSampleData	data	double[]	0	NumberIsTooSmallException	$.length < 2
2102	1158	8	TTest.java	checkSampleData	stat	StatisticalSummary	0	NullArgumentException	$ == null
2103	1161	8	TTest.java	checkSampleData	stat	StatisticalSummary	0	NumberIsTooSmallException	$.getN() < 2
1997	89	8	ThirdMoment.java	increment	THIS	ThirdMoment	0	DEF	$.n < 1
2635	104	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	1	DEF	$.previousState != null
2635	104	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
31565	111	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
31565	111	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
31566	129	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
31566	129	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2433	73	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	MathIllegalArgumentException	population.getPopulationSize() < $.arity
2433	73	8	TournamentSelection.java	tournament	population	ListPopulation	0	MathIllegalArgumentException	$.getPopulationSize() < this.arity
31411	87	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	NIL-FOR	i<$.arity
31411	87	8	TournamentSelection.java	tournament	i	int	0	NIL-FOR	$<this.arity
31434	62	8	TransformUtils.java	scaleArray	THIS	TransformUtils	0	NIL-FOR	i < f.$.length
31434	62	8	TransformUtils.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
31434	62	8	TransformUtils.java	scaleArray	f	double[]	0	NIL-FOR	i < $.length
31435	78	8	TransformUtils.java	scaleArray	THIS	TransformUtils	0	NIL-FOR	i < f.$.length
31435	78	8	TransformUtils.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
31435	78	8	TransformUtils.java	scaleArray	f	Complex[]	0	NIL-FOR	i < $.length
31436	102	8	TransformUtils.java	createRealImaginaryArray	THIS	TransformUtils	0	NIL-FOR	i < dataC.$.length
31436	102	8	TransformUtils.java	createRealImaginaryArray	i	int	0	NIL-FOR	$ < dataC.length
31436	102	8	TransformUtils.java	createRealImaginaryArray	dataC	Complex[]	0	NIL-FOR	i < $.length
2495	128	8	TransformUtils.java	createComplexArray	THIS	TransformUtils	0	DimensionMismatchException	dataRI.$.length != 2
2495	128	8	TransformUtils.java	createComplexArray	dataRI	double[][]	0	DimensionMismatchException	$.length != 2
2496	133	8	TransformUtils.java	createComplexArray	THIS	TransformUtils	0	DimensionMismatchException	dataR.$.length != dataI.$.length
2496	133	8	TransformUtils.java	createComplexArray	dataR	double[]	0	DimensionMismatchException	$.length != dataI.length
2496	133	8	TransformUtils.java	createComplexArray	dataI	double[]	0	DimensionMismatchException	dataR.length != $.length
31437	139	8	TransformUtils.java	createComplexArray	i	int	0	NIL-FOR	$ < n
31437	139	8	TransformUtils.java	createComplexArray	n	int	0	NIL-FOR	i < $
2497	158	8	TransformUtils.java	exactLog2	index	int	0	MathIllegalArgumentException	$ < 0
88	144	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof Number
88	144	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof String
89	148	12	TransformerMap.java	transform	trans	NumberTransformer	0	DEF	$ != null
90	159	8	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$ == other
90	159	8	TransformerMap.java	equals	other	Object	0	RET	this == $
91	162	8	TransformerMap.java	equals	other	Object	0	RET	$ instanceof TransformerMap
92	164	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.defaultTransformer.equals(rhs.$.defaultTransformer)
92	164	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	defaultTransformer.equals($.defaultTransformer)
93	167	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.map.size() != rhs.$.map.size()
93	167	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	map.size() != $.map.size()
94	171	16	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.entry.getValue().equals(rhs.$.map.get($.entry.getKey()))
94	171	16	TransformerMap.java	equals	rhs	TransformerMap	0	RET	entry.getValue().equals($.map.get(entry.getKey()))
3276	65	8	TrapezoidIntegrator.java	TrapezoidIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > TRAPEZOID_MAX_ITERATIONS_COUNT
3277	87	8	TrapezoidIntegrator.java	TrapezoidIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > TRAPEZOID_MAX_ITERATIONS_COUNT
3278	119	8	TrapezoidIntegrator.java	stage	n	int	1	RET	$ == 0
31796	134	12	TrapezoidIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
31796	134	12	TrapezoidIntegrator.java	stage	np	long	0	NIL-FOR	i < $
3279	154	12	TrapezoidIntegrator.java	doIntegrate	THIS	TrapezoidIntegrator	0	RET	i >= $.getMinimalIterationCount()
3279	154	12	TrapezoidIntegrator.java	doIntegrate	i	int	0	RET	$ >= getMinimalIterationCount()
3280	158	16	TrapezoidIntegrator.java	doIntegrate	THIS	TrapezoidIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
3280	158	16	TrapezoidIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
3280	158	16	TrapezoidIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
3280	158	16	TrapezoidIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
1127	63	8	TriDiagonalTransformer.java	TriDiagonalTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1128	86	8	TriDiagonalTransformer.java	getQ	THIS	TriDiagonalTransformer	0	DEF	$.cachedQ == null
1129	98	8	TriDiagonalTransformer.java	getQT	THIS	TriDiagonalTransformer	0	DEF	$.cachedQt == null
30265	103	12	TriDiagonalTransformer.java	getQT	k	int	0	NIL-FOR	$ >= 1
1130	106	16	TriDiagonalTransformer.java	getQT	hK	double[]	0	DEF	$[k] != 0.0
1130	106	16	TriDiagonalTransformer.java	getQT	k	int	0	DEF	hK[$] != 0.0
30266	110	20	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
30266	110	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
30267	113	20	TriDiagonalTransformer.java	getQT	j	int	0	NIL-FOR	$ < m
30267	113	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	j < $
30268	115	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
30268	115	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
30269	120	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
30269	120	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
1131	139	8	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	$.cachedT == null
30270	142	12	TriDiagonalTransformer.java	getT	i	int	0	NIL-FOR	$ < m
30270	142	12	TriDiagonalTransformer.java	getT	m	int	0	NIL-FOR	i < $
1132	144	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ > 0
1133	147	16	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1133	147	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ < main.length - 1
30271	195	8	TriDiagonalTransformer.java	transform	k	int	0	NIL-FOR	$ < m - 1
30271	195	8	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	k < $ - 1
30272	201	12	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
30272	201	12	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1134	207	12	TriDiagonalTransformer.java	transform	a	double	0	DEF	$ != 0.0
30273	218	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
30273	218	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
30274	222	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
30274	222	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
30275	232	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
30275	232	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
30276	238	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
30276	238	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
30277	244	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
30277	244	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
30278	246	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
30278	246	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1009	63	8	TriangularDistribution.java	TriangularDistribution	a	double	0	NumberIsTooLargeException	$ >= b
1009	63	8	TriangularDistribution.java	TriangularDistribution	b	double	0	NumberIsTooLargeException	a >= $
1010	68	8	TriangularDistribution.java	TriangularDistribution	a	double	0	NumberIsTooSmallException	c < $
1010	68	8	TriangularDistribution.java	TriangularDistribution	c	double	0	NumberIsTooSmallException	$ < a
1011	72	8	TriangularDistribution.java	TriangularDistribution	c	double	0	NumberIsTooLargeException	$ > b
1011	72	8	TriangularDistribution.java	TriangularDistribution	b	double	0	NumberIsTooLargeException	c > $
1012	134	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x < $.a
1012	134	8	TriangularDistribution.java	density	x	double	0	RET	$ < a
1013	137	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x < $.c
1013	137	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	$.a <= x
1013	137	8	TriangularDistribution.java	density	x	double	0	RET	$ < c
1013	137	8	TriangularDistribution.java	density	x	double	0	RET	a <= $
1014	142	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x == $.c
1014	142	8	TriangularDistribution.java	density	x	double	0	RET	$ == c
1015	145	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	$.c < x
1015	145	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x <= $.b
1015	145	8	TriangularDistribution.java	density	x	double	0	RET	c < $
1015	145	8	TriangularDistribution.java	density	x	double	0	RET	$ <= b
1016	167	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x < $.a
1016	167	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ < a
1017	170	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x < $.c
1017	170	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	$.a <= x
1017	170	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ < c
1017	170	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	a <= $
1018	175	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x == $.c
1018	175	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ == c
1019	178	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x <= $.b
1019	178	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	$.c < x
1019	178	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ <= b
1019	178	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	c < $
1020	254	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0
1020	254	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1
1021	257	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
1022	260	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
1023	263	8	TriangularDistribution.java	inverseCumulativeProbability	THIS	TriangularDistribution	0	RET	p < ($.c - $.a) / ($.b - $.a)
1023	263	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ < (c - a) / (b - a)
3033	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	z.$.length == 0
3033	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
3033	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
3033	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
3033	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
3033	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	z	double[]	0	NoDataException	$.length == 0
3033	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$[0].length == 0
3033	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$.length == 0
3034	163	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
3034	163	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
3034	163	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	xLen != $.length
3035	166	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
3035	166	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
3035	166	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	xLen != $.length
3036	169	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
3036	169	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
3036	169	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	xLen != $.length
3037	172	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdZ.$.length
3037	172	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdZ.length
3037	172	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3038	175	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
3038	175	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
3038	175	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	xLen != $.length
3039	178	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdZ.$.length
3039	178	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdZ.length
3039	178	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3040	181	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdYdZ.$.length
3040	181	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdYdZ.length
3040	181	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3041	184	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d3FdXdYdZ.$.length
3041	184	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d3FdXdYdZ.length
3041	184	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
31680	201	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
31680	201	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
3042	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
3042	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
3042	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
3042	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3043	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
3043	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
3043	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
3043	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3044	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
3044	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
3044	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
3044	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3045	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i].length != yLen
3045	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$].length != yLen
3045	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdZ[i].length != $
3045	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3046	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
3046	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
3046	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
3046	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3047	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i].length != yLen
3047	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$].length != yLen
3047	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdZ[i].length != $
3047	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3048	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i].length != yLen
3048	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$].length != yLen
3048	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdYdZ[i].length != $
3048	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3049	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i].length != yLen
3049	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$].length != yLen
3049	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d3FdXdYdZ[i].length != $
3049	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
31681	228	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
31681	228	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
3050	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i][j].length != zLen
3050	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	f[i][$].length != zLen
3050	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$][j].length != zLen
3050	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	f[i][j].length != $
3050	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3051	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i][j].length != zLen
3051	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdX[i][$].length != zLen
3051	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$][j].length != zLen
3051	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdX[i][j].length != $
3051	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3052	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i][j].length != zLen
3052	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdY[i][$].length != zLen
3052	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$][j].length != zLen
3052	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdY[i][j].length != $
3052	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3053	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i][j].length != zLen
3053	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdZ[i][$].length != zLen
3053	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$][j].length != zLen
3053	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdZ[i][j].length != $
3053	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3054	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i][j].length != zLen
3054	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdY[i][$].length != zLen
3054	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$][j].length != zLen
3054	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdY[i][j].length != $
3054	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3055	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i][j].length != zLen
3055	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdZ[i][$].length != zLen
3055	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$][j].length != zLen
3055	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdZ[i][j].length != $
3055	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3056	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i][j].length != zLen
3056	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdYdZ[i][$].length != zLen
3056	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$][j].length != zLen
3056	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdYdZ[i][j].length != $
3056	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3057	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != zLen
3057	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d3FdXdYdZ[i][$].length != zLen
3057	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$][j].length != zLen
3057	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != $
3057	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
31682	255	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	k	int	0	NIL-FOR	$ < lastK
31682	255	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastK	int	0	NIL-FOR	k < $
3058	311	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	OutOfRangeException	$ == -1
3059	315	8	TricubicSplineInterpolatingFunction.java	value	j	int	0	OutOfRangeException	$ == -1
3060	319	8	TricubicSplineInterpolatingFunction.java	value	k	int	0	OutOfRangeException	$ == -1
3061	338	8	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ < val[0]
3061	338	8	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c < $[0]
31683	343	8	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	NIL-FOR	$ < max
31683	343	8	TricubicSplineInterpolatingFunction.java	searchIndex	max	int	0	NIL-FOR	i < $
3062	344	12	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	RET	c <= val[$]
3062	344	12	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ <= val[i]
3062	344	12	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c <= $[i]
31684	405	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < sz
31684	405	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	i < $
31685	408	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < sz
31685	408	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	j < $
31686	434	8	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	i	int	0	NIL-FOR	$ < N
31687	435	12	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	j	int	0	NIL-FOR	$ < N
31688	436	16	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	k	int	0	NIL-FOR	$ < N
3063	450	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
3063	450	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
3064	453	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
3064	453	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
3065	456	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ > 1
3065	456	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ < 0
31689	473	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	NIL-FOR	$ < N
31690	474	12	TricubicSplineInterpolatingFunction.java	value	j	int	0	NIL-FOR	$ < N
31691	475	16	TricubicSplineInterpolatingFunction.java	value	k	int	0	NIL-FOR	$ < N
3103	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3103	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3103	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3103	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	zval.$.length == 0
3103	38	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3103	38	8	TricubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3103	38	8	TricubicSplineInterpolator.java	interpolate	zval	double[]	0	NoDataException	$.length == 0
3103	38	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	NoDataException	$.length == 0
3104	41	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3104	41	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3104	41	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	xval.length != $.length
31721	58	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
31721	58	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3105	59	12	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3105	59	12	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3105	59	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3105	59	12	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i].length != yLen
31722	63	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
31722	63	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
3106	64	16	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i][j].length != zLen
3106	64	16	TricubicSplineInterpolator.java	interpolate	j	int	0	DimensionMismatchException	fval[i][$].length != zLen
3106	64	16	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$][j].length != zLen
3106	64	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	DimensionMismatchException	fval[i][j].length != $
3106	64	16	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
31723	68	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
31723	68	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
31724	81	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
31724	81	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
31725	88	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
31725	88	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
31726	95	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
31726	95	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
31727	103	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
31727	103	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
31728	105	12	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
31728	105	12	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
31729	107	16	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
31729	107	16	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
31730	119	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
31730	119	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
31731	121	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
31731	121	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
31732	123	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
31732	123	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
31733	133	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
31733	133	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
31734	135	12	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
31734	135	12	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
31735	137	16	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
31735	137	16	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
31736	146	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
31736	146	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
31737	149	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
31737	149	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
31738	152	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
31738	152	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
2425	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	THIS	UncorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != standardDeviation.$.length
2425	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != standardDeviation.length
2425	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	standardDeviation	double[]	0	DimensionMismatchException	mean.length != $.length
31407	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	THIS	UncorrelatedRandomVectorGenerator	0	NIL-FOR	i < random.$.length
31407	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < random.length
31407	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	random	double[]	0	NIL-FOR	i < $.length
1024	51	8	UniformIntegerDistribution.java	UniformIntegerDistribution	lower	int	0	NumberIsTooLargeException	$ >= upper
1024	51	8	UniformIntegerDistribution.java	UniformIntegerDistribution	upper	int	0	NumberIsTooLargeException	lower >= $
1025	62	8	UniformIntegerDistribution.java	probability	THIS	UniformIntegerDistribution	0	RET	x > $.upper
1025	62	8	UniformIntegerDistribution.java	probability	THIS	UniformIntegerDistribution	0	RET	x < $.lower
1025	62	8	UniformIntegerDistribution.java	probability	x	int	0	RET	$ > upper
1025	62	8	UniformIntegerDistribution.java	probability	x	int	0	RET	$ < lower
1026	70	8	UniformIntegerDistribution.java	cumulativeProbability	THIS	UniformIntegerDistribution	0	RET	x < $.lower
1026	70	8	UniformIntegerDistribution.java	cumulativeProbability	x	int	0	RET	$ < lower
1027	73	8	UniformIntegerDistribution.java	cumulativeProbability	THIS	UniformIntegerDistribution	0	RET	x > $.upper
1027	73	8	UniformIntegerDistribution.java	cumulativeProbability	x	int	0	RET	$ > upper
1028	72	8	UniformRealDistribution.java	UniformRealDistribution	lower	double	0	NumberIsTooLargeException	$ >= upper
1028	72	8	UniformRealDistribution.java	UniformRealDistribution	upper	double	0	NumberIsTooLargeException	lower >= $
1029	104	8	UniformRealDistribution.java	density	THIS	UniformRealDistribution	0	RET	x > $.upper
1029	104	8	UniformRealDistribution.java	density	THIS	UniformRealDistribution	0	RET	x < $.lower
1029	104	8	UniformRealDistribution.java	density	x	double	0	RET	$ > upper
1029	104	8	UniformRealDistribution.java	density	x	double	0	RET	$ < lower
1030	112	8	UniformRealDistribution.java	cumulativeProbability	THIS	UniformRealDistribution	0	RET	x <= $.lower
1030	112	8	UniformRealDistribution.java	cumulativeProbability	x	double	0	RET	$ <= lower
1031	115	8	UniformRealDistribution.java	cumulativeProbability	THIS	UniformRealDistribution	0	RET	x >= $.upper
1031	115	8	UniformRealDistribution.java	cumulativeProbability	x	double	0	RET	$ >= upper
31382	66	8	UnitSphereRandomVectorGenerator.java	nextVector	normSq	double	0	NIL-DOWHILE	$ > 1
31383	68	12	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
31383	68	12	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
31384	76	8	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
31384	76	8	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
1564	75	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	optimizer	BaseUnivariateOptimizer<FUNC>	0	NullArgumentException	$ == null
1564	75	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	generator	RandomGenerator	0	NullArgumentException	$ == null
1565	79	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1566	133	8	UnivariateMultiStartOptimizer.java	getOptima	THIS	UnivariateMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
30882	156	8	UnivariateMultiStartOptimizer.java	optimize	THIS	UnivariateMultiStartOptimizer	0	NIL-FOR	i < $.starts
30882	156	8	UnivariateMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1567	172	8	UnivariateMultiStartOptimizer.java	optimize	THIS	UnivariateMultiStartOptimizer	0	DEF	$.optima[0] == null
3102	85	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NumberIsTooSmallException	xval.$.length < $.extend
3102	85	8	UnivariatePeriodicInterpolator.java	interpolate	xval	double[]	0	NumberIsTooSmallException	$.length < extend
31719	95	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NIL-FOR	i < xval.$.length
31719	95	8	UnivariatePeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xval.length
31719	95	8	UnivariatePeriodicInterpolator.java	interpolate	xval	double[]	0	NIL-FOR	i < $.length
31720	102	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NIL-FOR	i < $.extend
31720	102	8	UnivariatePeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < extend
3147	50	8	UnivariateSolverUtils.java	solve	function	UnivariateFunction	0	NullArgumentException	$ == null
3148	73	8	UnivariateSolverUtils.java	solve	function	UnivariateFunction	0	NullArgumentException	$ == null
3149	99	8	UnivariateSolverUtils.java	forceSide	THIS	UnivariateSolverUtils	0	RET	allowedSolution == $.AllowedSolution.ANY_SIDE
3149	99	8	UnivariateSolverUtils.java	forceSide	allowedSolution	AllowedSolution	0	RET	$ == AllowedSolution.ANY_SIDE
31754	112	8	UnivariateSolverUtils.java	forceSide	remainingEval	int	0	NIL-WHILE	$ > 0
3150	114	12	UnivariateSolverUtils.java	forceSide	fLo	double	0	RET	$ <= 0
3150	114	12	UnivariateSolverUtils.java	forceSide	fLo	double	0	RET	$ >= 0
3150	114	12	UnivariateSolverUtils.java	forceSide	fHi	double	0	RET	$ <= 0
3150	114	12	UnivariateSolverUtils.java	forceSide	fHi	double	0	RET	$ >= 0
3151	122	12	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ < fHi
3151	122	12	UnivariateSolverUtils.java	forceSide	fHi	double	1	DEF	fLo < $
3152	124	16	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ >= 0
3153	129	19	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ > fHi
3153	129	19	UnivariateSolverUtils.java	forceSide	fHi	double	1	DEF	fLo > $
3154	131	16	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ <= 0
3155	143	12	UnivariateSolverUtils.java	forceSide	changeLo	boolean	0	DEF	$
3156	150	12	UnivariateSolverUtils.java	forceSide	changeHi	boolean	0	DEF	$
3157	246	8	UnivariateSolverUtils.java	bracket	function	UnivariateFunction	0	NullArgumentException	$ == null
3158	249	8	UnivariateSolverUtils.java	bracket	maximumIterations	int	0	NotStrictlyPositiveException	$ <= 0
31755	260	8	UnivariateSolverUtils.java	bracket	a	double	0	NIL-DOWHILE	$ > lowerBound
31755	260	8	UnivariateSolverUtils.java	bracket	b	double	0	NIL-DOWHILE	$ < upperBound
31755	260	8	UnivariateSolverUtils.java	bracket	fa	double	0	NIL-DOWHILE	$ * fb > 0.0
31755	260	8	UnivariateSolverUtils.java	bracket	fb	double	0	NIL-DOWHILE	fa * $ > 0.0
31755	260	8	UnivariateSolverUtils.java	bracket	numIterations	int	0	NIL-DOWHILE	$ < maximumIterations
31755	260	8	UnivariateSolverUtils.java	bracket	lowerBound	double	0	NIL-DOWHILE	a > $
31755	260	8	UnivariateSolverUtils.java	bracket	upperBound	double	0	NIL-DOWHILE	b < $
31755	260	8	UnivariateSolverUtils.java	bracket	maximumIterations	int	0	NIL-DOWHILE	numIterations < $
3159	270	8	UnivariateSolverUtils.java	bracket	fa	double	0	NoBracketingException	$ * fb > 0.0
3159	270	8	UnivariateSolverUtils.java	bracket	fb	double	0	NoBracketingException	fa * $ > 0.0
3160	305	8	UnivariateSolverUtils.java	isBracketing	function	UnivariateFunction	0	NullArgumentException	$ == null
3161	336	8	UnivariateSolverUtils.java	verifyInterval	lower	double	0	NumberIsTooLargeException	$ >= upper
3161	336	8	UnivariateSolverUtils.java	verifyInterval	upper	double	0	NumberIsTooLargeException	lower >= $
3162	371	8	UnivariateSolverUtils.java	verifyBracketing	function	UnivariateFunction	0	NullArgumentException	$ == null
3163	375	8	UnivariateSolverUtils.java	verifyBracketing	THIS	UnivariateSolverUtils	0	NoBracketingException	$.isBracketing(function, lower, upper)
3163	375	8	UnivariateSolverUtils.java	verifyBracketing	function	UnivariateFunction	0	NoBracketingException	isBracketing($, lower, upper)
3163	375	8	UnivariateSolverUtils.java	verifyBracketing	lower	double	0	NoBracketingException	isBracketing(function, $, upper)
3163	375	8	UnivariateSolverUtils.java	verifyBracketing	upper	double	0	NoBracketingException	isBracketing(function, lower, $)
31408	139	8	ValueServer.java	fill	THIS	ValueServer	0	NIL-FOR	i < values.$.length
31408	139	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < values.length
31408	139	8	ValueServer.java	fill	values	double[]	0	NIL-FOR	i < $.length
31409	154	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < length
31409	154	8	ValueServer.java	fill	length	int	0	NIL-FOR	i < $
2426	262	8	ValueServer.java	resetReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
2427	279	8	ValueServer.java	closeReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
2428	353	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	MathIllegalStateException	$.empiricalDistribution == null
2428	353	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	MathIllegalStateException	$.empiricalDistribution.getBinStats().size() == 0
2429	380	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	$.filePointer == null
2430	383	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	MathIllegalStateException	(str = $.filePointer.readLine()) == null
2430	383	8	ValueServer.java	getNextReplay	str	String	0	MathIllegalStateException	($ = filePointer.readLine()) == null
2431	387	12	ValueServer.java	getNextReplay	THIS	ValueServer	0	MathIllegalStateException	(str = $.filePointer.readLine()) == null
2431	387	12	ValueServer.java	getNextReplay	str	String	0	MathIllegalStateException	($ = filePointer.readLine()) == null
1950	169	8	Variance.java	increment	THIS	Variance	0	DEF	$.incMoment
1951	179	12	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 0
1952	181	19	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 1
1953	184	16	Variance.java	getResult	THIS	Variance	1	RET	$.isBiasCorrected
1954	204	8	Variance.java	clear	THIS	Variance	0	DEF	$.incMoment
1955	227	8	Variance.java	evaluate	values	double[]	0	NullArgumentException	$ == null
1956	258	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
1956	258	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1956	258	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
1956	258	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
1957	260	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1958	262	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
1959	318	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights,begin, length)
1959	318	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights,begin, length)
1959	318	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $,begin, length)
1959	318	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights,$, length)
1959	318	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights,begin, $)
1960	320	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1961	322	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
1962	404	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
1962	404	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1962	404	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
1962	404	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
1963	405	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1964	407	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
31204	411	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
31204	411	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
31204	411	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1965	417	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
1966	506	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights, begin, length)
1966	506	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length)
1966	506	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length)
1966	506	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights, $, length)
1966	506	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights, begin, $)
1967	507	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1968	509	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
31205	513	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
31205	513	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
31205	513	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
31206	520	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
31206	520	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
31206	520	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1969	524	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
721	188	8	Vector1D.java	normalize	s	double	0	MathArithmeticException	$ == 0
722	305	8	Vector1D.java	equals	THIS	Vector1D	0	RET	$ == other
722	305	8	Vector1D.java	equals	other	Object	0	RET	this == $
723	309	8	Vector1D.java	equals	other	Object	0	RET	$ instanceof Vector1D
724	311	12	Vector1D.java	equals	rhs	Vector1D	0	RET	$.isNaN()
725	329	8	Vector1D.java	hashCode	THIS	Vector1D	0	RET	$.isNaN()
719	115	8	Vector1DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
720	127	8	Vector1DFormat.java	parse	coordinates	double[]	0	RET	$ == null
763	80	8	Vector2D.java	Vector2D	THIS	Vector2D	0	DimensionMismatchException	v.$.length != 2
763	80	8	Vector2D.java	Vector2D	v	double[]	0	DimensionMismatchException	$.length != 2
764	226	8	Vector2D.java	normalize	s	double	0	MathArithmeticException	$ == 0
765	347	8	Vector2D.java	equals	THIS	Vector2D	0	RET	$ == other
765	347	8	Vector2D.java	equals	other	Object	0	RET	this == $
766	351	8	Vector2D.java	equals	other	Object	0	RET	$ instanceof Vector2D
767	353	12	Vector2D.java	equals	rhs	Vector2D	0	RET	$.isNaN()
768	371	8	Vector2D.java	hashCode	THIS	Vector2D	0	RET	$.isNaN()
733	118	8	Vector2DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
734	130	8	Vector2DFormat.java	parse	coordinates	double[]	0	RET	$ == null
694	108	8	Vector3D.java	Vector3D	THIS	Vector3D	0	DimensionMismatchException	v.$.length != 3
694	108	8	Vector3D.java	Vector3D	v	double[]	0	DimensionMismatchException	$.length != 3
695	298	8	Vector3D.java	normalize	s	double	0	MathArithmeticException	$ == 0
696	322	8	Vector3D.java	orthogonal	threshold	double	0	MathArithmeticException	$ == 0
697	326	8	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x >= -threshold
697	326	8	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x <= threshold
697	326	8	Vector3D.java	orthogonal	threshold	double	1	RET	x >= -$
697	326	8	Vector3D.java	orthogonal	threshold	double	1	RET	x <= $
698	329	15	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y >= -threshold
698	329	15	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y <= threshold
698	329	15	Vector3D.java	orthogonal	threshold	double	0	RET	y >= -$
698	329	15	Vector3D.java	orthogonal	threshold	double	0	RET	y <= $
699	352	8	Vector3D.java	angle	normProduct	double	0	MathArithmeticException	$ == 0
700	358	8	Vector3D.java	angle	dot	double	0	RET	$ < -threshold
700	358	8	Vector3D.java	angle	dot	double	0	RET	$ > threshold
700	358	8	Vector3D.java	angle	threshold	double	0	RET	dot < -$
700	358	8	Vector3D.java	angle	threshold	double	0	RET	dot > $
701	361	12	Vector3D.java	angle	dot	double	0	RET	$ >= 0
702	414	8	Vector3D.java	equals	THIS	Vector3D	0	RET	$ == other
702	414	8	Vector3D.java	equals	other	Object	0	RET	this == $
703	418	8	Vector3D.java	equals	other	Object	0	RET	$ instanceof Vector3D
704	420	12	Vector3D.java	equals	rhs	Vector3D	0	RET	$.isNaN()
705	438	8	Vector3D.java	hashCode	THIS	Vector3D	0	RET	$.isNaN()
643	130	8	Vector3DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
644	147	8	Vector3DFormat.java	parse	coordinates	double[]	0	RET	$ == null
30099	202	8	VectorFormat.java	format	THIS	VectorFormat	0	NIL-FOR	i < coordinates.$.length
30099	202	8	VectorFormat.java	format	i	int	0	NIL-FOR	$ < coordinates.length
30099	202	8	VectorFormat.java	format	coordinates	double	0	NIL-FOR	i < $.length
633	203	12	VectorFormat.java	format	i	int	0	DEF	$ > 0
634	247	8	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedPrefix, pos)
634	247	8	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
634	247	8	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
30100	251	8	VectorFormat.java	parseCoordinates	i	int	0	NIL-FOR	$ < dimension
30100	251	8	VectorFormat.java	parseCoordinates	dimension	int	0	NIL-FOR	i < $
635	257	12	VectorFormat.java	parseCoordinates	i	int	0	RET	$ > 0
636	258	16	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSeparator, pos)
636	258	16	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSeparator, pos)
636	258	16	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSeparator, $)
637	268	12	VectorFormat.java	parseCoordinates	c	Number	0	RET	$ == null
638	282	8	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSuffix, pos)
638	282	8	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
638	282	8	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
1980	66	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	DimensionMismatchException	v.$.length != $.sums.$.length
1980	66	8	VectorialCovariance.java	increment	v	double[]	0	DimensionMismatchException	$.length != sums.length
31211	70	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	NIL-FOR	i < v.$.length
31211	70	8	VectorialCovariance.java	increment	i	int	0	NIL-FOR	$ < v.length
31211	70	8	VectorialCovariance.java	increment	v	double[]	0	NIL-FOR	i < $.length
31212	72	12	VectorialCovariance.java	increment	j	int	0	NIL-FOR	$ <= i
31212	72	12	VectorialCovariance.java	increment	i	int	0	NIL-FOR	j <= $
1981	88	8	VectorialCovariance.java	getResult	THIS	VectorialCovariance	0	DEF	$.n > 1
31213	91	12	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	$ < dimension
31213	91	12	VectorialCovariance.java	getResult	dimension	int	0	NIL-FOR	i < $
31214	92	16	VectorialCovariance.java	getResult	j	int	0	NIL-FOR	$ <= i
31214	92	16	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	j <= $
1982	136	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$ == obj
1982	136	8	VectorialCovariance.java	equals	obj	Object	0	RET	this == $
1983	139	8	VectorialCovariance.java	equals	obj	Object	0	RET	$ instanceof VectorialCovariance
1984	143	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.isBiasCorrected != other.$.isBiasCorrected
1984	143	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	isBiasCorrected != $.isBiasCorrected
1985	146	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.n != other.$.n
1985	146	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	n != $.n
1986	149	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.productsSums, other.$.productsSums)
1986	149	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(productsSums, $.productsSums)
1987	152	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.sums, other.$.sums)
1987	152	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(sums, $.sums)
31217	42	8	VectorialMean.java	VectorialMean	i	int	0	NIL-FOR	$ < dimension
31217	42	8	VectorialMean.java	VectorialMean	dimension	int	0	NIL-FOR	i < $
2003	53	8	VectorialMean.java	increment	THIS	VectorialMean	0	DimensionMismatchException	v.$.length != $.means.$.length
2003	53	8	VectorialMean.java	increment	v	double[]	0	DimensionMismatchException	$.length != means.length
31218	56	8	VectorialMean.java	increment	THIS	VectorialMean	0	NIL-FOR	i < v.$.length
31218	56	8	VectorialMean.java	increment	i	int	0	NIL-FOR	$ < v.length
31218	56	8	VectorialMean.java	increment	v	double[]	0	NIL-FOR	i < $.length
31219	67	8	VectorialMean.java	getResult	THIS	VectorialMean	0	NIL-FOR	i < result.$.length
31219	67	8	VectorialMean.java	getResult	i	int	0	NIL-FOR	$ < result.length
31219	67	8	VectorialMean.java	getResult	result	double[]	0	NIL-FOR	i < $.length
2004	93	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	$ == obj
2004	93	8	VectorialMean.java	equals	obj	Object	0	RET	this == $
2005	96	8	VectorialMean.java	equals	obj	Object	0	RET	$ instanceof VectorialMean
2006	100	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	Arrays.equals($.means, other.$.means)
2006	100	8	VectorialMean.java	equals	other	VectorialMean	0	RET	Arrays.equals(means, $.means)
966	98	8	WeibullDistribution.java	WeibullDistribution	alpha	double	0	NotStrictlyPositiveException	$ <= 0
967	102	8	WeibullDistribution.java	WeibullDistribution	beta	double	0	NotStrictlyPositiveException	$ <= 0
968	142	8	WeibullDistribution.java	density	x	double	0	RET	$ < 0
969	162	8	WeibullDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
970	179	8	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
970	179	8	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
971	181	15	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
972	183	16	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
973	210	8	WeibullDistribution.java	getNumericalMean	THIS	WeibullDistribution	0	DEF	$.numericalMeanIsCalculated
974	236	8	WeibullDistribution.java	getNumericalVariance	THIS	WeibullDistribution	0	DEF	$.numericalVarianceIsCalculated
2083	78	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	NullArgumentException	$ == null
2083	78	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	NullArgumentException	$ == null
2084	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	NoDataException	x.$.length == 0
2084	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	NoDataException	y.$.length == 0
2084	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	NoDataException	$.length == 0
2084	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	NoDataException	$.length == 0
2085	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	DimensionMismatchException	y.$.length != x.$.length
2085	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	DimensionMismatchException	y.length != $.length
2085	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	DimensionMismatchException	$.length != x.length
31230	102	8	WilcoxonSignedRankTest.java	calculateDifferences	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < x.$.length
31230	102	8	WilcoxonSignedRankTest.java	calculateDifferences	i	int	0	NIL-FOR	$ < x.length
31230	102	8	WilcoxonSignedRankTest.java	calculateDifferences	x	double[]	0	NIL-FOR	i < $.length
2086	120	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NullArgumentException	$ == null
2087	124	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTest	0	NoDataException	z.$.length == 0
2087	124	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NoDataException	$.length == 0
31231	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < z.$.length
31231	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	i	int	0	NIL-FOR	$ < z.length
31231	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NIL-FOR	i < $.length
31232	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < z.$.length
31232	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	i	int	0	NIL-FOR	$ < z.length
31232	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	z	double[]	0	NIL-FOR	i < $.length
2088	187	12	WilcoxonSignedRankTest.java	wilcoxonSignedRank	i	int	0	DEF	z[$] > 0
2088	187	12	WilcoxonSignedRankTest.java	wilcoxonSignedRank	z	double[]	0	DEF	$[i] > 0
31233	215	8	WilcoxonSignedRankTest.java	calculateExactPValue	i	int	0	NIL-FOR	$ < m
31233	215	8	WilcoxonSignedRankTest.java	calculateExactPValue	m	int	0	NIL-FOR	i < $
31234	219	12	WilcoxonSignedRankTest.java	calculateExactPValue	j	int	0	NIL-FOR	$ < N
2089	222	16	WilcoxonSignedRankTest.java	calculateExactPValue	j	int	0	DEF	((i >> $) & 1) == 1
2089	222	16	WilcoxonSignedRankTest.java	calculateExactPValue	i	int	0	DEF	(($ >> j) & 1) == 1
2090	227	12	WilcoxonSignedRankTest.java	calculateExactPValue	rankSum	int	0	DEF	$ >= Wmax
2090	227	12	WilcoxonSignedRankTest.java	calculateExactPValue	Wmax	double	0	DEF	rankSum >= $
2091	313	8	WilcoxonSignedRankTest.java	wilcoxonSignedRankTest	exactPValue	boolean	0	NumberIsTooLargeException	$
2092	317	8	WilcoxonSignedRankTest.java	wilcoxonSignedRankTest	exactPValue	boolean	1	RET	$
1091	63	8	ZipfDistribution.java	ZipfDistribution	numberOfElements	int	0	NotStrictlyPositiveException	$ <= 0
1092	67	8	ZipfDistribution.java	ZipfDistribution	exponent	double	0	NotStrictlyPositiveException	$ <= 0
1093	96	8	ZipfDistribution.java	probability	THIS	ZipfDistribution	0	RET	x > $.numberOfElements
1093	96	8	ZipfDistribution.java	probability	x	int	0	RET	$ <= 0
1093	96	8	ZipfDistribution.java	probability	x	int	0	RET	$ > numberOfElements
1094	105	8	ZipfDistribution.java	cumulativeProbability	x	int	1	RET	$ <= 0
1095	107	15	ZipfDistribution.java	cumulativeProbability	THIS	ZipfDistribution	0	RET	x >= $.numberOfElements
1095	107	15	ZipfDistribution.java	cumulativeProbability	x	int	0	RET	$ >= numberOfElements
1096	125	8	ZipfDistribution.java	getNumericalMean	THIS	ZipfDistribution	0	DEF	$.numericalMeanIsCalculated
1097	159	8	ZipfDistribution.java	getNumericalVariance	THIS	ZipfDistribution	0	DEF	$.numericalVarianceIsCalculated
30140	193	8	ZipfDistribution.java	generalizedHarmonic	k	int	0	NIL-FOR	$ > 0
