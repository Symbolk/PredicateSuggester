id	line	column	filename	methodname	varname	vartype	else	return	right
532	62	8	AVLTree.java	insert	element	T	0	DEF	$ != null
533	63	12	AVLTree.java	insert	THIS	AVLTree	1	DEF	$.top == null
534	82	8	AVLTree.java	delete	element	T	0	RET	$ != null
20923	83	12	AVLTree.java	delete	node	Node	0	NIL-FOR	$ != null
535	86	16	AVLTree.java	delete	THIS	AVLTree	1	RET	node.$.element == element
535	86	16	AVLTree.java	delete	node	Node	1	RET	$.element == element
535	86	16	AVLTree.java	delete	element	T	1	RET	node.element == $
536	89	23	AVLTree.java	delete	THIS	AVLTree	0	RET	node.$.element.compareTo(element) > 0
536	89	23	AVLTree.java	delete	node	Node	0	RET	$.element.compareTo(element) > 0
536	89	23	AVLTree.java	delete	element	T	0	RET	node.element.compareTo($) > 0
20924	153	8	AVLTree.java	getNotSmaller	node	Node	0	NIL-FOR	$ != null
537	154	12	AVLTree.java	getNotSmaller	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) < 0
537	154	12	AVLTree.java	getNotSmaller	node	Node	1	RET	$.element.compareTo(reference) < 0
537	154	12	AVLTree.java	getNotSmaller	reference	T	1	RET	node.element.compareTo($) < 0
538	155	16	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.right == null
538	155	16	AVLTree.java	getNotSmaller	node	Node	0	RET	$.right == null
539	161	16	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.left == null
539	161	16	AVLTree.java	getNotSmaller	node	Node	0	RET	$.left == null
20925	184	8	AVLTree.java	getNotLarger	node	Node	0	NIL-FOR	$ != null
540	185	12	AVLTree.java	getNotLarger	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) > 0
540	185	12	AVLTree.java	getNotLarger	node	Node	1	RET	$.element.compareTo(reference) > 0
540	185	12	AVLTree.java	getNotLarger	reference	T	1	RET	node.element.compareTo($) > 0
541	186	16	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.left == null
541	186	16	AVLTree.java	getNotLarger	node	Node	0	RET	$.left == null
542	192	16	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.right == null
542	192	16	AVLTree.java	getNotLarger	node	Node	0	RET	$.right == null
1329	76	8	AbstractFieldMatrix.java	AbstractFieldMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ <= 0
1330	80	8	AbstractFieldMatrix.java	AbstractFieldMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ <= 0
1331	97	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NullArgumentException	$ == null
1332	100	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1332	100	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$.length == 0
1333	103	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d[0].length == 0
1333	103	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$[0].length == 0
1334	118	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1334	118	8	AbstractFieldMatrix.java	extractField	d	T[]	0	NoDataException	$.length == 0
1335	139	8	AbstractFieldMatrix.java	buildArray	columns	int	0	RET	$ < 0
21369	145	8	AbstractFieldMatrix.java	buildArray	THIS	AbstractFieldMatrix	0	NIL-FOR	i < array.$.length
21369	145	8	AbstractFieldMatrix.java	buildArray	i	int	0	NIL-FOR	$ < array.length
21369	145	8	AbstractFieldMatrix.java	buildArray	array	T[][]	0	NIL-FOR	i < $.length
21370	187	8	AbstractFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
21370	187	8	AbstractFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
21371	188	12	AbstractFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
21371	188	12	AbstractFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
21372	204	8	AbstractFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
21372	204	8	AbstractFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
21373	205	12	AbstractFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
21373	205	12	AbstractFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
21374	219	8	AbstractFieldMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
21374	219	8	AbstractFieldMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
21375	220	12	AbstractFieldMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
21375	220	12	AbstractFieldMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
21376	233	8	AbstractFieldMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
21376	233	8	AbstractFieldMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
21377	234	12	AbstractFieldMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
21377	234	12	AbstractFieldMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
21378	251	8	AbstractFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
21378	251	8	AbstractFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
21379	252	12	AbstractFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
21379	252	12	AbstractFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
21380	254	16	AbstractFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
21380	254	16	AbstractFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1336	271	8	AbstractFieldMatrix.java	power	p	int	0	IllegalArgumentException	$ < 0
1337	275	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NonSquareMatrixException	$.isSquare()
1338	279	8	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 0
1339	283	8	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 1
21381	300	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
21381	300	8	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
21381	300	8	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1340	301	12	AbstractFieldMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1340	301	12	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
21382	312	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
21382	312	8	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
21382	312	8	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
21383	331	8	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	i < data.$.length
21383	331	8	AbstractFieldMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
21383	331	8	AbstractFieldMatrix.java	getData	data	T[][]	0	NIL-FOR	i < $.length
21384	333	12	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	j < dataI.$.length
21384	333	12	AbstractFieldMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
21384	333	12	AbstractFieldMatrix.java	getData	dataI	T[]	0	NIL-FOR	j < $.length
21385	348	8	AbstractFieldMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
21385	348	8	AbstractFieldMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
21386	349	12	AbstractFieldMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
21386	349	12	AbstractFieldMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1341	390	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1341	390	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1341	390	8	AbstractFieldMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1341	390	8	AbstractFieldMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1341	390	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
1341	390	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
1342	429	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1342	429	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < selectedColumns.$.length
1342	429	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1342	429	8	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	MatrixDimensionMismatchException	destination[0].length < $.length
1342	429	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
1342	429	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < selectedColumns.length
21387	438	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	i < selectedRows.$.length
21387	438	8	AbstractFieldMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
21387	438	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
21388	440	12	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	j < selectedColumns.$.length
21388	440	12	AbstractFieldMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
21388	440	12	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1343	449	8	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	NullArgumentException	$ == null
1344	453	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1345	458	8	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
21389	462	8	AbstractFieldMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
21389	462	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1346	463	12	AbstractFieldMatrix.java	setSubMatrix	THIS	AbstractFieldMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1346	463	12	AbstractFieldMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1346	463	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1346	463	12	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[r].length != nCols
21390	473	8	AbstractFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
21390	473	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
21391	474	12	AbstractFieldMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
21391	474	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
21392	485	8	AbstractFieldMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
21392	485	8	AbstractFieldMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1347	497	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1347	497	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1347	497	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
21393	503	8	AbstractFieldMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
21393	503	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
21394	515	8	AbstractFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
21394	515	8	AbstractFieldMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1348	527	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1348	527	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1348	527	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
21395	533	8	AbstractFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
21395	533	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1349	548	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1349	548	8	AbstractFieldMatrix.java	setRowVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nCols
21396	552	8	AbstractFieldMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
21396	552	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1350	567	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1350	567	8	AbstractFieldMatrix.java	setColumnVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nRows
21397	571	8	AbstractFieldMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
21397	571	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
21398	582	8	AbstractFieldMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
21398	582	8	AbstractFieldMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1351	594	8	AbstractFieldMatrix.java	setRow	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1351	594	8	AbstractFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1351	594	8	AbstractFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
21399	597	8	AbstractFieldMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
21399	597	8	AbstractFieldMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
21400	608	8	AbstractFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
21400	608	8	AbstractFieldMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1352	620	8	AbstractFieldMatrix.java	setColumn	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1352	620	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1352	620	8	AbstractFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
21401	623	8	AbstractFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
21401	623	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1353	671	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1353	671	8	AbstractFieldMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
21402	675	8	AbstractFieldMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
21402	675	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1354	686	8	AbstractFieldMatrix.java	operate	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1354	686	8	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1354	686	8	AbstractFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
21403	691	8	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
21403	691	8	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
21404	693	12	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
21404	693	12	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1355	709	12	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1355	709	12	AbstractFieldMatrix.java	operate	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nCols
21405	714	12	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
21405	714	12	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
21406	716	16	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
21406	716	16	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1356	731	8	AbstractFieldMatrix.java	preMultiply	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1356	731	8	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1356	731	8	AbstractFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
21407	736	8	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
21407	736	8	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
21408	738	12	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
21408	738	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1357	754	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1357	754	12	AbstractFieldMatrix.java	preMultiply	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nRows
21409	759	12	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
21409	759	12	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
21410	761	16	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
21410	761	16	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
21411	776	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
21411	776	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
21412	777	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
21412	777	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
21413	791	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
21413	791	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
21414	792	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
21414	792	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
21415	806	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
21415	806	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
21416	807	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
21416	807	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
21417	823	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
21417	823	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
21418	824	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
21418	824	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
21419	836	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
21419	836	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
21420	837	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
21420	837	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
21421	851	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
21421	851	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
21422	852	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
21422	852	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
21423	866	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
21423	866	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
21424	867	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
21424	867	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
21425	883	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
21425	883	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
21426	884	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
21426	884	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
21427	928	8	AbstractFieldMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
21427	928	8	AbstractFieldMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
1358	929	12	AbstractFieldMatrix.java	toString	i	int	0	DEF	$ > 0
21428	933	12	AbstractFieldMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
21428	933	12	AbstractFieldMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
1359	934	16	AbstractFieldMatrix.java	toString	j	int	0	DEF	$ > 0
1360	956	8	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	object == $
1360	956	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ == this
1361	959	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ instanceof FieldMatrix<?> == false
1362	965	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getColumnDimension() != nCols
1362	965	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getRowDimension() != nRows
1362	965	8	AbstractFieldMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1362	965	8	AbstractFieldMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
21429	968	8	AbstractFieldMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
21429	968	8	AbstractFieldMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
21430	969	12	AbstractFieldMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
21430	969	12	AbstractFieldMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1363	970	16	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	$.getEntry(row, col).equals(m.getEntry(row, col))
1363	970	16	AbstractFieldMatrix.java	equals	col	int	0	RET	getEntry(row, $).equals(m.getEntry(row, $))
1363	970	16	AbstractFieldMatrix.java	equals	row	int	0	RET	getEntry($, col).equals(m.getEntry($, col))
1363	970	16	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	getEntry(row, col).equals($.getEntry(row, col))
21431	990	8	AbstractFieldMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
21431	990	8	AbstractFieldMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
21432	991	12	AbstractFieldMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
21432	991	12	AbstractFieldMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
1364	1005	8	AbstractFieldMatrix.java	checkRowIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1364	1005	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= getRowDimension()
1364	1005	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1365	1018	8	AbstractFieldMatrix.java	checkColumnIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1365	1018	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1365	1018	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= getColumnDimension()
1366	1040	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1366	1040	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1367	1047	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1367	1047	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1368	1064	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1368	1064	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1369	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedColumns.$.length == 0
1369	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedRows.$.length == 0
1369	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1369	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1370	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1370	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1370	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1370	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1371	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1371	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1371	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1371	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1372	1119	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	THIS	AbstractFieldMatrix	0	DimensionMismatchException	$.getColumnDimension() != m.getRowDimension()
1372	1119	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	m	FieldMatrix<T>	0	DimensionMismatchException	getColumnDimension() != $.getRowDimension()
896	120	8	AbstractFormat.java	setDenominatorFormat	format	NumberFormat	0	NullArgumentException	$ == null
897	132	8	AbstractFormat.java	setNumeratorFormat	format	NumberFormat	0	NullArgumentException	$ == null
898	162	9	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
898	162	9	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
20956	164	13	AbstractFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
20956	164	13	AbstractFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
20956	164	13	AbstractFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
899	169	13	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
899	169	13	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
947	75	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	int	0	NumberIsTooLargeException	x1 < $
947	75	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	int	0	NumberIsTooLargeException	$ < x0
948	94	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
948	94	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
949	99	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
950	102	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	1	RET	$ == Integer.MIN_VALUE
951	103	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	THIS	AbstractIntegerDistribution	0	RET	$.checkedCumulativeProbability(lower) >= p
951	103	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	0	RET	checkedCumulativeProbability($) >= p
951	103	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	checkedCumulativeProbability(lower) >= $
952	112	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
953	122	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	0	DEF	$
954	125	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	tmp	double	0	DEF	$ > lower
954	125	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	0	DEF	tmp > $
955	130	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	tmp	double	0	DEF	$ < upper
955	130	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	upper	int	0	DEF	tmp < $
20958	151	8	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	lower	int	0	NIL-WHILE	$ + 1 < upper
20958	151	8	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	upper	int	0	NIL-WHILE	lower + 1 < $
956	153	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	xm	int	0	DEF	$ < lower
956	153	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	xm	int	0	DEF	$ > upper
956	153	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	lower	int	0	DEF	xm < $
956	153	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	upper	int	0	DEF	xm > $
957	163	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	pm	double	1	DEF	$ >= p
957	163	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	p	double	1	DEF	pm >= $
958	196	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
20959	201	8	AbstractIntegerDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
20959	201	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
959	222	8	AbstractIntegerDistribution.java	checkedCumulativeProbability	result	double	0	MathInternalError	Double.isNaN($)
2778	215	8	AbstractIntegrator.java	integrate	THIS	AbstractIntegrator	0	DimensionMismatchException	y0.$.length != equations.getDimension()
2778	215	8	AbstractIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	0	DimensionMismatchException	y0.length != $.getDimension()
2778	215	8	AbstractIntegrator.java	integrate	y0	double[]	0	DimensionMismatchException	$.length != equations.getDimension()
2779	218	8	AbstractIntegrator.java	integrate	THIS	AbstractIntegrator	0	DimensionMismatchException	y.$.length != equations.getDimension()
2779	218	8	AbstractIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	0	DimensionMismatchException	y.length != $.getDimension()
2779	218	8	AbstractIntegrator.java	integrate	y	double[]	0	DimensionMismatchException	$.length != equations.getDimension()
2780	297	12	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.statesInitialized
2781	316	16	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.state.evaluateStep(interpolator)
2781	316	16	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	state.evaluateStep($)
22520	322	12	AbstractIntegrator.java	acceptStep	occuringEvents	SortedSet<EventState>	0	NIL-WHILE	$.isEmpty()
2782	345	16	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	RET	$.isLastStep
2783	354	16	AbstractIntegrator.java	acceptStep	currentEvent	EventState	0	RET	$.reset(eventT, eventY)
2783	354	16	AbstractIntegrator.java	acceptStep	eventT	double	0	RET	currentEvent.reset($, eventY)
2783	354	16	AbstractIntegrator.java	acceptStep	eventY	double[]	0	RET	currentEvent.reset(eventT, $)
2784	372	16	AbstractIntegrator.java	acceptStep	currentEvent	EventState	0	DEF	$.evaluateStep(interpolator)
2784	372	16	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	currentEvent.evaluateStep($)
2785	407	8	AbstractIntegrator.java	sanityChecks	threshold	double	0	NumberIsTooSmallException	dt <= $
2785	407	8	AbstractIntegrator.java	sanityChecks	dt	double	0	NumberIsTooSmallException	$ <= threshold
1750	113	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	$.weightedResidualJacobian.$.length != $.rows
21874	119	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
21874	119	8	AbstractLeastSquaresOptimizer.java	updateJacobian	i	int	0	NIL-FOR	$ < rows
21875	122	12	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
21875	122	12	AbstractLeastSquaresOptimizer.java	updateJacobian	j	int	0	NIL-FOR	$ < cols
1751	138	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	$.objective.$.length != $.rows
21876	146	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
21876	146	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	i	int	0	NIL-FOR	$ < rows
21877	212	8	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.cols
21877	212	8	AbstractLeastSquaresOptimizer.java	getCovariances	i	int	0	NIL-FOR	$ < cols
21878	213	12	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
21878	213	12	AbstractLeastSquaresOptimizer.java	getCovariances	j	int	0	NIL-FOR	$ < cols
21879	215	16	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	k < $.rows
21879	215	16	AbstractLeastSquaresOptimizer.java	getCovariances	k	int	0	NIL-FOR	$ < rows
1752	260	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NumberIsTooSmallException	$.rows <= $.cols
21880	267	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < errors.$.length
21880	267	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
21880	267	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
21881	289	8	AbstractLeastSquaresOptimizer.java	getSigma	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < sig.$.length
21881	289	8	AbstractLeastSquaresOptimizer.java	getSigma	i	int	0	NIL-FOR	$ < sig.length
21881	289	8	AbstractLeastSquaresOptimizer.java	getSigma	sig	double[]	0	NIL-FOR	i < $.length
1683	127	8	AbstractLinearOptimizer.java	incrementIterationsCounter	THIS	AbstractLinearOptimizer	0	MaxCountExceededException	++$.iterations > $.maxIterations
2374	116	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	NullArgumentException	$ == null
2375	119	8	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	data.$.length != nobs * (nvars + 1)
2375	119	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	DimensionMismatchException	$.length != nobs * (nvars + 1)
2375	119	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	DimensionMismatchException	data.length != $ * (nvars + 1)
2375	119	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	DimensionMismatchException	data.length != nobs * ($ + 1)
2376	122	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NumberIsTooSmallException	$ <= nvars
2376	122	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	NumberIsTooSmallException	nobs <= $
22272	129	8	AbstractMultipleLinearRegression.java	newSampleData	i	int	0	NIL-FOR	$ < nobs
22272	129	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NIL-FOR	i < $
2377	131	12	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	$.noIntercept
22273	134	12	AbstractMultipleLinearRegression.java	newSampleData	j	int	0	NIL-FOR	$ < cols
22273	134	12	AbstractMultipleLinearRegression.java	newSampleData	cols	int	0	NIL-FOR	j < $
2378	150	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	NullArgumentException	$ == null
2379	153	8	AbstractMultipleLinearRegression.java	newYSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	y.$.length == 0
2379	153	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	NoDataException	$.length == 0
2380	185	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NullArgumentException	$ == null
2381	188	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	x.$.length == 0
2381	188	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NoDataException	$.length == 0
2382	191	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	1	DEF	$.noIntercept
22274	196	12	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	NIL-FOR	i < x.$.length
22274	196	12	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	NIL-FOR	$ < x.length
22274	196	12	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NIL-FOR	i < $.length
2383	197	16	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x[i].length != nVars
2383	197	16	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	DimensionMismatchException	x[$].length != nVars
2383	197	16	AbstractMultipleLinearRegression.java	newXSampleData	nVars	int	0	DimensionMismatchException	x[i].length != $
2383	197	16	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	DimensionMismatchException	$[i].length != nVars
2384	226	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	NullArgumentException	$ == null
2384	226	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	NullArgumentException	$ == null
2385	229	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x.$.length != y.$.length
2385	229	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DimensionMismatchException	$.length != y.length
2385	229	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	DimensionMismatchException	x.length != $.length
2386	232	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	x.$.length == 0
2386	232	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	NoDataException	$.length == 0
2387	235	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	MathIllegalArgumentException	x[0].length + 1 > x.$.length
2387	235	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	MathIllegalArgumentException	$[0].length + 1 > $.length
2388	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x.$.length != covariance.$.length
2388	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	x	double[][]	0	DimensionMismatchException	$.length != covariance.length
2388	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DimensionMismatchException	x.length != $.length
2389	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	NonSquareMatrixException	covariance.$.length > 0
2389	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	NonSquareMatrixException	covariance.$.length != covariance[0].length
2389	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	NonSquareMatrixException	$.length > 0
2389	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	NonSquareMatrixException	$.length != $[0].length
22275	293	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	i	int	0	NIL-FOR	$ < length
22275	293	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	length	int	0	NIL-FOR	i < $
1064	66	8	AbstractMultivariateRealDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
20974	71	8	AbstractMultivariateRealDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
20974	71	8	AbstractMultivariateRealDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
2825	62	12	AbstractParameterizable.java	isSupported	THIS	AbstractParameterizable	0	RET	$.supportedName.equals(name)
2825	62	12	AbstractParameterizable.java	isSupported	name	String	0	RET	supportedName.equals($)
2826	76	8	AbstractParameterizable.java	complainIfNotSupported	THIS	AbstractParameterizable	0	MathIllegalArgumentException	$.isSupported(name)
2826	76	8	AbstractParameterizable.java	complainIfNotSupported	name	String	0	MathIllegalArgumentException	isSupported($)
22302	108	8	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	NIL-WHILE	bytesOut < bytes.$.length
22302	108	8	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	NIL-WHILE	$ < bytes.length
22302	108	8	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	bytesOut < $.length
22303	110	10	AbstractRandomGenerator.java	nextBytes	i	int	0	NIL-FOR	$ < 3
2459	111	14	AbstractRandomGenerator.java	nextBytes	i	int	0	DEF	$ > 0
2460	115	14	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	RET	bytesOut == bytes.$.length
2460	115	14	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	RET	$ == bytes.length
2460	115	14	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	RET	bytesOut == $.length
2461	157	8	AbstractRandomGenerator.java	nextInt	n	int	0	NotStrictlyPositiveException	$ <= 0
2462	253	8	AbstractRandomGenerator.java	nextGaussian	THIS	AbstractRandomGenerator	0	RET	Double.isNaN($.cachedNormalDeviate)
22304	261	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	NIL-WHILE	$ >=1
2463	266	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	DEF	$ != 0
1093	106	8	AbstractRealDistribution.java	probability	x0	double	0	NumberIsTooLargeException	$ > x1
1093	106	8	AbstractRealDistribution.java	probability	x1	double	0	NumberIsTooLargeException	x0 > $
1094	151	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
1094	151	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1095	156	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
1096	161	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
1097	171	8	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	DEF	$ == Double.NEGATIVE_INFINITY
1098	172	12	AbstractRealDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	1	DEF	$
20988	176	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	NIL-WHILE	$.cumulativeProbability(lowerBound) >= p
20988	176	16	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	NIL-WHILE	cumulativeProbability($) >= p
20988	176	16	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumulativeProbability(lowerBound) >= $
1099	182	8	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	DEF	$ == Double.POSITIVE_INFINITY
1100	183	12	AbstractRealDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	1	DEF	$
20989	187	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	NIL-WHILE	$.cumulativeProbability(upperBound) < p
20989	187	16	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	NIL-WHILE	cumulativeProbability($) < p
20989	187	16	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumulativeProbability(upperBound) < $
1101	205	8	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	$.isSupportConnected()
1102	208	12	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	x - dx >= $.getSupportLowerBound()
1102	208	12	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	RET	x - $ >= getSupportLowerBound()
1102	208	12	AbstractRealDistribution.java	inverseCumulativeProbability	x	double	0	RET	$ - dx >= getSupportLowerBound()
1103	210	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	$.cumulativeProbability(x - dx) == px
1103	210	16	AbstractRealDistribution.java	inverseCumulativeProbability	px	double	0	RET	cumulativeProbability(x - dx) == $
1103	210	16	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	RET	cumulativeProbability(x - $) == px
1103	210	16	AbstractRealDistribution.java	inverseCumulativeProbability	x	double	0	RET	cumulativeProbability($ - dx) == px
20990	212	20	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	NIL-WHILE	upperBound - lowerBound > $
20990	212	20	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	NIL-WHILE	upperBound - $ > dx
20990	212	20	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	NIL-WHILE	$ - lowerBound > dx
1104	214	24	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	1	DEF	$.cumulativeProbability(midPoint) < px
1104	214	24	AbstractRealDistribution.java	inverseCumulativeProbability	midPoint	double	1	DEF	cumulativeProbability($) < px
1104	214	24	AbstractRealDistribution.java	inverseCumulativeProbability	px	double	1	DEF	cumulativeProbability(midPoint) < $
1105	263	8	AbstractRealDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
20991	268	8	AbstractRealDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
20991	268	8	AbstractRealDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1214	63	8	AbstractRealMatrix.java	AbstractRealMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ < 1
1215	66	8	AbstractRealMatrix.java	AbstractRealMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ < 1
21193	85	8	AbstractRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
21193	85	8	AbstractRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
21194	86	12	AbstractRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
21194	86	12	AbstractRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
21195	102	8	AbstractRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
21195	102	8	AbstractRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
21196	103	12	AbstractRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
21196	103	12	AbstractRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
21197	116	8	AbstractRealMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
21197	116	8	AbstractRealMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
21198	117	12	AbstractRealMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
21198	117	12	AbstractRealMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
21199	130	8	AbstractRealMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
21199	130	8	AbstractRealMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
21200	131	12	AbstractRealMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
21200	131	12	AbstractRealMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
21201	148	8	AbstractRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
21201	148	8	AbstractRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
21202	149	12	AbstractRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
21202	149	12	AbstractRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
21203	151	16	AbstractRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
21203	151	16	AbstractRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1216	168	8	AbstractRealMatrix.java	power	p	int	0	IllegalArgumentException	$ < 0
1217	172	8	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NonSquareMatrixException	$.isSquare()
1218	176	8	AbstractRealMatrix.java	power	p	int	0	RET	$ == 0
1219	180	8	AbstractRealMatrix.java	power	p	int	0	RET	$ == 1
21204	197	8	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
21204	197	8	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
21204	197	8	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1220	198	12	AbstractRealMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1220	198	12	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
1221	203	16	AbstractRealMatrix.java	power	maxI	int	0	DEF	$ == -1
21205	212	8	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ <= maxI
21205	212	8	AbstractRealMatrix.java	power	maxI	int	0	NIL-FOR	i <= $
21206	229	8	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	i < data.$.length
21206	229	8	AbstractRealMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
21206	229	8	AbstractRealMatrix.java	getData	data	double[][]	0	NIL-FOR	i < $.length
21207	231	12	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	j < dataI.$.length
21207	231	12	AbstractRealMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
21207	231	12	AbstractRealMatrix.java	getData	dataI	double[]	0	NIL-FOR	j < $.length
21208	310	8	AbstractRealMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
21208	310	8	AbstractRealMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
21209	311	12	AbstractRealMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
21209	311	12	AbstractRealMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1222	348	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1222	348	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1222	348	8	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1222	348	8	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1222	348	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
1222	348	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
1223	384	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < selectedColumns.$.length
1223	384	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1223	384	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1223	384	8	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	MatrixDimensionMismatchException	destination[0].length < $.length
1223	384	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < selectedColumns.length
1223	384	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
21210	391	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	i < selectedRows.$.length
21210	391	8	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
21210	391	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
21211	393	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	j < selectedColumns.$.length
21211	393	12	AbstractRealMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
21211	393	12	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1224	404	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1225	409	8	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
21212	413	8	AbstractRealMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
21212	413	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1226	414	12	AbstractRealMatrix.java	setSubMatrix	THIS	AbstractRealMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1226	414	12	AbstractRealMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1226	414	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1226	414	12	AbstractRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[r].length != nCols
21213	424	8	AbstractRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
21213	424	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
21214	425	12	AbstractRealMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
21214	425	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
21215	436	8	AbstractRealMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
21215	436	8	AbstractRealMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1227	447	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1227	447	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
1227	447	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
21216	453	8	AbstractRealMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
21216	453	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
21217	463	8	AbstractRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
21217	463	8	AbstractRealMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1228	474	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1228	474	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1228	474	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
21218	480	8	AbstractRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
21218	480	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1229	494	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1229	494	8	AbstractRealMatrix.java	setRowVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nCols
21219	498	8	AbstractRealMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
21219	498	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1230	512	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1230	512	8	AbstractRealMatrix.java	setColumnVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nRows
21220	516	8	AbstractRealMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
21220	516	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
21221	526	8	AbstractRealMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
21221	526	8	AbstractRealMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1231	537	8	AbstractRealMatrix.java	setRow	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1231	537	8	AbstractRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1231	537	8	AbstractRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
21222	540	8	AbstractRealMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
21222	540	8	AbstractRealMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
21223	550	8	AbstractRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
21223	550	8	AbstractRealMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1232	561	8	AbstractRealMatrix.java	setColumn	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1232	561	8	AbstractRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1232	561	8	AbstractRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
21224	564	8	AbstractRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
21224	564	8	AbstractRealMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1233	632	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1233	632	8	AbstractRealMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
21225	636	8	AbstractRealMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
21225	636	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1234	646	8	AbstractRealMatrix.java	operate	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1234	646	8	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1234	646	8	AbstractRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
21226	651	8	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
21226	651	8	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
21227	653	12	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
21227	653	12	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1235	670	12	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1235	670	12	AbstractRealMatrix.java	operate	v	RealVector	0	DimensionMismatchException	$.getDimension() != nCols
21228	675	12	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
21228	675	12	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
21229	677	16	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
21229	677	16	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1236	692	8	AbstractRealMatrix.java	preMultiply	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1236	692	8	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1236	692	8	AbstractRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
21230	697	8	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
21230	697	8	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
21231	699	12	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
21231	699	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1237	716	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1237	716	12	AbstractRealMatrix.java	preMultiply	v	RealVector	0	DimensionMismatchException	$.getDimension() != nRows
21232	721	12	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
21232	721	12	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
21233	723	16	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
21233	723	16	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
21234	738	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
21234	738	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
21235	739	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
21235	739	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
21236	753	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
21236	753	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
21237	754	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
21237	754	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
21238	768	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
21238	768	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
21239	769	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
21239	769	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
21240	785	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
21240	785	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
21241	786	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
21241	786	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
21242	798	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
21242	798	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
21243	799	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
21243	799	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
21244	813	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
21244	813	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
21245	814	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
21245	814	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
21246	828	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
21246	828	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
21247	829	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
21247	829	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
21248	845	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
21248	845	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
21249	846	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
21249	846	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
1238	901	8	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	object == $
1238	901	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ == this
1239	904	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ instanceof RealMatrix == false
1240	910	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getColumnDimension() != nCols
1240	910	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getRowDimension() != nRows
1240	910	8	AbstractRealMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1240	910	8	AbstractRealMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
21250	913	8	AbstractRealMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
21250	913	8	AbstractRealMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
21251	914	12	AbstractRealMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
21251	914	12	AbstractRealMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1241	915	16	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	$.getEntry(row, col) != m.getEntry(row, col)
1241	915	16	AbstractRealMatrix.java	equals	col	int	0	RET	getEntry(row, $) != m.getEntry(row, $)
1241	915	16	AbstractRealMatrix.java	equals	row	int	0	RET	getEntry($, col) != m.getEntry($, col)
1241	915	16	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	getEntry(row, col) != $.getEntry(row, col)
21252	935	8	AbstractRealMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
21252	935	8	AbstractRealMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
21253	936	12	AbstractRealMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
21253	936	12	AbstractRealMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
570	92	8	AbstractRegion.java	AbstractRegion	boundary	Collection<SubHyperplane<S>>	1	DEF	$.size() == 0
571	143	8	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	1	DEF	hyperplanes.$.length == 0
571	143	8	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$ == null
571	143	8	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$.length == 0
572	154	16	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	0	DEF	node.insertCut($.hyperplane)
572	154	16	AbstractRegion.java	AbstractRegion	node	BSPTree<S>	0	DEF	$.insertCut(hyperplane)
20932	181	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	NIL-WHILE	$.hasNext()
20932	181	8	AbstractRegion.java	insertCuts	inserted	Hyperplane<S>	0	NIL-WHILE	$ == null
573	183	12	AbstractRegion.java	insertCuts	inserted	Hyperplane<S>	0	DEF	node.insertCut($.copySelf())
573	183	12	AbstractRegion.java	insertCuts	node	BSPTree<S>	0	DEF	$.insertCut(inserted.copySelf())
574	188	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	RET	$.hasNext()
20933	195	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	NIL-WHILE	$.hasNext()
575	237	8	AbstractRegion.java	isEmpty	node	BSPTree<S>	0	RET	$.getCut() == null
576	266	8	AbstractRegion.java	checkPoint	cell	BSPTree<S>	0	RET	$.getCut() == null
577	280	8	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getAttribute() == null
577	280	8	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getCut() != null
577	280	8	AbstractRegion.java	getTree	includeBoundaryAttributes	boolean	0	DEF	$
578	412	8	AbstractRegion.java	getSize	THIS	AbstractRegion	0	DEF	$.barycenter == null
579	427	8	AbstractRegion.java	getBarycenter	THIS	AbstractRegion	0	DEF	$.barycenter == null
580	471	8	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	RET	$.getCut() == null
581	472	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getAttribute()
582	484	12	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
582	484	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
582	484	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
583	485	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
583	485	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
584	489	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
584	489	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
585	493	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
585	493	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
586	499	12	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
586	499	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
586	499	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
587	500	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
587	500	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
588	504	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
588	504	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
589	508	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
589	508	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
590	520	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
590	520	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
591	526	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().getHyperplane().sameOrientationAs(sub.getHyperplane())
591	526	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().getHyperplane().sameOrientationAs($.getHyperplane())
592	527	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
592	527	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getPlus().getAttribute()
593	530	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
593	530	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getMinus().getAttribute()
594	534	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
594	534	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getPlus().getAttribute()
595	537	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getMinus().getAttribute()
595	537	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
596	602	8	AbstractRegion.java	recurseIntersection	node	BSPTree<S>	0	RET	$.getCut() == null
597	616	12	AbstractRegion.java	recurseIntersection	plus	SubHyperplane<S>	1	RET	$ == null
598	618	19	AbstractRegion.java	recurseIntersection	minus	SubHyperplane<S>	1	RET	$ == null
599	652	8	AbstractRegion.java	recurseTransform	node	BSPTree<S>	0	RET	$.getCut() == null
600	659	8	AbstractRegion.java	recurseTransform	attribute	BoundaryAttribute<S>	0	DEF	$ != null
1763	97	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	NullArgumentException	$ == null
1764	100	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	ZeroException	steps.$.length == 0
1764	100	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$.length == 0
21896	108	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
21896	108	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < dimension
21897	110	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i + 1
21897	110	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $ + 1
1765	111	16	AbstractSimplex.java	AbstractSimplex	j	int	0	ZeroException	steps[$] == 0
1765	111	16	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$[j] == 0
1766	132	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NotStrictlyPositiveException	referenceSimplex.$.length <= 0
1766	132	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NotStrictlyPositiveException	$.length <= 0
21898	144	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < referenceSimplex.$.length
21898	144	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < referenceSimplex.length
21898	144	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NIL-FOR	i < $.length
1767	148	12	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	DimensionMismatchException	refI.$.length != $.dimension
1767	148	12	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DimensionMismatchException	$.length != dimension
21899	151	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i
21899	151	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $
21900	154	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
21900	154	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
1768	155	20	AbstractSimplex.java	AbstractSimplex	k	int	0	DEF	refI[$] != refJ[$]
1768	155	20	AbstractSimplex.java	AbstractSimplex	refJ	double[]	0	DEF	refI[k] != $[k]
1768	155	20	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DEF	$[k] != refJ[k]
1769	160	16	AbstractSimplex.java	AbstractSimplex	allEquals	boolean	0	MathIllegalArgumentException	$
1770	167	12	AbstractSimplex.java	AbstractSimplex	i	int	0	DEF	$ > 0
21901	169	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
21901	169	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
1771	216	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	DimensionMismatchException	$.dimension != startPoint.$.length
1771	216	8	AbstractSimplex.java	build	startPoint	double[]	0	DimensionMismatchException	dimension != $.length
21902	225	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
21902	225	8	AbstractSimplex.java	build	i	int	0	NIL-FOR	$ < dimension
21903	228	12	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
21903	228	12	AbstractSimplex.java	build	k	int	0	NIL-FOR	$ < dimension
21904	246	8	AbstractSimplex.java	evaluate	THIS	AbstractSimplex	0	NIL-FOR	i < $.simplex.$.length
21904	246	8	AbstractSimplex.java	evaluate	i	int	0	NIL-FOR	$ < simplex.length
1772	249	12	AbstractSimplex.java	evaluate	vertex	PointValuePair	0	DEF	Double.isNaN($.getValue())
21905	267	8	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
21905	267	8	AbstractSimplex.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < dimension
1773	268	12	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	DEF	comparator.compare($.simplex[i], pointValuePair) > 0
1773	268	12	AbstractSimplex.java	replaceWorstPoint	i	int	0	DEF	comparator.compare(simplex[$], pointValuePair) > 0
1773	268	12	AbstractSimplex.java	replaceWorstPoint	pointValuePair	PointValuePair	0	DEF	comparator.compare(simplex[i], $) > 0
1773	268	12	AbstractSimplex.java	replaceWorstPoint	comparator	Comparator<PointValuePair>	0	DEF	$.compare(simplex[i], pointValuePair) > 0
1774	295	8	AbstractSimplex.java	getPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
1774	295	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ >= simplex.length
1774	295	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ < 0
1775	310	8	AbstractSimplex.java	setPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
1775	310	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ >= simplex.length
1775	310	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ < 0
1776	324	8	AbstractSimplex.java	setPoints	THIS	AbstractSimplex	0	DimensionMismatchException	points.$.length != $.simplex.$.length
1776	324	8	AbstractSimplex.java	setPoints	points	PointValuePair[]	0	DimensionMismatchException	$.length != simplex.length
21906	340	8	AbstractSimplex.java	createHypercubeSteps	i	int	0	NIL-FOR	$ < n
21906	340	8	AbstractSimplex.java	createHypercubeSteps	n	int	0	NIL-FOR	i < $
2642	180	4	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	1	DEF	interpolator.$.currentState == null
2642	180	4	AbstractStepInterpolator.java	AbstractStepInterpolator	interpolator	AbstractStepInterpolator	1	DEF	$.currentState == null
22386	193	6	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.interpolatedSecondaryState.$.length
22386	193	6	AbstractStepInterpolator.java	AbstractStepInterpolator	i	int	0	NIL-FOR	$ < interpolatedSecondaryState.length
2643	212	6	AbstractStepInterpolator.java	allocateInterpolatedArrays	dimension	int	1	DEF	$ < 0
2644	224	10	AbstractStepInterpolator.java	allocateInterpolatedArrays	THIS	AbstractStepInterpolator	1	DEF	$.secondaryMappers == null
22387	230	14	AbstractStepInterpolator.java	allocateInterpolatedArrays	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.secondaryMappers.$.length
22387	230	14	AbstractStepInterpolator.java	allocateInterpolatedArrays	i	int	0	NIL-FOR	$ < secondaryMappers.length
2645	402	6	AbstractStepInterpolator.java	evaluateCompleteInterpolatedState	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
2646	482	4	AbstractStepInterpolator.java	finalizeStep	THIS	AbstractStepInterpolator	0	DEF	$.finalized
2647	512	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	1	DEF	$.currentState == null
2648	529	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	DEF	$.currentState != null
22388	530	8	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
22388	530	8	AbstractStepInterpolator.java	writeBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
22389	568	4	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.secondaryMappers.$.length
22389	568	4	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < secondaryMappers.length
2649	573	4	AbstractStepInterpolator.java	readBaseExternal	dimension	int	1	DEF	$ < 0
22390	577	8	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
22390	577	8	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
2041	59	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	NullArgumentException	$ == null
2042	88	8	AbstractStorelessUnivariateStatistic.java	evaluate	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
2042	88	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2042	88	8	AbstractStorelessUnivariateStatistic.java	evaluate	begin	int	0	DEF	test(values, $, length)
2042	88	8	AbstractStorelessUnivariateStatistic.java	evaluate	length	int	0	DEF	test(values, begin, $)
2043	127	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	NullArgumentException	$ == null
2044	146	8	AbstractStorelessUnivariateStatistic.java	incrementAll	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
2044	146	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	test($, begin, length)
2044	146	8	AbstractStorelessUnivariateStatistic.java	incrementAll	begin	int	0	DEF	test(values, $, length)
2044	146	8	AbstractStorelessUnivariateStatistic.java	incrementAll	length	int	0	DEF	test(values, begin, $)
22114	148	12	AbstractStorelessUnivariateStatistic.java	incrementAll	i	int	0	NIL-FOR	$ < k
22114	148	12	AbstractStorelessUnivariateStatistic.java	incrementAll	k	int	0	NIL-FOR	i < $
2045	163	8	AbstractStorelessUnivariateStatistic.java	equals	THIS	AbstractStorelessUnivariateStatistic	0	RET	object == $
2045	163	8	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ == this
2046	166	7	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ instanceof AbstractStorelessUnivariateStatistic == false
626	126	8	AbstractSubHyperplane.java	recurseTransform	node	BSPTree<T>	0	RET	$.getCut() == null
627	133	8	AbstractSubHyperplane.java	recurseTransform	attribute	BoundaryAttribute<T>	0	DEF	$ != null
2166	163	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NullArgumentException	$ == null
2167	167	8	AbstractUnivariateStatistic.java	test	begin	int	0	NotPositiveException	$ < 0
2168	171	8	AbstractUnivariateStatistic.java	test	length	int	0	NotPositiveException	$ < 0
2169	175	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	NumberIsTooLargeException	begin + length > values.$.length
2169	175	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NumberIsTooLargeException	begin + length > $.length
2169	175	8	AbstractUnivariateStatistic.java	test	begin	int	0	NumberIsTooLargeException	$ + length > values.length
2169	175	8	AbstractUnivariateStatistic.java	test	length	int	0	NumberIsTooLargeException	begin + $ > values.length
2170	180	8	AbstractUnivariateStatistic.java	test	length	int	0	RET	$ == 0
2170	180	8	AbstractUnivariateStatistic.java	test	allowEmpty	boolean	0	RET	$
2171	258	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	NullArgumentException	$ == null
2172	262	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	DimensionMismatchException	weights.$.length != values.$.length
2172	262	8	AbstractUnivariateStatistic.java	test	values	double[]	0	DimensionMismatchException	weights.length != $.length
2172	262	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	DimensionMismatchException	$.length != values.length
22145	267	8	AbstractUnivariateStatistic.java	test	i	int	0	NIL-FOR	$ < begin + length
22145	267	8	AbstractUnivariateStatistic.java	test	begin	int	0	NIL-FOR	i < $ + length
22145	267	8	AbstractUnivariateStatistic.java	test	length	int	0	NIL-FOR	i < begin + $
2173	268	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isNaN(weights[$])
2173	268	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isNaN($[i])
2174	271	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isInfinite(weights[$])
2174	271	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
2175	274	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	weights[$] < 0
2175	274	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	$[i] < 0
2176	277	12	AbstractUnivariateStatistic.java	test	i	int	0	DEF	weights[$] > 0.0
2176	277	12	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	DEF	$
2176	277	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	$[i] > 0.0
2177	282	8	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	MathIllegalArgumentException	$
22293	111	8	AbstractWell.java	AbstractWell	j	int	0	NIL-FOR	$ < r
22293	111	8	AbstractWell.java	AbstractWell	r	int	0	NIL-FOR	j < $
2451	154	8	AbstractWell.java	setSeed	seed	int[]	0	RET	$ == null
2452	161	8	AbstractWell.java	setSeed	THIS	AbstractWell	0	DEF	seed.$.length < $.v.$.length
2452	161	8	AbstractWell.java	setSeed	seed	int[]	0	DEF	$.length < v.length
22294	162	12	AbstractWell.java	setSeed	THIS	AbstractWell	0	NIL-FOR	i < $.v.$.length
22294	162	12	AbstractWell.java	setSeed	i	int	0	NIL-FOR	$ < v.length
22446	223	8	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-DOWHILE	$.isLastStep
22447	226	12	AdamsBashforthIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
22448	232	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	i < $.mainSetDimension
22448	232	16	AdamsBashforthIntegrator.java	integrate	i	int	0	NIL-FOR	$ < mainSetDimension
2726	242	16	AdamsBashforthIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
22449	262	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	j < y0.$.length
22449	262	12	AdamsBashforthIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
22449	262	12	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2727	276	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.isLastStep
2728	281	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.resetOccurred
2729	297	16	AdamsBashforthIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
22442	240	8	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-DOWHILE	$.isLastStep
22443	243	12	AdamsMoultonIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
22444	256	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
22444	256	16	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
22444	256	16	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2722	265	16	AdamsMoultonIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
22445	279	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
22445	279	12	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
22445	279	12	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2723	294	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.isLastStep
2724	299	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.resetOccurred
2725	316	16	AdamsMoultonIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
22507	167	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ > 0
22508	179	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ < nSteps
22508	179	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	nSteps	int	0	NIL-FOR	i < $
2776	193	12	AdamsNordsieckTransformer.java	getInstance	t	AdamsNordsieckTransformer	0	DEF	$ == null
22509	227	8	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < pData.$.length
22509	227	8	AdamsNordsieckTransformer.java	buildP	i	int	0	NIL-FOR	$ < pData.length
22509	227	8	AdamsNordsieckTransformer.java	buildP	pData	BigFraction[][]	0	NIL-FOR	i < $.length
22510	232	12	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < pI.$.length
22510	232	12	AdamsNordsieckTransformer.java	buildP	j	int	0	NIL-FOR	$ < pI.length
22510	232	12	AdamsNordsieckTransformer.java	buildP	pI	BigFraction[]	0	NIL-FOR	j < $.length
22511	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < y.$.length
22511	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	i	int	0	NIL-FOR	$ < y.length
22511	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	y	double[][]	0	NIL-FOR	i < $.length
22512	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < aI.$.length
22512	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < aI.length
22512	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	aI	double[]	0	NIL-FOR	j < $.length
22513	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < yI.$.length
22513	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < yI.length
22513	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	yI	double[]	0	NIL-FOR	j < $.length
22514	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < data.$.length
22514	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	i	int	0	NIL-FOR	$ < data.length
22514	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	data	double[][]	0	NIL-FOR	i < $.length
22515	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < dataI.$.length
22515	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	j	int	0	NIL-FOR	$ < dataI.length
22515	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	dataI	double[]	0	NIL-FOR	j < $.length
2761	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize > $.maxStep
2761	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize < $.minStep
2761	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ > maxStep
2761	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ < minStep
2762	225	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecAbsoluteTolerance.$.length != $.mainSetDimension
2762	225	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecAbsoluteTolerance != null
2763	229	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecRelativeTolerance.$.length != $.mainSetDimension
2763	229	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecRelativeTolerance != null
2764	250	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	RET	$.initialStep > 0
22495	260	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
22495	260	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
22495	260	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
2765	269	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
22496	274	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
22496	274	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
22496	274	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
22497	281	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
22497	281	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
22497	281	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
2766	295	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < $.getMinStep()
2766	295	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ < getMinStep()
2767	298	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h > $.getMaxStep()
2767	298	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ > getMaxStep()
2768	301	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
2769	322	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	NumberIsTooSmallException	FastMath.abs(h) < $.minStep
2769	322	6	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	NumberIsTooSmallException	FastMath.abs($) < minStep
2770	323	10	AdaptiveStepsizeIntegrator.java	filterStep	acceptSmall	boolean	1	DEF	$
2771	331	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	1	DEF	filteredH > $.maxStep
2771	331	6	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	1	DEF	$ > maxStep
2772	333	13	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	filteredH < -$.maxStep
2772	333	13	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	0	DEF	$ < -maxStep
2180	302	8	AggregateSummaryStatistics.java	aggregate	statistics	Collection<SummaryStatistics>	0	RET	$ == null
2181	306	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	RET	$.hasNext()
22146	316	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	NIL-WHILE	$.hasNext()
2182	318	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMin() < min
2182	318	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	Double.isNaN($)
2182	318	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	current.getMin() < $
2183	321	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMax() > max
2183	321	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	Double.isNaN($)
2183	321	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	current.getMax() > $
2184	333	8	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 0
2185	335	15	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 1
2609	43	8	ArgUtils.java	flatten	array	Object[]	0	DEF	$ != null
2610	45	16	ArgUtils.java	flatten	THIS	ArgUtils	1	DEF	$.o instanceof Object[]
11	66	8	ArithmeticUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
11	66	8	ArithmeticUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
12	114	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	$ == k
12	114	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	n == $
12	114	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == 0
13	117	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	k == $ - 1
13	117	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == 1
13	117	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == n - 1
14	121	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	k > $ / 2
14	121	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ > n / 2
15	131	8	ArithmeticUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 61
20845	134	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
20845	134	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
16	138	15	ArithmeticUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 66
20846	142	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
20846	142	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
20847	158	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
20847	158	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
17	192	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	$ == k
17	192	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 0
17	192	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	n == $
18	195	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	k == $ - 1
18	195	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == n - 1
18	195	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 1
19	198	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	k > $/2
19	198	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ > n/2
20	201	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	$ < 67
20848	206	8	ArithmeticUtils.java	binomialCoefficientDouble	i	int	0	NIL-FOR	$ <= k
20848	206	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	NIL-FOR	i <= $
21	234	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ == k
21	234	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	n == $
21	234	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 0
22	237	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	k == $ - 1
22	237	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 1
22	237	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == n - 1
23	245	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 67
24	253	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 1030
25	257	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	k > $ / 2
25	257	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ > n / 2
20849	267	8	ArithmeticUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n
20849	267	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $
20850	272	8	ArithmeticUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= k
20850	272	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	NIL-FOR	i <= $
26	304	8	ArithmeticUtils.java	factorial	n	int	0	NotPositiveException	$ < 0
27	308	8	ArithmeticUtils.java	factorial	n	int	0	MathArithmeticException	$ > 20
28	328	8	ArithmeticUtils.java	factorialDouble	n	int	0	NotPositiveException	$ < 0
29	332	8	ArithmeticUtils.java	factorialDouble	n	int	0	RET	$ < 21
30	346	8	ArithmeticUtils.java	factorialLog	n	int	0	NotPositiveException	$ < 0
31	350	8	ArithmeticUtils.java	factorialLog	n	int	0	RET	$ < 21
20851	354	8	ArithmeticUtils.java	factorialLog	i	int	0	NIL-FOR	$ <= n
20851	354	8	ArithmeticUtils.java	factorialLog	n	int	0	NIL-FOR	i <= $
32	392	8	ArithmeticUtils.java	gcd	u	int	0	MathArithmeticException:RET	$ == 0
32	392	8	ArithmeticUtils.java	gcd	v	int	0	MathArithmeticException:RET	$ == 0
33	393	12	ArithmeticUtils.java	gcd	u	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
33	393	12	ArithmeticUtils.java	gcd	v	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
34	404	8	ArithmeticUtils.java	gcd	u	int	0	DEF	$ > 0
35	407	8	ArithmeticUtils.java	gcd	v	int	0	DEF	$ > 0
20852	412	8	ArithmeticUtils.java	gcd	u	int	0	NIL-WHILE	($ & 1) == 0
20852	412	8	ArithmeticUtils.java	gcd	v	int	0	NIL-WHILE	($ & 1) == 0
20852	412	8	ArithmeticUtils.java	gcd	k	int	0	NIL-WHILE	$ < 31
36	418	8	ArithmeticUtils.java	gcd	k	int	0	MathArithmeticException	$ == 31
20853	427	8	ArithmeticUtils.java	gcd	t	int	0	NIL-DOWHILE	$ != 0
20854	430	12	ArithmeticUtils.java	gcd	t	int	0	NIL-WHILE	($ & 1) == 0
37	434	12	ArithmeticUtils.java	gcd	t	int	1	DEF	$ > 0
38	479	8	ArithmeticUtils.java	gcd	u	long	0	MathArithmeticException:RET	$ == 0
38	479	8	ArithmeticUtils.java	gcd	v	long	0	MathArithmeticException:RET	$ == 0
39	480	12	ArithmeticUtils.java	gcd	u	long	0	MathArithmeticException	$ == Long.MIN_VALUE
39	480	12	ArithmeticUtils.java	gcd	v	long	0	MathArithmeticException	$ == Long.MIN_VALUE
40	491	8	ArithmeticUtils.java	gcd	u	long	0	DEF	$ > 0
41	494	8	ArithmeticUtils.java	gcd	v	long	0	DEF	$ > 0
20855	499	8	ArithmeticUtils.java	gcd	u	long	0	NIL-WHILE	($ & 1) == 0
20855	499	8	ArithmeticUtils.java	gcd	v	long	0	NIL-WHILE	($ & 1) == 0
20855	499	8	ArithmeticUtils.java	gcd	k	int	0	NIL-WHILE	$ < 63
42	505	8	ArithmeticUtils.java	gcd	k	int	0	MathArithmeticException	$ == 63
20856	514	8	ArithmeticUtils.java	gcd	t	long	0	NIL-DOWHILE	$ != 0
20857	517	12	ArithmeticUtils.java	gcd	t	long	0	NIL-WHILE	($ & 1) == 0
43	521	12	ArithmeticUtils.java	gcd	t	long	1	DEF	$ > 0
44	557	8	ArithmeticUtils.java	lcm	a	int	0	RET	$ == 0
44	557	8	ArithmeticUtils.java	lcm	b	int	0	RET	$ == 0
45	561	8	ArithmeticUtils.java	lcm	lcm	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
46	591	8	ArithmeticUtils.java	lcm	a	long	0	RET	$ == 0
46	591	8	ArithmeticUtils.java	lcm	b	long	0	RET	$ == 0
47	595	8	ArithmeticUtils.java	lcm	lcm	long	0	MathArithmeticException	$ == Long.MIN_VALUE
48	614	8	ArithmeticUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
48	614	8	ArithmeticUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
49	632	8	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ > b
49	632	8	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a > $
50	636	12	ArithmeticUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ < 0
51	637	16	ArithmeticUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ < 0
52	639	20	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ >= Long.MAX_VALUE / b
52	639	20	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a >= Long.MAX_VALUE / $
53	644	23	ArithmeticUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ > 0
54	646	20	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	Long.MIN_VALUE / b <= $
54	646	20	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	Long.MIN_VALUE / $ <= a
55	656	19	ArithmeticUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ > 0
56	661	16	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE / b
56	661	16	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE / $
57	686	8	ArithmeticUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
57	686	8	ArithmeticUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
58	704	8	ArithmeticUtils.java	subAndCheck	b	long	1	MathArithmeticException	$ == Long.MIN_VALUE
59	705	12	ArithmeticUtils.java	subAndCheck	a	long	1	DEF	$ < 0
60	726	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
20858	732	8	ArithmeticUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
61	733	12	ArithmeticUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
62	752	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
20859	758	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
63	759	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
64	778	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
20860	784	8	ArithmeticUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
65	785	12	ArithmeticUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
66	804	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
20861	810	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
67	811	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
68	830	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
69	846	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
20862	852	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
70	853	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
71	873	8	ArithmeticUtils.java	pow	e	BigInteger	0	NotPositiveException	$.compareTo(BigInteger.ZERO) < 0
20863	879	8	ArithmeticUtils.java	pow	e	BigInteger	0	NIL-WHILE	BigInteger.ZERO.equals($)
72	880	12	ArithmeticUtils.java	pow	e	BigInteger	0	DEF	$.testBit(0)
73	910	8	ArithmeticUtils.java	stirlingS2	k	int	0	NotPositiveException	$ < 0
74	913	8	ArithmeticUtils.java	stirlingS2	n	int	0	NumberIsTooLargeException	k > $
74	913	8	ArithmeticUtils.java	stirlingS2	k	int	0	NumberIsTooLargeException	$ > n
75	919	8	ArithmeticUtils.java	stirlingS2	stirlingS2	long[][]	0	DEF	$ == null
20864	928	12	ArithmeticUtils.java	stirlingS2	THIS	ArithmeticUtils	0	NIL-FOR	i < stirlingS2.$.length
20864	928	12	ArithmeticUtils.java	stirlingS2	i	int	0	NIL-FOR	$ < stirlingS2.length
20864	928	12	ArithmeticUtils.java	stirlingS2	stirlingS2	long[][]	0	NIL-FOR	i < $.length
20865	933	16	ArithmeticUtils.java	stirlingS2	j	int	0	NIL-FOR	$ < i
20865	933	16	ArithmeticUtils.java	stirlingS2	i	int	0	NIL-FOR	j < $
76	943	8	ArithmeticUtils.java	stirlingS2	THIS	ArithmeticUtils	1	RET	n < stirlingS2.$.length
76	943	8	ArithmeticUtils.java	stirlingS2	stirlingS2	long[][]	1	RET	n < $.length
76	943	8	ArithmeticUtils.java	stirlingS2	n	int	1	RET	$ < stirlingS2.length
77	948	12	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == 0
78	950	19	ArithmeticUtils.java	stirlingS2	n	int	1	RET	k == $
78	950	19	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == n
78	950	19	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == 1
79	952	19	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == 2
80	954	19	ArithmeticUtils.java	stirlingS2	n	int	1	RET	k == $ - 1
80	954	19	ArithmeticUtils.java	stirlingS2	k	int	1	RET	$ == n - 1
20866	960	16	ArithmeticUtils.java	stirlingS2	j	int	0	NIL-FOR	$ <= k
20866	960	16	ArithmeticUtils.java	stirlingS2	k	int	0	NIL-FOR	j <= $
81	963	20	ArithmeticUtils.java	stirlingS2	sum	long	0	MathArithmeticException	$ < 0
82	988	8	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	$ > b
82	988	8	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	a > $
83	994	12	ArithmeticUtils.java	addAndCheck	a	long	1	MathArithmeticException	$ < 0
84	995	16	ArithmeticUtils.java	addAndCheck	b	long	1	MathArithmeticException	$ < 0
85	997	20	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	Long.MIN_VALUE - b <= $
85	997	20	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	Long.MIN_VALUE - $ <= a
86	1011	16	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE - b
86	1011	16	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE - $
87	1030	8	ArithmeticUtils.java	checkBinomial	n	int	0	NumberIsTooLargeException	$ < k
87	1030	8	ArithmeticUtils.java	checkBinomial	k	int	0	NumberIsTooLargeException	n < $
88	1034	8	ArithmeticUtils.java	checkBinomial	n	int	0	NotPositiveException	$ < 0
1312	151	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	copyArray	boolean	1	DEF	$
1313	156	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NoDataException	$ == 0
1314	160	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
21332	163	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	NIL-FOR	$ < nRows
21332	163	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	r < $
1315	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	d[r].length != nCols
1315	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1315	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1315	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	d	T[][]	0	DimensionMismatchException	$[r].length != nCols
21333	195	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	row	int	0	NIL-FOR	$ < nRows
21333	195	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	row < $
21334	227	8	Array2DRowFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
21334	227	8	Array2DRowFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
21335	231	12	Array2DRowFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
21335	231	12	Array2DRowFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
21336	254	8	Array2DRowFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
21336	254	8	Array2DRowFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
21337	258	12	Array2DRowFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
21337	258	12	Array2DRowFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
21338	283	8	Array2DRowFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
21338	283	8	Array2DRowFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
21339	286	12	Array2DRowFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
21339	286	12	Array2DRowFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
21340	288	16	Array2DRowFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
21340	288	16	Array2DRowFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1316	318	8	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	1	DimensionMismatchException	$.data == null
1317	319	12	Array2DRowFieldMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1318	322	12	Array2DRowFieldMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1319	326	12	Array2DRowFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1320	331	12	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
21341	335	12	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	NIL-FOR	i < $.data.$.length
21341	335	12	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1321	336	16	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1321	336	16	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1321	336	16	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1321	336	16	Array2DRowFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[i].length != nCols
1322	400	8	Array2DRowFieldMatrix.java	operate	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1322	400	8	Array2DRowFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1322	400	8	Array2DRowFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
21342	404	8	Array2DRowFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
21342	404	8	Array2DRowFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
21343	407	12	Array2DRowFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
21343	407	12	Array2DRowFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1323	420	8	Array2DRowFieldMatrix.java	preMultiply	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1323	420	8	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1323	420	8	Array2DRowFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
21344	425	8	Array2DRowFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
21344	425	8	Array2DRowFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
21345	427	12	Array2DRowFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
21345	427	12	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
21346	442	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
21346	442	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
21347	444	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
21347	444	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
21348	457	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
21348	457	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
21349	459	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
21349	459	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
21350	474	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
21350	474	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
21351	476	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
21351	476	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
21352	491	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
21352	491	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
21353	493	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
21353	493	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
21354	506	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
21354	506	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
21355	507	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
21355	507	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
21356	521	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
21356	521	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
21357	522	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
21357	522	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
21358	537	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
21358	537	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
21359	538	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
21359	538	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
21360	554	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
21360	554	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
21361	555	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
21361	555	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
21362	571	8	Array2DRowFieldMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
21362	571	8	Array2DRowFieldMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1487	96	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	copyArray	boolean	1	DEF	$
1488	99	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	NullArgumentException	$ == null
1489	103	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NoDataException	$ == 0
1490	107	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	NoDataException	$ == 0
21635	110	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	NIL-FOR	$ < nRows
21635	110	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	r < $
1491	111	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	d[r].length != nCols
1491	111	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1491	111	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1491	111	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	DimensionMismatchException	$[r].length != nCols
21636	129	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	row	int	0	NIL-FOR	$ < nRows
21636	129	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	row < $
21637	162	8	Array2DRowRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
21637	162	8	Array2DRowRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
21638	166	12	Array2DRowRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
21638	166	12	Array2DRowRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
21639	189	8	Array2DRowRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
21639	189	8	Array2DRowRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
21640	193	12	Array2DRowRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
21640	193	12	Array2DRowRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
21641	223	8	Array2DRowRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
21641	223	8	Array2DRowRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
21642	226	12	Array2DRowRealMatrix.java	multiply	mRow	int	0	NIL-FOR	$ < nSum
21642	226	12	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	mRow < $
21643	230	12	Array2DRowRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
21643	230	12	Array2DRowRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
21644	233	16	Array2DRowRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
21644	233	16	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1492	262	8	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	1	DimensionMismatchException	$.data == null
1493	263	12	Array2DRowRealMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1494	266	12	Array2DRowRealMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1495	271	12	Array2DRowRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1496	276	12	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
21645	280	12	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	NIL-FOR	i < $.data.$.length
21645	280	12	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1497	281	16	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1497	281	16	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1497	281	16	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1497	281	16	Array2DRowRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[i].length != nCols
1498	337	8	Array2DRowRealMatrix.java	operate	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1498	337	8	Array2DRowRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1498	337	8	Array2DRowRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
21646	341	8	Array2DRowRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
21646	341	8	Array2DRowRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
21647	344	12	Array2DRowRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
21647	344	12	Array2DRowRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1499	357	8	Array2DRowRealMatrix.java	preMultiply	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1499	357	8	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1499	357	8	Array2DRowRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
21648	362	8	Array2DRowRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
21648	362	8	Array2DRowRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
21649	364	12	Array2DRowRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
21649	364	12	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
21650	380	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
21650	380	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
21651	382	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
21651	382	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
21652	395	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
21652	395	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
21653	397	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
21653	397	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
21654	412	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
21654	412	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
21655	414	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
21655	414	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
21656	429	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
21656	429	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
21657	431	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
21657	431	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
21658	444	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
21658	444	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
21659	445	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
21659	445	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
21660	459	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
21660	459	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
21661	460	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
21661	460	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
21662	475	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
21662	475	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
21663	476	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
21663	476	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
21664	492	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
21664	492	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
21665	493	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
21665	493	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
21666	509	8	Array2DRowRealMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
21666	509	8	Array2DRowRealMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1590	98	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1591	118	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1592	147	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1593	150	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	d.$.length == 0
1593	150	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	ZeroException	$.length == 0
1594	173	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1595	191	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1596	194	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1596	194	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1596	194	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1596	194	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
1597	214	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1598	217	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1598	217	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1598	217	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1598	217	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
1599	232	8	ArrayFieldVector.java	ArrayFieldVector	v	FieldVector<T>	0	NullArgumentException	$ == null
21760	237	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
21760	237	8	ArrayFieldVector.java	ArrayFieldVector	i	int	0	NIL-FOR	$ < data.length
1600	249	8	ArrayFieldVector.java	ArrayFieldVector	v	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1601	265	8	ArrayFieldVector.java	ArrayFieldVector	v	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1602	281	8	ArrayFieldVector.java	ArrayFieldVector	v1	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1602	281	8	ArrayFieldVector.java	ArrayFieldVector	v2	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1603	300	8	ArrayFieldVector.java	ArrayFieldVector	v1	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1603	300	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	NullArgumentException	$ == null
1604	319	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	NullArgumentException	$ == null
1604	319	8	ArrayFieldVector.java	ArrayFieldVector	v2	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1605	345	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	NullArgumentException	$ == null
1605	345	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	NullArgumentException	$ == null
1606	349	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1606	349	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1606	349	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
1607	370	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1607	370	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1607	370	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
21761	407	12	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
21761	407	12	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
21762	423	8	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
21762	423	8	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
21763	436	12	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
21763	436	12	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
21764	452	8	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
21764	452	8	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
21765	461	8	ArrayFieldVector.java	mapAdd	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
21765	461	8	ArrayFieldVector.java	mapAdd	i	int	0	NIL-FOR	$ < data.length
21766	469	8	ArrayFieldVector.java	mapAddToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
21766	469	8	ArrayFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
21767	478	8	ArrayFieldVector.java	mapSubtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
21767	478	8	ArrayFieldVector.java	mapSubtract	i	int	0	NIL-FOR	$ < data.length
21768	486	8	ArrayFieldVector.java	mapSubtractToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
21768	486	8	ArrayFieldVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
21769	495	8	ArrayFieldVector.java	mapMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
21769	495	8	ArrayFieldVector.java	mapMultiply	i	int	0	NIL-FOR	$ < data.length
21770	503	8	ArrayFieldVector.java	mapMultiplyToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
21770	503	8	ArrayFieldVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
21771	512	8	ArrayFieldVector.java	mapDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
21771	512	8	ArrayFieldVector.java	mapDivide	i	int	0	NIL-FOR	$ < data.length
21772	520	8	ArrayFieldVector.java	mapDivideToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
21772	520	8	ArrayFieldVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
21773	530	8	ArrayFieldVector.java	mapInv	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
21773	530	8	ArrayFieldVector.java	mapInv	i	int	0	NIL-FOR	$ < data.length
21774	539	8	ArrayFieldVector.java	mapInvToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
21774	539	8	ArrayFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
21775	552	12	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
21775	552	12	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
21776	568	8	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
21776	568	8	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
21777	581	12	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
21777	581	12	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
21778	597	8	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
21778	597	8	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
21779	624	12	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
21779	624	12	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
21780	640	8	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
21780	640	8	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
21781	668	12	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
21781	668	12	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
21782	669	16	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
21782	669	16	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
21783	687	8	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
21783	687	8	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
21784	688	12	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
21784	688	12	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
21785	758	16	ArrayFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
21785	758	16	ArrayFieldVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
21785	758	16	ArrayFieldVector.java	setSubVector	v	FieldVector<T>	0	NIL-FOR	i < index + $.getDimension()
1608	813	8	ArrayFieldVector.java	checkVectorDimensions	THIS	ArrayFieldVector	0	DimensionMismatchException	$.data.$.length != n
1608	813	8	ArrayFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1609	827	8	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$ == other
1609	827	8	ArrayFieldVector.java	equals	other	Object	0	RET	this == $
1610	830	8	ArrayFieldVector.java	equals	other	Object	0	RET	$ == null
1611	837	12	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data.$.length != rhs.getDimension()
1611	837	12	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data.length != $.getDimension()
21786	841	12	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
21786	841	12	ArrayFieldVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1612	842	16	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data[i].equals(rhs.getEntry(i))
1612	842	16	ArrayFieldVector.java	equals	i	int	0	RET	data[$].equals(rhs.getEntry($))
1612	842	16	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data[i].equals($.getEntry(i))
1613	874	8	ArrayFieldVector.java	checkIndex	THIS	ArrayFieldVector	0	OutOfRangeException	index >= $.getDimension()
1613	874	8	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1613	874	8	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1176	104	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1177	121	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1178	124	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1178	124	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NumberIsTooLargeException	$.length < pos + size
1178	124	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1178	124	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
21136	138	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < d.$.length
21136	138	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < d.length
21136	138	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NIL-FOR	i < $.length
1179	154	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NullArgumentException	$ == null
1180	157	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1180	157	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NumberIsTooLargeException	$.length < pos + size
1180	157	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1180	157	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
21137	161	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < pos + size
21137	161	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NIL-FOR	i < $ + size
21137	161	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NIL-FOR	i < pos + $
1181	173	8	ArrayRealVector.java	ArrayRealVector	v	RealVector	0	NullArgumentException	$ == null
21138	177	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
21138	177	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < data.length
21139	224	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l2
21139	224	8	ArrayRealVector.java	ArrayRealVector	l2	int	0	NIL-FOR	i < $
21140	238	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l1
21140	238	8	ArrayRealVector.java	ArrayRealVector	l1	int	0	NIL-FOR	i < $
1182	292	8	ArrayRealVector.java	add	v	RealVector	1	RET	$ instanceof ArrayRealVector
21141	298	12	ArrayRealVector.java	add	i	int	0	NIL-FOR	$ < dim
21141	298	12	ArrayRealVector.java	add	dim	int	0	NIL-FOR	i < $
21142	306	12	ArrayRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1183	317	8	ArrayRealVector.java	subtract	v	RealVector	1	RET	$ instanceof ArrayRealVector
21143	323	12	ArrayRealVector.java	subtract	i	int	0	NIL-FOR	$ < dim
21143	323	12	ArrayRealVector.java	subtract	dim	int	0	NIL-FOR	i < $
21144	331	12	ArrayRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
21145	348	8	ArrayRealVector.java	mapToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
21145	348	8	ArrayRealVector.java	mapToSelf	i	int	0	NIL-FOR	$ < data.length
21146	357	8	ArrayRealVector.java	mapAddToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
21146	357	8	ArrayRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
21147	366	8	ArrayRealVector.java	mapSubtractToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
21147	366	8	ArrayRealVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
21148	375	8	ArrayRealVector.java	mapMultiplyToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
21148	375	8	ArrayRealVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
21149	384	8	ArrayRealVector.java	mapDivideToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
21149	384	8	ArrayRealVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
1184	393	8	ArrayRealVector.java	ebeMultiply	v	RealVector	1	RET	$ instanceof ArrayRealVector
21150	399	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < dim
21150	399	12	ArrayRealVector.java	ebeMultiply	dim	int	0	NIL-FOR	i < $
21151	406	12	ArrayRealVector.java	ebeMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
21151	406	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
1185	416	8	ArrayRealVector.java	ebeDivide	v	RealVector	1	RET	$ instanceof ArrayRealVector
21152	422	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < dim
21152	422	12	ArrayRealVector.java	ebeDivide	dim	int	0	NIL-FOR	i < $
21153	429	12	ArrayRealVector.java	ebeDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
21153	429	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
1186	449	8	ArrayRealVector.java	dotProduct	v	RealVector	0	RET	$ instanceof ArrayRealVector
21154	453	12	ArrayRealVector.java	dotProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
21154	453	12	ArrayRealVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
1187	494	8	ArrayRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
21155	498	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
21155	498	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
21156	506	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
21156	506	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
1188	517	8	ArrayRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof ArrayRealVector
21157	521	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
21157	521	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
21158	529	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
21158	529	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
1189	540	8	ArrayRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
21159	544	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
21159	544	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
21160	552	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
21160	552	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
1190	563	8	ArrayRealVector.java	outerProduct	v	RealVector	1	RET	$ instanceof ArrayRealVector
21161	568	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
21161	568	12	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
21162	569	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
21162	569	16	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
21163	578	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
21163	578	12	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
21164	579	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
21164	579	16	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1191	636	8	ArrayRealVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
1192	673	8	ArrayRealVector.java	setSubVector	v	RealVector	1	DEF	$ instanceof ArrayRealVector
21165	677	16	ArrayRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
21165	677	16	ArrayRealVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
21165	677	16	ArrayRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < index + $.getDimension()
1193	743	8	ArrayRealVector.java	checkVectorDimensions	THIS	ArrayRealVector	0	DimensionMismatchException	$.data.$.length != n
1193	743	8	ArrayRealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1194	757	12	ArrayRealVector.java	isNaN	THIS	ArrayRealVector	0	RET	Double.isNaN($.v)
1195	773	8	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	$.isNaN()
1196	778	12	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	Double.isInfinite($.v)
1197	789	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$ == other
1197	789	8	ArrayRealVector.java	equals	other	Object	0	RET	this == $
1198	793	8	ArrayRealVector.java	equals	other	Object	0	RET	$ instanceof RealVector
1199	798	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data.$.length != rhs.getDimension()
1199	798	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data.length != $.getDimension()
1200	802	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	$.isNaN()
21166	806	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
21166	806	8	ArrayRealVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1201	807	12	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data[i] != rhs.getEntry(i)
1201	807	12	ArrayRealVector.java	equals	i	int	0	RET	data[$] != rhs.getEntry($)
1201	807	12	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data[i] != $.getEntry(i)
1202	819	8	ArrayRealVector.java	hashCode	THIS	ArrayRealVector	0	RET	$.isNaN()
1203	834	8	ArrayRealVector.java	combineToSelf	y	RealVector	1	DEF	$ instanceof ArrayRealVector
21167	837	12	ArrayRealVector.java	combineToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.length
21167	837	12	ArrayRealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < this.data.length
21168	842	12	ArrayRealVector.java	combineToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.length
21168	842	12	ArrayRealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < this.data.length
21169	853	8	ArrayRealVector.java	walkInDefaultOrder	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
21169	853	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < data.length
21170	865	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
21170	865	8	ArrayRealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
21171	896	8	ArrayRealVector.java	walkInDefaultOrder	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
21171	896	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < data.length
21172	908	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
21172	908	8	ArrayRealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
21963	300	8	BOBYQAOptimizer.java	bobyqa	j	int	0	NIL-FOR	$ < n
21963	300	8	BOBYQAOptimizer.java	bobyqa	n	int	0	NIL-FOR	j < $
1836	304	12	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= -$.initialTrustRegionRadius
1836	304	12	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= -initialTrustRegionRadius
1837	305	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= ZERO
1837	305	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= ZERO
1838	316	19	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(j) <= $.initialTrustRegionRadius
1838	316	19	BOBYQAOptimizer.java	bobyqa	j	int	0	DEF	upperDifference.getEntry($) <= initialTrustRegionRadius
1839	317	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.upperDifference.getEntry(j) <= ZERO
1839	317	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	upperDifference.getEntry($) <= ZERO
21964	411	8	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
21964	411	8	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1840	448	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex != kbase
1840	448	12	BOBYQAOptimizer.java	bobyqb	kbase	int	0	DEF	trustRegionCenterInterpolationPointIndex != $
21965	450	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
21965	450	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
21966	451	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
21966	451	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
1841	452	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
1841	452	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
1842	459	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() > npt
1842	459	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	getEvaluations() > $
21967	460	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
21967	460	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
21968	462	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
21968	462	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
21969	466	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
21969	466	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1843	499	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm < HALF * $
1843	499	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ < HALF * rho
1844	504	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() <= nfsav + 2
1844	504	16	BOBYQAOptimizer.java	bobyqb	nfsav	int	0	DEF	getEvaluations() <= $ + 2
1845	518	16	BOBYQAOptimizer.java	bobyqb	errbig	double	0	DEF	$ > frhosq * crvmin
1845	518	16	BOBYQAOptimizer.java	bobyqb	frhosq	double	0	DEF	errbig > $ * crvmin
1845	518	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	$ > ZERO
1845	518	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	errbig > frhosq * $
21970	523	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
21970	523	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1846	525	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.lowerDifference.getEntry(j)
1846	525	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
1847	528	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.upperDifference.getEntry(j)
1847	528	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
1848	531	20	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
1848	531	20	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
21971	533	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
21971	533	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1849	539	24	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
1849	539	24	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
1850	558	12	BOBYQAOptimizer.java	bobyqb	dsq	double	0	DEF	$ <= xoptsq * ONE_OVER_A_THOUSAND
1850	558	12	BOBYQAOptimizer.java	bobyqb	xoptsq	double	0	DEF	dsq <= $ * ONE_OVER_A_THOUSAND
21972	563	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
21972	563	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
21973	566	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
21973	566	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
21974	572	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
21974	572	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
21975	576	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
21975	576	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
21976	587	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
21976	587	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
21977	590	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
21977	590	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
21978	595	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
21978	595	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
21979	597	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
21979	597	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
21980	601	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
21980	601	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
21981	607	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
21981	607	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
21982	610	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
21982	610	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
21983	622	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
21983	622	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
21984	624	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
21984	624	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
21985	628	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
21985	628	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
21986	637	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
21986	637	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1851	646	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
21987	678	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
21987	678	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
21988	689	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
21988	689	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
21989	693	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
21989	693	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
21990	703	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
21990	703	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
21991	705	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
21991	705	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
21992	709	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
21992	709	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
21993	716	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
21993	716	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
21994	721	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
21994	721	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
21995	726	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
21995	726	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1852	745	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	1	DEF	$ == 0
1853	749	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	$ > ZERO
1853	749	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	denom < $
1853	749	16	BOBYQAOptimizer.java	bobyqb	denom	double	0	DEF	$ < cauchy
21996	750	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
21996	750	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
21997	768	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
21997	768	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1854	769	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
1854	769	20	BOBYQAOptimizer.java	bobyqb	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
21998	773	20	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
21998	773	20	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
21999	782	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
21999	782	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1855	791	20	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
1855	791	20	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
1855	791	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
22000	812	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
22000	812	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1856	820	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.lowerDifference.getEntry(i)
1856	820	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
1857	823	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.upperDifference.getEntry(i)
1857	823	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
1858	830	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.isMinimize
1859	832	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
22001	843	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
22001	843	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
22002	845	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
22002	845	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
1860	847	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ == j
1860	847	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i == $
22003	854	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
22003	854	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1861	864	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm > $
1861	864	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ > rho
1862	870	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	MathIllegalStateException	$ > 0
1863	871	16	BOBYQAOptimizer.java	bobyqb	vquad	double	0	MathIllegalStateException	$ >= ZERO
1864	876	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= ONE_OVER_TEN
1865	879	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= .7
1866	886	16	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
1866	886	16	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
1867	892	16	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
1867	892	16	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
22004	899	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
22004	899	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
22005	901	24	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
22005	901	24	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
22006	910	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
22006	910	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1868	919	24	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
1868	919	24	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
1868	919	24	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
1869	930	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	$ <= HALF * biglsq
1869	930	20	BOBYQAOptimizer.java	bobyqb	biglsq	double	0	DEF	scaden <= HALF * $
22007	945	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
22007	945	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
22008	947	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
22008	947	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
22009	952	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
22009	952	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
22010	954	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
22010	954	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
22011	963	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
22011	963	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
22012	967	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
22012	967	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
22013	969	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
22013	969	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
22014	973	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
22014	973	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
22015	977	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
22015	977	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
22016	981	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
22016	981	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1870	987	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
1870	987	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
22017	991	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
22017	991	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
22018	996	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
22018	996	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
1871	997	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
1871	997	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
22019	1004	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
22019	1004	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
22020	1006	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
22020	1006	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
22021	1010	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
22021	1010	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1872	1020	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ > 0
22022	1021	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
22022	1021	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
22023	1025	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < nptm
22023	1025	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	j < $
22024	1027	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
22024	1027	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
22025	1030	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
22025	1030	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
22026	1034	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
22026	1034	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
22027	1036	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
22027	1036	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
22028	1044	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
22028	1044	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
22029	1046	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
22029	1046	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1873	1050	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
1873	1050	20	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
1874	1058	27	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
1874	1058	27	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
1875	1079	16	BOBYQAOptimizer.java	bobyqb	gqsq	double	0	DEF	$ < TEN * gisq
1875	1079	16	BOBYQAOptimizer.java	bobyqb	gisq	double	0	DEF	gqsq < TEN * $
1876	1082	16	BOBYQAOptimizer.java	bobyqb	itest	int	0	DEF	$ >= 3
22030	1083	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < max
22030	1083	20	BOBYQAOptimizer.java	bobyqb	max	int	0	NIL-FOR	i < $
1877	1084	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < n
1877	1084	24	BOBYQAOptimizer.java	bobyqb	n	int	0	DEF	i < $
1878	1087	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < npt
1878	1087	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	i < $
1879	1090	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < nh
1879	1090	24	BOBYQAOptimizer.java	bobyqb	nh	int	0	DEF	i < $
1880	1102	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
1881	1105	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f <= $ + ONE_OVER_TEN * vquad
1881	1105	12	BOBYQAOptimizer.java	bobyqb	vquad	double	0	DEF	f <= fopt + ONE_OVER_TEN * $
1881	1105	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ <= fopt + ONE_OVER_TEN * vquad
22031	1122	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
22031	1122	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
22032	1124	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
22032	1124	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1882	1129	16	BOBYQAOptimizer.java	bobyqb	sum	double	0	DEF	$ > distsq
1882	1129	16	BOBYQAOptimizer.java	bobyqb	distsq	double	0	DEF	sum > $
1883	1141	12	BOBYQAOptimizer.java	bobyqb	knew	int	0	DEF	$ >= 0
1884	1143	16	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
1885	1146	20	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
1885	1146	20	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
1886	1158	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
1887	1161	12	BOBYQAOptimizer.java	bobyqb	ratio	double	0	DEF	$ > ZERO
1888	1164	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	Math.max(delta, dnorm) > $
1888	1164	12	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	Math.max($, dnorm) > rho
1888	1164	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	Math.max(delta, $) > rho
1889	1173	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	rho > $.stoppingTrustRegionRadius
1889	1173	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	$ > stoppingTrustRegionRadius
1890	1176	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= SIXTEEN
1891	1178	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= TWO_HUNDRED_FIFTY
1892	1192	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
1893	1198	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex) <= fsave
1893	1198	12	BOBYQAOptimizer.java	bobyqb	fsave	double	0	DEF	fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex) <= $
22033	1199	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
22033	1199	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1894	1207	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
1894	1207	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
1895	1210	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
1895	1210	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
22034	1273	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
22034	1273	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
22035	1276	8	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < max
22035	1276	8	BOBYQAOptimizer.java	altmov	max	int	0	NIL-FOR	j < $
22036	1278	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
22036	1278	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
22037	1287	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
22037	1287	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
22038	1290	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
22038	1290	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
22039	1292	12	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
22039	1292	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
22040	1296	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
22040	1296	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
22041	1312	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
22041	1312	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
1896	1313	12	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
1896	1313	12	BOBYQAOptimizer.java	altmov	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
22042	1318	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
22042	1318	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
22043	1331	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
22043	1331	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1897	1333	16	BOBYQAOptimizer.java	altmov	tmp	double	1	DEF	$ > ZERO
1898	1334	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
1898	1334	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1898	1334	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
1898	1334	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1899	1338	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
1899	1338	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1899	1338	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
1899	1338	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1900	1344	23	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	$ < ZERO
1901	1345	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
1901	1345	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1901	1345	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
1901	1345	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1902	1349	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
1902	1349	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1902	1349	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
1902	1349	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1903	1364	12	BOBYQAOptimizer.java	altmov	k	int	1	DEF	$ == knew
1903	1364	12	BOBYQAOptimizer.java	altmov	knew	int	1	DEF	k == $
1904	1368	16	BOBYQAOptimizer.java	altmov	d1	double	0	DEF	Math.abs($) > Math.abs(vlag)
1904	1368	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d1) > Math.abs($)
1905	1376	16	BOBYQAOptimizer.java	altmov	d3	double	0	DEF	$ * d4 < ZERO
1905	1376	16	BOBYQAOptimizer.java	altmov	d4	double	0	DEF	d3 * $ < ZERO
1906	1378	20	BOBYQAOptimizer.java	altmov	d5	double	0	DEF	Math.abs($) > Math.abs(vlag)
1906	1378	20	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d5) > Math.abs($)
1907	1390	16	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	Math.abs($) > Math.abs(vlag)
1907	1390	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(tmp) > Math.abs($)
1908	1395	16	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ > HALF
1909	1396	20	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs($) < ONE_OVER_FOUR
1910	1409	12	BOBYQAOptimizer.java	altmov	predsq	double	0	DEF	$ > presav
1910	1409	12	BOBYQAOptimizer.java	altmov	presav	double	0	DEF	predsq > $
22044	1419	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
22044	1419	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1911	1424	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ < 0
1912	1427	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ > 0
22045	1442	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
22045	1442	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1913	1445	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.max($.trustRegionCenterOffset.getEntry(i) - $.upperDifference.getEntry(i), glagValue) < ZERO
1913	1445	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.min($.trustRegionCenterOffset.getEntry(i) - $.lowerDifference.getEntry(i), glagValue) > ZERO
1913	1445	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), $) < ZERO
1913	1445	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), $) > ZERO
1913	1445	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($), glagValue) < ZERO
1913	1445	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($), glagValue) > ZERO
1914	1452	12	BOBYQAOptimizer.java	altmov	ggfree	double	0	RET	$ == ZERO
1915	1458	12	BOBYQAOptimizer.java	altmov	tmp1	double	0	DEF	$ > ZERO
22046	1461	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
22046	1461	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1916	1462	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	work1.getEntry($) == bigstp
1916	1462	20	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	0	DEF	$.getEntry(i) == bigstp
1916	1462	20	BOBYQAOptimizer.java	altmov	bigstp	double	0	DEF	work1.getEntry(i) == $
1917	1464	24	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 <= $.lowerDifference.getEntry(i)
1917	1464	24	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ <= lowerDifference.getEntry(i)
1917	1464	24	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 <= lowerDifference.getEntry($)
1918	1469	31	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 >= $.upperDifference.getEntry(i)
1918	1469	31	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ >= upperDifference.getEntry(i)
1918	1469	31	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 >= upperDifference.getEntry($)
22047	1487	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
22047	1487	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1919	1489	16	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == bigstp
1919	1489	16	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == bigstp
1919	1489	16	BOBYQAOptimizer.java	altmov	bigstp	double	1	DEF	work1.getEntry(i) == $
1920	1494	23	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == ZERO
1920	1494	23	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
1921	1496	23	BOBYQAOptimizer.java	altmov	glagValue	double	1	DEF	$ > ZERO
22048	1510	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
22048	1510	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
22049	1512	16	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
22049	1512	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
1922	1517	12	BOBYQAOptimizer.java	altmov	iflag	int	0	DEF	$ == 1
1923	1520	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv > -$
1923	1520	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv < -$ * (ONE + Math.sqrt(TWO))
1923	1520	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ > -gw
1923	1520	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ < -gw * (ONE + Math.sqrt(TWO))
22050	1523	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
22050	1523	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1924	1541	12	BOBYQAOptimizer.java	altmov	iflag	int	1	DEF	$ == 0
22051	1542	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
22051	1542	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1925	1552	8	BOBYQAOptimizer.java	altmov	cauchy	double	0	DEF	csave > $
1925	1552	8	BOBYQAOptimizer.java	altmov	csave	double	0	DEF	$ > cauchy
22052	1553	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
22052	1553	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
22053	1599	8	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
22053	1599	8	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
22054	1601	12	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
22054	1601	12	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
22055	1604	12	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < ndim
22055	1604	12	BOBYQAOptimizer.java	prelim	ndim	int	0	NIL-FOR	i < $
22056	1608	8	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < max
22056	1608	8	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	i < $
22057	1611	8	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
22057	1611	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
22058	1613	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < max
22058	1613	12	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	j < $
22059	1625	8	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	NIL-DOWHILE	$.getEvaluations() < npt
22059	1625	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-DOWHILE	getEvaluations() < $
1926	1632	12	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= 2 * n
1926	1632	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= 2 * $
1927	1633	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ >= 1
1927	1633	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= n
1927	1633	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= $
1928	1636	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfmm) == ZERO
1928	1636	20	BOBYQAOptimizer.java	prelim	nfmm	int	0	DEF	upperDifference.getEntry($) == ZERO
1929	1641	23	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	$ > n
1929	1641	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	nfm > $
1930	1644	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.lowerDifference.getEntry(nfxm) == ZERO
1930	1644	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	lowerDifference.getEntry($) == ZERO
1931	1648	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfxm) == ZERO
1931	1648	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	upperDifference.getEntry($) == ZERO
1932	1658	16	BOBYQAOptimizer.java	prelim	n	int	0	DEF	ipt > $
1932	1658	16	BOBYQAOptimizer.java	prelim	ipt	int	0	DEF	$ > n
22060	1673	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
22060	1673	12	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
1933	1677	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.lowerDifference.getEntry(j)
1933	1677	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == lowerDifference.getEntry($)
1933	1677	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == lowerDifference.getEntry(j)
1934	1680	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.upperDifference.getEntry(j)
1934	1680	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == upperDifference.getEntry($)
1934	1680	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == upperDifference.getEntry(j)
1935	1690	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ == 1
1936	1693	19	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex)
1936	1693	19	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)
1937	1703	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= 2 * n + 1
1937	1703	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= 2 * $ + 1
1938	1704	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ >= 2
1938	1704	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= n + 1
1938	1704	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= $ + 1
1939	1707	20	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	npt < $ + n
1939	1707	20	BOBYQAOptimizer.java	prelim	n	int	0	DEF	npt < numEval + $
1939	1707	20	BOBYQAOptimizer.java	prelim	npt	int	0	DEF	$ < numEval + n
1940	1714	23	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	$ >= n + 2
1940	1714	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	numEval >= $ + 2
1941	1720	20	BOBYQAOptimizer.java	prelim	stepa	double	0	DEF	$ * stepb < ZERO
1941	1720	20	BOBYQAOptimizer.java	prelim	stepb	double	0	DEF	stepa * $ < ZERO
1942	1721	24	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry(nfm - n)
1942	1721	24	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	f < fAtInterpolationPoints.getEntry($ - n)
1942	1721	24	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(nfm - n)
1942	1721	24	BOBYQAOptimizer.java	prelim	n	int	0	DEF	f < fAtInterpolationPoints.getEntry(nfm - $)
1943	1724	28	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex == nfm
1943	1724	28	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	trustRegionCenterInterpolationPointIndex == $
22061	1851	8	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
22061	1851	8	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1944	1853	12	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) <= $.lowerDifference.getEntry(i)
1944	1853	12	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	trustRegionCenterOffset.getEntry($) <= lowerDifference.getEntry($)
1945	1854	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) >= ZERO
1945	1854	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) >= ZERO
1946	1857	19	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) >= $.upperDifference.getEntry(i)
1946	1857	19	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	trustRegionCenterOffset.getEntry($) >= upperDifference.getEntry($)
1947	1858	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) <= ZERO
1947	1858	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) <= ZERO
1948	1862	12	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) != ZERO
1948	1862	12	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
22062	1888	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
22062	1888	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1949	1889	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) != ZERO
1949	1889	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) != ZERO
1950	1891	23	BOBYQAOptimizer.java	trsbox	beta	double	1	DEF	$ == ZERO
1951	1900	12	BOBYQAOptimizer.java	trsbox	stepsq	double	0	DEF	$ == ZERO
1952	1903	12	BOBYQAOptimizer.java	trsbox	beta	double	0	DEF	$ == ZERO
1953	1907	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	gredsq * delsq <= $ * 1e-4 * $
1953	1907	12	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	gredsq * $ <= qred * 1e-4 * qred
1953	1907	12	BOBYQAOptimizer.java	trsbox	gredsq	double	0	DEF	$ * delsq <= qred * 1e-4 * qred
22063	1923	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
22063	1923	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1954	1924	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1954	1924	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
1955	1932	12	BOBYQAOptimizer.java	trsbox	resid	double	0	DEF	$ <= ZERO
1956	1936	12	BOBYQAOptimizer.java	trsbox	ds	double	1	DEF	$ < ZERO
1957	1942	12	BOBYQAOptimizer.java	trsbox	shs	double	0	DEF	$ > ZERO
22064	1951	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
22064	1951	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1958	1952	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	s.getEntry($) != ZERO
1958	1952	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
1959	1954	20	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	s.getEntry($) > ZERO
1959	1954	20	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	1	DEF	$.getEntry(i) > ZERO
1960	1959	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ < stplen
1960	1959	20	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	temp < $
1961	1969	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ > ZERO
1962	1972	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ == -1
1962	1972	16	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
1963	1974	20	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ == MINUS_ONE
22065	1980	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
22065	1980	16	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1964	1982	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1964	1982	20	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
1965	1997	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
1966	2000	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	s.getEntry($) < ZERO
1966	2000	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(iact) < ZERO
1967	2006	16	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	$ <= ZERO
1968	2015	12	BOBYQAOptimizer.java	trsbox	blen	double	0	DEF	stplen < $
1968	2015	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ < blen
1969	2016	16	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ == itermax
1969	2016	16	BOBYQAOptimizer.java	trsbox	itermax	int	0	DEF	iterc == $
1970	2019	16	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= qred * .01
1970	2019	16	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec <= $ * .01
1971	2037	12	BOBYQAOptimizer.java	trsbox	n	int	0	DEF	nact >= $ - 1
1971	2037	12	BOBYQAOptimizer.java	trsbox	nact	int	0	DEF	$ >= n - 1
22066	2043	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
22066	2043	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1972	2044	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
1972	2044	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
1973	2066	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	temp <= $ * 1e-4 * $
1973	2066	12	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ <= qred * 1e-4 * qred
22067	2070	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
22067	2070	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1974	2071	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
1974	2071	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
22068	2086	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
22068	2086	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1975	2087	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1975	2087	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
1976	2090	20	BOBYQAOptimizer.java	trsbox	tempa	double	1	DEF	$ <= ZERO
1977	2094	27	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	$ <= ZERO
1978	2107	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
1979	2109	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempa
1979	2109	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempa
1979	2109	24	BOBYQAOptimizer.java	trsbox	tempa	double	0	DEF	angbd * temp > $
1980	2118	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
1981	2120	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempb
1981	2120	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempb
1981	2120	24	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	angbd * temp > $
22069	2138	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
22069	2138	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1982	2139	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1982	2139	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
22070	2154	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < iu
22070	2154	12	BOBYQAOptimizer.java	trsbox	iu	int	0	NIL-FOR	i < $
1983	2159	16	BOBYQAOptimizer.java	trsbox	redmax	double	1	DEF	rednew > $
1983	2159	16	BOBYQAOptimizer.java	trsbox	rednew	double	1	DEF	$ > redmax
1984	2163	23	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ == isav + 1
1984	2163	23	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	i == $ + 1
1985	2172	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < 0
1986	2175	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav < $
1986	2175	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < iu
1987	2183	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= ZERO
22071	2193	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
22071	2193	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1988	2195	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1988	2195	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
1989	2205	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav == $
1989	2205	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
1989	2205	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ == iu
1990	2214	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ > qred * .01
1990	2214	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec > $ * .01
22072	2221	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
22072	2221	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1991	2227	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == MINUS_ONE
1991	2227	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == MINUS_ONE
1992	2230	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ONE
1992	2230	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ONE
22073	2247	12	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	$ < n
22073	2247	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	j < $
22074	2249	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ <= j
22074	2249	16	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	i <= $
1993	2250	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ < j
1993	2250	20	BOBYQAOptimizer.java	trsbox	j	int	0	DEF	i < $
22075	2258	12	BOBYQAOptimizer.java	trsbox	k	int	0	NIL-FOR	$ < npt
22075	2258	12	BOBYQAOptimizer.java	trsbox	npt	int	0	NIL-FOR	k < $
1994	2259	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.modelSecondDerivativesParameters.getEntry(k) != ZERO
1994	2259	16	BOBYQAOptimizer.java	trsbox	k	int	0	DEF	modelSecondDerivativesParameters.getEntry($) != ZERO
22076	2260	20	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
22076	2260	20	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1995	2265	12	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ != ZERO
1996	2268	12	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ > itcsav
1996	2268	12	BOBYQAOptimizer.java	trsbox	itcsav	int	0	DEF	iterc > $
22077	2271	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
22077	2271	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
22078	2312	8	BOBYQAOptimizer.java	update	k	int	0	NIL-FOR	$ < npt
22078	2312	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	k < $
22079	2313	12	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
22079	2313	12	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
22080	2322	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
22080	2322	8	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
1997	2324	12	BOBYQAOptimizer.java	update	d1	double	0	DEF	Math.abs($) > ztest
1997	2324	12	BOBYQAOptimizer.java	update	ztest	double	0	DEF	Math.abs(d1) > $
22081	2332	16	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
22081	2332	16	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
22082	2344	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
22082	2344	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
22083	2356	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
22083	2356	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
22084	2363	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < n
22084	2363	8	BOBYQAOptimizer.java	update	n	int	0	NIL-FOR	j < $
22085	2368	12	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ <= jp
22085	2368	12	BOBYQAOptimizer.java	update	jp	int	0	NIL-FOR	i <= $
1998	2371	16	BOBYQAOptimizer.java	update	i	int	0	DEF	$ >= npt
1998	2371	16	BOBYQAOptimizer.java	update	npt	int	0	DEF	i >= $
1999	2392	8	BOBYQAOptimizer.java	setup	dimension	int	0	NumberIsTooSmallException	$ < MINIMUM_PROBLEM_DIMENSION
2000	2397	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints < nPointsInterval[0]
2000	2397	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints > nPointsInterval[1]
2000	2397	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints < $[0]
2000	2397	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints > $[1]
22086	2410	8	BOBYQAOptimizer.java	setup	i	int	0	NIL-FOR	$ < dimension
22086	2410	8	BOBYQAOptimizer.java	setup	dimension	int	0	NIL-FOR	i < $
2001	2414	8	BOBYQAOptimizer.java	setup	requiredMinDiff	double	0	DEF	minDiff < $
2001	2414	8	BOBYQAOptimizer.java	setup	minDiff	double	0	DEF	$ < requiredMinDiff
603	150	8	BSPTree.java	insertCut	THIS	BSPTree	0	DEF	$.cut != null
604	156	8	BSPTree.java	insertCut	chopped	SubHyperplane<S>	0	RET	$.isEmpty()
605	181	8	BSPTree.java	copySelf	THIS	BSPTree	0	RET	$.cut == null
606	242	8	BSPTree.java	visit	THIS	BSPTree	1	DEF	$.cut == null
20934	293	8	BSPTree.java	fitToCell	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
20934	293	8	BSPTree.java	fitToCell	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
607	294	12	BSPTree.java	fitToCell	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
607	294	12	BSPTree.java	fitToCell	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
608	312	8	BSPTree.java	getCell	THIS	BSPTree	0	RET	$.cut == null
609	319	8	BSPTree.java	getCell	offset	double	1	RET	FastMath.abs($) < 1.0e-10
610	321	15	BSPTree.java	getCell	offset	double	1	RET	$ <= 0
611	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute != null
611	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute.equals($.minus.$.attribute)
611	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.cut != null
611	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.cut == null
611	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute == null
611	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.attribute == null
611	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.cut == null
612	385	8	BSPTree.java	merge	THIS	BSPTree	1	RET	$.cut == null
613	388	15	BSPTree.java	merge	THIS	BSPTree	1	RET	tree.$.cut == null
613	388	15	BSPTree.java	merge	tree	BSPTree<S>	1	RET	$.cut == null
614	394	12	BSPTree.java	merge	parentTree	BSPTree<S>	0	DEF	$ != null
615	396	16	BSPTree.java	merge	isPlusChild	boolean	1	DEF	$
616	407	12	BSPTree.java	merge	THIS	BSPTree	0	DEF	merged.$.cut != null
616	407	12	BSPTree.java	merge	merged	BSPTree<S>	0	DEF	$.cut != null
617	489	8	BSPTree.java	split	THIS	BSPTree	0	RET	$.cut == null
618	500	12	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
618	500	12	BSPTree.java	split	sHyperplane	Hyperplane<S>	1	DEF	cut.side($) == Side.PLUS
619	516	12	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
619	516	12	BSPTree.java	split	sHyperplane	Hyperplane<S>	1	DEF	cut.side($) == Side.PLUS
620	568	8	BSPTree.java	insertInTree	parentTree	BSPTree<S>	0	DEF	$ != null
621	569	12	BSPTree.java	insertInTree	isPlusChild	boolean	1	DEF	$
622	577	8	BSPTree.java	insertInTree	THIS	BSPTree	0	DEF	$.cut != null
20935	580	12	BSPTree.java	insertInTree	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
20935	580	12	BSPTree.java	insertInTree	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
623	587	16	BSPTree.java	insertInTree	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
623	587	16	BSPTree.java	insertInTree	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
624	614	8	BSPTree.java	chopOffMinus	THIS	BSPTree	0	DEF	$.cut != null
625	628	8	BSPTree.java	chopOffPlus	THIS	BSPTree	0	DEF	$.cut != null
2017	106	8	BaseAbstractMultivariateOptimizer.java	optimize	f	FUNC	0	NullArgumentException	$ == null
2018	109	8	BaseAbstractMultivariateOptimizer.java	optimize	goalType	GoalType	0	NullArgumentException	$ == null
2019	112	8	BaseAbstractMultivariateOptimizer.java	optimize	startPoint	double[]	0	NullArgumentException	$ == null
1777	96	8	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	lower	double[]	0	NumberIsTooSmallException	$ != null
1778	97	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	THIS	BaseAbstractMultivariateSimpleBoundsOptimizer	0	DimensionMismatchException	lower.$.length != dim
1778	97	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	DimensionMismatchException	lower.length != $
1778	97	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	lower	double[]	0	DimensionMismatchException	$.length != dim
21907	100	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	i	int	0	NIL-FOR	$ < dim
21907	100	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	NIL-FOR	i < $
1779	103	16	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	v	double	0	NumberIsTooSmallException	$ < lo
1779	103	16	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	lo	double	0	NumberIsTooSmallException	v < $
1780	108	8	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	upper	double[]	0	NumberIsTooLargeException	$ != null
1781	109	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	THIS	BaseAbstractMultivariateSimpleBoundsOptimizer	0	DimensionMismatchException	upper.$.length != dim
1781	109	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	DimensionMismatchException	upper.length != $
1781	109	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	upper	double[]	0	DimensionMismatchException	$.length != dim
21908	112	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	i	int	0	NIL-FOR	$ < dim
21908	112	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	NIL-FOR	i < $
1782	115	16	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	v	double	0	NumberIsTooLargeException	$ > hi
1782	115	16	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	hi	double	0	NumberIsTooLargeException	v > $
1783	122	8	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	lower	double[]	1	DEF	$ == null
21909	124	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	i	int	0	NIL-FOR	$ < dim
21909	124	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	NIL-FOR	i < $
1784	130	8	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	upper	double[]	1	DEF	$ == null
21910	132	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	i	int	0	NIL-FOR	$ < dim
21910	132	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	NIL-FOR	i < $
1785	108	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	f	FUNC	0	NullArgumentException	$ == null
1786	111	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	t	double[]	0	NullArgumentException	$ == null
1787	114	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	w	double[]	0	NullArgumentException	$ == null
1788	117	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	startPoint	double[]	0	NullArgumentException	$ == null
1789	120	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	THIS	BaseAbstractMultivariateVectorOptimizer	0	DimensionMismatchException	t.$.length != w.$.length
1789	120	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	t	double[]	0	DimensionMismatchException	$.length != w.length
1789	120	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	w	double[]	0	DimensionMismatchException	t.length != $.length
3490	120	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	minimalIterationCount	int	0	NotStrictlyPositiveException	$ <= 0
3491	123	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	minimalIterationCount	int	0	NumberIsTooSmallException	maximalIterationCount <= $
3491	123	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	maximalIterationCount	int	0	NumberIsTooSmallException	$ <= minimalIterationCount
1628	117	8	BaseAbstractUnivariateOptimizer.java	optimize	f	UnivariateFunction	0	NullArgumentException	$ == null
1629	120	8	BaseAbstractUnivariateOptimizer.java	optimize	goalType	GoalType	0	NullArgumentException	$ == null
1620	73	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	optimizer	BaseMultivariateOptimizer<FUNC>	0	NullArgumentException	$ == null
1620	73	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
1621	77	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1622	113	8	BaseMultivariateMultiStartOptimizer.java	getOptima	THIS	BaseMultivariateMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
21793	146	8	BaseMultivariateMultiStartOptimizer.java	optimize	THIS	BaseMultivariateMultiStartOptimizer	0	NIL-FOR	i < $.starts
21793	146	8	BaseMultivariateMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1623	162	8	BaseMultivariateMultiStartOptimizer.java	optimize	THIS	BaseMultivariateMultiStartOptimizer	0	DEF	$.optima[0] == null
1624	73	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	optimizer	BaseMultivariateVectorOptimizer<FUNC>	0	NullArgumentException	$ == null
1624	73	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
1625	77	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1626	114	8	BaseMultivariateVectorMultiStartOptimizer.java	getOptima	THIS	BaseMultivariateVectorMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
21794	147	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	THIS	BaseMultivariateVectorMultiStartOptimizer	0	NIL-FOR	i < $.starts
21794	147	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1627	166	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	THIS	BaseMultivariateVectorMultiStartOptimizer	0	DEF	$.optima[0] == null
3481	53	8	BaseRuleFactory.java	getRule	cached	Pair<double[],double[]>	0	DEF	$ == null
3482	80	8	BaseRuleFactory.java	getRuleInternal	rule	Pair<T[],T[]>	0	RET	$ == null
3483	96	8	BaseRuleFactory.java	addRule	THIS	BaseRuleFactory	0	DimensionMismatchException	rule.getFirst().length != rule.getSecond().length
3483	96	8	BaseRuleFactory.java	addRule	rule	Pair<T[],T[]>	0	DimensionMismatchException	$.getFirst().length != $.getSecond().length
22812	128	8	BaseRuleFactory.java	convertToDouble	i	int	0	NIL-FOR	$ < len
22812	128	8	BaseRuleFactory.java	convertToDouble	len	int	0	NIL-FOR	i < $
3263	140	8	BaseSecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
3264	143	8	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
3265	168	12	BaseSecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
3266	173	12	BaseSecantSolver.java	doSolve	fx	double	1	DEF	f1 * $ < 0
3266	173	12	BaseSecantSolver.java	doSolve	f1	double	1	DEF	$ * fx < 0
3267	190	20	BaseSecantSolver.java	doSolve	x	double	0	ConvergenceException	$ == x1
3267	190	20	BaseSecantSolver.java	doSolve	x1	double	0	ConvergenceException	x == $
3268	206	12	BaseSecantSolver.java	doSolve	f1	double	0	MathInternalError:RET	FastMath.abs($) <= ftol
3268	206	12	BaseSecantSolver.java	doSolve	ftol	double	0	MathInternalError:RET	FastMath.abs(f1) <= $
3269	211	20	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
3270	216	20	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
3271	221	20	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ <= 0
3272	226	20	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ >= 0
3273	237	12	BaseSecantSolver.java	doSolve	x0	double	0	MathInternalError:RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1), atol)
3273	237	12	BaseSecantSolver.java	doSolve	x1	double	0	MathInternalError:RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($), atol)
3273	237	12	BaseSecantSolver.java	doSolve	atol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), $)
3273	237	12	BaseSecantSolver.java	doSolve	rtol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1), atol)
2593	120	8	Beta.java	regularizedBeta	x	double	1	DEF	Double.isNaN($)
2593	120	8	Beta.java	regularizedBeta	x	double	1	DEF	$ > 1
2593	120	8	Beta.java	regularizedBeta	x	double	1	DEF	$ < 0
2593	120	8	Beta.java	regularizedBeta	a	double	1	DEF	Double.isNaN($)
2593	120	8	Beta.java	regularizedBeta	a	double	1	DEF	$ <= 0.0
2593	120	8	Beta.java	regularizedBeta	b	double	1	DEF	Double.isNaN($)
2593	120	8	Beta.java	regularizedBeta	b	double	1	DEF	$ <= 0.0
2594	128	15	Beta.java	regularizedBeta	x	double	1	DEF	$ > (a + 1.0) / (a + b + 2.0)
2594	128	15	Beta.java	regularizedBeta	a	double	1	DEF	x > ($ + 1.0) / ($ + b + 2.0)
2594	128	15	Beta.java	regularizedBeta	b	double	1	DEF	x > (a + 1.0) / (a + $ + 2.0)
2595	195	8	Beta.java	logBeta	a	double	1	DEF	Double.isNaN($)
2595	195	8	Beta.java	logBeta	a	double	1	DEF	$ <= 0.0
2595	195	8	Beta.java	logBeta	b	double	1	DEF	Double.isNaN($)
2595	195	8	Beta.java	logBeta	b	double	1	DEF	$ <= 0.0
987	120	8	BetaDistribution.java	recomputeZ	THIS	BetaDistribution	0	DEF	Double.isNaN($.z)
988	128	8	BetaDistribution.java	density	x	double	1	RET	$ > 1
988	128	8	BetaDistribution.java	density	x	double	1	RET	$ < 0
989	130	15	BetaDistribution.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 0
990	131	12	BetaDistribution.java	density	THIS	BetaDistribution	0	NumberIsTooSmallException	$.alpha < 1
991	135	15	BetaDistribution.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 1
992	136	12	BetaDistribution.java	density	THIS	BetaDistribution	0	NumberIsTooSmallException	$.beta < 1
993	149	8	BetaDistribution.java	cumulativeProbability	x	double	1	RET	$ <= 0
994	151	15	BetaDistribution.java	cumulativeProbability	x	double	1	RET	$ >= 1
1373	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	m	int	1	DEF	$ >= n
1373	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	n	int	1	DEF	m >= $
1374	90	8	BiDiagonalTransformer.java	getU	THIS	BiDiagonalTransformer	0	DEF	$.cachedU == null
21433	100	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= p
21433	100	12	BiDiagonalTransformer.java	getU	p	int	0	NIL-FOR	k >= $
21434	105	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= diagOffset
21434	105	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	NIL-FOR	k >= $
1375	108	16	BiDiagonalTransformer.java	getU	hK	double[]	0	DEF	$[k - diagOffset] != 0.0
1375	108	16	BiDiagonalTransformer.java	getU	k	int	0	DEF	hK[$ - diagOffset] != 0.0
1375	108	16	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	hK[k - $] != 0.0
21435	109	20	BiDiagonalTransformer.java	getU	j	int	0	NIL-FOR	$ < m
21435	109	20	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	j < $
21436	111	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
21436	111	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
21437	116	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
21437	116	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
1376	122	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	$ > 0
1377	139	8	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	$.cachedB == null
21438	144	12	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	NIL-FOR	i < $.main.$.length
21438	144	12	BiDiagonalTransformer.java	getB	i	int	0	NIL-FOR	$ < main.length
1378	146	16	BiDiagonalTransformer.java	getB	m	int	1	DEF	$ < n
1378	146	16	BiDiagonalTransformer.java	getB	n	int	1	DEF	m < $
1379	147	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ > 0
1380	151	20	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1380	151	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ < main.length - 1
1381	171	8	BiDiagonalTransformer.java	getV	THIS	BiDiagonalTransformer	0	DEF	$.cachedV == null
21439	181	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= p
21439	181	12	BiDiagonalTransformer.java	getV	p	int	0	NIL-FOR	k >= $
21440	186	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= diagOffset
21440	186	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	NIL-FOR	k >= $
1382	189	16	BiDiagonalTransformer.java	getV	hK	double[]	0	DEF	$[k] != 0.0
1382	189	16	BiDiagonalTransformer.java	getV	k	int	0	DEF	hK[$] != 0.0
21441	190	20	BiDiagonalTransformer.java	getV	j	int	0	NIL-FOR	$ < n
21441	190	20	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	j < $
21442	192	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
21442	192	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
21443	197	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
21443	197	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
1383	203	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	DEF	$ > 0
21444	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	NIL-FOR	$ < n
21444	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	k < $
21445	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
21445	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1384	272	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	a	double	0	DEF	$ != 0.0
21446	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
21446	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
21447	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
21447	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
21448	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
21448	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1385	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	DEF	$ < n - 1
1385	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	DEF	k < $ - 1
21449	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
21449	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
1386	297	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	b	double	0	DEF	$ != 0.0
21450	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
21450	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
21451	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
21451	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
21452	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
21452	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
21453	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	NIL-FOR	$ < m
21453	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	k < $
21454	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
21454	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1387	336	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	a	double	0	DEF	$ != 0.0
21455	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
21455	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
21456	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
21456	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
21457	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
21457	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1388	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	DEF	$ < m - 1
1388	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	DEF	k < $ - 1
21458	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
21458	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
1389	361	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	b	double	0	DEF	$ != 0.0
21459	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
21459	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
21460	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
21460	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
21461	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
21461	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
3204	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
3204	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
3204	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
3204	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
3204	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$.length == 0
3204	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$[0].length == 0
3205	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
3205	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
3205	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	xLen != $.length
3206	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
3206	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
3206	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	xLen != $.length
3207	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
3207	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
3207	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	xLen != $.length
3208	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
3208	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
3208	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	xLen != $.length
22643	127	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
22643	127	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
3209	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
3209	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
3209	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
3209	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	$[i].length != yLen
3210	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
3210	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
3210	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
3210	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	$[i].length != yLen
3211	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
3211	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
3211	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
3211	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
3212	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
3212	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
3212	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
3212	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
22644	141	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
22644	141	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
3213	160	8	BicubicSplineInterpolatingFunction.java	value	i	int	0	OutOfRangeException	$ == -1
3214	164	8	BicubicSplineInterpolatingFunction.java	value	j	int	0	OutOfRangeException	$ == -1
3215	226	8	BicubicSplineInterpolatingFunction.java	partialDerivative	THIS	BicubicSplineInterpolatingFunction	0	DEF	$.partialDerivatives == null
3216	231	8	BicubicSplineInterpolatingFunction.java	partialDerivative	i	int	0	OutOfRangeException	$ == -1
3217	235	8	BicubicSplineInterpolatingFunction.java	partialDerivative	j	int	0	OutOfRangeException	$ == -1
22645	253	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < lastI
22645	253	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastI	int	0	NIL-FOR	i < $
22646	254	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < lastJ
22646	254	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastJ	int	0	NIL-FOR	j < $
3218	273	8	BicubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ < val[0]
3218	273	8	BicubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c < $[0]
22647	278	8	BicubicSplineInterpolatingFunction.java	searchIndex	i	int	0	NIL-FOR	$ < max
22647	278	8	BicubicSplineInterpolatingFunction.java	searchIndex	max	int	0	NIL-FOR	i < $
3219	279	12	BicubicSplineInterpolatingFunction.java	searchIndex	i	int	0	RET	c <= val[$]
3219	279	12	BicubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ <= val[i]
3219	279	12	BicubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c <= $[i]
22648	319	8	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < 16
22649	322	12	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < 16
22650	367	8	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	i	int	0	NIL-FOR	$ < N
22651	368	12	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	j	int	0	NIL-FOR	$ < N
3220	378	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
3220	378	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
3221	381	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
3221	381	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
22652	406	8	BicubicSplineInterpolatingFunction.java	apply	i	int	0	NIL-FOR	$ < N
22653	407	12	BicubicSplineInterpolatingFunction.java	apply	j	int	0	NIL-FOR	$ < N
3222	419	8	BicubicSplineInterpolatingFunction.java	partialDerivativeX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeX == null
3223	429	8	BicubicSplineInterpolatingFunction.java	partialDerivativeY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeY == null
3224	439	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXX == null
3225	449	8	BicubicSplineInterpolatingFunction.java	partialDerivativeYY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeYY == null
3226	459	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXY == null
22654	476	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < N
22655	477	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < N
3201	39	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3201	39	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3201	39	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3201	39	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3201	39	8	BicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3201	39	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
3202	42	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3202	42	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3202	42	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
22631	57	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
22631	57	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3203	58	12	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3203	58	12	BicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3203	58	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3203	58	12	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
22632	62	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
22632	62	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
22633	72	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
22633	72	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
22634	79	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
22634	79	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
22635	85	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
22635	85	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
22636	87	12	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
22636	87	12	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
22637	94	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
22637	94	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
22638	96	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
22638	96	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
22639	103	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
22639	103	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
22640	106	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
22640	106	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
843	123	8	BigFraction.java	BigFraction	den	BigInteger	0	ZeroException	BigInteger.ZERO.equals($)
844	126	8	BigFraction.java	BigFraction	num	BigInteger	1	DEF	BigInteger.ZERO.equals($)
845	133	12	BigFraction.java	BigFraction	gcd	BigInteger	0	DEF	BigInteger.ONE.compareTo($) < 0
846	139	12	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.compareTo($) > 0
847	173	8	BigFraction.java	BigFraction	value	double	0	MathIllegalArgumentException	Double.isNaN($)
848	176	8	BigFraction.java	BigFraction	value	double	0	MathIllegalArgumentException	Double.isInfinite($)
849	185	8	BigFraction.java	BigFraction	exponent	long	0	DEF	$ != 0
850	189	8	BigFraction.java	BigFraction	sign	long	0	DEF	$ != 0
20953	193	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x1) == 0
20953	193	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x001ffffffffffffeL) != 0
851	198	8	BigFraction.java	BigFraction	k	int	1	DEF	$ < 0
852	275	8	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	a0 > $
852	275	8	BigFraction.java	BigFraction	a0	long	0	FractionConversionException	$ > overflow
853	281	8	BigFraction.java	BigFraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
853	281	8	BigFraction.java	BigFraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
853	281	8	BigFraction.java	BigFraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
20954	297	8	BigFraction.java	BigFraction	stop	boolean	0	NIL-DOWHILE	$
854	303	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	p2 > $
854	303	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	q2 > $
854	303	12	BigFraction.java	BigFraction	p2	long	0	FractionConversionException	$ > overflow
854	303	12	BigFraction.java	BigFraction	q2	long	0	FractionConversionException	$ > overflow
855	308	12	BigFraction.java	BigFraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
855	308	12	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
855	308	12	BigFraction.java	BigFraction	n	int	1	DEF	$ < maxIterations
855	308	12	BigFraction.java	BigFraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
855	308	12	BigFraction.java	BigFraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
855	308	12	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
855	308	12	BigFraction.java	BigFraction	maxIterations	int	1	DEF	n < $
856	322	8	BigFraction.java	BigFraction	n	int	0	FractionConversionException	$ >= maxIterations
856	322	8	BigFraction.java	BigFraction	maxIterations	int	0	FractionConversionException	n >= $
857	326	8	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
857	326	8	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
858	433	8	BigFraction.java	getReducedFraction	numerator	int	0	RET	$ == 0
859	508	8	BigFraction.java	add	fraction	BigFraction	0	NullArgumentException	$ == null
860	511	8	BigFraction.java	add	fraction	BigFraction	0	RET	ZERO.equals($)
861	518	8	BigFraction.java	add	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
861	518	8	BigFraction.java	add	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
862	612	8	BigFraction.java	divide	bg	BigInteger	0	NullArgumentException	$ == null
863	615	8	BigFraction.java	divide	bg	BigInteger	0	MathArithmeticException	BigInteger.ZERO.equals($)
864	661	8	BigFraction.java	divide	fraction	BigFraction	0	NullArgumentException	$ == null
865	664	8	BigFraction.java	divide	THIS	BigFraction	0	MathArithmeticException	BigInteger.ZERO.equals(fraction.$.numerator)
865	664	8	BigFraction.java	divide	fraction	BigFraction	0	MathArithmeticException	BigInteger.ZERO.equals($.numerator)
866	683	8	BigFraction.java	doubleValue	result	double	0	DEF	Double.isNaN($)
867	713	8	BigFraction.java	equals	THIS	BigFraction	1	DEF	$ == other
867	713	8	BigFraction.java	equals	other	Object	1	DEF	this == $
868	715	15	BigFraction.java	equals	other	Object	0	DEF	$ instanceof BigFraction
869	736	8	BigFraction.java	floatValue	result	float	0	DEF	Double.isNaN($)
870	865	8	BigFraction.java	multiply	bg	BigInteger	0	NullArgumentException	$ == null
871	910	8	BigFraction.java	multiply	fraction	BigFraction	0	NullArgumentException	$ == null
872	913	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	fraction.$.numerator.equals(BigInteger.ZERO)
872	913	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
872	913	8	BigFraction.java	multiply	fraction	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
873	957	8	BigFraction.java	pow	exponent	int	0	RET	$ < 0
874	974	8	BigFraction.java	pow	exponent	long	0	RET	$ < 0
875	993	8	BigFraction.java	pow	exponent	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
876	1052	8	BigFraction.java	subtract	bg	BigInteger	0	NullArgumentException	$ == null
877	1095	8	BigFraction.java	subtract	fraction	BigFraction	0	NullArgumentException	$ == null
878	1098	8	BigFraction.java	subtract	fraction	BigFraction	0	RET	ZERO.equals($)
879	1104	8	BigFraction.java	subtract	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
879	1104	8	BigFraction.java	subtract	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
880	1127	8	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ONE.equals($.denominator)
881	1129	15	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ZERO.equals($.numerator)
882	169	8	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigFraction
883	171	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigInteger
884	173	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
885	194	8	BigFractionFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
886	216	8	BigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
887	249	8	BigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
20955	272	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	Character.isDigit(source.charAt($))
20955	272	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	$ < source.length()
20955	272	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	Character.isDigit($.charAt(end))
20955	272	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	end < $.length()
202	306	8	BigReal.java	equals	THIS	BigReal	0	RET	$ == other
202	306	8	BigReal.java	equals	other	Object	0	RET	this == $
203	310	8	BigReal.java	equals	other	Object	0	RET	$ instanceof BigReal
2569	59	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i < 0
2569	59	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i >1
22338	74	8	BinaryChromosome.java	randomBinaryRepresentation	j	int	0	NIL-FOR	$<length
22338	74	8	BinaryChromosome.java	randomBinaryRepresentation	length	int	0	NIL-FOR	j<$
2570	86	8	BinaryChromosome.java	isSame	another	Chromosome	0	RET	$ instanceof BinaryChromosome
2571	91	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getLength() != anotherBc.getLength()
2571	91	8	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getLength() != $.getLength()
22339	95	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	NIL-FOR	i< $.getRepresentation().size()
22339	95	8	BinaryChromosome.java	isSame	i	int	0	NIL-FOR	$< getRepresentation().size()
2572	96	12	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getRepresentation().get(i).equals(anotherBc.getRepresentation().get(i))
2572	96	12	BinaryChromosome.java	isSame	i	int	0	RET	getRepresentation().get($).equals(anotherBc.getRepresentation().get($))
2572	96	12	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getRepresentation().get(i).equals($.getRepresentation().get(i))
2583	41	8	BinaryMutation.java	mutate	original	Chromosome	0	MathIllegalArgumentException	$ instanceof BinaryChromosome
1045	70	8	BinomialDistribution.java	BinomialDistribution	trials	int	0	NotPositiveException	$ < 0
1046	74	8	BinomialDistribution.java	BinomialDistribution	p	double	0	OutOfRangeException	$ > 1
1046	74	8	BinomialDistribution.java	BinomialDistribution	p	double	0	OutOfRangeException	$ < 0
1047	103	8	BinomialDistribution.java	probability	THIS	BinomialDistribution	1	DEF	x > $.numberOfTrials
1047	103	8	BinomialDistribution.java	probability	x	int	1	DEF	$ > numberOfTrials
1047	103	8	BinomialDistribution.java	probability	x	int	1	DEF	$ < 0
1048	116	8	BinomialDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
1049	118	15	BinomialDistribution.java	cumulativeProbability	THIS	BinomialDistribution	1	DEF	x >= $.numberOfTrials
1049	118	15	BinomialDistribution.java	cumulativeProbability	x	int	1	DEF	$ >= numberOfTrials
3337	76	12	BisectionSolver.java	doSolve	fm	double	1	DEF	$ * fmin > 0
3337	76	12	BisectionSolver.java	doSolve	fmin	double	1	DEF	fm * $ > 0
3338	84	12	BisectionSolver.java	doSolve	min	double	0	RET	FastMath.abs(max - $) <= absoluteAccuracy
3338	84	12	BisectionSolver.java	doSolve	max	double	0	RET	FastMath.abs($ - min) <= absoluteAccuracy
3338	84	12	BisectionSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(max - min) <= $
22321	68	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < iEnd
22321	68	8	BitsStreamGenerator.java	nextBytes	iEnd	int	0	NIL-WHILE	i < $
22322	77	8	BitsStreamGenerator.java	nextBytes	THIS	BitsStreamGenerator	0	NIL-WHILE	i < bytes.$.length
22322	77	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < bytes.length
22322	77	8	BitsStreamGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	i < $.length
2524	99	8	BitsStreamGenerator.java	nextGaussian	THIS	BitsStreamGenerator	1	DEF	Double.isNaN($.nextGaussian)
2525	138	8	BitsStreamGenerator.java	nextInt	n	int	0	RET	$ > 0
2526	139	12	BitsStreamGenerator.java	nextInt	n	int	0	RET	($ & -$) == $
22323	144	12	BitsStreamGenerator.java	nextInt	bits	int	0	NIL-DOWHILE	$ - val + (n - 1) < 0
22323	144	12	BitsStreamGenerator.java	nextInt	val	int	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
22323	144	12	BitsStreamGenerator.java	nextInt	n	int	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
1127	150	8	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	1	DEF	$
21007	159	8	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
21007	159	8	BlockFieldMatrix.java	BlockFieldMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
21008	161	12	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
21008	161	12	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1128	162	16	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1128	162	16	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1128	162	16	BlockFieldMatrix.java	BlockFieldMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1128	162	16	BlockFieldMatrix.java	BlockFieldMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1128	162	16	BlockFieldMatrix.java	BlockFieldMatrix	blockData	T[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1129	166	16	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	0	DEF	$
21009	205	8	BlockFieldMatrix.java	toBlocksLayout	THIS	BlockFieldMatrix	0	NIL-FOR	i < rawData.$.length
21009	205	8	BlockFieldMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
21009	205	8	BlockFieldMatrix.java	toBlocksLayout	rawData	T[][]	0	NIL-FOR	i < $.length
1130	207	12	BlockFieldMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1130	207	12	BlockFieldMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
21010	216	8	BlockFieldMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
21010	216	8	BlockFieldMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
21011	220	12	BlockFieldMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
21011	220	12	BlockFieldMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
21012	231	16	BlockFieldMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
21012	231	16	BlockFieldMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
21013	265	8	BlockFieldMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
21013	265	8	BlockFieldMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
21014	269	12	BlockFieldMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
21014	269	12	BlockFieldMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
21015	295	8	BlockFieldMatrix.java	copy	THIS	BlockFieldMatrix	0	NIL-FOR	i < $.blocks.$.length
21015	295	8	BlockFieldMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
21016	316	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
21016	316	12	BlockFieldMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
21016	316	12	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
21017	317	16	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
21017	317	16	BlockFieldMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
21017	317	16	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
21018	327	20	BlockFieldMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
21018	327	20	BlockFieldMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
21019	328	24	BlockFieldMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
21019	328	24	BlockFieldMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
21020	359	8	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
21020	359	8	BlockFieldMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
21020	359	8	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
21021	363	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
21021	363	12	BlockFieldMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
21021	363	12	BlockFieldMatrix.java	add	outBlock	T[]	0	NIL-FOR	k < $.length
21022	385	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
21022	385	12	BlockFieldMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
21022	385	12	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
21023	386	16	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
21023	386	16	BlockFieldMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
21023	386	16	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
21024	396	20	BlockFieldMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
21024	396	20	BlockFieldMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
21025	397	24	BlockFieldMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
21025	397	24	BlockFieldMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
21026	427	8	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
21026	427	8	BlockFieldMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
21026	427	8	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
21027	431	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
21027	431	12	BlockFieldMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
21027	431	12	BlockFieldMatrix.java	subtract	outBlock	T[]	0	NIL-FOR	k < $.length
21028	445	8	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
21028	445	8	BlockFieldMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
21028	445	8	BlockFieldMatrix.java	scalarAdd	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
21029	448	12	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
21029	448	12	BlockFieldMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
21029	448	12	BlockFieldMatrix.java	scalarAdd	outBlock	T[]	0	NIL-FOR	k < $.length
21030	463	8	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
21030	463	8	BlockFieldMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
21030	463	8	BlockFieldMatrix.java	scalarMultiply	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
21031	466	12	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
21031	466	12	BlockFieldMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
21031	466	12	BlockFieldMatrix.java	scalarMultiply	outBlock	T[]	0	NIL-FOR	k < $.length
21032	489	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
21032	489	12	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
21032	489	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
21033	494	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
21033	494	16	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
21033	494	16	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
21034	503	20	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
21034	503	20	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
21035	508	24	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
21035	508	24	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
21036	511	28	BlockFieldMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
21036	511	28	BlockFieldMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
21037	514	32	BlockFieldMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
21037	514	32	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
21038	552	8	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
21038	552	8	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
21038	552	8	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
21039	557	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
21039	557	12	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
21039	557	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
21040	567	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
21040	567	16	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
21041	572	20	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
21041	572	20	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
21042	575	24	BlockFieldMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
21042	575	24	BlockFieldMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
21043	579	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
21043	579	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
21044	588	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
21044	588	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
21045	613	8	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
21045	613	8	BlockFieldMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
21046	618	12	BlockFieldMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
21046	618	12	BlockFieldMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
21047	622	16	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
21047	622	16	BlockFieldMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
21048	654	8	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
21048	654	8	BlockFieldMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
21048	654	8	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
21049	657	12	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
21049	657	12	BlockFieldMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
21049	657	12	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
1131	668	16	BlockFieldMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1132	670	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1133	702	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
21050	752	8	BlockFieldMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
21050	752	8	BlockFieldMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1134	765	8	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1135	772	12	BlockFieldMatrix.java	setSubMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1135	772	12	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
21051	784	8	BlockFieldMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
21051	784	8	BlockFieldMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
21052	790	12	BlockFieldMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
21052	790	12	BlockFieldMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
21053	799	16	BlockFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
21053	799	16	BlockFieldMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
21054	821	8	BlockFieldMatrix.java	getRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
21054	821	8	BlockFieldMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1136	825	12	BlockFieldMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1136	825	12	BlockFieldMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1137	864	8	BlockFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1137	864	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1137	864	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
21055	877	8	BlockFieldMatrix.java	setRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
21055	877	8	BlockFieldMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1138	881	12	BlockFieldMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1138	881	12	BlockFieldMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
21056	906	8	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
21056	906	8	BlockFieldMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
21057	909	12	BlockFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
21057	909	12	BlockFieldMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1139	910	16	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	DEF	outIndex >= outBlock.$.length
1139	910	16	BlockFieldMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1139	910	16	BlockFieldMatrix.java	getColumnMatrix	outBlock	T[]	0	DEF	outIndex >= $.length
1140	946	8	BlockFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1140	946	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
1140	946	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
21058	960	8	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
21058	960	8	BlockFieldMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
21059	963	12	BlockFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
21059	963	12	BlockFieldMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1141	964	16	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	DEF	mIndex >= mBlock.$.length
1141	964	16	BlockFieldMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1141	964	16	BlockFieldMatrix.java	setColumnMatrix	mBlock	T[]	0	DEF	mIndex >= $.length
21060	983	8	BlockFieldMatrix.java	getRowVector	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
21060	983	8	BlockFieldMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
21061	1014	8	BlockFieldMatrix.java	getColumnVector	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
21061	1014	8	BlockFieldMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
21062	1017	12	BlockFieldMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
21062	1017	12	BlockFieldMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
21063	1045	8	BlockFieldMatrix.java	getRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
21063	1045	8	BlockFieldMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1142	1060	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1142	1060	8	BlockFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1142	1060	8	BlockFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
21064	1068	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
21064	1068	8	BlockFieldMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
21065	1087	8	BlockFieldMatrix.java	getColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
21065	1087	8	BlockFieldMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
21066	1090	12	BlockFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
21066	1090	12	BlockFieldMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1143	1103	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1143	1103	8	BlockFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1143	1103	8	BlockFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
21067	1112	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
21067	1112	8	BlockFieldMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
21068	1115	12	BlockFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
21068	1115	12	BlockFieldMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
21069	1188	8	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockColumns
21069	1188	8	BlockFieldMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
21070	1189	12	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockRows
21070	1189	12	BlockFieldMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
21071	1199	16	BlockFieldMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
21071	1199	16	BlockFieldMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
21072	1202	20	BlockFieldMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
21072	1202	20	BlockFieldMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1144	1233	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.columns
1144	1233	8	BlockFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != columns
21073	1240	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
21073	1240	8	BlockFieldMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
21074	1243	12	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
21074	1243	12	BlockFieldMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
21075	1248	16	BlockFieldMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
21075	1248	16	BlockFieldMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
21076	1251	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
21076	1251	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
21077	1260	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
21077	1260	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1145	1275	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.rows
1145	1275	8	BlockFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != rows
21078	1282	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
21078	1282	8	BlockFieldMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
21079	1289	12	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
21079	1289	12	BlockFieldMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
21080	1293	16	BlockFieldMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
21080	1293	16	BlockFieldMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
21081	1297	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
21081	1297	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
21082	1306	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
21082	1306	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
21083	1322	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
21083	1322	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
21084	1325	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
21084	1325	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
21085	1326	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
21085	1326	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
21086	1332	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
21086	1332	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
21087	1346	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
21087	1346	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
21088	1349	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
21088	1349	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
21089	1350	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
21089	1350	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
21090	1356	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
21090	1356	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
21091	1373	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
21091	1373	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
21092	1377	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
21092	1377	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
21093	1378	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
21093	1378	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
21094	1385	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
21094	1385	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
21095	1402	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
21095	1402	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
21096	1406	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
21096	1406	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
21097	1407	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
21097	1407	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
21098	1414	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
21098	1414	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
21099	1429	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
21099	1429	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
21100	1432	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
21100	1432	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
21101	1437	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
21101	1437	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
21102	1438	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
21102	1438	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
21103	1454	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
21103	1454	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
21104	1457	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
21104	1457	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
21105	1462	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
21105	1462	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
21106	1463	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
21106	1463	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
21107	1481	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
21107	1481	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
21108	1485	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
21108	1485	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
21109	1491	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
21109	1491	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
21110	1493	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
21110	1493	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
21111	1510	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
21111	1510	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
21112	1514	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
21112	1514	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
21113	1520	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
21113	1520	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
21114	1522	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
21114	1522	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
1463	147	8	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	1	DEF	$
21513	156	8	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
21513	156	8	BlockRealMatrix.java	BlockRealMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
21514	158	12	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
21514	158	12	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1464	159	16	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1464	159	16	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1464	159	16	BlockRealMatrix.java	BlockRealMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1464	159	16	BlockRealMatrix.java	BlockRealMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1464	159	16	BlockRealMatrix.java	BlockRealMatrix	blockData	double[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1465	163	16	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	0	DEF	$
21515	198	8	BlockRealMatrix.java	toBlocksLayout	THIS	BlockRealMatrix	0	NIL-FOR	i < rawData.$.length
21515	198	8	BlockRealMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
21515	198	8	BlockRealMatrix.java	toBlocksLayout	rawData	double[][]	0	NIL-FOR	i < $.length
1466	200	12	BlockRealMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1466	200	12	BlockRealMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
21516	208	8	BlockRealMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
21516	208	8	BlockRealMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
21517	212	12	BlockRealMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
21517	212	12	BlockRealMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
21518	223	16	BlockRealMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
21518	223	16	BlockRealMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
21519	252	8	BlockRealMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
21519	252	8	BlockRealMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
21520	256	12	BlockRealMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
21520	256	12	BlockRealMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
21521	281	8	BlockRealMatrix.java	copy	THIS	BlockRealMatrix	0	NIL-FOR	i < $.blocks.$.length
21521	281	8	BlockRealMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
21522	301	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
21522	301	12	BlockRealMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
21522	301	12	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
21523	302	16	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
21523	302	16	BlockRealMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
21523	302	16	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
21524	312	20	BlockRealMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
21524	312	20	BlockRealMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
21525	313	24	BlockRealMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
21525	313	24	BlockRealMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
21526	342	8	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
21526	342	8	BlockRealMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
21526	342	8	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
21527	346	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
21527	346	12	BlockRealMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
21527	346	12	BlockRealMatrix.java	add	outBlock	double[]	0	NIL-FOR	k < $.length
21528	367	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
21528	367	12	BlockRealMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
21528	367	12	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
21529	368	16	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
21529	368	16	BlockRealMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
21529	368	16	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
21530	378	20	BlockRealMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
21530	378	20	BlockRealMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
21531	379	24	BlockRealMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
21531	379	24	BlockRealMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
21532	408	8	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
21532	408	8	BlockRealMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
21532	408	8	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
21533	412	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
21533	412	12	BlockRealMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
21533	412	12	BlockRealMatrix.java	subtract	outBlock	double[]	0	NIL-FOR	k < $.length
21534	427	8	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
21534	427	8	BlockRealMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
21534	427	8	BlockRealMatrix.java	scalarAdd	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
21535	430	12	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
21535	430	12	BlockRealMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
21535	430	12	BlockRealMatrix.java	scalarAdd	outBlock	double[]	0	NIL-FOR	k < $.length
21536	444	8	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
21536	444	8	BlockRealMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
21536	444	8	BlockRealMatrix.java	scalarMultiply	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
21537	447	12	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
21537	447	12	BlockRealMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
21537	447	12	BlockRealMatrix.java	scalarMultiply	outBlock	double[]	0	NIL-FOR	k < $.length
21538	468	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
21538	468	12	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
21538	468	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
21539	472	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
21539	472	16	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
21539	472	16	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
21540	480	20	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
21540	480	20	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
21541	485	24	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
21541	485	24	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
21542	488	28	BlockRealMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
21542	488	28	BlockRealMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
21543	491	32	BlockRealMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
21543	491	32	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
21544	525	8	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
21544	525	8	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
21544	525	8	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
21545	530	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
21545	530	12	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
21545	530	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
21546	540	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
21546	540	16	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
21547	545	20	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
21547	545	20	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
21548	548	24	BlockRealMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
21548	548	24	BlockRealMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
21549	552	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
21549	552	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
21550	560	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
21550	560	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
21551	583	8	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
21551	583	8	BlockRealMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
21552	588	12	BlockRealMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
21552	588	12	BlockRealMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
21553	592	16	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
21553	592	16	BlockRealMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
21554	610	8	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
21554	610	8	BlockRealMatrix.java	getNorm	jBlock	int	0	NIL-FOR	$ < blockColumns
21555	613	12	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
21555	613	12	BlockRealMatrix.java	getNorm	iBlock	int	0	NIL-FOR	$ < blockRows
21556	616	16	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
21556	616	16	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
21557	618	20	BlockRealMatrix.java	getNorm	i	int	0	NIL-FOR	$ < iHeight
21557	618	20	BlockRealMatrix.java	getNorm	iHeight	int	0	NIL-FOR	i < $
21558	624	12	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
21558	624	12	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
21559	635	8	BlockRealMatrix.java	getFrobeniusNorm	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.$.length
21559	635	8	BlockRealMatrix.java	getFrobeniusNorm	blockIndex	int	0	NIL-FOR	$ < blocks.length
21560	662	8	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
21560	662	8	BlockRealMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
21560	662	8	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
21561	665	12	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
21561	665	12	BlockRealMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
21561	665	12	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
1467	676	16	BlockRealMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1468	678	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1469	710	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
21562	760	8	BlockRealMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
21562	760	8	BlockRealMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1470	774	8	BlockRealMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1471	781	12	BlockRealMatrix.java	setSubMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1471	781	12	BlockRealMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
21563	793	8	BlockRealMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
21563	793	8	BlockRealMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
21564	799	12	BlockRealMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
21564	799	12	BlockRealMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
21565	808	16	BlockRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
21565	808	16	BlockRealMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
21566	830	8	BlockRealMatrix.java	getRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
21566	830	8	BlockRealMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1472	834	12	BlockRealMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1472	834	12	BlockRealMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1473	873	8	BlockRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1473	873	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
1473	873	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
21567	886	8	BlockRealMatrix.java	setRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
21567	886	8	BlockRealMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1474	890	12	BlockRealMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1474	890	12	BlockRealMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
21568	915	8	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
21568	915	8	BlockRealMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
21569	918	12	BlockRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
21569	918	12	BlockRealMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1475	919	16	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	DEF	outIndex >= outBlock.$.length
1475	919	16	BlockRealMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1475	919	16	BlockRealMatrix.java	getColumnMatrix	outBlock	double[]	0	DEF	outIndex >= $.length
1476	955	8	BlockRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1476	955	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
1476	955	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
21570	969	8	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
21570	969	8	BlockRealMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
21571	972	12	BlockRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
21571	972	12	BlockRealMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1477	973	16	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	DEF	mIndex >= mBlock.$.length
1477	973	16	BlockRealMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1477	973	16	BlockRealMatrix.java	setColumnMatrix	mBlock	double[]	0	DEF	mIndex >= $.length
21572	992	8	BlockRealMatrix.java	getRowVector	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
21572	992	8	BlockRealMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
21573	1023	8	BlockRealMatrix.java	getColumnVector	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
21573	1023	8	BlockRealMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
21574	1026	12	BlockRealMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
21574	1026	12	BlockRealMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
21575	1054	8	BlockRealMatrix.java	getRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
21575	1054	8	BlockRealMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1478	1069	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1478	1069	8	BlockRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1478	1069	8	BlockRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
21576	1077	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
21576	1077	8	BlockRealMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
21577	1096	8	BlockRealMatrix.java	getColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
21577	1096	8	BlockRealMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
21578	1099	12	BlockRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
21578	1099	12	BlockRealMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1479	1112	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1479	1112	8	BlockRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1479	1112	8	BlockRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
21579	1121	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
21579	1121	8	BlockRealMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
21580	1124	12	BlockRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
21580	1124	12	BlockRealMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
21581	1183	8	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockColumns
21581	1183	8	BlockRealMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
21582	1184	12	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockRows
21582	1184	12	BlockRealMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
21583	1193	16	BlockRealMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
21583	1193	16	BlockRealMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
21584	1196	20	BlockRealMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
21584	1196	20	BlockRealMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1480	1225	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.columns
1480	1225	8	BlockRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != columns
21585	1231	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
21585	1231	8	BlockRealMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
21586	1234	12	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
21586	1234	12	BlockRealMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
21587	1239	16	BlockRealMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
21587	1239	16	BlockRealMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
21588	1242	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
21588	1242	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
21589	1250	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
21589	1250	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1481	1264	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.rows
1481	1264	8	BlockRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != rows
21590	1270	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
21590	1270	8	BlockRealMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
21591	1277	12	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
21591	1277	12	BlockRealMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
21592	1281	16	BlockRealMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
21592	1281	16	BlockRealMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
21593	1285	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
21593	1285	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
21594	1293	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
21594	1293	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
21595	1309	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
21595	1309	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
21596	1312	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
21596	1312	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
21597	1313	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
21597	1313	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
21598	1319	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
21598	1319	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
21599	1333	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
21599	1333	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
21600	1336	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
21600	1336	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
21601	1337	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
21601	1337	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
21602	1343	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
21602	1343	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
21603	1360	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
21603	1360	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
21604	1364	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
21604	1364	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
21605	1365	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
21605	1365	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
21606	1372	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
21606	1372	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
21607	1389	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
21607	1389	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
21608	1393	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
21608	1393	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
21609	1394	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
21609	1394	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
21610	1401	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
21610	1401	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
21611	1416	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
21611	1416	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
21612	1419	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
21612	1419	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
21613	1424	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
21613	1424	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
21614	1425	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
21614	1425	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
21615	1441	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
21615	1441	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
21616	1444	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
21616	1444	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
21617	1449	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
21617	1449	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
21618	1450	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
21618	1450	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
21619	1468	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
21619	1468	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
21620	1472	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
21620	1472	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
21621	1478	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
21621	1478	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
21622	1480	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
21622	1480	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
21623	1497	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
21623	1497	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
21624	1501	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
21624	1501	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
21625	1507	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
21625	1507	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
21626	1509	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
21626	1509	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
601	47	8	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute<S>	0	DEF	$.getPlusOutside() != null
602	50	8	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute<S>	0	DEF	$.getPlusInside() != null
1630	91	8	BracketFinder.java	BracketFinder	growLimit	double	0	NotStrictlyPositiveException	$ <= 0
1631	94	8	BracketFinder.java	BracketFinder	maxEvaluations	int	0	NotStrictlyPositiveException	$ <= 0
1632	118	8	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fA < fB : fA > fB
1632	118	8	BracketFinder.java	search	fA	double	0	DEF	isMinim ? $ < fB : $ > fB
1632	118	8	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fA < $ : fA > $
21795	134	8	BracketFinder.java	search	isMinim	boolean	0	NIL-WHILE	$ ? fC < fB : fC > fB
21795	134	8	BracketFinder.java	search	fB	double	0	NIL-WHILE	isMinim ? fC < $ : fC > $
21795	134	8	BracketFinder.java	search	fC	double	0	NIL-WHILE	isMinim ? $ < fB : $ > fB
1633	145	12	BracketFinder.java	search	w	double	1	DEF	($ - xC) * (xB - $) > 0
1633	145	12	BracketFinder.java	search	xC	double	1	DEF	(w - $) * (xB - w) > 0
1633	145	12	BracketFinder.java	search	xB	double	1	DEF	(w - xC) * ($ - w) > 0
1634	147	16	BracketFinder.java	search	fW	double	1	DEF	isMinim ? $ < fC : $ > fC
1634	147	16	BracketFinder.java	search	isMinim	boolean	1	DEF	$ ? fW < fC : fW > fC
1634	147	16	BracketFinder.java	search	fC	double	1	DEF	isMinim ? fW < $ : fW > $
1635	155	23	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ > fB : $ < fB
1635	155	23	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW > fB : fW < fB
1635	155	23	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fW > $ : fW < $
1636	164	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (wLim - xC) >= 0
1636	164	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * ($ - xC) >= 0
1636	164	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * (wLim - $) >= 0
1637	167	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (xC - $) > 0
1637	167	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * (xC - w) > 0
1637	167	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * ($ - w) > 0
1638	169	16	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ < fC : $ > fC
1638	169	16	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW < fC : fW > fC
1638	169	16	BracketFinder.java	search	fC	double	0	DEF	isMinim ? fW < $ : fW > $
1639	199	8	BracketFinder.java	search	THIS	BracketFinder	0	DEF	$.lo > $.hi
3292	83	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3293	103	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3294	125	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3295	155	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[1], 0.0, 1)
3296	162	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[0], 0.0, 1)
3297	169	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	1	DEF	$[0] * $[1] < 0
3298	179	12	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[2], 0.0, 1)
3299	184	12	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	1	DEF	$[1] * $[2] < 0
3300	213	12	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	MathInternalError:RET	FastMath.max(absYA, absYB) < $.getFunctionValueAccuracy()
3300	213	12	BracketingNthOrderBrentSolver.java	doSolve	xTol	double	0	MathInternalError:RET	(xB - xA) <= $
3300	213	12	BracketingNthOrderBrentSolver.java	doSolve	xA	double	0	MathInternalError:RET	(xB - $) <= xTol
3300	213	12	BracketingNthOrderBrentSolver.java	doSolve	absYA	double	0	MathInternalError:RET	FastMath.max($, absYB) < getFunctionValueAccuracy()
3300	213	12	BracketingNthOrderBrentSolver.java	doSolve	xB	double	0	MathInternalError:RET	($ - xA) <= xTol
3300	213	12	BracketingNthOrderBrentSolver.java	doSolve	absYB	double	0	MathInternalError:RET	FastMath.max(absYA, $) < getFunctionValueAccuracy()
3301	233	12	BracketingNthOrderBrentSolver.java	doSolve	agingA	int	1	DEF	$ >= MAXIMAL_AGING
3302	239	19	BracketingNthOrderBrentSolver.java	doSolve	agingB	int	1	DEF	$ >= MAXIMAL_AGING
22693	254	12	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	NIL-DOWHILE	Double.isNaN($)
22693	254	12	BracketingNthOrderBrentSolver.java	doSolve	start	int	0	NIL-DOWHILE	end - $ > 1
22693	254	12	BracketingNthOrderBrentSolver.java	doSolve	end	int	0	NIL-DOWHILE	$ - start > 1
3303	260	16	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	$ > xA
3303	260	16	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	$ < xB
3303	260	16	BracketingNthOrderBrentSolver.java	doSolve	xA	double	0	DEF	nextX > $
3303	260	16	BracketingNthOrderBrentSolver.java	doSolve	xB	double	0	DEF	nextX < $
3304	266	20	BracketingNthOrderBrentSolver.java	doSolve	start	int	1	DEF	signChangeIndex - $ >= end - signChangeIndex
3304	266	20	BracketingNthOrderBrentSolver.java	doSolve	end	int	1	DEF	signChangeIndex - start >= $ - signChangeIndex
3304	266	20	BracketingNthOrderBrentSolver.java	doSolve	signChangeIndex	int	1	DEF	$ - start >= end - $
3305	281	12	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	Double.isNaN($)
3306	290	12	BracketingNthOrderBrentSolver.java	doSolve	nextY	double	0	RET	Precision.equals($, 0.0, 1)
3307	296	12	BracketingNthOrderBrentSolver.java	doSolve	start	int	1	DEF	end - $ != nbPoints
3307	296	12	BracketingNthOrderBrentSolver.java	doSolve	end	int	1	DEF	$ - start != nbPoints
3307	296	12	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	1	DEF	$ > 2
3307	296	12	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	1	DEF	end - start != $
3308	305	20	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	DEF	nbPoints == x.$.length
3308	305	20	BracketingNthOrderBrentSolver.java	doSolve	x	double[]	0	DEF	nbPoints == $.length
3308	305	20	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	0	DEF	$ == x.length
3309	311	16	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	DEF	signChangeIndex >= (x.$.length + 1) / 2
3309	311	16	BracketingNthOrderBrentSolver.java	doSolve	x	double[]	0	DEF	signChangeIndex >= ($.length + 1) / 2
3309	311	16	BracketingNthOrderBrentSolver.java	doSolve	signChangeIndex	int	0	DEF	$ >= (x.length + 1) / 2
3310	329	12	BracketingNthOrderBrentSolver.java	doSolve	nextY	double	1	DEF	$ * yA <= 0
3310	329	12	BracketingNthOrderBrentSolver.java	doSolve	yA	double	1	DEF	nextY * $ <= 0
22694	371	8	BracketingNthOrderBrentSolver.java	guessX	i	int	0	NIL-FOR	$ < end - 1
22694	371	8	BracketingNthOrderBrentSolver.java	guessX	end	int	0	NIL-FOR	i < $ - 1
22695	373	12	BracketingNthOrderBrentSolver.java	guessX	j	int	0	NIL-FOR	$ > i
22695	373	12	BracketingNthOrderBrentSolver.java	guessX	i	int	0	NIL-FOR	j > $
22696	380	8	BracketingNthOrderBrentSolver.java	guessX	j	int	0	NIL-FOR	$ >= start
22696	380	8	BracketingNthOrderBrentSolver.java	guessX	start	int	0	NIL-FOR	j >= $
3070	77	8	BracketingNthOrderBrentSolverDFP.java	BracketingNthOrderBrentSolverDFP	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3071	203	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[1].isZero()
3072	211	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[0].isZero()
3073	218	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	1	DEF	$[0].multiply($[1]).negativeOrNull()
3074	229	12	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[2].isZero()
3075	234	12	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	1	DEF	$[1].multiply($[2]).negativeOrNull()
3076	267	12	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	MathInternalError:RET	maxY.lessThan($.functionValueAccuracy)
3076	267	12	BracketingNthOrderBrentSolverDFP.java	solve	maxY	Dfp	0	MathInternalError:RET	$.lessThan(functionValueAccuracy)
3076	267	12	BracketingNthOrderBrentSolverDFP.java	solve	xTol	Dfp	0	MathInternalError:RET	xB.subtract(xA).subtract($).negativeOrNull()
3076	267	12	BracketingNthOrderBrentSolverDFP.java	solve	xA	Dfp	0	MathInternalError:RET	xB.subtract($).subtract(xTol).negativeOrNull()
3076	267	12	BracketingNthOrderBrentSolverDFP.java	solve	xB	Dfp	0	MathInternalError:RET	$.subtract(xA).subtract(xTol).negativeOrNull()
3077	288	12	BracketingNthOrderBrentSolverDFP.java	solve	agingA	int	1	DEF	$ >= MAXIMAL_AGING
3078	291	19	BracketingNthOrderBrentSolverDFP.java	solve	agingB	int	1	DEF	$ >= MAXIMAL_AGING
22584	303	12	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	NIL-DOWHILE	$.isNaN()
22584	303	12	BracketingNthOrderBrentSolverDFP.java	solve	start	int	0	NIL-DOWHILE	end - $ > 1
22584	303	12	BracketingNthOrderBrentSolverDFP.java	solve	end	int	0	NIL-DOWHILE	$ - start > 1
3079	309	16	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.greaterThan(xA)
3079	309	16	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.lessThan(xB)
3079	309	16	BracketingNthOrderBrentSolverDFP.java	solve	xA	Dfp	0	DEF	nextX.greaterThan($)
3079	309	16	BracketingNthOrderBrentSolverDFP.java	solve	xB	Dfp	0	DEF	nextX.lessThan($)
3080	315	20	BracketingNthOrderBrentSolverDFP.java	solve	start	int	1	DEF	signChangeIndex - $ >= end - signChangeIndex
3080	315	20	BracketingNthOrderBrentSolverDFP.java	solve	end	int	1	DEF	signChangeIndex - start >= $ - signChangeIndex
3080	315	20	BracketingNthOrderBrentSolverDFP.java	solve	signChangeIndex	int	1	DEF	$ - start >= end - $
3081	330	12	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.isNaN()
3082	340	12	BracketingNthOrderBrentSolverDFP.java	solve	nextY	Dfp	0	RET	$.isZero()
3083	346	12	BracketingNthOrderBrentSolverDFP.java	solve	start	int	1	DEF	end - $ != nbPoints
3083	346	12	BracketingNthOrderBrentSolverDFP.java	solve	end	int	1	DEF	$ - start != nbPoints
3083	346	12	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	1	DEF	end - start != $
3083	346	12	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	1	DEF	$ > 2
3084	355	20	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	DEF	nbPoints == x.$.length
3084	355	20	BracketingNthOrderBrentSolverDFP.java	solve	x	Dfp[]	0	DEF	nbPoints == $.length
3084	355	20	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	0	DEF	$ == x.length
3085	361	16	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	DEF	signChangeIndex >= (x.$.length + 1) / 2
3085	361	16	BracketingNthOrderBrentSolverDFP.java	solve	x	Dfp[]	0	DEF	signChangeIndex >= ($.length + 1) / 2
3085	361	16	BracketingNthOrderBrentSolverDFP.java	solve	signChangeIndex	int	0	DEF	$ >= (x.length + 1) / 2
3086	379	12	BracketingNthOrderBrentSolverDFP.java	solve	nextY	Dfp	1	DEF	$.multiply(yA).negativeOrNull()
3086	379	12	BracketingNthOrderBrentSolverDFP.java	solve	yA	Dfp	1	DEF	nextY.multiply($).negativeOrNull()
22585	421	8	BracketingNthOrderBrentSolverDFP.java	guessX	i	int	0	NIL-FOR	$ < end - 1
22585	421	8	BracketingNthOrderBrentSolverDFP.java	guessX	end	int	0	NIL-FOR	i < $ - 1
22586	423	12	BracketingNthOrderBrentSolverDFP.java	guessX	j	int	0	NIL-FOR	$ > i
22586	423	12	BracketingNthOrderBrentSolverDFP.java	guessX	i	int	0	NIL-FOR	j > $
22587	430	8	BracketingNthOrderBrentSolverDFP.java	guessX	j	int	0	NIL-FOR	$ >= start
22587	430	8	BracketingNthOrderBrentSolverDFP.java	guessX	start	int	0	NIL-FOR	j >= $
1640	77	8	BrentOptimizer.java	BrentOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
1641	80	8	BrentOptimizer.java	BrentOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
1642	120	8	BrentOptimizer.java	doOptimize	lo	double	1	DEF	$ < hi
1642	120	8	BrentOptimizer.java	doOptimize	hi	double	1	DEF	lo < $
1643	134	8	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1644	152	12	BrentOptimizer.java	doOptimize	stop	boolean	1	RET	$
1645	158	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(e) > $
1645	158	16	BrentOptimizer.java	doOptimize	e	double	1	DEF	FastMath.abs($) > tol1
1646	164	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	$ > 0
1647	173	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ < q * (b - x)
1647	173	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	FastMath.abs($) < FastMath.abs(0.5 * q * r)
1647	173	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ > q * (a - x)
1647	173	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p < $ * (b - x)
1647	173	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * $ * r)
1647	173	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p > $ * (a - x)
1647	173	20	BrentOptimizer.java	doOptimize	r	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * q * $)
1647	173	20	BrentOptimizer.java	doOptimize	a	double	1	DEF	p > q * ($ - x)
1647	173	20	BrentOptimizer.java	doOptimize	b	double	1	DEF	p < q * ($ - x)
1647	173	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p < q * (b - $)
1647	173	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p > q * (a - $)
1648	181	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	$ - a < tol2
1648	181	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	b - $ < tol2
1648	181	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	u - a < $
1648	181	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	b - u < $
1648	181	24	BrentOptimizer.java	doOptimize	a	double	0	DEF	u - $ < tol2
1648	181	24	BrentOptimizer.java	doOptimize	b	double	0	DEF	$ - u < tol2
1649	182	28	BrentOptimizer.java	doOptimize	m	double	1	DEF	x <= $
1649	182	28	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ <= m
1650	190	24	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1650	190	24	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1651	199	20	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1651	199	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1652	208	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(d) < $
1652	208	16	BrentOptimizer.java	doOptimize	d	double	1	DEF	FastMath.abs($) < tol1
1653	209	20	BrentOptimizer.java	doOptimize	d	double	1	DEF	$ >= 0
1654	219	16	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1655	227	16	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$ != null
1656	228	20	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$.converged(iter, previous, current)
1656	228	20	BrentOptimizer.java	doOptimize	previous	UnivariatePointValuePair	0	RET	checker.converged(iter, $, current)
1656	228	20	BrentOptimizer.java	doOptimize	current	UnivariatePointValuePair	0	RET	checker.converged(iter, previous, $)
1656	228	20	BrentOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
1657	234	16	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fx
1657	234	16	BrentOptimizer.java	doOptimize	fx	double	1	DEF	fu <= $
1658	235	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1658	235	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1659	247	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1659	247	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1660	252	20	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fw
1660	252	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	Precision.equals(w, $)
1660	252	20	BrentOptimizer.java	doOptimize	w	double	1	DEF	Precision.equals($, x)
1660	252	20	BrentOptimizer.java	doOptimize	fw	double	1	DEF	fu <= $
1661	258	27	BrentOptimizer.java	doOptimize	fu	double	0	DEF	$ <= fv
1661	258	27	BrentOptimizer.java	doOptimize	x	double	0	DEF	Precision.equals(v, $)
1661	258	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, w)
1661	258	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, x)
1661	258	27	BrentOptimizer.java	doOptimize	w	double	0	DEF	Precision.equals(v, $)
1661	258	27	BrentOptimizer.java	doOptimize	fv	double	0	DEF	fu <= $
3346	92	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
3346	92	8	BrentSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3347	98	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
3347	98	8	BrentSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3348	103	8	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
3348	103	8	BrentSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
3349	109	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
3349	109	8	BrentSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3350	114	8	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
3350	114	8	BrentSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
3351	152	12	BrentSolver.java	brent	fb	double	0	DEF	FastMath.abs(fc) < FastMath.abs($)
3351	152	12	BrentSolver.java	brent	fc	double	0	DEF	FastMath.abs($) < FastMath.abs(fb)
3352	164	12	BrentSolver.java	brent	tol	double	0	RET	FastMath.abs(m) <= $
3352	164	12	BrentSolver.java	brent	m	double	0	RET	FastMath.abs($) <= tol
3352	164	12	BrentSolver.java	brent	fb	double	0	RET	Precision.equals($, 0)
3353	168	12	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(e) < $
3353	168	12	BrentSolver.java	brent	fa	double	1	DEF	FastMath.abs($) <= FastMath.abs(fb)
3353	168	12	BrentSolver.java	brent	fb	double	1	DEF	FastMath.abs(fa) <= FastMath.abs($)
3353	168	12	BrentSolver.java	brent	e	double	1	DEF	FastMath.abs($) < tol
3354	180	16	BrentSolver.java	brent	a	double	1	DEF	$ == c
3354	180	16	BrentSolver.java	brent	c	double	1	DEF	a == $
3355	191	16	BrentSolver.java	brent	p	double	1	DEF	$ > 0
3356	198	16	BrentSolver.java	brent	s	double	1	DEF	p >= FastMath.abs(0.5 * $ * q)
3356	198	16	BrentSolver.java	brent	p	double	1	DEF	$ >= 1.5 * m * q - FastMath.abs(tol * q)
3356	198	16	BrentSolver.java	brent	p	double	1	DEF	$ >= FastMath.abs(0.5 * s * q)
3356	198	16	BrentSolver.java	brent	q	double	1	DEF	p >= 1.5 * m * $ - FastMath.abs(tol * $)
3356	198	16	BrentSolver.java	brent	q	double	1	DEF	p >= FastMath.abs(0.5 * s * $)
3356	198	16	BrentSolver.java	brent	tol	double	1	DEF	p >= 1.5 * m * q - FastMath.abs($ * q)
3356	198	16	BrentSolver.java	brent	m	double	1	DEF	p >= 1.5 * $ * q - FastMath.abs(tol * q)
3357	212	12	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(d) > $
3357	212	12	BrentSolver.java	brent	d	double	1	DEF	FastMath.abs($) > tol
3358	214	19	BrentSolver.java	brent	m	double	1	DEF	$ > 0
3359	220	12	BrentSolver.java	brent	fb	double	0	DEF	$ > 0
3359	220	12	BrentSolver.java	brent	fb	double	0	DEF	$ <= 0
3359	220	12	BrentSolver.java	brent	fc	double	0	DEF	$ <= 0
3359	220	12	BrentSolver.java	brent	fc	double	0	DEF	$ > 0
21913	366	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	$.iterations <= $.maxIterations
21914	372	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	k < $.lambda
21914	372	16	CMAESOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < lambda
21915	374	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.checkFeasableCount+1
21915	374	20	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < checkFeasableCount+1
1792	375	24	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
1793	382	24	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.checkFeasableCount
1793	382	24	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= checkFeasableCount
1793	382	24	CMAESOptimizer.java	doOptimize	arxk	RealMatrix	0	DEF	fitfun.isFeasible($.getColumn(0))
1793	382	24	CMAESOptimizer.java	doOptimize	fitfun	FitnessFunction	0	DEF	$.isFeasible(arxk.getColumn(0))
1794	404	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
1795	413	16	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	bestValue > $
1795	413	16	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ > bestFitness
1796	419	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
1796	419	20	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
1797	420	24	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, optimum, lastResult)
1797	420	24	CMAESOptimizer.java	doOptimize	optimum	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
1797	420	24	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, optimum, $)
1798	427	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.stopFitness != 0
1799	428	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestFitness < ($.isMinimize ? $.stopFitness : -$.stopFitness)
1799	428	20	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	$ < (isMinimize ? stopFitness : -stopFitness)
21916	434	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
21916	434	16	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
1800	435	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > $.stopTolX
1800	435	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma*(Math.max(Math.abs(pcCol[$]), sqrtDiagC[$])) > stopTolX
1800	435	20	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma*(Math.max(Math.abs(pcCol[i]), $[i])) > stopTolX
1800	435	20	CMAESOptimizer.java	doOptimize	pcCol	double[]	0	DEF	sigma*(Math.max(Math.abs($[i]), sqrtDiagC[i])) > stopTolX
1801	438	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.dimension-1
1801	438	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= dimension-1
21917	442	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
21917	442	16	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
1802	443	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma*sqrtDiagC[i] > $.stopTolUpX
1802	443	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma*sqrtDiagC[$] > stopTolUpX
1802	443	20	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma*$[i] > stopTolUpX
1803	449	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, bestFitness) < $.stopTolFun
1803	449	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
1803	449	16	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
1803	449	16	CMAESOptimizer.java	doOptimize	worstFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
1803	449	16	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
1803	449	16	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
1804	453	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	historyWorst-historyBest < $.stopTolHistFun
1804	453	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > $.fitnessHistory.$.length
1804	453	16	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	historyWorst-$ < stopTolHistFun
1804	453	16	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	$-historyBest < stopTolHistFun
1805	458	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.max($.diagD)/$.min($.diagD) > 1e7
1806	462	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
1807	466	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, current, lastResult)
1807	466	20	CMAESOptimizer.java	doOptimize	current	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
1807	466	20	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, current, $)
1807	466	20	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
1808	473	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestValue == fitness[arindex[(int)(0.1+$.lambda/4.)]]
1808	473	16	CMAESOptimizer.java	doOptimize	fitness	double[]	0	DEF	bestValue == $[arindex[(int)(0.1+lambda/4.)]]
1808	473	16	CMAESOptimizer.java	doOptimize	arindex	int[]	0	DEF	bestValue == fitness[$[(int)(0.1+lambda/4.)]]
1808	473	16	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ == fitness[arindex[(int)(0.1+lambda/4.)]]
1809	476	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
1809	476	16	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
1809	476	16	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
1809	476	16	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
1810	483	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.generateStatistics
21918	503	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < lB.$.length
21918	503	8	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < lB.length
21918	503	8	CMAESOptimizer.java	checkParameters	lB	double[]	0	NIL-FOR	i < $.length
1811	504	12	CMAESOptimizer.java	checkParameters	i	int	0	DEF	Double.isInfinite(lB[$])
1811	504	12	CMAESOptimizer.java	checkParameters	i	int	0	DEF	Double.isInfinite(uB[$])
1811	504	12	CMAESOptimizer.java	checkParameters	lB	double[]	0	DEF	Double.isInfinite($[i])
1811	504	12	CMAESOptimizer.java	checkParameters	uB	double[]	0	DEF	Double.isInfinite($[i])
1812	512	8	CMAESOptimizer.java	checkParameters	hasFiniteBounds	boolean	1	MathUnsupportedOperationException	$
21919	513	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < lB.$.length
21919	513	12	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < lB.length
21919	513	12	CMAESOptimizer.java	checkParameters	lB	double[]	0	NIL-FOR	i < $.length
1813	514	16	CMAESOptimizer.java	checkParameters	i	int	0	DEF	Double.isInfinite(uB[$])
1813	514	16	CMAESOptimizer.java	checkParameters	i	int	0	DEF	Double.isInfinite(lB[$])
1813	514	16	CMAESOptimizer.java	checkParameters	lB	double[]	0	DEF	Double.isInfinite($[i])
1813	514	16	CMAESOptimizer.java	checkParameters	uB	double[]	0	DEF	Double.isInfinite($[i])
1814	521	12	CMAESOptimizer.java	checkParameters	hasInfiniteBounds	boolean	1	MathUnsupportedOperationException	$
1815	536	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma != null
1816	537	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	DimensionMismatchException	$.inputSigma.$.length != init.$.length
1816	537	12	CMAESOptimizer.java	checkParameters	init	double[]	0	DimensionMismatchException	inputSigma.length != $.length
21920	540	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < init.$.length
21920	540	12	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < init.length
21920	540	12	CMAESOptimizer.java	checkParameters	init	double[]	0	NIL-FOR	i < $.length
1817	541	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NotPositiveException	$.inputSigma[i] < 0
1817	541	16	CMAESOptimizer.java	checkParameters	i	int	0	NotPositiveException	inputSigma[$] < 0
1818	544	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.boundaries != null
1819	545	20	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma[i] > $.boundaries[1][i] - $.boundaries[0][i]
1819	545	20	CMAESOptimizer.java	checkParameters	i	int	0	OutOfRangeException	inputSigma[$] > boundaries[1][$] - boundaries[0][$]
1820	559	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	DEF	$.lambda <= 0
21921	564	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < guess.$.length
21921	564	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < guess.length
21921	564	8	CMAESOptimizer.java	initializeCMA	guess	double[]	0	NIL-FOR	i < $.length
21922	583	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.mu
21922	583	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < mu
21923	622	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.historySize
21923	622	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < historySize
1821	644	8	CMAESOptimizer.java	updateEvolutionPaths	hsig	boolean	0	DEF	$
1822	672	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.diagonalOnly > 1
1822	672	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.iterations > $.diagonalOnly
1823	695	8	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu > 0
1824	703	12	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	1	DEF	$.isActiveCMA
1825	727	16	CMAESOptimizer.java	updateCovariance	negcovMax	double	0	DEF	negccov > $
1825	727	16	CMAESOptimizer.java	updateCovariance	negccov	double	0	DEF	$ > negcovMax
1826	766	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu + negccov > 0
1826	766	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	($.iterations % 1. / ($.ccov1 + $.ccovmu + negccov) / $.dimension / 10.) < 1.
1826	766	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	ccov1 + ccovmu + $ > 0
1826	766	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1.
1827	775	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.min($.diagD) <= 0
21924	776	16	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
21924	776	16	CMAESOptimizer.java	updateBD	i	int	0	NIL-FOR	$ < dimension
1828	777	20	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.diagD.getEntry(i, 0) < 0
1828	777	20	CMAESOptimizer.java	updateBD	i	int	0	DEF	diagD.getEntry($, 0) < 0
1829	785	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.max($.diagD) > 1e14 * $.min($.diagD)
21925	803	8	CMAESOptimizer.java	push	i	int	0	NIL-FOR	$ > 0
21926	817	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
21926	817	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
21926	817	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
21927	822	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
21927	822	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
21927	822	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
21928	1015	8	CMAESOptimizer.java	log	r	int	0	NIL-FOR	$ < m.getRowDimension()
21928	1015	8	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
21929	1016	12	CMAESOptimizer.java	log	c	int	0	NIL-FOR	$ < m.getColumnDimension()
21929	1016	12	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
21930	1030	8	CMAESOptimizer.java	sqrt	r	int	0	NIL-FOR	$ < m.getRowDimension()
21930	1030	8	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
21931	1031	12	CMAESOptimizer.java	sqrt	c	int	0	NIL-FOR	$ < m.getColumnDimension()
21931	1031	12	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
21932	1044	8	CMAESOptimizer.java	square	r	int	0	NIL-FOR	$ < m.getRowDimension()
21932	1044	8	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
21933	1045	12	CMAESOptimizer.java	square	c	int	0	NIL-FOR	$ < m.getColumnDimension()
21933	1045	12	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
21934	1060	8	CMAESOptimizer.java	times	r	int	0	NIL-FOR	$ < m.getRowDimension()
21934	1060	8	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
21935	1061	12	CMAESOptimizer.java	times	c	int	0	NIL-FOR	$ < m.getColumnDimension()
21935	1061	12	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
21936	1075	8	CMAESOptimizer.java	divide	r	int	0	NIL-FOR	$ < m.getRowDimension()
21936	1075	8	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
21937	1076	12	CMAESOptimizer.java	divide	c	int	0	NIL-FOR	$ < m.getColumnDimension()
21937	1076	12	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
21938	1090	8	CMAESOptimizer.java	selectColumns	r	int	0	NIL-FOR	$ < m.getRowDimension()
21938	1090	8	CMAESOptimizer.java	selectColumns	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
21939	1091	12	CMAESOptimizer.java	selectColumns	THIS	CMAESOptimizer	0	NIL-FOR	c < cols.$.length
21939	1091	12	CMAESOptimizer.java	selectColumns	c	int	0	NIL-FOR	$ < cols.length
21939	1091	12	CMAESOptimizer.java	selectColumns	cols	int[]	0	NIL-FOR	c < $.length
21940	1105	8	CMAESOptimizer.java	triu	r	int	0	NIL-FOR	$ < m.getRowDimension()
21940	1105	8	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
21941	1106	12	CMAESOptimizer.java	triu	c	int	0	NIL-FOR	$ < m.getColumnDimension()
21941	1106	12	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
21942	1119	8	CMAESOptimizer.java	sumRows	c	int	0	NIL-FOR	$ < m.getColumnDimension()
21942	1119	8	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
21943	1121	12	CMAESOptimizer.java	sumRows	r	int	0	NIL-FOR	$ < m.getRowDimension()
21943	1121	12	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
1830	1135	8	CMAESOptimizer.java	diag	m	RealMatrix	1	RET	$.getColumnDimension() == 1
21944	1137	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getRowDimension()
21944	1137	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
21945	1143	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getColumnDimension()
21945	1143	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
21946	1159	8	CMAESOptimizer.java	copyColumn	i	int	0	NIL-FOR	$ < m1.getRowDimension()
21946	1159	8	CMAESOptimizer.java	copyColumn	m1	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
21947	1171	8	CMAESOptimizer.java	ones	r	int	0	NIL-FOR	$ < n
21947	1171	8	CMAESOptimizer.java	ones	n	int	0	NIL-FOR	r < $
21948	1184	8	CMAESOptimizer.java	eye	r	int	0	NIL-FOR	$ < n
21948	1184	8	CMAESOptimizer.java	eye	n	int	0	NIL-FOR	r < $
1831	1185	12	CMAESOptimizer.java	eye	r	int	0	DEF	$ < m
1831	1185	12	CMAESOptimizer.java	eye	m	int	0	DEF	r < $
21949	1211	8	CMAESOptimizer.java	repmat	r	int	0	NIL-FOR	$ < n * rd
21949	1211	8	CMAESOptimizer.java	repmat	rd	int	0	NIL-FOR	r < n * $
21949	1211	8	CMAESOptimizer.java	repmat	n	int	0	NIL-FOR	r < $ * rd
21950	1212	12	CMAESOptimizer.java	repmat	c	int	0	NIL-FOR	$ < m * cd
21950	1212	12	CMAESOptimizer.java	repmat	cd	int	0	NIL-FOR	c < m * $
21950	1212	12	CMAESOptimizer.java	repmat	m	int	0	NIL-FOR	c < $ * cd
21951	1229	8	CMAESOptimizer.java	sequence	r	int	0	NIL-FOR	$ < size
21951	1229	8	CMAESOptimizer.java	sequence	size	int	0	NIL-FOR	r < $
21952	1242	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.getRowDimension()
21952	1242	8	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
21953	1243	12	CMAESOptimizer.java	max	c	int	0	NIL-FOR	$ < m.getColumnDimension()
21953	1243	12	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
1832	1245	16	CMAESOptimizer.java	max	e	double	0	DEF	max < $
1832	1245	16	CMAESOptimizer.java	max	max	double	0	DEF	$ < e
21954	1259	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.getRowDimension()
21954	1259	8	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
21955	1260	12	CMAESOptimizer.java	min	c	int	0	NIL-FOR	$ < m.getColumnDimension()
21955	1260	12	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
1833	1262	16	CMAESOptimizer.java	min	e	double	0	DEF	min > $
1833	1262	16	CMAESOptimizer.java	min	min	double	0	DEF	$ > e
21956	1276	8	CMAESOptimizer.java	max	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
21956	1276	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.length
21956	1276	8	CMAESOptimizer.java	max	m	double[]	0	NIL-FOR	r < $.length
1834	1277	12	CMAESOptimizer.java	max	r	int	0	DEF	max < m[$]
1834	1277	12	CMAESOptimizer.java	max	max	double	0	DEF	$ < m[r]
1834	1277	12	CMAESOptimizer.java	max	m	double[]	0	DEF	max < $[r]
21957	1290	8	CMAESOptimizer.java	min	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
21957	1290	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.length
21957	1290	8	CMAESOptimizer.java	min	m	double[]	0	NIL-FOR	r < $.length
1835	1291	12	CMAESOptimizer.java	min	r	int	0	DEF	min > m[$]
1835	1291	12	CMAESOptimizer.java	min	min	double	0	DEF	$ > m[r]
1835	1291	12	CMAESOptimizer.java	min	m	double[]	0	DEF	min > $[r]
21958	1304	8	CMAESOptimizer.java	inverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
21958	1304	8	CMAESOptimizer.java	inverse	i	int	0	NIL-FOR	$ < indices.length
21958	1304	8	CMAESOptimizer.java	inverse	indices	int[]	0	NIL-FOR	i < $.length
21959	1316	8	CMAESOptimizer.java	reverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
21959	1316	8	CMAESOptimizer.java	reverse	i	int	0	NIL-FOR	$ < indices.length
21959	1316	8	CMAESOptimizer.java	reverse	indices	int[]	0	NIL-FOR	i < $.length
21960	1328	8	CMAESOptimizer.java	randn	i	int	0	NIL-FOR	$ < size
21960	1328	8	CMAESOptimizer.java	randn	size	int	0	NIL-FOR	i < $
21961	1341	8	CMAESOptimizer.java	randn1	r	int	0	NIL-FOR	$ < size
21961	1341	8	CMAESOptimizer.java	randn1	size	int	0	NIL-FOR	r < $
21962	1342	12	CMAESOptimizer.java	randn1	c	int	0	NIL-FOR	$ < popSize
21962	1342	12	CMAESOptimizer.java	randn1	popSize	int	0	NIL-FOR	c < $
1035	100	8	CauchyDistribution.java	CauchyDistribution	scale	double	0	NotStrictlyPositiveException	$ <= 0
1036	146	8	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0
1036	146	8	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1
1037	148	15	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
1038	150	16	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
2207	83	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	DimensionMismatchException	expected.$.length < 2
2207	83	8	ChiSquareTest.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length < 2
2208	86	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	DimensionMismatchException	expected.$.length != observed.$.length
2208	86	8	ChiSquareTest.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length != observed.length
2208	86	8	ChiSquareTest.java	chiSquare	observed	long[]	0	DimensionMismatchException	expected.length != $.length
22154	94	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	NIL-FOR	i < observed.$.length
22154	94	8	ChiSquareTest.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
22154	94	8	ChiSquareTest.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
2209	100	8	ChiSquareTest.java	chiSquare	sumExpected	double	0	DEF	FastMath.abs($ - sumObserved) > 10E-6
2209	100	8	ChiSquareTest.java	chiSquare	sumObserved	double	0	DEF	FastMath.abs(sumExpected - $) > 10E-6
22155	105	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	NIL-FOR	i < observed.$.length
22155	105	8	ChiSquareTest.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
22155	105	8	ChiSquareTest.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
2210	106	12	ChiSquareTest.java	chiSquare	rescale	boolean	1	DEF	$
2211	209	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
2211	209	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
22156	257	8	ChiSquareTest.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
22156	257	8	ChiSquareTest.java	chiSquare	nRows	int	0	NIL-FOR	row < $
22157	258	12	ChiSquareTest.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
22157	258	12	ChiSquareTest.java	chiSquare	nCols	int	0	NIL-FOR	col < $
22158	268	8	ChiSquareTest.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
22158	268	8	ChiSquareTest.java	chiSquare	nRows	int	0	NIL-FOR	row < $
22159	269	12	ChiSquareTest.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
22159	269	12	ChiSquareTest.java	chiSquare	nCols	int	0	NIL-FOR	col < $
2212	364	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
2212	364	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
2213	415	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	DimensionMismatchException	observed1.$.length < 2
2213	415	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length < 2
2214	418	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	DimensionMismatchException	observed1.$.length != observed2.$.length
2214	418	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length != observed2.length
2214	418	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed2	long[]	0	DimensionMismatchException	observed1.length != $.length
22160	431	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	NIL-FOR	i < observed1.$.length
22160	431	8	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
22160	431	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2215	436	8	ChiSquareTest.java	chiSquareDataSetsComparison	countSum1	long	0	ZeroException	$ == 0
2215	436	8	ChiSquareTest.java	chiSquareDataSetsComparison	countSum2	long	0	ZeroException	$ == 0
2216	441	8	ChiSquareTest.java	chiSquareDataSetsComparison	unequalCounts	boolean	0	DEF	$
22161	449	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	NIL-FOR	i < observed1.$.length
22161	449	8	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
22161	449	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2217	450	12	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	1	ZeroException	observed2[$] == 0
2217	450	12	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	1	ZeroException	observed1[$] == 0
2217	450	12	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	1	ZeroException	$[i] == 0
2217	450	12	ChiSquareTest.java	chiSquareDataSetsComparison	observed2	long[]	1	ZeroException	$[i] == 0
2218	455	16	ChiSquareTest.java	chiSquareDataSetsComparison	unequalCounts	boolean	1	DEF	$
2219	567	8	ChiSquareTest.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ <= 0
2219	567	8	ChiSquareTest.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ > 0.5
2220	589	8	ChiSquareTest.java	checkArray	THIS	ChiSquareTest	0	DimensionMismatchException	in.$.length < 2
2220	589	8	ChiSquareTest.java	checkArray	in	long[][]	0	DimensionMismatchException	$.length < 2
2221	593	8	ChiSquareTest.java	checkArray	THIS	ChiSquareTest	0	DimensionMismatchException	in[0].length < 2
2221	593	8	ChiSquareTest.java	checkArray	in	long[][]	0	DimensionMismatchException	$[0].length < 2
22162	615	8	ChiSquareTest.java	checkRectangular	THIS	ChiSquareTest	0	NIL-FOR	i < in.$.length
22162	615	8	ChiSquareTest.java	checkRectangular	i	int	0	NIL-FOR	$ < in.length
22162	615	8	ChiSquareTest.java	checkRectangular	in	long[][]	0	NIL-FOR	i < $.length
2222	616	12	ChiSquareTest.java	checkRectangular	THIS	ChiSquareTest	0	DimensionMismatchException	in[i].length != in[0].length
2222	616	12	ChiSquareTest.java	checkRectangular	i	int	0	DimensionMismatchException	in[$].length != in[0].length
2222	616	12	ChiSquareTest.java	checkRectangular	in	long[][]	0	DimensionMismatchException	$[i].length != $[0].length
22163	634	8	ChiSquareTest.java	checkPositive	THIS	ChiSquareTest	0	NIL-FOR	i < in.$.length
22163	634	8	ChiSquareTest.java	checkPositive	i	int	0	NIL-FOR	$ < in.length
22163	634	8	ChiSquareTest.java	checkPositive	in	double[]	0	NIL-FOR	i < $.length
2223	635	12	ChiSquareTest.java	checkPositive	i	int	0	NotStrictlyPositiveException	in[$] <= 0
2223	635	12	ChiSquareTest.java	checkPositive	in	double[]	0	NotStrictlyPositiveException	$[i] <= 0
22164	651	8	ChiSquareTest.java	checkNonNegative	THIS	ChiSquareTest	0	NIL-FOR	i < in.$.length
22164	651	8	ChiSquareTest.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
22164	651	8	ChiSquareTest.java	checkNonNegative	in	long[]	0	NIL-FOR	i < $.length
2224	652	12	ChiSquareTest.java	checkNonNegative	i	int	0	NotPositiveException	in[$] < 0
2224	652	12	ChiSquareTest.java	checkNonNegative	in	long[]	0	NotPositiveException	$[i] < 0
22165	668	8	ChiSquareTest.java	checkNonNegative	THIS	ChiSquareTest	0	NIL-FOR	i < in.$.length
22165	668	8	ChiSquareTest.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
22165	668	8	ChiSquareTest.java	checkNonNegative	in	long[][]	0	NIL-FOR	i < $.length
22166	669	12	ChiSquareTest.java	checkNonNegative	THIS	ChiSquareTest	0	NIL-FOR	j < in[i].length
22166	669	12	ChiSquareTest.java	checkNonNegative	j	int	0	NIL-FOR	$ < in[i].length
22166	669	12	ChiSquareTest.java	checkNonNegative	i	int	0	NIL-FOR	j < in[$].length
22166	669	12	ChiSquareTest.java	checkNonNegative	in	long[][]	0	NIL-FOR	j < $[i].length
2225	670	16	ChiSquareTest.java	checkNonNegative	j	int	0	NotPositiveException	in[i][$] < 0
2225	670	16	ChiSquareTest.java	checkNonNegative	i	int	0	NotPositiveException	in[$][j] < 0
2225	670	16	ChiSquareTest.java	checkNonNegative	in	long[][]	0	NotPositiveException	$[i][j] < 0
1324	107	8	CholeskyDecomposition.java	CholeskyDecomposition	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
21363	118	8	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	$ < order
21363	118	8	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	i < $
21364	122	12	CholeskyDecomposition.java	CholeskyDecomposition	j	int	0	NIL-FOR	$ < order
21364	122	12	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	j < $
1325	128	16	CholeskyDecomposition.java	CholeskyDecomposition	lIJ	double	0	NonSymmetricMatrixException	FastMath.abs($ - lJI) > maxDelta
1325	128	16	CholeskyDecomposition.java	CholeskyDecomposition	lJI	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - $) > maxDelta
1325	128	16	CholeskyDecomposition.java	CholeskyDecomposition	maxDelta	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - lJI) > $
21365	136	8	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	$ < order
21365	136	8	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	i < $
1326	141	12	CholeskyDecomposition.java	CholeskyDecomposition	ltI	double[]	0	NonPositiveDefiniteMatrixException	$[i] <= absolutePositivityThreshold
1326	141	12	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NonPositiveDefiniteMatrixException	ltI[$] <= absolutePositivityThreshold
1326	141	12	CholeskyDecomposition.java	CholeskyDecomposition	absolutePositivityThreshold	double	0	NonPositiveDefiniteMatrixException	ltI[i] <= $
21366	148	12	CholeskyDecomposition.java	CholeskyDecomposition	q	int	0	NIL-FOR	$ > i
21366	148	12	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	q > $
21367	151	16	CholeskyDecomposition.java	CholeskyDecomposition	p	int	0	NIL-FOR	$ < order
21367	151	16	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	p < $
1327	164	8	CholeskyDecomposition.java	getL	THIS	CholeskyDecomposition	0	DEF	$.cachedL == null
1328	177	8	CholeskyDecomposition.java	getLT	THIS	CholeskyDecomposition	0	DEF	$.cachedLT == null
21368	191	8	CholeskyDecomposition.java	getDeterminant	THIS	CholeskyDecomposition	0	NIL-FOR	i < $.lTData.$.length
21368	191	8	CholeskyDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < lTData.length
2549	45	8	Chromosome.java	getFitness	THIS	Chromosome	0	DEF	$.fitness == NO_FITNESS
2550	90	12	Chromosome.java	findSameChromosome	THIS	Chromosome	0	RET	$.isSame($.anotherChr)
2551	105	8	Chromosome.java	searchForFitnessUpdate	sameChromosome	Chromosome	0	DEF	$ != null
2760	100	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	1	DEF	$.previousState != null
2760	100	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
22493	106	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
22493	106	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
22494	121	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
22494	121	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
788	116	8	Complex.java	abs	THIS	Complex	0	RET	$.isNaN
789	119	8	Complex.java	abs	THIS	Complex	0	RET	$.isInfinite()
790	122	8	Complex.java	abs	THIS	Complex	1	RET	FastMath.abs($.real) < FastMath.abs($.imaginary)
791	123	12	Complex.java	abs	THIS	Complex	0	RET	$.imaginary == 0.0
792	129	12	Complex.java	abs	THIS	Complex	0	RET	$.real == 0.0
793	158	8	Complex.java	add	THIS	Complex	0	RET	$.isNaN
793	158	8	Complex.java	add	THIS	Complex	0	RET	addend.$.isNaN
793	158	8	Complex.java	add	addend	Complex	0	RET	$.isNaN
794	175	8	Complex.java	add	THIS	Complex	0	RET	$.isNaN
794	175	8	Complex.java	add	addend	double	0	RET	Double.isNaN($)
795	197	8	Complex.java	conjugate	THIS	Complex	0	RET	$.isNaN
796	249	8	Complex.java	divide	THIS	Complex	0	RET	divisor.$.isNaN
796	249	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN
796	249	8	Complex.java	divide	divisor	Complex	0	RET	$.isNaN
797	255	8	Complex.java	divide	c	double	0	RET	$ == 0.0
797	255	8	Complex.java	divide	d	double	0	RET	$ == 0.0
798	259	8	Complex.java	divide	THIS	Complex	0	RET	$.isInfinite()
798	259	8	Complex.java	divide	divisor	Complex	0	RET	$.isInfinite()
799	263	8	Complex.java	divide	c	double	1	RET	FastMath.abs($) < FastMath.abs(d)
799	263	8	Complex.java	divide	d	double	1	RET	FastMath.abs(c) < FastMath.abs($)
800	285	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN
800	285	8	Complex.java	divide	divisor	double	0	RET	Double.isNaN($)
801	288	8	Complex.java	divide	divisor	double	0	RET	$ == 0d
802	291	8	Complex.java	divide	divisor	double	0	RET	Double.isInfinite($)
803	300	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.isNaN
804	304	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.imaginary == 0.0
804	304	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.real == 0.0
805	308	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.isInfinite
806	312	8	Complex.java	reciprocal	THIS	Complex	1	RET	FastMath.abs($.real) < FastMath.abs($.imaginary)
807	340	8	Complex.java	equals	THIS	Complex	0	RET	$ == other
807	340	8	Complex.java	equals	other	Object	0	RET	this == $
808	343	8	Complex.java	equals	other	Object	0	RET	$ instanceof Complex
809	345	12	Complex.java	equals	THIS	Complex	1	RET	c.$.isNaN
809	345	12	Complex.java	equals	c	Complex	1	RET	$.isNaN
810	363	8	Complex.java	hashCode	THIS	Complex	0	RET	$.isNaN
811	439	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
811	439	8	Complex.java	multiply	THIS	Complex	0	RET	factor.$.isNaN
811	439	8	Complex.java	multiply	factor	Complex	0	RET	$.isNaN
812	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(factor.$.imaginary)
812	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(factor.$.real)
812	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
812	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
812	442	8	Complex.java	multiply	factor	Complex	0	RET	Double.isInfinite($.imaginary)
812	442	8	Complex.java	multiply	factor	Complex	0	RET	Double.isInfinite($.real)
813	462	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
814	465	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
814	465	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
815	481	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
815	481	8	Complex.java	multiply	factor	double	0	RET	Double.isNaN($)
816	484	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
816	484	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
816	484	8	Complex.java	multiply	factor	double	0	RET	Double.isInfinite($)
817	501	8	Complex.java	negate	THIS	Complex	0	RET	$.isNaN
818	529	8	Complex.java	subtract	THIS	Complex	0	RET	subtrahend.$.isNaN
818	529	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN
818	529	8	Complex.java	subtract	subtrahend	Complex	0	RET	$.isNaN
819	546	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN
819	546	8	Complex.java	subtract	subtrahend	double	0	RET	Double.isNaN($)
820	569	8	Complex.java	acos	THIS	Complex	0	RET	$.isNaN
821	594	8	Complex.java	asin	THIS	Complex	0	RET	$.isNaN
822	619	8	Complex.java	atan	THIS	Complex	0	RET	$.isNaN
823	660	8	Complex.java	cos	THIS	Complex	0	RET	$.isNaN
824	700	8	Complex.java	cosh	THIS	Complex	0	RET	$.isNaN
825	741	8	Complex.java	exp	THIS	Complex	0	RET	$.isNaN
826	786	8	Complex.java	log	THIS	Complex	0	RET	$.isNaN
827	864	8	Complex.java	sin	THIS	Complex	0	RET	$.isNaN
828	904	8	Complex.java	sinh	THIS	Complex	0	RET	$.isNaN
829	947	8	Complex.java	sqrt	THIS	Complex	0	RET	$.isNaN
830	951	8	Complex.java	sqrt	THIS	Complex	0	RET	$.imaginary == 0.0
830	951	8	Complex.java	sqrt	THIS	Complex	0	RET	$.real == 0.0
831	956	8	Complex.java	sqrt	THIS	Complex	1	RET	$.real >= 0.0
832	1018	8	Complex.java	tan	THIS	Complex	0	RET	$.isNaN
832	1018	8	Complex.java	tan	THIS	Complex	0	RET	Double.isInfinite($.real)
833	1021	8	Complex.java	tan	THIS	Complex	0	RET	$.imaginary > 20.0
834	1024	8	Complex.java	tan	THIS	Complex	0	RET	$.imaginary < -20.0
835	1069	8	Complex.java	tanh	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
835	1069	8	Complex.java	tanh	THIS	Complex	0	RET	$.isNaN
836	1072	8	Complex.java	tanh	THIS	Complex	0	RET	$.real > 20.0
837	1075	8	Complex.java	tanh	THIS	Complex	0	RET	$.real < -20.0
838	1133	8	Complex.java	nthRoot	n	int	0	NotPositiveException	$ <= 0
839	1140	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isNaN
840	1144	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isInfinite()
20952	1156	8	Complex.java	nthRoot	k	int	0	NIL-FOR	$ < n
20952	1156	8	Complex.java	nthRoot	n	int	0	NIL-FOR	k < $
841	1190	8	Complex.java	valueOf	realPart	double	0	RET	Double.isNaN($)
841	1190	8	Complex.java	valueOf	imaginaryPart	double	0	RET	Double.isNaN($)
842	1204	8	Complex.java	valueOf	realPart	double	0	RET	Double.isNaN($)
774	115	8	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NullArgumentException	$ == null
775	118	8	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NoDataException	$.length() == 0
776	121	8	ComplexFormat.java	ComplexFormat	imaginaryFormat	NumberFormat	0	NullArgumentException	$ == null
777	124	8	ComplexFormat.java	ComplexFormat	realFormat	NumberFormat	0	NullArgumentException	$ == null
778	183	8	ComplexFormat.java	format	im	double	1	DEF	$ < 0.0
779	188	15	ComplexFormat.java	format	im	double	0	DEF	Double.isNaN($)
779	188	15	ComplexFormat.java	format	im	double	0	DEF	$ > 0.0
780	211	8	ComplexFormat.java	formatImaginary	absIm	double	0	MathInternalError	$ < 0
781	219	8	ComplexFormat.java	formatImaginary	toAppendTo	StringBuffer	0	DEF	$.toString().equals("1")
782	245	8	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Complex
783	247	15	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Number
784	323	8	ComplexFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
785	346	8	ComplexFormat.java	parse	re	Number	0	RET	$ == null
786	382	8	ComplexFormat.java	parse	im	Number	0	RET	$ == null
787	390	8	ComplexFormat.java	parse	THIS	ComplexFormat	0	RET	CompositeFormat.parseFixedstring(source, $.getImaginaryCharacter(), pos)
787	390	8	ComplexFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, getImaginaryCharacter(), pos)
787	390	8	ComplexFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, getImaginaryCharacter(), $)
766	63	8	ComplexUtils.java	polar2Complex	r	double	0	MathIllegalArgumentException	$ < 0
20950	81	8	ComplexUtils.java	convertToComplex	THIS	ComplexUtils	0	NIL-FOR	i < real.$.length
20950	81	8	ComplexUtils.java	convertToComplex	i	int	0	NIL-FOR	$ < real.length
20950	81	8	ComplexUtils.java	convertToComplex	real	double[]	0	NIL-FOR	i < $.length
485	85	9	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
485	85	9	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
20916	87	13	CompositeFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
20916	87	13	CompositeFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
20916	87	13	CompositeFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
486	92	13	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
486	92	13	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
487	121	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	$ < source.length()
487	121	8	CompositeFormat.java	parseNumber	source	String	0	DEF	endIndex < $.length()
488	122	12	CompositeFormat.java	parseNumber	sb	StringBuilder	0	DEF	source.substring(startIndex, endIndex).compareTo($.toString()) == 0
488	122	12	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	source.substring($, endIndex).compareTo(sb.toString()) == 0
488	122	12	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	source.substring(startIndex, $).compareTo(sb.toString()) == 0
488	122	12	CompositeFormat.java	parseNumber	source	String	0	DEF	$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
489	148	8	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	$ == endIndex
489	148	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	startIndex == $
20917	153	12	CompositeFormat.java	parseNumber	THIS	CompositeFormat	0	NIL-FOR	i < special.$.length
20917	153	12	CompositeFormat.java	parseNumber	i	int	0	NIL-FOR	$ < special.length
20917	153	12	CompositeFormat.java	parseNumber	special	double[]	0	NIL-FOR	i < $.length
490	155	16	CompositeFormat.java	parseNumber	number	Number	0	DEF	$ != null
491	177	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	source.substring($, endIndex).compareTo(expected) != 0
491	177	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	$ >= source.length()
491	177	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	source.substring(startIndex, $).compareTo(expected) != 0
491	177	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	$ > source.length()
491	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	$.substring(startIndex, endIndex).compareTo(expected) != 0
491	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	endIndex > $.length()
491	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	startIndex >= $.length()
491	177	8	CompositeFormat.java	parseFixedstring	expected	String	0	RET	source.substring(startIndex, endIndex).compareTo($) != 0
492	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isInfinite($)
492	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isNaN($)
1569	166	8	ConjugateGradient.java	solveInPlace	m	RealLinearOperator	1	DEF	$ == null
1570	175	8	ConjugateGradient.java	solveInPlace	rmax	double	0	RET	rnorm <= $
1570	175	8	ConjugateGradient.java	solveInPlace	rnorm	double	0	RET	$ <= rmax
1571	185	12	ConjugateGradient.java	solveInPlace	m	RealLinearOperator	0	DEF	$ != null
1572	189	12	ConjugateGradient.java	solveInPlace	THIS	ConjugateGradient	0	DEF	$.check
1572	189	12	ConjugateGradient.java	solveInPlace	rhoNext	double	0	DEF	$ <= 0.
1573	197	12	ConjugateGradient.java	solveInPlace	manager	IterationManager	1	DEF	$.getIterations() == 2
1574	204	12	ConjugateGradient.java	solveInPlace	THIS	ConjugateGradient	0	DEF	$.check
1574	204	12	ConjugateGradient.java	solveInPlace	pq	double	0	DEF	$ <= 0.
1575	220	12	ConjugateGradient.java	solveInPlace	rmax	double	0	RET	rnorm <= $
1575	220	12	ConjugateGradient.java	solveInPlace	rnorm	double	0	RET	$ <= rmax
89	128	8	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(hPrev, 0.0, $)
89	128	8	ContinuedFraction.java	evaluate	hPrev	double	0	DEF	Precision.equals($, 0.0, small)
20867	137	8	ContinuedFraction.java	evaluate	n	int	0	NIL-WHILE	$ < maxIterations
20867	137	8	ContinuedFraction.java	evaluate	maxIterations	int	0	NIL-WHILE	n < $
90	142	12	ContinuedFraction.java	evaluate	dN	double	0	DEF	Precision.equals($, 0.0, small)
90	142	12	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(dN, 0.0, $)
91	146	12	ContinuedFraction.java	evaluate	cN	double	0	DEF	Precision.equals($, 0.0, small)
91	146	12	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(cN, 0.0, $)
92	154	12	ContinuedFraction.java	evaluate	hN	double	0	ConvergenceException	Double.isInfinite($)
93	158	12	ContinuedFraction.java	evaluate	hN	double	0	ConvergenceException	Double.isNaN($)
94	163	12	ContinuedFraction.java	evaluate	deltaN	double	0	DEF	FastMath.abs($ - 1.0) < epsilon
94	163	12	ContinuedFraction.java	evaluate	epsilon	double	0	DEF	FastMath.abs(deltaN - 1.0) < $
95	173	8	ContinuedFraction.java	evaluate	n	int	0	MaxCountExceededException	$ >= maxIterations
95	173	8	ContinuedFraction.java	evaluate	maxIterations	int	0	MaxCountExceededException	n >= $
2806	130	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	RET	model.$.steps.size() == 0
2806	130	4	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	RET	$.steps.size() == 0
2807	134	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	1	DEF	$.steps.size() == 0
2808	139	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DimensionMismatchException	$.getInterpolatedState().length != model.getInterpolatedState().length
2808	139	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DimensionMismatchException	getInterpolatedState().length != $.getInterpolatedState().length
2809	144	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	MathIllegalArgumentException	$.forward ^ model.$.forward
2809	144	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	MathIllegalArgumentException	forward ^ $.forward
2810	153	6	ContinuousOutputModel.java	append	step	double	0	MathIllegalArgumentException	FastMath.abs(gap) > 1.0e-3 * FastMath.abs($)
2810	153	6	ContinuousOutputModel.java	append	gap	double	0	MathIllegalArgumentException	FastMath.abs($) > 1.0e-3 * FastMath.abs(step)
2811	186	4	ContinuousOutputModel.java	handleStep	THIS	ContinuousOutputModel	0	DEF	$.steps.size() == 0
2812	193	4	ContinuousOutputModel.java	handleStep	isLast	boolean	0	DEF	$
2813	251	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMin) <= 0
2813	251	6	ContinuousOutputModel.java	setInterpolatedTime	sMin	StepInterpolator	0	RET	locatePoint(time, $) <= 0
2813	251	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMin) <= 0
2814	256	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMax) >= 0
2814	256	6	ContinuousOutputModel.java	setInterpolatedTime	sMax	StepInterpolator	0	RET	locatePoint(time, $) >= 0
2814	256	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMax) >= 0
22525	263	6	ContinuousOutputModel.java	setInterpolatedTime	iMin	int	0	NIL-WHILE	iMax - $ > 5
22525	263	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	$ - iMin > 5
2815	268	8	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ < 0
2816	271	15	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ > 0
2817	285	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs($ - tMin) < 1e-6
2817	285	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs(tMax - $) < 1e-6
2817	285	8	ContinuousOutputModel.java	setInterpolatedTime	tMin	double	1	DEF	FastMath.abs(tMed - $) < 1e-6
2817	285	8	ContinuousOutputModel.java	setInterpolatedTime	tMax	double	1	DEF	FastMath.abs($ - tMed) < 1e-6
2818	308	8	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.index < low
2818	308	8	ContinuousOutputModel.java	setInterpolatedTime	low	int	1	DEF	index < $
2819	310	15	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	DEF	$.index > high
2819	310	15	ContinuousOutputModel.java	setInterpolatedTime	high	int	0	DEF	index > $
22526	318	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.locatePoint(time, $.steps.get($.index)) > 0
22526	318	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.index <= iMax
22526	318	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	index <= $
22526	318	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	NIL-WHILE	locatePoint($, steps.get(index)) > 0
2820	342	4	ContinuousOutputModel.java	locatePoint	THIS	ContinuousOutputModel	0	RET	$.forward
2821	343	6	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getPreviousTime()
2821	343	6	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getPreviousTime()
2822	345	13	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getCurrentTime()
2822	345	13	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getCurrentTime()
2823	351	4	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getPreviousTime()
2823	351	4	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getPreviousTime()
2824	353	11	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getCurrentTime()
2824	353	11	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getCurrentTime()
2447	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	THIS	CorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != order
2447	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	DimensionMismatchException	mean.length != $
2447	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != order
22282	121	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	i	int	0	NIL-FOR	$ < order
22282	121	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	NIL-FOR	i < $
22283	168	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < $.normalized.$.length
22283	168	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < normalized.length
22284	174	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < correlated.$.length
22284	174	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < correlated.length
22284	174	8	CorrelatedRandomVectorGenerator.java	nextVector	correlated	double[]	0	NIL-FOR	i < $.length
22285	176	12	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.root.getColumnDimension()
22285	176	12	CorrelatedRandomVectorGenerator.java	nextVector	j	int	0	NIL-FOR	$ < root.getColumnDimension()
22195	163	8	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	$ < dimension
22195	163	8	Covariance.java	computeCovarianceMatrix	dimension	int	0	NIL-FOR	i < $
22196	164	12	Covariance.java	computeCovarianceMatrix	j	int	0	NIL-FOR	$ < i
22196	164	12	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	j < $
2262	224	8	Covariance.java	covariance	THIS	Covariance	1	MathIllegalArgumentException	length != yArray.$.length
2262	224	8	Covariance.java	covariance	length	int	1	MathIllegalArgumentException	$ != yArray.length
2262	224	8	Covariance.java	covariance	yArray	double[]	1	MathIllegalArgumentException	length != $.length
2263	227	15	Covariance.java	covariance	length	int	1	MathIllegalArgumentException	$ < 2
22197	233	12	Covariance.java	covariance	i	int	0	NIL-FOR	$ < length
22197	233	12	Covariance.java	covariance	length	int	0	NIL-FOR	i < $
2264	267	8	Covariance.java	checkSufficientData	nRows	int	0	MathIllegalArgumentException	$ < 2
2264	267	8	Covariance.java	checkSufficientData	nCols	int	0	MathIllegalArgumentException	$ < 2
2539	85	8	CycleCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2539	85	8	CycleCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2540	101	8	CycleCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
2540	101	8	CycleCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
22331	121	8	CycleCrossover.java	mate	length	int	0	NIL-WHILE	visitedIndices.size() < $
22331	121	8	CycleCrossover.java	mate	visitedIndices	Set<Integer>	0	NIL-WHILE	$.size() < length
22332	127	12	CycleCrossover.java	mate	indices	List<Integer>	0	NIL-WHILE	idx != $.get(0)
22332	127	12	CycleCrossover.java	mate	idx	int	0	NIL-WHILE	$ != indices.get(0)
2541	137	12	CycleCrossover.java	mate	cycle	int	0	DEF	$++ % 2 != 0
22333	148	12	CycleCrossover.java	mate	length	int	0	NIL-WHILE	visitedIndices.size() < $
22333	148	12	CycleCrossover.java	mate	visitedIndices	Set<Integer>	0	NIL-WHILE	$.size() < length
22333	148	12	CycleCrossover.java	mate	visitedIndices	Set<Integer>	0	NIL-WHILE	$.contains(idx)
22333	148	12	CycleCrossover.java	mate	idx	int	0	NIL-WHILE	visitedIndices.contains($)
2542	150	16	CycleCrossover.java	mate	length	int	0	DEF	idx >= $
2542	150	16	CycleCrossover.java	mate	idx	int	0	DEF	$ >= length
3362	161	8	DSCompiler.java	getCompiler	THIS	DSCompiler	0	RET	cache[parameters].length > order
3362	161	8	DSCompiler.java	getCompiler	THIS	DSCompiler	0	RET	cache.$.length > parameters
3362	161	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$[parameters].length > order
3362	161	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$.length > parameters
3362	161	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	RET	$ != null
3362	161	8	DSCompiler.java	getCompiler	parameters	int	0	RET	cache[$].length > order
3362	161	8	DSCompiler.java	getCompiler	parameters	int	0	RET	cache.length > $
3362	161	8	DSCompiler.java	getCompiler	order	int	0	RET	cache[parameters].length > $
3363	171	8	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	DEF	$ != null
22700	173	12	DSCompiler.java	getCompiler	THIS	DSCompiler	0	NIL-FOR	i < cache.$.length
22700	173	12	DSCompiler.java	getCompiler	i	int	0	NIL-FOR	$ < cache.length
22700	173	12	DSCompiler.java	getCompiler	cache	DSCompiler[][]	0	NIL-FOR	i < $.length
22701	179	8	DSCompiler.java	getCompiler	diag	int	0	NIL-FOR	$ <= maxParameters + maxOrder
22701	179	8	DSCompiler.java	getCompiler	maxParameters	int	0	NIL-FOR	diag <= $ + maxOrder
22701	179	8	DSCompiler.java	getCompiler	maxOrder	int	0	NIL-FOR	diag <= maxParameters + $
22702	180	12	DSCompiler.java	getCompiler	o	int	0	NIL-FOR	$ <= FastMath.min(maxOrder, diag)
22702	180	12	DSCompiler.java	getCompiler	diag	int	0	NIL-FOR	o <= FastMath.min(maxOrder, $)
22702	180	12	DSCompiler.java	getCompiler	maxOrder	int	0	NIL-FOR	o <= FastMath.min($, diag)
3364	182	16	DSCompiler.java	getCompiler	p	int	0	DEF	newCache[$][o] == null
3364	182	16	DSCompiler.java	getCompiler	o	int	0	DEF	newCache[p][$] == null
3364	182	16	DSCompiler.java	getCompiler	newCache	DSCompiler[][]	0	DEF	$[p][o] == null
3365	238	8	DSCompiler.java	compileSizes	parameters	int	1	DEF	$ == 0
22703	243	12	DSCompiler.java	compileSizes	i	int	0	NIL-FOR	$ < order
22703	243	12	DSCompiler.java	compileSizes	order	int	0	NIL-FOR	i < $
3366	263	8	DSCompiler.java	compileDerivativesIndirection	parameters	int	0	RET	$ == 0
3366	263	8	DSCompiler.java	compileDerivativesIndirection	order	int	0	RET	$ == 0
22704	272	8	DSCompiler.java	compileDerivativesIndirection	i	int	0	NIL-FOR	$ < vSize
22704	272	8	DSCompiler.java	compileDerivativesIndirection	vSize	int	0	NIL-FOR	i < $
22705	280	8	DSCompiler.java	compileDerivativesIndirection	i	int	0	NIL-FOR	$ < dSize
22705	280	8	DSCompiler.java	compileDerivativesIndirection	dSize	int	0	NIL-FOR	i < $
3367	311	8	DSCompiler.java	compileLowerIndirection	parameters	int	0	RET	$ == 0
3367	311	8	DSCompiler.java	compileLowerIndirection	order	int	0	RET	$ <= 1
22706	320	8	DSCompiler.java	compileLowerIndirection	i	int	0	NIL-FOR	$ < dSize
22706	320	8	DSCompiler.java	compileLowerIndirection	dSize	int	0	NIL-FOR	i < $
3368	346	8	DSCompiler.java	compileMultiplicationIndirection	parameters	int	0	RET	$ == 0
3368	346	8	DSCompiler.java	compileMultiplicationIndirection	order	int	0	RET	$ == 0
22707	357	8	DSCompiler.java	compileMultiplicationIndirection	i	int	0	NIL-FOR	$ < dSize
22707	357	8	DSCompiler.java	compileMultiplicationIndirection	dSize	int	0	NIL-FOR	i < $
22708	360	12	DSCompiler.java	compileMultiplicationIndirection	THIS	DSCompiler	0	NIL-FOR	j < dRow.$.length
22708	360	12	DSCompiler.java	compileMultiplicationIndirection	j	int	0	NIL-FOR	$ < dRow.length
22708	360	12	DSCompiler.java	compileMultiplicationIndirection	dRow	int[][]	0	NIL-FOR	j < $.length
22709	367	12	DSCompiler.java	compileMultiplicationIndirection	j	int	0	NIL-FOR	$ < row.size()
22709	367	12	DSCompiler.java	compileMultiplicationIndirection	row	List<int[]>	0	NIL-FOR	j < $.size()
3369	369	16	DSCompiler.java	compileMultiplicationIndirection	termJ	int[]	0	DEF	$[0] > 0
22710	370	20	DSCompiler.java	compileMultiplicationIndirection	k	int	0	NIL-FOR	$ < row.size()
22710	370	20	DSCompiler.java	compileMultiplicationIndirection	row	List<int[]>	0	NIL-FOR	k < $.size()
3370	372	24	DSCompiler.java	compileMultiplicationIndirection	termK	int[]	0	DEF	termJ[2] == $[2]
3370	372	24	DSCompiler.java	compileMultiplicationIndirection	termK	int[]	0	DEF	termJ[1] == $[1]
3370	372	24	DSCompiler.java	compileMultiplicationIndirection	termJ	int[]	0	DEF	$[2] == termK[2]
3370	372	24	DSCompiler.java	compileMultiplicationIndirection	termJ	int[]	0	DEF	$[1] == termK[1]
3371	413	8	DSCompiler.java	compileCompositionIndirection	parameters	int	0	RET	$ == 0
3371	413	8	DSCompiler.java	compileCompositionIndirection	order	int	0	RET	$ == 0
22711	428	8	DSCompiler.java	compileCompositionIndirection	i	int	0	NIL-FOR	$ < dSize
22711	428	8	DSCompiler.java	compileCompositionIndirection	dSize	int	0	NIL-FOR	i < $
22712	441	16	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	j < $.term.$.length
22712	441	16	DSCompiler.java	compileCompositionIndirection	j	int	0	NIL-FOR	$ < term.length
22713	452	16	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	l < $.term.$.length
22713	452	16	DSCompiler.java	compileCompositionIndirection	l	int	0	NIL-FOR	$ < term.length
22714	456	20	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	j < $.term.$.length
22714	456	20	DSCompiler.java	compileCompositionIndirection	j	int	0	NIL-FOR	$ < term.length
3372	462	24	DSCompiler.java	compileCompositionIndirection	j	int	0	DEF	$ == l
3372	462	24	DSCompiler.java	compileCompositionIndirection	l	int	0	DEF	j == $
22715	477	12	DSCompiler.java	compileCompositionIndirection	j	int	0	NIL-FOR	$ < row.size()
22715	477	12	DSCompiler.java	compileCompositionIndirection	row	List<int[]>	0	NIL-FOR	j < $.size()
3373	479	16	DSCompiler.java	compileCompositionIndirection	termJ	int[]	0	DEF	$[0] > 0
22716	480	20	DSCompiler.java	compileCompositionIndirection	k	int	0	NIL-FOR	$ < row.size()
22716	480	20	DSCompiler.java	compileCompositionIndirection	row	List<int[]>	0	NIL-FOR	k < $.size()
22717	483	24	DSCompiler.java	compileCompositionIndirection	THIS	DSCompiler	0	NIL-FOR	l < termJ.$.length
22717	483	24	DSCompiler.java	compileCompositionIndirection	l	int	0	NIL-FOR	$ < termJ.length
22717	483	24	DSCompiler.java	compileCompositionIndirection	equals	boolean	0	NIL-FOR	$
22717	483	24	DSCompiler.java	compileCompositionIndirection	termJ	int[]	0	NIL-FOR	l < $.length
3374	486	24	DSCompiler.java	compileCompositionIndirection	equals	boolean	0	DEF	$
3375	527	8	DSCompiler.java	getPartialDerivativeIndex	THIS	DSCompiler	0	DimensionMismatchException	orders.$.length != $.getFreeParameters()
3375	527	8	DSCompiler.java	getPartialDerivativeIndex	orders	int	0	DimensionMismatchException	$.length != getFreeParameters()
22718	554	8	DSCompiler.java	getPartialDerivativeIndex	i	int	0	NIL-FOR	$ >= 0
3376	561	12	DSCompiler.java	getPartialDerivativeIndex	ordersSum	int	0	NumberIsTooLargeException	$ > order
3376	561	12	DSCompiler.java	getPartialDerivativeIndex	order	int	0	NumberIsTooLargeException	ordersSum > $
22719	565	12	DSCompiler.java	getPartialDerivativeIndex	derivativeOrder	int	0	NIL-WHILE	$-- > 0
22720	649	8	DSCompiler.java	linearCombination	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
22720	649	8	DSCompiler.java	linearCombination	i	int	0	NIL-FOR	$ < getSize()
22721	674	8	DSCompiler.java	linearCombination	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
22721	674	8	DSCompiler.java	linearCombination	i	int	0	NIL-FOR	$ < getSize()
22722	705	8	DSCompiler.java	linearCombination	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
22722	705	8	DSCompiler.java	linearCombination	i	int	0	NIL-FOR	$ < getSize()
22723	726	8	DSCompiler.java	add	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
22723	726	8	DSCompiler.java	add	i	int	0	NIL-FOR	$ < getSize()
22724	742	8	DSCompiler.java	subtract	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
22724	742	8	DSCompiler.java	subtract	i	int	0	NIL-FOR	$ < getSize()
22725	760	8	DSCompiler.java	multiply	THIS	DSCompiler	0	NIL-FOR	i < $.multIndirection.$.length
22725	760	8	DSCompiler.java	multiply	i	int	0	NIL-FOR	$ < multIndirection.length
22726	763	12	DSCompiler.java	multiply	THIS	DSCompiler	0	NIL-FOR	j < mappingI.$.length
22726	763	12	DSCompiler.java	multiply	j	int	0	NIL-FOR	$ < mappingI.length
22726	763	12	DSCompiler.java	multiply	mappingI	int[][]	0	NIL-FOR	j < $.length
22727	811	8	DSCompiler.java	remainder	THIS	DSCompiler	0	NIL-FOR	i < $.getSize()
22727	811	8	DSCompiler.java	remainder	i	int	0	NIL-FOR	$ < getSize()
22728	833	8	DSCompiler.java	pow	i	int	0	NIL-FOR	$ > 0
22729	839	8	DSCompiler.java	pow	THIS	DSCompiler	0	NIL-FOR	i <= $.order
22729	839	8	DSCompiler.java	pow	i	int	0	NIL-FOR	$ <= order
3377	861	8	DSCompiler.java	pow	n	int	0	RET	$ == 0
3378	872	8	DSCompiler.java	pow	n	int	1	DEF	$ > 0
22730	876	12	DSCompiler.java	pow	i	int	0	NIL-FOR	$ > 0
22731	885	12	DSCompiler.java	pow	THIS	DSCompiler	0	NIL-FOR	i <= $.order
22731	885	12	DSCompiler.java	pow	i	int	0	NIL-FOR	$ <= order
22732	892	8	DSCompiler.java	pow	THIS	DSCompiler	0	NIL-FOR	i <= $.order
22732	892	8	DSCompiler.java	pow	i	int	0	NIL-FOR	$ <= order
3379	938	8	DSCompiler.java	rootN	n	int	1	DEF	$ == 2
3380	940	15	DSCompiler.java	rootN	n	int	1	DEF	$ == 3
22733	947	8	DSCompiler.java	rootN	THIS	DSCompiler	0	NIL-FOR	i <= $.order
22733	947	8	DSCompiler.java	rootN	i	int	0	NIL-FOR	$ <= order
3381	1012	8	DSCompiler.java	log	THIS	DSCompiler	0	DEF	$.order > 0
22734	1015	12	DSCompiler.java	log	THIS	DSCompiler	0	NIL-FOR	i <= $.order
22734	1015	12	DSCompiler.java	log	i	int	0	NIL-FOR	$ <= order
3382	1040	8	DSCompiler.java	log1p	THIS	DSCompiler	0	DEF	$.order > 0
22735	1043	12	DSCompiler.java	log1p	THIS	DSCompiler	0	NIL-FOR	i <= $.order
22735	1043	12	DSCompiler.java	log1p	i	int	0	NIL-FOR	$ <= order
3383	1068	8	DSCompiler.java	cos	THIS	DSCompiler	0	DEF	$.order > 0
22736	1070	12	DSCompiler.java	cos	THIS	DSCompiler	0	NIL-FOR	i <= $.order
22736	1070	12	DSCompiler.java	cos	i	int	0	NIL-FOR	$ <= order
3384	1094	8	DSCompiler.java	sin	THIS	DSCompiler	0	DEF	$.order > 0
22737	1096	12	DSCompiler.java	sin	THIS	DSCompiler	0	NIL-FOR	i <= $.order
22737	1096	12	DSCompiler.java	sin	i	int	0	NIL-FOR	$ <= order
3385	1122	8	DSCompiler.java	tan	THIS	DSCompiler	0	DEF	$.order > 0
22738	1134	12	DSCompiler.java	tan	THIS	DSCompiler	0	NIL-FOR	n <= $.order
22738	1134	12	DSCompiler.java	tan	n	int	0	NIL-FOR	$ <= order
22739	1139	16	DSCompiler.java	tan	k	int	0	NIL-FOR	$ >= 0
3386	1141	20	DSCompiler.java	tan	k	int	1	DEF	$ > 2
3387	1143	27	DSCompiler.java	tan	k	int	0	DEF	$ == 2
3388	1147	16	DSCompiler.java	tan	n	int	0	DEF	($ & 0x1) == 0
3389	1176	8	DSCompiler.java	acos	THIS	DSCompiler	0	DEF	$.order > 0
22740	1190	12	DSCompiler.java	acos	THIS	DSCompiler	0	NIL-FOR	n <= $.order
22740	1190	12	DSCompiler.java	acos	n	int	0	NIL-FOR	$ <= order
22741	1195	16	DSCompiler.java	acos	k	int	0	NIL-FOR	$ >= 0
3390	1197	20	DSCompiler.java	acos	k	int	1	DEF	$ > 2
3391	1199	27	DSCompiler.java	acos	k	int	0	DEF	$ == 2
3392	1203	16	DSCompiler.java	acos	n	int	0	DEF	($ & 0x1) == 0
3393	1233	8	DSCompiler.java	asin	THIS	DSCompiler	0	DEF	$.order > 0
22742	1247	12	DSCompiler.java	asin	THIS	DSCompiler	0	NIL-FOR	n <= $.order
22742	1247	12	DSCompiler.java	asin	n	int	0	NIL-FOR	$ <= order
22743	1252	16	DSCompiler.java	asin	k	int	0	NIL-FOR	$ >= 0
3394	1254	20	DSCompiler.java	asin	k	int	1	DEF	$ > 2
3395	1256	27	DSCompiler.java	asin	k	int	0	DEF	$ == 2
3396	1260	16	DSCompiler.java	asin	n	int	0	DEF	($ & 0x1) == 0
3397	1290	8	DSCompiler.java	atan	THIS	DSCompiler	0	DEF	$.order > 0
22744	1304	12	DSCompiler.java	atan	THIS	DSCompiler	0	NIL-FOR	n <= $.order
22744	1304	12	DSCompiler.java	atan	n	int	0	NIL-FOR	$ <= order
22745	1309	16	DSCompiler.java	atan	k	int	0	NIL-FOR	$ >= 0
3398	1311	20	DSCompiler.java	atan	k	int	1	DEF	$ > 2
3399	1313	27	DSCompiler.java	atan	k	int	0	DEF	$ == 2
3400	1317	16	DSCompiler.java	atan	n	int	0	DEF	($ & 0x1) == 0
3401	1354	8	DSCompiler.java	atan2	x	double[]	1	DEF	$[xOffset] >= 0
3401	1354	8	DSCompiler.java	atan2	xOffset	int	1	DEF	x[$] >= 0
22746	1360	12	DSCompiler.java	atan2	THIS	DSCompiler	0	NIL-FOR	i < tmp2.$.length
22746	1360	12	DSCompiler.java	atan2	i	int	0	NIL-FOR	$ < tmp2.length
22746	1360	12	DSCompiler.java	atan2	tmp2	double[]	0	NIL-FOR	i < $.length
22747	1372	12	DSCompiler.java	atan2	THIS	DSCompiler	0	NIL-FOR	i < tmp2.$.length
22747	1372	12	DSCompiler.java	atan2	i	int	0	NIL-FOR	$ < tmp2.length
22747	1372	12	DSCompiler.java	atan2	tmp2	double[]	0	NIL-FOR	i < $.length
3402	1394	8	DSCompiler.java	cosh	THIS	DSCompiler	0	DEF	$.order > 0
22748	1396	12	DSCompiler.java	cosh	THIS	DSCompiler	0	NIL-FOR	i <= $.order
22748	1396	12	DSCompiler.java	cosh	i	int	0	NIL-FOR	$ <= order
3403	1420	8	DSCompiler.java	sinh	THIS	DSCompiler	0	DEF	$.order > 0
22749	1422	12	DSCompiler.java	sinh	THIS	DSCompiler	0	NIL-FOR	i <= $.order
22749	1422	12	DSCompiler.java	sinh	i	int	0	NIL-FOR	$ <= order
3404	1448	8	DSCompiler.java	tanh	THIS	DSCompiler	0	DEF	$.order > 0
22750	1460	12	DSCompiler.java	tanh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
22750	1460	12	DSCompiler.java	tanh	n	int	0	NIL-FOR	$ <= order
22751	1465	16	DSCompiler.java	tanh	k	int	0	NIL-FOR	$ >= 0
3405	1467	20	DSCompiler.java	tanh	k	int	1	DEF	$ > 2
3406	1469	27	DSCompiler.java	tanh	k	int	0	DEF	$ == 2
3407	1473	16	DSCompiler.java	tanh	n	int	0	DEF	($ & 0x1) == 0
3408	1502	8	DSCompiler.java	acosh	THIS	DSCompiler	0	DEF	$.order > 0
22752	1516	12	DSCompiler.java	acosh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
22752	1516	12	DSCompiler.java	acosh	n	int	0	NIL-FOR	$ <= order
22753	1521	16	DSCompiler.java	acosh	k	int	0	NIL-FOR	$ >= 0
3409	1523	20	DSCompiler.java	acosh	k	int	1	DEF	$ > 2
3410	1525	27	DSCompiler.java	acosh	k	int	0	DEF	$ == 2
3411	1529	16	DSCompiler.java	acosh	n	int	0	DEF	($ & 0x1) == 0
3412	1559	8	DSCompiler.java	asinh	THIS	DSCompiler	0	DEF	$.order > 0
22754	1573	12	DSCompiler.java	asinh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
22754	1573	12	DSCompiler.java	asinh	n	int	0	NIL-FOR	$ <= order
22755	1578	16	DSCompiler.java	asinh	k	int	0	NIL-FOR	$ >= 0
3413	1580	20	DSCompiler.java	asinh	k	int	1	DEF	$ > 2
3414	1582	27	DSCompiler.java	asinh	k	int	0	DEF	$ == 2
3415	1586	16	DSCompiler.java	asinh	n	int	0	DEF	($ & 0x1) == 0
3416	1616	8	DSCompiler.java	atanh	THIS	DSCompiler	0	DEF	$.order > 0
22756	1630	12	DSCompiler.java	atanh	THIS	DSCompiler	0	NIL-FOR	n <= $.order
22756	1630	12	DSCompiler.java	atanh	n	int	0	NIL-FOR	$ <= order
22757	1635	16	DSCompiler.java	atanh	k	int	0	NIL-FOR	$ >= 0
3417	1637	20	DSCompiler.java	atanh	k	int	1	DEF	$ > 2
3418	1639	27	DSCompiler.java	atanh	k	int	0	DEF	$ == 2
3419	1643	16	DSCompiler.java	atanh	n	int	0	DEF	($ & 0x1) == 0
22758	1670	8	DSCompiler.java	compose	THIS	DSCompiler	0	NIL-FOR	i < $.compIndirection.$.length
22758	1670	8	DSCompiler.java	compose	i	int	0	NIL-FOR	$ < compIndirection.length
22759	1673	12	DSCompiler.java	compose	THIS	DSCompiler	0	NIL-FOR	j < mappingI.$.length
22759	1673	12	DSCompiler.java	compose	j	int	0	NIL-FOR	$ < mappingI.length
22759	1673	12	DSCompiler.java	compose	mappingI	int[][]	0	NIL-FOR	j < $.length
22760	1676	16	DSCompiler.java	compose	THIS	DSCompiler	0	NIL-FOR	k < mappingIJ.$.length
22760	1676	16	DSCompiler.java	compose	k	int	0	NIL-FOR	$ < mappingIJ.length
22760	1676	16	DSCompiler.java	compose	mappingIJ	int[]	0	NIL-FOR	k < $.length
22761	1693	8	DSCompiler.java	taylor	i	int	0	NIL-FOR	$ >= 0
22762	1696	12	DSCompiler.java	taylor	THIS	DSCompiler	0	NIL-FOR	k < orders.$.length
22762	1696	12	DSCompiler.java	taylor	k	int	0	NIL-FOR	$ < orders.length
22762	1696	12	DSCompiler.java	taylor	orders	int[]	0	NIL-FOR	k < $.length
3420	1697	16	DSCompiler.java	taylor	k	int	0	DEF	orders[$] > 0
3420	1697	16	DSCompiler.java	taylor	orders	int[]	0	DEF	$[k] > 0
3421	1712	8	DSCompiler.java	checkCompatibility	THIS	DSCompiler	0	DimensionMismatchException	$.parameters != compiler.$.parameters
3421	1712	8	DSCompiler.java	checkCompatibility	compiler	DSCompiler	0	DimensionMismatchException	parameters != $.parameters
3422	1715	8	DSCompiler.java	checkCompatibility	THIS	DSCompiler	0	DimensionMismatchException	$.order != compiler.$.order
3422	1715	8	DSCompiler.java	checkCompatibility	compiler	DSCompiler	0	DimensionMismatchException	order != $.order
531	246	8	Decimal64.java	equals	obj	Object	0	RET	$ instanceof Decimal64
1589	114	8	DefaultIterativeLinearSolverEvent.java	getResidual	THIS	DefaultIterativeLinearSolverEvent	0	RET	$.r != null
505	50	8	DefaultTransformer.java	transform	o	Object	0	NullArgumentException	$ == null
506	54	8	DefaultTransformer.java	transform	o	Object	0	RET	$ instanceof Number
507	69	8	DefaultTransformer.java	equals	THIS	DefaultTransformer	0	RET	$ == other
507	69	8	DefaultTransformer.java	equals	other	Object	0	RET	this == $
3423	108	8	DerivativeStructure.java	DerivativeStructure	variables	int	0	NumberIsTooLargeException	index >= $
3423	108	8	DerivativeStructure.java	DerivativeStructure	index	int	0	NumberIsTooLargeException	$ >= variables
3424	112	8	DerivativeStructure.java	DerivativeStructure	order	int	0	DEF	$ > 0
22763	281	8	DerivativeStructure.java	multiply	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
22763	281	8	DerivativeStructure.java	multiply	i	int	0	NIL-FOR	$ < ds.data.length
22763	281	8	DerivativeStructure.java	multiply	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
22764	306	8	DerivativeStructure.java	divide	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
22764	306	8	DerivativeStructure.java	divide	i	int	0	NIL-FOR	$ < ds.data.length
22764	306	8	DerivativeStructure.java	divide	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
22765	353	8	DerivativeStructure.java	negate	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
22765	353	8	DerivativeStructure.java	negate	i	int	0	NIL-FOR	$ < ds.data.length
22765	353	8	DerivativeStructure.java	negate	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
3425	363	8	DerivativeStructure.java	abs	THIS	DerivativeStructure	1	RET	Double.doubleToLongBits($.data[0]) < 0
3426	426	8	DerivativeStructure.java	copySign	m	long	0	RET	$ < 0
3426	426	8	DerivativeStructure.java	copySign	m	long	0	RET	$ >= 0
3426	426	8	DerivativeStructure.java	copySign	s	long	0	RET	$ < 0
3426	426	8	DerivativeStructure.java	copySign	s	long	0	RET	$ >= 0
22766	451	8	DerivativeStructure.java	scalb	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
22766	451	8	DerivativeStructure.java	scalb	i	int	0	NIL-FOR	$ < ds.data.length
22766	451	8	DerivativeStructure.java	scalb	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
3427	477	8	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isInfinite(x.$.data[0])
3427	477	8	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isInfinite(y.$.data[0])
3427	477	8	DerivativeStructure.java	hypot	x	DerivativeStructure	1	RET	Double.isInfinite($.data[0])
3427	477	8	DerivativeStructure.java	hypot	y	DerivativeStructure	1	RET	Double.isInfinite($.data[0])
3428	481	15	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isNaN(x.$.data[0])
3428	481	15	DerivativeStructure.java	hypot	THIS	DerivativeStructure	1	RET	Double.isNaN(y.$.data[0])
3428	481	15	DerivativeStructure.java	hypot	x	DerivativeStructure	1	RET	Double.isNaN($.data[0])
3428	481	15	DerivativeStructure.java	hypot	y	DerivativeStructure	1	RET	Double.isNaN($.data[0])
3429	489	12	DerivativeStructure.java	hypot	expX	int	1	RET	$ > expY + 27
3429	489	12	DerivativeStructure.java	hypot	expY	int	1	RET	expX > $ + 27
3430	492	19	DerivativeStructure.java	hypot	expX	int	1	RET	expY > $ + 27
3430	492	19	DerivativeStructure.java	hypot	expY	int	1	RET	$ > expX + 27
22767	765	8	DerivativeStructure.java	toDegrees	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
22767	765	8	DerivativeStructure.java	toDegrees	i	int	0	NIL-FOR	$ < ds.data.length
22767	765	8	DerivativeStructure.java	toDegrees	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
22768	776	8	DerivativeStructure.java	toRadians	THIS	DerivativeStructure	0	NIL-FOR	i < ds.$.data.$.length
22768	776	8	DerivativeStructure.java	toRadians	i	int	0	NIL-FOR	$ < ds.data.length
22768	776	8	DerivativeStructure.java	toRadians	ds	DerivativeStructure	0	NIL-FOR	i < $.data.length
2110	138	8	DescriptiveStatistics.java	DescriptiveStatistics	initialDoubleArray	double[]	0	DEF	$ != null
2111	162	8	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.windowSize != INFINITE_WINDOW
2112	163	12	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.getN() == $.windowSize
2113	165	19	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	0	DEF	$.getN() < $.windowSize
2114	242	8	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	0	DEF	$.getN() > 0
2115	243	12	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	1	DEF	$.getN() > 1
2116	341	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	MathIllegalArgumentException	$ < 1
2117	342	12	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	MathIllegalArgumentException	$ != INFINITE_WINDOW
2118	353	8	DescriptiveStatistics.java	setWindowSize	THIS	DescriptiveStatistics	0	DEF	windowSize < $.eDA.getNumElements()
2118	353	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
2118	353	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < eDA.getNumElements()
2119	413	8	DescriptiveStatistics.java	getPercentile	THIS	DescriptiveStatistics	1	DEF	$.percentileImpl instanceof Percentile
2854	217	8	Dfp.java	Dfp	x	long	0	DEF	$ == Long.MIN_VALUE
2855	225	8	Dfp.java	Dfp	x	long	1	DEF	$ < 0
22532	233	8	Dfp.java	Dfp	x	long	0	NIL-WHILE	$ != 0
2856	240	8	Dfp.java	Dfp	isLongMin	boolean	0	DEF	$
22533	243	12	Dfp.java	Dfp	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
22533	243	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < mant.length - 1
2857	244	16	Dfp.java	Dfp	THIS	Dfp	0	DEF	$.mant[i] != 0
2857	244	16	Dfp.java	Dfp	i	int	0	DEF	mant[$] != 0
2858	269	8	Dfp.java	Dfp	exponent	int	0	RET	$ == -1023
2859	271	12	Dfp.java	Dfp	x	double	0	RET	$ == 0
2860	273	16	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
22534	282	12	Dfp.java	Dfp	mantissa	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
2861	289	8	Dfp.java	Dfp	exponent	int	0	RET	$ == 1024
2862	291	12	Dfp.java	Dfp	x	double	1	DEF	$ != $
2863	294	19	Dfp.java	Dfp	x	double	1	DEF	$ < 0
2864	308	8	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
2865	349	8	Dfp.java	Dfp	s	String	0	RET	$.equals(POS_INFINITY_STRING)
2866	355	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NEG_INFINITY_STRING)
2867	361	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NAN_STRING)
2868	369	8	Dfp.java	Dfp	p	int	0	DEF	$ == -1
2869	375	8	Dfp.java	Dfp	p	int	1	DEF	$ != -1
22535	381	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$<fpexp.length()
22535	381	12	Dfp.java	Dfp	fpexp	String	0	NIL-FOR	i<$.length()
2870	383	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) == '-'
2870	383	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) == '-'
2871	388	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) <= '9'
2871	388	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) >= '0'
2871	388	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) <= '9'
2871	388	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) >= '0'
2872	393	12	Dfp.java	Dfp	negative	boolean	0	DEF	$
2873	402	8	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.indexOf("-") != -1
2874	412	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) >= '1'
2874	412	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) <= '9'
2874	412	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) >= '1'
2874	412	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) <= '9'
2875	416	12	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
2875	416	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '0'
2875	416	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '0'
2876	420	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
2876	420	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
2877	426	12	Dfp.java	Dfp	p	int	0	DEF	$ == fpdecimal.length()
2877	426	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == $.length()
2878	439	12	Dfp.java	Dfp	p	int	0	DEF	$ == (fpdecimal.length())
2878	439	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == ($.length())
2879	444	12	Dfp.java	Dfp	THIS	Dfp	0	DEF	q == $.mant.$.length*rsize+offset+1
2879	444	12	Dfp.java	Dfp	rsize	int	0	DEF	q == mant.length*$+offset+1
2879	444	12	Dfp.java	Dfp	offset	int	0	DEF	q == mant.length*rsize+$+1
2879	444	12	Dfp.java	Dfp	q	int	0	DEF	$ == mant.length*rsize+offset+1
2880	448	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
2880	448	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
2881	455	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) < '0'
2881	455	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) > '9'
2881	455	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) < '0'
2881	455	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) > '9'
2882	468	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
2882	468	8	Dfp.java	Dfp	offset	int	0	DEF	q != $
2882	468	8	Dfp.java	Dfp	q	int	0	DEF	$ != offset
2883	471	16	Dfp.java	Dfp	offset	int	0	DEF	q == $
2883	471	16	Dfp.java	Dfp	q	int	0	DEF	$ == offset
2884	474	16	Dfp.java	Dfp	striped	char[]	1	DEF	$[q] == '0'
2884	474	16	Dfp.java	Dfp	q	int	1	DEF	striped[$] == '0'
2885	483	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
2885	483	8	Dfp.java	Dfp	significantDigits	int	0	DEF	$ == 0
2886	488	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
22536	496	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	$ > q
22536	496	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	p > $
2887	497	12	Dfp.java	Dfp	striped	char[]	0	DEF	$[p] != '0'
2887	497	12	Dfp.java	Dfp	p	int	0	DEF	striped[$] != '0'
22537	509	8	Dfp.java	Dfp	THIS	Dfp	0	NIL-WHILE	(p - q) < ($.mant.$.length * rsize)
22537	509	8	Dfp.java	Dfp	rsize	int	0	NIL-WHILE	(p - q) < (mant.length * $)
22537	509	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	($ - q) < (mant.length * rsize)
22537	509	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	(p - $) < (mant.length * rsize)
22538	510	12	Dfp.java	Dfp	rsize	int	0	NIL-FOR	i < $
22538	510	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < rsize
22539	517	8	Dfp.java	Dfp	i	int	0	NIL-FOR	$ >= 0
2888	528	8	Dfp.java	Dfp	THIS	Dfp	0	DEF	q < striped.$.length
2888	528	8	Dfp.java	Dfp	striped	char[]	0	DEF	q < $.length
2888	528	8	Dfp.java	Dfp	q	int	0	DEF	$ < striped.length
2889	597	8	Dfp.java	newInstance	THIS	Dfp	0	RET	$.field.getRadixDigits() != d.$.field.getRadixDigits()
2889	597	8	Dfp.java	newInstance	d	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
22540	669	8	Dfp.java	shiftLeft	i	int	0	NIL-FOR	$ > 0
22541	681	8	Dfp.java	shiftRight	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
22541	681	8	Dfp.java	shiftRight	i	int	0	NIL-FOR	$ < mant.length - 1
2890	703	8	Dfp.java	align	adiff	int	0	DEF	$ < 0
2891	707	8	Dfp.java	align	diff	int	0	RET	$ == 0
2892	711	8	Dfp.java	align	THIS	Dfp	0	RET	adiff > ($.mant.$.length + 1)
2892	711	8	Dfp.java	align	adiff	int	0	RET	$ > (mant.length + 1)
22542	722	8	Dfp.java	align	i	int	0	NIL-FOR	$ < adiff
22542	722	8	Dfp.java	align	adiff	int	0	NIL-FOR	i < $
2893	723	12	Dfp.java	align	diff	int	1	DEF	$ < 0
2894	728	16	Dfp.java	align	lostdigit	int	0	DEF	$ != 0
2895	740	8	Dfp.java	align	inexact	boolean	0	DEF	$
2896	756	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2896	756	8	Dfp.java	lessThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2897	765	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.isNaN()
2897	765	8	Dfp.java	lessThan	x	Dfp	0	RET	$.isNaN()
2898	781	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2898	781	8	Dfp.java	greaterThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2899	790	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.isNaN()
2899	790	8	Dfp.java	greaterThan	x	Dfp	0	RET	$.isNaN()
2900	804	8	Dfp.java	negativeOrNull	THIS	Dfp	0	RET	$.isNaN()
2901	819	8	Dfp.java	strictlyNegative	THIS	Dfp	0	RET	$.isNaN()
2902	834	8	Dfp.java	positiveOrNull	THIS	Dfp	0	RET	$.isNaN()
2903	849	8	Dfp.java	strictlyPositive	THIS	Dfp	0	RET	$.isNaN()
2904	887	8	Dfp.java	isZero	THIS	Dfp	0	RET	$.isNaN()
2905	904	8	Dfp.java	equals	other	Object	0	RET	$ instanceof Dfp
2906	906	12	Dfp.java	equals	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2906	906	12	Dfp.java	equals	THIS	Dfp	0	RET	$.isNaN()
2906	906	12	Dfp.java	equals	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2906	906	12	Dfp.java	equals	x	Dfp	0	RET	$.isNaN()
2907	931	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2907	931	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.isNaN()
2907	931	8	Dfp.java	unequal	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2907	931	8	Dfp.java	unequal	x	Dfp	0	RET	$.isNaN()
2908	946	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
2908	946	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length - 1] == 0
2908	946	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[a.$.mant.$.length - 1] == 0
2908	946	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
2908	946	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
2908	946	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
2908	946	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
2908	946	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
2909	951	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.sign != b.$.sign
2909	951	8	Dfp.java	compare	a	Dfp	0	RET	$.sign != b.sign
2909	951	8	Dfp.java	compare	b	Dfp	0	RET	a.sign != $.sign
2910	952	12	Dfp.java	compare	THIS	Dfp	1	RET	a.$.sign == -1
2910	952	12	Dfp.java	compare	a	Dfp	1	RET	$.sign == -1
2911	960	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
2911	960	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
2911	960	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
2911	960	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
2912	964	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
2912	964	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
2912	964	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
2912	964	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
2913	968	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
2913	968	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
2913	968	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
2913	968	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
2914	973	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[b.$.mant.$.length-1] != 0
2914	973	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length-1] != 0
2914	973	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[b.mant.length-1] != 0
2914	973	8	Dfp.java	compare	b	Dfp	0	RET	a.mant[$.mant.length-1] != 0
2914	973	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length-1] != 0
2915	974	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp < b.$.exp
2915	974	12	Dfp.java	compare	a	Dfp	0	RET	$.exp < b.exp
2915	974	12	Dfp.java	compare	b	Dfp	0	RET	a.exp < $.exp
2916	978	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp > b.$.exp
2916	978	12	Dfp.java	compare	a	Dfp	0	RET	$.exp > b.exp
2916	978	12	Dfp.java	compare	b	Dfp	0	RET	a.exp > $.exp
22543	984	8	Dfp.java	compare	i	int	0	NIL-FOR	$ >= 0
2917	985	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] > b.$.mant[i]
2917	985	12	Dfp.java	compare	i	int	0	RET	a.mant[$] > b.mant[$]
2917	985	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] > b.mant[i]
2917	985	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] > $.mant[i]
2918	989	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] < b.$.mant[i]
2918	989	12	Dfp.java	compare	i	int	0	RET	a.mant[$] < b.mant[$]
2918	989	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] < b.mant[i]
2918	989	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] < $.mant[i]
2919	1032	8	Dfp.java	remainder	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2919	1032	8	Dfp.java	remainder	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2920	1047	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.isNaN()
2921	1051	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.nans == INFINITE
2922	1055	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
2923	1062	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp < 0
2924	1073	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp >= $.mant.$.length
22544	1081	8	Dfp.java	trunc	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length-result.$.exp
22544	1081	8	Dfp.java	trunc	i	int	0	NIL-FOR	$ < mant.length-result.exp
22544	1081	8	Dfp.java	trunc	result	Dfp	0	NIL-FOR	i < mant.length-$.exp
2925	1086	8	Dfp.java	trunc	changed	boolean	0	RET	$
2926	1089	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == -1
2926	1089	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == -1
2927	1096	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == 1
2927	1096	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == 1
2928	1107	20	Dfp.java	trunc	half	Dfp	0	DEF	a.greaterThan($)
2928	1107	20	Dfp.java	trunc	a	Dfp	0	DEF	$.greaterThan(half)
2929	1114	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.exp > 0
2929	1114	20	Dfp.java	trunc	THIS	Dfp	0	DEF	(result.$.mant[$.mant.$.length-result.$.exp]&1) != 0
2929	1114	20	Dfp.java	trunc	half	Dfp	0	DEF	a.equals($)
2929	1114	20	Dfp.java	trunc	a	Dfp	0	DEF	$.equals(half)
2929	1114	20	Dfp.java	trunc	result	Dfp	0	DEF	$.exp > 0
2929	1114	20	Dfp.java	trunc	result	Dfp	0	DEF	($.mant[mant.length-$.exp]&1) != 0
2930	1140	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.greaterThan($.newInstance(2147483647))
2930	1140	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.greaterThan(newInstance(2147483647))
2931	1144	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.lessThan($.newInstance(-2147483648))
2931	1144	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.lessThan(newInstance(-2147483648))
22545	1148	8	Dfp.java	intValue	THIS	Dfp	0	NIL-FOR	i >= $.mant.$.length - rounded.$.exp
22545	1148	8	Dfp.java	intValue	i	int	0	NIL-FOR	$ >= mant.length - rounded.exp
22545	1148	8	Dfp.java	intValue	rounded	Dfp	0	NIL-FOR	i >= mant.length - $.exp
2932	1152	8	Dfp.java	intValue	THIS	Dfp	0	DEF	rounded.$.sign == -1
2932	1152	8	Dfp.java	intValue	rounded	Dfp	0	DEF	$.sign == -1
2933	1182	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 1000
2934	1185	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 100
2935	1188	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 10
2936	1201	8	Dfp.java	power10	e	int	1	DEF	$ >= 0
22546	1232	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
22546	1232	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
22547	1238	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
22547	1238	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
2937	1254	8	Dfp.java	add	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2937	1254	8	Dfp.java	add	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2938	1262	8	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans != FINITE
2938	1262	8	Dfp.java	add	THIS	Dfp	0	RET	$.nans != FINITE
2938	1262	8	Dfp.java	add	x	Dfp	0	RET	$.nans != FINITE
2939	1263	12	Dfp.java	add	THIS	Dfp	0	RET	$.isNaN()
2940	1267	12	Dfp.java	add	x	Dfp	0	RET	$.isNaN()
2941	1271	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
2941	1271	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == FINITE
2941	1271	12	Dfp.java	add	x	Dfp	0	RET	$.nans == FINITE
2942	1275	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
2942	1275	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == FINITE
2942	1275	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
2943	1279	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
2943	1279	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign == x.$.sign
2943	1279	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
2943	1279	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
2943	1279	12	Dfp.java	add	x	Dfp	0	RET	sign == $.sign
2944	1283	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
2944	1283	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
2944	1283	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign != x.$.sign
2944	1283	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
2944	1283	12	Dfp.java	add	x	Dfp	0	RET	sign != $.sign
2945	1308	8	Dfp.java	add	THIS	Dfp	0	DEF	$.compare(a, b) > 0
2945	1308	8	Dfp.java	add	a	Dfp	0	DEF	compare($, b) > 0
2945	1308	8	Dfp.java	add	b	Dfp	0	DEF	compare(a, $) > 0
2946	1315	8	Dfp.java	add	THIS	Dfp	0	DEF	b.$.mant[$.mant.$.length-1] == 0
2946	1315	8	Dfp.java	add	b	Dfp	0	DEF	$.mant[mant.length-1] == 0
2947	1319	8	Dfp.java	add	THIS	Dfp	0	DEF	a.$.mant[$.mant.$.length-1] == 0
2947	1319	8	Dfp.java	add	a	Dfp	0	DEF	$.mant[mant.length-1] == 0
2948	1326	8	Dfp.java	add	THIS	Dfp	1	DEF	a.$.exp < b.$.exp
2948	1326	8	Dfp.java	add	a	Dfp	1	DEF	$.exp < b.exp
2948	1326	8	Dfp.java	add	b	Dfp	1	DEF	a.exp < $.exp
2949	1333	8	Dfp.java	add	asign	byte	0	DEF	$ != bsign
2949	1333	8	Dfp.java	add	bsign	byte	0	DEF	asign != $
2950	1334	12	Dfp.java	add	asign	byte	1	DEF	$ == rsign
2950	1334	12	Dfp.java	add	rsign	byte	1	DEF	asign == $
22548	1343	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
22548	1343	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
2951	1354	8	Dfp.java	add	asign	byte	0	DEF	$ == bsign
2951	1354	8	Dfp.java	add	bsign	byte	0	DEF	asign == $
2951	1354	8	Dfp.java	add	rh	int	0	DEF	$ != 0
2952	1359	12	Dfp.java	add	excp	int	0	DEF	$ != 0
22549	1365	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
22549	1365	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
2953	1366	12	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] != 0
2953	1366	12	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] != 0
2954	1370	12	Dfp.java	add	i	int	0	DEF	$ == 0
2955	1378	8	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2955	1378	8	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2956	1381	12	Dfp.java	add	asign	byte	0	DEF	$ != bsign
2956	1381	12	Dfp.java	add	bsign	byte	0	DEF	asign != $
2957	1389	8	Dfp.java	add	excp	int	0	DEF	$ != 0
2958	1454	8	Dfp.java	round	inc	boolean	0	DEF	$
22550	1457	12	Dfp.java	round	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
22550	1457	12	Dfp.java	round	i	int	0	NIL-FOR	$ < mant.length
2959	1463	12	Dfp.java	round	rh	int	0	DEF	$ != 0
2960	1470	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp < MIN_EXP
2961	1476	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp > MAX_EXP
2962	1482	8	Dfp.java	round	n	int	0	RET	$ != 0
2963	1499	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2963	1499	8	Dfp.java	multiply	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2964	1509	8	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans != FINITE
2964	1509	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans != FINITE
2964	1509	8	Dfp.java	multiply	x	Dfp	0	RET	$.nans != FINITE
2965	1510	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.isNaN()
2966	1514	12	Dfp.java	multiply	x	Dfp	0	RET	$.isNaN()
2967	1518	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2967	1518	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] != 0
2967	1518	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
2967	1518	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] != 0
2967	1518	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
2968	1524	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2968	1524	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] != 0
2968	1524	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
2968	1524	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
2969	1530	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2969	1530	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2969	1530	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
2970	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
2970	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
2970	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2970	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] == 0
2970	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
2970	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2970	1536	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
2970	1536	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
2970	1536	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] == 0
22551	1548	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
22551	1548	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
22552	1550	12	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	j<$.mant.$.length
22552	1550	12	Dfp.java	multiply	j	int	0	NIL-FOR	$<mant.length
22553	1562	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ >= 0
2971	1563	12	Dfp.java	multiply	i	int	0	DEF	product[$] != 0
2971	1563	12	Dfp.java	multiply	product	int[]	0	DEF	$[i] != 0
22554	1570	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
22554	1570	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
2972	1578	8	Dfp.java	multiply	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2972	1578	8	Dfp.java	multiply	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2973	1584	8	Dfp.java	multiply	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
2973	1584	8	Dfp.java	multiply	md	int	1	DEF	$ > (mant.length-1)
2974	1590	8	Dfp.java	multiply	excp	int	0	DEF	$ != 0
2975	1607	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans != FINITE
2976	1608	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.isNaN()
2977	1612	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2977	1612	12	Dfp.java	multiply	x	int	0	RET	$ != 0
2978	1617	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2978	1617	12	Dfp.java	multiply	x	int	0	RET	$ == 0
2979	1627	8	Dfp.java	multiply	x	int	0	RET	$ < 0
2979	1627	8	Dfp.java	multiply	x	int	0	RET	$ >= RADIX
22555	1636	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
22555	1636	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
2980	1643	8	Dfp.java	multiply	rh	int	0	DEF	$ != 0
2981	1649	8	Dfp.java	multiply	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2981	1649	8	Dfp.java	multiply	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2982	1654	8	Dfp.java	multiply	excp	int	0	DEF	$ != 0
2983	1678	8	Dfp.java	divide	THIS	Dfp	0	RET	$.field.getRadixDigits() != divisor.$.field.getRadixDigits()
2983	1678	8	Dfp.java	divide	divisor	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2984	1688	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
2984	1688	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans != FINITE
2984	1688	8	Dfp.java	divide	divisor	Dfp	0	RET	$.nans != FINITE
2985	1689	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
2986	1693	12	Dfp.java	divide	divisor	Dfp	0	RET	$.isNaN()
2987	1697	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
2987	1697	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == FINITE
2987	1697	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == FINITE
2988	1703	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
2988	1703	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == FINITE
2988	1703	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
2989	1709	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
2989	1709	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
2989	1709	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
2990	1719	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.mant[$.mant.$.length-1] == 0
2990	1719	8	Dfp.java	divide	divisor	Dfp	0	RET	$.mant[mant.length-1] == 0
22556	1742	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
22556	1742	8	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
22557	1750	8	Dfp.java	divide	qd	int	0	NIL-FOR	$ >= 0
22558	1759	12	Dfp.java	divide	trialgood	boolean	0	NIL-WHILE	$
22559	1765	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
22559	1765	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
22560	1774	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
22560	1774	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
2991	1781	16	Dfp.java	divide	rh	int	0	DEF	$ == 0
2992	1791	16	Dfp.java	divide	minadj	int	0	DEF	$ >= 2
22561	1799	16	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
2993	1800	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] > remainder[i]
2993	1800	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] > remainder[$]
2993	1800	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] > $[i]
2993	1800	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] > remainder[i]
2994	1803	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] < remainder[i]
2994	1803	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] < remainder[$]
2994	1803	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] < $[i]
2994	1803	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] < remainder[i]
2995	1808	16	Dfp.java	divide	THIS	Dfp	0	DEF	remainder[$.mant.$.length] != 0
2995	1808	16	Dfp.java	divide	remainder	int[]	0	DEF	$[mant.length] != 0
2996	1812	16	Dfp.java	divide	trialgood	boolean	0	DEF	$ == false
2997	1819	12	Dfp.java	divide	nsqd	int	0	DEF	$ != 0
2997	1819	12	Dfp.java	divide	trial	int	0	DEF	$ != 0
2998	1823	12	Dfp.java	divide	THIS	Dfp	0	DEF	$.field.getRoundingMode() == DfpField.$.RoundingMode.ROUND_DOWN
2998	1823	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd == $.mant.$.length
2998	1823	12	Dfp.java	divide	nsqd	int	0	DEF	$ == mant.length
2999	1828	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd > $.mant.$.length
2999	1828	12	Dfp.java	divide	nsqd	int	0	DEF	$ > mant.length
22562	1835	12	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
22562	1835	12	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
22563	1842	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
3000	1843	12	Dfp.java	divide	i	int	0	DEF	quotient[$] != 0
3000	1843	12	Dfp.java	divide	quotient	int[]	0	DEF	$[i] != 0
22564	1850	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i<$.mant.$.length
22564	1850	8	Dfp.java	divide	i	int	0	NIL-FOR	$<mant.length
3001	1858	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3001	1858	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3002	1862	8	Dfp.java	divide	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
3002	1862	8	Dfp.java	divide	md	int	1	DEF	$ > (mant.length-1)
3003	1868	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
3004	1883	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
3005	1884	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
3006	1888	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
3007	1894	8	Dfp.java	divide	divisor	int	0	RET	$ == 0
3008	1904	8	Dfp.java	divide	divisor	int	0	RET	$ >= RADIX
3008	1904	8	Dfp.java	divide	divisor	int	0	RET	$ < 0
22565	1915	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
3009	1922	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
3009	1922	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
3010	1932	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
3011	1951	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == FINITE
3011	1951	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
3012	1956	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans != FINITE
3013	1957	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == 1
3013	1957	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == INFINITE
3014	1962	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == QNAN
3015	1966	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == SNAN
3016	1976	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == -1
3017	1990	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp < -1
3017	1990	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp > 1
3017	1990	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp < -1
3017	1990	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp > 1
22566	2016	8	Dfp.java	sqrt	x	Dfp	0	NIL-WHILE	$.unequal(px)
22566	2016	8	Dfp.java	sqrt	px	Dfp	0	NIL-WHILE	x.unequal($)
3018	2025	12	Dfp.java	sqrt	x	Dfp	0	DEF	$.equals(ppx)
3018	2025	12	Dfp.java	sqrt	ppx	Dfp	0	DEF	x.equals($)
3019	2032	12	Dfp.java	sqrt	THIS	Dfp	0	DEF	dx.$.mant[$.mant.$.length-1] == 0
3019	2032	12	Dfp.java	sqrt	dx	Dfp	0	DEF	$.mant[mant.length-1] == 0
3020	2046	8	Dfp.java	toString	THIS	Dfp	0	RET	$.nans != FINITE
3021	2048	12	Dfp.java	toString	THIS	Dfp	1	RET	$.nans == INFINITE
3022	2055	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp > $.mant.$.length
3022	2055	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp < -1
22567	2077	8	Dfp.java	dfp2sci	i	int	0	NIL-FOR	$ >= 0
22568	2085	8	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-FOR	p < rawdigits.$.length
22568	2085	8	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-FOR	p < $.length
22568	2085	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ < rawdigits.length
3023	2086	12	Dfp.java	dfp2sci	rawdigits	char[]	0	DEF	$[p] != '0'
3023	2086	12	Dfp.java	dfp2sci	p	int	0	DEF	rawdigits[$] != '0'
3024	2094	8	Dfp.java	dfp2sci	THIS	Dfp	0	DEF	$.sign == -1
3025	2098	8	Dfp.java	dfp2sci	THIS	Dfp	1	DEF	p != rawdigits.$.length
3025	2098	8	Dfp.java	dfp2sci	rawdigits	char[]	1	DEF	p != $.length
3025	2098	8	Dfp.java	dfp2sci	p	int	1	DEF	$ != rawdigits.length
22569	2103	12	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-WHILE	p<rawdigits.$.length
22569	2103	12	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-WHILE	p<$.length
22569	2103	12	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$<rawdigits.length
3026	2121	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
22570	2126	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ > ae
22570	2126	8	Dfp.java	dfp2sci	ae	int	0	NIL-FOR	p > $
3027	2130	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
22571	2134	8	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$ > 0
3028	2156	8	Dfp.java	dfp2string	e	int	0	DEF	$ <= 0
22572	2162	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ < 0
22573	2170	8	Dfp.java	dfp2string	i	int	0	NIL-FOR	$ >= 0
3029	2175	12	Dfp.java	dfp2string	e	int	0	DEF	--$ == 0
22574	2181	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ > 0
3030	2189	8	Dfp.java	dfp2string	pointInserted	boolean	0	DEF	$
22575	2196	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[q] == '0'
22575	2196	8	Dfp.java	dfp2string	q	int	0	NIL-WHILE	buffer[$] == '0'
3031	2199	8	Dfp.java	dfp2string	buffer	char[]	0	DEF	$[q] == '.'
3031	2199	8	Dfp.java	dfp2string	q	int	0	DEF	buffer[$] == '.'
22576	2204	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[p-1] == '0'
22576	2204	8	Dfp.java	dfp2string	p	int	0	NIL-WHILE	buffer[$-1] == '0'
3032	2209	8	Dfp.java	dfp2string	THIS	Dfp	0	DEF	$.sign < 0
3033	2235	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
3033	2235	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] != 0
3034	2242	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] == 0
3034	2242	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
3035	2248	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == QNAN
3035	2248	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
3036	2253	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
3036	2253	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == SNAN
3037	2260	16	Dfp.java	dotrap	THIS	Dfp	1	DEF	(result.$.exp+$.mant.$.length) < MIN_EXP
3037	2260	16	Dfp.java	dotrap	result	Dfp	1	DEF	($.exp+mant.length) < MIN_EXP
3038	2325	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3038	2325	8	Dfp.java	nextAfter	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3039	2334	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan(x)
3039	2334	8	Dfp.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
3040	2338	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.compare(this, x) == 0
3040	2338	8	Dfp.java	nextAfter	x	Dfp	0	RET	compare(this, $) == 0
3041	2342	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan($.getZero())
3042	2348	8	Dfp.java	nextAfter	up	boolean	1	DEF	$
3043	2353	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
3044	2363	12	Dfp.java	nextAfter	THIS	Dfp	1	DEF	$.equals(inc)
3044	2363	12	Dfp.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
3045	2369	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
3046	2376	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.classify() != INFINITE
3046	2376	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
3047	2381	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	result.equals($.getZero())
3047	2381	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero()) == false
3047	2381	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
3048	2396	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isInfinite()
3049	2397	12	Dfp.java	toDouble	THIS	Dfp	1	RET	$.lessThan($.getZero())
3050	2404	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isNaN()
3051	2411	8	Dfp.java	toDouble	cmp0	int	1	RET	$ == 0
3052	2413	15	Dfp.java	toDouble	cmp0	int	0	DEF	$ < 0
3053	2421	8	Dfp.java	toDouble	exponent	int	0	DEF	$ < 0
22577	2426	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.equals($)
22577	2426	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.lessThan($)
22577	2426	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.equals(y)
22577	2426	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.lessThan(y)
3054	2435	8	Dfp.java	toDouble	exponent	int	0	DEF	$ > -1023
3055	2439	8	Dfp.java	toDouble	exponent	int	0	RET	$ < -1074
3056	2443	8	Dfp.java	toDouble	exponent	int	0	RET	$ > 1023
3057	2453	8	Dfp.java	toDouble	mantissa	long	0	DEF	$ == 4503599627370496L
3058	2460	8	Dfp.java	toDouble	exponent	int	0	DEF	$ <= -1023
22578	2464	8	Dfp.java	toDouble	exponent	int	0	NIL-WHILE	$ < -1023
3059	2472	8	Dfp.java	toDouble	negate	boolean	0	DEF	$
2833	131	8	DfpDec.java	newInstance	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != d.getField().getRadixDigits()
2833	131	8	DfpDec.java	newInstance	d	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
2834	168	8	DfpDec.java	round	msb	int	0	RET	$ == 0
22528	175	8	DfpDec.java	round	msb	int	0	NIL-WHILE	lsbthreshold > $
22528	175	8	DfpDec.java	round	lsbthreshold	int	0	NIL-WHILE	$ > msb
22529	186	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsbshift % 4
22529	186	8	DfpDec.java	round	lsbshift	int	0	NIL-FOR	i < $ % 4
2835	192	8	DfpDec.java	round	THIS	DfpDec	0	RET	digits == 4 * $.mant.$.length - 3
2835	192	8	DfpDec.java	round	lsbthreshold	int	0	RET	$ <= 1
2835	192	8	DfpDec.java	round	digits	int	0	RET	$ == 4 * mant.length - 3
2836	198	8	DfpDec.java	round	lsbthreshold	int	1	DEF	$ == 1
22530	208	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsd
22530	208	8	DfpDec.java	round	lsd	int	0	NIL-FOR	i < $
2837	255	8	DfpDec.java	round	inc	boolean	0	DEF	$
22531	258	12	DfpDec.java	round	THIS	DfpDec	0	NIL-FOR	i < $.mant.$.length
22531	258	12	DfpDec.java	round	i	int	0	NIL-FOR	$ < mant.length
2838	264	12	DfpDec.java	round	rh	int	0	DEF	$ != 0
2839	271	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp < MIN_EXP
2840	277	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp > MAX_EXP
2841	283	8	DfpDec.java	round	discarded	int	0	RET	$ != 0
2841	283	8	DfpDec.java	round	n	int	0	RET	$ != 0
2842	298	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != x.getField().getRadixDigits()
2842	298	8	DfpDec.java	nextAfter	x	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
2843	310	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan(x)
2843	310	8	DfpDec.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
2844	314	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.equals(x)
2844	314	8	DfpDec.java	nextAfter	x	Dfp	0	RET	equals($)
2845	318	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan($.getZero())
2846	322	8	DfpDec.java	nextAfter	up	boolean	1	DEF	$
2847	326	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
2848	330	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
2848	330	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
2849	339	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	$.equals(inc)
2849	339	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
2850	345	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
2851	349	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
2851	349	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
2852	356	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.classify() != INFINITE
2852	356	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
2853	361	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	result.equals($.getZero())
2853	361	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero()) == false
2853	361	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
3060	200	8	DfpField.java	DfpField	computeConstants	boolean	1	DEF	$
22579	537	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
22579	537	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
22579	537	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
3061	540	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
3061	540	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '1'
3061	540	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
3061	540	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '1'
3062	544	8	DfpField.java	split	i	int	0	DEF	buf[$] == '.'
3062	544	8	DfpField.java	split	buf	char[]	0	DEF	$[i] == '.'
3063	549	8	DfpField.java	split	THIS	DfpField	0	DEF	sig == ($.radixDigits / 2) * 4
3063	549	8	DfpField.java	split	sig	int	0	DEF	$ == (radixDigits / 2) * 4
3064	554	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
3064	554	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
3064	554	8	DfpField.java	split	leading	boolean	0	DEF	$
3064	554	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
3064	554	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
22580	561	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
22580	561	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
22580	561	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
3065	563	8	DfpField.java	split	i	int	0	DEF	$ < sp
3065	563	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
3065	563	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
3065	563	8	DfpField.java	split	sp	int	0	DEF	i < $
3065	563	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
3065	563	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
3066	578	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String.length() < highPrecisionDecimalDigits - 3
3066	578	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String == null
3066	578	8	DfpField.java	computeStringConstants	highPrecisionDecimalDigits	int	0	DEF	sqr2String.length() < $ - 3
22581	623	8	DfpField.java	computePi	i	int	0	NIL-FOR	$ < 20
3067	637	12	DfpField.java	computePi	ykM1	Dfp	0	DEF	yk.equals($)
3067	637	12	DfpField.java	computePi	yk	Dfp	0	DEF	$.equals(ykM1)
22582	659	8	DfpField.java	computeExp	i	int	0	NIL-FOR	$ < 10000
3068	664	12	DfpField.java	computeExp	y	Dfp	0	DEF	$.equals(py)
3068	664	12	DfpField.java	computeExp	py	Dfp	0	DEF	y.equals($)
22583	742	8	DfpField.java	computeLn	i	int	0	NIL-FOR	$ < 10000
3069	748	12	DfpField.java	computeLn	y	Dfp	0	DEF	$.equals(py)
3069	748	12	DfpField.java	computeLn	py	Dfp	0	DEF	y.equals($)
22588	54	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
22588	54	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
22588	54	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
3087	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
3087	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '1'
3087	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
3087	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '1'
3088	61	12	DfpMath.java	split	i	int	0	DEF	buf[$] == '.'
3088	61	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] == '.'
3089	66	12	DfpMath.java	split	sig	int	0	DEF	$ == (field.getRadixDigits() / 2) * 4
3089	66	12	DfpMath.java	split	field	DfpField	0	DEF	sig == ($.getRadixDigits() / 2) * 4
3090	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
3090	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
3090	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
3090	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
3090	71	12	DfpMath.java	split	leading	boolean	0	DEF	$
22589	78	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
22589	78	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
22589	78	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
3091	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
3091	80	12	DfpMath.java	split	i	int	0	DEF	$ < sp
3091	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
3091	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
3091	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
3091	80	12	DfpMath.java	split	sp	int	0	DEF	i < $
3092	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].classify() == Dfp.INFINITE
3092	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].equals($[1])
3093	162	8	DfpMath.java	splitPow	a	int	0	RET	$ == 0
3094	167	8	DfpMath.java	splitPow	a	int	0	DEF	$ < 0
22590	174	8	DfpMath.java	splitPow	a	int	0	NIL-DOWHILE	$ >= 1
3095	183	16	DfpMath.java	splitPow	trial	int	0	DEF	$ > a
3095	183	16	DfpMath.java	splitPow	a	int	0	DEF	trial > $
3096	198	8	DfpMath.java	splitPow	invert	boolean	0	DEF	$
3097	217	8	DfpMath.java	pow	a	int	0	RET	$ == 0
3098	222	8	DfpMath.java	pow	a	int	0	DEF	$ < 0
22591	228	8	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$ >= 1
22592	234	12	DfpMath.java	pow	trial	int	0	NIL-DOWHILE	a>$
22592	234	12	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$>trial
3099	249	8	DfpMath.java	pow	invert	boolean	0	DEF	$
3100	270	8	DfpMath.java	exp	ia	int	0	RET	$ > 2147483646
3101	275	8	DfpMath.java	exp	ia	int	0	RET	$ < -2147483646
22593	297	8	DfpMath.java	expInternal	i	int	0	NIL-FOR	$ < 90
3102	301	12	DfpMath.java	expInternal	y	Dfp	0	DEF	$.equals(py)
3102	301	12	DfpMath.java	expInternal	py	Dfp	0	DEF	y.equals($)
3103	324	8	DfpMath.java	log	a	Dfp	0	RET	$.isNaN()
3103	324	8	DfpMath.java	log	a	Dfp	0	RET	$.equals($.getZero())
3103	324	8	DfpMath.java	log	a	Dfp	0	RET	$.lessThan($.getZero())
3104	330	8	DfpMath.java	log	a	Dfp	0	RET	$.classify() == Dfp.INFINITE
22594	340	8	DfpMath.java	log	ix	int	0	NIL-WHILE	$ > 2
22595	353	8	DfpMath.java	log	spx	Dfp[]	0	NIL-WHILE	$[0].add($[1]).greaterThan(spy[0])
22595	353	8	DfpMath.java	log	spy	Dfp[]	0	NIL-WHILE	spx[0].add(spx[1]).greaterThan($[0])
22596	447	8	DfpMath.java	logInternal	i	int	0	NIL-FOR	$ < 10000
3105	453	12	DfpMath.java	logInternal	y	Dfp	0	DEF	$.equals(py)
3105	453	12	DfpMath.java	logInternal	py	Dfp	0	DEF	y.equals($)
3106	508	8	DfpMath.java	pow	x	Dfp	0	RET	$.getField().getRadixDigits() != y.getField().getRadixDigits()
3106	508	8	DfpMath.java	pow	y	Dfp	0	RET	x.getField().getRadixDigits() != $.getField().getRadixDigits()
3107	522	8	DfpMath.java	pow	zero	Dfp	0	RET	y.equals($)
3107	522	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(zero)
3108	526	8	DfpMath.java	pow	one	Dfp	0	RET	y.equals($)
3108	526	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(one)
3109	527	12	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
3110	535	8	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
3110	535	8	DfpMath.java	pow	y	Dfp	0	RET	$.isNaN()
3111	542	8	DfpMath.java	pow	zero	Dfp	0	RET	x.equals($)
3111	542	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(zero)
3112	543	12	DfpMath.java	pow	zero	Dfp	1	RET	Dfp.copysign(one, x).greaterThan($)
3112	543	12	DfpMath.java	pow	one	Dfp	1	RET	Dfp.copysign($, x).greaterThan(zero)
3112	543	12	DfpMath.java	pow	x	Dfp	1	RET	Dfp.copysign(one, $).greaterThan(zero)
3113	545	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3113	545	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3114	552	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
3114	552	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
3114	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
3114	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
3114	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
3115	554	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3115	554	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3116	561	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3116	561	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3117	570	8	DfpMath.java	pow	zero	Dfp	0	DEF	x.lessThan($)
3117	570	8	DfpMath.java	pow	x	Dfp	0	DEF	$.lessThan(zero)
3118	576	8	DfpMath.java	pow	one	Dfp	0	RET	x.greaterThan($)
3118	576	8	DfpMath.java	pow	x	Dfp	0	RET	$.greaterThan(one)
3118	576	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3119	577	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3119	577	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3120	584	8	DfpMath.java	pow	one	Dfp	0	RET	x.lessThan($)
3120	584	8	DfpMath.java	pow	x	Dfp	0	RET	$.lessThan(one)
3120	584	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3121	585	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3121	585	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3122	592	8	DfpMath.java	pow	one	Dfp	0	RET	x.equals($)
3122	592	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(one)
3122	592	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3123	597	8	DfpMath.java	pow	x	Dfp	0	RET	$.classify() == Dfp.INFINITE
3124	599	12	DfpMath.java	pow	invert	boolean	1	RET	$
3125	601	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
3125	601	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
3125	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
3125	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
3125	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
3126	603	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3126	603	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3127	610	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3127	610	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3128	618	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3128	618	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3129	626	8	DfpMath.java	pow	invert	boolean	0	RET	$
3129	626	8	DfpMath.java	pow	y	Dfp	0	RET	$.rint().equals($)
3130	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.greaterThan($.newInstance(-100000000))
3130	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.lessThan($.newInstance(100000000))
3130	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.greaterThan(x.newInstance(-100000000))
3130	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.lessThan(x.newInstance(100000000))
3131	640	12	DfpMath.java	pow	v	Dfp	1	DEF	$.unequal(zero)
3131	640	12	DfpMath.java	pow	zero	Dfp	1	DEF	v.unequal($)
3132	656	8	DfpMath.java	pow	invert	boolean	0	DEF	$
3133	658	12	DfpMath.java	pow	zero	Dfp	0	DEF	y.remainder(two).equals($)
3133	658	12	DfpMath.java	pow	two	Dfp	0	DEF	y.remainder($).equals(zero)
3133	658	12	DfpMath.java	pow	y	Dfp	0	DEF	$.remainder(two).equals(zero)
3133	658	12	DfpMath.java	pow	y	Dfp	0	DEF	$.rint().equals($)
22597	681	8	DfpMath.java	sinInternal	i	int	0	NIL-FOR	$ < 90
3134	687	12	DfpMath.java	sinInternal	y	Dfp	0	DEF	$.equals(py)
3134	687	12	DfpMath.java	sinInternal	py	Dfp	0	DEF	y.equals($)
22598	714	8	DfpMath.java	cosInternal	i	int	0	NIL-FOR	$ < 90
3135	721	12	DfpMath.java	cosInternal	y	Dfp	0	DEF	$.equals(py)
3135	721	12	DfpMath.java	cosInternal	py	Dfp	0	DEF	y.equals($)
3136	745	8	DfpMath.java	sin	zero	Dfp	0	DEF	x.lessThan($)
3136	745	8	DfpMath.java	sin	x	Dfp	0	DEF	$.lessThan(zero)
3137	754	8	DfpMath.java	sin	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
3137	754	8	DfpMath.java	sin	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
3138	759	8	DfpMath.java	sin	pi	Dfp	1	DEF	x.lessThan($.divide(4))
3138	759	8	DfpMath.java	sin	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
3139	774	8	DfpMath.java	sin	neg	boolean	0	DEF	$
3140	796	8	DfpMath.java	cos	zero	Dfp	0	DEF	x.lessThan($)
3140	796	8	DfpMath.java	cos	x	Dfp	0	DEF	$.lessThan(zero)
3141	804	8	DfpMath.java	cos	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
3141	804	8	DfpMath.java	cos	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
3142	810	8	DfpMath.java	cos	pi	Dfp	1	DEF	x.lessThan($.divide(4))
3142	810	8	DfpMath.java	cos	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
3143	824	8	DfpMath.java	cos	neg	boolean	0	DEF	$
22599	850	8	DfpMath.java	atanInternal	i	int	0	NIL-FOR	$ < 90
3144	855	12	DfpMath.java	atanInternal	y	Dfp	0	DEF	$.equals(py)
3144	855	12	DfpMath.java	atanInternal	py	Dfp	0	DEF	y.equals($)
3145	890	8	DfpMath.java	atan	zero	Dfp	0	DEF	x.lessThan($)
3145	890	8	DfpMath.java	atan	x	Dfp	0	DEF	$.lessThan(zero)
3146	895	8	DfpMath.java	atan	one	Dfp	0	DEF	x.greaterThan($)
3146	895	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(one)
3147	900	8	DfpMath.java	atan	ty	Dfp	0	DEF	x.greaterThan($)
3147	900	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(ty)
3148	923	8	DfpMath.java	atan	sub	boolean	0	DEF	$
3149	927	8	DfpMath.java	atan	recp	boolean	0	DEF	$
3150	931	8	DfpMath.java	atan	neg	boolean	0	DEF	$
3151	955	8	DfpMath.java	acos	a	Dfp	0	DEF	$.lessThan($.getZero())
3152	963	8	DfpMath.java	acos	negative	boolean	0	DEF	$
22641	105	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
22641	105	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
22642	106	12	DividedDifferenceInterpolator.java	computeDividedDifference	j	int	0	NIL-FOR	$ < n-i
22642	106	12	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	j < n-$
22642	106	12	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	j < $-i
22441	144	4	DormandPrince54Integrator.java	estimateError	THIS	DormandPrince54Integrator	0	NIL-FOR	j < $.mainSetDimension
22441	144	4	DormandPrince54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
2667	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	THIS	DormandPrince54StepInterpolator	1	DEF	interpolator.$.v1 == null
2667	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	interpolator	DormandPrince54StepInterpolator	1	DEF	$.v1 == null
2668	172	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.vectorsInitialized
2669	174	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.v1 == null
22407	184	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
22407	184	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2670	207	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	1	DEF	$.previousState != null
2670	207	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
22408	208	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
22408	208	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
22409	214	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
22409	214	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
22440	258	4	DormandPrince853Integrator.java	estimateError	THIS	DormandPrince853Integrator	0	NIL-FOR	j < $.mainSetDimension
22440	258	4	DormandPrince853Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
2721	279	4	DormandPrince853Integrator.java	estimateError	den	double	0	DEF	$ <= 0.0
2741	246	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	1	DEF	interpolator.$.currentState == null
2741	246	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	interpolator	DormandPrince853StepInterpolator	1	DEF	$.currentState == null
22461	257	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
22461	257	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < yDotKLast.length
22462	264	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
22462	264	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < v.length
22463	293	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
22463	293	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < yDotKLast.length
22464	298	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
22464	298	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < v.length
2742	318	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.vectorsInitialized
2743	320	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.v == null
22465	322	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < 7
22466	331	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
22466	331	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
22467	349	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < D.$.length
22467	349	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < D.length
2744	371	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	1	DEF	$.previousState != null
2744	371	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
22468	372	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
22468	372	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
22469	386	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
22469	386	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2745	407	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	RET	$.currentState == null
22470	417	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
22470	417	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
22471	426	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
22471	426	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
22472	436	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
22472	436	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
22473	457	4	DormandPrince853StepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < dimension
22473	457	4	DormandPrince853StepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	i < $
22474	480	4	DormandPrince853StepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < dimension
22474	480	4	DormandPrince853StepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	i < $
1242	115	8	EigenDecomposition.java	EigenDecomposition	THIS	EigenDecomposition	1	DEF	$.isSymmetric(matrix, false)
1242	115	8	EigenDecomposition.java	EigenDecomposition	matrix	RealMatrix	1	DEF	isSymmetric($, false)
21254	153	8	EigenDecomposition.java	EigenDecomposition	i	int	0	NIL-FOR	$ < size
21254	153	8	EigenDecomposition.java	EigenDecomposition	size	int	0	NIL-FOR	i < $
21255	191	8	EigenDecomposition.java	isSymmetric	i	int	0	NIL-FOR	$ < rows
21255	191	8	EigenDecomposition.java	isSymmetric	rows	int	0	NIL-FOR	i < $
21256	192	12	EigenDecomposition.java	isSymmetric	j	int	0	NIL-FOR	$ < columns
21256	192	12	EigenDecomposition.java	isSymmetric	columns	int	0	NIL-FOR	j < $
1243	195	16	EigenDecomposition.java	isSymmetric	mij	double	0	NonSymmetricMatrixException:RET	FastMath.abs($ - mji) > (FastMath.max(FastMath.abs($), FastMath.abs(mji)) * eps)
1243	195	16	EigenDecomposition.java	isSymmetric	mji	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - $) > (FastMath.max(FastMath.abs(mij), FastMath.abs($)) * eps)
1243	195	16	EigenDecomposition.java	isSymmetric	eps	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - mji) > (FastMath.max(FastMath.abs(mij), FastMath.abs(mji)) * $)
1244	197	20	EigenDecomposition.java	isSymmetric	raiseException	boolean	0	NonSymmetricMatrixException	$
1245	219	8	EigenDecomposition.java	getV	THIS	EigenDecomposition	0	DEF	$.cachedV == null
21257	222	12	EigenDecomposition.java	getV	k	int	0	NIL-FOR	$ < m
21257	222	12	EigenDecomposition.java	getV	m	int	0	NIL-FOR	k < $
1246	243	8	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	DEF	$.cachedD == null
21258	247	12	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	NIL-FOR	i < $.imagEigenvalues.$.length
21258	247	12	EigenDecomposition.java	getD	i	int	0	NIL-FOR	$ < imagEigenvalues.length
1247	248	16	EigenDecomposition.java	getD	THIS	EigenDecomposition	1	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) > 0
1247	248	16	EigenDecomposition.java	getD	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) > 0
1248	250	23	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) < 0
1248	250	23	EigenDecomposition.java	getD	i	int	0	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0
1249	270	8	EigenDecomposition.java	getVT	THIS	EigenDecomposition	0	DEF	$.cachedVt == null
21259	273	12	EigenDecomposition.java	getVT	k	int	0	NIL-FOR	$ < m
21259	273	12	EigenDecomposition.java	getVT	m	int	0	NIL-FOR	k < $
21260	292	8	EigenDecomposition.java	hasComplexEigenvalues	THIS	EigenDecomposition	0	NIL-FOR	i < $.imagEigenvalues.$.length
21260	292	8	EigenDecomposition.java	hasComplexEigenvalues	i	int	0	NIL-FOR	$ < imagEigenvalues.length
1250	293	12	EigenDecomposition.java	hasComplexEigenvalues	THIS	EigenDecomposition	0	RET	Precision.equals($.imagEigenvalues[i], 0.0, EPSILON)
1250	293	12	EigenDecomposition.java	hasComplexEigenvalues	i	int	0	RET	Precision.equals(imagEigenvalues[$], 0.0, EPSILON)
1251	396	8	EigenDecomposition.java	getSolver	THIS	EigenDecomposition	0	MathUnsupportedOperationException	$.hasComplexEigenvalues()
21261	568	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n - 1
21261	568	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $ - 1
21262	577	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
21262	577	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1252	578	12	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) > maxAbsoluteValue
1252	578	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
1252	578	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) > $
1253	581	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$]) > maxAbsoluteValue
1253	581	12	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i]) > maxAbsoluteValue
1253	581	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i]) > $
1254	586	8	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$ != 0
21263	587	12	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
21263	587	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1255	588	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue
1255	588	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) <= Precision.EPSILON * maxAbsoluteValue
1255	588	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * $
1256	591	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$]) <= Precision.EPSILON * maxAbsoluteValue
1256	591	16	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i]) <= Precision.EPSILON * maxAbsoluteValue
1256	591	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i]) <= Precision.EPSILON * $
21264	597	8	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
21264	597	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
21265	600	12	EigenDecomposition.java	findEigenVectors	m	int	0	NIL-DOWHILE	$ != j
21265	600	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-DOWHILE	m != $
21266	601	16	EigenDecomposition.java	findEigenVectors	m	int	0	NIL-FOR	$ < n - 1
21266	601	16	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	m < $ - 1
1257	604	20	EigenDecomposition.java	findEigenVectors	delta	double	0	DEF	FastMath.abs(e[m]) + $ == $
1257	604	20	EigenDecomposition.java	findEigenVectors	m	int	0	DEF	FastMath.abs(e[$]) + delta == delta
1257	604	20	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[m]) + delta == delta
1258	608	16	EigenDecomposition.java	findEigenVectors	m	int	0	MaxCountExceededException	$ != j
1258	608	16	EigenDecomposition.java	findEigenVectors	j	int	0	MaxCountExceededException	m != $
1259	609	20	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	MaxCountExceededException	its == $.maxIter
1259	609	20	EigenDecomposition.java	findEigenVectors	its	int	0	MaxCountExceededException	$ == maxIter
1260	616	20	EigenDecomposition.java	findEigenVectors	q	double	1	DEF	$ < 0.0
21267	625	20	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ >= j
21267	625	20	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	i >= $
1261	628	24	EigenDecomposition.java	findEigenVectors	p	double	1	DEF	FastMath.abs($) >= FastMath.abs(q)
1261	628	24	EigenDecomposition.java	findEigenVectors	q	double	1	DEF	FastMath.abs(p) >= FastMath.abs($)
1262	641	24	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	e[$ + 1] == 0.0
1262	641	24	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	$[i + 1] == 0.0
21268	651	24	EigenDecomposition.java	findEigenVectors	ia	int	0	NIL-FOR	$ < n
21268	651	24	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	ia < $
1263	657	20	EigenDecomposition.java	findEigenVectors	t	double	0	DEF	$ == 0.0
1263	657	20	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	$ >= j
1263	657	20	EigenDecomposition.java	findEigenVectors	j	int	0	DEF	i >= $
21269	668	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
21269	668	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
21270	671	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
21270	671	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
1264	672	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	$.realEigenvalues[j] > p
1264	672	16	EigenDecomposition.java	findEigenVectors	j	int	0	DEF	realEigenvalues[$] > p
1264	672	16	EigenDecomposition.java	findEigenVectors	p	double	0	DEF	realEigenvalues[j] > $
1265	677	12	EigenDecomposition.java	findEigenVectors	k	int	0	DEF	$ != i
1265	677	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	k != $
21271	680	16	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
21271	680	16	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
21272	690	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
21272	690	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1266	691	12	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) > maxAbsoluteValue
1266	691	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
1266	691	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) > $
1267	696	8	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$ != 0.0
21273	697	12	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
21273	697	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1268	698	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue
1268	698	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) < Precision.EPSILON * maxAbsoluteValue
1268	698	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * $
21274	705	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
21274	705	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
21275	706	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
21275	706	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
21276	726	8	EigenDecomposition.java	transformToSchur	THIS	EigenDecomposition	0	NIL-FOR	i < $.realEigenvalues.$.length
21276	726	8	EigenDecomposition.java	transformToSchur	i	int	0	NIL-FOR	$ < realEigenvalues.length
1269	727	12	EigenDecomposition.java	transformToSchur	THIS	EigenDecomposition	1	DEF	i == ($.realEigenvalues.$.length - 1)
1269	727	12	EigenDecomposition.java	transformToSchur	i	int	1	DEF	Precision.equals(matT[$ + 1][$], 0.0, EPSILON)
1269	727	12	EigenDecomposition.java	transformToSchur	i	int	1	DEF	$ == (realEigenvalues.length - 1)
1269	727	12	EigenDecomposition.java	transformToSchur	matT	double[][]	1	DEF	Precision.equals($[i + 1][i], 0.0, EPSILON)
21277	772	8	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
21277	772	8	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
21278	773	11	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
21278	773	11	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
1270	779	8	EigenDecomposition.java	findEigenVectorsFromSchur	norm	double	0	MathArithmeticException	Precision.equals($, 0.0, EPSILON)
21279	789	8	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	$ >= 0
1271	793	12	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	1	DEF	Precision.equals($, 0.0)
21280	797	16	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ >= 0
21281	800	20	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
21281	800	20	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1272	803	20	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) < 0.0
1272	803	20	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0.0
1273	808	24	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.equals($.imagEigenvalues[i], 0.0)
1273	808	24	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.equals(imagEigenvalues[$], 0.0)
1274	809	28	EigenDecomposition.java	findEigenVectorsFromSchur	w	double	1	DEF	$ != 0.0
1275	822	28	EigenDecomposition.java	findEigenVectorsFromSchur	x	double	1	DEF	FastMath.abs($) > FastMath.abs(z)
1275	822	28	EigenDecomposition.java	findEigenVectorsFromSchur	z	double	1	DEF	FastMath.abs(x) > FastMath.abs($)
1276	831	24	EigenDecomposition.java	findEigenVectorsFromSchur	t	double	0	DEF	(Precision.EPSILON * $) * $ > 1
21282	832	28	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
21282	832	28	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1277	838	19	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	0	DEF	$ < 0.0
1278	843	16	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	1	DEF	FastMath.abs(matrixT[$][$ - 1]) > FastMath.abs(matrixT[$ - 1][$])
1278	843	16	EigenDecomposition.java	findEigenVectorsFromSchur	matrixT	double[][]	1	DEF	FastMath.abs($[idx][idx - 1]) > FastMath.abs($[idx - 1][idx])
21283	856	16	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ >= 0
21284	859	20	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
21284	859	20	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1279	865	20	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, EPSILON) < 0.0
1279	865	20	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, EPSILON) < 0.0
1280	871	24	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.equals($.imagEigenvalues[i], 0.0)
1280	871	24	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.equals(imagEigenvalues[$], 0.0)
1281	882	28	EigenDecomposition.java	findEigenVectorsFromSchur	vr	double	0	DEF	Precision.equals($, 0.0)
1281	882	28	EigenDecomposition.java	findEigenVectorsFromSchur	vi	double	0	DEF	Precision.equals($, 0.0)
1282	892	28	EigenDecomposition.java	findEigenVectorsFromSchur	x	double	1	DEF	FastMath.abs($) > (FastMath.abs(z) + FastMath.abs(q))
1282	892	28	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	1	DEF	FastMath.abs(x) > (FastMath.abs(z) + FastMath.abs($))
1282	892	28	EigenDecomposition.java	findEigenVectorsFromSchur	z	double	1	DEF	FastMath.abs(x) > (FastMath.abs($) + FastMath.abs(q))
1283	908	24	EigenDecomposition.java	findEigenVectorsFromSchur	t	double	0	DEF	(Precision.EPSILON * $) * $ > 1
21285	909	28	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
21285	909	28	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
21286	920	8	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
21286	920	8	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
1284	921	12	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	DEF	$ < 0 | $ > n - 1
1284	921	12	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	DEF	i < 0 | i > $ - 1
21287	922	16	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
21287	922	16	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
21288	929	8	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ >= 0
21289	930	12	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ <= n - 1
21289	930	12	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i <= $ - 1
21290	932	16	EigenDecomposition.java	findEigenVectorsFromSchur	k	int	0	NIL-FOR	$ <= FastMath.min(j, n - 1)
21290	932	16	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	k <= FastMath.min($, n - 1)
21290	932	16	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	k <= FastMath.min(j, $ - 1)
21291	941	8	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
21291	941	8	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
21292	942	12	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
21292	942	12	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
22327	84	8	ElitisticListPopulation.java	nextGeneration	i	int	0	NIL-FOR	$ < oldChromosomes.size()
22327	84	8	ElitisticListPopulation.java	nextGeneration	oldChromosomes	List<Chromosome>	0	NIL-FOR	i < $.size()
2534	99	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	OutOfRangeException	$ < 0
2534	99	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	OutOfRangeException	$ > 1
22452	220	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
22453	226	6	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
2731	228	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
2731	228	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2732	233	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2733	235	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.vecAbsoluteTolerance == null
22454	236	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
22454	236	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
22454	236	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
22455	240	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
22455	240	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
22455	240	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
2734	250	8	EmbeddedRungeKuttaIntegrator.java	integrate	forward	boolean	1	DEF	$
2735	251	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize >= t
2735	251	12	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize >= $
2736	255	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize <= t
2736	255	12	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize <= $
22456	261	8	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
22456	261	8	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
22457	263	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
22457	263	10	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
22457	263	10	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
22458	265	12	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
22458	265	12	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
22459	276	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
22459	276	8	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
22459	276	8	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
22460	278	10	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
22460	278	10	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
2737	286	8	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
2738	303	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.isLastStep
2739	308	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
2740	323	10	EmbeddedRungeKuttaIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
2453	218	12	EmpiricalDistribution.java	load	THIS	EmpiricalDistribution	0	ZeroException	$.sampleStats.getN() == 0
2454	408	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	DEF	$.binStats.isEmpty()
22295	411	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount
22295	411	8	EmpiricalDistribution.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount
22296	425	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount-1
22296	425	8	EmpiricalDistribution.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount-1
2455	453	8	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	MathIllegalStateException	$.loaded
22297	461	8	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount
22297	461	8	EmpiricalDistribution.java	getNextValue	i	int	0	NIL-FOR	$ < binCount
2456	462	11	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	RET	x <= $.upperBounds[i]
2456	462	11	EmpiricalDistribution.java	getNextValue	i	int	0	RET	x <= upperBounds[$]
2456	462	11	EmpiricalDistribution.java	getNextValue	x	double	0	RET	$ <= upperBounds[i]
2457	464	15	EmpiricalDistribution.java	getNextValue	stats	SummaryStatistics	0	RET	$.getN() > 0
2458	465	19	EmpiricalDistribution.java	getNextValue	stats	SummaryStatistics	1	RET	$.getStandardDeviation() > 0
22298	525	8	EmpiricalDistribution.java	getUpperBounds	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount - 1
22298	525	8	EmpiricalDistribution.java	getUpperBounds	i	int	0	NIL-FOR	$ < binCount - 1
2787	77	8	EquationsMapper.java	extractEquationData	THIS	EquationsMapper	0	DimensionMismatchException	equationData.$.length != $.dimension
2787	77	8	EquationsMapper.java	extractEquationData	equationData	double[]	0	DimensionMismatchException	$.length != dimension
2788	92	8	EquationsMapper.java	insertEquationData	THIS	EquationsMapper	0	DimensionMismatchException	equationData.$.length != $.dimension
2788	92	8	EquationsMapper.java	insertEquationData	equationData	double[]	0	DimensionMismatchException	$.length != dimension
2590	67	8	Erf.java	erf	x	double	0	RET	FastMath.abs($) > 40
2591	98	8	Erf.java	erfc	x	double	0	RET	FastMath.abs($) > 40
2592	116	8	Erf.java	erf	x1	double	0	RET	$ > x2
2592	116	8	Erf.java	erf	x2	double	0	RET	x1 > $
22176	64	12	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
22176	64	12	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
22176	64	12	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
22177	68	8	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
22177	68	8	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
22177	68	8	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
2250	77	8	EuclideanIntegerPoint.java	equals	other	Object	0	RET	$ instanceof EuclideanIntegerPoint
2251	81	8	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	RET	$.point.$.length != otherPoint.$.length
2251	81	8	EuclideanIntegerPoint.java	equals	otherPoint	int[]	0	RET	point.length != $.length
22178	84	8	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < $.point.$.length
22178	84	8	EuclideanIntegerPoint.java	equals	i	int	0	NIL-FOR	$ < point.length
2252	85	12	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	RET	$.point[i] != otherPoint[i]
2252	85	12	EuclideanIntegerPoint.java	equals	i	int	0	RET	point[$] != otherPoint[$]
2252	85	12	EuclideanIntegerPoint.java	equals	otherPoint	int[]	0	RET	point[i] != $[i]
22179	110	8	EuclideanIntegerPoint.java	toString	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < coordinates.$.length
22179	110	8	EuclideanIntegerPoint.java	toString	i	int	0	NIL-FOR	$ < coordinates.length
22179	110	8	EuclideanIntegerPoint.java	toString	coordinates	int[]	0	NIL-FOR	i < $.length
2253	112	12	EuclideanIntegerPoint.java	toString	THIS	EuclideanIntegerPoint	0	DEF	i < coordinates.$.length - 1
2253	112	12	EuclideanIntegerPoint.java	toString	i	int	0	DEF	$ < coordinates.length - 1
2253	112	12	EuclideanIntegerPoint.java	toString	coordinates	int[]	0	DEF	i < $.length - 1
2773	86	6	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	1	DEF	$.previousState != null
2773	86	6	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
22498	87	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
22498	87	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
22499	92	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
22499	92	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2789	157	8	EventState.java	reinitializeBegin	THIS	EventState	0	DEF	$.g0 == 0
2790	193	12	EventState.java	evaluateStep	THIS	EventState	0	RET	FastMath.abs(dt) < $.convergence
2790	193	12	EventState.java	evaluateStep	dt	double	0	RET	FastMath.abs($) < convergence
22521	209	12	EventState.java	evaluateStep	i	int	0	NIL-FOR	$ < n
22521	209	12	EventState.java	evaluateStep	n	int	0	NIL-FOR	i < $
2791	217	16	EventState.java	evaluateStep	THIS	EventState	1	RET	$.g0Positive ^ (gb >= 0)
2791	217	16	EventState.java	evaluateStep	gb	double	1	RET	g0Positive ^ ($ >= 0)
2792	225	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	$.solver instanceof BracketedUnivariateSolver<?>
2793	246	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	Double.isNaN($.previousEventTime)
2793	246	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - ta) <= $.convergence
2793	246	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - $.previousEventTime) <= $.convergence
2793	246	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - ta) <= convergence
2793	246	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - previousEventTime) <= convergence
2793	246	20	EventState.java	evaluateStep	ta	double	1	DEF	FastMath.abs(root - $) <= convergence
2794	254	27	EventState.java	evaluateStep	THIS	EventState	1	RET	FastMath.abs($.previousEventTime - root) > $.convergence
2794	254	27	EventState.java	evaluateStep	THIS	EventState	1	RET	Double.isNaN($.previousEventTime)
2794	254	27	EventState.java	evaluateStep	root	double	1	RET	FastMath.abs(previousEventTime - $) > convergence
2795	301	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	FastMath.abs($.pendingEventTime - t) <= $.convergence
2795	301	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	$.pendingEvent
2795	301	8	EventState.java	stepAccepted	t	double	1	DEF	FastMath.abs(pendingEventTime - $) <= convergence
2796	329	8	EventState.java	reset	THIS	EventState	0	RET	$.pendingEvent
2796	329	8	EventState.java	reset	THIS	EventState	0	RET	FastMath.abs($.pendingEventTime - t) <= $.convergence
2796	329	8	EventState.java	reset	t	double	0	RET	FastMath.abs(pendingEventTime - $) <= convergence
2797	333	8	EventState.java	reset	THIS	EventState	0	DEF	$.nextAction == EventHandler.$.Action.RESET_STATE
22352	174	8	ExceptionContext.java	buildMessage	i	int	0	NIL-FOR	$ < len
22352	174	8	ExceptionContext.java	buildMessage	len	int	0	NIL-FOR	i < $
2611	180	12	ExceptionContext.java	buildMessage	count	int	0	DEF	++$ < len
2611	180	12	ExceptionContext.java	buildMessage	len	int	0	DEF	++count < $
22353	228	8	ExceptionContext.java	serializeMessages	i	int	0	NIL-FOR	$ < len
22353	228	8	ExceptionContext.java	serializeMessages	len	int	0	NIL-FOR	i < $
22354	236	12	ExceptionContext.java	serializeMessages	j	int	0	NIL-FOR	$ < aLen
22354	236	12	ExceptionContext.java	serializeMessages	aLen	int	0	NIL-FOR	j < $
2612	237	16	ExceptionContext.java	serializeMessages	j	int	1	DEF	args[$] instanceof Serializable
2612	237	16	ExceptionContext.java	serializeMessages	args	Object[]	1	DEF	$[j] instanceof Serializable
22355	263	8	ExceptionContext.java	deSerializeMessages	i	int	0	NIL-FOR	$ < len
22355	263	8	ExceptionContext.java	deSerializeMessages	len	int	0	NIL-FOR	i < $
22356	270	12	ExceptionContext.java	deSerializeMessages	j	int	0	NIL-FOR	$ < aLen
22356	270	12	ExceptionContext.java	deSerializeMessages	aLen	int	0	NIL-FOR	j < $
2613	293	12	ExceptionContext.java	serializeContext	value	Object	1	DEF	$ instanceof Serializable
22357	316	8	ExceptionContext.java	deSerializeContext	i	int	0	NIL-FOR	$ < len
22357	316	8	ExceptionContext.java	deSerializeContext	len	int	0	NIL-FOR	i < $
2828	96	8	ExpandableStatefulODE.java	getTotalDimension	THIS	ExpandableStatefulODE	1	RET	$.components.isEmpty()
2829	135	8	ExpandableStatefulODE.java	addSecondaryEquations	THIS	ExpandableStatefulODE	1	DEF	$.components.isEmpty()
22527	164	8	ExpandableStatefulODE.java	getSecondaryMappers	THIS	ExpandableStatefulODE	0	NIL-FOR	i < mappers.$.length
22527	164	8	ExpandableStatefulODE.java	getSecondaryMappers	i	int	0	NIL-FOR	$ < mappers.length
22527	164	8	ExpandableStatefulODE.java	getSecondaryMappers	mappers	EquationsMapper[]	0	NIL-FOR	i < $.length
2830	192	8	ExpandableStatefulODE.java	setPrimaryState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	primaryState.$.length != $.primaryState.length
2830	192	8	ExpandableStatefulODE.java	setPrimaryState	primaryState	double[]	0	DimensionMismatchException	$.length != this.primaryState.length
2831	229	8	ExpandableStatefulODE.java	setSecondaryState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	secondaryState.$.length != localArray.$.length
2831	229	8	ExpandableStatefulODE.java	setSecondaryState	localArray	double[]	0	DimensionMismatchException	secondaryState.length != $.length
2831	229	8	ExpandableStatefulODE.java	setSecondaryState	secondaryState	double[]	0	DimensionMismatchException	$.length != localArray.length
2832	265	8	ExpandableStatefulODE.java	setCompleteState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	completeState.$.length != $.getTotalDimension()
2832	265	8	ExpandableStatefulODE.java	setCompleteState	completeState	double[]	0	DimensionMismatchException	$.length != getTotalDimension()
995	130	8	ExponentialDistribution.java	ExponentialDistribution	mean	double	0	NotStrictlyPositiveException	$ <= 0
996	148	8	ExponentialDistribution.java	density	x	double	0	RET	$ < 0
997	166	8	ExponentialDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
998	184	8	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
998	184	8	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
999	186	15	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1.0
20971	213	8	ExponentialDistribution.java	sample	u	double	0	NIL-WHILE	$ < 0.5
1000	222	8	ExponentialDistribution.java	sample	u	double	0	RET	$ <= EXPONENTIAL_SA_QI[0]
20972	232	8	ExponentialDistribution.java	sample	u	double	0	NIL-DOWHILE	$ > EXPONENTIAL_SA_QI[i]
20972	232	8	ExponentialDistribution.java	sample	i	int	0	NIL-DOWHILE	u > EXPONENTIAL_SA_QI[$]
1001	236	12	ExponentialDistribution.java	sample	u2	double	0	DEF	$ < umin
1001	236	12	ExponentialDistribution.java	sample	umin	double	0	DEF	u2 < $
1039	110	8	FDistribution.java	FDistribution	numeratorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1040	114	8	FDistribution.java	FDistribution	denominatorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1041	154	8	FDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0
1042	203	8	FDistribution.java	getNumericalMean	denominatorDF	double	0	RET	$ > 2
1043	224	8	FDistribution.java	getNumericalVariance	THIS	FDistribution	0	DEF	$.numericalVarianceIsCalculated
1044	239	8	FDistribution.java	calculateNumericalVariance	denominatorDF	double	0	RET	$ > 4
2614	98	8	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	0	RET	type == $.TransformType.FORWARD
2614	98	8	FastCosineTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
2615	99	12	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	0	RET	$.normalization == $.DctNormalization.ORTHOGONAL_DCT_I
2616	107	8	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	1	DEF	$.normalization == $.DctNormalization.ORTHOGONAL_DCT_I
2617	147	8	FastCosineTransformer.java	fct	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
2618	152	8	FastCosineTransformer.java	fct	n	int	0	RET	$ == 1
22358	164	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
22358	164	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
22359	179	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
22359	179	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
22372	139	8	FastFourierTransformer.java	bitReversalShuffle2	i	int	0	NIL-FOR	$ < n
22372	139	8	FastFourierTransformer.java	bitReversalShuffle2	n	int	0	NIL-FOR	i < $
2630	140	12	FastFourierTransformer.java	bitReversalShuffle2	i	int	0	DEF	$ < j
2630	140	12	FastFourierTransformer.java	bitReversalShuffle2	j	int	0	DEF	i < $
22373	152	12	FastFourierTransformer.java	bitReversalShuffle2	k	int	0	NIL-WHILE	$ > 0
22373	152	12	FastFourierTransformer.java	bitReversalShuffle2	k	int	0	NIL-WHILE	$ <= j
22373	152	12	FastFourierTransformer.java	bitReversalShuffle2	j	int	0	NIL-WHILE	k <= $
2631	178	16	FastFourierTransformer.java	normalizeTransformedData	THIS	FastFourierTransformer	0	DEF	type == $.TransformType.INVERSE
2631	178	16	FastFourierTransformer.java	normalizeTransformedData	type	TransformType	0	DEF	$ == TransformType.INVERSE
22374	180	20	FastFourierTransformer.java	normalizeTransformedData	i	int	0	NIL-FOR	$ < n
22374	180	20	FastFourierTransformer.java	normalizeTransformedData	n	int	0	NIL-FOR	i < $
22375	188	16	FastFourierTransformer.java	normalizeTransformedData	i	int	0	NIL-FOR	$ < n
22375	188	16	FastFourierTransformer.java	normalizeTransformedData	n	int	0	NIL-FOR	i < $
2632	227	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DimensionMismatchException	dataRI.$.length != 2
2632	227	8	FastFourierTransformer.java	transformInPlace	dataRI	double[][]	0	DimensionMismatchException	$.length != 2
2633	232	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DimensionMismatchException	dataR.$.length != dataI.$.length
2633	232	8	FastFourierTransformer.java	transformInPlace	dataR	double[]	0	DimensionMismatchException	$.length != dataI.length
2633	232	8	FastFourierTransformer.java	transformInPlace	dataI	double[]	0	DimensionMismatchException	dataR.length != $.length
2634	237	8	FastFourierTransformer.java	transformInPlace	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
2635	243	8	FastFourierTransformer.java	transformInPlace	n	int	1	RET	$ == 1
2636	245	15	FastFourierTransformer.java	transformInPlace	n	int	0	RET	$ == 2
2637	265	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	1	DEF	type == $.TransformType.INVERSE
2637	265	8	FastFourierTransformer.java	transformInPlace	type	TransformType	1	DEF	$ == TransformType.INVERSE
22376	266	12	FastFourierTransformer.java	transformInPlace	i0	int	0	NIL-FOR	$ < n
22376	266	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	i0 < $
22377	295	12	FastFourierTransformer.java	transformInPlace	i0	int	0	NIL-FOR	$ < n
22377	295	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	i0 < $
22378	327	8	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-WHILE	lastN0 < $
22378	327	8	FastFourierTransformer.java	transformInPlace	lastN0	int	0	NIL-WHILE	$ < n
2638	332	12	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DEF	type == $.TransformType.INVERSE
2638	332	12	FastFourierTransformer.java	transformInPlace	type	TransformType	0	DEF	$ == TransformType.INVERSE
22379	337	12	FastFourierTransformer.java	transformInPlace	destEvenStartIndex	int	0	NIL-FOR	$ < n
22379	337	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	destEvenStartIndex < $
22380	343	16	FastFourierTransformer.java	transformInPlace	r	int	0	NIL-FOR	$ < lastN0
22380	343	16	FastFourierTransformer.java	transformInPlace	lastN0	int	0	NIL-FOR	r < $
22381	456	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize.$.length
22381	456	8	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize.length
22381	456	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $.length
2639	478	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == dimensionSize.$.length
2639	478	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	1	DEF	subVector.length == $.length
2639	478	8	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == dimensionSize.length
22382	480	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
22382	480	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
22382	480	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
22383	488	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
22383	488	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
22383	488	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
2640	495	12	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == d
2640	495	12	FastFourierTransformer.java	mdfft	d	int	1	DEF	subVector.length == $
2640	495	12	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == d
22384	501	16	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize[subVector.$.length]
22384	501	16	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[subVector.length]
22384	501	16	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[subVector.length]
22384	501	16	FastFourierTransformer.java	mdfft	subVector	int[]	0	NIL-FOR	i < dimensionSize[$.length]
2622	50	8	FastHadamardTransformer.java	transform	THIS	FastHadamardTransformer	0	RET	type == $.TransformType.FORWARD
2622	50	8	FastHadamardTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
2623	235	8	FastHadamardTransformer.java	fht	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
22364	249	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
22364	249	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
22365	257	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
22365	257	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
22366	262	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
22366	262	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
2624	287	8	FastHadamardTransformer.java	fht	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
22367	301	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
22367	301	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
22368	309	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
22368	309	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
22369	314	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
22369	314	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
244	361	8	FastMath.java	doubleHighPart	d	double	0	RET	$ < Precision.SAFE_MIN
244	361	8	FastMath.java	doubleHighPart	d	double	0	RET	$ > -Precision.SAFE_MIN
245	383	6	FastMath.java	cosh	x	double	0	RET	$ != $
246	392	6	FastMath.java	cosh	x	double	0	RET	$ > 20.0
247	396	6	FastMath.java	cosh	x	double	0	RET	$ < -20
248	401	6	FastMath.java	cosh	x	double	0	DEF	$ < 0.0
249	443	6	FastMath.java	sinh	x	double	0	RET	$ != $
250	452	6	FastMath.java	sinh	x	double	0	RET	$ > 20.0
251	456	6	FastMath.java	sinh	x	double	0	RET	$ < -20
252	460	6	FastMath.java	sinh	x	double	0	RET	$ == 0
253	464	6	FastMath.java	sinh	x	double	0	DEF	$ < 0.0
254	471	6	FastMath.java	sinh	x	double	1	DEF	$ > 0.25
255	545	6	FastMath.java	sinh	negate	boolean	0	DEF	$
256	559	6	FastMath.java	tanh	x	double	0	RET	$ != $
257	569	6	FastMath.java	tanh	x	double	0	RET	$ > 20.0
258	573	6	FastMath.java	tanh	x	double	0	RET	$ < -20
259	577	6	FastMath.java	tanh	x	double	0	RET	$ == 0
260	581	6	FastMath.java	tanh	x	double	0	DEF	$ < 0.0
261	587	6	FastMath.java	tanh	x	double	1	DEF	$ >= 0.5
262	669	6	FastMath.java	tanh	negate	boolean	0	DEF	$
263	690	8	FastMath.java	asinh	a	double	0	DEF	$ < 0
264	696	8	FastMath.java	asinh	a	double	1	DEF	$ > 0.167
265	700	12	FastMath.java	asinh	a	double	1	DEF	$ > 0.097
266	702	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.036
267	704	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.0036
268	720	8	FastMath.java	atanh	a	double	0	DEF	$ < 0
269	726	8	FastMath.java	atanh	a	double	1	DEF	$ > 0.15
270	730	12	FastMath.java	atanh	a	double	1	DEF	$ > 0.087
271	732	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.031
272	734	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.003
273	826	8	FastMath.java	exp	x	double	1	RET	$ < 0.0
274	829	12	FastMath.java	exp	intVal	int	0	RET	$ > 746
275	830	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
276	837	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
277	840	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
278	847	12	FastMath.java	exp	intVal	int	0	RET	$ == 709
279	850	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
280	866	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
281	867	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
282	919	8	FastMath.java	exp	extra	double	1	DEF	$ != 0.0
283	925	8	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
284	948	8	FastMath.java	expm1	x	double	0	RET	$ != $
284	948	8	FastMath.java	expm1	x	double	0	RET	$ == 0.0
285	952	8	FastMath.java	expm1	x	double	0	RET	$ >= 1.0
285	952	8	FastMath.java	expm1	x	double	0	RET	$ <= -1.0
286	957	12	FastMath.java	expm1	x	double	1	RET	$ > 0.0
287	972	8	FastMath.java	expm1	x	double	0	DEF	$ < 0.0
288	1048	8	FastMath.java	expm1	negative	boolean	0	DEF	$
289	1081	8	FastMath.java	expm1	hiPrecOut	double	0	DEF	$ != null
290	1106	8	FastMath.java	log	x	double	0	RET	$==0
291	1112	8	FastMath.java	log	bits	long	0	RET	($ & 0x8000000000000000L) != 0
291	1112	8	FastMath.java	log	x	double	0	RET	$ != $
292	1113	12	FastMath.java	log	x	double	0	RET	$ != 0.0
293	1114	16	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
294	1123	8	FastMath.java	log	x	double	0	RET	$ == Double.POSITIVE_INFINITY
295	1124	12	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
296	1134	8	FastMath.java	log	bits	long	0	RET	($ & 0x7ff0000000000000L) == 0
297	1136	12	FastMath.java	log	x	double	0	RET	$ == 0
298	1138	16	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
20910	1147	12	FastMath.java	log	bits	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
299	1154	8	FastMath.java	log	exp	int	0	RET	$ == 0
299	1154	8	FastMath.java	log	exp	int	0	RET	$ == -1
300	1155	12	FastMath.java	log	x	double	0	RET	$ > 0.99
300	1155	12	FastMath.java	log	x	double	0	RET	$ < 1.01
300	1155	12	FastMath.java	log	hiPrec	double[]	0	RET	$ == null
20911	1172	16	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
301	1220	8	FastMath.java	log	hiPrec	double[]	1	DEF	$ != null
20912	1239	12	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
302	1323	8	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
303	1338	8	FastMath.java	log1p	x	double	0	RET	$ == -1
304	1342	8	FastMath.java	log1p	x	double	0	RET	$ == Double.POSITIVE_INFINITY
305	1346	8	FastMath.java	log1p	x	double	1	RET	$ > 1e-6
305	1346	8	FastMath.java	log1p	x	double	1	RET	$ < -1e-6
306	1353	12	FastMath.java	log1p	lores	double	0	RET	Double.isInfinite($)
307	1377	8	FastMath.java	log10	lores	double	0	RET	Double.isInfinite($)
308	1421	8	FastMath.java	pow	y	double	0	RET	$ == 0.0
309	1425	8	FastMath.java	pow	x	double	0	RET	$ != $
310	1430	8	FastMath.java	pow	x	double	0	RET	$ == 0
311	1432	12	FastMath.java	pow	bits	long	0	RET	($ & 0x8000000000000000L) != 0
312	1436	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
312	1436	16	FastMath.java	pow	yi	long	0	RET	y == $
312	1436	16	FastMath.java	pow	y	double	0	RET	$ == yi
312	1436	16	FastMath.java	pow	y	double	0	RET	$ < 0
313	1440	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
313	1440	16	FastMath.java	pow	yi	long	0	RET	y == $
313	1440	16	FastMath.java	pow	y	double	0	RET	$ == yi
313	1440	16	FastMath.java	pow	y	double	0	RET	$ > 0
314	1445	12	FastMath.java	pow	y	double	0	RET	$ < 0
315	1448	12	FastMath.java	pow	y	double	0	RET	$ > 0
316	1455	8	FastMath.java	pow	x	double	0	RET	$ == Double.POSITIVE_INFINITY
317	1456	12	FastMath.java	pow	y	double	0	RET	$ != $
318	1459	12	FastMath.java	pow	y	double	1	RET	$ < 0.0
319	1466	8	FastMath.java	pow	y	double	0	RET	$ == Double.POSITIVE_INFINITY
320	1467	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
321	1471	12	FastMath.java	pow	x	double	1	RET	$ * $ > 1.0
322	1478	8	FastMath.java	pow	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
323	1479	12	FastMath.java	pow	y	double	0	RET	$ != $
324	1483	12	FastMath.java	pow	y	double	0	RET	$ < 0
325	1485	16	FastMath.java	pow	yi	long	0	RET	y == $
325	1485	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
325	1485	16	FastMath.java	pow	y	double	0	RET	$ == yi
326	1492	12	FastMath.java	pow	y	double	0	RET	$ > 0
327	1494	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
327	1494	16	FastMath.java	pow	yi	long	0	RET	y == $
327	1494	16	FastMath.java	pow	y	double	0	RET	$ == yi
328	1502	8	FastMath.java	pow	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
329	1504	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
330	1508	12	FastMath.java	pow	x	double	1	RET	$ * $ < 1.0
331	1516	8	FastMath.java	pow	x	double	0	RET	$ < 0
332	1518	12	FastMath.java	pow	THIS	FastMath	0	RET	y >= $.TWO_POWER_52
332	1518	12	FastMath.java	pow	THIS	FastMath	0	RET	y <= -$.TWO_POWER_52
332	1518	12	FastMath.java	pow	y	double	0	RET	$ >= TWO_POWER_52
332	1518	12	FastMath.java	pow	y	double	0	RET	$ <= -TWO_POWER_52
333	1522	12	FastMath.java	pow	y	double	1	RET	$ == (long) $
334	1533	8	FastMath.java	pow	y	double	1	DEF	$ > -8e298
334	1533	8	FastMath.java	pow	y	double	1	DEF	$ < 8e298
335	1546	8	FastMath.java	pow	lores	double	0	RET	Double.isInfinite($)
336	1588	8	FastMath.java	pow	e	int	1	RET	$ == 0
337	1590	15	FastMath.java	pow	e	int	0	DEF	$ < 0
20913	1611	8	FastMath.java	pow	e	int	0	NIL-WHILE	$ != 0
338	1613	12	FastMath.java	pow	e	int	0	DEF	($ & 0x1) != 0
339	1794	8	FastMath.java	sinQ	xb	double	0	DEF	$ != 0.0
340	1924	8	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
341	1957	8	FastMath.java	tanQ	xb	double	0	DEF	$ != 0.0
342	1961	12	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
343	2003	8	FastMath.java	reducePayneHanek	shift	int	1	DEF	$ != 0
344	2034	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
344	2034	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
344	2034	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
344	2034	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
344	2034	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
345	2048	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
345	2048	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
345	2048	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
345	2048	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
345	2048	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
346	2068	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
346	2068	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
346	2068	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
346	2068	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
346	2068	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
347	2120	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
347	2120	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
347	2120	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
347	2120	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
347	2120	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
348	2134	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
348	2134	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
348	2134	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
348	2134	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
348	2134	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
349	2154	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
349	2154	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
349	2154	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
349	2154	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
349	2154	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
350	2176	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
350	2176	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
350	2176	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
350	2176	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
350	2176	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
351	2208	8	FastMath.java	sin	x	double	0	DEF	$ < 0
352	2214	8	FastMath.java	sin	xa	double	0	RET	$ == 0.0
353	2216	12	FastMath.java	sin	bits	long	0	RET	$ < 0
354	2222	8	FastMath.java	sin	xa	double	0	RET	$ != $
354	2222	8	FastMath.java	sin	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
355	2227	8	FastMath.java	sin	xa	double	1	DEF	$ > 3294198.0
356	2236	15	FastMath.java	sin	xa	double	0	DEF	$ > 1.5707963267948966
357	2243	8	FastMath.java	sin	negative	boolean	0	DEF	$
358	2272	8	FastMath.java	cos	x	double	0	DEF	$ < 0
359	2276	8	FastMath.java	cos	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
359	2276	8	FastMath.java	cos	xa	double	0	RET	$ != $
360	2282	8	FastMath.java	cos	xa	double	1	DEF	$ > 3294198.0
361	2291	15	FastMath.java	cos	xa	double	0	DEF	$ > 1.5707963267948966
362	2327	8	FastMath.java	tan	x	double	0	DEF	$ < 0
363	2333	8	FastMath.java	tan	xa	double	0	RET	$ == 0.0
364	2335	12	FastMath.java	tan	bits	long	0	RET	$ < 0
365	2341	8	FastMath.java	tan	xa	double	0	RET	$ != $
365	2341	8	FastMath.java	tan	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
366	2347	8	FastMath.java	tan	xa	double	1	DEF	$ > 3294198.0
367	2356	15	FastMath.java	tan	xa	double	0	DEF	$ > 1.5707963267948966
368	2363	8	FastMath.java	tan	xa	double	0	DEF	$ > 1.5
369	2379	8	FastMath.java	tan	quadrant	int	1	DEF	($ & 1) == 0
370	2385	8	FastMath.java	tan	negative	boolean	0	DEF	$
371	2411	8	FastMath.java	atan	xa	double	0	RET	$ == 0.0
372	2415	8	FastMath.java	atan	xa	double	0	DEF	$ < 0
373	2422	8	FastMath.java	atan	xa	double	0	RET	$ > 1.633123935319537E16
374	2427	8	FastMath.java	atan	xa	double	1	DEF	$ < 1
375	2449	8	FastMath.java	atan	idx	int	1	DEF	$ == 0
376	2527	8	FastMath.java	atan	leftPlane	boolean	0	DEF	$
377	2541	8	FastMath.java	atan	negate	boolean	0	DEF	$ ^ leftPlane
377	2541	8	FastMath.java	atan	leftPlane	boolean	0	DEF	negate ^ $
378	2555	8	FastMath.java	atan2	y	double	0	RET	$ != $
378	2555	8	FastMath.java	atan2	x	double	0	RET	$ != $
379	2559	8	FastMath.java	atan2	y	double	0	RET	$ == 0
380	2564	12	FastMath.java	atan2	invx	double	0	RET	$ == 0
381	2565	16	FastMath.java	atan2	x	double	1	RET	$ > 0
382	2572	12	FastMath.java	atan2	invx	double	1	RET	$ < 0
382	2572	12	FastMath.java	atan2	x	double	1	RET	$ < 0
383	2573	16	FastMath.java	atan2	invy	double	1	RET	$ < 0
383	2573	16	FastMath.java	atan2	y	double	1	RET	$ < 0
384	2585	8	FastMath.java	atan2	y	double	0	RET	$ == Double.POSITIVE_INFINITY
385	2586	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
386	2590	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
387	2597	8	FastMath.java	atan2	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
388	2598	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
389	2602	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
390	2609	8	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
391	2610	12	FastMath.java	atan2	y	double	0	RET	$ > 0
391	2610	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0
392	2614	12	FastMath.java	atan2	y	double	0	RET	$ < 0
392	2614	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
393	2619	8	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
394	2621	12	FastMath.java	atan2	y	double	0	RET	$ > 0.0
394	2621	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0.0
395	2625	12	FastMath.java	atan2	y	double	0	RET	$ < 0
395	2625	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
396	2632	8	FastMath.java	atan2	x	double	0	RET	$ == 0
397	2633	12	FastMath.java	atan2	y	double	0	RET	$ > 0
397	2633	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0
398	2637	12	FastMath.java	atan2	y	double	0	RET	$ < 0
398	2637	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
399	2644	8	FastMath.java	atan2	r	double	0	RET	Double.isInfinite($)
400	2661	8	FastMath.java	atan2	ra	double	0	DEF	$ == 0
401	2676	6	FastMath.java	asin	x	double	0	RET	$ != $
402	2680	6	FastMath.java	asin	x	double	0	RET	$ > 1.0
402	2680	6	FastMath.java	asin	x	double	0	RET	$ < -1.0
403	2684	6	FastMath.java	asin	x	double	0	RET	$ == 1.0
404	2688	6	FastMath.java	asin	x	double	0	RET	$ == -1.0
405	2692	6	FastMath.java	asin	x	double	0	RET	$ == 0.0
406	2752	6	FastMath.java	acos	x	double	0	RET	$ != $
407	2756	6	FastMath.java	acos	x	double	0	RET	$ < -1.0
407	2756	6	FastMath.java	acos	x	double	0	RET	$ > 1.0
408	2760	6	FastMath.java	acos	x	double	0	RET	$ == -1.0
409	2764	6	FastMath.java	acos	x	double	0	RET	$ == 1.0
410	2768	6	FastMath.java	acos	x	double	0	RET	$ == 0
411	2812	6	FastMath.java	acos	r	double	0	RET	Double.isInfinite($)
412	2839	6	FastMath.java	cbrt	exponent	int	0	RET	$ == -1023
413	2840	10	FastMath.java	cbrt	x	double	0	RET	$ == 0
414	2851	6	FastMath.java	cbrt	exponent	int	0	RET	$ == 1024
415	2906	6	FastMath.java	cbrt	subnormal	boolean	0	DEF	$
416	2920	8	FastMath.java	toRadians	x	double	0	RET	Double.isInfinite($)
416	2920	8	FastMath.java	toRadians	x	double	0	RET	$ == 0.0
417	2932	8	FastMath.java	toRadians	result	double	0	DEF	$ == 0
418	2945	8	FastMath.java	toDegrees	x	double	0	RET	Double.isInfinite($)
418	2945	8	FastMath.java	toDegrees	x	double	0	RET	$ == 0.0
419	3001	8	FastMath.java	ulp	x	double	0	RET	Double.isInfinite($)
420	3013	8	FastMath.java	ulp	x	float	0	RET	Float.isInfinite($)
421	3028	8	FastMath.java	scalb	n	int	0	RET	$ > -1023
421	3028	8	FastMath.java	scalb	n	int	0	RET	$ < 1024
422	3033	8	FastMath.java	scalb	d	double	0	RET	$ == 0
422	3033	8	FastMath.java	scalb	d	double	0	RET	Double.isNaN($)
422	3033	8	FastMath.java	scalb	d	double	0	RET	Double.isInfinite($)
423	3036	8	FastMath.java	scalb	n	int	0	RET	$ < -2098
424	3039	8	FastMath.java	scalb	n	int	0	RET	$ > 2097
425	3052	8	FastMath.java	scalb	n	int	1	RET	$ < 0
426	3054	12	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
427	3057	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -53
428	3066	16	FastMath.java	scalb	mostSignificantLostBit	long	0	DEF	$ != 0
429	3078	12	FastMath.java	scalb	exponent	int	1	RET	$ == 0
20914	3081	16	FastMath.java	scalb	mantissa	long	0	NIL-WHILE	($ >>> 52) != 1
430	3088	16	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
431	3094	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
432	3112	8	FastMath.java	scalb	n	int	0	RET	$ < 128
432	3112	8	FastMath.java	scalb	n	int	0	RET	$ > -127
433	3117	8	FastMath.java	scalb	f	float	0	RET	Float.isInfinite($)
433	3117	8	FastMath.java	scalb	f	float	0	RET	$ == 0f
433	3117	8	FastMath.java	scalb	f	float	0	RET	Float.isNaN($)
434	3120	8	FastMath.java	scalb	n	int	0	RET	$ < -277
435	3123	8	FastMath.java	scalb	n	int	0	RET	$ > 276
436	3136	8	FastMath.java	scalb	n	int	1	RET	$ < 0
437	3138	12	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
438	3141	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -24
439	3150	16	FastMath.java	scalb	mostSignificantLostBit	int	0	DEF	$ != 0
440	3162	12	FastMath.java	scalb	exponent	int	1	RET	$ == 0
20915	3165	16	FastMath.java	scalb	mantissa	int	0	NIL-WHILE	($ >>> 23) != 1
441	3172	16	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
442	3178	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
443	3221	8	FastMath.java	nextAfter	d	double	1	RET	Double.isNaN($)
443	3221	8	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
444	3223	15	FastMath.java	nextAfter	d	double	1	RET	$ == direction
444	3223	15	FastMath.java	nextAfter	direction	double	1	RET	d == $
445	3225	15	FastMath.java	nextAfter	d	double	1	RET	Double.isInfinite($)
446	3227	15	FastMath.java	nextAfter	d	double	0	RET	$ == 0
447	3235	8	FastMath.java	nextAfter	sign	long	1	RET	(direction < d) ^ ($ == 0L)
447	3235	8	FastMath.java	nextAfter	d	double	1	RET	(direction < $) ^ (sign == 0L)
447	3235	8	FastMath.java	nextAfter	direction	double	1	RET	($ < d) ^ (sign == 0L)
448	3277	8	FastMath.java	nextAfter	f	float	1	RET	Double.isNaN($)
448	3277	8	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
449	3279	15	FastMath.java	nextAfter	f	float	1	RET	$ == direction
449	3279	15	FastMath.java	nextAfter	direction	double	1	RET	f == $
450	3281	15	FastMath.java	nextAfter	f	float	1	RET	Float.isInfinite($)
451	3283	15	FastMath.java	nextAfter	f	float	0	RET	$ == 0f
452	3291	8	FastMath.java	nextAfter	sign	int	1	RET	(direction < f) ^ ($ == 0)
452	3291	8	FastMath.java	nextAfter	f	float	1	RET	(direction < $) ^ (sign == 0)
452	3291	8	FastMath.java	nextAfter	direction	double	1	RET	($ < f) ^ (sign == 0)
453	3306	8	FastMath.java	floor	x	double	0	RET	$ != $
454	3310	8	FastMath.java	floor	THIS	FastMath	0	RET	x <= -$.TWO_POWER_52
454	3310	8	FastMath.java	floor	THIS	FastMath	0	RET	x >= $.TWO_POWER_52
454	3310	8	FastMath.java	floor	x	double	0	RET	$ <= -TWO_POWER_52
454	3310	8	FastMath.java	floor	x	double	0	RET	$ >= TWO_POWER_52
455	3315	8	FastMath.java	floor	y	long	0	DEF	$ != x
455	3315	8	FastMath.java	floor	x	double	0	DEF	$ < 0
455	3315	8	FastMath.java	floor	x	double	0	DEF	y != $
456	3319	8	FastMath.java	floor	y	long	0	RET	$ == 0
457	3333	8	FastMath.java	ceil	x	double	0	RET	$ != $
458	3338	8	FastMath.java	ceil	y	double	0	RET	$ == x
458	3338	8	FastMath.java	ceil	x	double	0	RET	y == $
459	3344	8	FastMath.java	ceil	y	double	0	RET	$ == 0
460	3359	8	FastMath.java	rint	d	double	0	RET	$ > 0.5
461	3360	12	FastMath.java	rint	y	double	0	RET	$ == -1.0
462	3365	8	FastMath.java	rint	d	double	0	RET	$ < 0.5
463	3414	8	FastMath.java	min	a	float	0	RET	$ > b
463	3414	8	FastMath.java	min	b	float	0	RET	a > $
464	3417	8	FastMath.java	min	a	float	0	RET	$ < b
464	3417	8	FastMath.java	min	b	float	0	RET	a < $
465	3421	8	FastMath.java	min	a	float	0	RET	$ != b
465	3421	8	FastMath.java	min	b	float	0	RET	a != $
466	3427	8	FastMath.java	min	bits	int	0	RET	$ == 0x80000000
467	3439	8	FastMath.java	min	a	double	0	RET	$ > b
467	3439	8	FastMath.java	min	b	double	0	RET	a > $
468	3442	8	FastMath.java	min	a	double	0	RET	$ < b
468	3442	8	FastMath.java	min	b	double	0	RET	a < $
469	3446	8	FastMath.java	min	a	double	0	RET	$ != b
469	3446	8	FastMath.java	min	b	double	0	RET	a != $
470	3452	8	FastMath.java	min	bits	long	0	RET	$ == 0x8000000000000000L
471	3482	8	FastMath.java	max	a	float	0	RET	$ > b
471	3482	8	FastMath.java	max	b	float	0	RET	a > $
472	3485	8	FastMath.java	max	a	float	0	RET	$ < b
472	3485	8	FastMath.java	max	b	float	0	RET	a < $
473	3489	8	FastMath.java	max	a	float	0	RET	$ != b
473	3489	8	FastMath.java	max	b	float	0	RET	a != $
474	3495	8	FastMath.java	max	bits	int	0	RET	$ == 0x80000000
475	3507	8	FastMath.java	max	a	double	0	RET	$ > b
475	3507	8	FastMath.java	max	b	double	0	RET	a > $
476	3510	8	FastMath.java	max	a	double	0	RET	$ < b
476	3510	8	FastMath.java	max	b	double	0	RET	a < $
477	3514	8	FastMath.java	max	a	double	0	RET	$ != b
477	3514	8	FastMath.java	max	b	double	0	RET	a != $
478	3520	8	FastMath.java	max	bits	long	0	RET	$ == 0x8000000000000000L
479	3541	8	FastMath.java	hypot	x	double	1	RET	Double.isInfinite($)
479	3541	8	FastMath.java	hypot	y	double	1	RET	Double.isInfinite($)
480	3543	15	FastMath.java	hypot	x	double	1	RET	Double.isNaN($)
480	3543	15	FastMath.java	hypot	y	double	1	RET	Double.isNaN($)
481	3549	12	FastMath.java	hypot	expX	int	1	RET	$ > expY + 27
481	3549	12	FastMath.java	hypot	expY	int	1	RET	expX > $ + 27
482	3552	19	FastMath.java	hypot	expX	int	1	RET	expY > $ + 27
482	3552	19	FastMath.java	hypot	expY	int	1	RET	$ > expX + 27
483	3610	8	FastMath.java	copySign	m	long	0	RET	$ >= 0
483	3610	8	FastMath.java	copySign	m	long	0	RET	$ < 0
483	3610	8	FastMath.java	copySign	s	long	0	RET	$ >= 0
483	3610	8	FastMath.java	copySign	s	long	0	RET	$ < 0
484	3627	8	FastMath.java	copySign	m	int	0	RET	$ < 0
484	3627	8	FastMath.java	copySign	m	int	0	RET	$ >= 0
484	3627	8	FastMath.java	copySign	s	int	0	RET	$ >= 0
484	3627	8	FastMath.java	copySign	s	int	0	RET	$ < 0
20896	108	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < 7
20897	121	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < SINE_TABLE_LEN
157	128	12	FastMathCalc.java	buildSinCosTables	i	int	1	DEF	($ & 1) == 0
20898	177	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < SINE_TABLE_LEN
20899	215	8	FastMathCalc.java	slowCos	i	int	0	NIL-FOR	$ >= 0
158	219	12	FastMathCalc.java	slowCos	i	int	0	DEF	($ & 1) != 0
159	226	12	FastMathCalc.java	slowCos	i	int	0	DEF	($ & 2) != 0
160	235	8	FastMathCalc.java	slowCos	result	double	0	DEF	$ != null
20900	259	8	FastMathCalc.java	slowSin	i	int	0	NIL-FOR	$ >= 0
161	263	12	FastMathCalc.java	slowSin	i	int	0	DEF	($ & 1) == 0
162	270	12	FastMathCalc.java	slowSin	i	int	0	DEF	($ & 2) != 0
163	279	8	FastMathCalc.java	slowSin	result	double	0	DEF	$ != null
20901	303	8	FastMathCalc.java	slowexp	i	int	0	NIL-FOR	$ >= 0
164	316	8	FastMathCalc.java	slowexp	result	double	0	DEF	$ != null
165	330	8	FastMathCalc.java	split	d	double	1	DEF	$ > -8e298
165	330	8	FastMathCalc.java	split	d	double	1	DEF	$ < 8e298
166	349	8	FastMathCalc.java	resplit	c	double	1	DEF	$ > -8e298
166	349	8	FastMathCalc.java	resplit	c	double	1	DEF	$ < 8e298
167	407	8	FastMathCalc.java	splitReciprocal	in	double	0	DEF	$[0] == 0.0
168	415	8	FastMathCalc.java	splitReciprocal	result	double	0	DEF	$[1] != $[1]
20902	422	8	FastMathCalc.java	splitReciprocal	i	int	0	NIL-FOR	$ < 2
20903	510	8	FastMathCalc.java	expint	p	int	0	NIL-WHILE	$ > 0
169	511	12	FastMathCalc.java	expint	p	int	0	DEF	($ & 1) != 0
170	522	8	FastMathCalc.java	expint	result	double	0	DEF	$ != null
20904	578	8	FastMathCalc.java	slowLog	i	int	0	NIL-FOR	$ >= 0
171	639	8	FastMathCalc.java	format	d	double	1	RET	$ != $
172	654	8	FastMathCalc.java	checkLen	expectedLen	int	0	DimensionMismatchException	$ != actual
172	654	8	FastMathCalc.java	checkLen	actual	int	0	DimensionMismatchException	expectedLen != $
2625	105	8	FastSineTransformer.java	transform	THIS	FastSineTransformer	0	RET	$.normalization == $.DstNormalization.ORTHOGONAL_DST_I
2626	109	8	FastSineTransformer.java	transform	THIS	FastSineTransformer	0	RET	type == $.TransformType.FORWARD
2626	109	8	FastSineTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
2627	150	8	FastSineTransformer.java	fst	THIS	FastSineTransformer	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo(f.$.length)
2627	150	8	FastSineTransformer.java	fst	f	double[]	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($.length)
2628	155	8	FastSineTransformer.java	fst	f	double[]	0	MathIllegalArgumentException	$[0] != 0.0
2629	161	8	FastSineTransformer.java	fst	n	int	0	RET	$ == 1
22370	170	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
22370	170	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
22371	183	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
22371	183	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
1426	87	8	FieldLUDecomposition.java	FieldLUDecomposition	matrix	FieldMatrix<T>	0	NonSquareMatrixException	$.isSquare()
21483	101	8	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
21483	101	8	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
21484	108	8	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	$ < m
21484	108	8	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	col < $
21485	113	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < col
21485	113	12	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	row < $
21486	116	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < row
21486	116	16	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	i < $
21487	124	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
21487	124	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
21488	127	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < col
21488	127	16	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	i < $
1427	132	16	FieldLUDecomposition.java	FieldLUDecomposition	THIS	FieldLUDecomposition	0	DEF	$.lu[nonZero][col].equals($.field.getZero())
1427	132	16	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	DEF	lu[$][col].equals(field.getZero())
1427	132	16	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	DEF	lu[nonZero][$].equals(field.getZero())
1428	139	12	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	RET	$ >= m
1428	139	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	RET	nonZero >= $
1429	145	12	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	DEF	$ != col
1429	145	12	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	DEF	nonZero != $
21489	147	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < m
21489	147	16	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	i < $
21490	160	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
21490	160	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
1430	174	8	FieldLUDecomposition.java	getL	THIS	FieldLUDecomposition	0	DEF	$.singular
1430	174	8	FieldLUDecomposition.java	getL	THIS	FieldLUDecomposition	0	DEF	$.cachedL == null
21491	177	12	FieldLUDecomposition.java	getL	i	int	0	NIL-FOR	$ < m
21491	177	12	FieldLUDecomposition.java	getL	m	int	0	NIL-FOR	i < $
21492	179	16	FieldLUDecomposition.java	getL	j	int	0	NIL-FOR	$ < i
21492	179	16	FieldLUDecomposition.java	getL	i	int	0	NIL-FOR	j < $
1431	194	8	FieldLUDecomposition.java	getU	THIS	FieldLUDecomposition	0	DEF	$.cachedU == null
1431	194	8	FieldLUDecomposition.java	getU	THIS	FieldLUDecomposition	0	DEF	$.singular
21493	197	12	FieldLUDecomposition.java	getU	i	int	0	NIL-FOR	$ < m
21493	197	12	FieldLUDecomposition.java	getU	m	int	0	NIL-FOR	i < $
21494	199	16	FieldLUDecomposition.java	getU	j	int	0	NIL-FOR	$ < m
21494	199	16	FieldLUDecomposition.java	getU	m	int	0	NIL-FOR	j < $
1432	217	8	FieldLUDecomposition.java	getP	THIS	FieldLUDecomposition	0	DEF	$.singular
1432	217	8	FieldLUDecomposition.java	getP	THIS	FieldLUDecomposition	0	DEF	$.cachedP == null
21495	220	12	FieldLUDecomposition.java	getP	i	int	0	NIL-FOR	$ < m
21495	220	12	FieldLUDecomposition.java	getP	m	int	0	NIL-FOR	i < $
1433	241	8	FieldLUDecomposition.java	getDeterminant	THIS	FieldLUDecomposition	1	RET	$.singular
21496	246	12	FieldLUDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < m
21496	246	12	FieldLUDecomposition.java	getDeterminant	m	int	0	NIL-FOR	i < $
2099	102	8	FirstMoment.java	increment	THIS	FirstMoment	0	DEF	$.n == 0
2581	61	8	FixedElapsedTime.java	FixedElapsedTime	maxTime	long	0	NumberIsTooSmallException	$ < 0
2582	75	8	FixedElapsedTime.java	isSatisfied	THIS	FixedElapsedTime	0	DEF	$.endTime < 0
2567	45	8	FixedGenerationCount.java	FixedGenerationCount	maxGenerations	int	0	NumberIsTooSmallException	$ <= 0
2568	60	8	FixedGenerationCount.java	isSatisfied	THIS	FixedGenerationCount	0	RET	$.numGenerations < $.maxGenerations
2077	88	8	FourthMoment.java	increment	THIS	FourthMoment	0	DEF	$.n < 1
916	181	8	Fraction.java	Fraction	overflow	long	0	FractionConversionException	FastMath.abs(a0) > $
916	181	8	Fraction.java	Fraction	a0	long	0	FractionConversionException	FastMath.abs($) > overflow
917	187	8	Fraction.java	Fraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
917	187	8	Fraction.java	Fraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
917	187	8	Fraction.java	Fraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
20957	203	8	Fraction.java	Fraction	stop	boolean	0	NIL-DOWHILE	$
918	209	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	FastMath.abs(p2) > $
918	209	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	FastMath.abs(q2) > $
918	209	12	Fraction.java	Fraction	p2	long	0	FractionConversionException	FastMath.abs($) > overflow
918	209	12	Fraction.java	Fraction	q2	long	0	FractionConversionException	FastMath.abs($) > overflow
919	214	12	Fraction.java	Fraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
919	214	12	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
919	214	12	Fraction.java	Fraction	n	int	1	DEF	$ < maxIterations
919	214	12	Fraction.java	Fraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
919	214	12	Fraction.java	Fraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
919	214	12	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
919	214	12	Fraction.java	Fraction	maxIterations	int	1	DEF	n < $
920	226	8	Fraction.java	Fraction	n	int	0	FractionConversionException	$ >= maxIterations
920	226	8	Fraction.java	Fraction	maxIterations	int	0	FractionConversionException	n >= $
921	230	8	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
921	230	8	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
922	257	8	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == 0
923	261	8	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ < 0
924	262	12	Fraction.java	Fraction	num	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
924	262	12	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
925	272	8	Fraction.java	Fraction	d	int	0	DEF	$ > 1
926	278	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
927	292	8	Fraction.java	abs	THIS	Fraction	1	DEF	$.numerator >= 0
928	333	8	Fraction.java	equals	THIS	Fraction	0	RET	$ == other
928	333	8	Fraction.java	equals	other	Object	0	RET	this == $
929	336	8	Fraction.java	equals	other	Object	0	RET	$ instanceof Fraction
930	406	8	Fraction.java	negate	THIS	Fraction	0	MathArithmeticException	$.numerator==Integer.MIN_VALUE
931	477	8	Fraction.java	addSub	fraction	Fraction	0	NullArgumentException	$ == null
932	481	8	Fraction.java	addSub	THIS	Fraction	0	RET	$.numerator == 0
933	484	8	Fraction.java	addSub	THIS	Fraction	0	RET	fraction.$.numerator == 0
933	484	8	Fraction.java	addSub	fraction	Fraction	0	RET	$.numerator == 0
934	490	8	Fraction.java	addSub	d1	int	0	RET	$==1
935	514	8	Fraction.java	addSub	w	BigInteger	0	MathArithmeticException	$.bitLength() > 31
936	534	8	Fraction.java	multiply	fraction	Fraction	0	NullArgumentException	$ == null
937	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	$.numerator == 0
937	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	fraction.$.numerator == 0
937	537	8	Fraction.java	multiply	fraction	Fraction	0	RET	$.numerator == 0
938	569	8	Fraction.java	divide	fraction	Fraction	0	NullArgumentException	$ == null
939	572	8	Fraction.java	divide	THIS	Fraction	0	MathArithmeticException	fraction.$.numerator == 0
939	572	8	Fraction.java	divide	fraction	Fraction	0	MathArithmeticException	$.numerator == 0
940	612	8	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ == 0
941	616	8	Fraction.java	getReducedFraction	numerator	int	0	RET	$==0
942	620	8	Fraction.java	getReducedFraction	numerator	int	0	DEF	($&1)==0
942	620	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
943	623	8	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ < 0
944	624	12	Fraction.java	getReducedFraction	numerator	int	0	MathArithmeticException	$==Integer.MIN_VALUE
944	624	12	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$==Integer.MIN_VALUE
945	651	8	Fraction.java	toString	THIS	Fraction	1	DEF	$.denominator == 1
946	653	15	Fraction.java	toString	THIS	Fraction	1	DEF	$.numerator == 0
900	177	8	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Fraction
901	179	15	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
902	199	8	FractionFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
903	221	8	FractionFormat.java	parse	num	Number	0	RET	$ == null
904	254	8	FractionFormat.java	parse	den	Number	0	RET	$ == null
22210	86	8	Frequency.java	toString	iter	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
2277	112	8	Frequency.java	addValue	v	Comparable<?>	0	DEF	$ instanceof Integer
2278	117	12	Frequency.java	addValue	count	Long	1	DEF	$ == null
22211	185	8	Frequency.java	getSumFreq	iterator	Iterator<Long>	0	NIL-WHILE	$.hasNext()
2279	199	8	Frequency.java	getCount	v	Comparable<?>	0	RET	$ instanceof Integer
2280	205	12	Frequency.java	getCount	count	Long	0	DEF	$ != null
2281	265	8	Frequency.java	getPct	sumFreq	long	0	RET	$ == 0
2282	315	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	$.getSumFreq() == 0
2283	318	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	$ instanceof Integer
2284	323	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	DEF	$ == null
2285	330	12	Frequency.java	getCumFreq	value	Long	0	DEF	$ != null
2286	337	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.firstKey()) < 0
2286	337	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.firstKey()) < 0
2286	337	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.firstKey()) < 0
2287	341	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.lastKey()) >= 0
2287	341	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.lastKey()) >= 0
2287	341	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.lastKey()) >= 0
22212	346	8	Frequency.java	getCumFreq	values	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
2288	348	12	Frequency.java	getCumFreq	nextValue	Comparable<?>	1	DEF	c.compare(v, $) > 0
2288	348	12	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	1	DEF	$.compare(v, nextValue) > 0
2288	348	12	Frequency.java	getCumFreq	v	Comparable<?>	1	DEF	c.compare($, nextValue) > 0
2289	408	8	Frequency.java	getCumPct	sumFreq	long	0	RET	$ == 0
2290	494	8	Frequency.java	equals	THIS	Frequency	0	RET	$ == obj
2290	494	8	Frequency.java	equals	obj	Object	0	RET	this == $
2291	497	8	Frequency.java	equals	obj	Object	0	RET	$ instanceof Frequency
2292	501	8	Frequency.java	equals	THIS	Frequency	1	RET	$.freqTable == null
2293	502	12	Frequency.java	equals	THIS	Frequency	0	RET	other.$.freqTable != null
2293	502	12	Frequency.java	equals	other	Frequency	0	RET	$.freqTable != null
2294	505	15	Frequency.java	equals	THIS	Frequency	0	RET	$.freqTable.equals(other.$.freqTable)
2294	505	15	Frequency.java	equals	other	Frequency	0	RET	freqTable.equals($.freqTable)
3360	319	8	FunctionUtils.java	sample	n	int	0	NotStrictlyPositiveException	$ <= 0
3361	324	8	FunctionUtils.java	sample	min	double	0	NumberIsTooLargeException	$ >= max
3361	324	8	FunctionUtils.java	sample	max	double	0	NumberIsTooLargeException	min >= $
22699	330	8	FunctionUtils.java	sample	i	int	0	NIL-FOR	$ < n
22699	330	8	FunctionUtils.java	sample	n	int	0	NIL-FOR	i < $
2299	80	8	GLSMultipleLinearRegression.java	getOmegaInverse	THIS	GLSMultipleLinearRegression	0	DEF	$.OmegaInverse == null
2596	95	8	Gamma.java	logGamma	x	double	1	DEF	$ <= 0.0
2596	95	8	Gamma.java	logGamma	x	double	1	DEF	Double.isNaN($)
2597	154	8	Gamma.java	regularizedGammaP	a	double	1	DEF	Double.isNaN($)
2597	154	8	Gamma.java	regularizedGammaP	a	double	1	DEF	$ <= 0.0
2597	154	8	Gamma.java	regularizedGammaP	x	double	1	DEF	Double.isNaN($)
2597	154	8	Gamma.java	regularizedGammaP	x	double	1	DEF	$ < 0.0
2598	156	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ == 0.0
2599	158	15	Gamma.java	regularizedGammaP	a	double	1	DEF	x >= $ + 1
2599	158	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ >= a + 1
22350	167	12	Gamma.java	regularizedGammaP	n	double	0	NIL-WHILE	$ < maxIterations
22350	167	12	Gamma.java	regularizedGammaP	an	double	0	NIL-WHILE	FastMath.abs($/sum) > epsilon
22350	167	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	FastMath.abs(an/$) > epsilon
22350	167	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	$ < Double.POSITIVE_INFINITY
22350	167	12	Gamma.java	regularizedGammaP	epsilon	double	0	NIL-WHILE	FastMath.abs(an/sum) > $
22350	167	12	Gamma.java	regularizedGammaP	maxIterations	int	0	NIL-WHILE	n < $
2600	177	12	Gamma.java	regularizedGammaP	n	double	1	MaxCountExceededException	$ >= maxIterations
2600	177	12	Gamma.java	regularizedGammaP	maxIterations	int	1	MaxCountExceededException	n >= $
2601	179	19	Gamma.java	regularizedGammaP	sum	double	1	DEF	Double.isInfinite($)
2602	232	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	Double.isNaN($)
2602	232	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ <= 0.0
2602	232	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < 0.0
2602	232	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	Double.isNaN($)
2603	234	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ == 0.0
2604	236	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	x < $ + 1.0
2604	236	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < a + 1.0
2605	284	8	Gamma.java	digamma	x	double	0	RET	$ <= S_LIMIT
2605	284	8	Gamma.java	digamma	x	double	0	RET	$ > 0
2606	290	8	Gamma.java	digamma	x	double	0	RET	$ >= C_LIMIT
2607	314	8	Gamma.java	trigamma	x	double	0	RET	$ > 0
2607	314	8	Gamma.java	trigamma	x	double	0	RET	$ <= S_LIMIT
2608	318	8	Gamma.java	trigamma	x	double	0	RET	$ >= C_LIMIT
22351	351	8	Gamma.java	lanczos	i	int	0	NIL-FOR	$ > 0
1072	132	8	GammaDistribution.java	GammaDistribution	shape	double	0	NotStrictlyPositiveException	$ <= 0
1073	135	8	GammaDistribution.java	GammaDistribution	scale	double	0	NotStrictlyPositiveException	$ <= 0
1074	234	8	GammaDistribution.java	density	x	double	0	RET	$ < 0
1075	238	8	GammaDistribution.java	density	THIS	GammaDistribution	0	RET	y <= $.minY
1075	238	8	GammaDistribution.java	density	THIS	GammaDistribution	0	RET	FastMath.log(y) >= $.maxLogY
1075	238	8	GammaDistribution.java	density	y	double	0	RET	$ <= minY
1075	238	8	GammaDistribution.java	density	y	double	0	RET	FastMath.log($) >= maxLogY
1076	272	8	GammaDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0
1077	370	8	GammaDistribution.java	sample	THIS	GammaDistribution	0	RET	$.shape < 1
1078	379	16	GammaDistribution.java	sample	p	double	1	RET	$ <= 1
1079	385	20	GammaDistribution.java	sample	x	double	1	DEF	u2 > FastMath.exp(-$)
1079	385	20	GammaDistribution.java	sample	u2	double	1	DEF	$ > FastMath.exp(-x)
1080	397	20	GammaDistribution.java	sample	THIS	GammaDistribution	1	DEF	u2 > FastMath.pow(x, $.shape - 1)
1080	397	20	GammaDistribution.java	sample	x	double	1	DEF	u2 > FastMath.pow($, shape - 1)
1080	397	20	GammaDistribution.java	sample	u2	double	1	DEF	$ > FastMath.pow(x, shape - 1)
1081	416	12	GammaDistribution.java	sample	v	double	0	DEF	$ <= 0
1082	424	12	GammaDistribution.java	sample	x2	double	0	RET	u < 1 - 0.0331 * $ * $
1082	424	12	GammaDistribution.java	sample	u	double	0	RET	$ < 1 - 0.0331 * x2 * x2
1083	428	12	GammaDistribution.java	sample	v	double	0	RET	FastMath.log(u) < 0.5 * x2 + d * (1 - $ + FastMath.log($))
1083	428	12	GammaDistribution.java	sample	x2	double	0	RET	FastMath.log(u) < 0.5 * $ + d * (1 - v + FastMath.log(v))
1083	428	12	GammaDistribution.java	sample	u	double	0	RET	FastMath.log($) < 0.5 * x2 + d * (1 - v + FastMath.log(v))
1083	428	12	GammaDistribution.java	sample	d	double	0	RET	FastMath.log(u) < 0.5 * x2 + $ * (1 - v + FastMath.log(v))
3476	50	8	GaussIntegrator.java	GaussIntegrator	THIS	GaussIntegrator	0	DimensionMismatchException	points.$.length != weights.$.length
3476	50	8	GaussIntegrator.java	GaussIntegrator	points	double[]	0	DimensionMismatchException	$.length != weights.length
3476	50	8	GaussIntegrator.java	GaussIntegrator	weights	double[]	0	DimensionMismatchException	points.length != $.length
22806	88	8	GaussIntegrator.java	integrate	THIS	GaussIntegrator	0	NIL-FOR	i < $.points.$.length
22806	88	8	GaussIntegrator.java	integrate	i	int	0	NIL-FOR	$ < points.length
22813	126	8	GaussIntegratorFactory.java	transform	THIS	GaussIntegratorFactory	0	NIL-FOR	i < points.$.length
22813	126	8	GaussIntegratorFactory.java	transform	i	int	0	NIL-FOR	$ < points.length
22813	126	8	GaussIntegratorFactory.java	transform	points	double[]	0	NIL-FOR	i < $.length
21890	110	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
21891	125	12	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.rows
21891	125	12	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < rows
21892	133	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	j < $.cols
21892	133	16	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
21893	138	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	k < $.cols
21893	138	16	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
21894	141	20	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	l < $.cols
21894	141	20	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < cols
21895	155	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.cols
21895	155	16	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < cols
1761	163	12	GaussNewtonOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	DEF	$ != null
1762	164	16	GaussNewtonOptimizer.java	doOptimize	previous	PointVectorValuePair	0	DEF	$ != null
3254	54	8	Gaussian.java	Gaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
2562	74	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	OutOfRangeException	$ < 0
2562	74	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	OutOfRangeException	$ > 1
2563	78	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	OutOfRangeException	$ > 1
2563	78	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	OutOfRangeException	$ < 0
22336	120	8	GeneticAlgorithm.java	evolve	current	Population	0	NIL-WHILE	condition.isSatisfied($)
22336	120	8	GeneticAlgorithm.java	evolve	condition	StoppingCondition	0	NIL-WHILE	$.isSatisfied(current)
22337	154	8	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	NIL-WHILE	$.getPopulationSize() < $.getPopulationLimit()
2564	159	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getCrossoverRate()
2564	159	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getCrossoverRate()
2565	165	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getMutationRate()
2565	165	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getMutationRate()
2566	175	12	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	DEF	$.getPopulationSize() < $.getPopulationLimit()
2097	111	8	GeometricMean.java	getResult	THIS	GeometricMean	1	RET	$.sumOfLogs.getN() > 0
2098	203	8	GeometricMean.java	checkEmpty	THIS	GeometricMean	0	MathIllegalStateException	$.getN() > 0
2730	111	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	1	DEF	$.previousState != null
2730	111	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
22450	118	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
22450	118	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
22451	135	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
22451	135	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2671	226	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ < 0.0001
2671	226	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ > 0.9999
2672	261	4	GraggBulirschStoerIntegrator.java	setControlFactors	control1	double	1	DEF	$ > 0.9999
2672	261	4	GraggBulirschStoerIntegrator.java	setControlFactors	control1	double	1	DEF	$ < 0.0001
2673	267	4	GraggBulirschStoerIntegrator.java	setControlFactors	control2	double	1	DEF	$ < 0.0001
2673	267	4	GraggBulirschStoerIntegrator.java	setControlFactors	control2	double	1	DEF	$ > 0.9999
2674	273	4	GraggBulirschStoerIntegrator.java	setControlFactors	control3	double	1	DEF	$ < 0.0001
2674	273	4	GraggBulirschStoerIntegrator.java	setControlFactors	control3	double	1	DEF	$ > 0.9999
2675	279	4	GraggBulirschStoerIntegrator.java	setControlFactors	control4	double	1	DEF	$ > 999.9
2675	279	4	GraggBulirschStoerIntegrator.java	setControlFactors	control4	double	1	DEF	$ < 1.0001
2676	313	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ <= 6
2676	313	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ % 2 != 0
2677	317	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ < 0.0001
2677	317	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ > 0.9999
2678	323	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ < 0.0001
2678	323	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ > 0.9999
2679	365	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence.$.length != size
2679	365	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence == null
2679	365	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	DEF	sequence.length != $
22410	375	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
22410	375	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
22411	382	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
22411	382	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
22412	387	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
22412	387	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
22413	389	6	GraggBulirschStoerIntegrator.java	initializeArrays	l	int	0	NIL-FOR	$ < k
22413	389	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	l < $
2680	412	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ >= 7
2680	412	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ <= 0
2681	426	4	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	1	DEF	$.vecAbsoluteTolerance == null
22414	427	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
22414	427	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
22414	427	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
22415	432	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
22415	432	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
22415	432	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
22416	465	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
22416	465	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
22416	465	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
22417	472	4	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	NIL-FOR	$ < n
22417	472	4	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	NIL-FOR	j < $
2682	474	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	DEF	2 * $ == n
2682	474	6	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	DEF	2 * j == $
22418	480	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
22418	480	6	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
22418	480	6	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
2683	489	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	j <= $.maxChecks
2683	489	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	$.performTest
2683	489	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	k < $.maxIter
2683	489	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	RET	$ <= maxChecks
2683	489	6	GraggBulirschStoerIntegrator.java	tryStep	k	int	0	RET	$ < maxIter
22419	491	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
22419	491	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
22419	491	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
22420	496	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
22420	496	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
22420	496	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
2684	500	8	GraggBulirschStoerIntegrator.java	tryStep	initialNorm	double	0	RET	deltaNorm > 4 * FastMath.max(1.0e-15, $)
2684	500	8	GraggBulirschStoerIntegrator.java	tryStep	deltaNorm	double	0	RET	$ > 4 * FastMath.max(1.0e-15, initialNorm)
22421	508	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
22421	508	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
22421	508	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
22422	527	4	GraggBulirschStoerIntegrator.java	extrapolate	j	int	0	NIL-FOR	$ < k
22422	527	4	GraggBulirschStoerIntegrator.java	extrapolate	k	int	0	NIL-FOR	j < $
22423	528	6	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
22423	528	6	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
22423	528	6	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
22424	536	4	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
22424	536	4	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
22424	536	4	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
22425	561	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length-1
22425	561	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length-1
22426	567	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length
22426	567	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length
22427	574	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < $.sequence[k]
22427	574	6	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < sequence[k]
22427	574	6	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	l < sequence[$]
2685	580	4	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	DEF	y != $
2685	580	4	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
22428	618	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-DOWHILE	$.isLastStep
2686	623	6	GraggBulirschStoerIntegrator.java	integrate	newStep	boolean	0	DEF	$
2687	628	8	GraggBulirschStoerIntegrator.java	integrate	firstStepAlreadyComputed	boolean	0	DEF	$
2688	632	8	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2689	644	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize > t
2689	644	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize < t
2689	644	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2689	644	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2689	644	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
2689	644	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
22429	653	6	GraggBulirschStoerIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
2690	658	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.tryStep($.stepStart, y, $.stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2690	658	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	tryStep(stepStart, y, stepSize, $, scale, fk[$], ($ == 0) ? yMidDots[0] : diagonal[$-1], ($ == 0) ? y1 : y1Diag[$-1], yTmp)
2690	658	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	1	DEF	tryStep(stepStart, $, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2690	658	8	GraggBulirschStoerIntegrator.java	integrate	y1	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? $ : y1Diag[k-1], yTmp)
2690	658	8	GraggBulirschStoerIntegrator.java	integrate	yTmp	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], $)
2690	658	8	GraggBulirschStoerIntegrator.java	integrate	diagonal	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : $[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2690	658	8	GraggBulirschStoerIntegrator.java	integrate	y1Diag	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : $[k-1], yTmp)
2690	658	8	GraggBulirschStoerIntegrator.java	integrate	fk	double[][][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, $[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2690	658	8	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? $[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2690	658	8	GraggBulirschStoerIntegrator.java	integrate	scale	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, $, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2691	671	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 0
22430	680	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < $.mainSetDimension
22430	680	12	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < mainSetDimension
2692	686	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > maxError
2692	686	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > 1.0e15
2692	686	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ > 1
2692	686	12	GraggBulirschStoerIntegrator.java	integrate	maxError	double	1	DEF	error > $
2693	707	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2693	707	16	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
2694	710	18	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
2695	719	20	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
2695	719	20	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
2696	725	22	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2696	725	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2696	725	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2697	737	16	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
2698	745	18	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
2698	745	18	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
2699	750	20	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2699	750	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2699	750	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2700	761	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > 1.0
2701	763	18	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2701	763	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2701	763	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2702	774	16	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.isLastStep
2702	774	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ <= 1.0
2702	774	16	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2703	786	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
2704	793	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
22431	796	8	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
22431	796	8	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
22432	802	8	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < mu
22432	802	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	NIL-FOR	l < $
22433	808	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
22433	808	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
22433	808	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
22434	811	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k - l2
22434	811	10	GraggBulirschStoerIntegrator.java	integrate	l2	int	0	NIL-FOR	j <= k - $
22434	811	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $ - l2
22435	814	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
22435	814	12	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
22435	814	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
22436	819	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
22436	819	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
22436	819	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
22437	824	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
22437	824	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
22438	825	12	GraggBulirschStoerIntegrator.java	integrate	m	int	0	NIL-FOR	$ >= 2 * (l + 1)
22438	825	12	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	m >= 2 * ($ + 1)
22439	826	14	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
22439	826	14	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
22439	826	14	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
2705	834	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	DEF	$ >= 0
2706	841	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.useInterpolationError
2707	846	12	GraggBulirschStoerIntegrator.java	integrate	interpError	double	0	DEF	$ > 10.0
2708	856	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
2709	869	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ == 1
2710	871	10	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
2711	874	15	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ <= targetIter
2711	874	15	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k <= $
2712	876	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k-1] < $.orderControl1 * $.costPerTimeUnit[k]
2712	876	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2713	878	17	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
2713	878	17	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
2714	883	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k-2] < $.orderControl1 * $.costPerTimeUnit[k-1]
2714	883	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$-2] < orderControl1 * costPerTimeUnit[$-1]
2714	883	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 2
2715	887	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[optimalIter]
2715	887	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	0	DEF	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[$]
2715	887	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[optimalIter]
2716	892	8	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	1	DEF	$
2717	899	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	1	DEF	$ <= k
2717	899	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	optimalIter <= $
2718	902	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
2718	902	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ < targetIter
2718	902	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
2718	902	12	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k < $
2719	921	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2720	927	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	1	DEF	$
2746	170	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	1	DEF	interpolator.$.polynomials == null
2746	170	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	interpolator	GraggBulirschStoerStepInterpolator	1	DEF	$.polynomials == null
22475	175	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.polynomials.$.length
22475	175	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	i	int	0	NIL-FOR	$ < polynomials.length
2747	192	4	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ < 0
2748	199	6	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	1	DEF	$.polynomials != null
22476	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
22476	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
22476	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
22477	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
22477	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
22477	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
2749	212	6	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ <= 4
22478	216	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.errfac.$.length
22478	216	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < errfac.length
22479	220	10	GraggBulirschStoerStepInterpolator.java	resetTables	j	int	0	NIL-FOR	$ <= i
22479	220	10	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	j <= $
2750	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynomials == null
2750	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynomials.$.length <= (mu + 4)
2750	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	polynomials.length <= ($ + 4)
22480	251	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
22480	251	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	i	int	0	NIL-FOR	$ < currentState.length
2751	264	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	RET	$ < 0
2752	272	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 0
2753	276	8	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 1
2754	280	10	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 2
22481	284	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	j	int	0	NIL-FOR	$ <= mu
22481	284	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	NIL-FOR	j <= $
2755	304	4	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree >= 5
22482	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < scale.$.length
22482	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	i	int	0	NIL-FOR	$ < scale.length
22482	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	scale	double[]	0	NIL-FOR	i < $.length
22483	330	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < dimension
22483	330	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	dimension	int	0	NIL-FOR	i < $
2756	339	8	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree > 3
22484	342	12	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ > 3
2757	353	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.h == 0
22485	373	4	GraggBulirschStoerStepInterpolator.java	writeExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
22485	373	4	GraggBulirschStoerStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ <= currentDegree
22486	374	6	GraggBulirschStoerStepInterpolator.java	writeExternal	l	int	0	NIL-FOR	$ < dimension
22486	374	6	GraggBulirschStoerStepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	l < $
22487	395	4	GraggBulirschStoerStepInterpolator.java	readExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
22487	395	4	GraggBulirschStoerStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ <= currentDegree
22488	396	6	GraggBulirschStoerStepInterpolator.java	readExternal	l	int	0	NIL-FOR	$ < dimension
22488	396	6	GraggBulirschStoerStepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	l < $
22618	91	8	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	i < value.$.length
22618	91	8	HermiteInterpolator.java	addSamplePoint	i	int	0	NIL-FOR	$ < value.length
22618	91	8	HermiteInterpolator.java	addSamplePoint	value	double[]	0	NIL-FOR	i < $.length
3190	94	12	HermiteInterpolator.java	addSamplePoint	i	int	0	DEF	$ > 1
22619	96	16	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	j < y.$.length
22619	96	16	HermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < y.length
22619	96	16	HermiteInterpolator.java	addSamplePoint	y	double[]	0	NIL-FOR	j < $.length
22620	105	12	HermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < n
22620	105	12	HermiteInterpolator.java	addSamplePoint	n	int	0	NIL-FOR	j < $
3191	108	16	HermiteInterpolator.java	addSamplePoint	inv	double	0	MathIllegalArgumentException	Double.isInfinite($)
22621	112	16	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	k < y.$.length
22621	112	16	HermiteInterpolator.java	addSamplePoint	k	int	0	NIL-FOR	$ < y.length
22621	112	16	HermiteInterpolator.java	addSamplePoint	y	double[]	0	NIL-FOR	k < $.length
22622	141	8	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	i < polynomials.$.length
22622	141	8	HermiteInterpolator.java	getPolynomials	i	int	0	NIL-FOR	$ < polynomials.length
22622	141	8	HermiteInterpolator.java	getPolynomials	polynomials	PolynomialFunction[]	0	NIL-FOR	i < $.length
22623	147	8	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
22623	147	8	HermiteInterpolator.java	getPolynomials	i	int	0	NIL-FOR	$ < topDiagonal.size()
22624	149	12	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	k < polynomials.$.length
22624	149	12	HermiteInterpolator.java	getPolynomials	k	int	0	NIL-FOR	$ < polynomials.length
22624	149	12	HermiteInterpolator.java	getPolynomials	polynomials	PolynomialFunction[]	0	NIL-FOR	k < $.length
22625	178	8	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
22625	178	8	HermiteInterpolator.java	value	i	int	0	NIL-FOR	$ < topDiagonal.size()
22626	180	12	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	k < value.$.length
22626	180	12	HermiteInterpolator.java	value	k	int	0	NIL-FOR	$ < value.length
22626	180	12	HermiteInterpolator.java	value	value	double[]	0	NIL-FOR	k < $.length
22627	211	8	HermiteInterpolator.java	derivative	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
22627	211	8	HermiteInterpolator.java	derivative	i	int	0	NIL-FOR	$ < topDiagonal.size()
22628	213	12	HermiteInterpolator.java	derivative	THIS	HermiteInterpolator	0	NIL-FOR	k < derivative.$.length
22628	213	12	HermiteInterpolator.java	derivative	k	int	0	NIL-FOR	$ < derivative.length
22628	213	12	HermiteInterpolator.java	derivative	derivative	double[]	0	NIL-FOR	k < $.length
3192	242	8	HermiteInterpolator.java	checkInterpolation	THIS	HermiteInterpolator	0	MathIllegalStateException	$.abscissae.isEmpty()
1204	61	8	HessenbergTransformer.java	HessenbergTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1205	84	8	HessenbergTransformer.java	getP	THIS	HessenbergTransformer	0	DEF	$.cachedP == null
21173	89	12	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ < n
21173	89	12	HessenbergTransformer.java	getP	n	int	0	NIL-FOR	i < $
21174	90	16	HessenbergTransformer.java	getP	j	int	0	NIL-FOR	$ < n
21174	90	16	HessenbergTransformer.java	getP	n	int	0	NIL-FOR	j < $
21175	95	12	HessenbergTransformer.java	getP	m	int	0	NIL-FOR	$ >= 1
1206	96	16	HessenbergTransformer.java	getP	THIS	HessenbergTransformer	0	DEF	$.householderVectors[m][m - 1] != 0.0
1206	96	16	HessenbergTransformer.java	getP	m	int	0	DEF	householderVectors[$][$ - 1] != 0.0
21176	97	20	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
21176	97	20	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
21177	101	20	HessenbergTransformer.java	getP	j	int	0	NIL-FOR	$ <= high
21177	101	20	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	j <= $
21178	104	24	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
21178	104	24	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
21179	111	24	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
21179	111	24	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
1207	130	8	HessenbergTransformer.java	getPT	THIS	HessenbergTransformer	0	DEF	$.cachedPt == null
1208	144	8	HessenbergTransformer.java	getH	THIS	HessenbergTransformer	0	DEF	$.cachedH == null
21180	147	12	HessenbergTransformer.java	getH	i	int	0	NIL-FOR	$ < m
21180	147	12	HessenbergTransformer.java	getH	m	int	0	NIL-FOR	i < $
1209	148	16	HessenbergTransformer.java	getH	i	int	0	DEF	$ > 0
21181	154	16	HessenbergTransformer.java	getH	j	int	0	NIL-FOR	$ < m
21181	154	16	HessenbergTransformer.java	getH	m	int	0	NIL-FOR	j < $
21182	184	8	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	$ <= high - 1
21182	184	8	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	m <= $ - 1
21183	187	12	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
21183	187	12	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
1210	191	12	HessenbergTransformer.java	transform	scale	double	0	DEF	Precision.equals($, 0)
21184	194	16	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ >= m
21184	194	16	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	i >= $
21185	206	16	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ < n
21185	206	16	HessenbergTransformer.java	transform	n	int	0	NIL-FOR	j < $
21186	208	20	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ >= m
21186	208	20	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	i >= $
21187	212	20	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
21187	212	20	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
21188	217	16	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
21188	217	16	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
21189	219	20	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ >= m
21189	219	20	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	j >= $
21190	223	20	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ <= high
21190	223	20	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	j <= $
22518	117	4	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	j < $.mainSetDimension
22518	117	4	HighamHall54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
22519	119	6	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	l < STATIC_E.$.length
22519	119	6	HighamHall54Integrator.java	estimateError	l	int	0	NIL-FOR	$ < STATIC_E.length
2777	80	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	1	DEF	$.previousState != null
2777	80	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
22516	87	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
22516	87	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
22517	105	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
22517	105	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
976	86	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NotStrictlyPositiveException	$ <= 0
977	90	8	HypergeometricDistribution.java	HypergeometricDistribution	numberOfSuccesses	int	0	NotPositiveException	$ < 0
978	94	8	HypergeometricDistribution.java	HypergeometricDistribution	sampleSize	int	0	NotPositiveException	$ < 0
979	99	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NumberIsTooLargeException	numberOfSuccesses > $
979	99	8	HypergeometricDistribution.java	HypergeometricDistribution	numberOfSuccesses	int	0	NumberIsTooLargeException	$ > populationSize
980	103	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NumberIsTooLargeException	sampleSize > $
980	103	8	HypergeometricDistribution.java	HypergeometricDistribution	sampleSize	int	0	NumberIsTooLargeException	$ > populationSize
981	118	8	HypergeometricDistribution.java	cumulativeProbability	domain	int[]	1	DEF	x < $[0]
981	118	8	HypergeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ < domain[0]
982	120	15	HypergeometricDistribution.java	cumulativeProbability	domain	int[]	1	DEF	x >= $[1]
982	120	15	HypergeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ >= domain[1]
983	199	8	HypergeometricDistribution.java	probability	domain	int[]	1	DEF	x < $[0]
983	199	8	HypergeometricDistribution.java	probability	domain	int[]	1	DEF	x > $[1]
983	199	8	HypergeometricDistribution.java	probability	x	int	1	DEF	$ < domain[0]
983	199	8	HypergeometricDistribution.java	probability	x	int	1	DEF	$ > domain[1]
984	228	8	HypergeometricDistribution.java	upperCumulativeProbability	domain	int[]	1	DEF	x <= $[0]
984	228	8	HypergeometricDistribution.java	upperCumulativeProbability	x	int	1	DEF	$ <= domain[0]
985	230	15	HypergeometricDistribution.java	upperCumulativeProbability	domain	int[]	1	DEF	x > $[1]
985	230	15	HypergeometricDistribution.java	upperCumulativeProbability	x	int	1	DEF	$ > domain[1]
20970	254	8	HypergeometricDistribution.java	innerCumulativeProbability	x0	int	0	NIL-WHILE	$ != x1
20970	254	8	HypergeometricDistribution.java	innerCumulativeProbability	x1	int	0	NIL-WHILE	x0 != $
986	279	8	HypergeometricDistribution.java	getNumericalVariance	THIS	HypergeometricDistribution	0	DEF	$.numericalVarianceIsCalculated
2448	121	8	ISAACRandom.java	setSeed	seed	int[]	0	RET	$ == null
2449	128	8	ISAACRandom.java	setSeed	seedLen	int	0	DEF	$ < rslLen
2449	128	8	ISAACRandom.java	setSeed	rslLen	int	0	DEF	seedLen < $
22286	129	12	ISAACRandom.java	setSeed	j	int	0	NIL-FOR	$ < rslLen
22286	129	12	ISAACRandom.java	setSeed	rslLen	int	0	NIL-FOR	j < $
2450	140	8	ISAACRandom.java	next	THIS	ISAACRandom	0	DEF	$.count < 0
22287	152	8	ISAACRandom.java	isaac	THIS	ISAACRandom	0	NIL-WHILE	$.isaacI < H_SIZE
22288	156	8	ISAACRandom.java	isaac	THIS	ISAACRandom	0	NIL-WHILE	$.isaacJ < H_SIZE
22289	193	8	ISAACRandom.java	initState	THIS	ISAACRandom	0	NIL-FOR	j < $.arr.$.length
22289	193	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < arr.length
22290	196	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < 4
22291	200	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < SIZE
22292	213	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < SIZE
173	81	8	Incrementor.java	Incrementor	cb	MaxCountExceededCallback	0	NullArgumentException	$ == null
20905	136	8	Incrementor.java	incrementCount	i	int	0	NIL-FOR	$ < value
20905	136	8	Incrementor.java	incrementCount	value	int	0	NIL-FOR	i < $
174	155	8	Incrementor.java	incrementCount	THIS	Incrementor	0	DEF	++$.count > $.maximalCount
721	94	8	IntervalsSet.java	buildTree	lower	double	0	RET	$ < 0
721	94	8	IntervalsSet.java	buildTree	lower	double	0	RET	Double.isInfinite($)
722	95	12	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
722	95	12	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
723	109	8	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
723	109	8	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
724	139	8	IntervalsSet.java	computeGeometricalProperties	THIS	IntervalsSet	1	DEF	$.getTree(false).getCut() == null
725	150	12	IntervalsSet.java	computeGeometricalProperties	size	double	1	DEF	Double.isInfinite($)
726	152	19	IntervalsSet.java	computeGeometricalProperties	size	double	1	DEF	$ >= Precision.SAFE_MIN
20942	169	8	IntervalsSet.java	getInf	node	BSPTree<Euclidean1D>	0	NIL-WHILE	$.getCut() != null
20943	186	8	IntervalsSet.java	getSup	node	BSPTree<Euclidean1D>	0	NIL-WHILE	$.getCut() != null
727	224	8	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	1	DEF	$.getCut() == null
728	225	12	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	0	DEF	(Boolean) $.getAttribute()
729	241	12	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(high, loc) == $.Location.INSIDE
729	241	12	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(low, loc) == $.Location.INSIDE
729	241	12	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(high, $) == Location.INSIDE
729	241	12	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(low, $) == Location.INSIDE
729	241	12	IntervalsSet.java	recurseList	low	BSPTree<Euclidean1D>	0	DEF	checkPoint($, loc) == Location.INSIDE
729	241	12	IntervalsSet.java	recurseList	high	BSPTree<Euclidean1D>	0	DEF	checkPoint($, loc) == Location.INSIDE
3484	120	12	IterativeLegendreGaussIntegrator.java	doIntegrate	THIS	IterativeLegendreGaussIntegrator	0	RET	$.iterations.getCount() + 1 >= $.getMinimalIterationCount()
3484	120	12	IterativeLegendreGaussIntegrator.java	doIntegrate	delta	double	0	RET	$ <= limit
3484	120	12	IterativeLegendreGaussIntegrator.java	doIntegrate	limit	double	0	RET	delta <= $
22814	155	8	IterativeLegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
22814	155	8	IterativeLegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
1173	81	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	NonSquareOperatorException	$.getRowDimension() != $.getColumnDimension()
1174	85	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	b.getDimension() != $.getRowDimension()
1174	85	8	IterativeLinearSolver.java	checkParameters	b	RealVector	0	DimensionMismatchException	$.getDimension() != a.getRowDimension()
1175	89	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	x0.getDimension() != $.getColumnDimension()
1175	89	8	IterativeLinearSolver.java	checkParameters	x0	RealVector	0	DimensionMismatchException	$.getDimension() != a.getColumnDimension()
1146	62	8	JacobiPreconditioner.java	create	n	int	0	NonSquareOperatorException	a.getRowDimension() != $
1146	62	8	JacobiPreconditioner.java	create	a	RealLinearOperator	0	NonSquareOperatorException	$.getRowDimension() != n
1147	66	8	JacobiPreconditioner.java	create	a	RealLinearOperator	1	DEF	$ instanceof AbstractRealMatrix
21115	68	12	JacobiPreconditioner.java	create	i	int	0	NIL-FOR	$ < n
21115	68	12	JacobiPreconditioner.java	create	n	int	0	NIL-FOR	i < $
21116	73	12	JacobiPreconditioner.java	create	i	int	0	NIL-FOR	$ < n
21116	73	12	JacobiPreconditioner.java	create	n	int	0	NIL-FOR	i < $
2798	133	8	JacobianMatrices.java	JacobianMatrices	parameters	String	1	DEF	$ == null
22522	138	12	JacobianMatrices.java	JacobianMatrices	THIS	JacobianMatrices	0	NIL-FOR	i < parameters.$.length
22522	138	12	JacobianMatrices.java	JacobianMatrices	i	int	0	NIL-FOR	$ < parameters.length
22522	138	12	JacobianMatrices.java	JacobianMatrices	parameters	String	0	NIL-FOR	i < $.length
22523	150	8	JacobianMatrices.java	JacobianMatrices	THIS	JacobianMatrices	0	NIL-FOR	i < $.stateDim
22523	150	8	JacobianMatrices.java	JacobianMatrices	i	int	0	NIL-FOR	$ < stateDim
2799	169	8	JacobianMatrices.java	registerVariationalEquations	ode	FirstOrderDifferentialEquations	0	MathIllegalArgumentException	expandable.getPrimary() != $
2799	169	8	JacobianMatrices.java	registerVariationalEquations	expandable	ExpandableStatefulODE	0	MathIllegalArgumentException	$.getPrimary() != ode
2800	214	12	JacobianMatrices.java	setParameterStep	THIS	JacobianMatrices	0	RET	parameter.equals($.param.getParameterName())
2800	214	12	JacobianMatrices.java	setParameterStep	parameter	String	0	RET	$.equals(param.getParameterName())
2801	247	8	JacobianMatrices.java	setInitialMainStateJacobian	THIS	JacobianMatrices	0	DEF	$.efode != null
2802	271	12	JacobianMatrices.java	setInitialParameterJacobian	THIS	JacobianMatrices	0	RET	pName.equals($.param.getParameterName())
2802	271	12	JacobianMatrices.java	setInitialParameterJacobian	pName	String	0	RET	$.equals(param.getParameterName())
2803	273	16	JacobianMatrices.java	setInitialParameterJacobian	THIS	JacobianMatrices	0	DEF	$.efode != null
22524	294	8	JacobianMatrices.java	getCurrentMainSetJacobian	THIS	JacobianMatrices	0	NIL-FOR	i < $.stateDim
22524	294	8	JacobianMatrices.java	getCurrentMainSetJacobian	i	int	0	NIL-FOR	$ < stateDim
2804	312	12	JacobianMatrices.java	getCurrentParameterJacobian	THIS	JacobianMatrices	0	RET	$.param.getParameterName().equals(pName)
2804	312	12	JacobianMatrices.java	getCurrentParameterJacobian	pName	String	0	RET	param.getParameterName().equals($)
2805	329	8	JacobianMatrices.java	checkDimension	arrayDimension	int	0	DimensionMismatchException	$ != expected
2805	329	8	JacobianMatrices.java	checkDimension	expected	int	0	DimensionMismatchException	arrayDimension != $
22167	108	8	KMeansPlusPlusClusterer.java	cluster	i	int	0	NIL-FOR	$ < numTrials
22167	108	8	KMeansPlusPlusClusterer.java	cluster	numTrials	int	0	NIL-FOR	i < $
2226	116	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
2227	129	12	KMeansPlusPlusClusterer.java	cluster	varianceSum	double	0	DEF	$ <= bestVarianceSum
2227	129	12	KMeansPlusPlusClusterer.java	cluster	bestVarianceSum	double	0	DEF	varianceSum <= $
2228	161	8	KMeansPlusPlusClusterer.java	cluster	points	Collection<T>	0	NumberIsTooSmallException	$.size() < k
2228	161	8	KMeansPlusPlusClusterer.java	cluster	k	int	0	NumberIsTooSmallException	points.size() < $
22168	175	8	KMeansPlusPlusClusterer.java	cluster	count	int	0	NIL-FOR	$ < max
22168	175	8	KMeansPlusPlusClusterer.java	cluster	max	int	0	NIL-FOR	count < $
2229	180	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	1	ConvergenceException	$.cluster.getPoints().isEmpty()
2230	205	12	KMeansPlusPlusClusterer.java	cluster	emptyCluster	boolean	0	RET	$
2230	205	12	KMeansPlusPlusClusterer.java	cluster	changes	int	0	RET	$ == 0
2231	228	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	clusterIndex	int	0	DEF	$ != assignments[pointIndex]
2231	228	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	pointIndex	int	0	DEF	clusterIndex != assignments[$]
2231	228	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	assignments	int[]	0	DEF	clusterIndex != $[pointIndex]
22169	282	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
22169	282	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2232	283	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	$ != firstPointIndex
2232	283	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	firstPointIndex	int	0	DEF	i != $
22170	289	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	NIL-WHILE	$.size() < k
22170	289	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	NIL-WHILE	resultSet.size() < $
22171	295	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
22171	295	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2233	296	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2233	296	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
22172	311	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
22172	311	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2234	312	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2234	312	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
2235	314	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	r	double	0	DEF	sum >= $
2235	314	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	sum	double	0	DEF	$ >= r
2236	324	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	0	DEF	$ == -1
22173	325	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ >= 0
2237	326	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2237	326	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
2238	334	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	1	DEF	$ >= 0
2239	343	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	DEF	$.size() < k
2239	343	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	DEF	resultSet.size() < $
22174	346	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	NIL-FOR	$ < numPoints
22174	346	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	j < $
2240	348	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	taken[$]
2240	348	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[j]
2241	351	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	d2	double	0	DEF	$ < minDistSquared[j]
2241	351	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	d2 < minDistSquared[$]
2241	351	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	minDistSquared	double[]	0	DEF	d2 < $[j]
2242	380	12	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
2243	391	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	variance	double	0	DEF	$ > maxVariance
2243	391	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	maxVariance	double	0	DEF	variance > $
2244	400	8	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
2245	426	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	number	int	0	DEF	$ > maxNumber
2245	426	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	maxNumber	int	0	DEF	number > $
2246	434	8	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
22175	460	12	KMeansPlusPlusClusterer.java	getFarthestPoint	i	int	0	NIL-FOR	$ < points.size()
22175	460	12	KMeansPlusPlusClusterer.java	getFarthestPoint	points	List<T>	0	NIL-FOR	i < $.size()
2247	462	16	KMeansPlusPlusClusterer.java	getFarthestPoint	distance	double	0	DEF	$ > maxDistance
2247	462	16	KMeansPlusPlusClusterer.java	getFarthestPoint	maxDistance	double	0	DEF	distance > $
2248	472	8	KMeansPlusPlusClusterer.java	getFarthestPoint	selectedCluster	Cluster<T>	0	ConvergenceException	$ == null
2249	495	12	KMeansPlusPlusClusterer.java	getNearestCluster	distance	double	0	DEF	$ < minDistance
2249	495	12	KMeansPlusPlusClusterer.java	getNearestCluster	minDistance	double	0	DEF	distance < $
0	134	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getControlMatrix() == null
1	154	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialStateEstimate() == null
2	161	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	DimensionMismatchException	$.transitionMatrix.getColumnDimension() != $.stateEstimation.getDimension()
3	168	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialErrorCovariance() == null
4	177	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	NonSquareMatrixException	$.transitionMatrix.isSquare()
5	184	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() != 1
5	184	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() > 0
5	184	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() > 0
5	184	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix != null
5	184	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() != $.transitionMatrix.getRowDimension()
6	198	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.measurementMatrix.getColumnDimension() != $.transitionMatrix.getRowDimension()
7	206	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	measNoise.getRowDimension() != $.measurementMatrix.getRowDimension()
7	206	8	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
7	206	8	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != measurementMatrix.getRowDimension()
8	296	8	KalmanFilter.java	predict	THIS	KalmanFilter	0	DimensionMismatchException	u.getDimension() != $.controlMatrix.getColumnDimension()
8	296	8	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$.getDimension() != controlMatrix.getColumnDimension()
8	296	8	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$ != null
9	307	8	KalmanFilter.java	predict	u	RealVector	0	DEF	$ != null
10	343	8	KalmanFilter.java	correct	THIS	KalmanFilter	0	DimensionMismatchException	z.getDimension() != $.measurementMatrix.getRowDimension()
10	343	8	KalmanFilter.java	correct	z	RealVector	0	DimensionMismatchException	$.getDimension() != measurementMatrix.getRowDimension()
1084	86	8	KolmogorovSmirnovDistribution.java	KolmogorovSmirnovDistribution	n	int	0	NotStrictlyPositiveException	$ <= 0
1085	154	8	KolmogorovSmirnovDistribution.java	cdf	ninvhalf	double	1	RET	d <= $
1085	154	8	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ <= ninvhalf
1086	158	15	KolmogorovSmirnovDistribution.java	cdf	ninv	double	1	RET	d <= $
1086	158	15	KolmogorovSmirnovDistribution.java	cdf	ninvhalf	double	1	RET	$ < d
1086	158	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	ninvhalf < $
1086	158	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ <= ninv
20976	164	12	KolmogorovSmirnovDistribution.java	cdf	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
20976	164	12	KolmogorovSmirnovDistribution.java	cdf	i	int	0	NIL-FOR	$ <= n
1087	170	15	KolmogorovSmirnovDistribution.java	cdf	ninv	double	1	RET	1 - $ <= d
1087	170	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ < 1
1087	170	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	1 - ninv <= $
1088	174	15	KolmogorovSmirnovDistribution.java	cdf	d	double	0	RET	1 <= $
20977	203	8	KolmogorovSmirnovDistribution.java	exactK	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
20977	203	8	KolmogorovSmirnovDistribution.java	exactK	i	int	0	NIL-FOR	$ <= n
20978	238	8	KolmogorovSmirnovDistribution.java	roundedK	i	int	0	NIL-FOR	$ < m
20978	238	8	KolmogorovSmirnovDistribution.java	roundedK	m	int	0	NIL-FOR	i < $
20979	239	12	KolmogorovSmirnovDistribution.java	roundedK	j	int	0	NIL-FOR	$ < m
20979	239	12	KolmogorovSmirnovDistribution.java	roundedK	m	int	0	NIL-FOR	j < $
20980	248	8	KolmogorovSmirnovDistribution.java	roundedK	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
20980	248	8	KolmogorovSmirnovDistribution.java	roundedK	i	int	0	NIL-FOR	$ <= n
1089	274	8	KolmogorovSmirnovDistribution.java	createH	hDouble	double	0	NumberIsTooLargeException	$ >= 1
20981	295	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
20981	295	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
20982	296	12	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	$ < m
20982	296	12	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	j < $
1090	297	16	KolmogorovSmirnovDistribution.java	createH	j	int	1	DEF	i - $ + 1 < 0
1090	297	16	KolmogorovSmirnovDistribution.java	createH	i	int	1	DEF	$ - j + 1 < 0
20983	311	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
20983	311	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
20984	318	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
20984	318	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
1091	328	8	KolmogorovSmirnovDistribution.java	createH	h	BigFraction	0	DEF	$.compareTo(BigFraction.ONE_HALF) == 1
20985	343	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
20985	343	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
20986	344	12	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	$ < i + 1
20986	344	12	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	j < $ + 1
1092	345	16	KolmogorovSmirnovDistribution.java	createH	j	int	0	DEF	i - $ + 1 > 0
1092	345	16	KolmogorovSmirnovDistribution.java	createH	i	int	0	DEF	$ - j + 1 > 0
20987	346	20	KolmogorovSmirnovDistribution.java	createH	g	int	0	NIL-FOR	$ <= i - j + 1
20987	346	20	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	g <= i - $ + 1
20987	346	20	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	g <= $ - j + 1
2092	98	8	Kurtosis.java	increment	THIS	Kurtosis	1	DEF	$.incMoment
2093	111	8	Kurtosis.java	getResult	THIS	Kurtosis	0	DEF	$.moment.getN() > 3
2094	113	16	Kurtosis.java	getResult	THIS	Kurtosis	1	DEF	$.moment.$.n <= 3
2094	113	16	Kurtosis.java	getResult	variance	double	1	DEF	$ < 10E-20
2095	131	8	Kurtosis.java	clear	THIS	Kurtosis	1	DEF	$.incMoment
2096	168	8	Kurtosis.java	evaluate	THIS	Kurtosis	0	DEF	$.test(values, begin, length)
2096	168	8	Kurtosis.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2096	168	8	Kurtosis.java	evaluate	begin	int	0	DEF	test(values, $, length)
2096	168	8	Kurtosis.java	evaluate	length	int	0	DEF	test(values, begin, $)
2096	168	8	Kurtosis.java	evaluate	length	int	0	DEF	$ > 3
22132	179	12	Kurtosis.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
22132	179	12	Kurtosis.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
22132	179	12	Kurtosis.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1119	87	8	LUDecomposition.java	LUDecomposition	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
20993	100	8	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
20993	100	8	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
20994	107	8	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	$ < m
20994	107	8	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	col < $
20995	110	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < col
20995	110	12	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	row < $
20996	113	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < row
20996	113	16	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	i < $
20997	122	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
20997	122	12	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
20998	125	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < col
20998	125	16	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	i < $
1120	131	16	LUDecomposition.java	LUDecomposition	sum	double	0	DEF	FastMath.abs($) > largest
1120	131	16	LUDecomposition.java	LUDecomposition	largest	double	0	DEF	FastMath.abs(sum) > $
1121	138	12	LUDecomposition.java	LUDecomposition	THIS	LUDecomposition	0	RET	FastMath.abs($.lu[max][col]) < singularityThreshold
1121	138	12	LUDecomposition.java	LUDecomposition	max	int	0	RET	FastMath.abs(lu[$][col]) < singularityThreshold
1121	138	12	LUDecomposition.java	LUDecomposition	col	int	0	RET	FastMath.abs(lu[max][$]) < singularityThreshold
1121	138	12	LUDecomposition.java	LUDecomposition	singularityThreshold	double	0	RET	FastMath.abs(lu[max][col]) < $
1122	144	12	LUDecomposition.java	LUDecomposition	max	int	0	DEF	$ != col
1122	144	12	LUDecomposition.java	LUDecomposition	col	int	0	DEF	max != $
20999	148	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < m
20999	148	16	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	i < $
21000	161	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
21000	161	12	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
1123	173	8	LUDecomposition.java	getL	THIS	LUDecomposition	0	DEF	$.cachedL == null
1123	173	8	LUDecomposition.java	getL	THIS	LUDecomposition	0	DEF	$.singular
21001	176	12	LUDecomposition.java	getL	i	int	0	NIL-FOR	$ < m
21001	176	12	LUDecomposition.java	getL	m	int	0	NIL-FOR	i < $
21002	178	16	LUDecomposition.java	getL	j	int	0	NIL-FOR	$ < i
21002	178	16	LUDecomposition.java	getL	i	int	0	NIL-FOR	j < $
1124	193	8	LUDecomposition.java	getU	THIS	LUDecomposition	0	DEF	$.singular
1124	193	8	LUDecomposition.java	getU	THIS	LUDecomposition	0	DEF	$.cachedU == null
21003	196	12	LUDecomposition.java	getU	i	int	0	NIL-FOR	$ < m
21003	196	12	LUDecomposition.java	getU	m	int	0	NIL-FOR	i < $
21004	198	16	LUDecomposition.java	getU	j	int	0	NIL-FOR	$ < m
21004	198	16	LUDecomposition.java	getU	m	int	0	NIL-FOR	j < $
1125	216	8	LUDecomposition.java	getP	THIS	LUDecomposition	0	DEF	$.cachedP == null
1125	216	8	LUDecomposition.java	getP	THIS	LUDecomposition	0	DEF	$.singular
21005	219	12	LUDecomposition.java	getP	i	int	0	NIL-FOR	$ < m
21005	219	12	LUDecomposition.java	getP	m	int	0	NIL-FOR	i < $
1126	240	8	LUDecomposition.java	getDeterminant	THIS	LUDecomposition	1	RET	$.singular
21006	245	12	LUDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < m
21006	245	12	LUDecomposition.java	getDeterminant	m	int	0	NIL-FOR	i < $
3339	100	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
3339	100	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3340	106	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
3340	106	8	LaguerreSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3341	111	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
3341	111	8	LaguerreSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
3342	117	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
3342	117	8	LaguerreSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3343	122	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
3343	122	8	LaguerreSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
3344	156	8	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	1	RET	$.complexSolver.isRoot(lo, hi, z)
3344	156	8	LaguerreSolver.java	laguerre	z	Complex	1	RET	complexSolver.isRoot(lo, hi, $)
3344	156	8	LaguerreSolver.java	laguerre	lo	double	1	RET	complexSolver.isRoot($, hi, z)
3344	156	8	LaguerreSolver.java	laguerre	hi	double	1	RET	complexSolver.isRoot(lo, $, z)
22698	162	12	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	NIL-FOR	i < root.$.length
22698	162	12	LaguerreSolver.java	laguerre	i	int	0	NIL-FOR	$ < root.length
22698	162	12	LaguerreSolver.java	laguerre	root	Complex[]	0	NIL-FOR	i < $.length
3345	163	16	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	DEF	$.complexSolver.isRoot(lo, hi, root[i])
3345	163	16	LaguerreSolver.java	laguerre	i	int	0	DEF	complexSolver.isRoot(lo, hi, root[$])
3345	163	16	LaguerreSolver.java	laguerre	root	Complex[]	0	DEF	complexSolver.isRoot(lo, hi, $[i])
3345	163	16	LaguerreSolver.java	laguerre	lo	double	0	DEF	complexSolver.isRoot($, hi, root[i])
3345	163	16	LaguerreSolver.java	laguerre	hi	double	0	DEF	complexSolver.isRoot(lo, $, root[i])
1711	112	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != weights.$.length
1711	112	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != weights.length
1711	112	8	LeastSquaresConverter.java	LeastSquaresConverter	weights	double[]	0	DimensionMismatchException	observations.length != $.length
1712	142	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != scale.getColumnDimension()
1712	142	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != scale.getColumnDimension()
1712	142	8	LeastSquaresConverter.java	LeastSquaresConverter	scale	RealMatrix	0	DimensionMismatchException	observations.length != $.getColumnDimension()
1713	155	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	DimensionMismatchException	residuals.$.length != $.observations.$.length
1713	155	8	LeastSquaresConverter.java	value	residuals	double[]	0	DimensionMismatchException	$.length != observations.length
21821	158	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
21821	158	8	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
21821	158	8	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1714	164	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.weights != null
21822	165	12	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
21822	165	12	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
21822	165	12	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1715	169	15	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.scale != null
3492	219	12	LegendreGaussIntegrator.java	doIntegrate	THIS	LegendreGaussIntegrator	0	RET	$.iterations.getCount() + 1 >= $.getMinimalIterationCount()
3492	219	12	LegendreGaussIntegrator.java	doIntegrate	delta	double	0	RET	$ <= limit
3492	219	12	LegendreGaussIntegrator.java	doIntegrate	limit	double	0	RET	delta <= $
22816	250	8	LegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
22816	250	8	LegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
22817	251	12	LegendreGaussIntegrator.java	stage	THIS	LegendreGaussIntegrator	0	NIL-FOR	j < $.abscissas.$.length
22817	251	12	LegendreGaussIntegrator.java	stage	j	int	0	NIL-FOR	$ < abscissas.length
3472	66	8	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	RET	$ == 1
22801	83	8	LegendreHighPrecisionRuleFactory.java	computeRule	i	int	0	NIL-FOR	$ < iMax
22801	83	8	LegendreHighPrecisionRuleFactory.java	computeRule	iMax	int	0	NIL-FOR	i < $
22802	96	12	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
22802	96	12	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
22803	134	12	LegendreHighPrecisionRuleFactory.java	computeRule	done	boolean	0	NIL-WHILE	$
22804	140	16	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
22804	140	16	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
3473	157	16	LegendreHighPrecisionRuleFactory.java	computeRule	done	boolean	0	DEF	$
3474	158	20	LegendreHighPrecisionRuleFactory.java	computeRule	pa	BigDecimal	1	DEF	$.signum() * pc.signum() <= 0
3474	158	20	LegendreHighPrecisionRuleFactory.java	computeRule	pc	BigDecimal	1	DEF	pa.signum() * $.signum() <= 0
3475	187	8	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	DEF	$ % 2 == 1
22805	189	12	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
22805	189	12	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
3477	38	8	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	RET	$ == 1
22807	55	8	LegendreRuleFactory.java	computeRule	i	int	0	NIL-FOR	$ < iMax
22807	55	8	LegendreRuleFactory.java	computeRule	iMax	int	0	NIL-FOR	i < $
22808	68	12	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
22808	68	12	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
22809	88	12	LegendreRuleFactory.java	computeRule	done	boolean	0	NIL-WHILE	$
22810	92	16	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
22810	92	16	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
3478	99	16	LegendreRuleFactory.java	computeRule	done	boolean	0	DEF	$
3479	100	20	LegendreRuleFactory.java	computeRule	pa	double	1	DEF	$ * pc <= 0
3479	100	20	LegendreRuleFactory.java	computeRule	pc	double	1	DEF	pa * $ <= 0
3480	123	8	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	DEF	$ % 2 == 1
22811	125	12	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
22811	125	12	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
21823	306	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i<$.rows
21823	306	12	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$<rows
21824	319	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
21824	319	12	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
1716	324	12	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
21825	328	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
21825	328	16	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
1717	330	20	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
1718	345	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.cost != 0
21826	346	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
21826	346	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1719	349	20	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
21827	351	24	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
21827	351	24	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
1720	358	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
1720	358	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
21828	366	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
21828	366	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
21829	371	12	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
21830	374	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
21830	374	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
21831	391	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
21831	391	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1721	400	16	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
1722	409	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost < previousCost
1722	409	16	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost < $
21832	416	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
21832	416	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
21833	420	20	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
21833	420	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
21834	425	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
21834	425	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1723	438	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
1724	441	24	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost >= previousCost
1724	441	24	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
1724	441	24	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost >= $
1725	446	23	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
1725	446	23	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
1726	452	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	RET	$ >= 1.0e-4
21835	456	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
21835	456	20	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
1727	464	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$ != null
1728	466	24	LevenbergMarquardtOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	checker.converged(iter, $, current)
1728	466	24	LevenbergMarquardtOptimizer.java	doOptimize	current	PointVectorValuePair	0	RET	checker.converged(iter, previous, $)
1728	466	24	LevenbergMarquardtOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
1728	466	24	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$.converged(iter, previous, current)
21836	473	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
21836	473	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1729	486	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	FastMath.abs(actRed) <= $.costRelativeTolerance
1729	486	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
1729	486	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
1729	486	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	FastMath.abs($) <= costRelativeTolerance
1729	486	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
1729	486	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
1729	486	16	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
1729	486	16	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
1730	495	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	ConvergenceException	FastMath.abs($) <= 2.2204e-16
1730	495	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	ConvergenceException	$ <= 2.2204e-16
1730	495	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	ConvergenceException	$ <= 2.0
1731	498	23	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	ConvergenceException	$ <= 2.2204e-16 * xNorm
1731	498	23	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	ConvergenceException	delta <= 2.2204e-16 * $
1732	501	23	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	ConvergenceException	$ <= 2.2204e-16
21837	536	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.rank
21837	536	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
21838	539	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
21838	539	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < cols
21839	542	8	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
21840	545	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
21840	545	12	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
21841	554	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
21841	554	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1733	562	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
1733	562	8	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1734	572	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.rank == $.solvedCols
21842	573	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
21842	573	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
21843	578	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
21843	578	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
21844	581	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
21844	581	16	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
21845	593	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
21845	593	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
21846	596	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
21846	596	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1735	604	8	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
1736	612	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
21847	616	8	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1737	619	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
21848	623	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
21848	623	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
21849	630	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
21849	630	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1738	642	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1738	642	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1738	642	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1738	642	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	FastMath.abs($) <= 0.1 * delta
1738	642	12	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
1738	642	12	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	FastMath.abs(fp) <= 0.1 * $
21850	648	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
21850	648	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
21851	652	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
21851	652	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
21852	656	16	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
21852	656	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
21853	661	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
21853	661	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1739	668	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
1740	670	19	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
21854	705	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
21854	705	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
21855	707	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
21855	707	12	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
21856	715	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
21856	715	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1741	721	12	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
21857	730	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
21857	730	12	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
1742	735	16	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1742	735	16	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1743	740	20	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	FastMath.abs($) < FastMath.abs(lmDiag[k])
1743	740	20	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	FastMath.abs(rkk) < FastMath.abs(lmDiag[$])
1743	740	20	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	FastMath.abs(rkk) < FastMath.abs($[k])
21858	758	20	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
21858	758	20	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
21859	776	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
21859	776	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1744	777	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing == $.solvedCols
1744	777	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1744	777	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1744	777	12	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1745	780	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing < $.solvedCols
1745	780	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1746	784	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
21860	785	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
21861	788	16	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
21861	788	16	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
21862	796	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
21862	796	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
21863	826	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
21863	826	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
21864	829	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.weightedResidualJacobian.$.length
21864	829	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < weightedResidualJacobian.length
21865	837	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
21865	837	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
21866	842	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.cols
21866	842	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < cols
21867	844	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.weightedResidualJacobian.$.length
21867	844	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < weightedResidualJacobian.length
1747	848	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isInfinite($)
1747	848	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isNaN($)
1748	852	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1748	852	16	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1749	857	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	RET	ak2 <= $.qrRankingThreshold
1749	857	12	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ <= qrRankingThreshold
21868	876	12	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
21869	878	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.weightedResidualJacobian.$.length
21869	878	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < weightedResidualJacobian.length
21870	882	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.weightedResidualJacobian.$.length
21870	882	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < weightedResidualJacobian.length
21871	896	8	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
21871	896	8	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < cols
21872	899	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
21872	899	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
21873	903	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
21873	903	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
648	76	8	Line.java	reset	norm2	double	0	MathIllegalArgumentException	$ == 0.0
649	175	8	Line.java	distance	n	double	0	RET	$ < Precision.SAFE_MIN
650	195	8	Line.java	closestPoint	n	double	0	RET	$ < Precision.EPSILON
732	132	8	Line.java	reset	d	double	1	DEF	$ == 0.0
733	159	8	Line.java	revertSelf	THIS	Line	1	DEF	$.angle < FastMath.PI
734	199	8	Line.java	intersection	d	double	0	RET	FastMath.abs($) < 1.0e-10
21797	128	8	LinearConstraint.java	LinearConstraint	THIS	LinearConstraint	0	NIL-FOR	i < sub.$.length
21797	128	8	LinearConstraint.java	LinearConstraint	i	int	0	NIL-FOR	$ < sub.length
21797	128	8	LinearConstraint.java	LinearConstraint	sub	double[]	0	NIL-FOR	i < $.length
1666	191	6	LinearConstraint.java	equals	THIS	LinearConstraint	0	RET	$ == other
1666	191	6	LinearConstraint.java	equals	other	Object	0	RET	this == $
1667	195	6	LinearConstraint.java	equals	other	Object	0	RET	$ instanceof LinearConstraint
3155	45	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
3155	45	8	LinearInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
3155	45	8	LinearInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
3156	49	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	NumberIsTooSmallException	x.$.length < 2
3156	49	8	LinearInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 2
22604	61	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
22604	61	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
22605	67	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
22605	67	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
1684	108	6	LinearObjectiveFunction.java	equals	THIS	LinearObjectiveFunction	0	RET	$ == other
1684	108	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	this == $
1685	112	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	$ instanceof LinearObjectiveFunction
2552	65	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	NullArgumentException	$ == null
2553	68	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NotPositiveException	$ <= 0
2554	71	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	NumberIsTooLargeException	$.size() > populationLimit
2554	71	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NumberIsTooLargeException	chromosomes.size() > $
2555	91	8	ListPopulation.java	setChromosomes	chromosomes	List<Chromosome>	0	NullArgumentException	$ == null
2556	94	8	ListPopulation.java	setChromosomes	THIS	ListPopulation	0	NumberIsTooLargeException	chromosomes.size() > $.populationLimit
2556	94	8	ListPopulation.java	setChromosomes	chromosomes	List<Chromosome>	0	NumberIsTooLargeException	$.size() > populationLimit
2557	109	8	ListPopulation.java	addChromosomes	THIS	ListPopulation	0	NumberIsTooLargeException	$.chromosomes.size() + chromosomeColl.size() > $.populationLimit
2557	109	8	ListPopulation.java	addChromosomes	chromosomeColl	Collection<Chromosome>	0	NumberIsTooLargeException	chromosomes.size() + $.size() > populationLimit
2558	139	8	ListPopulation.java	addChromosome	THIS	ListPopulation	0	NumberIsTooLargeException	$.chromosomes.size() >= $.populationLimit
2559	154	12	ListPopulation.java	getFittestChromosome	THIS	ListPopulation	0	DEF	$.chromosome.compareTo(bestChromosome) > 0
2559	154	12	ListPopulation.java	getFittestChromosome	bestChromosome	Chromosome	0	DEF	chromosome.compareTo($) > 0
2560	178	8	ListPopulation.java	setPopulationLimit	populationLimit	int	0	NotPositiveException	$ <= 0
2561	181	8	ListPopulation.java	setPopulationLimit	THIS	ListPopulation	0	NumberIsTooSmallException	populationLimit < $.chromosomes.size()
2561	181	8	ListPopulation.java	setPopulationLimit	populationLimit	int	0	NumberIsTooSmallException	$ < chromosomes.size()
3234	147	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ > 1
3234	147	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ < 0
3235	152	8	LoessInterpolator.java	LoessInterpolator	robustnessIters	int	0	NotPositiveException	$ < 0
3236	206	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
3236	206	8	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
3236	206	8	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
3237	212	8	LoessInterpolator.java	smooth	n	int	0	NoDataException	$ == 0
3238	222	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 1
3239	226	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 2
3240	232	8	LoessInterpolator.java	smooth	bandwidthInPoints	int	0	NumberIsTooSmallException	$ < 2
22676	249	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	NIL-FOR	iter <= $.robustnessIters
22676	249	8	LoessInterpolator.java	smooth	iter	int	0	NIL-FOR	$ <= robustnessIters
22677	252	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
22677	252	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
3241	257	16	LoessInterpolator.java	smooth	i	int	0	DEF	$ > 0
3242	267	16	LoessInterpolator.java	smooth	ileft	int	1	DEF	xval[i] - xval[$] > xval[iright] - xval[i]
3242	267	16	LoessInterpolator.java	smooth	iright	int	1	DEF	xval[i] - xval[ileft] > xval[$] - xval[i]
3242	267	16	LoessInterpolator.java	smooth	i	int	1	DEF	xval[$] - xval[ileft] > xval[iright] - xval[$]
3242	267	16	LoessInterpolator.java	smooth	xval	double[]	1	DEF	$[i] - $[ileft] > $[iright] - $[i]
22678	286	16	LoessInterpolator.java	smooth	k	int	0	NIL-FOR	$ <= iright
22678	286	16	LoessInterpolator.java	smooth	iright	int	0	NIL-FOR	k <= $
3243	305	16	LoessInterpolator.java	smooth	THIS	LoessInterpolator	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - meanX * meanX)) < $.accuracy
3243	305	16	LoessInterpolator.java	smooth	meanX	double	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - $ * $)) < accuracy
3243	305	16	LoessInterpolator.java	smooth	meanXSquared	double	1	DEF	FastMath.sqrt(FastMath.abs($ - meanX * meanX)) < accuracy
3244	319	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	iter == $.robustnessIters
3244	319	12	LoessInterpolator.java	smooth	iter	int	0	DEF	$ == robustnessIters
3245	332	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	FastMath.abs(medianResidual) < $.accuracy
3245	332	12	LoessInterpolator.java	smooth	medianResidual	double	0	DEF	FastMath.abs($) < accuracy
22679	336	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
22679	336	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
3246	338	16	LoessInterpolator.java	smooth	arg	double	1	DEF	$ >= 1
3247	368	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
3247	368	8	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
3247	368	8	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
3248	402	8	LoessInterpolator.java	updateBandwidthInterval	THIS	LoessInterpolator	0	DEF	nextRight < xval.$.length
3248	402	8	LoessInterpolator.java	updateBandwidthInterval	left	int	0	DEF	xval[nextRight] - xval[i] < xval[i] - xval[$]
3248	402	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	xval[$] - xval[i] < xval[i] - xval[left]
3248	402	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	$ < xval.length
3248	402	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	$[nextRight] - $[i] < $[i] - $[left]
3248	402	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	nextRight < $.length
3248	402	8	LoessInterpolator.java	updateBandwidthInterval	i	int	0	DEF	xval[nextRight] - xval[$] < xval[$] - xval[left]
22680	419	8	LoessInterpolator.java	nextNonzero	THIS	LoessInterpolator	0	NIL-WHILE	j < weights.$.length
22680	419	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	weights[$] == 0
22680	419	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	$ < weights.length
22680	419	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	$[j] == 0
22680	419	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	j < $.length
3249	435	8	LoessInterpolator.java	tricube	absX	double	0	RET	$ >= 1.0
22681	450	8	LoessInterpolator.java	checkAllFiniteReal	THIS	LoessInterpolator	0	NIL-FOR	i < values.$.length
22681	450	8	LoessInterpolator.java	checkAllFiniteReal	i	int	0	NIL-FOR	$ < values.length
22681	450	8	LoessInterpolator.java	checkAllFiniteReal	values	double[]	0	NIL-FOR	i < $.length
1106	131	8	LogNormalDistribution.java	LogNormalDistribution	shape	double	0	NotStrictlyPositiveException	$ <= 0
1107	170	8	LogNormalDistribution.java	density	x	double	0	RET	$ <= 0
1108	194	8	LogNormalDistribution.java	cumulativeProbability	x	double	0	RET	$ <= 0
1109	198	8	LogNormalDistribution.java	cumulativeProbability	THIS	LogNormalDistribution	0	RET	FastMath.abs(dev) > 40 * $.shape
1109	198	8	LogNormalDistribution.java	cumulativeProbability	dev	double	0	RET	FastMath.abs($) > 40 * shape
1110	220	8	LogNormalDistribution.java	probability	x0	double	0	NumberIsTooLargeException	$ > x1
1110	220	8	LogNormalDistribution.java	probability	x1	double	0	NumberIsTooLargeException	x0 > $
1111	224	8	LogNormalDistribution.java	probability	x0	double	0	RET	$ <= 0
1111	224	8	LogNormalDistribution.java	probability	x1	double	0	RET	$ <= 0
3257	68	8	Logistic.java	Logistic	n	double	0	NotStrictlyPositiveException	$ <= 0
3253	152	8	Logit.java	value	x	double	0	OutOfRangeException	$ > hi
3253	152	8	Logit.java	value	x	double	0	OutOfRangeException	$ < lo
3253	152	8	Logit.java	value	lo	double	0	OutOfRangeException	x < $
3253	152	8	Logit.java	value	hi	double	0	OutOfRangeException	x > $
2196	74	8	MannWhitneyUTest.java	ensureDataConformance	x	double[]	0	NullArgumentException	$ == null
2196	74	8	MannWhitneyUTest.java	ensureDataConformance	y	double[]	0	NullArgumentException	$ == null
2197	78	8	MannWhitneyUTest.java	ensureDataConformance	THIS	MannWhitneyUTest	0	NoDataException	y.$.length == 0
2197	78	8	MannWhitneyUTest.java	ensureDataConformance	THIS	MannWhitneyUTest	0	NoDataException	x.$.length == 0
2197	78	8	MannWhitneyUTest.java	ensureDataConformance	x	double[]	0	NoDataException	$.length == 0
2197	78	8	MannWhitneyUTest.java	ensureDataConformance	y	double[]	0	NoDataException	$.length == 0
22152	140	8	MannWhitneyUTest.java	mannWhitneyU	THIS	MannWhitneyUTest	0	NIL-FOR	i < x.$.length
22152	140	8	MannWhitneyUTest.java	mannWhitneyU	i	int	0	NIL-FOR	$ < x.length
22152	140	8	MannWhitneyUTest.java	mannWhitneyU	x	double[]	0	NIL-FOR	i < $.length
20874	57	8	MathArrays.java	distance1	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
20874	57	8	MathArrays.java	distance1	i	int	0	NIL-FOR	$ < p1.length
20874	57	8	MathArrays.java	distance1	p1	double[]	0	NIL-FOR	i < $.length
20875	72	6	MathArrays.java	distance1	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
20875	72	6	MathArrays.java	distance1	i	int	0	NIL-FOR	$ < p1.length
20875	72	6	MathArrays.java	distance1	p1	int[]	0	NIL-FOR	i < $.length
20876	87	8	MathArrays.java	distance	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
20876	87	8	MathArrays.java	distance	i	int	0	NIL-FOR	$ < p1.length
20876	87	8	MathArrays.java	distance	p1	double[]	0	NIL-FOR	i < $.length
20877	103	6	MathArrays.java	distance	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
20877	103	6	MathArrays.java	distance	i	int	0	NIL-FOR	$ < p1.length
20877	103	6	MathArrays.java	distance	p1	int[]	0	NIL-FOR	i < $.length
20878	119	8	MathArrays.java	distanceInf	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
20878	119	8	MathArrays.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
20878	119	8	MathArrays.java	distanceInf	p1	double[]	0	NIL-FOR	i < $.length
20879	134	8	MathArrays.java	distanceInf	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
20879	134	8	MathArrays.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
20879	134	8	MathArrays.java	distanceInf	p1	int[]	0	NIL-FOR	i < $.length
20880	164	8	MathArrays.java	isMonotonic	i	int	0	NIL-FOR	$ < max
20880	164	8	MathArrays.java	isMonotonic	max	int	0	NIL-FOR	i < $
107	169	16	MathArrays.java	isMonotonic	strict	boolean	1	RET	$
108	170	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ >= 0
109	174	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ > 0
110	181	16	MathArrays.java	isMonotonic	strict	boolean	1	RET	$
111	182	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ >= 0
112	186	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ > 0
20881	233	8	MathArrays.java	checkOrder	max	int	0	NIL-FOR	index < $
20881	233	8	MathArrays.java	checkOrder	index	int	0	NIL-FOR	$ < max
113	236	16	MathArrays.java	checkOrder	strict	boolean	1	DEF	$
114	237	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] <= $
114	237	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] <= previous
114	237	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] <= previous
115	241	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] < $
115	241	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] < previous
115	241	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] < previous
116	247	16	MathArrays.java	checkOrder	strict	boolean	1	DEF	$
117	248	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] >= $
117	248	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] >= previous
117	248	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] >= previous
118	252	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] > $
118	252	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] > previous
118	252	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] > previous
119	265	8	MathArrays.java	checkOrder	max	int	0	RET	index == $
119	265	8	MathArrays.java	checkOrder	index	int	0	RET	$ == max
120	271	8	MathArrays.java	checkOrder	abort	boolean	1	NonMonotonicSequenceException	$
20882	373	8	MathArrays.java	safeNorm	THIS	MathArrays	0	NIL-FOR	i < v.$.length
20882	373	8	MathArrays.java	safeNorm	i	int	0	NIL-FOR	$ < v.length
20882	373	8	MathArrays.java	safeNorm	v	double[]	0	NIL-FOR	i < $.length
121	375	12	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > agiant
121	375	12	MathArrays.java	safeNorm	xabs	double	1	DEF	$ < rdwarf
121	375	12	MathArrays.java	safeNorm	rdwarf	double	1	DEF	xabs < $
121	375	12	MathArrays.java	safeNorm	agiant	double	1	DEF	xabs > $
122	376	16	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > rdwarf
122	376	16	MathArrays.java	safeNorm	rdwarf	double	1	DEF	xabs > $
123	377	20	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > x1max
123	377	20	MathArrays.java	safeNorm	x1max	double	1	DEF	xabs > $
124	386	20	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > x3max
124	386	20	MathArrays.java	safeNorm	x3max	double	1	DEF	xabs > $
125	391	24	MathArrays.java	safeNorm	xabs	double	0	DEF	$ != 0
126	402	8	MathArrays.java	safeNorm	s1	double	1	DEF	$ != 0
127	405	12	MathArrays.java	safeNorm	s2	double	1	DEF	$ == 0
128	408	16	MathArrays.java	safeNorm	s2	double	1	DEF	$ >= x3max
128	408	16	MathArrays.java	safeNorm	x3max	double	1	DEF	s2 >= $
129	459	8	MathArrays.java	sortInPlace	x	double[]	0	NullArgumentException	$ == null
20883	468	8	MathArrays.java	sortInPlace	i	int	0	NIL-FOR	$ < len
20883	468	8	MathArrays.java	sortInPlace	len	int	0	NIL-FOR	i < $
20884	470	12	MathArrays.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
20884	470	12	MathArrays.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
130	472	16	MathArrays.java	sortInPlace	y	double[]	0	NullArgumentException	$ == null
131	475	16	MathArrays.java	sortInPlace	THIS	MathArrays	0	DimensionMismatchException	y.$.length != len
131	475	16	MathArrays.java	sortInPlace	y	double[]	0	DimensionMismatchException	$.length != len
131	475	16	MathArrays.java	sortInPlace	len	int	0	DimensionMismatchException	y.length != $
20885	505	8	MathArrays.java	sortInPlace	i	int	0	NIL-FOR	$ < len
20885	505	8	MathArrays.java	sortInPlace	len	int	0	NIL-FOR	i < $
20886	509	12	MathArrays.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
20886	509	12	MathArrays.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
132	583	8	MathArrays.java	linearCombination	THIS	MathArrays	0	DimensionMismatchException	len != b.$.length
132	583	8	MathArrays.java	linearCombination	len	int	0	DimensionMismatchException	$ != b.length
132	583	8	MathArrays.java	linearCombination	b	double[]	0	DimensionMismatchException	len != $.length
20887	590	8	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < len
20887	590	8	MathArrays.java	linearCombination	len	int	0	NIL-FOR	i < $
20888	616	8	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < lenMinusOne
20888	616	8	MathArrays.java	linearCombination	lenMinusOne	int	0	NIL-FOR	i < $
133	626	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
20889	630	12	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < len
20889	630	12	MathArrays.java	linearCombination	len	int	0	NIL-FOR	i < $
134	706	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
135	803	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
136	922	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
137	942	8	MathArrays.java	equals	x	float[]	0	RET	$ == null
137	942	8	MathArrays.java	equals	y	float[]	0	RET	$ == null
138	945	8	MathArrays.java	equals	THIS	MathArrays	0	RET	x.$.length != y.$.length
138	945	8	MathArrays.java	equals	x	float[]	0	RET	$.length != y.length
138	945	8	MathArrays.java	equals	y	float[]	0	RET	x.length != $.length
20890	948	8	MathArrays.java	equals	THIS	MathArrays	0	NIL-FOR	i < x.$.length
20890	948	8	MathArrays.java	equals	i	int	0	NIL-FOR	$ < x.length
20890	948	8	MathArrays.java	equals	x	float[]	0	NIL-FOR	i < $.length
139	949	12	MathArrays.java	equals	i	int	0	RET	Precision.equals(x[$], y[$])
139	949	12	MathArrays.java	equals	x	float[]	0	RET	Precision.equals($[i], y[i])
139	949	12	MathArrays.java	equals	y	float[]	0	RET	Precision.equals(x[i], $[i])
140	968	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	$ == null
140	968	8	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	$ == null
141	971	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	RET	x.$.length != y.$.length
141	971	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	$.length != y.length
141	971	8	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	x.length != $.length
20891	974	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	NIL-FOR	i < x.$.length
20891	974	8	MathArrays.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
20891	974	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	NIL-FOR	i < $.length
142	975	12	MathArrays.java	equalsIncludingNaN	i	int	0	RET	Precision.equalsIncludingNaN(x[$], y[$])
142	975	12	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	Precision.equalsIncludingNaN($[i], y[i])
142	975	12	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	Precision.equalsIncludingNaN(x[i], $[i])
143	993	8	MathArrays.java	equals	x	double[]	0	RET	$ == null
143	993	8	MathArrays.java	equals	y	double[]	0	RET	$ == null
144	996	8	MathArrays.java	equals	THIS	MathArrays	0	RET	x.$.length != y.$.length
144	996	8	MathArrays.java	equals	x	double[]	0	RET	$.length != y.length
144	996	8	MathArrays.java	equals	y	double[]	0	RET	x.length != $.length
20892	999	8	MathArrays.java	equals	THIS	MathArrays	0	NIL-FOR	i < x.$.length
20892	999	8	MathArrays.java	equals	i	int	0	NIL-FOR	$ < x.length
20892	999	8	MathArrays.java	equals	x	double[]	0	NIL-FOR	i < $.length
145	1000	12	MathArrays.java	equals	i	int	0	RET	Precision.equals(x[$], y[$])
145	1000	12	MathArrays.java	equals	x	double[]	0	RET	Precision.equals($[i], y[i])
145	1000	12	MathArrays.java	equals	y	double[]	0	RET	Precision.equals(x[i], $[i])
146	1019	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	$ == null
146	1019	8	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	$ == null
147	1022	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	RET	x.$.length != y.$.length
147	1022	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	$.length != y.length
147	1022	8	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	x.length != $.length
20893	1025	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	NIL-FOR	i < x.$.length
20893	1025	8	MathArrays.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
20893	1025	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	NIL-FOR	i < $.length
148	1026	12	MathArrays.java	equalsIncludingNaN	i	int	0	RET	Precision.equalsIncludingNaN(x[$], y[$])
148	1026	12	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	Precision.equalsIncludingNaN($[i], y[i])
148	1026	12	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	Precision.equalsIncludingNaN(x[i], $[i])
149	1056	9	MathArrays.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isInfinite($)
150	1059	9	MathArrays.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isNaN($)
20894	1065	9	MathArrays.java	normalizeArray	i	int	0	NIL-FOR	$ < len
20894	1065	9	MathArrays.java	normalizeArray	len	int	0	NIL-FOR	i < $
151	1066	13	MathArrays.java	normalizeArray	i	int	0	MathIllegalArgumentException	Double.isInfinite(values[$])
151	1066	13	MathArrays.java	normalizeArray	values	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
152	1069	13	MathArrays.java	normalizeArray	i	int	0	DEF	Double.isNaN(values[$])
152	1069	13	MathArrays.java	normalizeArray	values	double[]	0	DEF	Double.isNaN($[i])
153	1073	9	MathArrays.java	normalizeArray	sum	double	0	MathArithmeticException	$ == 0
20895	1076	9	MathArrays.java	normalizeArray	i	int	0	NIL-FOR	$ < len
20895	1076	9	MathArrays.java	normalizeArray	len	int	0	NIL-FOR	i < $
154	1077	13	MathArrays.java	normalizeArray	i	int	1	DEF	Double.isNaN(values[$])
154	1077	13	MathArrays.java	normalizeArray	values	double[]	1	DEF	Double.isNaN($[i])
493	128	8	MathUtils.java	copySign	magnitude	byte	1	RET	$ >= 0
493	128	8	MathUtils.java	copySign	magnitude	byte	1	RET	$ < 0
493	128	8	MathUtils.java	copySign	sign	byte	1	RET	$ >= 0
493	128	8	MathUtils.java	copySign	sign	byte	1	RET	$ < 0
494	131	15	MathUtils.java	copySign	magnitude	byte	1	MathArithmeticException	$ == Byte.MIN_VALUE
494	131	15	MathUtils.java	copySign	sign	byte	1	MathArithmeticException	$ >= 0
495	150	8	MathUtils.java	copySign	magnitude	short	1	RET	$ >= 0
495	150	8	MathUtils.java	copySign	magnitude	short	1	RET	$ < 0
495	150	8	MathUtils.java	copySign	sign	short	1	RET	$ >= 0
495	150	8	MathUtils.java	copySign	sign	short	1	RET	$ < 0
496	153	15	MathUtils.java	copySign	magnitude	short	1	MathArithmeticException	$ == Short.MIN_VALUE
496	153	15	MathUtils.java	copySign	sign	short	1	MathArithmeticException	$ >= 0
497	172	8	MathUtils.java	copySign	magnitude	int	1	RET	$ >= 0
497	172	8	MathUtils.java	copySign	magnitude	int	1	RET	$ < 0
497	172	8	MathUtils.java	copySign	sign	int	1	RET	$ < 0
497	172	8	MathUtils.java	copySign	sign	int	1	RET	$ >= 0
498	175	15	MathUtils.java	copySign	magnitude	int	1	MathArithmeticException	$ == Integer.MIN_VALUE
498	175	15	MathUtils.java	copySign	sign	int	1	MathArithmeticException	$ >= 0
499	194	8	MathUtils.java	copySign	magnitude	long	1	RET	$ >= 0
499	194	8	MathUtils.java	copySign	magnitude	long	1	RET	$ < 0
499	194	8	MathUtils.java	copySign	sign	long	1	RET	$ < 0
499	194	8	MathUtils.java	copySign	sign	long	1	RET	$ >= 0
500	197	15	MathUtils.java	copySign	magnitude	long	1	MathArithmeticException	$ == Long.MIN_VALUE
500	197	15	MathUtils.java	copySign	sign	long	1	MathArithmeticException	$ >= 0
501	212	8	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
501	212	8	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
20918	225	8	MathUtils.java	checkFinite	THIS	MathUtils	0	NIL-FOR	i < val.$.length
20918	225	8	MathUtils.java	checkFinite	i	int	0	NIL-FOR	$ < val.length
20918	225	8	MathUtils.java	checkFinite	val	double[]	0	NIL-FOR	i < $.length
502	227	12	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
502	227	12	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
503	244	8	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
504	257	8	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
1390	128	8	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$ == null
1390	128	8	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$[0] == null
1391	156	8	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$[0] == null
1391	156	8	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$ == null
21462	174	8	MatrixUtils.java	createRealIdentityMatrix	i	int	0	NIL-FOR	$ < dimension
21462	174	8	MatrixUtils.java	createRealIdentityMatrix	dimension	int	0	NIL-FOR	i < $
21463	196	8	MatrixUtils.java	createFieldIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
21463	196	8	MatrixUtils.java	createFieldIdentityMatrix	dimension	int	0	NIL-FOR	row < $
21464	214	8	MatrixUtils.java	createRealDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
21464	214	8	MatrixUtils.java	createRealDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
21464	214	8	MatrixUtils.java	createRealDiagonalMatrix	diagonal	double[]	0	NIL-FOR	i < $.length
21465	233	8	MatrixUtils.java	createFieldDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
21465	233	8	MatrixUtils.java	createFieldDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
21465	233	8	MatrixUtils.java	createFieldDiagonalMatrix	diagonal	T[]	0	NIL-FOR	i < $.length
1392	248	8	MatrixUtils.java	createRealVector	data	double[]	0	NullArgumentException	$ == null
1393	265	8	MatrixUtils.java	createFieldVector	data	T[]	0	NullArgumentException	$ == null
1394	268	8	MatrixUtils.java	createFieldVector	THIS	MatrixUtils	0	ZeroException	data.$.length == 0
1394	268	8	MatrixUtils.java	createFieldVector	data	T[]	0	ZeroException	$.length == 0
1395	284	8	MatrixUtils.java	createRowRealMatrix	rowData	double[]	0	NullArgumentException	$ == null
21466	289	8	MatrixUtils.java	createRowRealMatrix	i	int	0	NIL-FOR	$ < nCols
21466	289	8	MatrixUtils.java	createRowRealMatrix	nCols	int	0	NIL-FOR	i < $
1396	307	8	MatrixUtils.java	createRowFieldMatrix	rowData	T[]	0	NullArgumentException	$ == null
1397	311	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
21467	315	8	MatrixUtils.java	createRowFieldMatrix	i	int	0	NIL-FOR	$ < nCols
21467	315	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NIL-FOR	i < $
1398	331	8	MatrixUtils.java	createColumnRealMatrix	columnData	double[]	0	NullArgumentException	$ == null
21468	336	8	MatrixUtils.java	createColumnRealMatrix	i	int	0	NIL-FOR	$ < nRows
21468	336	8	MatrixUtils.java	createColumnRealMatrix	nRows	int	0	NIL-FOR	i < $
1399	354	8	MatrixUtils.java	createColumnFieldMatrix	columnData	T[]	0	NullArgumentException	$ == null
1400	358	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NoDataException	$ == 0
21469	362	8	MatrixUtils.java	createColumnFieldMatrix	i	int	0	NIL-FOR	$ < nRows
21469	362	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NIL-FOR	i < $
1401	391	8	MatrixUtils.java	checkRowIndex	m	AnyMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1401	391	8	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1401	391	8	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= m.getRowDimension()
1402	406	8	MatrixUtils.java	checkColumnIndex	m	AnyMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1402	406	8	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= m.getColumnDimension()
1402	406	8	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1403	430	8	MatrixUtils.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1403	430	8	MatrixUtils.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1404	437	8	MatrixUtils.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1404	437	8	MatrixUtils.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1405	461	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1406	464	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1407	467	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedRows.$.length == 0
1407	467	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1408	470	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedColumns.$.length == 0
1408	470	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1409	490	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1409	490	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1409	490	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1409	490	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1410	505	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1410	505	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1410	505	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1410	505	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1411	520	8	MatrixUtils.java	checkMultiplicationCompatible	left	AnyMatrix	0	DimensionMismatchException	$.getColumnDimension() != right.getRowDimension()
1411	520	8	MatrixUtils.java	checkMultiplicationCompatible	right	AnyMatrix	0	DimensionMismatchException	left.getColumnDimension() != $.getRowDimension()
21470	659	8	MatrixUtils.java	serializeRealVector	i	int	0	NIL-FOR	$ < n
21470	659	8	MatrixUtils.java	serializeRealVector	n	int	0	NIL-FOR	i < $
21471	690	12	MatrixUtils.java	deserializeRealVector	i	int	0	NIL-FOR	$ < n
21471	690	12	MatrixUtils.java	deserializeRealVector	n	int	0	NIL-FOR	i < $
21472	762	8	MatrixUtils.java	serializeRealMatrix	i	int	0	NIL-FOR	$ < n
21472	762	8	MatrixUtils.java	serializeRealMatrix	n	int	0	NIL-FOR	i < $
21473	763	12	MatrixUtils.java	serializeRealMatrix	j	int	0	NIL-FOR	$ < m
21473	763	12	MatrixUtils.java	serializeRealMatrix	m	int	0	NIL-FOR	j < $
21474	796	12	MatrixUtils.java	deserializeRealMatrix	i	int	0	NIL-FOR	$ < n
21474	796	12	MatrixUtils.java	deserializeRealMatrix	n	int	0	NIL-FOR	i < $
21475	798	16	MatrixUtils.java	deserializeRealMatrix	j	int	0	NIL-FOR	$ < m
21475	798	16	MatrixUtils.java	deserializeRealMatrix	m	int	0	NIL-FOR	j < $
1412	839	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$ == null
1412	839	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$.getRowDimension() != b.getDimension()
1412	839	8	MatrixUtils.java	solveLowerTriangularSystem	b	RealVector	0	MathIllegalArgumentException	$ == null
1412	839	8	MatrixUtils.java	solveLowerTriangularSystem	b	RealVector	0	MathIllegalArgumentException	rm.getRowDimension() != $.getDimension()
1413	844	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$.getColumnDimension() != $.getRowDimension()
21476	850	8	MatrixUtils.java	solveLowerTriangularSystem	i	int	0	NIL-FOR	$ < rows
21476	850	8	MatrixUtils.java	solveLowerTriangularSystem	rows	int	0	NIL-FOR	i < $
1414	852	12	MatrixUtils.java	solveLowerTriangularSystem	diag	double	0	MathArithmeticException	FastMath.abs($) < Precision.SAFE_MIN
21477	857	12	MatrixUtils.java	solveLowerTriangularSystem	j	int	0	NIL-FOR	$< rows
21477	857	12	MatrixUtils.java	solveLowerTriangularSystem	rows	int	0	NIL-FOR	j< $
1415	879	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$.getRowDimension() != b.getDimension()
1415	879	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$ == null
1415	879	8	MatrixUtils.java	solveUpperTriangularSystem	b	RealVector	0	MathIllegalArgumentException	$ == null
1415	879	8	MatrixUtils.java	solveUpperTriangularSystem	b	RealVector	0	MathIllegalArgumentException	rm.getRowDimension() != $.getDimension()
1416	884	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$.getColumnDimension() != $.getRowDimension()
21478	890	8	MatrixUtils.java	solveUpperTriangularSystem	i	int	0	NIL-FOR	$ >-1
1417	892	12	MatrixUtils.java	solveUpperTriangularSystem	diag	double	0	MathArithmeticException	FastMath.abs($) < Precision.SAFE_MIN
21479	897	12	MatrixUtils.java	solveUpperTriangularSystem	j	int	0	NIL-FOR	$>-1
2144	76	8	Max.java	increment	THIS	Max	0	DEF	d > $.value
2144	76	8	Max.java	increment	THIS	Max	0	DEF	Double.isNaN($.value)
2144	76	8	Max.java	increment	d	double	0	DEF	$ > value
2145	131	8	Max.java	evaluate	THIS	Max	0	DEF	$.test(values, begin, length)
2145	131	8	Max.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2145	131	8	Max.java	evaluate	begin	int	0	DEF	test(values, $, length)
2145	131	8	Max.java	evaluate	length	int	0	DEF	test(values, begin, $)
22138	133	12	Max.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
22138	133	12	Max.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
22138	133	12	Max.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2146	134	16	Max.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
2146	134	16	Max.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
2073	109	8	Mean.java	increment	THIS	Mean	0	DEF	$.incMoment
2074	119	8	Mean.java	clear	THIS	Mean	0	DEF	$.incMoment
2075	157	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, begin, length)
2075	157	8	Mean.java	evaluate	values	double[]	0	RET	test($, begin, length)
2075	157	8	Mean.java	evaluate	begin	int	0	RET	test(values, $, length)
2075	157	8	Mean.java	evaluate	length	int	0	RET	test(values, begin, $)
22124	166	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
22124	166	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
22124	166	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2076	205	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, weights, begin, length)
2076	205	8	Mean.java	evaluate	values	double[]	0	RET	test($, weights, begin, length)
2076	205	8	Mean.java	evaluate	weights	double[]	0	RET	test(values, $, begin, length)
2076	205	8	Mean.java	evaluate	begin	int	0	RET	test(values, weights, $, length)
2076	205	8	Mean.java	evaluate	length	int	0	RET	test(values, weights, begin, $)
22125	214	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
22125	214	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
22125	214	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
22316	147	8	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	NIL-FOR	$.mti < N
2519	167	8	MersenneTwister.java	setSeed	seed	int[]	0	RET	$ == null
22317	176	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
2520	182	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
2521	186	12	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	DEF	j >= seed.$.length
2521	186	12	MersenneTwister.java	setSeed	j	int	0	DEF	$ >= seed.length
2521	186	12	MersenneTwister.java	setSeed	seed	int[]	0	DEF	j >= $.length
22318	191	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
2522	197	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
2523	233	8	MersenneTwister.java	next	THIS	MersenneTwister	0	DEF	$.mti >= N
22319	235	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - M
22320	241	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - 1
3193	151	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$ == null
3193	151	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	NullArgumentException	$ == null
3194	155	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NoDataException	xval.$.length == 0
3194	155	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NoDataException	$.length == 0
3195	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xval.$.length != yval.$.length
3195	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	DimensionMismatchException	$.length != yval.length
3195	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	DimensionMismatchException	xval.length != $.length
3196	161	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$[0] == null
22629	170	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NIL-FOR	i < xval.$.length
22629	170	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < xval.length
22629	170	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NIL-FOR	i < $.length
3197	172	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	NullArgumentException	$ == null
3198	175	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xvalI.$.length != $.dimension
3198	175	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	DimensionMismatchException	$.length != dimension
22630	185	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < microsphereElements
22630	185	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	microsphereElements	int	0	NIL-FOR	i < $
3199	209	12	MicrosphereInterpolatingFunction.java	value	diffNorm	double	0	RET	FastMath.abs($) < FastMath.ulp(1d)
3200	228	12	MicrosphereInterpolatingFunction.java	value	sd	Entry<RealVector,Double>	0	DEF	$ != null
3227	72	8	MicrosphereInterpolator.java	MicrosphereInterpolator	exponent	int	0	NotPositiveException	$ < 0
3228	75	8	MicrosphereInterpolator.java	MicrosphereInterpolator	elements	int	0	NotStrictlyPositiveException	$ <= 0
2758	92	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	1	DEF	$.previousState != null
2758	92	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
22489	95	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
22489	95	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
22490	104	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
22490	104	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2300	100	8	MillerUpdatingRegression.java	MillerUpdatingRegression	numberOfVariables	int	0	ModelSpecificationException	$ < 1
2301	103	8	MillerUpdatingRegression.java	MillerUpdatingRegression	includeConstant	boolean	1	DEF	$
22217	120	8	MillerUpdatingRegression.java	MillerUpdatingRegression	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
22217	120	8	MillerUpdatingRegression.java	MillerUpdatingRegression	i	int	0	NIL-FOR	$ < this.nvars
2302	123	8	MillerUpdatingRegression.java	MillerUpdatingRegression	errorTolerance	double	1	DEF	$ > 0
2303	165	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length + 1 != $.nvars
2303	165	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.hasIntercept
2303	165	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.hasIntercept
2303	165	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length != $.nvars
2303	165	8	MillerUpdatingRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length + 1 != nvars
2303	165	8	MillerUpdatingRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length != nvars
2304	170	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	1	DEF	$.hasIntercept
2305	190	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length != y.$.length
2305	190	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$ == null
2305	190	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length != y.length
2305	190	8	MillerUpdatingRegression.java	addObservations	y	double[]	0	ModelSpecificationException	$ == null
2305	190	8	MillerUpdatingRegression.java	addObservations	y	double[]	0	ModelSpecificationException	x.length != $.length
2306	196	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length == 0
2306	196	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length == 0
2307	200	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x[0].length + 1 > x.$.length
2307	200	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$[0].length + 1 > $.length
22218	205	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	NIL-FOR	i < x.$.length
22218	205	8	MillerUpdatingRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
22218	205	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
22219	237	8	MillerUpdatingRegression.java	include	THIS	MillerUpdatingRegression	0	NIL-FOR	i < x.$.length
22219	237	8	MillerUpdatingRegression.java	include	i	int	0	NIL-FOR	$ < x.length
22219	237	8	MillerUpdatingRegression.java	include	x	double[]	0	NIL-FOR	i < $.length
2308	238	12	MillerUpdatingRegression.java	include	w	double	0	RET	$ == 0.0
2309	243	12	MillerUpdatingRegression.java	include	xi	double	0	DEF	$ == 0.0
2310	250	12	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2311	253	16	MillerUpdatingRegression.java	include	tmp	double	0	DEF	FastMath.abs($) > Precision.EPSILON
22220	261	12	MillerUpdatingRegression.java	include	THIS	MillerUpdatingRegression	0	NIL-FOR	k < $.nvars
22220	261	12	MillerUpdatingRegression.java	include	k	int	0	NIL-FOR	$ < nvars
2312	264	16	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2313	273	12	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2314	292	8	MillerUpdatingRegression.java	smartAdd	_a	double	1	RET	$ > _b
2314	292	8	MillerUpdatingRegression.java	smartAdd	_b	double	1	RET	_a > $
2315	294	12	MillerUpdatingRegression.java	smartAdd	eps	double	0	RET	_b > $
2315	294	12	MillerUpdatingRegression.java	smartAdd	_b	double	0	RET	$ > eps
2316	300	12	MillerUpdatingRegression.java	smartAdd	eps	double	0	RET	_a > $
2316	300	12	MillerUpdatingRegression.java	smartAdd	_a	double	0	RET	$ > eps
22221	321	8	MillerUpdatingRegression.java	clear	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
22221	321	8	MillerUpdatingRegression.java	clear	i	int	0	NIL-FOR	$ < nvars
22222	339	8	MillerUpdatingRegression.java	tolset	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
22222	339	8	MillerUpdatingRegression.java	tolset	i	int	0	NIL-FOR	$ < nvars
22223	343	8	MillerUpdatingRegression.java	tolset	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
22223	343	8	MillerUpdatingRegression.java	tolset	col	int	0	NIL-FOR	$ < nvars
22224	346	12	MillerUpdatingRegression.java	tolset	row	int	0	NIL-FOR	$ < col
22224	346	12	MillerUpdatingRegression.java	tolset	col	int	0	NIL-FOR	row < $
2317	366	8	MillerUpdatingRegression.java	regcf	nreq	int	0	ModelSpecificationException	$ < 1
2318	369	8	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	ModelSpecificationException	nreq > $.nvars
2318	369	8	MillerUpdatingRegression.java	regcf	nreq	int	0	ModelSpecificationException	$ > this.nvars
2319	373	8	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	DEF	$.tol_set
22225	378	8	MillerUpdatingRegression.java	regcf	i	int	0	NIL-FOR	$ > -1
2320	379	12	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	1	DEF	Math.sqrt($.d[i]) < $.tol[i]
2320	379	12	MillerUpdatingRegression.java	regcf	i	int	1	DEF	Math.sqrt(d[$]) < tol[$]
22226	386	16	MillerUpdatingRegression.java	regcf	j	int	0	NIL-FOR	$ < nreq
22226	386	16	MillerUpdatingRegression.java	regcf	nreq	int	0	NIL-FOR	j < $
2321	392	8	MillerUpdatingRegression.java	regcf	rankProblem	boolean	0	DEF	$
22227	393	12	MillerUpdatingRegression.java	regcf	i	int	0	NIL-FOR	$ < nreq
22227	393	12	MillerUpdatingRegression.java	regcf	nreq	int	0	NIL-FOR	i < $
2322	394	16	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2322	394	16	MillerUpdatingRegression.java	regcf	i	int	0	DEF	this.lindep[$]
22228	411	8	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
22228	411	8	MillerUpdatingRegression.java	singcheck	i	int	0	NIL-FOR	$ < nvars
22229	414	8	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
22229	414	8	MillerUpdatingRegression.java	singcheck	col	int	0	NIL-FOR	$ < nvars
22230	420	12	MillerUpdatingRegression.java	singcheck	row	int	0	NIL-FOR	$ < col - 1
22230	420	12	MillerUpdatingRegression.java	singcheck	col	int	0	NIL-FOR	row < $ - 1
2323	421	16	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	DEF	Math.abs($.r[pos]) * $.work_sing[row] < temp
2323	421	16	MillerUpdatingRegression.java	singcheck	row	int	0	DEF	Math.abs(r[pos]) * work_sing[$] < temp
2323	421	16	MillerUpdatingRegression.java	singcheck	temp	double	0	DEF	Math.abs(r[pos]) * work_sing[row] < $
2323	421	16	MillerUpdatingRegression.java	singcheck	pos	int	0	DEF	Math.abs(r[$]) * work_sing[row] < temp
2324	430	12	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	DEF	$.work_sing[col] < temp
2324	430	12	MillerUpdatingRegression.java	singcheck	col	int	0	DEF	work_sing[$] < temp
2324	430	12	MillerUpdatingRegression.java	singcheck	temp	double	0	DEF	work_sing[col] < $
2325	432	16	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	1	DEF	col < $.nvars - 1
2325	432	16	MillerUpdatingRegression.java	singcheck	col	int	1	DEF	$ < nvars - 1
22231	435	20	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	_xi < $.nvars
22231	435	20	MillerUpdatingRegression.java	singcheck	_xi	int	0	NIL-FOR	$ < nvars
22232	463	8	MillerUpdatingRegression.java	ss	i	int	0	NIL-FOR	$ > 0
2326	489	8	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	RET	$.nobs <= nreq
2326	489	8	MillerUpdatingRegression.java	cov	nreq	int	0	RET	this.nobs <= $
22233	493	8	MillerUpdatingRegression.java	cov	i	int	0	NIL-FOR	$ < nreq
22233	493	8	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	i < $
2327	494	12	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2327	494	12	MillerUpdatingRegression.java	cov	i	int	0	DEF	this.lindep[$]
22234	507	8	MillerUpdatingRegression.java	cov	row	int	0	NIL-FOR	$ < nreq
22234	507	8	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	row < $
2328	509	12	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[row]
2328	509	12	MillerUpdatingRegression.java	cov	row	int	0	DEF	this.lindep[$]
22235	510	16	MillerUpdatingRegression.java	cov	col	int	0	NIL-FOR	$ < nreq
22235	510	16	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	col < $
2329	511	20	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	1	DEF	$.lindep[col]
2329	511	20	MillerUpdatingRegression.java	cov	col	int	1	DEF	this.lindep[$]
2330	513	24	MillerUpdatingRegression.java	cov	col	int	1	DEF	row == $
2330	513	24	MillerUpdatingRegression.java	cov	row	int	1	DEF	$ == col
22236	518	24	MillerUpdatingRegression.java	cov	k	int	0	NIL-FOR	$ < nreq
22236	518	24	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	k < $
2331	519	28	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[k]
2331	519	28	MillerUpdatingRegression.java	cov	k	int	0	DEF	this.lindep[$]
22237	550	8	MillerUpdatingRegression.java	inverse	row	int	0	NIL-FOR	$ > 0
2332	551	12	MillerUpdatingRegression.java	inverse	THIS	MillerUpdatingRegression	1	DEF	$.lindep[row]
2332	551	12	MillerUpdatingRegression.java	inverse	row	int	1	DEF	this.lindep[$]
22238	553	16	MillerUpdatingRegression.java	inverse	col	int	0	NIL-FOR	$ > row
22238	553	16	MillerUpdatingRegression.java	inverse	row	int	0	NIL-FOR	col > $
22239	557	20	MillerUpdatingRegression.java	inverse	k	int	0	NIL-FOR	$ < col - 1
22239	557	20	MillerUpdatingRegression.java	inverse	col	int	0	NIL-FOR	k < $ - 1
2333	559	24	MillerUpdatingRegression.java	inverse	THIS	MillerUpdatingRegression	0	DEF	$.lindep[k]
2333	559	24	MillerUpdatingRegression.java	inverse	k	int	0	DEF	this.lindep[$]
2334	620	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	RET	in >= $.nvars
2334	620	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	RET	$ < -1
2334	620	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	RET	$ >= nvars
2335	625	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	DEF	$.d[in] > 0.0
2335	625	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	DEF	d[$] > 0.0
22240	628	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
22240	628	8	MillerUpdatingRegression.java	getPartialCorrelations	col	int	0	NIL-FOR	$ < nvars
22241	631	12	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < col
22241	631	12	MillerUpdatingRegression.java	getPartialCorrelations	col	int	0	NIL-FOR	row < $
2336	635	12	MillerUpdatingRegression.java	getPartialCorrelations	sumxx	double	1	DEF	$ > 0.0
22242	642	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	row < $.nvars
22242	642	8	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < nvars
2337	645	8	MillerUpdatingRegression.java	getPartialCorrelations	sumyy	double	0	DEF	$ > 0.0
22243	649	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col1 < $.nvars
22243	649	8	MillerUpdatingRegression.java	getPartialCorrelations	col1	int	0	NIL-FOR	$ < nvars
22244	653	12	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < col1
22244	653	12	MillerUpdatingRegression.java	getPartialCorrelations	col1	int	0	NIL-FOR	row < $
22245	655	16	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col2 < $.nvars
22245	655	16	MillerUpdatingRegression.java	getPartialCorrelations	col2	int	0	NIL-FOR	$ < nvars
22246	663	12	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col2 < $.nvars
22246	663	12	MillerUpdatingRegression.java	getPartialCorrelations	col2	int	0	NIL-FOR	$ < nvars
2338	701	8	MillerUpdatingRegression.java	vmove	from	int	0	RET	$ == to
2338	701	8	MillerUpdatingRegression.java	vmove	to	int	0	RET	from == $
2339	704	8	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	$.rss_set
2340	708	8	MillerUpdatingRegression.java	vmove	from	int	1	DEF	$ < to
2340	708	8	MillerUpdatingRegression.java	vmove	to	int	1	DEF	from < $
22247	720	8	MillerUpdatingRegression.java	vmove	count	int	0	NIL-WHILE	idx < $
22247	720	8	MillerUpdatingRegression.java	vmove	idx	int	0	NIL-WHILE	$ < count
2341	728	12	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d2 > $.epsilon
2341	728	12	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d1 > $.epsilon
2341	728	12	MillerUpdatingRegression.java	vmove	d1	double	0	DEF	$ > this.epsilon
2341	728	12	MillerUpdatingRegression.java	vmove	d2	double	0	DEF	$ > this.epsilon
2342	730	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	Math.abs(X) * Math.sqrt(d1) < $.tol[mp1]
2342	730	16	MillerUpdatingRegression.java	vmove	d1	double	0	DEF	Math.abs(X) * Math.sqrt($) < tol[mp1]
2342	730	16	MillerUpdatingRegression.java	vmove	mp1	int	0	DEF	Math.abs(X) * Math.sqrt(d1) < tol[$]
2343	733	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	1	DEF	d1 < $.epsilon
2343	733	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	1	DEF	Math.abs(X) < $.epsilon
2343	733	16	MillerUpdatingRegression.java	vmove	d1	double	1	DEF	$ < this.epsilon
22248	737	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
22248	737	20	MillerUpdatingRegression.java	vmove	col	int	0	NIL-FOR	$ < nvars
2344	749	23	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d2 < $.epsilon
2344	749	23	MillerUpdatingRegression.java	vmove	d2	double	0	DEF	$ < this.epsilon
22249	752	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	_i < m1 + $.nvars - m - 1
22249	752	20	MillerUpdatingRegression.java	vmove	_i	int	0	NIL-FOR	$ < m1 + nvars - m - 1
22249	752	20	MillerUpdatingRegression.java	vmove	m1	int	0	NIL-FOR	_i < $ + nvars - m - 1
22249	752	20	MillerUpdatingRegression.java	vmove	m	int	0	NIL-FOR	_i < m1 + nvars - $ - 1
2345	759	16	MillerUpdatingRegression.java	vmove	bSkipTo40	boolean	0	DEF	$
22250	767	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
22250	767	20	MillerUpdatingRegression.java	vmove	col	int	0	NIL-FOR	$ < nvars
2346	779	12	MillerUpdatingRegression.java	vmove	m	int	0	DEF	$ > 0
22251	781	16	MillerUpdatingRegression.java	vmove	row	int	0	NIL-FOR	$ < m
22251	781	16	MillerUpdatingRegression.java	vmove	m	int	0	NIL-FOR	row < $
2347	822	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	RET	list.$.length > $.nvars + 1 - pos1
2347	822	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	RET	list.$.length < 1
2347	822	8	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	$.length > nvars + 1 - pos1
2347	822	8	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	$.length < 1
2347	822	8	MillerUpdatingRegression.java	reorderRegressors	pos1	int	0	RET	list.length > nvars + 1 - $
22252	827	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	NIL-WHILE	i < $.nvars
22252	827	8	MillerUpdatingRegression.java	reorderRegressors	i	int	0	NIL-WHILE	$ < nvars
22253	829	12	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	NIL-FOR	j < list.$.length
22253	829	12	MillerUpdatingRegression.java	reorderRegressors	j	int	0	NIL-FOR	$ < list.length
22253	829	12	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	NIL-FOR	j < $.length
2348	830	16	MillerUpdatingRegression.java	reorderRegressors	j	int	0	RET	l == list[$]
2348	830	16	MillerUpdatingRegression.java	reorderRegressors	next	int	0	RET	i > $
2348	830	16	MillerUpdatingRegression.java	reorderRegressors	i	int	0	RET	$ > next
2348	830	16	MillerUpdatingRegression.java	reorderRegressors	l	int	0	RET	$ == list[j]
2348	830	16	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	l == $[j]
2349	833	20	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	1	RET	next >= list.$.length + pos1
2349	833	20	MillerUpdatingRegression.java	reorderRegressors	next	int	1	RET	$ >= list.length + pos1
2349	833	20	MillerUpdatingRegression.java	reorderRegressors	list	int[]	1	RET	next >= $.length + pos1
2349	833	20	MillerUpdatingRegression.java	reorderRegressors	pos1	int	1	RET	next >= list.length + $
2350	856	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	0	RET	row_data.$.length > $.nvars
2350	856	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	row_data	double[]	0	RET	$.length > nvars
2351	860	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	1	DEF	$.hasIntercept
22254	868	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	0	NIL-FOR	col < xrow.$.length
22254	868	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	0	NIL-FOR	$ < xrow.length
22254	868	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	xrow	double[]	0	NIL-FOR	col < $.length
2352	869	12	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	1	DEF	Math.sqrt($.d[col]) < $.tol[col]
2352	869	12	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	1	DEF	Math.sqrt(d[$]) < tol[$]
22255	874	16	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	row	int	0	NIL-FOR	$ < col
22255	874	16	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	0	NIL-FOR	row < $
2353	918	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.nobs <= numberOfRegressors
2353	918	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	ModelSpecificationException	this.nobs <= $
2354	923	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	numberOfRegressors > $.nvars
2354	923	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	ModelSpecificationException	$ > this.nvars
22256	938	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.lindep.length
22256	938	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.lindep.length
2355	939	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2355	939	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.lindep[$]
22257	945	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < numberOfRegressors
22257	945	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	NIL-FOR	i < $
2356	946	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[i] != i
2356	946	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[$] != $
2357	951	8	MillerUpdatingRegression.java	regress	needsReorder	boolean	1	RET	$
22258	960	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
22258	960	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < nvars
22259	961	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ < numberOfRegressors
22259	961	16	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	NIL-FOR	j < $
2358	962	20	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[j] == i
2358	962	20	MillerUpdatingRegression.java	regress	j	int	0	DEF	this.vorder[$] == i
2358	962	20	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[j] == $
22260	973	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < beta.$.length
22260	973	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < beta.length
22260	973	12	MillerUpdatingRegression.java	regress	beta	double[]	0	NIL-FOR	i < $.length
22261	975	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ <= i
22261	975	16	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	j <= $
2359	977	20	MillerUpdatingRegression.java	regress	_i	int	1	DEF	$ > _j
2359	977	20	MillerUpdatingRegression.java	regress	_j	int	1	DEF	_i > $
2360	1004	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	variablesToInclude.$.length > $.nvars
2360	1004	8	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > this.nvars
2361	1008	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.nobs <= $.nvars
22262	1015	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < variablesToInclude.$.length
22262	1015	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < variablesToInclude.length
22262	1015	8	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	NIL-FOR	i < $.length
2362	1016	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	i >= $.nvars
2362	1016	12	MillerUpdatingRegression.java	regress	i	int	0	ModelSpecificationException	$ >= this.nvars
2363	1020	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	$ > 0
2363	1020	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	variablesToInclude[$] == variablesToInclude[$ - 1]
2363	1020	12	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	DEF	$[i] == $[i - 1]
2364	1026	8	MillerUpdatingRegression.java	regress	iExclude	int	1	DEF	$ > 0
22263	1029	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < variablesToInclude.$.length
22263	1029	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < variablesToInclude.length
22263	1029	12	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	NIL-FOR	i < $.length
2365	1030	16	MillerUpdatingRegression.java	regress	i	int	0	DEF	variablesToInclude[$] > -1
2365	1030	16	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	DEF	$[i] > -1
22264	1050	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.lindep.length
22264	1050	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.lindep.length
2366	1051	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2366	1051	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.lindep[$]
22265	1057	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
22265	1057	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.nvars
2367	1058	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[i] != series[i]
2367	1058	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[$] != series[$]
2367	1058	12	MillerUpdatingRegression.java	regress	series	int[]	0	DEF	this.vorder[i] != $[i]
2368	1063	8	MillerUpdatingRegression.java	regress	needsReorder	boolean	1	RET	$
22266	1070	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < series.$.length
22266	1070	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < series.length
22266	1070	12	MillerUpdatingRegression.java	regress	series	int[]	0	NIL-FOR	i < $.length
22267	1071	16	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	j < $.vorder.length
22267	1071	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ < this.vorder.length
2369	1072	20	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[j] == series[i]
2369	1072	20	MillerUpdatingRegression.java	regress	j	int	0	DEF	this.vorder[$] == series[i]
2369	1072	20	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[j] == series[$]
2369	1072	20	MillerUpdatingRegression.java	regress	series	int[]	0	DEF	this.vorder[j] == $[i]
22268	1083	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < beta.$.length
22268	1083	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < beta.length
22268	1083	12	MillerUpdatingRegression.java	regress	beta	double[]	0	NIL-FOR	i < $.length
22269	1085	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ <= i
22269	1085	16	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	j <= $
2370	1087	20	MillerUpdatingRegression.java	regress	_i	int	1	DEF	$ > _j
2370	1087	20	MillerUpdatingRegression.java	regress	_j	int	1	DEF	_i > $
2141	76	8	Min.java	increment	THIS	Min	0	DEF	Double.isNaN($.value)
2141	76	8	Min.java	increment	THIS	Min	0	DEF	d < $.value
2141	76	8	Min.java	increment	d	double	0	DEF	$ < value
2142	131	8	Min.java	evaluate	THIS	Min	0	DEF	$.test(values, begin, length)
2142	131	8	Min.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2142	131	8	Min.java	evaluate	begin	int	0	DEF	test(values, $, length)
2142	131	8	Min.java	evaluate	length	int	0	DEF	test(values, begin, $)
22137	133	12	Min.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
22137	133	12	Min.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
22137	133	12	Min.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2143	134	16	Min.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
2143	134	16	Min.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
3325	92	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMin) < $
3325	92	8	MullerSolver.java	doSolve	fMin	double	0	RET	FastMath.abs($) < functionValueAccuracy
3326	96	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMax) < $
3326	96	8	MullerSolver.java	doSolve	fMax	double	0	RET	FastMath.abs($) < functionValueAccuracy
3327	100	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fInitial) < $
3327	100	8	MullerSolver.java	doSolve	fInitial	double	0	RET	FastMath.abs($) < functionValueAccuracy
3328	106	8	MullerSolver.java	doSolve	THIS	MullerSolver	1	RET	$.isBracketing(min, initial)
3328	106	8	MullerSolver.java	doSolve	min	double	1	RET	isBracketing($, initial)
3328	106	8	MullerSolver.java	doSolve	initial	double	1	RET	isBracketing(min, $)
3329	160	12	MullerSolver.java	solve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
3329	160	12	MullerSolver.java	solve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3329	160	12	MullerSolver.java	solve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
3329	160	12	MullerSolver.java	solve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
3329	160	12	MullerSolver.java	solve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
3330	173	12	MullerSolver.java	solve	bisect	boolean	1	DEF	$
3331	183	16	MullerSolver.java	solve	ym	double	1	DEF	FastMath.signum(y0) + FastMath.signum($) == 0.0
3331	183	16	MullerSolver.java	solve	y0	double	1	DEF	FastMath.signum($) + FastMath.signum(ym) == 0.0
3319	98	8	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y0) < $
3319	98	8	MullerSolver2.java	doSolve	y0	double	0	RET	FastMath.abs($) < functionValueAccuracy
3320	103	8	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y1) < $
3320	103	8	MullerSolver2.java	doSolve	y1	double	0	RET	FastMath.abs($) < functionValueAccuracy
3321	107	8	MullerSolver2.java	doSolve	y0	double	0	NoBracketingException	$ * y1 > 0
3321	107	8	MullerSolver2.java	doSolve	y1	double	0	NoBracketingException	y0 * $ > 0
3322	124	12	MullerSolver2.java	doSolve	delta	double	1	DEF	$ >= 0.0
3323	133	12	MullerSolver2.java	doSolve	denominator	double	1	DEF	$ != 0
22697	137	16	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x1
22697	137	16	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x2
22697	137	16	MullerSolver2.java	doSolve	x1	double	0	NIL-WHILE	x == $
22697	137	16	MullerSolver2.java	doSolve	x2	double	0	NIL-WHILE	x == $
3324	149	12	MullerSolver2.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
3324	149	12	MullerSolver2.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3324	149	12	MullerSolver2.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
3324	149	12	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
3324	149	12	MullerSolver2.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
1790	164	8	MultiDirectionalSimplex.java	iterate	best	PointValuePair	0	RET	comparator.compare(reflected, $) < 0
1790	164	8	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare($, best) < 0
1790	164	8	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(reflected, best) < 0
1791	169	12	MultiDirectionalSimplex.java	iterate	expanded	PointValuePair	0	DEF	comparator.compare(reflected, $) <= 0
1791	169	12	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	DEF	comparator.compare($, expanded) <= 0
1791	169	12	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	DEF	$.compare(reflected, expanded) <= 0
21911	203	8	MultiDirectionalSimplex.java	evaluateNewSimplex	THIS	MultiDirectionalSimplex	0	NIL-FOR	i < $.getSize()
21911	203	8	MultiDirectionalSimplex.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ < getSize()
21912	206	12	MultiDirectionalSimplex.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < dim
21912	206	12	MultiDirectionalSimplex.java	evaluateNewSimplex	dim	int	0	NIL-FOR	j < $
20868	173	8	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
20868	173	8	MultidimensionalCounter.java	MultidimensionalCounter	i	int	0	NIL-FOR	$ < last
20869	175	12	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	j < $.dimension
20869	175	12	MultidimensionalCounter.java	MultidimensionalCounter	j	int	0	NIL-FOR	$ < dimension
103	183	8	MultidimensionalCounter.java	MultidimensionalCounter	tS	int	0	NotStrictlyPositiveException	$ <= 0
104	217	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.totalSize
104	217	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ >= totalSize
104	217	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ < 0
20870	225	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
20870	225	8	MultidimensionalCounter.java	getCounts	i	int	0	NIL-FOR	$ < last
20871	228	12	MultidimensionalCounter.java	getCounts	count	int	0	NIL-WHILE	$ <= index
20871	228	12	MultidimensionalCounter.java	getCounts	index	int	0	NIL-WHILE	count <= $
105	254	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	DimensionMismatchException	c.$.length != $.dimension
105	254	8	MultidimensionalCounter.java	getCount	c	int	0	DimensionMismatchException	$.length != dimension
20872	258	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
20872	258	8	MultidimensionalCounter.java	getCount	i	int	0	NIL-FOR	$ < dimension
106	260	12	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.size[i]
106	260	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ >= size[i]
106	260	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ < 0
106	260	12	MultidimensionalCounter.java	getCount	i	int	0	OutOfRangeException	index >= size[$]
20873	292	8	MultidimensionalCounter.java	toString	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
20873	292	8	MultidimensionalCounter.java	toString	i	int	0	NIL-FOR	$ < dimension
2827	116	8	MultistepIntegrator.java	MultistepIntegrator	nSteps	int	0	MathIllegalArgumentException	$ <= 1
2029	103	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
2029	103	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
2029	103	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
22104	106	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < lower.$.length
22104	106	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < lower.length
22104	106	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NIL-FOR	i < $.length
2030	108	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
2030	108	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
2030	108	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
22105	115	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
22105	115	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < mappers.length
2031	116	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(lower[$])
2031	116	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	1	DEF	Double.isInfinite($[i])
2032	117	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
2032	117	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
2033	125	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
2033	125	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
22106	145	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
22106	145	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	i	int	0	NIL-FOR	$ < mappers.length
22107	161	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
22107	161	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	i	int	0	NIL-FOR	$ < mappers.length
2023	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
2023	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
2023	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
2024	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != scale.$.length
2024	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != scale.length
2024	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	scale	double[]	0	DimensionMismatchException	lower.length != $.length
22101	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < lower.$.length
22101	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NIL-FOR	$ < lower.length
22101	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NIL-FOR	i < $.length
2025	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
2025	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
2025	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
22102	164	8	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < $.scale.$.length
22102	164	8	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	NIL-FOR	$ < scale.length
2026	165	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] < $.lower[i]
2026	165	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] > $.upper[i]
2026	165	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] < lower[$]
2026	165	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] > upper[$]
2026	165	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] < lower[i]
2026	165	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] > upper[i]
22103	168	16	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	j < $.scale.$.length
22103	168	16	MultivariateFunctionPenaltyAdapter.java	value	j	int	0	NIL-FOR	$ < scale.length
2027	170	20	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] < $.lower[j]
2027	170	20	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] < lower[$]
2027	170	20	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] < lower[j]
2028	172	27	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] > $.upper[j]
2028	172	27	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] > upper[$]
2028	172	27	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] > upper[j]
960	107	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	THIS	MultivariateNormalDistribution	0	DimensionMismatchException	covariances.$.length != dim
960	107	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	DimensionMismatchException	covariances.length != $
960	107	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covariances	double[][]	0	DimensionMismatchException	$.length != dim
20960	111	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	NIL-FOR	$ < dim
20960	111	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	i < $
961	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	THIS	MultivariateNormalDistribution	0	DimensionMismatchException	dim != covariances[i].length
961	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	DimensionMismatchException	dim != covariances[$].length
961	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	DimensionMismatchException	$ != covariances[i].length
961	112	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covariances	double[][]	0	DimensionMismatchException	dim != $[i].length
20961	132	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	THIS	MultivariateNormalDistribution	0	NIL-FOR	i < covMatEigenvalues.$.length
20961	132	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	NIL-FOR	$ < covMatEigenvalues.length
20961	132	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covMatEigenvalues	double[]	0	NIL-FOR	i < $.length
962	133	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	i	int	0	NonPositiveDefiniteMatrixException	covMatEigenvalues[$] < 0
962	133	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	covMatEigenvalues	double[]	0	NonPositiveDefiniteMatrixException	$[i] < 0
20962	140	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	v	int	0	NIL-FOR	$ < dim
20962	140	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	v < $
20963	148	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	row	int	0	NIL-FOR	$ < dim
20963	148	8	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	row < $
20964	150	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	col	int	0	NIL-FOR	$ < dim
20964	150	12	MultivariateNormalDistribution.java	MultivariateNormalDistribution	dim	int	0	NIL-FOR	col < $
963	179	8	MultivariateNormalDistribution.java	density	THIS	MultivariateNormalDistribution	0	DimensionMismatchException	vals.$.length != dim
963	179	8	MultivariateNormalDistribution.java	density	dim	int	0	DimensionMismatchException	vals.length != $
963	179	8	MultivariateNormalDistribution.java	density	vals	double[]	0	DimensionMismatchException	$.length != dim
20965	198	8	MultivariateNormalDistribution.java	getStandardDeviations	i	int	0	NIL-FOR	$ < dim
20965	198	8	MultivariateNormalDistribution.java	getStandardDeviations	dim	int	0	NIL-FOR	i < $
20966	209	8	MultivariateNormalDistribution.java	sample	i	int	0	NIL-FOR	$ < dim
20966	209	8	MultivariateNormalDistribution.java	sample	dim	int	0	NIL-FOR	i < $
20967	215	8	MultivariateNormalDistribution.java	sample	i	int	0	NIL-FOR	$ < dim
20967	215	8	MultivariateNormalDistribution.java	sample	dim	int	0	NIL-FOR	i < $
20968	230	8	MultivariateNormalDistribution.java	getExponentTerm	THIS	MultivariateNormalDistribution	0	NIL-FOR	i < centered.$.length
20968	230	8	MultivariateNormalDistribution.java	getExponentTerm	i	int	0	NIL-FOR	$ < centered.length
20968	230	8	MultivariateNormalDistribution.java	getExponentTerm	centered	double[]	0	NIL-FOR	i < $.length
20969	235	8	MultivariateNormalDistribution.java	getExponentTerm	THIS	MultivariateNormalDistribution	0	NIL-FOR	i < preMultiplied.$.length
20969	235	8	MultivariateNormalDistribution.java	getExponentTerm	i	int	0	NIL-FOR	$ < preMultiplied.length
20969	235	8	MultivariateNormalDistribution.java	getExponentTerm	preMultiplied	double[]	0	NIL-FOR	i < $.length
22108	126	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	i	int	0	NIL-FOR	$ < k
22108	126	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	k	int	0	NIL-FOR	i < $
22109	150	8	MultivariateSummaryStatistics.java	addValue	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
22109	150	8	MultivariateSummaryStatistics.java	addValue	i	int	0	NIL-FOR	$ < k
22110	187	8	MultivariateSummaryStatistics.java	getResults	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < results.$.length
22110	187	8	MultivariateSummaryStatistics.java	getResults	i	int	0	NIL-FOR	$ < results.length
22110	187	8	MultivariateSummaryStatistics.java	getResults	results	double[]	0	NIL-FOR	i < $.length
2034	246	8	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 1
2035	248	15	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 2
22111	252	12	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
22111	252	12	MultivariateSummaryStatistics.java	getStandardDeviation	i	int	0	NIL-FOR	$ < k
22112	336	8	MultivariateSummaryStatistics.java	append	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < data.$.length
22112	336	8	MultivariateSummaryStatistics.java	append	i	int	0	NIL-FOR	$ < data.length
22112	336	8	MultivariateSummaryStatistics.java	append	data	double[]	0	NIL-FOR	i < $.length
2036	337	12	MultivariateSummaryStatistics.java	append	i	int	0	DEF	$ > 0
22113	350	8	MultivariateSummaryStatistics.java	clear	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
22113	350	8	MultivariateSummaryStatistics.java	clear	i	int	0	NIL-FOR	$ < k
2037	370	8	MultivariateSummaryStatistics.java	equals	THIS	MultivariateSummaryStatistics	0	RET	object == $
2037	370	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ == this
2038	373	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ instanceof MultivariateSummaryStatistics == false
2039	612	8	MultivariateSummaryStatistics.java	checkEmpty	THIS	MultivariateSummaryStatistics	0	MathIllegalStateException	$.n > 0
2040	624	8	MultivariateSummaryStatistics.java	checkDimension	THIS	MultivariateSummaryStatistics	0	DimensionMismatchException	dimension != $.k
2040	624	8	MultivariateSummaryStatistics.java	checkDimension	dimension	int	0	DimensionMismatchException	$ != k
2535	70	8	NPointCrossover.java	NPointCrossover	crossoverPoints	int	0	NotStrictlyPositiveException	$ <= 0
2536	111	8	NPointCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2536	111	8	NPointCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2537	130	8	NPointCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
2537	130	8	NPointCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
2538	133	8	NPointCrossover.java	mate	THIS	NPointCrossover	0	NumberIsTooLargeException	$.crossoverPoints >= length
2538	133	8	NPointCrossover.java	mate	length	int	0	NumberIsTooLargeException	crossoverPoints >= $
22328	151	8	NPointCrossover.java	mate	THIS	NPointCrossover	0	NIL-FOR	i < $.crossoverPoints
22328	151	8	NPointCrossover.java	mate	i	int	0	NIL-FOR	$ < crossoverPoints
22329	156	12	NPointCrossover.java	mate	j	int	0	NIL-FOR	$ < crossoverIndex
22329	156	12	NPointCrossover.java	mate	crossoverIndex	int	0	NIL-FOR	j < $
22330	170	8	NPointCrossover.java	mate	j	int	0	NIL-FOR	$ < length
22330	170	8	NPointCrossover.java	mate	length	int	0	NIL-FOR	j < $
22199	194	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < data.$.length
22199	194	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < data.length
22199	194	8	NaturalRanking.java	rank	data	double[]	0	NIL-FOR	i < $.length
22200	227	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
22200	227	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < ranks.length
22200	227	8	NaturalRanking.java	rank	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2267	228	12	NaturalRanking.java	rank	i	int	1	DEF	Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
2267	228	12	NaturalRanking.java	rank	ranks	IntDoublePair[]	1	DEF	Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
2268	231	16	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
2269	242	8	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
2270	245	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	DEF	$.nanStrategy == $.NaNStrategy.FIXED
2271	259	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	RET	$.containsNaNs(ranks)
2271	259	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	RET	containsNaNs($)
22201	264	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
22201	264	8	NaturalRanking.java	removeNaNs	i	int	0	NIL-FOR	$ < ranks.length
22201	264	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2272	265	12	NaturalRanking.java	removeNaNs	i	int	1	DEF	Double.isNaN(ranks[$].getValue())
2272	265	12	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	1	DEF	Double.isNaN($[i].getValue())
22202	267	16	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	k < ranks.$.length
22202	267	16	NaturalRanking.java	removeNaNs	k	int	0	NIL-FOR	$ < ranks.length
22202	267	16	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	k < $.length
22203	289	8	NaturalRanking.java	recodeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
22203	289	8	NaturalRanking.java	recodeNaNs	i	int	0	NIL-FOR	$ < ranks.length
22203	289	8	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2273	290	12	NaturalRanking.java	recodeNaNs	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
2273	290	12	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
22204	304	8	NaturalRanking.java	containsNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
22204	304	8	NaturalRanking.java	containsNaNs	i	int	0	NIL-FOR	$ < ranks.length
22204	304	8	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2274	305	12	NaturalRanking.java	containsNaNs	i	int	0	RET	Double.isNaN(ranks[$].getValue())
2274	305	12	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	RET	Double.isNaN($[i].getValue())
22205	347	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
22206	357	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
22207	375	8	NaturalRanking.java	fill	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
2275	387	8	NaturalRanking.java	restoreNaNs	nanPositions	List<Integer>	0	RET	$.size() == 0
22208	391	8	NaturalRanking.java	restoreNaNs	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
22209	405	8	NaturalRanking.java	getNanPositions	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
22209	405	8	NaturalRanking.java	getNanPositions	i	int	0	NIL-FOR	$ < ranks.length
22209	405	8	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2276	406	12	NaturalRanking.java	getNanPositions	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
2276	406	12	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
22091	201	8	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ < n
22091	201	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i < $
22092	203	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
22092	203	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
22093	208	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
22093	208	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
22094	214	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
22094	214	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2011	220	8	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare($, reflected) <= 0
2011	220	8	NelderMeadSimplex.java	iterate	secondBest	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
2011	220	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(best, $) <= 0
2011	220	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, secondBest) < 0
2011	220	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(best, reflected) <= 0
2011	220	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, secondBest) < 0
2012	224	15	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
2012	224	15	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, best) < 0
2012	224	15	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, best) < 0
22095	227	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
22095	227	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2013	233	12	NelderMeadSimplex.java	iterate	expanded	PointValuePair	1	DEF	comparator.compare($, reflected) < 0
2013	233	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(expanded, $) < 0
2013	233	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(expanded, reflected) < 0
2014	241	12	NelderMeadSimplex.java	iterate	worst	PointValuePair	1	RET	comparator.compare(reflected, $) < 0
2014	241	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	RET	comparator.compare($, worst) < 0
2014	241	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	RET	$.compare(reflected, worst) < 0
22096	244	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
22096	244	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2015	249	16	NelderMeadSimplex.java	iterate	outContracted	PointValuePair	0	RET	comparator.compare($, reflected) <= 0
2015	249	16	NelderMeadSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare(outContracted, $) <= 0
2015	249	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(outContracted, reflected) <= 0
22097	257	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
22097	257	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
2016	263	16	NelderMeadSimplex.java	iterate	inContracted	PointValuePair	0	RET	comparator.compare($, worst) < 0
2016	263	16	NelderMeadSimplex.java	iterate	worst	PointValuePair	0	RET	comparator.compare(inContracted, $) < 0
2016	263	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(inContracted, worst) < 0
22098	272	12	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ <= n
22098	272	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i <= $
22099	274	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
22099	274	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
754	78	8	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	MathIllegalArgumentException	$[0] == null
20947	88	8	NestedLoops.java	NestedLoops	THIS	NestedLoops	0	NIL-FOR	i < loop.$.length
20947	88	8	NestedLoops.java	NestedLoops	i	int	0	NIL-FOR	$ < loop.length
20947	88	8	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	NIL-FOR	i < $.length
755	99	8	NestedLoops.java	NestedLoops	THIS	NestedLoops	1	DEF	Double.isInfinite($.polygon.getSize())
756	126	12	NestedLoops.java	add	THIS	NestedLoops	0	RET	$.child.$.polygon.contains(node.$.polygon)
756	126	12	NestedLoops.java	add	node	NestedLoops	0	RET	child.polygon.contains($.polygon)
20948	133	8	NestedLoops.java	add	iterator	Iterator<NestedLoops>	0	NIL-FOR	$.hasNext()
757	135	12	NestedLoops.java	add	THIS	NestedLoops	0	DEF	node.$.polygon.contains(child.$.polygon)
757	135	12	NestedLoops.java	add	child	NestedLoops	0	DEF	node.polygon.contains($.polygon)
757	135	12	NestedLoops.java	add	node	NestedLoops	0	DEF	$.polygon.contains(child.polygon)
758	144	12	NestedLoops.java	add	THIS	NestedLoops	0	MathIllegalArgumentException	factory.intersection(node.$.polygon, $.child.$.polygon).isEmpty()
758	144	12	NestedLoops.java	add	factory	RegionFactory<Euclidean2D>	0	MathIllegalArgumentException	$.intersection(node.polygon, child.polygon).isEmpty()
758	144	12	NestedLoops.java	add	node	NestedLoops	0	MathIllegalArgumentException	factory.intersection($.polygon, child.polygon).isEmpty()
759	170	8	NestedLoops.java	setClockWise	THIS	NestedLoops	0	DEF	$.originalIsClockwise ^ clockwise
759	170	8	NestedLoops.java	setClockWise	clockwise	boolean	0	DEF	originalIsClockwise ^ $
20949	174	12	NestedLoops.java	setClockWise	min	int	0	NIL-WHILE	++$ < --max
20949	174	12	NestedLoops.java	setClockWise	max	int	0	NIL-WHILE	++min < --$
3291	81	12	NewtonSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(x1 - x0) <= $
3291	81	12	NewtonSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) <= absoluteAccuracy
3291	81	12	NewtonSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) <= absoluteAccuracy
1753	139	8	NonLinearConjugateGradientOptimizer.java	setInitialStep	initialStep	double	1	DEF	$ <= 0
1754	154	8	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
1754	154	8	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
21882	155	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
21882	155	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
21883	165	8	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
21883	165	8	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1755	178	12	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	$ != null
1756	179	16	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	checker.converged(iter, $, current)
1756	179	16	NonLinearConjugateGradientOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	RET	$.converged(iter, previous, current)
1756	179	16	NonLinearConjugateGradientOptimizer.java	doOptimize	current	PointValuePair	0	RET	checker.converged(iter, previous, $)
1756	179	16	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
21884	195	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < $.point.$.length
21884	195	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < point.length
1757	200	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
1757	200	12	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
21885	201	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
21885	201	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
21886	210	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
21886	210	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1758	215	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.updateFormula == $.ConjugateGradientFormula.FLETCHER_REEVES
21887	219	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < r.$.length
21887	219	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < r.length
21887	219	16	NonLinearConjugateGradientOptimizer.java	doOptimize	r	double[]	0	NIL-FOR	i < $.length
1759	227	12	NonLinearConjugateGradientOptimizer.java	doOptimize	beta	double	1	DEF	$ < 0
1759	227	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	1	DEF	iter % $ == 0
1759	227	12	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	1	DEF	$ % n == 0
21888	233	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
21888	233	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
21889	253	8	NonLinearConjugateGradientOptimizer.java	findUpperBound	step	double	0	NIL-FOR	$ < Double.MAX_VALUE
1760	256	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yA	double	0	RET	$ * yB <= 0
1760	256	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yB	double	0	RET	yA * $ <= 0
2656	85	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.scaled != null
2656	85	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.scaled != null
2657	88	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.nordsieck != null
2657	88	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.nordsieck != null
2658	91	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.stateVariation != null
2658	91	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.stateVariation != null
22392	150	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < $.scaled.$.length
22392	150	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < scaled.length
22393	156	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < nData.$.length
22393	156	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < nData.length
22393	156	8	NordsieckStepInterpolator.java	rescale	nData	double[][]	0	NIL-FOR	i < $.length
22394	159	12	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
22394	159	12	NordsieckStepInterpolator.java	rescale	j	int	0	NIL-FOR	$ < nDataI.length
22394	159	12	NordsieckStepInterpolator.java	rescale	nDataI	double[]	0	NIL-FOR	j < $.length
22395	199	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ >= 0
22396	203	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
22396	203	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < nDataI.length
22396	203	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	nDataI	double[]	0	NIL-FOR	j < $.length
22397	210	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < $.currentState.$.length
22397	210	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < currentState.length
2659	232	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.scaled == null
22398	236	12	NordsieckStepInterpolator.java	writeExternal	j	int	0	NIL-FOR	$ < n
22398	236	12	NordsieckStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	j < $
2660	241	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.nordsieck == null
2661	266	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
22399	268	12	NordsieckStepInterpolator.java	readExternal	j	int	0	NIL-FOR	$ < n
22399	268	12	NordsieckStepInterpolator.java	readExternal	n	int	0	NIL-FOR	j < $
2662	276	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
2663	282	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
2663	282	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
964	106	8	NormalDistribution.java	NormalDistribution	sd	double	0	NotStrictlyPositiveException	$ <= 0
965	149	8	NormalDistribution.java	cumulativeProbability	THIS	NormalDistribution	0	RET	FastMath.abs(dev) > 40 * $.standardDeviation
965	149	8	NormalDistribution.java	cumulativeProbability	dev	double	0	RET	FastMath.abs($) > 40 * standardDeviation
966	171	8	NormalDistribution.java	probability	x0	double	0	NumberIsTooLargeException	$ > x1
966	171	8	NormalDistribution.java	probability	x1	double	0	NumberIsTooLargeException	x0 > $
22270	106	8	OLSMultipleLinearRegression.java	calculateHat	i	int	0	NIL-FOR	$ < n
22270	106	8	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	i < $
22271	107	12	OLSMultipleLinearRegression.java	calculateHat	j	int	0	NIL-FOR	$ < n
22271	107	12	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	j < $
2371	108	16	OLSMultipleLinearRegression.java	calculateHat	j	int	1	DEF	i == $
2371	108	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ < p
2371	108	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ == j
2371	108	16	OLSMultipleLinearRegression.java	calculateHat	p	int	1	DEF	i < $
2372	134	8	OLSMultipleLinearRegression.java	calculateTotalSumOfSquares	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
2373	184	8	OLSMultipleLinearRegression.java	calculateAdjustedRSquared	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
2584	80	8	OnePointCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2584	80	8	OnePointCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2585	98	8	OnePointCrossover.java	crossover	length	int	0	DimensionMismatchException	$ != second.getLength()
2585	98	8	OnePointCrossover.java	crossover	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
22346	113	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < crossoverIndex
22346	113	8	OnePointCrossover.java	crossover	crossoverIndex	int	0	NIL-FOR	i < $
22347	118	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < length
22347	118	8	OnePointCrossover.java	crossover	length	int	0	NIL-FOR	i < $
2198	172	8	OneWayAnova.java	anovaTest	alpha	double	0	OutOfRangeException	$ > 0.5
2198	172	8	OneWayAnova.java	anovaTest	alpha	double	0	OutOfRangeException	$ <= 0
2199	195	8	OneWayAnova.java	anovaStats	categoryData	Collection<double[]>	0	NullArgumentException	$ == null
2200	200	8	OneWayAnova.java	anovaStats	categoryData	Collection<double[]>	0	DimensionMismatchException	$.size() < 2
2201	208	12	OneWayAnova.java	anovaStats	THIS	OneWayAnova	0	DimensionMismatchException	$.array.$.length <= 1
22153	227	12	OneWayAnova.java	anovaStats	THIS	OneWayAnova	0	NIL-FOR	i < $.data.$.length
22153	227	12	OneWayAnova.java	anovaStats	i	int	0	NIL-FOR	$ < data.length
221	150	8	OpenIntToDoubleHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
222	155	8	OpenIntToDoubleHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
222	155	8	OpenIntToDoubleHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
223	179	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
223	179	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
223	179	8	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
224	183	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
224	183	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	states[$] == FREE
20906	188	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
20906	188	8	OpenIntToDoubleHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
225	191	12	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
225	191	12	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
225	191	12	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
226	209	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
226	209	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
226	209	8	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
227	213	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
227	213	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
20907	218	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
20907	218	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
228	221	12	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
228	221	12	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
228	221	12	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
229	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
229	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
230	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
230	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
230	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
230	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
230	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
231	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
231	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
232	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
232	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
232	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
232	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
232	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
233	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
233	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
234	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
234	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
235	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
235	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
236	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
236	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
236	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
236	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
236	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
237	353	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
237	353	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
237	353	8	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
238	357	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
238	357	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	states[$] == FREE
20908	362	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
20908	362	8	OpenIntToDoubleHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
239	365	12	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
239	365	12	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
239	365	12	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
240	410	8	OpenIntToDoubleHashMap.java	put	index	int	0	DEF	$ < 0
241	418	8	OpenIntToDoubleHashMap.java	put	newMapping	boolean	0	DEF	$
242	420	12	OpenIntToDoubleHashMap.java	put	THIS	OpenIntToDoubleHashMap	0	DEF	$.shouldGrowTable()
20909	444	8	OpenIntToDoubleHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
20909	444	8	OpenIntToDoubleHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
243	445	12	OpenIntToDoubleHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
243	445	12	OpenIntToDoubleHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
508	163	8	OpenIntToFieldHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
509	168	8	OpenIntToFieldHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
509	168	8	OpenIntToFieldHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
510	192	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
510	192	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
510	192	8	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
511	196	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
511	196	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	states[$] == FREE
20919	201	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
20919	201	8	OpenIntToFieldHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
512	204	12	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
512	204	12	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
512	204	12	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
513	222	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
513	222	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
513	222	8	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
514	226	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
514	226	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
20920	231	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
20920	231	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
515	234	12	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
515	234	12	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
515	234	12	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
516	284	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
516	284	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
517	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
517	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
517	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
517	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
517	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
518	292	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
518	292	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
519	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
519	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
519	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
519	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
519	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
520	304	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
520	304	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
521	306	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
521	306	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
522	317	12	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
522	317	12	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
523	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
523	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
523	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
523	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
523	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
524	366	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
524	366	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
524	366	8	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
525	370	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
525	370	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	states[$] == FREE
20921	375	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
20921	375	8	OpenIntToFieldHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
526	378	12	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
526	378	12	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
526	378	12	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
527	423	8	OpenIntToFieldHashMap.java	put	index	int	0	DEF	$ < 0
528	431	8	OpenIntToFieldHashMap.java	put	newMapping	boolean	0	DEF	$
529	433	12	OpenIntToFieldHashMap.java	put	THIS	OpenIntToFieldHashMap	0	DEF	$.shouldGrowTable()
20922	457	8	OpenIntToFieldHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
20922	457	8	OpenIntToFieldHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
530	458	12	OpenIntToFieldHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
530	458	12	OpenIntToFieldHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
1614	52	8	OpenMapRealMatrix.java	OpenMapRealMatrix	lRow	long	0	NumberIsTooLargeException	$ * lCol >= Integer.MAX_VALUE
1614	52	8	OpenMapRealMatrix.java	OpenMapRealMatrix	lCol	long	0	NumberIsTooLargeException	lRow * $ >= Integer.MAX_VALUE
21787	103	8	OpenMapRealMatrix.java	add	iterator	Iterator	0	NIL-FOR	$.hasNext()
21788	137	8	OpenMapRealMatrix.java	subtract	iterator	Iterator	0	NIL-FOR	$.hasNext()
21789	159	12	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
21790	165	16	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
21790	165	16	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
21791	189	8	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
21792	195	12	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
21792	195	12	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
1615	197	16	OpenMapRealMatrix.java	multiply	THIS	OpenMapRealMatrix	0	DEF	m.$.entries.containsKey(rightKey)
1615	197	16	OpenMapRealMatrix.java	multiply	rightKey	int	0	DEF	m.entries.containsKey($)
1615	197	16	OpenMapRealMatrix.java	multiply	m	OpenMapRealMatrix	0	DEF	$.entries.containsKey(rightKey)
1616	201	20	OpenMapRealMatrix.java	multiply	outValue	double	1	DEF	$ == 0.0
1617	232	8	OpenMapRealMatrix.java	setEntry	value	double	1	DEF	$ == 0.0
1618	246	8	OpenMapRealMatrix.java	addToEntry	value	double	1	DEF	$ == 0.0
1619	260	8	OpenMapRealMatrix.java	multiplyEntry	value	double	1	DEF	$ == 0.0
21712	137	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
21712	137	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
21712	137	8	OpenMapRealVector.java	OpenMapRealVector	values	double[]	0	NIL-FOR	key < $.length
1536	139	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1536	139	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
21713	166	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
21713	166	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
21713	166	8	OpenMapRealVector.java	OpenMapRealVector	values	Double[]	0	NIL-FOR	key < $.length
1537	168	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1537	168	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
21714	194	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < $.virtualSize
21714	194	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < virtualSize
1538	196	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1538	196	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
1539	227	8	OpenMapRealVector.java	add	v	RealVector	1	RET	$ instanceof OpenMapRealVector
21715	249	8	OpenMapRealVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1540	252	12	OpenMapRealVector.java	add	key	int	1	DEF	randomAccess.containsKey($)
1540	252	12	OpenMapRealVector.java	add	randomAccess	OpenIntToDoubleHashMap	1	DEF	$.containsKey(key)
21716	269	8	OpenMapRealVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1541	279	8	OpenMapRealVector.java	append	v	RealVector	1	RET	$ instanceof OpenMapRealVector
21717	283	12	OpenMapRealVector.java	append	i	int	0	NIL-FOR	$ < v.getDimension()
21717	283	12	OpenMapRealVector.java	append	v	RealVector	0	NIL-FOR	i < $.getDimension()
21718	318	8	OpenMapRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < n
21718	318	8	OpenMapRealVector.java	ebeDivide	n	int	0	NIL-FOR	i < $
21719	330	8	OpenMapRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
1542	341	8	OpenMapRealVector.java	ebeMultiply	v	RealVector	0	DEF	$.isNaN()
1542	341	8	OpenMapRealVector.java	ebeMultiply	v	RealVector	0	DEF	$.isInfinite()
21720	343	12	OpenMapRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < n
21720	343	12	OpenMapRealVector.java	ebeMultiply	n	int	0	NIL-FOR	i < $
1543	345	16	OpenMapRealVector.java	ebeMultiply	y	double	1	DEF	Double.isNaN($)
1544	347	23	OpenMapRealVector.java	ebeMultiply	y	double	0	DEF	Double.isInfinite($)
1545	360	8	OpenMapRealVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
21721	367	8	OpenMapRealVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1546	370	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ >= index
1546	370	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ < end
1546	370	12	OpenMapRealVector.java	getSubVector	end	int	0	DEF	key < $
1546	370	12	OpenMapRealVector.java	getSubVector	index	int	0	DEF	key >= $
21722	394	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
21723	402	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1547	405	12	OpenMapRealVector.java	getDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1547	405	12	OpenMapRealVector.java	getDistance	key	int	0	DEF	entries.containsKey($)
1548	417	8	OpenMapRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
21724	443	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
21725	449	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1549	452	12	OpenMapRealVector.java	getL1Distance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1549	452	12	OpenMapRealVector.java	getL1Distance	key	int	0	DEF	entries.containsKey($)
1550	464	8	OpenMapRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
21726	480	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1551	483	12	OpenMapRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
1551	483	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
21727	488	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1552	491	12	OpenMapRealVector.java	getLInfDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1552	491	12	OpenMapRealVector.java	getLInfDistance	key	int	0	DEF	entries.containsKey($)
1553	492	16	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	iter.value() > $
1553	492	16	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	DEF	$.value() > max
1554	504	8	OpenMapRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
21728	516	8	OpenMapRealVector.java	isInfinite	iter	Iterator	0	NIL-WHILE	$.hasNext()
1555	519	12	OpenMapRealVector.java	isInfinite	value	double	0	RET	Double.isNaN($)
1556	522	12	OpenMapRealVector.java	isInfinite	value	double	0	DEF	Double.isInfinite($)
21729	533	8	OpenMapRealVector.java	isNaN	iter	Iterator	0	NIL-WHILE	$.hasNext()
1557	535	12	OpenMapRealVector.java	isNaN	iter	Iterator	0	RET	Double.isNaN($.value())
21730	551	8	OpenMapRealVector.java	mapAddToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
21730	551	8	OpenMapRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
1558	561	8	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	1	DEF	$.isDefaultValue(value)
1558	561	8	OpenMapRealVector.java	setEntry	value	double	1	DEF	isDefaultValue($)
1559	563	15	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(index)
1559	563	15	OpenMapRealVector.java	setEntry	index	int	0	DEF	entries.containsKey($)
21731	573	8	OpenMapRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.getDimension()
21731	573	8	OpenMapRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < $.getDimension()
21732	581	8	OpenMapRealVector.java	set	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
21732	581	8	OpenMapRealVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
21733	598	8	OpenMapRealVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1560	601	12	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(key)
1560	601	12	OpenMapRealVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1561	614	8	OpenMapRealVector.java	subtract	v	RealVector	1	RET	$ instanceof OpenMapRealVector
1562	633	8	OpenMapRealVector.java	unitize	THIS	OpenMapRealVector	0	MathArithmeticException	$.isDefaultValue(norm)
1562	633	8	OpenMapRealVector.java	unitize	norm	double	0	MathArithmeticException	isDefaultValue($)
21734	637	8	OpenMapRealVector.java	unitize	iter	Iterator	0	NIL-WHILE	$.hasNext()
21735	648	8	OpenMapRealVector.java	toArray	iter	Iterator	0	NIL-WHILE	$.hasNext()
21736	670	8	OpenMapRealVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1563	686	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$ == obj
1563	686	8	OpenMapRealVector.java	equals	obj	Object	0	RET	this == $
1564	689	8	OpenMapRealVector.java	equals	obj	Object	0	RET	$ instanceof OpenMapRealVector
1565	693	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$.virtualSize != other.$.virtualSize
1565	693	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	virtualSize != $.virtualSize
1566	696	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits($.epsilon) != Double.doubleToLongBits(other.$.epsilon)
1566	696	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	Double.doubleToLongBits(epsilon) != Double.doubleToLongBits($.epsilon)
21737	701	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1567	704	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(iter.value())
1567	704	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.value())
21738	709	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1568	712	12	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.getEntry(iter.key()))
1568	712	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(getEntry(iter.key()))
1568	712	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry($.key()))
2586	53	8	OrderedCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2586	53	8	OrderedCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2587	69	8	OrderedCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
2587	69	8	OrderedCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
22348	87	8	OrderedCrossover.java	mate	a	int	0	NIL-DOWHILE	$ == b
22348	87	8	OrderedCrossover.java	mate	b	int	0	NIL-DOWHILE	a == $
22349	101	8	OrderedCrossover.java	mate	i	int	0	NIL-FOR	$ <= length
22349	101	8	OrderedCrossover.java	mate	length	int	0	NIL-FOR	i <= $
2588	109	12	OrderedCrossover.java	mate	item2	T	0	DEF	child1Set.contains($)
2588	109	12	OrderedCrossover.java	mate	child1Set	Set<T>	0	DEF	$.contains(item2)
2589	115	12	OrderedCrossover.java	mate	item1	T	0	DEF	child2Set.contains($)
2589	115	12	OrderedCrossover.java	mate	child2Set	Set<T>	0	DEF	$.contains(item1)
20926	139	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	NIL-FOR	i < components.$.length
20926	139	8	OrderedTuple.java	OrderedTuple	i	int	0	NIL-FOR	$ < components.length
20926	139	8	OrderedTuple.java	OrderedTuple	components	double	0	NIL-FOR	i < $.length
543	140	12	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isInfinite(components[$])
543	140	12	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isInfinite($[i])
544	141	16	OrderedTuple.java	OrderedTuple	i	int	1	DEF	components[$] < 0
544	141	16	OrderedTuple.java	OrderedTuple	components	double	1	DEF	$[i] < 0
545	146	19	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isNaN(components[$])
545	146	19	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isNaN($[i])
546	151	16	OrderedTuple.java	OrderedTuple	m	long	0	DEF	$ != 0
547	159	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.negInf
547	159	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.posInf
548	166	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	1	DEF	$.lsb <= msb
548	166	8	OrderedTuple.java	OrderedTuple	msb	int	1	DEF	lsb <= $
549	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding[0] == 0x0L
549	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding != null
549	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding.$.length == 1
20927	202	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	eIndex < $.encoding.$.length
20927	202	8	OrderedTuple.java	encode	eIndex	int	0	NIL-FOR	$ < encoding.length
20928	203	12	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	vIndex < $.components.$.length
20928	203	12	OrderedTuple.java	encode	vIndex	int	0	NIL-FOR	$ < components.length
550	204	16	OrderedTuple.java	encode	THIS	OrderedTuple	0	DEF	$.getBit(vIndex, k) != 0
550	204	16	OrderedTuple.java	encode	vIndex	int	0	DEF	getBit($, k) != 0
550	204	16	OrderedTuple.java	encode	k	int	0	DEF	getBit(vIndex, $) != 0
551	207	16	OrderedTuple.java	encode	shift	int	0	DEF	$-- == 0
552	248	8	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.components.$.length == ot.$.components.$.length
552	248	8	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	components.length == $.components.length
553	249	12	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.nan
554	251	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.nan
554	251	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.nan
555	253	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.posInf
555	253	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.negInf
555	253	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.posInf
556	255	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.negInf
556	255	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.posInf
556	255	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.negInf
557	259	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	DEF	$.offset < ot.$.offset
557	259	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	DEF	offset < $.offset
558	261	23	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	DEF	$.offset > ot.$.offset
558	261	23	OrderedTuple.java	compareTo	ot	OrderedTuple	0	DEF	offset > $.offset
20929	266	16	OrderedTuple.java	compareTo	i	int	0	NIL-FOR	$ < limit
20929	266	16	OrderedTuple.java	compareTo	limit	int	0	NIL-FOR	i < $
559	267	20	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding[i] < ot.$.encoding[i]
559	267	20	OrderedTuple.java	compareTo	i	int	1	RET	encoding[$] < ot.encoding[$]
559	267	20	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding[i] < $.encoding[i]
560	269	27	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.encoding[i] > ot.$.encoding[i]
560	269	27	OrderedTuple.java	compareTo	i	int	0	RET	encoding[$] > ot.encoding[$]
560	269	27	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	encoding[i] > $.encoding[i]
561	274	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length < ot.$.encoding.$.length
561	274	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length < $.encoding.length
562	276	23	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length > ot.$.encoding.$.length
562	276	23	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length > $.encoding.length
563	292	8	OrderedTuple.java	equals	THIS	OrderedTuple	1	RET	$ == other
563	292	8	OrderedTuple.java	equals	other	Object	1	RET	this == $
564	294	15	OrderedTuple.java	equals	other	Object	1	RET	$ instanceof OrderedTuple
20930	369	8	OrderedTuple.java	computeMSB	scale	int	0	NIL-WHILE	$ != 0
565	370	12	OrderedTuple.java	computeMSB	ll	long	0	DEF	($ & mask) != $
565	370	12	OrderedTuple.java	computeMSB	mask	long	0	DEF	(ll & $) != ll
20931	395	8	OrderedTuple.java	computeLSB	scale	int	0	NIL-WHILE	$ != 0
566	396	12	OrderedTuple.java	computeLSB	ll	long	0	DEF	($ & mask) == $
566	396	12	OrderedTuple.java	computeLSB	mask	long	0	DEF	(ll & $) == ll
567	417	8	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k > $.offset
567	417	8	OrderedTuple.java	getBit	e	int	1	RET	k < $
567	417	8	OrderedTuple.java	getBit	k	int	1	RET	$ > offset
567	417	8	OrderedTuple.java	getBit	k	int	1	RET	$ < e
568	419	15	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k == $.offset
568	419	15	OrderedTuple.java	getBit	k	int	1	RET	$ == offset
569	421	15	OrderedTuple.java	getBit	e	int	1	RET	k > ($ + 52)
569	421	15	OrderedTuple.java	getBit	k	int	1	RET	$ > (e + 52)
20939	72	8	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	NIL-FOR	i < outline.$.length
20939	72	8	OutlineExtractor.java	getOutline	i	int	0	NIL-FOR	$ < outline.length
20939	72	8	OutlineExtractor.java	getOutline	outline	Vector2D[][]	0	NIL-FOR	i < $.length
20940	76	12	OutlineExtractor.java	getOutline	end	int	0	NIL-WHILE	j < $
20940	76	12	OutlineExtractor.java	getOutline	j	int	0	NIL-WHILE	$ < end
701	77	16	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	1	DEF	$.pointIsBetween(rawLoop, end, j)
701	77	16	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	1	DEF	pointIsBetween($, end, j)
701	77	16	OutlineExtractor.java	getOutline	end	int	1	DEF	pointIsBetween(rawLoop, $, j)
701	77	16	OutlineExtractor.java	getOutline	j	int	1	DEF	pointIsBetween(rawLoop, end, $)
20941	79	20	OutlineExtractor.java	getOutline	k	int	0	NIL-FOR	$ < (end - 1)
20941	79	20	OutlineExtractor.java	getOutline	end	int	0	NIL-FOR	k < ($ - 1)
702	88	12	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	DEF	end != rawLoop.$.length
702	88	12	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	0	DEF	end != $.length
702	88	12	OutlineExtractor.java	getOutline	end	int	0	DEF	$ != rawLoop.length
155	104	8	Pair.java	equals	THIS	Pair	0	RET	$ == o
155	104	8	Pair.java	equals	o	Object	0	RET	this == $
156	107	8	Pair.java	equals	o	Object	1	RET	$ instanceof Pair
2641	56	12	ParameterJacobianWrapper.java	ParameterJacobianWrapper	name	String	0	DEF	pode.isSupported($)
2641	56	12	ParameterJacobianWrapper.java	ParameterJacobianWrapper	pode	ParameterizedODE	0	DEF	$.isSupported(name)
22385	84	8	ParameterJacobianWrapper.java	computeParameterJacobian	i	int	0	NIL-FOR	$ < n
22385	84	8	ParameterJacobianWrapper.java	computeParameterJacobian	n	int	0	NIL-FOR	i < $
2786	72	8	ParameterizedWrapper.java	getParameter	THIS	ParameterizedWrapper	0	MathIllegalArgumentException	$.isSupported(name)
2786	72	8	ParameterizedWrapper.java	getParameter	name	String	0	MathIllegalArgumentException	isSupported($)
1008	105	8	PascalDistribution.java	PascalDistribution	r	int	0	NotStrictlyPositiveException	$ <= 0
1009	109	8	PascalDistribution.java	PascalDistribution	p	double	0	OutOfRangeException	$ > 1
1009	109	8	PascalDistribution.java	PascalDistribution	p	double	0	OutOfRangeException	$ < 0
1010	138	8	PascalDistribution.java	probability	x	int	1	DEF	$ < 0
1011	152	8	PascalDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
2257	95	8	PearsonsCorrelation.java	PearsonsCorrelation	covarianceMatrix	RealMatrix	0	NullArgumentException	$ == null
22186	140	8	PearsonsCorrelation.java	getCorrelationStandardErrors	i	int	0	NIL-FOR	$ < nVars
22186	140	8	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	i < $
22187	141	12	PearsonsCorrelation.java	getCorrelationStandardErrors	j	int	0	NIL-FOR	$ < nVars
22187	141	12	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	j < $
22188	167	8	PearsonsCorrelation.java	getCorrelationPValues	i	int	0	NIL-FOR	$ < nVars
22188	167	8	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	i < $
22189	168	12	PearsonsCorrelation.java	getCorrelationPValues	j	int	0	NIL-FOR	$ < nVars
22189	168	12	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	j < $
2258	169	16	PearsonsCorrelation.java	getCorrelationPValues	j	int	1	DEF	i == $
2258	169	16	PearsonsCorrelation.java	getCorrelationPValues	i	int	1	DEF	$ == j
22190	192	8	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	$ < nVars
22190	192	8	PearsonsCorrelation.java	computeCorrelationMatrix	nVars	int	0	NIL-FOR	i < $
22191	193	12	PearsonsCorrelation.java	computeCorrelationMatrix	j	int	0	NIL-FOR	$ < i
22191	193	12	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	j < $
2259	229	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	DimensionMismatchException	xArray.$.length != yArray.$.length
2259	229	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	DimensionMismatchException	$.length != yArray.length
2259	229	8	PearsonsCorrelation.java	correlation	yArray	double[]	1	DimensionMismatchException	xArray.length != $.length
2260	231	15	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	MathIllegalArgumentException	xArray.$.length < 2
2260	231	15	PearsonsCorrelation.java	correlation	xArray	double[]	1	MathIllegalArgumentException	$.length < 2
22192	235	12	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	0	NIL-FOR	i<xArray.$.length
22192	235	12	PearsonsCorrelation.java	correlation	i	int	0	NIL-FOR	$<xArray.length
22192	235	12	PearsonsCorrelation.java	correlation	xArray	double[]	0	NIL-FOR	i<$.length
22193	256	8	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	$ < nVars
22193	256	8	PearsonsCorrelation.java	covarianceToCorrelation	nVars	int	0	NIL-FOR	i < $
22194	259	12	PearsonsCorrelation.java	covarianceToCorrelation	j	int	0	NIL-FOR	$ < i
22194	259	12	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	j < $
2261	279	8	PearsonsCorrelation.java	checkSufficientData	nRows	int	0	MathIllegalArgumentException	$ < 2
2261	279	8	PearsonsCorrelation.java	checkSufficientData	nCols	int	0	MathIllegalArgumentException	$ < 2
2147	133	8	Percentile.java	setData	values	double[]	1	DEF	$ == null
2148	145	8	Percentile.java	setData	values	double[]	1	DEF	$ == null
2149	261	8	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ > 100
2149	261	8	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ <= 0
2150	264	8	Percentile.java	evaluate	length	int	0	RET	$ == 0
2151	267	8	Percentile.java	evaluate	length	int	0	RET	$ == 1
2152	277	8	Percentile.java	evaluate	THIS	Percentile	1	DEF	values == $.getDataRef()
2152	277	8	Percentile.java	evaluate	values	double[]	1	DEF	$ == getDataRef()
2153	287	8	Percentile.java	evaluate	pos	double	0	RET	$ < 1
2154	290	8	Percentile.java	evaluate	n	double	0	RET	pos >= $
2154	290	8	Percentile.java	evaluate	pos	double	0	RET	$ >= n
22139	315	8	Percentile.java	select	begin	int	0	NIL-WHILE	end - $ > MIN_SELECT_SIZE
22139	315	8	Percentile.java	select	end	int	0	NIL-WHILE	$ - begin > MIN_SELECT_SIZE
2155	318	12	Percentile.java	select	THIS	Percentile	1	DEF	node < pivotsHeap.$.length
2155	318	12	Percentile.java	select	node	int	1	DEF	pivotsHeap[$] >= 0
2155	318	12	Percentile.java	select	node	int	1	DEF	$ < pivotsHeap.length
2155	318	12	Percentile.java	select	pivotsHeap	int[]	1	DEF	$[node] >= 0
2155	318	12	Percentile.java	select	pivotsHeap	int[]	1	DEF	node < $.length
2156	325	16	Percentile.java	select	THIS	Percentile	0	DEF	node < pivotsHeap.$.length
2156	325	16	Percentile.java	select	node	int	0	DEF	$ < pivotsHeap.length
2156	325	16	Percentile.java	select	pivotsHeap	int[]	0	DEF	node < $.length
2157	330	12	Percentile.java	select	pivot	int	1	RET	k == $
2157	330	12	Percentile.java	select	k	int	1	RET	$ == pivot
2158	333	19	Percentile.java	select	pivot	int	1	DEF	k < $
2158	333	19	Percentile.java	select	k	int	1	DEF	$ < pivot
2159	367	8	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wMiddle
2159	367	8	Percentile.java	medianOf3	wMiddle	double	1	RET	wBegin < $
2160	368	12	Percentile.java	medianOf3	wMiddle	double	1	RET	$ < wEnd
2160	368	12	Percentile.java	medianOf3	wEnd	double	1	RET	wMiddle < $
2161	374	12	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wEnd
2161	374	12	Percentile.java	medianOf3	wEnd	double	1	RET	wBegin < $
22140	403	8	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
22140	403	8	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
22141	404	12	Percentile.java	partition	value	double	0	NIL-WHILE	work[j] > $
22141	404	12	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
22141	404	12	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
22141	404	12	Percentile.java	partition	j	int	0	NIL-WHILE	work[$] > value
22141	404	12	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[j] > value
22142	407	12	Percentile.java	partition	value	double	0	NIL-WHILE	work[i] < $
22142	407	12	Percentile.java	partition	i	int	0	NIL-WHILE	work[$] < value
22142	407	12	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
22142	407	12	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
22142	407	12	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[i] < value
2162	411	12	Percentile.java	partition	i	int	0	DEF	$ < j
2162	411	12	Percentile.java	partition	j	int	0	DEF	i < $
2163	418	8	Percentile.java	partition	value	double	0	DEF	work[i] > $
2163	418	8	Percentile.java	partition	i	int	0	DEF	work[$] > value
2163	418	8	Percentile.java	partition	i	int	0	DEF	$ >= end
2163	418	8	Percentile.java	partition	work	double[]	0	DEF	$[i] > value
2163	418	8	Percentile.java	partition	end	int	0	DEF	i >= $
22143	434	8	Percentile.java	insertionSort	j	int	0	NIL-FOR	$ < end
22143	434	8	Percentile.java	insertionSort	end	int	0	NIL-FOR	j < $
22144	437	12	Percentile.java	insertionSort	saved	double	0	NIL-WHILE	$ < work[i]
22144	437	12	Percentile.java	insertionSort	i	int	0	NIL-WHILE	$ >= begin
22144	437	12	Percentile.java	insertionSort	i	int	0	NIL-WHILE	saved < work[$]
22144	437	12	Percentile.java	insertionSort	work	double[]	0	NIL-WHILE	saved < $[i]
22144	437	12	Percentile.java	insertionSort	begin	int	0	NIL-WHILE	i >= $
2164	464	8	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ > 100
2164	464	8	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ <= 0
2165	493	8	Percentile.java	copy	THIS	Percentile	0	DEF	source.$.cachedPivots != null
2165	493	8	Percentile.java	copy	source	Percentile	0	DEF	$.cachedPivots != null
644	138	8	Plane.java	setNormal	norm	double	0	MathArithmeticException	$ < 1.0e-10
645	308	8	Plane.java	intersection	dot	double	0	RET	FastMath.abs($) < 1.0e-10
646	323	8	Plane.java	intersection	direction	Vector3D	0	RET	$.getNorm() < 1.0e-10
647	360	8	Plane.java	intersection	determinant	double	0	RET	FastMath.abs($) < 1.0e-10
1050	112	8	PoissonDistribution.java	PoissonDistribution	p	double	0	NotStrictlyPositiveException	$ <= 0
1051	165	8	PoissonDistribution.java	probability	x	int	1	DEF	$ < 0
1051	165	8	PoissonDistribution.java	probability	x	int	1	DEF	$ == Integer.MAX_VALUE
1052	167	15	PoissonDistribution.java	probability	x	int	1	DEF	$ == 0
1053	179	8	PoissonDistribution.java	cumulativeProbability	x	int	0	RET	$ < 0
1054	182	8	PoissonDistribution.java	cumulativeProbability	x	int	0	RET	$ == Integer.MAX_VALUE
1055	292	8	PoissonDistribution.java	nextPoisson	pivot	double	1	RET	meanPoisson < $
1055	292	8	PoissonDistribution.java	nextPoisson	meanPoisson	double	1	RET	$ < pivot
20973	298	12	PoissonDistribution.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * meanPoisson
20973	298	12	PoissonDistribution.java	nextPoisson	meanPoisson	double	0	NIL-WHILE	n < 1000 * $
1056	301	16	PoissonDistribution.java	nextPoisson	p	double	1	DEF	r >= $
1056	301	16	PoissonDistribution.java	nextPoisson	r	double	1	DEF	$ >= p
1057	333	16	PoissonDistribution.java	nextPoisson	u	double	1	DEF	$ <= p1
1057	333	16	PoissonDistribution.java	nextPoisson	p1	double	1	DEF	u <= $
1058	336	20	PoissonDistribution.java	nextPoisson	lambda	double	0	DEF	x < -$
1058	336	20	PoissonDistribution.java	nextPoisson	delta	double	0	DEF	x > $
1058	336	20	PoissonDistribution.java	nextPoisson	x	double	0	DEF	$ < -lambda
1058	336	20	PoissonDistribution.java	nextPoisson	x	double	0	DEF	$ > delta
1059	343	20	PoissonDistribution.java	nextPoisson	u	double	1	DEF	$ > p1 + p2
1059	343	20	PoissonDistribution.java	nextPoisson	p1	double	1	DEF	u > $ + p2
1059	343	20	PoissonDistribution.java	nextPoisson	p2	double	1	DEF	u > p1 + $
1060	354	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < -t
1060	354	16	PoissonDistribution.java	nextPoisson	a	int	0	DEF	$ == 0
1060	354	16	PoissonDistribution.java	nextPoisson	t	double	0	DEF	v < -$
1061	360	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < qa
1061	360	16	PoissonDistribution.java	nextPoisson	qa	double	0	DEF	v < $
1062	364	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ > qr
1062	364	16	PoissonDistribution.java	nextPoisson	qr	double	0	DEF	v > $
1063	367	16	PoissonDistribution.java	nextPoisson	lambda	double	0	DEF	v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + $)) + logLambdaFactorial
1063	367	16	PoissonDistribution.java	nextPoisson	logLambda	double	0	DEF	v < y * $ - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
1063	367	16	PoissonDistribution.java	nextPoisson	logLambdaFactorial	double	0	DEF	v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + $
1063	367	16	PoissonDistribution.java	nextPoisson	y	double	0	DEF	v < $ * logLambda - ArithmeticUtils.factorialLog((int) ($ + lambda)) + logLambdaFactorial
1063	367	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
738	134	8	PolygonsSet.java	computeGeometricalProperties	THIS	PolygonsSet	1	DEF	v.$.length == 0
738	134	8	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$.length == 0
739	136	12	PolygonsSet.java	computeGeometricalProperties	tree	BSPTree<Euclidean2D>	1	DEF	$.getCut() == null
739	136	12	PolygonsSet.java	computeGeometricalProperties	tree	BSPTree<Euclidean2D>	1	DEF	(Boolean) $.getAttribute()
740	144	15	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$[0][0] == null
741	170	12	PolygonsSet.java	computeGeometricalProperties	sum	double	1	DEF	$ < 0
742	207	8	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	$.vertices == null
743	208	12	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.getTree(false).getCut() == null
20944	220	16	PolygonsSet.java	getVertices	sorted	AVLTree<ComparableSegment>	0	NIL-WHILE	$.isEmpty()
744	223	20	PolygonsSet.java	getVertices	loop	List<ComparableSegment>	0	DEF	$ != null
745	233	20	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.size() < 2
746	241	27	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.get(0).getStart() == null
747	247	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ == 0
748	255	28	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j < (array.$.length - 1)
748	255	28	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j < ($.length - 1)
748	255	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ < (array.length - 1)
749	260	28	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j == (array.$.length - 1)
749	260	28	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j == ($.length - 1)
749	260	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ == (array.length - 1)
20945	306	8	PolygonsSet.java	followLoop	globalStart	Vector2D	0	NIL-WHILE	$.distance(end) > 1.0e-10
20945	306	8	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	$ != null
20945	306	8	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	globalStart.distance($) > 1.0e-10
20945	306	8	PolygonsSet.java	followLoop	open	boolean	0	NIL-WHILE	$
20946	314	12	PolygonsSet.java	followLoop	n	Node	0	NIL-FOR	$ != null
20946	314	12	PolygonsSet.java	followLoop	n	Node	0	NIL-FOR	$.getElement().compareTo(upperRight) <= 0
20946	314	12	PolygonsSet.java	followLoop	upperRight	ComparableSegment	0	NIL-FOR	n.getElement().compareTo($) <= 0
750	319	16	PolygonsSet.java	followLoop	distance	double	0	DEF	$ < selectedDistance
750	319	16	PolygonsSet.java	followLoop	selectedDistance	double	0	DEF	distance < $
751	326	12	PolygonsSet.java	followLoop	selectedDistance	double	0	RET	$ > 1.0e-10
752	339	8	PolygonsSet.java	followLoop	loop	ArrayList<ComparableSegment>	0	RET	$.size() == 2
752	339	8	PolygonsSet.java	followLoop	open	boolean	0	RET	$
753	344	8	PolygonsSet.java	followLoop	end	Vector2D	0	MathInternalError	$ == null
753	344	8	PolygonsSet.java	followLoop	open	boolean	0	MathInternalError	$
703	120	8	PolyhedronsSet.java	computeGeometricalProperties	THIS	PolyhedronsSet	1	DEF	$.getSize() < 0
704	218	8	PolyhedronsSet.java	recurseFirstIntersection	cut	SubHyperplane<Euclidean3D>	0	RET	$ == null
705	230	8	PolyhedronsSet.java	recurseFirstIntersection	offset	double	1	DEF	$ < 0
706	238	8	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
707	241	12	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane<Euclidean3D>	0	RET	$ != null
708	248	8	PolyhedronsSet.java	recurseFirstIntersection	crossed	SubHyperplane<Euclidean3D>	0	RET	$ != null
709	252	8	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
710	255	12	PolyhedronsSet.java	recurseFirstIntersection	hit3D	Vector3D	0	RET	$ != null
711	257	16	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane<Euclidean3D>	0	RET	$ != null
712	280	8	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
712	280	8	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint($) == Location.INSIDE
712	280	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	$.getPlusOutside() != null
712	280	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	((SubPlane) $.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
713	284	8	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
713	284	8	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint($) == Location.INSIDE
713	284	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	$.getPlusInside() != null
713	284	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	((SubPlane) $.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
3445	70	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NoDataException	$ == 0
22779	73	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	c[$ - 1] == 0
22779	73	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	$ > 1
22779	73	8	PolynomialFunction.java	PolynomialFunction	c	double	0	NIL-WHILE	$[n - 1] == 0
3446	130	8	PolynomialFunction.java	evaluate	n	int	0	NoDataException	$ == 0
22780	134	8	PolynomialFunction.java	evaluate	j	int	0	NIL-FOR	$ >= 0
22781	153	8	PolynomialFunction.java	add	i	int	0	NIL-FOR	$ < lowLength
22781	153	8	PolynomialFunction.java	add	lowLength	int	0	NIL-FOR	i < $
22782	178	8	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < lowLength
22782	178	8	PolynomialFunction.java	subtract	lowLength	int	0	NIL-FOR	i < $
3447	181	8	PolynomialFunction.java	subtract	THIS	PolynomialFunction	1	DEF	$.coefficients.$.length < p.$.coefficients.$.length
3447	181	8	PolynomialFunction.java	subtract	p	PolynomialFunction	1	DEF	coefficients.length < $.coefficients.length
22783	182	12	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < highLength
22783	182	12	PolynomialFunction.java	subtract	highLength	int	0	NIL-FOR	i < $
22784	200	8	PolynomialFunction.java	negate	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
22784	200	8	PolynomialFunction.java	negate	i	int	0	NIL-FOR	$ < coefficients.length
22785	215	8	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	i < newCoefficients.$.length
22785	215	8	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	$ < newCoefficients.length
22785	215	8	PolynomialFunction.java	multiply	newCoefficients	double[]	0	NIL-FOR	i < $.length
22786	217	12	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	j < FastMath.min($.coefficients.$.length, i + 1)
22786	217	12	PolynomialFunction.java	multiply	j	int	0	NIL-FOR	$ < FastMath.min(coefficients.length, i + 1)
22786	217	12	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	j < FastMath.min(coefficients.length, $ + 1)
3448	239	8	PolynomialFunction.java	differentiate	n	int	0	NoDataException	$ == 0
3449	242	8	PolynomialFunction.java	differentiate	n	int	0	RET	$ == 1
22787	246	8	PolynomialFunction.java	differentiate	i	int	0	NIL-FOR	$ > 0
3450	288	8	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	RET	$.coefficients[0] == 0.0
3451	289	12	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	RET	$.coefficients.$.length == 1
22788	296	8	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
22788	296	8	PolynomialFunction.java	toString	i	int	0	NIL-FOR	$ < coefficients.length
3452	297	12	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] != 0
3452	297	12	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] != 0
3453	298	16	PolynomialFunction.java	toString	s	StringBuilder	1	DEF	$.length() > 0
3454	299	20	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	DEF	$.coefficients[i] < 0
3454	299	20	PolynomialFunction.java	toString	i	int	1	DEF	coefficients[$] < 0
3455	305	20	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] < 0
3455	305	20	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] < 0
3456	311	16	PolynomialFunction.java	toString	absAi	double	0	DEF	($ - 1) != 0
3457	317	16	PolynomialFunction.java	toString	i	int	0	DEF	$ > 1
3458	335	8	PolynomialFunction.java	toString	c	String	1	RET	$.endsWith(".0")
3459	354	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	$ == obj
3459	354	8	PolynomialFunction.java	equals	obj	Object	0	RET	this == $
3460	357	8	PolynomialFunction.java	equals	obj	Object	0	RET	$ instanceof PolynomialFunction
3461	361	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	Arrays.equals($.coefficients, other.$.coefficients)
3461	361	8	PolynomialFunction.java	equals	other	PolynomialFunction	0	RET	Arrays.equals(coefficients, $.coefficients)
3437	78	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.verifyInterpolationArray(x, y, false)
3437	78	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	x	double	0	DEF	verifyInterpolationArray($, y, false)
3437	78	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	y	double	0	DEF	verifyInterpolationArray(x, $, false)
3438	147	8	PolynomialFunctionLagrangeForm.java	getCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.coefficientsComputed
3439	172	8	PolynomialFunctionLagrangeForm.java	evaluate	THIS	PolynomialFunctionLagrangeForm	0	RET	$.verifyInterpolationArray(x, y, false)
3439	172	8	PolynomialFunctionLagrangeForm.java	evaluate	x	double	0	RET	verifyInterpolationArray($, y, false)
3439	172	8	PolynomialFunctionLagrangeForm.java	evaluate	y	double	0	RET	verifyInterpolationArray(x, $, false)
22770	210	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
22770	210	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
3440	216	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	dist	double	0	DEF	$ < min_dist
3440	216	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	min_dist	double	0	DEF	dist < $
22771	225	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
22771	225	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
22772	226	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	j	int	0	NIL-FOR	$ < n-i
22772	226	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	j < n-$
22772	226	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	j < $-i
3441	236	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	1	DEF	nearest < 0.5*(n-$+1)
3441	236	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	nearest	int	1	DEF	$ < 0.5*(n-i+1)
3441	236	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	1	DEF	nearest < 0.5*($-i+1)
22773	256	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
22773	256	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
22774	263	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
22774	263	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
22775	264	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
22776	272	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
22776	272	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
22777	275	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ < n
22777	275	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	j < $
3442	276	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	DEF	i != $
3442	276	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != j
22778	286	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ >= 0
3443	314	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	DimensionMismatchException	x.$.length != y.$.length
3443	314	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	DimensionMismatchException	$.length != y.length
3443	314	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	DimensionMismatchException	x.length != $.length
3444	317	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	NumberIsTooSmallException	x.$.length < 2
3444	317	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	NumberIsTooSmallException	$.length < 2
3464	140	8	PolynomialFunctionNewtonForm.java	getCoefficients	THIS	PolynomialFunctionNewtonForm	0	DEF	$.coefficientsComputed
22797	168	8	PolynomialFunctionNewtonForm.java	evaluate	i	int	0	NIL-FOR	$ >= 0
22798	183	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ <= n
22798	183	8	PolynomialFunctionNewtonForm.java	computeCoefficients	n	int	0	NIL-FOR	i <= $
22799	188	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ >= 0
22800	189	12	PolynomialFunctionNewtonForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
3465	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	a.$.length == 0
3465	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	c.$.length == 0
3465	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	NoDataException	$.length == 0
3465	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	NoDataException	$.length == 0
3466	219	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DimensionMismatchException	a.$.length != c.$.length + 1
3466	219	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	DimensionMismatchException	$.length != c.length + 1
3466	219	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	DimensionMismatchException	a.length != $.length + 1
3431	101	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NullArgumentException	$ == null
3431	101	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	NullArgumentException	$ == null
3432	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	NumberIsTooSmallException	knots.$.length < 2
3432	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NumberIsTooSmallException	$.length < 2
3433	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DimensionMismatchException	knots.$.length - 1 != polynomials.$.length
3433	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DimensionMismatchException	$.length - 1 != polynomials.length
3433	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	DimensionMismatchException	knots.length - 1 != $.length
3434	133	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v < $.knots[0]
3434	133	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v > $.knots[$.n]
3434	133	8	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ < knots[0]
3434	133	8	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ > knots[n]
3435	137	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
3436	143	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
3436	143	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
22769	165	8	PolynomialSplineFunction.java	polynomialSplineDerivative	THIS	PolynomialSplineFunction	0	NIL-FOR	i < $.n
22769	165	8	PolynomialSplineFunction.java	polynomialSplineDerivative	i	int	0	NIL-FOR	$ < n
3462	219	8	PolynomialsUtils.java	createJacobiPolynomial	key	JacobiKey	0	DEF	JACOBI_COEFFICIENTS.containsKey($)
22789	329	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < dp1
22789	329	8	PolynomialsUtils.java	shift	dp1	int	0	NIL-FOR	i < $
22790	330	12	PolynomialsUtils.java	shift	j	int	0	NIL-FOR	$ <= i
22790	330	12	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	j <= $
22791	336	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < dp1
22791	336	8	PolynomialsUtils.java	shift	dp1	int	0	NIL-FOR	i < $
22792	342	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < d
22792	342	8	PolynomialsUtils.java	shift	d	int	0	NIL-FOR	i < $
22793	343	12	PolynomialsUtils.java	shift	j	int	0	NIL-FOR	$ < d
22793	343	12	PolynomialsUtils.java	shift	d	int	0	NIL-FOR	j < $
3463	365	12	PolynomialsUtils.java	buildPolynomial	maxDegree	int	0	DEF	degree > $
3463	365	12	PolynomialsUtils.java	buildPolynomial	degree	int	0	DEF	$ > maxDegree
22794	381	8	PolynomialsUtils.java	buildPolynomial	i	int	0	NIL-FOR	$ <= degree
22794	381	8	PolynomialsUtils.java	buildPolynomial	degree	int	0	NIL-FOR	i <= $
22795	401	8	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	$ < degree
22795	401	8	PolynomialsUtils.java	computeUpToDegree	degree	int	0	NIL-FOR	k < $
22796	417	12	PolynomialsUtils.java	computeUpToDegree	i	int	0	NIL-FOR	$ < k
22796	417	12	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	i < $
2002	85	8	PowellOptimizer.java	PowellOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
2003	88	8	PowellOptimizer.java	PowellOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
22087	122	8	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
22087	122	8	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
22088	142	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
22088	142	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
2004	153	16	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	($ - fVal) > delta
2004	153	16	PowellOptimizer.java	doOptimize	delta	double	0	DEF	(fX2 - fVal) > $
2004	153	16	PowellOptimizer.java	doOptimize	fVal	double	0	DEF	(fX2 - $) > delta
2005	166	12	PowellOptimizer.java	doOptimize	stop	boolean	0	DEF	$
2006	167	16	PowellOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	DEF	$ != null
2007	171	12	PowellOptimizer.java	doOptimize	stop	boolean	0	RET	$
2008	172	16	PowellOptimizer.java	doOptimize	THIS	PowellOptimizer	1	RET	goal == $.GoalType.MINIMIZE
2008	172	16	PowellOptimizer.java	doOptimize	goal	GoalType	1	RET	$ == GoalType.MINIMIZE
22089	181	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
22089	181	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
2009	189	12	PowellOptimizer.java	doOptimize	fX	double	0	DEF	$ > fX2
2009	189	12	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	fX > $
2010	196	16	PowellOptimizer.java	doOptimize	t	double	0	DEF	$ < 0.0
22090	227	8	PowellOptimizer.java	newPointAndDirection	i	int	0	NIL-FOR	$ < n
22090	227	8	PowellOptimizer.java	newPointAndDirection	n	int	0	NIL-FOR	i < $
204	88	8	Precision.java	compareTo	THIS	Precision	1	RET	$.equals(x, y, eps)
204	88	8	Precision.java	compareTo	x	double	1	RET	equals($, y, eps)
204	88	8	Precision.java	compareTo	y	double	1	RET	equals(x, $, eps)
204	88	8	Precision.java	compareTo	eps	double	1	RET	equals(x, y, $)
205	90	15	Precision.java	compareTo	x	double	0	RET	$ < y
205	90	15	Precision.java	compareTo	y	double	0	RET	x < $
206	114	8	Precision.java	compareTo	THIS	Precision	1	RET	$.equals(x, y, maxUlps)
206	114	8	Precision.java	compareTo	x	double	1	RET	equals($, y, maxUlps)
206	114	8	Precision.java	compareTo	y	double	1	RET	equals(x, $, maxUlps)
206	114	8	Precision.java	compareTo	maxUlps	int	1	RET	equals(x, y, $)
207	116	15	Precision.java	compareTo	x	double	0	RET	$ < y
207	116	15	Precision.java	compareTo	y	double	0	RET	x < $
208	199	8	Precision.java	equals	xInt	int	0	DEF	$ < 0
209	202	8	Precision.java	equals	yInt	int	0	DEF	$ < 0
210	304	8	Precision.java	equals	xInt	long	0	DEF	$ < 0
211	307	8	Precision.java	equals	yInt	long	0	DEF	$ < 0
212	369	12	Precision.java	round	x	double	1	RET	Double.isInfinite($)
213	424	12	Precision.java	roundUnscaled	sign	double	1	DEF	$ == -1
214	434	12	Precision.java	roundUnscaled	sign	double	1	DEF	$ == -1
215	443	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
216	452	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
217	454	19	Precision.java	roundUnscaled	fraction	double	1	DEF	$ < 0.5
218	458	16	Precision.java	roundUnscaled	unscaled	double	1	DEF	FastMath.floor($) / 2.0 == FastMath.floor(Math .floor($) / 2.0)
219	470	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ >= 0.5
220	478	12	Precision.java	roundUnscaled	unscaled	double	0	MathArithmeticException	$ != FastMath.floor($)
1285	144	8	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	DimensionMismatchException	$ != null
1286	145	12	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	NonSquareOperatorException	$.getColumnDimension() != $.getRowDimension()
1287	149	12	PreconditionedIterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	m.getRowDimension() != $.getRowDimension()
1287	149	12	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	DimensionMismatchException	$.getRowDimension() != a.getRowDimension()
2051	122	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, begin, length, true)
2051	122	8	Product.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2051	122	8	Product.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2051	122	8	Product.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
22119	124	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
22119	124	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
22119	124	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2052	162	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, weights, begin, length, true)
2052	162	8	Product.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
2052	162	8	Product.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
2052	162	8	Product.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
2052	162	8	Product.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
22120	164	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
22120	164	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
22120	164	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
905	100	8	ProperBigFractionFormat.java	format	whole	BigInteger	0	DEF	BigInteger.ZERO.equals($)
906	103	12	ProperBigFractionFormat.java	format	num	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
907	138	8	ProperBigFractionFormat.java	parse	ret	BigFraction	0	RET	$ != null
908	149	8	ProperBigFractionFormat.java	parse	whole	BigInteger	0	RET	$ == null
909	162	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
910	170	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
911	201	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
912	209	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
913	216	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
914	220	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
915	234	8	ProperBigFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
888	101	8	ProperFractionFormat.java	format	whole	int	0	DEF	$ != 0
889	138	8	ProperFractionFormat.java	parse	ret	Fraction	0	RET	$ != null
890	149	8	ProperFractionFormat.java	parse	whole	Number	0	RET	$ == null
891	162	8	ProperFractionFormat.java	parse	num	Number	0	RET	$ == null
892	170	8	ProperFractionFormat.java	parse	num	Number	0	RET	$.intValue() < 0
893	201	8	ProperFractionFormat.java	parse	den	Number	0	RET	$ == null
894	209	8	ProperFractionFormat.java	parse	den	Number	0	RET	$.intValue() < 0
895	227	8	ProperFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
21318	108	8	QRDecomposition.java	QRDecomposition	minor	int	0	NIL-FOR	$ < FastMath.min(m, n)
21318	108	8	QRDecomposition.java	QRDecomposition	m	int	0	NIL-FOR	minor < FastMath.min($, n)
21318	108	8	QRDecomposition.java	QRDecomposition	n	int	0	NIL-FOR	minor < FastMath.min(m, $)
21319	120	12	QRDecomposition.java	QRDecomposition	row	int	0	NIL-FOR	$ < m
21319	120	12	QRDecomposition.java	QRDecomposition	m	int	0	NIL-FOR	row < $
1306	127	12	QRDecomposition.java	QRDecomposition	a	double	0	DEF	$ != 0.0
21320	151	16	QRDecomposition.java	QRDecomposition	col	int	0	NIL-FOR	$ < n
21320	151	16	QRDecomposition.java	QRDecomposition	n	int	0	NIL-FOR	col < $
21321	154	20	QRDecomposition.java	QRDecomposition	row	int	0	NIL-FOR	$ < m
21321	154	20	QRDecomposition.java	QRDecomposition	m	int	0	NIL-FOR	row < $
21322	160	20	QRDecomposition.java	QRDecomposition	row	int	0	NIL-FOR	$ < m
21322	160	20	QRDecomposition.java	QRDecomposition	m	int	0	NIL-FOR	row < $
1307	175	8	QRDecomposition.java	getR	THIS	QRDecomposition	0	DEF	$.cachedR == null
21323	182	12	QRDecomposition.java	getR	row	int	0	NIL-FOR	$ >= 0
21324	184	16	QRDecomposition.java	getR	col	int	0	NIL-FOR	$ < n
21324	184	16	QRDecomposition.java	getR	n	int	0	NIL-FOR	col < $
1308	201	8	QRDecomposition.java	getQ	THIS	QRDecomposition	0	DEF	$.cachedQ == null
1309	213	8	QRDecomposition.java	getQT	THIS	QRDecomposition	0	DEF	$.cachedQT == null
21325	225	12	QRDecomposition.java	getQT	minor	int	0	NIL-FOR	$ >= FastMath.min(m, n)
21325	225	12	QRDecomposition.java	getQT	n	int	0	NIL-FOR	minor >= FastMath.min(m, $)
21325	225	12	QRDecomposition.java	getQT	m	int	0	NIL-FOR	minor >= FastMath.min($, n)
21326	229	12	QRDecomposition.java	getQT	minor	int	0	NIL-FOR	$ >= 0
1310	232	16	QRDecomposition.java	getQT	qrtMinor	double[]	0	DEF	$[minor] != 0.0
1310	232	16	QRDecomposition.java	getQT	minor	int	0	DEF	qrtMinor[$] != 0.0
21327	233	20	QRDecomposition.java	getQT	col	int	0	NIL-FOR	$ < m
21327	233	20	QRDecomposition.java	getQT	m	int	0	NIL-FOR	col < $
21328	235	24	QRDecomposition.java	getQT	row	int	0	NIL-FOR	$ < m
21328	235	24	QRDecomposition.java	getQT	m	int	0	NIL-FOR	row < $
21329	240	24	QRDecomposition.java	getQT	row	int	0	NIL-FOR	$ < m
21329	240	24	QRDecomposition.java	getQT	m	int	0	NIL-FOR	row < $
1311	261	8	QRDecomposition.java	getH	THIS	QRDecomposition	0	DEF	$.cachedH == null
21330	266	12	QRDecomposition.java	getH	i	int	0	NIL-FOR	$ < m
21330	266	12	QRDecomposition.java	getH	m	int	0	NIL-FOR	i < $
21331	267	16	QRDecomposition.java	getH	j	int	0	NIL-FOR	$ < FastMath.min(i + 1, n)
21331	267	16	QRDecomposition.java	getH	i	int	0	NIL-FOR	j < FastMath.min($ + 1, n)
21331	267	16	QRDecomposition.java	getH	n	int	0	NIL-FOR	j < FastMath.min(i + 1, $)
2473	178	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
2474	185	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
2475	193	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
2476	201	8	RandomDataImpl.java	nextHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
22305	216	8	RandomDataImpl.java	nextHexString	THIS	RandomDataImpl	0	NIL-FOR	i < randomBytes.$.length
22305	216	8	RandomDataImpl.java	nextHexString	i	int	0	NIL-FOR	$ < randomBytes.length
22305	216	8	RandomDataImpl.java	nextHexString	randomBytes	byte[]	0	NIL-FOR	i < $.length
2477	227	12	RandomDataImpl.java	nextHexString	hex	String	0	DEF	$.length() == 1
2478	237	8	RandomDataImpl.java	nextInt	lower	int	0	NumberIsTooLargeException	$ >= upper
2478	237	8	RandomDataImpl.java	nextInt	upper	int	0	NumberIsTooLargeException	lower >= $
2479	248	8	RandomDataImpl.java	nextLong	lower	long	0	NumberIsTooLargeException	$ >= upper
2479	248	8	RandomDataImpl.java	nextLong	upper	long	0	NumberIsTooLargeException	lower >= $
2480	274	8	RandomDataImpl.java	nextSecureHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
22306	293	8	RandomDataImpl.java	nextSecureHexString	iter	int	0	NIL-FOR	$ < numIter + 1
22306	293	8	RandomDataImpl.java	nextSecureHexString	numIter	int	0	NIL-FOR	iter < $ + 1
22307	302	12	RandomDataImpl.java	nextSecureHexString	THIS	RandomDataImpl	0	NIL-FOR	i < hash.$.length
22307	302	12	RandomDataImpl.java	nextSecureHexString	i	int	0	NIL-FOR	$ < hash.length
22307	302	12	RandomDataImpl.java	nextSecureHexString	hash	byte[]	0	NIL-FOR	i < $.length
2481	313	16	RandomDataImpl.java	nextSecureHexString	hex	String	0	DEF	$.length() == 1
2482	324	8	RandomDataImpl.java	nextSecureInt	lower	int	0	NumberIsTooLargeException	$ >= upper
2482	324	8	RandomDataImpl.java	nextSecureInt	upper	int	0	NumberIsTooLargeException	lower >= $
2483	337	8	RandomDataImpl.java	nextSecureLong	lower	long	0	NumberIsTooLargeException	$ >= upper
2483	337	8	RandomDataImpl.java	nextSecureLong	upper	long	0	NumberIsTooLargeException	lower >= $
2484	361	8	RandomDataImpl.java	nextPoisson	mean	double	0	NotStrictlyPositiveException	$ <= 0
2485	366	8	RandomDataImpl.java	nextPoisson	pivot	double	1	RET	mean < $
2485	366	8	RandomDataImpl.java	nextPoisson	mean	double	1	RET	$ < pivot
22308	373	12	RandomDataImpl.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * mean
22308	373	12	RandomDataImpl.java	nextPoisson	mean	double	0	NIL-WHILE	n < 1000 * $
2486	376	16	RandomDataImpl.java	nextPoisson	p	double	1	DEF	r >= $
2486	376	16	RandomDataImpl.java	nextPoisson	r	double	1	DEF	$ >= p
2487	408	16	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ <= p1
2487	408	16	RandomDataImpl.java	nextPoisson	p1	double	1	DEF	u <= $
2488	411	20	RandomDataImpl.java	nextPoisson	lambda	double	0	DEF	x < -$
2488	411	20	RandomDataImpl.java	nextPoisson	delta	double	0	DEF	x > $
2488	411	20	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ < -lambda
2488	411	20	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ > delta
2489	418	20	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ > p1 + p2
2489	418	20	RandomDataImpl.java	nextPoisson	p1	double	1	DEF	u > $ + p2
2489	418	20	RandomDataImpl.java	nextPoisson	p2	double	1	DEF	u > p1 + $
2490	429	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < -t
2490	429	16	RandomDataImpl.java	nextPoisson	a	int	0	DEF	$ == 0
2490	429	16	RandomDataImpl.java	nextPoisson	t	double	0	DEF	v < -$
2491	435	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < qa
2491	435	16	RandomDataImpl.java	nextPoisson	qa	double	0	DEF	v < $
2492	439	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ > qr
2492	439	16	RandomDataImpl.java	nextPoisson	qr	double	0	DEF	v > $
2493	442	16	RandomDataImpl.java	nextPoisson	lambda	double	0	DEF	v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + $)) + logLambdaFactorial
2493	442	16	RandomDataImpl.java	nextPoisson	logLambda	double	0	DEF	v < y * $ - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
2493	442	16	RandomDataImpl.java	nextPoisson	logLambdaFactorial	double	0	DEF	v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + $
2493	442	16	RandomDataImpl.java	nextPoisson	y	double	0	DEF	v < $ * logLambda - ArithmeticUtils.factorialLog((int) ($ + lambda)) + logLambdaFactorial
2493	442	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
2494	454	8	RandomDataImpl.java	nextGaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
2495	473	8	RandomDataImpl.java	nextExponential	mean	double	0	NotStrictlyPositiveException	$ <= 0.0
22309	482	8	RandomDataImpl.java	nextExponential	u	double	0	NIL-WHILE	$ < 0.5
2496	491	8	RandomDataImpl.java	nextExponential	u	double	0	RET	$ <= EXPONENTIAL_SA_QI[0]
22310	501	8	RandomDataImpl.java	nextExponential	u	double	0	NIL-DOWHILE	$ > EXPONENTIAL_SA_QI[i]
22310	501	8	RandomDataImpl.java	nextExponential	i	int	0	NIL-DOWHILE	u > EXPONENTIAL_SA_QI[$]
2497	505	12	RandomDataImpl.java	nextExponential	u2	double	0	DEF	$ < umin
2497	505	12	RandomDataImpl.java	nextExponential	umin	double	0	DEF	u2 < $
2498	551	8	RandomDataImpl.java	nextUniform	lower	double	0	NumberIsTooLargeException	$ >= upper
2498	551	8	RandomDataImpl.java	nextUniform	upper	double	0	NumberIsTooLargeException	lower >= $
2499	556	8	RandomDataImpl.java	nextUniform	lower	double	0	MathIllegalArgumentException	Double.isInfinite($)
2499	556	8	RandomDataImpl.java	nextUniform	upper	double	0	MathIllegalArgumentException	Double.isInfinite($)
2500	560	8	RandomDataImpl.java	nextUniform	lower	double	0	MathIllegalArgumentException	Double.isNaN($)
2500	560	8	RandomDataImpl.java	nextUniform	upper	double	0	MathIllegalArgumentException	Double.isNaN($)
22311	568	8	RandomDataImpl.java	nextUniform	u	double	0	NIL-WHILE	$ <= 0.0
22311	568	8	RandomDataImpl.java	nextUniform	lowerInclusive	boolean	0	NIL-WHILE	$
2501	666	8	RandomDataImpl.java	nextGamma	shape	double	0	RET	$ < 1
2502	675	16	RandomDataImpl.java	nextGamma	p	double	1	RET	$ <= 1
2503	681	20	RandomDataImpl.java	nextGamma	x	double	1	DEF	u2 > FastMath.exp(-$)
2503	681	20	RandomDataImpl.java	nextGamma	u2	double	1	DEF	$ > FastMath.exp(-x)
2504	693	20	RandomDataImpl.java	nextGamma	x	double	1	DEF	u2 > FastMath.pow($, shape - 1)
2504	693	20	RandomDataImpl.java	nextGamma	u2	double	1	DEF	$ > FastMath.pow(x, shape - 1)
2504	693	20	RandomDataImpl.java	nextGamma	shape	double	1	DEF	u2 > FastMath.pow(x, $ - 1)
2505	713	12	RandomDataImpl.java	nextGamma	v	double	0	DEF	$ <= 0
2506	721	12	RandomDataImpl.java	nextGamma	xx	double	0	RET	u < 1 - 0.0331*$*$
2506	721	12	RandomDataImpl.java	nextGamma	u	double	0	RET	$ < 1 - 0.0331*xx*xx
2507	725	12	RandomDataImpl.java	nextGamma	v	double	0	RET	FastMath.log(u) < 0.5*xx + d*(1 - $ + FastMath.log($))
2507	725	12	RandomDataImpl.java	nextGamma	xx	double	0	RET	FastMath.log(u) < 0.5*$ + d*(1 - v + FastMath.log(v))
2507	725	12	RandomDataImpl.java	nextGamma	u	double	0	RET	FastMath.log($) < 0.5*xx + d*(1 - v + FastMath.log(v))
2507	725	12	RandomDataImpl.java	nextGamma	d	double	0	RET	FastMath.log(u) < 0.5*xx + $*(1 - v + FastMath.log(v))
2508	812	8	RandomDataImpl.java	getRan	THIS	RandomDataImpl	0	DEF	$.rand == null
2509	836	8	RandomDataImpl.java	getSecRan	THIS	RandomDataImpl	0	DEF	$.secRand == null
2510	853	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
2511	867	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
2512	883	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
2513	894	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
2514	935	8	RandomDataImpl.java	nextPermutation	n	int	0	NumberIsTooLargeException	k > $
2514	935	8	RandomDataImpl.java	nextPermutation	k	int	0	NumberIsTooLargeException	$ > n
2515	939	8	RandomDataImpl.java	nextPermutation	k	int	0	NotStrictlyPositiveException	$ <= 0
22312	947	8	RandomDataImpl.java	nextPermutation	i	int	0	NIL-FOR	$ < k
22312	947	8	RandomDataImpl.java	nextPermutation	k	int	0	NIL-FOR	i < $
2516	970	8	RandomDataImpl.java	nextSample	len	int	0	NumberIsTooLargeException	k > $
2516	970	8	RandomDataImpl.java	nextSample	k	int	0	NumberIsTooLargeException	$ > len
2517	974	8	RandomDataImpl.java	nextSample	k	int	0	NotStrictlyPositiveException	$ <= 0
22313	981	8	RandomDataImpl.java	nextSample	i	int	0	NIL-FOR	$ < k
22313	981	8	RandomDataImpl.java	nextSample	k	int	0	NIL-FOR	i < $
22314	1025	8	RandomDataImpl.java	shuffle	i	int	0	NIL-FOR	$ >= end
22314	1025	8	RandomDataImpl.java	shuffle	end	int	0	NIL-FOR	i >= $
2518	1026	12	RandomDataImpl.java	shuffle	i	int	1	DEF	$ == 0
22315	1046	8	RandomDataImpl.java	getNatural	i	int	0	NIL-FOR	$ < n
22315	1046	8	RandomDataImpl.java	getNatural	n	int	0	NIL-FOR	i < $
2573	130	8	RandomKey.java	decodeGeneric	l	int	0	DimensionMismatchException	representation.size() != $
2573	130	8	RandomKey.java	decodeGeneric	representation	List<Double>	0	DimensionMismatchException	$.size() != l
2574	133	8	RandomKey.java	decodeGeneric	l	int	0	DimensionMismatchException	sortedRepr.size() != $
2574	133	8	RandomKey.java	decodeGeneric	sortedRepr	List<Double>	0	DimensionMismatchException	$.size() != l
22340	142	8	RandomKey.java	decodeGeneric	i	int	0	NIL-FOR	$<l
22340	142	8	RandomKey.java	decodeGeneric	l	int	0	NIL-FOR	i<$
2575	160	8	RandomKey.java	isSame	another	Chromosome	0	RET	$ instanceof RandomKey<?>
2576	165	8	RandomKey.java	isSame	THIS	RandomKey	0	RET	$.getLength() != anotherRk.getLength()
2576	165	8	RandomKey.java	isSame	anotherRk	RandomKey<?>	0	RET	getLength() != $.getLength()
22341	174	8	RandomKey.java	isSame	THIS	RandomKey	0	NIL-FOR	i<$.getLength()
22341	174	8	RandomKey.java	isSame	i	int	0	NIL-FOR	$<getLength()
2577	175	12	RandomKey.java	isSame	i	int	0	RET	thisPerm.get($) != anotherPerm.get($)
2577	175	12	RandomKey.java	isSame	thisPerm	List<Integer>	0	RET	$.get(i) != anotherPerm.get(i)
2577	175	12	RandomKey.java	isSame	anotherPerm	List<Integer>	0	RET	thisPerm.get(i) != $.get(i)
2578	191	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val < 0
2578	191	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val > 1
22342	208	8	RandomKey.java	randomPermutation	i	int	0	NIL-FOR	$<l
22342	208	8	RandomKey.java	randomPermutation	l	int	0	NIL-FOR	i<$
22343	223	8	RandomKey.java	identityPermutation	i	int	0	NIL-FOR	$<l
22343	223	8	RandomKey.java	identityPermutation	l	int	0	NIL-FOR	i<$
2579	270	8	RandomKey.java	inducedPermutation	originalData	List<S>	0	DimensionMismatchException	$.size() != permutedData.size()
2579	270	8	RandomKey.java	inducedPermutation	permutedData	List<S>	0	DimensionMismatchException	originalData.size() != $.size()
22344	278	8	RandomKey.java	inducedPermutation	i	int	0	NIL-FOR	$<l
22344	278	8	RandomKey.java	inducedPermutation	l	int	0	NIL-FOR	i<$
2580	280	12	RandomKey.java	inducedPermutation	index	int	0	MathIllegalArgumentException	$ == -1
22345	305	8	RandomKey.java	baseSequence	i	int	0	NIL-FOR	$<l
22345	305	8	RandomKey.java	baseSequence	l	int	0	NIL-FOR	i<$
2548	41	8	RandomKeyMutation.java	mutate	original	Chromosome	0	MathIllegalArgumentException	$ instanceof RandomKey<?>
21117	256	8	RealMatrixFormat.java	format	i	int	0	NIL-FOR	$ < rows
21117	256	8	RealMatrixFormat.java	format	rows	int	0	NIL-FOR	i < $
21118	258	12	RealMatrixFormat.java	format	j	int	0	NIL-FOR	$ < matrix.getColumnDimension()
21118	258	12	RealMatrixFormat.java	format	matrix	RealMatrix	0	NIL-FOR	j < $.getColumnDimension()
1148	259	16	RealMatrixFormat.java	format	j	int	0	DEF	$ > 0
1149	265	12	RealMatrixFormat.java	format	i	int	0	DEF	$ < rows - 1
1149	265	12	RealMatrixFormat.java	format	rows	int	0	DEF	i < $ - 1
1150	287	8	RealMatrixFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1151	314	8	RealMatrixFormat.java	parse	trimmedPrefix	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1151	314	8	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
1151	314	8	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
21119	321	8	RealMatrixFormat.java	parse	loop	boolean	0	NIL-FOR	$
1152	323	12	RealMatrixFormat.java	parse	rowComponents	List<Number>	1	RET	$.isEmpty()
1153	325	16	RealMatrixFormat.java	parse	trimmedColumnSeparator	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1153	325	16	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedColumnSeparator, pos)
1153	325	16	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedColumnSeparator, $)
1154	326	20	RealMatrixFormat.java	parse	trimmedRowSuffix	String	1	RET	$.length() != 0
1154	326	20	RealMatrixFormat.java	parse	trimmedRowSuffix	String	1	RET	CompositeFormat.parseFixedstring(source, $, pos)
1154	326	20	RealMatrixFormat.java	parse	source	String	1	RET	CompositeFormat.parseFixedstring($, trimmedRowSuffix, pos)
1154	326	20	RealMatrixFormat.java	parse	pos	ParsePosition	1	RET	CompositeFormat.parseFixedstring(source, trimmedRowSuffix, $)
1155	331	24	RealMatrixFormat.java	parse	trimmedRowSeparator	String	1	DEF	CompositeFormat.parseFixedstring(source, $, pos)
1155	331	24	RealMatrixFormat.java	parse	source	String	1	DEF	CompositeFormat.parseFixedstring($, trimmedRowSeparator, pos)
1155	331	24	RealMatrixFormat.java	parse	pos	ParsePosition	1	DEF	CompositeFormat.parseFixedstring(source, trimmedRowSeparator, $)
1156	342	16	RealMatrixFormat.java	parse	trimmedRowPrefix	String	0	RET	$.length() != 0
1156	342	16	RealMatrixFormat.java	parse	trimmedRowPrefix	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1156	342	16	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedRowPrefix, pos)
1156	342	16	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedRowPrefix, $)
1157	348	12	RealMatrixFormat.java	parse	loop	boolean	0	RET	$
1158	351	16	RealMatrixFormat.java	parse	component	Number	1	DEF	$ != null
1159	354	20	RealMatrixFormat.java	parse	rowComponents	List<Number>	1	DEF	$.isEmpty()
1160	367	8	RealMatrixFormat.java	parse	rowComponents	List<Number>	0	DEF	$.isEmpty()
1161	373	8	RealMatrixFormat.java	parse	trimmedSuffix	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1161	373	8	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
1161	373	8	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
1162	378	8	RealMatrixFormat.java	parse	matrix	List<List<Number>>	0	RET	$.isEmpty()
21120	388	12	RealMatrixFormat.java	parse	THIS	RealMatrixFormat	0	NIL-FOR	i < $.rowList.size()
21120	388	12	RealMatrixFormat.java	parse	i	int	0	NIL-FOR	$ < rowList.size()
1576	177	8	RealVector.java	checkVectorDimensions	d	int	0	DimensionMismatchException	$ != n
1576	177	8	RealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	d != $
1577	189	8	RealVector.java	checkIndex	THIS	RealVector	0	OutOfRangeException	index >= $.getDimension()
1577	189	8	RealVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1577	189	8	RealVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1578	206	8	RealVector.java	checkIndices	dim	int	0	OutOfRangeException	start >= $
1578	206	8	RealVector.java	checkIndices	start	int	0	OutOfRangeException	$ >= dim
1578	206	8	RealVector.java	checkIndices	start	int	0	OutOfRangeException	$ < 0
1579	210	8	RealVector.java	checkIndices	dim	int	0	OutOfRangeException	end >= $
1579	210	8	RealVector.java	checkIndices	end	int	0	OutOfRangeException	$ < 0
1579	210	8	RealVector.java	checkIndices	end	int	0	OutOfRangeException	$ >= dim
1580	214	8	RealVector.java	checkIndices	start	int	0	NumberIsTooSmallException	end < $
1580	214	8	RealVector.java	checkIndices	end	int	0	NumberIsTooSmallException	$ < start
21739	234	8	RealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
21740	255	8	RealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1581	282	8	RealVector.java	mapAddToSelf	d	double	0	RET	$ != 0
21741	307	8	RealVector.java	dotProduct	i	int	0	NIL-FOR	$ < n
21741	307	8	RealVector.java	dotProduct	n	int	0	NIL-FOR	i < $
1582	328	8	RealVector.java	cosine	norm	double	0	MathArithmeticException	$ == 0
1582	328	8	RealVector.java	cosine	vNorm	double	0	MathArithmeticException	$ == 0
21742	393	8	RealVector.java	getDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
21743	414	8	RealVector.java	getNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
21744	435	8	RealVector.java	getL1Norm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
21745	455	8	RealVector.java	getLInfNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
21746	477	8	RealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
21747	502	8	RealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
21748	519	8	RealVector.java	getMinIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1583	521	12	RealVector.java	getMinIndex	entry	Entry	0	DEF	$.getValue() <= minValue
1583	521	12	RealVector.java	getMinIndex	minValue	double	0	DEF	entry.getValue() <= $
21749	550	8	RealVector.java	getMaxIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1584	552	12	RealVector.java	getMaxIndex	entry	Entry	0	DEF	$.getValue() >= maxValue
1584	552	12	RealVector.java	getMaxIndex	maxValue	double	0	DEF	entry.getValue() >= $
1585	648	8	RealVector.java	outerProduct	v	RealVector	1	DEF	$ instanceof SparseRealVector
21750	653	8	RealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
21750	653	8	RealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
21751	654	12	RealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
21751	654	12	RealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1586	673	8	RealVector.java	projection	norm2	double	0	MathArithmeticException	$ == 0.0
21752	686	8	RealVector.java	set	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
21753	702	8	RealVector.java	toArray	i	int	0	NIL-FOR	$ < dim
21753	702	8	RealVector.java	toArray	dim	int	0	NIL-FOR	i < $
1587	717	8	RealVector.java	unitVector	norm	double	0	MathArithmeticException	$ == 0
1588	732	8	RealVector.java	unitize	norm	double	0	MathArithmeticException	$ == 0
21754	828	8	RealVector.java	mapToSelf	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
21755	866	8	RealVector.java	combineToSelf	THIS	RealVector	0	NIL-FOR	i < $.getDimension()
21755	866	8	RealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < getDimension()
21756	887	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < dim
21756	887	8	RealVector.java	walkInDefaultOrder	dim	int	0	NIL-FOR	i < $
21757	909	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
21757	909	8	RealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
21758	961	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < dim
21758	961	8	RealVector.java	walkInDefaultOrder	dim	int	0	NIL-FOR	i < $
21759	983	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
21759	983	8	RealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
21480	202	8	RealVectorFormat.java	format	i	int	0	NIL-FOR	$ < vector.getDimension()
21480	202	8	RealVectorFormat.java	format	vector	RealVector	0	NIL-FOR	i < $.getDimension()
1418	203	12	RealVectorFormat.java	format	i	int	0	DEF	$ > 0
1419	226	8	RealVectorFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1420	246	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedPrefix, pos)
1420	246	8	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
1420	246	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
21481	252	8	RealVectorFormat.java	parse	loop	boolean	0	NIL-FOR	$
1421	254	12	RealVectorFormat.java	parse	components	List<Number>	0	DEF	$.isEmpty()
1422	256	16	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	DEF	CompositeFormat.parseFixedstring(source, $.trimmedSeparator, pos)
1422	256	16	RealVectorFormat.java	parse	source	String	0	DEF	CompositeFormat.parseFixedstring($, trimmedSeparator, pos)
1422	256	16	RealVectorFormat.java	parse	pos	ParsePosition	0	DEF	CompositeFormat.parseFixedstring(source, trimmedSeparator, $)
1423	261	12	RealVectorFormat.java	parse	loop	boolean	0	RET	$
1424	264	16	RealVectorFormat.java	parse	component	Number	1	DEF	$ != null
1425	278	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSuffix, pos)
1425	278	8	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
1425	278	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
21482	284	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	NIL-FOR	i < data.$.length
21482	284	8	RealVectorFormat.java	parse	i	int	0	NIL-FOR	$ < data.length
21482	284	8	RealVectorFormat.java	parse	data	double[]	0	NIL-FOR	i < $.length
21627	71	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
21627	71	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
21628	76	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	loop	boolean	0	NIL-FOR	$
21629	80	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
21629	80	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
1482	83	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	ii	int	0	DEF	c[$][$] > c[isi][isi]
1482	83	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	isi	int	0	DEF	c[ii][ii] > c[$][$]
1482	83	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	0	DEF	$[ii][ii] > $[isi][isi]
1483	90	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	swap	int[]	0	DEF	$[r] != r
1483	90	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	DEF	swap[$] != $
1484	98	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	ir	int	1	NonPositiveDefiniteMatrixException	c[$][$] < small
1484	98	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	1	NonPositiveDefiniteMatrixException	$[ir][ir] < small
1484	98	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	small	double	1	NonPositiveDefiniteMatrixException	c[ir][ir] < $
1485	100	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	NonPositiveDefiniteMatrixException	$ == 0
21630	105	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
21630	105	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
1486	106	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NonPositiveDefiniteMatrixException	c[index[$]][index[$]] < -small
1486	106	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	0	NonPositiveDefiniteMatrixException	$[index[i]][index[i]] < -small
1486	106	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	index	int[]	0	NonPositiveDefiniteMatrixException	c[$[i]][$[i]] < -small
1486	106	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	small	double	0	NonPositiveDefiniteMatrixException	c[index[i]][index[i]] < -$
21631	124	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
21631	124	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
21632	129	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	j	int	0	NIL-FOR	$ < i
21632	129	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	j < $
21633	145	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
21633	145	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
21634	146	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	j	int	0	NIL-FOR	$ < r
21634	146	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	NIL-FOR	j < $
628	44	8	RegionFactory.java	buildConvex	THIS	RegionFactory	0	RET	hyperplanes.$.length == 0
628	44	8	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$.length == 0
628	44	8	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$ == null
629	55	12	RegionFactory.java	buildConvex	THIS	RegionFactory	0	DEF	node.insertCut($.hyperplane)
629	55	12	RegionFactory.java	buildConvex	node	BSPTree<S>	0	DEF	$.insertCut(hyperplane)
630	137	8	RegionFactory.java	recurseComplement	node	BSPTree<S>	0	RET	$.getCut() == null
631	143	8	RegionFactory.java	recurseComplement	attribute	BoundaryAttribute<S>	0	DEF	$ != null
2390	100	8	RegressionResults.java	RegressionResults	copyData	boolean	1	DEF	$
22276	103	12	RegressionResults.java	RegressionResults	THIS	RegressionResults	0	NIL-FOR	i < varcov.$.length
22276	103	12	RegressionResults.java	RegressionResults	i	int	0	NIL-FOR	$ < varcov.length
22276	103	12	RegressionResults.java	RegressionResults	varcov	double[][]	0	NIL-FOR	i < $.length
2391	117	8	RegressionResults.java	RegressionResults	rank	int	0	DEF	$ > 0
2392	129	8	RegressionResults.java	RegressionResults	containsConstant	boolean	1	DEF	$
2393	151	8	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	RET	$.parameters == null
2394	154	8	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	OutOfRangeException	index >= $.parameters.length
2394	154	8	RegressionResults.java	getParameterEstimate	index	int	0	OutOfRangeException	$ < 0
2394	154	8	RegressionResults.java	getParameterEstimate	index	int	0	OutOfRangeException	$ >= this.parameters.length
2395	171	8	RegressionResults.java	getParameterEstimates	THIS	RegressionResults	0	RET	$.parameters == null
2396	188	8	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	RET	$.parameters == null
2397	191	8	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	OutOfRangeException	index >= $.parameters.length
2397	191	8	RegressionResults.java	getStdErrorOfEstimate	index	int	0	OutOfRangeException	$ >= this.parameters.length
2397	191	8	RegressionResults.java	getStdErrorOfEstimate	index	int	0	OutOfRangeException	$ < 0
2398	195	8	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	$ > Double.MIN_VALUE
2398	195	8	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	Double.isNaN($)
2399	213	8	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	RET	$.parameters == null
22277	217	8	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	NIL-FOR	i < $.parameters.length
22277	217	8	RegressionResults.java	getStdErrorOfEstimates	i	int	0	NIL-FOR	$ < this.parameters.length
2400	219	12	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	Double.isNaN($)
2400	219	12	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	$ > Double.MIN_VALUE
2401	241	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
2402	244	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	OutOfRangeException	i >= $.parameters.length
2402	244	8	RegressionResults.java	getCovarianceOfParameters	i	int	0	OutOfRangeException	$ >= this.parameters.length
2402	244	8	RegressionResults.java	getCovarianceOfParameters	i	int	0	OutOfRangeException	$ < 0
2403	247	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	OutOfRangeException	j >= $.parameters.length
2403	247	8	RegressionResults.java	getCovarianceOfParameters	j	int	0	OutOfRangeException	$ < 0
2403	247	8	RegressionResults.java	getCovarianceOfParameters	j	int	0	OutOfRangeException	$ >= this.parameters.length
2404	262	8	RegressionResults.java	getNumberOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
2405	401	8	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.isSymmetricVCD
2406	402	12	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.varCovData.length > 1
2407	404	16	RegressionResults.java	getVcvElement	i	int	1	RET	$ == j
2407	404	16	RegressionResults.java	getVcvElement	j	int	1	RET	i == $
2408	406	23	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	i >= $.varCovData[j].length
2408	406	23	RegressionResults.java	getVcvElement	i	int	1	RET	$ >= varCovData[j].length
2408	406	23	RegressionResults.java	getVcvElement	j	int	1	RET	i >= varCovData[$].length
2409	412	16	RegressionResults.java	getVcvElement	i	int	1	RET	$ > j
2409	412	16	RegressionResults.java	getVcvElement	j	int	1	RET	i > $
175	183	8	ResizableDoubleArray.java	ResizableDoubleArray	initialArray	double[]	1	DEF	$ == null
176	302	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + $.numElements) > $.internalArray.$.length
177	306	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
178	345	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	($.startIndex + ($.numElements + 1)) > $.internalArray.$.length
179	355	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
180	372	8	ResizableDoubleArray.java	substituteMostRecentElement	THIS	ResizableDoubleArray	0	MathIllegalStateException	$.numElements < 1
181	397	8	ResizableDoubleArray.java	checkContractExpand	contraction	float	0	MathIllegalArgumentException	$ < expansion
181	397	8	ResizableDoubleArray.java	checkContractExpand	expansion	float	0	MathIllegalArgumentException	contraction < $
182	403	8	ResizableDoubleArray.java	checkContractExpand	contraction	float	0	MathIllegalArgumentException	$ <= 1.0
183	409	8	ResizableDoubleArray.java	checkContractExpand	expansion	float	0	MathIllegalArgumentException	$ <= 1.0
184	496	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	1	MathIllegalArgumentException	i > $.numElements
184	496	8	ResizableDoubleArray.java	discardExtremeElements	i	int	1	MathIllegalArgumentException	$ > numElements
185	500	14	ResizableDoubleArray.java	discardExtremeElements	i	int	1	MathIllegalArgumentException	$ < 0
186	507	12	ResizableDoubleArray.java	discardExtremeElements	front	boolean	0	DEF	$
187	511	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
188	533	8	ResizableDoubleArray.java	expand	THIS	ResizableDoubleArray	1	DEF	$.expansionMode == MULTIPLICATIVE_MODE
189	582	8	ResizableDoubleArray.java	getElement	THIS	ResizableDoubleArray	1	ArrayIndexOutOfBoundsException	index >= $.numElements
189	582	8	ResizableDoubleArray.java	getElement	index	int	1	ArrayIndexOutOfBoundsException	$ >= numElements
190	584	15	ResizableDoubleArray.java	getElement	index	int	1	RET	$ >= 0
191	696	8	ResizableDoubleArray.java	setElement	index	int	0	ArrayIndexOutOfBoundsException	$ < 0
192	699	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	index + 1 > $.numElements
192	699	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ + 1 > numElements
193	702	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + index) >= $.internalArray.$.length
193	702	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	(startIndex + $) >= internalArray.length
194	735	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	MathIllegalArgumentException	$ != MULTIPLICATIVE_MODE
194	735	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	MathIllegalArgumentException	$ != ADDITIVE_MODE
195	755	8	ResizableDoubleArray.java	setInitialCapacity	initialCapacity	int	1	DEF	$ > 0
196	777	8	ResizableDoubleArray.java	setNumElements	i	int	0	MathIllegalArgumentException	$ < 0
197	785	8	ResizableDoubleArray.java	setNumElements	THIS	ResizableDoubleArray	0	DEF	($.startIndex + i) > $.internalArray.$.length
197	785	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	(startIndex + $) > internalArray.length
198	800	8	ResizableDoubleArray.java	shouldContract	THIS	ResizableDoubleArray	1	RET	$.expansionMode == MULTIPLICATIVE_MODE
199	881	8	ResizableDoubleArray.java	equals	THIS	ResizableDoubleArray	0	RET	object == $
199	881	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ == this
200	884	7	ResizableDoubleArray.java	equals	object	Object	0	RET	$ instanceof ResizableDoubleArray == false
201	897	15	ResizableDoubleArray.java	equals	result	boolean	1	RET	$
3311	78	8	RiddersSolver.java	doSolve	y1	double	0	RET	$ == 0
3312	81	8	RiddersSolver.java	doSolve	y2	double	0	RET	$ == 0
3313	95	12	RiddersSolver.java	doSolve	y3	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3313	95	12	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y3) <= $
3314	106	12	RiddersSolver.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
3314	106	12	RiddersSolver.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
3314	106	12	RiddersSolver.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
3315	109	12	RiddersSolver.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3315	109	12	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
3316	115	12	RiddersSolver.java	doSolve	correction	double	1	DEF	$ > 0.0
3317	116	16	RiddersSolver.java	doSolve	y	double	1	DEF	FastMath.signum(y1) + FastMath.signum($) == 0.0
3317	116	16	RiddersSolver.java	doSolve	y1	double	1	DEF	FastMath.signum($) + FastMath.signum(y) == 0.0
3318	126	16	RiddersSolver.java	doSolve	y	double	1	DEF	FastMath.signum(y2) + FastMath.signum($) == 0.0
3318	126	16	RiddersSolver.java	doSolve	y2	double	1	DEF	FastMath.signum($) + FastMath.signum(y) == 0.0
3493	64	8	RombergIntegrator.java	RombergIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > ROMBERG_MAX_ITERATIONS_COUNT
3494	86	8	RombergIntegrator.java	RombergIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > ROMBERG_MAX_ITERATIONS_COUNT
22818	124	12	RombergIntegrator.java	doIntegrate	j	int	0	NIL-FOR	$ <= i
22818	124	12	RombergIntegrator.java	doIntegrate	i	int	0	NIL-FOR	j <= $
3495	131	12	RombergIntegrator.java	doIntegrate	THIS	RombergIntegrator	0	RET	i >= $.getMinimalIterationCount()
3495	131	12	RombergIntegrator.java	doIntegrate	i	int	0	RET	$ >= getMinimalIterationCount()
3496	134	16	RombergIntegrator.java	doIntegrate	THIS	RombergIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
3496	134	16	RombergIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
3496	134	16	RombergIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
3496	134	16	RombergIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
767	91	8	RootsOfUnity.java	isCounterClockWise	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
768	119	8	RootsOfUnity.java	computeRoots	n	int	0	ZeroException	$ == 0
769	129	8	RootsOfUnity.java	computeRoots	THIS	RootsOfUnity	0	RET	absN == $.omegaCount
769	129	8	RootsOfUnity.java	computeRoots	absN	int	0	RET	$ == omegaCount
20951	143	8	RootsOfUnity.java	computeRoots	i	int	0	NIL-FOR	$ < absN
20951	143	8	RootsOfUnity.java	computeRoots	absN	int	0	NIL-FOR	i < $
770	165	8	RootsOfUnity.java	getReal	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
771	169	8	RootsOfUnity.java	getReal	THIS	RootsOfUnity	0	OutOfRangeException	k >= $.omegaCount
771	169	8	RootsOfUnity.java	getReal	k	int	0	OutOfRangeException	$ >= omegaCount
771	169	8	RootsOfUnity.java	getReal	k	int	0	OutOfRangeException	$ < 0
772	192	8	RootsOfUnity.java	getImaginary	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
773	196	8	RootsOfUnity.java	getImaginary	THIS	RootsOfUnity	0	OutOfRangeException	k >= $.omegaCount
773	196	8	RootsOfUnity.java	getImaginary	k	int	0	OutOfRangeException	$ < 0
773	196	8	RootsOfUnity.java	getImaginary	k	int	0	OutOfRangeException	$ >= omegaCount
651	137	4	Rotation.java	Rotation	needsNormalization	boolean	0	DEF	$
652	177	4	Rotation.java	Rotation	norm	double	0	MathIllegalArgumentException	$ == 0
653	225	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[1].length != 3
653	225	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[0].length != 3
653	225	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[2].length != 3
653	225	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m.$.length != 3
653	225	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[1].length != 3
653	225	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[0].length != 3
653	225	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[2].length != 3
653	225	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$.length != 3
654	239	4	Rotation.java	Rotation	det	double	0	NotARotationMatrixException	$ < 0.0
655	330	4	Rotation.java	Rotation	normProduct	double	0	MathIllegalArgumentException	$ == 0
656	336	4	Rotation.java	Rotation	normProduct	double	1	DEF	dot < ((2.0e-15 - 1.0) * $)
656	336	4	Rotation.java	Rotation	dot	double	1	DEF	$ < ((2.0e-15 - 1.0) * normProduct)
657	408	6	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
658	417	10	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
659	426	14	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
660	494	4	Rotation.java	getAxis	squaredSine	double	1	RET	$ == 0
661	496	11	Rotation.java	getAxis	THIS	Rotation	0	RET	$.q0 < 0
662	509	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 < -0.1
662	509	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 > 0.1
663	511	11	Rotation.java	getAngle	THIS	Rotation	0	RET	$.q0 < 0
664	555	4	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
665	564	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
665	564	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
666	573	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
667	582	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
667	582	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
668	591	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
669	600	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
669	600	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
670	609	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
671	618	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
671	618	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
672	627	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
673	636	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
673	636	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
674	645	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
675	654	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
675	654	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
676	663	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
677	672	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
677	672	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
678	681	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
679	690	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
679	690	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
680	699	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
681	708	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
681	708	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
682	717	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
683	726	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
683	726	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
684	735	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
685	744	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
685	744	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
686	762	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
686	762	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
20938	960	4	Rotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
687	1001	6	Rotation.java	orthogonalizeMatrix	fn	double	0	RET	FastMath.abs(fn1 - $) <= threshold
687	1001	6	Rotation.java	orthogonalizeMatrix	fn1	double	0	RET	FastMath.abs($ - fn) <= threshold
687	1001	6	Rotation.java	orthogonalizeMatrix	threshold	double	0	RET	FastMath.abs(fn1 - fn) <= $
22500	105	4	RungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
22500	105	4	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
22501	124	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
22502	132	6	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
22502	132	6	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
22503	134	10	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
22503	134	10	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
22503	134	10	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
22504	136	14	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
22504	136	14	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
22505	147	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
22505	147	6	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
22505	147	6	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
22506	149	10	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
22506	149	10	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
2774	161	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	DEF	$.isLastStep
2775	169	10	RungeKuttaIntegrator.java	integrate	nextIsLast	boolean	0	DEF	$
2664	87	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	1	DEF	interpolator.$.currentState != null
2664	87	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
22400	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < interpolator.$.yDotK.$.length
22400	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.yDotK.length
22400	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.length
22401	157	4	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
22401	157	4	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
22402	163	4	RungeKuttaStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < kMax
22402	163	4	RungeKuttaStepInterpolator.java	writeExternal	kMax	int	0	NIL-FOR	k < $
22403	164	6	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
22403	164	6	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
2665	183	4	RungeKuttaStepInterpolator.java	readExternal	n	int	1	DEF	$ < 0
22404	187	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
22404	187	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
22405	194	4	RungeKuttaStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
22405	194	4	RungeKuttaStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
22406	196	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
22406	196	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
2666	203	4	RungeKuttaStepInterpolator.java	readExternal	THIS	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
1065	109	8	SaddlePointExpansion.java	getStirlingError	z	double	1	DEF	$ < 15.0
1066	111	12	SaddlePointExpansion.java	getStirlingError	z2	double	1	DEF	FastMath.floor($) == $
1067	147	8	SaddlePointExpansion.java	getDeviancePart	x	double	1	DEF	FastMath.abs($ - mu) < 0.1 * ($ + mu)
1067	147	8	SaddlePointExpansion.java	getDeviancePart	mu	double	1	DEF	FastMath.abs(x - $) < 0.1 * (x + $)
20975	155	12	SaddlePointExpansion.java	getDeviancePart	s1	double	0	NIL-WHILE	$ != s
20975	155	12	SaddlePointExpansion.java	getDeviancePart	s	double	0	NIL-WHILE	s1 != $
1068	180	8	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == 0
1069	181	12	SaddlePointExpansion.java	logBinomialProbability	p	double	1	DEF	$ < 0.1
1070	186	15	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == n
1070	186	15	SaddlePointExpansion.java	logBinomialProbability	n	int	1	DEF	x == $
1071	187	12	SaddlePointExpansion.java	logBinomialProbability	q	double	1	DEF	$ < 0.1
1434	70	8	SchurTransformer.java	SchurTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1435	93	8	SchurTransformer.java	getP	THIS	SchurTransformer	0	DEF	$.cachedP == null
1436	106	8	SchurTransformer.java	getPT	THIS	SchurTransformer	0	DEF	$.cachedPt == null
1437	120	8	SchurTransformer.java	getT	THIS	SchurTransformer	0	DEF	$.cachedT == null
21497	144	8	SchurTransformer.java	transform	idx	int	0	NIL-WHILE	$ >= 0
1438	150	12	SchurTransformer.java	transform	l	int	1	DEF	$ == idx
1438	150	12	SchurTransformer.java	transform	idx	int	1	DEF	l == $
1439	155	19	SchurTransformer.java	transform	l	int	1	DEF	$ == idx - 1
1439	155	19	SchurTransformer.java	transform	idx	int	1	DEF	l == $ - 1
1440	165	16	SchurTransformer.java	transform	q	double	0	DEF	$ >= 0
1441	166	20	SchurTransformer.java	transform	p	double	1	DEF	$ >= 0
21498	180	20	SchurTransformer.java	transform	j	int	0	NIL-FOR	$ < n
21498	180	20	SchurTransformer.java	transform	n	int	0	NIL-FOR	j < $
21499	187	20	SchurTransformer.java	transform	i	int	0	NIL-FOR	$ <= idx
21499	187	20	SchurTransformer.java	transform	idx	int	0	NIL-FOR	i <= $
21500	194	20	SchurTransformer.java	transform	i	int	0	NIL-FOR	$ <= n - 1
21500	194	20	SchurTransformer.java	transform	n	int	0	NIL-FOR	i <= $ - 1
1442	208	16	SchurTransformer.java	transform	iteration	int	0	MaxCountExceededException	++$ > MAX_ITERATIONS
21501	219	16	SchurTransformer.java	transform	m	int	0	NIL-WHILE	$ >= l
21501	219	16	SchurTransformer.java	transform	l	int	0	NIL-WHILE	m >= $
1443	228	20	SchurTransformer.java	transform	m	int	0	DEF	$ == l
1443	228	20	SchurTransformer.java	transform	l	int	0	DEF	m == $
21502	232	20	SchurTransformer.java	transform	THIS	SchurTransformer	0	NIL-FOR	i < hVec.$.length
21502	232	20	SchurTransformer.java	transform	i	int	0	NIL-FOR	$ < hVec.length
21502	232	20	SchurTransformer.java	transform	hVec	double[]	0	NIL-FOR	i < $.length
1444	243	20	SchurTransformer.java	transform	THIS	SchurTransformer	0	DEF	lhs < $.epsilon * rhs
1444	243	20	SchurTransformer.java	transform	lhs	double	0	DEF	$ < epsilon * rhs
1444	243	20	SchurTransformer.java	transform	rhs	double	0	DEF	lhs < epsilon * $
21503	261	8	SchurTransformer.java	getNorm	THIS	SchurTransformer	0	NIL-FOR	i < $.matrixT.$.length
21503	261	8	SchurTransformer.java	getNorm	i	int	0	NIL-FOR	$ < matrixT.length
21504	263	12	SchurTransformer.java	getNorm	THIS	SchurTransformer	0	NIL-FOR	j < $.matrixT.$.length
21504	263	12	SchurTransformer.java	getNorm	j	int	0	NIL-FOR	$ < matrixT.length
21505	279	8	SchurTransformer.java	findSmallSubDiagonalElement	l	int	0	NIL-WHILE	$ > 0
1445	281	12	SchurTransformer.java	findSmallSubDiagonalElement	THIS	SchurTransformer	0	DEF	Precision.equals(s, 0.0, $.epsilon)
1445	281	12	SchurTransformer.java	findSmallSubDiagonalElement	s	double	0	DEF	Precision.equals($, 0.0, epsilon)
1446	284	12	SchurTransformer.java	findSmallSubDiagonalElement	THIS	SchurTransformer	0	DEF	FastMath.abs($.matrixT[l][l - 1]) < $.epsilon * s
1446	284	12	SchurTransformer.java	findSmallSubDiagonalElement	s	double	0	DEF	FastMath.abs(matrixT[l][l - 1]) < epsilon * $
1446	284	12	SchurTransformer.java	findSmallSubDiagonalElement	l	int	0	DEF	FastMath.abs(matrixT[$][$ - 1]) < epsilon * s
1447	304	8	SchurTransformer.java	computeShift	l	int	0	DEF	$ < idx
1447	304	8	SchurTransformer.java	computeShift	idx	int	0	DEF	l < $
1448	310	8	SchurTransformer.java	computeShift	iteration	int	0	DEF	$ == 10
21506	312	12	SchurTransformer.java	computeShift	i	int	0	NIL-FOR	$ <= idx
21506	312	12	SchurTransformer.java	computeShift	idx	int	0	NIL-FOR	i <= $
1449	321	8	SchurTransformer.java	computeShift	iteration	int	0	DEF	$ == 30
1450	324	12	SchurTransformer.java	computeShift	THIS	SchurTransformer	0	DEF	Precision.compareTo(s, 0.0d, $.epsilon) > 0
1450	324	12	SchurTransformer.java	computeShift	s	double	0	DEF	Precision.compareTo($, 0.0d, epsilon) > 0
1451	326	16	SchurTransformer.java	computeShift	THIS	SchurTransformer	0	DEF	shift.$.y < shift.$.x
1451	326	16	SchurTransformer.java	computeShift	shift	ShiftInfo	0	DEF	$.y < $.x
21507	330	16	SchurTransformer.java	computeShift	i	int	0	NIL-FOR	$ <= idx
21507	330	16	SchurTransformer.java	computeShift	idx	int	0	NIL-FOR	i <= $
21508	356	8	SchurTransformer.java	performDoubleQRStep	k	int	0	NIL-FOR	$ <= idx - 1
21508	356	8	SchurTransformer.java	performDoubleQRStep	idx	int	0	NIL-FOR	k <= $ - 1
1452	358	12	SchurTransformer.java	performDoubleQRStep	k	int	0	DEF	$ != m
1452	358	12	SchurTransformer.java	performDoubleQRStep	m	int	0	DEF	k != $
1453	363	16	SchurTransformer.java	performDoubleQRStep	THIS	SchurTransformer	0	DEF	Precision.equals(shift.$.x, 0.0, $.epsilon)
1453	363	16	SchurTransformer.java	performDoubleQRStep	shift	ShiftInfo	0	DEF	Precision.equals($.x, 0.0, epsilon)
1454	369	12	SchurTransformer.java	performDoubleQRStep	THIS	SchurTransformer	0	DEF	Precision.equals(shift.$.x, 0.0, $.epsilon)
1454	369	12	SchurTransformer.java	performDoubleQRStep	shift	ShiftInfo	0	DEF	Precision.equals($.x, 0.0, epsilon)
1455	373	12	SchurTransformer.java	performDoubleQRStep	p	double	0	DEF	$ < 0.0
1456	376	12	SchurTransformer.java	performDoubleQRStep	THIS	SchurTransformer	0	DEF	Precision.equals(s, 0.0, $.epsilon)
1456	376	12	SchurTransformer.java	performDoubleQRStep	s	double	0	DEF	Precision.equals($, 0.0, epsilon)
1457	377	16	SchurTransformer.java	performDoubleQRStep	k	int	1	DEF	$ != m
1457	377	16	SchurTransformer.java	performDoubleQRStep	m	int	1	DEF	k != $
1458	379	23	SchurTransformer.java	performDoubleQRStep	l	int	0	DEF	$ != m
1458	379	23	SchurTransformer.java	performDoubleQRStep	m	int	0	DEF	l != $
21509	390	16	SchurTransformer.java	performDoubleQRStep	j	int	0	NIL-FOR	$ < n
21509	390	16	SchurTransformer.java	performDoubleQRStep	n	int	0	NIL-FOR	j < $
1459	392	20	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
21510	401	16	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= FastMath.min(idx, k + 3)
21510	401	16	SchurTransformer.java	performDoubleQRStep	k	int	0	NIL-FOR	i <= FastMath.min(idx, $ + 3)
21510	401	16	SchurTransformer.java	performDoubleQRStep	idx	int	0	NIL-FOR	i <= FastMath.min($, k + 3)
1460	403	20	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
21511	413	16	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= high
21511	413	16	SchurTransformer.java	performDoubleQRStep	high	int	0	NIL-FOR	i <= $
1461	415	20	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
21512	426	8	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= idx
21512	426	8	SchurTransformer.java	performDoubleQRStep	idx	int	0	NIL-FOR	i <= $
1462	428	12	SchurTransformer.java	performDoubleQRStep	i	int	0	DEF	$ > m+2
1462	428	12	SchurTransformer.java	performDoubleQRStep	m	int	0	DEF	i > $+2
3332	83	8	SecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
3333	86	8	SecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
3334	107	12	SecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
3335	120	12	SecantSolver.java	doSolve	f1	double	0	RET	FastMath.abs($) <= ftol
3335	120	12	SecantSolver.java	doSolve	ftol	double	0	RET	FastMath.abs(f1) <= $
3336	126	12	SecantSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1), atol)
3336	126	12	SecantSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($), atol)
3336	126	12	SecantSolver.java	doSolve	atol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), $)
3336	126	12	SecantSolver.java	doSolve	rtol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1), atol)
2091	80	8	SecondMoment.java	increment	THIS	SecondMoment	0	DEF	$.n < 1
2101	182	8	SemiVariance.java	evaluate	values	double[]	0	NullArgumentException	$ == null
2102	280	8	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 0
2102	280	8	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 0
2103	283	12	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 1
2103	283	12	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 1
22133	290	16	SemiVariance.java	evaluate	i	int	0	NIL-FOR	$ < length
22133	290	16	SemiVariance.java	evaluate	length	int	0	NIL-FOR	i < $
2104	291	20	SemiVariance.java	evaluate	i	int	0	DEF	(values[$] > cutoff) == booleanDirection
2104	291	20	SemiVariance.java	evaluate	booleanDirection	boolean	0	DEF	(values[i] > cutoff) == $
2104	291	20	SemiVariance.java	evaluate	values	double[]	0	DEF	($[i] > cutoff) == booleanDirection
2104	291	20	SemiVariance.java	evaluate	cutoff	double	0	DEF	(values[i] > $) == booleanDirection
2105	297	16	SemiVariance.java	evaluate	corrected	boolean	1	RET	$
21819	83	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	NIL-FOR	i < p.$.length
21819	83	8	SimplePointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
21819	83	8	SimplePointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1709	88	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > size * $.getRelativeThreshold()
1709	88	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > $.getAbsoluteThreshold()
1709	88	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1709	88	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1709	88	12	SimplePointChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
2410	133	8	SimpleRegression.java	addData	THIS	SimpleRegression	1	DEF	$.n == 0
2411	137	12	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.hasIntercept
2412	149	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.hasIntercept
2413	174	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 0
2414	175	12	SimpleRegression.java	removeData	THIS	SimpleRegression	1	DEF	$.hasIntercept
22278	218	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
22278	218	8	SimpleRegression.java	addData	i	int	0	NIL-FOR	$ < data.length
22278	218	8	SimpleRegression.java	addData	data	double[][]	0	NIL-FOR	i < $.length
2415	219	12	SimpleRegression.java	addData	THIS	SimpleRegression	0	ModelSpecificationException	data[i].length < 2
2415	219	12	SimpleRegression.java	addData	i	int	0	ModelSpecificationException	data[$].length < 2
2415	219	12	SimpleRegression.java	addData	data	double[][]	0	ModelSpecificationException	$[i].length < 2
2416	236	8	SimpleRegression.java	addObservation	THIS	SimpleRegression	0	ModelSpecificationException	x.$.length == 0
2416	236	8	SimpleRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$ == null
2416	236	8	SimpleRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length == 0
2417	253	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	ModelSpecificationException	x.$.length != y.$.length
2417	253	8	SimpleRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$ == null
2417	253	8	SimpleRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length != y.length
2417	253	8	SimpleRegression.java	addObservations	y	double[]	0	ModelSpecificationException	x.length != $.length
2417	253	8	SimpleRegression.java	addObservations	y	double[]	0	ModelSpecificationException	$ == null
22279	260	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	NIL-FOR	i < x.$.length
22279	260	8	SimpleRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
22279	260	8	SimpleRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
2418	261	12	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	DEF	x[i].length == 0
2418	261	12	SimpleRegression.java	addObservations	i	int	0	DEF	x[$].length == 0
2418	261	12	SimpleRegression.java	addObservations	i	int	0	DEF	x[$] == null
2418	261	12	SimpleRegression.java	addObservations	x	double[][]	0	DEF	$[i].length == 0
2418	261	12	SimpleRegression.java	addObservations	x	double[][]	0	DEF	$[i] == null
2419	265	8	SimpleRegression.java	addObservations	obsOk	boolean	0	ModelSpecificationException	$
22280	270	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	NIL-FOR	i < x.$.length
22280	270	8	SimpleRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
22280	270	8	SimpleRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
22281	289	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
22281	289	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	$.n > 0
22281	289	8	SimpleRegression.java	removeData	i	int	0	NIL-FOR	$ < data.length
22281	289	8	SimpleRegression.java	removeData	data	double[][]	0	NIL-FOR	i < $.length
2420	334	8	SimpleRegression.java	predict	THIS	SimpleRegression	0	RET	$.hasIntercept
2421	390	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	$.n < 2
2422	393	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	FastMath.abs($.sumXX) < 10 * Double.MIN_VALUE
2423	443	8	SimpleRegression.java	getTotalSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
2424	457	8	SimpleRegression.java	getXSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
2425	503	8	SimpleRegression.java	getMeanSquareError	THIS	SimpleRegression	0	RET	$.n < 3
2426	526	8	SimpleRegression.java	getR	b1	double	0	DEF	$ < 0
2427	564	8	SimpleRegression.java	getInterceptStdErr	THIS	SimpleRegression	0	RET	$.hasIntercept
2428	644	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ >= 1
2428	644	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ <= 0
2429	692	6	SimpleRegression.java	getIntercept	THIS	SimpleRegression	0	RET	$.hasIntercept
2430	714	8	SimpleRegression.java	regress	THIS	SimpleRegression	1	NoDataException:RET	$.hasIntercept
2431	715	10	SimpleRegression.java	regress	THIS	SimpleRegression	0	NoDataException	$.n < 3
2432	718	10	SimpleRegression.java	regress	THIS	SimpleRegression	1	RET	FastMath.abs( $.sumXX ) > Precision.SAFE_MIN
2433	741	10	SimpleRegression.java	regress	THIS	SimpleRegression	0	NoDataException	$.n < 2
2434	744	10	SimpleRegression.java	regress	THIS	SimpleRegression	1	RET	Double.isNaN($.sumXX)
2435	770	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	MathIllegalArgumentException	variablesToInclude.$.length == 0
2435	770	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	MathIllegalArgumentException	$.length == 0
2435	770	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	MathIllegalArgumentException	$ == null
2436	773	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	variablesToInclude.$.length > 2
2436	773	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	variablesToInclude.$.length > 1
2436	773	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	$.hasIntercept
2436	773	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > 2
2436	773	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > 1
2437	779	8	SimpleRegression.java	regress	THIS	SimpleRegression	1	OutOfRangeException:RET	$.hasIntercept
2438	780	12	SimpleRegression.java	regress	THIS	SimpleRegression	1	OutOfRangeException:RET	variablesToInclude.$.length == 2
2438	780	12	SimpleRegression.java	regress	variablesToInclude	int[]	1	OutOfRangeException:RET	$.length == 2
2439	781	16	SimpleRegression.java	regress	variablesToInclude	int[]	1	ModelSpecificationException	$[0] == 1
2440	783	22	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
2441	786	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[1] != 1
2442	791	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 1
2442	791	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
2443	796	16	SimpleRegression.java	regress	variablesToInclude	int[]	1	RET	$[0] == 0
2444	804	22	SimpleRegression.java	regress	variablesToInclude	int[]	0	RET	$[0] == 1
2445	810	20	SimpleRegression.java	regress	_sxx	double	1	RET	Double.isNaN($)
2446	826	12	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
21820	80	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	NIL-FOR	i < p.$.length
21820	80	8	SimpleVectorValueChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
21820	80	8	SimpleVectorValueChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1710	85	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > size * $.getRelativeThreshold()
1710	85	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > $.getAbsoluteThreshold()
1710	85	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1710	85	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1710	85	12	SimpleVectorValueChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
2020	129	8	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NullArgumentException	$.simplex == null
2021	161	12	SimplexOptimizer.java	doOptimize	iteration	int	0	RET	$ > 0
22100	163	16	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NIL-FOR	i < $.simplex.getSize()
22100	163	16	SimplexOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < simplex.getSize()
2022	167	16	SimplexOptimizer.java	doOptimize	converged	boolean	0	RET	$
21798	72	8	SimplexSolver.java	getPivotColumn	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
21798	72	8	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
1668	76	12	SimplexSolver.java	getPivotColumn	entry	double	0	DEF	$ < minValue
1668	76	12	SimplexSolver.java	getPivotColumn	minValue	double	0	DEF	entry < $
21799	94	8	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getHeight()
21799	94	8	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1669	98	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	Precision.compareTo(entry, 0d, $.maxUlps) > 0
1669	98	12	SimplexSolver.java	getPivotRow	entry	double	0	DEF	Precision.compareTo($, 0d, maxUlps) > 0
1670	103	16	SimplexSolver.java	getPivotRow	cmp	int	1	DEF	$ == 0
1671	105	23	SimplexSolver.java	getPivotRow	cmp	int	0	DEF	$ < 0
1672	113	8	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	1	RET	$.size() == 0
1673	115	15	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	0	RET	$.size() > 1
1674	119	12	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() > 0
21800	121	20	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getNumArtificialVariables()
21800	121	20	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
1675	124	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.row.equals(tableau.getBasicRow(column))
1675	124	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	Precision.equals(entry, 1d, $.maxUlps)
1675	124	24	SimplexSolver.java	getPivotRow	column	int	0	RET	row.equals(tableau.getBasicRow($))
1675	124	24	SimplexSolver.java	getPivotRow	entry	double	0	RET	Precision.equals($, 1d, maxUlps)
1675	124	24	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	row.equals($.getBasicRow(column))
1676	140	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.getIterations() < $.getMaxIterations() / 2
21801	146	20	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	NIL-FOR	$.row.equals(minRow)
21801	146	20	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < varEnd
21801	146	20	SimplexSolver.java	getPivotRow	minRow	Integer	0	NIL-FOR	row.equals($)
21801	146	20	SimplexSolver.java	getPivotRow	varEnd	int	0	NIL-FOR	i < $
1677	148	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	basicRow.equals($.row)
1677	148	24	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$.equals(row)
1677	148	24	SimplexSolver.java	getPivotRow	basicRow	Integer	0	DEF	$ != null
1678	149	28	SimplexSolver.java	getPivotRow	i	int	0	DEF	$ < minIndex
1678	149	28	SimplexSolver.java	getPivotRow	minIndex	int	0	DEF	i < $
1679	175	8	SimplexSolver.java	doIteration	pivotRow	Integer	0	UnboundedSolutionException	$ == null
21802	184	8	SimplexSolver.java	doIteration	i	int	0	NIL-FOR	$ < tableau.getHeight()
21802	184	8	SimplexSolver.java	doIteration	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1680	185	12	SimplexSolver.java	doIteration	i	int	0	DEF	$ != pivotRow
1680	185	12	SimplexSolver.java	doIteration	pivotRow	Integer	0	DEF	i != $
1681	203	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
21803	207	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
1682	212	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NoFeasibleSolutionException	Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, $.epsilon)
1682	212	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NoFeasibleSolutionException	Precision.equals($.getEntry(0, $.getRhsOffset()), 0d, epsilon)
21804	232	8	SimplexSolver.java	doOptimize	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
1686	159	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
21805	163	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getOriginalNumDecisionVariables()
21805	163	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getOriginalNumDecisionVariables()
1687	166	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
21806	169	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumSlackVariables()
21806	169	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumSlackVariables()
21807	172	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
21807	172	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1688	192	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
1689	203	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
21808	211	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	NIL-FOR	i < $.constraints.size()
21808	211	8	SimplexTableau.java	createTableau	i	int	0	NIL-FOR	$ < constraints.size()
1690	219	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
1691	228	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	1	DEF	constraint.getRelationship() == $.Relationship.LEQ
1691	228	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	1	DEF	$.getRelationship() == Relationship.LEQ
1692	230	19	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1692	230	19	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1693	235	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1693	235	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.EQ
1693	235	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1693	235	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.EQ
1694	265	8	SimplexTableau.java	normalize	constraint	LinearConstraint	0	RET	$.getValue() < 0
1695	290	12	SimplexTableau.java	getConstraintTypeCounts	THIS	SimplexTableau	0	DEF	$.constraint.getRelationship() == relationship
1695	290	12	SimplexTableau.java	getConstraintTypeCounts	relationship	Relationship	0	DEF	constraint.getRelationship() == $
21809	317	8	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
21809	317	8	SimplexTableau.java	getBasicRow	i	int	0	NIL-FOR	$ < getHeight()
1696	319	12	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	1	DEF	Precision.equals(entry, 1d, $.maxUlps)
1696	319	12	SimplexTableau.java	getBasicRow	entry	double	1	DEF	Precision.equals($, 1d, maxUlps)
1696	319	12	SimplexTableau.java	getBasicRow	row	Integer	1	DEF	$ == null
1697	321	19	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	RET	Precision.equals(entry, 0d, $.maxUlps)
1697	321	19	SimplexTableau.java	getBasicRow	entry	double	0	RET	Precision.equals($, 0d, maxUlps)
1698	333	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	RET	$.getNumObjectiveFunctions() == 1
21810	341	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getArtificialVariableOffset()
21810	341	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getArtificialVariableOffset()
1699	343	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	Precision.compareTo(entry, 0d, $.epsilon) > 0
1699	343	12	SimplexTableau.java	dropPhase1Objective	entry	double	0	DEF	Precision.compareTo($, 0d, epsilon) > 0
21811	349	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
21811	349	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1700	351	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	$.getBasicRow(col) == null
1700	351	12	SimplexTableau.java	dropPhase1Objective	col	int	0	DEF	getBasicRow($) == null
21812	357	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
21812	357	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getHeight()
21813	359	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
21813	359	12	SimplexTableau.java	dropPhase1Objective	j	int	0	NIL-FOR	$ < getWidth()
1701	360	16	SimplexTableau.java	dropPhase1Objective	j	int	0	DEF	columnsToDrop.contains($)
1701	360	16	SimplexTableau.java	dropPhase1Objective	columnsToDrop	Set<Integer>	0	DEF	$.contains(j)
21814	368	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ >= 0
21815	389	8	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
21815	389	8	SimplexTableau.java	isOptimal	i	int	0	NIL-FOR	$ < getWidth() - 1
1702	391	12	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	RET	Precision.compareTo(entry, 0d, $.epsilon) < 0
1702	391	12	SimplexTableau.java	isOptimal	entry	double	0	RET	Precision.compareTo($, 0d, epsilon) < 0
21816	410	6	SimplexTableau.java	getSolution	THIS	SimplexTableau	0	NIL-FOR	i < coefficients.$.length
21816	410	6	SimplexTableau.java	getSolution	i	int	0	NIL-FOR	$ < coefficients.length
21816	410	6	SimplexTableau.java	getSolution	coefficients	double[]	0	NIL-FOR	i < $.length
1703	412	10	SimplexTableau.java	getSolution	colIndex	int	0	DEF	$ < 0
1704	417	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ != null
1704	417	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ == 0
1705	422	17	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	basicRows.contains($)
1705	422	17	SimplexTableau.java	getSolution	basicRows	Set<Integer>	1	DEF	$.contains(basicRow)
21817	446	8	SimplexTableau.java	divideRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
21817	446	8	SimplexTableau.java	divideRow	j	int	0	NIL-FOR	$ < getWidth()
21818	463	8	SimplexTableau.java	subtractRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth()
21818	463	8	SimplexTableau.java	subtractRow	i	int	0	NIL-FOR	$ < getWidth()
1706	466	12	SimplexTableau.java	subtractRow	result	double	0	DEF	FastMath.abs($) < CUTOFF_THRESHOLD
1707	583	6	SimplexTableau.java	equals	THIS	SimplexTableau	0	RET	$ == other
1707	583	6	SimplexTableau.java	equals	other	Object	0	RET	this == $
1708	587	6	SimplexTableau.java	equals	other	Object	0	RET	$ instanceof SimplexTableau
3467	63	8	SimpsonIntegrator.java	SimpsonIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > SIMPSON_MAX_ITERATIONS_COUNT
3468	85	8	SimpsonIntegrator.java	SimpsonIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > SIMPSON_MAX_ITERATIONS_COUNT
3469	105	8	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	$.getMinimalIterationCount() == 1
3470	116	12	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	$.iterations.getCount() >= $.getMinimalIterationCount()
3471	120	16	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
3471	120	16	SimpsonIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
3471	120	16	SimpsonIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
3471	120	16	SimpsonIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
3255	64	8	Sinc.java	value	THIS	Sinc	1	RET	$.normalized
3256	74	8	Sinc.java	derivative	THIS	Sinc	1	RET	$.normalized
1500	92	8	SingularValueDecomposition.java	SingularValueDecomposition	matrix	RealMatrix	1	DEF	$.getRowDimension() < $.getColumnDimension()
21667	113	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ < FastMath.max(nct, nrt)
21667	113	8	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	NIL-FOR	k < FastMath.max($, nrt)
21667	113	8	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	NIL-FOR	k < FastMath.max(nct, $)
1501	114	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1501	114	12	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
21668	119	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
21668	119	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1502	122	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] != 0
1502	122	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] != 0
1503	123	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	A[$][$] < 0
21669	126	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
21669	126	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
21670	133	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
21670	133	12	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
1504	134	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] != 0
1504	134	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1504	134	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] != 0
1504	134	16	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
21671	138	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
21671	138	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
21672	142	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
21672	142	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1505	150	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1505	150	12	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
21673	153	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
21673	153	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1506	157	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nrt
1506	157	12	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	k < $
21674	162	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
21674	162	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1507	165	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1507	165	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
1508	166	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$ + 1] < 0
1508	166	20	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k + 1] < 0
21675	169	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
21675	169	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1509	175	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k + 1 < $.m
1509	175	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ + 1 < m
1509	175	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1509	175	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
21676	178	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
21676	178	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
21677	181	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
21677	181	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
21678	182	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
21678	182	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
21679	186	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
21679	186	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
21680	188	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
21680	188	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
21681	196	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
21681	196	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1510	203	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	nct < $.n
1510	203	8	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	$ < n
1511	206	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.m < p
1511	206	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	DEF	m < $
1512	209	8	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	$ + 1 < p
1512	209	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	DEF	nrt + 1 < $
21682	215	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
21682	215	8	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
21683	216	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
21683	216	12	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
21684	221	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1513	222	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	1	DEF	$.singularValues[k] != 0
1513	222	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	singularValues[$] != 0
21685	223	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
21685	223	16	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
21686	225	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
21686	225	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
21687	229	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
21687	229	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
21688	233	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
21688	233	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
21689	237	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < k - 1
21689	237	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	i < $ - 1
21690	241	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
21690	241	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
21691	249	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1514	250	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nrt
1514	250	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1514	250	12	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
1514	250	12	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	k < $
21692	252	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
21692	252	16	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
21693	254	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
21693	254	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
21694	258	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
21694	258	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
21695	263	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
21695	263	12	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
21696	272	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-WHILE	$ > 0
21697	284	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1515	288	16	SingularValueDecomposition.java	SingularValueDecomposition	threshold	double	0	DEF	FastMath.abs(e[k]) <= $
1515	288	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	FastMath.abs(e[$]) <= threshold
1515	288	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	FastMath.abs($[k]) <= threshold
1516	294	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	$ == p - 2
1516	294	12	SingularValueDecomposition.java	SingularValueDecomposition	p	int	1	DEF	k == $ - 2
21698	298	16	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	NIL-FOR	$ >= k
21698	298	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	ks >= $
1517	299	20	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	DEF	$ == k
1517	299	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	ks == $
1518	304	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	FastMath.abs($.singularValues[ks]) <= TINY + EPS * t
1518	304	20	SingularValueDecomposition.java	SingularValueDecomposition	t	double	0	DEF	FastMath.abs(singularValues[ks]) <= TINY + EPS * $
1518	304	20	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	DEF	FastMath.abs(singularValues[$]) <= TINY + EPS * t
1519	309	16	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	1	DEF	$ == k
1519	309	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	ks == $
1520	311	23	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	1	DEF	$ == p - 1
1520	311	23	SingularValueDecomposition.java	SingularValueDecomposition	p	int	1	DEF	ks == $ - 1
21699	325	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ >= k
21699	325	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	j >= $
1521	330	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ != k
1521	330	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	j != $
21700	335	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
21700	335	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
21701	347	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < p
21701	347	20	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-FOR	j < $
21702	355	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
21702	355	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1522	380	20	SingularValueDecomposition.java	SingularValueDecomposition	b	double	0	DEF	$ != 0
1522	380	20	SingularValueDecomposition.java	SingularValueDecomposition	c	double	0	DEF	$ != 0
1523	383	24	SingularValueDecomposition.java	SingularValueDecomposition	b	double	0	DEF	$ < 0
21703	391	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < p - 1
21703	391	20	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-FOR	j < $ - 1
1524	395	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ != k
1524	395	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	j != $
21704	403	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
21704	403	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1525	416	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	j < $.m - 1
1525	416	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ < m - 1
21705	417	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
21705	417	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1526	431	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] <= 0
1526	431	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] <= 0
21706	434	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ <= pp
21706	434	24	SingularValueDecomposition.java	SingularValueDecomposition	pp	int	0	NIL-FOR	i <= $
21707	439	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-WHILE	$ < pp
21707	439	20	SingularValueDecomposition.java	SingularValueDecomposition	pp	int	0	NIL-WHILE	k < $
1527	440	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] >= $.singularValues[k + 1]
1527	440	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] >= singularValues[$ + 1]
1528	446	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k < $.n - 1
1528	446	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < n - 1
21708	447	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
21708	447	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1529	453	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k < $.m - 1
1529	453	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < m - 1
21709	454	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
21709	454	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1530	473	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	1	DEF	$.transposed
1531	501	8	SingularValueDecomposition.java	getUT	THIS	SingularValueDecomposition	0	DEF	$.cachedUt == null
1532	515	8	SingularValueDecomposition.java	getS	THIS	SingularValueDecomposition	0	DEF	$.cachedS == null
1533	550	8	SingularValueDecomposition.java	getVT	THIS	SingularValueDecomposition	0	DEF	$.cachedVt == null
21710	572	8	SingularValueDecomposition.java	getCovariance	THIS	SingularValueDecomposition	0	NIL-WHILE	$.singularValues[dimension] >= minSingularValue
21710	572	8	SingularValueDecomposition.java	getCovariance	p	int	0	NIL-WHILE	dimension < $
21710	572	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NIL-WHILE	$ < p
21710	572	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NIL-WHILE	singularValues[$] >= minSingularValue
21710	572	8	SingularValueDecomposition.java	getCovariance	minSingularValue	double	0	NIL-WHILE	singularValues[dimension] >= $
1534	577	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NumberIsTooLargeException	$ == 0
21711	636	8	SingularValueDecomposition.java	getRank	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.singularValues.$.length
21711	636	8	SingularValueDecomposition.java	getRank	i	int	0	NIL-FOR	$ < singularValues.length
1535	637	12	SingularValueDecomposition.java	getRank	THIS	SingularValueDecomposition	0	DEF	$.singularValues[i] > $.tol
1535	637	12	SingularValueDecomposition.java	getRank	i	int	0	DEF	singularValues[$] > tol
2078	91	8	Skewness.java	increment	THIS	Skewness	0	DEF	$.incMoment
2079	106	8	Skewness.java	getResult	THIS	Skewness	0	RET	$.moment.$.n < 3
2080	110	8	Skewness.java	getResult	variance	double	1	RET	$ < 10E-20
2081	131	8	Skewness.java	clear	THIS	Skewness	0	DEF	$.incMoment
2082	159	8	Skewness.java	evaluate	THIS	Skewness	0	DEF	$.test(values, begin, length)
2082	159	8	Skewness.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2082	159	8	Skewness.java	evaluate	begin	int	0	DEF	test(values, $, length)
2082	159	8	Skewness.java	evaluate	length	int	0	DEF	$ > 2
2082	159	8	Skewness.java	evaluate	length	int	0	DEF	test(values, begin, $)
22126	169	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
22126	169	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
22126	169	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
22127	177	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
22127	177	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
22127	177	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
3250	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3250	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3250	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3250	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3250	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3250	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
3251	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3251	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3251	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
22682	84	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
22682	84	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3252	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3252	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3252	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3252	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
22683	96	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
22683	96	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
22684	98	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
22684	98	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
22685	108	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
22685	108	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
22686	110	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
22686	110	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
22687	118	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
22687	118	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
22688	120	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
22688	120	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
22689	130	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
22689	130	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
22690	132	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
22690	132	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
21191	91	8	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	i < $.rows
21191	91	8	SparseFieldMatrix.java	SparseFieldMatrix	i	int	0	NIL-FOR	$ < rows
21192	92	12	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	j < $.columns
21192	92	12	SparseFieldMatrix.java	SparseFieldMatrix	j	int	0	NIL-FOR	$ < columns
1211	105	8	SparseFieldMatrix.java	addToEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1211	105	8	SparseFieldMatrix.java	addToEntry	value	T	1	DEF	getField().getZero().equals($)
1212	151	8	SparseFieldMatrix.java	multiplyEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1212	151	8	SparseFieldMatrix.java	multiplyEntry	value	T	1	DEF	getField().getZero().equals($)
1213	164	8	SparseFieldMatrix.java	setEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1213	164	8	SparseFieldMatrix.java	setEntry	value	T	1	DEF	getField().getZero().equals($)
21293	108	8	SparseFieldVector.java	SparseFieldVector	THIS	SparseFieldVector	0	NIL-FOR	key < values.$.length
21293	108	8	SparseFieldVector.java	SparseFieldVector	key	int	0	NIL-FOR	$ < values.length
21293	108	8	SparseFieldVector.java	SparseFieldVector	values	T[]	0	NIL-FOR	key < $.length
21294	146	8	SparseFieldVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1288	150	12	SparseFieldVector.java	add	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1288	150	12	SparseFieldVector.java	add	key	int	1	DEF	entries.containsKey($)
21295	169	8	SparseFieldVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1289	178	8	SparseFieldVector.java	append	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
21296	183	12	SparseFieldVector.java	append	i	int	0	NIL-FOR	$ < n
21296	183	12	SparseFieldVector.java	append	n	int	0	NIL-FOR	i < $
21297	207	8	SparseFieldVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
21298	219	8	SparseFieldVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
21299	231	8	SparseFieldVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
21300	242	8	SparseFieldVector.java	getData	iter	Iterator	0	NIL-WHILE	$.hasNext()
21301	272	8	SparseFieldVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1290	275	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ >= index
1290	275	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ < end
1290	275	12	SparseFieldVector.java	getSubVector	end	int	0	DEF	key < $
1290	275	12	SparseFieldVector.java	getSubVector	index	int	0	DEF	key >= $
21302	289	8	SparseFieldVector.java	mapAddToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
21302	289	8	SparseFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
21303	303	8	SparseFieldVector.java	mapDivideToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
21304	317	8	SparseFieldVector.java	mapInvToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
21304	317	8	SparseFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < virtualSize
21305	331	8	SparseFieldVector.java	mapMultiplyToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
21306	359	8	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
21307	362	12	SparseFieldVector.java	outerProduct	iter2	Iterator	0	NIL-WHILE	$.hasNext()
1291	372	8	SparseFieldVector.java	outerProduct	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
21308	378	12	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
21309	382	16	SparseFieldVector.java	outerProduct	col	int	0	NIL-FOR	$ < n
21309	382	16	SparseFieldVector.java	outerProduct	n	int	0	NIL-FOR	col < $
21310	398	8	SparseFieldVector.java	set	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
21310	398	8	SparseFieldVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
21311	414	8	SparseFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < n
21311	414	8	SparseFieldVector.java	setSubVector	n	int	0	NIL-FOR	i < $
21312	431	8	SparseFieldVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1292	434	12	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1292	434	12	SparseFieldVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1293	445	8	SparseFieldVector.java	subtract	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
21313	451	12	SparseFieldVector.java	subtract	i	int	0	NIL-FOR	$ < n
21313	451	12	SparseFieldVector.java	subtract	n	int	0	NIL-FOR	i < $
1294	452	16	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(i)
1294	452	16	SparseFieldVector.java	subtract	i	int	1	DEF	entries.containsKey($)
1295	474	8	SparseFieldVector.java	checkIndex	THIS	SparseFieldVector	0	OutOfRangeException	index >= $.getDimension()
1295	474	8	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1295	474	8	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1296	486	8	SparseFieldVector.java	checkVectorDimensions	THIS	SparseFieldVector	0	DimensionMismatchException	$.getDimension() != n
1296	486	8	SparseFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	getDimension() != $
1297	493	8	SparseFieldVector.java	add	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
21314	500	12	SparseFieldVector.java	add	i	int	0	NIL-FOR	$ < n
21314	500	12	SparseFieldVector.java	add	n	int	0	NIL-FOR	i < $
21315	527	8	SparseFieldVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1298	540	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$ == obj
1298	540	8	SparseFieldVector.java	equals	obj	Object	0	RET	this == $
1299	544	8	SparseFieldVector.java	equals	obj	Object	0	RET	$ instanceof SparseFieldVector<?>
1300	551	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	1	RET	$.field == null
1301	552	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	other.$.field != null
1301	552	12	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	$.field != null
1302	555	15	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.field.equals(other.$.field)
1302	555	15	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	field.equals($.field)
1303	558	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.virtualSize != other.$.virtualSize
1303	558	8	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	virtualSize != $.virtualSize
21316	563	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1304	566	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(iter.value())
1304	566	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals($.value())
21317	571	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1305	574	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	test.equals($.getEntry(iter.key()))
1305	574	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(getEntry(iter.key()))
1305	574	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals(getEntry($.key()))
2265	146	8	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	DimensionMismatchException	xArray.$.length != yArray.$.length
2265	146	8	SpearmansCorrelation.java	correlation	xArray	double[]	1	DimensionMismatchException	$.length != yArray.length
2265	146	8	SpearmansCorrelation.java	correlation	yArray	double[]	1	DimensionMismatchException	xArray.length != $.length
2266	148	15	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	MathIllegalArgumentException	xArray.$.length < 2
2266	148	15	SpearmansCorrelation.java	correlation	xArray	double[]	1	MathIllegalArgumentException	$.length < 2
22198	164	8	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < matrix.getColumnDimension()
22198	164	8	SpearmansCorrelation.java	rankTransform	matrix	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
3153	67	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
3153	67	8	SplineInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
3153	67	8	SplineInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
3154	71	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	NumberIsTooSmallException	x.$.length < 3
3154	71	8	SplineInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 3
22600	83	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
22600	83	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
22601	92	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
22601	92	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
22602	107	8	SplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ >=0
22603	115	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
22603	115	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
2464	57	8	StableRandomGenerator.java	StableRandomGenerator	generator	RandomGenerator	0	NullArgumentException	$ == null
2465	61	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	0	OutOfRangeException	$ > 0d
2465	61	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	0	OutOfRangeException	$ <= 2d
2466	66	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	0	OutOfRangeException	$ >= -1d
2466	66	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	0	OutOfRangeException	$ <= 1d
2467	74	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	1	DEF	$ < 2d
2467	74	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	1	DEF	$ != 0d
2468	92	8	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	0	RET	$.alpha == 2d
2469	99	8	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	$.beta == 0d
2470	101	12	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	$.alpha == 1d
2471	113	12	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	FastMath.abs($.alpha - 1d) > 1e-8
2472	124	16	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	0	DEF	$.alpha != 1d
2295	692	8	StatUtils.java	sumDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
2295	692	8	StatUtils.java	sumDifference	n	int	0	DimensionMismatchException	$ != sample2.length
2295	692	8	StatUtils.java	sumDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
2296	695	8	StatUtils.java	sumDifference	n	int	0	NoDataException	$ <= 0
22213	699	8	StatUtils.java	sumDifference	i	int	0	NIL-FOR	$ < n
22213	699	8	StatUtils.java	sumDifference	n	int	0	NIL-FOR	i < $
2297	740	8	StatUtils.java	varianceDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
2297	740	8	StatUtils.java	varianceDifference	n	int	0	DimensionMismatchException	$ != sample2.length
2297	740	8	StatUtils.java	varianceDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
2298	743	8	StatUtils.java	varianceDifference	n	int	0	NumberIsTooSmallException	$ < 2
22214	746	8	StatUtils.java	varianceDifference	i	int	0	NIL-FOR	$ < n
22214	746	8	StatUtils.java	varianceDifference	n	int	0	NIL-FOR	i < $
22215	765	8	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
22215	765	8	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
22215	765	8	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
22216	776	8	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
22216	776	8	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
22216	776	8	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
2178	134	8	StatisticalSummaryValues.java	equals	THIS	StatisticalSummaryValues	0	RET	object == $
2178	134	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ == this
2179	137	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ instanceof StatisticalSummaryValues == false
3258	62	8	StepFunction.java	StepFunction	x	double[]	0	NullArgumentException	$ == null
3258	62	8	StepFunction.java	StepFunction	y	double[]	0	NullArgumentException	$ == null
3259	66	8	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	y.$.length == 0
3259	66	8	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	x.$.length == 0
3259	66	8	StepFunction.java	StepFunction	x	double[]	0	NoDataException	$.length == 0
3259	66	8	StepFunction.java	StepFunction	y	double[]	0	NoDataException	$.length == 0
3260	70	8	StepFunction.java	StepFunction	THIS	StepFunction	0	DimensionMismatchException	y.$.length != x.$.length
3260	70	8	StepFunction.java	StepFunction	x	double[]	0	DimensionMismatchException	y.length != $.length
3260	70	8	StepFunction.java	StepFunction	y	double[]	0	DimensionMismatchException	$.length != x.length
3261	84	8	StepFunction.java	value	index	int	1	DEF	$ < -1
3262	87	15	StepFunction.java	value	index	int	1	DEF	$ >= 0
2650	202	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.lastState == null
2651	211	12	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.forward
2652	220	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.mode == $.StepNormalizerMode.MULTIPLES
2652	220	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	Precision.equals(nextTime, $.lastTime, 1)
2652	220	8	StepNormalizer.java	handleStep	nextTime	double	0	DEF	Precision.equals($, lastTime, 1)
22391	227	8	StepNormalizer.java	handleStep	nextInStep	boolean	0	NIL-WHILE	$
2653	239	8	StepNormalizer.java	handleStep	isLast	boolean	0	DEF	$
2654	246	12	StepNormalizer.java	handleStep	addLast	boolean	0	DEF	$
2655	274	8	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.bounds.firstIncluded()
2655	274	8	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.firstTime == $.lastTime
2255	110	8	StorelessBivariateCovariance.java	getResult	THIS	StorelessBivariateCovariance	0	NumberIsTooSmallException	$.n < 2
2256	114	8	StorelessBivariateCovariance.java	getResult	THIS	StorelessBivariateCovariance	1	RET	$.biasCorrected
22180	82	8	StorelessCovariance.java	initializeMatrix	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
22180	82	8	StorelessCovariance.java	initializeMatrix	i	int	0	NIL-FOR	$ < dimension
22181	83	12	StorelessCovariance.java	initializeMatrix	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
22181	83	12	StorelessCovariance.java	initializeMatrix	j	int	0	NIL-FOR	$ < dimension
2254	151	8	StorelessCovariance.java	increment	THIS	StorelessCovariance	0	DimensionMismatchException	length != $.dimension
2254	151	8	StorelessCovariance.java	increment	length	int	0	DimensionMismatchException	$ != dimension
22182	157	8	StorelessCovariance.java	increment	i	int	0	NIL-FOR	$ < length
22182	157	8	StorelessCovariance.java	increment	length	int	0	NIL-FOR	i < $
22183	158	12	StorelessCovariance.java	increment	j	int	0	NIL-FOR	$ < length
22183	158	12	StorelessCovariance.java	increment	length	int	0	NIL-FOR	j < $
22184	184	8	StorelessCovariance.java	getData	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
22184	184	8	StorelessCovariance.java	getData	i	int	0	NIL-FOR	$ < dimension
22185	185	12	StorelessCovariance.java	getData	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
22185	185	12	StorelessCovariance.java	getData	j	int	0	NIL-FOR	$ < dimension
688	117	8	SubLine.java	intersection	includeEndPoints	boolean	1	RET	$
735	125	8	SubLine.java	intersection	includeEndPoints	boolean	1	RET	$
736	159	8	SubLine.java	side	crossing	Vector2D	0	RET	$ == null
737	180	8	SubLine.java	split	crossing	Vector2D	0	RET	$ == null
638	60	8	SubPlane.java	side	inter	Line	0	RET	$ == null
639	77	8	SubPlane.java	side	otherPlane	Plane	0	DEF	crossP.dotProduct($.getNormal()) < 0
639	77	8	SubPlane.java	side	crossP	Vector3D	0	DEF	$.dotProduct(otherPlane.getNormal()) < 0
640	103	8	SubPlane.java	split	inter	Line	0	RET	$ == null
641	115	8	SubPlane.java	split	otherPlane	Plane	0	DEF	crossP.dotProduct($.getNormal()) < 0
641	115	8	SubPlane.java	split	crossP	Vector3D	0	DEF	$.dotProduct(otherPlane.getNormal()) < 0
2048	121	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, begin, length, true)
2048	121	8	Sum.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2048	121	8	Sum.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2048	121	8	Sum.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
22116	123	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
22116	123	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
22116	123	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2049	160	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, weights, begin, length, true)
2049	160	8	Sum.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
2049	160	8	Sum.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
2049	160	8	Sum.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
2049	160	8	Sum.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
22117	162	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
22117	162	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
22117	162	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2050	132	8	SumOfLogs.java	evaluate	THIS	SumOfLogs	0	DEF	$.test(values, begin, length, true)
2050	132	8	SumOfLogs.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2050	132	8	SumOfLogs.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2050	132	8	SumOfLogs.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
22118	134	12	SumOfLogs.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
22118	134	12	SumOfLogs.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
22118	134	12	SumOfLogs.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2047	120	8	SumOfSquares.java	evaluate	THIS	SumOfSquares	0	DEF	$.test(values, begin, length, true)
2047	120	8	SumOfSquares.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2047	120	8	SumOfSquares.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2047	120	8	SumOfSquares.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
22115	122	12	SumOfSquares.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
22115	122	12	SumOfSquares.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
22115	122	12	SumOfSquares.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2120	158	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
2121	161	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
2122	164	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.geoMeanImpl != $.geoMean
2123	217	8	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	0	DEF	$.getN() > 0
2124	218	12	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	1	DEF	$.getN() > 1
2125	353	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
2126	356	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
2127	370	8	SummaryStatistics.java	equals	THIS	SummaryStatistics	0	RET	object == $
2127	370	8	SummaryStatistics.java	equals	object	Object	0	RET	$ == this
2128	373	8	SummaryStatistics.java	equals	object	Object	0	RET	$ instanceof SummaryStatistics == false
2129	643	8	SummaryStatistics.java	checkEmpty	THIS	SummaryStatistics	0	MathIllegalStateException	$.n > 0
2130	681	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getVarianceImpl() instanceof Variance
2131	686	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.meanImpl instanceof Mean
2131	686	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.meanImpl instanceof Mean
2132	691	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getGeoMeanImpl() instanceof GeometricMean
2133	699	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.geoMean == source.$.geoMeanImpl
2133	699	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.geoMean == $.geoMeanImpl
2134	704	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.max == source.$.maxImpl
2134	704	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.max == $.maxImpl
2135	709	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.mean == source.$.meanImpl
2135	709	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.mean == $.meanImpl
2136	714	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.min == source.$.minImpl
2136	714	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.min == $.minImpl
2137	719	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sum == source.$.sumImpl
2137	719	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sum == $.sumImpl
2138	724	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.variance == source.$.varianceImpl
2138	724	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.variance == $.varianceImpl
2139	729	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumLog == source.$.sumLogImpl
2139	729	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumLog == $.sumLogImpl
2140	734	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumsq == source.$.sumsqImpl
2140	734	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumsq == $.sumsqImpl
1171	1168	8	SymmLQ.java	solveInPlace	state	State	0	RET	$.bEqualsNullVector()
1172	1177	8	SymmLQ.java	solveInPlace	earlyStop	boolean	0	DEF	$
21135	1178	12	SymmLQ.java	solveInPlace	state	State	0	NIL-DOWHILE	$.hasConverged()
1002	91	8	TDistribution.java	TDistribution	degreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1003	122	8	TDistribution.java	cumulativeProbability	x	double	1	DEF	$ == 0
1004	130	12	TDistribution.java	cumulativeProbability	x	double	1	DEF	$ < 0.0
1005	158	8	TDistribution.java	getNumericalMean	df	double	0	RET	$ > 1
1006	179	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ > 2
1007	183	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ <= 2
1007	183	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ > 1
2202	1120	8	TTest.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ <= 0
2202	1120	8	TTest.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ > 0.5
2203	1137	8	TTest.java	checkSampleData	data	double[]	0	NullArgumentException	$ == null
2204	1140	8	TTest.java	checkSampleData	THIS	TTest	0	NumberIsTooSmallException	data.$.length < 2
2204	1140	8	TTest.java	checkSampleData	data	double[]	0	NumberIsTooSmallException	$.length < 2
2205	1158	8	TTest.java	checkSampleData	stat	StatisticalSummary	0	NullArgumentException	$ == null
2206	1161	8	TTest.java	checkSampleData	stat	StatisticalSummary	0	NumberIsTooSmallException	$.getN() < 2
2100	89	8	ThirdMoment.java	increment	THIS	ThirdMoment	0	DEF	$.n < 1
2759	104	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	1	DEF	$.previousState != null
2759	104	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
22491	111	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
22491	111	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
22492	129	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
22492	129	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2543	73	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	MathIllegalArgumentException	population.getPopulationSize() < $.arity
2543	73	8	TournamentSelection.java	tournament	population	ListPopulation	0	MathIllegalArgumentException	$.getPopulationSize() < this.arity
22334	87	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	NIL-FOR	i<$.arity
22334	87	8	TournamentSelection.java	tournament	i	int	0	NIL-FOR	$<this.arity
22360	62	8	TransformUtils.java	scaleArray	THIS	TransformUtils	0	NIL-FOR	i < f.$.length
22360	62	8	TransformUtils.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
22360	62	8	TransformUtils.java	scaleArray	f	double[]	0	NIL-FOR	i < $.length
22361	78	8	TransformUtils.java	scaleArray	THIS	TransformUtils	0	NIL-FOR	i < f.$.length
22361	78	8	TransformUtils.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
22361	78	8	TransformUtils.java	scaleArray	f	Complex[]	0	NIL-FOR	i < $.length
22362	102	8	TransformUtils.java	createRealImaginaryArray	THIS	TransformUtils	0	NIL-FOR	i < dataC.$.length
22362	102	8	TransformUtils.java	createRealImaginaryArray	i	int	0	NIL-FOR	$ < dataC.length
22362	102	8	TransformUtils.java	createRealImaginaryArray	dataC	Complex[]	0	NIL-FOR	i < $.length
2619	128	8	TransformUtils.java	createComplexArray	THIS	TransformUtils	0	DimensionMismatchException	dataRI.$.length != 2
2619	128	8	TransformUtils.java	createComplexArray	dataRI	double[][]	0	DimensionMismatchException	$.length != 2
2620	133	8	TransformUtils.java	createComplexArray	THIS	TransformUtils	0	DimensionMismatchException	dataR.$.length != dataI.$.length
2620	133	8	TransformUtils.java	createComplexArray	dataR	double[]	0	DimensionMismatchException	$.length != dataI.length
2620	133	8	TransformUtils.java	createComplexArray	dataI	double[]	0	DimensionMismatchException	dataR.length != $.length
22363	139	8	TransformUtils.java	createComplexArray	i	int	0	NIL-FOR	$ < n
22363	139	8	TransformUtils.java	createComplexArray	n	int	0	NIL-FOR	i < $
2621	158	8	TransformUtils.java	exactLog2	index	int	0	MathIllegalArgumentException	$ < 0
96	144	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof Number
96	144	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof String
97	148	12	TransformerMap.java	transform	trans	NumberTransformer	0	DEF	$ != null
98	159	8	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$ == other
98	159	8	TransformerMap.java	equals	other	Object	0	RET	this == $
99	162	8	TransformerMap.java	equals	other	Object	0	RET	$ instanceof TransformerMap
100	164	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.defaultTransformer.equals(rhs.$.defaultTransformer)
100	164	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	defaultTransformer.equals($.defaultTransformer)
101	167	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.map.size() != rhs.$.map.size()
101	167	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	map.size() != $.map.size()
102	171	16	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.entry.getValue().equals(rhs.$.map.get($.entry.getKey()))
102	171	16	TransformerMap.java	equals	rhs	TransformerMap	0	RET	entry.getValue().equals($.map.get(entry.getKey()))
3485	65	8	TrapezoidIntegrator.java	TrapezoidIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > TRAPEZOID_MAX_ITERATIONS_COUNT
3486	87	8	TrapezoidIntegrator.java	TrapezoidIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > TRAPEZOID_MAX_ITERATIONS_COUNT
3487	119	8	TrapezoidIntegrator.java	stage	n	int	1	RET	$ == 0
22815	134	12	TrapezoidIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
22815	134	12	TrapezoidIntegrator.java	stage	np	long	0	NIL-FOR	i < $
3488	154	12	TrapezoidIntegrator.java	doIntegrate	THIS	TrapezoidIntegrator	0	RET	i >= $.getMinimalIterationCount()
3488	154	12	TrapezoidIntegrator.java	doIntegrate	i	int	0	RET	$ >= getMinimalIterationCount()
3489	158	16	TrapezoidIntegrator.java	doIntegrate	THIS	TrapezoidIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
3489	158	16	TrapezoidIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
3489	158	16	TrapezoidIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
3489	158	16	TrapezoidIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
1163	63	8	TriDiagonalTransformer.java	TriDiagonalTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1164	86	8	TriDiagonalTransformer.java	getQ	THIS	TriDiagonalTransformer	0	DEF	$.cachedQ == null
1165	98	8	TriDiagonalTransformer.java	getQT	THIS	TriDiagonalTransformer	0	DEF	$.cachedQt == null
21121	103	12	TriDiagonalTransformer.java	getQT	k	int	0	NIL-FOR	$ >= 1
1166	106	16	TriDiagonalTransformer.java	getQT	hK	double[]	0	DEF	$[k] != 0.0
1166	106	16	TriDiagonalTransformer.java	getQT	k	int	0	DEF	hK[$] != 0.0
21122	110	20	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
21122	110	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
21123	113	20	TriDiagonalTransformer.java	getQT	j	int	0	NIL-FOR	$ < m
21123	113	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	j < $
21124	115	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
21124	115	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
21125	120	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
21125	120	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
1167	139	8	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	$.cachedT == null
21126	142	12	TriDiagonalTransformer.java	getT	i	int	0	NIL-FOR	$ < m
21126	142	12	TriDiagonalTransformer.java	getT	m	int	0	NIL-FOR	i < $
1168	144	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ > 0
1169	147	16	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1169	147	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ < main.length - 1
21127	195	8	TriDiagonalTransformer.java	transform	k	int	0	NIL-FOR	$ < m - 1
21127	195	8	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	k < $ - 1
21128	201	12	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
21128	201	12	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1170	207	12	TriDiagonalTransformer.java	transform	a	double	0	DEF	$ != 0.0
21129	218	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
21129	218	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
21130	222	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
21130	222	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
21131	232	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
21131	232	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
21132	238	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
21132	238	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
21133	244	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
21133	244	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
21134	246	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
21134	246	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1012	82	8	TriangularDistribution.java	TriangularDistribution	a	double	0	NumberIsTooLargeException	$ >= b
1012	82	8	TriangularDistribution.java	TriangularDistribution	b	double	0	NumberIsTooLargeException	a >= $
1013	87	8	TriangularDistribution.java	TriangularDistribution	a	double	0	NumberIsTooSmallException	c < $
1013	87	8	TriangularDistribution.java	TriangularDistribution	c	double	0	NumberIsTooSmallException	$ < a
1014	91	8	TriangularDistribution.java	TriangularDistribution	c	double	0	NumberIsTooLargeException	$ > b
1014	91	8	TriangularDistribution.java	TriangularDistribution	b	double	0	NumberIsTooLargeException	c > $
1015	142	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x < $.a
1015	142	8	TriangularDistribution.java	density	x	double	0	RET	$ < a
1016	145	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	$.a <= x
1016	145	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x < $.c
1016	145	8	TriangularDistribution.java	density	x	double	0	RET	a <= $
1016	145	8	TriangularDistribution.java	density	x	double	0	RET	$ < c
1017	150	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x == $.c
1017	150	8	TriangularDistribution.java	density	x	double	0	RET	$ == c
1018	153	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	$.c < x
1018	153	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x <= $.b
1018	153	8	TriangularDistribution.java	density	x	double	0	RET	c < $
1018	153	8	TriangularDistribution.java	density	x	double	0	RET	$ <= b
1019	175	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x < $.a
1019	175	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ < a
1020	178	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x < $.c
1020	178	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	$.a <= x
1020	178	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ < c
1020	178	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	a <= $
1021	183	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x == $.c
1021	183	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ == c
1022	186	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	$.c < x
1022	186	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x <= $.b
1022	186	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	c < $
1022	186	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ <= b
1023	262	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1
1023	262	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0
1024	265	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
1025	268	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
1026	271	8	TriangularDistribution.java	inverseCumulativeProbability	THIS	TriangularDistribution	0	RET	p < ($.c - $.a) / ($.b - $.a)
1026	271	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ < (c - a) / (b - a)
3157	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
3157	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
3157	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	z.$.length == 0
3157	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
3157	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
3157	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	z	double[]	0	NoDataException	$.length == 0
3157	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$.length == 0
3157	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$[0].length == 0
3158	163	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
3158	163	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
3158	163	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	xLen != $.length
3159	166	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
3159	166	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
3159	166	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	xLen != $.length
3160	169	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
3160	169	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
3160	169	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	xLen != $.length
3161	172	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdZ.$.length
3161	172	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdZ.length
3161	172	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3162	175	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
3162	175	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
3162	175	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	xLen != $.length
3163	178	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdZ.$.length
3163	178	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdZ.length
3163	178	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3164	181	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdYdZ.$.length
3164	181	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdYdZ.length
3164	181	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3165	184	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d3FdXdYdZ.$.length
3165	184	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d3FdXdYdZ.length
3165	184	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
22606	201	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
22606	201	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
3166	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
3166	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
3166	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
3166	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3167	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
3167	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
3167	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
3167	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3168	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
3168	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
3168	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
3168	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3169	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i].length != yLen
3169	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$].length != yLen
3169	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdZ[i].length != $
3169	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3170	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
3170	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
3170	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
3170	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3171	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i].length != yLen
3171	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$].length != yLen
3171	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdZ[i].length != $
3171	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3172	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i].length != yLen
3172	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$].length != yLen
3172	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdYdZ[i].length != $
3172	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3173	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i].length != yLen
3173	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$].length != yLen
3173	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d3FdXdYdZ[i].length != $
3173	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
22607	228	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
22607	228	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
3174	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i][j].length != zLen
3174	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	f[i][$].length != zLen
3174	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$][j].length != zLen
3174	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	f[i][j].length != $
3174	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3175	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i][j].length != zLen
3175	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdX[i][$].length != zLen
3175	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$][j].length != zLen
3175	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdX[i][j].length != $
3175	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3176	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i][j].length != zLen
3176	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdY[i][$].length != zLen
3176	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$][j].length != zLen
3176	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdY[i][j].length != $
3176	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3177	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i][j].length != zLen
3177	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdZ[i][$].length != zLen
3177	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$][j].length != zLen
3177	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdZ[i][j].length != $
3177	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3178	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i][j].length != zLen
3178	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdY[i][$].length != zLen
3178	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$][j].length != zLen
3178	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdY[i][j].length != $
3178	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3179	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i][j].length != zLen
3179	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdZ[i][$].length != zLen
3179	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$][j].length != zLen
3179	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdZ[i][j].length != $
3179	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3180	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i][j].length != zLen
3180	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdYdZ[i][$].length != zLen
3180	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$][j].length != zLen
3180	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdYdZ[i][j].length != $
3180	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3181	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != zLen
3181	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d3FdXdYdZ[i][$].length != zLen
3181	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$][j].length != zLen
3181	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != $
3181	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
22608	255	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	k	int	0	NIL-FOR	$ < lastK
22608	255	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastK	int	0	NIL-FOR	k < $
3182	311	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	OutOfRangeException	$ == -1
3183	315	8	TricubicSplineInterpolatingFunction.java	value	j	int	0	OutOfRangeException	$ == -1
3184	319	8	TricubicSplineInterpolatingFunction.java	value	k	int	0	OutOfRangeException	$ == -1
3185	338	8	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ < val[0]
3185	338	8	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c < $[0]
22609	343	8	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	NIL-FOR	$ < max
22609	343	8	TricubicSplineInterpolatingFunction.java	searchIndex	max	int	0	NIL-FOR	i < $
3186	344	12	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	RET	c <= val[$]
3186	344	12	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ <= val[i]
3186	344	12	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c <= $[i]
22610	405	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < sz
22610	405	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	i < $
22611	408	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < sz
22611	408	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	j < $
22612	434	8	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	i	int	0	NIL-FOR	$ < N
22613	435	12	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	j	int	0	NIL-FOR	$ < N
22614	436	16	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	k	int	0	NIL-FOR	$ < N
3187	450	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
3187	450	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
3188	453	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
3188	453	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
3189	456	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ > 1
3189	456	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ < 0
22615	473	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	NIL-FOR	$ < N
22616	474	12	TricubicSplineInterpolatingFunction.java	value	j	int	0	NIL-FOR	$ < N
22617	475	16	TricubicSplineInterpolatingFunction.java	value	k	int	0	NIL-FOR	$ < N
3230	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3230	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3230	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3230	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	zval.$.length == 0
3230	38	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3230	38	8	TricubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3230	38	8	TricubicSplineInterpolator.java	interpolate	zval	double[]	0	NoDataException	$.length == 0
3230	38	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	NoDataException	$.length == 0
3231	41	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3231	41	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3231	41	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	xval.length != $.length
22658	58	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
22658	58	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3232	59	12	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3232	59	12	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3232	59	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3232	59	12	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i].length != yLen
22659	63	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
22659	63	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
3233	64	16	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i][j].length != zLen
3233	64	16	TricubicSplineInterpolator.java	interpolate	j	int	0	DimensionMismatchException	fval[i][$].length != zLen
3233	64	16	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$][j].length != zLen
3233	64	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	DimensionMismatchException	fval[i][j].length != $
3233	64	16	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
22660	68	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
22660	68	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
22661	81	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
22661	81	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
22662	88	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
22662	88	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
22663	95	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
22663	95	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
22664	103	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
22664	103	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
22665	105	12	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
22665	105	12	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
22666	107	16	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
22666	107	16	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
22667	119	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
22667	119	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
22668	121	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
22668	121	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
22669	123	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
22669	123	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
22670	133	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
22670	133	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
22671	135	12	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
22671	135	12	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
22672	137	16	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
22672	137	16	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
22673	146	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
22673	146	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
22674	149	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
22674	149	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
22675	152	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
22675	152	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
2527	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	THIS	UncorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != standardDeviation.$.length
2527	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != standardDeviation.length
2527	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	standardDeviation	double[]	0	DimensionMismatchException	mean.length != $.length
22324	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	THIS	UncorrelatedRandomVectorGenerator	0	NIL-FOR	i < random.$.length
22324	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < random.length
22324	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	random	double[]	0	NIL-FOR	i < $.length
2544	65	8	UniformCrossover.java	UniformCrossover	ratio	double	0	OutOfRangeException	$ > 1.0d
2544	65	8	UniformCrossover.java	UniformCrossover	ratio	double	0	OutOfRangeException	$ < 0.0d
2545	85	8	UniformCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2545	85	8	UniformCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2546	102	8	UniformCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
2546	102	8	UniformCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
22335	115	8	UniformCrossover.java	mate	index	int	0	NIL-FOR	$ < length
22335	115	8	UniformCrossover.java	mate	length	int	0	NIL-FOR	index < $
2547	117	12	UniformCrossover.java	mate	THIS	UniformCrossover	1	DEF	random.nextDouble() < $.ratio
2547	117	12	UniformCrossover.java	mate	random	RandomGenerator	1	DEF	$.nextDouble() < ratio
1027	72	8	UniformIntegerDistribution.java	UniformIntegerDistribution	lower	int	0	NumberIsTooLargeException	$ >= upper
1027	72	8	UniformIntegerDistribution.java	UniformIntegerDistribution	upper	int	0	NumberIsTooLargeException	lower >= $
1028	83	8	UniformIntegerDistribution.java	probability	THIS	UniformIntegerDistribution	0	RET	x < $.lower
1028	83	8	UniformIntegerDistribution.java	probability	THIS	UniformIntegerDistribution	0	RET	x > $.upper
1028	83	8	UniformIntegerDistribution.java	probability	x	int	0	RET	$ < lower
1028	83	8	UniformIntegerDistribution.java	probability	x	int	0	RET	$ > upper
1029	91	8	UniformIntegerDistribution.java	cumulativeProbability	THIS	UniformIntegerDistribution	0	RET	x < $.lower
1029	91	8	UniformIntegerDistribution.java	cumulativeProbability	x	int	0	RET	$ < lower
1030	94	8	UniformIntegerDistribution.java	cumulativeProbability	THIS	UniformIntegerDistribution	0	RET	x > $.upper
1030	94	8	UniformIntegerDistribution.java	cumulativeProbability	x	int	0	RET	$ > upper
1031	96	8	UniformRealDistribution.java	UniformRealDistribution	lower	double	0	NumberIsTooLargeException	$ >= upper
1031	96	8	UniformRealDistribution.java	UniformRealDistribution	upper	double	0	NumberIsTooLargeException	lower >= $
1032	109	8	UniformRealDistribution.java	density	THIS	UniformRealDistribution	0	RET	x > $.upper
1032	109	8	UniformRealDistribution.java	density	THIS	UniformRealDistribution	0	RET	x < $.lower
1032	109	8	UniformRealDistribution.java	density	x	double	0	RET	$ > upper
1032	109	8	UniformRealDistribution.java	density	x	double	0	RET	$ < lower
1033	117	8	UniformRealDistribution.java	cumulativeProbability	THIS	UniformRealDistribution	0	RET	x <= $.lower
1033	117	8	UniformRealDistribution.java	cumulativeProbability	x	double	0	RET	$ <= lower
1034	120	8	UniformRealDistribution.java	cumulativeProbability	THIS	UniformRealDistribution	0	RET	x >= $.upper
1034	120	8	UniformRealDistribution.java	cumulativeProbability	x	double	0	RET	$ >= upper
22299	66	8	UnitSphereRandomVectorGenerator.java	nextVector	normSq	double	0	NIL-DOWHILE	$ > 1
22300	68	12	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
22300	68	12	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
22301	76	8	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
22301	76	8	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
1662	75	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	optimizer	BaseUnivariateOptimizer<FUNC>	0	NullArgumentException	$ == null
1662	75	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	generator	RandomGenerator	0	NullArgumentException	$ == null
1663	79	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1664	133	8	UnivariateMultiStartOptimizer.java	getOptima	THIS	UnivariateMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
21796	156	8	UnivariateMultiStartOptimizer.java	optimize	THIS	UnivariateMultiStartOptimizer	0	NIL-FOR	i < $.starts
21796	156	8	UnivariateMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1665	172	8	UnivariateMultiStartOptimizer.java	optimize	THIS	UnivariateMultiStartOptimizer	0	DEF	$.optima[0] == null
3229	85	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NumberIsTooSmallException	xval.$.length < $.extend
3229	85	8	UnivariatePeriodicInterpolator.java	interpolate	xval	double[]	0	NumberIsTooSmallException	$.length < extend
22656	95	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NIL-FOR	i < xval.$.length
22656	95	8	UnivariatePeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xval.length
22656	95	8	UnivariatePeriodicInterpolator.java	interpolate	xval	double[]	0	NIL-FOR	i < $.length
22657	102	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NIL-FOR	i < $.extend
22657	102	8	UnivariatePeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < extend
3274	50	8	UnivariateSolverUtils.java	solve	function	UnivariateFunction	0	NullArgumentException	$ == null
3275	73	8	UnivariateSolverUtils.java	solve	function	UnivariateFunction	0	NullArgumentException	$ == null
3276	99	8	UnivariateSolverUtils.java	forceSide	THIS	UnivariateSolverUtils	0	RET	allowedSolution == $.AllowedSolution.ANY_SIDE
3276	99	8	UnivariateSolverUtils.java	forceSide	allowedSolution	AllowedSolution	0	RET	$ == AllowedSolution.ANY_SIDE
22691	112	8	UnivariateSolverUtils.java	forceSide	remainingEval	int	0	NIL-WHILE	$ > 0
3277	114	12	UnivariateSolverUtils.java	forceSide	fLo	double	0	RET	$ >= 0
3277	114	12	UnivariateSolverUtils.java	forceSide	fLo	double	0	RET	$ <= 0
3277	114	12	UnivariateSolverUtils.java	forceSide	fHi	double	0	RET	$ >= 0
3277	114	12	UnivariateSolverUtils.java	forceSide	fHi	double	0	RET	$ <= 0
3278	122	12	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ < fHi
3278	122	12	UnivariateSolverUtils.java	forceSide	fHi	double	1	DEF	fLo < $
3279	124	16	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ >= 0
3280	129	19	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ > fHi
3280	129	19	UnivariateSolverUtils.java	forceSide	fHi	double	1	DEF	fLo > $
3281	131	16	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ <= 0
3282	143	12	UnivariateSolverUtils.java	forceSide	changeLo	boolean	0	DEF	$
3283	150	12	UnivariateSolverUtils.java	forceSide	changeHi	boolean	0	DEF	$
3284	246	8	UnivariateSolverUtils.java	bracket	function	UnivariateFunction	0	NullArgumentException	$ == null
3285	249	8	UnivariateSolverUtils.java	bracket	maximumIterations	int	0	NotStrictlyPositiveException	$ <= 0
22692	260	8	UnivariateSolverUtils.java	bracket	a	double	0	NIL-DOWHILE	$ > lowerBound
22692	260	8	UnivariateSolverUtils.java	bracket	b	double	0	NIL-DOWHILE	$ < upperBound
22692	260	8	UnivariateSolverUtils.java	bracket	fa	double	0	NIL-DOWHILE	$ * fb > 0.0
22692	260	8	UnivariateSolverUtils.java	bracket	fb	double	0	NIL-DOWHILE	fa * $ > 0.0
22692	260	8	UnivariateSolverUtils.java	bracket	numIterations	int	0	NIL-DOWHILE	$ < maximumIterations
22692	260	8	UnivariateSolverUtils.java	bracket	lowerBound	double	0	NIL-DOWHILE	a > $
22692	260	8	UnivariateSolverUtils.java	bracket	upperBound	double	0	NIL-DOWHILE	b < $
22692	260	8	UnivariateSolverUtils.java	bracket	maximumIterations	int	0	NIL-DOWHILE	numIterations < $
3286	270	8	UnivariateSolverUtils.java	bracket	fa	double	0	NoBracketingException	$ * fb > 0.0
3286	270	8	UnivariateSolverUtils.java	bracket	fb	double	0	NoBracketingException	fa * $ > 0.0
3287	305	8	UnivariateSolverUtils.java	isBracketing	function	UnivariateFunction	0	NullArgumentException	$ == null
3288	336	8	UnivariateSolverUtils.java	verifyInterval	lower	double	0	NumberIsTooLargeException	$ >= upper
3288	336	8	UnivariateSolverUtils.java	verifyInterval	upper	double	0	NumberIsTooLargeException	lower >= $
3289	371	8	UnivariateSolverUtils.java	verifyBracketing	function	UnivariateFunction	0	NullArgumentException	$ == null
3290	375	8	UnivariateSolverUtils.java	verifyBracketing	THIS	UnivariateSolverUtils	0	NoBracketingException	$.isBracketing(function, lower, upper)
3290	375	8	UnivariateSolverUtils.java	verifyBracketing	function	UnivariateFunction	0	NoBracketingException	isBracketing($, lower, upper)
3290	375	8	UnivariateSolverUtils.java	verifyBracketing	lower	double	0	NoBracketingException	isBracketing(function, $, upper)
3290	375	8	UnivariateSolverUtils.java	verifyBracketing	upper	double	0	NoBracketingException	isBracketing(function, lower, $)
22325	139	8	ValueServer.java	fill	THIS	ValueServer	0	NIL-FOR	i < values.$.length
22325	139	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < values.length
22325	139	8	ValueServer.java	fill	values	double[]	0	NIL-FOR	i < $.length
22326	154	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < length
22326	154	8	ValueServer.java	fill	length	int	0	NIL-FOR	i < $
2528	262	8	ValueServer.java	resetReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
2529	279	8	ValueServer.java	closeReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
2530	353	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	MathIllegalStateException	$.empiricalDistribution == null
2530	353	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	MathIllegalStateException	$.empiricalDistribution.getBinStats().size() == 0
2531	380	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	$.filePointer == null
2532	383	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	MathIllegalStateException	(str = $.filePointer.readLine()) == null
2532	383	8	ValueServer.java	getNextReplay	str	String	0	MathIllegalStateException	($ = filePointer.readLine()) == null
2533	387	12	ValueServer.java	getNextReplay	THIS	ValueServer	0	MathIllegalStateException	(str = $.filePointer.readLine()) == null
2533	387	12	ValueServer.java	getNextReplay	str	String	0	MathIllegalStateException	($ = filePointer.readLine()) == null
2053	169	8	Variance.java	increment	THIS	Variance	0	DEF	$.incMoment
2054	179	12	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 0
2055	181	19	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 1
2056	184	16	Variance.java	getResult	THIS	Variance	1	RET	$.isBiasCorrected
2057	204	8	Variance.java	clear	THIS	Variance	0	DEF	$.incMoment
2058	227	8	Variance.java	evaluate	values	double[]	0	NullArgumentException	$ == null
2059	258	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
2059	258	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2059	258	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
2059	258	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
2060	260	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2061	262	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
2062	318	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights,begin, length)
2062	318	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights,begin, length)
2062	318	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $,begin, length)
2062	318	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights,$, length)
2062	318	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights,begin, $)
2063	320	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2064	322	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
2065	404	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
2065	404	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2065	404	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
2065	404	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
2066	405	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2067	407	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
22121	411	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
22121	411	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
22121	411	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2068	417	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
2069	506	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights, begin, length)
2069	506	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length)
2069	506	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length)
2069	506	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights, $, length)
2069	506	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights, begin, $)
2070	507	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2071	509	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
22122	513	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
22122	513	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
22122	513	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
22123	520	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
22123	520	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
22123	520	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2072	524	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
716	188	8	Vector1D.java	normalize	s	double	0	MathArithmeticException	$ == 0
717	305	8	Vector1D.java	equals	THIS	Vector1D	0	RET	$ == other
717	305	8	Vector1D.java	equals	other	Object	0	RET	this == $
718	309	8	Vector1D.java	equals	other	Object	0	RET	$ instanceof Vector1D
719	311	12	Vector1D.java	equals	rhs	Vector1D	0	RET	$.isNaN()
720	329	8	Vector1D.java	hashCode	THIS	Vector1D	0	RET	$.isNaN()
714	115	8	Vector1DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
715	127	8	Vector1DFormat.java	parse	coordinates	double[]	0	RET	$ == null
760	80	8	Vector2D.java	Vector2D	THIS	Vector2D	0	DimensionMismatchException	v.$.length != 2
760	80	8	Vector2D.java	Vector2D	v	double[]	0	DimensionMismatchException	$.length != 2
761	226	8	Vector2D.java	normalize	s	double	0	MathArithmeticException	$ == 0
762	347	8	Vector2D.java	equals	THIS	Vector2D	0	RET	$ == other
762	347	8	Vector2D.java	equals	other	Object	0	RET	this == $
763	351	8	Vector2D.java	equals	other	Object	0	RET	$ instanceof Vector2D
764	353	12	Vector2D.java	equals	rhs	Vector2D	0	RET	$.isNaN()
765	371	8	Vector2D.java	hashCode	THIS	Vector2D	0	RET	$.isNaN()
730	118	8	Vector2DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
731	130	8	Vector2DFormat.java	parse	coordinates	double[]	0	RET	$ == null
689	108	8	Vector3D.java	Vector3D	THIS	Vector3D	0	DimensionMismatchException	v.$.length != 3
689	108	8	Vector3D.java	Vector3D	v	double[]	0	DimensionMismatchException	$.length != 3
690	298	8	Vector3D.java	normalize	s	double	0	MathArithmeticException	$ == 0
691	322	8	Vector3D.java	orthogonal	threshold	double	0	MathArithmeticException	$ == 0
692	326	8	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x <= threshold
692	326	8	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x >= -threshold
692	326	8	Vector3D.java	orthogonal	threshold	double	1	RET	x <= $
692	326	8	Vector3D.java	orthogonal	threshold	double	1	RET	x >= -$
693	329	15	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y >= -threshold
693	329	15	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y <= threshold
693	329	15	Vector3D.java	orthogonal	threshold	double	0	RET	y >= -$
693	329	15	Vector3D.java	orthogonal	threshold	double	0	RET	y <= $
694	352	8	Vector3D.java	angle	normProduct	double	0	MathArithmeticException	$ == 0
695	358	8	Vector3D.java	angle	dot	double	0	RET	$ > threshold
695	358	8	Vector3D.java	angle	dot	double	0	RET	$ < -threshold
695	358	8	Vector3D.java	angle	threshold	double	0	RET	dot > $
695	358	8	Vector3D.java	angle	threshold	double	0	RET	dot < -$
696	361	12	Vector3D.java	angle	dot	double	0	RET	$ >= 0
697	414	8	Vector3D.java	equals	THIS	Vector3D	0	RET	$ == other
697	414	8	Vector3D.java	equals	other	Object	0	RET	this == $
698	418	8	Vector3D.java	equals	other	Object	0	RET	$ instanceof Vector3D
699	420	12	Vector3D.java	equals	rhs	Vector3D	0	RET	$.isNaN()
700	438	8	Vector3D.java	hashCode	THIS	Vector3D	0	RET	$.isNaN()
642	130	8	Vector3DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
643	147	8	Vector3DFormat.java	parse	coordinates	double[]	0	RET	$ == null
20936	202	8	VectorFormat.java	format	THIS	VectorFormat	0	NIL-FOR	i < coordinates.$.length
20936	202	8	VectorFormat.java	format	i	int	0	NIL-FOR	$ < coordinates.length
20936	202	8	VectorFormat.java	format	coordinates	double	0	NIL-FOR	i < $.length
632	203	12	VectorFormat.java	format	i	int	0	DEF	$ > 0
633	247	8	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedPrefix, pos)
633	247	8	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
633	247	8	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
20937	251	8	VectorFormat.java	parseCoordinates	i	int	0	NIL-FOR	$ < dimension
20937	251	8	VectorFormat.java	parseCoordinates	dimension	int	0	NIL-FOR	i < $
634	257	12	VectorFormat.java	parseCoordinates	i	int	0	RET	$ > 0
635	258	16	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSeparator, pos)
635	258	16	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSeparator, pos)
635	258	16	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSeparator, $)
636	268	12	VectorFormat.java	parseCoordinates	c	Number	0	RET	$ == null
637	282	8	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSuffix, pos)
637	282	8	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
637	282	8	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
2083	66	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	DimensionMismatchException	v.$.length != $.sums.$.length
2083	66	8	VectorialCovariance.java	increment	v	double[]	0	DimensionMismatchException	$.length != sums.length
22128	70	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	NIL-FOR	i < v.$.length
22128	70	8	VectorialCovariance.java	increment	i	int	0	NIL-FOR	$ < v.length
22128	70	8	VectorialCovariance.java	increment	v	double[]	0	NIL-FOR	i < $.length
22129	72	12	VectorialCovariance.java	increment	j	int	0	NIL-FOR	$ <= i
22129	72	12	VectorialCovariance.java	increment	i	int	0	NIL-FOR	j <= $
2084	88	8	VectorialCovariance.java	getResult	THIS	VectorialCovariance	0	DEF	$.n > 1
22130	91	12	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	$ < dimension
22130	91	12	VectorialCovariance.java	getResult	dimension	int	0	NIL-FOR	i < $
22131	92	16	VectorialCovariance.java	getResult	j	int	0	NIL-FOR	$ <= i
22131	92	16	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	j <= $
2085	136	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$ == obj
2085	136	8	VectorialCovariance.java	equals	obj	Object	0	RET	this == $
2086	139	8	VectorialCovariance.java	equals	obj	Object	0	RET	$ instanceof VectorialCovariance
2087	143	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.isBiasCorrected != other.$.isBiasCorrected
2087	143	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	isBiasCorrected != $.isBiasCorrected
2088	146	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.n != other.$.n
2088	146	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	n != $.n
2089	149	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.productsSums, other.$.productsSums)
2089	149	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(productsSums, $.productsSums)
2090	152	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.sums, other.$.sums)
2090	152	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(sums, $.sums)
22134	42	8	VectorialMean.java	VectorialMean	i	int	0	NIL-FOR	$ < dimension
22134	42	8	VectorialMean.java	VectorialMean	dimension	int	0	NIL-FOR	i < $
2106	53	8	VectorialMean.java	increment	THIS	VectorialMean	0	DimensionMismatchException	v.$.length != $.means.$.length
2106	53	8	VectorialMean.java	increment	v	double[]	0	DimensionMismatchException	$.length != means.length
22135	56	8	VectorialMean.java	increment	THIS	VectorialMean	0	NIL-FOR	i < v.$.length
22135	56	8	VectorialMean.java	increment	i	int	0	NIL-FOR	$ < v.length
22135	56	8	VectorialMean.java	increment	v	double[]	0	NIL-FOR	i < $.length
22136	67	8	VectorialMean.java	getResult	THIS	VectorialMean	0	NIL-FOR	i < result.$.length
22136	67	8	VectorialMean.java	getResult	i	int	0	NIL-FOR	$ < result.length
22136	67	8	VectorialMean.java	getResult	result	double[]	0	NIL-FOR	i < $.length
2107	93	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	$ == obj
2107	93	8	VectorialMean.java	equals	obj	Object	0	RET	this == $
2108	96	8	VectorialMean.java	equals	obj	Object	0	RET	$ instanceof VectorialMean
2109	100	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	Arrays.equals($.means, other.$.means)
2109	100	8	VectorialMean.java	equals	other	VectorialMean	0	RET	Arrays.equals(means, $.means)
967	114	8	WeibullDistribution.java	WeibullDistribution	alpha	double	0	NotStrictlyPositiveException	$ <= 0
968	118	8	WeibullDistribution.java	WeibullDistribution	beta	double	0	NotStrictlyPositiveException	$ <= 0
969	147	8	WeibullDistribution.java	density	x	double	0	RET	$ < 0
970	167	8	WeibullDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
971	184	8	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
971	184	8	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
972	186	15	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
973	188	16	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
974	215	8	WeibullDistribution.java	getNumericalMean	THIS	WeibullDistribution	0	DEF	$.numericalMeanIsCalculated
975	241	8	WeibullDistribution.java	getNumericalVariance	THIS	WeibullDistribution	0	DEF	$.numericalVarianceIsCalculated
2186	78	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	NullArgumentException	$ == null
2186	78	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	NullArgumentException	$ == null
2187	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	NoDataException	y.$.length == 0
2187	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	NoDataException	x.$.length == 0
2187	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	NoDataException	$.length == 0
2187	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	NoDataException	$.length == 0
2188	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	DimensionMismatchException	y.$.length != x.$.length
2188	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	DimensionMismatchException	y.length != $.length
2188	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	DimensionMismatchException	$.length != x.length
22147	102	8	WilcoxonSignedRankTest.java	calculateDifferences	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < x.$.length
22147	102	8	WilcoxonSignedRankTest.java	calculateDifferences	i	int	0	NIL-FOR	$ < x.length
22147	102	8	WilcoxonSignedRankTest.java	calculateDifferences	x	double[]	0	NIL-FOR	i < $.length
2189	120	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NullArgumentException	$ == null
2190	124	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTest	0	NoDataException	z.$.length == 0
2190	124	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NoDataException	$.length == 0
22148	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < z.$.length
22148	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	i	int	0	NIL-FOR	$ < z.length
22148	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NIL-FOR	i < $.length
22149	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < z.$.length
22149	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	i	int	0	NIL-FOR	$ < z.length
22149	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	z	double[]	0	NIL-FOR	i < $.length
2191	187	12	WilcoxonSignedRankTest.java	wilcoxonSignedRank	i	int	0	DEF	z[$] > 0
2191	187	12	WilcoxonSignedRankTest.java	wilcoxonSignedRank	z	double[]	0	DEF	$[i] > 0
22150	215	8	WilcoxonSignedRankTest.java	calculateExactPValue	i	int	0	NIL-FOR	$ < m
22150	215	8	WilcoxonSignedRankTest.java	calculateExactPValue	m	int	0	NIL-FOR	i < $
22151	219	12	WilcoxonSignedRankTest.java	calculateExactPValue	j	int	0	NIL-FOR	$ < N
2192	222	16	WilcoxonSignedRankTest.java	calculateExactPValue	j	int	0	DEF	((i >> $) & 1) == 1
2192	222	16	WilcoxonSignedRankTest.java	calculateExactPValue	i	int	0	DEF	(($ >> j) & 1) == 1
2193	227	12	WilcoxonSignedRankTest.java	calculateExactPValue	rankSum	int	0	DEF	$ >= Wmax
2193	227	12	WilcoxonSignedRankTest.java	calculateExactPValue	Wmax	double	0	DEF	rankSum >= $
2194	313	8	WilcoxonSignedRankTest.java	wilcoxonSignedRankTest	exactPValue	boolean	0	NumberIsTooLargeException	$
2195	317	8	WilcoxonSignedRankTest.java	wilcoxonSignedRankTest	exactPValue	boolean	1	RET	$
1112	77	8	ZipfDistribution.java	ZipfDistribution	numberOfElements	int	0	NotStrictlyPositiveException	$ <= 0
1113	81	8	ZipfDistribution.java	ZipfDistribution	exponent	double	0	NotStrictlyPositiveException	$ <= 0
1114	110	8	ZipfDistribution.java	probability	THIS	ZipfDistribution	0	RET	x > $.numberOfElements
1114	110	8	ZipfDistribution.java	probability	x	int	0	RET	$ <= 0
1114	110	8	ZipfDistribution.java	probability	x	int	0	RET	$ > numberOfElements
1115	119	8	ZipfDistribution.java	cumulativeProbability	x	int	1	RET	$ <= 0
1116	121	15	ZipfDistribution.java	cumulativeProbability	THIS	ZipfDistribution	0	RET	x >= $.numberOfElements
1116	121	15	ZipfDistribution.java	cumulativeProbability	x	int	0	RET	$ >= numberOfElements
1117	139	8	ZipfDistribution.java	getNumericalMean	THIS	ZipfDistribution	0	DEF	$.numericalMeanIsCalculated
1118	173	8	ZipfDistribution.java	getNumericalVariance	THIS	ZipfDistribution	0	DEF	$.numericalVarianceIsCalculated
20992	207	8	ZipfDistribution.java	generalizedHarmonic	k	int	0	NIL-FOR	$ > 0
