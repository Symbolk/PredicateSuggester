id	line	column	filename	methodname	varname	vartype	else	return	right
325	61	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	IllegalArgumentException	$ < 0.0
325	61	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	IllegalArgumentException	$ > 1.0
326	96	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	Math.abs($.value(lowerBound)) < 1E-6
326	96	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	lowerBound	double	0	RET	Math.abs(rootFindingFunction.value($)) < 1E-6
327	99	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	Math.abs($.value(upperBound)) < 1E-6
327	99	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	upperBound	double	0	RET	Math.abs(rootFindingFunction.value($)) < 1E-6
357	60	8	AbstractDistribution.java	cumulativeProbability	x0	double	0	IllegalArgumentException	$ > x1
357	60	8	AbstractDistribution.java	cumulativeProbability	x1	double	0	IllegalArgumentException	x0 > $
44579	77	8	AbstractEstimator.java	updateJacobian	THIS	AbstractEstimator	0	NIL-FOR	i < $.rows
44579	77	8	AbstractEstimator.java	updateJacobian	i	int	0	NIL-FOR	$ < rows
44580	80	12	AbstractEstimator.java	updateJacobian	THIS	AbstractEstimator	0	NIL-FOR	j < $.cols
44580	80	12	AbstractEstimator.java	updateJacobian	j	int	0	NIL-FOR	$ < cols
944	101	8	AbstractEstimator.java	updateResidualsAndCost	THIS	AbstractEstimator	0	EstimationException	++$.costEvaluations > $.maxCostEval
44581	107	8	AbstractEstimator.java	updateResidualsAndCost	THIS	AbstractEstimator	0	NIL-FOR	i < $.rows
44581	107	8	AbstractEstimator.java	updateResidualsAndCost	i	int	0	NIL-FOR	$ < rows
44582	131	8	AbstractEstimator.java	getRMS	THIS	AbstractEstimator	0	NIL-FOR	i < wm.$.length
44582	131	8	AbstractEstimator.java	getRMS	i	int	0	NIL-FOR	$ < wm.length
44582	131	8	AbstractEstimator.java	getRMS	wm	WeightedMeasurement[]	0	NIL-FOR	i < $.length
44583	146	8	AbstractEstimator.java	getChiSquare	THIS	AbstractEstimator	0	NIL-FOR	i < wm.$.length
44583	146	8	AbstractEstimator.java	getChiSquare	i	int	0	NIL-FOR	$ < wm.length
44583	146	8	AbstractEstimator.java	getChiSquare	wm	WeightedMeasurement[]	0	NIL-FOR	i < $.length
44584	171	8	AbstractEstimator.java	getCovariances	i	int	0	NIL-FOR	$ < cols
44584	171	8	AbstractEstimator.java	getCovariances	cols	int	0	NIL-FOR	i < $
44585	172	12	AbstractEstimator.java	getCovariances	j	int	0	NIL-FOR	$ < cols
44585	172	12	AbstractEstimator.java	getCovariances	cols	int	0	NIL-FOR	j < $
44586	174	16	AbstractEstimator.java	getCovariances	k	int	0	NIL-FOR	$ < max
44586	174	16	AbstractEstimator.java	getCovariances	max	int	0	NIL-FOR	k < $
945	207	8	AbstractEstimator.java	guessParametersErrors	m	int	0	EstimationException	$ <= p
945	207	8	AbstractEstimator.java	guessParametersErrors	p	int	0	EstimationException	m <= $
44587	214	8	AbstractEstimator.java	guessParametersErrors	THIS	AbstractEstimator	0	NIL-FOR	i < errors.$.length
44587	214	8	AbstractEstimator.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
44587	214	8	AbstractEstimator.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
284	78	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	0	IllegalArgumentException	$ > x1
284	78	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	double	0	IllegalArgumentException	x0 > $
285	82	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	1	RET	Math.floor($) < $
286	116	8	AbstractIntegerDistribution.java	probability	fl	double	1	RET	$ == x
286	116	8	AbstractIntegerDistribution.java	probability	x	double	1	RET	fl == $
287	135	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	int	0	IllegalArgumentException	$ > x1
287	135	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	int	0	IllegalArgumentException	x0 > $
288	154	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	IllegalArgumentException	$ < 0.0
288	154	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	IllegalArgumentException	$ > 1.0
43957	164	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	0	NIL-WHILE	$ < x1
43957	164	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	0	NIL-WHILE	x0 < $
289	167	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	1	DEF	$ > p
289	167	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	1	DEF	pm > $
290	169	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x1
290	169	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	1	DEF	xm == $
291	179	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x0
291	179	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	1	DEF	xm == $
43958	192	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	0	NIL-WHILE	$ > p
43958	192	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	pm > $
1136	109	12	AbstractIntegrator.java	requiresDenseOutput	THIS	AbstractIntegrator	0	RET	$.handler.requiresDenseOutput()
1137	139	8	AbstractIntegrator.java	sanityChecks	THIS	AbstractIntegrator	0	IntegratorException	equations.getDimension() != y0.$.length
1137	139	8	AbstractIntegrator.java	sanityChecks	equations	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y0.length
1137	139	8	AbstractIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	equations.getDimension() != $.length
1138	148	8	AbstractIntegrator.java	sanityChecks	THIS	AbstractIntegrator	0	IntegratorException	equations.getDimension() != y.$.length
1138	148	8	AbstractIntegrator.java	sanityChecks	equations	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y.length
1138	148	8	AbstractIntegrator.java	sanityChecks	y	double[]	0	IntegratorException	equations.getDimension() != $.length
1139	157	8	AbstractIntegrator.java	sanityChecks	t0	double	0	IntegratorException	Math.abs(t - $) <= 1.0e-12 * Math.max(Math.abs($), Math.abs(t))
1139	157	8	AbstractIntegrator.java	sanityChecks	t	double	0	IntegratorException	Math.abs($ - t0) <= 1.0e-12 * Math.max(Math.abs(t0), Math.abs($))
44534	48	8	AbstractMultipleLinearRegression.java	newSampleData	i	int	0	NIL-FOR	$ < nobs
44534	48	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NIL-FOR	i < $
44535	51	12	AbstractMultipleLinearRegression.java	newSampleData	j	int	0	NIL-FOR	$ < nvars + 1
44535	51	12	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	NIL-FOR	j < $ + 1
869	86	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	IllegalArgumentException	$ == null
870	89	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	IllegalArgumentException	$ == null
871	92	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	IllegalArgumentException	x.$.length != y.$.length
871	92	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	IllegalArgumentException	$.length != y.length
871	92	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	IllegalArgumentException	x.length != $.length
872	107	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	IllegalArgumentException	$ == null
873	110	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	IllegalArgumentException	x.$.length != covariance.$.length
873	110	8	AbstractMultipleLinearRegression.java	validateCovarianceData	x	double[][]	0	IllegalArgumentException	$.length != covariance.length
873	110	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	IllegalArgumentException	x.length != $.length
874	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	IllegalArgumentException	covariance.$.length != covariance[0].length
874	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	IllegalArgumentException	covariance.$.length > 0
874	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	IllegalArgumentException	$.length != $[0].length
874	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	IllegalArgumentException	$.length > 0
44536	151	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	i	int	0	NIL-FOR	$ < length
44536	151	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	length	int	0	NIL-FOR	i < $
44555	91	8	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	NIL-WHILE	bytesOut < bytes.$.length
44555	91	8	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	NIL-WHILE	$ < bytes.length
44555	91	8	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	bytesOut < $.length
44556	93	10	AbstractRandomGenerator.java	nextBytes	i	int	0	NIL-FOR	$ < 3
902	94	14	AbstractRandomGenerator.java	nextBytes	i	int	0	DEF	$ > 0
903	98	14	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	RET	bytesOut == bytes.$.length
903	98	14	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	RET	$ == bytes.length
903	98	14	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	RET	bytesOut == $.length
904	140	8	AbstractRandomGenerator.java	nextInt	n	int	0	IllegalArgumentException	$ <= 0
905	236	8	AbstractRandomGenerator.java	nextGaussian	THIS	AbstractRandomGenerator	0	RET	Double.isNaN($.cachedNormalDeviate)
44557	244	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	NIL-WHILE	$ >=1
906	249	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	DEF	$ != 0
476	59	8	AbstractRealMatrix.java	AbstractRealMatrix	rowDimension	int	0	DEF	$ <= 0
477	64	8	AbstractRealMatrix.java	AbstractRealMatrix	columnDimension	int	0	DEF	$ <= 0
44142	88	8	AbstractRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
44142	88	8	AbstractRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
44143	89	12	AbstractRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
44143	89	12	AbstractRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
44144	107	8	AbstractRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
44144	107	8	AbstractRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
44145	108	12	AbstractRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
44145	108	12	AbstractRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
44146	123	8	AbstractRealMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
44146	123	8	AbstractRealMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
44147	124	12	AbstractRealMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
44147	124	12	AbstractRealMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
44148	139	8	AbstractRealMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
44148	139	8	AbstractRealMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
44149	140	12	AbstractRealMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
44149	140	12	AbstractRealMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
44150	160	8	AbstractRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
44150	160	8	AbstractRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
44151	161	12	AbstractRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
44151	161	12	AbstractRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
44152	163	16	AbstractRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
44152	163	16	AbstractRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
44153	185	8	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	i < data.$.length
44153	185	8	AbstractRealMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
44153	185	8	AbstractRealMatrix.java	getData	data	double[][]	0	NIL-FOR	i < $.length
44154	187	12	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	j < dataI.$.length
44154	187	12	AbstractRealMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
44154	187	12	AbstractRealMatrix.java	getData	dataI	double[]	0	NIL-FOR	j < $.length
44155	277	8	AbstractRealMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
44155	277	8	AbstractRealMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
44156	278	12	AbstractRealMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
44156	278	12	AbstractRealMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
478	323	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination.$.length < rowsCount
478	323	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination[0].length < columnsCount
478	323	8	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	DEF	destination.length < $
478	323	8	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	DEF	destination[0].length < $
478	323	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$.length < rowsCount
478	323	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$[0].length < columnsCount
479	367	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination.$.length < selectedRows.$.length
479	367	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination[0].length < selectedColumns.$.length
479	367	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	DEF	destination.length < $.length
479	367	8	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	DEF	destination[0].length < $.length
479	367	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$.length < selectedRows.length
479	367	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$[0].length < selectedColumns.length
44157	378	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	i < selectedRows.$.length
44157	378	8	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
44157	378	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
44158	380	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	j < selectedColumns.$.length
44158	380	12	AbstractRealMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
44158	380	12	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
480	392	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	DEF	$ == 0
481	398	8	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DEF	$ == 0
44159	403	8	AbstractRealMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
44159	403	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
482	404	12	AbstractRealMatrix.java	setSubMatrix	THIS	AbstractRealMatrix	0	DEF	subMatrix[r].length != nCols
482	404	12	AbstractRealMatrix.java	setSubMatrix	r	int	0	DEF	subMatrix[$].length != nCols
482	404	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DEF	subMatrix[r].length != $
482	404	12	AbstractRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DEF	$[r].length != nCols
44160	417	8	AbstractRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
44160	417	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
44161	418	12	AbstractRealMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
44161	418	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
44162	434	8	AbstractRealMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
44162	434	8	AbstractRealMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
483	448	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	InvalidMatrixException	matrix.getColumnDimension() != $
483	448	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getColumnDimension() != nCols
483	448	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getRowDimension() != 1
44163	457	8	AbstractRealMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
44163	457	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
44164	470	8	AbstractRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
44164	470	8	AbstractRealMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
484	484	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	InvalidMatrixException	matrix.getRowDimension() != $
484	484	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getColumnDimension() != 1
484	484	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getRowDimension() != nRows
44165	493	8	AbstractRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
44165	493	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
485	511	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	InvalidMatrixException	vector.getDimension() != $
485	511	8	AbstractRealMatrix.java	setRowVector	vector	RealVector	0	InvalidMatrixException	$.getDimension() != nCols
44166	518	8	AbstractRealMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
44166	518	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
486	536	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	InvalidMatrixException	vector.getDimension() != $
486	536	8	AbstractRealMatrix.java	setColumnVector	vector	RealVector	0	InvalidMatrixException	$.getDimension() != nRows
44167	543	8	AbstractRealMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
44167	543	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
44168	556	8	AbstractRealMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
44168	556	8	AbstractRealMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
487	570	8	AbstractRealMatrix.java	setRow	THIS	AbstractRealMatrix	0	InvalidMatrixException	array.$.length != nCols
487	570	8	AbstractRealMatrix.java	setRow	nCols	int	0	InvalidMatrixException	array.length != $
487	570	8	AbstractRealMatrix.java	setRow	array	double[]	0	InvalidMatrixException	$.length != nCols
44169	577	8	AbstractRealMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
44169	577	8	AbstractRealMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
44170	590	8	AbstractRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
44170	590	8	AbstractRealMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
488	604	8	AbstractRealMatrix.java	setColumn	THIS	AbstractRealMatrix	0	InvalidMatrixException	array.$.length != nRows
488	604	8	AbstractRealMatrix.java	setColumn	nRows	int	0	InvalidMatrixException	array.length != $
488	604	8	AbstractRealMatrix.java	setColumn	array	double[]	0	InvalidMatrixException	$.length != nRows
44171	611	8	AbstractRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
44171	611	8	AbstractRealMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
489	659	8	AbstractRealMatrix.java	inverse	THIS	AbstractRealMatrix	0	DEF	$.lu == null
490	680	8	AbstractRealMatrix.java	isSingular	THIS	AbstractRealMatrix	0	DEF	$.lu == null
491	697	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
491	697	8	AbstractRealMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
44172	701	8	AbstractRealMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
44172	701	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
492	713	8	AbstractRealMatrix.java	operate	THIS	AbstractRealMatrix	0	DEF	v.$.length != nCols
492	713	8	AbstractRealMatrix.java	operate	nCols	int	0	DEF	v.length != $
492	713	8	AbstractRealMatrix.java	operate	v	double[]	0	DEF	$.length != nCols
44173	722	8	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
44173	722	8	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
44174	724	12	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
44174	724	12	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
493	742	12	AbstractRealMatrix.java	operate	nCols	int	0	DEF	v.getDimension() != $
493	742	12	AbstractRealMatrix.java	operate	v	RealVector	0	DEF	$.getDimension() != nCols
44175	751	12	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
44175	751	12	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
44176	753	16	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
44176	753	16	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
494	769	8	AbstractRealMatrix.java	preMultiply	THIS	AbstractRealMatrix	0	DEF	v.$.length != nRows
494	769	8	AbstractRealMatrix.java	preMultiply	nRows	int	0	DEF	v.length != $
494	769	8	AbstractRealMatrix.java	preMultiply	v	double[]	0	DEF	$.length != nRows
44177	778	8	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
44177	778	8	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
44178	780	12	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
44178	780	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
495	799	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	DEF	v.getDimension() != $
495	799	12	AbstractRealMatrix.java	preMultiply	v	RealVector	0	DEF	$.getDimension() != nRows
44179	808	12	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
44179	808	12	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
44180	810	16	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
44180	810	16	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
44181	827	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
44181	827	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
44182	828	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
44182	828	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
44183	844	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
44183	844	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
44184	845	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
44184	845	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
44185	860	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
44185	860	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
44186	861	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
44186	861	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
44187	879	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
44187	879	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
44188	880	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
44188	880	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
44189	893	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
44189	893	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
44190	894	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
44190	894	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
44191	910	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
44191	910	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
44192	911	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
44192	911	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
44193	926	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
44193	926	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
44194	927	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
44194	927	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
44195	945	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
44195	945	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
44196	946	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
44196	946	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
496	985	8	AbstractRealMatrix.java	solve	THIS	AbstractRealMatrix	0	DEF	$.lu == null
497	995	8	AbstractRealMatrix.java	solve	THIS	AbstractRealMatrix	0	DEF	$.lu == null
498	1023	8	AbstractRealMatrix.java	luDecompose	THIS	AbstractRealMatrix	0	DEF	$.lu == null
44197	1040	8	AbstractRealMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
44197	1040	8	AbstractRealMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
499	1041	12	AbstractRealMatrix.java	toString	i	int	0	DEF	$ > 0
44198	1045	12	AbstractRealMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
44198	1045	12	AbstractRealMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
500	1046	16	AbstractRealMatrix.java	toString	j	int	0	DEF	$ > 0
501	1068	8	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	object == $
501	1068	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ == this
502	1071	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ instanceof RealMatrix == false
503	1077	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getColumnDimension() != nCols
503	1077	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getRowDimension() != nRows
503	1077	8	AbstractRealMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
503	1077	8	AbstractRealMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
44199	1080	8	AbstractRealMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
44199	1080	8	AbstractRealMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
44200	1081	12	AbstractRealMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
44200	1081	12	AbstractRealMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
504	1082	16	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	$.getEntry(row, col) != m.getEntry(row, col)
504	1082	16	AbstractRealMatrix.java	equals	col	int	0	RET	getEntry(row, $) != m.getEntry(row, $)
504	1082	16	AbstractRealMatrix.java	equals	row	int	0	RET	getEntry($, col) != m.getEntry($, col)
504	1082	16	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	getEntry(row, col) != $.getEntry(row, col)
44201	1101	8	AbstractRealMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
44201	1101	8	AbstractRealMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
44202	1102	12	AbstractRealMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
44202	1102	12	AbstractRealMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
505	1116	8	AbstractRealMatrix.java	checkRowIndex	THIS	AbstractRealMatrix	0	MatrixIndexException	row >= $.getRowDimension()
505	1116	8	AbstractRealMatrix.java	checkRowIndex	row	int	0	MatrixIndexException	$ >= getRowDimension()
505	1116	8	AbstractRealMatrix.java	checkRowIndex	row	int	0	MatrixIndexException	$ < 0
506	1129	8	AbstractRealMatrix.java	checkColumnIndex	THIS	AbstractRealMatrix	0	MatrixIndexException	column >= $.getColumnDimension()
506	1129	8	AbstractRealMatrix.java	checkColumnIndex	column	int	0	MatrixIndexException	$ < 0
506	1129	8	AbstractRealMatrix.java	checkColumnIndex	column	int	0	MatrixIndexException	$ >= getColumnDimension()
507	1149	8	AbstractRealMatrix.java	checkSubMatrixIndex	startRow	int	0	MatrixIndexException	$ > endRow
507	1149	8	AbstractRealMatrix.java	checkSubMatrixIndex	endRow	int	0	MatrixIndexException	startRow > $
508	1156	8	AbstractRealMatrix.java	checkSubMatrixIndex	startColumn	int	0	MatrixIndexException	$ > endColumn
508	1156	8	AbstractRealMatrix.java	checkSubMatrixIndex	endColumn	int	0	MatrixIndexException	startColumn > $
509	1173	8	AbstractRealMatrix.java	checkSubMatrixIndex	THIS	AbstractRealMatrix	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
509	1173	8	AbstractRealMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
509	1173	8	AbstractRealMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
510	1174	12	AbstractRealMatrix.java	checkSubMatrixIndex	THIS	AbstractRealMatrix	0	MatrixIndexException	selectedRows.$.length == 0
510	1174	12	AbstractRealMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length == 0
511	1194	8	AbstractRealMatrix.java	checkAdditionCompatible	THIS	AbstractRealMatrix	0	DEF	$.getRowDimension() != m.getRowDimension()
511	1194	8	AbstractRealMatrix.java	checkAdditionCompatible	THIS	AbstractRealMatrix	0	DEF	$.getColumnDimension() != m.getColumnDimension()
511	1194	8	AbstractRealMatrix.java	checkAdditionCompatible	m	RealMatrix	0	DEF	getRowDimension() != $.getRowDimension()
511	1194	8	AbstractRealMatrix.java	checkAdditionCompatible	m	RealMatrix	0	DEF	getColumnDimension() != $.getColumnDimension()
512	1213	8	AbstractRealMatrix.java	checkSubtractionCompatible	THIS	AbstractRealMatrix	0	DEF	$.getRowDimension() != m.getRowDimension()
512	1213	8	AbstractRealMatrix.java	checkSubtractionCompatible	THIS	AbstractRealMatrix	0	DEF	$.getColumnDimension() != m.getColumnDimension()
512	1213	8	AbstractRealMatrix.java	checkSubtractionCompatible	m	RealMatrix	0	DEF	getRowDimension() != $.getRowDimension()
512	1213	8	AbstractRealMatrix.java	checkSubtractionCompatible	m	RealMatrix	0	DEF	getColumnDimension() != $.getColumnDimension()
513	1232	8	AbstractRealMatrix.java	checkMultiplicationCompatible	THIS	AbstractRealMatrix	0	DEF	$.getColumnDimension() != m.getRowDimension()
513	1232	8	AbstractRealMatrix.java	checkMultiplicationCompatible	m	RealMatrix	0	DEF	getColumnDimension() != $.getRowDimension()
1009	144	4	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	1	DEF	interpolator.$.currentState != null
1009	144	4	AbstractStepInterpolator.java	AbstractStepInterpolator	interpolator	AbstractStepInterpolator	1	DEF	$.currentState != null
1010	321	4	AbstractStepInterpolator.java	finalizeStep	THIS	AbstractStepInterpolator	0	DEF	$.finalized
44667	360	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
44667	360	4	AbstractStepInterpolator.java	writeBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
44668	397	4	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
44668	397	4	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
708	59	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	IllegalArgumentException	$ == null
709	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
709	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	test($, begin, length)
709	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	begin	int	0	DEF	test(values, $, length)
709	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	length	int	0	DEF	test(values, begin, $)
710	125	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	IllegalArgumentException	$ == null
711	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
711	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	test($, begin, length)
711	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	begin	int	0	DEF	test(values, $, length)
711	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	length	int	0	DEF	test(values, begin, $)
44490	146	12	AbstractStorelessUnivariateStatistic.java	incrementAll	i	int	0	NIL-FOR	$ < k
44490	146	12	AbstractStorelessUnivariateStatistic.java	incrementAll	k	int	0	NIL-FOR	i < $
712	160	8	AbstractStorelessUnivariateStatistic.java	equals	THIS	AbstractStorelessUnivariateStatistic	0	RET	object == $
712	160	8	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ == this
713	163	7	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ instanceof AbstractStorelessUnivariateStatistic == false
799	82	8	AbstractUnivariateStatistic.java	test	values	double[]	0	IllegalArgumentException	$ == null
800	86	8	AbstractUnivariateStatistic.java	test	begin	int	0	IllegalArgumentException	$ < 0
801	90	8	AbstractUnivariateStatistic.java	test	length	int	0	IllegalArgumentException	$ < 0
802	94	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	IllegalArgumentException	begin + length > values.$.length
802	94	8	AbstractUnivariateStatistic.java	test	values	double[]	0	IllegalArgumentException	begin + length > $.length
802	94	8	AbstractUnivariateStatistic.java	test	begin	int	0	IllegalArgumentException	$ + length > values.length
802	94	8	AbstractUnivariateStatistic.java	test	length	int	0	IllegalArgumentException	begin + $ > values.length
803	99	8	AbstractUnivariateStatistic.java	test	length	int	0	RET	$ == 0
44735	86	8	AdamsBashforthIntegrator.java	AdamsBashforthIntegrator	i	int	0	NIL-FOR	$ < order
44735	86	8	AdamsBashforthIntegrator.java	AdamsBashforthIntegrator	order	int	0	NIL-FOR	i < $
44736	88	12	AdamsBashforthIntegrator.java	AdamsBashforthIntegrator	j	int	0	NIL-FOR	$ < order
44736	88	12	AdamsBashforthIntegrator.java	AdamsBashforthIntegrator	order	int	0	NIL-FOR	j < $
1084	107	8	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1084	107	8	AdamsBashforthIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
1085	128	8	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	RET	Double.isNaN($.previousT[0])
44737	135	8	AdamsBashforthIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
44738	141	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	j < y0.$.length
44738	141	12	AdamsBashforthIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
44738	141	12	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
44739	143	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	l < $.coeffs.$.length
44739	143	16	AdamsBashforthIntegrator.java	integrate	l	int	0	NIL-FOR	$ < coeffs.length
1086	152	12	AdamsBashforthIntegrator.java	integrate	interpolator	AdamsBashforthStepInterpolator	1	DEF	manager.evaluateStep($)
1086	152	12	AdamsBashforthIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolator)
1087	172	12	AdamsBashforthIntegrator.java	integrate	lastStep	boolean	0	RET	$
1088	175	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	1	RET	manager.reset($.stepStart, y)
1088	175	16	AdamsBashforthIntegrator.java	integrate	manager	CombinedEventsManager	1	RET	$.reset(stepStart, y)
1088	175	16	AdamsBashforthIntegrator.java	integrate	y	double[]	1	RET	manager.reset(stepStart, $)
1089	181	20	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	RET	Double.isNaN($.previousT[0])
1090	188	20	AdamsBashforthIntegrator.java	integrate	truncated	boolean	1	DEF	$
44740	190	24	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	i < $.previousF.$.length
44740	190	24	AdamsBashforthIntegrator.java	integrate	i	int	0	NIL-FOR	$ < previousF.length
44741	249	8	AdamsBashforthIntegrator.java	computeBackwardDifferencesArray	i	int	0	NIL-FOR	$ < order
44741	249	8	AdamsBashforthIntegrator.java	computeBackwardDifferencesArray	order	int	0	NIL-FOR	i < $
44742	252	12	AdamsBashforthIntegrator.java	computeBackwardDifferencesArray	j	int	0	NIL-FOR	$ < i - 1
44742	252	12	AdamsBashforthIntegrator.java	computeBackwardDifferencesArray	i	int	0	NIL-FOR	j < $ - 1
44743	275	8	AdamsBashforthIntegrator.java	computeGammaArray	i	int	0	NIL-FOR	$ < order
44743	275	8	AdamsBashforthIntegrator.java	computeGammaArray	order	int	0	NIL-FOR	i < $
44744	277	12	AdamsBashforthIntegrator.java	computeGammaArray	j	int	0	NIL-FOR	$ <= i
44744	277	12	AdamsBashforthIntegrator.java	computeGammaArray	i	int	0	NIL-FOR	j <= $
44768	107	8	AdamsBashforthStepInterpolator.java	initializeCoefficients	THIS	AdamsBashforthStepInterpolator	0	NIL-FOR	i < fGamma.$.length
44768	107	8	AdamsBashforthStepInterpolator.java	initializeCoefficients	i	int	0	NIL-FOR	$ < fGamma.length
44768	107	8	AdamsBashforthStepInterpolator.java	initializeCoefficients	fGamma	Fraction[]	0	NIL-FOR	i < $.length
44769	154	8	AdamsBashforthStepInterpolator.java	interpolateDerivatives	THIS	AdamsBashforthStepInterpolator	0	NIL-FOR	i < $.interpolatedDerivatives.$.length
44769	154	8	AdamsBashforthStepInterpolator.java	interpolateDerivatives	i	int	0	NIL-FOR	$ < interpolatedDerivatives.length
44770	157	12	AdamsBashforthStepInterpolator.java	interpolateDerivatives	THIS	AdamsBashforthStepInterpolator	0	NIL-FOR	k < $.previousF.$.length
44770	157	12	AdamsBashforthStepInterpolator.java	interpolateDerivatives	k	int	0	NIL-FOR	$ < previousF.length
44771	162	12	AdamsBashforthStepInterpolator.java	interpolateDerivatives	THIS	AdamsBashforthStepInterpolator	0	NIL-FOR	l < $.neville.$.length
44771	162	12	AdamsBashforthStepInterpolator.java	interpolateDerivatives	l	int	0	NIL-FOR	$ < neville.length
44772	163	16	AdamsBashforthStepInterpolator.java	interpolateDerivatives	m	int	0	NIL-FOR	$ >= l
44772	163	16	AdamsBashforthStepInterpolator.java	interpolateDerivatives	l	int	0	NIL-FOR	m >= $
44773	231	8	AdamsBashforthStepInterpolator.java	interpolateState	THIS	AdamsBashforthStepInterpolator	0	NIL-FOR	j < $.interpolatedState.$.length
44773	231	8	AdamsBashforthStepInterpolator.java	interpolateState	j	int	0	NIL-FOR	$ < interpolatedState.length
44774	233	12	AdamsBashforthStepInterpolator.java	interpolateState	THIS	AdamsBashforthStepInterpolator	0	NIL-FOR	l < $.previousT.$.length
44774	233	12	AdamsBashforthStepInterpolator.java	interpolateState	l	int	0	NIL-FOR	$ < previousT.length
44775	250	8	AdamsBashforthStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	$ < order
44775	250	8	AdamsBashforthStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	i < $
44776	253	12	AdamsBashforthStepInterpolator.java	computeRollback	j	int	0	NIL-FOR	$ <= i
44776	253	12	AdamsBashforthStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	j <= $
44777	260	8	AdamsBashforthStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	$ < order
44777	260	8	AdamsBashforthStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	i < $
44778	266	8	AdamsBashforthStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	$ < order
44778	266	8	AdamsBashforthStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	i < $
44779	268	12	AdamsBashforthStepInterpolator.java	computeRollback	j	int	0	NIL-FOR	$ <= order
44779	268	12	AdamsBashforthStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	j <= $
44723	90	8	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	i	int	0	NIL-FOR	$ < order
44723	90	8	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	order	int	0	NIL-FOR	i < $
44724	92	12	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	j	int	0	NIL-FOR	$ < order
44724	92	12	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	order	int	0	NIL-FOR	j < $
44725	101	8	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	i	int	0	NIL-FOR	$ <= order
44725	101	8	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	order	int	0	NIL-FOR	i <= $
44726	103	12	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	j	int	0	NIL-FOR	$ <= order
44726	103	12	AdamsMoultonIntegrator.java	AdamsMoultonIntegrator	order	int	0	NIL-FOR	j <= $
1077	123	8	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1077	123	8	AdamsMoultonIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
1078	144	8	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	RET	Double.isNaN($.previousT[0])
44727	153	8	AdamsMoultonIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
44728	159	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
44728	159	12	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
44728	159	12	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
44729	161	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	l < $.predictorCoeffs.$.length
44729	161	16	AdamsMoultonIntegrator.java	integrate	l	int	0	NIL-FOR	$ < predictorCoeffs.length
44730	172	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
44730	172	12	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
44730	172	12	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
44731	174	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	l < $.correctorCoeffs.$.length
44731	174	16	AdamsMoultonIntegrator.java	integrate	l	int	0	NIL-FOR	$ < correctorCoeffs.length
1079	183	12	AdamsMoultonIntegrator.java	integrate	interpolator	AdamsMoultonStepInterpolator	1	DEF	manager.evaluateStep($)
1079	183	12	AdamsMoultonIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolator)
1080	203	12	AdamsMoultonIntegrator.java	integrate	lastStep	boolean	0	RET	$
1081	206	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	1	RET	manager.reset($.stepStart, y)
1081	206	16	AdamsMoultonIntegrator.java	integrate	manager	CombinedEventsManager	1	RET	$.reset(stepStart, y)
1081	206	16	AdamsMoultonIntegrator.java	integrate	y	double[]	1	RET	manager.reset(stepStart, $)
1082	212	20	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	RET	Double.isNaN($.previousT[0])
1083	221	20	AdamsMoultonIntegrator.java	integrate	truncated	boolean	1	DEF	$
44732	223	24	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	i < $.previousF.$.length
44732	223	24	AdamsMoultonIntegrator.java	integrate	i	int	0	NIL-FOR	$ < previousF.length
44733	284	8	AdamsMoultonIntegrator.java	computeGammaStarArray	i	int	0	NIL-FOR	$ <= order
44733	284	8	AdamsMoultonIntegrator.java	computeGammaStarArray	order	int	0	NIL-FOR	i <= $
44734	286	12	AdamsMoultonIntegrator.java	computeGammaStarArray	j	int	0	NIL-FOR	$ <= i
44734	286	12	AdamsMoultonIntegrator.java	computeGammaStarArray	i	int	0	NIL-FOR	j <= $
44675	107	8	AdamsMoultonStepInterpolator.java	initializeCoefficients	THIS	AdamsMoultonStepInterpolator	0	NIL-FOR	i < fGammaStar.$.length
44675	107	8	AdamsMoultonStepInterpolator.java	initializeCoefficients	i	int	0	NIL-FOR	$ < fGammaStar.length
44675	107	8	AdamsMoultonStepInterpolator.java	initializeCoefficients	fGammaStar	Fraction[]	0	NIL-FOR	i < $.length
44676	154	8	AdamsMoultonStepInterpolator.java	interpolateDerivatives	THIS	AdamsMoultonStepInterpolator	0	NIL-FOR	i < $.interpolatedDerivatives.$.length
44676	154	8	AdamsMoultonStepInterpolator.java	interpolateDerivatives	i	int	0	NIL-FOR	$ < interpolatedDerivatives.length
44677	157	12	AdamsMoultonStepInterpolator.java	interpolateDerivatives	THIS	AdamsMoultonStepInterpolator	0	NIL-FOR	k < $.previousF.$.length
44677	157	12	AdamsMoultonStepInterpolator.java	interpolateDerivatives	k	int	0	NIL-FOR	$ < previousF.length
44678	162	12	AdamsMoultonStepInterpolator.java	interpolateDerivatives	THIS	AdamsMoultonStepInterpolator	0	NIL-FOR	l < $.neville.$.length
44678	162	12	AdamsMoultonStepInterpolator.java	interpolateDerivatives	l	int	0	NIL-FOR	$ < neville.length
44679	163	16	AdamsMoultonStepInterpolator.java	interpolateDerivatives	m	int	0	NIL-FOR	$ >= l
44679	163	16	AdamsMoultonStepInterpolator.java	interpolateDerivatives	l	int	0	NIL-FOR	m >= $
44680	232	8	AdamsMoultonStepInterpolator.java	interpolateState	THIS	AdamsMoultonStepInterpolator	0	NIL-FOR	j < $.interpolatedState.$.length
44680	232	8	AdamsMoultonStepInterpolator.java	interpolateState	j	int	0	NIL-FOR	$ < interpolatedState.length
44681	234	12	AdamsMoultonStepInterpolator.java	interpolateState	THIS	AdamsMoultonStepInterpolator	0	NIL-FOR	l < $.previousT.$.length
44681	234	12	AdamsMoultonStepInterpolator.java	interpolateState	l	int	0	NIL-FOR	$ < previousT.length
44682	251	8	AdamsMoultonStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	$ <= order
44682	251	8	AdamsMoultonStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	i <= $
44683	254	12	AdamsMoultonStepInterpolator.java	computeRollback	j	int	0	NIL-FOR	$ <= i
44683	254	12	AdamsMoultonStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	j <= $
44684	261	8	AdamsMoultonStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	$ <= order
44684	261	8	AdamsMoultonStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	i <= $
44685	267	8	AdamsMoultonStepInterpolator.java	computeRollback	i	int	0	NIL-FOR	$ <= order
44685	267	8	AdamsMoultonStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	i <= $
44686	269	12	AdamsMoultonStepInterpolator.java	computeRollback	j	int	0	NIL-FOR	$ <= order
44686	269	12	AdamsMoultonStepInterpolator.java	computeRollback	order	int	0	NIL-FOR	j <= $
1117	132	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize < $.minStep
1117	132	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize > $.maxStep
1117	132	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ < minStep
1117	132	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ > maxStep
1118	154	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecAbsoluteTolerance.$.length != y0.$.length
1118	154	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecAbsoluteTolerance != null
1118	154	6	AdaptiveStepsizeIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	vecAbsoluteTolerance.length != $.length
1119	163	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecRelativeTolerance != null
1119	163	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecRelativeTolerance.$.length != y0.$.length
1119	163	6	AdaptiveStepsizeIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	vecRelativeTolerance.length != $.length
1120	194	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	RET	$.initialStep > 0
44797	204	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
44797	204	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
44797	204	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
1121	213	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
44798	218	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
44798	218	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
44798	218	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
44799	225	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
44799	225	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
44799	225	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
1122	239	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < $.getMinStep()
1122	239	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ < getMinStep()
1123	242	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h > $.getMaxStep()
1123	242	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ > getMaxStep()
1124	245	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
1125	266	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	Math.abs(h) < $.minStep
1125	266	6	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	IntegratorException	Math.abs($) < minStep
1126	267	10	AdaptiveStepsizeIntegrator.java	filterStep	acceptSmall	boolean	1	DEF	$
1127	279	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	1	DEF	filteredH > $.maxStep
1127	279	6	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	1	DEF	$ > maxStep
1128	281	13	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	filteredH < -$.maxStep
1128	281	13	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	0	DEF	$ < -maxStep
979	126	8	Beta.java	regularizedBeta	x	double	1	DEF	$ > 1
979	126	8	Beta.java	regularizedBeta	x	double	1	DEF	Double.isNaN($)
979	126	8	Beta.java	regularizedBeta	x	double	1	DEF	$ < 0
979	126	8	Beta.java	regularizedBeta	a	double	1	DEF	$ <= 0.0
979	126	8	Beta.java	regularizedBeta	a	double	1	DEF	Double.isNaN($)
979	126	8	Beta.java	regularizedBeta	b	double	1	DEF	Double.isNaN($)
979	126	8	Beta.java	regularizedBeta	b	double	1	DEF	$ <= 0.0
980	130	15	Beta.java	regularizedBeta	x	double	1	DEF	$ > (a + 1.0) / (a + b + 2.0)
980	130	15	Beta.java	regularizedBeta	a	double	1	DEF	x > ($ + 1.0) / ($ + b + 2.0)
980	130	15	Beta.java	regularizedBeta	b	double	1	DEF	x > (a + 1.0) / (a + $ + 2.0)
981	197	8	Beta.java	logBeta	a	double	1	DEF	$ <= 0.0
981	197	8	Beta.java	logBeta	a	double	1	DEF	Double.isNaN($)
981	197	8	Beta.java	logBeta	b	double	1	DEF	Double.isNaN($)
981	197	8	Beta.java	logBeta	b	double	1	DEF	$ <= 0.0
358	89	8	BetaDistributionImpl.java	recomputeZ	THIS	BetaDistributionImpl	0	DEF	Double.isNaN($.z)
359	97	8	BetaDistributionImpl.java	density	x	Double	1	RET	$ < 0
359	97	8	BetaDistributionImpl.java	density	x	Double	1	RET	$ > 1
360	99	15	BetaDistributionImpl.java	density	x	Double	1	MathException:RET	$ == 0
361	100	12	BetaDistributionImpl.java	density	THIS	BetaDistributionImpl	0	MathException	$.alpha < 1
362	104	15	BetaDistributionImpl.java	density	x	Double	1	MathException:RET	$ == 1
363	105	12	BetaDistributionImpl.java	density	THIS	BetaDistributionImpl	0	MathException	$.beta < 1
364	118	8	BetaDistributionImpl.java	inverseCumulativeProbability	p	double	1	RET	$ == 0
365	120	15	BetaDistributionImpl.java	inverseCumulativeProbability	p	double	1	RET	$ == 1
366	144	8	BetaDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ <= 0
367	146	15	BetaDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ >= 1
527	77	8	BiDiagonalTransformer.java	BiDiagonalTransformer	m	int	1	DEF	$ >= n
527	77	8	BiDiagonalTransformer.java	BiDiagonalTransformer	n	int	1	DEF	m >= $
528	92	8	BiDiagonalTransformer.java	getU	THIS	BiDiagonalTransformer	0	DEF	$.cachedU == null
44234	102	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= p
44234	102	12	BiDiagonalTransformer.java	getU	p	int	0	NIL-FOR	k >= $
44235	107	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= diagOffset
44235	107	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	NIL-FOR	k >= $
529	110	16	BiDiagonalTransformer.java	getU	hK	double[]	0	DEF	$[k - diagOffset] != 0.0
529	110	16	BiDiagonalTransformer.java	getU	k	int	0	DEF	hK[$ - diagOffset] != 0.0
529	110	16	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	hK[k - $] != 0.0
44236	111	20	BiDiagonalTransformer.java	getU	j	int	0	NIL-FOR	$ < m
44236	111	20	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	j < $
44237	113	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
44237	113	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
44238	118	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
44238	118	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
530	124	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	$ > 0
531	141	8	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	$.cachedB == null
44239	146	12	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	NIL-FOR	i < $.main.$.length
44239	146	12	BiDiagonalTransformer.java	getB	i	int	0	NIL-FOR	$ < main.length
532	148	16	BiDiagonalTransformer.java	getB	m	int	1	DEF	$ < n
532	148	16	BiDiagonalTransformer.java	getB	n	int	1	DEF	m < $
533	149	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ > 0
534	153	20	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	i < $.main.$.length - 1
534	153	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ < main.length - 1
535	173	8	BiDiagonalTransformer.java	getV	THIS	BiDiagonalTransformer	0	DEF	$.cachedV == null
44240	183	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= p
44240	183	12	BiDiagonalTransformer.java	getV	p	int	0	NIL-FOR	k >= $
44241	188	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= diagOffset
44241	188	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	NIL-FOR	k >= $
536	191	16	BiDiagonalTransformer.java	getV	hK	double[]	0	DEF	$[k] != 0.0
536	191	16	BiDiagonalTransformer.java	getV	k	int	0	DEF	hK[$] != 0.0
44242	192	20	BiDiagonalTransformer.java	getV	j	int	0	NIL-FOR	$ < n
44242	192	20	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	j < $
44243	194	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
44243	194	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
44244	199	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
44244	199	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
537	205	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	DEF	$ > 0
44245	263	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	NIL-FOR	$ < n
44245	263	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	k < $
44246	267	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
44246	267	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
538	274	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	a	double	0	DEF	$ != 0.0
44247	276	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
44247	276	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
44248	278	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
44248	278	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
44249	283	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
44249	283	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
539	290	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	DEF	$ < n - 1
539	290	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	DEF	k < $ - 1
44250	293	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
44250	293	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
540	299	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	b	double	0	DEF	$ != 0.0
44251	301	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
44251	301	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
44252	304	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
44252	304	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
44253	308	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
44253	308	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
44254	327	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	NIL-FOR	$ < m
44254	327	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	k < $
44255	332	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
44255	332	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
541	338	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	a	double	0	DEF	$ != 0.0
44256	340	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
44256	340	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
44257	343	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
44257	343	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
44258	347	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
44258	347	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
542	353	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	DEF	$ < m - 1
542	353	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	DEF	k < $ - 1
44259	357	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
44259	357	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
543	363	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	b	double	0	DEF	$ != 0.0
44260	365	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
44260	365	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
44261	367	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
44261	367	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
44262	372	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
44262	372	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
416	100	8	BigMatrixImpl.java	BigMatrixImpl	rowDimension	int	0	IllegalArgumentException	$ <=0
416	100	8	BigMatrixImpl.java	BigMatrixImpl	columnDimension	int	0	IllegalArgumentException	$ <=0
417	141	8	BigMatrixImpl.java	BigMatrixImpl	copyArray	boolean	1	DEF	$
418	144	12	BigMatrixImpl.java	BigMatrixImpl	d	BigDecimal[][]	0	NullPointerException	$ == null
419	148	12	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	IllegalArgumentException	$ == 0
420	152	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	$ == 0
44057	155	12	BigMatrixImpl.java	BigMatrixImpl	r	int	0	NIL-FOR	$ < nRows
44057	155	12	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	r < $
421	156	16	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	IllegalArgumentException	d[r].length != nCols
421	156	16	BigMatrixImpl.java	BigMatrixImpl	r	int	0	IllegalArgumentException	d[$].length != nCols
421	156	16	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	d[r].length != $
421	156	16	BigMatrixImpl.java	BigMatrixImpl	d	BigDecimal[][]	0	IllegalArgumentException	$[r].length != nCols
422	178	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	IllegalArgumentException	$ == 0
423	183	8	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	$ == 0
44058	187	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
44058	187	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
424	188	12	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	IllegalArgumentException	d[row].length != nCols
424	188	12	BigMatrixImpl.java	BigMatrixImpl	row	int	0	IllegalArgumentException	d[$].length != nCols
424	188	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	d[row].length != $
424	188	12	BigMatrixImpl.java	BigMatrixImpl	d	double[][]	0	IllegalArgumentException	$[row].length != nCols
425	208	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	IllegalArgumentException	$ == 0
426	213	8	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	$ == 0
44059	217	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
44059	217	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
427	218	12	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	IllegalArgumentException	d[row].length != nCols
427	218	12	BigMatrixImpl.java	BigMatrixImpl	row	int	0	IllegalArgumentException	d[$].length != nCols
427	218	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	d[row].length != $
427	218	12	BigMatrixImpl.java	BigMatrixImpl	d	String[][]	0	IllegalArgumentException	$[row].length != nCols
44060	239	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
44060	239	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
428	266	12	BigMatrixImpl.java	add	rowCount	int	0	IllegalArgumentException	$ != m.getRowDimension()
428	266	12	BigMatrixImpl.java	add	columnCount	int	0	IllegalArgumentException	$ != m.getColumnDimension()
428	266	12	BigMatrixImpl.java	add	m	BigMatrix	0	IllegalArgumentException	columnCount != $.getColumnDimension()
428	266	12	BigMatrixImpl.java	add	m	BigMatrix	0	IllegalArgumentException	rowCount != $.getRowDimension()
44061	270	12	BigMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
44061	270	12	BigMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
44062	273	16	BigMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
44062	273	16	BigMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
429	291	8	BigMatrixImpl.java	add	rowCount	int	0	IllegalArgumentException	$ != m.getRowDimension()
429	291	8	BigMatrixImpl.java	add	columnCount	int	0	IllegalArgumentException	$ != m.getColumnDimension()
429	291	8	BigMatrixImpl.java	add	m	BigMatrixImpl	0	IllegalArgumentException	rowCount != $.getRowDimension()
429	291	8	BigMatrixImpl.java	add	m	BigMatrixImpl	0	IllegalArgumentException	columnCount != $.getColumnDimension()
44063	295	8	BigMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
44063	295	8	BigMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
44064	299	12	BigMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
44064	299	12	BigMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
430	319	12	BigMatrixImpl.java	subtract	rowCount	int	0	IllegalArgumentException	$ != m.getRowDimension()
430	319	12	BigMatrixImpl.java	subtract	columnCount	int	0	IllegalArgumentException	$ != m.getColumnDimension()
430	319	12	BigMatrixImpl.java	subtract	m	BigMatrix	0	IllegalArgumentException	columnCount != $.getColumnDimension()
430	319	12	BigMatrixImpl.java	subtract	m	BigMatrix	0	IllegalArgumentException	rowCount != $.getRowDimension()
44065	323	12	BigMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
44065	323	12	BigMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
44066	326	16	BigMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
44066	326	16	BigMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
431	344	8	BigMatrixImpl.java	subtract	rowCount	int	0	IllegalArgumentException	$ != m.getRowDimension()
431	344	8	BigMatrixImpl.java	subtract	columnCount	int	0	IllegalArgumentException	$ != m.getColumnDimension()
431	344	8	BigMatrixImpl.java	subtract	m	BigMatrixImpl	0	IllegalArgumentException	columnCount != $.getColumnDimension()
431	344	8	BigMatrixImpl.java	subtract	m	BigMatrixImpl	0	IllegalArgumentException	rowCount != $.getRowDimension()
44067	348	8	BigMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
44067	348	8	BigMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
44068	352	12	BigMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
44068	352	12	BigMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
44069	369	8	BigMatrixImpl.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
44069	369	8	BigMatrixImpl.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
44070	372	12	BigMatrixImpl.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
44070	372	12	BigMatrixImpl.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
44071	388	8	BigMatrixImpl.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
44071	388	8	BigMatrixImpl.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
44072	391	12	BigMatrixImpl.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
44072	391	12	BigMatrixImpl.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
432	409	12	BigMatrixImpl.java	multiply	THIS	BigMatrixImpl	0	IllegalArgumentException	$.getColumnDimension() != m.getRowDimension()
432	409	12	BigMatrixImpl.java	multiply	m	BigMatrix	0	IllegalArgumentException	this.getColumnDimension() != $.getRowDimension()
44073	416	12	BigMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
44073	416	12	BigMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
44074	419	16	BigMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
44074	419	16	BigMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
44075	421	20	BigMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
44075	421	20	BigMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
433	439	8	BigMatrixImpl.java	multiply	THIS	BigMatrixImpl	0	IllegalArgumentException	$.getColumnDimension() != m.getRowDimension()
433	439	8	BigMatrixImpl.java	multiply	m	BigMatrixImpl	0	IllegalArgumentException	this.getColumnDimension() != $.getRowDimension()
44076	446	8	BigMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
44076	446	8	BigMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
44077	449	12	BigMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
44077	449	12	BigMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
44078	451	16	BigMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
44078	451	16	BigMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
44079	494	8	BigMatrixImpl.java	getDataAsDoubleArray	i	int	0	NIL-FOR	$ < nRows
44079	494	8	BigMatrixImpl.java	getDataAsDoubleArray	nRows	int	0	NIL-FOR	i < $
44080	495	12	BigMatrixImpl.java	getDataAsDoubleArray	j	int	0	NIL-FOR	$ < nCols
44080	495	12	BigMatrixImpl.java	getDataAsDoubleArray	nCols	int	0	NIL-FOR	j < $
44081	559	8	BigMatrixImpl.java	getNorm	THIS	BigMatrixImpl	0	NIL-FOR	col < $.getColumnDimension()
44081	559	8	BigMatrixImpl.java	getNorm	col	int	0	NIL-FOR	$ < this.getColumnDimension()
44082	561	12	BigMatrixImpl.java	getNorm	THIS	BigMatrixImpl	0	NIL-FOR	row < $.getRowDimension()
44082	561	12	BigMatrixImpl.java	getNorm	row	int	0	NIL-FOR	$ < this.getRowDimension()
434	587	8	BigMatrixImpl.java	getSubMatrix	startRow	int	0	MatrixIndexException	$ > endRow
434	587	8	BigMatrixImpl.java	getSubMatrix	endRow	int	0	MatrixIndexException	startRow > $
435	594	8	BigMatrixImpl.java	getSubMatrix	startColumn	int	0	MatrixIndexException	$ > endColumn
435	594	8	BigMatrixImpl.java	getSubMatrix	endColumn	int	0	MatrixIndexException	startColumn > $
44083	601	8	BigMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
44083	601	8	BigMatrixImpl.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
436	625	8	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
436	625	8	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
436	625	8	BigMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
437	626	12	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	selectedRows.$.length == 0
437	626	12	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	MatrixIndexException	$.length == 0
44084	635	12	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	NIL-FOR	i < selectedRows.$.length
44084	635	12	BigMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
44084	635	12	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
44085	638	16	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	NIL-FOR	j < selectedColumns.$.length
44085	638	16	BigMatrixImpl.java	getSubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
44085	638	16	BigMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
438	688	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	IllegalArgumentException	$ == 0
439	691	8	BigMatrixImpl.java	setSubMatrix	nCols	int	0	IllegalArgumentException	$ == 0
44086	695	8	BigMatrixImpl.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
44086	695	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
440	696	12	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	0	IllegalArgumentException	subMatrix[r].length != nCols
440	696	12	BigMatrixImpl.java	setSubMatrix	r	int	0	IllegalArgumentException	subMatrix[$].length != nCols
440	696	12	BigMatrixImpl.java	setSubMatrix	nCols	int	0	IllegalArgumentException	subMatrix[r].length != $
440	696	12	BigMatrixImpl.java	setSubMatrix	subMatrix	BigDecimal[][]	0	IllegalArgumentException	$[r].length != nCols
441	701	8	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	1	DEF	$.data == null
442	702	12	BigMatrixImpl.java	setSubMatrix	row	int	0	DEF	$ > 0
443	706	12	BigMatrixImpl.java	setSubMatrix	column	int	0	DEF	$ > 0
44087	718	8	BigMatrixImpl.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
44087	718	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
44088	754	8	BigMatrixImpl.java	getColumnMatrix	row	int	0	NIL-FOR	$ < nRows
44088	754	8	BigMatrixImpl.java	getColumnMatrix	nRows	int	0	NIL-FOR	row < $
44089	793	8	BigMatrixImpl.java	getRowAsDoubleArray	i	int	0	NIL-FOR	$<ncols
44089	793	8	BigMatrixImpl.java	getRowAsDoubleArray	ncols	int	0	NIL-FOR	i<$
44090	813	8	BigMatrixImpl.java	getColumn	i	int	0	NIL-FOR	$ < nRows
44090	813	8	BigMatrixImpl.java	getColumn	nRows	int	0	NIL-FOR	i < $
44091	834	8	BigMatrixImpl.java	getColumnAsDoubleArray	i	int	0	NIL-FOR	$<nrows
44091	834	8	BigMatrixImpl.java	getColumnAsDoubleArray	nrows	int	0	NIL-FOR	i<$
44092	897	8	BigMatrixImpl.java	transpose	row	int	0	NIL-FOR	$ < nRows
44092	897	8	BigMatrixImpl.java	transpose	nRows	int	0	NIL-FOR	row < $
44093	899	12	BigMatrixImpl.java	transpose	col	int	0	NIL-FOR	$ < nCols
44093	899	12	BigMatrixImpl.java	transpose	nCols	int	0	NIL-FOR	col < $
444	923	8	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	0	NonSquareMatrixException	$.isSquare()
445	926	8	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	1	RET	$.isSingular()
44094	930	12	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
44094	930	12	BigMatrixImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < this.getRowDimension()
446	950	8	BigMatrixImpl.java	isSingular	THIS	BigMatrixImpl	1	RET	$.lu == null
447	989	8	BigMatrixImpl.java	getTrace	THIS	BigMatrixImpl	0	IllegalArgumentException	$.isSquare()
44095	993	8	BigMatrixImpl.java	getTrace	THIS	BigMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
44095	993	8	BigMatrixImpl.java	getTrace	i	int	0	NIL-FOR	$ < this.getRowDimension()
448	1007	8	BigMatrixImpl.java	operate	THIS	BigMatrixImpl	0	IllegalArgumentException	v.$.length != $.getColumnDimension()
448	1007	8	BigMatrixImpl.java	operate	v	BigDecimal[]	0	IllegalArgumentException	$.length != this.getColumnDimension()
44096	1013	8	BigMatrixImpl.java	operate	row	int	0	NIL-FOR	$ < nRows
44096	1013	8	BigMatrixImpl.java	operate	nRows	int	0	NIL-FOR	row < $
44097	1015	12	BigMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < nCols
44097	1015	12	BigMatrixImpl.java	operate	nCols	int	0	NIL-FOR	i < $
44098	1032	8	BigMatrixImpl.java	operate	THIS	BigMatrixImpl	0	NIL-FOR	i < bd.$.length
44098	1032	8	BigMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < bd.length
44098	1032	8	BigMatrixImpl.java	operate	bd	BigDecimal[]	0	NIL-FOR	i < $.length
449	1047	8	BigMatrixImpl.java	preMultiply	THIS	BigMatrixImpl	0	IllegalArgumentException	v.$.length != nRows
449	1047	8	BigMatrixImpl.java	preMultiply	nRows	int	0	IllegalArgumentException	v.length != $
449	1047	8	BigMatrixImpl.java	preMultiply	v	BigDecimal[]	0	IllegalArgumentException	$.length != nRows
44099	1052	8	BigMatrixImpl.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
44099	1052	8	BigMatrixImpl.java	preMultiply	nCols	int	0	NIL-FOR	col < $
44100	1054	12	BigMatrixImpl.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
44100	1054	12	BigMatrixImpl.java	preMultiply	nRows	int	0	NIL-FOR	i < $
450	1075	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	IllegalArgumentException	b.$.length != nRows
450	1075	8	BigMatrixImpl.java	solve	nRows	int	0	IllegalArgumentException	b.length != $
450	1075	8	BigMatrixImpl.java	solve	b	BigDecimal[]	0	IllegalArgumentException	$.length != nRows
44101	1081	8	BigMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRows
44101	1081	8	BigMatrixImpl.java	solve	nRows	int	0	NIL-FOR	row < $
44102	1100	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	NIL-FOR	i < bd.$.length
44102	1100	8	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < bd.length
44102	1100	8	BigMatrixImpl.java	solve	bd	BigDecimal[]	0	NIL-FOR	i < $.length
451	1118	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	IllegalArgumentException	b.getRowDimension() != $.getRowDimension()
451	1118	8	BigMatrixImpl.java	solve	b	BigMatrix	0	IllegalArgumentException	$.getRowDimension() != this.getRowDimension()
452	1121	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	NonSquareMatrixException	$.isSquare()
453	1124	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	SingularMatrixException	$.isSingular()
44103	1134	8	BigMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRowB
44103	1134	8	BigMatrixImpl.java	solve	nRowB	int	0	NIL-FOR	row < $
44104	1136	12	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nColB
44104	1136	12	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	col < $
44105	1142	8	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nCol
44105	1142	8	BigMatrixImpl.java	solve	nCol	int	0	NIL-FOR	col < $
44106	1143	12	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < nCol
44106	1143	12	BigMatrixImpl.java	solve	nCol	int	0	NIL-FOR	i < $
44107	1146	16	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
44107	1146	16	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
44108	1153	8	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ >= 0
44109	1156	12	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
44109	1156	12	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
44110	1159	12	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < col
44110	1159	12	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	i < $
44111	1162	16	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
44111	1162	16	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
454	1194	8	BigMatrixImpl.java	luDecompose	nRows	int	0	NonSquareMatrixException	$ != nCols
454	1194	8	BigMatrixImpl.java	luDecompose	nCols	int	0	NonSquareMatrixException	nRows != $
44112	1201	8	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
44112	1201	8	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
44113	1207	8	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	$ < nCols
44113	1207	8	BigMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	col < $
44114	1212	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < col
44114	1212	12	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	row < $
44115	1215	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < row
44115	1215	16	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	i < $
44116	1224	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
44116	1224	12	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
44117	1227	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < col
44117	1227	16	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	i < $
455	1233	16	BigMatrixImpl.java	luDecompose	sum	BigDecimal	0	DEF	$.abs().compareTo(largest) == 1
455	1233	16	BigMatrixImpl.java	luDecompose	largest	BigDecimal	0	DEF	sum.abs().compareTo($) == 1
456	1240	12	BigMatrixImpl.java	luDecompose	THIS	BigMatrixImpl	0	SingularMatrixException	$.lu[max][col].abs().compareTo(TOO_SMALL) <= 0
456	1240	12	BigMatrixImpl.java	luDecompose	max	int	0	SingularMatrixException	lu[$][col].abs().compareTo(TOO_SMALL) <= 0
456	1240	12	BigMatrixImpl.java	luDecompose	col	int	0	SingularMatrixException	lu[max][$].abs().compareTo(TOO_SMALL) <= 0
457	1246	12	BigMatrixImpl.java	luDecompose	max	int	0	DEF	$ != col
457	1246	12	BigMatrixImpl.java	luDecompose	col	int	0	DEF	max != $
44118	1248	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < nCols
44118	1248	16	BigMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	i < $
44119	1261	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
44119	1261	12	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
458	1277	8	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	DEF	$.data != null
44120	1278	12	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	NIL-FOR	i < $.data.$.length
44120	1278	12	BigMatrixImpl.java	toString	i	int	0	NIL-FOR	$ < data.length
459	1279	16	BigMatrixImpl.java	toString	i	int	0	DEF	$ > 0
44121	1283	16	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	NIL-FOR	j < $.data[0].length
44121	1283	16	BigMatrixImpl.java	toString	j	int	0	NIL-FOR	$ < data[0].length
460	1284	20	BigMatrixImpl.java	toString	j	int	0	DEF	$ > 0
461	1306	8	BigMatrixImpl.java	equals	THIS	BigMatrixImpl	0	RET	object == $
461	1306	8	BigMatrixImpl.java	equals	object	Object	0	RET	$ == this
462	1309	8	BigMatrixImpl.java	equals	object	Object	0	RET	$ instanceof BigMatrixImpl == false
463	1315	8	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	$.getRowDimension() != nRows
463	1315	8	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	$.getColumnDimension() != nCols
463	1315	8	BigMatrixImpl.java	equals	nRows	int	0	RET	m.getRowDimension() != $
463	1315	8	BigMatrixImpl.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
44122	1318	8	BigMatrixImpl.java	equals	row	int	0	NIL-FOR	$ < nRows
44122	1318	8	BigMatrixImpl.java	equals	nRows	int	0	NIL-FOR	row < $
44123	1320	12	BigMatrixImpl.java	equals	col	int	0	NIL-FOR	$ < nCols
44123	1320	12	BigMatrixImpl.java	equals	nCols	int	0	NIL-FOR	col < $
464	1321	16	BigMatrixImpl.java	equals	col	int	0	RET	dataRow[$].equals(m.getEntry(row, $))
464	1321	16	BigMatrixImpl.java	equals	dataRow	BigDecimal[]	0	RET	$[col].equals(m.getEntry(row, col))
464	1321	16	BigMatrixImpl.java	equals	row	int	0	RET	dataRow[col].equals(m.getEntry($, col))
464	1321	16	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	dataRow[col].equals($.getEntry(row, col))
44124	1340	8	BigMatrixImpl.java	hashCode	row	int	0	NIL-FOR	$ < nRows
44124	1340	8	BigMatrixImpl.java	hashCode	nRows	int	0	NIL-FOR	row < $
44125	1342	12	BigMatrixImpl.java	hashCode	col	int	0	NIL-FOR	$ < nCols
44125	1342	12	BigMatrixImpl.java	hashCode	nCols	int	0	NIL-FOR	col < $
465	1380	8	BigMatrixImpl.java	getLUMatrix	THIS	BigMatrixImpl	0	DEF	$.lu == null
44126	1415	8	BigMatrixImpl.java	copyOut	i	int	0	NIL-FOR	$ < nRows
44126	1415	8	BigMatrixImpl.java	copyOut	nRows	int	0	NIL-FOR	i < $
44127	1444	8	BigMatrixImpl.java	copyIn	i	int	0	NIL-FOR	$ < nRows
44127	1444	8	BigMatrixImpl.java	copyIn	nRows	int	0	NIL-FOR	i < $
44128	1447	12	BigMatrixImpl.java	copyIn	j	int	0	NIL-FOR	$ < nCols
44128	1447	12	BigMatrixImpl.java	copyIn	nCols	int	0	NIL-FOR	j < $
44129	1464	8	BigMatrixImpl.java	copyIn	i	int	0	NIL-FOR	$ < nRows
44129	1464	8	BigMatrixImpl.java	copyIn	nRows	int	0	NIL-FOR	i < $
44130	1467	12	BigMatrixImpl.java	copyIn	j	int	0	NIL-FOR	$ < nCols
44130	1467	12	BigMatrixImpl.java	copyIn	nCols	int	0	NIL-FOR	j < $
466	1480	8	BigMatrixImpl.java	checkRowIndex	THIS	BigMatrixImpl	0	MatrixIndexException	row >= $.getRowDimension()
466	1480	8	BigMatrixImpl.java	checkRowIndex	row	int	0	MatrixIndexException	$ >= getRowDimension()
466	1480	8	BigMatrixImpl.java	checkRowIndex	row	int	0	MatrixIndexException	$ < 0
467	1493	8	BigMatrixImpl.java	checkColumnIndex	THIS	BigMatrixImpl	0	MatrixIndexException	column >= $.getColumnDimension()
467	1493	8	BigMatrixImpl.java	checkColumnIndex	column	int	0	MatrixIndexException	$ >= getColumnDimension()
467	1493	8	BigMatrixImpl.java	checkColumnIndex	column	int	0	MatrixIndexException	$ < 0
318	78	8	BinomialDistributionImpl.java	setNumberOfTrials	trials	int	0	IllegalArgumentException	$ < 0
319	91	8	BinomialDistributionImpl.java	setProbabilityOfSuccess	p	double	0	IllegalArgumentException	$ < 0.0
319	91	8	BinomialDistributionImpl.java	setProbabilityOfSuccess	p	double	0	IllegalArgumentException	$ > 1.0
320	130	8	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
321	132	15	BinomialDistributionImpl.java	cumulativeProbability	THIS	BinomialDistributionImpl	1	DEF	x >= $.getNumberOfTrials()
321	132	15	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= getNumberOfTrials()
322	152	8	BinomialDistributionImpl.java	probability	THIS	BinomialDistributionImpl	1	DEF	x > $.getNumberOfTrials()
322	152	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ > getNumberOfTrials()
322	152	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ < 0
323	179	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
324	182	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
44855	88	8	BisectionSolver.java	solve	THIS	BisectionSolver	0	NIL-WHILE	i < $.maximalIterationCount
44855	88	8	BisectionSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1262	93	12	BisectionSolver.java	solve	fm	double	1	DEF	$ * fmin > 0.0
1262	93	12	BisectionSolver.java	solve	fmin	double	1	DEF	fm * $ > 0.0
1263	101	12	BisectionSolver.java	solve	THIS	BisectionSolver	0	RET	Math.abs(max - min) <= $.absoluteAccuracy
1263	101	12	BisectionSolver.java	solve	min	double	0	RET	Math.abs(max - $) <= absoluteAccuracy
1263	101	12	BisectionSolver.java	solve	max	double	0	RET	Math.abs($ - min) <= absoluteAccuracy
1285	95	8	BrentSolver.java	solve	min	double	0	IllegalArgumentException	((initial - $) * (max -initial)) < 0
1285	95	8	BrentSolver.java	solve	max	double	0	IllegalArgumentException	((initial - min) * ($ -initial)) < 0
1285	95	8	BrentSolver.java	solve	initial	double	0	IllegalArgumentException	(($ - min) * (max -$)) < 0
1286	103	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yInitial) <= $.functionValueAccuracy
1286	103	8	BrentSolver.java	solve	yInitial	double	0	RET	Math.abs($) <= functionValueAccuracy
1287	110	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yMin) <= $.functionValueAccuracy
1287	110	8	BrentSolver.java	solve	yMin	double	0	RET	Math.abs($) <= functionValueAccuracy
1288	116	8	BrentSolver.java	solve	yInitial	double	0	RET	$ * yMin < 0
1288	116	8	BrentSolver.java	solve	yMin	double	0	RET	yInitial * $ < 0
1289	122	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yMax) <= $.functionValueAccuracy
1289	122	8	BrentSolver.java	solve	yMax	double	0	RET	Math.abs($) <= functionValueAccuracy
1290	128	8	BrentSolver.java	solve	yInitial	double	0	RET	$ * yMax < 0
1290	128	8	BrentSolver.java	solve	yMax	double	0	RET	yInitial * $ < 0
1291	169	8	BrentSolver.java	solve	sign	double	1	IllegalArgumentException	$ > 0
1292	171	12	BrentSolver.java	solve	THIS	BrentSolver	1	DEF	Math.abs(yMin) <= $.functionValueAccuracy
1292	171	12	BrentSolver.java	solve	yMin	double	1	DEF	Math.abs($) <= functionValueAccuracy
1293	174	19	BrentSolver.java	solve	THIS	BrentSolver	1	DEF	Math.abs(yMax) <= $.functionValueAccuracy
1293	174	19	BrentSolver.java	solve	yMax	double	1	DEF	Math.abs($) <= functionValueAccuracy
1294	184	15	BrentSolver.java	solve	sign	double	1	DEF	$ < 0
1295	189	12	BrentSolver.java	solve	yMin	double	1	DEF	$ == 0.0
44870	226	8	BrentSolver.java	solve	THIS	BrentSolver	0	NIL-WHILE	i < $.maximalIterationCount
44870	226	8	BrentSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1296	227	12	BrentSolver.java	solve	y1	double	0	DEF	Math.abs(y2) < Math.abs($)
1296	227	12	BrentSolver.java	solve	y2	double	0	DEF	Math.abs($) < Math.abs(y1)
1297	236	12	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(y1) <= $.functionValueAccuracy
1297	236	12	BrentSolver.java	solve	y1	double	0	RET	Math.abs($) <= functionValueAccuracy
1298	246	12	BrentSolver.java	solve	dx	double	0	RET	Math.abs($) <= tolerance
1298	246	12	BrentSolver.java	solve	tolerance	double	0	RET	Math.abs(dx) <= $
1299	250	12	BrentSolver.java	solve	tolerance	double	1	DEF	Math.abs(oldDelta) < $
1299	250	12	BrentSolver.java	solve	oldDelta	double	1	DEF	Math.abs($) < tolerance
1299	250	12	BrentSolver.java	solve	y0	double	1	DEF	Math.abs($) <= Math.abs(y1)
1299	250	12	BrentSolver.java	solve	y1	double	1	DEF	Math.abs(y0) <= Math.abs($)
1300	262	16	BrentSolver.java	solve	x0	double	1	DEF	$ == x2
1300	262	16	BrentSolver.java	solve	x2	double	1	DEF	x0 == $
1301	273	16	BrentSolver.java	solve	p	double	1	DEF	$ > 0.0
1302	278	16	BrentSolver.java	solve	p	double	1	DEF	2.0 * $ >= 1.5 * dx * p1 - Math.abs(tolerance * p1)
1302	278	16	BrentSolver.java	solve	p	double	1	DEF	$ >= Math.abs(0.5 * oldDelta * p1)
1302	278	16	BrentSolver.java	solve	p1	double	1	DEF	2.0 * p >= 1.5 * dx * $ - Math.abs(tolerance * $)
1302	278	16	BrentSolver.java	solve	p1	double	1	DEF	p >= Math.abs(0.5 * oldDelta * $)
1302	278	16	BrentSolver.java	solve	dx	double	1	DEF	2.0 * p >= 1.5 * $ * p1 - Math.abs(tolerance * p1)
1302	278	16	BrentSolver.java	solve	tolerance	double	1	DEF	2.0 * p >= 1.5 * dx * p1 - Math.abs($ * p1)
1302	278	16	BrentSolver.java	solve	oldDelta	double	1	DEF	p >= Math.abs(0.5 * $ * p1)
1303	294	12	BrentSolver.java	solve	tolerance	double	1	DEF	Math.abs(delta) > $
1303	294	12	BrentSolver.java	solve	delta	double	1	DEF	Math.abs($) > tolerance
1304	296	19	BrentSolver.java	solve	dx	double	1	DEF	$ > 0.0
1305	298	19	BrentSolver.java	solve	dx	double	0	DEF	$ <= 0.0
1306	302	12	BrentSolver.java	solve	y1	double	0	DEF	($ > 0) == (y2 > 0)
1306	302	12	BrentSolver.java	solve	y2	double	0	DEF	(y1 > 0) == ($ > 0)
349	99	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ < 0.0
349	99	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ > 1.0
350	102	15	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
351	104	16	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
352	126	8	CauchyDistributionImpl.java	setScale	s	double	0	IllegalArgumentException	$ <= 0.0
353	145	8	CauchyDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < .5
354	166	8	CauchyDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
355	186	8	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
356	188	15	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > .5
809	65	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	IllegalArgumentException	expected.$.length < 2
809	65	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	IllegalArgumentException	expected.$.length != observed.$.length
809	65	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	IllegalArgumentException	$.length < 2
809	65	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	IllegalArgumentException	$.length != observed.length
809	65	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	IllegalArgumentException	expected.length != $.length
810	69	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isPositive(expected)
810	69	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isNonNegative(observed)
810	69	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	IllegalArgumentException	isPositive($)
810	69	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	IllegalArgumentException	isNonNegative($)
44510	75	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
44510	75	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
44510	75	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
811	81	8	ChiSquareTestImpl.java	chiSquare	sumExpected	double	0	DEF	Math.abs($ - sumObserved) > 10E-6
811	81	8	ChiSquareTestImpl.java	chiSquare	sumObserved	double	0	DEF	Math.abs(sumExpected - $) > 10E-6
44511	87	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
44511	87	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
44511	87	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
812	88	12	ChiSquareTestImpl.java	chiSquare	rescale	boolean	1	DEF	$
813	134	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	IllegalArgumentException	$ <= 0
813	134	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	IllegalArgumentException	$ > 0.5
44512	156	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
44512	156	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
44513	157	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
44513	157	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
44514	167	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
44514	167	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
44515	168	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
44515	168	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
814	201	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	IllegalArgumentException	$ <= 0
814	201	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	IllegalArgumentException	$ > 0.5
815	218	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	IllegalArgumentException	observed1.$.length != observed2.$.length
815	218	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	IllegalArgumentException	observed1.$.length < 2
815	218	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	IllegalArgumentException	$.length != observed2.length
815	218	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	IllegalArgumentException	$.length < 2
815	218	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	0	IllegalArgumentException	observed1.length != $.length
816	223	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isNonNegative(observed2)
816	223	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isNonNegative(observed1)
816	223	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	IllegalArgumentException	isNonNegative($)
816	223	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	0	IllegalArgumentException	isNonNegative($)
44516	232	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
44516	232	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
44516	232	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
817	237	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum1	long	0	IllegalArgumentException	$ * countSum2 == 0
817	237	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum2	long	0	IllegalArgumentException	countSum1 * $ == 0
818	243	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	0	DEF	$
44517	251	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
44517	251	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
44517	251	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
819	252	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	IllegalArgumentException	observed2[$] == 0
819	252	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	IllegalArgumentException	observed1[$] == 0
819	252	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	1	IllegalArgumentException	$[i] == 0
819	252	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	1	IllegalArgumentException	$[i] == 0
820	258	16	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	1	DEF	$
821	296	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	IllegalArgumentException	$ > 0.5
821	296	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	IllegalArgumentException	$ <= 0
822	313	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	IllegalArgumentException	in.$.length < 2
822	313	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	IllegalArgumentException	$.length < 2
823	317	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	IllegalArgumentException	in[0].length < 2
823	317	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	IllegalArgumentException	$[0].length < 2
824	321	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isRectangular(in)
824	321	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	IllegalArgumentException	isRectangular($)
825	325	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isNonNegative(in)
825	325	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	IllegalArgumentException	isNonNegative($)
44518	342	8	ChiSquareTestImpl.java	isRectangular	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
44518	342	8	ChiSquareTestImpl.java	isRectangular	i	int	0	NIL-FOR	$ < in.length
44518	342	8	ChiSquareTestImpl.java	isRectangular	in	long[][]	0	NIL-FOR	i < $.length
826	343	12	ChiSquareTestImpl.java	isRectangular	THIS	ChiSquareTestImpl	0	RET	in[i].length != in[0].length
826	343	12	ChiSquareTestImpl.java	isRectangular	i	int	0	RET	in[$].length != in[0].length
826	343	12	ChiSquareTestImpl.java	isRectangular	in	long[][]	0	RET	$[i].length != $[0].length
44519	359	8	ChiSquareTestImpl.java	isPositive	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
44519	359	8	ChiSquareTestImpl.java	isPositive	i	int	0	NIL-FOR	$ < in.length
44519	359	8	ChiSquareTestImpl.java	isPositive	in	double[]	0	NIL-FOR	i < $.length
827	360	12	ChiSquareTestImpl.java	isPositive	i	int	0	RET	in[$] <= 0
827	360	12	ChiSquareTestImpl.java	isPositive	in	double[]	0	RET	$[i] <= 0
44520	376	8	ChiSquareTestImpl.java	isNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
44520	376	8	ChiSquareTestImpl.java	isNonNegative	i	int	0	NIL-FOR	$ < in.length
44520	376	8	ChiSquareTestImpl.java	isNonNegative	in	long[]	0	NIL-FOR	i < $.length
828	377	12	ChiSquareTestImpl.java	isNonNegative	i	int	0	RET	in[$] < 0
828	377	12	ChiSquareTestImpl.java	isNonNegative	in	long[]	0	RET	$[i] < 0
44521	393	8	ChiSquareTestImpl.java	isNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
44521	393	8	ChiSquareTestImpl.java	isNonNegative	i	int	0	NIL-FOR	$ < in.length
44521	393	8	ChiSquareTestImpl.java	isNonNegative	in	long[][]	0	NIL-FOR	i < $.length
44522	394	12	ChiSquareTestImpl.java	isNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	j < in[i].length
44522	394	12	ChiSquareTestImpl.java	isNonNegative	j	int	0	NIL-FOR	$ < in[i].length
44522	394	12	ChiSquareTestImpl.java	isNonNegative	i	int	0	NIL-FOR	j < in[$].length
44522	394	12	ChiSquareTestImpl.java	isNonNegative	in	long[][]	0	NIL-FOR	j < $[i].length
829	395	16	ChiSquareTestImpl.java	isNonNegative	j	int	0	RET	in[i][$] < 0
829	395	16	ChiSquareTestImpl.java	isNonNegative	i	int	0	RET	in[$][j] < 0
829	395	16	ChiSquareTestImpl.java	isNonNegative	in	long[][]	0	RET	$[i][j] < 0
345	110	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
346	113	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
347	147	8	ChiSquaredDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
348	172	8	ChiSquaredDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
44796	96	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedState	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
44796	96	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
1140	132	12	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	RET	$.states.isEmpty()
1141	139	12	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.initialized
1142	156	16	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.evaluateStep(interpolator)
1142	156	16	CombinedEventsManager.java	evaluateStep	interpolator	StepInterpolator	0	DEF	state.evaluateStep($)
1143	157	20	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	1	DEF	$.first == null
1144	160	24	CombinedEventsManager.java	evaluateStep	interpolator	StepInterpolator	1	DEF	$.isForward()
1145	161	28	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.getEventTime() < $.first.getEventTime()
1146	165	28	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.getEventTime() > $.first.getEventTime()
1147	220	12	CombinedEventsManager.java	stop	THIS	CombinedEventsManager	0	RET	$.state.stop()
1148	241	16	CombinedEventsManager.java	reset	THIS	CombinedEventsManager	0	DEF	$.state.reset(t, y)
1148	241	16	CombinedEventsManager.java	reset	t	double	0	DEF	state.reset($, y)
1148	241	16	CombinedEventsManager.java	reset	y	double[]	0	DEF	state.reset(t, $)
197	96	8	Complex.java	abs	THIS	Complex	0	RET	$.isNaN()
198	100	8	Complex.java	abs	THIS	Complex	0	RET	$.isInfinite()
199	104	8	Complex.java	abs	THIS	Complex	1	RET	Math.abs($.real) < Math.abs($.imaginary)
200	105	12	Complex.java	abs	THIS	Complex	0	RET	$.imaginary == 0.0
201	111	12	Complex.java	abs	THIS	Complex	0	RET	$.real == 0.0
202	156	8	Complex.java	conjugate	THIS	Complex	0	RET	$.isNaN()
203	198	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN()
203	198	8	Complex.java	divide	rhs	Complex	0	RET	$.isNaN()
204	204	8	Complex.java	divide	c	double	0	RET	$ == 0.0
204	204	8	Complex.java	divide	d	double	0	RET	$ == 0.0
205	208	8	Complex.java	divide	THIS	Complex	0	RET	$.isInfinite()
205	208	8	Complex.java	divide	rhs	Complex	0	RET	$.isInfinite()
206	212	8	Complex.java	divide	c	double	1	RET	Math.abs($) < Math.abs(d)
206	212	8	Complex.java	divide	d	double	1	RET	Math.abs(c) < Math.abs($)
207	213	12	Complex.java	divide	d	double	0	RET	$ == 0.0
208	221	12	Complex.java	divide	c	double	0	RET	$ == 0.0
209	252	8	Complex.java	equals	THIS	Complex	1	DEF	$ == other
209	252	8	Complex.java	equals	other	Object	1	DEF	this == $
210	254	15	Complex.java	equals	other	Object	1	DEF	$ == null
211	259	16	Complex.java	equals	rhs	Complex	1	DEF	$.isNaN()
212	281	8	Complex.java	hashCode	THIS	Complex	0	RET	$.isNaN()
213	359	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN()
213	359	8	Complex.java	multiply	rhs	Complex	0	RET	$.isNaN()
214	362	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
214	362	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(rhs.$.imaginary)
214	362	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
214	362	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(rhs.$.real)
214	362	8	Complex.java	multiply	rhs	Complex	0	RET	Double.isInfinite($.imaginary)
214	362	8	Complex.java	multiply	rhs	Complex	0	RET	Double.isInfinite($.real)
215	380	8	Complex.java	negate	THIS	Complex	0	RET	$.isNaN()
216	406	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN()
216	406	8	Complex.java	subtract	rhs	Complex	0	RET	$.isNaN()
217	429	8	Complex.java	acos	THIS	Complex	0	RET	$.isNaN()
218	452	8	Complex.java	asin	THIS	Complex	0	RET	$.isNaN()
219	475	8	Complex.java	atan	THIS	Complex	0	RET	$.isNaN()
220	510	8	Complex.java	cos	THIS	Complex	0	RET	$.isNaN()
221	544	8	Complex.java	cosh	THIS	Complex	0	RET	$.isNaN()
222	579	8	Complex.java	exp	THIS	Complex	0	RET	$.isNaN()
223	617	8	Complex.java	log	THIS	Complex	0	RET	$.isNaN()
224	643	8	Complex.java	pow	x	Complex	0	NullPointerException	$ == null
225	676	8	Complex.java	sin	THIS	Complex	0	RET	$.isNaN()
226	710	8	Complex.java	sinh	THIS	Complex	0	RET	$.isNaN()
227	752	8	Complex.java	sqrt	THIS	Complex	0	RET	$.isNaN()
228	756	8	Complex.java	sqrt	THIS	Complex	0	RET	$.real == 0.0
228	756	8	Complex.java	sqrt	THIS	Complex	0	RET	$.imaginary == 0.0
229	761	8	Complex.java	sqrt	THIS	Complex	1	RET	$.real >= 0.0
230	818	8	Complex.java	tan	THIS	Complex	0	RET	$.isNaN()
231	856	8	Complex.java	tanh	THIS	Complex	0	RET	$.isNaN()
232	907	8	Complex.java	nthRoot	n	int	0	DEF	$ <= 0
233	914	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isNaN()
234	919	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isInfinite()
43954	931	8	Complex.java	nthRoot	k	int	0	NIL-FOR	$ < n
43954	931	8	Complex.java	nthRoot	n	int	0	NIL-FOR	k < $
186	157	8	ComplexFormat.java	format	im	double	1	DEF	$ < 0.0
187	161	15	ComplexFormat.java	format	im	double	0	DEF	$ > 0.0
187	161	15	ComplexFormat.java	format	im	double	0	DEF	Double.isNaN($)
188	188	8	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Complex
189	190	15	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Number
190	253	8	ComplexFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
191	276	8	ComplexFormat.java	parse	re	Number	0	RET	$ == null
192	312	8	ComplexFormat.java	parse	im	Number	0	RET	$ == null
193	320	8	ComplexFormat.java	parse	THIS	ComplexFormat	0	RET	$.parseFixedstring(source, $.getImaginaryCharacter(), pos)
193	320	8	ComplexFormat.java	parse	source	String	0	RET	parseFixedstring($, getImaginaryCharacter(), pos)
193	320	8	ComplexFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, getImaginaryCharacter(), $)
194	347	8	ComplexFormat.java	setImaginaryCharacter	imaginaryCharacter	String	0	IllegalArgumentException	$ == null
194	347	8	ComplexFormat.java	setImaginaryCharacter	imaginaryCharacter	String	0	IllegalArgumentException	$.length() == 0
195	361	8	ComplexFormat.java	setImaginaryFormat	imaginaryFormat	NumberFormat	0	IllegalArgumentException	$ == null
196	375	8	ComplexFormat.java	setRealFormat	realFormat	NumberFormat	0	IllegalArgumentException	$ == null
185	61	8	ComplexUtils.java	polar2Complex	r	double	0	IllegalArgumentException	$ < 0
57	85	9	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
57	85	9	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
43944	87	13	CompositeFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
43944	87	13	CompositeFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
43944	87	13	CompositeFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
58	92	13	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
58	92	13	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
59	121	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	$ < source.length()
59	121	8	CompositeFormat.java	parseNumber	source	String	0	DEF	endIndex < $.length()
60	122	12	CompositeFormat.java	parseNumber	sb	StringBuffer	0	DEF	source.substring(startIndex, endIndex).compareTo($.toString()) == 0
60	122	12	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	source.substring($, endIndex).compareTo(sb.toString()) == 0
60	122	12	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	source.substring(startIndex, $).compareTo(sb.toString()) == 0
60	122	12	CompositeFormat.java	parseNumber	source	String	0	DEF	$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
61	148	8	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	$ == endIndex
61	148	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	startIndex == $
43945	153	12	CompositeFormat.java	parseNumber	THIS	CompositeFormat	0	NIL-FOR	i < special.$.length
43945	153	12	CompositeFormat.java	parseNumber	i	int	0	NIL-FOR	$ < special.length
43945	153	12	CompositeFormat.java	parseNumber	special	double[]	0	NIL-FOR	i < $.length
62	155	16	CompositeFormat.java	parseNumber	number	Number	0	DEF	$ != null
63	176	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	$ >= source.length()
63	176	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	source.substring($, endIndex).compareTo(expected) != 0
63	176	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	source.substring(startIndex, $).compareTo(expected) != 0
63	176	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	$ > source.length()
63	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	startIndex >= $.length()
63	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	$.substring(startIndex, endIndex).compareTo(expected) != 0
63	176	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	endIndex > $.length()
63	176	8	CompositeFormat.java	parseFixedstring	expected	String	0	RET	source.substring(startIndex, endIndex).compareTo($) != 0
64	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isNaN($)
64	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isInfinite($)
43939	140	8	ContinuedFraction.java	evaluate	n	int	0	NIL-WHILE	$ < maxIterations
43939	140	8	ContinuedFraction.java	evaluate	relativeError	double	0	NIL-WHILE	$ > epsilon
43939	140	8	ContinuedFraction.java	evaluate	epsilon	double	0	NIL-WHILE	relativeError > $
43939	140	8	ContinuedFraction.java	evaluate	maxIterations	int	0	NIL-WHILE	n < $
2	146	12	ContinuedFraction.java	evaluate	p2	double	0	ConvergenceException	Double.isInfinite($)
2	146	12	ContinuedFraction.java	evaluate	q2	double	0	ConvergenceException	Double.isInfinite($)
3	148	16	ContinuedFraction.java	evaluate	a	double	1	DEF	$ != 0.0
4	151	23	ContinuedFraction.java	evaluate	b	double	1	DEF	$ != 0
5	172	8	ContinuedFraction.java	evaluate	n	int	0	MaxIterationsExceededException	$ >= maxIterations
5	172	8	ContinuedFraction.java	evaluate	maxIterations	int	0	MaxIterationsExceededException	n >= $
1158	108	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	RET	model.$.steps.size() == 0
1158	108	4	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	RET	$.steps.size() == 0
1159	112	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	1	DEF	$.steps.size() == 0
1160	117	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	IllegalArgumentException	$.getInterpolatedState().length != model.getInterpolatedState().length
1160	117	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	IllegalArgumentException	getInterpolatedState().length != $.getInterpolatedState().length
1161	121	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	IllegalArgumentException	$.forward ^ model.$.forward
1161	121	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	IllegalArgumentException	forward ^ $.forward
1162	130	6	ContinuousOutputModel.java	append	step	double	0	IllegalArgumentException	Math.abs(gap) > 1.0e-3 * Math.abs($)
1162	130	6	ContinuousOutputModel.java	append	gap	double	0	IllegalArgumentException	Math.abs($) > 1.0e-3 * Math.abs(step)
1163	178	4	ContinuousOutputModel.java	handleStep	THIS	ContinuousOutputModel	0	DEF	$.steps.size() == 0
1164	185	4	ContinuousOutputModel.java	handleStep	isLast	boolean	0	DEF	$
1165	244	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMin) <= 0
1165	244	6	ContinuousOutputModel.java	setInterpolatedTime	sMin	StepInterpolator	0	RET	locatePoint(time, $) <= 0
1165	244	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMin) <= 0
1166	249	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMax) >= 0
1166	249	6	ContinuousOutputModel.java	setInterpolatedTime	sMax	StepInterpolator	0	RET	locatePoint(time, $) >= 0
1166	249	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMax) >= 0
44820	256	6	ContinuousOutputModel.java	setInterpolatedTime	iMin	int	0	NIL-WHILE	iMax - $ > 5
44820	256	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	$ - iMin > 5
1167	261	8	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ < 0
1168	264	15	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ > 0
1169	278	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	Math.abs($ - tMin) < 1e-6
1169	278	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	Math.abs(tMax - $) < 1e-6
1169	278	8	ContinuousOutputModel.java	setInterpolatedTime	tMin	double	1	DEF	Math.abs(tMed - $) < 1e-6
1169	278	8	ContinuousOutputModel.java	setInterpolatedTime	tMax	double	1	DEF	Math.abs($ - tMed) < 1e-6
1170	301	8	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.index < low
1170	301	8	ContinuousOutputModel.java	setInterpolatedTime	low	int	1	DEF	index < $
1171	303	15	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	DEF	$.index > high
1171	303	15	ContinuousOutputModel.java	setInterpolatedTime	high	int	0	DEF	index > $
44821	311	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.index <= iMax
44821	311	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.locatePoint(time, $.steps.get($.index)) > 0
44821	311	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	index <= $
44821	311	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	NIL-WHILE	locatePoint($, steps.get(index)) > 0
1172	339	4	ContinuousOutputModel.java	locatePoint	THIS	ContinuousOutputModel	0	RET	$.forward
1173	340	6	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getPreviousTime()
1173	340	6	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getPreviousTime()
1174	342	13	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getCurrentTime()
1174	342	13	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getCurrentTime()
1175	348	4	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getPreviousTime()
1175	348	4	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getPreviousTime()
1176	350	11	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getCurrentTime()
1176	350	11	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getCurrentTime()
888	86	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	THIS	CorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != order
888	86	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	DimensionMismatchException	mean.length != $
888	86	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != order
44539	115	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	i	int	0	NIL-FOR	$ < order
44539	115	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	NIL-FOR	i < $
44540	180	8	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
44540	180	8	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
44541	185	8	CorrelatedRandomVectorGenerator.java	decompose	loop	boolean	0	NIL-FOR	$
44542	189	12	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
44542	189	12	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
889	192	16	CorrelatedRandomVectorGenerator.java	decompose	ii	int	0	DEF	c[$][$] > c[isi][isi]
889	192	16	CorrelatedRandomVectorGenerator.java	decompose	isi	int	0	DEF	c[ii][ii] > c[$][$]
889	192	16	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	0	DEF	$[ii][ii] > $[isi][isi]
890	199	12	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	DEF	swap[$.rank] != $.rank
890	199	12	CorrelatedRandomVectorGenerator.java	decompose	swap	int[]	0	DEF	$[rank] != rank
891	207	12	CorrelatedRandomVectorGenerator.java	decompose	ir	int	1	NotPositiveDefiniteMatrixException	c[$][$] < small
891	207	12	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	1	NotPositiveDefiniteMatrixException	$[ir][ir] < small
891	207	12	CorrelatedRandomVectorGenerator.java	decompose	small	double	1	NotPositiveDefiniteMatrixException	c[ir][ir] < $
892	209	16	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	NotPositiveDefiniteMatrixException	$.rank == 0
44543	214	16	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
44543	214	16	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
893	215	20	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NotPositiveDefiniteMatrixException	c[index[$]][index[$]] < -small
893	215	20	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	0	NotPositiveDefiniteMatrixException	$[index[i]][index[i]] < -small
893	215	20	CorrelatedRandomVectorGenerator.java	decompose	index	int[]	0	NotPositiveDefiniteMatrixException	c[$[i]][$[i]] < -small
893	215	20	CorrelatedRandomVectorGenerator.java	decompose	small	double	0	NotPositiveDefiniteMatrixException	c[index[i]][index[i]] < -$
44544	233	16	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
44544	233	16	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
44545	238	20	CorrelatedRandomVectorGenerator.java	decompose	j	int	0	NIL-FOR	$ < i
44545	238	20	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	j < $
44546	255	8	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
44546	255	8	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
44547	256	12	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.rank
44547	256	12	CorrelatedRandomVectorGenerator.java	decompose	j	int	0	NIL-FOR	$ < rank
44548	270	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < $.rank
44548	270	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < rank
44549	276	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < correlated.$.length
44549	276	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < correlated.length
44549	276	8	CorrelatedRandomVectorGenerator.java	nextVector	correlated	double[]	0	NIL-FOR	i < $.length
44550	278	12	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.rank
44550	278	12	CorrelatedRandomVectorGenerator.java	nextVector	j	int	0	NIL-FOR	$ < rank
122	46	8	DefaultTransformer.java	transform	o	Object	0	MathException	$ == null
123	50	8	DefaultTransformer.java	transform	o	Object	0	RET	$ instanceof Number
559	156	8	DenseRealMatrix.java	DenseRealMatrix	copyArray	boolean	1	DEF	$
44290	165	8	DenseRealMatrix.java	DenseRealMatrix	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
44290	165	8	DenseRealMatrix.java	DenseRealMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
44291	167	12	DenseRealMatrix.java	DenseRealMatrix	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
44291	167	12	DenseRealMatrix.java	DenseRealMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
560	168	16	DenseRealMatrix.java	DenseRealMatrix	THIS	DenseRealMatrix	0	DEF	blockData[index].length != iHeight * $.blockWidth(jBlock)
560	168	16	DenseRealMatrix.java	DenseRealMatrix	jBlock	int	0	DEF	blockData[index].length != iHeight * blockWidth($)
560	168	16	DenseRealMatrix.java	DenseRealMatrix	iHeight	int	0	DEF	blockData[index].length != $ * blockWidth(jBlock)
560	168	16	DenseRealMatrix.java	DenseRealMatrix	index	int	0	DEF	blockData[$].length != iHeight * blockWidth(jBlock)
560	168	16	DenseRealMatrix.java	DenseRealMatrix	blockData	double[][]	0	DEF	$[index].length != iHeight * blockWidth(jBlock)
561	175	16	DenseRealMatrix.java	DenseRealMatrix	copyArray	boolean	0	DEF	$
44292	214	8	DenseRealMatrix.java	toBlocksLayout	THIS	DenseRealMatrix	0	NIL-FOR	i < rawData.$.length
44292	214	8	DenseRealMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
44292	214	8	DenseRealMatrix.java	toBlocksLayout	rawData	double[][]	0	NIL-FOR	i < $.length
562	216	12	DenseRealMatrix.java	toBlocksLayout	length	int	0	DEF	$ != columns
562	216	12	DenseRealMatrix.java	toBlocksLayout	columns	int	0	DEF	length != $
44293	225	8	DenseRealMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
44293	225	8	DenseRealMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
44294	229	12	DenseRealMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
44294	229	12	DenseRealMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
44295	239	16	DenseRealMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
44295	239	16	DenseRealMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
44296	268	8	DenseRealMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
44296	268	8	DenseRealMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
44297	272	12	DenseRealMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
44297	272	12	DenseRealMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
44298	297	8	DenseRealMatrix.java	copy	THIS	DenseRealMatrix	0	NIL-FOR	i < $.blocks.$.length
44298	297	8	DenseRealMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
44299	319	12	DenseRealMatrix.java	add	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
44299	319	12	DenseRealMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
44299	319	12	DenseRealMatrix.java	add	out	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
44300	320	16	DenseRealMatrix.java	add	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
44300	320	16	DenseRealMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
44300	320	16	DenseRealMatrix.java	add	out	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
44301	329	20	DenseRealMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
44301	329	20	DenseRealMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
44302	330	24	DenseRealMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
44302	330	24	DenseRealMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
44303	362	8	DenseRealMatrix.java	add	THIS	DenseRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
44303	362	8	DenseRealMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
44303	362	8	DenseRealMatrix.java	add	out	DenseRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
44304	366	12	DenseRealMatrix.java	add	THIS	DenseRealMatrix	0	NIL-FOR	k < outBlock.$.length
44304	366	12	DenseRealMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
44304	366	12	DenseRealMatrix.java	add	outBlock	double[]	0	NIL-FOR	k < $.length
44305	389	12	DenseRealMatrix.java	subtract	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
44305	389	12	DenseRealMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
44305	389	12	DenseRealMatrix.java	subtract	out	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
44306	390	16	DenseRealMatrix.java	subtract	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
44306	390	16	DenseRealMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
44306	390	16	DenseRealMatrix.java	subtract	out	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
44307	399	20	DenseRealMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
44307	399	20	DenseRealMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
44308	400	24	DenseRealMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
44308	400	24	DenseRealMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
44309	432	8	DenseRealMatrix.java	subtract	THIS	DenseRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
44309	432	8	DenseRealMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
44309	432	8	DenseRealMatrix.java	subtract	out	DenseRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
44310	436	12	DenseRealMatrix.java	subtract	THIS	DenseRealMatrix	0	NIL-FOR	k < outBlock.$.length
44310	436	12	DenseRealMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
44310	436	12	DenseRealMatrix.java	subtract	outBlock	double[]	0	NIL-FOR	k < $.length
44311	452	8	DenseRealMatrix.java	scalarAdd	THIS	DenseRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
44311	452	8	DenseRealMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
44311	452	8	DenseRealMatrix.java	scalarAdd	out	DenseRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
44312	455	12	DenseRealMatrix.java	scalarAdd	THIS	DenseRealMatrix	0	NIL-FOR	k < outBlock.$.length
44312	455	12	DenseRealMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
44312	455	12	DenseRealMatrix.java	scalarAdd	outBlock	double[]	0	NIL-FOR	k < $.length
44313	471	8	DenseRealMatrix.java	scalarMultiply	THIS	DenseRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
44313	471	8	DenseRealMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
44313	471	8	DenseRealMatrix.java	scalarMultiply	out	DenseRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
44314	474	12	DenseRealMatrix.java	scalarMultiply	THIS	DenseRealMatrix	0	NIL-FOR	k < outBlock.$.length
44314	474	12	DenseRealMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
44314	474	12	DenseRealMatrix.java	scalarMultiply	outBlock	double[]	0	NIL-FOR	k < $.length
44315	497	12	DenseRealMatrix.java	multiply	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
44315	497	12	DenseRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
44315	497	12	DenseRealMatrix.java	multiply	out	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
44316	502	16	DenseRealMatrix.java	multiply	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
44316	502	16	DenseRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
44316	502	16	DenseRealMatrix.java	multiply	out	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
44317	511	20	DenseRealMatrix.java	multiply	THIS	DenseRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
44317	511	20	DenseRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
44318	515	24	DenseRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
44318	515	24	DenseRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
44319	518	28	DenseRealMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
44319	518	28	DenseRealMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
44320	520	32	DenseRealMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
44320	520	32	DenseRealMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
44321	556	8	DenseRealMatrix.java	multiply	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
44321	556	8	DenseRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
44321	556	8	DenseRealMatrix.java	multiply	out	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
44322	561	12	DenseRealMatrix.java	multiply	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
44322	561	12	DenseRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
44322	561	12	DenseRealMatrix.java	multiply	out	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
44323	571	16	DenseRealMatrix.java	multiply	THIS	DenseRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
44323	571	16	DenseRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
44324	575	20	DenseRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
44324	575	20	DenseRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
44325	578	24	DenseRealMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
44325	578	24	DenseRealMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
44326	582	28	DenseRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
44326	582	28	DenseRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
44327	590	28	DenseRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
44327	590	28	DenseRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
44328	615	8	DenseRealMatrix.java	getData	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
44328	615	8	DenseRealMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
44329	620	12	DenseRealMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
44329	620	12	DenseRealMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
44330	624	16	DenseRealMatrix.java	getData	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
44330	624	16	DenseRealMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
44331	642	8	DenseRealMatrix.java	getNorm	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
44331	642	8	DenseRealMatrix.java	getNorm	jBlock	int	0	NIL-FOR	$ < blockColumns
44332	645	12	DenseRealMatrix.java	getNorm	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
44332	645	12	DenseRealMatrix.java	getNorm	iBlock	int	0	NIL-FOR	$ < blockRows
44333	648	16	DenseRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
44333	648	16	DenseRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
44334	650	20	DenseRealMatrix.java	getNorm	i	int	0	NIL-FOR	$ < iHeight
44334	650	20	DenseRealMatrix.java	getNorm	iHeight	int	0	NIL-FOR	i < $
44335	656	12	DenseRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
44335	656	12	DenseRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
44336	666	8	DenseRealMatrix.java	getFrobeniusNorm	THIS	DenseRealMatrix	0	NIL-FOR	blockIndex < $.blocks.$.length
44336	666	8	DenseRealMatrix.java	getFrobeniusNorm	blockIndex	int	0	NIL-FOR	$ < blocks.length
44337	693	8	DenseRealMatrix.java	getSubMatrix	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
44337	693	8	DenseRealMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
44337	693	8	DenseRealMatrix.java	getSubMatrix	out	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
44338	695	12	DenseRealMatrix.java	getSubMatrix	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
44338	695	12	DenseRealMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
44338	695	12	DenseRealMatrix.java	getSubMatrix	out	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
563	706	16	DenseRealMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
564	708	20	DenseRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
565	740	20	DenseRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
44339	790	8	DenseRealMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
44339	790	8	DenseRealMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
566	803	8	DenseRealMatrix.java	setSubMatrix	refLength	int	0	DEF	$ < 1
567	811	12	DenseRealMatrix.java	setSubMatrix	THIS	DenseRealMatrix	0	DEF	$.subRow.$.length != refLength
567	811	12	DenseRealMatrix.java	setSubMatrix	refLength	int	0	DEF	subRow.length != $
44340	826	8	DenseRealMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
44340	826	8	DenseRealMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
44341	832	12	DenseRealMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
44341	832	12	DenseRealMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
44342	841	16	DenseRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
44342	841	16	DenseRealMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
44343	864	8	DenseRealMatrix.java	getRowMatrix	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
44343	864	8	DenseRealMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
568	868	12	DenseRealMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
568	868	12	DenseRealMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
569	909	8	DenseRealMatrix.java	setRowMatrix	nCols	int	0	InvalidMatrixException	matrix.getColumnDimension() != $
569	909	8	DenseRealMatrix.java	setRowMatrix	matrix	DenseRealMatrix	0	InvalidMatrixException	$.getRowDimension() != 1
569	909	8	DenseRealMatrix.java	setRowMatrix	matrix	DenseRealMatrix	0	InvalidMatrixException	$.getColumnDimension() != nCols
44344	925	8	DenseRealMatrix.java	setRowMatrix	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
44344	925	8	DenseRealMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
570	929	12	DenseRealMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
570	929	12	DenseRealMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
44345	956	8	DenseRealMatrix.java	getColumnMatrix	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
44345	956	8	DenseRealMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
44346	959	12	DenseRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
44346	959	12	DenseRealMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
571	960	16	DenseRealMatrix.java	getColumnMatrix	THIS	DenseRealMatrix	0	DEF	outIndex >= outBlock.$.length
571	960	16	DenseRealMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
571	960	16	DenseRealMatrix.java	getColumnMatrix	outBlock	double[]	0	DEF	outIndex >= $.length
572	998	8	DenseRealMatrix.java	setColumnMatrix	nRows	int	0	InvalidMatrixException	matrix.getRowDimension() != $
572	998	8	DenseRealMatrix.java	setColumnMatrix	matrix	DenseRealMatrix	0	InvalidMatrixException	$.getRowDimension() != nRows
572	998	8	DenseRealMatrix.java	setColumnMatrix	matrix	DenseRealMatrix	0	InvalidMatrixException	$.getColumnDimension() != 1
44347	1015	8	DenseRealMatrix.java	setColumnMatrix	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
44347	1015	8	DenseRealMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
44348	1018	12	DenseRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
44348	1018	12	DenseRealMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
573	1019	16	DenseRealMatrix.java	setColumnMatrix	THIS	DenseRealMatrix	0	DEF	mIndex >= mBlock.$.length
573	1019	16	DenseRealMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
573	1019	16	DenseRealMatrix.java	setColumnMatrix	mBlock	double[]	0	DEF	mIndex >= $.length
44349	1040	8	DenseRealMatrix.java	getRowVector	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
44349	1040	8	DenseRealMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
44350	1073	8	DenseRealMatrix.java	getColumnVector	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
44350	1073	8	DenseRealMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
44351	1076	12	DenseRealMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
44351	1076	12	DenseRealMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
44352	1106	8	DenseRealMatrix.java	getRow	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
44352	1106	8	DenseRealMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
574	1123	8	DenseRealMatrix.java	setRow	THIS	DenseRealMatrix	0	InvalidMatrixException	array.$.length != nCols
574	1123	8	DenseRealMatrix.java	setRow	nCols	int	0	InvalidMatrixException	array.length != $
574	1123	8	DenseRealMatrix.java	setRow	array	double[]	0	InvalidMatrixException	$.length != nCols
44353	1135	8	DenseRealMatrix.java	setRow	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
44353	1135	8	DenseRealMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
44354	1156	8	DenseRealMatrix.java	getColumn	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
44354	1156	8	DenseRealMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
44355	1159	12	DenseRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
44355	1159	12	DenseRealMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
575	1174	8	DenseRealMatrix.java	setColumn	THIS	DenseRealMatrix	0	InvalidMatrixException	array.$.length != nRows
575	1174	8	DenseRealMatrix.java	setColumn	nRows	int	0	InvalidMatrixException	array.length != $
575	1174	8	DenseRealMatrix.java	setColumn	array	double[]	0	InvalidMatrixException	$.length != nRows
44356	1187	8	DenseRealMatrix.java	setColumn	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
44356	1187	8	DenseRealMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
44357	1190	12	DenseRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
44357	1190	12	DenseRealMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
44358	1278	8	DenseRealMatrix.java	transpose	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockColumns
44358	1278	8	DenseRealMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
44359	1279	12	DenseRealMatrix.java	transpose	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockRows
44359	1279	12	DenseRealMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
44360	1288	16	DenseRealMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
44360	1288	16	DenseRealMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
44361	1290	20	DenseRealMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
44361	1290	20	DenseRealMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
576	1319	8	DenseRealMatrix.java	operate	THIS	DenseRealMatrix	0	DEF	v.$.length != $.columns
576	1319	8	DenseRealMatrix.java	operate	v	double[]	0	DEF	$.length != columns
44362	1329	8	DenseRealMatrix.java	operate	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
44362	1329	8	DenseRealMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
44363	1332	12	DenseRealMatrix.java	operate	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
44363	1332	12	DenseRealMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
44364	1336	16	DenseRealMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
44364	1336	16	DenseRealMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
44365	1339	20	DenseRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
44365	1339	20	DenseRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
44366	1347	20	DenseRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
44366	1347	20	DenseRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
577	1363	8	DenseRealMatrix.java	preMultiply	THIS	DenseRealMatrix	0	DEF	v.$.length != $.rows
577	1363	8	DenseRealMatrix.java	preMultiply	v	double[]	0	DEF	$.length != rows
44367	1373	8	DenseRealMatrix.java	preMultiply	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
44367	1373	8	DenseRealMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
44368	1380	12	DenseRealMatrix.java	preMultiply	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
44368	1380	12	DenseRealMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
44369	1384	16	DenseRealMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
44369	1384	16	DenseRealMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
44370	1388	20	DenseRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
44370	1388	20	DenseRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
44371	1396	20	DenseRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
44371	1396	20	DenseRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
44372	1413	8	DenseRealMatrix.java	walkInRowOrder	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
44372	1413	8	DenseRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
44373	1416	12	DenseRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
44373	1416	12	DenseRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
44374	1417	16	DenseRealMatrix.java	walkInRowOrder	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
44374	1417	16	DenseRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
44375	1422	20	DenseRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
44375	1422	20	DenseRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
44376	1435	8	DenseRealMatrix.java	walkInRowOrder	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
44376	1435	8	DenseRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
44377	1438	12	DenseRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
44377	1438	12	DenseRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
44378	1439	16	DenseRealMatrix.java	walkInRowOrder	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
44378	1439	16	DenseRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
44379	1444	20	DenseRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
44379	1444	20	DenseRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
44380	1460	8	DenseRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
44380	1460	8	DenseRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
44381	1464	12	DenseRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
44381	1464	12	DenseRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
44382	1465	16	DenseRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
44382	1465	16	DenseRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
44383	1471	20	DenseRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
44383	1471	20	DenseRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
44384	1487	8	DenseRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
44384	1487	8	DenseRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
44385	1491	12	DenseRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
44385	1491	12	DenseRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
44386	1492	16	DenseRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
44386	1492	16	DenseRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
44387	1498	20	DenseRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
44387	1498	20	DenseRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
44388	1511	8	DenseRealMatrix.java	walkInOptimizedOrder	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
44388	1511	8	DenseRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
44389	1514	12	DenseRealMatrix.java	walkInOptimizedOrder	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
44389	1514	12	DenseRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
44390	1518	16	DenseRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
44390	1518	16	DenseRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
44391	1519	20	DenseRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
44391	1519	20	DenseRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
44392	1532	8	DenseRealMatrix.java	walkInOptimizedOrder	THIS	DenseRealMatrix	0	NIL-FOR	iBlock < $.blockRows
44392	1532	8	DenseRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
44393	1535	12	DenseRealMatrix.java	walkInOptimizedOrder	THIS	DenseRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
44393	1535	12	DenseRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
44394	1539	16	DenseRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
44394	1539	16	DenseRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
44395	1540	20	DenseRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
44395	1540	20	DenseRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
44396	1556	8	DenseRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
44396	1556	8	DenseRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
44397	1560	12	DenseRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
44397	1560	12	DenseRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
44398	1566	16	DenseRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
44398	1566	16	DenseRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
44399	1567	20	DenseRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
44399	1567	20	DenseRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
44400	1583	8	DenseRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
44400	1583	8	DenseRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
44401	1587	12	DenseRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
44401	1587	12	DenseRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
44402	1593	16	DenseRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
44402	1593	16	DenseRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
44403	1594	20	DenseRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
44403	1594	20	DenseRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
757	139	8	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.windowSize != INFINITE_WINDOW
758	140	12	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.getN() == $.windowSize
759	142	19	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	0	DEF	$.getN() < $.windowSize
760	203	8	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	0	DEF	$.getN() > 0
761	204	12	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	1	DEF	$.getN() > 1
762	302	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	IllegalArgumentException	$ < 1
763	303	12	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	IllegalArgumentException	$ != INFINITE_WINDOW
764	313	8	DescriptiveStatistics.java	setWindowSize	THIS	DescriptiveStatistics	0	DEF	windowSize < $.eDA.getNumElements()
764	313	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < eDA.getNumElements()
764	313	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
765	374	8	DescriptiveStatistics.java	getPercentile	THIS	DescriptiveStatistics	1	DEF	$.percentileImpl instanceof Percentile
44475	167	8	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	0	NIL-FOR	i < vertexA.$.length
44475	167	8	DirectSearchOptimizer.java	minimize	i	int	0	NIL-FOR	$ < vertexA.length
44475	167	8	DirectSearchOptimizer.java	minimize	vertexA	double[]	0	NIL-FOR	i < $.length
44476	252	12	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	0	NIL-FOR	i < vertices.$.length
44476	252	12	DirectSearchOptimizer.java	minimize	i	int	0	NIL-FOR	$ < vertices.length
44476	252	12	DirectSearchOptimizer.java	minimize	vertices	double[][]	0	NIL-FOR	i < $.length
44477	361	8	DirectSearchOptimizer.java	buildSimplex	i	int	0	NIL-FOR	$ <= n
44477	361	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	i <= $
692	363	12	DirectSearchOptimizer.java	buildSimplex	i	int	0	DEF	$ > 0
693	366	12	DirectSearchOptimizer.java	buildSimplex	i	int	0	DEF	$ < n
693	366	12	DirectSearchOptimizer.java	buildSimplex	n	int	0	DEF	i < $
44478	380	8	DirectSearchOptimizer.java	buildSimplex	i	int	0	NIL-FOR	$ <= n
44478	380	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	i <= $
44479	397	8	DirectSearchOptimizer.java	buildSimplex	i	int	0	NIL-FOR	$ <= n
44479	397	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	i <= $
694	418	8	DirectSearchOptimizer.java	setMultiStart	starts	int	1	DEF	$ < 2
44480	478	8	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	0	NIL-FOR	i < $.starts
44480	478	8	DirectSearchOptimizer.java	minimize	i	int	0	NIL-FOR	$ < starts
44481	483	12	DirectSearchOptimizer.java	minimize	loop	boolean	0	NIL-FOR	$
695	484	16	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	1	DEF	checker.converged($.simplex)
695	484	16	DirectSearchOptimizer.java	minimize	checker	ConvergenceChecker	1	DEF	$.converged(simplex)
696	488	23	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	1	DEF	$.evaluations >= maxEvaluations
696	488	23	DirectSearchOptimizer.java	minimize	maxEvaluations	int	1	DEF	evaluations >= $
697	497	12	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	0	DEF	i < ($.starts - 1)
697	497	12	DirectSearchOptimizer.java	minimize	i	int	0	DEF	$ < (starts - 1)
698	509	8	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	0	ConvergenceException	$.minima[0] == null
44482	547	8	DirectSearchOptimizer.java	evaluateSimplex	THIS	DirectSearchOptimizer	0	NIL-FOR	i < $.simplex.$.length
44482	547	8	DirectSearchOptimizer.java	evaluateSimplex	i	int	0	NIL-FOR	$ < simplex.length
699	549	12	DirectSearchOptimizer.java	evaluateSimplex	pair	PointCostPair	0	DEF	Double.isNaN($.getCost())
44483	564	8	DirectSearchOptimizer.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < n
44483	564	8	DirectSearchOptimizer.java	replaceWorstPoint	n	int	0	NIL-FOR	i < $
700	565	12	DirectSearchOptimizer.java	replaceWorstPoint	THIS	DirectSearchOptimizer	0	DEF	$.simplex[i].getCost() > pointCostPair.getCost()
700	565	12	DirectSearchOptimizer.java	replaceWorstPoint	i	int	0	DEF	simplex[$].getCost() > pointCostPair.getCost()
700	565	12	DirectSearchOptimizer.java	replaceWorstPoint	pointCostPair	PointCostPair	0	DEF	simplex[i].getCost() > $.getCost()
44830	71	8	DividedDifferenceInterpolator.java	interpolate	THIS	DividedDifferenceInterpolator	0	NIL-FOR	i < c.$.length
44830	71	8	DividedDifferenceInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < c.length
44830	71	8	DividedDifferenceInterpolator.java	interpolate	c	double[]	0	NIL-FOR	i < $.length
44831	106	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
44831	106	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
44832	112	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
44832	112	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
44833	113	12	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	j < n-$
44833	113	12	DividedDifferenceInterpolator.java	computeDividedDifference	j	int	0	NIL-FOR	$ < n-i
44833	113	12	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	j < $-i
1197	115	16	DividedDifferenceInterpolator.java	computeDividedDifference	denominator	double	0	DuplicateSampleAbscissaException	$ == 0.0
44722	139	4	DormandPrince54Integrator.java	estimateError	THIS	DormandPrince54Integrator	0	NIL-FOR	j < y0.$.length
44722	139	4	DormandPrince54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
44722	139	4	DormandPrince54Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
1015	64	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	THIS	DormandPrince54StepInterpolator	1	DEF	interpolator.$.v1 == null
1015	64	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	interpolator	DormandPrince54StepInterpolator	1	DEF	$.v1 == null
1016	112	4	DormandPrince54StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince54StepInterpolator	0	DEF	$.vectorsInitialized
1017	114	6	DormandPrince54StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince54StepInterpolator	0	DEF	$.v1 == null
44687	124	6	DormandPrince54StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
44687	124	6	DormandPrince54StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
44688	147	4	DormandPrince54StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
44688	147	4	DormandPrince54StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
44721	253	4	DormandPrince853Integrator.java	estimateError	THIS	DormandPrince853Integrator	0	NIL-FOR	j < y0.$.length
44721	253	4	DormandPrince853Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
44721	253	4	DormandPrince853Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
1076	274	4	DormandPrince853Integrator.java	estimateError	den	double	0	DEF	$ <= 0.0
1101	67	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	1	DEF	interpolator.$.currentState == null
1101	67	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	interpolator	DormandPrince853StepInterpolator	1	DEF	$.currentState == null
44755	78	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
44755	78	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < yDotKLast.length
44756	85	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
44756	85	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < v.length
44757	110	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
44757	110	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < yDotKLast.length
44758	115	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
44758	115	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < v.length
1102	134	4	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	DEF	$.vectorsInitialized
1103	136	6	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	DEF	$.v == null
44759	138	8	DormandPrince853StepInterpolator.java	computeInterpolatedState	k	int	0	NIL-FOR	$ < 7
44760	147	6	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
44760	147	6	DormandPrince853StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
44761	165	10	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.d.$.length
44761	165	10	DormandPrince853StepInterpolator.java	computeInterpolatedState	k	int	0	NIL-FOR	$ < d.length
44762	187	4	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
44762	187	4	DormandPrince853StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
1104	207	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	RET	$.currentState == null
44763	216	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
44763	216	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
44764	225	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
44764	225	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
44765	235	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
44765	235	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
44766	257	4	DormandPrince853StepInterpolator.java	writeExternal	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.currentState.$.length
44766	257	4	DormandPrince853StepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < currentState.length
44767	279	4	DormandPrince853StepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < dimension
44767	279	4	DormandPrince853StepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	i < $
581	171	8	EigenDecompositionImpl.java	EigenDecompositionImpl	THIS	EigenDecompositionImpl	1	DEF	$.isSymmetric(matrix)
581	171	8	EigenDecompositionImpl.java	EigenDecompositionImpl	matrix	RealMatrix	1	DEF	isSymmetric($)
44406	205	8	EigenDecompositionImpl.java	EigenDecompositionImpl	THIS	EigenDecompositionImpl	0	NIL-FOR	i < $.squaredSecondary.$.length
44406	205	8	EigenDecompositionImpl.java	EigenDecompositionImpl	i	int	0	NIL-FOR	$ < squaredSecondary.length
44407	224	8	EigenDecompositionImpl.java	isSymmetric	i	int	0	NIL-FOR	$ < rows
44407	224	8	EigenDecompositionImpl.java	isSymmetric	rows	int	0	NIL-FOR	i < $
44408	225	12	EigenDecompositionImpl.java	isSymmetric	j	int	0	NIL-FOR	$ < columns
44408	225	12	EigenDecompositionImpl.java	isSymmetric	columns	int	0	NIL-FOR	j < $
582	228	16	EigenDecompositionImpl.java	isSymmetric	mij	double	0	RET	Math.abs($ - mji) > (Math.max(Math.abs($), Math.abs(mji)) * eps)
582	228	16	EigenDecompositionImpl.java	isSymmetric	mji	double	0	RET	Math.abs(mij - $) > (Math.max(Math.abs(mij), Math.abs($)) * eps)
582	228	16	EigenDecompositionImpl.java	isSymmetric	eps	double	0	RET	Math.abs(mij - mji) > (Math.max(Math.abs(mij), Math.abs(mji)) * $)
583	263	8	EigenDecompositionImpl.java	getV	THIS	EigenDecompositionImpl	0	DEF	$.cachedV == null
584	265	12	EigenDecompositionImpl.java	getV	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
44409	271	12	EigenDecompositionImpl.java	getV	k	int	0	NIL-FOR	$ < m
44409	271	12	EigenDecompositionImpl.java	getV	m	int	0	NIL-FOR	k < $
585	285	8	EigenDecompositionImpl.java	getD	THIS	EigenDecompositionImpl	0	DEF	$.cachedD == null
586	296	8	EigenDecompositionImpl.java	getVT	THIS	EigenDecompositionImpl	0	DEF	$.cachedVt == null
587	298	12	EigenDecompositionImpl.java	getVT	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
44410	304	12	EigenDecompositionImpl.java	getVT	k	int	0	NIL-FOR	$ < m
44410	304	12	EigenDecompositionImpl.java	getVT	m	int	0	NIL-FOR	k < $
588	342	8	EigenDecompositionImpl.java	getEigenvector	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
589	363	8	EigenDecompositionImpl.java	getSolver	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
44411	563	8	EigenDecompositionImpl.java	transformToTridiagonal	THIS	EigenDecompositionImpl	0	NIL-FOR	i < $.squaredSecondary.$.length
44411	563	8	EigenDecompositionImpl.java	transformToTridiagonal	i	int	0	NIL-FOR	$ < squaredSecondary.length
44412	583	8	EigenDecompositionImpl.java	computeGershgorinCircles	i	int	0	NIL-FOR	$ < m - 1
44412	583	8	EigenDecompositionImpl.java	computeGershgorinCircles	m	int	0	NIL-FOR	i < $ - 1
590	661	16	EigenDecompositionImpl.java	findEigenvalues	chooseLeft	boolean	1	DEF	$
44413	662	20	EigenDecompositionImpl.java	findEigenvalues	i	int	0	NIL-FOR	$ < n
44413	662	20	EigenDecompositionImpl.java	findEigenvalues	n	int	0	NIL-FOR	i < $
44414	666	20	EigenDecompositionImpl.java	findEigenvalues	i	int	0	NIL-FOR	$ < n
44414	666	20	EigenDecompositionImpl.java	findEigenvalues	n	int	0	NIL-FOR	i < $
44415	677	8	EigenDecompositionImpl.java	findEigenvalues	i	int	0	NIL-FOR	$ < j
44415	677	8	EigenDecompositionImpl.java	findEigenvalues	j	int	0	NIL-FOR	i < $
44416	695	8	EigenDecompositionImpl.java	computeSplits	THIS	EigenDecompositionImpl	0	NIL-FOR	i < $.secondary.$.length
44416	695	8	EigenDecompositionImpl.java	computeSplits	i	int	0	NIL-FOR	$ < secondary.length
591	699	12	EigenDecompositionImpl.java	computeSplits	THIS	EigenDecompositionImpl	0	DEF	Math.abs($.secondary[i]) <= max
591	699	12	EigenDecompositionImpl.java	computeSplits	max	double	0	DEF	Math.abs(secondary[i]) <= $
591	699	12	EigenDecompositionImpl.java	computeSplits	i	int	0	DEF	Math.abs(secondary[$]) <= max
592	738	8	EigenDecompositionImpl.java	process2RowsBlock	delta	double	0	InvalidMatrixException	$ < 0
593	775	8	EigenDecompositionImpl.java	process3RowsBlock	delta	double	0	InvalidMatrixException	$ >= 0
594	789	8	EigenDecompositionImpl.java	process3RowsBlock	z0	double	0	DEF	$ < z1
594	789	8	EigenDecompositionImpl.java	process3RowsBlock	z1	double	0	DEF	z0 < $
595	794	8	EigenDecompositionImpl.java	process3RowsBlock	z1	double	0	DEF	$ < z2
595	794	8	EigenDecompositionImpl.java	process3RowsBlock	z2	double	0	DEF	z1 < $
596	799	8	EigenDecompositionImpl.java	process3RowsBlock	z0	double	0	DEF	$ < z1
596	799	8	EigenDecompositionImpl.java	process3RowsBlock	z1	double	0	DEF	z0 < $
44417	826	8	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	NIL-FOR	$ < n - 1
44417	826	8	EigenDecompositionImpl.java	processGeneralBlock	n	int	0	NIL-FOR	i < $ - 1
597	832	8	EigenDecompositionImpl.java	processGeneralBlock	sumOffDiag	double	0	RET	$ == 0
44418	855	8	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	NIL-WHILE	$ > 0
44419	867	12	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	NIL-FOR	$ >= 0
598	868	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.work[i + 2] <= 0
598	868	16	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	DEF	work[$ + 2] <= 0
599	872	16	EigenDecompositionImpl.java	processGeneralBlock	eMax	double	0	DEF	qMin >= 4 * $
599	872	16	EigenDecompositionImpl.java	processGeneralBlock	qMin	double	0	DEF	$ >= 4 * eMax
44420	886	12	EigenDecompositionImpl.java	processGeneralBlock	i0	int	0	NIL-FOR	$ < n0
44420	886	12	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	NIL-FOR	i0 < $
600	887	16	EigenDecompositionImpl.java	processGeneralBlock	k	int	0	MaxIterationsExceededException	$ >= maxIter
600	887	16	EigenDecompositionImpl.java	processGeneralBlock	maxIter	int	0	MaxIterationsExceededException	k >= $
601	897	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.pingPong == 0
601	897	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.work[4 * n0 - 2] <= $.TOLERANCE_2 * $.sigma
601	897	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.work[4 * n0 - 1] <= $.TOLERANCE_2 * qMax
601	897	16	EigenDecompositionImpl.java	processGeneralBlock	qMax	double	0	DEF	work[4 * n0 - 1] <= TOLERANCE_2 * $
601	897	16	EigenDecompositionImpl.java	processGeneralBlock	i0	int	0	DEF	n0 - $ > 3
601	897	16	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	DEF	work[4 * $ - 2] <= TOLERANCE_2 * sigma
601	897	16	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	DEF	work[4 * $ - 1] <= TOLERANCE_2 * qMax
601	897	16	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	DEF	$ - i0 > 3
44421	904	20	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	NIL-FOR	$ < 4 * n0 - 11
44421	904	20	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	NIL-FOR	i < 4 * $ - 11
602	905	24	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	1	DEF	$.work[i + 3] <= $.TOLERANCE_2 * $.work[i]
602	905	24	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	1	DEF	$.work[i + 2] <= $.TOLERANCE_2 * $.sigma
602	905	24	EigenDecompositionImpl.java	processGeneralBlock	i	int	1	DEF	work[$ + 3] <= TOLERANCE_2 * work[$]
602	905	24	EigenDecompositionImpl.java	processGeneralBlock	i	int	1	DEF	work[$ + 2] <= TOLERANCE_2 * sigma
44422	936	8	EigenDecompositionImpl.java	initialSplits	k	int	0	NIL-FOR	$ < 2
44423	940	12	EigenDecompositionImpl.java	initialSplits	i	int	0	NIL-FOR	$ >= 0
603	941	16	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	$.work[i + 2] <= $.TOLERANCE_2 * d
603	941	16	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	work[$ + 2] <= TOLERANCE_2 * d
603	941	16	EigenDecompositionImpl.java	initialSplits	d	double	1	DEF	work[i + 2] <= TOLERANCE_2 * $
44424	951	12	EigenDecompositionImpl.java	initialSplits	i	int	0	NIL-FOR	$ < 4 * n - 2
44424	951	12	EigenDecompositionImpl.java	initialSplits	n	int	0	NIL-FOR	i < 4 * $ - 2
604	954	16	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	$.work[i] <= $.TOLERANCE_2 * d
604	954	16	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	work[$] <= TOLERANCE_2 * d
604	954	16	EigenDecompositionImpl.java	initialSplits	d	double	1	DEF	work[i] <= TOLERANCE_2 * $
605	959	23	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[i + 2] < $.work[j]
605	959	23	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j] < $.work[i + 2]
605	959	23	EigenDecompositionImpl.java	initialSplits	j	int	1	DEF	MathUtils.SAFE_MIN * work[i + 2] < work[$]
605	959	23	EigenDecompositionImpl.java	initialSplits	j	int	1	DEF	MathUtils.SAFE_MIN * work[$] < work[i + 2]
605	959	23	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[j]
605	959	23	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	MathUtils.SAFE_MIN * work[j] < work[$ + 2]
44425	995	8	EigenDecompositionImpl.java	goodStep	deflating	boolean	0	NIL-FOR	$
606	997	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	0	RET	start >= $
606	997	12	EigenDecompositionImpl.java	goodStep	start	int	0	RET	$ >= deflatedEnd
607	1004	12	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 5] <= $.TOLERANCE_2 * ($.sigma + $.work[k - 3])
607	1004	12	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 2 * $.pingPong - 4] <= $.TOLERANCE_2 * $.work[k - 7]
607	1004	12	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 5] <= TOLERANCE_2 * (sigma + work[$ - 3])
607	1004	12	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 2 * pingPong - 4] <= TOLERANCE_2 * work[$ - 7]
607	1004	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	DEF	start != $ - 2
607	1004	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	DEF	start == $ - 1
607	1004	12	EigenDecompositionImpl.java	goodStep	start	int	1	DEF	$ != deflatedEnd - 2
607	1004	12	EigenDecompositionImpl.java	goodStep	start	int	1	DEF	$ == deflatedEnd - 1
608	1013	19	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 9] <= $.TOLERANCE_2 * $.sigma
608	1013	19	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 2 * $.pingPong - 8] <= $.TOLERANCE_2 * $.work[k - 11]
608	1013	19	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 9] <= TOLERANCE_2 * sigma
608	1013	19	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 2 * pingPong - 8] <= TOLERANCE_2 * work[$ - 11]
608	1013	19	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	DEF	start == $ - 2
608	1013	19	EigenDecompositionImpl.java	goodStep	start	int	1	DEF	$ == deflatedEnd - 2
609	1018	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.work[k - 3] > $.work[k - 7]
609	1018	16	EigenDecompositionImpl.java	goodStep	k	int	0	DEF	work[$ - 3] > work[$ - 7]
610	1024	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.work[k - 5] > $.TOLERANCE_2 * $.work[k - 3]
610	1024	16	EigenDecompositionImpl.java	goodStep	k	int	0	DEF	work[$ - 5] > TOLERANCE_2 * work[$ - 3]
611	1027	20	EigenDecompositionImpl.java	goodStep	t	double	1	DEF	s <= $
611	1027	20	EigenDecompositionImpl.java	goodStep	s	double	1	DEF	$ <= t
612	1051	8	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.dMin <= 0
612	1051	8	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	0	DEF	$ < end
612	1051	8	EigenDecompositionImpl.java	goodStep	end	int	0	DEF	deflatedEnd < $
613	1052	12	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.flipIfWarranted(deflatedEnd, 1)
613	1052	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	0	DEF	flipIfWarranted($, 1)
614	1065	8	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	RET	$.dMin < 0
614	1065	8	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	RET	MathUtils.SAFE_MIN * $.qMax < Math.min($.work[l - 1], Math.min($.work[l - 9], $.dMin2 + $.work[l - 2 * $.pingPong]))
614	1065	8	EigenDecompositionImpl.java	goodStep	l	int	0	RET	MathUtils.SAFE_MIN * qMax < Math.min(work[$ - 1], Math.min(work[$ - 9], dMin2 + work[$ - 2 * pingPong]))
44426	1073	12	EigenDecompositionImpl.java	goodStep	loop	boolean	0	NIL-FOR	$
615	1079	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin >= 0
615	1079	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin1 > 0
616	1083	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	Math.abs($.dN) < TOLERANCE * $.sigma
616	1083	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.work[4 * deflatedEnd - 5 - $.pingPong] < TOLERANCE * ($.sigma + $.dN1)
616	1083	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin < 0.0
616	1083	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin1 > 0.0
616	1083	23	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	RET	work[4 * $ - 5 - pingPong] < TOLERANCE * (sigma + dN1)
617	1092	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.dMin < 0.0
618	1094	20	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.tType < -22
619	1097	27	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.dMin1 > 0.0
620	1106	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	Double.isNaN($.dMin)
621	1131	8	EigenDecompositionImpl.java	flipIfWarranted	THIS	EigenDecompositionImpl	0	RET	1.5 * $.work[$.pingPong] < $.work[4 * (n - 1) + $.pingPong]
621	1131	8	EigenDecompositionImpl.java	flipIfWarranted	n	int	0	RET	1.5 * work[pingPong] < work[4 * ($ - 1) + pingPong]
44427	1133	12	EigenDecompositionImpl.java	flipIfWarranted	i	int	0	NIL-FOR	$ < j
44427	1133	12	EigenDecompositionImpl.java	flipIfWarranted	j	int	0	NIL-FOR	i < $
44428	1134	16	EigenDecompositionImpl.java	flipIfWarranted	k	int	0	NIL-FOR	$ < 4
44429	1158	8	EigenDecompositionImpl.java	eigenvaluesRange	i	int	0	NIL-FOR	$ < n
44429	1158	8	EigenDecompositionImpl.java	eigenvaluesRange	n	int	0	NIL-FOR	i < $
44430	1174	8	EigenDecompositionImpl.java	eigenvaluesRange	i	int	0	NIL-FOR	$ < maxIter
44430	1174	8	EigenDecompositionImpl.java	eigenvaluesRange	maxIter	int	0	NIL-FOR	i < $
622	1177	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < relativeTolerance * Math.max(Math.abs(left), Math.abs(right))
622	1177	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < absoluteTolerance
622	1177	12	EigenDecompositionImpl.java	eigenvaluesRange	relativeTolerance	double	0	DEF	range < $ * Math.max(Math.abs(left), Math.abs(right))
622	1177	12	EigenDecompositionImpl.java	eigenvaluesRange	absoluteTolerance	double	0	DEF	range < $
622	1177	12	EigenDecompositionImpl.java	eigenvaluesRange	left	double	0	DEF	range < relativeTolerance * Math.max(Math.abs($), Math.abs(right))
622	1177	12	EigenDecompositionImpl.java	eigenvaluesRange	right	double	0	DEF	range < relativeTolerance * Math.max(Math.abs(left), Math.abs($))
623	1184	12	EigenDecompositionImpl.java	eigenvaluesRange	THIS	EigenDecompositionImpl	1	DEF	$.countEigenValues(middle, index, n) >= 1
623	1184	12	EigenDecompositionImpl.java	eigenvaluesRange	middle	double	1	DEF	countEigenValues($, index, n) >= 1
623	1184	12	EigenDecompositionImpl.java	eigenvaluesRange	index	int	1	DEF	countEigenValues(middle, $, n) >= 1
623	1184	12	EigenDecompositionImpl.java	eigenvaluesRange	n	int	1	DEF	countEigenValues(middle, index, $) >= 1
44431	1196	8	EigenDecompositionImpl.java	eigenvaluesRange	i	int	0	NIL-FOR	$ < maxIter
44431	1196	8	EigenDecompositionImpl.java	eigenvaluesRange	maxIter	int	0	NIL-FOR	i < $
624	1199	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < absoluteTolerance
624	1199	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < relativeTolerance * Math.max(Math.abs(left), Math.abs(right))
624	1199	12	EigenDecompositionImpl.java	eigenvaluesRange	relativeTolerance	double	0	DEF	range < $ * Math.max(Math.abs(left), Math.abs(right))
624	1199	12	EigenDecompositionImpl.java	eigenvaluesRange	absoluteTolerance	double	0	DEF	range < $
624	1199	12	EigenDecompositionImpl.java	eigenvaluesRange	left	double	0	DEF	range < relativeTolerance * Math.max(Math.abs($), Math.abs(right))
624	1199	12	EigenDecompositionImpl.java	eigenvaluesRange	right	double	0	DEF	range < relativeTolerance * Math.max(Math.abs(left), Math.abs($))
625	1206	12	EigenDecompositionImpl.java	eigenvaluesRange	THIS	EigenDecompositionImpl	1	DEF	$.countEigenValues(middle, index, n) >= n
625	1206	12	EigenDecompositionImpl.java	eigenvaluesRange	middle	double	1	DEF	countEigenValues($, index, n) >= n
625	1206	12	EigenDecompositionImpl.java	eigenvaluesRange	index	int	1	DEF	countEigenValues(middle, $, n) >= n
625	1206	12	EigenDecompositionImpl.java	eigenvaluesRange	n	int	1	DEF	countEigenValues(middle, index, $) >= $
44432	1229	8	EigenDecompositionImpl.java	countEigenValues	i	int	0	NIL-FOR	$ < n
44432	1229	8	EigenDecompositionImpl.java	countEigenValues	n	int	0	NIL-FOR	i < $
626	1231	12	EigenDecompositionImpl.java	countEigenValues	ratio	double	0	DEF	$ <= 0
44433	1252	8	EigenDecompositionImpl.java	ldlTDecomposition	i	int	0	NIL-FOR	$ < n
44433	1252	8	EigenDecompositionImpl.java	ldlTDecomposition	n	int	0	NIL-FOR	i < $
627	1275	8	EigenDecompositionImpl.java	dqds	THIS	EigenDecompositionImpl	1	DEF	$.pingPong == 0
44434	1276	12	EigenDecompositionImpl.java	dqds	j4	int	0	NIL-FOR	$ <= 4 * (end - 3)
44434	1276	12	EigenDecompositionImpl.java	dqds	end	int	0	NIL-FOR	j4 <= 4 * ($ - 3)
44435	1285	12	EigenDecompositionImpl.java	dqds	j4	int	0	NIL-FOR	$ <= 4 * (end - 3)
44435	1285	12	EigenDecompositionImpl.java	dqds	end	int	0	NIL-FOR	j4 <= 4 * ($ - 3)
628	1331	8	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.pingPong == 0
44436	1332	12	EigenDecompositionImpl.java	dqd	j4	int	0	NIL-FOR	$ < 4 * (end - 3)
44436	1332	12	EigenDecompositionImpl.java	dqd	end	int	0	NIL-FOR	j4 < 4 * ($ - 3)
629	1334	16	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 2] == 0.0
629	1334	16	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 2] == 0.0
630	1339	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 + 1] < $.work[j4 - 2]
630	1339	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 2] < $.work[j4 + 1]
630	1339	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 1] < work[$ - 2]
630	1339	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 2] < work[$ + 1]
44437	1352	12	EigenDecompositionImpl.java	dqd	j4	int	0	NIL-FOR	$ < 4 * (end - 3)
44437	1352	12	EigenDecompositionImpl.java	dqd	end	int	0	NIL-FOR	j4 < 4 * ($ - 3)
631	1354	16	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 3] == 0.0
631	1354	16	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 3] == 0.0
632	1359	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 3] < $.work[j4 + 2]
632	1359	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 + 2] < $.work[j4 - 3]
632	1359	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 3] < work[$ + 2]
632	1359	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[$ - 3]
633	1379	8	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 2] == 0.0
633	1379	8	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 2] == 0.0
634	1384	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 2] < $.work[j4p2 + 2]
634	1384	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4p2 + 2] < $.work[j4 - 2]
634	1384	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 2] < work[j4p2 + 2]
634	1384	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[j4p2 + 2] < work[$ - 2]
634	1384	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[j4 - 2] < work[$ + 2]
634	1384	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[j4 - 2]
635	1399	8	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 2] == 0.0
635	1399	8	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 2] == 0.0
636	1404	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4p2 + 2] < $.work[j4 - 2]
636	1404	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 2] < $.work[j4p2 + 2]
636	1404	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[j4p2 + 2] < work[$ - 2]
636	1404	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 2] < work[j4p2 + 2]
636	1404	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[j4 - 2]
636	1404	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[j4 - 2] < work[$ + 2]
637	1435	8	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.dMin <= 0.0
638	1445	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN
638	1445	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN1
639	1451	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.dMin == $.dN
639	1451	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.dMin1 == $.dN1
640	1455	20	EigenDecompositionImpl.java	computeShiftIncrement	gap1	double	1	DEF	$ > 0.0
640	1455	20	EigenDecompositionImpl.java	computeShiftIncrement	gap1	double	1	DEF	$ > b1
640	1455	20	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	1	DEF	gap1 > $
641	1460	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	DEF	$.dN > b1
641	1460	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	dN > $
642	1463	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	a2 > ($ + b2)
642	1463	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	a2 > (b1 + $)
642	1463	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	$ > (b1 + b2)
643	1475	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN
644	1478	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 5] > $.work[nn - 7]
644	1478	24	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 5] > work[$ - 7]
645	1487	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[np - 4] > $.work[np - 2]
645	1487	24	EigenDecompositionImpl.java	computeShiftIncrement	np	int	0	RET	work[$ - 4] > work[$ - 2]
646	1491	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 9] > $.work[nn - 11]
646	1491	24	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 9] > work[$ - 11]
44438	1500	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
44438	1500	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
44438	1500	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
647	1501	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	$ == 0.0
648	1505	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
648	1505	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
649	1510	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * Math.max(b2, $) < a2
649	1510	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * Math.max($, b1) < a2
649	1510	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	cnst1 < $
649	1510	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	100 * Math.max(b2, b1) < $
649	1510	24	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	0	DEF	$ < a2
650	1517	20	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	$ < cnst1
650	1517	20	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	0	DEF	a2 < $
651	1523	19	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN2
652	1534	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[np - 4] > b1
652	1534	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[np - 8] > b2
652	1534	16	EigenDecompositionImpl.java	computeShiftIncrement	np	int	0	RET	work[$ - 4] > b1
652	1534	16	EigenDecompositionImpl.java	computeShiftIncrement	np	int	0	RET	work[$ - 8] > b2
652	1534	16	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	RET	work[np - 4] > $
652	1534	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	RET	work[np - 8] > $
653	1540	16	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	RET	end - $ > 2
653	1540	16	EigenDecompositionImpl.java	computeShiftIncrement	end	int	0	RET	$ - start > 2
44439	1543	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
44439	1543	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
44439	1543	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
654	1544	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	$ == 0.0
655	1548	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
655	1548	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
656	1553	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * Math.max(b2, $) < a2
656	1553	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * Math.max($, b1) < a2
656	1553	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	cnst1 < $
656	1553	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	100 * Math.max(b2, b1) < $
656	1553	24	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	0	DEF	$ < a2
657	1560	16	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	1	DEF	$ < cnst1
657	1560	16	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	1	DEF	a2 < $
658	1569	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.tType == -6
659	1571	23	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.tType == -18
660	1583	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin1 == $.dN1
660	1583	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin2 == $.dN2
661	1588	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 5] > $.work[nn - 7]
661	1588	16	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 5] > work[$ - 7]
662	1593	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	RET	$ != 0.0
44440	1594	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
44440	1594	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
44440	1594	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
663	1596	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
663	1596	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
664	1601	24	EigenDecompositionImpl.java	computeShiftIncrement	oldB1	double	0	DEF	100 * Math.max(b1, $) < b2
664	1601	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * Math.max($, oldB1) < b2
664	1601	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * Math.max(b1, oldB1) < $
665	1609	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	1	DEF	gap2 > $ * a2
665	1609	16	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	1	DEF	gap2 > b2 * $
665	1609	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > b2 * a2
665	1609	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > 0.0
666	1619	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	DEF	$.dMin1 == $.dN1
667	1629	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin2 == $.dN2
667	1629	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	2 * $.work[nn - 5] < $.work[nn - 7]
667	1629	12	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	1	RET	2 * work[$ - 5] < work[$ - 7]
668	1632	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 5] > $.work[nn - 7]
668	1632	16	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 5] > work[$ - 7]
669	1637	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	RET	$ != 0.0
44441	1638	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
44441	1638	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
44441	1638	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
670	1639	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
670	1639	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
671	1644	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * $ < b2
671	1644	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * b1 < $
672	1653	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	1	DEF	gap2 > $ * a2
672	1653	16	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	1	DEF	gap2 > b2 * $
672	1653	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > b2 * a2
672	1653	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > 0.0
673	1679	8	EigenDecompositionImpl.java	updateSigma	THIS	EigenDecompositionImpl	1	DEF	tau < $.sigma
673	1679	8	EigenDecompositionImpl.java	updateSigma	tau	double	1	DEF	$ < sigma
44442	1704	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < m
44442	1704	8	EigenDecompositionImpl.java	findEigenVectors	m	int	0	NIL-FOR	i < $
44443	1713	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < m
44443	1713	8	EigenDecompositionImpl.java	findEigenVectors	m	int	0	NIL-FOR	i < $
44444	1741	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ < m - 1
44444	1741	8	EigenDecompositionImpl.java	findEigenvector	m	int	0	NIL-FOR	i < $ - 1
674	1744	12	EigenDecompositionImpl.java	findEigenvector	absG	double	0	DEF	$ < minG
674	1744	12	EigenDecompositionImpl.java	findEigenvector	minG	double	0	DEF	absG < $
44445	1756	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ >= 0
44446	1762	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ < m
44446	1762	8	EigenDecompositionImpl.java	findEigenvector	m	int	0	NIL-FOR	i < $
44447	1770	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ < m
44447	1770	8	EigenDecompositionImpl.java	findEigenvector	m	int	0	NIL-FOR	i < $
44448	1792	8	EigenDecompositionImpl.java	stationaryQuotientDifferenceWithShift	i	int	0	NIL-FOR	$ < nM1
44448	1792	8	EigenDecompositionImpl.java	stationaryQuotientDifferenceWithShift	nM1	int	0	NIL-FOR	i < $
44449	1818	8	EigenDecompositionImpl.java	progressiveQuotientDifferenceWithShift	i	int	0	NIL-FOR	$ >= 0
1091	177	4	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1091	177	4	EmbeddedRungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
44746	181	4	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
44746	181	4	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
1092	188	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
1092	188	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.requiresDenseOutput()
44747	208	4	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
44748	213	6	EmbeddedRungeKuttaIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
1093	215	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
1093	215	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1094	220	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1095	222	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.vecAbsoluteTolerance != null
44749	226	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
44749	226	12	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
44749	226	12	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
44750	238	8	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
44750	238	8	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
44751	240	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
44751	240	10	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
44751	240	10	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
44752	242	12	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
44752	242	12	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
44753	253	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
44753	253	8	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
44753	253	8	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
44754	255	10	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
44754	255	10	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
1096	263	8	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1097	267	10	EmbeddedRungeKuttaIntegrator.java	integrate	interpolator	AbstractStepInterpolator	1	DEF	manager.evaluateStep($)
1097	267	10	EmbeddedRungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolator)
1098	298	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
1099	303	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	manager.reset($.stepStart, y)
1099	303	6	EmbeddedRungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1099	303	6	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1099	303	6	EmbeddedRungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1100	309	6	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
894	141	12	EmpiricalDistributionImpl.java	load	THIS	EmpiricalDistributionImpl	0	DEF	$.sampleStats.getN() == 0
895	149	11	EmpiricalDistributionImpl.java	load	in	BufferedReader	0	DEF	$ != null
896	184	12	EmpiricalDistributionImpl.java	load	in	BufferedReader	0	DEF	$ != null
44551	353	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i< $.binCount - 1
44551	353	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$< binCount - 1
897	359	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	DEF	$.binStats.isEmpty()
44552	362	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
44552	362	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount
44553	386	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount-1
44553	386	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount-1
898	415	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	DEF	$.loaded
44554	424	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
44554	424	8	EmpiricalDistributionImpl.java	getNextValue	i	int	0	NIL-FOR	$ < binCount
899	425	11	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	RET	x <= $.upperBounds[i]
899	425	11	EmpiricalDistributionImpl.java	getNextValue	i	int	0	RET	x <= upperBounds[$]
899	425	11	EmpiricalDistributionImpl.java	getNextValue	x	double	0	RET	$ <= upperBounds[i]
900	427	15	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	0	RET	$.getN() > 0
901	428	19	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	1	RET	$.getStandardDeviation() > 0
978	57	8	Erf.java	erf	x	double	0	DEF	$ < 0
44800	81	4	EulerStepInterpolator.java	computeInterpolatedState	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
44800	81	4	EulerStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
44819	180	12	EventState.java	evaluateStep	i	int	0	NIL-FOR	$ < n
44819	180	12	EventState.java	evaluateStep	n	int	0	NIL-FOR	i < $
1149	188	16	EventState.java	evaluateStep	THIS	EventState	1	FunctionEvaluationException:RET	$.g0Positive ^ (gb >= 0)
1149	188	16	EventState.java	evaluateStep	gb	double	1	FunctionEvaluationException:RET	g0Positive ^ ($ >= 0)
1150	210	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	Math.abs(root - ta) <= $.convergence
1150	210	20	EventState.java	evaluateStep	root	double	1	DEF	Math.abs($ - ta) <= convergence
1150	210	20	EventState.java	evaluateStep	ta	double	1	DEF	Math.abs(root - $) <= convergence
1151	214	27	EventState.java	evaluateStep	THIS	EventState	0	RET	Double.isNaN($.previousEventTime)
1151	214	27	EventState.java	evaluateStep	THIS	EventState	0	RET	Math.abs($.previousEventTime - root) > $.convergence
1151	214	27	EventState.java	evaluateStep	root	double	0	RET	Math.abs(previousEventTime - $) > convergence
1152	217	24	EventState.java	evaluateStep	THIS	EventState	0	RET	$.pendingEvent
1152	217	24	EventState.java	evaluateStep	THIS	EventState	0	RET	Math.abs(t1 - $.pendingEventTime) <= $.convergence
1152	217	24	EventState.java	evaluateStep	t1	double	0	RET	Math.abs($ - pendingEventTime) <= convergence
1153	245	12	EventState.java	evaluateStep	cause	Throwable	1	DEF	$ != null
1153	245	12	EventState.java	evaluateStep	cause	Throwable	1	DEF	$ instanceof DerivativeException
1154	247	19	EventState.java	evaluateStep	cause	Throwable	0	DEF	$ instanceof EventException
1154	247	19	EventState.java	evaluateStep	cause	Throwable	0	DEF	$ != null
1155	278	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	$.pendingEvent
1156	309	8	EventState.java	reset	THIS	EventState	0	RET	$.pendingEvent
1157	313	8	EventState.java	reset	THIS	EventState	0	DEF	$.nextAction == EventHandler.RESET_STATE
384	52	8	ExponentialDistributionImpl.java	setMean	mean	double	0	IllegalArgumentException	$ <= 0.0
385	73	8	ExponentialDistributionImpl.java	density	x	Double	0	RET	$ < 0
386	96	8	ExponentialDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
387	119	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ < 0.0
387	119	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ > 1.0
388	122	15	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1.0
389	155	8	ExponentialDistributionImpl.java	getDomainUpperBound	p	double	1	RET	$ < .5
390	176	8	ExponentialDistributionImpl.java	getInitialDomain	p	double	1	RET	$ < .5
339	72	8	FDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
340	100	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
341	103	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
342	146	8	FDistributionImpl.java	getInitialDomain	d	double	0	DEF	$ > 2.0
343	160	8	FDistributionImpl.java	setNumeratorDegreesOfFreedom	degreesOfFreedom	double	0	IllegalArgumentException	$ <= 0.0
344	182	8	FDistributionImpl.java	setDenominatorDegreesOfFreedom	degreesOfFreedom	double	0	IllegalArgumentException	$ <= 0.0
44640	241	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (N >> 1)
44641	255	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (N >> 1)
996	310	8	FastFourierTransformer.java	fft	THIS	FastFourierTransformer	0	RET	f.$.length == 1
996	310	8	FastFourierTransformer.java	fft	f	double	0	RET	$.length == 1
44650	319	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
44651	329	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
44652	368	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
44653	371	12	FastFourierTransformer.java	fft	j	int	0	NIL-WHILE	$ >= k
44653	371	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	j >= $
44653	371	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	$ > 0
44654	378	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
44655	393	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
44656	395	12	FastFourierTransformer.java	fft	j	int	0	NIL-FOR	$ < N
44657	396	16	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	k < $
44657	396	16	FastFourierTransformer.java	fft	k	int	0	NIL-FOR	$ < i
999	418	8	FastFourierTransformer.java	computeOmega	n	int	0	DEF	$ == 0
1000	423	8	FastFourierTransformer.java	computeOmega	THIS	FastFourierTransformer	0	RET	n == $.omegaCount
1000	423	8	FastFourierTransformer.java	computeOmega	n	int	0	RET	$ == omegaCount
1001	424	8	FastFourierTransformer.java	computeOmega	THIS	FastFourierTransformer	0	RET	n + $.omegaCount == 0
1001	424	8	FastFourierTransformer.java	computeOmega	n	int	0	RET	$ + omegaCount == 0
44658	425	12	FastFourierTransformer.java	computeOmega	THIS	FastFourierTransformer	0	NIL-FOR	i < Math.abs($.omegaCount)
44658	425	12	FastFourierTransformer.java	computeOmega	i	int	0	NIL-FOR	$ < Math.abs(omegaCount)
44659	437	8	FastFourierTransformer.java	computeOmega	i	int	0	NIL-FOR	$ < Math.abs(n)
44659	437	8	FastFourierTransformer.java	computeOmega	n	int	0	NIL-FOR	i < Math.abs($)
1002	466	8	FastFourierTransformer.java	sample	n	int	0	DEF	$ <= 0
44660	474	8	FastFourierTransformer.java	sample	i	int	0	NIL-FOR	$ < n
44660	474	8	FastFourierTransformer.java	sample	n	int	0	NIL-FOR	i < $
44661	489	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
44661	489	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
44661	489	8	FastFourierTransformer.java	scaleArray	f	double	0	NIL-FOR	i < $.length
44662	504	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
44662	504	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
44662	504	8	FastFourierTransformer.java	scaleArray	f	Complex	0	NIL-FOR	i < $.length
1003	527	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	DEF	$.isPowerOf2(d.$.length)
1003	527	8	FastFourierTransformer.java	verifyDataSet	d	double	0	DEF	isPowerOf2($.length)
1004	540	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	DEF	$.isPowerOf2(o.$.length)
1004	540	8	FastFourierTransformer.java	verifyDataSet	o	Object	0	DEF	isPowerOf2($.length)
1005	556	8	FastFourierTransformer.java	verifyInterval	lower	double	0	DEF	$ >= upper
1005	556	8	FastFourierTransformer.java	verifyInterval	upper	double	0	DEF	lower >= $
44663	582	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize.$.length
44663	582	8	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize.length
44663	582	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $.length
1006	602	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == dimensionSize.$.length
1006	602	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	1	DEF	subVector.length == $.length
1006	602	8	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == dimensionSize.length
44664	604	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
44664	604	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
44664	604	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
1007	610	12	FastFourierTransformer.java	mdfft	forward	boolean	1	DEF	$
44665	615	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
44665	615	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
44665	615	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
1008	622	12	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == d
1008	622	12	FastFourierTransformer.java	mdfft	d	int	1	DEF	subVector.length == $
1008	622	12	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == d
44666	628	16	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize[subVector.$.length]
44666	628	16	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[subVector.length]
44666	628	16	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[subVector.length]
44666	628	16	FastFourierTransformer.java	mdfft	subVector	int[]	0	NIL-FOR	i < dimensionSize[$.length]
992	164	8	FastHadamardTransformer.java	fht	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
44642	175	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
44642	175	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
44643	183	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
44643	183	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
44644	189	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
44644	189	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
993	214	8	FastHadamardTransformer.java	fht	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
44645	225	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
44645	225	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
44646	233	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
44646	233	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
44647	239	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
44647	239	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
994	220	8	FastSineTransformer.java	fst	f	double	0	DEF	$[0] != 0.0
44648	234	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (N >> 1)
44649	246	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (N >> 1)
754	97	8	FirstMoment.java	increment	THIS	FirstMoment	0	DEF	$.n == 0
738	84	8	FourthMoment.java	increment	THIS	FourthMoment	0	DEF	$.n < 1
252	136	8	Fraction.java	Fraction	overflow	long	0	FractionConversionException	a0 > $
252	136	8	Fraction.java	Fraction	a0	long	0	FractionConversionException	$ > overflow
253	142	8	Fraction.java	Fraction	a0	long	0	RET	Math.abs($ - value) < epsilon
253	142	8	Fraction.java	Fraction	value	double	0	RET	Math.abs(a0 - $) < epsilon
253	142	8	Fraction.java	Fraction	epsilon	double	0	RET	Math.abs(a0 - value) < $
43956	158	8	Fraction.java	Fraction	stop	boolean	0	NIL-DOWHILE	$
254	164	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	p2 > $
254	164	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	q2 > $
254	164	12	Fraction.java	Fraction	p2	long	0	FractionConversionException	$ > overflow
254	164	12	Fraction.java	Fraction	q2	long	0	FractionConversionException	$ > overflow
255	169	12	Fraction.java	Fraction	convergent	double	1	DEF	Math.abs($ - value) > epsilon
255	169	12	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
255	169	12	Fraction.java	Fraction	n	int	1	DEF	$ < maxIterations
255	169	12	Fraction.java	Fraction	value	double	1	DEF	Math.abs(convergent - $) > epsilon
255	169	12	Fraction.java	Fraction	epsilon	double	1	DEF	Math.abs(convergent - value) > $
255	169	12	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
255	169	12	Fraction.java	Fraction	maxIterations	int	1	DEF	n < $
256	181	8	Fraction.java	Fraction	n	int	0	FractionConversionException	$ >= maxIterations
256	181	8	Fraction.java	Fraction	maxIterations	int	0	FractionConversionException	n >= $
257	185	8	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
257	185	8	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
258	204	8	Fraction.java	Fraction	den	int	0	DEF	$ == 0
259	208	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
260	209	12	Fraction.java	Fraction	num	int	0	DEF	$ == Integer.MIN_VALUE
260	209	12	Fraction.java	Fraction	den	int	0	DEF	$ == Integer.MIN_VALUE
261	218	8	Fraction.java	Fraction	d	int	0	DEF	$ > 1
262	224	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
263	238	8	Fraction.java	abs	THIS	Fraction	1	DEF	$.numerator >= 0
264	255	8	Fraction.java	compareTo	THIS	Fraction	0	DEF	$ != object
264	255	8	Fraction.java	compareTo	object	Fraction	0	DEF	this != $
265	259	12	Fraction.java	compareTo	first	double	1	DEF	$ < second
265	259	12	Fraction.java	compareTo	second	double	1	DEF	first < $
266	261	19	Fraction.java	compareTo	first	double	0	DEF	$ > second
266	261	19	Fraction.java	compareTo	second	double	0	DEF	first > $
267	290	8	Fraction.java	equals	THIS	Fraction	1	DEF	$ == other
267	290	8	Fraction.java	equals	other	Object	1	DEF	this == $
268	292	15	Fraction.java	equals	other	Object	1	DEF	$ == null
269	366	8	Fraction.java	negate	THIS	Fraction	0	DEF	$.numerator==Integer.MIN_VALUE
270	420	8	Fraction.java	addSub	fraction	Fraction	0	IllegalArgumentException	$ == null
271	424	8	Fraction.java	addSub	THIS	Fraction	0	RET	$.numerator == 0
272	427	8	Fraction.java	addSub	THIS	Fraction	0	RET	fraction.$.numerator == 0
272	427	8	Fraction.java	addSub	fraction	Fraction	0	RET	$.numerator == 0
273	433	8	Fraction.java	addSub	d1	int	0	RET	$==1
274	457	8	Fraction.java	addSub	w	BigInteger	0	DEF	$.bitLength() > 31
275	477	8	Fraction.java	multiply	fraction	Fraction	0	IllegalArgumentException	$ == null
276	480	8	Fraction.java	multiply	THIS	Fraction	0	RET	$.numerator == 0
276	480	8	Fraction.java	multiply	THIS	Fraction	0	RET	fraction.$.numerator == 0
276	480	8	Fraction.java	multiply	fraction	Fraction	0	RET	$.numerator == 0
277	503	8	Fraction.java	divide	fraction	Fraction	0	IllegalArgumentException	$ == null
278	506	8	Fraction.java	divide	THIS	Fraction	0	DEF	fraction.$.numerator == 0
278	506	8	Fraction.java	divide	fraction	Fraction	0	DEF	$.numerator == 0
279	525	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$ == 0
280	529	8	Fraction.java	getReducedFraction	numerator	int	0	RET	$==0
281	533	8	Fraction.java	getReducedFraction	numerator	int	0	DEF	($&1)==0
281	533	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
282	536	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$ < 0
283	537	12	Fraction.java	getReducedFraction	numerator	int	0	DEF	$==Integer.MIN_VALUE
283	537	12	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
243	203	8	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Fraction
244	205	15	FractionFormat.java	format	obj	Object	1	IllegalArgumentException	$ instanceof Number
245	247	8	FractionFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
246	270	8	FractionFormat.java	parse	num	Number	0	RET	$ == null
247	303	8	FractionFormat.java	parse	den	Number	0	RET	$ == null
248	332	8	FractionFormat.java	setDenominatorFormat	format	NumberFormat	0	IllegalArgumentException	$ == null
249	346	8	FractionFormat.java	setNumeratorFormat	format	NumberFormat	0	IllegalArgumentException	$ == null
250	377	9	FractionFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
250	377	9	FractionFormat.java	parseNextCharacter	n	int	0	DEF	index < $
43955	379	13	FractionFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
43955	379	13	FractionFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
43955	379	13	FractionFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
251	384	13	FractionFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
251	384	13	FractionFormat.java	parseNextCharacter	n	int	0	DEF	index < $
44523	76	8	Frequency.java	toString	iter	Iterator	0	NIL-WHILE	$.hasNext()
849	98	8	Frequency.java	addValue	v	Object	0	DEF	$ instanceof Integer
850	103	12	Frequency.java	addValue	count	Long	1	DEF	$ == null
44524	178	8	Frequency.java	getSumFreq	iterator	Iterator	0	NIL-WHILE	$.hasNext()
851	191	8	Frequency.java	getCount	v	Object	0	RET	$ instanceof Integer
852	197	12	Frequency.java	getCount	count	Long	0	DEF	$ != null
853	248	8	Frequency.java	getPct	THIS	Frequency	0	RET	$.getSumFreq() == 0
854	298	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	$.getSumFreq() == 0
855	301	8	Frequency.java	getCumFreq	v	Object	0	RET	$ instanceof Integer
856	305	8	Frequency.java	getCumFreq	c	Comparator	0	DEF	$ == null
857	312	12	Frequency.java	getCumFreq	value	Long	0	DEF	$ != null
858	319	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.firstKey()) < 0
858	319	8	Frequency.java	getCumFreq	c	Comparator	0	RET	$.compare(v, freqTable.firstKey()) < 0
858	319	8	Frequency.java	getCumFreq	v	Object	0	RET	c.compare($, freqTable.firstKey()) < 0
859	323	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.lastKey()) >= 0
859	323	8	Frequency.java	getCumFreq	c	Comparator	0	RET	$.compare(v, freqTable.lastKey()) >= 0
859	323	8	Frequency.java	getCumFreq	v	Object	0	RET	c.compare($, freqTable.lastKey()) >= 0
44525	328	8	Frequency.java	getCumFreq	values	Iterator	0	NIL-WHILE	$.hasNext()
860	330	12	Frequency.java	getCumFreq	nextValue	Object	1	DEF	c.compare(v, $) > 0
860	330	12	Frequency.java	getCumFreq	c	Comparator	1	DEF	$.compare(v, nextValue) > 0
860	330	12	Frequency.java	getCumFreq	v	Object	1	DEF	c.compare($, nextValue) > 0
861	389	8	Frequency.java	getCumPct	THIS	Frequency	0	RET	$.getSumFreq() == 0
864	80	8	GLSMultipleLinearRegression.java	getOmegaInverse	THIS	GLSMultipleLinearRegression	0	DEF	$.OmegaInverse == null
982	90	8	Gamma.java	logGamma	x	double	1	DEF	Double.isNaN($)
982	90	8	Gamma.java	logGamma	x	double	1	DEF	$ <= 0.0
44638	96	12	Gamma.java	logGamma	i	int	0	NIL-FOR	$ > 0
983	158	8	Gamma.java	regularizedGammaP	a	double	1	DEF	$ <= 0.0
983	158	8	Gamma.java	regularizedGammaP	a	double	1	DEF	Double.isNaN($)
983	158	8	Gamma.java	regularizedGammaP	x	double	1	DEF	$ < 0.0
983	158	8	Gamma.java	regularizedGammaP	x	double	1	DEF	Double.isNaN($)
984	160	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ == 0.0
985	162	15	Gamma.java	regularizedGammaP	a	double	1	DEF	$ >= 1.0
985	162	15	Gamma.java	regularizedGammaP	a	double	1	DEF	x > $
985	162	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ > a
44639	171	12	Gamma.java	regularizedGammaP	n	double	0	NIL-WHILE	$ < maxIterations
44639	171	12	Gamma.java	regularizedGammaP	an	double	0	NIL-WHILE	Math.abs($) > epsilon
44639	171	12	Gamma.java	regularizedGammaP	epsilon	double	0	NIL-WHILE	Math.abs(an) > $
44639	171	12	Gamma.java	regularizedGammaP	maxIterations	int	0	NIL-WHILE	n < $
986	179	12	Gamma.java	regularizedGammaP	n	double	1	MaxIterationsExceededException	$ >= maxIterations
986	179	12	Gamma.java	regularizedGammaP	maxIterations	int	1	MaxIterationsExceededException	n >= $
987	233	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ <= 0.0
987	233	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	Double.isNaN($)
987	233	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < 0.0
987	233	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	Double.isNaN($)
988	235	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ == 0.0
989	237	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	x < $
989	237	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ < 1.0
989	237	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < a
297	72	8	GammaDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
298	96	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
299	99	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
300	111	8	GammaDistributionImpl.java	setAlpha	alpha	double	0	IllegalArgumentException	$ <= 0.0
301	131	8	GammaDistributionImpl.java	setBeta	beta	double	0	IllegalArgumentException	$ <= 0.0
302	152	8	GammaDistributionImpl.java	density	x	Double	0	RET	$ < 0
303	186	8	GammaDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
304	211	8	GammaDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
44573	118	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	$.getCostEvaluations() < 2
44573	118	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	Math.abs($.cost) > $.convergence
44573	118	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	Math.abs(previous - $.cost) > ($.cost * $.steadyStateThreshold)
44573	118	8	GaussNewtonEstimator.java	estimate	previous	double	0	NIL-DOWHILE	Math.abs($ - cost) > (cost * steadyStateThreshold)
44574	124	12	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	i < $.measurements.$.length
44574	124	12	GaussNewtonEstimator.java	estimate	i	int	0	NIL-FOR	$ < measurements.length
942	125	16	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	DEF	$.measurements [i].isIgnored()
942	125	16	GaussNewtonEstimator.java	estimate	i	int	0	DEF	measurements [$].isIgnored()
44575	131	20	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	j < $.parameters.$.length
44575	131	20	GaussNewtonEstimator.java	estimate	j	int	0	NIL-FOR	$ < parameters.length
44576	137	20	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	k < $.parameters.$.length
44576	137	20	GaussNewtonEstimator.java	estimate	k	int	0	NIL-FOR	$ < parameters.length
44577	139	24	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	l < $.parameters.$.length
44577	139	24	GaussNewtonEstimator.java	estimate	l	int	0	NIL-FOR	$ < parameters.length
44578	157	16	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	i < $.parameters.$.length
44578	157	16	GaussNewtonEstimator.java	estimate	i	int	0	NIL-FOR	$ < parameters.length
44571	51	8	GeneticAlgorithm.java	evolve	current	Population	0	NIL-WHILE	condition.isSatisfied($)
44571	51	8	GeneticAlgorithm.java	evolve	condition	StoppingCondition	0	NIL-WHILE	$.isSatisfied(current)
44572	128	8	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	NIL-WHILE	$.getPopulationSize() < $ .getPopulationLimit()
939	134	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	Math.random() < $.getCrossoverRate()
940	141	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	Math.random() < $.getMutationRate()
941	152	12	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	DEF	$.getPopulationSize() < $ .getPopulationLimit()
752	102	8	GeometricMean.java	getResult	THIS	GeometricMean	1	RET	$.sumOfLogs.getN() > 0
753	188	8	GeometricMean.java	checkEmpty	THIS	GeometricMean	0	DEF	$.getN() > 0
44745	99	4	GillStepInterpolator.java	computeInterpolatedState	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
44745	99	4	GillStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
1018	176	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stabilityReduction	double	1	DEF	$ < 0.0001
1018	176	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stabilityReduction	double	1	DEF	$ > 0.9999
1019	211	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl1	double	1	DEF	$ < 0.0001
1019	211	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl1	double	1	DEF	$ > 0.9999
1020	217	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl2	double	1	DEF	$ < 0.0001
1020	217	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl2	double	1	DEF	$ > 0.9999
1021	223	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl3	double	1	DEF	$ > 0.9999
1021	223	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl3	double	1	DEF	$ < 0.0001
1022	229	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl4	double	1	DEF	$ > 999.9
1022	229	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl4	double	1	DEF	$ < 1.0001
1023	263	4	GraggBulirschStoerIntegrator.java	setOrderControl	maxOrder	int	0	DEF	$ <= 6
1023	263	4	GraggBulirschStoerIntegrator.java	setOrderControl	maxOrder	int	0	DEF	$ % 2 != 0
1024	267	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl1	double	1	DEF	$ > 0.9999
1024	267	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl1	double	1	DEF	$ < 0.0001
1025	273	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl2	double	1	DEF	$ > 0.9999
1025	273	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl2	double	1	DEF	$ < 0.0001
1026	313	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence.$.length != size
1026	313	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence == null
1026	313	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	DEF	sequence.length != $
1027	322	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
44689	324	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
44689	324	6	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
44690	329	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
44690	329	6	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
44691	337	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
44691	337	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
44692	342	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
44692	342	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
44693	344	6	GraggBulirschStoerIntegrator.java	initializeArrays	l	int	0	NIL-FOR	$ < k
44693	344	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	l < $
1028	367	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudif	int	1	DEF	$ >= 7
1028	367	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudif	int	1	DEF	$ <= 0
1029	381	4	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	1	DEF	$.vecAbsoluteTolerance == null
44694	382	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
44694	382	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
44694	382	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
44695	387	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
44695	387	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
44695	387	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
44696	425	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
44696	425	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
44696	425	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
44697	432	4	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	NIL-FOR	$ < n
44697	432	4	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	NIL-FOR	j < $
1030	434	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	DEF	2 * $ == n
1030	434	6	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	DEF	2 * j == $
44698	440	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
44698	440	6	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
44698	440	6	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
1031	449	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	$.performTest
1031	449	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	j <= $.maxChecks
1031	449	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	k < $.maxIter
1031	449	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	RET	$ <= maxChecks
1031	449	6	GraggBulirschStoerIntegrator.java	tryStep	k	int	0	RET	$ < maxIter
44699	451	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < y0.$.length
44699	451	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < y0.length
44699	451	8	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	l < $.length
44700	456	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < y0.$.length
44700	456	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < y0.length
44700	456	8	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	l < $.length
1032	460	8	GraggBulirschStoerIntegrator.java	tryStep	initialNorm	double	0	RET	deltaNorm > 4 * Math.max(1.0e-15, $)
1032	460	8	GraggBulirschStoerIntegrator.java	tryStep	deltaNorm	double	0	RET	$ > 4 * Math.max(1.0e-15, initialNorm)
44701	468	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
44701	468	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
44701	468	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
44702	487	4	GraggBulirschStoerIntegrator.java	extrapolate	j	int	0	NIL-FOR	$ < k
44702	487	4	GraggBulirschStoerIntegrator.java	extrapolate	k	int	0	NIL-FOR	j < $
44703	488	6	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
44703	488	6	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
44703	488	6	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
44704	496	4	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
44704	496	4	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
44704	496	4	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
44705	518	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length-1
44705	518	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length-1
44706	524	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length
44706	524	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length
44707	531	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < $.sequence[k]
44707	531	6	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < sequence[k]
44707	531	6	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	l < sequence[$]
1033	537	4	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1033	537	4	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
1034	543	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
44708	546	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < yMidDots.$.length
44708	546	6	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < yMidDots.length
44708	546	6	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	0	NIL-FOR	j < $.length
1035	567	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
1035	567	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
44709	588	4	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
1036	593	6	GraggBulirschStoerIntegrator.java	integrate	newStep	boolean	0	DEF	$
1037	598	8	GraggBulirschStoerIntegrator.java	integrate	firstStepAlreadyComputed	boolean	0	DEF	$
1038	602	8	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1039	608	10	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1040	621	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize > t
1040	621	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize < t
1040	621	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1040	621	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1040	621	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
1040	621	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
44710	630	6	GraggBulirschStoerIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
1041	635	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.tryStep(equations, $.stepStart, y, $.stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1041	635	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	tryStep(equations, stepStart, y, stepSize, $, scale, fk[$], ($ == 0) ? yMidDots[0] : diagonal[$-1], ($ == 0) ? y1 : y1Diag[$-1], yTmp)
1041	635	8	GraggBulirschStoerIntegrator.java	integrate	y1	double[]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? $ : y1Diag[k-1], yTmp)
1041	635	8	GraggBulirschStoerIntegrator.java	integrate	yTmp	double[]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], $)
1041	635	8	GraggBulirschStoerIntegrator.java	integrate	diagonal	double[][]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : $[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1041	635	8	GraggBulirschStoerIntegrator.java	integrate	y1Diag	double[][]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : $[k-1], yTmp)
1041	635	8	GraggBulirschStoerIntegrator.java	integrate	fk	double[][][]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, $[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1041	635	8	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? $[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1041	635	8	GraggBulirschStoerIntegrator.java	integrate	scale	double[]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, $, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1041	635	8	GraggBulirschStoerIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	1	DEF	tryStep($, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1041	635	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	1	DEF	tryStep(equations, stepStart, $, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1042	648	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 0
44711	657	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < y0.$.length
44711	657	12	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
44711	657	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
1043	663	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > maxError
1043	663	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > 1.0e15
1043	663	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ > 1
1043	663	12	GraggBulirschStoerIntegrator.java	integrate	maxError	double	1	DEF	error > $
1044	684	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1044	684	16	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
1045	687	18	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1046	696	20	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
1046	696	20	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
1047	702	22	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1047	702	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1047	702	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1048	714	16	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1049	722	18	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
1049	722	18	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
1050	727	20	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1050	727	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1050	727	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1051	738	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > 1.0
1052	740	18	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1052	740	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1052	740	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1053	751	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ <= 1.0
1053	751	16	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1053	751	16	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1054	765	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.denseOutput
1054	765	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
44712	768	8	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
44712	768	8	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
44713	777	8	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < mu
44713	777	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	NIL-FOR	l < $
44714	783	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
44714	783	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
44714	783	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
44715	786	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k - l2
44715	786	10	GraggBulirschStoerIntegrator.java	integrate	l2	int	0	NIL-FOR	j <= k - $
44715	786	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $ - l2
44716	789	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
44716	789	12	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
44716	789	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
44717	794	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
44717	794	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
44717	794	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
44718	799	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
44718	799	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
44719	800	12	GraggBulirschStoerIntegrator.java	integrate	m	int	0	NIL-FOR	$ >= 2 * (l + 1)
44719	800	12	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	m >= 2 * ($ + 1)
44720	801	14	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
44720	801	14	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
44720	801	14	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
1055	809	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	DEF	$ >= 0
1056	816	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.useInterpolationError
1057	821	12	GraggBulirschStoerIntegrator.java	integrate	interpError	double	0	DEF	$ > 10.0
1058	828	10	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1059	830	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.evaluateStep(interpolator)
1059	830	12	GraggBulirschStoerIntegrator.java	integrate	interpolator	AbstractStepInterpolator	0	DEF	eventsHandlersManager.evaluateStep($)
1060	838	8	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1061	846	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1062	853	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.stop()
1063	864	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.reset($.stepStart, y)
1063	864	8	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1063	864	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	eventsHandlersManager.reset(stepStart, $)
1064	871	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ == 1
1065	873	10	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
1066	876	15	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ <= targetIter
1066	876	15	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k <= $
1067	878	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k-1] < $.orderControl1 * $.costPerTimeUnit[k]
1067	878	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1068	880	17	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
1068	880	17	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
1069	885	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k-2] < $.orderControl1 * $.costPerTimeUnit[k-1]
1069	885	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$-2] < orderControl1 * costPerTimeUnit[$-1]
1069	885	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 2
1070	889	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[optimalIter]
1070	889	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	0	DEF	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[$]
1070	889	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[optimalIter]
1071	894	8	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	1	DEF	$
1072	901	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	1	DEF	$ <= k
1072	901	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	optimalIter <= $
1073	904	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
1073	904	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
1073	904	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ < targetIter
1073	904	12	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k < $
1074	923	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1075	929	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	1	DEF	$
1105	112	4	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ < 0
1106	119	6	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms != null
44780	121	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
44780	121	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
44780	121	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
44781	125	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
44781	125	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
44781	125	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
1107	132	6	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ <= 4
44782	136	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.errfac.$.length
44782	136	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < errfac.length
44783	140	10	GraggBulirschStoerStepInterpolator.java	resetTables	j	int	0	NIL-FOR	$ <= i
44783	140	10	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	j <= $
1108	211	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	1	DEF	interpolator.$.polynoms == null
1108	211	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	interpolator	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms == null
44784	216	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.polynoms.$.length
44784	216	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	i	int	0	NIL-FOR	$ < polynoms.length
1109	238	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms.$.length <= (mu + 4)
1109	238	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms == null
1109	238	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	polynoms.length <= ($ + 4)
44785	244	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
44785	244	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	i	int	0	NIL-FOR	$ < currentState.length
1110	257	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	RET	$ < 0
1111	265	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 0
1112	269	8	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 1
1113	273	10	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 2
44786	277	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	j	int	0	NIL-FOR	$ <= mu
44786	277	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	NIL-FOR	j <= $
1114	297	4	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree >= 5
44787	298	6	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
44787	298	6	GraggBulirschStoerStepInterpolator.java	estimateError	i	int	0	NIL-FOR	$ < currentState.length
44788	323	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < dimension
44788	323	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedState	dimension	int	0	NIL-FOR	i < $
1115	332	8	GraggBulirschStoerStepInterpolator.java	computeInterpolatedState	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree > 3
44789	335	12	GraggBulirschStoerStepInterpolator.java	computeInterpolatedState	j	int	0	NIL-FOR	$ > 3
1116	346	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedState	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.h == 0
44790	365	4	GraggBulirschStoerStepInterpolator.java	writeExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
44790	365	4	GraggBulirschStoerStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ <= currentDegree
44791	366	6	GraggBulirschStoerStepInterpolator.java	writeExternal	l	int	0	NIL-FOR	$ < dimension
44791	366	6	GraggBulirschStoerStepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	l < $
44792	386	4	GraggBulirschStoerStepInterpolator.java	readExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
44792	386	4	GraggBulirschStoerStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ <= currentDegree
44793	387	6	GraggBulirschStoerStepInterpolator.java	readExternal	l	int	0	NIL-FOR	$ < dimension
44793	387	6	GraggBulirschStoerStepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	l < $
44817	112	4	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	j < y0.$.length
44817	112	4	HighamHall54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
44817	112	4	HighamHall54Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
44818	114	6	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	l < $.staticE.$.length
44818	114	6	HighamHall54Integrator.java	estimateError	l	int	0	NIL-FOR	$ < staticE.length
44816	83	4	HighamHall54StepInterpolator.java	computeInterpolatedState	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
44816	83	4	HighamHall54StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
368	55	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	IllegalArgumentException	numberOfSuccesses > $
368	55	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	numberOfSuccesses	int	0	IllegalArgumentException	$ > populationSize
369	60	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	IllegalArgumentException	sampleSize > $
369	60	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	sampleSize	int	0	IllegalArgumentException	$ > populationSize
370	82	8	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x < $[0]
370	82	8	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < domain[0]
371	84	15	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x >= $[1]
371	84	15	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= domain[1]
372	194	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x > $[1]
372	194	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x < $[0]
372	194	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ > domain[1]
372	194	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ < domain[0]
373	225	8	HypergeometricDistributionImpl.java	setNumberOfSuccesses	num	int	0	IllegalArgumentException	$ < 0
374	238	8	HypergeometricDistributionImpl.java	setPopulationSize	size	int	0	IllegalArgumentException	$ <= 0
375	251	8	HypergeometricDistributionImpl.java	setSampleSize	size	int	0	IllegalArgumentException	$ < 0
376	272	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x < $[0]
376	272	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ < domain[0]
377	274	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x > $[1]
377	274	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ > domain[1]
43960	300	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x0	int	0	NIL-WHILE	$ != x1
43960	300	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x1	int	0	NIL-WHILE	x0 != $
747	91	8	Kurtosis.java	increment	THIS	Kurtosis	1	DEF	$.incMoment
748	105	8	Kurtosis.java	getResult	THIS	Kurtosis	0	DEF	$.moment.getN() > 3
749	107	16	Kurtosis.java	getResult	THIS	Kurtosis	1	DEF	$.moment.$.n <= 3
749	107	16	Kurtosis.java	getResult	variance	double	1	DEF	$ < 10E-20
750	124	8	Kurtosis.java	clear	THIS	Kurtosis	1	DEF	$.incMoment
751	162	8	Kurtosis.java	evaluate	THIS	Kurtosis	0	DEF	$.test(values, begin, length)
751	162	8	Kurtosis.java	evaluate	values	double[]	0	DEF	test($, begin, length)
751	162	8	Kurtosis.java	evaluate	begin	int	0	DEF	test(values, $, length)
751	162	8	Kurtosis.java	evaluate	length	int	0	DEF	test(values, begin, $)
751	162	8	Kurtosis.java	evaluate	length	int	0	DEF	$ > 3
44503	173	12	Kurtosis.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
44503	173	12	Kurtosis.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
44503	173	12	Kurtosis.java	evaluate	length	int	0	NIL-FOR	i < begin + $
675	81	8	LUDecompositionImpl.java	LUDecompositionImpl	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
44450	93	8	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
44450	93	8	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
44451	100	8	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	$ < m
44451	100	8	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	col < $
44452	105	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < col
44452	105	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	row < $
44453	108	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < row
44453	108	16	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	i < $
44454	117	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
44454	117	12	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
44455	120	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < col
44455	120	16	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	i < $
676	126	16	LUDecompositionImpl.java	LUDecompositionImpl	sum	double	0	DEF	Math.abs($) > largest
676	126	16	LUDecompositionImpl.java	LUDecompositionImpl	largest	double	0	DEF	Math.abs(sum) > $
677	133	12	LUDecompositionImpl.java	LUDecompositionImpl	THIS	LUDecompositionImpl	0	RET	Math.abs($.lu[max][col]) < singularityThreshold
677	133	12	LUDecompositionImpl.java	LUDecompositionImpl	max	int	0	RET	Math.abs(lu[$][col]) < singularityThreshold
677	133	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	RET	Math.abs(lu[max][$]) < singularityThreshold
677	133	12	LUDecompositionImpl.java	LUDecompositionImpl	singularityThreshold	double	0	RET	Math.abs(lu[max][col]) < $
678	139	12	LUDecompositionImpl.java	LUDecompositionImpl	max	int	0	DEF	$ != col
678	139	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	DEF	max != $
44456	141	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < m
44456	141	16	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	i < $
44457	154	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
44457	154	12	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
679	164	8	LUDecompositionImpl.java	getL	THIS	LUDecompositionImpl	0	DEF	$.cachedL == null
679	164	8	LUDecompositionImpl.java	getL	THIS	LUDecompositionImpl	0	DEF	$.singular
44458	167	12	LUDecompositionImpl.java	getL	i	int	0	NIL-FOR	$ < m
44458	167	12	LUDecompositionImpl.java	getL	m	int	0	NIL-FOR	i < $
44459	169	16	LUDecompositionImpl.java	getL	j	int	0	NIL-FOR	$ < i
44459	169	16	LUDecompositionImpl.java	getL	i	int	0	NIL-FOR	j < $
680	181	8	LUDecompositionImpl.java	getU	THIS	LUDecompositionImpl	0	DEF	$.singular
680	181	8	LUDecompositionImpl.java	getU	THIS	LUDecompositionImpl	0	DEF	$.cachedU == null
44460	184	12	LUDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < m
44460	184	12	LUDecompositionImpl.java	getU	m	int	0	NIL-FOR	i < $
44461	186	16	LUDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < m
44461	186	16	LUDecompositionImpl.java	getU	m	int	0	NIL-FOR	j < $
681	197	8	LUDecompositionImpl.java	getP	THIS	LUDecompositionImpl	0	DEF	$.singular
681	197	8	LUDecompositionImpl.java	getP	THIS	LUDecompositionImpl	0	DEF	$.cachedP == null
44462	200	12	LUDecompositionImpl.java	getP	i	int	0	NIL-FOR	$ < m
44462	200	12	LUDecompositionImpl.java	getP	m	int	0	NIL-FOR	i < $
682	215	8	LUDecompositionImpl.java	getDeterminant	THIS	LUDecompositionImpl	1	RET	$.singular
44463	220	12	LUDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < m
44463	220	12	LUDecompositionImpl.java	getDeterminant	m	int	0	NIL-FOR	i < $
1264	62	8	LaguerreSolver.java	LaguerreSolver	f	UnivariateRealFunction	1	DEF	$ instanceof PolynomialFunction
1265	122	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1265	122	8	LaguerreSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1266	123	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1266	123	8	LaguerreSolver.java	solve	max	double	0	RET	f.value($) == 0.0
1267	124	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
1267	124	8	LaguerreSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
1268	128	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	1	RET	$.isBracketing(min, initial, f)
1268	128	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
1268	128	8	LaguerreSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
1268	128	8	LaguerreSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
1269	160	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	DEF	$ instanceof PolynomialFunction
1270	165	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1270	165	8	LaguerreSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1271	166	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1271	166	8	LaguerreSolver.java	solve	max	double	0	RET	f.value($) == 0.0
44856	171	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-FOR	i < coefficients.$.length
44856	171	8	LaguerreSolver.java	solve	i	int	0	NIL-FOR	$ < coefficients.length
44856	171	8	LaguerreSolver.java	solve	coefficients	double[]	0	NIL-FOR	i < $.length
1272	176	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.isRootOK(min, max, z)
1272	176	8	LaguerreSolver.java	solve	z	Complex	0	RET	isRootOK(min, max, $)
1272	176	8	LaguerreSolver.java	solve	min	double	0	RET	isRootOK($, max, z)
1272	176	8	LaguerreSolver.java	solve	max	double	0	RET	isRootOK(min, $, z)
44857	183	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-FOR	i < root.$.length
44857	183	8	LaguerreSolver.java	solve	i	int	0	NIL-FOR	$ < root.length
44857	183	8	LaguerreSolver.java	solve	root	Complex[]	0	NIL-FOR	i < $.length
1273	184	12	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.isRootOK(min, max, root[i])
1273	184	12	LaguerreSolver.java	solve	i	int	0	RET	isRootOK(min, max, root[$])
1273	184	12	LaguerreSolver.java	solve	root	Complex[]	0	RET	isRootOK(min, max, $[i])
1273	184	12	LaguerreSolver.java	solve	min	double	0	RET	isRootOK($, max, root[i])
1273	184	12	LaguerreSolver.java	solve	max	double	0	RET	isRootOK(min, $, root[i])
44858	228	8	LaguerreSolver.java	solveAll	THIS	LaguerreSolver	0	NIL-FOR	i < c.$.length
44858	228	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ < c.length
44858	228	8	LaguerreSolver.java	solveAll	c	Complex[]	0	NIL-FOR	i < $.length
1274	252	8	LaguerreSolver.java	solveAll	n	int	0	IllegalArgumentException	$ < 1
44859	257	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ <= n
44859	257	8	LaguerreSolver.java	solveAll	n	int	0	NIL-FOR	i <= $
44860	263	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ < n
44860	263	8	LaguerreSolver.java	solveAll	n	int	0	NIL-FOR	i < $
44861	270	12	LaguerreSolver.java	solveAll	j	int	0	NIL-FOR	$ >= 0
1275	300	8	LaguerreSolver.java	solve	n	int	0	IllegalArgumentException	$ < 1
44862	318	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-WHILE	i <= $.maximalIterationCount
44862	318	8	LaguerreSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
44863	324	12	LaguerreSolver.java	solve	j	int	0	NIL-FOR	$ >= 0
1276	334	12	LaguerreSolver.java	solve	tolerance	double	0	RET	(z.subtract(oldz)).abs() <= $
1276	334	12	LaguerreSolver.java	solve	z	Complex	0	RET	($.subtract(oldz)).abs() <= tolerance
1276	334	12	LaguerreSolver.java	solve	oldz	Complex	0	RET	(z.subtract($)).abs() <= tolerance
1277	339	12	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	pv.abs() <= $.functionValueAccuracy
1277	339	12	LaguerreSolver.java	solve	pv	Complex	0	RET	$.abs() <= functionValueAccuracy
1278	357	12	LaguerreSolver.java	solve	denominator	Complex	1	DEF	$.equals(new Complex(0.0, 0.0))
44588	238	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.solvedCols
44588	238	6	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < solvedCols
946	243	6	LevenbergMarquardtEstimator.java	estimate	firstIteration	boolean	0	DEF	$
44589	248	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
44589	248	8	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < cols
947	250	10	LevenbergMarquardtEstimator.java	estimate	dk	double	0	DEF	$ == 0
948	266	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	$.cost != 0
44590	267	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44590	267	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
949	270	10	LevenbergMarquardtEstimator.java	estimate	s	double	0	DEF	$ != 0
44591	272	12	LevenbergMarquardtEstimator.java	estimate	i	int	0	NIL-FOR	$ <= j
44591	272	12	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	i <= $
950	279	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	maxCosine <= $.orthoTolerance
950	279	6	LevenbergMarquardtEstimator.java	estimate	maxCosine	double	0	RET	$ <= orthoTolerance
44592	284	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.cols
44592	284	6	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < cols
44593	289	6	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	NIL-FOR	$ < 1.0e-4
44594	292	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44594	292	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
44595	306	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44595	306	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
951	316	8	LevenbergMarquardtEstimator.java	estimate	firstIteration	boolean	0	DEF	$
952	325	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	0.1 * $.cost < previousCost
952	325	8	LevenbergMarquardtEstimator.java	estimate	previousCost	double	0	DEF	0.1 * cost < $
44596	332	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44596	332	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
44597	336	10	LevenbergMarquardtEstimator.java	estimate	i	int	0	NIL-FOR	$ <= j
44597	336	10	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	i <= $
44598	341	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44598	341	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
953	354	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	DEF	$ <= 0.25
954	357	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	0.1 * $.cost >= previousCost
954	357	10	LevenbergMarquardtEstimator.java	estimate	tmp	double	0	DEF	$ < 0.1
954	357	10	LevenbergMarquardtEstimator.java	estimate	previousCost	double	0	DEF	0.1 * cost >= $
955	362	15	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
955	362	15	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	DEF	$ >= 0.75
956	368	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	DEF	$ >= 1.0e-4
44599	372	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
44599	372	10	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < cols
44600	380	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44600	380	10	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
957	390	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	Math.abs(actRed) <= $.costRelativeTolerance
957	390	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	delta <= $.parRelativeTolerance * xNorm
957	390	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	preRed <= $.costRelativeTolerance
957	390	8	LevenbergMarquardtEstimator.java	estimate	actRed	double	0	RET	Math.abs($) <= costRelativeTolerance
957	390	8	LevenbergMarquardtEstimator.java	estimate	preRed	double	0	RET	$ <= costRelativeTolerance
957	390	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	RET	$ <= 2.0
957	390	8	LevenbergMarquardtEstimator.java	estimate	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
957	390	8	LevenbergMarquardtEstimator.java	estimate	xNorm	double	0	RET	delta <= parRelativeTolerance * $
958	399	8	LevenbergMarquardtEstimator.java	estimate	actRed	double	1	EstimationException	Math.abs($) <= 2.2204e-16
958	399	8	LevenbergMarquardtEstimator.java	estimate	preRed	double	1	EstimationException	$ <= 2.2204e-16
958	399	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	EstimationException	$ <= 2.0
959	404	15	LevenbergMarquardtEstimator.java	estimate	delta	double	1	EstimationException	$ <= 2.2204e-16 * xNorm
959	404	15	LevenbergMarquardtEstimator.java	estimate	xNorm	double	1	EstimationException	delta <= 2.2204e-16 * $
960	409	15	LevenbergMarquardtEstimator.java	estimate	maxCosine	double	0	EstimationException	$ <= 2.2204e-16
44601	448	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.rank
44601	448	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
44602	451	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.cols
44602	451	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < cols
44603	454	4	LevenbergMarquardtEstimator.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
44604	457	6	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
44604	457	6	LevenbergMarquardtEstimator.java	determineLMParameter	k	int	0	NIL-FOR	i < $
44605	466	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44605	466	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
961	474	4	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
961	474	4	LevenbergMarquardtEstimator.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
962	483	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.rank == $.solvedCols
44606	484	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44606	484	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
44607	489	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44607	489	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
44608	492	8	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
44608	492	8	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	i < $
44609	504	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44609	504	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
44610	507	6	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
44610	507	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
963	515	4	LevenbergMarquardtEstimator.java	determineLMParameter	paru	double	0	DEF	$ == 0
964	523	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
44611	527	4	LevenbergMarquardtEstimator.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
965	530	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
44612	534	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44612	534	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
44613	541	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44613	541	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
966	553	6	LevenbergMarquardtEstimator.java	determineLMParameter	previousFP	double	0	RET	fp <= $
966	553	6	LevenbergMarquardtEstimator.java	determineLMParameter	previousFP	double	0	RET	$ < 0
966	553	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
966	553	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	Math.abs($) <= 0.1 * delta
966	553	6	LevenbergMarquardtEstimator.java	determineLMParameter	parl	double	0	RET	$ == 0
966	553	6	LevenbergMarquardtEstimator.java	determineLMParameter	delta	double	0	RET	Math.abs(fp) <= 0.1 * $
44614	559	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44614	559	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
44615	563	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44615	563	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
44616	567	8	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
44616	567	8	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
44617	572	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44617	572	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
967	579	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	1	DEF	$ > 0
968	581	13	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	DEF	$ < 0
44618	616	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44618	616	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
44619	618	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
44619	618	6	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
44620	626	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44620	626	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
969	632	6	LevenbergMarquardtEstimator.java	determineLMDirection	dpj	double	0	DEF	$ != 0
44621	641	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.solvedCols
44621	641	6	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
970	646	8	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
970	646	8	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
971	650	10	LevenbergMarquardtEstimator.java	determineLMDirection	rkk	double	1	DEF	Math.abs($) < Math.abs(lmDiag[k])
971	650	10	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	1	DEF	Math.abs(rkk) < Math.abs(lmDiag[$])
971	650	10	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	1	DEF	Math.abs(rkk) < Math.abs($[k])
44622	668	10	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
44622	668	10	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
44623	689	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44623	689	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
972	690	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	DEF	nSing == $.solvedCols
972	690	6	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
972	690	6	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
972	690	6	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
973	693	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	DEF	nSing < $.solvedCols
973	693	6	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
974	697	4	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ > 0
44624	698	6	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
44625	701	8	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
44625	701	8	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
44626	709	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.lmDir.$.length
44626	709	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
44627	740	4	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
44627	740	4	LevenbergMarquardtEstimator.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
44628	743	6	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
44628	743	6	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
44629	751	4	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
44629	751	4	LevenbergMarquardtEstimator.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
44630	756	6	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.cols
44630	756	6	LevenbergMarquardtEstimator.java	qrDecomposition	i	int	0	NIL-FOR	$ < cols
44631	759	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
44631	759	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
975	763	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	EstimationException	Double.isInfinite($)
975	763	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	EstimationException	Double.isNaN($)
976	767	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
976	767	8	LevenbergMarquardtEstimator.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
977	772	6	LevenbergMarquardtEstimator.java	qrDecomposition	ak2	double	0	RET	$ == 0
44632	792	6	LevenbergMarquardtEstimator.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
44633	795	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
44633	795	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
44634	799	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
44634	799	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
44635	816	4	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
44635	816	4	LevenbergMarquardtEstimator.java	qTy	k	int	0	NIL-FOR	$ < cols
44636	820	6	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.rows
44636	820	6	LevenbergMarquardtEstimator.java	qTy	i	int	0	NIL-FOR	$ < rows
44637	824	6	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.rows
44637	824	6	LevenbergMarquardtEstimator.java	qTy	i	int	0	NIL-FOR	$ < rows
0	63	12	MathException.java	translate	THIS	MathException	0	DEF	$.cachedResources == null
0	63	12	MathException.java	translate	THIS	MathException	0	DEF	$.cachedResources.getLocale().equals(locale)
0	63	12	MathException.java	translate	locale	Locale	0	DEF	cachedResources.getLocale().equals($)
1	69	12	MathException.java	translate	THIS	MathException	0	RET	$.cachedResources.getLocale().getLanguage().equals(locale.getLanguage())
1	69	12	MathException.java	translate	locale	Locale	0	RET	cachedResources.getLocale().getLanguage().equals($.getLanguage())
886	64	12	MathRuntimeException.java	translate	THIS	MathRuntimeException	0	DEF	$.cachedResources == null
886	64	12	MathRuntimeException.java	translate	THIS	MathRuntimeException	0	DEF	$.cachedResources.getLocale().equals(locale)
886	64	12	MathRuntimeException.java	translate	locale	Locale	0	DEF	cachedResources.getLocale().equals($)
887	70	12	MathRuntimeException.java	translate	THIS	MathRuntimeException	0	RET	$.cachedResources.getLocale().getLanguage().equals(locale.getLanguage())
887	70	12	MathRuntimeException.java	translate	locale	Locale	0	RET	cachedResources.getLocale().getLanguage().equals($.getLanguage())
65	78	8	MathUtils.java	addAndCheck	s	long	0	ArithmeticException	$ < Integer.MIN_VALUE
65	78	8	MathUtils.java	addAndCheck	s	long	0	ArithmeticException	$ > Integer.MAX_VALUE
66	111	8	MathUtils.java	addAndCheck	a	long	1	DEF	$ > b
66	111	8	MathUtils.java	addAndCheck	b	long	1	DEF	a > $
67	117	12	MathUtils.java	addAndCheck	a	long	1	ArithmeticException	$ < 0
68	118	16	MathUtils.java	addAndCheck	b	long	1	ArithmeticException	$ < 0
69	120	20	MathUtils.java	addAndCheck	a	long	1	DEF	Long.MIN_VALUE - b <= $
69	120	20	MathUtils.java	addAndCheck	b	long	1	DEF	Long.MIN_VALUE - $ <= a
70	134	16	MathUtils.java	addAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE - b
70	134	16	MathUtils.java	addAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE - $
71	171	8	MathUtils.java	binomialCoefficient	n	int	0	IllegalArgumentException	$ < k
71	171	8	MathUtils.java	binomialCoefficient	k	int	0	IllegalArgumentException	n < $
72	175	8	MathUtils.java	binomialCoefficient	n	int	0	IllegalArgumentException	$ < 0
73	179	8	MathUtils.java	binomialCoefficient	n	int	0	RET	$ == k
73	179	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 0
73	179	8	MathUtils.java	binomialCoefficient	k	int	0	RET	n == $
74	182	8	MathUtils.java	binomialCoefficient	n	int	0	RET	k == $ - 1
74	182	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 1
74	182	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == n - 1
75	187	8	MathUtils.java	binomialCoefficient	result	long	0	ArithmeticException	$ == Long.MAX_VALUE
76	239	8	MathUtils.java	binomialCoefficientLog	n	int	0	IllegalArgumentException	$ < k
76	239	8	MathUtils.java	binomialCoefficientLog	k	int	0	IllegalArgumentException	n < $
77	243	8	MathUtils.java	binomialCoefficientLog	n	int	0	IllegalArgumentException	$ < 0
78	247	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ == k
78	247	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 0
78	247	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	n == $
79	250	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	k == $ - 1
79	250	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == n - 1
79	250	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 1
43946	256	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n
43946	256	8	MathUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $
43947	261	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n - k
43947	261	8	MathUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $ - k
43947	261	8	MathUtils.java	binomialCoefficientLog	k	int	0	NIL-FOR	i <= n - $
80	302	8	MathUtils.java	equals	x	double[]	0	RET	$ == null
80	302	8	MathUtils.java	equals	y	double[]	0	RET	$ == null
81	305	8	MathUtils.java	equals	THIS	MathUtils	0	RET	x.$.length != y.$.length
81	305	8	MathUtils.java	equals	x	double[]	0	RET	$.length != y.length
81	305	8	MathUtils.java	equals	y	double[]	0	RET	x.length != $.length
43948	308	8	MathUtils.java	equals	THIS	MathUtils	0	NIL-FOR	i < x.$.length
43948	308	8	MathUtils.java	equals	i	int	0	NIL-FOR	$ < x.length
43948	308	8	MathUtils.java	equals	x	double[]	0	NIL-FOR	i < $.length
82	309	12	MathUtils.java	equals	THIS	MathUtils	0	RET	$.equals(x[i], y[i])
82	309	12	MathUtils.java	equals	i	int	0	RET	equals(x[$], y[$])
82	309	12	MathUtils.java	equals	x	double[]	0	RET	equals($[i], y[i])
82	309	12	MathUtils.java	equals	y	double[]	0	RET	equals(x[i], $[i])
83	340	8	MathUtils.java	factorial	result	long	0	ArithmeticException	$ == Long.MAX_VALUE
84	368	8	MathUtils.java	factorialDouble	n	int	0	IllegalArgumentException	$ < 0
85	388	8	MathUtils.java	factorialLog	n	int	0	IllegalArgumentException	$ < 0
43949	392	8	MathUtils.java	factorialLog	i	int	0	NIL-FOR	$ <= n
43949	392	8	MathUtils.java	factorialLog	n	int	0	NIL-FOR	i <= $
86	412	8	MathUtils.java	gcd	u	int	0	RET	$ * v == 0
86	412	8	MathUtils.java	gcd	v	int	0	RET	u * $ == 0
87	420	8	MathUtils.java	gcd	u	int	0	DEF	$ > 0
88	423	8	MathUtils.java	gcd	v	int	0	DEF	$ > 0
43950	428	8	MathUtils.java	gcd	k	int	0	NIL-WHILE	$ < 31
43950	428	8	MathUtils.java	gcd	u	int	0	NIL-WHILE	($ & 1) == 0
43950	428	8	MathUtils.java	gcd	v	int	0	NIL-WHILE	($ & 1) == 0
89	434	8	MathUtils.java	gcd	k	int	0	ArithmeticException	$ == 31
43951	442	8	MathUtils.java	gcd	t	int	0	NIL-DOWHILE	$ != 0
43952	445	12	MathUtils.java	gcd	t	int	0	NIL-WHILE	($ & 1) == 0
90	449	12	MathUtils.java	gcd	t	int	1	DEF	$ > 0
91	503	8	MathUtils.java	indicator	x	double	0	RET	Double.isNaN($)
92	517	8	MathUtils.java	indicator	x	float	0	RET	Float.isNaN($)
93	599	8	MathUtils.java	mulAndCheck	m	long	0	ArithmeticException	$ > Integer.MAX_VALUE
93	599	8	MathUtils.java	mulAndCheck	m	long	0	ArithmeticException	$ < Integer.MIN_VALUE
94	618	8	MathUtils.java	mulAndCheck	a	long	1	DEF	$ > b
94	618	8	MathUtils.java	mulAndCheck	b	long	1	DEF	a > $
95	622	12	MathUtils.java	mulAndCheck	a	long	1	ArithmeticException	$ < 0
96	623	16	MathUtils.java	mulAndCheck	b	long	1	ArithmeticException	$ < 0
97	625	20	MathUtils.java	mulAndCheck	a	long	1	DEF	$ >= Long.MAX_VALUE / b
97	625	20	MathUtils.java	mulAndCheck	b	long	1	DEF	a >= Long.MAX_VALUE / $
98	630	23	MathUtils.java	mulAndCheck	b	long	1	ArithmeticException	$ > 0
99	632	20	MathUtils.java	mulAndCheck	a	long	1	DEF	Long.MIN_VALUE / b <= $
99	632	20	MathUtils.java	mulAndCheck	b	long	1	DEF	Long.MIN_VALUE / $ <= a
100	642	19	MathUtils.java	mulAndCheck	a	long	1	ArithmeticException	$ > 0
101	647	16	MathUtils.java	mulAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE / b
101	647	16	MathUtils.java	mulAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE / $
102	680	8	MathUtils.java	nextAfter	d	double	1	RET	Double.isInfinite($)
102	680	8	MathUtils.java	nextAfter	d	double	1	RET	Double.isNaN($)
103	682	15	MathUtils.java	nextAfter	d	double	0	RET	$ == 0
104	694	8	MathUtils.java	nextAfter	d	double	1	RET	$ * (direction - $) >= 0
104	694	8	MathUtils.java	nextAfter	direction	double	1	RET	d * ($ - d) >= 0
105	696	16	MathUtils.java	nextAfter	mantissa	long	1	RET	$ == 0x000fffffffffffffL
106	705	16	MathUtils.java	nextAfter	mantissa	long	1	RET	$ == 0L
107	729	8	MathUtils.java	scalb	d	double	0	RET	$ == 0
107	729	8	MathUtils.java	scalb	d	double	0	RET	Double.isInfinite($)
107	729	8	MathUtils.java	scalb	d	double	0	RET	Double.isNaN($)
108	799	12	MathUtils.java	round	x	double	1	RET	Double.isInfinite($)
109	854	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
110	864	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
111	873	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
112	882	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
113	884	19	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ < 0.5
114	888	16	MathUtils.java	roundUnscaled	unscaled	double	1	DEF	Math.floor($) / 2.0 == Math.floor(Math .floor($) / 2.0)
115	900	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ >= 0.5
116	908	12	MathUtils.java	roundUnscaled	unscaled	double	0	ArithmeticException	$ != Math.floor($)
117	948	8	MathUtils.java	sign	x	double	0	RET	Double.isNaN($)
118	966	8	MathUtils.java	sign	x	float	0	RET	Float.isNaN($)
119	1038	8	MathUtils.java	subAndCheck	s	long	0	ArithmeticException	$ < Integer.MIN_VALUE
119	1038	8	MathUtils.java	subAndCheck	s	long	0	ArithmeticException	$ > Integer.MAX_VALUE
120	1057	8	MathUtils.java	subAndCheck	b	long	1	ArithmeticException	$ == Long.MIN_VALUE
121	1058	12	MathUtils.java	subAndCheck	a	long	1	DEF	$ < 0
44263	74	8	MatrixUtils.java	createRealIdentityMatrix	i	int	0	NIL-FOR	$ < dimension
44263	74	8	MatrixUtils.java	createRealIdentityMatrix	dimension	int	0	NIL-FOR	i < $
44264	90	8	MatrixUtils.java	createRealDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
44264	90	8	MatrixUtils.java	createRealDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
44264	90	8	MatrixUtils.java	createRealDiagonalMatrix	diagonal	double[]	0	NIL-FOR	i < $.length
44265	182	8	MatrixUtils.java	createRowRealMatrix	i	int	0	NIL-FOR	$ < nCols
44265	182	8	MatrixUtils.java	createRowRealMatrix	nCols	int	0	NIL-FOR	i < $
44266	200	8	MatrixUtils.java	createRowBigMatrix	i	int	0	NIL-FOR	$ < nCols
44266	200	8	MatrixUtils.java	createRowBigMatrix	nCols	int	0	NIL-FOR	i < $
44267	234	8	MatrixUtils.java	createRowBigMatrix	i	int	0	NIL-FOR	$ < nCols
44267	234	8	MatrixUtils.java	createRowBigMatrix	nCols	int	0	NIL-FOR	i < $
44268	252	8	MatrixUtils.java	createColumnRealMatrix	i	int	0	NIL-FOR	$ < nRows
44268	252	8	MatrixUtils.java	createColumnRealMatrix	nRows	int	0	NIL-FOR	i < $
44269	270	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
44269	270	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
44270	288	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
44270	288	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
44271	306	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
44271	306	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
44272	322	8	MatrixUtils.java	createBigIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
44272	322	8	MatrixUtils.java	createBigIdentityMatrix	dimension	int	0	NIL-FOR	row < $
790	71	8	Max.java	increment	THIS	Max	0	DEF	Double.isNaN($.value)
790	71	8	Max.java	increment	THIS	Max	0	DEF	d > $.value
790	71	8	Max.java	increment	d	double	0	DEF	$ > value
791	123	8	Max.java	evaluate	THIS	Max	0	DEF	$.test(values, begin, length)
791	123	8	Max.java	evaluate	values	double[]	0	DEF	test($, begin, length)
791	123	8	Max.java	evaluate	begin	int	0	DEF	test(values, $, length)
791	123	8	Max.java	evaluate	length	int	0	DEF	test(values, begin, $)
44508	125	12	Max.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
44508	125	12	Max.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
44508	125	12	Max.java	evaluate	length	int	0	NIL-FOR	i < begin + $
792	126	16	Max.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
792	126	16	Max.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
735	105	8	Mean.java	increment	THIS	Mean	0	DEF	$.incMoment
736	114	8	Mean.java	clear	THIS	Mean	0	DEF	$.incMoment
737	150	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, begin, length)
737	150	8	Mean.java	evaluate	values	double[]	0	RET	test($, begin, length)
737	150	8	Mean.java	evaluate	begin	int	0	RET	test(values, $, length)
737	150	8	Mean.java	evaluate	length	int	0	RET	test(values, begin, $)
44496	159	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
44496	159	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
44496	159	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
44794	85	4	MidpointStepInterpolator.java	computeInterpolatedState	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
44794	85	4	MidpointStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
787	73	8	Min.java	increment	THIS	Min	0	DEF	d < $.value
787	73	8	Min.java	increment	THIS	Min	0	DEF	Double.isNaN($.value)
787	73	8	Min.java	increment	d	double	0	DEF	$ < value
788	125	8	Min.java	evaluate	THIS	Min	0	DEF	$.test(values, begin, length)
788	125	8	Min.java	evaluate	values	double[]	0	DEF	test($, begin, length)
788	125	8	Min.java	evaluate	begin	int	0	DEF	test(values, $, length)
788	125	8	Min.java	evaluate	length	int	0	DEF	test(values, begin, $)
44507	127	12	Min.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
44507	127	12	Min.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
44507	127	12	Min.java	evaluate	length	int	0	NIL-FOR	i < begin + $
789	128	16	Min.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
789	128	16	Min.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
1233	98	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1233	98	8	MullerSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1234	99	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1234	99	8	MullerSolver.java	solve	max	double	0	RET	f.value($) == 0.0
1235	100	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
1235	100	8	MullerSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
1236	104	8	MullerSolver.java	solve	THIS	MullerSolver	1	RET	$.isBracketing(min, initial, f)
1236	104	8	MullerSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
1236	104	8	MullerSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
1236	104	8	MullerSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
1237	152	8	MullerSolver.java	solve	y0	double	0	RET	$ == 0.0
1238	153	8	MullerSolver.java	solve	y2	double	0	RET	$ == 0.0
44850	158	8	MullerSolver.java	solve	THIS	MullerSolver	0	NIL-WHILE	i <= $.maximalIterationCount
44850	158	8	MullerSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1239	177	12	MullerSolver.java	solve	x	double	0	RET	Math.abs($ - oldx) <= tolerance
1239	177	12	MullerSolver.java	solve	oldx	double	0	RET	Math.abs(x - $) <= tolerance
1239	177	12	MullerSolver.java	solve	tolerance	double	0	RET	Math.abs(x - oldx) <= $
1240	181	12	MullerSolver.java	solve	THIS	MullerSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
1240	181	12	MullerSolver.java	solve	y	double	0	RET	Math.abs($) <= functionValueAccuracy
1241	194	12	MullerSolver.java	solve	bisect	boolean	1	DEF	$
1242	204	16	MullerSolver.java	solve	ym	double	1	DEF	MathUtils.sign(y0) + MathUtils.sign($) == 0.0
1242	204	16	MullerSolver.java	solve	y0	double	1	DEF	MathUtils.sign($) + MathUtils.sign(ym) == 0.0
1243	292	8	MullerSolver.java	solve2	y0	double	0	RET	$ == 0.0
1244	293	8	MullerSolver.java	solve2	y1	double	0	RET	$ == 0.0
44851	298	8	MullerSolver.java	solve2	THIS	MullerSolver	0	NIL-WHILE	i <= $.maximalIterationCount
44851	298	8	MullerSolver.java	solve2	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1245	305	12	MullerSolver.java	solve2	delta	double	1	DEF	$ >= 0.0
1246	314	12	MullerSolver.java	solve2	denominator	double	1	DEF	$ != 0
44852	318	16	MullerSolver.java	solve2	x1	double	0	NIL-WHILE	x == $
44852	318	16	MullerSolver.java	solve2	x2	double	0	NIL-WHILE	x == $
44852	318	16	MullerSolver.java	solve2	x	double	0	NIL-WHILE	$ == x1
44852	318	16	MullerSolver.java	solve2	x	double	0	NIL-WHILE	$ == x2
1247	330	12	MullerSolver.java	solve2	x	double	0	RET	Math.abs($ - oldx) <= tolerance
1247	330	12	MullerSolver.java	solve2	oldx	double	0	RET	Math.abs(x - $) <= tolerance
1247	330	12	MullerSolver.java	solve2	tolerance	double	0	RET	Math.abs(x - oldx) <= $
1248	334	12	MullerSolver.java	solve2	THIS	MullerSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
1248	334	12	MullerSolver.java	solve2	y	double	0	RET	Math.abs($) <= functionValueAccuracy
689	64	6	MultiDirectional.java	iterateSimplex	originalCost	double	0	RET	reflectedCost < $
689	64	6	MultiDirectional.java	iterateSimplex	reflectedCost	double	0	RET	$ < originalCost
690	69	8	MultiDirectional.java	iterateSimplex	expandedCost	double	0	DEF	reflectedCost <= $
690	69	8	MultiDirectional.java	iterateSimplex	reflectedCost	double	0	DEF	$ <= expandedCost
691	80	6	MultiDirectional.java	iterateSimplex	originalCost	double	0	RET	contractedCost < $
691	80	6	MultiDirectional.java	iterateSimplex	contractedCost	double	0	RET	$ < originalCost
44473	105	4	MultiDirectional.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ <= n
44473	105	4	MultiDirectional.java	evaluateNewSimplex	n	int	0	NIL-FOR	i <= $
44474	108	6	MultiDirectional.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < n
44474	108	6	MultiDirectional.java	evaluateNewSimplex	n	int	0	NIL-FOR	j < $
44801	169	8	MultistepIntegrator.java	start	THIS	MultistepIntegrator	0	NIL-DOWHILE	Double.isNaN($.resetTime)
1129	174	12	MultistepIntegrator.java	start	THIS	MultistepIntegrator	0	DEF	Double.isNaN($.resetTime)
1130	184	8	MultistepIntegrator.java	start	store	StoringStepHandler	0	DEF	$.getFinalState() != null
44802	195	8	MultistepIntegrator.java	rotatePreviousSteps	k	int	0	NIL-FOR	$ > 0
1135	81	8	MultistepStepInterpolator.java	MultistepStepInterpolator	THIS	MultistepStepInterpolator	1	DEF	interpolator.$.currentState != null
1135	81	8	MultistepStepInterpolator.java	MultistepStepInterpolator	interpolator	MultistepStepInterpolator	1	DEF	$.currentState != null
44811	84	12	MultistepStepInterpolator.java	MultistepStepInterpolator	THIS	MultistepStepInterpolator	0	NIL-FOR	k < interpolator.$.previousF.$.length
44811	84	12	MultistepStepInterpolator.java	MultistepStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.previousF.length
44811	84	12	MultistepStepInterpolator.java	MultistepStepInterpolator	interpolator	MultistepStepInterpolator	0	NIL-FOR	k < $.previousF.length
44812	126	8	MultistepStepInterpolator.java	writeExternal	THIS	MultistepStepInterpolator	0	NIL-FOR	k < $.previousF.$.length
44812	126	8	MultistepStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < previousF.length
44813	128	12	MultistepStepInterpolator.java	writeExternal	THIS	MultistepStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
44813	128	12	MultistepStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < currentState.length
44814	146	8	MultistepStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
44814	146	8	MultistepStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
44815	149	12	MultistepStepInterpolator.java	readExternal	THIS	MultistepStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
44815	149	12	MultistepStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < currentState.length
44484	92	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	i	int	0	NIL-FOR	$ < k
44484	92	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	k	int	0	NIL-FOR	i < $
44485	147	8	MultivariateSummaryStatistics.java	addValue	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
44485	147	8	MultivariateSummaryStatistics.java	addValue	i	int	0	NIL-FOR	$ < k
44486	184	8	MultivariateSummaryStatistics.java	getResults	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < results.$.length
44486	184	8	MultivariateSummaryStatistics.java	getResults	i	int	0	NIL-FOR	$ < results.length
44486	184	8	MultivariateSummaryStatistics.java	getResults	results	double[]	0	NIL-FOR	i < $.length
701	243	8	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 1
702	245	15	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 2
44487	249	12	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
44487	249	12	MultivariateSummaryStatistics.java	getStandardDeviation	i	int	0	NIL-FOR	$ < k
44488	330	8	MultivariateSummaryStatistics.java	append	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < data.$.length
44488	330	8	MultivariateSummaryStatistics.java	append	i	int	0	NIL-FOR	$ < data.length
44488	330	8	MultivariateSummaryStatistics.java	append	data	double[]	0	NIL-FOR	i < $.length
703	331	12	MultivariateSummaryStatistics.java	append	i	int	0	DEF	$ > 0
44489	344	8	MultivariateSummaryStatistics.java	clear	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
44489	344	8	MultivariateSummaryStatistics.java	clear	i	int	0	NIL-FOR	$ < k
704	363	8	MultivariateSummaryStatistics.java	equals	THIS	MultivariateSummaryStatistics	0	RET	object == $
704	363	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ == this
705	366	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ instanceof MultivariateSummaryStatistics == false
706	612	8	MultivariateSummaryStatistics.java	checkEmpty	THIS	MultivariateSummaryStatistics	0	DEF	$.n > 0
707	625	8	MultivariateSummaryStatistics.java	checkDimension	THIS	MultivariateSummaryStatistics	0	DimensionMismatchException	dimension != $.k
707	625	8	MultivariateSummaryStatistics.java	checkDimension	dimension	int	0	DimensionMismatchException	$ != k
44464	75	4	NelderMead.java	iterateSimplex	i	int	0	NIL-FOR	$ < n
44464	75	4	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	i < $
44465	77	6	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
44465	77	6	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
44466	82	4	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
44466	82	4	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
44467	88	4	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
44467	88	4	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
683	93	4	NelderMead.java	iterateSimplex	smallest	double	1	DEF	$ <= costR
683	93	4	NelderMead.java	iterateSimplex	secondLargest	double	1	DEF	costR < $
683	93	4	NelderMead.java	iterateSimplex	costR	double	1	DEF	$ < secondLargest
683	93	4	NelderMead.java	iterateSimplex	costR	double	1	DEF	smallest <= $
684	98	11	NelderMead.java	iterateSimplex	smallest	double	1	DEF	costR < $
684	98	11	NelderMead.java	iterateSimplex	costR	double	1	DEF	$ < smallest
44468	102	6	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
44468	102	6	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
685	107	6	NelderMead.java	iterateSimplex	costE	double	1	DEF	$ < costR
685	107	6	NelderMead.java	iterateSimplex	costR	double	1	DEF	costE < $
686	117	6	NelderMead.java	iterateSimplex	largest	double	1	RET	costR < $
686	117	6	NelderMead.java	iterateSimplex	costR	double	1	RET	$ < largest
44469	121	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
44469	121	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
687	126	8	NelderMead.java	iterateSimplex	costC	double	0	RET	$ <= costR
687	126	8	NelderMead.java	iterateSimplex	costR	double	0	RET	costC <= $
44470	136	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
44470	136	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
688	141	8	NelderMead.java	iterateSimplex	costC	double	0	RET	$ < largest
688	141	8	NelderMead.java	iterateSimplex	largest	double	0	RET	costC < $
44471	151	6	NelderMead.java	iterateSimplex	THIS	NelderMead	0	NIL-FOR	i < $.simplex.$.length
44471	151	6	NelderMead.java	iterateSimplex	i	int	0	NIL-FOR	$ < simplex.length
44472	153	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
44472	153	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
44834	119	12	NewtonSolver.java	solve	THIS	NewtonSolver	0	NIL-WHILE	i < $.maximalIterationCount
44834	119	12	NewtonSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1198	122	16	NewtonSolver.java	solve	THIS	NewtonSolver	0	RET	Math.abs(x1 - x0) <= $.absoluteAccuracy
1198	122	16	NewtonSolver.java	solve	x0	double	0	RET	Math.abs(x1 - $) <= absoluteAccuracy
1198	122	16	NewtonSolver.java	solve	x1	double	0	RET	Math.abs($ - x0) <= absoluteAccuracy
309	96	8	NormalDistributionImpl.java	setStandardDeviation	sd	double	0	IllegalArgumentException	$ <= 0.0
310	127	12	NormalDistributionImpl.java	cumulativeProbability	THIS	NormalDistributionImpl	1	RET	x < ($.mean - 20 * $.standardDeviation)
310	127	12	NormalDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ < (mean - 20 * standardDeviation)
311	129	19	NormalDistributionImpl.java	cumulativeProbability	THIS	NormalDistributionImpl	1	RET	x > ($.mean + 20 * $.standardDeviation)
311	129	19	NormalDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ > (mean + 20 * standardDeviation)
312	153	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
313	156	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
314	174	8	NormalDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < .5
315	195	8	NormalDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
316	215	8	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
317	217	15	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > .5
44528	104	8	OLSMultipleLinearRegression.java	calculateHat	i	int	0	NIL-FOR	$ < n
44528	104	8	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	i < $
44529	105	12	OLSMultipleLinearRegression.java	calculateHat	j	int	0	NIL-FOR	$ < n
44529	105	12	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	j < $
865	106	16	OLSMultipleLinearRegression.java	calculateHat	j	int	1	DEF	i == $
865	106	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ == j
865	106	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ < p
865	106	16	OLSMultipleLinearRegression.java	calculateHat	p	int	1	DEF	i < $
866	191	8	OLSMultipleLinearRegression.java	solveUpperTriangular	THIS	OLSMultipleLinearRegression	0	IllegalArgumentException	$.isUpperTriangular(coefficients, 1E-12)
866	191	8	OLSMultipleLinearRegression.java	solveUpperTriangular	coefficients	RealMatrix	0	IllegalArgumentException	isUpperTriangular($, 1E-12)
867	195	8	OLSMultipleLinearRegression.java	solveUpperTriangular	constants	RealMatrix	0	IllegalArgumentException	$.getColumnDimension() != 1
44530	201	8	OLSMultipleLinearRegression.java	solveUpperTriangular	i	int	0	NIL-FOR	$ < length
44530	201	8	OLSMultipleLinearRegression.java	solveUpperTriangular	length	int	0	NIL-FOR	i < $
44531	204	12	OLSMultipleLinearRegression.java	solveUpperTriangular	j	int	0	NIL-FOR	$ < length
44531	204	12	OLSMultipleLinearRegression.java	solveUpperTriangular	length	int	0	NIL-FOR	j < $
44532	227	8	OLSMultipleLinearRegression.java	isUpperTriangular	r	int	0	NIL-FOR	$ < nRows
44532	227	8	OLSMultipleLinearRegression.java	isUpperTriangular	nRows	int	0	NIL-FOR	r < $
44533	229	12	OLSMultipleLinearRegression.java	isUpperTriangular	c	int	0	NIL-FOR	$ < bound
44533	229	12	OLSMultipleLinearRegression.java	isUpperTriangular	bound	int	0	NIL-FOR	c < $
868	230	16	OLSMultipleLinearRegression.java	isUpperTriangular	c	int	0	RET	Math.abs(m.getEntry(r, $)) > epsilon
868	230	16	OLSMultipleLinearRegression.java	isUpperTriangular	r	int	0	RET	Math.abs(m.getEntry($, c)) > epsilon
868	230	16	OLSMultipleLinearRegression.java	isUpperTriangular	m	RealMatrix	0	RET	Math.abs($.getEntry(r, c)) > epsilon
868	230	16	OLSMultipleLinearRegression.java	isUpperTriangular	epsilon	double	0	RET	Math.abs(m.getEntry(r, c)) > $
806	102	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	IllegalArgumentException	$ > 0.5
806	102	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	IllegalArgumentException	$ <= 0
807	123	8	OneWayAnovaImpl.java	anovaStats	categoryData	Collection<double[]>	0	IllegalArgumentException	$.size() < 2
808	130	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	IllegalArgumentException	$.array.$.length <= 1
44509	148	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	NIL-FOR	i < $.data.$.length
44509	148	12	OneWayAnovaImpl.java	anovaStats	i	int	0	NIL-FOR	$ < data.length
34	150	8	OpenIntToDoubleHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
35	155	8	OpenIntToDoubleHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
35	155	8	OpenIntToDoubleHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
36	179	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
36	179	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
36	179	8	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
37	183	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
37	183	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	states[$] == FREE
43940	187	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
43940	187	8	OpenIntToDoubleHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
38	190	12	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
38	190	12	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
38	190	12	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
39	208	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
39	208	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
39	208	8	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
40	212	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
40	212	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
43941	216	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
43941	216	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
41	219	12	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
41	219	12	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
41	219	12	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
42	269	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
42	269	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
43	271	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
43	271	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
43	271	15	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
43	271	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
43	271	15	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
44	277	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
44	277	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
45	283	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
45	283	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
45	283	16	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
45	283	16	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
45	283	16	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
46	289	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
46	289	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
47	291	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
47	291	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
48	302	12	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
48	302	12	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
49	304	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
49	304	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
49	304	19	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
49	304	19	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
49	304	19	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
50	350	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
50	350	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
50	350	8	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
51	354	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
51	354	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	states[$] == FREE
43942	358	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
43942	358	8	OpenIntToDoubleHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
52	361	12	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
52	361	12	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
52	361	12	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
53	406	8	OpenIntToDoubleHashMap.java	put	index	int	0	DEF	$ < 0
54	414	8	OpenIntToDoubleHashMap.java	put	newMapping	boolean	0	DEF	$
55	416	12	OpenIntToDoubleHashMap.java	put	THIS	OpenIntToDoubleHashMap	0	DEF	$.shouldGrowTable()
43943	441	8	OpenIntToDoubleHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
43943	441	8	OpenIntToDoubleHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
56	442	12	OpenIntToDoubleHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
56	442	12	OpenIntToDoubleHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
378	77	8	PascalDistributionImpl.java	setNumberOfSuccesses	successes	int	0	IllegalArgumentException	$ < 0
379	91	8	PascalDistributionImpl.java	setProbabilityOfSuccess	p	double	0	IllegalArgumentException	$ < 0.0
379	91	8	PascalDistributionImpl.java	setProbabilityOfSuccess	p	double	0	IllegalArgumentException	$ > 1.0
380	130	8	PascalDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
381	146	8	PascalDistributionImpl.java	probability	x	int	1	DEF	$ < 0
382	174	8	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
383	176	15	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
793	197	8	Percentile.java	evaluate	p	double	0	IllegalArgumentException	$ > 100
793	197	8	Percentile.java	evaluate	p	double	0	IllegalArgumentException	$ <= 0
794	200	8	Percentile.java	evaluate	length	int	0	RET	$ == 0
795	203	8	Percentile.java	evaluate	length	int	0	RET	$ == 1
796	215	8	Percentile.java	evaluate	pos	double	0	RET	$ < 1
797	218	8	Percentile.java	evaluate	n	double	0	RET	pos >= $
797	218	8	Percentile.java	evaluate	pos	double	0	RET	$ >= n
798	245	8	Percentile.java	setQuantile	p	double	0	IllegalArgumentException	$ > 100
798	245	8	Percentile.java	setQuantile	p	double	0	IllegalArgumentException	$ <= 0
305	90	8	PoissonDistributionImpl.java	setMean	p	double	0	IllegalArgumentException	$ <= 0
306	106	8	PoissonDistributionImpl.java	probability	x	int	0	RET	$ == Integer.MAX_VALUE
306	106	8	PoissonDistributionImpl.java	probability	x	int	0	RET	$ < 0
307	122	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ < 0
308	125	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ == Integer.MAX_VALUE
1208	56	8	PolynomialFunction.java	PolynomialFunction	THIS	PolynomialFunction	0	IllegalArgumentException	c.$.length < 1
1208	56	8	PolynomialFunction.java	PolynomialFunction	c	double	0	IllegalArgumentException	$.length < 1
1209	114	8	PolynomialFunction.java	evaluate	n	int	0	IllegalArgumentException	$ < 1
44845	118	8	PolynomialFunction.java	evaluate	j	int	0	NIL-FOR	$ >=0
1210	134	8	PolynomialFunction.java	differentiate	n	int	0	IllegalArgumentException	$ < 1
1211	137	8	PolynomialFunction.java	differentiate	n	int	0	RET	$ == 1
44846	141	8	PolynomialFunction.java	differentiate	i	int	0	NIL-FOR	$ > 0
1199	140	8	PolynomialFunctionLagrangeForm.java	getCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.coefficientsComputed
44835	175	8	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	$ < n
44835	175	8	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	i < $
1200	181	12	PolynomialFunctionLagrangeForm.java	evaluate	dist	double	0	DEF	$ < min_dist
1200	181	12	PolynomialFunctionLagrangeForm.java	evaluate	min_dist	double	0	DEF	dist < $
44836	190	8	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	$ < n
44836	190	8	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	i < $
44837	191	12	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	j < n-$
44837	191	12	PolynomialFunctionLagrangeForm.java	evaluate	j	int	0	NIL-FOR	$ < n-i
44837	191	12	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	j < $-i
1201	195	16	PolynomialFunctionLagrangeForm.java	evaluate	divider	double	0	DuplicateSampleAbscissaException	$ == 0.0
1202	205	12	PolynomialFunctionLagrangeForm.java	evaluate	i	int	1	DEF	nearest < 0.5*(n-$+1)
1202	205	12	PolynomialFunctionLagrangeForm.java	evaluate	n	int	1	DEF	nearest < 0.5*($-i+1)
1202	205	12	PolynomialFunctionLagrangeForm.java	evaluate	nearest	int	1	DEF	$ < 0.5*(n-i+1)
44838	231	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
44838	231	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
44839	238	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
44839	238	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
44840	239	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
44841	247	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
44841	247	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
44842	250	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ < n
44842	250	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	j < $
1203	251	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != j
1203	251	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	DEF	i != $
1204	255	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	d	double	0	DEF	$ == 0.0
44843	257	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	NIL-FOR	$ < n
44843	257	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	k < $
1205	258	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.x[i] == $.x[k]
1205	258	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	DEF	i != $
1205	258	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	DEF	x[i] == x[$]
1205	258	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != k
1205	258	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	x[$] == x[k]
44844	272	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ >= 0
1206	296	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	IllegalArgumentException	y.$.length < 2
1206	296	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	IllegalArgumentException	x.$.length < 2
1206	296	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	IllegalArgumentException	$.length < 2
1206	296	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	IllegalArgumentException	$.length < 2
1207	300	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	IllegalArgumentException	x.$.length != y.$.length
1207	300	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	IllegalArgumentException	$.length != y.length
1207	300	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	IllegalArgumentException	x.length != $.length
1282	137	8	PolynomialFunctionNewtonForm.java	getCoefficients	THIS	PolynomialFunctionNewtonForm	0	DEF	$.coefficientsComputed
44866	164	8	PolynomialFunctionNewtonForm.java	evaluate	i	int	0	NIL-FOR	$ >= 0
44867	179	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ <= n
44867	179	8	PolynomialFunctionNewtonForm.java	computeCoefficients	n	int	0	NIL-FOR	i <= $
44868	184	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ >= 0
44869	185	12	PolynomialFunctionNewtonForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
1283	209	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	IllegalArgumentException	a.$.length < 1
1283	209	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	IllegalArgumentException	c.$.length < 1
1283	209	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	IllegalArgumentException	$.length < 1
1283	209	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	IllegalArgumentException	$.length < 1
1284	213	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	IllegalArgumentException	a.$.length != c.$.length + 1
1284	213	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	IllegalArgumentException	$.length != c.length + 1
1284	213	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	IllegalArgumentException	a.length != $.length + 1
1184	99	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	IllegalArgumentException	knots.$.length < 2
1184	99	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	IllegalArgumentException	$.length < 2
1185	103	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	IllegalArgumentException	knots.$.length - 1 != polynomials.$.length
1185	103	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	IllegalArgumentException	$.length - 1 != polynomials.length
1185	103	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	IllegalArgumentException	knots.length - 1 != $.length
1186	107	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	IllegalArgumentException	$.isStrictlyIncreasing(knots)
1186	107	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	IllegalArgumentException	isStrictlyIncreasing($)
1187	135	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	ArgumentOutsideDomainException	v > $.knots[$.n]
1187	135	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	ArgumentOutsideDomainException	v < $.knots[0]
1187	135	8	PolynomialSplineFunction.java	value	v	double	0	ArgumentOutsideDomainException	$ > knots[n]
1187	135	8	PolynomialSplineFunction.java	value	v	double	0	ArgumentOutsideDomainException	$ < knots[0]
1188	139	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
1189	145	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
1189	145	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
44828	166	8	PolynomialSplineFunction.java	polynomialSplineDerivative	THIS	PolynomialSplineFunction	0	NIL-FOR	i < $.n
44828	166	8	PolynomialSplineFunction.java	polynomialSplineDerivative	i	int	0	NIL-FOR	$ < n
44829	219	8	PolynomialSplineFunction.java	isStrictlyIncreasing	THIS	PolynomialSplineFunction	0	NIL-FOR	i < x.$.length
44829	219	8	PolynomialSplineFunction.java	isStrictlyIncreasing	i	int	0	NIL-FOR	$ < x.length
44829	219	8	PolynomialSplineFunction.java	isStrictlyIncreasing	x	double[]	0	NIL-FOR	i < $.length
1190	220	12	PolynomialSplineFunction.java	isStrictlyIncreasing	i	int	0	RET	x[$ - 1] >= x[$]
1190	220	12	PolynomialSplineFunction.java	isStrictlyIncreasing	x	double[]	0	RET	$[i - 1] >= $[i]
720	71	8	Product.java	increment	THIS	Product	1	DEF	$.n == 0
721	117	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, begin, length)
721	117	8	Product.java	evaluate	values	double[]	0	DEF	test($, begin, length)
721	117	8	Product.java	evaluate	begin	int	0	DEF	test(values, $, length)
721	117	8	Product.java	evaluate	length	int	0	DEF	test(values, begin, $)
44494	119	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
44494	119	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
44494	119	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
235	98	8	ProperFractionFormat.java	format	whole	int	0	DEF	$ != 0
236	134	8	ProperFractionFormat.java	parse	ret	Fraction	0	RET	$ != null
237	145	8	ProperFractionFormat.java	parse	whole	Number	0	RET	$ == null
238	158	8	ProperFractionFormat.java	parse	num	Number	0	RET	$ == null
239	166	8	ProperFractionFormat.java	parse	num	Number	0	RET	$.intValue() < 0
240	197	8	ProperFractionFormat.java	parse	den	Number	0	RET	$ == null
241	205	8	ProperFractionFormat.java	parse	den	Number	0	RET	$.intValue() < 0
242	224	8	ProperFractionFormat.java	setWholeFormat	format	NumberFormat	0	IllegalArgumentException	$ == null
44276	91	8	QRDecompositionImpl.java	QRDecompositionImpl	minor	int	0	NIL-FOR	$ < Math.min(m, n)
44276	91	8	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	minor < Math.min($, n)
44276	91	8	QRDecompositionImpl.java	QRDecompositionImpl	n	int	0	NIL-FOR	minor < Math.min(m, $)
44277	103	12	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
44277	103	12	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
553	110	12	QRDecompositionImpl.java	QRDecompositionImpl	a	double	0	DEF	$ != 0.0
44278	134	16	QRDecompositionImpl.java	QRDecompositionImpl	col	int	0	NIL-FOR	$ < n
44278	134	16	QRDecompositionImpl.java	QRDecompositionImpl	n	int	0	NIL-FOR	col < $
44279	137	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
44279	137	20	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
44280	143	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
44280	143	20	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
554	154	8	QRDecompositionImpl.java	getR	THIS	QRDecompositionImpl	0	DEF	$.cachedR == null
44281	162	12	QRDecompositionImpl.java	getR	row	int	0	NIL-FOR	$ >= 0
44282	164	16	QRDecompositionImpl.java	getR	col	int	0	NIL-FOR	$ < n
44282	164	16	QRDecompositionImpl.java	getR	n	int	0	NIL-FOR	col < $
555	178	8	QRDecompositionImpl.java	getQ	THIS	QRDecompositionImpl	0	DEF	$.cachedQ == null
556	187	8	QRDecompositionImpl.java	getQT	THIS	QRDecompositionImpl	0	DEF	$.cachedQT == null
44283	199	12	QRDecompositionImpl.java	getQT	minor	int	0	NIL-FOR	$ >= Math.min(m, n)
44283	199	12	QRDecompositionImpl.java	getQT	n	int	0	NIL-FOR	minor >= Math.min(m, $)
44283	199	12	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	minor >= Math.min($, n)
44284	203	12	QRDecompositionImpl.java	getQT	minor	int	0	NIL-FOR	$ >= 0
557	206	16	QRDecompositionImpl.java	getQT	qrtMinor	double[]	0	DEF	$[minor] != 0.0
557	206	16	QRDecompositionImpl.java	getQT	minor	int	0	DEF	qrtMinor[$] != 0.0
44285	207	20	QRDecompositionImpl.java	getQT	col	int	0	NIL-FOR	$ < m
44285	207	20	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	col < $
44286	209	24	QRDecompositionImpl.java	getQT	row	int	0	NIL-FOR	$ < m
44286	209	24	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	row < $
44287	214	24	QRDecompositionImpl.java	getQT	row	int	0	NIL-FOR	$ < m
44287	214	24	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	row < $
558	231	8	QRDecompositionImpl.java	getH	THIS	QRDecompositionImpl	0	DEF	$.cachedH == null
44288	236	12	QRDecompositionImpl.java	getH	i	int	0	NIL-FOR	$ < m
44288	236	12	QRDecompositionImpl.java	getH	m	int	0	NIL-FOR	i < $
44289	237	16	QRDecompositionImpl.java	getH	j	int	0	NIL-FOR	$ < Math.min(i + 1, n)
44289	237	16	QRDecompositionImpl.java	getH	i	int	0	NIL-FOR	j < Math.min($ + 1, n)
44289	237	16	QRDecompositionImpl.java	getH	n	int	0	NIL-FOR	j < Math.min(i + 1, $)
907	175	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
908	124	8	RandomDataImpl.java	nextHexString	len	int	0	IllegalArgumentException	$ <= 0
44558	139	8	RandomDataImpl.java	nextHexString	THIS	RandomDataImpl	0	NIL-FOR	i < randomBytes.$.length
44558	139	8	RandomDataImpl.java	nextHexString	i	int	0	NIL-FOR	$ < randomBytes.length
44558	139	8	RandomDataImpl.java	nextHexString	randomBytes	byte[]	0	NIL-FOR	i < $.length
909	150	13	RandomDataImpl.java	nextHexString	hex	String	0	DEF	$.length() == 1
910	167	8	RandomDataImpl.java	nextInt	lower	int	0	IllegalArgumentException	$ >= upper
910	167	8	RandomDataImpl.java	nextInt	upper	int	0	IllegalArgumentException	lower >= $
911	185	8	RandomDataImpl.java	nextLong	lower	long	0	IllegalArgumentException	$ >= upper
911	185	8	RandomDataImpl.java	nextLong	upper	long	0	IllegalArgumentException	lower >= $
912	211	8	RandomDataImpl.java	nextSecureHexString	len	int	0	IllegalArgumentException	$ <= 0
44559	229	7	RandomDataImpl.java	nextSecureHexString	iter	int	0	NIL-FOR	$ < numIter + 1
44559	229	7	RandomDataImpl.java	nextSecureHexString	numIter	int	0	NIL-FOR	iter < $ + 1
44560	238	12	RandomDataImpl.java	nextSecureHexString	THIS	RandomDataImpl	0	NIL-FOR	i < hash.$.length
44560	238	12	RandomDataImpl.java	nextSecureHexString	i	int	0	NIL-FOR	$ < hash.length
44560	238	12	RandomDataImpl.java	nextSecureHexString	hash	byte[]	0	NIL-FOR	i < $.length
913	249	16	RandomDataImpl.java	nextSecureHexString	hex	String	0	DEF	$.length() == 1
914	268	10	RandomDataImpl.java	nextSecureInt	lower	int	0	IllegalArgumentException	$ >= upper
914	268	10	RandomDataImpl.java	nextSecureInt	upper	int	0	IllegalArgumentException	lower >= $
915	286	8	RandomDataImpl.java	nextSecureLong	lower	long	0	IllegalArgumentException	$ >= upper
915	286	8	RandomDataImpl.java	nextSecureLong	upper	long	0	IllegalArgumentException	lower >= $
916	310	8	RandomDataImpl.java	nextPoisson	mean	double	0	IllegalArgumentException	$ <= 0
44561	318	8	RandomDataImpl.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * mean
44561	318	8	RandomDataImpl.java	nextPoisson	mean	double	0	NIL-WHILE	n < 1000 * $
917	321	12	RandomDataImpl.java	nextPoisson	p	double	1	DEF	r >= $
917	321	12	RandomDataImpl.java	nextPoisson	r	double	1	DEF	$ >= p
918	340	8	RandomDataImpl.java	nextGaussian	sigma	double	0	IllegalArgumentException	$ <= 0
919	360	8	RandomDataImpl.java	nextExponential	mean	double	0	IllegalArgumentException	$ < 0.0
44562	366	8	RandomDataImpl.java	nextExponential	unif	double	0	NIL-WHILE	$ == 0.0d
920	385	8	RandomDataImpl.java	nextUniform	lower	double	0	IllegalArgumentException	$ >= upper
920	385	8	RandomDataImpl.java	nextUniform	upper	double	0	IllegalArgumentException	lower >= $
44563	393	8	RandomDataImpl.java	nextUniform	u	double	0	NIL-WHILE	$ <= 0.0
921	410	8	RandomDataImpl.java	getRan	THIS	RandomDataImpl	0	DEF	$.rand == null
922	425	8	RandomDataImpl.java	getSecRan	THIS	RandomDataImpl	0	DEF	$.secRand == null
923	440	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
924	453	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
925	467	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
926	478	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
927	530	8	RandomDataImpl.java	nextPermutation	n	int	0	IllegalArgumentException	k > $
927	530	8	RandomDataImpl.java	nextPermutation	k	int	0	IllegalArgumentException	$ > n
928	534	8	RandomDataImpl.java	nextPermutation	k	int	0	IllegalArgumentException	$ == 0
44564	542	8	RandomDataImpl.java	nextPermutation	i	int	0	NIL-FOR	$ < k
44564	542	8	RandomDataImpl.java	nextPermutation	k	int	0	NIL-FOR	i < $
929	564	8	RandomDataImpl.java	nextSample	len	int	0	IllegalArgumentException	k > $
929	564	8	RandomDataImpl.java	nextSample	k	int	0	IllegalArgumentException	$ > len
930	568	8	RandomDataImpl.java	nextSample	k	int	0	IllegalArgumentException	$ == 0
44565	576	7	RandomDataImpl.java	nextSample	i	int	0	NIL-FOR	$ < k
44565	576	7	RandomDataImpl.java	nextSample	k	int	0	NIL-FOR	i < $
44566	593	8	RandomDataImpl.java	shuffle	i	int	0	NIL-FOR	$ >= end
44566	593	8	RandomDataImpl.java	shuffle	end	int	0	NIL-FOR	i >= $
931	594	12	RandomDataImpl.java	shuffle	i	int	1	DEF	$ == 0
44567	613	8	RandomDataImpl.java	getNatural	i	int	0	NIL-FOR	$ < n
44567	613	8	RandomDataImpl.java	getNatural	n	int	0	NIL-FOR	i < $
514	115	8	RealMatrixImpl.java	RealMatrixImpl	copyArray	boolean	1	DEF	$
515	118	12	RealMatrixImpl.java	RealMatrixImpl	d	double[][]	0	NullPointerException	$ == null
516	122	12	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	DEF	$ == 0
517	127	12	RealMatrixImpl.java	RealMatrixImpl	nCols	int	0	DEF	$ == 0
44203	131	12	RealMatrixImpl.java	RealMatrixImpl	r	int	0	NIL-FOR	$ < nRows
44203	131	12	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	NIL-FOR	r < $
518	132	16	RealMatrixImpl.java	RealMatrixImpl	THIS	RealMatrixImpl	0	DEF	d[r].length != nCols
518	132	16	RealMatrixImpl.java	RealMatrixImpl	r	int	0	DEF	d[$].length != nCols
518	132	16	RealMatrixImpl.java	RealMatrixImpl	nCols	int	0	DEF	d[r].length != $
518	132	16	RealMatrixImpl.java	RealMatrixImpl	d	double[][]	0	DEF	$[r].length != nCols
44204	153	8	RealMatrixImpl.java	RealMatrixImpl	row	int	0	NIL-FOR	$ < nRows
44204	153	8	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	NIL-FOR	row < $
44205	195	8	RealMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
44205	195	8	RealMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
44206	199	12	RealMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
44206	199	12	RealMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
44207	234	8	RealMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
44207	234	8	RealMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
44208	238	12	RealMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
44208	238	12	RealMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
44209	274	8	RealMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
44209	274	8	RealMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
44210	277	12	RealMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
44210	277	12	RealMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
44211	279	16	RealMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
44211	279	16	RealMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
519	309	8	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	1	DEF	$.data == null
520	310	12	RealMatrixImpl.java	setSubMatrix	row	int	0	DEF	$ > 0
521	314	12	RealMatrixImpl.java	setSubMatrix	column	int	0	DEF	$ > 0
522	319	12	RealMatrixImpl.java	setSubMatrix	nRows	int	0	DEF	$ == 0
523	325	12	RealMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	$ == 0
44212	330	12	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	NIL-FOR	i < $.data.$.length
44212	330	12	RealMatrixImpl.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
524	331	16	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	DEF	subMatrix[i].length != nCols
524	331	16	RealMatrixImpl.java	setSubMatrix	i	int	0	DEF	subMatrix[$].length != nCols
524	331	16	RealMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	subMatrix[i].length != $
524	331	16	RealMatrixImpl.java	setSubMatrix	subMatrix	double[][]	0	DEF	$[i].length != nCols
525	416	8	RealMatrixImpl.java	operate	THIS	RealMatrixImpl	0	DEF	v.$.length != nCols
525	416	8	RealMatrixImpl.java	operate	nCols	int	0	DEF	v.length != $
525	416	8	RealMatrixImpl.java	operate	v	double[]	0	DEF	$.length != nCols
44213	424	8	RealMatrixImpl.java	operate	row	int	0	NIL-FOR	$ < nRows
44213	424	8	RealMatrixImpl.java	operate	nRows	int	0	NIL-FOR	row < $
44214	427	12	RealMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < nCols
44214	427	12	RealMatrixImpl.java	operate	nCols	int	0	NIL-FOR	i < $
526	441	8	RealMatrixImpl.java	preMultiply	THIS	RealMatrixImpl	0	DEF	v.$.length != nRows
526	441	8	RealMatrixImpl.java	preMultiply	nRows	int	0	DEF	v.length != $
526	441	8	RealMatrixImpl.java	preMultiply	v	double[]	0	DEF	$.length != nRows
44215	450	8	RealMatrixImpl.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
44215	450	8	RealMatrixImpl.java	preMultiply	nCols	int	0	NIL-FOR	col < $
44216	452	12	RealMatrixImpl.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
44216	452	12	RealMatrixImpl.java	preMultiply	nRows	int	0	NIL-FOR	i < $
44217	468	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
44217	468	8	RealMatrixImpl.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
44218	470	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
44218	470	12	RealMatrixImpl.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
44219	483	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
44219	483	8	RealMatrixImpl.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
44220	485	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
44220	485	12	RealMatrixImpl.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
44221	500	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
44221	500	8	RealMatrixImpl.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
44222	502	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
44222	502	12	RealMatrixImpl.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
44223	517	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
44223	517	8	RealMatrixImpl.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
44224	519	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
44224	519	12	RealMatrixImpl.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
44225	532	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
44225	532	8	RealMatrixImpl.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
44226	533	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
44226	533	12	RealMatrixImpl.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
44227	547	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
44227	547	8	RealMatrixImpl.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
44228	548	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
44228	548	12	RealMatrixImpl.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
44229	563	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
44229	563	8	RealMatrixImpl.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
44230	564	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
44230	564	12	RealMatrixImpl.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
44231	580	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
44231	580	8	RealMatrixImpl.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
44232	581	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
44232	581	12	RealMatrixImpl.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
44233	597	8	RealMatrixImpl.java	copyOut	i	int	0	NIL-FOR	$ < nRows
44233	597	8	RealMatrixImpl.java	copyOut	nRows	int	0	NIL-FOR	i < $
44273	214	8	RealVectorFormat.java	format	i	int	0	NIL-FOR	$ < vector.getDimension()
44273	214	8	RealVectorFormat.java	format	vector	RealVector	0	NIL-FOR	i < $.getDimension()
544	215	12	RealVectorFormat.java	format	i	int	0	DEF	$ > 0
545	243	8	RealVectorFormat.java	format	obj	Object	0	RET	$ instanceof RealVector
546	261	8	RealVectorFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
547	280	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	$.parseFixedstring(source, $.trimmedPrefix, pos)
547	280	8	RealVectorFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedPrefix, pos)
547	280	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedPrefix, $)
44274	286	8	RealVectorFormat.java	parse	loop	boolean	0	NIL-FOR	$
548	288	12	RealVectorFormat.java	parse	components	List<Number>	0	DEF	$.isEmpty()
549	290	16	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	DEF	$.parseFixedstring(source, $.trimmedSeparator, pos)
549	290	16	RealVectorFormat.java	parse	source	String	0	DEF	parseFixedstring($, trimmedSeparator, pos)
549	290	16	RealVectorFormat.java	parse	pos	ParsePosition	0	DEF	parseFixedstring(source, trimmedSeparator, $)
550	295	12	RealVectorFormat.java	parse	loop	boolean	0	RET	$
551	298	16	RealVectorFormat.java	parse	component	Number	1	DEF	$ != null
552	312	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	$.parseFixedstring(source, $.trimmedSuffix, pos)
552	312	8	RealVectorFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSuffix, pos)
552	312	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSuffix, $)
44275	318	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	NIL-FOR	i < data.$.length
44275	318	8	RealVectorFormat.java	parse	i	int	0	NIL-FOR	$ < data.length
44275	318	8	RealVectorFormat.java	parse	data	double[]	0	NIL-FOR	i < $.length
391	97	8	RealVectorImpl.java	RealVectorImpl	d	double[]	0	NullPointerException	$ == null
392	100	8	RealVectorImpl.java	RealVectorImpl	THIS	RealVectorImpl	0	IllegalArgumentException	d.$.length == 0
392	100	8	RealVectorImpl.java	RealVectorImpl	d	double[]	0	IllegalArgumentException	$.length == 0
393	113	8	RealVectorImpl.java	RealVectorImpl	THIS	RealVectorImpl	0	IllegalArgumentException	d.$.length < pos + size
393	113	8	RealVectorImpl.java	RealVectorImpl	d	double[]	0	IllegalArgumentException	$.length < pos + size
393	113	8	RealVectorImpl.java	RealVectorImpl	pos	int	0	IllegalArgumentException	d.length < $ + size
393	113	8	RealVectorImpl.java	RealVectorImpl	size	int	0	IllegalArgumentException	d.length < pos + $
43961	128	8	RealVectorImpl.java	RealVectorImpl	THIS	RealVectorImpl	0	NIL-FOR	i < d.$.length
43961	128	8	RealVectorImpl.java	RealVectorImpl	i	int	0	NIL-FOR	$ < d.length
43961	128	8	RealVectorImpl.java	RealVectorImpl	d	Double[]	0	NIL-FOR	i < $.length
394	140	8	RealVectorImpl.java	RealVectorImpl	THIS	RealVectorImpl	0	IllegalArgumentException	d.$.length < pos + size
394	140	8	RealVectorImpl.java	RealVectorImpl	d	Double[]	0	IllegalArgumentException	$.length < pos + size
394	140	8	RealVectorImpl.java	RealVectorImpl	pos	int	0	IllegalArgumentException	d.length < $ + size
394	140	8	RealVectorImpl.java	RealVectorImpl	size	int	0	IllegalArgumentException	d.length < pos + $
43962	146	8	RealVectorImpl.java	RealVectorImpl	i	int	0	NIL-FOR	$ < pos + size
43962	146	8	RealVectorImpl.java	RealVectorImpl	pos	int	0	NIL-FOR	i < $ + size
43962	146	8	RealVectorImpl.java	RealVectorImpl	size	int	0	NIL-FOR	i < pos + $
43963	157	8	RealVectorImpl.java	RealVectorImpl	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43963	157	8	RealVectorImpl.java	RealVectorImpl	i	int	0	NIL-FOR	$ < data.length
43964	236	12	RealVectorImpl.java	add	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43964	236	12	RealVectorImpl.java	add	i	int	0	NIL-FOR	$ < data.length
43965	248	8	RealVectorImpl.java	add	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43965	248	8	RealVectorImpl.java	add	i	int	0	NIL-FOR	$ < data.length
43966	273	12	RealVectorImpl.java	subtract	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43966	273	12	RealVectorImpl.java	subtract	i	int	0	NIL-FOR	$ < data.length
43967	285	8	RealVectorImpl.java	subtract	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43967	285	8	RealVectorImpl.java	subtract	i	int	0	NIL-FOR	$ < data.length
43968	305	8	RealVectorImpl.java	mapAdd	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43968	305	8	RealVectorImpl.java	mapAdd	i	int	0	NIL-FOR	$ < data.length
43969	313	8	RealVectorImpl.java	mapAddToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43969	313	8	RealVectorImpl.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
43970	322	8	RealVectorImpl.java	mapSubtract	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43970	322	8	RealVectorImpl.java	mapSubtract	i	int	0	NIL-FOR	$ < data.length
43971	330	8	RealVectorImpl.java	mapSubtractToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43971	330	8	RealVectorImpl.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
43972	339	8	RealVectorImpl.java	mapMultiply	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43972	339	8	RealVectorImpl.java	mapMultiply	i	int	0	NIL-FOR	$ < data.length
43973	347	8	RealVectorImpl.java	mapMultiplyToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43973	347	8	RealVectorImpl.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
43974	356	8	RealVectorImpl.java	mapDivide	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43974	356	8	RealVectorImpl.java	mapDivide	i	int	0	NIL-FOR	$ < data.length
43975	364	8	RealVectorImpl.java	mapDivideToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43975	364	8	RealVectorImpl.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
43976	373	8	RealVectorImpl.java	mapPow	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43976	373	8	RealVectorImpl.java	mapPow	i	int	0	NIL-FOR	$ < data.length
43977	381	8	RealVectorImpl.java	mapPowToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43977	381	8	RealVectorImpl.java	mapPowToSelf	i	int	0	NIL-FOR	$ < data.length
43978	390	8	RealVectorImpl.java	mapExp	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43978	390	8	RealVectorImpl.java	mapExp	i	int	0	NIL-FOR	$ < data.length
43979	398	8	RealVectorImpl.java	mapExpToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43979	398	8	RealVectorImpl.java	mapExpToSelf	i	int	0	NIL-FOR	$ < data.length
43980	407	8	RealVectorImpl.java	mapExpm1	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43980	407	8	RealVectorImpl.java	mapExpm1	i	int	0	NIL-FOR	$ < data.length
43981	415	8	RealVectorImpl.java	mapExpm1ToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43981	415	8	RealVectorImpl.java	mapExpm1ToSelf	i	int	0	NIL-FOR	$ < data.length
43982	424	8	RealVectorImpl.java	mapLog	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43982	424	8	RealVectorImpl.java	mapLog	i	int	0	NIL-FOR	$ < data.length
43983	432	8	RealVectorImpl.java	mapLogToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43983	432	8	RealVectorImpl.java	mapLogToSelf	i	int	0	NIL-FOR	$ < data.length
43984	441	8	RealVectorImpl.java	mapLog10	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43984	441	8	RealVectorImpl.java	mapLog10	i	int	0	NIL-FOR	$ < data.length
43985	449	8	RealVectorImpl.java	mapLog10ToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43985	449	8	RealVectorImpl.java	mapLog10ToSelf	i	int	0	NIL-FOR	$ < data.length
43986	458	8	RealVectorImpl.java	mapLog1p	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43986	458	8	RealVectorImpl.java	mapLog1p	i	int	0	NIL-FOR	$ < data.length
43987	466	8	RealVectorImpl.java	mapLog1pToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43987	466	8	RealVectorImpl.java	mapLog1pToSelf	i	int	0	NIL-FOR	$ < data.length
43988	475	8	RealVectorImpl.java	mapCosh	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43988	475	8	RealVectorImpl.java	mapCosh	i	int	0	NIL-FOR	$ < data.length
43989	483	8	RealVectorImpl.java	mapCoshToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43989	483	8	RealVectorImpl.java	mapCoshToSelf	i	int	0	NIL-FOR	$ < data.length
43990	492	8	RealVectorImpl.java	mapSinh	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43990	492	8	RealVectorImpl.java	mapSinh	i	int	0	NIL-FOR	$ < data.length
43991	500	8	RealVectorImpl.java	mapSinhToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43991	500	8	RealVectorImpl.java	mapSinhToSelf	i	int	0	NIL-FOR	$ < data.length
43992	509	8	RealVectorImpl.java	mapTanh	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43992	509	8	RealVectorImpl.java	mapTanh	i	int	0	NIL-FOR	$ < data.length
43993	517	8	RealVectorImpl.java	mapTanhToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43993	517	8	RealVectorImpl.java	mapTanhToSelf	i	int	0	NIL-FOR	$ < data.length
43994	526	8	RealVectorImpl.java	mapCos	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43994	526	8	RealVectorImpl.java	mapCos	i	int	0	NIL-FOR	$ < data.length
43995	534	8	RealVectorImpl.java	mapCosToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43995	534	8	RealVectorImpl.java	mapCosToSelf	i	int	0	NIL-FOR	$ < data.length
43996	543	8	RealVectorImpl.java	mapSin	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43996	543	8	RealVectorImpl.java	mapSin	i	int	0	NIL-FOR	$ < data.length
43997	551	8	RealVectorImpl.java	mapSinToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43997	551	8	RealVectorImpl.java	mapSinToSelf	i	int	0	NIL-FOR	$ < data.length
43998	560	8	RealVectorImpl.java	mapTan	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43998	560	8	RealVectorImpl.java	mapTan	i	int	0	NIL-FOR	$ < data.length
43999	568	8	RealVectorImpl.java	mapTanToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
43999	568	8	RealVectorImpl.java	mapTanToSelf	i	int	0	NIL-FOR	$ < data.length
44000	577	8	RealVectorImpl.java	mapAcos	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44000	577	8	RealVectorImpl.java	mapAcos	i	int	0	NIL-FOR	$ < data.length
44001	585	8	RealVectorImpl.java	mapAcosToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44001	585	8	RealVectorImpl.java	mapAcosToSelf	i	int	0	NIL-FOR	$ < data.length
44002	594	8	RealVectorImpl.java	mapAsin	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44002	594	8	RealVectorImpl.java	mapAsin	i	int	0	NIL-FOR	$ < data.length
44003	602	8	RealVectorImpl.java	mapAsinToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44003	602	8	RealVectorImpl.java	mapAsinToSelf	i	int	0	NIL-FOR	$ < data.length
44004	611	8	RealVectorImpl.java	mapAtan	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44004	611	8	RealVectorImpl.java	mapAtan	i	int	0	NIL-FOR	$ < data.length
44005	619	8	RealVectorImpl.java	mapAtanToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44005	619	8	RealVectorImpl.java	mapAtanToSelf	i	int	0	NIL-FOR	$ < data.length
44006	628	8	RealVectorImpl.java	mapInv	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44006	628	8	RealVectorImpl.java	mapInv	i	int	0	NIL-FOR	$ < data.length
44007	636	8	RealVectorImpl.java	mapInvToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44007	636	8	RealVectorImpl.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
44008	645	8	RealVectorImpl.java	mapAbs	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44008	645	8	RealVectorImpl.java	mapAbs	i	int	0	NIL-FOR	$ < data.length
44009	653	8	RealVectorImpl.java	mapAbsToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44009	653	8	RealVectorImpl.java	mapAbsToSelf	i	int	0	NIL-FOR	$ < data.length
44010	662	8	RealVectorImpl.java	mapSqrt	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44010	662	8	RealVectorImpl.java	mapSqrt	i	int	0	NIL-FOR	$ < data.length
44011	670	8	RealVectorImpl.java	mapSqrtToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44011	670	8	RealVectorImpl.java	mapSqrtToSelf	i	int	0	NIL-FOR	$ < data.length
44012	679	8	RealVectorImpl.java	mapCbrt	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44012	679	8	RealVectorImpl.java	mapCbrt	i	int	0	NIL-FOR	$ < data.length
44013	687	8	RealVectorImpl.java	mapCbrtToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44013	687	8	RealVectorImpl.java	mapCbrtToSelf	i	int	0	NIL-FOR	$ < data.length
44014	696	8	RealVectorImpl.java	mapCeil	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44014	696	8	RealVectorImpl.java	mapCeil	i	int	0	NIL-FOR	$ < data.length
44015	704	8	RealVectorImpl.java	mapCeilToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44015	704	8	RealVectorImpl.java	mapCeilToSelf	i	int	0	NIL-FOR	$ < data.length
44016	713	8	RealVectorImpl.java	mapFloor	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44016	713	8	RealVectorImpl.java	mapFloor	i	int	0	NIL-FOR	$ < data.length
44017	721	8	RealVectorImpl.java	mapFloorToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44017	721	8	RealVectorImpl.java	mapFloorToSelf	i	int	0	NIL-FOR	$ < data.length
44018	730	8	RealVectorImpl.java	mapRint	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44018	730	8	RealVectorImpl.java	mapRint	i	int	0	NIL-FOR	$ < data.length
44019	738	8	RealVectorImpl.java	mapRintToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44019	738	8	RealVectorImpl.java	mapRintToSelf	i	int	0	NIL-FOR	$ < data.length
44020	747	8	RealVectorImpl.java	mapSignum	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44020	747	8	RealVectorImpl.java	mapSignum	i	int	0	NIL-FOR	$ < data.length
44021	755	8	RealVectorImpl.java	mapSignumToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44021	755	8	RealVectorImpl.java	mapSignumToSelf	i	int	0	NIL-FOR	$ < data.length
44022	764	8	RealVectorImpl.java	mapUlp	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44022	764	8	RealVectorImpl.java	mapUlp	i	int	0	NIL-FOR	$ < data.length
44023	772	8	RealVectorImpl.java	mapUlpToSelf	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44023	772	8	RealVectorImpl.java	mapUlpToSelf	i	int	0	NIL-FOR	$ < data.length
44024	786	12	RealVectorImpl.java	ebeMultiply	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44024	786	12	RealVectorImpl.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
44025	798	8	RealVectorImpl.java	ebeMultiply	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44025	798	8	RealVectorImpl.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
44026	823	12	RealVectorImpl.java	ebeDivide	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44026	823	12	RealVectorImpl.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
44027	835	8	RealVectorImpl.java	ebeDivide	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44027	835	8	RealVectorImpl.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
44028	874	12	RealVectorImpl.java	dotProduct	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44028	874	12	RealVectorImpl.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
44029	886	8	RealVectorImpl.java	dotProduct	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44029	886	8	RealVectorImpl.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
44030	938	12	RealVectorImpl.java	getDistance	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44030	938	12	RealVectorImpl.java	getDistance	i	int	0	NIL-FOR	$ < data.length
44031	951	8	RealVectorImpl.java	getDistance	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44031	951	8	RealVectorImpl.java	getDistance	i	int	0	NIL-FOR	$ < data.length
44032	984	12	RealVectorImpl.java	getL1Distance	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44032	984	12	RealVectorImpl.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
44033	997	8	RealVectorImpl.java	getL1Distance	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44033	997	8	RealVectorImpl.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
44034	1030	12	RealVectorImpl.java	getLInfDistance	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44034	1030	12	RealVectorImpl.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
44035	1043	8	RealVectorImpl.java	getLInfDistance	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44035	1043	8	RealVectorImpl.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
395	1071	8	RealVectorImpl.java	unitVector	norm	double	0	DEF	$ == 0
396	1080	8	RealVectorImpl.java	unitize	norm	double	0	DEF	$ == 0
44036	1084	8	RealVectorImpl.java	unitize	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44036	1084	8	RealVectorImpl.java	unitize	i	int	0	NIL-FOR	$ < data.length
44037	1117	12	RealVectorImpl.java	outerProduct	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44037	1117	12	RealVectorImpl.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
44038	1118	16	RealVectorImpl.java	outerProduct	THIS	RealVectorImpl	0	NIL-FOR	j < $.data.$.length
44038	1118	16	RealVectorImpl.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
44039	1143	8	RealVectorImpl.java	outerProduct	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44039	1143	8	RealVectorImpl.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
44040	1144	12	RealVectorImpl.java	outerProduct	THIS	RealVectorImpl	0	NIL-FOR	j < $.data.$.length
44040	1144	12	RealVectorImpl.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
44041	1219	16	RealVectorImpl.java	set	i	int	0	NIL-FOR	$ < index + v.getDimension()
44041	1219	16	RealVectorImpl.java	set	index	int	0	NIL-FOR	i < $ + v.getDimension()
44041	1219	16	RealVectorImpl.java	set	v	RealVector	0	NIL-FOR	i < index + $.getDimension()
397	1287	8	RealVectorImpl.java	checkVectorDimensions	THIS	RealVectorImpl	0	IllegalArgumentException	$.data.$.length != n
397	1287	8	RealVectorImpl.java	checkVectorDimensions	n	int	0	IllegalArgumentException	data.length != $
398	1299	12	RealVectorImpl.java	isNaN	THIS	RealVectorImpl	0	RET	Double.isNaN($.v)
399	1314	8	RealVectorImpl.java	isInfinite	THIS	RealVectorImpl	0	RET	$.isNaN()
400	1319	12	RealVectorImpl.java	isInfinite	THIS	RealVectorImpl	0	RET	Double.isInfinite($.v)
401	1349	6	RealVectorImpl.java	equals	THIS	RealVectorImpl	0	RET	$ == other
401	1349	6	RealVectorImpl.java	equals	other	Object	0	RET	this == $
402	1353	6	RealVectorImpl.java	equals	other	Object	0	RET	$ == null
403	1360	10	RealVectorImpl.java	equals	THIS	RealVectorImpl	0	RET	$.data.$.length != rhs.getDimension()
403	1360	10	RealVectorImpl.java	equals	rhs	RealVector	0	RET	data.length != $.getDimension()
404	1364	10	RealVectorImpl.java	equals	rhs	RealVector	0	RET	$.isNaN()
44042	1368	10	RealVectorImpl.java	equals	THIS	RealVectorImpl	0	NIL-FOR	i < $.data.$.length
44042	1368	10	RealVectorImpl.java	equals	i	int	0	NIL-FOR	$ < data.length
405	1369	14	RealVectorImpl.java	equals	THIS	RealVectorImpl	0	RET	$.data[i] != rhs.getEntry(i)
405	1369	14	RealVectorImpl.java	equals	i	int	0	RET	data[$] != rhs.getEntry($)
405	1369	14	RealVectorImpl.java	equals	rhs	RealVector	0	RET	data[i] != $.getEntry(i)
406	1388	8	RealVectorImpl.java	hashCode	THIS	RealVectorImpl	0	RET	$.isNaN()
407	1401	8	RealVectorImpl.java	checkIndex	THIS	RealVectorImpl	0	MatrixIndexException	index >= $.getDimension()
407	1401	8	RealVectorImpl.java	checkIndex	index	int	0	MatrixIndexException	$ < 0
407	1401	8	RealVectorImpl.java	checkIndex	index	int	0	MatrixIndexException	$ >= getDimension()
8	268	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + $.numElements) > $.internalArray.$.length
9	272	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
10	296	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	($.startIndex + ($.numElements + 1)) > $.internalArray.$.length
11	306	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
12	322	8	ResizableDoubleArray.java	substituteMostRecentElement	THIS	ResizableDoubleArray	0	DEF	$.numElements < 1
13	349	8	ResizableDoubleArray.java	checkContractExpand	contractionCritera	float	0	IllegalArgumentException	$ < expansionFactor
13	349	8	ResizableDoubleArray.java	checkContractExpand	expansionFactor	float	0	IllegalArgumentException	contractionCritera < $
14	359	8	ResizableDoubleArray.java	checkContractExpand	THIS	ResizableDoubleArray	0	IllegalArgumentException	$.contractionCriteria <= 1.0
15	369	8	ResizableDoubleArray.java	checkContractExpand	expansionFactor	float	0	IllegalArgumentException	$ <= 1.0
16	455	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	1	IllegalArgumentException	i > $.numElements
16	455	8	ResizableDoubleArray.java	discardExtremeElements	i	int	1	IllegalArgumentException	$ > numElements
17	459	15	ResizableDoubleArray.java	discardExtremeElements	i	int	1	IllegalArgumentException	$ < 0
18	465	12	ResizableDoubleArray.java	discardExtremeElements	front	boolean	0	DEF	$
19	467	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
20	489	8	ResizableDoubleArray.java	expand	THIS	ResizableDoubleArray	1	DEF	$.expansionMode == MULTIPLICATIVE_MODE
21	538	8	ResizableDoubleArray.java	getElement	THIS	ResizableDoubleArray	1	DEF	index >= $.numElements
21	538	8	ResizableDoubleArray.java	getElement	index	int	1	DEF	$ >= numElements
22	541	15	ResizableDoubleArray.java	getElement	index	int	1	RET	$ >= 0
23	668	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ < 0
24	672	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	index + 1 > $.numElements
24	672	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ + 1 > numElements
25	675	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + index) >= $.internalArray.$.length
25	675	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	(startIndex + $) >= internalArray.length
26	706	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	IllegalArgumentException	$ != ADDITIVE_MODE
26	706	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	IllegalArgumentException	$ != MULTIPLICATIVE_MODE
27	721	8	ResizableDoubleArray.java	setInitialCapacity	initialCapacity	int	1	DEF	$ > 0
28	744	8	ResizableDoubleArray.java	setNumElements	i	int	0	IllegalArgumentException	$ < 0
29	752	8	ResizableDoubleArray.java	setNumElements	THIS	ResizableDoubleArray	0	DEF	($.startIndex + i) > $.internalArray.$.length
29	752	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	(startIndex + $) > internalArray.length
30	767	8	ResizableDoubleArray.java	shouldContract	THIS	ResizableDoubleArray	1	RET	$.expansionMode == MULTIPLICATIVE_MODE
31	843	8	ResizableDoubleArray.java	equals	THIS	ResizableDoubleArray	0	RET	object == $
31	843	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ == this
32	846	7	ResizableDoubleArray.java	equals	object	Object	0	RET	$ instanceof ResizableDoubleArray == false
33	859	15	ResizableDoubleArray.java	equals	result	boolean	1	RET	$
1217	96	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1217	96	8	RiddersSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1218	97	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1218	97	8	RiddersSolver.java	solve	max	double	0	RET	f.value($) == 0.0
1219	98	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
1219	98	8	RiddersSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
1220	102	8	RiddersSolver.java	solve	THIS	RiddersSolver	1	RET	$.isBracketing(min, initial, f)
1220	102	8	RiddersSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
1220	102	8	RiddersSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
1220	102	8	RiddersSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
1221	136	8	RiddersSolver.java	solve	y1	double	0	RET	$ == 0.0
1222	137	8	RiddersSolver.java	solve	y2	double	0	RET	$ == 0.0
44847	142	8	RiddersSolver.java	solve	THIS	RiddersSolver	0	NIL-WHILE	i <= $.maximalIterationCount
44847	142	8	RiddersSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1223	146	12	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	Math.abs(y3) <= $.functionValueAccuracy
1223	146	12	RiddersSolver.java	solve	y3	double	0	RET	Math.abs($) <= functionValueAccuracy
1224	158	12	RiddersSolver.java	solve	x	double	0	RET	Math.abs($ - oldx) <= tolerance
1224	158	12	RiddersSolver.java	solve	oldx	double	0	RET	Math.abs(x - $) <= tolerance
1224	158	12	RiddersSolver.java	solve	tolerance	double	0	RET	Math.abs(x - oldx) <= $
1225	162	12	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
1225	162	12	RiddersSolver.java	solve	y	double	0	RET	Math.abs($) <= functionValueAccuracy
1226	169	12	RiddersSolver.java	solve	correction	double	1	DEF	$ > 0.0
1227	170	16	RiddersSolver.java	solve	y1	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
1227	170	16	RiddersSolver.java	solve	y	double	1	DEF	MathUtils.sign(y1) + MathUtils.sign($) == 0.0
1228	177	16	RiddersSolver.java	solve	y2	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
1228	177	16	RiddersSolver.java	solve	y	double	1	DEF	MathUtils.sign(y2) + MathUtils.sign($) == 0.0
44864	76	8	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	NIL-WHILE	i <= $.maximalIterationCount
44864	76	8	RombergIntegrator.java	integrate	i	int	0	NIL-WHILE	$ <= maximalIterationCount
44865	78	12	RombergIntegrator.java	integrate	i	int	0	NIL-FOR	j <= $
44865	78	12	RombergIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= i
1279	84	12	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	RET	i >= $.minimalIterationCount
1279	84	12	RombergIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
1280	85	16	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	RET	Math.abs(s - olds) <= Math.abs($.relativeAccuracy * olds)
1280	85	16	RombergIntegrator.java	integrate	s	double	0	RET	Math.abs($ - olds) <= Math.abs(relativeAccuracy * olds)
1280	85	16	RombergIntegrator.java	integrate	olds	double	0	RET	Math.abs(s - $) <= Math.abs(relativeAccuracy * $)
1281	104	8	RombergIntegrator.java	verifyIterationCount	THIS	RombergIntegrator	0	IllegalArgumentException	$.maximalIterationCount > 32
133	128	4	Rotation.java	Rotation	needsNormalization	boolean	0	DEF	$
134	158	4	Rotation.java	Rotation	norm	double	0	DEF	$ == 0
135	207	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[2].length != 3
135	207	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[1].length != 3
135	207	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m.$.length != 3
135	207	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[0].length != 3
135	207	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[2].length != 3
135	207	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[1].length != 3
135	207	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$.length != 3
135	207	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[0].length != 3
136	224	4	Rotation.java	Rotation	det	double	0	NotARotationMatrixException	$ < 0.0
137	244	4	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
138	253	6	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
139	262	8	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
140	308	2	Rotation.java	Rotation	u1u1	double	0	IllegalArgumentException	$ == 0
140	308	2	Rotation.java	Rotation	u2u2	double	0	IllegalArgumentException	$ == 0
140	308	2	Rotation.java	Rotation	v1v1	double	0	IllegalArgumentException	$ == 0
140	308	2	Rotation.java	Rotation	v2v2	double	0	IllegalArgumentException	$ == 0
141	357	2	Rotation.java	Rotation	c	double	0	RET	$ == 0
142	379	4	Rotation.java	Rotation	c	double	0	RET	$ == 0
143	389	6	Rotation.java	Rotation	c	double	0	RET	$ == 0
144	439	4	Rotation.java	Rotation	normProduct	double	0	IllegalArgumentException	$ == 0
145	445	4	Rotation.java	Rotation	normProduct	double	1	DEF	dot < ((2.0e-15 - 1.0) * $)
145	445	4	Rotation.java	Rotation	dot	double	1	DEF	$ < ((2.0e-15 - 1.0) * normProduct)
146	540	4	Rotation.java	getAxis	squaredSine	double	1	RET	$ == 0
147	542	11	Rotation.java	getAxis	THIS	Rotation	0	RET	$.q0 < 0
148	554	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 > 0.1
148	554	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 < -0.1
149	556	11	Rotation.java	getAngle	THIS	Rotation	0	RET	$.q0 < 0
150	600	4	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
151	609	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
151	609	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
152	618	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
153	627	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
153	627	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
154	636	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
155	645	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
155	645	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
156	654	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
157	663	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
157	663	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
158	672	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
159	681	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
159	681	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
160	690	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
161	699	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
161	699	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
162	708	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
163	717	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
163	717	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
164	726	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
165	735	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
165	735	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
166	744	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
167	753	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
167	753	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
168	762	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
169	771	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
169	771	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
170	780	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
171	789	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
171	789	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
172	807	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
172	807	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
43953	966	4	Rotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
173	1007	6	Rotation.java	orthogonalizeMatrix	fn	double	0	RET	Math.abs(fn1 - $) <= threshold
173	1007	6	Rotation.java	orthogonalizeMatrix	fn1	double	0	RET	Math.abs($ - fn) <= threshold
173	1007	6	Rotation.java	orthogonalizeMatrix	threshold	double	0	RET	Math.abs(fn1 - fn) <= $
1131	93	4	RungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1131	93	4	RungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
44803	97	4	RungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
44803	97	4	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
1132	104	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.requiresDenseOutput()
1132	104	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
44804	123	4	RungeKuttaIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
44805	127	6	RungeKuttaIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
44806	133	8	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
44806	133	8	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
44807	135	10	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
44807	135	10	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
44807	135	10	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
44808	137	12	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
44808	137	12	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
44809	148	8	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
44809	148	8	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
44809	148	8	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
44810	150	10	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
44810	150	10	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
1133	158	8	RungeKuttaIntegrator.java	integrate	interpolator	AbstractStepInterpolator	1	DEF	manager.evaluateStep($)
1133	158	8	RungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolator)
1134	179	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	DEF	manager.reset($.stepStart, y)
1134	179	6	RungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1134	179	6	RungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1134	179	6	RungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1014	79	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	1	DEF	interpolator.$.currentState != null
1014	79	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
44670	83	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < interpolator.$.yDotK.$.length
44670	83	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.yDotK.length
44670	83	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.length
44671	136	4	RungeKuttaStepInterpolator.java	writeExternal	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.$.length
44671	136	4	RungeKuttaStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < yDotK.length
44672	137	6	RungeKuttaStepInterpolator.java	writeExternal	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
44672	137	6	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < currentState.length
44673	156	4	RungeKuttaStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
44673	156	4	RungeKuttaStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
44674	158	6	RungeKuttaStepInterpolator.java	readExternal	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
44674	158	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < currentState.length
1249	131	8	SecantSolver.java	solve	y0	double	0	IllegalArgumentException	$ * y1 >= 0
1249	131	8	SecantSolver.java	solve	y1	double	0	IllegalArgumentException	y0 * $ >= 0
44853	142	8	SecantSolver.java	solve	THIS	SecantSolver	0	NIL-WHILE	i < $.maximalIterationCount
44853	142	8	SecantSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1250	143	12	SecantSolver.java	solve	y1	double	0	DEF	Math.abs(y2) < Math.abs($)
1250	143	12	SecantSolver.java	solve	y2	double	0	DEF	Math.abs($) < Math.abs(y1)
1251	151	12	SecantSolver.java	solve	THIS	SecantSolver	0	RET	Math.abs(y1) <= $.functionValueAccuracy
1251	151	12	SecantSolver.java	solve	y1	double	0	RET	Math.abs($) <= functionValueAccuracy
1252	155	12	SecantSolver.java	solve	THIS	SecantSolver	0	RET	Math.abs(oldDelta) < Math.max($.relativeAccuracy * Math.abs(x1), $.absoluteAccuracy)
1252	155	12	SecantSolver.java	solve	x1	double	0	RET	Math.abs(oldDelta) < Math.max(relativeAccuracy * Math.abs($), absoluteAccuracy)
1252	155	12	SecantSolver.java	solve	oldDelta	double	0	RET	Math.abs($) < Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy)
1253	161	12	SecantSolver.java	solve	y0	double	1	DEF	Math.abs(y1) > Math.abs($)
1253	161	12	SecantSolver.java	solve	y1	double	1	DEF	Math.abs($) > Math.abs(y0)
1254	166	16	SecantSolver.java	solve	delta	double	0	DEF	$ / oldDelta > 1
1254	166	16	SecantSolver.java	solve	oldDelta	double	0	DEF	delta / $ > 1
1255	176	12	SecantSolver.java	solve	y1	double	0	DEF	($ > 0) == (y2 > 0)
1255	176	12	SecantSolver.java	solve	y2	double	0	DEF	(y1 > 0) == ($ > 0)
746	76	8	SecondMoment.java	increment	THIS	SecondMoment	0	DEF	$.n < 1
943	69	12	SimpleEstimationProblem.java	getUnboundParameters	THIS	SimpleEstimationProblem	0	DEF	$.p.isBound()
875	121	8	SimpleRegression.java	addData	THIS	SimpleRegression	1	DEF	$.n == 0
876	137	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.n > 2
877	157	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 0
878	169	12	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 2
44537	192	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
44537	192	8	SimpleRegression.java	addData	i	int	0	NIL-FOR	$ < data.length
44537	192	8	SimpleRegression.java	addData	data	double[][]	0	NIL-FOR	i < $.length
44538	212	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	$.n > 0
44538	212	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
44538	212	8	SimpleRegression.java	removeData	i	int	0	NIL-FOR	$ < data.length
44538	212	8	SimpleRegression.java	removeData	data	double[][]	0	NIL-FOR	i < $.length
879	297	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	$.n < 2
880	300	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	Math.abs($.sumXX) < 10 * Double.MIN_VALUE
881	350	8	SimpleRegression.java	getTotalSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
882	387	8	SimpleRegression.java	getMeanSquareError	THIS	SimpleRegression	0	RET	$.n < 3
883	410	8	SimpleRegression.java	getR	b1	double	0	DEF	$ < 0
884	525	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	IllegalArgumentException	$ <= 0
884	525	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	IllegalArgumentException	$ >= 1
885	591	8	SimpleRegression.java	setDistribution	THIS	SimpleRegression	0	DEF	$.n > 2
1180	71	8	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	$.minimalIterationCount == 1
44827	79	8	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	NIL-WHILE	i <= $.maximalIterationCount
44827	79	8	SimpsonIntegrator.java	integrate	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1181	82	12	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	i >= $.minimalIterationCount
1181	82	12	SimpsonIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
1182	83	16	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	Math.abs(s - olds) <= Math.abs($.relativeAccuracy * olds)
1182	83	16	SimpsonIntegrator.java	integrate	s	double	0	RET	Math.abs($ - olds) <= Math.abs(relativeAccuracy * olds)
1182	83	16	SimpsonIntegrator.java	integrate	olds	double	0	RET	Math.abs(s - $) <= Math.abs(relativeAccuracy * $)
1183	103	8	SimpsonIntegrator.java	verifyIterationCount	THIS	SimpsonIntegrator	0	IllegalArgumentException	$.maximalIterationCount > 64
44131	110	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.mainBidiagonal.$.length
44131	110	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < mainBidiagonal.length
44132	122	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.singularValues.$.length
44132	122	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < singularValues.length
468	132	8	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedU == null
469	134	12	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	1	DEF	$.m >= $.n
44133	140	16	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n - 1
44133	140	16	SingularValueDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < n - 1
44134	146	20	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.n
44134	146	20	SingularValueDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < n
44135	153	16	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.n
44135	153	16	SingularValueDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < n
44136	156	16	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
44136	156	16	SingularValueDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < m
470	177	8	SingularValueDecompositionImpl.java	getUT	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedUt == null
471	190	8	SingularValueDecompositionImpl.java	getS	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedS == null
472	209	8	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedV == null
473	211	12	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	1	DEF	$.m >= $.n
44137	220	16	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m - 1
44137	220	16	SingularValueDecompositionImpl.java	getV	i	int	0	NIL-FOR	$ < m - 1
44138	226	20	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.m
44138	226	20	SingularValueDecompositionImpl.java	getV	j	int	0	NIL-FOR	$ < m
44139	233	16	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.m
44139	233	16	SingularValueDecompositionImpl.java	getV	j	int	0	NIL-FOR	$ < m
44140	236	16	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n
44140	236	16	SingularValueDecompositionImpl.java	getV	i	int	0	NIL-FOR	$ < n
474	254	8	SingularValueDecompositionImpl.java	getVT	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedVt == null
44141	281	8	SingularValueDecompositionImpl.java	getRank	i	int	0	NIL-FOR	$ >= 0
475	282	11	SingularValueDecompositionImpl.java	getRank	THIS	SingularValueDecompositionImpl	0	RET	$.singularValues[i] > threshold
475	282	11	SingularValueDecompositionImpl.java	getRank	i	int	0	RET	singularValues[$] > threshold
475	282	11	SingularValueDecompositionImpl.java	getRank	threshold	double	0	RET	singularValues[i] > $
739	87	8	Skewness.java	increment	THIS	Skewness	0	DEF	$.incMoment
740	101	8	Skewness.java	getResult	THIS	Skewness	0	RET	$.moment.$.n < 3
741	105	8	Skewness.java	getResult	variance	double	1	RET	$ < 10E-20
742	125	8	Skewness.java	clear	THIS	Skewness	0	DEF	$.incMoment
743	152	8	Skewness.java	evaluate	THIS	Skewness	0	DEF	$.test(values, begin, length)
743	152	8	Skewness.java	evaluate	values	double[]	0	DEF	test($, begin, length)
743	152	8	Skewness.java	evaluate	begin	int	0	DEF	test(values, $, length)
743	152	8	Skewness.java	evaluate	length	int	0	DEF	test(values, begin, $)
743	152	8	Skewness.java	evaluate	length	int	0	DEF	$ > 2
44497	162	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
44497	162	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
44497	162	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
44498	170	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
44498	170	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
44498	170	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
44404	106	8	SparseRealMatrix.java	add	iterator	Iterator	0	NIL-FOR	$.hasNext()
44405	140	8	SparseRealMatrix.java	subtract	iterator	Iterator	0	NIL-FOR	$.hasNext()
578	171	8	SparseRealMatrix.java	setEntry	value	double	1	DEF	$ == 0.0
579	186	8	SparseRealMatrix.java	addToEntry	value	double	1	DEF	$ == 0.0
580	201	8	SparseRealMatrix.java	multiplyEntry	value	double	1	DEF	$ == 0.0
1177	55	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	IllegalArgumentException	x.$.length != y.$.length
1177	55	8	SplineInterpolator.java	interpolate	x	double	0	IllegalArgumentException	$.length != y.length
1177	55	8	SplineInterpolator.java	interpolate	y	double	0	IllegalArgumentException	x.length != $.length
1178	59	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	IllegalArgumentException	x.$.length < 3
1178	59	8	SplineInterpolator.java	interpolate	x	double	0	IllegalArgumentException	$.length < 3
44822	67	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
44822	67	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
1179	68	12	SplineInterpolator.java	interpolate	i	int	0	IllegalArgumentException	x[$] >= x[$ + 1]
1179	68	12	SplineInterpolator.java	interpolate	x	double	0	IllegalArgumentException	$[i] >= $[i + 1]
44823	75	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
44823	75	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
44824	84	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
44824	84	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
44825	99	8	SplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ >=0
44826	107	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
44826	107	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
862	566	8	StatUtils.java	sumDifference	THIS	StatUtils	0	IllegalArgumentException	n != sample2.$.length
862	566	8	StatUtils.java	sumDifference	n	int	0	IllegalArgumentException	$ < 1
862	566	8	StatUtils.java	sumDifference	n	int	0	IllegalArgumentException	$ != sample2.length
862	566	8	StatUtils.java	sumDifference	sample2	double[]	0	IllegalArgumentException	n != $.length
44526	571	8	StatUtils.java	sumDifference	i	int	0	NIL-FOR	$ < n
44526	571	8	StatUtils.java	sumDifference	n	int	0	NIL-FOR	i < $
863	610	8	StatUtils.java	varianceDifference	THIS	StatUtils	0	IllegalArgumentException	n != sample2.$.length
863	610	8	StatUtils.java	varianceDifference	n	int	0	IllegalArgumentException	$ != sample2.length
863	610	8	StatUtils.java	varianceDifference	n	int	0	IllegalArgumentException	$ < 2
863	610	8	StatUtils.java	varianceDifference	sample2	double[]	0	IllegalArgumentException	n != $.length
44527	613	8	StatUtils.java	varianceDifference	i	int	0	NIL-FOR	$ < n
44527	613	8	StatUtils.java	varianceDifference	n	int	0	NIL-FOR	i < $
804	130	8	StatisticalSummaryValues.java	equals	THIS	StatisticalSummaryValues	0	RET	object == $
804	130	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ == this
805	133	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ instanceof StatisticalSummaryValues == false
1011	120	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.lastState == null
1012	129	12	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.forward
44669	137	8	StepNormalizer.java	handleStep	nextInStep	boolean	0	NIL-WHILE	$
1013	155	8	StepNormalizer.java	handleStep	isLast	boolean	0	DEF	$
716	71	8	Sum.java	increment	THIS	Sum	1	DEF	$.n == 0
717	117	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, begin, length)
717	117	8	Sum.java	evaluate	values	double[]	0	DEF	test($, begin, length)
717	117	8	Sum.java	evaluate	begin	int	0	DEF	test(values, $, length)
717	117	8	Sum.java	evaluate	length	int	0	DEF	test(values, begin, $)
44492	119	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
44492	119	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
44492	119	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
718	87	8	SumOfLogs.java	getResult	THIS	SumOfLogs	1	RET	$.n > 0
719	128	8	SumOfLogs.java	evaluate	THIS	SumOfLogs	0	DEF	$.test(values, begin, length)
719	128	8	SumOfLogs.java	evaluate	values	double[]	0	DEF	test($, begin, length)
719	128	8	SumOfLogs.java	evaluate	begin	int	0	DEF	test(values, $, length)
719	128	8	SumOfLogs.java	evaluate	length	int	0	DEF	test(values, begin, $)
44493	130	12	SumOfLogs.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
44493	130	12	SumOfLogs.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
44493	130	12	SumOfLogs.java	evaluate	length	int	0	NIL-FOR	i < begin + $
714	71	8	SumOfSquares.java	increment	THIS	SumOfSquares	1	DEF	$.n == 0
715	117	8	SumOfSquares.java	evaluate	THIS	SumOfSquares	0	DEF	$.test(values, begin, length)
715	117	8	SumOfSquares.java	evaluate	values	double[]	0	DEF	test($, begin, length)
715	117	8	SumOfSquares.java	evaluate	begin	int	0	DEF	test(values, $, length)
715	117	8	SumOfSquares.java	evaluate	length	int	0	DEF	test(values, begin, $)
44491	119	12	SumOfSquares.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
44491	119	12	SumOfSquares.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
44491	119	12	SumOfSquares.java	evaluate	length	int	0	NIL-FOR	i < begin + $
766	154	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.meanImpl instanceof Mean
767	157	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.varianceImpl instanceof Variance
768	160	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.geoMeanImpl instanceof GeometricMean
769	201	8	SummaryStatistics.java	getMean	THIS	SummaryStatistics	1	RET	$.mean == $.meanImpl
770	217	8	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	0	DEF	$.getN() > 0
771	218	12	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	1	DEF	$.getN() > 1
772	235	8	SummaryStatistics.java	getVariance	THIS	SummaryStatistics	1	RET	$.varianceImpl == $.variance
773	323	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
774	326	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
775	339	8	SummaryStatistics.java	equals	THIS	SummaryStatistics	0	RET	object == $
775	339	8	SummaryStatistics.java	equals	object	Object	0	RET	$ == this
776	342	8	SummaryStatistics.java	equals	object	Object	0	RET	$ instanceof SummaryStatistics == false
777	612	8	SummaryStatistics.java	checkEmpty	THIS	SummaryStatistics	0	DEF	$.n > 0
778	645	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getGeoMeanImpl() instanceof GeometricMean
779	656	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.geoMean == source.$.geoMeanImpl
779	656	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.geoMean == $.geoMeanImpl
780	661	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.max == source.$.maxImpl
780	661	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.max == $.maxImpl
781	666	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.mean == source.$.meanImpl
781	666	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.mean == $.meanImpl
782	671	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.min == source.$.minImpl
782	671	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.min == $.minImpl
783	676	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sum == source.$.sumImpl
783	676	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sum == $.sumImpl
784	681	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.variance == source.$.varianceImpl
784	681	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.variance == $.varianceImpl
785	686	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumLog == source.$.sumLogImpl
785	686	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumLog == $.sumLogImpl
786	691	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumsq == source.$.sumsqImpl
786	691	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumsq == $.sumsqImpl
292	54	8	TDistributionImpl.java	setDegreesOfFreedom	degreesOfFreedom	double	0	IllegalArgumentException	$ <= 0.0
293	77	8	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ == 0.0
294	85	12	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ < 0.0
295	111	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
296	114	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
830	78	8	TTestImpl.java	pairedT	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
830	78	8	TTestImpl.java	pairedT	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
830	78	8	TTestImpl.java	pairedT	sample1	double[]	0	IllegalArgumentException	$ == null
830	78	8	TTestImpl.java	pairedT	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
830	78	8	TTestImpl.java	pairedT	sample2	double[]	0	IllegalArgumentException	$ == null
831	163	8	TTestImpl.java	pairedTTest	alpha	double	0	IllegalArgumentException	$ <= 0
831	163	8	TTestImpl.java	pairedTTest	alpha	double	0	IllegalArgumentException	$ > 0.5
832	186	8	TTestImpl.java	t	THIS	TTestImpl	0	IllegalArgumentException	observed.$.length < 2
832	186	8	TTestImpl.java	t	observed	double[]	0	IllegalArgumentException	$ == null
832	186	8	TTestImpl.java	t	observed	double[]	0	IllegalArgumentException	$.length < 2
833	211	8	TTestImpl.java	t	sampleStats	StatisticalSummary	0	IllegalArgumentException	$ == null
833	211	8	TTestImpl.java	t	sampleStats	StatisticalSummary	0	IllegalArgumentException	$.getN() < 2
834	253	8	TTestImpl.java	homoscedasticT	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
834	253	8	TTestImpl.java	homoscedasticT	sample1	double[]	0	IllegalArgumentException	$ == null
834	253	8	TTestImpl.java	homoscedasticT	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
834	253	8	TTestImpl.java	homoscedasticT	sample2	double[]	0	IllegalArgumentException	$ == null
834	253	8	TTestImpl.java	homoscedasticT	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
835	292	8	TTestImpl.java	t	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
835	292	8	TTestImpl.java	t	sample1	double[]	0	IllegalArgumentException	$ == null
835	292	8	TTestImpl.java	t	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
835	292	8	TTestImpl.java	t	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
835	292	8	TTestImpl.java	t	sample2	double[]	0	IllegalArgumentException	$ == null
836	335	8	TTestImpl.java	t	sampleStats1	StatisticalSummary	0	IllegalArgumentException	$ == null
836	335	8	TTestImpl.java	t	sampleStats1	StatisticalSummary	0	IllegalArgumentException	Math.min($.getN(), sampleStats2.getN()) < 2
836	335	8	TTestImpl.java	t	sampleStats2	StatisticalSummary	0	IllegalArgumentException	Math.min(sampleStats1.getN(), $.getN()) < 2
836	335	8	TTestImpl.java	t	sampleStats2	StatisticalSummary	0	IllegalArgumentException	$ == null
837	383	8	TTestImpl.java	homoscedasticT	sampleStats1	StatisticalSummary	0	IllegalArgumentException	$ == null
837	383	8	TTestImpl.java	homoscedasticT	sampleStats1	StatisticalSummary	0	IllegalArgumentException	Math.min($.getN(), sampleStats2.getN()) < 2
837	383	8	TTestImpl.java	homoscedasticT	sampleStats2	StatisticalSummary	0	IllegalArgumentException	Math.min(sampleStats1.getN(), $.getN()) < 2
837	383	8	TTestImpl.java	homoscedasticT	sampleStats2	StatisticalSummary	0	IllegalArgumentException	$ == null
838	421	8	TTestImpl.java	tTest	THIS	TTestImpl	0	IllegalArgumentException	sample.$.length < 2
838	421	8	TTestImpl.java	tTest	sample	double[]	0	IllegalArgumentException	$.length < 2
838	421	8	TTestImpl.java	tTest	sample	double[]	0	IllegalArgumentException	$ == null
839	465	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ <= 0
839	465	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ > 0.5
840	501	8	TTestImpl.java	tTest	sampleStats	StatisticalSummary	0	IllegalArgumentException	$.getN() < 2
840	501	8	TTestImpl.java	tTest	sampleStats	StatisticalSummary	0	IllegalArgumentException	$ == null
841	547	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ <= 0
841	547	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ > 0.5
842	591	8	TTestImpl.java	tTest	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
842	591	8	TTestImpl.java	tTest	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
842	591	8	TTestImpl.java	tTest	sample1	double[]	0	IllegalArgumentException	$ == null
842	591	8	TTestImpl.java	tTest	sample2	double[]	0	IllegalArgumentException	$ == null
842	591	8	TTestImpl.java	tTest	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
843	635	8	TTestImpl.java	homoscedasticTTest	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
843	635	8	TTestImpl.java	homoscedasticTTest	sample1	double[]	0	IllegalArgumentException	$ == null
843	635	8	TTestImpl.java	homoscedasticTTest	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
843	635	8	TTestImpl.java	homoscedasticTTest	sample2	double[]	0	IllegalArgumentException	$ == null
843	635	8	TTestImpl.java	homoscedasticTTest	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
844	700	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ <= 0
844	700	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ > 0.5
845	760	8	TTestImpl.java	homoscedasticTTest	alpha	double	0	IllegalArgumentException	$ <= 0
845	760	8	TTestImpl.java	homoscedasticTTest	alpha	double	0	IllegalArgumentException	$ > 0.5
846	802	8	TTestImpl.java	tTest	sampleStats1	StatisticalSummary	0	IllegalArgumentException	Math.min($.getN(), sampleStats2.getN()) < 2
846	802	8	TTestImpl.java	tTest	sampleStats1	StatisticalSummary	0	IllegalArgumentException	$ == null
846	802	8	TTestImpl.java	tTest	sampleStats2	StatisticalSummary	0	IllegalArgumentException	$ == null
846	802	8	TTestImpl.java	tTest	sampleStats2	StatisticalSummary	0	IllegalArgumentException	Math.min(sampleStats1.getN(), $.getN()) < 2
847	847	8	TTestImpl.java	homoscedasticTTest	sampleStats1	StatisticalSummary	0	IllegalArgumentException	$ == null
847	847	8	TTestImpl.java	homoscedasticTTest	sampleStats1	StatisticalSummary	0	IllegalArgumentException	Math.min($.getN(), sampleStats2.getN()) < 2
847	847	8	TTestImpl.java	homoscedasticTTest	sampleStats2	StatisticalSummary	0	IllegalArgumentException	Math.min(sampleStats1.getN(), $.getN()) < 2
847	847	8	TTestImpl.java	homoscedasticTTest	sampleStats2	StatisticalSummary	0	IllegalArgumentException	$ == null
848	913	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ <= 0
848	913	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ > 0.5
755	85	8	ThirdMoment.java	increment	THIS	ThirdMoment	0	DEF	$.n < 1
44795	96	6	ThreeEighthesStepInterpolator.java	computeInterpolatedState	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
44795	96	6	ThreeEighthesStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
6	143	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof Number
6	143	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof String
7	147	12	TransformerMap.java	transform	trans	NumberTransformer	0	DEF	$ != null
1229	72	8	TrapezoidIntegrator.java	stage	n	int	1	RET	$ == 0
44848	79	12	TrapezoidIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
44848	79	12	TrapezoidIntegrator.java	stage	np	long	0	NIL-FOR	i < $
44849	112	8	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	NIL-WHILE	i <= $.maximalIterationCount
44849	112	8	TrapezoidIntegrator.java	integrate	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1230	114	12	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	RET	i >= $.minimalIterationCount
1230	114	12	TrapezoidIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
1231	115	16	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	RET	Math.abs(t - oldt) <= Math.abs($.relativeAccuracy * oldt)
1231	115	16	TrapezoidIntegrator.java	integrate	t	double	0	RET	Math.abs($ - oldt) <= Math.abs(relativeAccuracy * oldt)
1231	115	16	TrapezoidIntegrator.java	integrate	oldt	double	0	RET	Math.abs(t - $) <= Math.abs(relativeAccuracy * $)
1232	134	8	TrapezoidIntegrator.java	verifyIterationCount	THIS	TrapezoidIntegrator	0	IllegalArgumentException	$.maximalIterationCount > 64
408	70	8	TriDiagonalTransformer.java	TriDiagonalTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
409	93	8	TriDiagonalTransformer.java	getQ	THIS	TriDiagonalTransformer	0	DEF	$.cachedQ == null
410	106	8	TriDiagonalTransformer.java	getQT	THIS	TriDiagonalTransformer	0	DEF	$.cachedQt == null
44043	112	12	TriDiagonalTransformer.java	getQT	k	int	0	NIL-FOR	$ >= 1
411	116	16	TriDiagonalTransformer.java	getQT	hK	double[]	0	DEF	$[k] != 0.0
411	116	16	TriDiagonalTransformer.java	getQT	k	int	0	DEF	hK[$] != 0.0
44044	119	20	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
44044	119	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
44045	122	20	TriDiagonalTransformer.java	getQT	j	int	0	NIL-FOR	$ < m
44045	122	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	j < $
44046	124	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
44046	124	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
44047	129	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
44047	129	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
412	150	8	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	$.cachedT == null
44048	154	12	TriDiagonalTransformer.java	getT	i	int	0	NIL-FOR	$ < m
44048	154	12	TriDiagonalTransformer.java	getT	m	int	0	NIL-FOR	i < $
413	156	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ > 0
414	159	16	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	i < $.main.$.length - 1
414	159	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ < main.length - 1
44049	209	8	TriDiagonalTransformer.java	transform	k	int	0	NIL-FOR	$ < m - 1
44049	209	8	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	k < $ - 1
44050	215	12	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
44050	215	12	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
415	221	12	TriDiagonalTransformer.java	transform	a	double	0	DEF	$ != 0.0
44051	232	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
44051	232	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
44052	236	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
44052	236	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
44053	246	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
44053	246	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
44054	252	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
44054	252	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
44055	258	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
44055	258	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
44056	260	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
44056	260	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
932	45	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	THIS	UncorrelatedRandomVectorGenerator	0	IllegalArgumentException	mean.$.length != standardDeviation.$.length
932	45	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	mean	double[]	0	IllegalArgumentException	$.length != standardDeviation.length
932	45	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	standardDeviation	double[]	0	IllegalArgumentException	mean.length != $.length
44568	74	4	UncorrelatedRandomVectorGenerator.java	nextVector	THIS	UncorrelatedRandomVectorGenerator	0	NIL-FOR	i < random.$.length
44568	74	4	UncorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < random.length
44568	74	4	UncorrelatedRandomVectorGenerator.java	nextVector	random	double[]	0	NIL-FOR	i < $.length
1212	77	8	UnivariateRealIntegratorImpl.java	UnivariateRealIntegratorImpl	f	UnivariateRealFunction	0	IllegalArgumentException	$ == null
1213	101	8	UnivariateRealIntegratorImpl.java	getResult	THIS	UnivariateRealIntegratorImpl	1	RET	$.resultComputed
1214	115	8	UnivariateRealIntegratorImpl.java	getIterationCount	THIS	UnivariateRealIntegratorImpl	1	RET	$.resultComputed
1215	239	8	UnivariateRealIntegratorImpl.java	verifyInterval	lower	double	0	IllegalArgumentException	$ >= upper
1215	239	8	UnivariateRealIntegratorImpl.java	verifyInterval	upper	double	0	IllegalArgumentException	lower >= $
1216	252	8	UnivariateRealIntegratorImpl.java	verifyIterationCount	THIS	UnivariateRealIntegratorImpl	0	IllegalArgumentException	$.isSequence(0, $.minimalIterationCount, $.maximalIterationCount+1)
1191	98	8	UnivariateRealSolverImpl.java	UnivariateRealSolverImpl	f	UnivariateRealFunction	0	DEF	$ == null
1192	141	8	UnivariateRealSolverImpl.java	getResult	THIS	UnivariateRealSolverImpl	1	RET	$.resultComputed
1193	156	8	UnivariateRealSolverImpl.java	getIterationCount	THIS	UnivariateRealSolverImpl	1	RET	$.resultComputed
1194	325	8	UnivariateRealSolverImpl.java	verifyInterval	lower	double	0	IllegalArgumentException	$ >= upper
1194	325	8	UnivariateRealSolverImpl.java	verifyInterval	upper	double	0	IllegalArgumentException	lower >= $
1195	342	8	UnivariateRealSolverImpl.java	verifySequence	THIS	UnivariateRealSolverImpl	0	IllegalArgumentException	$.isSequence(lower, initial, upper)
1195	342	8	UnivariateRealSolverImpl.java	verifySequence	lower	double	0	IllegalArgumentException	isSequence($, initial, upper)
1195	342	8	UnivariateRealSolverImpl.java	verifySequence	initial	double	0	IllegalArgumentException	isSequence(lower, $, upper)
1195	342	8	UnivariateRealSolverImpl.java	verifySequence	upper	double	0	IllegalArgumentException	isSequence(lower, initial, $)
1196	364	8	UnivariateRealSolverImpl.java	verifyBracketing	THIS	UnivariateRealSolverImpl	0	IllegalArgumentException	$.isBracketing(lower, upper, f)
1196	364	8	UnivariateRealSolverImpl.java	verifyBracketing	lower	double	0	IllegalArgumentException	isBracketing($, upper, f)
1196	364	8	UnivariateRealSolverImpl.java	verifyBracketing	upper	double	0	IllegalArgumentException	isBracketing(lower, $, f)
1196	364	8	UnivariateRealSolverImpl.java	verifyBracketing	f	UnivariateRealFunction	0	IllegalArgumentException	isBracketing(lower, upper, $)
1256	171	8	UnivariateRealSolverUtils.java	bracket	function	UnivariateRealFunction	0	IllegalArgumentException	$ == null
1257	174	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	IllegalArgumentException	$ <= 0
1258	178	8	UnivariateRealSolverUtils.java	bracket	initial	double	0	IllegalArgumentException	$ < lowerBound
1258	178	8	UnivariateRealSolverUtils.java	bracket	initial	double	0	IllegalArgumentException	$ > upperBound
1258	178	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	IllegalArgumentException	initial < $
1258	178	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	IllegalArgumentException	$ >= upperBound
1258	178	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	IllegalArgumentException	initial > $
1258	178	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	IllegalArgumentException	lowerBound >= $
44854	189	8	UnivariateRealSolverUtils.java	bracket	a	double	0	NIL-DOWHILE	$ > lowerBound
44854	189	8	UnivariateRealSolverUtils.java	bracket	b	double	0	NIL-DOWHILE	$ < upperBound
44854	189	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	NIL-DOWHILE	$ * fb > 0.0
44854	189	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	NIL-DOWHILE	fa * $ > 0.0
44854	189	8	UnivariateRealSolverUtils.java	bracket	numIterations	int	0	NIL-DOWHILE	$ < maximumIterations
44854	189	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	NIL-DOWHILE	a > $
44854	189	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	NIL-DOWHILE	b < $
44854	189	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	NIL-DOWHILE	numIterations < $
1259	199	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	ConvergenceException	$ * fb >= 0.0
1259	199	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	ConvergenceException	fa * $ >= 0.0
1260	230	8	UnivariateRealSolverUtils.java	setup	f	UnivariateRealFunction	0	IllegalArgumentException	$ == null
1261	234	8	UnivariateRealSolverUtils.java	setup	THIS	UnivariateRealSolverUtils	0	DEF	$.factory == null
44569	131	8	ValueServer.java	fill	THIS	ValueServer	0	NIL-FOR	i < values.$.length
44569	131	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < values.length
44569	131	8	ValueServer.java	fill	values	double[]	0	NIL-FOR	i < $.length
44570	146	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < length
44570	146	8	ValueServer.java	fill	length	int	0	NIL-FOR	i < $
933	243	8	ValueServer.java	resetReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
934	260	8	ValueServer.java	closeReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
935	307	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	DEF	$.empiricalDistribution.getBinStats().size() == 0
935	307	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	DEF	$.empiricalDistribution == null
936	334	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	$.filePointer == null
937	337	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	(str = $.filePointer.readLine()) == null
937	337	8	ValueServer.java	getNextReplay	str	String	0	DEF	($ = filePointer.readLine()) == null
938	341	12	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	(str = $.filePointer.readLine()) == null
938	341	12	ValueServer.java	getNextReplay	str	String	0	DEF	($ = filePointer.readLine()) == null
722	154	8	Variance.java	increment	THIS	Variance	0	DEF	$.incMoment
723	163	12	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 0
724	165	19	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 1
725	168	16	Variance.java	getResult	THIS	Variance	1	RET	$.isBiasCorrected
726	187	8	Variance.java	clear	THIS	Variance	0	DEF	$.incMoment
727	209	8	Variance.java	evaluate	values	double[]	0	IllegalArgumentException	$ == null
728	239	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
728	239	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
728	239	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
728	239	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
729	241	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
730	243	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
731	283	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
731	283	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
731	283	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
731	283	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
732	284	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
733	286	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
44495	290	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
44495	290	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
44495	290	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
734	296	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
174	269	4	Vector3D.java	normalize	s	double	0	DEF	$ == 0
175	294	4	Vector3D.java	orthogonal	threshold	double	0	DEF	$ == 0
176	298	4	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x >= -threshold
176	298	4	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x <= threshold
176	298	4	Vector3D.java	orthogonal	threshold	double	1	RET	x >= -$
176	298	4	Vector3D.java	orthogonal	threshold	double	1	RET	x <= $
177	301	11	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y >= -threshold
177	301	11	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y <= threshold
177	301	11	Vector3D.java	orthogonal	threshold	double	0	RET	y >= -$
177	301	11	Vector3D.java	orthogonal	threshold	double	0	RET	y <= $
178	324	4	Vector3D.java	angle	normProduct	double	0	DEF	$ == 0
179	330	4	Vector3D.java	angle	dot	double	0	RET	$ > threshold
179	330	4	Vector3D.java	angle	dot	double	0	RET	$ < -threshold
179	330	4	Vector3D.java	angle	threshold	double	0	RET	dot > $
179	330	4	Vector3D.java	angle	threshold	double	0	RET	dot < -$
180	333	6	Vector3D.java	angle	dot	double	0	RET	$ >= 0
181	398	4	Vector3D.java	equals	THIS	Vector3D	0	RET	$ == other
181	398	4	Vector3D.java	equals	other	Object	0	RET	this == $
182	402	4	Vector3D.java	equals	other	Object	0	RET	$ == null
183	409	6	Vector3D.java	equals	rhs	Vector3D	0	RET	$.isNaN()
184	430	6	Vector3D.java	hashCode	THIS	Vector3D	0	RET	$.isNaN()
124	239	8	Vector3DFormat.java	format	obj	Object	0	RET	$ instanceof Vector3D
125	257	8	Vector3DFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
126	276	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedPrefix, pos)
126	276	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedPrefix, pos)
126	276	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedPrefix, $)
127	283	8	Vector3DFormat.java	parse	x	Number	0	RET	$ == null
128	292	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSeparator, pos)
128	292	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSeparator, pos)
128	292	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSeparator, $)
129	297	8	Vector3DFormat.java	parse	y	Number	0	RET	$ == null
130	306	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSeparator, pos)
130	306	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSeparator, pos)
130	306	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSeparator, $)
131	311	8	Vector3DFormat.java	parse	z	Number	0	RET	$ == null
132	320	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSuffix, pos)
132	320	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSuffix, pos)
132	320	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSuffix, $)
744	66	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	DimensionMismatchException	v.$.length != $.sums.$.length
744	66	8	VectorialCovariance.java	increment	v	double[]	0	DimensionMismatchException	$.length != sums.length
44499	70	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	NIL-FOR	i < v.$.length
44499	70	8	VectorialCovariance.java	increment	i	int	0	NIL-FOR	$ < v.length
44499	70	8	VectorialCovariance.java	increment	v	double[]	0	NIL-FOR	i < $.length
44500	72	12	VectorialCovariance.java	increment	j	int	0	NIL-FOR	$ <= i
44500	72	12	VectorialCovariance.java	increment	i	int	0	NIL-FOR	j <= $
745	88	8	VectorialCovariance.java	getResult	THIS	VectorialCovariance	0	DEF	$.n > 1
44501	91	12	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	$ < dimension
44501	91	12	VectorialCovariance.java	getResult	dimension	int	0	NIL-FOR	i < $
44502	92	16	VectorialCovariance.java	getResult	j	int	0	NIL-FOR	$ <= i
44502	92	16	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	j <= $
44504	41	8	VectorialMean.java	VectorialMean	i	int	0	NIL-FOR	$ < dimension
44504	41	8	VectorialMean.java	VectorialMean	dimension	int	0	NIL-FOR	i < $
756	52	8	VectorialMean.java	increment	THIS	VectorialMean	0	DimensionMismatchException	v.$.length != $.means.$.length
756	52	8	VectorialMean.java	increment	v	double[]	0	DimensionMismatchException	$.length != means.length
44505	55	8	VectorialMean.java	increment	THIS	VectorialMean	0	NIL-FOR	i < v.$.length
44505	55	8	VectorialMean.java	increment	i	int	0	NIL-FOR	$ < v.length
44505	55	8	VectorialMean.java	increment	v	double[]	0	NIL-FOR	i < $.length
44506	66	8	VectorialMean.java	getResult	THIS	VectorialMean	0	NIL-FOR	i < result.$.length
44506	66	8	VectorialMean.java	getResult	i	int	0	NIL-FOR	$ < result.length
44506	66	8	VectorialMean.java	getResult	result	double[]	0	NIL-FOR	i < $.length
328	60	8	WeibullDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
329	98	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ > 1.0
329	98	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ < 0.0
330	101	15	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
331	103	16	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
332	116	8	WeibullDistributionImpl.java	setShape	alpha	double	0	IllegalArgumentException	$ <= 0.0
333	128	8	WeibullDistributionImpl.java	setScale	beta	double	0	IllegalArgumentException	$ <= 0.0
334	75	8	ZipfDistributionImpl.java	setNumberOfElements	n	int	0	DEF	$ <= 0
335	102	8	ZipfDistributionImpl.java	setExponent	s	double	0	DEF	$ <= 0.0
336	116	8	ZipfDistributionImpl.java	probability	THIS	ZipfDistributionImpl	0	RET	x > $.getNumberOfElements()
336	116	8	ZipfDistributionImpl.java	probability	x	int	0	RET	$ <= 0
336	116	8	ZipfDistributionImpl.java	probability	x	int	0	RET	$ > getNumberOfElements()
337	131	8	ZipfDistributionImpl.java	cumulativeProbability	x	int	1	RET	$ <= 0
338	133	15	ZipfDistributionImpl.java	cumulativeProbability	THIS	ZipfDistributionImpl	0	RET	x >= $.getNumberOfElements()
338	133	15	ZipfDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ >= getNumberOfElements()
43959	177	8	ZipfDistributionImpl.java	generalizedHarmonic	k	int	0	NIL-FOR	$ > 0
