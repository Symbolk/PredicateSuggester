id	line	column	filename	methodname	varname	vartype	else	return	right
509	62	8	AVLTree.java	insert	element	T	0	DEF	$ != null
510	63	12	AVLTree.java	insert	THIS	AVLTree	1	DEF	$.top == null
511	82	8	AVLTree.java	delete	element	T	0	RET	$ != null
33125	83	12	AVLTree.java	delete	node	Node	0	NIL-FOR	$ != null
512	86	16	AVLTree.java	delete	THIS	AVLTree	1	RET	node.$.element == element
512	86	16	AVLTree.java	delete	node	Node	1	RET	$.element == element
512	86	16	AVLTree.java	delete	element	T	1	RET	node.element == $
513	89	23	AVLTree.java	delete	THIS	AVLTree	0	RET	node.$.element.compareTo(element) > 0
513	89	23	AVLTree.java	delete	node	Node	0	RET	$.element.compareTo(element) > 0
513	89	23	AVLTree.java	delete	element	T	0	RET	node.element.compareTo($) > 0
33126	153	8	AVLTree.java	getNotSmaller	node	Node	0	NIL-FOR	$ != null
514	154	12	AVLTree.java	getNotSmaller	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) < 0
514	154	12	AVLTree.java	getNotSmaller	node	Node	1	RET	$.element.compareTo(reference) < 0
514	154	12	AVLTree.java	getNotSmaller	reference	T	1	RET	node.element.compareTo($) < 0
515	155	16	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.right == null
515	155	16	AVLTree.java	getNotSmaller	node	Node	0	RET	$.right == null
516	161	16	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.left == null
516	161	16	AVLTree.java	getNotSmaller	node	Node	0	RET	$.left == null
33127	184	8	AVLTree.java	getNotLarger	node	Node	0	NIL-FOR	$ != null
517	185	12	AVLTree.java	getNotLarger	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) > 0
517	185	12	AVLTree.java	getNotLarger	node	Node	1	RET	$.element.compareTo(reference) > 0
517	185	12	AVLTree.java	getNotLarger	reference	T	1	RET	node.element.compareTo($) > 0
518	186	16	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.left == null
518	186	16	AVLTree.java	getNotLarger	node	Node	0	RET	$.left == null
519	192	16	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.right == null
519	192	16	AVLTree.java	getNotLarger	node	Node	0	RET	$.right == null
947	79	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
947	79	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
948	115	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	THIS	AbstractContinuousDistribution	0	RET	FastMath.abs(rootFindingFunction.value(lowerBound)) < $.getSolverAbsoluteAccuracy()
948	115	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	FastMath.abs($.value(lowerBound)) < getSolverAbsoluteAccuracy()
948	115	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	lowerBound	double	0	RET	FastMath.abs(rootFindingFunction.value($)) < getSolverAbsoluteAccuracy()
949	118	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	THIS	AbstractContinuousDistribution	0	RET	FastMath.abs(rootFindingFunction.value(upperBound)) < $.getSolverAbsoluteAccuracy()
949	118	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	FastMath.abs($.value(upperBound)) < getSolverAbsoluteAccuracy()
949	118	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	upperBound	double	0	RET	FastMath.abs(rootFindingFunction.value($)) < getSolverAbsoluteAccuracy()
950	169	8	AbstractContinuousDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
33161	174	8	AbstractContinuousDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
33161	174	8	AbstractContinuousDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
999	74	8	AbstractDistribution.java	cumulativeProbability	x0	double	0	NumberIsTooLargeException	$ > x1
999	74	8	AbstractDistribution.java	cumulativeProbability	x1	double	0	NumberIsTooLargeException	x0 > $
1000	97	8	AbstractDistribution.java	getNumericalMean	THIS	AbstractDistribution	0	DEF	$.numericalMeanIsCalculated
1001	123	8	AbstractDistribution.java	getNumericalVariance	THIS	AbstractDistribution	0	DEF	$.numericalVarianceIsCalculated
1184	76	8	AbstractFieldMatrix.java	AbstractFieldMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ <= 0
1185	80	8	AbstractFieldMatrix.java	AbstractFieldMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ <= 0
1186	97	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NullArgumentException	$ == null
1187	100	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1187	100	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$.length == 0
1188	103	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d[0].length == 0
1188	103	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$[0].length == 0
1189	118	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1189	118	8	AbstractFieldMatrix.java	extractField	d	T[]	0	NoDataException	$.length == 0
1190	139	8	AbstractFieldMatrix.java	buildArray	columns	int	0	RET	$ < 0
33508	145	8	AbstractFieldMatrix.java	buildArray	THIS	AbstractFieldMatrix	0	NIL-FOR	i < array.$.length
33508	145	8	AbstractFieldMatrix.java	buildArray	i	int	0	NIL-FOR	$ < array.length
33508	145	8	AbstractFieldMatrix.java	buildArray	array	T[][]	0	NIL-FOR	i < $.length
33509	187	8	AbstractFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
33509	187	8	AbstractFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
33510	188	12	AbstractFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
33510	188	12	AbstractFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
33511	204	8	AbstractFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
33511	204	8	AbstractFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
33512	205	12	AbstractFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
33512	205	12	AbstractFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
33513	219	8	AbstractFieldMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
33513	219	8	AbstractFieldMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
33514	220	12	AbstractFieldMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
33514	220	12	AbstractFieldMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
33515	233	8	AbstractFieldMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
33515	233	8	AbstractFieldMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
33516	234	12	AbstractFieldMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
33516	234	12	AbstractFieldMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
33517	251	8	AbstractFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
33517	251	8	AbstractFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
33518	252	12	AbstractFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
33518	252	12	AbstractFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
33519	254	16	AbstractFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
33519	254	16	AbstractFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1191	271	8	AbstractFieldMatrix.java	power	p	int	0	IllegalArgumentException	$ < 0
1192	275	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NonSquareMatrixException	$.isSquare()
1193	279	8	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 0
1194	283	8	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 1
33520	300	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
33520	300	8	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
33520	300	8	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1195	301	12	AbstractFieldMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1195	301	12	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
33521	312	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
33521	312	8	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
33521	312	8	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
33522	331	8	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	i < data.$.length
33522	331	8	AbstractFieldMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
33522	331	8	AbstractFieldMatrix.java	getData	data	T[][]	0	NIL-FOR	i < $.length
33523	333	12	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	j < dataI.$.length
33523	333	12	AbstractFieldMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
33523	333	12	AbstractFieldMatrix.java	getData	dataI	T[]	0	NIL-FOR	j < $.length
33524	348	8	AbstractFieldMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
33524	348	8	AbstractFieldMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
33525	349	12	AbstractFieldMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
33525	349	12	AbstractFieldMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1196	390	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1196	390	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1196	390	8	AbstractFieldMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1196	390	8	AbstractFieldMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1196	390	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
1196	390	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
1197	429	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1197	429	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < selectedColumns.$.length
1197	429	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1197	429	8	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	MatrixDimensionMismatchException	destination[0].length < $.length
1197	429	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
1197	429	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < selectedColumns.length
33526	438	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	i < selectedRows.$.length
33526	438	8	AbstractFieldMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
33526	438	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
33527	440	12	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	j < selectedColumns.$.length
33527	440	12	AbstractFieldMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
33527	440	12	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1198	449	8	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	NullArgumentException	$ == null
1199	453	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1200	458	8	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
33528	462	8	AbstractFieldMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
33528	462	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1201	463	12	AbstractFieldMatrix.java	setSubMatrix	THIS	AbstractFieldMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1201	463	12	AbstractFieldMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1201	463	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1201	463	12	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[r].length != nCols
33529	473	8	AbstractFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
33529	473	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
33530	474	12	AbstractFieldMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
33530	474	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
33531	485	8	AbstractFieldMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
33531	485	8	AbstractFieldMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1202	497	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1202	497	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1202	497	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
33532	503	8	AbstractFieldMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
33532	503	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
33533	515	8	AbstractFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
33533	515	8	AbstractFieldMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1203	527	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1203	527	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
1203	527	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
33534	533	8	AbstractFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
33534	533	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1204	548	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1204	548	8	AbstractFieldMatrix.java	setRowVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nCols
33535	552	8	AbstractFieldMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
33535	552	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1205	567	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1205	567	8	AbstractFieldMatrix.java	setColumnVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nRows
33536	571	8	AbstractFieldMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
33536	571	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
33537	582	8	AbstractFieldMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
33537	582	8	AbstractFieldMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1206	594	8	AbstractFieldMatrix.java	setRow	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1206	594	8	AbstractFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1206	594	8	AbstractFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
33538	597	8	AbstractFieldMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
33538	597	8	AbstractFieldMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
33539	608	8	AbstractFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
33539	608	8	AbstractFieldMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1207	620	8	AbstractFieldMatrix.java	setColumn	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1207	620	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1207	620	8	AbstractFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
33540	623	8	AbstractFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
33540	623	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1208	671	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1208	671	8	AbstractFieldMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
33541	675	8	AbstractFieldMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
33541	675	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1209	686	8	AbstractFieldMatrix.java	operate	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1209	686	8	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1209	686	8	AbstractFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
33542	691	8	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
33542	691	8	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
33543	693	12	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
33543	693	12	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1210	709	12	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1210	709	12	AbstractFieldMatrix.java	operate	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nCols
33544	714	12	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
33544	714	12	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
33545	716	16	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
33545	716	16	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1211	731	8	AbstractFieldMatrix.java	preMultiply	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1211	731	8	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1211	731	8	AbstractFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
33546	736	8	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
33546	736	8	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
33547	738	12	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
33547	738	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1212	754	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1212	754	12	AbstractFieldMatrix.java	preMultiply	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nRows
33548	759	12	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
33548	759	12	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
33549	761	16	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
33549	761	16	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
33550	776	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
33550	776	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
33551	777	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
33551	777	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
33552	791	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
33552	791	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
33553	792	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
33553	792	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
33554	806	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
33554	806	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
33555	807	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
33555	807	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
33556	823	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
33556	823	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
33557	824	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
33557	824	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
33558	836	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
33558	836	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
33559	837	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
33559	837	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
33560	851	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
33560	851	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
33561	852	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
33561	852	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
33562	866	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
33562	866	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
33563	867	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
33563	867	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
33564	883	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
33564	883	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
33565	884	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
33565	884	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
33566	928	8	AbstractFieldMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
33566	928	8	AbstractFieldMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
1213	929	12	AbstractFieldMatrix.java	toString	i	int	0	DEF	$ > 0
33567	933	12	AbstractFieldMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
33567	933	12	AbstractFieldMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
1214	934	16	AbstractFieldMatrix.java	toString	j	int	0	DEF	$ > 0
1215	956	8	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	object == $
1215	956	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ == this
1216	959	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ instanceof FieldMatrix<?> == false
1217	965	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getColumnDimension() != nCols
1217	965	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getRowDimension() != nRows
1217	965	8	AbstractFieldMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1217	965	8	AbstractFieldMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
33568	968	8	AbstractFieldMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
33568	968	8	AbstractFieldMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
33569	969	12	AbstractFieldMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
33569	969	12	AbstractFieldMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1218	970	16	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	$.getEntry(row, col).equals(m.getEntry(row, col))
1218	970	16	AbstractFieldMatrix.java	equals	col	int	0	RET	getEntry(row, $).equals(m.getEntry(row, $))
1218	970	16	AbstractFieldMatrix.java	equals	row	int	0	RET	getEntry($, col).equals(m.getEntry($, col))
1218	970	16	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	getEntry(row, col).equals($.getEntry(row, col))
33570	990	8	AbstractFieldMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
33570	990	8	AbstractFieldMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
33571	991	12	AbstractFieldMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
33571	991	12	AbstractFieldMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
1219	1005	8	AbstractFieldMatrix.java	checkRowIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1219	1005	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1219	1005	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= getRowDimension()
1220	1018	8	AbstractFieldMatrix.java	checkColumnIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1220	1018	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= getColumnDimension()
1220	1018	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1221	1040	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1221	1040	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1222	1047	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1222	1047	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1223	1064	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1223	1064	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1224	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedColumns.$.length == 0
1224	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedRows.$.length == 0
1224	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1224	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1225	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1225	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1225	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1225	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1226	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1226	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1226	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1226	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1227	1119	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	THIS	AbstractFieldMatrix	0	DimensionMismatchException	$.getColumnDimension() != m.getRowDimension()
1227	1119	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	m	FieldMatrix<T>	0	DimensionMismatchException	getColumnDimension() != $.getRowDimension()
850	120	8	AbstractFormat.java	setDenominatorFormat	format	NumberFormat	0	NullArgumentException	$ == null
851	132	8	AbstractFormat.java	setNumeratorFormat	format	NumberFormat	0	NullArgumentException	$ == null
852	162	9	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
852	162	9	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
33156	164	13	AbstractFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
33156	164	13	AbstractFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
33156	164	13	AbstractFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
853	169	13	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
853	169	13	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
901	87	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	0	NumberIsTooSmallException	x1 < $
901	87	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	double	0	NumberIsTooSmallException	$ < x0
902	91	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	1	RET	FastMath.floor($) < $
903	125	8	AbstractIntegerDistribution.java	probability	fl	double	1	RET	$ == x
903	125	8	AbstractIntegerDistribution.java	probability	x	double	1	RET	fl == $
904	144	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	int	0	NumberIsTooSmallException	x1 < $
904	144	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	int	0	NumberIsTooSmallException	$ < x0
905	163	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1
905	163	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0
33158	172	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	0	NIL-WHILE	$ < x1
33158	172	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	0	NIL-WHILE	x0 < $
906	175	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	1	DEF	$ > p
906	175	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	1	DEF	pm > $
907	177	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x1
907	177	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	1	DEF	xm == $
908	187	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x0
908	187	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	1	DEF	xm == $
33159	200	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	0	NIL-WHILE	$ > p
33159	200	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	pm > $
909	242	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
33160	247	8	AbstractIntegerDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
33160	247	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
910	268	8	AbstractIntegerDistribution.java	checkedCumulativeProbability	result	double	0	MathException	Double.isNaN($)
2226	204	8	AbstractIntegrator.java	computeDerivatives	THIS	AbstractIntegrator	0	MaxEvaluationsExceededException	++$.evaluations > $.maxEvaluations
2227	241	12	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.statesInitialized
2228	260	16	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.state.evaluateStep(interpolator)
2228	260	16	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	state.evaluateStep($)
34383	266	12	AbstractIntegrator.java	acceptStep	occuringEvents	SortedSet<EventState>	0	NIL-WHILE	$.isEmpty()
2229	289	16	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	RET	$.isLastStep
2230	295	16	AbstractIntegrator.java	acceptStep	currentEvent	EventState	0	RET	$.reset(eventT, eventY)
2230	295	16	AbstractIntegrator.java	acceptStep	eventT	double	0	RET	currentEvent.reset($, eventY)
2230	295	16	AbstractIntegrator.java	acceptStep	eventY	double[]	0	RET	currentEvent.reset(eventT, $)
2231	310	16	AbstractIntegrator.java	acceptStep	currentEvent	EventState	0	DEF	$.evaluateStep(interpolator)
2231	310	16	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	currentEvent.evaluateStep($)
2232	333	12	AbstractIntegrator.java	acceptStep	cause	Throwable	0	DEF	$ instanceof MathUserException
2232	333	12	AbstractIntegrator.java	acceptStep	cause	Throwable	0	DEF	$ != null
2233	356	8	AbstractIntegrator.java	sanityChecks	THIS	AbstractIntegrator	0	IntegratorException	ode.getDimension() != y0.$.length
2233	356	8	AbstractIntegrator.java	sanityChecks	ode	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y0.length
2233	356	8	AbstractIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	ode.getDimension() != $.length
2234	361	8	AbstractIntegrator.java	sanityChecks	THIS	AbstractIntegrator	0	IntegratorException	ode.getDimension() != y.$.length
2234	361	8	AbstractIntegrator.java	sanityChecks	ode	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y.length
2234	361	8	AbstractIntegrator.java	sanityChecks	y	double[]	0	IntegratorException	ode.getDimension() != $.length
2235	366	8	AbstractIntegrator.java	sanityChecks	t0	double	0	IntegratorException	FastMath.abs(t - $) <= 1.0e-12 * FastMath.max(FastMath.abs($), FastMath.abs(t))
2235	366	8	AbstractIntegrator.java	sanityChecks	t	double	0	IntegratorException	FastMath.abs($ - t0) <= 1.0e-12 * FastMath.max(FastMath.abs(t0), FastMath.abs($))
1532	104	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	$.weightedResidualJacobian.$.length != $.rows
33963	110	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
33963	110	8	AbstractLeastSquaresOptimizer.java	updateJacobian	i	int	0	NIL-FOR	$ < rows
33964	113	12	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
33964	113	12	AbstractLeastSquaresOptimizer.java	updateJacobian	j	int	0	NIL-FOR	$ < cols
1533	129	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	$.objective.$.length != $.rows
33965	137	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
33965	137	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	i	int	0	NIL-FOR	$ < rows
33966	184	8	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.cols
33966	184	8	AbstractLeastSquaresOptimizer.java	getCovariances	i	int	0	NIL-FOR	$ < cols
33967	185	12	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
33967	185	12	AbstractLeastSquaresOptimizer.java	getCovariances	j	int	0	NIL-FOR	$ < cols
33968	187	16	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	k < $.rows
33968	187	16	AbstractLeastSquaresOptimizer.java	getCovariances	k	int	0	NIL-FOR	$ < rows
1534	215	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NumberIsTooSmallException	$.rows <= $.cols
33969	222	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < errors.$.length
33969	222	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
33969	222	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
1468	98	8	AbstractLinearOptimizer.java	incrementIterationsCounter	THIS	AbstractLinearOptimizer	0	MaxCountExceededException	++$.iterations > $.maxIterations
1910	93	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	DEF	$ == null
1911	97	8	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	data.$.length != nobs * (nvars + 1)
1911	97	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	DEF	$.length != nobs * (nvars + 1)
1911	97	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	DEF	data.length != $ * (nvars + 1)
1911	97	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	DEF	data.length != nobs * ($ + 1)
1912	101	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	DEF	$ <= nvars
1912	101	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	DEF	nobs <= $
34168	109	8	AbstractMultipleLinearRegression.java	newSampleData	i	int	0	NIL-FOR	$ < nobs
34168	109	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NIL-FOR	i < $
1913	111	12	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	$.noIntercept
34169	114	12	AbstractMultipleLinearRegression.java	newSampleData	j	int	0	NIL-FOR	$ < cols
34169	114	12	AbstractMultipleLinearRegression.java	newSampleData	cols	int	0	NIL-FOR	j < $
1914	129	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	DEF	$ == null
1915	133	8	AbstractMultipleLinearRegression.java	newYSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	y.$.length == 0
1915	133	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	DEF	$.length == 0
1916	164	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	DEF	$ == null
1917	168	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	x.$.length == 0
1917	168	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	DEF	$.length == 0
1918	172	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	1	DEF	$.noIntercept
34170	177	12	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	NIL-FOR	i < x.$.length
34170	177	12	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	NIL-FOR	$ < x.length
34170	177	12	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NIL-FOR	i < $.length
1919	178	16	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	x[i].length != nVars
1919	178	16	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	DEF	x[$].length != nVars
1919	178	16	AbstractMultipleLinearRegression.java	newXSampleData	nVars	int	0	DEF	x[i].length != $
1919	178	16	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	DEF	$[i].length != nVars
1920	205	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	x.$.length != y.$.length
1920	205	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DEF	$ == null
1920	205	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DEF	$.length != y.length
1920	205	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	DEF	$ == null
1920	205	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	DEF	x.length != $.length
1921	211	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	x.$.length == 0
1921	211	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DEF	$.length == 0
1922	215	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	x[0].length + 1 > x.$.length
1922	215	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DEF	$[0].length + 1 > $.length
1923	232	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DEF	x.$.length != covariance.$.length
1923	232	8	AbstractMultipleLinearRegression.java	validateCovarianceData	x	double[][]	0	DEF	$.length != covariance.length
1923	232	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DEF	x.length != $.length
1924	236	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DEF	covariance.$.length != covariance[0].length
1924	236	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DEF	covariance.$.length > 0
1924	236	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DEF	$.length != $[0].length
1924	236	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DEF	$.length > 0
34171	275	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	i	int	0	NIL-FOR	$ < length
34171	275	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	length	int	0	NIL-FOR	i < $
34189	108	8	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	NIL-WHILE	bytesOut < bytes.$.length
34189	108	8	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	NIL-WHILE	$ < bytes.length
34189	108	8	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	bytesOut < $.length
34190	110	10	AbstractRandomGenerator.java	nextBytes	i	int	0	NIL-FOR	$ < 3
1966	111	14	AbstractRandomGenerator.java	nextBytes	i	int	0	DEF	$ > 0
1967	115	14	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	RET	bytesOut == bytes.$.length
1967	115	14	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	RET	$ == bytes.length
1967	115	14	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	RET	bytesOut == $.length
1968	157	8	AbstractRandomGenerator.java	nextInt	n	int	0	NotStrictlyPositiveException	$ <= 0
1969	253	8	AbstractRandomGenerator.java	nextGaussian	THIS	AbstractRandomGenerator	0	RET	Double.isNaN($.cachedNormalDeviate)
34191	261	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	NIL-WHILE	$ >=1
1970	266	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	DEF	$ != 0
1123	52	8	AbstractRealMatrix.java	AbstractRealMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ < 1
1124	55	8	AbstractRealMatrix.java	AbstractRealMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ < 1
33386	74	8	AbstractRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
33386	74	8	AbstractRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
33387	75	12	AbstractRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
33387	75	12	AbstractRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
33388	91	8	AbstractRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
33388	91	8	AbstractRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
33389	92	12	AbstractRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
33389	92	12	AbstractRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
33390	105	8	AbstractRealMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
33390	105	8	AbstractRealMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
33391	106	12	AbstractRealMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
33391	106	12	AbstractRealMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
33392	119	8	AbstractRealMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
33392	119	8	AbstractRealMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
33393	120	12	AbstractRealMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
33393	120	12	AbstractRealMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
33394	137	8	AbstractRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
33394	137	8	AbstractRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
33395	138	12	AbstractRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
33395	138	12	AbstractRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
33396	140	16	AbstractRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
33396	140	16	AbstractRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1125	157	8	AbstractRealMatrix.java	power	p	int	0	IllegalArgumentException	$ < 0
1126	161	8	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NonSquareMatrixException	$.isSquare()
1127	165	8	AbstractRealMatrix.java	power	p	int	0	RET	$ == 0
1128	169	8	AbstractRealMatrix.java	power	p	int	0	RET	$ == 1
33397	186	8	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
33397	186	8	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
33397	186	8	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1129	187	12	AbstractRealMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1129	187	12	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
1130	192	16	AbstractRealMatrix.java	power	maxI	int	0	DEF	$ == -1
33398	201	8	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ <= maxI
33398	201	8	AbstractRealMatrix.java	power	maxI	int	0	NIL-FOR	i <= $
33399	218	8	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	i < data.$.length
33399	218	8	AbstractRealMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
33399	218	8	AbstractRealMatrix.java	getData	data	double[][]	0	NIL-FOR	i < $.length
33400	220	12	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	j < dataI.$.length
33400	220	12	AbstractRealMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
33400	220	12	AbstractRealMatrix.java	getData	dataI	double[]	0	NIL-FOR	j < $.length
33401	299	8	AbstractRealMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
33401	299	8	AbstractRealMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
33402	300	12	AbstractRealMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
33402	300	12	AbstractRealMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1131	337	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1131	337	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1131	337	8	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1131	337	8	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1131	337	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
1131	337	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
1132	373	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1132	373	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < selectedColumns.$.length
1132	373	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1132	373	8	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	MatrixDimensionMismatchException	destination[0].length < $.length
1132	373	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
1132	373	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < selectedColumns.length
33403	380	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	i < selectedRows.$.length
33403	380	8	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
33403	380	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
33404	382	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	j < selectedColumns.$.length
33404	382	12	AbstractRealMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
33404	382	12	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1133	393	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1134	398	8	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
33405	402	8	AbstractRealMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
33405	402	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1135	403	12	AbstractRealMatrix.java	setSubMatrix	THIS	AbstractRealMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1135	403	12	AbstractRealMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1135	403	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1135	403	12	AbstractRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[r].length != nCols
33406	413	8	AbstractRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
33406	413	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
33407	414	12	AbstractRealMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
33407	414	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
33408	425	8	AbstractRealMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
33408	425	8	AbstractRealMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1136	436	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1136	436	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1136	436	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
33409	442	8	AbstractRealMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
33409	442	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
33410	452	8	AbstractRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
33410	452	8	AbstractRealMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1137	463	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1137	463	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
1137	463	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
33411	469	8	AbstractRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
33411	469	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1138	483	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1138	483	8	AbstractRealMatrix.java	setRowVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nCols
33412	487	8	AbstractRealMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
33412	487	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1139	501	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1139	501	8	AbstractRealMatrix.java	setColumnVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nRows
33413	505	8	AbstractRealMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
33413	505	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
33414	515	8	AbstractRealMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
33414	515	8	AbstractRealMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1140	526	8	AbstractRealMatrix.java	setRow	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1140	526	8	AbstractRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1140	526	8	AbstractRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
33415	529	8	AbstractRealMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
33415	529	8	AbstractRealMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
33416	539	8	AbstractRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
33416	539	8	AbstractRealMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1141	550	8	AbstractRealMatrix.java	setColumn	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1141	550	8	AbstractRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1141	550	8	AbstractRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
33417	553	8	AbstractRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
33417	553	8	AbstractRealMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1142	603	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1142	603	8	AbstractRealMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
33418	607	8	AbstractRealMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
33418	607	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1143	617	8	AbstractRealMatrix.java	operate	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1143	617	8	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1143	617	8	AbstractRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
33419	622	8	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
33419	622	8	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
33420	624	12	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
33420	624	12	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1144	640	12	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1144	640	12	AbstractRealMatrix.java	operate	v	RealVector	0	DimensionMismatchException	$.getDimension() != nCols
33421	645	12	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
33421	645	12	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
33422	647	16	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
33422	647	16	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1145	662	8	AbstractRealMatrix.java	preMultiply	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1145	662	8	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1145	662	8	AbstractRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
33423	667	8	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
33423	667	8	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
33424	669	12	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
33424	669	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1146	686	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1146	686	12	AbstractRealMatrix.java	preMultiply	v	RealVector	0	DimensionMismatchException	$.getDimension() != nRows
33425	691	12	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
33425	691	12	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
33426	693	16	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
33426	693	16	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
33427	708	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
33427	708	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
33428	709	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
33428	709	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
33429	723	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
33429	723	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
33430	724	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
33430	724	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
33431	738	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
33431	738	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
33432	739	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
33432	739	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
33433	755	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
33433	755	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
33434	756	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
33434	756	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
33435	768	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
33435	768	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
33436	769	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
33436	769	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
33437	783	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
33437	783	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
33438	784	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
33438	784	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
33439	798	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
33439	798	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
33440	799	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
33440	799	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
33441	815	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
33441	815	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
33442	816	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
33442	816	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
33443	860	8	AbstractRealMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
33443	860	8	AbstractRealMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
1147	861	12	AbstractRealMatrix.java	toString	i	int	0	DEF	$ > 0
33444	865	12	AbstractRealMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
33444	865	12	AbstractRealMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
1148	866	16	AbstractRealMatrix.java	toString	j	int	0	DEF	$ > 0
1149	888	8	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	object == $
1149	888	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ == this
1150	891	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ instanceof RealMatrix == false
1151	897	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getRowDimension() != nRows
1151	897	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getColumnDimension() != nCols
1151	897	8	AbstractRealMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1151	897	8	AbstractRealMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
33445	900	8	AbstractRealMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
33445	900	8	AbstractRealMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
33446	901	12	AbstractRealMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
33446	901	12	AbstractRealMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1152	902	16	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	$.getEntry(row, col) != m.getEntry(row, col)
1152	902	16	AbstractRealMatrix.java	equals	col	int	0	RET	getEntry(row, $) != m.getEntry(row, $)
1152	902	16	AbstractRealMatrix.java	equals	row	int	0	RET	getEntry($, col) != m.getEntry($, col)
1152	902	16	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	getEntry(row, col) != $.getEntry(row, col)
33447	922	8	AbstractRealMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
33447	922	8	AbstractRealMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
33448	923	12	AbstractRealMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
33448	923	12	AbstractRealMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
1069	64	8	AbstractRealVector.java	checkVectorDimensions	d	int	0	DimensionMismatchException	$ != n
1069	64	8	AbstractRealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	d != $
1070	76	8	AbstractRealVector.java	checkIndex	THIS	AbstractRealVector	0	OutOfRangeException	index >= $.getDimension()
1070	76	8	AbstractRealVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1070	76	8	AbstractRealVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
33307	94	8	AbstractRealVector.java	setSubVector	THIS	AbstractRealVector	0	NIL-FOR	i < v.$.length
33307	94	8	AbstractRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.length
33307	94	8	AbstractRealVector.java	setSubVector	v	double[]	0	NIL-FOR	i < $.length
33308	104	8	AbstractRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
33308	104	8	AbstractRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
33308	104	8	AbstractRealVector.java	add	e	Entry	0	NIL-WHILE	($ = it.next()) != null
1071	112	8	AbstractRealVector.java	add	v	RealVector	0	RET	$ instanceof ArrayRealVector
33309	119	8	AbstractRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
33309	119	8	AbstractRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
33309	119	8	AbstractRealVector.java	add	e	Entry	0	NIL-WHILE	($ = it.next()) != null
33310	131	8	AbstractRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
33310	131	8	AbstractRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
33310	131	8	AbstractRealVector.java	subtract	e	Entry	0	NIL-WHILE	($ = it.next()) != null
1072	140	8	AbstractRealVector.java	subtract	v	RealVector	0	RET	$ instanceof ArrayRealVector
33311	147	8	AbstractRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
33311	147	8	AbstractRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
33311	147	8	AbstractRealVector.java	subtract	e	Entry	0	NIL-WHILE	($ = it.next()) != null
1073	161	8	AbstractRealVector.java	mapAddToSelf	d	double	0	RET	$ != 0
33312	181	8	AbstractRealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
33312	181	8	AbstractRealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
33312	181	8	AbstractRealVector.java	dotProduct	e	Entry	0	NIL-WHILE	($ = it.next()) != null
1074	192	8	AbstractRealVector.java	cosine	norm	double	0	MathArithmeticException	$ == 0
1074	192	8	AbstractRealVector.java	cosine	vNorm	double	0	MathArithmeticException	$ == 0
33313	220	8	AbstractRealVector.java	getDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
33313	220	8	AbstractRealVector.java	getDistance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
33313	220	8	AbstractRealVector.java	getDistance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
33314	232	8	AbstractRealVector.java	getNorm	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
33314	232	8	AbstractRealVector.java	getNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
33314	232	8	AbstractRealVector.java	getNorm	e	Entry	0	NIL-WHILE	($ = it.next()) != null
33315	244	8	AbstractRealVector.java	getL1Norm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
33315	244	8	AbstractRealVector.java	getL1Norm	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
33315	244	8	AbstractRealVector.java	getL1Norm	e	Entry	0	NIL-WHILE	($ = it.next()) != null
33316	255	8	AbstractRealVector.java	getLInfNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
33316	255	8	AbstractRealVector.java	getLInfNorm	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
33316	255	8	AbstractRealVector.java	getLInfNorm	e	Entry	0	NIL-WHILE	($ = it.next()) != null
33317	272	8	AbstractRealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
33317	272	8	AbstractRealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
33317	272	8	AbstractRealVector.java	getL1Distance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
33318	284	8	AbstractRealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
33318	284	8	AbstractRealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
33318	284	8	AbstractRealVector.java	getL1Distance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
33319	296	8	AbstractRealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
33319	296	8	AbstractRealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
33319	296	8	AbstractRealVector.java	getLInfDistance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
33320	308	8	AbstractRealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
33320	308	8	AbstractRealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
33320	308	8	AbstractRealVector.java	getLInfDistance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
33321	322	8	AbstractRealVector.java	getMinIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1075	324	12	AbstractRealVector.java	getMinIndex	entry	Entry	0	DEF	$.getValue() <= minValue
1075	324	12	AbstractRealVector.java	getMinIndex	minValue	double	0	DEF	entry.getValue() <= $
33322	348	8	AbstractRealVector.java	getMaxIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1076	350	12	AbstractRealVector.java	getMaxIndex	entry	Entry	0	DEF	$.getValue() >= maxValue
1076	350	12	AbstractRealVector.java	getMaxIndex	maxValue	double	0	DEF	entry.getValue() >= $
1077	400	8	AbstractRealVector.java	outerProduct	v	RealVector	1	DEF	$ instanceof SparseRealVector
33323	409	8	AbstractRealVector.java	outerProduct	thisIt	Iterator<Entry>	0	NIL-WHILE	(thisE = $.next()) != null
33323	409	8	AbstractRealVector.java	outerProduct	thisIt	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
33323	409	8	AbstractRealVector.java	outerProduct	thisE	Entry	0	NIL-WHILE	($ = thisIt.next()) != null
33324	412	12	AbstractRealVector.java	outerProduct	otherIt	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
33324	412	12	AbstractRealVector.java	outerProduct	otherIt	Iterator<Entry>	0	NIL-WHILE	(otherE = $.next()) != null
33324	412	12	AbstractRealVector.java	outerProduct	otherE	Entry	0	NIL-WHILE	($ = otherIt.next()) != null
33325	436	8	AbstractRealVector.java	set	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
33325	436	8	AbstractRealVector.java	set	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
33325	436	8	AbstractRealVector.java	set	e	Entry	0	NIL-WHILE	($ = it.next()) != null
33326	445	8	AbstractRealVector.java	toArray	i	int	0	NIL-FOR	$ < dim
33326	445	8	AbstractRealVector.java	toArray	dim	int	0	NIL-FOR	i < $
33327	511	8	AbstractRealVector.java	mapToSelf	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
33327	511	8	AbstractRealVector.java	mapToSelf	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
33327	511	8	AbstractRealVector.java	mapToSelf	e	Entry	0	NIL-WHILE	($ = it.next()) != null
547	90	8	AbstractRegion.java	AbstractRegion	boundary	Collection<SubHyperplane<S>>	1	DEF	$.size() == 0
548	141	8	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	1	DEF	hyperplanes.$.length == 0
548	141	8	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$.length == 0
548	141	8	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$ == null
549	152	16	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	0	DEF	node.insertCut($.hyperplane)
549	152	16	AbstractRegion.java	AbstractRegion	node	BSPTree<S>	0	DEF	$.insertCut(hyperplane)
33134	179	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	NIL-WHILE	$.hasNext()
33134	179	8	AbstractRegion.java	insertCuts	inserted	Hyperplane<S>	0	NIL-WHILE	$ == null
550	181	12	AbstractRegion.java	insertCuts	inserted	Hyperplane<S>	0	DEF	node.insertCut($.copySelf())
550	181	12	AbstractRegion.java	insertCuts	node	BSPTree<S>	0	DEF	$.insertCut(inserted.copySelf())
551	186	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	RET	$.hasNext()
33135	193	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	NIL-WHILE	$.hasNext()
552	235	8	AbstractRegion.java	isEmpty	node	BSPTree<S>	0	RET	$.getCut() == null
553	264	8	AbstractRegion.java	checkPoint	cell	BSPTree<S>	0	RET	$.getCut() == null
554	278	8	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getAttribute() == null
554	278	8	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getCut() != null
554	278	8	AbstractRegion.java	getTree	includeBoundaryAttributes	boolean	0	DEF	$
555	289	8	AbstractRegion.java	recurseBuildBoundary	node	BSPTree<S>	0	DEF	$.getCut() != null
556	299	12	AbstractRegion.java	recurseBuildBoundary	plusChar	Characterization<S>	0	DEF	$.hasOut()
557	306	16	AbstractRegion.java	recurseBuildBoundary	minusChar	Characterization<S>	0	DEF	$.hasIn()
558	311	12	AbstractRegion.java	recurseBuildBoundary	plusChar	Characterization<S>	0	DEF	$.hasIn()
559	318	16	AbstractRegion.java	recurseBuildBoundary	minusChar	Characterization<S>	0	DEF	$.hasOut()
560	345	8	AbstractRegion.java	characterize	node	BSPTree<S>	1	DEF	$.getCut() == null
561	379	8	AbstractRegion.java	getSize	THIS	AbstractRegion	0	DEF	$.barycenter == null
562	394	8	AbstractRegion.java	getBarycenter	THIS	AbstractRegion	0	DEF	$.barycenter == null
563	438	8	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	RET	$.getCut() == null
564	439	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getAttribute()
565	451	12	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
565	451	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
565	451	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
566	452	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
566	452	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
567	456	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
567	456	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
568	460	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
568	460	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
569	466	12	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
569	466	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
569	466	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
570	467	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
570	467	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
571	471	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
571	471	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
572	475	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
572	475	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
573	487	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
573	487	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
574	493	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().getHyperplane().sameOrientationAs(sub.getHyperplane())
574	493	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().getHyperplane().sameOrientationAs($.getHyperplane())
575	494	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getPlus().getAttribute()
575	494	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
576	497	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getMinus().getAttribute()
576	497	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
577	501	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getPlus().getAttribute()
577	501	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
578	504	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getMinus().getAttribute()
578	504	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
579	569	8	AbstractRegion.java	recurseIntersection	node	BSPTree<S>	0	RET	$.getCut() == null
580	583	12	AbstractRegion.java	recurseIntersection	plus	SubHyperplane<S>	1	RET	$ == null
581	585	19	AbstractRegion.java	recurseIntersection	minus	SubHyperplane<S>	1	RET	$ == null
582	619	8	AbstractRegion.java	recurseTransform	node	BSPTree<S>	0	RET	$.getCut() == null
583	626	8	AbstractRegion.java	recurseTransform	attribute	BoundaryAttribute<S>	0	DEF	$ != null
1547	98	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	NullArgumentException	$ == null
1548	101	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	ZeroException	steps.$.length == 0
1548	101	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$.length == 0
33984	109	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
33984	109	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < dimension
33985	111	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i + 1
33985	111	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $ + 1
1549	112	16	AbstractSimplex.java	AbstractSimplex	j	int	0	ZeroException	steps[$] == 0
1549	112	16	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$[j] == 0
1550	133	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NotStrictlyPositiveException	referenceSimplex.$.length <= 0
1550	133	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NotStrictlyPositiveException	$.length <= 0
33986	145	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < referenceSimplex.$.length
33986	145	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < referenceSimplex.length
33986	145	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NIL-FOR	i < $.length
1551	149	12	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	DimensionMismatchException	refI.$.length != $.dimension
1551	149	12	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DimensionMismatchException	$.length != dimension
33987	152	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i
33987	152	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $
33988	155	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
33988	155	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
1552	156	20	AbstractSimplex.java	AbstractSimplex	k	int	0	DEF	refI[$] != refJ[$]
1552	156	20	AbstractSimplex.java	AbstractSimplex	refJ	double[]	0	DEF	refI[k] != $[k]
1552	156	20	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DEF	$[k] != refJ[k]
1553	161	16	AbstractSimplex.java	AbstractSimplex	allEquals	boolean	0	MathIllegalArgumentException	$
1554	168	12	AbstractSimplex.java	AbstractSimplex	i	int	0	DEF	$ > 0
33989	170	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
33989	170	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
1555	219	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	DimensionMismatchException	$.dimension != startPoint.$.length
1555	219	8	AbstractSimplex.java	build	startPoint	double[]	0	DimensionMismatchException	dimension != $.length
33990	228	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
33990	228	8	AbstractSimplex.java	build	i	int	0	NIL-FOR	$ < dimension
33991	231	12	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
33991	231	12	AbstractSimplex.java	build	k	int	0	NIL-FOR	$ < dimension
33992	251	8	AbstractSimplex.java	evaluate	THIS	AbstractSimplex	0	NIL-FOR	i < $.simplex.$.length
33992	251	8	AbstractSimplex.java	evaluate	i	int	0	NIL-FOR	$ < simplex.length
1556	254	12	AbstractSimplex.java	evaluate	vertex	RealPointValuePair	0	DEF	Double.isNaN($.getValue())
33993	272	8	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
33993	272	8	AbstractSimplex.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < dimension
1557	273	12	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	DEF	comparator.compare($.simplex[i], pointValuePair) > 0
1557	273	12	AbstractSimplex.java	replaceWorstPoint	i	int	0	DEF	comparator.compare(simplex[$], pointValuePair) > 0
1557	273	12	AbstractSimplex.java	replaceWorstPoint	pointValuePair	RealPointValuePair	0	DEF	comparator.compare(simplex[i], $) > 0
1557	273	12	AbstractSimplex.java	replaceWorstPoint	comparator	Comparator<RealPointValuePair>	0	DEF	$.compare(simplex[i], pointValuePair) > 0
1558	300	8	AbstractSimplex.java	getPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
1558	300	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ < 0
1558	300	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ >= simplex.length
1559	315	8	AbstractSimplex.java	setPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
1559	315	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ >= simplex.length
1559	315	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ < 0
1560	329	8	AbstractSimplex.java	setPoints	THIS	AbstractSimplex	0	DimensionMismatchException	points.$.length != $.simplex.$.length
1560	329	8	AbstractSimplex.java	setPoints	points	RealPointValuePair[]	0	DimensionMismatchException	$.length != simplex.length
33994	345	8	AbstractSimplex.java	createHypercubeSteps	i	int	0	NIL-FOR	$ < n
33994	345	8	AbstractSimplex.java	createHypercubeSteps	n	int	0	NIL-FOR	i < $
2096	159	4	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	1	DEF	interpolator.$.currentState != null
2096	159	4	AbstractStepInterpolator.java	AbstractStepInterpolator	interpolator	AbstractStepInterpolator	1	DEF	$.currentState != null
2097	340	6	AbstractStepInterpolator.java	getInterpolatedState	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
2098	355	6	AbstractStepInterpolator.java	getInterpolatedDerivatives	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
2099	409	4	AbstractStepInterpolator.java	finalizeStep	THIS	AbstractStepInterpolator	0	DEF	$.finalized
2100	442	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	1	DEF	$.currentState == null
2101	454	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	DEF	$.currentState != null
34260	455	8	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
34260	455	8	AbstractStepInterpolator.java	writeBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
2102	497	4	AbstractStepInterpolator.java	readBaseExternal	dimension	int	1	DEF	$ < 0
34261	501	8	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
34261	501	8	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
1648	58	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	NullArgumentException	$ == null
1649	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
1649	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1649	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	begin	int	0	DEF	test(values, $, length)
1649	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	length	int	0	DEF	test(values, begin, $)
1650	126	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	NullArgumentException	$ == null
1651	145	8	AbstractStorelessUnivariateStatistic.java	incrementAll	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
1651	145	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	test($, begin, length)
1651	145	8	AbstractStorelessUnivariateStatistic.java	incrementAll	begin	int	0	DEF	test(values, $, length)
1651	145	8	AbstractStorelessUnivariateStatistic.java	incrementAll	length	int	0	DEF	test(values, begin, $)
34069	147	12	AbstractStorelessUnivariateStatistic.java	incrementAll	i	int	0	NIL-FOR	$ < k
34069	147	12	AbstractStorelessUnivariateStatistic.java	incrementAll	k	int	0	NIL-FOR	i < $
1652	162	8	AbstractStorelessUnivariateStatistic.java	equals	THIS	AbstractStorelessUnivariateStatistic	0	RET	object == $
1652	162	8	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ == this
1653	165	7	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ instanceof AbstractStorelessUnivariateStatistic == false
609	126	8	AbstractSubHyperplane.java	recurseTransform	node	BSPTree<T>	0	RET	$.getCut() == null
610	133	8	AbstractSubHyperplane.java	recurseTransform	attribute	BoundaryAttribute<T>	0	DEF	$ != null
1453	112	8	AbstractUnivariateRealOptimizer.java	optimize	f	UnivariateRealFunction	0	NullArgumentException	$ == null
1454	115	8	AbstractUnivariateRealOptimizer.java	optimize	goalType	GoalType	0	NullArgumentException	$ == null
1773	163	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NullArgumentException	$ == null
1774	167	8	AbstractUnivariateStatistic.java	test	begin	int	0	NotPositiveException	$ < 0
1775	171	8	AbstractUnivariateStatistic.java	test	length	int	0	NotPositiveException	$ < 0
1776	175	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	NumberIsTooLargeException	begin + length > values.$.length
1776	175	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NumberIsTooLargeException	begin + length > $.length
1776	175	8	AbstractUnivariateStatistic.java	test	begin	int	0	NumberIsTooLargeException	$ + length > values.length
1776	175	8	AbstractUnivariateStatistic.java	test	length	int	0	NumberIsTooLargeException	begin + $ > values.length
1777	180	8	AbstractUnivariateStatistic.java	test	length	int	0	RET	$ == 0
1777	180	8	AbstractUnivariateStatistic.java	test	allowEmpty	boolean	0	RET	$
1778	258	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	NullArgumentException	$ == null
1779	262	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	DimensionMismatchException	weights.$.length != values.$.length
1779	262	8	AbstractUnivariateStatistic.java	test	values	double[]	0	DimensionMismatchException	weights.length != $.length
1779	262	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	DimensionMismatchException	$.length != values.length
34100	267	8	AbstractUnivariateStatistic.java	test	i	int	0	NIL-FOR	$ < begin + length
34100	267	8	AbstractUnivariateStatistic.java	test	begin	int	0	NIL-FOR	i < $ + length
34100	267	8	AbstractUnivariateStatistic.java	test	length	int	0	NIL-FOR	i < begin + $
1780	268	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isNaN(weights[$])
1780	268	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isNaN($[i])
1781	271	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isInfinite(weights[$])
1781	271	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
1782	274	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	weights[$] < 0
1782	274	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	$[i] < 0
1783	277	12	AbstractUnivariateStatistic.java	test	i	int	0	DEF	weights[$] > 0.0
1783	277	12	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	DEF	$
1783	277	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	$[i] > 0.0
1784	282	8	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	MathIllegalArgumentException	$
34184	111	8	AbstractWell.java	AbstractWell	j	int	0	NIL-FOR	$ < r
34184	111	8	AbstractWell.java	AbstractWell	r	int	0	NIL-FOR	j < $
1964	154	8	AbstractWell.java	setSeed	seed	int[]	0	RET	$ == null
1965	161	8	AbstractWell.java	setSeed	THIS	AbstractWell	0	DEF	seed.$.length < $.v.$.length
1965	161	8	AbstractWell.java	setSeed	seed	int[]	0	DEF	$.length < v.length
34185	162	12	AbstractWell.java	setSeed	THIS	AbstractWell	0	NIL-FOR	i < $.v.$.length
34185	162	12	AbstractWell.java	setSeed	i	int	0	NIL-FOR	$ < v.length
2180	204	8	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	DEF	y != $
2180	204	8	AdamsBashforthIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
34316	231	8	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-DOWHILE	$.isLastStep
34317	234	12	AdamsBashforthIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
34318	240	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	i < $.mainSetDimension
34318	240	16	AdamsBashforthIntegrator.java	integrate	i	int	0	NIL-FOR	$ < mainSetDimension
2181	250	16	AdamsBashforthIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
34319	270	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	j < y0.$.length
34319	270	12	AdamsBashforthIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
34319	270	12	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2182	284	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.isLastStep
2183	289	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.resetOccurred
2184	305	16	AdamsBashforthIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
2175	221	8	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	DEF	y != $
2175	221	8	AdamsMoultonIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
34312	248	8	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-DOWHILE	$.isLastStep
34313	251	12	AdamsMoultonIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
34314	264	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
34314	264	16	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
34314	264	16	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2176	273	16	AdamsMoultonIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
34315	287	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
34315	287	12	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
34315	287	12	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2177	302	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.isLastStep
2178	307	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.resetOccurred
2179	324	16	AdamsMoultonIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
34371	165	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ > 0
34372	177	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ < nSteps
34372	177	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	nSteps	int	0	NIL-FOR	i < $
2225	191	12	AdamsNordsieckTransformer.java	getInstance	t	AdamsNordsieckTransformer	0	DEF	$ == null
34373	225	8	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < pData.$.length
34373	225	8	AdamsNordsieckTransformer.java	buildP	i	int	0	NIL-FOR	$ < pData.length
34373	225	8	AdamsNordsieckTransformer.java	buildP	pData	BigFraction[][]	0	NIL-FOR	i < $.length
34374	230	12	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < pI.$.length
34374	230	12	AdamsNordsieckTransformer.java	buildP	j	int	0	NIL-FOR	$ < pI.length
34374	230	12	AdamsNordsieckTransformer.java	buildP	pI	BigFraction[]	0	NIL-FOR	j < $.length
34375	261	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < y.$.length
34375	261	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	i	int	0	NIL-FOR	$ < y.length
34375	261	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	y	double[][]	0	NIL-FOR	i < $.length
34376	271	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < aI.$.length
34376	271	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < aI.length
34376	271	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	aI	double[]	0	NIL-FOR	j < $.length
34377	282	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < yI.$.length
34377	282	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < yI.length
34377	282	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	yI	double[]	0	NIL-FOR	j < $.length
34378	328	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < data.$.length
34378	328	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	i	int	0	NIL-FOR	$ < data.length
34378	328	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	data	double[][]	0	NIL-FOR	i < $.length
34379	331	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < dataI.$.length
34379	331	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	j	int	0	NIL-FOR	$ < dataI.length
34379	331	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	dataI	double[]	0	NIL-FOR	j < $.length
2209	208	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize > $.maxStep
2209	208	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize < $.minStep
2209	208	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ > maxStep
2209	208	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ < minStep
2210	231	6	AdaptiveStepsizeIntegrator.java	sanityChecks	equations	FirstOrderDifferentialEquations	1	DEF	$ instanceof ExtendedFirstOrderDifferentialEquations
2211	237	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecAbsoluteTolerance.$.length != $.mainSetDimension
2211	237	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecAbsoluteTolerance != null
2212	242	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecRelativeTolerance != null
2212	242	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecRelativeTolerance.$.length != $.mainSetDimension
2213	269	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	RET	$.initialStep > 0
34360	279	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
34360	279	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
34360	279	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
2214	288	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
34361	293	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
34361	293	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
34361	293	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
34362	300	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
34362	300	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
34362	300	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
2215	314	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < $.getMinStep()
2215	314	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ < getMinStep()
2216	317	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h > $.getMaxStep()
2216	317	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ > getMaxStep()
2217	320	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
2218	341	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	FastMath.abs(h) < $.minStep
2218	341	6	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	IntegratorException	FastMath.abs($) < minStep
2219	342	10	AdaptiveStepsizeIntegrator.java	filterStep	acceptSmall	boolean	1	DEF	$
2220	351	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	1	DEF	filteredH > $.maxStep
2220	351	6	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	1	DEF	$ > maxStep
2221	353	13	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	filteredH < -$.maxStep
2221	353	13	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	0	DEF	$ < -maxStep
1787	302	8	AggregateSummaryStatistics.java	aggregate	statistics	Collection<SummaryStatistics>	0	RET	$ == null
1788	306	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	RET	$.hasNext()
34101	316	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	NIL-WHILE	$.hasNext()
1789	318	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMin() < min
1789	318	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	Double.isNaN($)
1789	318	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	current.getMin() < $
1790	321	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMax() > max
1790	321	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	Double.isNaN($)
1790	321	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	current.getMax() > $
1791	333	8	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 0
1792	335	15	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 1
2075	43	8	ArgUtils.java	flatten	array	Object[]	0	DEF	$ != null
2076	45	16	ArgUtils.java	flatten	THIS	ArgUtils	1	DEF	$.o instanceof Object[]
1172	151	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	copyArray	boolean	1	DEF	$
1173	156	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NoDataException	$ == 0
1174	160	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
33477	163	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	NIL-FOR	$ < nRows
33477	163	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	r < $
1175	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	d[r].length != nCols
1175	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1175	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1175	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	d	T[][]	0	DimensionMismatchException	$[r].length != nCols
33478	195	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	row	int	0	NIL-FOR	$ < nRows
33478	195	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	row < $
33479	227	8	Array2DRowFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
33479	227	8	Array2DRowFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
33480	231	12	Array2DRowFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
33480	231	12	Array2DRowFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
33481	254	8	Array2DRowFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
33481	254	8	Array2DRowFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
33482	258	12	Array2DRowFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
33482	258	12	Array2DRowFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
33483	283	8	Array2DRowFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
33483	283	8	Array2DRowFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
33484	286	12	Array2DRowFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
33484	286	12	Array2DRowFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
33485	288	16	Array2DRowFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
33485	288	16	Array2DRowFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1176	318	8	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	1	DimensionMismatchException	$.data == null
1177	319	12	Array2DRowFieldMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1178	322	12	Array2DRowFieldMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1179	326	12	Array2DRowFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1180	331	12	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
33486	335	12	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	NIL-FOR	i < $.data.$.length
33486	335	12	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1181	336	16	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1181	336	16	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1181	336	16	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1181	336	16	Array2DRowFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[i].length != nCols
1182	400	8	Array2DRowFieldMatrix.java	operate	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1182	400	8	Array2DRowFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1182	400	8	Array2DRowFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
33487	404	8	Array2DRowFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
33487	404	8	Array2DRowFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
33488	407	12	Array2DRowFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
33488	407	12	Array2DRowFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1183	420	8	Array2DRowFieldMatrix.java	preMultiply	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1183	420	8	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1183	420	8	Array2DRowFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
33489	425	8	Array2DRowFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
33489	425	8	Array2DRowFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
33490	427	12	Array2DRowFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
33490	427	12	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
33491	442	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
33491	442	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
33492	444	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
33492	444	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
33493	457	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
33493	457	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
33494	459	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
33494	459	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
33495	474	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
33495	474	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
33496	476	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
33496	476	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
33497	491	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
33497	491	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
33498	493	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
33498	493	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
33499	506	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
33499	506	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
33500	507	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
33500	507	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
33501	521	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
33501	521	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
33502	522	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
33502	522	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
33503	537	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
33503	537	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
33504	538	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
33504	538	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
33505	554	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
33505	554	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
33506	555	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
33506	555	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
33507	571	8	Array2DRowFieldMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
33507	571	8	Array2DRowFieldMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1305	117	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	copyArray	boolean	1	DEF	$
1306	120	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	NullArgumentException	$ == null
1307	124	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NoDataException	$ == 0
1308	128	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	NoDataException	$ == 0
33752	131	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	NIL-FOR	$ < nRows
33752	131	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	r < $
1309	132	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	d[r].length != nCols
1309	132	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1309	132	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1309	132	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	DimensionMismatchException	$[r].length != nCols
33753	150	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	row	int	0	NIL-FOR	$ < nRows
33753	150	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	row < $
33754	183	8	Array2DRowRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
33754	183	8	Array2DRowRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
33755	187	12	Array2DRowRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
33755	187	12	Array2DRowRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
33756	210	8	Array2DRowRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
33756	210	8	Array2DRowRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
33757	214	12	Array2DRowRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
33757	214	12	Array2DRowRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
33758	238	8	Array2DRowRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
33758	238	8	Array2DRowRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
33759	241	12	Array2DRowRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
33759	241	12	Array2DRowRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
33760	243	16	Array2DRowRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
33760	243	16	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1310	273	8	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	1	DimensionMismatchException	$.data == null
1311	274	12	Array2DRowRealMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1312	277	12	Array2DRowRealMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1313	282	12	Array2DRowRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1314	287	12	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
33761	291	12	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	NIL-FOR	i < $.data.$.length
33761	291	12	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1315	292	16	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1315	292	16	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1315	292	16	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1315	292	16	Array2DRowRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[i].length != nCols
1316	348	8	Array2DRowRealMatrix.java	operate	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1316	348	8	Array2DRowRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1316	348	8	Array2DRowRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
33762	352	8	Array2DRowRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
33762	352	8	Array2DRowRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
33763	355	12	Array2DRowRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
33763	355	12	Array2DRowRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1317	368	8	Array2DRowRealMatrix.java	preMultiply	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1317	368	8	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1317	368	8	Array2DRowRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
33764	373	8	Array2DRowRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
33764	373	8	Array2DRowRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
33765	375	12	Array2DRowRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
33765	375	12	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
33766	391	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
33766	391	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
33767	393	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
33767	393	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
33768	406	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
33768	406	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
33769	408	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
33769	408	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
33770	423	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
33770	423	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
33771	425	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
33771	425	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
33772	440	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
33772	440	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
33773	442	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
33773	442	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
33774	455	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
33774	455	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
33775	456	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
33775	456	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
33776	470	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
33776	470	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
33777	471	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
33777	471	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
33778	486	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
33778	486	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
33779	487	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
33779	487	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
33780	503	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
33780	503	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
33781	504	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
33781	504	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
33782	520	8	Array2DRowRealMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
33782	520	8	Array2DRowRealMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1383	97	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1384	117	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1385	146	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1386	149	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	d.$.length == 0
1386	149	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	ZeroException	$.length == 0
1387	172	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1388	190	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1389	193	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1389	193	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1389	193	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1389	193	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
1390	213	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1391	216	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1391	216	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1391	216	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1391	216	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
1392	231	8	ArrayFieldVector.java	ArrayFieldVector	v	FieldVector<T>	0	NullArgumentException	$ == null
33852	236	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
33852	236	8	ArrayFieldVector.java	ArrayFieldVector	i	int	0	NIL-FOR	$ < data.length
1393	248	8	ArrayFieldVector.java	ArrayFieldVector	v	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1394	264	8	ArrayFieldVector.java	ArrayFieldVector	v	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1395	280	8	ArrayFieldVector.java	ArrayFieldVector	v1	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1395	280	8	ArrayFieldVector.java	ArrayFieldVector	v2	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1396	299	8	ArrayFieldVector.java	ArrayFieldVector	v1	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1396	299	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	NullArgumentException	$ == null
1397	318	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	NullArgumentException	$ == null
1397	318	8	ArrayFieldVector.java	ArrayFieldVector	v2	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1398	344	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	NullArgumentException	$ == null
1398	344	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	NullArgumentException	$ == null
1399	348	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1399	348	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1399	348	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
1400	369	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1400	369	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1400	369	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
33853	406	12	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
33853	406	12	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
33854	417	8	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
33854	417	8	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
33855	440	12	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
33855	440	12	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
33856	451	8	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
33856	451	8	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
33857	470	8	ArrayFieldVector.java	mapAdd	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
33857	470	8	ArrayFieldVector.java	mapAdd	i	int	0	NIL-FOR	$ < data.length
33858	478	8	ArrayFieldVector.java	mapAddToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
33858	478	8	ArrayFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
33859	487	8	ArrayFieldVector.java	mapSubtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
33859	487	8	ArrayFieldVector.java	mapSubtract	i	int	0	NIL-FOR	$ < data.length
33860	495	8	ArrayFieldVector.java	mapSubtractToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
33860	495	8	ArrayFieldVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
33861	504	8	ArrayFieldVector.java	mapMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
33861	504	8	ArrayFieldVector.java	mapMultiply	i	int	0	NIL-FOR	$ < data.length
33862	512	8	ArrayFieldVector.java	mapMultiplyToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
33862	512	8	ArrayFieldVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
33863	521	8	ArrayFieldVector.java	mapDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
33863	521	8	ArrayFieldVector.java	mapDivide	i	int	0	NIL-FOR	$ < data.length
33864	529	8	ArrayFieldVector.java	mapDivideToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
33864	529	8	ArrayFieldVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
33865	539	8	ArrayFieldVector.java	mapInv	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
33865	539	8	ArrayFieldVector.java	mapInv	i	int	0	NIL-FOR	$ < data.length
33866	548	8	ArrayFieldVector.java	mapInvToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
33866	548	8	ArrayFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
33867	561	12	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
33867	561	12	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
33868	572	8	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
33868	572	8	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
33869	595	12	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
33869	595	12	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
33870	606	8	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
33870	606	8	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
33871	643	12	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
33871	643	12	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
33872	654	8	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
33872	654	8	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
33873	697	12	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
33873	697	12	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
33874	698	16	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
33874	698	16	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
33875	721	8	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
33875	721	8	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
33876	722	12	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
33876	722	12	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
33877	797	16	ArrayFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
33877	797	16	ArrayFieldVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
33877	797	16	ArrayFieldVector.java	setSubVector	v	FieldVector<T>	0	NIL-FOR	i < index + $.getDimension()
1401	857	8	ArrayFieldVector.java	checkVectorDimensions	THIS	ArrayFieldVector	0	DimensionMismatchException	$.data.$.length != n
1401	857	8	ArrayFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1402	871	8	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$ == other
1402	871	8	ArrayFieldVector.java	equals	other	Object	0	RET	this == $
1403	874	8	ArrayFieldVector.java	equals	other	Object	0	RET	$ == null
1404	881	12	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data.$.length != rhs.getDimension()
1404	881	12	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data.length != $.getDimension()
33878	885	12	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
33878	885	12	ArrayFieldVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1405	886	16	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data[i].equals(rhs.getEntry(i))
1405	886	16	ArrayFieldVector.java	equals	i	int	0	RET	data[$].equals(rhs.getEntry($))
1405	886	16	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data[i].equals($.getEntry(i))
1406	918	8	ArrayFieldVector.java	checkIndex	THIS	ArrayFieldVector	0	OutOfRangeException	index >= $.getDimension()
1406	918	8	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1406	918	8	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1078	103	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1079	120	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1080	123	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1080	123	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NumberIsTooLargeException	$.length < pos + size
1080	123	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1080	123	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
33328	136	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < d.$.length
33328	136	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < d.length
33328	136	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NIL-FOR	i < $.length
1081	152	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NullArgumentException	$ == null
1082	155	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1082	155	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NumberIsTooLargeException	$.length < pos + size
1082	155	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1082	155	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
33329	159	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < pos + size
33329	159	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NIL-FOR	i < $ + size
33329	159	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NIL-FOR	i < pos + $
1083	171	8	ArrayRealVector.java	ArrayRealVector	v	RealVector	0	NullArgumentException	$ == null
33330	175	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
33330	175	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < data.length
33331	222	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l2
33331	222	8	ArrayRealVector.java	ArrayRealVector	l2	int	0	NIL-FOR	i < $
33332	236	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l1
33332	236	8	ArrayRealVector.java	ArrayRealVector	l1	int	0	NIL-FOR	i < $
1084	290	8	ArrayRealVector.java	add	v	RealVector	1	RET	$ instanceof ArrayRealVector
33333	297	12	ArrayRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
33333	297	12	ArrayRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
33333	297	12	ArrayRealVector.java	add	e	Entry	0	NIL-WHILE	($ = it.next()) != null
33334	309	8	ArrayRealVector.java	add	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
33334	309	8	ArrayRealVector.java	add	i	int	0	NIL-FOR	$ < data.length
1085	330	8	ArrayRealVector.java	subtract	v	RealVector	1	RET	$ instanceof ArrayRealVector
33335	337	12	ArrayRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
33335	337	12	ArrayRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
33335	337	12	ArrayRealVector.java	subtract	e	Entry	0	NIL-WHILE	($ = it.next()) != null
33336	349	8	ArrayRealVector.java	subtract	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
33336	349	8	ArrayRealVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
33337	376	8	ArrayRealVector.java	mapToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
33337	376	8	ArrayRealVector.java	mapToSelf	i	int	0	NIL-FOR	$ < data.length
33338	385	8	ArrayRealVector.java	mapAddToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
33338	385	8	ArrayRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
33339	394	8	ArrayRealVector.java	mapSubtractToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
33339	394	8	ArrayRealVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
33340	403	8	ArrayRealVector.java	mapMultiplyToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
33340	403	8	ArrayRealVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
33341	412	8	ArrayRealVector.java	mapDivideToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
33341	412	8	ArrayRealVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
1086	420	8	ArrayRealVector.java	ebeMultiply	v	RealVector	1	RET	$ instanceof ArrayRealVector
33342	425	12	ArrayRealVector.java	ebeMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
33342	425	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
33343	437	8	ArrayRealVector.java	ebeMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
33343	437	8	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
1087	456	8	ArrayRealVector.java	ebeDivide	v	RealVector	1	RET	$ instanceof ArrayRealVector
33344	461	12	ArrayRealVector.java	ebeDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
33344	461	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
33345	473	8	ArrayRealVector.java	ebeDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
33345	473	8	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
1088	510	8	ArrayRealVector.java	dotProduct	v	RealVector	1	RET	$ instanceof ArrayRealVector
33346	517	12	ArrayRealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
33346	517	12	ArrayRealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
33346	517	12	ArrayRealVector.java	dotProduct	e	Entry	0	NIL-WHILE	($ = it.next()) != null
33347	529	8	ArrayRealVector.java	dotProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
33347	529	8	ArrayRealVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
1089	580	8	ArrayRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
33348	585	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
33348	585	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
33349	598	8	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
33349	598	8	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
1090	627	8	ArrayRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof ArrayRealVector
33350	632	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
33350	632	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
33351	645	8	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
33351	645	8	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
1091	674	8	ArrayRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
33352	679	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
33352	679	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
33353	692	8	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
33353	692	8	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
1092	721	8	ArrayRealVector.java	unitVector	norm	double	0	MathArithmeticException	$ == 0
1093	731	8	ArrayRealVector.java	unitize	norm	double	0	MathArithmeticException	$ == 0
1094	763	8	ArrayRealVector.java	outerProduct	v	RealVector	1	RET	$ instanceof ArrayRealVector
33354	769	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
33354	769	12	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
33355	770	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
33355	770	16	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
33356	795	8	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
33356	795	8	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
33357	796	12	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
33357	796	12	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
33358	873	16	ArrayRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
33358	873	16	ArrayRealVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
33358	873	16	ArrayRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < index + $.getDimension()
1095	945	8	ArrayRealVector.java	checkVectorDimensions	THIS	ArrayRealVector	0	DimensionMismatchException	$.data.$.length != n
1095	945	8	ArrayRealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1096	958	12	ArrayRealVector.java	isNaN	THIS	ArrayRealVector	0	RET	Double.isNaN($.v)
1097	973	8	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	$.isNaN()
1098	978	12	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	Double.isInfinite($.v)
1099	1002	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$ == other
1099	1002	8	ArrayRealVector.java	equals	other	Object	0	RET	this == $
1100	1006	8	ArrayRealVector.java	equals	other	Object	0	RET	$ instanceof RealVector
1100	1006	8	ArrayRealVector.java	equals	other	Object	0	RET	$ == null
1101	1011	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data.$.length != rhs.getDimension()
1101	1011	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data.length != $.getDimension()
1102	1015	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	$.isNaN()
33359	1019	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
33359	1019	8	ArrayRealVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1103	1020	12	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data[i] != rhs.getEntry(i)
1103	1020	12	ArrayRealVector.java	equals	i	int	0	RET	data[$] != rhs.getEntry($)
1103	1020	12	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data[i] != $.getEntry(i)
1104	1035	8	ArrayRealVector.java	hashCode	THIS	ArrayRealVector	0	RET	$.isNaN()
586	149	8	BSPTree.java	insertCut	THIS	BSPTree	0	DEF	$.cut != null
587	155	8	BSPTree.java	insertCut	chopped	SubHyperplane<S>	0	RET	$.isEmpty()
588	180	8	BSPTree.java	copySelf	THIS	BSPTree	0	RET	$.cut == null
589	241	8	BSPTree.java	visit	THIS	BSPTree	1	DEF	$.cut == null
33136	292	8	BSPTree.java	fitToCell	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
33136	292	8	BSPTree.java	fitToCell	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
590	293	12	BSPTree.java	fitToCell	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
590	293	12	BSPTree.java	fitToCell	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
591	311	8	BSPTree.java	getCell	THIS	BSPTree	0	RET	$.cut == null
592	318	8	BSPTree.java	getCell	offset	double	1	RET	FastMath.abs($) < 1.0e-10
593	320	15	BSPTree.java	getCell	offset	double	1	RET	$ <= 0
594	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.attribute == null
594	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute.equals($.minus.$.attribute)
594	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.cut != null
594	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.cut == null
594	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute == null
594	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute != null
594	335	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.cut == null
595	384	8	BSPTree.java	merge	THIS	BSPTree	1	RET	$.cut == null
596	387	15	BSPTree.java	merge	THIS	BSPTree	1	RET	tree.$.cut == null
596	387	15	BSPTree.java	merge	tree	BSPTree<S>	1	RET	$.cut == null
597	393	12	BSPTree.java	merge	parentTree	BSPTree<S>	0	DEF	$ != null
598	395	16	BSPTree.java	merge	isPlusChild	boolean	1	DEF	$
599	406	12	BSPTree.java	merge	THIS	BSPTree	0	DEF	merged.$.cut != null
599	406	12	BSPTree.java	merge	merged	BSPTree<S>	0	DEF	$.cut != null
600	488	8	BSPTree.java	split	THIS	BSPTree	0	RET	$.cut == null
601	499	12	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
601	499	12	BSPTree.java	split	sHyperplane	Hyperplane<S>	1	DEF	cut.side($) == Side.PLUS
602	515	12	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
602	515	12	BSPTree.java	split	sHyperplane	Hyperplane<S>	1	DEF	cut.side($) == Side.PLUS
603	567	8	BSPTree.java	insertInTree	parentTree	BSPTree<S>	0	DEF	$ != null
604	568	12	BSPTree.java	insertInTree	isPlusChild	boolean	1	DEF	$
605	576	8	BSPTree.java	insertInTree	THIS	BSPTree	0	DEF	$.cut != null
33137	579	12	BSPTree.java	insertInTree	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
33137	579	12	BSPTree.java	insertInTree	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
606	586	16	BSPTree.java	insertInTree	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
606	586	16	BSPTree.java	insertInTree	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
607	613	8	BSPTree.java	chopOffMinus	THIS	BSPTree	0	DEF	$.cut != null
608	627	8	BSPTree.java	chopOffPlus	THIS	BSPTree	0	DEF	$.cut != null
1563	112	8	BaseAbstractScalarOptimizer.java	optimize	f	FUNC	0	NullArgumentException	$ == null
1564	115	8	BaseAbstractScalarOptimizer.java	optimize	goalType	GoalType	0	NullArgumentException	$ == null
1565	118	8	BaseAbstractScalarOptimizer.java	optimize	startPoint	double[]	0	NullArgumentException	$ == null
1613	114	8	BaseAbstractVectorialOptimizer.java	optimize	f	FUNC	0	NullArgumentException	$ == null
1614	117	8	BaseAbstractVectorialOptimizer.java	optimize	t	double[]	0	NullArgumentException	$ == null
1615	120	8	BaseAbstractVectorialOptimizer.java	optimize	w	double[]	0	NullArgumentException	$ == null
1616	123	8	BaseAbstractVectorialOptimizer.java	optimize	startPoint	double[]	0	NullArgumentException	$ == null
1617	126	8	BaseAbstractVectorialOptimizer.java	optimize	THIS	BaseAbstractVectorialOptimizer	0	DimensionMismatchException	t.$.length != w.$.length
1617	126	8	BaseAbstractVectorialOptimizer.java	optimize	t	double[]	0	DimensionMismatchException	$.length != w.length
1617	126	8	BaseAbstractVectorialOptimizer.java	optimize	w	double[]	0	DimensionMismatchException	t.length != $.length
1636	74	8	BaseMultiStartMultivariateRealOptimizer.java	BaseMultiStartMultivariateRealOptimizer	optimizer	BaseMultivariateRealOptimizer<FUNC>	0	NullArgumentException	$ == null
1636	74	8	BaseMultiStartMultivariateRealOptimizer.java	BaseMultiStartMultivariateRealOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
1637	78	8	BaseMultiStartMultivariateRealOptimizer.java	BaseMultiStartMultivariateRealOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1638	114	8	BaseMultiStartMultivariateRealOptimizer.java	getOptima	THIS	BaseMultiStartMultivariateRealOptimizer	0	MathIllegalStateException	$.optima == null
34061	152	8	BaseMultiStartMultivariateRealOptimizer.java	optimize	THIS	BaseMultiStartMultivariateRealOptimizer	0	NIL-FOR	i < $.starts
34061	152	8	BaseMultiStartMultivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1639	166	8	BaseMultiStartMultivariateRealOptimizer.java	optimize	THIS	BaseMultiStartMultivariateRealOptimizer	0	DEF	$.optima[0] == null
1413	74	8	BaseMultiStartMultivariateVectorialOptimizer.java	BaseMultiStartMultivariateVectorialOptimizer	optimizer	BaseMultivariateVectorialOptimizer<FUNC>	0	NullArgumentException	$ == null
1413	74	8	BaseMultiStartMultivariateVectorialOptimizer.java	BaseMultiStartMultivariateVectorialOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
1414	78	8	BaseMultiStartMultivariateVectorialOptimizer.java	BaseMultiStartMultivariateVectorialOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1415	115	8	BaseMultiStartMultivariateVectorialOptimizer.java	getOptima	THIS	BaseMultiStartMultivariateVectorialOptimizer	0	MathIllegalStateException	$.optima == null
33886	153	8	BaseMultiStartMultivariateVectorialOptimizer.java	optimize	THIS	BaseMultiStartMultivariateVectorialOptimizer	0	NIL-FOR	i < $.starts
33886	153	8	BaseMultiStartMultivariateVectorialOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1416	170	8	BaseMultiStartMultivariateVectorialOptimizer.java	optimize	THIS	BaseMultiStartMultivariateVectorialOptimizer	0	DEF	$.optima[0] == null
2668	138	8	BaseSecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
2669	141	8	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
2670	166	12	BaseSecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
2671	171	12	BaseSecantSolver.java	doSolve	fx	double	1	DEF	f1 * $ < 0
2671	171	12	BaseSecantSolver.java	doSolve	f1	double	1	DEF	$ * fx < 0
2672	182	16	BaseSecantSolver.java	doSolve	THIS	BaseSecantSolver	0	DEF	$.method == $.Method.ILLINOIS
2673	185	16	BaseSecantSolver.java	doSolve	THIS	BaseSecantSolver	0	DEF	$.method == $.Method.PEGASUS
2674	195	12	BaseSecantSolver.java	doSolve	f1	double	0	MathInternalError:RET	FastMath.abs($) <= ftol
2674	195	12	BaseSecantSolver.java	doSolve	ftol	double	0	MathInternalError:RET	FastMath.abs(f1) <= $
2675	200	20	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
2676	205	20	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
2677	210	20	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ <= 0
2678	215	20	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ >= 0
2679	226	12	BaseSecantSolver.java	doSolve	x0	double	0	MathInternalError:RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1), atol)
2679	226	12	BaseSecantSolver.java	doSolve	x1	double	0	MathInternalError:RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($), atol)
2679	226	12	BaseSecantSolver.java	doSolve	atol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), $)
2679	226	12	BaseSecantSolver.java	doSolve	rtol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1), atol)
2059	120	8	Beta.java	regularizedBeta	x	double	1	DEF	Double.isNaN($)
2059	120	8	Beta.java	regularizedBeta	x	double	1	DEF	$ < 0
2059	120	8	Beta.java	regularizedBeta	x	double	1	DEF	$ > 1
2059	120	8	Beta.java	regularizedBeta	a	double	1	DEF	Double.isNaN($)
2059	120	8	Beta.java	regularizedBeta	a	double	1	DEF	$ <= 0.0
2059	120	8	Beta.java	regularizedBeta	b	double	1	DEF	$ <= 0.0
2059	120	8	Beta.java	regularizedBeta	b	double	1	DEF	Double.isNaN($)
2060	128	15	Beta.java	regularizedBeta	x	double	1	DEF	$ > (a + 1.0) / (a + b + 2.0)
2060	128	15	Beta.java	regularizedBeta	a	double	1	DEF	x > ($ + 1.0) / ($ + b + 2.0)
2060	128	15	Beta.java	regularizedBeta	b	double	1	DEF	x > (a + 1.0) / (a + $ + 2.0)
2061	195	8	Beta.java	logBeta	a	double	1	DEF	Double.isNaN($)
2061	195	8	Beta.java	logBeta	a	double	1	DEF	$ <= 0.0
2061	195	8	Beta.java	logBeta	b	double	1	DEF	$ <= 0.0
2061	195	8	Beta.java	logBeta	b	double	1	DEF	Double.isNaN($)
1002	99	8	BetaDistributionImpl.java	recomputeZ	THIS	BetaDistributionImpl	0	DEF	Double.isNaN($.z)
1003	110	8	BetaDistributionImpl.java	density	x	double	1	RET	$ < 0
1003	110	8	BetaDistributionImpl.java	density	x	double	1	RET	$ > 1
1004	112	15	BetaDistributionImpl.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 0
1005	113	12	BetaDistributionImpl.java	density	THIS	BetaDistributionImpl	0	NumberIsTooSmallException	$.alpha < 1
1006	117	15	BetaDistributionImpl.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 1
1007	118	12	BetaDistributionImpl.java	density	THIS	BetaDistributionImpl	0	NumberIsTooSmallException	$.beta < 1
1008	132	8	BetaDistributionImpl.java	inverseCumulativeProbability	p	double	1	RET	$ == 0
1009	134	15	BetaDistributionImpl.java	inverseCumulativeProbability	p	double	1	RET	$ == 1
1010	161	8	BetaDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ <= 0
1011	163	15	BetaDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ >= 1
1228	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	m	int	1	DEF	$ >= n
1228	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	n	int	1	DEF	m >= $
1229	90	8	BiDiagonalTransformer.java	getU	THIS	BiDiagonalTransformer	0	DEF	$.cachedU == null
33572	100	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= p
33572	100	12	BiDiagonalTransformer.java	getU	p	int	0	NIL-FOR	k >= $
33573	105	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= diagOffset
33573	105	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	NIL-FOR	k >= $
1230	108	16	BiDiagonalTransformer.java	getU	hK	double[]	0	DEF	$[k - diagOffset] != 0.0
1230	108	16	BiDiagonalTransformer.java	getU	k	int	0	DEF	hK[$ - diagOffset] != 0.0
1230	108	16	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	hK[k - $] != 0.0
33574	109	20	BiDiagonalTransformer.java	getU	j	int	0	NIL-FOR	$ < m
33574	109	20	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	j < $
33575	111	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
33575	111	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
33576	116	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
33576	116	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
1231	122	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	$ > 0
1232	139	8	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	$.cachedB == null
33577	144	12	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	NIL-FOR	i < $.main.$.length
33577	144	12	BiDiagonalTransformer.java	getB	i	int	0	NIL-FOR	$ < main.length
1233	146	16	BiDiagonalTransformer.java	getB	m	int	1	DEF	$ < n
1233	146	16	BiDiagonalTransformer.java	getB	n	int	1	DEF	m < $
1234	147	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ > 0
1235	151	20	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1235	151	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ < main.length - 1
1236	171	8	BiDiagonalTransformer.java	getV	THIS	BiDiagonalTransformer	0	DEF	$.cachedV == null
33578	181	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= p
33578	181	12	BiDiagonalTransformer.java	getV	p	int	0	NIL-FOR	k >= $
33579	186	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= diagOffset
33579	186	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	NIL-FOR	k >= $
1237	189	16	BiDiagonalTransformer.java	getV	hK	double[]	0	DEF	$[k] != 0.0
1237	189	16	BiDiagonalTransformer.java	getV	k	int	0	DEF	hK[$] != 0.0
33580	190	20	BiDiagonalTransformer.java	getV	j	int	0	NIL-FOR	$ < n
33580	190	20	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	j < $
33581	192	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
33581	192	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
33582	197	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
33582	197	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
1238	203	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	DEF	$ > 0
33583	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	NIL-FOR	$ < n
33583	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	k < $
33584	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
33584	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1239	272	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	a	double	0	DEF	$ != 0.0
33585	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
33585	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
33586	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
33586	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
33587	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
33587	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1240	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	DEF	$ < n - 1
1240	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	DEF	k < $ - 1
33588	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
33588	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
1241	297	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	b	double	0	DEF	$ != 0.0
33589	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
33589	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
33590	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
33590	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
33591	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
33591	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
33592	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	NIL-FOR	$ < m
33592	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	k < $
33593	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
33593	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1242	336	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	a	double	0	DEF	$ != 0.0
33594	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
33594	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
33595	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
33595	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
33596	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
33596	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1243	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	DEF	$ < m - 1
1243	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	DEF	k < $ - 1
33597	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
33597	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
1244	361	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	b	double	0	DEF	$ != 0.0
33598	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
33598	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
33599	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
33599	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
33600	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
33600	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
2611	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
2611	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
2611	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
2611	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
2611	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$[0].length == 0
2611	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$.length == 0
2612	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
2612	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
2612	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	xLen != $.length
2613	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
2613	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
2613	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	xLen != $.length
2614	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
2614	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
2614	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	xLen != $.length
2615	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
2615	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
2615	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	xLen != $.length
34487	127	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
34487	127	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
2616	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
2616	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
2616	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
2616	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	$[i].length != yLen
2617	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
2617	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
2617	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
2617	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	$[i].length != yLen
2618	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
2618	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
2618	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
2618	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
2619	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
2619	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
2619	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
2619	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
34488	141	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
34488	141	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
2620	160	8	BicubicSplineInterpolatingFunction.java	value	i	int	0	OutOfRangeException	$ == -1
2621	164	8	BicubicSplineInterpolatingFunction.java	value	j	int	0	OutOfRangeException	$ == -1
2622	226	8	BicubicSplineInterpolatingFunction.java	partialDerivative	THIS	BicubicSplineInterpolatingFunction	0	DEF	$.partialDerivatives == null
2623	231	8	BicubicSplineInterpolatingFunction.java	partialDerivative	i	int	0	OutOfRangeException	$ == -1
2624	235	8	BicubicSplineInterpolatingFunction.java	partialDerivative	j	int	0	OutOfRangeException	$ == -1
34489	253	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < lastI
34489	253	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastI	int	0	NIL-FOR	i < $
34490	254	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < lastJ
34490	254	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastJ	int	0	NIL-FOR	j < $
2625	273	8	BicubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ < val[0]
2625	273	8	BicubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c < $[0]
34491	278	8	BicubicSplineInterpolatingFunction.java	searchIndex	i	int	0	NIL-FOR	$ < max
34491	278	8	BicubicSplineInterpolatingFunction.java	searchIndex	max	int	0	NIL-FOR	i < $
2626	279	12	BicubicSplineInterpolatingFunction.java	searchIndex	i	int	0	RET	c <= val[$]
2626	279	12	BicubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ <= val[i]
2626	279	12	BicubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c <= $[i]
34492	319	8	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < 16
34493	322	12	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < 16
34494	367	8	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	i	int	0	NIL-FOR	$ < N
34495	368	12	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	j	int	0	NIL-FOR	$ < N
2627	378	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
2627	378	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
2628	381	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
2628	381	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
34496	406	8	BicubicSplineInterpolatingFunction.java	apply	i	int	0	NIL-FOR	$ < N
34497	407	12	BicubicSplineInterpolatingFunction.java	apply	j	int	0	NIL-FOR	$ < N
2629	419	8	BicubicSplineInterpolatingFunction.java	partialDerivativeX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeX == null
2630	429	8	BicubicSplineInterpolatingFunction.java	partialDerivativeY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeY == null
2631	439	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXX == null
2632	449	8	BicubicSplineInterpolatingFunction.java	partialDerivativeYY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeYY == null
2633	459	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXY == null
34498	476	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < N
34499	477	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < N
2608	39	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
2608	39	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
2608	39	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
2608	39	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
2608	39	8	BicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
2608	39	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
2609	42	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
2609	42	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
2609	42	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
34475	57	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
34475	57	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
2610	58	12	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
2610	58	12	BicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
2610	58	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
2610	58	12	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
34476	62	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
34476	62	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
34477	72	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
34477	72	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
34478	79	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
34478	79	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
34479	85	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
34479	85	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
34480	87	12	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
34480	87	12	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
34481	94	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
34481	94	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
34482	96	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
34482	96	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
34483	103	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
34483	103	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
34484	106	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
34484	106	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
798	118	8	BigFraction.java	BigFraction	num	BigInteger	0	NullArgumentException	$ == null
799	121	8	BigFraction.java	BigFraction	den	BigInteger	0	NullArgumentException	$ == null
800	124	8	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.equals($)
801	127	8	BigFraction.java	BigFraction	num	BigInteger	1	DEF	BigInteger.ZERO.equals($)
802	134	12	BigFraction.java	BigFraction	gcd	BigInteger	0	DEF	BigInteger.ONE.compareTo($) < 0
803	140	12	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.compareTo($) > 0
804	174	8	BigFraction.java	BigFraction	value	double	0	DEF	Double.isNaN($)
805	177	8	BigFraction.java	BigFraction	value	double	0	DEF	Double.isInfinite($)
806	186	8	BigFraction.java	BigFraction	exponent	long	0	DEF	$ != 0
807	190	8	BigFraction.java	BigFraction	sign	long	0	DEF	$ != 0
33153	194	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x001ffffffffffffeL) != 0
33153	194	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x1) == 0
808	199	8	BigFraction.java	BigFraction	k	int	1	DEF	$ < 0
809	276	8	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	a0 > $
809	276	8	BigFraction.java	BigFraction	a0	long	0	FractionConversionException	$ > overflow
810	282	8	BigFraction.java	BigFraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
810	282	8	BigFraction.java	BigFraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
810	282	8	BigFraction.java	BigFraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
33154	298	8	BigFraction.java	BigFraction	stop	boolean	0	NIL-DOWHILE	$
811	304	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	p2 > $
811	304	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	q2 > $
811	304	12	BigFraction.java	BigFraction	p2	long	0	FractionConversionException	$ > overflow
811	304	12	BigFraction.java	BigFraction	q2	long	0	FractionConversionException	$ > overflow
812	309	12	BigFraction.java	BigFraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
812	309	12	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
812	309	12	BigFraction.java	BigFraction	n	int	1	DEF	$ < maxIterations
812	309	12	BigFraction.java	BigFraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
812	309	12	BigFraction.java	BigFraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
812	309	12	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
812	309	12	BigFraction.java	BigFraction	maxIterations	int	1	DEF	n < $
813	323	8	BigFraction.java	BigFraction	n	int	0	FractionConversionException	$ >= maxIterations
813	323	8	BigFraction.java	BigFraction	maxIterations	int	0	FractionConversionException	n >= $
814	327	8	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
814	327	8	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
815	434	8	BigFraction.java	getReducedFraction	numerator	int	0	RET	$ == 0
816	509	8	BigFraction.java	add	fraction	BigFraction	0	NullArgumentException	$ == null
817	512	8	BigFraction.java	add	fraction	BigFraction	0	RET	ZERO.equals($)
818	519	8	BigFraction.java	add	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
818	519	8	BigFraction.java	add	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
819	616	8	BigFraction.java	divide	bg	BigInteger	0	DEF	BigInteger.ZERO.equals($)
820	666	8	BigFraction.java	divide	fraction	BigFraction	0	NullArgumentException	$ == null
821	669	8	BigFraction.java	divide	THIS	BigFraction	0	DEF	BigInteger.ZERO.equals(fraction.$.numerator)
821	669	8	BigFraction.java	divide	fraction	BigFraction	0	DEF	BigInteger.ZERO.equals($.numerator)
822	709	8	BigFraction.java	equals	THIS	BigFraction	1	DEF	$ == other
822	709	8	BigFraction.java	equals	other	Object	1	DEF	this == $
823	711	15	BigFraction.java	equals	other	Object	0	DEF	$ instanceof BigFraction
824	852	8	BigFraction.java	multiply	bg	BigInteger	0	NullArgumentException	$ == null
825	897	8	BigFraction.java	multiply	fraction	BigFraction	0	NullArgumentException	$ == null
826	900	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
826	900	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	fraction.$.numerator.equals(BigInteger.ZERO)
826	900	8	BigFraction.java	multiply	fraction	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
827	944	8	BigFraction.java	pow	exponent	int	0	RET	$ < 0
828	961	8	BigFraction.java	pow	exponent	long	0	RET	$ < 0
829	980	8	BigFraction.java	pow	exponent	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
830	1039	8	BigFraction.java	subtract	bg	BigInteger	0	NullArgumentException	$ == null
831	1082	8	BigFraction.java	subtract	fraction	BigFraction	0	NullArgumentException	$ == null
832	1085	8	BigFraction.java	subtract	fraction	BigFraction	0	RET	ZERO.equals($)
833	1091	8	BigFraction.java	subtract	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
833	1091	8	BigFraction.java	subtract	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
834	1114	8	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ONE.equals($.denominator)
835	1116	15	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ZERO.equals($.numerator)
836	169	8	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigFraction
837	171	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigInteger
838	173	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
839	195	8	BigFractionFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
840	219	8	BigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
841	252	8	BigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
33155	275	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	$ < source.length()
33155	275	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	Character.isDigit(source.charAt($))
33155	275	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	end < $.length()
33155	275	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	Character.isDigit($.charAt(end))
61	271	8	BigReal.java	equals	THIS	BigReal	0	RET	$ == other
61	271	8	BigReal.java	equals	other	Object	0	RET	this == $
62	275	8	BigReal.java	equals	other	Object	0	RET	$ instanceof BigReal
2041	55	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i < 0
2041	55	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i >1
34217	70	8	BinaryChromosome.java	randomBinaryRepresentation	j	int	0	NIL-FOR	$<length
34217	70	8	BinaryChromosome.java	randomBinaryRepresentation	length	int	0	NIL-FOR	j<$
2042	82	8	BinaryChromosome.java	isSame	another	Chromosome	0	RET	$ instanceof BinaryChromosome
2043	87	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getLength() != anotherBc.getLength()
2043	87	8	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getLength() != $.getLength()
34218	91	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	NIL-FOR	i< $.getRepresentation().size()
34218	91	8	BinaryChromosome.java	isSame	i	int	0	NIL-FOR	$< getRepresentation().size()
2044	92	12	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getRepresentation().get(i).equals(anotherBc.getRepresentation().get(i))
2044	92	12	BinaryChromosome.java	isSame	i	int	0	RET	getRepresentation().get($).equals(anotherBc.getRepresentation().get($))
2044	92	12	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getRepresentation().get(i).equals($.getRepresentation().get(i))
2053	36	8	BinaryMutation.java	mutate	original	Chromosome	0	IllegalArgumentException	$ instanceof BinaryChromosome
940	52	8	BinomialDistributionImpl.java	BinomialDistributionImpl	trials	int	0	NotPositiveException	$ < 0
941	56	8	BinomialDistributionImpl.java	BinomialDistributionImpl	p	double	0	OutOfRangeException	$ < 0
941	56	8	BinomialDistributionImpl.java	BinomialDistributionImpl	p	double	0	OutOfRangeException	$ > 1
942	113	8	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
943	115	15	BinomialDistributionImpl.java	cumulativeProbability	THIS	BinomialDistributionImpl	1	DEF	x >= $.numberOfTrials
943	115	15	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= numberOfTrials
944	132	8	BinomialDistributionImpl.java	probability	THIS	BinomialDistributionImpl	1	DEF	x > $.numberOfTrials
944	132	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ < 0
944	132	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ > numberOfTrials
945	157	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
946	160	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
2724	76	12	BisectionSolver.java	doSolve	fm	double	1	DEF	$ * fmin > 0
2724	76	12	BisectionSolver.java	doSolve	fmin	double	1	DEF	fm * $ > 0
2725	84	12	BisectionSolver.java	doSolve	min	double	0	RET	FastMath.abs(max - $) <= absoluteAccuracy
2725	84	12	BisectionSolver.java	doSolve	max	double	0	RET	FastMath.abs($ - min) <= absoluteAccuracy
2725	84	12	BisectionSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(max - min) <= $
34208	68	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < iEnd
34208	68	8	BitsStreamGenerator.java	nextBytes	iEnd	int	0	NIL-WHILE	i < $
34209	77	8	BitsStreamGenerator.java	nextBytes	THIS	BitsStreamGenerator	0	NIL-WHILE	i < bytes.$.length
34209	77	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < bytes.length
34209	77	8	BitsStreamGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	i < $.length
2014	99	8	BitsStreamGenerator.java	nextGaussian	THIS	BitsStreamGenerator	1	DEF	Double.isNaN($.nextGaussian)
2015	125	8	BitsStreamGenerator.java	nextInt	n	int	0	NotStrictlyPositiveException	$ < 1
2016	139	12	BitsStreamGenerator.java	nextInt	random	int	0	RET	$ < n
2016	139	12	BitsStreamGenerator.java	nextInt	n	int	0	RET	random < $
1035	150	8	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	1	DEF	$
33177	159	8	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
33177	159	8	BlockFieldMatrix.java	BlockFieldMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
33178	161	12	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
33178	161	12	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1036	162	16	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1036	162	16	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1036	162	16	BlockFieldMatrix.java	BlockFieldMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1036	162	16	BlockFieldMatrix.java	BlockFieldMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1036	162	16	BlockFieldMatrix.java	BlockFieldMatrix	blockData	T[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1037	166	16	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	0	DEF	$
33179	205	8	BlockFieldMatrix.java	toBlocksLayout	THIS	BlockFieldMatrix	0	NIL-FOR	i < rawData.$.length
33179	205	8	BlockFieldMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
33179	205	8	BlockFieldMatrix.java	toBlocksLayout	rawData	T[][]	0	NIL-FOR	i < $.length
1038	207	12	BlockFieldMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1038	207	12	BlockFieldMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
33180	216	8	BlockFieldMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
33180	216	8	BlockFieldMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
33181	220	12	BlockFieldMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
33181	220	12	BlockFieldMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
33182	231	16	BlockFieldMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
33182	231	16	BlockFieldMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
33183	265	8	BlockFieldMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
33183	265	8	BlockFieldMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
33184	269	12	BlockFieldMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
33184	269	12	BlockFieldMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
33185	295	8	BlockFieldMatrix.java	copy	THIS	BlockFieldMatrix	0	NIL-FOR	i < $.blocks.$.length
33185	295	8	BlockFieldMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
33186	316	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
33186	316	12	BlockFieldMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
33186	316	12	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
33187	317	16	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
33187	317	16	BlockFieldMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
33187	317	16	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
33188	327	20	BlockFieldMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
33188	327	20	BlockFieldMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
33189	328	24	BlockFieldMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
33189	328	24	BlockFieldMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
33190	359	8	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
33190	359	8	BlockFieldMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
33190	359	8	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
33191	363	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
33191	363	12	BlockFieldMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
33191	363	12	BlockFieldMatrix.java	add	outBlock	T[]	0	NIL-FOR	k < $.length
33192	385	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
33192	385	12	BlockFieldMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
33192	385	12	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
33193	386	16	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
33193	386	16	BlockFieldMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
33193	386	16	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
33194	396	20	BlockFieldMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
33194	396	20	BlockFieldMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
33195	397	24	BlockFieldMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
33195	397	24	BlockFieldMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
33196	427	8	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
33196	427	8	BlockFieldMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
33196	427	8	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
33197	431	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
33197	431	12	BlockFieldMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
33197	431	12	BlockFieldMatrix.java	subtract	outBlock	T[]	0	NIL-FOR	k < $.length
33198	445	8	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
33198	445	8	BlockFieldMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
33198	445	8	BlockFieldMatrix.java	scalarAdd	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
33199	448	12	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
33199	448	12	BlockFieldMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
33199	448	12	BlockFieldMatrix.java	scalarAdd	outBlock	T[]	0	NIL-FOR	k < $.length
33200	463	8	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
33200	463	8	BlockFieldMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
33200	463	8	BlockFieldMatrix.java	scalarMultiply	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
33201	466	12	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
33201	466	12	BlockFieldMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
33201	466	12	BlockFieldMatrix.java	scalarMultiply	outBlock	T[]	0	NIL-FOR	k < $.length
33202	489	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
33202	489	12	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
33202	489	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
33203	494	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
33203	494	16	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
33203	494	16	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
33204	503	20	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
33204	503	20	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
33205	508	24	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
33205	508	24	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
33206	511	28	BlockFieldMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
33206	511	28	BlockFieldMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
33207	514	32	BlockFieldMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
33207	514	32	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
33208	552	8	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
33208	552	8	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
33208	552	8	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
33209	557	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
33209	557	12	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
33209	557	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
33210	567	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
33210	567	16	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
33211	572	20	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
33211	572	20	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
33212	575	24	BlockFieldMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
33212	575	24	BlockFieldMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
33213	579	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
33213	579	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
33214	588	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
33214	588	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
33215	613	8	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
33215	613	8	BlockFieldMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
33216	618	12	BlockFieldMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
33216	618	12	BlockFieldMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
33217	622	16	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
33217	622	16	BlockFieldMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
33218	654	8	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
33218	654	8	BlockFieldMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
33218	654	8	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
33219	657	12	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
33219	657	12	BlockFieldMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
33219	657	12	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
1039	668	16	BlockFieldMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1040	670	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1041	702	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
33220	752	8	BlockFieldMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
33220	752	8	BlockFieldMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1042	765	8	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1043	772	12	BlockFieldMatrix.java	setSubMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1043	772	12	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
33221	784	8	BlockFieldMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
33221	784	8	BlockFieldMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
33222	790	12	BlockFieldMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
33222	790	12	BlockFieldMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
33223	799	16	BlockFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
33223	799	16	BlockFieldMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
33224	821	8	BlockFieldMatrix.java	getRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
33224	821	8	BlockFieldMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1044	825	12	BlockFieldMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1044	825	12	BlockFieldMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1045	864	8	BlockFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1045	864	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
1045	864	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
33225	877	8	BlockFieldMatrix.java	setRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
33225	877	8	BlockFieldMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1046	881	12	BlockFieldMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1046	881	12	BlockFieldMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
33226	906	8	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
33226	906	8	BlockFieldMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
33227	909	12	BlockFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
33227	909	12	BlockFieldMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1047	910	16	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	DEF	outIndex >= outBlock.$.length
1047	910	16	BlockFieldMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1047	910	16	BlockFieldMatrix.java	getColumnMatrix	outBlock	T[]	0	DEF	outIndex >= $.length
1048	946	8	BlockFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1048	946	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1048	946	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
33228	960	8	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
33228	960	8	BlockFieldMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
33229	963	12	BlockFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
33229	963	12	BlockFieldMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1049	964	16	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	DEF	mIndex >= mBlock.$.length
1049	964	16	BlockFieldMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1049	964	16	BlockFieldMatrix.java	setColumnMatrix	mBlock	T[]	0	DEF	mIndex >= $.length
33230	983	8	BlockFieldMatrix.java	getRowVector	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
33230	983	8	BlockFieldMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
33231	1014	8	BlockFieldMatrix.java	getColumnVector	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
33231	1014	8	BlockFieldMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
33232	1017	12	BlockFieldMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
33232	1017	12	BlockFieldMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
33233	1045	8	BlockFieldMatrix.java	getRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
33233	1045	8	BlockFieldMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1050	1060	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1050	1060	8	BlockFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1050	1060	8	BlockFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
33234	1068	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
33234	1068	8	BlockFieldMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
33235	1087	8	BlockFieldMatrix.java	getColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
33235	1087	8	BlockFieldMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
33236	1090	12	BlockFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
33236	1090	12	BlockFieldMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1051	1103	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1051	1103	8	BlockFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1051	1103	8	BlockFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
33237	1112	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
33237	1112	8	BlockFieldMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
33238	1115	12	BlockFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
33238	1115	12	BlockFieldMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
33239	1188	8	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockColumns
33239	1188	8	BlockFieldMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
33240	1189	12	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockRows
33240	1189	12	BlockFieldMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
33241	1199	16	BlockFieldMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
33241	1199	16	BlockFieldMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
33242	1202	20	BlockFieldMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
33242	1202	20	BlockFieldMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1052	1233	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.columns
1052	1233	8	BlockFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != columns
33243	1240	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
33243	1240	8	BlockFieldMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
33244	1243	12	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
33244	1243	12	BlockFieldMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
33245	1248	16	BlockFieldMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
33245	1248	16	BlockFieldMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
33246	1251	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
33246	1251	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
33247	1260	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
33247	1260	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1053	1275	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.rows
1053	1275	8	BlockFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != rows
33248	1282	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
33248	1282	8	BlockFieldMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
33249	1289	12	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
33249	1289	12	BlockFieldMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
33250	1293	16	BlockFieldMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
33250	1293	16	BlockFieldMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
33251	1297	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
33251	1297	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
33252	1306	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
33252	1306	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
33253	1322	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
33253	1322	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
33254	1325	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
33254	1325	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
33255	1326	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
33255	1326	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
33256	1332	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
33256	1332	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
33257	1346	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
33257	1346	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
33258	1349	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
33258	1349	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
33259	1350	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
33259	1350	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
33260	1356	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
33260	1356	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
33261	1373	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
33261	1373	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
33262	1377	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
33262	1377	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
33263	1378	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
33263	1378	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
33264	1385	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
33264	1385	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
33265	1402	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
33265	1402	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
33266	1406	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
33266	1406	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
33267	1407	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
33267	1407	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
33268	1414	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
33268	1414	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
33269	1429	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
33269	1429	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
33270	1432	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
33270	1432	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
33271	1437	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
33271	1437	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
33272	1438	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
33272	1438	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
33273	1454	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
33273	1454	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
33274	1457	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
33274	1457	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
33275	1462	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
33275	1462	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
33276	1463	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
33276	1463	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
33277	1481	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
33277	1481	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
33278	1485	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
33278	1485	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
33279	1491	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
33279	1491	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
33280	1493	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
33280	1493	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
33281	1510	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
33281	1510	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
33282	1514	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
33282	1514	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
33283	1520	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
33283	1520	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
33284	1522	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
33284	1522	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
1286	147	8	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	1	DEF	$
33638	156	8	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
33638	156	8	BlockRealMatrix.java	BlockRealMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
33639	158	12	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
33639	158	12	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1287	159	16	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1287	159	16	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1287	159	16	BlockRealMatrix.java	BlockRealMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1287	159	16	BlockRealMatrix.java	BlockRealMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1287	159	16	BlockRealMatrix.java	BlockRealMatrix	blockData	double[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1288	163	16	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	0	DEF	$
33640	198	8	BlockRealMatrix.java	toBlocksLayout	THIS	BlockRealMatrix	0	NIL-FOR	i < rawData.$.length
33640	198	8	BlockRealMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
33640	198	8	BlockRealMatrix.java	toBlocksLayout	rawData	double[][]	0	NIL-FOR	i < $.length
1289	200	12	BlockRealMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1289	200	12	BlockRealMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
33641	208	8	BlockRealMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
33641	208	8	BlockRealMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
33642	212	12	BlockRealMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
33642	212	12	BlockRealMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
33643	223	16	BlockRealMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
33643	223	16	BlockRealMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
33644	252	8	BlockRealMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
33644	252	8	BlockRealMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
33645	256	12	BlockRealMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
33645	256	12	BlockRealMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
33646	281	8	BlockRealMatrix.java	copy	THIS	BlockRealMatrix	0	NIL-FOR	i < $.blocks.$.length
33646	281	8	BlockRealMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
33647	301	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
33647	301	12	BlockRealMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
33647	301	12	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
33648	302	16	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
33648	302	16	BlockRealMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
33648	302	16	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
33649	312	20	BlockRealMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
33649	312	20	BlockRealMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
33650	313	24	BlockRealMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
33650	313	24	BlockRealMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
33651	342	8	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
33651	342	8	BlockRealMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
33651	342	8	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
33652	346	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
33652	346	12	BlockRealMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
33652	346	12	BlockRealMatrix.java	add	outBlock	double[]	0	NIL-FOR	k < $.length
33653	367	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
33653	367	12	BlockRealMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
33653	367	12	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
33654	368	16	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
33654	368	16	BlockRealMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
33654	368	16	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
33655	378	20	BlockRealMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
33655	378	20	BlockRealMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
33656	379	24	BlockRealMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
33656	379	24	BlockRealMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
33657	408	8	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
33657	408	8	BlockRealMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
33657	408	8	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
33658	412	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
33658	412	12	BlockRealMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
33658	412	12	BlockRealMatrix.java	subtract	outBlock	double[]	0	NIL-FOR	k < $.length
33659	427	8	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
33659	427	8	BlockRealMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
33659	427	8	BlockRealMatrix.java	scalarAdd	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
33660	430	12	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
33660	430	12	BlockRealMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
33660	430	12	BlockRealMatrix.java	scalarAdd	outBlock	double[]	0	NIL-FOR	k < $.length
33661	444	8	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
33661	444	8	BlockRealMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
33661	444	8	BlockRealMatrix.java	scalarMultiply	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
33662	447	12	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
33662	447	12	BlockRealMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
33662	447	12	BlockRealMatrix.java	scalarMultiply	outBlock	double[]	0	NIL-FOR	k < $.length
33663	468	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
33663	468	12	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
33663	468	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
33664	472	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
33664	472	16	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
33664	472	16	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
33665	480	20	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
33665	480	20	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
33666	485	24	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
33666	485	24	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
33667	488	28	BlockRealMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
33667	488	28	BlockRealMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
33668	491	32	BlockRealMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
33668	491	32	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
33669	525	8	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
33669	525	8	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
33669	525	8	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
33670	530	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
33670	530	12	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
33670	530	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
33671	540	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
33671	540	16	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
33672	545	20	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
33672	545	20	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
33673	548	24	BlockRealMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
33673	548	24	BlockRealMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
33674	552	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
33674	552	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
33675	560	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
33675	560	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
33676	583	8	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
33676	583	8	BlockRealMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
33677	588	12	BlockRealMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
33677	588	12	BlockRealMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
33678	592	16	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
33678	592	16	BlockRealMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
33679	610	8	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
33679	610	8	BlockRealMatrix.java	getNorm	jBlock	int	0	NIL-FOR	$ < blockColumns
33680	613	12	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
33680	613	12	BlockRealMatrix.java	getNorm	iBlock	int	0	NIL-FOR	$ < blockRows
33681	616	16	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
33681	616	16	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
33682	618	20	BlockRealMatrix.java	getNorm	i	int	0	NIL-FOR	$ < iHeight
33682	618	20	BlockRealMatrix.java	getNorm	iHeight	int	0	NIL-FOR	i < $
33683	624	12	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
33683	624	12	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
33684	635	8	BlockRealMatrix.java	getFrobeniusNorm	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.$.length
33684	635	8	BlockRealMatrix.java	getFrobeniusNorm	blockIndex	int	0	NIL-FOR	$ < blocks.length
33685	662	8	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
33685	662	8	BlockRealMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
33685	662	8	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
33686	665	12	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
33686	665	12	BlockRealMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
33686	665	12	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
1290	676	16	BlockRealMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1291	678	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1292	710	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
33687	760	8	BlockRealMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
33687	760	8	BlockRealMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1293	774	8	BlockRealMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1294	781	12	BlockRealMatrix.java	setSubMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1294	781	12	BlockRealMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
33688	793	8	BlockRealMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
33688	793	8	BlockRealMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
33689	799	12	BlockRealMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
33689	799	12	BlockRealMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
33690	808	16	BlockRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
33690	808	16	BlockRealMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
33691	830	8	BlockRealMatrix.java	getRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
33691	830	8	BlockRealMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1295	834	12	BlockRealMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1295	834	12	BlockRealMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1296	873	8	BlockRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1296	873	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1296	873	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
33692	886	8	BlockRealMatrix.java	setRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
33692	886	8	BlockRealMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1297	890	12	BlockRealMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1297	890	12	BlockRealMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
33693	915	8	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
33693	915	8	BlockRealMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
33694	918	12	BlockRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
33694	918	12	BlockRealMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1298	919	16	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	DEF	outIndex >= outBlock.$.length
1298	919	16	BlockRealMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1298	919	16	BlockRealMatrix.java	getColumnMatrix	outBlock	double[]	0	DEF	outIndex >= $.length
1299	955	8	BlockRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1299	955	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
1299	955	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
33695	969	8	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
33695	969	8	BlockRealMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
33696	972	12	BlockRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
33696	972	12	BlockRealMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1300	973	16	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	DEF	mIndex >= mBlock.$.length
1300	973	16	BlockRealMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1300	973	16	BlockRealMatrix.java	setColumnMatrix	mBlock	double[]	0	DEF	mIndex >= $.length
33697	992	8	BlockRealMatrix.java	getRowVector	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
33697	992	8	BlockRealMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
33698	1023	8	BlockRealMatrix.java	getColumnVector	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
33698	1023	8	BlockRealMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
33699	1026	12	BlockRealMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
33699	1026	12	BlockRealMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
33700	1054	8	BlockRealMatrix.java	getRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
33700	1054	8	BlockRealMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1301	1069	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1301	1069	8	BlockRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1301	1069	8	BlockRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
33701	1077	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
33701	1077	8	BlockRealMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
33702	1096	8	BlockRealMatrix.java	getColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
33702	1096	8	BlockRealMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
33703	1099	12	BlockRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
33703	1099	12	BlockRealMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1302	1112	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1302	1112	8	BlockRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1302	1112	8	BlockRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
33704	1121	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
33704	1121	8	BlockRealMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
33705	1124	12	BlockRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
33705	1124	12	BlockRealMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
33706	1183	8	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockColumns
33706	1183	8	BlockRealMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
33707	1184	12	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockRows
33707	1184	12	BlockRealMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
33708	1193	16	BlockRealMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
33708	1193	16	BlockRealMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
33709	1196	20	BlockRealMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
33709	1196	20	BlockRealMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1303	1225	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.columns
1303	1225	8	BlockRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != columns
33710	1231	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
33710	1231	8	BlockRealMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
33711	1234	12	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
33711	1234	12	BlockRealMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
33712	1239	16	BlockRealMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
33712	1239	16	BlockRealMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
33713	1242	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
33713	1242	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
33714	1250	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
33714	1250	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1304	1264	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.rows
1304	1264	8	BlockRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != rows
33715	1270	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
33715	1270	8	BlockRealMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
33716	1277	12	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
33716	1277	12	BlockRealMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
33717	1281	16	BlockRealMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
33717	1281	16	BlockRealMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
33718	1285	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
33718	1285	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
33719	1293	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
33719	1293	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
33720	1309	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
33720	1309	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
33721	1312	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
33721	1312	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
33722	1313	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
33722	1313	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
33723	1319	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
33723	1319	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
33724	1333	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
33724	1333	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
33725	1336	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
33725	1336	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
33726	1337	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
33726	1337	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
33727	1343	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
33727	1343	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
33728	1360	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
33728	1360	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
33729	1364	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
33729	1364	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
33730	1365	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
33730	1365	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
33731	1372	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
33731	1372	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
33732	1389	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
33732	1389	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
33733	1393	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
33733	1393	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
33734	1394	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
33734	1394	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
33735	1401	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
33735	1401	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
33736	1416	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
33736	1416	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
33737	1419	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
33737	1419	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
33738	1424	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
33738	1424	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
33739	1425	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
33739	1425	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
33740	1441	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
33740	1441	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
33741	1444	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
33741	1444	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
33742	1449	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
33742	1449	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
33743	1450	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
33743	1450	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
33744	1468	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
33744	1468	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
33745	1472	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
33745	1472	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
33746	1478	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
33746	1478	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
33747	1480	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
33747	1480	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
33748	1497	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
33748	1497	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
33749	1501	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
33749	1501	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
33750	1507	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
33750	1507	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
33751	1509	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
33751	1509	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
584	47	8	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute<S>	0	DEF	$.getPlusOutside() != null
585	50	8	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute<S>	0	DEF	$.getPlusInside() != null
1417	92	8	BracketFinder.java	BracketFinder	growLimit	double	0	NotStrictlyPositiveException	$ <= 0
1418	95	8	BracketFinder.java	BracketFinder	maxEvaluations	int	0	NotStrictlyPositiveException	$ <= 0
1419	121	8	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fA < fB : fA > fB
1419	121	8	BracketFinder.java	search	fA	double	0	DEF	isMinim ? $ < fB : $ > fB
1419	121	8	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fA < $ : fA > $
33887	137	8	BracketFinder.java	search	isMinim	boolean	0	NIL-WHILE	$ ? fC < fB : fC > fB
33887	137	8	BracketFinder.java	search	fB	double	0	NIL-WHILE	isMinim ? fC < $ : fC > $
33887	137	8	BracketFinder.java	search	fC	double	0	NIL-WHILE	isMinim ? $ < fB : $ > fB
1420	148	12	BracketFinder.java	search	w	double	1	DEF	($ - xC) * (xB - $) > 0
1420	148	12	BracketFinder.java	search	xC	double	1	DEF	(w - $) * (xB - w) > 0
1420	148	12	BracketFinder.java	search	xB	double	1	DEF	(w - xC) * ($ - w) > 0
1421	150	16	BracketFinder.java	search	fW	double	1	DEF	isMinim ? $ < fC : $ > fC
1421	150	16	BracketFinder.java	search	isMinim	boolean	1	DEF	$ ? fW < fC : fW > fC
1421	150	16	BracketFinder.java	search	fC	double	1	DEF	isMinim ? fW < $ : fW > $
1422	158	23	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ > fB : $ < fB
1422	158	23	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW > fB : fW < fB
1422	158	23	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fW > $ : fW < $
1423	167	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (wLim - xC) >= 0
1423	167	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * ($ - xC) >= 0
1423	167	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * (wLim - $) >= 0
1424	170	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (xC - $) > 0
1424	170	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * (xC - w) > 0
1424	170	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * ($ - w) > 0
1425	172	16	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ < fC : $ > fC
1425	172	16	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW < fC : fW > fC
1425	172	16	BracketFinder.java	search	fC	double	0	DEF	isMinim ? fW < $ : fW > $
1426	202	8	BracketFinder.java	search	THIS	BracketFinder	0	DEF	$.lo > $.hi
1431	77	8	BrentOptimizer.java	BrentOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
1432	80	8	BrentOptimizer.java	BrentOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
1433	101	8	BrentOptimizer.java	doOptimize	lo	double	1	DEF	$ < hi
1433	101	8	BrentOptimizer.java	doOptimize	hi	double	1	DEF	lo < $
1434	115	8	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1435	133	12	BrentOptimizer.java	doOptimize	stop	boolean	1	RET	$
1436	139	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(e) > $
1436	139	16	BrentOptimizer.java	doOptimize	e	double	1	DEF	FastMath.abs($) > tol1
1437	145	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	$ > 0
1438	154	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ < q * (b - x)
1438	154	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	FastMath.abs($) < FastMath.abs(0.5 * q * r)
1438	154	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ > q * (a - x)
1438	154	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p < $ * (b - x)
1438	154	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * $ * r)
1438	154	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p > $ * (a - x)
1438	154	20	BrentOptimizer.java	doOptimize	r	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * q * $)
1438	154	20	BrentOptimizer.java	doOptimize	a	double	1	DEF	p > q * ($ - x)
1438	154	20	BrentOptimizer.java	doOptimize	b	double	1	DEF	p < q * ($ - x)
1438	154	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p < q * (b - $)
1438	154	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p > q * (a - $)
1439	162	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	b - $ < tol2
1439	162	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	$ - a < tol2
1439	162	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	b - u < $
1439	162	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	u - a < $
1439	162	24	BrentOptimizer.java	doOptimize	a	double	0	DEF	u - $ < tol2
1439	162	24	BrentOptimizer.java	doOptimize	b	double	0	DEF	$ - u < tol2
1440	163	28	BrentOptimizer.java	doOptimize	m	double	1	DEF	x <= $
1440	163	28	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ <= m
1441	171	24	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1441	171	24	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1442	180	20	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1442	180	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1443	189	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(d) < $
1443	189	16	BrentOptimizer.java	doOptimize	d	double	1	DEF	FastMath.abs($) < tol1
1444	190	20	BrentOptimizer.java	doOptimize	d	double	1	DEF	$ >= 0
1445	200	16	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1446	205	16	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fx
1446	205	16	BrentOptimizer.java	doOptimize	fx	double	1	DEF	fu <= $
1447	206	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1447	206	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1448	218	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1448	218	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1449	223	20	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fw
1449	223	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	MathUtils.equals(w, $)
1449	223	20	BrentOptimizer.java	doOptimize	w	double	1	DEF	MathUtils.equals($, x)
1449	223	20	BrentOptimizer.java	doOptimize	fw	double	1	DEF	fu <= $
1450	229	27	BrentOptimizer.java	doOptimize	fu	double	0	DEF	$ <= fv
1450	229	27	BrentOptimizer.java	doOptimize	x	double	0	DEF	MathUtils.equals(v, $)
1450	229	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	MathUtils.equals($, w)
1450	229	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	MathUtils.equals($, x)
1450	229	27	BrentOptimizer.java	doOptimize	w	double	0	DEF	MathUtils.equals(v, $)
1450	229	27	BrentOptimizer.java	doOptimize	fv	double	0	DEF	fu <= $
1451	241	16	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariateRealPointValuePair>	0	RET	$ != null
1452	242	20	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariateRealPointValuePair>	0	RET	$.converged(iter, previous, current)
1452	242	20	BrentOptimizer.java	doOptimize	previous	UnivariateRealPointValuePair	0	RET	checker.converged(iter, $, current)
1452	242	20	BrentOptimizer.java	doOptimize	current	UnivariateRealPointValuePair	0	RET	checker.converged(iter, previous, $)
1452	242	20	BrentOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
2733	92	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
2733	92	8	BrentSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
2734	98	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
2734	98	8	BrentSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
2735	103	8	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
2735	103	8	BrentSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
2736	109	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
2736	109	8	BrentSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
2737	114	8	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
2737	114	8	BrentSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
2738	152	12	BrentSolver.java	brent	fb	double	0	DEF	FastMath.abs(fc) < FastMath.abs($)
2738	152	12	BrentSolver.java	brent	fc	double	0	DEF	FastMath.abs($) < FastMath.abs(fb)
2739	164	12	BrentSolver.java	brent	tol	double	0	RET	FastMath.abs(m) <= $
2739	164	12	BrentSolver.java	brent	m	double	0	RET	FastMath.abs($) <= tol
2739	164	12	BrentSolver.java	brent	fb	double	0	RET	MathUtils.equals($, 0)
2740	168	12	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(e) < $
2740	168	12	BrentSolver.java	brent	fa	double	1	DEF	FastMath.abs($) <= FastMath.abs(fb)
2740	168	12	BrentSolver.java	brent	fb	double	1	DEF	FastMath.abs(fa) <= FastMath.abs($)
2740	168	12	BrentSolver.java	brent	e	double	1	DEF	FastMath.abs($) < tol
2741	180	16	BrentSolver.java	brent	a	double	1	DEF	$ == c
2741	180	16	BrentSolver.java	brent	c	double	1	DEF	a == $
2742	191	16	BrentSolver.java	brent	p	double	1	DEF	$ > 0
2743	198	16	BrentSolver.java	brent	s	double	1	DEF	p >= FastMath.abs(0.5 * $ * q)
2743	198	16	BrentSolver.java	brent	p	double	1	DEF	$ >= FastMath.abs(0.5 * s * q)
2743	198	16	BrentSolver.java	brent	p	double	1	DEF	$ >= 1.5 * m * q - FastMath.abs(tol * q)
2743	198	16	BrentSolver.java	brent	q	double	1	DEF	p >= FastMath.abs(0.5 * s * $)
2743	198	16	BrentSolver.java	brent	q	double	1	DEF	p >= 1.5 * m * $ - FastMath.abs(tol * $)
2743	198	16	BrentSolver.java	brent	tol	double	1	DEF	p >= 1.5 * m * q - FastMath.abs($ * q)
2743	198	16	BrentSolver.java	brent	m	double	1	DEF	p >= 1.5 * $ * q - FastMath.abs(tol * q)
2744	212	12	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(d) > $
2744	212	12	BrentSolver.java	brent	d	double	1	DEF	FastMath.abs($) > tol
2745	214	19	BrentSolver.java	brent	m	double	1	DEF	$ > 0
2746	220	12	BrentSolver.java	brent	fb	double	0	DEF	$ > 0
2746	220	12	BrentSolver.java	brent	fb	double	0	DEF	$ <= 0
2746	220	12	BrentSolver.java	brent	fc	double	0	DEF	$ <= 0
2746	220	12	BrentSolver.java	brent	fc	double	0	DEF	$ > 0
1566	298	8	CMAESOptimizer.java	CMAESOptimizer	boundaries	double[][]	1	DEF	$ == null
33997	303	12	CMAESOptimizer.java	CMAESOptimizer	i	int	0	NIL-FOR	$ < len
33997	303	12	CMAESOptimizer.java	CMAESOptimizer	len	int	0	NIL-FOR	i < $
33998	366	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	$.iterations <= $.maxIterations
33999	372	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	k < $.lambda
33999	372	16	CMAESOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < lambda
34000	374	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.checkFeasableCount+1
34000	374	20	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < checkFeasableCount+1
1567	375	24	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
1568	382	24	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.checkFeasableCount
1568	382	24	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= checkFeasableCount
1568	382	24	CMAESOptimizer.java	doOptimize	arxk	RealMatrix	0	DEF	fitfun.isFeasible($.getColumn(0))
1568	382	24	CMAESOptimizer.java	doOptimize	fitfun	FitnessFunction	0	DEF	$.isFeasible(arxk.getColumn(0))
1569	404	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
1570	413	16	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	bestValue > $
1570	413	16	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ > bestFitness
1571	419	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
1571	419	20	CMAESOptimizer.java	doOptimize	lastResult	RealPointValuePair	0	DEF	$ != null
1572	420	24	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, optimum, lastResult)
1572	420	24	CMAESOptimizer.java	doOptimize	optimum	RealPointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
1572	420	24	CMAESOptimizer.java	doOptimize	lastResult	RealPointValuePair	0	DEF	getConvergenceChecker().converged(iterations, optimum, $)
1573	427	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.stopfitness != 0
1574	428	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestFitness < ($.isMinimize ? $.stopfitness : -$.stopfitness)
1574	428	20	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	$ < (isMinimize ? stopfitness : -stopfitness)
34001	434	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
34001	434	16	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
1575	435	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > $.stopTolX
1575	435	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma*(Math.max(Math.abs(pcCol[$]), sqrtDiagC[$])) > stopTolX
1575	435	20	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma*(Math.max(Math.abs(pcCol[i]), $[i])) > stopTolX
1575	435	20	CMAESOptimizer.java	doOptimize	pcCol	double[]	0	DEF	sigma*(Math.max(Math.abs($[i]), sqrtDiagC[i])) > stopTolX
1576	438	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.dimension-1
1576	438	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= dimension-1
34002	442	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
34002	442	16	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
1577	443	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma*sqrtDiagC[i] > $.stopTolUpX
1577	443	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma*sqrtDiagC[$] > stopTolUpX
1577	443	20	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma*$[i] > stopTolUpX
1578	449	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, bestFitness) < $.stopTolFun
1578	449	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
1578	449	16	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
1578	449	16	CMAESOptimizer.java	doOptimize	worstFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
1578	449	16	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
1578	449	16	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
1579	453	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > $.fitnessHistory.$.length
1579	453	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	historyWorst-historyBest < $.stopTolHistFun
1579	453	16	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	historyWorst-$ < stopTolHistFun
1579	453	16	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	$-historyBest < stopTolHistFun
1580	458	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.max($.diagD)/$.min($.diagD) > 1e7
1581	462	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
1582	466	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, current, lastResult)
1582	466	20	CMAESOptimizer.java	doOptimize	current	RealPointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
1582	466	20	CMAESOptimizer.java	doOptimize	lastResult	RealPointValuePair	0	DEF	$ != null
1582	466	20	CMAESOptimizer.java	doOptimize	lastResult	RealPointValuePair	0	DEF	getConvergenceChecker().converged(iterations, current, $)
1583	473	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestValue == fitness[arindex[(int)(0.1+$.lambda/4.)]]
1583	473	16	CMAESOptimizer.java	doOptimize	fitness	double[]	0	DEF	bestValue == $[arindex[(int)(0.1+lambda/4.)]]
1583	473	16	CMAESOptimizer.java	doOptimize	arindex	int[]	0	DEF	bestValue == fitness[$[(int)(0.1+lambda/4.)]]
1583	473	16	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ == fitness[arindex[(int)(0.1+lambda/4.)]]
1584	476	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
1584	476	16	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
1584	476	16	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
1584	476	16	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
1585	483	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.generateStatistics
1586	498	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.boundaries != null
1587	499	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	MultiDimensionMismatchException	$.boundaries.$.length != 2
1588	504	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NoDataException	$.boundaries[1] == null
1588	504	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NoDataException	$.boundaries[0] == null
1589	507	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	MultiDimensionMismatchException	$.boundaries[0].length != init.$.length
1589	507	12	CMAESOptimizer.java	checkParameters	init	double[]	0	MultiDimensionMismatchException	boundaries[0].length != $.length
1590	512	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	MultiDimensionMismatchException	$.boundaries[1].length != init.$.length
1590	512	12	CMAESOptimizer.java	checkParameters	init	double[]	0	MultiDimensionMismatchException	boundaries[1].length != $.length
34003	517	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < init.$.length
34003	517	12	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < init.length
34003	517	12	CMAESOptimizer.java	checkParameters	init	double[]	0	NIL-FOR	i < $.length
1591	518	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.boundaries[0][i] > init[i]
1591	518	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.boundaries[1][i] < init[i]
1591	518	16	CMAESOptimizer.java	checkParameters	i	int	0	OutOfRangeException	boundaries[0][$] > init[$]
1591	518	16	CMAESOptimizer.java	checkParameters	i	int	0	OutOfRangeException	boundaries[1][$] < init[$]
1591	518	16	CMAESOptimizer.java	checkParameters	init	double[]	0	OutOfRangeException	boundaries[0][i] > $[i]
1591	518	16	CMAESOptimizer.java	checkParameters	init	double[]	0	OutOfRangeException	boundaries[1][i] < $[i]
1592	524	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma != null
1593	525	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	MultiDimensionMismatchException	$.inputSigma.$.length != init.$.length
1593	525	12	CMAESOptimizer.java	checkParameters	init	double[]	0	MultiDimensionMismatchException	inputSigma.length != $.length
34004	530	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < init.$.length
34004	530	12	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < init.length
34004	530	12	CMAESOptimizer.java	checkParameters	init	double[]	0	NIL-FOR	i < $.length
1594	531	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NotPositiveException	$.inputSigma[i] < 0
1594	531	16	CMAESOptimizer.java	checkParameters	i	int	0	NotPositiveException	inputSigma[$] < 0
1595	534	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.boundaries != null
1596	535	20	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma[i] > 1.0
1596	535	20	CMAESOptimizer.java	checkParameters	i	int	0	OutOfRangeException	inputSigma[$] > 1.0
1597	551	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	DEF	$.lambda <= 0
34005	556	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < guess.$.length
34005	556	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < guess.length
34005	556	8	CMAESOptimizer.java	initializeCMA	guess	double[]	0	NIL-FOR	i < $.length
34006	574	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.mu
34006	574	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < mu
34007	613	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.historySize
34007	613	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < historySize
1598	637	8	CMAESOptimizer.java	updateEvolutionPaths	hsig	boolean	0	DEF	$
1599	667	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.iterations > $.diagonalOnly
1599	667	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.diagonalOnly > 1
1600	695	8	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu > 0
1601	703	12	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	1	DEF	$.isActiveCMA
1602	727	16	CMAESOptimizer.java	updateCovariance	negcovMax	double	0	DEF	negccov > $
1602	727	16	CMAESOptimizer.java	updateCovariance	negccov	double	0	DEF	$ > negcovMax
1603	767	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	($.iterations % 1. / ($.ccov1 + $.ccovmu + negccov) / $.dimension / 10.) < 1.
1603	767	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu + negccov > 0
1603	767	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1.
1603	767	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	ccov1 + ccovmu + $ > 0
1604	776	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.min($.diagD) <= 0
34008	777	16	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
34008	777	16	CMAESOptimizer.java	updateBD	i	int	0	NIL-FOR	$ < dimension
1605	778	20	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.diagD.getEntry(i, 0) < 0
1605	778	20	CMAESOptimizer.java	updateBD	i	int	0	DEF	diagD.getEntry($, 0) < 0
1606	786	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.max($.diagD) > 1e14 * $.min($.diagD)
34009	806	8	CMAESOptimizer.java	push	i	int	0	NIL-FOR	$ > 0
34010	821	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
34010	821	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
34010	821	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
34011	826	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
34011	826	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
34011	826	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
34012	1032	8	CMAESOptimizer.java	log	r	int	0	NIL-FOR	$ < m.getRowDimension()
34012	1032	8	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
34013	1033	12	CMAESOptimizer.java	log	c	int	0	NIL-FOR	$ < m.getColumnDimension()
34013	1033	12	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
34014	1047	8	CMAESOptimizer.java	sqrt	r	int	0	NIL-FOR	$ < m.getRowDimension()
34014	1047	8	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
34015	1048	12	CMAESOptimizer.java	sqrt	c	int	0	NIL-FOR	$ < m.getColumnDimension()
34015	1048	12	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
34016	1061	8	CMAESOptimizer.java	square	r	int	0	NIL-FOR	$ < m.getRowDimension()
34016	1061	8	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
34017	1062	12	CMAESOptimizer.java	square	c	int	0	NIL-FOR	$ < m.getColumnDimension()
34017	1062	12	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
34018	1079	8	CMAESOptimizer.java	times	r	int	0	NIL-FOR	$ < m.getRowDimension()
34018	1079	8	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
34019	1080	12	CMAESOptimizer.java	times	c	int	0	NIL-FOR	$ < m.getColumnDimension()
34019	1080	12	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
34020	1096	8	CMAESOptimizer.java	divide	r	int	0	NIL-FOR	$ < m.getRowDimension()
34020	1096	8	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
34021	1097	12	CMAESOptimizer.java	divide	c	int	0	NIL-FOR	$ < m.getColumnDimension()
34021	1097	12	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
34022	1111	8	CMAESOptimizer.java	selectColumns	r	int	0	NIL-FOR	$ < m.getRowDimension()
34022	1111	8	CMAESOptimizer.java	selectColumns	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
34023	1112	12	CMAESOptimizer.java	selectColumns	THIS	CMAESOptimizer	0	NIL-FOR	c < cols.$.length
34023	1112	12	CMAESOptimizer.java	selectColumns	c	int	0	NIL-FOR	$ < cols.length
34023	1112	12	CMAESOptimizer.java	selectColumns	cols	int[]	0	NIL-FOR	c < $.length
34024	1126	8	CMAESOptimizer.java	triu	r	int	0	NIL-FOR	$ < m.getRowDimension()
34024	1126	8	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
34025	1127	12	CMAESOptimizer.java	triu	c	int	0	NIL-FOR	$ < m.getColumnDimension()
34025	1127	12	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
34026	1141	8	CMAESOptimizer.java	sumRows	c	int	0	NIL-FOR	$ < m.getColumnDimension()
34026	1141	8	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
34027	1143	12	CMAESOptimizer.java	sumRows	r	int	0	NIL-FOR	$ < m.getRowDimension()
34027	1143	12	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
1607	1158	8	CMAESOptimizer.java	diag	m	RealMatrix	1	RET	$.getColumnDimension() == 1
34028	1160	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getRowDimension()
34028	1160	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
34029	1166	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getColumnDimension()
34029	1166	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
34030	1186	8	CMAESOptimizer.java	copyColumn	i	int	0	NIL-FOR	$ < m1.getRowDimension()
34030	1186	8	CMAESOptimizer.java	copyColumn	m1	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
34031	1200	8	CMAESOptimizer.java	ones	r	int	0	NIL-FOR	$ < n
34031	1200	8	CMAESOptimizer.java	ones	n	int	0	NIL-FOR	r < $
34032	1215	8	CMAESOptimizer.java	eye	r	int	0	NIL-FOR	$ < n
34032	1215	8	CMAESOptimizer.java	eye	n	int	0	NIL-FOR	r < $
1608	1216	12	CMAESOptimizer.java	eye	r	int	0	DEF	$ < m
1608	1216	12	CMAESOptimizer.java	eye	m	int	0	DEF	r < $
34033	1247	8	CMAESOptimizer.java	repmat	r	int	0	NIL-FOR	$ < n * rd
34033	1247	8	CMAESOptimizer.java	repmat	rd	int	0	NIL-FOR	r < n * $
34033	1247	8	CMAESOptimizer.java	repmat	n	int	0	NIL-FOR	r < $ * rd
34034	1248	12	CMAESOptimizer.java	repmat	c	int	0	NIL-FOR	$ < m * cd
34034	1248	12	CMAESOptimizer.java	repmat	cd	int	0	NIL-FOR	c < m * $
34034	1248	12	CMAESOptimizer.java	repmat	m	int	0	NIL-FOR	c < $ * cd
34035	1268	8	CMAESOptimizer.java	sequence	r	int	0	NIL-FOR	$ < size
34035	1268	8	CMAESOptimizer.java	sequence	size	int	0	NIL-FOR	r < $
34036	1282	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.getRowDimension()
34036	1282	8	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
34037	1283	12	CMAESOptimizer.java	max	c	int	0	NIL-FOR	$ < m.getColumnDimension()
34037	1283	12	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
1609	1285	16	CMAESOptimizer.java	max	e	double	0	DEF	max < $
1609	1285	16	CMAESOptimizer.java	max	max	double	0	DEF	$ < e
34038	1300	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.getRowDimension()
34038	1300	8	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
34039	1301	12	CMAESOptimizer.java	min	c	int	0	NIL-FOR	$ < m.getColumnDimension()
34039	1301	12	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
1610	1303	16	CMAESOptimizer.java	min	e	double	0	DEF	min > $
1610	1303	16	CMAESOptimizer.java	min	min	double	0	DEF	$ > e
34040	1318	8	CMAESOptimizer.java	max	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
34040	1318	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.length
34040	1318	8	CMAESOptimizer.java	max	m	double[]	0	NIL-FOR	r < $.length
1611	1319	12	CMAESOptimizer.java	max	r	int	0	DEF	max < m[$]
1611	1319	12	CMAESOptimizer.java	max	max	double	0	DEF	$ < m[r]
1611	1319	12	CMAESOptimizer.java	max	m	double[]	0	DEF	max < $[r]
34041	1333	8	CMAESOptimizer.java	min	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
34041	1333	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.length
34041	1333	8	CMAESOptimizer.java	min	m	double[]	0	NIL-FOR	r < $.length
1612	1334	12	CMAESOptimizer.java	min	r	int	0	DEF	min > m[$]
1612	1334	12	CMAESOptimizer.java	min	min	double	0	DEF	$ > m[r]
1612	1334	12	CMAESOptimizer.java	min	m	double[]	0	DEF	min > $[r]
34042	1348	8	CMAESOptimizer.java	inverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
34042	1348	8	CMAESOptimizer.java	inverse	i	int	0	NIL-FOR	$ < indices.length
34042	1348	8	CMAESOptimizer.java	inverse	indices	int[]	0	NIL-FOR	i < $.length
34043	1361	8	CMAESOptimizer.java	reverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
34043	1361	8	CMAESOptimizer.java	reverse	i	int	0	NIL-FOR	$ < indices.length
34043	1361	8	CMAESOptimizer.java	reverse	indices	int[]	0	NIL-FOR	i < $.length
34044	1374	8	CMAESOptimizer.java	randn	i	int	0	NIL-FOR	$ < size
34044	1374	8	CMAESOptimizer.java	randn	size	int	0	NIL-FOR	i < $
34045	1389	8	CMAESOptimizer.java	randn1	r	int	0	NIL-FOR	$ < size
34045	1389	8	CMAESOptimizer.java	randn1	size	int	0	NIL-FOR	r < $
34046	1390	12	CMAESOptimizer.java	randn1	c	int	0	NIL-FOR	$ < popSize
34046	1390	12	CMAESOptimizer.java	randn1	popSize	int	0	NIL-FOR	c < $
975	81	8	CauchyDistributionImpl.java	CauchyDistributionImpl	scale	double	0	NotStrictlyPositiveException	$ <= 0
976	135	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0
976	135	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1
977	137	15	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
978	139	16	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
979	159	8	CauchyDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < 0.5
980	180	8	CauchyDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < 0.5
981	201	8	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < 0.5
982	203	15	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > 0.5
506	75	8	Characterization.java	add	inside	boolean	1	DEF	$
507	76	12	Characterization.java	add	THIS	Characterization	1	DEF	$.in == null
508	82	12	Characterization.java	add	THIS	Characterization	1	DEF	$.out == null
1807	70	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	DimensionMismatchException	expected.$.length < 2
1807	70	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length < 2
1808	73	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	DimensionMismatchException	expected.$.length != observed.$.length
1808	73	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length != observed.length
1808	73	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	DimensionMismatchException	expected.length != $.length
34108	80	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
34108	80	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
34108	80	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
1809	86	8	ChiSquareTestImpl.java	chiSquare	sumExpected	double	0	DEF	FastMath.abs($ - sumObserved) > 10E-6
1809	86	8	ChiSquareTestImpl.java	chiSquare	sumObserved	double	0	DEF	FastMath.abs(sumExpected - $) > 10E-6
34109	91	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
34109	91	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
34109	91	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
1810	92	12	ChiSquareTestImpl.java	chiSquare	rescale	boolean	1	DEF	$
1811	139	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
1811	139	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
34110	160	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
34110	160	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
34111	161	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
34111	161	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
34112	171	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
34112	171	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
34113	172	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
34113	172	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
1812	205	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
1812	205	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
1813	221	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	DimensionMismatchException	observed1.$.length < 2
1813	221	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length < 2
1814	224	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	DimensionMismatchException	observed1.$.length != observed2.$.length
1814	224	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length != observed2.length
1814	224	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	0	DimensionMismatchException	observed1.length != $.length
34114	237	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
34114	237	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
34114	237	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
1815	242	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum1	long	0	MathIllegalArgumentException	$ == 0
1816	245	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum2	long	0	MathIllegalArgumentException	$ == 0
1817	250	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	0	DEF	$
34115	258	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
34115	258	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
34115	258	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
1818	259	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	MathIllegalArgumentException	observed1[$] == 0
1818	259	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	MathIllegalArgumentException	observed2[$] == 0
1818	259	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	1	MathIllegalArgumentException	$[i] == 0
1818	259	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	1	MathIllegalArgumentException	$[i] == 0
1819	264	16	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	1	DEF	$
1820	303	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ > 0.5
1820	303	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ <= 0
1821	320	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	MathIllegalArgumentException	in.$.length < 2
1821	320	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	MathIllegalArgumentException	$.length < 2
1822	325	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	MathIllegalArgumentException	in[0].length < 2
1822	325	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	MathIllegalArgumentException	$[0].length < 2
34116	347	8	ChiSquareTestImpl.java	checkRectangular	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
34116	347	8	ChiSquareTestImpl.java	checkRectangular	i	int	0	NIL-FOR	$ < in.length
34116	347	8	ChiSquareTestImpl.java	checkRectangular	in	long[][]	0	NIL-FOR	i < $.length
1823	348	12	ChiSquareTestImpl.java	checkRectangular	THIS	ChiSquareTestImpl	0	DimensionMismatchException	in[i].length != in[0].length
1823	348	12	ChiSquareTestImpl.java	checkRectangular	i	int	0	DimensionMismatchException	in[$].length != in[0].length
1823	348	12	ChiSquareTestImpl.java	checkRectangular	in	long[][]	0	DimensionMismatchException	$[i].length != $[0].length
34117	362	8	ChiSquareTestImpl.java	checkPositive	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
34117	362	8	ChiSquareTestImpl.java	checkPositive	i	int	0	NIL-FOR	$ < in.length
34117	362	8	ChiSquareTestImpl.java	checkPositive	in	double[]	0	NIL-FOR	i < $.length
1824	363	12	ChiSquareTestImpl.java	checkPositive	i	int	0	MathIllegalArgumentException	in[$] <= 0
1824	363	12	ChiSquareTestImpl.java	checkPositive	in	double[]	0	MathIllegalArgumentException	$[i] <= 0
34118	378	8	ChiSquareTestImpl.java	checkNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
34118	378	8	ChiSquareTestImpl.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
34118	378	8	ChiSquareTestImpl.java	checkNonNegative	in	long[]	0	NIL-FOR	i < $.length
1825	379	12	ChiSquareTestImpl.java	checkNonNegative	i	int	0	MathIllegalArgumentException	in[$] < 0
1825	379	12	ChiSquareTestImpl.java	checkNonNegative	in	long[]	0	MathIllegalArgumentException	$[i] < 0
34119	394	8	ChiSquareTestImpl.java	checkNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
34119	394	8	ChiSquareTestImpl.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
34119	394	8	ChiSquareTestImpl.java	checkNonNegative	in	long[][]	0	NIL-FOR	i < $.length
34120	395	12	ChiSquareTestImpl.java	checkNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	j < in[i].length
34120	395	12	ChiSquareTestImpl.java	checkNonNegative	j	int	0	NIL-FOR	$ < in[i].length
34120	395	12	ChiSquareTestImpl.java	checkNonNegative	i	int	0	NIL-FOR	j < in[$].length
34120	395	12	ChiSquareTestImpl.java	checkNonNegative	in	long[][]	0	NIL-FOR	j < $[i].length
1826	396	16	ChiSquareTestImpl.java	checkNonNegative	j	int	0	MathIllegalArgumentException	in[i][$] < 0
1826	396	16	ChiSquareTestImpl.java	checkNonNegative	i	int	0	MathIllegalArgumentException	in[$][j] < 0
1826	396	16	ChiSquareTestImpl.java	checkNonNegative	in	long[][]	0	MathIllegalArgumentException	$[i][j] < 0
971	111	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
972	114	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
973	148	8	ChiSquaredDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
974	174	8	ChiSquaredDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < 0.5
1275	94	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
33618	105	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
33618	105	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
33619	109	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	j	int	0	NIL-FOR	$ < order
33619	109	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	j < $
1276	115	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	lIJ	double	0	NonSymmetricMatrixException	FastMath.abs($ - lJI) > maxDelta
1276	115	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	lJI	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - $) > maxDelta
1276	115	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	maxDelta	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - lJI) > $
33620	123	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
33620	123	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
1277	128	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	ltI	double[]	0	NonPositiveDefiniteMatrixException	$[i] < absolutePositivityThreshold
1277	128	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NonPositiveDefiniteMatrixException	ltI[$] < absolutePositivityThreshold
1277	128	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	absolutePositivityThreshold	double	0	NonPositiveDefiniteMatrixException	ltI[i] < $
33621	135	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	q	int	0	NIL-FOR	$ > i
33621	135	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	q > $
33622	138	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	p	int	0	NIL-FOR	$ < order
33622	138	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	p < $
1278	147	8	CholeskyDecompositionImpl.java	getL	THIS	CholeskyDecompositionImpl	0	DEF	$.cachedL == null
1279	156	8	CholeskyDecompositionImpl.java	getLT	THIS	CholeskyDecompositionImpl	0	DEF	$.cachedLT == null
33623	167	8	CholeskyDecompositionImpl.java	getDeterminant	THIS	CholeskyDecompositionImpl	0	NIL-FOR	i < $.lTData.$.length
33623	167	8	CholeskyDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < lTData.length
2027	45	8	Chromosome.java	getFitness	THIS	Chromosome	0	DEF	$.fitness == Double.MIN_VALUE
2028	91	12	Chromosome.java	findSameChromosome	THIS	Chromosome	0	RET	$.isSame($.anotherChr)
2029	107	8	Chromosome.java	searchForFitnessUpdate	sameChromosome	Chromosome	0	DEF	$ != null
34359	98	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
34359	98	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
761	110	8	Complex.java	abs	THIS	Complex	0	RET	$.isNaN
762	114	8	Complex.java	abs	THIS	Complex	0	RET	$.isInfinite()
763	118	8	Complex.java	abs	THIS	Complex	1	RET	FastMath.abs($.real) < FastMath.abs($.imaginary)
764	119	12	Complex.java	abs	THIS	Complex	0	RET	$.imaginary == 0.0
765	125	12	Complex.java	abs	THIS	Complex	0	RET	$.real == 0.0
766	172	8	Complex.java	conjugate	THIS	Complex	0	RET	$.isNaN
767	216	8	Complex.java	divide	THIS	Complex	0	RET	rhs.$.isNaN
767	216	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN
767	216	8	Complex.java	divide	rhs	Complex	0	RET	$.isNaN
768	222	8	Complex.java	divide	c	double	0	RET	$ == 0.0
768	222	8	Complex.java	divide	d	double	0	RET	$ == 0.0
769	226	8	Complex.java	divide	THIS	Complex	0	RET	$.isInfinite()
769	226	8	Complex.java	divide	rhs	Complex	0	RET	$.isInfinite()
770	230	8	Complex.java	divide	c	double	1	RET	FastMath.abs($) < FastMath.abs(d)
770	230	8	Complex.java	divide	d	double	1	RET	FastMath.abs(c) < FastMath.abs($)
771	263	8	Complex.java	equals	THIS	Complex	0	RET	$ == other
771	263	8	Complex.java	equals	other	Object	0	RET	this == $
772	266	8	Complex.java	equals	other	Object	0	RET	$ instanceof Complex
773	268	12	Complex.java	equals	THIS	Complex	1	RET	rhs.$.isNaN
773	268	12	Complex.java	equals	rhs	Complex	1	RET	$.isNaN
774	286	8	Complex.java	hashCode	THIS	Complex	0	RET	$.isNaN
775	365	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
775	365	8	Complex.java	multiply	THIS	Complex	0	RET	rhs.$.isNaN
775	365	8	Complex.java	multiply	rhs	Complex	0	RET	$.isNaN
776	368	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(rhs.$.imaginary)
776	368	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
776	368	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(rhs.$.real)
776	368	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
776	368	8	Complex.java	multiply	rhs	Complex	0	RET	Double.isInfinite($.imaginary)
776	368	8	Complex.java	multiply	rhs	Complex	0	RET	Double.isInfinite($.real)
777	404	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
777	404	8	Complex.java	multiply	rhs	double	0	RET	Double.isNaN($)
778	407	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
778	407	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
778	407	8	Complex.java	multiply	rhs	double	0	RET	Double.isInfinite($)
779	424	8	Complex.java	negate	THIS	Complex	0	RET	$.isNaN
780	452	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN
780	452	8	Complex.java	subtract	THIS	Complex	0	RET	rhs.$.isNaN
780	452	8	Complex.java	subtract	rhs	Complex	0	RET	$.isNaN
781	475	8	Complex.java	acos	THIS	Complex	0	RET	$.isNaN
782	498	8	Complex.java	asin	THIS	Complex	0	RET	$.isNaN
783	521	8	Complex.java	atan	THIS	Complex	0	RET	$.isNaN
784	556	8	Complex.java	cos	THIS	Complex	0	RET	$.isNaN
785	590	8	Complex.java	cosh	THIS	Complex	0	RET	$.isNaN
786	625	8	Complex.java	exp	THIS	Complex	0	RET	$.isNaN
787	663	8	Complex.java	log	THIS	Complex	0	RET	$.isNaN
788	721	8	Complex.java	sin	THIS	Complex	0	RET	$.isNaN
789	755	8	Complex.java	sinh	THIS	Complex	0	RET	$.isNaN
790	797	8	Complex.java	sqrt	THIS	Complex	0	RET	$.isNaN
791	801	8	Complex.java	sqrt	THIS	Complex	0	RET	$.imaginary == 0.0
791	801	8	Complex.java	sqrt	THIS	Complex	0	RET	$.real == 0.0
792	806	8	Complex.java	sqrt	THIS	Complex	1	RET	$.real >= 0.0
793	863	8	Complex.java	tan	THIS	Complex	0	RET	$.isNaN
794	901	8	Complex.java	tanh	THIS	Complex	0	RET	$.isNaN
795	952	8	Complex.java	nthRoot	n	int	0	DEF	$ <= 0
796	960	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isNaN
797	965	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isInfinite()
33152	977	8	Complex.java	nthRoot	k	int	0	NIL-FOR	$ < n
33152	977	8	Complex.java	nthRoot	n	int	0	NIL-FOR	k < $
749	114	8	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NullArgumentException	$ == null
750	117	8	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NoDataException	$.length() == 0
751	120	8	ComplexFormat.java	ComplexFormat	imaginaryFormat	NumberFormat	0	NullArgumentException	$ == null
752	123	8	ComplexFormat.java	ComplexFormat	realFormat	NumberFormat	0	NullArgumentException	$ == null
753	181	8	ComplexFormat.java	format	im	double	1	DEF	$ < 0.0
754	185	15	ComplexFormat.java	format	im	double	0	DEF	$ > 0.0
754	185	15	ComplexFormat.java	format	im	double	0	DEF	Double.isNaN($)
755	212	8	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Complex
756	214	15	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Number
757	290	8	ComplexFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
758	313	8	ComplexFormat.java	parse	re	Number	0	RET	$ == null
759	349	8	ComplexFormat.java	parse	im	Number	0	RET	$ == null
760	357	8	ComplexFormat.java	parse	THIS	ComplexFormat	0	RET	CompositeFormat.parseFixedstring(source, $.getImaginaryCharacter(), pos)
760	357	8	ComplexFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, getImaginaryCharacter(), pos)
760	357	8	ComplexFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, getImaginaryCharacter(), $)
748	65	8	ComplexUtils.java	polar2Complex	r	double	0	DEF	$ < 0
342	85	9	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
342	85	9	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
33081	87	13	CompositeFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
33081	87	13	CompositeFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
33081	87	13	CompositeFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
343	92	13	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
343	92	13	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
344	121	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	$ < source.length()
344	121	8	CompositeFormat.java	parseNumber	source	String	0	DEF	endIndex < $.length()
345	122	12	CompositeFormat.java	parseNumber	sb	StringBuilder	0	DEF	source.substring(startIndex, endIndex).compareTo($.toString()) == 0
345	122	12	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	source.substring($, endIndex).compareTo(sb.toString()) == 0
345	122	12	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	source.substring(startIndex, $).compareTo(sb.toString()) == 0
345	122	12	CompositeFormat.java	parseNumber	source	String	0	DEF	$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
346	148	8	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	$ == endIndex
346	148	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	startIndex == $
33082	153	12	CompositeFormat.java	parseNumber	THIS	CompositeFormat	0	NIL-FOR	i < special.$.length
33082	153	12	CompositeFormat.java	parseNumber	i	int	0	NIL-FOR	$ < special.length
33082	153	12	CompositeFormat.java	parseNumber	special	double[]	0	NIL-FOR	i < $.length
347	155	16	CompositeFormat.java	parseNumber	number	Number	0	DEF	$ != null
348	177	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	$ >= source.length()
348	177	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	source.substring($, endIndex).compareTo(expected) != 0
348	177	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	$ > source.length()
348	177	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	source.substring(startIndex, $).compareTo(expected) != 0
348	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	startIndex >= $.length()
348	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	endIndex > $.length()
348	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	$.substring(startIndex, endIndex).compareTo(expected) != 0
348	177	8	CompositeFormat.java	parseFixedstring	expected	String	0	RET	source.substring(startIndex, endIndex).compareTo($) != 0
349	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isNaN($)
349	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isInfinite($)
33054	132	8	ContinuedFraction.java	evaluate	n	int	0	NIL-WHILE	$ < maxIterations
33054	132	8	ContinuedFraction.java	evaluate	relativeError	double	0	NIL-WHILE	$ > epsilon
33054	132	8	ContinuedFraction.java	evaluate	epsilon	double	0	NIL-WHILE	relativeError > $
33054	132	8	ContinuedFraction.java	evaluate	maxIterations	int	0	NIL-WHILE	n < $
12	139	12	ContinuedFraction.java	evaluate	p2	double	0	ConvergenceException	Double.isInfinite($)
12	139	12	ContinuedFraction.java	evaluate	q2	double	0	ConvergenceException	Double.isInfinite($)
13	149	16	ContinuedFraction.java	evaluate	scale	double	0	ConvergenceException	$ <= 0
33055	154	16	ContinuedFraction.java	evaluate	i	int	0	NIL-FOR	$ < maxPower
33055	154	16	ContinuedFraction.java	evaluate	maxPower	int	0	NIL-FOR	i < $
14	157	20	ContinuedFraction.java	evaluate	a	double	1	DEF	$ != 0.0
14	157	20	ContinuedFraction.java	evaluate	a	double	1	DEF	$ > b
14	157	20	ContinuedFraction.java	evaluate	b	double	1	DEF	a > $
15	160	27	ContinuedFraction.java	evaluate	b	double	0	DEF	$ != 0
16	165	20	ContinuedFraction.java	evaluate	infinite	boolean	0	DEF	$
17	171	12	ContinuedFraction.java	evaluate	infinite	boolean	0	ConvergenceException	$
18	179	12	ContinuedFraction.java	evaluate	r	double	0	ConvergenceException	Double.isNaN($)
19	193	8	ContinuedFraction.java	evaluate	n	int	0	MaxCountExceededException	$ >= maxIterations
19	193	8	ContinuedFraction.java	evaluate	maxIterations	int	0	MaxCountExceededException	n >= $
2245	129	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	RET	model.$.steps.size() == 0
2245	129	4	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	RET	$.steps.size() == 0
2246	133	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	1	DEF	$.steps.size() == 0
2247	138	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DEF	$.getInterpolatedState().length != model.getInterpolatedState().length
2247	138	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DEF	getInterpolatedState().length != $.getInterpolatedState().length
2248	144	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DEF	$.forward ^ model.$.forward
2248	144	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DEF	forward ^ $.forward
2249	154	6	ContinuousOutputModel.java	append	step	double	0	DEF	FastMath.abs(gap) > 1.0e-3 * FastMath.abs($)
2249	154	6	ContinuousOutputModel.java	append	gap	double	0	DEF	FastMath.abs($) > 1.0e-3 * FastMath.abs(step)
2250	193	4	ContinuousOutputModel.java	handleStep	THIS	ContinuousOutputModel	0	DEF	$.steps.size() == 0
2251	200	4	ContinuousOutputModel.java	handleStep	isLast	boolean	0	DEF	$
2252	258	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMin) <= 0
2252	258	6	ContinuousOutputModel.java	setInterpolatedTime	sMin	StepInterpolator	0	RET	locatePoint(time, $) <= 0
2252	258	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMin) <= 0
2253	263	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMax) >= 0
2253	263	6	ContinuousOutputModel.java	setInterpolatedTime	sMax	StepInterpolator	0	RET	locatePoint(time, $) >= 0
2253	263	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMax) >= 0
34385	270	6	ContinuousOutputModel.java	setInterpolatedTime	iMin	int	0	NIL-WHILE	iMax - $ > 5
34385	270	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	$ - iMin > 5
2254	275	8	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ < 0
2255	278	15	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ > 0
2256	292	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs(tMax - $) < 1e-6
2256	292	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs($ - tMin) < 1e-6
2256	292	8	ContinuousOutputModel.java	setInterpolatedTime	tMin	double	1	DEF	FastMath.abs(tMed - $) < 1e-6
2256	292	8	ContinuousOutputModel.java	setInterpolatedTime	tMax	double	1	DEF	FastMath.abs($ - tMed) < 1e-6
2257	315	8	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.index < low
2257	315	8	ContinuousOutputModel.java	setInterpolatedTime	low	int	1	DEF	index < $
2258	317	15	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	DEF	$.index > high
2258	317	15	ContinuousOutputModel.java	setInterpolatedTime	high	int	0	DEF	index > $
34386	325	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.index <= iMax
34386	325	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.locatePoint(time, $.steps.get($.index)) > 0
34386	325	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	index <= $
34386	325	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	NIL-WHILE	locatePoint($, steps.get(index)) > 0
2259	351	4	ContinuousOutputModel.java	locatePoint	THIS	ContinuousOutputModel	0	RET	$.forward
2260	352	6	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getPreviousTime()
2260	352	6	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getPreviousTime()
2261	354	13	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getCurrentTime()
2261	354	13	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getCurrentTime()
2262	360	4	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getPreviousTime()
2262	360	4	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getPreviousTime()
2263	362	11	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getCurrentTime()
2263	362	11	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getCurrentTime()
1957	92	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	THIS	CorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != order
1957	92	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	DimensionMismatchException	mean.length != $
1957	92	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != order
34176	122	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	i	int	0	NIL-FOR	$ < order
34176	122	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	NIL-FOR	i < $
34177	169	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < $.normalized.$.length
34177	169	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < normalized.length
34178	175	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < correlated.$.length
34178	175	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < correlated.length
34178	175	8	CorrelatedRandomVectorGenerator.java	nextVector	correlated	double[]	0	NIL-FOR	i < $.length
34179	177	12	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.root.getColumnDimension()
34179	177	12	CorrelatedRandomVectorGenerator.java	nextVector	j	int	0	NIL-FOR	$ < root.getColumnDimension()
34144	164	8	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	$ < dimension
34144	164	8	Covariance.java	computeCovarianceMatrix	dimension	int	0	NIL-FOR	i < $
34145	165	12	Covariance.java	computeCovarianceMatrix	j	int	0	NIL-FOR	$ < i
34145	165	12	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	j < $
1869	225	8	Covariance.java	covariance	THIS	Covariance	1	DEF	length != yArray.$.length
1869	225	8	Covariance.java	covariance	length	int	1	DEF	$ != yArray.length
1869	225	8	Covariance.java	covariance	yArray	double[]	1	DEF	length != $.length
1870	228	15	Covariance.java	covariance	length	int	1	DEF	$ < 2
34146	234	12	Covariance.java	covariance	i	int	0	NIL-FOR	$ < length
34146	234	12	Covariance.java	covariance	length	int	0	NIL-FOR	i < $
1871	268	8	Covariance.java	checkSufficientData	nRows	int	0	DEF	$ < 2
1871	268	8	Covariance.java	checkSufficientData	nCols	int	0	DEF	$ < 2
479	47	8	DefaultTransformer.java	transform	o	Object	0	NullArgumentException	$ == null
480	51	8	DefaultTransformer.java	transform	o	Object	0	RET	$ instanceof Number
481	66	8	DefaultTransformer.java	equals	THIS	DefaultTransformer	0	RET	$ == other
481	66	8	DefaultTransformer.java	equals	other	Object	0	RET	this == $
482	69	8	DefaultTransformer.java	equals	other	Object	0	RET	$ == null
1717	137	8	DescriptiveStatistics.java	DescriptiveStatistics	initialDoubleArray	double[]	0	DEF	$ != null
1718	161	8	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.windowSize != INFINITE_WINDOW
1719	162	12	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.getN() == $.windowSize
1720	164	19	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	0	DEF	$.getN() < $.windowSize
1721	225	8	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	0	DEF	$.getN() > 0
1722	226	12	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	1	DEF	$.getN() > 1
1723	324	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < 1
1724	325	12	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
1725	336	8	DescriptiveStatistics.java	setWindowSize	THIS	DescriptiveStatistics	0	DEF	windowSize < $.eDA.getNumElements()
1725	336	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < eDA.getNumElements()
1725	336	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
1726	397	8	DescriptiveStatistics.java	getPercentile	THIS	DescriptiveStatistics	1	DEF	$.percentileImpl instanceof Percentile
2286	217	8	Dfp.java	Dfp	x	long	0	DEF	$ == Long.MIN_VALUE
2287	225	8	Dfp.java	Dfp	x	long	1	DEF	$ < 0
34391	233	8	Dfp.java	Dfp	x	long	0	NIL-WHILE	$ != 0
2288	240	8	Dfp.java	Dfp	isLongMin	boolean	0	DEF	$
34392	243	12	Dfp.java	Dfp	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
34392	243	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < mant.length - 1
2289	244	16	Dfp.java	Dfp	THIS	Dfp	0	DEF	$.mant[i] != 0
2289	244	16	Dfp.java	Dfp	i	int	0	DEF	mant[$] != 0
2290	269	8	Dfp.java	Dfp	exponent	int	0	RET	$ == -1023
2291	271	12	Dfp.java	Dfp	x	double	0	RET	$ == 0
2292	273	16	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
34393	282	12	Dfp.java	Dfp	mantissa	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
2293	289	8	Dfp.java	Dfp	exponent	int	0	RET	$ == 1024
2294	291	12	Dfp.java	Dfp	x	double	1	DEF	$ != $
2295	294	19	Dfp.java	Dfp	x	double	1	DEF	$ < 0
2296	308	8	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
2297	349	8	Dfp.java	Dfp	s	String	0	RET	$.equals(POS_INFINITY_STRING)
2298	355	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NEG_INFINITY_STRING)
2299	361	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NAN_STRING)
2300	369	8	Dfp.java	Dfp	p	int	0	DEF	$ == -1
2301	375	8	Dfp.java	Dfp	p	int	1	DEF	$ != -1
34394	381	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$<fpexp.length()
34394	381	12	Dfp.java	Dfp	fpexp	String	0	NIL-FOR	i<$.length()
2302	383	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) == '-'
2302	383	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) == '-'
2303	388	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) <= '9'
2303	388	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) >= '0'
2303	388	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) <= '9'
2303	388	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) >= '0'
2304	393	12	Dfp.java	Dfp	negative	boolean	0	DEF	$
2305	402	8	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.indexOf("-") != -1
2306	412	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) <= '9'
2306	412	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) >= '1'
2306	412	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) <= '9'
2306	412	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) >= '1'
2307	416	12	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
2307	416	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '0'
2307	416	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '0'
2308	420	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
2308	420	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
2309	426	12	Dfp.java	Dfp	p	int	0	DEF	$ == fpdecimal.length()
2309	426	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == $.length()
2310	439	12	Dfp.java	Dfp	p	int	0	DEF	$ == (fpdecimal.length())
2310	439	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == ($.length())
2311	444	12	Dfp.java	Dfp	THIS	Dfp	0	DEF	q == $.mant.$.length*rsize+offset+1
2311	444	12	Dfp.java	Dfp	rsize	int	0	DEF	q == mant.length*$+offset+1
2311	444	12	Dfp.java	Dfp	offset	int	0	DEF	q == mant.length*rsize+$+1
2311	444	12	Dfp.java	Dfp	q	int	0	DEF	$ == mant.length*rsize+offset+1
2312	448	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
2312	448	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
2313	455	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) > '9'
2313	455	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) < '0'
2313	455	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) > '9'
2313	455	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) < '0'
2314	468	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
2314	468	8	Dfp.java	Dfp	offset	int	0	DEF	q != $
2314	468	8	Dfp.java	Dfp	q	int	0	DEF	$ != offset
2315	471	16	Dfp.java	Dfp	offset	int	0	DEF	q == $
2315	471	16	Dfp.java	Dfp	q	int	0	DEF	$ == offset
2316	474	16	Dfp.java	Dfp	striped	char[]	1	DEF	$[q] == '0'
2316	474	16	Dfp.java	Dfp	q	int	1	DEF	striped[$] == '0'
2317	483	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
2317	483	8	Dfp.java	Dfp	significantDigits	int	0	DEF	$ == 0
2318	488	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
34395	496	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	$ > q
34395	496	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	p > $
2319	497	12	Dfp.java	Dfp	striped	char[]	0	DEF	$[p] != '0'
2319	497	12	Dfp.java	Dfp	p	int	0	DEF	striped[$] != '0'
34396	509	8	Dfp.java	Dfp	THIS	Dfp	0	NIL-WHILE	(p - q) < ($.mant.$.length * rsize)
34396	509	8	Dfp.java	Dfp	rsize	int	0	NIL-WHILE	(p - q) < (mant.length * $)
34396	509	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	($ - q) < (mant.length * rsize)
34396	509	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	(p - $) < (mant.length * rsize)
34397	510	12	Dfp.java	Dfp	rsize	int	0	NIL-FOR	i < $
34397	510	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < rsize
34398	517	8	Dfp.java	Dfp	i	int	0	NIL-FOR	$ >= 0
2320	528	8	Dfp.java	Dfp	THIS	Dfp	0	DEF	q < striped.$.length
2320	528	8	Dfp.java	Dfp	striped	char[]	0	DEF	q < $.length
2320	528	8	Dfp.java	Dfp	q	int	0	DEF	$ < striped.length
2321	597	8	Dfp.java	newInstance	THIS	Dfp	0	RET	$.field.getRadixDigits() != d.$.field.getRadixDigits()
2321	597	8	Dfp.java	newInstance	d	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
34399	669	8	Dfp.java	shiftLeft	i	int	0	NIL-FOR	$ > 0
34400	681	8	Dfp.java	shiftRight	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
34400	681	8	Dfp.java	shiftRight	i	int	0	NIL-FOR	$ < mant.length - 1
2322	703	8	Dfp.java	align	adiff	int	0	DEF	$ < 0
2323	707	8	Dfp.java	align	diff	int	0	RET	$ == 0
2324	711	8	Dfp.java	align	THIS	Dfp	0	RET	adiff > ($.mant.$.length + 1)
2324	711	8	Dfp.java	align	adiff	int	0	RET	$ > (mant.length + 1)
34401	722	8	Dfp.java	align	i	int	0	NIL-FOR	$ < adiff
34401	722	8	Dfp.java	align	adiff	int	0	NIL-FOR	i < $
2325	723	12	Dfp.java	align	diff	int	1	DEF	$ < 0
2326	728	16	Dfp.java	align	lostdigit	int	0	DEF	$ != 0
2327	740	8	Dfp.java	align	inexact	boolean	0	DEF	$
2328	756	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2328	756	8	Dfp.java	lessThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2329	765	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.isNaN()
2329	765	8	Dfp.java	lessThan	x	Dfp	0	RET	$.isNaN()
2330	781	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2330	781	8	Dfp.java	greaterThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2331	790	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.isNaN()
2331	790	8	Dfp.java	greaterThan	x	Dfp	0	RET	$.isNaN()
2332	820	8	Dfp.java	equals	other	Object	0	RET	$ instanceof Dfp
2333	822	12	Dfp.java	equals	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2333	822	12	Dfp.java	equals	THIS	Dfp	0	RET	$.isNaN()
2333	822	12	Dfp.java	equals	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2333	822	12	Dfp.java	equals	x	Dfp	0	RET	$.isNaN()
2334	847	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2334	847	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.isNaN()
2334	847	8	Dfp.java	unequal	x	Dfp	0	RET	$.isNaN()
2334	847	8	Dfp.java	unequal	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2335	862	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
2335	862	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
2335	862	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length - 1] == 0
2335	862	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[a.$.mant.$.length - 1] == 0
2335	862	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
2335	862	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
2335	862	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
2335	862	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
2336	867	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.sign != b.$.sign
2336	867	8	Dfp.java	compare	a	Dfp	0	RET	$.sign != b.sign
2336	867	8	Dfp.java	compare	b	Dfp	0	RET	a.sign != $.sign
2337	868	12	Dfp.java	compare	THIS	Dfp	1	RET	a.$.sign == -1
2337	868	12	Dfp.java	compare	a	Dfp	1	RET	$.sign == -1
2338	876	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
2338	876	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
2338	876	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
2338	876	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
2339	880	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
2339	880	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
2339	880	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
2339	880	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
2340	884	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
2340	884	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
2340	884	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
2340	884	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
2341	889	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[b.$.mant.$.length-1] != 0
2341	889	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length-1] != 0
2341	889	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[b.mant.length-1] != 0
2341	889	8	Dfp.java	compare	b	Dfp	0	RET	a.mant[$.mant.length-1] != 0
2341	889	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length-1] != 0
2342	890	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp < b.$.exp
2342	890	12	Dfp.java	compare	a	Dfp	0	RET	$.exp < b.exp
2342	890	12	Dfp.java	compare	b	Dfp	0	RET	a.exp < $.exp
2343	894	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp > b.$.exp
2343	894	12	Dfp.java	compare	a	Dfp	0	RET	$.exp > b.exp
2343	894	12	Dfp.java	compare	b	Dfp	0	RET	a.exp > $.exp
34402	900	8	Dfp.java	compare	i	int	0	NIL-FOR	$ >= 0
2344	901	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] > b.$.mant[i]
2344	901	12	Dfp.java	compare	i	int	0	RET	a.mant[$] > b.mant[$]
2344	901	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] > b.mant[i]
2344	901	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] > $.mant[i]
2345	905	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] < b.$.mant[i]
2345	905	12	Dfp.java	compare	i	int	0	RET	a.mant[$] < b.mant[$]
2345	905	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] < b.mant[i]
2345	905	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] < $.mant[i]
2346	948	8	Dfp.java	remainder	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2346	948	8	Dfp.java	remainder	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2347	963	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.isNaN()
2348	967	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.nans == INFINITE
2349	971	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
2350	978	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp < 0
2351	989	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp >= $.mant.$.length
34403	997	8	Dfp.java	trunc	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length-result.$.exp
34403	997	8	Dfp.java	trunc	i	int	0	NIL-FOR	$ < mant.length-result.exp
34403	997	8	Dfp.java	trunc	result	Dfp	0	NIL-FOR	i < mant.length-$.exp
2352	1002	8	Dfp.java	trunc	changed	boolean	0	RET	$
2353	1005	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == -1
2353	1005	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == -1
2354	1012	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == 1
2354	1012	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == 1
2355	1023	20	Dfp.java	trunc	half	Dfp	0	DEF	a.greaterThan($)
2355	1023	20	Dfp.java	trunc	a	Dfp	0	DEF	$.greaterThan(half)
2356	1030	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.exp > 0
2356	1030	20	Dfp.java	trunc	THIS	Dfp	0	DEF	(result.$.mant[$.mant.$.length-result.$.exp]&1) != 0
2356	1030	20	Dfp.java	trunc	half	Dfp	0	DEF	a.equals($)
2356	1030	20	Dfp.java	trunc	a	Dfp	0	DEF	$.equals(half)
2356	1030	20	Dfp.java	trunc	result	Dfp	0	DEF	$.exp > 0
2356	1030	20	Dfp.java	trunc	result	Dfp	0	DEF	($.mant[mant.length-$.exp]&1) != 0
2357	1056	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.greaterThan($.newInstance(2147483647))
2357	1056	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.greaterThan(newInstance(2147483647))
2358	1060	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.lessThan($.newInstance(-2147483648))
2358	1060	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.lessThan(newInstance(-2147483648))
34404	1064	8	Dfp.java	intValue	THIS	Dfp	0	NIL-FOR	i >= $.mant.$.length - rounded.$.exp
34404	1064	8	Dfp.java	intValue	i	int	0	NIL-FOR	$ >= mant.length - rounded.exp
34404	1064	8	Dfp.java	intValue	rounded	Dfp	0	NIL-FOR	i >= mant.length - $.exp
2359	1068	8	Dfp.java	intValue	THIS	Dfp	0	DEF	rounded.$.sign == -1
2359	1068	8	Dfp.java	intValue	rounded	Dfp	0	DEF	$.sign == -1
2360	1098	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 1000
2361	1101	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 100
2362	1104	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 10
2363	1117	8	Dfp.java	power10	e	int	1	DEF	$ >= 0
34405	1148	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
34405	1148	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
34406	1154	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
34406	1154	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
2364	1170	8	Dfp.java	add	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2364	1170	8	Dfp.java	add	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2365	1178	8	Dfp.java	add	THIS	Dfp	0	RET	$.nans != FINITE
2365	1178	8	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans != FINITE
2365	1178	8	Dfp.java	add	x	Dfp	0	RET	$.nans != FINITE
2366	1179	12	Dfp.java	add	THIS	Dfp	0	RET	$.isNaN()
2367	1183	12	Dfp.java	add	x	Dfp	0	RET	$.isNaN()
2368	1187	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
2368	1187	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == FINITE
2368	1187	12	Dfp.java	add	x	Dfp	0	RET	$.nans == FINITE
2369	1191	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == FINITE
2369	1191	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
2369	1191	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
2370	1195	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
2370	1195	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
2370	1195	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign == x.$.sign
2370	1195	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
2370	1195	12	Dfp.java	add	x	Dfp	0	RET	sign == $.sign
2371	1199	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
2371	1199	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign != x.$.sign
2371	1199	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
2371	1199	12	Dfp.java	add	x	Dfp	0	RET	sign != $.sign
2371	1199	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
2372	1224	8	Dfp.java	add	THIS	Dfp	0	DEF	$.compare(a, b) > 0
2372	1224	8	Dfp.java	add	a	Dfp	0	DEF	compare($, b) > 0
2372	1224	8	Dfp.java	add	b	Dfp	0	DEF	compare(a, $) > 0
2373	1231	8	Dfp.java	add	THIS	Dfp	0	DEF	b.$.mant[$.mant.$.length-1] == 0
2373	1231	8	Dfp.java	add	b	Dfp	0	DEF	$.mant[mant.length-1] == 0
2374	1235	8	Dfp.java	add	THIS	Dfp	0	DEF	a.$.mant[$.mant.$.length-1] == 0
2374	1235	8	Dfp.java	add	a	Dfp	0	DEF	$.mant[mant.length-1] == 0
2375	1242	8	Dfp.java	add	THIS	Dfp	1	DEF	a.$.exp < b.$.exp
2375	1242	8	Dfp.java	add	a	Dfp	1	DEF	$.exp < b.exp
2375	1242	8	Dfp.java	add	b	Dfp	1	DEF	a.exp < $.exp
2376	1249	8	Dfp.java	add	asign	byte	0	DEF	$ != bsign
2376	1249	8	Dfp.java	add	bsign	byte	0	DEF	asign != $
2377	1250	12	Dfp.java	add	asign	byte	1	DEF	$ == rsign
2377	1250	12	Dfp.java	add	rsign	byte	1	DEF	asign == $
34407	1259	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
34407	1259	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
2378	1270	8	Dfp.java	add	asign	byte	0	DEF	$ == bsign
2378	1270	8	Dfp.java	add	bsign	byte	0	DEF	asign == $
2378	1270	8	Dfp.java	add	rh	int	0	DEF	$ != 0
2379	1275	12	Dfp.java	add	excp	int	0	DEF	$ != 0
34408	1281	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
34408	1281	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
2380	1282	12	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] != 0
2380	1282	12	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] != 0
2381	1286	12	Dfp.java	add	i	int	0	DEF	$ == 0
2382	1294	8	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2382	1294	8	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2383	1297	12	Dfp.java	add	asign	byte	0	DEF	$ != bsign
2383	1297	12	Dfp.java	add	bsign	byte	0	DEF	asign != $
2384	1305	8	Dfp.java	add	excp	int	0	DEF	$ != 0
2385	1370	8	Dfp.java	round	inc	boolean	0	DEF	$
34409	1373	12	Dfp.java	round	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
34409	1373	12	Dfp.java	round	i	int	0	NIL-FOR	$ < mant.length
2386	1379	12	Dfp.java	round	rh	int	0	DEF	$ != 0
2387	1386	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp < MIN_EXP
2388	1392	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp > MAX_EXP
2389	1398	8	Dfp.java	round	n	int	0	RET	$ != 0
2390	1415	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2390	1415	8	Dfp.java	multiply	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2391	1425	8	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans != FINITE
2391	1425	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans != FINITE
2391	1425	8	Dfp.java	multiply	x	Dfp	0	RET	$.nans != FINITE
2392	1426	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.isNaN()
2393	1430	12	Dfp.java	multiply	x	Dfp	0	RET	$.isNaN()
2394	1434	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2394	1434	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] != 0
2394	1434	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
2394	1434	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] != 0
2394	1434	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
2395	1440	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
2395	1440	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2395	1440	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] != 0
2395	1440	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
2396	1446	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2396	1446	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2396	1446	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
2397	1452	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
2397	1452	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] == 0
2397	1452	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
2397	1452	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
2397	1452	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2397	1452	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2397	1452	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] == 0
2397	1452	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
2397	1452	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
34410	1464	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
34410	1464	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
34411	1466	12	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	j<$.mant.$.length
34411	1466	12	Dfp.java	multiply	j	int	0	NIL-FOR	$<mant.length
34412	1478	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ >= 0
2398	1479	12	Dfp.java	multiply	i	int	0	DEF	product[$] != 0
2398	1479	12	Dfp.java	multiply	product	int[]	0	DEF	$[i] != 0
34413	1486	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
34413	1486	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
2399	1494	8	Dfp.java	multiply	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2399	1494	8	Dfp.java	multiply	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2400	1500	8	Dfp.java	multiply	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
2400	1500	8	Dfp.java	multiply	md	int	1	DEF	$ > (mant.length-1)
2401	1506	8	Dfp.java	multiply	excp	int	0	DEF	$ != 0
2402	1523	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans != FINITE
2403	1524	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.isNaN()
2404	1528	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2404	1528	12	Dfp.java	multiply	x	int	0	RET	$ != 0
2405	1533	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2405	1533	12	Dfp.java	multiply	x	int	0	RET	$ == 0
2406	1543	8	Dfp.java	multiply	x	int	0	RET	$ < 0
2406	1543	8	Dfp.java	multiply	x	int	0	RET	$ >= RADIX
34414	1552	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
34414	1552	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
2407	1559	8	Dfp.java	multiply	rh	int	0	DEF	$ != 0
2408	1565	8	Dfp.java	multiply	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2408	1565	8	Dfp.java	multiply	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2409	1570	8	Dfp.java	multiply	excp	int	0	DEF	$ != 0
2410	1594	8	Dfp.java	divide	THIS	Dfp	0	RET	$.field.getRadixDigits() != divisor.$.field.getRadixDigits()
2410	1594	8	Dfp.java	divide	divisor	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2411	1604	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans != FINITE
2411	1604	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
2411	1604	8	Dfp.java	divide	divisor	Dfp	0	RET	$.nans != FINITE
2412	1605	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
2413	1609	12	Dfp.java	divide	divisor	Dfp	0	RET	$.isNaN()
2414	1613	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == FINITE
2414	1613	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
2414	1613	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == FINITE
2415	1619	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == FINITE
2415	1619	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
2415	1619	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
2416	1625	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
2416	1625	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
2416	1625	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
2417	1635	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.mant[$.mant.$.length-1] == 0
2417	1635	8	Dfp.java	divide	divisor	Dfp	0	RET	$.mant[mant.length-1] == 0
34415	1658	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
34415	1658	8	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
34416	1666	8	Dfp.java	divide	qd	int	0	NIL-FOR	$ >= 0
34417	1675	12	Dfp.java	divide	trialgood	boolean	0	NIL-WHILE	$
34418	1681	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
34418	1681	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
34419	1690	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
34419	1690	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
2418	1697	16	Dfp.java	divide	rh	int	0	DEF	$ == 0
2419	1707	16	Dfp.java	divide	minadj	int	0	DEF	$ >= 2
34420	1715	16	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
2420	1716	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] > remainder[i]
2420	1716	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] > remainder[$]
2420	1716	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] > $[i]
2420	1716	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] > remainder[i]
2421	1719	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] < remainder[i]
2421	1719	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] < remainder[$]
2421	1719	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] < $[i]
2421	1719	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] < remainder[i]
2422	1724	16	Dfp.java	divide	THIS	Dfp	0	DEF	remainder[$.mant.$.length] != 0
2422	1724	16	Dfp.java	divide	remainder	int[]	0	DEF	$[mant.length] != 0
2423	1728	16	Dfp.java	divide	trialgood	boolean	0	DEF	$ == false
2424	1735	12	Dfp.java	divide	nsqd	int	0	DEF	$ != 0
2424	1735	12	Dfp.java	divide	trial	int	0	DEF	$ != 0
2425	1739	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd == $.mant.$.length
2425	1739	12	Dfp.java	divide	THIS	Dfp	0	DEF	$.field.getRoundingMode() == DfpField.$.RoundingMode.ROUND_DOWN
2425	1739	12	Dfp.java	divide	nsqd	int	0	DEF	$ == mant.length
2426	1744	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd > $.mant.$.length
2426	1744	12	Dfp.java	divide	nsqd	int	0	DEF	$ > mant.length
34421	1751	12	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
34421	1751	12	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
34422	1758	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
2427	1759	12	Dfp.java	divide	i	int	0	DEF	quotient[$] != 0
2427	1759	12	Dfp.java	divide	quotient	int[]	0	DEF	$[i] != 0
34423	1766	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i<$.mant.$.length
34423	1766	8	Dfp.java	divide	i	int	0	NIL-FOR	$<mant.length
2428	1774	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2428	1774	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2429	1778	8	Dfp.java	divide	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
2429	1778	8	Dfp.java	divide	md	int	1	DEF	$ > (mant.length-1)
2430	1784	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
2431	1799	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
2432	1800	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
2433	1804	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
2434	1810	8	Dfp.java	divide	divisor	int	0	RET	$ == 0
2435	1820	8	Dfp.java	divide	divisor	int	0	RET	$ < 0
2435	1820	8	Dfp.java	divide	divisor	int	0	RET	$ >= RADIX
34424	1831	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
2436	1838	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2436	1838	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2437	1848	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
2438	1862	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == FINITE
2438	1862	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
2439	1867	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans != FINITE
2440	1868	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == 1
2440	1868	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == INFINITE
2441	1873	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == QNAN
2442	1877	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == SNAN
2443	1887	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == -1
2444	1901	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp > 1
2444	1901	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp < -1
2444	1901	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp > 1
2444	1901	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp < -1
34425	1927	8	Dfp.java	sqrt	x	Dfp	0	NIL-WHILE	$.unequal(px)
34425	1927	8	Dfp.java	sqrt	px	Dfp	0	NIL-WHILE	x.unequal($)
2445	1936	12	Dfp.java	sqrt	x	Dfp	0	DEF	$.equals(ppx)
2445	1936	12	Dfp.java	sqrt	ppx	Dfp	0	DEF	x.equals($)
2446	1943	12	Dfp.java	sqrt	THIS	Dfp	0	DEF	dx.$.mant[$.mant.$.length-1] == 0
2446	1943	12	Dfp.java	sqrt	dx	Dfp	0	DEF	$.mant[mant.length-1] == 0
2447	1957	8	Dfp.java	toString	THIS	Dfp	0	RET	$.nans != FINITE
2448	1959	12	Dfp.java	toString	THIS	Dfp	1	RET	$.nans == INFINITE
2449	1966	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp > $.mant.$.length
2449	1966	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp < -1
34426	1988	8	Dfp.java	dfp2sci	i	int	0	NIL-FOR	$ >= 0
34427	1996	8	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-FOR	p < rawdigits.$.length
34427	1996	8	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-FOR	p < $.length
34427	1996	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ < rawdigits.length
2450	1997	12	Dfp.java	dfp2sci	rawdigits	char[]	0	DEF	$[p] != '0'
2450	1997	12	Dfp.java	dfp2sci	p	int	0	DEF	rawdigits[$] != '0'
2451	2005	8	Dfp.java	dfp2sci	THIS	Dfp	0	DEF	$.sign == -1
2452	2009	8	Dfp.java	dfp2sci	THIS	Dfp	1	DEF	p != rawdigits.$.length
2452	2009	8	Dfp.java	dfp2sci	rawdigits	char[]	1	DEF	p != $.length
2452	2009	8	Dfp.java	dfp2sci	p	int	1	DEF	$ != rawdigits.length
34428	2014	12	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-WHILE	p<rawdigits.$.length
34428	2014	12	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-WHILE	p<$.length
34428	2014	12	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$<rawdigits.length
2453	2032	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
34429	2037	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ > ae
34429	2037	8	Dfp.java	dfp2sci	ae	int	0	NIL-FOR	p > $
2454	2041	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
34430	2045	8	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$ > 0
2455	2067	8	Dfp.java	dfp2string	e	int	0	DEF	$ <= 0
34431	2073	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ < 0
34432	2081	8	Dfp.java	dfp2string	i	int	0	NIL-FOR	$ >= 0
2456	2086	12	Dfp.java	dfp2string	e	int	0	DEF	--$ == 0
34433	2092	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ > 0
2457	2100	8	Dfp.java	dfp2string	pointInserted	boolean	0	DEF	$
34434	2107	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[q] == '0'
34434	2107	8	Dfp.java	dfp2string	q	int	0	NIL-WHILE	buffer[$] == '0'
2458	2110	8	Dfp.java	dfp2string	buffer	char[]	0	DEF	$[q] == '.'
2458	2110	8	Dfp.java	dfp2string	q	int	0	DEF	buffer[$] == '.'
34435	2115	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[p-1] == '0'
34435	2115	8	Dfp.java	dfp2string	p	int	0	NIL-WHILE	buffer[$-1] == '0'
2459	2120	8	Dfp.java	dfp2string	THIS	Dfp	0	DEF	$.sign < 0
2460	2146	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
2460	2146	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] != 0
2461	2153	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
2461	2153	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] == 0
2462	2159	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
2462	2159	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == QNAN
2463	2164	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == SNAN
2463	2164	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
2464	2171	16	Dfp.java	dotrap	THIS	Dfp	1	DEF	(result.$.exp+$.mant.$.length) < MIN_EXP
2464	2171	16	Dfp.java	dotrap	result	Dfp	1	DEF	($.exp+mant.length) < MIN_EXP
2465	2236	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2465	2236	8	Dfp.java	nextAfter	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2466	2245	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan(x)
2466	2245	8	Dfp.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
2467	2249	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.compare(this, x) == 0
2467	2249	8	Dfp.java	nextAfter	x	Dfp	0	RET	compare(this, $) == 0
2468	2253	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan($.getZero())
2469	2259	8	Dfp.java	nextAfter	up	boolean	1	DEF	$
2470	2264	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
2471	2274	12	Dfp.java	nextAfter	THIS	Dfp	1	DEF	$.equals(inc)
2471	2274	12	Dfp.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
2472	2280	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
2473	2287	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.classify() != INFINITE
2473	2287	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
2474	2292	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero()) == false
2474	2292	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	result.equals($.getZero())
2474	2292	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
2475	2307	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isInfinite()
2476	2308	12	Dfp.java	toDouble	THIS	Dfp	1	RET	$.lessThan($.getZero())
2477	2315	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isNaN()
2478	2322	8	Dfp.java	toDouble	cmp0	int	1	RET	$ == 0
2479	2324	15	Dfp.java	toDouble	cmp0	int	0	DEF	$ < 0
2480	2332	8	Dfp.java	toDouble	exponent	int	0	DEF	$ < 0
34436	2337	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.equals($)
34436	2337	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.lessThan($)
34436	2337	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.equals(y)
34436	2337	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.lessThan(y)
2481	2346	8	Dfp.java	toDouble	exponent	int	0	DEF	$ > -1023
2482	2350	8	Dfp.java	toDouble	exponent	int	0	RET	$ < -1074
2483	2354	8	Dfp.java	toDouble	exponent	int	0	RET	$ > 1023
2484	2364	8	Dfp.java	toDouble	mantissa	long	0	DEF	$ == 4503599627370496L
2485	2371	8	Dfp.java	toDouble	exponent	int	0	DEF	$ <= -1023
34437	2375	8	Dfp.java	toDouble	exponent	int	0	NIL-WHILE	$ < -1023
2486	2383	8	Dfp.java	toDouble	negate	boolean	0	DEF	$
2265	131	8	DfpDec.java	newInstance	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != d.getField().getRadixDigits()
2265	131	8	DfpDec.java	newInstance	d	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
2266	168	8	DfpDec.java	round	msb	int	0	RET	$ == 0
34387	175	8	DfpDec.java	round	msb	int	0	NIL-WHILE	lsbthreshold > $
34387	175	8	DfpDec.java	round	lsbthreshold	int	0	NIL-WHILE	$ > msb
34388	186	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsbshift % 4
34388	186	8	DfpDec.java	round	lsbshift	int	0	NIL-FOR	i < $ % 4
2267	192	8	DfpDec.java	round	THIS	DfpDec	0	RET	digits == 4 * $.mant.$.length - 3
2267	192	8	DfpDec.java	round	lsbthreshold	int	0	RET	$ <= 1
2267	192	8	DfpDec.java	round	digits	int	0	RET	$ == 4 * mant.length - 3
2268	198	8	DfpDec.java	round	lsbthreshold	int	1	DEF	$ == 1
34389	208	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsd
34389	208	8	DfpDec.java	round	lsd	int	0	NIL-FOR	i < $
2269	255	8	DfpDec.java	round	inc	boolean	0	DEF	$
34390	258	12	DfpDec.java	round	THIS	DfpDec	0	NIL-FOR	i < $.mant.$.length
34390	258	12	DfpDec.java	round	i	int	0	NIL-FOR	$ < mant.length
2270	264	12	DfpDec.java	round	rh	int	0	DEF	$ != 0
2271	271	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp < MIN_EXP
2272	277	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp > MAX_EXP
2273	283	8	DfpDec.java	round	discarded	int	0	RET	$ != 0
2273	283	8	DfpDec.java	round	n	int	0	RET	$ != 0
2274	298	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != x.getField().getRadixDigits()
2274	298	8	DfpDec.java	nextAfter	x	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
2275	310	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan(x)
2275	310	8	DfpDec.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
2276	314	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.equals(x)
2276	314	8	DfpDec.java	nextAfter	x	Dfp	0	RET	equals($)
2277	318	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan($.getZero())
2278	322	8	DfpDec.java	nextAfter	up	boolean	1	DEF	$
2279	326	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
2280	330	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
2280	330	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
2281	339	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	$.equals(inc)
2281	339	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
2282	345	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
2283	349	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
2283	349	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
2284	356	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.classify() != INFINITE
2284	356	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
2285	361	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	result.equals($.getZero())
2285	361	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero()) == false
2285	361	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
2487	197	8	DfpField.java	DfpField	computeConstants	boolean	1	DEF	$
34438	529	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
34438	529	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
34438	529	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
2488	532	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
2488	532	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '1'
2488	532	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
2488	532	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '1'
2489	536	8	DfpField.java	split	i	int	0	DEF	buf[$] == '.'
2489	536	8	DfpField.java	split	buf	char[]	0	DEF	$[i] == '.'
2490	541	8	DfpField.java	split	THIS	DfpField	0	DEF	sig == ($.radixDigits / 2) * 4
2490	541	8	DfpField.java	split	sig	int	0	DEF	$ == (radixDigits / 2) * 4
2491	546	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
2491	546	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
2491	546	8	DfpField.java	split	leading	boolean	0	DEF	$
2491	546	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
2491	546	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
34439	553	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
34439	553	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
34439	553	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
2492	555	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
2492	555	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
2492	555	8	DfpField.java	split	i	int	0	DEF	$ < sp
2492	555	8	DfpField.java	split	sp	int	0	DEF	i < $
2492	555	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
2492	555	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
2493	570	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String.length() < highPrecisionDecimalDigits - 3
2493	570	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String == null
2493	570	8	DfpField.java	computeStringConstants	highPrecisionDecimalDigits	int	0	DEF	sqr2String.length() < $ - 3
34440	615	8	DfpField.java	computePi	i	int	0	NIL-FOR	$ < 20
2494	629	12	DfpField.java	computePi	ykM1	Dfp	0	DEF	yk.equals($)
2494	629	12	DfpField.java	computePi	yk	Dfp	0	DEF	$.equals(ykM1)
34441	651	8	DfpField.java	computeExp	i	int	0	NIL-FOR	$ < 10000
2495	656	12	DfpField.java	computeExp	y	Dfp	0	DEF	$.equals(py)
2495	656	12	DfpField.java	computeExp	py	Dfp	0	DEF	y.equals($)
34442	734	8	DfpField.java	computeLn	i	int	0	NIL-FOR	$ < 10000
2496	740	12	DfpField.java	computeLn	y	Dfp	0	DEF	$.equals(py)
2496	740	12	DfpField.java	computeLn	py	Dfp	0	DEF	y.equals($)
34443	54	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
34443	54	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
34443	54	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
2497	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '1'
2497	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
2497	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '1'
2497	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
2498	61	12	DfpMath.java	split	i	int	0	DEF	buf[$] == '.'
2498	61	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] == '.'
2499	66	12	DfpMath.java	split	sig	int	0	DEF	$ == (field.getRadixDigits() / 2) * 4
2499	66	12	DfpMath.java	split	field	DfpField	0	DEF	sig == ($.getRadixDigits() / 2) * 4
2500	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
2500	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
2500	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
2500	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
2500	71	12	DfpMath.java	split	leading	boolean	0	DEF	$
34444	78	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
34444	78	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
34444	78	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
2501	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
2501	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
2501	80	12	DfpMath.java	split	i	int	0	DEF	$ < sp
2501	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
2501	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
2501	80	12	DfpMath.java	split	sp	int	0	DEF	i < $
2502	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].equals($[1])
2502	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].classify() == Dfp.INFINITE
2503	162	8	DfpMath.java	splitPow	a	int	0	RET	$ == 0
2504	167	8	DfpMath.java	splitPow	a	int	0	DEF	$ < 0
34445	174	8	DfpMath.java	splitPow	a	int	0	NIL-DOWHILE	$ >= 1
2505	183	16	DfpMath.java	splitPow	trial	int	0	DEF	$ > a
2505	183	16	DfpMath.java	splitPow	a	int	0	DEF	trial > $
2506	198	8	DfpMath.java	splitPow	invert	boolean	0	DEF	$
2507	217	8	DfpMath.java	pow	a	int	0	RET	$ == 0
2508	222	8	DfpMath.java	pow	a	int	0	DEF	$ < 0
34446	228	8	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$ >= 1
34447	234	12	DfpMath.java	pow	trial	int	0	NIL-DOWHILE	a>$
34447	234	12	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$>trial
2509	249	8	DfpMath.java	pow	invert	boolean	0	DEF	$
2510	270	8	DfpMath.java	exp	ia	int	0	RET	$ > 2147483646
2511	275	8	DfpMath.java	exp	ia	int	0	RET	$ < -2147483646
34448	297	8	DfpMath.java	expInternal	i	int	0	NIL-FOR	$ < 90
2512	301	12	DfpMath.java	expInternal	y	Dfp	0	DEF	$.equals(py)
2512	301	12	DfpMath.java	expInternal	py	Dfp	0	DEF	y.equals($)
2513	324	8	DfpMath.java	log	a	Dfp	0	RET	$.lessThan($.getZero())
2513	324	8	DfpMath.java	log	a	Dfp	0	RET	$.equals($.getZero())
2513	324	8	DfpMath.java	log	a	Dfp	0	RET	$.isNaN()
2514	330	8	DfpMath.java	log	a	Dfp	0	RET	$.classify() == Dfp.INFINITE
34449	340	8	DfpMath.java	log	ix	int	0	NIL-WHILE	$ > 2
34450	353	8	DfpMath.java	log	spx	Dfp[]	0	NIL-WHILE	$[0].add($[1]).greaterThan(spy[0])
34450	353	8	DfpMath.java	log	spy	Dfp[]	0	NIL-WHILE	spx[0].add(spx[1]).greaterThan($[0])
34451	447	8	DfpMath.java	logInternal	i	int	0	NIL-FOR	$ < 10000
2515	453	12	DfpMath.java	logInternal	y	Dfp	0	DEF	$.equals(py)
2515	453	12	DfpMath.java	logInternal	py	Dfp	0	DEF	y.equals($)
2516	508	8	DfpMath.java	pow	x	Dfp	0	RET	$.getField().getRadixDigits() != y.getField().getRadixDigits()
2516	508	8	DfpMath.java	pow	y	Dfp	0	RET	x.getField().getRadixDigits() != $.getField().getRadixDigits()
2517	522	8	DfpMath.java	pow	zero	Dfp	0	RET	y.equals($)
2517	522	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(zero)
2518	526	8	DfpMath.java	pow	one	Dfp	0	RET	y.equals($)
2518	526	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(one)
2519	527	12	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
2520	535	8	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
2520	535	8	DfpMath.java	pow	y	Dfp	0	RET	$.isNaN()
2521	542	8	DfpMath.java	pow	zero	Dfp	0	RET	x.equals($)
2521	542	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(zero)
2522	543	12	DfpMath.java	pow	zero	Dfp	1	RET	Dfp.copysign(one, x).greaterThan($)
2522	543	12	DfpMath.java	pow	one	Dfp	1	RET	Dfp.copysign($, x).greaterThan(zero)
2522	543	12	DfpMath.java	pow	x	Dfp	1	RET	Dfp.copysign(one, $).greaterThan(zero)
2523	545	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2523	545	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2524	552	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
2524	552	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
2524	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
2524	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
2524	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
2525	554	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2525	554	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2526	561	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2526	561	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2527	570	8	DfpMath.java	pow	zero	Dfp	0	DEF	x.lessThan($)
2527	570	8	DfpMath.java	pow	x	Dfp	0	DEF	$.lessThan(zero)
2528	576	8	DfpMath.java	pow	one	Dfp	0	RET	x.greaterThan($)
2528	576	8	DfpMath.java	pow	x	Dfp	0	RET	$.greaterThan(one)
2528	576	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
2529	577	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2529	577	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2530	584	8	DfpMath.java	pow	one	Dfp	0	RET	x.lessThan($)
2530	584	8	DfpMath.java	pow	x	Dfp	0	RET	$.lessThan(one)
2530	584	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
2531	585	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2531	585	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2532	592	8	DfpMath.java	pow	one	Dfp	0	RET	x.equals($)
2532	592	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(one)
2532	592	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
2533	597	8	DfpMath.java	pow	x	Dfp	0	RET	$.classify() == Dfp.INFINITE
2534	599	12	DfpMath.java	pow	invert	boolean	1	RET	$
2535	601	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
2535	601	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
2535	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
2535	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
2535	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
2536	603	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2536	603	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2537	610	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2537	610	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2538	618	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
2538	618	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
2539	626	8	DfpMath.java	pow	invert	boolean	0	RET	$
2539	626	8	DfpMath.java	pow	y	Dfp	0	RET	$.rint().equals($)
2540	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.lessThan($.newInstance(100000000))
2540	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.greaterThan($.newInstance(-100000000))
2540	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.lessThan(x.newInstance(100000000))
2540	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.greaterThan(x.newInstance(-100000000))
2541	640	12	DfpMath.java	pow	v	Dfp	1	DEF	$.unequal(zero)
2541	640	12	DfpMath.java	pow	zero	Dfp	1	DEF	v.unequal($)
2542	656	8	DfpMath.java	pow	invert	boolean	0	DEF	$
2543	658	12	DfpMath.java	pow	zero	Dfp	0	DEF	y.remainder(two).equals($)
2543	658	12	DfpMath.java	pow	two	Dfp	0	DEF	y.remainder($).equals(zero)
2543	658	12	DfpMath.java	pow	y	Dfp	0	DEF	$.remainder(two).equals(zero)
2543	658	12	DfpMath.java	pow	y	Dfp	0	DEF	$.rint().equals($)
34452	681	8	DfpMath.java	sinInternal	i	int	0	NIL-FOR	$ < 90
2544	687	12	DfpMath.java	sinInternal	y	Dfp	0	DEF	$.equals(py)
2544	687	12	DfpMath.java	sinInternal	py	Dfp	0	DEF	y.equals($)
34453	714	8	DfpMath.java	cosInternal	i	int	0	NIL-FOR	$ < 90
2545	721	12	DfpMath.java	cosInternal	y	Dfp	0	DEF	$.equals(py)
2545	721	12	DfpMath.java	cosInternal	py	Dfp	0	DEF	y.equals($)
2546	745	8	DfpMath.java	sin	zero	Dfp	0	DEF	x.lessThan($)
2546	745	8	DfpMath.java	sin	x	Dfp	0	DEF	$.lessThan(zero)
2547	754	8	DfpMath.java	sin	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
2547	754	8	DfpMath.java	sin	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
2548	759	8	DfpMath.java	sin	pi	Dfp	1	DEF	x.lessThan($.divide(4))
2548	759	8	DfpMath.java	sin	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
2549	774	8	DfpMath.java	sin	neg	boolean	0	DEF	$
2550	796	8	DfpMath.java	cos	zero	Dfp	0	DEF	x.lessThan($)
2550	796	8	DfpMath.java	cos	x	Dfp	0	DEF	$.lessThan(zero)
2551	804	8	DfpMath.java	cos	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
2551	804	8	DfpMath.java	cos	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
2552	810	8	DfpMath.java	cos	pi	Dfp	1	DEF	x.lessThan($.divide(4))
2552	810	8	DfpMath.java	cos	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
2553	824	8	DfpMath.java	cos	neg	boolean	0	DEF	$
34454	850	8	DfpMath.java	atanInternal	i	int	0	NIL-FOR	$ < 90
2554	855	12	DfpMath.java	atanInternal	y	Dfp	0	DEF	$.equals(py)
2554	855	12	DfpMath.java	atanInternal	py	Dfp	0	DEF	y.equals($)
2555	890	8	DfpMath.java	atan	zero	Dfp	0	DEF	x.lessThan($)
2555	890	8	DfpMath.java	atan	x	Dfp	0	DEF	$.lessThan(zero)
2556	895	8	DfpMath.java	atan	one	Dfp	0	DEF	x.greaterThan($)
2556	895	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(one)
2557	900	8	DfpMath.java	atan	ty	Dfp	0	DEF	x.greaterThan($)
2557	900	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(ty)
2558	923	8	DfpMath.java	atan	sub	boolean	0	DEF	$
2559	927	8	DfpMath.java	atan	recp	boolean	0	DEF	$
2560	931	8	DfpMath.java	atan	neg	boolean	0	DEF	$
2561	955	8	DfpMath.java	acos	a	Dfp	0	DEF	$.lessThan($.getZero())
2562	963	8	DfpMath.java	acos	negative	boolean	0	DEF	$
34485	105	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
34485	105	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
34486	106	12	DividedDifferenceInterpolator.java	computeDividedDifference	j	int	0	NIL-FOR	$ < n-i
34486	106	12	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	j < n-$
34486	106	12	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	j < $-i
34311	144	4	DormandPrince54Integrator.java	estimateError	THIS	DormandPrince54Integrator	0	NIL-FOR	j < $.mainSetDimension
34311	144	4	DormandPrince54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
2121	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	THIS	DormandPrince54StepInterpolator	1	DEF	interpolator.$.v1 == null
2121	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	interpolator	DormandPrince54StepInterpolator	1	DEF	$.v1 == null
2122	171	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.vectorsInitialized
2123	173	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.v1 == null
34278	183	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
34278	183	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
34279	206	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
34279	206	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
34310	258	4	DormandPrince853Integrator.java	estimateError	THIS	DormandPrince853Integrator	0	NIL-FOR	j < $.mainSetDimension
34310	258	4	DormandPrince853Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
2174	279	4	DormandPrince853Integrator.java	estimateError	den	double	0	DEF	$ <= 0.0
2193	246	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	1	DEF	interpolator.$.currentState == null
2193	246	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	interpolator	DormandPrince853StepInterpolator	1	DEF	$.currentState == null
34330	257	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
34330	257	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < yDotKLast.length
34331	264	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
34331	264	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < v.length
34332	291	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
34332	291	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < yDotKLast.length
34333	296	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
34333	296	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < v.length
2194	317	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.vectorsInitialized
2195	319	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.v == null
34334	321	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < 7
34335	330	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
34335	330	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
34336	348	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < D.$.length
34336	348	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < D.length
34337	370	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
34337	370	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2196	391	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	RET	$.currentState == null
34338	401	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
34338	401	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
34339	410	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
34339	410	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
34340	420	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
34340	420	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
34341	446	4	DormandPrince853StepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < dimension
34341	446	4	DormandPrince853StepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	i < $
34342	469	4	DormandPrince853StepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < dimension
34342	469	4	DormandPrince853StepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	i < $
2109	117	4	DummyStepInterpolator.java	writeExternal	THIS	DummyStepInterpolator	0	DEF	$.currentDerivative != null
34263	118	8	DummyStepInterpolator.java	writeExternal	THIS	DummyStepInterpolator	0	NIL-FOR	i < $.currentDerivative.$.length
34263	118	8	DummyStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < currentDerivative.length
2110	136	4	DummyStepInterpolator.java	readExternal	THIS	DummyStepInterpolator	1	DEF	$.currentState == null
34264	140	8	DummyStepInterpolator.java	readExternal	THIS	DummyStepInterpolator	0	NIL-FOR	i < $.currentDerivative.$.length
34264	140	8	DummyStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < currentDerivative.length
1352	100	8	EigenDecompositionImpl.java	EigenDecompositionImpl	THIS	EigenDecompositionImpl	0	DEF	$.isSymmetric(matrix, true)
1352	100	8	EigenDecompositionImpl.java	EigenDecompositionImpl	matrix	RealMatrix	0	DEF	isSymmetric($, true)
33818	123	8	EigenDecompositionImpl.java	EigenDecompositionImpl	i	int	0	NIL-FOR	$<size
33818	123	8	EigenDecompositionImpl.java	EigenDecompositionImpl	size	int	0	NIL-FOR	i<$
33819	144	8	EigenDecompositionImpl.java	isSymmetric	i	int	0	NIL-FOR	$ < rows
33819	144	8	EigenDecompositionImpl.java	isSymmetric	rows	int	0	NIL-FOR	i < $
33820	145	12	EigenDecompositionImpl.java	isSymmetric	j	int	0	NIL-FOR	$ < columns
33820	145	12	EigenDecompositionImpl.java	isSymmetric	columns	int	0	NIL-FOR	j < $
1353	148	16	EigenDecompositionImpl.java	isSymmetric	mij	double	0	NonSymmetricMatrixException:RET	FastMath.abs($ - mji) > (FastMath.max(FastMath.abs($), FastMath.abs(mji)) * eps)
1353	148	16	EigenDecompositionImpl.java	isSymmetric	mji	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - $) > (FastMath.max(FastMath.abs(mij), FastMath.abs($)) * eps)
1353	148	16	EigenDecompositionImpl.java	isSymmetric	eps	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - mji) > (FastMath.max(FastMath.abs(mij), FastMath.abs(mji)) * $)
1354	150	20	EigenDecompositionImpl.java	isSymmetric	raiseException	boolean	0	NonSymmetricMatrixException	$
1355	163	8	EigenDecompositionImpl.java	getV	THIS	EigenDecompositionImpl	0	DEF	$.cachedV == null
33821	166	12	EigenDecompositionImpl.java	getV	k	int	0	NIL-FOR	$ < m
33821	166	12	EigenDecompositionImpl.java	getV	m	int	0	NIL-FOR	k < $
1356	177	8	EigenDecompositionImpl.java	getD	THIS	EigenDecompositionImpl	0	DEF	$.cachedD == null
1357	187	8	EigenDecompositionImpl.java	getVT	THIS	EigenDecompositionImpl	0	DEF	$.cachedVt == null
33822	190	12	EigenDecompositionImpl.java	getVT	k	int	0	NIL-FOR	$ < m
33822	190	12	EigenDecompositionImpl.java	getVT	m	int	0	NIL-FOR	k < $
33823	471	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n - 1
33823	471	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $ - 1
33824	480	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
33824	480	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1358	481	12	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	DEF	FastMath.abs($.realEigenvalues[i])>maxAbsoluteValue
1358	481	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$])>maxAbsoluteValue
1358	481	12	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i])>$
1359	484	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$])>maxAbsoluteValue
1359	484	12	EigenDecompositionImpl.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i])>maxAbsoluteValue
1359	484	12	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i])>$
1360	489	8	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$!=0.0
33825	490	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
33825	490	12	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1361	491	16	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	DEF	FastMath.abs($.realEigenvalues[i])<=MathUtils.EPSILON*maxAbsoluteValue
1361	491	16	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$])<=MathUtils.EPSILON*maxAbsoluteValue
1361	491	16	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i])<=MathUtils.EPSILON*$
1362	494	16	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$])<=MathUtils.EPSILON*maxAbsoluteValue
1362	494	16	EigenDecompositionImpl.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i])<=MathUtils.EPSILON*maxAbsoluteValue
1362	494	16	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i])<=MathUtils.EPSILON*$
33826	500	8	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
33826	500	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	j < $
33827	503	12	EigenDecompositionImpl.java	findEigenVectors	m	int	0	NIL-DOWHILE	$ != j
33827	503	12	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-DOWHILE	m != $
33828	504	16	EigenDecompositionImpl.java	findEigenVectors	m	int	0	NIL-FOR	$ < n - 1
33828	504	16	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	m < $ - 1
1363	506	20	EigenDecompositionImpl.java	findEigenVectors	delta	double	0	DEF	FastMath.abs(e[m]) + $ == $
1363	506	20	EigenDecompositionImpl.java	findEigenVectors	m	int	0	DEF	FastMath.abs(e[$]) + delta == delta
1363	506	20	EigenDecompositionImpl.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[m]) + delta == delta
1364	510	16	EigenDecompositionImpl.java	findEigenVectors	m	int	0	MaxCountExceededException	$ != j
1364	510	16	EigenDecompositionImpl.java	findEigenVectors	j	int	0	MaxCountExceededException	m != $
1365	511	20	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	MaxCountExceededException	its == $.maxIter
1365	511	20	EigenDecompositionImpl.java	findEigenVectors	its	int	0	MaxCountExceededException	$ == maxIter
1366	518	20	EigenDecompositionImpl.java	findEigenVectors	q	double	1	DEF	$ < 0.0
33829	527	20	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ >= j
33829	527	20	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-FOR	i >= $
1367	530	24	EigenDecompositionImpl.java	findEigenVectors	p	double	1	DEF	FastMath.abs($) >= FastMath.abs(q)
1367	530	24	EigenDecompositionImpl.java	findEigenVectors	q	double	1	DEF	FastMath.abs(p) >= FastMath.abs($)
1368	543	24	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	e[$ + 1] == 0.0
1368	543	24	EigenDecompositionImpl.java	findEigenVectors	e	double[]	0	DEF	$[i + 1] == 0.0
33830	553	24	EigenDecompositionImpl.java	findEigenVectors	ia	int	0	NIL-FOR	$ < n
33830	553	24	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	ia < $
1369	559	20	EigenDecompositionImpl.java	findEigenVectors	t	double	0	DEF	$ == 0.0
1369	559	20	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	$ >= j
1369	559	20	EigenDecompositionImpl.java	findEigenVectors	j	int	0	DEF	i >= $
33831	570	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
33831	570	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
33832	573	12	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
33832	573	12	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	j < $
1370	574	16	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	DEF	$.realEigenvalues[j] > p
1370	574	16	EigenDecompositionImpl.java	findEigenVectors	j	int	0	DEF	realEigenvalues[$] > p
1370	574	16	EigenDecompositionImpl.java	findEigenVectors	p	double	0	DEF	realEigenvalues[j] > $
1371	579	12	EigenDecompositionImpl.java	findEigenVectors	k	int	0	DEF	$ != i
1371	579	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	k != $
33833	582	16	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
33833	582	16	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	j < $
33834	592	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
33834	592	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1372	593	12	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	DEF	FastMath.abs($.realEigenvalues[i])>maxAbsoluteValue
1372	593	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$])>maxAbsoluteValue
1372	593	12	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i])>$
1373	598	8	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$!=0.0
33835	599	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
33835	599	12	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1374	600	16	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	DEF	FastMath.abs($.realEigenvalues[i])<MathUtils.EPSILON*maxAbsoluteValue
1374	600	16	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$])<MathUtils.EPSILON*maxAbsoluteValue
1374	600	16	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i])<MathUtils.EPSILON*$
33836	607	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
33836	607	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
33837	608	12	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
33837	608	12	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	j < $
34213	82	8	ElitisticListPopulation.java	nextGeneration	i	int	0	NIL-FOR	$<oldChromosomes.size()
34213	82	8	ElitisticListPopulation.java	nextGeneration	oldChromosomes	List<Chromosome>	0	NIL-FOR	i<$.size()
2024	97	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	IllegalArgumentException	$ > 1
2024	97	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	IllegalArgumentException	$ < 0
2185	204	4	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
2185	204	4	EmbeddedRungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
34321	227	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
34322	233	6	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
2186	235	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
2186	235	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2187	240	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2188	242	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.vecAbsoluteTolerance == null
34323	243	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
34323	243	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
34323	243	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
34324	247	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
34324	247	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
34324	247	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
34325	259	8	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
34325	259	8	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
34326	261	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
34326	261	10	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
34326	261	10	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
34327	263	12	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
34327	263	12	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
34328	274	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
34328	274	8	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
34328	274	8	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
34329	276	10	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
34329	276	10	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
2189	284	8	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
2190	300	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.isLastStep
2191	305	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
2192	320	10	EmbeddedRungeKuttaIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
1958	148	12	EmpiricalDistributionImpl.java	load	THIS	EmpiricalDistributionImpl	0	DEF	$.sampleStats.getN() == 0
1959	339	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	DEF	$.binStats.isEmpty()
34180	342	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
34180	342	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount
34181	356	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount-1
34181	356	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount-1
1960	383	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	DEF	$.loaded
34182	391	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
34182	391	8	EmpiricalDistributionImpl.java	getNextValue	i	int	0	NIL-FOR	$ < binCount
1961	392	11	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	RET	x <= $.upperBounds[i]
1961	392	11	EmpiricalDistributionImpl.java	getNextValue	i	int	0	RET	x <= upperBounds[$]
1961	392	11	EmpiricalDistributionImpl.java	getNextValue	x	double	0	RET	$ <= upperBounds[i]
1962	394	15	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	0	RET	$.getN() > 0
1963	395	19	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	1	RET	$.getStandardDeviation() > 0
34183	455	8	EmpiricalDistributionImpl.java	getUpperBounds	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount - 1
34183	455	8	EmpiricalDistributionImpl.java	getUpperBounds	i	int	0	NIL-FOR	$ < binCount - 1
2056	54	8	Erf.java	erf	x	double	0	RET	FastMath.abs($) > 40
2057	58	8	Erf.java	erf	x	double	0	DEF	$ < 0
2058	88	8	Erf.java	erfc	x	double	0	RET	FastMath.abs($) > 40
34131	64	12	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
34131	64	12	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
34131	64	12	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
34132	68	8	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
34132	68	8	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
34132	68	8	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
1860	77	8	EuclideanIntegerPoint.java	equals	other	Object	0	RET	$ instanceof EuclideanIntegerPoint
1861	81	8	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	RET	$.point.$.length != otherPoint.$.length
1861	81	8	EuclideanIntegerPoint.java	equals	otherPoint	int[]	0	RET	point.length != $.length
34133	84	8	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < $.point.$.length
34133	84	8	EuclideanIntegerPoint.java	equals	i	int	0	NIL-FOR	$ < point.length
1862	85	12	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	RET	$.point[i] != otherPoint[i]
1862	85	12	EuclideanIntegerPoint.java	equals	i	int	0	RET	point[$] != otherPoint[$]
1862	85	12	EuclideanIntegerPoint.java	equals	otherPoint	int[]	0	RET	point[i] != $[i]
34134	110	8	EuclideanIntegerPoint.java	toString	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < coordinates.$.length
34134	110	8	EuclideanIntegerPoint.java	toString	i	int	0	NIL-FOR	$ < coordinates.length
34134	110	8	EuclideanIntegerPoint.java	toString	coordinates	int[]	0	NIL-FOR	i < $.length
1863	112	12	EuclideanIntegerPoint.java	toString	THIS	EuclideanIntegerPoint	0	DEF	i < coordinates.$.length - 1
1863	112	12	EuclideanIntegerPoint.java	toString	i	int	0	DEF	$ < coordinates.length - 1
1863	112	12	EuclideanIntegerPoint.java	toString	coordinates	int[]	0	DEF	i < $.length - 1
34363	84	4	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
34363	84	4	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2236	161	12	EventState.java	reinitializeBegin	THIS	EventState	0	DEF	$.g0 == 0
2237	206	12	EventState.java	evaluateStep	THIS	EventState	0	RET	FastMath.abs(dt) < $.convergence
2237	206	12	EventState.java	evaluateStep	dt	double	0	RET	FastMath.abs($) < convergence
34384	226	12	EventState.java	evaluateStep	i	int	0	NIL-FOR	$ < n
34384	226	12	EventState.java	evaluateStep	n	int	0	NIL-FOR	i < $
2238	234	16	EventState.java	evaluateStep	THIS	EventState	1	RET	$.g0Positive ^ (gb >= 0)
2238	234	16	EventState.java	evaluateStep	gb	double	1	RET	g0Positive ^ ($ >= 0)
2239	242	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	$.solver instanceof BracketedUnivariateRealSolver<?>
2240	263	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - ta) <= $.convergence
2240	263	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	Double.isNaN($.previousEventTime)
2240	263	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - $.previousEventTime) <= $.convergence
2240	263	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - ta) <= convergence
2240	263	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - previousEventTime) <= convergence
2240	263	20	EventState.java	evaluateStep	ta	double	1	DEF	FastMath.abs(root - $) <= convergence
2241	271	27	EventState.java	evaluateStep	THIS	EventState	1	RET	Double.isNaN($.previousEventTime)
2241	271	27	EventState.java	evaluateStep	THIS	EventState	1	RET	FastMath.abs($.previousEventTime - root) > $.convergence
2241	271	27	EventState.java	evaluateStep	root	double	1	RET	FastMath.abs(previousEventTime - $) > convergence
2242	325	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	$.pendingEvent
2242	325	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	FastMath.abs($.pendingEventTime - t) <= $.convergence
2242	325	8	EventState.java	stepAccepted	t	double	1	DEF	FastMath.abs(pendingEventTime - $) <= convergence
2243	356	8	EventState.java	reset	THIS	EventState	0	RET	FastMath.abs($.pendingEventTime - t) <= $.convergence
2243	356	8	EventState.java	reset	THIS	EventState	0	RET	$.pendingEvent
2243	356	8	EventState.java	reset	t	double	0	RET	FastMath.abs(pendingEventTime - $) <= convergence
2244	360	8	EventState.java	reset	THIS	EventState	0	DEF	$.nextAction == EventHandler.RESET_STATE
34229	153	8	ExceptionContext.java	buildMessage	i	int	0	NIL-FOR	$ < len
34229	153	8	ExceptionContext.java	buildMessage	len	int	0	NIL-FOR	i < $
2077	159	12	ExceptionContext.java	buildMessage	count	int	0	DEF	++$ < len
2077	159	12	ExceptionContext.java	buildMessage	len	int	0	DEF	++count < $
34230	205	8	ExceptionContext.java	serializeMessages	i	int	0	NIL-FOR	$ < len
34230	205	8	ExceptionContext.java	serializeMessages	len	int	0	NIL-FOR	i < $
34231	213	12	ExceptionContext.java	serializeMessages	j	int	0	NIL-FOR	$ < aLen
34231	213	12	ExceptionContext.java	serializeMessages	aLen	int	0	NIL-FOR	j < $
2078	214	16	ExceptionContext.java	serializeMessages	j	int	1	DEF	args[$] instanceof Serializable
2078	214	16	ExceptionContext.java	serializeMessages	args	Object[]	1	DEF	$[j] instanceof Serializable
34232	240	8	ExceptionContext.java	deSerializeMessages	i	int	0	NIL-FOR	$ < len
34232	240	8	ExceptionContext.java	deSerializeMessages	len	int	0	NIL-FOR	i < $
34233	247	12	ExceptionContext.java	deSerializeMessages	j	int	0	NIL-FOR	$ < aLen
34233	247	12	ExceptionContext.java	deSerializeMessages	aLen	int	0	NIL-FOR	j < $
2079	270	12	ExceptionContext.java	serializeContext	value	Object	1	DEF	$ instanceof Serializable
34234	293	8	ExceptionContext.java	deSerializeContext	i	int	0	NIL-FOR	$ < len
34234	293	8	ExceptionContext.java	deSerializeContext	len	int	0	NIL-FOR	i < $
1028	65	8	ExponentialDistributionImpl.java	ExponentialDistributionImpl	mean	double	0	NotStrictlyPositiveException	$ <= 0
1029	84	8	ExponentialDistributionImpl.java	density	x	double	0	RET	$ < 0
1030	107	8	ExponentialDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
1031	131	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
1031	131	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
1032	133	15	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1.0
1033	183	8	ExponentialDistributionImpl.java	getDomainUpperBound	p	double	1	RET	$ < 0.5
1034	205	8	ExponentialDistributionImpl.java	getInitialDomain	p	double	1	RET	$ < 0.5
963	79	8	FDistributionImpl.java	FDistributionImpl	numeratorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
964	83	8	FDistributionImpl.java	FDistributionImpl	denominatorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
965	131	8	FDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0
966	159	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
967	162	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
968	206	8	FDistributionImpl.java	getInitialDomain	d	double	0	DEF	$ > 2
969	280	8	FDistributionImpl.java	calculateNumericalMean	denominatorDF	double	0	RET	$ > 2
970	307	8	FDistributionImpl.java	calculateNumericalVariance	denominatorDF	double	0	RET	$ > 4
2080	224	8	FastCosineTransformer.java	fct	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
2081	229	8	FastCosineTransformer.java	fct	n	int	0	RET	$ == 1
34235	240	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
34235	240	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
34236	254	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
34236	254	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
2086	306	8	FastFourierTransformer.java	fft	THIS	FastFourierTransformer	0	RET	f.$.length == 1
2086	306	8	FastFourierTransformer.java	fft	f	double	0	RET	$.length == 1
34245	315	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
34246	325	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
2087	354	8	FastFourierTransformer.java	fft	n	int	0	RET	$ == 1
2088	358	8	FastFourierTransformer.java	fft	n	int	0	RET	$ == 2
34247	366	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < n
34247	366	8	FastFourierTransformer.java	fft	n	int	0	NIL-FOR	i < $
34248	369	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	$ > 0
34248	369	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	ii >= $
34248	369	12	FastFourierTransformer.java	fft	ii	int	0	NIL-WHILE	$ >= k
34249	376	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < n
34249	376	8	FastFourierTransformer.java	fft	n	int	0	NIL-FOR	i < $
34250	391	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < n
34250	391	8	FastFourierTransformer.java	fft	n	int	0	NIL-FOR	i < $
34251	393	12	FastFourierTransformer.java	fft	j	int	0	NIL-FOR	$ < n
34251	393	12	FastFourierTransformer.java	fft	n	int	0	NIL-FOR	j < $
34252	394	16	FastFourierTransformer.java	fft	k	int	0	NIL-FOR	$ < i
34252	394	16	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	k < $
2089	433	8	FastFourierTransformer.java	sample	n	int	0	DEF	$ <= 0
34253	442	8	FastFourierTransformer.java	sample	i	int	0	NIL-FOR	$ < n
34253	442	8	FastFourierTransformer.java	sample	n	int	0	NIL-FOR	i < $
34254	457	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
34254	457	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
34254	457	8	FastFourierTransformer.java	scaleArray	f	double	0	NIL-FOR	i < $.length
34255	472	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
34255	472	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
34255	472	8	FastFourierTransformer.java	scaleArray	f	Complex	0	NIL-FOR	i < $.length
2090	495	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	DEF	$.isPowerOf2(d.$.length)
2090	495	8	FastFourierTransformer.java	verifyDataSet	d	double	0	DEF	isPowerOf2($.length)
2091	508	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	DEF	$.isPowerOf2(o.$.length)
2091	508	8	FastFourierTransformer.java	verifyDataSet	o	Object	0	DEF	isPowerOf2($.length)
2092	524	8	FastFourierTransformer.java	verifyInterval	lower	double	0	DEF	$ >= upper
2092	524	8	FastFourierTransformer.java	verifyInterval	upper	double	0	DEF	lower >= $
34256	551	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize.$.length
34256	551	8	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize.length
34256	551	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $.length
2093	571	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == dimensionSize.$.length
2093	571	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	1	DEF	subVector.length == $.length
2093	571	8	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == dimensionSize.length
34257	573	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
34257	573	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
34257	573	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
2094	579	12	FastFourierTransformer.java	mdfft	forward	boolean	1	DEF	$
34258	585	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
34258	585	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
34258	585	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
2095	592	12	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == d
2095	592	12	FastFourierTransformer.java	mdfft	d	int	1	DEF	subVector.length == $
2095	592	12	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == d
34259	598	16	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize[subVector.$.length]
34259	598	16	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[subVector.length]
34259	598	16	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[subVector.length]
34259	598	16	FastFourierTransformer.java	mdfft	subVector	int[]	0	NIL-FOR	i < dimensionSize[$.length]
2082	162	8	FastHadamardTransformer.java	fht	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
34237	174	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
34237	174	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
34238	182	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
34238	182	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
34239	188	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
34239	188	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
2083	213	8	FastHadamardTransformer.java	fht	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
34240	225	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
34240	225	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
34241	233	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
34241	233	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
34242	239	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
34242	239	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
86	288	8	FastMath.java	doubleHighPart	d	double	0	RET	$ < MathUtils.SAFE_MIN
86	288	8	FastMath.java	doubleHighPart	d	double	0	RET	$ > -MathUtils.SAFE_MIN
87	310	6	FastMath.java	cosh	x	double	0	RET	$ != $
88	314	6	FastMath.java	cosh	x	double	0	RET	$ > 20.0
89	318	6	FastMath.java	cosh	x	double	0	RET	$ < -20
90	323	6	FastMath.java	cosh	x	double	0	DEF	$ < 0.0
91	365	6	FastMath.java	sinh	x	double	0	RET	$ != $
92	369	6	FastMath.java	sinh	x	double	0	RET	$ > 20.0
93	373	6	FastMath.java	sinh	x	double	0	RET	$ < -20
94	377	6	FastMath.java	sinh	x	double	0	RET	$ == 0
95	381	6	FastMath.java	sinh	x	double	0	DEF	$ < 0.0
96	388	6	FastMath.java	sinh	x	double	1	DEF	$ > 0.25
97	462	6	FastMath.java	sinh	negate	boolean	0	DEF	$
98	476	6	FastMath.java	tanh	x	double	0	RET	$ != $
99	480	6	FastMath.java	tanh	x	double	0	RET	$ > 20.0
100	484	6	FastMath.java	tanh	x	double	0	RET	$ < -20
101	488	6	FastMath.java	tanh	x	double	0	RET	$ == 0
102	492	6	FastMath.java	tanh	x	double	0	DEF	$ < 0.0
103	498	6	FastMath.java	tanh	x	double	1	DEF	$ >= 0.5
104	580	6	FastMath.java	tanh	negate	boolean	0	DEF	$
105	602	8	FastMath.java	asinh	a	double	0	DEF	$ < 0
106	608	8	FastMath.java	asinh	a	double	1	DEF	$ > 0.167
107	612	12	FastMath.java	asinh	a	double	1	DEF	$ > 0.097
108	614	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.036
109	616	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.0036
110	634	8	FastMath.java	atanh	a	double	0	DEF	$ < 0
111	640	8	FastMath.java	atanh	a	double	1	DEF	$ > 0.15
112	644	12	FastMath.java	atanh	a	double	1	DEF	$ > 0.087
113	646	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.031
114	648	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.003
115	741	8	FastMath.java	exp	x	double	1	RET	$ < 0.0
116	744	12	FastMath.java	exp	intVal	int	0	RET	$ > 746
117	745	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
118	752	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
119	755	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
120	762	12	FastMath.java	exp	intVal	int	0	RET	$ == 709
121	765	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
122	781	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
123	782	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
124	834	8	FastMath.java	exp	extra	double	1	DEF	$ != 0.0
125	840	8	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
126	863	8	FastMath.java	expm1	x	double	0	RET	$ == 0.0
126	863	8	FastMath.java	expm1	x	double	0	RET	$ != $
127	867	8	FastMath.java	expm1	x	double	0	RET	$ <= -1.0
127	867	8	FastMath.java	expm1	x	double	0	RET	$ >= 1.0
128	872	12	FastMath.java	expm1	x	double	1	RET	$ > 0.0
129	887	8	FastMath.java	expm1	x	double	0	DEF	$ < 0.0
130	963	8	FastMath.java	expm1	negative	boolean	0	DEF	$
131	996	8	FastMath.java	expm1	hiPrecOut	double	0	DEF	$ != null
33067	1019	8	FastMath.java	slowexp	i	int	0	NIL-FOR	$ >= 0
132	1032	8	FastMath.java	slowexp	result	double	0	DEF	$ != null
133	1046	8	FastMath.java	split	d	double	1	DEF	$ > -8e298
133	1046	8	FastMath.java	split	d	double	1	DEF	$ < 8e298
134	1065	8	FastMath.java	resplit	c	double	1	DEF	$ < 8e298
134	1065	8	FastMath.java	resplit	c	double	1	DEF	$ > -8e298
135	1123	8	FastMath.java	splitReciprocal	in	double	0	DEF	$[0] == 0.0
136	1131	8	FastMath.java	splitReciprocal	result	double	0	DEF	$[1] != $[1]
33068	1138	8	FastMath.java	splitReciprocal	i	int	0	NIL-FOR	$ < 2
33069	1226	8	FastMath.java	expint	p	int	0	NIL-WHILE	$ > 0
137	1227	12	FastMath.java	expint	p	int	0	DEF	($ & 1) != 0
138	1238	8	FastMath.java	expint	result	double	0	DEF	$ != null
139	1266	8	FastMath.java	log	x	double	0	RET	$==0
140	1272	8	FastMath.java	log	bits	long	0	RET	($ & 0x8000000000000000L) != 0
140	1272	8	FastMath.java	log	x	double	0	RET	$ != $
141	1273	12	FastMath.java	log	x	double	0	RET	$ != 0.0
142	1274	16	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
143	1283	8	FastMath.java	log	x	double	0	RET	$ == Double.POSITIVE_INFINITY
144	1284	12	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
145	1294	8	FastMath.java	log	bits	long	0	RET	($ & 0x7ff0000000000000L) == 0
146	1296	12	FastMath.java	log	x	double	0	RET	$ == 0
147	1298	16	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
33070	1307	12	FastMath.java	log	bits	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
148	1314	8	FastMath.java	log	exp	int	0	RET	$ == -1
148	1314	8	FastMath.java	log	exp	int	0	RET	$ == 0
149	1315	12	FastMath.java	log	x	double	0	RET	$ > 0.99
149	1315	12	FastMath.java	log	x	double	0	RET	$ < 1.01
149	1315	12	FastMath.java	log	hiPrec	double[]	0	RET	$ == null
33071	1331	16	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
150	1378	8	FastMath.java	log	hiPrec	double[]	1	DEF	$ != null
33072	1396	12	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
151	1479	8	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
152	1493	8	FastMath.java	log1p	x	double	0	RET	$ == -1
153	1497	8	FastMath.java	log1p	x	double	0	RET	$ > 0
153	1497	8	FastMath.java	log1p	x	double	0	RET	1/$ == 0
154	1501	8	FastMath.java	log1p	x	double	0	RET	$>1e-6
154	1501	8	FastMath.java	log1p	x	double	0	RET	$<-1e-6
155	1508	12	FastMath.java	log1p	lores	double	0	RET	Double.isInfinite($)
156	1538	8	FastMath.java	log10	lores	double	0	RET	Double.isInfinite($)
157	1562	8	FastMath.java	pow	y	double	0	RET	$ == 0.0
158	1566	8	FastMath.java	pow	x	double	0	RET	$ != $
159	1571	8	FastMath.java	pow	x	double	0	RET	$ == 0
160	1573	12	FastMath.java	pow	bits	long	0	RET	($ & 0x8000000000000000L) != 0
161	1577	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
161	1577	16	FastMath.java	pow	yi	long	0	RET	y == $
161	1577	16	FastMath.java	pow	y	double	0	RET	$ < 0
161	1577	16	FastMath.java	pow	y	double	0	RET	$ == yi
162	1581	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
162	1581	16	FastMath.java	pow	yi	long	0	RET	y == $
162	1581	16	FastMath.java	pow	y	double	0	RET	$ == yi
162	1581	16	FastMath.java	pow	y	double	0	RET	$ < 0
163	1585	16	FastMath.java	pow	yi	long	0	RET	y == $
163	1585	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
163	1585	16	FastMath.java	pow	y	double	0	RET	$ > 0
163	1585	16	FastMath.java	pow	y	double	0	RET	$ == yi
164	1590	12	FastMath.java	pow	y	double	0	RET	$ < 0
165	1593	12	FastMath.java	pow	y	double	0	RET	$ > 0
166	1600	8	FastMath.java	pow	x	double	0	RET	$ == Double.POSITIVE_INFINITY
167	1601	12	FastMath.java	pow	y	double	0	RET	$ != $
168	1604	12	FastMath.java	pow	y	double	1	RET	$ < 0.0
169	1611	8	FastMath.java	pow	y	double	0	RET	$ == Double.POSITIVE_INFINITY
170	1612	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
171	1616	12	FastMath.java	pow	x	double	1	RET	$ * $ > 1.0
172	1623	8	FastMath.java	pow	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
173	1624	12	FastMath.java	pow	y	double	0	RET	$ != $
174	1628	12	FastMath.java	pow	y	double	0	RET	$ < 0
175	1630	16	FastMath.java	pow	yi	long	0	RET	y == $
175	1630	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
175	1630	16	FastMath.java	pow	y	double	0	RET	$ == yi
176	1637	12	FastMath.java	pow	y	double	0	RET	$ > 0
177	1639	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
177	1639	16	FastMath.java	pow	yi	long	0	RET	y == $
177	1639	16	FastMath.java	pow	y	double	0	RET	$ == yi
178	1647	8	FastMath.java	pow	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
179	1649	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
180	1653	12	FastMath.java	pow	x	double	1	RET	$ * $ < 1.0
181	1661	8	FastMath.java	pow	x	double	0	RET	$ < 0
182	1663	12	FastMath.java	pow	THIS	FastMath	0	RET	y <= -$.TWO_POWER_52
182	1663	12	FastMath.java	pow	THIS	FastMath	0	RET	y >= $.TWO_POWER_52
182	1663	12	FastMath.java	pow	y	double	0	RET	$ <= -TWO_POWER_52
182	1663	12	FastMath.java	pow	y	double	0	RET	$ >= TWO_POWER_52
183	1667	12	FastMath.java	pow	y	double	1	RET	$ == (long) $
184	1678	8	FastMath.java	pow	y	double	1	DEF	$ > -8e298
184	1678	8	FastMath.java	pow	y	double	1	DEF	$ < 8e298
185	1691	8	FastMath.java	pow	lores	double	0	RET	Double.isInfinite($)
33073	1770	8	FastMath.java	slowLog	i	int	0	NIL-FOR	$ >= 0
33074	1800	8	FastMath.java	slowSin	i	int	0	NIL-FOR	$ >= 0
186	1804	12	FastMath.java	slowSin	i	int	0	DEF	($ & 1) == 0
187	1811	12	FastMath.java	slowSin	i	int	0	DEF	($ & 2) != 0
188	1820	8	FastMath.java	slowSin	result	double	0	DEF	$ != null
33075	1843	8	FastMath.java	slowCos	i	int	0	NIL-FOR	$ >= 0
189	1847	12	FastMath.java	slowCos	i	int	0	DEF	($ & 1) != 0
190	1854	12	FastMath.java	slowCos	i	int	0	DEF	($ & 2) != 0
191	1863	8	FastMath.java	slowCos	result	double	0	DEF	$ != null
33076	1877	8	FastMath.java	buildSinCosTables	i	int	0	NIL-FOR	$ < 7
33077	1890	8	FastMath.java	buildSinCosTables	i	int	0	NIL-FOR	$ < 14
192	1897	12	FastMath.java	buildSinCosTables	i	int	1	DEF	($ & 1) == 0
33078	1946	8	FastMath.java	buildSinCosTables	i	int	0	NIL-FOR	$ < 14
193	2116	8	FastMath.java	sinQ	xb	double	0	DEF	$ != 0.0
194	2246	8	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
195	2279	8	FastMath.java	tanQ	xb	double	0	DEF	$ != 0.0
196	2283	12	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
197	2325	8	FastMath.java	reducePayneHanek	shift	int	1	DEF	$ != 0
198	2356	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
198	2356	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
198	2356	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
198	2356	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
198	2356	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
199	2370	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
199	2370	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
199	2370	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
199	2370	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
199	2370	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
200	2390	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
200	2390	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
200	2390	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
200	2390	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
200	2390	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
201	2442	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
201	2442	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
201	2442	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
201	2442	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
201	2442	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
202	2456	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
202	2456	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
202	2456	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
202	2456	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
202	2456	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
203	2476	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
203	2476	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
203	2476	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
203	2476	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
203	2476	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
204	2498	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
204	2498	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
204	2498	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
204	2498	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
204	2498	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
205	2529	8	FastMath.java	sin	x	double	0	DEF	$ < 0
206	2535	8	FastMath.java	sin	xa	double	0	RET	$ == 0.0
207	2537	12	FastMath.java	sin	bits	long	0	RET	$ < 0
208	2543	8	FastMath.java	sin	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
208	2543	8	FastMath.java	sin	xa	double	0	RET	$ != $
209	2548	8	FastMath.java	sin	xa	double	1	DEF	$ > 3294198.0
210	2557	15	FastMath.java	sin	xa	double	0	DEF	$ > 1.5707963267948966
211	2582	16	FastMath.java	sin	remA	double	0	DEF	$ > 0.0
212	2596	8	FastMath.java	sin	negative	boolean	0	DEF	$
213	2624	8	FastMath.java	cos	x	double	0	DEF	$ < 0
214	2628	8	FastMath.java	cos	xa	double	0	RET	$ != $
214	2628	8	FastMath.java	cos	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
215	2634	8	FastMath.java	cos	xa	double	1	DEF	$ > 3294198.0
216	2643	15	FastMath.java	cos	xa	double	0	DEF	$ > 1.5707963267948966
217	2668	16	FastMath.java	cos	remA	double	0	DEF	$ > 0.0
218	2710	8	FastMath.java	tan	x	double	0	DEF	$ < 0
219	2716	8	FastMath.java	tan	xa	double	0	RET	$ == 0.0
220	2718	12	FastMath.java	tan	bits	long	0	RET	$ < 0
221	2724	8	FastMath.java	tan	xa	double	0	RET	$ != $
221	2724	8	FastMath.java	tan	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
222	2730	8	FastMath.java	tan	xa	double	1	DEF	$ > 3294198.0
223	2739	15	FastMath.java	tan	xa	double	0	DEF	$ > 1.5707963267948966
224	2764	16	FastMath.java	tan	remA	double	0	DEF	$ > 0.0
225	2778	8	FastMath.java	tan	xa	double	0	DEF	$ > 1.5
226	2794	8	FastMath.java	tan	quadrant	int	1	DEF	($ & 1) == 0
227	2800	8	FastMath.java	tan	negative	boolean	0	DEF	$
228	2826	8	FastMath.java	atan	xa	double	0	RET	$ == 0.0
229	2830	8	FastMath.java	atan	xa	double	0	DEF	$ < 0
230	2837	8	FastMath.java	atan	xa	double	0	RET	$ > 1.633123935319537E16
231	2842	8	FastMath.java	atan	xa	double	1	DEF	$ < 1.0
232	2864	8	FastMath.java	atan	idx	int	1	DEF	$ == 0
233	2945	8	FastMath.java	atan	leftPlane	boolean	0	DEF	$
234	2959	8	FastMath.java	atan	negate	boolean	0	DEF	$ ^ leftPlane
234	2959	8	FastMath.java	atan	leftPlane	boolean	0	DEF	negate ^ $
235	2973	8	FastMath.java	atan2	y	double	0	RET	$ != $
235	2973	8	FastMath.java	atan2	x	double	0	RET	$ !=$
236	2977	8	FastMath.java	atan2	y	double	0	RET	$ == 0.0
237	2982	12	FastMath.java	atan2	invx	double	0	RET	$ == 0.0
238	2983	16	FastMath.java	atan2	x	double	1	RET	$ > 0
239	2990	12	FastMath.java	atan2	invx	double	1	RET	$ < 0.0
239	2990	12	FastMath.java	atan2	x	double	1	RET	$ < 0.0
240	2991	16	FastMath.java	atan2	invy	double	1	RET	$ < 0.0
240	2991	16	FastMath.java	atan2	y	double	1	RET	$ < 0.0
241	3003	8	FastMath.java	atan2	y	double	0	RET	$ == Double.POSITIVE_INFINITY
242	3004	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
243	3008	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
244	3015	8	FastMath.java	atan2	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
245	3016	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
246	3020	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
247	3027	8	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
248	3028	12	FastMath.java	atan2	y	double	0	RET	$ > 0.0
248	3028	12	FastMath.java	atan2	y	double	0	RET	1/$ > 0.0
249	3032	12	FastMath.java	atan2	y	double	0	RET	$ < 0.0
249	3032	12	FastMath.java	atan2	y	double	0	RET	1/$ < 0.0
250	3037	8	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
251	3039	12	FastMath.java	atan2	y	double	0	RET	1/$ > 0.0
251	3039	12	FastMath.java	atan2	y	double	0	RET	$ > 0.0
252	3043	12	FastMath.java	atan2	y	double	0	RET	1/$ < 0.0
252	3043	12	FastMath.java	atan2	y	double	0	RET	$ < 0.0
253	3050	8	FastMath.java	atan2	x	double	0	RET	$ == 0
254	3051	12	FastMath.java	atan2	y	double	0	RET	1/$ > 0.0
254	3051	12	FastMath.java	atan2	y	double	0	RET	$ > 0.0
255	3055	12	FastMath.java	atan2	y	double	0	RET	$ < 0.0
255	3055	12	FastMath.java	atan2	y	double	0	RET	1/$ < 0.0
256	3062	8	FastMath.java	atan2	r	double	0	RET	Double.isInfinite($)
257	3079	8	FastMath.java	atan2	ra	double	0	DEF	$ == 0
258	3094	6	FastMath.java	asin	x	double	0	RET	$ != $
259	3098	6	FastMath.java	asin	x	double	0	RET	$ < -1.0
259	3098	6	FastMath.java	asin	x	double	0	RET	$ > 1.0
260	3102	6	FastMath.java	asin	x	double	0	RET	$ == 1.0
261	3106	6	FastMath.java	asin	x	double	0	RET	$ == -1.0
262	3110	6	FastMath.java	asin	x	double	0	RET	$ == 0.0
263	3170	6	FastMath.java	acos	x	double	0	RET	$ != $
264	3174	6	FastMath.java	acos	x	double	0	RET	$ > 1.0
264	3174	6	FastMath.java	acos	x	double	0	RET	$ < -1.0
265	3178	6	FastMath.java	acos	x	double	0	RET	$ == -1.0
266	3182	6	FastMath.java	acos	x	double	0	RET	$ == 1.0
267	3186	6	FastMath.java	acos	x	double	0	RET	$ == 0
268	3230	6	FastMath.java	acos	r	double	0	RET	Double.isInfinite($)
269	3257	6	FastMath.java	cbrt	exponent	int	0	RET	$ == -1023
270	3258	10	FastMath.java	cbrt	x	double	0	RET	$ == 0
271	3269	6	FastMath.java	cbrt	exponent	int	0	RET	$ == 1024
272	3324	6	FastMath.java	cbrt	subnormal	boolean	0	DEF	$
273	3338	8	FastMath.java	toRadians	x	double	0	RET	$ == 0.0
273	3338	8	FastMath.java	toRadians	x	double	0	RET	Double.isInfinite($)
274	3350	8	FastMath.java	toRadians	result	double	0	DEF	$ == 0
275	3363	8	FastMath.java	toDegrees	x	double	0	RET	$ == 0.0
275	3363	8	FastMath.java	toDegrees	x	double	0	RET	Double.isInfinite($)
276	3419	8	FastMath.java	ulp	x	double	0	RET	Double.isInfinite($)
277	3431	8	FastMath.java	ulp	x	float	0	RET	Float.isInfinite($)
278	3446	8	FastMath.java	scalb	n	int	0	RET	$ < 1024
278	3446	8	FastMath.java	scalb	n	int	0	RET	$ > -1023
279	3451	8	FastMath.java	scalb	d	double	0	RET	Double.isInfinite($)
279	3451	8	FastMath.java	scalb	d	double	0	RET	$ == 0
279	3451	8	FastMath.java	scalb	d	double	0	RET	Double.isNaN($)
280	3454	8	FastMath.java	scalb	n	int	0	RET	$ < -2098
281	3457	8	FastMath.java	scalb	n	int	0	RET	$ > 2097
282	3470	8	FastMath.java	scalb	n	int	1	RET	$ < 0
283	3472	12	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
284	3475	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -53
285	3484	16	FastMath.java	scalb	mostSignificantLostBit	long	0	DEF	$ != 0
286	3496	12	FastMath.java	scalb	exponent	int	1	RET	$ == 0
33079	3499	16	FastMath.java	scalb	mantissa	long	0	NIL-WHILE	($ >>> 52) != 1
287	3506	16	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
288	3512	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
289	3530	8	FastMath.java	scalb	n	int	0	RET	$ < 128
289	3530	8	FastMath.java	scalb	n	int	0	RET	$ > -127
290	3535	8	FastMath.java	scalb	f	float	0	RET	Float.isNaN($)
290	3535	8	FastMath.java	scalb	f	float	0	RET	Float.isInfinite($)
290	3535	8	FastMath.java	scalb	f	float	0	RET	$ == 0f
291	3538	8	FastMath.java	scalb	n	int	0	RET	$ < -277
292	3541	8	FastMath.java	scalb	n	int	0	RET	$ > 276
293	3554	8	FastMath.java	scalb	n	int	1	RET	$ < 0
294	3556	12	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
295	3559	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -24
296	3568	16	FastMath.java	scalb	mostSignificantLostBit	int	0	DEF	$ != 0
297	3580	12	FastMath.java	scalb	exponent	int	1	RET	$ == 0
33080	3583	16	FastMath.java	scalb	mantissa	int	0	NIL-WHILE	($ >>> 23) != 1
298	3590	16	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
299	3596	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
300	3639	8	FastMath.java	nextAfter	d	double	1	RET	Double.isNaN($)
300	3639	8	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
301	3641	15	FastMath.java	nextAfter	d	double	1	RET	$ == direction
301	3641	15	FastMath.java	nextAfter	direction	double	1	RET	d == $
302	3643	15	FastMath.java	nextAfter	d	double	1	RET	Double.isInfinite($)
303	3645	15	FastMath.java	nextAfter	d	double	0	RET	$ == 0
304	3653	8	FastMath.java	nextAfter	sign	long	1	RET	(direction < d) ^ ($ == 0L)
304	3653	8	FastMath.java	nextAfter	d	double	1	RET	(direction < $) ^ (sign == 0L)
304	3653	8	FastMath.java	nextAfter	direction	double	1	RET	($ < d) ^ (sign == 0L)
305	3695	8	FastMath.java	nextAfter	f	float	1	RET	Double.isNaN($)
305	3695	8	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
306	3697	15	FastMath.java	nextAfter	f	float	1	RET	$ == direction
306	3697	15	FastMath.java	nextAfter	direction	double	1	RET	f == $
307	3699	15	FastMath.java	nextAfter	f	float	1	RET	Float.isInfinite($)
308	3701	15	FastMath.java	nextAfter	f	float	0	RET	$ == 0f
309	3709	8	FastMath.java	nextAfter	sign	int	1	RET	(direction < f) ^ ($ == 0)
309	3709	8	FastMath.java	nextAfter	f	float	1	RET	(direction < $) ^ (sign == 0)
309	3709	8	FastMath.java	nextAfter	direction	double	1	RET	($ < f) ^ (sign == 0)
310	3724	8	FastMath.java	floor	x	double	0	RET	$ != $
311	3728	8	FastMath.java	floor	THIS	FastMath	0	RET	x <= -$.TWO_POWER_52
311	3728	8	FastMath.java	floor	THIS	FastMath	0	RET	x >= $.TWO_POWER_52
311	3728	8	FastMath.java	floor	x	double	0	RET	$ <= -TWO_POWER_52
311	3728	8	FastMath.java	floor	x	double	0	RET	$ >= TWO_POWER_52
312	3733	8	FastMath.java	floor	y	long	0	DEF	$ != x
312	3733	8	FastMath.java	floor	x	double	0	DEF	$ < 0
312	3733	8	FastMath.java	floor	x	double	0	DEF	y != $
313	3737	8	FastMath.java	floor	y	long	0	RET	$ == 0
314	3751	8	FastMath.java	ceil	x	double	0	RET	$ != $
315	3756	8	FastMath.java	ceil	y	double	0	RET	$ == x
315	3756	8	FastMath.java	ceil	x	double	0	RET	y == $
316	3762	8	FastMath.java	ceil	y	double	0	RET	$ == 0
317	3777	8	FastMath.java	rint	d	double	0	RET	$ > 0.5
318	3778	12	FastMath.java	rint	y	double	0	RET	$ == -1.0
319	3783	8	FastMath.java	rint	d	double	0	RET	$ < 0.5
320	3832	8	FastMath.java	min	a	float	0	RET	$ > b
320	3832	8	FastMath.java	min	b	float	0	RET	a > $
321	3835	8	FastMath.java	min	a	float	0	RET	$ < b
321	3835	8	FastMath.java	min	b	float	0	RET	a < $
322	3839	8	FastMath.java	min	a	float	0	RET	$ != b
322	3839	8	FastMath.java	min	b	float	0	RET	a != $
323	3845	8	FastMath.java	min	bits	int	0	RET	$ == 0x80000000
324	3857	8	FastMath.java	min	a	double	0	RET	$ > b
324	3857	8	FastMath.java	min	b	double	0	RET	a > $
325	3860	8	FastMath.java	min	a	double	0	RET	$ < b
325	3860	8	FastMath.java	min	b	double	0	RET	a < $
326	3864	8	FastMath.java	min	a	double	0	RET	$ != b
326	3864	8	FastMath.java	min	b	double	0	RET	a != $
327	3870	8	FastMath.java	min	bits	long	0	RET	$ == 0x8000000000000000L
328	3900	8	FastMath.java	max	a	float	0	RET	$ > b
328	3900	8	FastMath.java	max	b	float	0	RET	a > $
329	3903	8	FastMath.java	max	a	float	0	RET	$ < b
329	3903	8	FastMath.java	max	b	float	0	RET	a < $
330	3907	8	FastMath.java	max	a	float	0	RET	$ != b
330	3907	8	FastMath.java	max	b	float	0	RET	a != $
331	3913	8	FastMath.java	max	bits	int	0	RET	$ == 0x80000000
332	3925	8	FastMath.java	max	a	double	0	RET	$ > b
332	3925	8	FastMath.java	max	b	double	0	RET	a > $
333	3928	8	FastMath.java	max	a	double	0	RET	$ < b
333	3928	8	FastMath.java	max	b	double	0	RET	a < $
334	3932	8	FastMath.java	max	a	double	0	RET	$ != b
334	3932	8	FastMath.java	max	b	double	0	RET	a != $
335	3938	8	FastMath.java	max	bits	long	0	RET	$ == 0x8000000000000000L
336	3959	8	FastMath.java	hypot	x	double	1	RET	Double.isInfinite($)
336	3959	8	FastMath.java	hypot	y	double	1	RET	Double.isInfinite($)
337	3961	15	FastMath.java	hypot	x	double	1	RET	Double.isNaN($)
337	3961	15	FastMath.java	hypot	y	double	1	RET	Double.isNaN($)
338	3967	12	FastMath.java	hypot	expX	int	1	RET	$ > expY + 27
338	3967	12	FastMath.java	hypot	expY	int	1	RET	expX > $ + 27
339	3970	19	FastMath.java	hypot	expX	int	1	RET	expY > $ + 27
339	3970	19	FastMath.java	hypot	expY	int	1	RET	$ > expX + 27
340	4028	8	FastMath.java	copySign	m	long	0	RET	$ >= 0
340	4028	8	FastMath.java	copySign	m	long	0	RET	$ < 0
340	4028	8	FastMath.java	copySign	s	long	0	RET	$ < 0
340	4028	8	FastMath.java	copySign	s	long	0	RET	$ >= 0
341	4045	8	FastMath.java	copySign	m	int	0	RET	$ >= 0
341	4045	8	FastMath.java	copySign	m	int	0	RET	$ < 0
341	4045	8	FastMath.java	copySign	s	int	0	RET	$ >= 0
341	4045	8	FastMath.java	copySign	s	int	0	RET	$ < 0
2084	218	8	FastSineTransformer.java	fst	f	double	0	DEF	$[0] != 0.0
2085	224	8	FastSineTransformer.java	fst	n	int	0	RET	$ == 1
34243	233	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
34243	233	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
34244	245	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
34244	245	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
1105	72	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	matrix	FieldMatrix<T>	0	NonSquareMatrixException	$.isSquare()
33360	86	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < m
33360	86	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	row < $
33361	93	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	NIL-FOR	$ < m
33361	93	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	col < $
33362	98	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < col
33362	98	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	NIL-FOR	row < $
33363	101	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	i	int	0	NIL-FOR	$ < row
33363	101	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	i < $
33364	109	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < m
33364	109	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	row < $
33365	112	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	i	int	0	NIL-FOR	$ < col
33365	112	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	NIL-FOR	i < $
1106	117	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	THIS	FieldLUDecompositionImpl	0	DEF	$.lu[nonZero][col].equals($.field.getZero())
1106	117	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	nonZero	int	0	DEF	lu[$][col].equals(field.getZero())
1106	117	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	DEF	lu[nonZero][$].equals(field.getZero())
1107	124	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	nonZero	int	0	RET	$ >= m
1107	124	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	RET	nonZero >= $
1108	130	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	nonZero	int	0	DEF	$ != col
1108	130	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	DEF	nonZero != $
33366	132	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	i	int	0	NIL-FOR	$ < m
33366	132	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	i < $
33367	145	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < m
33367	145	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	row < $
1109	155	8	FieldLUDecompositionImpl.java	getL	THIS	FieldLUDecompositionImpl	0	DEF	$.singular
1109	155	8	FieldLUDecompositionImpl.java	getL	THIS	FieldLUDecompositionImpl	0	DEF	$.cachedL == null
33368	158	12	FieldLUDecompositionImpl.java	getL	i	int	0	NIL-FOR	$ < m
33368	158	12	FieldLUDecompositionImpl.java	getL	m	int	0	NIL-FOR	i < $
33369	160	16	FieldLUDecompositionImpl.java	getL	j	int	0	NIL-FOR	$ < i
33369	160	16	FieldLUDecompositionImpl.java	getL	i	int	0	NIL-FOR	j < $
1110	171	8	FieldLUDecompositionImpl.java	getU	THIS	FieldLUDecompositionImpl	0	DEF	$.cachedU == null
1110	171	8	FieldLUDecompositionImpl.java	getU	THIS	FieldLUDecompositionImpl	0	DEF	$.singular
33370	174	12	FieldLUDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < m
33370	174	12	FieldLUDecompositionImpl.java	getU	m	int	0	NIL-FOR	i < $
33371	176	16	FieldLUDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < m
33371	176	16	FieldLUDecompositionImpl.java	getU	m	int	0	NIL-FOR	j < $
1111	186	8	FieldLUDecompositionImpl.java	getP	THIS	FieldLUDecompositionImpl	0	DEF	$.cachedP == null
1111	186	8	FieldLUDecompositionImpl.java	getP	THIS	FieldLUDecompositionImpl	0	DEF	$.singular
33372	189	12	FieldLUDecompositionImpl.java	getP	i	int	0	NIL-FOR	$ < m
33372	189	12	FieldLUDecompositionImpl.java	getP	m	int	0	NIL-FOR	i < $
1112	203	8	FieldLUDecompositionImpl.java	getDeterminant	THIS	FieldLUDecompositionImpl	1	RET	$.singular
33373	208	12	FieldLUDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < m
33373	208	12	FieldLUDecompositionImpl.java	getDeterminant	m	int	0	NIL-FOR	i < $
1706	102	8	FirstMoment.java	increment	THIS	FirstMoment	0	DEF	$.n == 0
2039	42	8	FixedGenerationCount.java	FixedGenerationCount	maxGenerations	int	0	IllegalArgumentException	$ <= 0
2040	57	8	FixedGenerationCount.java	isSatisfied	THIS	FixedGenerationCount	0	RET	$.numGenerations < $.maxGenerations
1684	88	8	FourthMoment.java	increment	THIS	FourthMoment	0	DEF	$.n < 1
870	181	8	Fraction.java	Fraction	overflow	long	0	FractionConversionException	a0 > $
870	181	8	Fraction.java	Fraction	a0	long	0	FractionConversionException	$ > overflow
871	187	8	Fraction.java	Fraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
871	187	8	Fraction.java	Fraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
871	187	8	Fraction.java	Fraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
33157	203	8	Fraction.java	Fraction	stop	boolean	0	NIL-DOWHILE	$
872	209	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	p2 > $
872	209	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	q2 > $
872	209	12	Fraction.java	Fraction	p2	long	0	FractionConversionException	$ > overflow
872	209	12	Fraction.java	Fraction	q2	long	0	FractionConversionException	$ > overflow
873	214	12	Fraction.java	Fraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
873	214	12	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
873	214	12	Fraction.java	Fraction	n	int	1	DEF	$ < maxIterations
873	214	12	Fraction.java	Fraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
873	214	12	Fraction.java	Fraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
873	214	12	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
873	214	12	Fraction.java	Fraction	maxIterations	int	1	DEF	n < $
874	226	8	Fraction.java	Fraction	n	int	0	FractionConversionException	$ >= maxIterations
874	226	8	Fraction.java	Fraction	maxIterations	int	0	FractionConversionException	n >= $
875	230	8	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
875	230	8	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
876	257	8	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == 0
877	261	8	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ < 0
878	262	12	Fraction.java	Fraction	num	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
878	262	12	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
879	272	8	Fraction.java	Fraction	d	int	0	DEF	$ > 1
880	278	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
881	292	8	Fraction.java	abs	THIS	Fraction	1	DEF	$.numerator >= 0
882	333	8	Fraction.java	equals	THIS	Fraction	0	RET	$ == other
882	333	8	Fraction.java	equals	other	Object	0	RET	this == $
883	336	8	Fraction.java	equals	other	Object	0	RET	$ instanceof Fraction
884	406	8	Fraction.java	negate	THIS	Fraction	0	MathArithmeticException	$.numerator==Integer.MIN_VALUE
885	477	8	Fraction.java	addSub	fraction	Fraction	0	NullArgumentException	$ == null
886	481	8	Fraction.java	addSub	THIS	Fraction	0	RET	$.numerator == 0
887	484	8	Fraction.java	addSub	THIS	Fraction	0	RET	fraction.$.numerator == 0
887	484	8	Fraction.java	addSub	fraction	Fraction	0	RET	$.numerator == 0
888	490	8	Fraction.java	addSub	d1	int	0	RET	$==1
889	514	8	Fraction.java	addSub	w	BigInteger	0	MathArithmeticException	$.bitLength() > 31
890	534	8	Fraction.java	multiply	fraction	Fraction	0	NullArgumentException	$ == null
891	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	fraction.$.numerator == 0
891	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	$.numerator == 0
891	537	8	Fraction.java	multiply	fraction	Fraction	0	RET	$.numerator == 0
892	569	8	Fraction.java	divide	fraction	Fraction	0	NullArgumentException	$ == null
893	572	8	Fraction.java	divide	THIS	Fraction	0	MathArithmeticException	fraction.$.numerator == 0
893	572	8	Fraction.java	divide	fraction	Fraction	0	MathArithmeticException	$.numerator == 0
894	600	8	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ == 0
895	604	8	Fraction.java	getReducedFraction	numerator	int	0	RET	$==0
896	608	8	Fraction.java	getReducedFraction	numerator	int	0	DEF	($&1)==0
896	608	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
897	611	8	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ < 0
898	612	12	Fraction.java	getReducedFraction	numerator	int	0	MathArithmeticException	$==Integer.MIN_VALUE
898	612	12	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$==Integer.MIN_VALUE
899	639	8	Fraction.java	toString	THIS	Fraction	1	DEF	$.denominator == 1
900	641	15	Fraction.java	toString	THIS	Fraction	1	DEF	$.numerator == 0
854	176	8	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Fraction
855	178	15	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
856	206	8	FractionFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
857	230	8	FractionFormat.java	parse	num	Number	0	RET	$ == null
858	263	8	FractionFormat.java	parse	den	Number	0	RET	$ == null
34159	86	8	Frequency.java	toString	iter	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
1884	112	8	Frequency.java	addValue	v	Comparable<?>	0	DEF	$ instanceof Integer
1885	117	12	Frequency.java	addValue	count	Long	1	DEF	$ == null
34160	185	8	Frequency.java	getSumFreq	iterator	Iterator<Long>	0	NIL-WHILE	$.hasNext()
1886	199	8	Frequency.java	getCount	v	Comparable<?>	0	RET	$ instanceof Integer
1887	205	12	Frequency.java	getCount	count	Long	0	DEF	$ != null
1888	265	8	Frequency.java	getPct	sumFreq	long	0	RET	$ == 0
1889	315	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	$.getSumFreq() == 0
1890	318	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	$ instanceof Integer
1891	323	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	DEF	$ == null
1892	330	12	Frequency.java	getCumFreq	value	Long	0	DEF	$ != null
1893	337	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.firstKey()) < 0
1893	337	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.firstKey()) < 0
1893	337	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.firstKey()) < 0
1894	341	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.lastKey()) >= 0
1894	341	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.lastKey()) >= 0
1894	341	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.lastKey()) >= 0
34161	346	8	Frequency.java	getCumFreq	values	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
1895	348	12	Frequency.java	getCumFreq	nextValue	Comparable<?>	1	DEF	c.compare(v, $) > 0
1895	348	12	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	1	DEF	$.compare(v, nextValue) > 0
1895	348	12	Frequency.java	getCumFreq	v	Comparable<?>	1	DEF	c.compare($, nextValue) > 0
1896	408	8	Frequency.java	getCumPct	sumFreq	long	0	RET	$ == 0
1897	494	8	Frequency.java	equals	THIS	Frequency	0	RET	$ == obj
1897	494	8	Frequency.java	equals	obj	Object	0	RET	this == $
1898	497	8	Frequency.java	equals	obj	Object	0	RET	$ instanceof Frequency
1899	501	8	Frequency.java	equals	THIS	Frequency	1	RET	$.freqTable == null
1900	502	12	Frequency.java	equals	THIS	Frequency	0	RET	other.$.freqTable != null
1900	502	12	Frequency.java	equals	other	Frequency	0	RET	$.freqTable != null
1901	505	15	Frequency.java	equals	THIS	Frequency	0	RET	$.freqTable.equals(other.$.freqTable)
1901	505	15	Frequency.java	equals	other	Frequency	0	RET	freqTable.equals($.freqTable)
1906	80	8	GLSMultipleLinearRegression.java	getOmegaInverse	THIS	GLSMultipleLinearRegression	0	DEF	$.OmegaInverse == null
2062	88	8	Gamma.java	logGamma	x	double	1	DEF	$ <= 0.0
2062	88	8	Gamma.java	logGamma	x	double	1	DEF	Double.isNaN($)
34227	94	12	Gamma.java	logGamma	i	int	0	NIL-FOR	$ > 0
2063	153	8	Gamma.java	regularizedGammaP	a	double	1	DEF	$ <= 0.0
2063	153	8	Gamma.java	regularizedGammaP	a	double	1	DEF	Double.isNaN($)
2063	153	8	Gamma.java	regularizedGammaP	x	double	1	DEF	Double.isNaN($)
2063	153	8	Gamma.java	regularizedGammaP	x	double	1	DEF	$ < 0.0
2064	155	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ == 0.0
2065	157	15	Gamma.java	regularizedGammaP	a	double	1	DEF	x >= $ + 1
2065	157	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ >= a + 1
34228	166	12	Gamma.java	regularizedGammaP	n	double	0	NIL-WHILE	$ < maxIterations
34228	166	12	Gamma.java	regularizedGammaP	an	double	0	NIL-WHILE	FastMath.abs($/sum) > epsilon
34228	166	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	$ < Double.POSITIVE_INFINITY
34228	166	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	FastMath.abs(an/$) > epsilon
34228	166	12	Gamma.java	regularizedGammaP	epsilon	double	0	NIL-WHILE	FastMath.abs(an/sum) > $
34228	166	12	Gamma.java	regularizedGammaP	maxIterations	int	0	NIL-WHILE	n < $
2066	176	12	Gamma.java	regularizedGammaP	n	double	1	MaxCountExceededException	$ >= maxIterations
2066	176	12	Gamma.java	regularizedGammaP	maxIterations	int	1	MaxCountExceededException	n >= $
2067	178	19	Gamma.java	regularizedGammaP	sum	double	1	DEF	Double.isInfinite($)
2068	231	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	Double.isNaN($)
2068	231	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ <= 0.0
2068	231	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < 0.0
2068	231	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	Double.isNaN($)
2069	233	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ == 0.0
2070	235	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	x < $ + 1.0
2070	235	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < a + 1.0
2071	283	8	Gamma.java	digamma	x	double	0	RET	$ > 0
2071	283	8	Gamma.java	digamma	x	double	0	RET	$ <= S_LIMIT
2072	289	8	Gamma.java	digamma	x	double	0	RET	$ >= C_LIMIT
2073	313	8	Gamma.java	trigamma	x	double	0	RET	$ <= S_LIMIT
2073	313	8	Gamma.java	trigamma	x	double	0	RET	$ > 0
2074	317	8	Gamma.java	trigamma	x	double	0	RET	$ >= C_LIMIT
919	70	8	GammaDistributionImpl.java	GammaDistributionImpl	alpha	double	0	NotStrictlyPositiveException	$ <= 0
920	73	8	GammaDistributionImpl.java	GammaDistributionImpl	beta	double	0	NotStrictlyPositiveException	$ <= 0
921	104	8	GammaDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0
922	129	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
923	132	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
924	157	8	GammaDistributionImpl.java	density	x	double	0	RET	$ < 0
925	194	8	GammaDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < 0.5
926	220	8	GammaDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < 0.5
33978	73	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
33979	88	12	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.rows
33979	88	12	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < rows
33980	96	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	j < $.cols
33980	96	16	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
33981	101	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	k < $.cols
33981	101	16	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
33982	104	20	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	l < $.cols
33982	104	20	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < cols
33983	119	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.cols
33983	119	16	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < cols
1545	127	12	GaussNewtonOptimizer.java	doOptimize	checker	ConvergenceChecker<VectorialPointValuePair>	0	DEF	$ != null
1546	128	16	GaussNewtonOptimizer.java	doOptimize	previous	VectorialPointValuePair	0	DEF	$ != null
2661	54	8	Gaussian.java	Gaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
2034	69	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	IllegalArgumentException	$ < 0
2034	69	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	IllegalArgumentException	$ > 1
2035	72	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	IllegalArgumentException	$ > 1
2035	72	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	IllegalArgumentException	$ < 0
34215	113	8	GeneticAlgorithm.java	evolve	current	Population	0	NIL-WHILE	condition.isSatisfied($)
34215	113	8	GeneticAlgorithm.java	evolve	condition	StoppingCondition	0	NIL-WHILE	$.isSatisfied(current)
34216	147	8	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	NIL-WHILE	$.getPopulationSize() < $.getPopulationLimit()
2036	152	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getCrossoverRate()
2036	152	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getCrossoverRate()
2037	158	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getMutationRate()
2037	158	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getMutationRate()
2038	168	12	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	DEF	$.getPopulationSize() < $.getPopulationLimit()
1704	111	8	GeometricMean.java	getResult	THIS	GeometricMean	1	RET	$.sumOfLogs.getN() > 0
1705	203	8	GeometricMean.java	checkEmpty	THIS	GeometricMean	0	DEF	$.getN() > 0
34320	112	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
34320	112	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2124	226	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ < 0.0001
2124	226	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ > 0.9999
2125	261	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control1	double	1	DEF	$ > 0.9999
2125	261	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control1	double	1	DEF	$ < 0.0001
2126	267	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control2	double	1	DEF	$ > 0.9999
2126	267	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control2	double	1	DEF	$ < 0.0001
2127	273	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control3	double	1	DEF	$ > 0.9999
2127	273	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control3	double	1	DEF	$ < 0.0001
2128	279	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control4	double	1	DEF	$ < 1.0001
2128	279	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control4	double	1	DEF	$ > 999.9
2129	313	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ % 2 != 0
2129	313	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ <= 6
2130	317	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ < 0.0001
2130	317	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ > 0.9999
2131	323	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ > 0.9999
2131	323	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ < 0.0001
2132	365	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence.$.length != size
2132	365	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence == null
2132	365	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	DEF	sequence.length != $
34280	375	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
34280	375	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
34281	382	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
34281	382	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
34282	387	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
34282	387	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
34283	389	6	GraggBulirschStoerIntegrator.java	initializeArrays	l	int	0	NIL-FOR	$ < k
34283	389	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	l < $
2133	412	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ >= 7
2133	412	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ <= 0
2134	426	4	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	1	DEF	$.vecAbsoluteTolerance == null
34284	427	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
34284	427	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
34284	427	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
34285	432	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
34285	432	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
34285	432	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
34286	468	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
34286	468	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
34286	468	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
34287	475	4	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	NIL-FOR	$ < n
34287	475	4	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	NIL-FOR	j < $
2135	477	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	DEF	2 * $ == n
2135	477	6	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	DEF	2 * j == $
34288	483	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
34288	483	6	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
34288	483	6	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
2136	492	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	k < $.maxIter
2136	492	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	j <= $.maxChecks
2136	492	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	$.performTest
2136	492	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	RET	$ <= maxChecks
2136	492	6	GraggBulirschStoerIntegrator.java	tryStep	k	int	0	RET	$ < maxIter
34289	494	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
34289	494	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
34289	494	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
34290	499	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
34290	499	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
34290	499	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
2137	503	8	GraggBulirschStoerIntegrator.java	tryStep	initialNorm	double	0	RET	deltaNorm > 4 * FastMath.max(1.0e-15, $)
2137	503	8	GraggBulirschStoerIntegrator.java	tryStep	deltaNorm	double	0	RET	$ > 4 * FastMath.max(1.0e-15, initialNorm)
34291	511	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
34291	511	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
34291	511	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
34292	530	4	GraggBulirschStoerIntegrator.java	extrapolate	j	int	0	NIL-FOR	$ < k
34292	530	4	GraggBulirschStoerIntegrator.java	extrapolate	k	int	0	NIL-FOR	j < $
34293	531	6	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
34293	531	6	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
34293	531	6	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
34294	539	4	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
34294	539	4	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
34294	539	4	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
34295	564	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length-1
34295	564	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length-1
34296	570	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length
34296	570	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length
34297	577	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < $.sequence[k]
34297	577	6	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < sequence[k]
34297	577	6	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	l < sequence[$]
2138	583	4	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	DEF	y != $
2138	583	4	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
34298	622	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-DOWHILE	$.isLastStep
2139	627	6	GraggBulirschStoerIntegrator.java	integrate	newStep	boolean	0	DEF	$
2140	632	8	GraggBulirschStoerIntegrator.java	integrate	firstStepAlreadyComputed	boolean	0	DEF	$
2141	636	8	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2142	649	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize > t
2142	649	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize < t
2142	649	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2142	649	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2142	649	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
2142	649	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
34299	658	6	GraggBulirschStoerIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
2143	663	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.tryStep($.stepStart, y, $.stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2143	663	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	tryStep(stepStart, y, stepSize, $, scale, fk[$], ($ == 0) ? yMidDots[0] : diagonal[$-1], ($ == 0) ? y1 : y1Diag[$-1], yTmp)
2143	663	8	GraggBulirschStoerIntegrator.java	integrate	y1	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? $ : y1Diag[k-1], yTmp)
2143	663	8	GraggBulirschStoerIntegrator.java	integrate	yTmp	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], $)
2143	663	8	GraggBulirschStoerIntegrator.java	integrate	diagonal	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : $[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2143	663	8	GraggBulirschStoerIntegrator.java	integrate	y1Diag	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : $[k-1], yTmp)
2143	663	8	GraggBulirschStoerIntegrator.java	integrate	fk	double[][][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, $[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2143	663	8	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? $[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2143	663	8	GraggBulirschStoerIntegrator.java	integrate	scale	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, $, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2143	663	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	1	DEF	tryStep(stepStart, $, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2144	676	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 0
34300	685	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < $.mainSetDimension
34300	685	12	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < mainSetDimension
2145	691	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > maxError
2145	691	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > 1.0e15
2145	691	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ > 1
2145	691	12	GraggBulirschStoerIntegrator.java	integrate	maxError	double	1	DEF	error > $
2146	712	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2146	712	16	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
2147	715	18	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
2148	724	20	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
2148	724	20	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
2149	730	22	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2149	730	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2149	730	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2150	742	16	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
2151	750	18	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
2151	750	18	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
2152	755	20	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2152	755	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2152	755	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2153	766	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > 1.0
2154	768	18	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2154	768	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2154	768	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2155	779	16	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.isLastStep
2155	779	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ <= 1.0
2155	779	16	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2156	791	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
2157	798	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
34301	801	8	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
34301	801	8	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
34302	807	8	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < mu
34302	807	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	NIL-FOR	l < $
34303	813	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
34303	813	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
34303	813	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
34304	816	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k - l2
34304	816	10	GraggBulirschStoerIntegrator.java	integrate	l2	int	0	NIL-FOR	j <= k - $
34304	816	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $ - l2
34305	819	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
34305	819	12	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
34305	819	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
34306	824	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
34306	824	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
34306	824	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
34307	829	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
34307	829	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
34308	830	12	GraggBulirschStoerIntegrator.java	integrate	m	int	0	NIL-FOR	$ >= 2 * (l + 1)
34308	830	12	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	m >= 2 * ($ + 1)
34309	831	14	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
34309	831	14	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
34309	831	14	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
2158	839	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	DEF	$ >= 0
2159	846	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.useInterpolationError
2160	851	12	GraggBulirschStoerIntegrator.java	integrate	interpError	double	0	DEF	$ > 10.0
2161	861	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
2162	874	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ == 1
2163	876	10	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
2164	879	15	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ <= targetIter
2164	879	15	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k <= $
2165	881	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k-1] < $.orderControl1 * $.costPerTimeUnit[k]
2165	881	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2166	883	17	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
2166	883	17	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
2167	888	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k-2] < $.orderControl1 * $.costPerTimeUnit[k-1]
2167	888	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$-2] < orderControl1 * costPerTimeUnit[$-1]
2167	888	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 2
2168	892	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[optimalIter]
2168	892	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	0	DEF	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[$]
2168	892	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[optimalIter]
2169	897	8	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	1	DEF	$
2170	904	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	1	DEF	$ <= k
2170	904	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	optimalIter <= $
2171	907	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
2171	907	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
2171	907	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ < targetIter
2171	907	12	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k < $
2172	926	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2173	932	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	1	DEF	$
2197	165	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	1	DEF	interpolator.$.polynoms == null
2197	165	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	interpolator	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms == null
34343	170	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.polynoms.$.length
34343	170	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	i	int	0	NIL-FOR	$ < polynoms.length
2198	187	4	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ < 0
2199	194	6	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms != null
34344	196	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
34344	196	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
34344	196	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
34345	200	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
34345	200	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
34345	200	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
2200	207	6	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ <= 4
34346	211	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.errfac.$.length
34346	211	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < errfac.length
34347	215	10	GraggBulirschStoerStepInterpolator.java	resetTables	j	int	0	NIL-FOR	$ <= i
34347	215	10	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	j <= $
2201	240	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms == null
2201	240	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms.$.length <= (mu + 4)
2201	240	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	polynoms.length <= ($ + 4)
34348	246	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
34348	246	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	i	int	0	NIL-FOR	$ < currentState.length
2202	259	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	RET	$ < 0
2203	267	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 0
2204	271	8	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 1
2205	275	10	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 2
34349	279	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	j	int	0	NIL-FOR	$ <= mu
34349	279	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	NIL-FOR	j <= $
2206	299	4	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree >= 5
34350	300	6	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < scale.$.length
34350	300	6	GraggBulirschStoerStepInterpolator.java	estimateError	i	int	0	NIL-FOR	$ < scale.length
34350	300	6	GraggBulirschStoerStepInterpolator.java	estimateError	scale	double[]	0	NIL-FOR	i < $.length
34351	325	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < dimension
34351	325	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	dimension	int	0	NIL-FOR	i < $
2207	334	8	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree > 3
34352	337	12	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ > 3
2208	348	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.h == 0
34353	368	4	GraggBulirschStoerStepInterpolator.java	writeExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
34353	368	4	GraggBulirschStoerStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ <= currentDegree
34354	369	6	GraggBulirschStoerStepInterpolator.java	writeExternal	l	int	0	NIL-FOR	$ < dimension
34354	369	6	GraggBulirschStoerStepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	l < $
34355	390	4	GraggBulirschStoerStepInterpolator.java	readExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
34355	390	4	GraggBulirschStoerStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ <= currentDegree
34356	391	6	GraggBulirschStoerStepInterpolator.java	readExternal	l	int	0	NIL-FOR	$ < dimension
34356	391	6	GraggBulirschStoerStepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	l < $
34381	117	4	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	j < $.mainSetDimension
34381	117	4	HighamHall54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
34382	119	6	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	l < STATIC_E.$.length
34382	119	6	HighamHall54Integrator.java	estimateError	l	int	0	NIL-FOR	$ < STATIC_E.length
34380	89	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
34380	89	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1012	62	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	NotStrictlyPositiveException	$ <= 0
1013	66	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	numberOfSuccesses	int	0	NotPositiveException	$ < 0
1014	70	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	sampleSize	int	0	NotPositiveException	$ < 0
1015	75	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	NumberIsTooLargeException	numberOfSuccesses > $
1015	75	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	numberOfSuccesses	int	0	NumberIsTooLargeException	$ > populationSize
1016	79	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	NumberIsTooLargeException	sampleSize > $
1016	79	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	sampleSize	int	0	NumberIsTooLargeException	$ > populationSize
1017	100	8	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x < $[0]
1017	100	8	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < domain[0]
1018	102	15	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x >= $[1]
1018	102	15	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= domain[1]
1019	205	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x > $[1]
1019	205	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x < $[0]
1019	205	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ > domain[1]
1019	205	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ < domain[0]
1020	250	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x < $[0]
1020	250	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ < domain[0]
1021	252	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x > $[1]
1021	252	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ > domain[1]
33176	281	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x0	int	0	NIL-WHILE	$ != x1
33176	281	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x1	int	0	NIL-WHILE	x0 != $
33062	73	8	Incrementor.java	incrementCount	i	int	0	NIL-FOR	$ < value
33062	73	8	Incrementor.java	incrementCount	value	int	0	NIL-FOR	i < $
33	84	8	Incrementor.java	incrementCount	THIS	Incrementor	0	MaxCountExceededException	++$.count > $.maximalCount
706	93	8	IntervalsSet.java	buildTree	lower	double	0	RET	Double.isInfinite($)
706	93	8	IntervalsSet.java	buildTree	lower	double	0	RET	$ < 0
707	94	12	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
707	94	12	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
708	108	8	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
708	108	8	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
709	136	8	IntervalsSet.java	computeGeometricalProperties	THIS	IntervalsSet	1	DEF	$.getTree(false).getCut() == null
33144	160	8	IntervalsSet.java	getInf	node	BSPTree<Euclidean1D>	0	NIL-WHILE	$.getCut() != null
33145	177	8	IntervalsSet.java	getSup	node	BSPTree<Euclidean1D>	0	NIL-WHILE	$.getCut() != null
710	215	8	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	1	DEF	$.getCut() == null
711	216	12	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	0	DEF	(Boolean) $.getAttribute()
712	232	12	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(low, loc) == $.Location.INSIDE
712	232	12	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(high, loc) == $.Location.INSIDE
712	232	12	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(low, $) == Location.INSIDE
712	232	12	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(high, $) == Location.INSIDE
712	232	12	IntervalsSet.java	recurseList	low	BSPTree<Euclidean1D>	0	DEF	checkPoint($, loc) == Location.INSIDE
712	232	12	IntervalsSet.java	recurseList	high	BSPTree<Euclidean1D>	0	DEF	checkPoint($, loc) == Location.INSIDE
1054	46	8	InvertibleRealLinearOperator.java	solve	THIS	InvertibleRealLinearOperator	0	DimensionMismatchException	b.$.length != $.getRowDimension()
1054	46	8	InvertibleRealLinearOperator.java	solve	b	double[]	0	DimensionMismatchException	$.length != getRowDimension()
1055	51	8	InvertibleRealLinearOperator.java	solve	x	RealVector	1	RET	$ instanceof ArrayRealVector
34122	108	8	KMeansPlusPlusClusterer.java	cluster	i	int	0	NIL-FOR	$ < numTrials
34122	108	8	KMeansPlusPlusClusterer.java	cluster	numTrials	int	0	NIL-FOR	i < $
1836	116	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
1837	129	12	KMeansPlusPlusClusterer.java	cluster	varianceSum	double	0	DEF	$ <= bestVarianceSum
1837	129	12	KMeansPlusPlusClusterer.java	cluster	bestVarianceSum	double	0	DEF	varianceSum <= $
1838	161	8	KMeansPlusPlusClusterer.java	cluster	points	Collection<T>	0	NumberIsTooSmallException	$.size() < k
1838	161	8	KMeansPlusPlusClusterer.java	cluster	k	int	0	NumberIsTooSmallException	points.size() < $
34123	175	8	KMeansPlusPlusClusterer.java	cluster	count	int	0	NIL-FOR	$ < max
34123	175	8	KMeansPlusPlusClusterer.java	cluster	max	int	0	NIL-FOR	count < $
1839	180	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	1	ConvergenceException	$.cluster.getPoints().isEmpty()
1840	205	12	KMeansPlusPlusClusterer.java	cluster	emptyCluster	boolean	0	RET	$
1840	205	12	KMeansPlusPlusClusterer.java	cluster	changes	int	0	RET	$ == 0
1841	228	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	clusterIndex	int	0	DEF	$ != assignments[pointIndex]
1841	228	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	pointIndex	int	0	DEF	clusterIndex != assignments[$]
1841	228	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	assignments	int[]	0	DEF	clusterIndex != $[pointIndex]
34124	282	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
34124	282	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
1842	283	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	$ != firstPointIndex
1842	283	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	firstPointIndex	int	0	DEF	i != $
34125	289	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	NIL-WHILE	$.size() < k
34125	289	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	NIL-WHILE	resultSet.size() < $
34126	295	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
34126	295	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
1843	296	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
1843	296	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
34127	311	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
34127	311	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
1844	312	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
1844	312	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
1845	314	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	r	double	0	DEF	sum >= $
1845	314	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	sum	double	0	DEF	$ >= r
1846	324	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	0	DEF	$ == -1
34128	325	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ >= 0
1847	326	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
1847	326	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
1848	334	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	1	DEF	$ >= 0
1849	343	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	DEF	$.size() < k
1849	343	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	DEF	resultSet.size() < $
34129	346	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	NIL-FOR	$ < numPoints
34129	346	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	j < $
1850	348	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	taken[$]
1850	348	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[j]
1851	351	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	d2	double	0	DEF	$ < minDistSquared[j]
1851	351	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	d2 < minDistSquared[$]
1851	351	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	minDistSquared	double[]	0	DEF	d2 < $[j]
1852	380	12	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
1853	391	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	variance	double	0	DEF	$ > maxVariance
1853	391	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	maxVariance	double	0	DEF	variance > $
1854	400	8	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
1855	426	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	number	int	0	DEF	$ > maxNumber
1855	426	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	maxNumber	int	0	DEF	number > $
1856	434	8	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
34130	460	12	KMeansPlusPlusClusterer.java	getFarthestPoint	i	int	0	NIL-FOR	$ < points.size()
34130	460	12	KMeansPlusPlusClusterer.java	getFarthestPoint	points	List<T>	0	NIL-FOR	i < $.size()
1857	462	16	KMeansPlusPlusClusterer.java	getFarthestPoint	distance	double	0	DEF	$ > maxDistance
1857	462	16	KMeansPlusPlusClusterer.java	getFarthestPoint	maxDistance	double	0	DEF	distance > $
1858	472	8	KMeansPlusPlusClusterer.java	getFarthestPoint	selectedCluster	Cluster<T>	0	ConvergenceException	$ == null
1859	495	12	KMeansPlusPlusClusterer.java	getNearestCluster	distance	double	0	DEF	$ < minDistance
1859	495	12	KMeansPlusPlusClusterer.java	getNearestCluster	minDistance	double	0	DEF	distance < $
1	133	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getControlMatrix() == null
2	153	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialStateEstimate() == null
3	160	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	DimensionMismatchException	$.transitionMatrix.getColumnDimension() != $.stateEstimation.getDimension()
4	167	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialErrorCovariance() == null
5	176	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	NonSquareMatrixException	$.transitionMatrix.isSquare()
6	183	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() > 0
6	183	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() > 0
6	183	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() != 1
6	183	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() != $.transitionMatrix.getRowDimension()
6	183	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix != null
7	197	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.measurementMatrix.getColumnDimension() != $.transitionMatrix.getRowDimension()
8	205	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	measNoise.getRowDimension() != $.measurementMatrix.getRowDimension()
8	205	8	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
8	205	8	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != measurementMatrix.getRowDimension()
9	296	8	KalmanFilter.java	predict	THIS	KalmanFilter	0	DimensionMismatchException	u.getDimension() != $.controlMatrix.getColumnDimension()
9	296	8	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$ != null
9	296	8	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$.getDimension() != controlMatrix.getColumnDimension()
10	307	8	KalmanFilter.java	predict	u	RealVector	0	DEF	$ != null
11	345	8	KalmanFilter.java	correct	THIS	KalmanFilter	0	DimensionMismatchException	z.getDimension() != $.measurementMatrix.getRowDimension()
11	345	8	KalmanFilter.java	correct	z	RealVector	0	DimensionMismatchException	$.getDimension() != measurementMatrix.getRowDimension()
990	84	8	KolmogorovSmirnovDistributionImpl.java	KolmogorovSmirnovDistributionImpl	n	int	0	NotStrictlyPositiveException	$ <= 0
991	157	8	KolmogorovSmirnovDistributionImpl.java	cdf	ninvhalf	double	1	RET	d <= $
991	157	8	KolmogorovSmirnovDistributionImpl.java	cdf	d	double	1	RET	$ <= ninvhalf
992	161	15	KolmogorovSmirnovDistributionImpl.java	cdf	ninv	double	1	RET	d <= $
992	161	15	KolmogorovSmirnovDistributionImpl.java	cdf	ninvhalf	double	1	RET	$ < d
992	161	15	KolmogorovSmirnovDistributionImpl.java	cdf	d	double	1	RET	ninvhalf < $
992	161	15	KolmogorovSmirnovDistributionImpl.java	cdf	d	double	1	RET	$ <= ninv
33164	167	12	KolmogorovSmirnovDistributionImpl.java	cdf	THIS	KolmogorovSmirnovDistributionImpl	0	NIL-FOR	i <= $.n
33164	167	12	KolmogorovSmirnovDistributionImpl.java	cdf	i	int	0	NIL-FOR	$ <= n
993	173	15	KolmogorovSmirnovDistributionImpl.java	cdf	ninv	double	1	RET	1 - $ <= d
993	173	15	KolmogorovSmirnovDistributionImpl.java	cdf	d	double	1	RET	1 - ninv <= $
993	173	15	KolmogorovSmirnovDistributionImpl.java	cdf	d	double	1	RET	$ < 1
994	177	15	KolmogorovSmirnovDistributionImpl.java	cdf	d	double	0	RET	1 <= $
33165	207	8	KolmogorovSmirnovDistributionImpl.java	exactK	THIS	KolmogorovSmirnovDistributionImpl	0	NIL-FOR	i <= $.n
33165	207	8	KolmogorovSmirnovDistributionImpl.java	exactK	i	int	0	NIL-FOR	$ <= n
33166	244	8	KolmogorovSmirnovDistributionImpl.java	roundedK	i	int	0	NIL-FOR	$ < m
33166	244	8	KolmogorovSmirnovDistributionImpl.java	roundedK	m	int	0	NIL-FOR	i < $
33167	245	12	KolmogorovSmirnovDistributionImpl.java	roundedK	j	int	0	NIL-FOR	$ < m
33167	245	12	KolmogorovSmirnovDistributionImpl.java	roundedK	m	int	0	NIL-FOR	j < $
33168	254	8	KolmogorovSmirnovDistributionImpl.java	roundedK	THIS	KolmogorovSmirnovDistributionImpl	0	NIL-FOR	i <= $.n
33168	254	8	KolmogorovSmirnovDistributionImpl.java	roundedK	i	int	0	NIL-FOR	$ <= n
995	280	8	KolmogorovSmirnovDistributionImpl.java	createH	hDouble	double	0	ArithmeticException	$ >= 1
33169	306	8	KolmogorovSmirnovDistributionImpl.java	createH	i	int	0	NIL-FOR	$ < m
33169	306	8	KolmogorovSmirnovDistributionImpl.java	createH	m	int	0	NIL-FOR	i < $
33170	307	12	KolmogorovSmirnovDistributionImpl.java	createH	j	int	0	NIL-FOR	$ < m
33170	307	12	KolmogorovSmirnovDistributionImpl.java	createH	m	int	0	NIL-FOR	j < $
996	308	16	KolmogorovSmirnovDistributionImpl.java	createH	j	int	1	DEF	i - $ + 1 < 0
996	308	16	KolmogorovSmirnovDistributionImpl.java	createH	i	int	1	DEF	$ - j + 1 < 0
33171	322	8	KolmogorovSmirnovDistributionImpl.java	createH	i	int	0	NIL-FOR	$ < m
33171	322	8	KolmogorovSmirnovDistributionImpl.java	createH	m	int	0	NIL-FOR	i < $
33172	329	8	KolmogorovSmirnovDistributionImpl.java	createH	i	int	0	NIL-FOR	$ < m
33172	329	8	KolmogorovSmirnovDistributionImpl.java	createH	m	int	0	NIL-FOR	i < $
997	339	8	KolmogorovSmirnovDistributionImpl.java	createH	h	BigFraction	0	DEF	$.compareTo(BigFraction.ONE_HALF) == 1
33173	354	8	KolmogorovSmirnovDistributionImpl.java	createH	i	int	0	NIL-FOR	$ < m
33173	354	8	KolmogorovSmirnovDistributionImpl.java	createH	m	int	0	NIL-FOR	i < $
33174	355	12	KolmogorovSmirnovDistributionImpl.java	createH	j	int	0	NIL-FOR	$ < i + 1
33174	355	12	KolmogorovSmirnovDistributionImpl.java	createH	i	int	0	NIL-FOR	j < $ + 1
998	356	16	KolmogorovSmirnovDistributionImpl.java	createH	j	int	0	DEF	i - $ + 1 > 0
998	356	16	KolmogorovSmirnovDistributionImpl.java	createH	i	int	0	DEF	$ - j + 1 > 0
33175	357	20	KolmogorovSmirnovDistributionImpl.java	createH	g	int	0	NIL-FOR	$ <= i - j + 1
33175	357	20	KolmogorovSmirnovDistributionImpl.java	createH	j	int	0	NIL-FOR	g <= i - $ + 1
33175	357	20	KolmogorovSmirnovDistributionImpl.java	createH	i	int	0	NIL-FOR	g <= $ - j + 1
1699	98	8	Kurtosis.java	increment	THIS	Kurtosis	1	DEF	$.incMoment
1700	112	8	Kurtosis.java	getResult	THIS	Kurtosis	0	DEF	$.moment.getN() > 3
1701	114	16	Kurtosis.java	getResult	THIS	Kurtosis	1	DEF	$.moment.$.n <= 3
1701	114	16	Kurtosis.java	getResult	variance	double	1	DEF	$ < 10E-20
1702	132	8	Kurtosis.java	clear	THIS	Kurtosis	1	DEF	$.incMoment
1703	170	8	Kurtosis.java	evaluate	THIS	Kurtosis	0	DEF	$.test(values, begin, length)
1703	170	8	Kurtosis.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1703	170	8	Kurtosis.java	evaluate	begin	int	0	DEF	test(values, $, length)
1703	170	8	Kurtosis.java	evaluate	length	int	0	DEF	test(values, begin, $)
1703	170	8	Kurtosis.java	evaluate	length	int	0	DEF	$ > 3
34087	181	12	Kurtosis.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
34087	181	12	Kurtosis.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
34087	181	12	Kurtosis.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1375	70	8	LUDecompositionImpl.java	LUDecompositionImpl	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
33838	83	8	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
33838	83	8	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
33839	90	8	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	$ < m
33839	90	8	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	col < $
33840	95	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < col
33840	95	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	row < $
33841	98	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < row
33841	98	16	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	i < $
33842	107	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
33842	107	12	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
33843	110	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < col
33843	110	16	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	i < $
1376	116	16	LUDecompositionImpl.java	LUDecompositionImpl	sum	double	0	DEF	FastMath.abs($) > largest
1376	116	16	LUDecompositionImpl.java	LUDecompositionImpl	largest	double	0	DEF	FastMath.abs(sum) > $
1377	123	12	LUDecompositionImpl.java	LUDecompositionImpl	THIS	LUDecompositionImpl	0	RET	FastMath.abs($.lu[max][col]) < singularityThreshold
1377	123	12	LUDecompositionImpl.java	LUDecompositionImpl	max	int	0	RET	FastMath.abs(lu[$][col]) < singularityThreshold
1377	123	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	RET	FastMath.abs(lu[max][$]) < singularityThreshold
1377	123	12	LUDecompositionImpl.java	LUDecompositionImpl	singularityThreshold	double	0	RET	FastMath.abs(lu[max][col]) < $
1378	129	12	LUDecompositionImpl.java	LUDecompositionImpl	max	int	0	DEF	$ != col
1378	129	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	DEF	max != $
33844	133	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < m
33844	133	16	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	i < $
33845	146	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
33845	146	12	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
1379	154	8	LUDecompositionImpl.java	getL	THIS	LUDecompositionImpl	0	DEF	$.singular
1379	154	8	LUDecompositionImpl.java	getL	THIS	LUDecompositionImpl	0	DEF	$.cachedL == null
33846	157	12	LUDecompositionImpl.java	getL	i	int	0	NIL-FOR	$ < m
33846	157	12	LUDecompositionImpl.java	getL	m	int	0	NIL-FOR	i < $
33847	159	16	LUDecompositionImpl.java	getL	j	int	0	NIL-FOR	$ < i
33847	159	16	LUDecompositionImpl.java	getL	i	int	0	NIL-FOR	j < $
1380	170	8	LUDecompositionImpl.java	getU	THIS	LUDecompositionImpl	0	DEF	$.singular
1380	170	8	LUDecompositionImpl.java	getU	THIS	LUDecompositionImpl	0	DEF	$.cachedU == null
33848	173	12	LUDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < m
33848	173	12	LUDecompositionImpl.java	getU	m	int	0	NIL-FOR	i < $
33849	175	16	LUDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < m
33849	175	16	LUDecompositionImpl.java	getU	m	int	0	NIL-FOR	j < $
1381	185	8	LUDecompositionImpl.java	getP	THIS	LUDecompositionImpl	0	DEF	$.cachedP == null
1381	185	8	LUDecompositionImpl.java	getP	THIS	LUDecompositionImpl	0	DEF	$.singular
33850	188	12	LUDecompositionImpl.java	getP	i	int	0	NIL-FOR	$ < m
33850	188	12	LUDecompositionImpl.java	getP	m	int	0	NIL-FOR	i < $
1382	202	8	LUDecompositionImpl.java	getDeterminant	THIS	LUDecompositionImpl	1	RET	$.singular
33851	207	12	LUDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < m
33851	207	12	LUDecompositionImpl.java	getDeterminant	m	int	0	NIL-FOR	i < $
2726	98	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
2726	98	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
2727	104	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
2727	104	8	LaguerreSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
2728	109	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
2728	109	8	LaguerreSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
2729	115	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
2729	115	8	LaguerreSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
2730	120	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
2730	120	8	LaguerreSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
34538	149	8	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	NIL-FOR	i < coefficients.$.length
34538	149	8	LaguerreSolver.java	laguerre	i	int	0	NIL-FOR	$ < coefficients.length
34538	149	8	LaguerreSolver.java	laguerre	coefficients	double[]	0	NIL-FOR	i < $.length
2731	154	8	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	1	RET	$.complexSolver.isRoot(lo, hi, z)
2731	154	8	LaguerreSolver.java	laguerre	z	Complex	1	RET	complexSolver.isRoot(lo, hi, $)
2731	154	8	LaguerreSolver.java	laguerre	lo	double	1	RET	complexSolver.isRoot($, hi, z)
2731	154	8	LaguerreSolver.java	laguerre	hi	double	1	RET	complexSolver.isRoot(lo, $, z)
34539	160	12	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	NIL-FOR	i < root.$.length
34539	160	12	LaguerreSolver.java	laguerre	i	int	0	NIL-FOR	$ < root.length
34539	160	12	LaguerreSolver.java	laguerre	root	Complex[]	0	NIL-FOR	i < $.length
2732	161	16	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	DEF	$.complexSolver.isRoot(lo, hi, root[i])
2732	161	16	LaguerreSolver.java	laguerre	i	int	0	DEF	complexSolver.isRoot(lo, hi, root[$])
2732	161	16	LaguerreSolver.java	laguerre	root	Complex[]	0	DEF	complexSolver.isRoot(lo, hi, $[i])
2732	161	16	LaguerreSolver.java	laguerre	lo	double	0	DEF	complexSolver.isRoot($, hi, root[i])
2732	161	16	LaguerreSolver.java	laguerre	hi	double	0	DEF	complexSolver.isRoot(lo, $, root[i])
1492	113	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != weights.$.length
1492	113	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != weights.length
1492	113	8	LeastSquaresConverter.java	LeastSquaresConverter	weights	double[]	0	DimensionMismatchException	observations.length != $.length
1493	143	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != scale.getColumnDimension()
1493	143	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != scale.getColumnDimension()
1493	143	8	LeastSquaresConverter.java	LeastSquaresConverter	scale	RealMatrix	0	DimensionMismatchException	observations.length != $.getColumnDimension()
1494	156	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	DimensionMismatchException	residuals.$.length != $.observations.$.length
1494	156	8	LeastSquaresConverter.java	value	residuals	double[]	0	DimensionMismatchException	$.length != observations.length
33909	159	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
33909	159	8	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
33909	159	8	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1495	165	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.weights != null
33910	166	12	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
33910	166	12	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
33910	166	12	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1496	170	15	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.scale != null
34570	168	8	LegendreGaussIntegrator.java	integrate	THIS	LegendreGaussIntegrator	0	NIL-FOR	i < $.maximalIterationCount
34570	168	8	LegendreGaussIntegrator.java	integrate	i	int	0	NIL-FOR	$ < maximalIterationCount
2794	180	12	LegendreGaussIntegrator.java	integrate	THIS	LegendreGaussIntegrator	0	RET	i + 1 >= $.minimalIterationCount
2794	180	12	LegendreGaussIntegrator.java	integrate	delta	double	0	RET	$ <= limit
2794	180	12	LegendreGaussIntegrator.java	integrate	limit	double	0	RET	delta <= $
2794	180	12	LegendreGaussIntegrator.java	integrate	i	int	0	RET	$ + 1 >= minimalIterationCount
34571	217	8	LegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
34571	217	8	LegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
34572	218	12	LegendreGaussIntegrator.java	stage	THIS	LegendreGaussIntegrator	0	NIL-FOR	j < $.abscissas.$.length
34572	218	12	LegendreGaussIntegrator.java	stage	j	int	0	NIL-FOR	$ < abscissas.length
33912	251	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i<$.rows
33912	251	12	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$<rows
33913	264	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
33913	264	12	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
1498	269	12	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
33914	273	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
33914	273	16	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
1499	275	20	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
1500	290	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.cost != 0
33915	291	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
33915	291	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1501	294	20	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
33916	296	24	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
33916	296	24	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
1502	303	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
1502	303	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
33917	311	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
33917	311	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
33918	316	12	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
33919	319	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
33919	319	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
33920	336	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
33920	336	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1503	345	16	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
1504	354	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost < previousCost
1504	354	16	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost < $
33921	361	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
33921	361	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
33922	365	20	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
33922	365	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
33923	370	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
33923	370	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1505	383	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
1506	386	24	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost >= previousCost
1506	386	24	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
1506	386	24	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost >= $
1507	391	23	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
1507	391	23	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
1508	397	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	RET	$ >= 1.0e-4
33924	401	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
33924	401	20	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
1509	409	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<VectorialPointValuePair>	0	RET	$ != null
1510	411	24	LevenbergMarquardtOptimizer.java	doOptimize	previous	VectorialPointValuePair	0	RET	checker.converged(iter, $, current)
1510	411	24	LevenbergMarquardtOptimizer.java	doOptimize	current	VectorialPointValuePair	0	RET	checker.converged(iter, previous, $)
1510	411	24	LevenbergMarquardtOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
1510	411	24	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<VectorialPointValuePair>	0	RET	$.converged(iter, previous, current)
33925	418	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
33925	418	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1511	431	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
1511	431	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	FastMath.abs(actRed) <= $.costRelativeTolerance
1511	431	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
1511	431	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	FastMath.abs($) <= costRelativeTolerance
1511	431	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
1511	431	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
1511	431	16	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
1511	431	16	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
1512	440	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	ConvergenceException	FastMath.abs($) <= 2.2204e-16
1512	440	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	ConvergenceException	$ <= 2.2204e-16
1512	440	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	ConvergenceException	$ <= 2.0
1513	443	23	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	ConvergenceException	$ <= 2.2204e-16 * xNorm
1513	443	23	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	ConvergenceException	delta <= 2.2204e-16 * $
1514	446	23	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	ConvergenceException	$ <= 2.2204e-16
33926	481	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.rank
33926	481	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
33927	484	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
33927	484	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < cols
33928	487	8	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
33929	490	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
33929	490	12	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
33930	499	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
33930	499	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1515	507	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
1515	507	8	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1516	517	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.rank == $.solvedCols
33931	518	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
33931	518	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
33932	523	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
33932	523	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
33933	526	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
33933	526	16	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
33934	538	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
33934	538	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
33935	541	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
33935	541	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1517	549	8	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
1518	557	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
33936	561	8	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1519	564	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
33937	568	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
33937	568	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
33938	575	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
33938	575	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1520	587	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1520	587	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1520	587	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1520	587	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	FastMath.abs($) <= 0.1 * delta
1520	587	12	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
1520	587	12	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	FastMath.abs(fp) <= 0.1 * $
33939	593	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
33939	593	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
33940	597	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
33940	597	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
33941	601	16	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
33941	601	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
33942	606	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
33942	606	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1521	613	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
1522	615	19	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
33943	650	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
33943	650	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
33944	652	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
33944	652	12	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
33945	660	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
33945	660	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1523	666	12	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
33946	675	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
33946	675	12	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
1524	680	16	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1524	680	16	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1525	685	20	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	FastMath.abs($) < FastMath.abs(lmDiag[k])
1525	685	20	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	FastMath.abs(rkk) < FastMath.abs(lmDiag[$])
1525	685	20	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	FastMath.abs(rkk) < FastMath.abs($[k])
33947	703	20	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
33947	703	20	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
33948	721	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
33948	721	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1526	722	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing == $.solvedCols
1526	722	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1526	722	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1526	722	12	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1527	725	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing < $.solvedCols
1527	725	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1528	729	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
33949	730	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
33950	733	16	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
33950	733	16	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
33951	741	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
33951	741	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
33952	771	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
33952	771	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
33953	774	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.weightedResidualJacobian.$.length
33953	774	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < weightedResidualJacobian.length
33954	782	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
33954	782	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
33955	787	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.cols
33955	787	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < cols
33956	789	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.weightedResidualJacobian.$.length
33956	789	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < weightedResidualJacobian.length
1529	793	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isInfinite($)
1529	793	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isNaN($)
1530	797	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1530	797	16	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1531	802	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	RET	ak2 <= $.qrRankingThreshold
1531	802	12	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ <= qrRankingThreshold
33957	821	12	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
33958	823	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.weightedResidualJacobian.$.length
33958	823	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < weightedResidualJacobian.length
33959	827	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.weightedResidualJacobian.$.length
33959	827	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < weightedResidualJacobian.length
33960	841	8	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
33960	841	8	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < cols
33961	844	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
33961	844	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
33962	848	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
33962	848	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
631	61	8	Line.java	reset	norm	double	0	IllegalArgumentException	$ == 0.0
632	151	8	Line.java	distance	normal	Vector3D	0	RET	$.getNorm() < 1.0e-10
715	132	8	Line.java	reset	d	double	1	DEF	$ == 0.0
716	159	8	Line.java	revertSelf	THIS	Line	1	DEF	$.angle < FastMath.PI
717	200	8	Line.java	intersection	d	double	0	RET	FastMath.abs($) < 1.0e-10
33889	128	8	LinearConstraint.java	LinearConstraint	THIS	LinearConstraint	0	NIL-FOR	i < sub.$.length
33889	128	8	LinearConstraint.java	LinearConstraint	i	int	0	NIL-FOR	$ < sub.length
33889	128	8	LinearConstraint.java	LinearConstraint	sub	double[]	0	NIL-FOR	i < $.length
1455	191	6	LinearConstraint.java	equals	THIS	LinearConstraint	0	RET	$ == other
1455	191	6	LinearConstraint.java	equals	other	Object	0	RET	this == $
1456	195	6	LinearConstraint.java	equals	other	Object	0	RET	$ instanceof LinearConstraint
2565	44	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
2565	44	8	LinearInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
2565	44	8	LinearInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
2566	48	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	NumberIsTooSmallException	x.$.length < 2
2566	48	8	LinearInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 2
34459	60	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
34459	60	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
34460	66	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
34460	66	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
1469	108	6	LinearObjectiveFunction.java	equals	THIS	LinearObjectiveFunction	0	RET	$ == other
1469	108	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	this == $
1470	112	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	$ instanceof LinearObjectiveFunction
2030	49	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	NumberIsTooLargeException	$.size() > populationLimit
2030	49	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NumberIsTooLargeException	chromosomes.size() > $
2031	53	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NotPositiveException	$ < 0
2032	68	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NotPositiveException	$ < 0
2033	107	12	ListPopulation.java	getFittestChromosome	THIS	ListPopulation	0	DEF	$.chromosome.compareTo(bestChromosome) > 0
2033	107	12	ListPopulation.java	getFittestChromosome	bestChromosome	Chromosome	0	DEF	chromosome.compareTo($) > 0
2641	146	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ > 1
2641	146	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ < 0
2642	151	8	LoessInterpolator.java	LoessInterpolator	robustnessIters	int	0	NotPositiveException	$ < 0
2643	205	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
2643	205	8	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
2643	205	8	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
2644	211	8	LoessInterpolator.java	smooth	n	int	0	NoDataException	$ == 0
2645	221	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 1
2646	225	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 2
2647	231	8	LoessInterpolator.java	smooth	bandwidthInPoints	int	0	NumberIsTooSmallException	$ < 2
34520	248	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	NIL-FOR	iter <= $.robustnessIters
34520	248	8	LoessInterpolator.java	smooth	iter	int	0	NIL-FOR	$ <= robustnessIters
34521	251	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
34521	251	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
2648	256	16	LoessInterpolator.java	smooth	i	int	0	DEF	$ > 0
2649	266	16	LoessInterpolator.java	smooth	ileft	int	1	DEF	xval[i] - xval[$] > xval[iright] - xval[i]
2649	266	16	LoessInterpolator.java	smooth	iright	int	1	DEF	xval[i] - xval[ileft] > xval[$] - xval[i]
2649	266	16	LoessInterpolator.java	smooth	i	int	1	DEF	xval[$] - xval[ileft] > xval[iright] - xval[$]
2649	266	16	LoessInterpolator.java	smooth	xval	double[]	1	DEF	$[i] - $[ileft] > $[iright] - $[i]
34522	285	16	LoessInterpolator.java	smooth	k	int	0	NIL-FOR	$ <= iright
34522	285	16	LoessInterpolator.java	smooth	iright	int	0	NIL-FOR	k <= $
2650	304	16	LoessInterpolator.java	smooth	THIS	LoessInterpolator	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - meanX * meanX)) < $.accuracy
2650	304	16	LoessInterpolator.java	smooth	meanX	double	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - $ * $)) < accuracy
2650	304	16	LoessInterpolator.java	smooth	meanXSquared	double	1	DEF	FastMath.sqrt(FastMath.abs($ - meanX * meanX)) < accuracy
2651	318	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	iter == $.robustnessIters
2651	318	12	LoessInterpolator.java	smooth	iter	int	0	DEF	$ == robustnessIters
2652	331	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	FastMath.abs(medianResidual) < $.accuracy
2652	331	12	LoessInterpolator.java	smooth	medianResidual	double	0	DEF	FastMath.abs($) < accuracy
34523	335	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
34523	335	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
2653	337	16	LoessInterpolator.java	smooth	arg	double	1	DEF	$ >= 1
2654	367	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
2654	367	8	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
2654	367	8	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
2655	401	8	LoessInterpolator.java	updateBandwidthInterval	THIS	LoessInterpolator	0	DEF	nextRight < xval.$.length
2655	401	8	LoessInterpolator.java	updateBandwidthInterval	left	int	0	DEF	xval[nextRight] - xval[i] < xval[i] - xval[$]
2655	401	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	xval[$] - xval[i] < xval[i] - xval[left]
2655	401	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	$ < xval.length
2655	401	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	$[nextRight] - $[i] < $[i] - $[left]
2655	401	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	nextRight < $.length
2655	401	8	LoessInterpolator.java	updateBandwidthInterval	i	int	0	DEF	xval[nextRight] - xval[$] < xval[$] - xval[left]
34524	418	8	LoessInterpolator.java	nextNonzero	THIS	LoessInterpolator	0	NIL-WHILE	j < weights.$.length
34524	418	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	$ < weights.length
34524	418	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	weights[$] == 0
34524	418	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	j < $.length
34524	418	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	$[j] == 0
2656	434	8	LoessInterpolator.java	tricube	absX	double	0	RET	$ >= 1.0
34525	449	8	LoessInterpolator.java	checkAllFiniteReal	THIS	LoessInterpolator	0	NIL-FOR	i < values.$.length
34525	449	8	LoessInterpolator.java	checkAllFiniteReal	i	int	0	NIL-FOR	$ < values.length
34525	449	8	LoessInterpolator.java	checkAllFiniteReal	values	double[]	0	NIL-FOR	i < $.length
2662	68	8	Logistic.java	Logistic	n	double	0	NotStrictlyPositiveException	$ <= 0
2660	152	8	Logit.java	value	x	double	0	OutOfRangeException	$ < lo
2660	152	8	Logit.java	value	x	double	0	OutOfRangeException	$ > hi
2660	152	8	Logit.java	value	lo	double	0	OutOfRangeException	x < $
2660	152	8	Logit.java	value	hi	double	0	OutOfRangeException	x > $
1827	71	8	MannWhitneyUTestImpl.java	ensureDataConformance	x	double[]	0	IllegalArgumentException	$ == null
1828	75	8	MannWhitneyUTestImpl.java	ensureDataConformance	y	double[]	0	IllegalArgumentException	$ == null
1829	79	8	MannWhitneyUTestImpl.java	ensureDataConformance	THIS	MannWhitneyUTestImpl	0	IllegalArgumentException	x.$.length == 0
1829	79	8	MannWhitneyUTestImpl.java	ensureDataConformance	x	double[]	0	IllegalArgumentException	$.length == 0
1830	84	8	MannWhitneyUTestImpl.java	ensureDataConformance	THIS	MannWhitneyUTestImpl	0	IllegalArgumentException	y.$.length == 0
1830	84	8	MannWhitneyUTestImpl.java	ensureDataConformance	y	double[]	0	IllegalArgumentException	$.length == 0
34121	126	8	MannWhitneyUTestImpl.java	mannWhitneyU	THIS	MannWhitneyUTestImpl	0	NIL-FOR	i < x.$.length
34121	126	8	MannWhitneyUTestImpl.java	mannWhitneyU	i	int	0	NIL-FOR	$ < x.length
34121	126	8	MannWhitneyUTestImpl.java	mannWhitneyU	x	double[]	0	NIL-FOR	i < $.length
0	137	8	MathException.java	getMessage	THIS	MathException	0	RET	$.pattern != null
1956	142	8	MathRuntimeException.java	getMessage	THIS	MathRuntimeException	0	RET	$.pattern != null
350	113	8	MathUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
350	113	8	MathUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
351	146	8	MathUtils.java	addAndCheck	a	long	1	DEF	$ > b
351	146	8	MathUtils.java	addAndCheck	b	long	1	DEF	a > $
352	152	12	MathUtils.java	addAndCheck	a	long	1	MathArithmeticException	$ < 0
353	153	16	MathUtils.java	addAndCheck	b	long	1	MathArithmeticException	$ < 0
354	155	20	MathUtils.java	addAndCheck	a	long	1	DEF	Long.MIN_VALUE - b <= $
354	155	20	MathUtils.java	addAndCheck	b	long	1	DEF	Long.MIN_VALUE - $ <= a
355	169	16	MathUtils.java	addAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE - b
355	169	16	MathUtils.java	addAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE - $
356	206	8	MathUtils.java	binomialCoefficient	n	int	0	RET	$ == k
356	206	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 0
356	206	8	MathUtils.java	binomialCoefficient	k	int	0	RET	n == $
357	209	8	MathUtils.java	binomialCoefficient	n	int	0	RET	k == $ - 1
357	209	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 1
357	209	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == n - 1
358	213	8	MathUtils.java	binomialCoefficient	n	int	0	RET	k > $ / 2
358	213	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ > n / 2
359	223	8	MathUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 61
33083	226	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
33083	226	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
360	230	15	MathUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 66
33084	234	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
33084	234	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
33085	250	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
33085	250	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
361	283	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	$ == k
361	283	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	n == $
361	283	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 0
362	286	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	k == $ - 1
362	286	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 1
362	286	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == n - 1
363	289	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	k > $/2
363	289	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ > n/2
364	292	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	$ < 67
33086	297	8	MathUtils.java	binomialCoefficientDouble	i	int	0	NIL-FOR	$ <= k
33086	297	8	MathUtils.java	binomialCoefficientDouble	k	int	0	NIL-FOR	i <= $
365	324	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ == k
365	324	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 0
365	324	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	n == $
366	327	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	k == $ - 1
366	327	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == n - 1
366	327	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 1
367	335	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 67
368	343	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 1030
369	347	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	k > $ / 2
369	347	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ > n / 2
33087	357	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n
33087	357	8	MathUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $
33088	362	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= k
33088	362	8	MathUtils.java	binomialCoefficientLog	k	int	0	NIL-FOR	i <= $
370	378	8	MathUtils.java	checkBinomial	n	int	0	NumberIsTooLargeException	$ < k
370	378	8	MathUtils.java	checkBinomial	k	int	0	NumberIsTooLargeException	n < $
371	382	8	MathUtils.java	checkBinomial	n	int	0	NotPositiveException	$ < 0
372	398	8	MathUtils.java	compareTo	THIS	MathUtils	1	RET	$.equals(x, y, eps)
372	398	8	MathUtils.java	compareTo	x	double	1	RET	equals($, y, eps)
372	398	8	MathUtils.java	compareTo	y	double	1	RET	equals(x, $, eps)
372	398	8	MathUtils.java	compareTo	eps	double	1	RET	equals(x, y, $)
373	400	15	MathUtils.java	compareTo	x	double	0	RET	$ < y
373	400	15	MathUtils.java	compareTo	y	double	0	RET	x < $
374	424	8	MathUtils.java	compareTo	THIS	MathUtils	1	RET	$.equals(x, y, maxUlps)
374	424	8	MathUtils.java	compareTo	x	double	1	RET	equals($, y, maxUlps)
374	424	8	MathUtils.java	compareTo	y	double	1	RET	equals(x, $, maxUlps)
374	424	8	MathUtils.java	compareTo	maxUlps	int	1	RET	equals(x, y, $)
375	426	15	MathUtils.java	compareTo	x	double	0	RET	$ < y
375	426	15	MathUtils.java	compareTo	y	double	0	RET	x < $
376	520	8	MathUtils.java	equals	xInt	int	0	DEF	$ < 0
377	523	8	MathUtils.java	equals	yInt	int	0	DEF	$ < 0
378	559	8	MathUtils.java	equals	x	float[]	0	RET	$ == null
378	559	8	MathUtils.java	equals	y	float[]	0	RET	$ == null
379	562	8	MathUtils.java	equals	THIS	MathUtils	0	RET	x.$.length != y.$.length
379	562	8	MathUtils.java	equals	x	float[]	0	RET	$.length != y.length
379	562	8	MathUtils.java	equals	y	float[]	0	RET	x.length != $.length
33089	565	8	MathUtils.java	equals	THIS	MathUtils	0	NIL-FOR	i < x.$.length
33089	565	8	MathUtils.java	equals	i	int	0	NIL-FOR	$ < x.length
33089	565	8	MathUtils.java	equals	x	float[]	0	NIL-FOR	i < $.length
380	566	12	MathUtils.java	equals	THIS	MathUtils	0	RET	$.equals(x[i], y[i])
380	566	12	MathUtils.java	equals	i	int	0	RET	equals(x[$], y[$])
380	566	12	MathUtils.java	equals	x	float[]	0	RET	equals($[i], y[i])
380	566	12	MathUtils.java	equals	y	float[]	0	RET	equals(x[i], $[i])
381	585	8	MathUtils.java	equalsIncludingNaN	x	float[]	0	RET	$ == null
381	585	8	MathUtils.java	equalsIncludingNaN	y	float[]	0	RET	$ == null
382	588	8	MathUtils.java	equalsIncludingNaN	THIS	MathUtils	0	RET	x.$.length != y.$.length
382	588	8	MathUtils.java	equalsIncludingNaN	x	float[]	0	RET	$.length != y.length
382	588	8	MathUtils.java	equalsIncludingNaN	y	float[]	0	RET	x.length != $.length
33090	591	8	MathUtils.java	equalsIncludingNaN	THIS	MathUtils	0	NIL-FOR	i < x.$.length
33090	591	8	MathUtils.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
33090	591	8	MathUtils.java	equalsIncludingNaN	x	float[]	0	NIL-FOR	i < $.length
383	592	12	MathUtils.java	equalsIncludingNaN	THIS	MathUtils	0	RET	$.equalsIncludingNaN(x[i], y[i])
383	592	12	MathUtils.java	equalsIncludingNaN	i	int	0	RET	equalsIncludingNaN(x[$], y[$])
383	592	12	MathUtils.java	equalsIncludingNaN	x	float[]	0	RET	equalsIncludingNaN($[i], y[i])
383	592	12	MathUtils.java	equalsIncludingNaN	y	float[]	0	RET	equalsIncludingNaN(x[i], $[i])
384	676	8	MathUtils.java	equals	xInt	long	0	DEF	$ < 0
385	679	8	MathUtils.java	equals	yInt	long	0	DEF	$ < 0
386	715	8	MathUtils.java	equals	x	double[]	0	RET	$ == null
386	715	8	MathUtils.java	equals	y	double[]	0	RET	$ == null
387	718	8	MathUtils.java	equals	THIS	MathUtils	0	RET	x.$.length != y.$.length
387	718	8	MathUtils.java	equals	x	double[]	0	RET	$.length != y.length
387	718	8	MathUtils.java	equals	y	double[]	0	RET	x.length != $.length
33091	721	8	MathUtils.java	equals	THIS	MathUtils	0	NIL-FOR	i < x.$.length
33091	721	8	MathUtils.java	equals	i	int	0	NIL-FOR	$ < x.length
33091	721	8	MathUtils.java	equals	x	double[]	0	NIL-FOR	i < $.length
388	722	12	MathUtils.java	equals	THIS	MathUtils	0	RET	$.equals(x[i], y[i])
388	722	12	MathUtils.java	equals	i	int	0	RET	equals(x[$], y[$])
388	722	12	MathUtils.java	equals	x	double[]	0	RET	equals($[i], y[i])
388	722	12	MathUtils.java	equals	y	double[]	0	RET	equals(x[i], $[i])
389	741	8	MathUtils.java	equalsIncludingNaN	x	double[]	0	RET	$ == null
389	741	8	MathUtils.java	equalsIncludingNaN	y	double[]	0	RET	$ == null
390	744	8	MathUtils.java	equalsIncludingNaN	THIS	MathUtils	0	RET	x.$.length != y.$.length
390	744	8	MathUtils.java	equalsIncludingNaN	x	double[]	0	RET	$.length != y.length
390	744	8	MathUtils.java	equalsIncludingNaN	y	double[]	0	RET	x.length != $.length
33092	747	8	MathUtils.java	equalsIncludingNaN	THIS	MathUtils	0	NIL-FOR	i < x.$.length
33092	747	8	MathUtils.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
33092	747	8	MathUtils.java	equalsIncludingNaN	x	double[]	0	NIL-FOR	i < $.length
391	748	12	MathUtils.java	equalsIncludingNaN	THIS	MathUtils	0	RET	$.equalsIncludingNaN(x[i], y[i])
391	748	12	MathUtils.java	equalsIncludingNaN	i	int	0	RET	equalsIncludingNaN(x[$], y[$])
391	748	12	MathUtils.java	equalsIncludingNaN	x	double[]	0	RET	equalsIncludingNaN($[i], y[i])
391	748	12	MathUtils.java	equalsIncludingNaN	y	double[]	0	RET	equalsIncludingNaN(x[i], $[i])
392	780	8	MathUtils.java	factorial	n	int	0	NotPositiveException	$ < 0
393	784	8	MathUtils.java	factorial	n	int	0	MathArithmeticException	$ > 20
394	804	8	MathUtils.java	factorialDouble	n	int	0	NotPositiveException	$ < 0
395	808	8	MathUtils.java	factorialDouble	n	int	0	RET	$ < 21
396	822	8	MathUtils.java	factorialLog	n	int	0	NotPositiveException	$ < 0
397	826	8	MathUtils.java	factorialLog	n	int	0	RET	$ < 21
33093	830	8	MathUtils.java	factorialLog	i	int	0	NIL-FOR	$ <= n
33093	830	8	MathUtils.java	factorialLog	n	int	0	NIL-FOR	i <= $
398	868	8	MathUtils.java	gcd	u	int	0	MathArithmeticException:RET	$ == 0
398	868	8	MathUtils.java	gcd	v	int	0	MathArithmeticException:RET	$ == 0
399	869	12	MathUtils.java	gcd	u	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
399	869	12	MathUtils.java	gcd	v	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
400	880	8	MathUtils.java	gcd	u	int	0	DEF	$ > 0
401	883	8	MathUtils.java	gcd	v	int	0	DEF	$ > 0
33094	888	8	MathUtils.java	gcd	u	int	0	NIL-WHILE	($ & 1) == 0
33094	888	8	MathUtils.java	gcd	v	int	0	NIL-WHILE	($ & 1) == 0
33094	888	8	MathUtils.java	gcd	k	int	0	NIL-WHILE	$ < 31
402	894	8	MathUtils.java	gcd	k	int	0	MathArithmeticException	$ == 31
33095	903	8	MathUtils.java	gcd	t	int	0	NIL-DOWHILE	$ != 0
33096	906	12	MathUtils.java	gcd	t	int	0	NIL-WHILE	($ & 1) == 0
403	910	12	MathUtils.java	gcd	t	int	1	DEF	$ > 0
404	955	8	MathUtils.java	gcd	u	long	0	MathArithmeticException:RET	$ == 0
404	955	8	MathUtils.java	gcd	v	long	0	MathArithmeticException:RET	$ == 0
405	956	12	MathUtils.java	gcd	u	long	0	MathArithmeticException	$ == Long.MIN_VALUE
405	956	12	MathUtils.java	gcd	v	long	0	MathArithmeticException	$ == Long.MIN_VALUE
406	967	8	MathUtils.java	gcd	u	long	0	DEF	$ > 0
407	970	8	MathUtils.java	gcd	v	long	0	DEF	$ > 0
33097	975	8	MathUtils.java	gcd	u	long	0	NIL-WHILE	($ & 1) == 0
33097	975	8	MathUtils.java	gcd	v	long	0	NIL-WHILE	($ & 1) == 0
33097	975	8	MathUtils.java	gcd	k	int	0	NIL-WHILE	$ < 63
408	981	8	MathUtils.java	gcd	k	int	0	MathArithmeticException	$ == 63
33098	990	8	MathUtils.java	gcd	t	long	0	NIL-DOWHILE	$ != 0
33099	993	12	MathUtils.java	gcd	t	long	0	NIL-WHILE	($ & 1) == 0
409	997	12	MathUtils.java	gcd	t	long	1	DEF	$ > 0
410	1051	8	MathUtils.java	indicator	x	double	0	RET	Double.isNaN($)
411	1065	8	MathUtils.java	indicator	x	float	0	RET	Float.isNaN($)
412	1125	8	MathUtils.java	lcm	a	int	0	RET	$ == 0
412	1125	8	MathUtils.java	lcm	b	int	0	RET	$ == 0
413	1129	8	MathUtils.java	lcm	lcm	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
414	1159	8	MathUtils.java	lcm	a	long	0	RET	$ == 0
414	1159	8	MathUtils.java	lcm	b	long	0	RET	$ == 0
415	1163	8	MathUtils.java	lcm	lcm	long	0	MathArithmeticException	$ == Long.MIN_VALUE
416	1202	8	MathUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
416	1202	8	MathUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
417	1220	8	MathUtils.java	mulAndCheck	a	long	1	DEF	$ > b
417	1220	8	MathUtils.java	mulAndCheck	b	long	1	DEF	a > $
418	1224	12	MathUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ < 0
419	1225	16	MathUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ < 0
420	1227	20	MathUtils.java	mulAndCheck	a	long	1	DEF	$ >= Long.MAX_VALUE / b
420	1227	20	MathUtils.java	mulAndCheck	b	long	1	DEF	a >= Long.MAX_VALUE / $
421	1232	23	MathUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ > 0
422	1234	20	MathUtils.java	mulAndCheck	a	long	1	DEF	Long.MIN_VALUE / b <= $
422	1234	20	MathUtils.java	mulAndCheck	b	long	1	DEF	Long.MIN_VALUE / $ <= a
423	1244	19	MathUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ > 0
424	1249	16	MathUtils.java	mulAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE / b
424	1249	16	MathUtils.java	mulAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE / $
425	1330	9	MathUtils.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isInfinite($)
426	1333	9	MathUtils.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isNaN($)
33100	1339	9	MathUtils.java	normalizeArray	i	int	0	NIL-FOR	$ < len
33100	1339	9	MathUtils.java	normalizeArray	len	int	0	NIL-FOR	i < $
427	1340	13	MathUtils.java	normalizeArray	i	int	0	MathIllegalArgumentException	Double.isInfinite(values[$])
427	1340	13	MathUtils.java	normalizeArray	values	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
428	1343	13	MathUtils.java	normalizeArray	i	int	0	DEF	Double.isNaN(values[$])
428	1343	13	MathUtils.java	normalizeArray	values	double[]	0	DEF	Double.isNaN($[i])
429	1347	9	MathUtils.java	normalizeArray	sum	double	0	MathArithmeticException	$ == 0
33101	1350	9	MathUtils.java	normalizeArray	i	int	0	NIL-FOR	$ < len
33101	1350	9	MathUtils.java	normalizeArray	len	int	0	NIL-FOR	i < $
430	1351	13	MathUtils.java	normalizeArray	i	int	1	DEF	Double.isNaN(values[$])
430	1351	13	MathUtils.java	normalizeArray	values	double[]	1	DEF	Double.isNaN($[i])
431	1399	12	MathUtils.java	round	x	double	1	RET	Double.isInfinite($)
432	1455	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
433	1465	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
434	1474	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
435	1483	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
436	1485	19	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ < 0.5
437	1489	16	MathUtils.java	roundUnscaled	unscaled	double	1	DEF	FastMath.floor($) / 2.0 == FastMath.floor(Math .floor($) / 2.0)
438	1501	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ >= 0.5
439	1509	12	MathUtils.java	roundUnscaled	unscaled	double	0	MathArithmeticException	$ != FastMath.floor($)
440	1558	8	MathUtils.java	sign	x	double	0	RET	Double.isNaN($)
441	1576	8	MathUtils.java	sign	x	float	0	RET	Float.isNaN($)
442	1644	8	MathUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
442	1644	8	MathUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
443	1662	8	MathUtils.java	subAndCheck	b	long	1	MathArithmeticException	$ == Long.MIN_VALUE
444	1663	12	MathUtils.java	subAndCheck	a	long	1	DEF	$ < 0
445	1684	8	MathUtils.java	pow	e	int	0	NotPositiveException	$ < 0
33102	1690	8	MathUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
446	1691	12	MathUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
447	1710	8	MathUtils.java	pow	e	long	0	NotPositiveException	$ < 0
33103	1716	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
448	1717	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
449	1736	8	MathUtils.java	pow	e	int	0	NotPositiveException	$ < 0
33104	1742	8	MathUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
450	1743	12	MathUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
451	1762	8	MathUtils.java	pow	e	long	0	NotPositiveException	$ < 0
33105	1768	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
452	1769	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
453	1788	8	MathUtils.java	pow	e	int	0	NotPositiveException	$ < 0
454	1804	8	MathUtils.java	pow	e	long	0	NotPositiveException	$ < 0
33106	1810	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
455	1811	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
456	1831	8	MathUtils.java	pow	e	BigInteger	0	NotPositiveException	$.compareTo(BigInteger.ZERO) < 0
33107	1837	8	MathUtils.java	pow	e	BigInteger	0	NIL-WHILE	BigInteger.ZERO.equals($)
457	1838	12	MathUtils.java	pow	e	BigInteger	0	DEF	$.testBit(0)
33108	1857	8	MathUtils.java	distance1	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
33108	1857	8	MathUtils.java	distance1	i	int	0	NIL-FOR	$ < p1.length
33108	1857	8	MathUtils.java	distance1	p1	double[]	0	NIL-FOR	i < $.length
33109	1872	6	MathUtils.java	distance1	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
33109	1872	6	MathUtils.java	distance1	i	int	0	NIL-FOR	$ < p1.length
33109	1872	6	MathUtils.java	distance1	p1	int[]	0	NIL-FOR	i < $.length
33110	1887	8	MathUtils.java	distance	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
33110	1887	8	MathUtils.java	distance	i	int	0	NIL-FOR	$ < p1.length
33110	1887	8	MathUtils.java	distance	p1	double[]	0	NIL-FOR	i < $.length
33111	1903	6	MathUtils.java	distance	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
33111	1903	6	MathUtils.java	distance	i	int	0	NIL-FOR	$ < p1.length
33111	1903	6	MathUtils.java	distance	p1	int[]	0	NIL-FOR	i < $.length
33112	1919	8	MathUtils.java	distanceInf	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
33112	1919	8	MathUtils.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
33112	1919	8	MathUtils.java	distanceInf	p1	double[]	0	NIL-FOR	i < $.length
33113	1934	8	MathUtils.java	distanceInf	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
33113	1934	8	MathUtils.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
33113	1934	8	MathUtils.java	distanceInf	p1	int[]	0	NIL-FOR	i < $.length
33114	1967	8	MathUtils.java	checkOrder	i	int	0	NIL-FOR	$ < max
33114	1967	8	MathUtils.java	checkOrder	max	int	0	NIL-FOR	i < $
458	1970	16	MathUtils.java	checkOrder	strict	boolean	1	DEF	$
459	1971	20	MathUtils.java	checkOrder	i	int	0	DEF	val[$] <= previous
459	1971	20	MathUtils.java	checkOrder	previous	double	0	DEF	val[i] <= $
459	1971	20	MathUtils.java	checkOrder	val	double[]	0	DEF	$[i] <= previous
460	1975	20	MathUtils.java	checkOrder	i	int	0	DEF	val[$] < previous
460	1975	20	MathUtils.java	checkOrder	previous	double	0	DEF	val[i] < $
460	1975	20	MathUtils.java	checkOrder	val	double[]	0	DEF	$[i] < previous
461	1981	16	MathUtils.java	checkOrder	strict	boolean	1	DEF	$
462	1982	20	MathUtils.java	checkOrder	i	int	0	DEF	val[$] >= previous
462	1982	20	MathUtils.java	checkOrder	previous	double	0	DEF	val[i] >= $
462	1982	20	MathUtils.java	checkOrder	val	double[]	0	DEF	$[i] >= previous
463	1986	20	MathUtils.java	checkOrder	i	int	0	DEF	val[$] > previous
463	1986	20	MathUtils.java	checkOrder	previous	double	0	DEF	val[i] > $
463	1986	20	MathUtils.java	checkOrder	val	double[]	0	DEF	$[i] > previous
464	1996	12	MathUtils.java	checkOrder	ok	boolean	0	NonMonotonousSequenceException	$
464	1996	12	MathUtils.java	checkOrder	abort	boolean	0	NonMonotonousSequenceException	$
465	2039	8	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
465	2039	8	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
33115	2052	8	MathUtils.java	checkFinite	THIS	MathUtils	0	NIL-FOR	i < val.$.length
33115	2052	8	MathUtils.java	checkFinite	i	int	0	NIL-FOR	$ < val.length
33115	2052	8	MathUtils.java	checkFinite	val	double[]	0	NIL-FOR	i < $.length
466	2054	12	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
466	2054	12	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
33116	2130	8	MathUtils.java	safeNorm	THIS	MathUtils	0	NIL-FOR	i < v.$.length
33116	2130	8	MathUtils.java	safeNorm	i	int	0	NIL-FOR	$ < v.length
33116	2130	8	MathUtils.java	safeNorm	v	double[]	0	NIL-FOR	i < $.length
467	2132	12	MathUtils.java	safeNorm	xabs	double	1	DEF	$ > agiant
467	2132	12	MathUtils.java	safeNorm	xabs	double	1	DEF	$ < rdwarf
467	2132	12	MathUtils.java	safeNorm	rdwarf	double	1	DEF	xabs < $
467	2132	12	MathUtils.java	safeNorm	agiant	double	1	DEF	xabs > $
468	2133	16	MathUtils.java	safeNorm	xabs	double	1	DEF	$ > rdwarf
468	2133	16	MathUtils.java	safeNorm	rdwarf	double	1	DEF	xabs > $
469	2134	20	MathUtils.java	safeNorm	xabs	double	1	DEF	$ > x1max
469	2134	20	MathUtils.java	safeNorm	x1max	double	1	DEF	xabs > $
470	2143	20	MathUtils.java	safeNorm	xabs	double	1	DEF	$ > x3max
470	2143	20	MathUtils.java	safeNorm	x3max	double	1	DEF	xabs > $
471	2148	24	MathUtils.java	safeNorm	xabs	double	0	DEF	$ != 0
472	2159	8	MathUtils.java	safeNorm	s1	double	1	DEF	$ != 0
473	2162	12	MathUtils.java	safeNorm	s2	double	1	DEF	$ == 0
474	2165	16	MathUtils.java	safeNorm	s2	double	1	DEF	$ >= x3max
474	2165	16	MathUtils.java	safeNorm	x3max	double	1	DEF	s2 >= $
475	2203	8	MathUtils.java	sortInPlace	x	double[]	0	NullArgumentException	$ == null
475	2203	8	MathUtils.java	sortInPlace	yList	double[]	0	NullArgumentException	$ == null
33117	2213	8	MathUtils.java	sortInPlace	i	int	0	NIL-FOR	$ < len
33117	2213	8	MathUtils.java	sortInPlace	len	int	0	NIL-FOR	i < $
33118	2215	12	MathUtils.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
33118	2215	12	MathUtils.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
476	2217	16	MathUtils.java	sortInPlace	THIS	MathUtils	0	DimensionMismatchException	y.$.length != len
476	2217	16	MathUtils.java	sortInPlace	y	double[]	0	DimensionMismatchException	$.length != len
476	2217	16	MathUtils.java	sortInPlace	len	int	0	DimensionMismatchException	y.length != $
33119	2247	8	MathUtils.java	sortInPlace	i	int	0	NIL-FOR	$ < len
33119	2247	8	MathUtils.java	sortInPlace	len	int	0	NIL-FOR	i < $
33120	2251	12	MathUtils.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
33120	2251	12	MathUtils.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
477	2318	8	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
478	2331	8	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
1245	112	8	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$[0] == null
1245	112	8	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$ == null
1246	140	8	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$[0] == null
1246	140	8	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$ == null
33601	158	8	MatrixUtils.java	createRealIdentityMatrix	i	int	0	NIL-FOR	$ < dimension
33601	158	8	MatrixUtils.java	createRealIdentityMatrix	dimension	int	0	NIL-FOR	i < $
33602	180	8	MatrixUtils.java	createFieldIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
33602	180	8	MatrixUtils.java	createFieldIdentityMatrix	dimension	int	0	NIL-FOR	row < $
33603	198	8	MatrixUtils.java	createRealDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
33603	198	8	MatrixUtils.java	createRealDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
33603	198	8	MatrixUtils.java	createRealDiagonalMatrix	diagonal	double[]	0	NIL-FOR	i < $.length
33604	217	8	MatrixUtils.java	createFieldDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
33604	217	8	MatrixUtils.java	createFieldDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
33604	217	8	MatrixUtils.java	createFieldDiagonalMatrix	diagonal	T[]	0	NIL-FOR	i < $.length
1247	232	8	MatrixUtils.java	createRealVector	data	double[]	0	NullArgumentException	$ == null
1248	249	8	MatrixUtils.java	createFieldVector	data	T[]	0	NullArgumentException	$ == null
1249	252	8	MatrixUtils.java	createFieldVector	THIS	MatrixUtils	0	ZeroException	data.$.length == 0
1249	252	8	MatrixUtils.java	createFieldVector	data	T[]	0	ZeroException	$.length == 0
1250	268	8	MatrixUtils.java	createRowRealMatrix	rowData	double[]	0	NullArgumentException	$ == null
33605	273	8	MatrixUtils.java	createRowRealMatrix	i	int	0	NIL-FOR	$ < nCols
33605	273	8	MatrixUtils.java	createRowRealMatrix	nCols	int	0	NIL-FOR	i < $
1251	291	8	MatrixUtils.java	createRowFieldMatrix	rowData	T[]	0	NullArgumentException	$ == null
1252	295	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
33606	299	8	MatrixUtils.java	createRowFieldMatrix	i	int	0	NIL-FOR	$ < nCols
33606	299	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NIL-FOR	i < $
1253	315	8	MatrixUtils.java	createColumnRealMatrix	columnData	double[]	0	NullArgumentException	$ == null
33607	320	8	MatrixUtils.java	createColumnRealMatrix	i	int	0	NIL-FOR	$ < nRows
33607	320	8	MatrixUtils.java	createColumnRealMatrix	nRows	int	0	NIL-FOR	i < $
1254	338	8	MatrixUtils.java	createColumnFieldMatrix	columnData	T[]	0	NullArgumentException	$ == null
1255	342	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NoDataException	$ == 0
33608	346	8	MatrixUtils.java	createColumnFieldMatrix	i	int	0	NIL-FOR	$ < nRows
33608	346	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NIL-FOR	i < $
1256	375	8	MatrixUtils.java	checkRowIndex	m	AnyMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1256	375	8	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= m.getRowDimension()
1256	375	8	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1257	390	8	MatrixUtils.java	checkColumnIndex	m	AnyMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1257	390	8	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1257	390	8	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= m.getColumnDimension()
1258	414	8	MatrixUtils.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1258	414	8	MatrixUtils.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1259	421	8	MatrixUtils.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1259	421	8	MatrixUtils.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1260	445	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1261	448	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1262	451	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedRows.$.length == 0
1262	451	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1263	454	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedColumns.$.length == 0
1263	454	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1264	474	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1264	474	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1264	474	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1264	474	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1265	489	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1265	489	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1265	489	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1265	489	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1266	504	8	MatrixUtils.java	checkMultiplicationCompatible	left	AnyMatrix	0	DimensionMismatchException	$.getColumnDimension() != right.getRowDimension()
1266	504	8	MatrixUtils.java	checkMultiplicationCompatible	right	AnyMatrix	0	DimensionMismatchException	left.getColumnDimension() != $.getRowDimension()
33609	643	8	MatrixUtils.java	serializeRealVector	i	int	0	NIL-FOR	$ < n
33609	643	8	MatrixUtils.java	serializeRealVector	n	int	0	NIL-FOR	i < $
33610	674	12	MatrixUtils.java	deserializeRealVector	i	int	0	NIL-FOR	$ < n
33610	674	12	MatrixUtils.java	deserializeRealVector	n	int	0	NIL-FOR	i < $
33611	746	8	MatrixUtils.java	serializeRealMatrix	i	int	0	NIL-FOR	$ < n
33611	746	8	MatrixUtils.java	serializeRealMatrix	n	int	0	NIL-FOR	i < $
33612	747	12	MatrixUtils.java	serializeRealMatrix	j	int	0	NIL-FOR	$ < m
33612	747	12	MatrixUtils.java	serializeRealMatrix	m	int	0	NIL-FOR	j < $
33613	780	12	MatrixUtils.java	deserializeRealMatrix	i	int	0	NIL-FOR	$ < n
33613	780	12	MatrixUtils.java	deserializeRealMatrix	n	int	0	NIL-FOR	i < $
33614	782	16	MatrixUtils.java	deserializeRealMatrix	j	int	0	NIL-FOR	$ < m
33614	782	16	MatrixUtils.java	deserializeRealMatrix	m	int	0	NIL-FOR	j < $
1751	76	8	Max.java	increment	THIS	Max	0	DEF	d > $.value
1751	76	8	Max.java	increment	THIS	Max	0	DEF	Double.isNaN($.value)
1751	76	8	Max.java	increment	d	double	0	DEF	$ > value
1752	131	8	Max.java	evaluate	THIS	Max	0	DEF	$.test(values, begin, length)
1752	131	8	Max.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1752	131	8	Max.java	evaluate	begin	int	0	DEF	test(values, $, length)
1752	131	8	Max.java	evaluate	length	int	0	DEF	test(values, begin, $)
34093	133	12	Max.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
34093	133	12	Max.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
34093	133	12	Max.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1753	134	16	Max.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
1753	134	16	Max.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
1680	109	8	Mean.java	increment	THIS	Mean	0	DEF	$.incMoment
1681	119	8	Mean.java	clear	THIS	Mean	0	DEF	$.incMoment
1682	157	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, begin, length)
1682	157	8	Mean.java	evaluate	values	double[]	0	RET	test($, begin, length)
1682	157	8	Mean.java	evaluate	begin	int	0	RET	test(values, $, length)
1682	157	8	Mean.java	evaluate	length	int	0	RET	test(values, begin, $)
34079	166	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
34079	166	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
34079	166	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1683	205	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, weights, begin, length)
1683	205	8	Mean.java	evaluate	values	double[]	0	RET	test($, weights, begin, length)
1683	205	8	Mean.java	evaluate	weights	double[]	0	RET	test(values, $, begin, length)
1683	205	8	Mean.java	evaluate	begin	int	0	RET	test(values, weights, $, length)
1683	205	8	Mean.java	evaluate	length	int	0	RET	test(values, weights, begin, $)
34080	214	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
34080	214	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
34080	214	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
34203	146	8	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	NIL-FOR	$.mti < N
2009	163	8	MersenneTwister.java	setSeed	seed	int[]	0	RET	$ == null
34204	172	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
2010	178	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
2011	182	12	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	DEF	j >= seed.$.length
2011	182	12	MersenneTwister.java	setSeed	j	int	0	DEF	$ >= seed.length
2011	182	12	MersenneTwister.java	setSeed	seed	int[]	0	DEF	j >= $.length
34205	187	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
2012	193	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
2013	227	8	MersenneTwister.java	next	THIS	MersenneTwister	0	DEF	$.mti >= N
34206	229	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - M
34207	235	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - 1
2600	151	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$ == null
2600	151	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	NullArgumentException	$ == null
2601	155	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NoDataException	xval.$.length == 0
2601	155	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NoDataException	$.length == 0
2602	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xval.$.length != yval.$.length
2602	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	DimensionMismatchException	$.length != yval.length
2602	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	DimensionMismatchException	xval.length != $.length
2603	161	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$[0] == null
34473	170	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NIL-FOR	i < xval.$.length
34473	170	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < xval.length
34473	170	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NIL-FOR	i < $.length
2604	172	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	NullArgumentException	$ == null
2605	175	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xvalI.$.length != $.dimension
2605	175	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	DimensionMismatchException	$.length != dimension
34474	185	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < microsphereElements
34474	185	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	microsphereElements	int	0	NIL-FOR	i < $
2606	209	12	MicrosphereInterpolatingFunction.java	value	diffNorm	double	0	RET	FastMath.abs($) < FastMath.ulp(1d)
2607	228	12	MicrosphereInterpolatingFunction.java	value	sd	Entry<RealVector,Double>	0	DEF	$ != null
2634	72	8	MicrosphereInterpolator.java	MicrosphereInterpolator	exponent	int	0	NotPositiveException	$ < 0
2635	75	8	MicrosphereInterpolator.java	MicrosphereInterpolator	elements	int	0	NotStrictlyPositiveException	$ <= 0
34357	91	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
34357	91	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1748	76	8	Min.java	increment	THIS	Min	0	DEF	Double.isNaN($.value)
1748	76	8	Min.java	increment	THIS	Min	0	DEF	d < $.value
1748	76	8	Min.java	increment	d	double	0	DEF	$ < value
1749	131	8	Min.java	evaluate	THIS	Min	0	DEF	$.test(values, begin, length)
1749	131	8	Min.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1749	131	8	Min.java	evaluate	begin	int	0	DEF	test(values, $, length)
1749	131	8	Min.java	evaluate	length	int	0	DEF	test(values, begin, $)
34092	133	12	Min.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
34092	133	12	Min.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
34092	133	12	Min.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1750	134	16	Min.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
1750	134	16	Min.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
2695	93	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMin) < $
2695	93	8	MullerSolver.java	doSolve	fMin	double	0	RET	FastMath.abs($) < functionValueAccuracy
2696	97	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMax) < $
2696	97	8	MullerSolver.java	doSolve	fMax	double	0	RET	FastMath.abs($) < functionValueAccuracy
2697	101	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fInitial) < $
2697	101	8	MullerSolver.java	doSolve	fInitial	double	0	RET	FastMath.abs($) < functionValueAccuracy
2698	107	8	MullerSolver.java	doSolve	THIS	MullerSolver	1	RET	$.isBracketing(min, initial)
2698	107	8	MullerSolver.java	doSolve	min	double	1	RET	isBracketing($, initial)
2698	107	8	MullerSolver.java	doSolve	initial	double	1	RET	isBracketing(min, $)
2699	161	12	MullerSolver.java	solve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
2699	161	12	MullerSolver.java	solve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
2699	161	12	MullerSolver.java	solve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
2699	161	12	MullerSolver.java	solve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
2699	161	12	MullerSolver.java	solve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
2700	174	12	MullerSolver.java	solve	bisect	boolean	1	DEF	$
2701	184	16	MullerSolver.java	solve	ym	double	1	DEF	MathUtils.sign(y0) + MathUtils.sign($) == 0.0
2701	184	16	MullerSolver.java	solve	y0	double	1	DEF	MathUtils.sign($) + MathUtils.sign(ym) == 0.0
2689	98	8	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y0) < $
2689	98	8	MullerSolver2.java	doSolve	y0	double	0	RET	FastMath.abs($) < functionValueAccuracy
2690	103	8	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y1) < $
2690	103	8	MullerSolver2.java	doSolve	y1	double	0	RET	FastMath.abs($) < functionValueAccuracy
2691	107	8	MullerSolver2.java	doSolve	y0	double	0	NoBracketingException	$ * y1 > 0
2691	107	8	MullerSolver2.java	doSolve	y1	double	0	NoBracketingException	y0 * $ > 0
2692	124	12	MullerSolver2.java	doSolve	delta	double	1	DEF	$ >= 0.0
2693	133	12	MullerSolver2.java	doSolve	denominator	double	1	DEF	$ != 0
34535	137	16	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x1
34535	137	16	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x2
34535	137	16	MullerSolver2.java	doSolve	x1	double	0	NIL-WHILE	x == $
34535	137	16	MullerSolver2.java	doSolve	x2	double	0	NIL-WHILE	x == $
2694	149	12	MullerSolver2.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
2694	149	12	MullerSolver2.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
2694	149	12	MullerSolver2.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
2694	149	12	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
2694	149	12	MullerSolver2.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
1561	166	8	MultiDirectionalSimplex.java	iterate	best	RealPointValuePair	0	RET	comparator.compare(reflected, $) < 0
1561	166	8	MultiDirectionalSimplex.java	iterate	reflected	RealPointValuePair	0	RET	comparator.compare($, best) < 0
1561	166	8	MultiDirectionalSimplex.java	iterate	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(reflected, best) < 0
1562	171	12	MultiDirectionalSimplex.java	iterate	expanded	RealPointValuePair	0	DEF	comparator.compare(reflected, $) <= 0
1562	171	12	MultiDirectionalSimplex.java	iterate	reflected	RealPointValuePair	0	DEF	comparator.compare($, expanded) <= 0
1562	171	12	MultiDirectionalSimplex.java	iterate	comparator	Comparator<RealPointValuePair>	0	DEF	$.compare(reflected, expanded) <= 0
33995	207	8	MultiDirectionalSimplex.java	evaluateNewSimplex	THIS	MultiDirectionalSimplex	0	NIL-FOR	i < $.getSize()
33995	207	8	MultiDirectionalSimplex.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ < getSize()
33996	210	12	MultiDirectionalSimplex.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < dim
33996	210	12	MultiDirectionalSimplex.java	evaluateNewSimplex	dim	int	0	NIL-FOR	j < $
1427	76	8	MultiStartUnivariateRealOptimizer.java	MultiStartUnivariateRealOptimizer	optimizer	BaseUnivariateRealOptimizer<FUNC>	0	NullArgumentException	$ == null
1427	76	8	MultiStartUnivariateRealOptimizer.java	MultiStartUnivariateRealOptimizer	generator	RandomGenerator	0	NullArgumentException	$ == null
1428	80	8	MultiStartUnivariateRealOptimizer.java	MultiStartUnivariateRealOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1429	141	8	MultiStartUnivariateRealOptimizer.java	getOptima	THIS	MultiStartUnivariateRealOptimizer	0	MathIllegalStateException	$.optima == null
33888	164	8	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	NIL-FOR	i < $.starts
33888	164	8	MultiStartUnivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1430	178	8	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	DEF	$.optima[0] == null
33056	173	8	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
33056	173	8	MultidimensionalCounter.java	MultidimensionalCounter	i	int	0	NIL-FOR	$ < last
33057	175	12	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	j < $.dimension
33057	175	12	MultidimensionalCounter.java	MultidimensionalCounter	j	int	0	NIL-FOR	$ < dimension
27	183	8	MultidimensionalCounter.java	MultidimensionalCounter	tS	int	0	NotStrictlyPositiveException	$ <= 0
28	217	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.totalSize
28	217	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ < 0
28	217	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ >= totalSize
33058	225	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
33058	225	8	MultidimensionalCounter.java	getCounts	i	int	0	NIL-FOR	$ < last
33059	228	12	MultidimensionalCounter.java	getCounts	count	int	0	NIL-WHILE	$ <= index
33059	228	12	MultidimensionalCounter.java	getCounts	index	int	0	NIL-WHILE	count <= $
29	254	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	DimensionMismatchException	c.$.length != $.dimension
29	254	8	MultidimensionalCounter.java	getCount	c	int	0	DimensionMismatchException	$.length != dimension
33060	258	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
33060	258	8	MultidimensionalCounter.java	getCount	i	int	0	NIL-FOR	$ < dimension
30	260	12	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.size[i]
30	260	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ >= size[i]
30	260	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ < 0
30	260	12	MultidimensionalCounter.java	getCount	i	int	0	OutOfRangeException	index >= size[$]
33061	292	8	MultidimensionalCounter.java	toString	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
33061	292	8	MultidimensionalCounter.java	toString	i	int	0	NIL-FOR	$ < dimension
2264	116	8	MultistepIntegrator.java	MultistepIntegrator	nSteps	int	0	DEF	$ <= 1
34063	124	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	i	int	0	NIL-FOR	$ < k
34063	124	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	k	int	0	NIL-FOR	i < $
34064	148	8	MultivariateSummaryStatistics.java	addValue	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
34064	148	8	MultivariateSummaryStatistics.java	addValue	i	int	0	NIL-FOR	$ < k
34065	185	8	MultivariateSummaryStatistics.java	getResults	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < results.$.length
34065	185	8	MultivariateSummaryStatistics.java	getResults	i	int	0	NIL-FOR	$ < results.length
34065	185	8	MultivariateSummaryStatistics.java	getResults	results	double[]	0	NIL-FOR	i < $.length
1641	244	8	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 1
1642	246	15	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 2
34066	250	12	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
34066	250	12	MultivariateSummaryStatistics.java	getStandardDeviation	i	int	0	NIL-FOR	$ < k
34067	334	8	MultivariateSummaryStatistics.java	append	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < data.$.length
34067	334	8	MultivariateSummaryStatistics.java	append	i	int	0	NIL-FOR	$ < data.length
34067	334	8	MultivariateSummaryStatistics.java	append	data	double[]	0	NIL-FOR	i < $.length
1643	335	12	MultivariateSummaryStatistics.java	append	i	int	0	DEF	$ > 0
34068	348	8	MultivariateSummaryStatistics.java	clear	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
34068	348	8	MultivariateSummaryStatistics.java	clear	i	int	0	NIL-FOR	$ < k
1644	368	8	MultivariateSummaryStatistics.java	equals	THIS	MultivariateSummaryStatistics	0	RET	object == $
1644	368	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ == this
1645	371	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ instanceof MultivariateSummaryStatistics == false
1646	609	8	MultivariateSummaryStatistics.java	checkEmpty	THIS	MultivariateSummaryStatistics	0	DEF	$.n > 0
1647	622	8	MultivariateSummaryStatistics.java	checkDimension	THIS	MultivariateSummaryStatistics	0	DimensionMismatchException	dimension != $.k
1647	622	8	MultivariateSummaryStatistics.java	checkDimension	dimension	int	0	DimensionMismatchException	$ != k
34148	194	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < data.$.length
34148	194	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < data.length
34148	194	8	NaturalRanking.java	rank	data	double[]	0	NIL-FOR	i < $.length
34149	227	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
34149	227	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < ranks.length
34149	227	8	NaturalRanking.java	rank	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1874	228	12	NaturalRanking.java	rank	i	int	1	DEF	Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
1874	228	12	NaturalRanking.java	rank	ranks	IntDoublePair[]	1	DEF	Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
1875	231	16	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
1876	242	8	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
1877	245	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	DEF	$.nanStrategy == $.NaNStrategy.FIXED
1878	259	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	RET	$.containsNaNs(ranks)
1878	259	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	RET	containsNaNs($)
34150	264	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
34150	264	8	NaturalRanking.java	removeNaNs	i	int	0	NIL-FOR	$ < ranks.length
34150	264	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1879	265	12	NaturalRanking.java	removeNaNs	i	int	1	DEF	Double.isNaN(ranks[$].getValue())
1879	265	12	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	1	DEF	Double.isNaN($[i].getValue())
34151	267	16	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	k < ranks.$.length
34151	267	16	NaturalRanking.java	removeNaNs	k	int	0	NIL-FOR	$ < ranks.length
34151	267	16	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	k < $.length
34152	289	8	NaturalRanking.java	recodeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
34152	289	8	NaturalRanking.java	recodeNaNs	i	int	0	NIL-FOR	$ < ranks.length
34152	289	8	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1880	290	12	NaturalRanking.java	recodeNaNs	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
1880	290	12	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
34153	304	8	NaturalRanking.java	containsNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
34153	304	8	NaturalRanking.java	containsNaNs	i	int	0	NIL-FOR	$ < ranks.length
34153	304	8	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1881	305	12	NaturalRanking.java	containsNaNs	i	int	0	RET	Double.isNaN(ranks[$].getValue())
1881	305	12	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	RET	Double.isNaN($[i].getValue())
34154	347	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
34155	357	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
34156	375	8	NaturalRanking.java	fill	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
1882	387	8	NaturalRanking.java	restoreNaNs	nanPositions	List<Integer>	0	RET	$.size() == 0
34157	391	8	NaturalRanking.java	restoreNaNs	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
34158	405	8	NaturalRanking.java	getNanPositions	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
34158	405	8	NaturalRanking.java	getNanPositions	i	int	0	NIL-FOR	$ < ranks.length
34158	405	8	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1883	406	12	NaturalRanking.java	getNanPositions	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
1883	406	12	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
34051	203	8	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ < n
34051	203	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i < $
34052	205	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
34052	205	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
34053	210	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
34053	210	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
34054	216	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
34054	216	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
1627	222	8	NelderMeadSimplex.java	iterate	best	RealPointValuePair	1	DEF	comparator.compare($, reflected) <= 0
1627	222	8	NelderMeadSimplex.java	iterate	secondBest	RealPointValuePair	1	DEF	comparator.compare(reflected, $) < 0
1627	222	8	NelderMeadSimplex.java	iterate	reflected	RealPointValuePair	1	DEF	comparator.compare($, secondBest) < 0
1627	222	8	NelderMeadSimplex.java	iterate	reflected	RealPointValuePair	1	DEF	comparator.compare(best, $) <= 0
1627	222	8	NelderMeadSimplex.java	iterate	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(reflected, secondBest) < 0
1627	222	8	NelderMeadSimplex.java	iterate	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(best, reflected) <= 0
1628	226	15	NelderMeadSimplex.java	iterate	best	RealPointValuePair	1	DEF	comparator.compare(reflected, $) < 0
1628	226	15	NelderMeadSimplex.java	iterate	reflected	RealPointValuePair	1	DEF	comparator.compare($, best) < 0
1628	226	15	NelderMeadSimplex.java	iterate	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(reflected, best) < 0
34055	229	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
34055	229	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
1629	235	12	NelderMeadSimplex.java	iterate	expanded	RealPointValuePair	1	DEF	comparator.compare($, reflected) < 0
1629	235	12	NelderMeadSimplex.java	iterate	reflected	RealPointValuePair	1	DEF	comparator.compare(expanded, $) < 0
1629	235	12	NelderMeadSimplex.java	iterate	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(expanded, reflected) < 0
1630	243	12	NelderMeadSimplex.java	iterate	worst	RealPointValuePair	1	RET	comparator.compare(reflected, $) < 0
1630	243	12	NelderMeadSimplex.java	iterate	reflected	RealPointValuePair	1	RET	comparator.compare($, worst) < 0
1630	243	12	NelderMeadSimplex.java	iterate	comparator	Comparator<RealPointValuePair>	1	RET	$.compare(reflected, worst) < 0
34056	246	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
34056	246	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
1631	251	16	NelderMeadSimplex.java	iterate	outContracted	RealPointValuePair	0	RET	comparator.compare($, reflected) <= 0
1631	251	16	NelderMeadSimplex.java	iterate	reflected	RealPointValuePair	0	RET	comparator.compare(outContracted, $) <= 0
1631	251	16	NelderMeadSimplex.java	iterate	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(outContracted, reflected) <= 0
34057	259	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
34057	259	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
1632	265	16	NelderMeadSimplex.java	iterate	inContracted	RealPointValuePair	0	RET	comparator.compare($, worst) < 0
1632	265	16	NelderMeadSimplex.java	iterate	worst	RealPointValuePair	0	RET	comparator.compare(inContracted, $) < 0
1632	265	16	NelderMeadSimplex.java	iterate	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(inContracted, worst) < 0
34058	274	12	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ <= n
34058	274	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i <= $
34059	276	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
34059	276	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
737	78	8	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	MathIllegalArgumentException	$[0] == null
33149	88	8	NestedLoops.java	NestedLoops	THIS	NestedLoops	0	NIL-FOR	i < loop.$.length
33149	88	8	NestedLoops.java	NestedLoops	i	int	0	NIL-FOR	$ < loop.length
33149	88	8	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	NIL-FOR	i < $.length
738	99	8	NestedLoops.java	NestedLoops	THIS	NestedLoops	1	DEF	Double.isInfinite($.polygon.getSize())
739	126	12	NestedLoops.java	add	THIS	NestedLoops	0	RET	$.child.$.polygon.contains(node.$.polygon)
739	126	12	NestedLoops.java	add	node	NestedLoops	0	RET	child.polygon.contains($.polygon)
33150	133	8	NestedLoops.java	add	iterator	Iterator<NestedLoops>	0	NIL-FOR	$.hasNext()
740	135	12	NestedLoops.java	add	THIS	NestedLoops	0	DEF	node.$.polygon.contains(child.$.polygon)
740	135	12	NestedLoops.java	add	child	NestedLoops	0	DEF	node.polygon.contains($.polygon)
740	135	12	NestedLoops.java	add	node	NestedLoops	0	DEF	$.polygon.contains(child.polygon)
741	144	12	NestedLoops.java	add	THIS	NestedLoops	0	MathIllegalArgumentException	factory.intersection(node.$.polygon, $.child.$.polygon).isEmpty()
741	144	12	NestedLoops.java	add	factory	RegionFactory<Euclidean2D>	0	MathIllegalArgumentException	$.intersection(node.polygon, child.polygon).isEmpty()
741	144	12	NestedLoops.java	add	node	NestedLoops	0	MathIllegalArgumentException	factory.intersection($.polygon, child.polygon).isEmpty()
742	170	8	NestedLoops.java	setClockWise	THIS	NestedLoops	0	DEF	$.originalIsClockwise ^ clockwise
742	170	8	NestedLoops.java	setClockWise	clockwise	boolean	0	DEF	originalIsClockwise ^ $
33151	174	12	NestedLoops.java	setClockWise	min	int	0	NIL-WHILE	++$ < --max
33151	174	12	NestedLoops.java	setClockWise	max	int	0	NIL-WHILE	++min < --$
2680	81	12	NewtonSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(x1 - x0) <= $
2680	81	12	NewtonSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) <= absoluteAccuracy
2680	81	12	NewtonSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) <= absoluteAccuracy
1535	100	8	NonLinearConjugateGradientOptimizer.java	setInitialStep	initialStep	double	1	DEF	$ <= 0
1536	111	8	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.preconditioner == null
1537	114	8	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.solver == null
1538	121	8	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
1538	121	8	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
33970	122	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
33970	122	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
33971	132	8	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
33971	132	8	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1539	145	12	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	RealPointValuePair	0	RET	$ != null
1540	146	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	RET	$.getConvergenceChecker().converged(iter, previous, current)
1540	146	16	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	RealPointValuePair	0	RET	getConvergenceChecker().converged(iter, $, current)
1540	146	16	NonLinearConjugateGradientOptimizer.java	doOptimize	current	RealPointValuePair	0	RET	getConvergenceChecker().converged(iter, previous, $)
1540	146	16	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	0	RET	getConvergenceChecker().converged($, previous, current)
33972	162	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < $.point.$.length
33972	162	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < point.length
1541	167	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
1541	167	12	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
33973	168	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
33973	168	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
33974	177	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
33974	177	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1542	182	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.updateFormula == $.ConjugateGradientFormula.FLETCHER_REEVES
33975	186	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < r.$.length
33975	186	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < r.length
33975	186	16	NonLinearConjugateGradientOptimizer.java	doOptimize	r	double[]	0	NIL-FOR	i < $.length
1543	194	12	NonLinearConjugateGradientOptimizer.java	doOptimize	beta	double	1	DEF	$ < 0
1543	194	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	1	DEF	iter % $ == 0
1543	194	12	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	1	DEF	$ % n == 0
33976	200	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
33976	200	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
33977	222	8	NonLinearConjugateGradientOptimizer.java	findUpperBound	step	double	0	NIL-FOR	$ < Double.MAX_VALUE
1544	225	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yA	double	0	RET	$ * yB <= 0
1544	225	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yB	double	0	RET	yA * $ <= 0
2111	85	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.scaled != null
2111	85	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.scaled != null
2112	88	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.nordsieck != null
2112	88	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.nordsieck != null
2113	91	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.stateVariation != null
2113	91	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.stateVariation != null
34265	146	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < $.scaled.$.length
34265	146	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < scaled.length
34266	152	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < nData.$.length
34266	152	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < nData.length
34266	152	8	NordsieckStepInterpolator.java	rescale	nData	double[][]	0	NIL-FOR	i < $.length
34267	155	12	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
34267	155	12	NordsieckStepInterpolator.java	rescale	j	int	0	NIL-FOR	$ < nDataI.length
34267	155	12	NordsieckStepInterpolator.java	rescale	nDataI	double[]	0	NIL-FOR	j < $.length
34268	198	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ >= 0
34269	202	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
34269	202	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < nDataI.length
34269	202	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	nDataI	double[]	0	NIL-FOR	j < $.length
34270	209	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < $.currentState.$.length
34270	209	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < currentState.length
2114	231	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.scaled == null
34271	235	12	NordsieckStepInterpolator.java	writeExternal	j	int	0	NIL-FOR	$ < n
34271	235	12	NordsieckStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	j < $
2115	240	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.nordsieck == null
2116	265	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
34272	267	12	NordsieckStepInterpolator.java	readExternal	j	int	0	NIL-FOR	$ < n
34272	267	12	NordsieckStepInterpolator.java	readExternal	n	int	0	NIL-FOR	j < $
2117	275	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
2118	281	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
2118	281	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
932	73	8	NormalDistributionImpl.java	NormalDistributionImpl	sd	double	0	NotStrictlyPositiveException	$ <= 0
933	125	8	NormalDistributionImpl.java	cumulativeProbability	THIS	NormalDistributionImpl	0	RET	FastMath.abs(dev) > 40 * $.standardDeviation
933	125	8	NormalDistributionImpl.java	cumulativeProbability	dev	double	0	RET	FastMath.abs($) > 40 * standardDeviation
934	159	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
935	162	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
936	192	8	NormalDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < 0.5
937	213	8	NormalDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < 0.5
938	234	8	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < 0.5
939	236	15	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > 0.5
34166	107	8	OLSMultipleLinearRegression.java	calculateHat	i	int	0	NIL-FOR	$ < n
34166	107	8	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	i < $
34167	108	12	OLSMultipleLinearRegression.java	calculateHat	j	int	0	NIL-FOR	$ < n
34167	108	12	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	j < $
1907	109	16	OLSMultipleLinearRegression.java	calculateHat	j	int	1	DEF	i == $
1907	109	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ < p
1907	109	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ == j
1907	109	16	OLSMultipleLinearRegression.java	calculateHat	p	int	1	DEF	i < $
1908	135	8	OLSMultipleLinearRegression.java	calculateTotalSumOfSquares	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
1909	185	8	OLSMultipleLinearRegression.java	calculateAdjustedRSquared	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
2054	71	8	OnePointCrossover.java	crossover	first	Chromosome	0	IllegalArgumentException	$ instanceof AbstractListChromosome<?>
2054	71	8	OnePointCrossover.java	crossover	second	Chromosome	0	IllegalArgumentException	$ instanceof AbstractListChromosome<?>
2055	87	8	OnePointCrossover.java	crossover	length	int	0	IllegalArgumentException	$ != second.getLength()
2055	87	8	OnePointCrossover.java	crossover	second	AbstractListChromosome<T>	0	IllegalArgumentException	length != $.getLength()
34225	102	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < crossoverIndex
34225	102	8	OnePointCrossover.java	crossover	crossoverIndex	int	0	NIL-FOR	i < $
34226	107	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < length
34226	107	8	OnePointCrossover.java	crossover	length	int	0	NIL-FOR	i < $
1804	104	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	DEF	$ > 0.5
1804	104	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	DEF	$ <= 0
1805	127	8	OneWayAnovaImpl.java	anovaStats	categoryData	Collection<double[]>	0	DEF	$.size() < 2
1806	135	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	DEF	$.array.$.length <= 1
34107	154	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	NIL-FOR	i < $.data.$.length
34107	154	12	OneWayAnovaImpl.java	anovaStats	i	int	0	NIL-FOR	$ < data.length
63	153	8	OpenIntToDoubleHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
64	158	8	OpenIntToDoubleHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
64	158	8	OpenIntToDoubleHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
65	182	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
65	182	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
65	182	8	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
66	186	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
66	186	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	states[$] == FREE
33063	191	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
33063	191	8	OpenIntToDoubleHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
67	194	12	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
67	194	12	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
67	194	12	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
68	212	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
68	212	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
68	212	8	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
69	216	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
69	216	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
33064	221	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
33064	221	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
70	224	12	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
70	224	12	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
70	224	12	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
71	274	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
71	274	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
72	276	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
72	276	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
72	276	15	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
72	276	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
72	276	15	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
73	282	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
73	282	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
74	288	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
74	288	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
74	288	16	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
74	288	16	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
74	288	16	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
75	294	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
75	294	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
76	296	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
76	296	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
77	307	12	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
77	307	12	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
78	309	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
78	309	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
78	309	19	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
78	309	19	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
78	309	19	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
79	356	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
79	356	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
79	356	8	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
80	360	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
80	360	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	states[$] == FREE
33065	365	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
33065	365	8	OpenIntToDoubleHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
81	368	12	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
81	368	12	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
81	368	12	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
82	413	8	OpenIntToDoubleHashMap.java	put	index	int	0	DEF	$ < 0
83	421	8	OpenIntToDoubleHashMap.java	put	newMapping	boolean	0	DEF	$
84	423	12	OpenIntToDoubleHashMap.java	put	THIS	OpenIntToDoubleHashMap	0	DEF	$.shouldGrowTable()
33066	447	8	OpenIntToDoubleHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
33066	447	8	OpenIntToDoubleHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
85	448	12	OpenIntToDoubleHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
85	448	12	OpenIntToDoubleHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
483	165	8	OpenIntToFieldHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
484	170	8	OpenIntToFieldHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
484	170	8	OpenIntToFieldHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
485	194	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
485	194	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
485	194	8	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
486	198	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
486	198	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	states[$] == FREE
33121	203	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
33121	203	8	OpenIntToFieldHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
487	206	12	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
487	206	12	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
487	206	12	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
488	224	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
488	224	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
488	224	8	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
489	228	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
489	228	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
33122	233	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
33122	233	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
490	236	12	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
490	236	12	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
490	236	12	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
491	286	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
491	286	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
492	288	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
492	288	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
492	288	15	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
492	288	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
492	288	15	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
493	294	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
493	294	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
494	300	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
494	300	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
494	300	16	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
494	300	16	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
494	300	16	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
495	306	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
495	306	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
496	308	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
496	308	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
497	319	12	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
497	319	12	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
498	321	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
498	321	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
498	321	19	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
498	321	19	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
498	321	19	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
499	368	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
499	368	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
499	368	8	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
500	372	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
500	372	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	states[$] == FREE
33123	377	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
33123	377	8	OpenIntToFieldHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
501	380	12	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
501	380	12	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
501	380	12	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
502	425	8	OpenIntToFieldHashMap.java	put	index	int	0	DEF	$ < 0
503	433	8	OpenIntToFieldHashMap.java	put	newMapping	boolean	0	DEF	$
504	435	12	OpenIntToFieldHashMap.java	put	THIS	OpenIntToFieldHashMap	0	DEF	$.shouldGrowTable()
33124	459	8	OpenIntToFieldHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
33124	459	8	OpenIntToFieldHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
505	460	12	OpenIntToFieldHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
505	460	12	OpenIntToFieldHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
33879	97	8	OpenMapRealMatrix.java	add	iterator	Iterator	0	NIL-FOR	$.hasNext()
33880	131	8	OpenMapRealMatrix.java	subtract	iterator	Iterator	0	NIL-FOR	$.hasNext()
33881	153	12	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
33882	159	16	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
33882	159	16	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
33883	183	8	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
33884	189	12	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
33884	189	12	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
1407	191	16	OpenMapRealMatrix.java	multiply	THIS	OpenMapRealMatrix	0	DEF	m.$.entries.containsKey(rightKey)
1407	191	16	OpenMapRealMatrix.java	multiply	rightKey	int	0	DEF	m.entries.containsKey($)
1407	191	16	OpenMapRealMatrix.java	multiply	m	OpenMapRealMatrix	0	DEF	$.entries.containsKey(rightKey)
1408	195	20	OpenMapRealMatrix.java	multiply	outValue	double	1	DEF	$ == 0.0
1409	226	8	OpenMapRealMatrix.java	setEntry	value	double	1	DEF	$ == 0.0
1410	240	8	OpenMapRealMatrix.java	addToEntry	value	double	1	DEF	$ == 0.0
1411	254	8	OpenMapRealMatrix.java	multiplyEntry	value	double	1	DEF	$ == 0.0
33783	137	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
33783	137	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
33783	137	8	OpenMapRealVector.java	OpenMapRealVector	values	double[]	0	NIL-FOR	key < $.length
1318	139	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1318	139	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
33784	166	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
33784	166	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
33784	166	8	OpenMapRealVector.java	OpenMapRealVector	values	Double[]	0	NIL-FOR	key < $.length
1319	168	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1319	168	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
33785	194	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < $.virtualSize
33785	194	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < virtualSize
1320	196	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1320	196	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
1321	227	8	OpenMapRealVector.java	add	v	RealVector	1	RET	$ instanceof OpenMapRealVector
33786	249	8	OpenMapRealVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1322	252	12	OpenMapRealVector.java	add	key	int	1	DEF	randomAccess.containsKey($)
1322	252	12	OpenMapRealVector.java	add	randomAccess	OpenIntToDoubleHashMap	1	DEF	$.containsKey(key)
33787	269	8	OpenMapRealVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1323	278	8	OpenMapRealVector.java	append	v	RealVector	0	RET	$ instanceof OpenMapRealVector
33788	294	8	OpenMapRealVector.java	append	THIS	OpenMapRealVector	0	NIL-FOR	i < a.$.length
33788	294	8	OpenMapRealVector.java	append	i	int	0	NIL-FOR	$ < a.length
33788	294	8	OpenMapRealVector.java	append	a	double[]	0	NIL-FOR	i < $.length
33789	324	8	OpenMapRealVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
1324	334	8	OpenMapRealVector.java	dotProduct	v	RealVector	1	RET	$ instanceof OpenMapRealVector
33790	346	8	OpenMapRealVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
33791	359	8	OpenMapRealVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
33792	371	8	OpenMapRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
33793	384	8	OpenMapRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
33794	398	8	OpenMapRealVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1325	401	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ < end
1325	401	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ >= index
1325	401	12	OpenMapRealVector.java	getSubVector	end	int	0	DEF	key < $
1325	401	12	OpenMapRealVector.java	getSubVector	index	int	0	DEF	key >= $
33795	413	8	OpenMapRealVector.java	getData	iter	Iterator	0	NIL-WHILE	$.hasNext()
33796	436	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
33797	444	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1326	447	12	OpenMapRealVector.java	getDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1326	447	12	OpenMapRealVector.java	getDistance	key	int	0	DEF	entries.containsKey($)
1327	459	8	OpenMapRealVector.java	getDistance	v	RealVector	0	RET	$ instanceof OpenMapRealVector
33798	470	8	OpenMapRealVector.java	getDistance	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
33798	470	8	OpenMapRealVector.java	getDistance	i	int	0	NIL-FOR	$ < v.length
33798	470	8	OpenMapRealVector.java	getDistance	v	double[]	0	NIL-FOR	i < $.length
33799	495	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
33800	501	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1328	504	12	OpenMapRealVector.java	getL1Distance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1328	504	12	OpenMapRealVector.java	getL1Distance	key	int	0	DEF	entries.containsKey($)
1329	516	8	OpenMapRealVector.java	getL1Distance	v	RealVector	0	RET	$ instanceof OpenMapRealVector
33801	527	8	OpenMapRealVector.java	getL1Distance	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
33801	527	8	OpenMapRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < v.length
33801	527	8	OpenMapRealVector.java	getL1Distance	v	double[]	0	NIL-FOR	i < $.length
33802	543	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1330	546	12	OpenMapRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
1330	546	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
33803	551	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1331	554	12	OpenMapRealVector.java	getLInfDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1331	554	12	OpenMapRealVector.java	getLInfDistance	key	int	0	DEF	entries.containsKey($)
1332	555	16	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	iter.value() > $
1332	555	16	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	DEF	$.value() > max
1333	567	8	OpenMapRealVector.java	getLInfDistance	v	RealVector	0	RET	$ instanceof OpenMapRealVector
33804	578	8	OpenMapRealVector.java	getLInfDistance	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
33804	578	8	OpenMapRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < v.length
33804	578	8	OpenMapRealVector.java	getLInfDistance	v	double[]	0	NIL-FOR	i < $.length
1334	580	12	OpenMapRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
1334	580	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
33805	591	8	OpenMapRealVector.java	isInfinite	iter	Iterator	0	NIL-WHILE	$.hasNext()
1335	594	12	OpenMapRealVector.java	isInfinite	value	double	0	RET	Double.isNaN($)
1336	597	12	OpenMapRealVector.java	isInfinite	value	double	0	DEF	Double.isInfinite($)
33806	607	8	OpenMapRealVector.java	isNaN	iter	Iterator	0	NIL-WHILE	$.hasNext()
1337	609	12	OpenMapRealVector.java	isNaN	iter	Iterator	0	RET	Double.isNaN($.value())
33807	625	8	OpenMapRealVector.java	mapAddToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
33807	625	8	OpenMapRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
33808	637	8	OpenMapRealVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
33809	641	12	OpenMapRealVector.java	outerProduct	col	int	0	NIL-FOR	$ < n
33809	641	12	OpenMapRealVector.java	outerProduct	n	int	0	NIL-FOR	col < $
1338	664	8	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	1	DEF	$.isDefaultValue(value)
1338	664	8	OpenMapRealVector.java	setEntry	value	double	1	DEF	isDefaultValue($)
1339	666	15	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(index)
1339	666	15	OpenMapRealVector.java	setEntry	index	int	0	DEF	entries.containsKey($)
33810	684	8	OpenMapRealVector.java	setSubVector	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
33810	684	8	OpenMapRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.length
33810	684	8	OpenMapRealVector.java	setSubVector	v	double[]	0	NIL-FOR	i < $.length
33811	692	8	OpenMapRealVector.java	set	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
33811	692	8	OpenMapRealVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
33812	709	8	OpenMapRealVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1340	712	12	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(key)
1340	712	12	OpenMapRealVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1341	725	8	OpenMapRealVector.java	subtract	v	RealVector	0	RET	$ instanceof OpenMapRealVector
33813	736	8	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
33813	736	8	OpenMapRealVector.java	subtract	i	int	0	NIL-FOR	$ < v.length
33813	736	8	OpenMapRealVector.java	subtract	v	double[]	0	NIL-FOR	i < $.length
1342	737	12	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(i)
1342	737	12	OpenMapRealVector.java	subtract	i	int	1	DEF	entries.containsKey($)
1343	759	8	OpenMapRealVector.java	unitize	THIS	OpenMapRealVector	0	MathArithmeticException	$.isDefaultValue(norm)
1343	759	8	OpenMapRealVector.java	unitize	norm	double	0	MathArithmeticException	isDefaultValue($)
33814	763	8	OpenMapRealVector.java	unitize	iter	Iterator	0	NIL-WHILE	$.hasNext()
33815	790	8	OpenMapRealVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1344	806	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$ == obj
1344	806	8	OpenMapRealVector.java	equals	obj	Object	0	RET	this == $
1345	809	8	OpenMapRealVector.java	equals	obj	Object	0	RET	$ instanceof OpenMapRealVector
1346	813	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$.virtualSize != other.$.virtualSize
1346	813	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	virtualSize != $.virtualSize
1347	816	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits($.epsilon) != Double.doubleToLongBits(other.$.epsilon)
1347	816	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	Double.doubleToLongBits(epsilon) != Double.doubleToLongBits($.epsilon)
33816	821	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1348	824	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(iter.value())
1348	824	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.value())
33817	829	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1349	832	12	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.getEntry(iter.key()))
1349	832	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(getEntry(iter.key()))
1349	832	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry($.key()))
33128	139	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	NIL-FOR	i < components.$.length
33128	139	8	OrderedTuple.java	OrderedTuple	i	int	0	NIL-FOR	$ < components.length
33128	139	8	OrderedTuple.java	OrderedTuple	components	double	0	NIL-FOR	i < $.length
520	140	12	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isInfinite(components[$])
520	140	12	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isInfinite($[i])
521	141	16	OrderedTuple.java	OrderedTuple	i	int	1	DEF	components[$] < 0
521	141	16	OrderedTuple.java	OrderedTuple	components	double	1	DEF	$[i] < 0
522	146	19	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isNaN(components[$])
522	146	19	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isNaN($[i])
523	151	16	OrderedTuple.java	OrderedTuple	m	long	0	DEF	$ != 0
524	159	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.negInf
524	159	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.posInf
525	166	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	1	DEF	$.lsb <= msb
525	166	8	OrderedTuple.java	OrderedTuple	msb	int	1	DEF	lsb <= $
526	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding.$.length == 1
526	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding != null
526	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding[0] == 0x0L
33129	202	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	eIndex < $.encoding.$.length
33129	202	8	OrderedTuple.java	encode	eIndex	int	0	NIL-FOR	$ < encoding.length
33130	203	12	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	vIndex < $.components.$.length
33130	203	12	OrderedTuple.java	encode	vIndex	int	0	NIL-FOR	$ < components.length
527	204	16	OrderedTuple.java	encode	THIS	OrderedTuple	0	DEF	$.getBit(vIndex, k) != 0
527	204	16	OrderedTuple.java	encode	vIndex	int	0	DEF	getBit($, k) != 0
527	204	16	OrderedTuple.java	encode	k	int	0	DEF	getBit(vIndex, $) != 0
528	207	16	OrderedTuple.java	encode	shift	int	0	DEF	$-- == 0
529	248	8	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.components.$.length == ot.$.components.$.length
529	248	8	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	components.length == $.components.length
530	249	12	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.nan
531	251	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.nan
531	251	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.nan
532	253	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.negInf
532	253	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.posInf
532	253	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.posInf
533	255	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.posInf
533	255	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.negInf
533	255	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.negInf
534	259	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	DEF	$.offset < ot.$.offset
534	259	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	DEF	offset < $.offset
535	261	23	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	DEF	$.offset > ot.$.offset
535	261	23	OrderedTuple.java	compareTo	ot	OrderedTuple	0	DEF	offset > $.offset
33131	266	16	OrderedTuple.java	compareTo	i	int	0	NIL-FOR	$ < limit
33131	266	16	OrderedTuple.java	compareTo	limit	int	0	NIL-FOR	i < $
536	267	20	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding[i] < ot.$.encoding[i]
536	267	20	OrderedTuple.java	compareTo	i	int	1	RET	encoding[$] < ot.encoding[$]
536	267	20	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding[i] < $.encoding[i]
537	269	27	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.encoding[i] > ot.$.encoding[i]
537	269	27	OrderedTuple.java	compareTo	i	int	0	RET	encoding[$] > ot.encoding[$]
537	269	27	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	encoding[i] > $.encoding[i]
538	274	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length < ot.$.encoding.$.length
538	274	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length < $.encoding.length
539	276	23	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length > ot.$.encoding.$.length
539	276	23	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length > $.encoding.length
540	292	8	OrderedTuple.java	equals	THIS	OrderedTuple	1	RET	$ == other
540	292	8	OrderedTuple.java	equals	other	Object	1	RET	this == $
541	294	15	OrderedTuple.java	equals	other	Object	1	RET	$ instanceof OrderedTuple
33132	358	8	OrderedTuple.java	computeMSB	scale	int	0	NIL-WHILE	$ != 0
542	359	12	OrderedTuple.java	computeMSB	ll	long	0	DEF	($ & mask) != $
542	359	12	OrderedTuple.java	computeMSB	mask	long	0	DEF	(ll & $) != ll
33133	384	8	OrderedTuple.java	computeLSB	scale	int	0	NIL-WHILE	$ != 0
543	385	12	OrderedTuple.java	computeLSB	ll	long	0	DEF	($ & mask) == $
543	385	12	OrderedTuple.java	computeLSB	mask	long	0	DEF	(ll & $) == ll
544	406	8	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k > $.offset
544	406	8	OrderedTuple.java	getBit	e	int	1	RET	k < $
544	406	8	OrderedTuple.java	getBit	k	int	1	RET	$ > offset
544	406	8	OrderedTuple.java	getBit	k	int	1	RET	$ < e
545	408	15	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k == $.offset
545	408	15	OrderedTuple.java	getBit	k	int	1	RET	$ == offset
546	410	15	OrderedTuple.java	getBit	e	int	1	RET	k > ($ + 52)
546	410	15	OrderedTuple.java	getBit	k	int	1	RET	$ > (e + 52)
33141	72	8	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	NIL-FOR	i < outline.$.length
33141	72	8	OutlineExtractor.java	getOutline	i	int	0	NIL-FOR	$ < outline.length
33141	72	8	OutlineExtractor.java	getOutline	outline	Vector2D[][]	0	NIL-FOR	i < $.length
33142	76	12	OutlineExtractor.java	getOutline	end	int	0	NIL-WHILE	j < $
33142	76	12	OutlineExtractor.java	getOutline	j	int	0	NIL-WHILE	$ < end
686	77	16	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	1	DEF	$.pointIsBetween(rawLoop, end, j)
686	77	16	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	1	DEF	pointIsBetween($, end, j)
686	77	16	OutlineExtractor.java	getOutline	end	int	1	DEF	pointIsBetween(rawLoop, $, j)
686	77	16	OutlineExtractor.java	getOutline	j	int	1	DEF	pointIsBetween(rawLoop, end, $)
33143	79	20	OutlineExtractor.java	getOutline	k	int	0	NIL-FOR	$ < (end - 1)
33143	79	20	OutlineExtractor.java	getOutline	end	int	0	NIL-FOR	k < ($ - 1)
687	88	12	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	DEF	end != rawLoop.$.length
687	88	12	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	0	DEF	end != $.length
687	88	12	OutlineExtractor.java	getOutline	end	int	0	DEF	$ != rawLoop.length
31	84	8	Pair.java	equals	o	Object	0	RET	$ == null
32	87	8	Pair.java	equals	o	Object	1	RET	$ instanceof Pair
1022	51	8	PascalDistributionImpl.java	PascalDistributionImpl	r	int	0	NotPositiveException	$ < 0
1023	55	8	PascalDistributionImpl.java	PascalDistributionImpl	p	double	0	OutOfRangeException	$ < 0
1023	55	8	PascalDistributionImpl.java	PascalDistributionImpl	p	double	0	OutOfRangeException	$ > 1
1024	113	8	PascalDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
1025	130	8	PascalDistributionImpl.java	probability	x	int	1	DEF	$ < 0
1026	158	8	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
1027	160	15	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
1864	97	8	PearsonsCorrelation.java	PearsonsCorrelation	covarianceMatrix	RealMatrix	0	NullArgumentException	$ == null
34135	142	8	PearsonsCorrelation.java	getCorrelationStandardErrors	i	int	0	NIL-FOR	$ < nVars
34135	142	8	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	i < $
34136	143	12	PearsonsCorrelation.java	getCorrelationStandardErrors	j	int	0	NIL-FOR	$ < nVars
34136	143	12	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	j < $
34137	168	8	PearsonsCorrelation.java	getCorrelationPValues	i	int	0	NIL-FOR	$ < nVars
34137	168	8	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	i < $
34138	169	12	PearsonsCorrelation.java	getCorrelationPValues	j	int	0	NIL-FOR	$ < nVars
34138	169	12	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	j < $
1865	170	16	PearsonsCorrelation.java	getCorrelationPValues	j	int	1	DEF	i == $
1865	170	16	PearsonsCorrelation.java	getCorrelationPValues	i	int	1	DEF	$ == j
34139	193	8	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	$ < nVars
34139	193	8	PearsonsCorrelation.java	computeCorrelationMatrix	nVars	int	0	NIL-FOR	i < $
34140	194	12	PearsonsCorrelation.java	computeCorrelationMatrix	j	int	0	NIL-FOR	$ < i
34140	194	12	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	j < $
1866	230	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	DimensionMismatchException	xArray.$.length != yArray.$.length
1866	230	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	DimensionMismatchException	$.length != yArray.length
1866	230	8	PearsonsCorrelation.java	correlation	yArray	double[]	1	DimensionMismatchException	xArray.length != $.length
1867	232	15	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	DEF	xArray.$.length < 2
1867	232	15	PearsonsCorrelation.java	correlation	xArray	double[]	1	DEF	$.length < 2
34141	236	12	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	0	NIL-FOR	i<xArray.$.length
34141	236	12	PearsonsCorrelation.java	correlation	i	int	0	NIL-FOR	$<xArray.length
34141	236	12	PearsonsCorrelation.java	correlation	xArray	double[]	0	NIL-FOR	i<$.length
34142	257	8	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	$ < nVars
34142	257	8	PearsonsCorrelation.java	covarianceToCorrelation	nVars	int	0	NIL-FOR	i < $
34143	260	12	PearsonsCorrelation.java	covarianceToCorrelation	j	int	0	NIL-FOR	$ < i
34143	260	12	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	j < $
1868	279	8	PearsonsCorrelation.java	checkSufficientData	nRows	int	0	DEF	$ < 2
1868	279	8	PearsonsCorrelation.java	checkSufficientData	nCols	int	0	DEF	$ < 2
1754	133	8	Percentile.java	setData	values	double[]	1	DEF	$ == null
1755	145	8	Percentile.java	setData	values	double[]	1	DEF	$ == null
1756	261	8	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ > 100
1756	261	8	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ <= 0
1757	264	8	Percentile.java	evaluate	length	int	0	RET	$ == 0
1758	267	8	Percentile.java	evaluate	length	int	0	RET	$ == 1
1759	277	8	Percentile.java	evaluate	THIS	Percentile	1	DEF	values == $.getDataRef()
1759	277	8	Percentile.java	evaluate	values	double[]	1	DEF	$ == getDataRef()
1760	287	8	Percentile.java	evaluate	pos	double	0	RET	$ < 1
1761	290	8	Percentile.java	evaluate	n	double	0	RET	pos >= $
1761	290	8	Percentile.java	evaluate	pos	double	0	RET	$ >= n
34094	315	8	Percentile.java	select	begin	int	0	NIL-WHILE	end - $ > MIN_SELECT_SIZE
34094	315	8	Percentile.java	select	end	int	0	NIL-WHILE	$ - begin > MIN_SELECT_SIZE
1762	318	12	Percentile.java	select	THIS	Percentile	1	DEF	node < pivotsHeap.$.length
1762	318	12	Percentile.java	select	node	int	1	DEF	pivotsHeap[$] >= 0
1762	318	12	Percentile.java	select	node	int	1	DEF	$ < pivotsHeap.length
1762	318	12	Percentile.java	select	pivotsHeap	int[]	1	DEF	$[node] >= 0
1762	318	12	Percentile.java	select	pivotsHeap	int[]	1	DEF	node < $.length
1763	325	16	Percentile.java	select	THIS	Percentile	0	DEF	node < pivotsHeap.$.length
1763	325	16	Percentile.java	select	node	int	0	DEF	$ < pivotsHeap.length
1763	325	16	Percentile.java	select	pivotsHeap	int[]	0	DEF	node < $.length
1764	330	12	Percentile.java	select	pivot	int	1	RET	k == $
1764	330	12	Percentile.java	select	k	int	1	RET	$ == pivot
1765	333	19	Percentile.java	select	pivot	int	1	DEF	k < $
1765	333	19	Percentile.java	select	k	int	1	DEF	$ < pivot
1766	367	8	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wMiddle
1766	367	8	Percentile.java	medianOf3	wMiddle	double	1	RET	wBegin < $
1767	368	12	Percentile.java	medianOf3	wMiddle	double	1	RET	$ < wEnd
1767	368	12	Percentile.java	medianOf3	wEnd	double	1	RET	wMiddle < $
1768	374	12	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wEnd
1768	374	12	Percentile.java	medianOf3	wEnd	double	1	RET	wBegin < $
34095	403	8	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
34095	403	8	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
34096	404	12	Percentile.java	partition	value	double	0	NIL-WHILE	work[j] >= $
34096	404	12	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
34096	404	12	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
34096	404	12	Percentile.java	partition	j	int	0	NIL-WHILE	work[$] >= value
34096	404	12	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[j] >= value
34097	407	12	Percentile.java	partition	value	double	0	NIL-WHILE	work[i] <= $
34097	407	12	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
34097	407	12	Percentile.java	partition	i	int	0	NIL-WHILE	work[$] <= value
34097	407	12	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
34097	407	12	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[i] <= value
1769	411	12	Percentile.java	partition	i	int	0	DEF	$ < j
1769	411	12	Percentile.java	partition	j	int	0	DEF	i < $
1770	418	8	Percentile.java	partition	value	double	0	DEF	work[i] > $
1770	418	8	Percentile.java	partition	i	int	0	DEF	work[$] > value
1770	418	8	Percentile.java	partition	i	int	0	DEF	$ >= end
1770	418	8	Percentile.java	partition	work	double[]	0	DEF	$[i] > value
1770	418	8	Percentile.java	partition	end	int	0	DEF	i >= $
34098	434	8	Percentile.java	insertionSort	j	int	0	NIL-FOR	$ < end
34098	434	8	Percentile.java	insertionSort	end	int	0	NIL-FOR	j < $
34099	437	12	Percentile.java	insertionSort	saved	double	0	NIL-WHILE	$ < work[i]
34099	437	12	Percentile.java	insertionSort	i	int	0	NIL-WHILE	$ >= begin
34099	437	12	Percentile.java	insertionSort	i	int	0	NIL-WHILE	saved < work[$]
34099	437	12	Percentile.java	insertionSort	work	double[]	0	NIL-WHILE	saved < $[i]
34099	437	12	Percentile.java	insertionSort	begin	int	0	NIL-WHILE	i >= $
1771	464	8	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ > 100
1771	464	8	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ <= 0
1772	493	8	Percentile.java	copy	THIS	Percentile	0	DEF	source.$.cachedPivots != null
1772	493	8	Percentile.java	copy	source	Percentile	0	DEF	$.cachedPivots != null
627	136	8	Plane.java	setNormal	norm	double	0	IllegalArgumentException	$ < 1.0e-10
628	308	8	Plane.java	intersection	dot	double	0	RET	FastMath.abs($) < 1.0e-10
629	323	8	Plane.java	intersection	direction	Vector3D	0	RET	$.getNorm() < 1.0e-10
630	360	8	Plane.java	intersection	determinant	double	0	RET	FastMath.abs($) < 1.0e-10
927	85	8	PoissonDistributionImpl.java	PoissonDistributionImpl	p	double	0	NotStrictlyPositiveException	$ <= 0
928	131	8	PoissonDistributionImpl.java	probability	x	int	1	DEF	$ < 0
928	131	8	PoissonDistributionImpl.java	probability	x	int	1	DEF	$ == Integer.MAX_VALUE
929	133	15	PoissonDistributionImpl.java	probability	x	int	1	DEF	$ == 0
930	154	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ < 0
931	157	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ == Integer.MAX_VALUE
721	132	8	PolygonsSet.java	computeGeometricalProperties	THIS	PolygonsSet	1	DEF	v.$.length == 0
721	132	8	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$.length == 0
722	133	12	PolygonsSet.java	computeGeometricalProperties	THIS	PolygonsSet	1	DEF	(Boolean) $.getTree(false).getAttribute()
723	140	15	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$[0][0] == null
724	166	12	PolygonsSet.java	computeGeometricalProperties	sum	double	1	DEF	$ < 0
725	203	8	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	$.vertices == null
726	204	12	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.getTree(false).getCut() == null
33146	216	16	PolygonsSet.java	getVertices	sorted	AVLTree<ComparableSegment>	0	NIL-WHILE	$.isEmpty()
727	219	20	PolygonsSet.java	getVertices	loop	List<ComparableSegment>	0	DEF	$ != null
728	229	20	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.size() < 2
729	237	27	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.get(0).getStart() == null
730	243	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ == 0
731	251	28	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j < (array.$.length - 1)
731	251	28	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j < ($.length - 1)
731	251	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ < (array.length - 1)
732	256	28	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j == (array.$.length - 1)
732	256	28	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j == ($.length - 1)
732	256	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ == (array.length - 1)
33147	302	8	PolygonsSet.java	followLoop	globalStart	Vector2D	0	NIL-WHILE	$.distance(end) > 1.0e-10
33147	302	8	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	$ != null
33147	302	8	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	globalStart.distance($) > 1.0e-10
33147	302	8	PolygonsSet.java	followLoop	open	boolean	0	NIL-WHILE	$
33148	310	12	PolygonsSet.java	followLoop	n	Node	0	NIL-FOR	$ != null
33148	310	12	PolygonsSet.java	followLoop	n	Node	0	NIL-FOR	$.getElement().compareTo(upperRight) <= 0
33148	310	12	PolygonsSet.java	followLoop	upperRight	ComparableSegment	0	NIL-FOR	n.getElement().compareTo($) <= 0
733	315	16	PolygonsSet.java	followLoop	distance	double	0	DEF	$ < selectedDistance
733	315	16	PolygonsSet.java	followLoop	selectedDistance	double	0	DEF	distance < $
734	322	12	PolygonsSet.java	followLoop	selectedDistance	double	0	RET	$ > 1.0e-10
735	335	8	PolygonsSet.java	followLoop	loop	ArrayList<ComparableSegment>	0	RET	$.size() == 2
735	335	8	PolygonsSet.java	followLoop	open	boolean	0	RET	$
736	340	8	PolygonsSet.java	followLoop	end	Vector2D	0	MathInternalError	$ == null
736	340	8	PolygonsSet.java	followLoop	open	boolean	0	MathInternalError	$
688	118	8	PolyhedronsSet.java	computeGeometricalProperties	THIS	PolyhedronsSet	1	DEF	$.getSize() < 0
689	216	8	PolyhedronsSet.java	recurseFirstIntersection	cut	SubHyperplane<Euclidean3D>	0	RET	$ == null
690	228	8	PolyhedronsSet.java	recurseFirstIntersection	offset	double	1	DEF	$ < 0
691	236	8	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
692	239	12	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane<Euclidean3D>	0	RET	$ != null
693	246	8	PolyhedronsSet.java	recurseFirstIntersection	crossed	SubHyperplane<Euclidean3D>	0	RET	$ != null
694	250	8	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
695	253	12	PolyhedronsSet.java	recurseFirstIntersection	hit3D	Vector3D	0	RET	$ != null
696	255	16	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane<Euclidean3D>	0	RET	$ != null
697	278	8	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
697	278	8	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint($) == Location.INSIDE
697	278	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	$.getPlusOutside() != null
697	278	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	((SubPlane) $.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
698	282	8	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
698	282	8	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint($) == Location.INSIDE
698	282	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	((SubPlane) $.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
698	282	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	$.getPlusInside() != null
2761	70	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NoDataException	$ == 0
34550	73	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	$ > 1
34550	73	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	c[$ - 1] == 0
34550	73	8	PolynomialFunction.java	PolynomialFunction	c	double	0	NIL-WHILE	$[n - 1] == 0
2762	130	8	PolynomialFunction.java	evaluate	n	int	0	NoDataException	$ == 0
34551	134	8	PolynomialFunction.java	evaluate	j	int	0	NIL-FOR	$ >= 0
34552	153	8	PolynomialFunction.java	add	i	int	0	NIL-FOR	$ < lowLength
34552	153	8	PolynomialFunction.java	add	lowLength	int	0	NIL-FOR	i < $
34553	178	8	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < lowLength
34553	178	8	PolynomialFunction.java	subtract	lowLength	int	0	NIL-FOR	i < $
2763	181	8	PolynomialFunction.java	subtract	THIS	PolynomialFunction	1	DEF	$.coefficients.$.length < p.$.coefficients.$.length
2763	181	8	PolynomialFunction.java	subtract	p	PolynomialFunction	1	DEF	coefficients.length < $.coefficients.length
34554	182	12	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < highLength
34554	182	12	PolynomialFunction.java	subtract	highLength	int	0	NIL-FOR	i < $
34555	200	8	PolynomialFunction.java	negate	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
34555	200	8	PolynomialFunction.java	negate	i	int	0	NIL-FOR	$ < coefficients.length
34556	215	8	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	i < newCoefficients.$.length
34556	215	8	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	$ < newCoefficients.length
34556	215	8	PolynomialFunction.java	multiply	newCoefficients	double[]	0	NIL-FOR	i < $.length
34557	217	12	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	j < FastMath.min($.coefficients.$.length, i + 1)
34557	217	12	PolynomialFunction.java	multiply	j	int	0	NIL-FOR	$ < FastMath.min(coefficients.length, i + 1)
34557	217	12	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	j < FastMath.min(coefficients.length, $ + 1)
2764	239	8	PolynomialFunction.java	differentiate	n	int	0	NoDataException	$ == 0
2765	242	8	PolynomialFunction.java	differentiate	n	int	0	RET	$ == 1
34558	246	8	PolynomialFunction.java	differentiate	i	int	0	NIL-FOR	$ > 0
2766	288	8	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	RET	$.coefficients[0] == 0.0
2767	289	12	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	RET	$.coefficients.$.length == 1
34559	296	8	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
34559	296	8	PolynomialFunction.java	toString	i	int	0	NIL-FOR	$ < coefficients.length
2768	297	12	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] != 0
2768	297	12	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] != 0
2769	298	16	PolynomialFunction.java	toString	s	StringBuilder	1	DEF	$.length() > 0
2770	299	20	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	DEF	$.coefficients[i] < 0
2770	299	20	PolynomialFunction.java	toString	i	int	1	DEF	coefficients[$] < 0
2771	305	20	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] < 0
2771	305	20	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] < 0
2772	311	16	PolynomialFunction.java	toString	absAi	double	0	DEF	($ - 1) != 0
2773	317	16	PolynomialFunction.java	toString	i	int	0	DEF	$ > 1
2774	335	8	PolynomialFunction.java	toString	c	String	1	RET	$.endsWith(".0")
2775	354	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	$ == obj
2775	354	8	PolynomialFunction.java	equals	obj	Object	0	RET	this == $
2776	357	8	PolynomialFunction.java	equals	obj	Object	0	RET	$ instanceof PolynomialFunction
2777	361	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	Arrays.equals($.coefficients, other.$.coefficients)
2777	361	8	PolynomialFunction.java	equals	other	PolynomialFunction	0	RET	Arrays.equals(coefficients, $.coefficients)
2753	78	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.verifyInterpolationArray(x, y, false)
2753	78	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	x	double	0	DEF	verifyInterpolationArray($, y, false)
2753	78	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	y	double	0	DEF	verifyInterpolationArray(x, $, false)
2754	147	8	PolynomialFunctionLagrangeForm.java	getCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.coefficientsComputed
2755	172	8	PolynomialFunctionLagrangeForm.java	evaluate	THIS	PolynomialFunctionLagrangeForm	0	RET	$.verifyInterpolationArray(x, y, false)
2755	172	8	PolynomialFunctionLagrangeForm.java	evaluate	x	double	0	RET	verifyInterpolationArray($, y, false)
2755	172	8	PolynomialFunctionLagrangeForm.java	evaluate	y	double	0	RET	verifyInterpolationArray(x, $, false)
34541	210	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
34541	210	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
2756	216	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	dist	double	0	DEF	$ < min_dist
2756	216	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	min_dist	double	0	DEF	dist < $
34542	225	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
34542	225	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
34543	226	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	j	int	0	NIL-FOR	$ < n-i
34543	226	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	j < n-$
34543	226	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	j < $-i
2757	236	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	1	DEF	nearest < 0.5*(n-$+1)
2757	236	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	nearest	int	1	DEF	$ < 0.5*(n-i+1)
2757	236	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	1	DEF	nearest < 0.5*($-i+1)
34544	256	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
34544	256	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
34545	263	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
34545	263	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
34546	264	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
34547	272	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
34547	272	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
34548	275	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ < n
34548	275	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	j < $
2758	276	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	DEF	i != $
2758	276	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != j
34549	286	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ >= 0
2759	314	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	DimensionMismatchException	x.$.length != y.$.length
2759	314	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	DimensionMismatchException	$.length != y.length
2759	314	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	DimensionMismatchException	x.length != $.length
2760	317	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	NumberIsTooSmallException	x.$.length < 2
2760	317	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	NumberIsTooSmallException	$.length < 2
2779	140	8	PolynomialFunctionNewtonForm.java	getCoefficients	THIS	PolynomialFunctionNewtonForm	0	DEF	$.coefficientsComputed
34563	168	8	PolynomialFunctionNewtonForm.java	evaluate	i	int	0	NIL-FOR	$ >= 0
34564	183	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ <= n
34564	183	8	PolynomialFunctionNewtonForm.java	computeCoefficients	n	int	0	NIL-FOR	i <= $
34565	188	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ >= 0
34566	189	12	PolynomialFunctionNewtonForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
2780	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	a.$.length == 0
2780	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	c.$.length == 0
2780	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	NoDataException	$.length == 0
2780	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	NoDataException	$.length == 0
2781	219	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DimensionMismatchException	a.$.length != c.$.length + 1
2781	219	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	DimensionMismatchException	$.length != c.length + 1
2781	219	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	DimensionMismatchException	a.length != $.length + 1
2747	101	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NullArgumentException	$ == null
2747	101	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	NullArgumentException	$ == null
2748	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	NumberIsTooSmallException	knots.$.length < 2
2748	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NumberIsTooSmallException	$.length < 2
2749	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DimensionMismatchException	knots.$.length - 1 != polynomials.$.length
2749	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DimensionMismatchException	$.length - 1 != polynomials.length
2749	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	DimensionMismatchException	knots.length - 1 != $.length
2750	133	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v > $.knots[$.n]
2750	133	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v < $.knots[0]
2750	133	8	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ > knots[n]
2750	133	8	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ < knots[0]
2751	137	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
2752	143	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
2752	143	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
34540	165	8	PolynomialSplineFunction.java	polynomialSplineDerivative	THIS	PolynomialSplineFunction	0	NIL-FOR	i < $.n
34540	165	8	PolynomialSplineFunction.java	polynomialSplineDerivative	i	int	0	NIL-FOR	$ < n
2778	199	12	PolynomialsUtils.java	buildPolynomial	maxDegree	int	0	DEF	degree > $
2778	199	12	PolynomialsUtils.java	buildPolynomial	degree	int	0	DEF	$ > maxDegree
34560	215	8	PolynomialsUtils.java	buildPolynomial	i	int	0	NIL-FOR	$ <= degree
34560	215	8	PolynomialsUtils.java	buildPolynomial	degree	int	0	NIL-FOR	i <= $
34561	235	8	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	$ < degree
34561	235	8	PolynomialsUtils.java	computeUpToDegree	degree	int	0	NIL-FOR	k < $
34562	251	12	PolynomialsUtils.java	computeUpToDegree	i	int	0	NIL-FOR	$ < k
34562	251	12	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	i < $
1618	80	8	PowellOptimizer.java	PowellOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
1619	83	8	PowellOptimizer.java	PowellOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
34047	105	8	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
34047	105	8	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
34048	125	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
34048	125	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1620	136	16	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	($ - fVal) > delta
1620	136	16	PowellOptimizer.java	doOptimize	delta	double	0	DEF	(fX2 - fVal) > $
1620	136	16	PowellOptimizer.java	doOptimize	fVal	double	0	DEF	(fX2 - $) > delta
1621	149	12	PowellOptimizer.java	doOptimize	stop	boolean	0	DEF	$
1622	150	16	PowellOptimizer.java	doOptimize	checker	ConvergenceChecker<RealPointValuePair>	0	DEF	$ != null
1623	154	12	PowellOptimizer.java	doOptimize	stop	boolean	0	RET	$
1624	155	16	PowellOptimizer.java	doOptimize	THIS	PowellOptimizer	1	RET	goal == $.GoalType.MINIMIZE
1624	155	16	PowellOptimizer.java	doOptimize	goal	GoalType	1	RET	$ == GoalType.MINIMIZE
34049	164	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
34049	164	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1625	172	12	PowellOptimizer.java	doOptimize	fX	double	0	DEF	$ > fX2
1625	172	12	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	fX > $
1626	179	16	PowellOptimizer.java	doOptimize	t	double	0	DEF	$ < 0.0
34050	212	8	PowellOptimizer.java	newPointAndDirection	i	int	0	NIL-FOR	$ < n
34050	212	8	PowellOptimizer.java	newPointAndDirection	n	int	0	NIL-FOR	i < $
1658	122	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, begin, length, true)
1658	122	8	Product.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
1658	122	8	Product.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
1658	122	8	Product.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
34074	124	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
34074	124	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
34074	124	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1659	162	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, weights, begin, length, true)
1659	162	8	Product.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
1659	162	8	Product.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
1659	162	8	Product.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
1659	162	8	Product.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
34075	164	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
34075	164	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
34075	164	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
859	100	8	ProperBigFractionFormat.java	format	whole	BigInteger	0	DEF	BigInteger.ZERO.equals($)
860	103	12	ProperBigFractionFormat.java	format	num	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
861	138	8	ProperBigFractionFormat.java	parse	ret	BigFraction	0	RET	$ != null
862	149	8	ProperBigFractionFormat.java	parse	whole	BigInteger	0	RET	$ == null
863	162	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
864	170	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
865	201	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
866	209	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
867	216	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
868	220	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
869	234	8	ProperBigFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
842	101	8	ProperFractionFormat.java	format	whole	int	0	DEF	$ != 0
843	138	8	ProperFractionFormat.java	parse	ret	Fraction	0	RET	$ != null
844	149	8	ProperFractionFormat.java	parse	whole	Number	0	RET	$ == null
845	162	8	ProperFractionFormat.java	parse	num	Number	0	RET	$ == null
846	170	8	ProperFractionFormat.java	parse	num	Number	0	RET	$.intValue() < 0
847	201	8	ProperFractionFormat.java	parse	den	Number	0	RET	$ == null
848	209	8	ProperFractionFormat.java	parse	den	Number	0	RET	$.intValue() < 0
849	227	8	ProperFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
33624	87	8	QRDecompositionImpl.java	QRDecompositionImpl	minor	int	0	NIL-FOR	$ < FastMath.min(m, n)
33624	87	8	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	minor < FastMath.min($, n)
33624	87	8	QRDecompositionImpl.java	QRDecompositionImpl	n	int	0	NIL-FOR	minor < FastMath.min(m, $)
33625	99	12	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
33625	99	12	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
1280	106	12	QRDecompositionImpl.java	QRDecompositionImpl	a	double	0	DEF	$ != 0.0
33626	130	16	QRDecompositionImpl.java	QRDecompositionImpl	col	int	0	NIL-FOR	$ < n
33626	130	16	QRDecompositionImpl.java	QRDecompositionImpl	n	int	0	NIL-FOR	col < $
33627	133	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
33627	133	20	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
33628	139	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
33628	139	20	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
1281	150	8	QRDecompositionImpl.java	getR	THIS	QRDecompositionImpl	0	DEF	$.cachedR == null
33629	158	12	QRDecompositionImpl.java	getR	row	int	0	NIL-FOR	$ >= 0
33630	160	16	QRDecompositionImpl.java	getR	col	int	0	NIL-FOR	$ < n
33630	160	16	QRDecompositionImpl.java	getR	n	int	0	NIL-FOR	col < $
1282	172	8	QRDecompositionImpl.java	getQ	THIS	QRDecompositionImpl	0	DEF	$.cachedQ == null
1283	180	8	QRDecompositionImpl.java	getQT	THIS	QRDecompositionImpl	0	DEF	$.cachedQT == null
33631	192	12	QRDecompositionImpl.java	getQT	minor	int	0	NIL-FOR	$ >= FastMath.min(m, n)
33631	192	12	QRDecompositionImpl.java	getQT	n	int	0	NIL-FOR	minor >= FastMath.min(m, $)
33631	192	12	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	minor >= FastMath.min($, n)
33632	196	12	QRDecompositionImpl.java	getQT	minor	int	0	NIL-FOR	$ >= 0
1284	199	16	QRDecompositionImpl.java	getQT	qrtMinor	double[]	0	DEF	$[minor] != 0.0
1284	199	16	QRDecompositionImpl.java	getQT	minor	int	0	DEF	qrtMinor[$] != 0.0
33633	200	20	QRDecompositionImpl.java	getQT	col	int	0	NIL-FOR	$ < m
33633	200	20	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	col < $
33634	202	24	QRDecompositionImpl.java	getQT	row	int	0	NIL-FOR	$ < m
33634	202	24	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	row < $
33635	207	24	QRDecompositionImpl.java	getQT	row	int	0	NIL-FOR	$ < m
33635	207	24	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	row < $
1285	221	8	QRDecompositionImpl.java	getH	THIS	QRDecompositionImpl	0	DEF	$.cachedH == null
33636	226	12	QRDecompositionImpl.java	getH	i	int	0	NIL-FOR	$ < m
33636	226	12	QRDecompositionImpl.java	getH	m	int	0	NIL-FOR	i < $
33637	227	16	QRDecompositionImpl.java	getH	j	int	0	NIL-FOR	$ < FastMath.min(i + 1, n)
33637	227	16	QRDecompositionImpl.java	getH	i	int	0	NIL-FOR	j < FastMath.min($ + 1, n)
33637	227	16	QRDecompositionImpl.java	getH	n	int	0	NIL-FOR	j < FastMath.min(i + 1, $)
1971	178	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
1972	185	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
1973	193	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
1974	199	8	RandomDataImpl.java	nextHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
34192	214	8	RandomDataImpl.java	nextHexString	THIS	RandomDataImpl	0	NIL-FOR	i < randomBytes.$.length
34192	214	8	RandomDataImpl.java	nextHexString	i	int	0	NIL-FOR	$ < randomBytes.length
34192	214	8	RandomDataImpl.java	nextHexString	randomBytes	byte[]	0	NIL-FOR	i < $.length
1975	225	12	RandomDataImpl.java	nextHexString	hex	String	0	DEF	$.length() == 1
1976	245	8	RandomDataImpl.java	nextInt	lower	int	0	NumberIsTooLargeException	$ >= upper
1976	245	8	RandomDataImpl.java	nextInt	upper	int	0	NumberIsTooLargeException	lower >= $
1977	265	8	RandomDataImpl.java	nextLong	lower	long	0	NumberIsTooLargeException	$ >= upper
1977	265	8	RandomDataImpl.java	nextLong	upper	long	0	NumberIsTooLargeException	lower >= $
1978	295	8	RandomDataImpl.java	nextSecureHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
34193	314	8	RandomDataImpl.java	nextSecureHexString	iter	int	0	NIL-FOR	$ < numIter + 1
34193	314	8	RandomDataImpl.java	nextSecureHexString	numIter	int	0	NIL-FOR	iter < $ + 1
34194	323	12	RandomDataImpl.java	nextSecureHexString	THIS	RandomDataImpl	0	NIL-FOR	i < hash.$.length
34194	323	12	RandomDataImpl.java	nextSecureHexString	i	int	0	NIL-FOR	$ < hash.length
34194	323	12	RandomDataImpl.java	nextSecureHexString	hash	byte[]	0	NIL-FOR	i < $.length
1979	334	16	RandomDataImpl.java	nextSecureHexString	hex	String	0	DEF	$.length() == 1
1980	356	8	RandomDataImpl.java	nextSecureInt	lower	int	0	NumberIsTooLargeException	$ >= upper
1980	356	8	RandomDataImpl.java	nextSecureInt	upper	int	0	NumberIsTooLargeException	lower >= $
1981	377	8	RandomDataImpl.java	nextSecureLong	lower	long	0	NumberIsTooLargeException	$ >= upper
1981	377	8	RandomDataImpl.java	nextSecureLong	upper	long	0	NumberIsTooLargeException	lower >= $
1982	403	8	RandomDataImpl.java	nextPoisson	mean	double	0	NotStrictlyPositiveException	$ <= 0
1983	408	8	RandomDataImpl.java	nextPoisson	pivot	double	1	RET	mean < $
1983	408	8	RandomDataImpl.java	nextPoisson	mean	double	1	RET	$ < pivot
34195	415	12	RandomDataImpl.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * mean
34195	415	12	RandomDataImpl.java	nextPoisson	mean	double	0	NIL-WHILE	n < 1000 * $
1984	418	16	RandomDataImpl.java	nextPoisson	p	double	1	DEF	r >= $
1984	418	16	RandomDataImpl.java	nextPoisson	r	double	1	DEF	$ >= p
1985	450	16	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ <= p1
1985	450	16	RandomDataImpl.java	nextPoisson	p1	double	1	DEF	u <= $
1986	453	20	RandomDataImpl.java	nextPoisson	lambda	double	0	DEF	x < -$
1986	453	20	RandomDataImpl.java	nextPoisson	delta	double	0	DEF	x > $
1986	453	20	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ > delta
1986	453	20	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ < -lambda
1987	460	20	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ > p1 + p2
1987	460	20	RandomDataImpl.java	nextPoisson	p1	double	1	DEF	u > $ + p2
1987	460	20	RandomDataImpl.java	nextPoisson	p2	double	1	DEF	u > p1 + $
1988	471	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < -t
1988	471	16	RandomDataImpl.java	nextPoisson	a	int	0	DEF	$ == 0
1988	471	16	RandomDataImpl.java	nextPoisson	t	double	0	DEF	v < -$
1989	477	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < qa
1989	477	16	RandomDataImpl.java	nextPoisson	qa	double	0	DEF	v < $
1990	481	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ > qr
1990	481	16	RandomDataImpl.java	nextPoisson	qr	double	0	DEF	v > $
1991	484	16	RandomDataImpl.java	nextPoisson	lambda	double	0	DEF	v < y * logLambda - MathUtils.factorialLog((int) (y + $)) + logLambdaFactorial
1991	484	16	RandomDataImpl.java	nextPoisson	logLambda	double	0	DEF	v < y * $ - MathUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
1991	484	16	RandomDataImpl.java	nextPoisson	logLambdaFactorial	double	0	DEF	v < y * logLambda - MathUtils.factorialLog((int) (y + lambda)) + $
1991	484	16	RandomDataImpl.java	nextPoisson	y	double	0	DEF	v < $ * logLambda - MathUtils.factorialLog((int) ($ + lambda)) + logLambdaFactorial
1991	484	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < y * logLambda - MathUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
1992	506	8	RandomDataImpl.java	nextGaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
1993	528	8	RandomDataImpl.java	nextExponential	mean	double	0	NotStrictlyPositiveException	$ <= 0.0
34196	537	8	RandomDataImpl.java	nextExponential	u	double	0	NIL-WHILE	$ < 0.5
1994	546	8	RandomDataImpl.java	nextExponential	u	double	0	RET	$ <= EXPONENTIAL_SA_QI[0]
34197	556	8	RandomDataImpl.java	nextExponential	u	double	0	NIL-DOWHILE	$ > EXPONENTIAL_SA_QI[i]
34197	556	8	RandomDataImpl.java	nextExponential	i	int	0	NIL-DOWHILE	u > EXPONENTIAL_SA_QI[$]
1995	560	12	RandomDataImpl.java	nextExponential	u2	double	0	DEF	$ < umin
1995	560	12	RandomDataImpl.java	nextExponential	umin	double	0	DEF	u2 < $
1996	588	8	RandomDataImpl.java	nextUniform	lower	double	0	NumberIsTooLargeException	$ >= upper
1996	588	8	RandomDataImpl.java	nextUniform	upper	double	0	NumberIsTooLargeException	lower >= $
34198	596	8	RandomDataImpl.java	nextUniform	u	double	0	NIL-WHILE	$ <= 0.0
1997	777	8	RandomDataImpl.java	getRan	THIS	RandomDataImpl	0	DEF	$.rand == null
1998	793	8	RandomDataImpl.java	getSecRan	THIS	RandomDataImpl	0	DEF	$.secRand == null
1999	810	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
2000	824	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
2001	840	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
2002	851	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
2003	913	8	RandomDataImpl.java	nextPermutation	n	int	0	NumberIsTooLargeException	k > $
2003	913	8	RandomDataImpl.java	nextPermutation	k	int	0	NumberIsTooLargeException	$ > n
2004	917	8	RandomDataImpl.java	nextPermutation	k	int	0	NotStrictlyPositiveException	$ == 0
34199	925	8	RandomDataImpl.java	nextPermutation	i	int	0	NIL-FOR	$ < k
34199	925	8	RandomDataImpl.java	nextPermutation	k	int	0	NIL-FOR	i < $
2005	952	8	RandomDataImpl.java	nextSample	len	int	0	NumberIsTooLargeException	k > $
2005	952	8	RandomDataImpl.java	nextSample	k	int	0	NumberIsTooLargeException	$ > len
2006	956	8	RandomDataImpl.java	nextSample	k	int	0	NotStrictlyPositiveException	$ <= 0
34200	963	8	RandomDataImpl.java	nextSample	i	int	0	NIL-FOR	$ < k
34200	963	8	RandomDataImpl.java	nextSample	k	int	0	NIL-FOR	i < $
2007	995	8	RandomDataImpl.java	nextInversionDeviate	glb	int	1	RET	distribution.cumulativeProbability($) == 1.0d
2007	995	8	RandomDataImpl.java	nextInversionDeviate	distribution	IntegerDistribution	1	RET	$.cumulativeProbability(glb) == 1.0d
34201	1015	8	RandomDataImpl.java	shuffle	i	int	0	NIL-FOR	$ >= end
34201	1015	8	RandomDataImpl.java	shuffle	end	int	0	NIL-FOR	i >= $
2008	1016	12	RandomDataImpl.java	shuffle	i	int	1	DEF	$ == 0
34202	1036	8	RandomDataImpl.java	getNatural	i	int	0	NIL-FOR	$ < n
34202	1036	8	RandomDataImpl.java	getNatural	n	int	0	NIL-FOR	i < $
2045	123	8	RandomKey.java	decodeGeneric	l	int	0	IllegalArgumentException	representation.size() != $
2045	123	8	RandomKey.java	decodeGeneric	representation	List<Double>	0	IllegalArgumentException	$.size() != l
2046	126	8	RandomKey.java	decodeGeneric	representation	List<Double>	0	IllegalArgumentException	$.size() != sortedRepr.size()
2046	126	8	RandomKey.java	decodeGeneric	sortedRepr	List<Double>	0	IllegalArgumentException	representation.size() != $.size()
34219	134	8	RandomKey.java	decodeGeneric	i	int	0	NIL-FOR	$<l
34219	134	8	RandomKey.java	decodeGeneric	l	int	0	NIL-FOR	i<$
2047	152	8	RandomKey.java	isSame	another	Chromosome	0	RET	$ instanceof RandomKey<?>
2048	157	8	RandomKey.java	isSame	THIS	RandomKey	0	RET	$.getLength() != anotherRk.getLength()
2048	157	8	RandomKey.java	isSame	anotherRk	RandomKey<?>	0	RET	getLength() != $.getLength()
34220	166	8	RandomKey.java	isSame	THIS	RandomKey	0	NIL-FOR	i<$.getLength()
34220	166	8	RandomKey.java	isSame	i	int	0	NIL-FOR	$<getLength()
2049	167	12	RandomKey.java	isSame	i	int	0	RET	thisPerm.get($) != anotherPerm.get($)
2049	167	12	RandomKey.java	isSame	thisPerm	List<Integer>	0	RET	$.get(i) != anotherPerm.get(i)
2049	167	12	RandomKey.java	isSame	anotherPerm	List<Integer>	0	RET	thisPerm.get(i) != $.get(i)
2050	181	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val < 0
2050	181	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val > 1
34221	199	8	RandomKey.java	randomPermutation	i	int	0	NIL-FOR	$<l
34221	199	8	RandomKey.java	randomPermutation	l	int	0	NIL-FOR	i<$
34222	215	8	RandomKey.java	identityPermutation	i	int	0	NIL-FOR	$<l
34222	215	8	RandomKey.java	identityPermutation	l	int	0	NIL-FOR	i<$
2051	255	8	RandomKey.java	inducedPermutation	originalData	List<S>	0	IllegalArgumentException	$.size() != permutedData.size()
2051	255	8	RandomKey.java	inducedPermutation	permutedData	List<S>	0	IllegalArgumentException	originalData.size() != $.size()
34223	263	8	RandomKey.java	inducedPermutation	i	int	0	NIL-FOR	$<l
34223	263	8	RandomKey.java	inducedPermutation	l	int	0	NIL-FOR	i<$
2052	265	12	RandomKey.java	inducedPermutation	index	int	0	IllegalArgumentException	$ == -1
34224	290	8	RandomKey.java	baseSequence	i	int	0	NIL-FOR	$<l
34224	290	8	RandomKey.java	baseSequence	l	int	0	NIL-FOR	i<$
2026	41	8	RandomKeyMutation.java	mutate	original	Chromosome	0	DEF	$ instanceof RandomKey<?>
1350	95	8	RealLinearOperator.java	operate	THIS	RealLinearOperator	0	DimensionMismatchException	x.$.length != $.getColumnDimension()
1350	95	8	RealLinearOperator.java	operate	x	double[]	0	DimensionMismatchException	$.length != getColumnDimension()
1351	99	8	RealLinearOperator.java	operate	y	RealVector	1	RET	$ instanceof ArrayRealVector
33615	202	8	RealVectorFormat.java	format	i	int	0	NIL-FOR	$ < vector.getDimension()
33615	202	8	RealVectorFormat.java	format	vector	RealVector	0	NIL-FOR	i < $.getDimension()
1267	203	12	RealVectorFormat.java	format	i	int	0	DEF	$ > 0
1268	226	8	RealVectorFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1269	246	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedPrefix, pos)
1269	246	8	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
1269	246	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
33616	252	8	RealVectorFormat.java	parse	loop	boolean	0	NIL-FOR	$
1270	254	12	RealVectorFormat.java	parse	components	List<Number>	0	DEF	$.isEmpty()
1271	256	16	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	DEF	CompositeFormat.parseFixedstring(source, $.trimmedSeparator, pos)
1271	256	16	RealVectorFormat.java	parse	source	String	0	DEF	CompositeFormat.parseFixedstring($, trimmedSeparator, pos)
1271	256	16	RealVectorFormat.java	parse	pos	ParsePosition	0	DEF	CompositeFormat.parseFixedstring(source, trimmedSeparator, $)
1272	261	12	RealVectorFormat.java	parse	loop	boolean	0	RET	$
1273	264	16	RealVectorFormat.java	parse	component	Number	1	DEF	$ != null
1274	278	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSuffix, pos)
1274	278	8	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
1274	278	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
33617	284	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	NIL-FOR	i < data.$.length
33617	284	8	RealVectorFormat.java	parse	i	int	0	NIL-FOR	$ < data.length
33617	284	8	RealVectorFormat.java	parse	data	double[]	0	NIL-FOR	i < $.length
33299	60	8	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
33299	60	8	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
33300	65	8	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	loop	boolean	0	NIL-FOR	$
33301	69	12	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
33301	69	12	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
1064	72	16	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	ii	int	0	DEF	c[$][$] > c[isi][isi]
1064	72	16	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	isi	int	0	DEF	c[ii][ii] > c[$][$]
1064	72	16	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	c	double[][]	0	DEF	$[ii][ii] > $[isi][isi]
1065	79	12	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	swap	int[]	0	DEF	$[r] != r
1065	79	12	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	r	int	0	DEF	swap[$] != $
1066	87	12	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	ir	int	1	NonPositiveDefiniteMatrixException	c[$][$] < small
1066	87	12	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	c	double[][]	1	NonPositiveDefiniteMatrixException	$[ir][ir] < small
1066	87	12	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	small	double	1	NonPositiveDefiniteMatrixException	c[ir][ir] < $
1067	89	16	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	r	int	0	NonPositiveDefiniteMatrixException	$ == 0
33302	94	16	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
33302	94	16	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
1068	95	20	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	i	int	0	NonPositiveDefiniteMatrixException	c[index[$]][index[$]] < -small
1068	95	20	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	c	double[][]	0	NonPositiveDefiniteMatrixException	$[index[i]][index[i]] < -small
1068	95	20	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	index	int[]	0	NonPositiveDefiniteMatrixException	c[$[i]][$[i]] < -small
1068	95	20	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	small	double	0	NonPositiveDefiniteMatrixException	c[index[i]][index[i]] < -$
33303	113	16	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
33303	113	16	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
33304	118	20	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	j	int	0	NIL-FOR	$ < i
33304	118	20	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	i	int	0	NIL-FOR	j < $
33305	134	8	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
33305	134	8	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
33306	135	12	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	j	int	0	NIL-FOR	$ < r
33306	135	12	RectangularCholeskyDecompositionImpl.java	RectangularCholeskyDecompositionImpl	r	int	0	NIL-FOR	j < $
611	44	8	RegionFactory.java	buildConvex	THIS	RegionFactory	0	RET	hyperplanes.$.length == 0
611	44	8	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$ == null
611	44	8	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$.length == 0
612	55	12	RegionFactory.java	buildConvex	THIS	RegionFactory	0	DEF	node.insertCut($.hyperplane)
612	55	12	RegionFactory.java	buildConvex	node	BSPTree<S>	0	DEF	$.insertCut(hyperplane)
613	137	8	RegionFactory.java	recurseComplement	node	BSPTree<S>	0	RET	$.getCut() == null
614	143	8	RegionFactory.java	recurseComplement	attribute	BoundaryAttribute<S>	0	DEF	$ != null
1925	68	8	RegressionResults.java	RegressionResults	copyData	boolean	1	DEF	$
34172	71	12	RegressionResults.java	RegressionResults	THIS	RegressionResults	0	NIL-FOR	i < varcov.$.length
34172	71	12	RegressionResults.java	RegressionResults	i	int	0	NIL-FOR	$ < varcov.length
34172	71	12	RegressionResults.java	RegressionResults	varcov	double[][]	0	NIL-FOR	i < $.length
1926	85	8	RegressionResults.java	RegressionResults	rank	int	0	DEF	$ > 2
1927	96	8	RegressionResults.java	RegressionResults	containsConstant	boolean	1	DEF	$
1928	116	8	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	RET	$.parameters == null
1929	119	8	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	IndexOutOfBoundsException	index >= $.parameters.length
1929	119	8	RegressionResults.java	getParameterEstimate	index	int	0	IndexOutOfBoundsException	$ >= this.parameters.length
1929	119	8	RegressionResults.java	getParameterEstimate	index	int	0	IndexOutOfBoundsException	$ < 0
1930	136	8	RegressionResults.java	getParameterEstimates	THIS	RegressionResults	0	RET	$.parameters == null
1931	152	8	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	RET	$.parameters == null
1932	155	8	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	IndexOutOfBoundsException	index >= $.parameters.length
1932	155	8	RegressionResults.java	getStdErrorOfEstimate	index	int	0	IndexOutOfBoundsException	$ >= this.parameters.length
1932	155	8	RegressionResults.java	getStdErrorOfEstimate	index	int	0	IndexOutOfBoundsException	$ < 0
1933	159	8	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	Double.isNaN($)
1933	159	8	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	$ > Double.MIN_VALUE
1934	177	8	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	RET	$.parameters == null
34173	181	8	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	NIL-FOR	i < $.parameters.length
34173	181	8	RegressionResults.java	getStdErrorOfEstimates	i	int	0	NIL-FOR	$ < this.parameters.length
1935	183	12	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	$ > Double.MIN_VALUE
1935	183	12	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	Double.isNaN($)
1936	203	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
1937	206	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	IndexOutOfBoundsException	i >= $.parameters.length
1937	206	8	RegressionResults.java	getCovarianceOfParameters	i	int	0	IndexOutOfBoundsException	$ < 0
1937	206	8	RegressionResults.java	getCovarianceOfParameters	i	int	0	IndexOutOfBoundsException	$ >= this.parameters.length
1938	210	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	IndexOutOfBoundsException	j >= $.parameters.length
1938	210	8	RegressionResults.java	getCovarianceOfParameters	j	int	0	IndexOutOfBoundsException	$ < 0
1938	210	8	RegressionResults.java	getCovarianceOfParameters	j	int	0	IndexOutOfBoundsException	$ >= this.parameters.length
1939	226	8	RegressionResults.java	getNumberOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
1940	365	8	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.isSymmetricVCD
1941	366	12	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.varCovData.length > 1
1942	368	16	RegressionResults.java	getVcvElement	i	int	1	RET	$ == j
1942	368	16	RegressionResults.java	getVcvElement	j	int	1	RET	i == $
1943	370	23	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	i >= $.varCovData[j].length
1943	370	23	RegressionResults.java	getVcvElement	i	int	1	RET	$ >= varCovData[j].length
1943	370	23	RegressionResults.java	getVcvElement	j	int	1	RET	i >= varCovData[$].length
1944	376	16	RegressionResults.java	getVcvElement	i	int	1	RET	$ > j
1944	376	16	RegressionResults.java	getVcvElement	j	int	1	RET	i > $
34	182	8	ResizableDoubleArray.java	ResizableDoubleArray	initialArray	double[]	1	DEF	$ == null
35	301	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + $.numElements) > $.internalArray.$.length
36	305	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
37	344	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	($.startIndex + ($.numElements + 1)) > $.internalArray.$.length
38	354	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
39	370	8	ResizableDoubleArray.java	substituteMostRecentElement	THIS	ResizableDoubleArray	0	DEF	$.numElements < 1
40	395	8	ResizableDoubleArray.java	checkContractExpand	contraction	float	0	DEF	$ < expansion
40	395	8	ResizableDoubleArray.java	checkContractExpand	expansion	float	0	DEF	contraction < $
41	401	8	ResizableDoubleArray.java	checkContractExpand	contraction	float	0	DEF	$ <= 1.0
42	407	8	ResizableDoubleArray.java	checkContractExpand	expansion	float	0	DEF	$ <= 1.0
43	494	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	1	DEF	i > $.numElements
43	494	8	ResizableDoubleArray.java	discardExtremeElements	i	int	1	DEF	$ > numElements
44	498	14	ResizableDoubleArray.java	discardExtremeElements	i	int	1	DEF	$ < 0
45	505	12	ResizableDoubleArray.java	discardExtremeElements	front	boolean	0	DEF	$
46	509	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
47	531	8	ResizableDoubleArray.java	expand	THIS	ResizableDoubleArray	1	DEF	$.expansionMode == MULTIPLICATIVE_MODE
48	580	8	ResizableDoubleArray.java	getElement	THIS	ResizableDoubleArray	1	DEF	index >= $.numElements
48	580	8	ResizableDoubleArray.java	getElement	index	int	1	DEF	$ >= numElements
49	584	15	ResizableDoubleArray.java	getElement	index	int	1	RET	$ >= 0
50	698	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ < 0
51	703	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	index + 1 > $.numElements
51	703	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ + 1 > numElements
52	706	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + index) >= $.internalArray.$.length
52	706	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	(startIndex + $) >= internalArray.length
53	739	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	DEF	$ != MULTIPLICATIVE_MODE
53	739	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	DEF	$ != ADDITIVE_MODE
54	759	8	ResizableDoubleArray.java	setInitialCapacity	initialCapacity	int	1	DEF	$ > 0
55	781	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	$ < 0
56	789	8	ResizableDoubleArray.java	setNumElements	THIS	ResizableDoubleArray	0	DEF	($.startIndex + i) > $.internalArray.$.length
56	789	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	(startIndex + $) > internalArray.length
57	804	8	ResizableDoubleArray.java	shouldContract	THIS	ResizableDoubleArray	1	RET	$.expansionMode == MULTIPLICATIVE_MODE
58	885	8	ResizableDoubleArray.java	equals	THIS	ResizableDoubleArray	0	RET	object == $
58	885	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ == this
59	888	7	ResizableDoubleArray.java	equals	object	Object	0	RET	$ instanceof ResizableDoubleArray == false
60	901	15	ResizableDoubleArray.java	equals	result	boolean	1	RET	$
2681	79	8	RiddersSolver.java	doSolve	y1	double	0	RET	$ == 0
2682	82	8	RiddersSolver.java	doSolve	y2	double	0	RET	$ == 0
2683	96	12	RiddersSolver.java	doSolve	y3	double	0	RET	FastMath.abs($) <= functionValueAccuracy
2683	96	12	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y3) <= $
2684	107	12	RiddersSolver.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
2684	107	12	RiddersSolver.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
2684	107	12	RiddersSolver.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
2685	110	12	RiddersSolver.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
2685	110	12	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
2686	116	12	RiddersSolver.java	doSolve	correction	double	1	DEF	$ > 0.0
2687	117	16	RiddersSolver.java	doSolve	y	double	1	DEF	MathUtils.sign(y1) + MathUtils.sign($) == 0.0
2687	117	16	RiddersSolver.java	doSolve	y1	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
2688	127	16	RiddersSolver.java	doSolve	y	double	1	DEF	MathUtils.sign(y2) + MathUtils.sign($) == 0.0
2688	127	16	RiddersSolver.java	doSolve	y2	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
34573	63	8	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	NIL-FOR	i <= $.maximalIterationCount
34573	63	8	RombergIntegrator.java	integrate	i	int	0	NIL-FOR	$ <= maximalIterationCount
34574	71	12	RombergIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= i
34574	71	12	RombergIntegrator.java	integrate	i	int	0	NIL-FOR	j <= $
2795	78	12	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	RET	i >= $.minimalIterationCount
2795	78	12	RombergIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
2796	81	16	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	RET	delta <= $.absoluteAccuracy
2796	81	16	RombergIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
2796	81	16	RombergIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
2796	81	16	RombergIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
2797	96	8	RombergIntegrator.java	verifyIterationCount	THIS	RombergIntegrator	0	DEF	$.maximalIterationCount > 32
633	136	4	Rotation.java	Rotation	needsNormalization	boolean	0	DEF	$
634	176	4	Rotation.java	Rotation	norm	double	0	DEF	$ == 0
635	224	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m.$.length != 3
635	224	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[1].length != 3
635	224	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[0].length != 3
635	224	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[2].length != 3
635	224	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$.length != 3
635	224	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[1].length != 3
635	224	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[0].length != 3
635	224	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[2].length != 3
636	238	4	Rotation.java	Rotation	det	double	0	NotARotationMatrixException	$ < 0.0
637	256	4	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
638	265	6	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
639	274	8	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
640	320	2	Rotation.java	Rotation	u1u1	double	0	DEF	$ == 0
640	320	2	Rotation.java	Rotation	u2u2	double	0	DEF	$ == 0
640	320	2	Rotation.java	Rotation	v1v1	double	0	DEF	$ == 0
640	320	2	Rotation.java	Rotation	v2v2	double	0	DEF	$ == 0
641	369	2	Rotation.java	Rotation	c	double	0	RET	$ == 0
642	391	4	Rotation.java	Rotation	c	double	0	RET	$ == 0
643	401	6	Rotation.java	Rotation	c	double	0	RET	$ == 0
644	451	4	Rotation.java	Rotation	normProduct	double	0	DEF	$ == 0
645	457	4	Rotation.java	Rotation	normProduct	double	1	DEF	dot < ((2.0e-15 - 1.0) * $)
645	457	4	Rotation.java	Rotation	dot	double	1	DEF	$ < ((2.0e-15 - 1.0) * normProduct)
646	553	4	Rotation.java	getAxis	squaredSine	double	1	RET	$ == 0
647	555	11	Rotation.java	getAxis	THIS	Rotation	0	RET	$.q0 < 0
648	568	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 < -0.1
648	568	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 > 0.1
649	570	11	Rotation.java	getAngle	THIS	Rotation	0	RET	$.q0 < 0
650	614	4	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
651	623	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
651	623	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
652	632	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
653	641	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
653	641	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
654	650	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
655	659	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
655	659	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
656	668	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
657	677	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
657	677	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
658	686	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
659	695	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
659	695	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
660	704	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
661	713	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
661	713	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
662	722	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
663	731	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
663	731	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
664	740	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
665	749	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
665	749	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
666	758	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
667	767	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
667	767	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
668	776	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
669	785	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
669	785	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
670	794	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
671	803	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
671	803	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
672	821	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
672	821	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
33140	980	4	Rotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
673	1021	6	Rotation.java	orthogonalizeMatrix	fn	double	0	RET	FastMath.abs(fn1 - $) <= threshold
673	1021	6	Rotation.java	orthogonalizeMatrix	fn1	double	0	RET	FastMath.abs($ - fn) <= threshold
673	1021	6	Rotation.java	orthogonalizeMatrix	threshold	double	0	RET	FastMath.abs(fn1 - fn) <= $
2222	105	4	RungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
2222	105	4	RungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
34364	109	4	RungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
34364	109	4	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
34365	130	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
34366	138	6	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
34366	138	6	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
34367	140	10	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
34367	140	10	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
34367	140	10	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
34368	142	14	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
34368	142	14	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
34369	153	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
34369	153	6	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
34369	153	6	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
34370	155	10	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
34370	155	10	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
2223	167	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	DEF	$.isLastStep
2224	175	10	RungeKuttaIntegrator.java	integrate	nextIsLast	boolean	0	DEF	$
2119	83	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	1	DEF	interpolator.$.currentState != null
2119	83	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
34273	87	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < interpolator.$.yDotK.$.length
34273	87	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.yDotK.length
34273	87	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.length
34274	143	4	RungeKuttaStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < kMax
34274	143	4	RungeKuttaStepInterpolator.java	writeExternal	kMax	int	0	NIL-FOR	k < $
34275	144	6	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
34275	144	6	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
34276	165	4	RungeKuttaStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
34276	165	4	RungeKuttaStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
34277	167	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
34277	167	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
2120	174	4	RungeKuttaStepInterpolator.java	readExternal	THIS	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
983	109	8	SaddlePointExpansion.java	getStirlingError	z	double	1	DEF	$ < 15.0
984	111	12	SaddlePointExpansion.java	getStirlingError	z2	double	1	DEF	FastMath.floor($) == $
985	147	8	SaddlePointExpansion.java	getDeviancePart	x	double	1	DEF	FastMath.abs($ - mu) < 0.1 * ($ + mu)
985	147	8	SaddlePointExpansion.java	getDeviancePart	mu	double	1	DEF	FastMath.abs(x - $) < 0.1 * (x + $)
33163	155	12	SaddlePointExpansion.java	getDeviancePart	s1	double	0	NIL-WHILE	$ != s
33163	155	12	SaddlePointExpansion.java	getDeviancePart	s	double	0	NIL-WHILE	s1 != $
986	180	8	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == 0
987	181	12	SaddlePointExpansion.java	logBinomialProbability	p	double	1	DEF	$ < 0.1
988	186	15	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == n
988	186	15	SaddlePointExpansion.java	logBinomialProbability	n	int	1	DEF	x == $
989	187	12	SaddlePointExpansion.java	logBinomialProbability	q	double	1	DEF	$ < 0.1
2702	83	8	SecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
2703	86	8	SecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
2704	107	12	SecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
2705	120	12	SecantSolver.java	doSolve	f1	double	0	RET	FastMath.abs($) <= ftol
2705	120	12	SecantSolver.java	doSolve	ftol	double	0	RET	FastMath.abs(f1) <= $
2706	126	12	SecantSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1), atol)
2706	126	12	SecantSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($), atol)
2706	126	12	SecantSolver.java	doSolve	atol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), $)
2706	126	12	SecantSolver.java	doSolve	rtol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1), atol)
1698	80	8	SecondMoment.java	increment	THIS	SecondMoment	0	DEF	$.n < 1
1708	183	8	SemiVariance.java	evaluate	values	double[]	0	NullArgumentException	$ == null
1709	281	8	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 0
1709	281	8	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 0
1710	284	12	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 1
1710	284	12	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 1
34088	291	16	SemiVariance.java	evaluate	i	int	0	NIL-FOR	$ < length
34088	291	16	SemiVariance.java	evaluate	length	int	0	NIL-FOR	i < $
1711	292	20	SemiVariance.java	evaluate	i	int	0	DEF	(values[$] > cutoff) == booleanDirection
1711	292	20	SemiVariance.java	evaluate	booleanDirection	boolean	0	DEF	(values[i] > cutoff) == $
1711	292	20	SemiVariance.java	evaluate	values	double[]	0	DEF	($[i] > cutoff) == booleanDirection
1711	292	20	SemiVariance.java	evaluate	cutoff	double	0	DEF	(values[i] > $) == booleanDirection
1712	298	16	SemiVariance.java	evaluate	corrected	boolean	1	RET	$
34062	77	8	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	NIL-FOR	i < p.$.length
34062	77	8	SimpleRealPointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
34062	77	8	SimpleRealPointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1640	80	12	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	RET	difference > $.getAbsoluteThreshold()
1640	80	12	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	RET	difference > size * $.getRelativeThreshold()
1640	80	12	SimpleRealPointChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1640	80	12	SimpleRealPointChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1640	80	12	SimpleRealPointChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
1945	125	8	SimpleRegression.java	addData	THIS	SimpleRegression	1	DEF	$.n == 0
1946	141	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.n > 2
1947	161	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 0
1948	173	12	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 2
34174	196	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
34174	196	8	SimpleRegression.java	addData	i	int	0	NIL-FOR	$ < data.length
34174	196	8	SimpleRegression.java	addData	data	double[][]	0	NIL-FOR	i < $.length
34175	216	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
34175	216	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	$.n > 0
34175	216	8	SimpleRegression.java	removeData	i	int	0	NIL-FOR	$ < data.length
34175	216	8	SimpleRegression.java	removeData	data	double[][]	0	NIL-FOR	i < $.length
1949	301	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	$.n < 2
1950	304	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	FastMath.abs($.sumXX) < 10 * Double.MIN_VALUE
1951	354	8	SimpleRegression.java	getTotalSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
1952	368	8	SimpleRegression.java	getXSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
1953	414	8	SimpleRegression.java	getMeanSquareError	THIS	SimpleRegression	0	RET	$.n < 3
1954	437	8	SimpleRegression.java	getR	b1	double	0	DEF	$ < 0
1955	552	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ <= 0
1955	552	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ >= 1
33885	76	8	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	NIL-FOR	i < p.$.length
33885	76	8	SimpleVectorialPointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
33885	76	8	SimpleVectorialPointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1412	81	12	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	RET	difference > size * $.getRelativeThreshold()
1412	81	12	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	RET	difference > $.getAbsoluteThreshold()
1412	81	12	SimpleVectorialPointChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1412	81	12	SimpleVectorialPointChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1412	81	12	SimpleVectorialPointChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
33911	78	8	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	NIL-FOR	i < p.$.length
33911	78	8	SimpleVectorialValueChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
33911	78	8	SimpleVectorialValueChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1497	83	12	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	RET	difference > $.getAbsoluteThreshold()
1497	83	12	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	RET	difference > size * $.getRelativeThreshold()
1497	83	12	SimpleVectorialValueChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1497	83	12	SimpleVectorialValueChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1497	83	12	SimpleVectorialValueChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
1633	112	8	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NullArgumentException	$.simplex == null
1634	144	12	SimplexOptimizer.java	doOptimize	iteration	int	0	RET	$ > 0
34060	146	16	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NIL-FOR	i < $.simplex.getSize()
34060	146	16	SimplexOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < simplex.getSize()
1635	150	16	SimplexOptimizer.java	doOptimize	converged	boolean	0	RET	$
33890	72	8	SimplexSolver.java	getPivotColumn	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
33890	72	8	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
1457	74	12	SimplexSolver.java	getPivotColumn	THIS	SimplexSolver	0	DEF	MathUtils.compareTo(entry, minValue, $.maxUlps) < 0
1457	74	12	SimplexSolver.java	getPivotColumn	entry	double	0	DEF	MathUtils.compareTo($, minValue, maxUlps) < 0
1457	74	12	SimplexSolver.java	getPivotColumn	minValue	double	0	DEF	MathUtils.compareTo(entry, $, maxUlps) < 0
33891	92	8	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getHeight()
33891	92	8	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1458	96	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	MathUtils.compareTo(entry, 0d, $.maxUlps) > 0
1458	96	12	SimplexSolver.java	getPivotRow	entry	double	0	DEF	MathUtils.compareTo($, 0d, maxUlps) > 0
1459	99	16	SimplexSolver.java	getPivotRow	cmp	int	1	DEF	$ == 0
1460	101	23	SimplexSolver.java	getPivotRow	cmp	int	0	DEF	$ < 0
1461	109	8	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	1	RET	$.size() == 0
1462	111	15	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	0	RET	$.size() > 1
33892	115	12	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getNumArtificialVariables()
33892	115	12	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
1463	118	14	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.row.equals(tableau.getBasicRow(column))
1463	118	14	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	MathUtils.equals(entry, 1d, $.maxUlps)
1463	118	14	SimplexSolver.java	getPivotRow	column	int	0	RET	row.equals(tableau.getBasicRow($))
1463	118	14	SimplexSolver.java	getPivotRow	entry	double	0	RET	MathUtils.equals($, 1d, maxUlps)
1463	118	14	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	row.equals($.getBasicRow(column))
1464	141	8	SimplexSolver.java	doIteration	pivotRow	Integer	0	UnboundedSolutionException	$ == null
33893	150	8	SimplexSolver.java	doIteration	i	int	0	NIL-FOR	$ < tableau.getHeight()
33893	150	8	SimplexSolver.java	doIteration	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1465	151	12	SimplexSolver.java	doIteration	i	int	0	DEF	$ != pivotRow
1465	151	12	SimplexSolver.java	doIteration	pivotRow	Integer	0	DEF	i != $
1466	168	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
33894	172	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
1467	177	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NoFeasibleSolutionException	MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, $.epsilon)
1467	177	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NoFeasibleSolutionException	MathUtils.equals($.getEntry(0, $.getRhsOffset()), 0d, epsilon)
33895	192	8	SimplexSolver.java	doOptimize	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
1471	154	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
33896	158	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getOriginalNumDecisionVariables()
33896	158	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getOriginalNumDecisionVariables()
1472	161	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
33897	164	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumSlackVariables()
33897	164	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumSlackVariables()
33898	167	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
33898	167	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1473	187	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
1474	198	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
33899	206	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	NIL-FOR	i < $.constraints.size()
33899	206	8	SimplexTableau.java	createTableau	i	int	0	NIL-FOR	$ < constraints.size()
1475	214	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
1476	223	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	1	DEF	constraint.getRelationship() == $.Relationship.LEQ
1476	223	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	1	DEF	$.getRelationship() == Relationship.LEQ
1477	225	19	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1477	225	19	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1478	230	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1478	230	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.EQ
1478	230	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1478	230	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.EQ
1479	260	8	SimplexTableau.java	normalize	constraint	LinearConstraint	0	RET	$.getValue() < 0
1480	285	12	SimplexTableau.java	getConstraintTypeCounts	THIS	SimplexTableau	0	DEF	$.constraint.getRelationship() == relationship
1480	285	12	SimplexTableau.java	getConstraintTypeCounts	relationship	Relationship	0	DEF	constraint.getRelationship() == $
33900	312	8	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
33900	312	8	SimplexTableau.java	getBasicRow	i	int	0	NIL-FOR	$ < getHeight()
1481	314	12	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	1	DEF	MathUtils.equals(entry, 1d, $.maxUlps)
1481	314	12	SimplexTableau.java	getBasicRow	entry	double	1	DEF	MathUtils.equals($, 1d, maxUlps)
1481	314	12	SimplexTableau.java	getBasicRow	row	Integer	1	DEF	$ == null
1482	316	19	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	RET	MathUtils.equals(entry, 0d, $.maxUlps)
1482	316	19	SimplexTableau.java	getBasicRow	entry	double	0	RET	MathUtils.equals($, 0d, maxUlps)
1483	328	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	RET	$.getNumObjectiveFunctions() == 1
33901	336	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getArtificialVariableOffset()
33901	336	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getArtificialVariableOffset()
1484	338	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	MathUtils.compareTo(entry, 0d, $.maxUlps) > 0
1484	338	12	SimplexTableau.java	dropPhase1Objective	entry	double	0	DEF	MathUtils.compareTo($, 0d, maxUlps) > 0
33902	344	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
33902	344	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1485	346	10	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	$.getBasicRow(col) == null
1485	346	10	SimplexTableau.java	dropPhase1Objective	col	int	0	DEF	getBasicRow($) == null
33903	352	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
33903	352	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getHeight()
33904	354	10	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
33904	354	10	SimplexTableau.java	dropPhase1Objective	j	int	0	NIL-FOR	$ < getWidth()
1486	355	12	SimplexTableau.java	dropPhase1Objective	j	int	0	DEF	columnsToDrop.contains($)
1486	355	12	SimplexTableau.java	dropPhase1Objective	columnsToDrop	List<Integer>	0	DEF	$.contains(j)
33905	361	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ >= 0
33906	382	8	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
33906	382	8	SimplexTableau.java	isOptimal	i	int	0	NIL-FOR	$ < getWidth() - 1
1487	384	12	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	RET	MathUtils.compareTo(entry, 0d, $.epsilon) < 0
1487	384	12	SimplexTableau.java	isOptimal	entry	double	0	RET	MathUtils.compareTo($, 0d, epsilon) < 0
33907	403	6	SimplexTableau.java	getSolution	THIS	SimplexTableau	0	NIL-FOR	i < coefficients.$.length
33907	403	6	SimplexTableau.java	getSolution	i	int	0	NIL-FOR	$ < coefficients.length
33907	403	6	SimplexTableau.java	getSolution	coefficients	double[]	0	NIL-FOR	i < $.length
1488	405	10	SimplexTableau.java	getSolution	colIndex	int	0	DEF	$ < 0
1489	410	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	basicRows.contains($)
1489	410	10	SimplexTableau.java	getSolution	basicRows	Set<Integer>	1	DEF	$.contains(basicRow)
33908	434	8	SimplexTableau.java	divideRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
33908	434	8	SimplexTableau.java	divideRow	j	int	0	NIL-FOR	$ < getWidth()
1490	565	6	SimplexTableau.java	equals	THIS	SimplexTableau	0	RET	$ == other
1490	565	6	SimplexTableau.java	equals	other	Object	0	RET	this == $
1491	569	6	SimplexTableau.java	equals	other	Object	0	RET	$ instanceof SimplexTableau
2782	56	8	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	$.minimalIterationCount == 1
34567	64	8	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	NIL-FOR	i <= $.maximalIterationCount
34567	64	8	SimpsonIntegrator.java	integrate	i	int	0	NIL-FOR	$ <= maximalIterationCount
2783	67	12	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	i >= $.minimalIterationCount
2783	67	12	SimpsonIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
2784	71	16	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	delta <= $.absoluteAccuracy
2784	71	16	SimpsonIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
2784	71	16	SimpsonIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
2784	71	16	SimpsonIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
2785	87	8	SimpsonIntegrator.java	verifyIterationCount	THIS	SimpsonIntegrator	0	DEF	$.maximalIterationCount > 64
33374	76	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n
33374	76	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < n
33375	77	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.n
33375	77	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	j	int	0	NIL-FOR	$ < n
33376	79	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	k < $.m
33376	79	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	NIL-FOR	$ < m
33377	90	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
33377	90	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < m
33378	91	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.m
33378	91	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	j	int	0	NIL-FOR	$ < m
33379	93	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	k < $.n
33379	93	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	NIL-FOR	$ < n
1113	100	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	1	DEF	$.m >= $.n
33380	124	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < p
33380	124	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	p	int	0	NIL-FOR	i < $
33381	131	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < p
33381	131	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	p	int	0	NIL-FOR	i < $
1114	134	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	product	double	0	DEF	$ < 0
1115	149	8	SingularValueDecompositionImpl.java	getUT	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedUt == null
1116	158	8	SingularValueDecompositionImpl.java	getS	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedS == null
1117	178	8	SingularValueDecompositionImpl.java	getVT	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedVt == null
33382	190	8	SingularValueDecompositionImpl.java	getCovariance	THIS	SingularValueDecompositionImpl	0	NIL-WHILE	$.singularValues[dimension] >= minSingularValue
33382	190	8	SingularValueDecompositionImpl.java	getCovariance	p	int	0	NIL-WHILE	dimension < $
33382	190	8	SingularValueDecompositionImpl.java	getCovariance	dimension	int	0	NIL-WHILE	singularValues[$] >= minSingularValue
33382	190	8	SingularValueDecompositionImpl.java	getCovariance	dimension	int	0	NIL-WHILE	$ < p
33382	190	8	SingularValueDecompositionImpl.java	getCovariance	minSingularValue	double	0	NIL-WHILE	singularValues[dimension] >= $
1118	194	8	SingularValueDecompositionImpl.java	getCovariance	dimension	int	0	NumberIsTooLargeException	$ == 0
33383	227	8	SingularValueDecompositionImpl.java	getRank	i	int	0	NIL-FOR	$ >= 0
1119	228	12	SingularValueDecompositionImpl.java	getRank	THIS	SingularValueDecompositionImpl	0	RET	$.singularValues[i] > threshold
1119	228	12	SingularValueDecompositionImpl.java	getRank	i	int	0	RET	singularValues[$] > threshold
1119	228	12	SingularValueDecompositionImpl.java	getRank	threshold	double	0	RET	singularValues[i] > $
1685	91	8	Skewness.java	increment	THIS	Skewness	0	DEF	$.incMoment
1686	106	8	Skewness.java	getResult	THIS	Skewness	0	RET	$.moment.$.n < 3
1687	110	8	Skewness.java	getResult	variance	double	1	RET	$ < 10E-20
1688	131	8	Skewness.java	clear	THIS	Skewness	0	DEF	$.incMoment
1689	159	8	Skewness.java	evaluate	THIS	Skewness	0	DEF	$.test(values, begin, length)
1689	159	8	Skewness.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1689	159	8	Skewness.java	evaluate	begin	int	0	DEF	test(values, $, length)
1689	159	8	Skewness.java	evaluate	length	int	0	DEF	$ > 2
1689	159	8	Skewness.java	evaluate	length	int	0	DEF	test(values, begin, $)
34081	169	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
34081	169	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
34081	169	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
34082	177	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
34082	177	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
34082	177	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2657	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
2657	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
2657	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
2657	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
2657	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
2657	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
2658	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
2658	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
2658	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
34526	84	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
34526	84	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
2659	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
2659	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
2659	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
2659	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
34527	96	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
34527	96	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
34528	98	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
34528	98	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
34529	108	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
34529	108	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
34530	110	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
34530	110	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
34531	118	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
34531	118	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
34532	120	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
34532	120	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
34533	130	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
34533	130	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
34534	132	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
34534	132	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
33384	91	8	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	i < $.rows
33384	91	8	SparseFieldMatrix.java	SparseFieldMatrix	i	int	0	NIL-FOR	$ < rows
33385	92	12	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	j < $.columns
33385	92	12	SparseFieldMatrix.java	SparseFieldMatrix	j	int	0	NIL-FOR	$ < columns
1120	105	8	SparseFieldMatrix.java	addToEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1120	105	8	SparseFieldMatrix.java	addToEntry	value	T	1	DEF	getField().getZero().equals($)
1121	151	8	SparseFieldMatrix.java	multiplyEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1121	151	8	SparseFieldMatrix.java	multiplyEntry	value	T	1	DEF	getField().getZero().equals($)
1122	164	8	SparseFieldMatrix.java	setEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1122	164	8	SparseFieldMatrix.java	setEntry	value	T	1	DEF	getField().getZero().equals($)
33449	109	8	SparseFieldVector.java	SparseFieldVector	THIS	SparseFieldVector	0	NIL-FOR	key < values.$.length
33449	109	8	SparseFieldVector.java	SparseFieldVector	key	int	0	NIL-FOR	$ < values.length
33449	109	8	SparseFieldVector.java	SparseFieldVector	values	T[]	0	NIL-FOR	key < $.length
33450	147	8	SparseFieldVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1153	151	12	SparseFieldVector.java	add	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1153	151	12	SparseFieldVector.java	add	key	int	1	DEF	entries.containsKey($)
33451	166	8	SparseFieldVector.java	add	THIS	SparseFieldVector	0	NIL-FOR	i < v.$.length
33451	166	8	SparseFieldVector.java	add	i	int	0	NIL-FOR	$ < v.length
33451	166	8	SparseFieldVector.java	add	v	T[]	0	NIL-FOR	i < $.length
33452	181	8	SparseFieldVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1154	190	8	SparseFieldVector.java	append	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
33453	207	8	SparseFieldVector.java	append	THIS	SparseFieldVector	0	NIL-FOR	i < a.$.length
33453	207	8	SparseFieldVector.java	append	i	int	0	NIL-FOR	$ < a.length
33453	207	8	SparseFieldVector.java	append	a	T[]	0	NIL-FOR	i < $.length
33454	223	8	SparseFieldVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
33455	235	8	SparseFieldVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
1155	238	12	SparseFieldVector.java	dotProduct	THIS	SparseFieldVector	0	DEF	idx < v.$.length
1155	238	12	SparseFieldVector.java	dotProduct	idx	int	0	DEF	$ < v.length
1155	238	12	SparseFieldVector.java	dotProduct	v	T[]	0	DEF	idx < $.length
33456	251	8	SparseFieldVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
33457	263	8	SparseFieldVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
33458	275	8	SparseFieldVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
33459	287	8	SparseFieldVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
33460	298	8	SparseFieldVector.java	getData	iter	Iterator	0	NIL-WHILE	$.hasNext()
33461	328	8	SparseFieldVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1156	331	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ < end
1156	331	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ >= index
1156	331	12	SparseFieldVector.java	getSubVector	end	int	0	DEF	key < $
1156	331	12	SparseFieldVector.java	getSubVector	index	int	0	DEF	key >= $
33462	345	8	SparseFieldVector.java	mapAddToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
33462	345	8	SparseFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
33463	359	8	SparseFieldVector.java	mapDivideToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
33464	373	8	SparseFieldVector.java	mapInvToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
33464	373	8	SparseFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < virtualSize
33465	387	8	SparseFieldVector.java	mapMultiplyToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
33466	415	8	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
33467	418	12	SparseFieldVector.java	outerProduct	iter2	Iterator	0	NIL-WHILE	$.hasNext()
33468	431	8	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
33469	435	12	SparseFieldVector.java	outerProduct	col	int	0	NIL-FOR	$ < n
33469	435	12	SparseFieldVector.java	outerProduct	n	int	0	NIL-FOR	col < $
1157	444	8	SparseFieldVector.java	outerProduct	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
33470	465	8	SparseFieldVector.java	set	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
33470	465	8	SparseFieldVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
33471	487	8	SparseFieldVector.java	setSubVector	THIS	SparseFieldVector	0	NIL-FOR	i < v.$.length
33471	487	8	SparseFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.length
33471	487	8	SparseFieldVector.java	setSubVector	v	T[]	0	NIL-FOR	i < $.length
33472	505	8	SparseFieldVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1158	508	12	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1158	508	12	SparseFieldVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1159	519	8	SparseFieldVector.java	subtract	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
33473	530	8	SparseFieldVector.java	subtract	THIS	SparseFieldVector	0	NIL-FOR	i < v.$.length
33473	530	8	SparseFieldVector.java	subtract	i	int	0	NIL-FOR	$ < v.length
33473	530	8	SparseFieldVector.java	subtract	v	T[]	0	NIL-FOR	i < $.length
1160	531	12	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(i)
1160	531	12	SparseFieldVector.java	subtract	i	int	1	DEF	entries.containsKey($)
1161	552	8	SparseFieldVector.java	checkIndex	THIS	SparseFieldVector	0	OutOfRangeException	index >= $.getDimension()
1161	552	8	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1161	552	8	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1162	564	8	SparseFieldVector.java	checkVectorDimensions	THIS	SparseFieldVector	0	DimensionMismatchException	$.getDimension() != n
1162	564	8	SparseFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	getDimension() != $
1163	571	8	SparseFieldVector.java	add	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
33474	598	8	SparseFieldVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1164	611	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$ == obj
1164	611	8	SparseFieldVector.java	equals	obj	Object	0	RET	this == $
1165	615	8	SparseFieldVector.java	equals	obj	Object	0	RET	$ instanceof SparseFieldVector<?>
1166	622	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	1	RET	$.field == null
1167	623	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	other.$.field != null
1167	623	12	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	$.field != null
1168	626	15	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.field.equals(other.$.field)
1168	626	15	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	field.equals($.field)
1169	629	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.virtualSize != other.$.virtualSize
1169	629	8	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	virtualSize != $.virtualSize
33475	634	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1170	637	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(iter.value())
1170	637	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals($.value())
33476	642	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1171	645	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	test.equals($.getEntry(iter.key()))
1171	645	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(getEntry(iter.key()))
1171	645	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals(getEntry($.key()))
1872	149	8	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	DEF	xArray.$.length != yArray.$.length
1872	149	8	SpearmansCorrelation.java	correlation	xArray	double[]	1	DEF	$.length != yArray.length
1872	149	8	SpearmansCorrelation.java	correlation	yArray	double[]	1	DEF	xArray.length != $.length
1873	152	15	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	DEF	xArray.$.length < 2
1873	152	15	SpearmansCorrelation.java	correlation	xArray	double[]	1	DEF	$.length < 2
34147	168	8	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < matrix.getColumnDimension()
34147	168	8	SpearmansCorrelation.java	rankTransform	matrix	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
2563	68	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
2563	68	8	SplineInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
2563	68	8	SplineInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
2564	72	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	NumberIsTooSmallException	x.$.length < 3
2564	72	8	SplineInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 3
34455	84	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
34455	84	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
34456	93	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
34456	93	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
34457	108	8	SplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ >=0
34458	116	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
34458	116	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
1902	571	8	StatUtils.java	sumDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
1902	571	8	StatUtils.java	sumDifference	n	int	0	DimensionMismatchException	$ != sample2.length
1902	571	8	StatUtils.java	sumDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
1903	574	8	StatUtils.java	sumDifference	n	int	0	NoDataException	$ <= 0
34162	578	8	StatUtils.java	sumDifference	i	int	0	NIL-FOR	$ < n
34162	578	8	StatUtils.java	sumDifference	n	int	0	NIL-FOR	i < $
1904	619	8	StatUtils.java	varianceDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
1904	619	8	StatUtils.java	varianceDifference	n	int	0	DimensionMismatchException	$ != sample2.length
1904	619	8	StatUtils.java	varianceDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
1905	622	8	StatUtils.java	varianceDifference	n	int	0	NumberIsTooSmallException	$ < 2
34163	625	8	StatUtils.java	varianceDifference	i	int	0	NIL-FOR	$ < n
34163	625	8	StatUtils.java	varianceDifference	n	int	0	NIL-FOR	i < $
34164	644	8	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
34164	644	8	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
34164	644	8	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
34165	655	8	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
34165	655	8	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
34165	655	8	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
1785	133	8	StatisticalSummaryValues.java	equals	THIS	StatisticalSummaryValues	0	RET	object == $
1785	133	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ == this
1786	136	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ instanceof StatisticalSummaryValues == false
2663	53	8	StepFunction.java	StepFunction	x	double[]	0	NullArgumentException	$ == null
2663	53	8	StepFunction.java	StepFunction	y	double[]	0	NullArgumentException	$ == null
2664	57	8	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	x.$.length == 0
2664	57	8	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	y.$.length == 0
2664	57	8	StepFunction.java	StepFunction	x	double[]	0	NoDataException	$.length == 0
2664	57	8	StepFunction.java	StepFunction	y	double[]	0	NoDataException	$.length == 0
2665	61	8	StepFunction.java	StepFunction	THIS	StepFunction	0	DimensionMismatchException	y.$.length != x.$.length
2665	61	8	StepFunction.java	StepFunction	x	double[]	0	DimensionMismatchException	y.length != $.length
2665	61	8	StepFunction.java	StepFunction	y	double[]	0	DimensionMismatchException	$.length != x.length
2666	75	8	StepFunction.java	value	index	int	1	DEF	$ < -1
2667	78	15	StepFunction.java	value	index	int	1	DEF	$ >= 0
2103	203	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.lastState == null
2104	212	12	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.forward
2105	221	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	MathUtils.equals(nextTime, $.lastTime, 1)
2105	221	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.mode == $.StepNormalizerMode.MULTIPLES
2105	221	8	StepNormalizer.java	handleStep	nextTime	double	0	DEF	MathUtils.equals($, lastTime, 1)
34262	226	8	StepNormalizer.java	handleStep	nextInStep	boolean	0	NIL-WHILE	$
2106	238	8	StepNormalizer.java	handleStep	isLast	boolean	0	DEF	$
2107	245	12	StepNormalizer.java	handleStep	addLast	boolean	0	DEF	$
2108	275	8	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.firstTime == $.lastTime
2108	275	8	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.bounds.firstIncluded()
718	125	8	SubLine.java	intersection	includeEndPoints	boolean	1	RET	$
719	157	8	SubLine.java	side	crossing	Vector2D	0	RET	$ == null
720	177	8	SubLine.java	split	crossing	Vector2D	0	RET	$ == null
621	58	8	SubPlane.java	side	inter	Line	0	RET	$ == null
622	75	8	SubPlane.java	side	otherPlane	Plane	0	DEF	Vector3D.dotProduct(crossP, $.getNormal()) < 0
622	75	8	SubPlane.java	side	crossP	Vector3D	0	DEF	Vector3D.dotProduct($, otherPlane.getNormal()) < 0
623	100	8	SubPlane.java	split	inter	Line	0	RET	$ == null
624	112	8	SubPlane.java	split	otherPlane	Plane	0	DEF	Vector3D.dotProduct(crossP, $.getNormal()) < 0
624	112	8	SubPlane.java	split	crossP	Vector3D	0	DEF	Vector3D.dotProduct($, otherPlane.getNormal()) < 0
1655	121	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, begin, length, true)
1655	121	8	Sum.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
1655	121	8	Sum.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
1655	121	8	Sum.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
34071	123	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
34071	123	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
34071	123	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1656	160	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, weights, begin, length, true)
1656	160	8	Sum.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
1656	160	8	Sum.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
1656	160	8	Sum.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
1656	160	8	Sum.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
34072	162	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
34072	162	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
34072	162	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1657	132	8	SumOfLogs.java	evaluate	THIS	SumOfLogs	0	DEF	$.test(values, begin, length, true)
1657	132	8	SumOfLogs.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
1657	132	8	SumOfLogs.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
1657	132	8	SumOfLogs.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
34073	134	12	SumOfLogs.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
34073	134	12	SumOfLogs.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
34073	134	12	SumOfLogs.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1654	120	8	SumOfSquares.java	evaluate	THIS	SumOfSquares	0	DEF	$.test(values, begin, length, true)
1654	120	8	SumOfSquares.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
1654	120	8	SumOfSquares.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
1654	120	8	SumOfSquares.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
34070	122	12	SumOfSquares.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
34070	122	12	SumOfSquares.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
34070	122	12	SumOfSquares.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1727	157	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.meanImpl instanceof Mean
1728	160	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.varianceImpl instanceof Variance
1729	163	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.geoMeanImpl instanceof GeometricMean
1730	204	8	SummaryStatistics.java	getMean	THIS	SummaryStatistics	1	RET	$.mean == $.meanImpl
1731	220	8	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	0	DEF	$.getN() > 0
1732	221	12	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	1	DEF	$.getN() > 1
1733	238	8	SummaryStatistics.java	getVariance	THIS	SummaryStatistics	1	RET	$.varianceImpl == $.variance
1734	342	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
1735	345	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
1736	359	8	SummaryStatistics.java	equals	THIS	SummaryStatistics	0	RET	object == $
1736	359	8	SummaryStatistics.java	equals	object	Object	0	RET	$ == this
1737	362	8	SummaryStatistics.java	equals	object	Object	0	RET	$ instanceof SummaryStatistics == false
1738	632	8	SummaryStatistics.java	checkEmpty	THIS	SummaryStatistics	0	DEF	$.n > 0
1739	669	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getGeoMeanImpl() instanceof GeometricMean
1740	680	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.geoMean == source.$.geoMeanImpl
1740	680	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.geoMean == $.geoMeanImpl
1741	685	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.max == source.$.maxImpl
1741	685	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.max == $.maxImpl
1742	690	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.mean == source.$.meanImpl
1742	690	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.mean == $.meanImpl
1743	695	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.min == source.$.minImpl
1743	695	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.min == $.minImpl
1744	700	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sum == source.$.sumImpl
1744	700	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sum == $.sumImpl
1745	705	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.variance == source.$.varianceImpl
1745	705	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.variance == $.varianceImpl
1746	710	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumLog == source.$.sumLogImpl
1746	710	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumLog == $.sumLogImpl
1747	715	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumsq == source.$.sumsqImpl
1747	715	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumsq == $.sumsqImpl
911	61	8	TDistributionImpl.java	TDistributionImpl	degreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
912	109	8	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ == 0
913	117	12	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ < 0.0
914	143	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
915	146	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
916	244	8	TDistributionImpl.java	calculateNumericalMean	df	double	0	RET	$ > 1
917	267	8	TDistributionImpl.java	calculateNumericalVariance	df	double	0	RET	$ > 2
918	271	8	TDistributionImpl.java	calculateNumericalVariance	df	double	0	RET	$ <= 2
918	271	8	TDistributionImpl.java	calculateNumericalVariance	df	double	0	RET	$ > 1
1831	1004	8	TTestImpl.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ > 0.5
1831	1004	8	TTestImpl.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ <= 0
1832	1018	8	TTestImpl.java	checkSampleData	data	double[]	0	NullArgumentException	$ == null
1833	1021	8	TTestImpl.java	checkSampleData	THIS	TTestImpl	0	NumberIsTooSmallException	data.$.length < 2
1833	1021	8	TTestImpl.java	checkSampleData	data	double[]	0	NumberIsTooSmallException	$.length < 2
1834	1035	8	TTestImpl.java	checkSampleData	stat	StatisticalSummary	0	NullArgumentException	$ == null
1835	1038	8	TTestImpl.java	checkSampleData	stat	StatisticalSummary	0	NumberIsTooSmallException	$.getN() < 2
1707	89	8	ThirdMoment.java	increment	THIS	ThirdMoment	0	DEF	$.n < 1
34358	102	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
34358	102	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2025	73	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	IllegalArgumentException	population.getPopulationSize() < $.arity
2025	73	8	TournamentSelection.java	tournament	population	ListPopulation	0	IllegalArgumentException	$.getPopulationSize() < this.arity
34214	86	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	NIL-FOR	i<$.arity
34214	86	8	TournamentSelection.java	tournament	i	int	0	NIL-FOR	$<this.arity
20	143	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof String
20	143	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof Number
21	147	12	TransformerMap.java	transform	trans	NumberTransformer	0	DEF	$ != null
22	158	8	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$ == other
22	158	8	TransformerMap.java	equals	other	Object	0	RET	this == $
23	161	8	TransformerMap.java	equals	other	Object	0	RET	$ instanceof TransformerMap
24	163	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.defaultTransformer.equals(rhs.$.defaultTransformer)
24	163	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	defaultTransformer.equals($.defaultTransformer)
25	166	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.map.size() != rhs.$.map.size()
25	166	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	map.size() != $.map.size()
26	170	16	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.entry.getValue().equals(rhs.$.map.get($.entry.getKey()))
26	170	16	TransformerMap.java	equals	rhs	TransformerMap	0	RET	entry.getValue().equals($.map.get(entry.getKey()))
2790	69	8	TrapezoidIntegrator.java	stage	n	int	1	RET	$ == 0
34568	77	12	TrapezoidIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
34568	77	12	TrapezoidIntegrator.java	stage	np	long	0	NIL-FOR	i < $
34569	96	8	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	NIL-FOR	i <= $.maximalIterationCount
34569	96	8	TrapezoidIntegrator.java	integrate	i	int	0	NIL-FOR	$ <= maximalIterationCount
2791	98	12	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	RET	i >= $.minimalIterationCount
2791	98	12	TrapezoidIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
2792	102	16	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	RET	delta <= $.absoluteAccuracy
2792	102	16	TrapezoidIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
2792	102	16	TrapezoidIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
2792	102	16	TrapezoidIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
2793	117	8	TrapezoidIntegrator.java	verifyIterationCount	THIS	TrapezoidIntegrator	0	DEF	$.maximalIterationCount > 64
1056	63	8	TriDiagonalTransformer.java	TriDiagonalTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1057	86	8	TriDiagonalTransformer.java	getQ	THIS	TriDiagonalTransformer	0	DEF	$.cachedQ == null
1058	98	8	TriDiagonalTransformer.java	getQT	THIS	TriDiagonalTransformer	0	DEF	$.cachedQt == null
33285	103	12	TriDiagonalTransformer.java	getQT	k	int	0	NIL-FOR	$ >= 1
1059	107	16	TriDiagonalTransformer.java	getQT	hK	double[]	0	DEF	$[k] != 0.0
1059	107	16	TriDiagonalTransformer.java	getQT	k	int	0	DEF	hK[$] != 0.0
33286	110	20	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
33286	110	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
33287	113	20	TriDiagonalTransformer.java	getQT	j	int	0	NIL-FOR	$ < m
33287	113	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	j < $
33288	115	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
33288	115	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
33289	120	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
33289	120	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
1060	138	8	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	$.cachedT == null
33290	141	12	TriDiagonalTransformer.java	getT	i	int	0	NIL-FOR	$ < m
33290	141	12	TriDiagonalTransformer.java	getT	m	int	0	NIL-FOR	i < $
1061	143	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ > 0
1062	146	16	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1062	146	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ < main.length - 1
33291	194	8	TriDiagonalTransformer.java	transform	k	int	0	NIL-FOR	$ < m - 1
33291	194	8	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	k < $ - 1
33292	200	12	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
33292	200	12	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1063	206	12	TriDiagonalTransformer.java	transform	a	double	0	DEF	$ != 0.0
33293	217	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
33293	217	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
33294	221	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
33294	221	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
33295	231	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
33295	231	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
33296	237	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
33296	237	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
33297	243	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
33297	243	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
33298	245	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
33298	245	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
2567	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
2567	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	z.$.length == 0
2567	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
2567	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
2567	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
2567	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	z	double[]	0	NoDataException	$.length == 0
2567	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$[0].length == 0
2567	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$.length == 0
2568	163	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
2568	163	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
2568	163	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	xLen != $.length
2569	166	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
2569	166	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
2569	166	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	xLen != $.length
2570	169	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
2570	169	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
2570	169	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	xLen != $.length
2571	172	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdZ.$.length
2571	172	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdZ.length
2571	172	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
2572	175	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
2572	175	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
2572	175	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	xLen != $.length
2573	178	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdZ.$.length
2573	178	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdZ.length
2573	178	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
2574	181	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdYdZ.$.length
2574	181	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdYdZ.length
2574	181	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
2575	184	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d3FdXdYdZ.$.length
2575	184	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d3FdXdYdZ.length
2575	184	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
34461	201	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
34461	201	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
2576	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
2576	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
2576	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
2576	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i].length != yLen
2577	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
2577	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
2577	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
2577	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i].length != yLen
2578	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
2578	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
2578	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
2578	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
2579	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i].length != yLen
2579	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$].length != yLen
2579	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdZ[i].length != $
2579	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
2580	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
2580	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
2580	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
2580	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
2581	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i].length != yLen
2581	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$].length != yLen
2581	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdZ[i].length != $
2581	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
2582	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i].length != yLen
2582	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$].length != yLen
2582	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdYdZ[i].length != $
2582	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
2583	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i].length != yLen
2583	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$].length != yLen
2583	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d3FdXdYdZ[i].length != $
2583	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
34462	228	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
34462	228	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
2584	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i][j].length != zLen
2584	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	f[i][$].length != zLen
2584	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$][j].length != zLen
2584	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	f[i][j].length != $
2584	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
2585	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i][j].length != zLen
2585	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdX[i][$].length != zLen
2585	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$][j].length != zLen
2585	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdX[i][j].length != $
2585	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
2586	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i][j].length != zLen
2586	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdY[i][$].length != zLen
2586	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$][j].length != zLen
2586	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdY[i][j].length != $
2586	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
2587	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i][j].length != zLen
2587	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdZ[i][$].length != zLen
2587	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$][j].length != zLen
2587	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdZ[i][j].length != $
2587	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
2588	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i][j].length != zLen
2588	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdY[i][$].length != zLen
2588	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$][j].length != zLen
2588	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdY[i][j].length != $
2588	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
2589	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i][j].length != zLen
2589	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdZ[i][$].length != zLen
2589	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$][j].length != zLen
2589	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdZ[i][j].length != $
2589	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
2590	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i][j].length != zLen
2590	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdYdZ[i][$].length != zLen
2590	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$][j].length != zLen
2590	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdYdZ[i][j].length != $
2590	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
2591	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != zLen
2591	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d3FdXdYdZ[i][$].length != zLen
2591	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$][j].length != zLen
2591	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != $
2591	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
34463	255	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	k	int	0	NIL-FOR	$ < lastK
34463	255	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastK	int	0	NIL-FOR	k < $
2592	311	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	OutOfRangeException	$ == -1
2593	315	8	TricubicSplineInterpolatingFunction.java	value	j	int	0	OutOfRangeException	$ == -1
2594	319	8	TricubicSplineInterpolatingFunction.java	value	k	int	0	OutOfRangeException	$ == -1
2595	338	8	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ < val[0]
2595	338	8	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c < $[0]
34464	343	8	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	NIL-FOR	$ < max
34464	343	8	TricubicSplineInterpolatingFunction.java	searchIndex	max	int	0	NIL-FOR	i < $
2596	344	12	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	RET	c <= val[$]
2596	344	12	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ <= val[i]
2596	344	12	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c <= $[i]
34465	405	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < sz
34465	405	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	i < $
34466	408	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < sz
34466	408	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	j < $
34467	434	8	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	i	int	0	NIL-FOR	$ < N
34468	435	12	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	j	int	0	NIL-FOR	$ < N
34469	436	16	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	k	int	0	NIL-FOR	$ < N
2597	450	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
2597	450	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
2598	453	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
2598	453	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
2599	456	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ < 0
2599	456	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ > 1
34470	473	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	NIL-FOR	$ < N
34471	474	12	TricubicSplineInterpolatingFunction.java	value	j	int	0	NIL-FOR	$ < N
34472	475	16	TricubicSplineInterpolatingFunction.java	value	k	int	0	NIL-FOR	$ < N
2636	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	xval.$.length == 0
2636	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	zval.$.length == 0
2636	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	yval.$.length == 0
2636	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	fval.$.length == 0
2636	38	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
2636	38	8	TricubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
2636	38	8	TricubicSplineInterpolator.java	interpolate	zval	double[]	0	NoDataException	$.length == 0
2636	38	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	NoDataException	$.length == 0
2637	41	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
2637	41	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
2637	41	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	xval.length != $.length
34500	58	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
34500	58	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
2638	59	12	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
2638	59	12	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
2638	59	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
2638	59	12	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i].length != yLen
34501	63	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
34501	63	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
2639	64	16	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i][j].length != zLen
2639	64	16	TricubicSplineInterpolator.java	interpolate	j	int	0	DimensionMismatchException	fval[i][$].length != zLen
2639	64	16	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$][j].length != zLen
2639	64	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	DimensionMismatchException	fval[i][j].length != $
2639	64	16	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
34502	68	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
34502	68	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
34503	81	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
34503	81	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
34504	88	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
34504	88	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
34505	95	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
34505	95	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
34506	103	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
34506	103	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
34507	105	12	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
34507	105	12	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
34508	107	16	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
34508	107	16	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
34509	119	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
34509	119	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
34510	121	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
34510	121	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
34511	123	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
34511	123	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
34512	133	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
34512	133	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
34513	135	12	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
34513	135	12	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
34514	137	16	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
34514	137	16	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
34515	146	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
34515	146	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
34516	149	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
34516	149	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
34517	152	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
34517	152	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
2017	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	THIS	UncorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != standardDeviation.$.length
2017	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != standardDeviation.length
2017	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	standardDeviation	double[]	0	DimensionMismatchException	mean.length != $.length
34210	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	THIS	UncorrelatedRandomVectorGenerator	0	NIL-FOR	i < random.$.length
34210	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < random.length
34210	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	random	double[]	0	NIL-FOR	i < $.length
34186	66	8	UnitSphereRandomVectorGenerator.java	nextVector	normSq	double	0	NIL-DOWHILE	$ > 1
34187	68	12	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
34187	68	12	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
34188	76	8	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
34188	76	8	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
2786	102	8	UnivariateRealIntegratorImpl.java	getResult	THIS	UnivariateRealIntegratorImpl	1	RET	$.resultComputed
2787	153	8	UnivariateRealIntegratorImpl.java	verifyInterval	lower	double	0	DEF	$ >= upper
2787	153	8	UnivariateRealIntegratorImpl.java	verifyInterval	upper	double	0	DEF	lower >= $
2788	166	8	UnivariateRealIntegratorImpl.java	verifyIterationCount	THIS	UnivariateRealIntegratorImpl	0	DEF	$.maximalIterationCount <= $.minimalIterationCount
2788	166	8	UnivariateRealIntegratorImpl.java	verifyIterationCount	THIS	UnivariateRealIntegratorImpl	0	DEF	$.minimalIterationCount <= 0
2789	190	8	UnivariateRealIntegratorImpl.java	incrementIterationsCounter	THIS	UnivariateRealIntegratorImpl	0	MaxCountExceededException	++$.iterationCount > $.maximalIterationCount
2640	84	8	UnivariateRealPeriodicInterpolator.java	interpolate	THIS	UnivariateRealPeriodicInterpolator	0	NumberIsTooSmallException	xval.$.length < $.extend
2640	84	8	UnivariateRealPeriodicInterpolator.java	interpolate	xval	double[]	0	NumberIsTooSmallException	$.length < extend
34518	94	8	UnivariateRealPeriodicInterpolator.java	interpolate	THIS	UnivariateRealPeriodicInterpolator	0	NIL-FOR	i < xval.$.length
34518	94	8	UnivariateRealPeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xval.length
34518	94	8	UnivariateRealPeriodicInterpolator.java	interpolate	xval	double[]	0	NIL-FOR	i < $.length
34519	101	8	UnivariateRealPeriodicInterpolator.java	interpolate	THIS	UnivariateRealPeriodicInterpolator	0	NIL-FOR	i < $.extend
34519	101	8	UnivariateRealPeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < extend
2707	50	8	UnivariateRealSolverUtils.java	solve	function	UnivariateRealFunction	0	NullArgumentException	$ == null
2708	73	8	UnivariateRealSolverUtils.java	solve	function	UnivariateRealFunction	0	NullArgumentException	$ == null
2709	99	8	UnivariateRealSolverUtils.java	forceSide	THIS	UnivariateRealSolverUtils	0	RET	allowedSolutions == $.AllowedSolutions.ANY_SIDE
2709	99	8	UnivariateRealSolverUtils.java	forceSide	allowedSolutions	AllowedSolutions	0	RET	$ == AllowedSolutions.ANY_SIDE
34536	112	8	UnivariateRealSolverUtils.java	forceSide	remainingEval	int	0	NIL-WHILE	$ > 0
2710	114	12	UnivariateRealSolverUtils.java	forceSide	fLo	double	0	RET	$ >= 0
2710	114	12	UnivariateRealSolverUtils.java	forceSide	fLo	double	0	RET	$ <= 0
2710	114	12	UnivariateRealSolverUtils.java	forceSide	fHi	double	0	RET	$ <= 0
2710	114	12	UnivariateRealSolverUtils.java	forceSide	fHi	double	0	RET	$ >= 0
2711	122	12	UnivariateRealSolverUtils.java	forceSide	fLo	double	1	DEF	$ < fHi
2711	122	12	UnivariateRealSolverUtils.java	forceSide	fHi	double	1	DEF	fLo < $
2712	124	16	UnivariateRealSolverUtils.java	forceSide	fLo	double	1	DEF	$ >= 0
2713	129	19	UnivariateRealSolverUtils.java	forceSide	fLo	double	1	DEF	$ > fHi
2713	129	19	UnivariateRealSolverUtils.java	forceSide	fHi	double	1	DEF	fLo > $
2714	131	16	UnivariateRealSolverUtils.java	forceSide	fLo	double	1	DEF	$ <= 0
2715	143	12	UnivariateRealSolverUtils.java	forceSide	changeLo	boolean	0	DEF	$
2716	150	12	UnivariateRealSolverUtils.java	forceSide	changeHi	boolean	0	DEF	$
2717	246	8	UnivariateRealSolverUtils.java	bracket	function	UnivariateRealFunction	0	NullArgumentException	$ == null
2718	249	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	NotStrictlyPositiveException	$ <= 0
34537	260	8	UnivariateRealSolverUtils.java	bracket	a	double	0	NIL-DOWHILE	$ > lowerBound
34537	260	8	UnivariateRealSolverUtils.java	bracket	b	double	0	NIL-DOWHILE	$ < upperBound
34537	260	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	NIL-DOWHILE	$ * fb > 0.0
34537	260	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	NIL-DOWHILE	fa * $ > 0.0
34537	260	8	UnivariateRealSolverUtils.java	bracket	numIterations	int	0	NIL-DOWHILE	$ < maximumIterations
34537	260	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	NIL-DOWHILE	a > $
34537	260	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	NIL-DOWHILE	b < $
34537	260	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	NIL-DOWHILE	numIterations < $
2719	270	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	NoBracketingException	$ * fb > 0.0
2719	270	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	NoBracketingException	fa * $ > 0.0
2720	305	8	UnivariateRealSolverUtils.java	isBracketing	function	UnivariateRealFunction	0	NullArgumentException	$ == null
2721	336	8	UnivariateRealSolverUtils.java	verifyInterval	lower	double	0	NumberIsTooLargeException	$ >= upper
2721	336	8	UnivariateRealSolverUtils.java	verifyInterval	upper	double	0	NumberIsTooLargeException	lower >= $
2722	371	8	UnivariateRealSolverUtils.java	verifyBracketing	function	UnivariateRealFunction	0	NullArgumentException	$ == null
2723	375	8	UnivariateRealSolverUtils.java	verifyBracketing	THIS	UnivariateRealSolverUtils	0	NoBracketingException	$.isBracketing(function, lower, upper)
2723	375	8	UnivariateRealSolverUtils.java	verifyBracketing	function	UnivariateRealFunction	0	NoBracketingException	isBracketing($, lower, upper)
2723	375	8	UnivariateRealSolverUtils.java	verifyBracketing	lower	double	0	NoBracketingException	isBracketing(function, $, upper)
2723	375	8	UnivariateRealSolverUtils.java	verifyBracketing	upper	double	0	NoBracketingException	isBracketing(function, lower, $)
34211	139	8	ValueServer.java	fill	THIS	ValueServer	0	NIL-FOR	i < values.$.length
34211	139	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < values.length
34211	139	8	ValueServer.java	fill	values	double[]	0	NIL-FOR	i < $.length
34212	154	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < length
34212	154	8	ValueServer.java	fill	length	int	0	NIL-FOR	i < $
2018	251	8	ValueServer.java	resetReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
2019	268	8	ValueServer.java	closeReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
2020	315	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	DEF	$.empiricalDistribution == null
2020	315	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	DEF	$.empiricalDistribution.getBinStats().size() == 0
2021	342	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	$.filePointer == null
2022	345	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	(str = $.filePointer.readLine()) == null
2022	345	8	ValueServer.java	getNextReplay	str	String	0	DEF	($ = filePointer.readLine()) == null
2023	349	12	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	(str = $.filePointer.readLine()) == null
2023	349	12	ValueServer.java	getNextReplay	str	String	0	DEF	($ = filePointer.readLine()) == null
1660	159	8	Variance.java	increment	THIS	Variance	0	DEF	$.incMoment
1661	169	12	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 0
1662	171	19	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 1
1663	174	16	Variance.java	getResult	THIS	Variance	1	RET	$.isBiasCorrected
1664	194	8	Variance.java	clear	THIS	Variance	0	DEF	$.incMoment
1665	217	8	Variance.java	evaluate	values	double[]	0	NullArgumentException	$ == null
1666	248	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
1666	248	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1666	248	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
1666	248	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
1667	250	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1668	252	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
1669	308	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights,begin, length)
1669	308	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights,begin, length)
1669	308	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $,begin, length)
1669	308	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights,$, length)
1669	308	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights,begin, $)
1670	310	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1671	312	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
1672	394	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
1672	394	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1672	394	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
1672	394	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
1673	395	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1674	397	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
34076	401	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
34076	401	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
34076	401	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1675	407	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
1676	496	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights, begin, length)
1676	496	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length)
1676	496	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length)
1676	496	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights, $, length)
1676	496	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights, begin, $)
1677	497	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1678	499	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
34077	503	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
34077	503	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
34077	503	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
34078	510	16	Variance.java	evaluate	THIS	Variance	0	NIL-FOR	i < weights.$.length
34078	510	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < weights.length
34078	510	16	Variance.java	evaluate	weights	double[]	0	NIL-FOR	i < $.length
1679	514	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
701	188	8	Vector1D.java	normalize	s	double	0	MathArithmeticException	$ == 0
702	305	8	Vector1D.java	equals	THIS	Vector1D	0	RET	$ == other
702	305	8	Vector1D.java	equals	other	Object	0	RET	this == $
703	309	8	Vector1D.java	equals	other	Object	0	RET	$ instanceof Vector1D
704	311	12	Vector1D.java	equals	rhs	Vector1D	0	RET	$.isNaN()
705	329	8	Vector1D.java	hashCode	THIS	Vector1D	0	RET	$.isNaN()
699	113	8	Vector1DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
700	124	8	Vector1DFormat.java	parse	coordinates	double[]	0	RET	$ == null
743	203	8	Vector2D.java	normalize	s	double	0	MathArithmeticException	$ == 0
744	324	8	Vector2D.java	equals	THIS	Vector2D	0	RET	$ == other
744	324	8	Vector2D.java	equals	other	Object	0	RET	this == $
745	328	8	Vector2D.java	equals	other	Object	0	RET	$ instanceof Vector2D
746	330	12	Vector2D.java	equals	rhs	Vector2D	0	RET	$.isNaN()
747	348	8	Vector2D.java	hashCode	THIS	Vector2D	0	RET	$.isNaN()
713	116	8	Vector2DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
714	127	8	Vector2DFormat.java	parse	coordinates	double[]	0	RET	$ == null
674	273	8	Vector3D.java	normalize	s	double	0	MathArithmeticException	$ == 0
675	297	8	Vector3D.java	orthogonal	threshold	double	0	MathArithmeticException	$ == 0
676	301	8	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x <= threshold
676	301	8	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x >= -threshold
676	301	8	Vector3D.java	orthogonal	threshold	double	1	RET	x <= $
676	301	8	Vector3D.java	orthogonal	threshold	double	1	RET	x >= -$
677	304	15	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y <= threshold
677	304	15	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y >= -threshold
677	304	15	Vector3D.java	orthogonal	threshold	double	0	RET	y <= $
677	304	15	Vector3D.java	orthogonal	threshold	double	0	RET	y >= -$
678	327	8	Vector3D.java	angle	normProduct	double	0	MathArithmeticException	$ == 0
679	333	8	Vector3D.java	angle	dot	double	0	RET	$ < -threshold
679	333	8	Vector3D.java	angle	dot	double	0	RET	$ > threshold
679	333	8	Vector3D.java	angle	threshold	double	0	RET	dot < -$
679	333	8	Vector3D.java	angle	threshold	double	0	RET	dot > $
680	336	12	Vector3D.java	angle	dot	double	0	RET	$ >= 0
681	389	8	Vector3D.java	equals	THIS	Vector3D	0	RET	$ == other
681	389	8	Vector3D.java	equals	other	Object	0	RET	this == $
682	393	8	Vector3D.java	equals	other	Object	0	RET	$ instanceof Vector3D
683	395	12	Vector3D.java	equals	rhs	Vector3D	0	RET	$.isNaN()
684	413	8	Vector3D.java	hashCode	THIS	Vector3D	0	RET	$.isNaN()
685	434	8	Vector3D.java	crossProduct	n1	double	0	RET	($ * n2) < MathUtils.SAFE_MIN
685	434	8	Vector3D.java	crossProduct	n2	double	0	RET	(n1 * $) < MathUtils.SAFE_MIN
625	128	8	Vector3DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
626	144	8	Vector3DFormat.java	parse	coordinates	double[]	0	RET	$ == null
33138	202	8	VectorFormat.java	format	THIS	VectorFormat	0	NIL-FOR	i < coordinates.$.length
33138	202	8	VectorFormat.java	format	i	int	0	NIL-FOR	$ < coordinates.length
33138	202	8	VectorFormat.java	format	coordinates	double	0	NIL-FOR	i < $.length
615	203	12	VectorFormat.java	format	i	int	0	DEF	$ > 0
616	247	8	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedPrefix, pos)
616	247	8	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
616	247	8	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
33139	251	8	VectorFormat.java	parseCoordinates	i	int	0	NIL-FOR	$ < dimension
33139	251	8	VectorFormat.java	parseCoordinates	dimension	int	0	NIL-FOR	i < $
617	257	12	VectorFormat.java	parseCoordinates	i	int	0	RET	$ > 0
618	258	16	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSeparator, pos)
618	258	16	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSeparator, pos)
618	258	16	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSeparator, $)
619	268	12	VectorFormat.java	parseCoordinates	c	Number	0	RET	$ == null
620	282	8	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSuffix, pos)
620	282	8	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
620	282	8	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
1690	66	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	DimensionMismatchException	v.$.length != $.sums.$.length
1690	66	8	VectorialCovariance.java	increment	v	double[]	0	DimensionMismatchException	$.length != sums.length
34083	70	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	NIL-FOR	i < v.$.length
34083	70	8	VectorialCovariance.java	increment	i	int	0	NIL-FOR	$ < v.length
34083	70	8	VectorialCovariance.java	increment	v	double[]	0	NIL-FOR	i < $.length
34084	72	12	VectorialCovariance.java	increment	j	int	0	NIL-FOR	$ <= i
34084	72	12	VectorialCovariance.java	increment	i	int	0	NIL-FOR	j <= $
1691	88	8	VectorialCovariance.java	getResult	THIS	VectorialCovariance	0	DEF	$.n > 1
34085	91	12	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	$ < dimension
34085	91	12	VectorialCovariance.java	getResult	dimension	int	0	NIL-FOR	i < $
34086	92	16	VectorialCovariance.java	getResult	j	int	0	NIL-FOR	$ <= i
34086	92	16	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	j <= $
1692	136	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$ == obj
1692	136	8	VectorialCovariance.java	equals	obj	Object	0	RET	this == $
1693	139	8	VectorialCovariance.java	equals	obj	Object	0	RET	$ instanceof VectorialCovariance
1694	143	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.isBiasCorrected != other.$.isBiasCorrected
1694	143	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	isBiasCorrected != $.isBiasCorrected
1695	146	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.n != other.$.n
1695	146	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	n != $.n
1696	149	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.productsSums, other.$.productsSums)
1696	149	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(productsSums, $.productsSums)
1697	152	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.sums, other.$.sums)
1697	152	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(sums, $.sums)
34089	42	8	VectorialMean.java	VectorialMean	i	int	0	NIL-FOR	$ < dimension
34089	42	8	VectorialMean.java	VectorialMean	dimension	int	0	NIL-FOR	i < $
1713	53	8	VectorialMean.java	increment	THIS	VectorialMean	0	DimensionMismatchException	v.$.length != $.means.$.length
1713	53	8	VectorialMean.java	increment	v	double[]	0	DimensionMismatchException	$.length != means.length
34090	56	8	VectorialMean.java	increment	THIS	VectorialMean	0	NIL-FOR	i < v.$.length
34090	56	8	VectorialMean.java	increment	i	int	0	NIL-FOR	$ < v.length
34090	56	8	VectorialMean.java	increment	v	double[]	0	NIL-FOR	i < $.length
34091	67	8	VectorialMean.java	getResult	THIS	VectorialMean	0	NIL-FOR	i < result.$.length
34091	67	8	VectorialMean.java	getResult	i	int	0	NIL-FOR	$ < result.length
34091	67	8	VectorialMean.java	getResult	result	double[]	0	NIL-FOR	i < $.length
1714	93	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	$ == obj
1714	93	8	VectorialMean.java	equals	obj	Object	0	RET	this == $
1715	96	8	VectorialMean.java	equals	obj	Object	0	RET	$ instanceof VectorialMean
1716	100	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	Arrays.equals($.means, other.$.means)
1716	100	8	VectorialMean.java	equals	other	VectorialMean	0	RET	Arrays.equals(means, $.means)
951	77	8	WeibullDistributionImpl.java	WeibullDistributionImpl	alpha	double	0	NotStrictlyPositiveException	$ <= 0
952	81	8	WeibullDistributionImpl.java	WeibullDistributionImpl	beta	double	0	NotStrictlyPositiveException	$ <= 0
953	98	8	WeibullDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
954	125	8	WeibullDistributionImpl.java	density	x	double	0	RET	$ < 0
955	155	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
955	155	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
956	157	15	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
957	159	16	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
1793	70	8	WilcoxonSignedRankTestImpl.java	ensureDataConformance	x	double[]	0	IllegalArgumentException	$ == null
1794	74	8	WilcoxonSignedRankTestImpl.java	ensureDataConformance	y	double[]	0	IllegalArgumentException	$ == null
1795	78	8	WilcoxonSignedRankTestImpl.java	ensureDataConformance	THIS	WilcoxonSignedRankTestImpl	0	IllegalArgumentException	x.$.length != y.$.length
1795	78	8	WilcoxonSignedRankTestImpl.java	ensureDataConformance	x	double[]	0	IllegalArgumentException	$.length != y.length
1795	78	8	WilcoxonSignedRankTestImpl.java	ensureDataConformance	y	double[]	0	IllegalArgumentException	x.length != $.length
1796	83	8	WilcoxonSignedRankTestImpl.java	ensureDataConformance	THIS	WilcoxonSignedRankTestImpl	0	IllegalArgumentException	x.$.length == 0
1796	83	8	WilcoxonSignedRankTestImpl.java	ensureDataConformance	x	double[]	0	IllegalArgumentException	$.length == 0
34102	100	8	WilcoxonSignedRankTestImpl.java	calculateDifferences	THIS	WilcoxonSignedRankTestImpl	0	NIL-FOR	i < x.$.length
34102	100	8	WilcoxonSignedRankTestImpl.java	calculateDifferences	i	int	0	NIL-FOR	$ < x.length
34102	100	8	WilcoxonSignedRankTestImpl.java	calculateDifferences	x	double[]	0	NIL-FOR	i < $.length
1797	117	8	WilcoxonSignedRankTestImpl.java	calculateAbsoluteDifferences	z	double[]	0	IllegalArgumentException	$ == null
1798	121	8	WilcoxonSignedRankTestImpl.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTestImpl	0	IllegalArgumentException	z.$.length == 0
1798	121	8	WilcoxonSignedRankTestImpl.java	calculateAbsoluteDifferences	z	double[]	0	IllegalArgumentException	$.length == 0
34103	128	8	WilcoxonSignedRankTestImpl.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTestImpl	0	NIL-FOR	i < z.$.length
34103	128	8	WilcoxonSignedRankTestImpl.java	calculateAbsoluteDifferences	i	int	0	NIL-FOR	$ < z.length
34103	128	8	WilcoxonSignedRankTestImpl.java	calculateAbsoluteDifferences	z	double[]	0	NIL-FOR	i < $.length
34104	160	8	WilcoxonSignedRankTestImpl.java	wilcoxonSignedRank	THIS	WilcoxonSignedRankTestImpl	0	NIL-FOR	i < z.$.length
34104	160	8	WilcoxonSignedRankTestImpl.java	wilcoxonSignedRank	i	int	0	NIL-FOR	$ < z.length
34104	160	8	WilcoxonSignedRankTestImpl.java	wilcoxonSignedRank	z	double[]	0	NIL-FOR	i < $.length
1799	161	12	WilcoxonSignedRankTestImpl.java	wilcoxonSignedRank	i	int	0	DEF	z[$] > 0
1799	161	12	WilcoxonSignedRankTestImpl.java	wilcoxonSignedRank	z	double[]	0	DEF	$[i] > 0
34105	189	8	WilcoxonSignedRankTestImpl.java	calculateExactPValue	i	int	0	NIL-FOR	$ < m
34105	189	8	WilcoxonSignedRankTestImpl.java	calculateExactPValue	m	int	0	NIL-FOR	i < $
34106	193	12	WilcoxonSignedRankTestImpl.java	calculateExactPValue	j	int	0	NIL-FOR	$ < N
1800	196	16	WilcoxonSignedRankTestImpl.java	calculateExactPValue	j	int	0	DEF	((i >> $) & 1) == 1
1800	196	16	WilcoxonSignedRankTestImpl.java	calculateExactPValue	i	int	0	DEF	(($ >> j) & 1) == 1
1801	201	12	WilcoxonSignedRankTestImpl.java	calculateExactPValue	rankSum	int	0	DEF	$ >= Wmax
1801	201	12	WilcoxonSignedRankTestImpl.java	calculateExactPValue	Wmax	double	0	DEF	rankSum >= $
1802	261	8	WilcoxonSignedRankTestImpl.java	wilcoxonSignedRankTest	exactPValue	boolean	0	IllegalArgumentException	$
1803	265	8	WilcoxonSignedRankTestImpl.java	wilcoxonSignedRankTest	exactPValue	boolean	1	RET	$
958	51	8	ZipfDistributionImpl.java	ZipfDistributionImpl	numberOfElements	int	0	NotStrictlyPositiveException	$ <= 0
959	55	8	ZipfDistributionImpl.java	ZipfDistributionImpl	exponent	double	0	NotStrictlyPositiveException	$ <= 0
960	85	8	ZipfDistributionImpl.java	probability	THIS	ZipfDistributionImpl	0	RET	x > $.numberOfElements
960	85	8	ZipfDistributionImpl.java	probability	x	int	0	RET	$ <= 0
960	85	8	ZipfDistributionImpl.java	probability	x	int	0	RET	$ > numberOfElements
961	101	8	ZipfDistributionImpl.java	cumulativeProbability	x	int	1	RET	$ <= 0
962	103	15	ZipfDistributionImpl.java	cumulativeProbability	THIS	ZipfDistributionImpl	0	RET	x >= $.numberOfElements
962	103	15	ZipfDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ >= numberOfElements
33162	145	8	ZipfDistributionImpl.java	generalizedHarmonic	k	int	0	NIL-FOR	$ > 0
