id	line	column	filename	methodname	varname	vartype	else	return	right
440	62	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	DEF	$ < 0.0
440	62	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	DEF	$ > 1.0
441	97	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	Math.abs($.value(lowerBound)) < 1E-6
441	97	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	lowerBound	double	0	RET	Math.abs(rootFindingFunction.value($)) < 1E-6
442	100	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	Math.abs($.value(upperBound)) < 1E-6
442	100	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	upperBound	double	0	RET	Math.abs(rootFindingFunction.value($)) < 1E-6
479	61	8	AbstractDistribution.java	cumulativeProbability	x0	double	0	DEF	$ > x1
479	61	8	AbstractDistribution.java	cumulativeProbability	x1	double	0	DEF	x0 > $
37947	128	8	AbstractEstimator.java	updateJacobian	THIS	AbstractEstimator	0	NIL-FOR	i < $.rows
37947	128	8	AbstractEstimator.java	updateJacobian	i	int	0	NIL-FOR	$ < rows
37948	131	12	AbstractEstimator.java	updateJacobian	THIS	AbstractEstimator	0	NIL-FOR	j < $.cols
37948	131	12	AbstractEstimator.java	updateJacobian	j	int	0	NIL-FOR	$ < cols
1446	152	8	AbstractEstimator.java	updateResidualsAndCost	THIS	AbstractEstimator	0	EstimationException	++$.costEvaluations > $.maxCostEval
37949	159	8	AbstractEstimator.java	updateResidualsAndCost	THIS	AbstractEstimator	0	NIL-FOR	i < $.rows
37949	159	8	AbstractEstimator.java	updateResidualsAndCost	i	int	0	NIL-FOR	$ < rows
37950	183	8	AbstractEstimator.java	getRMS	THIS	AbstractEstimator	0	NIL-FOR	i < wm.$.length
37950	183	8	AbstractEstimator.java	getRMS	i	int	0	NIL-FOR	$ < wm.length
37950	183	8	AbstractEstimator.java	getRMS	wm	WeightedMeasurement[]	0	NIL-FOR	i < $.length
37951	198	8	AbstractEstimator.java	getChiSquare	THIS	AbstractEstimator	0	NIL-FOR	i < wm.$.length
37951	198	8	AbstractEstimator.java	getChiSquare	i	int	0	NIL-FOR	$ < wm.length
37951	198	8	AbstractEstimator.java	getChiSquare	wm	WeightedMeasurement[]	0	NIL-FOR	i < $.length
37952	223	8	AbstractEstimator.java	getCovariances	i	int	0	NIL-FOR	$ < m
37952	223	8	AbstractEstimator.java	getCovariances	m	int	0	NIL-FOR	i < $
37953	224	12	AbstractEstimator.java	getCovariances	j	int	0	NIL-FOR	$ < m
37953	224	12	AbstractEstimator.java	getCovariances	m	int	0	NIL-FOR	j < $
37954	226	16	AbstractEstimator.java	getCovariances	k	int	0	NIL-FOR	$ < max
37954	226	16	AbstractEstimator.java	getCovariances	max	int	0	NIL-FOR	k < $
1447	258	8	AbstractEstimator.java	guessParametersErrors	m	int	0	EstimationException	$ <= p
1447	258	8	AbstractEstimator.java	guessParametersErrors	p	int	0	EstimationException	m <= $
37955	266	8	AbstractEstimator.java	guessParametersErrors	THIS	AbstractEstimator	0	NIL-FOR	i < errors.$.length
37955	266	8	AbstractEstimator.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
37955	266	8	AbstractEstimator.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
684	67	8	AbstractFieldMatrix.java	AbstractFieldMatrix	rowDimension	int	0	DEF	$ <= 0
685	72	8	AbstractFieldMatrix.java	AbstractFieldMatrix	columnDimension	int	0	DEF	$ <= 0
686	89	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	DEF	d.$.length == 0
686	89	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	DEF	$.length == 0
687	92	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	DEF	d[0].length == 0
687	92	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	DEF	$[0].length == 0
688	107	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	DEF	d.$.length == 0
688	107	8	AbstractFieldMatrix.java	extractField	d	T[]	0	DEF	$.length == 0
689	128	8	AbstractFieldMatrix.java	buildArray	columns	int	0	RET	$ < 0
37192	134	8	AbstractFieldMatrix.java	buildArray	THIS	AbstractFieldMatrix	0	NIL-FOR	i < array.$.length
37192	134	8	AbstractFieldMatrix.java	buildArray	i	int	0	NIL-FOR	$ < array.length
37192	134	8	AbstractFieldMatrix.java	buildArray	array	T[][]	0	NIL-FOR	i < $.length
37193	178	8	AbstractFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
37193	178	8	AbstractFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
37194	179	12	AbstractFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
37194	179	12	AbstractFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
37195	197	8	AbstractFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
37195	197	8	AbstractFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
37196	198	12	AbstractFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
37196	198	12	AbstractFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
37197	213	8	AbstractFieldMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
37197	213	8	AbstractFieldMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
37198	214	12	AbstractFieldMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
37198	214	12	AbstractFieldMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
37199	229	8	AbstractFieldMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
37199	229	8	AbstractFieldMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
37200	230	12	AbstractFieldMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
37200	230	12	AbstractFieldMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
37201	250	8	AbstractFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
37201	250	8	AbstractFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
37202	251	12	AbstractFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
37202	251	12	AbstractFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
37203	253	16	AbstractFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
37203	253	16	AbstractFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
37204	275	8	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	i < data.$.length
37204	275	8	AbstractFieldMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
37204	275	8	AbstractFieldMatrix.java	getData	data	T[][]	0	NIL-FOR	i < $.length
37205	277	12	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	j < dataI.$.length
37205	277	12	AbstractFieldMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
37205	277	12	AbstractFieldMatrix.java	getData	dataI	T[]	0	NIL-FOR	j < $.length
37206	295	8	AbstractFieldMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
37206	295	8	AbstractFieldMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
37207	296	12	AbstractFieldMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
37207	296	12	AbstractFieldMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
690	339	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	DEF	destination.$.length < rowsCount
690	339	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	DEF	destination[0].length < columnsCount
690	339	8	AbstractFieldMatrix.java	copySubMatrix	rowsCount	int	0	DEF	destination.length < $
690	339	8	AbstractFieldMatrix.java	copySubMatrix	columnsCount	int	0	DEF	destination[0].length < $
690	339	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	DEF	$.length < rowsCount
690	339	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	DEF	$[0].length < columnsCount
691	380	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	DEF	destination[0].length < selectedColumns.$.length
691	380	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	DEF	destination.$.length < selectedRows.$.length
691	380	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	DEF	destination.length < $.length
691	380	8	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	DEF	destination[0].length < $.length
691	380	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	DEF	$[0].length < selectedColumns.length
691	380	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	DEF	$.length < selectedRows.length
37208	389	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	i < selectedRows.$.length
37208	389	8	AbstractFieldMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
37208	389	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
37209	391	12	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	j < selectedColumns.$.length
37209	391	12	AbstractFieldMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
37209	391	12	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
692	403	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	DEF	$ == 0
693	408	8	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	DEF	$ == 0
37210	412	8	AbstractFieldMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
37210	412	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
694	413	12	AbstractFieldMatrix.java	setSubMatrix	THIS	AbstractFieldMatrix	0	DEF	subMatrix[r].length != nCols
694	413	12	AbstractFieldMatrix.java	setSubMatrix	r	int	0	DEF	subMatrix[$].length != nCols
694	413	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	DEF	subMatrix[r].length != $
694	413	12	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DEF	$[r].length != nCols
37211	425	8	AbstractFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
37211	425	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
37212	426	12	AbstractFieldMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
37212	426	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
37213	440	8	AbstractFieldMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
37213	440	8	AbstractFieldMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
695	454	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	InvalidMatrixException	matrix.getColumnDimension() != $
695	454	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	InvalidMatrixException	$.getColumnDimension() != nCols
695	454	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	InvalidMatrixException	$.getRowDimension() != 1
37214	460	8	AbstractFieldMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
37214	460	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
37215	473	8	AbstractFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
37215	473	8	AbstractFieldMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
696	487	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	InvalidMatrixException	matrix.getRowDimension() != $
696	487	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	InvalidMatrixException	$.getRowDimension() != nRows
696	487	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	InvalidMatrixException	$.getColumnDimension() != 1
37216	493	8	AbstractFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
37216	493	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
697	511	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	InvalidMatrixException	vector.getDimension() != $
697	511	8	AbstractFieldMatrix.java	setRowVector	vector	FieldVector<T>	0	InvalidMatrixException	$.getDimension() != nCols
37217	516	8	AbstractFieldMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
37217	516	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
698	534	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	InvalidMatrixException	vector.getDimension() != $
698	534	8	AbstractFieldMatrix.java	setColumnVector	vector	FieldVector<T>	0	InvalidMatrixException	$.getDimension() != nRows
37218	539	8	AbstractFieldMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
37218	539	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
37219	552	8	AbstractFieldMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
37219	552	8	AbstractFieldMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
699	566	8	AbstractFieldMatrix.java	setRow	THIS	AbstractFieldMatrix	0	InvalidMatrixException	array.$.length != nCols
699	566	8	AbstractFieldMatrix.java	setRow	nCols	int	0	InvalidMatrixException	array.length != $
699	566	8	AbstractFieldMatrix.java	setRow	array	T[]	0	InvalidMatrixException	$.length != nCols
37220	571	8	AbstractFieldMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
37220	571	8	AbstractFieldMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
37221	584	8	AbstractFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
37221	584	8	AbstractFieldMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
700	598	8	AbstractFieldMatrix.java	setColumn	THIS	AbstractFieldMatrix	0	InvalidMatrixException	array.$.length != nRows
700	598	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	InvalidMatrixException	array.length != $
700	598	8	AbstractFieldMatrix.java	setColumn	array	T[]	0	InvalidMatrixException	$.length != nRows
37222	603	8	AbstractFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
37222	603	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
701	661	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
701	661	8	AbstractFieldMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
37223	665	8	AbstractFieldMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
37223	665	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
702	677	8	AbstractFieldMatrix.java	operate	THIS	AbstractFieldMatrix	0	DEF	v.$.length != nCols
702	677	8	AbstractFieldMatrix.java	operate	nCols	int	0	DEF	v.length != $
702	677	8	AbstractFieldMatrix.java	operate	v	T[]	0	DEF	$.length != nCols
37224	684	8	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
37224	684	8	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
37225	686	12	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
37225	686	12	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
703	704	12	AbstractFieldMatrix.java	operate	nCols	int	0	DEF	v.getDimension() != $
703	704	12	AbstractFieldMatrix.java	operate	v	FieldVector<T>	0	DEF	$.getDimension() != nCols
37226	711	12	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
37226	711	12	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
37227	713	16	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
37227	713	16	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
704	729	8	AbstractFieldMatrix.java	preMultiply	THIS	AbstractFieldMatrix	0	DEF	v.$.length != nRows
704	729	8	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DEF	v.length != $
704	729	8	AbstractFieldMatrix.java	preMultiply	v	T[]	0	DEF	$.length != nRows
37228	736	8	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
37228	736	8	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
37229	738	12	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
37229	738	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
705	757	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DEF	v.getDimension() != $
705	757	12	AbstractFieldMatrix.java	preMultiply	v	FieldVector<T>	0	DEF	$.getDimension() != nRows
37230	764	12	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
37230	764	12	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
37231	766	16	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
37231	766	16	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
37232	783	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
37232	783	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
37233	784	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
37233	784	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
37234	799	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
37234	799	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
37235	800	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
37235	800	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
37236	815	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
37236	815	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
37237	816	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
37237	816	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
37238	833	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
37238	833	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
37239	834	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
37239	834	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
37240	847	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
37240	847	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
37241	848	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
37241	848	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
37242	863	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
37242	863	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
37243	864	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
37243	864	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
37244	879	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
37244	879	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
37245	880	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
37245	880	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
37246	897	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
37246	897	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
37247	898	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
37247	898	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
37248	946	8	AbstractFieldMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
37248	946	8	AbstractFieldMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
706	947	12	AbstractFieldMatrix.java	toString	i	int	0	DEF	$ > 0
37249	951	12	AbstractFieldMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
37249	951	12	AbstractFieldMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
707	952	16	AbstractFieldMatrix.java	toString	j	int	0	DEF	$ > 0
708	976	8	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	object == $
708	976	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ == this
709	979	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ instanceof FieldMatrix == false
710	985	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<T>	0	RET	$.getColumnDimension() != nCols
710	985	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<T>	0	RET	$.getRowDimension() != nRows
710	985	8	AbstractFieldMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
710	985	8	AbstractFieldMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
37250	988	8	AbstractFieldMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
37250	988	8	AbstractFieldMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
37251	989	12	AbstractFieldMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
37251	989	12	AbstractFieldMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
711	990	16	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	$.getEntry(row, col).equals(m.getEntry(row, col))
711	990	16	AbstractFieldMatrix.java	equals	col	int	0	RET	getEntry(row, $).equals(m.getEntry(row, $))
711	990	16	AbstractFieldMatrix.java	equals	row	int	0	RET	getEntry($, col).equals(m.getEntry($, col))
711	990	16	AbstractFieldMatrix.java	equals	m	FieldMatrix<T>	0	RET	getEntry(row, col).equals($.getEntry(row, col))
37252	1010	8	AbstractFieldMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
37252	1010	8	AbstractFieldMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
37253	1011	12	AbstractFieldMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
37253	1011	12	AbstractFieldMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
712	1024	8	AbstractFieldMatrix.java	checkRowIndex	THIS	AbstractFieldMatrix	0	MatrixIndexException	row >= $.getRowDimension()
712	1024	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	MatrixIndexException	$ < 0
712	1024	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	MatrixIndexException	$ >= getRowDimension()
713	1037	8	AbstractFieldMatrix.java	checkColumnIndex	THIS	AbstractFieldMatrix	0	MatrixIndexException	column >= $.getColumnDimension()
713	1037	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	MatrixIndexException	$ < 0
713	1037	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	MatrixIndexException	$ >= getColumnDimension()
714	1057	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startRow	int	0	MatrixIndexException	$ > endRow
714	1057	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endRow	int	0	MatrixIndexException	startRow > $
715	1064	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startColumn	int	0	MatrixIndexException	$ > endColumn
715	1064	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endColumn	int	0	MatrixIndexException	startColumn > $
716	1081	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
716	1081	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
716	1081	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
717	1082	12	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	MatrixIndexException	selectedRows.$.length == 0
717	1082	12	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length == 0
718	1102	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getRowDimension() != m.getRowDimension()
718	1102	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getColumnDimension() != m.getColumnDimension()
718	1102	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	DEF	getRowDimension() != $.getRowDimension()
718	1102	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	DEF	getColumnDimension() != $.getColumnDimension()
719	1117	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getColumnDimension() != m.getColumnDimension()
719	1117	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getRowDimension() != m.getRowDimension()
719	1117	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	DEF	getColumnDimension() != $.getColumnDimension()
719	1117	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	DEF	getRowDimension() != $.getRowDimension()
720	1132	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getColumnDimension() != m.getRowDimension()
720	1132	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	m	FieldMatrix<T>	0	DEF	getColumnDimension() != $.getRowDimension()
347	120	8	AbstractFormat.java	setDenominatorFormat	format	NumberFormat	0	DEF	$ == null
348	134	8	AbstractFormat.java	setNumeratorFormat	format	NumberFormat	0	DEF	$ == null
349	165	9	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
349	165	9	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
36759	167	13	AbstractFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
36759	167	13	AbstractFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
36759	167	13	AbstractFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
350	172	13	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
350	172	13	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
398	80	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	0	DEF	$ > x1
398	80	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	double	0	DEF	x0 > $
399	85	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	1	RET	Math.floor($) < $
400	119	8	AbstractIntegerDistribution.java	probability	fl	double	1	RET	$ == x
400	119	8	AbstractIntegerDistribution.java	probability	x	double	1	RET	fl == $
401	138	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	int	0	DEF	$ > x1
401	138	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	int	0	DEF	x0 > $
402	158	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	DEF	$ < 0.0
402	158	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	DEF	$ > 1.0
36761	168	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	0	NIL-WHILE	$ < x1
36761	168	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	0	NIL-WHILE	x0 < $
403	171	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	1	DEF	$ > p
403	171	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	1	DEF	pm > $
404	173	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x1
404	173	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	1	DEF	xm == $
405	183	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x0
405	183	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	1	DEF	xm == $
36762	196	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	0	NIL-WHILE	$ > p
36762	196	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	pm > $
1652	124	12	AbstractIntegrator.java	requiresDenseOutput	THIS	AbstractIntegrator	0	RET	$.handler.requiresDenseOutput()
1653	179	8	AbstractIntegrator.java	computeDerivatives	THIS	AbstractIntegrator	0	MaxEvaluationsExceededException	++$.evaluations > $.maxEvaluations
1654	198	8	AbstractIntegrator.java	sanityChecks	THIS	AbstractIntegrator	0	IntegratorException	ode.getDimension() != y0.$.length
1654	198	8	AbstractIntegrator.java	sanityChecks	ode	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y0.length
1654	198	8	AbstractIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	ode.getDimension() != $.length
1655	205	8	AbstractIntegrator.java	sanityChecks	THIS	AbstractIntegrator	0	IntegratorException	ode.getDimension() != y.$.length
1655	205	8	AbstractIntegrator.java	sanityChecks	ode	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y.length
1655	205	8	AbstractIntegrator.java	sanityChecks	y	double[]	0	IntegratorException	ode.getDimension() != $.length
1656	212	8	AbstractIntegrator.java	sanityChecks	t0	double	0	IntegratorException	Math.abs(t - $) <= 1.0e-12 * Math.max(Math.abs($), Math.abs(t))
1656	212	8	AbstractIntegrator.java	sanityChecks	t	double	0	IntegratorException	Math.abs($ - t0) <= 1.0e-12 * Math.max(Math.abs(t0), Math.abs($))
1069	166	8	AbstractLeastSquaresOptimizer.java	incrementIterationsCounter	THIS	AbstractLeastSquaresOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
1070	179	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	FunctionEvaluationException	$.jacobian.$.length != $.rows
37748	183	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
37748	183	8	AbstractLeastSquaresOptimizer.java	updateJacobian	i	int	0	NIL-FOR	$ < rows
37749	186	12	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
37749	186	12	AbstractLeastSquaresOptimizer.java	updateJacobian	j	int	0	NIL-FOR	$ < cols
1071	201	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	MaxEvaluationsExceededException	++$.objectiveEvaluations > $.maxEvaluations
1072	206	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	FunctionEvaluationException	$.objective.$.length != $.rows
37750	212	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
37750	212	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	i	int	0	NIL-FOR	$ < rows
37751	234	8	AbstractLeastSquaresOptimizer.java	getRMS	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
37751	234	8	AbstractLeastSquaresOptimizer.java	getRMS	i	int	0	NIL-FOR	$ < rows
37752	247	8	AbstractLeastSquaresOptimizer.java	getChiSquare	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
37752	247	8	AbstractLeastSquaresOptimizer.java	getChiSquare	i	int	0	NIL-FOR	$ < rows
37753	270	8	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.cols
37753	270	8	AbstractLeastSquaresOptimizer.java	getCovariances	i	int	0	NIL-FOR	$ < cols
37754	271	12	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
37754	271	12	AbstractLeastSquaresOptimizer.java	getCovariances	j	int	0	NIL-FOR	$ < cols
37755	273	16	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	k < $.rows
37755	273	16	AbstractLeastSquaresOptimizer.java	getCovariances	k	int	0	NIL-FOR	$ < rows
1073	303	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	OptimizationException	$.rows <= $.cols
37756	311	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < errors.$.length
37756	311	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
37756	311	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
1074	323	8	AbstractLeastSquaresOptimizer.java	optimize	THIS	AbstractLeastSquaresOptimizer	0	OptimizationException	target.$.length != weights.$.length
1074	323	8	AbstractLeastSquaresOptimizer.java	optimize	target	double[]	0	OptimizationException	$.length != weights.length
1074	323	8	AbstractLeastSquaresOptimizer.java	optimize	weights	double[]	0	OptimizationException	target.length != $.length
1007	86	8	AbstractLinearOptimizer.java	incrementIterationsCounter	THIS	AbstractLinearOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
37880	51	8	AbstractMultipleLinearRegression.java	newSampleData	i	int	0	NIL-FOR	$ < nobs
37880	51	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NIL-FOR	i < $
37881	54	12	AbstractMultipleLinearRegression.java	newSampleData	j	int	0	NIL-FOR	$ < nvars + 1
37881	54	12	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	NIL-FOR	j < $ + 1
1328	89	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	1	DEF	x.$.length != y.$.length
1328	89	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	1	DEF	$.length != y.length
1328	89	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	1	DEF	$ == null
1328	89	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	1	DEF	$ == null
1328	89	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	1	DEF	x.length != $.length
1329	94	15	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	x.$.length > 0
1329	94	15	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	x[0].length > x.$.length
1329	94	15	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DEF	$.length > 0
1329	94	15	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DEF	$[0].length > $.length
1330	110	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DEF	x.$.length != covariance.$.length
1330	110	8	AbstractMultipleLinearRegression.java	validateCovarianceData	x	double[][]	0	DEF	$.length != covariance.length
1330	110	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DEF	x.length != $.length
1331	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DEF	covariance.$.length > 0
1331	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DEF	covariance.$.length != covariance[0].length
1331	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DEF	$.length > 0
1331	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DEF	$.length != $[0].length
37882	153	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	i	int	0	NIL-FOR	$ < length
37882	153	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	length	int	0	NIL-FOR	i < $
37904	107	8	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	NIL-WHILE	bytesOut < bytes.$.length
37904	107	8	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	NIL-WHILE	$ < bytes.length
37904	107	8	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	bytesOut < $.length
37905	109	10	AbstractRandomGenerator.java	nextBytes	i	int	0	NIL-FOR	$ < 3
1357	110	14	AbstractRandomGenerator.java	nextBytes	i	int	0	DEF	$ > 0
1358	114	14	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	RET	bytesOut == bytes.$.length
1358	114	14	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	RET	$ == bytes.length
1358	114	14	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	RET	bytesOut == $.length
1359	156	8	AbstractRandomGenerator.java	nextInt	n	int	0	DEF	$ <= 0
1360	253	8	AbstractRandomGenerator.java	nextGaussian	THIS	AbstractRandomGenerator	0	RET	Double.isNaN($.cachedNormalDeviate)
37906	261	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	NIL-WHILE	$ >=1
1361	266	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	DEF	$ != 0
622	56	8	AbstractRealMatrix.java	AbstractRealMatrix	rowDimension	int	0	DEF	$ <= 0
623	61	8	AbstractRealMatrix.java	AbstractRealMatrix	columnDimension	int	0	DEF	$ <= 0
37072	85	8	AbstractRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
37072	85	8	AbstractRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
37073	86	12	AbstractRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
37073	86	12	AbstractRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
37074	104	8	AbstractRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
37074	104	8	AbstractRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
37075	105	12	AbstractRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
37075	105	12	AbstractRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
37076	120	8	AbstractRealMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
37076	120	8	AbstractRealMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
37077	121	12	AbstractRealMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
37077	121	12	AbstractRealMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
37078	136	8	AbstractRealMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
37078	136	8	AbstractRealMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
37079	137	12	AbstractRealMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
37079	137	12	AbstractRealMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
37080	157	8	AbstractRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
37080	157	8	AbstractRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
37081	158	12	AbstractRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
37081	158	12	AbstractRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
37082	160	16	AbstractRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
37082	160	16	AbstractRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
37083	182	8	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	i < data.$.length
37083	182	8	AbstractRealMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
37083	182	8	AbstractRealMatrix.java	getData	data	double[][]	0	NIL-FOR	i < $.length
37084	184	12	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	j < dataI.$.length
37084	184	12	AbstractRealMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
37084	184	12	AbstractRealMatrix.java	getData	dataI	double[]	0	NIL-FOR	j < $.length
37085	268	8	AbstractRealMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
37085	268	8	AbstractRealMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
37086	269	12	AbstractRealMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
37086	269	12	AbstractRealMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
624	312	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination[0].length < columnsCount
624	312	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination.$.length < rowsCount
624	312	8	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	DEF	destination.length < $
624	312	8	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	DEF	destination[0].length < $
624	312	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$[0].length < columnsCount
624	312	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$.length < rowsCount
625	353	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination.$.length < selectedRows.$.length
625	353	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination[0].length < selectedColumns.$.length
625	353	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	DEF	destination.length < $.length
625	353	8	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	DEF	destination[0].length < $.length
625	353	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$.length < selectedRows.length
625	353	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$[0].length < selectedColumns.length
37087	362	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	i < selectedRows.$.length
37087	362	8	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
37087	362	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
37088	364	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	j < selectedColumns.$.length
37088	364	12	AbstractRealMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
37088	364	12	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
626	376	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	DEF	$ == 0
627	381	8	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DEF	$ == 0
37089	385	8	AbstractRealMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
37089	385	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
628	386	12	AbstractRealMatrix.java	setSubMatrix	THIS	AbstractRealMatrix	0	DEF	subMatrix[r].length != nCols
628	386	12	AbstractRealMatrix.java	setSubMatrix	r	int	0	DEF	subMatrix[$].length != nCols
628	386	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DEF	subMatrix[r].length != $
628	386	12	AbstractRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DEF	$[r].length != nCols
37090	398	8	AbstractRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
37090	398	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
37091	399	12	AbstractRealMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
37091	399	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
37092	415	8	AbstractRealMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
37092	415	8	AbstractRealMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
629	429	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	InvalidMatrixException	matrix.getColumnDimension() != $
629	429	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getRowDimension() != 1
629	429	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getColumnDimension() != nCols
37093	435	8	AbstractRealMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
37093	435	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
37094	448	8	AbstractRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
37094	448	8	AbstractRealMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
630	462	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	InvalidMatrixException	matrix.getRowDimension() != $
630	462	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getColumnDimension() != 1
630	462	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getRowDimension() != nRows
37095	468	8	AbstractRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
37095	468	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
631	486	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	InvalidMatrixException	vector.getDimension() != $
631	486	8	AbstractRealMatrix.java	setRowVector	vector	RealVector	0	InvalidMatrixException	$.getDimension() != nCols
37096	491	8	AbstractRealMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
37096	491	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
632	509	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	InvalidMatrixException	vector.getDimension() != $
632	509	8	AbstractRealMatrix.java	setColumnVector	vector	RealVector	0	InvalidMatrixException	$.getDimension() != nRows
37097	514	8	AbstractRealMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
37097	514	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
37098	527	8	AbstractRealMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
37098	527	8	AbstractRealMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
633	541	8	AbstractRealMatrix.java	setRow	THIS	AbstractRealMatrix	0	InvalidMatrixException	array.$.length != nCols
633	541	8	AbstractRealMatrix.java	setRow	nCols	int	0	InvalidMatrixException	array.length != $
633	541	8	AbstractRealMatrix.java	setRow	array	double[]	0	InvalidMatrixException	$.length != nCols
37099	546	8	AbstractRealMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
37099	546	8	AbstractRealMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
37100	559	8	AbstractRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
37100	559	8	AbstractRealMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
634	573	8	AbstractRealMatrix.java	setColumn	THIS	AbstractRealMatrix	0	InvalidMatrixException	array.$.length != nRows
634	573	8	AbstractRealMatrix.java	setColumn	nRows	int	0	InvalidMatrixException	array.length != $
634	573	8	AbstractRealMatrix.java	setColumn	array	double[]	0	InvalidMatrixException	$.length != nRows
37101	578	8	AbstractRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
37101	578	8	AbstractRealMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
635	624	8	AbstractRealMatrix.java	inverse	THIS	AbstractRealMatrix	0	DEF	$.lu == null
636	645	8	AbstractRealMatrix.java	isSingular	THIS	AbstractRealMatrix	0	DEF	$.lu == null
637	662	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
637	662	8	AbstractRealMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
37102	666	8	AbstractRealMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
37102	666	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
638	678	8	AbstractRealMatrix.java	operate	THIS	AbstractRealMatrix	0	DEF	v.$.length != nCols
638	678	8	AbstractRealMatrix.java	operate	nCols	int	0	DEF	v.length != $
638	678	8	AbstractRealMatrix.java	operate	v	double[]	0	DEF	$.length != nCols
37103	685	8	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
37103	685	8	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
37104	687	12	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
37104	687	12	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
639	705	12	AbstractRealMatrix.java	operate	nCols	int	0	DEF	v.getDimension() != $
639	705	12	AbstractRealMatrix.java	operate	v	RealVector	0	DEF	$.getDimension() != nCols
37105	712	12	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
37105	712	12	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
37106	714	16	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
37106	714	16	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
640	730	8	AbstractRealMatrix.java	preMultiply	THIS	AbstractRealMatrix	0	DEF	v.$.length != nRows
640	730	8	AbstractRealMatrix.java	preMultiply	nRows	int	0	DEF	v.length != $
640	730	8	AbstractRealMatrix.java	preMultiply	v	double[]	0	DEF	$.length != nRows
37107	737	8	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
37107	737	8	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
37108	739	12	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
37108	739	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
641	758	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	DEF	v.getDimension() != $
641	758	12	AbstractRealMatrix.java	preMultiply	v	RealVector	0	DEF	$.getDimension() != nRows
37109	765	12	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
37109	765	12	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
37110	767	16	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
37110	767	16	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
37111	784	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
37111	784	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
37112	785	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
37112	785	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
37113	801	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
37113	801	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
37114	802	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
37114	802	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
37115	817	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
37115	817	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
37116	818	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
37116	818	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
37117	836	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
37117	836	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
37118	837	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
37118	837	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
37119	850	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
37119	850	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
37120	851	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
37120	851	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
37121	867	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
37121	867	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
37122	868	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
37122	868	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
37123	883	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
37123	883	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
37124	884	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
37124	884	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
37125	902	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
37125	902	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
37126	903	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
37126	903	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
642	942	8	AbstractRealMatrix.java	solve	THIS	AbstractRealMatrix	0	DEF	$.lu == null
643	952	8	AbstractRealMatrix.java	solve	THIS	AbstractRealMatrix	0	DEF	$.lu == null
644	980	8	AbstractRealMatrix.java	luDecompose	THIS	AbstractRealMatrix	0	DEF	$.lu == null
37127	998	8	AbstractRealMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
37127	998	8	AbstractRealMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
645	999	12	AbstractRealMatrix.java	toString	i	int	0	DEF	$ > 0
37128	1003	12	AbstractRealMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
37128	1003	12	AbstractRealMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
646	1004	16	AbstractRealMatrix.java	toString	j	int	0	DEF	$ > 0
647	1027	8	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	object == $
647	1027	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ == this
648	1030	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ instanceof RealMatrix == false
649	1036	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getColumnDimension() != nCols
649	1036	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getRowDimension() != nRows
649	1036	8	AbstractRealMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
649	1036	8	AbstractRealMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
37129	1039	8	AbstractRealMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
37129	1039	8	AbstractRealMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
37130	1040	12	AbstractRealMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
37130	1040	12	AbstractRealMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
650	1041	16	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	$.getEntry(row, col) != m.getEntry(row, col)
650	1041	16	AbstractRealMatrix.java	equals	col	int	0	RET	getEntry(row, $) != m.getEntry(row, $)
650	1041	16	AbstractRealMatrix.java	equals	row	int	0	RET	getEntry($, col) != m.getEntry($, col)
650	1041	16	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	getEntry(row, col) != $.getEntry(row, col)
37131	1061	8	AbstractRealMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
37131	1061	8	AbstractRealMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
37132	1062	12	AbstractRealMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
37132	1062	12	AbstractRealMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
1086	136	8	AbstractScalarDifferentiableOptimizer.java	incrementIterationsCounter	THIS	AbstractScalarDifferentiableOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
1087	163	8	AbstractScalarDifferentiableOptimizer.java	computeObjectiveValue	THIS	AbstractScalarDifferentiableOptimizer	0	MaxEvaluationsExceededException	++$.evaluations > $.maxEvaluations
1512	148	4	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	1	DEF	interpolator.$.currentState != null
1512	148	4	AbstractStepInterpolator.java	AbstractStepInterpolator	interpolator	AbstractStepInterpolator	1	DEF	$.currentState != null
1513	272	6	AbstractStepInterpolator.java	getInterpolatedState	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
1514	287	6	AbstractStepInterpolator.java	getInterpolatedDerivatives	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
1515	341	4	AbstractStepInterpolator.java	finalizeStep	THIS	AbstractStepInterpolator	0	DEF	$.finalized
1516	374	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	1	DEF	$.currentState == null
1517	384	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	DEF	$.currentState != null
38033	385	8	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
38033	385	8	AbstractStepInterpolator.java	writeBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
1518	423	4	AbstractStepInterpolator.java	readBaseExternal	dimension	int	1	DEF	$ < 0
38034	427	8	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
38034	427	8	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
1122	57	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	$ == null
1123	86	8	AbstractStorelessUnivariateStatistic.java	evaluate	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
1123	86	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1123	86	8	AbstractStorelessUnivariateStatistic.java	evaluate	begin	int	0	DEF	test(values, $, length)
1123	86	8	AbstractStorelessUnivariateStatistic.java	evaluate	length	int	0	DEF	test(values, begin, $)
1124	125	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	$ == null
1125	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
1125	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	test($, begin, length)
1125	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	begin	int	0	DEF	test(values, $, length)
1125	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	length	int	0	DEF	test(values, begin, $)
37802	146	12	AbstractStorelessUnivariateStatistic.java	incrementAll	i	int	0	NIL-FOR	$ < k
37802	146	12	AbstractStorelessUnivariateStatistic.java	incrementAll	k	int	0	NIL-FOR	i < $
1126	161	8	AbstractStorelessUnivariateStatistic.java	equals	THIS	AbstractStorelessUnivariateStatistic	0	RET	object == $
1126	161	8	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ == this
1127	164	7	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ instanceof AbstractStorelessUnivariateStatistic == false
985	71	8	AbstractUnivariateRealOptimizer.java	checkResultComputed	THIS	AbstractUnivariateRealOptimizer	0	DEF	$.resultComputed
986	136	8	AbstractUnivariateRealOptimizer.java	computeObjectiveValue	THIS	AbstractUnivariateRealOptimizer	0	MaxEvaluationsExceededException	++$.evaluations > $.maxEvaluations
1234	79	8	AbstractUnivariateStatistic.java	test	values	double[]	0	DEF	$ == null
1235	83	8	AbstractUnivariateStatistic.java	test	begin	int	0	DEF	$ < 0
1236	88	8	AbstractUnivariateStatistic.java	test	length	int	0	DEF	$ < 0
1237	93	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	DEF	begin + length > values.$.length
1237	93	8	AbstractUnivariateStatistic.java	test	values	double[]	0	DEF	begin + length > $.length
1237	93	8	AbstractUnivariateStatistic.java	test	begin	int	0	DEF	$ + length > values.length
1237	93	8	AbstractUnivariateStatistic.java	test	length	int	0	DEF	begin + $ > values.length
1238	98	8	AbstractUnivariateStatistic.java	test	length	int	0	RET	$ == 0
1239	140	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	$ == null
1240	144	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	DEF	weights.$.length != values.$.length
1240	144	8	AbstractUnivariateStatistic.java	test	values	double[]	0	DEF	weights.length != $.length
1240	144	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	$.length != values.length
37826	150	8	AbstractUnivariateStatistic.java	test	i	int	0	NIL-FOR	$ < begin + length
37826	150	8	AbstractUnivariateStatistic.java	test	begin	int	0	NIL-FOR	i < $ + length
37826	150	8	AbstractUnivariateStatistic.java	test	length	int	0	NIL-FOR	i < begin + $
1241	151	12	AbstractUnivariateStatistic.java	test	i	int	0	DEF	Double.isNaN(weights[$])
1241	151	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	Double.isNaN($[i])
1242	155	12	AbstractUnivariateStatistic.java	test	i	int	0	DEF	Double.isInfinite(weights[$])
1242	155	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	Double.isInfinite($[i])
1243	159	12	AbstractUnivariateStatistic.java	test	i	int	0	DEF	weights[$] < 0
1243	159	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	$[i] < 0
1244	163	12	AbstractUnivariateStatistic.java	test	i	int	0	DEF	weights[$] > 0.0
1244	163	12	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	DEF	$
1244	163	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	$[i] > 0.0
1245	168	8	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	DEF	$
1601	197	8	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1601	197	8	AdamsBashforthIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
38089	226	8	AdamsBashforthIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
38090	232	12	AdamsBashforthIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
38091	238	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	i < y0.$.length
38091	238	16	AdamsBashforthIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
38091	238	16	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
1602	248	16	AdamsBashforthIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
38092	260	20	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	j < y0.$.length
38092	260	20	AdamsBashforthIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
38092	260	20	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
1603	271	20	AdamsBashforthIntegrator.java	integrate	interpolatorTmp	NordsieckStepInterpolator	1	DEF	manager.evaluateStep($)
1603	271	20	AdamsBashforthIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolatorTmp)
1604	273	24	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	1	DEF	Math.abs(dt) <= Math.ulp($.stepStart)
1604	273	24	AdamsBashforthIntegrator.java	integrate	dt	double	1	DEF	Math.abs($) <= Math.ulp(stepStart)
1605	312	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	manager.reset($.stepStart, y)
1605	312	12	AdamsBashforthIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1605	312	12	AdamsBashforthIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1605	312	12	AdamsBashforthIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1606	321	12	AdamsBashforthIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1595	215	8	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1595	215	8	AdamsMoultonIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
38085	243	8	AdamsMoultonIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
38086	249	12	AdamsMoultonIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
38087	263	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
38087	263	16	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
38087	263	16	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
1596	272	16	AdamsMoultonIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
38088	279	20	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
38088	279	20	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
38088	279	20	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
1597	289	20	AdamsMoultonIntegrator.java	integrate	interpolatorTmp	NordsieckStepInterpolator	1	DEF	manager.evaluateStep($)
1597	289	20	AdamsMoultonIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolatorTmp)
1598	291	24	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	1	DEF	Math.abs(dt) <= Math.ulp($.stepStart)
1598	291	24	AdamsMoultonIntegrator.java	integrate	dt	double	1	DEF	Math.abs($) <= Math.ulp(stepStart)
1599	330	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	manager.reset($.stepStart, y)
1599	330	12	AdamsMoultonIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1599	330	12	AdamsMoultonIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1599	330	12	AdamsMoultonIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1600	339	12	AdamsMoultonIntegrator.java	integrate	lastStep	boolean	0	DEF	$
38143	167	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ > 0
38144	191	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ < nSteps
38144	191	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	nSteps	int	0	NIL-FOR	i < $
1651	205	12	AdamsNordsieckTransformer.java	getInstance	t	AdamsNordsieckTransformer	0	DEF	$ == null
38145	239	8	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < pData.$.length
38145	239	8	AdamsNordsieckTransformer.java	buildP	i	int	0	NIL-FOR	$ < pData.length
38145	239	8	AdamsNordsieckTransformer.java	buildP	pData	BigFraction[][]	0	NIL-FOR	i < $.length
38146	244	12	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < pI.$.length
38146	244	12	AdamsNordsieckTransformer.java	buildP	j	int	0	NIL-FOR	$ < pI.length
38146	244	12	AdamsNordsieckTransformer.java	buildP	pI	BigFraction[]	0	NIL-FOR	j < $.length
38147	262	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < multistep.$.length
38147	262	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	i	int	0	NIL-FOR	$ < multistep.length
38147	262	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	multistep	double[][]	0	NIL-FOR	i < $.length
38148	264	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < first.$.length
38148	264	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < first.length
38148	264	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	first	double[]	0	NIL-FOR	j < $.length
38149	303	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < data.$.length
38149	303	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	i	int	0	NIL-FOR	$ < data.length
38149	303	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	data	double[][]	0	NIL-FOR	i < $.length
38150	306	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < dataI.$.length
38150	306	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	j	int	0	NIL-FOR	$ < dataI.length
38150	306	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	dataI	double[]	0	NIL-FOR	j < $.length
1634	150	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize < $.minStep
1634	150	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize > $.maxStep
1634	150	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ < minStep
1634	150	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ > maxStep
1635	173	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecAbsoluteTolerance.$.length != y0.$.length
1635	173	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecAbsoluteTolerance != null
1635	173	6	AdaptiveStepsizeIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	vecAbsoluteTolerance.length != $.length
1636	180	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecRelativeTolerance.$.length != y0.$.length
1636	180	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecRelativeTolerance != null
1636	180	6	AdaptiveStepsizeIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	vecRelativeTolerance.length != $.length
1637	209	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	RET	$.initialStep > 0
38131	219	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
38131	219	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
38131	219	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
1638	228	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
38132	233	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
38132	233	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
38132	233	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
38133	240	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
38133	240	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
38133	240	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
1639	254	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < $.getMinStep()
1639	254	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ < getMinStep()
1640	257	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h > $.getMaxStep()
1640	257	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ > getMaxStep()
1641	260	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
1642	281	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	Math.abs(h) < $.minStep
1642	281	6	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	IntegratorException	Math.abs($) < minStep
1643	282	10	AdaptiveStepsizeIntegrator.java	filterStep	acceptSmall	boolean	1	DEF	$
1644	291	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	1	DEF	filteredH > $.maxStep
1644	291	6	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	1	DEF	$ > maxStep
1645	293	13	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	filteredH < -$.maxStep
1645	293	13	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	0	DEF	$ < -maxStep
1248	302	8	AggregateSummaryStatistics.java	aggregate	statistics	Collection<SummaryStatistics>	0	RET	$ == null
1249	306	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	RET	$.hasNext()
37827	316	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	NIL-WHILE	$.hasNext()
1250	318	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMin() < min
1250	318	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	current.getMin() < $
1250	318	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	Double.isNaN($)
1251	321	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMax() > max
1251	321	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	current.getMax() > $
1251	321	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	Double.isNaN($)
1252	333	8	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 0
1253	335	15	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 1
671	106	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	copyArray	boolean	1	DEF	$
672	109	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	d	T[][]	0	NullPointerException	$ == null
673	113	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	DEF	$ == 0
674	117	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	DEF	$ == 0
37161	120	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	NIL-FOR	$ < nRows
37161	120	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	r < $
675	121	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	THIS	Array2DRowFieldMatrix	0	DEF	d[r].length != nCols
675	121	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	DEF	d[$].length != nCols
675	121	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	DEF	d[r].length != $
675	121	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	d	T[][]	0	DEF	$[r].length != nCols
37162	143	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	row	int	0	NIL-FOR	$ < nRows
37162	143	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	row < $
37163	188	8	Array2DRowFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
37163	188	8	Array2DRowFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
37164	192	12	Array2DRowFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
37164	192	12	Array2DRowFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
37165	228	8	Array2DRowFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
37165	228	8	Array2DRowFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
37166	232	12	Array2DRowFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
37166	232	12	Array2DRowFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
37167	269	8	Array2DRowFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
37167	269	8	Array2DRowFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
37168	272	12	Array2DRowFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
37168	272	12	Array2DRowFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
37169	274	16	Array2DRowFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
37169	274	16	Array2DRowFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
676	306	8	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	1	DEF	$.data == null
677	307	12	Array2DRowFieldMatrix.java	setSubMatrix	row	int	0	DEF	$ > 0
678	312	12	Array2DRowFieldMatrix.java	setSubMatrix	column	int	0	DEF	$ > 0
679	318	12	Array2DRowFieldMatrix.java	setSubMatrix	nRows	int	0	DEF	$ == 0
680	323	12	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	DEF	$ == 0
37170	327	12	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	NIL-FOR	i < $.data.$.length
37170	327	12	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
681	328	16	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	DEF	subMatrix[i].length != nCols
681	328	16	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	DEF	subMatrix[$].length != nCols
681	328	16	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	DEF	subMatrix[i].length != $
681	328	16	Array2DRowFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DEF	$[i].length != nCols
682	411	8	Array2DRowFieldMatrix.java	operate	THIS	Array2DRowFieldMatrix	0	DEF	v.$.length != nCols
682	411	8	Array2DRowFieldMatrix.java	operate	nCols	int	0	DEF	v.length != $
682	411	8	Array2DRowFieldMatrix.java	operate	v	T[]	0	DEF	$.length != nCols
37171	417	8	Array2DRowFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
37171	417	8	Array2DRowFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
37172	420	12	Array2DRowFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
37172	420	12	Array2DRowFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
683	435	8	Array2DRowFieldMatrix.java	preMultiply	THIS	Array2DRowFieldMatrix	0	DEF	v.$.length != nRows
683	435	8	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	DEF	v.length != $
683	435	8	Array2DRowFieldMatrix.java	preMultiply	v	T[]	0	DEF	$.length != nRows
37173	442	8	Array2DRowFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
37173	442	8	Array2DRowFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
37174	444	12	Array2DRowFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
37174	444	12	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
37175	461	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
37175	461	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
37176	463	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
37176	463	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
37177	477	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
37177	477	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
37178	479	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
37178	479	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
37179	495	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
37179	495	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
37180	497	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
37180	497	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
37181	513	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
37181	513	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
37182	515	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
37182	515	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
37183	529	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
37183	529	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
37184	530	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
37184	530	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
37185	545	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
37185	545	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
37186	546	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
37186	546	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
37187	562	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
37187	562	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
37188	563	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
37188	563	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
37189	580	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
37189	580	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
37190	581	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
37190	581	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
37191	597	8	Array2DRowFieldMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
37191	597	8	Array2DRowFieldMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
801	115	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	copyArray	boolean	1	DEF	$
802	118	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	NullPointerException	$ == null
803	122	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	DEF	$ == 0
804	126	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	DEF	$ == 0
37471	129	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	NIL-FOR	$ < nRows
37471	129	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	r < $
805	130	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	THIS	Array2DRowRealMatrix	0	DEF	d[r].length != nCols
805	130	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	DEF	d[$].length != nCols
805	130	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	DEF	d[r].length != $
805	130	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	DEF	$[r].length != nCols
37472	151	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	row	int	0	NIL-FOR	$ < nRows
37472	151	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	row < $
37473	196	8	Array2DRowRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
37473	196	8	Array2DRowRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
37474	200	12	Array2DRowRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
37474	200	12	Array2DRowRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
37475	236	8	Array2DRowRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
37475	236	8	Array2DRowRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
37476	240	12	Array2DRowRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
37476	240	12	Array2DRowRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
37477	277	8	Array2DRowRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
37477	277	8	Array2DRowRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
37478	280	12	Array2DRowRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
37478	280	12	Array2DRowRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
37479	282	16	Array2DRowRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
37479	282	16	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
806	314	8	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	1	DEF	$.data == null
807	315	12	Array2DRowRealMatrix.java	setSubMatrix	row	int	0	DEF	$ > 0
808	320	12	Array2DRowRealMatrix.java	setSubMatrix	column	int	0	DEF	$ > 0
809	326	12	Array2DRowRealMatrix.java	setSubMatrix	nRows	int	0	DEF	$ == 0
810	331	12	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	DEF	$ == 0
37480	335	12	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	NIL-FOR	i < $.data.$.length
37480	335	12	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
811	336	16	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	DEF	subMatrix[i].length != nCols
811	336	16	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	DEF	subMatrix[$].length != nCols
811	336	16	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	DEF	subMatrix[i].length != $
811	336	16	Array2DRowRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DEF	$[i].length != nCols
812	419	8	Array2DRowRealMatrix.java	operate	THIS	Array2DRowRealMatrix	0	DEF	v.$.length != nCols
812	419	8	Array2DRowRealMatrix.java	operate	nCols	int	0	DEF	v.length != $
812	419	8	Array2DRowRealMatrix.java	operate	v	double[]	0	DEF	$.length != nCols
37481	425	8	Array2DRowRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
37481	425	8	Array2DRowRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
37482	428	12	Array2DRowRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
37482	428	12	Array2DRowRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
813	443	8	Array2DRowRealMatrix.java	preMultiply	THIS	Array2DRowRealMatrix	0	DEF	v.$.length != nRows
813	443	8	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	DEF	v.length != $
813	443	8	Array2DRowRealMatrix.java	preMultiply	v	double[]	0	DEF	$.length != nRows
37483	450	8	Array2DRowRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
37483	450	8	Array2DRowRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
37484	452	12	Array2DRowRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
37484	452	12	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
37485	469	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
37485	469	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
37486	471	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
37486	471	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
37487	485	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
37487	485	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
37488	487	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
37488	487	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
37489	503	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
37489	503	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
37490	505	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
37490	505	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
37491	521	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
37491	521	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
37492	523	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
37492	523	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
37493	537	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
37493	537	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
37494	538	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
37494	538	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
37495	553	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
37495	553	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
37496	554	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
37496	554	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
37497	570	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
37497	570	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
37498	571	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
37498	571	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
37499	588	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
37499	588	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
37500	589	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
37500	589	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
37501	605	8	Array2DRowRealMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
37501	605	8	Array2DRowRealMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
952	127	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	DEF	d.$.length < pos + size
952	127	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	DEF	$.length < pos + size
952	127	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	DEF	d.length < $ + size
952	127	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	DEF	d.length < pos + $
37630	144	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37630	144	8	ArrayFieldVector.java	ArrayFieldVector	i	int	0	NIL-FOR	$ < data.length
37631	248	12	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37631	248	12	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
37632	259	8	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37632	259	8	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
37633	283	12	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37633	283	12	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
37634	294	8	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37634	294	8	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
37635	314	8	ArrayFieldVector.java	mapAdd	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37635	314	8	ArrayFieldVector.java	mapAdd	i	int	0	NIL-FOR	$ < data.length
37636	322	8	ArrayFieldVector.java	mapAddToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37636	322	8	ArrayFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
37637	331	8	ArrayFieldVector.java	mapSubtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37637	331	8	ArrayFieldVector.java	mapSubtract	i	int	0	NIL-FOR	$ < data.length
37638	339	8	ArrayFieldVector.java	mapSubtractToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37638	339	8	ArrayFieldVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
37639	348	8	ArrayFieldVector.java	mapMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37639	348	8	ArrayFieldVector.java	mapMultiply	i	int	0	NIL-FOR	$ < data.length
37640	356	8	ArrayFieldVector.java	mapMultiplyToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37640	356	8	ArrayFieldVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
37641	365	8	ArrayFieldVector.java	mapDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37641	365	8	ArrayFieldVector.java	mapDivide	i	int	0	NIL-FOR	$ < data.length
37642	373	8	ArrayFieldVector.java	mapDivideToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37642	373	8	ArrayFieldVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
37643	383	8	ArrayFieldVector.java	mapInv	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37643	383	8	ArrayFieldVector.java	mapInv	i	int	0	NIL-FOR	$ < data.length
37644	392	8	ArrayFieldVector.java	mapInvToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37644	392	8	ArrayFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
37645	406	12	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37645	406	12	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
37646	418	8	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37646	418	8	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
37647	443	12	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37647	443	12	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
37648	455	8	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37648	455	8	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
37649	494	12	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37649	494	12	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
37650	506	8	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37650	506	8	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
37651	551	12	ArrayFieldVector.java	outerProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37651	551	12	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
37652	552	16	ArrayFieldVector.java	outerProduct	THIS	ArrayFieldVector	0	NIL-FOR	j < $.data.$.length
37652	552	16	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
37653	577	8	ArrayFieldVector.java	outerProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37653	577	8	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
37654	578	12	ArrayFieldVector.java	outerProduct	THIS	ArrayFieldVector	0	NIL-FOR	j < $.data.$.length
37654	578	12	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
37655	653	16	ArrayFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
37655	653	16	ArrayFieldVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
37655	653	16	ArrayFieldVector.java	setSubVector	v	FieldVector<T>	0	NIL-FOR	i < index + $.getDimension()
953	716	8	ArrayFieldVector.java	checkVectorDimensions	THIS	ArrayFieldVector	0	DEF	$.data.$.length != n
953	716	8	ArrayFieldVector.java	checkVectorDimensions	n	int	0	DEF	data.length != $
954	746	6	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$ == other
954	746	6	ArrayFieldVector.java	equals	other	Object	0	RET	this == $
955	750	6	ArrayFieldVector.java	equals	other	Object	0	RET	$ == null
956	757	10	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data.$.length != rhs.getDimension()
956	757	10	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data.length != $.getDimension()
37656	761	10	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
37656	761	10	ArrayFieldVector.java	equals	i	int	0	NIL-FOR	$ < data.length
957	762	14	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data[i].equals(rhs.getEntry(i))
957	762	14	ArrayFieldVector.java	equals	i	int	0	RET	data[$].equals(rhs.getEntry($))
957	762	14	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data[i].equals($.getEntry(i))
958	796	8	ArrayFieldVector.java	checkIndex	THIS	ArrayFieldVector	0	MatrixIndexException	index >= $.getDimension()
958	796	8	ArrayFieldVector.java	checkIndex	index	int	0	MatrixIndexException	$ >= getDimension()
958	796	8	ArrayFieldVector.java	checkIndex	index	int	0	MatrixIndexException	$ < 0
540	97	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullPointerException	$ == null
541	100	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	DEF	d.$.length == 0
541	100	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	DEF	$.length == 0
542	113	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	DEF	d.$.length < pos + size
542	113	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	DEF	$.length < pos + size
542	113	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	DEF	d.length < $ + size
542	113	8	ArrayRealVector.java	ArrayRealVector	size	int	0	DEF	d.length < pos + $
36888	128	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < d.$.length
36888	128	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < d.length
36888	128	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NIL-FOR	i < $.length
543	140	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	DEF	d.$.length < pos + size
543	140	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	DEF	$.length < pos + size
543	140	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	DEF	d.length < $ + size
543	140	8	ArrayRealVector.java	ArrayRealVector	size	int	0	DEF	d.length < pos + $
36889	146	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < pos + size
36889	146	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NIL-FOR	i < $ + size
36889	146	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NIL-FOR	i < pos + $
36890	157	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36890	157	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < data.length
36891	236	12	ArrayRealVector.java	add	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36891	236	12	ArrayRealVector.java	add	i	int	0	NIL-FOR	$ < data.length
36892	248	8	ArrayRealVector.java	add	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36892	248	8	ArrayRealVector.java	add	i	int	0	NIL-FOR	$ < data.length
36893	273	12	ArrayRealVector.java	subtract	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36893	273	12	ArrayRealVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
36894	285	8	ArrayRealVector.java	subtract	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36894	285	8	ArrayRealVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
36895	305	8	ArrayRealVector.java	mapAdd	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36895	305	8	ArrayRealVector.java	mapAdd	i	int	0	NIL-FOR	$ < data.length
36896	313	8	ArrayRealVector.java	mapAddToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36896	313	8	ArrayRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
36897	322	8	ArrayRealVector.java	mapSubtract	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36897	322	8	ArrayRealVector.java	mapSubtract	i	int	0	NIL-FOR	$ < data.length
36898	330	8	ArrayRealVector.java	mapSubtractToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36898	330	8	ArrayRealVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
36899	339	8	ArrayRealVector.java	mapMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36899	339	8	ArrayRealVector.java	mapMultiply	i	int	0	NIL-FOR	$ < data.length
36900	347	8	ArrayRealVector.java	mapMultiplyToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36900	347	8	ArrayRealVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
36901	356	8	ArrayRealVector.java	mapDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36901	356	8	ArrayRealVector.java	mapDivide	i	int	0	NIL-FOR	$ < data.length
36902	364	8	ArrayRealVector.java	mapDivideToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36902	364	8	ArrayRealVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
36903	373	8	ArrayRealVector.java	mapPow	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36903	373	8	ArrayRealVector.java	mapPow	i	int	0	NIL-FOR	$ < data.length
36904	381	8	ArrayRealVector.java	mapPowToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36904	381	8	ArrayRealVector.java	mapPowToSelf	i	int	0	NIL-FOR	$ < data.length
36905	390	8	ArrayRealVector.java	mapExp	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36905	390	8	ArrayRealVector.java	mapExp	i	int	0	NIL-FOR	$ < data.length
36906	398	8	ArrayRealVector.java	mapExpToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36906	398	8	ArrayRealVector.java	mapExpToSelf	i	int	0	NIL-FOR	$ < data.length
36907	407	8	ArrayRealVector.java	mapExpm1	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36907	407	8	ArrayRealVector.java	mapExpm1	i	int	0	NIL-FOR	$ < data.length
36908	415	8	ArrayRealVector.java	mapExpm1ToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36908	415	8	ArrayRealVector.java	mapExpm1ToSelf	i	int	0	NIL-FOR	$ < data.length
36909	424	8	ArrayRealVector.java	mapLog	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36909	424	8	ArrayRealVector.java	mapLog	i	int	0	NIL-FOR	$ < data.length
36910	432	8	ArrayRealVector.java	mapLogToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36910	432	8	ArrayRealVector.java	mapLogToSelf	i	int	0	NIL-FOR	$ < data.length
36911	441	8	ArrayRealVector.java	mapLog10	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36911	441	8	ArrayRealVector.java	mapLog10	i	int	0	NIL-FOR	$ < data.length
36912	449	8	ArrayRealVector.java	mapLog10ToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36912	449	8	ArrayRealVector.java	mapLog10ToSelf	i	int	0	NIL-FOR	$ < data.length
36913	458	8	ArrayRealVector.java	mapLog1p	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36913	458	8	ArrayRealVector.java	mapLog1p	i	int	0	NIL-FOR	$ < data.length
36914	466	8	ArrayRealVector.java	mapLog1pToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36914	466	8	ArrayRealVector.java	mapLog1pToSelf	i	int	0	NIL-FOR	$ < data.length
36915	475	8	ArrayRealVector.java	mapCosh	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36915	475	8	ArrayRealVector.java	mapCosh	i	int	0	NIL-FOR	$ < data.length
36916	483	8	ArrayRealVector.java	mapCoshToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36916	483	8	ArrayRealVector.java	mapCoshToSelf	i	int	0	NIL-FOR	$ < data.length
36917	492	8	ArrayRealVector.java	mapSinh	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36917	492	8	ArrayRealVector.java	mapSinh	i	int	0	NIL-FOR	$ < data.length
36918	500	8	ArrayRealVector.java	mapSinhToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36918	500	8	ArrayRealVector.java	mapSinhToSelf	i	int	0	NIL-FOR	$ < data.length
36919	509	8	ArrayRealVector.java	mapTanh	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36919	509	8	ArrayRealVector.java	mapTanh	i	int	0	NIL-FOR	$ < data.length
36920	517	8	ArrayRealVector.java	mapTanhToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36920	517	8	ArrayRealVector.java	mapTanhToSelf	i	int	0	NIL-FOR	$ < data.length
36921	526	8	ArrayRealVector.java	mapCos	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36921	526	8	ArrayRealVector.java	mapCos	i	int	0	NIL-FOR	$ < data.length
36922	534	8	ArrayRealVector.java	mapCosToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36922	534	8	ArrayRealVector.java	mapCosToSelf	i	int	0	NIL-FOR	$ < data.length
36923	543	8	ArrayRealVector.java	mapSin	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36923	543	8	ArrayRealVector.java	mapSin	i	int	0	NIL-FOR	$ < data.length
36924	551	8	ArrayRealVector.java	mapSinToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36924	551	8	ArrayRealVector.java	mapSinToSelf	i	int	0	NIL-FOR	$ < data.length
36925	560	8	ArrayRealVector.java	mapTan	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36925	560	8	ArrayRealVector.java	mapTan	i	int	0	NIL-FOR	$ < data.length
36926	568	8	ArrayRealVector.java	mapTanToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36926	568	8	ArrayRealVector.java	mapTanToSelf	i	int	0	NIL-FOR	$ < data.length
36927	577	8	ArrayRealVector.java	mapAcos	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36927	577	8	ArrayRealVector.java	mapAcos	i	int	0	NIL-FOR	$ < data.length
36928	585	8	ArrayRealVector.java	mapAcosToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36928	585	8	ArrayRealVector.java	mapAcosToSelf	i	int	0	NIL-FOR	$ < data.length
36929	594	8	ArrayRealVector.java	mapAsin	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36929	594	8	ArrayRealVector.java	mapAsin	i	int	0	NIL-FOR	$ < data.length
36930	602	8	ArrayRealVector.java	mapAsinToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36930	602	8	ArrayRealVector.java	mapAsinToSelf	i	int	0	NIL-FOR	$ < data.length
36931	611	8	ArrayRealVector.java	mapAtan	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36931	611	8	ArrayRealVector.java	mapAtan	i	int	0	NIL-FOR	$ < data.length
36932	619	8	ArrayRealVector.java	mapAtanToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36932	619	8	ArrayRealVector.java	mapAtanToSelf	i	int	0	NIL-FOR	$ < data.length
36933	628	8	ArrayRealVector.java	mapInv	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36933	628	8	ArrayRealVector.java	mapInv	i	int	0	NIL-FOR	$ < data.length
36934	636	8	ArrayRealVector.java	mapInvToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36934	636	8	ArrayRealVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
36935	645	8	ArrayRealVector.java	mapAbs	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36935	645	8	ArrayRealVector.java	mapAbs	i	int	0	NIL-FOR	$ < data.length
36936	653	8	ArrayRealVector.java	mapAbsToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36936	653	8	ArrayRealVector.java	mapAbsToSelf	i	int	0	NIL-FOR	$ < data.length
36937	662	8	ArrayRealVector.java	mapSqrt	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36937	662	8	ArrayRealVector.java	mapSqrt	i	int	0	NIL-FOR	$ < data.length
36938	670	8	ArrayRealVector.java	mapSqrtToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36938	670	8	ArrayRealVector.java	mapSqrtToSelf	i	int	0	NIL-FOR	$ < data.length
36939	679	8	ArrayRealVector.java	mapCbrt	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36939	679	8	ArrayRealVector.java	mapCbrt	i	int	0	NIL-FOR	$ < data.length
36940	687	8	ArrayRealVector.java	mapCbrtToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36940	687	8	ArrayRealVector.java	mapCbrtToSelf	i	int	0	NIL-FOR	$ < data.length
36941	696	8	ArrayRealVector.java	mapCeil	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36941	696	8	ArrayRealVector.java	mapCeil	i	int	0	NIL-FOR	$ < data.length
36942	704	8	ArrayRealVector.java	mapCeilToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36942	704	8	ArrayRealVector.java	mapCeilToSelf	i	int	0	NIL-FOR	$ < data.length
36943	713	8	ArrayRealVector.java	mapFloor	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36943	713	8	ArrayRealVector.java	mapFloor	i	int	0	NIL-FOR	$ < data.length
36944	721	8	ArrayRealVector.java	mapFloorToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36944	721	8	ArrayRealVector.java	mapFloorToSelf	i	int	0	NIL-FOR	$ < data.length
36945	730	8	ArrayRealVector.java	mapRint	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36945	730	8	ArrayRealVector.java	mapRint	i	int	0	NIL-FOR	$ < data.length
36946	738	8	ArrayRealVector.java	mapRintToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36946	738	8	ArrayRealVector.java	mapRintToSelf	i	int	0	NIL-FOR	$ < data.length
36947	747	8	ArrayRealVector.java	mapSignum	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36947	747	8	ArrayRealVector.java	mapSignum	i	int	0	NIL-FOR	$ < data.length
36948	755	8	ArrayRealVector.java	mapSignumToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36948	755	8	ArrayRealVector.java	mapSignumToSelf	i	int	0	NIL-FOR	$ < data.length
36949	764	8	ArrayRealVector.java	mapUlp	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36949	764	8	ArrayRealVector.java	mapUlp	i	int	0	NIL-FOR	$ < data.length
36950	772	8	ArrayRealVector.java	mapUlpToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36950	772	8	ArrayRealVector.java	mapUlpToSelf	i	int	0	NIL-FOR	$ < data.length
36951	786	12	ArrayRealVector.java	ebeMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36951	786	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
36952	798	8	ArrayRealVector.java	ebeMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36952	798	8	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
36953	823	12	ArrayRealVector.java	ebeDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36953	823	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
36954	835	8	ArrayRealVector.java	ebeDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36954	835	8	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
36955	874	12	ArrayRealVector.java	dotProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36955	874	12	ArrayRealVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
36956	886	8	ArrayRealVector.java	dotProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36956	886	8	ArrayRealVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
36957	938	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36957	938	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
36958	951	8	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36958	951	8	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
36959	984	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36959	984	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
36960	997	8	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36960	997	8	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
36961	1030	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36961	1030	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
36962	1043	8	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36962	1043	8	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
544	1071	8	ArrayRealVector.java	unitVector	norm	double	0	DEF	$ == 0
545	1080	8	ArrayRealVector.java	unitize	norm	double	0	DEF	$ == 0
36963	1083	8	ArrayRealVector.java	unitize	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36963	1083	8	ArrayRealVector.java	unitize	i	int	0	NIL-FOR	$ < data.length
36964	1116	12	ArrayRealVector.java	outerProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36964	1116	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
36965	1117	16	ArrayRealVector.java	outerProduct	THIS	ArrayRealVector	0	NIL-FOR	j < $.data.$.length
36965	1117	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
36966	1142	8	ArrayRealVector.java	outerProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36966	1142	8	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
36967	1143	12	ArrayRealVector.java	outerProduct	THIS	ArrayRealVector	0	NIL-FOR	j < $.data.$.length
36967	1143	12	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
36968	1218	16	ArrayRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
36968	1218	16	ArrayRealVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
36968	1218	16	ArrayRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < index + $.getDimension()
546	1287	8	ArrayRealVector.java	checkVectorDimensions	THIS	ArrayRealVector	0	DEF	$.data.$.length != n
546	1287	8	ArrayRealVector.java	checkVectorDimensions	n	int	0	DEF	data.length != $
547	1300	12	ArrayRealVector.java	isNaN	THIS	ArrayRealVector	0	RET	Double.isNaN($.v)
548	1315	8	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	$.isNaN()
549	1320	12	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	Double.isInfinite($.v)
550	1351	6	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$ == other
550	1351	6	ArrayRealVector.java	equals	other	Object	0	RET	this == $
551	1355	6	ArrayRealVector.java	equals	other	Object	0	RET	$ == null
552	1362	10	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data.$.length != rhs.getDimension()
552	1362	10	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data.length != $.getDimension()
553	1366	10	ArrayRealVector.java	equals	rhs	RealVector	0	RET	$.isNaN()
36969	1370	10	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
36969	1370	10	ArrayRealVector.java	equals	i	int	0	NIL-FOR	$ < data.length
554	1371	14	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data[i] != rhs.getEntry(i)
554	1371	14	ArrayRealVector.java	equals	i	int	0	RET	data[$] != rhs.getEntry($)
554	1371	14	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data[i] != $.getEntry(i)
555	1391	8	ArrayRealVector.java	hashCode	THIS	ArrayRealVector	0	RET	$.isNaN()
556	1404	8	ArrayRealVector.java	checkIndex	THIS	ArrayRealVector	0	MatrixIndexException	index >= $.getDimension()
556	1404	8	ArrayRealVector.java	checkIndex	index	int	0	MatrixIndexException	$ < 0
556	1404	8	ArrayRealVector.java	checkIndex	index	int	0	MatrixIndexException	$ >= getDimension()
1481	121	8	Beta.java	regularizedBeta	x	double	1	DEF	$ < 0
1481	121	8	Beta.java	regularizedBeta	x	double	1	DEF	Double.isNaN($)
1481	121	8	Beta.java	regularizedBeta	x	double	1	DEF	$ > 1
1481	121	8	Beta.java	regularizedBeta	a	double	1	DEF	$ <= 0.0
1481	121	8	Beta.java	regularizedBeta	a	double	1	DEF	Double.isNaN($)
1481	121	8	Beta.java	regularizedBeta	b	double	1	DEF	$ <= 0.0
1481	121	8	Beta.java	regularizedBeta	b	double	1	DEF	Double.isNaN($)
1482	125	15	Beta.java	regularizedBeta	x	double	1	DEF	$ > (a + 1.0) / (a + b + 2.0)
1482	125	15	Beta.java	regularizedBeta	a	double	1	DEF	x > ($ + 1.0) / ($ + b + 2.0)
1482	125	15	Beta.java	regularizedBeta	b	double	1	DEF	x > (a + 1.0) / (a + $ + 2.0)
1483	192	8	Beta.java	logBeta	a	double	1	DEF	$ <= 0.0
1483	192	8	Beta.java	logBeta	a	double	1	DEF	Double.isNaN($)
1483	192	8	Beta.java	logBeta	b	double	1	DEF	$ <= 0.0
1483	192	8	Beta.java	logBeta	b	double	1	DEF	Double.isNaN($)
480	89	8	BetaDistributionImpl.java	recomputeZ	THIS	BetaDistributionImpl	0	DEF	Double.isNaN($.z)
481	97	8	BetaDistributionImpl.java	density	x	Double	1	RET	$ < 0
481	97	8	BetaDistributionImpl.java	density	x	Double	1	RET	$ > 1
482	99	15	BetaDistributionImpl.java	density	x	Double	1	MathException:RET	$ == 0
483	100	12	BetaDistributionImpl.java	density	THIS	BetaDistributionImpl	0	MathException	$.alpha < 1
484	104	15	BetaDistributionImpl.java	density	x	Double	1	MathException:RET	$ == 1
485	105	12	BetaDistributionImpl.java	density	THIS	BetaDistributionImpl	0	MathException	$.beta < 1
486	119	8	BetaDistributionImpl.java	inverseCumulativeProbability	p	double	1	RET	$ == 0
487	121	15	BetaDistributionImpl.java	inverseCumulativeProbability	p	double	1	RET	$ == 1
488	148	8	BetaDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ <= 0
489	150	15	BetaDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ >= 1
734	73	8	BiDiagonalTransformer.java	BiDiagonalTransformer	m	int	1	DEF	$ >= n
734	73	8	BiDiagonalTransformer.java	BiDiagonalTransformer	n	int	1	DEF	m >= $
735	88	8	BiDiagonalTransformer.java	getU	THIS	BiDiagonalTransformer	0	DEF	$.cachedU == null
37285	98	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= p
37285	98	12	BiDiagonalTransformer.java	getU	p	int	0	NIL-FOR	k >= $
37286	103	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= diagOffset
37286	103	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	NIL-FOR	k >= $
736	106	16	BiDiagonalTransformer.java	getU	hK	double[]	0	DEF	$[k - diagOffset] != 0.0
736	106	16	BiDiagonalTransformer.java	getU	k	int	0	DEF	hK[$ - diagOffset] != 0.0
736	106	16	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	hK[k - $] != 0.0
37287	107	20	BiDiagonalTransformer.java	getU	j	int	0	NIL-FOR	$ < m
37287	107	20	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	j < $
37288	109	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
37288	109	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
37289	114	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
37289	114	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
737	120	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	$ > 0
738	137	8	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	$.cachedB == null
37290	142	12	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	NIL-FOR	i < $.main.$.length
37290	142	12	BiDiagonalTransformer.java	getB	i	int	0	NIL-FOR	$ < main.length
739	144	16	BiDiagonalTransformer.java	getB	m	int	1	DEF	$ < n
739	144	16	BiDiagonalTransformer.java	getB	n	int	1	DEF	m < $
740	145	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ > 0
741	149	20	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	i < $.main.$.length - 1
741	149	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ < main.length - 1
742	169	8	BiDiagonalTransformer.java	getV	THIS	BiDiagonalTransformer	0	DEF	$.cachedV == null
37291	179	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= p
37291	179	12	BiDiagonalTransformer.java	getV	p	int	0	NIL-FOR	k >= $
37292	184	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= diagOffset
37292	184	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	NIL-FOR	k >= $
743	187	16	BiDiagonalTransformer.java	getV	hK	double[]	0	DEF	$[k] != 0.0
743	187	16	BiDiagonalTransformer.java	getV	k	int	0	DEF	hK[$] != 0.0
37293	188	20	BiDiagonalTransformer.java	getV	j	int	0	NIL-FOR	$ < n
37293	188	20	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	j < $
37294	190	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
37294	190	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
37295	195	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
37295	195	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
744	201	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	DEF	$ > 0
37296	259	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	NIL-FOR	$ < n
37296	259	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	k < $
37297	263	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
37297	263	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
745	270	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	a	double	0	DEF	$ != 0.0
37298	272	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
37298	272	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
37299	274	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
37299	274	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
37300	279	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
37300	279	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
746	286	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	DEF	$ < n - 1
746	286	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	DEF	k < $ - 1
37301	289	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
37301	289	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
747	295	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	b	double	0	DEF	$ != 0.0
37302	297	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
37302	297	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
37303	300	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
37303	300	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
37304	304	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
37304	304	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
37305	323	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	NIL-FOR	$ < m
37305	323	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	k < $
37306	328	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
37306	328	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
748	334	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	a	double	0	DEF	$ != 0.0
37307	336	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
37307	336	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
37308	339	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
37308	339	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
37309	343	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
37309	343	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
749	349	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	DEF	$ < m - 1
749	349	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	DEF	k < $ - 1
37310	353	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
37310	353	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
750	359	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	b	double	0	DEF	$ != 0.0
37311	361	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
37311	361	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
37312	363	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
37312	363	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
37313	368	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
37313	368	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
301	121	8	BigFraction.java	BigFraction	num	BigInteger	0	DEF	$ == null
302	124	8	BigFraction.java	BigFraction	den	BigInteger	0	DEF	$ == null
303	127	8	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.equals($)
304	130	8	BigFraction.java	BigFraction	num	BigInteger	1	DEF	BigInteger.ZERO.equals($)
305	137	12	BigFraction.java	BigFraction	gcd	BigInteger	0	DEF	BigInteger.ONE.compareTo($) < 0
306	143	12	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.compareTo($) > 0
307	177	8	BigFraction.java	BigFraction	value	double	0	DEF	Double.isNaN($)
308	180	8	BigFraction.java	BigFraction	value	double	0	DEF	Double.isInfinite($)
309	189	8	BigFraction.java	BigFraction	exponent	long	0	DEF	$ != 0
310	193	8	BigFraction.java	BigFraction	sign	long	0	DEF	$ != 0
36756	197	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x1) == 0
36756	197	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x001ffffffffffffeL) != 0
311	202	8	BigFraction.java	BigFraction	k	int	1	DEF	$ < 0
312	279	8	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	a0 > $
312	279	8	BigFraction.java	BigFraction	a0	long	0	FractionConversionException	$ > overflow
313	285	8	BigFraction.java	BigFraction	a0	long	0	RET	Math.abs($ - value) < epsilon
313	285	8	BigFraction.java	BigFraction	value	double	0	RET	Math.abs(a0 - $) < epsilon
313	285	8	BigFraction.java	BigFraction	epsilon	double	0	RET	Math.abs(a0 - value) < $
36757	301	8	BigFraction.java	BigFraction	stop	boolean	0	NIL-DOWHILE	$
314	307	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	p2 > $
314	307	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	q2 > $
314	307	12	BigFraction.java	BigFraction	p2	long	0	FractionConversionException	$ > overflow
314	307	12	BigFraction.java	BigFraction	q2	long	0	FractionConversionException	$ > overflow
315	312	12	BigFraction.java	BigFraction	convergent	double	1	DEF	Math.abs($ - value) > epsilon
315	312	12	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
315	312	12	BigFraction.java	BigFraction	n	int	1	DEF	$ < maxIterations
315	312	12	BigFraction.java	BigFraction	value	double	1	DEF	Math.abs(convergent - $) > epsilon
315	312	12	BigFraction.java	BigFraction	epsilon	double	1	DEF	Math.abs(convergent - value) > $
315	312	12	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
315	312	12	BigFraction.java	BigFraction	maxIterations	int	1	DEF	n < $
316	326	8	BigFraction.java	BigFraction	n	int	0	FractionConversionException	$ >= maxIterations
316	326	8	BigFraction.java	BigFraction	maxIterations	int	0	FractionConversionException	n >= $
317	330	8	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
317	330	8	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
318	437	8	BigFraction.java	getReducedFraction	numerator	int	0	RET	$ == 0
319	512	8	BigFraction.java	add	fraction	BigFraction	0	RET	ZERO.equals($)
320	519	8	BigFraction.java	add	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
320	519	8	BigFraction.java	add	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
321	617	8	BigFraction.java	divide	bg	BigInteger	0	DEF	BigInteger.ZERO.equals($)
322	670	8	BigFraction.java	divide	THIS	BigFraction	0	DEF	BigInteger.ZERO.equals(fraction.$.numerator)
322	670	8	BigFraction.java	divide	fraction	BigFraction	0	DEF	BigInteger.ZERO.equals($.numerator)
323	710	8	BigFraction.java	equals	THIS	BigFraction	1	DEF	$ == other
323	710	8	BigFraction.java	equals	other	Object	1	DEF	this == $
324	712	15	BigFraction.java	equals	other	Object	0	DEF	$ instanceof BigFraction
325	901	8	BigFraction.java	multiply	THIS	BigFraction	0	DEF	$.getNumeratorAsInt() != 0
325	901	8	BigFraction.java	multiply	fraction	BigFraction	0	DEF	$.getNumeratorAsInt() != 0
326	944	8	BigFraction.java	pow	exponent	int	0	RET	$ < 0
327	961	8	BigFraction.java	pow	exponent	long	0	RET	$ < 0
328	980	8	BigFraction.java	pow	exponent	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
329	1088	8	BigFraction.java	subtract	fraction	BigFraction	0	RET	ZERO.equals($)
330	1094	8	BigFraction.java	subtract	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
330	1094	8	BigFraction.java	subtract	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
331	1117	8	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ONE.equals($.denominator)
332	1119	15	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ZERO.equals($.numerator)
333	168	8	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigFraction
334	170	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigInteger
335	172	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
336	194	8	BigFractionFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
337	218	8	BigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
338	251	8	BigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
36758	274	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	$ < source.length()
36758	274	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	Character.isDigit(source.charAt($))
36758	274	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	end < $.length()
36758	274	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	Character.isDigit($.charAt(end))
565	104	8	BigMatrixImpl.java	BigMatrixImpl	rowDimension	int	0	DEF	$ <= 0
566	109	8	BigMatrixImpl.java	BigMatrixImpl	columnDimension	int	0	DEF	$ <= 0
567	151	8	BigMatrixImpl.java	BigMatrixImpl	copyArray	boolean	1	DEF	$
568	154	12	BigMatrixImpl.java	BigMatrixImpl	d	BigDecimal[][]	0	NullPointerException	$ == null
569	158	12	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	DEF	$ == 0
570	163	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	$ == 0
36984	166	12	BigMatrixImpl.java	BigMatrixImpl	r	int	0	NIL-FOR	$ < nRows
36984	166	12	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	r < $
571	167	16	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	DEF	d[r].length != nCols
571	167	16	BigMatrixImpl.java	BigMatrixImpl	r	int	0	DEF	d[$].length != nCols
571	167	16	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	d[r].length != $
571	167	16	BigMatrixImpl.java	BigMatrixImpl	d	BigDecimal[][]	0	DEF	$[r].length != nCols
572	191	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	DEF	$ == 0
573	196	8	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	$ == 0
36985	199	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
36985	199	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
574	200	12	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	DEF	d[row].length != nCols
574	200	12	BigMatrixImpl.java	BigMatrixImpl	row	int	0	DEF	d[$].length != nCols
574	200	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	d[row].length != $
574	200	12	BigMatrixImpl.java	BigMatrixImpl	d	double[][]	0	DEF	$[row].length != nCols
575	221	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	DEF	$ == 0
576	226	8	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	$ == 0
36986	229	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
36986	229	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
577	230	12	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	DEF	d[row].length != nCols
577	230	12	BigMatrixImpl.java	BigMatrixImpl	row	int	0	DEF	d[$].length != nCols
577	230	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	d[row].length != $
577	230	12	BigMatrixImpl.java	BigMatrixImpl	d	String[][]	0	DEF	$[row].length != nCols
36987	252	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
36987	252	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
36988	284	12	BigMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
36988	284	12	BigMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
36989	287	16	BigMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
36989	287	16	BigMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
36990	310	8	BigMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
36990	310	8	BigMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
36991	314	12	BigMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
36991	314	12	BigMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
36992	339	12	BigMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
36992	339	12	BigMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
36993	342	16	BigMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
36993	342	16	BigMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
36994	365	8	BigMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
36994	365	8	BigMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
36995	369	12	BigMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
36995	369	12	BigMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
36996	386	8	BigMatrixImpl.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
36996	386	8	BigMatrixImpl.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
36997	389	12	BigMatrixImpl.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
36997	389	12	BigMatrixImpl.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
36998	405	8	BigMatrixImpl.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
36998	405	8	BigMatrixImpl.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
36999	408	12	BigMatrixImpl.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
36999	408	12	BigMatrixImpl.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
37000	434	12	BigMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
37000	434	12	BigMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
37001	437	16	BigMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
37001	437	16	BigMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
37002	439	20	BigMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
37002	439	20	BigMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
37003	465	8	BigMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
37003	465	8	BigMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
37004	468	12	BigMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
37004	468	12	BigMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
37005	470	16	BigMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
37005	470	16	BigMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
37006	513	8	BigMatrixImpl.java	getDataAsDoubleArray	i	int	0	NIL-FOR	$ < nRows
37006	513	8	BigMatrixImpl.java	getDataAsDoubleArray	nRows	int	0	NIL-FOR	i < $
37007	514	12	BigMatrixImpl.java	getDataAsDoubleArray	j	int	0	NIL-FOR	$ < nCols
37007	514	12	BigMatrixImpl.java	getDataAsDoubleArray	nCols	int	0	NIL-FOR	j < $
37008	578	8	BigMatrixImpl.java	getNorm	THIS	BigMatrixImpl	0	NIL-FOR	col < $.getColumnDimension()
37008	578	8	BigMatrixImpl.java	getNorm	col	int	0	NIL-FOR	$ < this.getColumnDimension()
37009	580	12	BigMatrixImpl.java	getNorm	THIS	BigMatrixImpl	0	NIL-FOR	row < $.getRowDimension()
37009	580	12	BigMatrixImpl.java	getNorm	row	int	0	NIL-FOR	$ < this.getRowDimension()
578	606	8	BigMatrixImpl.java	getSubMatrix	startRow	int	0	MatrixIndexException	$ > endRow
578	606	8	BigMatrixImpl.java	getSubMatrix	endRow	int	0	MatrixIndexException	startRow > $
579	613	8	BigMatrixImpl.java	getSubMatrix	startColumn	int	0	MatrixIndexException	$ > endColumn
579	613	8	BigMatrixImpl.java	getSubMatrix	endColumn	int	0	MatrixIndexException	startColumn > $
37010	620	8	BigMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
37010	620	8	BigMatrixImpl.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
580	644	8	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
580	644	8	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
580	644	8	BigMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
581	645	12	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	selectedRows.$.length == 0
581	645	12	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	MatrixIndexException	$.length == 0
37011	654	12	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	NIL-FOR	i < selectedRows.$.length
37011	654	12	BigMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
37011	654	12	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
37012	657	16	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	NIL-FOR	j < selectedColumns.$.length
37012	657	16	BigMatrixImpl.java	getSubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
37012	657	16	BigMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
582	705	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	DEF	$ == 0
583	710	8	BigMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	$ == 0
37013	714	8	BigMatrixImpl.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
37013	714	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
584	715	12	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	0	DEF	subMatrix[r].length != nCols
584	715	12	BigMatrixImpl.java	setSubMatrix	r	int	0	DEF	subMatrix[$].length != nCols
584	715	12	BigMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	subMatrix[r].length != $
584	715	12	BigMatrixImpl.java	setSubMatrix	subMatrix	BigDecimal[][]	0	DEF	$[r].length != nCols
585	722	8	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	1	DEF	$.data == null
586	723	12	BigMatrixImpl.java	setSubMatrix	row	int	0	DEF	$ > 0
587	728	12	BigMatrixImpl.java	setSubMatrix	column	int	0	DEF	$ > 0
37014	741	8	BigMatrixImpl.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
37014	741	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
37015	777	8	BigMatrixImpl.java	getColumnMatrix	row	int	0	NIL-FOR	$ < nRows
37015	777	8	BigMatrixImpl.java	getColumnMatrix	nRows	int	0	NIL-FOR	row < $
37016	816	8	BigMatrixImpl.java	getRowAsDoubleArray	i	int	0	NIL-FOR	$<ncols
37016	816	8	BigMatrixImpl.java	getRowAsDoubleArray	ncols	int	0	NIL-FOR	i<$
37017	836	8	BigMatrixImpl.java	getColumn	i	int	0	NIL-FOR	$ < nRows
37017	836	8	BigMatrixImpl.java	getColumn	nRows	int	0	NIL-FOR	i < $
37018	857	8	BigMatrixImpl.java	getColumnAsDoubleArray	i	int	0	NIL-FOR	$<nrows
37018	857	8	BigMatrixImpl.java	getColumnAsDoubleArray	nrows	int	0	NIL-FOR	i<$
37019	918	8	BigMatrixImpl.java	transpose	row	int	0	NIL-FOR	$ < nRows
37019	918	8	BigMatrixImpl.java	transpose	nRows	int	0	NIL-FOR	row < $
37020	920	12	BigMatrixImpl.java	transpose	col	int	0	NIL-FOR	$ < nCols
37020	920	12	BigMatrixImpl.java	transpose	nCols	int	0	NIL-FOR	col < $
588	944	8	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	0	NonSquareMatrixException	$.isSquare()
589	947	8	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	1	RET	$.isSingular()
37021	951	12	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
37021	951	12	BigMatrixImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < getRowDimension()
590	971	8	BigMatrixImpl.java	isSingular	THIS	BigMatrixImpl	1	RET	$.lu == null
591	1010	8	BigMatrixImpl.java	getTrace	THIS	BigMatrixImpl	0	NonSquareMatrixException	$.isSquare()
37022	1014	8	BigMatrixImpl.java	getTrace	THIS	BigMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
37022	1014	8	BigMatrixImpl.java	getTrace	i	int	0	NIL-FOR	$ < this.getRowDimension()
592	1028	8	BigMatrixImpl.java	operate	THIS	BigMatrixImpl	0	DEF	v.$.length != $.getColumnDimension()
592	1028	8	BigMatrixImpl.java	operate	v	BigDecimal[]	0	DEF	$.length != getColumnDimension()
37023	1036	8	BigMatrixImpl.java	operate	row	int	0	NIL-FOR	$ < nRows
37023	1036	8	BigMatrixImpl.java	operate	nRows	int	0	NIL-FOR	row < $
37024	1038	12	BigMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < nCols
37024	1038	12	BigMatrixImpl.java	operate	nCols	int	0	NIL-FOR	i < $
37025	1055	8	BigMatrixImpl.java	operate	THIS	BigMatrixImpl	0	NIL-FOR	i < bd.$.length
37025	1055	8	BigMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < bd.length
37025	1055	8	BigMatrixImpl.java	operate	bd	BigDecimal[]	0	NIL-FOR	i < $.length
593	1070	8	BigMatrixImpl.java	preMultiply	THIS	BigMatrixImpl	0	DEF	v.$.length != nRows
593	1070	8	BigMatrixImpl.java	preMultiply	nRows	int	0	DEF	v.length != $
593	1070	8	BigMatrixImpl.java	preMultiply	v	BigDecimal[]	0	DEF	$.length != nRows
37026	1077	8	BigMatrixImpl.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
37026	1077	8	BigMatrixImpl.java	preMultiply	nCols	int	0	NIL-FOR	col < $
37027	1079	12	BigMatrixImpl.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
37027	1079	12	BigMatrixImpl.java	preMultiply	nRows	int	0	NIL-FOR	i < $
594	1100	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	DEF	b.$.length != nRows
594	1100	8	BigMatrixImpl.java	solve	nRows	int	0	DEF	b.length != $
594	1100	8	BigMatrixImpl.java	solve	b	BigDecimal[]	0	DEF	$.length != nRows
37028	1108	8	BigMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRows
37028	1108	8	BigMatrixImpl.java	solve	nRows	int	0	NIL-FOR	row < $
37029	1127	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	NIL-FOR	i < bd.$.length
37029	1127	8	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < bd.length
37029	1127	8	BigMatrixImpl.java	solve	bd	BigDecimal[]	0	NIL-FOR	i < $.length
595	1145	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	DEF	b.getRowDimension() != $.getRowDimension()
595	1145	8	BigMatrixImpl.java	solve	b	BigMatrix	0	DEF	$.getRowDimension() != getRowDimension()
596	1150	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	NonSquareMatrixException	$.isSquare()
597	1153	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	SingularMatrixException	$.isSingular()
37030	1163	8	BigMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRowB
37030	1163	8	BigMatrixImpl.java	solve	nRowB	int	0	NIL-FOR	row < $
37031	1165	12	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nColB
37031	1165	12	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	col < $
37032	1171	8	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nCol
37032	1171	8	BigMatrixImpl.java	solve	nCol	int	0	NIL-FOR	col < $
37033	1172	12	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < nCol
37033	1172	12	BigMatrixImpl.java	solve	nCol	int	0	NIL-FOR	i < $
37034	1175	16	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
37034	1175	16	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
37035	1182	8	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ >= 0
37036	1185	12	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
37036	1185	12	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
37037	1188	12	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < col
37037	1188	12	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	i < $
37038	1191	16	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
37038	1191	16	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
598	1223	8	BigMatrixImpl.java	luDecompose	nRows	int	0	NonSquareMatrixException	$ != nCols
598	1223	8	BigMatrixImpl.java	luDecompose	nCols	int	0	NonSquareMatrixException	nRows != $
37039	1230	8	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
37039	1230	8	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
37040	1236	8	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	$ < nCols
37040	1236	8	BigMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	col < $
37041	1241	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < col
37041	1241	12	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	row < $
37042	1244	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < row
37042	1244	16	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	i < $
37043	1253	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
37043	1253	12	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
37044	1256	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < col
37044	1256	16	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	i < $
599	1262	16	BigMatrixImpl.java	luDecompose	sum	BigDecimal	0	DEF	$.abs().compareTo(largest) == 1
599	1262	16	BigMatrixImpl.java	luDecompose	largest	BigDecimal	0	DEF	sum.abs().compareTo($) == 1
600	1269	12	BigMatrixImpl.java	luDecompose	THIS	BigMatrixImpl	0	SingularMatrixException	$.lu[max][col].abs().compareTo(TOO_SMALL) <= 0
600	1269	12	BigMatrixImpl.java	luDecompose	max	int	0	SingularMatrixException	lu[$][col].abs().compareTo(TOO_SMALL) <= 0
600	1269	12	BigMatrixImpl.java	luDecompose	col	int	0	SingularMatrixException	lu[max][$].abs().compareTo(TOO_SMALL) <= 0
601	1275	12	BigMatrixImpl.java	luDecompose	max	int	0	DEF	$ != col
601	1275	12	BigMatrixImpl.java	luDecompose	col	int	0	DEF	max != $
37045	1277	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < nCols
37045	1277	16	BigMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	i < $
37046	1290	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
37046	1290	12	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
602	1307	8	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	DEF	$.data != null
37047	1308	12	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	NIL-FOR	i < $.data.$.length
37047	1308	12	BigMatrixImpl.java	toString	i	int	0	NIL-FOR	$ < data.length
603	1309	16	BigMatrixImpl.java	toString	i	int	0	DEF	$ > 0
37048	1313	16	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	NIL-FOR	j < $.data[0].length
37048	1313	16	BigMatrixImpl.java	toString	j	int	0	NIL-FOR	$ < data[0].length
604	1314	20	BigMatrixImpl.java	toString	j	int	0	DEF	$ > 0
605	1337	8	BigMatrixImpl.java	equals	THIS	BigMatrixImpl	0	RET	object == $
605	1337	8	BigMatrixImpl.java	equals	object	Object	0	RET	$ == this
606	1340	8	BigMatrixImpl.java	equals	object	Object	0	RET	$ instanceof BigMatrixImpl == false
607	1346	8	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	$.getColumnDimension() != nCols
607	1346	8	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	$.getRowDimension() != nRows
607	1346	8	BigMatrixImpl.java	equals	nRows	int	0	RET	m.getRowDimension() != $
607	1346	8	BigMatrixImpl.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
37049	1349	8	BigMatrixImpl.java	equals	row	int	0	NIL-FOR	$ < nRows
37049	1349	8	BigMatrixImpl.java	equals	nRows	int	0	NIL-FOR	row < $
37050	1351	12	BigMatrixImpl.java	equals	col	int	0	NIL-FOR	$ < nCols
37050	1351	12	BigMatrixImpl.java	equals	nCols	int	0	NIL-FOR	col < $
608	1352	16	BigMatrixImpl.java	equals	col	int	0	RET	dataRow[$].equals(m.getEntry(row, $))
608	1352	16	BigMatrixImpl.java	equals	dataRow	BigDecimal[]	0	RET	$[col].equals(m.getEntry(row, col))
608	1352	16	BigMatrixImpl.java	equals	row	int	0	RET	dataRow[col].equals(m.getEntry($, col))
608	1352	16	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	dataRow[col].equals($.getEntry(row, col))
37051	1372	8	BigMatrixImpl.java	hashCode	row	int	0	NIL-FOR	$ < nRows
37051	1372	8	BigMatrixImpl.java	hashCode	nRows	int	0	NIL-FOR	row < $
37052	1374	12	BigMatrixImpl.java	hashCode	col	int	0	NIL-FOR	$ < nCols
37052	1374	12	BigMatrixImpl.java	hashCode	nCols	int	0	NIL-FOR	col < $
609	1412	8	BigMatrixImpl.java	getLUMatrix	THIS	BigMatrixImpl	0	DEF	$.lu == null
37053	1447	8	BigMatrixImpl.java	copyOut	i	int	0	NIL-FOR	$ < nRows
37053	1447	8	BigMatrixImpl.java	copyOut	nRows	int	0	NIL-FOR	i < $
37054	1476	8	BigMatrixImpl.java	copyIn	i	int	0	NIL-FOR	$ < nRows
37054	1476	8	BigMatrixImpl.java	copyIn	nRows	int	0	NIL-FOR	i < $
37055	1479	12	BigMatrixImpl.java	copyIn	j	int	0	NIL-FOR	$ < nCols
37055	1479	12	BigMatrixImpl.java	copyIn	nCols	int	0	NIL-FOR	j < $
37056	1496	8	BigMatrixImpl.java	copyIn	i	int	0	NIL-FOR	$ < nRows
37056	1496	8	BigMatrixImpl.java	copyIn	nRows	int	0	NIL-FOR	i < $
37057	1499	12	BigMatrixImpl.java	copyIn	j	int	0	NIL-FOR	$ < nCols
37057	1499	12	BigMatrixImpl.java	copyIn	nCols	int	0	NIL-FOR	j < $
38	227	12	BigReal.java	equals	other	Object	0	RET	$ == null
1429	53	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i >1
1429	53	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i < 0
37931	66	8	BinaryChromosome.java	randomBinaryRepresentation	j	int	0	NIL-FOR	$<length
37931	66	8	BinaryChromosome.java	randomBinaryRepresentation	length	int	0	NIL-FOR	j<$
1430	78	8	BinaryChromosome.java	isSame	another	Chromosome	0	RET	$ instanceof BinaryChromosome
1431	82	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getLength() != anotherBc.getLength()
1431	82	8	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getLength() != $.getLength()
37932	85	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	NIL-FOR	i< $.getRepresentation().size()
37932	85	8	BinaryChromosome.java	isSame	i	int	0	NIL-FOR	$< getRepresentation().size()
1432	86	12	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getRepresentation().get(i).equals(anotherBc.getRepresentation().get(i))
1432	86	12	BinaryChromosome.java	isSame	i	int	0	RET	getRepresentation().get($).equals(anotherBc.getRepresentation().get($))
1432	86	12	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getRepresentation().get(i).equals($.getRepresentation().get(i))
1441	36	8	BinaryMutation.java	mutate	original	Chromosome	0	IllegalArgumentException	$ instanceof BinaryChromosome
433	81	8	BinomialDistributionImpl.java	setNumberOfTrials	trials	int	0	DEF	$ < 0
434	96	8	BinomialDistributionImpl.java	setProbabilityOfSuccess	p	double	0	DEF	$ > 1.0
434	96	8	BinomialDistributionImpl.java	setProbabilityOfSuccess	p	double	0	DEF	$ < 0.0
435	140	8	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
436	142	15	BinomialDistributionImpl.java	cumulativeProbability	THIS	BinomialDistributionImpl	1	DEF	x >= $.getNumberOfTrials()
436	142	15	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= getNumberOfTrials()
437	159	8	BinomialDistributionImpl.java	probability	THIS	BinomialDistributionImpl	1	DEF	x > $.getNumberOfTrials()
437	159	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ < 0
437	159	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ > getNumberOfTrials()
438	187	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
439	190	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
38179	86	8	BisectionSolver.java	solve	THIS	BisectionSolver	0	NIL-WHILE	i < $.maximalIterationCount
38179	86	8	BisectionSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1769	91	12	BisectionSolver.java	solve	fm	double	1	DEF	$ * fmin > 0.0
1769	91	12	BisectionSolver.java	solve	fmin	double	1	DEF	fm * $ > 0.0
1770	99	12	BisectionSolver.java	solve	THIS	BisectionSolver	0	RET	Math.abs(max - min) <= $.absoluteAccuracy
1770	99	12	BisectionSolver.java	solve	min	double	0	RET	Math.abs(max - $) <= absoluteAccuracy
1770	99	12	BisectionSolver.java	solve	max	double	0	RET	Math.abs($ - min) <= absoluteAccuracy
37922	67	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < iEnd
37922	67	8	BitsStreamGenerator.java	nextBytes	iEnd	int	0	NIL-WHILE	i < $
37923	76	8	BitsStreamGenerator.java	nextBytes	THIS	BitsStreamGenerator	0	NIL-WHILE	i < bytes.$.length
37923	76	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < bytes.length
37923	76	8	BitsStreamGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	i < $.length
1402	98	8	BitsStreamGenerator.java	nextGaussian	THIS	BitsStreamGenerator	1	DEF	Double.isNaN($.nextGaussian)
1403	124	8	BitsStreamGenerator.java	nextInt	n	int	0	DEF	$ < 1
1404	139	12	BitsStreamGenerator.java	nextInt	random	int	0	RET	$ < n
1404	139	12	BitsStreamGenerator.java	nextInt	n	int	0	RET	random < $
513	159	8	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	1	DEF	$
36766	168	8	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
36766	168	8	BlockFieldMatrix.java	BlockFieldMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
36767	170	12	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
36767	170	12	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
514	171	16	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	DEF	blockData[index].length != iHeight * $.blockWidth(jBlock)
514	171	16	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	DEF	blockData[index].length != iHeight * blockWidth($)
514	171	16	BlockFieldMatrix.java	BlockFieldMatrix	iHeight	int	0	DEF	blockData[index].length != $ * blockWidth(jBlock)
514	171	16	BlockFieldMatrix.java	BlockFieldMatrix	index	int	0	DEF	blockData[$].length != iHeight * blockWidth(jBlock)
514	171	16	BlockFieldMatrix.java	BlockFieldMatrix	blockData	T[][]	0	DEF	$[index].length != iHeight * blockWidth(jBlock)
515	176	16	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	0	DEF	$
36768	217	8	BlockFieldMatrix.java	toBlocksLayout	THIS	BlockFieldMatrix	0	NIL-FOR	i < rawData.$.length
36768	217	8	BlockFieldMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
36768	217	8	BlockFieldMatrix.java	toBlocksLayout	rawData	T[][]	0	NIL-FOR	i < $.length
516	219	12	BlockFieldMatrix.java	toBlocksLayout	length	int	0	DEF	$ != columns
516	219	12	BlockFieldMatrix.java	toBlocksLayout	columns	int	0	DEF	length != $
36769	230	8	BlockFieldMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
36769	230	8	BlockFieldMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
36770	234	12	BlockFieldMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
36770	234	12	BlockFieldMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
36771	245	16	BlockFieldMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
36771	245	16	BlockFieldMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
36772	282	8	BlockFieldMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
36772	282	8	BlockFieldMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
36773	286	12	BlockFieldMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
36773	286	12	BlockFieldMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
36774	314	8	BlockFieldMatrix.java	copy	THIS	BlockFieldMatrix	0	NIL-FOR	i < $.blocks.$.length
36774	314	8	BlockFieldMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
36775	337	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
36775	337	12	BlockFieldMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
36775	337	12	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
36776	338	16	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
36776	338	16	BlockFieldMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
36776	338	16	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
36777	348	20	BlockFieldMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
36777	348	20	BlockFieldMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
36778	349	24	BlockFieldMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
36778	349	24	BlockFieldMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
36779	382	8	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
36779	382	8	BlockFieldMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
36779	382	8	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
36780	386	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
36780	386	12	BlockFieldMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
36780	386	12	BlockFieldMatrix.java	add	outBlock	T[]	0	NIL-FOR	k < $.length
36781	410	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
36781	410	12	BlockFieldMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
36781	410	12	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
36782	411	16	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
36782	411	16	BlockFieldMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
36782	411	16	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
36783	421	20	BlockFieldMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
36783	421	20	BlockFieldMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
36784	422	24	BlockFieldMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
36784	422	24	BlockFieldMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
36785	455	8	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
36785	455	8	BlockFieldMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
36785	455	8	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
36786	459	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
36786	459	12	BlockFieldMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
36786	459	12	BlockFieldMatrix.java	subtract	outBlock	T[]	0	NIL-FOR	k < $.length
36787	476	8	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
36787	476	8	BlockFieldMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
36787	476	8	BlockFieldMatrix.java	scalarAdd	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
36788	479	12	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
36788	479	12	BlockFieldMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
36788	479	12	BlockFieldMatrix.java	scalarAdd	outBlock	T[]	0	NIL-FOR	k < $.length
36789	496	8	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
36789	496	8	BlockFieldMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
36789	496	8	BlockFieldMatrix.java	scalarMultiply	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
36790	499	12	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
36790	499	12	BlockFieldMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
36790	499	12	BlockFieldMatrix.java	scalarMultiply	outBlock	T[]	0	NIL-FOR	k < $.length
36791	524	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
36791	524	12	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
36791	524	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
36792	529	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
36792	529	16	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
36792	529	16	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
36793	538	20	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
36793	538	20	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
36794	543	24	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
36794	543	24	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
36795	546	28	BlockFieldMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
36795	546	28	BlockFieldMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
36796	549	32	BlockFieldMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
36796	549	32	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
36797	588	8	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
36797	588	8	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
36797	588	8	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
36798	593	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
36798	593	12	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
36798	593	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
36799	603	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
36799	603	16	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
36800	608	20	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
36800	608	20	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
36801	611	24	BlockFieldMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
36801	611	24	BlockFieldMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
36802	615	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
36802	615	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
36803	624	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
36803	624	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
36804	651	8	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
36804	651	8	BlockFieldMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
36805	656	12	BlockFieldMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
36805	656	12	BlockFieldMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
36806	660	16	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
36806	660	16	BlockFieldMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
36807	695	8	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
36807	695	8	BlockFieldMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
36807	695	8	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
36808	698	12	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
36808	698	12	BlockFieldMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
36808	698	12	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
517	709	16	BlockFieldMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
518	711	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
519	743	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
36809	797	8	BlockFieldMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
36809	797	8	BlockFieldMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
520	811	8	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	DEF	$ < 1
521	818	12	BlockFieldMatrix.java	setSubMatrix	THIS	BlockFieldMatrix	0	DEF	$.subRow.$.length != refLength
521	818	12	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	DEF	subRow.length != $
36810	832	8	BlockFieldMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
36810	832	8	BlockFieldMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
36811	838	12	BlockFieldMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
36811	838	12	BlockFieldMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
36812	847	16	BlockFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
36812	847	16	BlockFieldMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
36813	871	8	BlockFieldMatrix.java	getRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
36813	871	8	BlockFieldMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
522	875	12	BlockFieldMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
522	875	12	BlockFieldMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
523	917	8	BlockFieldMatrix.java	setRowMatrix	nCols	int	0	InvalidMatrixException	matrix.getColumnDimension() != $
523	917	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	InvalidMatrixException	$.getRowDimension() != 1
523	917	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	InvalidMatrixException	$.getColumnDimension() != nCols
36814	931	8	BlockFieldMatrix.java	setRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
36814	931	8	BlockFieldMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
524	935	12	BlockFieldMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
524	935	12	BlockFieldMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
36815	963	8	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
36815	963	8	BlockFieldMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
36816	966	12	BlockFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
36816	966	12	BlockFieldMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
525	967	16	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	DEF	outIndex >= outBlock.$.length
525	967	16	BlockFieldMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
525	967	16	BlockFieldMatrix.java	getColumnMatrix	outBlock	T[]	0	DEF	outIndex >= $.length
526	1006	8	BlockFieldMatrix.java	setColumnMatrix	nRows	int	0	InvalidMatrixException	matrix.getRowDimension() != $
526	1006	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	InvalidMatrixException	$.getRowDimension() != nRows
526	1006	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	InvalidMatrixException	$.getColumnDimension() != 1
36817	1021	8	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
36817	1021	8	BlockFieldMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
36818	1024	12	BlockFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
36818	1024	12	BlockFieldMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
527	1025	16	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	DEF	mIndex >= mBlock.$.length
527	1025	16	BlockFieldMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
527	1025	16	BlockFieldMatrix.java	setColumnMatrix	mBlock	T[]	0	DEF	mIndex >= $.length
36819	1047	8	BlockFieldMatrix.java	getRowVector	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
36819	1047	8	BlockFieldMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
36820	1082	8	BlockFieldMatrix.java	getColumnVector	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
36820	1082	8	BlockFieldMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
36821	1085	12	BlockFieldMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
36821	1085	12	BlockFieldMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
36822	1117	8	BlockFieldMatrix.java	getRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
36822	1117	8	BlockFieldMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
528	1135	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	InvalidMatrixException	array.$.length != nCols
528	1135	8	BlockFieldMatrix.java	setRow	nCols	int	0	InvalidMatrixException	array.length != $
528	1135	8	BlockFieldMatrix.java	setRow	array	T[]	0	InvalidMatrixException	$.length != nCols
36823	1145	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
36823	1145	8	BlockFieldMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
36824	1167	8	BlockFieldMatrix.java	getColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
36824	1167	8	BlockFieldMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
36825	1170	12	BlockFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
36825	1170	12	BlockFieldMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
529	1186	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	InvalidMatrixException	array.$.length != nRows
529	1186	8	BlockFieldMatrix.java	setColumn	nRows	int	0	InvalidMatrixException	array.length != $
529	1186	8	BlockFieldMatrix.java	setColumn	array	T[]	0	InvalidMatrixException	$.length != nRows
36826	1197	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
36826	1197	8	BlockFieldMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
36827	1200	12	BlockFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
36827	1200	12	BlockFieldMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
36828	1287	8	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockColumns
36828	1287	8	BlockFieldMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
36829	1288	12	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockRows
36829	1288	12	BlockFieldMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
36830	1298	16	BlockFieldMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
36830	1298	16	BlockFieldMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
36831	1301	20	BlockFieldMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
36831	1301	20	BlockFieldMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
530	1335	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	DEF	v.$.length != $.columns
530	1335	8	BlockFieldMatrix.java	operate	v	T[]	0	DEF	$.length != columns
36832	1344	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
36832	1344	8	BlockFieldMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
36833	1347	12	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
36833	1347	12	BlockFieldMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
36834	1352	16	BlockFieldMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
36834	1352	16	BlockFieldMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
36835	1355	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
36835	1355	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
36836	1364	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
36836	1364	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
531	1381	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	DEF	v.$.length != $.rows
531	1381	8	BlockFieldMatrix.java	preMultiply	v	T[]	0	DEF	$.length != rows
36837	1390	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
36837	1390	8	BlockFieldMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
36838	1397	12	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
36838	1397	12	BlockFieldMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
36839	1401	16	BlockFieldMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
36839	1401	16	BlockFieldMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
36840	1405	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
36840	1405	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
36841	1414	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
36841	1414	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
36842	1432	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
36842	1432	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
36843	1435	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
36843	1435	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
36844	1436	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
36844	1436	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
36845	1442	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
36845	1442	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
36846	1457	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
36846	1457	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
36847	1460	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
36847	1460	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
36848	1461	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
36848	1461	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
36849	1467	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
36849	1467	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
36850	1485	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
36850	1485	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
36851	1489	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
36851	1489	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
36852	1490	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
36852	1490	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
36853	1497	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
36853	1497	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
36854	1515	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
36854	1515	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
36855	1519	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
36855	1519	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
36856	1520	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
36856	1520	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
36857	1527	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
36857	1527	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
36858	1543	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
36858	1543	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
36859	1546	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
36859	1546	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
36860	1551	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
36860	1551	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
36861	1552	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
36861	1552	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
36862	1569	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
36862	1569	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
36863	1572	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
36863	1572	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
36864	1577	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
36864	1577	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
36865	1578	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
36865	1578	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
36866	1597	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
36866	1597	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
36867	1601	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
36867	1601	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
36868	1607	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
36868	1607	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
36869	1609	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
36869	1609	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
36870	1627	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
36870	1627	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
36871	1631	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
36871	1631	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
36872	1637	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
36872	1637	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
36873	1639	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
36873	1639	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
782	156	8	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	1	DEF	$
37357	165	8	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
37357	165	8	BlockRealMatrix.java	BlockRealMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
37358	167	12	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
37358	167	12	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
783	168	16	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	DEF	blockData[index].length != iHeight * $.blockWidth(jBlock)
783	168	16	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	DEF	blockData[index].length != iHeight * blockWidth($)
783	168	16	BlockRealMatrix.java	BlockRealMatrix	iHeight	int	0	DEF	blockData[index].length != $ * blockWidth(jBlock)
783	168	16	BlockRealMatrix.java	BlockRealMatrix	index	int	0	DEF	blockData[$].length != iHeight * blockWidth(jBlock)
783	168	16	BlockRealMatrix.java	BlockRealMatrix	blockData	double[][]	0	DEF	$[index].length != iHeight * blockWidth(jBlock)
784	173	16	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	0	DEF	$
37359	212	8	BlockRealMatrix.java	toBlocksLayout	THIS	BlockRealMatrix	0	NIL-FOR	i < rawData.$.length
37359	212	8	BlockRealMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
37359	212	8	BlockRealMatrix.java	toBlocksLayout	rawData	double[][]	0	NIL-FOR	i < $.length
785	214	12	BlockRealMatrix.java	toBlocksLayout	length	int	0	DEF	$ != columns
785	214	12	BlockRealMatrix.java	toBlocksLayout	columns	int	0	DEF	length != $
37360	224	8	BlockRealMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
37360	224	8	BlockRealMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
37361	228	12	BlockRealMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
37361	228	12	BlockRealMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
37362	239	16	BlockRealMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
37362	239	16	BlockRealMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
37363	272	8	BlockRealMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
37363	272	8	BlockRealMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
37364	276	12	BlockRealMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
37364	276	12	BlockRealMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
37365	304	8	BlockRealMatrix.java	copy	THIS	BlockRealMatrix	0	NIL-FOR	i < $.blocks.$.length
37365	304	8	BlockRealMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
37366	327	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
37366	327	12	BlockRealMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
37366	327	12	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
37367	328	16	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
37367	328	16	BlockRealMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
37367	328	16	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
37368	338	20	BlockRealMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
37368	338	20	BlockRealMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
37369	339	24	BlockRealMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
37369	339	24	BlockRealMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
37370	372	8	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
37370	372	8	BlockRealMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
37370	372	8	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
37371	376	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
37371	376	12	BlockRealMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
37371	376	12	BlockRealMatrix.java	add	outBlock	double[]	0	NIL-FOR	k < $.length
37372	400	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
37372	400	12	BlockRealMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
37372	400	12	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
37373	401	16	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
37373	401	16	BlockRealMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
37373	401	16	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
37374	411	20	BlockRealMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
37374	411	20	BlockRealMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
37375	412	24	BlockRealMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
37375	412	24	BlockRealMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
37376	445	8	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
37376	445	8	BlockRealMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
37376	445	8	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
37377	449	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
37377	449	12	BlockRealMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
37377	449	12	BlockRealMatrix.java	subtract	outBlock	double[]	0	NIL-FOR	k < $.length
37378	466	8	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
37378	466	8	BlockRealMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
37378	466	8	BlockRealMatrix.java	scalarAdd	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
37379	469	12	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
37379	469	12	BlockRealMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
37379	469	12	BlockRealMatrix.java	scalarAdd	outBlock	double[]	0	NIL-FOR	k < $.length
37380	486	8	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
37380	486	8	BlockRealMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
37380	486	8	BlockRealMatrix.java	scalarMultiply	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
37381	489	12	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
37381	489	12	BlockRealMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
37381	489	12	BlockRealMatrix.java	scalarMultiply	outBlock	double[]	0	NIL-FOR	k < $.length
37382	513	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
37382	513	12	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
37382	513	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
37383	518	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
37383	518	16	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
37383	518	16	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
37384	527	20	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
37384	527	20	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
37385	532	24	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
37385	532	24	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
37386	535	28	BlockRealMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
37386	535	28	BlockRealMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
37387	538	32	BlockRealMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
37387	538	32	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
37388	576	8	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
37388	576	8	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
37388	576	8	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
37389	581	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
37389	581	12	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
37389	581	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
37390	591	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
37390	591	16	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
37391	596	20	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
37391	596	20	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
37392	599	24	BlockRealMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
37392	599	24	BlockRealMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
37393	603	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
37393	603	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
37394	611	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
37394	611	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
37395	638	8	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
37395	638	8	BlockRealMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
37396	643	12	BlockRealMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
37396	643	12	BlockRealMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
37397	647	16	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
37397	647	16	BlockRealMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
37398	666	8	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
37398	666	8	BlockRealMatrix.java	getNorm	jBlock	int	0	NIL-FOR	$ < blockColumns
37399	669	12	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
37399	669	12	BlockRealMatrix.java	getNorm	iBlock	int	0	NIL-FOR	$ < blockRows
37400	672	16	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
37400	672	16	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
37401	674	20	BlockRealMatrix.java	getNorm	i	int	0	NIL-FOR	$ < iHeight
37401	674	20	BlockRealMatrix.java	getNorm	iHeight	int	0	NIL-FOR	i < $
37402	680	12	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
37402	680	12	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
37403	691	8	BlockRealMatrix.java	getFrobeniusNorm	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.$.length
37403	691	8	BlockRealMatrix.java	getFrobeniusNorm	blockIndex	int	0	NIL-FOR	$ < blocks.length
37404	720	8	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
37404	720	8	BlockRealMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
37404	720	8	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
37405	723	12	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
37405	723	12	BlockRealMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
37405	723	12	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
786	734	16	BlockRealMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
787	736	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
788	768	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
37406	823	8	BlockRealMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
37406	823	8	BlockRealMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
789	837	8	BlockRealMatrix.java	setSubMatrix	refLength	int	0	DEF	$ < 1
790	844	12	BlockRealMatrix.java	setSubMatrix	THIS	BlockRealMatrix	0	DEF	$.subRow.$.length != refLength
790	844	12	BlockRealMatrix.java	setSubMatrix	refLength	int	0	DEF	subRow.length != $
37407	858	8	BlockRealMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
37407	858	8	BlockRealMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
37408	864	12	BlockRealMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
37408	864	12	BlockRealMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
37409	873	16	BlockRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
37409	873	16	BlockRealMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
37410	897	8	BlockRealMatrix.java	getRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
37410	897	8	BlockRealMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
791	901	12	BlockRealMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
791	901	12	BlockRealMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
792	943	8	BlockRealMatrix.java	setRowMatrix	nCols	int	0	InvalidMatrixException	matrix.getColumnDimension() != $
792	943	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	InvalidMatrixException	$.getRowDimension() != 1
792	943	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	InvalidMatrixException	$.getColumnDimension() != nCols
37411	957	8	BlockRealMatrix.java	setRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
37411	957	8	BlockRealMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
793	961	12	BlockRealMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
793	961	12	BlockRealMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
37412	989	8	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
37412	989	8	BlockRealMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
37413	992	12	BlockRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
37413	992	12	BlockRealMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
794	993	16	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	DEF	outIndex >= outBlock.$.length
794	993	16	BlockRealMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
794	993	16	BlockRealMatrix.java	getColumnMatrix	outBlock	double[]	0	DEF	outIndex >= $.length
795	1032	8	BlockRealMatrix.java	setColumnMatrix	nRows	int	0	InvalidMatrixException	matrix.getRowDimension() != $
795	1032	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	InvalidMatrixException	$.getRowDimension() != nRows
795	1032	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	InvalidMatrixException	$.getColumnDimension() != 1
37414	1047	8	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
37414	1047	8	BlockRealMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
37415	1050	12	BlockRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
37415	1050	12	BlockRealMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
796	1051	16	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	DEF	mIndex >= mBlock.$.length
796	1051	16	BlockRealMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
796	1051	16	BlockRealMatrix.java	setColumnMatrix	mBlock	double[]	0	DEF	mIndex >= $.length
37416	1073	8	BlockRealMatrix.java	getRowVector	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
37416	1073	8	BlockRealMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
37417	1108	8	BlockRealMatrix.java	getColumnVector	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
37417	1108	8	BlockRealMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
37418	1111	12	BlockRealMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
37418	1111	12	BlockRealMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
37419	1143	8	BlockRealMatrix.java	getRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
37419	1143	8	BlockRealMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
797	1161	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	InvalidMatrixException	array.$.length != nCols
797	1161	8	BlockRealMatrix.java	setRow	nCols	int	0	InvalidMatrixException	array.length != $
797	1161	8	BlockRealMatrix.java	setRow	array	double[]	0	InvalidMatrixException	$.length != nCols
37420	1171	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
37420	1171	8	BlockRealMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
37421	1193	8	BlockRealMatrix.java	getColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
37421	1193	8	BlockRealMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
37422	1196	12	BlockRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
37422	1196	12	BlockRealMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
798	1212	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	InvalidMatrixException	array.$.length != nRows
798	1212	8	BlockRealMatrix.java	setColumn	nRows	int	0	InvalidMatrixException	array.length != $
798	1212	8	BlockRealMatrix.java	setColumn	array	double[]	0	InvalidMatrixException	$.length != nRows
37423	1223	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
37423	1223	8	BlockRealMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
37424	1226	12	BlockRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
37424	1226	12	BlockRealMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
37425	1311	8	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockColumns
37425	1311	8	BlockRealMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
37426	1312	12	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockRows
37426	1312	12	BlockRealMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
37427	1322	16	BlockRealMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
37427	1322	16	BlockRealMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
37428	1325	20	BlockRealMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
37428	1325	20	BlockRealMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
799	1359	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	DEF	v.$.length != $.columns
799	1359	8	BlockRealMatrix.java	operate	v	double[]	0	DEF	$.length != columns
37429	1367	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
37429	1367	8	BlockRealMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
37430	1370	12	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
37430	1370	12	BlockRealMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
37431	1375	16	BlockRealMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
37431	1375	16	BlockRealMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
37432	1378	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
37432	1378	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
37433	1386	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
37433	1386	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
800	1403	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	DEF	v.$.length != $.rows
800	1403	8	BlockRealMatrix.java	preMultiply	v	double[]	0	DEF	$.length != rows
37434	1411	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
37434	1411	8	BlockRealMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
37435	1418	12	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
37435	1418	12	BlockRealMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
37436	1422	16	BlockRealMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
37436	1422	16	BlockRealMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
37437	1426	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
37437	1426	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
37438	1434	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
37438	1434	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
37439	1452	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
37439	1452	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
37440	1455	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
37440	1455	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
37441	1456	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
37441	1456	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
37442	1462	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
37442	1462	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
37443	1477	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
37443	1477	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
37444	1480	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
37444	1480	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
37445	1481	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
37445	1481	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
37446	1487	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
37446	1487	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
37447	1505	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
37447	1505	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
37448	1509	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
37448	1509	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
37449	1510	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
37449	1510	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
37450	1517	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
37450	1517	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
37451	1535	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
37451	1535	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
37452	1539	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
37452	1539	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
37453	1540	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
37453	1540	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
37454	1547	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
37454	1547	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
37455	1563	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
37455	1563	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
37456	1566	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
37456	1566	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
37457	1571	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
37457	1571	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
37458	1572	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
37458	1572	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
37459	1589	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
37459	1589	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
37460	1592	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
37460	1592	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
37461	1597	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
37461	1597	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
37462	1598	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
37462	1598	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
37463	1617	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
37463	1617	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
37464	1621	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
37464	1621	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
37465	1627	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
37465	1627	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
37466	1629	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
37466	1629	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
37467	1647	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
37467	1647	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
37468	1651	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
37468	1651	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
37469	1657	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
37469	1657	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
37470	1659	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
37470	1659	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
973	93	8	BrentOptimizer.java	localMin	THIS	BrentOptimizer	0	DEF	goalType == $.GoalType.MAXIMIZE
973	93	8	BrentOptimizer.java	localMin	goalType	GoalType	0	DEF	$ == GoalType.MAXIMIZE
37669	100	8	BrentOptimizer.java	localMin	THIS	BrentOptimizer	0	NIL-WHILE	count < $.maximalIterationCount
37669	100	8	BrentOptimizer.java	localMin	count	int	0	NIL-WHILE	$ < maximalIterationCount
974	106	12	BrentOptimizer.java	localMin	m	double	1	DEF	Math.abs(x - $) > t2 - 0.5 * (b - a)
974	106	12	BrentOptimizer.java	localMin	t2	double	1	DEF	Math.abs(x - m) > $ - 0.5 * (b - a)
974	106	12	BrentOptimizer.java	localMin	x	double	1	DEF	Math.abs($ - m) > t2 - 0.5 * (b - a)
974	106	12	BrentOptimizer.java	localMin	a	double	1	DEF	Math.abs(x - m) > t2 - 0.5 * (b - $)
974	106	12	BrentOptimizer.java	localMin	b	double	1	DEF	Math.abs(x - m) > t2 - 0.5 * ($ - a)
975	113	16	BrentOptimizer.java	localMin	tol	double	0	DEF	Math.abs(e) > $
975	113	16	BrentOptimizer.java	localMin	e	double	0	DEF	Math.abs($) > tol
976	119	20	BrentOptimizer.java	localMin	q	double	1	DEF	$ > 0
977	129	16	BrentOptimizer.java	localMin	p	double	1	DEF	$ < q * (a - x)
977	129	16	BrentOptimizer.java	localMin	p	double	1	DEF	Math.abs($) < Math.abs(0.5 * q * r)
977	129	16	BrentOptimizer.java	localMin	p	double	1	DEF	$ < q * (b - x)
977	129	16	BrentOptimizer.java	localMin	q	double	1	DEF	p < $ * (a - x)
977	129	16	BrentOptimizer.java	localMin	q	double	1	DEF	Math.abs(p) < Math.abs(0.5 * $ * r)
977	129	16	BrentOptimizer.java	localMin	q	double	1	DEF	p < $ * (b - x)
977	129	16	BrentOptimizer.java	localMin	r	double	1	DEF	Math.abs(p) < Math.abs(0.5 * q * $)
977	129	16	BrentOptimizer.java	localMin	x	double	1	DEF	p < q * (a - $)
977	129	16	BrentOptimizer.java	localMin	x	double	1	DEF	p < q * (b - $)
977	129	16	BrentOptimizer.java	localMin	a	double	1	DEF	p < q * ($ - x)
977	129	16	BrentOptimizer.java	localMin	b	double	1	DEF	p < q * ($ - x)
978	135	20	BrentOptimizer.java	localMin	u	double	0	DEF	($ - a) < t2
978	135	20	BrentOptimizer.java	localMin	u	double	0	DEF	(b - $) < t2
978	135	20	BrentOptimizer.java	localMin	t2	double	0	DEF	(u - a) < $
978	135	20	BrentOptimizer.java	localMin	t2	double	0	DEF	(b - u) < $
978	135	20	BrentOptimizer.java	localMin	a	double	0	DEF	(u - $) < t2
978	135	20	BrentOptimizer.java	localMin	b	double	0	DEF	($ - u) < t2
979	146	16	BrentOptimizer.java	localMin	THIS	BrentOptimizer	0	DEF	goalType == $.GoalType.MAXIMIZE
979	146	16	BrentOptimizer.java	localMin	goalType	GoalType	0	DEF	$ == GoalType.MAXIMIZE
980	151	16	BrentOptimizer.java	localMin	fu	double	1	DEF	$ <= fx
980	151	16	BrentOptimizer.java	localMin	fx	double	1	DEF	fu <= $
981	152	20	BrentOptimizer.java	localMin	u	double	1	DEF	$ < x
981	152	20	BrentOptimizer.java	localMin	x	double	1	DEF	u < $
982	164	20	BrentOptimizer.java	localMin	u	double	1	DEF	$ < x
982	164	20	BrentOptimizer.java	localMin	x	double	1	DEF	u < $
983	169	20	BrentOptimizer.java	localMin	fu	double	1	DEF	$ <= fw
983	169	20	BrentOptimizer.java	localMin	x	double	1	DEF	w == $
983	169	20	BrentOptimizer.java	localMin	w	double	1	DEF	$ == x
983	169	20	BrentOptimizer.java	localMin	fw	double	1	DEF	fu <= $
984	174	27	BrentOptimizer.java	localMin	fu	double	0	DEF	$ <= fv
984	174	27	BrentOptimizer.java	localMin	x	double	0	DEF	v == $
984	174	27	BrentOptimizer.java	localMin	v	double	0	DEF	$ == x
984	174	27	BrentOptimizer.java	localMin	v	double	0	DEF	$ == w
984	174	27	BrentOptimizer.java	localMin	w	double	0	DEF	v == $
984	174	27	BrentOptimizer.java	localMin	fv	double	0	DEF	fu <= $
1786	102	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yInitial) <= $.functionValueAccuracy
1786	102	8	BrentSolver.java	solve	yInitial	double	0	RET	Math.abs($) <= functionValueAccuracy
1787	109	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yMin) <= $.functionValueAccuracy
1787	109	8	BrentSolver.java	solve	yMin	double	0	RET	Math.abs($) <= functionValueAccuracy
1788	115	8	BrentSolver.java	solve	yInitial	double	0	RET	$ * yMin < 0
1788	115	8	BrentSolver.java	solve	yMin	double	0	RET	yInitial * $ < 0
1789	121	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yMax) <= $.functionValueAccuracy
1789	121	8	BrentSolver.java	solve	yMax	double	0	RET	Math.abs($) <= functionValueAccuracy
1790	127	8	BrentSolver.java	solve	yInitial	double	0	RET	$ * yMax < 0
1790	127	8	BrentSolver.java	solve	yMax	double	0	RET	yInitial * $ < 0
1791	168	8	BrentSolver.java	solve	sign	double	1	DEF	$ > 0
1792	170	12	BrentSolver.java	solve	THIS	BrentSolver	1	DEF	Math.abs(yMin) <= $.functionValueAccuracy
1792	170	12	BrentSolver.java	solve	yMin	double	1	DEF	Math.abs($) <= functionValueAccuracy
1793	173	19	BrentSolver.java	solve	THIS	BrentSolver	1	DEF	Math.abs(yMax) <= $.functionValueAccuracy
1793	173	19	BrentSolver.java	solve	yMax	double	1	DEF	Math.abs($) <= functionValueAccuracy
1794	183	15	BrentSolver.java	solve	sign	double	1	DEF	$ < 0
1795	188	12	BrentSolver.java	solve	yMin	double	1	DEF	$ == 0.0
38188	225	8	BrentSolver.java	solve	THIS	BrentSolver	0	NIL-WHILE	i < $.maximalIterationCount
38188	225	8	BrentSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1796	226	12	BrentSolver.java	solve	y1	double	0	DEF	Math.abs(y2) < Math.abs($)
1796	226	12	BrentSolver.java	solve	y2	double	0	DEF	Math.abs($) < Math.abs(y1)
1797	235	12	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(y1) <= $.functionValueAccuracy
1797	235	12	BrentSolver.java	solve	y1	double	0	RET	Math.abs($) <= functionValueAccuracy
1798	245	12	BrentSolver.java	solve	dx	double	0	RET	Math.abs($) <= tolerance
1798	245	12	BrentSolver.java	solve	tolerance	double	0	RET	Math.abs(dx) <= $
1799	249	12	BrentSolver.java	solve	tolerance	double	1	DEF	Math.abs(oldDelta) < $
1799	249	12	BrentSolver.java	solve	oldDelta	double	1	DEF	Math.abs($) < tolerance
1799	249	12	BrentSolver.java	solve	y0	double	1	DEF	Math.abs($) <= Math.abs(y1)
1799	249	12	BrentSolver.java	solve	y1	double	1	DEF	Math.abs(y0) <= Math.abs($)
1800	261	16	BrentSolver.java	solve	x0	double	1	DEF	$ == x2
1800	261	16	BrentSolver.java	solve	x2	double	1	DEF	x0 == $
1801	272	16	BrentSolver.java	solve	p	double	1	DEF	$ > 0.0
1802	277	16	BrentSolver.java	solve	p	double	1	DEF	2.0 * $ >= 1.5 * dx * p1 - Math.abs(tolerance * p1)
1802	277	16	BrentSolver.java	solve	p	double	1	DEF	$ >= Math.abs(0.5 * oldDelta * p1)
1802	277	16	BrentSolver.java	solve	p1	double	1	DEF	2.0 * p >= 1.5 * dx * $ - Math.abs(tolerance * $)
1802	277	16	BrentSolver.java	solve	p1	double	1	DEF	p >= Math.abs(0.5 * oldDelta * $)
1802	277	16	BrentSolver.java	solve	dx	double	1	DEF	2.0 * p >= 1.5 * $ * p1 - Math.abs(tolerance * p1)
1802	277	16	BrentSolver.java	solve	tolerance	double	1	DEF	2.0 * p >= 1.5 * dx * p1 - Math.abs($ * p1)
1802	277	16	BrentSolver.java	solve	oldDelta	double	1	DEF	p >= Math.abs(0.5 * $ * p1)
1803	293	12	BrentSolver.java	solve	tolerance	double	1	DEF	Math.abs(delta) > $
1803	293	12	BrentSolver.java	solve	delta	double	1	DEF	Math.abs($) > tolerance
1804	295	19	BrentSolver.java	solve	dx	double	1	DEF	$ > 0.0
1805	297	19	BrentSolver.java	solve	dx	double	0	DEF	$ <= 0.0
1806	301	12	BrentSolver.java	solve	y1	double	0	DEF	($ > 0) == (y2 > 0)
1806	301	12	BrentSolver.java	solve	y2	double	0	DEF	(y1 > 0) == ($ > 0)
464	102	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ < 0.0
464	102	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ > 1.0
465	105	15	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
466	107	16	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
467	129	8	CauchyDistributionImpl.java	setScale	s	double	0	DEF	$ <= 0.0
468	149	8	CauchyDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < .5
469	171	8	CauchyDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
470	192	8	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
471	194	15	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > .5
1257	66	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	DEF	expected.$.length < 2
1257	66	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	DEF	$.length < 2
1258	71	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	DEF	expected.$.length != observed.$.length
1258	71	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	DEF	$.length != observed.length
1258	71	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	DEF	expected.length != $.length
37829	79	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
37829	79	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
37829	79	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
1259	85	8	ChiSquareTestImpl.java	chiSquare	sumExpected	double	0	DEF	Math.abs($ - sumObserved) > 10E-6
1259	85	8	ChiSquareTestImpl.java	chiSquare	sumObserved	double	0	DEF	Math.abs(sumExpected - $) > 10E-6
37830	90	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
37830	90	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
37830	90	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
1260	91	12	ChiSquareTestImpl.java	chiSquare	rescale	boolean	1	DEF	$
1261	137	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	DEF	$ > 0.5
1261	137	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	DEF	$ <= 0
37831	160	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
37831	160	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
37832	161	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
37832	161	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
37833	171	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
37833	171	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
37834	172	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
37834	172	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
1262	205	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	DEF	$ <= 0
1262	205	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	DEF	$ > 0.5
1263	224	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	DEF	observed1.$.length < 2
1263	224	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	DEF	$.length < 2
1264	229	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	DEF	observed1.$.length != observed2.$.length
1264	229	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	DEF	$.length != observed2.length
1264	229	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	0	DEF	observed1.length != $.length
37835	244	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
37835	244	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
37835	244	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
1265	249	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum1	long	0	DEF	$ == 0
1266	253	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum2	long	0	DEF	$ == 0
1267	259	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	0	DEF	$
37836	267	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
37836	267	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
37836	267	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
1268	268	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	DEF	observed1[$] == 0
1268	268	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	DEF	observed2[$] == 0
1268	268	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	1	DEF	$[i] == 0
1268	268	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	1	DEF	$[i] == 0
1269	274	16	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	1	DEF	$
1270	312	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	DEF	$ > 0.5
1270	312	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	DEF	$ <= 0
1271	330	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	DEF	in.$.length < 2
1271	330	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	DEF	$.length < 2
1272	336	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	DEF	in[0].length < 2
1272	336	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	DEF	$[0].length < 2
37837	357	8	ChiSquareTestImpl.java	checkRectangular	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
37837	357	8	ChiSquareTestImpl.java	checkRectangular	i	int	0	NIL-FOR	$ < in.length
37837	357	8	ChiSquareTestImpl.java	checkRectangular	in	long[][]	0	NIL-FOR	i < $.length
1273	358	12	ChiSquareTestImpl.java	checkRectangular	THIS	ChiSquareTestImpl	0	DEF	in[i].length != in[0].length
1273	358	12	ChiSquareTestImpl.java	checkRectangular	i	int	0	DEF	in[$].length != in[0].length
1273	358	12	ChiSquareTestImpl.java	checkRectangular	in	long[][]	0	DEF	$[i].length != $[0].length
37838	373	8	ChiSquareTestImpl.java	checkPositive	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
37838	373	8	ChiSquareTestImpl.java	checkPositive	i	int	0	NIL-FOR	$ < in.length
37838	373	8	ChiSquareTestImpl.java	checkPositive	in	double[]	0	NIL-FOR	i < $.length
1274	374	12	ChiSquareTestImpl.java	checkPositive	i	int	0	DEF	in[$] <= 0
1274	374	12	ChiSquareTestImpl.java	checkPositive	in	double[]	0	DEF	$[i] <= 0
37839	389	8	ChiSquareTestImpl.java	checkNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
37839	389	8	ChiSquareTestImpl.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
37839	389	8	ChiSquareTestImpl.java	checkNonNegative	in	long[]	0	NIL-FOR	i < $.length
1275	390	12	ChiSquareTestImpl.java	checkNonNegative	i	int	0	DEF	in[$] < 0
1275	390	12	ChiSquareTestImpl.java	checkNonNegative	in	long[]	0	DEF	$[i] < 0
37840	405	8	ChiSquareTestImpl.java	checkNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
37840	405	8	ChiSquareTestImpl.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
37840	405	8	ChiSquareTestImpl.java	checkNonNegative	in	long[][]	0	NIL-FOR	i < $.length
37841	406	12	ChiSquareTestImpl.java	checkNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	j < in[i].length
37841	406	12	ChiSquareTestImpl.java	checkNonNegative	j	int	0	NIL-FOR	$ < in[i].length
37841	406	12	ChiSquareTestImpl.java	checkNonNegative	i	int	0	NIL-FOR	j < in[$].length
37841	406	12	ChiSquareTestImpl.java	checkNonNegative	in	long[][]	0	NIL-FOR	j < $[i].length
1276	407	16	ChiSquareTestImpl.java	checkNonNegative	j	int	0	DEF	in[i][$] < 0
1276	407	16	ChiSquareTestImpl.java	checkNonNegative	i	int	0	DEF	in[$][j] < 0
1276	407	16	ChiSquareTestImpl.java	checkNonNegative	in	long[][]	0	DEF	$[i][j] < 0
460	111	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
461	114	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
462	150	8	ChiSquaredDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
463	176	8	ChiSquaredDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
771	99	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
37337	110	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
37337	110	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
37338	115	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	j	int	0	NIL-FOR	$ < order
37338	115	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	j < $
772	121	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	lIJ	double	0	NotSymmetricMatrixException	Math.abs($ - lJI) > maxDelta
772	121	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	lJI	double	0	NotSymmetricMatrixException	Math.abs(lIJ - $) > maxDelta
772	121	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	maxDelta	double	0	NotSymmetricMatrixException	Math.abs(lIJ - lJI) > $
37339	129	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
37339	129	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
773	134	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	ltI	double[]	0	NotPositiveDefiniteMatrixException	$[i] < absolutePositivityThreshold
773	134	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NotPositiveDefiniteMatrixException	ltI[$] < absolutePositivityThreshold
773	134	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	absolutePositivityThreshold	double	0	NotPositiveDefiniteMatrixException	ltI[i] < $
37340	141	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	q	int	0	NIL-FOR	$ > i
37340	141	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	q > $
37341	144	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	p	int	0	NIL-FOR	$ < order
37341	144	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	p < $
774	155	8	CholeskyDecompositionImpl.java	getL	THIS	CholeskyDecompositionImpl	0	DEF	$.cachedL == null
775	164	8	CholeskyDecompositionImpl.java	getLT	THIS	CholeskyDecompositionImpl	0	DEF	$.cachedLT == null
37342	176	8	CholeskyDecompositionImpl.java	getDeterminant	THIS	CholeskyDecompositionImpl	0	NIL-FOR	i < $.lTData.$.length
37342	176	8	CholeskyDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < lTData.length
1415	45	8	Chromosome.java	getFitness	THIS	Chromosome	0	DEF	$.fitness == Double.MIN_VALUE
1416	91	12	Chromosome.java	findSameChromosome	THIS	Chromosome	0	RET	$.isSame($.anotherChr)
1417	106	8	Chromosome.java	searchForFitnessUpdate	sameChromosome	Chromosome	0	DEF	$ != null
38130	98	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
38130	98	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1657	128	12	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	RET	$.states.isEmpty()
1658	135	12	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.initialized
1659	152	16	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.evaluateStep(interpolator)
1659	152	16	CombinedEventsManager.java	evaluateStep	interpolator	StepInterpolator	0	DEF	state.evaluateStep($)
1660	153	20	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	1	DEF	$.first == null
1661	156	24	CombinedEventsManager.java	evaluateStep	interpolator	StepInterpolator	1	DEF	$.isForward()
1662	157	28	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.getEventTime() < $.first.getEventTime()
1663	161	28	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.getEventTime() > $.first.getEventTime()
1664	216	12	CombinedEventsManager.java	stop	THIS	CombinedEventsManager	0	RET	$.state.stop()
1665	237	16	CombinedEventsManager.java	reset	THIS	CombinedEventsManager	0	DEF	$.state.reset(t, y)
1665	237	16	CombinedEventsManager.java	reset	t	double	0	DEF	state.reset($, y)
1665	237	16	CombinedEventsManager.java	reset	y	double[]	0	DEF	state.reset(t, $)
263	107	8	Complex.java	abs	THIS	Complex	0	RET	$.isNaN()
264	111	8	Complex.java	abs	THIS	Complex	0	RET	$.isInfinite()
265	115	8	Complex.java	abs	THIS	Complex	1	RET	Math.abs($.real) < Math.abs($.imaginary)
266	116	12	Complex.java	abs	THIS	Complex	0	RET	$.imaginary == 0.0
267	122	12	Complex.java	abs	THIS	Complex	0	RET	$.real == 0.0
268	167	8	Complex.java	conjugate	THIS	Complex	0	RET	$.isNaN()
269	209	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN()
269	209	8	Complex.java	divide	rhs	Complex	0	RET	$.isNaN()
270	215	8	Complex.java	divide	c	double	0	RET	$ == 0.0
270	215	8	Complex.java	divide	d	double	0	RET	$ == 0.0
271	219	8	Complex.java	divide	THIS	Complex	0	RET	$.isInfinite()
271	219	8	Complex.java	divide	rhs	Complex	0	RET	$.isInfinite()
272	223	8	Complex.java	divide	c	double	1	RET	Math.abs($) < Math.abs(d)
272	223	8	Complex.java	divide	d	double	1	RET	Math.abs(c) < Math.abs($)
273	258	8	Complex.java	equals	THIS	Complex	1	DEF	$ == other
273	258	8	Complex.java	equals	other	Object	1	DEF	this == $
274	260	15	Complex.java	equals	other	Object	1	DEF	$ == null
275	265	16	Complex.java	equals	rhs	Complex	1	DEF	$.isNaN()
276	288	8	Complex.java	hashCode	THIS	Complex	0	RET	$.isNaN()
277	365	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN()
277	365	8	Complex.java	multiply	rhs	Complex	0	RET	$.isNaN()
278	368	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
278	368	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
278	368	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(rhs.$.imaginary)
278	368	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(rhs.$.real)
278	368	8	Complex.java	multiply	rhs	Complex	0	RET	Double.isInfinite($.imaginary)
278	368	8	Complex.java	multiply	rhs	Complex	0	RET	Double.isInfinite($.real)
279	404	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN()
279	404	8	Complex.java	multiply	rhs	double	0	RET	Double.isNaN($)
280	407	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
280	407	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
280	407	8	Complex.java	multiply	rhs	double	0	RET	Double.isInfinite($)
281	424	8	Complex.java	negate	THIS	Complex	0	RET	$.isNaN()
282	450	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN()
282	450	8	Complex.java	subtract	rhs	Complex	0	RET	$.isNaN()
283	473	8	Complex.java	acos	THIS	Complex	0	RET	$.isNaN()
284	496	8	Complex.java	asin	THIS	Complex	0	RET	$.isNaN()
285	519	8	Complex.java	atan	THIS	Complex	0	RET	$.isNaN()
286	554	8	Complex.java	cos	THIS	Complex	0	RET	$.isNaN()
287	588	8	Complex.java	cosh	THIS	Complex	0	RET	$.isNaN()
288	623	8	Complex.java	exp	THIS	Complex	0	RET	$.isNaN()
289	661	8	Complex.java	log	THIS	Complex	0	RET	$.isNaN()
290	687	8	Complex.java	pow	x	Complex	0	NullPointerException	$ == null
291	720	8	Complex.java	sin	THIS	Complex	0	RET	$.isNaN()
292	754	8	Complex.java	sinh	THIS	Complex	0	RET	$.isNaN()
293	796	8	Complex.java	sqrt	THIS	Complex	0	RET	$.isNaN()
294	800	8	Complex.java	sqrt	THIS	Complex	0	RET	$.real == 0.0
294	800	8	Complex.java	sqrt	THIS	Complex	0	RET	$.imaginary == 0.0
295	805	8	Complex.java	sqrt	THIS	Complex	1	RET	$.real >= 0.0
296	862	8	Complex.java	tan	THIS	Complex	0	RET	$.isNaN()
297	900	8	Complex.java	tanh	THIS	Complex	0	RET	$.isNaN()
298	951	8	Complex.java	nthRoot	n	int	0	DEF	$ <= 0
299	959	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isNaN()
300	964	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isInfinite()
36755	976	8	Complex.java	nthRoot	k	int	0	NIL-FOR	$ < n
36755	976	8	Complex.java	nthRoot	n	int	0	NIL-FOR	k < $
252	156	8	ComplexFormat.java	format	im	double	1	DEF	$ < 0.0
253	160	15	ComplexFormat.java	format	im	double	0	DEF	$ > 0.0
253	160	15	ComplexFormat.java	format	im	double	0	DEF	Double.isNaN($)
254	188	8	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Complex
255	190	15	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Number
256	255	8	ComplexFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
257	278	8	ComplexFormat.java	parse	re	Number	0	RET	$ == null
258	314	8	ComplexFormat.java	parse	im	Number	0	RET	$ == null
259	322	8	ComplexFormat.java	parse	THIS	ComplexFormat	0	RET	$.parseFixedstring(source, $.getImaginaryCharacter(), pos)
259	322	8	ComplexFormat.java	parse	source	String	0	RET	parseFixedstring($, getImaginaryCharacter(), pos)
259	322	8	ComplexFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, getImaginaryCharacter(), $)
260	350	8	ComplexFormat.java	setImaginaryCharacter	imaginaryCharacter	String	0	DEF	$ == null
260	350	8	ComplexFormat.java	setImaginaryCharacter	imaginaryCharacter	String	0	DEF	$.length() == 0
261	364	8	ComplexFormat.java	setImaginaryFormat	imaginaryFormat	NumberFormat	0	DEF	$ == null
262	378	8	ComplexFormat.java	setRealFormat	realFormat	NumberFormat	0	DEF	$ == null
251	63	8	ComplexUtils.java	polar2Complex	r	double	0	DEF	$ < 0
62	84	9	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
62	84	9	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
36723	86	13	CompositeFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
36723	86	13	CompositeFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
36723	86	13	CompositeFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
63	91	13	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
63	91	13	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
64	120	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	$ < source.length()
64	120	8	CompositeFormat.java	parseNumber	source	String	0	DEF	endIndex < $.length()
65	121	12	CompositeFormat.java	parseNumber	sb	StringBuffer	0	DEF	source.substring(startIndex, endIndex).compareTo($.toString()) == 0
65	121	12	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	source.substring($, endIndex).compareTo(sb.toString()) == 0
65	121	12	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	source.substring(startIndex, $).compareTo(sb.toString()) == 0
65	121	12	CompositeFormat.java	parseNumber	source	String	0	DEF	$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
66	147	8	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	$ == endIndex
66	147	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	startIndex == $
36724	152	12	CompositeFormat.java	parseNumber	THIS	CompositeFormat	0	NIL-FOR	i < special.$.length
36724	152	12	CompositeFormat.java	parseNumber	i	int	0	NIL-FOR	$ < special.length
36724	152	12	CompositeFormat.java	parseNumber	special	double[]	0	NIL-FOR	i < $.length
67	154	16	CompositeFormat.java	parseNumber	number	Number	0	DEF	$ != null
68	175	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	$ >= source.length()
68	175	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	source.substring($, endIndex).compareTo(expected) != 0
68	175	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	$ > source.length()
68	175	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	source.substring(startIndex, $).compareTo(expected) != 0
68	175	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	endIndex > $.length()
68	175	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	startIndex >= $.length()
68	175	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	$.substring(startIndex, endIndex).compareTo(expected) != 0
68	175	8	CompositeFormat.java	parseFixedstring	expected	String	0	RET	source.substring(startIndex, endIndex).compareTo($) != 0
69	210	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isInfinite($)
69	210	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isNaN($)
36718	135	8	ContinuedFraction.java	evaluate	n	int	0	NIL-WHILE	$ < maxIterations
36718	135	8	ContinuedFraction.java	evaluate	relativeError	double	0	NIL-WHILE	$ > epsilon
36718	135	8	ContinuedFraction.java	evaluate	epsilon	double	0	NIL-WHILE	relativeError > $
36718	135	8	ContinuedFraction.java	evaluate	maxIterations	int	0	NIL-WHILE	n < $
1	141	12	ContinuedFraction.java	evaluate	p2	double	0	ConvergenceException	Double.isInfinite($)
1	141	12	ContinuedFraction.java	evaluate	q2	double	0	ConvergenceException	Double.isInfinite($)
2	143	16	ContinuedFraction.java	evaluate	a	double	1	DEF	$ != 0.0
3	146	23	ContinuedFraction.java	evaluate	b	double	1	DEF	$ != 0
4	167	8	ContinuedFraction.java	evaluate	n	int	0	MaxIterationsExceededException	$ >= maxIterations
4	167	8	ContinuedFraction.java	evaluate	maxIterations	int	0	MaxIterationsExceededException	n >= $
1675	126	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	RET	model.$.steps.size() == 0
1675	126	4	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	RET	$.steps.size() == 0
1676	130	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	1	DEF	$.steps.size() == 0
1677	135	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DEF	$.getInterpolatedState().length != model.getInterpolatedState().length
1677	135	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DEF	getInterpolatedState().length != $.getInterpolatedState().length
1678	141	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DEF	$.forward ^ model.$.forward
1678	141	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DEF	forward ^ $.forward
1679	151	6	ContinuousOutputModel.java	append	step	double	0	DEF	Math.abs(gap) > 1.0e-3 * Math.abs($)
1679	151	6	ContinuousOutputModel.java	append	gap	double	0	DEF	Math.abs($) > 1.0e-3 * Math.abs(step)
1680	200	4	ContinuousOutputModel.java	handleStep	THIS	ContinuousOutputModel	0	DEF	$.steps.size() == 0
1681	207	4	ContinuousOutputModel.java	handleStep	isLast	boolean	0	DEF	$
1682	265	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMin) <= 0
1682	265	6	ContinuousOutputModel.java	setInterpolatedTime	sMin	StepInterpolator	0	RET	locatePoint(time, $) <= 0
1682	265	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMin) <= 0
1683	270	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMax) >= 0
1683	270	6	ContinuousOutputModel.java	setInterpolatedTime	sMax	StepInterpolator	0	RET	locatePoint(time, $) >= 0
1683	270	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMax) >= 0
38155	277	6	ContinuousOutputModel.java	setInterpolatedTime	iMin	int	0	NIL-WHILE	iMax - $ > 5
38155	277	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	$ - iMin > 5
1684	282	8	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ < 0
1685	285	15	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ > 0
1686	299	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	Math.abs($ - tMin) < 1e-6
1686	299	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	Math.abs(tMax - $) < 1e-6
1686	299	8	ContinuousOutputModel.java	setInterpolatedTime	tMin	double	1	DEF	Math.abs(tMed - $) < 1e-6
1686	299	8	ContinuousOutputModel.java	setInterpolatedTime	tMax	double	1	DEF	Math.abs($ - tMed) < 1e-6
1687	322	8	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.index < low
1687	322	8	ContinuousOutputModel.java	setInterpolatedTime	low	int	1	DEF	index < $
1688	324	15	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	DEF	$.index > high
1688	324	15	ContinuousOutputModel.java	setInterpolatedTime	high	int	0	DEF	index > $
38156	332	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.index <= iMax
38156	332	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.locatePoint(time, $.steps.get($.index)) > 0
38156	332	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	index <= $
38156	332	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	NIL-WHILE	locatePoint($, steps.get(index)) > 0
1689	358	4	ContinuousOutputModel.java	locatePoint	THIS	ContinuousOutputModel	0	RET	$.forward
1690	359	6	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getPreviousTime()
1690	359	6	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getPreviousTime()
1691	361	13	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getCurrentTime()
1691	361	13	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getCurrentTime()
1692	367	4	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getPreviousTime()
1692	367	4	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getPreviousTime()
1693	369	11	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getCurrentTime()
1693	369	11	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getCurrentTime()
1345	102	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	THIS	CorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != order
1345	102	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	DimensionMismatchException	mean.length != $
1345	102	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != order
37885	131	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	i	int	0	NIL-FOR	$ < order
37885	131	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	NIL-FOR	i < $
37886	196	8	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
37886	196	8	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
37887	201	8	CorrelatedRandomVectorGenerator.java	decompose	loop	boolean	0	NIL-FOR	$
37888	205	12	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
37888	205	12	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
1346	208	16	CorrelatedRandomVectorGenerator.java	decompose	ii	int	0	DEF	c[$][$] > c[isi][isi]
1346	208	16	CorrelatedRandomVectorGenerator.java	decompose	isi	int	0	DEF	c[ii][ii] > c[$][$]
1346	208	16	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	0	DEF	$[ii][ii] > $[isi][isi]
1347	215	12	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	DEF	swap[$.rank] != $.rank
1347	215	12	CorrelatedRandomVectorGenerator.java	decompose	swap	int[]	0	DEF	$[rank] != rank
1348	223	12	CorrelatedRandomVectorGenerator.java	decompose	ir	int	1	NotPositiveDefiniteMatrixException	c[$][$] < small
1348	223	12	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	1	NotPositiveDefiniteMatrixException	$[ir][ir] < small
1348	223	12	CorrelatedRandomVectorGenerator.java	decompose	small	double	1	NotPositiveDefiniteMatrixException	c[ir][ir] < $
1349	225	16	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	NotPositiveDefiniteMatrixException	$.rank == 0
37889	230	16	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
37889	230	16	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
1350	231	20	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NotPositiveDefiniteMatrixException	c[index[$]][index[$]] < -small
1350	231	20	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	0	NotPositiveDefiniteMatrixException	$[index[i]][index[i]] < -small
1350	231	20	CorrelatedRandomVectorGenerator.java	decompose	index	int[]	0	NotPositiveDefiniteMatrixException	c[$[i]][$[i]] < -small
1350	231	20	CorrelatedRandomVectorGenerator.java	decompose	small	double	0	NotPositiveDefiniteMatrixException	c[index[i]][index[i]] < -$
37890	249	16	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
37890	249	16	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
37891	254	20	CorrelatedRandomVectorGenerator.java	decompose	j	int	0	NIL-FOR	$ < i
37891	254	20	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	j < $
37892	271	8	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
37892	271	8	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
37893	272	12	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.rank
37893	272	12	CorrelatedRandomVectorGenerator.java	decompose	j	int	0	NIL-FOR	$ < rank
37894	286	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < $.rank
37894	286	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < rank
37895	292	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < correlated.$.length
37895	292	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < correlated.length
37895	292	8	CorrelatedRandomVectorGenerator.java	nextVector	correlated	double[]	0	NIL-FOR	i < $.length
37896	294	12	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.rank
37896	294	12	CorrelatedRandomVectorGenerator.java	nextVector	j	int	0	NIL-FOR	$ < rank
37858	163	8	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	$ < dimension
37858	163	8	Covariance.java	computeCovarianceMatrix	dimension	int	0	NIL-FOR	i < $
37859	164	12	Covariance.java	computeCovarianceMatrix	j	int	0	NIL-FOR	$ < i
37859	164	12	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	j < $
1291	224	8	Covariance.java	covariance	THIS	Covariance	1	DEF	length == yArray.$.length
1291	224	8	Covariance.java	covariance	length	int	1	DEF	$ == yArray.length
1291	224	8	Covariance.java	covariance	length	int	1	DEF	$ > 1
1291	224	8	Covariance.java	covariance	yArray	double[]	1	DEF	length == $.length
37860	227	12	Covariance.java	covariance	i	int	0	NIL-FOR	$ < length
37860	227	12	Covariance.java	covariance	length	int	0	NIL-FOR	i < $
1292	267	8	Covariance.java	checkSufficientData	nRows	int	0	DEF	$ < 2
1292	267	8	Covariance.java	checkSufficientData	nCols	int	0	DEF	$ < 2
163	46	8	DefaultTransformer.java	transform	o	Object	0	MathException	$ == null
164	50	8	DefaultTransformer.java	transform	o	Object	0	RET	$ instanceof Number
165	65	8	DefaultTransformer.java	equals	THIS	DefaultTransformer	0	RET	$ == other
165	65	8	DefaultTransformer.java	equals	other	Object	0	RET	this == $
166	68	8	DefaultTransformer.java	equals	other	Object	0	RET	$ == null
1192	140	8	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.windowSize != INFINITE_WINDOW
1193	141	12	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.getN() == $.windowSize
1194	143	19	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	0	DEF	$.getN() < $.windowSize
1195	204	8	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	0	DEF	$.getN() > 0
1196	205	12	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	1	DEF	$.getN() > 1
1197	303	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < 1
1198	304	12	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
1199	315	8	DescriptiveStatistics.java	setWindowSize	THIS	DescriptiveStatistics	0	DEF	windowSize < $.eDA.getNumElements()
1199	315	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < eDA.getNumElements()
1199	315	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
1200	376	8	DescriptiveStatistics.java	getPercentile	THIS	DescriptiveStatistics	1	DEF	$.percentileImpl instanceof Percentile
37784	144	8	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	$ < n
37784	144	8	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	i < $
37785	146	12	DirectSearchOptimizer.java	setStartConfiguration	j	int	0	NIL-FOR	$ < i + 1
37785	146	12	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	j < $ + 1
1100	147	16	DirectSearchOptimizer.java	setStartConfiguration	j	int	0	DEF	steps[$] == 0.0
1100	147	16	DirectSearchOptimizer.java	setStartConfiguration	steps	double[]	0	DEF	$[j] == 0.0
1101	172	8	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	DEF	$ < 0
37786	180	8	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	$ < n + 1
37786	180	8	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	i < $ + 1
1102	185	12	DirectSearchOptimizer.java	setStartConfiguration	THIS	DirectSearchOptimizer	0	DEF	refI.$.length != n
1102	185	12	DirectSearchOptimizer.java	setStartConfiguration	refI	double[]	0	DEF	$.length != n
1102	185	12	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	DEF	refI.length != $
37787	190	12	DirectSearchOptimizer.java	setStartConfiguration	j	int	0	NIL-FOR	$ < i
37787	190	12	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	j < $
37788	193	16	DirectSearchOptimizer.java	setStartConfiguration	k	int	0	NIL-FOR	$ < n
37788	193	16	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	k < $
1103	194	20	DirectSearchOptimizer.java	setStartConfiguration	k	int	0	DEF	refI[$] != refJ[$]
1103	194	20	DirectSearchOptimizer.java	setStartConfiguration	refJ	double[]	0	DEF	refI[k] != $[k]
1103	194	20	DirectSearchOptimizer.java	setStartConfiguration	refI	double[]	0	DEF	$[k] != refJ[k]
1104	199	16	DirectSearchOptimizer.java	setStartConfiguration	allEquals	boolean	0	DEF	$
1105	207	12	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	DEF	$ > 0
37789	209	16	DirectSearchOptimizer.java	setStartConfiguration	k	int	0	NIL-FOR	$ < n
37789	209	16	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	k < $
1106	265	8	DirectSearchOptimizer.java	optimize	THIS	DirectSearchOptimizer	0	DEF	$.startConfiguration == null
1107	294	12	DirectSearchOptimizer.java	optimize	THIS	DirectSearchOptimizer	0	RET	$.iterations > 0
37790	296	16	DirectSearchOptimizer.java	optimize	THIS	DirectSearchOptimizer	0	NIL-FOR	i < $.simplex.$.length
37790	296	16	DirectSearchOptimizer.java	optimize	i	int	0	NIL-FOR	$ < simplex.length
1108	299	16	DirectSearchOptimizer.java	optimize	converged	boolean	0	RET	$
1109	319	8	DirectSearchOptimizer.java	incrementIterationsCounter	THIS	DirectSearchOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
1110	345	8	DirectSearchOptimizer.java	evaluate	THIS	DirectSearchOptimizer	0	MaxEvaluationsExceededException	++$.evaluations > $.maxEvaluations
1111	361	8	DirectSearchOptimizer.java	buildSimplex	THIS	DirectSearchOptimizer	0	DEF	n != $.startConfiguration.$.length
1111	361	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	DEF	$ != startConfiguration.length
37791	372	8	DirectSearchOptimizer.java	buildSimplex	i	int	0	NIL-FOR	$ < n
37791	372	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	i < $
37792	375	12	DirectSearchOptimizer.java	buildSimplex	k	int	0	NIL-FOR	$ < n
37792	375	12	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	k < $
37793	392	8	DirectSearchOptimizer.java	evaluateSimplex	THIS	DirectSearchOptimizer	0	NIL-FOR	i < $.simplex.$.length
37793	392	8	DirectSearchOptimizer.java	evaluateSimplex	i	int	0	NIL-FOR	$ < simplex.length
1112	395	12	DirectSearchOptimizer.java	evaluateSimplex	vertex	RealPointValuePair	0	DEF	Double.isNaN($.getValue())
37794	412	8	DirectSearchOptimizer.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < n
37794	412	8	DirectSearchOptimizer.java	replaceWorstPoint	n	int	0	NIL-FOR	i < $
1113	413	12	DirectSearchOptimizer.java	replaceWorstPoint	THIS	DirectSearchOptimizer	0	DEF	comparator.compare($.simplex[i], pointValuePair) > 0
1113	413	12	DirectSearchOptimizer.java	replaceWorstPoint	i	int	0	DEF	comparator.compare(simplex[$], pointValuePair) > 0
1113	413	12	DirectSearchOptimizer.java	replaceWorstPoint	pointValuePair	RealPointValuePair	0	DEF	comparator.compare(simplex[i], $) > 0
1113	413	12	DirectSearchOptimizer.java	replaceWorstPoint	comparator	Comparator<RealPointValuePair>	0	DEF	$.compare(simplex[i], pointValuePair) > 0
38164	103	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
38164	103	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
38165	104	12	DividedDifferenceInterpolator.java	computeDividedDifference	j	int	0	NIL-FOR	$ < n-i
38165	104	12	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	j < n-$
38165	104	12	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	j < $-i
1704	106	16	DividedDifferenceInterpolator.java	computeDividedDifference	denominator	double	0	DuplicateSampleAbscissaException	$ == 0.0
38084	138	4	DormandPrince54Integrator.java	estimateError	THIS	DormandPrince54Integrator	0	NIL-FOR	j < y0.$.length
38084	138	4	DormandPrince54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
38084	138	4	DormandPrince54Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
1532	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	THIS	DormandPrince54StepInterpolator	1	DEF	interpolator.$.v1 == null
1532	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	interpolator	DormandPrince54StepInterpolator	1	DEF	$.v1 == null
1533	171	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.vectorsInitialized
1534	173	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.v1 == null
38049	183	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
38049	183	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
38050	206	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
38050	206	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
38083	252	4	DormandPrince853Integrator.java	estimateError	THIS	DormandPrince853Integrator	0	NIL-FOR	j < y0.$.length
38083	252	4	DormandPrince853Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
38083	252	4	DormandPrince853Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
1594	273	4	DormandPrince853Integrator.java	estimateError	den	double	0	DEF	$ <= 0.0
1618	247	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	1	DEF	interpolator.$.currentState == null
1618	247	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	interpolator	DormandPrince853StepInterpolator	1	DEF	$.currentState == null
38101	258	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
38101	258	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < yDotKLast.length
38102	265	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
38102	265	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < v.length
38103	292	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
38103	292	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < yDotKLast.length
38104	297	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
38104	297	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < v.length
1619	318	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.vectorsInitialized
1620	320	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.v == null
38105	322	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < 7
38106	331	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
38106	331	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
38107	349	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < D.$.length
38107	349	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < D.length
38108	371	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
38108	371	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1621	392	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	RET	$.currentState == null
38109	401	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
38109	401	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
38110	410	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
38110	410	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
38111	420	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
38111	420	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
38112	444	4	DormandPrince853StepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < dimension
38112	444	4	DormandPrince853StepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	i < $
38113	467	4	DormandPrince853StepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < dimension
38113	467	4	DormandPrince853StepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	i < $
850	168	8	EigenDecompositionImpl.java	EigenDecompositionImpl	THIS	EigenDecompositionImpl	1	DEF	$.isSymmetric(matrix)
850	168	8	EigenDecompositionImpl.java	EigenDecompositionImpl	matrix	RealMatrix	1	DEF	isSymmetric($)
37572	199	8	EigenDecompositionImpl.java	EigenDecompositionImpl	THIS	EigenDecompositionImpl	0	NIL-FOR	i < $.squaredSecondary.$.length
37572	199	8	EigenDecompositionImpl.java	EigenDecompositionImpl	i	int	0	NIL-FOR	$ < squaredSecondary.length
37573	218	8	EigenDecompositionImpl.java	isSymmetric	i	int	0	NIL-FOR	$ < rows
37573	218	8	EigenDecompositionImpl.java	isSymmetric	rows	int	0	NIL-FOR	i < $
37574	219	12	EigenDecompositionImpl.java	isSymmetric	j	int	0	NIL-FOR	$ < columns
37574	219	12	EigenDecompositionImpl.java	isSymmetric	columns	int	0	NIL-FOR	j < $
851	222	16	EigenDecompositionImpl.java	isSymmetric	mij	double	0	RET	Math.abs($ - mji) > (Math.max(Math.abs($), Math.abs(mji)) * eps)
851	222	16	EigenDecompositionImpl.java	isSymmetric	mji	double	0	RET	Math.abs(mij - $) > (Math.max(Math.abs(mij), Math.abs($)) * eps)
851	222	16	EigenDecompositionImpl.java	isSymmetric	eps	double	0	RET	Math.abs(mij - mji) > (Math.max(Math.abs(mij), Math.abs(mji)) * $)
852	257	8	EigenDecompositionImpl.java	getV	THIS	EigenDecompositionImpl	0	DEF	$.cachedV == null
853	259	12	EigenDecompositionImpl.java	getV	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
37575	265	12	EigenDecompositionImpl.java	getV	k	int	0	NIL-FOR	$ < m
37575	265	12	EigenDecompositionImpl.java	getV	m	int	0	NIL-FOR	k < $
854	279	8	EigenDecompositionImpl.java	getD	THIS	EigenDecompositionImpl	0	DEF	$.cachedD == null
855	290	8	EigenDecompositionImpl.java	getVT	THIS	EigenDecompositionImpl	0	DEF	$.cachedVt == null
856	292	12	EigenDecompositionImpl.java	getVT	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
37576	298	12	EigenDecompositionImpl.java	getVT	k	int	0	NIL-FOR	$ < m
37576	298	12	EigenDecompositionImpl.java	getVT	m	int	0	NIL-FOR	k < $
857	336	8	EigenDecompositionImpl.java	getEigenvector	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
858	356	8	EigenDecompositionImpl.java	getSolver	THIS	EigenDecompositionImpl	0	DEF	$.eigenvectors == null
37577	559	8	EigenDecompositionImpl.java	transformToTridiagonal	THIS	EigenDecompositionImpl	0	NIL-FOR	i < $.squaredSecondary.$.length
37577	559	8	EigenDecompositionImpl.java	transformToTridiagonal	i	int	0	NIL-FOR	$ < squaredSecondary.length
37578	579	8	EigenDecompositionImpl.java	computeGershgorinCircles	i	int	0	NIL-FOR	$ < m - 1
37578	579	8	EigenDecompositionImpl.java	computeGershgorinCircles	m	int	0	NIL-FOR	i < $ - 1
859	660	16	EigenDecompositionImpl.java	findEigenvalues	chooseLeft	boolean	1	DEF	$
37579	661	20	EigenDecompositionImpl.java	findEigenvalues	i	int	0	NIL-FOR	$ < n
37579	661	20	EigenDecompositionImpl.java	findEigenvalues	n	int	0	NIL-FOR	i < $
37580	665	20	EigenDecompositionImpl.java	findEigenvalues	i	int	0	NIL-FOR	$ < n
37580	665	20	EigenDecompositionImpl.java	findEigenvalues	n	int	0	NIL-FOR	i < $
37581	677	8	EigenDecompositionImpl.java	findEigenvalues	i	int	0	NIL-FOR	$ < j
37581	677	8	EigenDecompositionImpl.java	findEigenvalues	j	int	0	NIL-FOR	i < $
37582	696	8	EigenDecompositionImpl.java	computeSplits	THIS	EigenDecompositionImpl	0	NIL-FOR	i < $.secondary.$.length
37582	696	8	EigenDecompositionImpl.java	computeSplits	i	int	0	NIL-FOR	$ < secondary.length
860	700	12	EigenDecompositionImpl.java	computeSplits	THIS	EigenDecompositionImpl	0	DEF	Math.abs($.secondary[i]) <= max
860	700	12	EigenDecompositionImpl.java	computeSplits	max	double	0	DEF	Math.abs(secondary[i]) <= $
860	700	12	EigenDecompositionImpl.java	computeSplits	i	int	0	DEF	Math.abs(secondary[$]) <= max
861	739	8	EigenDecompositionImpl.java	process2RowsBlock	delta	double	0	InvalidMatrixException	$ < 0
862	776	8	EigenDecompositionImpl.java	process3RowsBlock	delta	double	0	InvalidMatrixException	$ >= 0
863	790	8	EigenDecompositionImpl.java	process3RowsBlock	z0	double	0	DEF	$ < z1
863	790	8	EigenDecompositionImpl.java	process3RowsBlock	z1	double	0	DEF	z0 < $
864	795	8	EigenDecompositionImpl.java	process3RowsBlock	z1	double	0	DEF	$ < z2
864	795	8	EigenDecompositionImpl.java	process3RowsBlock	z2	double	0	DEF	z1 < $
865	800	8	EigenDecompositionImpl.java	process3RowsBlock	z0	double	0	DEF	$ < z1
865	800	8	EigenDecompositionImpl.java	process3RowsBlock	z1	double	0	DEF	z0 < $
37583	827	8	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	NIL-FOR	$ < n - 1
37583	827	8	EigenDecompositionImpl.java	processGeneralBlock	n	int	0	NIL-FOR	i < $ - 1
866	833	8	EigenDecompositionImpl.java	processGeneralBlock	sumOffDiag	double	0	RET	$ == 0
37584	856	8	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	NIL-WHILE	$ > 0
37585	868	12	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	NIL-FOR	$ >= 0
867	869	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.work[i + 2] <= 0
867	869	16	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	DEF	work[$ + 2] <= 0
868	873	16	EigenDecompositionImpl.java	processGeneralBlock	offDiagMax	double	0	DEF	diagMin >= 4 * $
868	873	16	EigenDecompositionImpl.java	processGeneralBlock	diagMin	double	0	DEF	$ >= 4 * offDiagMax
37586	887	12	EigenDecompositionImpl.java	processGeneralBlock	i0	int	0	NIL-FOR	$ < n0
37586	887	12	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	NIL-FOR	i0 < $
869	888	16	EigenDecompositionImpl.java	processGeneralBlock	k	int	0	MaxIterationsExceededException	$ >= maxIter
869	888	16	EigenDecompositionImpl.java	processGeneralBlock	maxIter	int	0	MaxIterationsExceededException	k >= $
870	898	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.pingPong == 0
870	898	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.work[4 * n0 - 2] <= $.TOLERANCE_2 * $.sigma
870	898	16	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	0	DEF	$.work[4 * n0 - 1] <= $.TOLERANCE_2 * diagMax
870	898	16	EigenDecompositionImpl.java	processGeneralBlock	diagMax	double	0	DEF	work[4 * n0 - 1] <= TOLERANCE_2 * $
870	898	16	EigenDecompositionImpl.java	processGeneralBlock	i0	int	0	DEF	n0 - $ > 3
870	898	16	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	DEF	work[4 * $ - 2] <= TOLERANCE_2 * sigma
870	898	16	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	DEF	work[4 * $ - 1] <= TOLERANCE_2 * diagMax
870	898	16	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	DEF	$ - i0 > 3
37587	905	20	EigenDecompositionImpl.java	processGeneralBlock	i	int	0	NIL-FOR	$ < 4 * n0 - 11
37587	905	20	EigenDecompositionImpl.java	processGeneralBlock	n0	int	0	NIL-FOR	i < 4 * $ - 11
871	906	24	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	1	DEF	$.work[i + 3] <= $.TOLERANCE_2 * $.work[i]
871	906	24	EigenDecompositionImpl.java	processGeneralBlock	THIS	EigenDecompositionImpl	1	DEF	$.work[i + 2] <= $.TOLERANCE_2 * $.sigma
871	906	24	EigenDecompositionImpl.java	processGeneralBlock	i	int	1	DEF	work[$ + 3] <= TOLERANCE_2 * work[$]
871	906	24	EigenDecompositionImpl.java	processGeneralBlock	i	int	1	DEF	work[$ + 2] <= TOLERANCE_2 * sigma
37588	937	8	EigenDecompositionImpl.java	initialSplits	k	int	0	NIL-FOR	$ < 2
37589	941	12	EigenDecompositionImpl.java	initialSplits	i	int	0	NIL-FOR	$ >= 0
872	942	16	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	$.work[i + 2] <= $.TOLERANCE_2 * d
872	942	16	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	work[$ + 2] <= TOLERANCE_2 * d
872	942	16	EigenDecompositionImpl.java	initialSplits	d	double	1	DEF	work[i + 2] <= TOLERANCE_2 * $
37590	952	12	EigenDecompositionImpl.java	initialSplits	i	int	0	NIL-FOR	$ < 4 * n - 2
37590	952	12	EigenDecompositionImpl.java	initialSplits	n	int	0	NIL-FOR	i < 4 * $ - 2
873	955	16	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	$.work[i] <= $.TOLERANCE_2 * d
873	955	16	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	work[$] <= TOLERANCE_2 * d
873	955	16	EigenDecompositionImpl.java	initialSplits	d	double	1	DEF	work[i] <= TOLERANCE_2 * $
874	960	23	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j] < $.work[i + 2]
874	960	23	EigenDecompositionImpl.java	initialSplits	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[i + 2] < $.work[j]
874	960	23	EigenDecompositionImpl.java	initialSplits	j	int	1	DEF	MathUtils.SAFE_MIN * work[$] < work[i + 2]
874	960	23	EigenDecompositionImpl.java	initialSplits	j	int	1	DEF	MathUtils.SAFE_MIN * work[i + 2] < work[$]
874	960	23	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	MathUtils.SAFE_MIN * work[j] < work[$ + 2]
874	960	23	EigenDecompositionImpl.java	initialSplits	i	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[j]
37591	996	8	EigenDecompositionImpl.java	goodStep	deflating	boolean	0	NIL-FOR	$
875	998	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	0	RET	start >= $
875	998	12	EigenDecompositionImpl.java	goodStep	start	int	0	RET	$ >= deflatedEnd
876	1005	12	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 5] <= $.TOLERANCE_2 * ($.sigma + $.work[k - 3])
876	1005	12	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 2 * $.pingPong - 4] <= $.TOLERANCE_2 * $.work[k - 7]
876	1005	12	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 5] <= TOLERANCE_2 * (sigma + work[$ - 3])
876	1005	12	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 2 * pingPong - 4] <= TOLERANCE_2 * work[$ - 7]
876	1005	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	DEF	start != $ - 2
876	1005	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	DEF	start == $ - 1
876	1005	12	EigenDecompositionImpl.java	goodStep	start	int	1	DEF	$ != deflatedEnd - 2
876	1005	12	EigenDecompositionImpl.java	goodStep	start	int	1	DEF	$ == deflatedEnd - 1
877	1014	19	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 9] <= $.TOLERANCE_2 * $.sigma
877	1014	19	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.work[k - 2 * $.pingPong - 8] <= $.TOLERANCE_2 * $.work[k - 11]
877	1014	19	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 9] <= TOLERANCE_2 * sigma
877	1014	19	EigenDecompositionImpl.java	goodStep	k	int	1	DEF	work[$ - 2 * pingPong - 8] <= TOLERANCE_2 * work[$ - 11]
877	1014	19	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	DEF	start == $ - 2
877	1014	19	EigenDecompositionImpl.java	goodStep	start	int	1	DEF	$ == deflatedEnd - 2
878	1019	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.work[k - 3] > $.work[k - 7]
878	1019	16	EigenDecompositionImpl.java	goodStep	k	int	0	DEF	work[$ - 3] > work[$ - 7]
879	1025	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.work[k - 5] > $.TOLERANCE_2 * $.work[k - 3]
879	1025	16	EigenDecompositionImpl.java	goodStep	k	int	0	DEF	work[$ - 5] > TOLERANCE_2 * work[$ - 3]
880	1028	20	EigenDecompositionImpl.java	goodStep	t	double	1	DEF	s <= $
880	1028	20	EigenDecompositionImpl.java	goodStep	s	double	1	DEF	$ <= t
881	1052	8	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.dMin <= 0
881	1052	8	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	0	DEF	$ < end
881	1052	8	EigenDecompositionImpl.java	goodStep	end	int	0	DEF	deflatedEnd < $
882	1053	12	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	DEF	$.flipIfWarranted(deflatedEnd, 1)
882	1053	12	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	0	DEF	flipIfWarranted($, 1)
883	1066	8	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	RET	MathUtils.SAFE_MIN * $.qMax < Math.min($.work[l - 1], Math.min($.work[l - 9], $.dMin2 + $.work[l - 2 * $.pingPong]))
883	1066	8	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	0	RET	$.dMin < 0
883	1066	8	EigenDecompositionImpl.java	goodStep	l	int	0	RET	MathUtils.SAFE_MIN * qMax < Math.min(work[$ - 1], Math.min(work[$ - 9], dMin2 + work[$ - 2 * pingPong]))
37592	1074	12	EigenDecompositionImpl.java	goodStep	loop	boolean	0	NIL-FOR	$
884	1080	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin >= 0
884	1080	16	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin1 > 0
885	1084	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.work[4 * deflatedEnd - 5 - $.pingPong] < TOLERANCE * ($.sigma + $.dN1)
885	1084	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin1 > 0.0
885	1084	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	$.dMin < 0.0
885	1084	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	RET	Math.abs($.dN) < TOLERANCE * $.sigma
885	1084	23	EigenDecompositionImpl.java	goodStep	deflatedEnd	int	1	RET	work[4 * $ - 5 - pingPong] < TOLERANCE * (sigma + dN1)
886	1093	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.dMin < 0.0
887	1095	20	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.tType < -22
888	1098	27	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	$.dMin1 > 0.0
889	1107	23	EigenDecompositionImpl.java	goodStep	THIS	EigenDecompositionImpl	1	DEF	Double.isNaN($.dMin)
890	1132	8	EigenDecompositionImpl.java	flipIfWarranted	THIS	EigenDecompositionImpl	0	RET	1.5 * $.work[$.pingPong] < $.work[4 * (n - 1) + $.pingPong]
890	1132	8	EigenDecompositionImpl.java	flipIfWarranted	n	int	0	RET	1.5 * work[pingPong] < work[4 * ($ - 1) + pingPong]
37593	1135	12	EigenDecompositionImpl.java	flipIfWarranted	i	int	0	NIL-FOR	$ < j
37593	1135	12	EigenDecompositionImpl.java	flipIfWarranted	j	int	0	NIL-FOR	i < $
37594	1136	16	EigenDecompositionImpl.java	flipIfWarranted	k	int	0	NIL-FOR	$ < 4
37595	1161	8	EigenDecompositionImpl.java	eigenvaluesRange	i	int	0	NIL-FOR	$ < n
37595	1161	8	EigenDecompositionImpl.java	eigenvaluesRange	n	int	0	NIL-FOR	i < $
37596	1177	8	EigenDecompositionImpl.java	eigenvaluesRange	i	int	0	NIL-FOR	$ < maxIter
37596	1177	8	EigenDecompositionImpl.java	eigenvaluesRange	maxIter	int	0	NIL-FOR	i < $
891	1180	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < relativeTolerance * Math.max(Math.abs(left), Math.abs(right))
891	1180	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < absoluteTolerance
891	1180	12	EigenDecompositionImpl.java	eigenvaluesRange	relativeTolerance	double	0	DEF	range < $ * Math.max(Math.abs(left), Math.abs(right))
891	1180	12	EigenDecompositionImpl.java	eigenvaluesRange	absoluteTolerance	double	0	DEF	range < $
891	1180	12	EigenDecompositionImpl.java	eigenvaluesRange	left	double	0	DEF	range < relativeTolerance * Math.max(Math.abs($), Math.abs(right))
891	1180	12	EigenDecompositionImpl.java	eigenvaluesRange	right	double	0	DEF	range < relativeTolerance * Math.max(Math.abs(left), Math.abs($))
892	1187	12	EigenDecompositionImpl.java	eigenvaluesRange	THIS	EigenDecompositionImpl	1	DEF	$.countEigenValues(middle, index, n) >= 1
892	1187	12	EigenDecompositionImpl.java	eigenvaluesRange	middle	double	1	DEF	countEigenValues($, index, n) >= 1
892	1187	12	EigenDecompositionImpl.java	eigenvaluesRange	index	int	1	DEF	countEigenValues(middle, $, n) >= 1
892	1187	12	EigenDecompositionImpl.java	eigenvaluesRange	n	int	1	DEF	countEigenValues(middle, index, $) >= 1
37597	1199	8	EigenDecompositionImpl.java	eigenvaluesRange	i	int	0	NIL-FOR	$ < maxIter
37597	1199	8	EigenDecompositionImpl.java	eigenvaluesRange	maxIter	int	0	NIL-FOR	i < $
893	1202	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < absoluteTolerance
893	1202	12	EigenDecompositionImpl.java	eigenvaluesRange	range	double	0	DEF	$ < relativeTolerance * Math.max(Math.abs(left), Math.abs(right))
893	1202	12	EigenDecompositionImpl.java	eigenvaluesRange	relativeTolerance	double	0	DEF	range < $ * Math.max(Math.abs(left), Math.abs(right))
893	1202	12	EigenDecompositionImpl.java	eigenvaluesRange	absoluteTolerance	double	0	DEF	range < $
893	1202	12	EigenDecompositionImpl.java	eigenvaluesRange	left	double	0	DEF	range < relativeTolerance * Math.max(Math.abs($), Math.abs(right))
893	1202	12	EigenDecompositionImpl.java	eigenvaluesRange	right	double	0	DEF	range < relativeTolerance * Math.max(Math.abs(left), Math.abs($))
894	1209	12	EigenDecompositionImpl.java	eigenvaluesRange	THIS	EigenDecompositionImpl	1	DEF	$.countEigenValues(middle, index, n) >= n
894	1209	12	EigenDecompositionImpl.java	eigenvaluesRange	middle	double	1	DEF	countEigenValues($, index, n) >= n
894	1209	12	EigenDecompositionImpl.java	eigenvaluesRange	index	int	1	DEF	countEigenValues(middle, $, n) >= n
894	1209	12	EigenDecompositionImpl.java	eigenvaluesRange	n	int	1	DEF	countEigenValues(middle, index, $) >= $
37598	1232	8	EigenDecompositionImpl.java	countEigenValues	i	int	0	NIL-FOR	$ < n
37598	1232	8	EigenDecompositionImpl.java	countEigenValues	n	int	0	NIL-FOR	i < $
895	1234	12	EigenDecompositionImpl.java	countEigenValues	ratio	double	0	DEF	$ <= 0
37599	1255	8	EigenDecompositionImpl.java	ldlTDecomposition	i	int	0	NIL-FOR	$ < n
37599	1255	8	EigenDecompositionImpl.java	ldlTDecomposition	n	int	0	NIL-FOR	i < $
896	1278	8	EigenDecompositionImpl.java	dqds	THIS	EigenDecompositionImpl	1	DEF	$.pingPong == 0
37600	1279	12	EigenDecompositionImpl.java	dqds	j4	int	0	NIL-FOR	$ <= 4 * (end - 3)
37600	1279	12	EigenDecompositionImpl.java	dqds	end	int	0	NIL-FOR	j4 <= 4 * ($ - 3)
37601	1288	12	EigenDecompositionImpl.java	dqds	j4	int	0	NIL-FOR	$ <= 4 * (end - 3)
37601	1288	12	EigenDecompositionImpl.java	dqds	end	int	0	NIL-FOR	j4 <= 4 * ($ - 3)
897	1334	8	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.pingPong == 0
37602	1335	12	EigenDecompositionImpl.java	dqd	j4	int	0	NIL-FOR	$ < 4 * (end - 3)
37602	1335	12	EigenDecompositionImpl.java	dqd	end	int	0	NIL-FOR	j4 < 4 * ($ - 3)
898	1337	16	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 2] == 0.0
898	1337	16	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 2] == 0.0
899	1342	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 2] < $.work[j4 + 1]
899	1342	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 + 1] < $.work[j4 - 2]
899	1342	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 2] < work[$ + 1]
899	1342	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 1] < work[$ - 2]
37603	1355	12	EigenDecompositionImpl.java	dqd	j4	int	0	NIL-FOR	$ < 4 * (end - 3)
37603	1355	12	EigenDecompositionImpl.java	dqd	end	int	0	NIL-FOR	j4 < 4 * ($ - 3)
900	1357	16	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 3] == 0.0
900	1357	16	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 3] == 0.0
901	1362	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 3] < $.work[j4 + 2]
901	1362	23	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 + 2] < $.work[j4 - 3]
901	1362	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 3] < work[$ + 2]
901	1362	23	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[$ - 3]
902	1382	8	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 2] == 0.0
902	1382	8	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 2] == 0.0
903	1387	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4p2 + 2] < $.work[j4 - 2]
903	1387	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 2] < $.work[j4p2 + 2]
903	1387	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[j4p2 + 2] < work[$ - 2]
903	1387	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 2] < work[j4p2 + 2]
903	1387	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[j4 - 2]
903	1387	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[j4 - 2] < work[$ + 2]
904	1402	8	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	$.work[j4 - 2] == 0.0
904	1402	8	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	work[$ - 2] == 0.0
905	1407	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4p2 + 2] < $.work[j4 - 2]
905	1407	15	EigenDecompositionImpl.java	dqd	THIS	EigenDecompositionImpl	1	DEF	MathUtils.SAFE_MIN * $.work[j4 - 2] < $.work[j4p2 + 2]
905	1407	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[j4p2 + 2] < work[$ - 2]
905	1407	15	EigenDecompositionImpl.java	dqd	j4	int	1	DEF	MathUtils.SAFE_MIN * work[$ - 2] < work[j4p2 + 2]
905	1407	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[$ + 2] < work[j4 - 2]
905	1407	15	EigenDecompositionImpl.java	dqd	j4p2	int	1	DEF	MathUtils.SAFE_MIN * work[j4 - 2] < work[$ + 2]
906	1438	8	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.dMin <= 0.0
907	1448	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN1
907	1448	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN
908	1454	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.dMin == $.dN
908	1454	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.dMin1 == $.dN1
909	1458	20	EigenDecompositionImpl.java	computeShiftIncrement	gap1	double	1	DEF	$ > b1
909	1458	20	EigenDecompositionImpl.java	computeShiftIncrement	gap1	double	1	DEF	$ > 0.0
909	1458	20	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	1	DEF	gap1 > $
910	1463	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	DEF	$.dN > b1
910	1463	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	dN > $
911	1466	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	a2 > ($ + b2)
911	1466	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	a2 > (b1 + $)
911	1466	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	$ > (b1 + b2)
912	1478	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN
913	1481	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 5] > $.work[nn - 7]
913	1481	24	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 5] > work[$ - 7]
914	1490	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[np - 4] > $.work[np - 2]
914	1490	24	EigenDecompositionImpl.java	computeShiftIncrement	np	int	0	RET	work[$ - 4] > work[$ - 2]
915	1494	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 9] > $.work[nn - 11]
915	1494	24	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 9] > work[$ - 11]
37604	1503	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
37604	1503	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
37604	1503	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
916	1504	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	$ == 0.0
917	1508	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
917	1508	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
918	1513	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * Math.max(b2, $) < a2
918	1513	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * Math.max($, b1) < a2
918	1513	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	cnst1 < $
918	1513	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	100 * Math.max(b2, b1) < $
918	1513	24	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	0	DEF	$ < a2
919	1520	20	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	$ < cnst1
919	1520	20	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	0	DEF	a2 < $
920	1526	19	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin == $.dN2
921	1537	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[np - 8] > b2
921	1537	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[np - 4] > b1
921	1537	16	EigenDecompositionImpl.java	computeShiftIncrement	np	int	0	RET	work[$ - 8] > b2
921	1537	16	EigenDecompositionImpl.java	computeShiftIncrement	np	int	0	RET	work[$ - 4] > b1
921	1537	16	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	RET	work[np - 4] > $
921	1537	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	RET	work[np - 8] > $
922	1543	16	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	RET	end - $ > 2
922	1543	16	EigenDecompositionImpl.java	computeShiftIncrement	end	int	0	RET	$ - start > 2
37605	1546	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
37605	1546	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
37605	1546	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
923	1547	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	$ == 0.0
924	1551	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
924	1551	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
925	1556	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * Math.max(b2, $) < a2
925	1556	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * Math.max($, b1) < a2
925	1556	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	cnst1 < $
925	1556	24	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	0	DEF	100 * Math.max(b2, b1) < $
925	1556	24	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	0	DEF	$ < a2
926	1563	16	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	1	DEF	$ < cnst1
926	1563	16	EigenDecompositionImpl.java	computeShiftIncrement	cnst1	double	1	DEF	a2 < $
927	1572	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.tType == -6
928	1574	23	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	DEF	$.tType == -18
929	1586	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin2 == $.dN2
929	1586	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin1 == $.dN1
930	1591	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 5] > $.work[nn - 7]
930	1591	16	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 5] > work[$ - 7]
931	1596	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	RET	$ != 0.0
37606	1597	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
37606	1597	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
37606	1597	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
932	1599	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
932	1599	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
933	1604	24	EigenDecompositionImpl.java	computeShiftIncrement	oldB1	double	0	DEF	100 * Math.max(b1, $) < b2
933	1604	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * Math.max($, oldB1) < b2
933	1604	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * Math.max(b1, oldB1) < $
934	1612	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	1	DEF	gap2 > $ * a2
934	1612	16	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	1	DEF	gap2 > b2 * $
934	1612	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > b2 * a2
934	1612	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > 0.0
935	1622	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	DEF	$.dMin1 == $.dN1
936	1632	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	2 * $.work[nn - 5] < $.work[nn - 7]
936	1632	12	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	1	RET	$.dMin2 == $.dN2
936	1632	12	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	1	RET	2 * work[$ - 5] < work[$ - 7]
937	1635	16	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[nn - 5] > $.work[nn - 7]
937	1635	16	EigenDecompositionImpl.java	computeShiftIncrement	nn	int	0	RET	work[$ - 5] > work[$ - 7]
938	1640	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	RET	$ != 0.0
37607	1641	20	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	NIL-FOR	i4 >= 4 * start + 2 + $.pingPong
37607	1641	20	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	NIL-FOR	$ >= 4 * start + 2 + pingPong
37607	1641	20	EigenDecompositionImpl.java	computeShiftIncrement	start	int	0	NIL-FOR	i4 >= 4 * $ + 2 + pingPong
939	1642	24	EigenDecompositionImpl.java	computeShiftIncrement	THIS	EigenDecompositionImpl	0	RET	$.work[i4] > $.work[i4 - 2]
939	1642	24	EigenDecompositionImpl.java	computeShiftIncrement	i4	int	0	RET	work[$] > work[$ - 2]
940	1647	24	EigenDecompositionImpl.java	computeShiftIncrement	b1	double	0	DEF	100 * $ < b2
940	1647	24	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	0	DEF	100 * b1 < $
941	1656	16	EigenDecompositionImpl.java	computeShiftIncrement	b2	double	1	DEF	gap2 > $ * a2
941	1656	16	EigenDecompositionImpl.java	computeShiftIncrement	a2	double	1	DEF	gap2 > b2 * $
941	1656	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > 0.0
941	1656	16	EigenDecompositionImpl.java	computeShiftIncrement	gap2	double	1	DEF	$ > b2 * a2
942	1682	8	EigenDecompositionImpl.java	updateSigma	THIS	EigenDecompositionImpl	1	DEF	shift < $.sigma
942	1682	8	EigenDecompositionImpl.java	updateSigma	shift	double	1	DEF	$ < sigma
37608	1709	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < m
37608	1709	8	EigenDecompositionImpl.java	findEigenVectors	m	int	0	NIL-FOR	i < $
37609	1718	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < m
37609	1718	8	EigenDecompositionImpl.java	findEigenVectors	m	int	0	NIL-FOR	i < $
37610	1747	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ < m - 1
37610	1747	8	EigenDecompositionImpl.java	findEigenvector	m	int	0	NIL-FOR	i < $ - 1
943	1749	12	EigenDecompositionImpl.java	findEigenvector	absG	double	0	DEF	$ < minG
943	1749	12	EigenDecompositionImpl.java	findEigenvector	minG	double	0	DEF	absG < $
37611	1762	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ >= 0
37612	1768	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ < m
37612	1768	8	EigenDecompositionImpl.java	findEigenvector	m	int	0	NIL-FOR	i < $
37613	1776	8	EigenDecompositionImpl.java	findEigenvector	i	int	0	NIL-FOR	$ < m
37613	1776	8	EigenDecompositionImpl.java	findEigenvector	m	int	0	NIL-FOR	i < $
37614	1799	8	EigenDecompositionImpl.java	stationaryQuotientDifferenceWithShift	i	int	0	NIL-FOR	$ < nM1
37614	1799	8	EigenDecompositionImpl.java	stationaryQuotientDifferenceWithShift	nM1	int	0	NIL-FOR	i < $
37615	1827	8	EigenDecompositionImpl.java	progressiveQuotientDifferenceWithShift	i	int	0	NIL-FOR	$ >= 0
37927	80	8	ElitisticListPopulation.java	nextGeneration	i	int	0	NIL-FOR	$<oldChromosomes.size()
37927	80	8	ElitisticListPopulation.java	nextGeneration	oldChromosomes	List<Chromosome>	0	NIL-FOR	i<$.size()
1412	95	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	IllegalArgumentException	$ > 1
1412	95	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	IllegalArgumentException	$ < 0
1607	206	4	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1607	206	4	EmbeddedRungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
1608	214	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.requiresDenseOutput()
1608	214	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
38094	234	4	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
38095	239	6	EmbeddedRungeKuttaIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
1609	241	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
1609	241	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1610	246	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1611	248	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.vecAbsoluteTolerance != null
38096	262	8	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
38096	262	8	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
38097	264	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
38097	264	10	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
38097	264	10	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
38098	266	12	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
38098	266	12	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
38099	277	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
38099	277	8	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
38099	277	8	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
38100	279	10	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
38100	279	10	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
1612	287	8	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1613	291	10	EmbeddedRungeKuttaIntegrator.java	integrate	interpolator	AbstractStepInterpolator	1	DEF	manager.evaluateStep($)
1613	291	10	EmbeddedRungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolator)
1614	293	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	Math.abs(dt) <= Math.ulp($.stepStart)
1614	293	14	EmbeddedRungeKuttaIntegrator.java	integrate	dt	double	1	DEF	Math.abs($) <= Math.ulp(stepStart)
1615	328	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
1616	333	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	manager.reset($.stepStart, y)
1616	333	6	EmbeddedRungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1616	333	6	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1616	333	6	EmbeddedRungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1617	339	6	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1351	140	12	EmpiricalDistributionImpl.java	load	THIS	EmpiricalDistributionImpl	0	DEF	$.sampleStats.getN() == 0
1352	328	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	DEF	$.binStats.isEmpty()
37897	331	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
37897	331	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount
37898	345	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount-1
37898	345	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount-1
1353	372	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	DEF	$.loaded
37899	380	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
37899	380	8	EmpiricalDistributionImpl.java	getNextValue	i	int	0	NIL-FOR	$ < binCount
1354	381	11	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	RET	x <= $.upperBounds[i]
1354	381	11	EmpiricalDistributionImpl.java	getNextValue	i	int	0	RET	x <= upperBounds[$]
1354	381	11	EmpiricalDistributionImpl.java	getNextValue	x	double	0	RET	$ <= upperBounds[i]
1355	383	15	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	0	RET	$.getN() > 0
1356	384	19	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	1	RET	$.getStandardDeviation() > 0
37900	443	8	EmpiricalDistributionImpl.java	getUpperBounds	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount - 1
37900	443	8	EmpiricalDistributionImpl.java	getUpperBounds	i	int	0	NIL-FOR	$ < binCount - 1
1480	52	8	Erf.java	erf	x	double	0	DEF	$ < 0
37846	64	12	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
37846	64	12	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
37846	64	12	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
37847	68	8	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
37847	68	8	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
37847	68	8	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
1284	77	8	EuclideanIntegerPoint.java	equals	other	Object	0	RET	$ instanceof EuclideanIntegerPoint
1285	81	8	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	RET	$.point.$.length != otherPoint.$.length
1285	81	8	EuclideanIntegerPoint.java	equals	otherPoint	int[]	0	RET	point.length != $.length
37848	84	8	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < $.point.$.length
37848	84	8	EuclideanIntegerPoint.java	equals	i	int	0	NIL-FOR	$ < point.length
1286	85	12	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	RET	$.point[i] != otherPoint[i]
1286	85	12	EuclideanIntegerPoint.java	equals	i	int	0	RET	point[$] != otherPoint[$]
1286	85	12	EuclideanIntegerPoint.java	equals	otherPoint	int[]	0	RET	point[i] != $[i]
38134	84	4	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
38134	84	4	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
38154	179	12	EventState.java	evaluateStep	i	int	0	NIL-FOR	$ < n
38154	179	12	EventState.java	evaluateStep	n	int	0	NIL-FOR	i < $
1666	187	16	EventState.java	evaluateStep	THIS	EventState	1	FunctionEvaluationException:RET	$.g0Positive ^ (gb >= 0)
1666	187	16	EventState.java	evaluateStep	gb	double	1	FunctionEvaluationException:RET	g0Positive ^ ($ >= 0)
1667	215	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	Math.abs(root - $.previousEventTime) <= $.convergence
1667	215	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	Math.abs(root - ta) <= $.convergence
1667	215	20	EventState.java	evaluateStep	root	double	1	DEF	Double.isNaN($)
1667	215	20	EventState.java	evaluateStep	root	double	1	DEF	Math.abs($ - previousEventTime) <= convergence
1667	215	20	EventState.java	evaluateStep	root	double	1	DEF	Math.abs($ - ta) <= convergence
1667	215	20	EventState.java	evaluateStep	ta	double	1	DEF	Math.abs(root - $) <= convergence
1668	221	27	EventState.java	evaluateStep	THIS	EventState	0	RET	Double.isNaN($.previousEventTime)
1668	221	27	EventState.java	evaluateStep	THIS	EventState	0	RET	Math.abs($.previousEventTime - root) > $.convergence
1668	221	27	EventState.java	evaluateStep	root	double	0	RET	Math.abs(previousEventTime - $) > convergence
1669	224	24	EventState.java	evaluateStep	THIS	EventState	0	RET	Math.abs(t1 - $.pendingEventTime) <= $.convergence
1669	224	24	EventState.java	evaluateStep	THIS	EventState	0	RET	$.pendingEvent
1669	224	24	EventState.java	evaluateStep	t1	double	0	RET	Math.abs($ - pendingEventTime) <= convergence
1670	252	12	EventState.java	evaluateStep	cause	Throwable	1	DEF	$ instanceof DerivativeException
1670	252	12	EventState.java	evaluateStep	cause	Throwable	1	DEF	$ != null
1671	254	19	EventState.java	evaluateStep	cause	Throwable	0	DEF	$ instanceof EventException
1671	254	19	EventState.java	evaluateStep	cause	Throwable	0	DEF	$ != null
1672	285	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	$.pendingEvent
1673	316	8	EventState.java	reset	THIS	EventState	0	RET	$.pendingEvent
1674	320	8	EventState.java	reset	THIS	EventState	0	DEF	$.nextAction == EventHandler.RESET_STATE
506	53	8	ExponentialDistributionImpl.java	setMean	mean	double	0	DEF	$ <= 0.0
507	75	8	ExponentialDistributionImpl.java	density	x	Double	0	RET	$ < 0
508	98	8	ExponentialDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
509	122	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ < 0.0
509	122	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ > 1.0
510	125	15	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1.0
511	160	8	ExponentialDistributionImpl.java	getDomainUpperBound	p	double	1	RET	$ < .5
512	182	8	ExponentialDistributionImpl.java	getInitialDomain	p	double	1	RET	$ < .5
454	73	8	FDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
455	102	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
456	105	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
457	151	8	FDistributionImpl.java	getInitialDomain	d	double	0	DEF	$ > 2.0
458	165	8	FDistributionImpl.java	setNumeratorDegreesOfFreedom	degreesOfFreedom	double	0	DEF	$ <= 0.0
459	188	8	FDistributionImpl.java	setDenominatorDegreesOfFreedom	degreesOfFreedom	double	0	DEF	$ <= 0.0
1496	224	8	FastCosineTransformer.java	fct	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
1497	229	8	FastCosineTransformer.java	fct	n	int	0	RET	$ == 1
38008	240	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
38008	240	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
38009	254	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
38009	254	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
1502	304	8	FastFourierTransformer.java	fft	THIS	FastFourierTransformer	0	RET	f.$.length == 1
1502	304	8	FastFourierTransformer.java	fft	f	double	0	RET	$.length == 1
38018	313	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
38019	323	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
1503	352	8	FastFourierTransformer.java	fft	n	int	0	RET	$ == 1
1504	356	8	FastFourierTransformer.java	fft	n	int	0	RET	$ == 2
38020	364	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < n
38020	364	8	FastFourierTransformer.java	fft	n	int	0	NIL-FOR	i < $
38021	367	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	ii >= $
38021	367	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	$ > 0
38021	367	12	FastFourierTransformer.java	fft	ii	int	0	NIL-WHILE	$ >= k
38022	374	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < n
38022	374	8	FastFourierTransformer.java	fft	n	int	0	NIL-FOR	i < $
38023	389	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < n
38023	389	8	FastFourierTransformer.java	fft	n	int	0	NIL-FOR	i < $
38024	391	12	FastFourierTransformer.java	fft	j	int	0	NIL-FOR	$ < n
38024	391	12	FastFourierTransformer.java	fft	n	int	0	NIL-FOR	j < $
38025	392	16	FastFourierTransformer.java	fft	k	int	0	NIL-FOR	$ < i
38025	392	16	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	k < $
1505	433	8	FastFourierTransformer.java	sample	n	int	0	DEF	$ <= 0
38026	442	8	FastFourierTransformer.java	sample	i	int	0	NIL-FOR	$ < n
38026	442	8	FastFourierTransformer.java	sample	n	int	0	NIL-FOR	i < $
38027	457	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
38027	457	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
38027	457	8	FastFourierTransformer.java	scaleArray	f	double	0	NIL-FOR	i < $.length
38028	472	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
38028	472	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
38028	472	8	FastFourierTransformer.java	scaleArray	f	Complex	0	NIL-FOR	i < $.length
1506	495	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	DEF	$.isPowerOf2(d.$.length)
1506	495	8	FastFourierTransformer.java	verifyDataSet	d	double	0	DEF	isPowerOf2($.length)
1507	509	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	DEF	$.isPowerOf2(o.$.length)
1507	509	8	FastFourierTransformer.java	verifyDataSet	o	Object	0	DEF	isPowerOf2($.length)
1508	526	8	FastFourierTransformer.java	verifyInterval	lower	double	0	DEF	$ >= upper
1508	526	8	FastFourierTransformer.java	verifyInterval	upper	double	0	DEF	lower >= $
38029	553	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize.$.length
38029	553	8	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize.length
38029	553	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $.length
1509	573	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == dimensionSize.$.length
1509	573	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	1	DEF	subVector.length == $.length
1509	573	8	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == dimensionSize.length
38030	575	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
38030	575	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
38030	575	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
1510	581	12	FastFourierTransformer.java	mdfft	forward	boolean	1	DEF	$
38031	586	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
38031	586	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
38031	586	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
1511	593	12	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == d
1511	593	12	FastFourierTransformer.java	mdfft	d	int	1	DEF	subVector.length == $
1511	593	12	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == d
38032	599	16	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize[subVector.$.length]
38032	599	16	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[subVector.length]
38032	599	16	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[subVector.length]
38032	599	16	FastFourierTransformer.java	mdfft	subVector	int[]	0	NIL-FOR	i < dimensionSize[$.length]
1498	161	8	FastHadamardTransformer.java	fht	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
38010	173	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
38010	173	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
38011	181	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
38011	181	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
38012	187	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
38012	187	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
1499	212	8	FastHadamardTransformer.java	fht	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
38013	224	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
38013	224	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
38014	232	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
38014	232	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
38015	238	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
38015	238	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
1500	218	8	FastSineTransformer.java	fst	f	double	0	DEF	$[0] != 0.0
1501	224	8	FastSineTransformer.java	fst	n	int	0	RET	$ == 1
38016	233	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
38016	233	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
38017	245	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
38017	245	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
557	74	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	matrix	FieldMatrix<T>	0	NonSquareMatrixException	$.isSquare()
36970	87	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < m
36970	87	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	row < $
36971	94	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	NIL-FOR	$ < m
36971	94	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	col < $
36972	99	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < col
36972	99	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	NIL-FOR	row < $
36973	102	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	i	int	0	NIL-FOR	$ < row
36973	102	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	i < $
36974	110	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < m
36974	110	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	row < $
36975	113	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	i	int	0	NIL-FOR	$ < col
36975	113	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	NIL-FOR	i < $
558	118	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	THIS	FieldLUDecompositionImpl	0	DEF	$.lu[nonZero][col].equals($.field.getZero())
558	118	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	nonZero	int	0	DEF	lu[$][col].equals(field.getZero())
558	118	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	DEF	lu[nonZero][$].equals(field.getZero())
559	125	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	nonZero	int	0	RET	$ >= m
559	125	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	RET	nonZero >= $
560	131	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	nonZero	int	0	DEF	$ != col
560	131	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	DEF	nonZero != $
36976	133	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	i	int	0	NIL-FOR	$ < m
36976	133	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	i < $
36977	146	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < m
36977	146	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	row < $
561	156	8	FieldLUDecompositionImpl.java	getL	THIS	FieldLUDecompositionImpl	0	DEF	$.cachedL == null
561	156	8	FieldLUDecompositionImpl.java	getL	THIS	FieldLUDecompositionImpl	0	DEF	$.singular
36978	159	12	FieldLUDecompositionImpl.java	getL	i	int	0	NIL-FOR	$ < m
36978	159	12	FieldLUDecompositionImpl.java	getL	m	int	0	NIL-FOR	i < $
36979	161	16	FieldLUDecompositionImpl.java	getL	j	int	0	NIL-FOR	$ < i
36979	161	16	FieldLUDecompositionImpl.java	getL	i	int	0	NIL-FOR	j < $
562	172	8	FieldLUDecompositionImpl.java	getU	THIS	FieldLUDecompositionImpl	0	DEF	$.singular
562	172	8	FieldLUDecompositionImpl.java	getU	THIS	FieldLUDecompositionImpl	0	DEF	$.cachedU == null
36980	175	12	FieldLUDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < m
36980	175	12	FieldLUDecompositionImpl.java	getU	m	int	0	NIL-FOR	i < $
36981	177	16	FieldLUDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < m
36981	177	16	FieldLUDecompositionImpl.java	getU	m	int	0	NIL-FOR	j < $
563	187	8	FieldLUDecompositionImpl.java	getP	THIS	FieldLUDecompositionImpl	0	DEF	$.singular
563	187	8	FieldLUDecompositionImpl.java	getP	THIS	FieldLUDecompositionImpl	0	DEF	$.cachedP == null
36982	190	12	FieldLUDecompositionImpl.java	getP	i	int	0	NIL-FOR	$ < m
36982	190	12	FieldLUDecompositionImpl.java	getP	m	int	0	NIL-FOR	i < $
564	204	8	FieldLUDecompositionImpl.java	getDeterminant	THIS	FieldLUDecompositionImpl	1	RET	$.singular
36983	209	12	FieldLUDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < m
36983	209	12	FieldLUDecompositionImpl.java	getDeterminant	m	int	0	NIL-FOR	i < $
1185	99	8	FirstMoment.java	increment	THIS	FirstMoment	0	DEF	$.n == 0
1427	42	8	FixedGenerationCount.java	FixedGenerationCount	maxGenerations	int	0	IllegalArgumentException	$ <= 0
1428	56	8	FixedGenerationCount.java	isSatisfied	THIS	FixedGenerationCount	0	RET	$.numGenerations < $.maxGenerations
1162	85	8	FourthMoment.java	increment	THIS	FourthMoment	0	DEF	$.n < 1
367	178	8	Fraction.java	Fraction	overflow	long	0	FractionConversionException	a0 > $
367	178	8	Fraction.java	Fraction	a0	long	0	FractionConversionException	$ > overflow
368	184	8	Fraction.java	Fraction	a0	long	0	RET	Math.abs($ - value) < epsilon
368	184	8	Fraction.java	Fraction	value	double	0	RET	Math.abs(a0 - $) < epsilon
368	184	8	Fraction.java	Fraction	epsilon	double	0	RET	Math.abs(a0 - value) < $
36760	200	8	Fraction.java	Fraction	stop	boolean	0	NIL-DOWHILE	$
369	206	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	q2 > $
369	206	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	p2 > $
369	206	12	Fraction.java	Fraction	p2	long	0	FractionConversionException	$ > overflow
369	206	12	Fraction.java	Fraction	q2	long	0	FractionConversionException	$ > overflow
370	211	12	Fraction.java	Fraction	convergent	double	1	DEF	Math.abs($ - value) > epsilon
370	211	12	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
370	211	12	Fraction.java	Fraction	n	int	1	DEF	$ < maxIterations
370	211	12	Fraction.java	Fraction	value	double	1	DEF	Math.abs(convergent - $) > epsilon
370	211	12	Fraction.java	Fraction	epsilon	double	1	DEF	Math.abs(convergent - value) > $
370	211	12	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
370	211	12	Fraction.java	Fraction	maxIterations	int	1	DEF	n < $
371	223	8	Fraction.java	Fraction	n	int	0	FractionConversionException	$ >= maxIterations
371	223	8	Fraction.java	Fraction	maxIterations	int	0	FractionConversionException	n >= $
372	227	8	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
372	227	8	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
373	254	8	Fraction.java	Fraction	den	int	0	DEF	$ == 0
374	258	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
375	259	12	Fraction.java	Fraction	num	int	0	DEF	$ == Integer.MIN_VALUE
375	259	12	Fraction.java	Fraction	den	int	0	DEF	$ == Integer.MIN_VALUE
376	268	8	Fraction.java	Fraction	d	int	0	DEF	$ > 1
377	274	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
378	288	8	Fraction.java	abs	THIS	Fraction	1	DEF	$.numerator >= 0
379	331	8	Fraction.java	equals	THIS	Fraction	1	DEF	$ == other
379	331	8	Fraction.java	equals	other	Object	1	DEF	this == $
380	333	15	Fraction.java	equals	other	Object	1	DEF	$ == null
381	411	8	Fraction.java	negate	THIS	Fraction	0	DEF	$.numerator==Integer.MIN_VALUE
382	483	8	Fraction.java	addSub	fraction	Fraction	0	DEF	$ == null
383	487	8	Fraction.java	addSub	THIS	Fraction	0	RET	$.numerator == 0
384	490	8	Fraction.java	addSub	THIS	Fraction	0	RET	fraction.$.numerator == 0
384	490	8	Fraction.java	addSub	fraction	Fraction	0	RET	$.numerator == 0
385	496	8	Fraction.java	addSub	d1	int	0	RET	$==1
386	520	8	Fraction.java	addSub	w	BigInteger	0	DEF	$.bitLength() > 31
387	540	8	Fraction.java	multiply	fraction	Fraction	0	DEF	$ == null
388	543	8	Fraction.java	multiply	THIS	Fraction	0	RET	$.numerator == 0
388	543	8	Fraction.java	multiply	THIS	Fraction	0	RET	fraction.$.numerator == 0
388	543	8	Fraction.java	multiply	fraction	Fraction	0	RET	$.numerator == 0
389	575	8	Fraction.java	divide	fraction	Fraction	0	DEF	$ == null
390	578	8	Fraction.java	divide	THIS	Fraction	0	DEF	fraction.$.numerator == 0
390	578	8	Fraction.java	divide	fraction	Fraction	0	DEF	$.numerator == 0
391	607	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$ == 0
392	612	8	Fraction.java	getReducedFraction	numerator	int	0	RET	$==0
393	616	8	Fraction.java	getReducedFraction	numerator	int	0	DEF	($&1)==0
393	616	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
394	619	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$ < 0
395	620	12	Fraction.java	getReducedFraction	numerator	int	0	DEF	$==Integer.MIN_VALUE
395	620	12	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
396	648	8	Fraction.java	toString	THIS	Fraction	1	DEF	$.denominator == 1
397	650	15	Fraction.java	toString	THIS	Fraction	1	DEF	$.numerator == 0
351	175	8	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Fraction
352	177	15	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
353	205	8	FractionFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
354	229	8	FractionFormat.java	parse	num	Number	0	RET	$ == null
355	262	8	FractionFormat.java	parse	den	Number	0	RET	$ == null
37873	85	8	Frequency.java	toString	iter	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
1304	113	8	Frequency.java	addValue	v	Object	1	DEF	$ instanceof Comparable<?>
1305	134	8	Frequency.java	addValue	v	Comparable<?>	0	DEF	$ instanceof Integer
1306	139	12	Frequency.java	addValue	count	Long	1	DEF	$ == null
37874	216	8	Frequency.java	getSumFreq	iterator	Iterator<Long>	0	NIL-WHILE	$.hasNext()
1307	243	8	Frequency.java	getCount	v	Comparable<?>	0	RET	$ instanceof Integer
1308	249	12	Frequency.java	getCount	count	Long	0	DEF	$ != null
1309	316	8	Frequency.java	getPct	sumFreq	long	0	RET	$ == 0
1310	381	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	$.getSumFreq() == 0
1311	384	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	$ instanceof Integer
1312	388	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	DEF	$ == null
1313	395	12	Frequency.java	getCumFreq	value	Long	0	DEF	$ != null
1314	402	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.firstKey()) < 0
1314	402	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.firstKey()) < 0
1314	402	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.firstKey()) < 0
1315	406	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.lastKey()) >= 0
1315	406	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.lastKey()) >= 0
1315	406	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.lastKey()) >= 0
37875	411	8	Frequency.java	getCumFreq	values	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
1316	413	12	Frequency.java	getCumFreq	nextValue	Comparable<?>	1	DEF	c.compare(v, $) > 0
1316	413	12	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	1	DEF	$.compare(v, nextValue) > 0
1316	413	12	Frequency.java	getCumFreq	v	Comparable<?>	1	DEF	c.compare($, nextValue) > 0
1317	491	8	Frequency.java	getCumPct	sumFreq	long	0	RET	$ == 0
1318	577	8	Frequency.java	equals	THIS	Frequency	0	RET	$ == obj
1318	577	8	Frequency.java	equals	obj	Object	0	RET	this == $
1319	579	8	Frequency.java	equals	obj	Object	0	RET	$ == null
1320	581	8	Frequency.java	equals	obj	Object	0	RET	$ instanceof Frequency
1321	584	8	Frequency.java	equals	THIS	Frequency	1	RET	$.freqTable == null
1322	585	12	Frequency.java	equals	THIS	Frequency	0	RET	other.$.freqTable != null
1322	585	12	Frequency.java	equals	other	Frequency	0	RET	$.freqTable != null
1323	587	15	Frequency.java	equals	THIS	Frequency	0	RET	$.freqTable.equals(other.$.freqTable)
1323	587	15	Frequency.java	equals	other	Frequency	0	RET	freqTable.equals($.freqTable)
1326	81	8	GLSMultipleLinearRegression.java	getOmegaInverse	THIS	GLSMultipleLinearRegression	0	DEF	$.OmegaInverse == null
1484	97	8	Gamma.java	logGamma	x	double	1	DEF	Double.isNaN($)
1484	97	8	Gamma.java	logGamma	x	double	1	DEF	$ <= 0.0
38006	103	12	Gamma.java	logGamma	i	int	0	NIL-FOR	$ > 0
1485	165	8	Gamma.java	regularizedGammaP	a	double	1	DEF	$ <= 0.0
1485	165	8	Gamma.java	regularizedGammaP	a	double	1	DEF	Double.isNaN($)
1485	165	8	Gamma.java	regularizedGammaP	x	double	1	DEF	$ < 0.0
1485	165	8	Gamma.java	regularizedGammaP	x	double	1	DEF	Double.isNaN($)
1486	167	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ == 0.0
1487	169	15	Gamma.java	regularizedGammaP	a	double	1	DEF	$ >= 1.0
1487	169	15	Gamma.java	regularizedGammaP	a	double	1	DEF	x > $
1487	169	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ > a
38007	178	12	Gamma.java	regularizedGammaP	n	double	0	NIL-WHILE	$ < maxIterations
38007	178	12	Gamma.java	regularizedGammaP	an	double	0	NIL-WHILE	Math.abs($) > epsilon
38007	178	12	Gamma.java	regularizedGammaP	epsilon	double	0	NIL-WHILE	Math.abs(an) > $
38007	178	12	Gamma.java	regularizedGammaP	maxIterations	int	0	NIL-WHILE	n < $
1488	186	12	Gamma.java	regularizedGammaP	n	double	1	MaxIterationsExceededException	$ >= maxIterations
1488	186	12	Gamma.java	regularizedGammaP	maxIterations	int	1	MaxIterationsExceededException	n >= $
1489	240	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ <= 0.0
1489	240	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	Double.isNaN($)
1489	240	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < 0.0
1489	240	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	Double.isNaN($)
1490	242	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ == 0.0
1491	244	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ < 1.0
1491	244	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	x < $
1491	244	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < a
1492	292	8	Gamma.java	digamma	x	double	0	RET	$ > 0
1492	292	8	Gamma.java	digamma	x	double	0	RET	$ <= S_LIMIT
1493	298	8	Gamma.java	digamma	x	double	0	RET	$ >= C_LIMIT
1494	321	8	Gamma.java	trigamma	x	double	0	RET	$ > 0
1494	321	8	Gamma.java	trigamma	x	double	0	RET	$ <= S_LIMIT
1495	325	8	Gamma.java	trigamma	x	double	0	RET	$ >= C_LIMIT
411	73	8	GammaDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
412	98	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
413	101	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
414	113	8	GammaDistributionImpl.java	setAlpha	alpha	double	0	DEF	$ <= 0.0
415	135	8	GammaDistributionImpl.java	setBeta	beta	double	0	DEF	$ <= 0.0
416	158	8	GammaDistributionImpl.java	density	x	Double	0	RET	$ < 0
417	194	8	GammaDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
418	220	8	GammaDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
37941	172	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	$.getCostEvaluations() < 2
37941	172	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	Math.abs($.cost) > $.convergence
37941	172	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	Math.abs(previous - $.cost) > ($.cost * $.steadyStateThreshold)
37941	172	8	GaussNewtonEstimator.java	estimate	previous	double	0	NIL-DOWHILE	Math.abs($ - cost) > (cost * steadyStateThreshold)
37942	178	12	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	i < $.measurements.$.length
37942	178	12	GaussNewtonEstimator.java	estimate	i	int	0	NIL-FOR	$ < measurements.length
1444	179	16	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	DEF	$.measurements [i].isIgnored()
1444	179	16	GaussNewtonEstimator.java	estimate	i	int	0	DEF	measurements [$].isIgnored()
37943	185	20	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	j < $.parameters.$.length
37943	185	20	GaussNewtonEstimator.java	estimate	j	int	0	NIL-FOR	$ < parameters.length
37944	191	20	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	k < $.parameters.$.length
37944	191	20	GaussNewtonEstimator.java	estimate	k	int	0	NIL-FOR	$ < parameters.length
37945	193	24	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	l < $.parameters.$.length
37945	193	24	GaussNewtonEstimator.java	estimate	l	int	0	NIL-FOR	$ < parameters.length
37946	211	16	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	i < $.parameters.$.length
37946	211	16	GaussNewtonEstimator.java	estimate	i	int	0	NIL-FOR	$ < parameters.length
37765	68	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
37766	81	12	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.rows
37766	81	12	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < rows
37767	89	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	j < $.cols
37767	89	16	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
37768	94	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	k < $.cols
37768	94	16	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
37769	97	20	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	l < $.cols
37769	97	20	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < cols
37770	114	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.cols
37770	114	16	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < cols
1085	123	12	GaussNewtonOptimizer.java	doOptimize	previous	VectorialPointValuePair	0	DEF	$ != null
1422	66	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	IllegalArgumentException	$ > 1
1422	66	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	IllegalArgumentException	$ < 0
1423	69	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	IllegalArgumentException	$ < 0
1423	69	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	IllegalArgumentException	$ > 1
37929	107	8	GeneticAlgorithm.java	evolve	current	Population	0	NIL-WHILE	condition.isSatisfied($)
37929	107	8	GeneticAlgorithm.java	evolve	condition	StoppingCondition	0	NIL-WHILE	$.isSatisfied(current)
37930	140	8	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	NIL-WHILE	$.getPopulationSize() < $.getPopulationLimit()
1424	145	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getCrossoverRate()
1424	145	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getCrossoverRate()
1425	151	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getMutationRate()
1425	151	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getMutationRate()
1426	161	12	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	DEF	$.getPopulationSize() < $.getPopulationLimit()
1183	107	8	GeometricMean.java	getResult	THIS	GeometricMean	1	RET	$.sumOfLogs.getN() > 0
1184	195	8	GeometricMean.java	checkEmpty	THIS	GeometricMean	0	DEF	$.getN() > 0
38093	111	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
38093	111	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1535	228	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ > 0.9999
1535	228	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ < 0.0001
1536	263	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control1	double	1	DEF	$ < 0.0001
1536	263	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control1	double	1	DEF	$ > 0.9999
1537	269	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control2	double	1	DEF	$ < 0.0001
1537	269	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control2	double	1	DEF	$ > 0.9999
1538	275	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control3	double	1	DEF	$ < 0.0001
1538	275	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control3	double	1	DEF	$ > 0.9999
1539	281	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control4	double	1	DEF	$ < 1.0001
1539	281	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control4	double	1	DEF	$ > 999.9
1540	315	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ % 2 != 0
1540	315	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ <= 6
1541	319	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ < 0.0001
1541	319	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ > 0.9999
1542	325	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ < 0.0001
1542	325	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ > 0.9999
1543	367	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence.$.length != size
1543	367	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence == null
1543	367	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	DEF	sequence.length != $
1544	376	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
38051	378	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
38051	378	6	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
38052	383	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
38052	383	6	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
38053	391	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
38053	391	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
38054	396	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
38054	396	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
38055	398	6	GraggBulirschStoerIntegrator.java	initializeArrays	l	int	0	NIL-FOR	$ < k
38055	398	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	l < $
1545	421	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ >= 7
1545	421	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ <= 0
1546	435	4	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	1	DEF	$.vecAbsoluteTolerance == null
38056	436	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
38056	436	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
38056	436	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
38057	441	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
38057	441	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
38057	441	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
38058	477	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
38058	477	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
38058	477	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
38059	484	4	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	NIL-FOR	$ < n
38059	484	4	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	NIL-FOR	j < $
1547	486	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	DEF	2 * $ == n
1547	486	6	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	DEF	2 * j == $
38060	492	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
38060	492	6	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
38060	492	6	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
1548	501	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	k < $.maxIter
1548	501	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	$.performTest
1548	501	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	j <= $.maxChecks
1548	501	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	RET	$ <= maxChecks
1548	501	6	GraggBulirschStoerIntegrator.java	tryStep	k	int	0	RET	$ < maxIter
38061	503	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < y0.$.length
38061	503	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < y0.length
38061	503	8	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	l < $.length
38062	508	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < y0.$.length
38062	508	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < y0.length
38062	508	8	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	l < $.length
1549	512	8	GraggBulirschStoerIntegrator.java	tryStep	initialNorm	double	0	RET	deltaNorm > 4 * Math.max(1.0e-15, $)
1549	512	8	GraggBulirschStoerIntegrator.java	tryStep	deltaNorm	double	0	RET	$ > 4 * Math.max(1.0e-15, initialNorm)
38063	520	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
38063	520	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
38063	520	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
38064	539	4	GraggBulirschStoerIntegrator.java	extrapolate	j	int	0	NIL-FOR	$ < k
38064	539	4	GraggBulirschStoerIntegrator.java	extrapolate	k	int	0	NIL-FOR	j < $
38065	540	6	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
38065	540	6	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
38065	540	6	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
38066	548	4	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
38066	548	4	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
38066	548	4	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
38067	573	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length-1
38067	573	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length-1
38068	579	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length
38068	579	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length
38069	586	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < $.sequence[k]
38069	586	6	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < sequence[k]
38069	586	6	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	l < sequence[$]
1550	592	4	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1550	592	4	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
1551	598	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
38070	601	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < yMidDots.$.length
38070	601	6	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < yMidDots.length
38070	601	6	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	0	NIL-FOR	j < $.length
1552	622	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
1552	622	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
38071	643	4	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
1553	648	6	GraggBulirschStoerIntegrator.java	integrate	newStep	boolean	0	DEF	$
1554	653	8	GraggBulirschStoerIntegrator.java	integrate	firstStepAlreadyComputed	boolean	0	DEF	$
1555	657	8	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1556	663	10	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1557	676	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize > t
1557	676	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize < t
1557	676	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1557	676	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1557	676	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
1557	676	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
38072	685	6	GraggBulirschStoerIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
1558	690	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.tryStep($.stepStart, y, $.stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1558	690	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	tryStep(stepStart, y, stepSize, $, scale, fk[$], ($ == 0) ? yMidDots[0] : diagonal[$-1], ($ == 0) ? y1 : y1Diag[$-1], yTmp)
1558	690	8	GraggBulirschStoerIntegrator.java	integrate	y1	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? $ : y1Diag[k-1], yTmp)
1558	690	8	GraggBulirschStoerIntegrator.java	integrate	yTmp	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], $)
1558	690	8	GraggBulirschStoerIntegrator.java	integrate	diagonal	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : $[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1558	690	8	GraggBulirschStoerIntegrator.java	integrate	y1Diag	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : $[k-1], yTmp)
1558	690	8	GraggBulirschStoerIntegrator.java	integrate	fk	double[][][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, $[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1558	690	8	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? $[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1558	690	8	GraggBulirschStoerIntegrator.java	integrate	scale	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, $, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1558	690	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	1	DEF	tryStep(stepStart, $, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1559	703	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 0
38073	712	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < y0.$.length
38073	712	12	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
38073	712	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
1560	718	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > 1.0e15
1560	718	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > maxError
1560	718	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ > 1
1560	718	12	GraggBulirschStoerIntegrator.java	integrate	maxError	double	1	DEF	error > $
1561	739	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1561	739	16	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
1562	742	18	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1563	751	20	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
1563	751	20	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
1564	757	22	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1564	757	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1564	757	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1565	769	16	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1566	777	18	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
1566	777	18	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
1567	782	20	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1567	782	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1567	782	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1568	793	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > 1.0
1569	795	18	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1569	795	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1569	795	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1570	806	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ <= 1.0
1570	806	16	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1570	806	16	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1571	820	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.denseOutput
1571	820	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
38074	823	8	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
38074	823	8	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
38075	832	8	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < mu
38075	832	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	NIL-FOR	l < $
38076	838	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
38076	838	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
38076	838	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
38077	841	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k - l2
38077	841	10	GraggBulirschStoerIntegrator.java	integrate	l2	int	0	NIL-FOR	j <= k - $
38077	841	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $ - l2
38078	844	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
38078	844	12	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
38078	844	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
38079	849	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
38079	849	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
38079	849	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
38080	854	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
38080	854	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
38081	855	12	GraggBulirschStoerIntegrator.java	integrate	m	int	0	NIL-FOR	$ >= 2 * (l + 1)
38081	855	12	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	m >= 2 * ($ + 1)
38082	856	14	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
38082	856	14	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
38082	856	14	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
1572	864	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	DEF	$ >= 0
1573	871	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.useInterpolationError
1574	876	12	GraggBulirschStoerIntegrator.java	integrate	interpError	double	0	DEF	$ > 10.0
1575	883	10	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1576	885	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.evaluateStep(interpolator)
1576	885	12	GraggBulirschStoerIntegrator.java	integrate	interpolator	AbstractStepInterpolator	0	DEF	eventsHandlersManager.evaluateStep($)
1577	887	16	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	Math.abs(dt) > Math.ulp($.stepStart)
1577	887	16	GraggBulirschStoerIntegrator.java	integrate	dt	double	0	DEF	Math.abs($) > Math.ulp(stepStart)
1578	897	8	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1579	905	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1580	912	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.stop()
1581	923	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.reset($.stepStart, y)
1581	923	8	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1581	923	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	eventsHandlersManager.reset(stepStart, $)
1582	930	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ == 1
1583	932	10	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
1584	935	15	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ <= targetIter
1584	935	15	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k <= $
1585	937	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k-1] < $.orderControl1 * $.costPerTimeUnit[k]
1585	937	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1586	939	17	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
1586	939	17	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
1587	944	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k-2] < $.orderControl1 * $.costPerTimeUnit[k-1]
1587	944	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 2
1587	944	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$-2] < orderControl1 * costPerTimeUnit[$-1]
1588	948	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[optimalIter]
1588	948	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	0	DEF	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[$]
1588	948	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[optimalIter]
1589	953	8	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	1	DEF	$
1590	960	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	1	DEF	$ <= k
1590	960	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	optimalIter <= $
1591	963	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
1591	963	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
1591	963	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ < targetIter
1591	963	12	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k < $
1592	982	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1593	988	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	1	DEF	$
1622	165	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	1	DEF	interpolator.$.polynoms == null
1622	165	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	interpolator	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms == null
38114	170	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.polynoms.$.length
38114	170	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	i	int	0	NIL-FOR	$ < polynoms.length
1623	187	4	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ < 0
1624	194	6	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms != null
38115	196	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
38115	196	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
38115	196	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
38116	200	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
38116	200	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
38116	200	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
1625	207	6	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ <= 4
38117	211	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.errfac.$.length
38117	211	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < errfac.length
38118	215	10	GraggBulirschStoerStepInterpolator.java	resetTables	j	int	0	NIL-FOR	$ <= i
38118	215	10	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	j <= $
1626	240	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms == null
1626	240	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms.$.length <= (mu + 4)
1626	240	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	polynoms.length <= ($ + 4)
38119	246	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
38119	246	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	i	int	0	NIL-FOR	$ < currentState.length
1627	259	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	RET	$ < 0
1628	267	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 0
1629	271	8	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 1
1630	275	10	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 2
38120	279	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	j	int	0	NIL-FOR	$ <= mu
38120	279	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	NIL-FOR	j <= $
1631	299	4	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree >= 5
38121	300	6	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
38121	300	6	GraggBulirschStoerStepInterpolator.java	estimateError	i	int	0	NIL-FOR	$ < currentState.length
38122	326	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < dimension
38122	326	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	dimension	int	0	NIL-FOR	i < $
1632	335	8	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree > 3
38123	338	12	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ > 3
1633	349	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.h == 0
38124	369	4	GraggBulirschStoerStepInterpolator.java	writeExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
38124	369	4	GraggBulirschStoerStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ <= currentDegree
38125	370	6	GraggBulirschStoerStepInterpolator.java	writeExternal	l	int	0	NIL-FOR	$ < dimension
38125	370	6	GraggBulirschStoerStepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	l < $
38126	391	4	GraggBulirschStoerStepInterpolator.java	readExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
38126	391	4	GraggBulirschStoerStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ <= currentDegree
38127	392	6	GraggBulirschStoerStepInterpolator.java	readExternal	l	int	0	NIL-FOR	$ < dimension
38127	392	6	GraggBulirschStoerStepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	l < $
37670	167	8	HarmonicCoefficientsGuesser.java	sortObservations	THIS	HarmonicCoefficientsGuesser	0	NIL-FOR	j < $.observations.$.length
37670	167	8	HarmonicCoefficientsGuesser.java	sortObservations	j	int	0	NIL-FOR	$ < observations.length
989	170	12	HarmonicCoefficientsGuesser.java	sortObservations	prec	WeightedObservedPoint	0	DEF	curr.getX() < $.getX()
989	170	12	HarmonicCoefficientsGuesser.java	sortObservations	curr	WeightedObservedPoint	0	DEF	$.getX() < prec.getX()
37671	174	16	HarmonicCoefficientsGuesser.java	sortObservations	i	int	0	NIL-WHILE	$ >= 0
37671	174	16	HarmonicCoefficientsGuesser.java	sortObservations	mI	WeightedObservedPoint	0	NIL-WHILE	curr.getX() < $.getX()
37671	174	16	HarmonicCoefficientsGuesser.java	sortObservations	curr	WeightedObservedPoint	0	NIL-WHILE	$.getX() < mI.getX()
990	176	20	HarmonicCoefficientsGuesser.java	sortObservations	i	int	1	DEF	$-- != 0
37672	208	8	HarmonicCoefficientsGuesser.java	guessAOmega	THIS	HarmonicCoefficientsGuesser	0	NIL-FOR	i < $.observations.$.length
37672	208	8	HarmonicCoefficientsGuesser.java	guessAOmega	i	int	0	NIL-FOR	$ < observations.length
991	240	8	HarmonicCoefficientsGuesser.java	guessAOmega	c1	double	0	OptimizationException	$ / c2 < 0.0
991	240	8	HarmonicCoefficientsGuesser.java	guessAOmega	c2	double	0	OptimizationException	$ / c3 < 0.0
991	240	8	HarmonicCoefficientsGuesser.java	guessAOmega	c2	double	0	OptimizationException	c1 / $ < 0.0
991	240	8	HarmonicCoefficientsGuesser.java	guessAOmega	c3	double	0	OptimizationException	c2 / $ < 0.0
37673	258	8	HarmonicCoefficientsGuesser.java	guessPhi	THIS	HarmonicCoefficientsGuesser	0	NIL-FOR	i < $.observations.$.length
37673	258	8	HarmonicCoefficientsGuesser.java	guessPhi	i	int	0	NIL-FOR	$ < observations.length
987	82	12	HarmonicFitter.java	fit	THIS	HarmonicFitter	0	OptimizationException	$.parameters == null
988	84	16	HarmonicFitter.java	fit	THIS	HarmonicFitter	0	OptimizationException	observations.$.length < 4
988	84	16	HarmonicFitter.java	fit	observations	WeightedObservedPoint[]	0	OptimizationException	$.length < 4
38152	111	4	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	j < y0.$.length
38152	111	4	HighamHall54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
38152	111	4	HighamHall54Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
38153	113	6	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	l < STATIC_E.$.length
38153	113	6	HighamHall54Integrator.java	estimateError	l	int	0	NIL-FOR	$ < STATIC_E.length
38151	89	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
38151	89	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
490	56	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	DEF	numberOfSuccesses > $
490	56	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	numberOfSuccesses	int	0	DEF	$ > populationSize
491	62	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	DEF	sampleSize > $
491	62	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	sampleSize	int	0	DEF	$ > populationSize
492	88	8	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x < $[0]
492	88	8	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < domain[0]
493	90	15	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x >= $[1]
493	90	15	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= domain[1]
494	206	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x < $[0]
494	206	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x > $[1]
494	206	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ < domain[0]
494	206	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ > domain[1]
495	246	8	HypergeometricDistributionImpl.java	setNumberOfSuccesses	num	int	0	DEF	$ < 0
496	260	8	HypergeometricDistributionImpl.java	setPopulationSize	size	int	0	DEF	$ <= 0
497	274	8	HypergeometricDistributionImpl.java	setSampleSize	size	int	0	DEF	$ < 0
498	296	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x < $[0]
498	296	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ < domain[0]
499	298	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x > $[1]
499	298	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ > domain[1]
36765	324	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x0	int	0	NIL-WHILE	$ != x1
36765	324	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x1	int	0	NIL-WHILE	x0 != $
37842	61	8	KMeansPlusPlusClusterer.java	cluster	count	int	0	NIL-FOR	$ < max
37842	61	8	KMeansPlusPlusClusterer.java	cluster	max	int	0	NIL-FOR	count < $
1280	66	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	0	DEF	newCenter.equals($.cluster.getCenter())
1280	66	16	KMeansPlusPlusClusterer.java	cluster	newCenter	T	0	DEF	$.equals(cluster.getCenter())
1281	71	12	KMeansPlusPlusClusterer.java	cluster	clusteringChanged	boolean	0	RET	$
37843	115	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	NIL-WHILE	$.size() < k
37843	115	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	NIL-WHILE	resultSet.size() < $
37844	119	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < pointSet.size()
37844	119	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	pointSet	List<T>	0	NIL-FOR	i < $.size()
37845	130	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	THIS	KMeansPlusPlusClusterer	0	NIL-FOR	i < dx2.$.length
37845	130	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < dx2.length
37845	130	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	dx2	double[]	0	NIL-FOR	i < $.length
1282	131	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	dx2[$] >= r
1282	131	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	r	double	0	DEF	dx2[i] >= $
1282	131	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	dx2	double[]	0	DEF	$[i] >= r
1283	157	12	KMeansPlusPlusClusterer.java	getNearestCluster	distance	double	0	DEF	$ < minDistance
1283	157	12	KMeansPlusPlusClusterer.java	getNearestCluster	minDistance	double	0	DEF	distance < $
1178	94	8	Kurtosis.java	increment	THIS	Kurtosis	1	DEF	$.incMoment
1179	108	8	Kurtosis.java	getResult	THIS	Kurtosis	0	DEF	$.moment.getN() > 3
1180	110	16	Kurtosis.java	getResult	THIS	Kurtosis	1	DEF	$.moment.$.n <= 3
1180	110	16	Kurtosis.java	getResult	variance	double	1	DEF	$ < 10E-20
1181	128	8	Kurtosis.java	clear	THIS	Kurtosis	1	DEF	$.incMoment
1182	166	8	Kurtosis.java	evaluate	THIS	Kurtosis	0	DEF	$.test(values, begin, length)
1182	166	8	Kurtosis.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1182	166	8	Kurtosis.java	evaluate	begin	int	0	DEF	test(values, $, length)
1182	166	8	Kurtosis.java	evaluate	length	int	0	DEF	test(values, begin, $)
1182	166	8	Kurtosis.java	evaluate	length	int	0	DEF	$ > 3
37820	177	12	Kurtosis.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
37820	177	12	Kurtosis.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
37820	177	12	Kurtosis.java	evaluate	length	int	0	NIL-FOR	i < begin + $
944	80	8	LUDecompositionImpl.java	LUDecompositionImpl	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
37616	92	8	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
37616	92	8	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
37617	99	8	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	$ < m
37617	99	8	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	col < $
37618	104	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < col
37618	104	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	row < $
37619	107	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < row
37619	107	16	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	i < $
37620	116	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
37620	116	12	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
37621	119	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < col
37621	119	16	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	i < $
945	125	16	LUDecompositionImpl.java	LUDecompositionImpl	sum	double	0	DEF	Math.abs($) > largest
945	125	16	LUDecompositionImpl.java	LUDecompositionImpl	largest	double	0	DEF	Math.abs(sum) > $
946	132	12	LUDecompositionImpl.java	LUDecompositionImpl	THIS	LUDecompositionImpl	0	RET	Math.abs($.lu[max][col]) < singularityThreshold
946	132	12	LUDecompositionImpl.java	LUDecompositionImpl	max	int	0	RET	Math.abs(lu[$][col]) < singularityThreshold
946	132	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	RET	Math.abs(lu[max][$]) < singularityThreshold
946	132	12	LUDecompositionImpl.java	LUDecompositionImpl	singularityThreshold	double	0	RET	Math.abs(lu[max][col]) < $
947	138	12	LUDecompositionImpl.java	LUDecompositionImpl	max	int	0	DEF	$ != col
947	138	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	DEF	max != $
37622	142	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < m
37622	142	16	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	i < $
37623	155	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
37623	155	12	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
948	164	8	LUDecompositionImpl.java	getL	THIS	LUDecompositionImpl	0	DEF	$.singular
948	164	8	LUDecompositionImpl.java	getL	THIS	LUDecompositionImpl	0	DEF	$.cachedL == null
37624	167	12	LUDecompositionImpl.java	getL	i	int	0	NIL-FOR	$ < m
37624	167	12	LUDecompositionImpl.java	getL	m	int	0	NIL-FOR	i < $
37625	169	16	LUDecompositionImpl.java	getL	j	int	0	NIL-FOR	$ < i
37625	169	16	LUDecompositionImpl.java	getL	i	int	0	NIL-FOR	j < $
949	180	8	LUDecompositionImpl.java	getU	THIS	LUDecompositionImpl	0	DEF	$.singular
949	180	8	LUDecompositionImpl.java	getU	THIS	LUDecompositionImpl	0	DEF	$.cachedU == null
37626	183	12	LUDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < m
37626	183	12	LUDecompositionImpl.java	getU	m	int	0	NIL-FOR	i < $
37627	185	16	LUDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < m
37627	185	16	LUDecompositionImpl.java	getU	m	int	0	NIL-FOR	j < $
950	195	8	LUDecompositionImpl.java	getP	THIS	LUDecompositionImpl	0	DEF	$.cachedP == null
950	195	8	LUDecompositionImpl.java	getP	THIS	LUDecompositionImpl	0	DEF	$.singular
37628	198	12	LUDecompositionImpl.java	getP	i	int	0	NIL-FOR	$ < m
37628	198	12	LUDecompositionImpl.java	getP	m	int	0	NIL-FOR	i < $
951	212	8	LUDecompositionImpl.java	getDeterminant	THIS	LUDecompositionImpl	1	RET	$.singular
37629	217	12	LUDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < m
37629	217	12	LUDecompositionImpl.java	getDeterminant	m	int	0	NIL-FOR	i < $
1771	60	8	LaguerreSolver.java	LaguerreSolver	f	UnivariateRealFunction	1	DEF	$ instanceof PolynomialFunction
1772	120	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1772	120	8	LaguerreSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1773	123	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1773	123	8	LaguerreSolver.java	solve	max	double	0	RET	f.value($) == 0.0
1774	126	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
1774	126	8	LaguerreSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
1775	132	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	1	RET	$.isBracketing(min, initial, f)
1775	132	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
1775	132	8	LaguerreSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
1775	132	8	LaguerreSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
1776	164	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	DEF	$ instanceof PolynomialFunction
1777	169	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1777	169	8	LaguerreSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1778	170	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1778	170	8	LaguerreSolver.java	solve	max	double	0	RET	f.value($) == 0.0
38180	175	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-FOR	i < coefficients.$.length
38180	175	8	LaguerreSolver.java	solve	i	int	0	NIL-FOR	$ < coefficients.length
38180	175	8	LaguerreSolver.java	solve	coefficients	double[]	0	NIL-FOR	i < $.length
1779	180	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.isRootOK(min, max, z)
1779	180	8	LaguerreSolver.java	solve	z	Complex	0	RET	isRootOK(min, max, $)
1779	180	8	LaguerreSolver.java	solve	min	double	0	RET	isRootOK($, max, z)
1779	180	8	LaguerreSolver.java	solve	max	double	0	RET	isRootOK(min, $, z)
38181	187	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-FOR	i < root.$.length
38181	187	8	LaguerreSolver.java	solve	i	int	0	NIL-FOR	$ < root.length
38181	187	8	LaguerreSolver.java	solve	root	Complex[]	0	NIL-FOR	i < $.length
1780	188	12	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.isRootOK(min, max, root[i])
1780	188	12	LaguerreSolver.java	solve	i	int	0	RET	isRootOK(min, max, root[$])
1780	188	12	LaguerreSolver.java	solve	root	Complex[]	0	RET	isRootOK(min, max, $[i])
1780	188	12	LaguerreSolver.java	solve	min	double	0	RET	isRootOK($, max, root[i])
1780	188	12	LaguerreSolver.java	solve	max	double	0	RET	isRootOK(min, $, root[i])
38182	232	8	LaguerreSolver.java	solveAll	THIS	LaguerreSolver	0	NIL-FOR	i < c.$.length
38182	232	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ < c.length
38182	232	8	LaguerreSolver.java	solveAll	c	Complex[]	0	NIL-FOR	i < $.length
1781	256	8	LaguerreSolver.java	solveAll	n	int	0	DEF	$ < 1
38183	261	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ <= n
38183	261	8	LaguerreSolver.java	solveAll	n	int	0	NIL-FOR	i <= $
38184	267	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ < n
38184	267	8	LaguerreSolver.java	solveAll	n	int	0	NIL-FOR	i < $
38185	274	12	LaguerreSolver.java	solveAll	j	int	0	NIL-FOR	$ >= 0
1782	304	8	LaguerreSolver.java	solve	n	int	0	DEF	$ < 1
38186	322	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-WHILE	i <= $.maximalIterationCount
38186	322	8	LaguerreSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
38187	328	12	LaguerreSolver.java	solve	j	int	0	NIL-FOR	$ >= 0
1783	338	12	LaguerreSolver.java	solve	tolerance	double	0	RET	(z.subtract(oldz)).abs() <= $
1783	338	12	LaguerreSolver.java	solve	z	Complex	0	RET	($.subtract(oldz)).abs() <= tolerance
1783	338	12	LaguerreSolver.java	solve	oldz	Complex	0	RET	(z.subtract($)).abs() <= tolerance
1784	343	12	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	pv.abs() <= $.functionValueAccuracy
1784	343	12	LaguerreSolver.java	solve	pv	Complex	0	RET	$.abs() <= functionValueAccuracy
1785	361	12	LaguerreSolver.java	solve	denominator	Complex	1	DEF	$.equals(new Complex(0.0, 0.0))
1031	114	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DEF	observations.$.length != weights.$.length
1031	114	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DEF	$.length != weights.length
1031	114	8	LeastSquaresConverter.java	LeastSquaresConverter	weights	double[]	0	DEF	observations.length != $.length
1032	147	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DEF	observations.$.length != scale.getColumnDimension()
1032	147	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DEF	$.length != scale.getColumnDimension()
1032	147	8	LeastSquaresConverter.java	LeastSquaresConverter	scale	RealMatrix	0	DEF	observations.length != $.getColumnDimension()
1033	163	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	FunctionEvaluationException	residuals.$.length != $.observations.$.length
1033	163	8	LeastSquaresConverter.java	value	residuals	double[]	0	FunctionEvaluationException	$.length != observations.length
37695	167	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
37695	167	8	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
37695	167	8	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1034	173	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.weights != null
37696	174	12	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
37696	174	12	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
37696	174	12	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1035	178	15	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.scale != null
38221	175	8	LegendreGaussIntegrator.java	integrate	THIS	LegendreGaussIntegrator	0	NIL-FOR	i < $.maximalIterationCount
38221	175	8	LegendreGaussIntegrator.java	integrate	i	int	0	NIL-FOR	$ < maximalIterationCount
1856	187	12	LegendreGaussIntegrator.java	integrate	THIS	LegendreGaussIntegrator	0	RET	i + 1 >= $.minimalIterationCount
1856	187	12	LegendreGaussIntegrator.java	integrate	delta	double	0	RET	$ <= limit
1856	187	12	LegendreGaussIntegrator.java	integrate	limit	double	0	RET	delta <= $
1856	187	12	LegendreGaussIntegrator.java	integrate	i	int	0	RET	$ + 1 >= minimalIterationCount
38222	224	8	LegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
38222	224	8	LegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
38223	225	12	LegendreGaussIntegrator.java	stage	THIS	LegendreGaussIntegrator	0	NIL-FOR	j < $.abscissas.$.length
38223	225	12	LegendreGaussIntegrator.java	stage	j	int	0	NIL-FOR	$ < abscissas.length
37956	285	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.solvedCols
37956	285	6	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < solvedCols
1448	290	6	LevenbergMarquardtEstimator.java	estimate	firstIteration	boolean	0	DEF	$
37957	295	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
37957	295	8	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < cols
1449	297	10	LevenbergMarquardtEstimator.java	estimate	dk	double	0	DEF	$ == 0
1450	313	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	$.cost != 0
37958	314	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
37958	314	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1451	317	10	LevenbergMarquardtEstimator.java	estimate	s	double	0	DEF	$ != 0
37959	320	12	LevenbergMarquardtEstimator.java	estimate	i	int	0	NIL-FOR	$ <= j
37959	320	12	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	i <= $
1452	328	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	maxCosine <= $.orthoTolerance
1452	328	6	LevenbergMarquardtEstimator.java	estimate	maxCosine	double	0	RET	$ <= orthoTolerance
37960	333	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.cols
37960	333	6	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < cols
37961	338	6	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	NIL-FOR	$ < 1.0e-4
37962	341	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
37962	341	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
37963	355	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
37963	355	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1453	365	8	LevenbergMarquardtEstimator.java	estimate	firstIteration	boolean	0	DEF	$
1454	374	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	0.1 * $.cost < previousCost
1454	374	8	LevenbergMarquardtEstimator.java	estimate	previousCost	double	0	DEF	0.1 * cost < $
37964	381	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
37964	381	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
37965	386	10	LevenbergMarquardtEstimator.java	estimate	i	int	0	NIL-FOR	$ <= j
37965	386	10	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	i <= $
37966	392	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
37966	392	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1455	405	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	DEF	$ <= 0.25
1456	408	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	0.1 * $.cost >= previousCost
1456	408	10	LevenbergMarquardtEstimator.java	estimate	tmp	double	0	DEF	$ < 0.1
1456	408	10	LevenbergMarquardtEstimator.java	estimate	previousCost	double	0	DEF	0.1 * cost >= $
1457	413	15	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
1457	413	15	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	DEF	$ >= 0.75
1458	419	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	DEF	$ >= 1.0e-4
37967	423	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
37967	423	10	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < cols
37968	431	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
37968	431	10	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1459	441	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	preRed <= $.costRelativeTolerance
1459	441	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	delta <= $.parRelativeTolerance * xNorm
1459	441	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	Math.abs(actRed) <= $.costRelativeTolerance
1459	441	8	LevenbergMarquardtEstimator.java	estimate	actRed	double	0	RET	Math.abs($) <= costRelativeTolerance
1459	441	8	LevenbergMarquardtEstimator.java	estimate	preRed	double	0	RET	$ <= costRelativeTolerance
1459	441	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	RET	$ <= 2.0
1459	441	8	LevenbergMarquardtEstimator.java	estimate	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
1459	441	8	LevenbergMarquardtEstimator.java	estimate	xNorm	double	0	RET	delta <= parRelativeTolerance * $
1460	450	8	LevenbergMarquardtEstimator.java	estimate	actRed	double	1	EstimationException	Math.abs($) <= 2.2204e-16
1460	450	8	LevenbergMarquardtEstimator.java	estimate	preRed	double	1	EstimationException	$ <= 2.2204e-16
1460	450	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	EstimationException	$ <= 2.0
1461	455	15	LevenbergMarquardtEstimator.java	estimate	delta	double	1	EstimationException	$ <= 2.2204e-16 * xNorm
1461	455	15	LevenbergMarquardtEstimator.java	estimate	xNorm	double	1	EstimationException	delta <= 2.2204e-16 * $
1462	460	15	LevenbergMarquardtEstimator.java	estimate	maxCosine	double	0	EstimationException	$ <= 2.2204e-16
37969	499	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.rank
37969	499	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
37970	502	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.cols
37970	502	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < cols
37971	505	4	LevenbergMarquardtEstimator.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
37972	509	6	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
37972	509	6	LevenbergMarquardtEstimator.java	determineLMParameter	k	int	0	NIL-FOR	i < $
37973	519	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
37973	519	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1463	527	4	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
1463	527	4	LevenbergMarquardtEstimator.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1464	537	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.rank == $.solvedCols
37974	538	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
37974	538	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
37975	543	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
37975	543	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
37976	547	8	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
37976	547	8	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	i < $
37977	560	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
37977	560	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
37978	564	6	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
37978	564	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1465	573	4	LevenbergMarquardtEstimator.java	determineLMParameter	paru	double	0	DEF	$ == 0
1466	581	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
37979	585	4	LevenbergMarquardtEstimator.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1467	588	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
37980	592	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
37980	592	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
37981	599	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
37981	599	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1468	611	6	LevenbergMarquardtEstimator.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1468	611	6	LevenbergMarquardtEstimator.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1468	611	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1468	611	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	Math.abs($) <= 0.1 * delta
1468	611	6	LevenbergMarquardtEstimator.java	determineLMParameter	parl	double	0	RET	$ == 0
1468	611	6	LevenbergMarquardtEstimator.java	determineLMParameter	delta	double	0	RET	Math.abs(fp) <= 0.1 * $
37982	617	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
37982	617	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
37983	621	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
37983	621	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
37984	625	8	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
37984	625	8	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
37985	630	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
37985	630	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1469	637	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	1	DEF	$ > 0
1470	639	13	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	DEF	$ < 0
37986	674	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
37986	674	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
37987	676	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
37987	676	6	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
37988	684	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
37988	684	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1471	690	6	LevenbergMarquardtEstimator.java	determineLMDirection	dpj	double	0	DEF	$ != 0
37989	699	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.solvedCols
37989	699	6	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
1472	704	8	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1472	704	8	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1473	709	10	LevenbergMarquardtEstimator.java	determineLMDirection	rkk	double	1	DEF	Math.abs($) < Math.abs(lmDiag[k])
1473	709	10	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	1	DEF	Math.abs(rkk) < Math.abs(lmDiag[$])
1473	709	10	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	1	DEF	Math.abs(rkk) < Math.abs($[k])
37990	727	10	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
37990	727	10	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
37991	748	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
37991	748	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1474	749	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	DEF	nSing == $.solvedCols
1474	749	6	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1474	749	6	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1474	749	6	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1475	752	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	DEF	nSing < $.solvedCols
1475	752	6	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1476	756	4	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ > 0
37992	757	6	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
37993	760	8	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
37993	760	8	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
37994	768	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.lmDir.$.length
37994	768	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
37995	799	4	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
37995	799	4	LevenbergMarquardtEstimator.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
37996	802	6	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
37996	802	6	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
37997	810	4	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
37997	810	4	LevenbergMarquardtEstimator.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
37998	815	6	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.cols
37998	815	6	LevenbergMarquardtEstimator.java	qrDecomposition	i	int	0	NIL-FOR	$ < cols
37999	818	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
37999	818	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
1477	822	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	EstimationException	Double.isInfinite($)
1477	822	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	EstimationException	Double.isNaN($)
1478	827	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1478	827	8	LevenbergMarquardtEstimator.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1479	832	6	LevenbergMarquardtEstimator.java	qrDecomposition	ak2	double	0	RET	$ == 0
38000	852	6	LevenbergMarquardtEstimator.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
38001	855	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
38001	855	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
38002	859	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
38002	859	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
38003	876	4	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
38003	876	4	LevenbergMarquardtEstimator.java	qTy	k	int	0	NIL-FOR	$ < cols
38004	881	6	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.rows
38004	881	6	LevenbergMarquardtEstimator.java	qTy	i	int	0	NIL-FOR	$ < rows
38005	887	6	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.rows
38005	887	6	LevenbergMarquardtEstimator.java	qTy	i	int	0	NIL-FOR	$ < rows
37698	251	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
37698	251	12	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
1037	256	12	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
37699	261	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
37699	261	16	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
1038	263	20	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
1039	279	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.cost != 0
37700	280	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
37700	280	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1040	283	20	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
37701	285	24	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
37701	285	24	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
1041	292	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
1041	292	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
37702	298	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
37702	298	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
37703	303	12	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
37704	306	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
37704	306	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
37705	320	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
37705	320	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1042	330	16	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
1043	339	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost < previousCost
1043	339	16	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost < $
37706	346	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
37706	346	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
37707	350	20	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
37707	350	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
37708	355	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
37708	355	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1044	368	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
1045	371	24	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost >= previousCost
1045	371	24	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
1045	371	24	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost >= $
1046	376	23	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
1046	376	23	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
1047	382	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ >= 1.0e-4
37709	386	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
37709	386	20	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
37710	394	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
37710	394	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1048	404	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	Math.abs(actRed) <= $.costRelativeTolerance
1048	404	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
1048	404	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
1048	404	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	Math.abs($) <= costRelativeTolerance
1048	404	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
1048	404	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
1048	404	16	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
1048	404	16	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
1049	413	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	OptimizationException	Math.abs($) <= 2.2204e-16
1049	413	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	OptimizationException	$ <= 2.2204e-16
1049	413	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	OptimizationException	$ <= 2.0
1050	418	23	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	OptimizationException	$ <= 2.2204e-16 * xNorm
1050	418	23	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	OptimizationException	delta <= 2.2204e-16 * $
1051	423	23	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	OptimizationException	$ <= 2.2204e-16
37711	462	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.rank
37711	462	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
37712	465	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
37712	465	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < cols
37713	468	8	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
37714	471	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
37714	471	12	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
37715	480	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
37715	480	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1052	488	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
1052	488	8	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1053	498	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.rank == $.solvedCols
37716	499	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
37716	499	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
37717	504	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
37717	504	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
37718	507	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
37718	507	16	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
37719	519	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
37719	519	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
37720	522	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
37720	522	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1054	530	8	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
1055	538	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
37721	542	8	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1056	545	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
37722	549	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
37722	549	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
37723	556	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
37723	556	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1057	568	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1057	568	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1057	568	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1057	568	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	Math.abs($) <= 0.1 * delta
1057	568	12	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
1057	568	12	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	Math.abs(fp) <= 0.1 * $
37724	574	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
37724	574	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
37725	578	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
37725	578	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
37726	582	16	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
37726	582	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
37727	587	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
37727	587	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1058	594	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
1059	596	19	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
37728	631	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
37728	631	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
37729	633	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
37729	633	12	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
37730	641	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
37730	641	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1060	647	12	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
37731	656	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
37731	656	12	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
1061	661	16	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1061	661	16	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1062	666	20	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	Math.abs($) < Math.abs(lmDiag[k])
1062	666	20	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	Math.abs(rkk) < Math.abs(lmDiag[$])
1062	666	20	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	Math.abs(rkk) < Math.abs($[k])
37732	684	20	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
37732	684	20	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
37733	704	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
37733	704	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1063	705	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing == $.solvedCols
1063	705	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1063	705	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1063	705	12	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1064	708	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing < $.solvedCols
1064	708	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1065	712	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
37734	713	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
37735	716	16	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
37735	716	16	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
37736	724	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
37736	724	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
37737	755	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
37737	755	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
37738	758	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.jacobian.$.length
37738	758	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < jacobian.length
37739	766	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
37739	766	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
37740	771	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.cols
37740	771	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < cols
37741	773	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.jacobian.$.length
37741	773	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < jacobian.length
1066	777	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	OptimizationException	Double.isInfinite($)
1066	777	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	OptimizationException	Double.isNaN($)
1067	782	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1067	782	16	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1068	787	12	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ == 0
37742	806	12	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
37743	808	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.jacobian.$.length
37743	808	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < jacobian.length
37744	812	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.jacobian.$.length
37744	812	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < jacobian.length
37745	829	8	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
37745	829	8	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < cols
37746	832	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
37746	832	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
37747	836	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
37747	836	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
37675	128	8	LinearConstraint.java	LinearConstraint	THIS	LinearConstraint	0	NIL-FOR	i < sub.$.length
37675	128	8	LinearConstraint.java	LinearConstraint	i	int	0	NIL-FOR	$ < sub.length
37675	128	8	LinearConstraint.java	LinearConstraint	sub	double[]	0	NIL-FOR	i < $.length
994	191	6	LinearConstraint.java	equals	THIS	LinearConstraint	0	RET	$ == other
994	191	6	LinearConstraint.java	equals	other	Object	0	RET	this == $
995	195	6	LinearConstraint.java	equals	other	Object	0	RET	$ == null
1008	108	6	LinearObjectiveFunction.java	equals	THIS	LinearObjectiveFunction	0	RET	$ == other
1008	108	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	this == $
1009	112	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	$ == null
1418	45	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	IllegalArgumentException	$.size() > populationLimit
1418	45	8	ListPopulation.java	ListPopulation	populationLimit	int	0	IllegalArgumentException	chromosomes.size() > $
1419	48	8	ListPopulation.java	ListPopulation	populationLimit	int	0	IllegalArgumentException	$ < 0
1420	63	8	ListPopulation.java	ListPopulation	populationLimit	int	0	IllegalArgumentException	$ < 0
1421	102	12	ListPopulation.java	getFittestChromosome	THIS	ListPopulation	0	DEF	$.chromosome.compareTo(bestChromosome) > 0
1421	102	12	ListPopulation.java	getFittestChromosome	bestChromosome	Chromosome	0	DEF	chromosome.compareTo($) > 0
1707	144	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	MathException	$ < 0
1707	144	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	MathException	$ > 1
1708	149	8	LoessInterpolator.java	LoessInterpolator	robustnessIters	int	0	MathException	$ < 0
1709	197	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	MathException	xval.$.length != yval.$.length
1709	197	8	LoessInterpolator.java	smooth	xval	double[]	0	MathException	$.length != yval.length
1709	197	8	LoessInterpolator.java	smooth	yval	double[]	0	MathException	xval.length != $.length
1710	207	8	LoessInterpolator.java	smooth	n	int	0	MathException	$ == 0
1711	217	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 1
1712	221	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 2
1713	227	8	LoessInterpolator.java	smooth	bandwidthInPoints	int	0	MathException	$ < 2
38166	248	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	NIL-FOR	iter <= $.robustnessIters
38166	248	8	LoessInterpolator.java	smooth	iter	int	0	NIL-FOR	$ <= robustnessIters
38167	251	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
38167	251	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
1714	256	16	LoessInterpolator.java	smooth	i	int	0	DEF	$ > 0
1715	266	16	LoessInterpolator.java	smooth	ileft	int	1	DEF	xval[i] - xval[$] > xval[iright] - xval[i]
1715	266	16	LoessInterpolator.java	smooth	iright	int	1	DEF	xval[i] - xval[ileft] > xval[$] - xval[i]
1715	266	16	LoessInterpolator.java	smooth	i	int	1	DEF	xval[$] - xval[ileft] > xval[iright] - xval[$]
1715	266	16	LoessInterpolator.java	smooth	xval	double[]	1	DEF	$[i] - $[ileft] > $[iright] - $[i]
38168	285	16	LoessInterpolator.java	smooth	k	int	0	NIL-FOR	$ <= iright
38168	285	16	LoessInterpolator.java	smooth	iright	int	0	NIL-FOR	k <= $
1716	304	16	LoessInterpolator.java	smooth	THIS	LoessInterpolator	1	DEF	Math.sqrt(Math.abs(meanXSquared - meanX * meanX)) < $.accuracy
1716	304	16	LoessInterpolator.java	smooth	meanX	double	1	DEF	Math.sqrt(Math.abs(meanXSquared - $ * $)) < accuracy
1716	304	16	LoessInterpolator.java	smooth	meanXSquared	double	1	DEF	Math.sqrt(Math.abs($ - meanX * meanX)) < accuracy
1717	318	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	iter == $.robustnessIters
1717	318	12	LoessInterpolator.java	smooth	iter	int	0	DEF	$ == robustnessIters
1718	331	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	Math.abs(medianResidual) < $.accuracy
1718	331	12	LoessInterpolator.java	smooth	medianResidual	double	0	DEF	Math.abs($) < accuracy
38169	335	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
38169	335	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
1719	337	16	LoessInterpolator.java	smooth	arg	double	1	DEF	$ >= 1
1720	393	8	LoessInterpolator.java	updateBandwidthInterval	THIS	LoessInterpolator	0	DEF	right < xval.$.length - 1
1720	393	8	LoessInterpolator.java	updateBandwidthInterval	left	int	0	DEF	xval[right+1] - xval[i] < xval[i] - xval[$]
1720	393	8	LoessInterpolator.java	updateBandwidthInterval	right	int	0	DEF	xval[$+1] - xval[i] < xval[i] - xval[left]
1720	393	8	LoessInterpolator.java	updateBandwidthInterval	right	int	0	DEF	$ < xval.length - 1
1720	393	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	$[right+1] - $[i] < $[i] - $[left]
1720	393	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	right < $.length - 1
1720	393	8	LoessInterpolator.java	updateBandwidthInterval	i	int	0	DEF	xval[right+1] - xval[$] < xval[$] - xval[left]
38170	422	8	LoessInterpolator.java	checkAllFiniteReal	THIS	LoessInterpolator	0	NIL-FOR	i < values.$.length
38170	422	8	LoessInterpolator.java	checkAllFiniteReal	i	int	0	NIL-FOR	$ < values.length
38170	422	8	LoessInterpolator.java	checkAllFiniteReal	values	double[]	0	NIL-FOR	i < $.length
1721	424	12	LoessInterpolator.java	checkAllFiniteReal	x	double	0	MathException	Double.isNaN($)
1721	424	12	LoessInterpolator.java	checkAllFiniteReal	x	double	0	MathException	Double.isInfinite($)
38171	440	8	LoessInterpolator.java	checkStrictlyIncreasing	THIS	LoessInterpolator	0	NIL-FOR	i < xval.$.length
38171	440	8	LoessInterpolator.java	checkStrictlyIncreasing	i	int	0	NIL-FOR	$ < xval.length
38171	440	8	LoessInterpolator.java	checkStrictlyIncreasing	xval	double[]	0	NIL-FOR	i < $.length
1722	441	12	LoessInterpolator.java	checkStrictlyIncreasing	i	int	0	MathException	xval[$ - 1] >= xval[$]
1722	441	12	LoessInterpolator.java	checkStrictlyIncreasing	i	int	0	MathException	$ >= 1
1722	441	12	LoessInterpolator.java	checkStrictlyIncreasing	xval	double[]	0	MathException	$[i - 1] >= $[i]
0	112	12	MathException.java	translate	bundle	ResourceBundle	0	RET	$.getLocale().getLanguage().equals(locale.getLanguage())
0	112	12	MathException.java	translate	locale	Locale	0	RET	bundle.getLocale().getLanguage().equals($.getLanguage())
1344	104	12	MathRuntimeException.java	translate	bundle	ResourceBundle	0	RET	$.getLocale().getLanguage().equals(locale.getLanguage())
1344	104	12	MathRuntimeException.java	translate	locale	Locale	0	RET	bundle.getLocale().getLanguage().equals($.getLanguage())
70	97	8	MathUtils.java	addAndCheck	s	long	0	ArithmeticException	$ > Integer.MAX_VALUE
70	97	8	MathUtils.java	addAndCheck	s	long	0	ArithmeticException	$ < Integer.MIN_VALUE
71	130	8	MathUtils.java	addAndCheck	a	long	1	DEF	$ > b
71	130	8	MathUtils.java	addAndCheck	b	long	1	DEF	a > $
72	136	12	MathUtils.java	addAndCheck	a	long	1	ArithmeticException	$ < 0
73	137	16	MathUtils.java	addAndCheck	b	long	1	ArithmeticException	$ < 0
74	139	20	MathUtils.java	addAndCheck	a	long	1	DEF	Long.MIN_VALUE - b <= $
74	139	20	MathUtils.java	addAndCheck	b	long	1	DEF	Long.MIN_VALUE - $ <= a
75	153	16	MathUtils.java	addAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE - b
75	153	16	MathUtils.java	addAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE - $
76	190	8	MathUtils.java	binomialCoefficient	n	int	0	RET	$ == k
76	190	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 0
76	190	8	MathUtils.java	binomialCoefficient	k	int	0	RET	n == $
77	193	8	MathUtils.java	binomialCoefficient	n	int	0	RET	k == $ - 1
77	193	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == n - 1
77	193	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 1
78	197	8	MathUtils.java	binomialCoefficient	n	int	0	RET	k > $ / 2
78	197	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ > n / 2
79	206	8	MathUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 61
36725	209	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
36725	209	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
80	213	15	MathUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 66
36726	217	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
36726	217	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
36727	233	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
36727	233	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
81	266	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	$ == k
81	266	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 0
81	266	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	n == $
82	269	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	k == $ - 1
82	269	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == n - 1
82	269	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 1
83	272	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	k > $/2
83	272	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ > n/2
84	275	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	$ < 67
36728	280	8	MathUtils.java	binomialCoefficientDouble	i	int	0	NIL-FOR	$ <= k
36728	280	8	MathUtils.java	binomialCoefficientDouble	k	int	0	NIL-FOR	i <= $
85	307	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ == k
85	307	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	n == $
85	307	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 0
86	310	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	k == $ - 1
86	310	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == n - 1
86	310	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 1
87	318	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 67
88	326	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 1030
89	330	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	k > $ / 2
89	330	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ > n / 2
36729	340	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n
36729	340	8	MathUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $
36730	345	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= k
36730	345	8	MathUtils.java	binomialCoefficientLog	k	int	0	NIL-FOR	i <= $
90	360	8	MathUtils.java	checkBinomial	n	int	0	DEF	$ < k
90	360	8	MathUtils.java	checkBinomial	k	int	0	DEF	n < $
91	365	8	MathUtils.java	checkBinomial	n	int	0	DEF	$ < 0
92	383	8	MathUtils.java	compareTo	THIS	MathUtils	1	RET	$.equals(x, y, eps)
92	383	8	MathUtils.java	compareTo	x	double	1	RET	equals($, y, eps)
92	383	8	MathUtils.java	compareTo	y	double	1	RET	equals(x, $, eps)
92	383	8	MathUtils.java	compareTo	eps	double	1	RET	equals(x, y, $)
93	385	15	MathUtils.java	compareTo	x	double	0	RET	$ < y
93	385	15	MathUtils.java	compareTo	y	double	0	RET	x < $
94	453	8	MathUtils.java	equals	xInt	long	0	DEF	$ < 0
95	456	8	MathUtils.java	equals	yInt	long	0	DEF	$ < 0
96	474	8	MathUtils.java	equals	x	double[]	0	RET	$ == null
96	474	8	MathUtils.java	equals	y	double[]	0	RET	$ == null
97	477	8	MathUtils.java	equals	THIS	MathUtils	0	RET	x.$.length != y.$.length
97	477	8	MathUtils.java	equals	x	double[]	0	RET	$.length != y.length
97	477	8	MathUtils.java	equals	y	double[]	0	RET	x.length != $.length
36731	480	8	MathUtils.java	equals	THIS	MathUtils	0	NIL-FOR	i < x.$.length
36731	480	8	MathUtils.java	equals	i	int	0	NIL-FOR	$ < x.length
36731	480	8	MathUtils.java	equals	x	double[]	0	NIL-FOR	i < $.length
98	481	12	MathUtils.java	equals	THIS	MathUtils	0	RET	$.equals(x[i], y[i])
98	481	12	MathUtils.java	equals	i	int	0	RET	equals(x[$], y[$])
98	481	12	MathUtils.java	equals	x	double[]	0	RET	equals($[i], y[i])
98	481	12	MathUtils.java	equals	y	double[]	0	RET	equals(x[i], $[i])
99	511	8	MathUtils.java	factorial	n	int	0	DEF	$ < 0
100	516	8	MathUtils.java	factorial	n	int	0	ArithmeticException	$ > 20
101	544	8	MathUtils.java	factorialDouble	n	int	0	DEF	$ < 0
102	549	8	MathUtils.java	factorialDouble	n	int	0	RET	$ < 21
103	569	8	MathUtils.java	factorialLog	n	int	0	DEF	$ < 0
104	574	8	MathUtils.java	factorialLog	n	int	0	RET	$ < 21
36732	578	8	MathUtils.java	factorialLog	i	int	0	NIL-FOR	$ <= n
36732	578	8	MathUtils.java	factorialLog	n	int	0	NIL-FOR	i <= $
105	617	8	MathUtils.java	gcd	u	int	0	RET	$ == 0
105	617	8	MathUtils.java	gcd	v	int	0	RET	$ == 0
106	618	12	MathUtils.java	gcd	u	int	0	DEF	$ == Integer.MIN_VALUE
106	618	12	MathUtils.java	gcd	v	int	0	DEF	$ == Integer.MIN_VALUE
107	630	8	MathUtils.java	gcd	u	int	0	DEF	$ > 0
108	633	8	MathUtils.java	gcd	v	int	0	DEF	$ > 0
36733	638	8	MathUtils.java	gcd	u	int	0	NIL-WHILE	($ & 1) == 0
36733	638	8	MathUtils.java	gcd	v	int	0	NIL-WHILE	($ & 1) == 0
36733	638	8	MathUtils.java	gcd	k	int	0	NIL-WHILE	$ < 31
109	644	8	MathUtils.java	gcd	k	int	0	DEF	$ == 31
36734	654	8	MathUtils.java	gcd	t	int	0	NIL-DOWHILE	$ != 0
36735	657	12	MathUtils.java	gcd	t	int	0	NIL-WHILE	($ & 1) == 0
110	661	12	MathUtils.java	gcd	t	int	1	DEF	$ > 0
111	715	8	MathUtils.java	indicator	x	double	0	RET	Double.isNaN($)
112	729	8	MathUtils.java	indicator	x	float	0	RET	Float.isNaN($)
113	790	8	MathUtils.java	lcm	a	int	0	RET	$==0
113	790	8	MathUtils.java	lcm	b	int	0	RET	$==0
114	794	8	MathUtils.java	lcm	lcm	int	0	ArithmeticException	$ == Integer.MIN_VALUE
115	832	8	MathUtils.java	mulAndCheck	m	long	0	ArithmeticException	$ > Integer.MAX_VALUE
115	832	8	MathUtils.java	mulAndCheck	m	long	0	ArithmeticException	$ < Integer.MIN_VALUE
116	851	8	MathUtils.java	mulAndCheck	a	long	1	DEF	$ > b
116	851	8	MathUtils.java	mulAndCheck	b	long	1	DEF	a > $
117	855	12	MathUtils.java	mulAndCheck	a	long	1	ArithmeticException	$ < 0
118	856	16	MathUtils.java	mulAndCheck	b	long	1	ArithmeticException	$ < 0
119	858	20	MathUtils.java	mulAndCheck	a	long	1	DEF	$ >= Long.MAX_VALUE / b
119	858	20	MathUtils.java	mulAndCheck	b	long	1	DEF	a >= Long.MAX_VALUE / $
120	863	23	MathUtils.java	mulAndCheck	b	long	1	ArithmeticException	$ > 0
121	865	20	MathUtils.java	mulAndCheck	a	long	1	DEF	Long.MIN_VALUE / b <= $
121	865	20	MathUtils.java	mulAndCheck	b	long	1	DEF	Long.MIN_VALUE / $ <= a
122	875	19	MathUtils.java	mulAndCheck	a	long	1	ArithmeticException	$ > 0
123	880	16	MathUtils.java	mulAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE / b
123	880	16	MathUtils.java	mulAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE / $
124	913	8	MathUtils.java	nextAfter	d	double	1	RET	Double.isNaN($)
124	913	8	MathUtils.java	nextAfter	d	double	1	RET	Double.isInfinite($)
125	915	15	MathUtils.java	nextAfter	d	double	0	RET	$ == 0
126	927	8	MathUtils.java	nextAfter	d	double	1	RET	$ * (direction - $) >= 0
126	927	8	MathUtils.java	nextAfter	direction	double	1	RET	d * ($ - d) >= 0
127	929	16	MathUtils.java	nextAfter	mantissa	long	1	RET	$ == 0x000fffffffffffffL
128	938	16	MathUtils.java	nextAfter	mantissa	long	1	RET	$ == 0L
129	962	8	MathUtils.java	scalb	d	double	0	RET	Double.isInfinite($)
129	962	8	MathUtils.java	scalb	d	double	0	RET	Double.isNaN($)
129	962	8	MathUtils.java	scalb	d	double	0	RET	$ == 0
130	1022	9	MathUtils.java	normalizeArray	normalizedSum	double	0	DEF	Double.isInfinite($)
131	1026	9	MathUtils.java	normalizeArray	normalizedSum	double	0	DEF	Double.isNaN($)
36736	1033	9	MathUtils.java	normalizeArray	i	int	0	NIL-FOR	$ < len
36736	1033	9	MathUtils.java	normalizeArray	len	int	0	NIL-FOR	i < $
132	1034	13	MathUtils.java	normalizeArray	i	int	0	DEF	Double.isInfinite(values[$])
132	1034	13	MathUtils.java	normalizeArray	values	double[]	0	DEF	Double.isInfinite($[i])
133	1038	13	MathUtils.java	normalizeArray	i	int	0	DEF	Double.isNaN(values[$])
133	1038	13	MathUtils.java	normalizeArray	values	double[]	0	DEF	Double.isNaN($[i])
134	1042	9	MathUtils.java	normalizeArray	sum	double	0	DEF	$ == 0
36737	1046	9	MathUtils.java	normalizeArray	i	int	0	NIL-FOR	$ < len
36737	1046	9	MathUtils.java	normalizeArray	len	int	0	NIL-FOR	i < $
135	1047	13	MathUtils.java	normalizeArray	i	int	1	DEF	Double.isNaN(values[$])
135	1047	13	MathUtils.java	normalizeArray	values	double[]	1	DEF	Double.isNaN($[i])
136	1088	12	MathUtils.java	round	x	double	1	RET	Double.isInfinite($)
137	1143	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
138	1153	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
139	1162	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
140	1171	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
141	1173	19	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ < 0.5
142	1177	16	MathUtils.java	roundUnscaled	unscaled	double	1	DEF	Math.floor($) / 2.0 == Math.floor(Math .floor($) / 2.0)
143	1189	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ >= 0.5
144	1197	12	MathUtils.java	roundUnscaled	unscaled	double	0	ArithmeticException	$ != Math.floor($)
145	1248	8	MathUtils.java	sign	x	double	0	RET	Double.isNaN($)
146	1266	8	MathUtils.java	sign	x	float	0	RET	Float.isNaN($)
147	1338	8	MathUtils.java	subAndCheck	s	long	0	ArithmeticException	$ > Integer.MAX_VALUE
147	1338	8	MathUtils.java	subAndCheck	s	long	0	ArithmeticException	$ < Integer.MIN_VALUE
148	1357	8	MathUtils.java	subAndCheck	b	long	1	ArithmeticException	$ == Long.MIN_VALUE
149	1358	12	MathUtils.java	subAndCheck	a	long	1	DEF	$ < 0
150	1380	8	MathUtils.java	pow	e	int	0	DEF	$ < 0
36738	1388	8	MathUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
151	1389	12	MathUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
152	1410	8	MathUtils.java	pow	e	long	0	DEF	$ < 0
36739	1418	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
153	1419	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
154	1440	8	MathUtils.java	pow	e	int	0	DEF	$ < 0
36740	1448	8	MathUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
155	1449	12	MathUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
156	1470	8	MathUtils.java	pow	e	long	0	DEF	$ < 0
36741	1478	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
157	1479	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
158	1500	8	MathUtils.java	pow	e	int	0	DEF	$ < 0
159	1520	8	MathUtils.java	pow	e	long	0	DEF	$ < 0
36742	1528	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
160	1529	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
161	1550	8	MathUtils.java	pow	e	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
36743	1558	8	MathUtils.java	pow	e	BigInteger	0	NIL-WHILE	BigInteger.ZERO.equals($)
162	1559	12	MathUtils.java	pow	e	BigInteger	0	DEF	$.testBit(0)
36744	1579	8	MathUtils.java	distance1	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
36744	1579	8	MathUtils.java	distance1	i	int	0	NIL-FOR	$ < p1.length
36744	1579	8	MathUtils.java	distance1	p1	double[]	0	NIL-FOR	i < $.length
36745	1594	6	MathUtils.java	distance1	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
36745	1594	6	MathUtils.java	distance1	i	int	0	NIL-FOR	$ < p1.length
36745	1594	6	MathUtils.java	distance1	p1	int[]	0	NIL-FOR	i < $.length
36746	1609	8	MathUtils.java	distance	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
36746	1609	8	MathUtils.java	distance	i	int	0	NIL-FOR	$ < p1.length
36746	1609	8	MathUtils.java	distance	p1	double[]	0	NIL-FOR	i < $.length
36747	1625	6	MathUtils.java	distance	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
36747	1625	6	MathUtils.java	distance	i	int	0	NIL-FOR	$ < p1.length
36747	1625	6	MathUtils.java	distance	p1	int[]	0	NIL-FOR	i < $.length
36748	1641	8	MathUtils.java	distanceInf	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
36748	1641	8	MathUtils.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
36748	1641	8	MathUtils.java	distanceInf	p1	double[]	0	NIL-FOR	i < $.length
36749	1656	8	MathUtils.java	distanceInf	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
36749	1656	8	MathUtils.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
36749	1656	8	MathUtils.java	distanceInf	p1	int[]	0	NIL-FOR	i < $.length
37314	143	8	MatrixUtils.java	createRealIdentityMatrix	i	int	0	NIL-FOR	$ < dimension
37314	143	8	MatrixUtils.java	createRealIdentityMatrix	dimension	int	0	NIL-FOR	i < $
37315	165	8	MatrixUtils.java	createFieldIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
37315	165	8	MatrixUtils.java	createFieldIdentityMatrix	dimension	int	0	NIL-FOR	row < $
37316	185	8	MatrixUtils.java	createBigIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
37316	185	8	MatrixUtils.java	createBigIdentityMatrix	dimension	int	0	NIL-FOR	row < $
37317	203	8	MatrixUtils.java	createRealDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
37317	203	8	MatrixUtils.java	createRealDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
37317	203	8	MatrixUtils.java	createRealDiagonalMatrix	diagonal	double[]	0	NIL-FOR	i < $.length
37318	222	8	MatrixUtils.java	createFieldDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
37318	222	8	MatrixUtils.java	createFieldDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
37318	222	8	MatrixUtils.java	createFieldDiagonalMatrix	diagonal	T[]	0	NIL-FOR	i < $.length
37319	335	8	MatrixUtils.java	createRowRealMatrix	i	int	0	NIL-FOR	$ < nCols
37319	335	8	MatrixUtils.java	createRowRealMatrix	nCols	int	0	NIL-FOR	i < $
751	354	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	DEF	$ == 0
37320	358	8	MatrixUtils.java	createRowFieldMatrix	i	int	0	NIL-FOR	$ < nCols
37320	358	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NIL-FOR	i < $
37321	378	8	MatrixUtils.java	createRowBigMatrix	i	int	0	NIL-FOR	$ < nCols
37321	378	8	MatrixUtils.java	createRowBigMatrix	nCols	int	0	NIL-FOR	i < $
37322	416	8	MatrixUtils.java	createRowBigMatrix	i	int	0	NIL-FOR	$ < nCols
37322	416	8	MatrixUtils.java	createRowBigMatrix	nCols	int	0	NIL-FOR	i < $
37323	434	8	MatrixUtils.java	createColumnRealMatrix	i	int	0	NIL-FOR	$ < nRows
37323	434	8	MatrixUtils.java	createColumnRealMatrix	nRows	int	0	NIL-FOR	i < $
752	453	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	DEF	$ == 0
37324	457	8	MatrixUtils.java	createColumnFieldMatrix	i	int	0	NIL-FOR	$ < nRows
37324	457	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NIL-FOR	i < $
37325	477	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
37325	477	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
37326	497	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
37326	497	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
37327	517	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
37327	517	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
753	530	8	MatrixUtils.java	checkRowIndex	m	AnyMatrix	0	MatrixIndexException	row >= $.getRowDimension()
753	530	8	MatrixUtils.java	checkRowIndex	row	int	0	MatrixIndexException	$ >= m.getRowDimension()
753	530	8	MatrixUtils.java	checkRowIndex	row	int	0	MatrixIndexException	$ < 0
754	544	8	MatrixUtils.java	checkColumnIndex	m	AnyMatrix	0	MatrixIndexException	column >= $.getColumnDimension()
754	544	8	MatrixUtils.java	checkColumnIndex	column	int	0	MatrixIndexException	$ < 0
754	544	8	MatrixUtils.java	checkColumnIndex	column	int	0	MatrixIndexException	$ >= m.getColumnDimension()
755	566	8	MatrixUtils.java	checkSubMatrixIndex	startRow	int	0	MatrixIndexException	$ > endRow
755	566	8	MatrixUtils.java	checkSubMatrixIndex	endRow	int	0	MatrixIndexException	startRow > $
756	573	8	MatrixUtils.java	checkSubMatrixIndex	startColumn	int	0	MatrixIndexException	$ > endColumn
756	573	8	MatrixUtils.java	checkSubMatrixIndex	endColumn	int	0	MatrixIndexException	startColumn > $
757	593	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
757	593	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
757	593	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
758	594	12	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	MatrixIndexException	selectedRows.$.length == 0
758	594	12	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length == 0
759	616	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	DEF	$.getRowDimension() != right.getRowDimension()
759	616	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	DEF	$.getColumnDimension() != right.getColumnDimension()
759	616	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	DEF	left.getRowDimension() != $.getRowDimension()
759	616	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	DEF	left.getColumnDimension() != $.getColumnDimension()
760	633	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	DEF	$.getColumnDimension() != right.getColumnDimension()
760	633	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	DEF	$.getRowDimension() != right.getRowDimension()
760	633	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	DEF	left.getColumnDimension() != $.getColumnDimension()
760	633	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	DEF	left.getRowDimension() != $.getRowDimension()
761	650	8	MatrixUtils.java	checkMultiplicationCompatible	left	AnyMatrix	0	DEF	$.getColumnDimension() != right.getRowDimension()
761	650	8	MatrixUtils.java	checkMultiplicationCompatible	right	AnyMatrix	0	DEF	left.getColumnDimension() != $.getRowDimension()
37328	791	8	MatrixUtils.java	serializeRealVector	i	int	0	NIL-FOR	$ < n
37328	791	8	MatrixUtils.java	serializeRealVector	n	int	0	NIL-FOR	i < $
37329	822	12	MatrixUtils.java	deserializeRealVector	i	int	0	NIL-FOR	$ < n
37329	822	12	MatrixUtils.java	deserializeRealVector	n	int	0	NIL-FOR	i < $
37330	894	8	MatrixUtils.java	serializeRealMatrix	i	int	0	NIL-FOR	$ < n
37330	894	8	MatrixUtils.java	serializeRealMatrix	n	int	0	NIL-FOR	i < $
37331	895	12	MatrixUtils.java	serializeRealMatrix	j	int	0	NIL-FOR	$ < m
37331	895	12	MatrixUtils.java	serializeRealMatrix	m	int	0	NIL-FOR	j < $
37332	928	12	MatrixUtils.java	deserializeRealMatrix	i	int	0	NIL-FOR	$ < n
37332	928	12	MatrixUtils.java	deserializeRealMatrix	n	int	0	NIL-FOR	i < $
37333	930	16	MatrixUtils.java	deserializeRealMatrix	j	int	0	NIL-FOR	$ < m
37333	930	16	MatrixUtils.java	deserializeRealMatrix	m	int	0	NIL-FOR	j < $
1225	74	8	Max.java	increment	THIS	Max	0	DEF	d > $.value
1225	74	8	Max.java	increment	THIS	Max	0	DEF	Double.isNaN($.value)
1225	74	8	Max.java	increment	d	double	0	DEF	$ > value
1226	129	8	Max.java	evaluate	THIS	Max	0	DEF	$.test(values, begin, length)
1226	129	8	Max.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1226	129	8	Max.java	evaluate	begin	int	0	DEF	test(values, $, length)
1226	129	8	Max.java	evaluate	length	int	0	DEF	test(values, begin, $)
37825	131	12	Max.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
37825	131	12	Max.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
37825	131	12	Max.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1227	132	16	Max.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
1227	132	16	Max.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
1158	106	8	Mean.java	increment	THIS	Mean	0	DEF	$.incMoment
1159	116	8	Mean.java	clear	THIS	Mean	0	DEF	$.incMoment
1160	154	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, begin, length)
1160	154	8	Mean.java	evaluate	values	double[]	0	RET	test($, begin, length)
1160	154	8	Mean.java	evaluate	begin	int	0	RET	test(values, $, length)
1160	154	8	Mean.java	evaluate	length	int	0	RET	test(values, begin, $)
37812	163	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
37812	163	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
37812	163	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1161	201	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, weights, begin, length)
1161	201	8	Mean.java	evaluate	values	double[]	0	RET	test($, weights, begin, length)
1161	201	8	Mean.java	evaluate	weights	double[]	0	RET	test(values, $, begin, length)
1161	201	8	Mean.java	evaluate	begin	int	0	RET	test(values, weights, $, length)
1161	201	8	Mean.java	evaluate	length	int	0	RET	test(values, weights, begin, $)
37813	210	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
37813	210	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
37813	210	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
37917	143	8	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	NIL-FOR	$.mti < N
1397	159	8	MersenneTwister.java	setSeed	seed	int[]	0	RET	$ == null
37918	168	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
1398	174	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
1399	178	12	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	DEF	j >= seed.$.length
1399	178	12	MersenneTwister.java	setSeed	j	int	0	DEF	$ >= seed.length
1399	178	12	MersenneTwister.java	setSeed	seed	int[]	0	DEF	j >= $.length
37919	183	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
1400	189	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
1401	221	8	MersenneTwister.java	next	THIS	MersenneTwister	0	DEF	$.mti >= N
37920	223	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - M
37921	229	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - 1
1699	152	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DEF	xval.$.length == 0
1699	152	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	DEF	$.length == 0
1699	152	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	DEF	$[0] == null
1700	156	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xval.$.length != yval.$.length
1700	156	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	DimensionMismatchException	$.length != yval.length
1700	156	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	DimensionMismatchException	xval.length != $.length
38162	165	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NIL-FOR	i < xval.$.length
38162	165	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < xval.length
38162	165	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NIL-FOR	i < $.length
1701	167	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xvalI.$.length != $.dimension
1701	167	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	DimensionMismatchException	$.length != dimension
38163	177	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < microsphereElements
38163	177	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	microsphereElements	int	0	NIL-FOR	i < $
1702	203	12	MicrosphereInterpolatingFunction.java	value	diffNorm	double	0	RET	Math.abs($) < Math.ulp(1d)
1703	222	12	MicrosphereInterpolatingFunction.java	value	sd	Entry<RealVector,Double>	0	DEF	$ != null
1705	100	8	MicrosphereInterpolator.java	setBrightnessExponent	brightnessExponent	int	0	DEF	$ < 0
1706	114	8	MicrosphereInterpolator.java	setMicropshereElements	THIS	MicrosphereInterpolator	0	DEF	$.microsphereElements < 0
38128	91	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
38128	91	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1222	74	8	Min.java	increment	THIS	Min	0	DEF	Double.isNaN($.value)
1222	74	8	Min.java	increment	THIS	Min	0	DEF	d < $.value
1222	74	8	Min.java	increment	d	double	0	DEF	$ < value
1223	129	8	Min.java	evaluate	THIS	Min	0	DEF	$.test(values, begin, length)
1223	129	8	Min.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1223	129	8	Min.java	evaluate	begin	int	0	DEF	test(values, $, length)
1223	129	8	Min.java	evaluate	length	int	0	DEF	test(values, begin, $)
37824	131	12	Min.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
37824	131	12	Min.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
37824	131	12	Min.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1224	132	16	Min.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
1224	132	16	Min.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
1741	96	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1741	96	8	MullerSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1742	97	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1742	97	8	MullerSolver.java	solve	max	double	0	RET	f.value($) == 0.0
1743	98	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
1743	98	8	MullerSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
1744	102	8	MullerSolver.java	solve	THIS	MullerSolver	1	RET	$.isBracketing(min, initial, f)
1744	102	8	MullerSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
1744	102	8	MullerSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
1744	102	8	MullerSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
1745	151	8	MullerSolver.java	solve	y0	double	0	RET	$ == 0.0
1746	154	8	MullerSolver.java	solve	y2	double	0	RET	$ == 0.0
38174	160	8	MullerSolver.java	solve	THIS	MullerSolver	0	NIL-FOR	i <= $.maximalIterationCount
38174	160	8	MullerSolver.java	solve	i	int	0	NIL-FOR	$ <= maximalIterationCount
1747	179	12	MullerSolver.java	solve	x	double	0	RET	Math.abs($ - oldx) <= tolerance
1747	179	12	MullerSolver.java	solve	tolerance	double	0	RET	Math.abs(x - oldx) <= $
1747	179	12	MullerSolver.java	solve	oldx	double	0	RET	Math.abs(x - $) <= tolerance
1748	183	12	MullerSolver.java	solve	THIS	MullerSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
1748	183	12	MullerSolver.java	solve	y	double	0	RET	Math.abs($) <= functionValueAccuracy
1749	196	12	MullerSolver.java	solve	bisect	boolean	1	DEF	$
1750	206	16	MullerSolver.java	solve	ym	double	1	DEF	MathUtils.sign(y0) + MathUtils.sign($) == 0.0
1750	206	16	MullerSolver.java	solve	y0	double	1	DEF	MathUtils.sign($) + MathUtils.sign(ym) == 0.0
1751	294	8	MullerSolver.java	solve2	y0	double	0	RET	$ == 0.0
1752	295	8	MullerSolver.java	solve2	y1	double	0	RET	$ == 0.0
38175	299	8	MullerSolver.java	solve2	THIS	MullerSolver	0	NIL-FOR	i <= $.maximalIterationCount
38175	299	8	MullerSolver.java	solve2	i	int	0	NIL-FOR	$ <= maximalIterationCount
1753	308	12	MullerSolver.java	solve2	delta	double	1	DEF	$ >= 0.0
1754	317	12	MullerSolver.java	solve2	denominator	double	1	DEF	$ != 0
38176	321	16	MullerSolver.java	solve2	x	double	0	NIL-WHILE	$ == x2
38176	321	16	MullerSolver.java	solve2	x	double	0	NIL-WHILE	$ == x1
38176	321	16	MullerSolver.java	solve2	x1	double	0	NIL-WHILE	x == $
38176	321	16	MullerSolver.java	solve2	x2	double	0	NIL-WHILE	x == $
1755	333	12	MullerSolver.java	solve2	x	double	0	RET	Math.abs($ - oldx) <= tolerance
1755	333	12	MullerSolver.java	solve2	tolerance	double	0	RET	Math.abs(x - oldx) <= $
1755	333	12	MullerSolver.java	solve2	oldx	double	0	RET	Math.abs(x - $) <= tolerance
1756	337	12	MullerSolver.java	solve2	THIS	MullerSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
1756	337	12	MullerSolver.java	solve2	y	double	0	RET	Math.abs($) <= functionValueAccuracy
1096	75	12	MultiDirectional.java	iterateSimplex	best	RealPointValuePair	0	RET	comparator.compare(reflected, $) < 0
1096	75	12	MultiDirectional.java	iterateSimplex	reflected	RealPointValuePair	0	RET	comparator.compare($, best) < 0
1096	75	12	MultiDirectional.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(reflected, best) < 0
1097	80	16	MultiDirectional.java	iterateSimplex	expanded	RealPointValuePair	0	DEF	comparator.compare(reflected, $) <= 0
1097	80	16	MultiDirectional.java	iterateSimplex	reflected	RealPointValuePair	0	DEF	comparator.compare($, expanded) <= 0
1097	80	16	MultiDirectional.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	DEF	$.compare(reflected, expanded) <= 0
1098	91	12	MultiDirectional.java	iterateSimplex	best	RealPointValuePair	0	RET	comparator.compare(contracted, $) < 0
1098	91	12	MultiDirectional.java	iterateSimplex	contracted	RealPointValuePair	0	RET	comparator.compare($, best) < 0
1098	91	12	MultiDirectional.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(contracted, best) < 0
37781	99	12	MultiDirectional.java	iterateSimplex	THIS	MultiDirectional	0	NIL-FOR	i < $.simplex.$.length
37781	99	12	MultiDirectional.java	iterateSimplex	i	int	0	NIL-FOR	$ < simplex.length
1099	102	12	MultiDirectional.java	iterateSimplex	converged	boolean	0	RET	$
37782	130	8	MultiDirectional.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ <= n
37782	130	8	MultiDirectional.java	evaluateNewSimplex	n	int	0	NIL-FOR	i <= $
37783	133	12	MultiDirectional.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < n
37783	133	12	MultiDirectional.java	evaluateNewSimplex	n	int	0	NIL-FOR	j < $
964	119	8	MultiStartDifferentiableMultivariateRealOptimizer.java	getOptima	THIS	MultiStartDifferentiableMultivariateRealOptimizer	0	DEF	$.optima == null
37663	182	8	MultiStartDifferentiableMultivariateRealOptimizer.java	optimize	THIS	MultiStartDifferentiableMultivariateRealOptimizer	0	NIL-FOR	i < $.starts
37663	182	8	MultiStartDifferentiableMultivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
965	216	8	MultiStartDifferentiableMultivariateRealOptimizer.java	optimize	THIS	MultiStartDifferentiableMultivariateRealOptimizer	0	OptimizationException	$.optima[0] == null
1088	123	8	MultiStartDifferentiableMultivariateVectorialOptimizer.java	getOptima	THIS	MultiStartDifferentiableMultivariateVectorialOptimizer	0	DEF	$.optima == null
37771	186	8	MultiStartDifferentiableMultivariateVectorialOptimizer.java	optimize	THIS	MultiStartDifferentiableMultivariateVectorialOptimizer	0	NIL-FOR	i < $.starts
37771	186	8	MultiStartDifferentiableMultivariateVectorialOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1089	226	8	MultiStartDifferentiableMultivariateVectorialOptimizer.java	optimize	THIS	MultiStartDifferentiableMultivariateVectorialOptimizer	0	OptimizationException	$.optima[0] == null
992	114	8	MultiStartMultivariateRealOptimizer.java	getOptima	THIS	MultiStartMultivariateRealOptimizer	0	DEF	$.optima == null
37674	171	8	MultiStartMultivariateRealOptimizer.java	optimize	THIS	MultiStartMultivariateRealOptimizer	0	NIL-FOR	i < $.starts
37674	171	8	MultiStartMultivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
993	204	8	MultiStartMultivariateRealOptimizer.java	optimize	THIS	MultiStartMultivariateRealOptimizer	0	OptimizationException	$.optima[0] == null
966	192	8	MultiStartUnivariateRealOptimizer.java	getOptima	THIS	MultiStartUnivariateRealOptimizer	0	DEF	$.optima == null
967	218	8	MultiStartUnivariateRealOptimizer.java	getOptimaValues	THIS	MultiStartUnivariateRealOptimizer	0	DEF	$.optimaValues == null
37664	236	8	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	NIL-FOR	i < $.starts
37664	236	8	MultiStartUnivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
37665	262	8	MultiStartUnivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < lastNaN
37665	262	8	MultiStartUnivariateRealOptimizer.java	optimize	lastNaN	int	0	NIL-FOR	i < $
968	263	12	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	DEF	Double.isNaN($.optima[i])
968	263	12	MultiStartUnivariateRealOptimizer.java	optimize	i	int	0	DEF	Double.isNaN(optima[$])
37666	273	8	MultiStartUnivariateRealOptimizer.java	optimize	j	int	0	NIL-FOR	$ < lastNaN
37666	273	8	MultiStartUnivariateRealOptimizer.java	optimize	lastNaN	int	0	NIL-FOR	j < $
969	277	12	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	DEF	(goalType == $.GoalType.MAXIMIZE) ^ (currY < prevY)
969	277	12	MultiStartUnivariateRealOptimizer.java	optimize	prevY	double	0	DEF	(goalType == GoalType.MAXIMIZE) ^ (currY < $)
969	277	12	MultiStartUnivariateRealOptimizer.java	optimize	currY	double	0	DEF	(goalType == GoalType.MAXIMIZE) ^ ($ < prevY)
969	277	12	MultiStartUnivariateRealOptimizer.java	optimize	goalType	GoalType	0	DEF	($ == GoalType.MAXIMIZE) ^ (currY < prevY)
37667	282	16	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	NIL-WHILE	(goalType == $.GoalType.MAXIMIZE) ^ (currY < mIY)
37667	282	16	MultiStartUnivariateRealOptimizer.java	optimize	i	int	0	NIL-WHILE	$ >= 0
37667	282	16	MultiStartUnivariateRealOptimizer.java	optimize	mIY	double	0	NIL-WHILE	(goalType == GoalType.MAXIMIZE) ^ (currY < $)
37667	282	16	MultiStartUnivariateRealOptimizer.java	optimize	currY	double	0	NIL-WHILE	(goalType == GoalType.MAXIMIZE) ^ ($ < mIY)
37667	282	16	MultiStartUnivariateRealOptimizer.java	optimize	goalType	GoalType	0	NIL-WHILE	($ == GoalType.MAXIMIZE) ^ (currY < mIY)
970	285	20	MultiStartUnivariateRealOptimizer.java	optimize	i	int	1	DEF	$-- != 0
971	300	8	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	OptimizationException	Double.isNaN($.optima[0])
1694	114	8	MultistepIntegrator.java	MultistepIntegrator	nSteps	int	0	DEF	$ <= 0
1695	226	12	MultistepIntegrator.java	start	THIS	MultistepIntegrator	0	DEF	$.de instanceof InitializationCompletedMarkerException
37796	122	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	i	int	0	NIL-FOR	$ < k
37796	122	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	k	int	0	NIL-FOR	i < $
37797	147	8	MultivariateSummaryStatistics.java	addValue	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
37797	147	8	MultivariateSummaryStatistics.java	addValue	i	int	0	NIL-FOR	$ < k
37798	184	8	MultivariateSummaryStatistics.java	getResults	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < results.$.length
37798	184	8	MultivariateSummaryStatistics.java	getResults	i	int	0	NIL-FOR	$ < results.length
37798	184	8	MultivariateSummaryStatistics.java	getResults	results	double[]	0	NIL-FOR	i < $.length
1115	243	8	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 1
1116	245	15	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 2
37799	249	12	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
37799	249	12	MultivariateSummaryStatistics.java	getStandardDeviation	i	int	0	NIL-FOR	$ < k
37800	331	8	MultivariateSummaryStatistics.java	append	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < data.$.length
37800	331	8	MultivariateSummaryStatistics.java	append	i	int	0	NIL-FOR	$ < data.length
37800	331	8	MultivariateSummaryStatistics.java	append	data	double[]	0	NIL-FOR	i < $.length
1117	332	12	MultivariateSummaryStatistics.java	append	i	int	0	DEF	$ > 0
37801	345	8	MultivariateSummaryStatistics.java	clear	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
37801	345	8	MultivariateSummaryStatistics.java	clear	i	int	0	NIL-FOR	$ < k
1118	365	8	MultivariateSummaryStatistics.java	equals	THIS	MultivariateSummaryStatistics	0	RET	object == $
1118	365	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ == this
1119	368	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ instanceof MultivariateSummaryStatistics == false
1120	614	8	MultivariateSummaryStatistics.java	checkEmpty	THIS	MultivariateSummaryStatistics	0	DEF	$.n > 0
1121	628	8	MultivariateSummaryStatistics.java	checkDimension	THIS	MultivariateSummaryStatistics	0	DimensionMismatchException	dimension != $.k
1121	628	8	MultivariateSummaryStatistics.java	checkDimension	dimension	int	0	DimensionMismatchException	$ != k
37862	193	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < data.$.length
37862	193	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < data.length
37862	193	8	NaturalRanking.java	rank	data	double[]	0	NIL-FOR	i < $.length
37863	226	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
37863	226	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < ranks.length
37863	226	8	NaturalRanking.java	rank	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1294	227	12	NaturalRanking.java	rank	i	int	1	DEF	Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
1294	227	12	NaturalRanking.java	rank	ranks	IntDoublePair[]	1	DEF	Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
1295	230	16	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
1296	241	8	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
1297	244	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	DEF	$.nanStrategy == $.NaNStrategy.FIXED
1298	258	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	RET	$.containsNaNs(ranks)
1298	258	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	RET	containsNaNs($)
37864	263	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
37864	263	8	NaturalRanking.java	removeNaNs	i	int	0	NIL-FOR	$ < ranks.length
37864	263	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1299	264	12	NaturalRanking.java	removeNaNs	i	int	1	DEF	Double.isNaN(ranks[$].getValue())
1299	264	12	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	1	DEF	Double.isNaN($[i].getValue())
37865	266	16	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	k < ranks.$.length
37865	266	16	NaturalRanking.java	removeNaNs	k	int	0	NIL-FOR	$ < ranks.length
37865	266	16	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	k < $.length
37866	288	8	NaturalRanking.java	recodeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
37866	288	8	NaturalRanking.java	recodeNaNs	i	int	0	NIL-FOR	$ < ranks.length
37866	288	8	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1300	289	12	NaturalRanking.java	recodeNaNs	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
1300	289	12	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
37867	303	8	NaturalRanking.java	containsNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
37867	303	8	NaturalRanking.java	containsNaNs	i	int	0	NIL-FOR	$ < ranks.length
37867	303	8	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1301	304	12	NaturalRanking.java	containsNaNs	i	int	0	RET	Double.isNaN(ranks[$].getValue())
1301	304	12	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	RET	Double.isNaN($[i].getValue())
37868	346	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
37869	356	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
37870	374	8	NaturalRanking.java	fill	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
1302	386	8	NaturalRanking.java	restoreNaNs	nanPositions	List<Integer>	0	RET	$.size() == 0
37871	390	8	NaturalRanking.java	restoreNaNs	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
37872	404	8	NaturalRanking.java	getNanPositions	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
37872	404	8	NaturalRanking.java	getNanPositions	i	int	0	NIL-FOR	$ < ranks.length
37872	404	8	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1303	405	12	NaturalRanking.java	getNanPositions	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
1303	405	12	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
37772	91	8	NelderMead.java	iterateSimplex	i	int	0	NIL-FOR	$ < n
37772	91	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	i < $
37773	93	12	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
37773	93	12	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
37774	98	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
37774	98	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
37775	104	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
37775	104	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
1090	109	8	NelderMead.java	iterateSimplex	best	RealPointValuePair	1	DEF	comparator.compare($, reflected) <= 0
1090	109	8	NelderMead.java	iterateSimplex	secondBest	RealPointValuePair	1	DEF	comparator.compare(reflected, $) < 0
1090	109	8	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare(best, $) <= 0
1090	109	8	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare($, secondBest) < 0
1090	109	8	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(best, reflected) <= 0
1090	109	8	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(reflected, secondBest) < 0
1091	115	15	NelderMead.java	iterateSimplex	best	RealPointValuePair	1	DEF	comparator.compare(reflected, $) < 0
1091	115	15	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare($, best) < 0
1091	115	15	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(reflected, best) < 0
37776	119	12	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
37776	119	12	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
1092	124	12	NelderMead.java	iterateSimplex	expanded	RealPointValuePair	1	DEF	comparator.compare($, reflected) < 0
1092	124	12	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare(expanded, $) < 0
1092	124	12	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(expanded, reflected) < 0
1093	134	12	NelderMead.java	iterateSimplex	worst	RealPointValuePair	1	RET	comparator.compare(reflected, $) < 0
1093	134	12	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	RET	comparator.compare($, worst) < 0
1093	134	12	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	RET	$.compare(reflected, worst) < 0
37777	138	16	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
37777	138	16	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
1094	143	16	NelderMead.java	iterateSimplex	outContracted	RealPointValuePair	0	RET	comparator.compare($, reflected) <= 0
1094	143	16	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	0	RET	comparator.compare(outContracted, $) <= 0
1094	143	16	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(outContracted, reflected) <= 0
37778	153	16	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
37778	153	16	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
1095	158	16	NelderMead.java	iterateSimplex	inContracted	RealPointValuePair	0	RET	comparator.compare($, worst) < 0
1095	158	16	NelderMead.java	iterateSimplex	worst	RealPointValuePair	0	RET	comparator.compare(inContracted, $) < 0
1095	158	16	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(inContracted, worst) < 0
37779	168	12	NelderMead.java	iterateSimplex	THIS	NelderMead	0	NIL-FOR	i < $.simplex.$.length
37779	168	12	NelderMead.java	iterateSimplex	i	int	0	NIL-FOR	$ < simplex.length
37780	170	16	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
37780	170	16	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
38172	118	12	NewtonSolver.java	solve	THIS	NewtonSolver	0	NIL-WHILE	i < $.maximalIterationCount
38172	118	12	NewtonSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1728	121	16	NewtonSolver.java	solve	THIS	NewtonSolver	0	RET	Math.abs(x1 - x0) <= $.absoluteAccuracy
1728	121	16	NewtonSolver.java	solve	x0	double	0	RET	Math.abs(x1 - $) <= absoluteAccuracy
1728	121	16	NewtonSolver.java	solve	x1	double	0	RET	Math.abs($ - x0) <= absoluteAccuracy
1075	105	8	NonLinearConjugateGradientOptimizer.java	setInitialStep	initialStep	double	1	DEF	$ <= 0
1076	119	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.preconditioner == null
1077	122	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.solver == null
1078	127	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.goal == $.GoalType.MINIMIZE
37757	128	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
37757	128	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
37758	138	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
37758	138	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1079	148	16	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	RealPointValuePair	0	RET	$ != null
1080	149	20	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	RET	$.checker.converged($.getIterations(), previous, current)
1080	149	20	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	RealPointValuePair	0	RET	checker.converged(getIterations(), $, current)
1080	149	20	NonLinearConjugateGradientOptimizer.java	doOptimize	current	RealPointValuePair	0	RET	checker.converged(getIterations(), previous, $)
37759	167	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < $.point.$.length
37759	167	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < point.length
1081	171	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.goal == $.GoalType.MINIMIZE
37760	172	20	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
37760	172	20	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
37761	181	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
37761	181	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1082	186	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.updateFormula == $.ConjugateGradientFormula.FLETCHER_REEVES
37762	190	20	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < r.$.length
37762	190	20	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < r.length
37762	190	20	NonLinearConjugateGradientOptimizer.java	doOptimize	r	double[]	0	NIL-FOR	i < $.length
1083	198	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.getIterations() % n == 0
1083	198	16	NonLinearConjugateGradientOptimizer.java	doOptimize	beta	double	1	DEF	$ < 0
1083	198	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	1	DEF	getIterations() % $ == 0
37763	203	20	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
37763	203	20	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
37764	229	8	NonLinearConjugateGradientOptimizer.java	findUpperBound	step	double	0	NIL-FOR	$ < Double.MAX_VALUE
1084	232	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yA	double	0	RET	$ * yB <= 0
1084	232	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yB	double	0	RET	yA * $ <= 0
1522	84	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.scaled != null
1522	84	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.scaled != null
1523	87	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.nordsieck != null
1523	87	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.nordsieck != null
1524	90	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.stateVariation != null
1524	90	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.stateVariation != null
38036	145	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < $.scaled.$.length
38036	145	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < scaled.length
38037	151	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < nData.$.length
38037	151	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < nData.length
38037	151	8	NordsieckStepInterpolator.java	rescale	nData	double[][]	0	NIL-FOR	i < $.length
38038	154	12	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
38038	154	12	NordsieckStepInterpolator.java	rescale	j	int	0	NIL-FOR	$ < nDataI.length
38038	154	12	NordsieckStepInterpolator.java	rescale	nDataI	double[]	0	NIL-FOR	j < $.length
38039	197	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ >= 0
38040	201	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
38040	201	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < nDataI.length
38040	201	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	nDataI	double[]	0	NIL-FOR	j < $.length
38041	208	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < $.currentState.$.length
38041	208	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < currentState.length
1525	230	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.scaled == null
38042	234	12	NordsieckStepInterpolator.java	writeExternal	j	int	0	NIL-FOR	$ < n
38042	234	12	NordsieckStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	j < $
1526	239	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.nordsieck == null
1527	264	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
38043	266	12	NordsieckStepInterpolator.java	readExternal	j	int	0	NIL-FOR	$ < n
38043	266	12	NordsieckStepInterpolator.java	readExternal	n	int	0	NIL-FOR	j < $
1528	274	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
1529	280	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
1529	280	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
424	97	8	NormalDistributionImpl.java	setStandardDeviation	sd	double	0	DEF	$ <= 0.0
425	129	12	NormalDistributionImpl.java	cumulativeProbability	THIS	NormalDistributionImpl	1	RET	x < ($.mean - 20 * $.standardDeviation)
425	129	12	NormalDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ < (mean - 20 * standardDeviation)
426	131	19	NormalDistributionImpl.java	cumulativeProbability	THIS	NormalDistributionImpl	1	RET	x > ($.mean + 20 * $.standardDeviation)
426	131	19	NormalDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ > (mean + 20 * standardDeviation)
427	156	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
428	159	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
429	178	8	NormalDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < .5
430	200	8	NormalDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
431	221	8	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
432	223	15	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > .5
37878	110	8	OLSMultipleLinearRegression.java	calculateHat	i	int	0	NIL-FOR	$ < n
37878	110	8	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	i < $
37879	111	12	OLSMultipleLinearRegression.java	calculateHat	j	int	0	NIL-FOR	$ < n
37879	111	12	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	j < $
1327	112	16	OLSMultipleLinearRegression.java	calculateHat	j	int	1	DEF	i == $
1327	112	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ == j
1327	112	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ < p
1327	112	16	OLSMultipleLinearRegression.java	calculateHat	p	int	1	DEF	i < $
1442	71	8	OnePointCrossover.java	crossover	first	Chromosome	0	IllegalArgumentException	$ instanceof AbstractListChromosome
1442	71	8	OnePointCrossover.java	crossover	second	Chromosome	0	IllegalArgumentException	$ instanceof AbstractListChromosome
1443	87	8	OnePointCrossover.java	crossover	length	int	0	IllegalArgumentException	$ != second.getLength()
1443	87	8	OnePointCrossover.java	crossover	second	AbstractListChromosome<T>	0	IllegalArgumentException	length != $.getLength()
37939	101	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < crossoverIndex
37939	101	8	OnePointCrossover.java	crossover	crossoverIndex	int	0	NIL-FOR	i < $
37940	106	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < length
37940	106	8	OnePointCrossover.java	crossover	length	int	0	NIL-FOR	i < $
1254	103	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	DEF	$ > 0.5
1254	103	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	DEF	$ <= 0
1255	126	8	OneWayAnovaImpl.java	anovaStats	categoryData	Collection<double[]>	0	DEF	$.size() < 2
1256	134	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	DEF	$.array.$.length <= 1
37828	153	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	NIL-FOR	i < $.data.$.length
37828	153	12	OneWayAnovaImpl.java	anovaStats	i	int	0	NIL-FOR	$ < data.length
39	152	8	OpenIntToDoubleHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
40	157	8	OpenIntToDoubleHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
40	157	8	OpenIntToDoubleHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
41	181	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
41	181	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
41	181	8	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
42	185	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
42	185	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	states[$] == FREE
36719	190	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
36719	190	8	OpenIntToDoubleHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
43	193	12	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
43	193	12	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
43	193	12	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
44	211	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
44	211	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
44	211	8	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
45	215	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
45	215	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
36720	220	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
36720	220	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
46	223	12	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
46	223	12	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
46	223	12	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
47	273	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
47	273	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
48	275	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
48	275	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
48	275	15	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
48	275	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
48	275	15	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
49	281	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
49	281	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
50	287	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
50	287	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
50	287	16	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
50	287	16	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
50	287	16	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
51	293	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
51	293	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
52	295	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
52	295	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
53	306	12	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
53	306	12	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
54	308	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
54	308	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
54	308	19	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
54	308	19	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
54	308	19	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
55	355	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
55	355	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
55	355	8	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
56	359	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
56	359	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	states[$] == FREE
36721	364	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
36721	364	8	OpenIntToDoubleHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
57	367	12	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
57	367	12	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
57	367	12	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
58	412	8	OpenIntToDoubleHashMap.java	put	index	int	0	DEF	$ < 0
59	420	8	OpenIntToDoubleHashMap.java	put	newMapping	boolean	0	DEF	$
60	422	12	OpenIntToDoubleHashMap.java	put	THIS	OpenIntToDoubleHashMap	0	DEF	$.shouldGrowTable()
36722	446	8	OpenIntToDoubleHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
36722	446	8	OpenIntToDoubleHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
61	447	12	OpenIntToDoubleHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
61	447	12	OpenIntToDoubleHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
167	164	8	OpenIntToFieldHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
168	169	8	OpenIntToFieldHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
168	169	8	OpenIntToFieldHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
169	193	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
169	193	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
169	193	8	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
170	197	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
170	197	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	states[$] == FREE
36750	202	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
36750	202	8	OpenIntToFieldHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
171	205	12	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
171	205	12	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
171	205	12	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
172	223	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
172	223	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
172	223	8	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
173	227	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
173	227	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
36751	232	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
36751	232	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
174	235	12	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
174	235	12	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
174	235	12	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
175	285	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
175	285	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
176	287	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
176	287	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
176	287	15	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
176	287	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
176	287	15	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
177	293	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
177	293	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
178	299	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
178	299	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
178	299	16	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
178	299	16	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
178	299	16	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
179	305	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
179	305	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
180	307	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
180	307	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
181	318	12	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
181	318	12	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
182	320	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
182	320	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
182	320	19	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
182	320	19	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
182	320	19	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
183	367	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
183	367	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
183	367	8	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
184	371	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
184	371	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	states[$] == FREE
36752	376	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
36752	376	8	OpenIntToFieldHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
185	379	12	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
185	379	12	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
185	379	12	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
186	424	8	OpenIntToFieldHashMap.java	put	index	int	0	DEF	$ < 0
187	432	8	OpenIntToFieldHashMap.java	put	newMapping	boolean	0	DEF	$
188	434	12	OpenIntToFieldHashMap.java	put	THIS	OpenIntToFieldHashMap	0	DEF	$.shouldGrowTable()
36753	458	8	OpenIntToFieldHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
36753	458	8	OpenIntToFieldHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
189	459	12	OpenIntToFieldHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
189	459	12	OpenIntToFieldHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
37657	109	8	OpenMapRealMatrix.java	add	iterator	Iterator	0	NIL-FOR	$.hasNext()
37658	144	8	OpenMapRealMatrix.java	subtract	iterator	Iterator	0	NIL-FOR	$.hasNext()
37659	168	12	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
37660	174	16	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
37660	174	16	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
37661	199	8	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
37662	205	12	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
37662	205	12	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
959	207	16	OpenMapRealMatrix.java	multiply	THIS	OpenMapRealMatrix	0	DEF	m.$.entries.containsKey(rightKey)
959	207	16	OpenMapRealMatrix.java	multiply	rightKey	int	0	DEF	m.entries.containsKey($)
959	207	16	OpenMapRealMatrix.java	multiply	m	OpenMapRealMatrix	0	DEF	$.entries.containsKey(rightKey)
960	211	20	OpenMapRealMatrix.java	multiply	outValue	double	1	DEF	$ == 0.0
961	244	8	OpenMapRealMatrix.java	setEntry	value	double	1	DEF	$ == 0.0
962	259	8	OpenMapRealMatrix.java	addToEntry	value	double	1	DEF	$ == 0.0
963	274	8	OpenMapRealMatrix.java	multiplyEntry	value	double	1	DEF	$ == 0.0
37502	130	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
37502	130	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
37502	130	8	OpenMapRealVector.java	OpenMapRealVector	values	double[]	0	NIL-FOR	key < $.length
814	132	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isZero(value)
814	132	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isZero($)
37503	157	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
37503	157	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
37503	157	8	OpenMapRealVector.java	OpenMapRealVector	values	Double[]	0	NIL-FOR	key < $.length
815	159	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isZero(value)
815	159	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isZero($)
37504	183	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < $.virtualSize
37504	183	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < virtualSize
816	185	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isZero(value)
816	185	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isZero($)
817	227	8	OpenMapRealVector.java	add	v	RealVector	0	RET	$ instanceof OpenMapRealVector
37505	243	8	OpenMapRealVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
818	246	12	OpenMapRealVector.java	add	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(key)
818	246	12	OpenMapRealVector.java	add	key	int	1	DEF	entries.containsKey($)
37506	259	8	OpenMapRealVector.java	add	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
37506	259	8	OpenMapRealVector.java	add	i	int	0	NIL-FOR	$ < v.length
37506	259	8	OpenMapRealVector.java	add	v	double[]	0	NIL-FOR	i < $.length
37507	273	8	OpenMapRealVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
819	282	8	OpenMapRealVector.java	append	v	RealVector	0	RET	$ instanceof OpenMapRealVector
37508	298	8	OpenMapRealVector.java	append	THIS	OpenMapRealVector	0	NIL-FOR	i < a.$.length
37508	298	8	OpenMapRealVector.java	append	i	int	0	NIL-FOR	$ < a.length
37508	298	8	OpenMapRealVector.java	append	a	double[]	0	NIL-FOR	i < $.length
37509	314	8	OpenMapRealVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
37510	326	8	OpenMapRealVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
820	329	12	OpenMapRealVector.java	dotProduct	THIS	OpenMapRealVector	0	DEF	idx < v.$.length
820	329	12	OpenMapRealVector.java	dotProduct	idx	int	0	DEF	$ < v.length
820	329	12	OpenMapRealVector.java	dotProduct	v	double[]	0	DEF	idx < $.length
37511	342	8	OpenMapRealVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
37512	354	8	OpenMapRealVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
37513	366	8	OpenMapRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
37514	378	8	OpenMapRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
37515	392	8	OpenMapRealVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
821	395	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ >= index
821	395	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ < end
821	395	12	OpenMapRealVector.java	getSubVector	end	int	0	DEF	key < $
821	395	12	OpenMapRealVector.java	getSubVector	index	int	0	DEF	key >= $
37516	406	8	OpenMapRealVector.java	getData	iter	Iterator	0	NIL-WHILE	$.hasNext()
37517	427	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
37518	435	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
822	438	12	OpenMapRealVector.java	getDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
822	438	12	OpenMapRealVector.java	getDistance	key	int	0	DEF	entries.containsKey($)
823	449	8	OpenMapRealVector.java	getDistance	v	RealVector	0	RET	$ instanceof OpenMapRealVector
37519	459	8	OpenMapRealVector.java	getDistance	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
37519	459	8	OpenMapRealVector.java	getDistance	i	int	0	NIL-FOR	$ < v.length
37519	459	8	OpenMapRealVector.java	getDistance	v	double[]	0	NIL-FOR	i < $.length
37520	483	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
37521	489	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
824	492	12	OpenMapRealVector.java	getL1Distance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
824	492	12	OpenMapRealVector.java	getL1Distance	key	int	0	DEF	entries.containsKey($)
825	503	8	OpenMapRealVector.java	getL1Distance	v	RealVector	0	RET	$ instanceof OpenMapRealVector
37522	513	8	OpenMapRealVector.java	getL1Distance	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
37522	513	8	OpenMapRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < v.length
37522	513	8	OpenMapRealVector.java	getL1Distance	v	double[]	0	NIL-FOR	i < $.length
37523	524	8	OpenMapRealVector.java	getL1Norm	iter	Iterator	0	NIL-WHILE	$.hasNext()
37524	539	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
826	542	12	OpenMapRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
826	542	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
37525	547	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
827	550	12	OpenMapRealVector.java	getLInfDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
827	550	12	OpenMapRealVector.java	getLInfDistance	key	int	0	DEF	entries.containsKey($)
828	551	16	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	iter.value() > $
828	551	16	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	DEF	$.value() > max
829	562	8	OpenMapRealVector.java	getLInfDistance	v	RealVector	0	RET	$ instanceof OpenMapRealVector
37526	572	8	OpenMapRealVector.java	getLInfDistance	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
37526	572	8	OpenMapRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < v.length
37526	572	8	OpenMapRealVector.java	getLInfDistance	v	double[]	0	NIL-FOR	i < $.length
830	574	12	OpenMapRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
830	574	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
37527	585	8	OpenMapRealVector.java	getLInfNorm	iter	Iterator	0	NIL-WHILE	$.hasNext()
37528	596	8	OpenMapRealVector.java	getNorm	iter	Iterator	0	NIL-WHILE	$.hasNext()
37529	607	8	OpenMapRealVector.java	isInfinite	iter	Iterator	0	NIL-WHILE	$.hasNext()
831	610	12	OpenMapRealVector.java	isInfinite	value	double	0	RET	Double.isNaN($)
832	613	12	OpenMapRealVector.java	isInfinite	value	double	0	DEF	Double.isInfinite($)
37530	623	8	OpenMapRealVector.java	isNaN	iter	Iterator	0	NIL-WHILE	$.hasNext()
833	625	12	OpenMapRealVector.java	isNaN	iter	Iterator	0	RET	Double.isNaN($.value())
37531	640	8	OpenMapRealVector.java	mapAbsToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
37532	654	8	OpenMapRealVector.java	mapAcosToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
37532	654	8	OpenMapRealVector.java	mapAcosToSelf	i	int	0	NIL-FOR	$ < virtualSize
37533	667	8	OpenMapRealVector.java	mapAddToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
37533	667	8	OpenMapRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
37534	681	8	OpenMapRealVector.java	mapAsinToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
37535	696	8	OpenMapRealVector.java	mapAtanToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
37536	711	8	OpenMapRealVector.java	mapCbrtToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
37537	726	8	OpenMapRealVector.java	mapCeilToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
37538	740	8	OpenMapRealVector.java	mapCosToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
37538	740	8	OpenMapRealVector.java	mapCosToSelf	i	int	0	NIL-FOR	$ < virtualSize
37539	753	8	OpenMapRealVector.java	mapCoshToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
37539	753	8	OpenMapRealVector.java	mapCoshToSelf	i	int	0	NIL-FOR	$ < virtualSize
37540	767	8	OpenMapRealVector.java	mapDivideToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
37541	781	8	OpenMapRealVector.java	mapExpToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
37541	781	8	OpenMapRealVector.java	mapExpToSelf	i	int	0	NIL-FOR	$ < virtualSize
37542	795	8	OpenMapRealVector.java	mapExpm1ToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
37543	810	8	OpenMapRealVector.java	mapFloorToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
37544	824	8	OpenMapRealVector.java	mapInvToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
37544	824	8	OpenMapRealVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < virtualSize
37545	842	8	OpenMapRealVector.java	mapLog10ToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
37545	842	8	OpenMapRealVector.java	mapLog10ToSelf	i	int	0	NIL-FOR	$ < virtualSize
37546	856	8	OpenMapRealVector.java	mapLog1pToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
37547	865	8	OpenMapRealVector.java	mapLogToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
37547	865	8	OpenMapRealVector.java	mapLogToSelf	i	int	0	NIL-FOR	$ < virtualSize
37548	879	8	OpenMapRealVector.java	mapMultiplyToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
37549	893	8	OpenMapRealVector.java	mapPowToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
37550	908	8	OpenMapRealVector.java	mapRintToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
37551	923	8	OpenMapRealVector.java	mapSignumToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
37552	938	8	OpenMapRealVector.java	mapSinToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
37553	954	8	OpenMapRealVector.java	mapSinhToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
37554	969	8	OpenMapRealVector.java	mapSqrtToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
37555	994	8	OpenMapRealVector.java	mapTanToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
37556	1009	8	OpenMapRealVector.java	mapTanhToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
37557	1024	8	OpenMapRealVector.java	mapUlpToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
37558	1041	8	OpenMapRealVector.java	outerproduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
37559	1044	12	OpenMapRealVector.java	outerproduct	iter2	Iterator	0	NIL-WHILE	$.hasNext()
834	1056	8	OpenMapRealVector.java	outerProduct	v	RealVector	0	RET	$ instanceof OpenMapRealVector
37560	1061	8	OpenMapRealVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
37561	1064	12	OpenMapRealVector.java	outerProduct	THIS	OpenMapRealVector	0	NIL-FOR	col < $.virtualSize
37561	1064	12	OpenMapRealVector.java	outerProduct	col	int	0	NIL-FOR	$ < virtualSize
37562	1076	8	OpenMapRealVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
37563	1080	12	OpenMapRealVector.java	outerProduct	THIS	OpenMapRealVector	0	NIL-FOR	col < $.virtualSize
37563	1080	12	OpenMapRealVector.java	outerProduct	col	int	0	NIL-FOR	$ < virtualSize
835	1102	8	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	1	DEF	$.isZero(value)
835	1102	8	OpenMapRealVector.java	setEntry	value	double	1	DEF	isZero($)
836	1104	15	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(index)
836	1104	15	OpenMapRealVector.java	setEntry	index	int	0	DEF	entries.containsKey($)
37564	1120	8	OpenMapRealVector.java	setSubVector	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
37564	1120	8	OpenMapRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.length
37564	1120	8	OpenMapRealVector.java	setSubVector	v	double[]	0	NIL-FOR	i < $.length
37565	1127	8	OpenMapRealVector.java	set	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
37565	1127	8	OpenMapRealVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
37566	1142	8	OpenMapRealVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
837	1145	12	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(key)
837	1145	12	OpenMapRealVector.java	subtract	key	int	1	DEF	entries.containsKey($)
838	1157	8	OpenMapRealVector.java	subtract	v	RealVector	0	RET	$ instanceof OpenMapRealVector
37567	1167	8	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
37567	1167	8	OpenMapRealVector.java	subtract	i	int	0	NIL-FOR	$ < v.length
37567	1167	8	OpenMapRealVector.java	subtract	v	double[]	0	NIL-FOR	i < $.length
839	1168	12	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(i)
839	1168	12	OpenMapRealVector.java	subtract	i	int	1	DEF	entries.containsKey($)
840	1188	8	OpenMapRealVector.java	unitize	THIS	OpenMapRealVector	0	DEF	$.isZero(norm)
840	1188	8	OpenMapRealVector.java	unitize	norm	double	0	DEF	isZero($)
37568	1192	8	OpenMapRealVector.java	unitize	iter	Iterator	0	NIL-WHILE	$.hasNext()
841	1208	8	OpenMapRealVector.java	checkIndex	THIS	OpenMapRealVector	0	MatrixIndexException	index >= $.getDimension()
841	1208	8	OpenMapRealVector.java	checkIndex	index	int	0	MatrixIndexException	$ >= getDimension()
841	1208	8	OpenMapRealVector.java	checkIndex	index	int	0	MatrixIndexException	$ < 0
842	1224	8	OpenMapRealVector.java	checkVectorDimensions	THIS	OpenMapRealVector	0	DEF	$.getDimension() != n
842	1224	8	OpenMapRealVector.java	checkVectorDimensions	n	int	0	DEF	getDimension() != $
37569	1250	8	OpenMapRealVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
843	1266	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$ == obj
843	1266	8	OpenMapRealVector.java	equals	obj	Object	0	RET	this == $
844	1269	8	OpenMapRealVector.java	equals	obj	Object	0	RET	$ == null
845	1272	8	OpenMapRealVector.java	equals	obj	Object	0	RET	$ instanceof OpenMapRealVector
846	1276	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$.virtualSize != other.$.virtualSize
846	1276	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	virtualSize != $.virtualSize
847	1279	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits($.epsilon) != Double.doubleToLongBits(other.$.epsilon)
847	1279	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	Double.doubleToLongBits(epsilon) != Double.doubleToLongBits($.epsilon)
37570	1284	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
848	1287	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(iter.value())
848	1287	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.value())
37571	1292	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
849	1295	12	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.getEntry(iter.key()))
849	1295	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(getEntry(iter.key()))
849	1295	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry($.key()))
500	78	8	PascalDistributionImpl.java	setNumberOfSuccesses	successes	int	0	DEF	$ < 0
501	93	8	PascalDistributionImpl.java	setProbabilityOfSuccess	p	double	0	DEF	$ > 1.0
501	93	8	PascalDistributionImpl.java	setProbabilityOfSuccess	p	double	0	DEF	$ < 0.0
502	135	8	PascalDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
503	151	8	PascalDistributionImpl.java	probability	x	int	1	DEF	$ < 0
504	180	8	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
505	182	15	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
1287	93	8	PearsonsCorrelation.java	PearsonsCorrelation	covarianceMatrix	RealMatrix	0	DEF	$ == null
37849	138	8	PearsonsCorrelation.java	getCorrelationStandardErrors	i	int	0	NIL-FOR	$ < nVars
37849	138	8	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	i < $
37850	139	12	PearsonsCorrelation.java	getCorrelationStandardErrors	j	int	0	NIL-FOR	$ < nVars
37850	139	12	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	j < $
37851	164	8	PearsonsCorrelation.java	getCorrelationPValues	i	int	0	NIL-FOR	$ < nVars
37851	164	8	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	i < $
37852	165	12	PearsonsCorrelation.java	getCorrelationPValues	j	int	0	NIL-FOR	$ < nVars
37852	165	12	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	j < $
1288	166	16	PearsonsCorrelation.java	getCorrelationPValues	j	int	1	DEF	i == $
1288	166	16	PearsonsCorrelation.java	getCorrelationPValues	i	int	1	DEF	$ == j
37853	189	8	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	$ < nVars
37853	189	8	PearsonsCorrelation.java	computeCorrelationMatrix	nVars	int	0	NIL-FOR	i < $
37854	190	12	PearsonsCorrelation.java	computeCorrelationMatrix	j	int	0	NIL-FOR	$ < i
37854	190	12	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	j < $
1289	226	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	RET	xArray.$.length == yArray.$.length
1289	226	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	RET	xArray.$.length > 1
1289	226	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	RET	$.length == yArray.length
1289	226	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	RET	$.length > 1
1289	226	8	PearsonsCorrelation.java	correlation	yArray	double[]	1	RET	xArray.length == $.length
37855	227	12	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	0	NIL-FOR	i<xArray.$.length
37855	227	12	PearsonsCorrelation.java	correlation	i	int	0	NIL-FOR	$<xArray.length
37855	227	12	PearsonsCorrelation.java	correlation	xArray	double[]	0	NIL-FOR	i<$.length
37856	253	8	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	$ < nVars
37856	253	8	PearsonsCorrelation.java	covarianceToCorrelation	nVars	int	0	NIL-FOR	i < $
37857	256	12	PearsonsCorrelation.java	covarianceToCorrelation	j	int	0	NIL-FOR	$ < i
37857	256	12	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	j < $
1290	275	8	PearsonsCorrelation.java	checkSufficientData	nRows	int	0	DEF	$ < 2
1290	275	8	PearsonsCorrelation.java	checkSufficientData	nCols	int	0	DEF	$ < 2
1228	200	8	Percentile.java	evaluate	p	double	0	DEF	$ <= 0
1228	200	8	Percentile.java	evaluate	p	double	0	DEF	$ > 100
1229	204	8	Percentile.java	evaluate	length	int	0	RET	$ == 0
1230	207	8	Percentile.java	evaluate	length	int	0	RET	$ == 1
1231	219	8	Percentile.java	evaluate	pos	double	0	RET	$ < 1
1232	222	8	Percentile.java	evaluate	n	double	0	RET	pos >= $
1232	222	8	Percentile.java	evaluate	pos	double	0	RET	$ >= n
1233	249	8	Percentile.java	setQuantile	p	double	0	DEF	$ <= 0
1233	249	8	Percentile.java	setQuantile	p	double	0	DEF	$ > 100
419	88	8	PoissonDistributionImpl.java	setMean	p	double	0	DEF	$ <= 0
420	106	8	PoissonDistributionImpl.java	probability	x	int	1	DEF	$ == Integer.MAX_VALUE
420	106	8	PoissonDistributionImpl.java	probability	x	int	1	DEF	$ < 0
421	108	15	PoissonDistributionImpl.java	probability	x	int	1	DEF	$ == 0
422	129	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ < 0
423	132	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ == Integer.MAX_VALUE
1823	64	8	PolynomialFunction.java	PolynomialFunction	THIS	PolynomialFunction	0	DEF	c.$.length < 1
1823	64	8	PolynomialFunction.java	PolynomialFunction	c	double	0	DEF	$.length < 1
38201	68	8	PolynomialFunction.java	PolynomialFunction	l	int	0	NIL-WHILE	$ > 1
38201	68	8	PolynomialFunction.java	PolynomialFunction	l	int	0	NIL-WHILE	c[$ - 1] == 0
38201	68	8	PolynomialFunction.java	PolynomialFunction	c	double	0	NIL-WHILE	$[l - 1] == 0
1824	124	8	PolynomialFunction.java	evaluate	n	int	0	DEF	$ < 1
38202	128	8	PolynomialFunction.java	evaluate	j	int	0	NIL-FOR	$ >=0
38203	147	8	PolynomialFunction.java	add	i	int	0	NIL-FOR	$ < lowLength
38203	147	8	PolynomialFunction.java	add	lowLength	int	0	NIL-FOR	i < $
38204	173	8	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < lowLength
38204	173	8	PolynomialFunction.java	subtract	lowLength	int	0	NIL-FOR	i < $
1825	176	8	PolynomialFunction.java	subtract	THIS	PolynomialFunction	1	DEF	$.coefficients.$.length < p.$.coefficients.$.length
1825	176	8	PolynomialFunction.java	subtract	p	PolynomialFunction	1	DEF	coefficients.length < $.coefficients.length
38205	177	12	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < highLength
38205	177	12	PolynomialFunction.java	subtract	highLength	int	0	NIL-FOR	i < $
38206	195	8	PolynomialFunction.java	negate	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
38206	195	8	PolynomialFunction.java	negate	i	int	0	NIL-FOR	$ < coefficients.length
38207	210	8	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	i < newCoefficients.$.length
38207	210	8	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	$ < newCoefficients.length
38207	210	8	PolynomialFunction.java	multiply	newCoefficients	double[]	0	NIL-FOR	i < $.length
38208	212	12	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	j < Math.min($.coefficients.$.length, i + 1)
38208	212	12	PolynomialFunction.java	multiply	j	int	0	NIL-FOR	$ < Math.min(coefficients.length, i + 1)
38208	212	12	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	j < Math.min(coefficients.length, $ + 1)
1826	233	8	PolynomialFunction.java	differentiate	n	int	0	DEF	$ < 1
1827	236	8	PolynomialFunction.java	differentiate	n	int	0	RET	$ == 1
38209	240	8	PolynomialFunction.java	differentiate	i	int	0	NIL-FOR	$ > 0
1828	283	7	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	RET	$.coefficients[0] == 0.0
1829	284	9	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	RET	$.coefficients.$.length == 1
38210	291	7	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
38210	291	7	PolynomialFunction.java	toString	i	int	0	NIL-FOR	$ < coefficients.length
1830	293	9	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] != 0
1830	293	9	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] != 0
1831	295	11	PolynomialFunction.java	toString	s	StringBuffer	1	DEF	$.length() > 0
1832	296	13	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	DEF	$.coefficients[i] < 0
1832	296	13	PolynomialFunction.java	toString	i	int	1	DEF	coefficients[$] < 0
1833	302	13	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] < 0
1833	302	13	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] < 0
1834	308	11	PolynomialFunction.java	toString	absAi	double	0	DEF	($ - 1) != 0
1835	314	11	PolynomialFunction.java	toString	i	int	0	DEF	$ > 1
1836	338	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	$ == obj
1836	338	8	PolynomialFunction.java	equals	obj	Object	0	RET	this == $
1837	340	8	PolynomialFunction.java	equals	obj	Object	0	RET	$ == null
1838	342	8	PolynomialFunction.java	equals	obj	Object	0	RET	$ instanceof PolynomialFunction
1839	345	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	Arrays.equals($.coefficients, other.$.coefficients)
1839	345	8	PolynomialFunction.java	equals	other	PolynomialFunction	0	RET	Arrays.equals(coefficients, $.coefficients)
1814	140	8	PolynomialFunctionLagrangeForm.java	getCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.coefficientsComputed
38191	173	8	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	$ < n
38191	173	8	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	i < $
1815	179	12	PolynomialFunctionLagrangeForm.java	evaluate	dist	double	0	DEF	$ < min_dist
1815	179	12	PolynomialFunctionLagrangeForm.java	evaluate	min_dist	double	0	DEF	dist < $
38192	188	8	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	$ < n
38192	188	8	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	i < $
38193	189	12	PolynomialFunctionLagrangeForm.java	evaluate	j	int	0	NIL-FOR	$ < n-i
38193	189	12	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	j < n-$
38193	189	12	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	j < $-i
1816	193	16	PolynomialFunctionLagrangeForm.java	evaluate	divider	double	0	DuplicateSampleAbscissaException	$ == 0.0
1817	203	12	PolynomialFunctionLagrangeForm.java	evaluate	i	int	1	DEF	nearest < 0.5*(n-$+1)
1817	203	12	PolynomialFunctionLagrangeForm.java	evaluate	nearest	int	1	DEF	$ < 0.5*(n-i+1)
1817	203	12	PolynomialFunctionLagrangeForm.java	evaluate	n	int	1	DEF	nearest < 0.5*($-i+1)
38194	227	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
38194	227	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
38195	234	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
38195	234	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
38196	235	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
38197	243	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
38197	243	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
38198	246	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ < n
38198	246	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	j < $
1818	247	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	DEF	i != $
1818	247	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != j
1819	251	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	d	double	0	DEF	$ == 0.0
38199	253	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	NIL-FOR	$ < n
38199	253	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	k < $
1820	254	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.x[i] == $.x[k]
1820	254	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	DEF	x[i] == x[$]
1820	254	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	DEF	i != $
1820	254	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	x[$] == x[k]
1820	254	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != k
38200	266	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ >= 0
1821	295	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	DEF	x.$.length != y.$.length
1821	295	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	DEF	$.length != y.length
1821	295	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	DEF	x.length != $.length
1822	300	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	DEF	x.$.length < 2
1822	300	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	DEF	$.length < 2
1841	138	8	PolynomialFunctionNewtonForm.java	getCoefficients	THIS	PolynomialFunctionNewtonForm	0	DEF	$.coefficientsComputed
38214	165	8	PolynomialFunctionNewtonForm.java	evaluate	i	int	0	NIL-FOR	$ >= 0
38215	180	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ <= n
38215	180	8	PolynomialFunctionNewtonForm.java	computeCoefficients	n	int	0	NIL-FOR	i <= $
38216	185	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ >= 0
38217	186	12	PolynomialFunctionNewtonForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
1842	210	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DEF	a.$.length < 1
1842	210	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DEF	c.$.length < 1
1842	210	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	DEF	$.length < 1
1842	210	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	DEF	$.length < 1
1843	214	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DEF	a.$.length != c.$.length + 1
1843	214	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	DEF	$.length != c.length + 1
1843	214	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	DEF	a.length != $.length + 1
1807	98	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DEF	knots.$.length < 2
1807	98	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DEF	$.length < 2
1808	103	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DEF	knots.$.length - 1 != polynomials.$.length
1808	103	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DEF	$.length - 1 != polynomials.length
1808	103	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	DEF	knots.length - 1 != $.length
1809	108	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DEF	$.isStrictlyIncreasing(knots)
1809	108	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DEF	isStrictlyIncreasing($)
1810	136	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	ArgumentOutsideDomainException	v < $.knots[0]
1810	136	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	ArgumentOutsideDomainException	v > $.knots[$.n]
1810	136	8	PolynomialSplineFunction.java	value	v	double	0	ArgumentOutsideDomainException	$ < knots[0]
1810	136	8	PolynomialSplineFunction.java	value	v	double	0	ArgumentOutsideDomainException	$ > knots[n]
1811	140	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
1812	146	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
1812	146	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
38189	167	8	PolynomialSplineFunction.java	polynomialSplineDerivative	THIS	PolynomialSplineFunction	0	NIL-FOR	i < $.n
38189	167	8	PolynomialSplineFunction.java	polynomialSplineDerivative	i	int	0	NIL-FOR	$ < n
38190	220	8	PolynomialSplineFunction.java	isStrictlyIncreasing	THIS	PolynomialSplineFunction	0	NIL-FOR	i < x.$.length
38190	220	8	PolynomialSplineFunction.java	isStrictlyIncreasing	i	int	0	NIL-FOR	$ < x.length
38190	220	8	PolynomialSplineFunction.java	isStrictlyIncreasing	x	double[]	0	NIL-FOR	i < $.length
1813	221	12	PolynomialSplineFunction.java	isStrictlyIncreasing	i	int	0	RET	x[$ - 1] >= x[$]
1813	221	12	PolynomialSplineFunction.java	isStrictlyIncreasing	x	double[]	0	RET	$[i - 1] >= $[i]
1840	198	12	PolynomialsUtils.java	buildPolynomial	maxDegree	int	0	DEF	degree > $
1840	198	12	PolynomialsUtils.java	buildPolynomial	degree	int	0	DEF	$ > maxDegree
38211	214	8	PolynomialsUtils.java	buildPolynomial	i	int	0	NIL-FOR	$ <= degree
38211	214	8	PolynomialsUtils.java	buildPolynomial	degree	int	0	NIL-FOR	i <= $
38212	234	8	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	$ < degree
38212	234	8	PolynomialsUtils.java	computeUpToDegree	degree	int	0	NIL-FOR	k < $
38213	250	12	PolynomialsUtils.java	computeUpToDegree	i	int	0	NIL-FOR	$ < k
38213	250	12	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	i < $
1135	72	8	Product.java	increment	THIS	Product	1	DEF	$.n == 0
1136	121	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, begin, length)
1136	121	8	Product.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1136	121	8	Product.java	evaluate	begin	int	0	DEF	test(values, $, length)
1136	121	8	Product.java	evaluate	length	int	0	DEF	test(values, begin, $)
37807	123	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
37807	123	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
37807	123	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1137	160	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, weights, begin, length)
1137	160	8	Product.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length)
1137	160	8	Product.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length)
1137	160	8	Product.java	evaluate	begin	int	0	DEF	test(values, weights, $, length)
1137	160	8	Product.java	evaluate	length	int	0	DEF	test(values, weights, begin, $)
37808	162	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
37808	162	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
37808	162	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
356	99	8	ProperBigFractionFormat.java	format	whole	BigInteger	0	DEF	BigInteger.ZERO.equals($)
357	102	12	ProperBigFractionFormat.java	format	num	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
358	137	8	ProperBigFractionFormat.java	parse	ret	BigFraction	0	RET	$ != null
359	148	8	ProperBigFractionFormat.java	parse	whole	BigInteger	0	RET	$ == null
360	161	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
361	169	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
362	200	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
363	208	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
364	215	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
365	219	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
366	234	8	ProperBigFractionFormat.java	setWholeFormat	format	NumberFormat	0	DEF	$ == null
339	100	8	ProperFractionFormat.java	format	whole	int	0	DEF	$ != 0
340	137	8	ProperFractionFormat.java	parse	ret	Fraction	0	RET	$ != null
341	148	8	ProperFractionFormat.java	parse	whole	Number	0	RET	$ == null
342	161	8	ProperFractionFormat.java	parse	num	Number	0	RET	$ == null
343	169	8	ProperFractionFormat.java	parse	num	Number	0	RET	$.intValue() < 0
344	200	8	ProperFractionFormat.java	parse	den	Number	0	RET	$ == null
345	208	8	ProperFractionFormat.java	parse	den	Number	0	RET	$.intValue() < 0
346	227	8	ProperFractionFormat.java	setWholeFormat	format	NumberFormat	0	DEF	$ == null
37343	86	8	QRDecompositionImpl.java	QRDecompositionImpl	minor	int	0	NIL-FOR	$ < Math.min(m, n)
37343	86	8	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	minor < Math.min($, n)
37343	86	8	QRDecompositionImpl.java	QRDecompositionImpl	n	int	0	NIL-FOR	minor < Math.min(m, $)
37344	98	12	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
37344	98	12	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
776	105	12	QRDecompositionImpl.java	QRDecompositionImpl	a	double	0	DEF	$ != 0.0
37345	129	16	QRDecompositionImpl.java	QRDecompositionImpl	col	int	0	NIL-FOR	$ < n
37345	129	16	QRDecompositionImpl.java	QRDecompositionImpl	n	int	0	NIL-FOR	col < $
37346	132	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
37346	132	20	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
37347	138	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
37347	138	20	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
777	149	8	QRDecompositionImpl.java	getR	THIS	QRDecompositionImpl	0	DEF	$.cachedR == null
37348	157	12	QRDecompositionImpl.java	getR	row	int	0	NIL-FOR	$ >= 0
37349	159	16	QRDecompositionImpl.java	getR	col	int	0	NIL-FOR	$ < n
37349	159	16	QRDecompositionImpl.java	getR	n	int	0	NIL-FOR	col < $
778	173	8	QRDecompositionImpl.java	getQ	THIS	QRDecompositionImpl	0	DEF	$.cachedQ == null
779	182	8	QRDecompositionImpl.java	getQT	THIS	QRDecompositionImpl	0	DEF	$.cachedQT == null
37350	194	12	QRDecompositionImpl.java	getQT	minor	int	0	NIL-FOR	$ >= Math.min(m, n)
37350	194	12	QRDecompositionImpl.java	getQT	n	int	0	NIL-FOR	minor >= Math.min(m, $)
37350	194	12	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	minor >= Math.min($, n)
37351	198	12	QRDecompositionImpl.java	getQT	minor	int	0	NIL-FOR	$ >= 0
780	201	16	QRDecompositionImpl.java	getQT	qrtMinor	double[]	0	DEF	$[minor] != 0.0
780	201	16	QRDecompositionImpl.java	getQT	minor	int	0	DEF	qrtMinor[$] != 0.0
37352	202	20	QRDecompositionImpl.java	getQT	col	int	0	NIL-FOR	$ < m
37352	202	20	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	col < $
37353	204	24	QRDecompositionImpl.java	getQT	row	int	0	NIL-FOR	$ < m
37353	204	24	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	row < $
37354	209	24	QRDecompositionImpl.java	getQT	row	int	0	NIL-FOR	$ < m
37354	209	24	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	row < $
781	226	8	QRDecompositionImpl.java	getH	THIS	QRDecompositionImpl	0	DEF	$.cachedH == null
37355	231	12	QRDecompositionImpl.java	getH	i	int	0	NIL-FOR	$ < m
37355	231	12	QRDecompositionImpl.java	getH	m	int	0	NIL-FOR	i < $
37356	232	16	QRDecompositionImpl.java	getH	j	int	0	NIL-FOR	$ < Math.min(i + 1, n)
37356	232	16	QRDecompositionImpl.java	getH	i	int	0	NIL-FOR	j < Math.min($ + 1, n)
37356	232	16	QRDecompositionImpl.java	getH	n	int	0	NIL-FOR	j < Math.min(i + 1, $)
1362	178	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
1363	185	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
1364	193	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
1365	135	8	RandomDataImpl.java	nextHexString	len	int	0	DEF	$ <= 0
37907	151	8	RandomDataImpl.java	nextHexString	THIS	RandomDataImpl	0	NIL-FOR	i < randomBytes.$.length
37907	151	8	RandomDataImpl.java	nextHexString	i	int	0	NIL-FOR	$ < randomBytes.length
37907	151	8	RandomDataImpl.java	nextHexString	randomBytes	byte[]	0	NIL-FOR	i < $.length
1366	162	12	RandomDataImpl.java	nextHexString	hex	String	0	DEF	$.length() == 1
1367	181	8	RandomDataImpl.java	nextInt	lower	int	0	DEF	$ >= upper
1367	181	8	RandomDataImpl.java	nextInt	upper	int	0	DEF	lower >= $
1368	201	8	RandomDataImpl.java	nextLong	lower	long	0	DEF	$ >= upper
1368	201	8	RandomDataImpl.java	nextLong	upper	long	0	DEF	lower >= $
1369	231	8	RandomDataImpl.java	nextSecureHexString	len	int	0	DEF	$ <= 0
37908	251	8	RandomDataImpl.java	nextSecureHexString	iter	int	0	NIL-FOR	$ < numIter + 1
37908	251	8	RandomDataImpl.java	nextSecureHexString	numIter	int	0	NIL-FOR	iter < $ + 1
37909	260	12	RandomDataImpl.java	nextSecureHexString	THIS	RandomDataImpl	0	NIL-FOR	i < hash.$.length
37909	260	12	RandomDataImpl.java	nextSecureHexString	i	int	0	NIL-FOR	$ < hash.length
37909	260	12	RandomDataImpl.java	nextSecureHexString	hash	byte[]	0	NIL-FOR	i < $.length
1370	271	16	RandomDataImpl.java	nextSecureHexString	hex	String	0	DEF	$.length() == 1
1371	292	8	RandomDataImpl.java	nextSecureInt	lower	int	0	DEF	$ >= upper
1371	292	8	RandomDataImpl.java	nextSecureInt	upper	int	0	DEF	lower >= $
1372	313	8	RandomDataImpl.java	nextSecureLong	lower	long	0	DEF	$ >= upper
1372	313	8	RandomDataImpl.java	nextSecureLong	upper	long	0	DEF	lower >= $
1373	339	8	RandomDataImpl.java	nextPoisson	mean	double	0	DEF	$ <= 0
1374	347	8	RandomDataImpl.java	nextPoisson	pivot	double	1	RET	mean < $
1374	347	8	RandomDataImpl.java	nextPoisson	mean	double	1	RET	$ < pivot
37910	353	12	RandomDataImpl.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * mean
37910	353	12	RandomDataImpl.java	nextPoisson	mean	double	0	NIL-WHILE	n < 1000 * $
1375	356	16	RandomDataImpl.java	nextPoisson	p	double	1	DEF	r >= $
1375	356	16	RandomDataImpl.java	nextPoisson	r	double	1	DEF	$ >= p
1376	388	16	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ <= p1
1376	388	16	RandomDataImpl.java	nextPoisson	p1	double	1	DEF	u <= $
1377	391	20	RandomDataImpl.java	nextPoisson	lambda	double	0	DEF	x < -$
1377	391	20	RandomDataImpl.java	nextPoisson	delta	double	0	DEF	x > $
1377	391	20	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ < -lambda
1377	391	20	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ > delta
1378	398	20	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ > p1 + p2
1378	398	20	RandomDataImpl.java	nextPoisson	p1	double	1	DEF	u > $ + p2
1378	398	20	RandomDataImpl.java	nextPoisson	p2	double	1	DEF	u > p1 + $
1379	409	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < -t
1379	409	16	RandomDataImpl.java	nextPoisson	a	int	0	DEF	$ == 0
1379	409	16	RandomDataImpl.java	nextPoisson	t	double	0	DEF	v < -$
1380	415	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < qa
1380	415	16	RandomDataImpl.java	nextPoisson	qa	double	0	DEF	v < $
1381	419	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ > qr
1381	419	16	RandomDataImpl.java	nextPoisson	qr	double	0	DEF	v > $
1382	422	16	RandomDataImpl.java	nextPoisson	lambda	double	0	DEF	v < y * logLambda - MathUtils.factorialLog((int) (y + $)) + logLambdaFactorial
1382	422	16	RandomDataImpl.java	nextPoisson	logLambda	double	0	DEF	v < y * $ - MathUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
1382	422	16	RandomDataImpl.java	nextPoisson	logLambdaFactorial	double	0	DEF	v < y * logLambda - MathUtils.factorialLog((int) (y + lambda)) + $
1382	422	16	RandomDataImpl.java	nextPoisson	y	double	0	DEF	v < $ * logLambda - MathUtils.factorialLog((int) ($ + lambda)) + logLambdaFactorial
1382	422	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < y * logLambda - MathUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
1383	443	8	RandomDataImpl.java	nextGaussian	sigma	double	0	DEF	$ <= 0
1384	464	8	RandomDataImpl.java	nextExponential	mean	double	0	DEF	$ <= 0.0
37911	470	8	RandomDataImpl.java	nextExponential	unif	double	0	NIL-WHILE	$ == 0.0d
1385	493	8	RandomDataImpl.java	nextUniform	lower	double	0	DEF	$ >= upper
1385	493	8	RandomDataImpl.java	nextUniform	upper	double	0	DEF	lower >= $
37912	502	8	RandomDataImpl.java	nextUniform	u	double	0	NIL-WHILE	$ <= 0.0
1386	519	8	RandomDataImpl.java	getRan	THIS	RandomDataImpl	0	DEF	$.rand == null
1387	535	8	RandomDataImpl.java	getSecRan	THIS	RandomDataImpl	0	DEF	$.secRand == null
1388	552	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
1389	566	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
1390	582	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
1391	593	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
1392	653	8	RandomDataImpl.java	nextPermutation	n	int	0	DEF	k > $
1392	653	8	RandomDataImpl.java	nextPermutation	k	int	0	DEF	$ > n
1393	657	8	RandomDataImpl.java	nextPermutation	k	int	0	DEF	$ == 0
37913	665	8	RandomDataImpl.java	nextPermutation	i	int	0	NIL-FOR	$ < k
37913	665	8	RandomDataImpl.java	nextPermutation	k	int	0	NIL-FOR	i < $
1394	690	8	RandomDataImpl.java	nextSample	len	int	0	DEF	k > $
1394	690	8	RandomDataImpl.java	nextSample	k	int	0	DEF	$ > len
1395	694	8	RandomDataImpl.java	nextSample	k	int	0	DEF	$ <= 0
37914	702	8	RandomDataImpl.java	nextSample	i	int	0	NIL-FOR	$ < k
37914	702	8	RandomDataImpl.java	nextSample	k	int	0	NIL-FOR	i < $
37915	721	8	RandomDataImpl.java	shuffle	i	int	0	NIL-FOR	$ >= end
37915	721	8	RandomDataImpl.java	shuffle	end	int	0	NIL-FOR	i >= $
1396	722	12	RandomDataImpl.java	shuffle	i	int	1	DEF	$ == 0
37916	742	8	RandomDataImpl.java	getNatural	i	int	0	NIL-FOR	$ < n
37916	742	8	RandomDataImpl.java	getNatural	n	int	0	NIL-FOR	i < $
1433	122	8	RandomKey.java	decodeGeneric	l	int	0	IllegalArgumentException	representation.size() != $
1433	122	8	RandomKey.java	decodeGeneric	representation	List<Double>	0	IllegalArgumentException	$.size() != l
1434	125	8	RandomKey.java	decodeGeneric	representation	List<Double>	0	IllegalArgumentException	$.size() != sortedRepr.size()
1434	125	8	RandomKey.java	decodeGeneric	sortedRepr	List<Double>	0	IllegalArgumentException	representation.size() != $.size()
37933	133	8	RandomKey.java	decodeGeneric	i	int	0	NIL-FOR	$<l
37933	133	8	RandomKey.java	decodeGeneric	l	int	0	NIL-FOR	i<$
1435	151	8	RandomKey.java	isSame	another	Chromosome	0	RET	$ instanceof RandomKey<?>
1436	155	8	RandomKey.java	isSame	THIS	RandomKey	0	RET	$.getLength() != anotherRk.getLength()
1436	155	8	RandomKey.java	isSame	anotherRk	RandomKey<?>	0	RET	getLength() != $.getLength()
37934	163	8	RandomKey.java	isSame	THIS	RandomKey	0	NIL-FOR	i<$.getLength()
37934	163	8	RandomKey.java	isSame	i	int	0	NIL-FOR	$<getLength()
1437	164	12	RandomKey.java	isSame	i	int	0	RET	thisPerm.get($) != anotherPerm.get($)
1437	164	12	RandomKey.java	isSame	thisPerm	List<Integer>	0	RET	$.get(i) != anotherPerm.get(i)
1437	164	12	RandomKey.java	isSame	anotherPerm	List<Integer>	0	RET	thisPerm.get(i) != $.get(i)
1438	177	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val > 1
1438	177	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val < 0
37935	194	8	RandomKey.java	randomPermutation	i	int	0	NIL-FOR	$<l
37935	194	8	RandomKey.java	randomPermutation	l	int	0	NIL-FOR	i<$
37936	210	8	RandomKey.java	identityPermutation	i	int	0	NIL-FOR	$<l
37936	210	8	RandomKey.java	identityPermutation	l	int	0	NIL-FOR	i<$
1439	250	8	RandomKey.java	inducedPermutation	originalData	List<S>	0	IllegalArgumentException	$.size() != permutedData.size()
1439	250	8	RandomKey.java	inducedPermutation	permutedData	List<S>	0	IllegalArgumentException	originalData.size() != $.size()
37937	258	8	RandomKey.java	inducedPermutation	i	int	0	NIL-FOR	$<l
37937	258	8	RandomKey.java	inducedPermutation	l	int	0	NIL-FOR	i<$
1440	260	12	RandomKey.java	inducedPermutation	index	int	0	IllegalArgumentException	$ == -1
37938	285	8	RandomKey.java	baseSequence	i	int	0	NIL-FOR	$<l
37938	285	8	RandomKey.java	baseSequence	l	int	0	NIL-FOR	i<$
1414	40	8	RandomKeyMutation.java	mutate	original	Chromosome	0	DEF	$ instanceof RandomKey<?>
721	117	8	RealMatrixImpl.java	RealMatrixImpl	copyArray	boolean	1	DEF	$
722	120	12	RealMatrixImpl.java	RealMatrixImpl	d	double[][]	0	NullPointerException	$ == null
723	124	12	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	DEF	$ == 0
724	128	12	RealMatrixImpl.java	RealMatrixImpl	nCols	int	0	DEF	$ == 0
37254	131	12	RealMatrixImpl.java	RealMatrixImpl	r	int	0	NIL-FOR	$ < nRows
37254	131	12	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	NIL-FOR	r < $
725	132	16	RealMatrixImpl.java	RealMatrixImpl	THIS	RealMatrixImpl	0	DEF	d[r].length != nCols
725	132	16	RealMatrixImpl.java	RealMatrixImpl	r	int	0	DEF	d[$].length != nCols
725	132	16	RealMatrixImpl.java	RealMatrixImpl	nCols	int	0	DEF	d[r].length != $
725	132	16	RealMatrixImpl.java	RealMatrixImpl	d	double[][]	0	DEF	$[r].length != nCols
37255	153	8	RealMatrixImpl.java	RealMatrixImpl	row	int	0	NIL-FOR	$ < nRows
37255	153	8	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	NIL-FOR	row < $
37256	198	8	RealMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
37256	198	8	RealMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
37257	202	12	RealMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
37257	202	12	RealMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
37258	238	8	RealMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
37258	238	8	RealMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
37259	242	12	RealMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
37259	242	12	RealMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
37260	279	8	RealMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
37260	279	8	RealMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
37261	282	12	RealMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
37261	282	12	RealMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
37262	284	16	RealMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
37262	284	16	RealMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
726	316	8	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	1	DEF	$.data == null
727	317	12	RealMatrixImpl.java	setSubMatrix	row	int	0	DEF	$ > 0
728	322	12	RealMatrixImpl.java	setSubMatrix	column	int	0	DEF	$ > 0
729	328	12	RealMatrixImpl.java	setSubMatrix	nRows	int	0	DEF	$ == 0
730	333	12	RealMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	$ == 0
37263	337	12	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	NIL-FOR	i < $.data.$.length
37263	337	12	RealMatrixImpl.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
731	338	16	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	DEF	subMatrix[i].length != nCols
731	338	16	RealMatrixImpl.java	setSubMatrix	i	int	0	DEF	subMatrix[$].length != nCols
731	338	16	RealMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	subMatrix[i].length != $
731	338	16	RealMatrixImpl.java	setSubMatrix	subMatrix	double[][]	0	DEF	$[i].length != nCols
732	421	8	RealMatrixImpl.java	operate	THIS	RealMatrixImpl	0	DEF	v.$.length != nCols
732	421	8	RealMatrixImpl.java	operate	nCols	int	0	DEF	v.length != $
732	421	8	RealMatrixImpl.java	operate	v	double[]	0	DEF	$.length != nCols
37264	427	8	RealMatrixImpl.java	operate	row	int	0	NIL-FOR	$ < nRows
37264	427	8	RealMatrixImpl.java	operate	nRows	int	0	NIL-FOR	row < $
37265	430	12	RealMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < nCols
37265	430	12	RealMatrixImpl.java	operate	nCols	int	0	NIL-FOR	i < $
733	445	8	RealMatrixImpl.java	preMultiply	THIS	RealMatrixImpl	0	DEF	v.$.length != nRows
733	445	8	RealMatrixImpl.java	preMultiply	nRows	int	0	DEF	v.length != $
733	445	8	RealMatrixImpl.java	preMultiply	v	double[]	0	DEF	$.length != nRows
37266	452	8	RealMatrixImpl.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
37266	452	8	RealMatrixImpl.java	preMultiply	nCols	int	0	NIL-FOR	col < $
37267	454	12	RealMatrixImpl.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
37267	454	12	RealMatrixImpl.java	preMultiply	nRows	int	0	NIL-FOR	i < $
37268	471	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
37268	471	8	RealMatrixImpl.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
37269	473	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
37269	473	12	RealMatrixImpl.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
37270	487	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
37270	487	8	RealMatrixImpl.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
37271	489	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
37271	489	12	RealMatrixImpl.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
37272	505	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
37272	505	8	RealMatrixImpl.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
37273	507	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
37273	507	12	RealMatrixImpl.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
37274	523	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
37274	523	8	RealMatrixImpl.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
37275	525	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
37275	525	12	RealMatrixImpl.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
37276	539	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
37276	539	8	RealMatrixImpl.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
37277	540	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
37277	540	12	RealMatrixImpl.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
37278	555	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
37278	555	8	RealMatrixImpl.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
37279	556	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
37279	556	12	RealMatrixImpl.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
37280	572	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
37280	572	8	RealMatrixImpl.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
37281	573	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
37281	573	12	RealMatrixImpl.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
37282	590	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
37282	590	8	RealMatrixImpl.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
37283	591	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
37283	591	12	RealMatrixImpl.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
37284	607	8	RealMatrixImpl.java	copyOut	i	int	0	NIL-FOR	$ < nRows
37284	607	8	RealMatrixImpl.java	copyOut	nRows	int	0	NIL-FOR	i < $
37334	214	8	RealVectorFormat.java	format	i	int	0	NIL-FOR	$ < vector.getDimension()
37334	214	8	RealVectorFormat.java	format	vector	RealVector	0	NIL-FOR	i < $.getDimension()
762	215	12	RealVectorFormat.java	format	i	int	0	DEF	$ > 0
763	244	8	RealVectorFormat.java	format	obj	Object	0	RET	$ instanceof RealVector
764	264	8	RealVectorFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
765	283	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	$.parseFixedstring(source, $.trimmedPrefix, pos)
765	283	8	RealVectorFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedPrefix, pos)
765	283	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedPrefix, $)
37335	289	8	RealVectorFormat.java	parse	loop	boolean	0	NIL-FOR	$
766	291	12	RealVectorFormat.java	parse	components	List<Number>	0	DEF	$.isEmpty()
767	293	16	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	DEF	$.parseFixedstring(source, $.trimmedSeparator, pos)
767	293	16	RealVectorFormat.java	parse	source	String	0	DEF	parseFixedstring($, trimmedSeparator, pos)
767	293	16	RealVectorFormat.java	parse	pos	ParsePosition	0	DEF	parseFixedstring(source, trimmedSeparator, $)
768	298	12	RealVectorFormat.java	parse	loop	boolean	0	RET	$
769	301	16	RealVectorFormat.java	parse	component	Number	1	DEF	$ != null
770	315	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	$.parseFixedstring(source, $.trimmedSuffix, pos)
770	315	8	RealVectorFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSuffix, pos)
770	315	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSuffix, $)
37336	321	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	NIL-FOR	i < data.$.length
37336	321	8	RealVectorFormat.java	parse	i	int	0	NIL-FOR	$ < data.length
37336	321	8	RealVectorFormat.java	parse	data	double[]	0	NIL-FOR	i < $.length
12	268	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + $.numElements) > $.internalArray.$.length
13	272	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
14	296	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	($.startIndex + ($.numElements + 1)) > $.internalArray.$.length
15	306	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
16	322	8	ResizableDoubleArray.java	substituteMostRecentElement	THIS	ResizableDoubleArray	0	DEF	$.numElements < 1
17	347	8	ResizableDoubleArray.java	checkContractExpand	contraction	float	0	DEF	$ < expansion
17	347	8	ResizableDoubleArray.java	checkContractExpand	expansion	float	0	DEF	contraction < $
18	355	8	ResizableDoubleArray.java	checkContractExpand	contraction	float	0	DEF	$ <= 1.0
19	363	8	ResizableDoubleArray.java	checkContractExpand	expansion	float	0	DEF	$ <= 1.0
20	450	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	1	DEF	i > $.numElements
20	450	8	ResizableDoubleArray.java	discardExtremeElements	i	int	1	DEF	$ > numElements
21	454	14	ResizableDoubleArray.java	discardExtremeElements	i	int	1	DEF	$ < 0
22	461	12	ResizableDoubleArray.java	discardExtremeElements	front	boolean	0	DEF	$
23	463	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
24	485	8	ResizableDoubleArray.java	expand	THIS	ResizableDoubleArray	1	DEF	$.expansionMode == MULTIPLICATIVE_MODE
25	534	8	ResizableDoubleArray.java	getElement	THIS	ResizableDoubleArray	1	DEF	index >= $.numElements
25	534	8	ResizableDoubleArray.java	getElement	index	int	1	DEF	$ >= numElements
26	538	15	ResizableDoubleArray.java	getElement	index	int	1	RET	$ >= 0
27	669	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ < 0
28	674	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	index + 1 > $.numElements
28	674	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ + 1 > numElements
29	677	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + index) >= $.internalArray.$.length
29	677	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	(startIndex + $) >= internalArray.length
30	710	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	DEF	$ != MULTIPLICATIVE_MODE
30	710	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	DEF	$ != ADDITIVE_MODE
31	730	8	ResizableDoubleArray.java	setInitialCapacity	initialCapacity	int	1	DEF	$ > 0
32	752	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	$ < 0
33	760	8	ResizableDoubleArray.java	setNumElements	THIS	ResizableDoubleArray	0	DEF	($.startIndex + i) > $.internalArray.$.length
33	760	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	(startIndex + $) > internalArray.length
34	775	8	ResizableDoubleArray.java	shouldContract	THIS	ResizableDoubleArray	1	RET	$.expansionMode == MULTIPLICATIVE_MODE
35	852	8	ResizableDoubleArray.java	equals	THIS	ResizableDoubleArray	0	RET	object == $
35	852	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ == this
36	855	7	ResizableDoubleArray.java	equals	object	Object	0	RET	$ instanceof ResizableDoubleArray == false
37	868	15	ResizableDoubleArray.java	equals	result	boolean	1	RET	$
1729	94	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1729	94	8	RiddersSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1730	95	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1730	95	8	RiddersSolver.java	solve	max	double	0	RET	f.value($) == 0.0
1731	96	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
1731	96	8	RiddersSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
1732	100	8	RiddersSolver.java	solve	THIS	RiddersSolver	1	RET	$.isBracketing(min, initial, f)
1732	100	8	RiddersSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
1732	100	8	RiddersSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
1732	100	8	RiddersSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
1733	134	8	RiddersSolver.java	solve	y1	double	0	RET	$ == 0.0
1734	137	8	RiddersSolver.java	solve	y2	double	0	RET	$ == 0.0
38173	144	8	RiddersSolver.java	solve	THIS	RiddersSolver	0	NIL-WHILE	i <= $.maximalIterationCount
38173	144	8	RiddersSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1735	148	12	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	Math.abs(y3) <= $.functionValueAccuracy
1735	148	12	RiddersSolver.java	solve	y3	double	0	RET	Math.abs($) <= functionValueAccuracy
1736	160	12	RiddersSolver.java	solve	x	double	0	RET	Math.abs($ - oldx) <= tolerance
1736	160	12	RiddersSolver.java	solve	tolerance	double	0	RET	Math.abs(x - oldx) <= $
1736	160	12	RiddersSolver.java	solve	oldx	double	0	RET	Math.abs(x - $) <= tolerance
1737	164	12	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
1737	164	12	RiddersSolver.java	solve	y	double	0	RET	Math.abs($) <= functionValueAccuracy
1738	171	12	RiddersSolver.java	solve	correction	double	1	DEF	$ > 0.0
1739	172	16	RiddersSolver.java	solve	y	double	1	DEF	MathUtils.sign(y1) + MathUtils.sign($) == 0.0
1739	172	16	RiddersSolver.java	solve	y1	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
1740	182	16	RiddersSolver.java	solve	y	double	1	DEF	MathUtils.sign(y2) + MathUtils.sign($) == 0.0
1740	182	16	RiddersSolver.java	solve	y2	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
38224	81	8	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	NIL-FOR	i <= $.maximalIterationCount
38224	81	8	RombergIntegrator.java	integrate	i	int	0	NIL-FOR	$ <= maximalIterationCount
38225	89	12	RombergIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= i
38225	89	12	RombergIntegrator.java	integrate	i	int	0	NIL-FOR	j <= $
1857	96	12	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	RET	i >= $.minimalIterationCount
1857	96	12	RombergIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
1858	99	16	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	RET	delta <= $.absoluteAccuracy
1858	99	16	RombergIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
1858	99	16	RombergIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
1858	99	16	RombergIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
1859	114	8	RombergIntegrator.java	verifyIterationCount	THIS	RombergIntegrator	0	DEF	$.maximalIterationCount > 32
199	128	4	Rotation.java	Rotation	needsNormalization	boolean	0	DEF	$
200	158	4	Rotation.java	Rotation	norm	double	0	DEF	$ == 0
201	206	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[1].length != 3
201	206	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[2].length != 3
201	206	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[0].length != 3
201	206	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m.$.length != 3
201	206	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[1].length != 3
201	206	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[2].length != 3
201	206	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[0].length != 3
201	206	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$.length != 3
202	220	4	Rotation.java	Rotation	det	double	0	NotARotationMatrixException	$ < 0.0
203	238	4	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
204	247	6	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
205	256	8	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
206	302	2	Rotation.java	Rotation	u1u1	double	0	DEF	$ == 0
206	302	2	Rotation.java	Rotation	u2u2	double	0	DEF	$ == 0
206	302	2	Rotation.java	Rotation	v1v1	double	0	DEF	$ == 0
206	302	2	Rotation.java	Rotation	v2v2	double	0	DEF	$ == 0
207	351	2	Rotation.java	Rotation	c	double	0	RET	$ == 0
208	373	4	Rotation.java	Rotation	c	double	0	RET	$ == 0
209	383	6	Rotation.java	Rotation	c	double	0	RET	$ == 0
210	433	4	Rotation.java	Rotation	normProduct	double	0	DEF	$ == 0
211	439	4	Rotation.java	Rotation	normProduct	double	1	DEF	dot < ((2.0e-15 - 1.0) * $)
211	439	4	Rotation.java	Rotation	dot	double	1	DEF	$ < ((2.0e-15 - 1.0) * normProduct)
212	534	4	Rotation.java	getAxis	squaredSine	double	1	RET	$ == 0
213	536	11	Rotation.java	getAxis	THIS	Rotation	0	RET	$.q0 < 0
214	548	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 > 0.1
214	548	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 < -0.1
215	550	11	Rotation.java	getAngle	THIS	Rotation	0	RET	$.q0 < 0
216	594	4	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
217	603	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
217	603	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
218	612	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
219	621	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
219	621	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
220	630	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
221	639	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
221	639	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
222	648	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
223	657	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
223	657	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
224	666	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
225	675	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
225	675	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
226	684	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
227	693	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
227	693	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
228	702	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
229	711	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
229	711	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
230	720	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
231	729	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
231	729	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
232	738	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
233	747	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
233	747	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
234	756	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
235	765	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
235	765	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
236	774	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
237	783	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
237	783	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
238	801	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
238	801	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
36754	960	4	Rotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
239	1001	6	Rotation.java	orthogonalizeMatrix	fn	double	0	RET	Math.abs(fn1 - $) <= threshold
239	1001	6	Rotation.java	orthogonalizeMatrix	fn1	double	0	RET	Math.abs($ - fn) <= threshold
239	1001	6	Rotation.java	orthogonalizeMatrix	threshold	double	0	RET	Math.abs(fn1 - fn) <= $
1646	107	4	RungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1646	107	4	RungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
38135	111	4	RungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
38135	111	4	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
1647	118	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
1647	118	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.requiresDenseOutput()
38136	137	4	RungeKuttaIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
38137	141	6	RungeKuttaIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
38138	147	8	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
38138	147	8	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
38139	149	10	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
38139	149	10	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
38139	149	10	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
38140	151	12	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
38140	151	12	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
38141	162	8	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
38141	162	8	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
38141	162	8	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
38142	164	10	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
38142	164	10	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
1648	172	8	RungeKuttaIntegrator.java	integrate	interpolator	AbstractStepInterpolator	1	DEF	manager.evaluateStep($)
1648	172	8	RungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolator)
1649	174	12	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	Math.abs(dt) <= Math.ulp($.stepStart)
1649	174	12	RungeKuttaIntegrator.java	integrate	dt	double	1	DEF	Math.abs($) <= Math.ulp(stepStart)
1650	200	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	DEF	manager.reset($.stepStart, y)
1650	200	6	RungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1650	200	6	RungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1650	200	6	RungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1530	83	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	1	DEF	interpolator.$.currentState != null
1530	83	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
38044	87	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < interpolator.$.yDotK.$.length
38044	87	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.yDotK.length
38044	87	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.length
38045	143	4	RungeKuttaStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < kMax
38045	143	4	RungeKuttaStepInterpolator.java	writeExternal	kMax	int	0	NIL-FOR	k < $
38046	144	6	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
38046	144	6	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
38047	165	4	RungeKuttaStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
38047	165	4	RungeKuttaStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
38048	167	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
38048	167	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
1531	174	4	RungeKuttaStepInterpolator.java	readExternal	THIS	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
472	108	8	SaddlePointExpansion.java	getStirlingError	z	double	1	DEF	$ < 15.0
473	110	12	SaddlePointExpansion.java	getStirlingError	z2	double	1	DEF	Math.floor($) == $
474	146	8	SaddlePointExpansion.java	getDeviancePart	x	double	1	DEF	Math.abs($ - mu) < 0.1 * ($ + mu)
474	146	8	SaddlePointExpansion.java	getDeviancePart	mu	double	1	DEF	Math.abs(x - $) < 0.1 * (x + $)
36764	154	12	SaddlePointExpansion.java	getDeviancePart	s1	double	0	NIL-WHILE	$ != s
36764	154	12	SaddlePointExpansion.java	getDeviancePart	s	double	0	NIL-WHILE	s1 != $
475	179	8	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == 0
476	180	12	SaddlePointExpansion.java	logBinomialProbability	p	double	1	DEF	$ < 0.1
477	185	15	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == n
477	185	15	SaddlePointExpansion.java	logBinomialProbability	n	int	1	DEF	x == $
478	186	12	SaddlePointExpansion.java	logBinomialProbability	q	double	1	DEF	$ < 0.1
1757	128	8	SecantSolver.java	solve	y0	double	0	DEF	$ * y1 >= 0
1757	128	8	SecantSolver.java	solve	y1	double	0	DEF	y0 * $ >= 0
38177	139	8	SecantSolver.java	solve	THIS	SecantSolver	0	NIL-WHILE	i < $.maximalIterationCount
38177	139	8	SecantSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1758	140	12	SecantSolver.java	solve	y1	double	0	DEF	Math.abs(y2) < Math.abs($)
1758	140	12	SecantSolver.java	solve	y2	double	0	DEF	Math.abs($) < Math.abs(y1)
1759	148	12	SecantSolver.java	solve	THIS	SecantSolver	0	RET	Math.abs(y1) <= $.functionValueAccuracy
1759	148	12	SecantSolver.java	solve	y1	double	0	RET	Math.abs($) <= functionValueAccuracy
1760	152	12	SecantSolver.java	solve	THIS	SecantSolver	0	RET	Math.abs(oldDelta) < Math.max($.relativeAccuracy * Math.abs(x1), $.absoluteAccuracy)
1760	152	12	SecantSolver.java	solve	x1	double	0	RET	Math.abs(oldDelta) < Math.max(relativeAccuracy * Math.abs($), absoluteAccuracy)
1760	152	12	SecantSolver.java	solve	oldDelta	double	0	RET	Math.abs($) < Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy)
1761	158	12	SecantSolver.java	solve	y0	double	1	DEF	Math.abs(y1) > Math.abs($)
1761	158	12	SecantSolver.java	solve	y1	double	1	DEF	Math.abs($) > Math.abs(y0)
1762	163	16	SecantSolver.java	solve	delta	double	0	DEF	$ / oldDelta > 1
1762	163	16	SecantSolver.java	solve	oldDelta	double	0	DEF	delta / $ > 1
1763	173	12	SecantSolver.java	solve	y1	double	0	DEF	($ > 0) == (y2 > 0)
1763	173	12	SecantSolver.java	solve	y2	double	0	DEF	(y1 > 0) == ($ > 0)
1177	77	8	SecondMoment.java	increment	THIS	SecondMoment	0	DEF	$.n < 1
1445	78	12	SimpleEstimationProblem.java	getUnboundParameters	THIS	SimpleEstimationProblem	0	DEF	$.p.isBound()
37795	76	8	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	NIL-FOR	i < p.$.length
37795	76	8	SimpleRealPointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
37795	76	8	SimpleRealPointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1114	79	12	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	RET	difference > $.absoluteThreshold
1114	79	12	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	RET	difference > (size * $.relativeThreshold)
1114	79	12	SimpleRealPointChecker.java	converged	difference	double	0	RET	$ > absoluteThreshold
1114	79	12	SimpleRealPointChecker.java	converged	difference	double	0	RET	$ > (size * relativeThreshold)
1114	79	12	SimpleRealPointChecker.java	converged	size	double	0	RET	difference > ($ * relativeThreshold)
1332	122	8	SimpleRegression.java	addData	THIS	SimpleRegression	1	DEF	$.n == 0
1333	138	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.n > 2
1334	158	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 0
1335	170	12	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 2
37883	193	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
37883	193	8	SimpleRegression.java	addData	i	int	0	NIL-FOR	$ < data.length
37883	193	8	SimpleRegression.java	addData	data	double[][]	0	NIL-FOR	i < $.length
37884	213	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	$.n > 0
37884	213	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
37884	213	8	SimpleRegression.java	removeData	i	int	0	NIL-FOR	$ < data.length
37884	213	8	SimpleRegression.java	removeData	data	double[][]	0	NIL-FOR	i < $.length
1336	298	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	$.n < 2
1337	301	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	Math.abs($.sumXX) < 10 * Double.MIN_VALUE
1338	351	8	SimpleRegression.java	getTotalSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
1339	365	8	SimpleRegression.java	getXSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
1340	411	8	SimpleRegression.java	getMeanSquareError	THIS	SimpleRegression	0	RET	$.n < 3
1341	434	8	SimpleRegression.java	getR	b1	double	0	DEF	$ < 0
1342	549	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	DEF	$ <= 0
1342	549	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	DEF	$ >= 1
1343	617	8	SimpleRegression.java	setDistribution	THIS	SimpleRegression	0	DEF	$.n > 2
37668	76	8	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	NIL-FOR	i < p.$.length
37668	76	8	SimpleVectorialPointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
37668	76	8	SimpleVectorialPointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
972	81	12	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	RET	difference > $.absoluteThreshold
972	81	12	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	RET	difference > (size * $.relativeThreshold)
972	81	12	SimpleVectorialPointChecker.java	converged	difference	double	0	RET	$ > absoluteThreshold
972	81	12	SimpleVectorialPointChecker.java	converged	difference	double	0	RET	$ > (size * relativeThreshold)
972	81	12	SimpleVectorialPointChecker.java	converged	size	double	0	RET	difference > ($ * relativeThreshold)
37697	76	8	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	NIL-FOR	i < p.$.length
37697	76	8	SimpleVectorialValueChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
37697	76	8	SimpleVectorialValueChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1036	81	12	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	RET	difference > $.absoluteThreshold
1036	81	12	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	RET	difference > (size * $.relativeThreshold)
1036	81	12	SimpleVectorialValueChecker.java	converged	difference	double	0	RET	$ > absoluteThreshold
1036	81	12	SimpleVectorialValueChecker.java	converged	difference	double	0	RET	$ > (size * relativeThreshold)
1036	81	12	SimpleVectorialValueChecker.java	converged	size	double	0	RET	difference > ($ * relativeThreshold)
37676	64	8	SimplexSolver.java	getPivotColumn	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
37676	64	8	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
996	65	12	SimplexSolver.java	getPivotColumn	THIS	SimplexSolver	0	DEF	MathUtils.compareTo(tableau.getEntry(0, i), minValue, $.epsilon) < 0
996	65	12	SimplexSolver.java	getPivotColumn	i	int	0	DEF	MathUtils.compareTo(tableau.getEntry(0, $), minValue, epsilon) < 0
996	65	12	SimplexSolver.java	getPivotColumn	minValue	double	0	DEF	MathUtils.compareTo(tableau.getEntry(0, i), $, epsilon) < 0
996	65	12	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	DEF	MathUtils.compareTo($.getEntry(0, i), minValue, epsilon) < 0
37677	83	8	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getHeight()
37677	83	8	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
997	86	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	MathUtils.compareTo(entry, 0, $.epsilon) > 0
997	86	12	SimplexSolver.java	getPivotRow	entry	double	0	DEF	MathUtils.compareTo($, 0, epsilon) > 0
998	88	16	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	1	DEF	MathUtils.equals(ratio, minRatio, $.epsilon)
998	88	16	SimplexSolver.java	getPivotRow	ratio	double	1	DEF	MathUtils.equals($, minRatio, epsilon)
998	88	16	SimplexSolver.java	getPivotRow	minRatio	double	1	DEF	MathUtils.equals(ratio, $, epsilon)
999	90	23	SimplexSolver.java	getPivotRow	ratio	double	0	DEF	$ < minRatio
999	90	23	SimplexSolver.java	getPivotRow	minRatio	double	0	DEF	ratio < $
1000	98	8	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	1	RET	$.size() == 0
1001	100	15	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	0	RET	$.size() > 1
37678	104	12	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getNumArtificialVariables()
37678	104	12	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
1002	106	14	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	MathUtils.equals(tableau.getEntry($.row, column), 1, $.epsilon)
1002	106	14	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.row.equals(tableau.getBasicRow(column))
1002	106	14	SimplexSolver.java	getPivotRow	column	int	0	RET	MathUtils.equals(tableau.getEntry(row, $), 1, epsilon)
1002	106	14	SimplexSolver.java	getPivotRow	column	int	0	RET	row.equals(tableau.getBasicRow($))
1002	106	14	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	MathUtils.equals($.getEntry(row, column), 1, epsilon)
1002	106	14	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	row.equals($.getBasicRow(column))
1003	129	8	SimplexSolver.java	doIteration	pivotRow	Integer	0	UnboundedSolutionException	$ == null
37679	138	8	SimplexSolver.java	doIteration	i	int	0	NIL-FOR	$ < tableau.getHeight()
37679	138	8	SimplexSolver.java	doIteration	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1004	139	12	SimplexSolver.java	doIteration	i	int	0	DEF	$ != pivotRow
1004	139	12	SimplexSolver.java	doIteration	pivotRow	Integer	0	DEF	i != $
1005	156	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
37680	160	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
1006	165	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NoFeasibleSolutionException	MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, $.epsilon)
1006	165	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NoFeasibleSolutionException	MathUtils.equals($.getEntry(0, $.getRhsOffset()), 0, epsilon)
37681	179	8	SimplexSolver.java	doOptimize	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
1010	126	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
37682	130	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getOriginalNumDecisionVariables()
37682	130	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getOriginalNumDecisionVariables()
1011	133	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
37683	136	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumSlackVariables()
37683	136	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumSlackVariables()
37684	139	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
37684	139	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1012	159	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
1013	170	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
37685	178	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	NIL-FOR	i < $.constraints.size()
37685	178	8	SimplexTableau.java	createTableau	i	int	0	NIL-FOR	$ < constraints.size()
1014	186	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
1015	195	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	1	DEF	constraint.getRelationship() == $.Relationship.LEQ
1015	195	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	1	DEF	$.getRelationship() == Relationship.LEQ
1016	197	19	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1016	197	19	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1017	202	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1017	202	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.EQ
1017	202	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1017	202	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.EQ
1018	232	8	SimplexTableau.java	normalize	constraint	LinearConstraint	0	RET	$.getValue() < 0
1019	257	12	SimplexTableau.java	getConstraintTypeCounts	THIS	SimplexTableau	0	DEF	$.constraint.getRelationship() == relationship
1019	257	12	SimplexTableau.java	getConstraintTypeCounts	relationship	Relationship	0	DEF	constraint.getRelationship() == $
37686	284	8	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
37686	284	8	SimplexTableau.java	getBasicRow	i	int	0	NIL-FOR	$ < getHeight()
1020	285	12	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	1	DEF	MathUtils.equals($.getEntry(i, col), 1.0, $.epsilon)
1020	285	12	SimplexTableau.java	getBasicRow	i	int	1	DEF	MathUtils.equals(getEntry($, col), 1.0, epsilon)
1020	285	12	SimplexTableau.java	getBasicRow	row	Integer	1	DEF	$ == null
1020	285	12	SimplexTableau.java	getBasicRow	col	int	1	DEF	MathUtils.equals(getEntry(i, $), 1.0, epsilon)
1021	287	19	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	RET	MathUtils.equals($.getEntry(i, col), 0.0, $.epsilon)
1021	287	19	SimplexTableau.java	getBasicRow	i	int	0	RET	MathUtils.equals(getEntry($, col), 0.0, epsilon)
1021	287	19	SimplexTableau.java	getBasicRow	col	int	0	RET	MathUtils.equals(getEntry(i, $), 0.0, epsilon)
1022	299	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	RET	$.getNumObjectiveFunctions() == 1
37687	307	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getArtificialVariableOffset()
37687	307	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getArtificialVariableOffset()
1023	308	10	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	MathUtils.compareTo($.tableau.getEntry(0, i), 0, $.epsilon) > 0
1023	308	10	SimplexTableau.java	dropPhase1Objective	i	int	0	DEF	MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) > 0
37688	314	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
37688	314	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1024	316	10	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	$.getBasicRow(col) == null
1024	316	10	SimplexTableau.java	dropPhase1Objective	col	int	0	DEF	getBasicRow($) == null
37689	322	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
37689	322	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getHeight()
37690	324	10	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
37690	324	10	SimplexTableau.java	dropPhase1Objective	j	int	0	NIL-FOR	$ < getWidth()
1025	325	12	SimplexTableau.java	dropPhase1Objective	j	int	0	DEF	columnsToDrop.contains($)
1025	325	12	SimplexTableau.java	dropPhase1Objective	columnsToDrop	List<Integer>	0	DEF	$.contains(j)
37691	331	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ >= 0
37692	352	8	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
37692	352	8	SimplexTableau.java	isOptimal	i	int	0	NIL-FOR	$ < getWidth() - 1
1026	353	12	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	RET	MathUtils.compareTo($.tableau.getEntry(0, i), 0, $.epsilon) < 0
1026	353	12	SimplexTableau.java	isOptimal	i	int	0	RET	MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) < 0
37693	372	6	SimplexTableau.java	getSolution	THIS	SimplexTableau	0	NIL-FOR	i < coefficients.$.length
37693	372	6	SimplexTableau.java	getSolution	i	int	0	NIL-FOR	$ < coefficients.length
37693	372	6	SimplexTableau.java	getSolution	coefficients	double[]	0	NIL-FOR	i < $.length
1027	374	10	SimplexTableau.java	getSolution	colIndex	int	0	DEF	$ < 0
1028	379	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	basicRows.contains($)
1028	379	10	SimplexTableau.java	getSolution	basicRows	Set<Integer>	1	DEF	$.contains(basicRow)
37694	403	8	SimplexTableau.java	divideRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
37694	403	8	SimplexTableau.java	divideRow	j	int	0	NIL-FOR	$ < getWidth()
1029	534	6	SimplexTableau.java	equals	THIS	SimplexTableau	0	RET	$ == other
1029	534	6	SimplexTableau.java	equals	other	Object	0	RET	this == $
1030	538	6	SimplexTableau.java	equals	other	Object	0	RET	$ == null
1844	74	8	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	$.minimalIterationCount == 1
38218	82	8	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	NIL-FOR	i <= $.maximalIterationCount
38218	82	8	SimpsonIntegrator.java	integrate	i	int	0	NIL-FOR	$ <= maximalIterationCount
1845	85	12	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	i >= $.minimalIterationCount
1845	85	12	SimpsonIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
1846	89	16	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	delta <= $.absoluteAccuracy
1846	89	16	SimpsonIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
1846	89	16	SimpsonIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
1846	89	16	SimpsonIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
1847	105	8	SimpsonIntegrator.java	verifyIterationCount	THIS	SimpsonIntegrator	0	DEF	$.maximalIterationCount > 64
37058	105	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.mainBidiagonal.$.length
37058	105	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < mainBidiagonal.length
37059	117	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.singularValues.$.length
37059	117	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < singularValues.length
610	127	8	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedU == null
611	129	12	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	1	DEF	$.m >= $.n
37060	135	16	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n - 1
37060	135	16	SingularValueDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < n - 1
37061	141	20	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.n
37061	141	20	SingularValueDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < n
37062	148	16	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.n
37062	148	16	SingularValueDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < n
37063	151	16	SingularValueDecompositionImpl.java	getU	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
37063	151	16	SingularValueDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < m
612	172	8	SingularValueDecompositionImpl.java	getUT	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedUt == null
613	185	8	SingularValueDecompositionImpl.java	getS	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedS == null
614	204	8	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedV == null
615	206	12	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	1	DEF	$.m >= $.n
37064	215	16	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m - 1
37064	215	16	SingularValueDecompositionImpl.java	getV	i	int	0	NIL-FOR	$ < m - 1
37065	221	20	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.m
37065	221	20	SingularValueDecompositionImpl.java	getV	j	int	0	NIL-FOR	$ < m
37066	228	16	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.m
37066	228	16	SingularValueDecompositionImpl.java	getV	j	int	0	NIL-FOR	$ < m
37067	231	16	SingularValueDecompositionImpl.java	getV	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n
37067	231	16	SingularValueDecompositionImpl.java	getV	i	int	0	NIL-FOR	$ < n
616	249	8	SingularValueDecompositionImpl.java	getVT	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedVt == null
37068	263	8	SingularValueDecompositionImpl.java	getCovariance	THIS	SingularValueDecompositionImpl	0	NIL-WHILE	$.singularValues[dimension] >= minSingularValue
37068	263	8	SingularValueDecompositionImpl.java	getCovariance	THIS	SingularValueDecompositionImpl	0	NIL-WHILE	dimension < $.n
37068	263	8	SingularValueDecompositionImpl.java	getCovariance	dimension	int	0	NIL-WHILE	singularValues[$] >= minSingularValue
37068	263	8	SingularValueDecompositionImpl.java	getCovariance	dimension	int	0	NIL-WHILE	$ < n
37068	263	8	SingularValueDecompositionImpl.java	getCovariance	minSingularValue	double	0	NIL-WHILE	singularValues[dimension] >= $
617	267	8	SingularValueDecompositionImpl.java	getCovariance	dimension	int	0	DEF	$ == 0
37069	305	8	SingularValueDecompositionImpl.java	getRank	i	int	0	NIL-FOR	$ >= 0
618	306	11	SingularValueDecompositionImpl.java	getRank	THIS	SingularValueDecompositionImpl	0	RET	$.singularValues[i] > threshold
618	306	11	SingularValueDecompositionImpl.java	getRank	i	int	0	RET	singularValues[$] > threshold
618	306	11	SingularValueDecompositionImpl.java	getRank	threshold	double	0	RET	singularValues[i] > $
1163	88	8	Skewness.java	increment	THIS	Skewness	0	DEF	$.incMoment
1164	103	8	Skewness.java	getResult	THIS	Skewness	0	RET	$.moment.$.n < 3
1165	107	8	Skewness.java	getResult	variance	double	1	RET	$ < 10E-20
1166	128	8	Skewness.java	clear	THIS	Skewness	0	DEF	$.incMoment
1167	156	8	Skewness.java	evaluate	THIS	Skewness	0	DEF	$.test(values, begin, length)
1167	156	8	Skewness.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1167	156	8	Skewness.java	evaluate	begin	int	0	DEF	test(values, $, length)
1167	156	8	Skewness.java	evaluate	length	int	0	DEF	test(values, begin, $)
1167	156	8	Skewness.java	evaluate	length	int	0	DEF	$ > 2
37814	166	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
37814	166	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
37814	166	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
37815	174	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
37815	174	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
37815	174	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
37070	95	8	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	i < $.rows
37070	95	8	SparseFieldMatrix.java	SparseFieldMatrix	i	int	0	NIL-FOR	$ < rows
37071	96	12	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	j < $.columns
37071	96	12	SparseFieldMatrix.java	SparseFieldMatrix	j	int	0	NIL-FOR	$ < columns
619	110	8	SparseFieldMatrix.java	addToEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
619	110	8	SparseFieldMatrix.java	addToEntry	value	T	1	DEF	getField().getZero().equals($)
620	159	8	SparseFieldMatrix.java	multiplyEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
620	159	8	SparseFieldMatrix.java	multiplyEntry	value	T	1	DEF	getField().getZero().equals($)
621	173	8	SparseFieldMatrix.java	setEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
621	173	8	SparseFieldMatrix.java	setEntry	value	T	1	DEF	getField().getZero().equals($)
37133	106	8	SparseFieldVector.java	SparseFieldVector	THIS	SparseFieldVector	0	NIL-FOR	key < values.$.length
37133	106	8	SparseFieldVector.java	SparseFieldVector	key	int	0	NIL-FOR	$ < values.length
37133	106	8	SparseFieldVector.java	SparseFieldVector	values	T[]	0	NIL-FOR	key < $.length
37134	142	8	SparseFieldVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
651	146	12	SparseFieldVector.java	add	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
651	146	12	SparseFieldVector.java	add	key	int	1	DEF	entries.containsKey($)
37135	161	8	SparseFieldVector.java	add	THIS	SparseFieldVector	0	NIL-FOR	i < v.$.length
37135	161	8	SparseFieldVector.java	add	i	int	0	NIL-FOR	$ < v.length
37135	161	8	SparseFieldVector.java	add	v	T[]	0	NIL-FOR	i < $.length
37136	175	8	SparseFieldVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
652	184	8	SparseFieldVector.java	append	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
37137	201	8	SparseFieldVector.java	append	THIS	SparseFieldVector	0	NIL-FOR	i < a.$.length
37137	201	8	SparseFieldVector.java	append	i	int	0	NIL-FOR	$ < a.length
37137	201	8	SparseFieldVector.java	append	a	T[]	0	NIL-FOR	i < $.length
37138	217	8	SparseFieldVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
37139	229	8	SparseFieldVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
653	232	12	SparseFieldVector.java	dotProduct	THIS	SparseFieldVector	0	DEF	idx < v.$.length
653	232	12	SparseFieldVector.java	dotProduct	idx	int	0	DEF	$ < v.length
653	232	12	SparseFieldVector.java	dotProduct	v	T[]	0	DEF	idx < $.length
37140	246	8	SparseFieldVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
37141	258	8	SparseFieldVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
37142	270	8	SparseFieldVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
37143	282	8	SparseFieldVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
37144	293	8	SparseFieldVector.java	getData	iter	Iterator	0	NIL-WHILE	$.hasNext()
37145	324	8	SparseFieldVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
654	327	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ >= index
654	327	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ < end
654	327	12	SparseFieldVector.java	getSubVector	end	int	0	DEF	key < $
654	327	12	SparseFieldVector.java	getSubVector	index	int	0	DEF	key >= $
37146	341	8	SparseFieldVector.java	mapAddToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
37146	341	8	SparseFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
37147	355	8	SparseFieldVector.java	mapDivideToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
37148	369	8	SparseFieldVector.java	mapInvToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
37148	369	8	SparseFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < virtualSize
37149	383	8	SparseFieldVector.java	mapMultiplyToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
37150	411	8	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
37151	414	12	SparseFieldVector.java	outerProduct	iter2	Iterator	0	NIL-WHILE	$.hasNext()
37152	427	8	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
37153	431	12	SparseFieldVector.java	outerProduct	THIS	SparseFieldVector	0	NIL-FOR	col < $.virtualSize
37153	431	12	SparseFieldVector.java	outerProduct	col	int	0	NIL-FOR	$ < virtualSize
655	441	8	SparseFieldVector.java	outerProduct	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
37154	462	8	SparseFieldVector.java	set	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
37154	462	8	SparseFieldVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
37155	485	8	SparseFieldVector.java	setSubVector	THIS	SparseFieldVector	0	NIL-FOR	i < v.$.length
37155	485	8	SparseFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.length
37155	485	8	SparseFieldVector.java	setSubVector	v	T[]	0	NIL-FOR	i < $.length
37156	501	8	SparseFieldVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
656	504	12	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
656	504	12	SparseFieldVector.java	subtract	key	int	1	DEF	entries.containsKey($)
657	516	8	SparseFieldVector.java	subtract	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
37157	526	8	SparseFieldVector.java	subtract	THIS	SparseFieldVector	0	NIL-FOR	i < v.$.length
37157	526	8	SparseFieldVector.java	subtract	i	int	0	NIL-FOR	$ < v.length
37157	526	8	SparseFieldVector.java	subtract	v	T[]	0	NIL-FOR	i < $.length
658	527	12	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(i)
658	527	12	SparseFieldVector.java	subtract	i	int	1	DEF	entries.containsKey($)
659	550	8	SparseFieldVector.java	checkIndex	THIS	SparseFieldVector	0	MatrixIndexException	index >= $.getDimension()
659	550	8	SparseFieldVector.java	checkIndex	index	int	0	MatrixIndexException	$ < 0
659	550	8	SparseFieldVector.java	checkIndex	index	int	0	MatrixIndexException	$ >= getDimension()
660	566	8	SparseFieldVector.java	checkVectorDimensions	THIS	SparseFieldVector	0	DEF	$.getDimension() != n
660	566	8	SparseFieldVector.java	checkVectorDimensions	n	int	0	DEF	getDimension() != $
661	576	8	SparseFieldVector.java	add	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
37158	601	8	SparseFieldVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
662	615	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$ == obj
662	615	8	SparseFieldVector.java	equals	obj	Object	0	RET	this == $
663	619	8	SparseFieldVector.java	equals	obj	Object	0	RET	$ == null
664	623	8	SparseFieldVector.java	equals	obj	Object	0	RET	$ instanceof SparseFieldVector
665	628	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	1	RET	$.field == null
666	629	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	other.$.field != null
666	629	12	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	$.field != null
667	632	15	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.field.equals(other.$.field)
667	632	15	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	field.equals($.field)
668	635	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.virtualSize != other.$.virtualSize
668	635	8	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	virtualSize != $.virtualSize
37159	640	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
669	643	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(iter.value())
669	643	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals($.value())
37160	648	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
670	651	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	test.equals($.getEntry(iter.key()))
670	651	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(getEntry(iter.key()))
670	651	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals(getEntry($.key()))
1293	148	8	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	RET	xArray.$.length == yArray.$.length
1293	148	8	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	RET	xArray.$.length > 1
1293	148	8	SpearmansCorrelation.java	correlation	xArray	double[]	1	RET	$.length == yArray.length
1293	148	8	SpearmansCorrelation.java	correlation	xArray	double[]	1	RET	$.length > 1
1293	148	8	SpearmansCorrelation.java	correlation	yArray	double[]	1	RET	xArray.length == $.length
37861	166	8	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < matrix.getColumnDimension()
37861	166	8	SpearmansCorrelation.java	rankTransform	matrix	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
1696	59	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	DEF	x.$.length != y.$.length
1696	59	8	SplineInterpolator.java	interpolate	x	double	0	DEF	$.length != y.length
1696	59	8	SplineInterpolator.java	interpolate	y	double	0	DEF	x.length != $.length
1697	64	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	DEF	x.$.length < 3
1697	64	8	SplineInterpolator.java	interpolate	x	double	0	DEF	$.length < 3
38157	72	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
38157	72	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
1698	73	12	SplineInterpolator.java	interpolate	i	int	0	DEF	x[$] >= x[$ + 1]
1698	73	12	SplineInterpolator.java	interpolate	x	double	0	DEF	$[i] >= $[i + 1]
38158	82	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
38158	82	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
38159	91	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
38159	91	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
38160	106	8	SplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ >=0
38161	114	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
38161	114	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
1324	567	8	StatUtils.java	sumDifference	THIS	StatUtils	0	DEF	n != sample2.$.length
1324	567	8	StatUtils.java	sumDifference	n	int	0	DEF	$ != sample2.length
1324	567	8	StatUtils.java	sumDifference	n	int	0	DEF	$ < 1
1324	567	8	StatUtils.java	sumDifference	sample2	double[]	0	DEF	n != $.length
37876	573	8	StatUtils.java	sumDifference	i	int	0	NIL-FOR	$ < n
37876	573	8	StatUtils.java	sumDifference	n	int	0	NIL-FOR	i < $
1325	612	8	StatUtils.java	varianceDifference	THIS	StatUtils	0	DEF	n != sample2.$.length
1325	612	8	StatUtils.java	varianceDifference	n	int	0	DEF	$ != sample2.length
1325	612	8	StatUtils.java	varianceDifference	n	int	0	DEF	$ < 2
1325	612	8	StatUtils.java	varianceDifference	sample2	double[]	0	DEF	n != $.length
37877	617	8	StatUtils.java	varianceDifference	i	int	0	NIL-FOR	$ < n
37877	617	8	StatUtils.java	varianceDifference	n	int	0	NIL-FOR	i < $
1246	131	8	StatisticalSummaryValues.java	equals	THIS	StatisticalSummaryValues	0	RET	object == $
1246	131	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ == this
1247	134	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ instanceof StatisticalSummaryValues == false
1519	117	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.lastState == null
1520	126	12	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.forward
38035	134	8	StepNormalizer.java	handleStep	nextInStep	boolean	0	NIL-WHILE	$
1521	152	8	StepNormalizer.java	handleStep	isLast	boolean	0	DEF	$
1130	72	8	Sum.java	increment	THIS	Sum	1	DEF	$.n == 0
1131	121	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, begin, length)
1131	121	8	Sum.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1131	121	8	Sum.java	evaluate	begin	int	0	DEF	test(values, $, length)
1131	121	8	Sum.java	evaluate	length	int	0	DEF	test(values, begin, $)
37804	123	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
37804	123	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
37804	123	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1132	159	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, weights, begin, length)
1132	159	8	Sum.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length)
1132	159	8	Sum.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length)
1132	159	8	Sum.java	evaluate	begin	int	0	DEF	test(values, weights, $, length)
1132	159	8	Sum.java	evaluate	length	int	0	DEF	test(values, weights, begin, $)
37805	161	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
37805	161	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
37805	161	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1133	89	8	SumOfLogs.java	getResult	THIS	SumOfLogs	1	RET	$.n > 0
1134	132	8	SumOfLogs.java	evaluate	THIS	SumOfLogs	0	DEF	$.test(values, begin, length)
1134	132	8	SumOfLogs.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1134	132	8	SumOfLogs.java	evaluate	begin	int	0	DEF	test(values, $, length)
1134	132	8	SumOfLogs.java	evaluate	length	int	0	DEF	test(values, begin, $)
37806	134	12	SumOfLogs.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
37806	134	12	SumOfLogs.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
37806	134	12	SumOfLogs.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1128	72	8	SumOfSquares.java	increment	THIS	SumOfSquares	1	DEF	$.n == 0
1129	121	8	SumOfSquares.java	evaluate	THIS	SumOfSquares	0	DEF	$.test(values, begin, length)
1129	121	8	SumOfSquares.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1129	121	8	SumOfSquares.java	evaluate	begin	int	0	DEF	test(values, $, length)
1129	121	8	SumOfSquares.java	evaluate	length	int	0	DEF	test(values, begin, $)
37803	123	12	SumOfSquares.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
37803	123	12	SumOfSquares.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
37803	123	12	SumOfSquares.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1201	154	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.meanImpl instanceof Mean
1202	157	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.varianceImpl instanceof Variance
1203	160	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.geoMeanImpl instanceof GeometricMean
1204	201	8	SummaryStatistics.java	getMean	THIS	SummaryStatistics	1	RET	$.mean == $.meanImpl
1205	217	8	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	0	DEF	$.getN() > 0
1206	218	12	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	1	DEF	$.getN() > 1
1207	235	8	SummaryStatistics.java	getVariance	THIS	SummaryStatistics	1	RET	$.varianceImpl == $.variance
1208	339	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
1209	342	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
1210	356	8	SummaryStatistics.java	equals	THIS	SummaryStatistics	0	RET	object == $
1210	356	8	SummaryStatistics.java	equals	object	Object	0	RET	$ == this
1211	359	8	SummaryStatistics.java	equals	object	Object	0	RET	$ instanceof SummaryStatistics == false
1212	629	8	SummaryStatistics.java	checkEmpty	THIS	SummaryStatistics	0	DEF	$.n > 0
1213	663	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getGeoMeanImpl() instanceof GeometricMean
1214	674	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.geoMean == source.$.geoMeanImpl
1214	674	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.geoMean == $.geoMeanImpl
1215	679	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.max == source.$.maxImpl
1215	679	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.max == $.maxImpl
1216	684	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.mean == source.$.meanImpl
1216	684	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.mean == $.meanImpl
1217	689	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.min == source.$.minImpl
1217	689	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.min == $.minImpl
1218	694	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sum == source.$.sumImpl
1218	694	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sum == $.sumImpl
1219	699	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.variance == source.$.varianceImpl
1219	699	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.variance == $.varianceImpl
1220	704	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumLog == source.$.sumLogImpl
1220	704	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumLog == $.sumLogImpl
1221	709	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumsq == source.$.sumsqImpl
1221	709	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumsq == $.sumsqImpl
406	55	8	TDistributionImpl.java	setDegreesOfFreedom	degreesOfFreedom	double	0	DEF	$ <= 0.0
407	80	8	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ == 0.0
408	88	12	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ < 0.0
409	115	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
410	118	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
1277	1027	8	TTestImpl.java	checkSignificanceLevel	alpha	double	0	DEF	$ <= 0
1277	1027	8	TTestImpl.java	checkSignificanceLevel	alpha	double	0	DEF	$ > 0.5
1278	1040	8	TTestImpl.java	checkSampleData	THIS	TTestImpl	0	DEF	data.$.length < 2
1278	1040	8	TTestImpl.java	checkSampleData	data	double[]	0	DEF	$.length < 2
1278	1040	8	TTestImpl.java	checkSampleData	data	double[]	0	DEF	$ == null
1279	1053	8	TTestImpl.java	checkSampleData	stat	StatisticalSummary	0	DEF	$ == null
1279	1053	8	TTestImpl.java	checkSampleData	stat	StatisticalSummary	0	DEF	$.getN() < 2
1186	86	8	ThirdMoment.java	increment	THIS	ThirdMoment	0	DEF	$.n < 1
38129	102	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
38129	102	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1413	73	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	IllegalArgumentException	population.getPopulationSize() < $.arity
1413	73	8	TournamentSelection.java	tournament	population	ListPopulation	0	IllegalArgumentException	$.getPopulationSize() < this.arity
37928	85	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	NIL-FOR	i<$.arity
37928	85	8	TournamentSelection.java	tournament	i	int	0	NIL-FOR	$<this.arity
5	143	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof Number
5	143	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof String
6	147	12	TransformerMap.java	transform	trans	NumberTransformer	0	DEF	$ != null
7	158	8	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$ == other
7	158	8	TransformerMap.java	equals	other	Object	0	RET	this == $
8	161	8	TransformerMap.java	equals	other	Object	0	RET	$ == null
9	166	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.defaultTransformer.equals(rhs.$.defaultTransformer)
9	166	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	defaultTransformer.equals($.defaultTransformer)
10	169	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.map.size() != rhs.$.map.size()
10	169	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	map.size() != $.map.size()
11	173	16	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.entry.getValue().equals(rhs.$.map.get($.entry.getKey()))
11	173	16	TransformerMap.java	equals	rhs	TransformerMap	0	RET	entry.getValue().equals($.map.get(entry.getKey()))
1852	80	8	TrapezoidIntegrator.java	stage	n	int	1	RET	$ == 0
38219	88	12	TrapezoidIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
38219	88	12	TrapezoidIntegrator.java	stage	np	long	0	NIL-FOR	i < $
38220	115	8	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	NIL-FOR	i <= $.maximalIterationCount
38220	115	8	TrapezoidIntegrator.java	integrate	i	int	0	NIL-FOR	$ <= maximalIterationCount
1853	117	12	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	RET	i >= $.minimalIterationCount
1853	117	12	TrapezoidIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
1854	121	16	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	RET	delta <= $.absoluteAccuracy
1854	121	16	TrapezoidIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
1854	121	16	TrapezoidIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
1854	121	16	TrapezoidIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
1855	136	8	TrapezoidIntegrator.java	verifyIterationCount	THIS	TrapezoidIntegrator	0	DEF	$.maximalIterationCount > 64
532	67	8	TriDiagonalTransformer.java	TriDiagonalTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
533	90	8	TriDiagonalTransformer.java	getQ	THIS	TriDiagonalTransformer	0	DEF	$.cachedQ == null
534	103	8	TriDiagonalTransformer.java	getQT	THIS	TriDiagonalTransformer	0	DEF	$.cachedQt == null
36874	109	12	TriDiagonalTransformer.java	getQT	k	int	0	NIL-FOR	$ >= 1
535	113	16	TriDiagonalTransformer.java	getQT	hK	double[]	0	DEF	$[k] != 0.0
535	113	16	TriDiagonalTransformer.java	getQT	k	int	0	DEF	hK[$] != 0.0
36875	116	20	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
36875	116	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
36876	119	20	TriDiagonalTransformer.java	getQT	j	int	0	NIL-FOR	$ < m
36876	119	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	j < $
36877	121	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
36877	121	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
36878	126	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
36878	126	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
536	147	8	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	$.cachedT == null
36879	151	12	TriDiagonalTransformer.java	getT	i	int	0	NIL-FOR	$ < m
36879	151	12	TriDiagonalTransformer.java	getT	m	int	0	NIL-FOR	i < $
537	153	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ > 0
538	156	16	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	i < $.main.$.length - 1
538	156	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ < main.length - 1
36880	206	8	TriDiagonalTransformer.java	transform	k	int	0	NIL-FOR	$ < m - 1
36880	206	8	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	k < $ - 1
36881	212	12	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
36881	212	12	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
539	218	12	TriDiagonalTransformer.java	transform	a	double	0	DEF	$ != 0.0
36882	229	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
36882	229	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
36883	233	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
36883	233	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
36884	243	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
36884	243	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
36885	249	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
36885	249	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
36886	255	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
36886	255	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
36887	257	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
36887	257	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1405	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	THIS	UncorrelatedRandomVectorGenerator	0	DEF	mean.$.length != standardDeviation.$.length
1405	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	mean	double[]	0	DEF	$.length != standardDeviation.length
1405	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	standardDeviation	double[]	0	DEF	mean.length != $.length
37924	87	4	UncorrelatedRandomVectorGenerator.java	nextVector	THIS	UncorrelatedRandomVectorGenerator	0	NIL-FOR	i < random.$.length
37924	87	4	UncorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < random.length
37924	87	4	UncorrelatedRandomVectorGenerator.java	nextVector	random	double[]	0	NIL-FOR	i < $.length
37901	63	8	UnitSphereRandomVectorGenerator.java	nextVector	normSq	double	0	NIL-DOWHILE	$ > 1
37902	65	12	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
37902	65	12	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
37903	73	8	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
37903	73	8	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
1848	68	8	UnivariateRealIntegratorImpl.java	UnivariateRealIntegratorImpl	f	UnivariateRealFunction	0	DEF	$ == null
1849	108	8	UnivariateRealIntegratorImpl.java	getResult	THIS	UnivariateRealIntegratorImpl	1	RET	$.resultComputed
1850	159	8	UnivariateRealIntegratorImpl.java	verifyInterval	lower	double	0	DEF	$ >= upper
1850	159	8	UnivariateRealIntegratorImpl.java	verifyInterval	upper	double	0	DEF	lower >= $
1851	172	8	UnivariateRealIntegratorImpl.java	verifyIterationCount	THIS	UnivariateRealIntegratorImpl	0	DEF	$.minimalIterationCount <= 0
1851	172	8	UnivariateRealIntegratorImpl.java	verifyIterationCount	THIS	UnivariateRealIntegratorImpl	0	DEF	$.maximalIterationCount <= $.minimalIterationCount
1723	75	8	UnivariateRealSolverImpl.java	UnivariateRealSolverImpl	f	UnivariateRealFunction	0	DEF	$ == null
1724	102	8	UnivariateRealSolverImpl.java	checkResultComputed	THIS	UnivariateRealSolverImpl	0	DEF	$.resultComputed
1725	208	8	UnivariateRealSolverImpl.java	verifyInterval	lower	double	0	DEF	$ >= upper
1725	208	8	UnivariateRealSolverImpl.java	verifyInterval	upper	double	0	DEF	lower >= $
1726	225	8	UnivariateRealSolverImpl.java	verifySequence	THIS	UnivariateRealSolverImpl	0	DEF	$.isSequence(lower, initial, upper)
1726	225	8	UnivariateRealSolverImpl.java	verifySequence	lower	double	0	DEF	isSequence($, initial, upper)
1726	225	8	UnivariateRealSolverImpl.java	verifySequence	initial	double	0	DEF	isSequence(lower, $, upper)
1726	225	8	UnivariateRealSolverImpl.java	verifySequence	upper	double	0	DEF	isSequence(lower, initial, $)
1727	248	8	UnivariateRealSolverImpl.java	verifyBracketing	THIS	UnivariateRealSolverImpl	0	DEF	$.isBracketing(lower, upper, function)
1727	248	8	UnivariateRealSolverImpl.java	verifyBracketing	lower	double	0	DEF	isBracketing($, upper, function)
1727	248	8	UnivariateRealSolverImpl.java	verifyBracketing	upper	double	0	DEF	isBracketing(lower, $, function)
1727	248	8	UnivariateRealSolverImpl.java	verifyBracketing	function	UnivariateRealFunction	0	DEF	isBracketing(lower, upper, $)
1764	170	8	UnivariateRealSolverUtils.java	bracket	function	UnivariateRealFunction	0	DEF	$ == null
1765	173	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	DEF	$ <= 0
1766	177	8	UnivariateRealSolverUtils.java	bracket	initial	double	0	DEF	$ < lowerBound
1766	177	8	UnivariateRealSolverUtils.java	bracket	initial	double	0	DEF	$ > upperBound
1766	177	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	DEF	$ >= upperBound
1766	177	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	DEF	initial < $
1766	177	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	DEF	lowerBound >= $
1766	177	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	DEF	initial > $
38178	188	8	UnivariateRealSolverUtils.java	bracket	a	double	0	NIL-DOWHILE	$ > lowerBound
38178	188	8	UnivariateRealSolverUtils.java	bracket	b	double	0	NIL-DOWHILE	$ < upperBound
38178	188	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	NIL-DOWHILE	$ * fb > 0.0
38178	188	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	NIL-DOWHILE	fa * $ > 0.0
38178	188	8	UnivariateRealSolverUtils.java	bracket	numIterations	int	0	NIL-DOWHILE	$ < maximumIterations
38178	188	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	NIL-DOWHILE	a > $
38178	188	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	NIL-DOWHILE	b < $
38178	188	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	NIL-DOWHILE	numIterations < $
1767	198	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	ConvergenceException	$ * fb > 0.0
1767	198	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	ConvergenceException	fa * $ > 0.0
1768	227	8	UnivariateRealSolverUtils.java	setup	f	UnivariateRealFunction	0	DEF	$ == null
37925	138	8	ValueServer.java	fill	THIS	ValueServer	0	NIL-FOR	i < values.$.length
37925	138	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < values.length
37925	138	8	ValueServer.java	fill	values	double[]	0	NIL-FOR	i < $.length
37926	153	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < length
37926	153	8	ValueServer.java	fill	length	int	0	NIL-FOR	i < $
1406	250	8	ValueServer.java	resetReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
1407	267	8	ValueServer.java	closeReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
1408	314	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	DEF	$.empiricalDistribution == null
1408	314	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	DEF	$.empiricalDistribution.getBinStats().size() == 0
1409	341	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	$.filePointer == null
1410	344	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	(str = $.filePointer.readLine()) == null
1410	344	8	ValueServer.java	getNextReplay	str	String	0	DEF	($ = filePointer.readLine()) == null
1411	348	12	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	(str = $.filePointer.readLine()) == null
1411	348	12	ValueServer.java	getNextReplay	str	String	0	DEF	($ = filePointer.readLine()) == null
1138	156	8	Variance.java	increment	THIS	Variance	0	DEF	$.incMoment
1139	166	12	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 0
1140	168	19	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 1
1141	171	16	Variance.java	getResult	THIS	Variance	1	RET	$.isBiasCorrected
1142	191	8	Variance.java	clear	THIS	Variance	0	DEF	$.incMoment
1143	214	8	Variance.java	evaluate	values	double[]	0	DEF	$ == null
1144	245	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
1144	245	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1144	245	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
1144	245	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
1145	247	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1146	249	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
1147	304	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights,begin, length)
1147	304	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights,begin, length)
1147	304	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $,begin, length)
1147	304	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights,$, length)
1147	304	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights,begin, $)
1148	306	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1149	308	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
1150	348	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
1150	348	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1150	348	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
1150	348	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
1151	349	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1152	351	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
37809	355	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
37809	355	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
37809	355	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1153	361	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
1154	420	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights, begin, length)
1154	420	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length)
1154	420	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length)
1154	420	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights, $, length)
1154	420	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights, begin, $)
1155	421	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1156	423	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
37810	426	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
37810	426	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
37810	426	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
37811	432	16	Variance.java	evaluate	THIS	Variance	0	NIL-FOR	i < weights.$.length
37811	432	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < weights.length
37811	432	16	Variance.java	evaluate	weights	double[]	0	NIL-FOR	i < $.length
1157	436	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
240	285	4	Vector3D.java	normalize	s	double	0	DEF	$ == 0
241	309	4	Vector3D.java	orthogonal	threshold	double	0	DEF	$ == 0
242	313	4	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x >= -threshold
242	313	4	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x <= threshold
242	313	4	Vector3D.java	orthogonal	threshold	double	1	RET	x >= -$
242	313	4	Vector3D.java	orthogonal	threshold	double	1	RET	x <= $
243	316	11	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y >= -threshold
243	316	11	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y <= threshold
243	316	11	Vector3D.java	orthogonal	threshold	double	0	RET	y >= -$
243	316	11	Vector3D.java	orthogonal	threshold	double	0	RET	y <= $
244	339	4	Vector3D.java	angle	normProduct	double	0	DEF	$ == 0
245	345	4	Vector3D.java	angle	dot	double	0	RET	$ < -threshold
245	345	4	Vector3D.java	angle	dot	double	0	RET	$ > threshold
245	345	4	Vector3D.java	angle	threshold	double	0	RET	dot < -$
245	345	4	Vector3D.java	angle	threshold	double	0	RET	dot > $
246	348	6	Vector3D.java	angle	dot	double	0	RET	$ >= 0
247	414	4	Vector3D.java	equals	THIS	Vector3D	0	RET	$ == other
247	414	4	Vector3D.java	equals	other	Object	0	RET	this == $
248	418	4	Vector3D.java	equals	other	Object	0	RET	$ == null
249	425	6	Vector3D.java	equals	rhs	Vector3D	0	RET	$.isNaN()
250	447	6	Vector3D.java	hashCode	THIS	Vector3D	0	RET	$.isNaN()
190	240	8	Vector3DFormat.java	format	obj	Object	0	RET	$ instanceof Vector3D
191	259	8	Vector3DFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
192	278	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedPrefix, pos)
192	278	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedPrefix, pos)
192	278	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedPrefix, $)
193	285	8	Vector3DFormat.java	parse	x	Number	0	RET	$ == null
194	294	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSeparator, pos)
194	294	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSeparator, pos)
194	294	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSeparator, $)
195	299	8	Vector3DFormat.java	parse	y	Number	0	RET	$ == null
196	308	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSeparator, pos)
196	308	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSeparator, pos)
196	308	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSeparator, $)
197	313	8	Vector3DFormat.java	parse	z	Number	0	RET	$ == null
198	322	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSuffix, pos)
198	322	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSuffix, pos)
198	322	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSuffix, $)
1168	66	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	DimensionMismatchException	v.$.length != $.sums.$.length
1168	66	8	VectorialCovariance.java	increment	v	double[]	0	DimensionMismatchException	$.length != sums.length
37816	70	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	NIL-FOR	i < v.$.length
37816	70	8	VectorialCovariance.java	increment	i	int	0	NIL-FOR	$ < v.length
37816	70	8	VectorialCovariance.java	increment	v	double[]	0	NIL-FOR	i < $.length
37817	72	12	VectorialCovariance.java	increment	j	int	0	NIL-FOR	$ <= i
37817	72	12	VectorialCovariance.java	increment	i	int	0	NIL-FOR	j <= $
1169	88	8	VectorialCovariance.java	getResult	THIS	VectorialCovariance	0	DEF	$.n > 1
37818	91	12	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	$ < dimension
37818	91	12	VectorialCovariance.java	getResult	dimension	int	0	NIL-FOR	i < $
37819	92	16	VectorialCovariance.java	getResult	j	int	0	NIL-FOR	$ <= i
37819	92	16	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	j <= $
1170	136	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$ == obj
1170	136	8	VectorialCovariance.java	equals	obj	Object	0	RET	this == $
1171	138	8	VectorialCovariance.java	equals	obj	Object	0	RET	$ == null
1172	140	8	VectorialCovariance.java	equals	obj	Object	0	RET	$ instanceof VectorialCovariance
1173	143	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.isBiasCorrected != other.$.isBiasCorrected
1173	143	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	isBiasCorrected != $.isBiasCorrected
1174	145	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.n != other.$.n
1174	145	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	n != $.n
1175	147	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.productsSums, other.$.productsSums)
1175	147	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(productsSums, $.productsSums)
1176	149	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.sums, other.$.sums)
1176	149	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(sums, $.sums)
37821	42	8	VectorialMean.java	VectorialMean	i	int	0	NIL-FOR	$ < dimension
37821	42	8	VectorialMean.java	VectorialMean	dimension	int	0	NIL-FOR	i < $
1187	53	8	VectorialMean.java	increment	THIS	VectorialMean	0	DimensionMismatchException	v.$.length != $.means.$.length
1187	53	8	VectorialMean.java	increment	v	double[]	0	DimensionMismatchException	$.length != means.length
37822	56	8	VectorialMean.java	increment	THIS	VectorialMean	0	NIL-FOR	i < v.$.length
37822	56	8	VectorialMean.java	increment	i	int	0	NIL-FOR	$ < v.length
37822	56	8	VectorialMean.java	increment	v	double[]	0	NIL-FOR	i < $.length
37823	67	8	VectorialMean.java	getResult	THIS	VectorialMean	0	NIL-FOR	i < result.$.length
37823	67	8	VectorialMean.java	getResult	i	int	0	NIL-FOR	$ < result.length
37823	67	8	VectorialMean.java	getResult	result	double[]	0	NIL-FOR	i < $.length
1188	93	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	$ == obj
1188	93	8	VectorialMean.java	equals	obj	Object	0	RET	this == $
1189	95	8	VectorialMean.java	equals	obj	Object	0	RET	$ == null
1190	97	8	VectorialMean.java	equals	obj	Object	0	RET	$ instanceof VectorialMean
1191	100	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	Arrays.equals($.means, other.$.means)
1191	100	8	VectorialMean.java	equals	other	VectorialMean	0	RET	Arrays.equals(means, $.means)
443	62	8	WeibullDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
444	101	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ > 1.0
444	101	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ < 0.0
445	104	15	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
446	106	16	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
447	119	8	WeibullDistributionImpl.java	setShape	alpha	double	0	DEF	$ <= 0.0
448	132	8	WeibullDistributionImpl.java	setScale	beta	double	0	DEF	$ <= 0.0
449	75	8	ZipfDistributionImpl.java	setNumberOfElements	n	int	0	DEF	$ <= 0
450	102	8	ZipfDistributionImpl.java	setExponent	s	double	0	DEF	$ <= 0.0
451	117	8	ZipfDistributionImpl.java	probability	THIS	ZipfDistributionImpl	0	RET	x > $.getNumberOfElements()
451	117	8	ZipfDistributionImpl.java	probability	x	int	0	RET	$ > getNumberOfElements()
451	117	8	ZipfDistributionImpl.java	probability	x	int	0	RET	$ <= 0
452	133	8	ZipfDistributionImpl.java	cumulativeProbability	x	int	1	RET	$ <= 0
453	135	15	ZipfDistributionImpl.java	cumulativeProbability	THIS	ZipfDistributionImpl	0	RET	x >= $.getNumberOfElements()
453	135	15	ZipfDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ >= getNumberOfElements()
36763	181	8	ZipfDistributionImpl.java	generalizedHarmonic	k	int	0	NIL-FOR	$ > 0
