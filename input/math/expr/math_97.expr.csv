id	line	column	filename	methodname	varname	vartype	else	return	right
280	61	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	IllegalArgumentException	$ > 1.0
280	61	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	IllegalArgumentException	$ < 0.0
281	96	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	Math.abs($.value(lowerBound)) < 1E-6
281	96	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	lowerBound	double	0	RET	Math.abs(rootFindingFunction.value($)) < 1E-6
282	99	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	Math.abs($.value(upperBound)) < 1E-6
282	99	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	upperBound	double	0	RET	Math.abs(rootFindingFunction.value($)) < 1E-6
306	60	8	AbstractDistribution.java	cumulativeProbability	x0	double	0	IllegalArgumentException	$ > x1
306	60	8	AbstractDistribution.java	cumulativeProbability	x1	double	0	IllegalArgumentException	x0 > $
44858	75	8	AbstractEstimator.java	updateJacobian	THIS	AbstractEstimator	0	NIL-FOR	i < $.rows
44858	75	8	AbstractEstimator.java	updateJacobian	i	int	0	NIL-FOR	$ < rows
44859	78	12	AbstractEstimator.java	updateJacobian	THIS	AbstractEstimator	0	NIL-FOR	j < $.cols
44859	78	12	AbstractEstimator.java	updateJacobian	j	int	0	NIL-FOR	$ < cols
678	99	8	AbstractEstimator.java	updateResidualsAndCost	THIS	AbstractEstimator	0	EstimationException	++$.costEvaluations > $.maxCostEval
44860	105	8	AbstractEstimator.java	updateResidualsAndCost	THIS	AbstractEstimator	0	NIL-FOR	i < $.rows
44860	105	8	AbstractEstimator.java	updateResidualsAndCost	i	int	0	NIL-FOR	$ < rows
44861	129	8	AbstractEstimator.java	getRMS	THIS	AbstractEstimator	0	NIL-FOR	i < wm.$.length
44861	129	8	AbstractEstimator.java	getRMS	i	int	0	NIL-FOR	$ < wm.length
44861	129	8	AbstractEstimator.java	getRMS	wm	WeightedMeasurement[]	0	NIL-FOR	i < $.length
44862	144	8	AbstractEstimator.java	getChiSquare	THIS	AbstractEstimator	0	NIL-FOR	i < wm.$.length
44862	144	8	AbstractEstimator.java	getChiSquare	i	int	0	NIL-FOR	$ < wm.length
44862	144	8	AbstractEstimator.java	getChiSquare	wm	WeightedMeasurement[]	0	NIL-FOR	i < $.length
44863	169	8	AbstractEstimator.java	getCovariances	i	int	0	NIL-FOR	$ < cols
44863	169	8	AbstractEstimator.java	getCovariances	cols	int	0	NIL-FOR	i < $
44864	170	12	AbstractEstimator.java	getCovariances	j	int	0	NIL-FOR	$ < cols
44864	170	12	AbstractEstimator.java	getCovariances	cols	int	0	NIL-FOR	j < $
44865	172	16	AbstractEstimator.java	getCovariances	k	int	0	NIL-FOR	$ < max
44865	172	16	AbstractEstimator.java	getCovariances	max	int	0	NIL-FOR	k < $
679	203	8	AbstractEstimator.java	guessParametersErrors	m	int	0	EstimationException	$ <= p
679	203	8	AbstractEstimator.java	guessParametersErrors	p	int	0	EstimationException	m <= $
44866	210	8	AbstractEstimator.java	guessParametersErrors	THIS	AbstractEstimator	0	NIL-FOR	i < errors.$.length
44866	210	8	AbstractEstimator.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
44866	210	8	AbstractEstimator.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
240	78	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	0	IllegalArgumentException	$ > x1
240	78	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	double	0	IllegalArgumentException	x0 > $
241	82	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	1	RET	Math.floor($) < $
242	116	8	AbstractIntegerDistribution.java	probability	fl	double	1	RET	$ == x
242	116	8	AbstractIntegerDistribution.java	probability	x	double	1	RET	fl == $
243	135	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	int	0	IllegalArgumentException	$ > x1
243	135	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	int	0	IllegalArgumentException	x0 > $
244	154	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	IllegalArgumentException	$ < 0.0
244	154	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	IllegalArgumentException	$ > 1.0
44595	164	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	0	NIL-WHILE	$ < x1
44595	164	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	0	NIL-WHILE	x0 < $
245	167	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	1	DEF	$ > p
245	167	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	1	DEF	pm > $
246	169	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x1
246	169	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	1	DEF	xm == $
247	179	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x0
247	179	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	1	DEF	xm == $
44596	192	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	0	NIL-WHILE	$ > p
44596	192	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	pm > $
606	63	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	IllegalArgumentException	$ == null
607	66	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	IllegalArgumentException	$ == null
608	69	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	IllegalArgumentException	x.$.length != y.$.length
608	69	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	IllegalArgumentException	$.length != y.length
608	69	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	IllegalArgumentException	x.length != $.length
609	84	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	IllegalArgumentException	$ == null
610	87	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	IllegalArgumentException	x.$.length != covariance.$.length
610	87	8	AbstractMultipleLinearRegression.java	validateCovarianceData	x	double[][]	0	IllegalArgumentException	$.length != covariance.length
610	87	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	IllegalArgumentException	x.length != $.length
611	91	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	IllegalArgumentException	covariance.$.length != covariance[0].length
611	91	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	IllegalArgumentException	covariance.$.length > 0
611	91	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	IllegalArgumentException	$.length != $[0].length
611	91	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	IllegalArgumentException	$.length > 0
44834	88	8	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	NIL-WHILE	bytesOut < bytes.$.length
44834	88	8	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	NIL-WHILE	$ < bytes.length
44834	88	8	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	bytesOut < $.length
44835	90	10	AbstractRandomGenerator.java	nextBytes	i	int	0	NIL-FOR	$ < 3
636	91	14	AbstractRandomGenerator.java	nextBytes	i	int	0	DEF	$ > 0
637	95	14	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	RET	bytesOut == bytes.$.length
637	95	14	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	RET	$ == bytes.length
637	95	14	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	RET	bytesOut == $.length
638	137	8	AbstractRandomGenerator.java	nextInt	n	int	0	IllegalArgumentException	$ <= 0
639	233	8	AbstractRandomGenerator.java	nextGaussian	THIS	AbstractRandomGenerator	0	RET	Double.isNaN($.cachedNormalDeviate)
44836	241	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	NIL-WHILE	$ >=1
640	246	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	DEF	$ != 0
738	138	4	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	1	DEF	interpolator.$.currentState != null
738	138	4	AbstractStepInterpolator.java	AbstractStepInterpolator	interpolator	AbstractStepInterpolator	1	DEF	$.currentState != null
739	347	4	AbstractStepInterpolator.java	finalizeStep	THIS	AbstractStepInterpolator	0	DEF	$.finalized
44936	392	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
44936	392	4	AbstractStepInterpolator.java	writeBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
44937	429	4	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
44937	429	4	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
459	59	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	IllegalArgumentException	$ == null
460	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
460	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	test($, begin, length)
460	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	begin	int	0	DEF	test(values, $, length)
460	87	8	AbstractStorelessUnivariateStatistic.java	evaluate	length	int	0	DEF	test(values, begin, $)
461	120	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	IllegalArgumentException	$ == null
462	139	8	AbstractStorelessUnivariateStatistic.java	incrementAll	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
462	139	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	test($, begin, length)
462	139	8	AbstractStorelessUnivariateStatistic.java	incrementAll	begin	int	0	DEF	test(values, $, length)
462	139	8	AbstractStorelessUnivariateStatistic.java	incrementAll	length	int	0	DEF	test(values, begin, $)
44780	141	12	AbstractStorelessUnivariateStatistic.java	incrementAll	i	int	0	NIL-FOR	$ < k
44780	141	12	AbstractStorelessUnivariateStatistic.java	incrementAll	k	int	0	NIL-FOR	i < $
463	155	8	AbstractStorelessUnivariateStatistic.java	equals	THIS	AbstractStorelessUnivariateStatistic	0	RET	object == $
463	155	8	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ == this
464	158	7	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ instanceof AbstractStorelessUnivariateStatistic == false
541	77	8	AbstractUnivariateStatistic.java	test	values	double[]	0	IllegalArgumentException	$ == null
542	81	8	AbstractUnivariateStatistic.java	test	begin	int	0	IllegalArgumentException	$ < 0
543	85	8	AbstractUnivariateStatistic.java	test	length	int	0	IllegalArgumentException	$ < 0
544	89	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	IllegalArgumentException	begin + length > values.$.length
544	89	8	AbstractUnivariateStatistic.java	test	values	double[]	0	IllegalArgumentException	begin + length > $.length
544	89	8	AbstractUnivariateStatistic.java	test	begin	int	0	IllegalArgumentException	$ + length > values.length
544	89	8	AbstractUnivariateStatistic.java	test	length	int	0	IllegalArgumentException	begin + $ > values.length
545	94	8	AbstractUnivariateStatistic.java	test	length	int	0	RET	$ == 0
878	133	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize < $.minStep
878	133	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize > $.maxStep
878	133	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ < minStep
878	133	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ > maxStep
879	179	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	equations.getDimension() != y0.$.length
879	179	6	AdaptiveStepsizeIntegrator.java	sanityChecks	equations	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y0.length
879	179	6	AdaptiveStepsizeIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	equations.getDimension() != $.length
880	187	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	equations.getDimension() != y.$.length
880	187	6	AdaptiveStepsizeIntegrator.java	sanityChecks	equations	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y.length
880	187	6	AdaptiveStepsizeIntegrator.java	sanityChecks	y	double[]	0	IntegratorException	equations.getDimension() != $.length
881	195	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecAbsoluteTolerance.$.length != y0.$.length
881	195	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecAbsoluteTolerance != null
881	195	6	AdaptiveStepsizeIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	vecAbsoluteTolerance.length != $.length
882	203	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecRelativeTolerance != null
882	203	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecRelativeTolerance.$.length != y0.$.length
882	203	6	AdaptiveStepsizeIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	vecRelativeTolerance.length != $.length
883	211	6	AdaptiveStepsizeIntegrator.java	sanityChecks	t0	double	0	IntegratorException	Math.abs(t - $) <= 1.0e-12 * Math.max(Math.abs($), Math.abs(t))
883	211	6	AdaptiveStepsizeIntegrator.java	sanityChecks	t	double	0	IntegratorException	Math.abs($ - t0) <= 1.0e-12 * Math.max(Math.abs(t0), Math.abs($))
884	238	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	RET	$.initialStep > 0
45035	248	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
45035	248	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
45035	248	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
885	257	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
45036	262	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
45036	262	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
45036	262	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
45037	269	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
45037	269	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
45037	269	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
886	283	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < $.getMinStep()
886	283	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ < getMinStep()
887	286	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h > $.getMaxStep()
887	286	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ > getMaxStep()
888	289	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
889	309	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	Math.abs(h) < $.minStep
889	309	6	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	IntegratorException	Math.abs($) < minStep
890	310	10	AdaptiveStepsizeIntegrator.java	filterStep	acceptSmall	boolean	1	DEF	$
891	322	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	1	DEF	filteredH > $.maxStep
891	322	6	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	1	DEF	$ > maxStep
892	324	13	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < -$.maxStep
892	324	13	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	DEF	$ < -maxStep
713	126	8	Beta.java	regularizedBeta	x	double	1	DEF	$ < 0
713	126	8	Beta.java	regularizedBeta	x	double	1	DEF	Double.isNaN($)
713	126	8	Beta.java	regularizedBeta	x	double	1	DEF	$ > 1
713	126	8	Beta.java	regularizedBeta	a	double	1	DEF	$ <= 0.0
713	126	8	Beta.java	regularizedBeta	a	double	1	DEF	Double.isNaN($)
713	126	8	Beta.java	regularizedBeta	b	double	1	DEF	$ <= 0.0
713	126	8	Beta.java	regularizedBeta	b	double	1	DEF	Double.isNaN($)
714	130	15	Beta.java	regularizedBeta	x	double	1	DEF	$ > (a + 1.0) / (a + b + 2.0)
714	130	15	Beta.java	regularizedBeta	a	double	1	DEF	x > ($ + 1.0) / ($ + b + 2.0)
714	130	15	Beta.java	regularizedBeta	b	double	1	DEF	x > (a + 1.0) / (a + $ + 2.0)
715	197	8	Beta.java	logBeta	a	double	1	DEF	$ <= 0.0
715	197	8	Beta.java	logBeta	a	double	1	DEF	Double.isNaN($)
715	197	8	Beta.java	logBeta	b	double	1	DEF	Double.isNaN($)
715	197	8	Beta.java	logBeta	b	double	1	DEF	$ <= 0.0
329	98	8	BigMatrixImpl.java	BigMatrixImpl	rowDimension	int	0	IllegalArgumentException	$ <=0
329	98	8	BigMatrixImpl.java	BigMatrixImpl	columnDimension	int	0	IllegalArgumentException	$ <=0
330	139	8	BigMatrixImpl.java	BigMatrixImpl	copyArray	boolean	1	DEF	$
331	142	12	BigMatrixImpl.java	BigMatrixImpl	d	BigDecimal[][]	0	NullPointerException	$ == null
332	146	12	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	IllegalArgumentException	$ == 0
333	150	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	$ == 0
44598	153	12	BigMatrixImpl.java	BigMatrixImpl	r	int	0	NIL-FOR	$ < nRows
44598	153	12	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	r < $
334	154	16	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	IllegalArgumentException	d[r].length != nCols
334	154	16	BigMatrixImpl.java	BigMatrixImpl	r	int	0	IllegalArgumentException	d[$].length != nCols
334	154	16	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	d[r].length != $
334	154	16	BigMatrixImpl.java	BigMatrixImpl	d	BigDecimal[][]	0	IllegalArgumentException	$[r].length != nCols
335	176	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	IllegalArgumentException	$ == 0
336	181	8	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	$ == 0
44599	185	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
44599	185	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
337	186	12	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	IllegalArgumentException	d[row].length != nCols
337	186	12	BigMatrixImpl.java	BigMatrixImpl	row	int	0	IllegalArgumentException	d[$].length != nCols
337	186	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	d[row].length != $
337	186	12	BigMatrixImpl.java	BigMatrixImpl	d	double[][]	0	IllegalArgumentException	$[row].length != nCols
338	206	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	IllegalArgumentException	$ == 0
339	211	8	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	$ == 0
44600	215	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
44600	215	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
340	216	12	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	IllegalArgumentException	d[row].length != nCols
340	216	12	BigMatrixImpl.java	BigMatrixImpl	row	int	0	IllegalArgumentException	d[$].length != nCols
340	216	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	IllegalArgumentException	d[row].length != $
340	216	12	BigMatrixImpl.java	BigMatrixImpl	d	String[][]	0	IllegalArgumentException	$[row].length != nCols
44601	237	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
44601	237	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
341	264	12	BigMatrixImpl.java	add	rowCount	int	0	IllegalArgumentException	$ != m.getRowDimension()
341	264	12	BigMatrixImpl.java	add	columnCount	int	0	IllegalArgumentException	$ != m.getColumnDimension()
341	264	12	BigMatrixImpl.java	add	m	BigMatrix	0	IllegalArgumentException	rowCount != $.getRowDimension()
341	264	12	BigMatrixImpl.java	add	m	BigMatrix	0	IllegalArgumentException	columnCount != $.getColumnDimension()
44602	268	12	BigMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
44602	268	12	BigMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
44603	271	16	BigMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
44603	271	16	BigMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
342	289	8	BigMatrixImpl.java	add	rowCount	int	0	IllegalArgumentException	$ != m.getRowDimension()
342	289	8	BigMatrixImpl.java	add	columnCount	int	0	IllegalArgumentException	$ != m.getColumnDimension()
342	289	8	BigMatrixImpl.java	add	m	BigMatrixImpl	0	IllegalArgumentException	rowCount != $.getRowDimension()
342	289	8	BigMatrixImpl.java	add	m	BigMatrixImpl	0	IllegalArgumentException	columnCount != $.getColumnDimension()
44604	293	8	BigMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
44604	293	8	BigMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
44605	297	12	BigMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
44605	297	12	BigMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
343	317	12	BigMatrixImpl.java	subtract	rowCount	int	0	IllegalArgumentException	$ != m.getRowDimension()
343	317	12	BigMatrixImpl.java	subtract	columnCount	int	0	IllegalArgumentException	$ != m.getColumnDimension()
343	317	12	BigMatrixImpl.java	subtract	m	BigMatrix	0	IllegalArgumentException	columnCount != $.getColumnDimension()
343	317	12	BigMatrixImpl.java	subtract	m	BigMatrix	0	IllegalArgumentException	rowCount != $.getRowDimension()
44606	321	12	BigMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
44606	321	12	BigMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
44607	324	16	BigMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
44607	324	16	BigMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
344	342	8	BigMatrixImpl.java	subtract	rowCount	int	0	IllegalArgumentException	$ != m.getRowDimension()
344	342	8	BigMatrixImpl.java	subtract	columnCount	int	0	IllegalArgumentException	$ != m.getColumnDimension()
344	342	8	BigMatrixImpl.java	subtract	m	BigMatrixImpl	0	IllegalArgumentException	columnCount != $.getColumnDimension()
344	342	8	BigMatrixImpl.java	subtract	m	BigMatrixImpl	0	IllegalArgumentException	rowCount != $.getRowDimension()
44608	346	8	BigMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
44608	346	8	BigMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
44609	350	12	BigMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
44609	350	12	BigMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
44610	367	8	BigMatrixImpl.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
44610	367	8	BigMatrixImpl.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
44611	370	12	BigMatrixImpl.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
44611	370	12	BigMatrixImpl.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
44612	386	8	BigMatrixImpl.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
44612	386	8	BigMatrixImpl.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
44613	389	12	BigMatrixImpl.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
44613	389	12	BigMatrixImpl.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
345	407	12	BigMatrixImpl.java	multiply	THIS	BigMatrixImpl	0	IllegalArgumentException	$.getColumnDimension() != m.getRowDimension()
345	407	12	BigMatrixImpl.java	multiply	m	BigMatrix	0	IllegalArgumentException	this.getColumnDimension() != $.getRowDimension()
44614	414	12	BigMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
44614	414	12	BigMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
44615	417	16	BigMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
44615	417	16	BigMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
44616	419	20	BigMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
44616	419	20	BigMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
346	437	8	BigMatrixImpl.java	multiply	THIS	BigMatrixImpl	0	IllegalArgumentException	$.getColumnDimension() != m.getRowDimension()
346	437	8	BigMatrixImpl.java	multiply	m	BigMatrixImpl	0	IllegalArgumentException	this.getColumnDimension() != $.getRowDimension()
44617	444	8	BigMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
44617	444	8	BigMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
44618	447	12	BigMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
44618	447	12	BigMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
44619	449	16	BigMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
44619	449	16	BigMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
44620	492	8	BigMatrixImpl.java	getDataAsDoubleArray	i	int	0	NIL-FOR	$ < nRows
44620	492	8	BigMatrixImpl.java	getDataAsDoubleArray	nRows	int	0	NIL-FOR	i < $
44621	493	12	BigMatrixImpl.java	getDataAsDoubleArray	j	int	0	NIL-FOR	$ < nCols
44621	493	12	BigMatrixImpl.java	getDataAsDoubleArray	nCols	int	0	NIL-FOR	j < $
44622	557	8	BigMatrixImpl.java	getNorm	THIS	BigMatrixImpl	0	NIL-FOR	col < $.getColumnDimension()
44622	557	8	BigMatrixImpl.java	getNorm	col	int	0	NIL-FOR	$ < this.getColumnDimension()
44623	559	12	BigMatrixImpl.java	getNorm	THIS	BigMatrixImpl	0	NIL-FOR	row < $.getRowDimension()
44623	559	12	BigMatrixImpl.java	getNorm	row	int	0	NIL-FOR	$ < this.getRowDimension()
347	582	8	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	endRow > $.data.$.length
347	582	8	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	endColumn > $.data[0].length
347	582	8	BigMatrixImpl.java	getSubMatrix	startRow	int	0	MatrixIndexException	$ < 0
347	582	8	BigMatrixImpl.java	getSubMatrix	startRow	int	0	MatrixIndexException	$ > endRow
347	582	8	BigMatrixImpl.java	getSubMatrix	endRow	int	0	MatrixIndexException	startRow > $
347	582	8	BigMatrixImpl.java	getSubMatrix	endRow	int	0	MatrixIndexException	$ > data.length
347	582	8	BigMatrixImpl.java	getSubMatrix	startColumn	int	0	MatrixIndexException	$ > endColumn
347	582	8	BigMatrixImpl.java	getSubMatrix	startColumn	int	0	MatrixIndexException	$ < 0
347	582	8	BigMatrixImpl.java	getSubMatrix	endColumn	int	0	MatrixIndexException	startColumn > $
347	582	8	BigMatrixImpl.java	getSubMatrix	endColumn	int	0	MatrixIndexException	$ > data[0].length
44624	590	8	BigMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
44624	590	8	BigMatrixImpl.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
348	611	8	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
348	611	8	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
348	611	8	BigMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
44625	618	12	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	NIL-FOR	i < selectedRows.$.length
44625	618	12	BigMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
44625	618	12	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
44626	621	16	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	NIL-FOR	j < selectedColumns.$.length
44626	621	16	BigMatrixImpl.java	getSubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
44626	621	16	BigMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
349	661	8	BigMatrixImpl.java	setSubMatrix	row	int	0	MatrixIndexException	$ < 0
349	661	8	BigMatrixImpl.java	setSubMatrix	column	int	0	MatrixIndexException	$ < 0
350	666	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	IllegalArgumentException	$ == 0
351	671	8	BigMatrixImpl.java	setSubMatrix	nCols	int	0	IllegalArgumentException	$ == 0
44627	675	8	BigMatrixImpl.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
44627	675	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
352	676	12	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	0	IllegalArgumentException	subMatrix[r].length != nCols
352	676	12	BigMatrixImpl.java	setSubMatrix	r	int	0	IllegalArgumentException	subMatrix[$].length != nCols
352	676	12	BigMatrixImpl.java	setSubMatrix	nCols	int	0	IllegalArgumentException	subMatrix[r].length != $
352	676	12	BigMatrixImpl.java	setSubMatrix	subMatrix	BigDecimal[][]	0	IllegalArgumentException	$[r].length != nCols
353	681	8	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	$.data == null
354	682	12	BigMatrixImpl.java	setSubMatrix	row	int	0	MatrixIndexException	$ > 0
354	682	12	BigMatrixImpl.java	setSubMatrix	column	int	0	MatrixIndexException	$ > 0
355	687	8	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	nCols + column > $.getColumnDimension()
355	687	8	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	(nRows + row) > $.getRowDimension()
355	687	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	MatrixIndexException	($ + row) > this.getRowDimension()
355	687	8	BigMatrixImpl.java	setSubMatrix	nCols	int	0	MatrixIndexException	$ + column > this.getColumnDimension()
355	687	8	BigMatrixImpl.java	setSubMatrix	row	int	0	MatrixIndexException	(nRows + $) > this.getRowDimension()
355	687	8	BigMatrixImpl.java	setSubMatrix	column	int	0	MatrixIndexException	nCols + $ > this.getColumnDimension()
44628	691	8	BigMatrixImpl.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
44628	691	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
356	706	8	BigMatrixImpl.java	getRowMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	$.isValidCoordinate( row, 0)
356	706	8	BigMatrixImpl.java	getRowMatrix	row	int	0	MatrixIndexException	isValidCoordinate( $, 0)
357	724	8	BigMatrixImpl.java	getColumnMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	$.isValidCoordinate( 0, column)
357	724	8	BigMatrixImpl.java	getColumnMatrix	column	int	0	MatrixIndexException	isValidCoordinate( 0, $)
44629	729	8	BigMatrixImpl.java	getColumnMatrix	row	int	0	NIL-FOR	$ < nRows
44629	729	8	BigMatrixImpl.java	getColumnMatrix	nRows	int	0	NIL-FOR	row < $
358	746	8	BigMatrixImpl.java	getRow	THIS	BigMatrixImpl	0	MatrixIndexException	$.isValidCoordinate( row, 0 )
358	746	8	BigMatrixImpl.java	getRow	row	int	0	MatrixIndexException	isValidCoordinate( $, 0 )
359	767	8	BigMatrixImpl.java	getRowAsDoubleArray	THIS	BigMatrixImpl	0	MatrixIndexException	$.isValidCoordinate( row, 0 )
359	767	8	BigMatrixImpl.java	getRowAsDoubleArray	row	int	0	MatrixIndexException	isValidCoordinate( $, 0 )
44630	772	8	BigMatrixImpl.java	getRowAsDoubleArray	i	int	0	NIL-FOR	$<ncols
44630	772	8	BigMatrixImpl.java	getRowAsDoubleArray	ncols	int	0	NIL-FOR	i<$
360	789	8	BigMatrixImpl.java	getColumn	THIS	BigMatrixImpl	0	MatrixIndexException	$.isValidCoordinate(0, col)
360	789	8	BigMatrixImpl.java	getColumn	col	int	0	MatrixIndexException	isValidCoordinate(0, $)
44631	794	8	BigMatrixImpl.java	getColumn	i	int	0	NIL-FOR	$ < nRows
44631	794	8	BigMatrixImpl.java	getColumn	nRows	int	0	NIL-FOR	i < $
361	812	8	BigMatrixImpl.java	getColumnAsDoubleArray	THIS	BigMatrixImpl	0	MatrixIndexException	$.isValidCoordinate( 0, col )
361	812	8	BigMatrixImpl.java	getColumnAsDoubleArray	col	int	0	MatrixIndexException	isValidCoordinate( 0, $ )
44632	817	8	BigMatrixImpl.java	getColumnAsDoubleArray	i	int	0	NIL-FOR	$<nrows
44632	817	8	BigMatrixImpl.java	getColumnAsDoubleArray	nrows	int	0	NIL-FOR	i<$
44633	876	8	BigMatrixImpl.java	transpose	row	int	0	NIL-FOR	$ < nRows
44633	876	8	BigMatrixImpl.java	transpose	nRows	int	0	NIL-FOR	row < $
44634	878	12	BigMatrixImpl.java	transpose	col	int	0	NIL-FOR	$ < nCols
44634	878	12	BigMatrixImpl.java	transpose	nCols	int	0	NIL-FOR	col < $
362	902	8	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	0	InvalidMatrixException	$.isSquare()
363	905	8	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	1	RET	$.isSingular()
44635	909	12	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
44635	909	12	BigMatrixImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < this.getRowDimension()
364	929	8	BigMatrixImpl.java	isSingular	THIS	BigMatrixImpl	1	RET	$.lu == null
365	968	8	BigMatrixImpl.java	getTrace	THIS	BigMatrixImpl	0	IllegalArgumentException	$.isSquare()
44636	972	8	BigMatrixImpl.java	getTrace	THIS	BigMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
44636	972	8	BigMatrixImpl.java	getTrace	i	int	0	NIL-FOR	$ < this.getRowDimension()
366	986	8	BigMatrixImpl.java	operate	THIS	BigMatrixImpl	0	IllegalArgumentException	v.$.length != $.getColumnDimension()
366	986	8	BigMatrixImpl.java	operate	v	BigDecimal[]	0	IllegalArgumentException	$.length != this.getColumnDimension()
44637	992	8	BigMatrixImpl.java	operate	row	int	0	NIL-FOR	$ < nRows
44637	992	8	BigMatrixImpl.java	operate	nRows	int	0	NIL-FOR	row < $
44638	994	12	BigMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < nCols
44638	994	12	BigMatrixImpl.java	operate	nCols	int	0	NIL-FOR	i < $
44639	1011	8	BigMatrixImpl.java	operate	THIS	BigMatrixImpl	0	NIL-FOR	i < bd.$.length
44639	1011	8	BigMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < bd.length
44639	1011	8	BigMatrixImpl.java	operate	bd	BigDecimal[]	0	NIL-FOR	i < $.length
367	1026	8	BigMatrixImpl.java	preMultiply	THIS	BigMatrixImpl	0	IllegalArgumentException	v.$.length != nRows
367	1026	8	BigMatrixImpl.java	preMultiply	nRows	int	0	IllegalArgumentException	v.length != $
367	1026	8	BigMatrixImpl.java	preMultiply	v	BigDecimal[]	0	IllegalArgumentException	$.length != nRows
44640	1031	8	BigMatrixImpl.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
44640	1031	8	BigMatrixImpl.java	preMultiply	nCols	int	0	NIL-FOR	col < $
44641	1033	12	BigMatrixImpl.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
44641	1033	12	BigMatrixImpl.java	preMultiply	nRows	int	0	NIL-FOR	i < $
368	1054	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	IllegalArgumentException	b.$.length != nRows
368	1054	8	BigMatrixImpl.java	solve	nRows	int	0	IllegalArgumentException	b.length != $
368	1054	8	BigMatrixImpl.java	solve	b	BigDecimal[]	0	IllegalArgumentException	$.length != nRows
44642	1060	8	BigMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRows
44642	1060	8	BigMatrixImpl.java	solve	nRows	int	0	NIL-FOR	row < $
44643	1079	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	NIL-FOR	i < bd.$.length
44643	1079	8	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < bd.length
44643	1079	8	BigMatrixImpl.java	solve	bd	BigDecimal[]	0	NIL-FOR	i < $.length
369	1097	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	IllegalArgumentException	b.getRowDimension() != $.getRowDimension()
369	1097	8	BigMatrixImpl.java	solve	b	BigMatrix	0	IllegalArgumentException	$.getRowDimension() != this.getRowDimension()
370	1100	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	InvalidMatrixException	$.isSquare()
371	1103	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	InvalidMatrixException	$.isSingular()
44644	1113	8	BigMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRowB
44644	1113	8	BigMatrixImpl.java	solve	nRowB	int	0	NIL-FOR	row < $
44645	1115	12	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nColB
44645	1115	12	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	col < $
44646	1121	8	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nCol
44646	1121	8	BigMatrixImpl.java	solve	nCol	int	0	NIL-FOR	col < $
44647	1122	12	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < nCol
44647	1122	12	BigMatrixImpl.java	solve	nCol	int	0	NIL-FOR	i < $
44648	1125	16	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
44648	1125	16	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
44649	1132	8	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ >= 0
44650	1135	12	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
44650	1135	12	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
44651	1138	12	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < col
44651	1138	12	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	i < $
44652	1141	16	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
44652	1141	16	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
372	1173	8	BigMatrixImpl.java	luDecompose	nRows	int	0	InvalidMatrixException	$ != nCols
372	1173	8	BigMatrixImpl.java	luDecompose	nCols	int	0	InvalidMatrixException	nRows != $
44653	1180	8	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
44653	1180	8	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
44654	1186	8	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	$ < nCols
44654	1186	8	BigMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	col < $
44655	1191	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < col
44655	1191	12	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	row < $
44656	1194	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < row
44656	1194	16	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	i < $
44657	1203	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
44657	1203	12	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
44658	1206	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < col
44658	1206	16	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	i < $
373	1212	16	BigMatrixImpl.java	luDecompose	sum	BigDecimal	0	DEF	$.abs().compareTo(largest) == 1
373	1212	16	BigMatrixImpl.java	luDecompose	largest	BigDecimal	0	DEF	sum.abs().compareTo($) == 1
374	1219	12	BigMatrixImpl.java	luDecompose	THIS	BigMatrixImpl	0	InvalidMatrixException	$.lu[max][col].abs().compareTo(TOO_SMALL) <= 0
374	1219	12	BigMatrixImpl.java	luDecompose	max	int	0	InvalidMatrixException	lu[$][col].abs().compareTo(TOO_SMALL) <= 0
374	1219	12	BigMatrixImpl.java	luDecompose	col	int	0	InvalidMatrixException	lu[max][$].abs().compareTo(TOO_SMALL) <= 0
375	1225	12	BigMatrixImpl.java	luDecompose	max	int	0	DEF	$ != col
375	1225	12	BigMatrixImpl.java	luDecompose	col	int	0	DEF	max != $
44659	1227	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < nCols
44659	1227	16	BigMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	i < $
44660	1240	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
44660	1240	12	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
376	1256	8	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	DEF	$.data != null
44661	1257	12	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	NIL-FOR	i < $.data.$.length
44661	1257	12	BigMatrixImpl.java	toString	i	int	0	NIL-FOR	$ < data.length
377	1258	16	BigMatrixImpl.java	toString	i	int	0	DEF	$ > 0
44662	1262	16	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	NIL-FOR	j < $.data[0].length
44662	1262	16	BigMatrixImpl.java	toString	j	int	0	NIL-FOR	$ < data[0].length
378	1263	20	BigMatrixImpl.java	toString	j	int	0	DEF	$ > 0
379	1285	8	BigMatrixImpl.java	equals	THIS	BigMatrixImpl	0	RET	object == $
379	1285	8	BigMatrixImpl.java	equals	object	Object	0	RET	$ == this
380	1288	8	BigMatrixImpl.java	equals	object	Object	0	RET	$ instanceof BigMatrixImpl == false
381	1294	8	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	$.getRowDimension() != nRows
381	1294	8	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	$.getColumnDimension() != nCols
381	1294	8	BigMatrixImpl.java	equals	nRows	int	0	RET	m.getRowDimension() != $
381	1294	8	BigMatrixImpl.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
44663	1297	8	BigMatrixImpl.java	equals	row	int	0	NIL-FOR	$ < nRows
44663	1297	8	BigMatrixImpl.java	equals	nRows	int	0	NIL-FOR	row < $
44664	1299	12	BigMatrixImpl.java	equals	col	int	0	NIL-FOR	$ < nCols
44664	1299	12	BigMatrixImpl.java	equals	nCols	int	0	NIL-FOR	col < $
382	1300	16	BigMatrixImpl.java	equals	col	int	0	RET	dataRow[$].equals(m.getEntry(row, $))
382	1300	16	BigMatrixImpl.java	equals	dataRow	BigDecimal[]	0	RET	$[col].equals(m.getEntry(row, col))
382	1300	16	BigMatrixImpl.java	equals	row	int	0	RET	dataRow[col].equals(m.getEntry($, col))
382	1300	16	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	dataRow[col].equals($.getEntry(row, col))
44665	1319	8	BigMatrixImpl.java	hashCode	row	int	0	NIL-FOR	$ < nRows
44665	1319	8	BigMatrixImpl.java	hashCode	nRows	int	0	NIL-FOR	row < $
44666	1321	12	BigMatrixImpl.java	hashCode	col	int	0	NIL-FOR	$ < nCols
44666	1321	12	BigMatrixImpl.java	hashCode	nCols	int	0	NIL-FOR	col < $
383	1359	8	BigMatrixImpl.java	getLUMatrix	THIS	BigMatrixImpl	0	DEF	$.lu == null
44667	1394	8	BigMatrixImpl.java	copyOut	i	int	0	NIL-FOR	$ < nRows
44667	1394	8	BigMatrixImpl.java	copyOut	nRows	int	0	NIL-FOR	i < $
44668	1423	8	BigMatrixImpl.java	copyIn	i	int	0	NIL-FOR	$ < nRows
44668	1423	8	BigMatrixImpl.java	copyIn	nRows	int	0	NIL-FOR	i < $
44669	1426	12	BigMatrixImpl.java	copyIn	j	int	0	NIL-FOR	$ < nCols
44669	1426	12	BigMatrixImpl.java	copyIn	nCols	int	0	NIL-FOR	j < $
44670	1443	8	BigMatrixImpl.java	copyIn	i	int	0	NIL-FOR	$ < nRows
44670	1443	8	BigMatrixImpl.java	copyIn	nRows	int	0	NIL-FOR	i < $
44671	1446	12	BigMatrixImpl.java	copyIn	j	int	0	NIL-FOR	$ < nCols
44671	1446	12	BigMatrixImpl.java	copyIn	nCols	int	0	NIL-FOR	j < $
273	78	8	BinomialDistributionImpl.java	setNumberOfTrials	trials	int	0	IllegalArgumentException	$ < 0
274	91	8	BinomialDistributionImpl.java	setProbabilityOfSuccess	p	double	0	IllegalArgumentException	$ < 0.0
274	91	8	BinomialDistributionImpl.java	setProbabilityOfSuccess	p	double	0	IllegalArgumentException	$ > 1.0
275	130	8	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
276	132	15	BinomialDistributionImpl.java	cumulativeProbability	THIS	BinomialDistributionImpl	1	DEF	x >= $.getNumberOfTrials()
276	132	15	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= getNumberOfTrials()
277	152	8	BinomialDistributionImpl.java	probability	THIS	BinomialDistributionImpl	1	DEF	x > $.getNumberOfTrials()
277	152	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ < 0
277	152	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ > getNumberOfTrials()
278	179	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
279	182	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
45070	83	8	BisectionSolver.java	solve	THIS	BisectionSolver	0	NIL-WHILE	i < $.maximalIterationCount
45070	83	8	BisectionSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
977	88	12	BisectionSolver.java	solve	fm	double	1	DEF	$ * fmin > 0.0
977	88	12	BisectionSolver.java	solve	fmin	double	1	DEF	fm * $ > 0.0
978	96	12	BisectionSolver.java	solve	THIS	BisectionSolver	0	RET	Math.abs(max - min) <= $.absoluteAccuracy
978	96	12	BisectionSolver.java	solve	min	double	0	RET	Math.abs(max - $) <= absoluteAccuracy
978	96	12	BisectionSolver.java	solve	max	double	0	RET	Math.abs($ - min) <= absoluteAccuracy
999	67	8	BrentSolver.java	solve	min	double	0	IllegalArgumentException	((initial - $) * (max -initial)) < 0
999	67	8	BrentSolver.java	solve	max	double	0	IllegalArgumentException	((initial - min) * ($ -initial)) < 0
999	67	8	BrentSolver.java	solve	initial	double	0	IllegalArgumentException	(($ - min) * (max -$)) < 0
1000	75	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yInitial) <= $.functionValueAccuracy
1000	75	8	BrentSolver.java	solve	yInitial	double	0	RET	Math.abs($) <= functionValueAccuracy
1001	82	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yMin) <= $.functionValueAccuracy
1001	82	8	BrentSolver.java	solve	yMin	double	0	RET	Math.abs($) <= functionValueAccuracy
1002	88	8	BrentSolver.java	solve	yInitial	double	0	RET	$ * yMin < 0
1002	88	8	BrentSolver.java	solve	yMin	double	0	RET	yInitial * $ < 0
1003	94	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yMax) <= $.functionValueAccuracy
1003	94	8	BrentSolver.java	solve	yMax	double	0	RET	Math.abs($) <= functionValueAccuracy
1004	100	8	BrentSolver.java	solve	yInitial	double	0	RET	$ * yMax < 0
1004	100	8	BrentSolver.java	solve	yMax	double	0	RET	yInitial * $ < 0
1005	138	8	BrentSolver.java	solve	sign	double	1	IllegalArgumentException	$ >= 0
45085	179	8	BrentSolver.java	solve	THIS	BrentSolver	0	NIL-WHILE	i < $.maximalIterationCount
45085	179	8	BrentSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1006	180	12	BrentSolver.java	solve	y1	double	0	DEF	Math.abs(y2) < Math.abs($)
1006	180	12	BrentSolver.java	solve	y2	double	0	DEF	Math.abs($) < Math.abs(y1)
1007	189	12	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(y1) <= $.functionValueAccuracy
1007	189	12	BrentSolver.java	solve	y1	double	0	RET	Math.abs($) <= functionValueAccuracy
1008	199	12	BrentSolver.java	solve	dx	double	0	RET	Math.abs($) <= tolerance
1008	199	12	BrentSolver.java	solve	tolerance	double	0	RET	Math.abs(dx) <= $
1009	203	12	BrentSolver.java	solve	tolerance	double	1	DEF	Math.abs(oldDelta) < $
1009	203	12	BrentSolver.java	solve	oldDelta	double	1	DEF	Math.abs($) < tolerance
1009	203	12	BrentSolver.java	solve	y0	double	1	DEF	Math.abs($) <= Math.abs(y1)
1009	203	12	BrentSolver.java	solve	y1	double	1	DEF	Math.abs(y0) <= Math.abs($)
1010	215	16	BrentSolver.java	solve	x0	double	1	DEF	$ == x2
1010	215	16	BrentSolver.java	solve	x2	double	1	DEF	x0 == $
1011	226	16	BrentSolver.java	solve	p	double	1	DEF	$ > 0.0
1012	231	16	BrentSolver.java	solve	p	double	1	DEF	$ >= Math.abs(0.5 * oldDelta * p1)
1012	231	16	BrentSolver.java	solve	p	double	1	DEF	2.0 * $ >= 1.5 * dx * p1 - Math.abs(tolerance * p1)
1012	231	16	BrentSolver.java	solve	p1	double	1	DEF	p >= Math.abs(0.5 * oldDelta * $)
1012	231	16	BrentSolver.java	solve	p1	double	1	DEF	2.0 * p >= 1.5 * dx * $ - Math.abs(tolerance * $)
1012	231	16	BrentSolver.java	solve	dx	double	1	DEF	2.0 * p >= 1.5 * $ * p1 - Math.abs(tolerance * p1)
1012	231	16	BrentSolver.java	solve	tolerance	double	1	DEF	2.0 * p >= 1.5 * dx * p1 - Math.abs($ * p1)
1012	231	16	BrentSolver.java	solve	oldDelta	double	1	DEF	p >= Math.abs(0.5 * $ * p1)
1013	247	12	BrentSolver.java	solve	tolerance	double	1	DEF	Math.abs(delta) > $
1013	247	12	BrentSolver.java	solve	delta	double	1	DEF	Math.abs($) > tolerance
1014	249	19	BrentSolver.java	solve	dx	double	1	DEF	$ > 0.0
1015	251	19	BrentSolver.java	solve	dx	double	0	DEF	$ <= 0.0
1016	255	12	BrentSolver.java	solve	y1	double	0	DEF	($ > 0) == (y2 > 0)
1016	255	12	BrentSolver.java	solve	y2	double	0	DEF	(y1 > 0) == ($ > 0)
298	99	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ > 1.0
298	99	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ < 0.0
299	102	15	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
300	104	16	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
301	126	8	CauchyDistributionImpl.java	setScale	s	double	0	IllegalArgumentException	$ <= 0.0
302	145	8	CauchyDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < .5
303	166	8	CauchyDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
304	186	8	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
305	188	15	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > .5
551	65	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	IllegalArgumentException	expected.$.length != observed.$.length
551	65	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	IllegalArgumentException	expected.$.length < 2
551	65	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	IllegalArgumentException	$.length != observed.length
551	65	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	IllegalArgumentException	$.length < 2
551	65	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	IllegalArgumentException	expected.length != $.length
552	69	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isPositive(expected)
552	69	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isNonNegative(observed)
552	69	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	IllegalArgumentException	isPositive($)
552	69	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	IllegalArgumentException	isNonNegative($)
44800	75	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
44800	75	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
44800	75	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
553	81	8	ChiSquareTestImpl.java	chiSquare	sumExpected	double	0	DEF	Math.abs($ - sumObserved) > 10E-6
553	81	8	ChiSquareTestImpl.java	chiSquare	sumObserved	double	0	DEF	Math.abs(sumExpected - $) > 10E-6
44801	87	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
44801	87	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
44801	87	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
554	88	12	ChiSquareTestImpl.java	chiSquare	rescale	boolean	1	DEF	$
555	134	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	IllegalArgumentException	$ > 0.5
555	134	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	IllegalArgumentException	$ <= 0
44802	156	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
44802	156	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
44803	157	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
44803	157	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
44804	167	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
44804	167	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
44805	168	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
44805	168	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
556	201	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	IllegalArgumentException	$ <= 0
556	201	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	IllegalArgumentException	$ > 0.5
557	218	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	IllegalArgumentException	observed1.$.length < 2
557	218	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	IllegalArgumentException	observed1.$.length != observed2.$.length
557	218	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	IllegalArgumentException	$.length < 2
557	218	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	IllegalArgumentException	$.length != observed2.length
557	218	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	0	IllegalArgumentException	observed1.length != $.length
558	223	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isNonNegative(observed1)
558	223	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isNonNegative(observed2)
558	223	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	IllegalArgumentException	isNonNegative($)
558	223	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	0	IllegalArgumentException	isNonNegative($)
44806	232	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
44806	232	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
44806	232	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
559	237	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum1	long	0	IllegalArgumentException	$ * countSum2 == 0
559	237	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum2	long	0	IllegalArgumentException	countSum1 * $ == 0
560	243	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	0	DEF	$
44807	251	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
44807	251	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
44807	251	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
561	252	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	IllegalArgumentException	observed2[$] == 0
561	252	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	IllegalArgumentException	observed1[$] == 0
561	252	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	1	IllegalArgumentException	$[i] == 0
561	252	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	1	IllegalArgumentException	$[i] == 0
562	258	16	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	1	DEF	$
563	296	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	IllegalArgumentException	$ <= 0
563	296	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	IllegalArgumentException	$ > 0.5
564	313	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	IllegalArgumentException	in.$.length < 2
564	313	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	IllegalArgumentException	$.length < 2
565	317	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	IllegalArgumentException	in[0].length < 2
565	317	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	IllegalArgumentException	$[0].length < 2
566	321	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isRectangular(in)
566	321	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	IllegalArgumentException	isRectangular($)
567	325	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	IllegalArgumentException	$.isNonNegative(in)
567	325	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	IllegalArgumentException	isNonNegative($)
44808	342	8	ChiSquareTestImpl.java	isRectangular	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
44808	342	8	ChiSquareTestImpl.java	isRectangular	i	int	0	NIL-FOR	$ < in.length
44808	342	8	ChiSquareTestImpl.java	isRectangular	in	long[][]	0	NIL-FOR	i < $.length
568	343	12	ChiSquareTestImpl.java	isRectangular	THIS	ChiSquareTestImpl	0	RET	in[i].length != in[0].length
568	343	12	ChiSquareTestImpl.java	isRectangular	i	int	0	RET	in[$].length != in[0].length
568	343	12	ChiSquareTestImpl.java	isRectangular	in	long[][]	0	RET	$[i].length != $[0].length
44809	359	8	ChiSquareTestImpl.java	isPositive	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
44809	359	8	ChiSquareTestImpl.java	isPositive	i	int	0	NIL-FOR	$ < in.length
44809	359	8	ChiSquareTestImpl.java	isPositive	in	double[]	0	NIL-FOR	i < $.length
569	360	12	ChiSquareTestImpl.java	isPositive	i	int	0	RET	in[$] <= 0
569	360	12	ChiSquareTestImpl.java	isPositive	in	double[]	0	RET	$[i] <= 0
44810	376	8	ChiSquareTestImpl.java	isNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
44810	376	8	ChiSquareTestImpl.java	isNonNegative	i	int	0	NIL-FOR	$ < in.length
44810	376	8	ChiSquareTestImpl.java	isNonNegative	in	long[]	0	NIL-FOR	i < $.length
570	377	12	ChiSquareTestImpl.java	isNonNegative	i	int	0	RET	in[$] < 0
570	377	12	ChiSquareTestImpl.java	isNonNegative	in	long[]	0	RET	$[i] < 0
44811	393	8	ChiSquareTestImpl.java	isNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
44811	393	8	ChiSquareTestImpl.java	isNonNegative	i	int	0	NIL-FOR	$ < in.length
44811	393	8	ChiSquareTestImpl.java	isNonNegative	in	long[][]	0	NIL-FOR	i < $.length
44812	394	12	ChiSquareTestImpl.java	isNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	j < in[i].length
44812	394	12	ChiSquareTestImpl.java	isNonNegative	j	int	0	NIL-FOR	$ < in[i].length
44812	394	12	ChiSquareTestImpl.java	isNonNegative	i	int	0	NIL-FOR	j < in[$].length
44812	394	12	ChiSquareTestImpl.java	isNonNegative	in	long[][]	0	NIL-FOR	j < $[i].length
571	395	16	ChiSquareTestImpl.java	isNonNegative	j	int	0	RET	in[i][$] < 0
571	395	16	ChiSquareTestImpl.java	isNonNegative	i	int	0	RET	in[$][j] < 0
571	395	16	ChiSquareTestImpl.java	isNonNegative	in	long[][]	0	RET	$[i][j] < 0
294	100	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
295	103	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
296	137	8	ChiSquaredDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
297	162	8	ChiSquaredDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
45019	92	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedState	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
45019	92	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
842	123	12	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	RET	$.states.isEmpty()
843	130	12	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.initialized
844	147	16	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.evaluateStep(interpolator)
844	147	16	CombinedEventsManager.java	evaluateStep	interpolator	StepInterpolator	0	DEF	state.evaluateStep($)
845	148	20	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	1	DEF	$.first == null
846	151	24	CombinedEventsManager.java	evaluateStep	interpolator	StepInterpolator	1	DEF	$.isForward()
847	152	28	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.getEventTime() < $.first.getEventTime()
848	156	28	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.getEventTime() > $.first.getEventTime()
849	211	12	CombinedEventsManager.java	stop	THIS	CombinedEventsManager	0	RET	$.state.stop()
850	232	16	CombinedEventsManager.java	reset	THIS	CombinedEventsManager	0	DEF	$.state.reset(t, y)
850	232	16	CombinedEventsManager.java	reset	t	double	0	DEF	state.reset($, y)
850	232	16	CombinedEventsManager.java	reset	y	double[]	0	DEF	state.reset(t, $)
156	92	8	Complex.java	abs	THIS	Complex	0	RET	$.isNaN()
157	96	8	Complex.java	abs	THIS	Complex	0	RET	$.isInfinite()
158	100	8	Complex.java	abs	THIS	Complex	1	RET	Math.abs($.real) < Math.abs($.imaginary)
159	101	12	Complex.java	abs	THIS	Complex	0	RET	$.imaginary == 0.0
160	107	12	Complex.java	abs	THIS	Complex	0	RET	$.real == 0.0
161	152	8	Complex.java	conjugate	THIS	Complex	0	RET	$.isNaN()
162	194	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN()
162	194	8	Complex.java	divide	rhs	Complex	0	RET	$.isNaN()
163	200	8	Complex.java	divide	c	double	0	RET	$ == 0.0
163	200	8	Complex.java	divide	d	double	0	RET	$ == 0.0
164	204	8	Complex.java	divide	THIS	Complex	0	RET	$.isInfinite()
164	204	8	Complex.java	divide	rhs	Complex	0	RET	$.isInfinite()
165	208	8	Complex.java	divide	c	double	1	RET	Math.abs($) < Math.abs(d)
165	208	8	Complex.java	divide	d	double	1	RET	Math.abs(c) < Math.abs($)
166	209	12	Complex.java	divide	d	double	0	RET	$ == 0.0
167	217	12	Complex.java	divide	c	double	0	RET	$ == 0.0
168	248	8	Complex.java	equals	THIS	Complex	1	DEF	$ == other
168	248	8	Complex.java	equals	other	Object	1	DEF	this == $
169	250	15	Complex.java	equals	other	Object	1	DEF	$ == null
170	255	16	Complex.java	equals	rhs	Complex	1	DEF	$.isNaN()
171	280	8	Complex.java	hashCode	THIS	Complex	0	RET	$.isNaN()
172	358	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN()
172	358	8	Complex.java	multiply	rhs	Complex	0	RET	$.isNaN()
173	361	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(rhs.$.imaginary)
173	361	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
173	361	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(rhs.$.real)
173	361	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
173	361	8	Complex.java	multiply	rhs	Complex	0	RET	Double.isInfinite($.imaginary)
173	361	8	Complex.java	multiply	rhs	Complex	0	RET	Double.isInfinite($.real)
174	379	8	Complex.java	negate	THIS	Complex	0	RET	$.isNaN()
175	405	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN()
175	405	8	Complex.java	subtract	rhs	Complex	0	RET	$.isNaN()
176	428	8	Complex.java	acos	THIS	Complex	0	RET	$.isNaN()
177	451	8	Complex.java	asin	THIS	Complex	0	RET	$.isNaN()
178	474	8	Complex.java	atan	THIS	Complex	0	RET	$.isNaN()
179	509	8	Complex.java	cos	THIS	Complex	0	RET	$.isNaN()
180	543	8	Complex.java	cosh	THIS	Complex	0	RET	$.isNaN()
181	578	8	Complex.java	exp	THIS	Complex	0	RET	$.isNaN()
182	616	8	Complex.java	log	THIS	Complex	0	RET	$.isNaN()
183	642	8	Complex.java	pow	x	Complex	0	NullPointerException	$ == null
184	675	8	Complex.java	sin	THIS	Complex	0	RET	$.isNaN()
185	709	8	Complex.java	sinh	THIS	Complex	0	RET	$.isNaN()
186	751	8	Complex.java	sqrt	THIS	Complex	0	RET	$.isNaN()
187	755	8	Complex.java	sqrt	THIS	Complex	0	RET	$.real == 0.0
187	755	8	Complex.java	sqrt	THIS	Complex	0	RET	$.imaginary == 0.0
188	760	8	Complex.java	sqrt	THIS	Complex	1	RET	$.real >= 0.0
189	817	8	Complex.java	tan	THIS	Complex	0	RET	$.isNaN()
190	855	8	Complex.java	tanh	THIS	Complex	0	RET	$.isNaN()
138	148	8	ComplexFormat.java	format	im	double	1	DEF	$ < 0.0
139	152	15	ComplexFormat.java	format	im	double	0	DEF	$ > 0.0
139	152	15	ComplexFormat.java	format	im	double	0	DEF	Double.isNaN($)
140	179	8	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Complex
141	181	15	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Number
142	211	8	ComplexFormat.java	formatDouble	value	double	1	DEF	Double.isNaN($)
142	211	8	ComplexFormat.java	formatDouble	value	double	1	DEF	Double.isInfinite($)
143	306	8	ComplexFormat.java	parse	parsePosition	ParsePosition	0	ParseException	$.getIndex() == 0
144	328	8	ComplexFormat.java	parse	re	Number	0	RET	$ == null
145	365	8	ComplexFormat.java	parse	im	Number	0	RET	$ == null
146	377	8	ComplexFormat.java	parse	THIS	ComplexFormat	0	RET	source.substring(startIndex, endIndex).compareTo( $.getImaginaryCharacter()) != 0
146	377	8	ComplexFormat.java	parse	startIndex	int	0	RET	$ >= source.length()
146	377	8	ComplexFormat.java	parse	startIndex	int	0	RET	source.substring($, endIndex).compareTo( getImaginaryCharacter()) != 0
146	377	8	ComplexFormat.java	parse	endIndex	int	0	RET	source.substring(startIndex, $).compareTo( getImaginaryCharacter()) != 0
146	377	8	ComplexFormat.java	parse	endIndex	int	0	RET	$ > source.length()
146	377	8	ComplexFormat.java	parse	source	String	0	RET	startIndex >= $.length()
146	377	8	ComplexFormat.java	parse	source	String	0	RET	$.substring(startIndex, endIndex).compareTo( getImaginaryCharacter()) != 0
146	377	8	ComplexFormat.java	parse	source	String	0	RET	endIndex > $.length()
147	416	9	ComplexFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
147	416	9	ComplexFormat.java	parseNextCharacter	n	int	0	DEF	index < $
44591	418	13	ComplexFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
44591	418	13	ComplexFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
44591	418	13	ComplexFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
148	423	13	ComplexFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
148	423	13	ComplexFormat.java	parseNextCharacter	n	int	0	DEF	index < $
149	451	8	ComplexFormat.java	parseNumber	endIndex	int	0	DEF	$ < source.length()
149	451	8	ComplexFormat.java	parseNumber	source	String	0	DEF	endIndex < $.length()
150	452	12	ComplexFormat.java	parseNumber	sb	StringBuffer	0	DEF	source.substring(startIndex, endIndex).compareTo($.toString()) == 0
150	452	12	ComplexFormat.java	parseNumber	startIndex	int	0	DEF	source.substring($, endIndex).compareTo(sb.toString()) == 0
150	452	12	ComplexFormat.java	parseNumber	endIndex	int	0	DEF	source.substring(startIndex, $).compareTo(sb.toString()) == 0
150	452	12	ComplexFormat.java	parseNumber	source	String	0	DEF	$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
151	477	8	ComplexFormat.java	parseNumber	startIndex	int	0	DEF	$ == endIndex
151	477	8	ComplexFormat.java	parseNumber	endIndex	int	0	DEF	startIndex == $
44592	480	12	ComplexFormat.java	parseNumber	THIS	ComplexFormat	0	NIL-FOR	i < special.$.length
44592	480	12	ComplexFormat.java	parseNumber	i	int	0	NIL-FOR	$ < special.length
44592	480	12	ComplexFormat.java	parseNumber	special	double[]	0	NIL-FOR	i < $.length
152	482	16	ComplexFormat.java	parseNumber	number	Number	0	DEF	$ != null
153	509	8	ComplexFormat.java	setImaginaryCharacter	imaginaryCharacter	String	0	IllegalArgumentException	$ == null
153	509	8	ComplexFormat.java	setImaginaryCharacter	imaginaryCharacter	String	0	IllegalArgumentException	$.length() == 0
154	523	8	ComplexFormat.java	setImaginaryFormat	imaginaryFormat	NumberFormat	0	IllegalArgumentException	$ == null
155	537	8	ComplexFormat.java	setRealFormat	realFormat	NumberFormat	0	IllegalArgumentException	$ == null
137	61	8	ComplexUtils.java	polar2Complex	r	double	0	IllegalArgumentException	$ < 0
44581	140	8	ContinuedFraction.java	evaluate	n	int	0	NIL-WHILE	$ < maxIterations
44581	140	8	ContinuedFraction.java	evaluate	relativeError	double	0	NIL-WHILE	$ > epsilon
44581	140	8	ContinuedFraction.java	evaluate	epsilon	double	0	NIL-WHILE	relativeError > $
44581	140	8	ContinuedFraction.java	evaluate	maxIterations	int	0	NIL-WHILE	n < $
3	146	12	ContinuedFraction.java	evaluate	p2	double	0	ConvergenceException	Double.isInfinite($)
3	146	12	ContinuedFraction.java	evaluate	q2	double	0	ConvergenceException	Double.isInfinite($)
4	148	16	ContinuedFraction.java	evaluate	a	double	1	DEF	$ != 0.0
5	151	23	ContinuedFraction.java	evaluate	b	double	1	DEF	$ != 0
6	172	8	ContinuedFraction.java	evaluate	n	int	0	MaxIterationsExceededException	$ >= maxIterations
6	172	8	ContinuedFraction.java	evaluate	maxIterations	int	0	MaxIterationsExceededException	n >= $
859	106	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	RET	model.$.steps.size() == 0
859	106	4	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	RET	$.steps.size() == 0
860	110	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	1	DEF	$.steps.size() == 0
861	115	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	IllegalArgumentException	$.getInterpolatedState().length != model.getInterpolatedState().length
861	115	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	IllegalArgumentException	getInterpolatedState().length != $.getInterpolatedState().length
862	119	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	IllegalArgumentException	$.forward ^ model.$.forward
862	119	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	IllegalArgumentException	forward ^ $.forward
863	128	6	ContinuousOutputModel.java	append	step	double	0	IllegalArgumentException	Math.abs(gap) > 1.0e-3 * Math.abs($)
863	128	6	ContinuousOutputModel.java	append	gap	double	0	IllegalArgumentException	Math.abs($) > 1.0e-3 * Math.abs(step)
864	176	4	ContinuousOutputModel.java	handleStep	THIS	ContinuousOutputModel	0	DEF	$.steps.size() == 0
865	183	4	ContinuousOutputModel.java	handleStep	isLast	boolean	0	DEF	$
866	242	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMin) <= 0
866	242	6	ContinuousOutputModel.java	setInterpolatedTime	sMin	StepInterpolator	0	RET	locatePoint(time, $) <= 0
866	242	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMin) <= 0
867	247	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMax) >= 0
867	247	6	ContinuousOutputModel.java	setInterpolatedTime	sMax	StepInterpolator	0	RET	locatePoint(time, $) >= 0
867	247	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMax) >= 0
45033	254	6	ContinuousOutputModel.java	setInterpolatedTime	iMin	int	0	NIL-WHILE	iMax - $ > 5
45033	254	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	$ - iMin > 5
868	259	8	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ < 0
869	262	15	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ > 0
870	276	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	Math.abs($ - tMin) < 1e-6
870	276	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	Math.abs(tMax - $) < 1e-6
870	276	8	ContinuousOutputModel.java	setInterpolatedTime	tMin	double	1	DEF	Math.abs(tMed - $) < 1e-6
870	276	8	ContinuousOutputModel.java	setInterpolatedTime	tMax	double	1	DEF	Math.abs($ - tMed) < 1e-6
871	299	8	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.index < low
871	299	8	ContinuousOutputModel.java	setInterpolatedTime	low	int	1	DEF	index < $
872	301	15	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	DEF	$.index > high
872	301	15	ContinuousOutputModel.java	setInterpolatedTime	high	int	0	DEF	index > $
45034	309	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.index <= iMax
45034	309	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.locatePoint(time, $.steps.get($.index)) > 0
45034	309	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	index <= $
45034	309	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	NIL-WHILE	locatePoint($, steps.get(index)) > 0
873	338	4	ContinuousOutputModel.java	locatePoint	THIS	ContinuousOutputModel	0	RET	$.forward
874	339	6	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getPreviousTime()
874	339	6	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getPreviousTime()
875	341	13	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getCurrentTime()
875	341	13	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getCurrentTime()
876	347	4	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getPreviousTime()
876	347	4	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getPreviousTime()
877	349	11	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getCurrentTime()
877	349	11	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getCurrentTime()
621	86	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	THIS	CorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != order
621	86	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	DimensionMismatchException	mean.length != $
621	86	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != order
44819	115	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	i	int	0	NIL-FOR	$ < order
44819	115	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	NIL-FOR	i < $
44820	180	8	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
44820	180	8	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
44821	185	8	CorrelatedRandomVectorGenerator.java	decompose	loop	boolean	0	NIL-FOR	$
44822	189	12	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
44822	189	12	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
622	192	16	CorrelatedRandomVectorGenerator.java	decompose	ii	int	0	DEF	c[$][$] > c[isi][isi]
622	192	16	CorrelatedRandomVectorGenerator.java	decompose	isi	int	0	DEF	c[ii][ii] > c[$][$]
622	192	16	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	0	DEF	$[ii][ii] > $[isi][isi]
623	199	12	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	DEF	swap[$.rank] != $.rank
623	199	12	CorrelatedRandomVectorGenerator.java	decompose	swap	int[]	0	DEF	$[rank] != rank
624	207	12	CorrelatedRandomVectorGenerator.java	decompose	ir	int	1	NotPositiveDefiniteMatrixException	c[$][$] < small
624	207	12	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	1	NotPositiveDefiniteMatrixException	$[ir][ir] < small
624	207	12	CorrelatedRandomVectorGenerator.java	decompose	small	double	1	NotPositiveDefiniteMatrixException	c[ir][ir] < $
625	209	16	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	NotPositiveDefiniteMatrixException	$.rank == 0
44823	214	16	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
44823	214	16	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
626	215	20	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NotPositiveDefiniteMatrixException	c[index[$]][index[$]] < -small
626	215	20	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	0	NotPositiveDefiniteMatrixException	$[index[i]][index[i]] < -small
626	215	20	CorrelatedRandomVectorGenerator.java	decompose	index	int[]	0	NotPositiveDefiniteMatrixException	c[$[i]][$[i]] < -small
626	215	20	CorrelatedRandomVectorGenerator.java	decompose	small	double	0	NotPositiveDefiniteMatrixException	c[index[i]][index[i]] < -$
44824	233	16	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
44824	233	16	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
44825	238	20	CorrelatedRandomVectorGenerator.java	decompose	j	int	0	NIL-FOR	$ < i
44825	238	20	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	j < $
44826	255	8	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
44826	255	8	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
44827	268	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < $.rank
44827	268	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < rank
44828	274	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < correlated.$.length
44828	274	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < correlated.length
44828	274	8	CorrelatedRandomVectorGenerator.java	nextVector	correlated	double[]	0	NIL-FOR	i < $.length
44829	276	12	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.rank
44829	276	12	CorrelatedRandomVectorGenerator.java	nextVector	j	int	0	NIL-FOR	$ < rank
87	46	8	DefaultTransformer.java	transform	o	Object	0	MathException	$ == null
88	50	8	DefaultTransformer.java	transform	o	Object	0	RET	$ instanceof Number
508	130	8	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.windowSize != INFINITE_WINDOW
509	131	12	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.getN() == $.windowSize
510	133	19	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	0	DEF	$.getN() < $.windowSize
511	176	8	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	0	DEF	$.getN() > 0
512	177	12	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	1	DEF	$.getN() > 1
513	275	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	IllegalArgumentException	$ < 1
514	276	12	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	IllegalArgumentException	$ != INFINITE_WINDOW
515	286	8	DescriptiveStatistics.java	setWindowSize	THIS	DescriptiveStatistics	0	DEF	windowSize < $.eDA.getNumElements()
515	286	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
515	286	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < eDA.getNumElements()
516	350	8	DescriptiveStatistics.java	getPercentile	THIS	DescriptiveStatistics	1	DEF	$.percentileImpl instanceof Percentile
44765	166	8	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	0	NIL-FOR	i < vertexA.$.length
44765	166	8	DirectSearchOptimizer.java	minimize	i	int	0	NIL-FOR	$ < vertexA.length
44765	166	8	DirectSearchOptimizer.java	minimize	vertexA	double[]	0	NIL-FOR	i < $.length
44766	251	12	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	0	NIL-FOR	i < vertices.$.length
44766	251	12	DirectSearchOptimizer.java	minimize	i	int	0	NIL-FOR	$ < vertices.length
44766	251	12	DirectSearchOptimizer.java	minimize	vertices	double[][]	0	NIL-FOR	i < $.length
44767	360	8	DirectSearchOptimizer.java	buildSimplex	i	int	0	NIL-FOR	$ <= n
44767	360	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	i <= $
443	362	12	DirectSearchOptimizer.java	buildSimplex	i	int	0	DEF	$ > 0
444	365	12	DirectSearchOptimizer.java	buildSimplex	i	int	0	DEF	$ < n
444	365	12	DirectSearchOptimizer.java	buildSimplex	n	int	0	DEF	i < $
44768	379	8	DirectSearchOptimizer.java	buildSimplex	i	int	0	NIL-FOR	$ <= n
44768	379	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	i <= $
44769	396	8	DirectSearchOptimizer.java	buildSimplex	i	int	0	NIL-FOR	$ <= n
44769	396	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	i <= $
445	417	8	DirectSearchOptimizer.java	setMultiStart	starts	int	1	DEF	$ < 2
44770	477	8	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	0	NIL-FOR	i < $.starts
44770	477	8	DirectSearchOptimizer.java	minimize	i	int	0	NIL-FOR	$ < starts
44771	482	12	DirectSearchOptimizer.java	minimize	loop	boolean	0	NIL-FOR	$
446	483	16	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	1	DEF	checker.converged($.simplex)
446	483	16	DirectSearchOptimizer.java	minimize	checker	ConvergenceChecker	1	DEF	$.converged(simplex)
447	487	23	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	1	DEF	$.evaluations >= maxEvaluations
447	487	23	DirectSearchOptimizer.java	minimize	maxEvaluations	int	1	DEF	evaluations >= $
448	496	12	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	0	DEF	i < ($.starts - 1)
448	496	12	DirectSearchOptimizer.java	minimize	i	int	0	DEF	$ < (starts - 1)
449	508	8	DirectSearchOptimizer.java	minimize	THIS	DirectSearchOptimizer	0	ConvergenceException	$.minima[0] == null
44772	546	8	DirectSearchOptimizer.java	evaluateSimplex	THIS	DirectSearchOptimizer	0	NIL-FOR	i < $.simplex.$.length
44772	546	8	DirectSearchOptimizer.java	evaluateSimplex	i	int	0	NIL-FOR	$ < simplex.length
450	548	12	DirectSearchOptimizer.java	evaluateSimplex	pair	PointCostPair	0	DEF	Double.isNaN($.getCost())
44773	563	8	DirectSearchOptimizer.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < n
44773	563	8	DirectSearchOptimizer.java	replaceWorstPoint	n	int	0	NIL-FOR	i < $
451	564	12	DirectSearchOptimizer.java	replaceWorstPoint	THIS	DirectSearchOptimizer	0	DEF	$.simplex[i].getCost() > pointCostPair.getCost()
451	564	12	DirectSearchOptimizer.java	replaceWorstPoint	i	int	0	DEF	simplex[$].getCost() > pointCostPair.getCost()
451	564	12	DirectSearchOptimizer.java	replaceWorstPoint	pointCostPair	PointCostPair	0	DEF	simplex[i].getCost() > $.getCost()
45046	71	8	DividedDifferenceInterpolator.java	interpolate	THIS	DividedDifferenceInterpolator	0	NIL-FOR	i < c.$.length
45046	71	8	DividedDifferenceInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < c.length
45046	71	8	DividedDifferenceInterpolator.java	interpolate	c	double[]	0	NIL-FOR	i < $.length
45047	106	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
45047	106	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
45048	112	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
45048	112	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
45049	113	12	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	j < n-$
45049	113	12	DividedDifferenceInterpolator.java	computeDividedDifference	j	int	0	NIL-FOR	$ < n-i
45049	113	12	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	j < $-i
913	115	16	DividedDifferenceInterpolator.java	computeDividedDifference	denominator	double	0	DuplicateSampleAbscissaException	$ == 0.0
44979	144	4	DormandPrince54Integrator.java	estimateError	THIS	DormandPrince54Integrator	0	NIL-FOR	j < y0.$.length
44979	144	4	DormandPrince54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
44979	144	4	DormandPrince54Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
744	64	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	THIS	DormandPrince54StepInterpolator	1	DEF	interpolator.$.v1 == null
744	64	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	interpolator	DormandPrince54StepInterpolator	1	DEF	$.v1 == null
745	112	4	DormandPrince54StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince54StepInterpolator	0	DEF	$.vectorsInitialized
746	114	6	DormandPrince54StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince54StepInterpolator	0	DEF	$.v1 == null
44944	124	6	DormandPrince54StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
44944	124	6	DormandPrince54StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
44945	139	4	DormandPrince54StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
44945	139	4	DormandPrince54StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
44978	258	4	DormandPrince853Integrator.java	estimateError	THIS	DormandPrince853Integrator	0	NIL-FOR	j < y0.$.length
44978	258	4	DormandPrince853Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
44978	258	4	DormandPrince853Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
805	279	4	DormandPrince853Integrator.java	estimateError	den	double	0	DEF	$ <= 0.0
818	66	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	1	DEF	interpolator.$.currentState == null
818	66	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	interpolator	DormandPrince853StepInterpolator	1	DEF	$.currentState == null
44990	77	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
44990	77	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < yDotKLast.length
44991	84	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
44991	84	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < v.length
44992	109	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
44992	109	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < yDotKLast.length
44993	114	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
44993	114	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < v.length
819	133	4	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	DEF	$.vectorsInitialized
820	135	6	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	DEF	$.v == null
44994	137	8	DormandPrince853StepInterpolator.java	computeInterpolatedState	k	int	0	NIL-FOR	$ < 7
44995	146	6	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
44995	146	6	DormandPrince853StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
44996	152	8	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.d.$.length
44996	152	8	DormandPrince853StepInterpolator.java	computeInterpolatedState	k	int	0	NIL-FOR	$ < d.length
44997	168	4	DormandPrince853StepInterpolator.java	computeInterpolatedState	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
44997	168	4	DormandPrince853StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
821	181	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	RET	$.currentState == null
44998	190	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
44998	190	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
44999	199	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
44999	199	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
45000	209	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
45000	209	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
45001	231	4	DormandPrince853StepInterpolator.java	writeExternal	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.currentState.$.length
45001	231	4	DormandPrince853StepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < currentState.length
45002	253	4	DormandPrince853StepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < dimension
45002	253	4	DormandPrince853StepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	i < $
806	174	4	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
806	174	4	EmbeddedRungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
44981	178	4	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
44981	178	4	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
807	185	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.handler.requiresDenseOutput()
807	185	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
44982	199	4	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	NIL-DOWHILE	$
44983	204	6	EmbeddedRungeKuttaIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
808	206	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
808	206	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
809	211	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
810	213	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.vecAbsoluteTolerance != null
44984	217	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
44984	217	12	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
44984	217	12	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
811	229	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize < t
811	229	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize > t
811	229	8	EmbeddedRungeKuttaIntegrator.java	integrate	forward	boolean	0	DEF	$
811	229	8	EmbeddedRungeKuttaIntegrator.java	integrate	forward	boolean	0	DEF	$
811	229	8	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
811	229	8	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
44985	235	8	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
44985	235	8	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
44986	237	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
44986	237	10	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
44986	237	10	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
44987	239	12	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
44987	239	12	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
44988	250	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
44988	250	8	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
44988	250	8	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
44989	252	10	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
44989	252	10	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
812	260	8	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
813	264	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.eventsHandlersManager.evaluateStep(interpolator)
813	264	10	EmbeddedRungeKuttaIntegrator.java	integrate	interpolator	AbstractStepInterpolator	1	DEF	eventsHandlersManager.evaluateStep($)
814	286	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.eventsHandlersManager.stop()
815	297	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
816	302	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.eventsHandlersManager.reset($.stepStart, y)
816	302	6	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
816	302	6	EmbeddedRungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	eventsHandlersManager.reset(stepStart, $)
817	308	6	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
627	135	12	EmpiricalDistributionImpl.java	load	THIS	EmpiricalDistributionImpl	0	EOFException	$.sampleStats.getN() == 0
628	142	11	EmpiricalDistributionImpl.java	load	in	BufferedReader	0	DEF	$ != null
629	171	12	EmpiricalDistributionImpl.java	load	in	BufferedReader	0	DEF	$ != null
44830	340	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i< $.binCount - 1
44830	340	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$< binCount - 1
630	346	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	DEF	$.binStats.isEmpty()
44831	349	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
44831	349	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount
631	360	12	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	1	RuntimeException	$.e instanceof RuntimeException
44832	371	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount-1
44832	371	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount-1
632	400	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	IllegalStateException	$.loaded
44833	408	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
44833	408	8	EmpiricalDistributionImpl.java	getNextValue	i	int	0	NIL-FOR	$ < binCount
633	409	11	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	RET	x <= $.upperBounds[i]
633	409	11	EmpiricalDistributionImpl.java	getNextValue	i	int	0	RET	x <= upperBounds[$]
633	409	11	EmpiricalDistributionImpl.java	getNextValue	x	double	0	RET	$ <= upperBounds[i]
634	411	15	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	0	RET	$.getN() > 0
635	412	19	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	1	RET	$.getStandardDeviation() > 0
712	57	8	Erf.java	erf	x	double	0	DEF	$ < 0
45020	78	4	EulerStepInterpolator.java	computeInterpolatedState	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
45020	78	4	EulerStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
45032	160	12	EventState.java	evaluateStep	i	int	0	NIL-FOR	$ < n
45032	160	12	EventState.java	evaluateStep	n	int	0	NIL-FOR	i < $
851	168	16	EventState.java	evaluateStep	THIS	EventState	1	FunctionEvaluationException:RET	$.g0Positive ^ (gb >= 0)
851	168	16	EventState.java	evaluateStep	gb	double	1	FunctionEvaluationException:RET	g0Positive ^ ($ >= 0)
852	189	20	EventState.java	evaluateStep	THIS	EventState	0	RET	Double.isNaN($.previousEventTime)
852	189	20	EventState.java	evaluateStep	THIS	EventState	0	RET	Math.abs($.previousEventTime - root) > $.convergence
852	189	20	EventState.java	evaluateStep	root	double	0	RET	Math.abs(previousEventTime - $) > convergence
853	192	24	EventState.java	evaluateStep	THIS	EventState	0	RET	Math.abs(t1 - $.pendingEventTime) <= $.convergence
853	192	24	EventState.java	evaluateStep	THIS	EventState	0	RET	$.pendingEvent
853	192	24	EventState.java	evaluateStep	t1	double	0	RET	Math.abs($ - pendingEventTime) <= convergence
854	220	12	EventState.java	evaluateStep	cause	Throwable	1	DEF	$ instanceof DerivativeException
854	220	12	EventState.java	evaluateStep	cause	Throwable	1	DEF	$ != null
855	222	19	EventState.java	evaluateStep	cause	Throwable	0	DEF	$ instanceof EventException
855	222	19	EventState.java	evaluateStep	cause	Throwable	0	DEF	$ != null
856	253	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	$.pendingEvent
857	284	8	EventState.java	reset	THIS	EventState	0	RET	$.pendingEvent
858	288	8	EventState.java	reset	THIS	EventState	0	DEF	$.nextAction == EventHandler.RESET_STATE
323	52	8	ExponentialDistributionImpl.java	setMean	mean	double	0	IllegalArgumentException	$ <= 0.0
324	83	8	ExponentialDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
325	106	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ > 1.0
325	106	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ < 0.0
326	109	15	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1.0
327	142	8	ExponentialDistributionImpl.java	getDomainUpperBound	p	double	1	RET	$ < .5
328	161	8	ExponentialDistributionImpl.java	getInitialDomain	p	double	1	RET	$ < .5
289	72	8	FDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
290	100	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
291	103	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
292	155	8	FDistributionImpl.java	setNumeratorDegreesOfFreedom	degreesOfFreedom	double	0	IllegalArgumentException	$ <= 0.0
293	177	8	FDistributionImpl.java	setDenominatorDegreesOfFreedom	degreesOfFreedom	double	0	IllegalArgumentException	$ <= 0.0
44919	249	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (N >> 1)
44920	263	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (N >> 1)
728	315	8	FastFourierTransformer.java	fft	THIS	FastFourierTransformer	0	RET	f.$.length == 1
728	315	8	FastFourierTransformer.java	fft	f	double	0	RET	$.length == 1
44923	324	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
44924	334	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
44925	374	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
44926	377	12	FastFourierTransformer.java	fft	j	int	0	NIL-WHILE	$ >= k
44926	377	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	j >= $
44926	377	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	$ > 0
44927	384	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
44928	399	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
44929	401	12	FastFourierTransformer.java	fft	j	int	0	NIL-FOR	$ < N
44930	402	16	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	k < $
44930	402	16	FastFourierTransformer.java	fft	k	int	0	NIL-FOR	$ < i
731	423	8	FastFourierTransformer.java	computeOmega	n	int	0	IllegalArgumentException	$ == 0
732	428	8	FastFourierTransformer.java	computeOmega	THIS	FastFourierTransformer	0	RET	n == $.omegaCount
732	428	8	FastFourierTransformer.java	computeOmega	n	int	0	RET	$ == omegaCount
733	429	8	FastFourierTransformer.java	computeOmega	THIS	FastFourierTransformer	0	RET	n + $.omegaCount == 0
733	429	8	FastFourierTransformer.java	computeOmega	n	int	0	RET	$ + omegaCount == 0
44931	430	12	FastFourierTransformer.java	computeOmega	THIS	FastFourierTransformer	0	NIL-FOR	i < Math.abs($.omegaCount)
44931	430	12	FastFourierTransformer.java	computeOmega	i	int	0	NIL-FOR	$ < Math.abs(omegaCount)
44932	442	8	FastFourierTransformer.java	computeOmega	i	int	0	NIL-FOR	$ < Math.abs(n)
44932	442	8	FastFourierTransformer.java	computeOmega	n	int	0	NIL-FOR	i < Math.abs($)
734	470	8	FastFourierTransformer.java	sample	n	int	0	IllegalArgumentException	$ <= 0
44933	477	8	FastFourierTransformer.java	sample	i	int	0	NIL-FOR	$ < n
44933	477	8	FastFourierTransformer.java	sample	n	int	0	NIL-FOR	i < $
44934	492	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
44934	492	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
44934	492	8	FastFourierTransformer.java	scaleArray	f	double	0	NIL-FOR	i < $.length
44935	507	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
44935	507	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
44935	507	8	FastFourierTransformer.java	scaleArray	f	Complex	0	NIL-FOR	i < $.length
735	530	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	IllegalArgumentException	$.isPowerOf2(d.$.length)
735	530	8	FastFourierTransformer.java	verifyDataSet	d	double	0	IllegalArgumentException	isPowerOf2($.length)
736	543	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	IllegalArgumentException	$.isPowerOf2(o.$.length)
736	543	8	FastFourierTransformer.java	verifyDataSet	o	Object	0	IllegalArgumentException	isPowerOf2($.length)
737	559	8	FastFourierTransformer.java	verifyInterval	lower	double	0	IllegalArgumentException	$ >= upper
737	559	8	FastFourierTransformer.java	verifyInterval	upper	double	0	IllegalArgumentException	lower >= $
726	228	8	FastSineTransformer.java	fst	f	double	0	IllegalArgumentException	$[0] != 0.0
44921	242	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (N >> 1)
44922	254	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (N >> 1)
505	87	8	FirstMoment.java	increment	THIS	FirstMoment	0	DEF	$.n == 0
489	73	8	FourthMoment.java	increment	THIS	FourthMoment	0	DEF	$.n < 1
208	134	8	Fraction.java	Fraction	overflow	long	0	FractionConversionException	a0 > $
208	134	8	Fraction.java	Fraction	a0	long	0	FractionConversionException	$ > overflow
209	140	8	Fraction.java	Fraction	a0	long	0	RET	Math.abs($ - value) < epsilon
209	140	8	Fraction.java	Fraction	value	double	0	RET	Math.abs(a0 - $) < epsilon
209	140	8	Fraction.java	Fraction	epsilon	double	0	RET	Math.abs(a0 - value) < $
44594	156	8	Fraction.java	Fraction	stop	boolean	0	NIL-DOWHILE	$
210	162	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	q2 > $
210	162	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	p2 > $
210	162	12	Fraction.java	Fraction	p2	long	0	FractionConversionException	$ > overflow
210	162	12	Fraction.java	Fraction	q2	long	0	FractionConversionException	$ > overflow
211	167	12	Fraction.java	Fraction	convergent	double	1	DEF	Math.abs($ - value) > epsilon
211	167	12	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
211	167	12	Fraction.java	Fraction	n	int	1	DEF	$ < maxIterations
211	167	12	Fraction.java	Fraction	value	double	1	DEF	Math.abs(convergent - $) > epsilon
211	167	12	Fraction.java	Fraction	epsilon	double	1	DEF	Math.abs(convergent - value) > $
211	167	12	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
211	167	12	Fraction.java	Fraction	maxIterations	int	1	DEF	n < $
212	179	8	Fraction.java	Fraction	n	int	0	FractionConversionException	$ >= maxIterations
212	179	8	Fraction.java	Fraction	maxIterations	int	0	FractionConversionException	n >= $
213	183	8	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
213	183	8	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
214	202	8	Fraction.java	Fraction	den	int	0	ArithmeticException	$ == 0
215	205	8	Fraction.java	Fraction	den	int	0	ArithmeticException	$ < 0
216	206	12	Fraction.java	Fraction	num	int	0	ArithmeticException	$ == Integer.MIN_VALUE
216	206	12	Fraction.java	Fraction	den	int	0	ArithmeticException	$ == Integer.MIN_VALUE
217	215	8	Fraction.java	Fraction	d	int	0	DEF	$ > 1
218	221	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
219	235	8	Fraction.java	abs	THIS	Fraction	1	DEF	$.numerator >= 0
220	252	8	Fraction.java	compareTo	THIS	Fraction	0	DEF	$ != object
220	252	8	Fraction.java	compareTo	object	Fraction	0	DEF	this != $
221	256	12	Fraction.java	compareTo	first	double	1	DEF	$ < second
221	256	12	Fraction.java	compareTo	second	double	1	DEF	first < $
222	258	19	Fraction.java	compareTo	first	double	0	DEF	$ > second
222	258	19	Fraction.java	compareTo	second	double	0	DEF	first > $
223	287	8	Fraction.java	equals	THIS	Fraction	1	DEF	$ == other
223	287	8	Fraction.java	equals	other	Object	1	DEF	this == $
224	289	15	Fraction.java	equals	other	Object	1	DEF	$ == null
225	363	8	Fraction.java	negate	THIS	Fraction	0	ArithmeticException	$.numerator==Integer.MIN_VALUE
226	416	8	Fraction.java	addSub	fraction	Fraction	0	IllegalArgumentException	$ == null
227	420	8	Fraction.java	addSub	THIS	Fraction	0	RET	$.numerator == 0
228	423	8	Fraction.java	addSub	THIS	Fraction	0	RET	fraction.$.numerator == 0
228	423	8	Fraction.java	addSub	fraction	Fraction	0	RET	$.numerator == 0
229	429	8	Fraction.java	addSub	d1	int	0	RET	$==1
230	453	8	Fraction.java	addSub	w	BigInteger	0	ArithmeticException	$.bitLength() > 31
231	473	8	Fraction.java	multiply	fraction	Fraction	0	IllegalArgumentException	$ == null
232	476	8	Fraction.java	multiply	THIS	Fraction	0	RET	fraction.$.numerator == 0
232	476	8	Fraction.java	multiply	THIS	Fraction	0	RET	$.numerator == 0
232	476	8	Fraction.java	multiply	fraction	Fraction	0	RET	$.numerator == 0
233	499	8	Fraction.java	divide	fraction	Fraction	0	IllegalArgumentException	$ == null
234	502	8	Fraction.java	divide	THIS	Fraction	0	ArithmeticException	fraction.$.numerator == 0
234	502	8	Fraction.java	divide	fraction	Fraction	0	ArithmeticException	$.numerator == 0
235	520	8	Fraction.java	getReducedFraction	denominator	int	0	ArithmeticException	$ == 0
236	523	8	Fraction.java	getReducedFraction	numerator	int	0	RET	$==0
237	527	8	Fraction.java	getReducedFraction	numerator	int	0	DEF	($&1)==0
237	527	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
238	530	8	Fraction.java	getReducedFraction	denominator	int	0	ArithmeticException	$ < 0
239	531	12	Fraction.java	getReducedFraction	numerator	int	0	ArithmeticException	$==Integer.MIN_VALUE
239	531	12	Fraction.java	getReducedFraction	denominator	int	0	ArithmeticException	$==Integer.MIN_VALUE
199	202	8	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Fraction
200	204	15	FractionFormat.java	format	obj	Object	1	IllegalArgumentException	$ instanceof Number
201	246	8	FractionFormat.java	parse	parsePosition	ParsePosition	0	ParseException	$.getIndex() == 0
202	268	8	FractionFormat.java	parse	num	Number	0	RET	$ == null
203	301	8	FractionFormat.java	parse	den	Number	0	RET	$ == null
204	330	8	FractionFormat.java	setDenominatorFormat	format	NumberFormat	0	IllegalArgumentException	$ == null
205	344	8	FractionFormat.java	setNumeratorFormat	format	NumberFormat	0	IllegalArgumentException	$ == null
206	375	9	FractionFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
206	375	9	FractionFormat.java	parseNextCharacter	n	int	0	DEF	index < $
44593	377	13	FractionFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
44593	377	13	FractionFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
44593	377	13	FractionFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
207	382	13	FractionFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
207	382	13	FractionFormat.java	parseNextCharacter	n	int	0	DEF	index < $
44813	76	8	Frequency.java	toString	iter	Iterator	0	NIL-WHILE	$.hasNext()
591	98	8	Frequency.java	addValue	v	Object	0	DEF	$ instanceof Integer
592	103	12	Frequency.java	addValue	count	Long	1	DEF	$ == null
44814	178	8	Frequency.java	getSumFreq	iterator	Iterator	0	NIL-WHILE	$.hasNext()
593	191	8	Frequency.java	getCount	v	Object	0	RET	$ instanceof Integer
594	197	12	Frequency.java	getCount	count	Long	0	DEF	$ != null
595	248	8	Frequency.java	getPct	THIS	Frequency	0	RET	$.getSumFreq() == 0
596	298	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	$.getSumFreq() == 0
597	301	8	Frequency.java	getCumFreq	v	Object	0	RET	$ instanceof Integer
598	305	8	Frequency.java	getCumFreq	c	Comparator	0	DEF	$ == null
599	312	12	Frequency.java	getCumFreq	value	Long	0	DEF	$ != null
600	319	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.firstKey()) < 0
600	319	8	Frequency.java	getCumFreq	c	Comparator	0	RET	$.compare(v, freqTable.firstKey()) < 0
600	319	8	Frequency.java	getCumFreq	v	Object	0	RET	c.compare($, freqTable.firstKey()) < 0
601	323	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.lastKey()) >= 0
601	323	8	Frequency.java	getCumFreq	c	Comparator	0	RET	$.compare(v, freqTable.lastKey()) >= 0
601	323	8	Frequency.java	getCumFreq	v	Object	0	RET	c.compare($, freqTable.lastKey()) >= 0
44815	328	8	Frequency.java	getCumFreq	values	Iterator	0	NIL-WHILE	$.hasNext()
602	330	12	Frequency.java	getCumFreq	nextValue	Object	1	DEF	c.compare(v, $) > 0
602	330	12	Frequency.java	getCumFreq	c	Comparator	1	DEF	$.compare(v, nextValue) > 0
602	330	12	Frequency.java	getCumFreq	v	Object	1	DEF	c.compare($, nextValue) > 0
603	389	8	Frequency.java	getCumPct	THIS	Frequency	0	RET	$.getSumFreq() == 0
716	90	8	Gamma.java	logGamma	x	double	1	DEF	Double.isNaN($)
716	90	8	Gamma.java	logGamma	x	double	1	DEF	$ <= 0.0
44917	96	12	Gamma.java	logGamma	i	int	0	NIL-FOR	$ > 0
717	158	8	Gamma.java	regularizedGammaP	a	double	1	DEF	$ <= 0.0
717	158	8	Gamma.java	regularizedGammaP	a	double	1	DEF	Double.isNaN($)
717	158	8	Gamma.java	regularizedGammaP	x	double	1	DEF	$ < 0.0
717	158	8	Gamma.java	regularizedGammaP	x	double	1	DEF	Double.isNaN($)
718	160	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ == 0.0
719	162	15	Gamma.java	regularizedGammaP	a	double	1	DEF	x > $
719	162	15	Gamma.java	regularizedGammaP	a	double	1	DEF	$ >= 1.0
719	162	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ > a
44918	171	12	Gamma.java	regularizedGammaP	n	double	0	NIL-WHILE	$ < maxIterations
44918	171	12	Gamma.java	regularizedGammaP	an	double	0	NIL-WHILE	Math.abs($) > epsilon
44918	171	12	Gamma.java	regularizedGammaP	epsilon	double	0	NIL-WHILE	Math.abs(an) > $
44918	171	12	Gamma.java	regularizedGammaP	maxIterations	int	0	NIL-WHILE	n < $
720	179	12	Gamma.java	regularizedGammaP	n	double	1	MaxIterationsExceededException	$ >= maxIterations
720	179	12	Gamma.java	regularizedGammaP	maxIterations	int	1	MaxIterationsExceededException	n >= $
721	233	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ <= 0.0
721	233	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	Double.isNaN($)
721	233	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < 0.0
721	233	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	Double.isNaN($)
722	235	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ == 0.0
723	237	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ < 1.0
723	237	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	x < $
723	237	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < a
253	72	8	GammaDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
254	96	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
255	99	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
256	111	8	GammaDistributionImpl.java	setAlpha	alpha	double	0	IllegalArgumentException	$ <= 0.0
257	131	8	GammaDistributionImpl.java	setBeta	beta	double	0	IllegalArgumentException	$ <= 0.0
258	175	8	GammaDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
259	200	8	GammaDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
44852	116	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	Math.abs(previous - $.cost) > ($.cost * $.steadyStateThreshold)
44852	116	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	Math.abs($.cost) > $.convergence
44852	116	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	$.getCostEvaluations() < 2
44852	116	8	GaussNewtonEstimator.java	estimate	previous	double	0	NIL-DOWHILE	Math.abs($ - cost) > (cost * steadyStateThreshold)
44853	122	12	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	i < $.measurements.$.length
44853	122	12	GaussNewtonEstimator.java	estimate	i	int	0	NIL-FOR	$ < measurements.length
676	123	16	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	DEF	$.measurements [i].isIgnored()
676	123	16	GaussNewtonEstimator.java	estimate	i	int	0	DEF	measurements [$].isIgnored()
44854	129	20	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	j < $.parameters.$.length
44854	129	20	GaussNewtonEstimator.java	estimate	j	int	0	NIL-FOR	$ < parameters.length
44855	135	20	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	k < $.parameters.$.length
44855	135	20	GaussNewtonEstimator.java	estimate	k	int	0	NIL-FOR	$ < parameters.length
44856	138	24	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	l < $.parameters.$.length
44856	138	24	GaussNewtonEstimator.java	estimate	l	int	0	NIL-FOR	$ < parameters.length
44857	156	16	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	i < $.parameters.$.length
44857	156	16	GaussNewtonEstimator.java	estimate	i	int	0	NIL-FOR	$ < parameters.length
44850	50	8	GeneticAlgorithm.java	evolve	current	Population	0	NIL-WHILE	condition.isSatisfied($)
44850	50	8	GeneticAlgorithm.java	evolve	condition	StoppingCondition	0	NIL-WHILE	$.isSatisfied(current)
44851	110	8	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	NIL-WHILE	$.getPopulationSize() < $ .getPopulationLimit()
673	116	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	Math.random() < $.getCrossoverRate()
674	122	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	Math.random() < $.getMutationRate()
675	126	16	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	DEF	$.getPopulationSize() < $ .getPopulationLimit()
503	81	8	GeometricMean.java	getResult	THIS	GeometricMean	1	RET	$.sumOfLogs.getN() > 0
504	154	8	GeometricMean.java	checkEmpty	THIS	GeometricMean	0	IllegalStateException	$.getN() > 0
44980	92	4	GillStepInterpolator.java	computeInterpolatedState	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
44980	92	4	GillStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
747	175	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stabilityReduction	double	1	DEF	$ > 0.9999
747	175	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stabilityReduction	double	1	DEF	$ < 0.0001
748	210	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl1	double	1	DEF	$ < 0.0001
748	210	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl1	double	1	DEF	$ > 0.9999
749	216	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl2	double	1	DEF	$ < 0.0001
749	216	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl2	double	1	DEF	$ > 0.9999
750	222	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl3	double	1	DEF	$ > 0.9999
750	222	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl3	double	1	DEF	$ < 0.0001
751	228	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl4	double	1	DEF	$ > 999.9
751	228	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	stepControl4	double	1	DEF	$ < 1.0001
752	262	4	GraggBulirschStoerIntegrator.java	setOrderControl	maxOrder	int	0	DEF	$ % 2 != 0
752	262	4	GraggBulirschStoerIntegrator.java	setOrderControl	maxOrder	int	0	DEF	$ <= 6
753	266	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl1	double	1	DEF	$ < 0.0001
753	266	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl1	double	1	DEF	$ > 0.9999
754	272	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl2	double	1	DEF	$ > 0.9999
754	272	4	GraggBulirschStoerIntegrator.java	setOrderControl	orderControl2	double	1	DEF	$ < 0.0001
755	316	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence.$.length != size
755	316	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence == null
755	316	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	DEF	sequence.length != $
756	325	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
44946	327	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
44946	327	6	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
44947	332	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
44947	332	6	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
44948	340	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
44948	340	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
44949	345	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
44949	345	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
44950	347	6	GraggBulirschStoerIntegrator.java	initializeArrays	l	int	0	NIL-FOR	$ < k
44950	347	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	l < $
757	370	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudif	int	1	DEF	$ >= 7
757	370	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudif	int	1	DEF	$ <= 0
758	389	4	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	1	DEF	$.vecAbsoluteTolerance == null
44951	390	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
44951	390	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
44951	390	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
44952	395	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
44952	395	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
44952	395	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
44953	433	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
44953	433	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
44953	433	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
44954	440	4	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	NIL-FOR	$ < n
44954	440	4	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	NIL-FOR	j < $
759	442	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	DEF	2 * $ == n
759	442	6	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	DEF	2 * j == $
44955	448	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
44955	448	6	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
44955	448	6	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
760	457	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	j <= $.maxChecks
760	457	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	$.performTest
760	457	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	k < $.maxIter
760	457	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	RET	$ <= maxChecks
760	457	6	GraggBulirschStoerIntegrator.java	tryStep	k	int	0	RET	$ < maxIter
44956	459	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < y0.$.length
44956	459	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < y0.length
44956	459	8	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	l < $.length
44957	464	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < y0.$.length
44957	464	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < y0.length
44957	464	8	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	l < $.length
761	468	8	GraggBulirschStoerIntegrator.java	tryStep	initialNorm	double	0	RET	deltaNorm > 4 * Math.max(1.0e-15, $)
761	468	8	GraggBulirschStoerIntegrator.java	tryStep	deltaNorm	double	0	RET	$ > 4 * Math.max(1.0e-15, initialNorm)
44958	476	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
44958	476	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
44958	476	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
44959	495	4	GraggBulirschStoerIntegrator.java	extrapolate	j	int	0	NIL-FOR	$ < k
44959	495	4	GraggBulirschStoerIntegrator.java	extrapolate	k	int	0	NIL-FOR	j < $
44960	496	6	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
44960	496	6	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
44960	496	6	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
44961	504	4	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
44961	504	4	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
44961	504	4	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
44962	526	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length-1
44962	526	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length-1
44963	532	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length
44963	532	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length
44964	539	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < $.sequence[k]
44964	539	6	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < sequence[k]
44964	539	6	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	l < sequence[$]
762	545	4	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	DEF	y != $
762	545	4	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
763	551	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
44965	554	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < yMidDots.$.length
44965	554	6	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < yMidDots.length
44965	554	6	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	0	NIL-FOR	j < $.length
764	575	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
764	575	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
44966	594	4	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
765	599	6	GraggBulirschStoerIntegrator.java	integrate	newStep	boolean	0	DEF	$
766	604	8	GraggBulirschStoerIntegrator.java	integrate	firstStepAlreadyComputed	boolean	0	DEF	$
767	608	8	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
768	614	10	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
769	627	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize > t
769	627	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize < t
769	627	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
769	627	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
769	627	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
769	627	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
44967	636	6	GraggBulirschStoerIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
770	641	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.tryStep(equations, $.stepStart, y, $.stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
770	641	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	tryStep(equations, stepStart, y, stepSize, $, scale, fk[$], ($ == 0) ? yMidDots[0] : diagonal[$-1], ($ == 0) ? y1 : y1Diag[$-1], yTmp)
770	641	8	GraggBulirschStoerIntegrator.java	integrate	y1	double[]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? $ : y1Diag[k-1], yTmp)
770	641	8	GraggBulirschStoerIntegrator.java	integrate	yTmp	double[]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], $)
770	641	8	GraggBulirschStoerIntegrator.java	integrate	diagonal	double[][]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : $[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
770	641	8	GraggBulirschStoerIntegrator.java	integrate	y1Diag	double[][]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : $[k-1], yTmp)
770	641	8	GraggBulirschStoerIntegrator.java	integrate	fk	double[][][]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, $[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
770	641	8	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? $[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
770	641	8	GraggBulirschStoerIntegrator.java	integrate	scale	double[]	1	DEF	tryStep(equations, stepStart, y, stepSize, k, $, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
770	641	8	GraggBulirschStoerIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	1	DEF	tryStep($, stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
770	641	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	1	DEF	tryStep(equations, stepStart, $, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
771	654	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 0
44968	663	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < y0.$.length
44968	663	12	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
44968	663	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
772	669	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > 1.0e15
772	669	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > maxError
772	669	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ > 1
772	669	12	GraggBulirschStoerIntegrator.java	integrate	maxError	double	1	DEF	error > $
773	690	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
773	690	16	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
774	693	18	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
775	702	20	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
775	702	20	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
776	708	22	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
776	708	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
776	708	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
777	720	16	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
778	728	18	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
778	728	18	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
779	733	20	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
779	733	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
779	733	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
780	744	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > 1.0
781	746	18	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
781	746	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
781	746	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
782	757	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ <= 1.0
782	757	16	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
782	757	16	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	DEF	$
783	771	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.denseOutput
783	771	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
44969	774	8	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
44969	774	8	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
44970	783	8	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < mu
44970	783	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	NIL-FOR	l < $
44971	789	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
44971	789	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
44971	789	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
44972	792	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k - l2
44972	792	10	GraggBulirschStoerIntegrator.java	integrate	l2	int	0	NIL-FOR	j <= k - $
44972	792	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $ - l2
44973	795	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
44973	795	12	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
44973	795	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
44974	800	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
44974	800	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
44974	800	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
44975	805	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
44975	805	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
44976	806	12	GraggBulirschStoerIntegrator.java	integrate	m	int	0	NIL-FOR	$ >= 2 * (l + 1)
44976	806	12	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	m >= 2 * ($ + 1)
44977	807	14	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
44977	807	14	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
44977	807	14	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
784	815	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	DEF	$ >= 0
785	822	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.useInterpolationError
786	827	12	GraggBulirschStoerIntegrator.java	integrate	interpError	double	0	DEF	$ > 10.0
787	834	10	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
788	836	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.evaluateStep(interpolator)
788	836	12	GraggBulirschStoerIntegrator.java	integrate	interpolator	AbstractStepInterpolator	0	DEF	eventsHandlersManager.evaluateStep($)
789	844	8	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
790	852	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
791	859	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.stop()
792	868	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.reset($.stepStart, y)
792	868	8	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	DEF	$
792	868	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	eventsHandlersManager.reset(stepStart, $)
793	875	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ == 1
794	877	10	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
795	880	15	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ <= targetIter
795	880	15	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k <= $
796	882	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k-1] < $.orderControl1 * $.costPerTimeUnit[k]
796	882	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
797	884	17	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
797	884	17	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
798	889	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k-2] < $.orderControl1 * $.costPerTimeUnit[k-1]
798	889	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 2
798	889	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$-2] < orderControl1 * costPerTimeUnit[$-1]
799	893	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[optimalIter]
799	893	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	0	DEF	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[$]
799	893	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[optimalIter]
800	898	8	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	1	DEF	$
801	905	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	1	DEF	$ <= k
801	905	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	optimalIter <= $
802	908	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
802	908	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
802	908	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ < targetIter
802	908	12	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k < $
803	929	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
804	935	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	1	DEF	$
822	111	4	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ < 0
823	118	6	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms != null
45003	120	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
45003	120	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
45003	120	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
45004	124	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
45004	124	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
45004	124	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
824	131	6	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ <= 4
45005	135	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.errfac.$.length
45005	135	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < errfac.length
45006	139	10	GraggBulirschStoerStepInterpolator.java	resetTables	j	int	0	NIL-FOR	$ <= i
45006	139	10	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	j <= $
825	210	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	1	DEF	interpolator.$.polynoms == null
825	210	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	interpolator	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms == null
45007	215	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.polynoms.$.length
45007	215	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	i	int	0	NIL-FOR	$ < polynoms.length
826	237	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms == null
826	237	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms.$.length <= (mu + 4)
826	237	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	polynoms.length <= ($ + 4)
45008	243	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
45008	243	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	i	int	0	NIL-FOR	$ < currentState.length
827	256	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	RET	$ < 0
828	264	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 0
829	268	8	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 1
830	272	10	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 2
45009	276	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	j	int	0	NIL-FOR	$ <= mu
45009	276	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	NIL-FOR	j <= $
831	296	4	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree >= 5
45010	297	6	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
45010	297	6	GraggBulirschStoerStepInterpolator.java	estimateError	i	int	0	NIL-FOR	$ < currentState.length
45011	318	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < dimension
45011	318	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedState	dimension	int	0	NIL-FOR	i < $
832	324	6	GraggBulirschStoerStepInterpolator.java	computeInterpolatedState	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree > 3
45012	326	8	GraggBulirschStoerStepInterpolator.java	computeInterpolatedState	j	int	0	NIL-FOR	$ > 3
45013	346	4	GraggBulirschStoerStepInterpolator.java	writeExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
45013	346	4	GraggBulirschStoerStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ <= currentDegree
45014	347	6	GraggBulirschStoerStepInterpolator.java	writeExternal	l	int	0	NIL-FOR	$ < dimension
45014	347	6	GraggBulirschStoerStepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	l < $
45015	367	4	GraggBulirschStoerStepInterpolator.java	readExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
45015	367	4	GraggBulirschStoerStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ <= currentDegree
45016	368	6	GraggBulirschStoerStepInterpolator.java	readExternal	l	int	0	NIL-FOR	$ < dimension
45016	368	6	GraggBulirschStoerStepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	l < $
45030	117	4	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	j < y0.$.length
45030	117	4	HighamHall54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
45030	117	4	HighamHall54Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
45031	119	6	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	l < $.staticE.$.length
45031	119	6	HighamHall54Integrator.java	estimateError	l	int	0	NIL-FOR	$ < staticE.length
45029	78	4	HighamHall54StepInterpolator.java	computeInterpolatedState	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
45029	78	4	HighamHall54StepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
307	55	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	IllegalArgumentException	numberOfSuccesses > $
307	55	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	numberOfSuccesses	int	0	IllegalArgumentException	$ > populationSize
308	60	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	IllegalArgumentException	sampleSize > $
308	60	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	sampleSize	int	0	IllegalArgumentException	$ > populationSize
309	82	8	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x < $[0]
309	82	8	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < domain[0]
310	84	15	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x >= $[1]
310	84	15	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= domain[1]
311	194	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x < $[0]
311	194	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x > $[1]
311	194	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ < domain[0]
311	194	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ > domain[1]
312	225	8	HypergeometricDistributionImpl.java	setNumberOfSuccesses	num	int	0	IllegalArgumentException	$ < 0
313	238	8	HypergeometricDistributionImpl.java	setPopulationSize	size	int	0	IllegalArgumentException	$ <= 0
314	251	8	HypergeometricDistributionImpl.java	setSampleSize	size	int	0	IllegalArgumentException	$ < 0
315	272	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x < $[0]
315	272	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ < domain[0]
316	274	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x > $[1]
316	274	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ > domain[1]
44597	300	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x0	int	0	NIL-WHILE	$ != x1
44597	300	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x1	int	0	NIL-WHILE	x0 != $
498	79	8	Kurtosis.java	increment	THIS	Kurtosis	1	DEF	$.incMoment
499	92	8	Kurtosis.java	getResult	THIS	Kurtosis	0	DEF	$.moment.getN() > 3
500	94	16	Kurtosis.java	getResult	THIS	Kurtosis	1	DEF	$.moment.$.n <= 3
500	94	16	Kurtosis.java	getResult	variance	double	1	DEF	$ < 10E-20
501	111	8	Kurtosis.java	clear	THIS	Kurtosis	1	DEF	$.incMoment
502	148	8	Kurtosis.java	evaluate	THIS	Kurtosis	0	DEF	$.test(values, begin, length)
502	148	8	Kurtosis.java	evaluate	values	double[]	0	DEF	test($, begin, length)
502	148	8	Kurtosis.java	evaluate	begin	int	0	DEF	test(values, $, length)
502	148	8	Kurtosis.java	evaluate	length	int	0	DEF	test(values, begin, $)
502	148	8	Kurtosis.java	evaluate	length	int	0	DEF	$ > 3
44793	159	12	Kurtosis.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
44793	159	12	Kurtosis.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
44793	159	12	Kurtosis.java	evaluate	length	int	0	NIL-FOR	i < begin + $
979	54	8	LaguerreSolver.java	LaguerreSolver	f	UnivariateRealFunction	1	DEF	$ instanceof PolynomialFunction
980	89	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.p.value(min) == 0.0
980	89	8	LaguerreSolver.java	solve	min	double	0	RET	p.value($) == 0.0
981	90	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.p.value(max) == 0.0
981	90	8	LaguerreSolver.java	solve	max	double	0	RET	p.value($) == 0.0
982	91	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.p.value(initial) == 0.0
982	91	8	LaguerreSolver.java	solve	initial	double	0	RET	p.value($) == 0.0
983	95	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	1	RET	$.isBracketing(min, initial, $.p)
983	95	8	LaguerreSolver.java	solve	min	double	1	RET	isBracketing($, initial, p)
983	95	8	LaguerreSolver.java	solve	initial	double	1	RET	isBracketing(min, $, p)
984	124	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.p.value(min) == 0.0
984	124	8	LaguerreSolver.java	solve	min	double	0	RET	p.value($) == 0.0
985	125	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.p.value(max) == 0.0
985	125	8	LaguerreSolver.java	solve	max	double	0	RET	p.value($) == 0.0
45071	130	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-FOR	i < coefficients.$.length
45071	130	8	LaguerreSolver.java	solve	i	int	0	NIL-FOR	$ < coefficients.length
45071	130	8	LaguerreSolver.java	solve	coefficients	double[]	0	NIL-FOR	i < $.length
986	135	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.isRootOK(min, max, z)
986	135	8	LaguerreSolver.java	solve	z	Complex	0	RET	isRootOK(min, max, $)
986	135	8	LaguerreSolver.java	solve	min	double	0	RET	isRootOK($, max, z)
986	135	8	LaguerreSolver.java	solve	max	double	0	RET	isRootOK(min, $, z)
45072	142	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-FOR	i < root.$.length
45072	142	8	LaguerreSolver.java	solve	i	int	0	NIL-FOR	$ < root.length
45072	142	8	LaguerreSolver.java	solve	root	Complex[]	0	NIL-FOR	i < $.length
987	143	12	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.isRootOK(min, max, root[i])
987	143	12	LaguerreSolver.java	solve	i	int	0	RET	isRootOK(min, max, root[$])
987	143	12	LaguerreSolver.java	solve	root	Complex[]	0	RET	isRootOK(min, max, $[i])
987	143	12	LaguerreSolver.java	solve	min	double	0	RET	isRootOK($, max, root[i])
987	143	12	LaguerreSolver.java	solve	max	double	0	RET	isRootOK(min, $, root[i])
45073	187	8	LaguerreSolver.java	solveAll	THIS	LaguerreSolver	0	NIL-FOR	i < c.$.length
45073	187	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ < c.length
45073	187	8	LaguerreSolver.java	solveAll	c	Complex[]	0	NIL-FOR	i < $.length
988	211	8	LaguerreSolver.java	solveAll	n	int	0	IllegalArgumentException	$ < 1
45074	216	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ <= n
45074	216	8	LaguerreSolver.java	solveAll	n	int	0	NIL-FOR	i <= $
45075	222	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ < n
45075	222	8	LaguerreSolver.java	solveAll	n	int	0	NIL-FOR	i < $
45076	229	12	LaguerreSolver.java	solveAll	j	int	0	NIL-FOR	$ >= 0
989	259	8	LaguerreSolver.java	solve	n	int	0	IllegalArgumentException	$ < 1
45077	277	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-WHILE	i <= $.maximalIterationCount
45077	277	8	LaguerreSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
45078	283	12	LaguerreSolver.java	solve	j	int	0	NIL-FOR	$ >= 0
990	293	12	LaguerreSolver.java	solve	tolerance	double	0	RET	(z.subtract(oldz)).abs() <= $
990	293	12	LaguerreSolver.java	solve	z	Complex	0	RET	($.subtract(oldz)).abs() <= tolerance
990	293	12	LaguerreSolver.java	solve	oldz	Complex	0	RET	(z.subtract($)).abs() <= tolerance
991	298	12	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	pv.abs() <= $.functionValueAccuracy
991	298	12	LaguerreSolver.java	solve	pv	Complex	0	RET	$.abs() <= functionValueAccuracy
992	316	12	LaguerreSolver.java	solve	denominator	Complex	1	DEF	$.equals(new Complex(0.0, 0.0))
44867	239	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.solvedCols
44867	239	6	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < solvedCols
680	244	6	LevenbergMarquardtEstimator.java	estimate	firstIteration	boolean	0	DEF	$
44868	249	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
44868	249	8	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < cols
681	251	10	LevenbergMarquardtEstimator.java	estimate	dk	double	0	DEF	$ == 0
682	267	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	$.cost != 0
44869	268	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44869	268	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
683	271	10	LevenbergMarquardtEstimator.java	estimate	s	double	0	DEF	$ != 0
44870	273	12	LevenbergMarquardtEstimator.java	estimate	i	int	0	NIL-FOR	$ <= j
44870	273	12	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	i <= $
684	280	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	maxCosine <= $.orthoTolerance
684	280	6	LevenbergMarquardtEstimator.java	estimate	maxCosine	double	0	RET	$ <= orthoTolerance
44871	285	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.cols
44871	285	6	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < cols
44872	290	6	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	NIL-FOR	$ < 1.0e-4
44873	293	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44873	293	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
44874	307	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44874	307	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
685	317	8	LevenbergMarquardtEstimator.java	estimate	firstIteration	boolean	0	DEF	$
686	326	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	0.1 * $.cost < previousCost
686	326	8	LevenbergMarquardtEstimator.java	estimate	previousCost	double	0	DEF	0.1 * cost < $
44875	333	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44875	333	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
44876	337	10	LevenbergMarquardtEstimator.java	estimate	i	int	0	NIL-FOR	$ <= j
44876	337	10	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	i <= $
44877	342	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44877	342	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
687	355	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	DEF	$ <= 0.25
688	358	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	0.1 * $.cost >= previousCost
688	358	10	LevenbergMarquardtEstimator.java	estimate	tmp	double	0	DEF	$ < 0.1
688	358	10	LevenbergMarquardtEstimator.java	estimate	previousCost	double	0	DEF	0.1 * cost >= $
689	363	15	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
689	363	15	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	DEF	$ >= 0.75
690	369	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	DEF	$ >= 1.0e-4
44878	373	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
44878	373	10	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < cols
44879	381	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44879	381	10	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
691	391	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	preRed <= $.costRelativeTolerance
691	391	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	delta <= $.parRelativeTolerance * xNorm
691	391	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	Math.abs(actRed) <= $.costRelativeTolerance
691	391	8	LevenbergMarquardtEstimator.java	estimate	actRed	double	0	RET	Math.abs($) <= costRelativeTolerance
691	391	8	LevenbergMarquardtEstimator.java	estimate	preRed	double	0	RET	$ <= costRelativeTolerance
691	391	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	RET	$ <= 2.0
691	391	8	LevenbergMarquardtEstimator.java	estimate	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
691	391	8	LevenbergMarquardtEstimator.java	estimate	xNorm	double	0	RET	delta <= parRelativeTolerance * $
692	400	8	LevenbergMarquardtEstimator.java	estimate	actRed	double	1	EstimationException	Math.abs($) <= 2.2204e-16
692	400	8	LevenbergMarquardtEstimator.java	estimate	preRed	double	1	EstimationException	$ <= 2.2204e-16
692	400	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	EstimationException	$ <= 2.0
693	405	15	LevenbergMarquardtEstimator.java	estimate	delta	double	1	EstimationException	$ <= 2.2204e-16 * xNorm
693	405	15	LevenbergMarquardtEstimator.java	estimate	xNorm	double	1	EstimationException	delta <= 2.2204e-16 * $
694	410	15	LevenbergMarquardtEstimator.java	estimate	maxCosine	double	0	EstimationException	$ <= 2.2204e-16
44880	449	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.rank
44880	449	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
44881	452	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.cols
44881	452	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < cols
44882	455	4	LevenbergMarquardtEstimator.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
44883	458	6	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
44883	458	6	LevenbergMarquardtEstimator.java	determineLMParameter	k	int	0	NIL-FOR	i < $
44884	467	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44884	467	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
695	475	4	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
695	475	4	LevenbergMarquardtEstimator.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
696	484	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.rank == $.solvedCols
44885	485	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44885	485	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
44886	490	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44886	490	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
44887	493	8	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
44887	493	8	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	i < $
44888	505	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44888	505	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
44889	508	6	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
44889	508	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
697	516	4	LevenbergMarquardtEstimator.java	determineLMParameter	paru	double	0	DEF	$ == 0
698	524	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
44890	528	4	LevenbergMarquardtEstimator.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
699	531	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
44891	535	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44891	535	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
44892	542	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44892	542	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
700	554	6	LevenbergMarquardtEstimator.java	determineLMParameter	previousFP	double	0	RET	fp <= $
700	554	6	LevenbergMarquardtEstimator.java	determineLMParameter	previousFP	double	0	RET	$ < 0
700	554	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
700	554	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	Math.abs($) <= 0.1 * delta
700	554	6	LevenbergMarquardtEstimator.java	determineLMParameter	parl	double	0	RET	$ == 0
700	554	6	LevenbergMarquardtEstimator.java	determineLMParameter	delta	double	0	RET	Math.abs(fp) <= 0.1 * $
44893	560	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44893	560	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
44894	564	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44894	564	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
44895	568	8	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
44895	568	8	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
44896	573	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44896	573	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
701	580	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	1	DEF	$ > 0
702	582	13	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	DEF	$ < 0
44897	617	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44897	617	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
44898	619	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
44898	619	6	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
44899	627	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44899	627	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
703	633	6	LevenbergMarquardtEstimator.java	determineLMDirection	dpj	double	0	DEF	$ != 0
44900	642	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.solvedCols
44900	642	6	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
704	647	8	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
704	647	8	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
705	651	10	LevenbergMarquardtEstimator.java	determineLMDirection	rkk	double	1	DEF	Math.abs($) < Math.abs(lmDiag[k])
705	651	10	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	1	DEF	Math.abs(rkk) < Math.abs(lmDiag[$])
705	651	10	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	1	DEF	Math.abs(rkk) < Math.abs($[k])
44901	669	10	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
44901	669	10	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
44902	690	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
44902	690	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
706	691	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	DEF	nSing == $.solvedCols
706	691	6	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
706	691	6	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
706	691	6	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
707	694	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	DEF	nSing < $.solvedCols
707	694	6	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
708	698	4	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ > 0
44903	699	6	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
44904	702	8	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
44904	702	8	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
44905	710	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.lmDir.$.length
44905	710	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
44906	741	4	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
44906	741	4	LevenbergMarquardtEstimator.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
44907	744	6	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
44907	744	6	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
44908	752	4	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
44908	752	4	LevenbergMarquardtEstimator.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
44909	757	6	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.cols
44909	757	6	LevenbergMarquardtEstimator.java	qrDecomposition	i	int	0	NIL-FOR	$ < cols
44910	760	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
44910	760	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
709	764	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	EstimationException	Double.isInfinite($)
709	764	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	EstimationException	Double.isNaN($)
710	768	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
710	768	8	LevenbergMarquardtEstimator.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
711	773	6	LevenbergMarquardtEstimator.java	qrDecomposition	ak2	double	0	RET	$ == 0
44911	793	6	LevenbergMarquardtEstimator.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
44912	796	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
44912	796	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
44913	800	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
44913	800	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
44914	817	4	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
44914	817	4	LevenbergMarquardtEstimator.java	qTy	k	int	0	NIL-FOR	$ < cols
44915	821	6	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.rows
44915	821	6	LevenbergMarquardtEstimator.java	qTy	i	int	0	NIL-FOR	$ < rows
44916	825	6	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.rows
44916	825	6	LevenbergMarquardtEstimator.java	qTy	i	int	0	NIL-FOR	$ < rows
0	84	12	MathException.java	translate	THIS	MathException	0	DEF	$.cachedResources == null
0	84	12	MathException.java	translate	THIS	MathException	0	DEF	$.cachedResources.getLocale().equals(locale)
0	84	12	MathException.java	translate	locale	Locale	0	DEF	cachedResources.getLocale().equals($)
1	90	12	MathException.java	translate	THIS	MathException	0	RET	$.cachedResources.getLocale().getLanguage().equals(locale.getLanguage())
1	90	12	MathException.java	translate	locale	Locale	0	RET	cachedResources.getLocale().getLanguage().equals($.getLanguage())
2	242	12	MathException.java	printStackTrace	THIS	MathException	0	DEF	$.rootCause != null
30	68	8	MathUtils.java	addAndCheck	s	long	0	ArithmeticException	$ < Integer.MIN_VALUE
30	68	8	MathUtils.java	addAndCheck	s	long	0	ArithmeticException	$ > Integer.MAX_VALUE
31	101	8	MathUtils.java	addAndCheck	a	long	1	DEF	$ > b
31	101	8	MathUtils.java	addAndCheck	b	long	1	DEF	a > $
32	107	12	MathUtils.java	addAndCheck	a	long	1	ArithmeticException	$ < 0
33	108	16	MathUtils.java	addAndCheck	b	long	1	ArithmeticException	$ < 0
34	110	20	MathUtils.java	addAndCheck	a	long	1	DEF	Long.MIN_VALUE - b <= $
34	110	20	MathUtils.java	addAndCheck	b	long	1	DEF	Long.MIN_VALUE - $ <= a
35	124	16	MathUtils.java	addAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE - b
35	124	16	MathUtils.java	addAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE - $
36	161	8	MathUtils.java	binomialCoefficient	n	int	0	IllegalArgumentException	$ < k
36	161	8	MathUtils.java	binomialCoefficient	k	int	0	IllegalArgumentException	n < $
37	165	8	MathUtils.java	binomialCoefficient	n	int	0	IllegalArgumentException	$ < 0
38	169	8	MathUtils.java	binomialCoefficient	n	int	0	RET	$ == k
38	169	8	MathUtils.java	binomialCoefficient	k	int	0	RET	n == $
38	169	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 0
39	172	8	MathUtils.java	binomialCoefficient	n	int	0	RET	k == $ - 1
39	172	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == n - 1
39	172	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 1
40	177	8	MathUtils.java	binomialCoefficient	result	long	0	ArithmeticException	$ == Long.MAX_VALUE
41	229	8	MathUtils.java	binomialCoefficientLog	n	int	0	IllegalArgumentException	$ < k
41	229	8	MathUtils.java	binomialCoefficientLog	k	int	0	IllegalArgumentException	n < $
42	233	8	MathUtils.java	binomialCoefficientLog	n	int	0	IllegalArgumentException	$ < 0
43	237	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ == k
43	237	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 0
43	237	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	n == $
44	240	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	k == $ - 1
44	240	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == n - 1
44	240	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 1
44582	246	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n
44582	246	8	MathUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $
44583	251	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n - k
44583	251	8	MathUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $ - k
44583	251	8	MathUtils.java	binomialCoefficientLog	k	int	0	NIL-FOR	i <= n - $
45	292	8	MathUtils.java	equals	x	double[]	0	RET	$ == null
45	292	8	MathUtils.java	equals	y	double[]	0	RET	$ == null
46	295	8	MathUtils.java	equals	THIS	MathUtils	0	RET	x.$.length != y.$.length
46	295	8	MathUtils.java	equals	x	double[]	0	RET	$.length != y.length
46	295	8	MathUtils.java	equals	y	double[]	0	RET	x.length != $.length
44584	298	8	MathUtils.java	equals	THIS	MathUtils	0	NIL-FOR	i < x.$.length
44584	298	8	MathUtils.java	equals	i	int	0	NIL-FOR	$ < x.length
44584	298	8	MathUtils.java	equals	x	double[]	0	NIL-FOR	i < $.length
47	299	12	MathUtils.java	equals	THIS	MathUtils	0	RET	$.equals(x[i], y[i])
47	299	12	MathUtils.java	equals	i	int	0	RET	equals(x[$], y[$])
47	299	12	MathUtils.java	equals	x	double[]	0	RET	equals($[i], y[i])
47	299	12	MathUtils.java	equals	y	double[]	0	RET	equals(x[i], $[i])
48	330	8	MathUtils.java	factorial	result	long	0	ArithmeticException	$ == Long.MAX_VALUE
49	358	8	MathUtils.java	factorialDouble	n	int	0	IllegalArgumentException	$ < 0
50	378	8	MathUtils.java	factorialLog	n	int	0	IllegalArgumentException	$ < 0
44585	382	8	MathUtils.java	factorialLog	i	int	0	NIL-FOR	$ <= n
44585	382	8	MathUtils.java	factorialLog	n	int	0	NIL-FOR	i <= $
51	402	8	MathUtils.java	gcd	u	int	0	RET	$ * v == 0
51	402	8	MathUtils.java	gcd	v	int	0	RET	u * $ == 0
52	410	8	MathUtils.java	gcd	u	int	0	DEF	$ > 0
53	413	8	MathUtils.java	gcd	v	int	0	DEF	$ > 0
44586	418	8	MathUtils.java	gcd	k	int	0	NIL-WHILE	$ < 31
44586	418	8	MathUtils.java	gcd	u	int	0	NIL-WHILE	($ & 1) == 0
44586	418	8	MathUtils.java	gcd	v	int	0	NIL-WHILE	($ & 1) == 0
54	424	8	MathUtils.java	gcd	k	int	0	ArithmeticException	$ == 31
44587	432	8	MathUtils.java	gcd	t	int	0	NIL-DOWHILE	$ != 0
44588	435	12	MathUtils.java	gcd	t	int	0	NIL-WHILE	($ & 1) == 0
55	439	12	MathUtils.java	gcd	t	int	1	DEF	$ > 0
56	471	8	MathUtils.java	hash	value	double[]	0	RET	$ == null
44589	475	8	MathUtils.java	hash	THIS	MathUtils	0	NIL-FOR	i < value.$.length
44589	475	8	MathUtils.java	hash	i	int	0	NIL-FOR	$ < value.length
44589	475	8	MathUtils.java	hash	value	double[]	0	NIL-FOR	i < $.length
57	501	8	MathUtils.java	indicator	x	double	0	RET	Double.isNaN($)
58	515	8	MathUtils.java	indicator	x	float	0	RET	Float.isNaN($)
59	597	8	MathUtils.java	mulAndCheck	m	long	0	ArithmeticException	$ < Integer.MIN_VALUE
59	597	8	MathUtils.java	mulAndCheck	m	long	0	ArithmeticException	$ > Integer.MAX_VALUE
60	616	8	MathUtils.java	mulAndCheck	a	long	1	DEF	$ > b
60	616	8	MathUtils.java	mulAndCheck	b	long	1	DEF	a > $
61	620	12	MathUtils.java	mulAndCheck	a	long	1	ArithmeticException	$ < 0
62	621	16	MathUtils.java	mulAndCheck	b	long	1	ArithmeticException	$ < 0
63	623	20	MathUtils.java	mulAndCheck	a	long	1	DEF	$ >= Long.MAX_VALUE / b
63	623	20	MathUtils.java	mulAndCheck	b	long	1	DEF	a >= Long.MAX_VALUE / $
64	628	23	MathUtils.java	mulAndCheck	b	long	1	ArithmeticException	$ > 0
65	630	20	MathUtils.java	mulAndCheck	a	long	1	DEF	Long.MIN_VALUE / b <= $
65	630	20	MathUtils.java	mulAndCheck	b	long	1	DEF	Long.MIN_VALUE / $ <= a
66	640	19	MathUtils.java	mulAndCheck	a	long	1	ArithmeticException	$ > 0
67	645	16	MathUtils.java	mulAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE / b
67	645	16	MathUtils.java	mulAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE / $
68	678	8	MathUtils.java	nextAfter	d	double	1	RET	Double.isNaN($)
68	678	8	MathUtils.java	nextAfter	d	double	1	RET	Double.isInfinite($)
69	680	15	MathUtils.java	nextAfter	d	double	0	RET	$ == 0
70	692	8	MathUtils.java	nextAfter	d	double	1	RET	$ * (direction - $) >= 0
70	692	8	MathUtils.java	nextAfter	direction	double	1	RET	d * ($ - d) >= 0
71	694	16	MathUtils.java	nextAfter	mantissa	long	1	RET	$ == 0x000fffffffffffffL
72	703	16	MathUtils.java	nextAfter	mantissa	long	1	RET	$ == 0L
73	770	12	MathUtils.java	round	x	double	1	RET	Double.isInfinite($)
74	825	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
75	835	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
76	844	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
77	853	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
78	855	19	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ < 0.5
79	859	16	MathUtils.java	roundUnscaled	unscaled	double	1	DEF	Math.floor($) / 2.0 == Math.floor(Math .floor($) / 2.0)
80	871	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ >= 0.5
81	879	12	MathUtils.java	roundUnscaled	unscaled	double	0	ArithmeticException	$ != Math.floor($)
82	919	8	MathUtils.java	sign	x	double	0	RET	Double.isNaN($)
83	937	8	MathUtils.java	sign	x	float	0	RET	Float.isNaN($)
84	1009	8	MathUtils.java	subAndCheck	s	long	0	ArithmeticException	$ > Integer.MAX_VALUE
84	1009	8	MathUtils.java	subAndCheck	s	long	0	ArithmeticException	$ < Integer.MIN_VALUE
85	1028	8	MathUtils.java	subAndCheck	b	long	1	ArithmeticException	$ == Long.MIN_VALUE
86	1029	12	MathUtils.java	subAndCheck	a	long	1	DEF	$ < 0
44734	82	8	MatrixUtils.java	createRealIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
44734	82	8	MatrixUtils.java	createRealIdentityMatrix	dimension	int	0	NIL-FOR	row < $
44735	178	8	MatrixUtils.java	createRowBigMatrix	i	int	0	NIL-FOR	$ < nCols
44735	178	8	MatrixUtils.java	createRowBigMatrix	nCols	int	0	NIL-FOR	i < $
44736	212	8	MatrixUtils.java	createRowBigMatrix	i	int	0	NIL-FOR	$ < nCols
44736	212	8	MatrixUtils.java	createRowBigMatrix	nCols	int	0	NIL-FOR	i < $
44737	230	8	MatrixUtils.java	createColumnRealMatrix	row	int	0	NIL-FOR	$ < nRows
44737	230	8	MatrixUtils.java	createColumnRealMatrix	nRows	int	0	NIL-FOR	row < $
44738	248	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
44738	248	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
44739	266	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
44739	266	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
44740	284	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
44740	284	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
44741	300	8	MatrixUtils.java	createBigIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
44741	300	8	MatrixUtils.java	createBigIdentityMatrix	dimension	int	0	NIL-FOR	row < $
532	61	8	Max.java	increment	THIS	Max	0	DEF	Double.isNaN($.value)
532	61	8	Max.java	increment	THIS	Max	0	DEF	d > $.value
532	61	8	Max.java	increment	d	double	0	DEF	$ > value
533	113	8	Max.java	evaluate	THIS	Max	0	DEF	$.test(values, begin, length)
533	113	8	Max.java	evaluate	values	double[]	0	DEF	test($, begin, length)
533	113	8	Max.java	evaluate	begin	int	0	DEF	test(values, $, length)
533	113	8	Max.java	evaluate	length	int	0	DEF	test(values, begin, $)
44798	115	12	Max.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
44798	115	12	Max.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
44798	115	12	Max.java	evaluate	length	int	0	NIL-FOR	i < begin + $
534	116	16	Max.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
534	116	16	Max.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
486	95	8	Mean.java	increment	THIS	Mean	0	DEF	$.incMoment
487	104	8	Mean.java	clear	THIS	Mean	0	DEF	$.incMoment
488	140	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, begin, length)
488	140	8	Mean.java	evaluate	values	double[]	0	RET	test($, begin, length)
488	140	8	Mean.java	evaluate	begin	int	0	RET	test(values, $, length)
488	140	8	Mean.java	evaluate	length	int	0	RET	test(values, begin, $)
44786	149	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
44786	149	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
44786	149	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
45017	83	4	MidpointStepInterpolator.java	computeInterpolatedState	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
45017	83	4	MidpointStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
529	63	8	Min.java	increment	THIS	Min	0	DEF	Double.isNaN($.value)
529	63	8	Min.java	increment	THIS	Min	0	DEF	d < $.value
529	63	8	Min.java	increment	d	double	0	DEF	$ < value
530	115	8	Min.java	evaluate	THIS	Min	0	DEF	$.test(values, begin, length)
530	115	8	Min.java	evaluate	values	double[]	0	DEF	test($, begin, length)
530	115	8	Min.java	evaluate	begin	int	0	DEF	test(values, $, length)
530	115	8	Min.java	evaluate	length	int	0	DEF	test(values, begin, $)
44797	117	12	Min.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
44797	117	12	Min.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
44797	117	12	Min.java	evaluate	length	int	0	NIL-FOR	i < begin + $
531	118	16	Min.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
531	118	16	Min.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
948	69	8	MullerSolver.java	solve	THIS	MullerSolver	0	RET	$.f.value(min) == 0.0
948	69	8	MullerSolver.java	solve	min	double	0	RET	f.value($) == 0.0
949	70	8	MullerSolver.java	solve	THIS	MullerSolver	0	RET	$.f.value(max) == 0.0
949	70	8	MullerSolver.java	solve	max	double	0	RET	f.value($) == 0.0
950	71	8	MullerSolver.java	solve	THIS	MullerSolver	0	RET	$.f.value(initial) == 0.0
950	71	8	MullerSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
951	75	8	MullerSolver.java	solve	THIS	MullerSolver	1	RET	$.isBracketing(min, initial, $.f)
951	75	8	MullerSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
951	75	8	MullerSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
952	121	8	MullerSolver.java	solve	y0	double	0	RET	$ == 0.0
953	122	8	MullerSolver.java	solve	y2	double	0	RET	$ == 0.0
45065	127	8	MullerSolver.java	solve	THIS	MullerSolver	0	NIL-WHILE	i <= $.maximalIterationCount
45065	127	8	MullerSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
954	146	12	MullerSolver.java	solve	x	double	0	RET	Math.abs($ - oldx) <= tolerance
954	146	12	MullerSolver.java	solve	oldx	double	0	RET	Math.abs(x - $) <= tolerance
954	146	12	MullerSolver.java	solve	tolerance	double	0	RET	Math.abs(x - oldx) <= $
955	150	12	MullerSolver.java	solve	THIS	MullerSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
955	150	12	MullerSolver.java	solve	y	double	0	RET	Math.abs($) <= functionValueAccuracy
956	163	12	MullerSolver.java	solve	bisect	boolean	1	DEF	$
957	173	16	MullerSolver.java	solve	ym	double	1	DEF	MathUtils.sign(y0) + MathUtils.sign($) == 0.0
957	173	16	MullerSolver.java	solve	y0	double	1	DEF	MathUtils.sign($) + MathUtils.sign(ym) == 0.0
958	226	8	MullerSolver.java	solve2	y0	double	0	RET	$ == 0.0
959	227	8	MullerSolver.java	solve2	y1	double	0	RET	$ == 0.0
45066	232	8	MullerSolver.java	solve2	THIS	MullerSolver	0	NIL-WHILE	i <= $.maximalIterationCount
45066	232	8	MullerSolver.java	solve2	i	int	0	NIL-WHILE	$ <= maximalIterationCount
960	239	12	MullerSolver.java	solve2	delta	double	1	DEF	$ >= 0.0
961	248	12	MullerSolver.java	solve2	denominator	double	1	DEF	$ != 0
45067	252	16	MullerSolver.java	solve2	x1	double	0	NIL-WHILE	x == $
45067	252	16	MullerSolver.java	solve2	x2	double	0	NIL-WHILE	x == $
45067	252	16	MullerSolver.java	solve2	x	double	0	NIL-WHILE	$ == x2
45067	252	16	MullerSolver.java	solve2	x	double	0	NIL-WHILE	$ == x1
962	264	12	MullerSolver.java	solve2	x	double	0	RET	Math.abs($ - oldx) <= tolerance
962	264	12	MullerSolver.java	solve2	oldx	double	0	RET	Math.abs(x - $) <= tolerance
962	264	12	MullerSolver.java	solve2	tolerance	double	0	RET	Math.abs(x - oldx) <= $
963	268	12	MullerSolver.java	solve2	THIS	MullerSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
963	268	12	MullerSolver.java	solve2	y	double	0	RET	Math.abs($) <= functionValueAccuracy
440	64	6	MultiDirectional.java	iterateSimplex	originalCost	double	0	RET	reflectedCost < $
440	64	6	MultiDirectional.java	iterateSimplex	reflectedCost	double	0	RET	$ < originalCost
441	69	8	MultiDirectional.java	iterateSimplex	expandedCost	double	0	DEF	reflectedCost <= $
441	69	8	MultiDirectional.java	iterateSimplex	reflectedCost	double	0	DEF	$ <= expandedCost
442	80	6	MultiDirectional.java	iterateSimplex	originalCost	double	0	RET	contractedCost < $
442	80	6	MultiDirectional.java	iterateSimplex	contractedCost	double	0	RET	$ < originalCost
44763	105	4	MultiDirectional.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ <= n
44763	105	4	MultiDirectional.java	evaluateNewSimplex	n	int	0	NIL-FOR	i <= $
44764	108	6	MultiDirectional.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < n
44764	108	6	MultiDirectional.java	evaluateNewSimplex	n	int	0	NIL-FOR	j < $
44774	91	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	i	int	0	NIL-FOR	$ < k
44774	91	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	k	int	0	NIL-FOR	i < $
44775	146	8	MultivariateSummaryStatistics.java	addValue	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
44775	146	8	MultivariateSummaryStatistics.java	addValue	i	int	0	NIL-FOR	$ < k
44776	183	8	MultivariateSummaryStatistics.java	getResults	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < results.$.length
44776	183	8	MultivariateSummaryStatistics.java	getResults	i	int	0	NIL-FOR	$ < results.length
44776	183	8	MultivariateSummaryStatistics.java	getResults	results	double[]	0	NIL-FOR	i < $.length
452	242	8	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 1
453	244	15	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 2
44777	248	12	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
44777	248	12	MultivariateSummaryStatistics.java	getStandardDeviation	i	int	0	NIL-FOR	$ < k
44778	329	8	MultivariateSummaryStatistics.java	append	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < data.$.length
44778	329	8	MultivariateSummaryStatistics.java	append	i	int	0	NIL-FOR	$ < data.length
44778	329	8	MultivariateSummaryStatistics.java	append	data	double[]	0	NIL-FOR	i < $.length
454	330	12	MultivariateSummaryStatistics.java	append	i	int	0	DEF	$ > 0
44779	343	8	MultivariateSummaryStatistics.java	clear	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
44779	343	8	MultivariateSummaryStatistics.java	clear	i	int	0	NIL-FOR	$ < k
455	362	8	MultivariateSummaryStatistics.java	equals	THIS	MultivariateSummaryStatistics	0	RET	object == $
455	362	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ == this
456	365	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ instanceof MultivariateSummaryStatistics == false
457	611	8	MultivariateSummaryStatistics.java	checkEmpty	THIS	MultivariateSummaryStatistics	0	IllegalStateException	$.n > 0
458	624	8	MultivariateSummaryStatistics.java	checkDimension	THIS	MultivariateSummaryStatistics	0	DimensionMismatchException	dimension != $.k
458	624	8	MultivariateSummaryStatistics.java	checkDimension	dimension	int	0	DimensionMismatchException	$ != k
44754	75	4	NelderMead.java	iterateSimplex	i	int	0	NIL-FOR	$ < n
44754	75	4	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	i < $
44755	77	6	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
44755	77	6	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
44756	82	4	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
44756	82	4	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
44757	88	4	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
44757	88	4	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
434	93	4	NelderMead.java	iterateSimplex	smallest	double	1	DEF	$ <= costR
434	93	4	NelderMead.java	iterateSimplex	secondLargest	double	1	DEF	costR < $
434	93	4	NelderMead.java	iterateSimplex	costR	double	1	DEF	smallest <= $
434	93	4	NelderMead.java	iterateSimplex	costR	double	1	DEF	$ < secondLargest
435	98	11	NelderMead.java	iterateSimplex	smallest	double	1	DEF	costR < $
435	98	11	NelderMead.java	iterateSimplex	costR	double	1	DEF	$ < smallest
44758	102	6	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
44758	102	6	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
436	107	6	NelderMead.java	iterateSimplex	costE	double	1	DEF	$ < costR
436	107	6	NelderMead.java	iterateSimplex	costR	double	1	DEF	costE < $
437	117	6	NelderMead.java	iterateSimplex	largest	double	1	RET	costR < $
437	117	6	NelderMead.java	iterateSimplex	costR	double	1	RET	$ < largest
44759	121	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
44759	121	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
438	126	8	NelderMead.java	iterateSimplex	costC	double	0	RET	$ <= costR
438	126	8	NelderMead.java	iterateSimplex	costR	double	0	RET	costC <= $
44760	136	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
44760	136	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
439	141	8	NelderMead.java	iterateSimplex	costC	double	0	RET	$ < largest
439	141	8	NelderMead.java	iterateSimplex	largest	double	0	RET	costC < $
44761	151	6	NelderMead.java	iterateSimplex	THIS	NelderMead	0	NIL-FOR	i < $.simplex.$.length
44761	151	6	NelderMead.java	iterateSimplex	i	int	0	NIL-FOR	$ < simplex.length
44762	153	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
44762	153	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
45050	87	8	NewtonSolver.java	solve	THIS	NewtonSolver	0	NIL-WHILE	i < $.maximalIterationCount
45050	87	8	NewtonSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
914	89	12	NewtonSolver.java	solve	THIS	NewtonSolver	0	RET	Math.abs(x1 - x0) <= $.absoluteAccuracy
914	89	12	NewtonSolver.java	solve	x0	double	0	RET	Math.abs(x1 - $) <= absoluteAccuracy
914	89	12	NewtonSolver.java	solve	x1	double	0	RET	Math.abs($ - x0) <= absoluteAccuracy
264	93	8	NormalDistributionImpl.java	setStandardDeviation	sd	double	0	IllegalArgumentException	$ <= 0.0
265	113	12	NormalDistributionImpl.java	cumulativeProbability	THIS	NormalDistributionImpl	1	RET	x < ($.mean - 20 * $.standardDeviation)
265	113	12	NormalDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ < (mean - 20 * standardDeviation)
266	115	19	NormalDistributionImpl.java	cumulativeProbability	THIS	NormalDistributionImpl	1	RET	x > ($.mean + 20 * $.standardDeviation)
266	115	19	NormalDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ > (mean + 20 * standardDeviation)
267	139	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
268	142	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
269	160	8	NormalDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < .5
270	181	8	NormalDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
271	201	8	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
272	203	15	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > .5
548	102	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	IllegalArgumentException	$ <= 0
548	102	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	IllegalArgumentException	$ > 0.5
549	123	8	OneWayAnovaImpl.java	anovaStats	categoryData	Collection<double[]>	0	IllegalArgumentException	$.size() < 2
550	130	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	IllegalArgumentException	$.array.$.length <= 1
44799	148	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	NIL-FOR	i < $.data.$.length
44799	148	12	OneWayAnovaImpl.java	anovaStats	i	int	0	NIL-FOR	$ < data.length
317	77	8	PascalDistributionImpl.java	setNumberOfSuccesses	successes	int	0	IllegalArgumentException	$ < 0
318	91	8	PascalDistributionImpl.java	setProbabilityOfSuccess	p	double	0	IllegalArgumentException	$ > 1.0
318	91	8	PascalDistributionImpl.java	setProbabilityOfSuccess	p	double	0	IllegalArgumentException	$ < 0.0
319	130	8	PascalDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
320	146	8	PascalDistributionImpl.java	probability	x	int	1	DEF	$ < 0
321	174	8	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
322	176	15	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
535	187	8	Percentile.java	evaluate	p	double	0	IllegalArgumentException	$ > 100
535	187	8	Percentile.java	evaluate	p	double	0	IllegalArgumentException	$ <= 0
536	190	8	Percentile.java	evaluate	length	int	0	RET	$ == 0
537	193	8	Percentile.java	evaluate	length	int	0	RET	$ == 1
538	205	8	Percentile.java	evaluate	pos	double	0	RET	$ < 1
539	208	8	Percentile.java	evaluate	n	double	0	RET	pos >= $
539	208	8	Percentile.java	evaluate	pos	double	0	RET	$ >= n
540	235	8	Percentile.java	setQuantile	p	double	0	IllegalArgumentException	$ <= 0
540	235	8	Percentile.java	setQuantile	p	double	0	IllegalArgumentException	$ > 100
260	90	8	PoissonDistributionImpl.java	setMean	p	double	0	IllegalArgumentException	$ <= 0
261	106	8	PoissonDistributionImpl.java	probability	x	int	0	RET	$ < 0
261	106	8	PoissonDistributionImpl.java	probability	x	int	0	RET	$ == Integer.MAX_VALUE
262	122	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ < 0
263	125	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ == Integer.MAX_VALUE
923	56	8	PolynomialFunction.java	PolynomialFunction	THIS	PolynomialFunction	0	IllegalArgumentException	c.$.length < 1
923	56	8	PolynomialFunction.java	PolynomialFunction	c	double	0	IllegalArgumentException	$.length < 1
924	114	8	PolynomialFunction.java	evaluate	n	int	0	IllegalArgumentException	$ < 1
45060	118	8	PolynomialFunction.java	evaluate	j	int	0	NIL-FOR	$ >=0
925	134	8	PolynomialFunction.java	differentiate	n	int	0	IllegalArgumentException	$ < 1
926	137	8	PolynomialFunction.java	differentiate	n	int	0	RET	$ == 1
45061	141	8	PolynomialFunction.java	differentiate	i	int	0	NIL-FOR	$ > 0
915	139	8	PolynomialFunctionLagrangeForm.java	getCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.coefficientsComputed
45051	174	8	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	$ < n
45051	174	8	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	i < $
916	180	12	PolynomialFunctionLagrangeForm.java	evaluate	dist	double	0	DEF	$ < min_dist
916	180	12	PolynomialFunctionLagrangeForm.java	evaluate	min_dist	double	0	DEF	dist < $
45052	189	8	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	$ < n
45052	189	8	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	i < $
45053	190	12	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	j < n-$
45053	190	12	PolynomialFunctionLagrangeForm.java	evaluate	j	int	0	NIL-FOR	$ < n-i
45053	190	12	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	j < $-i
917	194	16	PolynomialFunctionLagrangeForm.java	evaluate	divider	double	0	DuplicateSampleAbscissaException	$ == 0.0
918	204	12	PolynomialFunctionLagrangeForm.java	evaluate	i	int	1	DEF	nearest < 0.5*(n-$+1)
918	204	12	PolynomialFunctionLagrangeForm.java	evaluate	n	int	1	DEF	nearest < 0.5*($-i+1)
918	204	12	PolynomialFunctionLagrangeForm.java	evaluate	nearest	int	1	DEF	$ < 0.5*(n-i+1)
45054	230	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
45054	230	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
45055	237	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
45055	237	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
45056	238	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
45057	246	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
45057	246	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
45058	249	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ < n
45058	249	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	j < $
919	250	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != j
919	250	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	DEF	i != $
920	254	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	d	double	0	ArithmeticException	$ == 0.0
45059	265	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ >= 0
921	289	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	IllegalArgumentException	x.$.length < 2
921	289	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	IllegalArgumentException	y.$.length < 2
921	289	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	IllegalArgumentException	$.length < 2
921	289	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	IllegalArgumentException	$.length < 2
922	293	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	IllegalArgumentException	x.$.length != y.$.length
922	293	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	IllegalArgumentException	$.length != y.length
922	293	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	IllegalArgumentException	x.length != $.length
996	137	8	PolynomialFunctionNewtonForm.java	getCoefficients	THIS	PolynomialFunctionNewtonForm	0	DEF	$.coefficientsComputed
45081	164	8	PolynomialFunctionNewtonForm.java	evaluate	i	int	0	NIL-FOR	$ >= 0
45082	179	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ <= n
45082	179	8	PolynomialFunctionNewtonForm.java	computeCoefficients	n	int	0	NIL-FOR	i <= $
45083	184	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ >= 0
45084	185	12	PolynomialFunctionNewtonForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
997	209	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	IllegalArgumentException	c.$.length < 1
997	209	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	IllegalArgumentException	a.$.length < 1
997	209	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	IllegalArgumentException	$.length < 1
997	209	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	IllegalArgumentException	$.length < 1
998	213	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	IllegalArgumentException	a.$.length != c.$.length + 1
998	213	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	IllegalArgumentException	$.length != c.length + 1
998	213	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	IllegalArgumentException	a.length != $.length + 1
900	99	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	IllegalArgumentException	knots.$.length < 2
900	99	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	IllegalArgumentException	$.length < 2
901	103	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	IllegalArgumentException	knots.$.length - 1 != polynomials.$.length
901	103	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	IllegalArgumentException	$.length - 1 != polynomials.length
901	103	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	IllegalArgumentException	knots.length - 1 != $.length
902	107	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	IllegalArgumentException	$.isStrictlyIncreasing(knots)
902	107	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	IllegalArgumentException	isStrictlyIncreasing($)
903	135	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	ArgumentOutsideDomainException	v > $.knots[$.n]
903	135	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	ArgumentOutsideDomainException	v < $.knots[0]
903	135	8	PolynomialSplineFunction.java	value	v	double	0	ArgumentOutsideDomainException	$ > knots[n]
903	135	8	PolynomialSplineFunction.java	value	v	double	0	ArgumentOutsideDomainException	$ < knots[0]
904	139	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
905	145	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
905	145	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
45044	166	8	PolynomialSplineFunction.java	polynomialSplineDerivative	THIS	PolynomialSplineFunction	0	NIL-FOR	i < $.n
45044	166	8	PolynomialSplineFunction.java	polynomialSplineDerivative	i	int	0	NIL-FOR	$ < n
45045	219	8	PolynomialSplineFunction.java	isStrictlyIncreasing	THIS	PolynomialSplineFunction	0	NIL-FOR	i < x.$.length
45045	219	8	PolynomialSplineFunction.java	isStrictlyIncreasing	i	int	0	NIL-FOR	$ < x.length
45045	219	8	PolynomialSplineFunction.java	isStrictlyIncreasing	x	double[]	0	NIL-FOR	i < $.length
906	220	12	PolynomialSplineFunction.java	isStrictlyIncreasing	i	int	0	RET	x[$ - 1] >= x[$]
906	220	12	PolynomialSplineFunction.java	isStrictlyIncreasing	x	double[]	0	RET	$[i - 1] >= $[i]
471	61	8	Product.java	increment	THIS	Product	1	DEF	$.n == 0
472	107	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, begin, length)
472	107	8	Product.java	evaluate	values	double[]	0	DEF	test($, begin, length)
472	107	8	Product.java	evaluate	begin	int	0	DEF	test(values, $, length)
472	107	8	Product.java	evaluate	length	int	0	DEF	test(values, begin, $)
44784	109	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
44784	109	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
44784	109	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
191	98	8	ProperFractionFormat.java	format	whole	int	0	DEF	$ != 0
192	134	8	ProperFractionFormat.java	parse	ret	Fraction	0	RET	$ != null
193	145	8	ProperFractionFormat.java	parse	whole	Number	0	RET	$ == null
194	158	8	ProperFractionFormat.java	parse	num	Number	0	RET	$ == null
195	166	8	ProperFractionFormat.java	parse	num	Number	0	RET	$.intValue() < 0
196	197	8	ProperFractionFormat.java	parse	den	Number	0	RET	$ == null
197	205	8	ProperFractionFormat.java	parse	den	Number	0	RET	$.intValue() < 0
198	224	8	ProperFractionFormat.java	setWholeFormat	format	NumberFormat	0	IllegalArgumentException	$ == null
44742	76	8	QRDecompositionImpl.java	QRDecompositionImpl	THIS	QRDecompositionImpl	0	NIL-FOR	minor < Math.min($.m, $.n)
44742	76	8	QRDecompositionImpl.java	QRDecompositionImpl	minor	int	0	NIL-FOR	$ < Math.min(m, n)
44743	85	12	QRDecompositionImpl.java	QRDecompositionImpl	THIS	QRDecompositionImpl	0	NIL-FOR	row < $.m
44743	85	12	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
431	89	12	QRDecompositionImpl.java	QRDecompositionImpl	THIS	QRDecompositionImpl	0	DEF	$.qr[minor][minor] > 0
431	89	12	QRDecompositionImpl.java	QRDecompositionImpl	minor	int	0	DEF	qr[$][$] > 0
432	92	12	QRDecompositionImpl.java	QRDecompositionImpl	a	double	0	DEF	$ != 0.0
44744	116	16	QRDecompositionImpl.java	QRDecompositionImpl	THIS	QRDecompositionImpl	0	NIL-FOR	col < $.n
44744	116	16	QRDecompositionImpl.java	QRDecompositionImpl	col	int	0	NIL-FOR	$ < n
44745	118	20	QRDecompositionImpl.java	QRDecompositionImpl	THIS	QRDecompositionImpl	0	NIL-FOR	row < $.m
44745	118	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
44746	124	20	QRDecompositionImpl.java	QRDecompositionImpl	THIS	QRDecompositionImpl	0	NIL-FOR	row < $.m
44746	124	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
44747	144	8	QRDecompositionImpl.java	getR	row	int	0	NIL-FOR	$ >= 0
44748	146	12	QRDecompositionImpl.java	getR	THIS	QRDecompositionImpl	0	NIL-FOR	col < $.n
44748	146	12	QRDecompositionImpl.java	getR	col	int	0	NIL-FOR	$ < n
44749	169	8	QRDecompositionImpl.java	getQ	THIS	QRDecompositionImpl	0	NIL-FOR	minor >= Math.min($.m,$.n)
44749	169	8	QRDecompositionImpl.java	getQ	minor	int	0	NIL-FOR	$ >= Math.min(m,n)
44750	173	8	QRDecompositionImpl.java	getQ	minor	int	0	NIL-FOR	$ >= 0
433	175	12	QRDecompositionImpl.java	getQ	THIS	QRDecompositionImpl	0	DEF	$.qr[minor][minor] != 0.0
433	175	12	QRDecompositionImpl.java	getQ	minor	int	0	DEF	qr[$][$] != 0.0
44751	176	16	QRDecompositionImpl.java	getQ	THIS	QRDecompositionImpl	0	NIL-FOR	col < $.m
44751	176	16	QRDecompositionImpl.java	getQ	col	int	0	NIL-FOR	$ < m
44752	178	20	QRDecompositionImpl.java	getQ	THIS	QRDecompositionImpl	0	NIL-FOR	row < $.m
44752	178	20	QRDecompositionImpl.java	getQ	row	int	0	NIL-FOR	$ < m
44753	183	20	QRDecompositionImpl.java	getQ	THIS	QRDecompositionImpl	0	NIL-FOR	row < $.m
44753	183	20	QRDecompositionImpl.java	getQ	row	int	0	NIL-FOR	$ < m
641	175	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
642	124	8	RandomDataImpl.java	nextHexString	len	int	0	IllegalArgumentException	$ <= 0
44837	139	8	RandomDataImpl.java	nextHexString	THIS	RandomDataImpl	0	NIL-FOR	i < randomBytes.$.length
44837	139	8	RandomDataImpl.java	nextHexString	i	int	0	NIL-FOR	$ < randomBytes.length
44837	139	8	RandomDataImpl.java	nextHexString	randomBytes	byte[]	0	NIL-FOR	i < $.length
643	150	13	RandomDataImpl.java	nextHexString	hex	String	0	DEF	$.length() == 1
644	167	8	RandomDataImpl.java	nextInt	lower	int	0	IllegalArgumentException	$ >= upper
644	167	8	RandomDataImpl.java	nextInt	upper	int	0	IllegalArgumentException	lower >= $
645	185	8	RandomDataImpl.java	nextLong	lower	long	0	IllegalArgumentException	$ >= upper
645	185	8	RandomDataImpl.java	nextLong	upper	long	0	IllegalArgumentException	lower >= $
646	211	8	RandomDataImpl.java	nextSecureHexString	len	int	0	IllegalArgumentException	$ <= 0
44838	229	7	RandomDataImpl.java	nextSecureHexString	iter	int	0	NIL-FOR	$ < numIter + 1
44838	229	7	RandomDataImpl.java	nextSecureHexString	numIter	int	0	NIL-FOR	iter < $ + 1
44839	238	12	RandomDataImpl.java	nextSecureHexString	THIS	RandomDataImpl	0	NIL-FOR	i < hash.$.length
44839	238	12	RandomDataImpl.java	nextSecureHexString	i	int	0	NIL-FOR	$ < hash.length
44839	238	12	RandomDataImpl.java	nextSecureHexString	hash	byte[]	0	NIL-FOR	i < $.length
647	249	16	RandomDataImpl.java	nextSecureHexString	hex	String	0	DEF	$.length() == 1
648	268	10	RandomDataImpl.java	nextSecureInt	lower	int	0	IllegalArgumentException	$ >= upper
648	268	10	RandomDataImpl.java	nextSecureInt	upper	int	0	IllegalArgumentException	lower >= $
649	286	8	RandomDataImpl.java	nextSecureLong	lower	long	0	IllegalArgumentException	$ >= upper
649	286	8	RandomDataImpl.java	nextSecureLong	upper	long	0	IllegalArgumentException	lower >= $
650	310	8	RandomDataImpl.java	nextPoisson	mean	double	0	IllegalArgumentException	$ <= 0
44840	318	8	RandomDataImpl.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * mean
44840	318	8	RandomDataImpl.java	nextPoisson	mean	double	0	NIL-WHILE	n < 1000 * $
651	321	12	RandomDataImpl.java	nextPoisson	p	double	1	DEF	r >= $
651	321	12	RandomDataImpl.java	nextPoisson	r	double	1	DEF	$ >= p
652	340	8	RandomDataImpl.java	nextGaussian	sigma	double	0	IllegalArgumentException	$ <= 0
653	360	8	RandomDataImpl.java	nextExponential	mean	double	0	IllegalArgumentException	$ < 0.0
44841	366	8	RandomDataImpl.java	nextExponential	unif	double	0	NIL-WHILE	$ == 0.0d
654	385	8	RandomDataImpl.java	nextUniform	lower	double	0	IllegalArgumentException	$ >= upper
654	385	8	RandomDataImpl.java	nextUniform	upper	double	0	IllegalArgumentException	lower >= $
44842	393	8	RandomDataImpl.java	nextUniform	u	double	0	NIL-WHILE	$ <= 0.0
655	410	8	RandomDataImpl.java	getRan	THIS	RandomDataImpl	0	DEF	$.rand == null
656	425	8	RandomDataImpl.java	getSecRan	THIS	RandomDataImpl	0	DEF	$.secRand == null
657	440	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
658	453	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
659	467	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
660	478	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
661	516	8	RandomDataImpl.java	nextPermutation	n	int	0	IllegalArgumentException	k > $
661	516	8	RandomDataImpl.java	nextPermutation	k	int	0	IllegalArgumentException	$ > n
662	520	8	RandomDataImpl.java	nextPermutation	k	int	0	IllegalArgumentException	$ == 0
44843	528	8	RandomDataImpl.java	nextPermutation	i	int	0	NIL-FOR	$ < k
44843	528	8	RandomDataImpl.java	nextPermutation	k	int	0	NIL-FOR	i < $
663	550	8	RandomDataImpl.java	nextSample	len	int	0	IllegalArgumentException	k > $
663	550	8	RandomDataImpl.java	nextSample	k	int	0	IllegalArgumentException	$ > len
664	554	8	RandomDataImpl.java	nextSample	k	int	0	IllegalArgumentException	$ == 0
44844	562	7	RandomDataImpl.java	nextSample	i	int	0	NIL-FOR	$ < k
44844	562	7	RandomDataImpl.java	nextSample	k	int	0	NIL-FOR	i < $
44845	579	8	RandomDataImpl.java	shuffle	i	int	0	NIL-FOR	$ >= end
44845	579	8	RandomDataImpl.java	shuffle	end	int	0	NIL-FOR	i >= $
665	580	12	RandomDataImpl.java	shuffle	i	int	1	DEF	$ == 0
44846	599	8	RandomDataImpl.java	getNatural	i	int	0	NIL-FOR	$ < n
44846	599	8	RandomDataImpl.java	getNatural	n	int	0	NIL-FOR	i < $
384	89	8	RealMatrixImpl.java	RealMatrixImpl	rowDimension	int	0	IllegalArgumentException	$ <= 0
384	89	8	RealMatrixImpl.java	RealMatrixImpl	columnDimension	int	0	IllegalArgumentException	$ <= 0
385	131	8	RealMatrixImpl.java	RealMatrixImpl	copyArray	boolean	1	DEF	$
386	134	12	RealMatrixImpl.java	RealMatrixImpl	d	double[][]	0	NullPointerException	$ == null
387	138	12	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	IllegalArgumentException	$ == 0
388	142	12	RealMatrixImpl.java	RealMatrixImpl	nCols	int	0	IllegalArgumentException	$ == 0
44672	145	12	RealMatrixImpl.java	RealMatrixImpl	r	int	0	NIL-FOR	$ < nRows
44672	145	12	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	NIL-FOR	r < $
389	146	16	RealMatrixImpl.java	RealMatrixImpl	THIS	RealMatrixImpl	0	IllegalArgumentException	d[r].length != nCols
389	146	16	RealMatrixImpl.java	RealMatrixImpl	r	int	0	IllegalArgumentException	d[$].length != nCols
389	146	16	RealMatrixImpl.java	RealMatrixImpl	nCols	int	0	IllegalArgumentException	d[r].length != $
389	146	16	RealMatrixImpl.java	RealMatrixImpl	d	double[][]	0	IllegalArgumentException	$[r].length != nCols
44673	166	8	RealMatrixImpl.java	RealMatrixImpl	row	int	0	NIL-FOR	$ < nRows
44673	166	8	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	NIL-FOR	row < $
390	193	12	RealMatrixImpl.java	add	rowCount	int	0	IllegalArgumentException	$ != m.getRowDimension()
390	193	12	RealMatrixImpl.java	add	columnCount	int	0	IllegalArgumentException	$ != m.getColumnDimension()
390	193	12	RealMatrixImpl.java	add	m	RealMatrix	0	IllegalArgumentException	columnCount != $.getColumnDimension()
390	193	12	RealMatrixImpl.java	add	m	RealMatrix	0	IllegalArgumentException	rowCount != $.getRowDimension()
44674	197	12	RealMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
44674	197	12	RealMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
44675	200	16	RealMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
44675	200	16	RealMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
391	218	8	RealMatrixImpl.java	add	rowCount	int	0	IllegalArgumentException	$ != m.getRowDimension()
391	218	8	RealMatrixImpl.java	add	columnCount	int	0	IllegalArgumentException	$ != m.getColumnDimension()
391	218	8	RealMatrixImpl.java	add	m	RealMatrixImpl	0	IllegalArgumentException	rowCount != $.getRowDimension()
391	218	8	RealMatrixImpl.java	add	m	RealMatrixImpl	0	IllegalArgumentException	columnCount != $.getColumnDimension()
44676	222	8	RealMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
44676	222	8	RealMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
44677	226	12	RealMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
44677	226	12	RealMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
392	246	12	RealMatrixImpl.java	subtract	rowCount	int	0	IllegalArgumentException	$ != m.getRowDimension()
392	246	12	RealMatrixImpl.java	subtract	columnCount	int	0	IllegalArgumentException	$ != m.getColumnDimension()
392	246	12	RealMatrixImpl.java	subtract	m	RealMatrix	0	IllegalArgumentException	columnCount != $.getColumnDimension()
392	246	12	RealMatrixImpl.java	subtract	m	RealMatrix	0	IllegalArgumentException	rowCount != $.getRowDimension()
44678	250	12	RealMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
44678	250	12	RealMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
44679	253	16	RealMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
44679	253	16	RealMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
393	271	8	RealMatrixImpl.java	subtract	rowCount	int	0	IllegalArgumentException	$ != m.getRowDimension()
393	271	8	RealMatrixImpl.java	subtract	columnCount	int	0	IllegalArgumentException	$ != m.getColumnDimension()
393	271	8	RealMatrixImpl.java	subtract	m	RealMatrixImpl	0	IllegalArgumentException	rowCount != $.getRowDimension()
393	271	8	RealMatrixImpl.java	subtract	m	RealMatrixImpl	0	IllegalArgumentException	columnCount != $.getColumnDimension()
44680	275	8	RealMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
44680	275	8	RealMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
44681	279	12	RealMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
44681	279	12	RealMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
44682	296	8	RealMatrixImpl.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
44682	296	8	RealMatrixImpl.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
44683	299	12	RealMatrixImpl.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
44683	299	12	RealMatrixImpl.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
44684	315	8	RealMatrixImpl.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
44684	315	8	RealMatrixImpl.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
44685	318	12	RealMatrixImpl.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
44685	318	12	RealMatrixImpl.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
394	336	12	RealMatrixImpl.java	multiply	THIS	RealMatrixImpl	0	IllegalArgumentException	$.getColumnDimension() != m.getRowDimension()
394	336	12	RealMatrixImpl.java	multiply	m	RealMatrix	0	IllegalArgumentException	this.getColumnDimension() != $.getRowDimension()
44686	343	12	RealMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
44686	343	12	RealMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
44687	346	16	RealMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
44687	346	16	RealMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
44688	348	20	RealMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
44688	348	20	RealMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
395	366	8	RealMatrixImpl.java	multiply	THIS	RealMatrixImpl	0	IllegalArgumentException	$.getColumnDimension() != m.getRowDimension()
395	366	8	RealMatrixImpl.java	multiply	m	RealMatrixImpl	0	IllegalArgumentException	this.getColumnDimension() != $.getRowDimension()
44689	373	8	RealMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
44689	373	8	RealMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
44690	376	12	RealMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
44690	376	12	RealMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
44691	378	16	RealMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
44691	378	16	RealMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
44692	426	8	RealMatrixImpl.java	getNorm	THIS	RealMatrixImpl	0	NIL-FOR	col < $.getColumnDimension()
44692	426	8	RealMatrixImpl.java	getNorm	col	int	0	NIL-FOR	$ < this.getColumnDimension()
44693	428	12	RealMatrixImpl.java	getNorm	THIS	RealMatrixImpl	0	NIL-FOR	row < $.getRowDimension()
44693	428	12	RealMatrixImpl.java	getNorm	row	int	0	NIL-FOR	$ < this.getRowDimension()
396	451	8	RealMatrixImpl.java	getSubMatrix	THIS	RealMatrixImpl	0	MatrixIndexException	endColumn > $.data[0].length
396	451	8	RealMatrixImpl.java	getSubMatrix	THIS	RealMatrixImpl	0	MatrixIndexException	endRow > $.data.$.length
396	451	8	RealMatrixImpl.java	getSubMatrix	startRow	int	0	MatrixIndexException	$ < 0
396	451	8	RealMatrixImpl.java	getSubMatrix	startRow	int	0	MatrixIndexException	$ > endRow
396	451	8	RealMatrixImpl.java	getSubMatrix	endRow	int	0	MatrixIndexException	$ > data.length
396	451	8	RealMatrixImpl.java	getSubMatrix	endRow	int	0	MatrixIndexException	startRow > $
396	451	8	RealMatrixImpl.java	getSubMatrix	startColumn	int	0	MatrixIndexException	$ < 0
396	451	8	RealMatrixImpl.java	getSubMatrix	startColumn	int	0	MatrixIndexException	$ > endColumn
396	451	8	RealMatrixImpl.java	getSubMatrix	endColumn	int	0	MatrixIndexException	$ > data[0].length
396	451	8	RealMatrixImpl.java	getSubMatrix	endColumn	int	0	MatrixIndexException	startColumn > $
44694	459	8	RealMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
44694	459	8	RealMatrixImpl.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
397	480	8	RealMatrixImpl.java	getSubMatrix	THIS	RealMatrixImpl	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
397	480	8	RealMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
397	480	8	RealMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
44695	487	12	RealMatrixImpl.java	getSubMatrix	THIS	RealMatrixImpl	0	NIL-FOR	i < selectedRows.$.length
44695	487	12	RealMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
44695	487	12	RealMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
44696	490	16	RealMatrixImpl.java	getSubMatrix	THIS	RealMatrixImpl	0	NIL-FOR	j < selectedColumns.$.length
44696	490	16	RealMatrixImpl.java	getSubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
44696	490	16	RealMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
398	529	8	RealMatrixImpl.java	setSubMatrix	row	int	0	MatrixIndexException	$ < 0
398	529	8	RealMatrixImpl.java	setSubMatrix	column	int	0	MatrixIndexException	$ < 0
399	534	8	RealMatrixImpl.java	setSubMatrix	nRows	int	0	IllegalArgumentException	$ == 0
400	539	8	RealMatrixImpl.java	setSubMatrix	nCols	int	0	IllegalArgumentException	$ == 0
44697	543	8	RealMatrixImpl.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
44697	543	8	RealMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
401	544	12	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	IllegalArgumentException	subMatrix[r].length != nCols
401	544	12	RealMatrixImpl.java	setSubMatrix	r	int	0	IllegalArgumentException	subMatrix[$].length != nCols
401	544	12	RealMatrixImpl.java	setSubMatrix	nCols	int	0	IllegalArgumentException	subMatrix[r].length != $
401	544	12	RealMatrixImpl.java	setSubMatrix	subMatrix	double[][]	0	IllegalArgumentException	$[r].length != nCols
402	549	8	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	MatrixIndexException	$.data == null
403	550	12	RealMatrixImpl.java	setSubMatrix	row	int	0	MatrixIndexException	$ > 0
403	550	12	RealMatrixImpl.java	setSubMatrix	column	int	0	MatrixIndexException	$ > 0
404	555	8	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	MatrixIndexException	nCols + column > $.getColumnDimension()
404	555	8	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	MatrixIndexException	(nRows + row) > $.getRowDimension()
404	555	8	RealMatrixImpl.java	setSubMatrix	nRows	int	0	MatrixIndexException	($ + row) > this.getRowDimension()
404	555	8	RealMatrixImpl.java	setSubMatrix	nCols	int	0	MatrixIndexException	$ + column > this.getColumnDimension()
404	555	8	RealMatrixImpl.java	setSubMatrix	row	int	0	MatrixIndexException	(nRows + $) > this.getRowDimension()
404	555	8	RealMatrixImpl.java	setSubMatrix	column	int	0	MatrixIndexException	nCols + $ > this.getColumnDimension()
44698	559	8	RealMatrixImpl.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
44698	559	8	RealMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
405	574	8	RealMatrixImpl.java	getRowMatrix	THIS	RealMatrixImpl	0	MatrixIndexException	$.isValidCoordinate( row, 0)
405	574	8	RealMatrixImpl.java	getRowMatrix	row	int	0	MatrixIndexException	isValidCoordinate( $, 0)
406	592	8	RealMatrixImpl.java	getColumnMatrix	THIS	RealMatrixImpl	0	MatrixIndexException	$.isValidCoordinate( 0, column)
406	592	8	RealMatrixImpl.java	getColumnMatrix	column	int	0	MatrixIndexException	isValidCoordinate( 0, $)
44699	597	8	RealMatrixImpl.java	getColumnMatrix	row	int	0	NIL-FOR	$ < nRows
44699	597	8	RealMatrixImpl.java	getColumnMatrix	nRows	int	0	NIL-FOR	row < $
407	614	8	RealMatrixImpl.java	getRow	THIS	RealMatrixImpl	0	MatrixIndexException	$.isValidCoordinate( row, 0 )
407	614	8	RealMatrixImpl.java	getRow	row	int	0	MatrixIndexException	isValidCoordinate( $, 0 )
408	634	8	RealMatrixImpl.java	getColumn	THIS	RealMatrixImpl	0	MatrixIndexException	$.isValidCoordinate(0, col)
408	634	8	RealMatrixImpl.java	getColumn	col	int	0	MatrixIndexException	isValidCoordinate(0, $)
44700	639	8	RealMatrixImpl.java	getColumn	row	int	0	NIL-FOR	$ < nRows
44700	639	8	RealMatrixImpl.java	getColumn	nRows	int	0	NIL-FOR	row < $
44701	678	8	RealMatrixImpl.java	transpose	row	int	0	NIL-FOR	$ < nRows
44701	678	8	RealMatrixImpl.java	transpose	nRows	int	0	NIL-FOR	row < $
44702	680	12	RealMatrixImpl.java	transpose	col	int	0	NIL-FOR	$ < nCols
44702	680	12	RealMatrixImpl.java	transpose	nCols	int	0	NIL-FOR	col < $
409	702	8	RealMatrixImpl.java	getDeterminant	THIS	RealMatrixImpl	0	InvalidMatrixException	$.isSquare()
410	705	8	RealMatrixImpl.java	getDeterminant	THIS	RealMatrixImpl	1	RET	$.isSingular()
44703	709	12	RealMatrixImpl.java	getDeterminant	THIS	RealMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
44703	709	12	RealMatrixImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < this.getRowDimension()
411	727	8	RealMatrixImpl.java	isSingular	THIS	RealMatrixImpl	1	RET	$.lu == null
412	758	8	RealMatrixImpl.java	getTrace	THIS	RealMatrixImpl	0	IllegalArgumentException	$.isSquare()
44704	762	8	RealMatrixImpl.java	getTrace	THIS	RealMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
44704	762	8	RealMatrixImpl.java	getTrace	i	int	0	NIL-FOR	$ < this.getRowDimension()
413	776	8	RealMatrixImpl.java	operate	THIS	RealMatrixImpl	0	IllegalArgumentException	v.$.length != nCols
413	776	8	RealMatrixImpl.java	operate	nCols	int	0	IllegalArgumentException	v.length != $
413	776	8	RealMatrixImpl.java	operate	v	double[]	0	IllegalArgumentException	$.length != nCols
44705	780	8	RealMatrixImpl.java	operate	row	int	0	NIL-FOR	$ < nRows
44705	780	8	RealMatrixImpl.java	operate	nRows	int	0	NIL-FOR	row < $
44706	783	12	RealMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < nCols
44706	783	12	RealMatrixImpl.java	operate	nCols	int	0	NIL-FOR	i < $
414	798	8	RealMatrixImpl.java	preMultiply	THIS	RealMatrixImpl	0	IllegalArgumentException	v.$.length != nRows
414	798	8	RealMatrixImpl.java	preMultiply	nRows	int	0	IllegalArgumentException	v.length != $
414	798	8	RealMatrixImpl.java	preMultiply	v	double[]	0	IllegalArgumentException	$.length != nRows
44707	803	8	RealMatrixImpl.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
44707	803	8	RealMatrixImpl.java	preMultiply	nCols	int	0	NIL-FOR	col < $
44708	805	12	RealMatrixImpl.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
44708	805	12	RealMatrixImpl.java	preMultiply	nRows	int	0	NIL-FOR	i < $
415	826	8	RealMatrixImpl.java	solve	THIS	RealMatrixImpl	0	IllegalArgumentException	b.$.length != nRows
415	826	8	RealMatrixImpl.java	solve	nRows	int	0	IllegalArgumentException	b.length != $
415	826	8	RealMatrixImpl.java	solve	b	double[]	0	IllegalArgumentException	$.length != nRows
44709	832	8	RealMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRows
44709	832	8	RealMatrixImpl.java	solve	nRows	int	0	NIL-FOR	row < $
416	850	8	RealMatrixImpl.java	solve	THIS	RealMatrixImpl	0	IllegalArgumentException	b.getRowDimension() != $.getRowDimension()
416	850	8	RealMatrixImpl.java	solve	b	RealMatrix	0	IllegalArgumentException	$.getRowDimension() != this.getRowDimension()
417	853	8	RealMatrixImpl.java	solve	THIS	RealMatrixImpl	0	InvalidMatrixException	$.isSquare()
418	856	8	RealMatrixImpl.java	solve	THIS	RealMatrixImpl	0	InvalidMatrixException	$.isSingular()
44710	866	8	RealMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRowB
44710	866	8	RealMatrixImpl.java	solve	nRowB	int	0	NIL-FOR	row < $
44711	868	12	RealMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nColB
44711	868	12	RealMatrixImpl.java	solve	nColB	int	0	NIL-FOR	col < $
44712	874	8	RealMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nCol
44712	874	8	RealMatrixImpl.java	solve	nCol	int	0	NIL-FOR	col < $
44713	875	12	RealMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < nCol
44713	875	12	RealMatrixImpl.java	solve	nCol	int	0	NIL-FOR	i < $
44714	878	16	RealMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
44714	878	16	RealMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
44715	885	8	RealMatrixImpl.java	solve	col	int	0	NIL-FOR	$ >= 0
44716	888	12	RealMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
44716	888	12	RealMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
44717	891	12	RealMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < col
44717	891	12	RealMatrixImpl.java	solve	col	int	0	NIL-FOR	i < $
44718	894	16	RealMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
44718	894	16	RealMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
419	926	8	RealMatrixImpl.java	luDecompose	nRows	int	0	InvalidMatrixException	$ != nCols
419	926	8	RealMatrixImpl.java	luDecompose	nCols	int	0	InvalidMatrixException	nRows != $
44719	933	8	RealMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
44719	933	8	RealMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
44720	939	8	RealMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	$ < nCols
44720	939	8	RealMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	col < $
44721	944	12	RealMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < col
44721	944	12	RealMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	row < $
44722	947	16	RealMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < row
44722	947	16	RealMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	i < $
44723	956	12	RealMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
44723	956	12	RealMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
44724	959	16	RealMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < col
44724	959	16	RealMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	i < $
420	965	16	RealMatrixImpl.java	luDecompose	sum	double	0	DEF	Math.abs($) > largest
420	965	16	RealMatrixImpl.java	luDecompose	largest	double	0	DEF	Math.abs(sum) > $
421	972	12	RealMatrixImpl.java	luDecompose	THIS	RealMatrixImpl	0	InvalidMatrixException	Math.abs($.lu[max][col]) < TOO_SMALL
421	972	12	RealMatrixImpl.java	luDecompose	max	int	0	InvalidMatrixException	Math.abs(lu[$][col]) < TOO_SMALL
421	972	12	RealMatrixImpl.java	luDecompose	col	int	0	InvalidMatrixException	Math.abs(lu[max][$]) < TOO_SMALL
422	978	12	RealMatrixImpl.java	luDecompose	max	int	0	DEF	$ != col
422	978	12	RealMatrixImpl.java	luDecompose	col	int	0	DEF	max != $
44725	980	16	RealMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < nCols
44725	980	16	RealMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	i < $
44726	993	12	RealMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
44726	993	12	RealMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
423	1006	8	RealMatrixImpl.java	toString	THIS	RealMatrixImpl	0	DEF	$.data != null
44727	1007	12	RealMatrixImpl.java	toString	THIS	RealMatrixImpl	0	NIL-FOR	i < $.data.$.length
44727	1007	12	RealMatrixImpl.java	toString	i	int	0	NIL-FOR	$ < data.length
424	1008	16	RealMatrixImpl.java	toString	i	int	0	DEF	$ > 0
44728	1012	16	RealMatrixImpl.java	toString	THIS	RealMatrixImpl	0	NIL-FOR	j < $.data[0].length
44728	1012	16	RealMatrixImpl.java	toString	j	int	0	NIL-FOR	$ < data[0].length
425	1013	20	RealMatrixImpl.java	toString	j	int	0	DEF	$ > 0
426	1035	8	RealMatrixImpl.java	equals	THIS	RealMatrixImpl	0	RET	object == $
426	1035	8	RealMatrixImpl.java	equals	object	Object	0	RET	$ == this
427	1038	8	RealMatrixImpl.java	equals	object	Object	0	RET	$ instanceof RealMatrixImpl == false
428	1044	8	RealMatrixImpl.java	equals	m	RealMatrix	0	RET	$.getRowDimension() != nRows
428	1044	8	RealMatrixImpl.java	equals	m	RealMatrix	0	RET	$.getColumnDimension() != nCols
428	1044	8	RealMatrixImpl.java	equals	nRows	int	0	RET	m.getRowDimension() != $
428	1044	8	RealMatrixImpl.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
44729	1047	8	RealMatrixImpl.java	equals	row	int	0	NIL-FOR	$ < nRows
44729	1047	8	RealMatrixImpl.java	equals	nRows	int	0	NIL-FOR	row < $
44730	1049	12	RealMatrixImpl.java	equals	col	int	0	NIL-FOR	$ < nCols
44730	1049	12	RealMatrixImpl.java	equals	nCols	int	0	NIL-FOR	col < $
429	1050	16	RealMatrixImpl.java	equals	col	int	0	RET	Double.doubleToLongBits(dataRow[$]) != Double.doubleToLongBits(m.getEntry(row, $))
429	1050	16	RealMatrixImpl.java	equals	dataRow	double[]	0	RET	Double.doubleToLongBits($[col]) != Double.doubleToLongBits(m.getEntry(row, col))
429	1050	16	RealMatrixImpl.java	equals	row	int	0	RET	Double.doubleToLongBits(dataRow[col]) != Double.doubleToLongBits(m.getEntry($, col))
429	1050	16	RealMatrixImpl.java	equals	m	RealMatrix	0	RET	Double.doubleToLongBits(dataRow[col]) != Double.doubleToLongBits($.getEntry(row, col))
44731	1070	8	RealMatrixImpl.java	hashCode	row	int	0	NIL-FOR	$ < nRows
44731	1070	8	RealMatrixImpl.java	hashCode	nRows	int	0	NIL-FOR	row < $
44732	1072	12	RealMatrixImpl.java	hashCode	col	int	0	NIL-FOR	$ < nCols
44732	1072	12	RealMatrixImpl.java	hashCode	nCols	int	0	NIL-FOR	col < $
430	1110	8	RealMatrixImpl.java	getLUMatrix	THIS	RealMatrixImpl	0	DEF	$.lu == null
44733	1145	8	RealMatrixImpl.java	copyOut	i	int	0	NIL-FOR	$ < nRows
44733	1145	8	RealMatrixImpl.java	copyOut	nRows	int	0	NIL-FOR	i < $
9	252	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + $.numElements) > $.internalArray.$.length
10	256	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
11	280	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	($.startIndex + ($.numElements + 1)) > $.internalArray.$.length
12	290	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
13	310	8	ResizableDoubleArray.java	checkContractExpand	contractionCritera	float	0	IllegalArgumentException	$ < expansionFactor
13	310	8	ResizableDoubleArray.java	checkContractExpand	expansionFactor	float	0	IllegalArgumentException	contractionCritera < $
14	320	8	ResizableDoubleArray.java	checkContractExpand	THIS	ResizableDoubleArray	0	IllegalArgumentException	$.contractionCriteria <= 1.0
15	330	8	ResizableDoubleArray.java	checkContractExpand	expansionFactor	float	0	IllegalArgumentException	$ <= 1.0
16	373	8	ResizableDoubleArray.java	discardFrontElements	THIS	ResizableDoubleArray	1	IllegalArgumentException	i > $.numElements
16	373	8	ResizableDoubleArray.java	discardFrontElements	i	int	1	IllegalArgumentException	$ > numElements
17	377	15	ResizableDoubleArray.java	discardFrontElements	i	int	1	IllegalArgumentException	$ < 0
18	385	8	ResizableDoubleArray.java	discardFrontElements	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
19	407	8	ResizableDoubleArray.java	expand	THIS	ResizableDoubleArray	1	DEF	$.expansionMode == MULTIPLICATIVE_MODE
20	456	8	ResizableDoubleArray.java	getElement	THIS	ResizableDoubleArray	1	ArrayIndexOutOfBoundsException	index >= $.numElements
20	456	8	ResizableDoubleArray.java	getElement	index	int	1	ArrayIndexOutOfBoundsException	$ >= numElements
21	461	15	ResizableDoubleArray.java	getElement	index	int	1	RET	$ >= 0
22	572	8	ResizableDoubleArray.java	setElement	index	int	0	ArrayIndexOutOfBoundsException	$ < 0
23	576	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	index + 1 > $.numElements
23	576	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ + 1 > numElements
24	579	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + index) >= $.internalArray.$.length
24	579	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	(startIndex + $) >= internalArray.length
25	610	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	IllegalArgumentException	$ != ADDITIVE_MODE
25	610	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	IllegalArgumentException	$ != MULTIPLICATIVE_MODE
26	625	8	ResizableDoubleArray.java	setInitialCapacity	initialCapacity	int	1	DEF	$ > 0
27	648	8	ResizableDoubleArray.java	setNumElements	i	int	0	IllegalArgumentException	$ < 0
28	656	8	ResizableDoubleArray.java	setNumElements	THIS	ResizableDoubleArray	0	DEF	($.startIndex + i) > $.internalArray.$.length
28	656	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	(startIndex + $) > internalArray.length
29	671	8	ResizableDoubleArray.java	shouldContract	THIS	ResizableDoubleArray	1	RET	$.expansionMode == MULTIPLICATIVE_MODE
932	67	8	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	$.f.value(min) == 0.0
932	67	8	RiddersSolver.java	solve	min	double	0	RET	f.value($) == 0.0
933	68	8	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	$.f.value(max) == 0.0
933	68	8	RiddersSolver.java	solve	max	double	0	RET	f.value($) == 0.0
934	69	8	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	$.f.value(initial) == 0.0
934	69	8	RiddersSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
935	73	8	RiddersSolver.java	solve	THIS	RiddersSolver	1	RET	$.isBracketing(min, initial, $.f)
935	73	8	RiddersSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
935	73	8	RiddersSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
936	105	8	RiddersSolver.java	solve	y1	double	0	RET	$ == 0.0
937	106	8	RiddersSolver.java	solve	y2	double	0	RET	$ == 0.0
45062	111	8	RiddersSolver.java	solve	THIS	RiddersSolver	0	NIL-WHILE	i <= $.maximalIterationCount
45062	111	8	RiddersSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
938	115	12	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	Math.abs(y3) <= $.functionValueAccuracy
938	115	12	RiddersSolver.java	solve	y3	double	0	RET	Math.abs($) <= functionValueAccuracy
939	127	12	RiddersSolver.java	solve	x	double	0	RET	Math.abs($ - oldx) <= tolerance
939	127	12	RiddersSolver.java	solve	oldx	double	0	RET	Math.abs(x - $) <= tolerance
939	127	12	RiddersSolver.java	solve	tolerance	double	0	RET	Math.abs(x - oldx) <= $
940	131	12	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
940	131	12	RiddersSolver.java	solve	y	double	0	RET	Math.abs($) <= functionValueAccuracy
941	138	12	RiddersSolver.java	solve	correction	double	1	DEF	$ > 0.0
942	139	16	RiddersSolver.java	solve	y1	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
942	139	16	RiddersSolver.java	solve	y	double	1	DEF	MathUtils.sign(y1) + MathUtils.sign($) == 0.0
943	146	16	RiddersSolver.java	solve	y2	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
943	146	16	RiddersSolver.java	solve	y	double	1	DEF	MathUtils.sign(y2) + MathUtils.sign($) == 0.0
45079	76	8	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	NIL-WHILE	i <= $.maximalIterationCount
45079	76	8	RombergIntegrator.java	integrate	i	int	0	NIL-WHILE	$ <= maximalIterationCount
45080	78	12	RombergIntegrator.java	integrate	i	int	0	NIL-FOR	j <= $
45080	78	12	RombergIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= i
993	84	12	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	RET	i >= $.minimalIterationCount
993	84	12	RombergIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
994	85	16	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	RET	Math.abs(s - olds) <= Math.abs($.relativeAccuracy * olds)
994	85	16	RombergIntegrator.java	integrate	s	double	0	RET	Math.abs($ - olds) <= Math.abs(relativeAccuracy * olds)
994	85	16	RombergIntegrator.java	integrate	olds	double	0	RET	Math.abs(s - $) <= Math.abs(relativeAccuracy * $)
995	104	8	RombergIntegrator.java	verifyIterationCount	THIS	RombergIntegrator	0	IllegalArgumentException	$.maximalIterationCount > 32
89	126	4	Rotation.java	Rotation	needsNormalization	boolean	0	DEF	$
90	156	4	Rotation.java	Rotation	norm	double	0	ArithmeticException	$ == 0
91	204	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[2].length != 3
91	204	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[0].length != 3
91	204	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[1].length != 3
91	204	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m.$.length != 3
91	204	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[2].length != 3
91	204	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[0].length != 3
91	204	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[1].length != 3
91	204	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$.length != 3
92	221	4	Rotation.java	Rotation	det	double	0	NotARotationMatrixException	$ < 0.0
93	241	4	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
94	250	6	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
95	259	8	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
96	305	2	Rotation.java	Rotation	u1u1	double	0	IllegalArgumentException	$ == 0
96	305	2	Rotation.java	Rotation	u2u2	double	0	IllegalArgumentException	$ == 0
96	305	2	Rotation.java	Rotation	v1v1	double	0	IllegalArgumentException	$ == 0
96	305	2	Rotation.java	Rotation	v2v2	double	0	IllegalArgumentException	$ == 0
97	354	2	Rotation.java	Rotation	c	double	0	RET	$ == 0
98	376	4	Rotation.java	Rotation	c	double	0	RET	$ == 0
99	386	6	Rotation.java	Rotation	c	double	0	RET	$ == 0
100	436	4	Rotation.java	Rotation	normProduct	double	0	IllegalArgumentException	$ == 0
101	442	4	Rotation.java	Rotation	normProduct	double	1	DEF	dot < ((2.0e-15 - 1.0) * $)
101	442	4	Rotation.java	Rotation	dot	double	1	DEF	$ < ((2.0e-15 - 1.0) * normProduct)
102	537	4	Rotation.java	getAxis	squaredSine	double	1	RET	$ == 0
103	539	11	Rotation.java	getAxis	THIS	Rotation	0	RET	$.q0 < 0
104	551	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 < -0.1
104	551	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 > 0.1
105	553	11	Rotation.java	getAngle	THIS	Rotation	0	RET	$.q0 < 0
106	597	4	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
107	606	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
107	606	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
108	615	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
109	624	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
109	624	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
110	633	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
111	642	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
111	642	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
112	651	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
113	660	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
113	660	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
114	669	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
115	678	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
115	678	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
116	687	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
117	696	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
117	696	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
118	705	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
119	714	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
119	714	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
120	723	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
121	732	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
121	732	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
122	741	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
123	750	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
123	750	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
124	759	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
125	768	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
125	768	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
126	777	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
127	786	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
127	786	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
128	804	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
128	804	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
44590	963	4	Rotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
129	1004	6	Rotation.java	orthogonalizeMatrix	fn	double	0	RET	Math.abs(fn1 - $) <= threshold
129	1004	6	Rotation.java	orthogonalizeMatrix	fn1	double	0	RET	Math.abs($ - fn) <= threshold
129	1004	6	Rotation.java	orthogonalizeMatrix	threshold	double	0	RET	Math.abs(fn1 - fn) <= $
833	125	4	RungeKuttaIntegrator.java	sanityChecks	THIS	RungeKuttaIntegrator	0	IntegratorException	equations.getDimension() != y0.$.length
833	125	4	RungeKuttaIntegrator.java	sanityChecks	equations	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y0.length
833	125	4	RungeKuttaIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	equations.getDimension() != $.length
834	133	4	RungeKuttaIntegrator.java	sanityChecks	THIS	RungeKuttaIntegrator	0	IntegratorException	equations.getDimension() != y.$.length
834	133	4	RungeKuttaIntegrator.java	sanityChecks	equations	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y.length
834	133	4	RungeKuttaIntegrator.java	sanityChecks	y	double[]	0	IntegratorException	equations.getDimension() != $.length
835	141	4	RungeKuttaIntegrator.java	sanityChecks	t0	double	0	IntegratorException	Math.abs(t - $) <= 1.0e-12 * Math.max(Math.abs($), Math.abs(t))
835	141	4	RungeKuttaIntegrator.java	sanityChecks	t	double	0	IntegratorException	Math.abs($ - t0) <= 1.0e-12 * Math.max(Math.abs(t0), Math.abs($))
836	158	4	RungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
836	158	4	RungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
45021	162	4	RungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
45021	162	4	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
837	169	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
837	169	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.handler.requiresDenseOutput()
45022	184	4	RungeKuttaIntegrator.java	integrate	lastStep	boolean	0	NIL-FOR	$
45023	189	6	RungeKuttaIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
45024	195	8	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
45024	195	8	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
45025	197	10	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
45025	197	10	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
45025	197	10	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
45026	199	12	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
45026	199	12	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
45027	210	8	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
45027	210	8	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
45027	210	8	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
45028	212	10	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
45028	212	10	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
838	220	8	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.eventsHandlersManager.evaluateStep(interpolator)
838	220	8	RungeKuttaIntegrator.java	integrate	interpolator	AbstractStepInterpolator	1	DEF	eventsHandlersManager.evaluateStep($)
839	233	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.eventsHandlersManager.stop()
840	244	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	DEF	$.eventsHandlersManager.reset($.stepStart, y)
840	244	6	RungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
840	244	6	RungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	eventsHandlersManager.reset(stepStart, $)
841	250	6	RungeKuttaIntegrator.java	integrate	needUpdate	boolean	0	DEF	$
743	78	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	1	DEF	interpolator.$.currentState != null
743	78	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
44939	82	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < interpolator.$.yDotK.$.length
44939	82	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.yDotK.length
44939	82	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.length
44940	135	4	RungeKuttaStepInterpolator.java	writeExternal	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.$.length
44940	135	4	RungeKuttaStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < yDotK.length
44941	136	6	RungeKuttaStepInterpolator.java	writeExternal	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
44941	136	6	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < currentState.length
44942	155	4	RungeKuttaStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
44942	155	4	RungeKuttaStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
44943	157	6	RungeKuttaStepInterpolator.java	readExternal	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
44943	157	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < currentState.length
964	101	8	SecantSolver.java	solve	y0	double	0	IllegalArgumentException	$ * y1 >= 0
964	101	8	SecantSolver.java	solve	y1	double	0	IllegalArgumentException	y0 * $ >= 0
45068	112	8	SecantSolver.java	solve	THIS	SecantSolver	0	NIL-WHILE	i < $.maximalIterationCount
45068	112	8	SecantSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
965	113	12	SecantSolver.java	solve	y1	double	0	DEF	Math.abs(y2) < Math.abs($)
965	113	12	SecantSolver.java	solve	y2	double	0	DEF	Math.abs($) < Math.abs(y1)
966	121	12	SecantSolver.java	solve	THIS	SecantSolver	0	RET	Math.abs(y1) <= $.functionValueAccuracy
966	121	12	SecantSolver.java	solve	y1	double	0	RET	Math.abs($) <= functionValueAccuracy
967	125	12	SecantSolver.java	solve	THIS	SecantSolver	0	RET	Math.abs(oldDelta) < Math.max($.relativeAccuracy * Math.abs(x1), $.absoluteAccuracy)
967	125	12	SecantSolver.java	solve	x1	double	0	RET	Math.abs(oldDelta) < Math.max(relativeAccuracy * Math.abs($), absoluteAccuracy)
967	125	12	SecantSolver.java	solve	oldDelta	double	0	RET	Math.abs($) < Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy)
968	131	12	SecantSolver.java	solve	y0	double	1	DEF	Math.abs(y1) > Math.abs($)
968	131	12	SecantSolver.java	solve	y1	double	1	DEF	Math.abs($) > Math.abs(y0)
969	136	16	SecantSolver.java	solve	delta	double	0	DEF	$ / oldDelta > 1
969	136	16	SecantSolver.java	solve	oldDelta	double	0	DEF	delta / $ > 1
970	146	12	SecantSolver.java	solve	y1	double	0	DEF	($ > 0) == (y2 > 0)
970	146	12	SecantSolver.java	solve	y2	double	0	DEF	(y1 > 0) == ($ > 0)
497	65	8	SecondMoment.java	increment	THIS	SecondMoment	0	DEF	$.n < 1
677	69	12	SimpleEstimationProblem.java	getUnboundParameters	THIS	SimpleEstimationProblem	0	DEF	$.p.isBound()
612	121	8	SimpleRegression.java	addData	THIS	SimpleRegression	1	DEF	$.n == 0
613	137	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.n > 2
44818	159	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
44818	159	8	SimpleRegression.java	addData	i	int	0	NIL-FOR	$ < data.length
44818	159	8	SimpleRegression.java	addData	data	double[][]	0	NIL-FOR	i < $.length
614	244	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	$.n < 2
615	247	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	Math.abs($.sumXX) < 10 * Double.MIN_VALUE
616	297	8	SimpleRegression.java	getTotalSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
617	334	8	SimpleRegression.java	getMeanSquareError	THIS	SimpleRegression	0	RET	$.n < 3
618	357	8	SimpleRegression.java	getR	b1	double	0	DEF	$ < 0
619	472	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	IllegalArgumentException	$ <= 0
619	472	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	IllegalArgumentException	$ >= 1
620	538	8	SimpleRegression.java	setDistribution	THIS	SimpleRegression	0	DEF	$.n > 2
896	71	8	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	$.minimalIterationCount == 1
45043	79	8	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	NIL-WHILE	i <= $.maximalIterationCount
45043	79	8	SimpsonIntegrator.java	integrate	i	int	0	NIL-WHILE	$ <= maximalIterationCount
897	82	12	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	i >= $.minimalIterationCount
897	82	12	SimpsonIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
898	83	16	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	Math.abs(s - olds) <= Math.abs($.relativeAccuracy * olds)
898	83	16	SimpsonIntegrator.java	integrate	s	double	0	RET	Math.abs($ - olds) <= Math.abs(relativeAccuracy * olds)
898	83	16	SimpsonIntegrator.java	integrate	olds	double	0	RET	Math.abs(s - $) <= Math.abs(relativeAccuracy * $)
899	103	8	SimpsonIntegrator.java	verifyIterationCount	THIS	SimpsonIntegrator	0	IllegalArgumentException	$.maximalIterationCount > 64
490	77	8	Skewness.java	increment	THIS	Skewness	0	DEF	$.incMoment
491	91	8	Skewness.java	getResult	THIS	Skewness	0	RET	$.moment.$.n < 3
492	95	8	Skewness.java	getResult	variance	double	1	RET	$ < 10E-20
493	115	8	Skewness.java	clear	THIS	Skewness	0	DEF	$.incMoment
494	142	8	Skewness.java	evaluate	THIS	Skewness	0	DEF	$.test(values, begin, length)
494	142	8	Skewness.java	evaluate	values	double[]	0	DEF	test($, begin, length)
494	142	8	Skewness.java	evaluate	begin	int	0	DEF	test(values, $, length)
494	142	8	Skewness.java	evaluate	length	int	0	DEF	test(values, begin, $)
494	142	8	Skewness.java	evaluate	length	int	0	DEF	$ > 2
44787	152	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
44787	152	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
44787	152	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
44788	160	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
44788	160	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
44788	160	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
893	55	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	IllegalArgumentException	x.$.length != y.$.length
893	55	8	SplineInterpolator.java	interpolate	x	double	0	IllegalArgumentException	$.length != y.length
893	55	8	SplineInterpolator.java	interpolate	y	double	0	IllegalArgumentException	x.length != $.length
894	59	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	IllegalArgumentException	x.$.length < 3
894	59	8	SplineInterpolator.java	interpolate	x	double	0	IllegalArgumentException	$.length < 3
45038	67	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
45038	67	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
895	68	12	SplineInterpolator.java	interpolate	i	int	0	IllegalArgumentException	x[$] >= x[$ + 1]
895	68	12	SplineInterpolator.java	interpolate	x	double	0	IllegalArgumentException	$[i] >= $[i + 1]
45039	75	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
45039	75	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
45040	84	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
45040	84	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
45041	99	8	SplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ >=0
45042	107	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
45042	107	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
604	566	8	StatUtils.java	sumDifference	THIS	StatUtils	0	IllegalArgumentException	n != sample2.$.length
604	566	8	StatUtils.java	sumDifference	n	int	0	IllegalArgumentException	$ < 1
604	566	8	StatUtils.java	sumDifference	n	int	0	IllegalArgumentException	$ != sample2.length
604	566	8	StatUtils.java	sumDifference	sample2	double[]	0	IllegalArgumentException	n != $.length
44816	571	8	StatUtils.java	sumDifference	i	int	0	NIL-FOR	$ < n
44816	571	8	StatUtils.java	sumDifference	n	int	0	NIL-FOR	i < $
605	610	8	StatUtils.java	varianceDifference	THIS	StatUtils	0	IllegalArgumentException	n != sample2.$.length
605	610	8	StatUtils.java	varianceDifference	n	int	0	IllegalArgumentException	$ != sample2.length
605	610	8	StatUtils.java	varianceDifference	n	int	0	IllegalArgumentException	$ < 2
605	610	8	StatUtils.java	varianceDifference	sample2	double[]	0	IllegalArgumentException	n != $.length
44817	613	8	StatUtils.java	varianceDifference	i	int	0	NIL-FOR	$ < n
44817	613	8	StatUtils.java	varianceDifference	n	int	0	NIL-FOR	i < $
546	130	8	StatisticalSummaryValues.java	equals	THIS	StatisticalSummaryValues	0	RET	object == $
546	130	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ == this
547	133	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ instanceof StatisticalSummaryValues == false
740	116	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.lastState == null
741	126	12	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.forward
44938	134	8	StepNormalizer.java	handleStep	nextInStep	boolean	0	NIL-WHILE	$
742	150	8	StepNormalizer.java	handleStep	isLast	boolean	0	DEF	$
467	61	8	Sum.java	increment	THIS	Sum	1	DEF	$.n == 0
468	107	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, begin, length)
468	107	8	Sum.java	evaluate	values	double[]	0	DEF	test($, begin, length)
468	107	8	Sum.java	evaluate	begin	int	0	DEF	test(values, $, length)
468	107	8	Sum.java	evaluate	length	int	0	DEF	test(values, begin, $)
44782	109	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
44782	109	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
44782	109	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
469	77	8	SumOfLogs.java	getResult	THIS	SumOfLogs	1	RET	$.n > 0
470	118	8	SumOfLogs.java	evaluate	THIS	SumOfLogs	0	DEF	$.test(values, begin, length)
470	118	8	SumOfLogs.java	evaluate	values	double[]	0	DEF	test($, begin, length)
470	118	8	SumOfLogs.java	evaluate	begin	int	0	DEF	test(values, $, length)
470	118	8	SumOfLogs.java	evaluate	length	int	0	DEF	test(values, begin, $)
44783	120	12	SumOfLogs.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
44783	120	12	SumOfLogs.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
44783	120	12	SumOfLogs.java	evaluate	length	int	0	NIL-FOR	i < begin + $
465	61	8	SumOfSquares.java	increment	THIS	SumOfSquares	1	DEF	$.n == 0
466	107	8	SumOfSquares.java	evaluate	THIS	SumOfSquares	0	DEF	$.test(values, begin, length)
466	107	8	SumOfSquares.java	evaluate	values	double[]	0	DEF	test($, begin, length)
466	107	8	SumOfSquares.java	evaluate	begin	int	0	DEF	test(values, $, length)
466	107	8	SumOfSquares.java	evaluate	length	int	0	DEF	test(values, begin, $)
44781	109	12	SumOfSquares.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
44781	109	12	SumOfSquares.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
44781	109	12	SumOfSquares.java	evaluate	length	int	0	NIL-FOR	i < begin + $
517	143	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.meanImpl instanceof Mean
518	146	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.varianceImpl instanceof Variance
519	149	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.geoMeanImpl instanceof GeometricMean
520	190	8	SummaryStatistics.java	getMean	THIS	SummaryStatistics	1	RET	$.mean == $.meanImpl
521	206	8	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	0	DEF	$.getN() > 0
522	207	12	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	1	DEF	$.getN() > 1
523	224	8	SummaryStatistics.java	getVariance	THIS	SummaryStatistics	1	RET	$.varianceImpl == $.variance
524	312	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
525	315	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
526	328	8	SummaryStatistics.java	equals	THIS	SummaryStatistics	0	RET	object == $
526	328	8	SummaryStatistics.java	equals	object	Object	0	RET	$ == this
527	331	8	SummaryStatistics.java	equals	object	Object	0	RET	$ instanceof SummaryStatistics == false
528	601	8	SummaryStatistics.java	checkEmpty	THIS	SummaryStatistics	0	IllegalStateException	$.n > 0
248	54	8	TDistributionImpl.java	setDegreesOfFreedom	degreesOfFreedom	double	0	IllegalArgumentException	$ <= 0.0
249	77	8	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ == 0.0
250	85	12	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ < 0.0
251	111	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
252	114	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
572	78	8	TTestImpl.java	pairedT	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
572	78	8	TTestImpl.java	pairedT	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
572	78	8	TTestImpl.java	pairedT	sample1	double[]	0	IllegalArgumentException	$ == null
572	78	8	TTestImpl.java	pairedT	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
572	78	8	TTestImpl.java	pairedT	sample2	double[]	0	IllegalArgumentException	$ == null
573	163	8	TTestImpl.java	pairedTTest	alpha	double	0	IllegalArgumentException	$ <= 0
573	163	8	TTestImpl.java	pairedTTest	alpha	double	0	IllegalArgumentException	$ > 0.5
574	186	8	TTestImpl.java	t	THIS	TTestImpl	0	IllegalArgumentException	observed.$.length < 2
574	186	8	TTestImpl.java	t	observed	double[]	0	IllegalArgumentException	$.length < 2
574	186	8	TTestImpl.java	t	observed	double[]	0	IllegalArgumentException	$ == null
575	211	8	TTestImpl.java	t	sampleStats	StatisticalSummary	0	IllegalArgumentException	$ == null
575	211	8	TTestImpl.java	t	sampleStats	StatisticalSummary	0	IllegalArgumentException	$.getN() < 2
576	253	8	TTestImpl.java	homoscedasticT	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
576	253	8	TTestImpl.java	homoscedasticT	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
576	253	8	TTestImpl.java	homoscedasticT	sample1	double[]	0	IllegalArgumentException	$ == null
576	253	8	TTestImpl.java	homoscedasticT	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
576	253	8	TTestImpl.java	homoscedasticT	sample2	double[]	0	IllegalArgumentException	$ == null
577	292	8	TTestImpl.java	t	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
577	292	8	TTestImpl.java	t	sample1	double[]	0	IllegalArgumentException	$ == null
577	292	8	TTestImpl.java	t	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
577	292	8	TTestImpl.java	t	sample2	double[]	0	IllegalArgumentException	$ == null
577	292	8	TTestImpl.java	t	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
578	335	8	TTestImpl.java	t	sampleStats1	StatisticalSummary	0	IllegalArgumentException	$ == null
578	335	8	TTestImpl.java	t	sampleStats1	StatisticalSummary	0	IllegalArgumentException	Math.min($.getN(), sampleStats2.getN()) < 2
578	335	8	TTestImpl.java	t	sampleStats2	StatisticalSummary	0	IllegalArgumentException	$ == null
578	335	8	TTestImpl.java	t	sampleStats2	StatisticalSummary	0	IllegalArgumentException	Math.min(sampleStats1.getN(), $.getN()) < 2
579	383	8	TTestImpl.java	homoscedasticT	sampleStats1	StatisticalSummary	0	IllegalArgumentException	$ == null
579	383	8	TTestImpl.java	homoscedasticT	sampleStats1	StatisticalSummary	0	IllegalArgumentException	Math.min($.getN(), sampleStats2.getN()) < 2
579	383	8	TTestImpl.java	homoscedasticT	sampleStats2	StatisticalSummary	0	IllegalArgumentException	$ == null
579	383	8	TTestImpl.java	homoscedasticT	sampleStats2	StatisticalSummary	0	IllegalArgumentException	Math.min(sampleStats1.getN(), $.getN()) < 2
580	421	8	TTestImpl.java	tTest	THIS	TTestImpl	0	IllegalArgumentException	sample.$.length < 2
580	421	8	TTestImpl.java	tTest	sample	double[]	0	IllegalArgumentException	$ == null
580	421	8	TTestImpl.java	tTest	sample	double[]	0	IllegalArgumentException	$.length < 2
581	465	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ > 0.5
581	465	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ <= 0
582	501	8	TTestImpl.java	tTest	sampleStats	StatisticalSummary	0	IllegalArgumentException	$ == null
582	501	8	TTestImpl.java	tTest	sampleStats	StatisticalSummary	0	IllegalArgumentException	$.getN() < 2
583	547	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ <= 0
583	547	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ > 0.5
584	591	8	TTestImpl.java	tTest	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
584	591	8	TTestImpl.java	tTest	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
584	591	8	TTestImpl.java	tTest	sample1	double[]	0	IllegalArgumentException	$ == null
584	591	8	TTestImpl.java	tTest	sample2	double[]	0	IllegalArgumentException	$ == null
584	591	8	TTestImpl.java	tTest	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
585	635	8	TTestImpl.java	homoscedasticTTest	THIS	TTestImpl	0	IllegalArgumentException	Math.min(sample1.$.length, sample2.$.length) < 2
585	635	8	TTestImpl.java	homoscedasticTTest	sample1	double[]	0	IllegalArgumentException	$ == null
585	635	8	TTestImpl.java	homoscedasticTTest	sample1	double[]	0	IllegalArgumentException	Math.min($.length, sample2.length) < 2
585	635	8	TTestImpl.java	homoscedasticTTest	sample2	double[]	0	IllegalArgumentException	$ == null
585	635	8	TTestImpl.java	homoscedasticTTest	sample2	double[]	0	IllegalArgumentException	Math.min(sample1.length, $.length) < 2
586	700	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ <= 0
586	700	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ > 0.5
587	760	8	TTestImpl.java	homoscedasticTTest	alpha	double	0	IllegalArgumentException	$ <= 0
587	760	8	TTestImpl.java	homoscedasticTTest	alpha	double	0	IllegalArgumentException	$ > 0.5
588	802	8	TTestImpl.java	tTest	sampleStats1	StatisticalSummary	0	IllegalArgumentException	$ == null
588	802	8	TTestImpl.java	tTest	sampleStats1	StatisticalSummary	0	IllegalArgumentException	Math.min($.getN(), sampleStats2.getN()) < 2
588	802	8	TTestImpl.java	tTest	sampleStats2	StatisticalSummary	0	IllegalArgumentException	$ == null
588	802	8	TTestImpl.java	tTest	sampleStats2	StatisticalSummary	0	IllegalArgumentException	Math.min(sampleStats1.getN(), $.getN()) < 2
589	847	8	TTestImpl.java	homoscedasticTTest	sampleStats1	StatisticalSummary	0	IllegalArgumentException	Math.min($.getN(), sampleStats2.getN()) < 2
589	847	8	TTestImpl.java	homoscedasticTTest	sampleStats1	StatisticalSummary	0	IllegalArgumentException	$ == null
589	847	8	TTestImpl.java	homoscedasticTTest	sampleStats2	StatisticalSummary	0	IllegalArgumentException	Math.min(sampleStats1.getN(), $.getN()) < 2
589	847	8	TTestImpl.java	homoscedasticTTest	sampleStats2	StatisticalSummary	0	IllegalArgumentException	$ == null
590	913	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ <= 0
590	913	8	TTestImpl.java	tTest	alpha	double	0	IllegalArgumentException	$ > 0.5
506	74	8	ThirdMoment.java	increment	THIS	ThirdMoment	0	DEF	$.n < 1
45018	92	6	ThreeEighthesStepInterpolator.java	computeInterpolatedState	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
45018	92	6	ThreeEighthesStepInterpolator.java	computeInterpolatedState	i	int	0	NIL-FOR	$ < interpolatedState.length
7	143	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof String
7	143	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof Number
8	147	12	TransformerMap.java	transform	trans	NumberTransformer	0	DEF	$ != null
944	72	8	TrapezoidIntegrator.java	stage	n	int	1	RET	$ == 0
45063	79	12	TrapezoidIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
45063	79	12	TrapezoidIntegrator.java	stage	np	long	0	NIL-FOR	i < $
45064	112	8	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	NIL-WHILE	i <= $.maximalIterationCount
45064	112	8	TrapezoidIntegrator.java	integrate	i	int	0	NIL-WHILE	$ <= maximalIterationCount
945	114	12	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	RET	i >= $.minimalIterationCount
945	114	12	TrapezoidIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
946	115	16	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	RET	Math.abs(t - oldt) <= Math.abs($.relativeAccuracy * oldt)
946	115	16	TrapezoidIntegrator.java	integrate	t	double	0	RET	Math.abs($ - oldt) <= Math.abs(relativeAccuracy * oldt)
946	115	16	TrapezoidIntegrator.java	integrate	oldt	double	0	RET	Math.abs(t - $) <= Math.abs(relativeAccuracy * $)
947	134	8	TrapezoidIntegrator.java	verifyIterationCount	THIS	TrapezoidIntegrator	0	IllegalArgumentException	$.maximalIterationCount > 64
666	45	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	THIS	UncorrelatedRandomVectorGenerator	0	IllegalArgumentException	mean.$.length != standardDeviation.$.length
666	45	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	mean	double[]	0	IllegalArgumentException	$.length != standardDeviation.length
666	45	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	standardDeviation	double[]	0	IllegalArgumentException	mean.length != $.length
44847	74	4	UncorrelatedRandomVectorGenerator.java	nextVector	THIS	UncorrelatedRandomVectorGenerator	0	NIL-FOR	i < random.$.length
44847	74	4	UncorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < random.length
44847	74	4	UncorrelatedRandomVectorGenerator.java	nextVector	random	double[]	0	NIL-FOR	i < $.length
927	75	8	UnivariateRealIntegratorImpl.java	UnivariateRealIntegratorImpl	f	UnivariateRealFunction	0	IllegalArgumentException	$ == null
928	99	8	UnivariateRealIntegratorImpl.java	getResult	THIS	UnivariateRealIntegratorImpl	1	RET	$.resultComputed
929	113	8	UnivariateRealIntegratorImpl.java	getIterationCount	THIS	UnivariateRealIntegratorImpl	1	RET	$.resultComputed
930	237	8	UnivariateRealIntegratorImpl.java	verifyInterval	lower	double	0	IllegalArgumentException	$ >= upper
930	237	8	UnivariateRealIntegratorImpl.java	verifyInterval	upper	double	0	IllegalArgumentException	lower >= $
931	250	8	UnivariateRealIntegratorImpl.java	verifyIterationCount	THIS	UnivariateRealIntegratorImpl	0	IllegalArgumentException	$.isSequence(0, $.minimalIterationCount, $.maximalIterationCount+1)
907	89	8	UnivariateRealSolverImpl.java	UnivariateRealSolverImpl	f	UnivariateRealFunction	0	IllegalArgumentException	$ == null
908	111	8	UnivariateRealSolverImpl.java	getResult	THIS	UnivariateRealSolverImpl	1	RET	$.resultComputed
909	126	8	UnivariateRealSolverImpl.java	getIterationCount	THIS	UnivariateRealSolverImpl	1	RET	$.resultComputed
910	295	8	UnivariateRealSolverImpl.java	verifyInterval	lower	double	0	IllegalArgumentException	$ >= upper
910	295	8	UnivariateRealSolverImpl.java	verifyInterval	upper	double	0	IllegalArgumentException	lower >= $
911	312	8	UnivariateRealSolverImpl.java	verifySequence	THIS	UnivariateRealSolverImpl	0	IllegalArgumentException	$.isSequence(lower, initial, upper)
911	312	8	UnivariateRealSolverImpl.java	verifySequence	lower	double	0	IllegalArgumentException	isSequence($, initial, upper)
911	312	8	UnivariateRealSolverImpl.java	verifySequence	initial	double	0	IllegalArgumentException	isSequence(lower, $, upper)
911	312	8	UnivariateRealSolverImpl.java	verifySequence	upper	double	0	IllegalArgumentException	isSequence(lower, initial, $)
912	334	8	UnivariateRealSolverImpl.java	verifyBracketing	THIS	UnivariateRealSolverImpl	0	IllegalArgumentException	$.isBracketing(lower, upper, f)
912	334	8	UnivariateRealSolverImpl.java	verifyBracketing	lower	double	0	IllegalArgumentException	isBracketing($, upper, f)
912	334	8	UnivariateRealSolverImpl.java	verifyBracketing	upper	double	0	IllegalArgumentException	isBracketing(lower, $, f)
912	334	8	UnivariateRealSolverImpl.java	verifyBracketing	f	UnivariateRealFunction	0	IllegalArgumentException	isBracketing(lower, upper, $)
971	171	8	UnivariateRealSolverUtils.java	bracket	function	UnivariateRealFunction	0	IllegalArgumentException	$ == null
972	174	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	IllegalArgumentException	$ <= 0
973	178	8	UnivariateRealSolverUtils.java	bracket	initial	double	0	IllegalArgumentException	$ > upperBound
973	178	8	UnivariateRealSolverUtils.java	bracket	initial	double	0	IllegalArgumentException	$ < lowerBound
973	178	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	IllegalArgumentException	$ >= upperBound
973	178	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	IllegalArgumentException	initial < $
973	178	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	IllegalArgumentException	initial > $
973	178	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	IllegalArgumentException	lowerBound >= $
45069	189	8	UnivariateRealSolverUtils.java	bracket	a	double	0	NIL-DOWHILE	$ > lowerBound
45069	189	8	UnivariateRealSolverUtils.java	bracket	b	double	0	NIL-DOWHILE	$ < upperBound
45069	189	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	NIL-DOWHILE	$ * fb > 0.0
45069	189	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	NIL-DOWHILE	fa * $ > 0.0
45069	189	8	UnivariateRealSolverUtils.java	bracket	numIterations	int	0	NIL-DOWHILE	$ < maximumIterations
45069	189	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	NIL-DOWHILE	a > $
45069	189	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	NIL-DOWHILE	b < $
45069	189	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	NIL-DOWHILE	numIterations < $
974	199	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	ConvergenceException	$ * fb >= 0.0
974	199	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	ConvergenceException	fa * $ >= 0.0
975	230	8	UnivariateRealSolverUtils.java	setup	f	UnivariateRealFunction	0	IllegalArgumentException	$ == null
976	234	8	UnivariateRealSolverUtils.java	setup	THIS	UnivariateRealSolverUtils	0	DEF	$.factory == null
44848	120	8	ValueServer.java	fill	THIS	ValueServer	0	NIL-FOR	i < values.$.length
44848	120	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < values.length
44848	120	8	ValueServer.java	fill	values	double[]	0	NIL-FOR	i < $.length
44849	135	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < length
44849	135	8	ValueServer.java	fill	length	int	0	NIL-FOR	i < $
667	232	8	ValueServer.java	resetReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
668	249	8	ValueServer.java	closeReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
669	296	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	IllegalStateException	$.empiricalDistribution.getBinStats().size() == 0
669	296	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	IllegalStateException	$.empiricalDistribution == null
670	323	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	$.filePointer == null
671	326	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	EOFException	(str = $.filePointer.readLine()) == null
671	326	8	ValueServer.java	getNextReplay	str	String	0	EOFException	($ = filePointer.readLine()) == null
672	330	12	ValueServer.java	getNextReplay	THIS	ValueServer	0	EOFException	(str = $.filePointer.readLine()) == null
672	330	12	ValueServer.java	getNextReplay	str	String	0	EOFException	($ = filePointer.readLine()) == null
473	144	8	Variance.java	increment	THIS	Variance	0	DEF	$.incMoment
474	153	12	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 0
475	155	19	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 1
476	158	16	Variance.java	getResult	THIS	Variance	1	RET	$.isBiasCorrected
477	177	8	Variance.java	clear	THIS	Variance	0	DEF	$.incMoment
478	199	8	Variance.java	evaluate	values	double[]	0	IllegalArgumentException	$ == null
479	229	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
479	229	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
479	229	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
479	229	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
480	231	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
481	233	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
482	273	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
482	273	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
482	273	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
482	273	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
483	274	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
484	276	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
44785	280	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
44785	280	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
44785	280	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
485	286	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
130	251	4	Vector3D.java	normalize	s	double	0	ArithmeticException	$ == 0
131	275	4	Vector3D.java	orthogonal	threshold	double	0	ArithmeticException	$ == 0
132	279	4	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x <= threshold
132	279	4	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x >= -threshold
132	279	4	Vector3D.java	orthogonal	threshold	double	1	RET	x <= $
132	279	4	Vector3D.java	orthogonal	threshold	double	1	RET	x >= -$
133	282	11	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y >= -threshold
133	282	11	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y <= threshold
133	282	11	Vector3D.java	orthogonal	threshold	double	0	RET	y >= -$
133	282	11	Vector3D.java	orthogonal	threshold	double	0	RET	y <= $
134	305	4	Vector3D.java	angle	normProduct	double	0	ArithmeticException	$ == 0
135	311	4	Vector3D.java	angle	dot	double	0	RET	$ < -threshold
135	311	4	Vector3D.java	angle	dot	double	0	RET	$ > threshold
135	311	4	Vector3D.java	angle	threshold	double	0	RET	dot < -$
135	311	4	Vector3D.java	angle	threshold	double	0	RET	dot > $
136	314	6	Vector3D.java	angle	dot	double	0	RET	$ >= 0
495	66	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	DimensionMismatchException	v.$.length != $.sums.$.length
495	66	8	VectorialCovariance.java	increment	v	double[]	0	DimensionMismatchException	$.length != sums.length
44789	70	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	NIL-FOR	i < v.$.length
44789	70	8	VectorialCovariance.java	increment	i	int	0	NIL-FOR	$ < v.length
44789	70	8	VectorialCovariance.java	increment	v	double[]	0	NIL-FOR	i < $.length
44790	72	12	VectorialCovariance.java	increment	j	int	0	NIL-FOR	$ <= i
44790	72	12	VectorialCovariance.java	increment	i	int	0	NIL-FOR	j <= $
496	88	8	VectorialCovariance.java	getResult	THIS	VectorialCovariance	0	DEF	$.n > 1
44791	92	12	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	$ < dimension
44791	92	12	VectorialCovariance.java	getResult	dimension	int	0	NIL-FOR	i < $
44792	93	16	VectorialCovariance.java	getResult	j	int	0	NIL-FOR	$ <= i
44792	93	16	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	j <= $
44794	41	8	VectorialMean.java	VectorialMean	i	int	0	NIL-FOR	$ < dimension
44794	41	8	VectorialMean.java	VectorialMean	dimension	int	0	NIL-FOR	i < $
507	52	8	VectorialMean.java	increment	THIS	VectorialMean	0	DimensionMismatchException	v.$.length != $.means.$.length
507	52	8	VectorialMean.java	increment	v	double[]	0	DimensionMismatchException	$.length != means.length
44795	55	8	VectorialMean.java	increment	THIS	VectorialMean	0	NIL-FOR	i < v.$.length
44795	55	8	VectorialMean.java	increment	i	int	0	NIL-FOR	$ < v.length
44795	55	8	VectorialMean.java	increment	v	double[]	0	NIL-FOR	i < $.length
44796	66	8	VectorialMean.java	getResult	THIS	VectorialMean	0	NIL-FOR	i < result.$.length
44796	66	8	VectorialMean.java	getResult	i	int	0	NIL-FOR	$ < result.length
44796	66	8	VectorialMean.java	getResult	result	double[]	0	NIL-FOR	i < $.length
283	60	8	WeibullDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
284	98	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ < 0.0
284	98	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	IllegalArgumentException	$ > 1.0
285	101	15	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
286	103	16	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
287	116	8	WeibullDistributionImpl.java	setShape	alpha	double	0	IllegalArgumentException	$ <= 0.0
288	128	8	WeibullDistributionImpl.java	setScale	beta	double	0	IllegalArgumentException	$ <= 0.0
