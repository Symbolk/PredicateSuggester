id	line	column	filename	methodname	varname	vartype	else	return	right
448	62	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	DEF	$ > 1.0
448	62	8	AbstractContinuousDistribution.java	inverseCumulativeProbability	p	double	0	DEF	$ < 0.0
449	97	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	Math.abs($.value(lowerBound)) < 1E-6
449	97	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	lowerBound	double	0	RET	Math.abs(rootFindingFunction.value($)) < 1E-6
450	100	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	rootFindingFunction	UnivariateRealFunction	0	RET	Math.abs($.value(upperBound)) < 1E-6
450	100	12	AbstractContinuousDistribution.java	inverseCumulativeProbability	upperBound	double	0	RET	Math.abs(rootFindingFunction.value($)) < 1E-6
487	61	8	AbstractDistribution.java	cumulativeProbability	x0	double	0	DEF	$ > x1
487	61	8	AbstractDistribution.java	cumulativeProbability	x1	double	0	DEF	x0 > $
36391	128	8	AbstractEstimator.java	updateJacobian	THIS	AbstractEstimator	0	NIL-FOR	i < $.rows
36391	128	8	AbstractEstimator.java	updateJacobian	i	int	0	NIL-FOR	$ < rows
36392	131	12	AbstractEstimator.java	updateJacobian	THIS	AbstractEstimator	0	NIL-FOR	j < $.cols
36392	131	12	AbstractEstimator.java	updateJacobian	j	int	0	NIL-FOR	$ < cols
1399	152	8	AbstractEstimator.java	updateResidualsAndCost	THIS	AbstractEstimator	0	EstimationException	++$.costEvaluations > $.maxCostEval
36393	159	8	AbstractEstimator.java	updateResidualsAndCost	THIS	AbstractEstimator	0	NIL-FOR	i < $.rows
36393	159	8	AbstractEstimator.java	updateResidualsAndCost	i	int	0	NIL-FOR	$ < rows
36394	183	8	AbstractEstimator.java	getRMS	THIS	AbstractEstimator	0	NIL-FOR	i < wm.$.length
36394	183	8	AbstractEstimator.java	getRMS	i	int	0	NIL-FOR	$ < wm.length
36394	183	8	AbstractEstimator.java	getRMS	wm	WeightedMeasurement[]	0	NIL-FOR	i < $.length
36395	198	8	AbstractEstimator.java	getChiSquare	THIS	AbstractEstimator	0	NIL-FOR	i < wm.$.length
36395	198	8	AbstractEstimator.java	getChiSquare	i	int	0	NIL-FOR	$ < wm.length
36395	198	8	AbstractEstimator.java	getChiSquare	wm	WeightedMeasurement[]	0	NIL-FOR	i < $.length
36396	223	8	AbstractEstimator.java	getCovariances	i	int	0	NIL-FOR	$ < m
36396	223	8	AbstractEstimator.java	getCovariances	m	int	0	NIL-FOR	i < $
36397	224	12	AbstractEstimator.java	getCovariances	j	int	0	NIL-FOR	$ < m
36397	224	12	AbstractEstimator.java	getCovariances	m	int	0	NIL-FOR	j < $
36398	226	16	AbstractEstimator.java	getCovariances	k	int	0	NIL-FOR	$ < max
36398	226	16	AbstractEstimator.java	getCovariances	max	int	0	NIL-FOR	k < $
1400	258	8	AbstractEstimator.java	guessParametersErrors	m	int	0	EstimationException	$ <= p
1400	258	8	AbstractEstimator.java	guessParametersErrors	p	int	0	EstimationException	m <= $
36399	266	8	AbstractEstimator.java	guessParametersErrors	THIS	AbstractEstimator	0	NIL-FOR	i < errors.$.length
36399	266	8	AbstractEstimator.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
36399	266	8	AbstractEstimator.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
706	67	8	AbstractFieldMatrix.java	AbstractFieldMatrix	rowDimension	int	0	DEF	$ <= 0
707	72	8	AbstractFieldMatrix.java	AbstractFieldMatrix	columnDimension	int	0	DEF	$ <= 0
708	89	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	DEF	d.$.length == 0
708	89	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	DEF	$.length == 0
709	92	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	DEF	d[0].length == 0
709	92	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	DEF	$[0].length == 0
710	107	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	DEF	d.$.length == 0
710	107	8	AbstractFieldMatrix.java	extractField	d	T[]	0	DEF	$.length == 0
711	128	8	AbstractFieldMatrix.java	buildArray	columns	int	0	RET	$ < 0
35693	134	8	AbstractFieldMatrix.java	buildArray	THIS	AbstractFieldMatrix	0	NIL-FOR	i < array.$.length
35693	134	8	AbstractFieldMatrix.java	buildArray	i	int	0	NIL-FOR	$ < array.length
35693	134	8	AbstractFieldMatrix.java	buildArray	array	T[][]	0	NIL-FOR	i < $.length
35694	178	8	AbstractFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
35694	178	8	AbstractFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
35695	179	12	AbstractFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
35695	179	12	AbstractFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
35696	197	8	AbstractFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
35696	197	8	AbstractFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
35697	198	12	AbstractFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
35697	198	12	AbstractFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
35698	213	8	AbstractFieldMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
35698	213	8	AbstractFieldMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
35699	214	12	AbstractFieldMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
35699	214	12	AbstractFieldMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
35700	229	8	AbstractFieldMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
35700	229	8	AbstractFieldMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
35701	230	12	AbstractFieldMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
35701	230	12	AbstractFieldMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
35702	250	8	AbstractFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
35702	250	8	AbstractFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
35703	251	12	AbstractFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
35703	251	12	AbstractFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
35704	253	16	AbstractFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
35704	253	16	AbstractFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
35705	275	8	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	i < data.$.length
35705	275	8	AbstractFieldMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
35705	275	8	AbstractFieldMatrix.java	getData	data	T[][]	0	NIL-FOR	i < $.length
35706	277	12	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	j < dataI.$.length
35706	277	12	AbstractFieldMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
35706	277	12	AbstractFieldMatrix.java	getData	dataI	T[]	0	NIL-FOR	j < $.length
35707	295	8	AbstractFieldMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
35707	295	8	AbstractFieldMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
35708	296	12	AbstractFieldMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
35708	296	12	AbstractFieldMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
712	339	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	DEF	destination[0].length < columnsCount
712	339	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	DEF	destination.$.length < rowsCount
712	339	8	AbstractFieldMatrix.java	copySubMatrix	rowsCount	int	0	DEF	destination.length < $
712	339	8	AbstractFieldMatrix.java	copySubMatrix	columnsCount	int	0	DEF	destination[0].length < $
712	339	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	DEF	$[0].length < columnsCount
712	339	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	DEF	$.length < rowsCount
713	380	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	DEF	destination.$.length < selectedRows.$.length
713	380	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	DEF	destination[0].length < selectedColumns.$.length
713	380	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	DEF	destination.length < $.length
713	380	8	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	DEF	destination[0].length < $.length
713	380	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	DEF	$.length < selectedRows.length
713	380	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	DEF	$[0].length < selectedColumns.length
35709	389	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	i < selectedRows.$.length
35709	389	8	AbstractFieldMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
35709	389	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
35710	391	12	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	j < selectedColumns.$.length
35710	391	12	AbstractFieldMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
35710	391	12	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
714	403	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	DEF	$ == 0
715	408	8	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	DEF	$ == 0
35711	412	8	AbstractFieldMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
35711	412	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
716	413	12	AbstractFieldMatrix.java	setSubMatrix	THIS	AbstractFieldMatrix	0	DEF	subMatrix[r].length != nCols
716	413	12	AbstractFieldMatrix.java	setSubMatrix	r	int	0	DEF	subMatrix[$].length != nCols
716	413	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	DEF	subMatrix[r].length != $
716	413	12	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DEF	$[r].length != nCols
35712	425	8	AbstractFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
35712	425	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
35713	426	12	AbstractFieldMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
35713	426	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
35714	440	8	AbstractFieldMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
35714	440	8	AbstractFieldMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
717	454	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	InvalidMatrixException	matrix.getColumnDimension() != $
717	454	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	InvalidMatrixException	$.getRowDimension() != 1
717	454	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	InvalidMatrixException	$.getColumnDimension() != nCols
35715	460	8	AbstractFieldMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
35715	460	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
35716	473	8	AbstractFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
35716	473	8	AbstractFieldMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
718	487	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	InvalidMatrixException	matrix.getRowDimension() != $
718	487	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	InvalidMatrixException	$.getRowDimension() != nRows
718	487	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	InvalidMatrixException	$.getColumnDimension() != 1
35717	493	8	AbstractFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
35717	493	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
719	511	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	InvalidMatrixException	vector.getDimension() != $
719	511	8	AbstractFieldMatrix.java	setRowVector	vector	FieldVector<T>	0	InvalidMatrixException	$.getDimension() != nCols
35718	516	8	AbstractFieldMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
35718	516	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
720	534	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	InvalidMatrixException	vector.getDimension() != $
720	534	8	AbstractFieldMatrix.java	setColumnVector	vector	FieldVector<T>	0	InvalidMatrixException	$.getDimension() != nRows
35719	539	8	AbstractFieldMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
35719	539	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
35720	552	8	AbstractFieldMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
35720	552	8	AbstractFieldMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
721	566	8	AbstractFieldMatrix.java	setRow	THIS	AbstractFieldMatrix	0	InvalidMatrixException	array.$.length != nCols
721	566	8	AbstractFieldMatrix.java	setRow	nCols	int	0	InvalidMatrixException	array.length != $
721	566	8	AbstractFieldMatrix.java	setRow	array	T[]	0	InvalidMatrixException	$.length != nCols
35721	571	8	AbstractFieldMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
35721	571	8	AbstractFieldMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
35722	584	8	AbstractFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
35722	584	8	AbstractFieldMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
722	598	8	AbstractFieldMatrix.java	setColumn	THIS	AbstractFieldMatrix	0	InvalidMatrixException	array.$.length != nRows
722	598	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	InvalidMatrixException	array.length != $
722	598	8	AbstractFieldMatrix.java	setColumn	array	T[]	0	InvalidMatrixException	$.length != nRows
35723	603	8	AbstractFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
35723	603	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
723	661	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
723	661	8	AbstractFieldMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
35724	665	8	AbstractFieldMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
35724	665	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
724	677	8	AbstractFieldMatrix.java	operate	THIS	AbstractFieldMatrix	0	DEF	v.$.length != nCols
724	677	8	AbstractFieldMatrix.java	operate	nCols	int	0	DEF	v.length != $
724	677	8	AbstractFieldMatrix.java	operate	v	T[]	0	DEF	$.length != nCols
35725	684	8	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
35725	684	8	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
35726	686	12	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
35726	686	12	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
725	704	12	AbstractFieldMatrix.java	operate	nCols	int	0	DEF	v.getDimension() != $
725	704	12	AbstractFieldMatrix.java	operate	v	FieldVector<T>	0	DEF	$.getDimension() != nCols
35727	711	12	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
35727	711	12	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
35728	713	16	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
35728	713	16	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
726	729	8	AbstractFieldMatrix.java	preMultiply	THIS	AbstractFieldMatrix	0	DEF	v.$.length != nRows
726	729	8	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DEF	v.length != $
726	729	8	AbstractFieldMatrix.java	preMultiply	v	T[]	0	DEF	$.length != nRows
35729	736	8	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
35729	736	8	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
35730	738	12	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
35730	738	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
727	757	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DEF	v.getDimension() != $
727	757	12	AbstractFieldMatrix.java	preMultiply	v	FieldVector<T>	0	DEF	$.getDimension() != nRows
35731	764	12	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
35731	764	12	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
35732	766	16	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
35732	766	16	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
35733	783	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
35733	783	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
35734	784	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
35734	784	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
35735	799	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
35735	799	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
35736	800	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
35736	800	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
35737	815	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
35737	815	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
35738	816	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
35738	816	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
35739	833	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
35739	833	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
35740	834	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
35740	834	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
35741	847	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
35741	847	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
35742	848	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
35742	848	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
35743	863	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
35743	863	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
35744	864	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
35744	864	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
35745	879	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
35745	879	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
35746	880	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
35746	880	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
35747	897	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
35747	897	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
35748	898	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
35748	898	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
35749	946	8	AbstractFieldMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
35749	946	8	AbstractFieldMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
728	947	12	AbstractFieldMatrix.java	toString	i	int	0	DEF	$ > 0
35750	951	12	AbstractFieldMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
35750	951	12	AbstractFieldMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
729	952	16	AbstractFieldMatrix.java	toString	j	int	0	DEF	$ > 0
730	975	8	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	object == $
730	975	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ == this
731	978	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ instanceof FieldMatrix<?> == false
732	984	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getRowDimension() != nRows
732	984	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getColumnDimension() != nCols
732	984	8	AbstractFieldMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
732	984	8	AbstractFieldMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
35751	987	8	AbstractFieldMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
35751	987	8	AbstractFieldMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
35752	988	12	AbstractFieldMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
35752	988	12	AbstractFieldMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
733	989	16	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	$.getEntry(row, col).equals(m.getEntry(row, col))
733	989	16	AbstractFieldMatrix.java	equals	col	int	0	RET	getEntry(row, $).equals(m.getEntry(row, $))
733	989	16	AbstractFieldMatrix.java	equals	row	int	0	RET	getEntry($, col).equals(m.getEntry($, col))
733	989	16	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	getEntry(row, col).equals($.getEntry(row, col))
35753	1009	8	AbstractFieldMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
35753	1009	8	AbstractFieldMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
35754	1010	12	AbstractFieldMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
35754	1010	12	AbstractFieldMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
734	1023	8	AbstractFieldMatrix.java	checkRowIndex	THIS	AbstractFieldMatrix	0	MatrixIndexException	row >= $.getRowDimension()
734	1023	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	MatrixIndexException	$ >= getRowDimension()
734	1023	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	MatrixIndexException	$ < 0
735	1036	8	AbstractFieldMatrix.java	checkColumnIndex	THIS	AbstractFieldMatrix	0	MatrixIndexException	column >= $.getColumnDimension()
735	1036	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	MatrixIndexException	$ >= getColumnDimension()
735	1036	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	MatrixIndexException	$ < 0
736	1056	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startRow	int	0	MatrixIndexException	$ > endRow
736	1056	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endRow	int	0	MatrixIndexException	startRow > $
737	1063	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startColumn	int	0	MatrixIndexException	$ > endColumn
737	1063	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endColumn	int	0	MatrixIndexException	startColumn > $
738	1080	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
738	1080	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
738	1080	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
739	1081	12	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	MatrixIndexException	selectedRows.$.length == 0
739	1081	12	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length == 0
740	1101	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getRowDimension() != m.getRowDimension()
740	1101	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getColumnDimension() != m.getColumnDimension()
740	1101	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	DEF	getRowDimension() != $.getRowDimension()
740	1101	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	DEF	getColumnDimension() != $.getColumnDimension()
741	1116	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getColumnDimension() != m.getColumnDimension()
741	1116	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getRowDimension() != m.getRowDimension()
741	1116	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	DEF	getColumnDimension() != $.getColumnDimension()
741	1116	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	DEF	getRowDimension() != $.getRowDimension()
742	1131	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	THIS	AbstractFieldMatrix	0	DEF	$.getColumnDimension() != m.getRowDimension()
742	1131	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	m	FieldMatrix<T>	0	DEF	getColumnDimension() != $.getRowDimension()
355	120	8	AbstractFormat.java	setDenominatorFormat	format	NumberFormat	0	DEF	$ == null
356	134	8	AbstractFormat.java	setNumeratorFormat	format	NumberFormat	0	DEF	$ == null
357	165	9	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
357	165	9	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
35268	167	13	AbstractFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
35268	167	13	AbstractFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
35268	167	13	AbstractFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
358	172	13	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
358	172	13	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
406	88	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	0	DEF	$ > x1
406	88	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	double	0	DEF	x0 > $
407	92	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	double	1	RET	Math.floor($) < $
408	126	8	AbstractIntegerDistribution.java	probability	fl	double	1	RET	$ == x
408	126	8	AbstractIntegerDistribution.java	probability	x	double	1	RET	fl == $
409	145	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	int	0	DEF	$ > x1
409	145	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	int	0	DEF	x0 > $
410	164	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	DEF	$ > 1.0
410	164	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	DEF	$ < 0.0
35270	174	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	0	NIL-WHILE	$ < x1
35270	174	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	0	NIL-WHILE	x0 < $
411	177	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	1	DEF	$ > p
411	177	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	1	DEF	pm > $
412	179	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x1
412	179	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x1	int	1	DEF	xm == $
413	189	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	xm	int	1	DEF	$ == x0
413	189	16	AbstractIntegerDistribution.java	inverseCumulativeProbability	x0	int	1	DEF	xm == $
35271	202	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	pm	double	0	NIL-WHILE	$ > p
35271	202	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	pm > $
1605	124	12	AbstractIntegrator.java	requiresDenseOutput	THIS	AbstractIntegrator	0	RET	$.handler.requiresDenseOutput()
1606	179	8	AbstractIntegrator.java	computeDerivatives	THIS	AbstractIntegrator	0	MaxEvaluationsExceededException	++$.evaluations > $.maxEvaluations
1607	198	8	AbstractIntegrator.java	sanityChecks	THIS	AbstractIntegrator	0	IntegratorException	ode.getDimension() != y0.$.length
1607	198	8	AbstractIntegrator.java	sanityChecks	ode	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y0.length
1607	198	8	AbstractIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	ode.getDimension() != $.length
1608	205	8	AbstractIntegrator.java	sanityChecks	THIS	AbstractIntegrator	0	IntegratorException	ode.getDimension() != y.$.length
1608	205	8	AbstractIntegrator.java	sanityChecks	ode	FirstOrderDifferentialEquations	0	IntegratorException	$.getDimension() != y.length
1608	205	8	AbstractIntegrator.java	sanityChecks	y	double[]	0	IntegratorException	ode.getDimension() != $.length
1609	212	8	AbstractIntegrator.java	sanityChecks	t0	double	0	IntegratorException	Math.abs(t - $) <= 1.0e-12 * Math.max(Math.abs($), Math.abs(t))
1609	212	8	AbstractIntegrator.java	sanityChecks	t	double	0	IntegratorException	Math.abs($ - t0) <= 1.0e-12 * Math.max(Math.abs(t0), Math.abs($))
1016	166	8	AbstractLeastSquaresOptimizer.java	incrementIterationsCounter	THIS	AbstractLeastSquaresOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
1017	179	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	FunctionEvaluationException	$.jacobian.$.length != $.rows
36190	183	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
36190	183	8	AbstractLeastSquaresOptimizer.java	updateJacobian	i	int	0	NIL-FOR	$ < rows
36191	186	12	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
36191	186	12	AbstractLeastSquaresOptimizer.java	updateJacobian	j	int	0	NIL-FOR	$ < cols
1018	201	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	MaxEvaluationsExceededException	++$.objectiveEvaluations > $.maxEvaluations
1019	206	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	FunctionEvaluationException	$.objective.$.length != $.rows
36192	212	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
36192	212	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	i	int	0	NIL-FOR	$ < rows
36193	234	8	AbstractLeastSquaresOptimizer.java	getRMS	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
36193	234	8	AbstractLeastSquaresOptimizer.java	getRMS	i	int	0	NIL-FOR	$ < rows
36194	247	8	AbstractLeastSquaresOptimizer.java	getChiSquare	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
36194	247	8	AbstractLeastSquaresOptimizer.java	getChiSquare	i	int	0	NIL-FOR	$ < rows
36195	270	8	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.cols
36195	270	8	AbstractLeastSquaresOptimizer.java	getCovariances	i	int	0	NIL-FOR	$ < cols
36196	271	12	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
36196	271	12	AbstractLeastSquaresOptimizer.java	getCovariances	j	int	0	NIL-FOR	$ < cols
36197	273	16	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	k < $.rows
36197	273	16	AbstractLeastSquaresOptimizer.java	getCovariances	k	int	0	NIL-FOR	$ < rows
1020	303	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	OptimizationException	$.rows <= $.cols
36198	311	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < errors.$.length
36198	311	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
36198	311	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
1021	323	8	AbstractLeastSquaresOptimizer.java	optimize	THIS	AbstractLeastSquaresOptimizer	0	OptimizationException	target.$.length != weights.$.length
1021	323	8	AbstractLeastSquaresOptimizer.java	optimize	target	double[]	0	OptimizationException	$.length != weights.length
1021	323	8	AbstractLeastSquaresOptimizer.java	optimize	weights	double[]	0	OptimizationException	target.length != $.length
954	86	8	AbstractLinearOptimizer.java	incrementIterationsCounter	THIS	AbstractLinearOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
36324	51	8	AbstractMultipleLinearRegression.java	newSampleData	i	int	0	NIL-FOR	$ < nobs
36324	51	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NIL-FOR	i < $
36325	54	12	AbstractMultipleLinearRegression.java	newSampleData	j	int	0	NIL-FOR	$ < nvars + 1
36325	54	12	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	NIL-FOR	j < $ + 1
1281	89	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	1	DEF	x.$.length != y.$.length
1281	89	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	1	DEF	$ == null
1281	89	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	1	DEF	$.length != y.length
1281	89	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	1	DEF	x.length != $.length
1281	89	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	1	DEF	$ == null
1282	94	15	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	x[0].length > x.$.length
1282	94	15	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	x.$.length > 0
1282	94	15	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DEF	$[0].length > $.length
1282	94	15	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DEF	$.length > 0
1283	110	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DEF	x.$.length != covariance.$.length
1283	110	8	AbstractMultipleLinearRegression.java	validateCovarianceData	x	double[][]	0	DEF	$.length != covariance.length
1283	110	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DEF	x.length != $.length
1284	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DEF	covariance.$.length > 0
1284	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DEF	covariance.$.length != covariance[0].length
1284	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DEF	$.length > 0
1284	114	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DEF	$.length != $[0].length
36326	153	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	i	int	0	NIL-FOR	$ < length
36326	153	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	length	int	0	NIL-FOR	i < $
36348	107	8	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	NIL-WHILE	bytesOut < bytes.$.length
36348	107	8	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	NIL-WHILE	$ < bytes.length
36348	107	8	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	bytesOut < $.length
36349	109	10	AbstractRandomGenerator.java	nextBytes	i	int	0	NIL-FOR	$ < 3
1310	110	14	AbstractRandomGenerator.java	nextBytes	i	int	0	DEF	$ > 0
1311	114	14	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	RET	bytesOut == bytes.$.length
1311	114	14	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	RET	$ == bytes.length
1311	114	14	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	RET	bytesOut == $.length
1312	156	8	AbstractRandomGenerator.java	nextInt	n	int	0	DEF	$ <= 0
1313	253	8	AbstractRandomGenerator.java	nextGaussian	THIS	AbstractRandomGenerator	0	RET	Double.isNaN($.cachedNormalDeviate)
36350	261	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	NIL-WHILE	$ >=1
1314	266	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	DEF	$ != 0
644	56	8	AbstractRealMatrix.java	AbstractRealMatrix	rowDimension	int	0	DEF	$ <= 0
645	61	8	AbstractRealMatrix.java	AbstractRealMatrix	columnDimension	int	0	DEF	$ <= 0
35573	85	8	AbstractRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
35573	85	8	AbstractRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
35574	86	12	AbstractRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
35574	86	12	AbstractRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
35575	104	8	AbstractRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
35575	104	8	AbstractRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
35576	105	12	AbstractRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
35576	105	12	AbstractRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
35577	120	8	AbstractRealMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
35577	120	8	AbstractRealMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
35578	121	12	AbstractRealMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
35578	121	12	AbstractRealMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
35579	136	8	AbstractRealMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
35579	136	8	AbstractRealMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
35580	137	12	AbstractRealMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
35580	137	12	AbstractRealMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
35581	157	8	AbstractRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
35581	157	8	AbstractRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
35582	158	12	AbstractRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
35582	158	12	AbstractRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
35583	160	16	AbstractRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
35583	160	16	AbstractRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
35584	182	8	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	i < data.$.length
35584	182	8	AbstractRealMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
35584	182	8	AbstractRealMatrix.java	getData	data	double[][]	0	NIL-FOR	i < $.length
35585	184	12	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	j < dataI.$.length
35585	184	12	AbstractRealMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
35585	184	12	AbstractRealMatrix.java	getData	dataI	double[]	0	NIL-FOR	j < $.length
35586	268	8	AbstractRealMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
35586	268	8	AbstractRealMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
35587	269	12	AbstractRealMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
35587	269	12	AbstractRealMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
646	312	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination.$.length < rowsCount
646	312	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination[0].length < columnsCount
646	312	8	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	DEF	destination.length < $
646	312	8	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	DEF	destination[0].length < $
646	312	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$.length < rowsCount
646	312	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$[0].length < columnsCount
647	353	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination.$.length < selectedRows.$.length
647	353	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	DEF	destination[0].length < selectedColumns.$.length
647	353	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	DEF	destination.length < $.length
647	353	8	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	DEF	destination[0].length < $.length
647	353	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$.length < selectedRows.length
647	353	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	DEF	$[0].length < selectedColumns.length
35588	362	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	i < selectedRows.$.length
35588	362	8	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
35588	362	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
35589	364	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	j < selectedColumns.$.length
35589	364	12	AbstractRealMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
35589	364	12	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
648	376	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	DEF	$ == 0
649	381	8	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DEF	$ == 0
35590	385	8	AbstractRealMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
35590	385	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
650	386	12	AbstractRealMatrix.java	setSubMatrix	THIS	AbstractRealMatrix	0	DEF	subMatrix[r].length != nCols
650	386	12	AbstractRealMatrix.java	setSubMatrix	r	int	0	DEF	subMatrix[$].length != nCols
650	386	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DEF	subMatrix[r].length != $
650	386	12	AbstractRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DEF	$[r].length != nCols
35591	398	8	AbstractRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
35591	398	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
35592	399	12	AbstractRealMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
35592	399	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
35593	415	8	AbstractRealMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
35593	415	8	AbstractRealMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
651	429	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	InvalidMatrixException	matrix.getColumnDimension() != $
651	429	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getRowDimension() != 1
651	429	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getColumnDimension() != nCols
35594	435	8	AbstractRealMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
35594	435	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
35595	448	8	AbstractRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
35595	448	8	AbstractRealMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
652	462	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	InvalidMatrixException	matrix.getRowDimension() != $
652	462	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getRowDimension() != nRows
652	462	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	InvalidMatrixException	$.getColumnDimension() != 1
35596	468	8	AbstractRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
35596	468	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
653	486	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	InvalidMatrixException	vector.getDimension() != $
653	486	8	AbstractRealMatrix.java	setRowVector	vector	RealVector	0	InvalidMatrixException	$.getDimension() != nCols
35597	491	8	AbstractRealMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
35597	491	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
654	509	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	InvalidMatrixException	vector.getDimension() != $
654	509	8	AbstractRealMatrix.java	setColumnVector	vector	RealVector	0	InvalidMatrixException	$.getDimension() != nRows
35598	514	8	AbstractRealMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
35598	514	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
35599	527	8	AbstractRealMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
35599	527	8	AbstractRealMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
655	541	8	AbstractRealMatrix.java	setRow	THIS	AbstractRealMatrix	0	InvalidMatrixException	array.$.length != nCols
655	541	8	AbstractRealMatrix.java	setRow	nCols	int	0	InvalidMatrixException	array.length != $
655	541	8	AbstractRealMatrix.java	setRow	array	double[]	0	InvalidMatrixException	$.length != nCols
35600	546	8	AbstractRealMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
35600	546	8	AbstractRealMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
35601	559	8	AbstractRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
35601	559	8	AbstractRealMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
656	573	8	AbstractRealMatrix.java	setColumn	THIS	AbstractRealMatrix	0	InvalidMatrixException	array.$.length != nRows
656	573	8	AbstractRealMatrix.java	setColumn	nRows	int	0	InvalidMatrixException	array.length != $
656	573	8	AbstractRealMatrix.java	setColumn	array	double[]	0	InvalidMatrixException	$.length != nRows
35602	578	8	AbstractRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
35602	578	8	AbstractRealMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
657	624	8	AbstractRealMatrix.java	inverse	THIS	AbstractRealMatrix	0	DEF	$.lu == null
658	645	8	AbstractRealMatrix.java	isSingular	THIS	AbstractRealMatrix	0	DEF	$.lu == null
659	662	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
659	662	8	AbstractRealMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
35603	666	8	AbstractRealMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
35603	666	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
660	678	8	AbstractRealMatrix.java	operate	THIS	AbstractRealMatrix	0	DEF	v.$.length != nCols
660	678	8	AbstractRealMatrix.java	operate	nCols	int	0	DEF	v.length != $
660	678	8	AbstractRealMatrix.java	operate	v	double[]	0	DEF	$.length != nCols
35604	685	8	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
35604	685	8	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
35605	687	12	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
35605	687	12	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
661	705	12	AbstractRealMatrix.java	operate	nCols	int	0	DEF	v.getDimension() != $
661	705	12	AbstractRealMatrix.java	operate	v	RealVector	0	DEF	$.getDimension() != nCols
35606	712	12	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
35606	712	12	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
35607	714	16	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
35607	714	16	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
662	730	8	AbstractRealMatrix.java	preMultiply	THIS	AbstractRealMatrix	0	DEF	v.$.length != nRows
662	730	8	AbstractRealMatrix.java	preMultiply	nRows	int	0	DEF	v.length != $
662	730	8	AbstractRealMatrix.java	preMultiply	v	double[]	0	DEF	$.length != nRows
35608	737	8	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
35608	737	8	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
35609	739	12	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
35609	739	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
663	758	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	DEF	v.getDimension() != $
663	758	12	AbstractRealMatrix.java	preMultiply	v	RealVector	0	DEF	$.getDimension() != nRows
35610	765	12	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
35610	765	12	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
35611	767	16	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
35611	767	16	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
35612	784	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
35612	784	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
35613	785	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
35613	785	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
35614	801	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
35614	801	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
35615	802	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
35615	802	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
35616	817	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
35616	817	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
35617	818	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
35617	818	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
35618	836	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
35618	836	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
35619	837	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
35619	837	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
35620	850	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
35620	850	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
35621	851	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
35621	851	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
35622	867	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
35622	867	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
35623	868	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
35623	868	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
35624	883	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
35624	883	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
35625	884	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
35625	884	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
35626	902	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
35626	902	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
35627	903	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
35627	903	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
664	942	8	AbstractRealMatrix.java	solve	THIS	AbstractRealMatrix	0	DEF	$.lu == null
665	952	8	AbstractRealMatrix.java	solve	THIS	AbstractRealMatrix	0	DEF	$.lu == null
666	980	8	AbstractRealMatrix.java	luDecompose	THIS	AbstractRealMatrix	0	DEF	$.lu == null
35628	998	8	AbstractRealMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
35628	998	8	AbstractRealMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
667	999	12	AbstractRealMatrix.java	toString	i	int	0	DEF	$ > 0
35629	1003	12	AbstractRealMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
35629	1003	12	AbstractRealMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
668	1004	16	AbstractRealMatrix.java	toString	j	int	0	DEF	$ > 0
669	1027	8	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	object == $
669	1027	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ == this
670	1030	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ instanceof RealMatrix == false
671	1036	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getRowDimension() != nRows
671	1036	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getColumnDimension() != nCols
671	1036	8	AbstractRealMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
671	1036	8	AbstractRealMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
35630	1039	8	AbstractRealMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
35630	1039	8	AbstractRealMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
35631	1040	12	AbstractRealMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
35631	1040	12	AbstractRealMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
672	1041	16	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	$.getEntry(row, col) != m.getEntry(row, col)
672	1041	16	AbstractRealMatrix.java	equals	col	int	0	RET	getEntry(row, $) != m.getEntry(row, $)
672	1041	16	AbstractRealMatrix.java	equals	row	int	0	RET	getEntry($, col) != m.getEntry($, col)
672	1041	16	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	getEntry(row, col) != $.getEntry(row, col)
35632	1061	8	AbstractRealMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
35632	1061	8	AbstractRealMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
35633	1062	12	AbstractRealMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
35633	1062	12	AbstractRealMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
548	56	8	AbstractRealVector.java	checkVectorDimensions	d	double	0	DEF	$ != n
548	56	8	AbstractRealVector.java	checkVectorDimensions	n	int	0	DEF	d != $
549	70	8	AbstractRealVector.java	checkIndex	THIS	AbstractRealVector	0	MatrixIndexException	index >= $.getDimension()
549	70	8	AbstractRealVector.java	checkIndex	index	int	0	MatrixIndexException	$ < 0
549	70	8	AbstractRealVector.java	checkIndex	index	int	0	MatrixIndexException	$ >= getDimension()
35397	88	8	AbstractRealVector.java	setSubVector	THIS	AbstractRealVector	0	NIL-FOR	i < v.$.length
35397	88	8	AbstractRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.length
35397	88	8	AbstractRealVector.java	setSubVector	v	double[]	0	NIL-FOR	i < $.length
35398	98	8	AbstractRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
35398	98	8	AbstractRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
35398	98	8	AbstractRealVector.java	add	e	Entry	0	NIL-WHILE	($ = it.next()) != null
550	106	8	AbstractRealVector.java	add	v	RealVector	0	RET	$ instanceof ArrayRealVector
35399	113	8	AbstractRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
35399	113	8	AbstractRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
35399	113	8	AbstractRealVector.java	add	e	Entry	0	NIL-WHILE	($ = it.next()) != null
35400	125	8	AbstractRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
35400	125	8	AbstractRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
35400	125	8	AbstractRealVector.java	subtract	e	Entry	0	NIL-WHILE	($ = it.next()) != null
551	134	8	AbstractRealVector.java	subtract	v	RealVector	0	RET	$ instanceof ArrayRealVector
35401	141	8	AbstractRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
35401	141	8	AbstractRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
35401	141	8	AbstractRealVector.java	subtract	e	Entry	0	NIL-WHILE	($ = it.next()) != null
552	155	8	AbstractRealVector.java	mapAddToSelf	d	double	0	IllegalArgumentException:RET	$ != 0
35402	179	8	AbstractRealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
35402	179	8	AbstractRealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
35402	179	8	AbstractRealVector.java	dotProduct	e	Entry	0	NIL-WHILE	($ = it.next()) != null
35403	201	8	AbstractRealVector.java	getDistance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
35403	201	8	AbstractRealVector.java	getDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
35403	201	8	AbstractRealVector.java	getDistance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
35404	213	8	AbstractRealVector.java	getNorm	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
35404	213	8	AbstractRealVector.java	getNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
35404	213	8	AbstractRealVector.java	getNorm	e	Entry	0	NIL-WHILE	($ = it.next()) != null
35405	225	8	AbstractRealVector.java	getL1Norm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
35405	225	8	AbstractRealVector.java	getL1Norm	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
35405	225	8	AbstractRealVector.java	getL1Norm	e	Entry	0	NIL-WHILE	($ = it.next()) != null
35406	236	8	AbstractRealVector.java	getLInfNorm	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
35406	236	8	AbstractRealVector.java	getLInfNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
35406	236	8	AbstractRealVector.java	getLInfNorm	e	Entry	0	NIL-WHILE	($ = it.next()) != null
35407	253	8	AbstractRealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
35407	253	8	AbstractRealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
35407	253	8	AbstractRealVector.java	getL1Distance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
35408	265	8	AbstractRealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
35408	265	8	AbstractRealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
35408	265	8	AbstractRealVector.java	getL1Distance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
35409	277	8	AbstractRealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
35409	277	8	AbstractRealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
35409	277	8	AbstractRealVector.java	getLInfDistance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
35410	289	8	AbstractRealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
35410	289	8	AbstractRealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
35410	289	8	AbstractRealVector.java	getLInfDistance	e	Entry	0	NIL-WHILE	($ = it.next()) != null
35411	303	8	AbstractRealVector.java	getMinIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
553	305	12	AbstractRealVector.java	getMinIndex	entry	Entry	0	DEF	$.getValue() <= minValue
553	305	12	AbstractRealVector.java	getMinIndex	minValue	double	0	DEF	entry.getValue() <= $
35412	329	8	AbstractRealVector.java	getMaxIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
554	331	12	AbstractRealVector.java	getMaxIndex	entry	Entry	0	DEF	$.getValue() >= maxValue
554	331	12	AbstractRealVector.java	getMaxIndex	maxValue	double	0	DEF	entry.getValue() >= $
555	724	8	AbstractRealVector.java	outerProduct	v	RealVector	1	DEF	$ instanceof SparseRealVector
35413	731	8	AbstractRealVector.java	outerProduct	thisIt	Iterator<Entry>	0	NIL-WHILE	(thisE = $.next()) != null
35413	731	8	AbstractRealVector.java	outerProduct	thisIt	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
35413	731	8	AbstractRealVector.java	outerProduct	thisE	Entry	0	NIL-WHILE	($ = thisIt.next()) != null
35414	734	12	AbstractRealVector.java	outerProduct	otherIt	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
35414	734	12	AbstractRealVector.java	outerProduct	otherIt	Iterator<Entry>	0	NIL-WHILE	(otherE = $.next()) != null
35414	734	12	AbstractRealVector.java	outerProduct	otherE	Entry	0	NIL-WHILE	($ = otherIt.next()) != null
35415	758	8	AbstractRealVector.java	set	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
35415	758	8	AbstractRealVector.java	set	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
35415	758	8	AbstractRealVector.java	set	e	Entry	0	NIL-WHILE	($ = it.next()) != null
35416	767	8	AbstractRealVector.java	toArray	i	int	0	NIL-FOR	$ < dim
35416	767	8	AbstractRealVector.java	toArray	dim	int	0	NIL-FOR	i < $
35417	833	8	AbstractRealVector.java	mapToSelf	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
35417	833	8	AbstractRealVector.java	mapToSelf	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
35417	833	8	AbstractRealVector.java	mapToSelf	e	Entry	0	NIL-WHILE	($ = it.next()) != null
1033	136	8	AbstractScalarDifferentiableOptimizer.java	incrementIterationsCounter	THIS	AbstractScalarDifferentiableOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
1034	163	8	AbstractScalarDifferentiableOptimizer.java	computeObjectiveValue	THIS	AbstractScalarDifferentiableOptimizer	0	MaxEvaluationsExceededException	++$.evaluations > $.maxEvaluations
1465	148	4	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	1	DEF	interpolator.$.currentState != null
1465	148	4	AbstractStepInterpolator.java	AbstractStepInterpolator	interpolator	AbstractStepInterpolator	1	DEF	$.currentState != null
1466	272	6	AbstractStepInterpolator.java	getInterpolatedState	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
1467	287	6	AbstractStepInterpolator.java	getInterpolatedDerivatives	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
1468	341	4	AbstractStepInterpolator.java	finalizeStep	THIS	AbstractStepInterpolator	0	DEF	$.finalized
1469	374	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	1	DEF	$.currentState == null
1470	384	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	DEF	$.currentState != null
36477	385	8	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
36477	385	8	AbstractStepInterpolator.java	writeBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
1471	423	4	AbstractStepInterpolator.java	readBaseExternal	dimension	int	1	DEF	$ < 0
36478	427	8	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
36478	427	8	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
1069	57	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	$ == null
1070	86	8	AbstractStorelessUnivariateStatistic.java	evaluate	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
1070	86	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1070	86	8	AbstractStorelessUnivariateStatistic.java	evaluate	begin	int	0	DEF	test(values, $, length)
1070	86	8	AbstractStorelessUnivariateStatistic.java	evaluate	length	int	0	DEF	test(values, begin, $)
1071	125	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	$ == null
1072	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
1072	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	test($, begin, length)
1072	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	begin	int	0	DEF	test(values, $, length)
1072	144	8	AbstractStorelessUnivariateStatistic.java	incrementAll	length	int	0	DEF	test(values, begin, $)
36244	146	12	AbstractStorelessUnivariateStatistic.java	incrementAll	i	int	0	NIL-FOR	$ < k
36244	146	12	AbstractStorelessUnivariateStatistic.java	incrementAll	k	int	0	NIL-FOR	i < $
1073	161	8	AbstractStorelessUnivariateStatistic.java	equals	THIS	AbstractStorelessUnivariateStatistic	0	RET	object == $
1073	161	8	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ == this
1074	164	7	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ instanceof AbstractStorelessUnivariateStatistic == false
932	71	8	AbstractUnivariateRealOptimizer.java	checkResultComputed	THIS	AbstractUnivariateRealOptimizer	0	DEF	$.resultComputed
933	136	8	AbstractUnivariateRealOptimizer.java	computeObjectiveValue	THIS	AbstractUnivariateRealOptimizer	0	MaxEvaluationsExceededException	++$.evaluations > $.maxEvaluations
1186	79	8	AbstractUnivariateStatistic.java	test	values	double[]	0	DEF	$ == null
1187	83	8	AbstractUnivariateStatistic.java	test	begin	int	0	DEF	$ < 0
1188	88	8	AbstractUnivariateStatistic.java	test	length	int	0	DEF	$ < 0
1189	93	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	DEF	begin + length > values.$.length
1189	93	8	AbstractUnivariateStatistic.java	test	values	double[]	0	DEF	begin + length > $.length
1189	93	8	AbstractUnivariateStatistic.java	test	begin	int	0	DEF	$ + length > values.length
1189	93	8	AbstractUnivariateStatistic.java	test	length	int	0	DEF	begin + $ > values.length
1190	98	8	AbstractUnivariateStatistic.java	test	length	int	0	RET	$ == 0
1191	141	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	$ == null
1192	145	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	DEF	weights.$.length != values.$.length
1192	145	8	AbstractUnivariateStatistic.java	test	values	double[]	0	DEF	weights.length != $.length
1192	145	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	$.length != values.length
36269	151	8	AbstractUnivariateStatistic.java	test	i	int	0	NIL-FOR	$ < begin + length
36269	151	8	AbstractUnivariateStatistic.java	test	begin	int	0	NIL-FOR	i < $ + length
36269	151	8	AbstractUnivariateStatistic.java	test	length	int	0	NIL-FOR	i < begin + $
1193	152	12	AbstractUnivariateStatistic.java	test	i	int	0	DEF	Double.isNaN(weights[$])
1193	152	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	Double.isNaN($[i])
1194	156	12	AbstractUnivariateStatistic.java	test	i	int	0	DEF	Double.isInfinite(weights[$])
1194	156	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	Double.isInfinite($[i])
1195	160	12	AbstractUnivariateStatistic.java	test	i	int	0	DEF	weights[$] < 0
1195	160	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	$[i] < 0
1196	164	12	AbstractUnivariateStatistic.java	test	i	int	0	DEF	weights[$] > 0.0
1196	164	12	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	DEF	$
1196	164	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	$[i] > 0.0
1197	169	8	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	DEF	$
1554	197	8	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1554	197	8	AdamsBashforthIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
36533	226	8	AdamsBashforthIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
36534	232	12	AdamsBashforthIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
36535	238	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	i < y0.$.length
36535	238	16	AdamsBashforthIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
36535	238	16	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
1555	248	16	AdamsBashforthIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
36536	260	20	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	j < y0.$.length
36536	260	20	AdamsBashforthIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
36536	260	20	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
1556	271	20	AdamsBashforthIntegrator.java	integrate	interpolatorTmp	NordsieckStepInterpolator	1	DEF	manager.evaluateStep($)
1556	271	20	AdamsBashforthIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolatorTmp)
1557	273	24	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	1	DEF	Math.abs(dt) <= Math.ulp($.stepStart)
1557	273	24	AdamsBashforthIntegrator.java	integrate	dt	double	1	DEF	Math.abs($) <= Math.ulp(stepStart)
1558	312	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	manager.reset($.stepStart, y)
1558	312	12	AdamsBashforthIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1558	312	12	AdamsBashforthIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1558	312	12	AdamsBashforthIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1559	321	12	AdamsBashforthIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1548	215	8	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1548	215	8	AdamsMoultonIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
36529	243	8	AdamsMoultonIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
36530	249	12	AdamsMoultonIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
36531	263	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
36531	263	16	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
36531	263	16	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
1549	272	16	AdamsMoultonIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
36532	279	20	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
36532	279	20	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
36532	279	20	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
1550	289	20	AdamsMoultonIntegrator.java	integrate	interpolatorTmp	NordsieckStepInterpolator	1	DEF	manager.evaluateStep($)
1550	289	20	AdamsMoultonIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolatorTmp)
1551	291	24	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	1	DEF	Math.abs(dt) <= Math.ulp($.stepStart)
1551	291	24	AdamsMoultonIntegrator.java	integrate	dt	double	1	DEF	Math.abs($) <= Math.ulp(stepStart)
1552	330	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	manager.reset($.stepStart, y)
1552	330	12	AdamsMoultonIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1552	330	12	AdamsMoultonIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1552	330	12	AdamsMoultonIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1553	339	12	AdamsMoultonIntegrator.java	integrate	lastStep	boolean	0	DEF	$
36589	167	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ > 0
36590	191	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ < nSteps
36590	191	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	nSteps	int	0	NIL-FOR	i < $
1604	205	12	AdamsNordsieckTransformer.java	getInstance	t	AdamsNordsieckTransformer	0	DEF	$ == null
36591	239	8	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < pData.$.length
36591	239	8	AdamsNordsieckTransformer.java	buildP	i	int	0	NIL-FOR	$ < pData.length
36591	239	8	AdamsNordsieckTransformer.java	buildP	pData	BigFraction[][]	0	NIL-FOR	i < $.length
36592	244	12	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < pI.$.length
36592	244	12	AdamsNordsieckTransformer.java	buildP	j	int	0	NIL-FOR	$ < pI.length
36592	244	12	AdamsNordsieckTransformer.java	buildP	pI	BigFraction[]	0	NIL-FOR	j < $.length
36593	262	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < multistep.$.length
36593	262	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	i	int	0	NIL-FOR	$ < multistep.length
36593	262	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	multistep	double[][]	0	NIL-FOR	i < $.length
36594	264	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < first.$.length
36594	264	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < first.length
36594	264	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	first	double[]	0	NIL-FOR	j < $.length
36595	303	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < data.$.length
36595	303	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	i	int	0	NIL-FOR	$ < data.length
36595	303	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	data	double[][]	0	NIL-FOR	i < $.length
36596	306	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < dataI.$.length
36596	306	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	j	int	0	NIL-FOR	$ < dataI.length
36596	306	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	dataI	double[]	0	NIL-FOR	j < $.length
1587	150	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize < $.minStep
1587	150	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize > $.maxStep
1587	150	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ < minStep
1587	150	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ > maxStep
1588	173	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecAbsoluteTolerance.$.length != y0.$.length
1588	173	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecAbsoluteTolerance != null
1588	173	6	AdaptiveStepsizeIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	vecAbsoluteTolerance.length != $.length
1589	180	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecRelativeTolerance.$.length != y0.$.length
1589	180	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	$.vecRelativeTolerance != null
1589	180	6	AdaptiveStepsizeIntegrator.java	sanityChecks	y0	double[]	0	IntegratorException	vecRelativeTolerance.length != $.length
1590	209	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	RET	$.initialStep > 0
36577	219	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
36577	219	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
36577	219	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
1591	228	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
36578	233	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
36578	233	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
36578	233	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
36579	240	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
36579	240	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
36579	240	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
1592	254	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < $.getMinStep()
1592	254	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ < getMinStep()
1593	257	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h > $.getMaxStep()
1593	257	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ > getMaxStep()
1594	260	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
1595	281	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	IntegratorException	Math.abs(h) < $.minStep
1595	281	6	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	IntegratorException	Math.abs($) < minStep
1596	282	10	AdaptiveStepsizeIntegrator.java	filterStep	acceptSmall	boolean	1	DEF	$
1597	291	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	1	DEF	filteredH > $.maxStep
1597	291	6	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	1	DEF	$ > maxStep
1598	293	13	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	filteredH < -$.maxStep
1598	293	13	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	0	DEF	$ < -maxStep
1200	302	8	AggregateSummaryStatistics.java	aggregate	statistics	Collection<SummaryStatistics>	0	RET	$ == null
1201	306	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	RET	$.hasNext()
36270	316	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	NIL-WHILE	$.hasNext()
1202	318	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMin() < min
1202	318	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	current.getMin() < $
1202	318	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	Double.isNaN($)
1203	321	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMax() > max
1203	321	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	Double.isNaN($)
1203	321	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	current.getMax() > $
1204	333	8	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 0
1205	335	15	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 1
693	126	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	copyArray	boolean	1	DEF	$
694	129	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	d	T[][]	0	NullPointerException	$ == null
695	133	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	DEF	$ == 0
696	138	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	DEF	$ == 0
35662	142	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	NIL-FOR	$ < nRows
35662	142	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	r < $
697	143	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	THIS	Array2DRowFieldMatrix	0	DEF	d[r].length != nCols
697	143	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	DEF	d[$].length != nCols
697	143	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	DEF	d[r].length != $
697	143	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	d	T[][]	0	DEF	$[r].length != nCols
35663	164	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	row	int	0	NIL-FOR	$ < nRows
35663	164	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	row < $
35664	209	8	Array2DRowFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
35664	209	8	Array2DRowFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
35665	213	12	Array2DRowFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
35665	213	12	Array2DRowFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
35666	249	8	Array2DRowFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
35666	249	8	Array2DRowFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
35667	253	12	Array2DRowFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
35667	253	12	Array2DRowFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
35668	290	8	Array2DRowFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
35668	290	8	Array2DRowFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
35669	293	12	Array2DRowFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
35669	293	12	Array2DRowFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
35670	295	16	Array2DRowFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
35670	295	16	Array2DRowFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
698	327	8	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	1	DEF	$.data == null
699	328	12	Array2DRowFieldMatrix.java	setSubMatrix	row	int	0	DEF	$ > 0
700	332	12	Array2DRowFieldMatrix.java	setSubMatrix	column	int	0	DEF	$ > 0
701	337	12	Array2DRowFieldMatrix.java	setSubMatrix	nRows	int	0	DEF	$ == 0
702	343	12	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	DEF	$ == 0
35671	348	12	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	NIL-FOR	i < $.data.$.length
35671	348	12	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
703	349	16	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	DEF	subMatrix[i].length != nCols
703	349	16	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	DEF	subMatrix[$].length != nCols
703	349	16	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	DEF	subMatrix[i].length != $
703	349	16	Array2DRowFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DEF	$[i].length != nCols
704	427	8	Array2DRowFieldMatrix.java	operate	THIS	Array2DRowFieldMatrix	0	DEF	v.$.length != nCols
704	427	8	Array2DRowFieldMatrix.java	operate	nCols	int	0	DEF	v.length != $
704	427	8	Array2DRowFieldMatrix.java	operate	v	T[]	0	DEF	$.length != nCols
35672	432	8	Array2DRowFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
35672	432	8	Array2DRowFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
35673	435	12	Array2DRowFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
35673	435	12	Array2DRowFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
705	450	8	Array2DRowFieldMatrix.java	preMultiply	THIS	Array2DRowFieldMatrix	0	DEF	v.$.length != nRows
705	450	8	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	DEF	v.length != $
705	450	8	Array2DRowFieldMatrix.java	preMultiply	v	T[]	0	DEF	$.length != nRows
35674	456	8	Array2DRowFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
35674	456	8	Array2DRowFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
35675	458	12	Array2DRowFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
35675	458	12	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
35676	475	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
35676	475	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
35677	477	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
35677	477	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
35678	491	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
35678	491	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
35679	493	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
35679	493	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
35680	509	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
35680	509	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
35681	511	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
35681	511	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
35682	527	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
35682	527	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
35683	529	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
35683	529	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
35684	543	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
35684	543	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
35685	544	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
35685	544	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
35686	559	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
35686	559	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
35687	560	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
35687	560	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
35688	576	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
35688	576	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
35689	577	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
35689	577	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
35690	594	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
35690	594	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
35691	595	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
35691	595	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
35692	611	8	Array2DRowFieldMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
35692	611	8	Array2DRowFieldMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
823	135	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	copyArray	boolean	1	DEF	$
824	138	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	NullPointerException	$ == null
825	142	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	DEF	$ == 0
826	147	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	DEF	$ == 0
35972	151	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	NIL-FOR	$ < nRows
35972	151	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	r < $
827	152	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	THIS	Array2DRowRealMatrix	0	DEF	d[r].length != nCols
827	152	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	DEF	d[$].length != nCols
827	152	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	DEF	d[r].length != $
827	152	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	DEF	$[r].length != nCols
35973	172	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	row	int	0	NIL-FOR	$ < nRows
35973	172	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	row < $
35974	217	8	Array2DRowRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
35974	217	8	Array2DRowRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
35975	221	12	Array2DRowRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
35975	221	12	Array2DRowRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
35976	257	8	Array2DRowRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
35976	257	8	Array2DRowRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
35977	261	12	Array2DRowRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
35977	261	12	Array2DRowRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
35978	298	8	Array2DRowRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
35978	298	8	Array2DRowRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
35979	301	12	Array2DRowRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
35979	301	12	Array2DRowRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
35980	303	16	Array2DRowRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
35980	303	16	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
828	335	8	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	1	DEF	$.data == null
829	336	12	Array2DRowRealMatrix.java	setSubMatrix	row	int	0	DEF	$ > 0
830	340	12	Array2DRowRealMatrix.java	setSubMatrix	column	int	0	DEF	$ > 0
831	345	12	Array2DRowRealMatrix.java	setSubMatrix	nRows	int	0	DEF	$ == 0
832	351	12	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	DEF	$ == 0
35981	356	12	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	NIL-FOR	i < $.data.$.length
35981	356	12	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
833	357	16	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	DEF	subMatrix[i].length != nCols
833	357	16	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	DEF	subMatrix[$].length != nCols
833	357	16	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	DEF	subMatrix[i].length != $
833	357	16	Array2DRowRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DEF	$[i].length != nCols
834	435	8	Array2DRowRealMatrix.java	operate	THIS	Array2DRowRealMatrix	0	DEF	v.$.length != nCols
834	435	8	Array2DRowRealMatrix.java	operate	nCols	int	0	DEF	v.length != $
834	435	8	Array2DRowRealMatrix.java	operate	v	double[]	0	DEF	$.length != nCols
35982	440	8	Array2DRowRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
35982	440	8	Array2DRowRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
35983	443	12	Array2DRowRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
35983	443	12	Array2DRowRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
835	458	8	Array2DRowRealMatrix.java	preMultiply	THIS	Array2DRowRealMatrix	0	DEF	v.$.length != nRows
835	458	8	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	DEF	v.length != $
835	458	8	Array2DRowRealMatrix.java	preMultiply	v	double[]	0	DEF	$.length != nRows
35984	464	8	Array2DRowRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
35984	464	8	Array2DRowRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
35985	466	12	Array2DRowRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
35985	466	12	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
35986	483	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
35986	483	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
35987	485	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
35987	485	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
35988	499	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
35988	499	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
35989	501	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
35989	501	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
35990	517	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
35990	517	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
35991	519	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
35991	519	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
35992	535	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
35992	535	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
35993	537	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
35993	537	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
35994	551	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
35994	551	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
35995	552	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
35995	552	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
35996	567	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
35996	567	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
35997	568	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
35997	568	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
35998	584	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
35998	584	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
35999	585	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
35999	585	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
36000	602	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
36000	602	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
36001	603	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
36001	603	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
36002	619	8	Array2DRowRealMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
36002	619	8	Array2DRowRealMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
899	127	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	DEF	d.$.length < pos + size
899	127	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	DEF	$.length < pos + size
899	127	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	DEF	d.length < $ + size
899	127	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	DEF	d.length < pos + $
36072	144	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36072	144	8	ArrayFieldVector.java	ArrayFieldVector	i	int	0	NIL-FOR	$ < data.length
36073	248	12	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36073	248	12	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
36074	259	8	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36074	259	8	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
36075	283	12	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36075	283	12	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
36076	294	8	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36076	294	8	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
36077	314	8	ArrayFieldVector.java	mapAdd	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36077	314	8	ArrayFieldVector.java	mapAdd	i	int	0	NIL-FOR	$ < data.length
36078	322	8	ArrayFieldVector.java	mapAddToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36078	322	8	ArrayFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
36079	331	8	ArrayFieldVector.java	mapSubtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36079	331	8	ArrayFieldVector.java	mapSubtract	i	int	0	NIL-FOR	$ < data.length
36080	339	8	ArrayFieldVector.java	mapSubtractToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36080	339	8	ArrayFieldVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
36081	348	8	ArrayFieldVector.java	mapMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36081	348	8	ArrayFieldVector.java	mapMultiply	i	int	0	NIL-FOR	$ < data.length
36082	356	8	ArrayFieldVector.java	mapMultiplyToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36082	356	8	ArrayFieldVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
36083	365	8	ArrayFieldVector.java	mapDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36083	365	8	ArrayFieldVector.java	mapDivide	i	int	0	NIL-FOR	$ < data.length
36084	373	8	ArrayFieldVector.java	mapDivideToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36084	373	8	ArrayFieldVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
36085	383	8	ArrayFieldVector.java	mapInv	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36085	383	8	ArrayFieldVector.java	mapInv	i	int	0	NIL-FOR	$ < data.length
36086	392	8	ArrayFieldVector.java	mapInvToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36086	392	8	ArrayFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
36087	406	12	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36087	406	12	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
36088	418	8	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36088	418	8	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
36089	443	12	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36089	443	12	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
36090	455	8	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36090	455	8	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
36091	494	12	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36091	494	12	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
36092	506	8	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36092	506	8	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
36093	551	12	ArrayFieldVector.java	outerProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36093	551	12	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
36094	552	16	ArrayFieldVector.java	outerProduct	THIS	ArrayFieldVector	0	NIL-FOR	j < $.data.$.length
36094	552	16	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
36095	577	8	ArrayFieldVector.java	outerProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36095	577	8	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
36096	578	12	ArrayFieldVector.java	outerProduct	THIS	ArrayFieldVector	0	NIL-FOR	j < $.data.$.length
36096	578	12	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
36097	653	16	ArrayFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
36097	653	16	ArrayFieldVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
36097	653	16	ArrayFieldVector.java	setSubVector	v	FieldVector<T>	0	NIL-FOR	i < index + $.getDimension()
900	716	8	ArrayFieldVector.java	checkVectorDimensions	THIS	ArrayFieldVector	0	DEF	$.data.$.length != n
900	716	8	ArrayFieldVector.java	checkVectorDimensions	n	int	0	DEF	data.length != $
901	745	6	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$ == other
901	745	6	ArrayFieldVector.java	equals	other	Object	0	RET	this == $
902	749	6	ArrayFieldVector.java	equals	other	Object	0	RET	$ == null
903	756	10	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data.$.length != rhs.getDimension()
903	756	10	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data.length != $.getDimension()
36098	760	10	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
36098	760	10	ArrayFieldVector.java	equals	i	int	0	NIL-FOR	$ < data.length
904	761	14	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data[i].equals(rhs.getEntry(i))
904	761	14	ArrayFieldVector.java	equals	i	int	0	RET	data[$].equals(rhs.getEntry($))
904	761	14	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data[i].equals($.getEntry(i))
905	795	8	ArrayFieldVector.java	checkIndex	THIS	ArrayFieldVector	0	MatrixIndexException	index >= $.getDimension()
905	795	8	ArrayFieldVector.java	checkIndex	index	int	0	MatrixIndexException	$ >= getDimension()
905	795	8	ArrayFieldVector.java	checkIndex	index	int	0	MatrixIndexException	$ < 0
556	102	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullPointerException	$ == null
557	105	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	DEF	d.$.length == 0
557	105	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	DEF	$.length == 0
558	118	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	DEF	d.$.length < pos + size
558	118	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	DEF	$.length < pos + size
558	118	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	DEF	d.length < $ + size
558	118	8	ArrayRealVector.java	ArrayRealVector	size	int	0	DEF	d.length < pos + $
35418	132	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < d.$.length
35418	132	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < d.length
35418	132	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NIL-FOR	i < $.length
559	144	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	DEF	d.$.length < pos + size
559	144	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	DEF	$.length < pos + size
559	144	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	DEF	d.length < $ + size
559	144	8	ArrayRealVector.java	ArrayRealVector	size	int	0	DEF	d.length < pos + $
35419	149	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < pos + size
35419	149	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NIL-FOR	i < $ + size
35419	149	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NIL-FOR	i < pos + $
35420	160	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35420	160	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < data.length
35421	203	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l2
35421	203	8	ArrayRealVector.java	ArrayRealVector	l2	int	0	NIL-FOR	i < $
35422	217	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l1
35422	217	8	ArrayRealVector.java	ArrayRealVector	l1	int	0	NIL-FOR	i < $
560	272	8	ArrayRealVector.java	add	v	RealVector	1	RET	$ instanceof ArrayRealVector
35423	279	12	ArrayRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
35423	279	12	ArrayRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
35423	279	12	ArrayRealVector.java	add	e	Entry	0	NIL-WHILE	($ = it.next()) != null
35424	292	8	ArrayRealVector.java	add	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35424	292	8	ArrayRealVector.java	add	i	int	0	NIL-FOR	$ < data.length
561	313	8	ArrayRealVector.java	subtract	v	RealVector	1	RET	$ instanceof ArrayRealVector
35425	320	12	ArrayRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
35425	320	12	ArrayRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
35425	320	12	ArrayRealVector.java	subtract	e	Entry	0	NIL-WHILE	($ = it.next()) != null
35426	333	8	ArrayRealVector.java	subtract	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35426	333	8	ArrayRealVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
35427	353	8	ArrayRealVector.java	mapAddToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35427	353	8	ArrayRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
35428	362	8	ArrayRealVector.java	mapSubtractToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35428	362	8	ArrayRealVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
35429	371	8	ArrayRealVector.java	mapMultiplyToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35429	371	8	ArrayRealVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
35430	380	8	ArrayRealVector.java	mapDivideToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35430	380	8	ArrayRealVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
35431	389	8	ArrayRealVector.java	mapPowToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35431	389	8	ArrayRealVector.java	mapPowToSelf	i	int	0	NIL-FOR	$ < data.length
35432	398	8	ArrayRealVector.java	mapExpToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35432	398	8	ArrayRealVector.java	mapExpToSelf	i	int	0	NIL-FOR	$ < data.length
35433	407	8	ArrayRealVector.java	mapExpm1ToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35433	407	8	ArrayRealVector.java	mapExpm1ToSelf	i	int	0	NIL-FOR	$ < data.length
35434	416	8	ArrayRealVector.java	mapLogToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35434	416	8	ArrayRealVector.java	mapLogToSelf	i	int	0	NIL-FOR	$ < data.length
35435	425	8	ArrayRealVector.java	mapLog10ToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35435	425	8	ArrayRealVector.java	mapLog10ToSelf	i	int	0	NIL-FOR	$ < data.length
35436	434	8	ArrayRealVector.java	mapLog1pToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35436	434	8	ArrayRealVector.java	mapLog1pToSelf	i	int	0	NIL-FOR	$ < data.length
35437	443	8	ArrayRealVector.java	mapCoshToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35437	443	8	ArrayRealVector.java	mapCoshToSelf	i	int	0	NIL-FOR	$ < data.length
35438	452	8	ArrayRealVector.java	mapSinhToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35438	452	8	ArrayRealVector.java	mapSinhToSelf	i	int	0	NIL-FOR	$ < data.length
35439	461	8	ArrayRealVector.java	mapTanhToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35439	461	8	ArrayRealVector.java	mapTanhToSelf	i	int	0	NIL-FOR	$ < data.length
35440	470	8	ArrayRealVector.java	mapCosToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35440	470	8	ArrayRealVector.java	mapCosToSelf	i	int	0	NIL-FOR	$ < data.length
35441	479	8	ArrayRealVector.java	mapSinToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35441	479	8	ArrayRealVector.java	mapSinToSelf	i	int	0	NIL-FOR	$ < data.length
35442	488	8	ArrayRealVector.java	mapTanToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35442	488	8	ArrayRealVector.java	mapTanToSelf	i	int	0	NIL-FOR	$ < data.length
35443	497	8	ArrayRealVector.java	mapAcosToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35443	497	8	ArrayRealVector.java	mapAcosToSelf	i	int	0	NIL-FOR	$ < data.length
35444	506	8	ArrayRealVector.java	mapAsinToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35444	506	8	ArrayRealVector.java	mapAsinToSelf	i	int	0	NIL-FOR	$ < data.length
35445	515	8	ArrayRealVector.java	mapAtanToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35445	515	8	ArrayRealVector.java	mapAtanToSelf	i	int	0	NIL-FOR	$ < data.length
35446	524	8	ArrayRealVector.java	mapInvToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35446	524	8	ArrayRealVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
35447	533	8	ArrayRealVector.java	mapAbsToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35447	533	8	ArrayRealVector.java	mapAbsToSelf	i	int	0	NIL-FOR	$ < data.length
35448	542	8	ArrayRealVector.java	mapSqrtToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35448	542	8	ArrayRealVector.java	mapSqrtToSelf	i	int	0	NIL-FOR	$ < data.length
35449	551	8	ArrayRealVector.java	mapCbrtToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35449	551	8	ArrayRealVector.java	mapCbrtToSelf	i	int	0	NIL-FOR	$ < data.length
35450	560	8	ArrayRealVector.java	mapCeilToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35450	560	8	ArrayRealVector.java	mapCeilToSelf	i	int	0	NIL-FOR	$ < data.length
35451	569	8	ArrayRealVector.java	mapFloorToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35451	569	8	ArrayRealVector.java	mapFloorToSelf	i	int	0	NIL-FOR	$ < data.length
35452	578	8	ArrayRealVector.java	mapRintToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35452	578	8	ArrayRealVector.java	mapRintToSelf	i	int	0	NIL-FOR	$ < data.length
35453	587	8	ArrayRealVector.java	mapSignumToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35453	587	8	ArrayRealVector.java	mapSignumToSelf	i	int	0	NIL-FOR	$ < data.length
35454	596	8	ArrayRealVector.java	mapUlpToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35454	596	8	ArrayRealVector.java	mapUlpToSelf	i	int	0	NIL-FOR	$ < data.length
562	605	8	ArrayRealVector.java	ebeMultiply	v	RealVector	1	RET	$ instanceof ArrayRealVector
35455	610	12	ArrayRealVector.java	ebeMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35455	610	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
35456	623	8	ArrayRealVector.java	ebeMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35456	623	8	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
563	643	8	ArrayRealVector.java	ebeDivide	v	RealVector	1	RET	$ instanceof ArrayRealVector
35457	648	12	ArrayRealVector.java	ebeDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35457	648	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
35458	661	8	ArrayRealVector.java	ebeDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35458	661	8	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
564	697	8	ArrayRealVector.java	dotProduct	v	RealVector	1	RET	$ instanceof ArrayRealVector
35459	704	12	ArrayRealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	(e = $.next()) != null
35459	704	12	ArrayRealVector.java	dotProduct	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
35459	704	12	ArrayRealVector.java	dotProduct	e	Entry	0	NIL-WHILE	($ = it.next()) != null
35460	717	8	ArrayRealVector.java	dotProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35460	717	8	ArrayRealVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
565	768	8	ArrayRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
35461	773	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35461	773	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
35462	787	8	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35462	787	8	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
566	816	8	ArrayRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof ArrayRealVector
35463	821	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35463	821	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
35464	835	8	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35464	835	8	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
567	864	8	ArrayRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
35465	869	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35465	869	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
35466	883	8	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35466	883	8	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
568	912	8	ArrayRealVector.java	unitVector	norm	double	0	DEF	$ == 0
569	922	8	ArrayRealVector.java	unitize	norm	double	0	DEF	$ == 0
570	952	8	ArrayRealVector.java	outerProduct	v	RealVector	1	RET	$ instanceof ArrayRealVector
35467	958	12	ArrayRealVector.java	outerProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35467	958	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
35468	959	16	ArrayRealVector.java	outerProduct	THIS	ArrayRealVector	0	NIL-FOR	j < $.data.$.length
35468	959	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
35469	985	8	ArrayRealVector.java	outerProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35469	985	8	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < data.length
35470	986	12	ArrayRealVector.java	outerProduct	THIS	ArrayRealVector	0	NIL-FOR	j < $.data.$.length
35470	986	12	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < data.length
35471	1062	16	ArrayRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
35471	1062	16	ArrayRealVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
35471	1062	16	ArrayRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < index + $.getDimension()
571	1136	8	ArrayRealVector.java	checkVectorDimensions	THIS	ArrayRealVector	0	DEF	$.data.$.length != n
571	1136	8	ArrayRealVector.java	checkVectorDimensions	n	int	0	DEF	data.length != $
572	1149	12	ArrayRealVector.java	isNaN	THIS	ArrayRealVector	0	RET	Double.isNaN($.v)
573	1164	8	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	$.isNaN()
574	1169	12	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	Double.isInfinite($.v)
575	1200	6	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$ == other
575	1200	6	ArrayRealVector.java	equals	other	Object	0	RET	this == $
576	1204	6	ArrayRealVector.java	equals	other	Object	0	RET	$ == null
576	1204	6	ArrayRealVector.java	equals	other	Object	0	RET	$ instanceof RealVector
577	1210	6	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data.$.length != rhs.getDimension()
577	1210	6	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data.length != $.getDimension()
578	1214	6	ArrayRealVector.java	equals	rhs	RealVector	0	RET	$.isNaN()
35472	1218	6	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
35472	1218	6	ArrayRealVector.java	equals	i	int	0	NIL-FOR	$ < data.length
579	1219	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data[i] != rhs.getEntry(i)
579	1219	8	ArrayRealVector.java	equals	i	int	0	RET	data[$] != rhs.getEntry($)
579	1219	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data[i] != $.getEntry(i)
580	1233	8	ArrayRealVector.java	hashCode	THIS	ArrayRealVector	0	RET	$.isNaN()
1434	121	8	Beta.java	regularizedBeta	x	double	1	DEF	$ > 1
1434	121	8	Beta.java	regularizedBeta	x	double	1	DEF	$ < 0
1434	121	8	Beta.java	regularizedBeta	x	double	1	DEF	Double.isNaN($)
1434	121	8	Beta.java	regularizedBeta	a	double	1	DEF	$ <= 0.0
1434	121	8	Beta.java	regularizedBeta	a	double	1	DEF	Double.isNaN($)
1434	121	8	Beta.java	regularizedBeta	b	double	1	DEF	Double.isNaN($)
1434	121	8	Beta.java	regularizedBeta	b	double	1	DEF	$ <= 0.0
1435	125	15	Beta.java	regularizedBeta	x	double	1	DEF	$ > (a + 1.0) / (a + b + 2.0)
1435	125	15	Beta.java	regularizedBeta	a	double	1	DEF	x > ($ + 1.0) / ($ + b + 2.0)
1435	125	15	Beta.java	regularizedBeta	b	double	1	DEF	x > (a + 1.0) / (a + $ + 2.0)
1436	192	8	Beta.java	logBeta	a	double	1	DEF	Double.isNaN($)
1436	192	8	Beta.java	logBeta	a	double	1	DEF	$ <= 0.0
1436	192	8	Beta.java	logBeta	b	double	1	DEF	$ <= 0.0
1436	192	8	Beta.java	logBeta	b	double	1	DEF	Double.isNaN($)
488	89	8	BetaDistributionImpl.java	recomputeZ	THIS	BetaDistributionImpl	0	DEF	Double.isNaN($.z)
489	97	8	BetaDistributionImpl.java	density	x	Double	1	RET	$ > 1
489	97	8	BetaDistributionImpl.java	density	x	Double	1	RET	$ < 0
490	99	15	BetaDistributionImpl.java	density	x	Double	1	MathException:RET	$ == 0
491	100	12	BetaDistributionImpl.java	density	THIS	BetaDistributionImpl	0	MathException	$.alpha < 1
492	104	15	BetaDistributionImpl.java	density	x	Double	1	MathException:RET	$ == 1
493	105	12	BetaDistributionImpl.java	density	THIS	BetaDistributionImpl	0	MathException	$.beta < 1
494	119	8	BetaDistributionImpl.java	inverseCumulativeProbability	p	double	1	RET	$ == 0
495	121	15	BetaDistributionImpl.java	inverseCumulativeProbability	p	double	1	RET	$ == 1
496	148	8	BetaDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ <= 0
497	150	15	BetaDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ >= 1
756	73	8	BiDiagonalTransformer.java	BiDiagonalTransformer	m	int	1	DEF	$ >= n
756	73	8	BiDiagonalTransformer.java	BiDiagonalTransformer	n	int	1	DEF	m >= $
757	88	8	BiDiagonalTransformer.java	getU	THIS	BiDiagonalTransformer	0	DEF	$.cachedU == null
35786	98	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= p
35786	98	12	BiDiagonalTransformer.java	getU	p	int	0	NIL-FOR	k >= $
35787	103	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= diagOffset
35787	103	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	NIL-FOR	k >= $
758	106	16	BiDiagonalTransformer.java	getU	hK	double[]	0	DEF	$[k - diagOffset] != 0.0
758	106	16	BiDiagonalTransformer.java	getU	k	int	0	DEF	hK[$ - diagOffset] != 0.0
758	106	16	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	hK[k - $] != 0.0
35788	107	20	BiDiagonalTransformer.java	getU	j	int	0	NIL-FOR	$ < m
35788	107	20	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	j < $
35789	109	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
35789	109	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
35790	114	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
35790	114	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
759	120	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	$ > 0
760	137	8	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	$.cachedB == null
35791	142	12	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	NIL-FOR	i < $.main.$.length
35791	142	12	BiDiagonalTransformer.java	getB	i	int	0	NIL-FOR	$ < main.length
761	144	16	BiDiagonalTransformer.java	getB	m	int	1	DEF	$ < n
761	144	16	BiDiagonalTransformer.java	getB	n	int	1	DEF	m < $
762	145	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ > 0
763	149	20	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	i < $.main.$.length - 1
763	149	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ < main.length - 1
764	169	8	BiDiagonalTransformer.java	getV	THIS	BiDiagonalTransformer	0	DEF	$.cachedV == null
35792	179	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= p
35792	179	12	BiDiagonalTransformer.java	getV	p	int	0	NIL-FOR	k >= $
35793	184	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= diagOffset
35793	184	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	NIL-FOR	k >= $
765	187	16	BiDiagonalTransformer.java	getV	hK	double[]	0	DEF	$[k] != 0.0
765	187	16	BiDiagonalTransformer.java	getV	k	int	0	DEF	hK[$] != 0.0
35794	188	20	BiDiagonalTransformer.java	getV	j	int	0	NIL-FOR	$ < n
35794	188	20	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	j < $
35795	190	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
35795	190	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
35796	195	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
35796	195	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
766	201	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	DEF	$ > 0
35797	259	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	NIL-FOR	$ < n
35797	259	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	k < $
35798	263	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
35798	263	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
767	270	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	a	double	0	DEF	$ != 0.0
35799	272	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
35799	272	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
35800	274	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
35800	274	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
35801	279	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
35801	279	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
768	286	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	DEF	$ < n - 1
768	286	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	DEF	k < $ - 1
35802	289	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
35802	289	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
769	295	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	b	double	0	DEF	$ != 0.0
35803	297	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
35803	297	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
35804	300	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
35804	300	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
35805	304	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
35805	304	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
35806	323	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	NIL-FOR	$ < m
35806	323	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	k < $
35807	328	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
35807	328	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
770	334	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	a	double	0	DEF	$ != 0.0
35808	336	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
35808	336	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
35809	339	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
35809	339	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
35810	343	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
35810	343	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
771	349	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	DEF	$ < m - 1
771	349	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	DEF	k < $ - 1
35811	353	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
35811	353	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
772	359	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	b	double	0	DEF	$ != 0.0
35812	361	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
35812	361	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
35813	363	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
35813	363	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
35814	368	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
35814	368	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
309	125	8	BigFraction.java	BigFraction	num	BigInteger	0	DEF	$ == null
310	128	8	BigFraction.java	BigFraction	den	BigInteger	0	DEF	$ == null
311	131	8	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.equals($)
312	134	8	BigFraction.java	BigFraction	num	BigInteger	1	DEF	BigInteger.ZERO.equals($)
313	141	12	BigFraction.java	BigFraction	gcd	BigInteger	0	DEF	BigInteger.ONE.compareTo($) < 0
314	147	12	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.compareTo($) > 0
315	181	8	BigFraction.java	BigFraction	value	double	0	DEF	Double.isNaN($)
316	184	8	BigFraction.java	BigFraction	value	double	0	DEF	Double.isInfinite($)
317	193	8	BigFraction.java	BigFraction	exponent	long	0	DEF	$ != 0
318	197	8	BigFraction.java	BigFraction	sign	long	0	DEF	$ != 0
35265	201	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x001ffffffffffffeL) != 0
35265	201	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x1) == 0
319	206	8	BigFraction.java	BigFraction	k	int	1	DEF	$ < 0
320	283	8	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	a0 > $
320	283	8	BigFraction.java	BigFraction	a0	long	0	FractionConversionException	$ > overflow
321	289	8	BigFraction.java	BigFraction	a0	long	0	RET	Math.abs($ - value) < epsilon
321	289	8	BigFraction.java	BigFraction	value	double	0	RET	Math.abs(a0 - $) < epsilon
321	289	8	BigFraction.java	BigFraction	epsilon	double	0	RET	Math.abs(a0 - value) < $
35266	305	8	BigFraction.java	BigFraction	stop	boolean	0	NIL-DOWHILE	$
322	311	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	q2 > $
322	311	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	p2 > $
322	311	12	BigFraction.java	BigFraction	p2	long	0	FractionConversionException	$ > overflow
322	311	12	BigFraction.java	BigFraction	q2	long	0	FractionConversionException	$ > overflow
323	316	12	BigFraction.java	BigFraction	convergent	double	1	DEF	Math.abs($ - value) > epsilon
323	316	12	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
323	316	12	BigFraction.java	BigFraction	n	int	1	DEF	$ < maxIterations
323	316	12	BigFraction.java	BigFraction	value	double	1	DEF	Math.abs(convergent - $) > epsilon
323	316	12	BigFraction.java	BigFraction	epsilon	double	1	DEF	Math.abs(convergent - value) > $
323	316	12	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
323	316	12	BigFraction.java	BigFraction	maxIterations	int	1	DEF	n < $
324	330	8	BigFraction.java	BigFraction	n	int	0	FractionConversionException	$ >= maxIterations
324	330	8	BigFraction.java	BigFraction	maxIterations	int	0	FractionConversionException	n >= $
325	334	8	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
325	334	8	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
326	441	8	BigFraction.java	getReducedFraction	numerator	int	0	RET	$ == 0
327	516	8	BigFraction.java	add	fraction	BigFraction	0	RET	ZERO.equals($)
328	523	8	BigFraction.java	add	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
328	523	8	BigFraction.java	add	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
329	621	8	BigFraction.java	divide	bg	BigInteger	0	DEF	BigInteger.ZERO.equals($)
330	674	8	BigFraction.java	divide	THIS	BigFraction	0	DEF	BigInteger.ZERO.equals(fraction.$.numerator)
330	674	8	BigFraction.java	divide	fraction	BigFraction	0	DEF	BigInteger.ZERO.equals($.numerator)
331	714	8	BigFraction.java	equals	THIS	BigFraction	1	DEF	$ == other
331	714	8	BigFraction.java	equals	other	Object	1	DEF	this == $
332	716	15	BigFraction.java	equals	other	Object	0	DEF	$ instanceof BigFraction
333	903	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	fraction.$.numerator.equals(BigInteger.ZERO)
333	903	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
333	903	8	BigFraction.java	multiply	fraction	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
334	947	8	BigFraction.java	pow	exponent	int	0	RET	$ < 0
335	964	8	BigFraction.java	pow	exponent	long	0	RET	$ < 0
336	983	8	BigFraction.java	pow	exponent	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
337	1091	8	BigFraction.java	subtract	fraction	BigFraction	0	RET	ZERO.equals($)
338	1097	8	BigFraction.java	subtract	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
338	1097	8	BigFraction.java	subtract	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
339	1120	8	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ONE.equals($.denominator)
340	1122	15	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ZERO.equals($.numerator)
341	168	8	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigFraction
342	170	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigInteger
343	172	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
344	194	8	BigFractionFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
345	218	8	BigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
346	251	8	BigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
35267	274	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	$ < source.length()
35267	274	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	Character.isDigit(source.charAt($))
35267	274	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	end < $.length()
35267	274	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	Character.isDigit($.charAt(end))
589	104	8	BigMatrixImpl.java	BigMatrixImpl	rowDimension	int	0	DEF	$ <= 0
590	109	8	BigMatrixImpl.java	BigMatrixImpl	columnDimension	int	0	DEF	$ <= 0
591	151	8	BigMatrixImpl.java	BigMatrixImpl	copyArray	boolean	1	DEF	$
592	154	12	BigMatrixImpl.java	BigMatrixImpl	d	BigDecimal[][]	0	NullPointerException	$ == null
593	158	12	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	DEF	$ == 0
594	163	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	$ == 0
35487	166	12	BigMatrixImpl.java	BigMatrixImpl	r	int	0	NIL-FOR	$ < nRows
35487	166	12	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	r < $
595	167	16	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	DEF	d[r].length != nCols
595	167	16	BigMatrixImpl.java	BigMatrixImpl	r	int	0	DEF	d[$].length != nCols
595	167	16	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	d[r].length != $
595	167	16	BigMatrixImpl.java	BigMatrixImpl	d	BigDecimal[][]	0	DEF	$[r].length != nCols
596	191	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	DEF	$ == 0
597	196	8	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	$ == 0
35488	199	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
35488	199	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
598	200	12	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	DEF	d[row].length != nCols
598	200	12	BigMatrixImpl.java	BigMatrixImpl	row	int	0	DEF	d[$].length != nCols
598	200	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	d[row].length != $
598	200	12	BigMatrixImpl.java	BigMatrixImpl	d	double[][]	0	DEF	$[row].length != nCols
599	221	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	DEF	$ == 0
600	226	8	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	$ == 0
35489	229	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
35489	229	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
601	230	12	BigMatrixImpl.java	BigMatrixImpl	THIS	BigMatrixImpl	0	DEF	d[row].length != nCols
601	230	12	BigMatrixImpl.java	BigMatrixImpl	row	int	0	DEF	d[$].length != nCols
601	230	12	BigMatrixImpl.java	BigMatrixImpl	nCols	int	0	DEF	d[row].length != $
601	230	12	BigMatrixImpl.java	BigMatrixImpl	d	String[][]	0	DEF	$[row].length != nCols
35490	252	8	BigMatrixImpl.java	BigMatrixImpl	row	int	0	NIL-FOR	$ < nRows
35490	252	8	BigMatrixImpl.java	BigMatrixImpl	nRows	int	0	NIL-FOR	row < $
35491	284	12	BigMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
35491	284	12	BigMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
35492	287	16	BigMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
35492	287	16	BigMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
35493	310	8	BigMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
35493	310	8	BigMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
35494	314	12	BigMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
35494	314	12	BigMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
35495	339	12	BigMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
35495	339	12	BigMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
35496	342	16	BigMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
35496	342	16	BigMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
35497	365	8	BigMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
35497	365	8	BigMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
35498	369	12	BigMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
35498	369	12	BigMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
35499	386	8	BigMatrixImpl.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
35499	386	8	BigMatrixImpl.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
35500	389	12	BigMatrixImpl.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
35500	389	12	BigMatrixImpl.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
35501	405	8	BigMatrixImpl.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
35501	405	8	BigMatrixImpl.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
35502	408	12	BigMatrixImpl.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
35502	408	12	BigMatrixImpl.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
35503	434	12	BigMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
35503	434	12	BigMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
35504	437	16	BigMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
35504	437	16	BigMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
35505	439	20	BigMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
35505	439	20	BigMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
35506	465	8	BigMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
35506	465	8	BigMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
35507	468	12	BigMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
35507	468	12	BigMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
35508	470	16	BigMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
35508	470	16	BigMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
35509	513	8	BigMatrixImpl.java	getDataAsDoubleArray	i	int	0	NIL-FOR	$ < nRows
35509	513	8	BigMatrixImpl.java	getDataAsDoubleArray	nRows	int	0	NIL-FOR	i < $
35510	514	12	BigMatrixImpl.java	getDataAsDoubleArray	j	int	0	NIL-FOR	$ < nCols
35510	514	12	BigMatrixImpl.java	getDataAsDoubleArray	nCols	int	0	NIL-FOR	j < $
35511	578	8	BigMatrixImpl.java	getNorm	THIS	BigMatrixImpl	0	NIL-FOR	col < $.getColumnDimension()
35511	578	8	BigMatrixImpl.java	getNorm	col	int	0	NIL-FOR	$ < this.getColumnDimension()
35512	580	12	BigMatrixImpl.java	getNorm	THIS	BigMatrixImpl	0	NIL-FOR	row < $.getRowDimension()
35512	580	12	BigMatrixImpl.java	getNorm	row	int	0	NIL-FOR	$ < this.getRowDimension()
602	606	8	BigMatrixImpl.java	getSubMatrix	startRow	int	0	MatrixIndexException	$ > endRow
602	606	8	BigMatrixImpl.java	getSubMatrix	endRow	int	0	MatrixIndexException	startRow > $
603	613	8	BigMatrixImpl.java	getSubMatrix	startColumn	int	0	MatrixIndexException	$ > endColumn
603	613	8	BigMatrixImpl.java	getSubMatrix	endColumn	int	0	MatrixIndexException	startColumn > $
35513	620	8	BigMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
35513	620	8	BigMatrixImpl.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
604	644	8	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
604	644	8	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
604	644	8	BigMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
605	645	12	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	MatrixIndexException	selectedRows.$.length == 0
605	645	12	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	MatrixIndexException	$.length == 0
35514	654	12	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	NIL-FOR	i < selectedRows.$.length
35514	654	12	BigMatrixImpl.java	getSubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
35514	654	12	BigMatrixImpl.java	getSubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
35515	657	16	BigMatrixImpl.java	getSubMatrix	THIS	BigMatrixImpl	0	NIL-FOR	j < selectedColumns.$.length
35515	657	16	BigMatrixImpl.java	getSubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
35515	657	16	BigMatrixImpl.java	getSubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
606	705	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	DEF	$ == 0
607	710	8	BigMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	$ == 0
35516	714	8	BigMatrixImpl.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
35516	714	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
608	715	12	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	0	DEF	subMatrix[r].length != nCols
608	715	12	BigMatrixImpl.java	setSubMatrix	r	int	0	DEF	subMatrix[$].length != nCols
608	715	12	BigMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	subMatrix[r].length != $
608	715	12	BigMatrixImpl.java	setSubMatrix	subMatrix	BigDecimal[][]	0	DEF	$[r].length != nCols
609	722	8	BigMatrixImpl.java	setSubMatrix	THIS	BigMatrixImpl	1	DEF	$.data == null
610	723	12	BigMatrixImpl.java	setSubMatrix	row	int	0	DEF	$ > 0
611	728	12	BigMatrixImpl.java	setSubMatrix	column	int	0	DEF	$ > 0
35517	741	8	BigMatrixImpl.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
35517	741	8	BigMatrixImpl.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
35518	777	8	BigMatrixImpl.java	getColumnMatrix	row	int	0	NIL-FOR	$ < nRows
35518	777	8	BigMatrixImpl.java	getColumnMatrix	nRows	int	0	NIL-FOR	row < $
35519	816	8	BigMatrixImpl.java	getRowAsDoubleArray	i	int	0	NIL-FOR	$<ncols
35519	816	8	BigMatrixImpl.java	getRowAsDoubleArray	ncols	int	0	NIL-FOR	i<$
35520	836	8	BigMatrixImpl.java	getColumn	i	int	0	NIL-FOR	$ < nRows
35520	836	8	BigMatrixImpl.java	getColumn	nRows	int	0	NIL-FOR	i < $
35521	857	8	BigMatrixImpl.java	getColumnAsDoubleArray	i	int	0	NIL-FOR	$<nrows
35521	857	8	BigMatrixImpl.java	getColumnAsDoubleArray	nrows	int	0	NIL-FOR	i<$
35522	918	8	BigMatrixImpl.java	transpose	row	int	0	NIL-FOR	$ < nRows
35522	918	8	BigMatrixImpl.java	transpose	nRows	int	0	NIL-FOR	row < $
35523	920	12	BigMatrixImpl.java	transpose	col	int	0	NIL-FOR	$ < nCols
35523	920	12	BigMatrixImpl.java	transpose	nCols	int	0	NIL-FOR	col < $
612	944	8	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	0	NonSquareMatrixException	$.isSquare()
613	947	8	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	1	RET	$.isSingular()
35524	951	12	BigMatrixImpl.java	getDeterminant	THIS	BigMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
35524	951	12	BigMatrixImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < getRowDimension()
614	971	8	BigMatrixImpl.java	isSingular	THIS	BigMatrixImpl	1	RET	$.lu == null
615	1010	8	BigMatrixImpl.java	getTrace	THIS	BigMatrixImpl	0	NonSquareMatrixException	$.isSquare()
35525	1014	8	BigMatrixImpl.java	getTrace	THIS	BigMatrixImpl	0	NIL-FOR	i < $.getRowDimension()
35525	1014	8	BigMatrixImpl.java	getTrace	i	int	0	NIL-FOR	$ < this.getRowDimension()
616	1028	8	BigMatrixImpl.java	operate	THIS	BigMatrixImpl	0	DEF	v.$.length != $.getColumnDimension()
616	1028	8	BigMatrixImpl.java	operate	v	BigDecimal[]	0	DEF	$.length != getColumnDimension()
35526	1036	8	BigMatrixImpl.java	operate	row	int	0	NIL-FOR	$ < nRows
35526	1036	8	BigMatrixImpl.java	operate	nRows	int	0	NIL-FOR	row < $
35527	1038	12	BigMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < nCols
35527	1038	12	BigMatrixImpl.java	operate	nCols	int	0	NIL-FOR	i < $
35528	1055	8	BigMatrixImpl.java	operate	THIS	BigMatrixImpl	0	NIL-FOR	i < bd.$.length
35528	1055	8	BigMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < bd.length
35528	1055	8	BigMatrixImpl.java	operate	bd	BigDecimal[]	0	NIL-FOR	i < $.length
617	1070	8	BigMatrixImpl.java	preMultiply	THIS	BigMatrixImpl	0	DEF	v.$.length != nRows
617	1070	8	BigMatrixImpl.java	preMultiply	nRows	int	0	DEF	v.length != $
617	1070	8	BigMatrixImpl.java	preMultiply	v	BigDecimal[]	0	DEF	$.length != nRows
35529	1077	8	BigMatrixImpl.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
35529	1077	8	BigMatrixImpl.java	preMultiply	nCols	int	0	NIL-FOR	col < $
35530	1079	12	BigMatrixImpl.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
35530	1079	12	BigMatrixImpl.java	preMultiply	nRows	int	0	NIL-FOR	i < $
618	1100	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	DEF	b.$.length != nRows
618	1100	8	BigMatrixImpl.java	solve	nRows	int	0	DEF	b.length != $
618	1100	8	BigMatrixImpl.java	solve	b	BigDecimal[]	0	DEF	$.length != nRows
35531	1108	8	BigMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRows
35531	1108	8	BigMatrixImpl.java	solve	nRows	int	0	NIL-FOR	row < $
35532	1127	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	NIL-FOR	i < bd.$.length
35532	1127	8	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < bd.length
35532	1127	8	BigMatrixImpl.java	solve	bd	BigDecimal[]	0	NIL-FOR	i < $.length
619	1145	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	DEF	b.getRowDimension() != $.getRowDimension()
619	1145	8	BigMatrixImpl.java	solve	b	BigMatrix	0	DEF	$.getRowDimension() != getRowDimension()
620	1150	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	NonSquareMatrixException	$.isSquare()
621	1153	8	BigMatrixImpl.java	solve	THIS	BigMatrixImpl	0	SingularMatrixException	$.isSingular()
35533	1163	8	BigMatrixImpl.java	solve	row	int	0	NIL-FOR	$ < nRowB
35533	1163	8	BigMatrixImpl.java	solve	nRowB	int	0	NIL-FOR	row < $
35534	1165	12	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nColB
35534	1165	12	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	col < $
35535	1171	8	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ < nCol
35535	1171	8	BigMatrixImpl.java	solve	nCol	int	0	NIL-FOR	col < $
35536	1172	12	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < nCol
35536	1172	12	BigMatrixImpl.java	solve	nCol	int	0	NIL-FOR	i < $
35537	1175	16	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
35537	1175	16	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
35538	1182	8	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	$ >= 0
35539	1185	12	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
35539	1185	12	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
35540	1188	12	BigMatrixImpl.java	solve	i	int	0	NIL-FOR	$ < col
35540	1188	12	BigMatrixImpl.java	solve	col	int	0	NIL-FOR	i < $
35541	1191	16	BigMatrixImpl.java	solve	j	int	0	NIL-FOR	$ < nColB
35541	1191	16	BigMatrixImpl.java	solve	nColB	int	0	NIL-FOR	j < $
622	1223	8	BigMatrixImpl.java	luDecompose	nRows	int	0	NonSquareMatrixException	$ != nCols
622	1223	8	BigMatrixImpl.java	luDecompose	nCols	int	0	NonSquareMatrixException	nRows != $
35542	1230	8	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
35542	1230	8	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
35543	1236	8	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	$ < nCols
35543	1236	8	BigMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	col < $
35544	1241	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < col
35544	1241	12	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	row < $
35545	1244	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < row
35545	1244	16	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	i < $
35546	1253	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
35546	1253	12	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
35547	1256	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < col
35547	1256	16	BigMatrixImpl.java	luDecompose	col	int	0	NIL-FOR	i < $
623	1262	16	BigMatrixImpl.java	luDecompose	sum	BigDecimal	0	DEF	$.abs().compareTo(largest) == 1
623	1262	16	BigMatrixImpl.java	luDecompose	largest	BigDecimal	0	DEF	sum.abs().compareTo($) == 1
624	1269	12	BigMatrixImpl.java	luDecompose	THIS	BigMatrixImpl	0	SingularMatrixException	$.lu[max][col].abs().compareTo(TOO_SMALL) <= 0
624	1269	12	BigMatrixImpl.java	luDecompose	max	int	0	SingularMatrixException	lu[$][col].abs().compareTo(TOO_SMALL) <= 0
624	1269	12	BigMatrixImpl.java	luDecompose	col	int	0	SingularMatrixException	lu[max][$].abs().compareTo(TOO_SMALL) <= 0
625	1275	12	BigMatrixImpl.java	luDecompose	max	int	0	DEF	$ != col
625	1275	12	BigMatrixImpl.java	luDecompose	col	int	0	DEF	max != $
35548	1277	16	BigMatrixImpl.java	luDecompose	i	int	0	NIL-FOR	$ < nCols
35548	1277	16	BigMatrixImpl.java	luDecompose	nCols	int	0	NIL-FOR	i < $
35549	1290	12	BigMatrixImpl.java	luDecompose	row	int	0	NIL-FOR	$ < nRows
35549	1290	12	BigMatrixImpl.java	luDecompose	nRows	int	0	NIL-FOR	row < $
626	1307	8	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	DEF	$.data != null
35550	1308	12	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	NIL-FOR	i < $.data.$.length
35550	1308	12	BigMatrixImpl.java	toString	i	int	0	NIL-FOR	$ < data.length
627	1309	16	BigMatrixImpl.java	toString	i	int	0	DEF	$ > 0
35551	1313	16	BigMatrixImpl.java	toString	THIS	BigMatrixImpl	0	NIL-FOR	j < $.data[0].length
35551	1313	16	BigMatrixImpl.java	toString	j	int	0	NIL-FOR	$ < data[0].length
628	1314	20	BigMatrixImpl.java	toString	j	int	0	DEF	$ > 0
629	1337	8	BigMatrixImpl.java	equals	THIS	BigMatrixImpl	0	RET	object == $
629	1337	8	BigMatrixImpl.java	equals	object	Object	0	RET	$ == this
630	1340	8	BigMatrixImpl.java	equals	object	Object	0	RET	$ instanceof BigMatrixImpl == false
631	1346	8	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	$.getRowDimension() != nRows
631	1346	8	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	$.getColumnDimension() != nCols
631	1346	8	BigMatrixImpl.java	equals	nRows	int	0	RET	m.getRowDimension() != $
631	1346	8	BigMatrixImpl.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
35552	1349	8	BigMatrixImpl.java	equals	row	int	0	NIL-FOR	$ < nRows
35552	1349	8	BigMatrixImpl.java	equals	nRows	int	0	NIL-FOR	row < $
35553	1351	12	BigMatrixImpl.java	equals	col	int	0	NIL-FOR	$ < nCols
35553	1351	12	BigMatrixImpl.java	equals	nCols	int	0	NIL-FOR	col < $
632	1352	16	BigMatrixImpl.java	equals	col	int	0	RET	dataRow[$].equals(m.getEntry(row, $))
632	1352	16	BigMatrixImpl.java	equals	dataRow	BigDecimal[]	0	RET	$[col].equals(m.getEntry(row, col))
632	1352	16	BigMatrixImpl.java	equals	row	int	0	RET	dataRow[col].equals(m.getEntry($, col))
632	1352	16	BigMatrixImpl.java	equals	m	BigMatrix	0	RET	dataRow[col].equals($.getEntry(row, col))
35554	1372	8	BigMatrixImpl.java	hashCode	row	int	0	NIL-FOR	$ < nRows
35554	1372	8	BigMatrixImpl.java	hashCode	nRows	int	0	NIL-FOR	row < $
35555	1374	12	BigMatrixImpl.java	hashCode	col	int	0	NIL-FOR	$ < nCols
35555	1374	12	BigMatrixImpl.java	hashCode	nCols	int	0	NIL-FOR	col < $
633	1412	8	BigMatrixImpl.java	getLUMatrix	THIS	BigMatrixImpl	0	DEF	$.lu == null
35556	1447	8	BigMatrixImpl.java	copyOut	i	int	0	NIL-FOR	$ < nRows
35556	1447	8	BigMatrixImpl.java	copyOut	nRows	int	0	NIL-FOR	i < $
35557	1476	8	BigMatrixImpl.java	copyIn	i	int	0	NIL-FOR	$ < nRows
35557	1476	8	BigMatrixImpl.java	copyIn	nRows	int	0	NIL-FOR	i < $
35558	1479	12	BigMatrixImpl.java	copyIn	j	int	0	NIL-FOR	$ < nCols
35558	1479	12	BigMatrixImpl.java	copyIn	nCols	int	0	NIL-FOR	j < $
35559	1496	8	BigMatrixImpl.java	copyIn	i	int	0	NIL-FOR	$ < nRows
35559	1496	8	BigMatrixImpl.java	copyIn	nRows	int	0	NIL-FOR	i < $
35560	1499	12	BigMatrixImpl.java	copyIn	j	int	0	NIL-FOR	$ < nCols
35560	1499	12	BigMatrixImpl.java	copyIn	nCols	int	0	NIL-FOR	j < $
38	268	12	BigReal.java	equals	other	Object	0	RET	$ == null
1382	53	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i < 0
1382	53	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i >1
36375	66	8	BinaryChromosome.java	randomBinaryRepresentation	j	int	0	NIL-FOR	$<length
36375	66	8	BinaryChromosome.java	randomBinaryRepresentation	length	int	0	NIL-FOR	j<$
1383	78	8	BinaryChromosome.java	isSame	another	Chromosome	0	RET	$ instanceof BinaryChromosome
1384	82	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getLength() != anotherBc.getLength()
1384	82	8	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getLength() != $.getLength()
36376	85	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	NIL-FOR	i< $.getRepresentation().size()
36376	85	8	BinaryChromosome.java	isSame	i	int	0	NIL-FOR	$< getRepresentation().size()
1385	86	12	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getRepresentation().get(i).equals(anotherBc.getRepresentation().get(i))
1385	86	12	BinaryChromosome.java	isSame	i	int	0	RET	getRepresentation().get($).equals(anotherBc.getRepresentation().get($))
1385	86	12	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getRepresentation().get(i).equals($.getRepresentation().get(i))
1394	36	8	BinaryMutation.java	mutate	original	Chromosome	0	IllegalArgumentException	$ instanceof BinaryChromosome
441	81	8	BinomialDistributionImpl.java	setNumberOfTrials	trials	int	0	DEF	$ < 0
442	96	8	BinomialDistributionImpl.java	setProbabilityOfSuccess	p	double	0	DEF	$ < 0.0
442	96	8	BinomialDistributionImpl.java	setProbabilityOfSuccess	p	double	0	DEF	$ > 1.0
443	140	8	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
444	142	15	BinomialDistributionImpl.java	cumulativeProbability	THIS	BinomialDistributionImpl	1	DEF	x >= $.getNumberOfTrials()
444	142	15	BinomialDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= getNumberOfTrials()
445	159	8	BinomialDistributionImpl.java	probability	THIS	BinomialDistributionImpl	1	DEF	x > $.getNumberOfTrials()
445	159	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ < 0
445	159	8	BinomialDistributionImpl.java	probability	x	int	1	DEF	$ > getNumberOfTrials()
446	187	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
447	190	8	BinomialDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
36627	86	8	BisectionSolver.java	solve	THIS	BisectionSolver	0	NIL-WHILE	i < $.maximalIterationCount
36627	86	8	BisectionSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1725	91	12	BisectionSolver.java	solve	fm	double	1	DEF	$ * fmin > 0.0
1725	91	12	BisectionSolver.java	solve	fmin	double	1	DEF	fm * $ > 0.0
1726	99	12	BisectionSolver.java	solve	THIS	BisectionSolver	0	RET	Math.abs(max - min) <= $.absoluteAccuracy
1726	99	12	BisectionSolver.java	solve	min	double	0	RET	Math.abs(max - $) <= absoluteAccuracy
1726	99	12	BisectionSolver.java	solve	max	double	0	RET	Math.abs($ - min) <= absoluteAccuracy
36366	67	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < iEnd
36366	67	8	BitsStreamGenerator.java	nextBytes	iEnd	int	0	NIL-WHILE	i < $
36367	76	8	BitsStreamGenerator.java	nextBytes	THIS	BitsStreamGenerator	0	NIL-WHILE	i < bytes.$.length
36367	76	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < bytes.length
36367	76	8	BitsStreamGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	i < $.length
1355	98	8	BitsStreamGenerator.java	nextGaussian	THIS	BitsStreamGenerator	1	DEF	Double.isNaN($.nextGaussian)
1356	124	8	BitsStreamGenerator.java	nextInt	n	int	0	DEF	$ < 1
1357	139	12	BitsStreamGenerator.java	nextInt	random	int	0	RET	$ < n
1357	139	12	BitsStreamGenerator.java	nextInt	n	int	0	RET	random < $
521	159	8	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	1	DEF	$
35275	168	8	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
35275	168	8	BlockFieldMatrix.java	BlockFieldMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
35276	170	12	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
35276	170	12	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
522	171	16	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	DEF	blockData[index].length != iHeight * $.blockWidth(jBlock)
522	171	16	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	DEF	blockData[index].length != iHeight * blockWidth($)
522	171	16	BlockFieldMatrix.java	BlockFieldMatrix	iHeight	int	0	DEF	blockData[index].length != $ * blockWidth(jBlock)
522	171	16	BlockFieldMatrix.java	BlockFieldMatrix	index	int	0	DEF	blockData[$].length != iHeight * blockWidth(jBlock)
522	171	16	BlockFieldMatrix.java	BlockFieldMatrix	blockData	T[][]	0	DEF	$[index].length != iHeight * blockWidth(jBlock)
523	176	16	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	0	DEF	$
35277	217	8	BlockFieldMatrix.java	toBlocksLayout	THIS	BlockFieldMatrix	0	NIL-FOR	i < rawData.$.length
35277	217	8	BlockFieldMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
35277	217	8	BlockFieldMatrix.java	toBlocksLayout	rawData	T[][]	0	NIL-FOR	i < $.length
524	219	12	BlockFieldMatrix.java	toBlocksLayout	length	int	0	DEF	$ != columns
524	219	12	BlockFieldMatrix.java	toBlocksLayout	columns	int	0	DEF	length != $
35278	230	8	BlockFieldMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
35278	230	8	BlockFieldMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
35279	234	12	BlockFieldMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
35279	234	12	BlockFieldMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
35280	245	16	BlockFieldMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
35280	245	16	BlockFieldMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
35281	282	8	BlockFieldMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
35281	282	8	BlockFieldMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
35282	286	12	BlockFieldMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
35282	286	12	BlockFieldMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
35283	314	8	BlockFieldMatrix.java	copy	THIS	BlockFieldMatrix	0	NIL-FOR	i < $.blocks.$.length
35283	314	8	BlockFieldMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
35284	337	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
35284	337	12	BlockFieldMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
35284	337	12	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
35285	338	16	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
35285	338	16	BlockFieldMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
35285	338	16	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
35286	348	20	BlockFieldMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
35286	348	20	BlockFieldMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
35287	349	24	BlockFieldMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
35287	349	24	BlockFieldMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
35288	382	8	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
35288	382	8	BlockFieldMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
35288	382	8	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
35289	386	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
35289	386	12	BlockFieldMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
35289	386	12	BlockFieldMatrix.java	add	outBlock	T[]	0	NIL-FOR	k < $.length
35290	410	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
35290	410	12	BlockFieldMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
35290	410	12	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
35291	411	16	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
35291	411	16	BlockFieldMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
35291	411	16	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
35292	421	20	BlockFieldMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
35292	421	20	BlockFieldMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
35293	422	24	BlockFieldMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
35293	422	24	BlockFieldMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
35294	455	8	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
35294	455	8	BlockFieldMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
35294	455	8	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
35295	459	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
35295	459	12	BlockFieldMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
35295	459	12	BlockFieldMatrix.java	subtract	outBlock	T[]	0	NIL-FOR	k < $.length
35296	476	8	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
35296	476	8	BlockFieldMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
35296	476	8	BlockFieldMatrix.java	scalarAdd	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
35297	479	12	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
35297	479	12	BlockFieldMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
35297	479	12	BlockFieldMatrix.java	scalarAdd	outBlock	T[]	0	NIL-FOR	k < $.length
35298	496	8	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
35298	496	8	BlockFieldMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
35298	496	8	BlockFieldMatrix.java	scalarMultiply	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
35299	499	12	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
35299	499	12	BlockFieldMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
35299	499	12	BlockFieldMatrix.java	scalarMultiply	outBlock	T[]	0	NIL-FOR	k < $.length
35300	524	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
35300	524	12	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
35300	524	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
35301	529	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
35301	529	16	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
35301	529	16	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
35302	538	20	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
35302	538	20	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
35303	543	24	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
35303	543	24	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
35304	546	28	BlockFieldMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
35304	546	28	BlockFieldMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
35305	549	32	BlockFieldMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
35305	549	32	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
35306	588	8	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
35306	588	8	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
35306	588	8	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
35307	593	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
35307	593	12	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
35307	593	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
35308	603	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
35308	603	16	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
35309	608	20	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
35309	608	20	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
35310	611	24	BlockFieldMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
35310	611	24	BlockFieldMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
35311	615	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
35311	615	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
35312	624	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
35312	624	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
35313	651	8	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
35313	651	8	BlockFieldMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
35314	656	12	BlockFieldMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
35314	656	12	BlockFieldMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
35315	660	16	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
35315	660	16	BlockFieldMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
35316	695	8	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
35316	695	8	BlockFieldMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
35316	695	8	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
35317	698	12	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
35317	698	12	BlockFieldMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
35317	698	12	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
525	709	16	BlockFieldMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
526	711	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
527	743	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
35318	797	8	BlockFieldMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
35318	797	8	BlockFieldMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
528	811	8	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	DEF	$ < 1
529	818	12	BlockFieldMatrix.java	setSubMatrix	THIS	BlockFieldMatrix	0	DEF	$.subRow.$.length != refLength
529	818	12	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	DEF	subRow.length != $
35319	832	8	BlockFieldMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
35319	832	8	BlockFieldMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
35320	838	12	BlockFieldMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
35320	838	12	BlockFieldMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
35321	847	16	BlockFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
35321	847	16	BlockFieldMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
35322	871	8	BlockFieldMatrix.java	getRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
35322	871	8	BlockFieldMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
530	875	12	BlockFieldMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
530	875	12	BlockFieldMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
531	917	8	BlockFieldMatrix.java	setRowMatrix	nCols	int	0	InvalidMatrixException	matrix.getColumnDimension() != $
531	917	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	InvalidMatrixException	$.getColumnDimension() != nCols
531	917	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	InvalidMatrixException	$.getRowDimension() != 1
35323	931	8	BlockFieldMatrix.java	setRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
35323	931	8	BlockFieldMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
532	935	12	BlockFieldMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
532	935	12	BlockFieldMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
35324	963	8	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
35324	963	8	BlockFieldMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
35325	966	12	BlockFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
35325	966	12	BlockFieldMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
533	967	16	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	DEF	outIndex >= outBlock.$.length
533	967	16	BlockFieldMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
533	967	16	BlockFieldMatrix.java	getColumnMatrix	outBlock	T[]	0	DEF	outIndex >= $.length
534	1006	8	BlockFieldMatrix.java	setColumnMatrix	nRows	int	0	InvalidMatrixException	matrix.getRowDimension() != $
534	1006	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	InvalidMatrixException	$.getColumnDimension() != 1
534	1006	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	InvalidMatrixException	$.getRowDimension() != nRows
35326	1021	8	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
35326	1021	8	BlockFieldMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
35327	1024	12	BlockFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
35327	1024	12	BlockFieldMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
535	1025	16	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	DEF	mIndex >= mBlock.$.length
535	1025	16	BlockFieldMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
535	1025	16	BlockFieldMatrix.java	setColumnMatrix	mBlock	T[]	0	DEF	mIndex >= $.length
35328	1047	8	BlockFieldMatrix.java	getRowVector	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
35328	1047	8	BlockFieldMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
35329	1082	8	BlockFieldMatrix.java	getColumnVector	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
35329	1082	8	BlockFieldMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
35330	1085	12	BlockFieldMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
35330	1085	12	BlockFieldMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
35331	1117	8	BlockFieldMatrix.java	getRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
35331	1117	8	BlockFieldMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
536	1135	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	InvalidMatrixException	array.$.length != nCols
536	1135	8	BlockFieldMatrix.java	setRow	nCols	int	0	InvalidMatrixException	array.length != $
536	1135	8	BlockFieldMatrix.java	setRow	array	T[]	0	InvalidMatrixException	$.length != nCols
35332	1145	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
35332	1145	8	BlockFieldMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
35333	1167	8	BlockFieldMatrix.java	getColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
35333	1167	8	BlockFieldMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
35334	1170	12	BlockFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
35334	1170	12	BlockFieldMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
537	1186	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	InvalidMatrixException	array.$.length != nRows
537	1186	8	BlockFieldMatrix.java	setColumn	nRows	int	0	InvalidMatrixException	array.length != $
537	1186	8	BlockFieldMatrix.java	setColumn	array	T[]	0	InvalidMatrixException	$.length != nRows
35335	1197	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
35335	1197	8	BlockFieldMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
35336	1200	12	BlockFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
35336	1200	12	BlockFieldMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
35337	1287	8	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockColumns
35337	1287	8	BlockFieldMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
35338	1288	12	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockRows
35338	1288	12	BlockFieldMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
35339	1298	16	BlockFieldMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
35339	1298	16	BlockFieldMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
35340	1301	20	BlockFieldMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
35340	1301	20	BlockFieldMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
538	1335	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	DEF	v.$.length != $.columns
538	1335	8	BlockFieldMatrix.java	operate	v	T[]	0	DEF	$.length != columns
35341	1344	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
35341	1344	8	BlockFieldMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
35342	1347	12	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
35342	1347	12	BlockFieldMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
35343	1352	16	BlockFieldMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
35343	1352	16	BlockFieldMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
35344	1355	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
35344	1355	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
35345	1364	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
35345	1364	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
539	1381	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	DEF	v.$.length != $.rows
539	1381	8	BlockFieldMatrix.java	preMultiply	v	T[]	0	DEF	$.length != rows
35346	1390	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
35346	1390	8	BlockFieldMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
35347	1397	12	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
35347	1397	12	BlockFieldMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
35348	1401	16	BlockFieldMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
35348	1401	16	BlockFieldMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
35349	1405	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
35349	1405	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
35350	1414	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
35350	1414	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
35351	1432	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
35351	1432	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
35352	1435	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
35352	1435	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
35353	1436	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
35353	1436	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
35354	1442	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
35354	1442	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
35355	1457	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
35355	1457	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
35356	1460	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
35356	1460	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
35357	1461	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
35357	1461	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
35358	1467	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
35358	1467	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
35359	1485	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
35359	1485	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
35360	1489	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
35360	1489	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
35361	1490	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
35361	1490	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
35362	1497	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
35362	1497	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
35363	1515	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
35363	1515	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
35364	1519	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
35364	1519	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
35365	1520	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
35365	1520	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
35366	1527	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
35366	1527	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
35367	1543	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
35367	1543	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
35368	1546	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
35368	1546	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
35369	1551	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
35369	1551	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
35370	1552	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
35370	1552	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
35371	1569	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
35371	1569	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
35372	1572	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
35372	1572	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
35373	1577	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
35373	1577	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
35374	1578	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
35374	1578	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
35375	1597	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
35375	1597	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
35376	1601	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
35376	1601	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
35377	1607	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
35377	1607	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
35378	1609	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
35378	1609	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
35379	1627	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
35379	1627	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
35380	1631	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
35380	1631	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
35381	1637	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
35381	1637	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
35382	1639	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
35382	1639	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
804	156	8	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	1	DEF	$
35858	165	8	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
35858	165	8	BlockRealMatrix.java	BlockRealMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
35859	167	12	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
35859	167	12	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
805	168	16	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	DEF	blockData[index].length != iHeight * $.blockWidth(jBlock)
805	168	16	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	DEF	blockData[index].length != iHeight * blockWidth($)
805	168	16	BlockRealMatrix.java	BlockRealMatrix	iHeight	int	0	DEF	blockData[index].length != $ * blockWidth(jBlock)
805	168	16	BlockRealMatrix.java	BlockRealMatrix	index	int	0	DEF	blockData[$].length != iHeight * blockWidth(jBlock)
805	168	16	BlockRealMatrix.java	BlockRealMatrix	blockData	double[][]	0	DEF	$[index].length != iHeight * blockWidth(jBlock)
806	173	16	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	0	DEF	$
35860	212	8	BlockRealMatrix.java	toBlocksLayout	THIS	BlockRealMatrix	0	NIL-FOR	i < rawData.$.length
35860	212	8	BlockRealMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
35860	212	8	BlockRealMatrix.java	toBlocksLayout	rawData	double[][]	0	NIL-FOR	i < $.length
807	214	12	BlockRealMatrix.java	toBlocksLayout	length	int	0	DEF	$ != columns
807	214	12	BlockRealMatrix.java	toBlocksLayout	columns	int	0	DEF	length != $
35861	224	8	BlockRealMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
35861	224	8	BlockRealMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
35862	228	12	BlockRealMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
35862	228	12	BlockRealMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
35863	239	16	BlockRealMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
35863	239	16	BlockRealMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
35864	272	8	BlockRealMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
35864	272	8	BlockRealMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
35865	276	12	BlockRealMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
35865	276	12	BlockRealMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
35866	304	8	BlockRealMatrix.java	copy	THIS	BlockRealMatrix	0	NIL-FOR	i < $.blocks.$.length
35866	304	8	BlockRealMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
35867	327	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
35867	327	12	BlockRealMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
35867	327	12	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
35868	328	16	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
35868	328	16	BlockRealMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
35868	328	16	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
35869	338	20	BlockRealMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
35869	338	20	BlockRealMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
35870	339	24	BlockRealMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
35870	339	24	BlockRealMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
35871	372	8	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
35871	372	8	BlockRealMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
35871	372	8	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
35872	376	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
35872	376	12	BlockRealMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
35872	376	12	BlockRealMatrix.java	add	outBlock	double[]	0	NIL-FOR	k < $.length
35873	400	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
35873	400	12	BlockRealMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
35873	400	12	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
35874	401	16	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
35874	401	16	BlockRealMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
35874	401	16	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
35875	411	20	BlockRealMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
35875	411	20	BlockRealMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
35876	412	24	BlockRealMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
35876	412	24	BlockRealMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
35877	445	8	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
35877	445	8	BlockRealMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
35877	445	8	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
35878	449	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
35878	449	12	BlockRealMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
35878	449	12	BlockRealMatrix.java	subtract	outBlock	double[]	0	NIL-FOR	k < $.length
35879	466	8	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
35879	466	8	BlockRealMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
35879	466	8	BlockRealMatrix.java	scalarAdd	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
35880	469	12	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
35880	469	12	BlockRealMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
35880	469	12	BlockRealMatrix.java	scalarAdd	outBlock	double[]	0	NIL-FOR	k < $.length
35881	486	8	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
35881	486	8	BlockRealMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
35881	486	8	BlockRealMatrix.java	scalarMultiply	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
35882	489	12	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
35882	489	12	BlockRealMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
35882	489	12	BlockRealMatrix.java	scalarMultiply	outBlock	double[]	0	NIL-FOR	k < $.length
35883	513	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
35883	513	12	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
35883	513	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
35884	518	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
35884	518	16	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
35884	518	16	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
35885	527	20	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
35885	527	20	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
35886	532	24	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
35886	532	24	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
35887	535	28	BlockRealMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
35887	535	28	BlockRealMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
35888	538	32	BlockRealMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
35888	538	32	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
35889	576	8	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
35889	576	8	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
35889	576	8	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
35890	581	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
35890	581	12	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
35890	581	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
35891	591	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
35891	591	16	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
35892	596	20	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
35892	596	20	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
35893	599	24	BlockRealMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
35893	599	24	BlockRealMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
35894	603	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
35894	603	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
35895	611	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
35895	611	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
35896	638	8	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
35896	638	8	BlockRealMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
35897	643	12	BlockRealMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
35897	643	12	BlockRealMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
35898	647	16	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
35898	647	16	BlockRealMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
35899	666	8	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
35899	666	8	BlockRealMatrix.java	getNorm	jBlock	int	0	NIL-FOR	$ < blockColumns
35900	669	12	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
35900	669	12	BlockRealMatrix.java	getNorm	iBlock	int	0	NIL-FOR	$ < blockRows
35901	672	16	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
35901	672	16	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
35902	674	20	BlockRealMatrix.java	getNorm	i	int	0	NIL-FOR	$ < iHeight
35902	674	20	BlockRealMatrix.java	getNorm	iHeight	int	0	NIL-FOR	i < $
35903	680	12	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
35903	680	12	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
35904	691	8	BlockRealMatrix.java	getFrobeniusNorm	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.$.length
35904	691	8	BlockRealMatrix.java	getFrobeniusNorm	blockIndex	int	0	NIL-FOR	$ < blocks.length
35905	720	8	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
35905	720	8	BlockRealMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
35905	720	8	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
35906	723	12	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
35906	723	12	BlockRealMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
35906	723	12	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
808	734	16	BlockRealMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
809	736	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
810	768	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
35907	823	8	BlockRealMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
35907	823	8	BlockRealMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
811	837	8	BlockRealMatrix.java	setSubMatrix	refLength	int	0	DEF	$ < 1
812	844	12	BlockRealMatrix.java	setSubMatrix	THIS	BlockRealMatrix	0	DEF	$.subRow.$.length != refLength
812	844	12	BlockRealMatrix.java	setSubMatrix	refLength	int	0	DEF	subRow.length != $
35908	858	8	BlockRealMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
35908	858	8	BlockRealMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
35909	864	12	BlockRealMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
35909	864	12	BlockRealMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
35910	873	16	BlockRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
35910	873	16	BlockRealMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
35911	897	8	BlockRealMatrix.java	getRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
35911	897	8	BlockRealMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
813	901	12	BlockRealMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
813	901	12	BlockRealMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
814	943	8	BlockRealMatrix.java	setRowMatrix	nCols	int	0	InvalidMatrixException	matrix.getColumnDimension() != $
814	943	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	InvalidMatrixException	$.getColumnDimension() != nCols
814	943	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	InvalidMatrixException	$.getRowDimension() != 1
35912	957	8	BlockRealMatrix.java	setRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
35912	957	8	BlockRealMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
815	961	12	BlockRealMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
815	961	12	BlockRealMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
35913	989	8	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
35913	989	8	BlockRealMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
35914	992	12	BlockRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
35914	992	12	BlockRealMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
816	993	16	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	DEF	outIndex >= outBlock.$.length
816	993	16	BlockRealMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
816	993	16	BlockRealMatrix.java	getColumnMatrix	outBlock	double[]	0	DEF	outIndex >= $.length
817	1032	8	BlockRealMatrix.java	setColumnMatrix	nRows	int	0	InvalidMatrixException	matrix.getRowDimension() != $
817	1032	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	InvalidMatrixException	$.getRowDimension() != nRows
817	1032	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	InvalidMatrixException	$.getColumnDimension() != 1
35915	1047	8	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
35915	1047	8	BlockRealMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
35916	1050	12	BlockRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
35916	1050	12	BlockRealMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
818	1051	16	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	DEF	mIndex >= mBlock.$.length
818	1051	16	BlockRealMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
818	1051	16	BlockRealMatrix.java	setColumnMatrix	mBlock	double[]	0	DEF	mIndex >= $.length
35917	1073	8	BlockRealMatrix.java	getRowVector	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
35917	1073	8	BlockRealMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
35918	1108	8	BlockRealMatrix.java	getColumnVector	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
35918	1108	8	BlockRealMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
35919	1111	12	BlockRealMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
35919	1111	12	BlockRealMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
35920	1143	8	BlockRealMatrix.java	getRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
35920	1143	8	BlockRealMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
819	1161	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	InvalidMatrixException	array.$.length != nCols
819	1161	8	BlockRealMatrix.java	setRow	nCols	int	0	InvalidMatrixException	array.length != $
819	1161	8	BlockRealMatrix.java	setRow	array	double[]	0	InvalidMatrixException	$.length != nCols
35921	1171	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
35921	1171	8	BlockRealMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
35922	1193	8	BlockRealMatrix.java	getColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
35922	1193	8	BlockRealMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
35923	1196	12	BlockRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
35923	1196	12	BlockRealMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
820	1212	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	InvalidMatrixException	array.$.length != nRows
820	1212	8	BlockRealMatrix.java	setColumn	nRows	int	0	InvalidMatrixException	array.length != $
820	1212	8	BlockRealMatrix.java	setColumn	array	double[]	0	InvalidMatrixException	$.length != nRows
35924	1223	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
35924	1223	8	BlockRealMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
35925	1226	12	BlockRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
35925	1226	12	BlockRealMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
35926	1311	8	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockColumns
35926	1311	8	BlockRealMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
35927	1312	12	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockRows
35927	1312	12	BlockRealMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
35928	1322	16	BlockRealMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
35928	1322	16	BlockRealMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
35929	1325	20	BlockRealMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
35929	1325	20	BlockRealMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
821	1359	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	DEF	v.$.length != $.columns
821	1359	8	BlockRealMatrix.java	operate	v	double[]	0	DEF	$.length != columns
35930	1367	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
35930	1367	8	BlockRealMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
35931	1370	12	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
35931	1370	12	BlockRealMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
35932	1375	16	BlockRealMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
35932	1375	16	BlockRealMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
35933	1378	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
35933	1378	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
35934	1386	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
35934	1386	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
822	1403	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	DEF	v.$.length != $.rows
822	1403	8	BlockRealMatrix.java	preMultiply	v	double[]	0	DEF	$.length != rows
35935	1411	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
35935	1411	8	BlockRealMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
35936	1418	12	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
35936	1418	12	BlockRealMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
35937	1422	16	BlockRealMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
35937	1422	16	BlockRealMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
35938	1426	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
35938	1426	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
35939	1434	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
35939	1434	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
35940	1452	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
35940	1452	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
35941	1455	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
35941	1455	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
35942	1456	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
35942	1456	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
35943	1462	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
35943	1462	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
35944	1477	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
35944	1477	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
35945	1480	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
35945	1480	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
35946	1481	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
35946	1481	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
35947	1487	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
35947	1487	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
35948	1505	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
35948	1505	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
35949	1509	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
35949	1509	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
35950	1510	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
35950	1510	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
35951	1517	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
35951	1517	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
35952	1535	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
35952	1535	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
35953	1539	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
35953	1539	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
35954	1540	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
35954	1540	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
35955	1547	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
35955	1547	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
35956	1563	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
35956	1563	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
35957	1566	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
35957	1566	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
35958	1571	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
35958	1571	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
35959	1572	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
35959	1572	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
35960	1589	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
35960	1589	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
35961	1592	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
35961	1592	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
35962	1597	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
35962	1597	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
35963	1598	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
35963	1598	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
35964	1617	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
35964	1617	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
35965	1621	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
35965	1621	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
35966	1627	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
35966	1627	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
35967	1629	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
35967	1629	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
35968	1647	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
35968	1647	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
35969	1651	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
35969	1651	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
35970	1657	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
35970	1657	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
35971	1659	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
35971	1659	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
920	93	8	BrentOptimizer.java	localMin	THIS	BrentOptimizer	0	DEF	goalType == $.GoalType.MAXIMIZE
920	93	8	BrentOptimizer.java	localMin	goalType	GoalType	0	DEF	$ == GoalType.MAXIMIZE
36111	100	8	BrentOptimizer.java	localMin	THIS	BrentOptimizer	0	NIL-WHILE	count < $.maximalIterationCount
36111	100	8	BrentOptimizer.java	localMin	count	int	0	NIL-WHILE	$ < maximalIterationCount
921	106	12	BrentOptimizer.java	localMin	m	double	1	DEF	Math.abs(x - $) > t2 - 0.5 * (b - a)
921	106	12	BrentOptimizer.java	localMin	t2	double	1	DEF	Math.abs(x - m) > $ - 0.5 * (b - a)
921	106	12	BrentOptimizer.java	localMin	x	double	1	DEF	Math.abs($ - m) > t2 - 0.5 * (b - a)
921	106	12	BrentOptimizer.java	localMin	a	double	1	DEF	Math.abs(x - m) > t2 - 0.5 * (b - $)
921	106	12	BrentOptimizer.java	localMin	b	double	1	DEF	Math.abs(x - m) > t2 - 0.5 * ($ - a)
922	113	16	BrentOptimizer.java	localMin	tol	double	0	DEF	Math.abs(e) > $
922	113	16	BrentOptimizer.java	localMin	e	double	0	DEF	Math.abs($) > tol
923	119	20	BrentOptimizer.java	localMin	q	double	1	DEF	$ > 0
924	129	16	BrentOptimizer.java	localMin	p	double	1	DEF	$ < q * (b - x)
924	129	16	BrentOptimizer.java	localMin	p	double	1	DEF	Math.abs($) < Math.abs(0.5 * q * r)
924	129	16	BrentOptimizer.java	localMin	p	double	1	DEF	$ < q * (a - x)
924	129	16	BrentOptimizer.java	localMin	q	double	1	DEF	p < $ * (b - x)
924	129	16	BrentOptimizer.java	localMin	q	double	1	DEF	Math.abs(p) < Math.abs(0.5 * $ * r)
924	129	16	BrentOptimizer.java	localMin	q	double	1	DEF	p < $ * (a - x)
924	129	16	BrentOptimizer.java	localMin	r	double	1	DEF	Math.abs(p) < Math.abs(0.5 * q * $)
924	129	16	BrentOptimizer.java	localMin	x	double	1	DEF	p < q * (b - $)
924	129	16	BrentOptimizer.java	localMin	x	double	1	DEF	p < q * (a - $)
924	129	16	BrentOptimizer.java	localMin	a	double	1	DEF	p < q * ($ - x)
924	129	16	BrentOptimizer.java	localMin	b	double	1	DEF	p < q * ($ - x)
925	135	20	BrentOptimizer.java	localMin	u	double	0	DEF	($ - a) < t2
925	135	20	BrentOptimizer.java	localMin	u	double	0	DEF	(b - $) < t2
925	135	20	BrentOptimizer.java	localMin	t2	double	0	DEF	(u - a) < $
925	135	20	BrentOptimizer.java	localMin	t2	double	0	DEF	(b - u) < $
925	135	20	BrentOptimizer.java	localMin	a	double	0	DEF	(u - $) < t2
925	135	20	BrentOptimizer.java	localMin	b	double	0	DEF	($ - u) < t2
926	146	16	BrentOptimizer.java	localMin	THIS	BrentOptimizer	0	DEF	goalType == $.GoalType.MAXIMIZE
926	146	16	BrentOptimizer.java	localMin	goalType	GoalType	0	DEF	$ == GoalType.MAXIMIZE
927	151	16	BrentOptimizer.java	localMin	fu	double	1	DEF	$ <= fx
927	151	16	BrentOptimizer.java	localMin	fx	double	1	DEF	fu <= $
928	152	20	BrentOptimizer.java	localMin	u	double	1	DEF	$ < x
928	152	20	BrentOptimizer.java	localMin	x	double	1	DEF	u < $
929	164	20	BrentOptimizer.java	localMin	u	double	1	DEF	$ < x
929	164	20	BrentOptimizer.java	localMin	x	double	1	DEF	u < $
930	169	20	BrentOptimizer.java	localMin	fu	double	1	DEF	$ <= fw
930	169	20	BrentOptimizer.java	localMin	x	double	1	DEF	w == $
930	169	20	BrentOptimizer.java	localMin	w	double	1	DEF	$ == x
930	169	20	BrentOptimizer.java	localMin	fw	double	1	DEF	fu <= $
931	174	27	BrentOptimizer.java	localMin	fu	double	0	DEF	$ <= fv
931	174	27	BrentOptimizer.java	localMin	x	double	0	DEF	v == $
931	174	27	BrentOptimizer.java	localMin	v	double	0	DEF	$ == w
931	174	27	BrentOptimizer.java	localMin	v	double	0	DEF	$ == x
931	174	27	BrentOptimizer.java	localMin	w	double	0	DEF	v == $
931	174	27	BrentOptimizer.java	localMin	fv	double	0	DEF	fu <= $
1742	107	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yInitial) <= $.functionValueAccuracy
1742	107	8	BrentSolver.java	solve	yInitial	double	0	RET	Math.abs($) <= functionValueAccuracy
1743	114	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yMin) <= $.functionValueAccuracy
1743	114	8	BrentSolver.java	solve	yMin	double	0	RET	Math.abs($) <= functionValueAccuracy
1744	120	8	BrentSolver.java	solve	yInitial	double	0	RET	$ * yMin < 0
1744	120	8	BrentSolver.java	solve	yMin	double	0	RET	yInitial * $ < 0
1745	126	8	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(yMax) <= $.functionValueAccuracy
1745	126	8	BrentSolver.java	solve	yMax	double	0	RET	Math.abs($) <= functionValueAccuracy
1746	132	8	BrentSolver.java	solve	yInitial	double	0	RET	$ * yMax < 0
1746	132	8	BrentSolver.java	solve	yMax	double	0	RET	yInitial * $ < 0
1747	174	8	BrentSolver.java	solve	sign	double	1	DEF	$ > 0
1748	176	12	BrentSolver.java	solve	THIS	BrentSolver	1	DEF	Math.abs(yMin) <= $.functionValueAccuracy
1748	176	12	BrentSolver.java	solve	yMin	double	1	DEF	Math.abs($) <= functionValueAccuracy
1749	179	19	BrentSolver.java	solve	THIS	BrentSolver	1	DEF	Math.abs(yMax) <= $.functionValueAccuracy
1749	179	19	BrentSolver.java	solve	yMax	double	1	DEF	Math.abs($) <= functionValueAccuracy
1750	187	15	BrentSolver.java	solve	sign	double	1	DEF	$ < 0
1751	192	12	BrentSolver.java	solve	yMin	double	1	DEF	$ == 0.0
36636	229	8	BrentSolver.java	solve	THIS	BrentSolver	0	NIL-WHILE	i < $.maximalIterationCount
36636	229	8	BrentSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1752	230	12	BrentSolver.java	solve	y1	double	0	DEF	Math.abs(y2) < Math.abs($)
1752	230	12	BrentSolver.java	solve	y2	double	0	DEF	Math.abs($) < Math.abs(y1)
1753	239	12	BrentSolver.java	solve	THIS	BrentSolver	0	RET	Math.abs(y1) <= $.functionValueAccuracy
1753	239	12	BrentSolver.java	solve	y1	double	0	RET	Math.abs($) <= functionValueAccuracy
1754	249	12	BrentSolver.java	solve	dx	double	0	RET	Math.abs($) <= tolerance
1754	249	12	BrentSolver.java	solve	tolerance	double	0	RET	Math.abs(dx) <= $
1755	253	12	BrentSolver.java	solve	tolerance	double	1	DEF	Math.abs(oldDelta) < $
1755	253	12	BrentSolver.java	solve	oldDelta	double	1	DEF	Math.abs($) < tolerance
1755	253	12	BrentSolver.java	solve	y0	double	1	DEF	Math.abs($) <= Math.abs(y1)
1755	253	12	BrentSolver.java	solve	y1	double	1	DEF	Math.abs(y0) <= Math.abs($)
1756	265	16	BrentSolver.java	solve	x0	double	1	DEF	$ == x2
1756	265	16	BrentSolver.java	solve	x2	double	1	DEF	x0 == $
1757	276	16	BrentSolver.java	solve	p	double	1	DEF	$ > 0.0
1758	281	16	BrentSolver.java	solve	p	double	1	DEF	2.0 * $ >= 1.5 * dx * p1 - Math.abs(tolerance * p1)
1758	281	16	BrentSolver.java	solve	p	double	1	DEF	$ >= Math.abs(0.5 * oldDelta * p1)
1758	281	16	BrentSolver.java	solve	p1	double	1	DEF	2.0 * p >= 1.5 * dx * $ - Math.abs(tolerance * $)
1758	281	16	BrentSolver.java	solve	p1	double	1	DEF	p >= Math.abs(0.5 * oldDelta * $)
1758	281	16	BrentSolver.java	solve	dx	double	1	DEF	2.0 * p >= 1.5 * $ * p1 - Math.abs(tolerance * p1)
1758	281	16	BrentSolver.java	solve	tolerance	double	1	DEF	2.0 * p >= 1.5 * dx * p1 - Math.abs($ * p1)
1758	281	16	BrentSolver.java	solve	oldDelta	double	1	DEF	p >= Math.abs(0.5 * $ * p1)
1759	297	12	BrentSolver.java	solve	tolerance	double	1	DEF	Math.abs(delta) > $
1759	297	12	BrentSolver.java	solve	delta	double	1	DEF	Math.abs($) > tolerance
1760	299	19	BrentSolver.java	solve	dx	double	1	DEF	$ > 0.0
1761	301	19	BrentSolver.java	solve	dx	double	0	DEF	$ <= 0.0
1762	305	12	BrentSolver.java	solve	y1	double	0	DEF	($ > 0) == (y2 > 0)
1762	305	12	BrentSolver.java	solve	y2	double	0	DEF	(y1 > 0) == ($ > 0)
472	102	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ < 0.0
472	102	8	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ > 1.0
473	105	15	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
474	107	16	CauchyDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
475	129	8	CauchyDistributionImpl.java	setScale	s	double	0	DEF	$ <= 0.0
476	149	8	CauchyDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < .5
477	171	8	CauchyDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
478	192	8	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
479	194	15	CauchyDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > .5
1209	66	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	DEF	expected.$.length < 2
1209	66	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	DEF	$.length < 2
1210	71	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	DEF	expected.$.length != observed.$.length
1210	71	8	ChiSquareTestImpl.java	chiSquare	expected	double[]	0	DEF	$.length != observed.length
1210	71	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	DEF	expected.length != $.length
36272	79	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
36272	79	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
36272	79	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
1211	85	8	ChiSquareTestImpl.java	chiSquare	sumExpected	double	0	DEF	Math.abs($ - sumObserved) > 10E-6
1211	85	8	ChiSquareTestImpl.java	chiSquare	sumObserved	double	0	DEF	Math.abs(sumExpected - $) > 10E-6
36273	90	8	ChiSquareTestImpl.java	chiSquare	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed.$.length
36273	90	8	ChiSquareTestImpl.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
36273	90	8	ChiSquareTestImpl.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
1212	91	12	ChiSquareTestImpl.java	chiSquare	rescale	boolean	1	DEF	$
1213	137	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	DEF	$ <= 0
1213	137	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	DEF	$ > 0.5
36274	160	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
36274	160	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
36275	161	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
36275	161	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
36276	171	8	ChiSquareTestImpl.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
36276	171	8	ChiSquareTestImpl.java	chiSquare	nRows	int	0	NIL-FOR	row < $
36277	172	12	ChiSquareTestImpl.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
36277	172	12	ChiSquareTestImpl.java	chiSquare	nCols	int	0	NIL-FOR	col < $
1214	205	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	DEF	$ <= 0
1214	205	8	ChiSquareTestImpl.java	chiSquareTest	alpha	double	0	DEF	$ > 0.5
1215	224	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	DEF	observed1.$.length < 2
1215	224	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	DEF	$.length < 2
1216	229	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	DEF	observed1.$.length != observed2.$.length
1216	229	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	DEF	$.length != observed2.length
1216	229	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	0	DEF	observed1.length != $.length
36278	244	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
36278	244	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
36278	244	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
1217	249	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum1	long	0	DEF	$ == 0
1218	253	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	countSum2	long	0	DEF	$ == 0
1219	259	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	0	DEF	$
36279	267	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	THIS	ChiSquareTestImpl	0	NIL-FOR	i < observed1.$.length
36279	267	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
36279	267	8	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
1220	268	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	DEF	observed2[$] == 0
1220	268	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	i	int	1	DEF	observed1[$] == 0
1220	268	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed1	long[]	1	DEF	$[i] == 0
1220	268	12	ChiSquareTestImpl.java	chiSquareDataSetsComparison	observed2	long[]	1	DEF	$[i] == 0
1221	274	16	ChiSquareTestImpl.java	chiSquareDataSetsComparison	unequalCounts	boolean	1	DEF	$
1222	312	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	DEF	$ > 0.5
1222	312	8	ChiSquareTestImpl.java	chiSquareTestDataSetsComparison	alpha	double	0	DEF	$ <= 0
1223	330	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	DEF	in.$.length < 2
1223	330	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	DEF	$.length < 2
1224	336	8	ChiSquareTestImpl.java	checkArray	THIS	ChiSquareTestImpl	0	DEF	in[0].length < 2
1224	336	8	ChiSquareTestImpl.java	checkArray	in	long[][]	0	DEF	$[0].length < 2
36280	357	8	ChiSquareTestImpl.java	checkRectangular	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
36280	357	8	ChiSquareTestImpl.java	checkRectangular	i	int	0	NIL-FOR	$ < in.length
36280	357	8	ChiSquareTestImpl.java	checkRectangular	in	long[][]	0	NIL-FOR	i < $.length
1225	358	12	ChiSquareTestImpl.java	checkRectangular	THIS	ChiSquareTestImpl	0	DEF	in[i].length != in[0].length
1225	358	12	ChiSquareTestImpl.java	checkRectangular	i	int	0	DEF	in[$].length != in[0].length
1225	358	12	ChiSquareTestImpl.java	checkRectangular	in	long[][]	0	DEF	$[i].length != $[0].length
36281	373	8	ChiSquareTestImpl.java	checkPositive	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
36281	373	8	ChiSquareTestImpl.java	checkPositive	i	int	0	NIL-FOR	$ < in.length
36281	373	8	ChiSquareTestImpl.java	checkPositive	in	double[]	0	NIL-FOR	i < $.length
1226	374	12	ChiSquareTestImpl.java	checkPositive	i	int	0	DEF	in[$] <= 0
1226	374	12	ChiSquareTestImpl.java	checkPositive	in	double[]	0	DEF	$[i] <= 0
36282	389	8	ChiSquareTestImpl.java	checkNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
36282	389	8	ChiSquareTestImpl.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
36282	389	8	ChiSquareTestImpl.java	checkNonNegative	in	long[]	0	NIL-FOR	i < $.length
1227	390	12	ChiSquareTestImpl.java	checkNonNegative	i	int	0	DEF	in[$] < 0
1227	390	12	ChiSquareTestImpl.java	checkNonNegative	in	long[]	0	DEF	$[i] < 0
36283	405	8	ChiSquareTestImpl.java	checkNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	i < in.$.length
36283	405	8	ChiSquareTestImpl.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
36283	405	8	ChiSquareTestImpl.java	checkNonNegative	in	long[][]	0	NIL-FOR	i < $.length
36284	406	12	ChiSquareTestImpl.java	checkNonNegative	THIS	ChiSquareTestImpl	0	NIL-FOR	j < in[i].length
36284	406	12	ChiSquareTestImpl.java	checkNonNegative	j	int	0	NIL-FOR	$ < in[i].length
36284	406	12	ChiSquareTestImpl.java	checkNonNegative	i	int	0	NIL-FOR	j < in[$].length
36284	406	12	ChiSquareTestImpl.java	checkNonNegative	in	long[][]	0	NIL-FOR	j < $[i].length
1228	407	16	ChiSquareTestImpl.java	checkNonNegative	j	int	0	DEF	in[i][$] < 0
1228	407	16	ChiSquareTestImpl.java	checkNonNegative	i	int	0	DEF	in[$][j] < 0
1228	407	16	ChiSquareTestImpl.java	checkNonNegative	in	long[][]	0	DEF	$[i][j] < 0
468	111	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
469	114	8	ChiSquaredDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
470	150	8	ChiSquaredDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
471	176	8	ChiSquaredDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
793	99	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
35838	110	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
35838	110	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
35839	115	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	j	int	0	NIL-FOR	$ < order
35839	115	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	j < $
794	121	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	lIJ	double	0	NotSymmetricMatrixException	Math.abs($ - lJI) > maxDelta
794	121	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	lJI	double	0	NotSymmetricMatrixException	Math.abs(lIJ - $) > maxDelta
794	121	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	maxDelta	double	0	NotSymmetricMatrixException	Math.abs(lIJ - lJI) > $
35840	129	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	$ < order
35840	129	8	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	i < $
795	134	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	ltI	double[]	0	NotPositiveDefiniteMatrixException	$[i] < absolutePositivityThreshold
795	134	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NotPositiveDefiniteMatrixException	ltI[$] < absolutePositivityThreshold
795	134	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	absolutePositivityThreshold	double	0	NotPositiveDefiniteMatrixException	ltI[i] < $
35841	141	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	q	int	0	NIL-FOR	$ > i
35841	141	12	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	i	int	0	NIL-FOR	q > $
35842	144	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	p	int	0	NIL-FOR	$ < order
35842	144	16	CholeskyDecompositionImpl.java	CholeskyDecompositionImpl	order	int	0	NIL-FOR	p < $
796	155	8	CholeskyDecompositionImpl.java	getL	THIS	CholeskyDecompositionImpl	0	DEF	$.cachedL == null
797	164	8	CholeskyDecompositionImpl.java	getLT	THIS	CholeskyDecompositionImpl	0	DEF	$.cachedLT == null
35843	176	8	CholeskyDecompositionImpl.java	getDeterminant	THIS	CholeskyDecompositionImpl	0	NIL-FOR	i < $.lTData.$.length
35843	176	8	CholeskyDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < lTData.length
1368	45	8	Chromosome.java	getFitness	THIS	Chromosome	0	DEF	$.fitness == Double.MIN_VALUE
1369	91	12	Chromosome.java	findSameChromosome	THIS	Chromosome	0	RET	$.isSame($.anotherChr)
1370	106	8	Chromosome.java	searchForFitnessUpdate	sameChromosome	Chromosome	0	DEF	$ != null
36576	98	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
36576	98	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1610	128	12	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	RET	$.states.isEmpty()
1611	135	12	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.initialized
1612	152	16	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.evaluateStep(interpolator)
1612	152	16	CombinedEventsManager.java	evaluateStep	interpolator	StepInterpolator	0	DEF	state.evaluateStep($)
1613	153	20	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	1	DEF	$.first == null
1614	156	24	CombinedEventsManager.java	evaluateStep	interpolator	StepInterpolator	1	DEF	$.isForward()
1615	157	28	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.getEventTime() < $.first.getEventTime()
1616	161	28	CombinedEventsManager.java	evaluateStep	THIS	CombinedEventsManager	0	DEF	$.state.getEventTime() > $.first.getEventTime()
1617	216	12	CombinedEventsManager.java	stop	THIS	CombinedEventsManager	0	RET	$.state.stop()
1618	237	16	CombinedEventsManager.java	reset	THIS	CombinedEventsManager	0	DEF	$.state.reset(t, y)
1618	237	16	CombinedEventsManager.java	reset	t	double	0	DEF	state.reset($, y)
1618	237	16	CombinedEventsManager.java	reset	y	double[]	0	DEF	state.reset(t, $)
271	107	8	Complex.java	abs	THIS	Complex	0	RET	$.isNaN()
272	111	8	Complex.java	abs	THIS	Complex	0	RET	$.isInfinite()
273	115	8	Complex.java	abs	THIS	Complex	1	RET	Math.abs($.real) < Math.abs($.imaginary)
274	116	12	Complex.java	abs	THIS	Complex	0	RET	$.imaginary == 0.0
275	122	12	Complex.java	abs	THIS	Complex	0	RET	$.real == 0.0
276	167	8	Complex.java	conjugate	THIS	Complex	0	RET	$.isNaN()
277	209	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN()
277	209	8	Complex.java	divide	rhs	Complex	0	RET	$.isNaN()
278	215	8	Complex.java	divide	c	double	0	RET	$ == 0.0
278	215	8	Complex.java	divide	d	double	0	RET	$ == 0.0
279	219	8	Complex.java	divide	THIS	Complex	0	RET	$.isInfinite()
279	219	8	Complex.java	divide	rhs	Complex	0	RET	$.isInfinite()
280	223	8	Complex.java	divide	c	double	1	RET	Math.abs($) < Math.abs(d)
280	223	8	Complex.java	divide	d	double	1	RET	Math.abs(c) < Math.abs($)
281	258	8	Complex.java	equals	THIS	Complex	1	DEF	$ == other
281	258	8	Complex.java	equals	other	Object	1	DEF	this == $
282	260	15	Complex.java	equals	other	Object	1	DEF	$ == null
283	265	16	Complex.java	equals	rhs	Complex	1	DEF	$.isNaN()
284	288	8	Complex.java	hashCode	THIS	Complex	0	RET	$.isNaN()
285	365	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN()
285	365	8	Complex.java	multiply	rhs	Complex	0	RET	$.isNaN()
286	368	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
286	368	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
286	368	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(rhs.$.real)
286	368	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(rhs.$.imaginary)
286	368	8	Complex.java	multiply	rhs	Complex	0	RET	Double.isInfinite($.real)
286	368	8	Complex.java	multiply	rhs	Complex	0	RET	Double.isInfinite($.imaginary)
287	404	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN()
287	404	8	Complex.java	multiply	rhs	double	0	RET	Double.isNaN($)
288	407	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
288	407	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
288	407	8	Complex.java	multiply	rhs	double	0	RET	Double.isInfinite($)
289	424	8	Complex.java	negate	THIS	Complex	0	RET	$.isNaN()
290	450	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN()
290	450	8	Complex.java	subtract	rhs	Complex	0	RET	$.isNaN()
291	473	8	Complex.java	acos	THIS	Complex	0	RET	$.isNaN()
292	496	8	Complex.java	asin	THIS	Complex	0	RET	$.isNaN()
293	519	8	Complex.java	atan	THIS	Complex	0	RET	$.isNaN()
294	554	8	Complex.java	cos	THIS	Complex	0	RET	$.isNaN()
295	588	8	Complex.java	cosh	THIS	Complex	0	RET	$.isNaN()
296	623	8	Complex.java	exp	THIS	Complex	0	RET	$.isNaN()
297	661	8	Complex.java	log	THIS	Complex	0	RET	$.isNaN()
298	687	8	Complex.java	pow	x	Complex	0	NullPointerException	$ == null
299	720	8	Complex.java	sin	THIS	Complex	0	RET	$.isNaN()
300	754	8	Complex.java	sinh	THIS	Complex	0	RET	$.isNaN()
301	796	8	Complex.java	sqrt	THIS	Complex	0	RET	$.isNaN()
302	800	8	Complex.java	sqrt	THIS	Complex	0	RET	$.imaginary == 0.0
302	800	8	Complex.java	sqrt	THIS	Complex	0	RET	$.real == 0.0
303	805	8	Complex.java	sqrt	THIS	Complex	1	RET	$.real >= 0.0
304	862	8	Complex.java	tan	THIS	Complex	0	RET	$.isNaN()
305	900	8	Complex.java	tanh	THIS	Complex	0	RET	$.isNaN()
306	951	8	Complex.java	nthRoot	n	int	0	DEF	$ <= 0
307	959	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isNaN()
308	964	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isInfinite()
35264	976	8	Complex.java	nthRoot	k	int	0	NIL-FOR	$ < n
35264	976	8	Complex.java	nthRoot	n	int	0	NIL-FOR	k < $
260	156	8	ComplexFormat.java	format	im	double	1	DEF	$ < 0.0
261	160	15	ComplexFormat.java	format	im	double	0	DEF	Double.isNaN($)
261	160	15	ComplexFormat.java	format	im	double	0	DEF	$ > 0.0
262	188	8	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Complex
263	190	15	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Number
264	255	8	ComplexFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
265	278	8	ComplexFormat.java	parse	re	Number	0	RET	$ == null
266	314	8	ComplexFormat.java	parse	im	Number	0	RET	$ == null
267	322	8	ComplexFormat.java	parse	THIS	ComplexFormat	0	RET	$.parseFixedstring(source, $.getImaginaryCharacter(), pos)
267	322	8	ComplexFormat.java	parse	source	String	0	RET	parseFixedstring($, getImaginaryCharacter(), pos)
267	322	8	ComplexFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, getImaginaryCharacter(), $)
268	350	8	ComplexFormat.java	setImaginaryCharacter	imaginaryCharacter	String	0	DEF	$ == null
268	350	8	ComplexFormat.java	setImaginaryCharacter	imaginaryCharacter	String	0	DEF	$.length() == 0
269	364	8	ComplexFormat.java	setImaginaryFormat	imaginaryFormat	NumberFormat	0	DEF	$ == null
270	378	8	ComplexFormat.java	setRealFormat	realFormat	NumberFormat	0	DEF	$ == null
259	63	8	ComplexUtils.java	polar2Complex	r	double	0	DEF	$ < 0
62	84	9	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
62	84	9	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
35229	86	13	CompositeFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
35229	86	13	CompositeFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
35229	86	13	CompositeFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
63	91	13	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
63	91	13	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
64	120	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	$ < source.length()
64	120	8	CompositeFormat.java	parseNumber	source	String	0	DEF	endIndex < $.length()
65	121	12	CompositeFormat.java	parseNumber	sb	StringBuffer	0	DEF	source.substring(startIndex, endIndex).compareTo($.toString()) == 0
65	121	12	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	source.substring($, endIndex).compareTo(sb.toString()) == 0
65	121	12	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	source.substring(startIndex, $).compareTo(sb.toString()) == 0
65	121	12	CompositeFormat.java	parseNumber	source	String	0	DEF	$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
66	147	8	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	$ == endIndex
66	147	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	startIndex == $
35230	152	12	CompositeFormat.java	parseNumber	THIS	CompositeFormat	0	NIL-FOR	i < special.$.length
35230	152	12	CompositeFormat.java	parseNumber	i	int	0	NIL-FOR	$ < special.length
35230	152	12	CompositeFormat.java	parseNumber	special	double[]	0	NIL-FOR	i < $.length
67	154	16	CompositeFormat.java	parseNumber	number	Number	0	DEF	$ != null
68	175	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	$ >= source.length()
68	175	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	source.substring($, endIndex).compareTo(expected) != 0
68	175	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	source.substring(startIndex, $).compareTo(expected) != 0
68	175	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	$ > source.length()
68	175	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	startIndex >= $.length()
68	175	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	$.substring(startIndex, endIndex).compareTo(expected) != 0
68	175	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	endIndex > $.length()
68	175	8	CompositeFormat.java	parseFixedstring	expected	String	0	RET	source.substring(startIndex, endIndex).compareTo($) != 0
69	210	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isNaN($)
69	210	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isInfinite($)
35224	135	8	ContinuedFraction.java	evaluate	n	int	0	NIL-WHILE	$ < maxIterations
35224	135	8	ContinuedFraction.java	evaluate	relativeError	double	0	NIL-WHILE	$ > epsilon
35224	135	8	ContinuedFraction.java	evaluate	epsilon	double	0	NIL-WHILE	relativeError > $
35224	135	8	ContinuedFraction.java	evaluate	maxIterations	int	0	NIL-WHILE	n < $
1	141	12	ContinuedFraction.java	evaluate	p2	double	0	ConvergenceException	Double.isInfinite($)
1	141	12	ContinuedFraction.java	evaluate	q2	double	0	ConvergenceException	Double.isInfinite($)
2	143	16	ContinuedFraction.java	evaluate	a	double	1	DEF	$ != 0.0
3	146	23	ContinuedFraction.java	evaluate	b	double	1	DEF	$ != 0
4	167	8	ContinuedFraction.java	evaluate	n	int	0	MaxIterationsExceededException	$ >= maxIterations
4	167	8	ContinuedFraction.java	evaluate	maxIterations	int	0	MaxIterationsExceededException	n >= $
1630	126	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	RET	model.$.steps.size() == 0
1630	126	4	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	RET	$.steps.size() == 0
1631	130	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	1	DEF	$.steps.size() == 0
1632	135	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DEF	$.getInterpolatedState().length != model.getInterpolatedState().length
1632	135	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DEF	getInterpolatedState().length != $.getInterpolatedState().length
1633	141	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DEF	$.forward ^ model.$.forward
1633	141	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DEF	forward ^ $.forward
1634	151	6	ContinuousOutputModel.java	append	step	double	0	DEF	Math.abs(gap) > 1.0e-3 * Math.abs($)
1634	151	6	ContinuousOutputModel.java	append	gap	double	0	DEF	Math.abs($) > 1.0e-3 * Math.abs(step)
1635	200	4	ContinuousOutputModel.java	handleStep	THIS	ContinuousOutputModel	0	DEF	$.steps.size() == 0
1636	207	4	ContinuousOutputModel.java	handleStep	isLast	boolean	0	DEF	$
1637	265	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMin) <= 0
1637	265	6	ContinuousOutputModel.java	setInterpolatedTime	sMin	StepInterpolator	0	RET	locatePoint(time, $) <= 0
1637	265	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMin) <= 0
1638	270	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMax) >= 0
1638	270	6	ContinuousOutputModel.java	setInterpolatedTime	sMax	StepInterpolator	0	RET	locatePoint(time, $) >= 0
1638	270	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMax) >= 0
36602	277	6	ContinuousOutputModel.java	setInterpolatedTime	iMin	int	0	NIL-WHILE	iMax - $ > 5
36602	277	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	$ - iMin > 5
1639	282	8	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ < 0
1640	285	15	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ > 0
1641	299	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	Math.abs(tMax - $) < 1e-6
1641	299	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	Math.abs($ - tMin) < 1e-6
1641	299	8	ContinuousOutputModel.java	setInterpolatedTime	tMin	double	1	DEF	Math.abs(tMed - $) < 1e-6
1641	299	8	ContinuousOutputModel.java	setInterpolatedTime	tMax	double	1	DEF	Math.abs($ - tMed) < 1e-6
1642	322	8	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.index < low
1642	322	8	ContinuousOutputModel.java	setInterpolatedTime	low	int	1	DEF	index < $
1643	324	15	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	DEF	$.index > high
1643	324	15	ContinuousOutputModel.java	setInterpolatedTime	high	int	0	DEF	index > $
36603	332	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.locatePoint(time, $.steps.get($.index)) > 0
36603	332	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.index <= iMax
36603	332	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	index <= $
36603	332	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	NIL-WHILE	locatePoint($, steps.get(index)) > 0
1644	358	4	ContinuousOutputModel.java	locatePoint	THIS	ContinuousOutputModel	0	RET	$.forward
1645	359	6	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getPreviousTime()
1645	359	6	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getPreviousTime()
1646	361	13	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getCurrentTime()
1646	361	13	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getCurrentTime()
1647	367	4	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getPreviousTime()
1647	367	4	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getPreviousTime()
1648	369	11	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getCurrentTime()
1648	369	11	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getCurrentTime()
1298	102	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	THIS	CorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != order
1298	102	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	DimensionMismatchException	mean.length != $
1298	102	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != order
36329	131	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	i	int	0	NIL-FOR	$ < order
36329	131	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	NIL-FOR	i < $
36330	196	8	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
36330	196	8	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
36331	201	8	CorrelatedRandomVectorGenerator.java	decompose	loop	boolean	0	NIL-FOR	$
36332	205	12	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
36332	205	12	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
1299	208	16	CorrelatedRandomVectorGenerator.java	decompose	ii	int	0	DEF	c[$][$] > c[isi][isi]
1299	208	16	CorrelatedRandomVectorGenerator.java	decompose	isi	int	0	DEF	c[ii][ii] > c[$][$]
1299	208	16	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	0	DEF	$[ii][ii] > $[isi][isi]
1300	215	12	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	DEF	swap[$.rank] != $.rank
1300	215	12	CorrelatedRandomVectorGenerator.java	decompose	swap	int[]	0	DEF	$[rank] != rank
1301	223	12	CorrelatedRandomVectorGenerator.java	decompose	ir	int	1	NotPositiveDefiniteMatrixException	c[$][$] < small
1301	223	12	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	1	NotPositiveDefiniteMatrixException	$[ir][ir] < small
1301	223	12	CorrelatedRandomVectorGenerator.java	decompose	small	double	1	NotPositiveDefiniteMatrixException	c[ir][ir] < $
1302	225	16	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	NotPositiveDefiniteMatrixException	$.rank == 0
36333	230	16	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
36333	230	16	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
1303	231	20	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NotPositiveDefiniteMatrixException	c[index[$]][index[$]] < -small
1303	231	20	CorrelatedRandomVectorGenerator.java	decompose	c	double[][]	0	NotPositiveDefiniteMatrixException	$[index[i]][index[i]] < -small
1303	231	20	CorrelatedRandomVectorGenerator.java	decompose	index	int[]	0	NotPositiveDefiniteMatrixException	c[$[i]][$[i]] < -small
1303	231	20	CorrelatedRandomVectorGenerator.java	decompose	small	double	0	NotPositiveDefiniteMatrixException	c[index[i]][index[i]] < -$
36334	249	16	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
36334	249	16	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
36335	254	20	CorrelatedRandomVectorGenerator.java	decompose	j	int	0	NIL-FOR	$ < i
36335	254	20	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	j < $
36336	271	8	CorrelatedRandomVectorGenerator.java	decompose	i	int	0	NIL-FOR	$ < order
36336	271	8	CorrelatedRandomVectorGenerator.java	decompose	order	int	0	NIL-FOR	i < $
36337	272	12	CorrelatedRandomVectorGenerator.java	decompose	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.rank
36337	272	12	CorrelatedRandomVectorGenerator.java	decompose	j	int	0	NIL-FOR	$ < rank
36338	286	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < $.rank
36338	286	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < rank
36339	292	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < correlated.$.length
36339	292	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < correlated.length
36339	292	8	CorrelatedRandomVectorGenerator.java	nextVector	correlated	double[]	0	NIL-FOR	i < $.length
36340	294	12	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.rank
36340	294	12	CorrelatedRandomVectorGenerator.java	nextVector	j	int	0	NIL-FOR	$ < rank
36302	163	8	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	$ < dimension
36302	163	8	Covariance.java	computeCovarianceMatrix	dimension	int	0	NIL-FOR	i < $
36303	164	12	Covariance.java	computeCovarianceMatrix	j	int	0	NIL-FOR	$ < i
36303	164	12	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	j < $
1244	224	8	Covariance.java	covariance	THIS	Covariance	1	DEF	length == yArray.$.length
1244	224	8	Covariance.java	covariance	length	int	1	DEF	$ == yArray.length
1244	224	8	Covariance.java	covariance	length	int	1	DEF	$ > 1
1244	224	8	Covariance.java	covariance	yArray	double[]	1	DEF	length == $.length
36304	227	12	Covariance.java	covariance	i	int	0	NIL-FOR	$ < length
36304	227	12	Covariance.java	covariance	length	int	0	NIL-FOR	i < $
1245	267	8	Covariance.java	checkSufficientData	nRows	int	0	DEF	$ < 2
1245	267	8	Covariance.java	checkSufficientData	nCols	int	0	DEF	$ < 2
171	46	8	DefaultTransformer.java	transform	o	Object	0	MathException	$ == null
172	50	8	DefaultTransformer.java	transform	o	Object	0	RET	$ instanceof Number
173	65	8	DefaultTransformer.java	equals	THIS	DefaultTransformer	0	RET	$ == other
173	65	8	DefaultTransformer.java	equals	other	Object	0	RET	this == $
174	68	8	DefaultTransformer.java	equals	other	Object	0	RET	$ == null
1144	151	8	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.windowSize != INFINITE_WINDOW
1145	152	12	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.getN() == $.windowSize
1146	154	19	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	0	DEF	$.getN() < $.windowSize
1147	215	8	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	0	DEF	$.getN() > 0
1148	216	12	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	1	DEF	$.getN() > 1
1149	314	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < 1
1150	315	12	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
1151	326	8	DescriptiveStatistics.java	setWindowSize	THIS	DescriptiveStatistics	0	DEF	windowSize < $.eDA.getNumElements()
1151	326	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
1151	326	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < eDA.getNumElements()
1152	387	8	DescriptiveStatistics.java	getPercentile	THIS	DescriptiveStatistics	1	DEF	$.percentileImpl instanceof Percentile
36226	152	8	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	$ < n
36226	152	8	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	i < $
36227	154	12	DirectSearchOptimizer.java	setStartConfiguration	j	int	0	NIL-FOR	$ < i + 1
36227	154	12	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	j < $ + 1
1047	155	16	DirectSearchOptimizer.java	setStartConfiguration	j	int	0	DEF	steps[$] == 0.0
1047	155	16	DirectSearchOptimizer.java	setStartConfiguration	steps	double[]	0	DEF	$[j] == 0.0
1048	179	8	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	DEF	$ < 0
36228	187	8	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	$ < n + 1
36228	187	8	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	i < $ + 1
1049	192	12	DirectSearchOptimizer.java	setStartConfiguration	THIS	DirectSearchOptimizer	0	DEF	refI.$.length != n
1049	192	12	DirectSearchOptimizer.java	setStartConfiguration	refI	double[]	0	DEF	$.length != n
1049	192	12	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	DEF	refI.length != $
36229	196	12	DirectSearchOptimizer.java	setStartConfiguration	j	int	0	NIL-FOR	$ < i
36229	196	12	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	NIL-FOR	j < $
36230	199	16	DirectSearchOptimizer.java	setStartConfiguration	k	int	0	NIL-FOR	$ < n
36230	199	16	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	k < $
1050	200	20	DirectSearchOptimizer.java	setStartConfiguration	k	int	0	DEF	refI[$] != refJ[$]
1050	200	20	DirectSearchOptimizer.java	setStartConfiguration	refJ	double[]	0	DEF	refI[k] != $[k]
1050	200	20	DirectSearchOptimizer.java	setStartConfiguration	refI	double[]	0	DEF	$[k] != refJ[k]
1051	205	16	DirectSearchOptimizer.java	setStartConfiguration	allEquals	boolean	0	DEF	$
1052	212	12	DirectSearchOptimizer.java	setStartConfiguration	i	int	0	DEF	$ > 0
36231	214	16	DirectSearchOptimizer.java	setStartConfiguration	k	int	0	NIL-FOR	$ < n
36231	214	16	DirectSearchOptimizer.java	setStartConfiguration	n	int	0	NIL-FOR	k < $
1053	270	8	DirectSearchOptimizer.java	optimize	THIS	DirectSearchOptimizer	0	DEF	$.startConfiguration == null
1054	299	12	DirectSearchOptimizer.java	optimize	THIS	DirectSearchOptimizer	0	RET	$.iterations > 0
36232	301	16	DirectSearchOptimizer.java	optimize	THIS	DirectSearchOptimizer	0	NIL-FOR	i < $.simplex.$.length
36232	301	16	DirectSearchOptimizer.java	optimize	i	int	0	NIL-FOR	$ < simplex.length
1055	304	16	DirectSearchOptimizer.java	optimize	converged	boolean	0	RET	$
1056	324	8	DirectSearchOptimizer.java	incrementIterationsCounter	THIS	DirectSearchOptimizer	0	MaxIterationsExceededException	++$.iterations > $.maxIterations
1057	350	8	DirectSearchOptimizer.java	evaluate	THIS	DirectSearchOptimizer	0	MaxEvaluationsExceededException	++$.evaluations > $.maxEvaluations
1058	366	8	DirectSearchOptimizer.java	buildSimplex	THIS	DirectSearchOptimizer	0	DEF	n != $.startConfiguration.$.length
1058	366	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	DEF	$ != startConfiguration.length
36233	376	8	DirectSearchOptimizer.java	buildSimplex	i	int	0	NIL-FOR	$ < n
36233	376	8	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	i < $
36234	379	12	DirectSearchOptimizer.java	buildSimplex	k	int	0	NIL-FOR	$ < n
36234	379	12	DirectSearchOptimizer.java	buildSimplex	n	int	0	NIL-FOR	k < $
36235	396	8	DirectSearchOptimizer.java	evaluateSimplex	THIS	DirectSearchOptimizer	0	NIL-FOR	i < $.simplex.$.length
36235	396	8	DirectSearchOptimizer.java	evaluateSimplex	i	int	0	NIL-FOR	$ < simplex.length
1059	399	12	DirectSearchOptimizer.java	evaluateSimplex	vertex	RealPointValuePair	0	DEF	Double.isNaN($.getValue())
36236	416	8	DirectSearchOptimizer.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < n
36236	416	8	DirectSearchOptimizer.java	replaceWorstPoint	n	int	0	NIL-FOR	i < $
1060	417	12	DirectSearchOptimizer.java	replaceWorstPoint	THIS	DirectSearchOptimizer	0	DEF	comparator.compare($.simplex[i], pointValuePair) > 0
1060	417	12	DirectSearchOptimizer.java	replaceWorstPoint	i	int	0	DEF	comparator.compare(simplex[$], pointValuePair) > 0
1060	417	12	DirectSearchOptimizer.java	replaceWorstPoint	pointValuePair	RealPointValuePair	0	DEF	comparator.compare(simplex[i], $) > 0
1060	417	12	DirectSearchOptimizer.java	replaceWorstPoint	comparator	Comparator<RealPointValuePair>	0	DEF	$.compare(simplex[i], pointValuePair) > 0
36611	103	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
36611	103	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
36612	104	12	DividedDifferenceInterpolator.java	computeDividedDifference	j	int	0	NIL-FOR	$ < n-i
36612	104	12	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	j < n-$
36612	104	12	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	j < $-i
1659	106	16	DividedDifferenceInterpolator.java	computeDividedDifference	denominator	double	0	DuplicateSampleAbscissaException	$ == 0.0
36528	138	4	DormandPrince54Integrator.java	estimateError	THIS	DormandPrince54Integrator	0	NIL-FOR	j < y0.$.length
36528	138	4	DormandPrince54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
36528	138	4	DormandPrince54Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
1485	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	THIS	DormandPrince54StepInterpolator	1	DEF	interpolator.$.v1 == null
1485	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	interpolator	DormandPrince54StepInterpolator	1	DEF	$.v1 == null
1486	171	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.vectorsInitialized
1487	173	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.v1 == null
36493	183	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
36493	183	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
36494	206	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
36494	206	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
36527	252	4	DormandPrince853Integrator.java	estimateError	THIS	DormandPrince853Integrator	0	NIL-FOR	j < y0.$.length
36527	252	4	DormandPrince853Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
36527	252	4	DormandPrince853Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
1547	273	4	DormandPrince853Integrator.java	estimateError	den	double	0	DEF	$ <= 0.0
1571	247	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	1	DEF	interpolator.$.currentState == null
1571	247	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	interpolator	DormandPrince853StepInterpolator	1	DEF	$.currentState == null
36547	258	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
36547	258	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < yDotKLast.length
36548	265	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
36548	265	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < v.length
36549	292	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
36549	292	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < yDotKLast.length
36550	297	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
36550	297	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < v.length
1572	318	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.vectorsInitialized
1573	320	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.v == null
36551	322	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < 7
36552	331	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
36552	331	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
36553	349	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < D.$.length
36553	349	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < D.length
36554	371	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
36554	371	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1574	392	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	RET	$.currentState == null
36555	401	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
36555	401	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
36556	410	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
36556	410	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
36557	420	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
36557	420	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
36558	444	4	DormandPrince853StepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < dimension
36558	444	4	DormandPrince853StepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	i < $
36559	467	4	DormandPrince853StepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < dimension
36559	467	4	DormandPrince853StepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	i < $
869	97	8	EigenDecompositionImpl.java	EigenDecompositionImpl	THIS	EigenDecompositionImpl	1	DEF	$.isSymmetric(matrix)
869	97	8	EigenDecompositionImpl.java	EigenDecompositionImpl	matrix	RealMatrix	1	DEF	isSymmetric($)
36038	127	8	EigenDecompositionImpl.java	EigenDecompositionImpl	i	int	0	NIL-FOR	$<size
36038	127	8	EigenDecompositionImpl.java	EigenDecompositionImpl	size	int	0	NIL-FOR	i<$
36039	143	8	EigenDecompositionImpl.java	isSymmetric	i	int	0	NIL-FOR	$ < rows
36039	143	8	EigenDecompositionImpl.java	isSymmetric	rows	int	0	NIL-FOR	i < $
36040	144	12	EigenDecompositionImpl.java	isSymmetric	j	int	0	NIL-FOR	$ < columns
36040	144	12	EigenDecompositionImpl.java	isSymmetric	columns	int	0	NIL-FOR	j < $
870	147	16	EigenDecompositionImpl.java	isSymmetric	mij	double	0	RET	Math.abs($ - mji) > (Math.max(Math.abs($), Math .abs(mji)) * eps)
870	147	16	EigenDecompositionImpl.java	isSymmetric	mji	double	0	RET	Math.abs(mij - $) > (Math.max(Math.abs(mij), Math .abs($)) * eps)
870	147	16	EigenDecompositionImpl.java	isSymmetric	eps	double	0	RET	Math.abs(mij - mji) > (Math.max(Math.abs(mij), Math .abs(mji)) * $)
871	159	8	EigenDecompositionImpl.java	getV	THIS	EigenDecompositionImpl	0	DEF	$.cachedV == null
36041	162	12	EigenDecompositionImpl.java	getV	k	int	0	NIL-FOR	$ < m
36041	162	12	EigenDecompositionImpl.java	getV	m	int	0	NIL-FOR	k < $
872	173	8	EigenDecompositionImpl.java	getD	THIS	EigenDecompositionImpl	0	DEF	$.cachedD == null
873	183	8	EigenDecompositionImpl.java	getVT	THIS	EigenDecompositionImpl	0	DEF	$.cachedVt == null
36042	186	12	EigenDecompositionImpl.java	getVT	k	int	0	NIL-FOR	$ < m
36042	186	12	EigenDecompositionImpl.java	getVT	m	int	0	NIL-FOR	k < $
36043	476	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n - 1
36043	476	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $ - 1
36044	485	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
36044	485	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
874	486	12	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	DEF	Math.abs($.realEigenvalues[i])>maxAbsoluteValue
874	486	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	Math.abs(realEigenvalues[$])>maxAbsoluteValue
874	486	12	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	Math.abs(realEigenvalues[i])>$
875	489	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	Math.abs(e[$])>maxAbsoluteValue
875	489	12	EigenDecompositionImpl.java	findEigenVectors	e	double[]	0	DEF	Math.abs($[i])>maxAbsoluteValue
875	489	12	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	Math.abs(e[i])>$
876	494	8	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$!=0.0
36045	495	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
36045	495	12	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
877	496	16	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	DEF	Math.abs($.realEigenvalues[i])<=MathUtils.EPSILON*maxAbsoluteValue
877	496	16	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	Math.abs(realEigenvalues[$])<=MathUtils.EPSILON*maxAbsoluteValue
877	496	16	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	Math.abs(realEigenvalues[i])<=MathUtils.EPSILON*$
878	499	16	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	Math.abs(e[$])<=MathUtils.EPSILON*maxAbsoluteValue
878	499	16	EigenDecompositionImpl.java	findEigenVectors	e	double[]	0	DEF	Math.abs($[i])<=MathUtils.EPSILON*maxAbsoluteValue
878	499	16	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	Math.abs(e[i])<=MathUtils.EPSILON*$
36046	505	8	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
36046	505	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	j < $
36047	508	12	EigenDecompositionImpl.java	findEigenVectors	m	int	0	NIL-DOWHILE	$ != j
36047	508	12	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-DOWHILE	m != $
36048	509	16	EigenDecompositionImpl.java	findEigenVectors	m	int	0	NIL-FOR	$ < n - 1
36048	509	16	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	m < $ - 1
879	511	20	EigenDecompositionImpl.java	findEigenVectors	delta	double	0	DEF	Math.abs(e[m]) + $ == $
879	511	20	EigenDecompositionImpl.java	findEigenVectors	m	int	0	DEF	Math.abs(e[$]) + delta == delta
879	511	20	EigenDecompositionImpl.java	findEigenVectors	e	double[]	0	DEF	Math.abs($[m]) + delta == delta
880	515	16	EigenDecompositionImpl.java	findEigenVectors	m	int	0	MaxIterationsExceededException	$ != j
880	515	16	EigenDecompositionImpl.java	findEigenVectors	j	int	0	MaxIterationsExceededException	m != $
881	516	20	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	MaxIterationsExceededException	its == $.maxIter
881	516	20	EigenDecompositionImpl.java	findEigenVectors	its	int	0	MaxIterationsExceededException	$ == maxIter
882	522	20	EigenDecompositionImpl.java	findEigenVectors	q	double	1	DEF	$ < 0.0
36049	531	20	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ >= j
36049	531	20	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-FOR	i >= $
883	534	24	EigenDecompositionImpl.java	findEigenVectors	p	double	1	DEF	Math.abs($) >= Math.abs(q)
883	534	24	EigenDecompositionImpl.java	findEigenVectors	q	double	1	DEF	Math.abs(p) >= Math.abs($)
884	547	24	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	e[$ + 1] == 0.0
884	547	24	EigenDecompositionImpl.java	findEigenVectors	e	double[]	0	DEF	$[i + 1] == 0.0
36050	557	24	EigenDecompositionImpl.java	findEigenVectors	ia	int	0	NIL-FOR	$ < n
36050	557	24	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	ia < $
885	563	20	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	e[$ + 1] == 0.0
885	563	20	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	$ >= j
885	563	20	EigenDecompositionImpl.java	findEigenVectors	j	int	0	DEF	i >= $
885	563	20	EigenDecompositionImpl.java	findEigenVectors	e	double[]	0	DEF	$[i + 1] == 0.0
36051	573	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
36051	573	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
36052	576	12	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
36052	576	12	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	j < $
886	577	16	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	DEF	$.realEigenvalues[j] > p
886	577	16	EigenDecompositionImpl.java	findEigenVectors	j	int	0	DEF	realEigenvalues[$] > p
886	577	16	EigenDecompositionImpl.java	findEigenVectors	p	double	0	DEF	realEigenvalues[j] > $
887	582	12	EigenDecompositionImpl.java	findEigenVectors	k	int	0	DEF	$ != i
887	582	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	k != $
36053	585	16	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
36053	585	16	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	j < $
36054	595	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
36054	595	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
888	596	12	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	DEF	Math.abs($.realEigenvalues[i])>maxAbsoluteValue
888	596	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	Math.abs(realEigenvalues[$])>maxAbsoluteValue
888	596	12	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	Math.abs(realEigenvalues[i])>$
889	601	8	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$!=0.0
36055	602	12	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
36055	602	12	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
890	603	16	EigenDecompositionImpl.java	findEigenVectors	THIS	EigenDecompositionImpl	0	DEF	Math.abs($.realEigenvalues[i])<MathUtils.EPSILON*maxAbsoluteValue
890	603	16	EigenDecompositionImpl.java	findEigenVectors	i	int	0	DEF	Math.abs(realEigenvalues[$])<MathUtils.EPSILON*maxAbsoluteValue
890	603	16	EigenDecompositionImpl.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	Math.abs(realEigenvalues[i])<MathUtils.EPSILON*$
36056	610	8	EigenDecompositionImpl.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
36056	610	8	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	i < $
36057	611	12	EigenDecompositionImpl.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
36057	611	12	EigenDecompositionImpl.java	findEigenVectors	n	int	0	NIL-FOR	j < $
36371	80	8	ElitisticListPopulation.java	nextGeneration	i	int	0	NIL-FOR	$<oldChromosomes.size()
36371	80	8	ElitisticListPopulation.java	nextGeneration	oldChromosomes	List<Chromosome>	0	NIL-FOR	i<$.size()
1365	95	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	IllegalArgumentException	$ > 1
1365	95	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	IllegalArgumentException	$ < 0
1560	204	4	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1560	204	4	EmbeddedRungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
1561	212	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.requiresDenseOutput()
1561	212	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
36538	232	4	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
36539	237	6	EmbeddedRungeKuttaIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
1562	239	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
1562	239	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1563	244	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1564	246	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.vecAbsoluteTolerance == null
36540	247	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
36540	247	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
36540	247	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
36541	251	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
36541	251	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
36541	251	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
36542	263	8	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
36542	263	8	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
36543	265	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
36543	265	10	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
36543	265	10	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
36544	267	12	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
36544	267	12	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
36545	278	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
36545	278	8	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
36545	278	8	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
36546	280	10	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
36546	280	10	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
1565	288	8	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1566	292	10	EmbeddedRungeKuttaIntegrator.java	integrate	interpolator	AbstractStepInterpolator	1	DEF	manager.evaluateStep($)
1566	292	10	EmbeddedRungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolator)
1567	294	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	Math.abs(dt) <= Math.ulp($.stepStart)
1567	294	14	EmbeddedRungeKuttaIntegrator.java	integrate	dt	double	1	DEF	Math.abs($) <= Math.ulp(stepStart)
1568	329	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
1569	334	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	manager.reset($.stepStart, y)
1569	334	6	EmbeddedRungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1569	334	6	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1569	334	6	EmbeddedRungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1570	340	6	EmbeddedRungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1304	140	12	EmpiricalDistributionImpl.java	load	THIS	EmpiricalDistributionImpl	0	DEF	$.sampleStats.getN() == 0
1305	328	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	DEF	$.binStats.isEmpty()
36341	331	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
36341	331	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount
36342	345	8	EmpiricalDistributionImpl.java	fillBinStats	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount-1
36342	345	8	EmpiricalDistributionImpl.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount-1
1306	372	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	DEF	$.loaded
36343	380	8	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount
36343	380	8	EmpiricalDistributionImpl.java	getNextValue	i	int	0	NIL-FOR	$ < binCount
1307	381	11	EmpiricalDistributionImpl.java	getNextValue	THIS	EmpiricalDistributionImpl	0	RET	x <= $.upperBounds[i]
1307	381	11	EmpiricalDistributionImpl.java	getNextValue	i	int	0	RET	x <= upperBounds[$]
1307	381	11	EmpiricalDistributionImpl.java	getNextValue	x	double	0	RET	$ <= upperBounds[i]
1308	383	15	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	0	RET	$.getN() > 0
1309	384	19	EmpiricalDistributionImpl.java	getNextValue	stats	SummaryStatistics	1	RET	$.getStandardDeviation() > 0
36344	443	8	EmpiricalDistributionImpl.java	getUpperBounds	THIS	EmpiricalDistributionImpl	0	NIL-FOR	i < $.binCount - 1
36344	443	8	EmpiricalDistributionImpl.java	getUpperBounds	i	int	0	NIL-FOR	$ < binCount - 1
1433	52	8	Erf.java	erf	x	double	0	DEF	$ < 0
36289	64	12	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
36289	64	12	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
36289	64	12	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
36290	68	8	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
36290	68	8	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
36290	68	8	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
1236	77	8	EuclideanIntegerPoint.java	equals	other	Object	0	RET	$ instanceof EuclideanIntegerPoint
1237	81	8	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	RET	$.point.$.length != otherPoint.$.length
1237	81	8	EuclideanIntegerPoint.java	equals	otherPoint	int[]	0	RET	point.length != $.length
36291	84	8	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < $.point.$.length
36291	84	8	EuclideanIntegerPoint.java	equals	i	int	0	NIL-FOR	$ < point.length
1238	85	12	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	RET	$.point[i] != otherPoint[i]
1238	85	12	EuclideanIntegerPoint.java	equals	i	int	0	RET	point[$] != otherPoint[$]
1238	85	12	EuclideanIntegerPoint.java	equals	otherPoint	int[]	0	RET	point[i] != $[i]
36292	107	8	EuclideanIntegerPoint.java	toString	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < coordinates.$.length
36292	107	8	EuclideanIntegerPoint.java	toString	i	int	0	NIL-FOR	$ < coordinates.length
36292	107	8	EuclideanIntegerPoint.java	toString	coordinates	int[]	0	NIL-FOR	i < $.length
1239	109	12	EuclideanIntegerPoint.java	toString	THIS	EuclideanIntegerPoint	0	DEF	i < coordinates.$.length - 1
1239	109	12	EuclideanIntegerPoint.java	toString	i	int	0	DEF	$ < coordinates.length - 1
1239	109	12	EuclideanIntegerPoint.java	toString	coordinates	int[]	0	DEF	i < $.length - 1
36580	84	4	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
36580	84	4	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
36600	180	12	EventState.java	evaluateStep	i	int	0	NIL-FOR	$ < n
36600	180	12	EventState.java	evaluateStep	n	int	0	NIL-FOR	i < $
1619	188	16	EventState.java	evaluateStep	THIS	EventState	1	FunctionEvaluationException:RET	$.g0Positive ^ (gb >= 0)
1619	188	16	EventState.java	evaluateStep	gb	double	1	FunctionEvaluationException:RET	g0Positive ^ ($ >= 0)
1620	191	20	EventState.java	evaluateStep	gb	double	0	DEF	ga * $ > 0
1620	191	20	EventState.java	evaluateStep	ga	double	0	DEF	$ * gb > 0
36601	200	24	EventState.java	evaluateStep	k	int	0	NIL-FOR	$ < 4
36601	200	24	EventState.java	evaluateStep	gb	double	0	NIL-FOR	ga * $ > 0
36601	200	24	EventState.java	evaluateStep	ga	double	0	NIL-FOR	$ * gb > 0
1621	205	24	EventState.java	evaluateStep	gb	double	0	DEF	ga * $ > 0
1621	205	24	EventState.java	evaluateStep	ga	double	0	DEF	$ * gb > 0
1622	230	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	Math.abs(root - $.previousEventTime) <= $.convergence
1622	230	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	Math.abs(root - ta) <= $.convergence
1622	230	20	EventState.java	evaluateStep	root	double	1	DEF	Math.abs($ - previousEventTime) <= convergence
1622	230	20	EventState.java	evaluateStep	root	double	1	DEF	Math.abs($ - ta) <= convergence
1622	230	20	EventState.java	evaluateStep	ta	double	1	DEF	Math.abs(root - $) <= convergence
1623	235	27	EventState.java	evaluateStep	THIS	EventState	0	RET	Double.isNaN($.previousEventTime)
1623	235	27	EventState.java	evaluateStep	THIS	EventState	0	RET	Math.abs($.previousEventTime - root) > $.convergence
1623	235	27	EventState.java	evaluateStep	root	double	0	RET	Math.abs(previousEventTime - $) > convergence
1624	238	24	EventState.java	evaluateStep	THIS	EventState	0	RET	Math.abs(t1 - $.pendingEventTime) <= $.convergence
1624	238	24	EventState.java	evaluateStep	THIS	EventState	0	RET	$.pendingEvent
1624	238	24	EventState.java	evaluateStep	t1	double	0	RET	Math.abs($ - pendingEventTime) <= convergence
1625	266	12	EventState.java	evaluateStep	cause	Throwable	1	DEF	$ != null
1625	266	12	EventState.java	evaluateStep	cause	Throwable	1	DEF	$ instanceof DerivativeException
1626	268	19	EventState.java	evaluateStep	cause	Throwable	0	DEF	$ != null
1626	268	19	EventState.java	evaluateStep	cause	Throwable	0	DEF	$ instanceof EventException
1627	299	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	$.pendingEvent
1628	330	8	EventState.java	reset	THIS	EventState	0	RET	$.pendingEvent
1629	334	8	EventState.java	reset	THIS	EventState	0	DEF	$.nextAction == EventHandler.RESET_STATE
514	53	8	ExponentialDistributionImpl.java	setMean	mean	double	0	DEF	$ <= 0.0
515	75	8	ExponentialDistributionImpl.java	density	x	Double	0	RET	$ < 0
516	98	8	ExponentialDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
517	122	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ > 1.0
517	122	8	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ < 0.0
518	125	15	ExponentialDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1.0
519	160	8	ExponentialDistributionImpl.java	getDomainUpperBound	p	double	1	RET	$ < .5
520	182	8	ExponentialDistributionImpl.java	getInitialDomain	p	double	1	RET	$ < .5
462	77	8	FDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
463	106	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
464	109	8	FDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
465	155	8	FDistributionImpl.java	getInitialDomain	d	double	0	DEF	$ > 2.0
466	169	8	FDistributionImpl.java	setNumeratorDegreesOfFreedom	degreesOfFreedom	double	0	DEF	$ <= 0.0
467	191	8	FDistributionImpl.java	setDenominatorDegreesOfFreedom	degreesOfFreedom	double	0	DEF	$ <= 0.0
1449	224	8	FastCosineTransformer.java	fct	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
1450	229	8	FastCosineTransformer.java	fct	n	int	0	RET	$ == 1
36452	240	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
36452	240	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
36453	254	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
36453	254	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
1455	320	8	FastFourierTransformer.java	fft	THIS	FastFourierTransformer	0	RET	f.$.length == 1
1455	320	8	FastFourierTransformer.java	fft	f	double	0	RET	$.length == 1
36462	329	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
36463	339	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < N
1456	368	8	FastFourierTransformer.java	fft	n	int	0	RET	$ == 1
1457	372	8	FastFourierTransformer.java	fft	n	int	0	RET	$ == 2
36464	380	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < n
36464	380	8	FastFourierTransformer.java	fft	n	int	0	NIL-FOR	i < $
36465	383	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	ii >= $
36465	383	12	FastFourierTransformer.java	fft	k	int	0	NIL-WHILE	$ > 0
36465	383	12	FastFourierTransformer.java	fft	ii	int	0	NIL-WHILE	$ >= k
36466	390	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < n
36466	390	8	FastFourierTransformer.java	fft	n	int	0	NIL-FOR	i < $
36467	405	8	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	$ < n
36467	405	8	FastFourierTransformer.java	fft	n	int	0	NIL-FOR	i < $
36468	407	12	FastFourierTransformer.java	fft	j	int	0	NIL-FOR	$ < n
36468	407	12	FastFourierTransformer.java	fft	n	int	0	NIL-FOR	j < $
36469	408	16	FastFourierTransformer.java	fft	k	int	0	NIL-FOR	$ < i
36469	408	16	FastFourierTransformer.java	fft	i	int	0	NIL-FOR	k < $
1458	449	8	FastFourierTransformer.java	sample	n	int	0	DEF	$ <= 0
36470	458	8	FastFourierTransformer.java	sample	i	int	0	NIL-FOR	$ < n
36470	458	8	FastFourierTransformer.java	sample	n	int	0	NIL-FOR	i < $
36471	473	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
36471	473	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
36471	473	8	FastFourierTransformer.java	scaleArray	f	double	0	NIL-FOR	i < $.length
36472	488	8	FastFourierTransformer.java	scaleArray	THIS	FastFourierTransformer	0	NIL-FOR	i < f.$.length
36472	488	8	FastFourierTransformer.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
36472	488	8	FastFourierTransformer.java	scaleArray	f	Complex	0	NIL-FOR	i < $.length
1459	511	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	DEF	$.isPowerOf2(d.$.length)
1459	511	8	FastFourierTransformer.java	verifyDataSet	d	double	0	DEF	isPowerOf2($.length)
1460	524	8	FastFourierTransformer.java	verifyDataSet	THIS	FastFourierTransformer	0	DEF	$.isPowerOf2(o.$.length)
1460	524	8	FastFourierTransformer.java	verifyDataSet	o	Object	0	DEF	isPowerOf2($.length)
1461	540	8	FastFourierTransformer.java	verifyInterval	lower	double	0	DEF	$ >= upper
1461	540	8	FastFourierTransformer.java	verifyInterval	upper	double	0	DEF	lower >= $
36473	567	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize.$.length
36473	567	8	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize.length
36473	567	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $.length
1462	587	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == dimensionSize.$.length
1462	587	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	1	DEF	subVector.length == $.length
1462	587	8	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == dimensionSize.length
36474	589	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
36474	589	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
36474	589	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
1463	595	12	FastFourierTransformer.java	mdfft	forward	boolean	1	DEF	$
36475	600	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
36475	600	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
36475	600	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
1464	607	12	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == d
1464	607	12	FastFourierTransformer.java	mdfft	d	int	1	DEF	subVector.length == $
1464	607	12	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == d
36476	613	16	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize[subVector.$.length]
36476	613	16	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[subVector.length]
36476	613	16	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[subVector.length]
36476	613	16	FastFourierTransformer.java	mdfft	subVector	int[]	0	NIL-FOR	i < dimensionSize[$.length]
1451	161	8	FastHadamardTransformer.java	fht	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
36454	173	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
36454	173	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
36455	181	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
36455	181	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
36456	187	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
36456	187	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
1452	212	8	FastHadamardTransformer.java	fht	n	int	0	DEF	FastFourierTransformer.isPowerOf2($)
36457	224	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
36457	224	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
36458	232	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
36458	232	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
36459	238	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
36459	238	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
1453	218	8	FastSineTransformer.java	fst	f	double	0	DEF	$[0] != 0.0
1454	224	8	FastSineTransformer.java	fst	n	int	0	RET	$ == 1
36460	233	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
36460	233	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
36461	245	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
36461	245	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
581	74	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	matrix	FieldMatrix<T>	0	NonSquareMatrixException	$.isSquare()
35473	87	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < m
35473	87	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	row < $
35474	94	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	NIL-FOR	$ < m
35474	94	8	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	col < $
35475	99	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < col
35475	99	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	NIL-FOR	row < $
35476	102	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	i	int	0	NIL-FOR	$ < row
35476	102	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	i < $
35477	110	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < m
35477	110	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	row < $
35478	113	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	i	int	0	NIL-FOR	$ < col
35478	113	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	NIL-FOR	i < $
582	118	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	THIS	FieldLUDecompositionImpl	0	DEF	$.lu[nonZero][col].equals($.field.getZero())
582	118	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	nonZero	int	0	DEF	lu[$][col].equals(field.getZero())
582	118	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	DEF	lu[nonZero][$].equals(field.getZero())
583	125	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	nonZero	int	0	RET	$ >= m
583	125	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	RET	nonZero >= $
584	131	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	nonZero	int	0	DEF	$ != col
584	131	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	col	int	0	DEF	nonZero != $
35479	133	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	i	int	0	NIL-FOR	$ < m
35479	133	16	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	i < $
35480	146	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	row	int	0	NIL-FOR	$ < m
35480	146	12	FieldLUDecompositionImpl.java	FieldLUDecompositionImpl	m	int	0	NIL-FOR	row < $
585	156	8	FieldLUDecompositionImpl.java	getL	THIS	FieldLUDecompositionImpl	0	DEF	$.singular
585	156	8	FieldLUDecompositionImpl.java	getL	THIS	FieldLUDecompositionImpl	0	DEF	$.cachedL == null
35481	159	12	FieldLUDecompositionImpl.java	getL	i	int	0	NIL-FOR	$ < m
35481	159	12	FieldLUDecompositionImpl.java	getL	m	int	0	NIL-FOR	i < $
35482	161	16	FieldLUDecompositionImpl.java	getL	j	int	0	NIL-FOR	$ < i
35482	161	16	FieldLUDecompositionImpl.java	getL	i	int	0	NIL-FOR	j < $
586	172	8	FieldLUDecompositionImpl.java	getU	THIS	FieldLUDecompositionImpl	0	DEF	$.singular
586	172	8	FieldLUDecompositionImpl.java	getU	THIS	FieldLUDecompositionImpl	0	DEF	$.cachedU == null
35483	175	12	FieldLUDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < m
35483	175	12	FieldLUDecompositionImpl.java	getU	m	int	0	NIL-FOR	i < $
35484	177	16	FieldLUDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < m
35484	177	16	FieldLUDecompositionImpl.java	getU	m	int	0	NIL-FOR	j < $
587	187	8	FieldLUDecompositionImpl.java	getP	THIS	FieldLUDecompositionImpl	0	DEF	$.cachedP == null
587	187	8	FieldLUDecompositionImpl.java	getP	THIS	FieldLUDecompositionImpl	0	DEF	$.singular
35485	190	12	FieldLUDecompositionImpl.java	getP	i	int	0	NIL-FOR	$ < m
35485	190	12	FieldLUDecompositionImpl.java	getP	m	int	0	NIL-FOR	i < $
588	204	8	FieldLUDecompositionImpl.java	getDeterminant	THIS	FieldLUDecompositionImpl	1	RET	$.singular
35486	209	12	FieldLUDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < m
35486	209	12	FieldLUDecompositionImpl.java	getDeterminant	m	int	0	NIL-FOR	i < $
1132	99	8	FirstMoment.java	increment	THIS	FirstMoment	0	DEF	$.n == 0
1380	42	8	FixedGenerationCount.java	FixedGenerationCount	maxGenerations	int	0	IllegalArgumentException	$ <= 0
1381	56	8	FixedGenerationCount.java	isSatisfied	THIS	FixedGenerationCount	0	RET	$.numGenerations < $.maxGenerations
1109	85	8	FourthMoment.java	increment	THIS	FourthMoment	0	DEF	$.n < 1
375	190	8	Fraction.java	Fraction	overflow	long	0	FractionConversionException	a0 > $
375	190	8	Fraction.java	Fraction	a0	long	0	FractionConversionException	$ > overflow
376	196	8	Fraction.java	Fraction	a0	long	0	RET	Math.abs($ - value) < epsilon
376	196	8	Fraction.java	Fraction	value	double	0	RET	Math.abs(a0 - $) < epsilon
376	196	8	Fraction.java	Fraction	epsilon	double	0	RET	Math.abs(a0 - value) < $
35269	212	8	Fraction.java	Fraction	stop	boolean	0	NIL-DOWHILE	$
377	218	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	p2 > $
377	218	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	q2 > $
377	218	12	Fraction.java	Fraction	p2	long	0	FractionConversionException	$ > overflow
377	218	12	Fraction.java	Fraction	q2	long	0	FractionConversionException	$ > overflow
378	223	12	Fraction.java	Fraction	convergent	double	1	DEF	Math.abs($ - value) > epsilon
378	223	12	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
378	223	12	Fraction.java	Fraction	n	int	1	DEF	$ < maxIterations
378	223	12	Fraction.java	Fraction	value	double	1	DEF	Math.abs(convergent - $) > epsilon
378	223	12	Fraction.java	Fraction	epsilon	double	1	DEF	Math.abs(convergent - value) > $
378	223	12	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
378	223	12	Fraction.java	Fraction	maxIterations	int	1	DEF	n < $
379	235	8	Fraction.java	Fraction	n	int	0	FractionConversionException	$ >= maxIterations
379	235	8	Fraction.java	Fraction	maxIterations	int	0	FractionConversionException	n >= $
380	239	8	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
380	239	8	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
381	266	8	Fraction.java	Fraction	den	int	0	DEF	$ == 0
382	270	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
383	271	12	Fraction.java	Fraction	num	int	0	DEF	$ == Integer.MIN_VALUE
383	271	12	Fraction.java	Fraction	den	int	0	DEF	$ == Integer.MIN_VALUE
384	280	8	Fraction.java	Fraction	d	int	0	DEF	$ > 1
385	286	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
386	300	8	Fraction.java	abs	THIS	Fraction	1	DEF	$.numerator >= 0
387	343	8	Fraction.java	equals	THIS	Fraction	1	DEF	$ == other
387	343	8	Fraction.java	equals	other	Object	1	DEF	this == $
388	345	15	Fraction.java	equals	other	Object	1	DEF	$ == null
389	423	8	Fraction.java	negate	THIS	Fraction	0	DEF	$.numerator==Integer.MIN_VALUE
390	495	8	Fraction.java	addSub	fraction	Fraction	0	DEF	$ == null
391	499	8	Fraction.java	addSub	THIS	Fraction	0	RET	$.numerator == 0
392	502	8	Fraction.java	addSub	THIS	Fraction	0	RET	fraction.$.numerator == 0
392	502	8	Fraction.java	addSub	fraction	Fraction	0	RET	$.numerator == 0
393	508	8	Fraction.java	addSub	d1	int	0	RET	$==1
394	532	8	Fraction.java	addSub	w	BigInteger	0	DEF	$.bitLength() > 31
395	552	8	Fraction.java	multiply	fraction	Fraction	0	DEF	$ == null
396	555	8	Fraction.java	multiply	THIS	Fraction	0	RET	fraction.$.numerator == 0
396	555	8	Fraction.java	multiply	THIS	Fraction	0	RET	$.numerator == 0
396	555	8	Fraction.java	multiply	fraction	Fraction	0	RET	$.numerator == 0
397	587	8	Fraction.java	divide	fraction	Fraction	0	DEF	$ == null
398	590	8	Fraction.java	divide	THIS	Fraction	0	DEF	fraction.$.numerator == 0
398	590	8	Fraction.java	divide	fraction	Fraction	0	DEF	$.numerator == 0
399	619	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$ == 0
400	623	8	Fraction.java	getReducedFraction	numerator	int	0	RET	$==0
401	627	8	Fraction.java	getReducedFraction	numerator	int	0	DEF	($&1)==0
401	627	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
402	630	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$ < 0
403	631	12	Fraction.java	getReducedFraction	numerator	int	0	DEF	$==Integer.MIN_VALUE
403	631	12	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
404	658	8	Fraction.java	toString	THIS	Fraction	1	DEF	$.denominator == 1
405	660	15	Fraction.java	toString	THIS	Fraction	1	DEF	$.numerator == 0
359	175	8	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Fraction
360	177	15	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
361	205	8	FractionFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
362	229	8	FractionFormat.java	parse	num	Number	0	RET	$ == null
363	262	8	FractionFormat.java	parse	den	Number	0	RET	$ == null
36317	85	8	Frequency.java	toString	iter	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
1257	113	8	Frequency.java	addValue	v	Object	1	DEF	$ instanceof Comparable<?>
1258	134	8	Frequency.java	addValue	v	Comparable<?>	0	DEF	$ instanceof Integer
1259	139	12	Frequency.java	addValue	count	Long	1	DEF	$ == null
36318	218	8	Frequency.java	getSumFreq	iterator	Iterator<Long>	0	NIL-WHILE	$.hasNext()
1260	245	8	Frequency.java	getCount	v	Comparable<?>	0	RET	$ instanceof Integer
1261	251	12	Frequency.java	getCount	count	Long	0	DEF	$ != null
1262	318	8	Frequency.java	getPct	sumFreq	long	0	RET	$ == 0
1263	383	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	$.getSumFreq() == 0
1264	386	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	$ instanceof Integer
1265	390	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	DEF	$ == null
1266	397	12	Frequency.java	getCumFreq	value	Long	0	DEF	$ != null
1267	404	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.firstKey()) < 0
1267	404	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.firstKey()) < 0
1267	404	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.firstKey()) < 0
1268	408	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.lastKey()) >= 0
1268	408	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.lastKey()) >= 0
1268	408	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.lastKey()) >= 0
36319	413	8	Frequency.java	getCumFreq	values	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
1269	415	12	Frequency.java	getCumFreq	nextValue	Comparable<?>	1	DEF	c.compare(v, $) > 0
1269	415	12	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	1	DEF	$.compare(v, nextValue) > 0
1269	415	12	Frequency.java	getCumFreq	v	Comparable<?>	1	DEF	c.compare($, nextValue) > 0
1270	493	8	Frequency.java	getCumPct	sumFreq	long	0	RET	$ == 0
1271	579	8	Frequency.java	equals	THIS	Frequency	0	RET	$ == obj
1271	579	8	Frequency.java	equals	obj	Object	0	RET	this == $
1272	581	8	Frequency.java	equals	obj	Object	0	RET	$ == null
1273	583	8	Frequency.java	equals	obj	Object	0	RET	$ instanceof Frequency
1274	586	8	Frequency.java	equals	THIS	Frequency	1	RET	$.freqTable == null
1275	587	12	Frequency.java	equals	THIS	Frequency	0	RET	other.$.freqTable != null
1275	587	12	Frequency.java	equals	other	Frequency	0	RET	$.freqTable != null
1276	589	15	Frequency.java	equals	THIS	Frequency	0	RET	$.freqTable.equals(other.$.freqTable)
1276	589	15	Frequency.java	equals	other	Frequency	0	RET	freqTable.equals($.freqTable)
1279	81	8	GLSMultipleLinearRegression.java	getOmegaInverse	THIS	GLSMultipleLinearRegression	0	DEF	$.OmegaInverse == null
1437	97	8	Gamma.java	logGamma	x	double	1	DEF	Double.isNaN($)
1437	97	8	Gamma.java	logGamma	x	double	1	DEF	$ <= 0.0
36450	103	12	Gamma.java	logGamma	i	int	0	NIL-FOR	$ > 0
1438	165	8	Gamma.java	regularizedGammaP	a	double	1	DEF	Double.isNaN($)
1438	165	8	Gamma.java	regularizedGammaP	a	double	1	DEF	$ <= 0.0
1438	165	8	Gamma.java	regularizedGammaP	x	double	1	DEF	$ < 0.0
1438	165	8	Gamma.java	regularizedGammaP	x	double	1	DEF	Double.isNaN($)
1439	167	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ == 0.0
1440	169	15	Gamma.java	regularizedGammaP	a	double	1	DEF	x > $
1440	169	15	Gamma.java	regularizedGammaP	a	double	1	DEF	$ >= 1.0
1440	169	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ > a
36451	178	12	Gamma.java	regularizedGammaP	n	double	0	NIL-WHILE	$ < maxIterations
36451	178	12	Gamma.java	regularizedGammaP	an	double	0	NIL-WHILE	Math.abs($) > epsilon
36451	178	12	Gamma.java	regularizedGammaP	epsilon	double	0	NIL-WHILE	Math.abs(an) > $
36451	178	12	Gamma.java	regularizedGammaP	maxIterations	int	0	NIL-WHILE	n < $
1441	186	12	Gamma.java	regularizedGammaP	n	double	1	MaxIterationsExceededException	$ >= maxIterations
1441	186	12	Gamma.java	regularizedGammaP	maxIterations	int	1	MaxIterationsExceededException	n >= $
1442	240	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	Double.isNaN($)
1442	240	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ <= 0.0
1442	240	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	Double.isNaN($)
1442	240	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < 0.0
1443	242	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ == 0.0
1444	244	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	x < $
1444	244	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ < 1.0
1444	244	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < a
1445	292	8	Gamma.java	digamma	x	double	0	RET	$ > 0
1445	292	8	Gamma.java	digamma	x	double	0	RET	$ <= S_LIMIT
1446	298	8	Gamma.java	digamma	x	double	0	RET	$ >= C_LIMIT
1447	321	8	Gamma.java	trigamma	x	double	0	RET	$ > 0
1447	321	8	Gamma.java	trigamma	x	double	0	RET	$ <= S_LIMIT
1448	325	8	Gamma.java	trigamma	x	double	0	RET	$ >= C_LIMIT
419	73	8	GammaDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
420	98	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
421	101	8	GammaDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
422	113	8	GammaDistributionImpl.java	setAlpha	alpha	double	0	DEF	$ <= 0.0
423	135	8	GammaDistributionImpl.java	setBeta	beta	double	0	DEF	$ <= 0.0
424	158	8	GammaDistributionImpl.java	density	x	Double	0	RET	$ < 0
425	194	8	GammaDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
426	220	8	GammaDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
36385	172	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	Math.abs(previous - $.cost) > ($.cost * $.steadyStateThreshold)
36385	172	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	$.getCostEvaluations() < 2
36385	172	8	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-DOWHILE	Math.abs($.cost) > $.convergence
36385	172	8	GaussNewtonEstimator.java	estimate	previous	double	0	NIL-DOWHILE	Math.abs($ - cost) > (cost * steadyStateThreshold)
36386	178	12	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	i < $.measurements.$.length
36386	178	12	GaussNewtonEstimator.java	estimate	i	int	0	NIL-FOR	$ < measurements.length
1397	179	16	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	DEF	$.measurements [i].isIgnored()
1397	179	16	GaussNewtonEstimator.java	estimate	i	int	0	DEF	measurements [$].isIgnored()
36387	185	20	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	j < $.parameters.$.length
36387	185	20	GaussNewtonEstimator.java	estimate	j	int	0	NIL-FOR	$ < parameters.length
36388	191	20	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	k < $.parameters.$.length
36388	191	20	GaussNewtonEstimator.java	estimate	k	int	0	NIL-FOR	$ < parameters.length
36389	193	24	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	l < $.parameters.$.length
36389	193	24	GaussNewtonEstimator.java	estimate	l	int	0	NIL-FOR	$ < parameters.length
36390	211	16	GaussNewtonEstimator.java	estimate	THIS	GaussNewtonEstimator	0	NIL-FOR	i < $.parameters.$.length
36390	211	16	GaussNewtonEstimator.java	estimate	i	int	0	NIL-FOR	$ < parameters.length
36207	68	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
36208	81	12	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.rows
36208	81	12	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < rows
36209	89	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	j < $.cols
36209	89	16	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
36210	94	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	k < $.cols
36210	94	16	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
36211	97	20	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	l < $.cols
36211	97	20	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < cols
36212	114	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.cols
36212	114	16	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < cols
1032	123	12	GaussNewtonOptimizer.java	doOptimize	previous	VectorialPointValuePair	0	DEF	$ != null
1375	69	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	IllegalArgumentException	$ > 1
1375	69	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	IllegalArgumentException	$ < 0
1376	72	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	IllegalArgumentException	$ < 0
1376	72	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	IllegalArgumentException	$ > 1
36373	113	8	GeneticAlgorithm.java	evolve	current	Population	0	NIL-WHILE	condition.isSatisfied($)
36373	113	8	GeneticAlgorithm.java	evolve	condition	StoppingCondition	0	NIL-WHILE	$.isSatisfied(current)
36374	147	8	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	NIL-WHILE	$.getPopulationSize() < $.getPopulationLimit()
1377	152	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getCrossoverRate()
1377	152	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getCrossoverRate()
1378	158	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getMutationRate()
1378	158	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getMutationRate()
1379	168	12	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	DEF	$.getPopulationSize() < $.getPopulationLimit()
1130	107	8	GeometricMean.java	getResult	THIS	GeometricMean	1	RET	$.sumOfLogs.getN() > 0
1131	195	8	GeometricMean.java	checkEmpty	THIS	GeometricMean	0	DEF	$.getN() > 0
36537	111	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
36537	111	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1488	228	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ < 0.0001
1488	228	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ > 0.9999
1489	263	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control1	double	1	DEF	$ > 0.9999
1489	263	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control1	double	1	DEF	$ < 0.0001
1490	269	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control2	double	1	DEF	$ < 0.0001
1490	269	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control2	double	1	DEF	$ > 0.9999
1491	275	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control3	double	1	DEF	$ > 0.9999
1491	275	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control3	double	1	DEF	$ < 0.0001
1492	281	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control4	double	1	DEF	$ < 1.0001
1492	281	4	GraggBulirschStoerIntegrator.java	setStepsizeControl	control4	double	1	DEF	$ > 999.9
1493	315	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ <= 6
1493	315	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ % 2 != 0
1494	319	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ < 0.0001
1494	319	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ > 0.9999
1495	325	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ > 0.9999
1495	325	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ < 0.0001
1496	367	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence.$.length != size
1496	367	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence == null
1496	367	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	DEF	sequence.length != $
1497	376	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
36495	378	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
36495	378	6	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
36496	383	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
36496	383	6	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
36497	391	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
36497	391	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
36498	396	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
36498	396	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
36499	398	6	GraggBulirschStoerIntegrator.java	initializeArrays	l	int	0	NIL-FOR	$ < k
36499	398	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	l < $
1498	421	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ <= 0
1498	421	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ >= 7
1499	435	4	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	1	DEF	$.vecAbsoluteTolerance == null
36500	436	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
36500	436	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
36500	436	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
36501	441	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
36501	441	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
36501	441	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
36502	477	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
36502	477	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
36502	477	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
36503	484	4	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	NIL-FOR	$ < n
36503	484	4	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	NIL-FOR	j < $
1500	486	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	DEF	2 * $ == n
1500	486	6	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	DEF	2 * j == $
36504	492	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
36504	492	6	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
36504	492	6	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
1501	501	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	j <= $.maxChecks
1501	501	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	k < $.maxIter
1501	501	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	$.performTest
1501	501	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	RET	$ <= maxChecks
1501	501	6	GraggBulirschStoerIntegrator.java	tryStep	k	int	0	RET	$ < maxIter
36505	503	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < y0.$.length
36505	503	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < y0.length
36505	503	8	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	l < $.length
36506	508	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < y0.$.length
36506	508	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < y0.length
36506	508	8	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	l < $.length
1502	512	8	GraggBulirschStoerIntegrator.java	tryStep	initialNorm	double	0	RET	deltaNorm > 4 * Math.max(1.0e-15, $)
1502	512	8	GraggBulirschStoerIntegrator.java	tryStep	deltaNorm	double	0	RET	$ > 4 * Math.max(1.0e-15, initialNorm)
36507	520	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
36507	520	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
36507	520	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
36508	539	4	GraggBulirschStoerIntegrator.java	extrapolate	j	int	0	NIL-FOR	$ < k
36508	539	4	GraggBulirschStoerIntegrator.java	extrapolate	k	int	0	NIL-FOR	j < $
36509	540	6	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
36509	540	6	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
36509	540	6	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
36510	548	4	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
36510	548	4	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
36510	548	4	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
36511	573	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length-1
36511	573	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length-1
36512	579	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length
36512	579	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length
36513	586	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < $.sequence[k]
36513	586	6	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < sequence[k]
36513	586	6	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	l < sequence[$]
1503	592	4	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1503	592	4	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
1504	598	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
36514	601	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < yMidDots.$.length
36514	601	6	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < yMidDots.length
36514	601	6	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	0	NIL-FOR	j < $.length
1505	622	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
1505	622	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.denseOutput
36515	643	4	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
1506	648	6	GraggBulirschStoerIntegrator.java	integrate	newStep	boolean	0	DEF	$
1507	653	8	GraggBulirschStoerIntegrator.java	integrate	firstStepAlreadyComputed	boolean	0	DEF	$
1508	657	8	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1509	663	10	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1510	676	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize < t
1510	676	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize > t
1510	676	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1510	676	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1510	676	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
1510	676	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
36516	685	6	GraggBulirschStoerIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
1511	690	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.tryStep($.stepStart, y, $.stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1511	690	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	tryStep(stepStart, y, stepSize, $, scale, fk[$], ($ == 0) ? yMidDots[0] : diagonal[$-1], ($ == 0) ? y1 : y1Diag[$-1], yTmp)
1511	690	8	GraggBulirschStoerIntegrator.java	integrate	y1	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? $ : y1Diag[k-1], yTmp)
1511	690	8	GraggBulirschStoerIntegrator.java	integrate	yTmp	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], $)
1511	690	8	GraggBulirschStoerIntegrator.java	integrate	diagonal	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : $[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1511	690	8	GraggBulirschStoerIntegrator.java	integrate	y1Diag	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : $[k-1], yTmp)
1511	690	8	GraggBulirschStoerIntegrator.java	integrate	fk	double[][][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, $[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1511	690	8	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? $[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1511	690	8	GraggBulirschStoerIntegrator.java	integrate	scale	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, $, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1511	690	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	1	DEF	tryStep(stepStart, $, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
1512	703	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 0
36517	712	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < y0.$.length
36517	712	12	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
36517	712	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
1513	718	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > maxError
1513	718	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > 1.0e15
1513	718	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ > 1
1513	718	12	GraggBulirschStoerIntegrator.java	integrate	maxError	double	1	DEF	error > $
1514	739	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1514	739	16	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
1515	742	18	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1516	751	20	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
1516	751	20	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
1517	757	22	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1517	757	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1517	757	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1518	769	16	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
1519	777	18	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
1519	777	18	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
1520	782	20	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1520	782	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1520	782	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1521	793	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > 1.0
1522	795	18	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
1522	795	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1522	795	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
1523	806	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ <= 1.0
1523	806	16	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
1523	806	16	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1524	820	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.denseOutput
1524	820	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
36518	823	8	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
36518	823	8	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
36519	832	8	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < mu
36519	832	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	NIL-FOR	l < $
36520	838	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
36520	838	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
36520	838	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
36521	841	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k - l2
36521	841	10	GraggBulirschStoerIntegrator.java	integrate	l2	int	0	NIL-FOR	j <= k - $
36521	841	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $ - l2
36522	844	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
36522	844	12	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
36522	844	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
36523	849	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
36523	849	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
36523	849	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
36524	854	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
36524	854	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
36525	855	12	GraggBulirschStoerIntegrator.java	integrate	m	int	0	NIL-FOR	$ >= 2 * (l + 1)
36525	855	12	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	m >= 2 * ($ + 1)
36526	856	14	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
36526	856	14	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
36526	856	14	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
1525	864	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	DEF	$ >= 0
1526	871	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.useInterpolationError
1527	876	12	GraggBulirschStoerIntegrator.java	integrate	interpError	double	0	DEF	$ > 10.0
1528	883	10	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1529	885	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.evaluateStep(interpolator)
1529	885	12	GraggBulirschStoerIntegrator.java	integrate	interpolator	AbstractStepInterpolator	0	DEF	eventsHandlersManager.evaluateStep($)
1530	887	16	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	Math.abs(dt) > Math.ulp($.stepStart)
1530	887	16	GraggBulirschStoerIntegrator.java	integrate	dt	double	0	DEF	Math.abs($) > Math.ulp(stepStart)
1531	897	8	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1532	905	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
1533	912	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.stop()
1534	923	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.eventsHandlersManager.reset($.stepStart, y)
1534	923	8	GraggBulirschStoerIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1534	923	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	eventsHandlersManager.reset(stepStart, $)
1535	930	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ == 1
1536	932	10	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
1537	935	15	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ <= targetIter
1537	935	15	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k <= $
1538	937	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k-1] < $.orderControl1 * $.costPerTimeUnit[k]
1538	937	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
1539	939	17	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
1539	939	17	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
1540	944	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k-2] < $.orderControl1 * $.costPerTimeUnit[k-1]
1540	944	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 2
1540	944	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$-2] < orderControl1 * costPerTimeUnit[$-1]
1541	948	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[optimalIter]
1541	948	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	0	DEF	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[$]
1541	948	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[optimalIter]
1542	953	8	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	1	DEF	$
1543	960	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	1	DEF	$ <= k
1543	960	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	optimalIter <= $
1544	963	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
1544	963	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ < targetIter
1544	963	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
1544	963	12	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k < $
1545	982	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
1546	988	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	1	DEF	$
1575	165	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	1	DEF	interpolator.$.polynoms == null
1575	165	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	interpolator	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms == null
36560	170	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.polynoms.$.length
36560	170	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	i	int	0	NIL-FOR	$ < polynoms.length
1576	187	4	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ < 0
1577	194	6	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	1	DEF	$.polynoms != null
36561	196	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
36561	196	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
36561	196	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
36562	200	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
36562	200	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
36562	200	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
1578	207	6	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ <= 4
36563	211	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.errfac.$.length
36563	211	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < errfac.length
36564	215	10	GraggBulirschStoerStepInterpolator.java	resetTables	j	int	0	NIL-FOR	$ <= i
36564	215	10	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	j <= $
1579	240	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms == null
1579	240	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynoms.$.length <= (mu + 4)
1579	240	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	polynoms.length <= ($ + 4)
36565	246	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
36565	246	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	i	int	0	NIL-FOR	$ < currentState.length
1580	259	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	RET	$ < 0
1581	267	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 0
1582	271	8	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 1
1583	275	10	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 2
36566	279	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	j	int	0	NIL-FOR	$ <= mu
36566	279	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	NIL-FOR	j <= $
1584	299	4	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree >= 5
36567	300	6	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
36567	300	6	GraggBulirschStoerStepInterpolator.java	estimateError	i	int	0	NIL-FOR	$ < currentState.length
36568	326	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < dimension
36568	326	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	dimension	int	0	NIL-FOR	i < $
1585	335	8	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree > 3
36569	338	12	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ > 3
1586	349	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.h == 0
36570	369	4	GraggBulirschStoerStepInterpolator.java	writeExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
36570	369	4	GraggBulirschStoerStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ <= currentDegree
36571	370	6	GraggBulirschStoerStepInterpolator.java	writeExternal	l	int	0	NIL-FOR	$ < dimension
36571	370	6	GraggBulirschStoerStepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	l < $
36572	391	4	GraggBulirschStoerStepInterpolator.java	readExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
36572	391	4	GraggBulirschStoerStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ <= currentDegree
36573	392	6	GraggBulirschStoerStepInterpolator.java	readExternal	l	int	0	NIL-FOR	$ < dimension
36573	392	6	GraggBulirschStoerStepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	l < $
36112	167	8	HarmonicCoefficientsGuesser.java	sortObservations	THIS	HarmonicCoefficientsGuesser	0	NIL-FOR	j < $.observations.$.length
36112	167	8	HarmonicCoefficientsGuesser.java	sortObservations	j	int	0	NIL-FOR	$ < observations.length
936	170	12	HarmonicCoefficientsGuesser.java	sortObservations	prec	WeightedObservedPoint	0	DEF	curr.getX() < $.getX()
936	170	12	HarmonicCoefficientsGuesser.java	sortObservations	curr	WeightedObservedPoint	0	DEF	$.getX() < prec.getX()
36113	174	16	HarmonicCoefficientsGuesser.java	sortObservations	i	int	0	NIL-WHILE	$ >= 0
36113	174	16	HarmonicCoefficientsGuesser.java	sortObservations	mI	WeightedObservedPoint	0	NIL-WHILE	curr.getX() < $.getX()
36113	174	16	HarmonicCoefficientsGuesser.java	sortObservations	curr	WeightedObservedPoint	0	NIL-WHILE	$.getX() < mI.getX()
937	176	20	HarmonicCoefficientsGuesser.java	sortObservations	i	int	1	DEF	$-- != 0
36114	208	8	HarmonicCoefficientsGuesser.java	guessAOmega	THIS	HarmonicCoefficientsGuesser	0	NIL-FOR	i < $.observations.$.length
36114	208	8	HarmonicCoefficientsGuesser.java	guessAOmega	i	int	0	NIL-FOR	$ < observations.length
938	240	8	HarmonicCoefficientsGuesser.java	guessAOmega	c1	double	0	OptimizationException	$ / c2 < 0.0
938	240	8	HarmonicCoefficientsGuesser.java	guessAOmega	c2	double	0	OptimizationException	c1 / $ < 0.0
938	240	8	HarmonicCoefficientsGuesser.java	guessAOmega	c2	double	0	OptimizationException	$ / c3 < 0.0
938	240	8	HarmonicCoefficientsGuesser.java	guessAOmega	c3	double	0	OptimizationException	c2 / $ < 0.0
36115	258	8	HarmonicCoefficientsGuesser.java	guessPhi	THIS	HarmonicCoefficientsGuesser	0	NIL-FOR	i < $.observations.$.length
36115	258	8	HarmonicCoefficientsGuesser.java	guessPhi	i	int	0	NIL-FOR	$ < observations.length
934	82	12	HarmonicFitter.java	fit	THIS	HarmonicFitter	0	OptimizationException	$.parameters == null
935	84	16	HarmonicFitter.java	fit	THIS	HarmonicFitter	0	OptimizationException	observations.$.length < 4
935	84	16	HarmonicFitter.java	fit	observations	WeightedObservedPoint[]	0	OptimizationException	$.length < 4
36598	111	4	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	j < y0.$.length
36598	111	4	HighamHall54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < y0.length
36598	111	4	HighamHall54Integrator.java	estimateError	y0	double[]	0	NIL-FOR	j < $.length
36599	113	6	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	l < STATIC_E.$.length
36599	113	6	HighamHall54Integrator.java	estimateError	l	int	0	NIL-FOR	$ < STATIC_E.length
36597	89	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
36597	89	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
498	56	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	DEF	numberOfSuccesses > $
498	56	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	numberOfSuccesses	int	0	DEF	$ > populationSize
499	62	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	populationSize	int	0	DEF	sampleSize > $
499	62	8	HypergeometricDistributionImpl.java	HypergeometricDistributionImpl	sampleSize	int	0	DEF	$ > populationSize
500	88	8	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x < $[0]
500	88	8	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < domain[0]
501	90	15	HypergeometricDistributionImpl.java	cumulativeProbability	domain	int[]	1	DEF	x >= $[1]
501	90	15	HypergeometricDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ >= domain[1]
502	206	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x > $[1]
502	206	8	HypergeometricDistributionImpl.java	probability	domain	int[]	1	DEF	x < $[0]
502	206	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ > domain[1]
502	206	8	HypergeometricDistributionImpl.java	probability	x	int	1	DEF	$ < domain[0]
503	246	8	HypergeometricDistributionImpl.java	setNumberOfSuccesses	num	int	0	DEF	$ < 0
504	260	8	HypergeometricDistributionImpl.java	setPopulationSize	size	int	0	DEF	$ <= 0
505	274	8	HypergeometricDistributionImpl.java	setSampleSize	size	int	0	DEF	$ < 0
506	296	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x < $[0]
506	296	8	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ < domain[0]
507	298	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	domain	int[]	1	DEF	x > $[1]
507	298	15	HypergeometricDistributionImpl.java	upperCumulativeProbability	x	int	1	DEF	$ > domain[1]
35274	324	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x0	int	0	NIL-WHILE	$ != x1
35274	324	8	HypergeometricDistributionImpl.java	innerCumulativeProbability	x1	int	0	NIL-WHILE	x0 != $
36285	61	8	KMeansPlusPlusClusterer.java	cluster	count	int	0	NIL-FOR	$ < max
36285	61	8	KMeansPlusPlusClusterer.java	cluster	max	int	0	NIL-FOR	count < $
1232	66	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	0	DEF	newCenter.equals($.cluster.getCenter())
1232	66	16	KMeansPlusPlusClusterer.java	cluster	newCenter	T	0	DEF	$.equals(cluster.getCenter())
1233	71	12	KMeansPlusPlusClusterer.java	cluster	clusteringChanged	boolean	0	RET	$
36286	115	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	NIL-WHILE	$.size() < k
36286	115	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	NIL-WHILE	resultSet.size() < $
36287	119	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < pointSet.size()
36287	119	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	pointSet	List<T>	0	NIL-FOR	i < $.size()
36288	130	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	THIS	KMeansPlusPlusClusterer	0	NIL-FOR	i < dx2.$.length
36288	130	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < dx2.length
36288	130	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	dx2	double[]	0	NIL-FOR	i < $.length
1234	131	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	dx2[$] >= r
1234	131	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	r	double	0	DEF	dx2[i] >= $
1234	131	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	dx2	double[]	0	DEF	$[i] >= r
1235	157	12	KMeansPlusPlusClusterer.java	getNearestCluster	distance	double	0	DEF	$ < minDistance
1235	157	12	KMeansPlusPlusClusterer.java	getNearestCluster	minDistance	double	0	DEF	distance < $
1125	94	8	Kurtosis.java	increment	THIS	Kurtosis	1	DEF	$.incMoment
1126	108	8	Kurtosis.java	getResult	THIS	Kurtosis	0	DEF	$.moment.getN() > 3
1127	110	16	Kurtosis.java	getResult	THIS	Kurtosis	1	DEF	$.moment.$.n <= 3
1127	110	16	Kurtosis.java	getResult	variance	double	1	DEF	$ < 10E-20
1128	128	8	Kurtosis.java	clear	THIS	Kurtosis	1	DEF	$.incMoment
1129	166	8	Kurtosis.java	evaluate	THIS	Kurtosis	0	DEF	$.test(values, begin, length)
1129	166	8	Kurtosis.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1129	166	8	Kurtosis.java	evaluate	begin	int	0	DEF	test(values, $, length)
1129	166	8	Kurtosis.java	evaluate	length	int	0	DEF	$ > 3
1129	166	8	Kurtosis.java	evaluate	length	int	0	DEF	test(values, begin, $)
36262	177	12	Kurtosis.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
36262	177	12	Kurtosis.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
36262	177	12	Kurtosis.java	evaluate	length	int	0	NIL-FOR	i < begin + $
891	84	8	LUDecompositionImpl.java	LUDecompositionImpl	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
36058	96	8	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
36058	96	8	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
36059	103	8	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	$ < m
36059	103	8	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	col < $
36060	108	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < col
36060	108	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	row < $
36061	111	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < row
36061	111	16	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	i < $
36062	120	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
36062	120	12	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
36063	123	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < col
36063	123	16	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	NIL-FOR	i < $
892	129	16	LUDecompositionImpl.java	LUDecompositionImpl	sum	double	0	DEF	Math.abs($) > largest
892	129	16	LUDecompositionImpl.java	LUDecompositionImpl	largest	double	0	DEF	Math.abs(sum) > $
893	136	12	LUDecompositionImpl.java	LUDecompositionImpl	THIS	LUDecompositionImpl	0	RET	Math.abs($.lu[max][col]) < singularityThreshold
893	136	12	LUDecompositionImpl.java	LUDecompositionImpl	max	int	0	RET	Math.abs(lu[$][col]) < singularityThreshold
893	136	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	RET	Math.abs(lu[max][$]) < singularityThreshold
893	136	12	LUDecompositionImpl.java	LUDecompositionImpl	singularityThreshold	double	0	RET	Math.abs(lu[max][col]) < $
894	142	12	LUDecompositionImpl.java	LUDecompositionImpl	max	int	0	DEF	$ != col
894	142	12	LUDecompositionImpl.java	LUDecompositionImpl	col	int	0	DEF	max != $
36064	146	16	LUDecompositionImpl.java	LUDecompositionImpl	i	int	0	NIL-FOR	$ < m
36064	146	16	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	i < $
36065	159	12	LUDecompositionImpl.java	LUDecompositionImpl	row	int	0	NIL-FOR	$ < m
36065	159	12	LUDecompositionImpl.java	LUDecompositionImpl	m	int	0	NIL-FOR	row < $
895	168	8	LUDecompositionImpl.java	getL	THIS	LUDecompositionImpl	0	DEF	$.singular
895	168	8	LUDecompositionImpl.java	getL	THIS	LUDecompositionImpl	0	DEF	$.cachedL == null
36066	171	12	LUDecompositionImpl.java	getL	i	int	0	NIL-FOR	$ < m
36066	171	12	LUDecompositionImpl.java	getL	m	int	0	NIL-FOR	i < $
36067	173	16	LUDecompositionImpl.java	getL	j	int	0	NIL-FOR	$ < i
36067	173	16	LUDecompositionImpl.java	getL	i	int	0	NIL-FOR	j < $
896	184	8	LUDecompositionImpl.java	getU	THIS	LUDecompositionImpl	0	DEF	$.singular
896	184	8	LUDecompositionImpl.java	getU	THIS	LUDecompositionImpl	0	DEF	$.cachedU == null
36068	187	12	LUDecompositionImpl.java	getU	i	int	0	NIL-FOR	$ < m
36068	187	12	LUDecompositionImpl.java	getU	m	int	0	NIL-FOR	i < $
36069	189	16	LUDecompositionImpl.java	getU	j	int	0	NIL-FOR	$ < m
36069	189	16	LUDecompositionImpl.java	getU	m	int	0	NIL-FOR	j < $
897	199	8	LUDecompositionImpl.java	getP	THIS	LUDecompositionImpl	0	DEF	$.cachedP == null
897	199	8	LUDecompositionImpl.java	getP	THIS	LUDecompositionImpl	0	DEF	$.singular
36070	202	12	LUDecompositionImpl.java	getP	i	int	0	NIL-FOR	$ < m
36070	202	12	LUDecompositionImpl.java	getP	m	int	0	NIL-FOR	i < $
898	216	8	LUDecompositionImpl.java	getDeterminant	THIS	LUDecompositionImpl	1	RET	$.singular
36071	221	12	LUDecompositionImpl.java	getDeterminant	i	int	0	NIL-FOR	$ < m
36071	221	12	LUDecompositionImpl.java	getDeterminant	m	int	0	NIL-FOR	i < $
1727	69	8	LaguerreSolver.java	LaguerreSolver	f	UnivariateRealFunction	1	DEF	$ instanceof PolynomialFunction
1728	129	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1728	129	8	LaguerreSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1729	132	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1729	132	8	LaguerreSolver.java	solve	max	double	0	RET	f.value($) == 0.0
1730	135	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
1730	135	8	LaguerreSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
1731	141	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	1	RET	$.isBracketing(min, initial, f)
1731	141	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
1731	141	8	LaguerreSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
1731	141	8	LaguerreSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
1732	173	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	DEF	$ instanceof PolynomialFunction
1733	178	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1733	178	8	LaguerreSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1734	179	8	LaguerreSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1734	179	8	LaguerreSolver.java	solve	max	double	0	RET	f.value($) == 0.0
36628	184	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-FOR	i < coefficients.$.length
36628	184	8	LaguerreSolver.java	solve	i	int	0	NIL-FOR	$ < coefficients.length
36628	184	8	LaguerreSolver.java	solve	coefficients	double[]	0	NIL-FOR	i < $.length
1735	189	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.isRootOK(min, max, z)
1735	189	8	LaguerreSolver.java	solve	z	Complex	0	RET	isRootOK(min, max, $)
1735	189	8	LaguerreSolver.java	solve	min	double	0	RET	isRootOK($, max, z)
1735	189	8	LaguerreSolver.java	solve	max	double	0	RET	isRootOK(min, $, z)
36629	196	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-FOR	i < root.$.length
36629	196	8	LaguerreSolver.java	solve	i	int	0	NIL-FOR	$ < root.length
36629	196	8	LaguerreSolver.java	solve	root	Complex[]	0	NIL-FOR	i < $.length
1736	197	12	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	$.isRootOK(min, max, root[i])
1736	197	12	LaguerreSolver.java	solve	i	int	0	RET	isRootOK(min, max, root[$])
1736	197	12	LaguerreSolver.java	solve	root	Complex[]	0	RET	isRootOK(min, max, $[i])
1736	197	12	LaguerreSolver.java	solve	min	double	0	RET	isRootOK($, max, root[i])
1736	197	12	LaguerreSolver.java	solve	max	double	0	RET	isRootOK(min, $, root[i])
36630	241	8	LaguerreSolver.java	solveAll	THIS	LaguerreSolver	0	NIL-FOR	i < c.$.length
36630	241	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ < c.length
36630	241	8	LaguerreSolver.java	solveAll	c	Complex[]	0	NIL-FOR	i < $.length
1737	265	8	LaguerreSolver.java	solveAll	n	int	0	DEF	$ < 1
36631	270	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ <= n
36631	270	8	LaguerreSolver.java	solveAll	n	int	0	NIL-FOR	i <= $
36632	276	8	LaguerreSolver.java	solveAll	i	int	0	NIL-FOR	$ < n
36632	276	8	LaguerreSolver.java	solveAll	n	int	0	NIL-FOR	i < $
36633	283	12	LaguerreSolver.java	solveAll	j	int	0	NIL-FOR	$ >= 0
1738	313	8	LaguerreSolver.java	solve	n	int	0	DEF	$ < 1
36634	331	8	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	NIL-WHILE	i <= $.maximalIterationCount
36634	331	8	LaguerreSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
36635	337	12	LaguerreSolver.java	solve	j	int	0	NIL-FOR	$ >= 0
1739	347	12	LaguerreSolver.java	solve	tolerance	double	0	RET	(z.subtract(oldz)).abs() <= $
1739	347	12	LaguerreSolver.java	solve	z	Complex	0	RET	($.subtract(oldz)).abs() <= tolerance
1739	347	12	LaguerreSolver.java	solve	oldz	Complex	0	RET	(z.subtract($)).abs() <= tolerance
1740	352	12	LaguerreSolver.java	solve	THIS	LaguerreSolver	0	RET	pv.abs() <= $.functionValueAccuracy
1740	352	12	LaguerreSolver.java	solve	pv	Complex	0	RET	$.abs() <= functionValueAccuracy
1741	370	12	LaguerreSolver.java	solve	denominator	Complex	1	DEF	$.equals(new Complex(0.0, 0.0))
978	114	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DEF	observations.$.length != weights.$.length
978	114	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DEF	$.length != weights.length
978	114	8	LeastSquaresConverter.java	LeastSquaresConverter	weights	double[]	0	DEF	observations.length != $.length
979	147	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DEF	observations.$.length != scale.getColumnDimension()
979	147	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DEF	$.length != scale.getColumnDimension()
979	147	8	LeastSquaresConverter.java	LeastSquaresConverter	scale	RealMatrix	0	DEF	observations.length != $.getColumnDimension()
980	163	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	FunctionEvaluationException	residuals.$.length != $.observations.$.length
980	163	8	LeastSquaresConverter.java	value	residuals	double[]	0	FunctionEvaluationException	$.length != observations.length
36137	167	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
36137	167	8	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
36137	167	8	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
981	173	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.weights != null
36138	174	12	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
36138	174	12	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
36138	174	12	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
982	178	15	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.scale != null
36669	175	8	LegendreGaussIntegrator.java	integrate	THIS	LegendreGaussIntegrator	0	NIL-FOR	i < $.maximalIterationCount
36669	175	8	LegendreGaussIntegrator.java	integrate	i	int	0	NIL-FOR	$ < maximalIterationCount
1812	187	12	LegendreGaussIntegrator.java	integrate	THIS	LegendreGaussIntegrator	0	RET	i + 1 >= $.minimalIterationCount
1812	187	12	LegendreGaussIntegrator.java	integrate	delta	double	0	RET	$ <= limit
1812	187	12	LegendreGaussIntegrator.java	integrate	limit	double	0	RET	delta <= $
1812	187	12	LegendreGaussIntegrator.java	integrate	i	int	0	RET	$ + 1 >= minimalIterationCount
36670	224	8	LegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
36670	224	8	LegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
36671	225	12	LegendreGaussIntegrator.java	stage	THIS	LegendreGaussIntegrator	0	NIL-FOR	j < $.abscissas.$.length
36671	225	12	LegendreGaussIntegrator.java	stage	j	int	0	NIL-FOR	$ < abscissas.length
36400	285	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.solvedCols
36400	285	6	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < solvedCols
1401	290	6	LevenbergMarquardtEstimator.java	estimate	firstIteration	boolean	0	DEF	$
36401	295	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
36401	295	8	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < cols
1402	297	10	LevenbergMarquardtEstimator.java	estimate	dk	double	0	DEF	$ == 0
1403	313	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	$.cost != 0
36402	314	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
36402	314	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1404	317	10	LevenbergMarquardtEstimator.java	estimate	s	double	0	DEF	$ != 0
36403	320	12	LevenbergMarquardtEstimator.java	estimate	i	int	0	NIL-FOR	$ <= j
36403	320	12	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	i <= $
1405	328	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	maxCosine <= $.orthoTolerance
1405	328	6	LevenbergMarquardtEstimator.java	estimate	maxCosine	double	0	RET	$ <= orthoTolerance
36404	333	6	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.cols
36404	333	6	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < cols
36405	338	6	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	NIL-FOR	$ < 1.0e-4
36406	341	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
36406	341	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
36407	355	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
36407	355	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1406	365	8	LevenbergMarquardtEstimator.java	estimate	firstIteration	boolean	0	DEF	$
1407	374	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	0.1 * $.cost < previousCost
1407	374	8	LevenbergMarquardtEstimator.java	estimate	previousCost	double	0	DEF	0.1 * cost < $
36408	381	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
36408	381	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
36409	386	10	LevenbergMarquardtEstimator.java	estimate	i	int	0	NIL-FOR	$ <= j
36409	386	10	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	i <= $
36410	392	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
36410	392	8	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1408	405	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	DEF	$ <= 0.25
1409	408	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	0.1 * $.cost >= previousCost
1409	408	10	LevenbergMarquardtEstimator.java	estimate	tmp	double	0	DEF	$ < 0.1
1409	408	10	LevenbergMarquardtEstimator.java	estimate	previousCost	double	0	DEF	0.1 * cost >= $
1410	413	15	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
1410	413	15	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	DEF	$ >= 0.75
1411	419	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	DEF	$ >= 1.0e-4
36411	423	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
36411	423	10	LevenbergMarquardtEstimator.java	estimate	k	int	0	NIL-FOR	$ < cols
36412	431	10	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
36412	431	10	LevenbergMarquardtEstimator.java	estimate	j	int	0	NIL-FOR	$ < solvedCols
1412	441	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	preRed <= $.costRelativeTolerance
1412	441	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	Math.abs(actRed) <= $.costRelativeTolerance
1412	441	8	LevenbergMarquardtEstimator.java	estimate	THIS	LevenbergMarquardtEstimator	0	RET	delta <= $.parRelativeTolerance * xNorm
1412	441	8	LevenbergMarquardtEstimator.java	estimate	actRed	double	0	RET	Math.abs($) <= costRelativeTolerance
1412	441	8	LevenbergMarquardtEstimator.java	estimate	preRed	double	0	RET	$ <= costRelativeTolerance
1412	441	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	0	RET	$ <= 2.0
1412	441	8	LevenbergMarquardtEstimator.java	estimate	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
1412	441	8	LevenbergMarquardtEstimator.java	estimate	xNorm	double	0	RET	delta <= parRelativeTolerance * $
1413	450	8	LevenbergMarquardtEstimator.java	estimate	actRed	double	1	EstimationException	Math.abs($) <= 2.2204e-16
1413	450	8	LevenbergMarquardtEstimator.java	estimate	preRed	double	1	EstimationException	$ <= 2.2204e-16
1413	450	8	LevenbergMarquardtEstimator.java	estimate	ratio	double	1	EstimationException	$ <= 2.0
1414	455	15	LevenbergMarquardtEstimator.java	estimate	delta	double	1	EstimationException	$ <= 2.2204e-16 * xNorm
1414	455	15	LevenbergMarquardtEstimator.java	estimate	xNorm	double	1	EstimationException	delta <= 2.2204e-16 * $
1415	460	15	LevenbergMarquardtEstimator.java	estimate	maxCosine	double	0	EstimationException	$ <= 2.2204e-16
36413	499	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.rank
36413	499	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
36414	502	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.cols
36414	502	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < cols
36415	505	4	LevenbergMarquardtEstimator.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
36416	509	6	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
36416	509	6	LevenbergMarquardtEstimator.java	determineLMParameter	k	int	0	NIL-FOR	i < $
36417	519	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
36417	519	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1416	527	4	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
1416	527	4	LevenbergMarquardtEstimator.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1417	537	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.rank == $.solvedCols
36418	538	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
36418	538	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
36419	543	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
36419	543	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
36420	547	8	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
36420	547	8	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	i < $
36421	560	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
36421	560	4	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
36422	564	6	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
36422	564	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1418	573	4	LevenbergMarquardtEstimator.java	determineLMParameter	paru	double	0	DEF	$ == 0
1419	581	4	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
36423	585	4	LevenbergMarquardtEstimator.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1420	588	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	DEF	$.lmPar == 0
36424	592	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
36424	592	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
36425	599	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
36425	599	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1421	611	6	LevenbergMarquardtEstimator.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1421	611	6	LevenbergMarquardtEstimator.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1421	611	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	Math.abs($) <= 0.1 * delta
1421	611	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1421	611	6	LevenbergMarquardtEstimator.java	determineLMParameter	parl	double	0	RET	$ == 0
1421	611	6	LevenbergMarquardtEstimator.java	determineLMParameter	delta	double	0	RET	Math.abs(fp) <= 0.1 * $
36426	617	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
36426	617	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
36427	621	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
36427	621	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
36428	625	8	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
36428	625	8	LevenbergMarquardtEstimator.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
36429	630	6	LevenbergMarquardtEstimator.java	determineLMParameter	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
36429	630	6	LevenbergMarquardtEstimator.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1422	637	6	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	1	DEF	$ > 0
1423	639	13	LevenbergMarquardtEstimator.java	determineLMParameter	fp	double	0	DEF	$ < 0
36430	674	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
36430	674	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
36431	676	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
36431	676	6	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
36432	684	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
36432	684	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1424	690	6	LevenbergMarquardtEstimator.java	determineLMDirection	dpj	double	0	DEF	$ != 0
36433	699	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.solvedCols
36433	699	6	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
1425	704	8	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1425	704	8	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1426	709	10	LevenbergMarquardtEstimator.java	determineLMDirection	rkk	double	1	DEF	Math.abs($) < Math.abs(lmDiag[k])
1426	709	10	LevenbergMarquardtEstimator.java	determineLMDirection	k	int	1	DEF	Math.abs(rkk) < Math.abs(lmDiag[$])
1426	709	10	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	1	DEF	Math.abs(rkk) < Math.abs($[k])
36434	727	10	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.solvedCols
36434	727	10	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
36435	748	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.solvedCols
36435	748	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1427	749	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	DEF	nSing == $.solvedCols
1427	749	6	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1427	749	6	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1427	749	6	LevenbergMarquardtEstimator.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1428	752	6	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	DEF	nSing < $.solvedCols
1428	752	6	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1429	756	4	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	DEF	$ > 0
36436	757	6	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
36437	760	8	LevenbergMarquardtEstimator.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
36437	760	8	LevenbergMarquardtEstimator.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
36438	768	4	LevenbergMarquardtEstimator.java	determineLMDirection	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	j < $.lmDir.$.length
36438	768	4	LevenbergMarquardtEstimator.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
36439	799	4	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
36439	799	4	LevenbergMarquardtEstimator.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
36440	802	6	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
36440	802	6	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
36441	810	4	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
36441	810	4	LevenbergMarquardtEstimator.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
36442	815	6	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.cols
36442	815	6	LevenbergMarquardtEstimator.java	qrDecomposition	i	int	0	NIL-FOR	$ < cols
36443	818	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
36443	818	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
1430	822	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	EstimationException	Double.isNaN($)
1430	822	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	EstimationException	Double.isInfinite($)
1431	827	8	LevenbergMarquardtEstimator.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1431	827	8	LevenbergMarquardtEstimator.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1432	832	6	LevenbergMarquardtEstimator.java	qrDecomposition	ak2	double	0	RET	$ == 0
36444	852	6	LevenbergMarquardtEstimator.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
36445	855	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
36445	855	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
36446	859	8	LevenbergMarquardtEstimator.java	qrDecomposition	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	index < $.jacobian.$.length
36446	859	8	LevenbergMarquardtEstimator.java	qrDecomposition	index	int	0	NIL-FOR	$ < jacobian.length
36447	876	4	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	k < $.cols
36447	876	4	LevenbergMarquardtEstimator.java	qTy	k	int	0	NIL-FOR	$ < cols
36448	881	6	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.rows
36448	881	6	LevenbergMarquardtEstimator.java	qTy	i	int	0	NIL-FOR	$ < rows
36449	887	6	LevenbergMarquardtEstimator.java	qTy	THIS	LevenbergMarquardtEstimator	0	NIL-FOR	i < $.rows
36449	887	6	LevenbergMarquardtEstimator.java	qTy	i	int	0	NIL-FOR	$ < rows
36140	251	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
36140	251	12	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
984	256	12	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
36141	261	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
36141	261	16	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
985	263	20	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
986	279	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.cost != 0
36142	280	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
36142	280	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
987	283	20	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
36143	285	24	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
36143	285	24	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
988	292	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
988	292	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
36144	298	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
36144	298	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
36145	303	12	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
36146	306	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
36146	306	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
36147	320	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
36147	320	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
989	330	16	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
990	339	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost < previousCost
990	339	16	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost < $
36148	346	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
36148	346	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
36149	350	20	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
36149	350	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
36150	355	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
36150	355	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
991	368	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
992	371	24	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost >= previousCost
992	371	24	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
992	371	24	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost >= $
993	376	23	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
993	376	23	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
994	382	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ >= 1.0e-4
36151	386	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
36151	386	20	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
36152	394	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
36152	394	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
995	404	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	Math.abs(actRed) <= $.costRelativeTolerance
995	404	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
995	404	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
995	404	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	Math.abs($) <= costRelativeTolerance
995	404	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
995	404	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
995	404	16	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
995	404	16	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
996	413	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	OptimizationException	Math.abs($) <= 2.2204e-16
996	413	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	OptimizationException	$ <= 2.2204e-16
996	413	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	OptimizationException	$ <= 2.0
997	418	23	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	OptimizationException	$ <= 2.2204e-16 * xNorm
997	418	23	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	OptimizationException	delta <= 2.2204e-16 * $
998	423	23	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	OptimizationException	$ <= 2.2204e-16
36153	462	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.rank
36153	462	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
36154	465	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
36154	465	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < cols
36155	468	8	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
36156	471	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
36156	471	12	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
36157	480	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
36157	480	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
999	488	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
999	488	8	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1000	498	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.rank == $.solvedCols
36158	499	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
36158	499	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
36159	504	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
36159	504	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
36160	507	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
36160	507	16	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
36161	519	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
36161	519	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
36162	522	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
36162	522	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1001	530	8	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
1002	538	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
36163	542	8	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1003	545	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
36164	549	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
36164	549	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
36165	556	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
36165	556	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1004	568	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1004	568	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1004	568	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	Math.abs($) <= 0.1 * delta
1004	568	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1004	568	12	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
1004	568	12	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	Math.abs(fp) <= 0.1 * $
36166	574	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
36166	574	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
36167	578	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
36167	578	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
36168	582	16	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
36168	582	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
36169	587	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
36169	587	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1005	594	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
1006	596	19	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
36170	631	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
36170	631	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
36171	633	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
36171	633	12	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
36172	641	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
36172	641	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1007	647	12	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
36173	656	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
36173	656	12	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
1008	661	16	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1008	661	16	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1009	666	20	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	Math.abs($) < Math.abs(lmDiag[k])
1009	666	20	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	Math.abs(rkk) < Math.abs(lmDiag[$])
1009	666	20	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	Math.abs(rkk) < Math.abs($[k])
36174	684	20	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
36174	684	20	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
36175	704	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
36175	704	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1010	705	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing == $.solvedCols
1010	705	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1010	705	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1010	705	12	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1011	708	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing < $.solvedCols
1011	708	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1012	712	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
36176	713	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
36177	716	16	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
36177	716	16	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
36178	724	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
36178	724	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
36179	755	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
36179	755	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
36180	758	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.jacobian.$.length
36180	758	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < jacobian.length
36181	766	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
36181	766	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
36182	771	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.cols
36182	771	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < cols
36183	773	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.jacobian.$.length
36183	773	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < jacobian.length
1013	777	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	OptimizationException	Double.isInfinite($)
1013	777	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	OptimizationException	Double.isNaN($)
1014	782	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1014	782	16	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1015	787	12	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ == 0
36184	806	12	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
36185	808	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.jacobian.$.length
36185	808	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < jacobian.length
36186	812	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.jacobian.$.length
36186	812	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < jacobian.length
36187	829	8	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
36187	829	8	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < cols
36188	832	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
36188	832	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
36189	836	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
36189	836	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
36117	128	8	LinearConstraint.java	LinearConstraint	THIS	LinearConstraint	0	NIL-FOR	i < sub.$.length
36117	128	8	LinearConstraint.java	LinearConstraint	i	int	0	NIL-FOR	$ < sub.length
36117	128	8	LinearConstraint.java	LinearConstraint	sub	double[]	0	NIL-FOR	i < $.length
941	191	6	LinearConstraint.java	equals	THIS	LinearConstraint	0	RET	$ == other
941	191	6	LinearConstraint.java	equals	other	Object	0	RET	this == $
942	195	6	LinearConstraint.java	equals	other	Object	0	RET	$ == null
955	108	6	LinearObjectiveFunction.java	equals	THIS	LinearObjectiveFunction	0	RET	$ == other
955	108	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	this == $
956	112	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	$ == null
1371	45	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	IllegalArgumentException	$.size() > populationLimit
1371	45	8	ListPopulation.java	ListPopulation	populationLimit	int	0	IllegalArgumentException	chromosomes.size() > $
1372	48	8	ListPopulation.java	ListPopulation	populationLimit	int	0	IllegalArgumentException	$ < 0
1373	63	8	ListPopulation.java	ListPopulation	populationLimit	int	0	IllegalArgumentException	$ < 0
1374	102	12	ListPopulation.java	getFittestChromosome	THIS	ListPopulation	0	DEF	$.chromosome.compareTo(bestChromosome) > 0
1374	102	12	ListPopulation.java	getFittestChromosome	bestChromosome	Chromosome	0	DEF	chromosome.compareTo($) > 0
1662	144	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	MathException	$ < 0
1662	144	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	MathException	$ > 1
1663	149	8	LoessInterpolator.java	LoessInterpolator	robustnessIters	int	0	MathException	$ < 0
1664	197	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	MathException	xval.$.length != yval.$.length
1664	197	8	LoessInterpolator.java	smooth	xval	double[]	0	MathException	$.length != yval.length
1664	197	8	LoessInterpolator.java	smooth	yval	double[]	0	MathException	xval.length != $.length
1665	207	8	LoessInterpolator.java	smooth	n	int	0	MathException	$ == 0
1666	217	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 1
1667	221	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 2
1668	227	8	LoessInterpolator.java	smooth	bandwidthInPoints	int	0	MathException	$ < 2
36613	248	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	NIL-FOR	iter <= $.robustnessIters
36613	248	8	LoessInterpolator.java	smooth	iter	int	0	NIL-FOR	$ <= robustnessIters
36614	251	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
36614	251	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
1669	256	16	LoessInterpolator.java	smooth	i	int	0	DEF	$ > 0
1670	266	16	LoessInterpolator.java	smooth	ileft	int	1	DEF	xval[i] - xval[$] > xval[iright] - xval[i]
1670	266	16	LoessInterpolator.java	smooth	iright	int	1	DEF	xval[i] - xval[ileft] > xval[$] - xval[i]
1670	266	16	LoessInterpolator.java	smooth	i	int	1	DEF	xval[$] - xval[ileft] > xval[iright] - xval[$]
1670	266	16	LoessInterpolator.java	smooth	xval	double[]	1	DEF	$[i] - $[ileft] > $[iright] - $[i]
36615	285	16	LoessInterpolator.java	smooth	k	int	0	NIL-FOR	$ <= iright
36615	285	16	LoessInterpolator.java	smooth	iright	int	0	NIL-FOR	k <= $
1671	304	16	LoessInterpolator.java	smooth	THIS	LoessInterpolator	1	DEF	Math.sqrt(Math.abs(meanXSquared - meanX * meanX)) < $.accuracy
1671	304	16	LoessInterpolator.java	smooth	meanX	double	1	DEF	Math.sqrt(Math.abs(meanXSquared - $ * $)) < accuracy
1671	304	16	LoessInterpolator.java	smooth	meanXSquared	double	1	DEF	Math.sqrt(Math.abs($ - meanX * meanX)) < accuracy
1672	318	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	iter == $.robustnessIters
1672	318	12	LoessInterpolator.java	smooth	iter	int	0	DEF	$ == robustnessIters
1673	331	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	Math.abs(medianResidual) < $.accuracy
1673	331	12	LoessInterpolator.java	smooth	medianResidual	double	0	DEF	Math.abs($) < accuracy
36616	335	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
36616	335	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
1674	337	16	LoessInterpolator.java	smooth	arg	double	1	DEF	$ >= 1
1675	364	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	MathException	xval.$.length != yval.$.length
1675	364	8	LoessInterpolator.java	smooth	xval	double[]	0	MathException	$.length != yval.length
1675	364	8	LoessInterpolator.java	smooth	yval	double[]	0	MathException	xval.length != $.length
1676	401	8	LoessInterpolator.java	updateBandwidthInterval	THIS	LoessInterpolator	0	DEF	nextRight < xval.$.length
1676	401	8	LoessInterpolator.java	updateBandwidthInterval	left	int	0	DEF	xval[nextRight] - xval[i] < xval[i] - xval[$]
1676	401	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	xval[$] - xval[i] < xval[i] - xval[left]
1676	401	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	$ < xval.length
1676	401	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	$[nextRight] - $[i] < $[i] - $[left]
1676	401	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	nextRight < $.length
1676	401	8	LoessInterpolator.java	updateBandwidthInterval	i	int	0	DEF	xval[nextRight] - xval[$] < xval[$] - xval[left]
36617	416	8	LoessInterpolator.java	nextNonzero	THIS	LoessInterpolator	0	NIL-WHILE	j < weights.$.length
36617	416	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	$ < weights.length
36617	416	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	weights[$] == 0
36617	416	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	j < $.length
36617	416	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	$[j] == 0
36618	444	8	LoessInterpolator.java	checkAllFiniteReal	THIS	LoessInterpolator	0	NIL-FOR	i < values.$.length
36618	444	8	LoessInterpolator.java	checkAllFiniteReal	i	int	0	NIL-FOR	$ < values.length
36618	444	8	LoessInterpolator.java	checkAllFiniteReal	values	double[]	0	NIL-FOR	i < $.length
1677	446	12	LoessInterpolator.java	checkAllFiniteReal	x	double	0	MathException	Double.isNaN($)
1677	446	12	LoessInterpolator.java	checkAllFiniteReal	x	double	0	MathException	Double.isInfinite($)
36619	462	8	LoessInterpolator.java	checkStrictlyIncreasing	THIS	LoessInterpolator	0	NIL-FOR	i < xval.$.length
36619	462	8	LoessInterpolator.java	checkStrictlyIncreasing	i	int	0	NIL-FOR	$ < xval.length
36619	462	8	LoessInterpolator.java	checkStrictlyIncreasing	xval	double[]	0	NIL-FOR	i < $.length
1678	463	12	LoessInterpolator.java	checkStrictlyIncreasing	i	int	0	MathException	$ >= 1
1678	463	12	LoessInterpolator.java	checkStrictlyIncreasing	i	int	0	MathException	xval[$ - 1] >= xval[$]
1678	463	12	LoessInterpolator.java	checkStrictlyIncreasing	xval	double[]	0	MathException	$[i - 1] >= $[i]
0	112	12	MathException.java	translate	bundle	ResourceBundle	0	RET	$.getLocale().getLanguage().equals(locale.getLanguage())
0	112	12	MathException.java	translate	locale	Locale	0	RET	bundle.getLocale().getLanguage().equals($.getLanguage())
1297	104	12	MathRuntimeException.java	translate	bundle	ResourceBundle	0	RET	$.getLocale().getLanguage().equals(locale.getLanguage())
1297	104	12	MathRuntimeException.java	translate	locale	Locale	0	RET	bundle.getLocale().getLanguage().equals($.getLanguage())
70	97	8	MathUtils.java	addAndCheck	s	long	0	ArithmeticException	$ < Integer.MIN_VALUE
70	97	8	MathUtils.java	addAndCheck	s	long	0	ArithmeticException	$ > Integer.MAX_VALUE
71	130	8	MathUtils.java	addAndCheck	a	long	1	DEF	$ > b
71	130	8	MathUtils.java	addAndCheck	b	long	1	DEF	a > $
72	136	12	MathUtils.java	addAndCheck	a	long	1	ArithmeticException	$ < 0
73	137	16	MathUtils.java	addAndCheck	b	long	1	ArithmeticException	$ < 0
74	139	20	MathUtils.java	addAndCheck	a	long	1	DEF	Long.MIN_VALUE - b <= $
74	139	20	MathUtils.java	addAndCheck	b	long	1	DEF	Long.MIN_VALUE - $ <= a
75	153	16	MathUtils.java	addAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE - b
75	153	16	MathUtils.java	addAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE - $
76	190	8	MathUtils.java	binomialCoefficient	n	int	0	RET	$ == k
76	190	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 0
76	190	8	MathUtils.java	binomialCoefficient	k	int	0	RET	n == $
77	193	8	MathUtils.java	binomialCoefficient	n	int	0	RET	k == $ - 1
77	193	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == n - 1
77	193	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ == 1
78	197	8	MathUtils.java	binomialCoefficient	n	int	0	RET	k > $ / 2
78	197	8	MathUtils.java	binomialCoefficient	k	int	0	RET	$ > n / 2
79	206	8	MathUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 61
35231	209	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
35231	209	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
80	213	15	MathUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 66
35232	217	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
35232	217	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
35233	233	12	MathUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
35233	233	12	MathUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
81	266	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	$ == k
81	266	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	n == $
81	266	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 0
82	269	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	k == $ - 1
82	269	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 1
82	269	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == n - 1
83	272	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	k > $/2
83	272	8	MathUtils.java	binomialCoefficientDouble	k	int	0	RET	$ > n/2
84	275	8	MathUtils.java	binomialCoefficientDouble	n	int	0	RET	$ < 67
35234	280	8	MathUtils.java	binomialCoefficientDouble	i	int	0	NIL-FOR	$ <= k
35234	280	8	MathUtils.java	binomialCoefficientDouble	k	int	0	NIL-FOR	i <= $
85	307	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ == k
85	307	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	n == $
85	307	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 0
86	310	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	k == $ - 1
86	310	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == n - 1
86	310	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 1
87	318	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 67
88	326	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 1030
89	330	8	MathUtils.java	binomialCoefficientLog	n	int	0	RET	k > $ / 2
89	330	8	MathUtils.java	binomialCoefficientLog	k	int	0	RET	$ > n / 2
35235	340	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n
35235	340	8	MathUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $
35236	345	8	MathUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= k
35236	345	8	MathUtils.java	binomialCoefficientLog	k	int	0	NIL-FOR	i <= $
90	360	8	MathUtils.java	checkBinomial	n	int	0	DEF	$ < k
90	360	8	MathUtils.java	checkBinomial	k	int	0	DEF	n < $
91	365	8	MathUtils.java	checkBinomial	n	int	0	DEF	$ < 0
92	383	8	MathUtils.java	compareTo	THIS	MathUtils	1	RET	$.equals(x, y, eps)
92	383	8	MathUtils.java	compareTo	x	double	1	RET	equals($, y, eps)
92	383	8	MathUtils.java	compareTo	y	double	1	RET	equals(x, $, eps)
92	383	8	MathUtils.java	compareTo	eps	double	1	RET	equals(x, y, $)
93	385	15	MathUtils.java	compareTo	x	double	0	RET	$ < y
93	385	15	MathUtils.java	compareTo	y	double	0	RET	x < $
94	453	8	MathUtils.java	equals	xInt	long	0	DEF	$ < 0
95	456	8	MathUtils.java	equals	yInt	long	0	DEF	$ < 0
96	474	8	MathUtils.java	equals	x	double[]	0	RET	$ == null
96	474	8	MathUtils.java	equals	y	double[]	0	RET	$ == null
97	477	8	MathUtils.java	equals	THIS	MathUtils	0	RET	x.$.length != y.$.length
97	477	8	MathUtils.java	equals	x	double[]	0	RET	$.length != y.length
97	477	8	MathUtils.java	equals	y	double[]	0	RET	x.length != $.length
35237	480	8	MathUtils.java	equals	THIS	MathUtils	0	NIL-FOR	i < x.$.length
35237	480	8	MathUtils.java	equals	i	int	0	NIL-FOR	$ < x.length
35237	480	8	MathUtils.java	equals	x	double[]	0	NIL-FOR	i < $.length
98	481	12	MathUtils.java	equals	THIS	MathUtils	0	RET	$.equals(x[i], y[i])
98	481	12	MathUtils.java	equals	i	int	0	RET	equals(x[$], y[$])
98	481	12	MathUtils.java	equals	x	double[]	0	RET	equals($[i], y[i])
98	481	12	MathUtils.java	equals	y	double[]	0	RET	equals(x[i], $[i])
99	511	8	MathUtils.java	factorial	n	int	0	DEF	$ < 0
100	516	8	MathUtils.java	factorial	n	int	0	ArithmeticException	$ > 20
101	544	8	MathUtils.java	factorialDouble	n	int	0	DEF	$ < 0
102	549	8	MathUtils.java	factorialDouble	n	int	0	RET	$ < 21
103	569	8	MathUtils.java	factorialLog	n	int	0	DEF	$ < 0
104	574	8	MathUtils.java	factorialLog	n	int	0	RET	$ < 21
35238	578	8	MathUtils.java	factorialLog	i	int	0	NIL-FOR	$ <= n
35238	578	8	MathUtils.java	factorialLog	n	int	0	NIL-FOR	i <= $
105	616	8	MathUtils.java	gcd	u	int	0	RET	$ == 0
105	616	8	MathUtils.java	gcd	v	int	0	RET	$ == 0
106	617	12	MathUtils.java	gcd	u	int	0	DEF	$ == Integer.MIN_VALUE
106	617	12	MathUtils.java	gcd	v	int	0	DEF	$ == Integer.MIN_VALUE
107	629	8	MathUtils.java	gcd	u	int	0	DEF	$ > 0
108	632	8	MathUtils.java	gcd	v	int	0	DEF	$ > 0
35239	637	8	MathUtils.java	gcd	u	int	0	NIL-WHILE	($ & 1) == 0
35239	637	8	MathUtils.java	gcd	v	int	0	NIL-WHILE	($ & 1) == 0
35239	637	8	MathUtils.java	gcd	k	int	0	NIL-WHILE	$ < 31
109	643	8	MathUtils.java	gcd	k	int	0	DEF	$ == 31
35240	653	8	MathUtils.java	gcd	t	int	0	NIL-DOWHILE	$ != 0
35241	656	12	MathUtils.java	gcd	t	int	0	NIL-WHILE	($ & 1) == 0
110	660	12	MathUtils.java	gcd	t	int	1	DEF	$ > 0
111	705	8	MathUtils.java	gcd	u	long	0	RET	$ == 0
111	705	8	MathUtils.java	gcd	v	long	0	RET	$ == 0
112	706	12	MathUtils.java	gcd	u	long	0	DEF	$ == Long.MIN_VALUE
112	706	12	MathUtils.java	gcd	v	long	0	DEF	$ == Long.MIN_VALUE
113	718	8	MathUtils.java	gcd	u	long	0	DEF	$ > 0
114	721	8	MathUtils.java	gcd	v	long	0	DEF	$ > 0
35242	726	8	MathUtils.java	gcd	u	long	0	NIL-WHILE	($ & 1) == 0
35242	726	8	MathUtils.java	gcd	v	long	0	NIL-WHILE	($ & 1) == 0
35242	726	8	MathUtils.java	gcd	k	int	0	NIL-WHILE	$ < 63
115	732	8	MathUtils.java	gcd	k	int	0	DEF	$ == 63
35243	742	8	MathUtils.java	gcd	t	long	0	NIL-DOWHILE	$ != 0
35244	745	12	MathUtils.java	gcd	t	long	0	NIL-WHILE	($ & 1) == 0
116	749	12	MathUtils.java	gcd	t	long	1	DEF	$ > 0
117	803	8	MathUtils.java	indicator	x	double	0	RET	Double.isNaN($)
118	817	8	MathUtils.java	indicator	x	float	0	RET	Float.isNaN($)
119	878	8	MathUtils.java	lcm	a	int	0	RET	$==0
119	878	8	MathUtils.java	lcm	b	int	0	RET	$==0
120	882	8	MathUtils.java	lcm	lcm	int	0	DEF	$ == Integer.MIN_VALUE
121	913	8	MathUtils.java	lcm	a	long	0	RET	$==0
121	913	8	MathUtils.java	lcm	b	long	0	RET	$==0
122	917	8	MathUtils.java	lcm	lcm	long	0	DEF	$ == Long.MIN_VALUE
123	957	8	MathUtils.java	mulAndCheck	m	long	0	ArithmeticException	$ < Integer.MIN_VALUE
123	957	8	MathUtils.java	mulAndCheck	m	long	0	ArithmeticException	$ > Integer.MAX_VALUE
124	976	8	MathUtils.java	mulAndCheck	a	long	1	DEF	$ > b
124	976	8	MathUtils.java	mulAndCheck	b	long	1	DEF	a > $
125	980	12	MathUtils.java	mulAndCheck	a	long	1	ArithmeticException	$ < 0
126	981	16	MathUtils.java	mulAndCheck	b	long	1	ArithmeticException	$ < 0
127	983	20	MathUtils.java	mulAndCheck	a	long	1	DEF	$ >= Long.MAX_VALUE / b
127	983	20	MathUtils.java	mulAndCheck	b	long	1	DEF	a >= Long.MAX_VALUE / $
128	988	23	MathUtils.java	mulAndCheck	b	long	1	ArithmeticException	$ > 0
129	990	20	MathUtils.java	mulAndCheck	a	long	1	DEF	Long.MIN_VALUE / b <= $
129	990	20	MathUtils.java	mulAndCheck	b	long	1	DEF	Long.MIN_VALUE / $ <= a
130	1000	19	MathUtils.java	mulAndCheck	a	long	1	ArithmeticException	$ > 0
131	1005	16	MathUtils.java	mulAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE / b
131	1005	16	MathUtils.java	mulAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE / $
132	1038	8	MathUtils.java	nextAfter	d	double	1	RET	Double.isNaN($)
132	1038	8	MathUtils.java	nextAfter	d	double	1	RET	Double.isInfinite($)
133	1040	15	MathUtils.java	nextAfter	d	double	0	RET	$ == 0
134	1052	8	MathUtils.java	nextAfter	d	double	1	RET	$ * (direction - $) >= 0
134	1052	8	MathUtils.java	nextAfter	direction	double	1	RET	d * ($ - d) >= 0
135	1054	16	MathUtils.java	nextAfter	mantissa	long	1	RET	$ == 0x000fffffffffffffL
136	1063	16	MathUtils.java	nextAfter	mantissa	long	1	RET	$ == 0L
137	1087	8	MathUtils.java	scalb	d	double	0	RET	Double.isNaN($)
137	1087	8	MathUtils.java	scalb	d	double	0	RET	$ == 0
137	1087	8	MathUtils.java	scalb	d	double	0	RET	Double.isInfinite($)
138	1147	9	MathUtils.java	normalizeArray	normalizedSum	double	0	DEF	Double.isInfinite($)
139	1151	9	MathUtils.java	normalizeArray	normalizedSum	double	0	DEF	Double.isNaN($)
35245	1158	9	MathUtils.java	normalizeArray	i	int	0	NIL-FOR	$ < len
35245	1158	9	MathUtils.java	normalizeArray	len	int	0	NIL-FOR	i < $
140	1159	13	MathUtils.java	normalizeArray	i	int	0	DEF	Double.isInfinite(values[$])
140	1159	13	MathUtils.java	normalizeArray	values	double[]	0	DEF	Double.isInfinite($[i])
141	1163	13	MathUtils.java	normalizeArray	i	int	0	DEF	Double.isNaN(values[$])
141	1163	13	MathUtils.java	normalizeArray	values	double[]	0	DEF	Double.isNaN($[i])
142	1167	9	MathUtils.java	normalizeArray	sum	double	0	DEF	$ == 0
35246	1171	9	MathUtils.java	normalizeArray	i	int	0	NIL-FOR	$ < len
35246	1171	9	MathUtils.java	normalizeArray	len	int	0	NIL-FOR	i < $
143	1172	13	MathUtils.java	normalizeArray	i	int	1	DEF	Double.isNaN(values[$])
143	1172	13	MathUtils.java	normalizeArray	values	double[]	1	DEF	Double.isNaN($[i])
144	1213	12	MathUtils.java	round	x	double	1	RET	Double.isInfinite($)
145	1268	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
146	1278	12	MathUtils.java	roundUnscaled	sign	double	1	DEF	$ == -1
147	1287	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
148	1296	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
149	1298	19	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ < 0.5
150	1302	16	MathUtils.java	roundUnscaled	unscaled	double	1	DEF	Math.floor($) / 2.0 == Math.floor(Math .floor($) / 2.0)
151	1314	12	MathUtils.java	roundUnscaled	fraction	double	1	DEF	$ >= 0.5
152	1322	12	MathUtils.java	roundUnscaled	unscaled	double	0	ArithmeticException	$ != Math.floor($)
153	1373	8	MathUtils.java	sign	x	double	0	RET	Double.isNaN($)
154	1391	8	MathUtils.java	sign	x	float	0	RET	Float.isNaN($)
155	1463	8	MathUtils.java	subAndCheck	s	long	0	ArithmeticException	$ < Integer.MIN_VALUE
155	1463	8	MathUtils.java	subAndCheck	s	long	0	ArithmeticException	$ > Integer.MAX_VALUE
156	1482	8	MathUtils.java	subAndCheck	b	long	1	ArithmeticException	$ == Long.MIN_VALUE
157	1483	12	MathUtils.java	subAndCheck	a	long	1	DEF	$ < 0
158	1505	8	MathUtils.java	pow	e	int	0	DEF	$ < 0
35247	1513	8	MathUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
159	1514	12	MathUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
160	1535	8	MathUtils.java	pow	e	long	0	DEF	$ < 0
35248	1543	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
161	1544	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
162	1565	8	MathUtils.java	pow	e	int	0	DEF	$ < 0
35249	1573	8	MathUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
163	1574	12	MathUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
164	1595	8	MathUtils.java	pow	e	long	0	DEF	$ < 0
35250	1603	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
165	1604	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
166	1625	8	MathUtils.java	pow	e	int	0	DEF	$ < 0
167	1645	8	MathUtils.java	pow	e	long	0	DEF	$ < 0
35251	1653	8	MathUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
168	1654	12	MathUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
169	1675	8	MathUtils.java	pow	e	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
35252	1683	8	MathUtils.java	pow	e	BigInteger	0	NIL-WHILE	BigInteger.ZERO.equals($)
170	1684	12	MathUtils.java	pow	e	BigInteger	0	DEF	$.testBit(0)
35253	1704	8	MathUtils.java	distance1	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
35253	1704	8	MathUtils.java	distance1	i	int	0	NIL-FOR	$ < p1.length
35253	1704	8	MathUtils.java	distance1	p1	double[]	0	NIL-FOR	i < $.length
35254	1719	6	MathUtils.java	distance1	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
35254	1719	6	MathUtils.java	distance1	i	int	0	NIL-FOR	$ < p1.length
35254	1719	6	MathUtils.java	distance1	p1	int[]	0	NIL-FOR	i < $.length
35255	1734	8	MathUtils.java	distance	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
35255	1734	8	MathUtils.java	distance	i	int	0	NIL-FOR	$ < p1.length
35255	1734	8	MathUtils.java	distance	p1	double[]	0	NIL-FOR	i < $.length
35256	1750	6	MathUtils.java	distance	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
35256	1750	6	MathUtils.java	distance	i	int	0	NIL-FOR	$ < p1.length
35256	1750	6	MathUtils.java	distance	p1	int[]	0	NIL-FOR	i < $.length
35257	1766	8	MathUtils.java	distanceInf	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
35257	1766	8	MathUtils.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
35257	1766	8	MathUtils.java	distanceInf	p1	double[]	0	NIL-FOR	i < $.length
35258	1781	8	MathUtils.java	distanceInf	THIS	MathUtils	0	NIL-FOR	i < p1.$.length
35258	1781	8	MathUtils.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
35258	1781	8	MathUtils.java	distanceInf	p1	int[]	0	NIL-FOR	i < $.length
35815	143	8	MatrixUtils.java	createRealIdentityMatrix	i	int	0	NIL-FOR	$ < dimension
35815	143	8	MatrixUtils.java	createRealIdentityMatrix	dimension	int	0	NIL-FOR	i < $
35816	165	8	MatrixUtils.java	createFieldIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
35816	165	8	MatrixUtils.java	createFieldIdentityMatrix	dimension	int	0	NIL-FOR	row < $
35817	185	8	MatrixUtils.java	createBigIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
35817	185	8	MatrixUtils.java	createBigIdentityMatrix	dimension	int	0	NIL-FOR	row < $
35818	203	8	MatrixUtils.java	createRealDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
35818	203	8	MatrixUtils.java	createRealDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
35818	203	8	MatrixUtils.java	createRealDiagonalMatrix	diagonal	double[]	0	NIL-FOR	i < $.length
35819	222	8	MatrixUtils.java	createFieldDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
35819	222	8	MatrixUtils.java	createFieldDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
35819	222	8	MatrixUtils.java	createFieldDiagonalMatrix	diagonal	T[]	0	NIL-FOR	i < $.length
35820	335	8	MatrixUtils.java	createRowRealMatrix	i	int	0	NIL-FOR	$ < nCols
35820	335	8	MatrixUtils.java	createRowRealMatrix	nCols	int	0	NIL-FOR	i < $
773	354	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	DEF	$ == 0
35821	358	8	MatrixUtils.java	createRowFieldMatrix	i	int	0	NIL-FOR	$ < nCols
35821	358	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NIL-FOR	i < $
35822	378	8	MatrixUtils.java	createRowBigMatrix	i	int	0	NIL-FOR	$ < nCols
35822	378	8	MatrixUtils.java	createRowBigMatrix	nCols	int	0	NIL-FOR	i < $
35823	416	8	MatrixUtils.java	createRowBigMatrix	i	int	0	NIL-FOR	$ < nCols
35823	416	8	MatrixUtils.java	createRowBigMatrix	nCols	int	0	NIL-FOR	i < $
35824	434	8	MatrixUtils.java	createColumnRealMatrix	i	int	0	NIL-FOR	$ < nRows
35824	434	8	MatrixUtils.java	createColumnRealMatrix	nRows	int	0	NIL-FOR	i < $
774	453	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	DEF	$ == 0
35825	457	8	MatrixUtils.java	createColumnFieldMatrix	i	int	0	NIL-FOR	$ < nRows
35825	457	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NIL-FOR	i < $
35826	477	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
35826	477	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
35827	497	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
35827	497	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
35828	517	8	MatrixUtils.java	createColumnBigMatrix	row	int	0	NIL-FOR	$ < nRows
35828	517	8	MatrixUtils.java	createColumnBigMatrix	nRows	int	0	NIL-FOR	row < $
775	530	8	MatrixUtils.java	checkRowIndex	m	AnyMatrix	0	MatrixIndexException	row >= $.getRowDimension()
775	530	8	MatrixUtils.java	checkRowIndex	row	int	0	MatrixIndexException	$ >= m.getRowDimension()
775	530	8	MatrixUtils.java	checkRowIndex	row	int	0	MatrixIndexException	$ < 0
776	544	8	MatrixUtils.java	checkColumnIndex	m	AnyMatrix	0	MatrixIndexException	column >= $.getColumnDimension()
776	544	8	MatrixUtils.java	checkColumnIndex	column	int	0	MatrixIndexException	$ >= m.getColumnDimension()
776	544	8	MatrixUtils.java	checkColumnIndex	column	int	0	MatrixIndexException	$ < 0
777	566	8	MatrixUtils.java	checkSubMatrixIndex	startRow	int	0	MatrixIndexException	$ > endRow
777	566	8	MatrixUtils.java	checkSubMatrixIndex	endRow	int	0	MatrixIndexException	startRow > $
778	573	8	MatrixUtils.java	checkSubMatrixIndex	startColumn	int	0	MatrixIndexException	$ > endColumn
778	573	8	MatrixUtils.java	checkSubMatrixIndex	endColumn	int	0	MatrixIndexException	startColumn > $
779	593	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	MatrixIndexException	selectedRows.$.length * selectedColumns.$.length == 0
779	593	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length * selectedColumns.length == 0
779	593	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	MatrixIndexException	selectedRows.length * $.length == 0
780	594	12	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	MatrixIndexException	selectedRows.$.length == 0
780	594	12	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	MatrixIndexException	$.length == 0
781	616	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	DEF	$.getRowDimension() != right.getRowDimension()
781	616	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	DEF	$.getColumnDimension() != right.getColumnDimension()
781	616	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	DEF	left.getRowDimension() != $.getRowDimension()
781	616	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	DEF	left.getColumnDimension() != $.getColumnDimension()
782	633	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	DEF	$.getRowDimension() != right.getRowDimension()
782	633	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	DEF	$.getColumnDimension() != right.getColumnDimension()
782	633	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	DEF	left.getRowDimension() != $.getRowDimension()
782	633	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	DEF	left.getColumnDimension() != $.getColumnDimension()
783	650	8	MatrixUtils.java	checkMultiplicationCompatible	left	AnyMatrix	0	DEF	$.getColumnDimension() != right.getRowDimension()
783	650	8	MatrixUtils.java	checkMultiplicationCompatible	right	AnyMatrix	0	DEF	left.getColumnDimension() != $.getRowDimension()
35829	791	8	MatrixUtils.java	serializeRealVector	i	int	0	NIL-FOR	$ < n
35829	791	8	MatrixUtils.java	serializeRealVector	n	int	0	NIL-FOR	i < $
35830	822	12	MatrixUtils.java	deserializeRealVector	i	int	0	NIL-FOR	$ < n
35830	822	12	MatrixUtils.java	deserializeRealVector	n	int	0	NIL-FOR	i < $
35831	894	8	MatrixUtils.java	serializeRealMatrix	i	int	0	NIL-FOR	$ < n
35831	894	8	MatrixUtils.java	serializeRealMatrix	n	int	0	NIL-FOR	i < $
35832	895	12	MatrixUtils.java	serializeRealMatrix	j	int	0	NIL-FOR	$ < m
35832	895	12	MatrixUtils.java	serializeRealMatrix	m	int	0	NIL-FOR	j < $
35833	928	12	MatrixUtils.java	deserializeRealMatrix	i	int	0	NIL-FOR	$ < n
35833	928	12	MatrixUtils.java	deserializeRealMatrix	n	int	0	NIL-FOR	i < $
35834	930	16	MatrixUtils.java	deserializeRealMatrix	j	int	0	NIL-FOR	$ < m
35834	930	16	MatrixUtils.java	deserializeRealMatrix	m	int	0	NIL-FOR	j < $
1177	74	8	Max.java	increment	THIS	Max	0	DEF	Double.isNaN($.value)
1177	74	8	Max.java	increment	THIS	Max	0	DEF	d > $.value
1177	74	8	Max.java	increment	d	double	0	DEF	$ > value
1178	129	8	Max.java	evaluate	THIS	Max	0	DEF	$.test(values, begin, length)
1178	129	8	Max.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1178	129	8	Max.java	evaluate	begin	int	0	DEF	test(values, $, length)
1178	129	8	Max.java	evaluate	length	int	0	DEF	test(values, begin, $)
36268	131	12	Max.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
36268	131	12	Max.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
36268	131	12	Max.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1179	132	16	Max.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
1179	132	16	Max.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
1105	107	8	Mean.java	increment	THIS	Mean	0	DEF	$.incMoment
1106	117	8	Mean.java	clear	THIS	Mean	0	DEF	$.incMoment
1107	155	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, begin, length)
1107	155	8	Mean.java	evaluate	values	double[]	0	RET	test($, begin, length)
1107	155	8	Mean.java	evaluate	begin	int	0	RET	test(values, $, length)
1107	155	8	Mean.java	evaluate	length	int	0	RET	test(values, begin, $)
36254	164	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
36254	164	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
36254	164	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1108	203	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, weights, begin, length)
1108	203	8	Mean.java	evaluate	values	double[]	0	RET	test($, weights, begin, length)
1108	203	8	Mean.java	evaluate	weights	double[]	0	RET	test(values, $, begin, length)
1108	203	8	Mean.java	evaluate	begin	int	0	RET	test(values, weights, $, length)
1108	203	8	Mean.java	evaluate	length	int	0	RET	test(values, weights, begin, $)
36255	212	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
36255	212	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
36255	212	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
36361	144	8	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	NIL-FOR	$.mti < N
1350	161	8	MersenneTwister.java	setSeed	seed	int[]	0	RET	$ == null
36362	170	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
1351	176	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
1352	180	12	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	DEF	j >= seed.$.length
1352	180	12	MersenneTwister.java	setSeed	j	int	0	DEF	$ >= seed.length
1352	180	12	MersenneTwister.java	setSeed	seed	int[]	0	DEF	j >= $.length
36363	185	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
1353	191	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
1354	225	8	MersenneTwister.java	next	THIS	MersenneTwister	0	DEF	$.mti >= N
36364	227	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - M
36365	233	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - 1
1654	152	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DEF	xval.$.length == 0
1654	152	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	DEF	$.length == 0
1654	152	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	DEF	$[0] == null
1655	156	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xval.$.length != yval.$.length
1655	156	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	DimensionMismatchException	$.length != yval.length
1655	156	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	DimensionMismatchException	xval.length != $.length
36609	165	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NIL-FOR	i < xval.$.length
36609	165	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < xval.length
36609	165	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NIL-FOR	i < $.length
1656	167	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xvalI.$.length != $.dimension
1656	167	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	DimensionMismatchException	$.length != dimension
36610	177	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < microsphereElements
36610	177	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	microsphereElements	int	0	NIL-FOR	i < $
1657	203	12	MicrosphereInterpolatingFunction.java	value	diffNorm	double	0	RET	Math.abs($) < Math.ulp(1d)
1658	222	12	MicrosphereInterpolatingFunction.java	value	sd	Entry<RealVector,Double>	0	DEF	$ != null
1660	100	8	MicrosphereInterpolator.java	setBrightnessExponent	brightnessExponent	int	0	DEF	$ < 0
1661	114	8	MicrosphereInterpolator.java	setMicropshereElements	THIS	MicrosphereInterpolator	0	DEF	$.microsphereElements < 0
36574	91	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
36574	91	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1174	74	8	Min.java	increment	THIS	Min	0	DEF	Double.isNaN($.value)
1174	74	8	Min.java	increment	THIS	Min	0	DEF	d < $.value
1174	74	8	Min.java	increment	d	double	0	DEF	$ < value
1175	129	8	Min.java	evaluate	THIS	Min	0	DEF	$.test(values, begin, length)
1175	129	8	Min.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1175	129	8	Min.java	evaluate	begin	int	0	DEF	test(values, $, length)
1175	129	8	Min.java	evaluate	length	int	0	DEF	test(values, begin, $)
36267	131	12	Min.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
36267	131	12	Min.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
36267	131	12	Min.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1176	132	16	Min.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
1176	132	16	Min.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
1697	96	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1697	96	8	MullerSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1698	97	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1698	97	8	MullerSolver.java	solve	max	double	0	RET	f.value($) == 0.0
1699	98	8	MullerSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
1699	98	8	MullerSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
1700	102	8	MullerSolver.java	solve	THIS	MullerSolver	1	RET	$.isBracketing(min, initial, f)
1700	102	8	MullerSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
1700	102	8	MullerSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
1700	102	8	MullerSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
1701	151	8	MullerSolver.java	solve	y0	double	0	RET	$ == 0.0
1702	154	8	MullerSolver.java	solve	y2	double	0	RET	$ == 0.0
36622	160	8	MullerSolver.java	solve	THIS	MullerSolver	0	NIL-FOR	i <= $.maximalIterationCount
36622	160	8	MullerSolver.java	solve	i	int	0	NIL-FOR	$ <= maximalIterationCount
1703	179	12	MullerSolver.java	solve	x	double	0	RET	Math.abs($ - oldx) <= tolerance
1703	179	12	MullerSolver.java	solve	tolerance	double	0	RET	Math.abs(x - oldx) <= $
1703	179	12	MullerSolver.java	solve	oldx	double	0	RET	Math.abs(x - $) <= tolerance
1704	183	12	MullerSolver.java	solve	THIS	MullerSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
1704	183	12	MullerSolver.java	solve	y	double	0	RET	Math.abs($) <= functionValueAccuracy
1705	196	12	MullerSolver.java	solve	bisect	boolean	1	DEF	$
1706	206	16	MullerSolver.java	solve	ym	double	1	DEF	MathUtils.sign(y0) + MathUtils.sign($) == 0.0
1706	206	16	MullerSolver.java	solve	y0	double	1	DEF	MathUtils.sign($) + MathUtils.sign(ym) == 0.0
1707	294	8	MullerSolver.java	solve2	y0	double	0	RET	$ == 0.0
1708	295	8	MullerSolver.java	solve2	y1	double	0	RET	$ == 0.0
36623	299	8	MullerSolver.java	solve2	THIS	MullerSolver	0	NIL-FOR	i <= $.maximalIterationCount
36623	299	8	MullerSolver.java	solve2	i	int	0	NIL-FOR	$ <= maximalIterationCount
1709	308	12	MullerSolver.java	solve2	delta	double	1	DEF	$ >= 0.0
1710	317	12	MullerSolver.java	solve2	denominator	double	1	DEF	$ != 0
36624	321	16	MullerSolver.java	solve2	x	double	0	NIL-WHILE	$ == x1
36624	321	16	MullerSolver.java	solve2	x	double	0	NIL-WHILE	$ == x2
36624	321	16	MullerSolver.java	solve2	x1	double	0	NIL-WHILE	x == $
36624	321	16	MullerSolver.java	solve2	x2	double	0	NIL-WHILE	x == $
1711	333	12	MullerSolver.java	solve2	x	double	0	RET	Math.abs($ - oldx) <= tolerance
1711	333	12	MullerSolver.java	solve2	tolerance	double	0	RET	Math.abs(x - oldx) <= $
1711	333	12	MullerSolver.java	solve2	oldx	double	0	RET	Math.abs(x - $) <= tolerance
1712	337	12	MullerSolver.java	solve2	THIS	MullerSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
1712	337	12	MullerSolver.java	solve2	y	double	0	RET	Math.abs($) <= functionValueAccuracy
1043	75	12	MultiDirectional.java	iterateSimplex	best	RealPointValuePair	0	RET	comparator.compare(reflected, $) < 0
1043	75	12	MultiDirectional.java	iterateSimplex	reflected	RealPointValuePair	0	RET	comparator.compare($, best) < 0
1043	75	12	MultiDirectional.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(reflected, best) < 0
1044	80	16	MultiDirectional.java	iterateSimplex	expanded	RealPointValuePair	0	DEF	comparator.compare(reflected, $) <= 0
1044	80	16	MultiDirectional.java	iterateSimplex	reflected	RealPointValuePair	0	DEF	comparator.compare($, expanded) <= 0
1044	80	16	MultiDirectional.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	DEF	$.compare(reflected, expanded) <= 0
1045	91	12	MultiDirectional.java	iterateSimplex	best	RealPointValuePair	0	RET	comparator.compare(contracted, $) < 0
1045	91	12	MultiDirectional.java	iterateSimplex	contracted	RealPointValuePair	0	RET	comparator.compare($, best) < 0
1045	91	12	MultiDirectional.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(contracted, best) < 0
36223	99	12	MultiDirectional.java	iterateSimplex	THIS	MultiDirectional	0	NIL-FOR	i < $.simplex.$.length
36223	99	12	MultiDirectional.java	iterateSimplex	i	int	0	NIL-FOR	$ < simplex.length
1046	102	12	MultiDirectional.java	iterateSimplex	converged	boolean	0	RET	$
36224	130	8	MultiDirectional.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ <= n
36224	130	8	MultiDirectional.java	evaluateNewSimplex	n	int	0	NIL-FOR	i <= $
36225	133	12	MultiDirectional.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < n
36225	133	12	MultiDirectional.java	evaluateNewSimplex	n	int	0	NIL-FOR	j < $
911	119	8	MultiStartDifferentiableMultivariateRealOptimizer.java	getOptima	THIS	MultiStartDifferentiableMultivariateRealOptimizer	0	DEF	$.optima == null
36105	182	8	MultiStartDifferentiableMultivariateRealOptimizer.java	optimize	THIS	MultiStartDifferentiableMultivariateRealOptimizer	0	NIL-FOR	i < $.starts
36105	182	8	MultiStartDifferentiableMultivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
912	216	8	MultiStartDifferentiableMultivariateRealOptimizer.java	optimize	THIS	MultiStartDifferentiableMultivariateRealOptimizer	0	OptimizationException	$.optima[0] == null
1035	123	8	MultiStartDifferentiableMultivariateVectorialOptimizer.java	getOptima	THIS	MultiStartDifferentiableMultivariateVectorialOptimizer	0	DEF	$.optima == null
36213	186	8	MultiStartDifferentiableMultivariateVectorialOptimizer.java	optimize	THIS	MultiStartDifferentiableMultivariateVectorialOptimizer	0	NIL-FOR	i < $.starts
36213	186	8	MultiStartDifferentiableMultivariateVectorialOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1036	226	8	MultiStartDifferentiableMultivariateVectorialOptimizer.java	optimize	THIS	MultiStartDifferentiableMultivariateVectorialOptimizer	0	OptimizationException	$.optima[0] == null
939	114	8	MultiStartMultivariateRealOptimizer.java	getOptima	THIS	MultiStartMultivariateRealOptimizer	0	DEF	$.optima == null
36116	171	8	MultiStartMultivariateRealOptimizer.java	optimize	THIS	MultiStartMultivariateRealOptimizer	0	NIL-FOR	i < $.starts
36116	171	8	MultiStartMultivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
940	204	8	MultiStartMultivariateRealOptimizer.java	optimize	THIS	MultiStartMultivariateRealOptimizer	0	OptimizationException	$.optima[0] == null
913	192	8	MultiStartUnivariateRealOptimizer.java	getOptima	THIS	MultiStartUnivariateRealOptimizer	0	DEF	$.optima == null
914	218	8	MultiStartUnivariateRealOptimizer.java	getOptimaValues	THIS	MultiStartUnivariateRealOptimizer	0	DEF	$.optimaValues == null
36106	236	8	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	NIL-FOR	i < $.starts
36106	236	8	MultiStartUnivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
36107	262	8	MultiStartUnivariateRealOptimizer.java	optimize	i	int	0	NIL-FOR	$ < lastNaN
36107	262	8	MultiStartUnivariateRealOptimizer.java	optimize	lastNaN	int	0	NIL-FOR	i < $
915	263	12	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	DEF	Double.isNaN($.optima[i])
915	263	12	MultiStartUnivariateRealOptimizer.java	optimize	i	int	0	DEF	Double.isNaN(optima[$])
36108	273	8	MultiStartUnivariateRealOptimizer.java	optimize	j	int	0	NIL-FOR	$ < lastNaN
36108	273	8	MultiStartUnivariateRealOptimizer.java	optimize	lastNaN	int	0	NIL-FOR	j < $
916	277	12	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	DEF	(goalType == $.GoalType.MAXIMIZE) ^ (currY < prevY)
916	277	12	MultiStartUnivariateRealOptimizer.java	optimize	prevY	double	0	DEF	(goalType == GoalType.MAXIMIZE) ^ (currY < $)
916	277	12	MultiStartUnivariateRealOptimizer.java	optimize	currY	double	0	DEF	(goalType == GoalType.MAXIMIZE) ^ ($ < prevY)
916	277	12	MultiStartUnivariateRealOptimizer.java	optimize	goalType	GoalType	0	DEF	($ == GoalType.MAXIMIZE) ^ (currY < prevY)
36109	282	16	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	NIL-WHILE	(goalType == $.GoalType.MAXIMIZE) ^ (currY < mIY)
36109	282	16	MultiStartUnivariateRealOptimizer.java	optimize	i	int	0	NIL-WHILE	$ >= 0
36109	282	16	MultiStartUnivariateRealOptimizer.java	optimize	mIY	double	0	NIL-WHILE	(goalType == GoalType.MAXIMIZE) ^ (currY < $)
36109	282	16	MultiStartUnivariateRealOptimizer.java	optimize	currY	double	0	NIL-WHILE	(goalType == GoalType.MAXIMIZE) ^ ($ < mIY)
36109	282	16	MultiStartUnivariateRealOptimizer.java	optimize	goalType	GoalType	0	NIL-WHILE	($ == GoalType.MAXIMIZE) ^ (currY < mIY)
917	285	20	MultiStartUnivariateRealOptimizer.java	optimize	i	int	1	DEF	$-- != 0
918	300	8	MultiStartUnivariateRealOptimizer.java	optimize	THIS	MultiStartUnivariateRealOptimizer	0	OptimizationException	Double.isNaN($.optima[0])
1649	114	8	MultistepIntegrator.java	MultistepIntegrator	nSteps	int	0	DEF	$ <= 0
1650	226	12	MultistepIntegrator.java	start	THIS	MultistepIntegrator	0	DEF	$.de instanceof InitializationCompletedMarkerException
36238	122	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	i	int	0	NIL-FOR	$ < k
36238	122	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	k	int	0	NIL-FOR	i < $
36239	147	8	MultivariateSummaryStatistics.java	addValue	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
36239	147	8	MultivariateSummaryStatistics.java	addValue	i	int	0	NIL-FOR	$ < k
36240	184	8	MultivariateSummaryStatistics.java	getResults	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < results.$.length
36240	184	8	MultivariateSummaryStatistics.java	getResults	i	int	0	NIL-FOR	$ < results.length
36240	184	8	MultivariateSummaryStatistics.java	getResults	results	double[]	0	NIL-FOR	i < $.length
1062	243	8	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 1
1063	245	15	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 2
36241	249	12	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
36241	249	12	MultivariateSummaryStatistics.java	getStandardDeviation	i	int	0	NIL-FOR	$ < k
36242	331	8	MultivariateSummaryStatistics.java	append	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < data.$.length
36242	331	8	MultivariateSummaryStatistics.java	append	i	int	0	NIL-FOR	$ < data.length
36242	331	8	MultivariateSummaryStatistics.java	append	data	double[]	0	NIL-FOR	i < $.length
1064	332	12	MultivariateSummaryStatistics.java	append	i	int	0	DEF	$ > 0
36243	345	8	MultivariateSummaryStatistics.java	clear	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
36243	345	8	MultivariateSummaryStatistics.java	clear	i	int	0	NIL-FOR	$ < k
1065	365	8	MultivariateSummaryStatistics.java	equals	THIS	MultivariateSummaryStatistics	0	RET	object == $
1065	365	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ == this
1066	368	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ instanceof MultivariateSummaryStatistics == false
1067	614	8	MultivariateSummaryStatistics.java	checkEmpty	THIS	MultivariateSummaryStatistics	0	DEF	$.n > 0
1068	628	8	MultivariateSummaryStatistics.java	checkDimension	THIS	MultivariateSummaryStatistics	0	DimensionMismatchException	dimension != $.k
1068	628	8	MultivariateSummaryStatistics.java	checkDimension	dimension	int	0	DimensionMismatchException	$ != k
36306	193	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < data.$.length
36306	193	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < data.length
36306	193	8	NaturalRanking.java	rank	data	double[]	0	NIL-FOR	i < $.length
36307	226	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
36307	226	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < ranks.length
36307	226	8	NaturalRanking.java	rank	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1247	227	12	NaturalRanking.java	rank	i	int	1	DEF	Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
1247	227	12	NaturalRanking.java	rank	ranks	IntDoublePair[]	1	DEF	Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
1248	230	16	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
1249	241	8	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
1250	244	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	DEF	$.nanStrategy == $.NaNStrategy.FIXED
1251	258	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	RET	$.containsNaNs(ranks)
1251	258	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	RET	containsNaNs($)
36308	263	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
36308	263	8	NaturalRanking.java	removeNaNs	i	int	0	NIL-FOR	$ < ranks.length
36308	263	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1252	264	12	NaturalRanking.java	removeNaNs	i	int	1	DEF	Double.isNaN(ranks[$].getValue())
1252	264	12	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	1	DEF	Double.isNaN($[i].getValue())
36309	266	16	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	k < ranks.$.length
36309	266	16	NaturalRanking.java	removeNaNs	k	int	0	NIL-FOR	$ < ranks.length
36309	266	16	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	k < $.length
36310	288	8	NaturalRanking.java	recodeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
36310	288	8	NaturalRanking.java	recodeNaNs	i	int	0	NIL-FOR	$ < ranks.length
36310	288	8	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1253	289	12	NaturalRanking.java	recodeNaNs	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
1253	289	12	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
36311	303	8	NaturalRanking.java	containsNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
36311	303	8	NaturalRanking.java	containsNaNs	i	int	0	NIL-FOR	$ < ranks.length
36311	303	8	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1254	304	12	NaturalRanking.java	containsNaNs	i	int	0	RET	Double.isNaN(ranks[$].getValue())
1254	304	12	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	RET	Double.isNaN($[i].getValue())
36312	346	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
36313	356	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
36314	374	8	NaturalRanking.java	fill	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
1255	386	8	NaturalRanking.java	restoreNaNs	nanPositions	List<Integer>	0	RET	$.size() == 0
36315	390	8	NaturalRanking.java	restoreNaNs	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
36316	404	8	NaturalRanking.java	getNanPositions	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
36316	404	8	NaturalRanking.java	getNanPositions	i	int	0	NIL-FOR	$ < ranks.length
36316	404	8	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
1256	405	12	NaturalRanking.java	getNanPositions	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
1256	405	12	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
36214	91	8	NelderMead.java	iterateSimplex	i	int	0	NIL-FOR	$ < n
36214	91	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	i < $
36215	93	12	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
36215	93	12	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
36216	98	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
36216	98	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
36217	104	8	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
36217	104	8	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
1037	109	8	NelderMead.java	iterateSimplex	best	RealPointValuePair	1	DEF	comparator.compare($, reflected) <= 0
1037	109	8	NelderMead.java	iterateSimplex	secondBest	RealPointValuePair	1	DEF	comparator.compare(reflected, $) < 0
1037	109	8	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare($, secondBest) < 0
1037	109	8	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare(best, $) <= 0
1037	109	8	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(reflected, secondBest) < 0
1037	109	8	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(best, reflected) <= 0
1038	115	15	NelderMead.java	iterateSimplex	best	RealPointValuePair	1	DEF	comparator.compare(reflected, $) < 0
1038	115	15	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare($, best) < 0
1038	115	15	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(reflected, best) < 0
36218	119	12	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
36218	119	12	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
1039	124	12	NelderMead.java	iterateSimplex	expanded	RealPointValuePair	1	DEF	comparator.compare($, reflected) < 0
1039	124	12	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	DEF	comparator.compare(expanded, $) < 0
1039	124	12	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	DEF	$.compare(expanded, reflected) < 0
1040	134	12	NelderMead.java	iterateSimplex	worst	RealPointValuePair	1	RET	comparator.compare(reflected, $) < 0
1040	134	12	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	1	RET	comparator.compare($, worst) < 0
1040	134	12	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	1	RET	$.compare(reflected, worst) < 0
36219	138	16	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
36219	138	16	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
1041	143	16	NelderMead.java	iterateSimplex	outContracted	RealPointValuePair	0	RET	comparator.compare($, reflected) <= 0
1041	143	16	NelderMead.java	iterateSimplex	reflected	RealPointValuePair	0	RET	comparator.compare(outContracted, $) <= 0
1041	143	16	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(outContracted, reflected) <= 0
36220	153	16	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
36220	153	16	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
1042	158	16	NelderMead.java	iterateSimplex	inContracted	RealPointValuePair	0	RET	comparator.compare($, worst) < 0
1042	158	16	NelderMead.java	iterateSimplex	worst	RealPointValuePair	0	RET	comparator.compare(inContracted, $) < 0
1042	158	16	NelderMead.java	iterateSimplex	comparator	Comparator<RealPointValuePair>	0	RET	$.compare(inContracted, worst) < 0
36221	168	12	NelderMead.java	iterateSimplex	THIS	NelderMead	0	NIL-FOR	i < $.simplex.$.length
36221	168	12	NelderMead.java	iterateSimplex	i	int	0	NIL-FOR	$ < simplex.length
36222	170	16	NelderMead.java	iterateSimplex	j	int	0	NIL-FOR	$ < n
36222	170	16	NelderMead.java	iterateSimplex	n	int	0	NIL-FOR	j < $
36620	118	12	NewtonSolver.java	solve	THIS	NewtonSolver	0	NIL-WHILE	i < $.maximalIterationCount
36620	118	12	NewtonSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1684	121	16	NewtonSolver.java	solve	THIS	NewtonSolver	0	RET	Math.abs(x1 - x0) <= $.absoluteAccuracy
1684	121	16	NewtonSolver.java	solve	x0	double	0	RET	Math.abs(x1 - $) <= absoluteAccuracy
1684	121	16	NewtonSolver.java	solve	x1	double	0	RET	Math.abs($ - x0) <= absoluteAccuracy
1022	105	8	NonLinearConjugateGradientOptimizer.java	setInitialStep	initialStep	double	1	DEF	$ <= 0
1023	119	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.preconditioner == null
1024	122	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.solver == null
1025	127	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.goal == $.GoalType.MINIMIZE
36199	128	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
36199	128	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
36200	138	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
36200	138	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1026	148	16	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	RealPointValuePair	0	RET	$ != null
1027	149	20	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	RET	$.checker.converged($.getIterations(), previous, current)
1027	149	20	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	RealPointValuePair	0	RET	checker.converged(getIterations(), $, current)
1027	149	20	NonLinearConjugateGradientOptimizer.java	doOptimize	current	RealPointValuePair	0	RET	checker.converged(getIterations(), previous, $)
36201	167	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < $.point.$.length
36201	167	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < point.length
1028	171	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	$.goal == $.GoalType.MINIMIZE
36202	172	20	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
36202	172	20	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
36203	181	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
36203	181	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1029	186	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.updateFormula == $.ConjugateGradientFormula.FLETCHER_REEVES
36204	190	20	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < r.$.length
36204	190	20	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < r.length
36204	190	20	NonLinearConjugateGradientOptimizer.java	doOptimize	r	double[]	0	NIL-FOR	i < $.length
1030	198	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.getIterations() % n == 0
1030	198	16	NonLinearConjugateGradientOptimizer.java	doOptimize	beta	double	1	DEF	$ < 0
1030	198	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	1	DEF	getIterations() % $ == 0
36205	203	20	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
36205	203	20	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
36206	229	8	NonLinearConjugateGradientOptimizer.java	findUpperBound	step	double	0	NIL-FOR	$ < Double.MAX_VALUE
1031	232	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yA	double	0	RET	$ * yB <= 0
1031	232	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yB	double	0	RET	yA * $ <= 0
1475	84	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.scaled != null
1475	84	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.scaled != null
1476	87	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.nordsieck != null
1476	87	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.nordsieck != null
1477	90	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.stateVariation != null
1477	90	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.stateVariation != null
36480	145	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < $.scaled.$.length
36480	145	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < scaled.length
36481	151	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < nData.$.length
36481	151	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < nData.length
36481	151	8	NordsieckStepInterpolator.java	rescale	nData	double[][]	0	NIL-FOR	i < $.length
36482	154	12	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
36482	154	12	NordsieckStepInterpolator.java	rescale	j	int	0	NIL-FOR	$ < nDataI.length
36482	154	12	NordsieckStepInterpolator.java	rescale	nDataI	double[]	0	NIL-FOR	j < $.length
36483	197	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ >= 0
36484	201	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
36484	201	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < nDataI.length
36484	201	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	nDataI	double[]	0	NIL-FOR	j < $.length
36485	208	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < $.currentState.$.length
36485	208	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < currentState.length
1478	230	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.scaled == null
36486	234	12	NordsieckStepInterpolator.java	writeExternal	j	int	0	NIL-FOR	$ < n
36486	234	12	NordsieckStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	j < $
1479	239	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.nordsieck == null
1480	264	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
36487	266	12	NordsieckStepInterpolator.java	readExternal	j	int	0	NIL-FOR	$ < n
36487	266	12	NordsieckStepInterpolator.java	readExternal	n	int	0	NIL-FOR	j < $
1481	274	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
1482	280	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
1482	280	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
432	97	8	NormalDistributionImpl.java	setStandardDeviation	sd	double	0	DEF	$ <= 0.0
433	129	12	NormalDistributionImpl.java	cumulativeProbability	THIS	NormalDistributionImpl	1	RET	x < ($.mean - 20 * $.standardDeviation)
433	129	12	NormalDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ < (mean - 20 * standardDeviation)
434	131	19	NormalDistributionImpl.java	cumulativeProbability	THIS	NormalDistributionImpl	1	RET	x > ($.mean + 20 * $.standardDeviation)
434	131	19	NormalDistributionImpl.java	cumulativeProbability	x	double	1	RET	$ > (mean + 20 * standardDeviation)
435	156	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
436	159	8	NormalDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
437	178	8	NormalDistributionImpl.java	getDomainLowerBound	p	double	1	DEF	$ < .5
438	200	8	NormalDistributionImpl.java	getDomainUpperBound	p	double	1	DEF	$ < .5
439	221	8	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ < .5
440	223	15	NormalDistributionImpl.java	getInitialDomain	p	double	1	DEF	$ > .5
36322	110	8	OLSMultipleLinearRegression.java	calculateHat	i	int	0	NIL-FOR	$ < n
36322	110	8	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	i < $
36323	111	12	OLSMultipleLinearRegression.java	calculateHat	j	int	0	NIL-FOR	$ < n
36323	111	12	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	j < $
1280	112	16	OLSMultipleLinearRegression.java	calculateHat	j	int	1	DEF	i == $
1280	112	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ < p
1280	112	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ == j
1280	112	16	OLSMultipleLinearRegression.java	calculateHat	p	int	1	DEF	i < $
1395	71	8	OnePointCrossover.java	crossover	first	Chromosome	0	IllegalArgumentException	$ instanceof AbstractListChromosome<?>
1395	71	8	OnePointCrossover.java	crossover	second	Chromosome	0	IllegalArgumentException	$ instanceof AbstractListChromosome<?>
1396	87	8	OnePointCrossover.java	crossover	length	int	0	IllegalArgumentException	$ != second.getLength()
1396	87	8	OnePointCrossover.java	crossover	second	AbstractListChromosome<T>	0	IllegalArgumentException	length != $.getLength()
36383	101	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < crossoverIndex
36383	101	8	OnePointCrossover.java	crossover	crossoverIndex	int	0	NIL-FOR	i < $
36384	106	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < length
36384	106	8	OnePointCrossover.java	crossover	length	int	0	NIL-FOR	i < $
1206	103	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	DEF	$ > 0.5
1206	103	8	OneWayAnovaImpl.java	anovaTest	alpha	double	0	DEF	$ <= 0
1207	126	8	OneWayAnovaImpl.java	anovaStats	categoryData	Collection<double[]>	0	DEF	$.size() < 2
1208	134	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	DEF	$.array.$.length <= 1
36271	153	12	OneWayAnovaImpl.java	anovaStats	THIS	OneWayAnovaImpl	0	NIL-FOR	i < $.data.$.length
36271	153	12	OneWayAnovaImpl.java	anovaStats	i	int	0	NIL-FOR	$ < data.length
39	160	8	OpenIntToDoubleHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
40	165	8	OpenIntToDoubleHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
40	165	8	OpenIntToDoubleHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
41	189	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
41	189	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
41	189	8	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
42	193	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
42	193	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	states[$] == FREE
35225	198	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
35225	198	8	OpenIntToDoubleHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
43	201	12	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
43	201	12	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
43	201	12	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
44	219	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
44	219	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
44	219	8	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
45	223	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
45	223	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
35226	228	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
35226	228	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
46	231	12	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
46	231	12	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
46	231	12	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
47	281	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
47	281	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
48	283	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
48	283	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
48	283	15	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
48	283	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
48	283	15	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
49	289	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
49	289	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
50	295	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
50	295	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
50	295	16	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
50	295	16	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
50	295	16	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
51	301	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
51	301	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
52	303	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
52	303	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
53	314	12	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
53	314	12	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
54	316	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
54	316	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
54	316	19	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
54	316	19	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
54	316	19	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
55	363	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
55	363	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
55	363	8	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
56	367	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
56	367	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	states[$] == FREE
35227	372	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
35227	372	8	OpenIntToDoubleHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
57	375	12	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
57	375	12	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
57	375	12	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
58	420	8	OpenIntToDoubleHashMap.java	put	index	int	0	DEF	$ < 0
59	428	8	OpenIntToDoubleHashMap.java	put	newMapping	boolean	0	DEF	$
60	430	12	OpenIntToDoubleHashMap.java	put	THIS	OpenIntToDoubleHashMap	0	DEF	$.shouldGrowTable()
35228	454	8	OpenIntToDoubleHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
35228	454	8	OpenIntToDoubleHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
61	455	12	OpenIntToDoubleHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
61	455	12	OpenIntToDoubleHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
175	172	8	OpenIntToFieldHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
176	177	8	OpenIntToFieldHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
176	177	8	OpenIntToFieldHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
177	201	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
177	201	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
177	201	8	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
178	205	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
178	205	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	states[$] == FREE
35259	210	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
35259	210	8	OpenIntToFieldHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
179	213	12	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
179	213	12	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
179	213	12	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
180	231	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
180	231	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
180	231	8	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
181	235	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
181	235	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
35260	240	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
35260	240	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
182	243	12	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
182	243	12	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
182	243	12	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
183	293	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
183	293	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
184	295	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
184	295	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
184	295	15	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
184	295	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
184	295	15	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
185	301	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
185	301	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
186	307	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
186	307	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
186	307	16	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
186	307	16	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
186	307	16	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
187	313	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
187	313	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
188	315	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
188	315	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
189	326	12	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
189	326	12	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
190	328	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
190	328	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
190	328	19	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
190	328	19	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
190	328	19	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
191	375	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
191	375	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
191	375	8	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
192	379	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
192	379	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	states[$] == FREE
35261	384	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
35261	384	8	OpenIntToFieldHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
193	387	12	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
193	387	12	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
193	387	12	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
194	432	8	OpenIntToFieldHashMap.java	put	index	int	0	DEF	$ < 0
195	440	8	OpenIntToFieldHashMap.java	put	newMapping	boolean	0	DEF	$
196	442	12	OpenIntToFieldHashMap.java	put	THIS	OpenIntToFieldHashMap	0	DEF	$.shouldGrowTable()
35262	466	8	OpenIntToFieldHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
35262	466	8	OpenIntToFieldHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
197	467	12	OpenIntToFieldHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
197	467	12	OpenIntToFieldHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
36099	109	8	OpenMapRealMatrix.java	add	iterator	Iterator	0	NIL-FOR	$.hasNext()
36100	144	8	OpenMapRealMatrix.java	subtract	iterator	Iterator	0	NIL-FOR	$.hasNext()
36101	168	12	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
36102	174	16	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
36102	174	16	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
36103	199	8	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
36104	205	12	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
36104	205	12	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
906	207	16	OpenMapRealMatrix.java	multiply	THIS	OpenMapRealMatrix	0	DEF	m.$.entries.containsKey(rightKey)
906	207	16	OpenMapRealMatrix.java	multiply	rightKey	int	0	DEF	m.entries.containsKey($)
906	207	16	OpenMapRealMatrix.java	multiply	m	OpenMapRealMatrix	0	DEF	$.entries.containsKey(rightKey)
907	211	20	OpenMapRealMatrix.java	multiply	outValue	double	1	DEF	$ == 0.0
908	244	8	OpenMapRealMatrix.java	setEntry	value	double	1	DEF	$ == 0.0
909	259	8	OpenMapRealMatrix.java	addToEntry	value	double	1	DEF	$ == 0.0
910	274	8	OpenMapRealMatrix.java	multiplyEntry	value	double	1	DEF	$ == 0.0
36003	130	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
36003	130	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
36003	130	8	OpenMapRealVector.java	OpenMapRealVector	values	double[]	0	NIL-FOR	key < $.length
836	132	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
836	132	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
36004	157	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
36004	157	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
36004	157	8	OpenMapRealVector.java	OpenMapRealVector	values	Double[]	0	NIL-FOR	key < $.length
837	159	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
837	159	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
36005	183	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < $.virtualSize
36005	183	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < virtualSize
838	185	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
838	185	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
839	212	8	OpenMapRealVector.java	add	v	RealVector	1	RET	$ instanceof OpenMapRealVector
36006	231	8	OpenMapRealVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
840	234	12	OpenMapRealVector.java	add	key	int	1	DEF	randomAccess.containsKey($)
840	234	12	OpenMapRealVector.java	add	randomAccess	OpenIntToDoubleHashMap	1	DEF	$.containsKey(key)
36007	251	8	OpenMapRealVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
841	260	8	OpenMapRealVector.java	append	v	RealVector	0	RET	$ instanceof OpenMapRealVector
36008	276	8	OpenMapRealVector.java	append	THIS	OpenMapRealVector	0	NIL-FOR	i < a.$.length
36008	276	8	OpenMapRealVector.java	append	i	int	0	NIL-FOR	$ < a.length
36008	276	8	OpenMapRealVector.java	append	a	double[]	0	NIL-FOR	i < $.length
36009	301	8	OpenMapRealVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
842	311	8	OpenMapRealVector.java	dotProduct	v	RealVector	1	RET	$ instanceof OpenMapRealVector
36010	323	8	OpenMapRealVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
36011	336	8	OpenMapRealVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
36012	348	8	OpenMapRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
36013	361	8	OpenMapRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
36014	375	8	OpenMapRealVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
843	378	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ >= index
843	378	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ < end
843	378	12	OpenMapRealVector.java	getSubVector	end	int	0	DEF	key < $
843	378	12	OpenMapRealVector.java	getSubVector	index	int	0	DEF	key >= $
36015	390	8	OpenMapRealVector.java	getData	iter	Iterator	0	NIL-WHILE	$.hasNext()
36016	411	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
36017	419	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
844	422	12	OpenMapRealVector.java	getDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
844	422	12	OpenMapRealVector.java	getDistance	key	int	0	DEF	entries.containsKey($)
845	434	8	OpenMapRealVector.java	getDistance	v	RealVector	0	RET	$ instanceof OpenMapRealVector
36018	445	8	OpenMapRealVector.java	getDistance	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
36018	445	8	OpenMapRealVector.java	getDistance	i	int	0	NIL-FOR	$ < v.length
36018	445	8	OpenMapRealVector.java	getDistance	v	double[]	0	NIL-FOR	i < $.length
36019	469	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
36020	475	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
846	478	12	OpenMapRealVector.java	getL1Distance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
846	478	12	OpenMapRealVector.java	getL1Distance	key	int	0	DEF	entries.containsKey($)
847	490	8	OpenMapRealVector.java	getL1Distance	v	RealVector	0	RET	$ instanceof OpenMapRealVector
36021	501	8	OpenMapRealVector.java	getL1Distance	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
36021	501	8	OpenMapRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < v.length
36021	501	8	OpenMapRealVector.java	getL1Distance	v	double[]	0	NIL-FOR	i < $.length
36022	516	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
848	519	12	OpenMapRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
848	519	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
36023	524	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
849	527	12	OpenMapRealVector.java	getLInfDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
849	527	12	OpenMapRealVector.java	getLInfDistance	key	int	0	DEF	entries.containsKey($)
850	528	16	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	iter.value() > $
850	528	16	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	DEF	$.value() > max
851	540	8	OpenMapRealVector.java	getLInfDistance	v	RealVector	0	RET	$ instanceof OpenMapRealVector
36024	551	8	OpenMapRealVector.java	getLInfDistance	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
36024	551	8	OpenMapRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < v.length
36024	551	8	OpenMapRealVector.java	getLInfDistance	v	double[]	0	NIL-FOR	i < $.length
852	553	12	OpenMapRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
852	553	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
36025	564	8	OpenMapRealVector.java	isInfinite	iter	Iterator	0	NIL-WHILE	$.hasNext()
853	567	12	OpenMapRealVector.java	isInfinite	value	double	0	RET	Double.isNaN($)
854	570	12	OpenMapRealVector.java	isInfinite	value	double	0	DEF	Double.isInfinite($)
36026	580	8	OpenMapRealVector.java	isNaN	iter	Iterator	0	NIL-WHILE	$.hasNext()
855	582	12	OpenMapRealVector.java	isNaN	iter	Iterator	0	RET	Double.isNaN($.value())
36027	598	8	OpenMapRealVector.java	mapAddToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
36027	598	8	OpenMapRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
36028	610	8	OpenMapRealVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
36029	614	12	OpenMapRealVector.java	outerProduct	THIS	OpenMapRealVector	0	NIL-FOR	col < $.virtualSize
36029	614	12	OpenMapRealVector.java	outerProduct	col	int	0	NIL-FOR	$ < virtualSize
856	637	8	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	1	DEF	$.isDefaultValue(value)
856	637	8	OpenMapRealVector.java	setEntry	value	double	1	DEF	isDefaultValue($)
857	639	15	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(index)
857	639	15	OpenMapRealVector.java	setEntry	index	int	0	DEF	entries.containsKey($)
36030	657	8	OpenMapRealVector.java	setSubVector	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
36030	657	8	OpenMapRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.length
36030	657	8	OpenMapRealVector.java	setSubVector	v	double[]	0	NIL-FOR	i < $.length
36031	665	8	OpenMapRealVector.java	set	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
36031	665	8	OpenMapRealVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
36032	680	8	OpenMapRealVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
858	683	12	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(key)
858	683	12	OpenMapRealVector.java	subtract	key	int	1	DEF	entries.containsKey($)
859	696	8	OpenMapRealVector.java	subtract	v	RealVector	0	RET	$ instanceof OpenMapRealVector
36033	707	8	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	0	NIL-FOR	i < v.$.length
36033	707	8	OpenMapRealVector.java	subtract	i	int	0	NIL-FOR	$ < v.length
36033	707	8	OpenMapRealVector.java	subtract	v	double[]	0	NIL-FOR	i < $.length
860	708	12	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(i)
860	708	12	OpenMapRealVector.java	subtract	i	int	1	DEF	entries.containsKey($)
861	730	8	OpenMapRealVector.java	unitize	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(norm)
861	730	8	OpenMapRealVector.java	unitize	norm	double	0	DEF	isDefaultValue($)
36034	734	8	OpenMapRealVector.java	unitize	iter	Iterator	0	NIL-WHILE	$.hasNext()
36035	762	8	OpenMapRealVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
862	778	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$ == obj
862	778	8	OpenMapRealVector.java	equals	obj	Object	0	RET	this == $
863	781	8	OpenMapRealVector.java	equals	obj	Object	0	RET	$ == null
864	784	8	OpenMapRealVector.java	equals	obj	Object	0	RET	$ instanceof OpenMapRealVector
865	788	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$.virtualSize != other.$.virtualSize
865	788	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	virtualSize != $.virtualSize
866	791	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits($.epsilon) != Double.doubleToLongBits(other.$.epsilon)
866	791	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	Double.doubleToLongBits(epsilon) != Double.doubleToLongBits($.epsilon)
36036	796	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
867	799	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(iter.value())
867	799	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.value())
36037	804	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
868	807	12	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.getEntry(iter.key()))
868	807	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(getEntry(iter.key()))
868	807	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry($.key()))
508	78	8	PascalDistributionImpl.java	setNumberOfSuccesses	successes	int	0	DEF	$ < 0
509	93	8	PascalDistributionImpl.java	setProbabilityOfSuccess	p	double	0	DEF	$ < 0.0
509	93	8	PascalDistributionImpl.java	setProbabilityOfSuccess	p	double	0	DEF	$ > 1.0
510	135	8	PascalDistributionImpl.java	cumulativeProbability	x	int	1	DEF	$ < 0
511	151	8	PascalDistributionImpl.java	probability	x	int	1	DEF	$ < 0
512	180	8	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
513	182	15	PascalDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
1240	93	8	PearsonsCorrelation.java	PearsonsCorrelation	covarianceMatrix	RealMatrix	0	DEF	$ == null
36293	138	8	PearsonsCorrelation.java	getCorrelationStandardErrors	i	int	0	NIL-FOR	$ < nVars
36293	138	8	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	i < $
36294	139	12	PearsonsCorrelation.java	getCorrelationStandardErrors	j	int	0	NIL-FOR	$ < nVars
36294	139	12	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	j < $
36295	164	8	PearsonsCorrelation.java	getCorrelationPValues	i	int	0	NIL-FOR	$ < nVars
36295	164	8	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	i < $
36296	165	12	PearsonsCorrelation.java	getCorrelationPValues	j	int	0	NIL-FOR	$ < nVars
36296	165	12	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	j < $
1241	166	16	PearsonsCorrelation.java	getCorrelationPValues	j	int	1	DEF	i == $
1241	166	16	PearsonsCorrelation.java	getCorrelationPValues	i	int	1	DEF	$ == j
36297	189	8	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	$ < nVars
36297	189	8	PearsonsCorrelation.java	computeCorrelationMatrix	nVars	int	0	NIL-FOR	i < $
36298	190	12	PearsonsCorrelation.java	computeCorrelationMatrix	j	int	0	NIL-FOR	$ < i
36298	190	12	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	j < $
1242	226	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	RET	xArray.$.length > 1
1242	226	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	RET	xArray.$.length == yArray.$.length
1242	226	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	RET	$.length > 1
1242	226	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	RET	$.length == yArray.length
1242	226	8	PearsonsCorrelation.java	correlation	yArray	double[]	1	RET	xArray.length == $.length
36299	227	12	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	0	NIL-FOR	i<xArray.$.length
36299	227	12	PearsonsCorrelation.java	correlation	i	int	0	NIL-FOR	$<xArray.length
36299	227	12	PearsonsCorrelation.java	correlation	xArray	double[]	0	NIL-FOR	i<$.length
36300	253	8	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	$ < nVars
36300	253	8	PearsonsCorrelation.java	covarianceToCorrelation	nVars	int	0	NIL-FOR	i < $
36301	256	12	PearsonsCorrelation.java	covarianceToCorrelation	j	int	0	NIL-FOR	$ < i
36301	256	12	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	j < $
1243	275	8	PearsonsCorrelation.java	checkSufficientData	nRows	int	0	DEF	$ < 2
1243	275	8	PearsonsCorrelation.java	checkSufficientData	nCols	int	0	DEF	$ < 2
1180	200	8	Percentile.java	evaluate	p	double	0	DEF	$ > 100
1180	200	8	Percentile.java	evaluate	p	double	0	DEF	$ <= 0
1181	204	8	Percentile.java	evaluate	length	int	0	RET	$ == 0
1182	207	8	Percentile.java	evaluate	length	int	0	RET	$ == 1
1183	219	8	Percentile.java	evaluate	pos	double	0	RET	$ < 1
1184	222	8	Percentile.java	evaluate	n	double	0	RET	pos >= $
1184	222	8	Percentile.java	evaluate	pos	double	0	RET	$ >= n
1185	249	8	Percentile.java	setQuantile	p	double	0	DEF	$ <= 0
1185	249	8	Percentile.java	setQuantile	p	double	0	DEF	$ > 100
427	88	8	PoissonDistributionImpl.java	setMean	p	double	0	DEF	$ <= 0
428	106	8	PoissonDistributionImpl.java	probability	x	int	1	DEF	$ == Integer.MAX_VALUE
428	106	8	PoissonDistributionImpl.java	probability	x	int	1	DEF	$ < 0
429	108	15	PoissonDistributionImpl.java	probability	x	int	1	DEF	$ == 0
430	129	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ < 0
431	132	8	PoissonDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ == Integer.MAX_VALUE
1779	68	8	PolynomialFunction.java	PolynomialFunction	THIS	PolynomialFunction	0	DEF	c.$.length < 1
1779	68	8	PolynomialFunction.java	PolynomialFunction	c	double	0	DEF	$.length < 1
36649	72	8	PolynomialFunction.java	PolynomialFunction	l	int	0	NIL-WHILE	$ > 1
36649	72	8	PolynomialFunction.java	PolynomialFunction	l	int	0	NIL-WHILE	c[$ - 1] == 0
36649	72	8	PolynomialFunction.java	PolynomialFunction	c	double	0	NIL-WHILE	$[l - 1] == 0
1780	128	8	PolynomialFunction.java	evaluate	n	int	0	DEF	$ < 1
36650	132	8	PolynomialFunction.java	evaluate	j	int	0	NIL-FOR	$ >=0
36651	151	8	PolynomialFunction.java	add	i	int	0	NIL-FOR	$ < lowLength
36651	151	8	PolynomialFunction.java	add	lowLength	int	0	NIL-FOR	i < $
36652	177	8	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < lowLength
36652	177	8	PolynomialFunction.java	subtract	lowLength	int	0	NIL-FOR	i < $
1781	180	8	PolynomialFunction.java	subtract	THIS	PolynomialFunction	1	DEF	$.coefficients.$.length < p.$.coefficients.$.length
1781	180	8	PolynomialFunction.java	subtract	p	PolynomialFunction	1	DEF	coefficients.length < $.coefficients.length
36653	181	12	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < highLength
36653	181	12	PolynomialFunction.java	subtract	highLength	int	0	NIL-FOR	i < $
36654	199	8	PolynomialFunction.java	negate	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
36654	199	8	PolynomialFunction.java	negate	i	int	0	NIL-FOR	$ < coefficients.length
36655	214	8	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	i < newCoefficients.$.length
36655	214	8	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	$ < newCoefficients.length
36655	214	8	PolynomialFunction.java	multiply	newCoefficients	double[]	0	NIL-FOR	i < $.length
36656	216	12	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	j < Math.min($.coefficients.$.length, i + 1)
36656	216	12	PolynomialFunction.java	multiply	j	int	0	NIL-FOR	$ < Math.min(coefficients.length, i + 1)
36656	216	12	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	j < Math.min(coefficients.length, $ + 1)
1782	237	8	PolynomialFunction.java	differentiate	n	int	0	DEF	$ < 1
1783	240	8	PolynomialFunction.java	differentiate	n	int	0	RET	$ == 1
36657	244	8	PolynomialFunction.java	differentiate	i	int	0	NIL-FOR	$ > 0
1784	287	7	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	RET	$.coefficients[0] == 0.0
1785	288	9	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	RET	$.coefficients.$.length == 1
36658	295	7	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
36658	295	7	PolynomialFunction.java	toString	i	int	0	NIL-FOR	$ < coefficients.length
1786	297	9	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] != 0
1786	297	9	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] != 0
1787	299	11	PolynomialFunction.java	toString	s	StringBuffer	1	DEF	$.length() > 0
1788	300	13	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	DEF	$.coefficients[i] < 0
1788	300	13	PolynomialFunction.java	toString	i	int	1	DEF	coefficients[$] < 0
1789	306	13	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] < 0
1789	306	13	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] < 0
1790	312	11	PolynomialFunction.java	toString	absAi	double	0	DEF	($ - 1) != 0
1791	318	11	PolynomialFunction.java	toString	i	int	0	DEF	$ > 1
1792	342	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	$ == obj
1792	342	8	PolynomialFunction.java	equals	obj	Object	0	RET	this == $
1793	344	8	PolynomialFunction.java	equals	obj	Object	0	RET	$ == null
1794	346	8	PolynomialFunction.java	equals	obj	Object	0	RET	$ instanceof PolynomialFunction
1795	349	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	Arrays.equals($.coefficients, other.$.coefficients)
1795	349	8	PolynomialFunction.java	equals	other	PolynomialFunction	0	RET	Arrays.equals(coefficients, $.coefficients)
1770	143	8	PolynomialFunctionLagrangeForm.java	getCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.coefficientsComputed
36639	176	8	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	$ < n
36639	176	8	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	i < $
1771	182	12	PolynomialFunctionLagrangeForm.java	evaluate	dist	double	0	DEF	$ < min_dist
1771	182	12	PolynomialFunctionLagrangeForm.java	evaluate	min_dist	double	0	DEF	dist < $
36640	191	8	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	$ < n
36640	191	8	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	i < $
36641	192	12	PolynomialFunctionLagrangeForm.java	evaluate	j	int	0	NIL-FOR	$ < n-i
36641	192	12	PolynomialFunctionLagrangeForm.java	evaluate	i	int	0	NIL-FOR	j < n-$
36641	192	12	PolynomialFunctionLagrangeForm.java	evaluate	n	int	0	NIL-FOR	j < $-i
1772	196	16	PolynomialFunctionLagrangeForm.java	evaluate	divider	double	0	DuplicateSampleAbscissaException	$ == 0.0
1773	206	12	PolynomialFunctionLagrangeForm.java	evaluate	i	int	1	DEF	nearest < 0.5*(n-$+1)
1773	206	12	PolynomialFunctionLagrangeForm.java	evaluate	nearest	int	1	DEF	$ < 0.5*(n-i+1)
1773	206	12	PolynomialFunctionLagrangeForm.java	evaluate	n	int	1	DEF	nearest < 0.5*($-i+1)
36642	230	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
36642	230	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
36643	237	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
36643	237	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
36644	238	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
36645	246	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
36645	246	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
36646	249	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ < n
36646	249	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	j < $
1774	250	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	DEF	i != $
1774	250	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != j
1775	254	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	d	double	0	DEF	$ == 0.0
36647	256	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	NIL-FOR	$ < n
36647	256	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	k < $
1776	257	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.x[i] == $.x[k]
1776	257	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	DEF	i != $
1776	257	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	k	int	0	DEF	x[i] == x[$]
1776	257	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != k
1776	257	20	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	x[$] == x[k]
36648	269	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ >= 0
1777	298	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	DEF	x.$.length != y.$.length
1777	298	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	DEF	$.length != y.length
1777	298	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	DEF	x.length != $.length
1778	303	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	DEF	x.$.length < 2
1778	303	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	DEF	$.length < 2
1797	138	8	PolynomialFunctionNewtonForm.java	getCoefficients	THIS	PolynomialFunctionNewtonForm	0	DEF	$.coefficientsComputed
36662	165	8	PolynomialFunctionNewtonForm.java	evaluate	i	int	0	NIL-FOR	$ >= 0
36663	180	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ <= n
36663	180	8	PolynomialFunctionNewtonForm.java	computeCoefficients	n	int	0	NIL-FOR	i <= $
36664	185	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ >= 0
36665	186	12	PolynomialFunctionNewtonForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
1798	210	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DEF	a.$.length < 1
1798	210	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DEF	c.$.length < 1
1798	210	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	DEF	$.length < 1
1798	210	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	DEF	$.length < 1
1799	214	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DEF	a.$.length != c.$.length + 1
1799	214	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	DEF	$.length != c.length + 1
1799	214	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	DEF	a.length != $.length + 1
1763	98	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DEF	knots.$.length < 2
1763	98	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DEF	$.length < 2
1764	103	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DEF	knots.$.length - 1 != polynomials.$.length
1764	103	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DEF	$.length - 1 != polynomials.length
1764	103	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	DEF	knots.length - 1 != $.length
1765	108	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DEF	$.isStrictlyIncreasing(knots)
1765	108	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DEF	isStrictlyIncreasing($)
1766	136	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	ArgumentOutsideDomainException	v < $.knots[0]
1766	136	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	ArgumentOutsideDomainException	v > $.knots[$.n]
1766	136	8	PolynomialSplineFunction.java	value	v	double	0	ArgumentOutsideDomainException	$ < knots[0]
1766	136	8	PolynomialSplineFunction.java	value	v	double	0	ArgumentOutsideDomainException	$ > knots[n]
1767	140	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
1768	146	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
1768	146	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
36637	167	8	PolynomialSplineFunction.java	polynomialSplineDerivative	THIS	PolynomialSplineFunction	0	NIL-FOR	i < $.n
36637	167	8	PolynomialSplineFunction.java	polynomialSplineDerivative	i	int	0	NIL-FOR	$ < n
36638	220	8	PolynomialSplineFunction.java	isStrictlyIncreasing	THIS	PolynomialSplineFunction	0	NIL-FOR	i < x.$.length
36638	220	8	PolynomialSplineFunction.java	isStrictlyIncreasing	i	int	0	NIL-FOR	$ < x.length
36638	220	8	PolynomialSplineFunction.java	isStrictlyIncreasing	x	double[]	0	NIL-FOR	i < $.length
1769	221	12	PolynomialSplineFunction.java	isStrictlyIncreasing	i	int	0	RET	x[$ - 1] >= x[$]
1769	221	12	PolynomialSplineFunction.java	isStrictlyIncreasing	x	double[]	0	RET	$[i - 1] >= $[i]
1796	198	12	PolynomialsUtils.java	buildPolynomial	maxDegree	int	0	DEF	degree > $
1796	198	12	PolynomialsUtils.java	buildPolynomial	degree	int	0	DEF	$ > maxDegree
36659	214	8	PolynomialsUtils.java	buildPolynomial	i	int	0	NIL-FOR	$ <= degree
36659	214	8	PolynomialsUtils.java	buildPolynomial	degree	int	0	NIL-FOR	i <= $
36660	234	8	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	$ < degree
36660	234	8	PolynomialsUtils.java	computeUpToDegree	degree	int	0	NIL-FOR	k < $
36661	250	12	PolynomialsUtils.java	computeUpToDegree	i	int	0	NIL-FOR	$ < k
36661	250	12	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	i < $
1082	73	8	Product.java	increment	THIS	Product	1	DEF	$.n == 0
1083	122	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, begin, length)
1083	122	8	Product.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1083	122	8	Product.java	evaluate	begin	int	0	DEF	test(values, $, length)
1083	122	8	Product.java	evaluate	length	int	0	DEF	test(values, begin, $)
36249	124	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
36249	124	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
36249	124	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1084	162	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, weights, begin, length)
1084	162	8	Product.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length)
1084	162	8	Product.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length)
1084	162	8	Product.java	evaluate	begin	int	0	DEF	test(values, weights, $, length)
1084	162	8	Product.java	evaluate	length	int	0	DEF	test(values, weights, begin, $)
36250	164	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
36250	164	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
36250	164	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
364	99	8	ProperBigFractionFormat.java	format	whole	BigInteger	0	DEF	BigInteger.ZERO.equals($)
365	102	12	ProperBigFractionFormat.java	format	num	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
366	137	8	ProperBigFractionFormat.java	parse	ret	BigFraction	0	RET	$ != null
367	148	8	ProperBigFractionFormat.java	parse	whole	BigInteger	0	RET	$ == null
368	161	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
369	169	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
370	200	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
371	208	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
372	215	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
373	219	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
374	234	8	ProperBigFractionFormat.java	setWholeFormat	format	NumberFormat	0	DEF	$ == null
347	100	8	ProperFractionFormat.java	format	whole	int	0	DEF	$ != 0
348	137	8	ProperFractionFormat.java	parse	ret	Fraction	0	RET	$ != null
349	148	8	ProperFractionFormat.java	parse	whole	Number	0	RET	$ == null
350	161	8	ProperFractionFormat.java	parse	num	Number	0	RET	$ == null
351	169	8	ProperFractionFormat.java	parse	num	Number	0	RET	$.intValue() < 0
352	200	8	ProperFractionFormat.java	parse	den	Number	0	RET	$ == null
353	208	8	ProperFractionFormat.java	parse	den	Number	0	RET	$.intValue() < 0
354	227	8	ProperFractionFormat.java	setWholeFormat	format	NumberFormat	0	DEF	$ == null
35844	86	8	QRDecompositionImpl.java	QRDecompositionImpl	minor	int	0	NIL-FOR	$ < Math.min(m, n)
35844	86	8	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	minor < Math.min($, n)
35844	86	8	QRDecompositionImpl.java	QRDecompositionImpl	n	int	0	NIL-FOR	minor < Math.min(m, $)
35845	98	12	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
35845	98	12	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
798	105	12	QRDecompositionImpl.java	QRDecompositionImpl	a	double	0	DEF	$ != 0.0
35846	129	16	QRDecompositionImpl.java	QRDecompositionImpl	col	int	0	NIL-FOR	$ < n
35846	129	16	QRDecompositionImpl.java	QRDecompositionImpl	n	int	0	NIL-FOR	col < $
35847	132	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
35847	132	20	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
35848	138	20	QRDecompositionImpl.java	QRDecompositionImpl	row	int	0	NIL-FOR	$ < m
35848	138	20	QRDecompositionImpl.java	QRDecompositionImpl	m	int	0	NIL-FOR	row < $
799	149	8	QRDecompositionImpl.java	getR	THIS	QRDecompositionImpl	0	DEF	$.cachedR == null
35849	157	12	QRDecompositionImpl.java	getR	row	int	0	NIL-FOR	$ >= 0
35850	159	16	QRDecompositionImpl.java	getR	col	int	0	NIL-FOR	$ < n
35850	159	16	QRDecompositionImpl.java	getR	n	int	0	NIL-FOR	col < $
800	173	8	QRDecompositionImpl.java	getQ	THIS	QRDecompositionImpl	0	DEF	$.cachedQ == null
801	182	8	QRDecompositionImpl.java	getQT	THIS	QRDecompositionImpl	0	DEF	$.cachedQT == null
35851	194	12	QRDecompositionImpl.java	getQT	minor	int	0	NIL-FOR	$ >= Math.min(m, n)
35851	194	12	QRDecompositionImpl.java	getQT	n	int	0	NIL-FOR	minor >= Math.min(m, $)
35851	194	12	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	minor >= Math.min($, n)
35852	198	12	QRDecompositionImpl.java	getQT	minor	int	0	NIL-FOR	$ >= 0
802	201	16	QRDecompositionImpl.java	getQT	qrtMinor	double[]	0	DEF	$[minor] != 0.0
802	201	16	QRDecompositionImpl.java	getQT	minor	int	0	DEF	qrtMinor[$] != 0.0
35853	202	20	QRDecompositionImpl.java	getQT	col	int	0	NIL-FOR	$ < m
35853	202	20	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	col < $
35854	204	24	QRDecompositionImpl.java	getQT	row	int	0	NIL-FOR	$ < m
35854	204	24	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	row < $
35855	209	24	QRDecompositionImpl.java	getQT	row	int	0	NIL-FOR	$ < m
35855	209	24	QRDecompositionImpl.java	getQT	m	int	0	NIL-FOR	row < $
803	226	8	QRDecompositionImpl.java	getH	THIS	QRDecompositionImpl	0	DEF	$.cachedH == null
35856	231	12	QRDecompositionImpl.java	getH	i	int	0	NIL-FOR	$ < m
35856	231	12	QRDecompositionImpl.java	getH	m	int	0	NIL-FOR	i < $
35857	232	16	QRDecompositionImpl.java	getH	j	int	0	NIL-FOR	$ < Math.min(i + 1, n)
35857	232	16	QRDecompositionImpl.java	getH	i	int	0	NIL-FOR	j < Math.min($ + 1, n)
35857	232	16	QRDecompositionImpl.java	getH	n	int	0	NIL-FOR	j < Math.min(i + 1, $)
1315	178	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
1316	185	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
1317	193	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
1318	135	8	RandomDataImpl.java	nextHexString	len	int	0	DEF	$ <= 0
36351	151	8	RandomDataImpl.java	nextHexString	THIS	RandomDataImpl	0	NIL-FOR	i < randomBytes.$.length
36351	151	8	RandomDataImpl.java	nextHexString	i	int	0	NIL-FOR	$ < randomBytes.length
36351	151	8	RandomDataImpl.java	nextHexString	randomBytes	byte[]	0	NIL-FOR	i < $.length
1319	162	12	RandomDataImpl.java	nextHexString	hex	String	0	DEF	$.length() == 1
1320	181	8	RandomDataImpl.java	nextInt	lower	int	0	DEF	$ >= upper
1320	181	8	RandomDataImpl.java	nextInt	upper	int	0	DEF	lower >= $
1321	201	8	RandomDataImpl.java	nextLong	lower	long	0	DEF	$ >= upper
1321	201	8	RandomDataImpl.java	nextLong	upper	long	0	DEF	lower >= $
1322	231	8	RandomDataImpl.java	nextSecureHexString	len	int	0	DEF	$ <= 0
36352	251	8	RandomDataImpl.java	nextSecureHexString	iter	int	0	NIL-FOR	$ < numIter + 1
36352	251	8	RandomDataImpl.java	nextSecureHexString	numIter	int	0	NIL-FOR	iter < $ + 1
36353	260	12	RandomDataImpl.java	nextSecureHexString	THIS	RandomDataImpl	0	NIL-FOR	i < hash.$.length
36353	260	12	RandomDataImpl.java	nextSecureHexString	i	int	0	NIL-FOR	$ < hash.length
36353	260	12	RandomDataImpl.java	nextSecureHexString	hash	byte[]	0	NIL-FOR	i < $.length
1323	271	16	RandomDataImpl.java	nextSecureHexString	hex	String	0	DEF	$.length() == 1
1324	292	8	RandomDataImpl.java	nextSecureInt	lower	int	0	DEF	$ >= upper
1324	292	8	RandomDataImpl.java	nextSecureInt	upper	int	0	DEF	lower >= $
1325	313	8	RandomDataImpl.java	nextSecureLong	lower	long	0	DEF	$ >= upper
1325	313	8	RandomDataImpl.java	nextSecureLong	upper	long	0	DEF	lower >= $
1326	339	8	RandomDataImpl.java	nextPoisson	mean	double	0	DEF	$ <= 0
1327	347	8	RandomDataImpl.java	nextPoisson	pivot	double	1	RET	mean < $
1327	347	8	RandomDataImpl.java	nextPoisson	mean	double	1	RET	$ < pivot
36354	353	12	RandomDataImpl.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * mean
36354	353	12	RandomDataImpl.java	nextPoisson	mean	double	0	NIL-WHILE	n < 1000 * $
1328	356	16	RandomDataImpl.java	nextPoisson	p	double	1	DEF	r >= $
1328	356	16	RandomDataImpl.java	nextPoisson	r	double	1	DEF	$ >= p
1329	388	16	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ <= p1
1329	388	16	RandomDataImpl.java	nextPoisson	p1	double	1	DEF	u <= $
1330	391	20	RandomDataImpl.java	nextPoisson	lambda	double	0	DEF	x < -$
1330	391	20	RandomDataImpl.java	nextPoisson	delta	double	0	DEF	x > $
1330	391	20	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ > delta
1330	391	20	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ < -lambda
1331	398	20	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ > p1 + p2
1331	398	20	RandomDataImpl.java	nextPoisson	p1	double	1	DEF	u > $ + p2
1331	398	20	RandomDataImpl.java	nextPoisson	p2	double	1	DEF	u > p1 + $
1332	409	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < -t
1332	409	16	RandomDataImpl.java	nextPoisson	a	int	0	DEF	$ == 0
1332	409	16	RandomDataImpl.java	nextPoisson	t	double	0	DEF	v < -$
1333	415	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < qa
1333	415	16	RandomDataImpl.java	nextPoisson	qa	double	0	DEF	v < $
1334	419	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ > qr
1334	419	16	RandomDataImpl.java	nextPoisson	qr	double	0	DEF	v > $
1335	422	16	RandomDataImpl.java	nextPoisson	lambda	double	0	DEF	v < y * logLambda - MathUtils.factorialLog((int) (y + $)) + logLambdaFactorial
1335	422	16	RandomDataImpl.java	nextPoisson	logLambda	double	0	DEF	v < y * $ - MathUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
1335	422	16	RandomDataImpl.java	nextPoisson	logLambdaFactorial	double	0	DEF	v < y * logLambda - MathUtils.factorialLog((int) (y + lambda)) + $
1335	422	16	RandomDataImpl.java	nextPoisson	y	double	0	DEF	v < $ * logLambda - MathUtils.factorialLog((int) ($ + lambda)) + logLambdaFactorial
1335	422	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < y * logLambda - MathUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
1336	443	8	RandomDataImpl.java	nextGaussian	sigma	double	0	DEF	$ <= 0
1337	464	8	RandomDataImpl.java	nextExponential	mean	double	0	DEF	$ <= 0.0
36355	470	8	RandomDataImpl.java	nextExponential	unif	double	0	NIL-WHILE	$ == 0.0d
1338	493	8	RandomDataImpl.java	nextUniform	lower	double	0	DEF	$ >= upper
1338	493	8	RandomDataImpl.java	nextUniform	upper	double	0	DEF	lower >= $
36356	502	8	RandomDataImpl.java	nextUniform	u	double	0	NIL-WHILE	$ <= 0.0
1339	519	8	RandomDataImpl.java	getRan	THIS	RandomDataImpl	0	DEF	$.rand == null
1340	535	8	RandomDataImpl.java	getSecRan	THIS	RandomDataImpl	0	DEF	$.secRand == null
1341	552	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
1342	566	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
1343	582	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
1344	593	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
1345	653	8	RandomDataImpl.java	nextPermutation	n	int	0	DEF	k > $
1345	653	8	RandomDataImpl.java	nextPermutation	k	int	0	DEF	$ > n
1346	657	8	RandomDataImpl.java	nextPermutation	k	int	0	DEF	$ == 0
36357	665	8	RandomDataImpl.java	nextPermutation	i	int	0	NIL-FOR	$ < k
36357	665	8	RandomDataImpl.java	nextPermutation	k	int	0	NIL-FOR	i < $
1347	690	8	RandomDataImpl.java	nextSample	len	int	0	DEF	k > $
1347	690	8	RandomDataImpl.java	nextSample	k	int	0	DEF	$ > len
1348	694	8	RandomDataImpl.java	nextSample	k	int	0	DEF	$ <= 0
36358	702	8	RandomDataImpl.java	nextSample	i	int	0	NIL-FOR	$ < k
36358	702	8	RandomDataImpl.java	nextSample	k	int	0	NIL-FOR	i < $
36359	721	8	RandomDataImpl.java	shuffle	i	int	0	NIL-FOR	$ >= end
36359	721	8	RandomDataImpl.java	shuffle	end	int	0	NIL-FOR	i >= $
1349	722	12	RandomDataImpl.java	shuffle	i	int	1	DEF	$ == 0
36360	742	8	RandomDataImpl.java	getNatural	i	int	0	NIL-FOR	$ < n
36360	742	8	RandomDataImpl.java	getNatural	n	int	0	NIL-FOR	i < $
1386	122	8	RandomKey.java	decodeGeneric	l	int	0	IllegalArgumentException	representation.size() != $
1386	122	8	RandomKey.java	decodeGeneric	representation	List<Double>	0	IllegalArgumentException	$.size() != l
1387	125	8	RandomKey.java	decodeGeneric	representation	List<Double>	0	IllegalArgumentException	$.size() != sortedRepr.size()
1387	125	8	RandomKey.java	decodeGeneric	sortedRepr	List<Double>	0	IllegalArgumentException	representation.size() != $.size()
36377	133	8	RandomKey.java	decodeGeneric	i	int	0	NIL-FOR	$<l
36377	133	8	RandomKey.java	decodeGeneric	l	int	0	NIL-FOR	i<$
1388	151	8	RandomKey.java	isSame	another	Chromosome	0	RET	$ instanceof RandomKey<?>
1389	155	8	RandomKey.java	isSame	THIS	RandomKey	0	RET	$.getLength() != anotherRk.getLength()
1389	155	8	RandomKey.java	isSame	anotherRk	RandomKey<?>	0	RET	getLength() != $.getLength()
36378	163	8	RandomKey.java	isSame	THIS	RandomKey	0	NIL-FOR	i<$.getLength()
36378	163	8	RandomKey.java	isSame	i	int	0	NIL-FOR	$<getLength()
1390	164	12	RandomKey.java	isSame	i	int	0	RET	thisPerm.get($) != anotherPerm.get($)
1390	164	12	RandomKey.java	isSame	thisPerm	List<Integer>	0	RET	$.get(i) != anotherPerm.get(i)
1390	164	12	RandomKey.java	isSame	anotherPerm	List<Integer>	0	RET	thisPerm.get(i) != $.get(i)
1391	177	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val > 1
1391	177	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val < 0
36379	194	8	RandomKey.java	randomPermutation	i	int	0	NIL-FOR	$<l
36379	194	8	RandomKey.java	randomPermutation	l	int	0	NIL-FOR	i<$
36380	210	8	RandomKey.java	identityPermutation	i	int	0	NIL-FOR	$<l
36380	210	8	RandomKey.java	identityPermutation	l	int	0	NIL-FOR	i<$
1392	250	8	RandomKey.java	inducedPermutation	originalData	List<S>	0	IllegalArgumentException	$.size() != permutedData.size()
1392	250	8	RandomKey.java	inducedPermutation	permutedData	List<S>	0	IllegalArgumentException	originalData.size() != $.size()
36381	258	8	RandomKey.java	inducedPermutation	i	int	0	NIL-FOR	$<l
36381	258	8	RandomKey.java	inducedPermutation	l	int	0	NIL-FOR	i<$
1393	260	12	RandomKey.java	inducedPermutation	index	int	0	IllegalArgumentException	$ == -1
36382	285	8	RandomKey.java	baseSequence	i	int	0	NIL-FOR	$<l
36382	285	8	RandomKey.java	baseSequence	l	int	0	NIL-FOR	i<$
1367	40	8	RandomKeyMutation.java	mutate	original	Chromosome	0	DEF	$ instanceof RandomKey<?>
743	117	8	RealMatrixImpl.java	RealMatrixImpl	copyArray	boolean	1	DEF	$
744	120	12	RealMatrixImpl.java	RealMatrixImpl	d	double[][]	0	NullPointerException	$ == null
745	124	12	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	DEF	$ == 0
746	128	12	RealMatrixImpl.java	RealMatrixImpl	nCols	int	0	DEF	$ == 0
35755	131	12	RealMatrixImpl.java	RealMatrixImpl	r	int	0	NIL-FOR	$ < nRows
35755	131	12	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	NIL-FOR	r < $
747	132	16	RealMatrixImpl.java	RealMatrixImpl	THIS	RealMatrixImpl	0	DEF	d[r].length != nCols
747	132	16	RealMatrixImpl.java	RealMatrixImpl	r	int	0	DEF	d[$].length != nCols
747	132	16	RealMatrixImpl.java	RealMatrixImpl	nCols	int	0	DEF	d[r].length != $
747	132	16	RealMatrixImpl.java	RealMatrixImpl	d	double[][]	0	DEF	$[r].length != nCols
35756	153	8	RealMatrixImpl.java	RealMatrixImpl	row	int	0	NIL-FOR	$ < nRows
35756	153	8	RealMatrixImpl.java	RealMatrixImpl	nRows	int	0	NIL-FOR	row < $
35757	198	8	RealMatrixImpl.java	add	row	int	0	NIL-FOR	$ < rowCount
35757	198	8	RealMatrixImpl.java	add	rowCount	int	0	NIL-FOR	row < $
35758	202	12	RealMatrixImpl.java	add	col	int	0	NIL-FOR	$ < columnCount
35758	202	12	RealMatrixImpl.java	add	columnCount	int	0	NIL-FOR	col < $
35759	238	8	RealMatrixImpl.java	subtract	row	int	0	NIL-FOR	$ < rowCount
35759	238	8	RealMatrixImpl.java	subtract	rowCount	int	0	NIL-FOR	row < $
35760	242	12	RealMatrixImpl.java	subtract	col	int	0	NIL-FOR	$ < columnCount
35760	242	12	RealMatrixImpl.java	subtract	columnCount	int	0	NIL-FOR	col < $
35761	279	8	RealMatrixImpl.java	multiply	row	int	0	NIL-FOR	$ < nRows
35761	279	8	RealMatrixImpl.java	multiply	nRows	int	0	NIL-FOR	row < $
35762	282	12	RealMatrixImpl.java	multiply	col	int	0	NIL-FOR	$ < nCols
35762	282	12	RealMatrixImpl.java	multiply	nCols	int	0	NIL-FOR	col < $
35763	284	16	RealMatrixImpl.java	multiply	i	int	0	NIL-FOR	$ < nSum
35763	284	16	RealMatrixImpl.java	multiply	nSum	int	0	NIL-FOR	i < $
748	316	8	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	1	DEF	$.data == null
749	317	12	RealMatrixImpl.java	setSubMatrix	row	int	0	DEF	$ > 0
750	322	12	RealMatrixImpl.java	setSubMatrix	column	int	0	DEF	$ > 0
751	328	12	RealMatrixImpl.java	setSubMatrix	nRows	int	0	DEF	$ == 0
752	333	12	RealMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	$ == 0
35764	337	12	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	NIL-FOR	i < $.data.$.length
35764	337	12	RealMatrixImpl.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
753	338	16	RealMatrixImpl.java	setSubMatrix	THIS	RealMatrixImpl	0	DEF	subMatrix[i].length != nCols
753	338	16	RealMatrixImpl.java	setSubMatrix	i	int	0	DEF	subMatrix[$].length != nCols
753	338	16	RealMatrixImpl.java	setSubMatrix	nCols	int	0	DEF	subMatrix[i].length != $
753	338	16	RealMatrixImpl.java	setSubMatrix	subMatrix	double[][]	0	DEF	$[i].length != nCols
754	421	8	RealMatrixImpl.java	operate	THIS	RealMatrixImpl	0	DEF	v.$.length != nCols
754	421	8	RealMatrixImpl.java	operate	nCols	int	0	DEF	v.length != $
754	421	8	RealMatrixImpl.java	operate	v	double[]	0	DEF	$.length != nCols
35765	427	8	RealMatrixImpl.java	operate	row	int	0	NIL-FOR	$ < nRows
35765	427	8	RealMatrixImpl.java	operate	nRows	int	0	NIL-FOR	row < $
35766	430	12	RealMatrixImpl.java	operate	i	int	0	NIL-FOR	$ < nCols
35766	430	12	RealMatrixImpl.java	operate	nCols	int	0	NIL-FOR	i < $
755	445	8	RealMatrixImpl.java	preMultiply	THIS	RealMatrixImpl	0	DEF	v.$.length != nRows
755	445	8	RealMatrixImpl.java	preMultiply	nRows	int	0	DEF	v.length != $
755	445	8	RealMatrixImpl.java	preMultiply	v	double[]	0	DEF	$.length != nRows
35767	452	8	RealMatrixImpl.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
35767	452	8	RealMatrixImpl.java	preMultiply	nCols	int	0	NIL-FOR	col < $
35768	454	12	RealMatrixImpl.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
35768	454	12	RealMatrixImpl.java	preMultiply	nRows	int	0	NIL-FOR	i < $
35769	471	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
35769	471	8	RealMatrixImpl.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
35770	473	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
35770	473	12	RealMatrixImpl.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
35771	487	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
35771	487	8	RealMatrixImpl.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
35772	489	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
35772	489	12	RealMatrixImpl.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
35773	505	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
35773	505	8	RealMatrixImpl.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
35774	507	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
35774	507	12	RealMatrixImpl.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
35775	523	8	RealMatrixImpl.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
35775	523	8	RealMatrixImpl.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
35776	525	12	RealMatrixImpl.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
35776	525	12	RealMatrixImpl.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
35777	539	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
35777	539	8	RealMatrixImpl.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
35778	540	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
35778	540	12	RealMatrixImpl.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
35779	555	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
35779	555	8	RealMatrixImpl.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
35780	556	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
35780	556	12	RealMatrixImpl.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
35781	572	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
35781	572	8	RealMatrixImpl.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
35782	573	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
35782	573	12	RealMatrixImpl.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
35783	590	8	RealMatrixImpl.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
35783	590	8	RealMatrixImpl.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
35784	591	12	RealMatrixImpl.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
35784	591	12	RealMatrixImpl.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
35785	607	8	RealMatrixImpl.java	copyOut	i	int	0	NIL-FOR	$ < nRows
35785	607	8	RealMatrixImpl.java	copyOut	nRows	int	0	NIL-FOR	i < $
35835	214	8	RealVectorFormat.java	format	i	int	0	NIL-FOR	$ < vector.getDimension()
35835	214	8	RealVectorFormat.java	format	vector	RealVector	0	NIL-FOR	i < $.getDimension()
784	215	12	RealVectorFormat.java	format	i	int	0	DEF	$ > 0
785	244	8	RealVectorFormat.java	format	obj	Object	0	RET	$ instanceof RealVector
786	264	8	RealVectorFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
787	283	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	$.parseFixedstring(source, $.trimmedPrefix, pos)
787	283	8	RealVectorFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedPrefix, pos)
787	283	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedPrefix, $)
35836	289	8	RealVectorFormat.java	parse	loop	boolean	0	NIL-FOR	$
788	291	12	RealVectorFormat.java	parse	components	List<Number>	0	DEF	$.isEmpty()
789	293	16	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	DEF	$.parseFixedstring(source, $.trimmedSeparator, pos)
789	293	16	RealVectorFormat.java	parse	source	String	0	DEF	parseFixedstring($, trimmedSeparator, pos)
789	293	16	RealVectorFormat.java	parse	pos	ParsePosition	0	DEF	parseFixedstring(source, trimmedSeparator, $)
790	298	12	RealVectorFormat.java	parse	loop	boolean	0	RET	$
791	301	16	RealVectorFormat.java	parse	component	Number	1	DEF	$ != null
792	315	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	$.parseFixedstring(source, $.trimmedSuffix, pos)
792	315	8	RealVectorFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSuffix, pos)
792	315	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSuffix, $)
35837	321	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	NIL-FOR	i < data.$.length
35837	321	8	RealVectorFormat.java	parse	i	int	0	NIL-FOR	$ < data.length
35837	321	8	RealVectorFormat.java	parse	data	double[]	0	NIL-FOR	i < $.length
12	268	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + $.numElements) > $.internalArray.$.length
13	272	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
14	296	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	($.startIndex + ($.numElements + 1)) > $.internalArray.$.length
15	306	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
16	322	8	ResizableDoubleArray.java	substituteMostRecentElement	THIS	ResizableDoubleArray	0	DEF	$.numElements < 1
17	347	8	ResizableDoubleArray.java	checkContractExpand	contraction	float	0	DEF	$ < expansion
17	347	8	ResizableDoubleArray.java	checkContractExpand	expansion	float	0	DEF	contraction < $
18	355	8	ResizableDoubleArray.java	checkContractExpand	contraction	float	0	DEF	$ <= 1.0
19	363	8	ResizableDoubleArray.java	checkContractExpand	expansion	float	0	DEF	$ <= 1.0
20	450	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	1	DEF	i > $.numElements
20	450	8	ResizableDoubleArray.java	discardExtremeElements	i	int	1	DEF	$ > numElements
21	454	14	ResizableDoubleArray.java	discardExtremeElements	i	int	1	DEF	$ < 0
22	461	12	ResizableDoubleArray.java	discardExtremeElements	front	boolean	0	DEF	$
23	463	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
24	485	8	ResizableDoubleArray.java	expand	THIS	ResizableDoubleArray	1	DEF	$.expansionMode == MULTIPLICATIVE_MODE
25	534	8	ResizableDoubleArray.java	getElement	THIS	ResizableDoubleArray	1	DEF	index >= $.numElements
25	534	8	ResizableDoubleArray.java	getElement	index	int	1	DEF	$ >= numElements
26	538	15	ResizableDoubleArray.java	getElement	index	int	1	RET	$ >= 0
27	669	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ < 0
28	674	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	index + 1 > $.numElements
28	674	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ + 1 > numElements
29	677	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + index) >= $.internalArray.$.length
29	677	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	(startIndex + $) >= internalArray.length
30	710	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	DEF	$ != MULTIPLICATIVE_MODE
30	710	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	DEF	$ != ADDITIVE_MODE
31	730	8	ResizableDoubleArray.java	setInitialCapacity	initialCapacity	int	1	DEF	$ > 0
32	752	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	$ < 0
33	760	8	ResizableDoubleArray.java	setNumElements	THIS	ResizableDoubleArray	0	DEF	($.startIndex + i) > $.internalArray.$.length
33	760	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	(startIndex + $) > internalArray.length
34	775	8	ResizableDoubleArray.java	shouldContract	THIS	ResizableDoubleArray	1	RET	$.expansionMode == MULTIPLICATIVE_MODE
35	852	8	ResizableDoubleArray.java	equals	THIS	ResizableDoubleArray	0	RET	object == $
35	852	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ == this
36	855	7	ResizableDoubleArray.java	equals	object	Object	0	RET	$ instanceof ResizableDoubleArray == false
37	868	15	ResizableDoubleArray.java	equals	result	boolean	1	RET	$
1685	94	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(min) == 0.0
1685	94	8	RiddersSolver.java	solve	min	double	0	RET	f.value($) == 0.0
1686	95	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(max) == 0.0
1686	95	8	RiddersSolver.java	solve	max	double	0	RET	f.value($) == 0.0
1687	96	8	RiddersSolver.java	solve	f	UnivariateRealFunction	0	RET	$.value(initial) == 0.0
1687	96	8	RiddersSolver.java	solve	initial	double	0	RET	f.value($) == 0.0
1688	100	8	RiddersSolver.java	solve	THIS	RiddersSolver	1	RET	$.isBracketing(min, initial, f)
1688	100	8	RiddersSolver.java	solve	f	UnivariateRealFunction	1	RET	isBracketing(min, initial, $)
1688	100	8	RiddersSolver.java	solve	min	double	1	RET	isBracketing($, initial, f)
1688	100	8	RiddersSolver.java	solve	initial	double	1	RET	isBracketing(min, $, f)
1689	134	8	RiddersSolver.java	solve	y1	double	0	RET	$ == 0.0
1690	137	8	RiddersSolver.java	solve	y2	double	0	RET	$ == 0.0
36621	144	8	RiddersSolver.java	solve	THIS	RiddersSolver	0	NIL-WHILE	i <= $.maximalIterationCount
36621	144	8	RiddersSolver.java	solve	i	int	0	NIL-WHILE	$ <= maximalIterationCount
1691	148	12	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	Math.abs(y3) <= $.functionValueAccuracy
1691	148	12	RiddersSolver.java	solve	y3	double	0	RET	Math.abs($) <= functionValueAccuracy
1692	160	12	RiddersSolver.java	solve	x	double	0	RET	Math.abs($ - oldx) <= tolerance
1692	160	12	RiddersSolver.java	solve	tolerance	double	0	RET	Math.abs(x - oldx) <= $
1692	160	12	RiddersSolver.java	solve	oldx	double	0	RET	Math.abs(x - $) <= tolerance
1693	164	12	RiddersSolver.java	solve	THIS	RiddersSolver	0	RET	Math.abs(y) <= $.functionValueAccuracy
1693	164	12	RiddersSolver.java	solve	y	double	0	RET	Math.abs($) <= functionValueAccuracy
1694	171	12	RiddersSolver.java	solve	correction	double	1	DEF	$ > 0.0
1695	172	16	RiddersSolver.java	solve	y	double	1	DEF	MathUtils.sign(y1) + MathUtils.sign($) == 0.0
1695	172	16	RiddersSolver.java	solve	y1	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
1696	182	16	RiddersSolver.java	solve	y	double	1	DEF	MathUtils.sign(y2) + MathUtils.sign($) == 0.0
1696	182	16	RiddersSolver.java	solve	y2	double	1	DEF	MathUtils.sign($) + MathUtils.sign(y) == 0.0
36672	81	8	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	NIL-FOR	i <= $.maximalIterationCount
36672	81	8	RombergIntegrator.java	integrate	i	int	0	NIL-FOR	$ <= maximalIterationCount
36673	89	12	RombergIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= i
36673	89	12	RombergIntegrator.java	integrate	i	int	0	NIL-FOR	j <= $
1813	96	12	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	RET	i >= $.minimalIterationCount
1813	96	12	RombergIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
1814	99	16	RombergIntegrator.java	integrate	THIS	RombergIntegrator	0	RET	delta <= $.absoluteAccuracy
1814	99	16	RombergIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
1814	99	16	RombergIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
1814	99	16	RombergIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
1815	114	8	RombergIntegrator.java	verifyIterationCount	THIS	RombergIntegrator	0	DEF	$.maximalIterationCount > 32
207	128	4	Rotation.java	Rotation	needsNormalization	boolean	0	DEF	$
208	158	4	Rotation.java	Rotation	norm	double	0	DEF	$ == 0
209	206	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[0].length != 3
209	206	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m.$.length != 3
209	206	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[1].length != 3
209	206	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[2].length != 3
209	206	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[0].length != 3
209	206	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$.length != 3
209	206	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[1].length != 3
209	206	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[2].length != 3
210	220	4	Rotation.java	Rotation	det	double	0	NotARotationMatrixException	$ < 0.0
211	238	4	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
212	247	6	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
213	256	8	Rotation.java	Rotation	s	double	1	DEF	$ > -0.19
214	302	2	Rotation.java	Rotation	u1u1	double	0	DEF	$ == 0
214	302	2	Rotation.java	Rotation	u2u2	double	0	DEF	$ == 0
214	302	2	Rotation.java	Rotation	v1v1	double	0	DEF	$ == 0
214	302	2	Rotation.java	Rotation	v2v2	double	0	DEF	$ == 0
215	351	2	Rotation.java	Rotation	c	double	0	RET	$ == 0
216	373	4	Rotation.java	Rotation	c	double	0	RET	$ == 0
217	383	6	Rotation.java	Rotation	c	double	0	RET	$ == 0
218	433	4	Rotation.java	Rotation	normProduct	double	0	DEF	$ == 0
219	439	4	Rotation.java	Rotation	normProduct	double	1	DEF	dot < ((2.0e-15 - 1.0) * $)
219	439	4	Rotation.java	Rotation	dot	double	1	DEF	$ < ((2.0e-15 - 1.0) * normProduct)
220	534	4	Rotation.java	getAxis	squaredSine	double	1	RET	$ == 0
221	536	11	Rotation.java	getAxis	THIS	Rotation	0	RET	$.q0 < 0
222	548	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 < -0.1
222	548	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 > 0.1
223	550	11	Rotation.java	getAngle	THIS	Rotation	0	RET	$.q0 < 0
224	594	4	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
225	603	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
225	603	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
226	612	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
227	621	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
227	621	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
228	630	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
229	639	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
229	639	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
230	648	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
231	657	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
231	657	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
232	666	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
233	675	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
233	675	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
234	684	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
235	693	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
235	693	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
236	702	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
237	711	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
237	711	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
238	720	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
239	729	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
239	729	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
240	738	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
241	747	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
241	747	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
242	756	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
243	765	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
243	765	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
244	774	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
245	783	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
245	783	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
246	801	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
246	801	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
35263	960	4	Rotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
247	1001	6	Rotation.java	orthogonalizeMatrix	fn	double	0	RET	Math.abs(fn1 - $) <= threshold
247	1001	6	Rotation.java	orthogonalizeMatrix	fn1	double	0	RET	Math.abs($ - fn) <= threshold
247	1001	6	Rotation.java	orthogonalizeMatrix	threshold	double	0	RET	Math.abs(fn1 - fn) <= $
1599	107	4	RungeKuttaIntegrator.java	integrate	y0	double[]	0	DEF	y != $
1599	107	4	RungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
36581	111	4	RungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
36581	111	4	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
1600	118	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.eventsHandlersManager.isEmpty()
1600	118	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	$.requiresDenseOutput()
36582	137	4	RungeKuttaIntegrator.java	integrate	lastStep	boolean	0	NIL-WHILE	$
36583	141	6	RungeKuttaIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
36584	147	8	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
36584	147	8	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
36585	149	10	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
36585	149	10	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
36585	149	10	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
36586	151	12	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
36586	151	12	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
36587	162	8	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
36587	162	8	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
36587	162	8	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
36588	164	10	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
36588	164	10	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
1601	172	8	RungeKuttaIntegrator.java	integrate	interpolator	AbstractStepInterpolator	1	DEF	manager.evaluateStep($)
1601	172	8	RungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	1	DEF	$.evaluateStep(interpolator)
1602	174	12	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	1	DEF	Math.abs(dt) <= Math.ulp($.stepStart)
1602	174	12	RungeKuttaIntegrator.java	integrate	dt	double	1	DEF	Math.abs($) <= Math.ulp(stepStart)
1603	200	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	DEF	manager.reset($.stepStart, y)
1603	200	6	RungeKuttaIntegrator.java	integrate	manager	CombinedEventsManager	0	DEF	$.reset(stepStart, y)
1603	200	6	RungeKuttaIntegrator.java	integrate	lastStep	boolean	0	DEF	$
1603	200	6	RungeKuttaIntegrator.java	integrate	y	double[]	0	DEF	manager.reset(stepStart, $)
1483	83	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	1	DEF	interpolator.$.currentState != null
1483	83	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
36488	87	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < interpolator.$.yDotK.$.length
36488	87	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.yDotK.length
36488	87	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.length
36489	143	4	RungeKuttaStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < kMax
36489	143	4	RungeKuttaStepInterpolator.java	writeExternal	kMax	int	0	NIL-FOR	k < $
36490	144	6	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
36490	144	6	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
36491	165	4	RungeKuttaStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
36491	165	4	RungeKuttaStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
36492	167	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
36492	167	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
1484	174	4	RungeKuttaStepInterpolator.java	readExternal	THIS	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
480	108	8	SaddlePointExpansion.java	getStirlingError	z	double	1	DEF	$ < 15.0
481	110	12	SaddlePointExpansion.java	getStirlingError	z2	double	1	DEF	Math.floor($) == $
482	146	8	SaddlePointExpansion.java	getDeviancePart	x	double	1	DEF	Math.abs($ - mu) < 0.1 * ($ + mu)
482	146	8	SaddlePointExpansion.java	getDeviancePart	mu	double	1	DEF	Math.abs(x - $) < 0.1 * (x + $)
35273	154	12	SaddlePointExpansion.java	getDeviancePart	s1	double	0	NIL-WHILE	$ != s
35273	154	12	SaddlePointExpansion.java	getDeviancePart	s	double	0	NIL-WHILE	s1 != $
483	179	8	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == 0
484	180	12	SaddlePointExpansion.java	logBinomialProbability	p	double	1	DEF	$ < 0.1
485	185	15	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == n
485	185	15	SaddlePointExpansion.java	logBinomialProbability	n	int	1	DEF	x == $
486	186	12	SaddlePointExpansion.java	logBinomialProbability	q	double	1	DEF	$ < 0.1
1713	128	8	SecantSolver.java	solve	y0	double	0	DEF	$ * y1 >= 0
1713	128	8	SecantSolver.java	solve	y1	double	0	DEF	y0 * $ >= 0
36625	139	8	SecantSolver.java	solve	THIS	SecantSolver	0	NIL-WHILE	i < $.maximalIterationCount
36625	139	8	SecantSolver.java	solve	i	int	0	NIL-WHILE	$ < maximalIterationCount
1714	140	12	SecantSolver.java	solve	y1	double	0	DEF	Math.abs(y2) < Math.abs($)
1714	140	12	SecantSolver.java	solve	y2	double	0	DEF	Math.abs($) < Math.abs(y1)
1715	148	12	SecantSolver.java	solve	THIS	SecantSolver	0	RET	Math.abs(y1) <= $.functionValueAccuracy
1715	148	12	SecantSolver.java	solve	y1	double	0	RET	Math.abs($) <= functionValueAccuracy
1716	152	12	SecantSolver.java	solve	THIS	SecantSolver	0	RET	Math.abs(oldDelta) < Math.max($.relativeAccuracy * Math.abs(x1), $.absoluteAccuracy)
1716	152	12	SecantSolver.java	solve	x1	double	0	RET	Math.abs(oldDelta) < Math.max(relativeAccuracy * Math.abs($), absoluteAccuracy)
1716	152	12	SecantSolver.java	solve	oldDelta	double	0	RET	Math.abs($) < Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy)
1717	158	12	SecantSolver.java	solve	y0	double	1	DEF	Math.abs(y1) > Math.abs($)
1717	158	12	SecantSolver.java	solve	y1	double	1	DEF	Math.abs($) > Math.abs(y0)
1718	163	16	SecantSolver.java	solve	delta	double	0	DEF	$ / oldDelta > 1
1718	163	16	SecantSolver.java	solve	oldDelta	double	0	DEF	delta / $ > 1
1719	173	12	SecantSolver.java	solve	y1	double	0	DEF	($ > 0) == (y2 > 0)
1719	173	12	SecantSolver.java	solve	y2	double	0	DEF	(y1 > 0) == ($ > 0)
1124	77	8	SecondMoment.java	increment	THIS	SecondMoment	0	DEF	$.n < 1
1134	177	8	SemiVariance.java	evaluate	values	double[]	0	DEF	$ == null
1135	275	8	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 0
1135	275	8	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 0
1136	278	12	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 1
1136	278	12	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 1
36263	285	16	SemiVariance.java	evaluate	i	int	0	NIL-FOR	$ < length
36263	285	16	SemiVariance.java	evaluate	length	int	0	NIL-FOR	i < $
1137	286	20	SemiVariance.java	evaluate	i	int	0	DEF	(values[$] > cutoff) == booleanDirection
1137	286	20	SemiVariance.java	evaluate	booleanDirection	boolean	0	DEF	(values[i] > cutoff) == $
1137	286	20	SemiVariance.java	evaluate	values	double[]	0	DEF	($[i] > cutoff) == booleanDirection
1137	286	20	SemiVariance.java	evaluate	cutoff	double	0	DEF	(values[i] > $) == booleanDirection
1138	292	16	SemiVariance.java	evaluate	corrected	boolean	1	RET	$
1398	78	12	SimpleEstimationProblem.java	getUnboundParameters	THIS	SimpleEstimationProblem	0	DEF	$.p.isBound()
36237	76	8	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	NIL-FOR	i < p.$.length
36237	76	8	SimpleRealPointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
36237	76	8	SimpleRealPointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1061	79	12	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	RET	difference > (size * $.relativeThreshold)
1061	79	12	SimpleRealPointChecker.java	converged	THIS	SimpleRealPointChecker	0	RET	difference > $.absoluteThreshold
1061	79	12	SimpleRealPointChecker.java	converged	difference	double	0	RET	$ > (size * relativeThreshold)
1061	79	12	SimpleRealPointChecker.java	converged	difference	double	0	RET	$ > absoluteThreshold
1061	79	12	SimpleRealPointChecker.java	converged	size	double	0	RET	difference > ($ * relativeThreshold)
1285	122	8	SimpleRegression.java	addData	THIS	SimpleRegression	1	DEF	$.n == 0
1286	138	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.n > 2
1287	158	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 0
1288	170	12	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 2
36327	193	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
36327	193	8	SimpleRegression.java	addData	i	int	0	NIL-FOR	$ < data.length
36327	193	8	SimpleRegression.java	addData	data	double[][]	0	NIL-FOR	i < $.length
36328	213	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
36328	213	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	$.n > 0
36328	213	8	SimpleRegression.java	removeData	i	int	0	NIL-FOR	$ < data.length
36328	213	8	SimpleRegression.java	removeData	data	double[][]	0	NIL-FOR	i < $.length
1289	298	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	$.n < 2
1290	301	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	Math.abs($.sumXX) < 10 * Double.MIN_VALUE
1291	351	8	SimpleRegression.java	getTotalSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
1292	365	8	SimpleRegression.java	getXSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
1293	411	8	SimpleRegression.java	getMeanSquareError	THIS	SimpleRegression	0	RET	$.n < 3
1294	434	8	SimpleRegression.java	getR	b1	double	0	DEF	$ < 0
1295	549	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	DEF	$ >= 1
1295	549	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	DEF	$ <= 0
1296	617	8	SimpleRegression.java	setDistribution	THIS	SimpleRegression	0	DEF	$.n > 2
36110	76	8	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	NIL-FOR	i < p.$.length
36110	76	8	SimpleVectorialPointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
36110	76	8	SimpleVectorialPointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
919	81	12	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	RET	difference > (size * $.relativeThreshold)
919	81	12	SimpleVectorialPointChecker.java	converged	THIS	SimpleVectorialPointChecker	0	RET	difference > $.absoluteThreshold
919	81	12	SimpleVectorialPointChecker.java	converged	difference	double	0	RET	$ > (size * relativeThreshold)
919	81	12	SimpleVectorialPointChecker.java	converged	difference	double	0	RET	$ > absoluteThreshold
919	81	12	SimpleVectorialPointChecker.java	converged	size	double	0	RET	difference > ($ * relativeThreshold)
36139	76	8	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	NIL-FOR	i < p.$.length
36139	76	8	SimpleVectorialValueChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
36139	76	8	SimpleVectorialValueChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
983	81	12	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	RET	difference > $.absoluteThreshold
983	81	12	SimpleVectorialValueChecker.java	converged	THIS	SimpleVectorialValueChecker	0	RET	difference > (size * $.relativeThreshold)
983	81	12	SimpleVectorialValueChecker.java	converged	difference	double	0	RET	$ > absoluteThreshold
983	81	12	SimpleVectorialValueChecker.java	converged	difference	double	0	RET	$ > (size * relativeThreshold)
983	81	12	SimpleVectorialValueChecker.java	converged	size	double	0	RET	difference > ($ * relativeThreshold)
36118	64	8	SimplexSolver.java	getPivotColumn	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
36118	64	8	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
943	65	12	SimplexSolver.java	getPivotColumn	THIS	SimplexSolver	0	DEF	MathUtils.compareTo(tableau.getEntry(0, i), minValue, $.epsilon) < 0
943	65	12	SimplexSolver.java	getPivotColumn	i	int	0	DEF	MathUtils.compareTo(tableau.getEntry(0, $), minValue, epsilon) < 0
943	65	12	SimplexSolver.java	getPivotColumn	minValue	double	0	DEF	MathUtils.compareTo(tableau.getEntry(0, i), $, epsilon) < 0
943	65	12	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	DEF	MathUtils.compareTo($.getEntry(0, i), minValue, epsilon) < 0
36119	83	8	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getHeight()
36119	83	8	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
944	86	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	MathUtils.compareTo(entry, 0, $.epsilon) > 0
944	86	12	SimplexSolver.java	getPivotRow	entry	double	0	DEF	MathUtils.compareTo($, 0, epsilon) > 0
945	88	16	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	1	DEF	MathUtils.equals(ratio, minRatio, $.epsilon)
945	88	16	SimplexSolver.java	getPivotRow	ratio	double	1	DEF	MathUtils.equals($, minRatio, epsilon)
945	88	16	SimplexSolver.java	getPivotRow	minRatio	double	1	DEF	MathUtils.equals(ratio, $, epsilon)
946	90	23	SimplexSolver.java	getPivotRow	ratio	double	0	DEF	$ < minRatio
946	90	23	SimplexSolver.java	getPivotRow	minRatio	double	0	DEF	ratio < $
947	98	8	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	1	RET	$.size() == 0
948	100	15	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	0	RET	$.size() > 1
36120	104	12	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getNumArtificialVariables()
36120	104	12	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
949	106	14	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	MathUtils.equals(tableau.getEntry($.row, column), 1, $.epsilon)
949	106	14	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.row.equals(tableau.getBasicRow(column))
949	106	14	SimplexSolver.java	getPivotRow	column	int	0	RET	MathUtils.equals(tableau.getEntry(row, $), 1, epsilon)
949	106	14	SimplexSolver.java	getPivotRow	column	int	0	RET	row.equals(tableau.getBasicRow($))
949	106	14	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	MathUtils.equals($.getEntry(row, column), 1, epsilon)
949	106	14	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	row.equals($.getBasicRow(column))
950	129	8	SimplexSolver.java	doIteration	pivotRow	Integer	0	UnboundedSolutionException	$ == null
36121	138	8	SimplexSolver.java	doIteration	i	int	0	NIL-FOR	$ < tableau.getHeight()
36121	138	8	SimplexSolver.java	doIteration	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
951	139	12	SimplexSolver.java	doIteration	i	int	0	DEF	$ != pivotRow
951	139	12	SimplexSolver.java	doIteration	pivotRow	Integer	0	DEF	i != $
952	156	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
36122	160	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
953	165	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NoFeasibleSolutionException	MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, $.epsilon)
953	165	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NoFeasibleSolutionException	MathUtils.equals($.getEntry(0, $.getRhsOffset()), 0, epsilon)
36123	179	8	SimplexSolver.java	doOptimize	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
957	129	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
36124	133	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getOriginalNumDecisionVariables()
36124	133	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getOriginalNumDecisionVariables()
958	136	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
36125	139	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumSlackVariables()
36125	139	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumSlackVariables()
36126	142	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
36126	142	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
959	162	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
960	173	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
36127	181	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	NIL-FOR	i < $.constraints.size()
36127	181	8	SimplexTableau.java	createTableau	i	int	0	NIL-FOR	$ < constraints.size()
961	189	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
962	198	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	1	DEF	constraint.getRelationship() == $.Relationship.LEQ
962	198	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	1	DEF	$.getRelationship() == Relationship.LEQ
963	200	19	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
963	200	19	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
964	205	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
964	205	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.EQ
964	205	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
964	205	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.EQ
965	235	8	SimplexTableau.java	normalize	constraint	LinearConstraint	0	RET	$.getValue() < 0
966	260	12	SimplexTableau.java	getConstraintTypeCounts	THIS	SimplexTableau	0	DEF	$.constraint.getRelationship() == relationship
966	260	12	SimplexTableau.java	getConstraintTypeCounts	relationship	Relationship	0	DEF	constraint.getRelationship() == $
36128	287	8	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
36128	287	8	SimplexTableau.java	getBasicRow	i	int	0	NIL-FOR	$ < getHeight()
967	288	12	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	1	DEF	MathUtils.equals($.getEntry(i, col), 1.0, $.epsilon)
967	288	12	SimplexTableau.java	getBasicRow	i	int	1	DEF	MathUtils.equals(getEntry($, col), 1.0, epsilon)
967	288	12	SimplexTableau.java	getBasicRow	row	Integer	1	DEF	$ == null
967	288	12	SimplexTableau.java	getBasicRow	col	int	1	DEF	MathUtils.equals(getEntry(i, $), 1.0, epsilon)
968	290	19	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	RET	MathUtils.equals($.getEntry(i, col), 0.0, $.epsilon)
968	290	19	SimplexTableau.java	getBasicRow	i	int	0	RET	MathUtils.equals(getEntry($, col), 0.0, epsilon)
968	290	19	SimplexTableau.java	getBasicRow	col	int	0	RET	MathUtils.equals(getEntry(i, $), 0.0, epsilon)
969	302	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	RET	$.getNumObjectiveFunctions() == 1
36129	310	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getArtificialVariableOffset()
36129	310	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getArtificialVariableOffset()
970	311	10	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	MathUtils.compareTo($.tableau.getEntry(0, i), 0, $.epsilon) > 0
970	311	10	SimplexTableau.java	dropPhase1Objective	i	int	0	DEF	MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) > 0
36130	317	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
36130	317	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
971	319	10	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	$.getBasicRow(col) == null
971	319	10	SimplexTableau.java	dropPhase1Objective	col	int	0	DEF	getBasicRow($) == null
36131	325	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
36131	325	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getHeight()
36132	327	10	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
36132	327	10	SimplexTableau.java	dropPhase1Objective	j	int	0	NIL-FOR	$ < getWidth()
972	328	12	SimplexTableau.java	dropPhase1Objective	j	int	0	DEF	columnsToDrop.contains($)
972	328	12	SimplexTableau.java	dropPhase1Objective	columnsToDrop	List<Integer>	0	DEF	$.contains(j)
36133	334	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ >= 0
36134	355	8	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
36134	355	8	SimplexTableau.java	isOptimal	i	int	0	NIL-FOR	$ < getWidth() - 1
973	356	12	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	RET	MathUtils.compareTo($.tableau.getEntry(0, i), 0, $.epsilon) < 0
973	356	12	SimplexTableau.java	isOptimal	i	int	0	RET	MathUtils.compareTo(tableau.getEntry(0, $), 0, epsilon) < 0
36135	375	6	SimplexTableau.java	getSolution	THIS	SimplexTableau	0	NIL-FOR	i < coefficients.$.length
36135	375	6	SimplexTableau.java	getSolution	i	int	0	NIL-FOR	$ < coefficients.length
36135	375	6	SimplexTableau.java	getSolution	coefficients	double[]	0	NIL-FOR	i < $.length
974	377	10	SimplexTableau.java	getSolution	colIndex	int	0	DEF	$ < 0
975	382	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	basicRows.contains($)
975	382	10	SimplexTableau.java	getSolution	basicRows	Set<Integer>	1	DEF	$.contains(basicRow)
36136	406	8	SimplexTableau.java	divideRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
36136	406	8	SimplexTableau.java	divideRow	j	int	0	NIL-FOR	$ < getWidth()
976	537	6	SimplexTableau.java	equals	THIS	SimplexTableau	0	RET	$ == other
976	537	6	SimplexTableau.java	equals	other	Object	0	RET	this == $
977	541	6	SimplexTableau.java	equals	other	Object	0	RET	$ == null
1800	74	8	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	$.minimalIterationCount == 1
36666	82	8	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	NIL-FOR	i <= $.maximalIterationCount
36666	82	8	SimpsonIntegrator.java	integrate	i	int	0	NIL-FOR	$ <= maximalIterationCount
1801	85	12	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	i >= $.minimalIterationCount
1801	85	12	SimpsonIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
1802	89	16	SimpsonIntegrator.java	integrate	THIS	SimpsonIntegrator	0	RET	delta <= $.absoluteAccuracy
1802	89	16	SimpsonIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
1802	89	16	SimpsonIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
1802	89	16	SimpsonIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
1803	105	8	SimpsonIntegrator.java	verifyIterationCount	THIS	SimpsonIntegrator	0	DEF	$.maximalIterationCount > 64
35561	90	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.n
35561	90	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < n
35562	91	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.n
35562	91	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	j	int	0	NIL-FOR	$ < n
35563	93	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	k < $.m
35563	93	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	NIL-FOR	$ < m
35564	104	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	i < $.m
35564	104	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < m
35565	105	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	j < $.m
35565	105	12	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	j	int	0	NIL-FOR	$ < m
35566	107	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	0	NIL-FOR	k < $.n
35566	107	16	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	k	int	0	NIL-FOR	$ < n
634	114	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	THIS	SingularValueDecompositionImpl	1	DEF	$.m>=$.n
35567	139	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < p
35567	139	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	p	int	0	NIL-FOR	i < $
35568	146	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	i	int	0	NIL-FOR	$ < p
35568	146	8	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	p	int	0	NIL-FOR	i < $
635	149	10	SingularValueDecompositionImpl.java	SingularValueDecompositionImpl	product	double	0	DEF	$<0
636	165	8	SingularValueDecompositionImpl.java	getUT	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedUt == null
637	177	8	SingularValueDecompositionImpl.java	getS	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedS == null
638	201	8	SingularValueDecompositionImpl.java	getVT	THIS	SingularValueDecompositionImpl	0	DEF	$.cachedVt == null
35569	216	8	SingularValueDecompositionImpl.java	getCovariance	THIS	SingularValueDecompositionImpl	0	NIL-WHILE	$.singularValues[dimension] >= minSingularValue
35569	216	8	SingularValueDecompositionImpl.java	getCovariance	p	int	0	NIL-WHILE	dimension < $
35569	216	8	SingularValueDecompositionImpl.java	getCovariance	dimension	int	0	NIL-WHILE	$ < p
35569	216	8	SingularValueDecompositionImpl.java	getCovariance	dimension	int	0	NIL-WHILE	singularValues[$] >= minSingularValue
35569	216	8	SingularValueDecompositionImpl.java	getCovariance	minSingularValue	double	0	NIL-WHILE	singularValues[dimension] >= $
639	220	8	SingularValueDecompositionImpl.java	getCovariance	dimension	int	0	DEF	$ == 0
35570	256	8	SingularValueDecompositionImpl.java	getRank	i	int	0	NIL-FOR	$ >= 0
640	257	12	SingularValueDecompositionImpl.java	getRank	THIS	SingularValueDecompositionImpl	0	RET	$.singularValues[i] > threshold
640	257	12	SingularValueDecompositionImpl.java	getRank	i	int	0	RET	singularValues[$] > threshold
640	257	12	SingularValueDecompositionImpl.java	getRank	threshold	double	0	RET	singularValues[i] > $
1110	88	8	Skewness.java	increment	THIS	Skewness	0	DEF	$.incMoment
1111	103	8	Skewness.java	getResult	THIS	Skewness	0	RET	$.moment.$.n < 3
1112	107	8	Skewness.java	getResult	variance	double	1	RET	$ < 10E-20
1113	128	8	Skewness.java	clear	THIS	Skewness	0	DEF	$.incMoment
1114	156	8	Skewness.java	evaluate	THIS	Skewness	0	DEF	$.test(values, begin, length)
1114	156	8	Skewness.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1114	156	8	Skewness.java	evaluate	begin	int	0	DEF	test(values, $, length)
1114	156	8	Skewness.java	evaluate	length	int	0	DEF	test(values, begin, $)
1114	156	8	Skewness.java	evaluate	length	int	0	DEF	$ > 2
36256	166	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
36256	166	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
36256	166	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
36257	174	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
36257	174	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
36257	174	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
35571	95	8	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	i < $.rows
35571	95	8	SparseFieldMatrix.java	SparseFieldMatrix	i	int	0	NIL-FOR	$ < rows
35572	96	12	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	j < $.columns
35572	96	12	SparseFieldMatrix.java	SparseFieldMatrix	j	int	0	NIL-FOR	$ < columns
641	110	8	SparseFieldMatrix.java	addToEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
641	110	8	SparseFieldMatrix.java	addToEntry	value	T	1	DEF	getField().getZero().equals($)
642	159	8	SparseFieldMatrix.java	multiplyEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
642	159	8	SparseFieldMatrix.java	multiplyEntry	value	T	1	DEF	getField().getZero().equals($)
643	173	8	SparseFieldMatrix.java	setEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
643	173	8	SparseFieldMatrix.java	setEntry	value	T	1	DEF	getField().getZero().equals($)
35634	106	8	SparseFieldVector.java	SparseFieldVector	THIS	SparseFieldVector	0	NIL-FOR	key < values.$.length
35634	106	8	SparseFieldVector.java	SparseFieldVector	key	int	0	NIL-FOR	$ < values.length
35634	106	8	SparseFieldVector.java	SparseFieldVector	values	T[]	0	NIL-FOR	key < $.length
35635	142	8	SparseFieldVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
673	146	12	SparseFieldVector.java	add	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
673	146	12	SparseFieldVector.java	add	key	int	1	DEF	entries.containsKey($)
35636	161	8	SparseFieldVector.java	add	THIS	SparseFieldVector	0	NIL-FOR	i < v.$.length
35636	161	8	SparseFieldVector.java	add	i	int	0	NIL-FOR	$ < v.length
35636	161	8	SparseFieldVector.java	add	v	T[]	0	NIL-FOR	i < $.length
35637	175	8	SparseFieldVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
674	184	8	SparseFieldVector.java	append	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
35638	201	8	SparseFieldVector.java	append	THIS	SparseFieldVector	0	NIL-FOR	i < a.$.length
35638	201	8	SparseFieldVector.java	append	i	int	0	NIL-FOR	$ < a.length
35638	201	8	SparseFieldVector.java	append	a	T[]	0	NIL-FOR	i < $.length
35639	217	8	SparseFieldVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
35640	229	8	SparseFieldVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
675	232	12	SparseFieldVector.java	dotProduct	THIS	SparseFieldVector	0	DEF	idx < v.$.length
675	232	12	SparseFieldVector.java	dotProduct	idx	int	0	DEF	$ < v.length
675	232	12	SparseFieldVector.java	dotProduct	v	T[]	0	DEF	idx < $.length
35641	246	8	SparseFieldVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
35642	258	8	SparseFieldVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
35643	270	8	SparseFieldVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
35644	282	8	SparseFieldVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
35645	293	8	SparseFieldVector.java	getData	iter	Iterator	0	NIL-WHILE	$.hasNext()
35646	324	8	SparseFieldVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
676	327	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ >= index
676	327	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ < end
676	327	12	SparseFieldVector.java	getSubVector	end	int	0	DEF	key < $
676	327	12	SparseFieldVector.java	getSubVector	index	int	0	DEF	key >= $
35647	341	8	SparseFieldVector.java	mapAddToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
35647	341	8	SparseFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
35648	355	8	SparseFieldVector.java	mapDivideToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
35649	369	8	SparseFieldVector.java	mapInvToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
35649	369	8	SparseFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < virtualSize
35650	383	8	SparseFieldVector.java	mapMultiplyToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
35651	411	8	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
35652	414	12	SparseFieldVector.java	outerProduct	iter2	Iterator	0	NIL-WHILE	$.hasNext()
35653	427	8	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
35654	431	12	SparseFieldVector.java	outerProduct	THIS	SparseFieldVector	0	NIL-FOR	col < $.virtualSize
35654	431	12	SparseFieldVector.java	outerProduct	col	int	0	NIL-FOR	$ < virtualSize
677	441	8	SparseFieldVector.java	outerProduct	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
35655	462	8	SparseFieldVector.java	set	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
35655	462	8	SparseFieldVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
35656	485	8	SparseFieldVector.java	setSubVector	THIS	SparseFieldVector	0	NIL-FOR	i < v.$.length
35656	485	8	SparseFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.length
35656	485	8	SparseFieldVector.java	setSubVector	v	T[]	0	NIL-FOR	i < $.length
35657	501	8	SparseFieldVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
678	504	12	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
678	504	12	SparseFieldVector.java	subtract	key	int	1	DEF	entries.containsKey($)
679	516	8	SparseFieldVector.java	subtract	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
35658	526	8	SparseFieldVector.java	subtract	THIS	SparseFieldVector	0	NIL-FOR	i < v.$.length
35658	526	8	SparseFieldVector.java	subtract	i	int	0	NIL-FOR	$ < v.length
35658	526	8	SparseFieldVector.java	subtract	v	T[]	0	NIL-FOR	i < $.length
680	527	12	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(i)
680	527	12	SparseFieldVector.java	subtract	i	int	1	DEF	entries.containsKey($)
681	550	8	SparseFieldVector.java	checkIndex	THIS	SparseFieldVector	0	MatrixIndexException	index >= $.getDimension()
681	550	8	SparseFieldVector.java	checkIndex	index	int	0	MatrixIndexException	$ < 0
681	550	8	SparseFieldVector.java	checkIndex	index	int	0	MatrixIndexException	$ >= getDimension()
682	566	8	SparseFieldVector.java	checkVectorDimensions	THIS	SparseFieldVector	0	DEF	$.getDimension() != n
682	566	8	SparseFieldVector.java	checkVectorDimensions	n	int	0	DEF	getDimension() != $
683	576	8	SparseFieldVector.java	add	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
35659	601	8	SparseFieldVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
684	614	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$ == obj
684	614	8	SparseFieldVector.java	equals	obj	Object	0	RET	this == $
685	618	8	SparseFieldVector.java	equals	obj	Object	0	RET	$ == null
686	622	8	SparseFieldVector.java	equals	obj	Object	0	RET	$ instanceof SparseFieldVector<?>
687	629	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	1	RET	$.field == null
688	630	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	other.$.field != null
688	630	12	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	$.field != null
689	633	15	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.field.equals(other.$.field)
689	633	15	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	field.equals($.field)
690	636	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.virtualSize != other.$.virtualSize
690	636	8	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	virtualSize != $.virtualSize
35660	641	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
691	644	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(iter.value())
691	644	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals($.value())
35661	649	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
692	652	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	test.equals($.getEntry(iter.key()))
692	652	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(getEntry(iter.key()))
692	652	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals(getEntry($.key()))
1246	148	8	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	RET	xArray.$.length > 1
1246	148	8	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	RET	xArray.$.length == yArray.$.length
1246	148	8	SpearmansCorrelation.java	correlation	xArray	double[]	1	RET	$.length > 1
1246	148	8	SpearmansCorrelation.java	correlation	xArray	double[]	1	RET	$.length == yArray.length
1246	148	8	SpearmansCorrelation.java	correlation	yArray	double[]	1	RET	xArray.length == $.length
36305	166	8	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < matrix.getColumnDimension()
36305	166	8	SpearmansCorrelation.java	rankTransform	matrix	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
1651	59	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	DEF	x.$.length != y.$.length
1651	59	8	SplineInterpolator.java	interpolate	x	double	0	DEF	$.length != y.length
1651	59	8	SplineInterpolator.java	interpolate	y	double	0	DEF	x.length != $.length
1652	64	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	DEF	x.$.length < 3
1652	64	8	SplineInterpolator.java	interpolate	x	double	0	DEF	$.length < 3
36604	72	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
36604	72	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
1653	73	12	SplineInterpolator.java	interpolate	i	int	0	DEF	x[$] >= x[$ + 1]
1653	73	12	SplineInterpolator.java	interpolate	x	double	0	DEF	$[i] >= $[i + 1]
36605	82	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
36605	82	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
36606	91	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
36606	91	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
36607	106	8	SplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ >=0
36608	114	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
36608	114	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
1277	567	8	StatUtils.java	sumDifference	THIS	StatUtils	0	DEF	n != sample2.$.length
1277	567	8	StatUtils.java	sumDifference	n	int	0	DEF	$ < 1
1277	567	8	StatUtils.java	sumDifference	n	int	0	DEF	$ != sample2.length
1277	567	8	StatUtils.java	sumDifference	sample2	double[]	0	DEF	n != $.length
36320	573	8	StatUtils.java	sumDifference	i	int	0	NIL-FOR	$ < n
36320	573	8	StatUtils.java	sumDifference	n	int	0	NIL-FOR	i < $
1278	612	8	StatUtils.java	varianceDifference	THIS	StatUtils	0	DEF	n != sample2.$.length
1278	612	8	StatUtils.java	varianceDifference	n	int	0	DEF	$ != sample2.length
1278	612	8	StatUtils.java	varianceDifference	n	int	0	DEF	$ < 2
1278	612	8	StatUtils.java	varianceDifference	sample2	double[]	0	DEF	n != $.length
36321	617	8	StatUtils.java	varianceDifference	i	int	0	NIL-FOR	$ < n
36321	617	8	StatUtils.java	varianceDifference	n	int	0	NIL-FOR	i < $
1198	131	8	StatisticalSummaryValues.java	equals	THIS	StatisticalSummaryValues	0	RET	object == $
1198	131	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ == this
1199	134	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ instanceof StatisticalSummaryValues == false
1472	117	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.lastState == null
1473	126	12	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.forward
36479	134	8	StepNormalizer.java	handleStep	nextInStep	boolean	0	NIL-WHILE	$
1474	152	8	StepNormalizer.java	handleStep	isLast	boolean	0	DEF	$
1077	73	8	Sum.java	increment	THIS	Sum	1	DEF	$.n == 0
1078	122	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, begin, length)
1078	122	8	Sum.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1078	122	8	Sum.java	evaluate	begin	int	0	DEF	test(values, $, length)
1078	122	8	Sum.java	evaluate	length	int	0	DEF	test(values, begin, $)
36246	124	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
36246	124	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
36246	124	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1079	161	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, weights, begin, length)
1079	161	8	Sum.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length)
1079	161	8	Sum.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length)
1079	161	8	Sum.java	evaluate	begin	int	0	DEF	test(values, weights, $, length)
1079	161	8	Sum.java	evaluate	length	int	0	DEF	test(values, weights, begin, $)
36247	163	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
36247	163	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
36247	163	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1080	89	8	SumOfLogs.java	getResult	THIS	SumOfLogs	1	RET	$.n > 0
1081	132	8	SumOfLogs.java	evaluate	THIS	SumOfLogs	0	DEF	$.test(values, begin, length)
1081	132	8	SumOfLogs.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1081	132	8	SumOfLogs.java	evaluate	begin	int	0	DEF	test(values, $, length)
1081	132	8	SumOfLogs.java	evaluate	length	int	0	DEF	test(values, begin, $)
36248	134	12	SumOfLogs.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
36248	134	12	SumOfLogs.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
36248	134	12	SumOfLogs.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1075	72	8	SumOfSquares.java	increment	THIS	SumOfSquares	1	DEF	$.n == 0
1076	121	8	SumOfSquares.java	evaluate	THIS	SumOfSquares	0	DEF	$.test(values, begin, length)
1076	121	8	SumOfSquares.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1076	121	8	SumOfSquares.java	evaluate	begin	int	0	DEF	test(values, $, length)
1076	121	8	SumOfSquares.java	evaluate	length	int	0	DEF	test(values, begin, $)
36245	123	12	SumOfSquares.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
36245	123	12	SumOfSquares.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
36245	123	12	SumOfSquares.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1153	154	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.meanImpl instanceof Mean
1154	157	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.varianceImpl instanceof Variance
1155	160	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.geoMeanImpl instanceof GeometricMean
1156	201	8	SummaryStatistics.java	getMean	THIS	SummaryStatistics	1	RET	$.mean == $.meanImpl
1157	217	8	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	0	DEF	$.getN() > 0
1158	218	12	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	1	DEF	$.getN() > 1
1159	235	8	SummaryStatistics.java	getVariance	THIS	SummaryStatistics	1	RET	$.varianceImpl == $.variance
1160	339	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
1161	342	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
1162	356	8	SummaryStatistics.java	equals	THIS	SummaryStatistics	0	RET	object == $
1162	356	8	SummaryStatistics.java	equals	object	Object	0	RET	$ == this
1163	359	8	SummaryStatistics.java	equals	object	Object	0	RET	$ instanceof SummaryStatistics == false
1164	629	8	SummaryStatistics.java	checkEmpty	THIS	SummaryStatistics	0	DEF	$.n > 0
1165	663	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getGeoMeanImpl() instanceof GeometricMean
1166	674	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.geoMean == source.$.geoMeanImpl
1166	674	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.geoMean == $.geoMeanImpl
1167	679	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.max == source.$.maxImpl
1167	679	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.max == $.maxImpl
1168	684	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.mean == source.$.meanImpl
1168	684	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.mean == $.meanImpl
1169	689	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.min == source.$.minImpl
1169	689	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.min == $.minImpl
1170	694	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sum == source.$.sumImpl
1170	694	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sum == $.sumImpl
1171	699	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.variance == source.$.varianceImpl
1171	699	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.variance == $.varianceImpl
1172	704	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumLog == source.$.sumLogImpl
1172	704	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumLog == $.sumLogImpl
1173	709	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumsq == source.$.sumsqImpl
1173	709	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumsq == $.sumsqImpl
414	55	8	TDistributionImpl.java	setDegreesOfFreedom	degreesOfFreedom	double	0	DEF	$ <= 0.0
415	80	8	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ == 0.0
416	88	12	TDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ < 0.0
417	115	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
418	118	8	TDistributionImpl.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
1229	1031	8	TTestImpl.java	checkSignificanceLevel	alpha	double	0	DEF	$ > 0.5
1229	1031	8	TTestImpl.java	checkSignificanceLevel	alpha	double	0	DEF	$ <= 0
1230	1044	8	TTestImpl.java	checkSampleData	THIS	TTestImpl	0	DEF	data.$.length < 2
1230	1044	8	TTestImpl.java	checkSampleData	data	double[]	0	DEF	$.length < 2
1230	1044	8	TTestImpl.java	checkSampleData	data	double[]	0	DEF	$ == null
1231	1057	8	TTestImpl.java	checkSampleData	stat	StatisticalSummary	0	DEF	$ == null
1231	1057	8	TTestImpl.java	checkSampleData	stat	StatisticalSummary	0	DEF	$.getN() < 2
1133	86	8	ThirdMoment.java	increment	THIS	ThirdMoment	0	DEF	$.n < 1
36575	102	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
36575	102	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
1366	73	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	IllegalArgumentException	population.getPopulationSize() < $.arity
1366	73	8	TournamentSelection.java	tournament	population	ListPopulation	0	IllegalArgumentException	$.getPopulationSize() < this.arity
36372	85	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	NIL-FOR	i<$.arity
36372	85	8	TournamentSelection.java	tournament	i	int	0	NIL-FOR	$<this.arity
5	143	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof Number
5	143	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof String
6	147	12	TransformerMap.java	transform	trans	NumberTransformer	0	DEF	$ != null
7	158	8	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$ == other
7	158	8	TransformerMap.java	equals	other	Object	0	RET	this == $
8	161	8	TransformerMap.java	equals	other	Object	0	RET	$ == null
9	166	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.defaultTransformer.equals(rhs.$.defaultTransformer)
9	166	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	defaultTransformer.equals($.defaultTransformer)
10	169	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.map.size() != rhs.$.map.size()
10	169	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	map.size() != $.map.size()
11	173	16	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.entry.getValue().equals(rhs.$.map.get($.entry.getKey()))
11	173	16	TransformerMap.java	equals	rhs	TransformerMap	0	RET	entry.getValue().equals($.map.get(entry.getKey()))
1808	80	8	TrapezoidIntegrator.java	stage	n	int	1	RET	$ == 0
36667	88	12	TrapezoidIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
36667	88	12	TrapezoidIntegrator.java	stage	np	long	0	NIL-FOR	i < $
36668	115	8	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	NIL-FOR	i <= $.maximalIterationCount
36668	115	8	TrapezoidIntegrator.java	integrate	i	int	0	NIL-FOR	$ <= maximalIterationCount
1809	117	12	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	RET	i >= $.minimalIterationCount
1809	117	12	TrapezoidIntegrator.java	integrate	i	int	0	RET	$ >= minimalIterationCount
1810	121	16	TrapezoidIntegrator.java	integrate	THIS	TrapezoidIntegrator	0	RET	delta <= $.absoluteAccuracy
1810	121	16	TrapezoidIntegrator.java	integrate	delta	double	0	RET	$ <= absoluteAccuracy
1810	121	16	TrapezoidIntegrator.java	integrate	delta	double	0	RET	$ <= rLimit
1810	121	16	TrapezoidIntegrator.java	integrate	rLimit	double	0	RET	delta <= $
1811	136	8	TrapezoidIntegrator.java	verifyIterationCount	THIS	TrapezoidIntegrator	0	DEF	$.maximalIterationCount > 64
540	67	8	TriDiagonalTransformer.java	TriDiagonalTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
541	90	8	TriDiagonalTransformer.java	getQ	THIS	TriDiagonalTransformer	0	DEF	$.cachedQ == null
542	103	8	TriDiagonalTransformer.java	getQT	THIS	TriDiagonalTransformer	0	DEF	$.cachedQt == null
35383	109	12	TriDiagonalTransformer.java	getQT	k	int	0	NIL-FOR	$ >= 1
543	113	16	TriDiagonalTransformer.java	getQT	hK	double[]	0	DEF	$[k] != 0.0
543	113	16	TriDiagonalTransformer.java	getQT	k	int	0	DEF	hK[$] != 0.0
35384	116	20	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
35384	116	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
35385	119	20	TriDiagonalTransformer.java	getQT	j	int	0	NIL-FOR	$ < m
35385	119	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	j < $
35386	121	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
35386	121	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
35387	126	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
35387	126	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
544	147	8	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	$.cachedT == null
35388	151	12	TriDiagonalTransformer.java	getT	i	int	0	NIL-FOR	$ < m
35388	151	12	TriDiagonalTransformer.java	getT	m	int	0	NIL-FOR	i < $
545	153	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ > 0
546	156	16	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	i < $.main.$.length - 1
546	156	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ < main.length - 1
35389	206	8	TriDiagonalTransformer.java	transform	k	int	0	NIL-FOR	$ < m - 1
35389	206	8	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	k < $ - 1
35390	212	12	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
35390	212	12	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
547	218	12	TriDiagonalTransformer.java	transform	a	double	0	DEF	$ != 0.0
35391	229	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
35391	229	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
35392	233	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
35392	233	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
35393	243	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
35393	243	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
35394	249	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
35394	249	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
35395	255	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
35395	255	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
35396	257	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
35396	257	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1358	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	THIS	UncorrelatedRandomVectorGenerator	0	DEF	mean.$.length != standardDeviation.$.length
1358	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	mean	double[]	0	DEF	$.length != standardDeviation.length
1358	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	standardDeviation	double[]	0	DEF	mean.length != $.length
36368	87	4	UncorrelatedRandomVectorGenerator.java	nextVector	THIS	UncorrelatedRandomVectorGenerator	0	NIL-FOR	i < random.$.length
36368	87	4	UncorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < random.length
36368	87	4	UncorrelatedRandomVectorGenerator.java	nextVector	random	double[]	0	NIL-FOR	i < $.length
36345	63	8	UnitSphereRandomVectorGenerator.java	nextVector	normSq	double	0	NIL-DOWHILE	$ > 1
36346	65	12	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
36346	65	12	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
36347	73	8	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
36347	73	8	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
1804	68	8	UnivariateRealIntegratorImpl.java	UnivariateRealIntegratorImpl	f	UnivariateRealFunction	0	DEF	$ == null
1805	108	8	UnivariateRealIntegratorImpl.java	getResult	THIS	UnivariateRealIntegratorImpl	1	RET	$.resultComputed
1806	159	8	UnivariateRealIntegratorImpl.java	verifyInterval	lower	double	0	DEF	$ >= upper
1806	159	8	UnivariateRealIntegratorImpl.java	verifyInterval	upper	double	0	DEF	lower >= $
1807	172	8	UnivariateRealIntegratorImpl.java	verifyIterationCount	THIS	UnivariateRealIntegratorImpl	0	DEF	$.maximalIterationCount <= $.minimalIterationCount
1807	172	8	UnivariateRealIntegratorImpl.java	verifyIterationCount	THIS	UnivariateRealIntegratorImpl	0	DEF	$.minimalIterationCount <= 0
1679	75	8	UnivariateRealSolverImpl.java	UnivariateRealSolverImpl	f	UnivariateRealFunction	0	DEF	$ == null
1680	102	8	UnivariateRealSolverImpl.java	checkResultComputed	THIS	UnivariateRealSolverImpl	0	DEF	$.resultComputed
1681	208	8	UnivariateRealSolverImpl.java	verifyInterval	lower	double	0	DEF	$ >= upper
1681	208	8	UnivariateRealSolverImpl.java	verifyInterval	upper	double	0	DEF	lower >= $
1682	225	8	UnivariateRealSolverImpl.java	verifySequence	THIS	UnivariateRealSolverImpl	0	DEF	$.isSequence(lower, initial, upper)
1682	225	8	UnivariateRealSolverImpl.java	verifySequence	lower	double	0	DEF	isSequence($, initial, upper)
1682	225	8	UnivariateRealSolverImpl.java	verifySequence	initial	double	0	DEF	isSequence(lower, $, upper)
1682	225	8	UnivariateRealSolverImpl.java	verifySequence	upper	double	0	DEF	isSequence(lower, initial, $)
1683	248	8	UnivariateRealSolverImpl.java	verifyBracketing	THIS	UnivariateRealSolverImpl	0	DEF	$.isBracketing(lower, upper, function)
1683	248	8	UnivariateRealSolverImpl.java	verifyBracketing	lower	double	0	DEF	isBracketing($, upper, function)
1683	248	8	UnivariateRealSolverImpl.java	verifyBracketing	upper	double	0	DEF	isBracketing(lower, $, function)
1683	248	8	UnivariateRealSolverImpl.java	verifyBracketing	function	UnivariateRealFunction	0	DEF	isBracketing(lower, upper, $)
1720	175	8	UnivariateRealSolverUtils.java	bracket	function	UnivariateRealFunction	0	DEF	$ == null
1721	178	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	DEF	$ <= 0
1722	182	8	UnivariateRealSolverUtils.java	bracket	initial	double	0	DEF	$ < lowerBound
1722	182	8	UnivariateRealSolverUtils.java	bracket	initial	double	0	DEF	$ > upperBound
1722	182	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	DEF	$ >= upperBound
1722	182	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	DEF	initial < $
1722	182	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	DEF	lowerBound >= $
1722	182	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	DEF	initial > $
36626	193	8	UnivariateRealSolverUtils.java	bracket	a	double	0	NIL-DOWHILE	$ > lowerBound
36626	193	8	UnivariateRealSolverUtils.java	bracket	b	double	0	NIL-DOWHILE	$ < upperBound
36626	193	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	NIL-DOWHILE	$ * fb > 0.0
36626	193	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	NIL-DOWHILE	fa * $ > 0.0
36626	193	8	UnivariateRealSolverUtils.java	bracket	numIterations	int	0	NIL-DOWHILE	$ < maximumIterations
36626	193	8	UnivariateRealSolverUtils.java	bracket	lowerBound	double	0	NIL-DOWHILE	a > $
36626	193	8	UnivariateRealSolverUtils.java	bracket	upperBound	double	0	NIL-DOWHILE	b < $
36626	193	8	UnivariateRealSolverUtils.java	bracket	maximumIterations	int	0	NIL-DOWHILE	numIterations < $
1723	203	8	UnivariateRealSolverUtils.java	bracket	fa	double	0	ConvergenceException	$ * fb > 0.0
1723	203	8	UnivariateRealSolverUtils.java	bracket	fb	double	0	ConvergenceException	fa * $ > 0.0
1724	232	8	UnivariateRealSolverUtils.java	setup	f	UnivariateRealFunction	0	DEF	$ == null
36369	138	8	ValueServer.java	fill	THIS	ValueServer	0	NIL-FOR	i < values.$.length
36369	138	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < values.length
36369	138	8	ValueServer.java	fill	values	double[]	0	NIL-FOR	i < $.length
36370	153	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < length
36370	153	8	ValueServer.java	fill	length	int	0	NIL-FOR	i < $
1359	250	8	ValueServer.java	resetReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
1360	267	8	ValueServer.java	closeReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
1361	314	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	DEF	$.empiricalDistribution == null
1361	314	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	DEF	$.empiricalDistribution.getBinStats().size() == 0
1362	341	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	$.filePointer == null
1363	344	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	(str = $.filePointer.readLine()) == null
1363	344	8	ValueServer.java	getNextReplay	str	String	0	DEF	($ = filePointer.readLine()) == null
1364	348	12	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	(str = $.filePointer.readLine()) == null
1364	348	12	ValueServer.java	getNextReplay	str	String	0	DEF	($ = filePointer.readLine()) == null
1085	157	8	Variance.java	increment	THIS	Variance	0	DEF	$.incMoment
1086	167	12	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 0
1087	169	19	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 1
1088	172	16	Variance.java	getResult	THIS	Variance	1	RET	$.isBiasCorrected
1089	192	8	Variance.java	clear	THIS	Variance	0	DEF	$.incMoment
1090	215	8	Variance.java	evaluate	values	double[]	0	DEF	$ == null
1091	246	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
1091	246	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1091	246	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
1091	246	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
1092	248	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1093	250	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
1094	306	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights,begin, length)
1094	306	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights,begin, length)
1094	306	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $,begin, length)
1094	306	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights,$, length)
1094	306	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights,begin, $)
1095	308	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1096	310	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
1097	392	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
1097	392	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
1097	392	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
1097	392	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
1098	393	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1099	395	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
36251	399	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
36251	399	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
36251	399	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1100	405	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
1101	494	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights, begin, length)
1101	494	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length)
1101	494	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length)
1101	494	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights, $, length)
1101	494	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights, begin, $)
1102	495	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
1103	497	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
36252	501	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
36252	501	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
36252	501	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
36253	508	16	Variance.java	evaluate	THIS	Variance	0	NIL-FOR	i < weights.$.length
36253	508	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < weights.length
36253	508	16	Variance.java	evaluate	weights	double[]	0	NIL-FOR	i < $.length
1104	512	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
248	285	4	Vector3D.java	normalize	s	double	0	DEF	$ == 0
249	309	4	Vector3D.java	orthogonal	threshold	double	0	DEF	$ == 0
250	313	4	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x <= threshold
250	313	4	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x >= -threshold
250	313	4	Vector3D.java	orthogonal	threshold	double	1	RET	x <= $
250	313	4	Vector3D.java	orthogonal	threshold	double	1	RET	x >= -$
251	316	11	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y <= threshold
251	316	11	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y >= -threshold
251	316	11	Vector3D.java	orthogonal	threshold	double	0	RET	y <= $
251	316	11	Vector3D.java	orthogonal	threshold	double	0	RET	y >= -$
252	339	4	Vector3D.java	angle	normProduct	double	0	DEF	$ == 0
253	345	4	Vector3D.java	angle	dot	double	0	RET	$ > threshold
253	345	4	Vector3D.java	angle	dot	double	0	RET	$ < -threshold
253	345	4	Vector3D.java	angle	threshold	double	0	RET	dot > $
253	345	4	Vector3D.java	angle	threshold	double	0	RET	dot < -$
254	348	6	Vector3D.java	angle	dot	double	0	RET	$ >= 0
255	414	4	Vector3D.java	equals	THIS	Vector3D	0	RET	$ == other
255	414	4	Vector3D.java	equals	other	Object	0	RET	this == $
256	418	4	Vector3D.java	equals	other	Object	0	RET	$ == null
257	425	6	Vector3D.java	equals	rhs	Vector3D	0	RET	$.isNaN()
258	447	6	Vector3D.java	hashCode	THIS	Vector3D	0	RET	$.isNaN()
198	240	8	Vector3DFormat.java	format	obj	Object	0	RET	$ instanceof Vector3D
199	259	8	Vector3DFormat.java	parse	parsePosition	ParsePosition	0	DEF	$.getIndex() == 0
200	278	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedPrefix, pos)
200	278	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedPrefix, pos)
200	278	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedPrefix, $)
201	285	8	Vector3DFormat.java	parse	x	Number	0	RET	$ == null
202	294	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSeparator, pos)
202	294	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSeparator, pos)
202	294	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSeparator, $)
203	299	8	Vector3DFormat.java	parse	y	Number	0	RET	$ == null
204	308	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSeparator, pos)
204	308	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSeparator, pos)
204	308	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSeparator, $)
205	313	8	Vector3DFormat.java	parse	z	Number	0	RET	$ == null
206	322	8	Vector3DFormat.java	parse	THIS	Vector3DFormat	0	RET	$.parseFixedstring(source, $.trimmedSuffix, pos)
206	322	8	Vector3DFormat.java	parse	source	String	0	RET	parseFixedstring($, trimmedSuffix, pos)
206	322	8	Vector3DFormat.java	parse	pos	ParsePosition	0	RET	parseFixedstring(source, trimmedSuffix, $)
1115	66	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	DimensionMismatchException	v.$.length != $.sums.$.length
1115	66	8	VectorialCovariance.java	increment	v	double[]	0	DimensionMismatchException	$.length != sums.length
36258	70	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	NIL-FOR	i < v.$.length
36258	70	8	VectorialCovariance.java	increment	i	int	0	NIL-FOR	$ < v.length
36258	70	8	VectorialCovariance.java	increment	v	double[]	0	NIL-FOR	i < $.length
36259	72	12	VectorialCovariance.java	increment	j	int	0	NIL-FOR	$ <= i
36259	72	12	VectorialCovariance.java	increment	i	int	0	NIL-FOR	j <= $
1116	88	8	VectorialCovariance.java	getResult	THIS	VectorialCovariance	0	DEF	$.n > 1
36260	91	12	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	$ < dimension
36260	91	12	VectorialCovariance.java	getResult	dimension	int	0	NIL-FOR	i < $
36261	92	16	VectorialCovariance.java	getResult	j	int	0	NIL-FOR	$ <= i
36261	92	16	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	j <= $
1117	136	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$ == obj
1117	136	8	VectorialCovariance.java	equals	obj	Object	0	RET	this == $
1118	138	8	VectorialCovariance.java	equals	obj	Object	0	RET	$ == null
1119	140	8	VectorialCovariance.java	equals	obj	Object	0	RET	$ instanceof VectorialCovariance
1120	143	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.isBiasCorrected != other.$.isBiasCorrected
1120	143	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	isBiasCorrected != $.isBiasCorrected
1121	145	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.n != other.$.n
1121	145	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	n != $.n
1122	147	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.productsSums, other.$.productsSums)
1122	147	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(productsSums, $.productsSums)
1123	149	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.sums, other.$.sums)
1123	149	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(sums, $.sums)
36264	42	8	VectorialMean.java	VectorialMean	i	int	0	NIL-FOR	$ < dimension
36264	42	8	VectorialMean.java	VectorialMean	dimension	int	0	NIL-FOR	i < $
1139	53	8	VectorialMean.java	increment	THIS	VectorialMean	0	DimensionMismatchException	v.$.length != $.means.$.length
1139	53	8	VectorialMean.java	increment	v	double[]	0	DimensionMismatchException	$.length != means.length
36265	56	8	VectorialMean.java	increment	THIS	VectorialMean	0	NIL-FOR	i < v.$.length
36265	56	8	VectorialMean.java	increment	i	int	0	NIL-FOR	$ < v.length
36265	56	8	VectorialMean.java	increment	v	double[]	0	NIL-FOR	i < $.length
36266	67	8	VectorialMean.java	getResult	THIS	VectorialMean	0	NIL-FOR	i < result.$.length
36266	67	8	VectorialMean.java	getResult	i	int	0	NIL-FOR	$ < result.length
36266	67	8	VectorialMean.java	getResult	result	double[]	0	NIL-FOR	i < $.length
1140	93	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	$ == obj
1140	93	8	VectorialMean.java	equals	obj	Object	0	RET	this == $
1141	95	8	VectorialMean.java	equals	obj	Object	0	RET	$ == null
1142	97	8	VectorialMean.java	equals	obj	Object	0	RET	$ instanceof VectorialMean
1143	100	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	Arrays.equals($.means, other.$.means)
1143	100	8	VectorialMean.java	equals	other	VectorialMean	0	RET	Arrays.equals(means, $.means)
451	62	8	WeibullDistributionImpl.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
452	101	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ < 0.0
452	101	8	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ > 1.0
453	104	15	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
454	106	16	WeibullDistributionImpl.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
455	119	8	WeibullDistributionImpl.java	setShape	alpha	double	0	DEF	$ <= 0.0
456	132	8	WeibullDistributionImpl.java	setScale	beta	double	0	DEF	$ <= 0.0
457	75	8	ZipfDistributionImpl.java	setNumberOfElements	n	int	0	DEF	$ <= 0
458	102	8	ZipfDistributionImpl.java	setExponent	s	double	0	DEF	$ <= 0.0
459	117	8	ZipfDistributionImpl.java	probability	THIS	ZipfDistributionImpl	0	RET	x > $.getNumberOfElements()
459	117	8	ZipfDistributionImpl.java	probability	x	int	0	RET	$ <= 0
459	117	8	ZipfDistributionImpl.java	probability	x	int	0	RET	$ > getNumberOfElements()
460	133	8	ZipfDistributionImpl.java	cumulativeProbability	x	int	1	RET	$ <= 0
461	135	15	ZipfDistributionImpl.java	cumulativeProbability	THIS	ZipfDistributionImpl	0	RET	x >= $.getNumberOfElements()
461	135	15	ZipfDistributionImpl.java	cumulativeProbability	x	int	0	RET	$ >= getNumberOfElements()
35272	181	8	ZipfDistributionImpl.java	generalizedHarmonic	k	int	0	NIL-FOR	$ > 0
