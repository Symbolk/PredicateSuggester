id	line	column	filename	methodname	varname	vartype	else	return	right
520	62	8	AVLTree.java	insert	element	T	0	DEF	$ != null
521	63	12	AVLTree.java	insert	THIS	AVLTree	1	DEF	$.top == null
522	82	8	AVLTree.java	delete	element	T	0	RET	$ != null
22799	83	12	AVLTree.java	delete	node	Node	0	NIL-FOR	$ != null
523	86	16	AVLTree.java	delete	THIS	AVLTree	1	RET	node.$.element == element
523	86	16	AVLTree.java	delete	node	Node	1	RET	$.element == element
523	86	16	AVLTree.java	delete	element	T	1	RET	node.element == $
524	89	23	AVLTree.java	delete	THIS	AVLTree	0	RET	node.$.element.compareTo(element) > 0
524	89	23	AVLTree.java	delete	node	Node	0	RET	$.element.compareTo(element) > 0
524	89	23	AVLTree.java	delete	element	T	0	RET	node.element.compareTo($) > 0
22800	153	8	AVLTree.java	getNotSmaller	node	Node	0	NIL-FOR	$ != null
525	154	12	AVLTree.java	getNotSmaller	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) < 0
525	154	12	AVLTree.java	getNotSmaller	node	Node	1	RET	$.element.compareTo(reference) < 0
525	154	12	AVLTree.java	getNotSmaller	reference	T	1	RET	node.element.compareTo($) < 0
526	155	16	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.right == null
526	155	16	AVLTree.java	getNotSmaller	node	Node	0	RET	$.right == null
527	161	16	AVLTree.java	getNotSmaller	THIS	AVLTree	0	RET	node.$.left == null
527	161	16	AVLTree.java	getNotSmaller	node	Node	0	RET	$.left == null
22801	184	8	AVLTree.java	getNotLarger	node	Node	0	NIL-FOR	$ != null
528	185	12	AVLTree.java	getNotLarger	THIS	AVLTree	1	RET	node.$.element.compareTo(reference) > 0
528	185	12	AVLTree.java	getNotLarger	node	Node	1	RET	$.element.compareTo(reference) > 0
528	185	12	AVLTree.java	getNotLarger	reference	T	1	RET	node.element.compareTo($) > 0
529	186	16	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.left == null
529	186	16	AVLTree.java	getNotLarger	node	Node	0	RET	$.left == null
530	192	16	AVLTree.java	getNotLarger	THIS	AVLTree	0	RET	node.$.right == null
530	192	16	AVLTree.java	getNotLarger	node	Node	0	RET	$.right == null
1312	76	8	AbstractFieldMatrix.java	AbstractFieldMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ <= 0
1313	80	8	AbstractFieldMatrix.java	AbstractFieldMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ <= 0
1314	97	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NullArgumentException	$ == null
1315	100	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1315	100	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$.length == 0
1316	103	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d[0].length == 0
1316	103	8	AbstractFieldMatrix.java	extractField	d	T[][]	0	NoDataException	$[0].length == 0
1317	118	8	AbstractFieldMatrix.java	extractField	THIS	AbstractFieldMatrix	0	NoDataException	d.$.length == 0
1317	118	8	AbstractFieldMatrix.java	extractField	d	T[]	0	NoDataException	$.length == 0
1318	139	8	AbstractFieldMatrix.java	buildArray	columns	int	0	RET	$ < 0
23234	145	8	AbstractFieldMatrix.java	buildArray	THIS	AbstractFieldMatrix	0	NIL-FOR	i < array.$.length
23234	145	8	AbstractFieldMatrix.java	buildArray	i	int	0	NIL-FOR	$ < array.length
23234	145	8	AbstractFieldMatrix.java	buildArray	array	T[][]	0	NIL-FOR	i < $.length
23235	187	8	AbstractFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
23235	187	8	AbstractFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
23236	188	12	AbstractFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
23236	188	12	AbstractFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
23237	204	8	AbstractFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
23237	204	8	AbstractFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
23238	205	12	AbstractFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
23238	205	12	AbstractFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
23239	219	8	AbstractFieldMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
23239	219	8	AbstractFieldMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
23240	220	12	AbstractFieldMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
23240	220	12	AbstractFieldMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
23241	233	8	AbstractFieldMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
23241	233	8	AbstractFieldMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
23242	234	12	AbstractFieldMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
23242	234	12	AbstractFieldMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
23243	251	8	AbstractFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
23243	251	8	AbstractFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
23244	252	12	AbstractFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
23244	252	12	AbstractFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
23245	254	16	AbstractFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
23245	254	16	AbstractFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1319	271	8	AbstractFieldMatrix.java	power	p	int	0	IllegalArgumentException	$ < 0
1320	275	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NonSquareMatrixException	$.isSquare()
1321	279	8	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 0
1322	283	8	AbstractFieldMatrix.java	power	p	int	0	RET	$ == 1
23246	300	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
23246	300	8	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
23246	300	8	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1323	301	12	AbstractFieldMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1323	301	12	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
23247	312	8	AbstractFieldMatrix.java	power	THIS	AbstractFieldMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
23247	312	8	AbstractFieldMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
23247	312	8	AbstractFieldMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
23248	331	8	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	i < data.$.length
23248	331	8	AbstractFieldMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
23248	331	8	AbstractFieldMatrix.java	getData	data	T[][]	0	NIL-FOR	i < $.length
23249	333	12	AbstractFieldMatrix.java	getData	THIS	AbstractFieldMatrix	0	NIL-FOR	j < dataI.$.length
23249	333	12	AbstractFieldMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
23249	333	12	AbstractFieldMatrix.java	getData	dataI	T[]	0	NIL-FOR	j < $.length
23250	348	8	AbstractFieldMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
23250	348	8	AbstractFieldMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
23251	349	12	AbstractFieldMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
23251	349	12	AbstractFieldMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1324	390	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1324	390	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1324	390	8	AbstractFieldMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1324	390	8	AbstractFieldMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1324	390	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
1324	390	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
1325	429	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1325	429	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	destination[0].length < selectedColumns.$.length
1325	429	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1325	429	8	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	MatrixDimensionMismatchException	destination[0].length < $.length
1325	429	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
1325	429	8	AbstractFieldMatrix.java	copySubMatrix	destination	T[][]	0	MatrixDimensionMismatchException	$[0].length < selectedColumns.length
23252	438	8	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	i < selectedRows.$.length
23252	438	8	AbstractFieldMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
23252	438	8	AbstractFieldMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
23253	440	12	AbstractFieldMatrix.java	copySubMatrix	THIS	AbstractFieldMatrix	0	NIL-FOR	j < selectedColumns.$.length
23253	440	12	AbstractFieldMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
23253	440	12	AbstractFieldMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1326	449	8	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	NullArgumentException	$ == null
1327	453	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1328	458	8	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
23254	462	8	AbstractFieldMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
23254	462	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1329	463	12	AbstractFieldMatrix.java	setSubMatrix	THIS	AbstractFieldMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1329	463	12	AbstractFieldMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1329	463	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1329	463	12	AbstractFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[r].length != nCols
23255	473	8	AbstractFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
23255	473	8	AbstractFieldMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
23256	474	12	AbstractFieldMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
23256	474	12	AbstractFieldMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
23257	485	8	AbstractFieldMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
23257	485	8	AbstractFieldMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1330	497	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1330	497	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
1330	497	8	AbstractFieldMatrix.java	setRowMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
23258	503	8	AbstractFieldMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
23258	503	8	AbstractFieldMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
23259	515	8	AbstractFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
23259	515	8	AbstractFieldMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1331	527	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1331	527	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1331	527	8	AbstractFieldMatrix.java	setColumnMatrix	matrix	FieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
23260	533	8	AbstractFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
23260	533	8	AbstractFieldMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1332	548	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1332	548	8	AbstractFieldMatrix.java	setRowVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nCols
23261	552	8	AbstractFieldMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
23261	552	8	AbstractFieldMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1333	567	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1333	567	8	AbstractFieldMatrix.java	setColumnVector	vector	FieldVector<T>	0	MatrixDimensionMismatchException	$.getDimension() != nRows
23262	571	8	AbstractFieldMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
23262	571	8	AbstractFieldMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
23263	582	8	AbstractFieldMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
23263	582	8	AbstractFieldMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1334	594	8	AbstractFieldMatrix.java	setRow	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1334	594	8	AbstractFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1334	594	8	AbstractFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
23264	597	8	AbstractFieldMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
23264	597	8	AbstractFieldMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
23265	608	8	AbstractFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
23265	608	8	AbstractFieldMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1335	620	8	AbstractFieldMatrix.java	setColumn	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1335	620	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1335	620	8	AbstractFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
23266	623	8	AbstractFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
23266	623	8	AbstractFieldMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1336	671	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1336	671	8	AbstractFieldMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
23267	675	8	AbstractFieldMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
23267	675	8	AbstractFieldMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1337	686	8	AbstractFieldMatrix.java	operate	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1337	686	8	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1337	686	8	AbstractFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
23268	691	8	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
23268	691	8	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
23269	693	12	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
23269	693	12	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1338	709	12	AbstractFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1338	709	12	AbstractFieldMatrix.java	operate	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nCols
23270	714	12	AbstractFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
23270	714	12	AbstractFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
23271	716	16	AbstractFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
23271	716	16	AbstractFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1339	731	8	AbstractFieldMatrix.java	preMultiply	THIS	AbstractFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1339	731	8	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1339	731	8	AbstractFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
23272	736	8	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
23272	736	8	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
23273	738	12	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
23273	738	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1340	754	12	AbstractFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1340	754	12	AbstractFieldMatrix.java	preMultiply	v	FieldVector<T>	0	DimensionMismatchException	$.getDimension() != nRows
23274	759	12	AbstractFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
23274	759	12	AbstractFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
23275	761	16	AbstractFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
23275	761	16	AbstractFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
23276	776	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
23276	776	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
23277	777	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
23277	777	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
23278	791	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
23278	791	8	AbstractFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
23279	792	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
23279	792	12	AbstractFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
23280	806	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
23280	806	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
23281	807	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
23281	807	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
23282	823	8	AbstractFieldMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
23282	823	8	AbstractFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
23283	824	12	AbstractFieldMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
23283	824	12	AbstractFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
23284	836	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
23284	836	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
23285	837	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
23285	837	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
23286	851	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
23286	851	8	AbstractFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
23287	852	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
23287	852	12	AbstractFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
23288	866	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
23288	866	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
23289	867	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
23289	867	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
23290	883	8	AbstractFieldMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
23290	883	8	AbstractFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
23291	884	12	AbstractFieldMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
23291	884	12	AbstractFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
23292	928	8	AbstractFieldMatrix.java	toString	i	int	0	NIL-FOR	$ < nRows
23292	928	8	AbstractFieldMatrix.java	toString	nRows	int	0	NIL-FOR	i < $
1341	929	12	AbstractFieldMatrix.java	toString	i	int	0	DEF	$ > 0
23293	933	12	AbstractFieldMatrix.java	toString	j	int	0	NIL-FOR	$ < nCols
23293	933	12	AbstractFieldMatrix.java	toString	nCols	int	0	NIL-FOR	j < $
1342	934	16	AbstractFieldMatrix.java	toString	j	int	0	DEF	$ > 0
1343	956	8	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	object == $
1343	956	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ == this
1344	959	8	AbstractFieldMatrix.java	equals	object	Object	0	RET	$ instanceof FieldMatrix<?> == false
1345	965	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getColumnDimension() != nCols
1345	965	8	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	$.getRowDimension() != nRows
1345	965	8	AbstractFieldMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1345	965	8	AbstractFieldMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
23294	968	8	AbstractFieldMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
23294	968	8	AbstractFieldMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
23295	969	12	AbstractFieldMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
23295	969	12	AbstractFieldMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1346	970	16	AbstractFieldMatrix.java	equals	THIS	AbstractFieldMatrix	0	RET	$.getEntry(row, col).equals(m.getEntry(row, col))
1346	970	16	AbstractFieldMatrix.java	equals	col	int	0	RET	getEntry(row, $).equals(m.getEntry(row, $))
1346	970	16	AbstractFieldMatrix.java	equals	row	int	0	RET	getEntry($, col).equals(m.getEntry($, col))
1346	970	16	AbstractFieldMatrix.java	equals	m	FieldMatrix<?>	0	RET	getEntry(row, col).equals($.getEntry(row, col))
23296	990	8	AbstractFieldMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
23296	990	8	AbstractFieldMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
23297	991	12	AbstractFieldMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
23297	991	12	AbstractFieldMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
1347	1005	8	AbstractFieldMatrix.java	checkRowIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1347	1005	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= getRowDimension()
1347	1005	8	AbstractFieldMatrix.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1348	1018	8	AbstractFieldMatrix.java	checkColumnIndex	THIS	AbstractFieldMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1348	1018	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= getColumnDimension()
1348	1018	8	AbstractFieldMatrix.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1349	1040	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1349	1040	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1350	1047	8	AbstractFieldMatrix.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1350	1047	8	AbstractFieldMatrix.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1351	1064	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1351	1064	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1352	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedColumns.$.length == 0
1352	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	THIS	AbstractFieldMatrix	0	NoDataException	selectedRows.$.length == 0
1352	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1352	1068	8	AbstractFieldMatrix.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1353	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1353	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1353	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1353	1089	8	AbstractFieldMatrix.java	checkAdditionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1354	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != m.getRowDimension()
1354	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	THIS	AbstractFieldMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != m.getColumnDimension()
1354	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getRowDimension() != $.getRowDimension()
1354	1104	8	AbstractFieldMatrix.java	checkSubtractionCompatible	m	FieldMatrix<T>	0	MatrixDimensionMismatchException	getColumnDimension() != $.getColumnDimension()
1355	1119	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	THIS	AbstractFieldMatrix	0	DimensionMismatchException	$.getColumnDimension() != m.getRowDimension()
1355	1119	8	AbstractFieldMatrix.java	checkMultiplicationCompatible	m	FieldMatrix<T>	0	DimensionMismatchException	getColumnDimension() != $.getRowDimension()
884	120	8	AbstractFormat.java	setDenominatorFormat	format	NumberFormat	0	NullArgumentException	$ == null
885	132	8	AbstractFormat.java	setNumeratorFormat	format	NumberFormat	0	NullArgumentException	$ == null
886	162	9	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
886	162	9	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
22832	164	13	AbstractFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
22832	164	13	AbstractFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
22832	164	13	AbstractFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
887	169	13	AbstractFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
887	169	13	AbstractFormat.java	parseNextCharacter	n	int	0	DEF	index < $
935	74	8	AbstractIntegerDistribution.java	cumulativeProbability	x0	int	0	NumberIsTooLargeException	x1 < $
935	74	8	AbstractIntegerDistribution.java	cumulativeProbability	x1	int	0	NumberIsTooLargeException	$ < x0
936	93	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
936	93	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
937	98	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
938	101	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	1	RET	$ == Integer.MIN_VALUE
939	102	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	THIS	AbstractIntegerDistribution	0	RET	$.checkedCumulativeProbability(lower) >= p
939	102	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	0	RET	checkedCumulativeProbability($) >= p
939	102	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	checkedCumulativeProbability(lower) >= $
940	111	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
941	121	8	AbstractIntegerDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	0	DEF	$
942	124	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	tmp	double	0	DEF	$ > lower
942	124	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	lower	int	0	DEF	tmp > $
943	129	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	tmp	double	0	DEF	$ < upper
943	129	12	AbstractIntegerDistribution.java	inverseCumulativeProbability	upper	int	0	DEF	tmp < $
22834	150	8	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	lower	int	0	NIL-WHILE	$ + 1 < upper
22834	150	8	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	upper	int	0	NIL-WHILE	lower + 1 < $
944	152	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	xm	int	0	DEF	$ > upper
944	152	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	xm	int	0	DEF	$ < lower
944	152	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	lower	int	0	DEF	xm < $
944	152	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	upper	int	0	DEF	xm > $
945	162	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	pm	double	1	DEF	$ >= p
945	162	12	AbstractIntegerDistribution.java	solveInverseCumulativeProbability	p	double	1	DEF	pm >= $
946	195	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
22835	200	8	AbstractIntegerDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
22835	200	8	AbstractIntegerDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
947	221	8	AbstractIntegerDistribution.java	checkedCumulativeProbability	result	double	0	MathInternalError	Double.isNaN($)
2753	215	8	AbstractIntegrator.java	integrate	THIS	AbstractIntegrator	0	DimensionMismatchException	y0.$.length != equations.getDimension()
2753	215	8	AbstractIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	0	DimensionMismatchException	y0.length != $.getDimension()
2753	215	8	AbstractIntegrator.java	integrate	y0	double[]	0	DimensionMismatchException	$.length != equations.getDimension()
2754	218	8	AbstractIntegrator.java	integrate	THIS	AbstractIntegrator	0	DimensionMismatchException	y.$.length != equations.getDimension()
2754	218	8	AbstractIntegrator.java	integrate	equations	FirstOrderDifferentialEquations	0	DimensionMismatchException	y.length != $.getDimension()
2754	218	8	AbstractIntegrator.java	integrate	y	double[]	0	DimensionMismatchException	$.length != equations.getDimension()
2755	297	12	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.statesInitialized
2756	316	16	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	DEF	$.state.evaluateStep(interpolator)
2756	316	16	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	state.evaluateStep($)
24380	322	12	AbstractIntegrator.java	acceptStep	occuringEvents	SortedSet<EventState>	0	NIL-WHILE	$.isEmpty()
2757	345	16	AbstractIntegrator.java	acceptStep	THIS	AbstractIntegrator	0	RET	$.isLastStep
2758	354	16	AbstractIntegrator.java	acceptStep	currentEvent	EventState	0	RET	$.reset(eventT, eventY)
2758	354	16	AbstractIntegrator.java	acceptStep	eventT	double	0	RET	currentEvent.reset($, eventY)
2758	354	16	AbstractIntegrator.java	acceptStep	eventY	double[]	0	RET	currentEvent.reset(eventT, $)
2759	372	16	AbstractIntegrator.java	acceptStep	currentEvent	EventState	0	DEF	$.evaluateStep(interpolator)
2759	372	16	AbstractIntegrator.java	acceptStep	interpolator	AbstractStepInterpolator	0	DEF	currentEvent.evaluateStep($)
2760	407	8	AbstractIntegrator.java	sanityChecks	threshold	double	0	NumberIsTooSmallException	dt <= $
2760	407	8	AbstractIntegrator.java	sanityChecks	dt	double	0	NumberIsTooSmallException	$ <= threshold
1733	113	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	$.weightedResidualJacobian.$.length != $.rows
23739	119	8	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
23739	119	8	AbstractLeastSquaresOptimizer.java	updateJacobian	i	int	0	NIL-FOR	$ < rows
23740	122	12	AbstractLeastSquaresOptimizer.java	updateJacobian	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
23740	122	12	AbstractLeastSquaresOptimizer.java	updateJacobian	j	int	0	NIL-FOR	$ < cols
1734	138	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	DimensionMismatchException	$.objective.$.length != $.rows
23741	146	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.rows
23741	146	8	AbstractLeastSquaresOptimizer.java	updateResidualsAndCost	i	int	0	NIL-FOR	$ < rows
23742	212	8	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < $.cols
23742	212	8	AbstractLeastSquaresOptimizer.java	getCovariances	i	int	0	NIL-FOR	$ < cols
23743	213	12	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	j < $.cols
23743	213	12	AbstractLeastSquaresOptimizer.java	getCovariances	j	int	0	NIL-FOR	$ < cols
23744	215	16	AbstractLeastSquaresOptimizer.java	getCovariances	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	k < $.rows
23744	215	16	AbstractLeastSquaresOptimizer.java	getCovariances	k	int	0	NIL-FOR	$ < rows
1735	259	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NumberIsTooSmallException	$.rows <= $.cols
23745	266	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < errors.$.length
23745	266	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	i	int	0	NIL-FOR	$ < errors.length
23745	266	8	AbstractLeastSquaresOptimizer.java	guessParametersErrors	errors	double[]	0	NIL-FOR	i < $.length
23746	288	8	AbstractLeastSquaresOptimizer.java	getSigma	THIS	AbstractLeastSquaresOptimizer	0	NIL-FOR	i < sig.$.length
23746	288	8	AbstractLeastSquaresOptimizer.java	getSigma	i	int	0	NIL-FOR	$ < sig.length
23746	288	8	AbstractLeastSquaresOptimizer.java	getSigma	sig	double[]	0	NIL-FOR	i < $.length
1666	127	8	AbstractLinearOptimizer.java	incrementIterationsCounter	THIS	AbstractLinearOptimizer	0	MaxCountExceededException	++$.iterations > $.maxIterations
2357	116	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	NullArgumentException	$ == null
2358	119	8	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	data.$.length != nobs * (nvars + 1)
2358	119	8	AbstractMultipleLinearRegression.java	newSampleData	data	double[]	0	DimensionMismatchException	$.length != nobs * (nvars + 1)
2358	119	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	DimensionMismatchException	data.length != $ * (nvars + 1)
2358	119	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	DimensionMismatchException	data.length != nobs * ($ + 1)
2359	122	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NumberIsTooSmallException	$ <= nvars
2359	122	8	AbstractMultipleLinearRegression.java	newSampleData	nvars	int	0	NumberIsTooSmallException	nobs <= $
24137	129	8	AbstractMultipleLinearRegression.java	newSampleData	i	int	0	NIL-FOR	$ < nobs
24137	129	8	AbstractMultipleLinearRegression.java	newSampleData	nobs	int	0	NIL-FOR	i < $
2360	131	12	AbstractMultipleLinearRegression.java	newSampleData	THIS	AbstractMultipleLinearRegression	0	DEF	$.noIntercept
24138	134	12	AbstractMultipleLinearRegression.java	newSampleData	j	int	0	NIL-FOR	$ < cols
24138	134	12	AbstractMultipleLinearRegression.java	newSampleData	cols	int	0	NIL-FOR	j < $
2361	150	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	NullArgumentException	$ == null
2362	153	8	AbstractMultipleLinearRegression.java	newYSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	y.$.length == 0
2362	153	8	AbstractMultipleLinearRegression.java	newYSampleData	y	double[]	0	NoDataException	$.length == 0
2363	185	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NullArgumentException	$ == null
2364	188	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	x.$.length == 0
2364	188	8	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NoDataException	$.length == 0
2365	191	8	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	1	DEF	$.noIntercept
24139	196	12	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	NIL-FOR	i < x.$.length
24139	196	12	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	NIL-FOR	$ < x.length
24139	196	12	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	NIL-FOR	i < $.length
2366	197	16	AbstractMultipleLinearRegression.java	newXSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x[i].length != nVars
2366	197	16	AbstractMultipleLinearRegression.java	newXSampleData	i	int	0	DimensionMismatchException	x[$].length != nVars
2366	197	16	AbstractMultipleLinearRegression.java	newXSampleData	nVars	int	0	DimensionMismatchException	x[i].length != $
2366	197	16	AbstractMultipleLinearRegression.java	newXSampleData	x	double[][]	0	DimensionMismatchException	$[i].length != nVars
2367	226	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	NullArgumentException	$ == null
2367	226	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	NullArgumentException	$ == null
2368	229	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x.$.length != y.$.length
2368	229	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	DimensionMismatchException	$.length != y.length
2368	229	8	AbstractMultipleLinearRegression.java	validateSampleData	y	double[]	0	DimensionMismatchException	x.length != $.length
2369	232	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	NoDataException	x.$.length == 0
2369	232	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	NoDataException	$.length == 0
2370	235	8	AbstractMultipleLinearRegression.java	validateSampleData	THIS	AbstractMultipleLinearRegression	0	MathIllegalArgumentException	x[0].length + 1 > x.$.length
2370	235	8	AbstractMultipleLinearRegression.java	validateSampleData	x	double[][]	0	MathIllegalArgumentException	$[0].length + 1 > $.length
2371	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	DimensionMismatchException	x.$.length != covariance.$.length
2371	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	x	double[][]	0	DimensionMismatchException	$.length != covariance.length
2371	253	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	DimensionMismatchException	x.length != $.length
2372	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	NonSquareMatrixException	covariance.$.length > 0
2372	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	THIS	AbstractMultipleLinearRegression	0	NonSquareMatrixException	covariance.$.length != covariance[0].length
2372	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	NonSquareMatrixException	$.length > 0
2372	256	8	AbstractMultipleLinearRegression.java	validateCovarianceData	covariance	double[][]	0	NonSquareMatrixException	$.length != $[0].length
24140	293	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	i	int	0	NIL-FOR	$ < length
24140	293	8	AbstractMultipleLinearRegression.java	estimateRegressionParametersStandardErrors	length	int	0	NIL-FOR	i < $
2800	62	12	AbstractParameterizable.java	isSupported	THIS	AbstractParameterizable	0	RET	$.supportedName.equals(name)
2800	62	12	AbstractParameterizable.java	isSupported	name	String	0	RET	supportedName.equals($)
2801	76	8	AbstractParameterizable.java	complainIfNotSupported	THIS	AbstractParameterizable	0	MathIllegalArgumentException	$.isSupported(name)
2801	76	8	AbstractParameterizable.java	complainIfNotSupported	name	String	0	MathIllegalArgumentException	isSupported($)
24167	108	8	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	NIL-WHILE	bytesOut < bytes.$.length
24167	108	8	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	NIL-WHILE	$ < bytes.length
24167	108	8	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	bytesOut < $.length
24168	110	10	AbstractRandomGenerator.java	nextBytes	i	int	0	NIL-FOR	$ < 3
2442	111	14	AbstractRandomGenerator.java	nextBytes	i	int	0	DEF	$ > 0
2443	115	14	AbstractRandomGenerator.java	nextBytes	THIS	AbstractRandomGenerator	0	RET	bytesOut == bytes.$.length
2443	115	14	AbstractRandomGenerator.java	nextBytes	bytesOut	int	0	RET	$ == bytes.length
2443	115	14	AbstractRandomGenerator.java	nextBytes	bytes	byte[]	0	RET	bytesOut == $.length
2444	157	8	AbstractRandomGenerator.java	nextInt	n	int	0	NotStrictlyPositiveException	$ <= 0
2445	253	8	AbstractRandomGenerator.java	nextGaussian	THIS	AbstractRandomGenerator	0	RET	Double.isNaN($.cachedNormalDeviate)
24169	261	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	NIL-WHILE	$ >=1
2446	266	8	AbstractRandomGenerator.java	nextGaussian	s	double	0	DEF	$ != 0
1076	80	8	AbstractRealDistribution.java	cumulativeProbability	x0	double	0	NumberIsTooLargeException	$ > x1
1076	80	8	AbstractRealDistribution.java	cumulativeProbability	x1	double	0	NumberIsTooLargeException	x0 > $
1077	125	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1.0
1077	125	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0.0
1078	130	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0.0
1079	135	8	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1.0
1080	145	8	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	DEF	$ == Double.NEGATIVE_INFINITY
1081	146	12	AbstractRealDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	1	DEF	$
22853	150	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	NIL-WHILE	$.cumulativeProbability(lowerBound) >= p
22853	150	16	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	NIL-WHILE	cumulativeProbability($) >= p
22853	150	16	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumulativeProbability(lowerBound) >= $
1082	156	8	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	DEF	$ == Double.POSITIVE_INFINITY
1083	157	12	AbstractRealDistribution.java	inverseCumulativeProbability	chebyshevApplies	boolean	1	DEF	$
22854	161	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	NIL-WHILE	$.cumulativeProbability(upperBound) < p
22854	161	16	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	NIL-WHILE	cumulativeProbability($) < p
22854	161	16	AbstractRealDistribution.java	inverseCumulativeProbability	p	double	0	NIL-WHILE	cumulativeProbability(upperBound) < $
1084	179	8	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	$.isSupportConnected()
1085	182	12	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	x - dx >= $.getSupportLowerBound()
1085	182	12	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	RET	x - $ >= getSupportLowerBound()
1085	182	12	AbstractRealDistribution.java	inverseCumulativeProbability	x	double	0	RET	$ - dx >= getSupportLowerBound()
1086	184	16	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	0	RET	$.cumulativeProbability(x - dx) == px
1086	184	16	AbstractRealDistribution.java	inverseCumulativeProbability	px	double	0	RET	cumulativeProbability(x - dx) == $
1086	184	16	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	RET	cumulativeProbability(x - $) == px
1086	184	16	AbstractRealDistribution.java	inverseCumulativeProbability	x	double	0	RET	cumulativeProbability($ - dx) == px
22855	186	20	AbstractRealDistribution.java	inverseCumulativeProbability	dx	double	0	NIL-WHILE	upperBound - lowerBound > $
22855	186	20	AbstractRealDistribution.java	inverseCumulativeProbability	lowerBound	double	0	NIL-WHILE	upperBound - $ > dx
22855	186	20	AbstractRealDistribution.java	inverseCumulativeProbability	upperBound	double	0	NIL-WHILE	$ - lowerBound > dx
1087	188	24	AbstractRealDistribution.java	inverseCumulativeProbability	THIS	AbstractRealDistribution	1	DEF	$.cumulativeProbability(midPoint) < px
1087	188	24	AbstractRealDistribution.java	inverseCumulativeProbability	midPoint	double	1	DEF	cumulativeProbability($) < px
1087	188	24	AbstractRealDistribution.java	inverseCumulativeProbability	px	double	1	DEF	cumulativeProbability(midPoint) < $
1088	237	8	AbstractRealDistribution.java	sample	sampleSize	int	0	NotStrictlyPositiveException	$ <= 0
22856	242	8	AbstractRealDistribution.java	sample	i	int	0	NIL-FOR	$ < sampleSize
22856	242	8	AbstractRealDistribution.java	sample	sampleSize	int	0	NIL-FOR	i < $
1197	62	8	AbstractRealMatrix.java	AbstractRealMatrix	rowDimension	int	0	NotStrictlyPositiveException	$ < 1
1198	65	8	AbstractRealMatrix.java	AbstractRealMatrix	columnDimension	int	0	NotStrictlyPositiveException	$ < 1
23058	84	8	AbstractRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
23058	84	8	AbstractRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
23059	85	12	AbstractRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
23059	85	12	AbstractRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
23060	101	8	AbstractRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
23060	101	8	AbstractRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
23061	102	12	AbstractRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
23061	102	12	AbstractRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
23062	115	8	AbstractRealMatrix.java	scalarAdd	row	int	0	NIL-FOR	$ < rowCount
23062	115	8	AbstractRealMatrix.java	scalarAdd	rowCount	int	0	NIL-FOR	row < $
23063	116	12	AbstractRealMatrix.java	scalarAdd	col	int	0	NIL-FOR	$ < columnCount
23063	116	12	AbstractRealMatrix.java	scalarAdd	columnCount	int	0	NIL-FOR	col < $
23064	129	8	AbstractRealMatrix.java	scalarMultiply	row	int	0	NIL-FOR	$ < rowCount
23064	129	8	AbstractRealMatrix.java	scalarMultiply	rowCount	int	0	NIL-FOR	row < $
23065	130	12	AbstractRealMatrix.java	scalarMultiply	col	int	0	NIL-FOR	$ < columnCount
23065	130	12	AbstractRealMatrix.java	scalarMultiply	columnCount	int	0	NIL-FOR	col < $
23066	147	8	AbstractRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
23066	147	8	AbstractRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
23067	148	12	AbstractRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
23067	148	12	AbstractRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
23068	150	16	AbstractRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
23068	150	16	AbstractRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1199	167	8	AbstractRealMatrix.java	power	p	int	0	IllegalArgumentException	$ < 0
1200	171	8	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NonSquareMatrixException	$.isSquare()
1201	175	8	AbstractRealMatrix.java	power	p	int	0	RET	$ == 0
1202	179	8	AbstractRealMatrix.java	power	p	int	0	RET	$ == 1
23069	196	8	AbstractRealMatrix.java	power	THIS	AbstractRealMatrix	0	NIL-FOR	i < binaryRepresentation.$.length
23069	196	8	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ < binaryRepresentation.length
23069	196	8	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	NIL-FOR	i < $.length
1203	197	12	AbstractRealMatrix.java	power	i	int	0	DEF	binaryRepresentation[$] == '1'
1203	197	12	AbstractRealMatrix.java	power	binaryRepresentation	char[]	0	DEF	$[i] == '1'
1204	202	16	AbstractRealMatrix.java	power	maxI	int	0	DEF	$ == -1
23070	211	8	AbstractRealMatrix.java	power	i	int	0	NIL-FOR	$ <= maxI
23070	211	8	AbstractRealMatrix.java	power	maxI	int	0	NIL-FOR	i <= $
23071	228	8	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	i < data.$.length
23071	228	8	AbstractRealMatrix.java	getData	i	int	0	NIL-FOR	$ < data.length
23071	228	8	AbstractRealMatrix.java	getData	data	double[][]	0	NIL-FOR	i < $.length
23072	230	12	AbstractRealMatrix.java	getData	THIS	AbstractRealMatrix	0	NIL-FOR	j < dataI.$.length
23072	230	12	AbstractRealMatrix.java	getData	j	int	0	NIL-FOR	$ < dataI.length
23072	230	12	AbstractRealMatrix.java	getData	dataI	double[]	0	NIL-FOR	j < $.length
23073	309	8	AbstractRealMatrix.java	getSubMatrix	i	int	0	NIL-FOR	$ <= endRow
23073	309	8	AbstractRealMatrix.java	getSubMatrix	endRow	int	0	NIL-FOR	i <= $
23074	310	12	AbstractRealMatrix.java	getSubMatrix	j	int	0	NIL-FOR	$ <= endColumn
23074	310	12	AbstractRealMatrix.java	getSubMatrix	endColumn	int	0	NIL-FOR	j <= $
1205	347	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < rowsCount
1205	347	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < columnsCount
1205	347	8	AbstractRealMatrix.java	copySubMatrix	rowsCount	int	0	MatrixDimensionMismatchException	destination.length < $
1205	347	8	AbstractRealMatrix.java	copySubMatrix	columnsCount	int	0	MatrixDimensionMismatchException	destination[0].length < $
1205	347	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < rowsCount
1205	347	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < columnsCount
1206	383	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination[0].length < selectedColumns.$.length
1206	383	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	destination.$.length < selectedRows.$.length
1206	383	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	MatrixDimensionMismatchException	destination.length < $.length
1206	383	8	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	MatrixDimensionMismatchException	destination[0].length < $.length
1206	383	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$[0].length < selectedColumns.length
1206	383	8	AbstractRealMatrix.java	copySubMatrix	destination	double[][]	0	MatrixDimensionMismatchException	$.length < selectedRows.length
23075	390	8	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	i < selectedRows.$.length
23075	390	8	AbstractRealMatrix.java	copySubMatrix	i	int	0	NIL-FOR	$ < selectedRows.length
23075	390	8	AbstractRealMatrix.java	copySubMatrix	selectedRows	int[]	0	NIL-FOR	i < $.length
23076	392	12	AbstractRealMatrix.java	copySubMatrix	THIS	AbstractRealMatrix	0	NIL-FOR	j < selectedColumns.$.length
23076	392	12	AbstractRealMatrix.java	copySubMatrix	j	int	0	NIL-FOR	$ < selectedColumns.length
23076	392	12	AbstractRealMatrix.java	copySubMatrix	selectedColumns	int[]	0	NIL-FOR	j < $.length
1207	403	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1208	408	8	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
23077	412	8	AbstractRealMatrix.java	setSubMatrix	r	int	0	NIL-FOR	$ < nRows
23077	412	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	r < $
1209	413	12	AbstractRealMatrix.java	setSubMatrix	THIS	AbstractRealMatrix	0	DimensionMismatchException	subMatrix[r].length != nCols
1209	413	12	AbstractRealMatrix.java	setSubMatrix	r	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1209	413	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[r].length != $
1209	413	12	AbstractRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[r].length != nCols
23078	423	8	AbstractRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < nRows
23078	423	8	AbstractRealMatrix.java	setSubMatrix	nRows	int	0	NIL-FOR	i < $
23079	424	12	AbstractRealMatrix.java	setSubMatrix	j	int	0	NIL-FOR	$ < nCols
23079	424	12	AbstractRealMatrix.java	setSubMatrix	nCols	int	0	NIL-FOR	j < $
23080	435	8	AbstractRealMatrix.java	getRowMatrix	i	int	0	NIL-FOR	$ < nCols
23080	435	8	AbstractRealMatrix.java	getRowMatrix	nCols	int	0	NIL-FOR	i < $
1210	446	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1210	446	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
1210	446	8	AbstractRealMatrix.java	setRowMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
23081	452	8	AbstractRealMatrix.java	setRowMatrix	i	int	0	NIL-FOR	$ < nCols
23081	452	8	AbstractRealMatrix.java	setRowMatrix	nCols	int	0	NIL-FOR	i < $
23082	462	8	AbstractRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < nRows
23082	462	8	AbstractRealMatrix.java	getColumnMatrix	nRows	int	0	NIL-FOR	i < $
1211	473	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1211	473	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
1211	473	8	AbstractRealMatrix.java	setColumnMatrix	matrix	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
23083	479	8	AbstractRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < nRows
23083	479	8	AbstractRealMatrix.java	setColumnMatrix	nRows	int	0	NIL-FOR	i < $
1212	493	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1212	493	8	AbstractRealMatrix.java	setRowVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nCols
23084	497	8	AbstractRealMatrix.java	setRowVector	i	int	0	NIL-FOR	$ < nCols
23084	497	8	AbstractRealMatrix.java	setRowVector	nCols	int	0	NIL-FOR	i < $
1213	511	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	MatrixDimensionMismatchException	vector.getDimension() != $
1213	511	8	AbstractRealMatrix.java	setColumnVector	vector	RealVector	0	MatrixDimensionMismatchException	$.getDimension() != nRows
23085	515	8	AbstractRealMatrix.java	setColumnVector	i	int	0	NIL-FOR	$ < nRows
23085	515	8	AbstractRealMatrix.java	setColumnVector	nRows	int	0	NIL-FOR	i < $
23086	525	8	AbstractRealMatrix.java	getRow	i	int	0	NIL-FOR	$ < nCols
23086	525	8	AbstractRealMatrix.java	getRow	nCols	int	0	NIL-FOR	i < $
1214	536	8	AbstractRealMatrix.java	setRow	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1214	536	8	AbstractRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1214	536	8	AbstractRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
23087	539	8	AbstractRealMatrix.java	setRow	i	int	0	NIL-FOR	$ < nCols
23087	539	8	AbstractRealMatrix.java	setRow	nCols	int	0	NIL-FOR	i < $
23088	549	8	AbstractRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < nRows
23088	549	8	AbstractRealMatrix.java	getColumn	nRows	int	0	NIL-FOR	i < $
1215	560	8	AbstractRealMatrix.java	setColumn	THIS	AbstractRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1215	560	8	AbstractRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1215	560	8	AbstractRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
23089	563	8	AbstractRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < nRows
23089	563	8	AbstractRealMatrix.java	setColumn	nRows	int	0	NIL-FOR	i < $
1216	631	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NonSquareMatrixException	$ != nCols
1216	631	8	AbstractRealMatrix.java	getTrace	nCols	int	0	NonSquareMatrixException	nRows != $
23090	635	8	AbstractRealMatrix.java	getTrace	i	int	0	NIL-FOR	$ < nRows
23090	635	8	AbstractRealMatrix.java	getTrace	nRows	int	0	NIL-FOR	i < $
1217	645	8	AbstractRealMatrix.java	operate	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1217	645	8	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1217	645	8	AbstractRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
23091	650	8	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
23091	650	8	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
23092	652	12	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
23092	652	12	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1218	669	12	AbstractRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.getDimension() != $
1218	669	12	AbstractRealMatrix.java	operate	v	RealVector	0	DimensionMismatchException	$.getDimension() != nCols
23093	674	12	AbstractRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
23093	674	12	AbstractRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
23094	676	16	AbstractRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
23094	676	16	AbstractRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1219	691	8	AbstractRealMatrix.java	preMultiply	THIS	AbstractRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1219	691	8	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1219	691	8	AbstractRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
23095	696	8	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
23095	696	8	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
23096	698	12	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
23096	698	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
1220	715	12	AbstractRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.getDimension() != $
1220	715	12	AbstractRealMatrix.java	preMultiply	v	RealVector	0	DimensionMismatchException	$.getDimension() != nRows
23097	720	12	AbstractRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
23097	720	12	AbstractRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
23098	722	16	AbstractRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
23098	722	16	AbstractRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
23099	737	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
23099	737	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
23100	738	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
23100	738	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
23101	752	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ < rows
23101	752	8	AbstractRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	row < $
23102	753	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ < columns
23102	753	12	AbstractRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	column < $
23103	767	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
23103	767	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
23104	768	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
23104	768	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
23105	784	8	AbstractRealMatrix.java	walkInRowOrder	row	int	0	NIL-FOR	$ <= endRow
23105	784	8	AbstractRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	row <= $
23106	785	12	AbstractRealMatrix.java	walkInRowOrder	column	int	0	NIL-FOR	$ <= endColumn
23106	785	12	AbstractRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	column <= $
23107	797	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
23107	797	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
23108	798	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
23108	798	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
23109	812	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ < columns
23109	812	8	AbstractRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	column < $
23110	813	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ < rows
23110	813	12	AbstractRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	row < $
23111	827	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
23111	827	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
23112	828	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
23112	828	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
23113	844	8	AbstractRealMatrix.java	walkInColumnOrder	column	int	0	NIL-FOR	$ <= endColumn
23113	844	8	AbstractRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	column <= $
23114	845	12	AbstractRealMatrix.java	walkInColumnOrder	row	int	0	NIL-FOR	$ <= endRow
23114	845	12	AbstractRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	row <= $
1221	900	8	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	object == $
1221	900	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ == this
1222	903	8	AbstractRealMatrix.java	equals	object	Object	0	RET	$ instanceof RealMatrix == false
1223	909	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getRowDimension() != nRows
1223	909	8	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	$.getColumnDimension() != nCols
1223	909	8	AbstractRealMatrix.java	equals	nRows	int	0	RET	m.getRowDimension() != $
1223	909	8	AbstractRealMatrix.java	equals	nCols	int	0	RET	m.getColumnDimension() != $
23115	912	8	AbstractRealMatrix.java	equals	row	int	0	NIL-FOR	$ < nRows
23115	912	8	AbstractRealMatrix.java	equals	nRows	int	0	NIL-FOR	row < $
23116	913	12	AbstractRealMatrix.java	equals	col	int	0	NIL-FOR	$ < nCols
23116	913	12	AbstractRealMatrix.java	equals	nCols	int	0	NIL-FOR	col < $
1224	914	16	AbstractRealMatrix.java	equals	THIS	AbstractRealMatrix	0	RET	$.getEntry(row, col) != m.getEntry(row, col)
1224	914	16	AbstractRealMatrix.java	equals	col	int	0	RET	getEntry(row, $) != m.getEntry(row, $)
1224	914	16	AbstractRealMatrix.java	equals	row	int	0	RET	getEntry($, col) != m.getEntry($, col)
1224	914	16	AbstractRealMatrix.java	equals	m	RealMatrix	0	RET	getEntry(row, col) != $.getEntry(row, col)
23117	934	8	AbstractRealMatrix.java	hashCode	row	int	0	NIL-FOR	$ < nRows
23117	934	8	AbstractRealMatrix.java	hashCode	nRows	int	0	NIL-FOR	row < $
23118	935	12	AbstractRealMatrix.java	hashCode	col	int	0	NIL-FOR	$ < nCols
23118	935	12	AbstractRealMatrix.java	hashCode	nCols	int	0	NIL-FOR	col < $
558	92	8	AbstractRegion.java	AbstractRegion	boundary	Collection<SubHyperplane<S>>	1	DEF	$.size() == 0
559	143	8	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	1	DEF	hyperplanes.$.length == 0
559	143	8	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$ == null
559	143	8	AbstractRegion.java	AbstractRegion	hyperplanes	Hyperplane<S>[]	1	DEF	$.length == 0
560	154	16	AbstractRegion.java	AbstractRegion	THIS	AbstractRegion	0	DEF	node.insertCut($.hyperplane)
560	154	16	AbstractRegion.java	AbstractRegion	node	BSPTree<S>	0	DEF	$.insertCut(hyperplane)
22808	181	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	NIL-WHILE	$.hasNext()
22808	181	8	AbstractRegion.java	insertCuts	inserted	Hyperplane<S>	0	NIL-WHILE	$ == null
561	183	12	AbstractRegion.java	insertCuts	inserted	Hyperplane<S>	0	DEF	node.insertCut($.copySelf())
561	183	12	AbstractRegion.java	insertCuts	node	BSPTree<S>	0	DEF	$.insertCut(inserted.copySelf())
562	188	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	RET	$.hasNext()
22809	195	8	AbstractRegion.java	insertCuts	iterator	Iterator<SubHyperplane<S>>	0	NIL-WHILE	$.hasNext()
563	237	8	AbstractRegion.java	isEmpty	node	BSPTree<S>	0	RET	$.getCut() == null
564	266	8	AbstractRegion.java	checkPoint	cell	BSPTree<S>	0	RET	$.getCut() == null
565	280	8	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getCut() != null
565	280	8	AbstractRegion.java	getTree	THIS	AbstractRegion	0	DEF	$.tree.getAttribute() == null
565	280	8	AbstractRegion.java	getTree	includeBoundaryAttributes	boolean	0	DEF	$
566	412	8	AbstractRegion.java	getSize	THIS	AbstractRegion	0	DEF	$.barycenter == null
567	427	8	AbstractRegion.java	getBarycenter	THIS	AbstractRegion	0	DEF	$.barycenter == null
568	471	8	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	RET	$.getCut() == null
569	472	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getAttribute()
570	484	12	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
570	484	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
570	484	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
571	485	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
571	485	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
572	489	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getMinus())
572	489	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getMinus())
573	493	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
573	493	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
574	499	12	AbstractRegion.java	recurseSides	THIS	AbstractRegion	1	DEF	node.getCut().side(sub.getHyperplane()) == $.Side.PLUS
574	499	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().side(sub.getHyperplane()) == Side.PLUS
574	499	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().side($.getHyperplane()) == Side.PLUS
575	500	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
575	500	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
576	504	16	AbstractRegion.java	recurseSides	THIS	AbstractRegion	0	DEF	$.isEmpty(node.getPlus())
576	504	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	isEmpty($.getPlus())
577	508	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
577	508	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
578	520	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.minusFound()
578	520	12	AbstractRegion.java	recurseSides	sides	Sides	0	DEF	$.plusFound()
579	526	12	AbstractRegion.java	recurseSides	node	BSPTree<S>	1	DEF	$.getCut().getHyperplane().sameOrientationAs(sub.getHyperplane())
579	526	12	AbstractRegion.java	recurseSides	sub	SubHyperplane<S>	1	DEF	node.getCut().getHyperplane().sameOrientationAs($.getHyperplane())
580	527	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getPlus().getAttribute()
580	527	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
581	530	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getMinus().getAttribute()
581	530	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
582	534	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getPlus().getCut() != null
582	534	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getPlus().getAttribute()
583	537	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	$.getMinus().getCut() != null
583	537	16	AbstractRegion.java	recurseSides	node	BSPTree<S>	0	DEF	(Boolean) $.getMinus().getAttribute()
584	602	8	AbstractRegion.java	recurseIntersection	node	BSPTree<S>	0	RET	$.getCut() == null
585	616	12	AbstractRegion.java	recurseIntersection	plus	SubHyperplane<S>	1	RET	$ == null
586	618	19	AbstractRegion.java	recurseIntersection	minus	SubHyperplane<S>	1	RET	$ == null
587	652	8	AbstractRegion.java	recurseTransform	node	BSPTree<S>	0	RET	$.getCut() == null
588	659	8	AbstractRegion.java	recurseTransform	attribute	BoundaryAttribute<S>	0	DEF	$ != null
1746	97	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	NullArgumentException	$ == null
1747	100	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	ZeroException	steps.$.length == 0
1747	100	8	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$.length == 0
23761	108	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
23761	108	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < dimension
23762	110	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i + 1
23762	110	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $ + 1
1748	111	16	AbstractSimplex.java	AbstractSimplex	j	int	0	ZeroException	steps[$] == 0
1748	111	16	AbstractSimplex.java	AbstractSimplex	steps	double[]	0	ZeroException	$[j] == 0
1749	132	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NotStrictlyPositiveException	referenceSimplex.$.length <= 0
1749	132	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NotStrictlyPositiveException	$.length <= 0
23763	144	8	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	i < referenceSimplex.$.length
23763	144	8	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	$ < referenceSimplex.length
23763	144	8	AbstractSimplex.java	AbstractSimplex	referenceSimplex	double[][]	0	NIL-FOR	i < $.length
1750	148	12	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	DimensionMismatchException	refI.$.length != $.dimension
1750	148	12	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DimensionMismatchException	$.length != dimension
23764	151	12	AbstractSimplex.java	AbstractSimplex	j	int	0	NIL-FOR	$ < i
23764	151	12	AbstractSimplex.java	AbstractSimplex	i	int	0	NIL-FOR	j < $
23765	154	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
23765	154	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
1751	155	20	AbstractSimplex.java	AbstractSimplex	k	int	0	DEF	refI[$] != refJ[$]
1751	155	20	AbstractSimplex.java	AbstractSimplex	refJ	double[]	0	DEF	refI[k] != $[k]
1751	155	20	AbstractSimplex.java	AbstractSimplex	refI	double[]	0	DEF	$[k] != refJ[k]
1752	160	16	AbstractSimplex.java	AbstractSimplex	allEquals	boolean	0	MathIllegalArgumentException	$
1753	167	12	AbstractSimplex.java	AbstractSimplex	i	int	0	DEF	$ > 0
23766	169	16	AbstractSimplex.java	AbstractSimplex	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
23766	169	16	AbstractSimplex.java	AbstractSimplex	k	int	0	NIL-FOR	$ < dimension
1754	216	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	DimensionMismatchException	$.dimension != startPoint.$.length
1754	216	8	AbstractSimplex.java	build	startPoint	double[]	0	DimensionMismatchException	dimension != $.length
23767	225	8	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
23767	225	8	AbstractSimplex.java	build	i	int	0	NIL-FOR	$ < dimension
23768	228	12	AbstractSimplex.java	build	THIS	AbstractSimplex	0	NIL-FOR	k < $.dimension
23768	228	12	AbstractSimplex.java	build	k	int	0	NIL-FOR	$ < dimension
23769	246	8	AbstractSimplex.java	evaluate	THIS	AbstractSimplex	0	NIL-FOR	i < $.simplex.$.length
23769	246	8	AbstractSimplex.java	evaluate	i	int	0	NIL-FOR	$ < simplex.length
1755	249	12	AbstractSimplex.java	evaluate	vertex	PointValuePair	0	DEF	Double.isNaN($.getValue())
23770	267	8	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	NIL-FOR	i < $.dimension
23770	267	8	AbstractSimplex.java	replaceWorstPoint	i	int	0	NIL-FOR	$ < dimension
1756	268	12	AbstractSimplex.java	replaceWorstPoint	THIS	AbstractSimplex	0	DEF	comparator.compare($.simplex[i], pointValuePair) > 0
1756	268	12	AbstractSimplex.java	replaceWorstPoint	i	int	0	DEF	comparator.compare(simplex[$], pointValuePair) > 0
1756	268	12	AbstractSimplex.java	replaceWorstPoint	pointValuePair	PointValuePair	0	DEF	comparator.compare(simplex[i], $) > 0
1756	268	12	AbstractSimplex.java	replaceWorstPoint	comparator	Comparator<PointValuePair>	0	DEF	$.compare(simplex[i], pointValuePair) > 0
1757	295	8	AbstractSimplex.java	getPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
1757	295	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ < 0
1757	295	8	AbstractSimplex.java	getPoint	index	int	0	OutOfRangeException	$ >= simplex.length
1758	310	8	AbstractSimplex.java	setPoint	THIS	AbstractSimplex	0	OutOfRangeException	index >= $.simplex.$.length
1758	310	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ >= simplex.length
1758	310	8	AbstractSimplex.java	setPoint	index	int	0	OutOfRangeException	$ < 0
1759	324	8	AbstractSimplex.java	setPoints	THIS	AbstractSimplex	0	DimensionMismatchException	points.$.length != $.simplex.$.length
1759	324	8	AbstractSimplex.java	setPoints	points	PointValuePair[]	0	DimensionMismatchException	$.length != simplex.length
23771	340	8	AbstractSimplex.java	createHypercubeSteps	i	int	0	NIL-FOR	$ < n
23771	340	8	AbstractSimplex.java	createHypercubeSteps	n	int	0	NIL-FOR	i < $
2617	180	4	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	1	DEF	interpolator.$.currentState == null
2617	180	4	AbstractStepInterpolator.java	AbstractStepInterpolator	interpolator	AbstractStepInterpolator	1	DEF	$.currentState == null
24246	193	6	AbstractStepInterpolator.java	AbstractStepInterpolator	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.interpolatedSecondaryState.$.length
24246	193	6	AbstractStepInterpolator.java	AbstractStepInterpolator	i	int	0	NIL-FOR	$ < interpolatedSecondaryState.length
2618	212	6	AbstractStepInterpolator.java	allocateInterpolatedArrays	dimension	int	1	DEF	$ < 0
2619	224	10	AbstractStepInterpolator.java	allocateInterpolatedArrays	THIS	AbstractStepInterpolator	1	DEF	$.secondaryMappers == null
24247	230	14	AbstractStepInterpolator.java	allocateInterpolatedArrays	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.secondaryMappers.$.length
24247	230	14	AbstractStepInterpolator.java	allocateInterpolatedArrays	i	int	0	NIL-FOR	$ < secondaryMappers.length
2620	402	6	AbstractStepInterpolator.java	evaluateCompleteInterpolatedState	THIS	AbstractStepInterpolator	0	DEF	$.dirtyState
2621	482	4	AbstractStepInterpolator.java	finalizeStep	THIS	AbstractStepInterpolator	0	DEF	$.finalized
2622	512	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	1	DEF	$.currentState == null
2623	529	4	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	DEF	$.currentState != null
24248	530	8	AbstractStepInterpolator.java	writeBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
24248	530	8	AbstractStepInterpolator.java	writeBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
24249	568	4	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.secondaryMappers.$.length
24249	568	4	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < secondaryMappers.length
2624	573	4	AbstractStepInterpolator.java	readBaseExternal	dimension	int	1	DEF	$ < 0
24250	577	8	AbstractStepInterpolator.java	readBaseExternal	THIS	AbstractStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
24250	577	8	AbstractStepInterpolator.java	readBaseExternal	i	int	0	NIL-FOR	$ < currentState.length
2024	59	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	NullArgumentException	$ == null
2025	88	8	AbstractStorelessUnivariateStatistic.java	evaluate	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
2025	88	8	AbstractStorelessUnivariateStatistic.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2025	88	8	AbstractStorelessUnivariateStatistic.java	evaluate	begin	int	0	DEF	test(values, $, length)
2025	88	8	AbstractStorelessUnivariateStatistic.java	evaluate	length	int	0	DEF	test(values, begin, $)
2026	127	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	NullArgumentException	$ == null
2027	146	8	AbstractStorelessUnivariateStatistic.java	incrementAll	THIS	AbstractStorelessUnivariateStatistic	0	DEF	$.test(values, begin, length)
2027	146	8	AbstractStorelessUnivariateStatistic.java	incrementAll	values	double[]	0	DEF	test($, begin, length)
2027	146	8	AbstractStorelessUnivariateStatistic.java	incrementAll	begin	int	0	DEF	test(values, $, length)
2027	146	8	AbstractStorelessUnivariateStatistic.java	incrementAll	length	int	0	DEF	test(values, begin, $)
23979	148	12	AbstractStorelessUnivariateStatistic.java	incrementAll	i	int	0	NIL-FOR	$ < k
23979	148	12	AbstractStorelessUnivariateStatistic.java	incrementAll	k	int	0	NIL-FOR	i < $
2028	163	8	AbstractStorelessUnivariateStatistic.java	equals	THIS	AbstractStorelessUnivariateStatistic	0	RET	object == $
2028	163	8	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ == this
2029	166	7	AbstractStorelessUnivariateStatistic.java	equals	object	Object	0	RET	$ instanceof AbstractStorelessUnivariateStatistic == false
614	126	8	AbstractSubHyperplane.java	recurseTransform	node	BSPTree<T>	0	RET	$.getCut() == null
615	133	8	AbstractSubHyperplane.java	recurseTransform	attribute	BoundaryAttribute<T>	0	DEF	$ != null
2149	163	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NullArgumentException	$ == null
2150	167	8	AbstractUnivariateStatistic.java	test	begin	int	0	NotPositiveException	$ < 0
2151	171	8	AbstractUnivariateStatistic.java	test	length	int	0	NotPositiveException	$ < 0
2152	175	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	NumberIsTooLargeException	begin + length > values.$.length
2152	175	8	AbstractUnivariateStatistic.java	test	values	double[]	0	NumberIsTooLargeException	begin + length > $.length
2152	175	8	AbstractUnivariateStatistic.java	test	begin	int	0	NumberIsTooLargeException	$ + length > values.length
2152	175	8	AbstractUnivariateStatistic.java	test	length	int	0	NumberIsTooLargeException	begin + $ > values.length
2153	180	8	AbstractUnivariateStatistic.java	test	length	int	0	RET	$ == 0
2153	180	8	AbstractUnivariateStatistic.java	test	allowEmpty	boolean	0	RET	$
2154	258	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	NullArgumentException	$ == null
2155	262	8	AbstractUnivariateStatistic.java	test	THIS	AbstractUnivariateStatistic	0	DimensionMismatchException	weights.$.length != values.$.length
2155	262	8	AbstractUnivariateStatistic.java	test	values	double[]	0	DimensionMismatchException	weights.length != $.length
2155	262	8	AbstractUnivariateStatistic.java	test	weights	double[]	0	DimensionMismatchException	$.length != values.length
24010	267	8	AbstractUnivariateStatistic.java	test	i	int	0	NIL-FOR	$ < begin + length
24010	267	8	AbstractUnivariateStatistic.java	test	begin	int	0	NIL-FOR	i < $ + length
24010	267	8	AbstractUnivariateStatistic.java	test	length	int	0	NIL-FOR	i < begin + $
2156	268	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isNaN(weights[$])
2156	268	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isNaN($[i])
2157	271	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	Double.isInfinite(weights[$])
2157	271	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
2158	274	12	AbstractUnivariateStatistic.java	test	i	int	0	MathIllegalArgumentException	weights[$] < 0
2158	274	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	MathIllegalArgumentException	$[i] < 0
2159	277	12	AbstractUnivariateStatistic.java	test	i	int	0	DEF	weights[$] > 0.0
2159	277	12	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	DEF	$
2159	277	12	AbstractUnivariateStatistic.java	test	weights	double[]	0	DEF	$[i] > 0.0
2160	282	8	AbstractUnivariateStatistic.java	test	containsPositiveWeight	boolean	0	MathIllegalArgumentException	$
24158	111	8	AbstractWell.java	AbstractWell	j	int	0	NIL-FOR	$ < r
24158	111	8	AbstractWell.java	AbstractWell	r	int	0	NIL-FOR	j < $
2434	154	8	AbstractWell.java	setSeed	seed	int[]	0	RET	$ == null
2435	161	8	AbstractWell.java	setSeed	THIS	AbstractWell	0	DEF	seed.$.length < $.v.$.length
2435	161	8	AbstractWell.java	setSeed	seed	int[]	0	DEF	$.length < v.length
24159	162	12	AbstractWell.java	setSeed	THIS	AbstractWell	0	NIL-FOR	i < $.v.$.length
24159	162	12	AbstractWell.java	setSeed	i	int	0	NIL-FOR	$ < v.length
24306	223	8	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-DOWHILE	$.isLastStep
24307	226	12	AdamsBashforthIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
24308	232	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	i < $.mainSetDimension
24308	232	16	AdamsBashforthIntegrator.java	integrate	i	int	0	NIL-FOR	$ < mainSetDimension
2701	242	16	AdamsBashforthIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
24309	262	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	NIL-FOR	j < y0.$.length
24309	262	12	AdamsBashforthIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
24309	262	12	AdamsBashforthIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2702	276	12	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.isLastStep
2703	281	16	AdamsBashforthIntegrator.java	integrate	THIS	AdamsBashforthIntegrator	0	DEF	$.resetOccurred
2704	297	16	AdamsBashforthIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
24302	240	8	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-DOWHILE	$.isLastStep
24303	243	12	AdamsMoultonIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
24304	256	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
24304	256	16	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
24304	256	16	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2697	265	16	AdamsMoultonIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
24305	279	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	NIL-FOR	j < y0.$.length
24305	279	12	AdamsMoultonIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
24305	279	12	AdamsMoultonIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
2698	294	12	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.isLastStep
2699	299	16	AdamsMoultonIntegrator.java	integrate	THIS	AdamsMoultonIntegrator	0	DEF	$.resetOccurred
2700	316	16	AdamsMoultonIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
24367	167	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ > 0
24368	179	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	i	int	0	NIL-FOR	$ < nSteps
24368	179	8	AdamsNordsieckTransformer.java	AdamsNordsieckTransformer	nSteps	int	0	NIL-FOR	i < $
2751	193	12	AdamsNordsieckTransformer.java	getInstance	t	AdamsNordsieckTransformer	0	DEF	$ == null
24369	227	8	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < pData.$.length
24369	227	8	AdamsNordsieckTransformer.java	buildP	i	int	0	NIL-FOR	$ < pData.length
24369	227	8	AdamsNordsieckTransformer.java	buildP	pData	BigFraction[][]	0	NIL-FOR	i < $.length
24370	232	12	AdamsNordsieckTransformer.java	buildP	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < pI.$.length
24370	232	12	AdamsNordsieckTransformer.java	buildP	j	int	0	NIL-FOR	$ < pI.length
24370	232	12	AdamsNordsieckTransformer.java	buildP	pI	BigFraction[]	0	NIL-FOR	j < $.length
24371	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < y.$.length
24371	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	i	int	0	NIL-FOR	$ < y.length
24371	263	8	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	y	double[][]	0	NIL-FOR	i < $.length
24372	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < aI.$.length
24372	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < aI.length
24372	273	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	aI	double[]	0	NIL-FOR	j < $.length
24373	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < yI.$.length
24373	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	j	int	0	NIL-FOR	$ < yI.length
24373	284	12	AdamsNordsieckTransformer.java	initializeHighOrderDerivatives	yI	double[]	0	NIL-FOR	j < $.length
24374	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	i < data.$.length
24374	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	i	int	0	NIL-FOR	$ < data.length
24374	331	8	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	data	double[][]	0	NIL-FOR	i < $.length
24375	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	THIS	AdamsNordsieckTransformer	0	NIL-FOR	j < dataI.$.length
24375	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	j	int	0	NIL-FOR	$ < dataI.length
24375	334	12	AdamsNordsieckTransformer.java	updateHighOrderDerivativesPhase2	dataI	double[]	0	NIL-FOR	j < $.length
2736	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize < $.minStep
2736	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	THIS	AdaptiveStepsizeIntegrator	1	DEF	initialStepSize > $.maxStep
2736	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ < minStep
2736	209	4	AdaptiveStepsizeIntegrator.java	setInitialStepSize	initialStepSize	double	1	DEF	$ > maxStep
2737	225	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecAbsoluteTolerance.$.length != $.mainSetDimension
2737	225	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecAbsoluteTolerance != null
2738	229	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecRelativeTolerance != null
2738	229	6	AdaptiveStepsizeIntegrator.java	sanityChecks	THIS	AdaptiveStepsizeIntegrator	0	DimensionMismatchException	$.vecRelativeTolerance.$.length != $.mainSetDimension
2739	250	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	RET	$.initialStep > 0
24355	260	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
24355	260	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
24355	260	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
2740	269	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
24356	274	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < y0.$.length
24356	274	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < y0.length
24356	274	4	AdaptiveStepsizeIntegrator.java	initializeStep	y0	double[]	0	NIL-FOR	j < $.length
24357	281	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	NIL-FOR	j < scale.$.length
24357	281	4	AdaptiveStepsizeIntegrator.java	initializeStep	j	int	0	NIL-FOR	$ < scale.length
24357	281	4	AdaptiveStepsizeIntegrator.java	initializeStep	scale	double[]	0	NIL-FOR	j < $.length
2741	295	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h < $.getMinStep()
2741	295	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ < getMinStep()
2742	298	4	AdaptiveStepsizeIntegrator.java	initializeStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	h > $.getMaxStep()
2742	298	4	AdaptiveStepsizeIntegrator.java	initializeStep	h	double	0	DEF	$ > getMaxStep()
2743	301	4	AdaptiveStepsizeIntegrator.java	initializeStep	forward	boolean	0	DEF	$
2744	322	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	NumberIsTooSmallException	FastMath.abs(h) < $.minStep
2744	322	6	AdaptiveStepsizeIntegrator.java	filterStep	h	double	0	NumberIsTooSmallException	FastMath.abs($) < minStep
2745	323	10	AdaptiveStepsizeIntegrator.java	filterStep	acceptSmall	boolean	1	DEF	$
2746	331	6	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	1	DEF	filteredH > $.maxStep
2746	331	6	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	1	DEF	$ > maxStep
2747	333	13	AdaptiveStepsizeIntegrator.java	filterStep	THIS	AdaptiveStepsizeIntegrator	0	DEF	filteredH < -$.maxStep
2747	333	13	AdaptiveStepsizeIntegrator.java	filterStep	filteredH	double	0	DEF	$ < -maxStep
2163	302	8	AggregateSummaryStatistics.java	aggregate	statistics	Collection<SummaryStatistics>	0	RET	$ == null
2164	306	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	RET	$.hasNext()
24011	316	8	AggregateSummaryStatistics.java	aggregate	iterator	Iterator<SummaryStatistics>	0	NIL-WHILE	$.hasNext()
2165	318	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMin() < min
2165	318	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	current.getMin() < $
2165	318	12	AggregateSummaryStatistics.java	aggregate	min	double	0	DEF	Double.isNaN($)
2166	321	12	AggregateSummaryStatistics.java	aggregate	current	SummaryStatistics	0	DEF	$.getMax() > max
2166	321	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	Double.isNaN($)
2166	321	12	AggregateSummaryStatistics.java	aggregate	max	double	0	DEF	current.getMax() > $
2167	333	8	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 0
2168	335	15	AggregateSummaryStatistics.java	aggregate	n	long	1	DEF	$ == 1
2584	43	8	ArgUtils.java	flatten	array	Object[]	0	DEF	$ != null
2585	45	16	ArgUtils.java	flatten	THIS	ArgUtils	1	DEF	$.o instanceof Object[]
11	61	8	ArithmeticUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
11	61	8	ArithmeticUtils.java	addAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
12	109	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	$ == k
12	109	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	n == $
12	109	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == 0
13	112	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	k == $ - 1
13	112	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == 1
13	112	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ == n - 1
14	116	8	ArithmeticUtils.java	binomialCoefficient	n	int	0	RET	k > $ / 2
14	116	8	ArithmeticUtils.java	binomialCoefficient	k	int	0	RET	$ > n / 2
15	126	8	ArithmeticUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 61
22725	129	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
22725	129	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
16	133	15	ArithmeticUtils.java	binomialCoefficient	n	int	1	DEF	$ <= 66
22726	137	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
22726	137	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
22727	153	12	ArithmeticUtils.java	binomialCoefficient	j	int	0	NIL-FOR	$ <= k
22727	153	12	ArithmeticUtils.java	binomialCoefficient	k	int	0	NIL-FOR	j <= $
17	187	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	$ == k
17	187	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	n == $
17	187	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 0
18	190	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	k == $ - 1
18	190	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == 1
18	190	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ == n - 1
19	193	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	k > $/2
19	193	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	RET	$ > n/2
20	196	8	ArithmeticUtils.java	binomialCoefficientDouble	n	int	0	RET	$ < 67
22728	201	8	ArithmeticUtils.java	binomialCoefficientDouble	i	int	0	NIL-FOR	$ <= k
22728	201	8	ArithmeticUtils.java	binomialCoefficientDouble	k	int	0	NIL-FOR	i <= $
21	229	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ == k
21	229	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	n == $
21	229	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 0
22	232	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	k == $ - 1
22	232	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == 1
22	232	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ == n - 1
23	240	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 67
24	248	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	$ < 1030
25	252	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	RET	k > $ / 2
25	252	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	RET	$ > n / 2
22729	262	8	ArithmeticUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= n
22729	262	8	ArithmeticUtils.java	binomialCoefficientLog	n	int	0	NIL-FOR	i <= $
22730	267	8	ArithmeticUtils.java	binomialCoefficientLog	i	int	0	NIL-FOR	$ <= k
22730	267	8	ArithmeticUtils.java	binomialCoefficientLog	k	int	0	NIL-FOR	i <= $
26	299	8	ArithmeticUtils.java	factorial	n	int	0	NotPositiveException	$ < 0
27	303	8	ArithmeticUtils.java	factorial	n	int	0	MathArithmeticException	$ > 20
28	323	8	ArithmeticUtils.java	factorialDouble	n	int	0	NotPositiveException	$ < 0
29	327	8	ArithmeticUtils.java	factorialDouble	n	int	0	RET	$ < 21
30	341	8	ArithmeticUtils.java	factorialLog	n	int	0	NotPositiveException	$ < 0
31	345	8	ArithmeticUtils.java	factorialLog	n	int	0	RET	$ < 21
22731	349	8	ArithmeticUtils.java	factorialLog	i	int	0	NIL-FOR	$ <= n
22731	349	8	ArithmeticUtils.java	factorialLog	n	int	0	NIL-FOR	i <= $
32	387	8	ArithmeticUtils.java	gcd	u	int	0	MathArithmeticException:RET	$ == 0
32	387	8	ArithmeticUtils.java	gcd	v	int	0	MathArithmeticException:RET	$ == 0
33	388	12	ArithmeticUtils.java	gcd	u	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
33	388	12	ArithmeticUtils.java	gcd	v	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
34	399	8	ArithmeticUtils.java	gcd	u	int	0	DEF	$ > 0
35	402	8	ArithmeticUtils.java	gcd	v	int	0	DEF	$ > 0
22732	407	8	ArithmeticUtils.java	gcd	u	int	0	NIL-WHILE	($ & 1) == 0
22732	407	8	ArithmeticUtils.java	gcd	v	int	0	NIL-WHILE	($ & 1) == 0
22732	407	8	ArithmeticUtils.java	gcd	k	int	0	NIL-WHILE	$ < 31
36	413	8	ArithmeticUtils.java	gcd	k	int	0	MathArithmeticException	$ == 31
22733	422	8	ArithmeticUtils.java	gcd	t	int	0	NIL-DOWHILE	$ != 0
22734	425	12	ArithmeticUtils.java	gcd	t	int	0	NIL-WHILE	($ & 1) == 0
37	429	12	ArithmeticUtils.java	gcd	t	int	1	DEF	$ > 0
38	474	8	ArithmeticUtils.java	gcd	u	long	0	MathArithmeticException:RET	$ == 0
38	474	8	ArithmeticUtils.java	gcd	v	long	0	MathArithmeticException:RET	$ == 0
39	475	12	ArithmeticUtils.java	gcd	u	long	0	MathArithmeticException	$ == Long.MIN_VALUE
39	475	12	ArithmeticUtils.java	gcd	v	long	0	MathArithmeticException	$ == Long.MIN_VALUE
40	486	8	ArithmeticUtils.java	gcd	u	long	0	DEF	$ > 0
41	489	8	ArithmeticUtils.java	gcd	v	long	0	DEF	$ > 0
22735	494	8	ArithmeticUtils.java	gcd	u	long	0	NIL-WHILE	($ & 1) == 0
22735	494	8	ArithmeticUtils.java	gcd	v	long	0	NIL-WHILE	($ & 1) == 0
22735	494	8	ArithmeticUtils.java	gcd	k	int	0	NIL-WHILE	$ < 63
42	500	8	ArithmeticUtils.java	gcd	k	int	0	MathArithmeticException	$ == 63
22736	509	8	ArithmeticUtils.java	gcd	t	long	0	NIL-DOWHILE	$ != 0
22737	512	12	ArithmeticUtils.java	gcd	t	long	0	NIL-WHILE	($ & 1) == 0
43	516	12	ArithmeticUtils.java	gcd	t	long	1	DEF	$ > 0
44	552	8	ArithmeticUtils.java	lcm	a	int	0	RET	$ == 0
44	552	8	ArithmeticUtils.java	lcm	b	int	0	RET	$ == 0
45	556	8	ArithmeticUtils.java	lcm	lcm	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
46	586	8	ArithmeticUtils.java	lcm	a	long	0	RET	$ == 0
46	586	8	ArithmeticUtils.java	lcm	b	long	0	RET	$ == 0
47	590	8	ArithmeticUtils.java	lcm	lcm	long	0	MathArithmeticException	$ == Long.MIN_VALUE
48	609	8	ArithmeticUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
48	609	8	ArithmeticUtils.java	mulAndCheck	m	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
49	627	8	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ > b
49	627	8	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a > $
50	631	12	ArithmeticUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ < 0
51	632	16	ArithmeticUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ < 0
52	634	20	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ >= Long.MAX_VALUE / b
52	634	20	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a >= Long.MAX_VALUE / $
53	639	23	ArithmeticUtils.java	mulAndCheck	b	long	1	MathArithmeticException	$ > 0
54	641	20	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	Long.MIN_VALUE / b <= $
54	641	20	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	Long.MIN_VALUE / $ <= a
55	651	19	ArithmeticUtils.java	mulAndCheck	a	long	1	MathArithmeticException	$ > 0
56	656	16	ArithmeticUtils.java	mulAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE / b
56	656	16	ArithmeticUtils.java	mulAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE / $
57	681	8	ArithmeticUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ > Integer.MAX_VALUE
57	681	8	ArithmeticUtils.java	subAndCheck	s	long	0	MathArithmeticException	$ < Integer.MIN_VALUE
58	699	8	ArithmeticUtils.java	subAndCheck	b	long	1	MathArithmeticException	$ == Long.MIN_VALUE
59	700	12	ArithmeticUtils.java	subAndCheck	a	long	1	DEF	$ < 0
60	721	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
22738	727	8	ArithmeticUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
61	728	12	ArithmeticUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
62	747	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
22739	753	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
63	754	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
64	773	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
22740	779	8	ArithmeticUtils.java	pow	e	int	0	NIL-WHILE	$ != 0
65	780	12	ArithmeticUtils.java	pow	e	int	0	DEF	($ & 0x1) != 0
66	799	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
22741	805	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
67	806	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
68	825	8	ArithmeticUtils.java	pow	e	int	0	NotPositiveException	$ < 0
69	841	8	ArithmeticUtils.java	pow	e	long	0	NotPositiveException	$ < 0
22742	847	8	ArithmeticUtils.java	pow	e	long	0	NIL-WHILE	$ != 0
70	848	12	ArithmeticUtils.java	pow	e	long	0	DEF	($ & 0x1) != 0
71	868	8	ArithmeticUtils.java	pow	e	BigInteger	0	NotPositiveException	$.compareTo(BigInteger.ZERO) < 0
22743	874	8	ArithmeticUtils.java	pow	e	BigInteger	0	NIL-WHILE	BigInteger.ZERO.equals($)
72	875	12	ArithmeticUtils.java	pow	e	BigInteger	0	DEF	$.testBit(0)
73	898	8	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	$ > b
73	898	8	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	a > $
74	904	12	ArithmeticUtils.java	addAndCheck	a	long	1	MathArithmeticException	$ < 0
75	905	16	ArithmeticUtils.java	addAndCheck	b	long	1	MathArithmeticException	$ < 0
76	907	20	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	Long.MIN_VALUE - b <= $
76	907	20	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	Long.MIN_VALUE - $ <= a
77	921	16	ArithmeticUtils.java	addAndCheck	a	long	1	DEF	$ <= Long.MAX_VALUE - b
77	921	16	ArithmeticUtils.java	addAndCheck	b	long	1	DEF	a <= Long.MAX_VALUE - $
78	940	8	ArithmeticUtils.java	checkBinomial	n	int	0	NumberIsTooLargeException	$ < k
78	940	8	ArithmeticUtils.java	checkBinomial	k	int	0	NumberIsTooLargeException	n < $
79	944	8	ArithmeticUtils.java	checkBinomial	n	int	0	NotPositiveException	$ < 0
1295	151	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	copyArray	boolean	1	DEF	$
1296	156	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NoDataException	$ == 0
1297	160	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
23197	163	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	NIL-FOR	$ < nRows
23197	163	12	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	r < $
1298	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	d[r].length != nCols
1298	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1298	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1298	164	16	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	d	T[][]	0	DimensionMismatchException	$[r].length != nCols
23198	195	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	row	int	0	NIL-FOR	$ < nRows
23198	195	8	Array2DRowFieldMatrix.java	Array2DRowFieldMatrix	nRows	int	0	NIL-FOR	row < $
23199	227	8	Array2DRowFieldMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
23199	227	8	Array2DRowFieldMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
23200	231	12	Array2DRowFieldMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
23200	231	12	Array2DRowFieldMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
23201	254	8	Array2DRowFieldMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
23201	254	8	Array2DRowFieldMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
23202	258	12	Array2DRowFieldMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
23202	258	12	Array2DRowFieldMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
23203	283	8	Array2DRowFieldMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
23203	283	8	Array2DRowFieldMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
23204	286	12	Array2DRowFieldMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
23204	286	12	Array2DRowFieldMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
23205	288	16	Array2DRowFieldMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
23205	288	16	Array2DRowFieldMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1299	318	8	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	1	DimensionMismatchException	$.data == null
1300	319	12	Array2DRowFieldMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1301	322	12	Array2DRowFieldMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1302	326	12	Array2DRowFieldMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1303	331	12	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
23206	335	12	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	NIL-FOR	i < $.data.$.length
23206	335	12	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1304	336	16	Array2DRowFieldMatrix.java	setSubMatrix	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1304	336	16	Array2DRowFieldMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1304	336	16	Array2DRowFieldMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1304	336	16	Array2DRowFieldMatrix.java	setSubMatrix	subMatrix	T[][]	0	DimensionMismatchException	$[i].length != nCols
1305	400	8	Array2DRowFieldMatrix.java	operate	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nCols
1305	400	8	Array2DRowFieldMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1305	400	8	Array2DRowFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != nCols
23207	404	8	Array2DRowFieldMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
23207	404	8	Array2DRowFieldMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
23208	407	12	Array2DRowFieldMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
23208	407	12	Array2DRowFieldMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1306	420	8	Array2DRowFieldMatrix.java	preMultiply	THIS	Array2DRowFieldMatrix	0	DimensionMismatchException	v.$.length != nRows
1306	420	8	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1306	420	8	Array2DRowFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != nRows
23209	425	8	Array2DRowFieldMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
23209	425	8	Array2DRowFieldMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
23210	427	12	Array2DRowFieldMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
23210	427	12	Array2DRowFieldMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
23211	442	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
23211	442	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
23212	444	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
23212	444	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
23213	457	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
23213	457	8	Array2DRowFieldMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
23214	459	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
23214	459	12	Array2DRowFieldMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
23215	474	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
23215	474	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
23216	476	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
23216	476	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
23217	491	8	Array2DRowFieldMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
23217	491	8	Array2DRowFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
23218	493	12	Array2DRowFieldMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
23218	493	12	Array2DRowFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
23219	506	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
23219	506	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
23220	507	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
23220	507	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
23221	521	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
23221	521	8	Array2DRowFieldMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
23222	522	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
23222	522	12	Array2DRowFieldMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
23223	537	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
23223	537	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
23224	538	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
23224	538	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
23225	554	8	Array2DRowFieldMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
23225	554	8	Array2DRowFieldMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
23226	555	12	Array2DRowFieldMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
23226	555	12	Array2DRowFieldMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
23227	571	8	Array2DRowFieldMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
23227	571	8	Array2DRowFieldMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1470	96	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	copyArray	boolean	1	DEF	$
1471	99	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	NullArgumentException	$ == null
1472	103	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NoDataException	$ == 0
1473	107	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	NoDataException	$ == 0
23500	110	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	NIL-FOR	$ < nRows
23500	110	12	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	r < $
1474	111	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	d[r].length != nCols
1474	111	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	r	int	0	DimensionMismatchException	d[$].length != nCols
1474	111	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nCols	int	0	DimensionMismatchException	d[r].length != $
1474	111	16	Array2DRowRealMatrix.java	Array2DRowRealMatrix	d	double[][]	0	DimensionMismatchException	$[r].length != nCols
23501	129	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	row	int	0	NIL-FOR	$ < nRows
23501	129	8	Array2DRowRealMatrix.java	Array2DRowRealMatrix	nRows	int	0	NIL-FOR	row < $
23502	162	8	Array2DRowRealMatrix.java	add	row	int	0	NIL-FOR	$ < rowCount
23502	162	8	Array2DRowRealMatrix.java	add	rowCount	int	0	NIL-FOR	row < $
23503	166	12	Array2DRowRealMatrix.java	add	col	int	0	NIL-FOR	$ < columnCount
23503	166	12	Array2DRowRealMatrix.java	add	columnCount	int	0	NIL-FOR	col < $
23504	189	8	Array2DRowRealMatrix.java	subtract	row	int	0	NIL-FOR	$ < rowCount
23504	189	8	Array2DRowRealMatrix.java	subtract	rowCount	int	0	NIL-FOR	row < $
23505	193	12	Array2DRowRealMatrix.java	subtract	col	int	0	NIL-FOR	$ < columnCount
23505	193	12	Array2DRowRealMatrix.java	subtract	columnCount	int	0	NIL-FOR	col < $
23506	223	8	Array2DRowRealMatrix.java	multiply	col	int	0	NIL-FOR	$ < nCols
23506	223	8	Array2DRowRealMatrix.java	multiply	nCols	int	0	NIL-FOR	col < $
23507	226	12	Array2DRowRealMatrix.java	multiply	mRow	int	0	NIL-FOR	$ < nSum
23507	226	12	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	mRow < $
23508	230	12	Array2DRowRealMatrix.java	multiply	row	int	0	NIL-FOR	$ < nRows
23508	230	12	Array2DRowRealMatrix.java	multiply	nRows	int	0	NIL-FOR	row < $
23509	233	16	Array2DRowRealMatrix.java	multiply	i	int	0	NIL-FOR	$ < nSum
23509	233	16	Array2DRowRealMatrix.java	multiply	nSum	int	0	NIL-FOR	i < $
1475	262	8	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	1	DimensionMismatchException	$.data == null
1476	263	12	Array2DRowRealMatrix.java	setSubMatrix	row	int	0	MathIllegalStateException	$ > 0
1477	266	12	Array2DRowRealMatrix.java	setSubMatrix	column	int	0	MathIllegalStateException	$ > 0
1478	271	12	Array2DRowRealMatrix.java	setSubMatrix	nRows	int	0	NoDataException	$ == 0
1479	276	12	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	NoDataException	$ == 0
23510	280	12	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	NIL-FOR	i < $.data.$.length
23510	280	12	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < data.length
1480	281	16	Array2DRowRealMatrix.java	setSubMatrix	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	subMatrix[i].length != nCols
1480	281	16	Array2DRowRealMatrix.java	setSubMatrix	i	int	0	DimensionMismatchException	subMatrix[$].length != nCols
1480	281	16	Array2DRowRealMatrix.java	setSubMatrix	nCols	int	0	DimensionMismatchException	subMatrix[i].length != $
1480	281	16	Array2DRowRealMatrix.java	setSubMatrix	subMatrix	double[][]	0	DimensionMismatchException	$[i].length != nCols
1481	337	8	Array2DRowRealMatrix.java	operate	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nCols
1481	337	8	Array2DRowRealMatrix.java	operate	nCols	int	0	DimensionMismatchException	v.length != $
1481	337	8	Array2DRowRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != nCols
23511	341	8	Array2DRowRealMatrix.java	operate	row	int	0	NIL-FOR	$ < nRows
23511	341	8	Array2DRowRealMatrix.java	operate	nRows	int	0	NIL-FOR	row < $
23512	344	12	Array2DRowRealMatrix.java	operate	i	int	0	NIL-FOR	$ < nCols
23512	344	12	Array2DRowRealMatrix.java	operate	nCols	int	0	NIL-FOR	i < $
1482	357	8	Array2DRowRealMatrix.java	preMultiply	THIS	Array2DRowRealMatrix	0	DimensionMismatchException	v.$.length != nRows
1482	357	8	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	DimensionMismatchException	v.length != $
1482	357	8	Array2DRowRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != nRows
23513	362	8	Array2DRowRealMatrix.java	preMultiply	col	int	0	NIL-FOR	$ < nCols
23513	362	8	Array2DRowRealMatrix.java	preMultiply	nCols	int	0	NIL-FOR	col < $
23514	364	12	Array2DRowRealMatrix.java	preMultiply	i	int	0	NIL-FOR	$ < nRows
23514	364	12	Array2DRowRealMatrix.java	preMultiply	nRows	int	0	NIL-FOR	i < $
23515	380	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
23515	380	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
23516	382	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
23516	382	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
23517	395	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ < rows
23517	395	8	Array2DRowRealMatrix.java	walkInRowOrder	rows	int	0	NIL-FOR	i < $
23518	397	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ < columns
23518	397	12	Array2DRowRealMatrix.java	walkInRowOrder	columns	int	0	NIL-FOR	j < $
23519	412	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
23519	412	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
23520	414	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
23520	414	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
23521	429	8	Array2DRowRealMatrix.java	walkInRowOrder	i	int	0	NIL-FOR	$ <= endRow
23521	429	8	Array2DRowRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	i <= $
23522	431	12	Array2DRowRealMatrix.java	walkInRowOrder	j	int	0	NIL-FOR	$ <= endColumn
23522	431	12	Array2DRowRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	j <= $
23523	444	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
23523	444	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
23524	445	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
23524	445	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
23525	459	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ < columns
23525	459	8	Array2DRowRealMatrix.java	walkInColumnOrder	columns	int	0	NIL-FOR	j < $
23526	460	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ < rows
23526	460	12	Array2DRowRealMatrix.java	walkInColumnOrder	rows	int	0	NIL-FOR	i < $
23527	475	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
23527	475	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
23528	476	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
23528	476	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
23529	492	8	Array2DRowRealMatrix.java	walkInColumnOrder	j	int	0	NIL-FOR	$ <= endColumn
23529	492	8	Array2DRowRealMatrix.java	walkInColumnOrder	endColumn	int	0	NIL-FOR	j <= $
23530	493	12	Array2DRowRealMatrix.java	walkInColumnOrder	i	int	0	NIL-FOR	$ <= endRow
23530	493	12	Array2DRowRealMatrix.java	walkInColumnOrder	endRow	int	0	NIL-FOR	i <= $
23531	509	8	Array2DRowRealMatrix.java	copyOut	i	int	0	NIL-FOR	$ < nRows
23531	509	8	Array2DRowRealMatrix.java	copyOut	nRows	int	0	NIL-FOR	i < $
1573	98	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1574	118	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1575	147	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1576	150	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	d.$.length == 0
1576	150	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	ZeroException	$.length == 0
1577	173	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1578	191	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1579	194	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1579	194	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1579	194	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1579	194	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
1580	214	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NullArgumentException	$ == null
1581	217	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NumberIsTooLargeException	d.$.length < pos + size
1581	217	8	ArrayFieldVector.java	ArrayFieldVector	d	T[]	0	NumberIsTooLargeException	$.length < pos + size
1581	217	8	ArrayFieldVector.java	ArrayFieldVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1581	217	8	ArrayFieldVector.java	ArrayFieldVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
1582	232	8	ArrayFieldVector.java	ArrayFieldVector	v	FieldVector<T>	0	NullArgumentException	$ == null
23625	237	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
23625	237	8	ArrayFieldVector.java	ArrayFieldVector	i	int	0	NIL-FOR	$ < data.length
1583	249	8	ArrayFieldVector.java	ArrayFieldVector	v	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1584	265	8	ArrayFieldVector.java	ArrayFieldVector	v	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1585	281	8	ArrayFieldVector.java	ArrayFieldVector	v1	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1585	281	8	ArrayFieldVector.java	ArrayFieldVector	v2	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1586	300	8	ArrayFieldVector.java	ArrayFieldVector	v1	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1586	300	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	NullArgumentException	$ == null
1587	319	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	NullArgumentException	$ == null
1587	319	8	ArrayFieldVector.java	ArrayFieldVector	v2	ArrayFieldVector<T>	0	NullArgumentException	$ == null
1588	345	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	NullArgumentException	$ == null
1588	345	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	NullArgumentException	$ == null
1589	349	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1589	349	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1589	349	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
1590	370	8	ArrayFieldVector.java	ArrayFieldVector	THIS	ArrayFieldVector	0	ZeroException	v1.$.length + v2.$.length == 0
1590	370	8	ArrayFieldVector.java	ArrayFieldVector	v1	T[]	0	ZeroException	$.length + v2.length == 0
1590	370	8	ArrayFieldVector.java	ArrayFieldVector	v2	T[]	0	ZeroException	v1.length + $.length == 0
23626	407	12	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
23626	407	12	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
23627	423	8	ArrayFieldVector.java	add	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
23627	423	8	ArrayFieldVector.java	add	i	int	0	NIL-FOR	$ < data.length
23628	436	12	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
23628	436	12	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
23629	452	8	ArrayFieldVector.java	subtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
23629	452	8	ArrayFieldVector.java	subtract	i	int	0	NIL-FOR	$ < data.length
23630	461	8	ArrayFieldVector.java	mapAdd	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
23630	461	8	ArrayFieldVector.java	mapAdd	i	int	0	NIL-FOR	$ < data.length
23631	469	8	ArrayFieldVector.java	mapAddToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
23631	469	8	ArrayFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
23632	478	8	ArrayFieldVector.java	mapSubtract	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
23632	478	8	ArrayFieldVector.java	mapSubtract	i	int	0	NIL-FOR	$ < data.length
23633	486	8	ArrayFieldVector.java	mapSubtractToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
23633	486	8	ArrayFieldVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
23634	495	8	ArrayFieldVector.java	mapMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
23634	495	8	ArrayFieldVector.java	mapMultiply	i	int	0	NIL-FOR	$ < data.length
23635	503	8	ArrayFieldVector.java	mapMultiplyToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
23635	503	8	ArrayFieldVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
23636	512	8	ArrayFieldVector.java	mapDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
23636	512	8	ArrayFieldVector.java	mapDivide	i	int	0	NIL-FOR	$ < data.length
23637	520	8	ArrayFieldVector.java	mapDivideToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
23637	520	8	ArrayFieldVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
23638	530	8	ArrayFieldVector.java	mapInv	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
23638	530	8	ArrayFieldVector.java	mapInv	i	int	0	NIL-FOR	$ < data.length
23639	539	8	ArrayFieldVector.java	mapInvToSelf	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
23639	539	8	ArrayFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < data.length
23640	552	12	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
23640	552	12	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
23641	568	8	ArrayFieldVector.java	ebeMultiply	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
23641	568	8	ArrayFieldVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
23642	581	12	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
23642	581	12	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
23643	597	8	ArrayFieldVector.java	ebeDivide	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
23643	597	8	ArrayFieldVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
23644	624	12	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
23644	624	12	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
23645	640	8	ArrayFieldVector.java	dotProduct	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
23645	640	8	ArrayFieldVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
23646	668	12	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
23646	668	12	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
23647	669	16	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
23647	669	16	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
23648	687	8	ArrayFieldVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
23648	687	8	ArrayFieldVector.java	outerProduct	m	int	0	NIL-FOR	i < $
23649	688	12	ArrayFieldVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
23649	688	12	ArrayFieldVector.java	outerProduct	n	int	0	NIL-FOR	j < $
23650	758	16	ArrayFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
23650	758	16	ArrayFieldVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
23650	758	16	ArrayFieldVector.java	setSubVector	v	FieldVector<T>	0	NIL-FOR	i < index + $.getDimension()
1591	813	8	ArrayFieldVector.java	checkVectorDimensions	THIS	ArrayFieldVector	0	DimensionMismatchException	$.data.$.length != n
1591	813	8	ArrayFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1592	827	8	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$ == other
1592	827	8	ArrayFieldVector.java	equals	other	Object	0	RET	this == $
1593	830	8	ArrayFieldVector.java	equals	other	Object	0	RET	$ == null
1594	837	12	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data.$.length != rhs.getDimension()
1594	837	12	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data.length != $.getDimension()
23651	841	12	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	NIL-FOR	i < $.data.$.length
23651	841	12	ArrayFieldVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1595	842	16	ArrayFieldVector.java	equals	THIS	ArrayFieldVector	0	RET	$.data[i].equals(rhs.getEntry(i))
1595	842	16	ArrayFieldVector.java	equals	i	int	0	RET	data[$].equals(rhs.getEntry($))
1595	842	16	ArrayFieldVector.java	equals	rhs	FieldVector<T>	0	RET	data[i].equals($.getEntry(i))
1596	874	8	ArrayFieldVector.java	checkIndex	THIS	ArrayFieldVector	0	OutOfRangeException	index >= $.getDimension()
1596	874	8	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1596	874	8	ArrayFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1159	104	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1160	121	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NullArgumentException	$ == null
1161	124	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1161	124	8	ArrayRealVector.java	ArrayRealVector	d	double[]	0	NumberIsTooLargeException	$.length < pos + size
1161	124	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1161	124	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
23001	138	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < d.$.length
23001	138	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < d.length
23001	138	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NIL-FOR	i < $.length
1162	154	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NullArgumentException	$ == null
1163	157	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NumberIsTooLargeException	d.$.length < pos + size
1163	157	8	ArrayRealVector.java	ArrayRealVector	d	Double[]	0	NumberIsTooLargeException	$.length < pos + size
1163	157	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NumberIsTooLargeException	d.length < $ + size
1163	157	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NumberIsTooLargeException	d.length < pos + $
23002	161	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < pos + size
23002	161	8	ArrayRealVector.java	ArrayRealVector	pos	int	0	NIL-FOR	i < $ + size
23002	161	8	ArrayRealVector.java	ArrayRealVector	size	int	0	NIL-FOR	i < pos + $
1164	173	8	ArrayRealVector.java	ArrayRealVector	v	RealVector	0	NullArgumentException	$ == null
23003	177	8	ArrayRealVector.java	ArrayRealVector	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
23003	177	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < data.length
23004	224	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l2
23004	224	8	ArrayRealVector.java	ArrayRealVector	l2	int	0	NIL-FOR	i < $
23005	238	8	ArrayRealVector.java	ArrayRealVector	i	int	0	NIL-FOR	$ < l1
23005	238	8	ArrayRealVector.java	ArrayRealVector	l1	int	0	NIL-FOR	i < $
1165	292	8	ArrayRealVector.java	add	v	RealVector	1	RET	$ instanceof ArrayRealVector
23006	298	12	ArrayRealVector.java	add	i	int	0	NIL-FOR	$ < dim
23006	298	12	ArrayRealVector.java	add	dim	int	0	NIL-FOR	i < $
23007	306	12	ArrayRealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1166	317	8	ArrayRealVector.java	subtract	v	RealVector	1	RET	$ instanceof ArrayRealVector
23008	323	12	ArrayRealVector.java	subtract	i	int	0	NIL-FOR	$ < dim
23008	323	12	ArrayRealVector.java	subtract	dim	int	0	NIL-FOR	i < $
23009	331	12	ArrayRealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
23010	348	8	ArrayRealVector.java	mapToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
23010	348	8	ArrayRealVector.java	mapToSelf	i	int	0	NIL-FOR	$ < data.length
23011	357	8	ArrayRealVector.java	mapAddToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
23011	357	8	ArrayRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < data.length
23012	366	8	ArrayRealVector.java	mapSubtractToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
23012	366	8	ArrayRealVector.java	mapSubtractToSelf	i	int	0	NIL-FOR	$ < data.length
23013	375	8	ArrayRealVector.java	mapMultiplyToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
23013	375	8	ArrayRealVector.java	mapMultiplyToSelf	i	int	0	NIL-FOR	$ < data.length
23014	384	8	ArrayRealVector.java	mapDivideToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
23014	384	8	ArrayRealVector.java	mapDivideToSelf	i	int	0	NIL-FOR	$ < data.length
1167	393	8	ArrayRealVector.java	ebeMultiply	v	RealVector	1	RET	$ instanceof ArrayRealVector
23015	399	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < dim
23015	399	12	ArrayRealVector.java	ebeMultiply	dim	int	0	NIL-FOR	i < $
23016	406	12	ArrayRealVector.java	ebeMultiply	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
23016	406	12	ArrayRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < data.length
1168	416	8	ArrayRealVector.java	ebeDivide	v	RealVector	1	RET	$ instanceof ArrayRealVector
23017	422	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < dim
23017	422	12	ArrayRealVector.java	ebeDivide	dim	int	0	NIL-FOR	i < $
23018	429	12	ArrayRealVector.java	ebeDivide	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
23018	429	12	ArrayRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < data.length
1169	449	8	ArrayRealVector.java	dotProduct	v	RealVector	0	RET	$ instanceof ArrayRealVector
23019	453	12	ArrayRealVector.java	dotProduct	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
23019	453	12	ArrayRealVector.java	dotProduct	i	int	0	NIL-FOR	$ < data.length
1170	494	8	ArrayRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
23020	498	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
23020	498	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
23021	506	12	ArrayRealVector.java	getDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
23021	506	12	ArrayRealVector.java	getDistance	i	int	0	NIL-FOR	$ < data.length
1171	517	8	ArrayRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof ArrayRealVector
23022	521	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
23022	521	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
23023	529	12	ArrayRealVector.java	getL1Distance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
23023	529	12	ArrayRealVector.java	getL1Distance	i	int	0	NIL-FOR	$ < data.length
1172	540	8	ArrayRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof ArrayRealVector
23024	544	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
23024	544	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
23025	552	12	ArrayRealVector.java	getLInfDistance	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
23025	552	12	ArrayRealVector.java	getLInfDistance	i	int	0	NIL-FOR	$ < data.length
1173	563	8	ArrayRealVector.java	outerProduct	v	RealVector	1	RET	$ instanceof ArrayRealVector
23026	568	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
23026	568	12	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
23027	569	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
23027	569	16	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
23028	578	12	ArrayRealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
23028	578	12	ArrayRealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
23029	579	16	ArrayRealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
23029	579	16	ArrayRealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1174	636	8	ArrayRealVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
1175	673	8	ArrayRealVector.java	setSubVector	v	RealVector	1	DEF	$ instanceof ArrayRealVector
23030	677	16	ArrayRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < index + v.getDimension()
23030	677	16	ArrayRealVector.java	setSubVector	index	int	0	NIL-FOR	i < $ + v.getDimension()
23030	677	16	ArrayRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < index + $.getDimension()
1176	743	8	ArrayRealVector.java	checkVectorDimensions	THIS	ArrayRealVector	0	DimensionMismatchException	$.data.$.length != n
1176	743	8	ArrayRealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	data.length != $
1177	757	12	ArrayRealVector.java	isNaN	THIS	ArrayRealVector	0	RET	Double.isNaN($.v)
1178	773	8	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	$.isNaN()
1179	778	12	ArrayRealVector.java	isInfinite	THIS	ArrayRealVector	0	RET	Double.isInfinite($.v)
1180	789	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$ == other
1180	789	8	ArrayRealVector.java	equals	other	Object	0	RET	this == $
1181	793	8	ArrayRealVector.java	equals	other	Object	0	RET	$ instanceof RealVector
1182	798	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data.$.length != rhs.getDimension()
1182	798	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data.length != $.getDimension()
1183	802	8	ArrayRealVector.java	equals	rhs	RealVector	0	RET	$.isNaN()
23031	806	8	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
23031	806	8	ArrayRealVector.java	equals	i	int	0	NIL-FOR	$ < data.length
1184	807	12	ArrayRealVector.java	equals	THIS	ArrayRealVector	0	RET	$.data[i] != rhs.getEntry(i)
1184	807	12	ArrayRealVector.java	equals	i	int	0	RET	data[$] != rhs.getEntry($)
1184	807	12	ArrayRealVector.java	equals	rhs	RealVector	0	RET	data[i] != $.getEntry(i)
1185	819	8	ArrayRealVector.java	hashCode	THIS	ArrayRealVector	0	RET	$.isNaN()
1186	834	8	ArrayRealVector.java	combineToSelf	y	RealVector	1	DEF	$ instanceof ArrayRealVector
23032	837	12	ArrayRealVector.java	combineToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.length
23032	837	12	ArrayRealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < this.data.length
23033	842	12	ArrayRealVector.java	combineToSelf	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.length
23033	842	12	ArrayRealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < this.data.length
23034	853	8	ArrayRealVector.java	walkInDefaultOrder	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
23034	853	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < data.length
23035	865	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
23035	865	8	ArrayRealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
23036	896	8	ArrayRealVector.java	walkInDefaultOrder	THIS	ArrayRealVector	0	NIL-FOR	i < $.data.$.length
23036	896	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < data.length
23037	908	8	ArrayRealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
23037	908	8	ArrayRealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
23828	300	8	BOBYQAOptimizer.java	bobyqa	j	int	0	NIL-FOR	$ < n
23828	300	8	BOBYQAOptimizer.java	bobyqa	n	int	0	NIL-FOR	j < $
1819	304	12	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= -$.initialTrustRegionRadius
1819	304	12	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= -initialTrustRegionRadius
1820	305	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.lowerDifference.getEntry(j) >= ZERO
1820	305	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	lowerDifference.getEntry($) >= ZERO
1821	316	19	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(j) <= $.initialTrustRegionRadius
1821	316	19	BOBYQAOptimizer.java	bobyqa	j	int	0	DEF	upperDifference.getEntry($) <= initialTrustRegionRadius
1822	317	16	BOBYQAOptimizer.java	bobyqa	THIS	BOBYQAOptimizer	1	DEF	$.upperDifference.getEntry(j) <= ZERO
1822	317	16	BOBYQAOptimizer.java	bobyqa	j	int	1	DEF	upperDifference.getEntry($) <= ZERO
23829	411	8	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
23829	411	8	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1823	448	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex != kbase
1823	448	12	BOBYQAOptimizer.java	bobyqb	kbase	int	0	DEF	trustRegionCenterInterpolationPointIndex != $
23830	450	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
23830	450	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
23831	451	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
23831	451	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
1824	452	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
1824	452	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
1825	459	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() > npt
1825	459	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	getEvaluations() > $
23832	460	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
23832	460	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
23833	462	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
23833	462	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
23834	466	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
23834	466	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1826	499	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm < HALF * $
1826	499	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ < HALF * rho
1827	504	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.getEvaluations() <= nfsav + 2
1827	504	16	BOBYQAOptimizer.java	bobyqb	nfsav	int	0	DEF	getEvaluations() <= $ + 2
1828	518	16	BOBYQAOptimizer.java	bobyqb	errbig	double	0	DEF	$ > frhosq * crvmin
1828	518	16	BOBYQAOptimizer.java	bobyqb	frhosq	double	0	DEF	errbig > $ * crvmin
1828	518	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	errbig > frhosq * $
1828	518	16	BOBYQAOptimizer.java	bobyqb	crvmin	double	0	DEF	$ > ZERO
23835	523	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
23835	523	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1829	525	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.lowerDifference.getEntry(j)
1829	525	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
1830	528	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(j) == $.upperDifference.getEntry(j)
1830	528	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
1831	531	20	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
1831	531	20	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
23836	533	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
23836	533	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1832	539	24	BOBYQAOptimizer.java	bobyqb	bdtest	double	0	DEF	$ < bdtol
1832	539	24	BOBYQAOptimizer.java	bobyqb	bdtol	double	0	DEF	bdtest < $
1833	558	12	BOBYQAOptimizer.java	bobyqb	dsq	double	0	DEF	$ <= xoptsq * ONE_OVER_A_THOUSAND
1833	558	12	BOBYQAOptimizer.java	bobyqb	xoptsq	double	0	DEF	dsq <= $ * ONE_OVER_A_THOUSAND
23837	563	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
23837	563	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
23838	566	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
23838	566	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
23839	572	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
23839	572	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
23840	576	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
23840	576	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
23841	587	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
23841	587	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
23842	590	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
23842	590	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
23843	595	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
23843	595	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
23844	597	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
23844	597	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
23845	601	24	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
23845	601	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
23846	607	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
23846	607	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
23847	610	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
23847	610	24	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
23848	622	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
23848	622	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
23849	624	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
23849	624	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
23850	628	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
23850	628	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
23851	637	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
23851	637	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1834	646	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
23852	678	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
23852	678	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
23853	689	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
23853	689	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
23854	693	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
23854	693	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
23855	703	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
23855	703	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
23856	705	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
23856	705	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
23857	709	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
23857	709	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
23858	716	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
23858	716	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
23859	721	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
23859	721	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
23860	726	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
23860	726	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1835	745	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	1	DEF	$ == 0
1836	749	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	$ > ZERO
1836	749	16	BOBYQAOptimizer.java	bobyqb	cauchy	double	0	DEF	denom < $
1836	749	16	BOBYQAOptimizer.java	bobyqb	denom	double	0	DEF	$ < cauchy
23861	750	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
23861	750	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
23862	768	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
23862	768	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1837	769	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
1837	769	20	BOBYQAOptimizer.java	bobyqb	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
23863	773	20	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
23863	773	20	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
23864	782	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
23864	782	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1838	791	20	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
1838	791	20	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
1838	791	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
23865	812	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
23865	812	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1839	820	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.lowerDifference.getEntry(i)
1839	820	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == lowerDifference.getEntry($)
1840	823	16	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.newPoint.getEntry(i) == $.upperDifference.getEntry(i)
1840	823	16	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	newPoint.getEntry($) == upperDifference.getEntry($)
1841	830	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.isMinimize
1842	832	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
23866	843	12	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
23866	843	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
23867	845	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
23867	845	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
1843	847	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ == j
1843	847	20	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i == $
23868	854	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
23868	854	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1844	864	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	dnorm > $
1844	864	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	$ > rho
1845	870	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	MathIllegalStateException	$ > 0
1846	871	16	BOBYQAOptimizer.java	bobyqb	vquad	double	0	MathIllegalStateException	$ >= ZERO
1847	876	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= ONE_OVER_TEN
1848	879	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= .7
1849	886	16	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
1849	886	16	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
1850	892	16	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
1850	892	16	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
23869	899	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
23869	899	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
23870	901	24	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
23870	901	24	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
23871	910	24	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
23871	910	24	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1851	919	24	BOBYQAOptimizer.java	bobyqb	den	double	0	DEF	temp * $ > scaden
1851	919	24	BOBYQAOptimizer.java	bobyqb	temp	double	0	DEF	$ * den > scaden
1851	919	24	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	temp * den > $
1852	930	20	BOBYQAOptimizer.java	bobyqb	scaden	double	0	DEF	$ <= HALF * biglsq
1852	930	20	BOBYQAOptimizer.java	bobyqb	biglsq	double	0	DEF	scaden <= HALF * $
23872	945	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
23872	945	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
23873	947	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ <= i
23873	947	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	j <= $
23874	952	12	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
23874	952	12	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
23875	954	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
23875	954	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
23876	963	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
23876	963	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
23877	967	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
23877	967	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
23878	969	16	BOBYQAOptimizer.java	bobyqb	m	int	0	NIL-FOR	$ < nptm
23878	969	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	m < $
23879	973	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
23879	973	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
23880	977	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
23880	977	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
23881	981	12	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
23881	981	12	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1853	987	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f < $
1853	987	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ < fopt
23882	991	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
23882	991	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
23883	996	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ <= j
23883	996	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	i <= $
1854	997	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < j
1854	997	24	BOBYQAOptimizer.java	bobyqb	j	int	0	DEF	i < $
23884	1004	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
23884	1004	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
23885	1006	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
23885	1006	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
23886	1010	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
23886	1010	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1855	1020	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ > 0
23887	1021	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
23887	1021	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
23888	1025	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < nptm
23888	1025	16	BOBYQAOptimizer.java	bobyqb	nptm	int	0	NIL-FOR	j < $
23889	1027	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
23889	1027	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
23890	1030	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
23890	1030	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
23891	1034	16	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
23891	1034	16	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
23892	1036	20	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
23892	1036	20	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
23893	1044	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
23893	1044	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
23894	1046	20	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
23894	1046	20	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
1856	1050	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
1856	1050	20	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
1857	1058	27	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
1857	1058	27	BOBYQAOptimizer.java	bobyqb	i	int	1	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
1858	1079	16	BOBYQAOptimizer.java	bobyqb	gqsq	double	0	DEF	$ < TEN * gisq
1858	1079	16	BOBYQAOptimizer.java	bobyqb	gisq	double	0	DEF	gqsq < TEN * $
1859	1082	16	BOBYQAOptimizer.java	bobyqb	itest	int	0	DEF	$ >= 3
23895	1083	20	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < max
23895	1083	20	BOBYQAOptimizer.java	bobyqb	max	int	0	NIL-FOR	i < $
1860	1084	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < n
1860	1084	24	BOBYQAOptimizer.java	bobyqb	n	int	0	DEF	i < $
1861	1087	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < npt
1861	1087	24	BOBYQAOptimizer.java	bobyqb	npt	int	0	DEF	i < $
1862	1090	24	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	$ < nh
1862	1090	24	BOBYQAOptimizer.java	bobyqb	nh	int	0	DEF	i < $
1863	1102	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == 0
1864	1105	12	BOBYQAOptimizer.java	bobyqb	fopt	double	0	DEF	f <= $ + ONE_OVER_TEN * vquad
1864	1105	12	BOBYQAOptimizer.java	bobyqb	vquad	double	0	DEF	f <= fopt + ONE_OVER_TEN * $
1864	1105	12	BOBYQAOptimizer.java	bobyqb	f	double	0	DEF	$ <= fopt + ONE_OVER_TEN * vquad
23896	1122	12	BOBYQAOptimizer.java	bobyqb	k	int	0	NIL-FOR	$ < npt
23896	1122	12	BOBYQAOptimizer.java	bobyqb	npt	int	0	NIL-FOR	k < $
23897	1124	16	BOBYQAOptimizer.java	bobyqb	j	int	0	NIL-FOR	$ < n
23897	1124	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	j < $
1865	1129	16	BOBYQAOptimizer.java	bobyqb	sum	double	0	DEF	$ > distsq
1865	1129	16	BOBYQAOptimizer.java	bobyqb	distsq	double	0	DEF	sum > $
1866	1141	12	BOBYQAOptimizer.java	bobyqb	knew	int	0	DEF	$ >= 0
1867	1143	16	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
1868	1146	20	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	delta <= $ * 1.5
1868	1146	20	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	$ <= rho * 1.5
1869	1158	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
1870	1161	12	BOBYQAOptimizer.java	bobyqb	ratio	double	0	DEF	$ > ZERO
1871	1164	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	Math.max(delta, dnorm) > $
1871	1164	12	BOBYQAOptimizer.java	bobyqb	delta	double	0	DEF	Math.max($, dnorm) > rho
1871	1164	12	BOBYQAOptimizer.java	bobyqb	dnorm	double	0	DEF	Math.max(delta, $) > rho
1872	1173	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	rho > $.stoppingTrustRegionRadius
1872	1173	12	BOBYQAOptimizer.java	bobyqb	rho	double	0	DEF	$ > stoppingTrustRegionRadius
1873	1176	16	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= SIXTEEN
1874	1178	23	BOBYQAOptimizer.java	bobyqb	ratio	double	1	DEF	$ <= TWO_HUNDRED_FIFTY
1875	1192	12	BOBYQAOptimizer.java	bobyqb	ntrits	int	0	DEF	$ == -1
1876	1198	12	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex) <= fsave
1876	1198	12	BOBYQAOptimizer.java	bobyqb	fsave	double	0	DEF	fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex) <= $
23898	1199	16	BOBYQAOptimizer.java	bobyqb	i	int	0	NIL-FOR	$ < n
23898	1199	16	BOBYQAOptimizer.java	bobyqb	n	int	0	NIL-FOR	i < $
1877	1207	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.lowerDifference.getEntry(i)
1877	1207	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == lowerDifference.getEntry($)
1878	1210	20	BOBYQAOptimizer.java	bobyqb	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) == $.upperDifference.getEntry(i)
1878	1210	20	BOBYQAOptimizer.java	bobyqb	i	int	0	DEF	trustRegionCenterOffset.getEntry($) == upperDifference.getEntry($)
23899	1273	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
23899	1273	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
23900	1276	8	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < max
23900	1276	8	BOBYQAOptimizer.java	altmov	max	int	0	NIL-FOR	j < $
23901	1278	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
23901	1278	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
23902	1287	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
23902	1287	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
23903	1290	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
23903	1290	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
23904	1292	12	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
23904	1292	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
23905	1296	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
23905	1296	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
23906	1312	8	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
23906	1312	8	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
1879	1313	12	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	k == $.trustRegionCenterInterpolationPointIndex
1879	1313	12	BOBYQAOptimizer.java	altmov	k	int	0	DEF	$ == trustRegionCenterInterpolationPointIndex
23907	1318	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
23907	1318	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
23908	1331	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
23908	1331	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1880	1333	16	BOBYQAOptimizer.java	altmov	tmp	double	1	DEF	$ > ZERO
1881	1334	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
1881	1334	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1881	1334	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
1881	1334	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1882	1338	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
1882	1338	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1882	1338	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
1882	1338	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1883	1344	23	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	$ < ZERO
1884	1345	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	slbd * tmp > $.upperDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
1884	1345	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	slbd * $ > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1884	1345	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	slbd * tmp > upperDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
1884	1345	20	BOBYQAOptimizer.java	altmov	slbd	double	0	DEF	$ * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1885	1349	20	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	subd * tmp < $.lowerDifference.getEntry(i) - $.trustRegionCenterOffset.getEntry(i)
1885	1349	20	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	subd * $ < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1885	1349	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	subd * tmp < lowerDifference.getEntry($) - trustRegionCenterOffset.getEntry($)
1885	1349	20	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)
1886	1364	12	BOBYQAOptimizer.java	altmov	k	int	1	DEF	$ == knew
1886	1364	12	BOBYQAOptimizer.java	altmov	knew	int	1	DEF	k == $
1887	1368	16	BOBYQAOptimizer.java	altmov	d1	double	0	DEF	Math.abs($) > Math.abs(vlag)
1887	1368	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d1) > Math.abs($)
1888	1376	16	BOBYQAOptimizer.java	altmov	d3	double	0	DEF	$ * d4 < ZERO
1888	1376	16	BOBYQAOptimizer.java	altmov	d4	double	0	DEF	d3 * $ < ZERO
1889	1378	20	BOBYQAOptimizer.java	altmov	d5	double	0	DEF	Math.abs($) > Math.abs(vlag)
1889	1378	20	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(d5) > Math.abs($)
1890	1390	16	BOBYQAOptimizer.java	altmov	tmp	double	0	DEF	Math.abs($) > Math.abs(vlag)
1890	1390	16	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs(tmp) > Math.abs($)
1891	1395	16	BOBYQAOptimizer.java	altmov	subd	double	0	DEF	$ > HALF
1892	1396	20	BOBYQAOptimizer.java	altmov	vlag	double	0	DEF	Math.abs($) < ONE_OVER_FOUR
1893	1409	12	BOBYQAOptimizer.java	altmov	predsq	double	0	DEF	$ > presav
1893	1409	12	BOBYQAOptimizer.java	altmov	presav	double	0	DEF	predsq > $
23909	1419	8	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
23909	1419	8	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1894	1424	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ < 0
1895	1427	8	BOBYQAOptimizer.java	altmov	ibdsav	int	0	DEF	$ > 0
23910	1442	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
23910	1442	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1896	1445	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.min($.trustRegionCenterOffset.getEntry(i) - $.lowerDifference.getEntry(i), glagValue) > ZERO
1896	1445	16	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	0	DEF	Math.max($.trustRegionCenterOffset.getEntry(i) - $.upperDifference.getEntry(i), glagValue) < ZERO
1896	1445	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), $) > ZERO
1896	1445	16	BOBYQAOptimizer.java	altmov	glagValue	double	0	DEF	Math.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i), $) < ZERO
1896	1445	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.min(trustRegionCenterOffset.getEntry($) - lowerDifference.getEntry($), glagValue) > ZERO
1896	1445	16	BOBYQAOptimizer.java	altmov	i	int	0	DEF	Math.max(trustRegionCenterOffset.getEntry($) - upperDifference.getEntry($), glagValue) < ZERO
1897	1452	12	BOBYQAOptimizer.java	altmov	ggfree	double	0	RET	$ == ZERO
1898	1458	12	BOBYQAOptimizer.java	altmov	tmp1	double	0	DEF	$ > ZERO
23911	1461	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
23911	1461	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1899	1462	20	BOBYQAOptimizer.java	altmov	i	int	0	DEF	work1.getEntry($) == bigstp
1899	1462	20	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	0	DEF	$.getEntry(i) == bigstp
1899	1462	20	BOBYQAOptimizer.java	altmov	bigstp	double	0	DEF	work1.getEntry(i) == $
1900	1464	24	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 <= $.lowerDifference.getEntry(i)
1900	1464	24	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ <= lowerDifference.getEntry(i)
1900	1464	24	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 <= lowerDifference.getEntry($)
1901	1469	31	BOBYQAOptimizer.java	altmov	THIS	BOBYQAOptimizer	1	DEF	tmp2 >= $.upperDifference.getEntry(i)
1901	1469	31	BOBYQAOptimizer.java	altmov	tmp2	double	1	DEF	$ >= upperDifference.getEntry(i)
1901	1469	31	BOBYQAOptimizer.java	altmov	i	int	1	DEF	tmp2 >= upperDifference.getEntry($)
23912	1487	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
23912	1487	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1902	1489	16	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == bigstp
1902	1489	16	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == bigstp
1902	1489	16	BOBYQAOptimizer.java	altmov	bigstp	double	1	DEF	work1.getEntry(i) == $
1903	1494	23	BOBYQAOptimizer.java	altmov	i	int	1	DEF	work1.getEntry($) == ZERO
1903	1494	23	BOBYQAOptimizer.java	altmov	work1	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
1904	1496	23	BOBYQAOptimizer.java	altmov	glagValue	double	1	DEF	$ > ZERO
23913	1510	12	BOBYQAOptimizer.java	altmov	k	int	0	NIL-FOR	$ < npt
23913	1510	12	BOBYQAOptimizer.java	altmov	npt	int	0	NIL-FOR	k < $
23914	1512	16	BOBYQAOptimizer.java	altmov	j	int	0	NIL-FOR	$ < n
23914	1512	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	j < $
1905	1517	12	BOBYQAOptimizer.java	altmov	iflag	int	0	DEF	$ == 1
1906	1520	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv > -$
1906	1520	12	BOBYQAOptimizer.java	altmov	gw	double	1	DEF	curv < -$ * (ONE + Math.sqrt(TWO))
1906	1520	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ > -gw
1906	1520	12	BOBYQAOptimizer.java	altmov	curv	double	1	DEF	$ < -gw * (ONE + Math.sqrt(TWO))
23915	1523	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
23915	1523	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1907	1541	12	BOBYQAOptimizer.java	altmov	iflag	int	1	DEF	$ == 0
23916	1542	16	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
23916	1542	16	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
1908	1552	8	BOBYQAOptimizer.java	altmov	cauchy	double	0	DEF	csave > $
1908	1552	8	BOBYQAOptimizer.java	altmov	csave	double	0	DEF	$ > cauchy
23917	1553	12	BOBYQAOptimizer.java	altmov	i	int	0	NIL-FOR	$ < n
23917	1553	12	BOBYQAOptimizer.java	altmov	n	int	0	NIL-FOR	i < $
23918	1599	8	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
23918	1599	8	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
23919	1601	12	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
23919	1601	12	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
23920	1604	12	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < ndim
23920	1604	12	BOBYQAOptimizer.java	prelim	ndim	int	0	NIL-FOR	i < $
23921	1608	8	BOBYQAOptimizer.java	prelim	i	int	0	NIL-FOR	$ < max
23921	1608	8	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	i < $
23922	1611	8	BOBYQAOptimizer.java	prelim	k	int	0	NIL-FOR	$ < npt
23922	1611	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-FOR	k < $
23923	1613	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < max
23923	1613	12	BOBYQAOptimizer.java	prelim	max	int	0	NIL-FOR	j < $
23924	1625	8	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	NIL-DOWHILE	$.getEvaluations() < npt
23924	1625	8	BOBYQAOptimizer.java	prelim	npt	int	0	NIL-DOWHILE	getEvaluations() < $
1909	1632	12	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= 2 * n
1909	1632	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= 2 * $
1910	1633	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ >= 1
1910	1633	16	BOBYQAOptimizer.java	prelim	nfm	int	1	DEF	$ <= n
1910	1633	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	nfm <= $
1911	1636	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfmm) == ZERO
1911	1636	20	BOBYQAOptimizer.java	prelim	nfmm	int	0	DEF	upperDifference.getEntry($) == ZERO
1912	1641	23	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	$ > n
1912	1641	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	nfm > $
1913	1644	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.lowerDifference.getEntry(nfxm) == ZERO
1913	1644	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	lowerDifference.getEntry($) == ZERO
1914	1648	20	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.upperDifference.getEntry(nfxm) == ZERO
1914	1648	20	BOBYQAOptimizer.java	prelim	nfxm	int	0	DEF	upperDifference.getEntry($) == ZERO
1915	1658	16	BOBYQAOptimizer.java	prelim	n	int	0	DEF	ipt > $
1915	1658	16	BOBYQAOptimizer.java	prelim	ipt	int	0	DEF	$ > n
23925	1673	12	BOBYQAOptimizer.java	prelim	j	int	0	NIL-FOR	$ < n
23925	1673	12	BOBYQAOptimizer.java	prelim	n	int	0	NIL-FOR	j < $
1916	1677	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.lowerDifference.getEntry(j)
1916	1677	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == lowerDifference.getEntry($)
1916	1677	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == lowerDifference.getEntry(j)
1917	1680	16	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.interpolationPoints.getEntry(nfm, j) == $.upperDifference.getEntry(j)
1917	1680	16	BOBYQAOptimizer.java	prelim	j	int	0	DEF	interpolationPoints.getEntry(nfm, $) == upperDifference.getEntry($)
1917	1680	16	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	interpolationPoints.getEntry($, j) == upperDifference.getEntry(j)
1918	1690	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ == 1
1919	1693	19	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry($.trustRegionCenterInterpolationPointIndex)
1919	1693	19	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)
1920	1703	12	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= 2 * n + 1
1920	1703	12	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= 2 * $ + 1
1921	1704	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ <= n + 1
1921	1704	16	BOBYQAOptimizer.java	prelim	numEval	int	1	DEF	$ >= 2
1921	1704	16	BOBYQAOptimizer.java	prelim	n	int	1	DEF	numEval <= $ + 1
1922	1707	20	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	npt < $ + n
1922	1707	20	BOBYQAOptimizer.java	prelim	n	int	0	DEF	npt < numEval + $
1922	1707	20	BOBYQAOptimizer.java	prelim	npt	int	0	DEF	$ < numEval + n
1923	1714	23	BOBYQAOptimizer.java	prelim	numEval	int	0	DEF	$ >= n + 2
1923	1714	23	BOBYQAOptimizer.java	prelim	n	int	0	DEF	numEval >= $ + 2
1924	1720	20	BOBYQAOptimizer.java	prelim	stepa	double	0	DEF	$ * stepb < ZERO
1924	1720	20	BOBYQAOptimizer.java	prelim	stepb	double	0	DEF	stepa * $ < ZERO
1925	1721	24	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	f < $.fAtInterpolationPoints.getEntry(nfm - n)
1925	1721	24	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	f < fAtInterpolationPoints.getEntry($ - n)
1925	1721	24	BOBYQAOptimizer.java	prelim	f	double	0	DEF	$ < fAtInterpolationPoints.getEntry(nfm - n)
1925	1721	24	BOBYQAOptimizer.java	prelim	n	int	0	DEF	f < fAtInterpolationPoints.getEntry(nfm - $)
1926	1724	28	BOBYQAOptimizer.java	prelim	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterInterpolationPointIndex == nfm
1926	1724	28	BOBYQAOptimizer.java	prelim	nfm	int	0	DEF	trustRegionCenterInterpolationPointIndex == $
23926	1851	8	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
23926	1851	8	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1927	1853	12	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	1	DEF	$.trustRegionCenterOffset.getEntry(i) <= $.lowerDifference.getEntry(i)
1927	1853	12	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	trustRegionCenterOffset.getEntry($) <= lowerDifference.getEntry($)
1928	1854	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) >= ZERO
1928	1854	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) >= ZERO
1929	1857	19	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.trustRegionCenterOffset.getEntry(i) >= $.upperDifference.getEntry(i)
1929	1857	19	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	trustRegionCenterOffset.getEntry($) >= upperDifference.getEntry($)
1930	1858	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.gradientAtTrustRegionCenter.getEntry(i) <= ZERO
1930	1858	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	gradientAtTrustRegionCenter.getEntry($) <= ZERO
1931	1862	12	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) != ZERO
1931	1862	12	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
23927	1888	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
23927	1888	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1932	1889	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) != ZERO
1932	1889	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) != ZERO
1933	1891	23	BOBYQAOptimizer.java	trsbox	beta	double	1	DEF	$ == ZERO
1934	1900	12	BOBYQAOptimizer.java	trsbox	stepsq	double	0	DEF	$ == ZERO
1935	1903	12	BOBYQAOptimizer.java	trsbox	beta	double	0	DEF	$ == ZERO
1936	1907	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	gredsq * delsq <= $ * 1e-4 * $
1936	1907	12	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	gredsq * $ <= qred * 1e-4 * qred
1936	1907	12	BOBYQAOptimizer.java	trsbox	gredsq	double	0	DEF	$ * delsq <= qred * 1e-4 * qred
23928	1923	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
23928	1923	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1937	1924	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1937	1924	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
1938	1932	12	BOBYQAOptimizer.java	trsbox	resid	double	0	DEF	$ <= ZERO
1939	1936	12	BOBYQAOptimizer.java	trsbox	ds	double	1	DEF	$ < ZERO
1940	1942	12	BOBYQAOptimizer.java	trsbox	shs	double	0	DEF	$ > ZERO
23929	1951	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
23929	1951	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1941	1952	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	s.getEntry($) != ZERO
1941	1952	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(i) != ZERO
1942	1954	20	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	s.getEntry($) > ZERO
1942	1954	20	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	1	DEF	$.getEntry(i) > ZERO
1943	1959	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ < stplen
1943	1959	20	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	temp < $
1944	1969	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ > ZERO
1945	1972	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ == -1
1945	1972	16	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
1946	1974	20	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ == MINUS_ONE
23930	1980	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
23930	1980	16	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1947	1982	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1947	1982	20	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
1948	1997	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
1949	2000	16	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	s.getEntry($) < ZERO
1949	2000	16	BOBYQAOptimizer.java	trsbox	s	ArrayRealVector	0	DEF	$.getEntry(iact) < ZERO
1950	2006	16	BOBYQAOptimizer.java	trsbox	delsq	double	0	DEF	$ <= ZERO
1951	2015	12	BOBYQAOptimizer.java	trsbox	blen	double	0	DEF	stplen < $
1951	2015	12	BOBYQAOptimizer.java	trsbox	stplen	double	0	DEF	$ < blen
1952	2016	16	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ == itermax
1952	2016	16	BOBYQAOptimizer.java	trsbox	itermax	int	0	DEF	iterc == $
1953	2019	16	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= qred * .01
1953	2019	16	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec <= $ * .01
1954	2037	12	BOBYQAOptimizer.java	trsbox	n	int	0	DEF	nact >= $ - 1
1954	2037	12	BOBYQAOptimizer.java	trsbox	nact	int	0	DEF	$ >= n - 1
23931	2043	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
23931	2043	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1955	2044	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
1955	2044	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
1956	2066	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	temp <= $ * 1e-4 * $
1956	2066	12	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ <= qred * 1e-4 * qred
23932	2070	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
23932	2070	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1957	2071	16	BOBYQAOptimizer.java	trsbox	i	int	1	DEF	xbdi.getEntry($) == ZERO
1957	2071	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	1	DEF	$.getEntry(i) == ZERO
23933	2086	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
23933	2086	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1958	2087	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1958	2087	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
1959	2090	20	BOBYQAOptimizer.java	trsbox	tempa	double	1	DEF	$ <= ZERO
1960	2094	27	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	$ <= ZERO
1961	2107	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
1962	2109	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempa
1962	2109	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempa
1962	2109	24	BOBYQAOptimizer.java	trsbox	tempa	double	0	DEF	angbd * temp > $
1963	2118	20	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	$ > ZERO
1964	2120	24	BOBYQAOptimizer.java	trsbox	temp	double	0	DEF	angbd * $ > tempb
1964	2120	24	BOBYQAOptimizer.java	trsbox	angbd	double	0	DEF	$ * temp > tempb
1964	2120	24	BOBYQAOptimizer.java	trsbox	tempb	double	0	DEF	angbd * temp > $
23934	2138	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
23934	2138	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1965	2139	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1965	2139	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
23935	2154	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < iu
23935	2154	12	BOBYQAOptimizer.java	trsbox	iu	int	0	NIL-FOR	i < $
1966	2159	16	BOBYQAOptimizer.java	trsbox	redmax	double	1	DEF	rednew > $
1966	2159	16	BOBYQAOptimizer.java	trsbox	rednew	double	1	DEF	$ > redmax
1967	2163	23	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ == isav + 1
1967	2163	23	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	i == $ + 1
1968	2172	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < 0
1969	2175	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav < $
1969	2175	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ < iu
1970	2183	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ <= ZERO
23936	2193	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
23936	2193	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1971	2195	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ZERO
1971	2195	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ZERO
1972	2205	12	BOBYQAOptimizer.java	trsbox	iu	int	0	DEF	isav == $
1972	2205	12	BOBYQAOptimizer.java	trsbox	iact	int	0	DEF	$ >= 0
1972	2205	12	BOBYQAOptimizer.java	trsbox	isav	int	0	DEF	$ == iu
1973	2214	12	BOBYQAOptimizer.java	trsbox	sdec	double	0	DEF	$ > qred * .01
1973	2214	12	BOBYQAOptimizer.java	trsbox	qred	double	0	DEF	sdec > $ * .01
23937	2221	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
23937	2221	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1974	2227	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == MINUS_ONE
1974	2227	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == MINUS_ONE
1975	2230	16	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	xbdi.getEntry($) == ONE
1975	2230	16	BOBYQAOptimizer.java	trsbox	xbdi	ArrayRealVector	0	DEF	$.getEntry(i) == ONE
23938	2247	12	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	$ < n
23938	2247	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	j < $
23939	2249	16	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ <= j
23939	2249	16	BOBYQAOptimizer.java	trsbox	j	int	0	NIL-FOR	i <= $
1976	2250	20	BOBYQAOptimizer.java	trsbox	i	int	0	DEF	$ < j
1976	2250	20	BOBYQAOptimizer.java	trsbox	j	int	0	DEF	i < $
23940	2258	12	BOBYQAOptimizer.java	trsbox	k	int	0	NIL-FOR	$ < npt
23940	2258	12	BOBYQAOptimizer.java	trsbox	npt	int	0	NIL-FOR	k < $
1977	2259	16	BOBYQAOptimizer.java	trsbox	THIS	BOBYQAOptimizer	0	DEF	$.modelSecondDerivativesParameters.getEntry(k) != ZERO
1977	2259	16	BOBYQAOptimizer.java	trsbox	k	int	0	DEF	modelSecondDerivativesParameters.getEntry($) != ZERO
23941	2260	20	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
23941	2260	20	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
1978	2265	12	BOBYQAOptimizer.java	trsbox	crvmin	double	0	DEF	$ != ZERO
1979	2268	12	BOBYQAOptimizer.java	trsbox	iterc	int	0	DEF	$ > itcsav
1979	2268	12	BOBYQAOptimizer.java	trsbox	itcsav	int	0	DEF	iterc > $
23942	2271	12	BOBYQAOptimizer.java	trsbox	i	int	0	NIL-FOR	$ < n
23942	2271	12	BOBYQAOptimizer.java	trsbox	n	int	0	NIL-FOR	i < $
23943	2312	8	BOBYQAOptimizer.java	update	k	int	0	NIL-FOR	$ < npt
23943	2312	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	k < $
23944	2313	12	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
23944	2313	12	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
23945	2322	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < nptm
23945	2322	8	BOBYQAOptimizer.java	update	nptm	int	0	NIL-FOR	j < $
1980	2324	12	BOBYQAOptimizer.java	update	d1	double	0	DEF	Math.abs($) > ztest
1980	2324	12	BOBYQAOptimizer.java	update	ztest	double	0	DEF	Math.abs(d1) > $
23946	2332	16	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
23946	2332	16	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
23947	2344	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
23947	2344	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
23948	2356	8	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ < npt
23948	2356	8	BOBYQAOptimizer.java	update	npt	int	0	NIL-FOR	i < $
23949	2363	8	BOBYQAOptimizer.java	update	j	int	0	NIL-FOR	$ < n
23949	2363	8	BOBYQAOptimizer.java	update	n	int	0	NIL-FOR	j < $
23950	2368	12	BOBYQAOptimizer.java	update	i	int	0	NIL-FOR	$ <= jp
23950	2368	12	BOBYQAOptimizer.java	update	jp	int	0	NIL-FOR	i <= $
1981	2371	16	BOBYQAOptimizer.java	update	i	int	0	DEF	$ >= npt
1981	2371	16	BOBYQAOptimizer.java	update	npt	int	0	DEF	i >= $
1982	2392	8	BOBYQAOptimizer.java	setup	dimension	int	0	NumberIsTooSmallException	$ < MINIMUM_PROBLEM_DIMENSION
1983	2397	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints < nPointsInterval[0]
1983	2397	8	BOBYQAOptimizer.java	setup	THIS	BOBYQAOptimizer	0	OutOfRangeException	$.numberOfInterpolationPoints > nPointsInterval[1]
1983	2397	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints < $[0]
1983	2397	8	BOBYQAOptimizer.java	setup	nPointsInterval	int[]	0	OutOfRangeException	numberOfInterpolationPoints > $[1]
23951	2410	8	BOBYQAOptimizer.java	setup	i	int	0	NIL-FOR	$ < dimension
23951	2410	8	BOBYQAOptimizer.java	setup	dimension	int	0	NIL-FOR	i < $
1984	2414	8	BOBYQAOptimizer.java	setup	requiredMinDiff	double	0	DEF	minDiff < $
1984	2414	8	BOBYQAOptimizer.java	setup	minDiff	double	0	DEF	$ < requiredMinDiff
591	150	8	BSPTree.java	insertCut	THIS	BSPTree	0	DEF	$.cut != null
592	156	8	BSPTree.java	insertCut	chopped	SubHyperplane<S>	0	RET	$.isEmpty()
593	181	8	BSPTree.java	copySelf	THIS	BSPTree	0	RET	$.cut == null
594	242	8	BSPTree.java	visit	THIS	BSPTree	1	DEF	$.cut == null
22810	293	8	BSPTree.java	fitToCell	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
22810	293	8	BSPTree.java	fitToCell	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
595	294	12	BSPTree.java	fitToCell	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
595	294	12	BSPTree.java	fitToCell	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
596	312	8	BSPTree.java	getCell	THIS	BSPTree	0	RET	$.cut == null
597	319	8	BSPTree.java	getCell	offset	double	1	RET	FastMath.abs($) < 1.0e-10
598	321	15	BSPTree.java	getCell	offset	double	1	RET	$ <= 0
599	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute == null
599	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute.equals($.minus.$.attribute)
599	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.cut != null
599	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.cut == null
599	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.minus.$.attribute == null
599	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.attribute != null
599	336	8	BSPTree.java	condense	THIS	BSPTree	0	DEF	$.plus.$.cut == null
600	385	8	BSPTree.java	merge	THIS	BSPTree	1	RET	$.cut == null
601	388	15	BSPTree.java	merge	THIS	BSPTree	1	RET	tree.$.cut == null
601	388	15	BSPTree.java	merge	tree	BSPTree<S>	1	RET	$.cut == null
602	394	12	BSPTree.java	merge	parentTree	BSPTree<S>	0	DEF	$ != null
603	396	16	BSPTree.java	merge	isPlusChild	boolean	1	DEF	$
604	407	12	BSPTree.java	merge	THIS	BSPTree	0	DEF	merged.$.cut != null
604	407	12	BSPTree.java	merge	merged	BSPTree<S>	0	DEF	$.cut != null
605	489	8	BSPTree.java	split	THIS	BSPTree	0	RET	$.cut == null
606	500	12	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
606	500	12	BSPTree.java	split	sHyperplane	Hyperplane<S>	1	DEF	cut.side($) == Side.PLUS
607	516	12	BSPTree.java	split	THIS	BSPTree	1	DEF	$.cut.side(sHyperplane) == $.Side.PLUS
607	516	12	BSPTree.java	split	sHyperplane	Hyperplane<S>	1	DEF	cut.side($) == Side.PLUS
608	568	8	BSPTree.java	insertInTree	parentTree	BSPTree<S>	0	DEF	$ != null
609	569	12	BSPTree.java	insertInTree	isPlusChild	boolean	1	DEF	$
610	577	8	BSPTree.java	insertInTree	THIS	BSPTree	0	DEF	$.cut != null
22811	580	12	BSPTree.java	insertInTree	THIS	BSPTree	0	NIL-FOR	tree.$.parent != null
22811	580	12	BSPTree.java	insertInTree	tree	BSPTree<S>	0	NIL-FOR	$.parent != null
611	587	16	BSPTree.java	insertInTree	THIS	BSPTree	1	DEF	tree == tree.$.parent.$.plus
611	587	16	BSPTree.java	insertInTree	tree	BSPTree<S>	1	DEF	$ == $.parent.plus
612	614	8	BSPTree.java	chopOffMinus	THIS	BSPTree	0	DEF	$.cut != null
613	628	8	BSPTree.java	chopOffPlus	THIS	BSPTree	0	DEF	$.cut != null
2000	106	8	BaseAbstractMultivariateOptimizer.java	optimize	f	FUNC	0	NullArgumentException	$ == null
2001	109	8	BaseAbstractMultivariateOptimizer.java	optimize	goalType	GoalType	0	NullArgumentException	$ == null
2002	112	8	BaseAbstractMultivariateOptimizer.java	optimize	startPoint	double[]	0	NullArgumentException	$ == null
1760	95	8	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	lower	double[]	0	NumberIsTooSmallException	$ != null
1761	96	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	THIS	BaseAbstractMultivariateSimpleBoundsOptimizer	0	DimensionMismatchException	lower.$.length != dim
1761	96	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	DimensionMismatchException	lower.length != $
1761	96	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	lower	double[]	0	DimensionMismatchException	$.length != dim
23772	99	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	i	int	0	NIL-FOR	$ < dim
23772	99	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	NIL-FOR	i < $
1762	102	16	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	v	double	0	NumberIsTooSmallException	$ < lo
1762	102	16	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	lo	double	0	NumberIsTooSmallException	v < $
1763	107	8	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	upper	double[]	0	NumberIsTooLargeException	$ != null
1764	108	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	THIS	BaseAbstractMultivariateSimpleBoundsOptimizer	0	DimensionMismatchException	upper.$.length != dim
1764	108	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	DimensionMismatchException	upper.length != $
1764	108	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	upper	double[]	0	DimensionMismatchException	$.length != dim
23773	111	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	i	int	0	NIL-FOR	$ < dim
23773	111	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	NIL-FOR	i < $
1765	114	16	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	v	double	0	NumberIsTooLargeException	$ > hi
1765	114	16	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	hi	double	0	NumberIsTooLargeException	v > $
1766	121	8	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	lower	double[]	1	DEF	$ == null
23774	123	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	i	int	0	NIL-FOR	$ < dim
23774	123	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	NIL-FOR	i < $
1767	129	8	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	upper	double[]	1	DEF	$ == null
23775	131	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	i	int	0	NIL-FOR	$ < dim
23775	131	12	BaseAbstractMultivariateSimpleBoundsOptimizer.java	optimize	dim	int	0	NIL-FOR	i < $
1768	108	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	f	FUNC	0	NullArgumentException	$ == null
1769	111	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	t	double[]	0	NullArgumentException	$ == null
1770	114	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	w	double[]	0	NullArgumentException	$ == null
1771	117	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	startPoint	double[]	0	NullArgumentException	$ == null
1772	120	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	THIS	BaseAbstractMultivariateVectorOptimizer	0	DimensionMismatchException	t.$.length != w.$.length
1772	120	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	t	double[]	0	DimensionMismatchException	$.length != w.length
1772	120	8	BaseAbstractMultivariateVectorOptimizer.java	optimize	w	double[]	0	DimensionMismatchException	t.length != $.length
3396	120	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	minimalIterationCount	int	0	NotStrictlyPositiveException	$ <= 0
3397	123	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	minimalIterationCount	int	0	NumberIsTooSmallException	maximalIterationCount <= $
3397	123	8	BaseAbstractUnivariateIntegrator.java	BaseAbstractUnivariateIntegrator	maximalIterationCount	int	0	NumberIsTooSmallException	$ <= minimalIterationCount
1611	117	8	BaseAbstractUnivariateOptimizer.java	optimize	f	UnivariateFunction	0	NullArgumentException	$ == null
1612	120	8	BaseAbstractUnivariateOptimizer.java	optimize	goalType	GoalType	0	NullArgumentException	$ == null
1603	73	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	optimizer	BaseMultivariateOptimizer<FUNC>	0	NullArgumentException	$ == null
1603	73	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
1604	77	8	BaseMultivariateMultiStartOptimizer.java	BaseMultivariateMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1605	113	8	BaseMultivariateMultiStartOptimizer.java	getOptima	THIS	BaseMultivariateMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
23658	146	8	BaseMultivariateMultiStartOptimizer.java	optimize	THIS	BaseMultivariateMultiStartOptimizer	0	NIL-FOR	i < $.starts
23658	146	8	BaseMultivariateMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1606	162	8	BaseMultivariateMultiStartOptimizer.java	optimize	THIS	BaseMultivariateMultiStartOptimizer	0	DEF	$.optima[0] == null
1607	73	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	optimizer	BaseMultivariateVectorOptimizer<FUNC>	0	NullArgumentException	$ == null
1607	73	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	generator	RandomVectorGenerator	0	NullArgumentException	$ == null
1608	77	8	BaseMultivariateVectorMultiStartOptimizer.java	BaseMultivariateVectorMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1609	114	8	BaseMultivariateVectorMultiStartOptimizer.java	getOptima	THIS	BaseMultivariateVectorMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
23659	147	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	THIS	BaseMultivariateVectorMultiStartOptimizer	0	NIL-FOR	i < $.starts
23659	147	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1610	166	8	BaseMultivariateVectorMultiStartOptimizer.java	optimize	THIS	BaseMultivariateVectorMultiStartOptimizer	0	DEF	$.optima[0] == null
3387	53	8	BaseRuleFactory.java	getRule	cached	Pair<double[],double[]>	0	DEF	$ == null
3388	80	8	BaseRuleFactory.java	getRuleInternal	rule	Pair<T[],T[]>	0	RET	$ == null
3389	96	8	BaseRuleFactory.java	addRule	THIS	BaseRuleFactory	0	DimensionMismatchException	rule.getFirst().length != rule.getSecond().length
3389	96	8	BaseRuleFactory.java	addRule	rule	Pair<T[],T[]>	0	DimensionMismatchException	$.getFirst().length != $.getSecond().length
24603	128	8	BaseRuleFactory.java	convertToDouble	i	int	0	NIL-FOR	$ < len
24603	128	8	BaseRuleFactory.java	convertToDouble	len	int	0	NIL-FOR	i < $
3238	140	8	BaseSecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
3239	143	8	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
3240	168	12	BaseSecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
3241	173	12	BaseSecantSolver.java	doSolve	fx	double	1	DEF	f1 * $ < 0
3241	173	12	BaseSecantSolver.java	doSolve	f1	double	1	DEF	$ * fx < 0
3242	190	20	BaseSecantSolver.java	doSolve	x	double	0	ConvergenceException	$ == x1
3242	190	20	BaseSecantSolver.java	doSolve	x1	double	0	ConvergenceException	x == $
3243	206	12	BaseSecantSolver.java	doSolve	f1	double	0	MathInternalError:RET	FastMath.abs($) <= ftol
3243	206	12	BaseSecantSolver.java	doSolve	ftol	double	0	MathInternalError:RET	FastMath.abs(f1) <= $
3244	211	20	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
3245	216	20	BaseSecantSolver.java	doSolve	inverted	boolean	0	RET	$
3246	221	20	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ <= 0
3247	226	20	BaseSecantSolver.java	doSolve	f1	double	0	RET	$ >= 0
3248	237	12	BaseSecantSolver.java	doSolve	x0	double	0	MathInternalError:RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1), atol)
3248	237	12	BaseSecantSolver.java	doSolve	x1	double	0	MathInternalError:RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($), atol)
3248	237	12	BaseSecantSolver.java	doSolve	atol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), $)
3248	237	12	BaseSecantSolver.java	doSolve	rtol	double	0	MathInternalError:RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1), atol)
2568	120	8	Beta.java	regularizedBeta	x	double	1	DEF	Double.isNaN($)
2568	120	8	Beta.java	regularizedBeta	x	double	1	DEF	$ > 1
2568	120	8	Beta.java	regularizedBeta	x	double	1	DEF	$ < 0
2568	120	8	Beta.java	regularizedBeta	a	double	1	DEF	Double.isNaN($)
2568	120	8	Beta.java	regularizedBeta	a	double	1	DEF	$ <= 0.0
2568	120	8	Beta.java	regularizedBeta	b	double	1	DEF	Double.isNaN($)
2568	120	8	Beta.java	regularizedBeta	b	double	1	DEF	$ <= 0.0
2569	128	15	Beta.java	regularizedBeta	x	double	1	DEF	$ > (a + 1.0) / (a + b + 2.0)
2569	128	15	Beta.java	regularizedBeta	a	double	1	DEF	x > ($ + 1.0) / ($ + b + 2.0)
2569	128	15	Beta.java	regularizedBeta	b	double	1	DEF	x > (a + 1.0) / (a + $ + 2.0)
2570	195	8	Beta.java	logBeta	a	double	1	DEF	$ <= 0.0
2570	195	8	Beta.java	logBeta	a	double	1	DEF	Double.isNaN($)
2570	195	8	Beta.java	logBeta	b	double	1	DEF	Double.isNaN($)
2570	195	8	Beta.java	logBeta	b	double	1	DEF	$ <= 0.0
971	120	8	BetaDistribution.java	recomputeZ	THIS	BetaDistribution	0	DEF	Double.isNaN($.z)
972	139	8	BetaDistribution.java	density	x	double	1	RET	$ < 0
972	139	8	BetaDistribution.java	density	x	double	1	RET	$ > 1
973	141	15	BetaDistribution.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 0
974	142	12	BetaDistribution.java	density	THIS	BetaDistribution	0	NumberIsTooSmallException	$.alpha < 1
975	146	15	BetaDistribution.java	density	x	double	1	NumberIsTooSmallException:RET	$ == 1
976	147	12	BetaDistribution.java	density	THIS	BetaDistribution	0	NumberIsTooSmallException	$.beta < 1
977	160	8	BetaDistribution.java	cumulativeProbability	x	double	1	RET	$ <= 0
978	162	15	BetaDistribution.java	cumulativeProbability	x	double	1	RET	$ >= 1
1356	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	m	int	1	DEF	$ >= n
1356	75	8	BiDiagonalTransformer.java	BiDiagonalTransformer	n	int	1	DEF	m >= $
1357	90	8	BiDiagonalTransformer.java	getU	THIS	BiDiagonalTransformer	0	DEF	$.cachedU == null
23298	100	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= p
23298	100	12	BiDiagonalTransformer.java	getU	p	int	0	NIL-FOR	k >= $
23299	105	12	BiDiagonalTransformer.java	getU	k	int	0	NIL-FOR	$ >= diagOffset
23299	105	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	NIL-FOR	k >= $
1358	108	16	BiDiagonalTransformer.java	getU	hK	double[]	0	DEF	$[k - diagOffset] != 0.0
1358	108	16	BiDiagonalTransformer.java	getU	k	int	0	DEF	hK[$ - diagOffset] != 0.0
1358	108	16	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	hK[k - $] != 0.0
23300	109	20	BiDiagonalTransformer.java	getU	j	int	0	NIL-FOR	$ < m
23300	109	20	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	j < $
23301	111	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
23301	111	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
23302	116	24	BiDiagonalTransformer.java	getU	i	int	0	NIL-FOR	$ < m
23302	116	24	BiDiagonalTransformer.java	getU	m	int	0	NIL-FOR	i < $
1359	122	12	BiDiagonalTransformer.java	getU	diagOffset	int	0	DEF	$ > 0
1360	139	8	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	$.cachedB == null
23303	144	12	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	NIL-FOR	i < $.main.$.length
23303	144	12	BiDiagonalTransformer.java	getB	i	int	0	NIL-FOR	$ < main.length
1361	146	16	BiDiagonalTransformer.java	getB	m	int	1	DEF	$ < n
1361	146	16	BiDiagonalTransformer.java	getB	n	int	1	DEF	m < $
1362	147	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ > 0
1363	151	20	BiDiagonalTransformer.java	getB	THIS	BiDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1363	151	20	BiDiagonalTransformer.java	getB	i	int	0	DEF	$ < main.length - 1
1364	171	8	BiDiagonalTransformer.java	getV	THIS	BiDiagonalTransformer	0	DEF	$.cachedV == null
23304	181	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= p
23304	181	12	BiDiagonalTransformer.java	getV	p	int	0	NIL-FOR	k >= $
23305	186	12	BiDiagonalTransformer.java	getV	k	int	0	NIL-FOR	$ >= diagOffset
23305	186	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	NIL-FOR	k >= $
1365	189	16	BiDiagonalTransformer.java	getV	hK	double[]	0	DEF	$[k] != 0.0
1365	189	16	BiDiagonalTransformer.java	getV	k	int	0	DEF	hK[$] != 0.0
23306	190	20	BiDiagonalTransformer.java	getV	j	int	0	NIL-FOR	$ < n
23306	190	20	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	j < $
23307	192	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
23307	192	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
23308	197	24	BiDiagonalTransformer.java	getV	i	int	0	NIL-FOR	$ < n
23308	197	24	BiDiagonalTransformer.java	getV	n	int	0	NIL-FOR	i < $
1366	203	12	BiDiagonalTransformer.java	getV	diagOffset	int	0	DEF	$ > 0
23309	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	NIL-FOR	$ < n
23309	261	8	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	k < $
23310	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
23310	265	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1367	272	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	a	double	0	DEF	$ != 0.0
23311	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
23311	274	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
23312	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
23312	276	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
23313	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
23313	281	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
1368	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	k	int	0	DEF	$ < n - 1
1368	288	12	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	DEF	k < $ - 1
23314	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
23314	291	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
1369	297	16	BiDiagonalTransformer.java	transformToUpperBiDiagonal	b	double	0	DEF	$ != 0.0
23315	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	i	int	0	NIL-FOR	$ < m
23315	299	20	BiDiagonalTransformer.java	transformToUpperBiDiagonal	m	int	0	NIL-FOR	i < $
23316	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
23316	302	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
23317	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	j	int	0	NIL-FOR	$ < n
23317	306	24	BiDiagonalTransformer.java	transformToUpperBiDiagonal	n	int	0	NIL-FOR	j < $
23318	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	NIL-FOR	$ < m
23318	325	8	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	k < $
23319	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
23319	330	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1370	336	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	a	double	0	DEF	$ != 0.0
23320	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
23320	338	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
23321	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
23321	341	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
23322	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
23322	345	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
1371	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	k	int	0	DEF	$ < m - 1
1371	351	12	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	DEF	k < $ - 1
23323	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
23323	355	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
1372	361	16	BiDiagonalTransformer.java	transformToLowerBiDiagonal	b	double	0	DEF	$ != 0.0
23324	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	j	int	0	NIL-FOR	$ < n
23324	363	20	BiDiagonalTransformer.java	transformToLowerBiDiagonal	n	int	0	NIL-FOR	j < $
23325	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
23325	365	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
23326	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	i	int	0	NIL-FOR	$ < m
23326	370	24	BiDiagonalTransformer.java	transformToLowerBiDiagonal	m	int	0	NIL-FOR	i < $
3179	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
3179	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
3179	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
3179	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
3179	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$[0].length == 0
3179	101	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	NoDataException	$.length == 0
3180	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
3180	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
3180	104	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	xLen != $.length
3181	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
3181	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
3181	107	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	xLen != $.length
3182	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
3182	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
3182	110	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	xLen != $.length
3183	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
3183	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
3183	113	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	xLen != $.length
24503	127	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
24503	127	8	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
3184	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
3184	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
3184	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
3184	128	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	f	double[][]	0	DimensionMismatchException	$[i].length != yLen
3185	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
3185	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
3185	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
3185	131	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdX	double[][]	0	DimensionMismatchException	$[i].length != yLen
3186	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
3186	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
3186	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
3186	134	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	dFdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
3187	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	THIS	BicubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
3187	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
3187	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
3187	137	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	d2FdXdY	double[][]	0	DimensionMismatchException	$[i].length != yLen
24504	141	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
24504	141	12	BicubicSplineInterpolatingFunction.java	BicubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
3188	160	8	BicubicSplineInterpolatingFunction.java	value	i	int	0	OutOfRangeException	$ == -1
3189	164	8	BicubicSplineInterpolatingFunction.java	value	j	int	0	OutOfRangeException	$ == -1
3190	226	8	BicubicSplineInterpolatingFunction.java	partialDerivative	THIS	BicubicSplineInterpolatingFunction	0	DEF	$.partialDerivatives == null
3191	231	8	BicubicSplineInterpolatingFunction.java	partialDerivative	i	int	0	OutOfRangeException	$ == -1
3192	235	8	BicubicSplineInterpolatingFunction.java	partialDerivative	j	int	0	OutOfRangeException	$ == -1
24505	253	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < lastI
24505	253	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastI	int	0	NIL-FOR	i < $
24506	254	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < lastJ
24506	254	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	lastJ	int	0	NIL-FOR	j < $
3193	273	8	BicubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ < val[0]
3193	273	8	BicubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c < $[0]
24507	278	8	BicubicSplineInterpolatingFunction.java	searchIndex	i	int	0	NIL-FOR	$ < max
24507	278	8	BicubicSplineInterpolatingFunction.java	searchIndex	max	int	0	NIL-FOR	i < $
3194	279	12	BicubicSplineInterpolatingFunction.java	searchIndex	i	int	0	RET	c <= val[$]
3194	279	12	BicubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ <= val[i]
3194	279	12	BicubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c <= $[i]
24508	319	8	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < 16
24509	322	12	BicubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < 16
24510	367	8	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	i	int	0	NIL-FOR	$ < N
24511	368	12	BicubicSplineInterpolatingFunction.java	BicubicSplineFunction	j	int	0	NIL-FOR	$ < N
3195	378	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
3195	378	8	BicubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
3196	381	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
3196	381	8	BicubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
24512	406	8	BicubicSplineInterpolatingFunction.java	apply	i	int	0	NIL-FOR	$ < N
24513	407	12	BicubicSplineInterpolatingFunction.java	apply	j	int	0	NIL-FOR	$ < N
3197	419	8	BicubicSplineInterpolatingFunction.java	partialDerivativeX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeX == null
3198	429	8	BicubicSplineInterpolatingFunction.java	partialDerivativeY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeY == null
3199	439	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXX	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXX == null
3200	449	8	BicubicSplineInterpolatingFunction.java	partialDerivativeYY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeYY == null
3201	459	8	BicubicSplineInterpolatingFunction.java	partialDerivativeXY	THIS	BicubicSplineFunction	0	DEF	$.partialDerivativeXY == null
24514	476	8	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	i	int	0	NIL-FOR	$ < N
24515	477	12	BicubicSplineInterpolatingFunction.java	computePartialDerivatives	j	int	0	NIL-FOR	$ < N
3176	39	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3176	39	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3176	39	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3176	39	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3176	39	8	BicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3176	39	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
3177	42	8	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3177	42	8	BicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3177	42	8	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
24491	57	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
24491	57	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3178	58	12	BicubicSplineInterpolator.java	interpolate	THIS	BicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3178	58	12	BicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3178	58	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3178	58	12	BicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
24492	62	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
24492	62	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
24493	72	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
24493	72	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
24494	79	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
24494	79	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
24495	85	8	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
24495	85	8	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
24496	87	12	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
24496	87	12	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
24497	94	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
24497	94	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
24498	96	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
24498	96	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
24499	103	8	BicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
24499	103	8	BicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
24500	106	12	BicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
24500	106	12	BicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
831	123	8	BigFraction.java	BigFraction	den	BigInteger	0	ZeroException	BigInteger.ZERO.equals($)
832	126	8	BigFraction.java	BigFraction	num	BigInteger	1	DEF	BigInteger.ZERO.equals($)
833	133	12	BigFraction.java	BigFraction	gcd	BigInteger	0	DEF	BigInteger.ONE.compareTo($) < 0
834	139	12	BigFraction.java	BigFraction	den	BigInteger	0	DEF	BigInteger.ZERO.compareTo($) > 0
835	173	8	BigFraction.java	BigFraction	value	double	0	MathIllegalArgumentException	Double.isNaN($)
836	176	8	BigFraction.java	BigFraction	value	double	0	MathIllegalArgumentException	Double.isInfinite($)
837	185	8	BigFraction.java	BigFraction	exponent	long	0	DEF	$ != 0
838	189	8	BigFraction.java	BigFraction	sign	long	0	DEF	$ != 0
22829	193	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x1) == 0
22829	193	8	BigFraction.java	BigFraction	m	long	0	NIL-WHILE	($ & 0x001ffffffffffffeL) != 0
839	198	8	BigFraction.java	BigFraction	k	int	1	DEF	$ < 0
840	275	8	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	a0 > $
840	275	8	BigFraction.java	BigFraction	a0	long	0	FractionConversionException	$ > overflow
841	281	8	BigFraction.java	BigFraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
841	281	8	BigFraction.java	BigFraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
841	281	8	BigFraction.java	BigFraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
22830	297	8	BigFraction.java	BigFraction	stop	boolean	0	NIL-DOWHILE	$
842	303	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	q2 > $
842	303	12	BigFraction.java	BigFraction	overflow	long	0	FractionConversionException	p2 > $
842	303	12	BigFraction.java	BigFraction	p2	long	0	FractionConversionException	$ > overflow
842	303	12	BigFraction.java	BigFraction	q2	long	0	FractionConversionException	$ > overflow
843	308	12	BigFraction.java	BigFraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
843	308	12	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
843	308	12	BigFraction.java	BigFraction	n	int	1	DEF	$ < maxIterations
843	308	12	BigFraction.java	BigFraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
843	308	12	BigFraction.java	BigFraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
843	308	12	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
843	308	12	BigFraction.java	BigFraction	maxIterations	int	1	DEF	n < $
844	322	8	BigFraction.java	BigFraction	n	int	0	FractionConversionException	$ >= maxIterations
844	322	8	BigFraction.java	BigFraction	maxIterations	int	0	FractionConversionException	n >= $
845	326	8	BigFraction.java	BigFraction	q2	long	1	DEF	$ < maxDenominator
845	326	8	BigFraction.java	BigFraction	maxDenominator	int	1	DEF	q2 < $
846	433	8	BigFraction.java	getReducedFraction	numerator	int	0	RET	$ == 0
847	508	8	BigFraction.java	add	fraction	BigFraction	0	NullArgumentException	$ == null
848	511	8	BigFraction.java	add	fraction	BigFraction	0	RET	ZERO.equals($)
849	518	8	BigFraction.java	add	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
849	518	8	BigFraction.java	add	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
850	612	8	BigFraction.java	divide	bg	BigInteger	0	NullArgumentException	$ == null
851	615	8	BigFraction.java	divide	bg	BigInteger	0	MathArithmeticException	BigInteger.ZERO.equals($)
852	661	8	BigFraction.java	divide	fraction	BigFraction	0	NullArgumentException	$ == null
853	664	8	BigFraction.java	divide	THIS	BigFraction	0	MathArithmeticException	BigInteger.ZERO.equals(fraction.$.numerator)
853	664	8	BigFraction.java	divide	fraction	BigFraction	0	MathArithmeticException	BigInteger.ZERO.equals($.numerator)
854	683	8	BigFraction.java	doubleValue	result	double	0	DEF	Double.isNaN($)
855	713	8	BigFraction.java	equals	THIS	BigFraction	1	DEF	$ == other
855	713	8	BigFraction.java	equals	other	Object	1	DEF	this == $
856	715	15	BigFraction.java	equals	other	Object	0	DEF	$ instanceof BigFraction
857	736	8	BigFraction.java	floatValue	result	float	0	DEF	Double.isNaN($)
858	865	8	BigFraction.java	multiply	bg	BigInteger	0	NullArgumentException	$ == null
859	910	8	BigFraction.java	multiply	fraction	BigFraction	0	NullArgumentException	$ == null
860	913	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	fraction.$.numerator.equals(BigInteger.ZERO)
860	913	8	BigFraction.java	multiply	THIS	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
860	913	8	BigFraction.java	multiply	fraction	BigFraction	0	RET	$.numerator.equals(BigInteger.ZERO)
861	957	8	BigFraction.java	pow	exponent	int	0	RET	$ < 0
862	974	8	BigFraction.java	pow	exponent	long	0	RET	$ < 0
863	993	8	BigFraction.java	pow	exponent	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
864	1052	8	BigFraction.java	subtract	bg	BigInteger	0	NullArgumentException	$ == null
865	1095	8	BigFraction.java	subtract	fraction	BigFraction	0	NullArgumentException	$ == null
866	1098	8	BigFraction.java	subtract	fraction	BigFraction	0	RET	ZERO.equals($)
867	1104	8	BigFraction.java	subtract	THIS	BigFraction	1	DEF	$.denominator.equals(fraction.$.denominator)
867	1104	8	BigFraction.java	subtract	fraction	BigFraction	1	DEF	denominator.equals($.denominator)
868	1127	8	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ONE.equals($.denominator)
869	1129	15	BigFraction.java	toString	THIS	BigFraction	1	DEF	BigInteger.ZERO.equals($.numerator)
870	169	8	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigFraction
871	171	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof BigInteger
872	173	15	BigFractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
873	194	8	BigFractionFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
874	216	8	BigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
875	249	8	BigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
22831	272	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	$ < source.length()
22831	272	9	BigFractionFormat.java	parseNextBigInteger	end	int	0	NIL-WHILE	Character.isDigit(source.charAt($))
22831	272	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	end < $.length()
22831	272	9	BigFractionFormat.java	parseNextBigInteger	source	String	0	NIL-WHILE	Character.isDigit($.charAt(end))
193	306	8	BigReal.java	equals	THIS	BigReal	0	RET	$ == other
193	306	8	BigReal.java	equals	other	Object	0	RET	this == $
194	310	8	BigReal.java	equals	other	Object	0	RET	$ instanceof BigReal
2548	59	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i < 0
2548	59	12	BinaryChromosome.java	checkValidity	THIS	BinaryChromosome	0	InvalidRepresentationException	$.i >1
24200	74	8	BinaryChromosome.java	randomBinaryRepresentation	j	int	0	NIL-FOR	$<length
24200	74	8	BinaryChromosome.java	randomBinaryRepresentation	length	int	0	NIL-FOR	j<$
2549	86	8	BinaryChromosome.java	isSame	another	Chromosome	0	RET	$ instanceof BinaryChromosome
2550	91	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getLength() != anotherBc.getLength()
2550	91	8	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getLength() != $.getLength()
24201	95	8	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	NIL-FOR	i< $.getRepresentation().size()
24201	95	8	BinaryChromosome.java	isSame	i	int	0	NIL-FOR	$< getRepresentation().size()
2551	96	12	BinaryChromosome.java	isSame	THIS	BinaryChromosome	0	RET	$.getRepresentation().get(i).equals(anotherBc.getRepresentation().get(i))
2551	96	12	BinaryChromosome.java	isSame	i	int	0	RET	getRepresentation().get($).equals(anotherBc.getRepresentation().get($))
2551	96	12	BinaryChromosome.java	isSame	anotherBc	BinaryChromosome	0	RET	getRepresentation().get(i).equals($.getRepresentation().get(i))
2562	41	8	BinaryMutation.java	mutate	original	Chromosome	0	MathIllegalArgumentException	$ instanceof BinaryChromosome
1029	70	8	BinomialDistribution.java	BinomialDistribution	trials	int	0	NotPositiveException	$ < 0
1030	74	8	BinomialDistribution.java	BinomialDistribution	p	double	0	OutOfRangeException	$ < 0
1030	74	8	BinomialDistribution.java	BinomialDistribution	p	double	0	OutOfRangeException	$ > 1
1031	103	8	BinomialDistribution.java	probability	THIS	BinomialDistribution	1	DEF	x > $.numberOfTrials
1031	103	8	BinomialDistribution.java	probability	x	int	1	DEF	$ < 0
1031	103	8	BinomialDistribution.java	probability	x	int	1	DEF	$ > numberOfTrials
1032	116	8	BinomialDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
1033	118	15	BinomialDistribution.java	cumulativeProbability	THIS	BinomialDistribution	1	DEF	x >= $.numberOfTrials
1033	118	15	BinomialDistribution.java	cumulativeProbability	x	int	1	DEF	$ >= numberOfTrials
3312	76	12	BisectionSolver.java	doSolve	fm	double	1	DEF	$ * fmin > 0
3312	76	12	BisectionSolver.java	doSolve	fmin	double	1	DEF	fm * $ > 0
3313	84	12	BisectionSolver.java	doSolve	min	double	0	RET	FastMath.abs(max - $) <= absoluteAccuracy
3313	84	12	BisectionSolver.java	doSolve	max	double	0	RET	FastMath.abs($ - min) <= absoluteAccuracy
3313	84	12	BisectionSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(max - min) <= $
24186	68	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < iEnd
24186	68	8	BitsStreamGenerator.java	nextBytes	iEnd	int	0	NIL-WHILE	i < $
24187	77	8	BitsStreamGenerator.java	nextBytes	THIS	BitsStreamGenerator	0	NIL-WHILE	i < bytes.$.length
24187	77	8	BitsStreamGenerator.java	nextBytes	i	int	0	NIL-WHILE	$ < bytes.length
24187	77	8	BitsStreamGenerator.java	nextBytes	bytes	byte[]	0	NIL-WHILE	i < $.length
2507	99	8	BitsStreamGenerator.java	nextGaussian	THIS	BitsStreamGenerator	1	DEF	Double.isNaN($.nextGaussian)
2508	138	8	BitsStreamGenerator.java	nextInt	n	int	0	RET	$ > 0
2509	139	12	BitsStreamGenerator.java	nextInt	n	int	0	RET	($ & -$) == $
24188	144	12	BitsStreamGenerator.java	nextInt	bits	int	0	NIL-DOWHILE	$ - val + (n - 1) < 0
24188	144	12	BitsStreamGenerator.java	nextInt	val	int	0	NIL-DOWHILE	bits - $ + (n - 1) < 0
24188	144	12	BitsStreamGenerator.java	nextInt	n	int	0	NIL-DOWHILE	bits - val + ($ - 1) < 0
1110	150	8	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	1	DEF	$
22872	159	8	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
22872	159	8	BlockFieldMatrix.java	BlockFieldMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
22873	161	12	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
22873	161	12	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1111	162	16	BlockFieldMatrix.java	BlockFieldMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1111	162	16	BlockFieldMatrix.java	BlockFieldMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1111	162	16	BlockFieldMatrix.java	BlockFieldMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1111	162	16	BlockFieldMatrix.java	BlockFieldMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1111	162	16	BlockFieldMatrix.java	BlockFieldMatrix	blockData	T[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1112	166	16	BlockFieldMatrix.java	BlockFieldMatrix	copyArray	boolean	0	DEF	$
22874	205	8	BlockFieldMatrix.java	toBlocksLayout	THIS	BlockFieldMatrix	0	NIL-FOR	i < rawData.$.length
22874	205	8	BlockFieldMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
22874	205	8	BlockFieldMatrix.java	toBlocksLayout	rawData	T[][]	0	NIL-FOR	i < $.length
1113	207	12	BlockFieldMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1113	207	12	BlockFieldMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
22875	216	8	BlockFieldMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
22875	216	8	BlockFieldMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
22876	220	12	BlockFieldMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
22876	220	12	BlockFieldMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
22877	231	16	BlockFieldMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
22877	231	16	BlockFieldMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
22878	265	8	BlockFieldMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
22878	265	8	BlockFieldMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
22879	269	12	BlockFieldMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
22879	269	12	BlockFieldMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
22880	295	8	BlockFieldMatrix.java	copy	THIS	BlockFieldMatrix	0	NIL-FOR	i < $.blocks.$.length
22880	295	8	BlockFieldMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
22881	316	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
22881	316	12	BlockFieldMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
22881	316	12	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
22882	317	16	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
22882	317	16	BlockFieldMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
22882	317	16	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
22883	327	20	BlockFieldMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
22883	327	20	BlockFieldMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
22884	328	24	BlockFieldMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
22884	328	24	BlockFieldMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
22885	359	8	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
22885	359	8	BlockFieldMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
22885	359	8	BlockFieldMatrix.java	add	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
22886	363	12	BlockFieldMatrix.java	add	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
22886	363	12	BlockFieldMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
22886	363	12	BlockFieldMatrix.java	add	outBlock	T[]	0	NIL-FOR	k < $.length
22887	385	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
22887	385	12	BlockFieldMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
22887	385	12	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
22888	386	16	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
22888	386	16	BlockFieldMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
22888	386	16	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
22889	396	20	BlockFieldMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
22889	396	20	BlockFieldMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
22890	397	24	BlockFieldMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
22890	397	24	BlockFieldMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
22891	427	8	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
22891	427	8	BlockFieldMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
22891	427	8	BlockFieldMatrix.java	subtract	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
22892	431	12	BlockFieldMatrix.java	subtract	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
22892	431	12	BlockFieldMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
22892	431	12	BlockFieldMatrix.java	subtract	outBlock	T[]	0	NIL-FOR	k < $.length
22893	445	8	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
22893	445	8	BlockFieldMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
22893	445	8	BlockFieldMatrix.java	scalarAdd	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
22894	448	12	BlockFieldMatrix.java	scalarAdd	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
22894	448	12	BlockFieldMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
22894	448	12	BlockFieldMatrix.java	scalarAdd	outBlock	T[]	0	NIL-FOR	k < $.length
22895	463	8	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
22895	463	8	BlockFieldMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
22895	463	8	BlockFieldMatrix.java	scalarMultiply	out	BlockFieldMatrix<T>	0	NIL-FOR	blockIndex < $.blocks.length
22896	466	12	BlockFieldMatrix.java	scalarMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	k < outBlock.$.length
22896	466	12	BlockFieldMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
22896	466	12	BlockFieldMatrix.java	scalarMultiply	outBlock	T[]	0	NIL-FOR	k < $.length
22897	489	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
22897	489	12	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
22897	489	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
22898	494	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
22898	494	16	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
22898	494	16	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
22899	503	20	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
22899	503	20	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
22900	508	24	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
22900	508	24	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
22901	511	28	BlockFieldMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
22901	511	28	BlockFieldMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
22902	514	32	BlockFieldMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
22902	514	32	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
22903	552	8	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
22903	552	8	BlockFieldMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
22903	552	8	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
22904	557	12	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
22904	557	12	BlockFieldMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
22904	557	12	BlockFieldMatrix.java	multiply	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
22905	567	16	BlockFieldMatrix.java	multiply	THIS	BlockFieldMatrix	0	NIL-FOR	kBlock < $.blockColumns
22905	567	16	BlockFieldMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
22906	572	20	BlockFieldMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
22906	572	20	BlockFieldMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
22907	575	24	BlockFieldMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
22907	575	24	BlockFieldMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
22908	579	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
22908	579	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
22909	588	28	BlockFieldMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
22909	588	28	BlockFieldMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
22910	613	8	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
22910	613	8	BlockFieldMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
22911	618	12	BlockFieldMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
22911	618	12	BlockFieldMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
22912	622	16	BlockFieldMatrix.java	getData	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
22912	622	16	BlockFieldMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
22913	654	8	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < out.$.blockRows
22913	654	8	BlockFieldMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
22913	654	8	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	iBlock < $.blockRows
22914	657	12	BlockFieldMatrix.java	getSubMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
22914	657	12	BlockFieldMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
22914	657	12	BlockFieldMatrix.java	getSubMatrix	out	BlockFieldMatrix<T>	0	NIL-FOR	jBlock < $.blockColumns
1114	668	16	BlockFieldMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1115	670	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1116	702	20	BlockFieldMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
22915	752	8	BlockFieldMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
22915	752	8	BlockFieldMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1117	765	8	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1118	772	12	BlockFieldMatrix.java	setSubMatrix	THIS	BlockFieldMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1118	772	12	BlockFieldMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
22916	784	8	BlockFieldMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
22916	784	8	BlockFieldMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
22917	790	12	BlockFieldMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
22917	790	12	BlockFieldMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
22918	799	16	BlockFieldMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
22918	799	16	BlockFieldMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
22919	821	8	BlockFieldMatrix.java	getRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
22919	821	8	BlockFieldMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1119	825	12	BlockFieldMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1119	825	12	BlockFieldMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1120	864	8	BlockFieldMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1120	864	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
1120	864	8	BlockFieldMatrix.java	setRowMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
22920	877	8	BlockFieldMatrix.java	setRowMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
22920	877	8	BlockFieldMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1121	881	12	BlockFieldMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1121	881	12	BlockFieldMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
22921	906	8	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
22921	906	8	BlockFieldMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
22922	909	12	BlockFieldMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
22922	909	12	BlockFieldMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1122	910	16	BlockFieldMatrix.java	getColumnMatrix	THIS	BlockFieldMatrix	0	DEF	outIndex >= outBlock.$.length
1122	910	16	BlockFieldMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1122	910	16	BlockFieldMatrix.java	getColumnMatrix	outBlock	T[]	0	DEF	outIndex >= $.length
1123	946	8	BlockFieldMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1123	946	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1123	946	8	BlockFieldMatrix.java	setColumnMatrix	matrix	BlockFieldMatrix<T>	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
22923	960	8	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
22923	960	8	BlockFieldMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
22924	963	12	BlockFieldMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
22924	963	12	BlockFieldMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1124	964	16	BlockFieldMatrix.java	setColumnMatrix	THIS	BlockFieldMatrix	0	DEF	mIndex >= mBlock.$.length
1124	964	16	BlockFieldMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1124	964	16	BlockFieldMatrix.java	setColumnMatrix	mBlock	T[]	0	DEF	mIndex >= $.length
22925	983	8	BlockFieldMatrix.java	getRowVector	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
22925	983	8	BlockFieldMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
22926	1014	8	BlockFieldMatrix.java	getColumnVector	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
22926	1014	8	BlockFieldMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
22927	1017	12	BlockFieldMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
22927	1017	12	BlockFieldMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
22928	1045	8	BlockFieldMatrix.java	getRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
22928	1045	8	BlockFieldMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1125	1060	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1125	1060	8	BlockFieldMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1125	1060	8	BlockFieldMatrix.java	setRow	array	T[]	0	MatrixDimensionMismatchException	$.length != nCols
22929	1068	8	BlockFieldMatrix.java	setRow	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
22929	1068	8	BlockFieldMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
22930	1087	8	BlockFieldMatrix.java	getColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
22930	1087	8	BlockFieldMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
22931	1090	12	BlockFieldMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
22931	1090	12	BlockFieldMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1126	1103	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1126	1103	8	BlockFieldMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1126	1103	8	BlockFieldMatrix.java	setColumn	array	T[]	0	MatrixDimensionMismatchException	$.length != nRows
22932	1112	8	BlockFieldMatrix.java	setColumn	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
22932	1112	8	BlockFieldMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
22933	1115	12	BlockFieldMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
22933	1115	12	BlockFieldMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
22934	1188	8	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockColumns
22934	1188	8	BlockFieldMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
22935	1189	12	BlockFieldMatrix.java	transpose	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockRows
22935	1189	12	BlockFieldMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
22936	1199	16	BlockFieldMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
22936	1199	16	BlockFieldMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
22937	1202	20	BlockFieldMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
22937	1202	20	BlockFieldMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1127	1233	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.columns
1127	1233	8	BlockFieldMatrix.java	operate	v	T[]	0	DimensionMismatchException	$.length != columns
22938	1240	8	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
22938	1240	8	BlockFieldMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
22939	1243	12	BlockFieldMatrix.java	operate	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
22939	1243	12	BlockFieldMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
22940	1248	16	BlockFieldMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
22940	1248	16	BlockFieldMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
22941	1251	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
22941	1251	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
22942	1260	20	BlockFieldMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
22942	1260	20	BlockFieldMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1128	1275	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	DimensionMismatchException	v.$.length != $.rows
1128	1275	8	BlockFieldMatrix.java	preMultiply	v	T[]	0	DimensionMismatchException	$.length != rows
22943	1282	8	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
22943	1282	8	BlockFieldMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
22944	1289	12	BlockFieldMatrix.java	preMultiply	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
22944	1289	12	BlockFieldMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
22945	1293	16	BlockFieldMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
22945	1293	16	BlockFieldMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
22946	1297	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
22946	1297	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
22947	1306	20	BlockFieldMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
22947	1306	20	BlockFieldMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
22948	1322	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
22948	1322	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
22949	1325	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
22949	1325	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
22950	1326	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
22950	1326	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
22951	1332	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
22951	1332	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
22952	1346	8	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
22952	1346	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
22953	1349	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
22953	1349	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
22954	1350	16	BlockFieldMatrix.java	walkInRowOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
22954	1350	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
22955	1356	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
22955	1356	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
22956	1373	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
22956	1373	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
22957	1377	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
22957	1377	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
22958	1378	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
22958	1378	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
22959	1385	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
22959	1385	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
22960	1402	8	BlockFieldMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
22960	1402	8	BlockFieldMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
22961	1406	12	BlockFieldMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
22961	1406	12	BlockFieldMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
22962	1407	16	BlockFieldMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
22962	1407	16	BlockFieldMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
22963	1414	20	BlockFieldMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
22963	1414	20	BlockFieldMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
22964	1429	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
22964	1429	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
22965	1432	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
22965	1432	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
22966	1437	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
22966	1437	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
22967	1438	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
22967	1438	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
22968	1454	8	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	iBlock < $.blockRows
22968	1454	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
22969	1457	12	BlockFieldMatrix.java	walkInOptimizedOrder	THIS	BlockFieldMatrix	0	NIL-FOR	jBlock < $.blockColumns
22969	1457	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
22970	1462	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
22970	1462	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
22971	1463	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
22971	1463	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
22972	1481	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
22972	1481	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
22973	1485	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
22973	1485	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
22974	1491	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
22974	1491	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
22975	1493	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
22975	1493	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
22976	1510	8	BlockFieldMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
22976	1510	8	BlockFieldMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
22977	1514	12	BlockFieldMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
22977	1514	12	BlockFieldMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
22978	1520	16	BlockFieldMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
22978	1520	16	BlockFieldMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
22979	1522	20	BlockFieldMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
22979	1522	20	BlockFieldMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
1446	147	8	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	1	DEF	$
23378	156	8	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
23378	156	8	BlockRealMatrix.java	BlockRealMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
23379	158	12	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
23379	158	12	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1447	159	16	BlockRealMatrix.java	BlockRealMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	blockData[index].length != iHeight * $.blockWidth(jBlock)
1447	159	16	BlockRealMatrix.java	BlockRealMatrix	jBlock	int	0	DimensionMismatchException	blockData[index].length != iHeight * blockWidth($)
1447	159	16	BlockRealMatrix.java	BlockRealMatrix	iHeight	int	0	DimensionMismatchException	blockData[index].length != $ * blockWidth(jBlock)
1447	159	16	BlockRealMatrix.java	BlockRealMatrix	index	int	0	DimensionMismatchException	blockData[$].length != iHeight * blockWidth(jBlock)
1447	159	16	BlockRealMatrix.java	BlockRealMatrix	blockData	double[][]	0	DimensionMismatchException	$[index].length != iHeight * blockWidth(jBlock)
1448	163	16	BlockRealMatrix.java	BlockRealMatrix	copyArray	boolean	0	DEF	$
23380	198	8	BlockRealMatrix.java	toBlocksLayout	THIS	BlockRealMatrix	0	NIL-FOR	i < rawData.$.length
23380	198	8	BlockRealMatrix.java	toBlocksLayout	i	int	0	NIL-FOR	$ < rawData.length
23380	198	8	BlockRealMatrix.java	toBlocksLayout	rawData	double[][]	0	NIL-FOR	i < $.length
1449	200	12	BlockRealMatrix.java	toBlocksLayout	length	int	0	DimensionMismatchException	$ != columns
1449	200	12	BlockRealMatrix.java	toBlocksLayout	columns	int	0	DimensionMismatchException	length != $
23381	208	8	BlockRealMatrix.java	toBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
23381	208	8	BlockRealMatrix.java	toBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
23382	212	12	BlockRealMatrix.java	toBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
23382	212	12	BlockRealMatrix.java	toBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
23383	223	16	BlockRealMatrix.java	toBlocksLayout	p	int	0	NIL-FOR	$ < pEnd
23383	223	16	BlockRealMatrix.java	toBlocksLayout	pEnd	int	0	NIL-FOR	p < $
23384	252	8	BlockRealMatrix.java	createBlocksLayout	iBlock	int	0	NIL-FOR	$ < blockRows
23384	252	8	BlockRealMatrix.java	createBlocksLayout	blockRows	int	0	NIL-FOR	iBlock < $
23385	256	12	BlockRealMatrix.java	createBlocksLayout	jBlock	int	0	NIL-FOR	$ < blockColumns
23385	256	12	BlockRealMatrix.java	createBlocksLayout	blockColumns	int	0	NIL-FOR	jBlock < $
23386	281	8	BlockRealMatrix.java	copy	THIS	BlockRealMatrix	0	NIL-FOR	i < $.blocks.$.length
23386	281	8	BlockRealMatrix.java	copy	i	int	0	NIL-FOR	$ < blocks.length
23387	301	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
23387	301	12	BlockRealMatrix.java	add	iBlock	int	0	NIL-FOR	$ < out.blockRows
23387	301	12	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
23388	302	16	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
23388	302	16	BlockRealMatrix.java	add	jBlock	int	0	NIL-FOR	$ < out.blockColumns
23388	302	16	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
23389	312	20	BlockRealMatrix.java	add	p	int	0	NIL-FOR	$ < pEnd
23389	312	20	BlockRealMatrix.java	add	pEnd	int	0	NIL-FOR	p < $
23390	313	24	BlockRealMatrix.java	add	q	int	0	NIL-FOR	$ < qEnd
23390	313	24	BlockRealMatrix.java	add	qEnd	int	0	NIL-FOR	q < $
23391	342	8	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
23391	342	8	BlockRealMatrix.java	add	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
23391	342	8	BlockRealMatrix.java	add	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
23392	346	12	BlockRealMatrix.java	add	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
23392	346	12	BlockRealMatrix.java	add	k	int	0	NIL-FOR	$ < outBlock.length
23392	346	12	BlockRealMatrix.java	add	outBlock	double[]	0	NIL-FOR	k < $.length
23393	367	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
23393	367	12	BlockRealMatrix.java	subtract	iBlock	int	0	NIL-FOR	$ < out.blockRows
23393	367	12	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
23394	368	16	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
23394	368	16	BlockRealMatrix.java	subtract	jBlock	int	0	NIL-FOR	$ < out.blockColumns
23394	368	16	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
23395	378	20	BlockRealMatrix.java	subtract	p	int	0	NIL-FOR	$ < pEnd
23395	378	20	BlockRealMatrix.java	subtract	pEnd	int	0	NIL-FOR	p < $
23396	379	24	BlockRealMatrix.java	subtract	q	int	0	NIL-FOR	$ < qEnd
23396	379	24	BlockRealMatrix.java	subtract	qEnd	int	0	NIL-FOR	q < $
23397	408	8	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
23397	408	8	BlockRealMatrix.java	subtract	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
23397	408	8	BlockRealMatrix.java	subtract	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
23398	412	12	BlockRealMatrix.java	subtract	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
23398	412	12	BlockRealMatrix.java	subtract	k	int	0	NIL-FOR	$ < outBlock.length
23398	412	12	BlockRealMatrix.java	subtract	outBlock	double[]	0	NIL-FOR	k < $.length
23399	427	8	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
23399	427	8	BlockRealMatrix.java	scalarAdd	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
23399	427	8	BlockRealMatrix.java	scalarAdd	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
23400	430	12	BlockRealMatrix.java	scalarAdd	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
23400	430	12	BlockRealMatrix.java	scalarAdd	k	int	0	NIL-FOR	$ < outBlock.length
23400	430	12	BlockRealMatrix.java	scalarAdd	outBlock	double[]	0	NIL-FOR	k < $.length
23401	444	8	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < out.$.blocks.$.length
23401	444	8	BlockRealMatrix.java	scalarMultiply	blockIndex	int	0	NIL-FOR	$ < out.blocks.length
23401	444	8	BlockRealMatrix.java	scalarMultiply	out	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.length
23402	447	12	BlockRealMatrix.java	scalarMultiply	THIS	BlockRealMatrix	0	NIL-FOR	k < outBlock.$.length
23402	447	12	BlockRealMatrix.java	scalarMultiply	k	int	0	NIL-FOR	$ < outBlock.length
23402	447	12	BlockRealMatrix.java	scalarMultiply	outBlock	double[]	0	NIL-FOR	k < $.length
23403	468	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
23403	468	12	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
23403	468	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
23404	472	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
23404	472	16	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
23404	472	16	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
23405	480	20	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
23405	480	20	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
23406	485	24	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
23406	485	24	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
23407	488	28	BlockRealMatrix.java	multiply	q	int	0	NIL-FOR	$ < qEnd
23407	488	28	BlockRealMatrix.java	multiply	qEnd	int	0	NIL-FOR	q < $
23408	491	32	BlockRealMatrix.java	multiply	l	int	0	NIL-FOR	$ < lEnd
23408	491	32	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-FOR	l < $
23409	525	8	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
23409	525	8	BlockRealMatrix.java	multiply	iBlock	int	0	NIL-FOR	$ < out.blockRows
23409	525	8	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
23410	530	12	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
23410	530	12	BlockRealMatrix.java	multiply	jBlock	int	0	NIL-FOR	$ < out.blockColumns
23410	530	12	BlockRealMatrix.java	multiply	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
23411	540	16	BlockRealMatrix.java	multiply	THIS	BlockRealMatrix	0	NIL-FOR	kBlock < $.blockColumns
23411	540	16	BlockRealMatrix.java	multiply	kBlock	int	0	NIL-FOR	$ < blockColumns
23412	545	20	BlockRealMatrix.java	multiply	p	int	0	NIL-FOR	$ < pEnd
23412	545	20	BlockRealMatrix.java	multiply	pEnd	int	0	NIL-FOR	p < $
23413	548	24	BlockRealMatrix.java	multiply	nStart	int	0	NIL-FOR	$ < jWidth
23413	548	24	BlockRealMatrix.java	multiply	jWidth	int	0	NIL-FOR	nStart < $
23414	552	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd - 3
23414	552	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $ - 3
23415	560	28	BlockRealMatrix.java	multiply	l	int	0	NIL-WHILE	$ < lEnd
23415	560	28	BlockRealMatrix.java	multiply	lEnd	int	0	NIL-WHILE	l < $
23416	583	8	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
23416	583	8	BlockRealMatrix.java	getData	iBlock	int	0	NIL-FOR	$ < blockRows
23417	588	12	BlockRealMatrix.java	getData	p	int	0	NIL-FOR	$ < pEnd
23417	588	12	BlockRealMatrix.java	getData	pEnd	int	0	NIL-FOR	p < $
23418	592	16	BlockRealMatrix.java	getData	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns - 1
23418	592	16	BlockRealMatrix.java	getData	jBlock	int	0	NIL-FOR	$ < blockColumns - 1
23419	610	8	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
23419	610	8	BlockRealMatrix.java	getNorm	jBlock	int	0	NIL-FOR	$ < blockColumns
23420	613	12	BlockRealMatrix.java	getNorm	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
23420	613	12	BlockRealMatrix.java	getNorm	iBlock	int	0	NIL-FOR	$ < blockRows
23421	616	16	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
23421	616	16	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
23422	618	20	BlockRealMatrix.java	getNorm	i	int	0	NIL-FOR	$ < iHeight
23422	618	20	BlockRealMatrix.java	getNorm	iHeight	int	0	NIL-FOR	i < $
23423	624	12	BlockRealMatrix.java	getNorm	j	int	0	NIL-FOR	$ < jWidth
23423	624	12	BlockRealMatrix.java	getNorm	jWidth	int	0	NIL-FOR	j < $
23424	635	8	BlockRealMatrix.java	getFrobeniusNorm	THIS	BlockRealMatrix	0	NIL-FOR	blockIndex < $.blocks.$.length
23424	635	8	BlockRealMatrix.java	getFrobeniusNorm	blockIndex	int	0	NIL-FOR	$ < blocks.length
23425	662	8	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < out.$.blockRows
23425	662	8	BlockRealMatrix.java	getSubMatrix	iBlock	int	0	NIL-FOR	$ < out.blockRows
23425	662	8	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
23426	665	12	BlockRealMatrix.java	getSubMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < out.$.blockColumns
23426	665	12	BlockRealMatrix.java	getSubMatrix	jBlock	int	0	NIL-FOR	$ < out.blockColumns
23426	665	12	BlockRealMatrix.java	getSubMatrix	out	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
1450	676	16	BlockRealMatrix.java	getSubMatrix	heightExcess	int	1	DEF	$ > 0
1451	678	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
1452	710	20	BlockRealMatrix.java	getSubMatrix	widthExcess	int	1	DEF	$ > 0
23427	760	8	BlockRealMatrix.java	copyBlockPart	srcRow	int	0	NIL-FOR	$ < srcEndRow
23427	760	8	BlockRealMatrix.java	copyBlockPart	srcEndRow	int	0	NIL-FOR	srcRow < $
1453	774	8	BlockRealMatrix.java	setSubMatrix	refLength	int	0	NoDataException	$ == 0
1454	781	12	BlockRealMatrix.java	setSubMatrix	THIS	BlockRealMatrix	0	DimensionMismatchException	$.subRow.$.length != refLength
1454	781	12	BlockRealMatrix.java	setSubMatrix	refLength	int	0	DimensionMismatchException	subRow.length != $
23428	793	8	BlockRealMatrix.java	setSubMatrix	iBlock	int	0	NIL-FOR	$ < blockEndRow
23428	793	8	BlockRealMatrix.java	setSubMatrix	blockEndRow	int	0	NIL-FOR	iBlock < $
23429	799	12	BlockRealMatrix.java	setSubMatrix	jBlock	int	0	NIL-FOR	$ < blockEndColumn
23429	799	12	BlockRealMatrix.java	setSubMatrix	blockEndColumn	int	0	NIL-FOR	jBlock < $
23430	808	16	BlockRealMatrix.java	setSubMatrix	i	int	0	NIL-FOR	$ < iEnd
23430	808	16	BlockRealMatrix.java	setSubMatrix	iEnd	int	0	NIL-FOR	i < $
23431	830	8	BlockRealMatrix.java	getRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
23431	830	8	BlockRealMatrix.java	getRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1455	834	12	BlockRealMatrix.java	getRowMatrix	jWidth	int	1	DEF	$ > available
1455	834	12	BlockRealMatrix.java	getRowMatrix	available	int	1	DEF	jWidth > $
1456	873	8	BlockRealMatrix.java	setRowMatrix	nCols	int	0	MatrixDimensionMismatchException	matrix.getColumnDimension() != $
1456	873	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != 1
1456	873	8	BlockRealMatrix.java	setRowMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != nCols
23432	886	8	BlockRealMatrix.java	setRowMatrix	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
23432	886	8	BlockRealMatrix.java	setRowMatrix	jBlock	int	0	NIL-FOR	$ < blockColumns
1457	890	12	BlockRealMatrix.java	setRowMatrix	jWidth	int	1	DEF	$ > available
1457	890	12	BlockRealMatrix.java	setRowMatrix	available	int	1	DEF	jWidth > $
23433	915	8	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
23433	915	8	BlockRealMatrix.java	getColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
23434	918	12	BlockRealMatrix.java	getColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
23434	918	12	BlockRealMatrix.java	getColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1458	919	16	BlockRealMatrix.java	getColumnMatrix	THIS	BlockRealMatrix	0	DEF	outIndex >= outBlock.$.length
1458	919	16	BlockRealMatrix.java	getColumnMatrix	outIndex	int	0	DEF	$ >= outBlock.length
1458	919	16	BlockRealMatrix.java	getColumnMatrix	outBlock	double[]	0	DEF	outIndex >= $.length
1459	955	8	BlockRealMatrix.java	setColumnMatrix	nRows	int	0	MatrixDimensionMismatchException	matrix.getRowDimension() != $
1459	955	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != nRows
1459	955	8	BlockRealMatrix.java	setColumnMatrix	matrix	BlockRealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
23435	969	8	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
23435	969	8	BlockRealMatrix.java	setColumnMatrix	iBlock	int	0	NIL-FOR	$ < blockRows
23436	972	12	BlockRealMatrix.java	setColumnMatrix	i	int	0	NIL-FOR	$ < iHeight
23436	972	12	BlockRealMatrix.java	setColumnMatrix	iHeight	int	0	NIL-FOR	i < $
1460	973	16	BlockRealMatrix.java	setColumnMatrix	THIS	BlockRealMatrix	0	DEF	mIndex >= mBlock.$.length
1460	973	16	BlockRealMatrix.java	setColumnMatrix	mIndex	int	0	DEF	$ >= mBlock.length
1460	973	16	BlockRealMatrix.java	setColumnMatrix	mBlock	double[]	0	DEF	mIndex >= $.length
23437	992	8	BlockRealMatrix.java	getRowVector	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
23437	992	8	BlockRealMatrix.java	getRowVector	jBlock	int	0	NIL-FOR	$ < blockColumns
23438	1023	8	BlockRealMatrix.java	getColumnVector	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
23438	1023	8	BlockRealMatrix.java	getColumnVector	iBlock	int	0	NIL-FOR	$ < blockRows
23439	1026	12	BlockRealMatrix.java	getColumnVector	i	int	0	NIL-FOR	$ < iHeight
23439	1026	12	BlockRealMatrix.java	getColumnVector	iHeight	int	0	NIL-FOR	i < $
23440	1054	8	BlockRealMatrix.java	getRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
23440	1054	8	BlockRealMatrix.java	getRow	jBlock	int	0	NIL-FOR	$ < blockColumns
1461	1069	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nCols
1461	1069	8	BlockRealMatrix.java	setRow	nCols	int	0	MatrixDimensionMismatchException	array.length != $
1461	1069	8	BlockRealMatrix.java	setRow	array	double[]	0	MatrixDimensionMismatchException	$.length != nCols
23441	1077	8	BlockRealMatrix.java	setRow	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
23441	1077	8	BlockRealMatrix.java	setRow	jBlock	int	0	NIL-FOR	$ < blockColumns
23442	1096	8	BlockRealMatrix.java	getColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
23442	1096	8	BlockRealMatrix.java	getColumn	iBlock	int	0	NIL-FOR	$ < blockRows
23443	1099	12	BlockRealMatrix.java	getColumn	i	int	0	NIL-FOR	$ < iHeight
23443	1099	12	BlockRealMatrix.java	getColumn	iHeight	int	0	NIL-FOR	i < $
1462	1112	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	MatrixDimensionMismatchException	array.$.length != nRows
1462	1112	8	BlockRealMatrix.java	setColumn	nRows	int	0	MatrixDimensionMismatchException	array.length != $
1462	1112	8	BlockRealMatrix.java	setColumn	array	double[]	0	MatrixDimensionMismatchException	$.length != nRows
23444	1121	8	BlockRealMatrix.java	setColumn	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
23444	1121	8	BlockRealMatrix.java	setColumn	iBlock	int	0	NIL-FOR	$ < blockRows
23445	1124	12	BlockRealMatrix.java	setColumn	i	int	0	NIL-FOR	$ < iHeight
23445	1124	12	BlockRealMatrix.java	setColumn	iHeight	int	0	NIL-FOR	i < $
23446	1183	8	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockColumns
23446	1183	8	BlockRealMatrix.java	transpose	iBlock	int	0	NIL-FOR	$ < blockColumns
23447	1184	12	BlockRealMatrix.java	transpose	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockRows
23447	1184	12	BlockRealMatrix.java	transpose	jBlock	int	0	NIL-FOR	$ < blockRows
23448	1193	16	BlockRealMatrix.java	transpose	p	int	0	NIL-FOR	$ < pEnd
23448	1193	16	BlockRealMatrix.java	transpose	pEnd	int	0	NIL-FOR	p < $
23449	1196	20	BlockRealMatrix.java	transpose	q	int	0	NIL-FOR	$ < qEnd
23449	1196	20	BlockRealMatrix.java	transpose	qEnd	int	0	NIL-FOR	q < $
1463	1225	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.columns
1463	1225	8	BlockRealMatrix.java	operate	v	double[]	0	DimensionMismatchException	$.length != columns
23450	1231	8	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
23450	1231	8	BlockRealMatrix.java	operate	iBlock	int	0	NIL-FOR	$ < blockRows
23451	1234	12	BlockRealMatrix.java	operate	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
23451	1234	12	BlockRealMatrix.java	operate	jBlock	int	0	NIL-FOR	$ < blockColumns
23452	1239	16	BlockRealMatrix.java	operate	p	int	0	NIL-FOR	$ < pEnd
23452	1239	16	BlockRealMatrix.java	operate	pEnd	int	0	NIL-FOR	p < $
23453	1242	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd - 3
23453	1242	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $ - 3
23454	1250	20	BlockRealMatrix.java	operate	q	int	0	NIL-WHILE	$ < qEnd
23454	1250	20	BlockRealMatrix.java	operate	qEnd	int	0	NIL-WHILE	q < $
1464	1264	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	DimensionMismatchException	v.$.length != $.rows
1464	1264	8	BlockRealMatrix.java	preMultiply	v	double[]	0	DimensionMismatchException	$.length != rows
23455	1270	8	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
23455	1270	8	BlockRealMatrix.java	preMultiply	jBlock	int	0	NIL-FOR	$ < blockColumns
23456	1277	12	BlockRealMatrix.java	preMultiply	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
23456	1277	12	BlockRealMatrix.java	preMultiply	iBlock	int	0	NIL-FOR	$ < blockRows
23457	1281	16	BlockRealMatrix.java	preMultiply	q	int	0	NIL-FOR	$ < qEnd
23457	1281	16	BlockRealMatrix.java	preMultiply	qEnd	int	0	NIL-FOR	q < $
23458	1285	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd - 3
23458	1285	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $ - 3
23459	1293	20	BlockRealMatrix.java	preMultiply	p	int	0	NIL-WHILE	$ < pEnd
23459	1293	20	BlockRealMatrix.java	preMultiply	pEnd	int	0	NIL-WHILE	p < $
23460	1309	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
23460	1309	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
23461	1312	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
23461	1312	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
23462	1313	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
23462	1313	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
23463	1319	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
23463	1319	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
23464	1333	8	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
23464	1333	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < blockRows
23465	1336	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
23465	1336	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
23466	1337	16	BlockRealMatrix.java	walkInRowOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
23466	1337	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
23467	1343	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
23467	1343	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
23468	1360	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
23468	1360	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
23469	1364	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
23469	1364	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
23470	1365	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
23470	1365	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
23471	1372	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
23471	1372	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
23472	1389	8	BlockRealMatrix.java	walkInRowOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
23472	1389	8	BlockRealMatrix.java	walkInRowOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
23473	1393	12	BlockRealMatrix.java	walkInRowOrder	p	int	0	NIL-FOR	$ < pEnd
23473	1393	12	BlockRealMatrix.java	walkInRowOrder	pEnd	int	0	NIL-FOR	p < $
23474	1394	16	BlockRealMatrix.java	walkInRowOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
23474	1394	16	BlockRealMatrix.java	walkInRowOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
23475	1401	20	BlockRealMatrix.java	walkInRowOrder	q	int	0	NIL-FOR	$ < qEnd
23475	1401	20	BlockRealMatrix.java	walkInRowOrder	qEnd	int	0	NIL-FOR	q < $
23476	1416	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
23476	1416	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
23477	1419	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
23477	1419	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
23478	1424	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
23478	1424	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
23479	1425	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
23479	1425	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
23480	1441	8	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	iBlock < $.blockRows
23480	1441	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < blockRows
23481	1444	12	BlockRealMatrix.java	walkInOptimizedOrder	THIS	BlockRealMatrix	0	NIL-FOR	jBlock < $.blockColumns
23481	1444	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < blockColumns
23482	1449	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
23482	1449	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
23483	1450	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
23483	1450	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
23484	1468	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
23484	1468	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
23485	1472	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
23485	1472	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
23486	1478	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
23486	1478	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
23487	1480	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
23487	1480	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
23488	1497	8	BlockRealMatrix.java	walkInOptimizedOrder	iBlock	int	0	NIL-FOR	$ < 1 + endRow / BLOCK_SIZE
23488	1497	8	BlockRealMatrix.java	walkInOptimizedOrder	endRow	int	0	NIL-FOR	iBlock < 1 + $ / BLOCK_SIZE
23489	1501	12	BlockRealMatrix.java	walkInOptimizedOrder	jBlock	int	0	NIL-FOR	$ < 1 + endColumn / BLOCK_SIZE
23489	1501	12	BlockRealMatrix.java	walkInOptimizedOrder	endColumn	int	0	NIL-FOR	jBlock < 1 + $ / BLOCK_SIZE
23490	1507	16	BlockRealMatrix.java	walkInOptimizedOrder	p	int	0	NIL-FOR	$ < pEnd
23490	1507	16	BlockRealMatrix.java	walkInOptimizedOrder	pEnd	int	0	NIL-FOR	p < $
23491	1509	20	BlockRealMatrix.java	walkInOptimizedOrder	q	int	0	NIL-FOR	$ < qEnd
23491	1509	20	BlockRealMatrix.java	walkInOptimizedOrder	qEnd	int	0	NIL-FOR	q < $
589	47	8	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute<S>	0	DEF	$.getPlusOutside() != null
590	50	8	BoundarySizeVisitor.java	visitInternalNode	attribute	BoundaryAttribute<S>	0	DEF	$.getPlusInside() != null
1613	91	8	BracketFinder.java	BracketFinder	growLimit	double	0	NotStrictlyPositiveException	$ <= 0
1614	94	8	BracketFinder.java	BracketFinder	maxEvaluations	int	0	NotStrictlyPositiveException	$ <= 0
1615	118	8	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fA < fB : fA > fB
1615	118	8	BracketFinder.java	search	fA	double	0	DEF	isMinim ? $ < fB : $ > fB
1615	118	8	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fA < $ : fA > $
23660	134	8	BracketFinder.java	search	isMinim	boolean	0	NIL-WHILE	$ ? fC < fB : fC > fB
23660	134	8	BracketFinder.java	search	fB	double	0	NIL-WHILE	isMinim ? fC < $ : fC > $
23660	134	8	BracketFinder.java	search	fC	double	0	NIL-WHILE	isMinim ? $ < fB : $ > fB
1616	145	12	BracketFinder.java	search	w	double	1	DEF	($ - xC) * (xB - $) > 0
1616	145	12	BracketFinder.java	search	xC	double	1	DEF	(w - $) * (xB - w) > 0
1616	145	12	BracketFinder.java	search	xB	double	1	DEF	(w - xC) * ($ - w) > 0
1617	147	16	BracketFinder.java	search	fW	double	1	DEF	isMinim ? $ < fC : $ > fC
1617	147	16	BracketFinder.java	search	isMinim	boolean	1	DEF	$ ? fW < fC : fW > fC
1617	147	16	BracketFinder.java	search	fC	double	1	DEF	isMinim ? fW < $ : fW > $
1618	155	23	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ > fB : $ < fB
1618	155	23	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW > fB : fW < fB
1618	155	23	BracketFinder.java	search	fB	double	0	DEF	isMinim ? fW > $ : fW < $
1619	164	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (wLim - xC) >= 0
1619	164	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * ($ - xC) >= 0
1619	164	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * (wLim - $) >= 0
1620	167	19	BracketFinder.java	search	w	double	1	DEF	($ - wLim) * (xC - $) > 0
1620	167	19	BracketFinder.java	search	wLim	double	1	DEF	(w - $) * (xC - w) > 0
1620	167	19	BracketFinder.java	search	xC	double	1	DEF	(w - wLim) * ($ - w) > 0
1621	169	16	BracketFinder.java	search	fW	double	0	DEF	isMinim ? $ < fC : $ > fC
1621	169	16	BracketFinder.java	search	isMinim	boolean	0	DEF	$ ? fW < fC : fW > fC
1621	169	16	BracketFinder.java	search	fC	double	0	DEF	isMinim ? fW < $ : fW > $
1622	199	8	BracketFinder.java	search	THIS	BracketFinder	0	DEF	$.lo > $.hi
3267	83	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3268	103	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3269	125	8	BracketingNthOrderBrentSolver.java	BracketingNthOrderBrentSolver	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3270	155	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[1], 0.0, 1)
3271	162	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[0], 0.0, 1)
3272	169	8	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	1	DEF	$[0] * $[1] < 0
3273	179	12	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	0	RET	Precision.equals($[2], 0.0, 1)
3274	184	12	BracketingNthOrderBrentSolver.java	doSolve	y	double[]	1	DEF	$[1] * $[2] < 0
3275	213	12	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	MathInternalError:RET	FastMath.max(absYA, absYB) < $.getFunctionValueAccuracy()
3275	213	12	BracketingNthOrderBrentSolver.java	doSolve	xTol	double	0	MathInternalError:RET	(xB - xA) <= $
3275	213	12	BracketingNthOrderBrentSolver.java	doSolve	xA	double	0	MathInternalError:RET	(xB - $) <= xTol
3275	213	12	BracketingNthOrderBrentSolver.java	doSolve	absYA	double	0	MathInternalError:RET	FastMath.max($, absYB) < getFunctionValueAccuracy()
3275	213	12	BracketingNthOrderBrentSolver.java	doSolve	xB	double	0	MathInternalError:RET	($ - xA) <= xTol
3275	213	12	BracketingNthOrderBrentSolver.java	doSolve	absYB	double	0	MathInternalError:RET	FastMath.max(absYA, $) < getFunctionValueAccuracy()
3276	233	12	BracketingNthOrderBrentSolver.java	doSolve	agingA	int	1	DEF	$ >= MAXIMAL_AGING
3277	239	19	BracketingNthOrderBrentSolver.java	doSolve	agingB	int	1	DEF	$ >= MAXIMAL_AGING
24553	254	12	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	NIL-DOWHILE	Double.isNaN($)
24553	254	12	BracketingNthOrderBrentSolver.java	doSolve	start	int	0	NIL-DOWHILE	end - $ > 1
24553	254	12	BracketingNthOrderBrentSolver.java	doSolve	end	int	0	NIL-DOWHILE	$ - start > 1
3278	260	16	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	$ < xB
3278	260	16	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	$ > xA
3278	260	16	BracketingNthOrderBrentSolver.java	doSolve	xA	double	0	DEF	nextX > $
3278	260	16	BracketingNthOrderBrentSolver.java	doSolve	xB	double	0	DEF	nextX < $
3279	266	20	BracketingNthOrderBrentSolver.java	doSolve	start	int	1	DEF	signChangeIndex - $ >= end - signChangeIndex
3279	266	20	BracketingNthOrderBrentSolver.java	doSolve	end	int	1	DEF	signChangeIndex - start >= $ - signChangeIndex
3279	266	20	BracketingNthOrderBrentSolver.java	doSolve	signChangeIndex	int	1	DEF	$ - start >= end - $
3280	281	12	BracketingNthOrderBrentSolver.java	doSolve	nextX	double	0	DEF	Double.isNaN($)
3281	290	12	BracketingNthOrderBrentSolver.java	doSolve	nextY	double	0	RET	Precision.equals($, 0.0, 1)
3282	296	12	BracketingNthOrderBrentSolver.java	doSolve	start	int	1	DEF	end - $ != nbPoints
3282	296	12	BracketingNthOrderBrentSolver.java	doSolve	end	int	1	DEF	$ - start != nbPoints
3282	296	12	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	1	DEF	end - start != $
3282	296	12	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	1	DEF	$ > 2
3283	305	20	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	DEF	nbPoints == x.$.length
3283	305	20	BracketingNthOrderBrentSolver.java	doSolve	x	double[]	0	DEF	nbPoints == $.length
3283	305	20	BracketingNthOrderBrentSolver.java	doSolve	nbPoints	int	0	DEF	$ == x.length
3284	311	16	BracketingNthOrderBrentSolver.java	doSolve	THIS	BracketingNthOrderBrentSolver	0	DEF	signChangeIndex >= (x.$.length + 1) / 2
3284	311	16	BracketingNthOrderBrentSolver.java	doSolve	x	double[]	0	DEF	signChangeIndex >= ($.length + 1) / 2
3284	311	16	BracketingNthOrderBrentSolver.java	doSolve	signChangeIndex	int	0	DEF	$ >= (x.length + 1) / 2
3285	329	12	BracketingNthOrderBrentSolver.java	doSolve	nextY	double	1	DEF	$ * yA <= 0
3285	329	12	BracketingNthOrderBrentSolver.java	doSolve	yA	double	1	DEF	nextY * $ <= 0
24554	371	8	BracketingNthOrderBrentSolver.java	guessX	i	int	0	NIL-FOR	$ < end - 1
24554	371	8	BracketingNthOrderBrentSolver.java	guessX	end	int	0	NIL-FOR	i < $ - 1
24555	373	12	BracketingNthOrderBrentSolver.java	guessX	j	int	0	NIL-FOR	$ > i
24555	373	12	BracketingNthOrderBrentSolver.java	guessX	i	int	0	NIL-FOR	j > $
24556	380	8	BracketingNthOrderBrentSolver.java	guessX	j	int	0	NIL-FOR	$ >= start
24556	380	8	BracketingNthOrderBrentSolver.java	guessX	start	int	0	NIL-FOR	j >= $
3045	77	8	BracketingNthOrderBrentSolverDFP.java	BracketingNthOrderBrentSolverDFP	maximalOrder	int	0	NumberIsTooSmallException	$ < 2
3046	203	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[1].isZero()
3047	211	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[0].isZero()
3048	218	8	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	1	DEF	$[0].multiply($[1]).negativeOrNull()
3049	229	12	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	0	RET	$[2].isZero()
3050	234	12	BracketingNthOrderBrentSolverDFP.java	solve	y	Dfp[]	1	DEF	$[1].multiply($[2]).negativeOrNull()
3051	267	12	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	MathInternalError:RET	maxY.lessThan($.functionValueAccuracy)
3051	267	12	BracketingNthOrderBrentSolverDFP.java	solve	maxY	Dfp	0	MathInternalError:RET	$.lessThan(functionValueAccuracy)
3051	267	12	BracketingNthOrderBrentSolverDFP.java	solve	xTol	Dfp	0	MathInternalError:RET	xB.subtract(xA).subtract($).negativeOrNull()
3051	267	12	BracketingNthOrderBrentSolverDFP.java	solve	xA	Dfp	0	MathInternalError:RET	xB.subtract($).subtract(xTol).negativeOrNull()
3051	267	12	BracketingNthOrderBrentSolverDFP.java	solve	xB	Dfp	0	MathInternalError:RET	$.subtract(xA).subtract(xTol).negativeOrNull()
3052	288	12	BracketingNthOrderBrentSolverDFP.java	solve	agingA	int	1	DEF	$ >= MAXIMAL_AGING
3053	291	19	BracketingNthOrderBrentSolverDFP.java	solve	agingB	int	1	DEF	$ >= MAXIMAL_AGING
24444	303	12	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	NIL-DOWHILE	$.isNaN()
24444	303	12	BracketingNthOrderBrentSolverDFP.java	solve	start	int	0	NIL-DOWHILE	end - $ > 1
24444	303	12	BracketingNthOrderBrentSolverDFP.java	solve	end	int	0	NIL-DOWHILE	$ - start > 1
3054	309	16	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.greaterThan(xA)
3054	309	16	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.lessThan(xB)
3054	309	16	BracketingNthOrderBrentSolverDFP.java	solve	xA	Dfp	0	DEF	nextX.greaterThan($)
3054	309	16	BracketingNthOrderBrentSolverDFP.java	solve	xB	Dfp	0	DEF	nextX.lessThan($)
3055	315	20	BracketingNthOrderBrentSolverDFP.java	solve	start	int	1	DEF	signChangeIndex - $ >= end - signChangeIndex
3055	315	20	BracketingNthOrderBrentSolverDFP.java	solve	end	int	1	DEF	signChangeIndex - start >= $ - signChangeIndex
3055	315	20	BracketingNthOrderBrentSolverDFP.java	solve	signChangeIndex	int	1	DEF	$ - start >= end - $
3056	330	12	BracketingNthOrderBrentSolverDFP.java	solve	nextX	Dfp	0	DEF	$.isNaN()
3057	340	12	BracketingNthOrderBrentSolverDFP.java	solve	nextY	Dfp	0	RET	$.isZero()
3058	346	12	BracketingNthOrderBrentSolverDFP.java	solve	start	int	1	DEF	end - $ != nbPoints
3058	346	12	BracketingNthOrderBrentSolverDFP.java	solve	end	int	1	DEF	$ - start != nbPoints
3058	346	12	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	1	DEF	$ > 2
3058	346	12	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	1	DEF	end - start != $
3059	355	20	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	DEF	nbPoints == x.$.length
3059	355	20	BracketingNthOrderBrentSolverDFP.java	solve	x	Dfp[]	0	DEF	nbPoints == $.length
3059	355	20	BracketingNthOrderBrentSolverDFP.java	solve	nbPoints	int	0	DEF	$ == x.length
3060	361	16	BracketingNthOrderBrentSolverDFP.java	solve	THIS	BracketingNthOrderBrentSolverDFP	0	DEF	signChangeIndex >= (x.$.length + 1) / 2
3060	361	16	BracketingNthOrderBrentSolverDFP.java	solve	x	Dfp[]	0	DEF	signChangeIndex >= ($.length + 1) / 2
3060	361	16	BracketingNthOrderBrentSolverDFP.java	solve	signChangeIndex	int	0	DEF	$ >= (x.length + 1) / 2
3061	379	12	BracketingNthOrderBrentSolverDFP.java	solve	nextY	Dfp	1	DEF	$.multiply(yA).negativeOrNull()
3061	379	12	BracketingNthOrderBrentSolverDFP.java	solve	yA	Dfp	1	DEF	nextY.multiply($).negativeOrNull()
24445	421	8	BracketingNthOrderBrentSolverDFP.java	guessX	i	int	0	NIL-FOR	$ < end - 1
24445	421	8	BracketingNthOrderBrentSolverDFP.java	guessX	end	int	0	NIL-FOR	i < $ - 1
24446	423	12	BracketingNthOrderBrentSolverDFP.java	guessX	j	int	0	NIL-FOR	$ > i
24446	423	12	BracketingNthOrderBrentSolverDFP.java	guessX	i	int	0	NIL-FOR	j > $
24447	430	8	BracketingNthOrderBrentSolverDFP.java	guessX	j	int	0	NIL-FOR	$ >= start
24447	430	8	BracketingNthOrderBrentSolverDFP.java	guessX	start	int	0	NIL-FOR	j >= $
1623	77	8	BrentOptimizer.java	BrentOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
1624	80	8	BrentOptimizer.java	BrentOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
1625	120	8	BrentOptimizer.java	doOptimize	lo	double	1	DEF	$ < hi
1625	120	8	BrentOptimizer.java	doOptimize	hi	double	1	DEF	lo < $
1626	134	8	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1627	152	12	BrentOptimizer.java	doOptimize	stop	boolean	1	RET	$
1628	158	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(e) > $
1628	158	16	BrentOptimizer.java	doOptimize	e	double	1	DEF	FastMath.abs($) > tol1
1629	164	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	$ > 0
1630	173	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ > q * (a - x)
1630	173	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	$ < q * (b - x)
1630	173	20	BrentOptimizer.java	doOptimize	p	double	1	DEF	FastMath.abs($) < FastMath.abs(0.5 * q * r)
1630	173	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p > $ * (a - x)
1630	173	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	p < $ * (b - x)
1630	173	20	BrentOptimizer.java	doOptimize	q	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * $ * r)
1630	173	20	BrentOptimizer.java	doOptimize	r	double	1	DEF	FastMath.abs(p) < FastMath.abs(0.5 * q * $)
1630	173	20	BrentOptimizer.java	doOptimize	a	double	1	DEF	p > q * ($ - x)
1630	173	20	BrentOptimizer.java	doOptimize	b	double	1	DEF	p < q * ($ - x)
1630	173	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p > q * (a - $)
1630	173	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	p < q * (b - $)
1631	181	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	b - $ < tol2
1631	181	24	BrentOptimizer.java	doOptimize	u	double	0	DEF	$ - a < tol2
1631	181	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	b - u < $
1631	181	24	BrentOptimizer.java	doOptimize	tol2	double	0	DEF	u - a < $
1631	181	24	BrentOptimizer.java	doOptimize	a	double	0	DEF	u - $ < tol2
1631	181	24	BrentOptimizer.java	doOptimize	b	double	0	DEF	$ - u < tol2
1632	182	28	BrentOptimizer.java	doOptimize	m	double	1	DEF	x <= $
1632	182	28	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ <= m
1633	190	24	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1633	190	24	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1634	199	20	BrentOptimizer.java	doOptimize	m	double	1	DEF	x < $
1634	199	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	$ < m
1635	208	16	BrentOptimizer.java	doOptimize	tol1	double	1	DEF	FastMath.abs(d) < $
1635	208	16	BrentOptimizer.java	doOptimize	d	double	1	DEF	FastMath.abs($) < tol1
1636	209	20	BrentOptimizer.java	doOptimize	d	double	1	DEF	$ >= 0
1637	219	16	BrentOptimizer.java	doOptimize	isMinim	boolean	0	DEF	$
1638	227	16	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$ != null
1639	228	20	BrentOptimizer.java	doOptimize	checker	ConvergenceChecker<UnivariatePointValuePair>	0	RET	$.converged(iter, previous, current)
1639	228	20	BrentOptimizer.java	doOptimize	previous	UnivariatePointValuePair	0	RET	checker.converged(iter, $, current)
1639	228	20	BrentOptimizer.java	doOptimize	current	UnivariatePointValuePair	0	RET	checker.converged(iter, previous, $)
1639	228	20	BrentOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
1640	234	16	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fx
1640	234	16	BrentOptimizer.java	doOptimize	fx	double	1	DEF	fu <= $
1641	235	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1641	235	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1642	247	20	BrentOptimizer.java	doOptimize	u	double	1	DEF	$ < x
1642	247	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	u < $
1643	252	20	BrentOptimizer.java	doOptimize	fu	double	1	DEF	$ <= fw
1643	252	20	BrentOptimizer.java	doOptimize	x	double	1	DEF	Precision.equals(w, $)
1643	252	20	BrentOptimizer.java	doOptimize	w	double	1	DEF	Precision.equals($, x)
1643	252	20	BrentOptimizer.java	doOptimize	fw	double	1	DEF	fu <= $
1644	258	27	BrentOptimizer.java	doOptimize	fu	double	0	DEF	$ <= fv
1644	258	27	BrentOptimizer.java	doOptimize	x	double	0	DEF	Precision.equals(v, $)
1644	258	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, x)
1644	258	27	BrentOptimizer.java	doOptimize	v	double	0	DEF	Precision.equals($, w)
1644	258	27	BrentOptimizer.java	doOptimize	w	double	0	DEF	Precision.equals(v, $)
1644	258	27	BrentOptimizer.java	doOptimize	fv	double	0	DEF	fu <= $
3321	92	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
3321	92	8	BrentSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3322	98	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
3322	98	8	BrentSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3323	103	8	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
3323	103	8	BrentSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
3324	109	8	BrentSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
3324	109	8	BrentSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3325	114	8	BrentSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
3325	114	8	BrentSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
3326	152	12	BrentSolver.java	brent	fb	double	0	DEF	FastMath.abs(fc) < FastMath.abs($)
3326	152	12	BrentSolver.java	brent	fc	double	0	DEF	FastMath.abs($) < FastMath.abs(fb)
3327	164	12	BrentSolver.java	brent	tol	double	0	RET	FastMath.abs(m) <= $
3327	164	12	BrentSolver.java	brent	m	double	0	RET	FastMath.abs($) <= tol
3327	164	12	BrentSolver.java	brent	fb	double	0	RET	Precision.equals($, 0)
3328	168	12	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(e) < $
3328	168	12	BrentSolver.java	brent	fa	double	1	DEF	FastMath.abs($) <= FastMath.abs(fb)
3328	168	12	BrentSolver.java	brent	fb	double	1	DEF	FastMath.abs(fa) <= FastMath.abs($)
3328	168	12	BrentSolver.java	brent	e	double	1	DEF	FastMath.abs($) < tol
3329	180	16	BrentSolver.java	brent	a	double	1	DEF	$ == c
3329	180	16	BrentSolver.java	brent	c	double	1	DEF	a == $
3330	191	16	BrentSolver.java	brent	p	double	1	DEF	$ > 0
3331	198	16	BrentSolver.java	brent	s	double	1	DEF	p >= FastMath.abs(0.5 * $ * q)
3331	198	16	BrentSolver.java	brent	p	double	1	DEF	$ >= 1.5 * m * q - FastMath.abs(tol * q)
3331	198	16	BrentSolver.java	brent	p	double	1	DEF	$ >= FastMath.abs(0.5 * s * q)
3331	198	16	BrentSolver.java	brent	q	double	1	DEF	p >= 1.5 * m * $ - FastMath.abs(tol * $)
3331	198	16	BrentSolver.java	brent	q	double	1	DEF	p >= FastMath.abs(0.5 * s * $)
3331	198	16	BrentSolver.java	brent	tol	double	1	DEF	p >= 1.5 * m * q - FastMath.abs($ * q)
3331	198	16	BrentSolver.java	brent	m	double	1	DEF	p >= 1.5 * $ * q - FastMath.abs(tol * q)
3332	212	12	BrentSolver.java	brent	tol	double	1	DEF	FastMath.abs(d) > $
3332	212	12	BrentSolver.java	brent	d	double	1	DEF	FastMath.abs($) > tol
3333	214	19	BrentSolver.java	brent	m	double	1	DEF	$ > 0
3334	220	12	BrentSolver.java	brent	fb	double	0	DEF	$ <= 0
3334	220	12	BrentSolver.java	brent	fb	double	0	DEF	$ > 0
3334	220	12	BrentSolver.java	brent	fc	double	0	DEF	$ > 0
3334	220	12	BrentSolver.java	brent	fc	double	0	DEF	$ <= 0
23778	366	12	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	$.iterations <= $.maxIterations
23779	372	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	k < $.lambda
23779	372	16	CMAESOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < lambda
23780	374	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.checkFeasableCount+1
23780	374	20	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < checkFeasableCount+1
1775	375	24	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
1776	382	24	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.checkFeasableCount
1776	382	24	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= checkFeasableCount
1776	382	24	CMAESOptimizer.java	doOptimize	arxk	RealMatrix	0	DEF	fitfun.isFeasible($.getColumn(0))
1776	382	24	CMAESOptimizer.java	doOptimize	fitfun	FitnessFunction	0	DEF	$.isFeasible(arxk.getColumn(0))
1777	404	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	1	DEF	$.diagonalOnly <= 0
1778	413	16	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	bestValue > $
1778	413	16	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ > bestFitness
1779	419	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
1779	419	20	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
1780	420	24	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, optimum, lastResult)
1780	420	24	CMAESOptimizer.java	doOptimize	optimum	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
1780	420	24	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, optimum, $)
1781	427	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.stopFitness != 0
1782	428	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestFitness < ($.isMinimize ? $.stopFitness : -$.stopFitness)
1782	428	20	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	$ < (isMinimize ? stopFitness : -stopFitness)
23781	434	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
23781	434	16	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
1783	435	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > $.stopTolX
1783	435	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma*(Math.max(Math.abs(pcCol[$]), sqrtDiagC[$])) > stopTolX
1783	435	20	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma*(Math.max(Math.abs(pcCol[i]), $[i])) > stopTolX
1783	435	20	CMAESOptimizer.java	doOptimize	pcCol	double[]	0	DEF	sigma*(Math.max(Math.abs($[i]), sqrtDiagC[i])) > stopTolX
1784	438	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	i >= $.dimension-1
1784	438	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	$ >= dimension-1
23782	442	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
23782	442	16	CMAESOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < dimension
1785	443	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.sigma*sqrtDiagC[i] > $.stopTolUpX
1785	443	20	CMAESOptimizer.java	doOptimize	i	int	0	DEF	sigma*sqrtDiagC[$] > stopTolUpX
1785	443	20	CMAESOptimizer.java	doOptimize	sqrtDiagC	double[]	0	DEF	sigma*$[i] > stopTolUpX
1786	449	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
1786	449	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, bestFitness) < $.stopTolFun
1786	449	16	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min(historyBest, $) < stopTolFun
1786	449	16	CMAESOptimizer.java	doOptimize	worstFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, bestFitness) < stopTolFun
1786	449	16	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, worstFitness) - Math.min($, bestFitness) < stopTolFun
1786	449	16	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, worstFitness) - Math.min(historyBest, bestFitness) < stopTolFun
1787	453	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	historyWorst-historyBest < $.stopTolHistFun
1787	453	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > $.fitnessHistory.$.length
1787	453	16	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	historyWorst-$ < stopTolHistFun
1787	453	16	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	$-historyBest < stopTolHistFun
1788	458	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.max($.diagD)/$.min($.diagD) > 1e7
1789	462	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker() != null
1790	466	20	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.getConvergenceChecker().converged($.iterations, current, lastResult)
1790	466	20	CMAESOptimizer.java	doOptimize	current	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, $, lastResult)
1790	466	20	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	$ != null
1790	466	20	CMAESOptimizer.java	doOptimize	lastResult	PointValuePair	0	DEF	getConvergenceChecker().converged(iterations, current, $)
1791	473	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	bestValue == fitness[arindex[(int)(0.1+$.lambda/4.)]]
1791	473	16	CMAESOptimizer.java	doOptimize	fitness	double[]	0	DEF	bestValue == $[arindex[(int)(0.1+lambda/4.)]]
1791	473	16	CMAESOptimizer.java	doOptimize	arindex	int[]	0	DEF	bestValue == fitness[$[(int)(0.1+lambda/4.)]]
1791	473	16	CMAESOptimizer.java	doOptimize	bestValue	double	0	DEF	$ == fitness[arindex[(int)(0.1+lambda/4.)]]
1792	476	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.iterations > 2
1792	476	16	CMAESOptimizer.java	doOptimize	bestFitness	double	0	DEF	Math.max(historyWorst, $) - Math.min(historyBest, $) == 0
1792	476	16	CMAESOptimizer.java	doOptimize	historyBest	double	0	DEF	Math.max(historyWorst, bestFitness) - Math.min($, bestFitness) == 0
1792	476	16	CMAESOptimizer.java	doOptimize	historyWorst	double	0	DEF	Math.max($, bestFitness) - Math.min(historyBest, bestFitness) == 0
1793	483	16	CMAESOptimizer.java	doOptimize	THIS	CMAESOptimizer	0	DEF	$.generateStatistics
23783	503	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < lB.$.length
23783	503	8	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < lB.length
23783	503	8	CMAESOptimizer.java	checkParameters	lB	double[]	0	NIL-FOR	i < $.length
1794	504	12	CMAESOptimizer.java	checkParameters	i	int	0	DEF	Double.isInfinite(uB[$])
1794	504	12	CMAESOptimizer.java	checkParameters	i	int	0	DEF	Double.isInfinite(lB[$])
1794	504	12	CMAESOptimizer.java	checkParameters	lB	double[]	0	DEF	Double.isInfinite($[i])
1794	504	12	CMAESOptimizer.java	checkParameters	uB	double[]	0	DEF	Double.isInfinite($[i])
1795	512	8	CMAESOptimizer.java	checkParameters	hasFiniteBounds	boolean	1	MathUnsupportedOperationException	$
23784	513	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < lB.$.length
23784	513	12	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < lB.length
23784	513	12	CMAESOptimizer.java	checkParameters	lB	double[]	0	NIL-FOR	i < $.length
1796	514	16	CMAESOptimizer.java	checkParameters	i	int	0	DEF	Double.isInfinite(lB[$])
1796	514	16	CMAESOptimizer.java	checkParameters	i	int	0	DEF	Double.isInfinite(uB[$])
1796	514	16	CMAESOptimizer.java	checkParameters	lB	double[]	0	DEF	Double.isInfinite($[i])
1796	514	16	CMAESOptimizer.java	checkParameters	uB	double[]	0	DEF	Double.isInfinite($[i])
1797	521	12	CMAESOptimizer.java	checkParameters	hasInfiniteBounds	boolean	1	MathUnsupportedOperationException	$
1798	536	8	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma != null
1799	537	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	DimensionMismatchException	$.inputSigma.$.length != init.$.length
1799	537	12	CMAESOptimizer.java	checkParameters	init	double[]	0	DimensionMismatchException	inputSigma.length != $.length
23785	540	12	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NIL-FOR	i < init.$.length
23785	540	12	CMAESOptimizer.java	checkParameters	i	int	0	NIL-FOR	$ < init.length
23785	540	12	CMAESOptimizer.java	checkParameters	init	double[]	0	NIL-FOR	i < $.length
1800	541	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	NotPositiveException	$.inputSigma[i] < 0
1800	541	16	CMAESOptimizer.java	checkParameters	i	int	0	NotPositiveException	inputSigma[$] < 0
1801	544	16	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.boundaries != null
1802	545	20	CMAESOptimizer.java	checkParameters	THIS	CMAESOptimizer	0	OutOfRangeException	$.inputSigma[i] > $.boundaries[1][i] - $.boundaries[0][i]
1802	545	20	CMAESOptimizer.java	checkParameters	i	int	0	OutOfRangeException	inputSigma[$] > boundaries[1][$] - boundaries[0][$]
1803	559	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	DEF	$.lambda <= 0
23786	564	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < guess.$.length
23786	564	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < guess.length
23786	564	8	CMAESOptimizer.java	initializeCMA	guess	double[]	0	NIL-FOR	i < $.length
23787	583	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.mu
23787	583	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < mu
23788	622	8	CMAESOptimizer.java	initializeCMA	THIS	CMAESOptimizer	0	NIL-FOR	i < $.historySize
23788	622	8	CMAESOptimizer.java	initializeCMA	i	int	0	NIL-FOR	$ < historySize
1804	644	8	CMAESOptimizer.java	updateEvolutionPaths	hsig	boolean	0	DEF	$
1805	672	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.iterations > $.diagonalOnly
1805	672	8	CMAESOptimizer.java	updateCovarianceDiagonalOnly	THIS	CMAESOptimizer	0	DEF	$.diagonalOnly > 1
1806	695	8	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu > 0
1807	703	12	CMAESOptimizer.java	updateCovariance	THIS	CMAESOptimizer	1	DEF	$.isActiveCMA
1808	727	16	CMAESOptimizer.java	updateCovariance	negcovMax	double	0	DEF	negccov > $
1808	727	16	CMAESOptimizer.java	updateCovariance	negccov	double	0	DEF	$ > negcovMax
1809	766	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.ccov1 + $.ccovmu + negccov > 0
1809	766	8	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	($.iterations % 1. / ($.ccov1 + $.ccovmu + negccov) / $.dimension / 10.) < 1.
1809	766	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	ccov1 + ccovmu + $ > 0
1809	766	8	CMAESOptimizer.java	updateBD	negccov	double	0	DEF	(iterations % 1. / (ccov1 + ccovmu + $) / dimension / 10.) < 1.
1810	775	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.min($.diagD) <= 0
23789	776	16	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	NIL-FOR	i < $.dimension
23789	776	16	CMAESOptimizer.java	updateBD	i	int	0	NIL-FOR	$ < dimension
1811	777	20	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.diagD.getEntry(i, 0) < 0
1811	777	20	CMAESOptimizer.java	updateBD	i	int	0	DEF	diagD.getEntry($, 0) < 0
1812	785	12	CMAESOptimizer.java	updateBD	THIS	CMAESOptimizer	0	DEF	$.max($.diagD) > 1e14 * $.min($.diagD)
23790	803	8	CMAESOptimizer.java	push	i	int	0	NIL-FOR	$ > 0
23791	817	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
23791	817	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
23791	817	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
23792	822	8	CMAESOptimizer.java	sortedIndices	THIS	CMAESOptimizer	0	NIL-FOR	i < doubles.$.length
23792	822	8	CMAESOptimizer.java	sortedIndices	i	int	0	NIL-FOR	$ < doubles.length
23792	822	8	CMAESOptimizer.java	sortedIndices	doubles	double[]	0	NIL-FOR	i < $.length
23793	1015	8	CMAESOptimizer.java	log	r	int	0	NIL-FOR	$ < m.getRowDimension()
23793	1015	8	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
23794	1016	12	CMAESOptimizer.java	log	c	int	0	NIL-FOR	$ < m.getColumnDimension()
23794	1016	12	CMAESOptimizer.java	log	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
23795	1030	8	CMAESOptimizer.java	sqrt	r	int	0	NIL-FOR	$ < m.getRowDimension()
23795	1030	8	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
23796	1031	12	CMAESOptimizer.java	sqrt	c	int	0	NIL-FOR	$ < m.getColumnDimension()
23796	1031	12	CMAESOptimizer.java	sqrt	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
23797	1044	8	CMAESOptimizer.java	square	r	int	0	NIL-FOR	$ < m.getRowDimension()
23797	1044	8	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
23798	1045	12	CMAESOptimizer.java	square	c	int	0	NIL-FOR	$ < m.getColumnDimension()
23798	1045	12	CMAESOptimizer.java	square	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
23799	1060	8	CMAESOptimizer.java	times	r	int	0	NIL-FOR	$ < m.getRowDimension()
23799	1060	8	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
23800	1061	12	CMAESOptimizer.java	times	c	int	0	NIL-FOR	$ < m.getColumnDimension()
23800	1061	12	CMAESOptimizer.java	times	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
23801	1075	8	CMAESOptimizer.java	divide	r	int	0	NIL-FOR	$ < m.getRowDimension()
23801	1075	8	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
23802	1076	12	CMAESOptimizer.java	divide	c	int	0	NIL-FOR	$ < m.getColumnDimension()
23802	1076	12	CMAESOptimizer.java	divide	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
23803	1090	8	CMAESOptimizer.java	selectColumns	r	int	0	NIL-FOR	$ < m.getRowDimension()
23803	1090	8	CMAESOptimizer.java	selectColumns	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
23804	1091	12	CMAESOptimizer.java	selectColumns	THIS	CMAESOptimizer	0	NIL-FOR	c < cols.$.length
23804	1091	12	CMAESOptimizer.java	selectColumns	c	int	0	NIL-FOR	$ < cols.length
23804	1091	12	CMAESOptimizer.java	selectColumns	cols	int[]	0	NIL-FOR	c < $.length
23805	1105	8	CMAESOptimizer.java	triu	r	int	0	NIL-FOR	$ < m.getRowDimension()
23805	1105	8	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
23806	1106	12	CMAESOptimizer.java	triu	c	int	0	NIL-FOR	$ < m.getColumnDimension()
23806	1106	12	CMAESOptimizer.java	triu	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
23807	1119	8	CMAESOptimizer.java	sumRows	c	int	0	NIL-FOR	$ < m.getColumnDimension()
23807	1119	8	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
23808	1121	12	CMAESOptimizer.java	sumRows	r	int	0	NIL-FOR	$ < m.getRowDimension()
23808	1121	12	CMAESOptimizer.java	sumRows	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
1813	1135	8	CMAESOptimizer.java	diag	m	RealMatrix	1	RET	$.getColumnDimension() == 1
23809	1137	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getRowDimension()
23809	1137	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
23810	1143	12	CMAESOptimizer.java	diag	i	int	0	NIL-FOR	$ < m.getColumnDimension()
23810	1143	12	CMAESOptimizer.java	diag	m	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
23811	1159	8	CMAESOptimizer.java	copyColumn	i	int	0	NIL-FOR	$ < m1.getRowDimension()
23811	1159	8	CMAESOptimizer.java	copyColumn	m1	RealMatrix	0	NIL-FOR	i < $.getRowDimension()
23812	1171	8	CMAESOptimizer.java	ones	r	int	0	NIL-FOR	$ < n
23812	1171	8	CMAESOptimizer.java	ones	n	int	0	NIL-FOR	r < $
23813	1184	8	CMAESOptimizer.java	eye	r	int	0	NIL-FOR	$ < n
23813	1184	8	CMAESOptimizer.java	eye	n	int	0	NIL-FOR	r < $
1814	1185	12	CMAESOptimizer.java	eye	r	int	0	DEF	$ < m
1814	1185	12	CMAESOptimizer.java	eye	m	int	0	DEF	r < $
23814	1211	8	CMAESOptimizer.java	repmat	r	int	0	NIL-FOR	$ < n * rd
23814	1211	8	CMAESOptimizer.java	repmat	rd	int	0	NIL-FOR	r < n * $
23814	1211	8	CMAESOptimizer.java	repmat	n	int	0	NIL-FOR	r < $ * rd
23815	1212	12	CMAESOptimizer.java	repmat	c	int	0	NIL-FOR	$ < m * cd
23815	1212	12	CMAESOptimizer.java	repmat	cd	int	0	NIL-FOR	c < m * $
23815	1212	12	CMAESOptimizer.java	repmat	m	int	0	NIL-FOR	c < $ * cd
23816	1229	8	CMAESOptimizer.java	sequence	r	int	0	NIL-FOR	$ < size
23816	1229	8	CMAESOptimizer.java	sequence	size	int	0	NIL-FOR	r < $
23817	1242	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.getRowDimension()
23817	1242	8	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
23818	1243	12	CMAESOptimizer.java	max	c	int	0	NIL-FOR	$ < m.getColumnDimension()
23818	1243	12	CMAESOptimizer.java	max	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
1815	1245	16	CMAESOptimizer.java	max	e	double	0	DEF	max < $
1815	1245	16	CMAESOptimizer.java	max	max	double	0	DEF	$ < e
23819	1259	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.getRowDimension()
23819	1259	8	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	r < $.getRowDimension()
23820	1260	12	CMAESOptimizer.java	min	c	int	0	NIL-FOR	$ < m.getColumnDimension()
23820	1260	12	CMAESOptimizer.java	min	m	RealMatrix	0	NIL-FOR	c < $.getColumnDimension()
1816	1262	16	CMAESOptimizer.java	min	e	double	0	DEF	min > $
1816	1262	16	CMAESOptimizer.java	min	min	double	0	DEF	$ > e
23821	1276	8	CMAESOptimizer.java	max	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
23821	1276	8	CMAESOptimizer.java	max	r	int	0	NIL-FOR	$ < m.length
23821	1276	8	CMAESOptimizer.java	max	m	double[]	0	NIL-FOR	r < $.length
1817	1277	12	CMAESOptimizer.java	max	r	int	0	DEF	max < m[$]
1817	1277	12	CMAESOptimizer.java	max	max	double	0	DEF	$ < m[r]
1817	1277	12	CMAESOptimizer.java	max	m	double[]	0	DEF	max < $[r]
23822	1290	8	CMAESOptimizer.java	min	THIS	CMAESOptimizer	0	NIL-FOR	r < m.$.length
23822	1290	8	CMAESOptimizer.java	min	r	int	0	NIL-FOR	$ < m.length
23822	1290	8	CMAESOptimizer.java	min	m	double[]	0	NIL-FOR	r < $.length
1818	1291	12	CMAESOptimizer.java	min	r	int	0	DEF	min > m[$]
1818	1291	12	CMAESOptimizer.java	min	min	double	0	DEF	$ > m[r]
1818	1291	12	CMAESOptimizer.java	min	m	double[]	0	DEF	min > $[r]
23823	1304	8	CMAESOptimizer.java	inverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
23823	1304	8	CMAESOptimizer.java	inverse	i	int	0	NIL-FOR	$ < indices.length
23823	1304	8	CMAESOptimizer.java	inverse	indices	int[]	0	NIL-FOR	i < $.length
23824	1316	8	CMAESOptimizer.java	reverse	THIS	CMAESOptimizer	0	NIL-FOR	i < indices.$.length
23824	1316	8	CMAESOptimizer.java	reverse	i	int	0	NIL-FOR	$ < indices.length
23824	1316	8	CMAESOptimizer.java	reverse	indices	int[]	0	NIL-FOR	i < $.length
23825	1328	8	CMAESOptimizer.java	randn	i	int	0	NIL-FOR	$ < size
23825	1328	8	CMAESOptimizer.java	randn	size	int	0	NIL-FOR	i < $
23826	1341	8	CMAESOptimizer.java	randn1	r	int	0	NIL-FOR	$ < size
23826	1341	8	CMAESOptimizer.java	randn1	size	int	0	NIL-FOR	r < $
23827	1342	12	CMAESOptimizer.java	randn1	c	int	0	NIL-FOR	$ < popSize
23827	1342	12	CMAESOptimizer.java	randn1	popSize	int	0	NIL-FOR	c < $
1019	100	8	CauchyDistribution.java	CauchyDistribution	scale	double	0	NotStrictlyPositiveException	$ <= 0
1020	157	8	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0
1020	157	8	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1
1021	159	15	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
1022	161	16	CauchyDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
2190	83	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	DimensionMismatchException	expected.$.length < 2
2190	83	8	ChiSquareTest.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length < 2
2191	86	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	DimensionMismatchException	expected.$.length != observed.$.length
2191	86	8	ChiSquareTest.java	chiSquare	expected	double[]	0	DimensionMismatchException	$.length != observed.length
2191	86	8	ChiSquareTest.java	chiSquare	observed	long[]	0	DimensionMismatchException	expected.length != $.length
24019	94	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	NIL-FOR	i < observed.$.length
24019	94	8	ChiSquareTest.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
24019	94	8	ChiSquareTest.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
2192	100	8	ChiSquareTest.java	chiSquare	sumExpected	double	0	DEF	FastMath.abs($ - sumObserved) > 10E-6
2192	100	8	ChiSquareTest.java	chiSquare	sumObserved	double	0	DEF	FastMath.abs(sumExpected - $) > 10E-6
24020	105	8	ChiSquareTest.java	chiSquare	THIS	ChiSquareTest	0	NIL-FOR	i < observed.$.length
24020	105	8	ChiSquareTest.java	chiSquare	i	int	0	NIL-FOR	$ < observed.length
24020	105	8	ChiSquareTest.java	chiSquare	observed	long[]	0	NIL-FOR	i < $.length
2193	106	12	ChiSquareTest.java	chiSquare	rescale	boolean	1	DEF	$
2194	209	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
2194	209	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
24021	257	8	ChiSquareTest.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
24021	257	8	ChiSquareTest.java	chiSquare	nRows	int	0	NIL-FOR	row < $
24022	258	12	ChiSquareTest.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
24022	258	12	ChiSquareTest.java	chiSquare	nCols	int	0	NIL-FOR	col < $
24023	268	8	ChiSquareTest.java	chiSquare	row	int	0	NIL-FOR	$ < nRows
24023	268	8	ChiSquareTest.java	chiSquare	nRows	int	0	NIL-FOR	row < $
24024	269	12	ChiSquareTest.java	chiSquare	col	int	0	NIL-FOR	$ < nCols
24024	269	12	ChiSquareTest.java	chiSquare	nCols	int	0	NIL-FOR	col < $
2195	364	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ > 0.5
2195	364	8	ChiSquareTest.java	chiSquareTest	alpha	double	0	OutOfRangeException	$ <= 0
2196	415	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	DimensionMismatchException	observed1.$.length < 2
2196	415	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length < 2
2197	418	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	DimensionMismatchException	observed1.$.length != observed2.$.length
2197	418	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	DimensionMismatchException	$.length != observed2.length
2197	418	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed2	long[]	0	DimensionMismatchException	observed1.length != $.length
24025	431	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	NIL-FOR	i < observed1.$.length
24025	431	8	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
24025	431	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2198	436	8	ChiSquareTest.java	chiSquareDataSetsComparison	countSum1	long	0	ZeroException	$ == 0
2198	436	8	ChiSquareTest.java	chiSquareDataSetsComparison	countSum2	long	0	ZeroException	$ == 0
2199	441	8	ChiSquareTest.java	chiSquareDataSetsComparison	unequalCounts	boolean	0	DEF	$
24026	449	8	ChiSquareTest.java	chiSquareDataSetsComparison	THIS	ChiSquareTest	0	NIL-FOR	i < observed1.$.length
24026	449	8	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	0	NIL-FOR	$ < observed1.length
24026	449	8	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	0	NIL-FOR	i < $.length
2200	450	12	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	1	ZeroException	observed2[$] == 0
2200	450	12	ChiSquareTest.java	chiSquareDataSetsComparison	i	int	1	ZeroException	observed1[$] == 0
2200	450	12	ChiSquareTest.java	chiSquareDataSetsComparison	observed1	long[]	1	ZeroException	$[i] == 0
2200	450	12	ChiSquareTest.java	chiSquareDataSetsComparison	observed2	long[]	1	ZeroException	$[i] == 0
2201	455	16	ChiSquareTest.java	chiSquareDataSetsComparison	unequalCounts	boolean	1	DEF	$
2202	567	8	ChiSquareTest.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ <= 0
2202	567	8	ChiSquareTest.java	chiSquareTestDataSetsComparison	alpha	double	0	OutOfRangeException	$ > 0.5
2203	589	8	ChiSquareTest.java	checkArray	THIS	ChiSquareTest	0	DimensionMismatchException	in.$.length < 2
2203	589	8	ChiSquareTest.java	checkArray	in	long[][]	0	DimensionMismatchException	$.length < 2
2204	593	8	ChiSquareTest.java	checkArray	THIS	ChiSquareTest	0	DimensionMismatchException	in[0].length < 2
2204	593	8	ChiSquareTest.java	checkArray	in	long[][]	0	DimensionMismatchException	$[0].length < 2
24027	615	8	ChiSquareTest.java	checkRectangular	THIS	ChiSquareTest	0	NIL-FOR	i < in.$.length
24027	615	8	ChiSquareTest.java	checkRectangular	i	int	0	NIL-FOR	$ < in.length
24027	615	8	ChiSquareTest.java	checkRectangular	in	long[][]	0	NIL-FOR	i < $.length
2205	616	12	ChiSquareTest.java	checkRectangular	THIS	ChiSquareTest	0	DimensionMismatchException	in[i].length != in[0].length
2205	616	12	ChiSquareTest.java	checkRectangular	i	int	0	DimensionMismatchException	in[$].length != in[0].length
2205	616	12	ChiSquareTest.java	checkRectangular	in	long[][]	0	DimensionMismatchException	$[i].length != $[0].length
24028	634	8	ChiSquareTest.java	checkPositive	THIS	ChiSquareTest	0	NIL-FOR	i < in.$.length
24028	634	8	ChiSquareTest.java	checkPositive	i	int	0	NIL-FOR	$ < in.length
24028	634	8	ChiSquareTest.java	checkPositive	in	double[]	0	NIL-FOR	i < $.length
2206	635	12	ChiSquareTest.java	checkPositive	i	int	0	NotStrictlyPositiveException	in[$] <= 0
2206	635	12	ChiSquareTest.java	checkPositive	in	double[]	0	NotStrictlyPositiveException	$[i] <= 0
24029	651	8	ChiSquareTest.java	checkNonNegative	THIS	ChiSquareTest	0	NIL-FOR	i < in.$.length
24029	651	8	ChiSquareTest.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
24029	651	8	ChiSquareTest.java	checkNonNegative	in	long[]	0	NIL-FOR	i < $.length
2207	652	12	ChiSquareTest.java	checkNonNegative	i	int	0	NotPositiveException	in[$] < 0
2207	652	12	ChiSquareTest.java	checkNonNegative	in	long[]	0	NotPositiveException	$[i] < 0
24030	668	8	ChiSquareTest.java	checkNonNegative	THIS	ChiSquareTest	0	NIL-FOR	i < in.$.length
24030	668	8	ChiSquareTest.java	checkNonNegative	i	int	0	NIL-FOR	$ < in.length
24030	668	8	ChiSquareTest.java	checkNonNegative	in	long[][]	0	NIL-FOR	i < $.length
24031	669	12	ChiSquareTest.java	checkNonNegative	THIS	ChiSquareTest	0	NIL-FOR	j < in[i].length
24031	669	12	ChiSquareTest.java	checkNonNegative	j	int	0	NIL-FOR	$ < in[i].length
24031	669	12	ChiSquareTest.java	checkNonNegative	i	int	0	NIL-FOR	j < in[$].length
24031	669	12	ChiSquareTest.java	checkNonNegative	in	long[][]	0	NIL-FOR	j < $[i].length
2208	670	16	ChiSquareTest.java	checkNonNegative	j	int	0	NotPositiveException	in[i][$] < 0
2208	670	16	ChiSquareTest.java	checkNonNegative	i	int	0	NotPositiveException	in[$][j] < 0
2208	670	16	ChiSquareTest.java	checkNonNegative	in	long[][]	0	NotPositiveException	$[i][j] < 0
1307	107	8	CholeskyDecomposition.java	CholeskyDecomposition	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
23228	118	8	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	$ < order
23228	118	8	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	i < $
23229	122	12	CholeskyDecomposition.java	CholeskyDecomposition	j	int	0	NIL-FOR	$ < order
23229	122	12	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	j < $
1308	128	16	CholeskyDecomposition.java	CholeskyDecomposition	lIJ	double	0	NonSymmetricMatrixException	FastMath.abs($ - lJI) > maxDelta
1308	128	16	CholeskyDecomposition.java	CholeskyDecomposition	lJI	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - $) > maxDelta
1308	128	16	CholeskyDecomposition.java	CholeskyDecomposition	maxDelta	double	0	NonSymmetricMatrixException	FastMath.abs(lIJ - lJI) > $
23230	136	8	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	$ < order
23230	136	8	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	i < $
1309	141	12	CholeskyDecomposition.java	CholeskyDecomposition	ltI	double[]	0	NonPositiveDefiniteMatrixException	$[i] <= absolutePositivityThreshold
1309	141	12	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NonPositiveDefiniteMatrixException	ltI[$] <= absolutePositivityThreshold
1309	141	12	CholeskyDecomposition.java	CholeskyDecomposition	absolutePositivityThreshold	double	0	NonPositiveDefiniteMatrixException	ltI[i] <= $
23231	148	12	CholeskyDecomposition.java	CholeskyDecomposition	q	int	0	NIL-FOR	$ > i
23231	148	12	CholeskyDecomposition.java	CholeskyDecomposition	i	int	0	NIL-FOR	q > $
23232	151	16	CholeskyDecomposition.java	CholeskyDecomposition	p	int	0	NIL-FOR	$ < order
23232	151	16	CholeskyDecomposition.java	CholeskyDecomposition	order	int	0	NIL-FOR	p < $
1310	164	8	CholeskyDecomposition.java	getL	THIS	CholeskyDecomposition	0	DEF	$.cachedL == null
1311	177	8	CholeskyDecomposition.java	getLT	THIS	CholeskyDecomposition	0	DEF	$.cachedLT == null
23233	191	8	CholeskyDecomposition.java	getDeterminant	THIS	CholeskyDecomposition	0	NIL-FOR	i < $.lTData.$.length
23233	191	8	CholeskyDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < lTData.length
2528	45	8	Chromosome.java	getFitness	THIS	Chromosome	0	DEF	$.fitness == NO_FITNESS
2529	90	12	Chromosome.java	findSameChromosome	THIS	Chromosome	0	RET	$.isSame($.anotherChr)
2530	105	8	Chromosome.java	searchForFitnessUpdate	sameChromosome	Chromosome	0	DEF	$ != null
2735	100	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	1	DEF	$.previousState != null
2735	100	8	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
24353	106	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
24353	106	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
24354	121	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ClassicalRungeKuttaStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
24354	121	12	ClassicalRungeKuttaStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
776	116	8	Complex.java	abs	THIS	Complex	0	RET	$.isNaN
777	119	8	Complex.java	abs	THIS	Complex	0	RET	$.isInfinite()
778	122	8	Complex.java	abs	THIS	Complex	1	RET	FastMath.abs($.real) < FastMath.abs($.imaginary)
779	123	12	Complex.java	abs	THIS	Complex	0	RET	$.imaginary == 0.0
780	129	12	Complex.java	abs	THIS	Complex	0	RET	$.real == 0.0
781	158	8	Complex.java	add	THIS	Complex	0	RET	addend.$.isNaN
781	158	8	Complex.java	add	THIS	Complex	0	RET	$.isNaN
781	158	8	Complex.java	add	addend	Complex	0	RET	$.isNaN
782	175	8	Complex.java	add	THIS	Complex	0	RET	$.isNaN
782	175	8	Complex.java	add	addend	double	0	RET	Double.isNaN($)
783	197	8	Complex.java	conjugate	THIS	Complex	0	RET	$.isNaN
784	249	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN
784	249	8	Complex.java	divide	THIS	Complex	0	RET	divisor.$.isNaN
784	249	8	Complex.java	divide	divisor	Complex	0	RET	$.isNaN
785	255	8	Complex.java	divide	c	double	0	RET	$ == 0.0
785	255	8	Complex.java	divide	d	double	0	RET	$ == 0.0
786	259	8	Complex.java	divide	THIS	Complex	0	RET	$.isInfinite()
786	259	8	Complex.java	divide	divisor	Complex	0	RET	$.isInfinite()
787	263	8	Complex.java	divide	c	double	1	RET	FastMath.abs($) < FastMath.abs(d)
787	263	8	Complex.java	divide	d	double	1	RET	FastMath.abs(c) < FastMath.abs($)
788	285	8	Complex.java	divide	THIS	Complex	0	RET	$.isNaN
788	285	8	Complex.java	divide	divisor	double	0	RET	Double.isNaN($)
789	288	8	Complex.java	divide	divisor	double	0	RET	$ == 0d
790	291	8	Complex.java	divide	divisor	double	0	RET	Double.isInfinite($)
791	300	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.isNaN
792	304	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.real == 0.0
792	304	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.imaginary == 0.0
793	308	8	Complex.java	reciprocal	THIS	Complex	0	RET	$.isInfinite
794	312	8	Complex.java	reciprocal	THIS	Complex	1	RET	FastMath.abs($.real) < FastMath.abs($.imaginary)
795	340	8	Complex.java	equals	THIS	Complex	0	RET	$ == other
795	340	8	Complex.java	equals	other	Object	0	RET	this == $
796	343	8	Complex.java	equals	other	Object	0	RET	$ instanceof Complex
797	345	12	Complex.java	equals	THIS	Complex	1	RET	c.$.isNaN
797	345	12	Complex.java	equals	c	Complex	1	RET	$.isNaN
798	363	8	Complex.java	hashCode	THIS	Complex	0	RET	$.isNaN
799	439	8	Complex.java	multiply	THIS	Complex	0	RET	factor.$.isNaN
799	439	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
799	439	8	Complex.java	multiply	factor	Complex	0	RET	$.isNaN
800	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
800	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(factor.$.real)
800	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite(factor.$.imaginary)
800	442	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
800	442	8	Complex.java	multiply	factor	Complex	0	RET	Double.isInfinite($.real)
800	442	8	Complex.java	multiply	factor	Complex	0	RET	Double.isInfinite($.imaginary)
801	462	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
802	465	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
802	465	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
803	481	8	Complex.java	multiply	THIS	Complex	0	RET	$.isNaN
803	481	8	Complex.java	multiply	factor	double	0	RET	Double.isNaN($)
804	484	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
804	484	8	Complex.java	multiply	THIS	Complex	0	RET	Double.isInfinite($.real)
804	484	8	Complex.java	multiply	factor	double	0	RET	Double.isInfinite($)
805	501	8	Complex.java	negate	THIS	Complex	0	RET	$.isNaN
806	529	8	Complex.java	subtract	THIS	Complex	0	RET	subtrahend.$.isNaN
806	529	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN
806	529	8	Complex.java	subtract	subtrahend	Complex	0	RET	$.isNaN
807	546	8	Complex.java	subtract	THIS	Complex	0	RET	$.isNaN
807	546	8	Complex.java	subtract	subtrahend	double	0	RET	Double.isNaN($)
808	569	8	Complex.java	acos	THIS	Complex	0	RET	$.isNaN
809	594	8	Complex.java	asin	THIS	Complex	0	RET	$.isNaN
810	619	8	Complex.java	atan	THIS	Complex	0	RET	$.isNaN
811	660	8	Complex.java	cos	THIS	Complex	0	RET	$.isNaN
812	700	8	Complex.java	cosh	THIS	Complex	0	RET	$.isNaN
813	741	8	Complex.java	exp	THIS	Complex	0	RET	$.isNaN
814	786	8	Complex.java	log	THIS	Complex	0	RET	$.isNaN
815	864	8	Complex.java	sin	THIS	Complex	0	RET	$.isNaN
816	904	8	Complex.java	sinh	THIS	Complex	0	RET	$.isNaN
817	947	8	Complex.java	sqrt	THIS	Complex	0	RET	$.isNaN
818	951	8	Complex.java	sqrt	THIS	Complex	0	RET	$.real == 0.0
818	951	8	Complex.java	sqrt	THIS	Complex	0	RET	$.imaginary == 0.0
819	956	8	Complex.java	sqrt	THIS	Complex	1	RET	$.real >= 0.0
820	1018	8	Complex.java	tan	THIS	Complex	0	RET	Double.isInfinite($.real)
820	1018	8	Complex.java	tan	THIS	Complex	0	RET	$.isNaN
821	1021	8	Complex.java	tan	THIS	Complex	0	RET	$.imaginary > 20.0
822	1024	8	Complex.java	tan	THIS	Complex	0	RET	$.imaginary < -20.0
823	1069	8	Complex.java	tanh	THIS	Complex	0	RET	$.isNaN
823	1069	8	Complex.java	tanh	THIS	Complex	0	RET	Double.isInfinite($.imaginary)
824	1072	8	Complex.java	tanh	THIS	Complex	0	RET	$.real > 20.0
825	1075	8	Complex.java	tanh	THIS	Complex	0	RET	$.real < -20.0
826	1133	8	Complex.java	nthRoot	n	int	0	NotPositiveException	$ <= 0
827	1140	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isNaN
828	1144	8	Complex.java	nthRoot	THIS	Complex	0	RET	$.isInfinite()
22828	1156	8	Complex.java	nthRoot	k	int	0	NIL-FOR	$ < n
22828	1156	8	Complex.java	nthRoot	n	int	0	NIL-FOR	k < $
829	1190	8	Complex.java	valueOf	realPart	double	0	RET	Double.isNaN($)
829	1190	8	Complex.java	valueOf	imaginaryPart	double	0	RET	Double.isNaN($)
830	1204	8	Complex.java	valueOf	realPart	double	0	RET	Double.isNaN($)
762	115	8	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NullArgumentException	$ == null
763	118	8	ComplexFormat.java	ComplexFormat	imaginaryCharacter	String	0	NoDataException	$.length() == 0
764	121	8	ComplexFormat.java	ComplexFormat	imaginaryFormat	NumberFormat	0	NullArgumentException	$ == null
765	124	8	ComplexFormat.java	ComplexFormat	realFormat	NumberFormat	0	NullArgumentException	$ == null
766	183	8	ComplexFormat.java	format	im	double	1	DEF	$ < 0.0
767	188	15	ComplexFormat.java	format	im	double	0	DEF	$ > 0.0
767	188	15	ComplexFormat.java	format	im	double	0	DEF	Double.isNaN($)
768	211	8	ComplexFormat.java	formatImaginary	absIm	double	0	MathInternalError	$ < 0
769	219	8	ComplexFormat.java	formatImaginary	toAppendTo	StringBuffer	0	DEF	$.toString().equals("1")
770	245	8	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Complex
771	247	15	ComplexFormat.java	format	obj	Object	1	DEF	$ instanceof Number
772	323	8	ComplexFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
773	346	8	ComplexFormat.java	parse	re	Number	0	RET	$ == null
774	382	8	ComplexFormat.java	parse	im	Number	0	RET	$ == null
775	390	8	ComplexFormat.java	parse	THIS	ComplexFormat	0	RET	CompositeFormat.parseFixedstring(source, $.getImaginaryCharacter(), pos)
775	390	8	ComplexFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, getImaginaryCharacter(), pos)
775	390	8	ComplexFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, getImaginaryCharacter(), $)
754	63	8	ComplexUtils.java	polar2Complex	r	double	0	MathIllegalArgumentException	$ < 0
22826	81	8	ComplexUtils.java	convertToComplex	THIS	ComplexUtils	0	NIL-FOR	i < real.$.length
22826	81	8	ComplexUtils.java	convertToComplex	i	int	0	NIL-FOR	$ < real.length
22826	81	8	ComplexUtils.java	convertToComplex	real	double[]	0	NIL-FOR	i < $.length
473	85	9	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
473	85	9	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
22792	87	13	CompositeFormat.java	parseNextCharacter	c	char	0	NIL-DOWHILE	Character.isWhitespace($)
22792	87	13	CompositeFormat.java	parseNextCharacter	index	int	0	NIL-DOWHILE	$ < n
22792	87	13	CompositeFormat.java	parseNextCharacter	n	int	0	NIL-DOWHILE	index < $
474	92	13	CompositeFormat.java	parseNextCharacter	index	int	0	DEF	$ < n
474	92	13	CompositeFormat.java	parseNextCharacter	n	int	0	DEF	index < $
475	121	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	$ < source.length()
475	121	8	CompositeFormat.java	parseNumber	source	String	0	DEF	endIndex < $.length()
476	122	12	CompositeFormat.java	parseNumber	sb	StringBuilder	0	DEF	source.substring(startIndex, endIndex).compareTo($.toString()) == 0
476	122	12	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	source.substring($, endIndex).compareTo(sb.toString()) == 0
476	122	12	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	source.substring(startIndex, $).compareTo(sb.toString()) == 0
476	122	12	CompositeFormat.java	parseNumber	source	String	0	DEF	$.substring(startIndex, endIndex).compareTo(sb.toString()) == 0
477	148	8	CompositeFormat.java	parseNumber	startIndex	int	0	DEF	$ == endIndex
477	148	8	CompositeFormat.java	parseNumber	endIndex	int	0	DEF	startIndex == $
22793	153	12	CompositeFormat.java	parseNumber	THIS	CompositeFormat	0	NIL-FOR	i < special.$.length
22793	153	12	CompositeFormat.java	parseNumber	i	int	0	NIL-FOR	$ < special.length
22793	153	12	CompositeFormat.java	parseNumber	special	double[]	0	NIL-FOR	i < $.length
478	155	16	CompositeFormat.java	parseNumber	number	Number	0	DEF	$ != null
479	177	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	source.substring($, endIndex).compareTo(expected) != 0
479	177	8	CompositeFormat.java	parseFixedstring	startIndex	int	0	RET	$ >= source.length()
479	177	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	$ > source.length()
479	177	8	CompositeFormat.java	parseFixedstring	endIndex	int	0	RET	source.substring(startIndex, $).compareTo(expected) != 0
479	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	endIndex > $.length()
479	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	$.substring(startIndex, endIndex).compareTo(expected) != 0
479	177	8	CompositeFormat.java	parseFixedstring	source	String	0	RET	startIndex >= $.length()
479	177	8	CompositeFormat.java	parseFixedstring	expected	String	0	RET	source.substring(startIndex, endIndex).compareTo($) != 0
480	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isInfinite($)
480	211	8	CompositeFormat.java	formatDouble	value	double	1	DEF	Double.isNaN($)
1552	166	8	ConjugateGradient.java	solveInPlace	m	RealLinearOperator	1	DEF	$ == null
1553	175	8	ConjugateGradient.java	solveInPlace	rmax	double	0	RET	rnorm <= $
1553	175	8	ConjugateGradient.java	solveInPlace	rnorm	double	0	RET	$ <= rmax
1554	185	12	ConjugateGradient.java	solveInPlace	m	RealLinearOperator	0	DEF	$ != null
1555	189	12	ConjugateGradient.java	solveInPlace	THIS	ConjugateGradient	0	DEF	$.check
1555	189	12	ConjugateGradient.java	solveInPlace	rhoNext	double	0	DEF	$ <= 0.
1556	197	12	ConjugateGradient.java	solveInPlace	manager	IterationManager	1	DEF	$.getIterations() == 2
1557	204	12	ConjugateGradient.java	solveInPlace	THIS	ConjugateGradient	0	DEF	$.check
1557	204	12	ConjugateGradient.java	solveInPlace	pq	double	0	DEF	$ <= 0.
1558	220	12	ConjugateGradient.java	solveInPlace	rmax	double	0	RET	rnorm <= $
1558	220	12	ConjugateGradient.java	solveInPlace	rnorm	double	0	RET	$ <= rmax
80	128	8	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(hPrev, 0.0, $)
80	128	8	ContinuedFraction.java	evaluate	hPrev	double	0	DEF	Precision.equals($, 0.0, small)
22744	137	8	ContinuedFraction.java	evaluate	n	int	0	NIL-WHILE	$ < maxIterations
22744	137	8	ContinuedFraction.java	evaluate	maxIterations	int	0	NIL-WHILE	n < $
81	142	12	ContinuedFraction.java	evaluate	dN	double	0	DEF	Precision.equals($, 0.0, small)
81	142	12	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(dN, 0.0, $)
82	146	12	ContinuedFraction.java	evaluate	cN	double	0	DEF	Precision.equals($, 0.0, small)
82	146	12	ContinuedFraction.java	evaluate	small	double	0	DEF	Precision.equals(cN, 0.0, $)
83	154	12	ContinuedFraction.java	evaluate	hN	double	0	ConvergenceException	Double.isInfinite($)
84	158	12	ContinuedFraction.java	evaluate	hN	double	0	ConvergenceException	Double.isNaN($)
85	163	12	ContinuedFraction.java	evaluate	deltaN	double	0	DEF	FastMath.abs($ - 1.0) < epsilon
85	163	12	ContinuedFraction.java	evaluate	epsilon	double	0	DEF	FastMath.abs(deltaN - 1.0) < $
86	173	8	ContinuedFraction.java	evaluate	n	int	0	MaxCountExceededException	$ >= maxIterations
86	173	8	ContinuedFraction.java	evaluate	maxIterations	int	0	MaxCountExceededException	n >= $
2781	130	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	RET	model.$.steps.size() == 0
2781	130	4	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	RET	$.steps.size() == 0
2782	134	4	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	1	DEF	$.steps.size() == 0
2783	139	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	DimensionMismatchException	$.getInterpolatedState().length != model.getInterpolatedState().length
2783	139	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	DimensionMismatchException	getInterpolatedState().length != $.getInterpolatedState().length
2784	144	6	ContinuousOutputModel.java	append	THIS	ContinuousOutputModel	0	MathIllegalArgumentException	$.forward ^ model.$.forward
2784	144	6	ContinuousOutputModel.java	append	model	ContinuousOutputModel	0	MathIllegalArgumentException	forward ^ $.forward
2785	153	6	ContinuousOutputModel.java	append	step	double	0	MathIllegalArgumentException	FastMath.abs(gap) > 1.0e-3 * FastMath.abs($)
2785	153	6	ContinuousOutputModel.java	append	gap	double	0	MathIllegalArgumentException	FastMath.abs($) > 1.0e-3 * FastMath.abs(step)
2786	186	4	ContinuousOutputModel.java	handleStep	THIS	ContinuousOutputModel	0	DEF	$.steps.size() == 0
2787	193	4	ContinuousOutputModel.java	handleStep	isLast	boolean	0	DEF	$
2788	251	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMin) <= 0
2788	251	6	ContinuousOutputModel.java	setInterpolatedTime	sMin	StepInterpolator	0	RET	locatePoint(time, $) <= 0
2788	251	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMin) <= 0
2789	256	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	RET	$.locatePoint(time, sMax) >= 0
2789	256	6	ContinuousOutputModel.java	setInterpolatedTime	sMax	StepInterpolator	0	RET	locatePoint(time, $) >= 0
2789	256	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	RET	locatePoint($, sMax) >= 0
24385	263	6	ContinuousOutputModel.java	setInterpolatedTime	iMin	int	0	NIL-WHILE	iMax - $ > 5
24385	263	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	$ - iMin > 5
2790	268	8	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ < 0
2791	271	15	ContinuousOutputModel.java	setInterpolatedTime	location	int	1	DEF	$ > 0
2792	285	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs($ - tMin) < 1e-6
2792	285	8	ContinuousOutputModel.java	setInterpolatedTime	tMed	double	1	DEF	FastMath.abs(tMax - $) < 1e-6
2792	285	8	ContinuousOutputModel.java	setInterpolatedTime	tMin	double	1	DEF	FastMath.abs(tMed - $) < 1e-6
2792	285	8	ContinuousOutputModel.java	setInterpolatedTime	tMax	double	1	DEF	FastMath.abs($ - tMed) < 1e-6
2793	308	8	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	1	DEF	$.index < low
2793	308	8	ContinuousOutputModel.java	setInterpolatedTime	low	int	1	DEF	index < $
2794	310	15	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	DEF	$.index > high
2794	310	15	ContinuousOutputModel.java	setInterpolatedTime	high	int	0	DEF	index > $
24386	318	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.index <= iMax
24386	318	6	ContinuousOutputModel.java	setInterpolatedTime	THIS	ContinuousOutputModel	0	NIL-WHILE	$.locatePoint(time, $.steps.get($.index)) > 0
24386	318	6	ContinuousOutputModel.java	setInterpolatedTime	iMax	int	0	NIL-WHILE	index <= $
24386	318	6	ContinuousOutputModel.java	setInterpolatedTime	time	double	0	NIL-WHILE	locatePoint($, steps.get(index)) > 0
2795	342	4	ContinuousOutputModel.java	locatePoint	THIS	ContinuousOutputModel	0	RET	$.forward
2796	343	6	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getPreviousTime()
2796	343	6	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getPreviousTime()
2797	345	13	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getCurrentTime()
2797	345	13	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getCurrentTime()
2798	351	4	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ > interval.getPreviousTime()
2798	351	4	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time > $.getPreviousTime()
2799	353	11	ContinuousOutputModel.java	locatePoint	time	double	1	RET	$ < interval.getCurrentTime()
2799	353	11	ContinuousOutputModel.java	locatePoint	interval	StepInterpolator	1	RET	time < $.getCurrentTime()
2430	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	THIS	CorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != order
2430	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	DimensionMismatchException	mean.length != $
2430	91	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != order
24147	121	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	i	int	0	NIL-FOR	$ < order
24147	121	8	CorrelatedRandomVectorGenerator.java	CorrelatedRandomVectorGenerator	order	int	0	NIL-FOR	i < $
24148	168	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < $.normalized.$.length
24148	168	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < normalized.length
24149	174	8	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	i < correlated.$.length
24149	174	8	CorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < correlated.length
24149	174	8	CorrelatedRandomVectorGenerator.java	nextVector	correlated	double[]	0	NIL-FOR	i < $.length
24150	176	12	CorrelatedRandomVectorGenerator.java	nextVector	THIS	CorrelatedRandomVectorGenerator	0	NIL-FOR	j < $.root.getColumnDimension()
24150	176	12	CorrelatedRandomVectorGenerator.java	nextVector	j	int	0	NIL-FOR	$ < root.getColumnDimension()
24060	163	8	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	$ < dimension
24060	163	8	Covariance.java	computeCovarianceMatrix	dimension	int	0	NIL-FOR	i < $
24061	164	12	Covariance.java	computeCovarianceMatrix	j	int	0	NIL-FOR	$ < i
24061	164	12	Covariance.java	computeCovarianceMatrix	i	int	0	NIL-FOR	j < $
2245	224	8	Covariance.java	covariance	THIS	Covariance	1	MathIllegalArgumentException	length != yArray.$.length
2245	224	8	Covariance.java	covariance	length	int	1	MathIllegalArgumentException	$ != yArray.length
2245	224	8	Covariance.java	covariance	yArray	double[]	1	MathIllegalArgumentException	length != $.length
2246	227	15	Covariance.java	covariance	length	int	1	MathIllegalArgumentException	$ < 2
24062	233	12	Covariance.java	covariance	i	int	0	NIL-FOR	$ < length
24062	233	12	Covariance.java	covariance	length	int	0	NIL-FOR	i < $
2247	267	8	Covariance.java	checkSufficientData	nRows	int	0	MathIllegalArgumentException	$ < 2
2247	267	8	Covariance.java	checkSufficientData	nCols	int	0	MathIllegalArgumentException	$ < 2
519	246	8	Decimal64.java	equals	obj	Object	0	RET	$ instanceof Decimal64
1572	114	8	DefaultIterativeLinearSolverEvent.java	getResidual	THIS	DefaultIterativeLinearSolverEvent	0	RET	$.r != null
493	50	8	DefaultTransformer.java	transform	o	Object	0	NullArgumentException	$ == null
494	54	8	DefaultTransformer.java	transform	o	Object	0	RET	$ instanceof Number
495	69	8	DefaultTransformer.java	equals	THIS	DefaultTransformer	0	RET	$ == other
495	69	8	DefaultTransformer.java	equals	other	Object	0	RET	this == $
2093	138	8	DescriptiveStatistics.java	DescriptiveStatistics	initialDoubleArray	double[]	0	DEF	$ != null
2094	162	8	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.windowSize != INFINITE_WINDOW
2095	163	12	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	1	DEF	$.getN() == $.windowSize
2096	165	19	DescriptiveStatistics.java	addValue	THIS	DescriptiveStatistics	0	DEF	$.getN() < $.windowSize
2097	242	8	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	0	DEF	$.getN() > 0
2098	243	12	DescriptiveStatistics.java	getStandardDeviation	THIS	DescriptiveStatistics	1	DEF	$.getN() > 1
2099	341	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	MathIllegalArgumentException	$ < 1
2100	342	12	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	MathIllegalArgumentException	$ != INFINITE_WINDOW
2101	353	8	DescriptiveStatistics.java	setWindowSize	THIS	DescriptiveStatistics	0	DEF	windowSize < $.eDA.getNumElements()
2101	353	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ < eDA.getNumElements()
2101	353	8	DescriptiveStatistics.java	setWindowSize	windowSize	int	0	DEF	$ != INFINITE_WINDOW
2102	413	8	DescriptiveStatistics.java	getPercentile	THIS	DescriptiveStatistics	1	DEF	$.percentileImpl instanceof Percentile
2829	217	8	Dfp.java	Dfp	x	long	0	DEF	$ == Long.MIN_VALUE
2830	225	8	Dfp.java	Dfp	x	long	1	DEF	$ < 0
24392	233	8	Dfp.java	Dfp	x	long	0	NIL-WHILE	$ != 0
2831	240	8	Dfp.java	Dfp	isLongMin	boolean	0	DEF	$
24393	243	12	Dfp.java	Dfp	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
24393	243	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < mant.length - 1
2832	244	16	Dfp.java	Dfp	THIS	Dfp	0	DEF	$.mant[i] != 0
2832	244	16	Dfp.java	Dfp	i	int	0	DEF	mant[$] != 0
2833	269	8	Dfp.java	Dfp	exponent	int	0	RET	$ == -1023
2834	271	12	Dfp.java	Dfp	x	double	0	RET	$ == 0
2835	273	16	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
24394	282	12	Dfp.java	Dfp	mantissa	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
2836	289	8	Dfp.java	Dfp	exponent	int	0	RET	$ == 1024
2837	291	12	Dfp.java	Dfp	x	double	1	DEF	$ != $
2838	294	19	Dfp.java	Dfp	x	double	1	DEF	$ < 0
2839	308	8	Dfp.java	Dfp	bits	long	0	DEF	($ & 0x8000000000000000L) != 0
2840	349	8	Dfp.java	Dfp	s	String	0	RET	$.equals(POS_INFINITY_STRING)
2841	355	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NEG_INFINITY_STRING)
2842	361	8	Dfp.java	Dfp	s	String	0	RET	$.equals(NAN_STRING)
2843	369	8	Dfp.java	Dfp	p	int	0	DEF	$ == -1
2844	375	8	Dfp.java	Dfp	p	int	1	DEF	$ != -1
24395	381	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$<fpexp.length()
24395	381	12	Dfp.java	Dfp	fpexp	String	0	NIL-FOR	i<$.length()
2845	383	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) == '-'
2845	383	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) == '-'
2846	388	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) >= '0'
2846	388	16	Dfp.java	Dfp	i	int	0	DEF	fpexp.charAt($) <= '9'
2846	388	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) >= '0'
2846	388	16	Dfp.java	Dfp	fpexp	String	0	DEF	$.charAt(i) <= '9'
2847	393	12	Dfp.java	Dfp	negative	boolean	0	DEF	$
2848	402	8	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.indexOf("-") != -1
2849	412	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) <= '9'
2849	412	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) >= '1'
2849	412	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) <= '9'
2849	412	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) >= '1'
2850	416	12	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
2850	416	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '0'
2850	416	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '0'
2851	420	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
2851	420	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
2852	426	12	Dfp.java	Dfp	p	int	0	DEF	$ == fpdecimal.length()
2852	426	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == $.length()
2853	439	12	Dfp.java	Dfp	p	int	0	DEF	$ == (fpdecimal.length())
2853	439	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	p == ($.length())
2854	444	12	Dfp.java	Dfp	THIS	Dfp	0	DEF	q == $.mant.$.length*rsize+offset+1
2854	444	12	Dfp.java	Dfp	rsize	int	0	DEF	q == mant.length*$+offset+1
2854	444	12	Dfp.java	Dfp	offset	int	0	DEF	q == mant.length*rsize+$+1
2854	444	12	Dfp.java	Dfp	q	int	0	DEF	$ == mant.length*rsize+offset+1
2855	448	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) == '.'
2855	448	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) == '.'
2856	455	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) > '9'
2856	455	12	Dfp.java	Dfp	p	int	0	DEF	fpdecimal.charAt($) < '0'
2856	455	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) > '9'
2856	455	12	Dfp.java	Dfp	fpdecimal	String	0	DEF	$.charAt(p) < '0'
2857	468	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
2857	468	8	Dfp.java	Dfp	offset	int	0	DEF	q != $
2857	468	8	Dfp.java	Dfp	q	int	0	DEF	$ != offset
2858	471	16	Dfp.java	Dfp	offset	int	0	DEF	q == $
2858	471	16	Dfp.java	Dfp	q	int	0	DEF	$ == offset
2859	474	16	Dfp.java	Dfp	striped	char[]	1	DEF	$[q] == '0'
2859	474	16	Dfp.java	Dfp	q	int	1	DEF	striped[$] == '0'
2860	483	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
2860	483	8	Dfp.java	Dfp	significantDigits	int	0	DEF	$ == 0
2861	488	8	Dfp.java	Dfp	decimalFound	boolean	0	DEF	$
24396	496	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	$ > q
24396	496	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	p > $
2862	497	12	Dfp.java	Dfp	striped	char[]	0	DEF	$[p] != '0'
2862	497	12	Dfp.java	Dfp	p	int	0	DEF	striped[$] != '0'
24397	509	8	Dfp.java	Dfp	THIS	Dfp	0	NIL-WHILE	(p - q) < ($.mant.$.length * rsize)
24397	509	8	Dfp.java	Dfp	rsize	int	0	NIL-WHILE	(p - q) < (mant.length * $)
24397	509	8	Dfp.java	Dfp	p	int	0	NIL-WHILE	($ - q) < (mant.length * rsize)
24397	509	8	Dfp.java	Dfp	q	int	0	NIL-WHILE	(p - $) < (mant.length * rsize)
24398	510	12	Dfp.java	Dfp	rsize	int	0	NIL-FOR	i < $
24398	510	12	Dfp.java	Dfp	i	int	0	NIL-FOR	$ < rsize
24399	517	8	Dfp.java	Dfp	i	int	0	NIL-FOR	$ >= 0
2863	528	8	Dfp.java	Dfp	THIS	Dfp	0	DEF	q < striped.$.length
2863	528	8	Dfp.java	Dfp	striped	char[]	0	DEF	q < $.length
2863	528	8	Dfp.java	Dfp	q	int	0	DEF	$ < striped.length
2864	597	8	Dfp.java	newInstance	THIS	Dfp	0	RET	$.field.getRadixDigits() != d.$.field.getRadixDigits()
2864	597	8	Dfp.java	newInstance	d	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
24400	669	8	Dfp.java	shiftLeft	i	int	0	NIL-FOR	$ > 0
24401	681	8	Dfp.java	shiftRight	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length - 1
24401	681	8	Dfp.java	shiftRight	i	int	0	NIL-FOR	$ < mant.length - 1
2865	703	8	Dfp.java	align	adiff	int	0	DEF	$ < 0
2866	707	8	Dfp.java	align	diff	int	0	RET	$ == 0
2867	711	8	Dfp.java	align	THIS	Dfp	0	RET	adiff > ($.mant.$.length + 1)
2867	711	8	Dfp.java	align	adiff	int	0	RET	$ > (mant.length + 1)
24402	722	8	Dfp.java	align	i	int	0	NIL-FOR	$ < adiff
24402	722	8	Dfp.java	align	adiff	int	0	NIL-FOR	i < $
2868	723	12	Dfp.java	align	diff	int	1	DEF	$ < 0
2869	728	16	Dfp.java	align	lostdigit	int	0	DEF	$ != 0
2870	740	8	Dfp.java	align	inexact	boolean	0	DEF	$
2871	756	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2871	756	8	Dfp.java	lessThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2872	765	8	Dfp.java	lessThan	THIS	Dfp	0	RET	$.isNaN()
2872	765	8	Dfp.java	lessThan	x	Dfp	0	RET	$.isNaN()
2873	781	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2873	781	8	Dfp.java	greaterThan	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2874	790	8	Dfp.java	greaterThan	THIS	Dfp	0	RET	$.isNaN()
2874	790	8	Dfp.java	greaterThan	x	Dfp	0	RET	$.isNaN()
2875	804	8	Dfp.java	negativeOrNull	THIS	Dfp	0	RET	$.isNaN()
2876	819	8	Dfp.java	strictlyNegative	THIS	Dfp	0	RET	$.isNaN()
2877	834	8	Dfp.java	positiveOrNull	THIS	Dfp	0	RET	$.isNaN()
2878	849	8	Dfp.java	strictlyPositive	THIS	Dfp	0	RET	$.isNaN()
2879	887	8	Dfp.java	isZero	THIS	Dfp	0	RET	$.isNaN()
2880	904	8	Dfp.java	equals	other	Object	0	RET	$ instanceof Dfp
2881	906	12	Dfp.java	equals	THIS	Dfp	0	RET	$.isNaN()
2881	906	12	Dfp.java	equals	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2881	906	12	Dfp.java	equals	x	Dfp	0	RET	$.isNaN()
2881	906	12	Dfp.java	equals	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2882	931	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2882	931	8	Dfp.java	unequal	THIS	Dfp	0	RET	$.isNaN()
2882	931	8	Dfp.java	unequal	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2882	931	8	Dfp.java	unequal	x	Dfp	0	RET	$.isNaN()
2883	946	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
2883	946	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length - 1] == 0
2883	946	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[a.$.mant.$.length - 1] == 0
2883	946	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
2883	946	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
2883	946	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
2883	946	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length - 1] == 0
2883	946	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
2884	951	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.sign != b.$.sign
2884	951	8	Dfp.java	compare	a	Dfp	0	RET	$.sign != b.sign
2884	951	8	Dfp.java	compare	b	Dfp	0	RET	a.sign != $.sign
2885	952	12	Dfp.java	compare	THIS	Dfp	1	RET	a.$.sign == -1
2885	952	12	Dfp.java	compare	a	Dfp	1	RET	$.sign == -1
2886	960	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
2886	960	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == FINITE
2886	960	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
2886	960	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == FINITE
2887	964	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
2887	964	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == FINITE
2887	964	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == FINITE
2887	964	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
2888	968	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.nans == INFINITE
2888	968	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.nans == INFINITE
2888	968	8	Dfp.java	compare	a	Dfp	0	RET	$.nans == INFINITE
2888	968	8	Dfp.java	compare	b	Dfp	0	RET	$.nans == INFINITE
2889	973	8	Dfp.java	compare	THIS	Dfp	0	RET	b.$.mant[b.$.mant.$.length-1] != 0
2889	973	8	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[b.$.mant.$.length-1] != 0
2889	973	8	Dfp.java	compare	a	Dfp	0	RET	$.mant[b.mant.length-1] != 0
2889	973	8	Dfp.java	compare	b	Dfp	0	RET	$.mant[$.mant.length-1] != 0
2889	973	8	Dfp.java	compare	b	Dfp	0	RET	a.mant[$.mant.length-1] != 0
2890	974	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp < b.$.exp
2890	974	12	Dfp.java	compare	a	Dfp	0	RET	$.exp < b.exp
2890	974	12	Dfp.java	compare	b	Dfp	0	RET	a.exp < $.exp
2891	978	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.exp > b.$.exp
2891	978	12	Dfp.java	compare	a	Dfp	0	RET	$.exp > b.exp
2891	978	12	Dfp.java	compare	b	Dfp	0	RET	a.exp > $.exp
24403	984	8	Dfp.java	compare	i	int	0	NIL-FOR	$ >= 0
2892	985	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] > b.$.mant[i]
2892	985	12	Dfp.java	compare	i	int	0	RET	a.mant[$] > b.mant[$]
2892	985	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] > b.mant[i]
2892	985	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] > $.mant[i]
2893	989	12	Dfp.java	compare	THIS	Dfp	0	RET	a.$.mant[i] < b.$.mant[i]
2893	989	12	Dfp.java	compare	i	int	0	RET	a.mant[$] < b.mant[$]
2893	989	12	Dfp.java	compare	a	Dfp	0	RET	$.mant[i] < b.mant[i]
2893	989	12	Dfp.java	compare	b	Dfp	0	RET	a.mant[i] < $.mant[i]
2894	1032	8	Dfp.java	remainder	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2894	1032	8	Dfp.java	remainder	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2895	1047	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.isNaN()
2896	1051	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.nans == INFINITE
2897	1055	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
2898	1062	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp < 0
2899	1073	8	Dfp.java	trunc	THIS	Dfp	0	RET	$.exp >= $.mant.$.length
24404	1081	8	Dfp.java	trunc	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length-result.$.exp
24404	1081	8	Dfp.java	trunc	i	int	0	NIL-FOR	$ < mant.length-result.exp
24404	1081	8	Dfp.java	trunc	result	Dfp	0	NIL-FOR	i < mant.length-$.exp
2900	1086	8	Dfp.java	trunc	changed	boolean	0	RET	$
2901	1089	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == -1
2901	1089	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == -1
2902	1096	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.sign == 1
2902	1096	20	Dfp.java	trunc	result	Dfp	0	DEF	$.sign == 1
2903	1107	20	Dfp.java	trunc	half	Dfp	0	DEF	a.greaterThan($)
2903	1107	20	Dfp.java	trunc	a	Dfp	0	DEF	$.greaterThan(half)
2904	1114	20	Dfp.java	trunc	THIS	Dfp	0	DEF	(result.$.mant[$.mant.$.length-result.$.exp]&1) != 0
2904	1114	20	Dfp.java	trunc	THIS	Dfp	0	DEF	result.$.exp > 0
2904	1114	20	Dfp.java	trunc	half	Dfp	0	DEF	a.equals($)
2904	1114	20	Dfp.java	trunc	a	Dfp	0	DEF	$.equals(half)
2904	1114	20	Dfp.java	trunc	result	Dfp	0	DEF	($.mant[mant.length-$.exp]&1) != 0
2904	1114	20	Dfp.java	trunc	result	Dfp	0	DEF	$.exp > 0
2905	1140	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.greaterThan($.newInstance(2147483647))
2905	1140	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.greaterThan(newInstance(2147483647))
2906	1144	8	Dfp.java	intValue	THIS	Dfp	0	RET	rounded.lessThan($.newInstance(-2147483648))
2906	1144	8	Dfp.java	intValue	rounded	Dfp	0	RET	$.lessThan(newInstance(-2147483648))
24405	1148	8	Dfp.java	intValue	THIS	Dfp	0	NIL-FOR	i >= $.mant.$.length - rounded.$.exp
24405	1148	8	Dfp.java	intValue	i	int	0	NIL-FOR	$ >= mant.length - rounded.exp
24405	1148	8	Dfp.java	intValue	rounded	Dfp	0	NIL-FOR	i >= mant.length - $.exp
2907	1152	8	Dfp.java	intValue	THIS	Dfp	0	DEF	rounded.$.sign == -1
2907	1152	8	Dfp.java	intValue	rounded	Dfp	0	DEF	$.sign == -1
2908	1182	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 1000
2909	1185	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 100
2910	1188	8	Dfp.java	log10	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] > 10
2911	1201	8	Dfp.java	power10	e	int	1	DEF	$ >= 0
24406	1232	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
24406	1232	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
24407	1238	8	Dfp.java	complement	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
24407	1238	8	Dfp.java	complement	i	int	0	NIL-FOR	$ < mant.length
2912	1254	8	Dfp.java	add	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2912	1254	8	Dfp.java	add	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2913	1262	8	Dfp.java	add	THIS	Dfp	0	RET	$.nans != FINITE
2913	1262	8	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans != FINITE
2913	1262	8	Dfp.java	add	x	Dfp	0	RET	$.nans != FINITE
2914	1263	12	Dfp.java	add	THIS	Dfp	0	RET	$.isNaN()
2915	1267	12	Dfp.java	add	x	Dfp	0	RET	$.isNaN()
2916	1271	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
2916	1271	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == FINITE
2916	1271	12	Dfp.java	add	x	Dfp	0	RET	$.nans == FINITE
2917	1275	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == FINITE
2917	1275	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
2917	1275	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
2918	1279	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
2918	1279	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
2918	1279	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign == x.$.sign
2918	1279	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
2918	1279	12	Dfp.java	add	x	Dfp	0	RET	sign == $.sign
2919	1283	12	Dfp.java	add	THIS	Dfp	0	RET	$.sign != x.$.sign
2919	1283	12	Dfp.java	add	THIS	Dfp	0	RET	x.$.nans == INFINITE
2919	1283	12	Dfp.java	add	THIS	Dfp	0	RET	$.nans == INFINITE
2919	1283	12	Dfp.java	add	x	Dfp	0	RET	sign != $.sign
2919	1283	12	Dfp.java	add	x	Dfp	0	RET	$.nans == INFINITE
2920	1308	8	Dfp.java	add	THIS	Dfp	0	DEF	$.compare(a, b) > 0
2920	1308	8	Dfp.java	add	a	Dfp	0	DEF	compare($, b) > 0
2920	1308	8	Dfp.java	add	b	Dfp	0	DEF	compare(a, $) > 0
2921	1315	8	Dfp.java	add	THIS	Dfp	0	DEF	b.$.mant[$.mant.$.length-1] == 0
2921	1315	8	Dfp.java	add	b	Dfp	0	DEF	$.mant[mant.length-1] == 0
2922	1319	8	Dfp.java	add	THIS	Dfp	0	DEF	a.$.mant[$.mant.$.length-1] == 0
2922	1319	8	Dfp.java	add	a	Dfp	0	DEF	$.mant[mant.length-1] == 0
2923	1326	8	Dfp.java	add	THIS	Dfp	1	DEF	a.$.exp < b.$.exp
2923	1326	8	Dfp.java	add	a	Dfp	1	DEF	$.exp < b.exp
2923	1326	8	Dfp.java	add	b	Dfp	1	DEF	a.exp < $.exp
2924	1333	8	Dfp.java	add	asign	byte	0	DEF	$ != bsign
2924	1333	8	Dfp.java	add	bsign	byte	0	DEF	asign != $
2925	1334	12	Dfp.java	add	asign	byte	1	DEF	$ == rsign
2925	1334	12	Dfp.java	add	rsign	byte	1	DEF	asign == $
24408	1343	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
24408	1343	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
2926	1354	8	Dfp.java	add	asign	byte	0	DEF	$ == bsign
2926	1354	8	Dfp.java	add	bsign	byte	0	DEF	asign == $
2926	1354	8	Dfp.java	add	rh	int	0	DEF	$ != 0
2927	1359	12	Dfp.java	add	excp	int	0	DEF	$ != 0
24409	1365	8	Dfp.java	add	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
24409	1365	8	Dfp.java	add	i	int	0	NIL-FOR	$ < mant.length
2928	1366	12	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] != 0
2928	1366	12	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] != 0
2929	1370	12	Dfp.java	add	i	int	0	DEF	$ == 0
2930	1378	8	Dfp.java	add	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2930	1378	8	Dfp.java	add	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2931	1381	12	Dfp.java	add	asign	byte	0	DEF	$ != bsign
2931	1381	12	Dfp.java	add	bsign	byte	0	DEF	asign != $
2932	1389	8	Dfp.java	add	excp	int	0	DEF	$ != 0
2933	1454	8	Dfp.java	round	inc	boolean	0	DEF	$
24410	1457	12	Dfp.java	round	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
24410	1457	12	Dfp.java	round	i	int	0	NIL-FOR	$ < mant.length
2934	1463	12	Dfp.java	round	rh	int	0	DEF	$ != 0
2935	1470	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp < MIN_EXP
2936	1476	8	Dfp.java	round	THIS	Dfp	0	RET	$.exp > MAX_EXP
2937	1482	8	Dfp.java	round	n	int	0	RET	$ != 0
2938	1499	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
2938	1499	8	Dfp.java	multiply	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2939	1509	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans != FINITE
2939	1509	8	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans != FINITE
2939	1509	8	Dfp.java	multiply	x	Dfp	0	RET	$.nans != FINITE
2940	1510	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.isNaN()
2941	1514	12	Dfp.java	multiply	x	Dfp	0	RET	$.isNaN()
2942	1518	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
2942	1518	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2942	1518	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] != 0
2942	1518	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
2942	1518	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] != 0
2943	1524	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] != 0
2943	1524	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
2943	1524	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2943	1524	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
2944	1530	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2944	1530	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2944	1530	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
2945	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == FINITE
2945	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == FINITE
2945	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.mant[$.mant.$.length-1] == 0
2945	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2945	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	x.$.nans == INFINITE
2945	1536	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
2945	1536	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == FINITE
2945	1536	12	Dfp.java	multiply	x	Dfp	0	RET	$.mant[mant.length-1] == 0
2945	1536	12	Dfp.java	multiply	x	Dfp	0	RET	$.nans == INFINITE
24411	1548	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
24411	1548	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
24412	1550	12	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	j<$.mant.$.length
24412	1550	12	Dfp.java	multiply	j	int	0	NIL-FOR	$<mant.length
24413	1562	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ >= 0
2946	1563	12	Dfp.java	multiply	i	int	0	DEF	product[$] != 0
2946	1563	12	Dfp.java	multiply	product	int[]	0	DEF	$[i] != 0
24414	1570	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
24414	1570	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
2947	1578	8	Dfp.java	multiply	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2947	1578	8	Dfp.java	multiply	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2948	1584	8	Dfp.java	multiply	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
2948	1584	8	Dfp.java	multiply	md	int	1	DEF	$ > (mant.length-1)
2949	1590	8	Dfp.java	multiply	excp	int	0	DEF	$ != 0
2950	1607	8	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans != FINITE
2951	1608	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.isNaN()
2952	1612	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2952	1612	12	Dfp.java	multiply	x	int	0	RET	$ != 0
2953	1617	12	Dfp.java	multiply	THIS	Dfp	0	RET	$.nans == INFINITE
2953	1617	12	Dfp.java	multiply	x	int	0	RET	$ == 0
2954	1627	8	Dfp.java	multiply	x	int	0	RET	$ < 0
2954	1627	8	Dfp.java	multiply	x	int	0	RET	$ >= RADIX
24415	1636	8	Dfp.java	multiply	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
24415	1636	8	Dfp.java	multiply	i	int	0	NIL-FOR	$ < mant.length
2955	1643	8	Dfp.java	multiply	rh	int	0	DEF	$ != 0
2956	1649	8	Dfp.java	multiply	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2956	1649	8	Dfp.java	multiply	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2957	1654	8	Dfp.java	multiply	excp	int	0	DEF	$ != 0
2958	1678	8	Dfp.java	divide	THIS	Dfp	0	RET	$.field.getRadixDigits() != divisor.$.field.getRadixDigits()
2958	1678	8	Dfp.java	divide	divisor	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
2959	1688	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans != FINITE
2959	1688	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
2959	1688	8	Dfp.java	divide	divisor	Dfp	0	RET	$.nans != FINITE
2960	1689	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
2961	1693	12	Dfp.java	divide	divisor	Dfp	0	RET	$.isNaN()
2962	1697	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
2962	1697	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == FINITE
2962	1697	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == FINITE
2963	1703	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
2963	1703	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == FINITE
2963	1703	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
2964	1709	12	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.nans == INFINITE
2964	1709	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
2964	1709	12	Dfp.java	divide	divisor	Dfp	0	RET	$.nans == INFINITE
2965	1719	8	Dfp.java	divide	THIS	Dfp	0	RET	divisor.$.mant[$.mant.$.length-1] == 0
2965	1719	8	Dfp.java	divide	divisor	Dfp	0	RET	$.mant[mant.length-1] == 0
24416	1742	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
24416	1742	8	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
24417	1750	8	Dfp.java	divide	qd	int	0	NIL-FOR	$ >= 0
24418	1759	12	Dfp.java	divide	trialgood	boolean	0	NIL-WHILE	$
24419	1765	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
24419	1765	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
24420	1774	16	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length + 1
24420	1774	16	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length + 1
2966	1781	16	Dfp.java	divide	rh	int	0	DEF	$ == 0
2967	1791	16	Dfp.java	divide	minadj	int	0	DEF	$ >= 2
24421	1799	16	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
2968	1800	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] > remainder[i]
2968	1800	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] > remainder[$]
2968	1800	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] > $[i]
2968	1800	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] > remainder[i]
2969	1803	20	Dfp.java	divide	THIS	Dfp	0	DEF	divisor.$.mant[i] < remainder[i]
2969	1803	20	Dfp.java	divide	i	int	0	DEF	divisor.mant[$] < remainder[$]
2969	1803	20	Dfp.java	divide	remainder	int[]	0	DEF	divisor.mant[i] < $[i]
2969	1803	20	Dfp.java	divide	divisor	Dfp	0	DEF	$.mant[i] < remainder[i]
2970	1808	16	Dfp.java	divide	THIS	Dfp	0	DEF	remainder[$.mant.$.length] != 0
2970	1808	16	Dfp.java	divide	remainder	int[]	0	DEF	$[mant.length] != 0
2971	1812	16	Dfp.java	divide	trialgood	boolean	0	DEF	$ == false
2972	1819	12	Dfp.java	divide	nsqd	int	0	DEF	$ != 0
2972	1819	12	Dfp.java	divide	trial	int	0	DEF	$ != 0
2973	1823	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd == $.mant.$.length
2973	1823	12	Dfp.java	divide	THIS	Dfp	0	DEF	$.field.getRoundingMode() == DfpField.$.RoundingMode.ROUND_DOWN
2973	1823	12	Dfp.java	divide	nsqd	int	0	DEF	$ == mant.length
2974	1828	12	Dfp.java	divide	THIS	Dfp	0	DEF	nsqd > $.mant.$.length
2974	1828	12	Dfp.java	divide	nsqd	int	0	DEF	$ > mant.length
24422	1835	12	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i < $.mant.$.length
24422	1835	12	Dfp.java	divide	i	int	0	NIL-FOR	$ < mant.length
24423	1842	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
2975	1843	12	Dfp.java	divide	i	int	0	DEF	quotient[$] != 0
2975	1843	12	Dfp.java	divide	quotient	int[]	0	DEF	$[i] != 0
24424	1850	8	Dfp.java	divide	THIS	Dfp	0	NIL-FOR	i<$.mant.$.length
24424	1850	8	Dfp.java	divide	i	int	0	NIL-FOR	$<mant.length
2976	1858	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2976	1858	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2977	1862	8	Dfp.java	divide	THIS	Dfp	1	DEF	md > ($.mant.$.length-1)
2977	1862	8	Dfp.java	divide	md	int	1	DEF	$ > (mant.length-1)
2978	1868	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
2979	1883	8	Dfp.java	divide	THIS	Dfp	0	RET	$.nans != FINITE
2980	1884	12	Dfp.java	divide	THIS	Dfp	0	RET	$.isNaN()
2981	1888	12	Dfp.java	divide	THIS	Dfp	0	RET	$.nans == INFINITE
2982	1894	8	Dfp.java	divide	divisor	int	0	RET	$ == 0
2983	1904	8	Dfp.java	divide	divisor	int	0	RET	$ < 0
2983	1904	8	Dfp.java	divide	divisor	int	0	RET	$ >= RADIX
24425	1915	8	Dfp.java	divide	i	int	0	NIL-FOR	$ >= 0
2984	1922	8	Dfp.java	divide	THIS	Dfp	0	DEF	result.$.mant[$.mant.$.length-1] == 0
2984	1922	8	Dfp.java	divide	result	Dfp	0	DEF	$.mant[mant.length-1] == 0
2985	1932	8	Dfp.java	divide	excp	int	0	DEF	$ != 0
2986	1951	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.mant[$.mant.$.length-1] == 0
2986	1951	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == FINITE
2987	1956	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans != FINITE
2988	1957	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == 1
2988	1957	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == INFINITE
2989	1962	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == QNAN
2990	1966	12	Dfp.java	sqrt	THIS	Dfp	0	RET	$.nans == SNAN
2991	1976	8	Dfp.java	sqrt	THIS	Dfp	0	RET	$.sign == -1
2992	1990	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp < -1
2992	1990	8	Dfp.java	sqrt	THIS	Dfp	0	DEF	x.$.exp > 1
2992	1990	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp < -1
2992	1990	8	Dfp.java	sqrt	x	Dfp	0	DEF	$.exp > 1
24426	2016	8	Dfp.java	sqrt	x	Dfp	0	NIL-WHILE	$.unequal(px)
24426	2016	8	Dfp.java	sqrt	px	Dfp	0	NIL-WHILE	x.unequal($)
2993	2025	12	Dfp.java	sqrt	x	Dfp	0	DEF	$.equals(ppx)
2993	2025	12	Dfp.java	sqrt	ppx	Dfp	0	DEF	x.equals($)
2994	2032	12	Dfp.java	sqrt	THIS	Dfp	0	DEF	dx.$.mant[$.mant.$.length-1] == 0
2994	2032	12	Dfp.java	sqrt	dx	Dfp	0	DEF	$.mant[mant.length-1] == 0
2995	2046	8	Dfp.java	toString	THIS	Dfp	0	RET	$.nans != FINITE
2996	2048	12	Dfp.java	toString	THIS	Dfp	1	RET	$.nans == INFINITE
2997	2055	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp > $.mant.$.length
2997	2055	8	Dfp.java	toString	THIS	Dfp	0	RET	$.exp < -1
24427	2077	8	Dfp.java	dfp2sci	i	int	0	NIL-FOR	$ >= 0
24428	2085	8	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-FOR	p < rawdigits.$.length
24428	2085	8	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-FOR	p < $.length
24428	2085	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ < rawdigits.length
2998	2086	12	Dfp.java	dfp2sci	rawdigits	char[]	0	DEF	$[p] != '0'
2998	2086	12	Dfp.java	dfp2sci	p	int	0	DEF	rawdigits[$] != '0'
2999	2094	8	Dfp.java	dfp2sci	THIS	Dfp	0	DEF	$.sign == -1
3000	2098	8	Dfp.java	dfp2sci	THIS	Dfp	1	DEF	p != rawdigits.$.length
3000	2098	8	Dfp.java	dfp2sci	rawdigits	char[]	1	DEF	p != $.length
3000	2098	8	Dfp.java	dfp2sci	p	int	1	DEF	$ != rawdigits.length
24429	2103	12	Dfp.java	dfp2sci	THIS	Dfp	0	NIL-WHILE	p<rawdigits.$.length
24429	2103	12	Dfp.java	dfp2sci	rawdigits	char[]	0	NIL-WHILE	p<$.length
24429	2103	12	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$<rawdigits.length
3001	2121	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
24430	2126	8	Dfp.java	dfp2sci	p	int	0	NIL-FOR	$ > ae
24430	2126	8	Dfp.java	dfp2sci	ae	int	0	NIL-FOR	p > $
3002	2130	8	Dfp.java	dfp2sci	e	int	0	DEF	$ < 0
24431	2134	8	Dfp.java	dfp2sci	p	int	0	NIL-WHILE	$ > 0
3003	2156	8	Dfp.java	dfp2string	e	int	0	DEF	$ <= 0
24432	2162	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ < 0
24433	2170	8	Dfp.java	dfp2string	i	int	0	NIL-FOR	$ >= 0
3004	2175	12	Dfp.java	dfp2string	e	int	0	DEF	--$ == 0
24434	2181	8	Dfp.java	dfp2string	e	int	0	NIL-WHILE	$ > 0
3005	2189	8	Dfp.java	dfp2string	pointInserted	boolean	0	DEF	$
24435	2196	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[q] == '0'
24435	2196	8	Dfp.java	dfp2string	q	int	0	NIL-WHILE	buffer[$] == '0'
3006	2199	8	Dfp.java	dfp2string	buffer	char[]	0	DEF	$[q] == '.'
3006	2199	8	Dfp.java	dfp2string	q	int	0	DEF	buffer[$] == '.'
24436	2204	8	Dfp.java	dfp2string	buffer	char[]	0	NIL-WHILE	$[p-1] == '0'
24436	2204	8	Dfp.java	dfp2string	p	int	0	NIL-WHILE	buffer[$-1] == '0'
3007	2209	8	Dfp.java	dfp2string	THIS	Dfp	0	DEF	$.sign < 0
3008	2235	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
3008	2235	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] != 0
3009	2242	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == FINITE
3009	2242	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.mant[$.mant.$.length-1] == 0
3010	2248	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == QNAN
3010	2248	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
3011	2253	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == INFINITE
3011	2253	16	Dfp.java	dotrap	THIS	Dfp	0	DEF	$.nans == SNAN
3012	2260	16	Dfp.java	dotrap	THIS	Dfp	1	DEF	(result.$.exp+$.mant.$.length) < MIN_EXP
3012	2260	16	Dfp.java	dotrap	result	Dfp	1	DEF	($.exp+mant.length) < MIN_EXP
3013	2325	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.field.getRadixDigits() != x.$.field.getRadixDigits()
3013	2325	8	Dfp.java	nextAfter	x	Dfp	0	RET	field.getRadixDigits() != $.field.getRadixDigits()
3014	2334	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan(x)
3014	2334	8	Dfp.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
3015	2338	8	Dfp.java	nextAfter	THIS	Dfp	0	RET	$.compare(this, x) == 0
3015	2338	8	Dfp.java	nextAfter	x	Dfp	0	RET	compare(this, $) == 0
3016	2342	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.lessThan($.getZero())
3017	2348	8	Dfp.java	nextAfter	up	boolean	1	DEF	$
3018	2353	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
3019	2363	12	Dfp.java	nextAfter	THIS	Dfp	1	DEF	$.equals(inc)
3019	2363	12	Dfp.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
3020	2369	12	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero())
3021	2376	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.classify() != INFINITE
3021	2376	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
3022	2381	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	$.equals($.getZero()) == false
3022	2381	8	Dfp.java	nextAfter	THIS	Dfp	0	DEF	result.equals($.getZero())
3022	2381	8	Dfp.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
3023	2396	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isInfinite()
3024	2397	12	Dfp.java	toDouble	THIS	Dfp	1	RET	$.lessThan($.getZero())
3025	2404	8	Dfp.java	toDouble	THIS	Dfp	0	RET	$.isNaN()
3026	2411	8	Dfp.java	toDouble	cmp0	int	1	RET	$ == 0
3027	2413	15	Dfp.java	toDouble	cmp0	int	0	DEF	$ < 0
3028	2421	8	Dfp.java	toDouble	exponent	int	0	DEF	$ < 0
24437	2426	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.lessThan($)
24437	2426	8	Dfp.java	toDouble	y	Dfp	0	NIL-WHILE	tempDfp.equals($)
24437	2426	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.lessThan(y)
24437	2426	8	Dfp.java	toDouble	tempDfp	Dfp	0	NIL-WHILE	$.equals(y)
3029	2435	8	Dfp.java	toDouble	exponent	int	0	DEF	$ > -1023
3030	2439	8	Dfp.java	toDouble	exponent	int	0	RET	$ < -1074
3031	2443	8	Dfp.java	toDouble	exponent	int	0	RET	$ > 1023
3032	2453	8	Dfp.java	toDouble	mantissa	long	0	DEF	$ == 4503599627370496L
3033	2460	8	Dfp.java	toDouble	exponent	int	0	DEF	$ <= -1023
24438	2464	8	Dfp.java	toDouble	exponent	int	0	NIL-WHILE	$ < -1023
3034	2472	8	Dfp.java	toDouble	negate	boolean	0	DEF	$
2808	131	8	DfpDec.java	newInstance	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != d.getField().getRadixDigits()
2808	131	8	DfpDec.java	newInstance	d	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
2809	168	8	DfpDec.java	round	msb	int	0	RET	$ == 0
24388	175	8	DfpDec.java	round	msb	int	0	NIL-WHILE	lsbthreshold > $
24388	175	8	DfpDec.java	round	lsbthreshold	int	0	NIL-WHILE	$ > msb
24389	186	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsbshift % 4
24389	186	8	DfpDec.java	round	lsbshift	int	0	NIL-FOR	i < $ % 4
2810	192	8	DfpDec.java	round	THIS	DfpDec	0	RET	digits == 4 * $.mant.$.length - 3
2810	192	8	DfpDec.java	round	lsbthreshold	int	0	RET	$ <= 1
2810	192	8	DfpDec.java	round	digits	int	0	RET	$ == 4 * mant.length - 3
2811	198	8	DfpDec.java	round	lsbthreshold	int	1	DEF	$ == 1
24390	208	8	DfpDec.java	round	i	int	0	NIL-FOR	$ < lsd
24390	208	8	DfpDec.java	round	lsd	int	0	NIL-FOR	i < $
2812	255	8	DfpDec.java	round	inc	boolean	0	DEF	$
24391	258	12	DfpDec.java	round	THIS	DfpDec	0	NIL-FOR	i < $.mant.$.length
24391	258	12	DfpDec.java	round	i	int	0	NIL-FOR	$ < mant.length
2813	264	12	DfpDec.java	round	rh	int	0	DEF	$ != 0
2814	271	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp < MIN_EXP
2815	277	8	DfpDec.java	round	THIS	DfpDec	0	RET	$.exp > MAX_EXP
2816	283	8	DfpDec.java	round	discarded	int	0	RET	$ != 0
2816	283	8	DfpDec.java	round	n	int	0	RET	$ != 0
2817	298	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.getField().getRadixDigits() != x.getField().getRadixDigits()
2817	298	8	DfpDec.java	nextAfter	x	Dfp	0	RET	getField().getRadixDigits() != $.getField().getRadixDigits()
2818	310	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan(x)
2818	310	8	DfpDec.java	nextAfter	x	Dfp	0	DEF	this.lessThan($)
2819	314	8	DfpDec.java	nextAfter	THIS	DfpDec	0	RET	$.equals(x)
2819	314	8	DfpDec.java	nextAfter	x	Dfp	0	RET	equals($)
2820	318	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.lessThan($.getZero())
2821	322	8	DfpDec.java	nextAfter	up	boolean	1	DEF	$
2822	326	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
2823	330	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
2823	330	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
2824	339	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	$.equals(inc)
2824	339	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	this.equals($)
2825	345	12	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero())
2826	349	12	DfpDec.java	nextAfter	THIS	DfpDec	1	DEF	inc.equals($.getZero())
2826	349	12	DfpDec.java	nextAfter	inc	Dfp	1	DEF	$.equals(getZero())
2827	356	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.classify() != INFINITE
2827	356	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.classify() == INFINITE
2828	361	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	result.equals($.getZero())
2828	361	8	DfpDec.java	nextAfter	THIS	DfpDec	0	DEF	$.equals($.getZero()) == false
2828	361	8	DfpDec.java	nextAfter	result	Dfp	0	DEF	$.equals(getZero())
3035	200	8	DfpField.java	DfpField	computeConstants	boolean	1	DEF	$
24439	537	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
24439	537	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
24439	537	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
3036	540	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
3036	540	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '1'
3036	540	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
3036	540	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '1'
3037	544	8	DfpField.java	split	i	int	0	DEF	buf[$] == '.'
3037	544	8	DfpField.java	split	buf	char[]	0	DEF	$[i] == '.'
3038	549	8	DfpField.java	split	THIS	DfpField	0	DEF	sig == ($.radixDigits / 2) * 4
3038	549	8	DfpField.java	split	sig	int	0	DEF	$ == (radixDigits / 2) * 4
3039	554	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
3039	554	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
3039	554	8	DfpField.java	split	leading	boolean	0	DEF	$
3039	554	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
3039	554	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
24440	561	6	DfpField.java	split	THIS	DfpField	0	NIL-FOR	i < buf.$.length
24440	561	6	DfpField.java	split	i	int	0	NIL-FOR	$ < buf.length
24440	561	6	DfpField.java	split	buf	char[]	0	NIL-FOR	i < $.length
3040	563	8	DfpField.java	split	i	int	0	DEF	buf[$] >= '0'
3040	563	8	DfpField.java	split	i	int	0	DEF	buf[$] <= '9'
3040	563	8	DfpField.java	split	i	int	0	DEF	$ < sp
3040	563	8	DfpField.java	split	sp	int	0	DEF	i < $
3040	563	8	DfpField.java	split	buf	char[]	0	DEF	$[i] >= '0'
3040	563	8	DfpField.java	split	buf	char[]	0	DEF	$[i] <= '9'
3041	578	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String == null
3041	578	8	DfpField.java	computeStringConstants	THIS	DfpField	0	DEF	$.sqr2String.length() < highPrecisionDecimalDigits - 3
3041	578	8	DfpField.java	computeStringConstants	highPrecisionDecimalDigits	int	0	DEF	sqr2String.length() < $ - 3
24441	623	8	DfpField.java	computePi	i	int	0	NIL-FOR	$ < 20
3042	637	12	DfpField.java	computePi	ykM1	Dfp	0	DEF	yk.equals($)
3042	637	12	DfpField.java	computePi	yk	Dfp	0	DEF	$.equals(ykM1)
24442	659	8	DfpField.java	computeExp	i	int	0	NIL-FOR	$ < 10000
3043	664	12	DfpField.java	computeExp	y	Dfp	0	DEF	$.equals(py)
3043	664	12	DfpField.java	computeExp	py	Dfp	0	DEF	y.equals($)
24443	742	8	DfpField.java	computeLn	i	int	0	NIL-FOR	$ < 10000
3044	748	12	DfpField.java	computeLn	y	Dfp	0	DEF	$.equals(py)
3044	748	12	DfpField.java	computeLn	py	Dfp	0	DEF	y.equals($)
24448	54	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
24448	54	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
24448	54	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
3062	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
3062	57	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '1'
3062	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
3062	57	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '1'
3063	61	12	DfpMath.java	split	i	int	0	DEF	buf[$] == '.'
3063	61	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] == '.'
3064	66	12	DfpMath.java	split	sig	int	0	DEF	$ == (field.getRadixDigits() / 2) * 4
3064	66	12	DfpMath.java	split	field	DfpField	0	DEF	sig == ($.getRadixDigits() / 2) * 4
3065	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
3065	71	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
3065	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
3065	71	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
3065	71	12	DfpMath.java	split	leading	boolean	0	DEF	$
24449	78	8	DfpMath.java	split	THIS	DfpMath	0	NIL-FOR	i < buf.$.length
24449	78	8	DfpMath.java	split	i	int	0	NIL-FOR	$ < buf.length
24449	78	8	DfpMath.java	split	buf	char[]	0	NIL-FOR	i < $.length
3066	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] <= '9'
3066	80	12	DfpMath.java	split	i	int	0	DEF	buf[$] >= '0'
3066	80	12	DfpMath.java	split	i	int	0	DEF	$ < sp
3066	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] <= '9'
3066	80	12	DfpMath.java	split	buf	char[]	0	DEF	$[i] >= '0'
3066	80	12	DfpMath.java	split	sp	int	0	DEF	i < $
3067	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].equals($[1])
3067	120	8	DfpMath.java	splitMult	result	Dfp[]	0	RET	$[0].classify() == Dfp.INFINITE
3068	162	8	DfpMath.java	splitPow	a	int	0	RET	$ == 0
3069	167	8	DfpMath.java	splitPow	a	int	0	DEF	$ < 0
24450	174	8	DfpMath.java	splitPow	a	int	0	NIL-DOWHILE	$ >= 1
3070	183	16	DfpMath.java	splitPow	trial	int	0	DEF	$ > a
3070	183	16	DfpMath.java	splitPow	a	int	0	DEF	trial > $
3071	198	8	DfpMath.java	splitPow	invert	boolean	0	DEF	$
3072	217	8	DfpMath.java	pow	a	int	0	RET	$ == 0
3073	222	8	DfpMath.java	pow	a	int	0	DEF	$ < 0
24451	228	8	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$ >= 1
24452	234	12	DfpMath.java	pow	trial	int	0	NIL-DOWHILE	a>$
24452	234	12	DfpMath.java	pow	a	int	0	NIL-DOWHILE	$>trial
3074	249	8	DfpMath.java	pow	invert	boolean	0	DEF	$
3075	270	8	DfpMath.java	exp	ia	int	0	RET	$ > 2147483646
3076	275	8	DfpMath.java	exp	ia	int	0	RET	$ < -2147483646
24453	297	8	DfpMath.java	expInternal	i	int	0	NIL-FOR	$ < 90
3077	301	12	DfpMath.java	expInternal	y	Dfp	0	DEF	$.equals(py)
3077	301	12	DfpMath.java	expInternal	py	Dfp	0	DEF	y.equals($)
3078	324	8	DfpMath.java	log	a	Dfp	0	RET	$.lessThan($.getZero())
3078	324	8	DfpMath.java	log	a	Dfp	0	RET	$.equals($.getZero())
3078	324	8	DfpMath.java	log	a	Dfp	0	RET	$.isNaN()
3079	330	8	DfpMath.java	log	a	Dfp	0	RET	$.classify() == Dfp.INFINITE
24454	340	8	DfpMath.java	log	ix	int	0	NIL-WHILE	$ > 2
24455	353	8	DfpMath.java	log	spx	Dfp[]	0	NIL-WHILE	$[0].add($[1]).greaterThan(spy[0])
24455	353	8	DfpMath.java	log	spy	Dfp[]	0	NIL-WHILE	spx[0].add(spx[1]).greaterThan($[0])
24456	447	8	DfpMath.java	logInternal	i	int	0	NIL-FOR	$ < 10000
3080	453	12	DfpMath.java	logInternal	y	Dfp	0	DEF	$.equals(py)
3080	453	12	DfpMath.java	logInternal	py	Dfp	0	DEF	y.equals($)
3081	508	8	DfpMath.java	pow	x	Dfp	0	RET	$.getField().getRadixDigits() != y.getField().getRadixDigits()
3081	508	8	DfpMath.java	pow	y	Dfp	0	RET	x.getField().getRadixDigits() != $.getField().getRadixDigits()
3082	522	8	DfpMath.java	pow	zero	Dfp	0	RET	y.equals($)
3082	522	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(zero)
3083	526	8	DfpMath.java	pow	one	Dfp	0	RET	y.equals($)
3083	526	8	DfpMath.java	pow	y	Dfp	0	RET	$.equals(one)
3084	527	12	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
3085	535	8	DfpMath.java	pow	x	Dfp	0	RET	$.isNaN()
3085	535	8	DfpMath.java	pow	y	Dfp	0	RET	$.isNaN()
3086	542	8	DfpMath.java	pow	zero	Dfp	0	RET	x.equals($)
3086	542	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(zero)
3087	543	12	DfpMath.java	pow	zero	Dfp	1	RET	Dfp.copysign(one, x).greaterThan($)
3087	543	12	DfpMath.java	pow	one	Dfp	1	RET	Dfp.copysign($, x).greaterThan(zero)
3087	543	12	DfpMath.java	pow	x	Dfp	1	RET	Dfp.copysign(one, $).greaterThan(zero)
3088	545	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3088	545	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3089	552	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
3089	552	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
3089	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
3089	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
3089	552	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
3090	554	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3090	554	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3091	561	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3091	561	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3092	570	8	DfpMath.java	pow	zero	Dfp	0	DEF	x.lessThan($)
3092	570	8	DfpMath.java	pow	x	Dfp	0	DEF	$.lessThan(zero)
3093	576	8	DfpMath.java	pow	one	Dfp	0	RET	x.greaterThan($)
3093	576	8	DfpMath.java	pow	x	Dfp	0	RET	$.greaterThan(one)
3093	576	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3094	577	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3094	577	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3095	584	8	DfpMath.java	pow	one	Dfp	0	RET	x.lessThan($)
3095	584	8	DfpMath.java	pow	x	Dfp	0	RET	$.lessThan(one)
3095	584	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3096	585	12	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3096	585	12	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3097	592	8	DfpMath.java	pow	one	Dfp	0	RET	x.equals($)
3097	592	8	DfpMath.java	pow	x	Dfp	0	RET	$.equals(one)
3097	592	8	DfpMath.java	pow	y	Dfp	0	RET	$.classify() == Dfp.INFINITE
3098	597	8	DfpMath.java	pow	x	Dfp	0	RET	$.classify() == Dfp.INFINITE
3099	599	12	DfpMath.java	pow	invert	boolean	1	RET	$
3100	601	16	DfpMath.java	pow	zero	Dfp	1	RET	y.remainder(two).equals($)
3100	601	16	DfpMath.java	pow	two	Dfp	1	RET	y.remainder($).equals(zero)
3100	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.classify() == Dfp.FINITE
3100	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.remainder(two).equals(zero)
3100	601	16	DfpMath.java	pow	y	Dfp	1	RET	$.rint().equals($)
3101	603	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3101	603	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3102	610	20	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3102	610	20	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3103	618	16	DfpMath.java	pow	zero	Dfp	1	RET	y.greaterThan($)
3103	618	16	DfpMath.java	pow	y	Dfp	1	RET	$.greaterThan(zero)
3104	626	8	DfpMath.java	pow	invert	boolean	0	RET	$
3104	626	8	DfpMath.java	pow	y	Dfp	0	RET	$.rint().equals($)
3105	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.greaterThan($.newInstance(-100000000))
3105	634	8	DfpMath.java	pow	x	Dfp	1	DEF	y.lessThan($.newInstance(100000000))
3105	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.greaterThan(x.newInstance(-100000000))
3105	634	8	DfpMath.java	pow	y	Dfp	1	DEF	$.lessThan(x.newInstance(100000000))
3106	640	12	DfpMath.java	pow	v	Dfp	1	DEF	$.unequal(zero)
3106	640	12	DfpMath.java	pow	zero	Dfp	1	DEF	v.unequal($)
3107	656	8	DfpMath.java	pow	invert	boolean	0	DEF	$
3108	658	12	DfpMath.java	pow	zero	Dfp	0	DEF	y.remainder(two).equals($)
3108	658	12	DfpMath.java	pow	two	Dfp	0	DEF	y.remainder($).equals(zero)
3108	658	12	DfpMath.java	pow	y	Dfp	0	DEF	$.remainder(two).equals(zero)
3108	658	12	DfpMath.java	pow	y	Dfp	0	DEF	$.rint().equals($)
24457	681	8	DfpMath.java	sinInternal	i	int	0	NIL-FOR	$ < 90
3109	687	12	DfpMath.java	sinInternal	y	Dfp	0	DEF	$.equals(py)
3109	687	12	DfpMath.java	sinInternal	py	Dfp	0	DEF	y.equals($)
24458	714	8	DfpMath.java	cosInternal	i	int	0	NIL-FOR	$ < 90
3110	721	12	DfpMath.java	cosInternal	y	Dfp	0	DEF	$.equals(py)
3110	721	12	DfpMath.java	cosInternal	py	Dfp	0	DEF	y.equals($)
3111	745	8	DfpMath.java	sin	zero	Dfp	0	DEF	x.lessThan($)
3111	745	8	DfpMath.java	sin	x	Dfp	0	DEF	$.lessThan(zero)
3112	754	8	DfpMath.java	sin	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
3112	754	8	DfpMath.java	sin	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
3113	759	8	DfpMath.java	sin	pi	Dfp	1	DEF	x.lessThan($.divide(4))
3113	759	8	DfpMath.java	sin	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
3114	774	8	DfpMath.java	sin	neg	boolean	0	DEF	$
3115	796	8	DfpMath.java	cos	zero	Dfp	0	DEF	x.lessThan($)
3115	796	8	DfpMath.java	cos	x	Dfp	0	DEF	$.lessThan(zero)
3116	804	8	DfpMath.java	cos	pi	Dfp	0	DEF	x.greaterThan($.divide(2))
3116	804	8	DfpMath.java	cos	x	Dfp	0	DEF	$.greaterThan(pi.divide(2))
3117	810	8	DfpMath.java	cos	pi	Dfp	1	DEF	x.lessThan($.divide(4))
3117	810	8	DfpMath.java	cos	x	Dfp	1	DEF	$.lessThan(pi.divide(4))
3118	824	8	DfpMath.java	cos	neg	boolean	0	DEF	$
24459	850	8	DfpMath.java	atanInternal	i	int	0	NIL-FOR	$ < 90
3119	855	12	DfpMath.java	atanInternal	y	Dfp	0	DEF	$.equals(py)
3119	855	12	DfpMath.java	atanInternal	py	Dfp	0	DEF	y.equals($)
3120	890	8	DfpMath.java	atan	zero	Dfp	0	DEF	x.lessThan($)
3120	890	8	DfpMath.java	atan	x	Dfp	0	DEF	$.lessThan(zero)
3121	895	8	DfpMath.java	atan	one	Dfp	0	DEF	x.greaterThan($)
3121	895	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(one)
3122	900	8	DfpMath.java	atan	ty	Dfp	0	DEF	x.greaterThan($)
3122	900	8	DfpMath.java	atan	x	Dfp	0	DEF	$.greaterThan(ty)
3123	923	8	DfpMath.java	atan	sub	boolean	0	DEF	$
3124	927	8	DfpMath.java	atan	recp	boolean	0	DEF	$
3125	931	8	DfpMath.java	atan	neg	boolean	0	DEF	$
3126	955	8	DfpMath.java	acos	a	Dfp	0	DEF	$.lessThan($.getZero())
3127	963	8	DfpMath.java	acos	negative	boolean	0	DEF	$
24501	105	8	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	$ < n
24501	105	8	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	i < $
24502	106	12	DividedDifferenceInterpolator.java	computeDividedDifference	j	int	0	NIL-FOR	$ < n-i
24502	106	12	DividedDifferenceInterpolator.java	computeDividedDifference	i	int	0	NIL-FOR	j < n-$
24502	106	12	DividedDifferenceInterpolator.java	computeDividedDifference	n	int	0	NIL-FOR	j < $-i
24301	144	4	DormandPrince54Integrator.java	estimateError	THIS	DormandPrince54Integrator	0	NIL-FOR	j < $.mainSetDimension
24301	144	4	DormandPrince54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
2642	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	THIS	DormandPrince54StepInterpolator	1	DEF	interpolator.$.v1 == null
2642	119	4	DormandPrince54StepInterpolator.java	DormandPrince54StepInterpolator	interpolator	DormandPrince54StepInterpolator	1	DEF	$.v1 == null
2643	172	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.vectorsInitialized
2644	174	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	DEF	$.v1 == null
24267	184	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
24267	184	6	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2645	207	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	1	DEF	$.previousState != null
2645	207	4	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
24268	208	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
24268	208	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
24269	214	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
24269	214	8	DormandPrince54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
24300	258	4	DormandPrince853Integrator.java	estimateError	THIS	DormandPrince853Integrator	0	NIL-FOR	j < $.mainSetDimension
24300	258	4	DormandPrince853Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
2696	279	4	DormandPrince853Integrator.java	estimateError	den	double	0	DEF	$ <= 0.0
2716	246	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	1	DEF	interpolator.$.currentState == null
2716	246	4	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	interpolator	DormandPrince853StepInterpolator	1	DEF	$.currentState == null
24321	257	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
24321	257	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < yDotKLast.length
24322	264	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
24322	264	6	DormandPrince853StepInterpolator.java	DormandPrince853StepInterpolator	k	int	0	NIL-FOR	$ < v.length
24323	293	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.yDotKLast.$.length
24323	293	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < yDotKLast.length
24324	298	4	DormandPrince853StepInterpolator.java	reinitialize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < $.v.$.length
24324	298	4	DormandPrince853StepInterpolator.java	reinitialize	k	int	0	NIL-FOR	$ < v.length
2717	318	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.vectorsInitialized
2718	320	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	DEF	$.v == null
24325	322	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < 7
24326	331	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
24326	331	6	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
24327	349	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	k < D.$.length
24327	349	10	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	k	int	0	NIL-FOR	$ < D.length
2719	371	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	1	DEF	$.previousState != null
2719	371	4	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
24328	372	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
24328	372	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
24329	386	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
24329	386	8	DormandPrince853StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2720	407	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	RET	$.currentState == null
24330	417	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
24330	417	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
24331	426	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
24331	426	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
24332	436	4	DormandPrince853StepInterpolator.java	doFinalize	THIS	DormandPrince853StepInterpolator	0	NIL-FOR	j < $.currentState.$.length
24332	436	4	DormandPrince853StepInterpolator.java	doFinalize	j	int	0	NIL-FOR	$ < currentState.length
24333	457	4	DormandPrince853StepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < dimension
24333	457	4	DormandPrince853StepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	i < $
24334	480	4	DormandPrince853StepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < dimension
24334	480	4	DormandPrince853StepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	i < $
1225	116	8	EigenDecomposition.java	EigenDecomposition	THIS	EigenDecomposition	1	DEF	$.isSymmetric(matrix, false)
1225	116	8	EigenDecomposition.java	EigenDecomposition	matrix	RealMatrix	1	DEF	isSymmetric($, false)
23119	153	8	EigenDecomposition.java	EigenDecomposition	i	int	0	NIL-FOR	$ < size
23119	153	8	EigenDecomposition.java	EigenDecomposition	size	int	0	NIL-FOR	i < $
23120	190	8	EigenDecomposition.java	isSymmetric	i	int	0	NIL-FOR	$ < rows
23120	190	8	EigenDecomposition.java	isSymmetric	rows	int	0	NIL-FOR	i < $
23121	191	12	EigenDecomposition.java	isSymmetric	j	int	0	NIL-FOR	$ < columns
23121	191	12	EigenDecomposition.java	isSymmetric	columns	int	0	NIL-FOR	j < $
1226	194	16	EigenDecomposition.java	isSymmetric	mij	double	0	NonSymmetricMatrixException:RET	FastMath.abs($ - mji) > (FastMath.max(FastMath.abs($), FastMath.abs(mji)) * eps)
1226	194	16	EigenDecomposition.java	isSymmetric	mji	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - $) > (FastMath.max(FastMath.abs(mij), FastMath.abs($)) * eps)
1226	194	16	EigenDecomposition.java	isSymmetric	eps	double	0	NonSymmetricMatrixException:RET	FastMath.abs(mij - mji) > (FastMath.max(FastMath.abs(mij), FastMath.abs(mji)) * $)
1227	196	20	EigenDecomposition.java	isSymmetric	raiseException	boolean	0	NonSymmetricMatrixException	$
1228	218	8	EigenDecomposition.java	getV	THIS	EigenDecomposition	0	DEF	$.cachedV == null
23122	221	12	EigenDecomposition.java	getV	k	int	0	NIL-FOR	$ < m
23122	221	12	EigenDecomposition.java	getV	m	int	0	NIL-FOR	k < $
1229	242	8	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	DEF	$.cachedD == null
23123	246	12	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	NIL-FOR	i < $.imagEigenvalues.$.length
23123	246	12	EigenDecomposition.java	getD	i	int	0	NIL-FOR	$ < imagEigenvalues.length
1230	247	16	EigenDecomposition.java	getD	THIS	EigenDecomposition	1	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, $.epsilon) > 0
1230	247	16	EigenDecomposition.java	getD	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, epsilon) > 0
1231	249	23	EigenDecomposition.java	getD	THIS	EigenDecomposition	0	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, $.epsilon) < 0
1231	249	23	EigenDecomposition.java	getD	i	int	0	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, epsilon) < 0
1232	269	8	EigenDecomposition.java	getVT	THIS	EigenDecomposition	0	DEF	$.cachedVt == null
23124	272	12	EigenDecomposition.java	getVT	k	int	0	NIL-FOR	$ < m
23124	272	12	EigenDecomposition.java	getVT	m	int	0	NIL-FOR	k < $
23125	291	8	EigenDecomposition.java	hasComplexEigenvalues	THIS	EigenDecomposition	0	NIL-FOR	i < $.imagEigenvalues.$.length
23125	291	8	EigenDecomposition.java	hasComplexEigenvalues	i	int	0	NIL-FOR	$ < imagEigenvalues.length
1233	292	12	EigenDecomposition.java	hasComplexEigenvalues	THIS	EigenDecomposition	0	RET	Precision.equals($.imagEigenvalues[i], 0.0, $.epsilon)
1233	292	12	EigenDecomposition.java	hasComplexEigenvalues	i	int	0	RET	Precision.equals(imagEigenvalues[$], 0.0, epsilon)
1234	395	8	EigenDecomposition.java	getSolver	THIS	EigenDecomposition	0	MathUnsupportedOperationException	$.hasComplexEigenvalues()
23126	567	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n - 1
23126	567	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $ - 1
23127	576	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
23127	576	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1235	577	12	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) > maxAbsoluteValue
1235	577	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
1235	577	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) > $
1236	580	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$]) > maxAbsoluteValue
1236	580	12	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i]) > maxAbsoluteValue
1236	580	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i]) > $
1237	585	8	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$ != 0
23128	586	12	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
23128	586	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1238	587	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue
1238	587	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) <= Precision.EPSILON * maxAbsoluteValue
1238	587	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * $
1239	590	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(e[$]) <= Precision.EPSILON * maxAbsoluteValue
1239	590	16	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[i]) <= Precision.EPSILON * maxAbsoluteValue
1239	590	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(e[i]) <= Precision.EPSILON * $
23129	596	8	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
23129	596	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
23130	599	12	EigenDecomposition.java	findEigenVectors	m	int	0	NIL-DOWHILE	$ != j
23130	599	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-DOWHILE	m != $
23131	600	16	EigenDecomposition.java	findEigenVectors	m	int	0	NIL-FOR	$ < n - 1
23131	600	16	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	m < $ - 1
1240	603	20	EigenDecomposition.java	findEigenVectors	delta	double	0	DEF	FastMath.abs(e[m]) + $ == $
1240	603	20	EigenDecomposition.java	findEigenVectors	m	int	0	DEF	FastMath.abs(e[$]) + delta == delta
1240	603	20	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	FastMath.abs($[m]) + delta == delta
1241	607	16	EigenDecomposition.java	findEigenVectors	m	int	0	MaxCountExceededException	$ != j
1241	607	16	EigenDecomposition.java	findEigenVectors	j	int	0	MaxCountExceededException	m != $
1242	608	20	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	MaxCountExceededException	its == $.maxIter
1242	608	20	EigenDecomposition.java	findEigenVectors	its	int	0	MaxCountExceededException	$ == maxIter
1243	615	20	EigenDecomposition.java	findEigenVectors	q	double	1	DEF	$ < 0.0
23132	624	20	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ >= j
23132	624	20	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	i >= $
1244	627	24	EigenDecomposition.java	findEigenVectors	p	double	1	DEF	FastMath.abs($) >= FastMath.abs(q)
1244	627	24	EigenDecomposition.java	findEigenVectors	q	double	1	DEF	FastMath.abs(p) >= FastMath.abs($)
1245	640	24	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	e[$ + 1] == 0.0
1245	640	24	EigenDecomposition.java	findEigenVectors	e	double[]	0	DEF	$[i + 1] == 0.0
23133	650	24	EigenDecomposition.java	findEigenVectors	ia	int	0	NIL-FOR	$ < n
23133	650	24	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	ia < $
1246	656	20	EigenDecomposition.java	findEigenVectors	t	double	0	DEF	$ == 0.0
1246	656	20	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	$ >= j
1246	656	20	EigenDecomposition.java	findEigenVectors	j	int	0	DEF	i >= $
23134	667	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
23134	667	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
23135	670	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
23135	670	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
1247	671	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	$.realEigenvalues[j] > p
1247	671	16	EigenDecomposition.java	findEigenVectors	j	int	0	DEF	realEigenvalues[$] > p
1247	671	16	EigenDecomposition.java	findEigenVectors	p	double	0	DEF	realEigenvalues[j] > $
1248	676	12	EigenDecomposition.java	findEigenVectors	k	int	0	DEF	$ != i
1248	676	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	k != $
23136	679	16	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
23136	679	16	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
23137	689	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
23137	689	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1249	690	12	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) > maxAbsoluteValue
1249	690	12	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) > maxAbsoluteValue
1249	690	12	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) > $
1250	695	8	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	$ != 0.0
23138	696	12	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
23138	696	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
1251	697	16	EigenDecomposition.java	findEigenVectors	THIS	EigenDecomposition	0	DEF	FastMath.abs($.realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue
1251	697	16	EigenDecomposition.java	findEigenVectors	i	int	0	DEF	FastMath.abs(realEigenvalues[$]) < Precision.EPSILON * maxAbsoluteValue
1251	697	16	EigenDecomposition.java	findEigenVectors	maxAbsoluteValue	double	0	DEF	FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * $
23139	704	8	EigenDecomposition.java	findEigenVectors	i	int	0	NIL-FOR	$ < n
23139	704	8	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	i < $
23140	705	12	EigenDecomposition.java	findEigenVectors	j	int	0	NIL-FOR	$ < n
23140	705	12	EigenDecomposition.java	findEigenVectors	n	int	0	NIL-FOR	j < $
23141	725	8	EigenDecomposition.java	transformToSchur	THIS	EigenDecomposition	0	NIL-FOR	i < $.realEigenvalues.$.length
23141	725	8	EigenDecomposition.java	transformToSchur	i	int	0	NIL-FOR	$ < realEigenvalues.length
1252	726	12	EigenDecomposition.java	transformToSchur	THIS	EigenDecomposition	1	DEF	i == ($.realEigenvalues.$.length - 1)
1252	726	12	EigenDecomposition.java	transformToSchur	THIS	EigenDecomposition	1	DEF	Precision.equals(matT[i + 1][i], 0.0, $.epsilon)
1252	726	12	EigenDecomposition.java	transformToSchur	i	int	1	DEF	$ == (realEigenvalues.length - 1)
1252	726	12	EigenDecomposition.java	transformToSchur	i	int	1	DEF	Precision.equals(matT[$ + 1][$], 0.0, epsilon)
1252	726	12	EigenDecomposition.java	transformToSchur	matT	double[][]	1	DEF	Precision.equals($[i + 1][i], 0.0, epsilon)
23142	771	8	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
23142	771	8	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
23143	772	11	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
23143	772	11	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
1253	778	8	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	0	MathArithmeticException	Precision.equals(norm, 0.0, $.epsilon)
1253	778	8	EigenDecomposition.java	findEigenVectorsFromSchur	norm	double	0	MathArithmeticException	Precision.equals($, 0.0, epsilon)
23144	788	8	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	$ >= 0
1254	792	12	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	1	DEF	Precision.equals($, 0.0)
23145	796	16	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ >= 0
23146	799	20	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
23146	799	20	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1255	802	20	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, $.epsilon) < 0.0
1255	802	20	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, epsilon) < 0.0
1256	807	24	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.equals($.imagEigenvalues[i], 0.0)
1256	807	24	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.equals(imagEigenvalues[$], 0.0)
1257	808	28	EigenDecomposition.java	findEigenVectorsFromSchur	w	double	1	DEF	$ != 0.0
1258	821	28	EigenDecomposition.java	findEigenVectorsFromSchur	x	double	1	DEF	FastMath.abs($) > FastMath.abs(z)
1258	821	28	EigenDecomposition.java	findEigenVectorsFromSchur	z	double	1	DEF	FastMath.abs(x) > FastMath.abs($)
1259	830	24	EigenDecomposition.java	findEigenVectorsFromSchur	t	double	0	DEF	(Precision.EPSILON * $) * $ > 1
23147	831	28	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
23147	831	28	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1260	837	19	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	0	DEF	$ < 0.0
1261	842	16	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	1	DEF	FastMath.abs(matrixT[$][$ - 1]) > FastMath.abs(matrixT[$ - 1][$])
1261	842	16	EigenDecomposition.java	findEigenVectorsFromSchur	matrixT	double[][]	1	DEF	FastMath.abs($[idx][idx - 1]) > FastMath.abs($[idx - 1][idx])
23148	855	16	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ >= 0
23149	858	20	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
23149	858	20	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
1262	864	20	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.compareTo($.imagEigenvalues[i], 0.0, $.epsilon) < 0.0
1262	864	20	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.compareTo(imagEigenvalues[$], 0.0, epsilon) < 0.0
1263	870	24	EigenDecomposition.java	findEigenVectorsFromSchur	THIS	EigenDecomposition	1	DEF	Precision.equals($.imagEigenvalues[i], 0.0)
1263	870	24	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	1	DEF	Precision.equals(imagEigenvalues[$], 0.0)
1264	881	28	EigenDecomposition.java	findEigenVectorsFromSchur	vr	double	0	DEF	Precision.equals($, 0.0)
1264	881	28	EigenDecomposition.java	findEigenVectorsFromSchur	vi	double	0	DEF	Precision.equals($, 0.0)
1265	891	28	EigenDecomposition.java	findEigenVectorsFromSchur	x	double	1	DEF	FastMath.abs($) > (FastMath.abs(z) + FastMath.abs(q))
1265	891	28	EigenDecomposition.java	findEigenVectorsFromSchur	q	double	1	DEF	FastMath.abs(x) > (FastMath.abs(z) + FastMath.abs($))
1265	891	28	EigenDecomposition.java	findEigenVectorsFromSchur	z	double	1	DEF	FastMath.abs(x) > (FastMath.abs($) + FastMath.abs(q))
1266	907	24	EigenDecomposition.java	findEigenVectorsFromSchur	t	double	0	DEF	(Precision.EPSILON * $) * $ > 1
23150	908	28	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ <= idx
23150	908	28	EigenDecomposition.java	findEigenVectorsFromSchur	idx	int	0	NIL-FOR	j <= $
23151	919	8	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
23151	919	8	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
1267	920	12	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	DEF	$ < 0 | $ > n - 1
1267	920	12	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	DEF	i < 0 | i > $ - 1
23152	921	16	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
23152	921	16	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
23153	928	8	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ >= 0
23154	929	12	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ <= n - 1
23154	929	12	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i <= $ - 1
23155	931	16	EigenDecomposition.java	findEigenVectorsFromSchur	k	int	0	NIL-FOR	$ <= FastMath.min(j, n - 1)
23155	931	16	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	k <= FastMath.min($, n - 1)
23155	931	16	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	k <= FastMath.min(j, $ - 1)
23156	940	8	EigenDecomposition.java	findEigenVectorsFromSchur	i	int	0	NIL-FOR	$ < n
23156	940	8	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	i < $
23157	941	12	EigenDecomposition.java	findEigenVectorsFromSchur	j	int	0	NIL-FOR	$ < n
23157	941	12	EigenDecomposition.java	findEigenVectorsFromSchur	n	int	0	NIL-FOR	j < $
24192	84	8	ElitisticListPopulation.java	nextGeneration	i	int	0	NIL-FOR	$ < oldChromosomes.size()
24192	84	8	ElitisticListPopulation.java	nextGeneration	oldChromosomes	List<Chromosome>	0	NIL-FOR	i < $.size()
2517	99	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	OutOfRangeException	$ < 0
2517	99	8	ElitisticListPopulation.java	setElitismRate	elitismRate	double	0	OutOfRangeException	$ > 1
24312	220	4	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
24313	226	6	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	NIL-WHILE	$ >= 1.0
2706	228	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
2706	228	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2707	233	8	EmbeddedRungeKuttaIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2708	235	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	1	DEF	$.vecAbsoluteTolerance == null
24314	236	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
24314	236	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
24314	236	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
24315	240	14	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	i < scale.$.length
24315	240	14	EmbeddedRungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < scale.length
24315	240	14	EmbeddedRungeKuttaIntegrator.java	integrate	scale	double[]	0	NIL-FOR	i < $.length
2709	250	8	EmbeddedRungeKuttaIntegrator.java	integrate	forward	boolean	1	DEF	$
2710	251	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize >= t
2710	251	12	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize >= $
2711	255	12	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.stepStart + $.stepSize <= t
2711	255	12	EmbeddedRungeKuttaIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize <= $
24316	261	8	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
24316	261	8	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
24317	263	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
24317	263	10	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
24317	263	10	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
24318	265	12	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
24318	265	12	EmbeddedRungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
24319	276	8	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
24319	276	8	EmbeddedRungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
24319	276	8	EmbeddedRungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
24320	278	10	EmbeddedRungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
24320	278	10	EmbeddedRungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
2712	286	8	EmbeddedRungeKuttaIntegrator.java	integrate	error	double	0	DEF	$ >= 1.0
2713	303	6	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.isLastStep
2714	308	10	EmbeddedRungeKuttaIntegrator.java	integrate	THIS	EmbeddedRungeKuttaIntegrator	0	DEF	$.fsal
2715	323	10	EmbeddedRungeKuttaIntegrator.java	integrate	filteredNextIsLast	boolean	0	DEF	$
2436	218	12	EmpiricalDistribution.java	load	THIS	EmpiricalDistribution	0	ZeroException	$.sampleStats.getN() == 0
2437	408	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	DEF	$.binStats.isEmpty()
24160	411	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount
24160	411	8	EmpiricalDistribution.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount
24161	425	8	EmpiricalDistribution.java	fillBinStats	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount-1
24161	425	8	EmpiricalDistribution.java	fillBinStats	i	int	0	NIL-FOR	$ < binCount-1
2438	453	8	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	MathIllegalStateException	$.loaded
24162	461	8	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount
24162	461	8	EmpiricalDistribution.java	getNextValue	i	int	0	NIL-FOR	$ < binCount
2439	462	11	EmpiricalDistribution.java	getNextValue	THIS	EmpiricalDistribution	0	RET	x <= $.upperBounds[i]
2439	462	11	EmpiricalDistribution.java	getNextValue	i	int	0	RET	x <= upperBounds[$]
2439	462	11	EmpiricalDistribution.java	getNextValue	x	double	0	RET	$ <= upperBounds[i]
2440	464	15	EmpiricalDistribution.java	getNextValue	stats	SummaryStatistics	0	RET	$.getN() > 0
2441	465	19	EmpiricalDistribution.java	getNextValue	stats	SummaryStatistics	1	RET	$.getStandardDeviation() > 0
24163	525	8	EmpiricalDistribution.java	getUpperBounds	THIS	EmpiricalDistribution	0	NIL-FOR	i < $.binCount - 1
24163	525	8	EmpiricalDistribution.java	getUpperBounds	i	int	0	NIL-FOR	$ < binCount - 1
2762	77	8	EquationsMapper.java	extractEquationData	THIS	EquationsMapper	0	DimensionMismatchException	equationData.$.length != $.dimension
2762	77	8	EquationsMapper.java	extractEquationData	equationData	double[]	0	DimensionMismatchException	$.length != dimension
2763	92	8	EquationsMapper.java	insertEquationData	THIS	EquationsMapper	0	DimensionMismatchException	equationData.$.length != $.dimension
2763	92	8	EquationsMapper.java	insertEquationData	equationData	double[]	0	DimensionMismatchException	$.length != dimension
2565	67	8	Erf.java	erf	x	double	0	RET	FastMath.abs($) > 40
2566	98	8	Erf.java	erfc	x	double	0	RET	FastMath.abs($) > 40
2567	116	8	Erf.java	erf	x1	double	0	RET	$ > x2
2567	116	8	Erf.java	erf	x2	double	0	RET	x1 > $
24041	64	12	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
24041	64	12	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
24041	64	12	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
24042	68	8	EuclideanIntegerPoint.java	centroidOf	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < centroid.$.length
24042	68	8	EuclideanIntegerPoint.java	centroidOf	i	int	0	NIL-FOR	$ < centroid.length
24042	68	8	EuclideanIntegerPoint.java	centroidOf	centroid	int[]	0	NIL-FOR	i < $.length
2233	77	8	EuclideanIntegerPoint.java	equals	other	Object	0	RET	$ instanceof EuclideanIntegerPoint
2234	81	8	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	RET	$.point.$.length != otherPoint.$.length
2234	81	8	EuclideanIntegerPoint.java	equals	otherPoint	int[]	0	RET	point.length != $.length
24043	84	8	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < $.point.$.length
24043	84	8	EuclideanIntegerPoint.java	equals	i	int	0	NIL-FOR	$ < point.length
2235	85	12	EuclideanIntegerPoint.java	equals	THIS	EuclideanIntegerPoint	0	RET	$.point[i] != otherPoint[i]
2235	85	12	EuclideanIntegerPoint.java	equals	i	int	0	RET	point[$] != otherPoint[$]
2235	85	12	EuclideanIntegerPoint.java	equals	otherPoint	int[]	0	RET	point[i] != $[i]
24044	110	8	EuclideanIntegerPoint.java	toString	THIS	EuclideanIntegerPoint	0	NIL-FOR	i < coordinates.$.length
24044	110	8	EuclideanIntegerPoint.java	toString	i	int	0	NIL-FOR	$ < coordinates.length
24044	110	8	EuclideanIntegerPoint.java	toString	coordinates	int[]	0	NIL-FOR	i < $.length
2236	112	12	EuclideanIntegerPoint.java	toString	THIS	EuclideanIntegerPoint	0	DEF	i < coordinates.$.length - 1
2236	112	12	EuclideanIntegerPoint.java	toString	i	int	0	DEF	$ < coordinates.length - 1
2236	112	12	EuclideanIntegerPoint.java	toString	coordinates	int[]	0	DEF	i < $.length - 1
2748	86	6	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	1	DEF	$.previousState != null
2748	86	6	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
24358	87	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
24358	87	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
24359	92	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	EulerStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
24359	92	10	EulerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2764	157	8	EventState.java	reinitializeBegin	THIS	EventState	0	DEF	$.g0 == 0
2765	193	12	EventState.java	evaluateStep	THIS	EventState	0	RET	FastMath.abs(dt) < $.convergence
2765	193	12	EventState.java	evaluateStep	dt	double	0	RET	FastMath.abs($) < convergence
24381	209	12	EventState.java	evaluateStep	i	int	0	NIL-FOR	$ < n
24381	209	12	EventState.java	evaluateStep	n	int	0	NIL-FOR	i < $
2766	217	16	EventState.java	evaluateStep	THIS	EventState	1	RET	$.g0Positive ^ (gb >= 0)
2766	217	16	EventState.java	evaluateStep	gb	double	1	RET	g0Positive ^ ($ >= 0)
2767	225	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	$.solver instanceof BracketedUnivariateSolver<?>
2768	246	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - ta) <= $.convergence
2768	246	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	FastMath.abs(root - $.previousEventTime) <= $.convergence
2768	246	20	EventState.java	evaluateStep	THIS	EventState	1	DEF	Double.isNaN($.previousEventTime)
2768	246	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - ta) <= convergence
2768	246	20	EventState.java	evaluateStep	root	double	1	DEF	FastMath.abs($ - previousEventTime) <= convergence
2768	246	20	EventState.java	evaluateStep	ta	double	1	DEF	FastMath.abs(root - $) <= convergence
2769	254	27	EventState.java	evaluateStep	THIS	EventState	1	RET	FastMath.abs($.previousEventTime - root) > $.convergence
2769	254	27	EventState.java	evaluateStep	THIS	EventState	1	RET	Double.isNaN($.previousEventTime)
2769	254	27	EventState.java	evaluateStep	root	double	1	RET	FastMath.abs(previousEventTime - $) > convergence
2770	301	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	FastMath.abs($.pendingEventTime - t) <= $.convergence
2770	301	8	EventState.java	stepAccepted	THIS	EventState	1	DEF	$.pendingEvent
2770	301	8	EventState.java	stepAccepted	t	double	1	DEF	FastMath.abs(pendingEventTime - $) <= convergence
2771	329	8	EventState.java	reset	THIS	EventState	0	RET	$.pendingEvent
2771	329	8	EventState.java	reset	THIS	EventState	0	RET	FastMath.abs($.pendingEventTime - t) <= $.convergence
2771	329	8	EventState.java	reset	t	double	0	RET	FastMath.abs(pendingEventTime - $) <= convergence
2772	333	8	EventState.java	reset	THIS	EventState	0	DEF	$.nextAction == EventHandler.$.Action.RESET_STATE
24212	174	8	ExceptionContext.java	buildMessage	i	int	0	NIL-FOR	$ < len
24212	174	8	ExceptionContext.java	buildMessage	len	int	0	NIL-FOR	i < $
2586	180	12	ExceptionContext.java	buildMessage	count	int	0	DEF	++$ < len
2586	180	12	ExceptionContext.java	buildMessage	len	int	0	DEF	++count < $
24213	228	8	ExceptionContext.java	serializeMessages	i	int	0	NIL-FOR	$ < len
24213	228	8	ExceptionContext.java	serializeMessages	len	int	0	NIL-FOR	i < $
24214	236	12	ExceptionContext.java	serializeMessages	j	int	0	NIL-FOR	$ < aLen
24214	236	12	ExceptionContext.java	serializeMessages	aLen	int	0	NIL-FOR	j < $
2587	237	16	ExceptionContext.java	serializeMessages	j	int	1	DEF	args[$] instanceof Serializable
2587	237	16	ExceptionContext.java	serializeMessages	args	Object[]	1	DEF	$[j] instanceof Serializable
24215	263	8	ExceptionContext.java	deSerializeMessages	i	int	0	NIL-FOR	$ < len
24215	263	8	ExceptionContext.java	deSerializeMessages	len	int	0	NIL-FOR	i < $
24216	270	12	ExceptionContext.java	deSerializeMessages	j	int	0	NIL-FOR	$ < aLen
24216	270	12	ExceptionContext.java	deSerializeMessages	aLen	int	0	NIL-FOR	j < $
2588	293	12	ExceptionContext.java	serializeContext	value	Object	1	DEF	$ instanceof Serializable
24217	316	8	ExceptionContext.java	deSerializeContext	i	int	0	NIL-FOR	$ < len
24217	316	8	ExceptionContext.java	deSerializeContext	len	int	0	NIL-FOR	i < $
2803	96	8	ExpandableStatefulODE.java	getTotalDimension	THIS	ExpandableStatefulODE	1	RET	$.components.isEmpty()
2804	135	8	ExpandableStatefulODE.java	addSecondaryEquations	THIS	ExpandableStatefulODE	1	DEF	$.components.isEmpty()
24387	164	8	ExpandableStatefulODE.java	getSecondaryMappers	THIS	ExpandableStatefulODE	0	NIL-FOR	i < mappers.$.length
24387	164	8	ExpandableStatefulODE.java	getSecondaryMappers	i	int	0	NIL-FOR	$ < mappers.length
24387	164	8	ExpandableStatefulODE.java	getSecondaryMappers	mappers	EquationsMapper[]	0	NIL-FOR	i < $.length
2805	192	8	ExpandableStatefulODE.java	setPrimaryState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	primaryState.$.length != $.primaryState.length
2805	192	8	ExpandableStatefulODE.java	setPrimaryState	primaryState	double[]	0	DimensionMismatchException	$.length != this.primaryState.length
2806	229	8	ExpandableStatefulODE.java	setSecondaryState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	secondaryState.$.length != localArray.$.length
2806	229	8	ExpandableStatefulODE.java	setSecondaryState	localArray	double[]	0	DimensionMismatchException	secondaryState.length != $.length
2806	229	8	ExpandableStatefulODE.java	setSecondaryState	secondaryState	double[]	0	DimensionMismatchException	$.length != localArray.length
2807	265	8	ExpandableStatefulODE.java	setCompleteState	THIS	ExpandableStatefulODE	0	DimensionMismatchException	completeState.$.length != $.getTotalDimension()
2807	265	8	ExpandableStatefulODE.java	setCompleteState	completeState	double[]	0	DimensionMismatchException	$.length != getTotalDimension()
979	130	8	ExponentialDistribution.java	ExponentialDistribution	mean	double	0	NotStrictlyPositiveException	$ <= 0
980	159	8	ExponentialDistribution.java	density	x	double	0	RET	$ < 0
981	177	8	ExponentialDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
982	195	8	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
982	195	8	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
983	197	15	ExponentialDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1.0
22837	224	8	ExponentialDistribution.java	sample	u	double	0	NIL-WHILE	$ < 0.5
984	233	8	ExponentialDistribution.java	sample	u	double	0	RET	$ <= EXPONENTIAL_SA_QI[0]
22838	243	8	ExponentialDistribution.java	sample	u	double	0	NIL-DOWHILE	$ > EXPONENTIAL_SA_QI[i]
22838	243	8	ExponentialDistribution.java	sample	i	int	0	NIL-DOWHILE	u > EXPONENTIAL_SA_QI[$]
985	247	12	ExponentialDistribution.java	sample	u2	double	0	DEF	$ < umin
985	247	12	ExponentialDistribution.java	sample	umin	double	0	DEF	u2 < $
1023	110	8	FDistribution.java	FDistribution	numeratorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1024	114	8	FDistribution.java	FDistribution	denominatorDegreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
1025	165	8	FDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0
1026	214	8	FDistribution.java	getNumericalMean	denominatorDF	double	0	RET	$ > 2
1027	235	8	FDistribution.java	getNumericalVariance	THIS	FDistribution	0	DEF	$.numericalVarianceIsCalculated
1028	250	8	FDistribution.java	calculateNumericalVariance	denominatorDF	double	0	RET	$ > 4
2589	98	8	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	0	RET	type == $.TransformType.FORWARD
2589	98	8	FastCosineTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
2590	99	12	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	0	RET	$.normalization == $.DctNormalization.ORTHOGONAL_DCT_I
2591	107	8	FastCosineTransformer.java	transform	THIS	FastCosineTransformer	1	DEF	$.normalization == $.DctNormalization.ORTHOGONAL_DCT_I
2592	147	8	FastCosineTransformer.java	fct	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
2593	152	8	FastCosineTransformer.java	fct	n	int	0	RET	$ == 1
24218	164	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
24218	164	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
24219	179	8	FastCosineTransformer.java	fct	i	int	0	NIL-FOR	$ < (n >> 1)
24219	179	8	FastCosineTransformer.java	fct	n	int	0	NIL-FOR	i < ($ >> 1)
24232	139	8	FastFourierTransformer.java	bitReversalShuffle2	i	int	0	NIL-FOR	$ < n
24232	139	8	FastFourierTransformer.java	bitReversalShuffle2	n	int	0	NIL-FOR	i < $
2605	140	12	FastFourierTransformer.java	bitReversalShuffle2	i	int	0	DEF	$ < j
2605	140	12	FastFourierTransformer.java	bitReversalShuffle2	j	int	0	DEF	i < $
24233	152	12	FastFourierTransformer.java	bitReversalShuffle2	k	int	0	NIL-WHILE	$ <= j
24233	152	12	FastFourierTransformer.java	bitReversalShuffle2	k	int	0	NIL-WHILE	$ > 0
24233	152	12	FastFourierTransformer.java	bitReversalShuffle2	j	int	0	NIL-WHILE	k <= $
2606	178	16	FastFourierTransformer.java	normalizeTransformedData	THIS	FastFourierTransformer	0	DEF	type == $.TransformType.INVERSE
2606	178	16	FastFourierTransformer.java	normalizeTransformedData	type	TransformType	0	DEF	$ == TransformType.INVERSE
24234	180	20	FastFourierTransformer.java	normalizeTransformedData	i	int	0	NIL-FOR	$ < n
24234	180	20	FastFourierTransformer.java	normalizeTransformedData	n	int	0	NIL-FOR	i < $
24235	188	16	FastFourierTransformer.java	normalizeTransformedData	i	int	0	NIL-FOR	$ < n
24235	188	16	FastFourierTransformer.java	normalizeTransformedData	n	int	0	NIL-FOR	i < $
2607	227	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DimensionMismatchException	dataRI.$.length != 2
2607	227	8	FastFourierTransformer.java	transformInPlace	dataRI	double[][]	0	DimensionMismatchException	$.length != 2
2608	232	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DimensionMismatchException	dataR.$.length != dataI.$.length
2608	232	8	FastFourierTransformer.java	transformInPlace	dataR	double[]	0	DimensionMismatchException	$.length != dataI.length
2608	232	8	FastFourierTransformer.java	transformInPlace	dataI	double[]	0	DimensionMismatchException	dataR.length != $.length
2609	237	8	FastFourierTransformer.java	transformInPlace	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
2610	243	8	FastFourierTransformer.java	transformInPlace	n	int	1	RET	$ == 1
2611	245	15	FastFourierTransformer.java	transformInPlace	n	int	0	RET	$ == 2
2612	265	8	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	1	DEF	type == $.TransformType.INVERSE
2612	265	8	FastFourierTransformer.java	transformInPlace	type	TransformType	1	DEF	$ == TransformType.INVERSE
24236	266	12	FastFourierTransformer.java	transformInPlace	i0	int	0	NIL-FOR	$ < n
24236	266	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	i0 < $
24237	295	12	FastFourierTransformer.java	transformInPlace	i0	int	0	NIL-FOR	$ < n
24237	295	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	i0 < $
24238	327	8	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-WHILE	lastN0 < $
24238	327	8	FastFourierTransformer.java	transformInPlace	lastN0	int	0	NIL-WHILE	$ < n
2613	332	12	FastFourierTransformer.java	transformInPlace	THIS	FastFourierTransformer	0	DEF	type == $.TransformType.INVERSE
2613	332	12	FastFourierTransformer.java	transformInPlace	type	TransformType	0	DEF	$ == TransformType.INVERSE
24239	337	12	FastFourierTransformer.java	transformInPlace	destEvenStartIndex	int	0	NIL-FOR	$ < n
24239	337	12	FastFourierTransformer.java	transformInPlace	n	int	0	NIL-FOR	destEvenStartIndex < $
24240	343	16	FastFourierTransformer.java	transformInPlace	r	int	0	NIL-FOR	$ < lastN0
24240	343	16	FastFourierTransformer.java	transformInPlace	lastN0	int	0	NIL-FOR	r < $
24241	456	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize.$.length
24241	456	8	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize.length
24241	456	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $.length
2614	478	8	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == dimensionSize.$.length
2614	478	8	FastFourierTransformer.java	mdfft	dimensionSize	int[]	1	DEF	subVector.length == $.length
2614	478	8	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == dimensionSize.length
24242	480	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
24242	480	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
24242	480	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
24243	488	12	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[d]
24243	488	12	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[d]
24243	488	12	FastFourierTransformer.java	mdfft	d	int	0	NIL-FOR	i < dimensionSize[$]
2615	495	12	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	1	DEF	subVector.$.length == d
2615	495	12	FastFourierTransformer.java	mdfft	d	int	1	DEF	subVector.length == $
2615	495	12	FastFourierTransformer.java	mdfft	subVector	int[]	1	DEF	$.length == d
24244	501	16	FastFourierTransformer.java	mdfft	THIS	FastFourierTransformer	0	NIL-FOR	i < dimensionSize[subVector.$.length]
24244	501	16	FastFourierTransformer.java	mdfft	i	int	0	NIL-FOR	$ < dimensionSize[subVector.length]
24244	501	16	FastFourierTransformer.java	mdfft	dimensionSize	int[]	0	NIL-FOR	i < $[subVector.length]
24244	501	16	FastFourierTransformer.java	mdfft	subVector	int[]	0	NIL-FOR	i < dimensionSize[$.length]
2597	50	8	FastHadamardTransformer.java	transform	THIS	FastHadamardTransformer	0	RET	type == $.TransformType.FORWARD
2597	50	8	FastHadamardTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
2598	235	8	FastHadamardTransformer.java	fht	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
24224	249	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
24224	249	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
24225	257	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
24225	257	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
24226	262	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
24226	262	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
2599	287	8	FastHadamardTransformer.java	fht	n	int	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($)
24227	301	8	FastHadamardTransformer.java	fht	j	int	0	NIL-FOR	$ < n
24227	301	8	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	j < $
24228	309	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < halfN
24228	309	12	FastHadamardTransformer.java	fht	halfN	int	0	NIL-FOR	i < $
24229	314	12	FastHadamardTransformer.java	fht	i	int	0	NIL-FOR	$ < n
24229	314	12	FastHadamardTransformer.java	fht	n	int	0	NIL-FOR	i < $
235	361	8	FastMath.java	doubleHighPart	d	double	0	RET	$ > -Precision.SAFE_MIN
235	361	8	FastMath.java	doubleHighPart	d	double	0	RET	$ < Precision.SAFE_MIN
236	383	6	FastMath.java	cosh	x	double	0	RET	$ != $
237	392	6	FastMath.java	cosh	x	double	0	RET	$ > 20.0
238	396	6	FastMath.java	cosh	x	double	0	RET	$ < -20
239	401	6	FastMath.java	cosh	x	double	0	DEF	$ < 0.0
240	443	6	FastMath.java	sinh	x	double	0	RET	$ != $
241	452	6	FastMath.java	sinh	x	double	0	RET	$ > 20.0
242	456	6	FastMath.java	sinh	x	double	0	RET	$ < -20
243	460	6	FastMath.java	sinh	x	double	0	RET	$ == 0
244	464	6	FastMath.java	sinh	x	double	0	DEF	$ < 0.0
245	471	6	FastMath.java	sinh	x	double	1	DEF	$ > 0.25
246	545	6	FastMath.java	sinh	negate	boolean	0	DEF	$
247	559	6	FastMath.java	tanh	x	double	0	RET	$ != $
248	569	6	FastMath.java	tanh	x	double	0	RET	$ > 20.0
249	573	6	FastMath.java	tanh	x	double	0	RET	$ < -20
250	577	6	FastMath.java	tanh	x	double	0	RET	$ == 0
251	581	6	FastMath.java	tanh	x	double	0	DEF	$ < 0.0
252	587	6	FastMath.java	tanh	x	double	1	DEF	$ >= 0.5
253	669	6	FastMath.java	tanh	negate	boolean	0	DEF	$
254	690	8	FastMath.java	asinh	a	double	0	DEF	$ < 0
255	696	8	FastMath.java	asinh	a	double	1	DEF	$ > 0.167
256	700	12	FastMath.java	asinh	a	double	1	DEF	$ > 0.097
257	702	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.036
258	704	19	FastMath.java	asinh	a	double	1	DEF	$ > 0.0036
259	720	8	FastMath.java	atanh	a	double	0	DEF	$ < 0
260	726	8	FastMath.java	atanh	a	double	1	DEF	$ > 0.15
261	730	12	FastMath.java	atanh	a	double	1	DEF	$ > 0.087
262	732	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.031
263	734	19	FastMath.java	atanh	a	double	1	DEF	$ > 0.003
264	826	8	FastMath.java	exp	x	double	1	RET	$ < 0.0
265	829	12	FastMath.java	exp	intVal	int	0	RET	$ > 746
266	830	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
267	837	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
268	840	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
269	847	12	FastMath.java	exp	intVal	int	0	RET	$ == 709
270	850	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
271	866	12	FastMath.java	exp	intVal	int	0	RET	$ > 709
272	867	16	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
273	919	8	FastMath.java	exp	extra	double	1	DEF	$ != 0.0
274	925	8	FastMath.java	exp	hiPrec	double[]	0	DEF	$ != null
275	948	8	FastMath.java	expm1	x	double	0	RET	$ == 0.0
275	948	8	FastMath.java	expm1	x	double	0	RET	$ != $
276	952	8	FastMath.java	expm1	x	double	0	RET	$ >= 1.0
276	952	8	FastMath.java	expm1	x	double	0	RET	$ <= -1.0
277	957	12	FastMath.java	expm1	x	double	1	RET	$ > 0.0
278	972	8	FastMath.java	expm1	x	double	0	DEF	$ < 0.0
279	1048	8	FastMath.java	expm1	negative	boolean	0	DEF	$
280	1081	8	FastMath.java	expm1	hiPrecOut	double	0	DEF	$ != null
281	1106	8	FastMath.java	log	x	double	0	RET	$==0
282	1112	8	FastMath.java	log	bits	long	0	RET	($ & 0x8000000000000000L) != 0
282	1112	8	FastMath.java	log	x	double	0	RET	$ != $
283	1113	12	FastMath.java	log	x	double	0	RET	$ != 0.0
284	1114	16	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
285	1123	8	FastMath.java	log	x	double	0	RET	$ == Double.POSITIVE_INFINITY
286	1124	12	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
287	1134	8	FastMath.java	log	bits	long	0	RET	($ & 0x7ff0000000000000L) == 0
288	1136	12	FastMath.java	log	x	double	0	RET	$ == 0
289	1138	16	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
22787	1147	12	FastMath.java	log	bits	long	0	NIL-WHILE	($ & 0x0010000000000000L) == 0
290	1154	8	FastMath.java	log	exp	int	0	RET	$ == -1
290	1154	8	FastMath.java	log	exp	int	0	RET	$ == 0
291	1155	12	FastMath.java	log	x	double	0	RET	$ > 0.99
291	1155	12	FastMath.java	log	x	double	0	RET	$ < 1.01
291	1155	12	FastMath.java	log	hiPrec	double[]	0	RET	$ == null
22788	1171	16	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
292	1218	8	FastMath.java	log	hiPrec	double[]	1	DEF	$ != null
22789	1236	12	FastMath.java	log	i	int	0	NIL-FOR	$ >= 0
293	1319	8	FastMath.java	log	hiPrec	double[]	0	DEF	$ != null
294	1333	8	FastMath.java	log1p	x	double	0	RET	$ == -1
295	1337	8	FastMath.java	log1p	x	double	0	RET	1/$ == 0
295	1337	8	FastMath.java	log1p	x	double	0	RET	$ > 0
296	1341	8	FastMath.java	log1p	x	double	0	RET	$>1e-6
296	1341	8	FastMath.java	log1p	x	double	0	RET	$<-1e-6
297	1348	12	FastMath.java	log1p	lores	double	0	RET	Double.isInfinite($)
298	1378	8	FastMath.java	log10	lores	double	0	RET	Double.isInfinite($)
299	1422	8	FastMath.java	pow	y	double	0	RET	$ == 0.0
300	1426	8	FastMath.java	pow	x	double	0	RET	$ != $
301	1431	8	FastMath.java	pow	x	double	0	RET	$ == 0
302	1433	12	FastMath.java	pow	bits	long	0	RET	($ & 0x8000000000000000L) != 0
303	1437	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
303	1437	16	FastMath.java	pow	yi	long	0	RET	y == $
303	1437	16	FastMath.java	pow	y	double	0	RET	$ == yi
303	1437	16	FastMath.java	pow	y	double	0	RET	$ < 0
304	1441	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
304	1441	16	FastMath.java	pow	yi	long	0	RET	y == $
304	1441	16	FastMath.java	pow	y	double	0	RET	$ > 0
304	1441	16	FastMath.java	pow	y	double	0	RET	$ == yi
305	1446	12	FastMath.java	pow	y	double	0	RET	$ < 0
306	1449	12	FastMath.java	pow	y	double	0	RET	$ > 0
307	1456	8	FastMath.java	pow	x	double	0	RET	$ == Double.POSITIVE_INFINITY
308	1457	12	FastMath.java	pow	y	double	0	RET	$ != $
309	1460	12	FastMath.java	pow	y	double	1	RET	$ < 0.0
310	1467	8	FastMath.java	pow	y	double	0	RET	$ == Double.POSITIVE_INFINITY
311	1468	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
312	1472	12	FastMath.java	pow	x	double	1	RET	$ * $ > 1.0
313	1479	8	FastMath.java	pow	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
314	1480	12	FastMath.java	pow	y	double	0	RET	$ != $
315	1484	12	FastMath.java	pow	y	double	0	RET	$ < 0
316	1486	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
316	1486	16	FastMath.java	pow	yi	long	0	RET	y == $
316	1486	16	FastMath.java	pow	y	double	0	RET	$ == yi
317	1493	12	FastMath.java	pow	y	double	0	RET	$ > 0
318	1495	16	FastMath.java	pow	yi	long	0	RET	y == $
318	1495	16	FastMath.java	pow	yi	long	0	RET	($ & 1) == 1
318	1495	16	FastMath.java	pow	y	double	0	RET	$ == yi
319	1503	8	FastMath.java	pow	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
320	1505	12	FastMath.java	pow	x	double	0	RET	$ * $ == 1.0
321	1509	12	FastMath.java	pow	x	double	1	RET	$ * $ < 1.0
322	1517	8	FastMath.java	pow	x	double	0	RET	$ < 0
323	1519	12	FastMath.java	pow	THIS	FastMath	0	RET	y <= -$.TWO_POWER_52
323	1519	12	FastMath.java	pow	THIS	FastMath	0	RET	y >= $.TWO_POWER_52
323	1519	12	FastMath.java	pow	y	double	0	RET	$ <= -TWO_POWER_52
323	1519	12	FastMath.java	pow	y	double	0	RET	$ >= TWO_POWER_52
324	1523	12	FastMath.java	pow	y	double	1	RET	$ == (long) $
325	1534	8	FastMath.java	pow	y	double	1	DEF	$ > -8e298
325	1534	8	FastMath.java	pow	y	double	1	DEF	$ < 8e298
326	1547	8	FastMath.java	pow	lores	double	0	RET	Double.isInfinite($)
327	1729	8	FastMath.java	sinQ	xb	double	0	DEF	$ != 0.0
328	1859	8	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
329	1892	8	FastMath.java	tanQ	xb	double	0	DEF	$ != 0.0
330	1896	12	FastMath.java	tanQ	cotanFlag	boolean	0	DEF	$
331	1938	8	FastMath.java	reducePayneHanek	shift	int	1	DEF	$ != 0
332	1969	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
332	1969	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
332	1969	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
332	1969	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
332	1969	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
333	1983	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
333	1983	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
333	1983	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
333	1983	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
333	1983	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
334	2003	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
334	2003	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
334	2003	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
334	2003	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
334	2003	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
335	2055	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
335	2055	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
335	2055	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
335	2055	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
335	2055	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
336	2069	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
336	2069	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
336	2069	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
336	2069	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
336	2069	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
337	2089	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
337	2089	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
337	2089	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
337	2089	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
337	2089	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
338	2111	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
338	2111	8	FastMath.java	reducePayneHanek	bita	boolean	0	DEF	$
338	2111	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
338	2111	8	FastMath.java	reducePayneHanek	bitb	boolean	0	DEF	$
338	2111	8	FastMath.java	reducePayneHanek	bitsum	boolean	0	DEF	$
339	2143	8	FastMath.java	sin	x	double	0	DEF	$ < 0
340	2149	8	FastMath.java	sin	xa	double	0	RET	$ == 0.0
341	2151	12	FastMath.java	sin	bits	long	0	RET	$ < 0
342	2157	8	FastMath.java	sin	xa	double	0	RET	$ != $
342	2157	8	FastMath.java	sin	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
343	2162	8	FastMath.java	sin	xa	double	1	DEF	$ > 3294198.0
344	2171	15	FastMath.java	sin	xa	double	0	DEF	$ > 1.5707963267948966
345	2178	8	FastMath.java	sin	negative	boolean	0	DEF	$
346	2207	8	FastMath.java	cos	x	double	0	DEF	$ < 0
347	2211	8	FastMath.java	cos	xa	double	0	RET	$ != $
347	2211	8	FastMath.java	cos	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
348	2217	8	FastMath.java	cos	xa	double	1	DEF	$ > 3294198.0
349	2226	15	FastMath.java	cos	xa	double	0	DEF	$ > 1.5707963267948966
350	2262	8	FastMath.java	tan	x	double	0	DEF	$ < 0
351	2268	8	FastMath.java	tan	xa	double	0	RET	$ == 0.0
352	2270	12	FastMath.java	tan	bits	long	0	RET	$ < 0
353	2276	8	FastMath.java	tan	xa	double	0	RET	$ != $
353	2276	8	FastMath.java	tan	xa	double	0	RET	$ == Double.POSITIVE_INFINITY
354	2282	8	FastMath.java	tan	xa	double	1	DEF	$ > 3294198.0
355	2291	15	FastMath.java	tan	xa	double	0	DEF	$ > 1.5707963267948966
356	2298	8	FastMath.java	tan	xa	double	0	DEF	$ > 1.5
357	2314	8	FastMath.java	tan	quadrant	int	1	DEF	($ & 1) == 0
358	2320	8	FastMath.java	tan	negative	boolean	0	DEF	$
359	2346	8	FastMath.java	atan	xa	double	0	RET	$ == 0.0
360	2350	8	FastMath.java	atan	xa	double	0	DEF	$ < 0
361	2357	8	FastMath.java	atan	xa	double	0	RET	$ > 1.633123935319537E16
362	2362	8	FastMath.java	atan	xa	double	1	DEF	$ < 1
363	2384	8	FastMath.java	atan	idx	int	1	DEF	$ == 0
364	2462	8	FastMath.java	atan	leftPlane	boolean	0	DEF	$
365	2476	8	FastMath.java	atan	negate	boolean	0	DEF	$ ^ leftPlane
365	2476	8	FastMath.java	atan	leftPlane	boolean	0	DEF	negate ^ $
366	2490	8	FastMath.java	atan2	y	double	0	RET	$ != $
366	2490	8	FastMath.java	atan2	x	double	0	RET	$ != $
367	2494	8	FastMath.java	atan2	y	double	0	RET	$ == 0
368	2499	12	FastMath.java	atan2	invx	double	0	RET	$ == 0
369	2500	16	FastMath.java	atan2	x	double	1	RET	$ > 0
370	2507	12	FastMath.java	atan2	invx	double	1	RET	$ < 0
370	2507	12	FastMath.java	atan2	x	double	1	RET	$ < 0
371	2508	16	FastMath.java	atan2	invy	double	1	RET	$ < 0
371	2508	16	FastMath.java	atan2	y	double	1	RET	$ < 0
372	2520	8	FastMath.java	atan2	y	double	0	RET	$ == Double.POSITIVE_INFINITY
373	2521	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
374	2525	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
375	2532	8	FastMath.java	atan2	y	double	0	RET	$ == Double.NEGATIVE_INFINITY
376	2533	12	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
377	2537	12	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
378	2544	8	FastMath.java	atan2	x	double	0	RET	$ == Double.POSITIVE_INFINITY
379	2545	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0
379	2545	12	FastMath.java	atan2	y	double	0	RET	$ > 0
380	2549	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
380	2549	12	FastMath.java	atan2	y	double	0	RET	$ < 0
381	2554	8	FastMath.java	atan2	x	double	0	RET	$ == Double.NEGATIVE_INFINITY
382	2556	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0.0
382	2556	12	FastMath.java	atan2	y	double	0	RET	$ > 0.0
383	2560	12	FastMath.java	atan2	y	double	0	RET	$ < 0
383	2560	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
384	2567	8	FastMath.java	atan2	x	double	0	RET	$ == 0
385	2568	12	FastMath.java	atan2	y	double	0	RET	$ > 0
385	2568	12	FastMath.java	atan2	y	double	0	RET	1 / $ > 0
386	2572	12	FastMath.java	atan2	y	double	0	RET	1 / $ < 0
386	2572	12	FastMath.java	atan2	y	double	0	RET	$ < 0
387	2579	8	FastMath.java	atan2	r	double	0	RET	Double.isInfinite($)
388	2596	8	FastMath.java	atan2	ra	double	0	DEF	$ == 0
389	2611	6	FastMath.java	asin	x	double	0	RET	$ != $
390	2615	6	FastMath.java	asin	x	double	0	RET	$ < -1.0
390	2615	6	FastMath.java	asin	x	double	0	RET	$ > 1.0
391	2619	6	FastMath.java	asin	x	double	0	RET	$ == 1.0
392	2623	6	FastMath.java	asin	x	double	0	RET	$ == -1.0
393	2627	6	FastMath.java	asin	x	double	0	RET	$ == 0.0
394	2687	6	FastMath.java	acos	x	double	0	RET	$ != $
395	2691	6	FastMath.java	acos	x	double	0	RET	$ < -1.0
395	2691	6	FastMath.java	acos	x	double	0	RET	$ > 1.0
396	2695	6	FastMath.java	acos	x	double	0	RET	$ == -1.0
397	2699	6	FastMath.java	acos	x	double	0	RET	$ == 1.0
398	2703	6	FastMath.java	acos	x	double	0	RET	$ == 0
399	2747	6	FastMath.java	acos	r	double	0	RET	Double.isInfinite($)
400	2774	6	FastMath.java	cbrt	exponent	int	0	RET	$ == -1023
401	2775	10	FastMath.java	cbrt	x	double	0	RET	$ == 0
402	2786	6	FastMath.java	cbrt	exponent	int	0	RET	$ == 1024
403	2841	6	FastMath.java	cbrt	subnormal	boolean	0	DEF	$
404	2855	8	FastMath.java	toRadians	x	double	0	RET	Double.isInfinite($)
404	2855	8	FastMath.java	toRadians	x	double	0	RET	$ == 0.0
405	2867	8	FastMath.java	toRadians	result	double	0	DEF	$ == 0
406	2880	8	FastMath.java	toDegrees	x	double	0	RET	Double.isInfinite($)
406	2880	8	FastMath.java	toDegrees	x	double	0	RET	$ == 0.0
407	2936	8	FastMath.java	ulp	x	double	0	RET	Double.isInfinite($)
408	2948	8	FastMath.java	ulp	x	float	0	RET	Float.isInfinite($)
409	2963	8	FastMath.java	scalb	n	int	0	RET	$ < 1024
409	2963	8	FastMath.java	scalb	n	int	0	RET	$ > -1023
410	2968	8	FastMath.java	scalb	d	double	0	RET	Double.isInfinite($)
410	2968	8	FastMath.java	scalb	d	double	0	RET	$ == 0
410	2968	8	FastMath.java	scalb	d	double	0	RET	Double.isNaN($)
411	2971	8	FastMath.java	scalb	n	int	0	RET	$ < -2098
412	2974	8	FastMath.java	scalb	n	int	0	RET	$ > 2097
413	2987	8	FastMath.java	scalb	n	int	1	RET	$ < 0
414	2989	12	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
415	2992	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -53
416	3001	16	FastMath.java	scalb	mostSignificantLostBit	long	0	DEF	$ != 0
417	3013	12	FastMath.java	scalb	exponent	int	1	RET	$ == 0
22790	3016	16	FastMath.java	scalb	mantissa	long	0	NIL-WHILE	($ >>> 52) != 1
418	3023	16	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
419	3029	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 2047
420	3047	8	FastMath.java	scalb	n	int	0	RET	$ > -127
420	3047	8	FastMath.java	scalb	n	int	0	RET	$ < 128
421	3052	8	FastMath.java	scalb	f	float	0	RET	Float.isNaN($)
421	3052	8	FastMath.java	scalb	f	float	0	RET	Float.isInfinite($)
421	3052	8	FastMath.java	scalb	f	float	0	RET	$ == 0f
422	3055	8	FastMath.java	scalb	n	int	0	RET	$ < -277
423	3058	8	FastMath.java	scalb	n	int	0	RET	$ > 276
424	3071	8	FastMath.java	scalb	n	int	1	RET	$ < 0
425	3073	12	FastMath.java	scalb	scaledExponent	int	1	RET	$ > 0
426	3076	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ > -24
427	3085	16	FastMath.java	scalb	mostSignificantLostBit	int	0	DEF	$ != 0
428	3097	12	FastMath.java	scalb	exponent	int	1	RET	$ == 0
22791	3100	16	FastMath.java	scalb	mantissa	int	0	NIL-WHILE	($ >>> 23) != 1
429	3107	16	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
430	3113	19	FastMath.java	scalb	scaledExponent	int	1	RET	$ < 255
431	3156	8	FastMath.java	nextAfter	d	double	1	RET	Double.isNaN($)
431	3156	8	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
432	3158	15	FastMath.java	nextAfter	d	double	1	RET	$ == direction
432	3158	15	FastMath.java	nextAfter	direction	double	1	RET	d == $
433	3160	15	FastMath.java	nextAfter	d	double	1	RET	Double.isInfinite($)
434	3162	15	FastMath.java	nextAfter	d	double	0	RET	$ == 0
435	3170	8	FastMath.java	nextAfter	sign	long	1	RET	(direction < d) ^ ($ == 0L)
435	3170	8	FastMath.java	nextAfter	d	double	1	RET	(direction < $) ^ (sign == 0L)
435	3170	8	FastMath.java	nextAfter	direction	double	1	RET	($ < d) ^ (sign == 0L)
436	3212	8	FastMath.java	nextAfter	f	float	1	RET	Double.isNaN($)
436	3212	8	FastMath.java	nextAfter	direction	double	1	RET	Double.isNaN($)
437	3214	15	FastMath.java	nextAfter	f	float	1	RET	$ == direction
437	3214	15	FastMath.java	nextAfter	direction	double	1	RET	f == $
438	3216	15	FastMath.java	nextAfter	f	float	1	RET	Float.isInfinite($)
439	3218	15	FastMath.java	nextAfter	f	float	0	RET	$ == 0f
440	3226	8	FastMath.java	nextAfter	sign	int	1	RET	(direction < f) ^ ($ == 0)
440	3226	8	FastMath.java	nextAfter	f	float	1	RET	(direction < $) ^ (sign == 0)
440	3226	8	FastMath.java	nextAfter	direction	double	1	RET	($ < f) ^ (sign == 0)
441	3241	8	FastMath.java	floor	x	double	0	RET	$ != $
442	3245	8	FastMath.java	floor	THIS	FastMath	0	RET	x <= -$.TWO_POWER_52
442	3245	8	FastMath.java	floor	THIS	FastMath	0	RET	x >= $.TWO_POWER_52
442	3245	8	FastMath.java	floor	x	double	0	RET	$ <= -TWO_POWER_52
442	3245	8	FastMath.java	floor	x	double	0	RET	$ >= TWO_POWER_52
443	3250	8	FastMath.java	floor	y	long	0	DEF	$ != x
443	3250	8	FastMath.java	floor	x	double	0	DEF	y != $
443	3250	8	FastMath.java	floor	x	double	0	DEF	$ < 0
444	3254	8	FastMath.java	floor	y	long	0	RET	$ == 0
445	3268	8	FastMath.java	ceil	x	double	0	RET	$ != $
446	3273	8	FastMath.java	ceil	y	double	0	RET	$ == x
446	3273	8	FastMath.java	ceil	x	double	0	RET	y == $
447	3279	8	FastMath.java	ceil	y	double	0	RET	$ == 0
448	3294	8	FastMath.java	rint	d	double	0	RET	$ > 0.5
449	3295	12	FastMath.java	rint	y	double	0	RET	$ == -1.0
450	3300	8	FastMath.java	rint	d	double	0	RET	$ < 0.5
451	3349	8	FastMath.java	min	a	float	0	RET	$ > b
451	3349	8	FastMath.java	min	b	float	0	RET	a > $
452	3352	8	FastMath.java	min	a	float	0	RET	$ < b
452	3352	8	FastMath.java	min	b	float	0	RET	a < $
453	3356	8	FastMath.java	min	a	float	0	RET	$ != b
453	3356	8	FastMath.java	min	b	float	0	RET	a != $
454	3362	8	FastMath.java	min	bits	int	0	RET	$ == 0x80000000
455	3374	8	FastMath.java	min	a	double	0	RET	$ > b
455	3374	8	FastMath.java	min	b	double	0	RET	a > $
456	3377	8	FastMath.java	min	a	double	0	RET	$ < b
456	3377	8	FastMath.java	min	b	double	0	RET	a < $
457	3381	8	FastMath.java	min	a	double	0	RET	$ != b
457	3381	8	FastMath.java	min	b	double	0	RET	a != $
458	3387	8	FastMath.java	min	bits	long	0	RET	$ == 0x8000000000000000L
459	3417	8	FastMath.java	max	a	float	0	RET	$ > b
459	3417	8	FastMath.java	max	b	float	0	RET	a > $
460	3420	8	FastMath.java	max	a	float	0	RET	$ < b
460	3420	8	FastMath.java	max	b	float	0	RET	a < $
461	3424	8	FastMath.java	max	a	float	0	RET	$ != b
461	3424	8	FastMath.java	max	b	float	0	RET	a != $
462	3430	8	FastMath.java	max	bits	int	0	RET	$ == 0x80000000
463	3442	8	FastMath.java	max	a	double	0	RET	$ > b
463	3442	8	FastMath.java	max	b	double	0	RET	a > $
464	3445	8	FastMath.java	max	a	double	0	RET	$ < b
464	3445	8	FastMath.java	max	b	double	0	RET	a < $
465	3449	8	FastMath.java	max	a	double	0	RET	$ != b
465	3449	8	FastMath.java	max	b	double	0	RET	a != $
466	3455	8	FastMath.java	max	bits	long	0	RET	$ == 0x8000000000000000L
467	3476	8	FastMath.java	hypot	x	double	1	RET	Double.isInfinite($)
467	3476	8	FastMath.java	hypot	y	double	1	RET	Double.isInfinite($)
468	3478	15	FastMath.java	hypot	x	double	1	RET	Double.isNaN($)
468	3478	15	FastMath.java	hypot	y	double	1	RET	Double.isNaN($)
469	3484	12	FastMath.java	hypot	expX	int	1	RET	$ > expY + 27
469	3484	12	FastMath.java	hypot	expY	int	1	RET	expX > $ + 27
470	3487	19	FastMath.java	hypot	expX	int	1	RET	expY > $ + 27
470	3487	19	FastMath.java	hypot	expY	int	1	RET	$ > expX + 27
471	3545	8	FastMath.java	copySign	m	long	0	RET	$ < 0
471	3545	8	FastMath.java	copySign	m	long	0	RET	$ >= 0
471	3545	8	FastMath.java	copySign	s	long	0	RET	$ >= 0
471	3545	8	FastMath.java	copySign	s	long	0	RET	$ < 0
472	3562	8	FastMath.java	copySign	m	int	0	RET	$ < 0
472	3562	8	FastMath.java	copySign	m	int	0	RET	$ >= 0
472	3562	8	FastMath.java	copySign	s	int	0	RET	$ < 0
472	3562	8	FastMath.java	copySign	s	int	0	RET	$ >= 0
22773	108	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < 7
22774	121	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < SINE_TABLE_LEN
148	128	12	FastMathCalc.java	buildSinCosTables	i	int	1	DEF	($ & 1) == 0
22775	177	8	FastMathCalc.java	buildSinCosTables	i	int	0	NIL-FOR	$ < SINE_TABLE_LEN
22776	215	8	FastMathCalc.java	slowCos	i	int	0	NIL-FOR	$ >= 0
149	219	12	FastMathCalc.java	slowCos	i	int	0	DEF	($ & 1) != 0
150	226	12	FastMathCalc.java	slowCos	i	int	0	DEF	($ & 2) != 0
151	235	8	FastMathCalc.java	slowCos	result	double	0	DEF	$ != null
22777	259	8	FastMathCalc.java	slowSin	i	int	0	NIL-FOR	$ >= 0
152	263	12	FastMathCalc.java	slowSin	i	int	0	DEF	($ & 1) == 0
153	270	12	FastMathCalc.java	slowSin	i	int	0	DEF	($ & 2) != 0
154	279	8	FastMathCalc.java	slowSin	result	double	0	DEF	$ != null
22778	303	8	FastMathCalc.java	slowexp	i	int	0	NIL-FOR	$ >= 0
155	316	8	FastMathCalc.java	slowexp	result	double	0	DEF	$ != null
156	330	8	FastMathCalc.java	split	d	double	1	DEF	$ > -8e298
156	330	8	FastMathCalc.java	split	d	double	1	DEF	$ < 8e298
157	349	8	FastMathCalc.java	resplit	c	double	1	DEF	$ < 8e298
157	349	8	FastMathCalc.java	resplit	c	double	1	DEF	$ > -8e298
158	407	8	FastMathCalc.java	splitReciprocal	in	double	0	DEF	$[0] == 0.0
159	415	8	FastMathCalc.java	splitReciprocal	result	double	0	DEF	$[1] != $[1]
22779	422	8	FastMathCalc.java	splitReciprocal	i	int	0	NIL-FOR	$ < 2
22780	510	8	FastMathCalc.java	expint	p	int	0	NIL-WHILE	$ > 0
160	511	12	FastMathCalc.java	expint	p	int	0	DEF	($ & 1) != 0
161	522	8	FastMathCalc.java	expint	result	double	0	DEF	$ != null
22781	578	8	FastMathCalc.java	slowLog	i	int	0	NIL-FOR	$ >= 0
162	639	8	FastMathCalc.java	format	d	double	1	RET	$ != $
163	654	8	FastMathCalc.java	checkLen	expectedLen	int	0	DimensionMismatchException	$ != actual
163	654	8	FastMathCalc.java	checkLen	actual	int	0	DimensionMismatchException	expectedLen != $
2600	105	8	FastSineTransformer.java	transform	THIS	FastSineTransformer	0	RET	$.normalization == $.DstNormalization.ORTHOGONAL_DST_I
2601	109	8	FastSineTransformer.java	transform	THIS	FastSineTransformer	0	RET	type == $.TransformType.FORWARD
2601	109	8	FastSineTransformer.java	transform	type	TransformType	0	RET	$ == TransformType.FORWARD
2602	150	8	FastSineTransformer.java	fst	THIS	FastSineTransformer	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo(f.$.length)
2602	150	8	FastSineTransformer.java	fst	f	double[]	0	MathIllegalArgumentException	ArithmeticUtils.isPowerOfTwo($.length)
2603	155	8	FastSineTransformer.java	fst	f	double[]	0	MathIllegalArgumentException	$[0] != 0.0
2604	161	8	FastSineTransformer.java	fst	n	int	0	RET	$ == 1
24230	170	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
24230	170	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
24231	183	8	FastSineTransformer.java	fst	i	int	0	NIL-FOR	$ < (n >> 1)
24231	183	8	FastSineTransformer.java	fst	n	int	0	NIL-FOR	i < ($ >> 1)
1409	87	8	FieldLUDecomposition.java	FieldLUDecomposition	matrix	FieldMatrix<T>	0	NonSquareMatrixException	$.isSquare()
23348	101	8	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
23348	101	8	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
23349	108	8	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	$ < m
23349	108	8	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	col < $
23350	113	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < col
23350	113	12	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	row < $
23351	116	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < row
23351	116	16	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	i < $
23352	124	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
23352	124	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
23353	127	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < col
23353	127	16	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	NIL-FOR	i < $
1410	132	16	FieldLUDecomposition.java	FieldLUDecomposition	THIS	FieldLUDecomposition	0	DEF	$.lu[nonZero][col].equals($.field.getZero())
1410	132	16	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	DEF	lu[$][col].equals(field.getZero())
1410	132	16	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	DEF	lu[nonZero][$].equals(field.getZero())
1411	139	12	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	RET	$ >= m
1411	139	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	RET	nonZero >= $
1412	145	12	FieldLUDecomposition.java	FieldLUDecomposition	nonZero	int	0	DEF	$ != col
1412	145	12	FieldLUDecomposition.java	FieldLUDecomposition	col	int	0	DEF	nonZero != $
23354	147	16	FieldLUDecomposition.java	FieldLUDecomposition	i	int	0	NIL-FOR	$ < m
23354	147	16	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	i < $
23355	160	12	FieldLUDecomposition.java	FieldLUDecomposition	row	int	0	NIL-FOR	$ < m
23355	160	12	FieldLUDecomposition.java	FieldLUDecomposition	m	int	0	NIL-FOR	row < $
1413	174	8	FieldLUDecomposition.java	getL	THIS	FieldLUDecomposition	0	DEF	$.cachedL == null
1413	174	8	FieldLUDecomposition.java	getL	THIS	FieldLUDecomposition	0	DEF	$.singular
23356	177	12	FieldLUDecomposition.java	getL	i	int	0	NIL-FOR	$ < m
23356	177	12	FieldLUDecomposition.java	getL	m	int	0	NIL-FOR	i < $
23357	179	16	FieldLUDecomposition.java	getL	j	int	0	NIL-FOR	$ < i
23357	179	16	FieldLUDecomposition.java	getL	i	int	0	NIL-FOR	j < $
1414	194	8	FieldLUDecomposition.java	getU	THIS	FieldLUDecomposition	0	DEF	$.cachedU == null
1414	194	8	FieldLUDecomposition.java	getU	THIS	FieldLUDecomposition	0	DEF	$.singular
23358	197	12	FieldLUDecomposition.java	getU	i	int	0	NIL-FOR	$ < m
23358	197	12	FieldLUDecomposition.java	getU	m	int	0	NIL-FOR	i < $
23359	199	16	FieldLUDecomposition.java	getU	j	int	0	NIL-FOR	$ < m
23359	199	16	FieldLUDecomposition.java	getU	m	int	0	NIL-FOR	j < $
1415	217	8	FieldLUDecomposition.java	getP	THIS	FieldLUDecomposition	0	DEF	$.cachedP == null
1415	217	8	FieldLUDecomposition.java	getP	THIS	FieldLUDecomposition	0	DEF	$.singular
23360	220	12	FieldLUDecomposition.java	getP	i	int	0	NIL-FOR	$ < m
23360	220	12	FieldLUDecomposition.java	getP	m	int	0	NIL-FOR	i < $
1416	241	8	FieldLUDecomposition.java	getDeterminant	THIS	FieldLUDecomposition	1	RET	$.singular
23361	246	12	FieldLUDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < m
23361	246	12	FieldLUDecomposition.java	getDeterminant	m	int	0	NIL-FOR	i < $
2082	102	8	FirstMoment.java	increment	THIS	FirstMoment	0	DEF	$.n == 0
2560	61	8	FixedElapsedTime.java	FixedElapsedTime	maxTime	long	0	NumberIsTooSmallException	$ < 0
2561	75	8	FixedElapsedTime.java	isSatisfied	THIS	FixedElapsedTime	0	DEF	$.endTime < 0
2546	45	8	FixedGenerationCount.java	FixedGenerationCount	maxGenerations	int	0	NumberIsTooSmallException	$ <= 0
2547	60	8	FixedGenerationCount.java	isSatisfied	THIS	FixedGenerationCount	0	RET	$.numGenerations < $.maxGenerations
2060	88	8	FourthMoment.java	increment	THIS	FourthMoment	0	DEF	$.n < 1
904	181	8	Fraction.java	Fraction	overflow	long	0	FractionConversionException	a0 > $
904	181	8	Fraction.java	Fraction	a0	long	0	FractionConversionException	$ > overflow
905	187	8	Fraction.java	Fraction	a0	long	0	RET	FastMath.abs($ - value) < epsilon
905	187	8	Fraction.java	Fraction	value	double	0	RET	FastMath.abs(a0 - $) < epsilon
905	187	8	Fraction.java	Fraction	epsilon	double	0	RET	FastMath.abs(a0 - value) < $
22833	203	8	Fraction.java	Fraction	stop	boolean	0	NIL-DOWHILE	$
906	209	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	p2 > $
906	209	12	Fraction.java	Fraction	overflow	long	0	FractionConversionException	q2 > $
906	209	12	Fraction.java	Fraction	p2	long	0	FractionConversionException	$ > overflow
906	209	12	Fraction.java	Fraction	q2	long	0	FractionConversionException	$ > overflow
907	214	12	Fraction.java	Fraction	convergent	double	1	DEF	FastMath.abs($ - value) > epsilon
907	214	12	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
907	214	12	Fraction.java	Fraction	n	int	1	DEF	$ < maxIterations
907	214	12	Fraction.java	Fraction	value	double	1	DEF	FastMath.abs(convergent - $) > epsilon
907	214	12	Fraction.java	Fraction	epsilon	double	1	DEF	FastMath.abs(convergent - value) > $
907	214	12	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
907	214	12	Fraction.java	Fraction	maxIterations	int	1	DEF	n < $
908	226	8	Fraction.java	Fraction	n	int	0	FractionConversionException	$ >= maxIterations
908	226	8	Fraction.java	Fraction	maxIterations	int	0	FractionConversionException	n >= $
909	230	8	Fraction.java	Fraction	q2	long	1	DEF	$ < maxDenominator
909	230	8	Fraction.java	Fraction	maxDenominator	int	1	DEF	q2 < $
910	257	8	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == 0
911	261	8	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ < 0
912	262	12	Fraction.java	Fraction	num	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
912	262	12	Fraction.java	Fraction	den	int	0	MathArithmeticException	$ == Integer.MIN_VALUE
913	272	8	Fraction.java	Fraction	d	int	0	DEF	$ > 1
914	278	8	Fraction.java	Fraction	den	int	0	DEF	$ < 0
915	292	8	Fraction.java	abs	THIS	Fraction	1	DEF	$.numerator >= 0
916	333	8	Fraction.java	equals	THIS	Fraction	0	RET	$ == other
916	333	8	Fraction.java	equals	other	Object	0	RET	this == $
917	336	8	Fraction.java	equals	other	Object	0	RET	$ instanceof Fraction
918	406	8	Fraction.java	negate	THIS	Fraction	0	MathArithmeticException	$.numerator==Integer.MIN_VALUE
919	477	8	Fraction.java	addSub	fraction	Fraction	0	NullArgumentException	$ == null
920	481	8	Fraction.java	addSub	THIS	Fraction	0	RET	$.numerator == 0
921	484	8	Fraction.java	addSub	THIS	Fraction	0	RET	fraction.$.numerator == 0
921	484	8	Fraction.java	addSub	fraction	Fraction	0	RET	$.numerator == 0
922	490	8	Fraction.java	addSub	d1	int	0	RET	$==1
923	514	8	Fraction.java	addSub	w	BigInteger	0	MathArithmeticException	$.bitLength() > 31
924	534	8	Fraction.java	multiply	fraction	Fraction	0	NullArgumentException	$ == null
925	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	$.numerator == 0
925	537	8	Fraction.java	multiply	THIS	Fraction	0	RET	fraction.$.numerator == 0
925	537	8	Fraction.java	multiply	fraction	Fraction	0	RET	$.numerator == 0
926	569	8	Fraction.java	divide	fraction	Fraction	0	NullArgumentException	$ == null
927	572	8	Fraction.java	divide	THIS	Fraction	0	MathArithmeticException	fraction.$.numerator == 0
927	572	8	Fraction.java	divide	fraction	Fraction	0	MathArithmeticException	$.numerator == 0
928	612	8	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ == 0
929	616	8	Fraction.java	getReducedFraction	numerator	int	0	RET	$==0
930	620	8	Fraction.java	getReducedFraction	numerator	int	0	DEF	($&1)==0
930	620	8	Fraction.java	getReducedFraction	denominator	int	0	DEF	$==Integer.MIN_VALUE
931	623	8	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$ < 0
932	624	12	Fraction.java	getReducedFraction	numerator	int	0	MathArithmeticException	$==Integer.MIN_VALUE
932	624	12	Fraction.java	getReducedFraction	denominator	int	0	MathArithmeticException	$==Integer.MIN_VALUE
933	651	8	Fraction.java	toString	THIS	Fraction	1	DEF	$.denominator == 1
934	653	15	Fraction.java	toString	THIS	Fraction	1	DEF	$.numerator == 0
888	177	8	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Fraction
889	179	15	FractionFormat.java	format	obj	Object	1	DEF	$ instanceof Number
890	199	8	FractionFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
891	221	8	FractionFormat.java	parse	num	Number	0	RET	$ == null
892	254	8	FractionFormat.java	parse	den	Number	0	RET	$ == null
24075	86	8	Frequency.java	toString	iter	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
2260	112	8	Frequency.java	addValue	v	Comparable<?>	0	DEF	$ instanceof Integer
2261	117	12	Frequency.java	addValue	count	Long	1	DEF	$ == null
24076	185	8	Frequency.java	getSumFreq	iterator	Iterator<Long>	0	NIL-WHILE	$.hasNext()
2262	199	8	Frequency.java	getCount	v	Comparable<?>	0	RET	$ instanceof Integer
2263	205	12	Frequency.java	getCount	count	Long	0	DEF	$ != null
2264	265	8	Frequency.java	getPct	sumFreq	long	0	RET	$ == 0
2265	315	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	$.getSumFreq() == 0
2266	318	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	$ instanceof Integer
2267	323	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	DEF	$ == null
2268	330	12	Frequency.java	getCumFreq	value	Long	0	DEF	$ != null
2269	337	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.firstKey()) < 0
2269	337	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.firstKey()) < 0
2269	337	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.firstKey()) < 0
2270	341	8	Frequency.java	getCumFreq	THIS	Frequency	0	RET	c.compare(v, $.freqTable.lastKey()) >= 0
2270	341	8	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	0	RET	$.compare(v, freqTable.lastKey()) >= 0
2270	341	8	Frequency.java	getCumFreq	v	Comparable<?>	0	RET	c.compare($, freqTable.lastKey()) >= 0
24077	346	8	Frequency.java	getCumFreq	values	Iterator<Comparable<?>>	0	NIL-WHILE	$.hasNext()
2271	348	12	Frequency.java	getCumFreq	nextValue	Comparable<?>	1	DEF	c.compare(v, $) > 0
2271	348	12	Frequency.java	getCumFreq	c	Comparator<Comparable<?>>	1	DEF	$.compare(v, nextValue) > 0
2271	348	12	Frequency.java	getCumFreq	v	Comparable<?>	1	DEF	c.compare($, nextValue) > 0
2272	408	8	Frequency.java	getCumPct	sumFreq	long	0	RET	$ == 0
2273	494	8	Frequency.java	equals	THIS	Frequency	0	RET	$ == obj
2273	494	8	Frequency.java	equals	obj	Object	0	RET	this == $
2274	497	8	Frequency.java	equals	obj	Object	0	RET	$ instanceof Frequency
2275	501	8	Frequency.java	equals	THIS	Frequency	1	RET	$.freqTable == null
2276	502	12	Frequency.java	equals	THIS	Frequency	0	RET	other.$.freqTable != null
2276	502	12	Frequency.java	equals	other	Frequency	0	RET	$.freqTable != null
2277	505	15	Frequency.java	equals	THIS	Frequency	0	RET	$.freqTable.equals(other.$.freqTable)
2277	505	15	Frequency.java	equals	other	Frequency	0	RET	freqTable.equals($.freqTable)
3335	320	8	FunctionUtils.java	sample	n	int	0	NotStrictlyPositiveException	$ <= 0
3336	325	8	FunctionUtils.java	sample	min	double	0	NumberIsTooLargeException	$ >= max
3336	325	8	FunctionUtils.java	sample	max	double	0	NumberIsTooLargeException	min >= $
24559	331	8	FunctionUtils.java	sample	i	int	0	NIL-FOR	$ < n
24559	331	8	FunctionUtils.java	sample	n	int	0	NIL-FOR	i < $
2282	80	8	GLSMultipleLinearRegression.java	getOmegaInverse	THIS	GLSMultipleLinearRegression	0	DEF	$.OmegaInverse == null
2571	95	8	Gamma.java	logGamma	x	double	1	DEF	Double.isNaN($)
2571	95	8	Gamma.java	logGamma	x	double	1	DEF	$ <= 0.0
2572	154	8	Gamma.java	regularizedGammaP	a	double	1	DEF	Double.isNaN($)
2572	154	8	Gamma.java	regularizedGammaP	a	double	1	DEF	$ <= 0.0
2572	154	8	Gamma.java	regularizedGammaP	x	double	1	DEF	Double.isNaN($)
2572	154	8	Gamma.java	regularizedGammaP	x	double	1	DEF	$ < 0.0
2573	156	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ == 0.0
2574	158	15	Gamma.java	regularizedGammaP	a	double	1	DEF	x >= $ + 1
2574	158	15	Gamma.java	regularizedGammaP	x	double	1	DEF	$ >= a + 1
24210	167	12	Gamma.java	regularizedGammaP	n	double	0	NIL-WHILE	$ < maxIterations
24210	167	12	Gamma.java	regularizedGammaP	an	double	0	NIL-WHILE	FastMath.abs($/sum) > epsilon
24210	167	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	FastMath.abs(an/$) > epsilon
24210	167	12	Gamma.java	regularizedGammaP	sum	double	0	NIL-WHILE	$ < Double.POSITIVE_INFINITY
24210	167	12	Gamma.java	regularizedGammaP	epsilon	double	0	NIL-WHILE	FastMath.abs(an/sum) > $
24210	167	12	Gamma.java	regularizedGammaP	maxIterations	int	0	NIL-WHILE	n < $
2575	177	12	Gamma.java	regularizedGammaP	n	double	1	MaxCountExceededException	$ >= maxIterations
2575	177	12	Gamma.java	regularizedGammaP	maxIterations	int	1	MaxCountExceededException	n >= $
2576	179	19	Gamma.java	regularizedGammaP	sum	double	1	DEF	Double.isInfinite($)
2577	232	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	Double.isNaN($)
2577	232	8	Gamma.java	regularizedGammaQ	a	double	1	DEF	$ <= 0.0
2577	232	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	Double.isNaN($)
2577	232	8	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < 0.0
2578	234	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ == 0.0
2579	236	15	Gamma.java	regularizedGammaQ	a	double	1	DEF	x < $ + 1.0
2579	236	15	Gamma.java	regularizedGammaQ	x	double	1	DEF	$ < a + 1.0
2580	284	8	Gamma.java	digamma	x	double	0	RET	$ <= S_LIMIT
2580	284	8	Gamma.java	digamma	x	double	0	RET	$ > 0
2581	290	8	Gamma.java	digamma	x	double	0	RET	$ >= C_LIMIT
2582	314	8	Gamma.java	trigamma	x	double	0	RET	$ > 0
2582	314	8	Gamma.java	trigamma	x	double	0	RET	$ <= S_LIMIT
2583	318	8	Gamma.java	trigamma	x	double	0	RET	$ >= C_LIMIT
24211	351	8	Gamma.java	lanczos	i	int	0	NIL-FOR	$ > 0
1055	132	8	GammaDistribution.java	GammaDistribution	shape	double	0	NotStrictlyPositiveException	$ <= 0
1056	135	8	GammaDistribution.java	GammaDistribution	scale	double	0	NotStrictlyPositiveException	$ <= 0
1057	243	8	GammaDistribution.java	density	x	double	0	RET	$ < 0
1058	247	8	GammaDistribution.java	density	THIS	GammaDistribution	0	RET	y <= $.minY
1058	247	8	GammaDistribution.java	density	THIS	GammaDistribution	0	RET	FastMath.log(y) >= $.maxLogY
1058	247	8	GammaDistribution.java	density	y	double	0	RET	$ <= minY
1058	247	8	GammaDistribution.java	density	y	double	0	RET	FastMath.log($) >= maxLogY
1059	281	8	GammaDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0
1060	379	8	GammaDistribution.java	sample	THIS	GammaDistribution	0	RET	$.shape < 1
1061	388	16	GammaDistribution.java	sample	p	double	1	RET	$ <= 1
1062	394	20	GammaDistribution.java	sample	x	double	1	DEF	u2 > FastMath.exp(-$)
1062	394	20	GammaDistribution.java	sample	u2	double	1	DEF	$ > FastMath.exp(-x)
1063	406	20	GammaDistribution.java	sample	THIS	GammaDistribution	1	DEF	u2 > FastMath.pow(x, $.shape - 1)
1063	406	20	GammaDistribution.java	sample	x	double	1	DEF	u2 > FastMath.pow($, shape - 1)
1063	406	20	GammaDistribution.java	sample	u2	double	1	DEF	$ > FastMath.pow(x, shape - 1)
1064	425	12	GammaDistribution.java	sample	v	double	0	DEF	$ <= 0
1065	433	12	GammaDistribution.java	sample	x2	double	0	RET	u < 1 - 0.0331 * $ * $
1065	433	12	GammaDistribution.java	sample	u	double	0	RET	$ < 1 - 0.0331 * x2 * x2
1066	437	12	GammaDistribution.java	sample	v	double	0	RET	FastMath.log(u) < 0.5 * x2 + d * (1 - $ + FastMath.log($))
1066	437	12	GammaDistribution.java	sample	x2	double	0	RET	FastMath.log(u) < 0.5 * $ + d * (1 - v + FastMath.log(v))
1066	437	12	GammaDistribution.java	sample	u	double	0	RET	FastMath.log($) < 0.5 * x2 + d * (1 - v + FastMath.log(v))
1066	437	12	GammaDistribution.java	sample	d	double	0	RET	FastMath.log(u) < 0.5 * x2 + $ * (1 - v + FastMath.log(v))
3382	50	8	GaussIntegrator.java	GaussIntegrator	THIS	GaussIntegrator	0	DimensionMismatchException	points.$.length != weights.$.length
3382	50	8	GaussIntegrator.java	GaussIntegrator	points	double[]	0	DimensionMismatchException	$.length != weights.length
3382	50	8	GaussIntegrator.java	GaussIntegrator	weights	double[]	0	DimensionMismatchException	points.length != $.length
24597	88	8	GaussIntegrator.java	integrate	THIS	GaussIntegrator	0	NIL-FOR	i < $.points.$.length
24597	88	8	GaussIntegrator.java	integrate	i	int	0	NIL-FOR	$ < points.length
24604	126	8	GaussIntegratorFactory.java	transform	THIS	GaussIntegratorFactory	0	NIL-FOR	i < points.$.length
24604	126	8	GaussIntegratorFactory.java	transform	i	int	0	NIL-FOR	$ < points.length
24604	126	8	GaussIntegratorFactory.java	transform	points	double[]	0	NIL-FOR	i < $.length
23755	110	8	GaussNewtonOptimizer.java	doOptimize	converged	boolean	0	NIL-FOR	$
23756	125	12	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.rows
23756	125	12	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < rows
23757	133	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	j < $.cols
23757	133	16	GaussNewtonOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
23758	138	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	k < $.cols
23758	138	16	GaussNewtonOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
23759	141	20	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	l < $.cols
23759	141	20	GaussNewtonOptimizer.java	doOptimize	l	int	0	NIL-FOR	$ < cols
23760	155	16	GaussNewtonOptimizer.java	doOptimize	THIS	GaussNewtonOptimizer	0	NIL-FOR	i < $.cols
23760	155	16	GaussNewtonOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < cols
1744	163	12	GaussNewtonOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	DEF	$ != null
1745	164	16	GaussNewtonOptimizer.java	doOptimize	previous	PointVectorValuePair	0	DEF	$ != null
3229	54	8	Gaussian.java	Gaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
2541	74	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	OutOfRangeException	$ < 0
2541	74	8	GeneticAlgorithm.java	GeneticAlgorithm	crossoverRate	double	0	OutOfRangeException	$ > 1
2542	78	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	OutOfRangeException	$ > 1
2542	78	8	GeneticAlgorithm.java	GeneticAlgorithm	mutationRate	double	0	OutOfRangeException	$ < 0
24198	120	8	GeneticAlgorithm.java	evolve	current	Population	0	NIL-WHILE	condition.isSatisfied($)
24198	120	8	GeneticAlgorithm.java	evolve	condition	StoppingCondition	0	NIL-WHILE	$.isSatisfied(current)
24199	154	8	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	NIL-WHILE	$.getPopulationSize() < $.getPopulationLimit()
2543	159	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getCrossoverRate()
2543	159	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getCrossoverRate()
2544	165	12	GeneticAlgorithm.java	nextGeneration	THIS	GeneticAlgorithm	0	DEF	randGen.nextDouble() < $.getMutationRate()
2544	165	12	GeneticAlgorithm.java	nextGeneration	randGen	RandomGenerator	0	DEF	$.nextDouble() < getMutationRate()
2545	175	12	GeneticAlgorithm.java	nextGeneration	nextGeneration	Population	0	DEF	$.getPopulationSize() < $.getPopulationLimit()
2080	111	8	GeometricMean.java	getResult	THIS	GeometricMean	1	RET	$.sumOfLogs.getN() > 0
2081	203	8	GeometricMean.java	checkEmpty	THIS	GeometricMean	0	MathIllegalStateException	$.getN() > 0
2705	111	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	1	DEF	$.previousState != null
2705	111	4	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
24310	118	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
24310	118	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
24311	135	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GillStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
24311	135	8	GillStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2646	226	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ > 0.9999
2646	226	4	GraggBulirschStoerIntegrator.java	setStabilityCheck	stepsizeReductionFactor	double	1	DEF	$ < 0.0001
2647	261	4	GraggBulirschStoerIntegrator.java	setControlFactors	control1	double	1	DEF	$ > 0.9999
2647	261	4	GraggBulirschStoerIntegrator.java	setControlFactors	control1	double	1	DEF	$ < 0.0001
2648	267	4	GraggBulirschStoerIntegrator.java	setControlFactors	control2	double	1	DEF	$ < 0.0001
2648	267	4	GraggBulirschStoerIntegrator.java	setControlFactors	control2	double	1	DEF	$ > 0.9999
2649	273	4	GraggBulirschStoerIntegrator.java	setControlFactors	control3	double	1	DEF	$ > 0.9999
2649	273	4	GraggBulirschStoerIntegrator.java	setControlFactors	control3	double	1	DEF	$ < 0.0001
2650	279	4	GraggBulirschStoerIntegrator.java	setControlFactors	control4	double	1	DEF	$ > 999.9
2650	279	4	GraggBulirschStoerIntegrator.java	setControlFactors	control4	double	1	DEF	$ < 1.0001
2651	313	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ % 2 != 0
2651	313	4	GraggBulirschStoerIntegrator.java	setOrderControl	maximalOrder	int	0	DEF	$ <= 6
2652	317	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ < 0.0001
2652	317	4	GraggBulirschStoerIntegrator.java	setOrderControl	control1	double	1	DEF	$ > 0.9999
2653	323	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ < 0.0001
2653	323	4	GraggBulirschStoerIntegrator.java	setOrderControl	control2	double	1	DEF	$ > 0.9999
2654	365	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence.$.length != size
2654	365	4	GraggBulirschStoerIntegrator.java	initializeArrays	THIS	GraggBulirschStoerIntegrator	0	DEF	$.sequence == null
2654	365	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	DEF	sequence.length != $
24270	375	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
24270	375	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
24271	382	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
24271	382	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
24272	387	4	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	$ < size
24272	387	4	GraggBulirschStoerIntegrator.java	initializeArrays	size	int	0	NIL-FOR	k < $
24273	389	6	GraggBulirschStoerIntegrator.java	initializeArrays	l	int	0	NIL-FOR	$ < k
24273	389	6	GraggBulirschStoerIntegrator.java	initializeArrays	k	int	0	NIL-FOR	l < $
2655	412	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ >= 7
2655	412	4	GraggBulirschStoerIntegrator.java	setInterpolationControl	mudifControlParameter	int	1	DEF	$ <= 0
2656	426	4	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	1	DEF	$.vecAbsoluteTolerance == null
24274	427	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
24274	427	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
24274	427	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
24275	432	6	GraggBulirschStoerIntegrator.java	rescale	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < scale.$.length
24275	432	6	GraggBulirschStoerIntegrator.java	rescale	i	int	0	NIL-FOR	$ < scale.length
24275	432	6	GraggBulirschStoerIntegrator.java	rescale	scale	double[]	0	NIL-FOR	i < $.length
24276	465	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
24276	465	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
24276	465	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
24277	472	4	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	NIL-FOR	$ < n
24277	472	4	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	NIL-FOR	j < $
2657	474	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	DEF	2 * $ == n
2657	474	6	GraggBulirschStoerIntegrator.java	tryStep	n	int	0	DEF	2 * j == $
24278	480	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
24278	480	6	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
24278	480	6	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
2658	489	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	k < $.maxIter
2658	489	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	j <= $.maxChecks
2658	489	6	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	RET	$.performTest
2658	489	6	GraggBulirschStoerIntegrator.java	tryStep	j	int	0	RET	$ <= maxChecks
2658	489	6	GraggBulirschStoerIntegrator.java	tryStep	k	int	0	RET	$ < maxIter
24279	491	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
24279	491	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
24279	491	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
24280	496	8	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < scale.$.length
24280	496	8	GraggBulirschStoerIntegrator.java	tryStep	l	int	0	NIL-FOR	$ < scale.length
24280	496	8	GraggBulirschStoerIntegrator.java	tryStep	scale	double[]	0	NIL-FOR	l < $.length
2659	500	8	GraggBulirschStoerIntegrator.java	tryStep	initialNorm	double	0	RET	deltaNorm > 4 * FastMath.max(1.0e-15, $)
2659	500	8	GraggBulirschStoerIntegrator.java	tryStep	deltaNorm	double	0	RET	$ > 4 * FastMath.max(1.0e-15, initialNorm)
24281	508	4	GraggBulirschStoerIntegrator.java	tryStep	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
24281	508	4	GraggBulirschStoerIntegrator.java	tryStep	i	int	0	NIL-FOR	$ < y0.length
24281	508	4	GraggBulirschStoerIntegrator.java	tryStep	y0	double[]	0	NIL-FOR	i < $.length
24282	527	4	GraggBulirschStoerIntegrator.java	extrapolate	j	int	0	NIL-FOR	$ < k
24282	527	4	GraggBulirschStoerIntegrator.java	extrapolate	k	int	0	NIL-FOR	j < $
24283	528	6	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
24283	528	6	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
24283	528	6	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
24284	536	4	GraggBulirschStoerIntegrator.java	extrapolate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < last.$.length
24284	536	4	GraggBulirschStoerIntegrator.java	extrapolate	i	int	0	NIL-FOR	$ < last.length
24284	536	4	GraggBulirschStoerIntegrator.java	extrapolate	last	double[]	0	NIL-FOR	i < $.length
24285	561	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length-1
24285	561	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length-1
24286	567	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	k < $.sequence.$.length
24286	567	4	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	$ < sequence.length
24287	574	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	l < $.sequence[k]
24287	574	6	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < sequence[k]
24287	574	6	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	l < sequence[$]
2660	580	4	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	DEF	y != $
2660	580	4	GraggBulirschStoerIntegrator.java	integrate	y	double[]	0	DEF	$ != y0
24288	618	4	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-DOWHILE	$.isLastStep
2661	623	6	GraggBulirschStoerIntegrator.java	integrate	newStep	boolean	0	DEF	$
2662	628	8	GraggBulirschStoerIntegrator.java	integrate	firstStepAlreadyComputed	boolean	0	DEF	$
2663	632	8	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2664	644	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize > t
2664	644	6	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.stepStart + $.stepSize < t
2664	644	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2664	644	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2664	644	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize > $
2664	644	6	GraggBulirschStoerIntegrator.java	integrate	t	double	0	DEF	stepStart + stepSize < $
24289	653	6	GraggBulirschStoerIntegrator.java	integrate	loop	boolean	0	NIL-FOR	$
2665	658	8	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.tryStep($.stepStart, y, $.stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2665	658	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	tryStep(stepStart, y, stepSize, $, scale, fk[$], ($ == 0) ? yMidDots[0] : diagonal[$-1], ($ == 0) ? y1 : y1Diag[$-1], yTmp)
2665	658	8	GraggBulirschStoerIntegrator.java	integrate	y	double[]	1	DEF	tryStep(stepStart, $, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2665	658	8	GraggBulirschStoerIntegrator.java	integrate	y1	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? $ : y1Diag[k-1], yTmp)
2665	658	8	GraggBulirschStoerIntegrator.java	integrate	yTmp	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], $)
2665	658	8	GraggBulirschStoerIntegrator.java	integrate	diagonal	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : $[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2665	658	8	GraggBulirschStoerIntegrator.java	integrate	y1Diag	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : $[k-1], yTmp)
2665	658	8	GraggBulirschStoerIntegrator.java	integrate	fk	double[][][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, $[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2665	658	8	GraggBulirschStoerIntegrator.java	integrate	yMidDots	double[][]	1	DEF	tryStep(stepStart, y, stepSize, k, scale, fk[k], (k == 0) ? $[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2665	658	8	GraggBulirschStoerIntegrator.java	integrate	scale	double[]	1	DEF	tryStep(stepStart, y, stepSize, k, $, fk[k], (k == 0) ? yMidDots[0] : diagonal[k-1], (k == 0) ? y1 : y1Diag[k-1], yTmp)
2666	671	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 0
24290	680	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	j < $.mainSetDimension
24290	680	12	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ < mainSetDimension
2667	686	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > maxError
2667	686	12	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ > 1.0e15
2667	686	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ > 1
2667	686	12	GraggBulirschStoerIntegrator.java	integrate	maxError	double	1	DEF	error > $
2668	707	16	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2668	707	16	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
2669	710	18	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
2670	719	20	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
2670	719	20	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
2671	725	22	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2671	725	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2671	725	22	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2672	737	16	GraggBulirschStoerIntegrator.java	integrate	error	double	1	DEF	$ <= 1.0
2673	745	18	GraggBulirschStoerIntegrator.java	integrate	ratio	double	0	DEF	error > $ * $
2673	745	18	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > ratio * ratio
2674	750	20	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2674	750	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2674	750	20	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2675	761	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ > 1.0
2676	763	18	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[targetIter-1] < $.orderControl1 * $.costPerTimeUnit[targetIter]
2676	763	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	$ > 1
2676	763	18	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	0	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2677	774	16	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.isLastStep
2677	774	16	GraggBulirschStoerIntegrator.java	integrate	error	double	0	DEF	$ <= 1.0
2677	774	16	GraggBulirschStoerIntegrator.java	integrate	firstTime	boolean	0	DEF	$
2678	786	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
2679	793	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
24291	796	8	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
24291	796	8	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
24292	802	8	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	$ < mu
24292	802	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	NIL-FOR	l < $
24293	808	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
24293	808	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
24293	808	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
24294	811	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k - l2
24294	811	10	GraggBulirschStoerIntegrator.java	integrate	l2	int	0	NIL-FOR	j <= k - $
24294	811	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $ - l2
24295	814	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
24295	814	12	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
24295	814	12	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
24296	819	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
24296	819	10	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
24296	819	10	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
24297	824	10	GraggBulirschStoerIntegrator.java	integrate	j	int	0	NIL-FOR	$ <= k
24297	824	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	NIL-FOR	j <= $
24298	825	12	GraggBulirschStoerIntegrator.java	integrate	m	int	0	NIL-FOR	$ >= 2 * (l + 1)
24298	825	12	GraggBulirschStoerIntegrator.java	integrate	l	int	0	NIL-FOR	m >= 2 * ($ + 1)
24299	826	14	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	NIL-FOR	i < y0.$.length
24299	826	14	GraggBulirschStoerIntegrator.java	integrate	i	int	0	NIL-FOR	$ < y0.length
24299	826	14	GraggBulirschStoerIntegrator.java	integrate	y0	double[]	0	NIL-FOR	i < $.length
2680	834	8	GraggBulirschStoerIntegrator.java	integrate	mu	int	0	DEF	$ >= 0
2681	841	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.useInterpolationError
2682	846	12	GraggBulirschStoerIntegrator.java	integrate	interpError	double	0	DEF	$ > 10.0
2683	856	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	0	DEF	$
2684	869	8	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ == 1
2685	871	10	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	0	DEF	$
2686	874	15	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ <= targetIter
2686	874	15	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k <= $
2687	876	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k-1] < $.orderControl1 * $.costPerTimeUnit[k]
2687	876	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$-1] < orderControl1 * costPerTimeUnit[$]
2688	878	17	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
2688	878	17	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
2689	883	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k-2] < $.orderControl1 * $.costPerTimeUnit[k-1]
2689	883	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	$ > 2
2689	883	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$-2] < orderControl1 * costPerTimeUnit[$-1]
2690	887	10	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	0	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[optimalIter]
2690	887	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	0	DEF	costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[$]
2690	887	10	GraggBulirschStoerIntegrator.java	integrate	k	int	0	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[optimalIter]
2691	892	8	GraggBulirschStoerIntegrator.java	integrate	previousRejected	boolean	1	DEF	$
2692	899	10	GraggBulirschStoerIntegrator.java	integrate	optimalIter	int	1	DEF	$ <= k
2692	899	10	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	optimalIter <= $
2693	902	12	GraggBulirschStoerIntegrator.java	integrate	THIS	GraggBulirschStoerIntegrator	1	DEF	$.costPerTimeUnit[k] < $.orderControl2 * $.costPerTimeUnit[k-1]
2693	902	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	$ < targetIter
2693	902	12	GraggBulirschStoerIntegrator.java	integrate	k	int	1	DEF	costPerTimeUnit[$] < orderControl2 * costPerTimeUnit[$-1]
2693	902	12	GraggBulirschStoerIntegrator.java	integrate	targetIter	int	1	DEF	k < $
2694	921	6	GraggBulirschStoerIntegrator.java	integrate	forward	boolean	0	DEF	$
2695	927	6	GraggBulirschStoerIntegrator.java	integrate	reject	boolean	1	DEF	$
2721	170	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	1	DEF	interpolator.$.polynomials == null
2721	170	4	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	interpolator	GraggBulirschStoerStepInterpolator	1	DEF	$.polynomials == null
24335	175	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.polynomials.$.length
24335	175	6	GraggBulirschStoerStepInterpolator.java	GraggBulirschStoerStepInterpolator	i	int	0	NIL-FOR	$ < polynomials.length
2722	192	4	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ < 0
2723	199	6	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	1	DEF	$.polynomials != null
24336	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
24336	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
24336	201	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
24337	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < newPols.$.length
24337	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < newPols.length
24337	205	8	GraggBulirschStoerStepInterpolator.java	resetTables	newPols	double[][]	0	NIL-FOR	i < $.length
2724	212	6	GraggBulirschStoerStepInterpolator.java	resetTables	maxDegree	int	1	DEF	$ <= 4
24338	216	8	GraggBulirschStoerStepInterpolator.java	resetTables	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.errfac.$.length
24338	216	8	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	$ < errfac.length
24339	220	10	GraggBulirschStoerStepInterpolator.java	resetTables	j	int	0	NIL-FOR	$ <= i
24339	220	10	GraggBulirschStoerStepInterpolator.java	resetTables	i	int	0	NIL-FOR	j <= $
2725	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynomials == null
2725	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.polynomials.$.length <= (mu + 4)
2725	245	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	polynomials.length <= ($ + 4)
24340	251	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < $.currentState.$.length
24340	251	4	GraggBulirschStoerStepInterpolator.java	computeCoefficients	i	int	0	NIL-FOR	$ < currentState.length
2726	264	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	RET	$ < 0
2727	272	6	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 0
2728	276	8	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 1
2729	280	10	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	DEF	$ > 2
24341	284	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	j	int	0	NIL-FOR	$ <= mu
24341	284	12	GraggBulirschStoerStepInterpolator.java	computeCoefficients	mu	int	0	NIL-FOR	j <= $
2730	304	4	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree >= 5
24342	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	i < scale.$.length
24342	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	i	int	0	NIL-FOR	$ < scale.length
24342	305	6	GraggBulirschStoerStepInterpolator.java	estimateError	scale	double[]	0	NIL-FOR	i < $.length
24343	330	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < dimension
24343	330	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	dimension	int	0	NIL-FOR	i < $
2731	339	8	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.currentDegree > 3
24344	342	12	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ > 3
2732	353	4	GraggBulirschStoerStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	GraggBulirschStoerStepInterpolator	0	DEF	$.h == 0
24345	373	4	GraggBulirschStoerStepInterpolator.java	writeExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
24345	373	4	GraggBulirschStoerStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ <= currentDegree
24346	374	6	GraggBulirschStoerStepInterpolator.java	writeExternal	l	int	0	NIL-FOR	$ < dimension
24346	374	6	GraggBulirschStoerStepInterpolator.java	writeExternal	dimension	int	0	NIL-FOR	l < $
24347	395	4	GraggBulirschStoerStepInterpolator.java	readExternal	THIS	GraggBulirschStoerStepInterpolator	0	NIL-FOR	k <= $.currentDegree
24347	395	4	GraggBulirschStoerStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ <= currentDegree
24348	396	6	GraggBulirschStoerStepInterpolator.java	readExternal	l	int	0	NIL-FOR	$ < dimension
24348	396	6	GraggBulirschStoerStepInterpolator.java	readExternal	dimension	int	0	NIL-FOR	l < $
24478	91	8	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	i < value.$.length
24478	91	8	HermiteInterpolator.java	addSamplePoint	i	int	0	NIL-FOR	$ < value.length
24478	91	8	HermiteInterpolator.java	addSamplePoint	value	double[]	0	NIL-FOR	i < $.length
3165	94	12	HermiteInterpolator.java	addSamplePoint	i	int	0	DEF	$ > 1
24479	96	16	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	j < y.$.length
24479	96	16	HermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < y.length
24479	96	16	HermiteInterpolator.java	addSamplePoint	y	double[]	0	NIL-FOR	j < $.length
24480	105	12	HermiteInterpolator.java	addSamplePoint	j	int	0	NIL-FOR	$ < n
24480	105	12	HermiteInterpolator.java	addSamplePoint	n	int	0	NIL-FOR	j < $
3166	108	16	HermiteInterpolator.java	addSamplePoint	inv	double	0	MathIllegalArgumentException	Double.isInfinite($)
24481	112	16	HermiteInterpolator.java	addSamplePoint	THIS	HermiteInterpolator	0	NIL-FOR	k < y.$.length
24481	112	16	HermiteInterpolator.java	addSamplePoint	k	int	0	NIL-FOR	$ < y.length
24481	112	16	HermiteInterpolator.java	addSamplePoint	y	double[]	0	NIL-FOR	k < $.length
24482	141	8	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	i < polynomials.$.length
24482	141	8	HermiteInterpolator.java	getPolynomials	i	int	0	NIL-FOR	$ < polynomials.length
24482	141	8	HermiteInterpolator.java	getPolynomials	polynomials	PolynomialFunction[]	0	NIL-FOR	i < $.length
24483	147	8	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
24483	147	8	HermiteInterpolator.java	getPolynomials	i	int	0	NIL-FOR	$ < topDiagonal.size()
24484	149	12	HermiteInterpolator.java	getPolynomials	THIS	HermiteInterpolator	0	NIL-FOR	k < polynomials.$.length
24484	149	12	HermiteInterpolator.java	getPolynomials	k	int	0	NIL-FOR	$ < polynomials.length
24484	149	12	HermiteInterpolator.java	getPolynomials	polynomials	PolynomialFunction[]	0	NIL-FOR	k < $.length
24485	178	8	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
24485	178	8	HermiteInterpolator.java	value	i	int	0	NIL-FOR	$ < topDiagonal.size()
24486	180	12	HermiteInterpolator.java	value	THIS	HermiteInterpolator	0	NIL-FOR	k < value.$.length
24486	180	12	HermiteInterpolator.java	value	k	int	0	NIL-FOR	$ < value.length
24486	180	12	HermiteInterpolator.java	value	value	double[]	0	NIL-FOR	k < $.length
24487	211	8	HermiteInterpolator.java	derivative	THIS	HermiteInterpolator	0	NIL-FOR	i < $.topDiagonal.size()
24487	211	8	HermiteInterpolator.java	derivative	i	int	0	NIL-FOR	$ < topDiagonal.size()
24488	213	12	HermiteInterpolator.java	derivative	THIS	HermiteInterpolator	0	NIL-FOR	k < derivative.$.length
24488	213	12	HermiteInterpolator.java	derivative	k	int	0	NIL-FOR	$ < derivative.length
24488	213	12	HermiteInterpolator.java	derivative	derivative	double[]	0	NIL-FOR	k < $.length
3167	242	8	HermiteInterpolator.java	checkInterpolation	THIS	HermiteInterpolator	0	MathIllegalStateException	$.abscissae.isEmpty()
1187	61	8	HessenbergTransformer.java	HessenbergTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1188	84	8	HessenbergTransformer.java	getP	THIS	HessenbergTransformer	0	DEF	$.cachedP == null
23038	89	12	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ < n
23038	89	12	HessenbergTransformer.java	getP	n	int	0	NIL-FOR	i < $
23039	90	16	HessenbergTransformer.java	getP	j	int	0	NIL-FOR	$ < n
23039	90	16	HessenbergTransformer.java	getP	n	int	0	NIL-FOR	j < $
23040	95	12	HessenbergTransformer.java	getP	m	int	0	NIL-FOR	$ >= 1
1189	96	16	HessenbergTransformer.java	getP	THIS	HessenbergTransformer	0	DEF	$.householderVectors[m][m - 1] != 0.0
1189	96	16	HessenbergTransformer.java	getP	m	int	0	DEF	householderVectors[$][$ - 1] != 0.0
23041	97	20	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
23041	97	20	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
23042	101	20	HessenbergTransformer.java	getP	j	int	0	NIL-FOR	$ <= high
23042	101	20	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	j <= $
23043	104	24	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
23043	104	24	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
23044	111	24	HessenbergTransformer.java	getP	i	int	0	NIL-FOR	$ <= high
23044	111	24	HessenbergTransformer.java	getP	high	int	0	NIL-FOR	i <= $
1190	130	8	HessenbergTransformer.java	getPT	THIS	HessenbergTransformer	0	DEF	$.cachedPt == null
1191	144	8	HessenbergTransformer.java	getH	THIS	HessenbergTransformer	0	DEF	$.cachedH == null
23045	147	12	HessenbergTransformer.java	getH	i	int	0	NIL-FOR	$ < m
23045	147	12	HessenbergTransformer.java	getH	m	int	0	NIL-FOR	i < $
1192	148	16	HessenbergTransformer.java	getH	i	int	0	DEF	$ > 0
23046	154	16	HessenbergTransformer.java	getH	j	int	0	NIL-FOR	$ < m
23046	154	16	HessenbergTransformer.java	getH	m	int	0	NIL-FOR	j < $
23047	184	8	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	$ <= high - 1
23047	184	8	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	m <= $ - 1
23048	187	12	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
23048	187	12	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
1193	191	12	HessenbergTransformer.java	transform	scale	double	0	DEF	Precision.equals($, 0)
23049	194	16	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ >= m
23049	194	16	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	i >= $
23050	206	16	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ < n
23050	206	16	HessenbergTransformer.java	transform	n	int	0	NIL-FOR	j < $
23051	208	20	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ >= m
23051	208	20	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	i >= $
23052	212	20	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
23052	212	20	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
23053	217	16	HessenbergTransformer.java	transform	i	int	0	NIL-FOR	$ <= high
23053	217	16	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	i <= $
23054	219	20	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ >= m
23054	219	20	HessenbergTransformer.java	transform	m	int	0	NIL-FOR	j >= $
23055	223	20	HessenbergTransformer.java	transform	j	int	0	NIL-FOR	$ <= high
23055	223	20	HessenbergTransformer.java	transform	high	int	0	NIL-FOR	j <= $
24378	117	4	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	j < $.mainSetDimension
24378	117	4	HighamHall54Integrator.java	estimateError	j	int	0	NIL-FOR	$ < mainSetDimension
24379	119	6	HighamHall54Integrator.java	estimateError	THIS	HighamHall54Integrator	0	NIL-FOR	l < STATIC_E.$.length
24379	119	6	HighamHall54Integrator.java	estimateError	l	int	0	NIL-FOR	$ < STATIC_E.length
2752	80	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	1	DEF	$.previousState != null
2752	80	4	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
24376	87	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
24376	87	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
24377	105	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	HighamHall54StepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
24377	105	8	HighamHall54StepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
960	86	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NotStrictlyPositiveException	$ <= 0
961	90	8	HypergeometricDistribution.java	HypergeometricDistribution	numberOfSuccesses	int	0	NotPositiveException	$ < 0
962	94	8	HypergeometricDistribution.java	HypergeometricDistribution	sampleSize	int	0	NotPositiveException	$ < 0
963	99	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NumberIsTooLargeException	numberOfSuccesses > $
963	99	8	HypergeometricDistribution.java	HypergeometricDistribution	numberOfSuccesses	int	0	NumberIsTooLargeException	$ > populationSize
964	103	8	HypergeometricDistribution.java	HypergeometricDistribution	populationSize	int	0	NumberIsTooLargeException	sampleSize > $
964	103	8	HypergeometricDistribution.java	HypergeometricDistribution	sampleSize	int	0	NumberIsTooLargeException	$ > populationSize
965	118	8	HypergeometricDistribution.java	cumulativeProbability	domain	int[]	1	DEF	x < $[0]
965	118	8	HypergeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ < domain[0]
966	120	15	HypergeometricDistribution.java	cumulativeProbability	domain	int[]	1	DEF	x >= $[1]
966	120	15	HypergeometricDistribution.java	cumulativeProbability	x	int	1	DEF	$ >= domain[1]
967	199	8	HypergeometricDistribution.java	probability	domain	int[]	1	DEF	x < $[0]
967	199	8	HypergeometricDistribution.java	probability	domain	int[]	1	DEF	x > $[1]
967	199	8	HypergeometricDistribution.java	probability	x	int	1	DEF	$ < domain[0]
967	199	8	HypergeometricDistribution.java	probability	x	int	1	DEF	$ > domain[1]
968	228	8	HypergeometricDistribution.java	upperCumulativeProbability	domain	int[]	1	DEF	x <= $[0]
968	228	8	HypergeometricDistribution.java	upperCumulativeProbability	x	int	1	DEF	$ <= domain[0]
969	230	15	HypergeometricDistribution.java	upperCumulativeProbability	domain	int[]	1	DEF	x > $[1]
969	230	15	HypergeometricDistribution.java	upperCumulativeProbability	x	int	1	DEF	$ > domain[1]
22836	254	8	HypergeometricDistribution.java	innerCumulativeProbability	x0	int	0	NIL-WHILE	$ != x1
22836	254	8	HypergeometricDistribution.java	innerCumulativeProbability	x1	int	0	NIL-WHILE	x0 != $
970	279	8	HypergeometricDistribution.java	getNumericalVariance	THIS	HypergeometricDistribution	0	DEF	$.numericalVarianceIsCalculated
2431	121	8	ISAACRandom.java	setSeed	seed	int[]	0	RET	$ == null
2432	128	8	ISAACRandom.java	setSeed	seedLen	int	0	DEF	$ < rslLen
2432	128	8	ISAACRandom.java	setSeed	rslLen	int	0	DEF	seedLen < $
24151	129	12	ISAACRandom.java	setSeed	j	int	0	NIL-FOR	$ < rslLen
24151	129	12	ISAACRandom.java	setSeed	rslLen	int	0	NIL-FOR	j < $
2433	140	8	ISAACRandom.java	next	THIS	ISAACRandom	0	DEF	$.count < 0
24152	152	8	ISAACRandom.java	isaac	THIS	ISAACRandom	0	NIL-WHILE	$.isaacI < H_SIZE
24153	156	8	ISAACRandom.java	isaac	THIS	ISAACRandom	0	NIL-WHILE	$.isaacJ < H_SIZE
24154	193	8	ISAACRandom.java	initState	THIS	ISAACRandom	0	NIL-FOR	j < $.arr.$.length
24154	193	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < arr.length
24155	196	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < 4
24156	200	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < SIZE
24157	213	8	ISAACRandom.java	initState	j	int	0	NIL-FOR	$ < SIZE
164	81	8	Incrementor.java	Incrementor	cb	MaxCountExceededCallback	0	NullArgumentException	$ == null
22782	136	8	Incrementor.java	incrementCount	i	int	0	NIL-FOR	$ < value
22782	136	8	Incrementor.java	incrementCount	value	int	0	NIL-FOR	i < $
165	155	8	Incrementor.java	incrementCount	THIS	Incrementor	0	DEF	++$.count > $.maximalCount
709	94	8	IntervalsSet.java	buildTree	lower	double	0	RET	$ < 0
709	94	8	IntervalsSet.java	buildTree	lower	double	0	RET	Double.isInfinite($)
710	95	12	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
710	95	12	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
711	109	8	IntervalsSet.java	buildTree	upper	double	0	RET	Double.isInfinite($)
711	109	8	IntervalsSet.java	buildTree	upper	double	0	RET	$ > 0
712	139	8	IntervalsSet.java	computeGeometricalProperties	THIS	IntervalsSet	1	DEF	$.getTree(false).getCut() == null
713	150	12	IntervalsSet.java	computeGeometricalProperties	size	double	1	DEF	Double.isInfinite($)
714	152	19	IntervalsSet.java	computeGeometricalProperties	size	double	1	DEF	$ >= Precision.SAFE_MIN
22818	169	8	IntervalsSet.java	getInf	node	BSPTree<Euclidean1D>	0	NIL-WHILE	$.getCut() != null
22819	186	8	IntervalsSet.java	getSup	node	BSPTree<Euclidean1D>	0	NIL-WHILE	$.getCut() != null
715	224	8	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	1	DEF	$.getCut() == null
716	225	12	IntervalsSet.java	recurseList	node	BSPTree<Euclidean1D>	0	DEF	(Boolean) $.getAttribute()
717	241	12	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(low, loc) == $.Location.INSIDE
717	241	12	IntervalsSet.java	recurseList	THIS	IntervalsSet	0	DEF	$.checkPoint(high, loc) == $.Location.INSIDE
717	241	12	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(low, $) == Location.INSIDE
717	241	12	IntervalsSet.java	recurseList	loc	Vector1D	0	DEF	checkPoint(high, $) == Location.INSIDE
717	241	12	IntervalsSet.java	recurseList	low	BSPTree<Euclidean1D>	0	DEF	checkPoint($, loc) == Location.INSIDE
717	241	12	IntervalsSet.java	recurseList	high	BSPTree<Euclidean1D>	0	DEF	checkPoint($, loc) == Location.INSIDE
3390	120	12	IterativeLegendreGaussIntegrator.java	doIntegrate	THIS	IterativeLegendreGaussIntegrator	0	RET	$.iterations.getCount() + 1 >= $.getMinimalIterationCount()
3390	120	12	IterativeLegendreGaussIntegrator.java	doIntegrate	delta	double	0	RET	$ <= limit
3390	120	12	IterativeLegendreGaussIntegrator.java	doIntegrate	limit	double	0	RET	delta <= $
24605	155	8	IterativeLegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
24605	155	8	IterativeLegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
1156	81	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	NonSquareOperatorException	$.getRowDimension() != $.getColumnDimension()
1157	85	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	b.getDimension() != $.getRowDimension()
1157	85	8	IterativeLinearSolver.java	checkParameters	b	RealVector	0	DimensionMismatchException	$.getDimension() != a.getRowDimension()
1158	89	8	IterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	x0.getDimension() != $.getColumnDimension()
1158	89	8	IterativeLinearSolver.java	checkParameters	x0	RealVector	0	DimensionMismatchException	$.getDimension() != a.getColumnDimension()
1129	62	8	JacobiPreconditioner.java	create	n	int	0	NonSquareOperatorException	a.getRowDimension() != $
1129	62	8	JacobiPreconditioner.java	create	a	RealLinearOperator	0	NonSquareOperatorException	$.getRowDimension() != n
1130	66	8	JacobiPreconditioner.java	create	a	RealLinearOperator	1	DEF	$ instanceof AbstractRealMatrix
22980	68	12	JacobiPreconditioner.java	create	i	int	0	NIL-FOR	$ < n
22980	68	12	JacobiPreconditioner.java	create	n	int	0	NIL-FOR	i < $
22981	73	12	JacobiPreconditioner.java	create	i	int	0	NIL-FOR	$ < n
22981	73	12	JacobiPreconditioner.java	create	n	int	0	NIL-FOR	i < $
2773	133	8	JacobianMatrices.java	JacobianMatrices	parameters	String	1	DEF	$ == null
24382	138	12	JacobianMatrices.java	JacobianMatrices	THIS	JacobianMatrices	0	NIL-FOR	i < parameters.$.length
24382	138	12	JacobianMatrices.java	JacobianMatrices	i	int	0	NIL-FOR	$ < parameters.length
24382	138	12	JacobianMatrices.java	JacobianMatrices	parameters	String	0	NIL-FOR	i < $.length
24383	150	8	JacobianMatrices.java	JacobianMatrices	THIS	JacobianMatrices	0	NIL-FOR	i < $.stateDim
24383	150	8	JacobianMatrices.java	JacobianMatrices	i	int	0	NIL-FOR	$ < stateDim
2774	169	8	JacobianMatrices.java	registerVariationalEquations	ode	FirstOrderDifferentialEquations	0	MathIllegalArgumentException	expandable.getPrimary() != $
2774	169	8	JacobianMatrices.java	registerVariationalEquations	expandable	ExpandableStatefulODE	0	MathIllegalArgumentException	$.getPrimary() != ode
2775	214	12	JacobianMatrices.java	setParameterStep	THIS	JacobianMatrices	0	RET	parameter.equals($.param.getParameterName())
2775	214	12	JacobianMatrices.java	setParameterStep	parameter	String	0	RET	$.equals(param.getParameterName())
2776	247	8	JacobianMatrices.java	setInitialMainStateJacobian	THIS	JacobianMatrices	0	DEF	$.efode != null
2777	271	12	JacobianMatrices.java	setInitialParameterJacobian	THIS	JacobianMatrices	0	RET	pName.equals($.param.getParameterName())
2777	271	12	JacobianMatrices.java	setInitialParameterJacobian	pName	String	0	RET	$.equals(param.getParameterName())
2778	273	16	JacobianMatrices.java	setInitialParameterJacobian	THIS	JacobianMatrices	0	DEF	$.efode != null
24384	294	8	JacobianMatrices.java	getCurrentMainSetJacobian	THIS	JacobianMatrices	0	NIL-FOR	i < $.stateDim
24384	294	8	JacobianMatrices.java	getCurrentMainSetJacobian	i	int	0	NIL-FOR	$ < stateDim
2779	312	12	JacobianMatrices.java	getCurrentParameterJacobian	THIS	JacobianMatrices	0	RET	$.param.getParameterName().equals(pName)
2779	312	12	JacobianMatrices.java	getCurrentParameterJacobian	pName	String	0	RET	param.getParameterName().equals($)
2780	329	8	JacobianMatrices.java	checkDimension	arrayDimension	int	0	DimensionMismatchException	$ != expected
2780	329	8	JacobianMatrices.java	checkDimension	expected	int	0	DimensionMismatchException	arrayDimension != $
24032	108	8	KMeansPlusPlusClusterer.java	cluster	i	int	0	NIL-FOR	$ < numTrials
24032	108	8	KMeansPlusPlusClusterer.java	cluster	numTrials	int	0	NIL-FOR	i < $
2209	116	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
2210	129	12	KMeansPlusPlusClusterer.java	cluster	varianceSum	double	0	DEF	$ <= bestVarianceSum
2210	129	12	KMeansPlusPlusClusterer.java	cluster	bestVarianceSum	double	0	DEF	varianceSum <= $
2211	161	8	KMeansPlusPlusClusterer.java	cluster	points	Collection<T>	0	NumberIsTooSmallException	$.size() < k
2211	161	8	KMeansPlusPlusClusterer.java	cluster	k	int	0	NumberIsTooSmallException	points.size() < $
24033	175	8	KMeansPlusPlusClusterer.java	cluster	count	int	0	NIL-FOR	$ < max
24033	175	8	KMeansPlusPlusClusterer.java	cluster	max	int	0	NIL-FOR	count < $
2212	180	16	KMeansPlusPlusClusterer.java	cluster	THIS	KMeansPlusPlusClusterer	1	ConvergenceException	$.cluster.getPoints().isEmpty()
2213	205	12	KMeansPlusPlusClusterer.java	cluster	emptyCluster	boolean	0	RET	$
2213	205	12	KMeansPlusPlusClusterer.java	cluster	changes	int	0	RET	$ == 0
2214	228	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	clusterIndex	int	0	DEF	$ != assignments[pointIndex]
2214	228	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	pointIndex	int	0	DEF	clusterIndex != assignments[$]
2214	228	12	KMeansPlusPlusClusterer.java	assignPointsToClusters	assignments	int[]	0	DEF	clusterIndex != $[pointIndex]
24034	282	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
24034	282	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2215	283	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	$ != firstPointIndex
2215	283	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	firstPointIndex	int	0	DEF	i != $
24035	289	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	NIL-WHILE	$.size() < k
24035	289	8	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	NIL-WHILE	resultSet.size() < $
24036	295	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
24036	295	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2216	296	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2216	296	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
24037	311	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ < numPoints
24037	311	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	i < $
2217	312	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2217	312	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
2218	314	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	r	double	0	DEF	sum >= $
2218	314	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	sum	double	0	DEF	$ >= r
2219	324	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	0	DEF	$ == -1
24038	325	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	NIL-FOR	$ >= 0
2220	326	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	i	int	0	DEF	taken[$]
2220	326	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[i]
2221	334	12	KMeansPlusPlusClusterer.java	chooseInitialCenters	nextPointIndex	int	1	DEF	$ >= 0
2222	343	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	resultSet	List<Cluster<T>>	0	DEF	$.size() < k
2222	343	16	KMeansPlusPlusClusterer.java	chooseInitialCenters	k	int	0	DEF	resultSet.size() < $
24039	346	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	NIL-FOR	$ < numPoints
24039	346	20	KMeansPlusPlusClusterer.java	chooseInitialCenters	numPoints	int	0	NIL-FOR	j < $
2223	348	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	taken[$]
2223	348	24	KMeansPlusPlusClusterer.java	chooseInitialCenters	taken	boolean[]	0	DEF	$[j]
2224	351	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	d2	double	0	DEF	$ < minDistSquared[j]
2224	351	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	j	int	0	DEF	d2 < minDistSquared[$]
2224	351	28	KMeansPlusPlusClusterer.java	chooseInitialCenters	minDistSquared	double[]	0	DEF	d2 < $[j]
2225	380	12	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	THIS	KMeansPlusPlusClusterer	0	DEF	$.cluster.getPoints().isEmpty()
2226	391	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	variance	double	0	DEF	$ > maxVariance
2226	391	16	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	maxVariance	double	0	DEF	variance > $
2227	400	8	KMeansPlusPlusClusterer.java	getPointFromLargestVarianceCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
2228	426	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	number	int	0	DEF	$ > maxNumber
2228	426	12	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	maxNumber	int	0	DEF	number > $
2229	434	8	KMeansPlusPlusClusterer.java	getPointFromLargestNumberCluster	selected	Cluster<T>	0	ConvergenceException	$ == null
24040	460	12	KMeansPlusPlusClusterer.java	getFarthestPoint	i	int	0	NIL-FOR	$ < points.size()
24040	460	12	KMeansPlusPlusClusterer.java	getFarthestPoint	points	List<T>	0	NIL-FOR	i < $.size()
2230	462	16	KMeansPlusPlusClusterer.java	getFarthestPoint	distance	double	0	DEF	$ > maxDistance
2230	462	16	KMeansPlusPlusClusterer.java	getFarthestPoint	maxDistance	double	0	DEF	distance > $
2231	472	8	KMeansPlusPlusClusterer.java	getFarthestPoint	selectedCluster	Cluster<T>	0	ConvergenceException	$ == null
2232	495	12	KMeansPlusPlusClusterer.java	getNearestCluster	distance	double	0	DEF	$ < minDistance
2232	495	12	KMeansPlusPlusClusterer.java	getNearestCluster	minDistance	double	0	DEF	distance < $
0	134	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getControlMatrix() == null
1	154	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialStateEstimate() == null
2	161	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	DimensionMismatchException	$.transitionMatrix.getColumnDimension() != $.stateEstimation.getDimension()
3	168	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	1	DEF	$.processModel.getInitialErrorCovariance() == null
4	177	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	NonSquareMatrixException	$.transitionMatrix.isSquare()
5	184	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix != null
5	184	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() > 0
5	184	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() != $.transitionMatrix.getRowDimension()
5	184	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getRowDimension() > 0
5	184	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.controlMatrix.getColumnDimension() != 1
6	198	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	$.measurementMatrix.getColumnDimension() != $.transitionMatrix.getRowDimension()
7	206	8	KalmanFilter.java	KalmanFilter	THIS	KalmanFilter	0	MatrixDimensionMismatchException	measNoise.getRowDimension() != $.measurementMatrix.getRowDimension()
7	206	8	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != measurementMatrix.getRowDimension()
7	206	8	KalmanFilter.java	KalmanFilter	measNoise	RealMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != 1
8	296	8	KalmanFilter.java	predict	THIS	KalmanFilter	0	DimensionMismatchException	u.getDimension() != $.controlMatrix.getColumnDimension()
8	296	8	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$ != null
8	296	8	KalmanFilter.java	predict	u	RealVector	0	DimensionMismatchException	$.getDimension() != controlMatrix.getColumnDimension()
9	307	8	KalmanFilter.java	predict	u	RealVector	0	DEF	$ != null
10	343	8	KalmanFilter.java	correct	THIS	KalmanFilter	0	DimensionMismatchException	z.getDimension() != $.measurementMatrix.getRowDimension()
10	343	8	KalmanFilter.java	correct	z	RealVector	0	DimensionMismatchException	$.getDimension() != measurementMatrix.getRowDimension()
1067	86	8	KolmogorovSmirnovDistribution.java	KolmogorovSmirnovDistribution	n	int	0	NotStrictlyPositiveException	$ <= 0
1068	154	8	KolmogorovSmirnovDistribution.java	cdf	ninvhalf	double	1	RET	d <= $
1068	154	8	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ <= ninvhalf
1069	158	15	KolmogorovSmirnovDistribution.java	cdf	ninv	double	1	RET	d <= $
1069	158	15	KolmogorovSmirnovDistribution.java	cdf	ninvhalf	double	1	RET	$ < d
1069	158	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	ninvhalf < $
1069	158	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ <= ninv
22841	164	12	KolmogorovSmirnovDistribution.java	cdf	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
22841	164	12	KolmogorovSmirnovDistribution.java	cdf	i	int	0	NIL-FOR	$ <= n
1070	170	15	KolmogorovSmirnovDistribution.java	cdf	ninv	double	1	RET	1 - $ <= d
1070	170	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	1 - ninv <= $
1070	170	15	KolmogorovSmirnovDistribution.java	cdf	d	double	1	RET	$ < 1
1071	174	15	KolmogorovSmirnovDistribution.java	cdf	d	double	0	RET	1 <= $
22842	203	8	KolmogorovSmirnovDistribution.java	exactK	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
22842	203	8	KolmogorovSmirnovDistribution.java	exactK	i	int	0	NIL-FOR	$ <= n
22843	238	8	KolmogorovSmirnovDistribution.java	roundedK	i	int	0	NIL-FOR	$ < m
22843	238	8	KolmogorovSmirnovDistribution.java	roundedK	m	int	0	NIL-FOR	i < $
22844	239	12	KolmogorovSmirnovDistribution.java	roundedK	j	int	0	NIL-FOR	$ < m
22844	239	12	KolmogorovSmirnovDistribution.java	roundedK	m	int	0	NIL-FOR	j < $
22845	248	8	KolmogorovSmirnovDistribution.java	roundedK	THIS	KolmogorovSmirnovDistribution	0	NIL-FOR	i <= $.n
22845	248	8	KolmogorovSmirnovDistribution.java	roundedK	i	int	0	NIL-FOR	$ <= n
1072	274	8	KolmogorovSmirnovDistribution.java	createH	hDouble	double	0	NumberIsTooLargeException	$ >= 1
22846	295	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
22846	295	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
22847	296	12	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	$ < m
22847	296	12	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	j < $
1073	297	16	KolmogorovSmirnovDistribution.java	createH	j	int	1	DEF	i - $ + 1 < 0
1073	297	16	KolmogorovSmirnovDistribution.java	createH	i	int	1	DEF	$ - j + 1 < 0
22848	311	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
22848	311	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
22849	318	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
22849	318	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
1074	328	8	KolmogorovSmirnovDistribution.java	createH	h	BigFraction	0	DEF	$.compareTo(BigFraction.ONE_HALF) == 1
22850	343	8	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	$ < m
22850	343	8	KolmogorovSmirnovDistribution.java	createH	m	int	0	NIL-FOR	i < $
22851	344	12	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	$ < i + 1
22851	344	12	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	j < $ + 1
1075	345	16	KolmogorovSmirnovDistribution.java	createH	j	int	0	DEF	i - $ + 1 > 0
1075	345	16	KolmogorovSmirnovDistribution.java	createH	i	int	0	DEF	$ - j + 1 > 0
22852	346	20	KolmogorovSmirnovDistribution.java	createH	g	int	0	NIL-FOR	$ <= i - j + 1
22852	346	20	KolmogorovSmirnovDistribution.java	createH	j	int	0	NIL-FOR	g <= i - $ + 1
22852	346	20	KolmogorovSmirnovDistribution.java	createH	i	int	0	NIL-FOR	g <= $ - j + 1
2075	98	8	Kurtosis.java	increment	THIS	Kurtosis	1	DEF	$.incMoment
2076	111	8	Kurtosis.java	getResult	THIS	Kurtosis	0	DEF	$.moment.getN() > 3
2077	113	16	Kurtosis.java	getResult	THIS	Kurtosis	1	DEF	$.moment.$.n <= 3
2077	113	16	Kurtosis.java	getResult	variance	double	1	DEF	$ < 10E-20
2078	131	8	Kurtosis.java	clear	THIS	Kurtosis	1	DEF	$.incMoment
2079	168	8	Kurtosis.java	evaluate	THIS	Kurtosis	0	DEF	$.test(values, begin, length)
2079	168	8	Kurtosis.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2079	168	8	Kurtosis.java	evaluate	begin	int	0	DEF	test(values, $, length)
2079	168	8	Kurtosis.java	evaluate	length	int	0	DEF	test(values, begin, $)
2079	168	8	Kurtosis.java	evaluate	length	int	0	DEF	$ > 3
23997	179	12	Kurtosis.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
23997	179	12	Kurtosis.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
23997	179	12	Kurtosis.java	evaluate	length	int	0	NIL-FOR	i < begin + $
1102	87	8	LUDecomposition.java	LUDecomposition	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
22858	100	8	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
22858	100	8	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
22859	107	8	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	$ < m
22859	107	8	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	col < $
22860	110	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < col
22860	110	12	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	row < $
22861	113	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < row
22861	113	16	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	i < $
22862	122	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
22862	122	12	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
22863	125	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < col
22863	125	16	LUDecomposition.java	LUDecomposition	col	int	0	NIL-FOR	i < $
1103	131	16	LUDecomposition.java	LUDecomposition	sum	double	0	DEF	FastMath.abs($) > largest
1103	131	16	LUDecomposition.java	LUDecomposition	largest	double	0	DEF	FastMath.abs(sum) > $
1104	138	12	LUDecomposition.java	LUDecomposition	THIS	LUDecomposition	0	RET	FastMath.abs($.lu[max][col]) < singularityThreshold
1104	138	12	LUDecomposition.java	LUDecomposition	max	int	0	RET	FastMath.abs(lu[$][col]) < singularityThreshold
1104	138	12	LUDecomposition.java	LUDecomposition	col	int	0	RET	FastMath.abs(lu[max][$]) < singularityThreshold
1104	138	12	LUDecomposition.java	LUDecomposition	singularityThreshold	double	0	RET	FastMath.abs(lu[max][col]) < $
1105	144	12	LUDecomposition.java	LUDecomposition	max	int	0	DEF	$ != col
1105	144	12	LUDecomposition.java	LUDecomposition	col	int	0	DEF	max != $
22864	148	16	LUDecomposition.java	LUDecomposition	i	int	0	NIL-FOR	$ < m
22864	148	16	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	i < $
22865	161	12	LUDecomposition.java	LUDecomposition	row	int	0	NIL-FOR	$ < m
22865	161	12	LUDecomposition.java	LUDecomposition	m	int	0	NIL-FOR	row < $
1106	173	8	LUDecomposition.java	getL	THIS	LUDecomposition	0	DEF	$.cachedL == null
1106	173	8	LUDecomposition.java	getL	THIS	LUDecomposition	0	DEF	$.singular
22866	176	12	LUDecomposition.java	getL	i	int	0	NIL-FOR	$ < m
22866	176	12	LUDecomposition.java	getL	m	int	0	NIL-FOR	i < $
22867	178	16	LUDecomposition.java	getL	j	int	0	NIL-FOR	$ < i
22867	178	16	LUDecomposition.java	getL	i	int	0	NIL-FOR	j < $
1107	193	8	LUDecomposition.java	getU	THIS	LUDecomposition	0	DEF	$.cachedU == null
1107	193	8	LUDecomposition.java	getU	THIS	LUDecomposition	0	DEF	$.singular
22868	196	12	LUDecomposition.java	getU	i	int	0	NIL-FOR	$ < m
22868	196	12	LUDecomposition.java	getU	m	int	0	NIL-FOR	i < $
22869	198	16	LUDecomposition.java	getU	j	int	0	NIL-FOR	$ < m
22869	198	16	LUDecomposition.java	getU	m	int	0	NIL-FOR	j < $
1108	216	8	LUDecomposition.java	getP	THIS	LUDecomposition	0	DEF	$.singular
1108	216	8	LUDecomposition.java	getP	THIS	LUDecomposition	0	DEF	$.cachedP == null
22870	219	12	LUDecomposition.java	getP	i	int	0	NIL-FOR	$ < m
22870	219	12	LUDecomposition.java	getP	m	int	0	NIL-FOR	i < $
1109	240	8	LUDecomposition.java	getDeterminant	THIS	LUDecomposition	1	RET	$.singular
22871	245	12	LUDecomposition.java	getDeterminant	i	int	0	NIL-FOR	$ < m
22871	245	12	LUDecomposition.java	getDeterminant	m	int	0	NIL-FOR	i < $
3314	100	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yInitial) <= $
3314	100	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3315	106	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMin) <= $
3315	106	8	LaguerreSolver.java	doSolve	yMin	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3316	111	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMin < 0
3316	111	8	LaguerreSolver.java	doSolve	yMin	double	0	RET	yInitial * $ < 0
3317	117	8	LaguerreSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(yMax) <= $
3317	117	8	LaguerreSolver.java	doSolve	yMax	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3318	122	8	LaguerreSolver.java	doSolve	yInitial	double	0	RET	$ * yMax < 0
3318	122	8	LaguerreSolver.java	doSolve	yMax	double	0	RET	yInitial * $ < 0
3319	156	8	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	1	RET	$.complexSolver.isRoot(lo, hi, z)
3319	156	8	LaguerreSolver.java	laguerre	z	Complex	1	RET	complexSolver.isRoot(lo, hi, $)
3319	156	8	LaguerreSolver.java	laguerre	lo	double	1	RET	complexSolver.isRoot($, hi, z)
3319	156	8	LaguerreSolver.java	laguerre	hi	double	1	RET	complexSolver.isRoot(lo, $, z)
24558	162	12	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	NIL-FOR	i < root.$.length
24558	162	12	LaguerreSolver.java	laguerre	i	int	0	NIL-FOR	$ < root.length
24558	162	12	LaguerreSolver.java	laguerre	root	Complex[]	0	NIL-FOR	i < $.length
3320	163	16	LaguerreSolver.java	laguerre	THIS	LaguerreSolver	0	DEF	$.complexSolver.isRoot(lo, hi, root[i])
3320	163	16	LaguerreSolver.java	laguerre	i	int	0	DEF	complexSolver.isRoot(lo, hi, root[$])
3320	163	16	LaguerreSolver.java	laguerre	root	Complex[]	0	DEF	complexSolver.isRoot(lo, hi, $[i])
3320	163	16	LaguerreSolver.java	laguerre	lo	double	0	DEF	complexSolver.isRoot($, hi, root[i])
3320	163	16	LaguerreSolver.java	laguerre	hi	double	0	DEF	complexSolver.isRoot(lo, $, root[i])
1694	112	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != weights.$.length
1694	112	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != weights.length
1694	112	8	LeastSquaresConverter.java	LeastSquaresConverter	weights	double[]	0	DimensionMismatchException	observations.length != $.length
1695	142	8	LeastSquaresConverter.java	LeastSquaresConverter	THIS	LeastSquaresConverter	0	DimensionMismatchException	observations.$.length != scale.getColumnDimension()
1695	142	8	LeastSquaresConverter.java	LeastSquaresConverter	observations	double[]	0	DimensionMismatchException	$.length != scale.getColumnDimension()
1695	142	8	LeastSquaresConverter.java	LeastSquaresConverter	scale	RealMatrix	0	DimensionMismatchException	observations.length != $.getColumnDimension()
1696	155	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	DimensionMismatchException	residuals.$.length != $.observations.$.length
1696	155	8	LeastSquaresConverter.java	value	residuals	double[]	0	DimensionMismatchException	$.length != observations.length
23686	158	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
23686	158	8	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
23686	158	8	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1697	164	8	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.weights != null
23687	165	12	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	0	NIL-FOR	i < residuals.$.length
23687	165	12	LeastSquaresConverter.java	value	i	int	0	NIL-FOR	$ < residuals.length
23687	165	12	LeastSquaresConverter.java	value	residuals	double[]	0	NIL-FOR	i < $.length
1698	169	15	LeastSquaresConverter.java	value	THIS	LeastSquaresConverter	1	DEF	$.scale != null
3398	219	12	LegendreGaussIntegrator.java	doIntegrate	THIS	LegendreGaussIntegrator	0	RET	$.iterations.getCount() + 1 >= $.getMinimalIterationCount()
3398	219	12	LegendreGaussIntegrator.java	doIntegrate	delta	double	0	RET	$ <= limit
3398	219	12	LegendreGaussIntegrator.java	doIntegrate	limit	double	0	RET	delta <= $
24607	250	8	LegendreGaussIntegrator.java	stage	i	int	0	NIL-FOR	$ < n
24607	250	8	LegendreGaussIntegrator.java	stage	n	int	0	NIL-FOR	i < $
24608	251	12	LegendreGaussIntegrator.java	stage	THIS	LegendreGaussIntegrator	0	NIL-FOR	j < $.abscissas.$.length
24608	251	12	LegendreGaussIntegrator.java	stage	j	int	0	NIL-FOR	$ < abscissas.length
3378	66	8	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	RET	$ == 1
24592	83	8	LegendreHighPrecisionRuleFactory.java	computeRule	i	int	0	NIL-FOR	$ < iMax
24592	83	8	LegendreHighPrecisionRuleFactory.java	computeRule	iMax	int	0	NIL-FOR	i < $
24593	96	12	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
24593	96	12	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
24594	134	12	LegendreHighPrecisionRuleFactory.java	computeRule	done	boolean	0	NIL-WHILE	$
24595	140	16	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
24595	140	16	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
3379	157	16	LegendreHighPrecisionRuleFactory.java	computeRule	done	boolean	0	DEF	$
3380	158	20	LegendreHighPrecisionRuleFactory.java	computeRule	pa	BigDecimal	1	DEF	$.signum() * pc.signum() <= 0
3380	158	20	LegendreHighPrecisionRuleFactory.java	computeRule	pc	BigDecimal	1	DEF	pa.signum() * $.signum() <= 0
3381	187	8	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	DEF	$ % 2 == 1
24596	189	12	LegendreHighPrecisionRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
24596	189	12	LegendreHighPrecisionRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
3383	38	8	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	RET	$ == 1
24598	55	8	LegendreRuleFactory.java	computeRule	i	int	0	NIL-FOR	$ < iMax
24598	55	8	LegendreRuleFactory.java	computeRule	iMax	int	0	NIL-FOR	i < $
24599	68	12	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
24599	68	12	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
24600	88	12	LegendreRuleFactory.java	computeRule	done	boolean	0	NIL-WHILE	$
24601	92	16	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
24601	92	16	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
3384	99	16	LegendreRuleFactory.java	computeRule	done	boolean	0	DEF	$
3385	100	20	LegendreRuleFactory.java	computeRule	pa	double	1	DEF	$ * pc <= 0
3385	100	20	LegendreRuleFactory.java	computeRule	pc	double	1	DEF	pa * $ <= 0
3386	123	8	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	DEF	$ % 2 == 1
24602	125	12	LegendreRuleFactory.java	computeRule	j	int	0	NIL-FOR	$ < numberOfPoints
24602	125	12	LegendreRuleFactory.java	computeRule	numberOfPoints	int	0	NIL-FOR	j < $
23688	306	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i<$.rows
23688	306	12	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$<rows
23689	319	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
23689	319	12	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < solvedCols
1699	324	12	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
23690	328	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
23690	328	16	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
1700	330	20	LevenbergMarquardtOptimizer.java	doOptimize	dk	double	0	DEF	$ == 0
1701	345	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.cost != 0
23691	346	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
23691	346	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1702	349	20	LevenbergMarquardtOptimizer.java	doOptimize	s	double	0	DEF	$ != 0
23692	351	24	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
23692	351	24	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
1703	358	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	maxCosine <= $.orthoTolerance
1703	358	12	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	RET	$ <= orthoTolerance
23693	366	12	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
23693	366	12	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < cols
23694	371	12	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	NIL-FOR	$ < 1.0e-4
23695	374	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
23695	374	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
23696	391	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
23696	391	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1704	400	16	LevenbergMarquardtOptimizer.java	doOptimize	firstIteration	boolean	0	DEF	$
1705	409	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost < previousCost
1705	409	16	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost < $
23697	416	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
23697	416	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
23698	420	20	LevenbergMarquardtOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ <= j
23698	420	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	i <= $
23699	425	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
23699	425	16	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1706	438	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	DEF	$ <= 0.25
1707	441	24	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	0.1 * $.cost >= previousCost
1707	441	24	LevenbergMarquardtOptimizer.java	doOptimize	tmp	double	0	DEF	$ < 0.1
1707	441	24	LevenbergMarquardtOptimizer.java	doOptimize	previousCost	double	0	DEF	0.1 * cost >= $
1708	446	23	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
1708	446	23	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	DEF	$ >= 0.75
1709	452	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	RET	$ >= 1.0e-4
23700	456	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
23700	456	20	LevenbergMarquardtOptimizer.java	doOptimize	k	int	0	NIL-FOR	$ < cols
1710	464	20	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$ != null
1711	466	24	LevenbergMarquardtOptimizer.java	doOptimize	previous	PointVectorValuePair	0	RET	checker.converged(iter, $, current)
1711	466	24	LevenbergMarquardtOptimizer.java	doOptimize	current	PointVectorValuePair	0	RET	checker.converged(iter, previous, $)
1711	466	24	LevenbergMarquardtOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
1711	466	24	LevenbergMarquardtOptimizer.java	doOptimize	checker	ConvergenceChecker<PointVectorValuePair>	0	RET	$.converged(iter, previous, current)
23701	473	20	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
23701	473	20	LevenbergMarquardtOptimizer.java	doOptimize	j	int	0	NIL-FOR	$ < solvedCols
1712	486	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	preRed <= $.costRelativeTolerance
1712	486	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	delta <= $.parRelativeTolerance * xNorm
1712	486	16	LevenbergMarquardtOptimizer.java	doOptimize	THIS	LevenbergMarquardtOptimizer	0	RET	FastMath.abs(actRed) <= $.costRelativeTolerance
1712	486	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	0	RET	FastMath.abs($) <= costRelativeTolerance
1712	486	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	0	RET	$ <= costRelativeTolerance
1712	486	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	0	RET	$ <= 2.0
1712	486	16	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	0	RET	$ <= parRelativeTolerance * xNorm
1712	486	16	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	0	RET	delta <= parRelativeTolerance * $
1713	495	16	LevenbergMarquardtOptimizer.java	doOptimize	actRed	double	1	ConvergenceException	FastMath.abs($) <= 2.2204e-16
1713	495	16	LevenbergMarquardtOptimizer.java	doOptimize	preRed	double	1	ConvergenceException	$ <= 2.2204e-16
1713	495	16	LevenbergMarquardtOptimizer.java	doOptimize	ratio	double	1	ConvergenceException	$ <= 2.0
1714	498	23	LevenbergMarquardtOptimizer.java	doOptimize	delta	double	1	ConvergenceException	$ <= 2.2204e-16 * xNorm
1714	498	23	LevenbergMarquardtOptimizer.java	doOptimize	xNorm	double	1	ConvergenceException	delta <= 2.2204e-16 * $
1715	501	23	LevenbergMarquardtOptimizer.java	doOptimize	maxCosine	double	0	ConvergenceException	$ <= 2.2204e-16
23702	536	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.rank
23702	536	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < rank
23703	539	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.cols
23703	539	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < cols
23704	542	8	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	$ >= 0
23705	545	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < k
23705	545	12	LevenbergMarquardtOptimizer.java	determineLMParameter	k	int	0	NIL-FOR	i < $
23706	554	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
23706	554	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1716	562	8	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= 0.1 * delta
1716	562	8	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	fp <= 0.1 * $
1717	572	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.rank == $.solvedCols
23707	573	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
23707	573	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
23708	578	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
23708	578	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
23709	581	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < j
23709	581	16	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i < $
23710	593	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
23710	593	8	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
23711	596	12	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ <= j
23711	596	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	i <= $
1718	604	8	LevenbergMarquardtOptimizer.java	determineLMParameter	paru	double	0	DEF	$ == 0
1719	612	8	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
23712	616	8	LevenbergMarquardtOptimizer.java	determineLMParameter	countdown	int	0	NIL-FOR	$ >= 0
1720	619	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	DEF	$.lmPar == 0
23713	623	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
23713	623	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
23714	630	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
23714	630	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1721	642	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	$ < 0
1721	642	12	LevenbergMarquardtOptimizer.java	determineLMParameter	previousFP	double	0	RET	fp <= $
1721	642	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	$ <= previousFP
1721	642	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	RET	FastMath.abs($) <= 0.1 * delta
1721	642	12	LevenbergMarquardtOptimizer.java	determineLMParameter	parl	double	0	RET	$ == 0
1721	642	12	LevenbergMarquardtOptimizer.java	determineLMParameter	delta	double	0	RET	FastMath.abs(fp) <= 0.1 * $
23715	648	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
23715	648	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
23716	652	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
23716	652	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
23717	656	16	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
23717	656	16	LevenbergMarquardtOptimizer.java	determineLMParameter	i	int	0	NIL-FOR	$ < solvedCols
23718	661	12	LevenbergMarquardtOptimizer.java	determineLMParameter	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
23718	661	12	LevenbergMarquardtOptimizer.java	determineLMParameter	j	int	0	NIL-FOR	$ < solvedCols
1722	668	12	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	1	DEF	$ > 0
1723	670	19	LevenbergMarquardtOptimizer.java	determineLMParameter	fp	double	0	DEF	$ < 0
23719	705	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
23719	705	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
23720	707	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
23720	707	12	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
23721	715	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
23721	715	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1724	721	12	LevenbergMarquardtOptimizer.java	determineLMDirection	dpj	double	0	DEF	$ != 0
23722	730	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.solvedCols
23722	730	12	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	NIL-FOR	$ < solvedCols
1725	735	16	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	0	DEF	lmDiag[$] != 0
1725	735	16	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[k] != 0
1726	740	20	LevenbergMarquardtOptimizer.java	determineLMDirection	rkk	double	1	DEF	FastMath.abs($) < FastMath.abs(lmDiag[k])
1726	740	20	LevenbergMarquardtOptimizer.java	determineLMDirection	k	int	1	DEF	FastMath.abs(rkk) < FastMath.abs(lmDiag[$])
1726	740	20	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	1	DEF	FastMath.abs(rkk) < FastMath.abs($[k])
23723	758	20	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.solvedCols
23723	758	20	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < solvedCols
23724	776	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.solvedCols
23724	776	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < solvedCols
1727	777	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing == $.solvedCols
1727	777	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	DEF	lmDiag[$] == 0
1727	777	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ == solvedCols
1727	777	12	LevenbergMarquardtOptimizer.java	determineLMDirection	lmDiag	double[]	0	DEF	$[j] == 0
1728	780	12	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	DEF	nSing < $.solvedCols
1728	780	12	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ < solvedCols
1729	784	8	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	DEF	$ > 0
23725	785	12	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ >= 0
23726	788	16	LevenbergMarquardtOptimizer.java	determineLMDirection	i	int	0	NIL-FOR	$ < nSing
23726	788	16	LevenbergMarquardtOptimizer.java	determineLMDirection	nSing	int	0	NIL-FOR	i < $
23727	796	8	LevenbergMarquardtOptimizer.java	determineLMDirection	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.lmDir.$.length
23727	796	8	LevenbergMarquardtOptimizer.java	determineLMDirection	j	int	0	NIL-FOR	$ < lmDir.length
23728	826	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
23728	826	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
23729	829	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.weightedResidualJacobian.$.length
23729	829	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < weightedResidualJacobian.length
23730	837	8	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
23730	837	8	LevenbergMarquardtOptimizer.java	qrDecomposition	k	int	0	NIL-FOR	$ < cols
23731	842	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.cols
23731	842	12	LevenbergMarquardtOptimizer.java	qrDecomposition	i	int	0	NIL-FOR	$ < cols
23732	844	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.weightedResidualJacobian.$.length
23732	844	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < weightedResidualJacobian.length
1730	848	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isInfinite($)
1730	848	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	ConvergenceException	Double.isNaN($)
1731	852	16	LevenbergMarquardtOptimizer.java	qrDecomposition	norm2	double	0	DEF	$ > ak2
1731	852	16	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	DEF	norm2 > $
1732	857	12	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	RET	ak2 <= $.qrRankingThreshold
1732	857	12	LevenbergMarquardtOptimizer.java	qrDecomposition	ak2	double	0	RET	$ <= qrRankingThreshold
23733	876	12	LevenbergMarquardtOptimizer.java	qrDecomposition	dk	int	0	NIL-FOR	$ > 0
23734	878	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.weightedResidualJacobian.$.length
23734	878	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < weightedResidualJacobian.length
23735	882	16	LevenbergMarquardtOptimizer.java	qrDecomposition	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	j < $.weightedResidualJacobian.$.length
23735	882	16	LevenbergMarquardtOptimizer.java	qrDecomposition	j	int	0	NIL-FOR	$ < weightedResidualJacobian.length
23736	896	8	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	k < $.cols
23736	896	8	LevenbergMarquardtOptimizer.java	qTy	k	int	0	NIL-FOR	$ < cols
23737	899	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
23737	899	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
23738	903	12	LevenbergMarquardtOptimizer.java	qTy	THIS	LevenbergMarquardtOptimizer	0	NIL-FOR	i < $.rows
23738	903	12	LevenbergMarquardtOptimizer.java	qTy	i	int	0	NIL-FOR	$ < rows
636	76	8	Line.java	reset	norm2	double	0	MathIllegalArgumentException	$ == 0.0
637	175	8	Line.java	distance	n	double	0	RET	$ < Precision.SAFE_MIN
638	195	8	Line.java	closestPoint	n	double	0	RET	$ < Precision.EPSILON
720	132	8	Line.java	reset	d	double	1	DEF	$ == 0.0
721	159	8	Line.java	revertSelf	THIS	Line	1	DEF	$.angle < FastMath.PI
722	199	8	Line.java	intersection	d	double	0	RET	FastMath.abs($) < 1.0e-10
23662	128	8	LinearConstraint.java	LinearConstraint	THIS	LinearConstraint	0	NIL-FOR	i < sub.$.length
23662	128	8	LinearConstraint.java	LinearConstraint	i	int	0	NIL-FOR	$ < sub.length
23662	128	8	LinearConstraint.java	LinearConstraint	sub	double[]	0	NIL-FOR	i < $.length
1649	191	6	LinearConstraint.java	equals	THIS	LinearConstraint	0	RET	$ == other
1649	191	6	LinearConstraint.java	equals	other	Object	0	RET	this == $
1650	195	6	LinearConstraint.java	equals	other	Object	0	RET	$ instanceof LinearConstraint
3130	45	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
3130	45	8	LinearInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
3130	45	8	LinearInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
3131	49	8	LinearInterpolator.java	interpolate	THIS	LinearInterpolator	0	NumberIsTooSmallException	x.$.length < 2
3131	49	8	LinearInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 2
24464	61	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
24464	61	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
24465	67	8	LinearInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
24465	67	8	LinearInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
1667	108	6	LinearObjectiveFunction.java	equals	THIS	LinearObjectiveFunction	0	RET	$ == other
1667	108	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	this == $
1668	112	6	LinearObjectiveFunction.java	equals	other	Object	0	RET	$ instanceof LinearObjectiveFunction
2531	65	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	NullArgumentException	$ == null
2532	68	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NotPositiveException	$ <= 0
2533	71	8	ListPopulation.java	ListPopulation	chromosomes	List<Chromosome>	0	NumberIsTooLargeException	$.size() > populationLimit
2533	71	8	ListPopulation.java	ListPopulation	populationLimit	int	0	NumberIsTooLargeException	chromosomes.size() > $
2534	91	8	ListPopulation.java	setChromosomes	chromosomes	List<Chromosome>	0	NullArgumentException	$ == null
2535	94	8	ListPopulation.java	setChromosomes	THIS	ListPopulation	0	NumberIsTooLargeException	chromosomes.size() > $.populationLimit
2535	94	8	ListPopulation.java	setChromosomes	chromosomes	List<Chromosome>	0	NumberIsTooLargeException	$.size() > populationLimit
2536	109	8	ListPopulation.java	addChromosomes	THIS	ListPopulation	0	NumberIsTooLargeException	$.chromosomes.size() + chromosomeColl.size() > $.populationLimit
2536	109	8	ListPopulation.java	addChromosomes	chromosomeColl	Collection<Chromosome>	0	NumberIsTooLargeException	chromosomes.size() + $.size() > populationLimit
2537	139	8	ListPopulation.java	addChromosome	THIS	ListPopulation	0	NumberIsTooLargeException	$.chromosomes.size() >= $.populationLimit
2538	154	12	ListPopulation.java	getFittestChromosome	THIS	ListPopulation	0	DEF	$.chromosome.compareTo(bestChromosome) > 0
2538	154	12	ListPopulation.java	getFittestChromosome	bestChromosome	Chromosome	0	DEF	chromosome.compareTo($) > 0
2539	178	8	ListPopulation.java	setPopulationLimit	populationLimit	int	0	NotPositiveException	$ <= 0
2540	181	8	ListPopulation.java	setPopulationLimit	THIS	ListPopulation	0	NumberIsTooSmallException	populationLimit < $.chromosomes.size()
2540	181	8	ListPopulation.java	setPopulationLimit	populationLimit	int	0	NumberIsTooSmallException	$ < chromosomes.size()
3209	147	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ > 1
3209	147	8	LoessInterpolator.java	LoessInterpolator	bandwidth	double	0	OutOfRangeException	$ < 0
3210	152	8	LoessInterpolator.java	LoessInterpolator	robustnessIters	int	0	NotPositiveException	$ < 0
3211	206	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
3211	206	8	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
3211	206	8	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
3212	212	8	LoessInterpolator.java	smooth	n	int	0	NoDataException	$ == 0
3213	222	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 1
3214	226	8	LoessInterpolator.java	smooth	n	int	0	RET	$ == 2
3215	232	8	LoessInterpolator.java	smooth	bandwidthInPoints	int	0	NumberIsTooSmallException	$ < 2
24536	249	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	NIL-FOR	iter <= $.robustnessIters
24536	249	8	LoessInterpolator.java	smooth	iter	int	0	NIL-FOR	$ <= robustnessIters
24537	252	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
24537	252	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
3216	257	16	LoessInterpolator.java	smooth	i	int	0	DEF	$ > 0
3217	267	16	LoessInterpolator.java	smooth	ileft	int	1	DEF	xval[i] - xval[$] > xval[iright] - xval[i]
3217	267	16	LoessInterpolator.java	smooth	iright	int	1	DEF	xval[i] - xval[ileft] > xval[$] - xval[i]
3217	267	16	LoessInterpolator.java	smooth	i	int	1	DEF	xval[$] - xval[ileft] > xval[iright] - xval[$]
3217	267	16	LoessInterpolator.java	smooth	xval	double[]	1	DEF	$[i] - $[ileft] > $[iright] - $[i]
24538	286	16	LoessInterpolator.java	smooth	k	int	0	NIL-FOR	$ <= iright
24538	286	16	LoessInterpolator.java	smooth	iright	int	0	NIL-FOR	k <= $
3218	305	16	LoessInterpolator.java	smooth	THIS	LoessInterpolator	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - meanX * meanX)) < $.accuracy
3218	305	16	LoessInterpolator.java	smooth	meanX	double	1	DEF	FastMath.sqrt(FastMath.abs(meanXSquared - $ * $)) < accuracy
3218	305	16	LoessInterpolator.java	smooth	meanXSquared	double	1	DEF	FastMath.sqrt(FastMath.abs($ - meanX * meanX)) < accuracy
3219	319	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	iter == $.robustnessIters
3219	319	12	LoessInterpolator.java	smooth	iter	int	0	DEF	$ == robustnessIters
3220	332	12	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DEF	FastMath.abs(medianResidual) < $.accuracy
3220	332	12	LoessInterpolator.java	smooth	medianResidual	double	0	DEF	FastMath.abs($) < accuracy
24539	336	12	LoessInterpolator.java	smooth	i	int	0	NIL-FOR	$ < n
24539	336	12	LoessInterpolator.java	smooth	n	int	0	NIL-FOR	i < $
3221	338	16	LoessInterpolator.java	smooth	arg	double	1	DEF	$ >= 1
3222	368	8	LoessInterpolator.java	smooth	THIS	LoessInterpolator	0	DimensionMismatchException	xval.$.length != yval.$.length
3222	368	8	LoessInterpolator.java	smooth	xval	double[]	0	DimensionMismatchException	$.length != yval.length
3222	368	8	LoessInterpolator.java	smooth	yval	double[]	0	DimensionMismatchException	xval.length != $.length
3223	402	8	LoessInterpolator.java	updateBandwidthInterval	THIS	LoessInterpolator	0	DEF	nextRight < xval.$.length
3223	402	8	LoessInterpolator.java	updateBandwidthInterval	left	int	0	DEF	xval[nextRight] - xval[i] < xval[i] - xval[$]
3223	402	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	xval[$] - xval[i] < xval[i] - xval[left]
3223	402	8	LoessInterpolator.java	updateBandwidthInterval	nextRight	int	0	DEF	$ < xval.length
3223	402	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	$[nextRight] - $[i] < $[i] - $[left]
3223	402	8	LoessInterpolator.java	updateBandwidthInterval	xval	double[]	0	DEF	nextRight < $.length
3223	402	8	LoessInterpolator.java	updateBandwidthInterval	i	int	0	DEF	xval[nextRight] - xval[$] < xval[$] - xval[left]
24540	419	8	LoessInterpolator.java	nextNonzero	THIS	LoessInterpolator	0	NIL-WHILE	j < weights.$.length
24540	419	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	$ < weights.length
24540	419	8	LoessInterpolator.java	nextNonzero	j	int	0	NIL-WHILE	weights[$] == 0
24540	419	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	j < $.length
24540	419	8	LoessInterpolator.java	nextNonzero	weights	double[]	0	NIL-WHILE	$[j] == 0
3224	435	8	LoessInterpolator.java	tricube	absX	double	0	RET	$ >= 1.0
24541	450	8	LoessInterpolator.java	checkAllFiniteReal	THIS	LoessInterpolator	0	NIL-FOR	i < values.$.length
24541	450	8	LoessInterpolator.java	checkAllFiniteReal	i	int	0	NIL-FOR	$ < values.length
24541	450	8	LoessInterpolator.java	checkAllFiniteReal	values	double[]	0	NIL-FOR	i < $.length
1089	131	8	LogNormalDistribution.java	LogNormalDistribution	shape	double	0	NotStrictlyPositiveException	$ <= 0
1090	181	8	LogNormalDistribution.java	density	x	double	0	RET	$ <= 0
1091	205	8	LogNormalDistribution.java	cumulativeProbability	x	double	0	RET	$ <= 0
1092	209	8	LogNormalDistribution.java	cumulativeProbability	THIS	LogNormalDistribution	0	RET	FastMath.abs(dev) > 40 * $.shape
1092	209	8	LogNormalDistribution.java	cumulativeProbability	dev	double	0	RET	FastMath.abs($) > 40 * shape
1093	219	8	LogNormalDistribution.java	cumulativeProbability	x0	double	0	NumberIsTooLargeException	$ > x1
1093	219	8	LogNormalDistribution.java	cumulativeProbability	x1	double	0	NumberIsTooLargeException	x0 > $
1094	223	8	LogNormalDistribution.java	cumulativeProbability	x0	double	0	RET	$ <= 0
1094	223	8	LogNormalDistribution.java	cumulativeProbability	x1	double	0	RET	$ <= 0
3232	68	8	Logistic.java	Logistic	n	double	0	NotStrictlyPositiveException	$ <= 0
3228	152	8	Logit.java	value	x	double	0	OutOfRangeException	$ > hi
3228	152	8	Logit.java	value	x	double	0	OutOfRangeException	$ < lo
3228	152	8	Logit.java	value	lo	double	0	OutOfRangeException	x < $
3228	152	8	Logit.java	value	hi	double	0	OutOfRangeException	x > $
2179	74	8	MannWhitneyUTest.java	ensureDataConformance	x	double[]	0	NullArgumentException	$ == null
2179	74	8	MannWhitneyUTest.java	ensureDataConformance	y	double[]	0	NullArgumentException	$ == null
2180	78	8	MannWhitneyUTest.java	ensureDataConformance	THIS	MannWhitneyUTest	0	NoDataException	x.$.length == 0
2180	78	8	MannWhitneyUTest.java	ensureDataConformance	THIS	MannWhitneyUTest	0	NoDataException	y.$.length == 0
2180	78	8	MannWhitneyUTest.java	ensureDataConformance	x	double[]	0	NoDataException	$.length == 0
2180	78	8	MannWhitneyUTest.java	ensureDataConformance	y	double[]	0	NoDataException	$.length == 0
24017	140	8	MannWhitneyUTest.java	mannWhitneyU	THIS	MannWhitneyUTest	0	NIL-FOR	i < x.$.length
24017	140	8	MannWhitneyUTest.java	mannWhitneyU	i	int	0	NIL-FOR	$ < x.length
24017	140	8	MannWhitneyUTest.java	mannWhitneyU	x	double[]	0	NIL-FOR	i < $.length
22751	57	8	MathArrays.java	distance1	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
22751	57	8	MathArrays.java	distance1	i	int	0	NIL-FOR	$ < p1.length
22751	57	8	MathArrays.java	distance1	p1	double[]	0	NIL-FOR	i < $.length
22752	72	6	MathArrays.java	distance1	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
22752	72	6	MathArrays.java	distance1	i	int	0	NIL-FOR	$ < p1.length
22752	72	6	MathArrays.java	distance1	p1	int[]	0	NIL-FOR	i < $.length
22753	87	8	MathArrays.java	distance	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
22753	87	8	MathArrays.java	distance	i	int	0	NIL-FOR	$ < p1.length
22753	87	8	MathArrays.java	distance	p1	double[]	0	NIL-FOR	i < $.length
22754	103	6	MathArrays.java	distance	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
22754	103	6	MathArrays.java	distance	i	int	0	NIL-FOR	$ < p1.length
22754	103	6	MathArrays.java	distance	p1	int[]	0	NIL-FOR	i < $.length
22755	119	8	MathArrays.java	distanceInf	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
22755	119	8	MathArrays.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
22755	119	8	MathArrays.java	distanceInf	p1	double[]	0	NIL-FOR	i < $.length
22756	134	8	MathArrays.java	distanceInf	THIS	MathArrays	0	NIL-FOR	i < p1.$.length
22756	134	8	MathArrays.java	distanceInf	i	int	0	NIL-FOR	$ < p1.length
22756	134	8	MathArrays.java	distanceInf	p1	int[]	0	NIL-FOR	i < $.length
22757	164	8	MathArrays.java	isMonotonic	i	int	0	NIL-FOR	$ < max
22757	164	8	MathArrays.java	isMonotonic	max	int	0	NIL-FOR	i < $
98	169	16	MathArrays.java	isMonotonic	strict	boolean	1	RET	$
99	170	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ >= 0
100	174	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ > 0
101	181	16	MathArrays.java	isMonotonic	strict	boolean	1	RET	$
102	182	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ >= 0
103	186	20	MathArrays.java	isMonotonic	comp	int	0	RET	$ > 0
22758	233	8	MathArrays.java	checkOrder	max	int	0	NIL-FOR	index < $
22758	233	8	MathArrays.java	checkOrder	index	int	0	NIL-FOR	$ < max
104	236	16	MathArrays.java	checkOrder	strict	boolean	1	DEF	$
105	237	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] <= $
105	237	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] <= previous
105	237	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] <= previous
106	241	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] < $
106	241	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] < previous
106	241	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] < previous
107	247	16	MathArrays.java	checkOrder	strict	boolean	1	DEF	$
108	248	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] >= $
108	248	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] >= previous
108	248	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] >= previous
109	252	20	MathArrays.java	checkOrder	previous	double	0	DEF	val[index] > $
109	252	20	MathArrays.java	checkOrder	index	int	0	DEF	val[$] > previous
109	252	20	MathArrays.java	checkOrder	val	double[]	0	DEF	$[index] > previous
110	265	8	MathArrays.java	checkOrder	max	int	0	RET	index == $
110	265	8	MathArrays.java	checkOrder	index	int	0	RET	$ == max
111	271	8	MathArrays.java	checkOrder	abort	boolean	1	NonMonotonicSequenceException	$
22759	373	8	MathArrays.java	safeNorm	THIS	MathArrays	0	NIL-FOR	i < v.$.length
22759	373	8	MathArrays.java	safeNorm	i	int	0	NIL-FOR	$ < v.length
22759	373	8	MathArrays.java	safeNorm	v	double[]	0	NIL-FOR	i < $.length
112	375	12	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > agiant
112	375	12	MathArrays.java	safeNorm	xabs	double	1	DEF	$ < rdwarf
112	375	12	MathArrays.java	safeNorm	rdwarf	double	1	DEF	xabs < $
112	375	12	MathArrays.java	safeNorm	agiant	double	1	DEF	xabs > $
113	376	16	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > rdwarf
113	376	16	MathArrays.java	safeNorm	rdwarf	double	1	DEF	xabs > $
114	377	20	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > x1max
114	377	20	MathArrays.java	safeNorm	x1max	double	1	DEF	xabs > $
115	386	20	MathArrays.java	safeNorm	xabs	double	1	DEF	$ > x3max
115	386	20	MathArrays.java	safeNorm	x3max	double	1	DEF	xabs > $
116	391	24	MathArrays.java	safeNorm	xabs	double	0	DEF	$ != 0
117	402	8	MathArrays.java	safeNorm	s1	double	1	DEF	$ != 0
118	405	12	MathArrays.java	safeNorm	s2	double	1	DEF	$ == 0
119	408	16	MathArrays.java	safeNorm	s2	double	1	DEF	$ >= x3max
119	408	16	MathArrays.java	safeNorm	x3max	double	1	DEF	s2 >= $
120	459	8	MathArrays.java	sortInPlace	x	double[]	0	NullArgumentException	$ == null
22760	468	8	MathArrays.java	sortInPlace	i	int	0	NIL-FOR	$ < len
22760	468	8	MathArrays.java	sortInPlace	len	int	0	NIL-FOR	i < $
22761	470	12	MathArrays.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
22761	470	12	MathArrays.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
121	472	16	MathArrays.java	sortInPlace	y	double[]	0	NullArgumentException	$ == null
122	475	16	MathArrays.java	sortInPlace	THIS	MathArrays	0	DimensionMismatchException	y.$.length != len
122	475	16	MathArrays.java	sortInPlace	y	double[]	0	DimensionMismatchException	$.length != len
122	475	16	MathArrays.java	sortInPlace	len	int	0	DimensionMismatchException	y.length != $
22762	505	8	MathArrays.java	sortInPlace	i	int	0	NIL-FOR	$ < len
22762	505	8	MathArrays.java	sortInPlace	len	int	0	NIL-FOR	i < $
22763	509	12	MathArrays.java	sortInPlace	j	int	0	NIL-FOR	$ < yListLen
22763	509	12	MathArrays.java	sortInPlace	yListLen	int	0	NIL-FOR	j < $
123	583	8	MathArrays.java	linearCombination	THIS	MathArrays	0	DimensionMismatchException	len != b.$.length
123	583	8	MathArrays.java	linearCombination	len	int	0	DimensionMismatchException	$ != b.length
123	583	8	MathArrays.java	linearCombination	b	double[]	0	DimensionMismatchException	len != $.length
22764	590	8	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < len
22764	590	8	MathArrays.java	linearCombination	len	int	0	NIL-FOR	i < $
22765	616	8	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < lenMinusOne
22765	616	8	MathArrays.java	linearCombination	lenMinusOne	int	0	NIL-FOR	i < $
124	626	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
22766	630	12	MathArrays.java	linearCombination	i	int	0	NIL-FOR	$ < len
22766	630	12	MathArrays.java	linearCombination	len	int	0	NIL-FOR	i < $
125	706	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
126	803	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
127	922	8	MathArrays.java	linearCombination	result	double	0	DEF	Double.isNaN($)
128	942	8	MathArrays.java	equals	x	float[]	0	RET	$ == null
128	942	8	MathArrays.java	equals	y	float[]	0	RET	$ == null
129	945	8	MathArrays.java	equals	THIS	MathArrays	0	RET	x.$.length != y.$.length
129	945	8	MathArrays.java	equals	x	float[]	0	RET	$.length != y.length
129	945	8	MathArrays.java	equals	y	float[]	0	RET	x.length != $.length
22767	948	8	MathArrays.java	equals	THIS	MathArrays	0	NIL-FOR	i < x.$.length
22767	948	8	MathArrays.java	equals	i	int	0	NIL-FOR	$ < x.length
22767	948	8	MathArrays.java	equals	x	float[]	0	NIL-FOR	i < $.length
130	949	12	MathArrays.java	equals	i	int	0	RET	Precision.equals(x[$], y[$])
130	949	12	MathArrays.java	equals	x	float[]	0	RET	Precision.equals($[i], y[i])
130	949	12	MathArrays.java	equals	y	float[]	0	RET	Precision.equals(x[i], $[i])
131	968	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	$ == null
131	968	8	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	$ == null
132	971	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	RET	x.$.length != y.$.length
132	971	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	$.length != y.length
132	971	8	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	x.length != $.length
22768	974	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	NIL-FOR	i < x.$.length
22768	974	8	MathArrays.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
22768	974	8	MathArrays.java	equalsIncludingNaN	x	float[]	0	NIL-FOR	i < $.length
133	975	12	MathArrays.java	equalsIncludingNaN	i	int	0	RET	Precision.equalsIncludingNaN(x[$], y[$])
133	975	12	MathArrays.java	equalsIncludingNaN	x	float[]	0	RET	Precision.equalsIncludingNaN($[i], y[i])
133	975	12	MathArrays.java	equalsIncludingNaN	y	float[]	0	RET	Precision.equalsIncludingNaN(x[i], $[i])
134	993	8	MathArrays.java	equals	x	double[]	0	RET	$ == null
134	993	8	MathArrays.java	equals	y	double[]	0	RET	$ == null
135	996	8	MathArrays.java	equals	THIS	MathArrays	0	RET	x.$.length != y.$.length
135	996	8	MathArrays.java	equals	x	double[]	0	RET	$.length != y.length
135	996	8	MathArrays.java	equals	y	double[]	0	RET	x.length != $.length
22769	999	8	MathArrays.java	equals	THIS	MathArrays	0	NIL-FOR	i < x.$.length
22769	999	8	MathArrays.java	equals	i	int	0	NIL-FOR	$ < x.length
22769	999	8	MathArrays.java	equals	x	double[]	0	NIL-FOR	i < $.length
136	1000	12	MathArrays.java	equals	i	int	0	RET	Precision.equals(x[$], y[$])
136	1000	12	MathArrays.java	equals	x	double[]	0	RET	Precision.equals($[i], y[i])
136	1000	12	MathArrays.java	equals	y	double[]	0	RET	Precision.equals(x[i], $[i])
137	1019	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	$ == null
137	1019	8	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	$ == null
138	1022	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	RET	x.$.length != y.$.length
138	1022	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	$.length != y.length
138	1022	8	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	x.length != $.length
22770	1025	8	MathArrays.java	equalsIncludingNaN	THIS	MathArrays	0	NIL-FOR	i < x.$.length
22770	1025	8	MathArrays.java	equalsIncludingNaN	i	int	0	NIL-FOR	$ < x.length
22770	1025	8	MathArrays.java	equalsIncludingNaN	x	double[]	0	NIL-FOR	i < $.length
139	1026	12	MathArrays.java	equalsIncludingNaN	i	int	0	RET	Precision.equalsIncludingNaN(x[$], y[$])
139	1026	12	MathArrays.java	equalsIncludingNaN	x	double[]	0	RET	Precision.equalsIncludingNaN($[i], y[i])
139	1026	12	MathArrays.java	equalsIncludingNaN	y	double[]	0	RET	Precision.equalsIncludingNaN(x[i], $[i])
140	1056	9	MathArrays.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isInfinite($)
141	1059	9	MathArrays.java	normalizeArray	normalizedSum	double	0	MathIllegalArgumentException	Double.isNaN($)
22771	1065	9	MathArrays.java	normalizeArray	i	int	0	NIL-FOR	$ < len
22771	1065	9	MathArrays.java	normalizeArray	len	int	0	NIL-FOR	i < $
142	1066	13	MathArrays.java	normalizeArray	i	int	0	MathIllegalArgumentException	Double.isInfinite(values[$])
142	1066	13	MathArrays.java	normalizeArray	values	double[]	0	MathIllegalArgumentException	Double.isInfinite($[i])
143	1069	13	MathArrays.java	normalizeArray	i	int	0	DEF	Double.isNaN(values[$])
143	1069	13	MathArrays.java	normalizeArray	values	double[]	0	DEF	Double.isNaN($[i])
144	1073	9	MathArrays.java	normalizeArray	sum	double	0	MathArithmeticException	$ == 0
22772	1076	9	MathArrays.java	normalizeArray	i	int	0	NIL-FOR	$ < len
22772	1076	9	MathArrays.java	normalizeArray	len	int	0	NIL-FOR	i < $
145	1077	13	MathArrays.java	normalizeArray	i	int	1	DEF	Double.isNaN(values[$])
145	1077	13	MathArrays.java	normalizeArray	values	double[]	1	DEF	Double.isNaN($[i])
481	128	8	MathUtils.java	copySign	magnitude	byte	1	RET	$ < 0
481	128	8	MathUtils.java	copySign	magnitude	byte	1	RET	$ >= 0
481	128	8	MathUtils.java	copySign	sign	byte	1	RET	$ < 0
481	128	8	MathUtils.java	copySign	sign	byte	1	RET	$ >= 0
482	131	15	MathUtils.java	copySign	magnitude	byte	1	MathArithmeticException	$ == Byte.MIN_VALUE
482	131	15	MathUtils.java	copySign	sign	byte	1	MathArithmeticException	$ >= 0
483	150	8	MathUtils.java	copySign	magnitude	short	1	RET	$ >= 0
483	150	8	MathUtils.java	copySign	magnitude	short	1	RET	$ < 0
483	150	8	MathUtils.java	copySign	sign	short	1	RET	$ >= 0
483	150	8	MathUtils.java	copySign	sign	short	1	RET	$ < 0
484	153	15	MathUtils.java	copySign	magnitude	short	1	MathArithmeticException	$ == Short.MIN_VALUE
484	153	15	MathUtils.java	copySign	sign	short	1	MathArithmeticException	$ >= 0
485	172	8	MathUtils.java	copySign	magnitude	int	1	RET	$ >= 0
485	172	8	MathUtils.java	copySign	magnitude	int	1	RET	$ < 0
485	172	8	MathUtils.java	copySign	sign	int	1	RET	$ >= 0
485	172	8	MathUtils.java	copySign	sign	int	1	RET	$ < 0
486	175	15	MathUtils.java	copySign	magnitude	int	1	MathArithmeticException	$ == Integer.MIN_VALUE
486	175	15	MathUtils.java	copySign	sign	int	1	MathArithmeticException	$ >= 0
487	194	8	MathUtils.java	copySign	magnitude	long	1	RET	$ >= 0
487	194	8	MathUtils.java	copySign	magnitude	long	1	RET	$ < 0
487	194	8	MathUtils.java	copySign	sign	long	1	RET	$ < 0
487	194	8	MathUtils.java	copySign	sign	long	1	RET	$ >= 0
488	197	15	MathUtils.java	copySign	magnitude	long	1	MathArithmeticException	$ == Long.MIN_VALUE
488	197	15	MathUtils.java	copySign	sign	long	1	MathArithmeticException	$ >= 0
489	212	8	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
489	212	8	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
22794	225	8	MathUtils.java	checkFinite	THIS	MathUtils	0	NIL-FOR	i < val.$.length
22794	225	8	MathUtils.java	checkFinite	i	int	0	NIL-FOR	$ < val.length
22794	225	8	MathUtils.java	checkFinite	val	double[]	0	NIL-FOR	i < $.length
490	227	12	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isInfinite($)
490	227	12	MathUtils.java	checkFinite	x	double	0	NotFiniteNumberException	Double.isNaN($)
491	244	8	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
492	257	8	MathUtils.java	checkNotNull	o	Object	0	NullArgumentException	$ == null
1373	128	8	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$[0] == null
1373	128	8	MatrixUtils.java	createRealMatrix	data	double[][]	0	NullArgumentException	$ == null
1374	156	8	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$[0] == null
1374	156	8	MatrixUtils.java	createFieldMatrix	data	T[][]	0	NullArgumentException	$ == null
23327	174	8	MatrixUtils.java	createRealIdentityMatrix	i	int	0	NIL-FOR	$ < dimension
23327	174	8	MatrixUtils.java	createRealIdentityMatrix	dimension	int	0	NIL-FOR	i < $
23328	196	8	MatrixUtils.java	createFieldIdentityMatrix	row	int	0	NIL-FOR	$ < dimension
23328	196	8	MatrixUtils.java	createFieldIdentityMatrix	dimension	int	0	NIL-FOR	row < $
23329	214	8	MatrixUtils.java	createRealDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
23329	214	8	MatrixUtils.java	createRealDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
23329	214	8	MatrixUtils.java	createRealDiagonalMatrix	diagonal	double[]	0	NIL-FOR	i < $.length
23330	233	8	MatrixUtils.java	createFieldDiagonalMatrix	THIS	MatrixUtils	0	NIL-FOR	i < diagonal.$.length
23330	233	8	MatrixUtils.java	createFieldDiagonalMatrix	i	int	0	NIL-FOR	$ < diagonal.length
23330	233	8	MatrixUtils.java	createFieldDiagonalMatrix	diagonal	T[]	0	NIL-FOR	i < $.length
1375	248	8	MatrixUtils.java	createRealVector	data	double[]	0	NullArgumentException	$ == null
1376	265	8	MatrixUtils.java	createFieldVector	data	T[]	0	NullArgumentException	$ == null
1377	268	8	MatrixUtils.java	createFieldVector	THIS	MatrixUtils	0	ZeroException	data.$.length == 0
1377	268	8	MatrixUtils.java	createFieldVector	data	T[]	0	ZeroException	$.length == 0
1378	284	8	MatrixUtils.java	createRowRealMatrix	rowData	double[]	0	NullArgumentException	$ == null
23331	289	8	MatrixUtils.java	createRowRealMatrix	i	int	0	NIL-FOR	$ < nCols
23331	289	8	MatrixUtils.java	createRowRealMatrix	nCols	int	0	NIL-FOR	i < $
1379	307	8	MatrixUtils.java	createRowFieldMatrix	rowData	T[]	0	NullArgumentException	$ == null
1380	311	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NoDataException	$ == 0
23332	315	8	MatrixUtils.java	createRowFieldMatrix	i	int	0	NIL-FOR	$ < nCols
23332	315	8	MatrixUtils.java	createRowFieldMatrix	nCols	int	0	NIL-FOR	i < $
1381	331	8	MatrixUtils.java	createColumnRealMatrix	columnData	double[]	0	NullArgumentException	$ == null
23333	336	8	MatrixUtils.java	createColumnRealMatrix	i	int	0	NIL-FOR	$ < nRows
23333	336	8	MatrixUtils.java	createColumnRealMatrix	nRows	int	0	NIL-FOR	i < $
1382	354	8	MatrixUtils.java	createColumnFieldMatrix	columnData	T[]	0	NullArgumentException	$ == null
1383	358	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NoDataException	$ == 0
23334	362	8	MatrixUtils.java	createColumnFieldMatrix	i	int	0	NIL-FOR	$ < nRows
23334	362	8	MatrixUtils.java	createColumnFieldMatrix	nRows	int	0	NIL-FOR	i < $
1384	391	8	MatrixUtils.java	checkRowIndex	m	AnyMatrix	0	OutOfRangeException	row >= $.getRowDimension()
1384	391	8	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ < 0
1384	391	8	MatrixUtils.java	checkRowIndex	row	int	0	OutOfRangeException	$ >= m.getRowDimension()
1385	406	8	MatrixUtils.java	checkColumnIndex	m	AnyMatrix	0	OutOfRangeException	column >= $.getColumnDimension()
1385	406	8	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ < 0
1385	406	8	MatrixUtils.java	checkColumnIndex	column	int	0	OutOfRangeException	$ >= m.getColumnDimension()
1386	430	8	MatrixUtils.java	checkSubMatrixIndex	startRow	int	0	NumberIsTooSmallException	endRow < $
1386	430	8	MatrixUtils.java	checkSubMatrixIndex	endRow	int	0	NumberIsTooSmallException	$ < startRow
1387	437	8	MatrixUtils.java	checkSubMatrixIndex	startColumn	int	0	NumberIsTooSmallException	endColumn < $
1387	437	8	MatrixUtils.java	checkSubMatrixIndex	endColumn	int	0	NumberIsTooSmallException	$ < startColumn
1388	461	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NullArgumentException	$ == null
1389	464	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NullArgumentException	$ == null
1390	467	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedRows.$.length == 0
1390	467	8	MatrixUtils.java	checkSubMatrixIndex	selectedRows	int[]	0	NoDataException	$.length == 0
1391	470	8	MatrixUtils.java	checkSubMatrixIndex	THIS	MatrixUtils	0	NoDataException	selectedColumns.$.length == 0
1391	470	8	MatrixUtils.java	checkSubMatrixIndex	selectedColumns	int[]	0	NoDataException	$.length == 0
1392	490	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1392	490	8	MatrixUtils.java	checkAdditionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1392	490	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1392	490	8	MatrixUtils.java	checkAdditionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1393	505	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getColumnDimension() != right.getColumnDimension()
1393	505	8	MatrixUtils.java	checkSubtractionCompatible	left	AnyMatrix	0	MatrixDimensionMismatchException	$.getRowDimension() != right.getRowDimension()
1393	505	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getColumnDimension() != $.getColumnDimension()
1393	505	8	MatrixUtils.java	checkSubtractionCompatible	right	AnyMatrix	0	MatrixDimensionMismatchException	left.getRowDimension() != $.getRowDimension()
1394	520	8	MatrixUtils.java	checkMultiplicationCompatible	left	AnyMatrix	0	DimensionMismatchException	$.getColumnDimension() != right.getRowDimension()
1394	520	8	MatrixUtils.java	checkMultiplicationCompatible	right	AnyMatrix	0	DimensionMismatchException	left.getColumnDimension() != $.getRowDimension()
23335	659	8	MatrixUtils.java	serializeRealVector	i	int	0	NIL-FOR	$ < n
23335	659	8	MatrixUtils.java	serializeRealVector	n	int	0	NIL-FOR	i < $
23336	690	12	MatrixUtils.java	deserializeRealVector	i	int	0	NIL-FOR	$ < n
23336	690	12	MatrixUtils.java	deserializeRealVector	n	int	0	NIL-FOR	i < $
23337	762	8	MatrixUtils.java	serializeRealMatrix	i	int	0	NIL-FOR	$ < n
23337	762	8	MatrixUtils.java	serializeRealMatrix	n	int	0	NIL-FOR	i < $
23338	763	12	MatrixUtils.java	serializeRealMatrix	j	int	0	NIL-FOR	$ < m
23338	763	12	MatrixUtils.java	serializeRealMatrix	m	int	0	NIL-FOR	j < $
23339	796	12	MatrixUtils.java	deserializeRealMatrix	i	int	0	NIL-FOR	$ < n
23339	796	12	MatrixUtils.java	deserializeRealMatrix	n	int	0	NIL-FOR	i < $
23340	798	16	MatrixUtils.java	deserializeRealMatrix	j	int	0	NIL-FOR	$ < m
23340	798	16	MatrixUtils.java	deserializeRealMatrix	m	int	0	NIL-FOR	j < $
1395	839	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$ == null
1395	839	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$.getRowDimension() != b.getDimension()
1395	839	8	MatrixUtils.java	solveLowerTriangularSystem	b	RealVector	0	MathIllegalArgumentException	$ == null
1395	839	8	MatrixUtils.java	solveLowerTriangularSystem	b	RealVector	0	MathIllegalArgumentException	rm.getRowDimension() != $.getDimension()
1396	844	8	MatrixUtils.java	solveLowerTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$.getColumnDimension() != $.getRowDimension()
23341	850	8	MatrixUtils.java	solveLowerTriangularSystem	i	int	0	NIL-FOR	$ < rows
23341	850	8	MatrixUtils.java	solveLowerTriangularSystem	rows	int	0	NIL-FOR	i < $
1397	852	12	MatrixUtils.java	solveLowerTriangularSystem	diag	double	0	MathArithmeticException	FastMath.abs($) < Precision.SAFE_MIN
23342	857	12	MatrixUtils.java	solveLowerTriangularSystem	j	int	0	NIL-FOR	$< rows
23342	857	12	MatrixUtils.java	solveLowerTriangularSystem	rows	int	0	NIL-FOR	j< $
1398	879	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$ == null
1398	879	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$.getRowDimension() != b.getDimension()
1398	879	8	MatrixUtils.java	solveUpperTriangularSystem	b	RealVector	0	MathIllegalArgumentException	rm.getRowDimension() != $.getDimension()
1398	879	8	MatrixUtils.java	solveUpperTriangularSystem	b	RealVector	0	MathIllegalArgumentException	$ == null
1399	884	8	MatrixUtils.java	solveUpperTriangularSystem	rm	RealMatrix	0	MathIllegalArgumentException	$.getColumnDimension() != $.getRowDimension()
23343	890	8	MatrixUtils.java	solveUpperTriangularSystem	i	int	0	NIL-FOR	$ >-1
1400	892	12	MatrixUtils.java	solveUpperTriangularSystem	diag	double	0	MathArithmeticException	FastMath.abs($) < Precision.SAFE_MIN
23344	897	12	MatrixUtils.java	solveUpperTriangularSystem	j	int	0	NIL-FOR	$>-1
2127	76	8	Max.java	increment	THIS	Max	0	DEF	Double.isNaN($.value)
2127	76	8	Max.java	increment	THIS	Max	0	DEF	d > $.value
2127	76	8	Max.java	increment	d	double	0	DEF	$ > value
2128	131	8	Max.java	evaluate	THIS	Max	0	DEF	$.test(values, begin, length)
2128	131	8	Max.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2128	131	8	Max.java	evaluate	begin	int	0	DEF	test(values, $, length)
2128	131	8	Max.java	evaluate	length	int	0	DEF	test(values, begin, $)
24003	133	12	Max.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
24003	133	12	Max.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
24003	133	12	Max.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2129	134	16	Max.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
2129	134	16	Max.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
2056	109	8	Mean.java	increment	THIS	Mean	0	DEF	$.incMoment
2057	119	8	Mean.java	clear	THIS	Mean	0	DEF	$.incMoment
2058	157	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, begin, length)
2058	157	8	Mean.java	evaluate	values	double[]	0	RET	test($, begin, length)
2058	157	8	Mean.java	evaluate	begin	int	0	RET	test(values, $, length)
2058	157	8	Mean.java	evaluate	length	int	0	RET	test(values, begin, $)
23989	166	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
23989	166	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
23989	166	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2059	205	8	Mean.java	evaluate	THIS	Mean	0	RET	$.test(values, weights, begin, length)
2059	205	8	Mean.java	evaluate	values	double[]	0	RET	test($, weights, begin, length)
2059	205	8	Mean.java	evaluate	weights	double[]	0	RET	test(values, $, begin, length)
2059	205	8	Mean.java	evaluate	begin	int	0	RET	test(values, weights, $, length)
2059	205	8	Mean.java	evaluate	length	int	0	RET	test(values, weights, begin, $)
23990	214	12	Mean.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
23990	214	12	Mean.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
23990	214	12	Mean.java	evaluate	length	int	0	NIL-FOR	i < begin + $
24181	147	8	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	NIL-FOR	$.mti < N
2502	167	8	MersenneTwister.java	setSeed	seed	int[]	0	RET	$ == null
24182	176	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
2503	182	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
2504	186	12	MersenneTwister.java	setSeed	THIS	MersenneTwister	0	DEF	j >= seed.$.length
2504	186	12	MersenneTwister.java	setSeed	j	int	0	DEF	$ >= seed.length
2504	186	12	MersenneTwister.java	setSeed	seed	int[]	0	DEF	j >= $.length
24183	191	8	MersenneTwister.java	setSeed	k	int	0	NIL-FOR	$ != 0
2505	197	12	MersenneTwister.java	setSeed	i	int	0	DEF	$ >= N
2506	233	8	MersenneTwister.java	next	THIS	MersenneTwister	0	DEF	$.mti >= N
24184	235	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - M
24185	241	12	MersenneTwister.java	next	k	int	0	NIL-FOR	$ < N - 1
3168	151	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$ == null
3168	151	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	NullArgumentException	$ == null
3169	155	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NoDataException	xval.$.length == 0
3169	155	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NoDataException	$.length == 0
3170	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xval.$.length != yval.$.length
3170	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	DimensionMismatchException	$.length != yval.length
3170	158	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	yval	double[]	0	DimensionMismatchException	xval.length != $.length
3171	161	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NullArgumentException	$[0] == null
24489	170	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	NIL-FOR	i < xval.$.length
24489	170	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < xval.length
24489	170	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xval	double[][]	0	NIL-FOR	i < $.length
3172	172	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	NullArgumentException	$ == null
3173	175	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	THIS	MicrosphereInterpolatingFunction	0	DimensionMismatchException	xvalI.$.length != $.dimension
3173	175	12	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	xvalI	double[]	0	DimensionMismatchException	$.length != dimension
24490	185	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	i	int	0	NIL-FOR	$ < microsphereElements
24490	185	8	MicrosphereInterpolatingFunction.java	MicrosphereInterpolatingFunction	microsphereElements	int	0	NIL-FOR	i < $
3174	209	12	MicrosphereInterpolatingFunction.java	value	diffNorm	double	0	RET	FastMath.abs($) < FastMath.ulp(1d)
3175	228	12	MicrosphereInterpolatingFunction.java	value	sd	Entry<RealVector,Double>	0	DEF	$ != null
3202	72	8	MicrosphereInterpolator.java	MicrosphereInterpolator	exponent	int	0	NotPositiveException	$ < 0
3203	75	8	MicrosphereInterpolator.java	MicrosphereInterpolator	elements	int	0	NotStrictlyPositiveException	$ <= 0
2733	92	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	1	DEF	$.previousState != null
2733	92	4	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
24349	95	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
24349	95	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
24350	104	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	MidpointStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
24350	104	8	MidpointStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2283	100	8	MillerUpdatingRegression.java	MillerUpdatingRegression	numberOfVariables	int	0	ModelSpecificationException	$ < 1
2284	103	8	MillerUpdatingRegression.java	MillerUpdatingRegression	includeConstant	boolean	1	DEF	$
24082	120	8	MillerUpdatingRegression.java	MillerUpdatingRegression	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
24082	120	8	MillerUpdatingRegression.java	MillerUpdatingRegression	i	int	0	NIL-FOR	$ < this.nvars
2285	123	8	MillerUpdatingRegression.java	MillerUpdatingRegression	errorTolerance	double	1	DEF	$ > 0
2286	165	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.hasIntercept
2286	165	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.hasIntercept
2286	165	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length != $.nvars
2286	165	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length + 1 != $.nvars
2286	165	8	MillerUpdatingRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length != nvars
2286	165	8	MillerUpdatingRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length + 1 != nvars
2287	170	8	MillerUpdatingRegression.java	addObservation	THIS	MillerUpdatingRegression	1	DEF	$.hasIntercept
2288	190	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length != y.$.length
2288	190	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length != y.length
2288	190	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$ == null
2288	190	8	MillerUpdatingRegression.java	addObservations	y	double[]	0	ModelSpecificationException	x.length != $.length
2288	190	8	MillerUpdatingRegression.java	addObservations	y	double[]	0	ModelSpecificationException	$ == null
2289	196	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x.$.length == 0
2289	196	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length == 0
2290	200	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	ModelSpecificationException	x[0].length + 1 > x.$.length
2290	200	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$[0].length + 1 > $.length
24083	205	8	MillerUpdatingRegression.java	addObservations	THIS	MillerUpdatingRegression	0	NIL-FOR	i < x.$.length
24083	205	8	MillerUpdatingRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
24083	205	8	MillerUpdatingRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
24084	237	8	MillerUpdatingRegression.java	include	THIS	MillerUpdatingRegression	0	NIL-FOR	i < x.$.length
24084	237	8	MillerUpdatingRegression.java	include	i	int	0	NIL-FOR	$ < x.length
24084	237	8	MillerUpdatingRegression.java	include	x	double[]	0	NIL-FOR	i < $.length
2291	238	12	MillerUpdatingRegression.java	include	w	double	0	RET	$ == 0.0
2292	243	12	MillerUpdatingRegression.java	include	xi	double	0	DEF	$ == 0.0
2293	250	12	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2294	253	16	MillerUpdatingRegression.java	include	tmp	double	0	DEF	FastMath.abs($) > Precision.EPSILON
24085	261	12	MillerUpdatingRegression.java	include	THIS	MillerUpdatingRegression	0	NIL-FOR	k < $.nvars
24085	261	12	MillerUpdatingRegression.java	include	k	int	0	NIL-FOR	$ < nvars
2295	264	16	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2296	273	12	MillerUpdatingRegression.java	include	di	double	1	DEF	$ != 0.0
2297	292	8	MillerUpdatingRegression.java	smartAdd	_a	double	1	RET	$ > _b
2297	292	8	MillerUpdatingRegression.java	smartAdd	_b	double	1	RET	_a > $
2298	294	12	MillerUpdatingRegression.java	smartAdd	eps	double	0	RET	_b > $
2298	294	12	MillerUpdatingRegression.java	smartAdd	_b	double	0	RET	$ > eps
2299	300	12	MillerUpdatingRegression.java	smartAdd	eps	double	0	RET	_a > $
2299	300	12	MillerUpdatingRegression.java	smartAdd	_a	double	0	RET	$ > eps
24086	321	8	MillerUpdatingRegression.java	clear	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
24086	321	8	MillerUpdatingRegression.java	clear	i	int	0	NIL-FOR	$ < nvars
24087	339	8	MillerUpdatingRegression.java	tolset	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
24087	339	8	MillerUpdatingRegression.java	tolset	i	int	0	NIL-FOR	$ < nvars
24088	343	8	MillerUpdatingRegression.java	tolset	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
24088	343	8	MillerUpdatingRegression.java	tolset	col	int	0	NIL-FOR	$ < nvars
24089	346	12	MillerUpdatingRegression.java	tolset	row	int	0	NIL-FOR	$ < col
24089	346	12	MillerUpdatingRegression.java	tolset	col	int	0	NIL-FOR	row < $
2300	366	8	MillerUpdatingRegression.java	regcf	nreq	int	0	ModelSpecificationException	$ < 1
2301	369	8	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	ModelSpecificationException	nreq > $.nvars
2301	369	8	MillerUpdatingRegression.java	regcf	nreq	int	0	ModelSpecificationException	$ > this.nvars
2302	373	8	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	DEF	$.tol_set
24090	378	8	MillerUpdatingRegression.java	regcf	i	int	0	NIL-FOR	$ > -1
2303	379	12	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	1	DEF	Math.sqrt($.d[i]) < $.tol[i]
2303	379	12	MillerUpdatingRegression.java	regcf	i	int	1	DEF	Math.sqrt(d[$]) < tol[$]
24091	386	16	MillerUpdatingRegression.java	regcf	j	int	0	NIL-FOR	$ < nreq
24091	386	16	MillerUpdatingRegression.java	regcf	nreq	int	0	NIL-FOR	j < $
2304	392	8	MillerUpdatingRegression.java	regcf	rankProblem	boolean	0	DEF	$
24092	393	12	MillerUpdatingRegression.java	regcf	i	int	0	NIL-FOR	$ < nreq
24092	393	12	MillerUpdatingRegression.java	regcf	nreq	int	0	NIL-FOR	i < $
2305	394	16	MillerUpdatingRegression.java	regcf	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2305	394	16	MillerUpdatingRegression.java	regcf	i	int	0	DEF	this.lindep[$]
24093	411	8	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
24093	411	8	MillerUpdatingRegression.java	singcheck	i	int	0	NIL-FOR	$ < nvars
24094	414	8	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
24094	414	8	MillerUpdatingRegression.java	singcheck	col	int	0	NIL-FOR	$ < nvars
24095	420	12	MillerUpdatingRegression.java	singcheck	row	int	0	NIL-FOR	$ < col - 1
24095	420	12	MillerUpdatingRegression.java	singcheck	col	int	0	NIL-FOR	row < $ - 1
2306	421	16	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	DEF	Math.abs($.r[pos]) * $.work_sing[row] < temp
2306	421	16	MillerUpdatingRegression.java	singcheck	row	int	0	DEF	Math.abs(r[pos]) * work_sing[$] < temp
2306	421	16	MillerUpdatingRegression.java	singcheck	temp	double	0	DEF	Math.abs(r[pos]) * work_sing[row] < $
2306	421	16	MillerUpdatingRegression.java	singcheck	pos	int	0	DEF	Math.abs(r[$]) * work_sing[row] < temp
2307	430	12	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	DEF	$.work_sing[col] < temp
2307	430	12	MillerUpdatingRegression.java	singcheck	col	int	0	DEF	work_sing[$] < temp
2307	430	12	MillerUpdatingRegression.java	singcheck	temp	double	0	DEF	work_sing[col] < $
2308	432	16	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	1	DEF	col < $.nvars - 1
2308	432	16	MillerUpdatingRegression.java	singcheck	col	int	1	DEF	$ < nvars - 1
24096	435	20	MillerUpdatingRegression.java	singcheck	THIS	MillerUpdatingRegression	0	NIL-FOR	_xi < $.nvars
24096	435	20	MillerUpdatingRegression.java	singcheck	_xi	int	0	NIL-FOR	$ < nvars
24097	463	8	MillerUpdatingRegression.java	ss	i	int	0	NIL-FOR	$ > 0
2309	489	8	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	RET	$.nobs <= nreq
2309	489	8	MillerUpdatingRegression.java	cov	nreq	int	0	RET	this.nobs <= $
24098	493	8	MillerUpdatingRegression.java	cov	i	int	0	NIL-FOR	$ < nreq
24098	493	8	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	i < $
2310	494	12	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2310	494	12	MillerUpdatingRegression.java	cov	i	int	0	DEF	this.lindep[$]
24099	507	8	MillerUpdatingRegression.java	cov	row	int	0	NIL-FOR	$ < nreq
24099	507	8	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	row < $
2311	509	12	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[row]
2311	509	12	MillerUpdatingRegression.java	cov	row	int	0	DEF	this.lindep[$]
24100	510	16	MillerUpdatingRegression.java	cov	col	int	0	NIL-FOR	$ < nreq
24100	510	16	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	col < $
2312	511	20	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	1	DEF	$.lindep[col]
2312	511	20	MillerUpdatingRegression.java	cov	col	int	1	DEF	this.lindep[$]
2313	513	24	MillerUpdatingRegression.java	cov	col	int	1	DEF	row == $
2313	513	24	MillerUpdatingRegression.java	cov	row	int	1	DEF	$ == col
24101	518	24	MillerUpdatingRegression.java	cov	k	int	0	NIL-FOR	$ < nreq
24101	518	24	MillerUpdatingRegression.java	cov	nreq	int	0	NIL-FOR	k < $
2314	519	28	MillerUpdatingRegression.java	cov	THIS	MillerUpdatingRegression	0	DEF	$.lindep[k]
2314	519	28	MillerUpdatingRegression.java	cov	k	int	0	DEF	this.lindep[$]
24102	550	8	MillerUpdatingRegression.java	inverse	row	int	0	NIL-FOR	$ > 0
2315	551	12	MillerUpdatingRegression.java	inverse	THIS	MillerUpdatingRegression	1	DEF	$.lindep[row]
2315	551	12	MillerUpdatingRegression.java	inverse	row	int	1	DEF	this.lindep[$]
24103	553	16	MillerUpdatingRegression.java	inverse	col	int	0	NIL-FOR	$ > row
24103	553	16	MillerUpdatingRegression.java	inverse	row	int	0	NIL-FOR	col > $
24104	557	20	MillerUpdatingRegression.java	inverse	k	int	0	NIL-FOR	$ < col - 1
24104	557	20	MillerUpdatingRegression.java	inverse	col	int	0	NIL-FOR	k < $ - 1
2316	559	24	MillerUpdatingRegression.java	inverse	THIS	MillerUpdatingRegression	0	DEF	$.lindep[k]
2316	559	24	MillerUpdatingRegression.java	inverse	k	int	0	DEF	this.lindep[$]
2317	620	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	RET	in >= $.nvars
2317	620	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	RET	$ >= nvars
2317	620	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	RET	$ < -1
2318	625	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	DEF	$.d[in] > 0.0
2318	625	8	MillerUpdatingRegression.java	getPartialCorrelations	in	int	0	DEF	d[$] > 0.0
24105	628	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
24105	628	8	MillerUpdatingRegression.java	getPartialCorrelations	col	int	0	NIL-FOR	$ < nvars
24106	631	12	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < col
24106	631	12	MillerUpdatingRegression.java	getPartialCorrelations	col	int	0	NIL-FOR	row < $
2319	635	12	MillerUpdatingRegression.java	getPartialCorrelations	sumxx	double	1	DEF	$ > 0.0
24107	642	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	row < $.nvars
24107	642	8	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < nvars
2320	645	8	MillerUpdatingRegression.java	getPartialCorrelations	sumyy	double	0	DEF	$ > 0.0
24108	649	8	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col1 < $.nvars
24108	649	8	MillerUpdatingRegression.java	getPartialCorrelations	col1	int	0	NIL-FOR	$ < nvars
24109	653	12	MillerUpdatingRegression.java	getPartialCorrelations	row	int	0	NIL-FOR	$ < col1
24109	653	12	MillerUpdatingRegression.java	getPartialCorrelations	col1	int	0	NIL-FOR	row < $
24110	655	16	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col2 < $.nvars
24110	655	16	MillerUpdatingRegression.java	getPartialCorrelations	col2	int	0	NIL-FOR	$ < nvars
24111	663	12	MillerUpdatingRegression.java	getPartialCorrelations	THIS	MillerUpdatingRegression	0	NIL-FOR	col2 < $.nvars
24111	663	12	MillerUpdatingRegression.java	getPartialCorrelations	col2	int	0	NIL-FOR	$ < nvars
2321	701	8	MillerUpdatingRegression.java	vmove	from	int	0	RET	$ == to
2321	701	8	MillerUpdatingRegression.java	vmove	to	int	0	RET	from == $
2322	704	8	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	$.rss_set
2323	708	8	MillerUpdatingRegression.java	vmove	from	int	1	DEF	$ < to
2323	708	8	MillerUpdatingRegression.java	vmove	to	int	1	DEF	from < $
24112	720	8	MillerUpdatingRegression.java	vmove	count	int	0	NIL-WHILE	idx < $
24112	720	8	MillerUpdatingRegression.java	vmove	idx	int	0	NIL-WHILE	$ < count
2324	728	12	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d1 > $.epsilon
2324	728	12	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d2 > $.epsilon
2324	728	12	MillerUpdatingRegression.java	vmove	d1	double	0	DEF	$ > this.epsilon
2324	728	12	MillerUpdatingRegression.java	vmove	d2	double	0	DEF	$ > this.epsilon
2325	730	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	Math.abs(X) * Math.sqrt(d1) < $.tol[mp1]
2325	730	16	MillerUpdatingRegression.java	vmove	d1	double	0	DEF	Math.abs(X) * Math.sqrt($) < tol[mp1]
2325	730	16	MillerUpdatingRegression.java	vmove	mp1	int	0	DEF	Math.abs(X) * Math.sqrt(d1) < tol[$]
2326	733	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	1	DEF	d1 < $.epsilon
2326	733	16	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	1	DEF	Math.abs(X) < $.epsilon
2326	733	16	MillerUpdatingRegression.java	vmove	d1	double	1	DEF	$ < this.epsilon
24113	737	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
24113	737	20	MillerUpdatingRegression.java	vmove	col	int	0	NIL-FOR	$ < nvars
2327	749	23	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	DEF	d2 < $.epsilon
2327	749	23	MillerUpdatingRegression.java	vmove	d2	double	0	DEF	$ < this.epsilon
24114	752	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	_i < m1 + $.nvars - m - 1
24114	752	20	MillerUpdatingRegression.java	vmove	_i	int	0	NIL-FOR	$ < m1 + nvars - m - 1
24114	752	20	MillerUpdatingRegression.java	vmove	m1	int	0	NIL-FOR	_i < $ + nvars - m - 1
24114	752	20	MillerUpdatingRegression.java	vmove	m	int	0	NIL-FOR	_i < m1 + nvars - $ - 1
2328	759	16	MillerUpdatingRegression.java	vmove	bSkipTo40	boolean	0	DEF	$
24115	767	20	MillerUpdatingRegression.java	vmove	THIS	MillerUpdatingRegression	0	NIL-FOR	col < $.nvars
24115	767	20	MillerUpdatingRegression.java	vmove	col	int	0	NIL-FOR	$ < nvars
2329	779	12	MillerUpdatingRegression.java	vmove	m	int	0	DEF	$ > 0
24116	781	16	MillerUpdatingRegression.java	vmove	row	int	0	NIL-FOR	$ < m
24116	781	16	MillerUpdatingRegression.java	vmove	m	int	0	NIL-FOR	row < $
2330	822	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	RET	list.$.length > $.nvars + 1 - pos1
2330	822	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	RET	list.$.length < 1
2330	822	8	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	$.length > nvars + 1 - pos1
2330	822	8	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	$.length < 1
2330	822	8	MillerUpdatingRegression.java	reorderRegressors	pos1	int	0	RET	list.length > nvars + 1 - $
24117	827	8	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	NIL-WHILE	i < $.nvars
24117	827	8	MillerUpdatingRegression.java	reorderRegressors	i	int	0	NIL-WHILE	$ < nvars
24118	829	12	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	0	NIL-FOR	j < list.$.length
24118	829	12	MillerUpdatingRegression.java	reorderRegressors	j	int	0	NIL-FOR	$ < list.length
24118	829	12	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	NIL-FOR	j < $.length
2331	830	16	MillerUpdatingRegression.java	reorderRegressors	j	int	0	RET	l == list[$]
2331	830	16	MillerUpdatingRegression.java	reorderRegressors	next	int	0	RET	i > $
2331	830	16	MillerUpdatingRegression.java	reorderRegressors	i	int	0	RET	$ > next
2331	830	16	MillerUpdatingRegression.java	reorderRegressors	l	int	0	RET	$ == list[j]
2331	830	16	MillerUpdatingRegression.java	reorderRegressors	list	int[]	0	RET	l == $[j]
2332	833	20	MillerUpdatingRegression.java	reorderRegressors	THIS	MillerUpdatingRegression	1	RET	next >= list.$.length + pos1
2332	833	20	MillerUpdatingRegression.java	reorderRegressors	next	int	1	RET	$ >= list.length + pos1
2332	833	20	MillerUpdatingRegression.java	reorderRegressors	list	int[]	1	RET	next >= $.length + pos1
2332	833	20	MillerUpdatingRegression.java	reorderRegressors	pos1	int	1	RET	next >= list.length + $
2333	856	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	0	RET	row_data.$.length > $.nvars
2333	856	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	row_data	double[]	0	RET	$.length > nvars
2334	860	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	1	DEF	$.hasIntercept
24119	868	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	0	NIL-FOR	col < xrow.$.length
24119	868	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	0	NIL-FOR	$ < xrow.length
24119	868	8	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	xrow	double[]	0	NIL-FOR	col < $.length
2335	869	12	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	THIS	MillerUpdatingRegression	1	DEF	Math.sqrt($.d[col]) < $.tol[col]
2335	869	12	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	1	DEF	Math.sqrt(d[$]) < tol[$]
24120	874	16	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	row	int	0	NIL-FOR	$ < col
24120	874	16	MillerUpdatingRegression.java	getDiagonalOfHatMatrix	col	int	0	NIL-FOR	row < $
2336	918	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.nobs <= numberOfRegressors
2336	918	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	ModelSpecificationException	this.nobs <= $
2337	923	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	numberOfRegressors > $.nvars
2337	923	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	ModelSpecificationException	$ > this.nvars
24121	938	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.lindep.length
24121	938	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.lindep.length
2338	939	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2338	939	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.lindep[$]
24122	945	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < numberOfRegressors
24122	945	8	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	NIL-FOR	i < $
2339	946	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[i] != i
2339	946	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[$] != $
2340	951	8	MillerUpdatingRegression.java	regress	needsReorder	boolean	1	RET	$
24123	960	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
24123	960	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < nvars
24124	961	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ < numberOfRegressors
24124	961	16	MillerUpdatingRegression.java	regress	numberOfRegressors	int	0	NIL-FOR	j < $
2341	962	20	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[j] == i
2341	962	20	MillerUpdatingRegression.java	regress	j	int	0	DEF	this.vorder[$] == i
2341	962	20	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[j] == $
24125	973	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < beta.$.length
24125	973	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < beta.length
24125	973	12	MillerUpdatingRegression.java	regress	beta	double[]	0	NIL-FOR	i < $.length
24126	975	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ <= i
24126	975	16	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	j <= $
2342	977	20	MillerUpdatingRegression.java	regress	_i	int	1	DEF	$ > _j
2342	977	20	MillerUpdatingRegression.java	regress	_j	int	1	DEF	_i > $
2343	1004	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	variablesToInclude.$.length > $.nvars
2343	1004	8	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > this.nvars
2344	1008	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	$.nobs <= $.nvars
24127	1015	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < variablesToInclude.$.length
24127	1015	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < variablesToInclude.length
24127	1015	8	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	NIL-FOR	i < $.length
2345	1016	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	ModelSpecificationException	i >= $.nvars
2345	1016	12	MillerUpdatingRegression.java	regress	i	int	0	ModelSpecificationException	$ >= this.nvars
2346	1020	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	variablesToInclude[$] == variablesToInclude[$ - 1]
2346	1020	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	$ > 0
2346	1020	12	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	DEF	$[i] == $[i - 1]
2347	1026	8	MillerUpdatingRegression.java	regress	iExclude	int	1	DEF	$ > 0
24128	1029	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < variablesToInclude.$.length
24128	1029	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < variablesToInclude.length
24128	1029	12	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	NIL-FOR	i < $.length
2348	1030	16	MillerUpdatingRegression.java	regress	i	int	0	DEF	variablesToInclude[$] > -1
2348	1030	16	MillerUpdatingRegression.java	regress	variablesToInclude	int[]	0	DEF	$[i] > -1
24129	1050	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.lindep.length
24129	1050	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.lindep.length
2349	1051	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.lindep[i]
2349	1051	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.lindep[$]
24130	1057	8	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < $.nvars
24130	1057	8	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < this.nvars
2350	1058	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[i] != series[i]
2350	1058	12	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[$] != series[$]
2350	1058	12	MillerUpdatingRegression.java	regress	series	int[]	0	DEF	this.vorder[i] != $[i]
2351	1063	8	MillerUpdatingRegression.java	regress	needsReorder	boolean	1	RET	$
24131	1070	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < series.$.length
24131	1070	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < series.length
24131	1070	12	MillerUpdatingRegression.java	regress	series	int[]	0	NIL-FOR	i < $.length
24132	1071	16	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	j < $.vorder.length
24132	1071	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ < this.vorder.length
2352	1072	20	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	DEF	$.vorder[j] == series[i]
2352	1072	20	MillerUpdatingRegression.java	regress	j	int	0	DEF	this.vorder[$] == series[i]
2352	1072	20	MillerUpdatingRegression.java	regress	i	int	0	DEF	this.vorder[j] == series[$]
2352	1072	20	MillerUpdatingRegression.java	regress	series	int[]	0	DEF	this.vorder[j] == $[i]
24133	1083	12	MillerUpdatingRegression.java	regress	THIS	MillerUpdatingRegression	0	NIL-FOR	i < beta.$.length
24133	1083	12	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	$ < beta.length
24133	1083	12	MillerUpdatingRegression.java	regress	beta	double[]	0	NIL-FOR	i < $.length
24134	1085	16	MillerUpdatingRegression.java	regress	j	int	0	NIL-FOR	$ <= i
24134	1085	16	MillerUpdatingRegression.java	regress	i	int	0	NIL-FOR	j <= $
2353	1087	20	MillerUpdatingRegression.java	regress	_i	int	1	DEF	$ > _j
2353	1087	20	MillerUpdatingRegression.java	regress	_j	int	1	DEF	_i > $
2124	76	8	Min.java	increment	THIS	Min	0	DEF	d < $.value
2124	76	8	Min.java	increment	THIS	Min	0	DEF	Double.isNaN($.value)
2124	76	8	Min.java	increment	d	double	0	DEF	$ < value
2125	131	8	Min.java	evaluate	THIS	Min	0	DEF	$.test(values, begin, length)
2125	131	8	Min.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2125	131	8	Min.java	evaluate	begin	int	0	DEF	test(values, $, length)
2125	131	8	Min.java	evaluate	length	int	0	DEF	test(values, begin, $)
24002	133	12	Min.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
24002	133	12	Min.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
24002	133	12	Min.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2126	134	16	Min.java	evaluate	i	int	0	DEF	Double.isNaN(values[$])
2126	134	16	Min.java	evaluate	values	double[]	0	DEF	Double.isNaN($[i])
3300	92	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMin) < $
3300	92	8	MullerSolver.java	doSolve	fMin	double	0	RET	FastMath.abs($) < functionValueAccuracy
3301	96	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fMax) < $
3301	96	8	MullerSolver.java	doSolve	fMax	double	0	RET	FastMath.abs($) < functionValueAccuracy
3302	100	8	MullerSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(fInitial) < $
3302	100	8	MullerSolver.java	doSolve	fInitial	double	0	RET	FastMath.abs($) < functionValueAccuracy
3303	106	8	MullerSolver.java	doSolve	THIS	MullerSolver	1	RET	$.isBracketing(min, initial)
3303	106	8	MullerSolver.java	doSolve	min	double	1	RET	isBracketing($, initial)
3303	106	8	MullerSolver.java	doSolve	initial	double	1	RET	isBracketing(min, $)
3304	160	12	MullerSolver.java	solve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
3304	160	12	MullerSolver.java	solve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3304	160	12	MullerSolver.java	solve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
3304	160	12	MullerSolver.java	solve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
3304	160	12	MullerSolver.java	solve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
3305	173	12	MullerSolver.java	solve	bisect	boolean	1	DEF	$
3306	183	16	MullerSolver.java	solve	ym	double	1	DEF	FastMath.signum(y0) + FastMath.signum($) == 0.0
3306	183	16	MullerSolver.java	solve	y0	double	1	DEF	FastMath.signum($) + FastMath.signum(ym) == 0.0
3294	98	8	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y0) < $
3294	98	8	MullerSolver2.java	doSolve	y0	double	0	RET	FastMath.abs($) < functionValueAccuracy
3295	103	8	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y1) < $
3295	103	8	MullerSolver2.java	doSolve	y1	double	0	RET	FastMath.abs($) < functionValueAccuracy
3296	107	8	MullerSolver2.java	doSolve	y0	double	0	NoBracketingException	$ * y1 > 0
3296	107	8	MullerSolver2.java	doSolve	y1	double	0	NoBracketingException	y0 * $ > 0
3297	124	12	MullerSolver2.java	doSolve	delta	double	1	DEF	$ >= 0.0
3298	133	12	MullerSolver2.java	doSolve	denominator	double	1	DEF	$ != 0
24557	137	16	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x1
24557	137	16	MullerSolver2.java	doSolve	x	double	0	NIL-WHILE	$ == x2
24557	137	16	MullerSolver2.java	doSolve	x1	double	0	NIL-WHILE	x == $
24557	137	16	MullerSolver2.java	doSolve	x2	double	0	NIL-WHILE	x == $
3299	149	12	MullerSolver2.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
3299	149	12	MullerSolver2.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3299	149	12	MullerSolver2.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
3299	149	12	MullerSolver2.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
3299	149	12	MullerSolver2.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
1773	164	8	MultiDirectionalSimplex.java	iterate	best	PointValuePair	0	RET	comparator.compare(reflected, $) < 0
1773	164	8	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare($, best) < 0
1773	164	8	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(reflected, best) < 0
1774	169	12	MultiDirectionalSimplex.java	iterate	expanded	PointValuePair	0	DEF	comparator.compare(reflected, $) <= 0
1774	169	12	MultiDirectionalSimplex.java	iterate	reflected	PointValuePair	0	DEF	comparator.compare($, expanded) <= 0
1774	169	12	MultiDirectionalSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	DEF	$.compare(reflected, expanded) <= 0
23776	203	8	MultiDirectionalSimplex.java	evaluateNewSimplex	THIS	MultiDirectionalSimplex	0	NIL-FOR	i < $.getSize()
23776	203	8	MultiDirectionalSimplex.java	evaluateNewSimplex	i	int	0	NIL-FOR	$ < getSize()
23777	206	12	MultiDirectionalSimplex.java	evaluateNewSimplex	j	int	0	NIL-FOR	$ < dim
23777	206	12	MultiDirectionalSimplex.java	evaluateNewSimplex	dim	int	0	NIL-FOR	j < $
22745	173	8	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
22745	173	8	MultidimensionalCounter.java	MultidimensionalCounter	i	int	0	NIL-FOR	$ < last
22746	175	12	MultidimensionalCounter.java	MultidimensionalCounter	THIS	MultidimensionalCounter	0	NIL-FOR	j < $.dimension
22746	175	12	MultidimensionalCounter.java	MultidimensionalCounter	j	int	0	NIL-FOR	$ < dimension
94	183	8	MultidimensionalCounter.java	MultidimensionalCounter	tS	int	0	NotStrictlyPositiveException	$ <= 0
95	217	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.totalSize
95	217	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ < 0
95	217	8	MultidimensionalCounter.java	getCounts	index	int	0	OutOfRangeException	$ >= totalSize
22747	225	8	MultidimensionalCounter.java	getCounts	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.last
22747	225	8	MultidimensionalCounter.java	getCounts	i	int	0	NIL-FOR	$ < last
22748	228	12	MultidimensionalCounter.java	getCounts	count	int	0	NIL-WHILE	$ <= index
22748	228	12	MultidimensionalCounter.java	getCounts	index	int	0	NIL-WHILE	count <= $
96	254	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	DimensionMismatchException	c.$.length != $.dimension
96	254	8	MultidimensionalCounter.java	getCount	c	int	0	DimensionMismatchException	$.length != dimension
22749	258	8	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
22749	258	8	MultidimensionalCounter.java	getCount	i	int	0	NIL-FOR	$ < dimension
97	260	12	MultidimensionalCounter.java	getCount	THIS	MultidimensionalCounter	0	OutOfRangeException	index >= $.size[i]
97	260	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ < 0
97	260	12	MultidimensionalCounter.java	getCount	index	int	0	OutOfRangeException	$ >= size[i]
97	260	12	MultidimensionalCounter.java	getCount	i	int	0	OutOfRangeException	index >= size[$]
22750	292	8	MultidimensionalCounter.java	toString	THIS	MultidimensionalCounter	0	NIL-FOR	i < $.dimension
22750	292	8	MultidimensionalCounter.java	toString	i	int	0	NIL-FOR	$ < dimension
2802	116	8	MultistepIntegrator.java	MultistepIntegrator	nSteps	int	0	MathIllegalArgumentException	$ <= 1
2012	103	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
2012	103	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
2012	103	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
23969	106	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < lower.$.length
23969	106	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < lower.length
23969	106	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NIL-FOR	i < $.length
2013	108	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
2013	108	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
2013	108	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
23970	115	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
23970	115	8	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	0	NIL-FOR	$ < mappers.length
2014	116	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(lower[$])
2014	116	12	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	lower	double[]	1	DEF	Double.isInfinite($[i])
2015	117	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
2015	117	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
2016	125	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	i	int	1	DEF	Double.isInfinite(upper[$])
2016	125	16	MultivariateFunctionMappingAdapter.java	MultivariateFunctionMappingAdapter	upper	double[]	1	DEF	Double.isInfinite($[i])
23971	145	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
23971	145	8	MultivariateFunctionMappingAdapter.java	unboundedToBounded	i	int	0	NIL-FOR	$ < mappers.length
23972	161	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	THIS	MultivariateFunctionMappingAdapter	0	NIL-FOR	i < $.mappers.$.length
23972	161	8	MultivariateFunctionMappingAdapter.java	boundedToUnbounded	i	int	0	NIL-FOR	$ < mappers.length
2006	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != upper.$.length
2006	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != upper.length
2006	131	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	DimensionMismatchException	lower.length != $.length
2007	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	DimensionMismatchException	lower.$.length != scale.$.length
2007	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	DimensionMismatchException	$.length != scale.length
2007	134	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	scale	double[]	0	DimensionMismatchException	lower.length != $.length
23966	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < lower.$.length
23966	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NIL-FOR	$ < lower.length
23966	137	8	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NIL-FOR	i < $.length
2008	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	i	int	0	NumberIsTooSmallException	upper[$] >= lower[$]
2008	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	lower	double[]	0	NumberIsTooSmallException	upper[i] >= $[i]
2008	139	12	MultivariateFunctionPenaltyAdapter.java	MultivariateFunctionPenaltyAdapter	upper	double[]	0	NumberIsTooSmallException	$[i] >= lower[i]
23967	164	8	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	i < $.scale.$.length
23967	164	8	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	NIL-FOR	$ < scale.length
2009	165	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] > $.upper[i]
2009	165	12	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	RET	point[i] < $.lower[i]
2009	165	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] > upper[$]
2009	165	12	MultivariateFunctionPenaltyAdapter.java	value	i	int	0	RET	point[$] < lower[$]
2009	165	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] > upper[i]
2009	165	12	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	0	RET	$[i] < lower[i]
23968	168	16	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	0	NIL-FOR	j < $.scale.$.length
23968	168	16	MultivariateFunctionPenaltyAdapter.java	value	j	int	0	NIL-FOR	$ < scale.length
2010	170	20	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] < $.lower[j]
2010	170	20	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] < lower[$]
2010	170	20	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] < lower[j]
2011	172	27	MultivariateFunctionPenaltyAdapter.java	value	THIS	MultivariateFunctionPenaltyAdapter	1	DEF	point[j] > $.upper[j]
2011	172	27	MultivariateFunctionPenaltyAdapter.java	value	j	int	1	DEF	point[$] > upper[$]
2011	172	27	MultivariateFunctionPenaltyAdapter.java	value	point	double[]	1	DEF	$[j] > upper[j]
23973	126	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	i	int	0	NIL-FOR	$ < k
23973	126	8	MultivariateSummaryStatistics.java	MultivariateSummaryStatistics	k	int	0	NIL-FOR	i < $
23974	150	8	MultivariateSummaryStatistics.java	addValue	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
23974	150	8	MultivariateSummaryStatistics.java	addValue	i	int	0	NIL-FOR	$ < k
23975	187	8	MultivariateSummaryStatistics.java	getResults	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < results.$.length
23975	187	8	MultivariateSummaryStatistics.java	getResults	i	int	0	NIL-FOR	$ < results.length
23975	187	8	MultivariateSummaryStatistics.java	getResults	results	double[]	0	NIL-FOR	i < $.length
2017	246	8	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 1
2018	248	15	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	1	DEF	$.getN() < 2
23976	252	12	MultivariateSummaryStatistics.java	getStandardDeviation	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
23976	252	12	MultivariateSummaryStatistics.java	getStandardDeviation	i	int	0	NIL-FOR	$ < k
23977	336	8	MultivariateSummaryStatistics.java	append	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < data.$.length
23977	336	8	MultivariateSummaryStatistics.java	append	i	int	0	NIL-FOR	$ < data.length
23977	336	8	MultivariateSummaryStatistics.java	append	data	double[]	0	NIL-FOR	i < $.length
2019	337	12	MultivariateSummaryStatistics.java	append	i	int	0	DEF	$ > 0
23978	350	8	MultivariateSummaryStatistics.java	clear	THIS	MultivariateSummaryStatistics	0	NIL-FOR	i < $.k
23978	350	8	MultivariateSummaryStatistics.java	clear	i	int	0	NIL-FOR	$ < k
2020	370	8	MultivariateSummaryStatistics.java	equals	THIS	MultivariateSummaryStatistics	0	RET	object == $
2020	370	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ == this
2021	373	8	MultivariateSummaryStatistics.java	equals	object	Object	0	RET	$ instanceof MultivariateSummaryStatistics == false
2022	612	8	MultivariateSummaryStatistics.java	checkEmpty	THIS	MultivariateSummaryStatistics	0	MathIllegalStateException	$.n > 0
2023	624	8	MultivariateSummaryStatistics.java	checkDimension	THIS	MultivariateSummaryStatistics	0	DimensionMismatchException	dimension != $.k
2023	624	8	MultivariateSummaryStatistics.java	checkDimension	dimension	int	0	DimensionMismatchException	$ != k
2518	70	8	NPointCrossover.java	NPointCrossover	crossoverPoints	int	0	NotStrictlyPositiveException	$ <= 0
2519	111	8	NPointCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2519	111	8	NPointCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2520	130	8	NPointCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
2520	130	8	NPointCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
2521	133	8	NPointCrossover.java	mate	THIS	NPointCrossover	0	NumberIsTooLargeException	$.crossoverPoints >= length
2521	133	8	NPointCrossover.java	mate	length	int	0	NumberIsTooLargeException	crossoverPoints >= $
24193	151	8	NPointCrossover.java	mate	THIS	NPointCrossover	0	NIL-FOR	i < $.crossoverPoints
24193	151	8	NPointCrossover.java	mate	i	int	0	NIL-FOR	$ < crossoverPoints
24194	156	12	NPointCrossover.java	mate	j	int	0	NIL-FOR	$ < crossoverIndex
24194	156	12	NPointCrossover.java	mate	crossoverIndex	int	0	NIL-FOR	j < $
24195	170	8	NPointCrossover.java	mate	j	int	0	NIL-FOR	$ < length
24195	170	8	NPointCrossover.java	mate	length	int	0	NIL-FOR	j < $
24064	194	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < data.$.length
24064	194	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < data.length
24064	194	8	NaturalRanking.java	rank	data	double[]	0	NIL-FOR	i < $.length
24065	227	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
24065	227	8	NaturalRanking.java	rank	i	int	0	NIL-FOR	$ < ranks.length
24065	227	8	NaturalRanking.java	rank	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2250	228	12	NaturalRanking.java	rank	i	int	1	DEF	Double.compare(ranks[$].getValue(), ranks[$ - 1].getValue()) > 0
2250	228	12	NaturalRanking.java	rank	ranks	IntDoublePair[]	1	DEF	Double.compare($[i].getValue(), $[i - 1].getValue()) > 0
2251	231	16	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
2252	242	8	NaturalRanking.java	rank	tiesTrace	List<Integer>	0	DEF	$.size() > 1
2253	245	8	NaturalRanking.java	rank	THIS	NaturalRanking	0	DEF	$.nanStrategy == $.NaNStrategy.FIXED
2254	259	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	RET	$.containsNaNs(ranks)
2254	259	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	RET	containsNaNs($)
24066	264	8	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
24066	264	8	NaturalRanking.java	removeNaNs	i	int	0	NIL-FOR	$ < ranks.length
24066	264	8	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2255	265	12	NaturalRanking.java	removeNaNs	i	int	1	DEF	Double.isNaN(ranks[$].getValue())
2255	265	12	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	1	DEF	Double.isNaN($[i].getValue())
24067	267	16	NaturalRanking.java	removeNaNs	THIS	NaturalRanking	0	NIL-FOR	k < ranks.$.length
24067	267	16	NaturalRanking.java	removeNaNs	k	int	0	NIL-FOR	$ < ranks.length
24067	267	16	NaturalRanking.java	removeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	k < $.length
24068	289	8	NaturalRanking.java	recodeNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
24068	289	8	NaturalRanking.java	recodeNaNs	i	int	0	NIL-FOR	$ < ranks.length
24068	289	8	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2256	290	12	NaturalRanking.java	recodeNaNs	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
2256	290	12	NaturalRanking.java	recodeNaNs	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
24069	304	8	NaturalRanking.java	containsNaNs	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
24069	304	8	NaturalRanking.java	containsNaNs	i	int	0	NIL-FOR	$ < ranks.length
24069	304	8	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2257	305	12	NaturalRanking.java	containsNaNs	i	int	0	RET	Double.isNaN(ranks[$].getValue())
2257	305	12	NaturalRanking.java	containsNaNs	ranks	IntDoublePair[]	0	RET	Double.isNaN($[i].getValue())
24070	347	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
24071	357	16	NaturalRanking.java	resolveTie	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
24072	375	8	NaturalRanking.java	fill	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
2258	387	8	NaturalRanking.java	restoreNaNs	nanPositions	List<Integer>	0	RET	$.size() == 0
24073	391	8	NaturalRanking.java	restoreNaNs	iterator	Iterator<Integer>	0	NIL-WHILE	$.hasNext()
24074	405	8	NaturalRanking.java	getNanPositions	THIS	NaturalRanking	0	NIL-FOR	i < ranks.$.length
24074	405	8	NaturalRanking.java	getNanPositions	i	int	0	NIL-FOR	$ < ranks.length
24074	405	8	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	NIL-FOR	i < $.length
2259	406	12	NaturalRanking.java	getNanPositions	i	int	0	DEF	Double.isNaN(ranks[$].getValue())
2259	406	12	NaturalRanking.java	getNanPositions	ranks	IntDoublePair[]	0	DEF	Double.isNaN($[i].getValue())
23956	201	8	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ < n
23956	201	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i < $
23957	203	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
23957	203	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
23958	208	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
23958	208	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
23959	214	8	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
23959	214	8	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
1994	220	8	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare($, reflected) <= 0
1994	220	8	NelderMeadSimplex.java	iterate	secondBest	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
1994	220	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, secondBest) < 0
1994	220	8	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(best, $) <= 0
1994	220	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, secondBest) < 0
1994	220	8	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(best, reflected) <= 0
1995	224	15	NelderMeadSimplex.java	iterate	best	PointValuePair	1	DEF	comparator.compare(reflected, $) < 0
1995	224	15	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare($, best) < 0
1995	224	15	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(reflected, best) < 0
23960	227	12	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
23960	227	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
1996	233	12	NelderMeadSimplex.java	iterate	expanded	PointValuePair	1	DEF	comparator.compare($, reflected) < 0
1996	233	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	DEF	comparator.compare(expanded, $) < 0
1996	233	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	DEF	$.compare(expanded, reflected) < 0
1997	241	12	NelderMeadSimplex.java	iterate	worst	PointValuePair	1	RET	comparator.compare(reflected, $) < 0
1997	241	12	NelderMeadSimplex.java	iterate	reflected	PointValuePair	1	RET	comparator.compare($, worst) < 0
1997	241	12	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	1	RET	$.compare(reflected, worst) < 0
23961	244	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
23961	244	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
1998	249	16	NelderMeadSimplex.java	iterate	outContracted	PointValuePair	0	RET	comparator.compare($, reflected) <= 0
1998	249	16	NelderMeadSimplex.java	iterate	reflected	PointValuePair	0	RET	comparator.compare(outContracted, $) <= 0
1998	249	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(outContracted, reflected) <= 0
23962	257	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
23962	257	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
1999	263	16	NelderMeadSimplex.java	iterate	inContracted	PointValuePair	0	RET	comparator.compare($, worst) < 0
1999	263	16	NelderMeadSimplex.java	iterate	worst	PointValuePair	0	RET	comparator.compare(inContracted, $) < 0
1999	263	16	NelderMeadSimplex.java	iterate	comparator	Comparator<PointValuePair>	0	RET	$.compare(inContracted, worst) < 0
23963	272	12	NelderMeadSimplex.java	iterate	i	int	0	NIL-FOR	$ <= n
23963	272	12	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	i <= $
23964	274	16	NelderMeadSimplex.java	iterate	j	int	0	NIL-FOR	$ < n
23964	274	16	NelderMeadSimplex.java	iterate	n	int	0	NIL-FOR	j < $
742	78	8	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	MathIllegalArgumentException	$[0] == null
22823	88	8	NestedLoops.java	NestedLoops	THIS	NestedLoops	0	NIL-FOR	i < loop.$.length
22823	88	8	NestedLoops.java	NestedLoops	i	int	0	NIL-FOR	$ < loop.length
22823	88	8	NestedLoops.java	NestedLoops	loop	Vector2D[]	0	NIL-FOR	i < $.length
743	99	8	NestedLoops.java	NestedLoops	THIS	NestedLoops	1	DEF	Double.isInfinite($.polygon.getSize())
744	126	12	NestedLoops.java	add	THIS	NestedLoops	0	RET	$.child.$.polygon.contains(node.$.polygon)
744	126	12	NestedLoops.java	add	node	NestedLoops	0	RET	child.polygon.contains($.polygon)
22824	133	8	NestedLoops.java	add	iterator	Iterator<NestedLoops>	0	NIL-FOR	$.hasNext()
745	135	12	NestedLoops.java	add	THIS	NestedLoops	0	DEF	node.$.polygon.contains(child.$.polygon)
745	135	12	NestedLoops.java	add	child	NestedLoops	0	DEF	node.polygon.contains($.polygon)
745	135	12	NestedLoops.java	add	node	NestedLoops	0	DEF	$.polygon.contains(child.polygon)
746	144	12	NestedLoops.java	add	THIS	NestedLoops	0	MathIllegalArgumentException	factory.intersection(node.$.polygon, $.child.$.polygon).isEmpty()
746	144	12	NestedLoops.java	add	factory	RegionFactory<Euclidean2D>	0	MathIllegalArgumentException	$.intersection(node.polygon, child.polygon).isEmpty()
746	144	12	NestedLoops.java	add	node	NestedLoops	0	MathIllegalArgumentException	factory.intersection($.polygon, child.polygon).isEmpty()
747	170	8	NestedLoops.java	setClockWise	THIS	NestedLoops	0	DEF	$.originalIsClockwise ^ clockwise
747	170	8	NestedLoops.java	setClockWise	clockwise	boolean	0	DEF	originalIsClockwise ^ $
22825	174	12	NestedLoops.java	setClockWise	min	int	0	NIL-WHILE	++$ < --max
22825	174	12	NestedLoops.java	setClockWise	max	int	0	NIL-WHILE	++min < --$
3266	81	12	NewtonSolver.java	doSolve	absoluteAccuracy	double	0	RET	FastMath.abs(x1 - x0) <= $
3266	81	12	NewtonSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) <= absoluteAccuracy
3266	81	12	NewtonSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) <= absoluteAccuracy
1736	139	8	NonLinearConjugateGradientOptimizer.java	setInitialStep	initialStep	double	1	DEF	$ <= 0
1737	154	8	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
1737	154	8	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
23747	155	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
23747	155	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
23748	165	8	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
23748	165	8	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1738	178	12	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	$ != null
1739	179	16	NonLinearConjugateGradientOptimizer.java	doOptimize	previous	PointValuePair	0	RET	checker.converged(iter, $, current)
1739	179	16	NonLinearConjugateGradientOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	RET	$.converged(iter, previous, current)
1739	179	16	NonLinearConjugateGradientOptimizer.java	doOptimize	current	PointValuePair	0	RET	checker.converged(iter, previous, $)
1739	179	16	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	0	RET	checker.converged($, previous, current)
23749	195	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < $.point.$.length
23749	195	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < point.length
1740	200	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	DEF	goal == $.GoalType.MINIMIZE
1740	200	12	NonLinearConjugateGradientOptimizer.java	doOptimize	goal	GoalType	0	DEF	$ == GoalType.MINIMIZE
23750	201	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
23750	201	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
23751	210	12	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
23751	210	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1741	215	12	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	1	DEF	$.updateFormula == $.ConjugateGradientFormula.FLETCHER_REEVES
23752	219	16	NonLinearConjugateGradientOptimizer.java	doOptimize	THIS	NonLinearConjugateGradientOptimizer	0	NIL-FOR	i < r.$.length
23752	219	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < r.length
23752	219	16	NonLinearConjugateGradientOptimizer.java	doOptimize	r	double[]	0	NIL-FOR	i < $.length
1742	227	12	NonLinearConjugateGradientOptimizer.java	doOptimize	beta	double	1	DEF	$ < 0
1742	227	12	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	1	DEF	iter % $ == 0
1742	227	12	NonLinearConjugateGradientOptimizer.java	doOptimize	iter	int	1	DEF	$ % n == 0
23753	233	16	NonLinearConjugateGradientOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
23753	233	16	NonLinearConjugateGradientOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
23754	253	8	NonLinearConjugateGradientOptimizer.java	findUpperBound	step	double	0	NIL-FOR	$ < Double.MAX_VALUE
1743	256	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yA	double	0	RET	$ * yB <= 0
1743	256	12	NonLinearConjugateGradientOptimizer.java	findUpperBound	yB	double	0	RET	yA * $ <= 0
2631	85	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.scaled != null
2631	85	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.scaled != null
2632	88	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.nordsieck != null
2632	88	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.nordsieck != null
2633	91	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	THIS	NordsieckStepInterpolator	0	DEF	interpolator.$.stateVariation != null
2633	91	8	NordsieckStepInterpolator.java	NordsieckStepInterpolator	interpolator	NordsieckStepInterpolator	0	DEF	$.stateVariation != null
24252	150	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < $.scaled.$.length
24252	150	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < scaled.length
24253	156	8	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	i < nData.$.length
24253	156	8	NordsieckStepInterpolator.java	rescale	i	int	0	NIL-FOR	$ < nData.length
24253	156	8	NordsieckStepInterpolator.java	rescale	nData	double[][]	0	NIL-FOR	i < $.length
24254	159	12	NordsieckStepInterpolator.java	rescale	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
24254	159	12	NordsieckStepInterpolator.java	rescale	j	int	0	NIL-FOR	$ < nDataI.length
24254	159	12	NordsieckStepInterpolator.java	rescale	nDataI	double[]	0	NIL-FOR	j < $.length
24255	199	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ >= 0
24256	203	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < nDataI.$.length
24256	203	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < nDataI.length
24256	203	12	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	nDataI	double[]	0	NIL-FOR	j < $.length
24257	210	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	NordsieckStepInterpolator	0	NIL-FOR	j < $.currentState.$.length
24257	210	8	NordsieckStepInterpolator.java	computeInterpolatedStateAndDerivatives	j	int	0	NIL-FOR	$ < currentState.length
2634	232	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.scaled == null
24258	236	12	NordsieckStepInterpolator.java	writeExternal	j	int	0	NIL-FOR	$ < n
24258	236	12	NordsieckStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	j < $
2635	241	8	NordsieckStepInterpolator.java	writeExternal	THIS	NordsieckStepInterpolator	1	DEF	$.nordsieck == null
2636	266	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
24259	268	12	NordsieckStepInterpolator.java	readExternal	j	int	0	NIL-FOR	$ < n
24259	268	12	NordsieckStepInterpolator.java	readExternal	n	int	0	NIL-FOR	j < $
2637	276	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
2638	282	8	NordsieckStepInterpolator.java	readExternal	hasScaled	boolean	1	DEF	$
2638	282	8	NordsieckStepInterpolator.java	readExternal	hasNordsieck	boolean	1	DEF	$
948	106	8	NormalDistribution.java	NormalDistribution	sd	double	0	NotStrictlyPositiveException	$ <= 0
949	160	8	NormalDistribution.java	cumulativeProbability	THIS	NormalDistribution	0	RET	FastMath.abs(dev) > 40 * $.standardDeviation
949	160	8	NormalDistribution.java	cumulativeProbability	dev	double	0	RET	FastMath.abs($) > 40 * standardDeviation
950	170	8	NormalDistribution.java	cumulativeProbability	x0	double	0	NumberIsTooLargeException	$ > x1
950	170	8	NormalDistribution.java	cumulativeProbability	x1	double	0	NumberIsTooLargeException	x0 > $
24135	106	8	OLSMultipleLinearRegression.java	calculateHat	i	int	0	NIL-FOR	$ < n
24135	106	8	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	i < $
24136	107	12	OLSMultipleLinearRegression.java	calculateHat	j	int	0	NIL-FOR	$ < n
24136	107	12	OLSMultipleLinearRegression.java	calculateHat	n	int	0	NIL-FOR	j < $
2354	108	16	OLSMultipleLinearRegression.java	calculateHat	j	int	1	DEF	i == $
2354	108	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ < p
2354	108	16	OLSMultipleLinearRegression.java	calculateHat	i	int	1	DEF	$ == j
2354	108	16	OLSMultipleLinearRegression.java	calculateHat	p	int	1	DEF	i < $
2355	134	8	OLSMultipleLinearRegression.java	calculateTotalSumOfSquares	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
2356	184	8	OLSMultipleLinearRegression.java	calculateAdjustedRSquared	THIS	OLSMultipleLinearRegression	1	RET	$.isNoIntercept()
2563	80	8	OnePointCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2563	80	8	OnePointCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2564	98	8	OnePointCrossover.java	crossover	length	int	0	DimensionMismatchException	$ != second.getLength()
2564	98	8	OnePointCrossover.java	crossover	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
24208	113	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < crossoverIndex
24208	113	8	OnePointCrossover.java	crossover	crossoverIndex	int	0	NIL-FOR	i < $
24209	118	8	OnePointCrossover.java	crossover	i	int	0	NIL-FOR	$ < length
24209	118	8	OnePointCrossover.java	crossover	length	int	0	NIL-FOR	i < $
2181	172	8	OneWayAnova.java	anovaTest	alpha	double	0	OutOfRangeException	$ <= 0
2181	172	8	OneWayAnova.java	anovaTest	alpha	double	0	OutOfRangeException	$ > 0.5
2182	195	8	OneWayAnova.java	anovaStats	categoryData	Collection<double[]>	0	NullArgumentException	$ == null
2183	200	8	OneWayAnova.java	anovaStats	categoryData	Collection<double[]>	0	DimensionMismatchException	$.size() < 2
2184	208	12	OneWayAnova.java	anovaStats	THIS	OneWayAnova	0	DimensionMismatchException	$.array.$.length <= 1
24018	227	12	OneWayAnova.java	anovaStats	THIS	OneWayAnova	0	NIL-FOR	i < $.data.$.length
24018	227	12	OneWayAnova.java	anovaStats	i	int	0	NIL-FOR	$ < data.length
212	150	8	OpenIntToDoubleHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
213	155	8	OpenIntToDoubleHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
213	155	8	OpenIntToDoubleHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
214	179	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
214	179	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
214	179	8	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
215	183	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
215	183	8	OpenIntToDoubleHashMap.java	get	index	int	0	RET	states[$] == FREE
22783	188	8	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
22783	188	8	OpenIntToDoubleHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
216	191	12	OpenIntToDoubleHashMap.java	get	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
216	191	12	OpenIntToDoubleHashMap.java	get	index	int	0	RET	containsKey(key, $)
216	191	12	OpenIntToDoubleHashMap.java	get	key	int	0	RET	containsKey($, index)
217	209	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
217	209	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
217	209	8	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
218	213	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
218	213	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
22784	218	8	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
22784	218	8	OpenIntToDoubleHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
219	221	12	OpenIntToDoubleHashMap.java	containsKey	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
219	221	12	OpenIntToDoubleHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
219	221	12	OpenIntToDoubleHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
220	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
220	271	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
221	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
221	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
221	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
221	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
221	273	15	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
222	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
222	279	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
223	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
223	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
223	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
223	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
223	285	16	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
224	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
224	291	8	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
225	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
225	293	15	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
226	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
226	304	12	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
227	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
227	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
227	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
227	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
227	306	19	OpenIntToDoubleHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
228	353	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
228	353	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
228	353	8	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
229	357	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.states[index] == FREE
229	357	8	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	states[$] == FREE
22785	362	8	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	NIL-FOR	$.states[index] != FREE
22785	362	8	OpenIntToDoubleHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
230	365	12	OpenIntToDoubleHashMap.java	remove	THIS	OpenIntToDoubleHashMap	0	RET	$.containsKey(key, index)
230	365	12	OpenIntToDoubleHashMap.java	remove	index	int	0	RET	containsKey(key, $)
230	365	12	OpenIntToDoubleHashMap.java	remove	key	int	0	RET	containsKey($, index)
231	410	8	OpenIntToDoubleHashMap.java	put	index	int	0	DEF	$ < 0
232	418	8	OpenIntToDoubleHashMap.java	put	newMapping	boolean	0	DEF	$
233	420	12	OpenIntToDoubleHashMap.java	put	THIS	OpenIntToDoubleHashMap	0	DEF	$.shouldGrowTable()
22786	444	8	OpenIntToDoubleHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
22786	444	8	OpenIntToDoubleHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
234	445	12	OpenIntToDoubleHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
234	445	12	OpenIntToDoubleHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
496	163	8	OpenIntToFieldHashMap.java	computeCapacity	expectedSize	int	0	RET	$ == 0
497	168	8	OpenIntToFieldHashMap.java	computeCapacity	capacity	int	0	RET	powerOfTwo == $
497	168	8	OpenIntToFieldHashMap.java	computeCapacity	powerOfTwo	int	0	RET	$ == capacity
498	192	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
498	192	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
498	192	8	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
499	196	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
499	196	8	OpenIntToFieldHashMap.java	get	index	int	0	RET	states[$] == FREE
22795	201	8	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
22795	201	8	OpenIntToFieldHashMap.java	get	index	int	0	NIL-FOR	states[$] != FREE
500	204	12	OpenIntToFieldHashMap.java	get	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
500	204	12	OpenIntToFieldHashMap.java	get	index	int	0	RET	containsKey(key, $)
500	204	12	OpenIntToFieldHashMap.java	get	key	int	0	RET	containsKey($, index)
501	222	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
501	222	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
501	222	8	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
502	226	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
502	226	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	states[$] == FREE
22796	231	8	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
22796	231	8	OpenIntToFieldHashMap.java	containsKey	index	int	0	NIL-FOR	states[$] != FREE
503	234	12	OpenIntToFieldHashMap.java	containsKey	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
503	234	12	OpenIntToFieldHashMap.java	containsKey	index	int	0	RET	containsKey(key, $)
503	234	12	OpenIntToFieldHashMap.java	containsKey	key	int	0	RET	containsKey($, index)
504	284	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
504	284	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
505	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
505	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
505	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
505	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
505	286	15	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
506	292	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] == FULL
506	292	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] == FULL
507	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	keys[$] == key
507	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	DEF	states[$] != FULL
507	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	DEF	$[index] == key
507	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	DEF	$[index] != FULL
507	298	16	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	DEF	keys[index] == $
508	304	8	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
508	304	8	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
509	306	15	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
509	306	15	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
510	317	12	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	1	RET	states[$] == FREE
510	317	12	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	1	RET	$[index] == FREE
511	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	states[$] == FULL
511	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	index	int	0	RET	keys[$] == key
511	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	keys	int[]	0	RET	$[index] == key
511	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	states	byte[]	0	RET	$[index] == FULL
511	319	19	OpenIntToFieldHashMap.java	findInsertionIndex	key	int	0	RET	keys[index] == $
512	366	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
512	366	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
512	366	8	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
513	370	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.states[index] == FREE
513	370	8	OpenIntToFieldHashMap.java	remove	index	int	0	RET	states[$] == FREE
22797	375	8	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	NIL-FOR	$.states[index] != FREE
22797	375	8	OpenIntToFieldHashMap.java	remove	index	int	0	NIL-FOR	states[$] != FREE
514	378	12	OpenIntToFieldHashMap.java	remove	THIS	OpenIntToFieldHashMap	0	RET	$.containsKey(key, index)
514	378	12	OpenIntToFieldHashMap.java	remove	index	int	0	RET	containsKey(key, $)
514	378	12	OpenIntToFieldHashMap.java	remove	key	int	0	RET	containsKey($, index)
515	423	8	OpenIntToFieldHashMap.java	put	index	int	0	DEF	$ < 0
516	431	8	OpenIntToFieldHashMap.java	put	newMapping	boolean	0	DEF	$
517	433	12	OpenIntToFieldHashMap.java	put	THIS	OpenIntToFieldHashMap	0	DEF	$.shouldGrowTable()
22798	457	8	OpenIntToFieldHashMap.java	growTable	i	int	0	NIL-FOR	$ < oldLength
22798	457	8	OpenIntToFieldHashMap.java	growTable	oldLength	int	0	NIL-FOR	i < $
518	458	12	OpenIntToFieldHashMap.java	growTable	i	int	0	DEF	oldStates[$] == FULL
518	458	12	OpenIntToFieldHashMap.java	growTable	oldStates	byte[]	0	DEF	$[i] == FULL
1597	52	8	OpenMapRealMatrix.java	OpenMapRealMatrix	lRow	long	0	NumberIsTooLargeException	$ * lCol >= Integer.MAX_VALUE
1597	52	8	OpenMapRealMatrix.java	OpenMapRealMatrix	lCol	long	0	NumberIsTooLargeException	lRow * $ >= Integer.MAX_VALUE
23652	103	8	OpenMapRealMatrix.java	add	iterator	Iterator	0	NIL-FOR	$.hasNext()
23653	137	8	OpenMapRealMatrix.java	subtract	iterator	Iterator	0	NIL-FOR	$.hasNext()
23654	159	12	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
23655	165	16	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
23655	165	16	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
23656	189	8	OpenMapRealMatrix.java	multiply	iterator	Iterator	0	NIL-FOR	$.hasNext()
23657	195	12	OpenMapRealMatrix.java	multiply	j	int	0	NIL-FOR	$ < outCols
23657	195	12	OpenMapRealMatrix.java	multiply	outCols	int	0	NIL-FOR	j < $
1598	197	16	OpenMapRealMatrix.java	multiply	THIS	OpenMapRealMatrix	0	DEF	m.$.entries.containsKey(rightKey)
1598	197	16	OpenMapRealMatrix.java	multiply	rightKey	int	0	DEF	m.entries.containsKey($)
1598	197	16	OpenMapRealMatrix.java	multiply	m	OpenMapRealMatrix	0	DEF	$.entries.containsKey(rightKey)
1599	201	20	OpenMapRealMatrix.java	multiply	outValue	double	1	DEF	$ == 0.0
1600	232	8	OpenMapRealMatrix.java	setEntry	value	double	1	DEF	$ == 0.0
1601	246	8	OpenMapRealMatrix.java	addToEntry	value	double	1	DEF	$ == 0.0
1602	260	8	OpenMapRealMatrix.java	multiplyEntry	value	double	1	DEF	$ == 0.0
23577	137	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
23577	137	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
23577	137	8	OpenMapRealVector.java	OpenMapRealVector	values	double[]	0	NIL-FOR	key < $.length
1519	139	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1519	139	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
23578	166	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < values.$.length
23578	166	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < values.length
23578	166	8	OpenMapRealVector.java	OpenMapRealVector	values	Double[]	0	NIL-FOR	key < $.length
1520	168	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1520	168	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
23579	194	8	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	NIL-FOR	key < $.virtualSize
23579	194	8	OpenMapRealVector.java	OpenMapRealVector	key	int	0	NIL-FOR	$ < virtualSize
1521	196	12	OpenMapRealVector.java	OpenMapRealVector	THIS	OpenMapRealVector	0	DEF	$.isDefaultValue(value)
1521	196	12	OpenMapRealVector.java	OpenMapRealVector	value	double	0	DEF	isDefaultValue($)
1522	227	8	OpenMapRealVector.java	add	v	RealVector	1	RET	$ instanceof OpenMapRealVector
23580	249	8	OpenMapRealVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1523	252	12	OpenMapRealVector.java	add	key	int	1	DEF	randomAccess.containsKey($)
1523	252	12	OpenMapRealVector.java	add	randomAccess	OpenIntToDoubleHashMap	1	DEF	$.containsKey(key)
23581	269	8	OpenMapRealVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1524	279	8	OpenMapRealVector.java	append	v	RealVector	1	RET	$ instanceof OpenMapRealVector
23582	283	12	OpenMapRealVector.java	append	i	int	0	NIL-FOR	$ < v.getDimension()
23582	283	12	OpenMapRealVector.java	append	v	RealVector	0	NIL-FOR	i < $.getDimension()
23583	318	8	OpenMapRealVector.java	ebeDivide	i	int	0	NIL-FOR	$ < n
23583	318	8	OpenMapRealVector.java	ebeDivide	n	int	0	NIL-FOR	i < $
23584	330	8	OpenMapRealVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
1525	341	8	OpenMapRealVector.java	ebeMultiply	v	RealVector	0	DEF	$.isNaN()
1525	341	8	OpenMapRealVector.java	ebeMultiply	v	RealVector	0	DEF	$.isInfinite()
23585	343	12	OpenMapRealVector.java	ebeMultiply	i	int	0	NIL-FOR	$ < n
23585	343	12	OpenMapRealVector.java	ebeMultiply	n	int	0	NIL-FOR	i < $
1526	345	16	OpenMapRealVector.java	ebeMultiply	y	double	1	DEF	Double.isNaN($)
1527	347	23	OpenMapRealVector.java	ebeMultiply	y	double	0	DEF	Double.isInfinite($)
1528	360	8	OpenMapRealVector.java	getSubVector	n	int	0	NotPositiveException	$ < 0
23586	367	8	OpenMapRealVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1529	370	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ >= index
1529	370	12	OpenMapRealVector.java	getSubVector	key	int	0	DEF	$ < end
1529	370	12	OpenMapRealVector.java	getSubVector	end	int	0	DEF	key < $
1529	370	12	OpenMapRealVector.java	getSubVector	index	int	0	DEF	key >= $
23587	394	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
23588	402	8	OpenMapRealVector.java	getDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1530	405	12	OpenMapRealVector.java	getDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1530	405	12	OpenMapRealVector.java	getDistance	key	int	0	DEF	entries.containsKey($)
1531	417	8	OpenMapRealVector.java	getDistance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
23589	443	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
23590	449	8	OpenMapRealVector.java	getL1Distance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1532	452	12	OpenMapRealVector.java	getL1Distance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1532	452	12	OpenMapRealVector.java	getL1Distance	key	int	0	DEF	entries.containsKey($)
1533	464	8	OpenMapRealVector.java	getL1Distance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
23591	480	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1534	483	12	OpenMapRealVector.java	getLInfDistance	delta	double	0	DEF	$ > max
1534	483	12	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	delta > $
23592	488	8	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	NIL-WHILE	$.hasNext()
1535	491	12	OpenMapRealVector.java	getLInfDistance	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(key)
1535	491	12	OpenMapRealVector.java	getLInfDistance	key	int	0	DEF	entries.containsKey($)
1536	492	16	OpenMapRealVector.java	getLInfDistance	max	double	0	DEF	iter.value() > $
1536	492	16	OpenMapRealVector.java	getLInfDistance	iter	Iterator	0	DEF	$.value() > max
1537	504	8	OpenMapRealVector.java	getLInfDistance	v	RealVector	1	RET	$ instanceof OpenMapRealVector
23593	516	8	OpenMapRealVector.java	isInfinite	iter	Iterator	0	NIL-WHILE	$.hasNext()
1538	519	12	OpenMapRealVector.java	isInfinite	value	double	0	RET	Double.isNaN($)
1539	522	12	OpenMapRealVector.java	isInfinite	value	double	0	DEF	Double.isInfinite($)
23594	533	8	OpenMapRealVector.java	isNaN	iter	Iterator	0	NIL-WHILE	$.hasNext()
1540	535	12	OpenMapRealVector.java	isNaN	iter	Iterator	0	RET	Double.isNaN($.value())
23595	551	8	OpenMapRealVector.java	mapAddToSelf	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
23595	551	8	OpenMapRealVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
1541	561	8	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	1	DEF	$.isDefaultValue(value)
1541	561	8	OpenMapRealVector.java	setEntry	value	double	1	DEF	isDefaultValue($)
1542	563	15	OpenMapRealVector.java	setEntry	THIS	OpenMapRealVector	0	DEF	$.entries.containsKey(index)
1542	563	15	OpenMapRealVector.java	setEntry	index	int	0	DEF	entries.containsKey($)
23596	573	8	OpenMapRealVector.java	setSubVector	i	int	0	NIL-FOR	$ < v.getDimension()
23596	573	8	OpenMapRealVector.java	setSubVector	v	RealVector	0	NIL-FOR	i < $.getDimension()
23597	581	8	OpenMapRealVector.java	set	THIS	OpenMapRealVector	0	NIL-FOR	i < $.virtualSize
23597	581	8	OpenMapRealVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
23598	598	8	OpenMapRealVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1543	601	12	OpenMapRealVector.java	subtract	THIS	OpenMapRealVector	1	DEF	$.entries.containsKey(key)
1543	601	12	OpenMapRealVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1544	614	8	OpenMapRealVector.java	subtract	v	RealVector	1	RET	$ instanceof OpenMapRealVector
1545	633	8	OpenMapRealVector.java	unitize	THIS	OpenMapRealVector	0	MathArithmeticException	$.isDefaultValue(norm)
1545	633	8	OpenMapRealVector.java	unitize	norm	double	0	MathArithmeticException	isDefaultValue($)
23599	637	8	OpenMapRealVector.java	unitize	iter	Iterator	0	NIL-WHILE	$.hasNext()
23600	648	8	OpenMapRealVector.java	toArray	iter	Iterator	0	NIL-WHILE	$.hasNext()
23601	670	8	OpenMapRealVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1546	686	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$ == obj
1546	686	8	OpenMapRealVector.java	equals	obj	Object	0	RET	this == $
1547	689	8	OpenMapRealVector.java	equals	obj	Object	0	RET	$ instanceof OpenMapRealVector
1548	693	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	$.virtualSize != other.$.virtualSize
1548	693	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	virtualSize != $.virtualSize
1549	696	8	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits($.epsilon) != Double.doubleToLongBits(other.$.epsilon)
1549	696	8	OpenMapRealVector.java	equals	other	OpenMapRealVector	0	RET	Double.doubleToLongBits(epsilon) != Double.doubleToLongBits($.epsilon)
23602	701	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1550	704	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(iter.value())
1550	704	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.value())
23603	709	8	OpenMapRealVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1551	712	12	OpenMapRealVector.java	equals	THIS	OpenMapRealVector	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits($.getEntry(iter.key()))
1551	712	12	OpenMapRealVector.java	equals	test	double	0	RET	Double.doubleToLongBits($) != Double.doubleToLongBits(getEntry(iter.key()))
1551	712	12	OpenMapRealVector.java	equals	iter	Iterator	0	RET	Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry($.key()))
22802	139	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	NIL-FOR	i < components.$.length
22802	139	8	OrderedTuple.java	OrderedTuple	i	int	0	NIL-FOR	$ < components.length
22802	139	8	OrderedTuple.java	OrderedTuple	components	double	0	NIL-FOR	i < $.length
531	140	12	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isInfinite(components[$])
531	140	12	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isInfinite($[i])
532	141	16	OrderedTuple.java	OrderedTuple	i	int	1	DEF	components[$] < 0
532	141	16	OrderedTuple.java	OrderedTuple	components	double	1	DEF	$[i] < 0
533	146	19	OrderedTuple.java	OrderedTuple	i	int	1	DEF	Double.isNaN(components[$])
533	146	19	OrderedTuple.java	OrderedTuple	components	double	1	DEF	Double.isNaN($[i])
534	151	16	OrderedTuple.java	OrderedTuple	m	long	0	DEF	$ != 0
535	159	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.negInf
535	159	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	0	DEF	$.posInf
536	166	8	OrderedTuple.java	OrderedTuple	THIS	OrderedTuple	1	DEF	$.lsb <= msb
536	166	8	OrderedTuple.java	OrderedTuple	msb	int	1	DEF	lsb <= $
537	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding != null
537	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding[0] == 0x0L
537	187	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	RET	$.encoding.$.length == 1
22803	202	8	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	eIndex < $.encoding.$.length
22803	202	8	OrderedTuple.java	encode	eIndex	int	0	NIL-FOR	$ < encoding.length
22804	203	12	OrderedTuple.java	encode	THIS	OrderedTuple	0	NIL-FOR	vIndex < $.components.$.length
22804	203	12	OrderedTuple.java	encode	vIndex	int	0	NIL-FOR	$ < components.length
538	204	16	OrderedTuple.java	encode	THIS	OrderedTuple	0	DEF	$.getBit(vIndex, k) != 0
538	204	16	OrderedTuple.java	encode	vIndex	int	0	DEF	getBit($, k) != 0
538	204	16	OrderedTuple.java	encode	k	int	0	DEF	getBit(vIndex, $) != 0
539	207	16	OrderedTuple.java	encode	shift	int	0	DEF	$-- == 0
540	248	8	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.components.$.length == ot.$.components.$.length
540	248	8	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	components.length == $.components.length
541	249	12	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.nan
542	251	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.nan
542	251	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.nan
543	253	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.posInf
543	253	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.negInf
543	253	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.posInf
544	255	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.posInf
544	255	19	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	ot.$.negInf
544	255	19	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	$.negInf
545	259	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	DEF	$.offset < ot.$.offset
545	259	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	DEF	offset < $.offset
546	261	23	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	DEF	$.offset > ot.$.offset
546	261	23	OrderedTuple.java	compareTo	ot	OrderedTuple	0	DEF	offset > $.offset
22805	266	16	OrderedTuple.java	compareTo	i	int	0	NIL-FOR	$ < limit
22805	266	16	OrderedTuple.java	compareTo	limit	int	0	NIL-FOR	i < $
547	267	20	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding[i] < ot.$.encoding[i]
547	267	20	OrderedTuple.java	compareTo	i	int	1	RET	encoding[$] < ot.encoding[$]
547	267	20	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding[i] < $.encoding[i]
548	269	27	OrderedTuple.java	compareTo	THIS	OrderedTuple	0	RET	$.encoding[i] > ot.$.encoding[i]
548	269	27	OrderedTuple.java	compareTo	i	int	0	RET	encoding[$] > ot.encoding[$]
548	269	27	OrderedTuple.java	compareTo	ot	OrderedTuple	0	RET	encoding[i] > $.encoding[i]
549	274	16	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length < ot.$.encoding.$.length
549	274	16	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length < $.encoding.length
550	276	23	OrderedTuple.java	compareTo	THIS	OrderedTuple	1	RET	$.encoding.$.length > ot.$.encoding.$.length
550	276	23	OrderedTuple.java	compareTo	ot	OrderedTuple	1	RET	encoding.length > $.encoding.length
551	292	8	OrderedTuple.java	equals	THIS	OrderedTuple	1	RET	$ == other
551	292	8	OrderedTuple.java	equals	other	Object	1	RET	this == $
552	294	15	OrderedTuple.java	equals	other	Object	1	RET	$ instanceof OrderedTuple
22806	369	8	OrderedTuple.java	computeMSB	scale	int	0	NIL-WHILE	$ != 0
553	370	12	OrderedTuple.java	computeMSB	ll	long	0	DEF	($ & mask) != $
553	370	12	OrderedTuple.java	computeMSB	mask	long	0	DEF	(ll & $) != ll
22807	395	8	OrderedTuple.java	computeLSB	scale	int	0	NIL-WHILE	$ != 0
554	396	12	OrderedTuple.java	computeLSB	ll	long	0	DEF	($ & mask) == $
554	396	12	OrderedTuple.java	computeLSB	mask	long	0	DEF	(ll & $) == ll
555	417	8	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k > $.offset
555	417	8	OrderedTuple.java	getBit	e	int	1	RET	k < $
555	417	8	OrderedTuple.java	getBit	k	int	1	RET	$ > offset
555	417	8	OrderedTuple.java	getBit	k	int	1	RET	$ < e
556	419	15	OrderedTuple.java	getBit	THIS	OrderedTuple	1	RET	k == $.offset
556	419	15	OrderedTuple.java	getBit	k	int	1	RET	$ == offset
557	421	15	OrderedTuple.java	getBit	e	int	1	RET	k > ($ + 52)
557	421	15	OrderedTuple.java	getBit	k	int	1	RET	$ > (e + 52)
22815	72	8	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	NIL-FOR	i < outline.$.length
22815	72	8	OutlineExtractor.java	getOutline	i	int	0	NIL-FOR	$ < outline.length
22815	72	8	OutlineExtractor.java	getOutline	outline	Vector2D[][]	0	NIL-FOR	i < $.length
22816	76	12	OutlineExtractor.java	getOutline	end	int	0	NIL-WHILE	j < $
22816	76	12	OutlineExtractor.java	getOutline	j	int	0	NIL-WHILE	$ < end
689	77	16	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	1	DEF	$.pointIsBetween(rawLoop, end, j)
689	77	16	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	1	DEF	pointIsBetween($, end, j)
689	77	16	OutlineExtractor.java	getOutline	end	int	1	DEF	pointIsBetween(rawLoop, $, j)
689	77	16	OutlineExtractor.java	getOutline	j	int	1	DEF	pointIsBetween(rawLoop, end, $)
22817	79	20	OutlineExtractor.java	getOutline	k	int	0	NIL-FOR	$ < (end - 1)
22817	79	20	OutlineExtractor.java	getOutline	end	int	0	NIL-FOR	k < ($ - 1)
690	88	12	OutlineExtractor.java	getOutline	THIS	OutlineExtractor	0	DEF	end != rawLoop.$.length
690	88	12	OutlineExtractor.java	getOutline	rawLoop	Vector2D[]	0	DEF	end != $.length
690	88	12	OutlineExtractor.java	getOutline	end	int	0	DEF	$ != rawLoop.length
146	104	8	Pair.java	equals	THIS	Pair	0	RET	$ == o
146	104	8	Pair.java	equals	o	Object	0	RET	this == $
147	107	8	Pair.java	equals	o	Object	1	RET	$ instanceof Pair
2616	56	12	ParameterJacobianWrapper.java	ParameterJacobianWrapper	name	String	0	DEF	pode.isSupported($)
2616	56	12	ParameterJacobianWrapper.java	ParameterJacobianWrapper	pode	ParameterizedODE	0	DEF	$.isSupported(name)
24245	84	8	ParameterJacobianWrapper.java	computeParameterJacobian	i	int	0	NIL-FOR	$ < n
24245	84	8	ParameterJacobianWrapper.java	computeParameterJacobian	n	int	0	NIL-FOR	i < $
2761	72	8	ParameterizedWrapper.java	getParameter	THIS	ParameterizedWrapper	0	MathIllegalArgumentException	$.isSupported(name)
2761	72	8	ParameterizedWrapper.java	getParameter	name	String	0	MathIllegalArgumentException	isSupported($)
992	105	8	PascalDistribution.java	PascalDistribution	r	int	0	NotStrictlyPositiveException	$ <= 0
993	109	8	PascalDistribution.java	PascalDistribution	p	double	0	OutOfRangeException	$ < 0
993	109	8	PascalDistribution.java	PascalDistribution	p	double	0	OutOfRangeException	$ > 1
994	138	8	PascalDistribution.java	probability	x	int	1	DEF	$ < 0
995	152	8	PascalDistribution.java	cumulativeProbability	x	int	1	DEF	$ < 0
2240	95	8	PearsonsCorrelation.java	PearsonsCorrelation	covarianceMatrix	RealMatrix	0	NullArgumentException	$ == null
24051	140	8	PearsonsCorrelation.java	getCorrelationStandardErrors	i	int	0	NIL-FOR	$ < nVars
24051	140	8	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	i < $
24052	141	12	PearsonsCorrelation.java	getCorrelationStandardErrors	j	int	0	NIL-FOR	$ < nVars
24052	141	12	PearsonsCorrelation.java	getCorrelationStandardErrors	nVars	int	0	NIL-FOR	j < $
24053	167	8	PearsonsCorrelation.java	getCorrelationPValues	i	int	0	NIL-FOR	$ < nVars
24053	167	8	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	i < $
24054	168	12	PearsonsCorrelation.java	getCorrelationPValues	j	int	0	NIL-FOR	$ < nVars
24054	168	12	PearsonsCorrelation.java	getCorrelationPValues	nVars	int	0	NIL-FOR	j < $
2241	169	16	PearsonsCorrelation.java	getCorrelationPValues	j	int	1	DEF	i == $
2241	169	16	PearsonsCorrelation.java	getCorrelationPValues	i	int	1	DEF	$ == j
24055	192	8	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	$ < nVars
24055	192	8	PearsonsCorrelation.java	computeCorrelationMatrix	nVars	int	0	NIL-FOR	i < $
24056	193	12	PearsonsCorrelation.java	computeCorrelationMatrix	j	int	0	NIL-FOR	$ < i
24056	193	12	PearsonsCorrelation.java	computeCorrelationMatrix	i	int	0	NIL-FOR	j < $
2242	229	8	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	DimensionMismatchException	xArray.$.length != yArray.$.length
2242	229	8	PearsonsCorrelation.java	correlation	xArray	double[]	1	DimensionMismatchException	$.length != yArray.length
2242	229	8	PearsonsCorrelation.java	correlation	yArray	double[]	1	DimensionMismatchException	xArray.length != $.length
2243	231	15	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	1	MathIllegalArgumentException	xArray.$.length < 2
2243	231	15	PearsonsCorrelation.java	correlation	xArray	double[]	1	MathIllegalArgumentException	$.length < 2
24057	235	12	PearsonsCorrelation.java	correlation	THIS	PearsonsCorrelation	0	NIL-FOR	i<xArray.$.length
24057	235	12	PearsonsCorrelation.java	correlation	i	int	0	NIL-FOR	$<xArray.length
24057	235	12	PearsonsCorrelation.java	correlation	xArray	double[]	0	NIL-FOR	i<$.length
24058	256	8	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	$ < nVars
24058	256	8	PearsonsCorrelation.java	covarianceToCorrelation	nVars	int	0	NIL-FOR	i < $
24059	259	12	PearsonsCorrelation.java	covarianceToCorrelation	j	int	0	NIL-FOR	$ < i
24059	259	12	PearsonsCorrelation.java	covarianceToCorrelation	i	int	0	NIL-FOR	j < $
2244	279	8	PearsonsCorrelation.java	checkSufficientData	nRows	int	0	MathIllegalArgumentException	$ < 2
2244	279	8	PearsonsCorrelation.java	checkSufficientData	nCols	int	0	MathIllegalArgumentException	$ < 2
2130	133	8	Percentile.java	setData	values	double[]	1	DEF	$ == null
2131	145	8	Percentile.java	setData	values	double[]	1	DEF	$ == null
2132	261	8	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ > 100
2132	261	8	Percentile.java	evaluate	p	double	0	OutOfRangeException	$ <= 0
2133	264	8	Percentile.java	evaluate	length	int	0	RET	$ == 0
2134	267	8	Percentile.java	evaluate	length	int	0	RET	$ == 1
2135	277	8	Percentile.java	evaluate	THIS	Percentile	1	DEF	values == $.getDataRef()
2135	277	8	Percentile.java	evaluate	values	double[]	1	DEF	$ == getDataRef()
2136	287	8	Percentile.java	evaluate	pos	double	0	RET	$ < 1
2137	290	8	Percentile.java	evaluate	n	double	0	RET	pos >= $
2137	290	8	Percentile.java	evaluate	pos	double	0	RET	$ >= n
24004	315	8	Percentile.java	select	begin	int	0	NIL-WHILE	end - $ > MIN_SELECT_SIZE
24004	315	8	Percentile.java	select	end	int	0	NIL-WHILE	$ - begin > MIN_SELECT_SIZE
2138	318	12	Percentile.java	select	THIS	Percentile	1	DEF	node < pivotsHeap.$.length
2138	318	12	Percentile.java	select	node	int	1	DEF	$ < pivotsHeap.length
2138	318	12	Percentile.java	select	node	int	1	DEF	pivotsHeap[$] >= 0
2138	318	12	Percentile.java	select	pivotsHeap	int[]	1	DEF	node < $.length
2138	318	12	Percentile.java	select	pivotsHeap	int[]	1	DEF	$[node] >= 0
2139	325	16	Percentile.java	select	THIS	Percentile	0	DEF	node < pivotsHeap.$.length
2139	325	16	Percentile.java	select	node	int	0	DEF	$ < pivotsHeap.length
2139	325	16	Percentile.java	select	pivotsHeap	int[]	0	DEF	node < $.length
2140	330	12	Percentile.java	select	pivot	int	1	RET	k == $
2140	330	12	Percentile.java	select	k	int	1	RET	$ == pivot
2141	333	19	Percentile.java	select	pivot	int	1	DEF	k < $
2141	333	19	Percentile.java	select	k	int	1	DEF	$ < pivot
2142	367	8	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wMiddle
2142	367	8	Percentile.java	medianOf3	wMiddle	double	1	RET	wBegin < $
2143	368	12	Percentile.java	medianOf3	wMiddle	double	1	RET	$ < wEnd
2143	368	12	Percentile.java	medianOf3	wEnd	double	1	RET	wMiddle < $
2144	374	12	Percentile.java	medianOf3	wBegin	double	1	RET	$ < wEnd
2144	374	12	Percentile.java	medianOf3	wEnd	double	1	RET	wBegin < $
24005	403	8	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
24005	403	8	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
24006	404	12	Percentile.java	partition	value	double	0	NIL-WHILE	work[j] > $
24006	404	12	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
24006	404	12	Percentile.java	partition	j	int	0	NIL-WHILE	work[$] > value
24006	404	12	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
24006	404	12	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[j] > value
24007	407	12	Percentile.java	partition	value	double	0	NIL-WHILE	work[i] < $
24007	407	12	Percentile.java	partition	i	int	0	NIL-WHILE	work[$] < value
24007	407	12	Percentile.java	partition	i	int	0	NIL-WHILE	$ < j
24007	407	12	Percentile.java	partition	j	int	0	NIL-WHILE	i < $
24007	407	12	Percentile.java	partition	work	double[]	0	NIL-WHILE	$[i] < value
2145	411	12	Percentile.java	partition	i	int	0	DEF	$ < j
2145	411	12	Percentile.java	partition	j	int	0	DEF	i < $
2146	418	8	Percentile.java	partition	value	double	0	DEF	work[i] > $
2146	418	8	Percentile.java	partition	i	int	0	DEF	work[$] > value
2146	418	8	Percentile.java	partition	i	int	0	DEF	$ >= end
2146	418	8	Percentile.java	partition	work	double[]	0	DEF	$[i] > value
2146	418	8	Percentile.java	partition	end	int	0	DEF	i >= $
24008	434	8	Percentile.java	insertionSort	j	int	0	NIL-FOR	$ < end
24008	434	8	Percentile.java	insertionSort	end	int	0	NIL-FOR	j < $
24009	437	12	Percentile.java	insertionSort	saved	double	0	NIL-WHILE	$ < work[i]
24009	437	12	Percentile.java	insertionSort	i	int	0	NIL-WHILE	saved < work[$]
24009	437	12	Percentile.java	insertionSort	i	int	0	NIL-WHILE	$ >= begin
24009	437	12	Percentile.java	insertionSort	work	double[]	0	NIL-WHILE	saved < $[i]
24009	437	12	Percentile.java	insertionSort	begin	int	0	NIL-WHILE	i >= $
2147	464	8	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ <= 0
2147	464	8	Percentile.java	setQuantile	p	double	0	OutOfRangeException	$ > 100
2148	493	8	Percentile.java	copy	THIS	Percentile	0	DEF	source.$.cachedPivots != null
2148	493	8	Percentile.java	copy	source	Percentile	0	DEF	$.cachedPivots != null
632	138	8	Plane.java	setNormal	norm	double	0	MathArithmeticException	$ < 1.0e-10
633	308	8	Plane.java	intersection	dot	double	0	RET	FastMath.abs($) < 1.0e-10
634	323	8	Plane.java	intersection	direction	Vector3D	0	RET	$.getNorm() < 1.0e-10
635	360	8	Plane.java	intersection	determinant	double	0	RET	FastMath.abs($) < 1.0e-10
1034	112	8	PoissonDistribution.java	PoissonDistribution	p	double	0	NotStrictlyPositiveException	$ <= 0
1035	165	8	PoissonDistribution.java	probability	x	int	1	DEF	$ == Integer.MAX_VALUE
1035	165	8	PoissonDistribution.java	probability	x	int	1	DEF	$ < 0
1036	167	15	PoissonDistribution.java	probability	x	int	1	DEF	$ == 0
1037	179	8	PoissonDistribution.java	cumulativeProbability	x	int	0	RET	$ < 0
1038	182	8	PoissonDistribution.java	cumulativeProbability	x	int	0	RET	$ == Integer.MAX_VALUE
1039	292	8	PoissonDistribution.java	nextPoisson	pivot	double	1	RET	meanPoisson < $
1039	292	8	PoissonDistribution.java	nextPoisson	meanPoisson	double	1	RET	$ < pivot
22839	298	12	PoissonDistribution.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * meanPoisson
22839	298	12	PoissonDistribution.java	nextPoisson	meanPoisson	double	0	NIL-WHILE	n < 1000 * $
1040	301	16	PoissonDistribution.java	nextPoisson	p	double	1	DEF	r >= $
1040	301	16	PoissonDistribution.java	nextPoisson	r	double	1	DEF	$ >= p
1041	333	16	PoissonDistribution.java	nextPoisson	u	double	1	DEF	$ <= p1
1041	333	16	PoissonDistribution.java	nextPoisson	p1	double	1	DEF	u <= $
1042	336	20	PoissonDistribution.java	nextPoisson	lambda	double	0	DEF	x < -$
1042	336	20	PoissonDistribution.java	nextPoisson	delta	double	0	DEF	x > $
1042	336	20	PoissonDistribution.java	nextPoisson	x	double	0	DEF	$ > delta
1042	336	20	PoissonDistribution.java	nextPoisson	x	double	0	DEF	$ < -lambda
1043	343	20	PoissonDistribution.java	nextPoisson	u	double	1	DEF	$ > p1 + p2
1043	343	20	PoissonDistribution.java	nextPoisson	p1	double	1	DEF	u > $ + p2
1043	343	20	PoissonDistribution.java	nextPoisson	p2	double	1	DEF	u > p1 + $
1044	354	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < -t
1044	354	16	PoissonDistribution.java	nextPoisson	a	int	0	DEF	$ == 0
1044	354	16	PoissonDistribution.java	nextPoisson	t	double	0	DEF	v < -$
1045	360	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < qa
1045	360	16	PoissonDistribution.java	nextPoisson	qa	double	0	DEF	v < $
1046	364	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ > qr
1046	364	16	PoissonDistribution.java	nextPoisson	qr	double	0	DEF	v > $
1047	367	16	PoissonDistribution.java	nextPoisson	lambda	double	0	DEF	v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + $)) + logLambdaFactorial
1047	367	16	PoissonDistribution.java	nextPoisson	logLambda	double	0	DEF	v < y * $ - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
1047	367	16	PoissonDistribution.java	nextPoisson	logLambdaFactorial	double	0	DEF	v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + $
1047	367	16	PoissonDistribution.java	nextPoisson	y	double	0	DEF	v < $ * logLambda - ArithmeticUtils.factorialLog((int) ($ + lambda)) + logLambdaFactorial
1047	367	16	PoissonDistribution.java	nextPoisson	v	double	0	DEF	$ < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
726	134	8	PolygonsSet.java	computeGeometricalProperties	THIS	PolygonsSet	1	DEF	v.$.length == 0
726	134	8	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$.length == 0
727	136	12	PolygonsSet.java	computeGeometricalProperties	tree	BSPTree<Euclidean2D>	1	DEF	$.getCut() == null
727	136	12	PolygonsSet.java	computeGeometricalProperties	tree	BSPTree<Euclidean2D>	1	DEF	(Boolean) $.getAttribute()
728	144	15	PolygonsSet.java	computeGeometricalProperties	v	Vector2D[][]	1	DEF	$[0][0] == null
729	170	12	PolygonsSet.java	computeGeometricalProperties	sum	double	1	DEF	$ < 0
730	207	8	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	$.vertices == null
731	208	12	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.getTree(false).getCut() == null
22820	220	16	PolygonsSet.java	getVertices	sorted	AVLTree<ComparableSegment>	0	NIL-WHILE	$.isEmpty()
732	223	20	PolygonsSet.java	getVertices	loop	List<ComparableSegment>	0	DEF	$ != null
733	233	20	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.size() < 2
734	241	27	PolygonsSet.java	getVertices	THIS	PolygonsSet	1	DEF	$.loop.get(0).getStart() == null
735	247	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ == 0
736	255	28	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j < (array.$.length - 1)
736	255	28	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j < ($.length - 1)
736	255	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ < (array.length - 1)
737	260	28	PolygonsSet.java	getVertices	THIS	PolygonsSet	0	DEF	j == (array.$.length - 1)
737	260	28	PolygonsSet.java	getVertices	array	Vector2D[]	0	DEF	j == ($.length - 1)
737	260	28	PolygonsSet.java	getVertices	j	int	0	DEF	$ == (array.length - 1)
22821	306	8	PolygonsSet.java	followLoop	globalStart	Vector2D	0	NIL-WHILE	$.distance(end) > 1.0e-10
22821	306	8	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	globalStart.distance($) > 1.0e-10
22821	306	8	PolygonsSet.java	followLoop	end	Vector2D	0	NIL-WHILE	$ != null
22821	306	8	PolygonsSet.java	followLoop	open	boolean	0	NIL-WHILE	$
22822	314	12	PolygonsSet.java	followLoop	n	Node	0	NIL-FOR	$.getElement().compareTo(upperRight) <= 0
22822	314	12	PolygonsSet.java	followLoop	n	Node	0	NIL-FOR	$ != null
22822	314	12	PolygonsSet.java	followLoop	upperRight	ComparableSegment	0	NIL-FOR	n.getElement().compareTo($) <= 0
738	319	16	PolygonsSet.java	followLoop	distance	double	0	DEF	$ < selectedDistance
738	319	16	PolygonsSet.java	followLoop	selectedDistance	double	0	DEF	distance < $
739	326	12	PolygonsSet.java	followLoop	selectedDistance	double	0	RET	$ > 1.0e-10
740	339	8	PolygonsSet.java	followLoop	loop	ArrayList<ComparableSegment>	0	RET	$.size() == 2
740	339	8	PolygonsSet.java	followLoop	open	boolean	0	RET	$
741	344	8	PolygonsSet.java	followLoop	end	Vector2D	0	MathInternalError	$ == null
741	344	8	PolygonsSet.java	followLoop	open	boolean	0	MathInternalError	$
691	120	8	PolyhedronsSet.java	computeGeometricalProperties	THIS	PolyhedronsSet	1	DEF	$.getSize() < 0
692	218	8	PolyhedronsSet.java	recurseFirstIntersection	cut	SubHyperplane<Euclidean3D>	0	RET	$ == null
693	230	8	PolyhedronsSet.java	recurseFirstIntersection	offset	double	1	DEF	$ < 0
694	238	8	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
695	241	12	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane<Euclidean3D>	0	RET	$ != null
696	248	8	PolyhedronsSet.java	recurseFirstIntersection	crossed	SubHyperplane<Euclidean3D>	0	RET	$ != null
697	252	8	PolyhedronsSet.java	recurseFirstIntersection	in	boolean	0	RET	$
698	255	12	PolyhedronsSet.java	recurseFirstIntersection	hit3D	Vector3D	0	RET	$ != null
699	257	16	PolyhedronsSet.java	recurseFirstIntersection	facet	SubHyperplane<Euclidean3D>	0	RET	$ != null
700	280	8	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
700	280	8	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint($) == Location.INSIDE
700	280	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	((SubPlane) $.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
700	280	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	$.getPlusOutside() != null
701	284	8	PolyhedronsSet.java	boundaryFacet	THIS	PolyhedronsSet	0	RET	((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint(point2D) == $.Location.INSIDE
701	284	8	PolyhedronsSet.java	boundaryFacet	point2D	Vector2D	0	RET	((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint($) == Location.INSIDE
701	284	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	((SubPlane) $.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE
701	284	8	PolyhedronsSet.java	boundaryFacet	attribute	BoundaryAttribute<Euclidean3D>	0	RET	$.getPlusInside() != null
3351	70	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NoDataException	$ == 0
24570	73	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	$ > 1
24570	73	8	PolynomialFunction.java	PolynomialFunction	n	int	0	NIL-WHILE	c[$ - 1] == 0
24570	73	8	PolynomialFunction.java	PolynomialFunction	c	double	0	NIL-WHILE	$[n - 1] == 0
3352	130	8	PolynomialFunction.java	evaluate	n	int	0	NoDataException	$ == 0
24571	134	8	PolynomialFunction.java	evaluate	j	int	0	NIL-FOR	$ >= 0
24572	153	8	PolynomialFunction.java	add	i	int	0	NIL-FOR	$ < lowLength
24572	153	8	PolynomialFunction.java	add	lowLength	int	0	NIL-FOR	i < $
24573	178	8	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < lowLength
24573	178	8	PolynomialFunction.java	subtract	lowLength	int	0	NIL-FOR	i < $
3353	181	8	PolynomialFunction.java	subtract	THIS	PolynomialFunction	1	DEF	$.coefficients.$.length < p.$.coefficients.$.length
3353	181	8	PolynomialFunction.java	subtract	p	PolynomialFunction	1	DEF	coefficients.length < $.coefficients.length
24574	182	12	PolynomialFunction.java	subtract	i	int	0	NIL-FOR	$ < highLength
24574	182	12	PolynomialFunction.java	subtract	highLength	int	0	NIL-FOR	i < $
24575	200	8	PolynomialFunction.java	negate	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
24575	200	8	PolynomialFunction.java	negate	i	int	0	NIL-FOR	$ < coefficients.length
24576	215	8	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	i < newCoefficients.$.length
24576	215	8	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	$ < newCoefficients.length
24576	215	8	PolynomialFunction.java	multiply	newCoefficients	double[]	0	NIL-FOR	i < $.length
24577	217	12	PolynomialFunction.java	multiply	THIS	PolynomialFunction	0	NIL-FOR	j < FastMath.min($.coefficients.$.length, i + 1)
24577	217	12	PolynomialFunction.java	multiply	j	int	0	NIL-FOR	$ < FastMath.min(coefficients.length, i + 1)
24577	217	12	PolynomialFunction.java	multiply	i	int	0	NIL-FOR	j < FastMath.min(coefficients.length, $ + 1)
3354	239	8	PolynomialFunction.java	differentiate	n	int	0	NoDataException	$ == 0
3355	242	8	PolynomialFunction.java	differentiate	n	int	0	RET	$ == 1
24578	246	8	PolynomialFunction.java	differentiate	i	int	0	NIL-FOR	$ > 0
3356	288	8	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	RET	$.coefficients[0] == 0.0
3357	289	12	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	RET	$.coefficients.$.length == 1
24579	296	8	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	NIL-FOR	i < $.coefficients.$.length
24579	296	8	PolynomialFunction.java	toString	i	int	0	NIL-FOR	$ < coefficients.length
3358	297	12	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] != 0
3358	297	12	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] != 0
3359	298	16	PolynomialFunction.java	toString	s	StringBuilder	1	DEF	$.length() > 0
3360	299	20	PolynomialFunction.java	toString	THIS	PolynomialFunction	1	DEF	$.coefficients[i] < 0
3360	299	20	PolynomialFunction.java	toString	i	int	1	DEF	coefficients[$] < 0
3361	305	20	PolynomialFunction.java	toString	THIS	PolynomialFunction	0	DEF	$.coefficients[i] < 0
3361	305	20	PolynomialFunction.java	toString	i	int	0	DEF	coefficients[$] < 0
3362	311	16	PolynomialFunction.java	toString	absAi	double	0	DEF	($ - 1) != 0
3363	317	16	PolynomialFunction.java	toString	i	int	0	DEF	$ > 1
3364	335	8	PolynomialFunction.java	toString	c	String	1	RET	$.endsWith(".0")
3365	354	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	$ == obj
3365	354	8	PolynomialFunction.java	equals	obj	Object	0	RET	this == $
3366	357	8	PolynomialFunction.java	equals	obj	Object	0	RET	$ instanceof PolynomialFunction
3367	361	8	PolynomialFunction.java	equals	THIS	PolynomialFunction	0	RET	Arrays.equals($.coefficients, other.$.coefficients)
3367	361	8	PolynomialFunction.java	equals	other	PolynomialFunction	0	RET	Arrays.equals(coefficients, $.coefficients)
3343	78	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.verifyInterpolationArray(x, y, false)
3343	78	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	x	double	0	DEF	verifyInterpolationArray($, y, false)
3343	78	8	PolynomialFunctionLagrangeForm.java	PolynomialFunctionLagrangeForm	y	double	0	DEF	verifyInterpolationArray(x, $, false)
3344	147	8	PolynomialFunctionLagrangeForm.java	getCoefficients	THIS	PolynomialFunctionLagrangeForm	0	DEF	$.coefficientsComputed
3345	172	8	PolynomialFunctionLagrangeForm.java	evaluate	THIS	PolynomialFunctionLagrangeForm	0	RET	$.verifyInterpolationArray(x, y, false)
3345	172	8	PolynomialFunctionLagrangeForm.java	evaluate	x	double	0	RET	verifyInterpolationArray($, y, false)
3345	172	8	PolynomialFunctionLagrangeForm.java	evaluate	y	double	0	RET	verifyInterpolationArray(x, $, false)
24561	210	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
24561	210	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
3346	216	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	dist	double	0	DEF	$ < min_dist
3346	216	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	min_dist	double	0	DEF	dist < $
24562	225	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	$ < n
24562	225	8	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	i < $
24563	226	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	j	int	0	NIL-FOR	$ < n-i
24563	226	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	0	NIL-FOR	j < n-$
24563	226	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	0	NIL-FOR	j < $-i
3347	236	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	i	int	1	DEF	nearest < 0.5*(n-$+1)
3347	236	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	nearest	int	1	DEF	$ < 0.5*(n-i+1)
3347	236	12	PolynomialFunctionLagrangeForm.java	evaluateInternal	n	int	1	DEF	nearest < 0.5*($-i+1)
24564	256	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
24564	256	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
24565	263	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
24565	263	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
24566	264	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
24567	272	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	NIL-FOR	$ < n
24567	272	8	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	i < $
24568	275	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ < n
24568	275	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	n	int	0	NIL-FOR	j < $
3348	276	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	DEF	i != $
3348	276	16	PolynomialFunctionLagrangeForm.java	computeCoefficients	i	int	0	DEF	$ != j
24569	286	12	PolynomialFunctionLagrangeForm.java	computeCoefficients	j	int	0	NIL-FOR	$ >= 0
3349	314	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	DimensionMismatchException	x.$.length != y.$.length
3349	314	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	DimensionMismatchException	$.length != y.length
3349	314	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	y	double	0	DimensionMismatchException	x.length != $.length
3350	317	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	THIS	PolynomialFunctionLagrangeForm	0	NumberIsTooSmallException	x.$.length < 2
3350	317	8	PolynomialFunctionLagrangeForm.java	verifyInterpolationArray	x	double	0	NumberIsTooSmallException	$.length < 2
3370	140	8	PolynomialFunctionNewtonForm.java	getCoefficients	THIS	PolynomialFunctionNewtonForm	0	DEF	$.coefficientsComputed
24588	168	8	PolynomialFunctionNewtonForm.java	evaluate	i	int	0	NIL-FOR	$ >= 0
24589	183	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ <= n
24589	183	8	PolynomialFunctionNewtonForm.java	computeCoefficients	n	int	0	NIL-FOR	i <= $
24590	188	8	PolynomialFunctionNewtonForm.java	computeCoefficients	i	int	0	NIL-FOR	$ >= 0
24591	189	12	PolynomialFunctionNewtonForm.java	computeCoefficients	j	int	0	NIL-FOR	$ > 0
3371	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	a.$.length == 0
3371	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	NoDataException	c.$.length == 0
3371	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	NoDataException	$.length == 0
3371	215	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	NoDataException	$.length == 0
3372	219	8	PolynomialFunctionNewtonForm.java	verifyInputArray	THIS	PolynomialFunctionNewtonForm	0	DimensionMismatchException	a.$.length != c.$.length + 1
3372	219	8	PolynomialFunctionNewtonForm.java	verifyInputArray	a	double	0	DimensionMismatchException	$.length != c.length + 1
3372	219	8	PolynomialFunctionNewtonForm.java	verifyInputArray	c	double	0	DimensionMismatchException	a.length != $.length + 1
3337	101	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NullArgumentException	$ == null
3337	101	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	NullArgumentException	$ == null
3338	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	NumberIsTooSmallException	knots.$.length < 2
3338	105	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	NumberIsTooSmallException	$.length < 2
3339	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	THIS	PolynomialSplineFunction	0	DimensionMismatchException	knots.$.length - 1 != polynomials.$.length
3339	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	knots	double	0	DimensionMismatchException	$.length - 1 != polynomials.length
3339	109	8	PolynomialSplineFunction.java	PolynomialSplineFunction	polynomials	PolynomialFunction	0	DimensionMismatchException	knots.length - 1 != $.length
3340	133	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v < $.knots[0]
3340	133	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	OutOfRangeException	v > $.knots[$.n]
3340	133	8	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ < knots[0]
3340	133	8	PolynomialSplineFunction.java	value	v	double	0	OutOfRangeException	$ > knots[n]
3341	137	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ < 0
3342	143	8	PolynomialSplineFunction.java	value	THIS	PolynomialSplineFunction	0	DEF	i >= $.polynomials.$.length
3342	143	8	PolynomialSplineFunction.java	value	i	int	0	DEF	$ >= polynomials.length
24560	165	8	PolynomialSplineFunction.java	polynomialSplineDerivative	THIS	PolynomialSplineFunction	0	NIL-FOR	i < $.n
24560	165	8	PolynomialSplineFunction.java	polynomialSplineDerivative	i	int	0	NIL-FOR	$ < n
3368	219	8	PolynomialsUtils.java	createJacobiPolynomial	key	JacobiKey	0	DEF	JACOBI_COEFFICIENTS.containsKey($)
24580	329	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < dp1
24580	329	8	PolynomialsUtils.java	shift	dp1	int	0	NIL-FOR	i < $
24581	330	12	PolynomialsUtils.java	shift	j	int	0	NIL-FOR	$ <= i
24581	330	12	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	j <= $
24582	336	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < dp1
24582	336	8	PolynomialsUtils.java	shift	dp1	int	0	NIL-FOR	i < $
24583	342	8	PolynomialsUtils.java	shift	i	int	0	NIL-FOR	$ < d
24583	342	8	PolynomialsUtils.java	shift	d	int	0	NIL-FOR	i < $
24584	343	12	PolynomialsUtils.java	shift	j	int	0	NIL-FOR	$ < d
24584	343	12	PolynomialsUtils.java	shift	d	int	0	NIL-FOR	j < $
3369	365	12	PolynomialsUtils.java	buildPolynomial	maxDegree	int	0	DEF	degree > $
3369	365	12	PolynomialsUtils.java	buildPolynomial	degree	int	0	DEF	$ > maxDegree
24585	381	8	PolynomialsUtils.java	buildPolynomial	i	int	0	NIL-FOR	$ <= degree
24585	381	8	PolynomialsUtils.java	buildPolynomial	degree	int	0	NIL-FOR	i <= $
24586	401	8	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	$ < degree
24586	401	8	PolynomialsUtils.java	computeUpToDegree	degree	int	0	NIL-FOR	k < $
24587	417	12	PolynomialsUtils.java	computeUpToDegree	i	int	0	NIL-FOR	$ < k
24587	417	12	PolynomialsUtils.java	computeUpToDegree	k	int	0	NIL-FOR	i < $
1985	85	8	PowellOptimizer.java	PowellOptimizer	rel	double	0	NumberIsTooSmallException	$ < MIN_RELATIVE_TOLERANCE
1986	88	8	PowellOptimizer.java	PowellOptimizer	abs	double	0	NotStrictlyPositiveException	$ <= 0
23952	122	8	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
23952	122	8	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
23953	142	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
23953	142	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1987	153	16	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	($ - fVal) > delta
1987	153	16	PowellOptimizer.java	doOptimize	delta	double	0	DEF	(fX2 - fVal) > $
1987	153	16	PowellOptimizer.java	doOptimize	fVal	double	0	DEF	(fX2 - $) > delta
1988	166	12	PowellOptimizer.java	doOptimize	stop	boolean	0	DEF	$
1989	167	16	PowellOptimizer.java	doOptimize	checker	ConvergenceChecker<PointValuePair>	0	DEF	$ != null
1990	171	12	PowellOptimizer.java	doOptimize	stop	boolean	0	RET	$
1991	172	16	PowellOptimizer.java	doOptimize	THIS	PowellOptimizer	1	RET	goal == $.GoalType.MINIMIZE
1991	172	16	PowellOptimizer.java	doOptimize	goal	GoalType	1	RET	$ == GoalType.MINIMIZE
23954	181	12	PowellOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < n
23954	181	12	PowellOptimizer.java	doOptimize	n	int	0	NIL-FOR	i < $
1992	189	12	PowellOptimizer.java	doOptimize	fX	double	0	DEF	$ > fX2
1992	189	12	PowellOptimizer.java	doOptimize	fX2	double	0	DEF	fX > $
1993	196	16	PowellOptimizer.java	doOptimize	t	double	0	DEF	$ < 0.0
23955	229	8	PowellOptimizer.java	newPointAndDirection	i	int	0	NIL-FOR	$ < n
23955	229	8	PowellOptimizer.java	newPointAndDirection	n	int	0	NIL-FOR	i < $
195	88	8	Precision.java	compareTo	THIS	Precision	1	RET	$.equals(x, y, eps)
195	88	8	Precision.java	compareTo	x	double	1	RET	equals($, y, eps)
195	88	8	Precision.java	compareTo	y	double	1	RET	equals(x, $, eps)
195	88	8	Precision.java	compareTo	eps	double	1	RET	equals(x, y, $)
196	90	15	Precision.java	compareTo	x	double	0	RET	$ < y
196	90	15	Precision.java	compareTo	y	double	0	RET	x < $
197	114	8	Precision.java	compareTo	THIS	Precision	1	RET	$.equals(x, y, maxUlps)
197	114	8	Precision.java	compareTo	x	double	1	RET	equals($, y, maxUlps)
197	114	8	Precision.java	compareTo	y	double	1	RET	equals(x, $, maxUlps)
197	114	8	Precision.java	compareTo	maxUlps	int	1	RET	equals(x, y, $)
198	116	15	Precision.java	compareTo	x	double	0	RET	$ < y
198	116	15	Precision.java	compareTo	y	double	0	RET	x < $
199	199	8	Precision.java	equals	xInt	int	0	DEF	$ < 0
200	202	8	Precision.java	equals	yInt	int	0	DEF	$ < 0
201	304	8	Precision.java	equals	xInt	long	0	DEF	$ < 0
202	307	8	Precision.java	equals	yInt	long	0	DEF	$ < 0
203	369	12	Precision.java	round	x	double	1	RET	Double.isInfinite($)
204	424	12	Precision.java	roundUnscaled	sign	double	1	DEF	$ == -1
205	434	12	Precision.java	roundUnscaled	sign	double	1	DEF	$ == -1
206	443	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
207	452	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ > 0.5
208	454	19	Precision.java	roundUnscaled	fraction	double	1	DEF	$ < 0.5
209	458	16	Precision.java	roundUnscaled	unscaled	double	1	DEF	FastMath.floor($) / 2.0 == FastMath.floor(Math .floor($) / 2.0)
210	470	12	Precision.java	roundUnscaled	fraction	double	1	DEF	$ >= 0.5
211	478	12	Precision.java	roundUnscaled	unscaled	double	0	MathArithmeticException	$ != FastMath.floor($)
1268	144	8	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	DimensionMismatchException	$ != null
1269	145	12	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	NonSquareOperatorException	$.getColumnDimension() != $.getRowDimension()
1270	149	12	PreconditionedIterativeLinearSolver.java	checkParameters	a	RealLinearOperator	0	DimensionMismatchException	m.getRowDimension() != $.getRowDimension()
1270	149	12	PreconditionedIterativeLinearSolver.java	checkParameters	m	RealLinearOperator	0	DimensionMismatchException	$.getRowDimension() != a.getRowDimension()
2034	122	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, begin, length, true)
2034	122	8	Product.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2034	122	8	Product.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2034	122	8	Product.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
23984	124	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
23984	124	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
23984	124	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2035	162	8	Product.java	evaluate	THIS	Product	0	DEF	$.test(values, weights, begin, length, true)
2035	162	8	Product.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
2035	162	8	Product.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
2035	162	8	Product.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
2035	162	8	Product.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
23985	164	12	Product.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
23985	164	12	Product.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
23985	164	12	Product.java	evaluate	length	int	0	NIL-FOR	i < begin + $
893	100	8	ProperBigFractionFormat.java	format	whole	BigInteger	0	DEF	BigInteger.ZERO.equals($)
894	103	12	ProperBigFractionFormat.java	format	num	BigInteger	0	DEF	$.compareTo(BigInteger.ZERO) < 0
895	138	8	ProperBigFractionFormat.java	parse	ret	BigFraction	0	RET	$ != null
896	149	8	ProperBigFractionFormat.java	parse	whole	BigInteger	0	RET	$ == null
897	162	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$ == null
898	170	8	ProperBigFractionFormat.java	parse	num	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
899	201	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$ == null
900	209	8	ProperBigFractionFormat.java	parse	den	BigInteger	0	RET	$.compareTo(BigInteger.ZERO) < 0
901	216	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
902	220	8	ProperBigFractionFormat.java	parse	wholeIsNeg	boolean	0	DEF	$
903	234	8	ProperBigFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
876	101	8	ProperFractionFormat.java	format	whole	int	0	DEF	$ != 0
877	138	8	ProperFractionFormat.java	parse	ret	Fraction	0	RET	$ != null
878	149	8	ProperFractionFormat.java	parse	whole	Number	0	RET	$ == null
879	162	8	ProperFractionFormat.java	parse	num	Number	0	RET	$ == null
880	170	8	ProperFractionFormat.java	parse	num	Number	0	RET	$.intValue() < 0
881	201	8	ProperFractionFormat.java	parse	den	Number	0	RET	$ == null
882	209	8	ProperFractionFormat.java	parse	den	Number	0	RET	$.intValue() < 0
883	227	8	ProperFractionFormat.java	setWholeFormat	format	NumberFormat	0	NullArgumentException	$ == null
23183	108	8	QRDecomposition.java	QRDecomposition	minor	int	0	NIL-FOR	$ < FastMath.min(m, n)
23183	108	8	QRDecomposition.java	QRDecomposition	m	int	0	NIL-FOR	minor < FastMath.min($, n)
23183	108	8	QRDecomposition.java	QRDecomposition	n	int	0	NIL-FOR	minor < FastMath.min(m, $)
23184	120	12	QRDecomposition.java	QRDecomposition	row	int	0	NIL-FOR	$ < m
23184	120	12	QRDecomposition.java	QRDecomposition	m	int	0	NIL-FOR	row < $
1289	127	12	QRDecomposition.java	QRDecomposition	a	double	0	DEF	$ != 0.0
23185	151	16	QRDecomposition.java	QRDecomposition	col	int	0	NIL-FOR	$ < n
23185	151	16	QRDecomposition.java	QRDecomposition	n	int	0	NIL-FOR	col < $
23186	154	20	QRDecomposition.java	QRDecomposition	row	int	0	NIL-FOR	$ < m
23186	154	20	QRDecomposition.java	QRDecomposition	m	int	0	NIL-FOR	row < $
23187	160	20	QRDecomposition.java	QRDecomposition	row	int	0	NIL-FOR	$ < m
23187	160	20	QRDecomposition.java	QRDecomposition	m	int	0	NIL-FOR	row < $
1290	175	8	QRDecomposition.java	getR	THIS	QRDecomposition	0	DEF	$.cachedR == null
23188	182	12	QRDecomposition.java	getR	row	int	0	NIL-FOR	$ >= 0
23189	184	16	QRDecomposition.java	getR	col	int	0	NIL-FOR	$ < n
23189	184	16	QRDecomposition.java	getR	n	int	0	NIL-FOR	col < $
1291	201	8	QRDecomposition.java	getQ	THIS	QRDecomposition	0	DEF	$.cachedQ == null
1292	213	8	QRDecomposition.java	getQT	THIS	QRDecomposition	0	DEF	$.cachedQT == null
23190	225	12	QRDecomposition.java	getQT	minor	int	0	NIL-FOR	$ >= FastMath.min(m, n)
23190	225	12	QRDecomposition.java	getQT	n	int	0	NIL-FOR	minor >= FastMath.min(m, $)
23190	225	12	QRDecomposition.java	getQT	m	int	0	NIL-FOR	minor >= FastMath.min($, n)
23191	229	12	QRDecomposition.java	getQT	minor	int	0	NIL-FOR	$ >= 0
1293	232	16	QRDecomposition.java	getQT	qrtMinor	double[]	0	DEF	$[minor] != 0.0
1293	232	16	QRDecomposition.java	getQT	minor	int	0	DEF	qrtMinor[$] != 0.0
23192	233	20	QRDecomposition.java	getQT	col	int	0	NIL-FOR	$ < m
23192	233	20	QRDecomposition.java	getQT	m	int	0	NIL-FOR	col < $
23193	235	24	QRDecomposition.java	getQT	row	int	0	NIL-FOR	$ < m
23193	235	24	QRDecomposition.java	getQT	m	int	0	NIL-FOR	row < $
23194	240	24	QRDecomposition.java	getQT	row	int	0	NIL-FOR	$ < m
23194	240	24	QRDecomposition.java	getQT	m	int	0	NIL-FOR	row < $
1294	261	8	QRDecomposition.java	getH	THIS	QRDecomposition	0	DEF	$.cachedH == null
23195	266	12	QRDecomposition.java	getH	i	int	0	NIL-FOR	$ < m
23195	266	12	QRDecomposition.java	getH	m	int	0	NIL-FOR	i < $
23196	267	16	QRDecomposition.java	getH	j	int	0	NIL-FOR	$ < FastMath.min(i + 1, n)
23196	267	16	QRDecomposition.java	getH	i	int	0	NIL-FOR	j < FastMath.min($ + 1, n)
23196	267	16	QRDecomposition.java	getH	n	int	0	NIL-FOR	j < FastMath.min(i + 1, $)
2456	178	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
2457	185	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
2458	193	8	RandomAdaptor.java	setSeed	THIS	RandomAdaptor	0	DEF	$.randomGenerator != null
2459	201	8	RandomDataImpl.java	nextHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
24170	216	8	RandomDataImpl.java	nextHexString	THIS	RandomDataImpl	0	NIL-FOR	i < randomBytes.$.length
24170	216	8	RandomDataImpl.java	nextHexString	i	int	0	NIL-FOR	$ < randomBytes.length
24170	216	8	RandomDataImpl.java	nextHexString	randomBytes	byte[]	0	NIL-FOR	i < $.length
2460	227	12	RandomDataImpl.java	nextHexString	hex	String	0	DEF	$.length() == 1
2461	237	8	RandomDataImpl.java	nextInt	lower	int	0	NumberIsTooLargeException	$ >= upper
2461	237	8	RandomDataImpl.java	nextInt	upper	int	0	NumberIsTooLargeException	lower >= $
2462	248	8	RandomDataImpl.java	nextLong	lower	long	0	NumberIsTooLargeException	$ >= upper
2462	248	8	RandomDataImpl.java	nextLong	upper	long	0	NumberIsTooLargeException	lower >= $
2463	274	8	RandomDataImpl.java	nextSecureHexString	len	int	0	NotStrictlyPositiveException	$ <= 0
24171	293	8	RandomDataImpl.java	nextSecureHexString	iter	int	0	NIL-FOR	$ < numIter + 1
24171	293	8	RandomDataImpl.java	nextSecureHexString	numIter	int	0	NIL-FOR	iter < $ + 1
24172	302	12	RandomDataImpl.java	nextSecureHexString	THIS	RandomDataImpl	0	NIL-FOR	i < hash.$.length
24172	302	12	RandomDataImpl.java	nextSecureHexString	i	int	0	NIL-FOR	$ < hash.length
24172	302	12	RandomDataImpl.java	nextSecureHexString	hash	byte[]	0	NIL-FOR	i < $.length
2464	313	16	RandomDataImpl.java	nextSecureHexString	hex	String	0	DEF	$.length() == 1
2465	324	8	RandomDataImpl.java	nextSecureInt	lower	int	0	NumberIsTooLargeException	$ >= upper
2465	324	8	RandomDataImpl.java	nextSecureInt	upper	int	0	NumberIsTooLargeException	lower >= $
2466	337	8	RandomDataImpl.java	nextSecureLong	lower	long	0	NumberIsTooLargeException	$ >= upper
2466	337	8	RandomDataImpl.java	nextSecureLong	upper	long	0	NumberIsTooLargeException	lower >= $
2467	361	8	RandomDataImpl.java	nextPoisson	mean	double	0	NotStrictlyPositiveException	$ <= 0
2468	366	8	RandomDataImpl.java	nextPoisson	pivot	double	1	RET	mean < $
2468	366	8	RandomDataImpl.java	nextPoisson	mean	double	1	RET	$ < pivot
24173	373	12	RandomDataImpl.java	nextPoisson	n	long	0	NIL-WHILE	$ < 1000 * mean
24173	373	12	RandomDataImpl.java	nextPoisson	mean	double	0	NIL-WHILE	n < 1000 * $
2469	376	16	RandomDataImpl.java	nextPoisson	p	double	1	DEF	r >= $
2469	376	16	RandomDataImpl.java	nextPoisson	r	double	1	DEF	$ >= p
2470	408	16	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ <= p1
2470	408	16	RandomDataImpl.java	nextPoisson	p1	double	1	DEF	u <= $
2471	411	20	RandomDataImpl.java	nextPoisson	lambda	double	0	DEF	x < -$
2471	411	20	RandomDataImpl.java	nextPoisson	delta	double	0	DEF	x > $
2471	411	20	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ < -lambda
2471	411	20	RandomDataImpl.java	nextPoisson	x	double	0	DEF	$ > delta
2472	418	20	RandomDataImpl.java	nextPoisson	u	double	1	DEF	$ > p1 + p2
2472	418	20	RandomDataImpl.java	nextPoisson	p1	double	1	DEF	u > $ + p2
2472	418	20	RandomDataImpl.java	nextPoisson	p2	double	1	DEF	u > p1 + $
2473	429	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < -t
2473	429	16	RandomDataImpl.java	nextPoisson	a	int	0	DEF	$ == 0
2473	429	16	RandomDataImpl.java	nextPoisson	t	double	0	DEF	v < -$
2474	435	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < qa
2474	435	16	RandomDataImpl.java	nextPoisson	qa	double	0	DEF	v < $
2475	439	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ > qr
2475	439	16	RandomDataImpl.java	nextPoisson	qr	double	0	DEF	v > $
2476	442	16	RandomDataImpl.java	nextPoisson	lambda	double	0	DEF	v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + $)) + logLambdaFactorial
2476	442	16	RandomDataImpl.java	nextPoisson	logLambda	double	0	DEF	v < y * $ - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
2476	442	16	RandomDataImpl.java	nextPoisson	logLambdaFactorial	double	0	DEF	v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + $
2476	442	16	RandomDataImpl.java	nextPoisson	y	double	0	DEF	v < $ * logLambda - ArithmeticUtils.factorialLog((int) ($ + lambda)) + logLambdaFactorial
2476	442	16	RandomDataImpl.java	nextPoisson	v	double	0	DEF	$ < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial
2477	454	8	RandomDataImpl.java	nextGaussian	sigma	double	0	NotStrictlyPositiveException	$ <= 0
2478	473	8	RandomDataImpl.java	nextExponential	mean	double	0	NotStrictlyPositiveException	$ <= 0.0
24174	482	8	RandomDataImpl.java	nextExponential	u	double	0	NIL-WHILE	$ < 0.5
2479	491	8	RandomDataImpl.java	nextExponential	u	double	0	RET	$ <= EXPONENTIAL_SA_QI[0]
24175	501	8	RandomDataImpl.java	nextExponential	u	double	0	NIL-DOWHILE	$ > EXPONENTIAL_SA_QI[i]
24175	501	8	RandomDataImpl.java	nextExponential	i	int	0	NIL-DOWHILE	u > EXPONENTIAL_SA_QI[$]
2480	505	12	RandomDataImpl.java	nextExponential	u2	double	0	DEF	$ < umin
2480	505	12	RandomDataImpl.java	nextExponential	umin	double	0	DEF	u2 < $
2481	551	8	RandomDataImpl.java	nextUniform	lower	double	0	NumberIsTooLargeException	$ >= upper
2481	551	8	RandomDataImpl.java	nextUniform	upper	double	0	NumberIsTooLargeException	lower >= $
2482	556	8	RandomDataImpl.java	nextUniform	lower	double	0	MathIllegalArgumentException	Double.isInfinite($)
2482	556	8	RandomDataImpl.java	nextUniform	upper	double	0	MathIllegalArgumentException	Double.isInfinite($)
2483	560	8	RandomDataImpl.java	nextUniform	lower	double	0	MathIllegalArgumentException	Double.isNaN($)
2483	560	8	RandomDataImpl.java	nextUniform	upper	double	0	MathIllegalArgumentException	Double.isNaN($)
24176	568	8	RandomDataImpl.java	nextUniform	u	double	0	NIL-WHILE	$ <= 0.0
24176	568	8	RandomDataImpl.java	nextUniform	lowerInclusive	boolean	0	NIL-WHILE	$
2484	666	8	RandomDataImpl.java	nextGamma	shape	double	0	RET	$ < 1
2485	675	16	RandomDataImpl.java	nextGamma	p	double	1	RET	$ <= 1
2486	681	20	RandomDataImpl.java	nextGamma	x	double	1	DEF	u2 > FastMath.exp(-$)
2486	681	20	RandomDataImpl.java	nextGamma	u2	double	1	DEF	$ > FastMath.exp(-x)
2487	693	20	RandomDataImpl.java	nextGamma	x	double	1	DEF	u2 > FastMath.pow($, shape - 1)
2487	693	20	RandomDataImpl.java	nextGamma	u2	double	1	DEF	$ > FastMath.pow(x, shape - 1)
2487	693	20	RandomDataImpl.java	nextGamma	shape	double	1	DEF	u2 > FastMath.pow(x, $ - 1)
2488	713	12	RandomDataImpl.java	nextGamma	v	double	0	DEF	$ <= 0
2489	721	12	RandomDataImpl.java	nextGamma	xx	double	0	RET	u < 1 - 0.0331*$*$
2489	721	12	RandomDataImpl.java	nextGamma	u	double	0	RET	$ < 1 - 0.0331*xx*xx
2490	725	12	RandomDataImpl.java	nextGamma	v	double	0	RET	FastMath.log(u) < 0.5*xx + d*(1 - $ + FastMath.log($))
2490	725	12	RandomDataImpl.java	nextGamma	xx	double	0	RET	FastMath.log(u) < 0.5*$ + d*(1 - v + FastMath.log(v))
2490	725	12	RandomDataImpl.java	nextGamma	u	double	0	RET	FastMath.log($) < 0.5*xx + d*(1 - v + FastMath.log(v))
2490	725	12	RandomDataImpl.java	nextGamma	d	double	0	RET	FastMath.log(u) < 0.5*xx + $*(1 - v + FastMath.log(v))
2491	812	8	RandomDataImpl.java	getRan	THIS	RandomDataImpl	0	DEF	$.rand == null
2492	836	8	RandomDataImpl.java	getSecRan	THIS	RandomDataImpl	0	DEF	$.secRand == null
2493	853	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
2494	867	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
2495	883	8	RandomDataImpl.java	reSeedSecure	THIS	RandomDataImpl	0	DEF	$.secRand == null
2496	894	8	RandomDataImpl.java	reSeed	THIS	RandomDataImpl	0	DEF	$.rand == null
2497	935	8	RandomDataImpl.java	nextPermutation	n	int	0	NumberIsTooLargeException	k > $
2497	935	8	RandomDataImpl.java	nextPermutation	k	int	0	NumberIsTooLargeException	$ > n
2498	939	8	RandomDataImpl.java	nextPermutation	k	int	0	NotStrictlyPositiveException	$ <= 0
24177	947	8	RandomDataImpl.java	nextPermutation	i	int	0	NIL-FOR	$ < k
24177	947	8	RandomDataImpl.java	nextPermutation	k	int	0	NIL-FOR	i < $
2499	970	8	RandomDataImpl.java	nextSample	len	int	0	NumberIsTooLargeException	k > $
2499	970	8	RandomDataImpl.java	nextSample	k	int	0	NumberIsTooLargeException	$ > len
2500	974	8	RandomDataImpl.java	nextSample	k	int	0	NotStrictlyPositiveException	$ <= 0
24178	981	8	RandomDataImpl.java	nextSample	i	int	0	NIL-FOR	$ < k
24178	981	8	RandomDataImpl.java	nextSample	k	int	0	NIL-FOR	i < $
24179	1025	8	RandomDataImpl.java	shuffle	i	int	0	NIL-FOR	$ >= end
24179	1025	8	RandomDataImpl.java	shuffle	end	int	0	NIL-FOR	i >= $
2501	1026	12	RandomDataImpl.java	shuffle	i	int	1	DEF	$ == 0
24180	1046	8	RandomDataImpl.java	getNatural	i	int	0	NIL-FOR	$ < n
24180	1046	8	RandomDataImpl.java	getNatural	n	int	0	NIL-FOR	i < $
2552	130	8	RandomKey.java	decodeGeneric	l	int	0	DimensionMismatchException	representation.size() != $
2552	130	8	RandomKey.java	decodeGeneric	representation	List<Double>	0	DimensionMismatchException	$.size() != l
2553	133	8	RandomKey.java	decodeGeneric	l	int	0	DimensionMismatchException	sortedRepr.size() != $
2553	133	8	RandomKey.java	decodeGeneric	sortedRepr	List<Double>	0	DimensionMismatchException	$.size() != l
24202	142	8	RandomKey.java	decodeGeneric	i	int	0	NIL-FOR	$<l
24202	142	8	RandomKey.java	decodeGeneric	l	int	0	NIL-FOR	i<$
2554	160	8	RandomKey.java	isSame	another	Chromosome	0	RET	$ instanceof RandomKey<?>
2555	165	8	RandomKey.java	isSame	THIS	RandomKey	0	RET	$.getLength() != anotherRk.getLength()
2555	165	8	RandomKey.java	isSame	anotherRk	RandomKey<?>	0	RET	getLength() != $.getLength()
24203	174	8	RandomKey.java	isSame	THIS	RandomKey	0	NIL-FOR	i<$.getLength()
24203	174	8	RandomKey.java	isSame	i	int	0	NIL-FOR	$<getLength()
2556	175	12	RandomKey.java	isSame	i	int	0	RET	thisPerm.get($) != anotherPerm.get($)
2556	175	12	RandomKey.java	isSame	thisPerm	List<Integer>	0	RET	$.get(i) != anotherPerm.get(i)
2556	175	12	RandomKey.java	isSame	anotherPerm	List<Integer>	0	RET	thisPerm.get(i) != $.get(i)
2557	191	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val < 0
2557	191	12	RandomKey.java	checkValidity	THIS	RandomKey	0	InvalidRepresentationException	$.val > 1
24204	208	8	RandomKey.java	randomPermutation	i	int	0	NIL-FOR	$<l
24204	208	8	RandomKey.java	randomPermutation	l	int	0	NIL-FOR	i<$
24205	223	8	RandomKey.java	identityPermutation	i	int	0	NIL-FOR	$<l
24205	223	8	RandomKey.java	identityPermutation	l	int	0	NIL-FOR	i<$
2558	270	8	RandomKey.java	inducedPermutation	originalData	List<S>	0	DimensionMismatchException	$.size() != permutedData.size()
2558	270	8	RandomKey.java	inducedPermutation	permutedData	List<S>	0	DimensionMismatchException	originalData.size() != $.size()
24206	278	8	RandomKey.java	inducedPermutation	i	int	0	NIL-FOR	$<l
24206	278	8	RandomKey.java	inducedPermutation	l	int	0	NIL-FOR	i<$
2559	280	12	RandomKey.java	inducedPermutation	index	int	0	MathIllegalArgumentException	$ == -1
24207	305	8	RandomKey.java	baseSequence	i	int	0	NIL-FOR	$<l
24207	305	8	RandomKey.java	baseSequence	l	int	0	NIL-FOR	i<$
2527	41	8	RandomKeyMutation.java	mutate	original	Chromosome	0	MathIllegalArgumentException	$ instanceof RandomKey<?>
22982	256	8	RealMatrixFormat.java	format	i	int	0	NIL-FOR	$ < rows
22982	256	8	RealMatrixFormat.java	format	rows	int	0	NIL-FOR	i < $
22983	258	12	RealMatrixFormat.java	format	j	int	0	NIL-FOR	$ < matrix.getColumnDimension()
22983	258	12	RealMatrixFormat.java	format	matrix	RealMatrix	0	NIL-FOR	j < $.getColumnDimension()
1131	259	16	RealMatrixFormat.java	format	j	int	0	DEF	$ > 0
1132	265	12	RealMatrixFormat.java	format	i	int	0	DEF	$ < rows - 1
1132	265	12	RealMatrixFormat.java	format	rows	int	0	DEF	i < $ - 1
1133	287	8	RealMatrixFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1134	314	8	RealMatrixFormat.java	parse	trimmedPrefix	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1134	314	8	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
1134	314	8	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
22984	321	8	RealMatrixFormat.java	parse	loop	boolean	0	NIL-FOR	$
1135	323	12	RealMatrixFormat.java	parse	rowComponents	List<Number>	1	RET	$.isEmpty()
1136	325	16	RealMatrixFormat.java	parse	trimmedColumnSeparator	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1136	325	16	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedColumnSeparator, pos)
1136	325	16	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedColumnSeparator, $)
1137	326	20	RealMatrixFormat.java	parse	trimmedRowSuffix	String	1	RET	$.length() != 0
1137	326	20	RealMatrixFormat.java	parse	trimmedRowSuffix	String	1	RET	CompositeFormat.parseFixedstring(source, $, pos)
1137	326	20	RealMatrixFormat.java	parse	source	String	1	RET	CompositeFormat.parseFixedstring($, trimmedRowSuffix, pos)
1137	326	20	RealMatrixFormat.java	parse	pos	ParsePosition	1	RET	CompositeFormat.parseFixedstring(source, trimmedRowSuffix, $)
1138	331	24	RealMatrixFormat.java	parse	trimmedRowSeparator	String	1	DEF	CompositeFormat.parseFixedstring(source, $, pos)
1138	331	24	RealMatrixFormat.java	parse	source	String	1	DEF	CompositeFormat.parseFixedstring($, trimmedRowSeparator, pos)
1138	331	24	RealMatrixFormat.java	parse	pos	ParsePosition	1	DEF	CompositeFormat.parseFixedstring(source, trimmedRowSeparator, $)
1139	342	16	RealMatrixFormat.java	parse	trimmedRowPrefix	String	0	RET	$.length() != 0
1139	342	16	RealMatrixFormat.java	parse	trimmedRowPrefix	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1139	342	16	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedRowPrefix, pos)
1139	342	16	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedRowPrefix, $)
1140	348	12	RealMatrixFormat.java	parse	loop	boolean	0	RET	$
1141	351	16	RealMatrixFormat.java	parse	component	Number	1	DEF	$ != null
1142	354	20	RealMatrixFormat.java	parse	rowComponents	List<Number>	1	DEF	$.isEmpty()
1143	367	8	RealMatrixFormat.java	parse	rowComponents	List<Number>	0	DEF	$.isEmpty()
1144	373	8	RealMatrixFormat.java	parse	trimmedSuffix	String	0	RET	CompositeFormat.parseFixedstring(source, $, pos)
1144	373	8	RealMatrixFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
1144	373	8	RealMatrixFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
1145	378	8	RealMatrixFormat.java	parse	matrix	List<List<Number>>	0	RET	$.isEmpty()
22985	388	12	RealMatrixFormat.java	parse	THIS	RealMatrixFormat	0	NIL-FOR	i < $.rowList.size()
22985	388	12	RealMatrixFormat.java	parse	i	int	0	NIL-FOR	$ < rowList.size()
1559	177	8	RealVector.java	checkVectorDimensions	d	int	0	DimensionMismatchException	$ != n
1559	177	8	RealVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	d != $
1560	189	8	RealVector.java	checkIndex	THIS	RealVector	0	OutOfRangeException	index >= $.getDimension()
1560	189	8	RealVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1560	189	8	RealVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1561	206	8	RealVector.java	checkIndices	dim	int	0	OutOfRangeException	start >= $
1561	206	8	RealVector.java	checkIndices	start	int	0	OutOfRangeException	$ < 0
1561	206	8	RealVector.java	checkIndices	start	int	0	OutOfRangeException	$ >= dim
1562	210	8	RealVector.java	checkIndices	dim	int	0	OutOfRangeException	end >= $
1562	210	8	RealVector.java	checkIndices	end	int	0	OutOfRangeException	$ < 0
1562	210	8	RealVector.java	checkIndices	end	int	0	OutOfRangeException	$ >= dim
1563	214	8	RealVector.java	checkIndices	start	int	0	NumberIsTooSmallException	end < $
1563	214	8	RealVector.java	checkIndices	end	int	0	NumberIsTooSmallException	$ < start
23604	234	8	RealVector.java	add	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
23605	255	8	RealVector.java	subtract	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1564	282	8	RealVector.java	mapAddToSelf	d	double	0	RET	$ != 0
23606	307	8	RealVector.java	dotProduct	i	int	0	NIL-FOR	$ < n
23606	307	8	RealVector.java	dotProduct	n	int	0	NIL-FOR	i < $
1565	328	8	RealVector.java	cosine	norm	double	0	MathArithmeticException	$ == 0
1565	328	8	RealVector.java	cosine	vNorm	double	0	MathArithmeticException	$ == 0
23607	393	8	RealVector.java	getDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
23608	414	8	RealVector.java	getNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
23609	435	8	RealVector.java	getL1Norm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
23610	455	8	RealVector.java	getLInfNorm	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
23611	477	8	RealVector.java	getL1Distance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
23612	502	8	RealVector.java	getLInfDistance	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
23613	519	8	RealVector.java	getMinIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1566	521	12	RealVector.java	getMinIndex	entry	Entry	0	DEF	$.getValue() <= minValue
1566	521	12	RealVector.java	getMinIndex	minValue	double	0	DEF	entry.getValue() <= $
23614	550	8	RealVector.java	getMaxIndex	iterator	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
1567	552	12	RealVector.java	getMaxIndex	entry	Entry	0	DEF	$.getValue() >= maxValue
1567	552	12	RealVector.java	getMaxIndex	maxValue	double	0	DEF	entry.getValue() >= $
1568	648	8	RealVector.java	outerProduct	v	RealVector	1	DEF	$ instanceof SparseRealVector
23615	653	8	RealVector.java	outerProduct	i	int	0	NIL-FOR	$ < m
23615	653	8	RealVector.java	outerProduct	m	int	0	NIL-FOR	i < $
23616	654	12	RealVector.java	outerProduct	j	int	0	NIL-FOR	$ < n
23616	654	12	RealVector.java	outerProduct	n	int	0	NIL-FOR	j < $
1569	673	8	RealVector.java	projection	norm2	double	0	MathArithmeticException	$ == 0.0
23617	686	8	RealVector.java	set	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
23618	702	8	RealVector.java	toArray	i	int	0	NIL-FOR	$ < dim
23618	702	8	RealVector.java	toArray	dim	int	0	NIL-FOR	i < $
1570	717	8	RealVector.java	unitVector	norm	double	0	MathArithmeticException	$ == 0
1571	732	8	RealVector.java	unitize	norm	double	0	MathArithmeticException	$ == 0
23619	828	8	RealVector.java	mapToSelf	it	Iterator<Entry>	0	NIL-WHILE	$.hasNext()
23620	866	8	RealVector.java	combineToSelf	THIS	RealVector	0	NIL-FOR	i < $.getDimension()
23620	866	8	RealVector.java	combineToSelf	i	int	0	NIL-FOR	$ < getDimension()
23621	887	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < dim
23621	887	8	RealVector.java	walkInDefaultOrder	dim	int	0	NIL-FOR	i < $
23622	909	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
23622	909	8	RealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
23623	961	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ < dim
23623	961	8	RealVector.java	walkInDefaultOrder	dim	int	0	NIL-FOR	i < $
23624	983	8	RealVector.java	walkInDefaultOrder	i	int	0	NIL-FOR	$ <= end
23624	983	8	RealVector.java	walkInDefaultOrder	end	int	0	NIL-FOR	i <= $
23345	202	8	RealVectorFormat.java	format	i	int	0	NIL-FOR	$ < vector.getDimension()
23345	202	8	RealVectorFormat.java	format	vector	RealVector	0	NIL-FOR	i < $.getDimension()
1401	203	12	RealVectorFormat.java	format	i	int	0	DEF	$ > 0
1402	226	8	RealVectorFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
1403	246	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedPrefix, pos)
1403	246	8	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
1403	246	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
23346	252	8	RealVectorFormat.java	parse	loop	boolean	0	NIL-FOR	$
1404	254	12	RealVectorFormat.java	parse	components	List<Number>	0	DEF	$.isEmpty()
1405	256	16	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	DEF	CompositeFormat.parseFixedstring(source, $.trimmedSeparator, pos)
1405	256	16	RealVectorFormat.java	parse	source	String	0	DEF	CompositeFormat.parseFixedstring($, trimmedSeparator, pos)
1405	256	16	RealVectorFormat.java	parse	pos	ParsePosition	0	DEF	CompositeFormat.parseFixedstring(source, trimmedSeparator, $)
1406	261	12	RealVectorFormat.java	parse	loop	boolean	0	RET	$
1407	264	16	RealVectorFormat.java	parse	component	Number	1	DEF	$ != null
1408	278	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSuffix, pos)
1408	278	8	RealVectorFormat.java	parse	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
1408	278	8	RealVectorFormat.java	parse	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
23347	284	8	RealVectorFormat.java	parse	THIS	RealVectorFormat	0	NIL-FOR	i < data.$.length
23347	284	8	RealVectorFormat.java	parse	i	int	0	NIL-FOR	$ < data.length
23347	284	8	RealVectorFormat.java	parse	data	double[]	0	NIL-FOR	i < $.length
23492	71	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
23492	71	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
23493	76	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	loop	boolean	0	NIL-FOR	$
23494	80	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
23494	80	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
1465	83	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	ii	int	0	DEF	c[$][$] > c[isi][isi]
1465	83	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	isi	int	0	DEF	c[ii][ii] > c[$][$]
1465	83	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	0	DEF	$[ii][ii] > $[isi][isi]
1466	90	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	swap	int[]	0	DEF	$[r] != r
1466	90	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	DEF	swap[$] != $
1467	98	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	ir	int	1	NonPositiveDefiniteMatrixException	c[$][$] < small
1467	98	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	1	NonPositiveDefiniteMatrixException	$[ir][ir] < small
1467	98	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	small	double	1	NonPositiveDefiniteMatrixException	c[ir][ir] < $
1468	100	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	NonPositiveDefiniteMatrixException	$ == 0
23495	105	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
23495	105	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
1469	106	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NonPositiveDefiniteMatrixException	c[index[$]][index[$]] < -small
1469	106	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	c	double[][]	0	NonPositiveDefiniteMatrixException	$[index[i]][index[i]] < -small
1469	106	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	index	int[]	0	NonPositiveDefiniteMatrixException	c[$[i]][$[i]] < -small
1469	106	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	small	double	0	NonPositiveDefiniteMatrixException	c[index[i]][index[i]] < -$
23496	124	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
23496	124	16	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
23497	129	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	j	int	0	NIL-FOR	$ < i
23497	129	20	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	j < $
23498	145	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	i	int	0	NIL-FOR	$ < order
23498	145	8	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	order	int	0	NIL-FOR	i < $
23499	146	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	j	int	0	NIL-FOR	$ < r
23499	146	12	RectangularCholeskyDecomposition.java	RectangularCholeskyDecomposition	r	int	0	NIL-FOR	j < $
616	44	8	RegionFactory.java	buildConvex	THIS	RegionFactory	0	RET	hyperplanes.$.length == 0
616	44	8	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$.length == 0
616	44	8	RegionFactory.java	buildConvex	hyperplanes	Hyperplane<S>	0	RET	$ == null
617	55	12	RegionFactory.java	buildConvex	THIS	RegionFactory	0	DEF	node.insertCut($.hyperplane)
617	55	12	RegionFactory.java	buildConvex	node	BSPTree<S>	0	DEF	$.insertCut(hyperplane)
618	137	8	RegionFactory.java	recurseComplement	node	BSPTree<S>	0	RET	$.getCut() == null
619	143	8	RegionFactory.java	recurseComplement	attribute	BoundaryAttribute<S>	0	DEF	$ != null
2373	100	8	RegressionResults.java	RegressionResults	copyData	boolean	1	DEF	$
24141	103	12	RegressionResults.java	RegressionResults	THIS	RegressionResults	0	NIL-FOR	i < varcov.$.length
24141	103	12	RegressionResults.java	RegressionResults	i	int	0	NIL-FOR	$ < varcov.length
24141	103	12	RegressionResults.java	RegressionResults	varcov	double[][]	0	NIL-FOR	i < $.length
2374	117	8	RegressionResults.java	RegressionResults	rank	int	0	DEF	$ > 0
2375	129	8	RegressionResults.java	RegressionResults	containsConstant	boolean	1	DEF	$
2376	151	8	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	RET	$.parameters == null
2377	154	8	RegressionResults.java	getParameterEstimate	THIS	RegressionResults	0	OutOfRangeException	index >= $.parameters.length
2377	154	8	RegressionResults.java	getParameterEstimate	index	int	0	OutOfRangeException	$ >= this.parameters.length
2377	154	8	RegressionResults.java	getParameterEstimate	index	int	0	OutOfRangeException	$ < 0
2378	171	8	RegressionResults.java	getParameterEstimates	THIS	RegressionResults	0	RET	$.parameters == null
2379	188	8	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	RET	$.parameters == null
2380	191	8	RegressionResults.java	getStdErrorOfEstimate	THIS	RegressionResults	0	OutOfRangeException	index >= $.parameters.length
2380	191	8	RegressionResults.java	getStdErrorOfEstimate	index	int	0	OutOfRangeException	$ < 0
2380	191	8	RegressionResults.java	getStdErrorOfEstimate	index	int	0	OutOfRangeException	$ >= this.parameters.length
2381	195	8	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	$ > Double.MIN_VALUE
2381	195	8	RegressionResults.java	getStdErrorOfEstimate	var	double	0	RET	Double.isNaN($)
2382	213	8	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	RET	$.parameters == null
24142	217	8	RegressionResults.java	getStdErrorOfEstimates	THIS	RegressionResults	0	NIL-FOR	i < $.parameters.length
24142	217	8	RegressionResults.java	getStdErrorOfEstimates	i	int	0	NIL-FOR	$ < this.parameters.length
2383	219	12	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	$ > Double.MIN_VALUE
2383	219	12	RegressionResults.java	getStdErrorOfEstimates	var	double	0	DEF	Double.isNaN($)
2384	241	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
2385	244	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	OutOfRangeException	i >= $.parameters.length
2385	244	8	RegressionResults.java	getCovarianceOfParameters	i	int	0	OutOfRangeException	$ < 0
2385	244	8	RegressionResults.java	getCovarianceOfParameters	i	int	0	OutOfRangeException	$ >= this.parameters.length
2386	247	8	RegressionResults.java	getCovarianceOfParameters	THIS	RegressionResults	0	OutOfRangeException	j >= $.parameters.length
2386	247	8	RegressionResults.java	getCovarianceOfParameters	j	int	0	OutOfRangeException	$ >= this.parameters.length
2386	247	8	RegressionResults.java	getCovarianceOfParameters	j	int	0	OutOfRangeException	$ < 0
2387	262	8	RegressionResults.java	getNumberOfParameters	THIS	RegressionResults	0	RET	$.parameters == null
2388	401	8	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.isSymmetricVCD
2389	402	12	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	$.varCovData.length > 1
2390	404	16	RegressionResults.java	getVcvElement	i	int	1	RET	$ == j
2390	404	16	RegressionResults.java	getVcvElement	j	int	1	RET	i == $
2391	406	23	RegressionResults.java	getVcvElement	THIS	RegressionResults	1	RET	i >= $.varCovData[j].length
2391	406	23	RegressionResults.java	getVcvElement	i	int	1	RET	$ >= varCovData[j].length
2391	406	23	RegressionResults.java	getVcvElement	j	int	1	RET	i >= varCovData[$].length
2392	412	16	RegressionResults.java	getVcvElement	i	int	1	RET	$ > j
2392	412	16	RegressionResults.java	getVcvElement	j	int	1	RET	i > $
166	183	8	ResizableDoubleArray.java	ResizableDoubleArray	initialArray	double[]	1	DEF	$ == null
167	302	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + $.numElements) > $.internalArray.$.length
168	306	8	ResizableDoubleArray.java	addElement	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
169	345	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	($.startIndex + ($.numElements + 1)) > $.internalArray.$.length
170	355	8	ResizableDoubleArray.java	addElementRolling	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
171	372	8	ResizableDoubleArray.java	substituteMostRecentElement	THIS	ResizableDoubleArray	0	MathIllegalStateException	$.numElements < 1
172	397	8	ResizableDoubleArray.java	checkContractExpand	contraction	float	0	MathIllegalArgumentException	$ < expansion
172	397	8	ResizableDoubleArray.java	checkContractExpand	expansion	float	0	MathIllegalArgumentException	contraction < $
173	403	8	ResizableDoubleArray.java	checkContractExpand	contraction	float	0	MathIllegalArgumentException	$ <= 1.0
174	409	8	ResizableDoubleArray.java	checkContractExpand	expansion	float	0	MathIllegalArgumentException	$ <= 1.0
175	496	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	1	MathIllegalArgumentException	i > $.numElements
175	496	8	ResizableDoubleArray.java	discardExtremeElements	i	int	1	MathIllegalArgumentException	$ > numElements
176	500	14	ResizableDoubleArray.java	discardExtremeElements	i	int	1	MathIllegalArgumentException	$ < 0
177	507	12	ResizableDoubleArray.java	discardExtremeElements	front	boolean	0	DEF	$
178	511	8	ResizableDoubleArray.java	discardExtremeElements	THIS	ResizableDoubleArray	0	DEF	$.shouldContract()
179	533	8	ResizableDoubleArray.java	expand	THIS	ResizableDoubleArray	1	DEF	$.expansionMode == MULTIPLICATIVE_MODE
180	582	8	ResizableDoubleArray.java	getElement	THIS	ResizableDoubleArray	1	ArrayIndexOutOfBoundsException	index >= $.numElements
180	582	8	ResizableDoubleArray.java	getElement	index	int	1	ArrayIndexOutOfBoundsException	$ >= numElements
181	584	15	ResizableDoubleArray.java	getElement	index	int	1	RET	$ >= 0
182	696	8	ResizableDoubleArray.java	setElement	index	int	0	ArrayIndexOutOfBoundsException	$ < 0
183	699	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	index + 1 > $.numElements
183	699	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	$ + 1 > numElements
184	702	8	ResizableDoubleArray.java	setElement	THIS	ResizableDoubleArray	0	DEF	($.startIndex + index) >= $.internalArray.$.length
184	702	8	ResizableDoubleArray.java	setElement	index	int	0	DEF	(startIndex + $) >= internalArray.length
185	735	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	MathIllegalArgumentException	$ != ADDITIVE_MODE
185	735	8	ResizableDoubleArray.java	setExpansionMode	expansionMode	int	0	MathIllegalArgumentException	$ != MULTIPLICATIVE_MODE
186	755	8	ResizableDoubleArray.java	setInitialCapacity	initialCapacity	int	1	DEF	$ > 0
187	777	8	ResizableDoubleArray.java	setNumElements	i	int	0	MathIllegalArgumentException	$ < 0
188	785	8	ResizableDoubleArray.java	setNumElements	THIS	ResizableDoubleArray	0	DEF	($.startIndex + i) > $.internalArray.$.length
188	785	8	ResizableDoubleArray.java	setNumElements	i	int	0	DEF	(startIndex + $) > internalArray.length
189	800	8	ResizableDoubleArray.java	shouldContract	THIS	ResizableDoubleArray	1	RET	$.expansionMode == MULTIPLICATIVE_MODE
190	881	8	ResizableDoubleArray.java	equals	THIS	ResizableDoubleArray	0	RET	object == $
190	881	8	ResizableDoubleArray.java	equals	object	Object	0	RET	$ == this
191	884	7	ResizableDoubleArray.java	equals	object	Object	0	RET	$ instanceof ResizableDoubleArray == false
192	897	15	ResizableDoubleArray.java	equals	result	boolean	1	RET	$
3286	78	8	RiddersSolver.java	doSolve	y1	double	0	RET	$ == 0
3287	81	8	RiddersSolver.java	doSolve	y2	double	0	RET	$ == 0
3288	95	12	RiddersSolver.java	doSolve	y3	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3288	95	12	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y3) <= $
3289	106	12	RiddersSolver.java	doSolve	x	double	0	RET	FastMath.abs($ - oldx) <= tolerance
3289	106	12	RiddersSolver.java	doSolve	tolerance	double	0	RET	FastMath.abs(x - oldx) <= $
3289	106	12	RiddersSolver.java	doSolve	oldx	double	0	RET	FastMath.abs(x - $) <= tolerance
3290	109	12	RiddersSolver.java	doSolve	y	double	0	RET	FastMath.abs($) <= functionValueAccuracy
3290	109	12	RiddersSolver.java	doSolve	functionValueAccuracy	double	0	RET	FastMath.abs(y) <= $
3291	115	12	RiddersSolver.java	doSolve	correction	double	1	DEF	$ > 0.0
3292	116	16	RiddersSolver.java	doSolve	y	double	1	DEF	FastMath.signum(y1) + FastMath.signum($) == 0.0
3292	116	16	RiddersSolver.java	doSolve	y1	double	1	DEF	FastMath.signum($) + FastMath.signum(y) == 0.0
3293	126	16	RiddersSolver.java	doSolve	y	double	1	DEF	FastMath.signum(y2) + FastMath.signum($) == 0.0
3293	126	16	RiddersSolver.java	doSolve	y2	double	1	DEF	FastMath.signum($) + FastMath.signum(y) == 0.0
3399	64	8	RombergIntegrator.java	RombergIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > ROMBERG_MAX_ITERATIONS_COUNT
3400	86	8	RombergIntegrator.java	RombergIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > ROMBERG_MAX_ITERATIONS_COUNT
24609	124	12	RombergIntegrator.java	doIntegrate	j	int	0	NIL-FOR	$ <= i
24609	124	12	RombergIntegrator.java	doIntegrate	i	int	0	NIL-FOR	j <= $
3401	131	12	RombergIntegrator.java	doIntegrate	THIS	RombergIntegrator	0	RET	i >= $.getMinimalIterationCount()
3401	131	12	RombergIntegrator.java	doIntegrate	i	int	0	RET	$ >= getMinimalIterationCount()
3402	134	16	RombergIntegrator.java	doIntegrate	THIS	RombergIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
3402	134	16	RombergIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
3402	134	16	RombergIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
3402	134	16	RombergIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
755	91	8	RootsOfUnity.java	isCounterClockWise	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
756	119	8	RootsOfUnity.java	computeRoots	n	int	0	ZeroException	$ == 0
757	129	8	RootsOfUnity.java	computeRoots	THIS	RootsOfUnity	0	RET	absN == $.omegaCount
757	129	8	RootsOfUnity.java	computeRoots	absN	int	0	RET	$ == omegaCount
22827	143	8	RootsOfUnity.java	computeRoots	i	int	0	NIL-FOR	$ < absN
22827	143	8	RootsOfUnity.java	computeRoots	absN	int	0	NIL-FOR	i < $
758	165	8	RootsOfUnity.java	getReal	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
759	169	8	RootsOfUnity.java	getReal	THIS	RootsOfUnity	0	OutOfRangeException	k >= $.omegaCount
759	169	8	RootsOfUnity.java	getReal	k	int	0	OutOfRangeException	$ < 0
759	169	8	RootsOfUnity.java	getReal	k	int	0	OutOfRangeException	$ >= omegaCount
760	192	8	RootsOfUnity.java	getImaginary	THIS	RootsOfUnity	0	MathIllegalStateException	$.omegaCount == 0
761	196	8	RootsOfUnity.java	getImaginary	THIS	RootsOfUnity	0	OutOfRangeException	k >= $.omegaCount
761	196	8	RootsOfUnity.java	getImaginary	k	int	0	OutOfRangeException	$ < 0
761	196	8	RootsOfUnity.java	getImaginary	k	int	0	OutOfRangeException	$ >= omegaCount
639	137	4	Rotation.java	Rotation	needsNormalization	boolean	0	DEF	$
640	177	4	Rotation.java	Rotation	norm	double	0	MathIllegalArgumentException	$ == 0
641	225	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[2].length != 3
641	225	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[1].length != 3
641	225	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m.$.length != 3
641	225	4	Rotation.java	Rotation	THIS	Rotation	0	NotARotationMatrixException	m[0].length != 3
641	225	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[2].length != 3
641	225	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[1].length != 3
641	225	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$.length != 3
641	225	4	Rotation.java	Rotation	m	double[][]	0	NotARotationMatrixException	$[0].length != 3
642	239	4	Rotation.java	Rotation	det	double	0	NotARotationMatrixException	$ < 0.0
643	330	4	Rotation.java	Rotation	normProduct	double	0	MathIllegalArgumentException	$ == 0
644	336	4	Rotation.java	Rotation	normProduct	double	1	DEF	dot < ((2.0e-15 - 1.0) * $)
644	336	4	Rotation.java	Rotation	dot	double	1	DEF	$ < ((2.0e-15 - 1.0) * normProduct)
645	408	6	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
646	417	10	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
647	426	14	Rotation.java	mat2quat	s	double	1	DEF	$ > -0.19
648	494	4	Rotation.java	getAxis	squaredSine	double	1	RET	$ == 0
649	496	11	Rotation.java	getAxis	THIS	Rotation	0	RET	$.q0 < 0
650	509	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 < -0.1
650	509	4	Rotation.java	getAngle	THIS	Rotation	1	RET	$.q0 > 0.1
651	511	11	Rotation.java	getAngle	THIS	Rotation	0	RET	$.q0 < 0
652	555	4	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYZ
653	564	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
653	564	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
654	573	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZY
655	582	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
655	582	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
656	591	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXZ
657	600	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
657	600	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
658	609	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZX
659	618	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
659	618	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
660	627	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXY
661	636	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
661	636	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
662	645	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZYX
663	654	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
663	654	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
664	663	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XYX
665	672	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
665	672	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
666	681	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.XZX
667	690	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() > 0.9999999999
667	690	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getX() < -0.9999999999
668	699	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YXY
669	708	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
669	708	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
670	717	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.YZY
671	726	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() > 0.9999999999
671	726	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getY() < -0.9999999999
672	735	11	Rotation.java	getAngles	order	RotationOrder	1	CardanEulerSingularityException:RET	$ == RotationOrder.ZXZ
673	744	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
673	744	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
674	762	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() > 0.9999999999
674	762	6	Rotation.java	getAngles	v2	Vector3D	0	CardanEulerSingularityException	$.getZ() < -0.9999999999
22814	960	4	Rotation.java	orthogonalizeMatrix	i	int	0	NIL-WHILE	++$ < 11
675	1001	6	Rotation.java	orthogonalizeMatrix	fn	double	0	RET	FastMath.abs(fn1 - $) <= threshold
675	1001	6	Rotation.java	orthogonalizeMatrix	fn1	double	0	RET	FastMath.abs($ - fn) <= threshold
675	1001	6	Rotation.java	orthogonalizeMatrix	threshold	double	0	RET	FastMath.abs(fn1 - fn) <= $
24360	105	4	RungeKuttaIntegrator.java	integrate	i	int	0	NIL-FOR	$ < stages
24360	105	4	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	i < $
24361	124	4	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-DOWHILE	$.isLastStep
24362	132	6	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	$ < stages
24362	132	6	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	k < $
24363	134	10	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
24363	134	10	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
24363	134	10	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
24364	136	14	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < k
24364	136	14	RungeKuttaIntegrator.java	integrate	k	int	0	NIL-FOR	l < $
24365	147	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	NIL-FOR	j < y0.$.length
24365	147	6	RungeKuttaIntegrator.java	integrate	j	int	0	NIL-FOR	$ < y0.length
24365	147	6	RungeKuttaIntegrator.java	integrate	y0	double[]	0	NIL-FOR	j < $.length
24366	149	10	RungeKuttaIntegrator.java	integrate	l	int	0	NIL-FOR	$ < stages
24366	149	10	RungeKuttaIntegrator.java	integrate	stages	int	0	NIL-FOR	l < $
2749	161	6	RungeKuttaIntegrator.java	integrate	THIS	RungeKuttaIntegrator	0	DEF	$.isLastStep
2750	169	10	RungeKuttaIntegrator.java	integrate	nextIsLast	boolean	0	DEF	$
2639	87	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	1	DEF	interpolator.$.currentState != null
2639	87	4	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
24260	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	THIS	RungeKuttaStepInterpolator	0	NIL-FOR	k < interpolator.$.yDotK.$.length
24260	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	k	int	0	NIL-FOR	$ < interpolator.yDotK.length
24260	92	6	RungeKuttaStepInterpolator.java	RungeKuttaStepInterpolator	interpolator	RungeKuttaStepInterpolator	0	NIL-FOR	k < $.yDotK.length
24261	157	4	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
24261	157	4	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
24262	163	4	RungeKuttaStepInterpolator.java	writeExternal	k	int	0	NIL-FOR	$ < kMax
24262	163	4	RungeKuttaStepInterpolator.java	writeExternal	kMax	int	0	NIL-FOR	k < $
24263	164	6	RungeKuttaStepInterpolator.java	writeExternal	i	int	0	NIL-FOR	$ < n
24263	164	6	RungeKuttaStepInterpolator.java	writeExternal	n	int	0	NIL-FOR	i < $
2640	183	4	RungeKuttaStepInterpolator.java	readExternal	n	int	1	DEF	$ < 0
24264	187	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
24264	187	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
24265	194	4	RungeKuttaStepInterpolator.java	readExternal	k	int	0	NIL-FOR	$ < kMax
24265	194	4	RungeKuttaStepInterpolator.java	readExternal	kMax	int	0	NIL-FOR	k < $
24266	196	6	RungeKuttaStepInterpolator.java	readExternal	i	int	0	NIL-FOR	$ < n
24266	196	6	RungeKuttaStepInterpolator.java	readExternal	n	int	0	NIL-FOR	i < $
2641	203	4	RungeKuttaStepInterpolator.java	readExternal	THIS	RungeKuttaStepInterpolator	1	DEF	$.currentState != null
1048	109	8	SaddlePointExpansion.java	getStirlingError	z	double	1	DEF	$ < 15.0
1049	111	12	SaddlePointExpansion.java	getStirlingError	z2	double	1	DEF	FastMath.floor($) == $
1050	147	8	SaddlePointExpansion.java	getDeviancePart	x	double	1	DEF	FastMath.abs($ - mu) < 0.1 * ($ + mu)
1050	147	8	SaddlePointExpansion.java	getDeviancePart	mu	double	1	DEF	FastMath.abs(x - $) < 0.1 * (x + $)
22840	155	12	SaddlePointExpansion.java	getDeviancePart	s1	double	0	NIL-WHILE	$ != s
22840	155	12	SaddlePointExpansion.java	getDeviancePart	s	double	0	NIL-WHILE	s1 != $
1051	180	8	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == 0
1052	181	12	SaddlePointExpansion.java	logBinomialProbability	p	double	1	DEF	$ < 0.1
1053	186	15	SaddlePointExpansion.java	logBinomialProbability	x	int	1	DEF	$ == n
1053	186	15	SaddlePointExpansion.java	logBinomialProbability	n	int	1	DEF	x == $
1054	187	12	SaddlePointExpansion.java	logBinomialProbability	q	double	1	DEF	$ < 0.1
1417	70	8	SchurTransformer.java	SchurTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1418	93	8	SchurTransformer.java	getP	THIS	SchurTransformer	0	DEF	$.cachedP == null
1419	106	8	SchurTransformer.java	getPT	THIS	SchurTransformer	0	DEF	$.cachedPt == null
1420	120	8	SchurTransformer.java	getT	THIS	SchurTransformer	0	DEF	$.cachedT == null
23362	144	8	SchurTransformer.java	transform	idx	int	0	NIL-WHILE	$ >= 0
1421	150	12	SchurTransformer.java	transform	l	int	1	DEF	$ == idx
1421	150	12	SchurTransformer.java	transform	idx	int	1	DEF	l == $
1422	155	19	SchurTransformer.java	transform	l	int	1	DEF	$ == idx - 1
1422	155	19	SchurTransformer.java	transform	idx	int	1	DEF	l == $ - 1
1423	165	16	SchurTransformer.java	transform	q	double	0	DEF	$ >= 0
1424	166	20	SchurTransformer.java	transform	p	double	1	DEF	$ >= 0
23363	180	20	SchurTransformer.java	transform	j	int	0	NIL-FOR	$ < n
23363	180	20	SchurTransformer.java	transform	n	int	0	NIL-FOR	j < $
23364	187	20	SchurTransformer.java	transform	i	int	0	NIL-FOR	$ <= idx
23364	187	20	SchurTransformer.java	transform	idx	int	0	NIL-FOR	i <= $
23365	194	20	SchurTransformer.java	transform	i	int	0	NIL-FOR	$ <= n - 1
23365	194	20	SchurTransformer.java	transform	n	int	0	NIL-FOR	i <= $ - 1
1425	208	16	SchurTransformer.java	transform	THIS	SchurTransformer	0	MaxCountExceededException	++iteration > $.maxIterations
1425	208	16	SchurTransformer.java	transform	iteration	int	0	MaxCountExceededException	++$ > maxIterations
23366	219	16	SchurTransformer.java	transform	m	int	0	NIL-WHILE	$ >= l
23366	219	16	SchurTransformer.java	transform	l	int	0	NIL-WHILE	m >= $
1426	228	20	SchurTransformer.java	transform	m	int	0	DEF	$ == l
1426	228	20	SchurTransformer.java	transform	l	int	0	DEF	m == $
23367	232	20	SchurTransformer.java	transform	THIS	SchurTransformer	0	NIL-FOR	i < hVec.$.length
23367	232	20	SchurTransformer.java	transform	i	int	0	NIL-FOR	$ < hVec.length
23367	232	20	SchurTransformer.java	transform	hVec	double[]	0	NIL-FOR	i < $.length
1427	243	20	SchurTransformer.java	transform	THIS	SchurTransformer	0	DEF	lhs < $.epsilon * rhs
1427	243	20	SchurTransformer.java	transform	lhs	double	0	DEF	$ < epsilon * rhs
1427	243	20	SchurTransformer.java	transform	rhs	double	0	DEF	lhs < epsilon * $
23368	261	8	SchurTransformer.java	getNorm	THIS	SchurTransformer	0	NIL-FOR	i < $.matrixT.$.length
23368	261	8	SchurTransformer.java	getNorm	i	int	0	NIL-FOR	$ < matrixT.length
23369	263	12	SchurTransformer.java	getNorm	THIS	SchurTransformer	0	NIL-FOR	j < $.matrixT.$.length
23369	263	12	SchurTransformer.java	getNorm	j	int	0	NIL-FOR	$ < matrixT.length
23370	279	8	SchurTransformer.java	findSmallSubDiagonalElement	l	int	0	NIL-WHILE	$ > 0
1428	281	12	SchurTransformer.java	findSmallSubDiagonalElement	THIS	SchurTransformer	0	DEF	Precision.equals(s, 0.0, $.epsilon)
1428	281	12	SchurTransformer.java	findSmallSubDiagonalElement	s	double	0	DEF	Precision.equals($, 0.0, epsilon)
1429	284	12	SchurTransformer.java	findSmallSubDiagonalElement	THIS	SchurTransformer	0	DEF	FastMath.abs($.matrixT[l][l - 1]) < $.epsilon * s
1429	284	12	SchurTransformer.java	findSmallSubDiagonalElement	s	double	0	DEF	FastMath.abs(matrixT[l][l - 1]) < epsilon * $
1429	284	12	SchurTransformer.java	findSmallSubDiagonalElement	l	int	0	DEF	FastMath.abs(matrixT[$][$ - 1]) < epsilon * s
1430	304	8	SchurTransformer.java	computeShift	l	int	0	DEF	$ < idx
1430	304	8	SchurTransformer.java	computeShift	idx	int	0	DEF	l < $
1431	310	8	SchurTransformer.java	computeShift	iteration	int	0	DEF	$ == 10
23371	312	12	SchurTransformer.java	computeShift	i	int	0	NIL-FOR	$ <= idx
23371	312	12	SchurTransformer.java	computeShift	idx	int	0	NIL-FOR	i <= $
1432	321	8	SchurTransformer.java	computeShift	iteration	int	0	DEF	$ == 30
1433	324	12	SchurTransformer.java	computeShift	THIS	SchurTransformer	0	DEF	Precision.compareTo(s, 0.0d, $.epsilon) > 0
1433	324	12	SchurTransformer.java	computeShift	s	double	0	DEF	Precision.compareTo($, 0.0d, epsilon) > 0
1434	326	16	SchurTransformer.java	computeShift	THIS	SchurTransformer	0	DEF	shift.$.y < shift.$.x
1434	326	16	SchurTransformer.java	computeShift	shift	ShiftInfo	0	DEF	$.y < $.x
23372	330	16	SchurTransformer.java	computeShift	i	int	0	NIL-FOR	$ <= idx
23372	330	16	SchurTransformer.java	computeShift	idx	int	0	NIL-FOR	i <= $
23373	356	8	SchurTransformer.java	performDoubleQRStep	k	int	0	NIL-FOR	$ <= idx - 1
23373	356	8	SchurTransformer.java	performDoubleQRStep	idx	int	0	NIL-FOR	k <= $ - 1
1435	358	12	SchurTransformer.java	performDoubleQRStep	k	int	0	DEF	$ != m
1435	358	12	SchurTransformer.java	performDoubleQRStep	m	int	0	DEF	k != $
1436	363	16	SchurTransformer.java	performDoubleQRStep	THIS	SchurTransformer	0	DEF	Precision.equals(shift.$.x, 0.0, $.epsilon)
1436	363	16	SchurTransformer.java	performDoubleQRStep	shift	ShiftInfo	0	DEF	Precision.equals($.x, 0.0, epsilon)
1437	369	12	SchurTransformer.java	performDoubleQRStep	THIS	SchurTransformer	0	DEF	Precision.equals(shift.$.x, 0.0, $.epsilon)
1437	369	12	SchurTransformer.java	performDoubleQRStep	shift	ShiftInfo	0	DEF	Precision.equals($.x, 0.0, epsilon)
1438	373	12	SchurTransformer.java	performDoubleQRStep	THIS	SchurTransformer	0	DEF	Precision.compareTo(p, 0.0, $.epsilon) < 0
1438	373	12	SchurTransformer.java	performDoubleQRStep	p	double	0	DEF	Precision.compareTo($, 0.0, epsilon) < 0
1439	376	12	SchurTransformer.java	performDoubleQRStep	THIS	SchurTransformer	0	DEF	Precision.equals(s, 0.0, $.epsilon)
1439	376	12	SchurTransformer.java	performDoubleQRStep	s	double	0	DEF	Precision.equals($, 0.0, epsilon)
1440	377	16	SchurTransformer.java	performDoubleQRStep	k	int	1	DEF	$ != m
1440	377	16	SchurTransformer.java	performDoubleQRStep	m	int	1	DEF	k != $
1441	379	23	SchurTransformer.java	performDoubleQRStep	l	int	0	DEF	$ != m
1441	379	23	SchurTransformer.java	performDoubleQRStep	m	int	0	DEF	l != $
23374	390	16	SchurTransformer.java	performDoubleQRStep	j	int	0	NIL-FOR	$ < n
23374	390	16	SchurTransformer.java	performDoubleQRStep	n	int	0	NIL-FOR	j < $
1442	392	20	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
23375	401	16	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= FastMath.min(idx, k + 3)
23375	401	16	SchurTransformer.java	performDoubleQRStep	k	int	0	NIL-FOR	i <= FastMath.min(idx, $ + 3)
23375	401	16	SchurTransformer.java	performDoubleQRStep	idx	int	0	NIL-FOR	i <= FastMath.min($, k + 3)
1443	403	20	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
23376	413	16	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= high
23376	413	16	SchurTransformer.java	performDoubleQRStep	high	int	0	NIL-FOR	i <= $
1444	415	20	SchurTransformer.java	performDoubleQRStep	notlast	boolean	0	DEF	$
23377	426	8	SchurTransformer.java	performDoubleQRStep	i	int	0	NIL-FOR	$ <= idx
23377	426	8	SchurTransformer.java	performDoubleQRStep	idx	int	0	NIL-FOR	i <= $
1445	428	12	SchurTransformer.java	performDoubleQRStep	i	int	0	DEF	$ > m+2
1445	428	12	SchurTransformer.java	performDoubleQRStep	m	int	0	DEF	i > $+2
3307	83	8	SecantSolver.java	doSolve	f0	double	0	RET	$ == 0.0
3308	86	8	SecantSolver.java	doSolve	f1	double	0	RET	$ == 0.0
3309	107	12	SecantSolver.java	doSolve	fx	double	0	RET	$ == 0.0
3310	120	12	SecantSolver.java	doSolve	f1	double	0	RET	FastMath.abs($) <= ftol
3310	120	12	SecantSolver.java	doSolve	ftol	double	0	RET	FastMath.abs(f1) <= $
3311	126	12	SecantSolver.java	doSolve	x0	double	0	RET	FastMath.abs(x1 - $) < FastMath.max(rtol * FastMath.abs(x1), atol)
3311	126	12	SecantSolver.java	doSolve	x1	double	0	RET	FastMath.abs($ - x0) < FastMath.max(rtol * FastMath.abs($), atol)
3311	126	12	SecantSolver.java	doSolve	atol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), $)
3311	126	12	SecantSolver.java	doSolve	rtol	double	0	RET	FastMath.abs(x1 - x0) < FastMath.max($ * FastMath.abs(x1), atol)
2074	80	8	SecondMoment.java	increment	THIS	SecondMoment	0	DEF	$.n < 1
2084	182	8	SemiVariance.java	evaluate	values	double[]	0	NullArgumentException	$ == null
2085	280	8	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 0
2085	280	8	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 0
2086	283	12	SemiVariance.java	evaluate	THIS	SemiVariance	1	RET	values.$.length == 1
2086	283	12	SemiVariance.java	evaluate	values	double[]	1	RET	$.length == 1
23998	290	16	SemiVariance.java	evaluate	i	int	0	NIL-FOR	$ < length
23998	290	16	SemiVariance.java	evaluate	length	int	0	NIL-FOR	i < $
2087	291	20	SemiVariance.java	evaluate	i	int	0	DEF	(values[$] > cutoff) == booleanDirection
2087	291	20	SemiVariance.java	evaluate	booleanDirection	boolean	0	DEF	(values[i] > cutoff) == $
2087	291	20	SemiVariance.java	evaluate	values	double[]	0	DEF	($[i] > cutoff) == booleanDirection
2087	291	20	SemiVariance.java	evaluate	cutoff	double	0	DEF	(values[i] > $) == booleanDirection
2088	297	16	SemiVariance.java	evaluate	corrected	boolean	1	RET	$
23684	83	8	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	NIL-FOR	i < p.$.length
23684	83	8	SimplePointChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
23684	83	8	SimplePointChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1692	88	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > $.getAbsoluteThreshold()
1692	88	12	SimplePointChecker.java	converged	THIS	SimplePointChecker	0	RET	difference > size * $.getRelativeThreshold()
1692	88	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1692	88	12	SimplePointChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1692	88	12	SimplePointChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
2393	133	8	SimpleRegression.java	addData	THIS	SimpleRegression	1	DEF	$.n == 0
2394	137	12	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.hasIntercept
2395	149	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	DEF	$.hasIntercept
2396	174	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	DEF	$.n > 0
2397	175	12	SimpleRegression.java	removeData	THIS	SimpleRegression	1	DEF	$.hasIntercept
24143	218	8	SimpleRegression.java	addData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
24143	218	8	SimpleRegression.java	addData	i	int	0	NIL-FOR	$ < data.length
24143	218	8	SimpleRegression.java	addData	data	double[][]	0	NIL-FOR	i < $.length
2398	219	12	SimpleRegression.java	addData	THIS	SimpleRegression	0	ModelSpecificationException	data[i].length < 2
2398	219	12	SimpleRegression.java	addData	i	int	0	ModelSpecificationException	data[$].length < 2
2398	219	12	SimpleRegression.java	addData	data	double[][]	0	ModelSpecificationException	$[i].length < 2
2399	236	8	SimpleRegression.java	addObservation	THIS	SimpleRegression	0	ModelSpecificationException	x.$.length == 0
2399	236	8	SimpleRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$ == null
2399	236	8	SimpleRegression.java	addObservation	x	double[]	0	ModelSpecificationException	$.length == 0
2400	253	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	ModelSpecificationException	x.$.length != y.$.length
2400	253	8	SimpleRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$ == null
2400	253	8	SimpleRegression.java	addObservations	x	double[][]	0	ModelSpecificationException	$.length != y.length
2400	253	8	SimpleRegression.java	addObservations	y	double[]	0	ModelSpecificationException	$ == null
2400	253	8	SimpleRegression.java	addObservations	y	double[]	0	ModelSpecificationException	x.length != $.length
24144	260	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	NIL-FOR	i < x.$.length
24144	260	8	SimpleRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
24144	260	8	SimpleRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
2401	261	12	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	DEF	x[i].length == 0
2401	261	12	SimpleRegression.java	addObservations	i	int	0	DEF	x[$] == null
2401	261	12	SimpleRegression.java	addObservations	i	int	0	DEF	x[$].length == 0
2401	261	12	SimpleRegression.java	addObservations	x	double[][]	0	DEF	$[i] == null
2401	261	12	SimpleRegression.java	addObservations	x	double[][]	0	DEF	$[i].length == 0
2402	265	8	SimpleRegression.java	addObservations	obsOk	boolean	0	ModelSpecificationException	$
24145	270	8	SimpleRegression.java	addObservations	THIS	SimpleRegression	0	NIL-FOR	i < x.$.length
24145	270	8	SimpleRegression.java	addObservations	i	int	0	NIL-FOR	$ < x.length
24145	270	8	SimpleRegression.java	addObservations	x	double[][]	0	NIL-FOR	i < $.length
24146	289	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	i < data.$.length
24146	289	8	SimpleRegression.java	removeData	THIS	SimpleRegression	0	NIL-FOR	$.n > 0
24146	289	8	SimpleRegression.java	removeData	i	int	0	NIL-FOR	$ < data.length
24146	289	8	SimpleRegression.java	removeData	data	double[][]	0	NIL-FOR	i < $.length
2403	334	8	SimpleRegression.java	predict	THIS	SimpleRegression	0	RET	$.hasIntercept
2404	390	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	$.n < 2
2405	393	8	SimpleRegression.java	getSlope	THIS	SimpleRegression	0	RET	FastMath.abs($.sumXX) < 10 * Double.MIN_VALUE
2406	443	8	SimpleRegression.java	getTotalSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
2407	457	8	SimpleRegression.java	getXSumSquares	THIS	SimpleRegression	0	RET	$.n < 2
2408	503	8	SimpleRegression.java	getMeanSquareError	THIS	SimpleRegression	0	RET	$.n < 3
2409	526	8	SimpleRegression.java	getR	b1	double	0	DEF	$ < 0
2410	564	8	SimpleRegression.java	getInterceptStdErr	THIS	SimpleRegression	0	RET	$.hasIntercept
2411	644	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ <= 0
2411	644	8	SimpleRegression.java	getSlopeConfidenceInterval	alpha	double	0	OutOfRangeException	$ >= 1
2412	692	6	SimpleRegression.java	getIntercept	THIS	SimpleRegression	0	RET	$.hasIntercept
2413	714	8	SimpleRegression.java	regress	THIS	SimpleRegression	1	NoDataException:RET	$.hasIntercept
2414	715	10	SimpleRegression.java	regress	THIS	SimpleRegression	0	NoDataException	$.n < 3
2415	718	10	SimpleRegression.java	regress	THIS	SimpleRegression	1	RET	FastMath.abs( $.sumXX ) > Precision.SAFE_MIN
2416	741	10	SimpleRegression.java	regress	THIS	SimpleRegression	0	NoDataException	$.n < 2
2417	744	10	SimpleRegression.java	regress	THIS	SimpleRegression	1	RET	Double.isNaN($.sumXX)
2418	770	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	MathIllegalArgumentException	variablesToInclude.$.length == 0
2418	770	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	MathIllegalArgumentException	$.length == 0
2418	770	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	MathIllegalArgumentException	$ == null
2419	773	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	variablesToInclude.$.length > 1
2419	773	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	variablesToInclude.$.length > 2
2419	773	8	SimpleRegression.java	regress	THIS	SimpleRegression	0	ModelSpecificationException	$.hasIntercept
2419	773	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > 1
2419	773	8	SimpleRegression.java	regress	variablesToInclude	int[]	0	ModelSpecificationException	$.length > 2
2420	779	8	SimpleRegression.java	regress	THIS	SimpleRegression	1	OutOfRangeException:RET	$.hasIntercept
2421	780	12	SimpleRegression.java	regress	THIS	SimpleRegression	1	OutOfRangeException:RET	variablesToInclude.$.length == 2
2421	780	12	SimpleRegression.java	regress	variablesToInclude	int[]	1	OutOfRangeException:RET	$.length == 2
2422	781	16	SimpleRegression.java	regress	variablesToInclude	int[]	1	ModelSpecificationException	$[0] == 1
2423	783	22	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
2424	786	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[1] != 1
2425	791	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
2425	791	16	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 1
2426	796	16	SimpleRegression.java	regress	variablesToInclude	int[]	1	RET	$[0] == 0
2427	804	22	SimpleRegression.java	regress	variablesToInclude	int[]	0	RET	$[0] == 1
2428	810	20	SimpleRegression.java	regress	_sxx	double	1	RET	Double.isNaN($)
2429	826	12	SimpleRegression.java	regress	variablesToInclude	int[]	0	OutOfRangeException	$[0] != 0
23685	80	8	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	NIL-FOR	i < p.$.length
23685	80	8	SimpleVectorValueChecker.java	converged	i	int	0	NIL-FOR	$ < p.length
23685	80	8	SimpleVectorValueChecker.java	converged	p	double[]	0	NIL-FOR	i < $.length
1693	85	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > $.getAbsoluteThreshold()
1693	85	12	SimpleVectorValueChecker.java	converged	THIS	SimpleVectorValueChecker	0	RET	difference > size * $.getRelativeThreshold()
1693	85	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > getAbsoluteThreshold()
1693	85	12	SimpleVectorValueChecker.java	converged	difference	double	0	RET	$ > size * getRelativeThreshold()
1693	85	12	SimpleVectorValueChecker.java	converged	size	double	0	RET	difference > $ * getRelativeThreshold()
2003	129	8	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NullArgumentException	$.simplex == null
2004	161	12	SimplexOptimizer.java	doOptimize	iteration	int	0	RET	$ > 0
23965	163	16	SimplexOptimizer.java	doOptimize	THIS	SimplexOptimizer	0	NIL-FOR	i < $.simplex.getSize()
23965	163	16	SimplexOptimizer.java	doOptimize	i	int	0	NIL-FOR	$ < simplex.getSize()
2005	167	16	SimplexOptimizer.java	doOptimize	converged	boolean	0	RET	$
23663	72	8	SimplexSolver.java	getPivotColumn	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
23663	72	8	SimplexSolver.java	getPivotColumn	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
1651	76	12	SimplexSolver.java	getPivotColumn	entry	double	0	DEF	$ < minValue
1651	76	12	SimplexSolver.java	getPivotColumn	minValue	double	0	DEF	entry < $
23664	94	8	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getHeight()
23664	94	8	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1652	98	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	Precision.compareTo(entry, 0d, $.maxUlps) > 0
1652	98	12	SimplexSolver.java	getPivotRow	entry	double	0	DEF	Precision.compareTo($, 0d, maxUlps) > 0
1653	103	16	SimplexSolver.java	getPivotRow	cmp	int	1	DEF	$ == 0
1654	105	23	SimplexSolver.java	getPivotRow	cmp	int	0	DEF	$ < 0
1655	113	8	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	1	RET	$.size() == 0
1656	115	15	SimplexSolver.java	getPivotRow	minRatioPositions	List<Integer>	0	RET	$.size() > 1
1657	119	12	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() > 0
23665	121	20	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getNumArtificialVariables()
23665	121	20	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
1658	124	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	Precision.equals(entry, 1d, $.maxUlps)
1658	124	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.row.equals(tableau.getBasicRow(column))
1658	124	24	SimplexSolver.java	getPivotRow	column	int	0	RET	row.equals(tableau.getBasicRow($))
1658	124	24	SimplexSolver.java	getPivotRow	entry	double	0	RET	Precision.equals($, 1d, maxUlps)
1658	124	24	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	RET	row.equals($.getBasicRow(column))
1659	140	12	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	RET	$.getIterations() < $.getMaxIterations() / 2
23666	145	20	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	NIL-FOR	minRow != $.row
23666	145	20	SimplexSolver.java	getPivotRow	i	int	0	NIL-FOR	$ < tableau.getWidth() - 1
23666	145	20	SimplexSolver.java	getPivotRow	minRow	Integer	0	NIL-FOR	$ != row
23666	145	20	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
1660	146	24	SimplexSolver.java	getPivotRow	THIS	SimplexSolver	0	DEF	$.row == tableau.getBasicRow(i)
1660	146	24	SimplexSolver.java	getPivotRow	i	int	0	DEF	row == tableau.getBasicRow($)
1660	146	24	SimplexSolver.java	getPivotRow	tableau	SimplexTableau	0	DEF	row == $.getBasicRow(i)
1661	147	28	SimplexSolver.java	getPivotRow	i	int	0	DEF	$ < minIndex
1661	147	28	SimplexSolver.java	getPivotRow	minIndex	int	0	DEF	i < $
1662	173	8	SimplexSolver.java	doIteration	pivotRow	Integer	0	UnboundedSolutionException	$ == null
23667	182	8	SimplexSolver.java	doIteration	i	int	0	NIL-FOR	$ < tableau.getHeight()
23667	182	8	SimplexSolver.java	doIteration	tableau	SimplexTableau	0	NIL-FOR	i < $.getHeight()
1663	183	12	SimplexSolver.java	doIteration	i	int	0	DEF	$ != pivotRow
1663	183	12	SimplexSolver.java	doIteration	pivotRow	Integer	0	DEF	i != $
1664	201	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	RET	$.getNumArtificialVariables() == 0
23668	205	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
1665	210	8	SimplexSolver.java	solvePhase1	THIS	SimplexSolver	0	NoFeasibleSolutionException	Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, $.epsilon)
1665	210	8	SimplexSolver.java	solvePhase1	tableau	SimplexTableau	0	NoFeasibleSolutionException	Precision.equals($.getEntry(0, $.getRhsOffset()), 0d, epsilon)
23669	230	8	SimplexSolver.java	doOptimize	tableau	SimplexTableau	0	NIL-WHILE	$.isOptimal()
1669	159	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
23670	163	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getOriginalNumDecisionVariables()
23670	163	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getOriginalNumDecisionVariables()
1670	166	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
23671	169	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumSlackVariables()
23671	169	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumSlackVariables()
23672	172	6	SimplexTableau.java	initializeColumnLabels	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
23672	172	6	SimplexTableau.java	initializeColumnLabels	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1671	192	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.getNumObjectiveFunctions() == 2
1672	203	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
23673	211	8	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	NIL-FOR	i < $.constraints.size()
23673	211	8	SimplexTableau.java	createTableau	i	int	0	NIL-FOR	$ < constraints.size()
1673	219	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	$.restrictToNonNegative
1674	228	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	1	DEF	constraint.getRelationship() == $.Relationship.LEQ
1674	228	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	1	DEF	$.getRelationship() == Relationship.LEQ
1675	230	19	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1675	230	19	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1676	235	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.GEQ
1676	235	12	SimplexTableau.java	createTableau	THIS	SimplexTableau	0	DEF	constraint.getRelationship() == $.Relationship.EQ
1676	235	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.GEQ
1676	235	12	SimplexTableau.java	createTableau	constraint	LinearConstraint	0	DEF	$.getRelationship() == Relationship.EQ
1677	265	8	SimplexTableau.java	normalize	constraint	LinearConstraint	0	RET	$.getValue() < 0
1678	290	12	SimplexTableau.java	getConstraintTypeCounts	THIS	SimplexTableau	0	DEF	$.constraint.getRelationship() == relationship
1678	290	12	SimplexTableau.java	getConstraintTypeCounts	relationship	Relationship	0	DEF	constraint.getRelationship() == $
23674	317	8	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
23674	317	8	SimplexTableau.java	getBasicRow	i	int	0	NIL-FOR	$ < getHeight()
1679	319	12	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	1	DEF	Precision.equals(entry, 1d, $.maxUlps)
1679	319	12	SimplexTableau.java	getBasicRow	entry	double	1	DEF	Precision.equals($, 1d, maxUlps)
1679	319	12	SimplexTableau.java	getBasicRow	row	Integer	1	DEF	$ == null
1680	321	19	SimplexTableau.java	getBasicRow	THIS	SimplexTableau	0	RET	Precision.equals(entry, 0d, $.maxUlps)
1680	321	19	SimplexTableau.java	getBasicRow	entry	double	0	RET	Precision.equals($, 0d, maxUlps)
1681	333	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	RET	$.getNumObjectiveFunctions() == 1
23675	341	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getArtificialVariableOffset()
23675	341	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getArtificialVariableOffset()
1682	343	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	Precision.compareTo(entry, 0d, $.epsilon) > 0
1682	343	12	SimplexTableau.java	dropPhase1Objective	entry	double	0	DEF	Precision.compareTo($, 0d, epsilon) > 0
23676	349	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getNumArtificialVariables()
23676	349	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getNumArtificialVariables()
1683	351	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	DEF	$.getBasicRow(col) == null
1683	351	12	SimplexTableau.java	dropPhase1Objective	col	int	0	DEF	getBasicRow($) == null
23677	357	8	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	i < $.getHeight()
23677	357	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ < getHeight()
23678	359	12	SimplexTableau.java	dropPhase1Objective	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
23678	359	12	SimplexTableau.java	dropPhase1Objective	j	int	0	NIL-FOR	$ < getWidth()
1684	360	16	SimplexTableau.java	dropPhase1Objective	j	int	0	DEF	columnsToDrop.contains($)
1684	360	16	SimplexTableau.java	dropPhase1Objective	columnsToDrop	Set<Integer>	0	DEF	$.contains(j)
23679	368	8	SimplexTableau.java	dropPhase1Objective	i	int	0	NIL-FOR	$ >= 0
23680	389	8	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth() - 1
23680	389	8	SimplexTableau.java	isOptimal	i	int	0	NIL-FOR	$ < getWidth() - 1
1685	391	12	SimplexTableau.java	isOptimal	THIS	SimplexTableau	0	RET	Precision.compareTo(entry, 0d, $.epsilon) < 0
1685	391	12	SimplexTableau.java	isOptimal	entry	double	0	RET	Precision.compareTo($, 0d, epsilon) < 0
23681	410	6	SimplexTableau.java	getSolution	THIS	SimplexTableau	0	NIL-FOR	i < coefficients.$.length
23681	410	6	SimplexTableau.java	getSolution	i	int	0	NIL-FOR	$ < coefficients.length
23681	410	6	SimplexTableau.java	getSolution	coefficients	double[]	0	NIL-FOR	i < $.length
1686	412	10	SimplexTableau.java	getSolution	colIndex	int	0	DEF	$ < 0
1687	417	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ != null
1687	417	10	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	$ == 0
1688	422	17	SimplexTableau.java	getSolution	basicRow	Integer	1	DEF	basicRows.contains($)
1688	422	17	SimplexTableau.java	getSolution	basicRows	Set<Integer>	1	DEF	$.contains(basicRow)
23682	446	8	SimplexTableau.java	divideRow	THIS	SimplexTableau	0	NIL-FOR	j < $.getWidth()
23682	446	8	SimplexTableau.java	divideRow	j	int	0	NIL-FOR	$ < getWidth()
23683	463	8	SimplexTableau.java	subtractRow	THIS	SimplexTableau	0	NIL-FOR	i < $.getWidth()
23683	463	8	SimplexTableau.java	subtractRow	i	int	0	NIL-FOR	$ < getWidth()
1689	466	12	SimplexTableau.java	subtractRow	result	double	0	DEF	FastMath.abs($) < CUTOFF_THRESHOLD
1690	583	6	SimplexTableau.java	equals	THIS	SimplexTableau	0	RET	$ == other
1690	583	6	SimplexTableau.java	equals	other	Object	0	RET	this == $
1691	587	6	SimplexTableau.java	equals	other	Object	0	RET	$ instanceof SimplexTableau
3373	63	8	SimpsonIntegrator.java	SimpsonIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > SIMPSON_MAX_ITERATIONS_COUNT
3374	85	8	SimpsonIntegrator.java	SimpsonIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > SIMPSON_MAX_ITERATIONS_COUNT
3375	105	8	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	$.getMinimalIterationCount() == 1
3376	116	12	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	$.iterations.getCount() >= $.getMinimalIterationCount()
3377	120	16	SimpsonIntegrator.java	doIntegrate	THIS	SimpsonIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
3377	120	16	SimpsonIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
3377	120	16	SimpsonIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
3377	120	16	SimpsonIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
3230	64	8	Sinc.java	value	THIS	Sinc	1	RET	$.normalized
3231	74	8	Sinc.java	derivative	THIS	Sinc	1	RET	$.normalized
1483	92	8	SingularValueDecomposition.java	SingularValueDecomposition	matrix	RealMatrix	1	DEF	$.getRowDimension() < $.getColumnDimension()
23532	113	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ < FastMath.max(nct, nrt)
23532	113	8	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	NIL-FOR	k < FastMath.max($, nrt)
23532	113	8	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	NIL-FOR	k < FastMath.max(nct, $)
1484	114	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1484	114	12	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
23533	119	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
23533	119	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1485	122	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] != 0
1485	122	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] != 0
1486	123	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	A[$][$] < 0
23534	126	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
23534	126	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
23535	133	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
23535	133	12	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
1487	134	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] != 0
1487	134	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] != 0
1487	134	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1487	134	16	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
23536	138	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
23536	138	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
23537	142	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
23537	142	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1488	150	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nct
1488	150	12	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	k < $
23538	153	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
23538	153	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1489	157	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nrt
1489	157	12	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	k < $
23539	162	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
23539	162	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1490	165	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1490	165	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
1491	166	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$ + 1] < 0
1491	166	20	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k + 1] < 0
23540	169	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
23540	169	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1492	175	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k + 1 < $.m
1492	175	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ + 1 < m
1492	175	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1492	175	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
23541	178	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
23541	178	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
23542	181	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
23542	181	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
23543	182	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
23543	182	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
23544	186	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
23544	186	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
23545	188	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
23545	188	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
23546	196	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
23546	196	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1493	203	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	nct < $.n
1493	203	8	SingularValueDecomposition.java	SingularValueDecomposition	nct	int	0	DEF	$ < n
1494	206	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.m < p
1494	206	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	DEF	m < $
1495	209	8	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	$ + 1 < p
1495	209	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	DEF	nrt + 1 < $
23547	215	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
23547	215	8	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
23548	216	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
23548	216	12	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
23549	221	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1496	222	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	1	DEF	$.singularValues[k] != 0
1496	222	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	singularValues[$] != 0
23550	223	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
23550	223	16	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
23551	225	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
23551	225	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
23552	229	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
23552	229	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
23553	233	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
23553	233	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
23554	237	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < k - 1
23554	237	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	i < $ - 1
23555	241	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
23555	241	16	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
23556	249	8	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1497	250	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < nrt
1497	250	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	e[$] != 0
1497	250	12	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	$[k] != 0
1497	250	12	SingularValueDecomposition.java	SingularValueDecomposition	nrt	int	0	DEF	k < $
23557	252	16	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	j < $.n
23557	252	16	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < n
23558	254	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
23558	254	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
23559	258	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
23559	258	20	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
23560	263	12	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
23560	263	12	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
23561	272	8	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-WHILE	$ > 0
23562	284	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	$ >= 0
1498	288	16	SingularValueDecomposition.java	SingularValueDecomposition	threshold	double	0	DEF	FastMath.abs(e[k]) <= $
1498	288	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	FastMath.abs(e[$]) <= threshold
1498	288	16	SingularValueDecomposition.java	SingularValueDecomposition	e	double[]	0	DEF	FastMath.abs($[k]) <= threshold
1499	294	12	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	$ == p - 2
1499	294	12	SingularValueDecomposition.java	SingularValueDecomposition	p	int	1	DEF	k == $ - 2
23563	298	16	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	NIL-FOR	$ >= k
23563	298	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	ks >= $
1500	299	20	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	DEF	$ == k
1500	299	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	ks == $
1501	304	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	FastMath.abs($.singularValues[ks]) <= TINY + EPS * t
1501	304	20	SingularValueDecomposition.java	SingularValueDecomposition	t	double	0	DEF	FastMath.abs(singularValues[ks]) <= TINY + EPS * $
1501	304	20	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	0	DEF	FastMath.abs(singularValues[$]) <= TINY + EPS * t
1502	309	16	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	1	DEF	$ == k
1502	309	16	SingularValueDecomposition.java	SingularValueDecomposition	k	int	1	DEF	ks == $
1503	311	23	SingularValueDecomposition.java	SingularValueDecomposition	ks	int	1	DEF	$ == p - 1
1503	311	23	SingularValueDecomposition.java	SingularValueDecomposition	p	int	1	DEF	ks == $ - 1
23564	325	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ >= k
23564	325	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-FOR	j >= $
1504	330	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ != k
1504	330	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	j != $
23565	335	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
23565	335	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
23566	347	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < p
23566	347	20	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-FOR	j < $
23567	355	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
23567	355	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1505	380	20	SingularValueDecomposition.java	SingularValueDecomposition	b	double	0	DEF	$ != 0
1505	380	20	SingularValueDecomposition.java	SingularValueDecomposition	c	double	0	DEF	$ != 0
1506	383	24	SingularValueDecomposition.java	SingularValueDecomposition	b	double	0	DEF	$ < 0
23568	391	20	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	NIL-FOR	$ < p - 1
23568	391	20	SingularValueDecomposition.java	SingularValueDecomposition	p	int	0	NIL-FOR	j < $ - 1
1507	395	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ != k
1507	395	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	j != $
23569	403	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
23569	403	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1508	416	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	j < $.m - 1
1508	416	24	SingularValueDecomposition.java	SingularValueDecomposition	j	int	0	DEF	$ < m - 1
23570	417	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
23570	417	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1509	431	20	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] <= 0
1509	431	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] <= 0
23571	434	24	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ <= pp
23571	434	24	SingularValueDecomposition.java	SingularValueDecomposition	pp	int	0	NIL-FOR	i <= $
23572	439	20	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	NIL-WHILE	$ < pp
23572	439	20	SingularValueDecomposition.java	SingularValueDecomposition	pp	int	0	NIL-WHILE	k < $
1510	440	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	$.singularValues[k] >= $.singularValues[k + 1]
1510	440	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	singularValues[$] >= singularValues[$ + 1]
1511	446	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k < $.n - 1
1511	446	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < n - 1
23573	447	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.n
23573	447	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < n
1512	453	24	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	DEF	k < $.m - 1
1512	453	24	SingularValueDecomposition.java	SingularValueDecomposition	k	int	0	DEF	$ < m - 1
23574	454	28	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.m
23574	454	28	SingularValueDecomposition.java	SingularValueDecomposition	i	int	0	NIL-FOR	$ < m
1513	473	8	SingularValueDecomposition.java	SingularValueDecomposition	THIS	SingularValueDecomposition	1	DEF	$.transposed
1514	501	8	SingularValueDecomposition.java	getUT	THIS	SingularValueDecomposition	0	DEF	$.cachedUt == null
1515	515	8	SingularValueDecomposition.java	getS	THIS	SingularValueDecomposition	0	DEF	$.cachedS == null
1516	550	8	SingularValueDecomposition.java	getVT	THIS	SingularValueDecomposition	0	DEF	$.cachedVt == null
23575	572	8	SingularValueDecomposition.java	getCovariance	THIS	SingularValueDecomposition	0	NIL-WHILE	$.singularValues[dimension] >= minSingularValue
23575	572	8	SingularValueDecomposition.java	getCovariance	p	int	0	NIL-WHILE	dimension < $
23575	572	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NIL-WHILE	$ < p
23575	572	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NIL-WHILE	singularValues[$] >= minSingularValue
23575	572	8	SingularValueDecomposition.java	getCovariance	minSingularValue	double	0	NIL-WHILE	singularValues[dimension] >= $
1517	577	8	SingularValueDecomposition.java	getCovariance	dimension	int	0	NumberIsTooLargeException	$ == 0
23576	636	8	SingularValueDecomposition.java	getRank	THIS	SingularValueDecomposition	0	NIL-FOR	i < $.singularValues.$.length
23576	636	8	SingularValueDecomposition.java	getRank	i	int	0	NIL-FOR	$ < singularValues.length
1518	637	12	SingularValueDecomposition.java	getRank	THIS	SingularValueDecomposition	0	DEF	$.singularValues[i] > $.tol
1518	637	12	SingularValueDecomposition.java	getRank	i	int	0	DEF	singularValues[$] > tol
2061	91	8	Skewness.java	increment	THIS	Skewness	0	DEF	$.incMoment
2062	106	8	Skewness.java	getResult	THIS	Skewness	0	RET	$.moment.$.n < 3
2063	110	8	Skewness.java	getResult	variance	double	1	RET	$ < 10E-20
2064	131	8	Skewness.java	clear	THIS	Skewness	0	DEF	$.incMoment
2065	159	8	Skewness.java	evaluate	THIS	Skewness	0	DEF	$.test(values, begin, length)
2065	159	8	Skewness.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2065	159	8	Skewness.java	evaluate	begin	int	0	DEF	test(values, $, length)
2065	159	8	Skewness.java	evaluate	length	int	0	DEF	test(values, begin, $)
2065	159	8	Skewness.java	evaluate	length	int	0	DEF	$ > 2
23991	169	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
23991	169	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
23991	169	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
23992	177	12	Skewness.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
23992	177	12	Skewness.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
23992	177	12	Skewness.java	evaluate	length	int	0	NIL-FOR	i < begin + $
3225	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3225	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3225	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3225	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3225	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3225	74	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	NoDataException	$.length == 0
3226	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3226	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3226	77	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	xval.length != $.length
24542	84	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
24542	84	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3227	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	THIS	SmoothingPolynomialBicubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3227	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3227	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3227	85	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	fval	double[][]	0	DimensionMismatchException	$[i].length != yLen
24543	96	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
24543	96	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
24544	98	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
24544	98	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
24545	108	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
24545	108	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
24546	110	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
24546	110	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
24547	118	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
24547	118	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
24548	120	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
24548	120	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
24549	130	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
24549	130	8	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
24550	132	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
24550	132	12	SmoothingPolynomialBicubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
23056	91	8	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	i < $.rows
23056	91	8	SparseFieldMatrix.java	SparseFieldMatrix	i	int	0	NIL-FOR	$ < rows
23057	92	12	SparseFieldMatrix.java	SparseFieldMatrix	THIS	SparseFieldMatrix	0	NIL-FOR	j < $.columns
23057	92	12	SparseFieldMatrix.java	SparseFieldMatrix	j	int	0	NIL-FOR	$ < columns
1194	105	8	SparseFieldMatrix.java	addToEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1194	105	8	SparseFieldMatrix.java	addToEntry	value	T	1	DEF	getField().getZero().equals($)
1195	151	8	SparseFieldMatrix.java	multiplyEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1195	151	8	SparseFieldMatrix.java	multiplyEntry	value	T	1	DEF	getField().getZero().equals($)
1196	164	8	SparseFieldMatrix.java	setEntry	THIS	SparseFieldMatrix	1	DEF	$.getField().getZero().equals(value)
1196	164	8	SparseFieldMatrix.java	setEntry	value	T	1	DEF	getField().getZero().equals($)
23158	108	8	SparseFieldVector.java	SparseFieldVector	THIS	SparseFieldVector	0	NIL-FOR	key < values.$.length
23158	108	8	SparseFieldVector.java	SparseFieldVector	key	int	0	NIL-FOR	$ < values.length
23158	108	8	SparseFieldVector.java	SparseFieldVector	values	T[]	0	NIL-FOR	key < $.length
23159	146	8	SparseFieldVector.java	add	iter	Iterator	0	NIL-WHILE	$.hasNext()
1271	150	12	SparseFieldVector.java	add	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1271	150	12	SparseFieldVector.java	add	key	int	1	DEF	entries.containsKey($)
23160	169	8	SparseFieldVector.java	append	iter	Iterator	0	NIL-WHILE	$.hasNext()
1272	178	8	SparseFieldVector.java	append	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
23161	183	12	SparseFieldVector.java	append	i	int	0	NIL-FOR	$ < n
23161	183	12	SparseFieldVector.java	append	n	int	0	NIL-FOR	i < $
23162	207	8	SparseFieldVector.java	dotProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
23163	219	8	SparseFieldVector.java	ebeDivide	iter	Iterator	0	NIL-WHILE	$.hasNext()
23164	231	8	SparseFieldVector.java	ebeMultiply	iter	Iterator	0	NIL-WHILE	$.hasNext()
23165	242	8	SparseFieldVector.java	getData	iter	Iterator	0	NIL-WHILE	$.hasNext()
23166	272	8	SparseFieldVector.java	getSubVector	iter	Iterator	0	NIL-WHILE	$.hasNext()
1273	275	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ >= index
1273	275	12	SparseFieldVector.java	getSubVector	key	int	0	DEF	$ < end
1273	275	12	SparseFieldVector.java	getSubVector	end	int	0	DEF	key < $
1273	275	12	SparseFieldVector.java	getSubVector	index	int	0	DEF	key >= $
23167	289	8	SparseFieldVector.java	mapAddToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
23167	289	8	SparseFieldVector.java	mapAddToSelf	i	int	0	NIL-FOR	$ < virtualSize
23168	303	8	SparseFieldVector.java	mapDivideToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
23169	317	8	SparseFieldVector.java	mapInvToSelf	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
23169	317	8	SparseFieldVector.java	mapInvToSelf	i	int	0	NIL-FOR	$ < virtualSize
23170	331	8	SparseFieldVector.java	mapMultiplyToSelf	iter	Iterator	0	NIL-WHILE	$.hasNext()
23171	359	8	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
23172	362	12	SparseFieldVector.java	outerProduct	iter2	Iterator	0	NIL-WHILE	$.hasNext()
1274	372	8	SparseFieldVector.java	outerProduct	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
23173	378	12	SparseFieldVector.java	outerProduct	iter	Iterator	0	NIL-WHILE	$.hasNext()
23174	382	16	SparseFieldVector.java	outerProduct	col	int	0	NIL-FOR	$ < n
23174	382	16	SparseFieldVector.java	outerProduct	n	int	0	NIL-FOR	col < $
23175	398	8	SparseFieldVector.java	set	THIS	SparseFieldVector	0	NIL-FOR	i < $.virtualSize
23175	398	8	SparseFieldVector.java	set	i	int	0	NIL-FOR	$ < virtualSize
23176	414	8	SparseFieldVector.java	setSubVector	i	int	0	NIL-FOR	$ < n
23176	414	8	SparseFieldVector.java	setSubVector	n	int	0	NIL-FOR	i < $
23177	431	8	SparseFieldVector.java	subtract	iter	Iterator	0	NIL-WHILE	$.hasNext()
1275	434	12	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(key)
1275	434	12	SparseFieldVector.java	subtract	key	int	1	DEF	entries.containsKey($)
1276	445	8	SparseFieldVector.java	subtract	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
23178	451	12	SparseFieldVector.java	subtract	i	int	0	NIL-FOR	$ < n
23178	451	12	SparseFieldVector.java	subtract	n	int	0	NIL-FOR	i < $
1277	452	16	SparseFieldVector.java	subtract	THIS	SparseFieldVector	1	DEF	$.entries.containsKey(i)
1277	452	16	SparseFieldVector.java	subtract	i	int	1	DEF	entries.containsKey($)
1278	474	8	SparseFieldVector.java	checkIndex	THIS	SparseFieldVector	0	OutOfRangeException	index >= $.getDimension()
1278	474	8	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ < 0
1278	474	8	SparseFieldVector.java	checkIndex	index	int	0	OutOfRangeException	$ >= getDimension()
1279	486	8	SparseFieldVector.java	checkVectorDimensions	THIS	SparseFieldVector	0	DimensionMismatchException	$.getDimension() != n
1279	486	8	SparseFieldVector.java	checkVectorDimensions	n	int	0	DimensionMismatchException	getDimension() != $
1280	493	8	SparseFieldVector.java	add	v	FieldVector<T>	1	RET	$ instanceof SparseFieldVector<?>
23179	500	12	SparseFieldVector.java	add	i	int	0	NIL-FOR	$ < n
23179	500	12	SparseFieldVector.java	add	n	int	0	NIL-FOR	i < $
23180	527	8	SparseFieldVector.java	hashCode	iter	Iterator	0	NIL-WHILE	$.hasNext()
1281	540	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$ == obj
1281	540	8	SparseFieldVector.java	equals	obj	Object	0	RET	this == $
1282	544	8	SparseFieldVector.java	equals	obj	Object	0	RET	$ instanceof SparseFieldVector<?>
1283	551	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	1	RET	$.field == null
1284	552	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	other.$.field != null
1284	552	12	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	$.field != null
1285	555	15	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.field.equals(other.$.field)
1285	555	15	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	field.equals($.field)
1286	558	8	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	$.virtualSize != other.$.virtualSize
1286	558	8	SparseFieldVector.java	equals	other	SparseFieldVector<T>	0	RET	virtualSize != $.virtualSize
23181	563	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1287	566	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(iter.value())
1287	566	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals($.value())
23182	571	8	SparseFieldVector.java	equals	iter	Iterator	0	NIL-WHILE	$.hasNext()
1288	574	12	SparseFieldVector.java	equals	THIS	SparseFieldVector	0	RET	test.equals($.getEntry(iter.key()))
1288	574	12	SparseFieldVector.java	equals	test	T	0	RET	$.equals(getEntry(iter.key()))
1288	574	12	SparseFieldVector.java	equals	iter	Iterator	0	RET	test.equals(getEntry($.key()))
2248	146	8	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	DimensionMismatchException	xArray.$.length != yArray.$.length
2248	146	8	SpearmansCorrelation.java	correlation	xArray	double[]	1	DimensionMismatchException	$.length != yArray.length
2248	146	8	SpearmansCorrelation.java	correlation	yArray	double[]	1	DimensionMismatchException	xArray.length != $.length
2249	148	15	SpearmansCorrelation.java	correlation	THIS	SpearmansCorrelation	1	MathIllegalArgumentException	xArray.$.length < 2
2249	148	15	SpearmansCorrelation.java	correlation	xArray	double[]	1	MathIllegalArgumentException	$.length < 2
24063	164	8	SpearmansCorrelation.java	rankTransform	i	int	0	NIL-FOR	$ < matrix.getColumnDimension()
24063	164	8	SpearmansCorrelation.java	rankTransform	matrix	RealMatrix	0	NIL-FOR	i < $.getColumnDimension()
3128	67	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	DimensionMismatchException	x.$.length != y.$.length
3128	67	8	SplineInterpolator.java	interpolate	x	double	0	DimensionMismatchException	$.length != y.length
3128	67	8	SplineInterpolator.java	interpolate	y	double	0	DimensionMismatchException	x.length != $.length
3129	71	8	SplineInterpolator.java	interpolate	THIS	SplineInterpolator	0	NumberIsTooSmallException	x.$.length < 3
3129	71	8	SplineInterpolator.java	interpolate	x	double	0	NumberIsTooSmallException	$.length < 3
24460	83	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
24460	83	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
24461	92	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
24461	92	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
24462	107	8	SplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ >=0
24463	115	8	SplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < n
24463	115	8	SplineInterpolator.java	interpolate	n	int	0	NIL-FOR	i < $
2447	57	8	StableRandomGenerator.java	StableRandomGenerator	generator	RandomGenerator	0	NullArgumentException	$ == null
2448	61	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	0	OutOfRangeException	$ <= 2d
2448	61	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	0	OutOfRangeException	$ > 0d
2449	66	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	0	OutOfRangeException	$ >= -1d
2449	66	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	0	OutOfRangeException	$ <= 1d
2450	74	8	StableRandomGenerator.java	StableRandomGenerator	alpha	double	1	DEF	$ < 2d
2450	74	8	StableRandomGenerator.java	StableRandomGenerator	beta	double	1	DEF	$ != 0d
2451	92	8	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	0	RET	$.alpha == 2d
2452	99	8	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	$.beta == 0d
2453	101	12	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	$.alpha == 1d
2454	113	12	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	1	DEF	FastMath.abs($.alpha - 1d) > 1e-8
2455	124	16	StableRandomGenerator.java	nextNormalizedDouble	THIS	StableRandomGenerator	0	DEF	$.alpha != 1d
2278	692	8	StatUtils.java	sumDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
2278	692	8	StatUtils.java	sumDifference	n	int	0	DimensionMismatchException	$ != sample2.length
2278	692	8	StatUtils.java	sumDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
2279	695	8	StatUtils.java	sumDifference	n	int	0	NoDataException	$ <= 0
24078	699	8	StatUtils.java	sumDifference	i	int	0	NIL-FOR	$ < n
24078	699	8	StatUtils.java	sumDifference	n	int	0	NIL-FOR	i < $
2280	740	8	StatUtils.java	varianceDifference	THIS	StatUtils	0	DimensionMismatchException	n != sample2.$.length
2280	740	8	StatUtils.java	varianceDifference	n	int	0	DimensionMismatchException	$ != sample2.length
2280	740	8	StatUtils.java	varianceDifference	sample2	double[]	0	DimensionMismatchException	n != $.length
2281	743	8	StatUtils.java	varianceDifference	n	int	0	NumberIsTooSmallException	$ < 2
24079	746	8	StatUtils.java	varianceDifference	i	int	0	NIL-FOR	$ < n
24079	746	8	StatUtils.java	varianceDifference	n	int	0	NIL-FOR	i < $
24080	765	8	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
24080	765	8	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
24080	765	8	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
24081	776	8	StatUtils.java	normalize	THIS	StatUtils	0	NIL-FOR	i < sample.$.length
24081	776	8	StatUtils.java	normalize	i	int	0	NIL-FOR	$ < sample.length
24081	776	8	StatUtils.java	normalize	sample	double[]	0	NIL-FOR	i < $.length
2161	134	8	StatisticalSummaryValues.java	equals	THIS	StatisticalSummaryValues	0	RET	object == $
2161	134	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ == this
2162	137	8	StatisticalSummaryValues.java	equals	object	Object	0	RET	$ instanceof StatisticalSummaryValues == false
3233	62	8	StepFunction.java	StepFunction	x	double[]	0	NullArgumentException	$ == null
3233	62	8	StepFunction.java	StepFunction	y	double[]	0	NullArgumentException	$ == null
3234	66	8	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	x.$.length == 0
3234	66	8	StepFunction.java	StepFunction	THIS	StepFunction	0	NoDataException	y.$.length == 0
3234	66	8	StepFunction.java	StepFunction	x	double[]	0	NoDataException	$.length == 0
3234	66	8	StepFunction.java	StepFunction	y	double[]	0	NoDataException	$.length == 0
3235	70	8	StepFunction.java	StepFunction	THIS	StepFunction	0	DimensionMismatchException	y.$.length != x.$.length
3235	70	8	StepFunction.java	StepFunction	x	double[]	0	DimensionMismatchException	y.length != $.length
3235	70	8	StepFunction.java	StepFunction	y	double[]	0	DimensionMismatchException	$.length != x.length
3236	84	8	StepFunction.java	value	index	int	1	DEF	$ < -1
3237	87	15	StepFunction.java	value	index	int	1	DEF	$ >= 0
2625	202	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.lastState == null
2626	211	12	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.forward
2627	220	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	$.mode == $.StepNormalizerMode.MULTIPLES
2627	220	8	StepNormalizer.java	handleStep	THIS	StepNormalizer	0	DEF	Precision.equals(nextTime, $.lastTime, 1)
2627	220	8	StepNormalizer.java	handleStep	nextTime	double	0	DEF	Precision.equals($, lastTime, 1)
24251	227	8	StepNormalizer.java	handleStep	nextInStep	boolean	0	NIL-WHILE	$
2628	239	8	StepNormalizer.java	handleStep	isLast	boolean	0	DEF	$
2629	246	12	StepNormalizer.java	handleStep	addLast	boolean	0	DEF	$
2630	274	8	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.bounds.firstIncluded()
2630	274	8	StepNormalizer.java	doNormalizedStep	THIS	StepNormalizer	0	RET	$.firstTime == $.lastTime
2238	110	8	StorelessBivariateCovariance.java	getResult	THIS	StorelessBivariateCovariance	0	NumberIsTooSmallException	$.n < 2
2239	114	8	StorelessBivariateCovariance.java	getResult	THIS	StorelessBivariateCovariance	1	RET	$.biasCorrected
24045	82	8	StorelessCovariance.java	initializeMatrix	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
24045	82	8	StorelessCovariance.java	initializeMatrix	i	int	0	NIL-FOR	$ < dimension
24046	83	12	StorelessCovariance.java	initializeMatrix	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
24046	83	12	StorelessCovariance.java	initializeMatrix	j	int	0	NIL-FOR	$ < dimension
2237	151	8	StorelessCovariance.java	increment	THIS	StorelessCovariance	0	DimensionMismatchException	length != $.dimension
2237	151	8	StorelessCovariance.java	increment	length	int	0	DimensionMismatchException	$ != dimension
24047	157	8	StorelessCovariance.java	increment	i	int	0	NIL-FOR	$ < length
24047	157	8	StorelessCovariance.java	increment	length	int	0	NIL-FOR	i < $
24048	158	12	StorelessCovariance.java	increment	j	int	0	NIL-FOR	$ < length
24048	158	12	StorelessCovariance.java	increment	length	int	0	NIL-FOR	j < $
24049	184	8	StorelessCovariance.java	getData	THIS	StorelessCovariance	0	NIL-FOR	i < $.dimension
24049	184	8	StorelessCovariance.java	getData	i	int	0	NIL-FOR	$ < dimension
24050	185	12	StorelessCovariance.java	getData	THIS	StorelessCovariance	0	NIL-FOR	j < $.dimension
24050	185	12	StorelessCovariance.java	getData	j	int	0	NIL-FOR	$ < dimension
676	117	8	SubLine.java	intersection	includeEndPoints	boolean	1	RET	$
723	125	8	SubLine.java	intersection	includeEndPoints	boolean	1	RET	$
724	159	8	SubLine.java	side	crossing	Vector2D	0	RET	$ == null
725	180	8	SubLine.java	split	crossing	Vector2D	0	RET	$ == null
626	60	8	SubPlane.java	side	inter	Line	0	RET	$ == null
627	77	8	SubPlane.java	side	otherPlane	Plane	0	DEF	crossP.dotProduct($.getNormal()) < 0
627	77	8	SubPlane.java	side	crossP	Vector3D	0	DEF	$.dotProduct(otherPlane.getNormal()) < 0
628	103	8	SubPlane.java	split	inter	Line	0	RET	$ == null
629	115	8	SubPlane.java	split	otherPlane	Plane	0	DEF	crossP.dotProduct($.getNormal()) < 0
629	115	8	SubPlane.java	split	crossP	Vector3D	0	DEF	$.dotProduct(otherPlane.getNormal()) < 0
2031	121	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, begin, length, true)
2031	121	8	Sum.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2031	121	8	Sum.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2031	121	8	Sum.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
23981	123	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
23981	123	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
23981	123	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2032	160	8	Sum.java	evaluate	THIS	Sum	0	DEF	$.test(values, weights, begin, length, true)
2032	160	8	Sum.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length, true)
2032	160	8	Sum.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length, true)
2032	160	8	Sum.java	evaluate	begin	int	0	DEF	test(values, weights, $, length, true)
2032	160	8	Sum.java	evaluate	length	int	0	DEF	test(values, weights, begin, $, true)
23982	162	12	Sum.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
23982	162	12	Sum.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
23982	162	12	Sum.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2033	132	8	SumOfLogs.java	evaluate	THIS	SumOfLogs	0	DEF	$.test(values, begin, length, true)
2033	132	8	SumOfLogs.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2033	132	8	SumOfLogs.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2033	132	8	SumOfLogs.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
23983	134	12	SumOfLogs.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
23983	134	12	SumOfLogs.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
23983	134	12	SumOfLogs.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2030	120	8	SumOfSquares.java	evaluate	THIS	SumOfSquares	0	DEF	$.test(values, begin, length, true)
2030	120	8	SumOfSquares.java	evaluate	values	double[]	0	DEF	test($, begin, length, true)
2030	120	8	SumOfSquares.java	evaluate	begin	int	0	DEF	test(values, $, length, true)
2030	120	8	SumOfSquares.java	evaluate	length	int	0	DEF	test(values, begin, $, true)
23980	122	12	SumOfSquares.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
23980	122	12	SumOfSquares.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
23980	122	12	SumOfSquares.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2103	158	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
2104	161	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
2105	164	8	SummaryStatistics.java	addValue	THIS	SummaryStatistics	0	DEF	$.geoMeanImpl != $.geoMean
2106	217	8	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	0	DEF	$.getN() > 0
2107	218	12	SummaryStatistics.java	getStandardDeviation	THIS	SummaryStatistics	1	DEF	$.getN() > 1
2108	353	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.meanImpl != $.mean
2109	356	8	SummaryStatistics.java	clear	THIS	SummaryStatistics	0	DEF	$.varianceImpl != $.variance
2110	370	8	SummaryStatistics.java	equals	THIS	SummaryStatistics	0	RET	object == $
2110	370	8	SummaryStatistics.java	equals	object	Object	0	RET	$ == this
2111	373	8	SummaryStatistics.java	equals	object	Object	0	RET	$ instanceof SummaryStatistics == false
2112	643	8	SummaryStatistics.java	checkEmpty	THIS	SummaryStatistics	0	MathIllegalStateException	$.n > 0
2113	681	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getVarianceImpl() instanceof Variance
2114	686	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.meanImpl instanceof Mean
2114	686	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.meanImpl instanceof Mean
2115	691	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.getGeoMeanImpl() instanceof GeometricMean
2116	699	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.geoMean == source.$.geoMeanImpl
2116	699	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.geoMean == $.geoMeanImpl
2117	704	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.max == source.$.maxImpl
2117	704	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.max == $.maxImpl
2118	709	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.mean == source.$.meanImpl
2118	709	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.mean == $.meanImpl
2119	714	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.min == source.$.minImpl
2119	714	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.min == $.minImpl
2120	719	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sum == source.$.sumImpl
2120	719	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sum == $.sumImpl
2121	724	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.variance == source.$.varianceImpl
2121	724	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.variance == $.varianceImpl
2122	729	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumLog == source.$.sumLogImpl
2122	729	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumLog == $.sumLogImpl
2123	734	8	SummaryStatistics.java	copy	THIS	SummaryStatistics	1	DEF	source.$.sumsq == source.$.sumsqImpl
2123	734	8	SummaryStatistics.java	copy	source	SummaryStatistics	1	DEF	$.sumsq == $.sumsqImpl
1154	1168	8	SymmLQ.java	solveInPlace	state	State	0	RET	$.bEqualsNullVector()
1155	1177	8	SymmLQ.java	solveInPlace	earlyStop	boolean	0	DEF	$
23000	1178	12	SymmLQ.java	solveInPlace	state	State	0	NIL-DOWHILE	$.hasConverged()
986	91	8	TDistribution.java	TDistribution	degreesOfFreedom	double	0	NotStrictlyPositiveException	$ <= 0
987	133	8	TDistribution.java	cumulativeProbability	x	double	1	DEF	$ == 0
988	141	12	TDistribution.java	cumulativeProbability	x	double	1	DEF	$ < 0.0
989	169	8	TDistribution.java	getNumericalMean	df	double	0	RET	$ > 1
990	190	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ > 2
991	194	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ > 1
991	194	8	TDistribution.java	getNumericalVariance	df	double	0	RET	$ <= 2
2185	1120	8	TTest.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ > 0.5
2185	1120	8	TTest.java	checkSignificanceLevel	alpha	double	0	OutOfRangeException	$ <= 0
2186	1137	8	TTest.java	checkSampleData	data	double[]	0	NullArgumentException	$ == null
2187	1140	8	TTest.java	checkSampleData	THIS	TTest	0	NumberIsTooSmallException	data.$.length < 2
2187	1140	8	TTest.java	checkSampleData	data	double[]	0	NumberIsTooSmallException	$.length < 2
2188	1158	8	TTest.java	checkSampleData	stat	StatisticalSummary	0	NullArgumentException	$ == null
2189	1161	8	TTest.java	checkSampleData	stat	StatisticalSummary	0	NumberIsTooSmallException	$.getN() < 2
2083	89	8	ThirdMoment.java	increment	THIS	ThirdMoment	0	DEF	$.n < 1
2734	104	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	1	DEF	$.previousState != null
2734	104	6	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	theta	double	1	DEF	$ <= 0.5
24351	111	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
24351	111	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
24352	129	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	THIS	ThreeEighthesStepInterpolator	0	NIL-FOR	i < $.interpolatedState.$.length
24352	129	10	ThreeEighthesStepInterpolator.java	computeInterpolatedStateAndDerivatives	i	int	0	NIL-FOR	$ < interpolatedState.length
2522	73	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	MathIllegalArgumentException	population.getPopulationSize() < $.arity
2522	73	8	TournamentSelection.java	tournament	population	ListPopulation	0	MathIllegalArgumentException	$.getPopulationSize() < this.arity
24196	87	8	TournamentSelection.java	tournament	THIS	TournamentSelection	0	NIL-FOR	i<$.arity
24196	87	8	TournamentSelection.java	tournament	i	int	0	NIL-FOR	$<this.arity
24220	62	8	TransformUtils.java	scaleArray	THIS	TransformUtils	0	NIL-FOR	i < f.$.length
24220	62	8	TransformUtils.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
24220	62	8	TransformUtils.java	scaleArray	f	double[]	0	NIL-FOR	i < $.length
24221	78	8	TransformUtils.java	scaleArray	THIS	TransformUtils	0	NIL-FOR	i < f.$.length
24221	78	8	TransformUtils.java	scaleArray	i	int	0	NIL-FOR	$ < f.length
24221	78	8	TransformUtils.java	scaleArray	f	Complex[]	0	NIL-FOR	i < $.length
24222	102	8	TransformUtils.java	createRealImaginaryArray	THIS	TransformUtils	0	NIL-FOR	i < dataC.$.length
24222	102	8	TransformUtils.java	createRealImaginaryArray	i	int	0	NIL-FOR	$ < dataC.length
24222	102	8	TransformUtils.java	createRealImaginaryArray	dataC	Complex[]	0	NIL-FOR	i < $.length
2594	128	8	TransformUtils.java	createComplexArray	THIS	TransformUtils	0	DimensionMismatchException	dataRI.$.length != 2
2594	128	8	TransformUtils.java	createComplexArray	dataRI	double[][]	0	DimensionMismatchException	$.length != 2
2595	133	8	TransformUtils.java	createComplexArray	THIS	TransformUtils	0	DimensionMismatchException	dataR.$.length != dataI.$.length
2595	133	8	TransformUtils.java	createComplexArray	dataR	double[]	0	DimensionMismatchException	$.length != dataI.length
2595	133	8	TransformUtils.java	createComplexArray	dataI	double[]	0	DimensionMismatchException	dataR.length != $.length
24223	139	8	TransformUtils.java	createComplexArray	i	int	0	NIL-FOR	$ < n
24223	139	8	TransformUtils.java	createComplexArray	n	int	0	NIL-FOR	i < $
2596	158	8	TransformUtils.java	exactLog2	index	int	0	MathIllegalArgumentException	$ < 0
87	144	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof String
87	144	8	TransformerMap.java	transform	o	Object	1	DEF	$ instanceof Number
88	148	12	TransformerMap.java	transform	trans	NumberTransformer	0	DEF	$ != null
89	159	8	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$ == other
89	159	8	TransformerMap.java	equals	other	Object	0	RET	this == $
90	162	8	TransformerMap.java	equals	other	Object	0	RET	$ instanceof TransformerMap
91	164	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.defaultTransformer.equals(rhs.$.defaultTransformer)
91	164	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	defaultTransformer.equals($.defaultTransformer)
92	167	12	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.map.size() != rhs.$.map.size()
92	167	12	TransformerMap.java	equals	rhs	TransformerMap	0	RET	map.size() != $.map.size()
93	171	16	TransformerMap.java	equals	THIS	TransformerMap	0	RET	$.entry.getValue().equals(rhs.$.map.get($.entry.getKey()))
93	171	16	TransformerMap.java	equals	rhs	TransformerMap	0	RET	entry.getValue().equals($.map.get(entry.getKey()))
3391	65	8	TrapezoidIntegrator.java	TrapezoidIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > TRAPEZOID_MAX_ITERATIONS_COUNT
3392	87	8	TrapezoidIntegrator.java	TrapezoidIntegrator	maximalIterationCount	int	0	NumberIsTooLargeException	$ > TRAPEZOID_MAX_ITERATIONS_COUNT
3393	119	8	TrapezoidIntegrator.java	stage	n	int	1	RET	$ == 0
24606	134	12	TrapezoidIntegrator.java	stage	i	long	0	NIL-FOR	$ < np
24606	134	12	TrapezoidIntegrator.java	stage	np	long	0	NIL-FOR	i < $
3394	154	12	TrapezoidIntegrator.java	doIntegrate	THIS	TrapezoidIntegrator	0	RET	i >= $.getMinimalIterationCount()
3394	154	12	TrapezoidIntegrator.java	doIntegrate	i	int	0	RET	$ >= getMinimalIterationCount()
3395	158	16	TrapezoidIntegrator.java	doIntegrate	THIS	TrapezoidIntegrator	0	RET	delta <= $.getAbsoluteAccuracy()
3395	158	16	TrapezoidIntegrator.java	doIntegrate	delta	double	0	RET	$ <= getAbsoluteAccuracy()
3395	158	16	TrapezoidIntegrator.java	doIntegrate	delta	double	0	RET	$ <= rLimit
3395	158	16	TrapezoidIntegrator.java	doIntegrate	rLimit	double	0	RET	delta <= $
1146	63	8	TriDiagonalTransformer.java	TriDiagonalTransformer	matrix	RealMatrix	0	NonSquareMatrixException	$.isSquare()
1147	86	8	TriDiagonalTransformer.java	getQ	THIS	TriDiagonalTransformer	0	DEF	$.cachedQ == null
1148	98	8	TriDiagonalTransformer.java	getQT	THIS	TriDiagonalTransformer	0	DEF	$.cachedQt == null
22986	103	12	TriDiagonalTransformer.java	getQT	k	int	0	NIL-FOR	$ >= 1
1149	106	16	TriDiagonalTransformer.java	getQT	hK	double[]	0	DEF	$[k] != 0.0
1149	106	16	TriDiagonalTransformer.java	getQT	k	int	0	DEF	hK[$] != 0.0
22987	110	20	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
22987	110	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
22988	113	20	TriDiagonalTransformer.java	getQT	j	int	0	NIL-FOR	$ < m
22988	113	20	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	j < $
22989	115	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
22989	115	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
22990	120	24	TriDiagonalTransformer.java	getQT	i	int	0	NIL-FOR	$ < m
22990	120	24	TriDiagonalTransformer.java	getQT	m	int	0	NIL-FOR	i < $
1150	139	8	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	$.cachedT == null
22991	142	12	TriDiagonalTransformer.java	getT	i	int	0	NIL-FOR	$ < m
22991	142	12	TriDiagonalTransformer.java	getT	m	int	0	NIL-FOR	i < $
1151	144	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ > 0
1152	147	16	TriDiagonalTransformer.java	getT	THIS	TriDiagonalTransformer	0	DEF	i < $.main.$.length - 1
1152	147	16	TriDiagonalTransformer.java	getT	i	int	0	DEF	$ < main.length - 1
22992	195	8	TriDiagonalTransformer.java	transform	k	int	0	NIL-FOR	$ < m - 1
22992	195	8	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	k < $ - 1
22993	201	12	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
22993	201	12	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
1153	207	12	TriDiagonalTransformer.java	transform	a	double	0	DEF	$ != 0.0
22994	218	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
22994	218	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
22995	222	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
22995	222	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
22996	232	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
22996	232	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
22997	238	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
22997	238	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
22998	244	16	TriDiagonalTransformer.java	transform	i	int	0	NIL-FOR	$ < m
22998	244	16	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	i < $
22999	246	20	TriDiagonalTransformer.java	transform	j	int	0	NIL-FOR	$ < m
22999	246	20	TriDiagonalTransformer.java	transform	m	int	0	NIL-FOR	j < $
996	82	8	TriangularDistribution.java	TriangularDistribution	a	double	0	NumberIsTooLargeException	$ >= b
996	82	8	TriangularDistribution.java	TriangularDistribution	b	double	0	NumberIsTooLargeException	a >= $
997	87	8	TriangularDistribution.java	TriangularDistribution	a	double	0	NumberIsTooSmallException	c < $
997	87	8	TriangularDistribution.java	TriangularDistribution	c	double	0	NumberIsTooSmallException	$ < a
998	91	8	TriangularDistribution.java	TriangularDistribution	c	double	0	NumberIsTooLargeException	$ > b
998	91	8	TriangularDistribution.java	TriangularDistribution	b	double	0	NumberIsTooLargeException	c > $
999	153	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x < $.a
999	153	8	TriangularDistribution.java	density	x	double	0	RET	$ < a
1000	156	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	$.a <= x
1000	156	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x < $.c
1000	156	8	TriangularDistribution.java	density	x	double	0	RET	a <= $
1000	156	8	TriangularDistribution.java	density	x	double	0	RET	$ < c
1001	161	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x == $.c
1001	161	8	TriangularDistribution.java	density	x	double	0	RET	$ == c
1002	164	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	x <= $.b
1002	164	8	TriangularDistribution.java	density	THIS	TriangularDistribution	0	RET	$.c < x
1002	164	8	TriangularDistribution.java	density	x	double	0	RET	$ <= b
1002	164	8	TriangularDistribution.java	density	x	double	0	RET	c < $
1003	186	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x < $.a
1003	186	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ < a
1004	189	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	$.a <= x
1004	189	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x < $.c
1004	189	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	a <= $
1004	189	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ < c
1005	194	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x == $.c
1005	194	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ == c
1006	197	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	$.c < x
1006	197	8	TriangularDistribution.java	cumulativeProbability	THIS	TriangularDistribution	0	RET	x <= $.b
1006	197	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	c < $
1006	197	8	TriangularDistribution.java	cumulativeProbability	x	double	0	RET	$ <= b
1007	273	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ > 1
1007	273	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	OutOfRangeException	$ < 0
1008	276	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 0
1009	279	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ == 1
1010	282	8	TriangularDistribution.java	inverseCumulativeProbability	THIS	TriangularDistribution	0	RET	p < ($.c - $.a) / ($.b - $.a)
1010	282	8	TriangularDistribution.java	inverseCumulativeProbability	p	double	0	RET	$ < (c - a) / (b - a)
3132	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f[0].length == 0
3132	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	z.$.length == 0
3132	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	NoDataException	f.$.length == 0
3132	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	NoDataException	$ == 0
3132	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	NoDataException	$ == 0
3132	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	z	double[]	0	NoDataException	$.length == 0
3132	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$[0].length == 0
3132	160	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	NoDataException	$.length == 0
3133	163	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != f.$.length
3133	163	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != f.length
3133	163	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	xLen != $.length
3134	166	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdX.$.length
3134	166	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdX.length
3134	166	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	xLen != $.length
3135	169	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdY.$.length
3135	169	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdY.length
3135	169	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	xLen != $.length
3136	172	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != dFdZ.$.length
3136	172	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != dFdZ.length
3136	172	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3137	175	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdY.$.length
3137	175	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdY.length
3137	175	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	xLen != $.length
3138	178	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdXdZ.$.length
3138	178	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdXdZ.length
3138	178	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3139	181	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d2FdYdZ.$.length
3139	181	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d2FdYdZ.length
3139	181	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
3140	184	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	xLen != d3FdXdYdZ.$.length
3140	184	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	xLen	int	0	DimensionMismatchException	$ != d3FdXdYdZ.length
3140	184	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	xLen != $.length
24466	201	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	NIL-FOR	$ < lastI
24466	201	8	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastI	int	0	NIL-FOR	i < $
3141	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i].length != yLen
3141	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$].length != yLen
3141	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	f[i].length != $
3141	202	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3142	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i].length != yLen
3142	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$].length != yLen
3142	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdX[i].length != $
3142	205	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3143	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i].length != yLen
3143	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$].length != yLen
3143	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdY[i].length != $
3143	208	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3144	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i].length != yLen
3144	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$].length != yLen
3144	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	dFdZ[i].length != $
3144	211	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3145	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i].length != yLen
3145	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$].length != yLen
3145	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdY[i].length != $
3145	214	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3146	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i].length != yLen
3146	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$].length != yLen
3146	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdXdZ[i].length != $
3146	217	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3147	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i].length != yLen
3147	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$].length != yLen
3147	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d2FdYdZ[i].length != $
3147	220	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
3148	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i].length != yLen
3148	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$].length != yLen
3148	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	yLen	int	0	DimensionMismatchException	d3FdXdYdZ[i].length != $
3148	223	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i].length != yLen
24467	228	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	NIL-FOR	$ < lastJ
24467	228	12	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastJ	int	0	NIL-FOR	j < $
3149	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	f[i][j].length != zLen
3149	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	f[i][$].length != zLen
3149	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	f[$][j].length != zLen
3149	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	f[i][j].length != $
3149	229	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	f	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3150	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdX[i][j].length != zLen
3150	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdX[i][$].length != zLen
3150	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdX[$][j].length != zLen
3150	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdX[i][j].length != $
3150	232	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdX	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3151	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdY[i][j].length != zLen
3151	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdY[i][$].length != zLen
3151	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdY[$][j].length != zLen
3151	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdY[i][j].length != $
3151	235	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3152	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	dFdZ[i][j].length != zLen
3152	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	dFdZ[i][$].length != zLen
3152	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	dFdZ[$][j].length != zLen
3152	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	dFdZ[i][j].length != $
3152	238	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	dFdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3153	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdY[i][j].length != zLen
3153	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdY[i][$].length != zLen
3153	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdY[$][j].length != zLen
3153	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdY[i][j].length != $
3153	241	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdY	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3154	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdXdZ[i][j].length != zLen
3154	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdXdZ[i][$].length != zLen
3154	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdXdZ[$][j].length != zLen
3154	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdXdZ[i][j].length != $
3154	244	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdXdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3155	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d2FdYdZ[i][j].length != zLen
3155	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d2FdYdZ[i][$].length != zLen
3155	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d2FdYdZ[$][j].length != zLen
3155	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d2FdYdZ[i][j].length != $
3155	247	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d2FdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
3156	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	THIS	TricubicSplineInterpolatingFunction	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != zLen
3156	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	j	int	0	DimensionMismatchException	d3FdXdYdZ[i][$].length != zLen
3156	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	i	int	0	DimensionMismatchException	d3FdXdYdZ[$][j].length != zLen
3156	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	zLen	int	0	DimensionMismatchException	d3FdXdYdZ[i][j].length != $
3156	250	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	d3FdXdYdZ	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
24468	255	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	k	int	0	NIL-FOR	$ < lastK
24468	255	16	TricubicSplineInterpolatingFunction.java	TricubicSplineInterpolatingFunction	lastK	int	0	NIL-FOR	k < $
3157	311	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	OutOfRangeException	$ == -1
3158	315	8	TricubicSplineInterpolatingFunction.java	value	j	int	0	OutOfRangeException	$ == -1
3159	319	8	TricubicSplineInterpolatingFunction.java	value	k	int	0	OutOfRangeException	$ == -1
3160	338	8	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ < val[0]
3160	338	8	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c < $[0]
24469	343	8	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	NIL-FOR	$ < max
24469	343	8	TricubicSplineInterpolatingFunction.java	searchIndex	max	int	0	NIL-FOR	i < $
3161	344	12	TricubicSplineInterpolatingFunction.java	searchIndex	i	int	0	RET	c <= val[$]
3161	344	12	TricubicSplineInterpolatingFunction.java	searchIndex	c	double	0	RET	$ <= val[i]
3161	344	12	TricubicSplineInterpolatingFunction.java	searchIndex	val	double[]	0	RET	c <= $[i]
24470	405	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	i	int	0	NIL-FOR	$ < sz
24470	405	8	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	i < $
24471	408	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	j	int	0	NIL-FOR	$ < sz
24471	408	12	TricubicSplineInterpolatingFunction.java	computeSplineCoefficients	sz	int	0	NIL-FOR	j < $
24472	434	8	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	i	int	0	NIL-FOR	$ < N
24473	435	12	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	j	int	0	NIL-FOR	$ < N
24474	436	16	TricubicSplineInterpolatingFunction.java	TricubicSplineFunction	k	int	0	NIL-FOR	$ < N
3162	450	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ > 1
3162	450	8	TricubicSplineInterpolatingFunction.java	value	x	double	0	OutOfRangeException	$ < 0
3163	453	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ < 0
3163	453	8	TricubicSplineInterpolatingFunction.java	value	y	double	0	OutOfRangeException	$ > 1
3164	456	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ < 0
3164	456	8	TricubicSplineInterpolatingFunction.java	value	z	double	0	OutOfRangeException	$ > 1
24475	473	8	TricubicSplineInterpolatingFunction.java	value	i	int	0	NIL-FOR	$ < N
24476	474	12	TricubicSplineInterpolatingFunction.java	value	j	int	0	NIL-FOR	$ < N
24477	475	16	TricubicSplineInterpolatingFunction.java	value	k	int	0	NIL-FOR	$ < N
3205	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	fval.$.length == 0
3205	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	zval.$.length == 0
3205	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	yval.$.length == 0
3205	38	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	NoDataException	xval.$.length == 0
3205	38	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	NoDataException	$.length == 0
3205	38	8	TricubicSplineInterpolator.java	interpolate	yval	double[]	0	NoDataException	$.length == 0
3205	38	8	TricubicSplineInterpolator.java	interpolate	zval	double[]	0	NoDataException	$.length == 0
3205	38	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	NoDataException	$.length == 0
3206	41	8	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	xval.$.length != fval.$.length
3206	41	8	TricubicSplineInterpolator.java	interpolate	xval	double[]	0	DimensionMismatchException	$.length != fval.length
3206	41	8	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	xval.length != $.length
24518	58	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
24518	58	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
3207	59	12	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i].length != yLen
3207	59	12	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$].length != yLen
3207	59	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	DimensionMismatchException	fval[i].length != $
3207	59	12	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i].length != yLen
24519	63	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
24519	63	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
3208	64	16	TricubicSplineInterpolator.java	interpolate	THIS	TricubicSplineInterpolator	0	DimensionMismatchException	fval[i][j].length != zLen
3208	64	16	TricubicSplineInterpolator.java	interpolate	j	int	0	DimensionMismatchException	fval[i][$].length != zLen
3208	64	16	TricubicSplineInterpolator.java	interpolate	i	int	0	DimensionMismatchException	fval[$][j].length != zLen
3208	64	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	DimensionMismatchException	fval[i][j].length != $
3208	64	16	TricubicSplineInterpolator.java	interpolate	fval	double[][][]	0	DimensionMismatchException	$[i][j].length != zLen
24520	68	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
24520	68	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
24521	81	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
24521	81	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
24522	88	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
24522	88	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
24523	95	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
24523	95	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
24524	103	8	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
24524	103	8	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
24525	105	12	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
24525	105	12	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
24526	107	16	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
24526	107	16	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
24527	119	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
24527	119	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
24528	121	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
24528	121	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
24529	123	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
24529	123	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
24530	133	8	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
24530	133	8	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
24531	135	12	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
24531	135	12	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
24532	137	16	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
24532	137	16	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
24533	146	8	TricubicSplineInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xLen
24533	146	8	TricubicSplineInterpolator.java	interpolate	xLen	int	0	NIL-FOR	i < $
24534	149	12	TricubicSplineInterpolator.java	interpolate	j	int	0	NIL-FOR	$ < yLen
24534	149	12	TricubicSplineInterpolator.java	interpolate	yLen	int	0	NIL-FOR	j < $
24535	152	16	TricubicSplineInterpolator.java	interpolate	k	int	0	NIL-FOR	$ < zLen
24535	152	16	TricubicSplineInterpolator.java	interpolate	zLen	int	0	NIL-FOR	k < $
2510	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	THIS	UncorrelatedRandomVectorGenerator	0	DimensionMismatchException	mean.$.length != standardDeviation.$.length
2510	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	mean	double[]	0	DimensionMismatchException	$.length != standardDeviation.length
2510	56	4	UncorrelatedRandomVectorGenerator.java	UncorrelatedRandomVectorGenerator	standardDeviation	double[]	0	DimensionMismatchException	mean.length != $.length
24189	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	THIS	UncorrelatedRandomVectorGenerator	0	NIL-FOR	i < random.$.length
24189	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < random.length
24189	85	4	UncorrelatedRandomVectorGenerator.java	nextVector	random	double[]	0	NIL-FOR	i < $.length
2523	65	8	UniformCrossover.java	UniformCrossover	ratio	double	0	OutOfRangeException	$ > 1.0d
2523	65	8	UniformCrossover.java	UniformCrossover	ratio	double	0	OutOfRangeException	$ < 0.0d
2524	85	8	UniformCrossover.java	crossover	first	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2524	85	8	UniformCrossover.java	crossover	second	Chromosome	0	MathIllegalArgumentException	$ instanceof AbstractListChromosome<?>
2525	102	8	UniformCrossover.java	mate	length	int	0	DimensionMismatchException	$ != second.getLength()
2525	102	8	UniformCrossover.java	mate	second	AbstractListChromosome<T>	0	DimensionMismatchException	length != $.getLength()
24197	115	8	UniformCrossover.java	mate	index	int	0	NIL-FOR	$ < length
24197	115	8	UniformCrossover.java	mate	length	int	0	NIL-FOR	index < $
2526	117	12	UniformCrossover.java	mate	THIS	UniformCrossover	1	DEF	random.nextDouble() < $.ratio
2526	117	12	UniformCrossover.java	mate	random	RandomGenerator	1	DEF	$.nextDouble() < ratio
1011	72	8	UniformIntegerDistribution.java	UniformIntegerDistribution	lower	int	0	NumberIsTooLargeException	$ >= upper
1011	72	8	UniformIntegerDistribution.java	UniformIntegerDistribution	upper	int	0	NumberIsTooLargeException	lower >= $
1012	83	8	UniformIntegerDistribution.java	probability	THIS	UniformIntegerDistribution	0	RET	x > $.upper
1012	83	8	UniformIntegerDistribution.java	probability	THIS	UniformIntegerDistribution	0	RET	x < $.lower
1012	83	8	UniformIntegerDistribution.java	probability	x	int	0	RET	$ > upper
1012	83	8	UniformIntegerDistribution.java	probability	x	int	0	RET	$ < lower
1013	91	8	UniformIntegerDistribution.java	cumulativeProbability	THIS	UniformIntegerDistribution	0	RET	x < $.lower
1013	91	8	UniformIntegerDistribution.java	cumulativeProbability	x	int	0	RET	$ < lower
1014	94	8	UniformIntegerDistribution.java	cumulativeProbability	THIS	UniformIntegerDistribution	0	RET	x > $.upper
1014	94	8	UniformIntegerDistribution.java	cumulativeProbability	x	int	0	RET	$ > upper
1015	96	8	UniformRealDistribution.java	UniformRealDistribution	lower	double	0	NumberIsTooLargeException	$ >= upper
1015	96	8	UniformRealDistribution.java	UniformRealDistribution	upper	double	0	NumberIsTooLargeException	lower >= $
1016	120	8	UniformRealDistribution.java	density	THIS	UniformRealDistribution	0	RET	x > $.upper
1016	120	8	UniformRealDistribution.java	density	THIS	UniformRealDistribution	0	RET	x < $.lower
1016	120	8	UniformRealDistribution.java	density	x	double	0	RET	$ > upper
1016	120	8	UniformRealDistribution.java	density	x	double	0	RET	$ < lower
1017	128	8	UniformRealDistribution.java	cumulativeProbability	THIS	UniformRealDistribution	0	RET	x <= $.lower
1017	128	8	UniformRealDistribution.java	cumulativeProbability	x	double	0	RET	$ <= lower
1018	131	8	UniformRealDistribution.java	cumulativeProbability	THIS	UniformRealDistribution	0	RET	x >= $.upper
1018	131	8	UniformRealDistribution.java	cumulativeProbability	x	double	0	RET	$ >= upper
24164	66	8	UnitSphereRandomVectorGenerator.java	nextVector	normSq	double	0	NIL-DOWHILE	$ > 1
24165	68	12	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
24165	68	12	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
24166	76	8	UnitSphereRandomVectorGenerator.java	nextVector	THIS	UnitSphereRandomVectorGenerator	0	NIL-FOR	i < $.dimension
24166	76	8	UnitSphereRandomVectorGenerator.java	nextVector	i	int	0	NIL-FOR	$ < dimension
1645	75	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	optimizer	BaseUnivariateOptimizer<FUNC>	0	NullArgumentException	$ == null
1645	75	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	generator	RandomGenerator	0	NullArgumentException	$ == null
1646	79	8	UnivariateMultiStartOptimizer.java	UnivariateMultiStartOptimizer	starts	int	0	NotStrictlyPositiveException	$ < 1
1647	133	8	UnivariateMultiStartOptimizer.java	getOptima	THIS	UnivariateMultiStartOptimizer	0	MathIllegalStateException	$.optima == null
23661	156	8	UnivariateMultiStartOptimizer.java	optimize	THIS	UnivariateMultiStartOptimizer	0	NIL-FOR	i < $.starts
23661	156	8	UnivariateMultiStartOptimizer.java	optimize	i	int	0	NIL-FOR	$ < starts
1648	172	8	UnivariateMultiStartOptimizer.java	optimize	THIS	UnivariateMultiStartOptimizer	0	DEF	$.optima[0] == null
3204	85	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NumberIsTooSmallException	xval.$.length < $.extend
3204	85	8	UnivariatePeriodicInterpolator.java	interpolate	xval	double[]	0	NumberIsTooSmallException	$.length < extend
24516	95	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NIL-FOR	i < xval.$.length
24516	95	8	UnivariatePeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < xval.length
24516	95	8	UnivariatePeriodicInterpolator.java	interpolate	xval	double[]	0	NIL-FOR	i < $.length
24517	102	8	UnivariatePeriodicInterpolator.java	interpolate	THIS	UnivariatePeriodicInterpolator	0	NIL-FOR	i < $.extend
24517	102	8	UnivariatePeriodicInterpolator.java	interpolate	i	int	0	NIL-FOR	$ < extend
3249	50	8	UnivariateSolverUtils.java	solve	function	UnivariateFunction	0	NullArgumentException	$ == null
3250	73	8	UnivariateSolverUtils.java	solve	function	UnivariateFunction	0	NullArgumentException	$ == null
3251	99	8	UnivariateSolverUtils.java	forceSide	THIS	UnivariateSolverUtils	0	RET	allowedSolution == $.AllowedSolution.ANY_SIDE
3251	99	8	UnivariateSolverUtils.java	forceSide	allowedSolution	AllowedSolution	0	RET	$ == AllowedSolution.ANY_SIDE
24551	112	8	UnivariateSolverUtils.java	forceSide	remainingEval	int	0	NIL-WHILE	$ > 0
3252	114	12	UnivariateSolverUtils.java	forceSide	fLo	double	0	RET	$ >= 0
3252	114	12	UnivariateSolverUtils.java	forceSide	fLo	double	0	RET	$ <= 0
3252	114	12	UnivariateSolverUtils.java	forceSide	fHi	double	0	RET	$ <= 0
3252	114	12	UnivariateSolverUtils.java	forceSide	fHi	double	0	RET	$ >= 0
3253	122	12	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ < fHi
3253	122	12	UnivariateSolverUtils.java	forceSide	fHi	double	1	DEF	fLo < $
3254	124	16	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ >= 0
3255	129	19	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ > fHi
3255	129	19	UnivariateSolverUtils.java	forceSide	fHi	double	1	DEF	fLo > $
3256	131	16	UnivariateSolverUtils.java	forceSide	fLo	double	1	DEF	$ <= 0
3257	143	12	UnivariateSolverUtils.java	forceSide	changeLo	boolean	0	DEF	$
3258	150	12	UnivariateSolverUtils.java	forceSide	changeHi	boolean	0	DEF	$
3259	246	8	UnivariateSolverUtils.java	bracket	function	UnivariateFunction	0	NullArgumentException	$ == null
3260	249	8	UnivariateSolverUtils.java	bracket	maximumIterations	int	0	NotStrictlyPositiveException	$ <= 0
24552	260	8	UnivariateSolverUtils.java	bracket	a	double	0	NIL-DOWHILE	$ > lowerBound
24552	260	8	UnivariateSolverUtils.java	bracket	b	double	0	NIL-DOWHILE	$ < upperBound
24552	260	8	UnivariateSolverUtils.java	bracket	fa	double	0	NIL-DOWHILE	$ * fb > 0.0
24552	260	8	UnivariateSolverUtils.java	bracket	fb	double	0	NIL-DOWHILE	fa * $ > 0.0
24552	260	8	UnivariateSolverUtils.java	bracket	numIterations	int	0	NIL-DOWHILE	$ < maximumIterations
24552	260	8	UnivariateSolverUtils.java	bracket	lowerBound	double	0	NIL-DOWHILE	a > $
24552	260	8	UnivariateSolverUtils.java	bracket	upperBound	double	0	NIL-DOWHILE	b < $
24552	260	8	UnivariateSolverUtils.java	bracket	maximumIterations	int	0	NIL-DOWHILE	numIterations < $
3261	270	8	UnivariateSolverUtils.java	bracket	fa	double	0	NoBracketingException	$ * fb > 0.0
3261	270	8	UnivariateSolverUtils.java	bracket	fb	double	0	NoBracketingException	fa * $ > 0.0
3262	305	8	UnivariateSolverUtils.java	isBracketing	function	UnivariateFunction	0	NullArgumentException	$ == null
3263	336	8	UnivariateSolverUtils.java	verifyInterval	lower	double	0	NumberIsTooLargeException	$ >= upper
3263	336	8	UnivariateSolverUtils.java	verifyInterval	upper	double	0	NumberIsTooLargeException	lower >= $
3264	371	8	UnivariateSolverUtils.java	verifyBracketing	function	UnivariateFunction	0	NullArgumentException	$ == null
3265	375	8	UnivariateSolverUtils.java	verifyBracketing	THIS	UnivariateSolverUtils	0	NoBracketingException	$.isBracketing(function, lower, upper)
3265	375	8	UnivariateSolverUtils.java	verifyBracketing	function	UnivariateFunction	0	NoBracketingException	isBracketing($, lower, upper)
3265	375	8	UnivariateSolverUtils.java	verifyBracketing	lower	double	0	NoBracketingException	isBracketing(function, $, upper)
3265	375	8	UnivariateSolverUtils.java	verifyBracketing	upper	double	0	NoBracketingException	isBracketing(function, lower, $)
24190	139	8	ValueServer.java	fill	THIS	ValueServer	0	NIL-FOR	i < values.$.length
24190	139	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < values.length
24190	139	8	ValueServer.java	fill	values	double[]	0	NIL-FOR	i < $.length
24191	154	8	ValueServer.java	fill	i	int	0	NIL-FOR	$ < length
24191	154	8	ValueServer.java	fill	length	int	0	NIL-FOR	i < $
2511	262	8	ValueServer.java	resetReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
2512	279	8	ValueServer.java	closeReplayFile	THIS	ValueServer	0	DEF	$.filePointer != null
2513	353	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	MathIllegalStateException	$.empiricalDistribution.getBinStats().size() == 0
2513	353	8	ValueServer.java	getNextDigest	THIS	ValueServer	0	MathIllegalStateException	$.empiricalDistribution == null
2514	380	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	DEF	$.filePointer == null
2515	383	8	ValueServer.java	getNextReplay	THIS	ValueServer	0	MathIllegalStateException	(str = $.filePointer.readLine()) == null
2515	383	8	ValueServer.java	getNextReplay	str	String	0	MathIllegalStateException	($ = filePointer.readLine()) == null
2516	387	12	ValueServer.java	getNextReplay	THIS	ValueServer	0	MathIllegalStateException	(str = $.filePointer.readLine()) == null
2516	387	12	ValueServer.java	getNextReplay	str	String	0	MathIllegalStateException	($ = filePointer.readLine()) == null
2036	169	8	Variance.java	increment	THIS	Variance	0	DEF	$.incMoment
2037	179	12	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 0
2038	181	19	Variance.java	getResult	THIS	Variance	1	RET	$.moment.$.n == 1
2039	184	16	Variance.java	getResult	THIS	Variance	1	RET	$.isBiasCorrected
2040	204	8	Variance.java	clear	THIS	Variance	0	DEF	$.incMoment
2041	227	8	Variance.java	evaluate	values	double[]	0	NullArgumentException	$ == null
2042	258	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
2042	258	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2042	258	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
2042	258	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
2043	260	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2044	262	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
2045	318	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights,begin, length)
2045	318	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights,begin, length)
2045	318	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $,begin, length)
2045	318	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights,$, length)
2045	318	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights,begin, $)
2046	320	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2047	322	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
2048	404	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, begin, length)
2048	404	8	Variance.java	evaluate	values	double[]	0	DEF	test($, begin, length)
2048	404	8	Variance.java	evaluate	begin	int	0	DEF	test(values, $, length)
2048	404	8	Variance.java	evaluate	length	int	0	DEF	test(values, begin, $)
2049	405	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2050	407	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
23986	411	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
23986	411	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
23986	411	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2051	417	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
2052	506	8	Variance.java	evaluate	THIS	Variance	0	DEF	$.test(values, weights, begin, length)
2052	506	8	Variance.java	evaluate	values	double[]	0	DEF	test($, weights, begin, length)
2052	506	8	Variance.java	evaluate	weights	double[]	0	DEF	test(values, $, begin, length)
2052	506	8	Variance.java	evaluate	begin	int	0	DEF	test(values, weights, $, length)
2052	506	8	Variance.java	evaluate	length	int	0	DEF	test(values, weights, begin, $)
2053	507	12	Variance.java	evaluate	length	int	1	DEF	$ == 1
2054	509	19	Variance.java	evaluate	length	int	0	DEF	$ > 1
23987	513	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
23987	513	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
23987	513	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
23988	520	16	Variance.java	evaluate	i	int	0	NIL-FOR	$ < begin + length
23988	520	16	Variance.java	evaluate	begin	int	0	NIL-FOR	i < $ + length
23988	520	16	Variance.java	evaluate	length	int	0	NIL-FOR	i < begin + $
2055	524	16	Variance.java	evaluate	THIS	Variance	1	DEF	$.isBiasCorrected
704	188	8	Vector1D.java	normalize	s	double	0	MathArithmeticException	$ == 0
705	305	8	Vector1D.java	equals	THIS	Vector1D	0	RET	$ == other
705	305	8	Vector1D.java	equals	other	Object	0	RET	this == $
706	309	8	Vector1D.java	equals	other	Object	0	RET	$ instanceof Vector1D
707	311	12	Vector1D.java	equals	rhs	Vector1D	0	RET	$.isNaN()
708	329	8	Vector1D.java	hashCode	THIS	Vector1D	0	RET	$.isNaN()
702	115	8	Vector1DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
703	127	8	Vector1DFormat.java	parse	coordinates	double[]	0	RET	$ == null
748	80	8	Vector2D.java	Vector2D	THIS	Vector2D	0	DimensionMismatchException	v.$.length != 2
748	80	8	Vector2D.java	Vector2D	v	double[]	0	DimensionMismatchException	$.length != 2
749	226	8	Vector2D.java	normalize	s	double	0	MathArithmeticException	$ == 0
750	347	8	Vector2D.java	equals	THIS	Vector2D	0	RET	$ == other
750	347	8	Vector2D.java	equals	other	Object	0	RET	this == $
751	351	8	Vector2D.java	equals	other	Object	0	RET	$ instanceof Vector2D
752	353	12	Vector2D.java	equals	rhs	Vector2D	0	RET	$.isNaN()
753	371	8	Vector2D.java	hashCode	THIS	Vector2D	0	RET	$.isNaN()
718	118	8	Vector2DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
719	130	8	Vector2DFormat.java	parse	coordinates	double[]	0	RET	$ == null
677	108	8	Vector3D.java	Vector3D	THIS	Vector3D	0	DimensionMismatchException	v.$.length != 3
677	108	8	Vector3D.java	Vector3D	v	double[]	0	DimensionMismatchException	$.length != 3
678	298	8	Vector3D.java	normalize	s	double	0	MathArithmeticException	$ == 0
679	322	8	Vector3D.java	orthogonal	threshold	double	0	MathArithmeticException	$ == 0
680	326	8	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x >= -threshold
680	326	8	Vector3D.java	orthogonal	THIS	Vector3D	1	RET	$.x <= threshold
680	326	8	Vector3D.java	orthogonal	threshold	double	1	RET	x >= -$
680	326	8	Vector3D.java	orthogonal	threshold	double	1	RET	x <= $
681	329	15	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y >= -threshold
681	329	15	Vector3D.java	orthogonal	THIS	Vector3D	0	RET	$.y <= threshold
681	329	15	Vector3D.java	orthogonal	threshold	double	0	RET	y >= -$
681	329	15	Vector3D.java	orthogonal	threshold	double	0	RET	y <= $
682	352	8	Vector3D.java	angle	normProduct	double	0	MathArithmeticException	$ == 0
683	358	8	Vector3D.java	angle	dot	double	0	RET	$ < -threshold
683	358	8	Vector3D.java	angle	dot	double	0	RET	$ > threshold
683	358	8	Vector3D.java	angle	threshold	double	0	RET	dot < -$
683	358	8	Vector3D.java	angle	threshold	double	0	RET	dot > $
684	361	12	Vector3D.java	angle	dot	double	0	RET	$ >= 0
685	414	8	Vector3D.java	equals	THIS	Vector3D	0	RET	$ == other
685	414	8	Vector3D.java	equals	other	Object	0	RET	this == $
686	418	8	Vector3D.java	equals	other	Object	0	RET	$ instanceof Vector3D
687	420	12	Vector3D.java	equals	rhs	Vector3D	0	RET	$.isNaN()
688	438	8	Vector3D.java	hashCode	THIS	Vector3D	0	RET	$.isNaN()
630	130	8	Vector3DFormat.java	parse	parsePosition	ParsePosition	0	MathParseException	$.getIndex() == 0
631	147	8	Vector3DFormat.java	parse	coordinates	double[]	0	RET	$ == null
22812	202	8	VectorFormat.java	format	THIS	VectorFormat	0	NIL-FOR	i < coordinates.$.length
22812	202	8	VectorFormat.java	format	i	int	0	NIL-FOR	$ < coordinates.length
22812	202	8	VectorFormat.java	format	coordinates	double	0	NIL-FOR	i < $.length
620	203	12	VectorFormat.java	format	i	int	0	DEF	$ > 0
621	247	8	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedPrefix, pos)
621	247	8	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedPrefix, pos)
621	247	8	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedPrefix, $)
22813	251	8	VectorFormat.java	parseCoordinates	i	int	0	NIL-FOR	$ < dimension
22813	251	8	VectorFormat.java	parseCoordinates	dimension	int	0	NIL-FOR	i < $
622	257	12	VectorFormat.java	parseCoordinates	i	int	0	RET	$ > 0
623	258	16	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSeparator, pos)
623	258	16	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSeparator, pos)
623	258	16	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSeparator, $)
624	268	12	VectorFormat.java	parseCoordinates	c	Number	0	RET	$ == null
625	282	8	VectorFormat.java	parseCoordinates	THIS	VectorFormat	0	RET	CompositeFormat.parseFixedstring(source, $.trimmedSuffix, pos)
625	282	8	VectorFormat.java	parseCoordinates	source	String	0	RET	CompositeFormat.parseFixedstring($, trimmedSuffix, pos)
625	282	8	VectorFormat.java	parseCoordinates	pos	ParsePosition	0	RET	CompositeFormat.parseFixedstring(source, trimmedSuffix, $)
2066	66	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	DimensionMismatchException	v.$.length != $.sums.$.length
2066	66	8	VectorialCovariance.java	increment	v	double[]	0	DimensionMismatchException	$.length != sums.length
23993	70	8	VectorialCovariance.java	increment	THIS	VectorialCovariance	0	NIL-FOR	i < v.$.length
23993	70	8	VectorialCovariance.java	increment	i	int	0	NIL-FOR	$ < v.length
23993	70	8	VectorialCovariance.java	increment	v	double[]	0	NIL-FOR	i < $.length
23994	72	12	VectorialCovariance.java	increment	j	int	0	NIL-FOR	$ <= i
23994	72	12	VectorialCovariance.java	increment	i	int	0	NIL-FOR	j <= $
2067	88	8	VectorialCovariance.java	getResult	THIS	VectorialCovariance	0	DEF	$.n > 1
23995	91	12	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	$ < dimension
23995	91	12	VectorialCovariance.java	getResult	dimension	int	0	NIL-FOR	i < $
23996	92	16	VectorialCovariance.java	getResult	j	int	0	NIL-FOR	$ <= i
23996	92	16	VectorialCovariance.java	getResult	i	int	0	NIL-FOR	j <= $
2068	136	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$ == obj
2068	136	8	VectorialCovariance.java	equals	obj	Object	0	RET	this == $
2069	139	8	VectorialCovariance.java	equals	obj	Object	0	RET	$ instanceof VectorialCovariance
2070	143	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.isBiasCorrected != other.$.isBiasCorrected
2070	143	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	isBiasCorrected != $.isBiasCorrected
2071	146	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	$.n != other.$.n
2071	146	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	n != $.n
2072	149	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.productsSums, other.$.productsSums)
2072	149	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(productsSums, $.productsSums)
2073	152	8	VectorialCovariance.java	equals	THIS	VectorialCovariance	0	RET	Arrays.equals($.sums, other.$.sums)
2073	152	8	VectorialCovariance.java	equals	other	VectorialCovariance	0	RET	Arrays.equals(sums, $.sums)
23999	42	8	VectorialMean.java	VectorialMean	i	int	0	NIL-FOR	$ < dimension
23999	42	8	VectorialMean.java	VectorialMean	dimension	int	0	NIL-FOR	i < $
2089	53	8	VectorialMean.java	increment	THIS	VectorialMean	0	DimensionMismatchException	v.$.length != $.means.$.length
2089	53	8	VectorialMean.java	increment	v	double[]	0	DimensionMismatchException	$.length != means.length
24000	56	8	VectorialMean.java	increment	THIS	VectorialMean	0	NIL-FOR	i < v.$.length
24000	56	8	VectorialMean.java	increment	i	int	0	NIL-FOR	$ < v.length
24000	56	8	VectorialMean.java	increment	v	double[]	0	NIL-FOR	i < $.length
24001	67	8	VectorialMean.java	getResult	THIS	VectorialMean	0	NIL-FOR	i < result.$.length
24001	67	8	VectorialMean.java	getResult	i	int	0	NIL-FOR	$ < result.length
24001	67	8	VectorialMean.java	getResult	result	double[]	0	NIL-FOR	i < $.length
2090	93	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	$ == obj
2090	93	8	VectorialMean.java	equals	obj	Object	0	RET	this == $
2091	96	8	VectorialMean.java	equals	obj	Object	0	RET	$ instanceof VectorialMean
2092	100	8	VectorialMean.java	equals	THIS	VectorialMean	0	RET	Arrays.equals($.means, other.$.means)
2092	100	8	VectorialMean.java	equals	other	VectorialMean	0	RET	Arrays.equals(means, $.means)
951	114	8	WeibullDistribution.java	WeibullDistribution	alpha	double	0	NotStrictlyPositiveException	$ <= 0
952	118	8	WeibullDistribution.java	WeibullDistribution	beta	double	0	NotStrictlyPositiveException	$ <= 0
953	158	8	WeibullDistribution.java	density	x	double	0	RET	$ < 0
954	178	8	WeibullDistribution.java	cumulativeProbability	x	double	1	DEF	$ <= 0.0
955	195	8	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ < 0.0
955	195	8	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	OutOfRangeException	$ > 1.0
956	197	15	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 0
957	199	16	WeibullDistribution.java	inverseCumulativeProbability	p	double	1	DEF	$ == 1
958	226	8	WeibullDistribution.java	getNumericalMean	THIS	WeibullDistribution	0	DEF	$.numericalMeanIsCalculated
959	252	8	WeibullDistribution.java	getNumericalVariance	THIS	WeibullDistribution	0	DEF	$.numericalVarianceIsCalculated
2169	78	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	NullArgumentException	$ == null
2169	78	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	NullArgumentException	$ == null
2170	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	NoDataException	x.$.length == 0
2170	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	NoDataException	y.$.length == 0
2170	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	NoDataException	$.length == 0
2170	82	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	NoDataException	$.length == 0
2171	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	THIS	WilcoxonSignedRankTest	0	DimensionMismatchException	y.$.length != x.$.length
2171	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	x	double[]	0	DimensionMismatchException	y.length != $.length
2171	86	8	WilcoxonSignedRankTest.java	ensureDataConformance	y	double[]	0	DimensionMismatchException	$.length != x.length
24012	102	8	WilcoxonSignedRankTest.java	calculateDifferences	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < x.$.length
24012	102	8	WilcoxonSignedRankTest.java	calculateDifferences	i	int	0	NIL-FOR	$ < x.length
24012	102	8	WilcoxonSignedRankTest.java	calculateDifferences	x	double[]	0	NIL-FOR	i < $.length
2172	120	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NullArgumentException	$ == null
2173	124	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTest	0	NoDataException	z.$.length == 0
2173	124	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NoDataException	$.length == 0
24013	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < z.$.length
24013	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	i	int	0	NIL-FOR	$ < z.length
24013	130	8	WilcoxonSignedRankTest.java	calculateAbsoluteDifferences	z	double[]	0	NIL-FOR	i < $.length
24014	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	THIS	WilcoxonSignedRankTest	0	NIL-FOR	i < z.$.length
24014	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	i	int	0	NIL-FOR	$ < z.length
24014	186	8	WilcoxonSignedRankTest.java	wilcoxonSignedRank	z	double[]	0	NIL-FOR	i < $.length
2174	187	12	WilcoxonSignedRankTest.java	wilcoxonSignedRank	i	int	0	DEF	z[$] > 0
2174	187	12	WilcoxonSignedRankTest.java	wilcoxonSignedRank	z	double[]	0	DEF	$[i] > 0
24015	215	8	WilcoxonSignedRankTest.java	calculateExactPValue	i	int	0	NIL-FOR	$ < m
24015	215	8	WilcoxonSignedRankTest.java	calculateExactPValue	m	int	0	NIL-FOR	i < $
24016	219	12	WilcoxonSignedRankTest.java	calculateExactPValue	j	int	0	NIL-FOR	$ < N
2175	222	16	WilcoxonSignedRankTest.java	calculateExactPValue	j	int	0	DEF	((i >> $) & 1) == 1
2175	222	16	WilcoxonSignedRankTest.java	calculateExactPValue	i	int	0	DEF	(($ >> j) & 1) == 1
2176	227	12	WilcoxonSignedRankTest.java	calculateExactPValue	rankSum	int	0	DEF	$ >= Wmax
2176	227	12	WilcoxonSignedRankTest.java	calculateExactPValue	Wmax	double	0	DEF	rankSum >= $
2177	313	8	WilcoxonSignedRankTest.java	wilcoxonSignedRankTest	exactPValue	boolean	0	NumberIsTooLargeException	$
2178	317	8	WilcoxonSignedRankTest.java	wilcoxonSignedRankTest	exactPValue	boolean	1	RET	$
1095	77	8	ZipfDistribution.java	ZipfDistribution	numberOfElements	int	0	NotStrictlyPositiveException	$ <= 0
1096	81	8	ZipfDistribution.java	ZipfDistribution	exponent	double	0	NotStrictlyPositiveException	$ <= 0
1097	110	8	ZipfDistribution.java	probability	THIS	ZipfDistribution	0	RET	x > $.numberOfElements
1097	110	8	ZipfDistribution.java	probability	x	int	0	RET	$ <= 0
1097	110	8	ZipfDistribution.java	probability	x	int	0	RET	$ > numberOfElements
1098	119	8	ZipfDistribution.java	cumulativeProbability	x	int	1	RET	$ <= 0
1099	121	15	ZipfDistribution.java	cumulativeProbability	THIS	ZipfDistribution	0	RET	x >= $.numberOfElements
1099	121	15	ZipfDistribution.java	cumulativeProbability	x	int	0	RET	$ >= numberOfElements
1100	139	8	ZipfDistribution.java	getNumericalMean	THIS	ZipfDistribution	0	DEF	$.numericalMeanIsCalculated
1101	173	8	ZipfDistribution.java	getNumericalVariance	THIS	ZipfDistribution	0	DEF	$.numericalVarianceIsCalculated
22857	207	8	ZipfDistribution.java	generalizedHarmonic	k	int	0	NIL-FOR	$ > 0
